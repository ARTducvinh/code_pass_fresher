
src_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000834  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009bc  080009c4  000109c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080009bc  080009bc  000109bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080009c0  080009c0  000109c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000109c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000109c4  2**0
                  CONTENTS
  7 .bss          00000038  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  20000038  20000038  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000109c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000212c  00000000  00000000  000109f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000006a1  00000000  00000000  00012b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000198  00000000  00000000  000131c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000130  00000000  00000000  00013360  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000cc2  00000000  00000000  00013490  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000d56  00000000  00000000  00014152  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00014ea8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000041c  00000000  00000000  00014f24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080009a4 	.word	0x080009a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080009a4 	.word	0x080009a4

080001c8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80001d2:	4909      	ldr	r1, [pc, #36]	; (80001f8 <NVIC_EnableIRQ+0x30>)
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	095b      	lsrs	r3, r3, #5
 80001da:	79fa      	ldrb	r2, [r7, #7]
 80001dc:	f002 021f 	and.w	r2, r2, #31
 80001e0:	2001      	movs	r0, #1
 80001e2:	fa00 f202 	lsl.w	r2, r0, r2
 80001e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000e100 	.word	0xe000e100

080001fc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	6039      	str	r1, [r7, #0]
 8000206:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020c:	2b00      	cmp	r3, #0
 800020e:	da0b      	bge.n	8000228 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000210:	490d      	ldr	r1, [pc, #52]	; (8000248 <NVIC_SetPriority+0x4c>)
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	f003 030f 	and.w	r3, r3, #15
 8000218:	3b04      	subs	r3, #4
 800021a:	683a      	ldr	r2, [r7, #0]
 800021c:	b2d2      	uxtb	r2, r2
 800021e:	0112      	lsls	r2, r2, #4
 8000220:	b2d2      	uxtb	r2, r2
 8000222:	440b      	add	r3, r1
 8000224:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000226:	e009      	b.n	800023c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000228:	4908      	ldr	r1, [pc, #32]	; (800024c <NVIC_SetPriority+0x50>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	683a      	ldr	r2, [r7, #0]
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	0112      	lsls	r2, r2, #4
 8000234:	b2d2      	uxtb	r2, r2
 8000236:	440b      	add	r3, r1
 8000238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr
 8000248:	e000ed00 	.word	0xe000ed00
 800024c:	e000e100 	.word	0xe000e100

08000250 <button_init>:
volatile uint8_t button_holding = 0;
volatile uint8_t led_4g_mode = 0; // 0: toggle, 1: blink 200/200, 2: blink 200/500/200/2000
volatile uint8_t led_4g_state = 0;

void button_init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
    // Bật clock cho GPIOA và SYSCFG
    RCC->AHB1ENR |= (1U << 0);
 8000254:	4a1f      	ldr	r2, [pc, #124]	; (80002d4 <button_init+0x84>)
 8000256:	4b1f      	ldr	r3, [pc, #124]	; (80002d4 <button_init+0x84>)
 8000258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= (1U << 14);
 8000260:	4a1c      	ldr	r2, [pc, #112]	; (80002d4 <button_init+0x84>)
 8000262:	4b1c      	ldr	r3, [pc, #112]	; (80002d4 <button_init+0x84>)
 8000264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000266:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800026a:	6453      	str	r3, [r2, #68]	; 0x44
    GPIOA->MODER &= ~(3U << (0 * 2));
 800026c:	4a1a      	ldr	r2, [pc, #104]	; (80002d8 <button_init+0x88>)
 800026e:	4b1a      	ldr	r3, [pc, #104]	; (80002d8 <button_init+0x88>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f023 0303 	bic.w	r3, r3, #3
 8000276:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << (0 * 2));
 8000278:	4a17      	ldr	r2, [pc, #92]	; (80002d8 <button_init+0x88>)
 800027a:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <button_init+0x88>)
 800027c:	68db      	ldr	r3, [r3, #12]
 800027e:	f023 0303 	bic.w	r3, r3, #3
 8000282:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (1U << (0 * 2));
 8000284:	4a14      	ldr	r2, [pc, #80]	; (80002d8 <button_init+0x88>)
 8000286:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <button_init+0x88>)
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	60d3      	str	r3, [r2, #12]
    SYSCFG->EXTICR[0] &= ~(0xF << 0);
 8000290:	4a12      	ldr	r2, [pc, #72]	; (80002dc <button_init+0x8c>)
 8000292:	4b12      	ldr	r3, [pc, #72]	; (80002dc <button_init+0x8c>)
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	f023 030f 	bic.w	r3, r3, #15
 800029a:	6093      	str	r3, [r2, #8]
    EXTI->IMR |= (1U << 0);
 800029c:	4a10      	ldr	r2, [pc, #64]	; (80002e0 <button_init+0x90>)
 800029e:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <button_init+0x90>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= (1U << 0);
 80002a8:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <button_init+0x90>)
 80002aa:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <button_init+0x90>)
 80002ac:	68db      	ldr	r3, [r3, #12]
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	60d3      	str	r3, [r2, #12]
    EXTI->RTSR &= ~(1U << 0);
 80002b4:	4a0a      	ldr	r2, [pc, #40]	; (80002e0 <button_init+0x90>)
 80002b6:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <button_init+0x90>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	f023 0301 	bic.w	r3, r3, #1
 80002be:	6093      	str	r3, [r2, #8]
    NVIC_SetPriority(EXTI0_IRQn, 1);
 80002c0:	2101      	movs	r1, #1
 80002c2:	2006      	movs	r0, #6
 80002c4:	f7ff ff9a 	bl	80001fc <NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 80002c8:	2006      	movs	r0, #6
 80002ca:	f7ff ff7d 	bl	80001c8 <NVIC_EnableIRQ>
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020000 	.word	0x40020000
 80002dc:	40013800 	.word	0x40013800
 80002e0:	40013c00 	.word	0x40013c00

080002e4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1U << 0)) {
 80002ea:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI0_IRQHandler+0xa8>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d046      	beq.n	8000384 <EXTI0_IRQHandler+0xa0>
        if ((GPIOA->IDR & (1U << 0)) == 0) {
 80002f6:	4b26      	ldr	r3, [pc, #152]	; (8000390 <EXTI0_IRQHandler+0xac>)
 80002f8:	691b      	ldr	r3, [r3, #16]
 80002fa:	f003 0301 	and.w	r3, r3, #1
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d108      	bne.n	8000314 <EXTI0_IRQHandler+0x30>
            button_press_time = timer2_get_tick();
 8000302:	f000 f9e7 	bl	80006d4 <timer2_get_tick>
 8000306:	4602      	mov	r2, r0
 8000308:	4b22      	ldr	r3, [pc, #136]	; (8000394 <EXTI0_IRQHandler+0xb0>)
 800030a:	601a      	str	r2, [r3, #0]
            button_holding = 1;
 800030c:	4b22      	ldr	r3, [pc, #136]	; (8000398 <EXTI0_IRQHandler+0xb4>)
 800030e:	2201      	movs	r2, #1
 8000310:	701a      	strb	r2, [r3, #0]
 8000312:	e034      	b.n	800037e <EXTI0_IRQHandler+0x9a>
        } else {
            if (button_holding) {
 8000314:	4b20      	ldr	r3, [pc, #128]	; (8000398 <EXTI0_IRQHandler+0xb4>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	b2db      	uxtb	r3, r3
 800031a:	2b00      	cmp	r3, #0
 800031c:	d02f      	beq.n	800037e <EXTI0_IRQHandler+0x9a>
                uint32_t duration_ms = timer2_get_tick() - button_press_time;
 800031e:	f000 f9d9 	bl	80006d4 <timer2_get_tick>
 8000322:	4602      	mov	r2, r0
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <EXTI0_IRQHandler+0xb0>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	1ad3      	subs	r3, r2, r3
 800032a:	607b      	str	r3, [r7, #4]
                if (duration_ms < 5000) {
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000332:	4293      	cmp	r3, r2
 8000334:	d814      	bhi.n	8000360 <EXTI0_IRQHandler+0x7c>
                    led_4g_state = !led_4g_state;
 8000336:	4b19      	ldr	r3, [pc, #100]	; (800039c <EXTI0_IRQHandler+0xb8>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	b2db      	uxtb	r3, r3
 800033c:	2b00      	cmp	r3, #0
 800033e:	bf0c      	ite	eq
 8000340:	2301      	moveq	r3, #1
 8000342:	2300      	movne	r3, #0
 8000344:	b2db      	uxtb	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	4b14      	ldr	r3, [pc, #80]	; (800039c <EXTI0_IRQHandler+0xb8>)
 800034a:	701a      	strb	r2, [r3, #0]
                    led_4g_toggle(led_4g_state);
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <EXTI0_IRQHandler+0xb8>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	b2db      	uxtb	r3, r3
 8000352:	4618      	mov	r0, r3
 8000354:	f000 f86e 	bl	8000434 <led_4g_toggle>
                    led_4g_mode = 0;
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <EXTI0_IRQHandler+0xbc>)
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
 800035e:	e00b      	b.n	8000378 <EXTI0_IRQHandler+0x94>
                } else if (duration_ms < 10000) {
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f242 720f 	movw	r2, #9999	; 0x270f
 8000366:	4293      	cmp	r3, r2
 8000368:	d803      	bhi.n	8000372 <EXTI0_IRQHandler+0x8e>
                    led_4g_mode = 1;
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <EXTI0_IRQHandler+0xbc>)
 800036c:	2201      	movs	r2, #1
 800036e:	701a      	strb	r2, [r3, #0]
 8000370:	e002      	b.n	8000378 <EXTI0_IRQHandler+0x94>
                } else {
                    led_4g_mode = 2;
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <EXTI0_IRQHandler+0xbc>)
 8000374:	2202      	movs	r2, #2
 8000376:	701a      	strb	r2, [r3, #0]
                }
                button_holding = 0;
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <EXTI0_IRQHandler+0xb4>)
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]
            }
        }
        EXTI->PR = (1U << 0); 
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI0_IRQHandler+0xa8>)
 8000380:	2201      	movs	r2, #1
 8000382:	615a      	str	r2, [r3, #20]
    }
 8000384:	bf00      	nop
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40013c00 	.word	0x40013c00
 8000390:	40020000 	.word	0x40020000
 8000394:	2000001c 	.word	0x2000001c
 8000398:	20000020 	.word	0x20000020
 800039c:	20000022 	.word	0x20000022
 80003a0:	20000021 	.word	0x20000021

080003a4 <led_init>:
#include "stm32f4xx.h"
#include "led.h"
#include "timer.h"

void led_init(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1U << 1); // Enable GPIOB clock
 80003a8:	4a14      	ldr	r2, [pc, #80]	; (80003fc <led_init+0x58>)
 80003aa:	4b14      	ldr	r3, [pc, #80]	; (80003fc <led_init+0x58>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ae:	f043 0302 	orr.w	r3, r3, #2
 80003b2:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure PB4 as output
    GPIOB->MODER &= ~(3U << (4 * 2));
 80003b4:	4a12      	ldr	r2, [pc, #72]	; (8000400 <led_init+0x5c>)
 80003b6:	4b12      	ldr	r3, [pc, #72]	; (8000400 <led_init+0x5c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003be:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (4 * 2));
 80003c0:	4a0f      	ldr	r2, [pc, #60]	; (8000400 <led_init+0x5c>)
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <led_init+0x5c>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ca:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER &= ~(1U << 4);
 80003cc:	4a0c      	ldr	r2, [pc, #48]	; (8000400 <led_init+0x5c>)
 80003ce:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <led_init+0x5c>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	f023 0310 	bic.w	r3, r3, #16
 80003d6:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (4 * 2));
 80003d8:	4a09      	ldr	r2, [pc, #36]	; (8000400 <led_init+0x5c>)
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <led_init+0x5c>)
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80003e2:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (4 * 2));
 80003e4:	4a06      	ldr	r2, [pc, #24]	; (8000400 <led_init+0x5c>)
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <led_init+0x5c>)
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003ee:	60d3      	str	r3, [r2, #12]
    
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40023800 	.word	0x40023800
 8000400:	40020400 	.word	0x40020400

08000404 <led_4g_on>:

void led_4g_on(void) {
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
    GPIOB->BSRRL = (1U << 4); // Reset PB4 (LED ON nếu LED cực âm về GND)
 8000408:	4b03      	ldr	r3, [pc, #12]	; (8000418 <led_4g_on+0x14>)
 800040a:	2210      	movs	r2, #16
 800040c:	831a      	strh	r2, [r3, #24]
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	40020400 	.word	0x40020400

0800041c <led_4g_off>:

void led_4g_off(void) {
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
    GPIOB->BSRRH = (1U << 4); // Set PB4 (LED OFF)
 8000420:	4b03      	ldr	r3, [pc, #12]	; (8000430 <led_4g_off+0x14>)
 8000422:	2210      	movs	r2, #16
 8000424:	835a      	strh	r2, [r3, #26]
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40020400 	.word	0x40020400

08000434 <led_4g_toggle>:

// Toggle PB4
void led_4g_toggle(uint8_t value) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	71fb      	strb	r3, [r7, #7]
    if (value)
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d002      	beq.n	800044a <led_4g_toggle+0x16>
        led_4g_on();
 8000444:	f7ff ffde 	bl	8000404 <led_4g_on>
    else
        led_4g_off();
}
 8000448:	e001      	b.n	800044e <led_4g_toggle+0x1a>
        led_4g_off();
 800044a:	f7ff ffe7 	bl	800041c <led_4g_off>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <led_4g_blink_200_200>:

// Blink PB4: 200ms ON, 200ms OFF
void led_4g_blink_200_200(void) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t led_state = 0;
    uint32_t now = timer2_get_tick();
 800045e:	f000 f939 	bl	80006d4 <timer2_get_tick>
 8000462:	6078      	str	r0, [r7, #4]

    if (now < last_tick) last_tick = now; // chống tràn
 8000464:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <led_4g_blink_200_200+0x68>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	429a      	cmp	r2, r3
 800046c:	d202      	bcs.n	8000474 <led_4g_blink_200_200+0x1c>
 800046e:	4a14      	ldr	r2, [pc, #80]	; (80004c0 <led_4g_blink_200_200+0x68>)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6013      	str	r3, [r2, #0]

    if (led_state) {
 8000474:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <led_4g_blink_200_200+0x6c>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d00e      	beq.n	800049a <led_4g_blink_200_200+0x42>
        if (now - last_tick >= 200) {
 800047c:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <led_4g_blink_200_200+0x68>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	2bc7      	cmp	r3, #199	; 0xc7
 8000486:	d916      	bls.n	80004b6 <led_4g_blink_200_200+0x5e>
            led_4g_off();
 8000488:	f7ff ffc8 	bl	800041c <led_4g_off>
            led_state = 0;
 800048c:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <led_4g_blink_200_200+0x6c>)
 800048e:	2200      	movs	r2, #0
 8000490:	701a      	strb	r2, [r3, #0]
            last_tick = now;
 8000492:	4a0b      	ldr	r2, [pc, #44]	; (80004c0 <led_4g_blink_200_200+0x68>)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	6013      	str	r3, [r2, #0]
            led_4g_on();
            led_state = 1;
            last_tick = now;
        }
    }
}
 8000498:	e00d      	b.n	80004b6 <led_4g_blink_200_200+0x5e>
        if (now - last_tick >= 200) {
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <led_4g_blink_200_200+0x68>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	1ad3      	subs	r3, r2, r3
 80004a2:	2bc7      	cmp	r3, #199	; 0xc7
 80004a4:	d907      	bls.n	80004b6 <led_4g_blink_200_200+0x5e>
            led_4g_on();
 80004a6:	f7ff ffad 	bl	8000404 <led_4g_on>
            led_state = 1;
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <led_4g_blink_200_200+0x6c>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	701a      	strb	r2, [r3, #0]
            last_tick = now;
 80004b0:	4a03      	ldr	r2, [pc, #12]	; (80004c0 <led_4g_blink_200_200+0x68>)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6013      	str	r3, [r2, #0]
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000024 	.word	0x20000024
 80004c4:	20000028 	.word	0x20000028

080004c8 <led_4g_blink_200_500_200_2000>:

// Blink PB4: 200ms ON, 500ms OFF, 200ms ON, 2000ms OFF
void led_4g_blink_200_500_200_2000(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t phase = 0;
    uint32_t now = timer2_get_tick();
 80004ce:	f000 f901 	bl	80006d4 <timer2_get_tick>
 80004d2:	6078      	str	r0, [r7, #4]

    if (now < last_tick) {
 80004d4:	4b31      	ldr	r3, [pc, #196]	; (800059c <led_4g_blink_200_500_200_2000+0xd4>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	429a      	cmp	r2, r3
 80004dc:	d205      	bcs.n	80004ea <led_4g_blink_200_500_200_2000+0x22>
        last_tick = now;
 80004de:	4a2f      	ldr	r2, [pc, #188]	; (800059c <led_4g_blink_200_500_200_2000+0xd4>)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	6013      	str	r3, [r2, #0]
        phase = 0;
 80004e4:	4b2e      	ldr	r3, [pc, #184]	; (80005a0 <led_4g_blink_200_500_200_2000+0xd8>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
    }

    switch (phase) {
 80004ea:	4b2d      	ldr	r3, [pc, #180]	; (80005a0 <led_4g_blink_200_500_200_2000+0xd8>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b03      	cmp	r3, #3
 80004f0:	d84f      	bhi.n	8000592 <led_4g_blink_200_500_200_2000+0xca>
 80004f2:	a201      	add	r2, pc, #4	; (adr r2, 80004f8 <led_4g_blink_200_500_200_2000+0x30>)
 80004f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f8:	08000509 	.word	0x08000509
 80004fc:	08000527 	.word	0x08000527
 8000500:	08000547 	.word	0x08000547
 8000504:	08000565 	.word	0x08000565
        case 0:
            led_4g_on();
 8000508:	f7ff ff7c 	bl	8000404 <led_4g_on>
            if (now - last_tick >= 200) {
 800050c:	4b23      	ldr	r3, [pc, #140]	; (800059c <led_4g_blink_200_500_200_2000+0xd4>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	1ad3      	subs	r3, r2, r3
 8000514:	2bc7      	cmp	r3, #199	; 0xc7
 8000516:	d935      	bls.n	8000584 <led_4g_blink_200_500_200_2000+0xbc>
                last_tick = now;
 8000518:	4a20      	ldr	r2, [pc, #128]	; (800059c <led_4g_blink_200_500_200_2000+0xd4>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6013      	str	r3, [r2, #0]
                phase = 1;
 800051e:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <led_4g_blink_200_500_200_2000+0xd8>)
 8000520:	2201      	movs	r2, #1
 8000522:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000524:	e02e      	b.n	8000584 <led_4g_blink_200_500_200_2000+0xbc>
        case 1:
            led_4g_off();
 8000526:	f7ff ff79 	bl	800041c <led_4g_off>
            if (now - last_tick >= 500) {
 800052a:	4b1c      	ldr	r3, [pc, #112]	; (800059c <led_4g_blink_200_500_200_2000+0xd4>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	1ad3      	subs	r3, r2, r3
 8000532:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000536:	d327      	bcc.n	8000588 <led_4g_blink_200_500_200_2000+0xc0>
                last_tick = now;
 8000538:	4a18      	ldr	r2, [pc, #96]	; (800059c <led_4g_blink_200_500_200_2000+0xd4>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]
                phase = 2;
 800053e:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <led_4g_blink_200_500_200_2000+0xd8>)
 8000540:	2202      	movs	r2, #2
 8000542:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000544:	e020      	b.n	8000588 <led_4g_blink_200_500_200_2000+0xc0>
        case 2:
            led_4g_on();
 8000546:	f7ff ff5d 	bl	8000404 <led_4g_on>
            if (now - last_tick >= 200) {
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <led_4g_blink_200_500_200_2000+0xd4>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	2bc7      	cmp	r3, #199	; 0xc7
 8000554:	d91a      	bls.n	800058c <led_4g_blink_200_500_200_2000+0xc4>
                last_tick = now;
 8000556:	4a11      	ldr	r2, [pc, #68]	; (800059c <led_4g_blink_200_500_200_2000+0xd4>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6013      	str	r3, [r2, #0]
                phase = 3;
 800055c:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <led_4g_blink_200_500_200_2000+0xd8>)
 800055e:	2203      	movs	r2, #3
 8000560:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000562:	e013      	b.n	800058c <led_4g_blink_200_500_200_2000+0xc4>
        case 3:
            led_4g_off();
 8000564:	f7ff ff5a 	bl	800041c <led_4g_off>
            if (now - last_tick >= 2000) {
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <led_4g_blink_200_500_200_2000+0xd4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	1ad3      	subs	r3, r2, r3
 8000570:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000574:	d30c      	bcc.n	8000590 <led_4g_blink_200_500_200_2000+0xc8>
                last_tick = now;
 8000576:	4a09      	ldr	r2, [pc, #36]	; (800059c <led_4g_blink_200_500_200_2000+0xd4>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6013      	str	r3, [r2, #0]
                phase = 0;
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <led_4g_blink_200_500_200_2000+0xd8>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000582:	e005      	b.n	8000590 <led_4g_blink_200_500_200_2000+0xc8>
            break;
 8000584:	bf00      	nop
 8000586:	e004      	b.n	8000592 <led_4g_blink_200_500_200_2000+0xca>
            break;
 8000588:	bf00      	nop
 800058a:	e002      	b.n	8000592 <led_4g_blink_200_500_200_2000+0xca>
            break;
 800058c:	bf00      	nop
 800058e:	e000      	b.n	8000592 <led_4g_blink_200_500_200_2000+0xca>
            break;
 8000590:	bf00      	nop
    }
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000002c 	.word	0x2000002c
 80005a0:	20000030 	.word	0x20000030

080005a4 <NVIC_EnableIRQ>:
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80005ae:	4909      	ldr	r1, [pc, #36]	; (80005d4 <NVIC_EnableIRQ+0x30>)
 80005b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b4:	095b      	lsrs	r3, r3, #5
 80005b6:	79fa      	ldrb	r2, [r7, #7]
 80005b8:	f002 021f 	and.w	r2, r2, #31
 80005bc:	2001      	movs	r0, #1
 80005be:	fa00 f202 	lsl.w	r2, r0, r2
 80005c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000e100 	.word	0xe000e100

080005d8 <NVIC_SetPriority>:
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	6039      	str	r1, [r7, #0]
 80005e2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80005e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	da0b      	bge.n	8000604 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80005ec:	490d      	ldr	r1, [pc, #52]	; (8000624 <NVIC_SetPriority+0x4c>)
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f003 030f 	and.w	r3, r3, #15
 80005f4:	3b04      	subs	r3, #4
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	0112      	lsls	r2, r2, #4
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	440b      	add	r3, r1
 8000600:	761a      	strb	r2, [r3, #24]
}
 8000602:	e009      	b.n	8000618 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000604:	4908      	ldr	r1, [pc, #32]	; (8000628 <NVIC_SetPriority+0x50>)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	0112      	lsls	r2, r2, #4
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	440b      	add	r3, r1
 8000614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00
 8000628:	e000e100 	.word	0xe000e100

0800062c <timer2_init_1ms>:
//     NVIC_SetPriority(TIM2_IRQn, 3);
//     NVIC_EnableIRQ(TIM2_IRQn);
// }

void timer2_init_1ms(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000630:	4a17      	ldr	r2, [pc, #92]	; (8000690 <timer2_init_1ms+0x64>)
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <timer2_init_1ms+0x64>)
 8000634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	6413      	str	r3, [r2, #64]	; 0x40

    // Giả sử bạn đã cấu hình clock hệ thống với HSE 8MHz, PLL ra SYSCLK 168MHz, APB1 prescaler = 4
    // => APB1 = 42MHz, nhưng timer clock = APB1 x2 = 84MHz (khi APB1 prescaler > 1)
    TIM2->PSC = 41;      // 84MHz / (83+1) = 1MHz (1us/tick)
 800063c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000640:	2229      	movs	r2, #41	; 0x29
 8000642:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM2->ARR = 999;     // 1MHz / (999+1) = 1kHz (1ms/ngắt)
 8000644:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000648:	f240 32e7 	movw	r2, #999	; 0x3e7
 800064c:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->EGR = TIM_EGR_UG;
 800064e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000652:	2201      	movs	r2, #1
 8000654:	829a      	strh	r2, [r3, #20]
    TIM2->DIER |= TIM_DIER_UIE;
 8000656:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800065a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800065e:	899b      	ldrh	r3, [r3, #12]
 8000660:	b29b      	uxth	r3, r3
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	b29b      	uxth	r3, r3
 8000668:	8193      	strh	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;
 800066a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800066e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	b29b      	uxth	r3, r3
 800067c:	8013      	strh	r3, [r2, #0]
    NVIC_SetPriority(TIM2_IRQn, 3);
 800067e:	2103      	movs	r1, #3
 8000680:	201c      	movs	r0, #28
 8000682:	f7ff ffa9 	bl	80005d8 <NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8000686:	201c      	movs	r0, #28
 8000688:	f7ff ff8c 	bl	80005a4 <NVIC_EnableIRQ>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800

08000694 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) // Update interrupt flag
 8000698:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800069c:	8a1b      	ldrh	r3, [r3, #16]
 800069e:	b29b      	uxth	r3, r3
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00e      	beq.n	80006c6 <TIM2_IRQHandler+0x32>
    {
        TIM2->SR &= ~TIM_SR_UIF; // Clear flag
 80006a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006b0:	8a1b      	ldrh	r3, [r3, #16]
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	f023 0301 	bic.w	r3, r3, #1
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	8213      	strh	r3, [r2, #16]
        timer2_tick++;
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <TIM2_IRQHandler+0x3c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	3301      	adds	r3, #1
 80006c2:	4a03      	ldr	r2, [pc, #12]	; (80006d0 <TIM2_IRQHandler+0x3c>)
 80006c4:	6013      	str	r3, [r2, #0]
    }
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	20000034 	.word	0x20000034

080006d4 <timer2_get_tick>:

uint32_t timer2_get_tick(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
    return timer2_tick;
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <timer2_get_tick+0x14>)
 80006da:	681b      	ldr	r3, [r3, #0]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20000034 	.word	0x20000034

080006ec <main>:
#include "button.h"

extern volatile uint8_t led_4g_mode;

int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
    timer2_init_1ms();
 80006f0:	f7ff ff9c 	bl	800062c <timer2_init_1ms>
    led_init();
 80006f4:	f7ff fe56 	bl	80003a4 <led_init>
    button_init();
 80006f8:	f7ff fdaa 	bl	8000250 <button_init>

    while (1)
    {
        if (led_4g_mode == 0) {
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <main+0x58>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	bf0c      	ite	eq
 8000706:	2301      	moveq	r3, #1
 8000708:	2300      	movne	r3, #0
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1f5      	bne.n	80006fc <main+0x10>
            // Chế độ toggle: không làm gì, LED điều khiển trực tiếp trong ngắt nút bấm
        } else if (led_4g_mode == 1) {
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <main+0x58>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b01      	cmp	r3, #1
 8000718:	bf0c      	ite	eq
 800071a:	2301      	moveq	r3, #1
 800071c:	2300      	movne	r3, #0
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	d002      	beq.n	800072a <main+0x3e>
            led_4g_blink_200_200();
 8000724:	f7ff fe98 	bl	8000458 <led_4g_blink_200_200>
 8000728:	e7e8      	b.n	80006fc <main+0x10>
        } else if (led_4g_mode == 2) {
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <main+0x58>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b02      	cmp	r3, #2
 8000732:	bf0c      	ite	eq
 8000734:	2301      	moveq	r3, #1
 8000736:	2300      	movne	r3, #0
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d0de      	beq.n	80006fc <main+0x10>
            led_4g_blink_200_500_200_2000();
 800073e:	f7ff fec3 	bl	80004c8 <led_4g_blink_200_500_200_2000>
        if (led_4g_mode == 0) {
 8000742:	e7db      	b.n	80006fc <main+0x10>
 8000744:	20000021 	.word	0x20000021

08000748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000780 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800074c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800074e:	e003      	b.n	8000758 <LoopCopyDataInit>

08000750 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000752:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000754:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000756:	3104      	adds	r1, #4

08000758 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000758:	480b      	ldr	r0, [pc, #44]	; (8000788 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800075c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800075e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000760:	d3f6      	bcc.n	8000750 <CopyDataInit>
  ldr  r2, =_sbss
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000764:	e002      	b.n	800076c <LoopFillZerobss>

08000766 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000766:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000768:	f842 3b04 	str.w	r3, [r2], #4

0800076c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800076e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000770:	d3f9      	bcc.n	8000766 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000772:	f000 f841 	bl	80007f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000776:	f000 f8f1 	bl	800095c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800077a:	f7ff ffb7 	bl	80006ec <main>
  bx  lr    
 800077e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000780:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000784:	080009c4 	.word	0x080009c4
  ldr  r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800078c:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000790:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000794:	20000038 	.word	0x20000038

08000798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC_IRQHandler>

0800079a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <HardFault_Handler+0x4>

080007ae <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <MemManage_Handler+0x4>

080007b4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <BusFault_Handler+0x4>

080007ba <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80007be:	e7fe      	b.n	80007be <UsageFault_Handler+0x4>

080007c0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007fc:	4a16      	ldr	r2, [pc, #88]	; (8000858 <SystemInit+0x60>)
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <SystemInit+0x60>)
 8000800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800080c:	4a13      	ldr	r2, [pc, #76]	; (800085c <SystemInit+0x64>)
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <SystemInit+0x64>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000818:	4b10      	ldr	r3, [pc, #64]	; (800085c <SystemInit+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800081e:	4a0f      	ldr	r2, [pc, #60]	; (800085c <SystemInit+0x64>)
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <SystemInit+0x64>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800082c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <SystemInit+0x64>)
 8000830:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <SystemInit+0x68>)
 8000832:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000834:	4a09      	ldr	r2, [pc, #36]	; (800085c <SystemInit+0x64>)
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <SystemInit+0x64>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800083e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <SystemInit+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000846:	f000 f80d 	bl	8000864 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800084a:	4b03      	ldr	r3, [pc, #12]	; (8000858 <SystemInit+0x60>)
 800084c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000850:	609a      	str	r2, [r3, #8]
#endif
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	e000ed00 	.word	0xe000ed00
 800085c:	40023800 	.word	0x40023800
 8000860:	24003010 	.word	0x24003010

08000864 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000872:	4a36      	ldr	r2, [pc, #216]	; (800094c <SetSysClock+0xe8>)
 8000874:	4b35      	ldr	r3, [pc, #212]	; (800094c <SetSysClock+0xe8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800087c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800087e:	4b33      	ldr	r3, [pc, #204]	; (800094c <SetSysClock+0xe8>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000886:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3301      	adds	r3, #1
 800088c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d103      	bne.n	800089c <SetSysClock+0x38>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800089a:	d1f0      	bne.n	800087e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800089c:	4b2b      	ldr	r3, [pc, #172]	; (800094c <SetSysClock+0xe8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d002      	beq.n	80008ae <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80008a8:	2301      	movs	r3, #1
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	e001      	b.n	80008b2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d142      	bne.n	800093e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80008b8:	4a24      	ldr	r2, [pc, #144]	; (800094c <SetSysClock+0xe8>)
 80008ba:	4b24      	ldr	r3, [pc, #144]	; (800094c <SetSysClock+0xe8>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80008c4:	4a22      	ldr	r2, [pc, #136]	; (8000950 <SetSysClock+0xec>)
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <SetSysClock+0xec>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ce:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80008d0:	4a1e      	ldr	r2, [pc, #120]	; (800094c <SetSysClock+0xe8>)
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <SetSysClock+0xe8>)
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80008d8:	4a1c      	ldr	r2, [pc, #112]	; (800094c <SetSysClock+0xe8>)
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <SetSysClock+0xe8>)
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80008e4:	4a19      	ldr	r2, [pc, #100]	; (800094c <SetSysClock+0xe8>)
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <SetSysClock+0xe8>)
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80008ee:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <SetSysClock+0xe8>)
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <SetSysClock+0xf0>)
 80008f4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80008f6:	4a15      	ldr	r2, [pc, #84]	; (800094c <SetSysClock+0xe8>)
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <SetSysClock+0xe8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000900:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000902:	bf00      	nop
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <SetSysClock+0xe8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800090c:	2b00      	cmp	r3, #0
 800090e:	d0f9      	beq.n	8000904 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <SetSysClock+0xf4>)
 8000912:	f240 7205 	movw	r2, #1797	; 0x705
 8000916:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000918:	4a0c      	ldr	r2, [pc, #48]	; (800094c <SetSysClock+0xe8>)
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <SetSysClock+0xe8>)
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	f023 0303 	bic.w	r3, r3, #3
 8000922:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000924:	4a09      	ldr	r2, [pc, #36]	; (800094c <SetSysClock+0xe8>)
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <SetSysClock+0xe8>)
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	f043 0302 	orr.w	r3, r3, #2
 800092e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000930:	bf00      	nop
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <SetSysClock+0xe8>)
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	f003 030c 	and.w	r3, r3, #12
 800093a:	2b08      	cmp	r3, #8
 800093c:	d1f9      	bne.n	8000932 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40007000 	.word	0x40007000
 8000954:	07405419 	.word	0x07405419
 8000958:	40023c00 	.word	0x40023c00

0800095c <__libc_init_array>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	4e0d      	ldr	r6, [pc, #52]	; (8000994 <__libc_init_array+0x38>)
 8000960:	4c0d      	ldr	r4, [pc, #52]	; (8000998 <__libc_init_array+0x3c>)
 8000962:	1ba4      	subs	r4, r4, r6
 8000964:	10a4      	asrs	r4, r4, #2
 8000966:	2500      	movs	r5, #0
 8000968:	42a5      	cmp	r5, r4
 800096a:	d109      	bne.n	8000980 <__libc_init_array+0x24>
 800096c:	4e0b      	ldr	r6, [pc, #44]	; (800099c <__libc_init_array+0x40>)
 800096e:	4c0c      	ldr	r4, [pc, #48]	; (80009a0 <__libc_init_array+0x44>)
 8000970:	f000 f818 	bl	80009a4 <_init>
 8000974:	1ba4      	subs	r4, r4, r6
 8000976:	10a4      	asrs	r4, r4, #2
 8000978:	2500      	movs	r5, #0
 800097a:	42a5      	cmp	r5, r4
 800097c:	d105      	bne.n	800098a <__libc_init_array+0x2e>
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000984:	4798      	blx	r3
 8000986:	3501      	adds	r5, #1
 8000988:	e7ee      	b.n	8000968 <__libc_init_array+0xc>
 800098a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800098e:	4798      	blx	r3
 8000990:	3501      	adds	r5, #1
 8000992:	e7f2      	b.n	800097a <__libc_init_array+0x1e>
 8000994:	080009bc 	.word	0x080009bc
 8000998:	080009bc 	.word	0x080009bc
 800099c:	080009bc 	.word	0x080009bc
 80009a0:	080009c0 	.word	0x080009c0

080009a4 <_init>:
 80009a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a6:	bf00      	nop
 80009a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009aa:	bc08      	pop	{r3}
 80009ac:	469e      	mov	lr, r3
 80009ae:	4770      	bx	lr

080009b0 <_fini>:
 80009b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b2:	bf00      	nop
 80009b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009b6:	bc08      	pop	{r3}
 80009b8:	469e      	mov	lr, r3
 80009ba:	4770      	bx	lr
