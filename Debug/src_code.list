
src_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018b80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000053dc  08018d10  08018d10  00028d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801e0ec  0801e0ec  0002e0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801e0f0  0801e0f0  0002e0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  20000000  0801e0f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000301f8  2**0
                  CONTENTS
  7 .bss          00004084  200001f8  200001f8  000301f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  2000427c  2000427c  000301f8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00040c62  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007578  00000000  00000000  00070e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000017f8  00000000  00000000  00078408  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000017a8  00000000  00000000  00079c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00012239  00000000  00000000  0007b3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006628  00000000  00000000  0008d5e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00093c09  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006524  00000000  00000000  00093c88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018cf8 	.word	0x08018cf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08018cf8 	.word	0x08018cf8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <send_gsm_command_by_index>:
#include <string.h>
#include <stdbool.h>
#include "uart_line_queue.h"// định nghĩa tạm thời cho biến ppp_mode để xác định trạng thái 

// Hàm gửi lệnh AT dựa trên chỉ số lệnh trong gsm_commands
void send_gsm_command_by_index(int idx) {
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
    if (idx < 0 || idx >= gsm_commands_count) return;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	db1d      	blt.n	80002ea <send_gsm_command_by_index+0x4a>
 80002ae:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <send_gsm_command_by_index+0x54>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	da18      	bge.n	80002ea <send_gsm_command_by_index+0x4a>
    uart1_send_raw((uint8_t *)gsm_commands[idx].syntax, strlen(gsm_commands[idx].syntax));
 80002b8:	4a0f      	ldr	r2, [pc, #60]	; (80002f8 <send_gsm_command_by_index+0x58>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	011b      	lsls	r3, r3, #4
 80002be:	4413      	add	r3, r2
 80002c0:	3304      	adds	r3, #4
 80002c2:	681c      	ldr	r4, [r3, #0]
 80002c4:	4a0c      	ldr	r2, [pc, #48]	; (80002f8 <send_gsm_command_by_index+0x58>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	011b      	lsls	r3, r3, #4
 80002ca:	4413      	add	r3, r2
 80002cc:	3304      	adds	r3, #4
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f7ff ff87 	bl	80001e4 <strlen>
 80002d6:	4603      	mov	r3, r0
 80002d8:	4619      	mov	r1, r3
 80002da:	4620      	mov	r0, r4
 80002dc:	f000 fca2 	bl	8000c24 <uart1_send_raw>
    uart1_send_raw((uint8_t *)"\r\n", 2);
 80002e0:	2102      	movs	r1, #2
 80002e2:	4806      	ldr	r0, [pc, #24]	; (80002fc <send_gsm_command_by_index+0x5c>)
 80002e4:	f000 fc9e 	bl	8000c24 <uart1_send_raw>
 80002e8:	e000      	b.n	80002ec <send_gsm_command_by_index+0x4c>
    if (idx < 0 || idx >= gsm_commands_count) return;
 80002ea:	bf00      	nop
}
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd90      	pop	{r4, r7, pc}
 80002f2:	bf00      	nop
 80002f4:	0801da18 	.word	0x0801da18
 80002f8:	0801d968 	.word	0x0801d968
 80002fc:	08018d10 	.word	0x08018d10

08000300 <send_all_gsm_commands_with_check>:

// Hàm gửi lần lượt các lệnh, chỉ gửi tiếp khi phản hồi thành công
void send_all_gsm_commands_with_check(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b0d4      	sub	sp, #336	; 0x150
 8000304:	af02      	add	r7, sp, #8
    static uint32_t start_tick = 0;
    static uint32_t last_send_tick = 0;
    static bool waiting_for_response = false;
    char response[256];

    if (current_command_index >= gsm_commands_count) {
 8000306:	4b40      	ldr	r3, [pc, #256]	; (8000408 <send_all_gsm_commands_with_check+0x108>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	4b40      	ldr	r3, [pc, #256]	; (800040c <send_all_gsm_commands_with_check+0x10c>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	429a      	cmp	r2, r3
 8000310:	da75      	bge.n	80003fe <send_all_gsm_commands_with_check+0xfe>
        return; // Đã gửi hết lệnh
    }

    if (!waiting_for_response) {
 8000312:	4b3f      	ldr	r3, [pc, #252]	; (8000410 <send_all_gsm_commands_with_check+0x110>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	f083 0301 	eor.w	r3, r3, #1
 800031a:	b2db      	uxtb	r3, r3
 800031c:	2b00      	cmp	r3, #0
 800031e:	d00e      	beq.n	800033e <send_all_gsm_commands_with_check+0x3e>
        start_tick = timer2_get_tick();
 8000320:	f000 fb7c 	bl	8000a1c <timer2_get_tick>
 8000324:	4602      	mov	r2, r0
 8000326:	4b3b      	ldr	r3, [pc, #236]	; (8000414 <send_all_gsm_commands_with_check+0x114>)
 8000328:	601a      	str	r2, [r3, #0]
        last_send_tick = start_tick - 5000;
 800032a:	4b3a      	ldr	r3, [pc, #232]	; (8000414 <send_all_gsm_commands_with_check+0x114>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000332:	3b08      	subs	r3, #8
 8000334:	4a38      	ldr	r2, [pc, #224]	; (8000418 <send_all_gsm_commands_with_check+0x118>)
 8000336:	6013      	str	r3, [r2, #0]
        waiting_for_response = true;
 8000338:	4b35      	ldr	r3, [pc, #212]	; (8000410 <send_all_gsm_commands_with_check+0x110>)
 800033a:	2201      	movs	r2, #1
 800033c:	701a      	strb	r2, [r3, #0]
    }

    uint32_t wait_time = gsm_commands[current_command_index].max_response_time_ms;
 800033e:	4b32      	ldr	r3, [pc, #200]	; (8000408 <send_all_gsm_commands_with_check+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a36      	ldr	r2, [pc, #216]	; (800041c <send_all_gsm_commands_with_check+0x11c>)
 8000344:	011b      	lsls	r3, r3, #4
 8000346:	4413      	add	r3, r2
 8000348:	330c      	adds	r3, #12
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    if ((timer2_get_tick() - start_tick) < wait_time) {
 8000350:	f000 fb64 	bl	8000a1c <timer2_get_tick>
 8000354:	4602      	mov	r2, r0
 8000356:	4b2f      	ldr	r3, [pc, #188]	; (8000414 <send_all_gsm_commands_with_check+0x114>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	1ad2      	subs	r2, r2, r3
 800035c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000360:	429a      	cmp	r2, r3
 8000362:	d231      	bcs.n	80003c8 <send_all_gsm_commands_with_check+0xc8>
        if ((timer2_get_tick() - last_send_tick) >= 5000) {
 8000364:	f000 fb5a 	bl	8000a1c <timer2_get_tick>
 8000368:	4602      	mov	r2, r0
 800036a:	4b2b      	ldr	r3, [pc, #172]	; (8000418 <send_all_gsm_commands_with_check+0x118>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	1ad3      	subs	r3, r2, r3
 8000370:	f241 3287 	movw	r2, #4999	; 0x1387
 8000374:	4293      	cmp	r3, r2
 8000376:	d91e      	bls.n	80003b6 <send_all_gsm_commands_with_check+0xb6>
            send_gsm_command_by_index(current_command_index);
 8000378:	4b23      	ldr	r3, [pc, #140]	; (8000408 <send_all_gsm_commands_with_check+0x108>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff ff8f 	bl	80002a0 <send_gsm_command_by_index>
            last_send_tick = timer2_get_tick();
 8000382:	f000 fb4b 	bl	8000a1c <timer2_get_tick>
 8000386:	4602      	mov	r2, r0
 8000388:	4b23      	ldr	r3, [pc, #140]	; (8000418 <send_all_gsm_commands_with_check+0x118>)
 800038a:	601a      	str	r2, [r3, #0]
        }
        while (uart_line_queue_pop(response)) {
 800038c:	e013      	b.n	80003b6 <send_all_gsm_commands_with_check+0xb6>
            if (check_gsm_response_by_index(current_command_index, response)) {
 800038e:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <send_all_gsm_commands_with_check+0x108>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000396:	4611      	mov	r1, r2
 8000398:	4618      	mov	r0, r3
 800039a:	f000 f957 	bl	800064c <check_gsm_response_by_index>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d008      	beq.n	80003b6 <send_all_gsm_commands_with_check+0xb6>
                waiting_for_response = false;
 80003a4:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <send_all_gsm_commands_with_check+0x110>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
                current_command_index++;
 80003aa:	4b17      	ldr	r3, [pc, #92]	; (8000408 <send_all_gsm_commands_with_check+0x108>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	3301      	adds	r3, #1
 80003b0:	4a15      	ldr	r2, [pc, #84]	; (8000408 <send_all_gsm_commands_with_check+0x108>)
 80003b2:	6013      	str	r3, [r2, #0]
                return; // Chuyển sang lệnh tiếp theo
 80003b4:	e024      	b.n	8000400 <send_all_gsm_commands_with_check+0x100>
        while (uart_line_queue_pop(response)) {
 80003b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 fe0a 	bl	8000fd4 <uart_line_queue_pop>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d1e3      	bne.n	800038e <send_all_gsm_commands_with_check+0x8e>
 80003c6:	e01b      	b.n	8000400 <send_all_gsm_commands_with_check+0x100>
            }
        }
    } else {
        char log_buf[64];
        snprintf(log_buf, sizeof(log_buf), "Loi khi gui lenh case %d: %s", current_command_index, gsm_commands[current_command_index].command);
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <send_all_gsm_commands_with_check+0x108>)
 80003ca:	6819      	ldr	r1, [r3, #0]
 80003cc:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <send_all_gsm_commands_with_check+0x108>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a12      	ldr	r2, [pc, #72]	; (800041c <send_all_gsm_commands_with_check+0x11c>)
 80003d2:	011b      	lsls	r3, r3, #4
 80003d4:	4413      	add	r3, r2
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	1d38      	adds	r0, r7, #4
 80003da:	9300      	str	r3, [sp, #0]
 80003dc:	460b      	mov	r3, r1
 80003de:	4a10      	ldr	r2, [pc, #64]	; (8000420 <send_all_gsm_commands_with_check+0x120>)
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	f018 f877 	bl	80184d4 <sniprintf>
        uart_log(log_buf);
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 fbe3 	bl	8000bb4 <uart_log>
        waiting_for_response = false;
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <send_all_gsm_commands_with_check+0x110>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	701a      	strb	r2, [r3, #0]
        current_command_index = gsm_commands_count; // Kết thúc gửi lệnh
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <send_all_gsm_commands_with_check+0x10c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a03      	ldr	r2, [pc, #12]	; (8000408 <send_all_gsm_commands_with_check+0x108>)
 80003fa:	6013      	str	r3, [r2, #0]
 80003fc:	e000      	b.n	8000400 <send_all_gsm_commands_with_check+0x100>
        return; // Đã gửi hết lệnh
 80003fe:	bf00      	nop
    }
 8000400:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000214 	.word	0x20000214
 800040c:	0801da18 	.word	0x0801da18
 8000410:	20000218 	.word	0x20000218
 8000414:	2000021c 	.word	0x2000021c
 8000418:	20000220 	.word	0x20000220
 800041c:	0801d968 	.word	0x0801d968
 8000420:	08018d14 	.word	0x08018d14

08000424 <parse_response_at>:
#include "gsm_state.h"
#include "ppp_net/ppp_connection.h" // Thêm header để truy cập gsm_ppp_mode


// Hàm phân tích phản hồi cho lệnh "AT"
bool parse_response_at(const char* response) {
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800042c:	6878      	ldr	r0, [r7, #4]
 800042e:	f000 fbc1 	bl	8000bb4 <uart_log>
    return strstr(response, "OK") != NULL;
 8000432:	4907      	ldr	r1, [pc, #28]	; (8000450 <parse_response_at+0x2c>)
 8000434:	6878      	ldr	r0, [r7, #4]
 8000436:	f018 f8d9 	bl	80185ec <strstr>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	bf14      	ite	ne
 8000440:	2301      	movne	r3, #1
 8000442:	2300      	moveq	r3, #0
 8000444:	b2db      	uxtb	r3, r3
}
 8000446:	4618      	mov	r0, r3
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	08018e94 	.word	0x08018e94

08000454 <parse_response_ati>:

// Hàm phân tích phản hồi cho lệnh "ATI"
bool parse_response_ati(const char* response) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f000 fba9 	bl	8000bb4 <uart_log>
    return strstr(response, "Manufacturer: INCORPORATED") != NULL; // Dòng dữ liệu chính
 8000462:	4907      	ldr	r1, [pc, #28]	; (8000480 <parse_response_ati+0x2c>)
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f018 f8c1 	bl	80185ec <strstr>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	bf14      	ite	ne
 8000470:	2301      	movne	r3, #1
 8000472:	2300      	moveq	r3, #0
 8000474:	b2db      	uxtb	r3, r3
}
 8000476:	4618      	mov	r0, r3
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	08018e98 	.word	0x08018e98

08000484 <parse_response_at_cpin>:

// Hàm phân tích phản hồi cho lệnh "AT+CPIN?"
bool parse_response_at_cpin(const char* response) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f000 fb91 	bl	8000bb4 <uart_log>
    return strstr(response, "+CPIN: READY") != NULL; // Dòng dữ liệu chính
 8000492:	4907      	ldr	r1, [pc, #28]	; (80004b0 <parse_response_at_cpin+0x2c>)
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f018 f8a9 	bl	80185ec <strstr>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	bf14      	ite	ne
 80004a0:	2301      	movne	r3, #1
 80004a2:	2300      	moveq	r3, #0
 80004a4:	b2db      	uxtb	r3, r3
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	08018eb4 	.word	0x08018eb4

080004b4 <parse_response_at_csq>:

// Hàm phân tích phản hồi cho lệnh "AT+CSQ"
bool parse_response_at_csq(const char* response) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f000 fb79 	bl	8000bb4 <uart_log>
    return strstr(response, "+CSQ:") != NULL; // Dòng dữ liệu chính
 80004c2:	4907      	ldr	r1, [pc, #28]	; (80004e0 <parse_response_at_csq+0x2c>)
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f018 f891 	bl	80185ec <strstr>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	bf14      	ite	ne
 80004d0:	2301      	movne	r3, #1
 80004d2:	2300      	moveq	r3, #0
 80004d4:	b2db      	uxtb	r3, r3
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	08018ec4 	.word	0x08018ec4

080004e4 <parse_response_at_cereg>:

// Hàm phân tích phản hồi cho lệnh "AT+CEREG?"
bool parse_response_at_cereg(const char* response) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f000 fb61 	bl	8000bb4 <uart_log>
    return strstr(response, "+CEREG: 0,1") != NULL; // Dòng dữ liệu chính
 80004f2:	4907      	ldr	r1, [pc, #28]	; (8000510 <parse_response_at_cereg+0x2c>)
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f018 f879 	bl	80185ec <strstr>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	bf14      	ite	ne
 8000500:	2301      	movne	r3, #1
 8000502:	2300      	moveq	r3, #0
 8000504:	b2db      	uxtb	r3, r3
}
 8000506:	4618      	mov	r0, r3
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	08018ecc 	.word	0x08018ecc

08000514 <parse_response_at_cops>:

// Hàm phân tích phản hồi cho lệnh "AT+COPS"
bool parse_response_at_cops(const char* response) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f000 fb49 	bl	8000bb4 <uart_log>
    return strstr(response, "+COPS=0") != NULL; // Dòng dữ liệu chính
 8000522:	4907      	ldr	r1, [pc, #28]	; (8000540 <parse_response_at_cops+0x2c>)
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f018 f861 	bl	80185ec <strstr>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	bf14      	ite	ne
 8000530:	2301      	movne	r3, #1
 8000532:	2300      	moveq	r3, #0
 8000534:	b2db      	uxtb	r3, r3
}
 8000536:	4618      	mov	r0, r3
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	08018ed8 	.word	0x08018ed8

08000544 <parse_response_at_cgdcont>:

// Hàm phân tích phản hồi cho lệnh "AT+CGDCONT"
bool parse_response_at_cgdcont(const char* response) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f000 fb31 	bl	8000bb4 <uart_log>
    return strstr(response, "OK") != NULL; // Dòng xác nhận
 8000552:	4907      	ldr	r1, [pc, #28]	; (8000570 <parse_response_at_cgdcont+0x2c>)
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f018 f849 	bl	80185ec <strstr>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	bf14      	ite	ne
 8000560:	2301      	movne	r3, #1
 8000562:	2300      	moveq	r3, #0
 8000564:	b2db      	uxtb	r3, r3
}
 8000566:	4618      	mov	r0, r3
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	08018e94 	.word	0x08018e94

08000574 <parse_response_at_cgauth>:

// Hàm phân tích phản hồi cho lệnh "AT+CGAUTH"
bool parse_response_at_cgauth(const char* response) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f000 fb19 	bl	8000bb4 <uart_log>
    return strstr(response, "OK") != NULL; // Dòng xác nhận
 8000582:	4907      	ldr	r1, [pc, #28]	; (80005a0 <parse_response_at_cgauth+0x2c>)
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f018 f831 	bl	80185ec <strstr>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	bf14      	ite	ne
 8000590:	2301      	movne	r3, #1
 8000592:	2300      	moveq	r3, #0
 8000594:	b2db      	uxtb	r3, r3
}
 8000596:	4618      	mov	r0, r3
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	08018e94 	.word	0x08018e94

080005a4 <parse_response_at_cgact>:

// Hàm phân tích phản hồi cho lệnh "AT+CGACT"
bool parse_response_at_cgact(const char* response) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 fb01 	bl	8000bb4 <uart_log>
    return strstr(response, "OK") != NULL; // Dòng xác nhận
 80005b2:	4907      	ldr	r1, [pc, #28]	; (80005d0 <parse_response_at_cgact+0x2c>)
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f018 f819 	bl	80185ec <strstr>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	bf14      	ite	ne
 80005c0:	2301      	movne	r3, #1
 80005c2:	2300      	moveq	r3, #0
 80005c4:	b2db      	uxtb	r3, r3
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	08018e94 	.word	0x08018e94

080005d4 <parse_response_at_cgpaddr>:

// Hàm phân tích phản hồi cho lệnh "AT+CGPADDR"
bool parse_response_at_cgpaddr(const char* response) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 fae9 	bl	8000bb4 <uart_log>
    return strstr(response, "+CGPADDR: 1,") != NULL; // Dòng dữ liệu chính
 80005e2:	4907      	ldr	r1, [pc, #28]	; (8000600 <parse_response_at_cgpaddr+0x2c>)
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f018 f801 	bl	80185ec <strstr>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bf14      	ite	ne
 80005f0:	2301      	movne	r3, #1
 80005f2:	2300      	moveq	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	08018ee0 	.word	0x08018ee0

08000604 <parse_response_atd99>:
    uart_log(response);
    return strstr(response, "CONNECT") != NULL; // Dòng dữ liệu chính
}

// Hàm phân tích phản hồi cho lệnh "ATD*99#"
bool parse_response_atd99(const char* response) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 fad1 	bl	8000bb4 <uart_log>
    if (strstr(response, "CONNECT") != NULL) {
 8000612:	490b      	ldr	r1, [pc, #44]	; (8000640 <parse_response_atd99+0x3c>)
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f017 ffe9 	bl	80185ec <strstr>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d009      	beq.n	8000634 <parse_response_atd99+0x30>
        // Khi nhận được "CONNECT", chuyển sang chế độ PPP
        // Cờ này sẽ được sử dụng trong uart1_poll() để chuyển dữ liệu đến lwIP
        gsm_ppp_mode = true;
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <parse_response_atd99+0x40>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
        uart_log("Switching to PPP mode.");
 8000626:	4808      	ldr	r0, [pc, #32]	; (8000648 <parse_response_atd99+0x44>)
 8000628:	f000 fac4 	bl	8000bb4 <uart_log>
        
        // Xóa bộ đệm DMA và bắt đầu nhận dữ liệu PPP.
        // Điều này đảm bảo rằng không có dữ liệu AT command cũ nào bị xử lý như dữ liệu PPP.
        restart_dma2_stream2(); 
 800062c:	f000 fc4c 	bl	8000ec8 <restart_dma2_stream2>
        
        return true;
 8000630:	2301      	movs	r3, #1
 8000632:	e000      	b.n	8000636 <parse_response_atd99+0x32>
    }
    return false;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	08018ef0 	.word	0x08018ef0
 8000644:	200006c4 	.word	0x200006c4
 8000648:	08018ef8 	.word	0x08018ef8

0800064c <check_gsm_response_by_index>:


bool ppp_mode = false;

// Hàm kiểm tra phản hồi dựa trên chỉ số lệnh trong gsm_commands
bool check_gsm_response_by_index(int idx, const char* response) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
    switch (idx) {
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b0a      	cmp	r3, #10
 800065a:	d855      	bhi.n	8000708 <check_gsm_response_by_index+0xbc>
 800065c:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <check_gsm_response_by_index+0x18>)
 800065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000662:	bf00      	nop
 8000664:	08000691 	.word	0x08000691
 8000668:	0800069b 	.word	0x0800069b
 800066c:	080006a5 	.word	0x080006a5
 8000670:	080006af 	.word	0x080006af
 8000674:	080006b9 	.word	0x080006b9
 8000678:	080006c3 	.word	0x080006c3
 800067c:	080006d7 	.word	0x080006d7
 8000680:	080006e1 	.word	0x080006e1
 8000684:	080006eb 	.word	0x080006eb
 8000688:	080006f5 	.word	0x080006f5
 800068c:	080006ff 	.word	0x080006ff
        case 0: // AT
            return parse_response_at(response);
 8000690:	6838      	ldr	r0, [r7, #0]
 8000692:	f7ff fec7 	bl	8000424 <parse_response_at>
 8000696:	4603      	mov	r3, r0
 8000698:	e037      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 1: // ATI
            return parse_response_ati(response);
 800069a:	6838      	ldr	r0, [r7, #0]
 800069c:	f7ff feda 	bl	8000454 <parse_response_ati>
 80006a0:	4603      	mov	r3, r0
 80006a2:	e032      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 2: // AT+CPIN?
            return parse_response_at_cpin(response);
 80006a4:	6838      	ldr	r0, [r7, #0]
 80006a6:	f7ff feed 	bl	8000484 <parse_response_at_cpin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	e02d      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 3: // AT+CSQ
            return parse_response_at_csq(response);
 80006ae:	6838      	ldr	r0, [r7, #0]
 80006b0:	f7ff ff00 	bl	80004b4 <parse_response_at_csq>
 80006b4:	4603      	mov	r3, r0
 80006b6:	e028      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 4: // AT+CEREG?
            return parse_response_at_cereg(response);
 80006b8:	6838      	ldr	r0, [r7, #0]
 80006ba:	f7ff ff13 	bl	80004e4 <parse_response_at_cereg>
 80006be:	4603      	mov	r3, r0
 80006c0:	e023      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 5: // AT+COPS
            return parse_response_at_cops(response);
 80006c2:	6838      	ldr	r0, [r7, #0]
 80006c4:	f7ff ff26 	bl	8000514 <parse_response_at_cops>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	bf14      	ite	ne
 80006ce:	2301      	movne	r3, #1
 80006d0:	2300      	moveq	r3, #0
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	e019      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 6: // AT+CGDCONT
            return parse_response_at_cgdcont(response);
 80006d6:	6838      	ldr	r0, [r7, #0]
 80006d8:	f7ff ff34 	bl	8000544 <parse_response_at_cgdcont>
 80006dc:	4603      	mov	r3, r0
 80006de:	e014      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 7: // AT+CGAUTH
            return parse_response_at_cgauth(response);
 80006e0:	6838      	ldr	r0, [r7, #0]
 80006e2:	f7ff ff47 	bl	8000574 <parse_response_at_cgauth>
 80006e6:	4603      	mov	r3, r0
 80006e8:	e00f      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 8: // AT+CGACT
            return parse_response_at_cgact(response);
 80006ea:	6838      	ldr	r0, [r7, #0]
 80006ec:	f7ff ff5a 	bl	80005a4 <parse_response_at_cgact>
 80006f0:	4603      	mov	r3, r0
 80006f2:	e00a      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 9: // AT+CGPADDR
            return parse_response_at_cgpaddr(response);
 80006f4:	6838      	ldr	r0, [r7, #0]
 80006f6:	f7ff ff6d 	bl	80005d4 <parse_response_at_cgpaddr>
 80006fa:	4603      	mov	r3, r0
 80006fc:	e005      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 10: // ATD*99#
            return parse_response_atd99(response);
 80006fe:	6838      	ldr	r0, [r7, #0]
 8000700:	f7ff ff80 	bl	8000604 <parse_response_atd99>
 8000704:	4603      	mov	r3, r0
 8000706:	e000      	b.n	800070a <check_gsm_response_by_index+0xbe>
        // case 11: // +++
        //     return parse_response_plus(response);
        // case 12: // ATH
        //     return parse_response_ath(response);
        default:
            return false;
 8000708:	2300      	movs	r3, #0
    }
 800070a:	4618      	mov	r0, r3
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop

08000714 <button_init>:
#include "button.h"

void button_init(void)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
    // Cấu hình input pull-up
    uint8_t pin = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 16; ++i) {
 800071e:	2300      	movs	r3, #0
 8000720:	71bb      	strb	r3, [r7, #6]
 8000722:	e008      	b.n	8000736 <button_init+0x22>
        if (BUTTON_PIN & (1U << i)) { pin = i; break; }
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d102      	bne.n	8000730 <button_init+0x1c>
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	e005      	b.n	800073c <button_init+0x28>
    for (uint8_t i = 0; i < 16; ++i) {
 8000730:	79bb      	ldrb	r3, [r7, #6]
 8000732:	3301      	adds	r3, #1
 8000734:	71bb      	strb	r3, [r7, #6]
 8000736:	79bb      	ldrb	r3, [r7, #6]
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d9f3      	bls.n	8000724 <button_init+0x10>
    }
    BUTTON_PORT->MODER &= ~(3U << (pin * 2));
 800073c:	4912      	ldr	r1, [pc, #72]	; (8000788 <button_init+0x74>)
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <button_init+0x74>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	2003      	movs	r0, #3
 8000748:	fa00 f303 	lsl.w	r3, r0, r3
 800074c:	43db      	mvns	r3, r3
 800074e:	4013      	ands	r3, r2
 8000750:	600b      	str	r3, [r1, #0]
    BUTTON_PORT->PUPDR &= ~(3U << (pin * 2));
 8000752:	490d      	ldr	r1, [pc, #52]	; (8000788 <button_init+0x74>)
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <button_init+0x74>)
 8000756:	68da      	ldr	r2, [r3, #12]
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	2003      	movs	r0, #3
 800075e:	fa00 f303 	lsl.w	r3, r0, r3
 8000762:	43db      	mvns	r3, r3
 8000764:	4013      	ands	r3, r2
 8000766:	60cb      	str	r3, [r1, #12]
    BUTTON_PORT->PUPDR |=  (1U << (pin * 2)); // Pull-up
 8000768:	4907      	ldr	r1, [pc, #28]	; (8000788 <button_init+0x74>)
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <button_init+0x74>)
 800076c:	68da      	ldr	r2, [r3, #12]
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	2001      	movs	r0, #1
 8000774:	fa00 f303 	lsl.w	r3, r0, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	60cb      	str	r3, [r1, #12]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	40020000 	.word	0x40020000

0800078c <hardware_init>:
#include "stm32f4xx.h"
#include "uart_line_queue.h"

#define GSM_POWER_GPIO_PORT GPIOA
#define GSM_POWER_PIN       8
void hardware_init(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000790:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <hardware_init+0x54>)
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <hardware_init+0x54>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f043 0303 	orr.w	r3, r3, #3
 800079a:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN | RCC_APB1ENR_TIM2EN;
 800079c:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <hardware_init+0x54>)
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <hardware_init+0x54>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80007ac:	4a0c      	ldr	r2, [pc, #48]	; (80007e0 <hardware_init+0x54>)
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <hardware_init+0x54>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6453      	str	r3, [r2, #68]	; 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN; 
 80007b8:	4a09      	ldr	r2, [pc, #36]	; (80007e0 <hardware_init+0x54>)
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <hardware_init+0x54>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c2:	6313      	str	r3, [r2, #48]	; 0x30


    timer2_init_1ms();
 80007c4:	f000 f8e2 	bl	800098c <timer2_init_1ms>
    uart_line_queue_init();
 80007c8:	f000 fbae 	bl	8000f28 <uart_line_queue_init>
    uart_init_all();
 80007cc:	f000 f960 	bl	8000a90 <uart_init_all>
    led_init();
 80007d0:	f000 f854 	bl	800087c <led_init>
    button_init();
 80007d4:	f7ff ff9e 	bl	8000714 <button_init>
    gsm_module_power_cycle();
 80007d8:	f000 f804 	bl	80007e4 <gsm_module_power_cycle>
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800

080007e4 <gsm_module_power_cycle>:

uint8_t switch_read(uint8_t index) {
    return 0; 
}

void gsm_module_power_cycle(void) {
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
    // Cấu hình chân GSM_POWER_PIN là output push-pull
    GSM_POWER_GPIO_PORT->MODER &= ~(3U << (GSM_POWER_PIN * 2));
 80007ea:	4a22      	ldr	r2, [pc, #136]	; (8000874 <gsm_module_power_cycle+0x90>)
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <gsm_module_power_cycle+0x90>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80007f4:	6013      	str	r3, [r2, #0]
    GSM_POWER_GPIO_PORT->MODER |=  (1U << (GSM_POWER_PIN * 2));
 80007f6:	4a1f      	ldr	r2, [pc, #124]	; (8000874 <gsm_module_power_cycle+0x90>)
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <gsm_module_power_cycle+0x90>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000800:	6013      	str	r3, [r2, #0]
    GSM_POWER_GPIO_PORT->OTYPER &= ~(1U << GSM_POWER_PIN);
 8000802:	4a1c      	ldr	r2, [pc, #112]	; (8000874 <gsm_module_power_cycle+0x90>)
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <gsm_module_power_cycle+0x90>)
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800080c:	6053      	str	r3, [r2, #4]
    GSM_POWER_GPIO_PORT->OSPEEDR |= (3U << (GSM_POWER_PIN * 2));
 800080e:	4a19      	ldr	r2, [pc, #100]	; (8000874 <gsm_module_power_cycle+0x90>)
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <gsm_module_power_cycle+0x90>)
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000818:	6093      	str	r3, [r2, #8]
    GSM_POWER_GPIO_PORT->PUPDR &= ~(3U << (GSM_POWER_PIN * 2));
 800081a:	4a16      	ldr	r2, [pc, #88]	; (8000874 <gsm_module_power_cycle+0x90>)
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <gsm_module_power_cycle+0x90>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000824:	60d3      	str	r3, [r2, #12]

    // Đưa chân xuống mức thấp (tắt nguồn)
    GSM_POWER_GPIO_PORT->ODR &= ~(1U << GSM_POWER_PIN);
 8000826:	4a13      	ldr	r2, [pc, #76]	; (8000874 <gsm_module_power_cycle+0x90>)
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <gsm_module_power_cycle+0x90>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000830:	6153      	str	r3, [r2, #20]
    for (volatile int i = 0; i < 1000000; i++);
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	e002      	b.n	800083e <gsm_module_power_cycle+0x5a>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3301      	adds	r3, #1
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <gsm_module_power_cycle+0x94>)
 8000842:	4293      	cmp	r3, r2
 8000844:	ddf8      	ble.n	8000838 <gsm_module_power_cycle+0x54>

    // Bật lại nguồn
    GSM_POWER_GPIO_PORT->ODR |= (1U << GSM_POWER_PIN);
 8000846:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <gsm_module_power_cycle+0x90>)
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <gsm_module_power_cycle+0x90>)
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000850:	6153      	str	r3, [r2, #20]
    for (volatile int i = 0; i < 1000000; i++);
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	e002      	b.n	800085e <gsm_module_power_cycle+0x7a>
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	4a05      	ldr	r2, [pc, #20]	; (8000878 <gsm_module_power_cycle+0x94>)
 8000862:	4293      	cmp	r3, r2
 8000864:	ddf8      	ble.n	8000858 <gsm_module_power_cycle+0x74>
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40020000 	.word	0x40020000
 8000878:	000f423f 	.word	0x000f423f

0800087c <led_init>:
#include "stm32f4xx.h"
#include "led.h"

void led_init(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
    // Configure PB9 (LED 4G) as output
    GPIOB->MODER &= ~(3U << (9 * 2));
 8000880:	4a34      	ldr	r2, [pc, #208]	; (8000954 <led_init+0xd8>)
 8000882:	4b34      	ldr	r3, [pc, #208]	; (8000954 <led_init+0xd8>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800088a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (9 * 2));
 800088c:	4a31      	ldr	r2, [pc, #196]	; (8000954 <led_init+0xd8>)
 800088e:	4b31      	ldr	r3, [pc, #196]	; (8000954 <led_init+0xd8>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000896:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 9);
 8000898:	4a2e      	ldr	r2, [pc, #184]	; (8000954 <led_init+0xd8>)
 800089a:	4b2e      	ldr	r3, [pc, #184]	; (8000954 <led_init+0xd8>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008a2:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (9 * 2));
 80008a4:	4a2b      	ldr	r2, [pc, #172]	; (8000954 <led_init+0xd8>)
 80008a6:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <led_init+0xd8>)
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80008ae:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (9 * 2));
 80008b0:	4a28      	ldr	r2, [pc, #160]	; (8000954 <led_init+0xd8>)
 80008b2:	4b28      	ldr	r3, [pc, #160]	; (8000954 <led_init+0xd8>)
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80008ba:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 9);
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <led_init+0xd8>)
 80008be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c2:	835a      	strh	r2, [r3, #26]

    // Configure PB4 (LED GREEN NETWORK) as output
    GPIOB->MODER &= ~(3U << (4 * 2));
 80008c4:	4a23      	ldr	r2, [pc, #140]	; (8000954 <led_init+0xd8>)
 80008c6:	4b23      	ldr	r3, [pc, #140]	; (8000954 <led_init+0xd8>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008ce:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (4 * 2));
 80008d0:	4a20      	ldr	r2, [pc, #128]	; (8000954 <led_init+0xd8>)
 80008d2:	4b20      	ldr	r3, [pc, #128]	; (8000954 <led_init+0xd8>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008da:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 4);
 80008dc:	4a1d      	ldr	r2, [pc, #116]	; (8000954 <led_init+0xd8>)
 80008de:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <led_init+0xd8>)
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f023 0310 	bic.w	r3, r3, #16
 80008e6:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (4 * 2));
 80008e8:	4a1a      	ldr	r2, [pc, #104]	; (8000954 <led_init+0xd8>)
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <led_init+0xd8>)
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80008f2:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (4 * 2));
 80008f4:	4a17      	ldr	r2, [pc, #92]	; (8000954 <led_init+0xd8>)
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <led_init+0xd8>)
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008fe:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 4);
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <led_init+0xd8>)
 8000902:	2210      	movs	r2, #16
 8000904:	835a      	strh	r2, [r3, #26]

    // Configure PB5 (LED BLUE STATEMACHINE) as output
    GPIOB->MODER &= ~(3U << (5 * 2));
 8000906:	4a13      	ldr	r2, [pc, #76]	; (8000954 <led_init+0xd8>)
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <led_init+0xd8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000910:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (5 * 2));
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <led_init+0xd8>)
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <led_init+0xd8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800091c:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 5);
 800091e:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <led_init+0xd8>)
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <led_init+0xd8>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f023 0320 	bic.w	r3, r3, #32
 8000928:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (5 * 2));
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <led_init+0xd8>)
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <led_init+0xd8>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000934:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (5 * 2));
 8000936:	4a07      	ldr	r2, [pc, #28]	; (8000954 <led_init+0xd8>)
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <led_init+0xd8>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000940:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 5);
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <led_init+0xd8>)
 8000944:	2220      	movs	r2, #32
 8000946:	835a      	strh	r2, [r3, #26]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40020400 	.word	0x40020400

08000958 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000962:	4909      	ldr	r1, [pc, #36]	; (8000988 <NVIC_EnableIRQ+0x30>)
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000968:	095b      	lsrs	r3, r3, #5
 800096a:	79fa      	ldrb	r2, [r7, #7]
 800096c:	f002 021f 	and.w	r2, r2, #31
 8000970:	2001      	movs	r0, #1
 8000972:	fa00 f202 	lsl.w	r2, r0, r2
 8000976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000e100 	.word	0xe000e100

0800098c <timer2_init_1ms>:
#include "stm32f4xx.h"

static volatile uint32_t timer2_tick = 0;

void timer2_init_1ms(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
    TIM2->PSC = 15;      // 16MHz / (15+1) = 1MHz
 8000990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000994:	220f      	movs	r2, #15
 8000996:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM2->ARR = 999;     // 1MHz / (999+1) = 1kHz (1ms)
 8000998:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800099c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->EGR = TIM_EGR_UG;
 80009a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009a6:	2201      	movs	r2, #1
 80009a8:	829a      	strh	r2, [r3, #20]
    TIM2->DIER |= TIM_DIER_UIE;
 80009aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009b2:	899b      	ldrh	r3, [r3, #12]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	8193      	strh	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;
 80009be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	8013      	strh	r3, [r2, #0]

    NVIC_EnableIRQ(TIM2_IRQn);
 80009d2:	201c      	movs	r0, #28
 80009d4:	f7ff ffc0 	bl	8000958 <NVIC_EnableIRQ>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) // Update interrupt flag
 80009e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009e4:	8a1b      	ldrh	r3, [r3, #16]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d00e      	beq.n	8000a0e <TIM2_IRQHandler+0x32>
    {
        TIM2->SR &= ~TIM_SR_UIF; // Clear flag
 80009f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009f8:	8a1b      	ldrh	r3, [r3, #16]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	f023 0301 	bic.w	r3, r3, #1
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	8213      	strh	r3, [r2, #16]
        timer2_tick++;
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <TIM2_IRQHandler+0x3c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	4a03      	ldr	r2, [pc, #12]	; (8000a18 <TIM2_IRQHandler+0x3c>)
 8000a0c:	6013      	str	r3, [r2, #0]
    }
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	20000224 	.word	0x20000224

08000a1c <timer2_get_tick>:

uint32_t timer2_get_tick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
    return timer2_tick;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <timer2_get_tick+0x14>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000224 	.word	0x20000224

08000a34 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
    uint32_t start = timer2_get_tick();
 8000a3c:	f7ff ffee 	bl	8000a1c <timer2_get_tick>
 8000a40:	60f8      	str	r0, [r7, #12]
    while ((timer2_get_tick() - start) < ms) {
 8000a42:	bf00      	nop
 8000a44:	f7ff ffea 	bl	8000a1c <timer2_get_tick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	1ad2      	subs	r2, r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d3f7      	bcc.n	8000a44 <delay_ms+0x10>
    }
}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <NVIC_EnableIRQ>:
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000a66:	4909      	ldr	r1, [pc, #36]	; (8000a8c <NVIC_EnableIRQ+0x30>)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	095b      	lsrs	r3, r3, #5
 8000a6e:	79fa      	ldrb	r2, [r7, #7]
 8000a70:	f002 021f 	and.w	r2, r2, #31
 8000a74:	2001      	movs	r0, #1
 8000a76:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <uart_init_all>:
uint8_t m_uart1_rx_buffer[UART1_RX_BUFFER_SIZE];
volatile uint32_t m_old_uart1_dma_rx_pos = 0;
volatile bool rx_line_ready = false;

void uart_init_all(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000a94:	4a3f      	ldr	r2, [pc, #252]	; (8000b94 <uart_init_all+0x104>)
 8000a96:	4b3f      	ldr	r3, [pc, #252]	; (8000b94 <uart_init_all+0x104>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000aa0:	4a3c      	ldr	r2, [pc, #240]	; (8000b94 <uart_init_all+0x104>)
 8000aa2:	4b3c      	ldr	r3, [pc, #240]	; (8000b94 <uart_init_all+0x104>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f043 0310 	orr.w	r3, r3, #16
 8000aaa:	6453      	str	r3, [r2, #68]	; 0x44

    GPIOA->MODER &= ~((3U << (9 * 2)) | (3U << (10 * 2)));
 8000aac:	4a3a      	ldr	r2, [pc, #232]	; (8000b98 <uart_init_all+0x108>)
 8000aae:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <uart_init_all+0x108>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000ab6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2U << (9 * 2)) | (2U << (10 * 2)));
 8000ab8:	4a37      	ldr	r2, [pc, #220]	; (8000b98 <uart_init_all+0x108>)
 8000aba:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <uart_init_all+0x108>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8000ac2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~((0xF << (4 * 1)) | (0xF << (4 * 2)));
 8000ac4:	4a34      	ldr	r2, [pc, #208]	; (8000b98 <uart_init_all+0x108>)
 8000ac6:	4b34      	ldr	r3, [pc, #208]	; (8000b98 <uart_init_all+0x108>)
 8000ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000ace:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= ((7U << (4 * 1)) | (7U << (4 * 2)));
 8000ad0:	4a31      	ldr	r2, [pc, #196]	; (8000b98 <uart_init_all+0x108>)
 8000ad2:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <uart_init_all+0x108>)
 8000ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad6:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000ada:	6253      	str	r3, [r2, #36]	; 0x24

    USART1->BRR = 16000000 / 115200;
 8000adc:	4b2f      	ldr	r3, [pc, #188]	; (8000b9c <uart_init_all+0x10c>)
 8000ade:	228a      	movs	r2, #138	; 0x8a
 8000ae0:	811a      	strh	r2, [r3, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000ae2:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <uart_init_all+0x10c>)
 8000ae4:	f242 020c 	movw	r2, #8204	; 0x200c
 8000ae8:	819a      	strh	r2, [r3, #12]

    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000aea:	4a2a      	ldr	r2, [pc, #168]	; (8000b94 <uart_init_all+0x104>)
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <uart_init_all+0x104>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40

    GPIOA->MODER &= ~((3U << (2 * 2)) | (3U << (3 * 2)));
 8000af6:	4a28      	ldr	r2, [pc, #160]	; (8000b98 <uart_init_all+0x108>)
 8000af8:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <uart_init_all+0x108>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b00:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2U << (2 * 2)) | (2U << (3 * 2)));
 8000b02:	4a25      	ldr	r2, [pc, #148]	; (8000b98 <uart_init_all+0x108>)
 8000b04:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <uart_init_all+0x108>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000b0c:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0xF << (4 * 2)) | (0xF << (4 * 3)));
 8000b0e:	4a22      	ldr	r2, [pc, #136]	; (8000b98 <uart_init_all+0x108>)
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <uart_init_all+0x108>)
 8000b12:	6a1b      	ldr	r3, [r3, #32]
 8000b14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b18:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= ((7U << (4 * 2)) | (7U << (4 * 3)));
 8000b1a:	4a1f      	ldr	r2, [pc, #124]	; (8000b98 <uart_init_all+0x108>)
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <uart_init_all+0x108>)
 8000b1e:	6a1b      	ldr	r3, [r3, #32]
 8000b20:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000b24:	6213      	str	r3, [r2, #32]

    USART2->BRR = 16000000 / 115200;
 8000b26:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <uart_init_all+0x110>)
 8000b28:	228a      	movs	r2, #138	; 0x8a
 8000b2a:	811a      	strh	r2, [r3, #8]
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <uart_init_all+0x110>)
 8000b2e:	f242 020c 	movw	r2, #8204	; 0x200c
 8000b32:	819a      	strh	r2, [r3, #12]

    USART1->CR3 |= USART_CR3_DMAR;
 8000b34:	4a19      	ldr	r2, [pc, #100]	; (8000b9c <uart_init_all+0x10c>)
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <uart_init_all+0x10c>)
 8000b38:	8a9b      	ldrh	r3, [r3, #20]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	8293      	strh	r3, [r2, #20]

    DMA2_Stream2->CR &= ~DMA_SxCR_EN;
 8000b44:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <uart_init_all+0x114>)
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <uart_init_all+0x114>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f023 0301 	bic.w	r3, r3, #1
 8000b4e:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream2->CR & DMA_SxCR_EN);
 8000b50:	bf00      	nop
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <uart_init_all+0x114>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d1f9      	bne.n	8000b52 <uart_init_all+0xc2>

    DMA2_Stream2->PAR  = (uint32_t)&USART1->DR;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <uart_init_all+0x114>)
 8000b60:	4a11      	ldr	r2, [pc, #68]	; (8000ba8 <uart_init_all+0x118>)
 8000b62:	609a      	str	r2, [r3, #8]
    DMA2_Stream2->M0AR = (uint32_t)m_uart1_rx_buffer;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <uart_init_all+0x114>)
 8000b66:	4a11      	ldr	r2, [pc, #68]	; (8000bac <uart_init_all+0x11c>)
 8000b68:	60da      	str	r2, [r3, #12]
    DMA2_Stream2->NDTR = UART1_RX_BUFFER_SIZE;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <uart_init_all+0x114>)
 8000b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b70:	605a      	str	r2, [r3, #4]

    DMA2_Stream2->CR =
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <uart_init_all+0x114>)
 8000b74:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <uart_init_all+0x120>)
 8000b76:	601a      	str	r2, [r3, #0]
        (0 << 6) |
        (0 << 13) |
        (0 << 11) |
        (0 << 16);

    DMA2_Stream2->CR |= DMA_SxCR_EN;
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <uart_init_all+0x114>)
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <uart_init_all+0x114>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	6013      	str	r3, [r2, #0]

    NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b84:	203a      	movs	r0, #58	; 0x3a
 8000b86:	f7ff ff69 	bl	8000a5c <NVIC_EnableIRQ>
    uart_enable_uart1_idle_irq();
 8000b8a:	f000 f98b 	bl	8000ea4 <uart_enable_uart1_idle_irq>
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40011000 	.word	0x40011000
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	40026440 	.word	0x40026440
 8000ba8:	40011004 	.word	0x40011004
 8000bac:	20000c5c 	.word	0x20000c5c
 8000bb0:	08000500 	.word	0x08000500

08000bb4 <uart_log>:

void uart_log(const char* msg)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
    const char* p = msg;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	60fb      	str	r3, [r7, #12]
    while (*p) {
 8000bc0:	e00e      	b.n	8000be0 <uart_log+0x2c>
        while (!(USART2->SR & USART_SR_TXE));
 8000bc2:	bf00      	nop
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <uart_log+0x6c>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d0f8      	beq.n	8000bc4 <uart_log+0x10>
        USART2->DR = *p++;
 8000bd2:	4913      	ldr	r1, [pc, #76]	; (8000c20 <uart_log+0x6c>)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	60fa      	str	r2, [r7, #12]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	808b      	strh	r3, [r1, #4]
    while (*p) {
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1ec      	bne.n	8000bc2 <uart_log+0xe>
    }
    while (!(USART2->SR & USART_SR_TXE));
 8000be8:	bf00      	nop
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <uart_log+0x6c>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0f8      	beq.n	8000bea <uart_log+0x36>
    USART2->DR = '\r';
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <uart_log+0x6c>)
 8000bfa:	220d      	movs	r2, #13
 8000bfc:	809a      	strh	r2, [r3, #4]
    while (!(USART2->SR & USART_SR_TXE));
 8000bfe:	bf00      	nop
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <uart_log+0x6c>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f8      	beq.n	8000c00 <uart_log+0x4c>
    USART2->DR = '\n';
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <uart_log+0x6c>)
 8000c10:	220a      	movs	r2, #10
 8000c12:	809a      	strh	r2, [r3, #4]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	40004400 	.word	0x40004400

08000c24 <uart1_send_raw>:

void uart1_send_raw(const uint8_t* raw, uint32_t length)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < length; i++) {
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	e011      	b.n	8000c58 <uart1_send_raw+0x34>
        while (!(USART1->SR & USART_SR_TXE));
 8000c34:	bf00      	nop
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <uart1_send_raw+0x58>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d0f8      	beq.n	8000c36 <uart1_send_raw+0x12>
        USART1->DR = raw[i];
 8000c44:	490d      	ldr	r1, [pc, #52]	; (8000c7c <uart1_send_raw+0x58>)
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	808b      	strh	r3, [r1, #4]
    for (uint32_t i = 0; i < length; i++) {
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3301      	adds	r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d3e9      	bcc.n	8000c34 <uart1_send_raw+0x10>
    }
    while (!(USART1->SR & USART_SR_TC));
 8000c60:	bf00      	nop
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <uart1_send_raw+0x58>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d0f8      	beq.n	8000c62 <uart1_send_raw+0x3e>
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	40011000 	.word	0x40011000

08000c80 <gsm_hw_layer_uart_fill_rx>:

void gsm_hw_layer_uart_fill_rx(uint8_t *data, uint32_t length)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
    static uint8_t line_buf[UART_LINE_MAX_LEN];
    static uint16_t line_idx = 0;

    for (uint32_t i = 0; i < length; i++) {
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	e033      	b.n	8000cf8 <gsm_hw_layer_uart_fill_rx+0x78>
        if (line_idx < UART_LINE_MAX_LEN - 1) {
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	2b7e      	cmp	r3, #126	; 0x7e
 8000c96:	d829      	bhi.n	8000cec <gsm_hw_layer_uart_fill_rx+0x6c>
            line_buf[line_idx++] = data[i];
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	1c5a      	adds	r2, r3, #1
 8000c9e:	b291      	uxth	r1, r2
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000ca2:	8011      	strh	r1, [r2, #0]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <gsm_hw_layer_uart_fill_rx+0x8c>)
 8000cb0:	545a      	strb	r2, [r3, r1]
            if (data[i] == '\n' || data[i] == '\r') {
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b0a      	cmp	r3, #10
 8000cbc:	d005      	beq.n	8000cca <gsm_hw_layer_uart_fill_rx+0x4a>
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b0d      	cmp	r3, #13
 8000cc8:	d113      	bne.n	8000cf2 <gsm_hw_layer_uart_fill_rx+0x72>
                if (line_idx > 1) {
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d908      	bls.n	8000ce4 <gsm_hw_layer_uart_fill_rx+0x64>
                    line_buf[line_idx] = 0;
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <gsm_hw_layer_uart_fill_rx+0x8c>)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	5499      	strb	r1, [r3, r2]
                    uart_line_queue_push((char*)line_buf);
 8000cde:	480b      	ldr	r0, [pc, #44]	; (8000d0c <gsm_hw_layer_uart_fill_rx+0x8c>)
 8000ce0:	f000 f938 	bl	8000f54 <uart_line_queue_push>
                }
                line_idx = 0;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	801a      	strh	r2, [r3, #0]
 8000cea:	e002      	b.n	8000cf2 <gsm_hw_layer_uart_fill_rx+0x72>
            }
        } else {
            line_idx = 0; // quá dài, reset dòng
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++) {
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d3c7      	bcc.n	8000c90 <gsm_hw_layer_uart_fill_rx+0x10>
        }
    }
}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000022e 	.word	0x2000022e
 8000d0c:	20000230 	.word	0x20000230

08000d10 <uart1_poll>:

void uart1_poll(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
    // Thoát sớm nếu không có dữ liệu mới
    if (!rx_line_ready) {
 8000d16:	4b40      	ldr	r3, [pc, #256]	; (8000e18 <uart1_poll+0x108>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f083 0301 	eor.w	r3, r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d172      	bne.n	8000e0c <uart1_poll+0xfc>
        return;
    }
    rx_line_ready = false;
 8000d26:	4b3c      	ldr	r3, [pc, #240]	; (8000e18 <uart1_poll+0x108>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]

    // Lấy vị trí hiện tại của con trỏ ghi DMA
    uint32_t pos = UART1_RX_BUFFER_SIZE - DMA2_Stream2->NDTR;
 8000d2c:	4b3b      	ldr	r3, [pc, #236]	; (8000e1c <uart1_poll+0x10c>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000d34:	607b      	str	r3, [r7, #4]

    // Thoát nếu không có dữ liệu mới được ghi
    if (pos == m_old_uart1_dma_rx_pos) {
 8000d36:	4b3a      	ldr	r3, [pc, #232]	; (8000e20 <uart1_poll+0x110>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d067      	beq.n	8000e10 <uart1_poll+0x100>
        return;
    }

    // Sử dụng biến gsm_ppp_mode thay vì ppp_mode
    if (gsm_ppp_mode && ppp != NULL) {
 8000d40:	4b38      	ldr	r3, [pc, #224]	; (8000e24 <uart1_poll+0x114>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d02e      	beq.n	8000da8 <uart1_poll+0x98>
 8000d4a:	4b37      	ldr	r3, [pc, #220]	; (8000e28 <uart1_poll+0x118>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d02a      	beq.n	8000da8 <uart1_poll+0x98>
        if (pos > m_old_uart1_dma_rx_pos) {
 8000d52:	4b33      	ldr	r3, [pc, #204]	; (8000e20 <uart1_poll+0x110>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d90d      	bls.n	8000d78 <uart1_poll+0x68>
            pppos_input(ppp, &m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], pos - m_old_uart1_dma_rx_pos);
 8000d5c:	4b32      	ldr	r3, [pc, #200]	; (8000e28 <uart1_poll+0x118>)
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <uart1_poll+0x110>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a31      	ldr	r2, [pc, #196]	; (8000e2c <uart1_poll+0x11c>)
 8000d66:	1899      	adds	r1, r3, r2
 8000d68:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <uart1_poll+0x110>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	461a      	mov	r2, r3
 8000d72:	f015 f9fb 	bl	801616c <pppos_input>
        if (pos > m_old_uart1_dma_rx_pos) {
 8000d76:	e03c      	b.n	8000df2 <uart1_poll+0xe2>
        } else {
            // Xử lý trường hợp buffer bị tràn (wrap-around)
            pppos_input(ppp, &m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], UART1_RX_BUFFER_SIZE - m_old_uart1_dma_rx_pos);
 8000d78:	4b2b      	ldr	r3, [pc, #172]	; (8000e28 <uart1_poll+0x118>)
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <uart1_poll+0x110>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a2a      	ldr	r2, [pc, #168]	; (8000e2c <uart1_poll+0x11c>)
 8000d82:	1899      	adds	r1, r3, r2
 8000d84:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <uart1_poll+0x110>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	f015 f9ed 	bl	801616c <pppos_input>
            if (pos > 0) {
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d02c      	beq.n	8000df2 <uart1_poll+0xe2>
                pppos_input(ppp, &m_uart1_rx_buffer[0], pos);
 8000d98:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <uart1_poll+0x118>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	4923      	ldr	r1, [pc, #140]	; (8000e2c <uart1_poll+0x11c>)
 8000da0:	4618      	mov	r0, r3
 8000da2:	f015 f9e3 	bl	801616c <pppos_input>
        if (pos > m_old_uart1_dma_rx_pos) {
 8000da6:	e024      	b.n	8000df2 <uart1_poll+0xe2>
            }
        }
    } else {
        // Chế độ AT command
        if (pos > m_old_uart1_dma_rx_pos) {
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <uart1_poll+0x110>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d90b      	bls.n	8000dca <uart1_poll+0xba>
            gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], pos - m_old_uart1_dma_rx_pos);
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <uart1_poll+0x110>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a1d      	ldr	r2, [pc, #116]	; (8000e2c <uart1_poll+0x11c>)
 8000db8:	1898      	adds	r0, r3, r2
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <uart1_poll+0x110>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f7ff ff5c 	bl	8000c80 <gsm_hw_layer_uart_fill_rx>
 8000dc8:	e014      	b.n	8000df4 <uart1_poll+0xe4>
        } else {
            // Xử lý trường hợp buffer bị tràn (wrap-around)
            gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], UART1_RX_BUFFER_SIZE - m_old_uart1_dma_rx_pos);
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <uart1_poll+0x110>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <uart1_poll+0x11c>)
 8000dd0:	441a      	add	r2, r3
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <uart1_poll+0x110>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4610      	mov	r0, r2
 8000dde:	f7ff ff4f 	bl	8000c80 <gsm_hw_layer_uart_fill_rx>
            if (pos > 0) {
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d005      	beq.n	8000df4 <uart1_poll+0xe4>
                gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[0], pos);
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	4810      	ldr	r0, [pc, #64]	; (8000e2c <uart1_poll+0x11c>)
 8000dec:	f7ff ff48 	bl	8000c80 <gsm_hw_layer_uart_fill_rx>
 8000df0:	e000      	b.n	8000df4 <uart1_poll+0xe4>
        if (pos > m_old_uart1_dma_rx_pos) {
 8000df2:	bf00      	nop
            }
        }
    }

    // Cập nhật vị trí cũ cho lần kiểm tra tiếp theo
    m_old_uart1_dma_rx_pos = pos;
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <uart1_poll+0x110>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
    if (m_old_uart1_dma_rx_pos == UART1_RX_BUFFER_SIZE)
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <uart1_poll+0x110>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e02:	d106      	bne.n	8000e12 <uart1_poll+0x102>
        m_old_uart1_dma_rx_pos = 0;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <uart1_poll+0x110>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e002      	b.n	8000e12 <uart1_poll+0x102>
        return;
 8000e0c:	bf00      	nop
 8000e0e:	e000      	b.n	8000e12 <uart1_poll+0x102>
        return;
 8000e10:	bf00      	nop
}
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2000022c 	.word	0x2000022c
 8000e1c:	40026440 	.word	0x40026440
 8000e20:	20000228 	.word	0x20000228
 8000e24:	200006c4 	.word	0x200006c4
 8000e28:	200006c0 	.word	0x200006c0
 8000e2c:	20000c5c 	.word	0x20000c5c

08000e30 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
    if (DMA2->LISR & DMA_LISR_TCIF2) {
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <DMA2_Stream2_IRQHandler+0x2c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d008      	beq.n	8000e52 <DMA2_Stream2_IRQHandler+0x22>
        DMA2->LIFCR |= DMA_LIFCR_CTCIF2;
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <DMA2_Stream2_IRQHandler+0x2c>)
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <DMA2_Stream2_IRQHandler+0x2c>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e4a:	6093      	str	r3, [r2, #8]
        rx_line_ready = true;
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <DMA2_Stream2_IRQHandler+0x30>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]
    }
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	40026400 	.word	0x40026400
 8000e60:	2000022c 	.word	0x2000022c

08000e64 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_IDLE) {
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <USART1_IRQHandler+0x38>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	f003 0310 	and.w	r3, r3, #16
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00b      	beq.n	8000e90 <USART1_IRQHandler+0x2c>
        volatile uint32_t tmp;
        tmp = USART1->SR;
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <USART1_IRQHandler+0x38>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	607b      	str	r3, [r7, #4]
        tmp = USART1->DR;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <USART1_IRQHandler+0x38>)
 8000e82:	889b      	ldrh	r3, [r3, #4]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	607b      	str	r3, [r7, #4]
        (void)tmp;
 8000e88:	687b      	ldr	r3, [r7, #4]
        rx_line_ready = true;
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <USART1_IRQHandler+0x3c>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]
    }
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	40011000 	.word	0x40011000
 8000ea0:	2000022c 	.word	0x2000022c

08000ea4 <uart_enable_uart1_idle_irq>:

void uart_enable_uart1_idle_irq(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    USART1->CR1 |= USART_CR1_IDLEIE;
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <uart_enable_uart1_idle_irq+0x20>)
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <uart_enable_uart1_idle_irq+0x20>)
 8000eac:	899b      	ldrh	r3, [r3, #12]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	f043 0310 	orr.w	r3, r3, #16
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	8193      	strh	r3, [r2, #12]
    NVIC_EnableIRQ(USART1_IRQn);
 8000eb8:	2025      	movs	r0, #37	; 0x25
 8000eba:	f7ff fdcf 	bl	8000a5c <NVIC_EnableIRQ>
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40011000 	.word	0x40011000

08000ec8 <restart_dma2_stream2>:
    NVIC_DisableIRQ(USART1_IRQn);
    uart_log("UART1 IRQ disabled");
}

void restart_dma2_stream2(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
    DMA2_Stream2->CR &= ~DMA_SxCR_EN;
 8000ecc:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <restart_dma2_stream2+0x50>)
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <restart_dma2_stream2+0x50>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f023 0301 	bic.w	r3, r3, #1
 8000ed6:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream2->CR & DMA_SxCR_EN);
 8000ed8:	bf00      	nop
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <restart_dma2_stream2+0x50>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f9      	bne.n	8000eda <restart_dma2_stream2+0x12>

    DMA2_Stream2->PAR  = (uint32_t)&USART1->DR;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <restart_dma2_stream2+0x50>)
 8000ee8:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <restart_dma2_stream2+0x54>)
 8000eea:	609a      	str	r2, [r3, #8]
    DMA2_Stream2->M0AR = (uint32_t)m_uart1_rx_buffer;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <restart_dma2_stream2+0x50>)
 8000eee:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <restart_dma2_stream2+0x58>)
 8000ef0:	60da      	str	r2, [r3, #12]
    DMA2_Stream2->NDTR = UART1_RX_BUFFER_SIZE;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <restart_dma2_stream2+0x50>)
 8000ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef8:	605a      	str	r2, [r3, #4]

    DMA2_Stream2->CR =
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <restart_dma2_stream2+0x50>)
 8000efc:	4a09      	ldr	r2, [pc, #36]	; (8000f24 <restart_dma2_stream2+0x5c>)
 8000efe:	601a      	str	r2, [r3, #0]
        (0 << 6) |
        (0 << 13) |
        (0 << 11) |
        (0 << 16);

    DMA2_Stream2->CR |= DMA_SxCR_EN;
 8000f00:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <restart_dma2_stream2+0x50>)
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <restart_dma2_stream2+0x50>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40026440 	.word	0x40026440
 8000f1c:	40011004 	.word	0x40011004
 8000f20:	20000c5c 	.word	0x20000c5c
 8000f24:	08000500 	.word	0x08000500

08000f28 <uart_line_queue_init>:
static char uart_line_queue[UART_LINE_QUEUE_SIZE][UART_LINE_MAX_LEN];
static volatile uint8_t uart_line_queue_head = 0;
static volatile uint8_t uart_line_queue_tail = 0;
static volatile uint8_t uart_line_queue_count = 0;

void uart_line_queue_init(void) {
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
    uart_line_queue_head = 0;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <uart_line_queue_init+0x20>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
    uart_line_queue_tail = 0;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <uart_line_queue_init+0x24>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count = 0;
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <uart_line_queue_init+0x28>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	200006b0 	.word	0x200006b0
 8000f4c:	200006b1 	.word	0x200006b1
 8000f50:	200006b2 	.word	0x200006b2

08000f54 <uart_line_queue_push>:

// Push a line into the queue, returns true if success, false if full
bool uart_line_queue_push(const char *line) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
    if (uart_line_queue_count >= UART_LINE_QUEUE_SIZE) return false;
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <uart_line_queue_push+0x74>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b07      	cmp	r3, #7
 8000f64:	d901      	bls.n	8000f6a <uart_line_queue_push+0x16>
 8000f66:	2300      	movs	r3, #0
 8000f68:	e029      	b.n	8000fbe <uart_line_queue_push+0x6a>
    strncpy(uart_line_queue[uart_line_queue_head], line, UART_LINE_MAX_LEN - 1);
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <uart_line_queue_push+0x78>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	01db      	lsls	r3, r3, #7
 8000f72:	4a17      	ldr	r2, [pc, #92]	; (8000fd0 <uart_line_queue_push+0x7c>)
 8000f74:	4413      	add	r3, r2
 8000f76:	227f      	movs	r2, #127	; 0x7f
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f017 fb21 	bl	80185c2 <strncpy>
    uart_line_queue[uart_line_queue_head][UART_LINE_MAX_LEN - 1] = '\0';
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <uart_line_queue_push+0x78>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <uart_line_queue_push+0x7c>)
 8000f88:	01db      	lsls	r3, r3, #7
 8000f8a:	4413      	add	r3, r2
 8000f8c:	337f      	adds	r3, #127	; 0x7f
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
    uart_line_queue_head = (uart_line_queue_head + 1) % UART_LINE_QUEUE_SIZE;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <uart_line_queue_push+0x78>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	3301      	adds	r3, #1
 8000f9a:	425a      	negs	r2, r3
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	f002 0207 	and.w	r2, r2, #7
 8000fa4:	bf58      	it	pl
 8000fa6:	4253      	negpl	r3, r2
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <uart_line_queue_push+0x78>)
 8000fac:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count++;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <uart_line_queue_push+0x74>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <uart_line_queue_push+0x74>)
 8000fba:	701a      	strb	r2, [r3, #0]
    return true;
 8000fbc:	2301      	movs	r3, #1
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200006b2 	.word	0x200006b2
 8000fcc:	200006b0 	.word	0x200006b0
 8000fd0:	200002b0 	.word	0x200002b0

08000fd4 <uart_line_queue_pop>:

// Pop a line from the queue, returns true if a line was available
bool uart_line_queue_pop(char *out_line) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
    if (uart_line_queue_count == 0) return false;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <uart_line_queue_pop+0x60>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <uart_line_queue_pop+0x16>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e020      	b.n	800102c <uart_line_queue_pop+0x58>
    strncpy(out_line, uart_line_queue[uart_line_queue_tail], UART_LINE_MAX_LEN);
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <uart_line_queue_pop+0x64>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	01db      	lsls	r3, r3, #7
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <uart_line_queue_pop+0x68>)
 8000ff4:	4413      	add	r3, r2
 8000ff6:	2280      	movs	r2, #128	; 0x80
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f017 fae1 	bl	80185c2 <strncpy>
    uart_line_queue_tail = (uart_line_queue_tail + 1) % UART_LINE_QUEUE_SIZE;
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <uart_line_queue_pop+0x64>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	3301      	adds	r3, #1
 8001008:	425a      	negs	r2, r3
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	f002 0207 	and.w	r2, r2, #7
 8001012:	bf58      	it	pl
 8001014:	4253      	negpl	r3, r2
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <uart_line_queue_pop+0x64>)
 800101a:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count--;
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <uart_line_queue_pop+0x60>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	3b01      	subs	r3, #1
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b03      	ldr	r3, [pc, #12]	; (8001034 <uart_line_queue_pop+0x60>)
 8001028:	701a      	strb	r2, [r3, #0]
    return true;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200006b2 	.word	0x200006b2
 8001038:	200006b1 	.word	0x200006b1
 800103c:	200002b0 	.word	0x200002b0

08001040 <main>:
#include "ppp_net/net_test.h"
#include "lwip/tcpip.h"
#include <stdio.h>

int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
    hardware_init();
 8001044:	f7ff fba2 	bl	800078c <hardware_init>
    uart_log("UART2 log test");
 8001048:	4807      	ldr	r0, [pc, #28]	; (8001068 <main+0x28>)
 800104a:	f7ff fdb3 	bl	8000bb4 <uart_log>
    delay_ms(15000); // Đợi module GSM khởi động
 800104e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001052:	f7ff fcef 	bl	8000a34 <delay_ms>
    ppp_connection_init();
 8001056:	f000 fa31 	bl	80014bc <ppp_connection_init>

    while (1) {
        uart1_poll();
 800105a:	f7ff fe59 	bl	8000d10 <uart1_poll>
        send_all_gsm_commands_with_check();
 800105e:	f7ff f94f 	bl	8000300 <send_all_gsm_commands_with_check>
        ppp_connection_poll();
 8001062:	f000 fa5f 	bl	8001524 <ppp_connection_poll>
        uart1_poll();
 8001066:	e7f8      	b.n	800105a <main+0x1a>
 8001068:	08018f10 	.word	0x08018f10

0800106c <mqtt_incoming_data_cb>:
  , NULL
#endif
};

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b0a4      	sub	sp, #144	; 0x90
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	4611      	mov	r1, r2
 8001078:	461a      	mov	r2, r3
 800107a:	460b      	mov	r3, r1
 800107c:	80fb      	strh	r3, [r7, #6]
 800107e:	4613      	mov	r3, r2
 8001080:	717b      	strb	r3, [r7, #5]
    char msg[128] = {0};
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f017 f919 	bl	80182c2 <memset>
    memcpy(msg, data, (len < sizeof(msg)-1) ? len : sizeof(msg)-1);
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	2b7e      	cmp	r3, #126	; 0x7e
 8001094:	d801      	bhi.n	800109a <mqtt_incoming_data_cb+0x2e>
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	e000      	b.n	800109c <mqtt_incoming_data_cb+0x30>
 800109a:	237f      	movs	r3, #127	; 0x7f
 800109c:	f107 0010 	add.w	r0, r7, #16
 80010a0:	461a      	mov	r2, r3
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	f017 f8e8 	bl	8018278 <memcpy>
    msg[len] = 0;
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80010ae:	4413      	add	r3, r2
 80010b0:	2200      	movs	r2, #0
 80010b2:	f803 2c80 	strb.w	r2, [r3, #-128]
    uart_log("MQTT DATA RECEIVED:");
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <mqtt_incoming_data_cb+0x64>)
 80010b8:	f7ff fd7c 	bl	8000bb4 <uart_log>
    uart_log(msg); // In ra chuỗi nhận được từ topic
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fd77 	bl	8000bb4 <uart_log>
}
 80010c6:	bf00      	nop
 80010c8:	3790      	adds	r7, #144	; 0x90
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	08018f34 	.word	0x08018f34

080010d4 <mqtt_incoming_publish_cb>:

static void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
    LWIP_PLATFORM_DIAG(("MQTT PUBLISH: topic=%s, len=%d\n", topic, (int)tot_len));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	4803      	ldr	r0, [pc, #12]	; (80010f4 <mqtt_incoming_publish_cb+0x20>)
 80010e8:	f000 f903 	bl	80012f2 <lwip_win32_platform_diag>
}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	08018f48 	.word	0x08018f48

080010f8 <mqtt_request_cb>:

static void mqtt_request_cb(void *arg, err_t err)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	70fb      	strb	r3, [r7, #3]
    LWIP_PLATFORM_DIAG(("MQTT SUB/UNSUB result: %d\n", (int)err));
 8001104:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001108:	4619      	mov	r1, r3
 800110a:	4803      	ldr	r0, [pc, #12]	; (8001118 <mqtt_request_cb+0x20>)
 800110c:	f000 f8f1 	bl	80012f2 <lwip_win32_platform_diag>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	08018f68 	.word	0x08018f68

0800111c <mqtt_pub_request_cb>:

static void mqtt_pub_request_cb(void *arg, err_t err)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	70fb      	strb	r3, [r7, #3]
    LWIP_PLATFORM_DIAG(("MQTT PUB result: %d\n", (int)err));
 8001128:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800112c:	4619      	mov	r1, r3
 800112e:	4803      	ldr	r0, [pc, #12]	; (800113c <mqtt_pub_request_cb+0x20>)
 8001130:	f000 f8df 	bl	80012f2 <lwip_win32_platform_diag>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	08018f84 	.word	0x08018f84

08001140 <mqtt_connection_cb>:

static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b09a      	sub	sp, #104	; 0x68
 8001144:	af04      	add	r7, sp, #16
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	4613      	mov	r3, r2
 800114c:	80fb      	strh	r3, [r7, #6]
    char log_buf[64];
    if (status == MQTT_CONNECT_ACCEPTED) {
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d125      	bne.n	80011a0 <mqtt_connection_cb+0x60>
        uart_log("MQTT CONNECTED TO BROKER!"); // Thông báo qua UART
 8001154:	481a      	ldr	r0, [pc, #104]	; (80011c0 <mqtt_connection_cb+0x80>)
 8001156:	f7ff fd2d 	bl	8000bb4 <uart_log>
        LWIP_PLATFORM_DIAG(("MQTT CONNECTED!\n"));
 800115a:	481a      	ldr	r0, [pc, #104]	; (80011c4 <mqtt_connection_cb+0x84>)
 800115c:	f000 f8c9 	bl	80012f2 <lwip_win32_platform_diag>
        // Đăng ký nhận topic
        mqtt_sub_unsub(client,
 8001160:	2301      	movs	r3, #1
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	2300      	movs	r3, #0
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <mqtt_connection_cb+0x88>)
 800116a:	2200      	movs	r2, #0
 800116c:	4917      	ldr	r1, [pc, #92]	; (80011cc <mqtt_connection_cb+0x8c>)
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f001 fd04 	bl	8002b7c <mqtt_sub_unsub>
            "mydevice2/room1/switch01/cmd", 0,
            mqtt_request_cb, NULL, 1);

        // Gửi thông báo kết nối thành công
        const char *msg = "{\"msg\":\"STM32 connected\"}";
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <mqtt_connection_cb+0x90>)
 8001176:	657b      	str	r3, [r7, #84]	; 0x54
        mqtt_publish(client,
            "mydevice2/room1/switch01/status",
            msg, strlen(msg),
 8001178:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800117a:	f7ff f833 	bl	80001e4 <strlen>
 800117e:	4603      	mov	r3, r0
        mqtt_publish(client,
 8001180:	b29a      	uxth	r2, r3
 8001182:	2300      	movs	r3, #0
 8001184:	9303      	str	r3, [sp, #12]
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <mqtt_connection_cb+0x94>)
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2300      	movs	r3, #0
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	2300      	movs	r3, #0
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	4613      	mov	r3, r2
 8001194:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001196:	4910      	ldr	r1, [pc, #64]	; (80011d8 <mqtt_connection_cb+0x98>)
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f001 fc11 	bl	80029c0 <mqtt_publish>
            mqtt_pub_request_cb, NULL);
    } else {
        snprintf(log_buf, sizeof(log_buf), "MQTT connect failed: %d", status);
        uart_log(log_buf);
    }
}
 800119e:	e00b      	b.n	80011b8 <mqtt_connection_cb+0x78>
        snprintf(log_buf, sizeof(log_buf), "MQTT connect failed: %d", status);
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	f107 0014 	add.w	r0, r7, #20
 80011a6:	4a0d      	ldr	r2, [pc, #52]	; (80011dc <mqtt_connection_cb+0x9c>)
 80011a8:	2140      	movs	r1, #64	; 0x40
 80011aa:	f017 f993 	bl	80184d4 <sniprintf>
        uart_log(log_buf);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fcfe 	bl	8000bb4 <uart_log>
}
 80011b8:	bf00      	nop
 80011ba:	3758      	adds	r7, #88	; 0x58
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	08018f9c 	.word	0x08018f9c
 80011c4:	08018fb8 	.word	0x08018fb8
 80011c8:	080010f9 	.word	0x080010f9
 80011cc:	08018fcc 	.word	0x08018fcc
 80011d0:	08018fec 	.word	0x08018fec
 80011d4:	0800111d 	.word	0x0800111d
 80011d8:	08019008 	.word	0x08019008
 80011dc:	08019028 	.word	0x08019028

080011e0 <mqtt_example_init>:
#endif /* LWIP_TCP */

void mqtt_example_init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af02      	add	r7, sp, #8
#if LWIP_TCP
    mqtt_client = mqtt_client_new();
 80011e6:	f001 fdd7 	bl	8002d98 <mqtt_client_new>
 80011ea:	4602      	mov	r2, r0
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <mqtt_example_init+0x3c>)
 80011ee:	601a      	str	r2, [r3, #0]

    mqtt_set_inpub_callback(mqtt_client,
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <mqtt_example_init+0x3c>)
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	2300      	movs	r3, #0
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <mqtt_example_init+0x40>)
 80011f8:	490a      	ldr	r1, [pc, #40]	; (8001224 <mqtt_example_init+0x44>)
 80011fa:	f001 fda3 	bl	8002d44 <mqtt_set_inpub_callback>
        mqtt_incoming_publish_cb,
        mqtt_incoming_data_cb,
        NULL);

    mqtt_client_connect(mqtt_client,
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <mqtt_example_init+0x3c>)
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <mqtt_example_init+0x48>)
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	2300      	movs	r3, #0
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <mqtt_example_init+0x4c>)
 800120c:	f240 725b 	movw	r2, #1883	; 0x75b
 8001210:	4907      	ldr	r1, [pc, #28]	; (8001230 <mqtt_example_init+0x50>)
 8001212:	f001 fdcb 	bl	8002dac <mqtt_client_connect>
        &mqtt_ip, MQTT_PORT,
        mqtt_connection_cb, NULL,
        &mqtt_client_info);
#endif /* LWIP_TCP */
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200006b4 	.word	0x200006b4
 8001220:	0800106d 	.word	0x0800106d
 8001224:	080010d5 	.word	0x080010d5
 8001228:	0801da1c 	.word	0x0801da1c
 800122c:	08001141 	.word	0x08001141
 8001230:	20000000 	.word	0x20000000

08001234 <sys_init>:
#include "lwip/opt.h"
#include "lwip/sys.h"
#include "lwip/err.h"
#include "arch/sys_arch.h"

void sys_init(void) {}
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <sys_mutex_new>:

err_t sys_mutex_new(sys_mutex_t *mutex) { *mutex = 0; return ERR_OK; }
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	2300      	movs	r3, #0
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex) { (void)mutex; }
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <sys_mutex_unlock>:
void sys_mutex_unlock(sys_mutex_t *mutex) { (void)mutex; }
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <sys_mbox_new>:
err_t sys_sem_new(sys_sem_t *sem, u8_t count) { *sem = 0; (void)count; return ERR_OK; }
void sys_sem_signal(sys_sem_t *sem) { (void)sem; }
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout) { (void)sem; (void)timeout; return 0; }
void sys_sem_free(sys_sem_t *sem) { (void)sem; }

err_t sys_mbox_new(sys_mbox_t *mbox, int size) { *mbox = 0; (void)size; return ERR_OK; }
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
 8001296:	2300      	movs	r3, #0
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <sys_mbox_trypost>:
void sys_mbox_post(sys_mbox_t *mbox, void *msg) { (void)mbox; (void)msg; }
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg) { (void)mbox; (void)msg; return ERR_OK; }
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	2300      	movs	r3, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <sys_arch_mbox_fetch>:
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout) { (void)mbox; (void)msg; (void)timeout; return 0; }
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	2300      	movs	r3, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <sys_thread_new>:
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg) { (void)mbox; (void)msg; return 0; }
void sys_mbox_free(sys_mbox_t *mbox) { (void)mbox; }

sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread, void *arg, int stacksize, int prio) { (void)name; (void)thread; (void)arg; (void)stacksize; (void)prio; return 0; }
 80012d6:	b480      	push	{r7}
 80012d8:	b085      	sub	sp, #20
 80012da:	af00      	add	r7, sp, #0
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	2300      	movs	r3, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <lwip_win32_platform_diag>:
    (void)msg;
    while (1) { }
}

// Diagnostic output for LwIP (optional)
void lwip_win32_platform_diag(const char *msg) {
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
    // Optionally send to UART or ignore
    (void)msg;
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <sys_now>:
void sys_check_core_locking(void) {
    // No-op for baremetal
}

// Returns system time in ms (replace with your own timer if needed)
uint32_t sys_now(void) {
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
    // TODO: Thay thế bằng hàm trả về thời gian thực tế nếu bạn có timer
    static uint32_t fake_tick = 0;
    return fake_tick++;
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <sys_now+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	4903      	ldr	r1, [pc, #12]	; (8001320 <sys_now+0x18>)
 8001314:	600a      	str	r2, [r1, #0]
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	200006b8 	.word	0x200006b8

08001324 <sys_jiffies>:

// Returns system time in ticks (can be same as sys_now)
uint32_t sys_jiffies(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
    return sys_now();
 8001328:	f7ff ffee 	bl	8001308 <sys_now>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <lwip_port_rand>:

// Returns a random 32-bit value (replace with your own RNG if needed)
uint32_t lwip_port_rand(void) {
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
    static uint32_t seed = 123456789;
    seed = seed * 1103515245 + 12345;
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <lwip_port_rand+0x28>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a08      	ldr	r2, [pc, #32]	; (8001360 <lwip_port_rand+0x2c>)
 800133e:	fb02 f303 	mul.w	r3, r2, r3
 8001342:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001346:	3339      	adds	r3, #57	; 0x39
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <lwip_port_rand+0x28>)
 800134a:	6013      	str	r3, [r2, #0]
    return seed;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <lwip_port_rand+0x28>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000004 	.word	0x20000004
 8001360:	41c64e6d 	.word	0x41c64e6d

08001364 <sys_arch_protect>:

// --- LwIP baremetal porting functions ---

// sys_arch_protect/sys_arch_unprotect: No real protection needed for single-thread
unsigned long sys_arch_protect(void) {
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
    return 0;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <sys_arch_unprotect>:
void sys_arch_unprotect(unsigned long pval) {
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
    (void)pval;
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <ppp_output_callback>:
 * @param  data: Dữ liệu cần gửi
 * @param  len: Độ dài dữ liệu
 * @param  ctx: Con trỏ ngữ cảnh (không dùng)
 * @retval Luôn trả về độ dài đã gửi.
 */
static u32_t ppp_output_callback(ppp_pcb *pcb, const void *data, u32_t len, void *ctx) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
    (void)pcb;
    (void)ctx;
    uart1_send_raw((const uint8_t*)data, len);
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	68b8      	ldr	r0, [r7, #8]
 800139a:	f7ff fc43 	bl	8000c24 <uart1_send_raw>
    return len;
 800139e:	687b      	ldr	r3, [r7, #4]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <ppp_status_cb>:

static void ppp_status_cb(ppp_pcb *pcb, int err_code, void *ctx) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b09e      	sub	sp, #120	; 0x78
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
    (void)pcb;
    (void)ctx;
    switch (err_code) {
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <ppp_status_cb+0x18>
 80013ba:	2b05      	cmp	r3, #5
 80013bc:	d043      	beq.n	8001446 <ppp_status_cb+0x9e>
 80013be:	e04f      	b.n	8001460 <ppp_status_cb+0xb8>
        case PPPERR_NONE: {
            char log_buf[100];
            uart_log("PPP connected");
 80013c0:	4830      	ldr	r0, [pc, #192]	; (8001484 <ppp_status_cb+0xdc>)
 80013c2:	f7ff fbf7 	bl	8000bb4 <uart_log>
            ppp_connected = true;
 80013c6:	4b30      	ldr	r3, [pc, #192]	; (8001488 <ppp_status_cb+0xe0>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
            gsm_ppp_mode = true;
 80013cc:	4b2f      	ldr	r3, [pc, #188]	; (800148c <ppp_status_cb+0xe4>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]

            // Đặt cờ để báo hiệu kết nối PPP đã được thiết lập
            ppp_connection_established = true;
 80013d2:	4b2f      	ldr	r3, [pc, #188]	; (8001490 <ppp_status_cb+0xe8>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]

            sprintf(log_buf, "   IP address:  %s", ipaddr_ntoa(netif_ip4_addr(&ppp_netif)));
 80013d8:	482e      	ldr	r0, [pc, #184]	; (8001494 <ppp_status_cb+0xec>)
 80013da:	f003 f973 	bl	80046c4 <ip4addr_ntoa>
 80013de:	4602      	mov	r2, r0
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	492c      	ldr	r1, [pc, #176]	; (8001498 <ppp_status_cb+0xf0>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f016 fd0e 	bl	8017e08 <siprintf>
            uart_log(log_buf);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fbdf 	bl	8000bb4 <uart_log>
            sprintf(log_buf, "   Gateway:     %s", ipaddr_ntoa(netif_ip4_gw(&ppp_netif)));
 80013f6:	4829      	ldr	r0, [pc, #164]	; (800149c <ppp_status_cb+0xf4>)
 80013f8:	f003 f964 	bl	80046c4 <ip4addr_ntoa>
 80013fc:	4602      	mov	r2, r0
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4927      	ldr	r1, [pc, #156]	; (80014a0 <ppp_status_cb+0xf8>)
 8001404:	4618      	mov	r0, r3
 8001406:	f016 fcff 	bl	8017e08 <siprintf>
            uart_log(log_buf);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fbd0 	bl	8000bb4 <uart_log>
            sprintf(log_buf, "   Netmask:     %s", ipaddr_ntoa(netif_ip4_netmask(&ppp_netif)));
 8001414:	4823      	ldr	r0, [pc, #140]	; (80014a4 <ppp_status_cb+0xfc>)
 8001416:	f003 f955 	bl	80046c4 <ip4addr_ntoa>
 800141a:	4602      	mov	r2, r0
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4921      	ldr	r1, [pc, #132]	; (80014a8 <ppp_status_cb+0x100>)
 8001422:	4618      	mov	r0, r3
 8001424:	f016 fcf0 	bl	8017e08 <siprintf>
            uart_log(log_buf);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fbc1 	bl	8000bb4 <uart_log>
            // test_dns_resolution();
            // test_http_request();
            // uart_log("Network tests completed.");

            // Khởi tạo MQTT sau khi kết nối PPP thành công
            uart_log("Initializing MQTT...");
 8001432:	481e      	ldr	r0, [pc, #120]	; (80014ac <ppp_status_cb+0x104>)
 8001434:	f7ff fbbe 	bl	8000bb4 <uart_log>
            mqtt_example_init();
 8001438:	f7ff fed2 	bl	80011e0 <mqtt_example_init>
            uart_log("MQTT initialization completed.");
 800143c:	481c      	ldr	r0, [pc, #112]	; (80014b0 <ppp_status_cb+0x108>)
 800143e:	f7ff fbb9 	bl	8000bb4 <uart_log>

            break;
 8001442:	bf00      	nop
 8001444:	e019      	b.n	800147a <ppp_status_cb+0xd2>
        }
        case PPPERR_USER:
            uart_log("PPP connection terminated by user");
 8001446:	481b      	ldr	r0, [pc, #108]	; (80014b4 <ppp_status_cb+0x10c>)
 8001448:	f7ff fbb4 	bl	8000bb4 <uart_log>
            ppp_connected = false;
 800144c:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <ppp_status_cb+0xe0>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
            gsm_ppp_mode = false;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <ppp_status_cb+0xe4>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
            ppp_connection_established = false;
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <ppp_status_cb+0xe8>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
            break;
 800145e:	e00c      	b.n	800147a <ppp_status_cb+0xd2>
        default:
            uart_log("PPP connection error");
 8001460:	4815      	ldr	r0, [pc, #84]	; (80014b8 <ppp_status_cb+0x110>)
 8001462:	f7ff fba7 	bl	8000bb4 <uart_log>
            ppp_connected = false;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <ppp_status_cb+0xe0>)
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
            gsm_ppp_mode = false;
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <ppp_status_cb+0xe4>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
            ppp_connection_established = false;
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <ppp_status_cb+0xe8>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
            break;
 8001478:	bf00      	nop
    }
}
 800147a:	bf00      	nop
 800147c:	3778      	adds	r7, #120	; 0x78
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	08019040 	.word	0x08019040
 8001488:	200006f8 	.word	0x200006f8
 800148c:	200006c4 	.word	0x200006c4
 8001490:	200006bc 	.word	0x200006bc
 8001494:	200006cc 	.word	0x200006cc
 8001498:	08019050 	.word	0x08019050
 800149c:	200006d4 	.word	0x200006d4
 80014a0:	08019064 	.word	0x08019064
 80014a4:	200006d0 	.word	0x200006d0
 80014a8:	08019078 	.word	0x08019078
 80014ac:	0801908c 	.word	0x0801908c
 80014b0:	080190a4 	.word	0x080190a4
 80014b4:	080190c4 	.word	0x080190c4
 80014b8:	080190e8 	.word	0x080190e8

080014bc <ppp_connection_init>:

void ppp_connection_init(void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
    uart_log("Initializing PPP connection...");
 80014c0:	4812      	ldr	r0, [pc, #72]	; (800150c <ppp_connection_init+0x50>)
 80014c2:	f7ff fb77 	bl	8000bb4 <uart_log>

    tcpip_init(NULL, NULL);
 80014c6:	2100      	movs	r1, #0
 80014c8:	2000      	movs	r0, #0
 80014ca:	f000 f915 	bl	80016f8 <tcpip_init>

    // Sử dụng hàm wrapper ppp_output_callback
    ppp = pppos_create(&ppp_netif, ppp_output_callback, ppp_status_cb, NULL);
 80014ce:	2300      	movs	r3, #0
 80014d0:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <ppp_connection_init+0x54>)
 80014d2:	4910      	ldr	r1, [pc, #64]	; (8001514 <ppp_connection_init+0x58>)
 80014d4:	4810      	ldr	r0, [pc, #64]	; (8001518 <ppp_connection_init+0x5c>)
 80014d6:	f014 fc31 	bl	8015d3c <pppos_create>
 80014da:	4602      	mov	r2, r0
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <ppp_connection_init+0x60>)
 80014de:	601a      	str	r2, [r3, #0]
    if (ppp == NULL) {
 80014e0:	4b0e      	ldr	r3, [pc, #56]	; (800151c <ppp_connection_init+0x60>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d103      	bne.n	80014f0 <ppp_connection_init+0x34>
        uart_log("Failed to create PPP control block");
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <ppp_connection_init+0x64>)
 80014ea:	f7ff fb63 	bl	8000bb4 <uart_log>
        return;
 80014ee:	e00b      	b.n	8001508 <ppp_connection_init+0x4c>
    }

    ppp_set_default(ppp);
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <ppp_connection_init+0x60>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	4618      	mov	r0, r3
 80014f8:	f004 f86e 	bl	80055d8 <netif_set_default>
    // Đặt mật khẩu nếu cần
    // ppp_set_auth(ppp, PPPAUTHTYPE_PAP, "user", "password");
    ppp_connect(ppp, 0);
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <ppp_connection_init+0x60>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f013 ffe2 	bl	80154cc <ppp_connect>
}
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	08019100 	.word	0x08019100
 8001510:	080013a9 	.word	0x080013a9
 8001514:	08001389 	.word	0x08001389
 8001518:	200006c8 	.word	0x200006c8
 800151c:	200006c0 	.word	0x200006c0
 8001520:	08019120 	.word	0x08019120

08001524 <ppp_connection_poll>:

void ppp_connection_poll(void) {
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
    // Hàm này nên được gọi thường xuyên từ vòng lặp chính
    sys_check_timeouts();
 8001528:	f00c fabc 	bl	800daa4 <sys_check_timeouts>
        // Có thể thêm log ở đây nếu cần, nhưng hạn chế để tránh spam
        // uart_log("PPP connection is active");
    } else {
        // uart_log("PPP connection is not active");
    }
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <tcpip_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800153a:	f00c fae9 	bl	800db10 <sys_timeouts_sleeptime>
 800153e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001546:	d10b      	bne.n	8001560 <tcpip_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8001548:	4813      	ldr	r0, [pc, #76]	; (8001598 <tcpip_mbox_fetch+0x68>)
 800154a:	f7ff fe92 	bl	8001272 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	6839      	ldr	r1, [r7, #0]
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff feb2 	bl	80012bc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8001558:	480f      	ldr	r0, [pc, #60]	; (8001598 <tcpip_mbox_fetch+0x68>)
 800155a:	f7ff fe80 	bl	800125e <sys_mutex_lock>
    return;
 800155e:	e018      	b.n	8001592 <tcpip_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <tcpip_mbox_fetch+0x3c>
    sys_check_timeouts();
 8001566:	f00c fa9d 	bl	800daa4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800156a:	e7e6      	b.n	800153a <tcpip_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800156c:	480a      	ldr	r0, [pc, #40]	; (8001598 <tcpip_mbox_fetch+0x68>)
 800156e:	f7ff fe80 	bl	8001272 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	6839      	ldr	r1, [r7, #0]
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fea0 	bl	80012bc <sys_arch_mbox_fetch>
 800157c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <tcpip_mbox_fetch+0x68>)
 8001580:	f7ff fe6d 	bl	800125e <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158a:	d102      	bne.n	8001592 <tcpip_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800158c:	f00c fa8a 	bl	800daa4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8001590:	e7d3      	b.n	800153a <tcpip_mbox_fetch+0xa>
  }
}
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000d5c 	.word	0x20000d5c

0800159c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80015a4:	4812      	ldr	r0, [pc, #72]	; (80015f0 <tcpip_thread+0x54>)
 80015a6:	f7ff fe5a 	bl	800125e <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <tcpip_thread+0x58>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <tcpip_thread+0x58>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a10      	ldr	r2, [pc, #64]	; (80015f8 <tcpip_thread+0x5c>)
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	4610      	mov	r0, r2
 80015bc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    tcpip_mbox_fetch(&tcpip_mbox, (void **)&msg);
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	4619      	mov	r1, r3
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <tcpip_thread+0x60>)
 80015c6:	f7ff ffb3 	bl	8001530 <tcpip_mbox_fetch>
    if (msg == NULL) {
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10a      	bne.n	80015e6 <tcpip_thread+0x4a>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <tcpip_thread+0x64>)
 80015d2:	229a      	movs	r2, #154	; 0x9a
 80015d4:	490b      	ldr	r1, [pc, #44]	; (8001604 <tcpip_thread+0x68>)
 80015d6:	480c      	ldr	r0, [pc, #48]	; (8001608 <tcpip_thread+0x6c>)
 80015d8:	f016 fc2c 	bl	8017e34 <iprintf>
 80015dc:	2000      	movs	r0, #0
 80015de:	f016 fd2b 	bl	8018038 <fflush>
 80015e2:	f016 fc70 	bl	8017ec6 <abort>
      continue;
    }
    tcpip_thread_handle_msg(msg);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 f80f 	bl	800160c <tcpip_thread_handle_msg>
    tcpip_mbox_fetch(&tcpip_mbox, (void **)&msg);
 80015ee:	e7e6      	b.n	80015be <tcpip_thread+0x22>
 80015f0:	20000d5c 	.word	0x20000d5c
 80015f4:	200006fc 	.word	0x200006fc
 80015f8:	20000700 	.word	0x20000700
 80015fc:	20000704 	.word	0x20000704
 8001600:	08019144 	.word	0x08019144
 8001604:	08019164 	.word	0x08019164
 8001608:	08019184 	.word	0x08019184

0800160c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d018      	beq.n	800164e <tcpip_thread_handle_msg+0x42>
 800161c:	2b02      	cmp	r3, #2
 800161e:	d021      	beq.n	8001664 <tcpip_thread_handle_msg+0x58>
 8001620:	2b00      	cmp	r3, #0
 8001622:	d126      	bne.n	8001672 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6850      	ldr	r0, [r2, #4]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6892      	ldr	r2, [r2, #8]
 8001630:	4611      	mov	r1, r2
 8001632:	4798      	blx	r3
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d004      	beq.n	8001644 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4618      	mov	r0, r3
 8001640:	f004 fbe8 	bl	8005e14 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	2008      	movs	r0, #8
 8001648:	f003 fdd0 	bl	80051ec <memp_free>
      break;
 800164c:	e01c      	b.n	8001688 <tcpip_thread_handle_msg+0x7c>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6892      	ldr	r2, [r2, #8]
 8001656:	4610      	mov	r0, r2
 8001658:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	2007      	movs	r0, #7
 800165e:	f003 fdc5 	bl	80051ec <memp_free>
      break;
 8001662:	e011      	b.n	8001688 <tcpip_thread_handle_msg+0x7c>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6892      	ldr	r2, [r2, #8]
 800166c:	4610      	mov	r0, r2
 800166e:	4798      	blx	r3
      break;
 8001670:	e00a      	b.n	8001688 <tcpip_thread_handle_msg+0x7c>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <tcpip_thread_handle_msg+0x84>)
 8001674:	22dd      	movs	r2, #221	; 0xdd
 8001676:	4907      	ldr	r1, [pc, #28]	; (8001694 <tcpip_thread_handle_msg+0x88>)
 8001678:	4807      	ldr	r0, [pc, #28]	; (8001698 <tcpip_thread_handle_msg+0x8c>)
 800167a:	f016 fbdb 	bl	8017e34 <iprintf>
 800167e:	2000      	movs	r0, #0
 8001680:	f016 fcda 	bl	8018038 <fflush>
 8001684:	f016 fc1f 	bl	8017ec6 <abort>
      break;
  }
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	08019144 	.word	0x08019144
 8001694:	08019164 	.word	0x08019164
 8001698:	08019184 	.word	0x08019184

0800169c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80016a6:	2007      	movs	r0, #7
 80016a8:	f003 fd36 	bl	8005118 <memp_malloc>
 80016ac:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <tcpip_try_callback+0x1e>
    return ERR_MEM;
 80016b4:	f04f 33ff 	mov.w	r3, #4294967295
 80016b8:	e017      	b.n	80016ea <tcpip_try_callback+0x4e>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80016cc:	68f9      	ldr	r1, [r7, #12]
 80016ce:	4809      	ldr	r0, [pc, #36]	; (80016f4 <tcpip_try_callback+0x58>)
 80016d0:	f7ff fde8 	bl	80012a4 <sys_mbox_trypost>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d006      	beq.n	80016e8 <tcpip_try_callback+0x4c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80016da:	68f9      	ldr	r1, [r7, #12]
 80016dc:	2007      	movs	r0, #7
 80016de:	f003 fd85 	bl	80051ec <memp_free>
    return ERR_MEM;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	e000      	b.n	80016ea <tcpip_try_callback+0x4e>
  }
  return ERR_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000704 	.word	0x20000704

080016f8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  lwip_init();
 8001702:	f002 fab8 	bl	8003c76 <lwip_init>

  tcpip_init_done = initfunc;
 8001706:	4a1b      	ldr	r2, [pc, #108]	; (8001774 <tcpip_init+0x7c>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800170c:	4a1a      	ldr	r2, [pc, #104]	; (8001778 <tcpip_init+0x80>)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8001712:	2100      	movs	r1, #0
 8001714:	4819      	ldr	r0, [pc, #100]	; (800177c <tcpip_init+0x84>)
 8001716:	f7ff fdb6 	bl	8001286 <sys_mbox_new>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00b      	beq.n	8001738 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8001720:	4b17      	ldr	r3, [pc, #92]	; (8001780 <tcpip_init+0x88>)
 8001722:	f240 229a 	movw	r2, #666	; 0x29a
 8001726:	4917      	ldr	r1, [pc, #92]	; (8001784 <tcpip_init+0x8c>)
 8001728:	4817      	ldr	r0, [pc, #92]	; (8001788 <tcpip_init+0x90>)
 800172a:	f016 fb83 	bl	8017e34 <iprintf>
 800172e:	2000      	movs	r0, #0
 8001730:	f016 fc82 	bl	8018038 <fflush>
 8001734:	f016 fbc7 	bl	8017ec6 <abort>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8001738:	4814      	ldr	r0, [pc, #80]	; (800178c <tcpip_init+0x94>)
 800173a:	f7ff fd82 	bl	8001242 <sys_mutex_new>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00b      	beq.n	800175c <tcpip_init+0x64>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <tcpip_init+0x88>)
 8001746:	f240 229e 	movw	r2, #670	; 0x29e
 800174a:	4911      	ldr	r1, [pc, #68]	; (8001790 <tcpip_init+0x98>)
 800174c:	480e      	ldr	r0, [pc, #56]	; (8001788 <tcpip_init+0x90>)
 800174e:	f016 fb71 	bl	8017e34 <iprintf>
 8001752:	2000      	movs	r0, #0
 8001754:	f016 fc70 	bl	8018038 <fflush>
 8001758:	f016 fbb5 	bl	8017ec6 <abort>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800175c:	2301      	movs	r3, #1
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2300      	movs	r3, #0
 8001762:	2200      	movs	r2, #0
 8001764:	490b      	ldr	r1, [pc, #44]	; (8001794 <tcpip_init+0x9c>)
 8001766:	480c      	ldr	r0, [pc, #48]	; (8001798 <tcpip_init+0xa0>)
 8001768:	f7ff fdb5 	bl	80012d6 <sys_thread_new>
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200006fc 	.word	0x200006fc
 8001778:	20000700 	.word	0x20000700
 800177c:	20000704 	.word	0x20000704
 8001780:	08019144 	.word	0x08019144
 8001784:	080191ac 	.word	0x080191ac
 8001788:	08019184 	.word	0x08019184
 800178c:	20000d5c 	.word	0x20000d5c
 8001790:	080191d0 	.word	0x080191d0
 8001794:	0800159d 	.word	0x0800159d
 8001798:	080191f4 	.word	0x080191f4

0800179c <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	88db      	ldrh	r3, [r3, #6]
 80017a8:	3301      	adds	r3, #1
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	88db      	ldrh	r3, [r3, #6]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d105      	bne.n	80017c4 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	88db      	ldrh	r3, [r3, #6]
 80017bc:	3301      	adds	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	88db      	ldrh	r3, [r3, #6]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	78fa      	ldrb	r2, [r7, #3]
 80017ec:	711a      	strb	r2, [r3, #4]
  rb->put++;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	3301      	adds	r3, #1
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	2bff      	cmp	r3, #255	; 0xff
 8001800:	d902      	bls.n	8001808 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	801a      	strh	r2, [r3, #0]
  }
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	885b      	ldrh	r3, [r3, #2]
 8001820:	461a      	mov	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	3304      	adds	r3, #4
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	2bff      	cmp	r3, #255	; 0xff
 8001844:	d90a      	bls.n	800185c <mqtt_ringbuf_advance_get_idx+0x28>
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <mqtt_ringbuf_advance_get_idx+0x54>)
 8001848:	22cb      	movs	r2, #203	; 0xcb
 800184a:	4910      	ldr	r1, [pc, #64]	; (800188c <mqtt_ringbuf_advance_get_idx+0x58>)
 800184c:	4810      	ldr	r0, [pc, #64]	; (8001890 <mqtt_ringbuf_advance_get_idx+0x5c>)
 800184e:	f016 faf1 	bl	8017e34 <iprintf>
 8001852:	2000      	movs	r0, #0
 8001854:	f016 fbf0 	bl	8018038 <fflush>
 8001858:	f016 fb35 	bl	8017ec6 <abort>

  rb->get += len;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	885a      	ldrh	r2, [r3, #2]
 8001860:	887b      	ldrh	r3, [r7, #2]
 8001862:	4413      	add	r3, r2
 8001864:	b29a      	uxth	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	885b      	ldrh	r3, [r3, #2]
 800186e:	2bff      	cmp	r3, #255	; 0xff
 8001870:	d906      	bls.n	8001880 <mqtt_ringbuf_advance_get_idx+0x4c>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	885b      	ldrh	r3, [r3, #2]
 8001876:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800187a:	b29a      	uxth	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	805a      	strh	r2, [r3, #2]
  }
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	08019294 	.word	0x08019294
 800188c:	080192b8 	.word	0x080192b8
 8001890:	080192f8 	.word	0x080192f8

08001894 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	885b      	ldrh	r3, [r3, #2]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b0:	d303      	bcc.n	80018ba <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80018b8:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	b29b      	uxth	r3, r3
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffda 	bl	8001894 <mqtt_ringbuf_len>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	885b      	ldrh	r3, [r3, #2]
 80018e8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80018ec:	429a      	cmp	r2, r3
 80018ee:	da04      	bge.n	80018fa <mqtt_output_send+0x2e>
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ffcf 	bl	8001894 <mqtt_ringbuf_len>
 80018f6:	4603      	mov	r3, r0
 80018f8:	e004      	b.n	8001904 <mqtt_output_send+0x38>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	885b      	ldrh	r3, [r3, #2]
 80018fe:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001902:	b29b      	uxth	r3, r3
 8001904:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800190c:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10a      	bne.n	800192a <mqtt_output_send+0x5e>
 8001914:	4b47      	ldr	r3, [pc, #284]	; (8001a34 <mqtt_output_send+0x168>)
 8001916:	22f0      	movs	r2, #240	; 0xf0
 8001918:	4947      	ldr	r1, [pc, #284]	; (8001a38 <mqtt_output_send+0x16c>)
 800191a:	4848      	ldr	r0, [pc, #288]	; (8001a3c <mqtt_output_send+0x170>)
 800191c:	f016 fa8a 	bl	8017e34 <iprintf>
 8001920:	2000      	movs	r0, #0
 8001922:	f016 fb89 	bl	8018038 <fflush>
 8001926:	f016 face 	bl	8017ec6 <abort>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 800192a:	89bb      	ldrh	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d07c      	beq.n	8001a2a <mqtt_output_send+0x15e>
 8001930:	897b      	ldrh	r3, [r7, #10]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d079      	beq.n	8001a2a <mqtt_output_send+0x15e>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8001936:	89ba      	ldrh	r2, [r7, #12]
 8001938:	897b      	ldrh	r3, [r7, #10]
 800193a:	429a      	cmp	r2, r3
 800193c:	d90d      	bls.n	800195a <mqtt_output_send+0x8e>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 800193e:	897b      	ldrh	r3, [r7, #10]
 8001940:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ffa6 	bl	8001894 <mqtt_ringbuf_len>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	897b      	ldrh	r3, [r7, #10]
 800194e:	4293      	cmp	r3, r2
 8001950:	bf34      	ite	cc
 8001952:	2301      	movcc	r3, #1
 8001954:	2300      	movcs	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ff5a 	bl	8001814 <mqtt_ringbuf_get_ptr>
 8001960:	4601      	mov	r1, r0
 8001962:	7bbb      	ldrb	r3, [r7, #14]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <mqtt_output_send+0xa0>
 8001968:	2303      	movs	r3, #3
 800196a:	e000      	b.n	800196e <mqtt_output_send+0xa2>
 800196c:	2301      	movs	r3, #1
 800196e:	89ba      	ldrh	r2, [r7, #12]
 8001970:	6838      	ldr	r0, [r7, #0]
 8001972:	f009 ff9b 	bl	800b8ac <tcp_write>
 8001976:	4603      	mov	r3, r0
 8001978:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 800197a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d146      	bne.n	8001a10 <mqtt_output_send+0x144>
 8001982:	7bbb      	ldrb	r3, [r7, #14]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d043      	beq.n	8001a10 <mqtt_output_send+0x144>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8001988:	89bb      	ldrh	r3, [r7, #12]
 800198a:	4619      	mov	r1, r3
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff51 	bl	8001834 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001998:	461c      	mov	r4, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ff7a 	bl	8001894 <mqtt_ringbuf_len>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	885b      	ldrh	r3, [r3, #2]
 80019a8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80019ac:	429a      	cmp	r2, r3
 80019ae:	da04      	bge.n	80019ba <mqtt_output_send+0xee>
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff6f 	bl	8001894 <mqtt_ringbuf_len>
 80019b6:	4603      	mov	r3, r0
 80019b8:	e003      	b.n	80019c2 <mqtt_output_send+0xf6>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	885b      	ldrh	r3, [r3, #2]
 80019be:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80019c2:	429c      	cmp	r4, r3
 80019c4:	da03      	bge.n	80019ce <mqtt_output_send+0x102>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80019cc:	e014      	b.n	80019f8 <mqtt_output_send+0x12c>
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ff60 	bl	8001894 <mqtt_ringbuf_len>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	885b      	ldrh	r3, [r3, #2]
 80019dc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80019e0:	429a      	cmp	r2, r3
 80019e2:	da04      	bge.n	80019ee <mqtt_output_send+0x122>
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ff55 	bl	8001894 <mqtt_ringbuf_len>
 80019ea:	4603      	mov	r3, r0
 80019ec:	e004      	b.n	80019f8 <mqtt_output_send+0x12c>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	885b      	ldrh	r3, [r3, #2]
 80019f2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ff0a 	bl	8001814 <mqtt_ringbuf_get_ptr>
 8001a00:	4601      	mov	r1, r0
 8001a02:	89ba      	ldrh	r2, [r7, #12]
 8001a04:	2301      	movs	r3, #1
 8001a06:	6838      	ldr	r0, [r7, #0]
 8001a08:	f009 ff50 	bl	800b8ac <tcp_write>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8001a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d109      	bne.n	8001a2c <mqtt_output_send+0x160>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8001a18:	89bb      	ldrh	r3, [r7, #12]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff09 	bl	8001834 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 8001a22:	6838      	ldr	r0, [r7, #0]
 8001a24:	f00a fdda 	bl	800c5dc <tcp_output>
 8001a28:	e000      	b.n	8001a2c <mqtt_output_send+0x160>
    return;
 8001a2a:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd90      	pop	{r4, r7, pc}
 8001a32:	bf00      	nop
 8001a34:	08019294 	.word	0x08019294
 8001a38:	08019320 	.word	0x08019320
 8001a3c:	080192f8 	.word	0x080192f8

08001a40 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10b      	bne.n	8001a72 <mqtt_create_request+0x32>
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <mqtt_create_request+0x8c>)
 8001a5c:	f240 1223 	movw	r2, #291	; 0x123
 8001a60:	491b      	ldr	r1, [pc, #108]	; (8001ad0 <mqtt_create_request+0x90>)
 8001a62:	481c      	ldr	r0, [pc, #112]	; (8001ad4 <mqtt_create_request+0x94>)
 8001a64:	f016 f9e6 	bl	8017e34 <iprintf>
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f016 fae5 	bl	8018038 <fflush>
 8001a6e:	f016 fa2a 	bl	8017ec6 <abort>
  for (n = 0; n < r_objs_len; n++) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	74fb      	strb	r3, [r7, #19]
 8001a76:	e01f      	b.n	8001ab8 <mqtt_create_request+0x78>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 8001a78:	7cfb      	ldrb	r3, [r7, #19]
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	7cfb      	ldrb	r3, [r7, #19]
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	68f9      	ldr	r1, [r7, #12]
 8001a88:	440b      	add	r3, r1
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d111      	bne.n	8001ab2 <mqtt_create_request+0x72>
      r = &r_objs[n];
 8001a8e:	7cfb      	ldrb	r3, [r7, #19]
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	4413      	add	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	6a3a      	ldr	r2, [r7, #32]
 8001aa8:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	88fa      	ldrh	r2, [r7, #6]
 8001aae:	819a      	strh	r2, [r3, #12]
      break;
 8001ab0:	e006      	b.n	8001ac0 <mqtt_create_request+0x80>
  for (n = 0; n < r_objs_len; n++) {
 8001ab2:	7cfb      	ldrb	r3, [r7, #19]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	74fb      	strb	r3, [r7, #19]
 8001ab8:	7cfa      	ldrb	r2, [r7, #19]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d3db      	bcc.n	8001a78 <mqtt_create_request+0x38>
    }
  }
  return r;
 8001ac0:	697b      	ldr	r3, [r7, #20]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	08019294 	.word	0x08019294
 8001ad0:	08019340 	.word	0x08019340
 8001ad4:	080192f8 	.word	0x080192f8

08001ad8 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d10b      	bne.n	8001b08 <mqtt_append_request+0x30>
 8001af0:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <mqtt_append_request+0x9c>)
 8001af2:	f240 123f 	movw	r2, #319	; 0x13f
 8001af6:	4920      	ldr	r1, [pc, #128]	; (8001b78 <mqtt_append_request+0xa0>)
 8001af8:	4820      	ldr	r0, [pc, #128]	; (8001b7c <mqtt_append_request+0xa4>)
 8001afa:	f016 f99b 	bl	8017e34 <iprintf>
 8001afe:	2000      	movs	r0, #0
 8001b00:	f016 fa9a 	bl	8018038 <fflush>
 8001b04:	f016 f9df 	bl	8017ec6 <abort>

  /* Iterate through queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	e00a      	b.n	8001b26 <mqtt_append_request+0x4e>
    time_before += iter->timeout_diff;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	89da      	ldrh	r2, [r3, #14]
 8001b14:	8a7b      	ldrh	r3, [r7, #18]
 8001b16:	4413      	add	r3, r2
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	827b      	strh	r3, [r7, #18]
    head = iter;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f1      	bne.n	8001b10 <mqtt_append_request+0x38>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 8001b2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b30:	2b1e      	cmp	r3, #30
 8001b32:	dd0b      	ble.n	8001b4c <mqtt_append_request+0x74>
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <mqtt_append_request+0x9c>)
 8001b36:	f240 1247 	movw	r2, #327	; 0x147
 8001b3a:	4911      	ldr	r1, [pc, #68]	; (8001b80 <mqtt_append_request+0xa8>)
 8001b3c:	480f      	ldr	r0, [pc, #60]	; (8001b7c <mqtt_append_request+0xa4>)
 8001b3e:	f016 f979 	bl	8017e34 <iprintf>
 8001b42:	2000      	movs	r0, #0
 8001b44:	f016 fa78 	bl	8018038 <fflush>
 8001b48:	f016 f9bd 	bl	8017ec6 <abort>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8001b4c:	8a7b      	ldrh	r3, [r7, #18]
 8001b4e:	f1c3 031e 	rsb	r3, r3, #30
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d103      	bne.n	8001b66 <mqtt_append_request+0x8e>
    *tail = r;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8001b64:	e002      	b.n	8001b6c <mqtt_append_request+0x94>
    head->next = r;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	601a      	str	r2, [r3, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	08019294 	.word	0x08019294
 8001b78:	08019364 	.word	0x08019364
 8001b7c:	080192f8 	.word	0x080192f8
 8001b80:	08019388 	.word	0x08019388

08001b84 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <mqtt_delete_request+0x14>
    r->next = r;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	601a      	str	r2, [r3, #0]
  }
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10b      	bne.n	8001bd6 <mqtt_take_request+0x32>
 8001bbe:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <mqtt_take_request+0xa4>)
 8001bc0:	f240 1267 	movw	r2, #359	; 0x167
 8001bc4:	4921      	ldr	r1, [pc, #132]	; (8001c4c <mqtt_take_request+0xa8>)
 8001bc6:	4822      	ldr	r0, [pc, #136]	; (8001c50 <mqtt_take_request+0xac>)
 8001bc8:	f016 f934 	bl	8017e34 <iprintf>
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f016 fa33 	bl	8018038 <fflush>
 8001bd2:	f016 f978 	bl	8017ec6 <abort>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	e009      	b.n	8001bf2 <mqtt_take_request+0x4e>
    if (iter->pkt_id == pkt_id) {
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	899b      	ldrh	r3, [r3, #12]
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d008      	beq.n	8001bfa <mqtt_take_request+0x56>
      break;
    }
    prev = iter;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f2      	bne.n	8001bde <mqtt_take_request+0x3a>
 8001bf8:	e000      	b.n	8001bfc <mqtt_take_request+0x58>
      break;
 8001bfa:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01c      	beq.n	8001c3c <mqtt_take_request+0x98>
    /* unchain */
    if (prev == NULL) {
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d104      	bne.n	8001c12 <mqtt_take_request+0x6e>
      *tail = iter->next;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	e003      	b.n	8001c1a <mqtt_take_request+0x76>
    } else {
      prev->next = iter->next;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d009      	beq.n	8001c36 <mqtt_take_request+0x92>
      iter->next->timeout_diff += iter->timeout_diff;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	89d1      	ldrh	r1, [r2, #14]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	89d2      	ldrh	r2, [r2, #14]
 8001c30:	440a      	add	r2, r1
 8001c32:	b292      	uxth	r2, r2
 8001c34:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	08019294 	.word	0x08019294
 8001c4c:	080193c0 	.word	0x080193c0
 8001c50:	080192f8 	.word	0x080192f8

08001c54 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10b      	bne.n	8001c7e <mqtt_request_time_elapsed+0x2a>
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <mqtt_request_time_elapsed+0xa0>)
 8001c68:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8001c6c:	4922      	ldr	r1, [pc, #136]	; (8001cf8 <mqtt_request_time_elapsed+0xa4>)
 8001c6e:	4823      	ldr	r0, [pc, #140]	; (8001cfc <mqtt_request_time_elapsed+0xa8>)
 8001c70:	f016 f8e0 	bl	8017e34 <iprintf>
 8001c74:	2000      	movs	r0, #0
 8001c76:	f016 f9df 	bl	8018038 <fflush>
 8001c7a:	f016 f924 	bl	8017ec6 <abort>
  r = *tail;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 8001c84:	e02c      	b.n	8001ce0 <mqtt_request_time_elapsed+0x8c>
    if (t >= r->timeout_diff) {
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	89db      	ldrh	r3, [r3, #14]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d31c      	bcc.n	8001ccc <mqtt_request_time_elapsed+0x78>
      t -= (u8_t)r->timeout_diff;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	89db      	ldrh	r3, [r3, #14]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	78fa      	ldrb	r2, [r7, #3]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <mqtt_request_time_elapsed+0x6a>
        r->cb(r->arg, ERR_TIMEOUT);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	6892      	ldr	r2, [r2, #8]
 8001cb6:	f06f 0102 	mvn.w	r1, #2
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f7ff ff60 	bl	8001b84 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	e009      	b.n	8001ce0 <mqtt_request_time_elapsed+0x8c>
    } else {
      r->timeout_diff -= t;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	89da      	ldrh	r2, [r3, #14]
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	81da      	strh	r2, [r3, #14]
      t = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <mqtt_request_time_elapsed+0x98>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1cc      	bne.n	8001c86 <mqtt_request_time_elapsed+0x32>
    }
  }
}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	08019294 	.word	0x08019294
 8001cf8:	080193e0 	.word	0x080193e0
 8001cfc:	080192f8 	.word	0x080192f8

08001d00 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10b      	bne.n	8001d26 <mqtt_clear_requests+0x26>
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <mqtt_clear_requests+0x54>)
 8001d10:	f240 12a7 	movw	r2, #423	; 0x1a7
 8001d14:	4910      	ldr	r1, [pc, #64]	; (8001d58 <mqtt_clear_requests+0x58>)
 8001d16:	4811      	ldr	r0, [pc, #68]	; (8001d5c <mqtt_clear_requests+0x5c>)
 8001d18:	f016 f88c 	bl	8017e34 <iprintf>
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f016 f98b 	bl	8018038 <fflush>
 8001d22:	f016 f8d0 	bl	8017ec6 <abort>
  for (iter = *tail; iter != NULL; iter = next) {
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	e007      	b.n	8001d3e <mqtt_clear_requests+0x3e>
    next = iter->next;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f7ff ff25 	bl	8001b84 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f4      	bne.n	8001d2e <mqtt_clear_requests+0x2e>
  }
  *tail = NULL;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	08019294 	.word	0x08019294
 8001d58:	08019408 	.word	0x08019408
 8001d5c:	080192f8 	.word	0x080192f8

08001d60 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10b      	bne.n	8001d88 <mqtt_init_requests+0x28>
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <mqtt_init_requests+0x58>)
 8001d72:	f240 12b7 	movw	r2, #439	; 0x1b7
 8001d76:	4911      	ldr	r1, [pc, #68]	; (8001dbc <mqtt_init_requests+0x5c>)
 8001d78:	4811      	ldr	r0, [pc, #68]	; (8001dc0 <mqtt_init_requests+0x60>)
 8001d7a:	f016 f85b 	bl	8017e34 <iprintf>
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f016 f95a 	bl	8018038 <fflush>
 8001d84:	f016 f89f 	bl	8017ec6 <abort>
  for (n = 0; n < r_objs_len; n++) {
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73fb      	strb	r3, [r7, #15]
 8001d8c:	e00b      	b.n	8001da6 <mqtt_init_requests+0x46>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	440a      	add	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	3301      	adds	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d3ef      	bcc.n	8001d8e <mqtt_init_requests+0x2e>
  }
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	08019294 	.word	0x08019294
 8001dbc:	0801942c 	.word	0x0801942c
 8001dc0:	080192f8 	.word	0x080192f8

08001dc4 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff fcfd 	bl	80017d4 <mqtt_ringbuf_put>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8001dee:	887b      	ldrh	r3, [r7, #2]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	4619      	mov	r1, r3
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff fceb 	bl	80017d4 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	4619      	mov	r1, r3
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff fce5 	bl	80017d4 <mqtt_ringbuf_put>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 8001e20:	2300      	movs	r3, #0
 8001e22:	82fb      	strh	r3, [r7, #22]
 8001e24:	e00a      	b.n	8001e3c <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 8001e26:	8afb      	ldrh	r3, [r7, #22]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f7ff fccf 	bl	80017d4 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8001e36:	8afb      	ldrh	r3, [r7, #22]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	82fb      	strh	r3, [r7, #22]
 8001e3c:	8afa      	ldrh	r2, [r7, #22]
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d3f0      	bcc.n	8001e26 <mqtt_output_append_buf+0x14>
  }
}
 8001e44:	bf00      	nop
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	4613      	mov	r3, r2
 8001e58:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	4619      	mov	r1, r3
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f7ff fcb5 	bl	80017d4 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	4619      	mov	r1, r3
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff fcaf 	bl	80017d4 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8001e76:	2300      	movs	r3, #0
 8001e78:	82fb      	strh	r3, [r7, #22]
 8001e7a:	e00a      	b.n	8001e92 <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8001e7c:	8afb      	ldrh	r3, [r7, #22]
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	4413      	add	r3, r2
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4619      	mov	r1, r3
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f7ff fca4 	bl	80017d4 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8001e8c:	8afb      	ldrh	r3, [r7, #22]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	82fb      	strh	r3, [r7, #22]
 8001e92:	8afa      	ldrh	r2, [r7, #22]
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d3f0      	bcc.n	8001e7c <mqtt_output_append_string+0x30>
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	4608      	mov	r0, r1
 8001eac:	4611      	mov	r1, r2
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	70fb      	strb	r3, [r7, #3]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	70bb      	strb	r3, [r7, #2]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	b25a      	sxtb	r2, r3
 8001ec2:	78bb      	ldrb	r3, [r7, #2]
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	b25b      	sxtb	r3, r3
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	b25b      	sxtb	r3, r3
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	b25a      	sxtb	r2, r3
 8001ed2:	787b      	ldrb	r3, [r7, #1]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	b25b      	sxtb	r3, r3
 8001ed8:	f003 0306 	and.w	r3, r3, #6
 8001edc:	b25b      	sxtb	r3, r3
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	b25a      	sxtb	r2, r3
 8001ee2:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	b25b      	sxtb	r3, r3
 8001eec:	4313      	orrs	r3, r2
 8001eee:	b25b      	sxtb	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff65 	bl	8001dc4 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8001efa:	8abb      	ldrh	r3, [r7, #20]
 8001efc:	b25b      	sxtb	r3, r3
 8001efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f02:	b25a      	sxtb	r2, r3
 8001f04:	8abb      	ldrh	r3, [r7, #20]
 8001f06:	2b7f      	cmp	r3, #127	; 0x7f
 8001f08:	d902      	bls.n	8001f10 <mqtt_output_append_fixed_header+0x6e>
 8001f0a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001f0e:	e000      	b.n	8001f12 <mqtt_output_append_fixed_header+0x70>
 8001f10:	2300      	movs	r3, #0
 8001f12:	4313      	orrs	r3, r2
 8001f14:	b25b      	sxtb	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	4619      	mov	r1, r3
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ff52 	bl	8001dc4 <mqtt_output_append_u8>
    r_length >>= 7;
 8001f20:	8abb      	ldrh	r3, [r7, #20]
 8001f22:	09db      	lsrs	r3, r3, #7
 8001f24:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8001f26:	8abb      	ldrh	r3, [r7, #20]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1e6      	bne.n	8001efa <mqtt_output_append_fixed_header+0x58>
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8001f40:	887b      	ldrh	r3, [r7, #2]
 8001f42:	3301      	adds	r3, #1
 8001f44:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10b      	bne.n	8001f64 <mqtt_output_check_space+0x30>
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <mqtt_output_check_space+0x64>)
 8001f4e:	f240 2207 	movw	r2, #519	; 0x207
 8001f52:	4912      	ldr	r1, [pc, #72]	; (8001f9c <mqtt_output_check_space+0x68>)
 8001f54:	4812      	ldr	r0, [pc, #72]	; (8001fa0 <mqtt_output_check_space+0x6c>)
 8001f56:	f015 ff6d 	bl	8017e34 <iprintf>
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f016 f86c 	bl	8018038 <fflush>
 8001f60:	f015 ffb1 	bl	8017ec6 <abort>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 8001f64:	89fb      	ldrh	r3, [r7, #14]
 8001f66:	3301      	adds	r3, #1
 8001f68:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8001f6a:	887b      	ldrh	r3, [r7, #2]
 8001f6c:	09db      	lsrs	r3, r3, #7
 8001f6e:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f6      	bne.n	8001f64 <mqtt_output_check_space+0x30>

  return (total_len <= mqtt_ringbuf_free(rb));
 8001f76:	89fc      	ldrh	r4, [r7, #14]
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff fc8b 	bl	8001894 <mqtt_ringbuf_len>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001f84:	429c      	cmp	r4, r3
 8001f86:	bfd4      	ite	le
 8001f88:	2301      	movle	r3, #1
 8001f8a:	2300      	movgt	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd90      	pop	{r4, r7, pc}
 8001f96:	bf00      	nop
 8001f98:	08019294 	.word	0x08019294
 8001f9c:	08019450 	.word	0x08019450
 8001fa0:	080192f8 	.word	0x080192f8

08001fa4 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10b      	bne.n	8001fce <mqtt_close+0x2a>
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <mqtt_close+0xbc>)
 8001fb8:	f240 221b 	movw	r2, #539	; 0x21b
 8001fbc:	4929      	ldr	r1, [pc, #164]	; (8002064 <mqtt_close+0xc0>)
 8001fbe:	482a      	ldr	r0, [pc, #168]	; (8002068 <mqtt_close+0xc4>)
 8001fc0:	f015 ff38 	bl	8017e34 <iprintf>
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f016 f837 	bl	8018038 <fflush>
 8001fca:	f015 ff7c 	bl	8017ec6 <abort>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d024      	beq.n	8002020 <mqtt_close+0x7c>
    err_t res;
    altcp_recv(client->conn, NULL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f006 f99d 	bl	800831c <tcp_recv>
    altcp_err(client->conn,  NULL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f006 f9e3 	bl	80083b4 <tcp_err>
    altcp_sent(client->conn, NULL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f006 f9b7 	bl	8008368 <tcp_sent>
    res = altcp_close(client->conn);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f004 fea6 	bl	8006d50 <tcp_close>
 8002004:	4603      	mov	r3, r0
 8002006:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 8002008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d004      	beq.n	800201a <mqtt_close+0x76>
      altcp_abort(client->conn);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f004 ff93 	bl	8006f40 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3318      	adds	r3, #24
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fe6b 	bl	8001d00 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	480f      	ldr	r0, [pc, #60]	; (800206c <mqtt_close+0xc8>)
 800202e:	f00b fcff 	bl	800da30 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	7a9b      	ldrb	r3, [r3, #10]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00d      	beq.n	8002056 <mqtt_close+0xb2>

    client->conn_state = TCP_DISCONNECTED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <mqtt_close+0xb2>
      client->connect_cb(client, client->connect_arg, reason);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6911      	ldr	r1, [r2, #16]
 8002050:	887a      	ldrh	r2, [r7, #2]
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	4798      	blx	r3
    }
  }
}
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	08019294 	.word	0x08019294
 8002064:	08019474 	.word	0x08019474
 8002068:	080192f8 	.word	0x080192f8
 800206c:	08002071 	.word	0x08002071

08002070 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af02      	add	r7, sp, #8
 8002076:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10b      	bne.n	800209e <mqtt_cyclic_timer+0x2e>
 8002086:	4b44      	ldr	r3, [pc, #272]	; (8002198 <mqtt_cyclic_timer+0x128>)
 8002088:	f44f 7211 	mov.w	r2, #580	; 0x244
 800208c:	4943      	ldr	r1, [pc, #268]	; (800219c <mqtt_cyclic_timer+0x12c>)
 800208e:	4844      	ldr	r0, [pc, #272]	; (80021a0 <mqtt_cyclic_timer+0x130>)
 8002090:	f015 fed0 	bl	8017e34 <iprintf>
 8002094:	2000      	movs	r0, #0
 8002096:	f015 ffcf 	bl	8018038 <fflush>
 800209a:	f015 ff14 	bl	8017ec6 <abort>

  if (client->conn_state == MQTT_CONNECTING) {
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	7a9b      	ldrb	r3, [r3, #10]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d115      	bne.n	80020d2 <mqtt_cyclic_timer+0x62>
    client->cyclic_tick++;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	3301      	adds	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	2b63      	cmp	r3, #99	; 0x63
 80020c0:	dd5d      	ble.n	800217e <mqtt_cyclic_timer+0x10e>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 80020c2:	f240 1101 	movw	r1, #257	; 0x101
 80020c6:	68b8      	ldr	r0, [r7, #8]
 80020c8:	f7ff ff6c 	bl	8001fa4 <mqtt_close>
      restart_timer = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	73fb      	strb	r3, [r7, #15]
 80020d0:	e055      	b.n	800217e <mqtt_cyclic_timer+0x10e>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	7a9b      	ldrb	r3, [r3, #10]
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d14f      	bne.n	800217a <mqtt_cyclic_timer+0x10a>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	3318      	adds	r3, #24
 80020de:	2105      	movs	r1, #5
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fdb7 	bl	8001c54 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	885b      	ldrh	r3, [r3, #2]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d047      	beq.n	800217e <mqtt_cyclic_timer+0x10e>

      client->server_watchdog++;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	889b      	ldrh	r3, [r3, #4]
 80020f2:	3301      	adds	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	889b      	ldrh	r3, [r3, #4]
 80020fe:	461a      	mov	r2, r3
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	441a      	add	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	885b      	ldrh	r3, [r3, #2]
 800210a:	4619      	mov	r1, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	885b      	ldrh	r3, [r3, #2]
 8002110:	085b      	lsrs	r3, r3, #1
 8002112:	b29b      	uxth	r3, r3
 8002114:	440b      	add	r3, r1
 8002116:	429a      	cmp	r2, r3
 8002118:	dd06      	ble.n	8002128 <mqtt_cyclic_timer+0xb8>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800211a:	f240 1101 	movw	r1, #257	; 0x101
 800211e:	68b8      	ldr	r0, [r7, #8]
 8002120:	f7ff ff40 	bl	8001fa4 <mqtt_close>
        restart_timer = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      client->cyclic_tick++;
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	3301      	adds	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	801a      	strh	r2, [r3, #0]
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	8852      	ldrh	r2, [r2, #2]
 8002144:	4293      	cmp	r3, r2
 8002146:	db1a      	blt.n	800217e <mqtt_cyclic_timer+0x10e>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	33ec      	adds	r3, #236	; 0xec
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fef0 	bl	8001f34 <mqtt_output_check_space>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d011      	beq.n	800217e <mqtt_cyclic_timer+0x10e>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8002160:	2300      	movs	r3, #0
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	2300      	movs	r3, #0
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2300      	movs	r3, #0
 800216a:	2200      	movs	r2, #0
 800216c:	210c      	movs	r1, #12
 800216e:	f7ff fe98 	bl	8001ea2 <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2200      	movs	r2, #0
 8002176:	801a      	strh	r2, [r3, #0]
 8002178:	e001      	b.n	800217e <mqtt_cyclic_timer+0x10e>
        }
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <mqtt_cyclic_timer+0x120>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	4907      	ldr	r1, [pc, #28]	; (80021a4 <mqtt_cyclic_timer+0x134>)
 8002188:	f241 3088 	movw	r0, #5000	; 0x1388
 800218c:	f00b fc24 	bl	800d9d8 <sys_timeout>
  }
}
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	08019294 	.word	0x08019294
 800219c:	08019490 	.word	0x08019490
 80021a0:	080192f8 	.word	0x080192f8
 80021a4:	08002071 	.word	0x08002071

080021a8 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	4608      	mov	r0, r1
 80021b2:	4611      	mov	r1, r2
 80021b4:	461a      	mov	r2, r3
 80021b6:	4603      	mov	r3, r0
 80021b8:	70fb      	strb	r3, [r7, #3]
 80021ba:	460b      	mov	r3, r1
 80021bc:	803b      	strh	r3, [r7, #0]
 80021be:	4613      	mov	r3, r2
 80021c0:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	33ec      	adds	r3, #236	; 0xec
 80021ca:	2102      	movs	r1, #2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff feb1 	bl	8001f34 <mqtt_output_check_space>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d01d      	beq.n	8002214 <pub_ack_rec_rel_response+0x6c>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80021de:	78ba      	ldrb	r2, [r7, #2]
 80021e0:	78f9      	ldrb	r1, [r7, #3]
 80021e2:	2302      	movs	r3, #2
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	2300      	movs	r3, #0
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	4613      	mov	r3, r2
 80021ec:	2200      	movs	r2, #0
 80021ee:	f7ff fe58 	bl	8001ea2 <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	33ec      	adds	r3, #236	; 0xec
 80021f6:	883a      	ldrh	r2, [r7, #0]
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fdf1 	bl	8001de2 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	4619      	mov	r1, r3
 800220c:	4610      	mov	r0, r2
 800220e:	f7ff fb5d 	bl	80018cc <mqtt_output_send>
 8002212:	e001      	b.n	8002218 <pub_ack_rec_rel_response+0x70>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 8002214:	23ff      	movs	r3, #255	; 0xff
 8002216:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 8002218:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <mqtt_incoming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incoming_suback(struct mqtt_request_t *r, u8_t result)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00c      	beq.n	8002252 <mqtt_incoming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6890      	ldr	r0, [r2, #8]
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	2a02      	cmp	r2, #2
 8002244:	d801      	bhi.n	800224a <mqtt_incoming_suback+0x26>
 8002246:	2200      	movs	r2, #0
 8002248:	e001      	b.n	800224e <mqtt_incoming_suback+0x2a>
 800224a:	f06f 020c 	mvn.w	r2, #12
 800224e:	4611      	mov	r1, r2
 8002250:	4798      	blx	r3
  }
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <mqtt_message_received>:
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_len, u16_t length, u32_t remaining_length,
                      u8_t *var_hdr_payload)
{
 800225c:	b590      	push	{r4, r7, lr}
 800225e:	b08f      	sub	sp, #60	; 0x3c
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	72fb      	strb	r3, [r7, #11]
 800226a:	4613      	mov	r3, r2
 800226c:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800226e:	2300      	movs	r3, #0
 8002270:	86fb      	strh	r3, [r7, #54]	; 0x36

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  u16_t pkt_id = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	85bb      	strh	r3, [r7, #44]	; 0x2c

  LWIP_ASSERT("fixed_hdr_len <= client->msg_idx", fixed_hdr_len <= client->msg_idx);
 8002282:	7afa      	ldrb	r2, [r7, #11]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002288:	429a      	cmp	r2, r3
 800228a:	d90b      	bls.n	80022a4 <mqtt_message_received+0x48>
 800228c:	4ba3      	ldr	r3, [pc, #652]	; (800251c <mqtt_message_received+0x2c0>)
 800228e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8002292:	49a3      	ldr	r1, [pc, #652]	; (8002520 <mqtt_message_received+0x2c4>)
 8002294:	48a3      	ldr	r0, [pc, #652]	; (8002524 <mqtt_message_received+0x2c8>)
 8002296:	f015 fdcd 	bl	8017e34 <iprintf>
 800229a:	2000      	movs	r0, #0
 800229c:	f015 fecc 	bl	8018038 <fflush>
 80022a0:	f015 fe11 	bl	8017ec6 <abort>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_len + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 80022a4:	7afa      	ldrb	r2, [r7, #11]
 80022a6:	893b      	ldrh	r3, [r7, #8]
 80022a8:	4413      	add	r3, r2
 80022aa:	2b80      	cmp	r3, #128	; 0x80
 80022ac:	dd09      	ble.n	80022c2 <mqtt_message_received+0x66>
 80022ae:	4b9b      	ldr	r3, [pc, #620]	; (800251c <mqtt_message_received+0x2c0>)
 80022b0:	f240 22aa 	movw	r2, #682	; 0x2aa
 80022b4:	499c      	ldr	r1, [pc, #624]	; (8002528 <mqtt_message_received+0x2cc>)
 80022b6:	489b      	ldr	r0, [pc, #620]	; (8002524 <mqtt_message_received+0x2c8>)
 80022b8:	f7ff f81b 	bl	80012f2 <lwip_win32_platform_diag>
 80022bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022c0:	e184      	b.n	80025cc <mqtt_message_received+0x370>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 80022c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d123      	bne.n	8002312 <mqtt_message_received+0xb6>
    if (client->conn_state == MQTT_CONNECTING) {
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	7a9b      	ldrb	r3, [r3, #10]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	f040 8165 	bne.w	800259e <mqtt_message_received+0x342>
      if (length < 2) {
 80022d4:	893b      	ldrh	r3, [r7, #8]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	f240 8163 	bls.w	80025a2 <mqtt_message_received+0x346>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 80022dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022de:	3301      	adds	r3, #1
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 80022e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 8159 	bne.w	800259e <mqtt_message_received+0x342>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2203      	movs	r2, #3
 80022f6:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != NULL) {
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 814e 	beq.w	800259e <mqtt_message_received+0x342>
          client->connect_cb(client, client->connect_arg, res);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	6911      	ldr	r1, [r2, #16]
 800230a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	4798      	blx	r3
 8002310:	e145      	b.n	800259e <mqtt_message_received+0x342>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 8002312:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002316:	2b0d      	cmp	r3, #13
 8002318:	f000 8141 	beq.w	800259e <mqtt_message_received+0x342>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800231c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002320:	2b03      	cmp	r3, #3
 8002322:	f040 80d2 	bne.w	80024ca <mqtt_message_received+0x26e>
    u16_t payload_offset = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 800232a:	893b      	ldrh	r3, [r7, #8]
 800232c:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002334:	105b      	asrs	r3, r3, #1
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if (client->msg_idx == (u32_t)(fixed_hdr_len + length)) {
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002344:	7af9      	ldrb	r1, [r7, #11]
 8002346:	893a      	ldrh	r2, [r7, #8]
 8002348:	440a      	add	r2, r1
 800234a:	4293      	cmp	r3, r2
 800234c:	f040 8085 	bne.w	800245a <mqtt_message_received+0x1fe>
      /* First publish message frame. Should have topic and pkt id*/
      size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_len;
 8002350:	7afb      	ldrb	r3, [r7, #11]
 8002352:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 8002358:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <mqtt_message_received+0x108>
 8002360:	2302      	movs	r3, #2
 8002362:	e000      	b.n	8002366 <mqtt_message_received+0x10a>
 8002364:	2300      	movs	r3, #0
 8002366:	847b      	strh	r3, [r7, #34]	; 0x22
      if (length < 2 + qos_len) {
 8002368:	893a      	ldrh	r2, [r7, #8]
 800236a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800236c:	3302      	adds	r3, #2
 800236e:	429a      	cmp	r2, r3
 8002370:	f2c0 8119 	blt.w	80025a6 <mqtt_message_received+0x34a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 8002374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	843b      	strh	r3, [r7, #32]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 800237a:	8c3b      	ldrh	r3, [r7, #32]
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	b29a      	uxth	r2, r3
 8002380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002382:	3301      	adds	r3, #1
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	4413      	add	r3, r2
 800238a:	843b      	strh	r3, [r7, #32]
      if ((topic_len > length - (2 + qos_len)) ||
 800238c:	8c3a      	ldrh	r2, [r7, #32]
 800238e:	8939      	ldrh	r1, [r7, #8]
 8002390:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002392:	3302      	adds	r3, #2
 8002394:	1acb      	subs	r3, r1, r3
 8002396:	429a      	cmp	r2, r3
 8002398:	f300 8107 	bgt.w	80025aa <mqtt_message_received+0x34e>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 800239c:	8c3a      	ldrh	r2, [r7, #32]
 800239e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023a2:	1acb      	subs	r3, r1, r3
 80023a4:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 80023a6:	429a      	cmp	r2, r3
 80023a8:	f200 80ff 	bhi.w	80025aa <mqtt_message_received+0x34e>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 80023ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ae:	3302      	adds	r3, #2
 80023b0:	61fb      	str	r3, [r7, #28]
      after_topic = 2 + topic_len;
 80023b2:	8c3b      	ldrh	r3, [r7, #32]
 80023b4:	3302      	adds	r3, #2
 80023b6:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 80023b8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80023ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <mqtt_message_received+0x16a>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e000      	b.n	80023c8 <mqtt_message_received+0x16c>
 80023c6:	2301      	movs	r3, #1
 80023c8:	441a      	add	r2, r3
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	429a      	cmp	r2, r3
 80023ce:	f200 80ee 	bhi.w	80025ae <mqtt_message_received+0x352>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 80023d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d01a      	beq.n	8002410 <mqtt_message_received+0x1b4>
        if (length < after_topic + 2U) {
 80023da:	893a      	ldrh	r2, [r7, #8]
 80023dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80023de:	3302      	adds	r3, #2
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f0c0 80e6 	bcc.w	80025b2 <mqtt_message_received+0x356>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 80023e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80023e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023ea:	4413      	add	r3, r2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80023f6:	3301      	adds	r3, #1
 80023f8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80023fa:	440b      	add	r3, r1
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	4413      	add	r3, r2
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 8002408:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800240a:	3302      	adds	r3, #2
 800240c:	863b      	strh	r3, [r7, #48]	; 0x30
 800240e:	e002      	b.n	8002416 <mqtt_message_received+0x1ba>
      } else {
        client->inpub_pkt_id = 0;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 8002416:	8c3b      	ldrh	r3, [r7, #32]
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	4413      	add	r3, r2
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	76fb      	strb	r3, [r7, #27]
      /* Zero terminate string */
      topic[topic_len] = 0;
 8002420:	8c3b      	ldrh	r3, [r7, #32]
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	4413      	add	r3, r2
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 800242a:	893a      	ldrh	r2, [r7, #8]
 800242c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 8002432:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002434:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incoming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <mqtt_message_received+0x1f4>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8002446:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	440a      	add	r2, r1
 800244c:	69f9      	ldr	r1, [r7, #28]
 800244e:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 8002450:	8c3b      	ldrh	r3, [r7, #32]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	4413      	add	r3, r2
 8002456:	7efa      	ldrb	r2, [r7, #27]
 8002458:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 800245a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800245c:	2b00      	cmp	r3, #0
 800245e:	d103      	bne.n	8002468 <mqtt_message_received+0x20c>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 809b 	bne.w	800259e <mqtt_message_received+0x342>
      if (length < (size_t)(payload_offset + payload_length)) {
 8002468:	893b      	ldrh	r3, [r7, #8]
 800246a:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800246c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800246e:	440a      	add	r2, r1
 8002470:	4293      	cmp	r3, r2
 8002472:	f0c0 80a0 	bcc.w	80025b6 <mqtt_message_received+0x35a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      if (client->data_cb != NULL) {
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00e      	beq.n	800249c <mqtt_message_received+0x240>
        client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8002486:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002488:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800248a:	18d1      	adds	r1, r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	bf0c      	ite	eq
 8002492:	2301      	moveq	r3, #1
 8002494:	2300      	movne	r3, #0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800249a:	47a0      	blx	r4
      }
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d17d      	bne.n	800259e <mqtt_message_received+0x342>
 80024a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d079      	beq.n	800259e <mqtt_message_received+0x342>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 80024aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <mqtt_message_received+0x25a>
 80024b2:	2304      	movs	r3, #4
 80024b4:	e000      	b.n	80024b8 <mqtt_message_received+0x25c>
 80024b6:	2305      	movs	r3, #5
 80024b8:	76bb      	strb	r3, [r7, #26]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incoming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	891a      	ldrh	r2, [r3, #8]
 80024be:	7eb9      	ldrb	r1, [r7, #26]
 80024c0:	2300      	movs	r3, #0
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f7ff fe70 	bl	80021a8 <pub_ack_rec_rel_response>
 80024c8:	e069      	b.n	800259e <mqtt_message_received+0x342>
      }
    }
  } else {
    if (length < 2) {
 80024ca:	893b      	ldrh	r3, [r7, #8]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d974      	bls.n	80025ba <mqtt_message_received+0x35e>
      LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short message\n"));
      goto out_disconnect;
    }
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 80024d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
    pkt_id |= (u16_t)var_hdr_payload[1];
 80024da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024dc:	3301      	adds	r3, #1
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024e4:	4313      	orrs	r3, r2
 80024e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (pkt_id == 0) {
 80024e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d067      	beq.n	80025be <mqtt_message_received+0x362>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 80024ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d106      	bne.n	8002504 <mqtt_message_received+0x2a8>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 80024f6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80024f8:	2301      	movs	r3, #1
 80024fa:	2106      	movs	r1, #6
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f7ff fe53 	bl	80021a8 <pub_ack_rec_rel_response>
 8002502:	e04c      	b.n	800259e <mqtt_message_received+0x342>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 8002504:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002508:	2b06      	cmp	r3, #6
 800250a:	d10f      	bne.n	800252c <mqtt_message_received+0x2d0>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 800250c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800250e:	2300      	movs	r3, #0
 8002510:	2107      	movs	r1, #7
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7ff fe48 	bl	80021a8 <pub_ack_rec_rel_response>
 8002518:	e041      	b.n	800259e <mqtt_message_received+0x342>
 800251a:	bf00      	nop
 800251c:	08019294 	.word	0x08019294
 8002520:	080194b4 	.word	0x080194b4
 8002524:	080192f8 	.word	0x080192f8
 8002528:	080194d8 	.word	0x080194d8

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 800252c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002530:	2b09      	cmp	r3, #9
 8002532:	d00b      	beq.n	800254c <mqtt_message_received+0x2f0>
 8002534:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002538:	2b0b      	cmp	r3, #11
 800253a:	d007      	beq.n	800254c <mqtt_message_received+0x2f0>
 800253c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002540:	2b07      	cmp	r3, #7
 8002542:	d003      	beq.n	800254c <mqtt_message_received+0x2f0>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8002544:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002548:	2b04      	cmp	r3, #4
 800254a:	d13a      	bne.n	80025c2 <mqtt_message_received+0x366>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	3318      	adds	r3, #24
 8002550:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fb25 	bl	8001ba4 <mqtt_take_request>
 800255a:	6178      	str	r0, [r7, #20]
      if (r != NULL) {
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d01c      	beq.n	800259c <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 8002562:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002566:	2b09      	cmp	r3, #9
 8002568:	d10a      	bne.n	8002580 <mqtt_message_received+0x324>
          if (length < 3) {
 800256a:	893b      	ldrh	r3, [r7, #8]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d92a      	bls.n	80025c6 <mqtt_message_received+0x36a>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incoming_suback(r, var_hdr_payload[2]);
 8002570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002572:	3302      	adds	r3, #2
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	4619      	mov	r1, r3
 8002578:	6978      	ldr	r0, [r7, #20]
 800257a:	f7ff fe53 	bl	8002224 <mqtt_incoming_suback>
 800257e:	e00a      	b.n	8002596 <mqtt_message_received+0x33a>
          }
        } else if (r->cb != NULL) {
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <mqtt_message_received+0x33a>
          r->cb(r->arg, ERR_OK);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	6892      	ldr	r2, [r2, #8]
 8002590:	2100      	movs	r1, #0
 8002592:	4610      	mov	r0, r2
 8002594:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 8002596:	6978      	ldr	r0, [r7, #20]
 8002598:	f7ff faf4 	bl	8001b84 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800259c:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 800259e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025a0:	e014      	b.n	80025cc <mqtt_message_received+0x370>
        goto out_disconnect;
 80025a2:	bf00      	nop
 80025a4:	e010      	b.n	80025c8 <mqtt_message_received+0x36c>
        goto out_disconnect;
 80025a6:	bf00      	nop
 80025a8:	e00e      	b.n	80025c8 <mqtt_message_received+0x36c>
        goto out_disconnect;
 80025aa:	bf00      	nop
 80025ac:	e00c      	b.n	80025c8 <mqtt_message_received+0x36c>
        goto out_disconnect;
 80025ae:	bf00      	nop
 80025b0:	e00a      	b.n	80025c8 <mqtt_message_received+0x36c>
          goto out_disconnect;
 80025b2:	bf00      	nop
 80025b4:	e008      	b.n	80025c8 <mqtt_message_received+0x36c>
        goto out_disconnect;
 80025b6:	bf00      	nop
 80025b8:	e006      	b.n	80025c8 <mqtt_message_received+0x36c>
      goto out_disconnect;
 80025ba:	bf00      	nop
 80025bc:	e004      	b.n	80025c8 <mqtt_message_received+0x36c>
      goto out_disconnect;
 80025be:	bf00      	nop
 80025c0:	e002      	b.n	80025c8 <mqtt_message_received+0x36c>
      goto out_disconnect;
 80025c2:	bf00      	nop
 80025c4:	e000      	b.n	80025c8 <mqtt_message_received+0x36c>
            goto out_disconnect;
 80025c6:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 80025c8:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	373c      	adds	r7, #60	; 0x3c
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd90      	pop	{r4, r7, pc}

080025d4 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af02      	add	r7, sp, #8
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_len = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 80025ee:	e0b7      	b.n	8002760 <mqtt_parse_incoming+0x18c>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_len < 2) || ((b & 0x80) != 0)) {
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d903      	bls.n	80025fe <mqtt_parse_incoming+0x2a>
 80025f6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	da4f      	bge.n	800269e <mqtt_parse_incoming+0xca>

      if (fixed_hdr_len < client->msg_idx) {
 80025fe:	7dfa      	ldrb	r2, [r7, #23]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002604:	429a      	cmp	r2, r3
 8002606:	d206      	bcs.n	8002616 <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_len];
 8002608:	7dfb      	ldrb	r3, [r7, #23]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002612:	75bb      	strb	r3, [r7, #22]
 8002614:	e012      	b.n	800263c <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 8002616:	8bfb      	ldrh	r3, [r7, #30]
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	83fa      	strh	r2, [r7, #30]
 800261c:	4619      	mov	r1, r3
 800261e:	6838      	ldr	r0, [r7, #0]
 8002620:	f004 f908 	bl	8006834 <pbuf_get_at>
 8002624:	4603      	mov	r3, r0
 8002626:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800262c:	1c59      	adds	r1, r3, #1
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6691      	str	r1, [r2, #104]	; 0x68
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	7dba      	ldrb	r2, [r7, #22]
 8002638:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_len++;
 800263c:	7dfb      	ldrb	r3, [r7, #23]
 800263e:	3301      	adds	r3, #1
 8002640:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_len >= 2) {
 8002642:	7dfb      	ldrb	r3, [r7, #23]
 8002644:	2b01      	cmp	r3, #1
 8002646:	f240 808b 	bls.w	8002760 <mqtt_parse_incoming+0x18c>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_len - 2) * 7);
 800264a:	7dbb      	ldrb	r3, [r7, #22]
 800264c:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8002650:	7dfb      	ldrb	r3, [r7, #23]
 8002652:	1e9a      	subs	r2, r3, #2
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 8002664:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002668:	2b00      	cmp	r3, #0
 800266a:	db79      	blt.n	8002760 <mqtt_parse_incoming+0x18c>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10d      	bne.n	800268e <mqtt_parse_incoming+0xba>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_len, 0, 0, NULL);
 8002672:	7df9      	ldrb	r1, [r7, #23]
 8002674:	2300      	movs	r3, #0
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2300      	movs	r3, #0
 800267a:	2200      	movs	r2, #0
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff fded 	bl	800225c <mqtt_message_received>
            client->msg_idx = 0;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_len = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	75fb      	strb	r3, [r7, #23]
 800268c:	e068      	b.n	8002760 <mqtt_parse_incoming+0x18c>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_len) - client->msg_idx;
 800268e:	7dfa      	ldrb	r2, [r7, #23]
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	441a      	add	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_len >= 2) {
 800269c:	e060      	b.n	8002760 <mqtt_parse_incoming+0x18c>
      u16_t cpy_len, buffer_space;
      u8_t *var_hdr_payload;
      mqtt_connection_status_t res;

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	891a      	ldrh	r2, [r3, #8]
 80026a2:	8bfb      	ldrh	r3, [r7, #30]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d205      	bcs.n	80026bc <mqtt_parse_incoming+0xe8>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	891a      	ldrh	r2, [r3, #8]
 80026b4:	8bfb      	ldrh	r3, [r7, #30]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	e001      	b.n	80026c0 <mqtt_parse_incoming+0xec>
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_len;
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80026ca:	827b      	strh	r3, [r7, #18]
      if (cpy_len > buffer_space) {
 80026cc:	8aba      	ldrh	r2, [r7, #20]
 80026ce:	8a7b      	ldrh	r3, [r7, #18]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d901      	bls.n	80026d8 <mqtt_parse_incoming+0x104>
        cpy_len = buffer_space;
 80026d4:	8a7b      	ldrh	r3, [r7, #18]
 80026d6:	82bb      	strh	r3, [r7, #20]
      }
      /* Adjust cpy_len to ensure zero-copy operation for remaining parts of current message */
      if (client->msg_idx >= MQTT_VAR_HEADER_BUFFER_LEN) {
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026dc:	2b7f      	cmp	r3, #127	; 0x7f
 80026de:	d90c      	bls.n	80026fa <mqtt_parse_incoming+0x126>
        if (cpy_len > (p->len - in_offset))
 80026e0:	8aba      	ldrh	r2, [r7, #20]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	895b      	ldrh	r3, [r3, #10]
 80026e6:	4619      	mov	r1, r3
 80026e8:	8bfb      	ldrh	r3, [r7, #30]
 80026ea:	1acb      	subs	r3, r1, r3
 80026ec:	429a      	cmp	r2, r3
 80026ee:	dd04      	ble.n	80026fa <mqtt_parse_incoming+0x126>
          cpy_len = p->len - in_offset;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	895a      	ldrh	r2, [r3, #10]
 80026f4:	8bfb      	ldrh	r3, [r7, #30]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	82bb      	strh	r3, [r7, #20]
      }
      var_hdr_payload = (u8_t*)pbuf_get_contiguous(p, client->rx_buffer + fixed_hdr_len,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8002700:	7dfb      	ldrb	r3, [r7, #23]
 8002702:	18d1      	adds	r1, r2, r3
 8002704:	8a7a      	ldrh	r2, [r7, #18]
 8002706:	8ab8      	ldrh	r0, [r7, #20]
 8002708:	8bfb      	ldrh	r3, [r7, #30]
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	4603      	mov	r3, r0
 800270e:	6838      	ldr	r0, [r7, #0]
 8002710:	f003 fe92 	bl	8006438 <pbuf_get_contiguous>
 8002714:	60f8      	str	r0, [r7, #12]
                                                   buffer_space, cpy_len, in_offset);

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800271a:	8abb      	ldrh	r3, [r7, #20]
 800271c:	441a      	add	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 8002722:	8bfa      	ldrh	r2, [r7, #30]
 8002724:	8abb      	ldrh	r3, [r7, #20]
 8002726:	4413      	add	r3, r2
 8002728:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 800272a:	8abb      	ldrh	r3, [r7, #20]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      /* Whole or partial message received */
      res = mqtt_message_received(client, fixed_hdr_len, cpy_len, msg_rem_len, var_hdr_payload);
 8002732:	8aba      	ldrh	r2, [r7, #20]
 8002734:	7df9      	ldrb	r1, [r7, #23]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff fd8d 	bl	800225c <mqtt_message_received>
 8002742:	4603      	mov	r3, r0
 8002744:	817b      	strh	r3, [r7, #10]
      if (res != MQTT_CONNECT_ACCEPTED) {
 8002746:	897b      	ldrh	r3, [r7, #10]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <mqtt_parse_incoming+0x17c>
        return res;
 800274c:	897b      	ldrh	r3, [r7, #10]
 800274e:	e00e      	b.n	800276e <mqtt_parse_incoming+0x19a>
      }
      if (msg_rem_len == 0) {
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d104      	bne.n	8002760 <mqtt_parse_incoming+0x18c>
        /* Reset parser state */
        client->msg_idx = 0;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	669a      	str	r2, [r3, #104]	; 0x68
        /* msg_tot_len = 0; */
        fixed_hdr_len = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	891b      	ldrh	r3, [r3, #8]
 8002764:	8bfa      	ldrh	r2, [r7, #30]
 8002766:	429a      	cmp	r2, r3
 8002768:	f4ff af42 	bcc.w	80025f0 <mqtt_parse_incoming+0x1c>
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3720      	adds	r7, #32
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10b      	bne.n	80027a8 <mqtt_tcp_recv_cb+0x30>
 8002790:	4b29      	ldr	r3, [pc, #164]	; (8002838 <mqtt_tcp_recv_cb+0xc0>)
 8002792:	f240 32ae 	movw	r2, #942	; 0x3ae
 8002796:	4929      	ldr	r1, [pc, #164]	; (800283c <mqtt_tcp_recv_cb+0xc4>)
 8002798:	4829      	ldr	r0, [pc, #164]	; (8002840 <mqtt_tcp_recv_cb+0xc8>)
 800279a:	f015 fb4b 	bl	8017e34 <iprintf>
 800279e:	2000      	movs	r0, #0
 80027a0:	f015 fc4a 	bl	8018038 <fflush>
 80027a4:	f015 fb8f 	bl	8017ec6 <abort>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d00b      	beq.n	80027ca <mqtt_tcp_recv_cb+0x52>
 80027b2:	4b21      	ldr	r3, [pc, #132]	; (8002838 <mqtt_tcp_recv_cb+0xc0>)
 80027b4:	f240 32af 	movw	r2, #943	; 0x3af
 80027b8:	4922      	ldr	r1, [pc, #136]	; (8002844 <mqtt_tcp_recv_cb+0xcc>)
 80027ba:	4821      	ldr	r0, [pc, #132]	; (8002840 <mqtt_tcp_recv_cb+0xc8>)
 80027bc:	f015 fb3a 	bl	8017e34 <iprintf>
 80027c0:	2000      	movs	r0, #0
 80027c2:	f015 fc39 	bl	8018038 <fflush>
 80027c6:	f015 fb7e 	bl	8017ec6 <abort>

  if (p == NULL) {
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d105      	bne.n	80027dc <mqtt_tcp_recv_cb+0x64>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 80027d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027d4:	6978      	ldr	r0, [r7, #20]
 80027d6:	f7ff fbe5 	bl	8001fa4 <mqtt_close>
 80027da:	e027      	b.n	800282c <mqtt_tcp_recv_cb+0xb4>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 80027dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <mqtt_tcp_recv_cb+0x78>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f003 fb15 	bl	8005e14 <pbuf_free>
      return err;
 80027ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ee:	e01e      	b.n	800282e <mqtt_tcp_recv_cb+0xb6>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	891b      	ldrh	r3, [r3, #8]
 80027f4:	4619      	mov	r1, r3
 80027f6:	68b8      	ldr	r0, [r7, #8]
 80027f8:	f004 fcb4 	bl	8007164 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	6978      	ldr	r0, [r7, #20]
 8002800:	f7ff fee8 	bl	80025d4 <mqtt_parse_incoming>
 8002804:	4603      	mov	r3, r0
 8002806:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f003 fb03 	bl	8005e14 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 800280e:	8a7b      	ldrh	r3, [r7, #18]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d004      	beq.n	800281e <mqtt_tcp_recv_cb+0xa6>
      mqtt_close(client, res);
 8002814:	8a7b      	ldrh	r3, [r7, #18]
 8002816:	4619      	mov	r1, r3
 8002818:	6978      	ldr	r0, [r7, #20]
 800281a:	f7ff fbc3 	bl	8001fa4 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	885b      	ldrh	r3, [r3, #2]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <mqtt_tcp_recv_cb+0xb4>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2200      	movs	r2, #0
 800282a:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	08019294 	.word	0x08019294
 800283c:	080194f0 	.word	0x080194f0
 8002840:	080192f8 	.word	0x080192f8
 8002844:	08019514 	.word	0x08019514

08002848 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	4613      	mov	r3, r2
 8002854:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	7a9b      	ldrb	r3, [r3, #10]
 800285e:	2b03      	cmp	r3, #3
 8002860:	d127      	bne.n	80028b2 <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2200      	movs	r2, #0
 8002866:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2200      	movs	r2, #0
 800286c:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800286e:	e00d      	b.n	800288c <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d006      	beq.n	8002886 <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	6892      	ldr	r2, [r2, #8]
 8002880:	2100      	movs	r1, #0
 8002882:	4610      	mov	r0, r2
 8002884:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8002886:	6938      	ldr	r0, [r7, #16]
 8002888:	f7ff f97c 	bl	8001b84 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3318      	adds	r3, #24
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f986 	bl	8001ba4 <mqtt_take_request>
 8002898:	6138      	str	r0, [r7, #16]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1e7      	bne.n	8002870 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	4619      	mov	r1, r3
 80028ac:	4610      	mov	r0, r2
 80028ae:	f7ff f80d 	bl	80018cc <mqtt_output_send>
  }
  return ERR_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10b      	bne.n	80028ea <mqtt_tcp_err_cb+0x2e>
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <mqtt_tcp_err_cb+0x48>)
 80028d4:	f240 32fd 	movw	r2, #1021	; 0x3fd
 80028d8:	490b      	ldr	r1, [pc, #44]	; (8002908 <mqtt_tcp_err_cb+0x4c>)
 80028da:	480c      	ldr	r0, [pc, #48]	; (800290c <mqtt_tcp_err_cb+0x50>)
 80028dc:	f015 faaa 	bl	8017e34 <iprintf>
 80028e0:	2000      	movs	r0, #0
 80028e2:	f015 fba9 	bl	8018038 <fflush>
 80028e6:	f015 faee 	bl	8017ec6 <abort>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = NULL;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 80028f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f7ff fb55 	bl	8001fa4 <mqtt_close>
}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	08019294 	.word	0x08019294
 8002908:	0801953c 	.word	0x0801953c
 800290c:	080192f8 	.word	0x080192f8

08002910 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	7a9b      	ldrb	r3, [r3, #10]
 8002922:	2b03      	cmp	r3, #3
 8002924:	d105      	bne.n	8002932 <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	33ec      	adds	r3, #236	; 0xec
 800292a:	6839      	ldr	r1, [r7, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe ffcd 	bl	80018cc <mqtt_output_send>
  }
  return ERR_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	4613      	mov	r3, r2
 8002948:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	e025      	b.n	80029a8 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2200      	movs	r2, #0
 8002960:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 8002962:	4913      	ldr	r1, [pc, #76]	; (80029b0 <mqtt_tcp_connect_cb+0x74>)
 8002964:	68b8      	ldr	r0, [r7, #8]
 8002966:	f005 fcd9 	bl	800831c <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 800296a:	4912      	ldr	r1, [pc, #72]	; (80029b4 <mqtt_tcp_connect_cb+0x78>)
 800296c:	68b8      	ldr	r0, [r7, #8]
 800296e:	f005 fcfb 	bl	8008368 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 8002972:	2202      	movs	r2, #2
 8002974:	4910      	ldr	r1, [pc, #64]	; (80029b8 <mqtt_tcp_connect_cb+0x7c>)
 8002976:	68b8      	ldr	r0, [r7, #8]
 8002978:	f005 fd42 	bl	8008400 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2202      	movs	r2, #2
 8002980:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	490d      	ldr	r1, [pc, #52]	; (80029bc <mqtt_tcp_connect_cb+0x80>)
 8002986:	f241 3088 	movw	r0, #5000	; 0x1388
 800298a:	f00b f825 	bl	800d9d8 <sys_timeout>
  client->cyclic_tick = 0;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2200      	movs	r2, #0
 8002992:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	4619      	mov	r1, r3
 80029a0:	4610      	mov	r0, r2
 80029a2:	f7fe ff93 	bl	80018cc <mqtt_output_send>

  return ERR_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	08002779 	.word	0x08002779
 80029b4:	08002849 	.word	0x08002849
 80029b8:	08002911 	.word	0x08002911
 80029bc:	08002071 	.word	0x08002071

080029c0 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08c      	sub	sp, #48	; 0x30
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10b      	bne.n	80029ec <mqtt_publish+0x2c>
 80029d4:	4b62      	ldr	r3, [pc, #392]	; (8002b60 <mqtt_publish+0x1a0>)
 80029d6:	f240 425b 	movw	r2, #1115	; 0x45b
 80029da:	4962      	ldr	r1, [pc, #392]	; (8002b64 <mqtt_publish+0x1a4>)
 80029dc:	4862      	ldr	r0, [pc, #392]	; (8002b68 <mqtt_publish+0x1a8>)
 80029de:	f015 fa29 	bl	8017e34 <iprintf>
 80029e2:	2000      	movs	r0, #0
 80029e4:	f015 fb28 	bl	8018038 <fflush>
 80029e8:	f015 fa6d 	bl	8017ec6 <abort>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10b      	bne.n	8002a0a <mqtt_publish+0x4a>
 80029f2:	4b5b      	ldr	r3, [pc, #364]	; (8002b60 <mqtt_publish+0x1a0>)
 80029f4:	f240 425c 	movw	r2, #1116	; 0x45c
 80029f8:	495c      	ldr	r1, [pc, #368]	; (8002b6c <mqtt_publish+0x1ac>)
 80029fa:	485b      	ldr	r0, [pc, #364]	; (8002b68 <mqtt_publish+0x1a8>)
 80029fc:	f015 fa1a 	bl	8017e34 <iprintf>
 8002a00:	2000      	movs	r0, #0
 8002a02:	f015 fb19 	bl	8018038 <fflush>
 8002a06:	f015 fa5e 	bl	8017ec6 <abort>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	7a9b      	ldrb	r3, [r3, #10]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <mqtt_publish+0x66>
 8002a12:	4b53      	ldr	r3, [pc, #332]	; (8002b60 <mqtt_publish+0x1a0>)
 8002a14:	f240 425d 	movw	r2, #1117	; 0x45d
 8002a18:	4955      	ldr	r1, [pc, #340]	; (8002b70 <mqtt_publish+0x1b0>)
 8002a1a:	4853      	ldr	r0, [pc, #332]	; (8002b68 <mqtt_publish+0x1a8>)
 8002a1c:	f7fe fc69 	bl	80012f2 <lwip_win32_platform_diag>
 8002a20:	f06f 030a 	mvn.w	r3, #10
 8002a24:	e097      	b.n	8002b56 <mqtt_publish+0x196>

  topic_strlen = strlen(topic);
 8002a26:	68b8      	ldr	r0, [r7, #8]
 8002a28:	f7fd fbdc 	bl	80001e4 <strlen>
 8002a2c:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d909      	bls.n	8002a4c <mqtt_publish+0x8c>
 8002a38:	4b49      	ldr	r3, [pc, #292]	; (8002b60 <mqtt_publish+0x1a0>)
 8002a3a:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8002a3e:	494d      	ldr	r1, [pc, #308]	; (8002b74 <mqtt_publish+0x1b4>)
 8002a40:	4849      	ldr	r0, [pc, #292]	; (8002b68 <mqtt_publish+0x1a8>)
 8002a42:	f7fe fc56 	bl	80012f2 <lwip_win32_platform_diag>
 8002a46:	f06f 030f 	mvn.w	r3, #15
 8002a4a:	e084      	b.n	8002b56 <mqtt_publish+0x196>
  topic_len = (u16_t)topic_strlen;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 8002a50:	8b7b      	ldrh	r3, [r7, #26]
 8002a52:	1c9a      	adds	r2, r3, #2
 8002a54:	887b      	ldrh	r3, [r7, #2]
 8002a56:	4413      	add	r3, r2
 8002a58:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 8002a5a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <mqtt_publish+0xb4>
    total_len += 2;
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	3302      	adds	r3, #2
 8002a66:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7fe fe97 	bl	800179c <msg_generate_packet_id>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002a72:	e001      	b.n	8002a78 <mqtt_publish+0xb8>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7e:	d309      	bcc.n	8002a94 <mqtt_publish+0xd4>
 8002a80:	4b37      	ldr	r3, [pc, #220]	; (8002b60 <mqtt_publish+0x1a0>)
 8002a82:	f240 426c 	movw	r2, #1132	; 0x46c
 8002a86:	493c      	ldr	r1, [pc, #240]	; (8002b78 <mqtt_publish+0x1b8>)
 8002a88:	4837      	ldr	r0, [pc, #220]	; (8002b68 <mqtt_publish+0x1a8>)
 8002a8a:	f7fe fc32 	bl	80012f2 <lwip_win32_platform_diag>
 8002a8e:	f06f 030f 	mvn.w	r3, #15
 8002a92:	e060      	b.n	8002b56 <mqtt_publish+0x196>
  remaining_length = (u16_t)total_len;
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f103 001c 	add.w	r0, r3, #28
 8002a9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa6:	2104      	movs	r1, #4
 8002aa8:	f7fe ffca 	bl	8001a40 <mqtt_create_request>
 8002aac:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <mqtt_publish+0xfa>
    return ERR_MEM;
 8002ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab8:	e04d      	b.n	8002b56 <mqtt_publish+0x196>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	33ec      	adds	r3, #236	; 0xec
 8002abe:	8b3a      	ldrh	r2, [r7, #24]
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fa36 	bl	8001f34 <mqtt_output_check_space>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d105      	bne.n	8002ada <mqtt_publish+0x11a>
    mqtt_delete_request(r);
 8002ace:	6978      	ldr	r0, [r7, #20]
 8002ad0:	f7ff f858 	bl	8001b84 <mqtt_delete_request>
    return ERR_MEM;
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad8:	e03d      	b.n	8002b56 <mqtt_publish+0x196>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8002ae0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002ae4:	8b3b      	ldrh	r3, [r7, #24]
 8002ae6:	9301      	str	r3, [sp, #4]
 8002ae8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	4613      	mov	r3, r2
 8002af0:	2200      	movs	r2, #0
 8002af2:	2103      	movs	r1, #3
 8002af4:	f7ff f9d5 	bl	8001ea2 <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	33ec      	adds	r3, #236	; 0xec
 8002afc:	8b7a      	ldrh	r2, [r7, #26]
 8002afe:	68b9      	ldr	r1, [r7, #8]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff f9a3 	bl	8001e4c <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 8002b06:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <mqtt_publish+0x15c>
    mqtt_output_append_u16(&client->output, pkt_id);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	33ec      	adds	r3, #236	; 0xec
 8002b12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff f963 	bl	8001de2 <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <mqtt_publish+0x176>
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d006      	beq.n	8002b36 <mqtt_publish+0x176>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	33ec      	adds	r3, #236	; 0xec
 8002b2c:	887a      	ldrh	r2, [r7, #2]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff f96e 	bl	8001e12 <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3318      	adds	r3, #24
 8002b3a:	6979      	ldr	r1, [r7, #20]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe ffcb 	bl	8001ad8 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4610      	mov	r0, r2
 8002b50:	f7fe febc 	bl	80018cc <mqtt_output_send>
  return ERR_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3728      	adds	r7, #40	; 0x28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	08019294 	.word	0x08019294
 8002b64:	0801955c 	.word	0x0801955c
 8002b68:	080192f8 	.word	0x080192f8
 8002b6c:	0801957c 	.word	0x0801957c
 8002b70:	08019598 	.word	0x08019598
 8002b74:	080195b8 	.word	0x080195b8
 8002b78:	080195dc 	.word	0x080195dc

08002b7c <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08c      	sub	sp, #48	; 0x30
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10b      	bne.n	8002baa <mqtt_sub_unsub+0x2e>
 8002b92:	4b65      	ldr	r3, [pc, #404]	; (8002d28 <mqtt_sub_unsub+0x1ac>)
 8002b94:	f240 42a6 	movw	r2, #1190	; 0x4a6
 8002b98:	4964      	ldr	r1, [pc, #400]	; (8002d2c <mqtt_sub_unsub+0x1b0>)
 8002b9a:	4865      	ldr	r0, [pc, #404]	; (8002d30 <mqtt_sub_unsub+0x1b4>)
 8002b9c:	f015 f94a 	bl	8017e34 <iprintf>
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f015 fa49 	bl	8018038 <fflush>
 8002ba6:	f015 f98e 	bl	8017ec6 <abort>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10b      	bne.n	8002bc8 <mqtt_sub_unsub+0x4c>
 8002bb0:	4b5d      	ldr	r3, [pc, #372]	; (8002d28 <mqtt_sub_unsub+0x1ac>)
 8002bb2:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8002bb6:	495f      	ldr	r1, [pc, #380]	; (8002d34 <mqtt_sub_unsub+0x1b8>)
 8002bb8:	485d      	ldr	r0, [pc, #372]	; (8002d30 <mqtt_sub_unsub+0x1b4>)
 8002bba:	f015 f93b 	bl	8017e34 <iprintf>
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f015 fa3a 	bl	8018038 <fflush>
 8002bc4:	f015 f97f 	bl	8017ec6 <abort>

  topic_strlen = strlen(topic);
 8002bc8:	68b8      	ldr	r0, [r7, #8]
 8002bca:	f7fd fb0b 	bl	80001e4 <strlen>
 8002bce:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d909      	bls.n	8002bee <mqtt_sub_unsub+0x72>
 8002bda:	4b53      	ldr	r3, [pc, #332]	; (8002d28 <mqtt_sub_unsub+0x1ac>)
 8002bdc:	f240 42aa 	movw	r2, #1194	; 0x4aa
 8002be0:	4955      	ldr	r1, [pc, #340]	; (8002d38 <mqtt_sub_unsub+0x1bc>)
 8002be2:	4853      	ldr	r0, [pc, #332]	; (8002d30 <mqtt_sub_unsub+0x1b4>)
 8002be4:	f7fe fb85 	bl	80012f2 <lwip_win32_platform_diag>
 8002be8:	f06f 030f 	mvn.w	r3, #15
 8002bec:	e098      	b.n	8002d20 <mqtt_sub_unsub+0x1a4>
  topic_len = (u16_t)topic_strlen;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 8002bf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002bfa:	2a00      	cmp	r2, #0
 8002bfc:	bf14      	ite	ne
 8002bfe:	2201      	movne	r2, #1
 8002c00:	2200      	moveq	r2, #0
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	4413      	add	r3, r2
 8002c06:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0e:	d309      	bcc.n	8002c24 <mqtt_sub_unsub+0xa8>
 8002c10:	4b45      	ldr	r3, [pc, #276]	; (8002d28 <mqtt_sub_unsub+0x1ac>)
 8002c12:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8002c16:	4949      	ldr	r1, [pc, #292]	; (8002d3c <mqtt_sub_unsub+0x1c0>)
 8002c18:	4845      	ldr	r0, [pc, #276]	; (8002d30 <mqtt_sub_unsub+0x1b4>)
 8002c1a:	f7fe fb6a 	bl	80012f2 <lwip_win32_platform_diag>
 8002c1e:	f06f 030f 	mvn.w	r3, #15
 8002c22:	e07d      	b.n	8002d20 <mqtt_sub_unsub+0x1a4>
  remaining_length = (u16_t)total_len;
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d90b      	bls.n	8002c46 <mqtt_sub_unsub+0xca>
 8002c2e:	4b3e      	ldr	r3, [pc, #248]	; (8002d28 <mqtt_sub_unsub+0x1ac>)
 8002c30:	f240 42b1 	movw	r2, #1201	; 0x4b1
 8002c34:	4942      	ldr	r1, [pc, #264]	; (8002d40 <mqtt_sub_unsub+0x1c4>)
 8002c36:	483e      	ldr	r0, [pc, #248]	; (8002d30 <mqtt_sub_unsub+0x1b4>)
 8002c38:	f015 f8fc 	bl	8017e34 <iprintf>
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f015 f9fb 	bl	8018038 <fflush>
 8002c42:	f015 f940 	bl	8017ec6 <abort>
  if (client->conn_state == TCP_DISCONNECTED) {
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	7a9b      	ldrb	r3, [r3, #10]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d102      	bne.n	8002c54 <mqtt_sub_unsub+0xd8>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 8002c4e:	f06f 030a 	mvn.w	r3, #10
 8002c52:	e065      	b.n	8002d20 <mqtt_sub_unsub+0x1a4>
  }

  pkt_id = msg_generate_packet_id(client);
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f7fe fda1 	bl	800179c <msg_generate_packet_id>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f103 001c 	add.w	r0, r3, #28
 8002c64:	8b3a      	ldrh	r2, [r7, #24]
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2104      	movs	r1, #4
 8002c6e:	f7fe fee7 	bl	8001a40 <mqtt_create_request>
 8002c72:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d102      	bne.n	8002c80 <mqtt_sub_unsub+0x104>
    return ERR_MEM;
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7e:	e04f      	b.n	8002d20 <mqtt_sub_unsub+0x1a4>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	33ec      	adds	r3, #236	; 0xec
 8002c84:	8b7a      	ldrh	r2, [r7, #26]
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff f953 	bl	8001f34 <mqtt_output_check_space>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <mqtt_sub_unsub+0x124>
    mqtt_delete_request(r);
 8002c94:	6978      	ldr	r0, [r7, #20]
 8002c96:	f7fe ff75 	bl	8001b84 <mqtt_delete_request>
    return ERR_MEM;
 8002c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9e:	e03f      	b.n	8002d20 <mqtt_sub_unsub+0x1a4>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8002ca6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <mqtt_sub_unsub+0x136>
 8002cae:	2108      	movs	r1, #8
 8002cb0:	e000      	b.n	8002cb4 <mqtt_sub_unsub+0x138>
 8002cb2:	210a      	movs	r1, #10
 8002cb4:	8b7b      	ldrh	r3, [r7, #26]
 8002cb6:	9301      	str	r3, [sp, #4]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f7ff f8ef 	bl	8001ea2 <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	33ec      	adds	r3, #236	; 0xec
 8002cc8:	8b3a      	ldrh	r2, [r7, #24]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff f888 	bl	8001de2 <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	33ec      	adds	r3, #236	; 0xec
 8002cd6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff f8b6 	bl	8001e4c <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 8002ce0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00b      	beq.n	8002d00 <mqtt_sub_unsub+0x184>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	bf28      	it	cs
 8002cf4:	2302      	movcs	r3, #2
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f7ff f862 	bl	8001dc4 <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	3318      	adds	r3, #24
 8002d04:	6979      	ldr	r1, [r7, #20]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fee6 	bl	8001ad8 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	4619      	mov	r1, r3
 8002d18:	4610      	mov	r0, r2
 8002d1a:	f7fe fdd7 	bl	80018cc <mqtt_output_send>
  return ERR_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3728      	adds	r7, #40	; 0x28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	08019294 	.word	0x08019294
 8002d2c:	08019600 	.word	0x08019600
 8002d30:	080192f8 	.word	0x080192f8
 8002d34:	08019620 	.word	0x08019620
 8002d38:	08019640 	.word	0x08019640
 8002d3c:	08019668 	.word	0x08019668
 8002d40:	08019690 	.word	0x08019690

08002d44 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10b      	bne.n	8002d70 <mqtt_set_inpub_callback+0x2c>
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <mqtt_set_inpub_callback+0x48>)
 8002d5a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002d5e:	490c      	ldr	r1, [pc, #48]	; (8002d90 <mqtt_set_inpub_callback+0x4c>)
 8002d60:	480c      	ldr	r0, [pc, #48]	; (8002d94 <mqtt_set_inpub_callback+0x50>)
 8002d62:	f015 f867 	bl	8017e34 <iprintf>
 8002d66:	2000      	movs	r0, #0
 8002d68:	f015 f966 	bl	8018038 <fflush>
 8002d6c:	f015 f8ab 	bl	8017ec6 <abort>
  client->data_cb = data_cb;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	08019294 	.word	0x08019294
 8002d90:	080196a8 	.word	0x080196a8
 8002d94:	080192f8 	.word	0x080192f8

08002d98 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 8002d9c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8002da0:	2001      	movs	r0, #1
 8002da2:	f002 f905 	bl	8004fb0 <mem_calloc>
 8002da6:	4603      	mov	r3, r0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd80      	pop	{r7, pc}

08002dac <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08e      	sub	sp, #56	; 0x38
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 8002dbc:	230a      	movs	r3, #10
 8002dbe:	85bb      	strh	r3, [r7, #44]	; 0x2c
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  u16_t client_user_len = 0, client_pass_len = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mqtt_incoming_data_cb_t data_cb;
  mqtt_incoming_publish_cb_t pub_cb;
  void *inpub_arg;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10b      	bne.n	8002df8 <mqtt_client_connect+0x4c>
 8002de0:	4bab      	ldr	r3, [pc, #684]	; (8003090 <mqtt_client_connect+0x2e4>)
 8002de2:	f240 5219 	movw	r2, #1305	; 0x519
 8002de6:	49ab      	ldr	r1, [pc, #684]	; (8003094 <mqtt_client_connect+0x2e8>)
 8002de8:	48ab      	ldr	r0, [pc, #684]	; (8003098 <mqtt_client_connect+0x2ec>)
 8002dea:	f015 f823 	bl	8017e34 <iprintf>
 8002dee:	2000      	movs	r0, #0
 8002df0:	f015 f922 	bl	8018038 <fflush>
 8002df4:	f015 f867 	bl	8017ec6 <abort>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10b      	bne.n	8002e16 <mqtt_client_connect+0x6a>
 8002dfe:	4ba4      	ldr	r3, [pc, #656]	; (8003090 <mqtt_client_connect+0x2e4>)
 8002e00:	f240 521a 	movw	r2, #1306	; 0x51a
 8002e04:	49a5      	ldr	r1, [pc, #660]	; (800309c <mqtt_client_connect+0x2f0>)
 8002e06:	48a4      	ldr	r0, [pc, #656]	; (8003098 <mqtt_client_connect+0x2ec>)
 8002e08:	f015 f814 	bl	8017e34 <iprintf>
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f015 f913 	bl	8018038 <fflush>
 8002e12:	f015 f858 	bl	8017ec6 <abort>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 8002e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <mqtt_client_connect+0x88>
 8002e1c:	4b9c      	ldr	r3, [pc, #624]	; (8003090 <mqtt_client_connect+0x2e4>)
 8002e1e:	f240 521b 	movw	r2, #1307	; 0x51b
 8002e22:	499f      	ldr	r1, [pc, #636]	; (80030a0 <mqtt_client_connect+0x2f4>)
 8002e24:	489c      	ldr	r0, [pc, #624]	; (8003098 <mqtt_client_connect+0x2ec>)
 8002e26:	f015 f805 	bl	8017e34 <iprintf>
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f015 f904 	bl	8018038 <fflush>
 8002e30:	f015 f849 	bl	8017ec6 <abort>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 8002e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10b      	bne.n	8002e54 <mqtt_client_connect+0xa8>
 8002e3c:	4b94      	ldr	r3, [pc, #592]	; (8003090 <mqtt_client_connect+0x2e4>)
 8002e3e:	f240 521c 	movw	r2, #1308	; 0x51c
 8002e42:	4998      	ldr	r1, [pc, #608]	; (80030a4 <mqtt_client_connect+0x2f8>)
 8002e44:	4894      	ldr	r0, [pc, #592]	; (8003098 <mqtt_client_connect+0x2ec>)
 8002e46:	f014 fff5 	bl	8017e34 <iprintf>
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f015 f8f4 	bl	8018038 <fflush>
 8002e50:	f015 f839 	bl	8017ec6 <abort>

  if (client->conn_state != TCP_DISCONNECTED) {
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	7a9b      	ldrb	r3, [r3, #10]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <mqtt_client_connect+0xb6>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8002e5c:	f06f 0309 	mvn.w	r3, #9
 8002e60:	e23a      	b.n	80032d8 <mqtt_client_connect+0x52c>
  }

  /* Wipe clean, but keep callbacks */
  data_cb = client->data_cb;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e66:	623b      	str	r3, [r7, #32]
  pub_cb = client->pub_cb;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e6c:	61fb      	str	r3, [r7, #28]
  inpub_arg = client->inpub_arg;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	61bb      	str	r3, [r7, #24]
  memset(client, 0, sizeof(mqtt_client_t));
 8002e74:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8002e78:	2100      	movs	r1, #0
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f015 fa21 	bl	80182c2 <memset>
  client->data_cb = data_cb;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a3a      	ldr	r2, [r7, #32]
 8002e84:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = inpub_arg;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	65da      	str	r2, [r3, #92]	; 0x5c

  client->connect_arg = arg;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e96:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 8002e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea0:	899a      	ldrh	r2, [r3, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	331c      	adds	r3, #28
 8002eaa:	2104      	movs	r1, #4
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe ff57 	bl	8001d60 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8002eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d07c      	beq.n	8002fb4 <mqtt_client_connect+0x208>
 8002eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d078      	beq.n	8002fb4 <mqtt_client_connect+0x208>
    flags |= MQTT_CONNECT_FLAG_WILL;
 8002ec2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ec6:	f043 0304 	orr.w	r3, r3, #4
 8002eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    flags |= (client_info->will_qos & 3) << 3;
 8002ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed0:	7e5b      	ldrb	r3, [r3, #25]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	b25b      	sxtb	r3, r3
 8002ed6:	f003 0318 	and.w	r3, r3, #24
 8002eda:	b25a      	sxtb	r2, r3
 8002edc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (client_info->will_retain) {
 8002ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eea:	7e9b      	ldrb	r3, [r3, #26]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <mqtt_client_connect+0x150>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8002ef0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ef4:	f043 0320 	orr.w	r3, r3, #32
 8002ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
    len = strlen(client_info->will_topic);
 8002efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fd f96f 	bl	80001e4 <strlen>
 8002f06:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2bff      	cmp	r3, #255	; 0xff
 8002f0c:	d909      	bls.n	8002f22 <mqtt_client_connect+0x176>
 8002f0e:	4b60      	ldr	r3, [pc, #384]	; (8003090 <mqtt_client_connect+0x2e4>)
 8002f10:	f240 5239 	movw	r2, #1337	; 0x539
 8002f14:	4964      	ldr	r1, [pc, #400]	; (80030a8 <mqtt_client_connect+0x2fc>)
 8002f16:	4860      	ldr	r0, [pc, #384]	; (8003098 <mqtt_client_connect+0x2ec>)
 8002f18:	f7fe f9eb 	bl	80012f2 <lwip_win32_platform_diag>
 8002f1c:	f06f 0305 	mvn.w	r3, #5
 8002f20:	e1da      	b.n	80032d8 <mqtt_client_connect+0x52c>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <mqtt_client_connect+0x190>
 8002f28:	4b59      	ldr	r3, [pc, #356]	; (8003090 <mqtt_client_connect+0x2e4>)
 8002f2a:	f240 523a 	movw	r2, #1338	; 0x53a
 8002f2e:	495f      	ldr	r1, [pc, #380]	; (80030ac <mqtt_client_connect+0x300>)
 8002f30:	4859      	ldr	r0, [pc, #356]	; (8003098 <mqtt_client_connect+0x2ec>)
 8002f32:	f7fe f9de 	bl	80012f2 <lwip_win32_platform_diag>
 8002f36:	f06f 0305 	mvn.w	r3, #5
 8002f3a:	e1cd      	b.n	80032d8 <mqtt_client_connect+0x52c>
    will_topic_len = (u8_t)len;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    if (client_info->will_msg_len == 0)
 8002f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f44:	7e1b      	ldrb	r3, [r3, #24]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d116      	bne.n	8002f78 <mqtt_client_connect+0x1cc>
    {
        len = strlen(client_info->will_msg);
 8002f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd f948 	bl	80001e4 <strlen>
 8002f54:	6178      	str	r0, [r7, #20]
        LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2bff      	cmp	r3, #255	; 0xff
 8002f5a:	d909      	bls.n	8002f70 <mqtt_client_connect+0x1c4>
 8002f5c:	4b4c      	ldr	r3, [pc, #304]	; (8003090 <mqtt_client_connect+0x2e4>)
 8002f5e:	f240 523f 	movw	r2, #1343	; 0x53f
 8002f62:	4953      	ldr	r1, [pc, #332]	; (80030b0 <mqtt_client_connect+0x304>)
 8002f64:	484c      	ldr	r0, [pc, #304]	; (8003098 <mqtt_client_connect+0x2ec>)
 8002f66:	f7fe f9c4 	bl	80012f2 <lwip_win32_platform_diag>
 8002f6a:	f06f 0305 	mvn.w	r3, #5
 8002f6e:	e1b3      	b.n	80032d8 <mqtt_client_connect+0x52c>
        will_msg_len = (u8_t)len;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8002f76:	e003      	b.n	8002f80 <mqtt_client_connect+0x1d4>
    }
    else
    {
        will_msg_len = client_info->will_msg_len;
 8002f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f7a:	7e1b      	ldrb	r3, [r3, #24]
 8002f7c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8002f80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002f82:	1c9a      	adds	r2, r3, #2
 8002f84:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002f88:	4413      	add	r3, r2
 8002f8a:	1c9a      	adds	r2, r3, #2
 8002f8c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002f90:	4413      	add	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9a:	d309      	bcc.n	8002fb0 <mqtt_client_connect+0x204>
 8002f9c:	4b3c      	ldr	r3, [pc, #240]	; (8003090 <mqtt_client_connect+0x2e4>)
 8002f9e:	f240 5247 	movw	r2, #1351	; 0x547
 8002fa2:	4944      	ldr	r1, [pc, #272]	; (80030b4 <mqtt_client_connect+0x308>)
 8002fa4:	483c      	ldr	r0, [pc, #240]	; (8003098 <mqtt_client_connect+0x2ec>)
 8002fa6:	f7fe f9a4 	bl	80012f2 <lwip_win32_platform_diag>
 8002faa:	f06f 0305 	mvn.w	r3, #5
 8002fae:	e193      	b.n	80032d8 <mqtt_client_connect+0x52c>
    remaining_length = (u16_t)len;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }
  if (client_info->client_user != NULL) {
 8002fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d03d      	beq.n	8003038 <mqtt_client_connect+0x28c>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 8002fbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002fc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    len = strlen(client_info->client_user);
 8002fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fd f909 	bl	80001e4 <strlen>
 8002fd2:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fda:	d309      	bcc.n	8002ff0 <mqtt_client_connect+0x244>
 8002fdc:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <mqtt_client_connect+0x2e4>)
 8002fde:	f240 524d 	movw	r2, #1357	; 0x54d
 8002fe2:	4935      	ldr	r1, [pc, #212]	; (80030b8 <mqtt_client_connect+0x30c>)
 8002fe4:	482c      	ldr	r0, [pc, #176]	; (8003098 <mqtt_client_connect+0x2ec>)
 8002fe6:	f7fe f984 	bl	80012f2 <lwip_win32_platform_diag>
 8002fea:	f06f 0305 	mvn.w	r3, #5
 8002fee:	e173      	b.n	80032d8 <mqtt_client_connect+0x52c>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <mqtt_client_connect+0x25e>
 8002ff6:	4b26      	ldr	r3, [pc, #152]	; (8003090 <mqtt_client_connect+0x2e4>)
 8002ff8:	f240 524e 	movw	r2, #1358	; 0x54e
 8002ffc:	492f      	ldr	r1, [pc, #188]	; (80030bc <mqtt_client_connect+0x310>)
 8002ffe:	4826      	ldr	r0, [pc, #152]	; (8003098 <mqtt_client_connect+0x2ec>)
 8003000:	f7fe f977 	bl	80012f2 <lwip_win32_platform_diag>
 8003004:	f06f 0305 	mvn.w	r3, #5
 8003008:	e166      	b.n	80032d8 <mqtt_client_connect+0x52c>
    client_user_len = (u16_t)len;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	84fb      	strh	r3, [r7, #38]	; 0x26
    len = remaining_length + 2 + client_user_len;
 800300e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003010:	1c9a      	adds	r2, r3, #2
 8003012:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003014:	4413      	add	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301e:	d309      	bcc.n	8003034 <mqtt_client_connect+0x288>
 8003020:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <mqtt_client_connect+0x2e4>)
 8003022:	f240 5251 	movw	r2, #1361	; 0x551
 8003026:	4923      	ldr	r1, [pc, #140]	; (80030b4 <mqtt_client_connect+0x308>)
 8003028:	481b      	ldr	r0, [pc, #108]	; (8003098 <mqtt_client_connect+0x2ec>)
 800302a:	f7fe f962 	bl	80012f2 <lwip_win32_platform_diag>
 800302e:	f06f 0305 	mvn.w	r3, #5
 8003032:	e151      	b.n	80032d8 <mqtt_client_connect+0x52c>
    remaining_length = (u16_t)len;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }
  if (client_info->client_pass != NULL) {
 8003038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d05a      	beq.n	80030f6 <mqtt_client_connect+0x34a>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8003040:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003048:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    len = strlen(client_info->client_pass);
 800304c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd f8c7 	bl	80001e4 <strlen>
 8003056:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800305e:	d309      	bcc.n	8003074 <mqtt_client_connect+0x2c8>
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <mqtt_client_connect+0x2e4>)
 8003062:	f240 5257 	movw	r2, #1367	; 0x557
 8003066:	4916      	ldr	r1, [pc, #88]	; (80030c0 <mqtt_client_connect+0x314>)
 8003068:	480b      	ldr	r0, [pc, #44]	; (8003098 <mqtt_client_connect+0x2ec>)
 800306a:	f7fe f942 	bl	80012f2 <lwip_win32_platform_diag>
 800306e:	f06f 0305 	mvn.w	r3, #5
 8003072:	e131      	b.n	80032d8 <mqtt_client_connect+0x52c>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d126      	bne.n	80030c8 <mqtt_client_connect+0x31c>
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <mqtt_client_connect+0x2e4>)
 800307c:	f44f 62ab 	mov.w	r2, #1368	; 0x558
 8003080:	4910      	ldr	r1, [pc, #64]	; (80030c4 <mqtt_client_connect+0x318>)
 8003082:	4805      	ldr	r0, [pc, #20]	; (8003098 <mqtt_client_connect+0x2ec>)
 8003084:	f7fe f935 	bl	80012f2 <lwip_win32_platform_diag>
 8003088:	f06f 0305 	mvn.w	r3, #5
 800308c:	e124      	b.n	80032d8 <mqtt_client_connect+0x52c>
 800308e:	bf00      	nop
 8003090:	08019294 	.word	0x08019294
 8003094:	080196d0 	.word	0x080196d0
 8003098:	080192f8 	.word	0x080192f8
 800309c:	080196f4 	.word	0x080196f4
 80030a0:	0801971c 	.word	0x0801971c
 80030a4:	08019748 	.word	0x08019748
 80030a8:	0801977c 	.word	0x0801977c
 80030ac:	080197bc 	.word	0x080197bc
 80030b0:	080197fc 	.word	0x080197fc
 80030b4:	08019838 	.word	0x08019838
 80030b8:	08019868 	.word	0x08019868
 80030bc:	080198a8 	.word	0x080198a8
 80030c0:	080198ec 	.word	0x080198ec
 80030c4:	0801992c 	.word	0x0801992c
    client_pass_len = (u16_t)len;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	84bb      	strh	r3, [r7, #36]	; 0x24
    len = remaining_length + 2 + client_pass_len;
 80030cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80030ce:	1c9a      	adds	r2, r3, #2
 80030d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030d2:	4413      	add	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030dc:	d309      	bcc.n	80030f2 <mqtt_client_connect+0x346>
 80030de:	4b80      	ldr	r3, [pc, #512]	; (80032e0 <mqtt_client_connect+0x534>)
 80030e0:	f240 525b 	movw	r2, #1371	; 0x55b
 80030e4:	497f      	ldr	r1, [pc, #508]	; (80032e4 <mqtt_client_connect+0x538>)
 80030e6:	4880      	ldr	r0, [pc, #512]	; (80032e8 <mqtt_client_connect+0x53c>)
 80030e8:	f7fe f903 	bl	80012f2 <lwip_win32_platform_diag>
 80030ec:	f06f 0305 	mvn.w	r3, #5
 80030f0:	e0f2      	b.n	80032d8 <mqtt_client_connect+0x52c>
    remaining_length = (u16_t)len;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 80030f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030fa:	f043 0302 	orr.w	r3, r3, #2
 80030fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  len = strlen(client_info->client_id);
 8003102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd f86c 	bl	80001e4 <strlen>
 800310c:	6178      	str	r0, [r7, #20]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003114:	d309      	bcc.n	800312a <mqtt_client_connect+0x37e>
 8003116:	4b72      	ldr	r3, [pc, #456]	; (80032e0 <mqtt_client_connect+0x534>)
 8003118:	f240 5263 	movw	r2, #1379	; 0x563
 800311c:	4973      	ldr	r1, [pc, #460]	; (80032ec <mqtt_client_connect+0x540>)
 800311e:	4872      	ldr	r0, [pc, #456]	; (80032e8 <mqtt_client_connect+0x53c>)
 8003120:	f7fe f8e7 	bl	80012f2 <lwip_win32_platform_diag>
 8003124:	f06f 0305 	mvn.w	r3, #5
 8003128:	e0d6      	b.n	80032d8 <mqtt_client_connect+0x52c>
  client_id_length = (u16_t)len;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	827b      	strh	r3, [r7, #18]
  len = remaining_length + 2 + client_id_length;
 800312e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003130:	1c9a      	adds	r2, r3, #2
 8003132:	8a7b      	ldrh	r3, [r7, #18]
 8003134:	4413      	add	r3, r2
 8003136:	617b      	str	r3, [r7, #20]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313e:	d309      	bcc.n	8003154 <mqtt_client_connect+0x3a8>
 8003140:	4b67      	ldr	r3, [pc, #412]	; (80032e0 <mqtt_client_connect+0x534>)
 8003142:	f240 5266 	movw	r2, #1382	; 0x566
 8003146:	4967      	ldr	r1, [pc, #412]	; (80032e4 <mqtt_client_connect+0x538>)
 8003148:	4867      	ldr	r0, [pc, #412]	; (80032e8 <mqtt_client_connect+0x53c>)
 800314a:	f7fe f8d2 	bl	80012f2 <lwip_win32_platform_diag>
 800314e:	f06f 0305 	mvn.w	r3, #5
 8003152:	e0c1      	b.n	80032d8 <mqtt_client_connect+0x52c>
  remaining_length = (u16_t)len;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	85bb      	strh	r3, [r7, #44]	; 0x2c

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	33ec      	adds	r3, #236	; 0xec
 800315c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f7fe fee7 	bl	8001f34 <mqtt_output_check_space>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d102      	bne.n	8003172 <mqtt_client_connect+0x3c6>
    return ERR_MEM;
 800316c:	f04f 33ff 	mov.w	r3, #4294967295
 8003170:	e0b2      	b.n	80032d8 <mqtt_client_connect+0x52c>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 8003172:	2000      	movs	r0, #0
 8003174:	f005 f8b2 	bl	80082dc <tcp_new_ip_type>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <mqtt_client_connect+0x3e0>
    return ERR_MEM;
 8003186:	f04f 33ff 	mov.w	r3, #4294967295
 800318a:	e0a5      	b.n	80032d8 <mqtt_client_connect+0x52c>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	68f9      	ldr	r1, [r7, #12]
 8003192:	4618      	mov	r0, r3
 8003194:	f005 f8b0 	bl	80082f8 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	4954      	ldr	r1, [pc, #336]	; (80032f0 <mqtt_client_connect+0x544>)
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 fed9 	bl	8006f58 <tcp_bind>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (err != ERR_OK) {
 80031ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f040 8084 	bne.w	80032be <mqtt_client_connect+0x512>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	68d8      	ldr	r0, [r3, #12]
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	4b4d      	ldr	r3, [pc, #308]	; (80032f4 <mqtt_client_connect+0x548>)
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	f004 f87e 	bl	80072c0 <tcp_connect>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (err != ERR_OK) {
 80031ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d177      	bne.n	80032c2 <mqtt_client_connect+0x516>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	4948      	ldr	r1, [pc, #288]	; (80032f8 <mqtt_client_connect+0x54c>)
 80031d8:	4618      	mov	r0, r3
 80031da:	f005 f8eb 	bl	80083b4 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80031ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	2300      	movs	r3, #0
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	2300      	movs	r3, #0
 80031f4:	2200      	movs	r2, #0
 80031f6:	2101      	movs	r1, #1
 80031f8:	f7fe fe53 	bl	8001ea2 <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	33ec      	adds	r3, #236	; 0xec
 8003200:	2204      	movs	r2, #4
 8003202:	493e      	ldr	r1, [pc, #248]	; (80032fc <mqtt_client_connect+0x550>)
 8003204:	4618      	mov	r0, r3
 8003206:	f7fe fe21 	bl	8001e4c <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	33ec      	adds	r3, #236	; 0xec
 800320e:	2104      	movs	r1, #4
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe fdd7 	bl	8001dc4 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	33ec      	adds	r3, #236	; 0xec
 800321a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800321e:	4611      	mov	r1, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe fdcf 	bl	8001dc4 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800322c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800322e:	899b      	ldrh	r3, [r3, #12]
 8003230:	4619      	mov	r1, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f7fe fdd5 	bl	8001de2 <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800323e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	8a7a      	ldrh	r2, [r7, #18]
 8003244:	4619      	mov	r1, r3
 8003246:	f7fe fe01 	bl	8001e4c <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 800324a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d015      	beq.n	8003282 <mqtt_client_connect+0x4d6>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800325c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8003264:	b292      	uxth	r2, r2
 8003266:	4619      	mov	r1, r3
 8003268:	f7fe fdf0 	bl	8001e4c <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800327a:	b292      	uxth	r2, r2
 800327c:	4619      	mov	r1, r3
 800327e:	f7fe fde5 	bl	8001e4c <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8003282:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003286:	2b00      	cmp	r3, #0
 8003288:	da08      	bge.n	800329c <mqtt_client_connect+0x4f0>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003296:	4619      	mov	r1, r3
 8003298:	f7fe fdd8 	bl	8001e4c <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 800329c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <mqtt_client_connect+0x50e>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80032ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032b4:	4619      	mov	r1, r3
 80032b6:	f7fe fdc9 	bl	8001e4c <mqtt_output_append_string>
  }
  return ERR_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e00c      	b.n	80032d8 <mqtt_client_connect+0x52c>
    goto tcp_fail;
 80032be:	bf00      	nop
 80032c0:	e000      	b.n	80032c4 <mqtt_client_connect+0x518>
    goto tcp_fail;
 80032c2:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f003 fe39 	bl	8006f40 <tcp_abort>
  client->conn = NULL;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	60da      	str	r2, [r3, #12]
  return err;
 80032d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3730      	adds	r7, #48	; 0x30
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	08019294 	.word	0x08019294
 80032e4:	08019838 	.word	0x08019838
 80032e8:	080192f8 	.word	0x080192f8
 80032ec:	08019970 	.word	0x08019970
 80032f0:	0801da38 	.word	0x0801da38
 80032f4:	0800293d 	.word	0x0800293d
 80032f8:	080028bd 	.word	0x080028bd
 80032fc:	080199ac 	.word	0x080199ac

08003300 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	b21a      	sxth	r2, r3
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	0a1b      	lsrs	r3, r3, #8
 8003314:	b29b      	uxth	r3, r3
 8003316:	b21b      	sxth	r3, r3
 8003318:	4313      	orrs	r3, r2
 800331a:	b21b      	sxth	r3, r3
 800331c:	b29b      	uxth	r3, r3
}
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	061a      	lsls	r2, r3, #24
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	0a1b      	lsrs	r3, r3, #8
 8003344:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	0e1b      	lsrs	r3, r3, #24
 800334e:	4313      	orrs	r3, r2
}
 8003350:	4618      	mov	r0, r3
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	6039      	str	r1, [r7, #0]
 8003376:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d80f      	bhi.n	800339e <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d006      	beq.n	8003392 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	4909      	ldr	r1, [pc, #36]	; (80033ac <dns_setserver+0x40>)
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 8003390:	e005      	b.n	800339e <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	4905      	ldr	r1, [pc, #20]	; (80033ac <dns_setserver+0x40>)
 8003396:	4a06      	ldr	r2, [pc, #24]	; (80033b0 <dns_setserver+0x44>)
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20000b88 	.word	0x20000b88
 80033b0:	0801da38 	.word	0x0801da38

080033b4 <dns_getserver>:
 * @return IP address of the indexed DNS server or "ip_addr_any" if the DNS
 *         server has not been configured.
 */
const ip_addr_t *
dns_getserver(u8_t numdns)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d804      	bhi.n	80033ce <dns_getserver+0x1a>
    return &dns_servers[numdns];
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4a04      	ldr	r2, [pc, #16]	; (80033dc <dns_getserver+0x28>)
 80033ca:	4413      	add	r3, r2
 80033cc:	e000      	b.n	80033d0 <dns_getserver+0x1c>
  } else {
    return IP_ADDR_ANY;
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <dns_getserver+0x2c>)
  }
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	20000b88 	.word	0x20000b88
 80033e0:	0801da38 	.word	0x0801da38

080033e4 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 80033e8:	f000 fab8 	bl	800395c <dns_check_entries>
}
 80033ec:	bf00      	nop
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b090      	sub	sp, #64	; 0x40
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 80033fa:	79fa      	ldrb	r2, [r7, #7]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	4413      	add	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	4a6e      	ldr	r2, [pc, #440]	; (80035c0 <dns_send+0x1d0>)
 8003406:	4413      	add	r3, r2
 8003408:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340c:	7adb      	ldrb	r3, [r3, #11]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d90b      	bls.n	800342a <dns_send+0x3a>
 8003412:	4b6c      	ldr	r3, [pc, #432]	; (80035c4 <dns_send+0x1d4>)
 8003414:	f240 320d 	movw	r2, #781	; 0x30d
 8003418:	496b      	ldr	r1, [pc, #428]	; (80035c8 <dns_send+0x1d8>)
 800341a:	486c      	ldr	r0, [pc, #432]	; (80035cc <dns_send+0x1dc>)
 800341c:	f014 fd0a 	bl	8017e34 <iprintf>
 8003420:	2000      	movs	r0, #0
 8003422:	f014 fe09 	bl	8018038 <fflush>
 8003426:	f014 fd4e 	bl	8017ec6 <abort>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	7adb      	ldrb	r3, [r3, #11]
 800342e:	461a      	mov	r2, r3
 8003430:	4b67      	ldr	r3, [pc, #412]	; (80035d0 <dns_send+0x1e0>)
 8003432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <dns_send+0x5e>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	2100      	movs	r1, #0
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f8ca 	bl	80035d8 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	2200      	movs	r2, #0
 8003448:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	e0b4      	b.n	80035b8 <dns_send+0x1c8>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	3310      	adds	r3, #16
 8003452:	4618      	mov	r0, r3
 8003454:	f7fc fec6 	bl	80001e4 <strlen>
 8003458:	4603      	mov	r3, r0
 800345a:	b29b      	uxth	r3, r3
 800345c:	3312      	adds	r3, #18
 800345e:	b29b      	uxth	r3, r3
 8003460:	f44f 7220 	mov.w	r2, #640	; 0x280
 8003464:	4619      	mov	r1, r3
 8003466:	2036      	movs	r0, #54	; 0x36
 8003468:	f002 fa30 	bl	80058cc <pbuf_alloc>
 800346c:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 8095 	beq.w	80035a0 <dns_send+0x1b0>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8003476:	f107 0310 	add.w	r3, r7, #16
 800347a:	220c      	movs	r2, #12
 800347c:	2100      	movs	r1, #0
 800347e:	4618      	mov	r0, r3
 8003480:	f014 ff1f 	bl	80182c2 <memset>
    hdr.id = lwip_htons(entry->txid);
 8003484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003486:	891b      	ldrh	r3, [r3, #8]
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff39 	bl	8003300 <lwip_htons>
 800348e:	4603      	mov	r3, r0
 8003490:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8003492:	2301      	movs	r3, #1
 8003494:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8003496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800349a:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800349c:	f107 0310 	add.w	r3, r7, #16
 80034a0:	220c      	movs	r2, #12
 80034a2:	4619      	mov	r1, r3
 80034a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034a6:	f003 f861 	bl	800656c <pbuf_take>
    hostname = entry->name;
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	3310      	adds	r3, #16
 80034ae:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 80034b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b2:	3b01      	subs	r3, #1
 80034b4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 80034b6:	230c      	movs	r3, #12
 80034b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 80034ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034bc:	3301      	adds	r3, #1
 80034be:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 80034c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80034c4:	2300      	movs	r3, #0
 80034c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80034ca:	e007      	b.n	80034dc <dns_send+0xec>
        ++n;
 80034cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80034d0:	3301      	adds	r3, #1
 80034d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80034d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d8:	3301      	adds	r3, #1
 80034da:	63bb      	str	r3, [r7, #56]	; 0x38
 80034dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b2e      	cmp	r3, #46	; 0x2e
 80034e2:	d003      	beq.n	80034ec <dns_send+0xfc>
 80034e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ef      	bne.n	80034cc <dns_send+0xdc>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 80034ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 80034f4:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80034f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80034fa:	4413      	add	r3, r2
 80034fc:	3301      	adds	r3, #1
 80034fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003502:	da53      	bge.n	80035ac <dns_send+0x1bc>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 8003504:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003508:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800350a:	4619      	mov	r1, r3
 800350c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800350e:	f003 f9ca 	bl	80068a6 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8003512:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003514:	3301      	adds	r3, #1
 8003516:	b29b      	uxth	r3, r3
 8003518:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800351a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800351c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800351e:	f003 f8c1 	bl	80066a4 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8003522:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003526:	b29a      	uxth	r2, r3
 8003528:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800352a:	4413      	add	r3, r2
 800352c:	b29b      	uxth	r3, r3
 800352e:	3301      	adds	r3, #1
 8003530:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 8003532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1bf      	bne.n	80034ba <dns_send+0xca>
    pbuf_put_at(p, query_idx, 0);
 800353a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800353c:	2200      	movs	r2, #0
 800353e:	4619      	mov	r1, r3
 8003540:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003542:	f003 f9b0 	bl	80068a6 <pbuf_put_at>
    query_idx++;
 8003546:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003548:	3301      	adds	r3, #1
 800354a:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800354c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003550:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8003552:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003556:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8003558:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800355a:	f107 010c 	add.w	r1, r7, #12
 800355e:	2204      	movs	r2, #4
 8003560:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003562:	f003 f89f 	bl	80066a4 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	7bdb      	ldrb	r3, [r3, #15]
 800356a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800356e:	2335      	movs	r3, #53	; 0x35
 8003570:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8003572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003574:	7adb      	ldrb	r3, [r3, #11]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4a15      	ldr	r2, [pc, #84]	; (80035d0 <dns_send+0x1e0>)
 800357a:	4413      	add	r3, r2
 800357c:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800357e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003582:	4a14      	ldr	r2, [pc, #80]	; (80035d4 <dns_send+0x1e4>)
 8003584:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003588:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800358e:	f00a fce7 	bl	800df60 <udp_sendto>
 8003592:	4603      	mov	r3, r0
 8003594:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 8003598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800359a:	f002 fc3b 	bl	8005e14 <pbuf_free>
 800359e:	e002      	b.n	80035a6 <dns_send+0x1b6>
  } else {
    err = ERR_MEM;
 80035a0:	23ff      	movs	r3, #255	; 0xff
 80035a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 80035a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80035aa:	e005      	b.n	80035b8 <dns_send+0x1c8>
        goto overflow_return;
 80035ac:	bf00      	nop
overflow_return:
  pbuf_free(p);
 80035ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035b0:	f002 fc30 	bl	8005e14 <pbuf_free>
  return ERR_VAL;
 80035b4:	f06f 0305 	mvn.w	r3, #5
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3740      	adds	r7, #64	; 0x40
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20000718 	.word	0x20000718
 80035c4:	08019a00 	.word	0x08019a00
 80035c8:	08019a20 	.word	0x08019a20
 80035cc:	08019a38 	.word	0x08019a38
 80035d0:	20000b88 	.word	0x20000b88
 80035d4:	20000708 	.word	0x20000708

080035d8 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 80035d8:	b590      	push	{r4, r7, lr}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	6039      	str	r1, [r7, #0]
 80035e2:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]
 80035e8:	e03d      	b.n	8003666 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	4957      	ldr	r1, [pc, #348]	; (800374c <dns_call_found+0x174>)
 80035ee:	4613      	mov	r3, r2
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d030      	beq.n	8003660 <dns_call_found+0x88>
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	4952      	ldr	r1, [pc, #328]	; (800374c <dns_call_found+0x174>)
 8003602:	4613      	mov	r3, r2
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	3308      	adds	r3, #8
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	79fa      	ldrb	r2, [r7, #7]
 8003612:	429a      	cmp	r2, r3
 8003614:	d124      	bne.n	8003660 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	494c      	ldr	r1, [pc, #304]	; (800374c <dns_call_found+0x174>)
 800361a:	4613      	mov	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	681c      	ldr	r4, [r3, #0]
 8003626:	79fa      	ldrb	r2, [r7, #7]
 8003628:	4613      	mov	r3, r2
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	4413      	add	r3, r2
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	3310      	adds	r3, #16
 8003632:	4a47      	ldr	r2, [pc, #284]	; (8003750 <dns_call_found+0x178>)
 8003634:	1898      	adds	r0, r3, r2
 8003636:	7bfa      	ldrb	r2, [r7, #15]
 8003638:	4944      	ldr	r1, [pc, #272]	; (800374c <dns_call_found+0x174>)
 800363a:	4613      	mov	r3, r2
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	4413      	add	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	3304      	adds	r3, #4
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	6839      	ldr	r1, [r7, #0]
 800364c:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800364e:	7bfa      	ldrb	r2, [r7, #15]
 8003650:	493e      	ldr	r1, [pc, #248]	; (800374c <dns_call_found+0x174>)
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	3301      	adds	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	2b03      	cmp	r3, #3
 800366a:	d9be      	bls.n	80035ea <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800366c:	2300      	movs	r3, #0
 800366e:	73fb      	strb	r3, [r7, #15]
 8003670:	e031      	b.n	80036d6 <dns_call_found+0xfe>
    if (i == idx) {
 8003672:	7bfa      	ldrb	r2, [r7, #15]
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	429a      	cmp	r2, r3
 8003678:	d029      	beq.n	80036ce <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800367a:	7bfa      	ldrb	r2, [r7, #15]
 800367c:	4934      	ldr	r1, [pc, #208]	; (8003750 <dns_call_found+0x178>)
 800367e:	4613      	mov	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	4413      	add	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	440b      	add	r3, r1
 8003688:	330a      	adds	r3, #10
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d11f      	bne.n	80036d0 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	492f      	ldr	r1, [pc, #188]	; (8003750 <dns_call_found+0x178>)
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	4413      	add	r3, r2
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	440b      	add	r3, r1
 800369e:	330f      	adds	r3, #15
 80036a0:	7819      	ldrb	r1, [r3, #0]
 80036a2:	79fa      	ldrb	r2, [r7, #7]
 80036a4:	482a      	ldr	r0, [pc, #168]	; (8003750 <dns_call_found+0x178>)
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	4413      	add	r3, r2
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	4403      	add	r3, r0
 80036b0:	330f      	adds	r3, #15
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	4299      	cmp	r1, r3
 80036b6:	d10b      	bne.n	80036d0 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80036b8:	79fa      	ldrb	r2, [r7, #7]
 80036ba:	4925      	ldr	r1, [pc, #148]	; (8003750 <dns_call_found+0x178>)
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	4413      	add	r3, r2
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	440b      	add	r3, r1
 80036c6:	330f      	adds	r3, #15
 80036c8:	2204      	movs	r2, #4
 80036ca:	701a      	strb	r2, [r3, #0]
        break;
 80036cc:	e006      	b.n	80036dc <dns_call_found+0x104>
      continue; /* only check other requests */
 80036ce:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	3301      	adds	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d9ca      	bls.n	8003672 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 80036dc:	79fa      	ldrb	r2, [r7, #7]
 80036de:	491c      	ldr	r1, [pc, #112]	; (8003750 <dns_call_found+0x178>)
 80036e0:	4613      	mov	r3, r2
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	4413      	add	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	440b      	add	r3, r1
 80036ea:	330f      	adds	r3, #15
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d827      	bhi.n	8003742 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80036f2:	79fa      	ldrb	r2, [r7, #7]
 80036f4:	4916      	ldr	r1, [pc, #88]	; (8003750 <dns_call_found+0x178>)
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	4413      	add	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	440b      	add	r3, r1
 8003700:	330f      	adds	r3, #15
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	4b13      	ldr	r3, [pc, #76]	; (8003754 <dns_call_found+0x17c>)
 8003708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800370c:	4618      	mov	r0, r3
 800370e:	f00a fe85 	bl	800e41c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8003712:	79fa      	ldrb	r2, [r7, #7]
 8003714:	490e      	ldr	r1, [pc, #56]	; (8003750 <dns_call_found+0x178>)
 8003716:	4613      	mov	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	4413      	add	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	440b      	add	r3, r1
 8003720:	330f      	adds	r3, #15
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	4619      	mov	r1, r3
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <dns_call_found+0x17c>)
 8003728:	2200      	movs	r2, #0
 800372a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800372e:	79fa      	ldrb	r2, [r7, #7]
 8003730:	4907      	ldr	r1, [pc, #28]	; (8003750 <dns_call_found+0x178>)
 8003732:	4613      	mov	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	4413      	add	r3, r2
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	440b      	add	r3, r1
 800373c:	330f      	adds	r3, #15
 800373e:	2204      	movs	r2, #4
 8003740:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	bd90      	pop	{r4, r7, pc}
 800374a:	bf00      	nop
 800374c:	20000b58 	.word	0x20000b58
 8003750:	20000718 	.word	0x20000718
 8003754:	20000708 	.word	0x20000708

08003758 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800375e:	f7fd fde9 	bl	8001334 <lwip_port_rand>
 8003762:	4603      	mov	r3, r0
 8003764:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8003766:	2300      	movs	r3, #0
 8003768:	71fb      	strb	r3, [r7, #7]
 800376a:	e01a      	b.n	80037a2 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800376c:	79fa      	ldrb	r2, [r7, #7]
 800376e:	4911      	ldr	r1, [pc, #68]	; (80037b4 <dns_create_txid+0x5c>)
 8003770:	4613      	mov	r3, r2
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	4413      	add	r3, r2
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	440b      	add	r3, r1
 800377a:	330a      	adds	r3, #10
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d10c      	bne.n	800379c <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8003782:	79fa      	ldrb	r2, [r7, #7]
 8003784:	490b      	ldr	r1, [pc, #44]	; (80037b4 <dns_create_txid+0x5c>)
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	4413      	add	r3, r2
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	440b      	add	r3, r1
 8003790:	3308      	adds	r3, #8
 8003792:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8003794:	88ba      	ldrh	r2, [r7, #4]
 8003796:	429a      	cmp	r2, r3
 8003798:	d100      	bne.n	800379c <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800379a:	e7e0      	b.n	800375e <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	3301      	adds	r3, #1
 80037a0:	71fb      	strb	r3, [r7, #7]
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d9e1      	bls.n	800376c <dns_create_txid+0x14>
    }
  }

  return txid;
 80037a8:	88bb      	ldrh	r3, [r7, #4]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20000718 	.word	0x20000718

080037b8 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00e      	beq.n	80037e8 <dns_backupserver_available+0x30>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	7adb      	ldrb	r3, [r3, #11]
 80037ce:	3301      	adds	r3, #1
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	dc09      	bgt.n	80037e8 <dns_backupserver_available+0x30>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7adb      	ldrb	r3, [r3, #11]
 80037d8:	3301      	adds	r3, #1
 80037da:	4a07      	ldr	r2, [pc, #28]	; (80037f8 <dns_backupserver_available+0x40>)
 80037dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <dns_backupserver_available+0x30>
      ret = 1;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20000b88 	.word	0x20000b88

080037fc <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8003806:	79fa      	ldrb	r2, [r7, #7]
 8003808:	4613      	mov	r3, r2
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	4413      	add	r3, r2
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	4a4d      	ldr	r2, [pc, #308]	; (8003948 <dns_check_entry+0x14c>)
 8003812:	4413      	add	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d90b      	bls.n	8003834 <dns_check_entry+0x38>
 800381c:	4b4b      	ldr	r3, [pc, #300]	; (800394c <dns_check_entry+0x150>)
 800381e:	f240 422f 	movw	r2, #1071	; 0x42f
 8003822:	494b      	ldr	r1, [pc, #300]	; (8003950 <dns_check_entry+0x154>)
 8003824:	484b      	ldr	r0, [pc, #300]	; (8003954 <dns_check_entry+0x158>)
 8003826:	f014 fb05 	bl	8017e34 <iprintf>
 800382a:	2000      	movs	r0, #0
 800382c:	f014 fc04 	bl	8018038 <fflush>
 8003830:	f014 fb49 	bl	8017ec6 <abort>

  switch (entry->state) {
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	7a9b      	ldrb	r3, [r3, #10]
 8003838:	2b03      	cmp	r3, #3
 800383a:	d870      	bhi.n	800391e <dns_check_entry+0x122>
 800383c:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <dns_check_entry+0x48>)
 800383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003842:	bf00      	nop
 8003844:	08003937 	.word	0x08003937
 8003848:	08003855 	.word	0x08003855
 800384c:	08003887 	.word	0x08003887
 8003850:	080038fd 	.word	0x080038fd
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8003854:	f7ff ff80 	bl	8003758 <dns_create_txid>
 8003858:	4603      	mov	r3, r0
 800385a:	461a      	mov	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2202      	movs	r2, #2
 8003864:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fdb8 	bl	80033f0 <dns_send>
 8003880:	4603      	mov	r3, r0
 8003882:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8003884:	e05c      	b.n	8003940 <dns_check_entry+0x144>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	7b1b      	ldrb	r3, [r3, #12]
 800388a:	3b01      	subs	r3, #1
 800388c:	b2da      	uxtb	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	731a      	strb	r2, [r3, #12]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	7b1b      	ldrb	r3, [r3, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d14f      	bne.n	800393a <dns_check_entry+0x13e>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	7b5b      	ldrb	r3, [r3, #13]
 800389e:	3301      	adds	r3, #1
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	735a      	strb	r2, [r3, #13]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	7b5b      	ldrb	r3, [r3, #13]
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d11b      	bne.n	80038e6 <dns_check_entry+0xea>
          if (dns_backupserver_available(entry)
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff ff82 	bl	80037b8 <dns_backupserver_available>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00c      	beq.n	80038d4 <dns_check_entry+0xd8>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	7adb      	ldrb	r3, [r3, #11]
 80038be:	3301      	adds	r3, #1
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	735a      	strb	r2, [r3, #13]
 80038d2:	e00c      	b.n	80038ee <dns_check_entry+0xf2>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fe7d 	bl	80035d8 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	729a      	strb	r2, [r3, #10]
            break;
 80038e4:	e02c      	b.n	8003940 <dns_check_entry+0x144>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	7b5a      	ldrb	r2, [r3, #13]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff fd7d 	bl	80033f0 <dns_send>
 80038f6:	4603      	mov	r3, r0
 80038f8:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 80038fa:	e01e      	b.n	800393a <dns_check_entry+0x13e>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <dns_check_entry+0x11a>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	1e5a      	subs	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d113      	bne.n	800393e <dns_check_entry+0x142>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	729a      	strb	r2, [r3, #10]
      }
      break;
 800391c:	e00f      	b.n	800393e <dns_check_entry+0x142>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800391e:	4b0b      	ldr	r3, [pc, #44]	; (800394c <dns_check_entry+0x150>)
 8003920:	f240 426e 	movw	r2, #1134	; 0x46e
 8003924:	490c      	ldr	r1, [pc, #48]	; (8003958 <dns_check_entry+0x15c>)
 8003926:	480b      	ldr	r0, [pc, #44]	; (8003954 <dns_check_entry+0x158>)
 8003928:	f014 fa84 	bl	8017e34 <iprintf>
 800392c:	2000      	movs	r0, #0
 800392e:	f014 fb83 	bl	8018038 <fflush>
 8003932:	f014 fac8 	bl	8017ec6 <abort>
      break;
 8003936:	bf00      	nop
 8003938:	e002      	b.n	8003940 <dns_check_entry+0x144>
      break;
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <dns_check_entry+0x144>
      break;
 800393e:	bf00      	nop
      break;
  }
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20000718 	.word	0x20000718
 800394c:	08019a00 	.word	0x08019a00
 8003950:	08019a60 	.word	0x08019a60
 8003954:	08019a38 	.word	0x08019a38
 8003958:	08019a7c 	.word	0x08019a7c

0800395c <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8003962:	2300      	movs	r3, #0
 8003964:	71fb      	strb	r3, [r7, #7]
 8003966:	e006      	b.n	8003976 <dns_check_entries+0x1a>
    dns_check_entry(i);
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff ff46 	bl	80037fc <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	3301      	adds	r3, #1
 8003974:	71fb      	strb	r3, [r7, #7]
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d9f5      	bls.n	8003968 <dns_check_entries+0xc>
  }
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8003984:	b480      	push	{r7}
 8003986:	b089      	sub	sp, #36	; 0x24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00d      	beq.n	80039c4 <lwip_standard_chksum+0x40>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	dd0a      	ble.n	80039c4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80039ae:	f107 030e 	add.w	r3, r7, #14
 80039b2:	3301      	adds	r3, #1
 80039b4:	69fa      	ldr	r2, [r7, #28]
 80039b6:	1c51      	adds	r1, r2, #1
 80039b8:	61f9      	str	r1, [r7, #28]
 80039ba:	7812      	ldrb	r2, [r2, #0]
 80039bc:	701a      	strb	r2, [r3, #0]
    len--;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	3b01      	subs	r3, #1
 80039c2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80039c8:	e00a      	b.n	80039e0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	1c9a      	adds	r2, r3, #2
 80039ce:	61ba      	str	r2, [r7, #24]
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	4413      	add	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]
    len -= 2;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	3b02      	subs	r3, #2
 80039de:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	dcf1      	bgt.n	80039ca <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	dd04      	ble.n	80039f6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80039ec:	f107 030e 	add.w	r3, r7, #14
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	7812      	ldrb	r2, [r2, #0]
 80039f4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80039f6:	89fb      	ldrh	r3, [r7, #14]
 80039f8:	461a      	mov	r2, r3
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	4413      	add	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	0c1a      	lsrs	r2, r3, #16
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	4413      	add	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	0c1a      	lsrs	r2, r3, #16
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	4413      	add	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d007      	beq.n	8003a2e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	021b      	lsls	r3, r3, #8
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	b29b      	uxth	r3, r3
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3724      	adds	r7, #36	; 0x24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b086      	sub	sp, #24
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	607b      	str	r3, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	72fb      	strb	r3, [r7, #11]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	e02b      	b.n	8003ab2 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	895b      	ldrh	r3, [r3, #10]
 8003a62:	4619      	mov	r1, r3
 8003a64:	4610      	mov	r0, r2
 8003a66:	f7ff ff8d 	bl	8003984 <lwip_standard_chksum>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	0c1a      	lsrs	r2, r3, #16
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	895b      	ldrh	r3, [r3, #10]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00e      	beq.n	8003aac <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	bf0c      	ite	eq
 8003a94:	2301      	moveq	r3, #1
 8003a96:	2300      	movne	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	0a1b      	lsrs	r3, r3, #8
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1d0      	bne.n	8003a5a <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d007      	beq.n	8003ace <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	021b      	lsls	r3, r3, #8
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	0a1b      	lsrs	r3, r3, #8
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	4313      	orrs	r3, r2
 8003acc:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8003ace:	7afb      	ldrb	r3, [r7, #11]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff fc14 	bl	8003300 <lwip_htons>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	461a      	mov	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4413      	add	r3, r2
 8003ae0:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8003ae2:	893b      	ldrh	r3, [r7, #8]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff fc0b 	bl	8003300 <lwip_htons>
 8003aea:	4603      	mov	r3, r0
 8003aec:	461a      	mov	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4413      	add	r3, r2
 8003af2:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	0c1a      	lsrs	r2, r3, #16
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	4413      	add	r3, r2
 8003afe:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	0c1a      	lsrs	r2, r3, #16
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	4413      	add	r3, r2
 8003b0a:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	b29b      	uxth	r3, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	607b      	str	r3, [r7, #4]
 8003b26:	460b      	mov	r3, r1
 8003b28:	72fb      	strb	r3, [r7, #11]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4413      	add	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4413      	add	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	0c1b      	lsrs	r3, r3, #16
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	0c1a      	lsrs	r2, r3, #16
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	4413      	add	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	0c1a      	lsrs	r2, r3, #16
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8003b76:	893a      	ldrh	r2, [r7, #8]
 8003b78:	7af9      	ldrb	r1, [r7, #11]
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f7ff ff5e 	bl	8003a3e <inet_cksum_pseudo_base>
 8003b82:	4603      	mov	r3, r0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	607b      	str	r3, [r7, #4]
 8003b96:	460b      	mov	r3, r1
 8003b98:	72fb      	strb	r3, [r7, #11]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8003b9e:	893a      	ldrh	r2, [r7, #8]
 8003ba0:	7af9      	ldrb	r1, [r7, #11]
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7ff ffb7 	bl	8003b1c <inet_chksum_pseudo>
 8003bae:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8003bc4:	887b      	ldrh	r3, [r7, #2]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff fedb 	bl	8003984 <lwip_standard_chksum>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	b29b      	uxth	r3, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	e02b      	b.n	8003c4a <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	895b      	ldrh	r3, [r3, #10]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f7ff fec1 	bl	8003984 <lwip_standard_chksum>
 8003c02:	4603      	mov	r3, r0
 8003c04:	461a      	mov	r2, r3
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	4413      	add	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	0c1a      	lsrs	r2, r3, #16
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	895b      	ldrh	r3, [r3, #10]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00e      	beq.n	8003c44 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	bf0c      	ite	eq
 8003c2c:	2301      	moveq	r3, #1
 8003c2e:	2300      	movne	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1d0      	bne.n	8003bf2 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d007      	beq.n	8003c66 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	0a1b      	lsrs	r3, r3, #8
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	b29b      	uxth	r3, r3
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8003c80:	f7fd fad8 	bl	8001234 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8003c84:	f000 fe8a 	bl	800499c <mem_init>
  memp_init();
 8003c88:	f001 f9e6 	bl	8005058 <memp_init>
  pbuf_init();
  netif_init();
 8003c8c:	f001 fad8 	bl	8005240 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003c90:	f009 ff76 	bl	800db80 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003c94:	f002 fe2a 	bl	80068ec <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8003c98:	f7ff fb60 	bl	800335c <dns_init>
#endif /* LWIP_DNS */
#if PPP_SUPPORT
  ppp_init();
 8003c9c:	f011 fce8 	bl	8015670 <ppp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003ca0:	f009 fe7a 	bl	800d998 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003ca4:	bf00      	nop
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08e      	sub	sp, #56	; 0x38
 8003cb0:	af04      	add	r7, sp, #16
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8003cb6:	4b92      	ldr	r3, [pc, #584]	; (8003f00 <icmp_input+0x254>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8003ccc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003cce:	2b13      	cmp	r3, #19
 8003cd0:	f240 80fe 	bls.w	8003ed0 <icmp_input+0x224>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	895b      	ldrh	r3, [r3, #10]
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	f240 80fb 	bls.w	8003ed4 <icmp_input+0x228>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	785b      	ldrb	r3, [r3, #1]
 8003cee:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8003cf2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 80e3 	beq.w	8003ec2 <icmp_input+0x216>
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	f040 80e3 	bne.w	8003ec8 <icmp_input+0x21c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8003d02:	4b80      	ldr	r3, [pc, #512]	; (8003f04 <icmp_input+0x258>)
 8003d04:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8003d06:	4b7e      	ldr	r3, [pc, #504]	; (8003f00 <icmp_input+0x254>)
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d0e:	2be0      	cmp	r3, #224	; 0xe0
 8003d10:	f000 80e7 	beq.w	8003ee2 <icmp_input+0x236>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8003d14:	4b7a      	ldr	r3, [pc, #488]	; (8003f00 <icmp_input+0x254>)
 8003d16:	695a      	ldr	r2, [r3, #20]
 8003d18:	4b79      	ldr	r3, [pc, #484]	; (8003f00 <icmp_input+0x254>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4610      	mov	r0, r2
 8003d20:	f000 fc8e 	bl	8004640 <ip4_addr_isbroadcast_u32>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f040 80dd 	bne.w	8003ee6 <icmp_input+0x23a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	891b      	ldrh	r3, [r3, #8]
 8003d30:	2b07      	cmp	r3, #7
 8003d32:	f240 80d1 	bls.w	8003ed8 <icmp_input+0x22c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff ff50 	bl	8003bdc <inet_chksum_pbuf>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f002 f866 	bl	8005e14 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8003d48:	e0d6      	b.n	8003ef8 <icmp_input+0x24c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8003d4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d4c:	330e      	adds	r3, #14
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f001 ffc5 	bl	8005ce0 <pbuf_add_header>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d04c      	beq.n	8003df6 <icmp_input+0x14a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	891a      	ldrh	r2, [r3, #8]
 8003d60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d62:	4413      	add	r3, r2
 8003d64:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	891b      	ldrh	r3, [r3, #8]
 8003d6a:	8b7a      	ldrh	r2, [r7, #26]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	f0c0 80bc 	bcc.w	8003eea <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8003d72:	8b7b      	ldrh	r3, [r7, #26]
 8003d74:	f44f 7220 	mov.w	r2, #640	; 0x280
 8003d78:	4619      	mov	r1, r3
 8003d7a:	200e      	movs	r0, #14
 8003d7c:	f001 fda6 	bl	80058cc <pbuf_alloc>
 8003d80:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80b2 	beq.w	8003eee <icmp_input+0x242>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	895b      	ldrh	r3, [r3, #10]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d92:	3308      	adds	r3, #8
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d203      	bcs.n	8003da0 <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header\n"));
          pbuf_free(r);
 8003d98:	6978      	ldr	r0, [r7, #20]
 8003d9a:	f002 f83b 	bl	8005e14 <pbuf_free>
          goto icmperr;
 8003d9e:	e0a7      	b.n	8003ef0 <icmp_input+0x244>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003da6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003da8:	4618      	mov	r0, r3
 8003daa:	f014 fa65 	bl	8018278 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8003dae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003db0:	4619      	mov	r1, r3
 8003db2:	6978      	ldr	r0, [r7, #20]
 8003db4:	f001 ffa4 	bl	8005d00 <pbuf_remove_header>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <icmp_input+0x128>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed", 0);
 8003dbe:	4b52      	ldr	r3, [pc, #328]	; (8003f08 <icmp_input+0x25c>)
 8003dc0:	22b6      	movs	r2, #182	; 0xb6
 8003dc2:	4952      	ldr	r1, [pc, #328]	; (8003f0c <icmp_input+0x260>)
 8003dc4:	4852      	ldr	r0, [pc, #328]	; (8003f10 <icmp_input+0x264>)
 8003dc6:	f014 f835 	bl	8017e34 <iprintf>
 8003dca:	2000      	movs	r0, #0
 8003dcc:	f014 f934 	bl	8018038 <fflush>
 8003dd0:	f014 f879 	bl	8017ec6 <abort>
          pbuf_free(r);
          goto icmperr;
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	6978      	ldr	r0, [r7, #20]
 8003dd8:	f002 f986 	bl	80060e8 <pbuf_copy>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <icmp_input+0x13e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed\n"));
          pbuf_free(r);
 8003de2:	6978      	ldr	r0, [r7, #20]
 8003de4:	f002 f816 	bl	8005e14 <pbuf_free>
          goto icmperr;
 8003de8:	e082      	b.n	8003ef0 <icmp_input+0x244>
        }
        /* free the original p */
        pbuf_free(p);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f002 f812 	bl	8005e14 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	607b      	str	r3, [r7, #4]
 8003df4:	e013      	b.n	8003e1e <icmp_input+0x172>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8003df6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003df8:	330e      	adds	r3, #14
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f001 ff7f 	bl	8005d00 <pbuf_remove_header>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <icmp_input+0x172>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed", 0);
 8003e08:	4b3f      	ldr	r3, [pc, #252]	; (8003f08 <icmp_input+0x25c>)
 8003e0a:	22c7      	movs	r2, #199	; 0xc7
 8003e0c:	4941      	ldr	r1, [pc, #260]	; (8003f14 <icmp_input+0x268>)
 8003e0e:	4840      	ldr	r0, [pc, #256]	; (8003f10 <icmp_input+0x264>)
 8003e10:	f014 f810 	bl	8017e34 <iprintf>
 8003e14:	2000      	movs	r0, #0
 8003e16:	f014 f90f 	bl	8018038 <fflush>
 8003e1a:	f014 f854 	bl	8017ec6 <abort>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8003e24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e26:	4619      	mov	r1, r3
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f001 ff59 	bl	8005ce0 <pbuf_add_header>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d148      	bne.n	8003ec6 <icmp_input+0x21a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet\n"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8003e42:	4b2f      	ldr	r3, [pc, #188]	; (8003f00 <icmp_input+0x254>)
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	701a      	strb	r2, [r3, #0]
        p->if_idx = NETIF_NO_INDEX; /* we're reusing this pbuf, so reset its if_idx */
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	73da      	strb	r2, [r3, #15]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	885b      	ldrh	r3, [r3, #2]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d907      	bls.n	8003e74 <icmp_input+0x1c8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	885b      	ldrh	r3, [r3, #2]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3309      	adds	r3, #9
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	805a      	strh	r2, [r3, #2]
 8003e72:	e006      	b.n	8003e82 <icmp_input+0x1d6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	885b      	ldrh	r3, [r3, #2]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3308      	adds	r3, #8
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	22ff      	movs	r2, #255	; 0xff
 8003e86:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	729a      	strb	r2, [r3, #10]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8003e92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e94:	4619      	mov	r1, r3
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7ff fe8e 	bl	8003bb8 <inet_chksum>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	9302      	str	r3, [sp, #8]
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	9301      	str	r3, [sp, #4]
 8003eac:	2300      	movs	r3, #0
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	23ff      	movs	r3, #255	; 0xff
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	69f9      	ldr	r1, [r7, #28]
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fa7e 	bl	80043b8 <ip4_output_if>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8003ec0:	e001      	b.n	8003ec6 <icmp_input+0x21a>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e000      	b.n	8003ec8 <icmp_input+0x21c>
      break;
 8003ec6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f001 ffa3 	bl	8005e14 <pbuf_free>
  return;
 8003ece:	e013      	b.n	8003ef8 <icmp_input+0x24c>
    goto lenerr;
 8003ed0:	bf00      	nop
 8003ed2:	e002      	b.n	8003eda <icmp_input+0x22e>
    goto lenerr;
 8003ed4:	bf00      	nop
 8003ed6:	e000      	b.n	8003eda <icmp_input+0x22e>
        goto lenerr;
 8003ed8:	bf00      	nop
lenerr:
  pbuf_free(p);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f001 ff9a 	bl	8005e14 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8003ee0:	e00a      	b.n	8003ef8 <icmp_input+0x24c>
        goto icmperr;
 8003ee2:	bf00      	nop
 8003ee4:	e004      	b.n	8003ef0 <icmp_input+0x244>
        goto icmperr;
 8003ee6:	bf00      	nop
 8003ee8:	e002      	b.n	8003ef0 <icmp_input+0x244>
          goto icmperr;
 8003eea:	bf00      	nop
 8003eec:	e000      	b.n	8003ef0 <icmp_input+0x244>
          goto icmperr;
 8003eee:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f001 ff8f 	bl	8005e14 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8003ef6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8003ef8:	3728      	adds	r7, #40	; 0x28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000d60 	.word	0x20000d60
 8003f04:	20000d74 	.word	0x20000d74
 8003f08:	08019a9c 	.word	0x08019a9c
 8003f0c:	08019ac0 	.word	0x08019ac0
 8003f10:	08019af4 	.word	0x08019af4
 8003f14:	08019b1c 	.word	0x08019b1c

08003f18 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	461a      	mov	r2, r3
 8003f28:	2103      	movs	r1, #3
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f804 	bl	8003f38 <icmp_send_response>
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08c      	sub	sp, #48	; 0x30
 8003f3c:	af04      	add	r7, sp, #16
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	70fb      	strb	r3, [r7, #3]
 8003f44:	4613      	mov	r3, r2
 8003f46:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* Keep IP header + up to 8 bytes */
  response_pkt_len = IP_HLEN + ICMP_DEST_UNREACH_DATASIZE;
 8003f48:	231c      	movs	r3, #28
 8003f4a:	83fb      	strh	r3, [r7, #30]
  if (p->tot_len < response_pkt_len) {
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	891b      	ldrh	r3, [r3, #8]
 8003f50:	8bfa      	ldrh	r2, [r7, #30]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d902      	bls.n	8003f5c <icmp_send_response+0x24>
    response_pkt_len = p->tot_len;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	891b      	ldrh	r3, [r3, #8]
 8003f5a:	83fb      	strh	r3, [r7, #30]
  }

  /* ICMP header + part of original packet */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_hdr) + response_pkt_len, PBUF_RAM);
 8003f5c:	8bfb      	ldrh	r3, [r7, #30]
 8003f5e:	3308      	adds	r3, #8
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	f44f 7220 	mov.w	r2, #640	; 0x280
 8003f66:	4619      	mov	r1, r3
 8003f68:	2022      	movs	r0, #34	; 0x22
 8003f6a:	f001 fcaf 	bl	80058cc <pbuf_alloc>
 8003f6e:	61b8      	str	r0, [r7, #24]
  if (q == NULL) {
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d059      	beq.n	800402a <icmp_send_response+0xf2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_send_response: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	895b      	ldrh	r3, [r3, #10]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	8bfb      	ldrh	r3, [r7, #30]
 8003f7e:	3308      	adds	r3, #8
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d20b      	bcs.n	8003f9c <icmp_send_response+0x64>
 8003f84:	4b2b      	ldr	r3, [pc, #172]	; (8004034 <icmp_send_response+0xfc>)
 8003f86:	f240 126f 	movw	r2, #367	; 0x16f
 8003f8a:	492b      	ldr	r1, [pc, #172]	; (8004038 <icmp_send_response+0x100>)
 8003f8c:	482b      	ldr	r0, [pc, #172]	; (800403c <icmp_send_response+0x104>)
 8003f8e:	f013 ff51 	bl	8017e34 <iprintf>
 8003f92:	2000      	movs	r0, #0
 8003f94:	f014 f850 	bl	8018038 <fflush>
 8003f98:	f013 ff95 	bl	8017ec6 <abort>
              (q->len >= (sizeof(struct icmp_hdr) + response_pkt_len)));

  iphdr = (struct ip_hdr *)p->payload;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_hdr *)q->payload;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	78fa      	ldrb	r2, [r7, #3]
 8003fac:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	78ba      	ldrb	r2, [r7, #2]
 8003fb2:	705a      	strb	r2, [r3, #1]
  icmphdr->data = 0;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	711a      	strb	r2, [r3, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	715a      	strb	r2, [r3, #5]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	719a      	strb	r2, [r3, #6]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  pbuf_copy_partial_pbuf(q, p, response_pkt_len, sizeof(struct icmp_hdr));
 8003fc6:	8bfa      	ldrh	r2, [r7, #30]
 8003fc8:	2308      	movs	r3, #8
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	69b8      	ldr	r0, [r7, #24]
 8003fce:	f002 f8af 	bl	8006130 <pbuf_copy_partial_pbuf>

  ip4_addr_copy(iphdr_src, iphdr->src);
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	60bb      	str	r3, [r7, #8]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8003fd8:	f107 0308 	add.w	r3, r7, #8
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 f82f 	bl	8004040 <ip4_route>
 8003fe2:	60f8      	str	r0, [r7, #12]
#endif
  if (netif != NULL) {
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01b      	beq.n	8004022 <icmp_send_response+0xea>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2200      	movs	r2, #0
 8003fee:	709a      	strb	r2, [r3, #2]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	895b      	ldrh	r3, [r3, #10]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	6938      	ldr	r0, [r7, #16]
 8003ffc:	f7ff fddc 	bl	8003bb8 <inet_chksum>
 8004000:	4603      	mov	r3, r0
 8004002:	461a      	mov	r2, r3
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8004008:	f107 0208 	add.w	r2, r7, #8
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	9302      	str	r3, [sp, #8]
 8004010:	2301      	movs	r3, #1
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	2300      	movs	r3, #0
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	23ff      	movs	r3, #255	; 0xff
 800401a:	2100      	movs	r1, #0
 800401c:	69b8      	ldr	r0, [r7, #24]
 800401e:	f000 f9cb 	bl	80043b8 <ip4_output_if>
  }
  pbuf_free(q);
 8004022:	69b8      	ldr	r0, [r7, #24]
 8004024:	f001 fef6 	bl	8005e14 <pbuf_free>
 8004028:	e000      	b.n	800402c <icmp_send_response+0xf4>
    return;
 800402a:	bf00      	nop
}
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	08019a9c 	.word	0x08019a9c
 8004038:	08019b50 	.word	0x08019b50
 800403c:	08019af4 	.word	0x08019af4

08004040 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8004048:	4b31      	ldr	r3, [pc, #196]	; (8004110 <ip4_route+0xd0>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	e033      	b.n	80040b8 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d029      	beq.n	80040b2 <ip4_route+0x72>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d022      	beq.n	80040b2 <ip4_route+0x72>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3304      	adds	r3, #4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d01d      	beq.n	80040b2 <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_net_eq(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3304      	adds	r3, #4
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	405a      	eors	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3308      	adds	r3, #8
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4013      	ands	r3, r2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	e038      	b.n	8004104 <ip4_route+0xc4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_eq(dest, netif_ip4_gw(netif))) {
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d108      	bne.n	80040b2 <ip4_route+0x72>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	330c      	adds	r3, #12
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d101      	bne.n	80040b2 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	e028      	b.n	8004104 <ip4_route+0xc4>
  NETIF_FOREACH(netif) {
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1c8      	bne.n	8004050 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80040be:	4b15      	ldr	r3, [pc, #84]	; (8004114 <ip4_route+0xd4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d01a      	beq.n	80040fc <ip4_route+0xbc>
 80040c6:	4b13      	ldr	r3, [pc, #76]	; (8004114 <ip4_route+0xd4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d012      	beq.n	80040fc <ip4_route+0xbc>
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <ip4_route+0xd4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <ip4_route+0xd4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3304      	adds	r3, #4
 80040ec:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d004      	beq.n	80040fc <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b7f      	cmp	r3, #127	; 0x7f
 80040fa:	d101      	bne.n	8004100 <ip4_route+0xc0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e001      	b.n	8004104 <ip4_route+0xc4>
  }

  return netif_default;
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <ip4_route+0xd4>)
 8004102:	681b      	ldr	r3, [r3, #0]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	2000402c 	.word	0x2000402c
 8004114:	20004030 	.word	0x20004030

08004118 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d016      	beq.n	800415c <ip4_input_accept+0x44>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3304      	adds	r3, #4
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d011      	beq.n	800415c <ip4_input_accept+0x44>
    /* unicast to this interface address? */
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <ip4_input_accept+0x50>)
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d008      	beq.n	8004158 <ip4_input_accept+0x40>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <ip4_input_accept+0x50>)
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fa77 	bl	8004640 <ip4_addr_isbroadcast_u32>
 8004152:	4603      	mov	r3, r0
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <ip4_input_accept+0x44>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <ip4_input_accept+0x46>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000d60 	.word	0x20000d60

0800416c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	091b      	lsrs	r3, r3, #4
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b04      	cmp	r3, #4
 8004186:	d004      	beq.n	8004192 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f001 fe43 	bl	8005e14 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e10a      	b.n	80043a8 <ip4_input+0x23c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	b2db      	uxtb	r3, r3
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	885b      	ldrh	r3, [r3, #2]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff f8a9 	bl	8003300 <lwip_htons>
 80041ae:	4603      	mov	r3, r0
 80041b0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	891b      	ldrh	r3, [r3, #8]
 80041b6:	89ba      	ldrh	r2, [r7, #12]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d204      	bcs.n	80041c6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80041bc:	89bb      	ldrh	r3, [r7, #12]
 80041be:	4619      	mov	r1, r3
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f001 fc75 	bl	8005ab0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	895b      	ldrh	r3, [r3, #10]
 80041ca:	89fa      	ldrh	r2, [r7, #14]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d807      	bhi.n	80041e0 <ip4_input+0x74>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	891b      	ldrh	r3, [r3, #8]
 80041d4:	89ba      	ldrh	r2, [r7, #12]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d802      	bhi.n	80041e0 <ip4_input+0x74>
 80041da:	89fb      	ldrh	r3, [r7, #14]
 80041dc:	2b13      	cmp	r3, #19
 80041de:	d804      	bhi.n	80041ea <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f001 fe17 	bl	8005e14 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e0de      	b.n	80043a8 <ip4_input+0x23c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 80041ea:	89fb      	ldrh	r3, [r7, #14]
 80041ec:	4619      	mov	r1, r3
 80041ee:	6938      	ldr	r0, [r7, #16]
 80041f0:	f7ff fce2 	bl	8003bb8 <inet_chksum>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d004      	beq.n	8004204 <ip4_input+0x98>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f001 fe0a 	bl	8005e14 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	e0d1      	b.n	80043a8 <ip4_input+0x23c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	4a69      	ldr	r2, [pc, #420]	; (80043b0 <ip4_input+0x244>)
 800420a:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4a67      	ldr	r2, [pc, #412]	; (80043b0 <ip4_input+0x244>)
 8004212:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004214:	4b66      	ldr	r3, [pc, #408]	; (80043b0 <ip4_input+0x244>)
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800421c:	2be0      	cmp	r3, #224	; 0xe0
 800421e:	d111      	bne.n	8004244 <ip4_input+0xd8>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <ip4_input+0xd2>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	3304      	adds	r3, #4
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <ip4_input+0xd2>
      netif = inp;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	e02a      	b.n	8004294 <ip4_input+0x128>
    } else {
      netif = NULL;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	e027      	b.n	8004294 <ip4_input+0x128>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8004244:	6838      	ldr	r0, [r7, #0]
 8004246:	f7ff ff67 	bl	8004118 <ip4_input_accept>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <ip4_input+0xea>
      netif = inp;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	e01e      	b.n	8004294 <ip4_input+0x128>
    } else {
      netif = NULL;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800425a:	4b55      	ldr	r3, [pc, #340]	; (80043b0 <ip4_input+0x244>)
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b7f      	cmp	r3, #127	; 0x7f
 8004262:	d017      	beq.n	8004294 <ip4_input+0x128>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8004264:	4b53      	ldr	r3, [pc, #332]	; (80043b4 <ip4_input+0x248>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e00e      	b.n	800428a <ip4_input+0x11e>
          if (netif == inp) {
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d006      	beq.n	8004282 <ip4_input+0x116>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8004274:	6978      	ldr	r0, [r7, #20]
 8004276:	f7ff ff4f 	bl	8004118 <ip4_input_accept>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d108      	bne.n	8004292 <ip4_input+0x126>
 8004280:	e000      	b.n	8004284 <ip4_input+0x118>
            continue;
 8004282:	bf00      	nop
        NETIF_FOREACH(netif) {
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1ed      	bne.n	800426c <ip4_input+0x100>
 8004290:	e000      	b.n	8004294 <ip4_input+0x128>
            break;
 8004292:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8004294:	4b46      	ldr	r3, [pc, #280]	; (80043b0 <ip4_input+0x244>)
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	6839      	ldr	r1, [r7, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f9d0 	bl	8004640 <ip4_addr_isbroadcast_u32>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d105      	bne.n	80042b2 <ip4_input+0x146>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80042a6:	4b42      	ldr	r3, [pc, #264]	; (80043b0 <ip4_input+0x244>)
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80042ae:	2be0      	cmp	r3, #224	; 0xe0
 80042b0:	d104      	bne.n	80042bc <ip4_input+0x150>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f001 fdae 	bl	8005e14 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	e075      	b.n	80043a8 <ip4_input+0x23c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d104      	bne.n	80042cc <ip4_input+0x160>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f001 fda6 	bl	8005e14 <pbuf_free>
    return ERR_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	e06d      	b.n	80043a8 <ip4_input+0x23c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	88db      	ldrh	r3, [r3, #6]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	461a      	mov	r2, r3
 80042d4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80042d8:	4013      	ands	r3, r2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d004      	beq.n	80042e8 <ip4_input+0x17c>
    if (p == NULL) {
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
#else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
    pbuf_free(p);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f001 fd98 	bl	8005e14 <pbuf_free>
                lwip_ntohs(IPH_OFFSET(iphdr))));
    IP_STATS_INC(ip.opterr);
    IP_STATS_INC(ip.drop);
    /* unsupported protocol feature */
    MIB2_STATS_INC(mib2.ipinunknownprotos);
    return ERR_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	e05f      	b.n	80043a8 <ip4_input+0x23c>
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80042e8:	4a31      	ldr	r2, [pc, #196]	; (80043b0 <ip4_input+0x244>)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80042ee:	4a30      	ldr	r2, [pc, #192]	; (80043b0 <ip4_input+0x244>)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80042f4:	4a2e      	ldr	r2, [pc, #184]	; (80043b0 <ip4_input+0x244>)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	b2db      	uxtb	r3, r3
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	b2db      	uxtb	r3, r3
 8004308:	b29a      	uxth	r2, r3
 800430a:	4b29      	ldr	r3, [pc, #164]	; (80043b0 <ip4_input+0x244>)
 800430c:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800430e:	89fb      	ldrh	r3, [r7, #14]
 8004310:	4619      	mov	r1, r3
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f001 fcf4 	bl	8005d00 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	7a5b      	ldrb	r3, [r3, #9]
 800431c:	2b06      	cmp	r3, #6
 800431e:	d009      	beq.n	8004334 <ip4_input+0x1c8>
 8004320:	2b11      	cmp	r3, #17
 8004322:	d002      	beq.n	800432a <ip4_input+0x1be>
 8004324:	2b01      	cmp	r3, #1
 8004326:	d00a      	beq.n	800433e <ip4_input+0x1d2>
 8004328:	e00e      	b.n	8004348 <ip4_input+0x1dc>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800432a:	6839      	ldr	r1, [r7, #0]
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f009 fcdf 	bl	800dcf0 <udp_input>
        break;
 8004332:	e026      	b.n	8004382 <ip4_input+0x216>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8004334:	6839      	ldr	r1, [r7, #0]
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f004 fc7a 	bl	8008c30 <tcp_input>
        break;
 800433c:	e021      	b.n	8004382 <ip4_input+0x216>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800433e:	6839      	ldr	r1, [r7, #0]
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff fcb3 	bl	8003cac <icmp_input>
        break;
 8004346:	e01c      	b.n	8004382 <ip4_input+0x216>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8004348:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <ip4_input+0x244>)
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	6979      	ldr	r1, [r7, #20]
 800434e:	4618      	mov	r0, r3
 8004350:	f000 f976 	bl	8004640 <ip4_addr_isbroadcast_u32>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10f      	bne.n	800437a <ip4_input+0x20e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800435a:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <ip4_input+0x244>)
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8004362:	2be0      	cmp	r3, #224	; 0xe0
 8004364:	d009      	beq.n	800437a <ip4_input+0x20e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8004366:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800436a:	4619      	mov	r1, r3
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f001 fd3e 	bl	8005dee <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8004372:	2102      	movs	r1, #2
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff fdcf 	bl	8003f18 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f001 fd4a 	bl	8005e14 <pbuf_free>
        break;
 8004380:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <ip4_input+0x244>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8004388:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <ip4_input+0x244>)
 800438a:	2200      	movs	r2, #0
 800438c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <ip4_input+0x244>)
 8004390:	2200      	movs	r2, #0
 8004392:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8004394:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <ip4_input+0x244>)
 8004396:	2200      	movs	r2, #0
 8004398:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <ip4_input+0x244>)
 800439c:	2200      	movs	r2, #0
 800439e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80043a0:	4b03      	ldr	r3, [pc, #12]	; (80043b0 <ip4_input+0x244>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000d60 	.word	0x20000d60
 80043b4:	2000402c 	.word	0x2000402c

080043b8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08a      	sub	sp, #40	; 0x28
 80043bc:	af04      	add	r7, sp, #16
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d009      	beq.n	80043e4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <ip4_output_if+0x26>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	3304      	adds	r3, #4
 80043e2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80043e4:	78fa      	ldrb	r2, [r7, #3]
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	9302      	str	r3, [sp, #8]
 80043ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043ee:	9301      	str	r3, [sp, #4]
 80043f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	4613      	mov	r3, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6979      	ldr	r1, [r7, #20]
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 f805 	bl	800440c <ip4_output_if_src>
 8004402:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	7b9b      	ldrb	r3, [r3, #14]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d00b      	beq.n	800443e <ip4_output_if_src+0x32>
 8004426:	4b80      	ldr	r3, [pc, #512]	; (8004628 <ip4_output_if_src+0x21c>)
 8004428:	f240 326b 	movw	r2, #875	; 0x36b
 800442c:	497f      	ldr	r1, [pc, #508]	; (800462c <ip4_output_if_src+0x220>)
 800442e:	4880      	ldr	r0, [pc, #512]	; (8004630 <ip4_output_if_src+0x224>)
 8004430:	f013 fd00 	bl	8017e34 <iprintf>
 8004434:	2000      	movs	r0, #0
 8004436:	f013 fdff 	bl	8018038 <fflush>
 800443a:	f013 fd44 	bl	8017ec6 <abort>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 80c9 	beq.w	80045d8 <ip4_output_if_src+0x1cc>
    u16_t ip_hlen = IP_HLEN;
 8004446:	2314      	movs	r3, #20
 8004448:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800444a:	2114      	movs	r1, #20
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f001 fc47 	bl	8005ce0 <pbuf_add_header>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8004458:	f06f 0301 	mvn.w	r3, #1
 800445c:	e0e0      	b.n	8004620 <ip4_output_if_src+0x214>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	895b      	ldrh	r3, [r3, #10]
 8004468:	2b13      	cmp	r3, #19
 800446a:	d80b      	bhi.n	8004484 <ip4_output_if_src+0x78>
 800446c:	4b6e      	ldr	r3, [pc, #440]	; (8004628 <ip4_output_if_src+0x21c>)
 800446e:	f44f 7268 	mov.w	r2, #928	; 0x3a0
 8004472:	4970      	ldr	r1, [pc, #448]	; (8004634 <ip4_output_if_src+0x228>)
 8004474:	486e      	ldr	r0, [pc, #440]	; (8004630 <ip4_output_if_src+0x224>)
 8004476:	f013 fcdd 	bl	8017e34 <iprintf>
 800447a:	2000      	movs	r0, #0
 800447c:	f013 fddc 	bl	8018038 <fflush>
 8004480:	f013 fd21 	bl	8017ec6 <abort>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004490:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8004492:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	021b      	lsls	r3, r3, #8
 800449a:	4313      	orrs	r3, r2
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	b21a      	sxth	r2, r3
 80044a0:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	430b      	orrs	r3, r1
 80044aa:	121b      	asrs	r3, r3, #8
 80044ac:	b21b      	sxth	r3, r3
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	b21b      	sxth	r3, r3
 80044b2:	4313      	orrs	r3, r2
 80044b4:	b21b      	sxth	r3, r3
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	4413      	add	r3, r2
 80044be:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	4413      	add	r3, r2
 80044d2:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	0c1b      	lsrs	r3, r3, #16
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	4413      	add	r3, r2
 80044de:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80044e0:	8b7b      	ldrh	r3, [r7, #26]
 80044e2:	089b      	lsrs	r3, r3, #2
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80044f8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 80044fa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	4313      	orrs	r3, r2
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	b21a      	sxth	r2, r3
 800450a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	430b      	orrs	r3, r1
 8004516:	121b      	asrs	r3, r3, #8
 8004518:	b21b      	sxth	r3, r3
 800451a:	b2db      	uxtb	r3, r3
 800451c:	b21b      	sxth	r3, r3
 800451e:	4313      	orrs	r3, r2
 8004520:	b21b      	sxth	r3, r3
 8004522:	b29b      	uxth	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	4413      	add	r3, r2
 800452a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	891b      	ldrh	r3, [r3, #8]
 8004530:	4618      	mov	r0, r3
 8004532:	f7fe fee5 	bl	8003300 <lwip_htons>
 8004536:	4603      	mov	r3, r0
 8004538:	461a      	mov	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	885b      	ldrh	r3, [r3, #2]
 8004542:	b29b      	uxth	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	4413      	add	r3, r2
 800454a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2200      	movs	r2, #0
 8004550:	719a      	strb	r2, [r3, #6]
 8004552:	2200      	movs	r2, #0
 8004554:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8004556:	4b38      	ldr	r3, [pc, #224]	; (8004638 <ip4_output_if_src+0x22c>)
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe fed0 	bl	8003300 <lwip_htons>
 8004560:	4603      	mov	r3, r0
 8004562:	461a      	mov	r2, r3
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	889b      	ldrh	r3, [r3, #4]
 800456c:	b29b      	uxth	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	4413      	add	r3, r2
 8004574:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8004576:	4b30      	ldr	r3, [pc, #192]	; (8004638 <ip4_output_if_src+0x22c>)
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	3301      	adds	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	4b2e      	ldr	r3, [pc, #184]	; (8004638 <ip4_output_if_src+0x22c>)
 8004580:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d104      	bne.n	8004592 <ip4_output_if_src+0x186>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8004588:	4b2c      	ldr	r3, [pc, #176]	; (800463c <ip4_output_if_src+0x230>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	60da      	str	r2, [r3, #12]
 8004590:	e003      	b.n	800459a <ip4_output_if_src+0x18e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	69fa      	ldr	r2, [r7, #28]
 80045a2:	4413      	add	r3, r2
 80045a4:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	0c1b      	lsrs	r3, r3, #16
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	4413      	add	r3, r2
 80045b0:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	0c1a      	lsrs	r2, r3, #16
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	4413      	add	r3, r2
 80045bc:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	0c1b      	lsrs	r3, r3, #16
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	43db      	mvns	r3, r3
 80045cc:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	815a      	strh	r2, [r3, #10]
 80045d6:	e00f      	b.n	80045f8 <ip4_output_if_src+0x1ec>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	895b      	ldrh	r3, [r3, #10]
 80045dc:	2b13      	cmp	r3, #19
 80045de:	d802      	bhi.n	80045e6 <ip4_output_if_src+0x1da>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80045e0:	f06f 0301 	mvn.w	r3, #1
 80045e4:	e01c      	b.n	8004620 <ip4_output_if_src+0x214>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	617b      	str	r3, [r7, #20]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 80045f2:	f107 0310 	add.w	r3, r7, #16
 80045f6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	8c1b      	ldrh	r3, [r3, #32]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <ip4_output_if_src+0x206>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	891a      	ldrh	r2, [r3, #8]
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	8c1b      	ldrh	r3, [r3, #32]
 8004608:	429a      	cmp	r2, r3
 800460a:	d902      	bls.n	8004612 <ip4_output_if_src+0x206>
    /* Không hỗ trợ phân mảnh, trả về lỗi hoặc bỏ qua */
    return ERR_BUF;
 800460c:	f06f 0301 	mvn.w	r3, #1
 8004610:	e006      	b.n	8004620 <ip4_output_if_src+0x214>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68f9      	ldr	r1, [r7, #12]
 800461a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800461c:	4798      	blx	r3
 800461e:	4603      	mov	r3, r0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3720      	adds	r7, #32
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	08019b7c 	.word	0x08019b7c
 800462c:	08019ba0 	.word	0x08019ba0
 8004630:	08019bac 	.word	0x08019bac
 8004634:	08019bd4 	.word	0x08019bd4
 8004638:	20000b90 	.word	0x20000b90
 800463c:	0801da38 	.word	0x0801da38

08004640 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004654:	d002      	beq.n	800465c <ip4_addr_isbroadcast_u32+0x1c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800465c:	2301      	movs	r3, #1
 800465e:	e02a      	b.n	80046b6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800466e:	2300      	movs	r3, #0
 8004670:	e021      	b.n	80046b6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	3304      	adds	r3, #4
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	429a      	cmp	r2, r3
 800467c:	d101      	bne.n	8004682 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800467e:	2300      	movs	r3, #0
 8004680:	e019      	b.n	80046b6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_net_eq(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	3304      	adds	r3, #4
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	405a      	eors	r2, r3
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	3308      	adds	r3, #8
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10d      	bne.n	80046b4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	3308      	adds	r3, #8
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	43da      	mvns	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	3308      	adds	r3, #8
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d101      	bne.n	80046b4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80046b4:	2300      	movs	r3, #0
  }
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
	...

080046c4 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80046cc:	2210      	movs	r2, #16
 80046ce:	4904      	ldr	r1, [pc, #16]	; (80046e0 <ip4addr_ntoa+0x1c>)
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f807 	bl	80046e4 <ip4addr_ntoa_r>
 80046d6:	4603      	mov	r3, r0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000b94 	.word	0x20000b94

080046e4 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b08d      	sub	sp, #52	; 0x34
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80046fe:	f107 0318 	add.w	r3, r7, #24
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8004704:	2300      	movs	r3, #0
 8004706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800470a:	e059      	b.n	80047c0 <ip4addr_ntoa_r+0xdc>
    i = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	781a      	ldrb	r2, [r3, #0]
 8004716:	4b33      	ldr	r3, [pc, #204]	; (80047e4 <ip4addr_ntoa_r+0x100>)
 8004718:	fba3 1302 	umull	r1, r3, r3, r2
 800471c:	08d9      	lsrs	r1, r3, #3
 800471e:	460b      	mov	r3, r1
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	4a2d      	ldr	r2, [pc, #180]	; (80047e4 <ip4addr_ntoa_r+0x100>)
 8004730:	fba2 2303 	umull	r2, r3, r2, r3
 8004734:	08db      	lsrs	r3, r3, #3
 8004736:	b2da      	uxtb	r2, r3
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800473c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8004746:	4619      	mov	r1, r3
 8004748:	7ffb      	ldrb	r3, [r7, #31]
 800474a:	3330      	adds	r3, #48	; 0x30
 800474c:	b2da      	uxtb	r2, r3
 800474e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004752:	440b      	add	r3, r1
 8004754:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1d8      	bne.n	8004712 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8004760:	e012      	b.n	8004788 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	623a      	str	r2, [r7, #32]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	4293      	cmp	r3, r2
 800476c:	db01      	blt.n	8004772 <ip4addr_ntoa_r+0x8e>
        return NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	e031      	b.n	80047d6 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8004772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004778:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800477c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004780:	440a      	add	r2, r1
 8004782:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8004786:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8004788:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800478c:	1e5a      	subs	r2, r3, #1
 800478e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e5      	bne.n	8004762 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	623a      	str	r2, [r7, #32]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	4293      	cmp	r3, r2
 80047a0:	db01      	blt.n	80047a6 <ip4addr_ntoa_r+0xc2>
      return NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e017      	b.n	80047d6 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 80047a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047ac:	222e      	movs	r2, #46	; 0x2e
 80047ae:	701a      	strb	r2, [r3, #0]
    ap++;
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	3301      	adds	r3, #1
 80047b4:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80047b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047ba:	3301      	adds	r3, #1
 80047bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80047c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d9a1      	bls.n	800470c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80047c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ca:	3b01      	subs	r3, #1
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d0:	2200      	movs	r2, #0
 80047d2:	701a      	strb	r2, [r3, #0]
  return buf;
 80047d4:	68bb      	ldr	r3, [r7, #8]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3734      	adds	r7, #52	; 0x34
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	cccccccd 	.word	0xcccccccd

080047e8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80047f2:	4b05      	ldr	r3, [pc, #20]	; (8004808 <ptr_to_mem+0x20>)
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	88fb      	ldrh	r3, [r7, #6]
 80047f8:	4413      	add	r3, r2
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20000ba4 	.word	0x20000ba4

0800480c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a05      	ldr	r2, [pc, #20]	; (800482c <mem_to_ptr+0x20>)
 8004818:	6812      	ldr	r2, [r2, #0]
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	b29b      	uxth	r3, r3
}
 800481e:	4618      	mov	r0, r3
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20000ba4 	.word	0x20000ba4

08004830 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004830:	b590      	push	{r4, r7, lr}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004838:	4b4f      	ldr	r3, [pc, #316]	; (8004978 <plug_holes+0x148>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	429a      	cmp	r2, r3
 8004840:	d20b      	bcs.n	800485a <plug_holes+0x2a>
 8004842:	4b4e      	ldr	r3, [pc, #312]	; (800497c <plug_holes+0x14c>)
 8004844:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 8004848:	494d      	ldr	r1, [pc, #308]	; (8004980 <plug_holes+0x150>)
 800484a:	484e      	ldr	r0, [pc, #312]	; (8004984 <plug_holes+0x154>)
 800484c:	f013 faf2 	bl	8017e34 <iprintf>
 8004850:	2000      	movs	r0, #0
 8004852:	f013 fbf1 	bl	8018038 <fflush>
 8004856:	f013 fb36 	bl	8017ec6 <abort>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800485a:	4b4b      	ldr	r3, [pc, #300]	; (8004988 <plug_holes+0x158>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	429a      	cmp	r2, r3
 8004862:	d30b      	bcc.n	800487c <plug_holes+0x4c>
 8004864:	4b45      	ldr	r3, [pc, #276]	; (800497c <plug_holes+0x14c>)
 8004866:	f240 12d3 	movw	r2, #467	; 0x1d3
 800486a:	4948      	ldr	r1, [pc, #288]	; (800498c <plug_holes+0x15c>)
 800486c:	4845      	ldr	r0, [pc, #276]	; (8004984 <plug_holes+0x154>)
 800486e:	f013 fae1 	bl	8017e34 <iprintf>
 8004872:	2000      	movs	r0, #0
 8004874:	f013 fbe0 	bl	8018038 <fflush>
 8004878:	f013 fb25 	bl	8017ec6 <abort>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	791b      	ldrb	r3, [r3, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00b      	beq.n	800489c <plug_holes+0x6c>
 8004884:	4b3d      	ldr	r3, [pc, #244]	; (800497c <plug_holes+0x14c>)
 8004886:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800488a:	4941      	ldr	r1, [pc, #260]	; (8004990 <plug_holes+0x160>)
 800488c:	483d      	ldr	r0, [pc, #244]	; (8004984 <plug_holes+0x154>)
 800488e:	f013 fad1 	bl	8017e34 <iprintf>
 8004892:	2000      	movs	r0, #0
 8004894:	f013 fbd0 	bl	8018038 <fflush>
 8004898:	f013 fb15 	bl	8017ec6 <abort>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80048a4:	d90b      	bls.n	80048be <plug_holes+0x8e>
 80048a6:	4b35      	ldr	r3, [pc, #212]	; (800497c <plug_holes+0x14c>)
 80048a8:	f240 12d7 	movw	r2, #471	; 0x1d7
 80048ac:	4939      	ldr	r1, [pc, #228]	; (8004994 <plug_holes+0x164>)
 80048ae:	4835      	ldr	r0, [pc, #212]	; (8004984 <plug_holes+0x154>)
 80048b0:	f013 fac0 	bl	8017e34 <iprintf>
 80048b4:	2000      	movs	r0, #0
 80048b6:	f013 fbbf 	bl	8018038 <fflush>
 80048ba:	f013 fb04 	bl	8017ec6 <abort>

  nmem = ptr_to_mem(mem->next);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff ff90 	bl	80047e8 <ptr_to_mem>
 80048c8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d024      	beq.n	800491c <plug_holes+0xec>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	791b      	ldrb	r3, [r3, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d120      	bne.n	800491c <plug_holes+0xec>
 80048da:	4b2b      	ldr	r3, [pc, #172]	; (8004988 <plug_holes+0x158>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d01b      	beq.n	800491c <plug_holes+0xec>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80048e4:	4b2c      	ldr	r3, [pc, #176]	; (8004998 <plug_holes+0x168>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d102      	bne.n	80048f4 <plug_holes+0xc4>
      lfree = mem;
 80048ee:	4a2a      	ldr	r2, [pc, #168]	; (8004998 <plug_holes+0x168>)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	881a      	ldrh	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004904:	d00a      	beq.n	800491c <plug_holes+0xec>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff ff6c 	bl	80047e8 <ptr_to_mem>
 8004910:	4604      	mov	r4, r0
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff ff7a 	bl	800480c <mem_to_ptr>
 8004918:	4603      	mov	r3, r0
 800491a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	885b      	ldrh	r3, [r3, #2]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ff61 	bl	80047e8 <ptr_to_mem>
 8004926:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	429a      	cmp	r2, r3
 800492e:	d01f      	beq.n	8004970 <plug_holes+0x140>
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	791b      	ldrb	r3, [r3, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d11b      	bne.n	8004970 <plug_holes+0x140>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004938:	4b17      	ldr	r3, [pc, #92]	; (8004998 <plug_holes+0x168>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	429a      	cmp	r2, r3
 8004940:	d102      	bne.n	8004948 <plug_holes+0x118>
      lfree = pmem;
 8004942:	4a15      	ldr	r2, [pc, #84]	; (8004998 <plug_holes+0x168>)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	881a      	ldrh	r2, [r3, #0]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004958:	d00a      	beq.n	8004970 <plug_holes+0x140>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff ff42 	bl	80047e8 <ptr_to_mem>
 8004964:	4604      	mov	r4, r0
 8004966:	68b8      	ldr	r0, [r7, #8]
 8004968:	f7ff ff50 	bl	800480c <mem_to_ptr>
 800496c:	4603      	mov	r3, r0
 800496e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	bd90      	pop	{r4, r7, pc}
 8004978:	20000ba4 	.word	0x20000ba4
 800497c:	08019c04 	.word	0x08019c04
 8004980:	08019c24 	.word	0x08019c24
 8004984:	08019c3c 	.word	0x08019c3c
 8004988:	20000ba8 	.word	0x20000ba8
 800498c:	08019c64 	.word	0x08019c64
 8004990:	08019c80 	.word	0x08019c80
 8004994:	08019c9c 	.word	0x08019c9c
 8004998:	20000bb0 	.word	0x20000bb0

0800499c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80049a2:	4b1f      	ldr	r3, [pc, #124]	; (8004a20 <mem_init+0x84>)
 80049a4:	4a1f      	ldr	r2, [pc, #124]	; (8004a24 <mem_init+0x88>)
 80049a6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80049a8:	4b1d      	ldr	r3, [pc, #116]	; (8004a20 <mem_init+0x84>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80049b4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80049c2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80049c6:	f7ff ff0f 	bl	80047e8 <ptr_to_mem>
 80049ca:	4602      	mov	r2, r0
 80049cc:	4b16      	ldr	r3, [pc, #88]	; (8004a28 <mem_init+0x8c>)
 80049ce:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80049d0:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <mem_init+0x8c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2201      	movs	r2, #1
 80049d6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80049d8:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <mem_init+0x8c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80049e0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80049e2:	4b11      	ldr	r3, [pc, #68]	; (8004a28 <mem_init+0x8c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80049ea:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <mem_init+0x84>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a0e      	ldr	r2, [pc, #56]	; (8004a2c <mem_init+0x90>)
 80049f2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80049f4:	480e      	ldr	r0, [pc, #56]	; (8004a30 <mem_init+0x94>)
 80049f6:	f7fc fc24 	bl	8001242 <sys_mutex_new>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00b      	beq.n	8004a18 <mem_init+0x7c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8004a00:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <mem_init+0x98>)
 8004a02:	f240 2212 	movw	r2, #530	; 0x212
 8004a06:	490c      	ldr	r1, [pc, #48]	; (8004a38 <mem_init+0x9c>)
 8004a08:	480c      	ldr	r0, [pc, #48]	; (8004a3c <mem_init+0xa0>)
 8004a0a:	f013 fa13 	bl	8017e34 <iprintf>
 8004a0e:	2000      	movs	r0, #0
 8004a10:	f013 fb12 	bl	8018038 <fflush>
 8004a14:	f013 fa57 	bl	8017ec6 <abort>
  }
}
 8004a18:	bf00      	nop
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000ba4 	.word	0x20000ba4
 8004a24:	20000d78 	.word	0x20000d78
 8004a28:	20000ba8 	.word	0x20000ba8
 8004a2c:	20000bb0 	.word	0x20000bb0
 8004a30:	20000bac 	.word	0x20000bac
 8004a34:	08019c04 	.word	0x08019c04
 8004a38:	08019cc8 	.word	0x08019cc8
 8004a3c:	08019c3c 	.word	0x08019c3c

08004a40 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7ff fedf 	bl	800480c <mem_to_ptr>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff fec6 	bl	80047e8 <ptr_to_mem>
 8004a5c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	885b      	ldrh	r3, [r3, #2]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff fec0 	bl	80047e8 <ptr_to_mem>
 8004a68:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a72:	d818      	bhi.n	8004aa6 <mem_link_valid+0x66>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	885b      	ldrh	r3, [r3, #2]
 8004a78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a7c:	d813      	bhi.n	8004aa6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004a82:	8afa      	ldrh	r2, [r7, #22]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d004      	beq.n	8004a92 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	8afa      	ldrh	r2, [r7, #22]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d109      	bne.n	8004aa6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004a92:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <mem_link_valid+0x74>)
 8004a94:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d006      	beq.n	8004aaa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	885b      	ldrh	r3, [r3, #2]
 8004aa0:	8afa      	ldrh	r2, [r7, #22]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d001      	beq.n	8004aaa <mem_link_valid+0x6a>
    return 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e000      	b.n	8004aac <mem_link_valid+0x6c>
  }
  return 1;
 8004aaa:	2301      	movs	r3, #1
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20000ba8 	.word	0x20000ba8

08004ab8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d051      	beq.n	8004b6a <mem_free+0xb2>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3b06      	subs	r3, #6
 8004aca:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004acc:	4b29      	ldr	r3, [pc, #164]	; (8004b74 <mem_free+0xbc>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d306      	bcc.n	8004ae4 <mem_free+0x2c>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f103 020c 	add.w	r2, r3, #12
 8004adc:	4b26      	ldr	r3, [pc, #152]	; (8004b78 <mem_free+0xc0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d90b      	bls.n	8004afc <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004ae4:	4b25      	ldr	r3, [pc, #148]	; (8004b7c <mem_free+0xc4>)
 8004ae6:	f240 2272 	movw	r2, #626	; 0x272
 8004aea:	4925      	ldr	r1, [pc, #148]	; (8004b80 <mem_free+0xc8>)
 8004aec:	4825      	ldr	r0, [pc, #148]	; (8004b84 <mem_free+0xcc>)
 8004aee:	f013 f9a1 	bl	8017e34 <iprintf>
 8004af2:	2000      	movs	r0, #0
 8004af4:	f013 faa0 	bl	8018038 <fflush>
 8004af8:	f013 f9e5 	bl	8017ec6 <abort>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8004afc:	4822      	ldr	r0, [pc, #136]	; (8004b88 <mem_free+0xd0>)
 8004afe:	f7fc fbae 	bl	800125e <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	791b      	ldrb	r3, [r3, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <mem_free+0x6a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004b0a:	4b1c      	ldr	r3, [pc, #112]	; (8004b7c <mem_free+0xc4>)
 8004b0c:	f240 227f 	movw	r2, #639	; 0x27f
 8004b10:	491e      	ldr	r1, [pc, #120]	; (8004b8c <mem_free+0xd4>)
 8004b12:	481c      	ldr	r0, [pc, #112]	; (8004b84 <mem_free+0xcc>)
 8004b14:	f013 f98e 	bl	8017e34 <iprintf>
 8004b18:	2000      	movs	r0, #0
 8004b1a:	f013 fa8d 	bl	8018038 <fflush>
 8004b1e:	f013 f9d2 	bl	8017ec6 <abort>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f7ff ff8c 	bl	8004a40 <mem_link_valid>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <mem_free+0x8e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004b2e:	4b13      	ldr	r3, [pc, #76]	; (8004b7c <mem_free+0xc4>)
 8004b30:	f44f 7222 	mov.w	r2, #648	; 0x288
 8004b34:	4916      	ldr	r1, [pc, #88]	; (8004b90 <mem_free+0xd8>)
 8004b36:	4813      	ldr	r0, [pc, #76]	; (8004b84 <mem_free+0xcc>)
 8004b38:	f013 f97c 	bl	8017e34 <iprintf>
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	f013 fa7b 	bl	8018038 <fflush>
 8004b42:	f013 f9c0 	bl	8017ec6 <abort>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004b4c:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <mem_free+0xdc>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d202      	bcs.n	8004b5c <mem_free+0xa4>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004b56:	4a0f      	ldr	r2, [pc, #60]	; (8004b94 <mem_free+0xdc>)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f7ff fe67 	bl	8004830 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8004b62:	4809      	ldr	r0, [pc, #36]	; (8004b88 <mem_free+0xd0>)
 8004b64:	f7fc fb85 	bl	8001272 <sys_mutex_unlock>
 8004b68:	e000      	b.n	8004b6c <mem_free+0xb4>
    return;
 8004b6a:	bf00      	nop
}
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20000ba4 	.word	0x20000ba4
 8004b78:	20000ba8 	.word	0x20000ba8
 8004b7c:	08019c04 	.word	0x08019c04
 8004b80:	08019ce4 	.word	0x08019ce4
 8004b84:	08019c3c 	.word	0x08019c3c
 8004b88:	20000bac 	.word	0x20000bac
 8004b8c:	08019d00 	.word	0x08019d00
 8004b90:	08019d28 	.word	0x08019d28
 8004b94:	20000bb0 	.word	0x20000bb0

08004b98 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b088      	sub	sp, #32
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004ba4:	887b      	ldrh	r3, [r7, #2]
 8004ba6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004ba8:	8bfb      	ldrh	r3, [r7, #30]
 8004baa:	2b0b      	cmp	r3, #11
 8004bac:	d801      	bhi.n	8004bb2 <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004bae:	230c      	movs	r3, #12
 8004bb0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004bb2:	8bfb      	ldrh	r3, [r7, #30]
 8004bb4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004bb8:	d803      	bhi.n	8004bc2 <mem_trim+0x2a>
 8004bba:	8bfa      	ldrh	r2, [r7, #30]
 8004bbc:	887b      	ldrh	r3, [r7, #2]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d201      	bcs.n	8004bc6 <mem_trim+0x2e>
    return NULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	e0ec      	b.n	8004da0 <mem_trim+0x208>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004bc6:	4b78      	ldr	r3, [pc, #480]	; (8004da8 <mem_trim+0x210>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d304      	bcc.n	8004bda <mem_trim+0x42>
 8004bd0:	4b76      	ldr	r3, [pc, #472]	; (8004dac <mem_trim+0x214>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d30b      	bcc.n	8004bf2 <mem_trim+0x5a>
 8004bda:	4b75      	ldr	r3, [pc, #468]	; (8004db0 <mem_trim+0x218>)
 8004bdc:	f240 22c5 	movw	r2, #709	; 0x2c5
 8004be0:	4974      	ldr	r1, [pc, #464]	; (8004db4 <mem_trim+0x21c>)
 8004be2:	4875      	ldr	r0, [pc, #468]	; (8004db8 <mem_trim+0x220>)
 8004be4:	f013 f926 	bl	8017e34 <iprintf>
 8004be8:	2000      	movs	r0, #0
 8004bea:	f013 fa25 	bl	8018038 <fflush>
 8004bee:	f013 f96a 	bl	8017ec6 <abort>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004bf2:	4b6d      	ldr	r3, [pc, #436]	; (8004da8 <mem_trim+0x210>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d304      	bcc.n	8004c06 <mem_trim+0x6e>
 8004bfc:	4b6b      	ldr	r3, [pc, #428]	; (8004dac <mem_trim+0x214>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d307      	bcc.n	8004c16 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8004c06:	f7fc fbad 	bl	8001364 <sys_arch_protect>
 8004c0a:	60b8      	str	r0, [r7, #8]
 8004c0c:	68b8      	ldr	r0, [r7, #8]
 8004c0e:	f7fc fbb1 	bl	8001374 <sys_arch_unprotect>
    return rmem;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	e0c4      	b.n	8004da0 <mem_trim+0x208>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3b06      	subs	r3, #6
 8004c1a:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004c1c:	69b8      	ldr	r0, [r7, #24]
 8004c1e:	f7ff fdf5 	bl	800480c <mem_to_ptr>
 8004c22:	4603      	mov	r3, r0
 8004c24:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	881a      	ldrh	r2, [r3, #0]
 8004c2a:	8afb      	ldrh	r3, [r7, #22]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b06      	subs	r3, #6
 8004c32:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004c34:	8bfa      	ldrh	r2, [r7, #30]
 8004c36:	8abb      	ldrh	r3, [r7, #20]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d90b      	bls.n	8004c54 <mem_trim+0xbc>
 8004c3c:	4b5c      	ldr	r3, [pc, #368]	; (8004db0 <mem_trim+0x218>)
 8004c3e:	f240 22d7 	movw	r2, #727	; 0x2d7
 8004c42:	495e      	ldr	r1, [pc, #376]	; (8004dbc <mem_trim+0x224>)
 8004c44:	485c      	ldr	r0, [pc, #368]	; (8004db8 <mem_trim+0x220>)
 8004c46:	f013 f8f5 	bl	8017e34 <iprintf>
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	f013 f9f4 	bl	8018038 <fflush>
 8004c50:	f013 f939 	bl	8017ec6 <abort>
  if (newsize > size) {
 8004c54:	8bfa      	ldrh	r2, [r7, #30]
 8004c56:	8abb      	ldrh	r3, [r7, #20]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d901      	bls.n	8004c60 <mem_trim+0xc8>
    /* not supported */
    return NULL;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e09f      	b.n	8004da0 <mem_trim+0x208>
  }
  if (newsize == size) {
 8004c60:	8bfa      	ldrh	r2, [r7, #30]
 8004c62:	8abb      	ldrh	r3, [r7, #20]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d101      	bne.n	8004c6c <mem_trim+0xd4>
    /* No change in size, simply return */
    return rmem;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	e099      	b.n	8004da0 <mem_trim+0x208>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8004c6c:	4854      	ldr	r0, [pc, #336]	; (8004dc0 <mem_trim+0x228>)
 8004c6e:	f7fc faf6 	bl	800125e <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff fdb6 	bl	80047e8 <ptr_to_mem>
 8004c7c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	791b      	ldrb	r3, [r3, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d144      	bne.n	8004d10 <mem_trim+0x178>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c8e:	d10b      	bne.n	8004ca8 <mem_trim+0x110>
 8004c90:	4b47      	ldr	r3, [pc, #284]	; (8004db0 <mem_trim+0x218>)
 8004c92:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8004c96:	494b      	ldr	r1, [pc, #300]	; (8004dc4 <mem_trim+0x22c>)
 8004c98:	4847      	ldr	r0, [pc, #284]	; (8004db8 <mem_trim+0x220>)
 8004c9a:	f013 f8cb 	bl	8017e34 <iprintf>
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f013 f9ca 	bl	8018038 <fflush>
 8004ca4:	f013 f90f 	bl	8017ec6 <abort>
    /* remember the old next pointer */
    next = mem2->next;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	81fb      	strh	r3, [r7, #14]
    /* create new struct mem which is moved directly after the shrunk mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004cae:	8afa      	ldrh	r2, [r7, #22]
 8004cb0:	8bfb      	ldrh	r3, [r7, #30]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3306      	adds	r3, #6
 8004cb8:	81bb      	strh	r3, [r7, #12]
    if (lfree == mem2) {
 8004cba:	4b43      	ldr	r3, [pc, #268]	; (8004dc8 <mem_trim+0x230>)
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d106      	bne.n	8004cd2 <mem_trim+0x13a>
      lfree = ptr_to_mem(ptr2);
 8004cc4:	89bb      	ldrh	r3, [r7, #12]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff fd8e 	bl	80047e8 <ptr_to_mem>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	4b3e      	ldr	r3, [pc, #248]	; (8004dc8 <mem_trim+0x230>)
 8004cd0:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004cd2:	89bb      	ldrh	r3, [r7, #12]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff fd87 	bl	80047e8 <ptr_to_mem>
 8004cda:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	89fa      	ldrh	r2, [r7, #14]
 8004ce6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	8afa      	ldrh	r2, [r7, #22]
 8004cec:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	89ba      	ldrh	r2, [r7, #12]
 8004cf2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004cfc:	d04c      	beq.n	8004d98 <mem_trim+0x200>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff fd70 	bl	80047e8 <ptr_to_mem>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	89bb      	ldrh	r3, [r7, #12]
 8004d0c:	8053      	strh	r3, [r2, #2]
 8004d0e:	e043      	b.n	8004d98 <mem_trim+0x200>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004d10:	8bfb      	ldrh	r3, [r7, #30]
 8004d12:	f103 0212 	add.w	r2, r3, #18
 8004d16:	8abb      	ldrh	r3, [r7, #20]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d83d      	bhi.n	8004d98 <mem_trim+0x200>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004d1c:	8afa      	ldrh	r2, [r7, #22]
 8004d1e:	8bfb      	ldrh	r3, [r7, #30]
 8004d20:	4413      	add	r3, r2
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3306      	adds	r3, #6
 8004d26:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d30:	d10b      	bne.n	8004d4a <mem_trim+0x1b2>
 8004d32:	4b1f      	ldr	r3, [pc, #124]	; (8004db0 <mem_trim+0x218>)
 8004d34:	f240 3209 	movw	r2, #777	; 0x309
 8004d38:	4922      	ldr	r1, [pc, #136]	; (8004dc4 <mem_trim+0x22c>)
 8004d3a:	481f      	ldr	r0, [pc, #124]	; (8004db8 <mem_trim+0x220>)
 8004d3c:	f013 f87a 	bl	8017e34 <iprintf>
 8004d40:	2000      	movs	r0, #0
 8004d42:	f013 f979 	bl	8018038 <fflush>
 8004d46:	f013 f8be 	bl	8017ec6 <abort>
    mem2 = ptr_to_mem(ptr2);
 8004d4a:	89bb      	ldrh	r3, [r7, #12]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff fd4b 	bl	80047e8 <ptr_to_mem>
 8004d52:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004d54:	4b1c      	ldr	r3, [pc, #112]	; (8004dc8 <mem_trim+0x230>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d202      	bcs.n	8004d64 <mem_trim+0x1cc>
      lfree = mem2;
 8004d5e:	4a1a      	ldr	r2, [pc, #104]	; (8004dc8 <mem_trim+0x230>)
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2200      	movs	r2, #0
 8004d68:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	881a      	ldrh	r2, [r3, #0]
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	8afa      	ldrh	r2, [r7, #22]
 8004d76:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	89ba      	ldrh	r2, [r7, #12]
 8004d7c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d86:	d007      	beq.n	8004d98 <mem_trim+0x200>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff fd2b 	bl	80047e8 <ptr_to_mem>
 8004d92:	4602      	mov	r2, r0
 8004d94:	89bb      	ldrh	r3, [r7, #12]
 8004d96:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8004d98:	4809      	ldr	r0, [pc, #36]	; (8004dc0 <mem_trim+0x228>)
 8004d9a:	f7fc fa6a 	bl	8001272 <sys_mutex_unlock>
  return rmem;
 8004d9e:	687b      	ldr	r3, [r7, #4]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3720      	adds	r7, #32
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	20000ba4 	.word	0x20000ba4
 8004dac:	20000ba8 	.word	0x20000ba8
 8004db0:	08019c04 	.word	0x08019c04
 8004db4:	08019d5c 	.word	0x08019d5c
 8004db8:	08019c3c 	.word	0x08019c3c
 8004dbc:	08019d74 	.word	0x08019d74
 8004dc0:	20000bac 	.word	0x20000bac
 8004dc4:	08019d94 	.word	0x08019d94
 8004dc8:	20000bb0 	.word	0x20000bb0

08004dcc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004dd6:	88fb      	ldrh	r3, [r7, #6]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <mem_malloc+0x14>
    return NULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e0d3      	b.n	8004f88 <mem_malloc+0x1bc>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004de0:	88fb      	ldrh	r3, [r7, #6]
 8004de2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004de4:	8bbb      	ldrh	r3, [r7, #28]
 8004de6:	2b0b      	cmp	r3, #11
 8004de8:	d801      	bhi.n	8004dee <mem_malloc+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004dea:	230c      	movs	r3, #12
 8004dec:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004dee:	8bbb      	ldrh	r3, [r7, #28]
 8004df0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004df4:	d803      	bhi.n	8004dfe <mem_malloc+0x32>
 8004df6:	8bba      	ldrh	r2, [r7, #28]
 8004df8:	88fb      	ldrh	r3, [r7, #6]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d201      	bcs.n	8004e02 <mem_malloc+0x36>
    return NULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e0c2      	b.n	8004f88 <mem_malloc+0x1bc>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8004e02:	4863      	ldr	r0, [pc, #396]	; (8004f90 <mem_malloc+0x1c4>)
 8004e04:	f7fc fa2b 	bl	800125e <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004e08:	4b62      	ldr	r3, [pc, #392]	; (8004f94 <mem_malloc+0x1c8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff fcfd 	bl	800480c <mem_to_ptr>
 8004e12:	4603      	mov	r3, r0
 8004e14:	83fb      	strh	r3, [r7, #30]
 8004e16:	e0ac      	b.n	8004f72 <mem_malloc+0x1a6>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004e18:	8bfb      	ldrh	r3, [r7, #30]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff fce4 	bl	80047e8 <ptr_to_mem>
 8004e20:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	791b      	ldrb	r3, [r3, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f040 809c 	bne.w	8004f64 <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	8bfb      	ldrh	r3, [r7, #30]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	1f9a      	subs	r2, r3, #6
 8004e38:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	f0c0 8092 	bcc.w	8004f64 <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	8bfb      	ldrh	r3, [r7, #30]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	1f9a      	subs	r2, r3, #6
 8004e4c:	8bbb      	ldrh	r3, [r7, #28]
 8004e4e:	3312      	adds	r3, #18
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d338      	bcc.n	8004ec6 <mem_malloc+0xfa>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004e54:	8bfa      	ldrh	r2, [r7, #30]
 8004e56:	8bbb      	ldrh	r3, [r7, #28]
 8004e58:	4413      	add	r3, r2
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3306      	adds	r3, #6
 8004e5e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004e60:	8a7b      	ldrh	r3, [r7, #18]
 8004e62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e66:	d10b      	bne.n	8004e80 <mem_malloc+0xb4>
 8004e68:	4b4b      	ldr	r3, [pc, #300]	; (8004f98 <mem_malloc+0x1cc>)
 8004e6a:	f240 327a 	movw	r2, #890	; 0x37a
 8004e6e:	494b      	ldr	r1, [pc, #300]	; (8004f9c <mem_malloc+0x1d0>)
 8004e70:	484b      	ldr	r0, [pc, #300]	; (8004fa0 <mem_malloc+0x1d4>)
 8004e72:	f012 ffdf 	bl	8017e34 <iprintf>
 8004e76:	2000      	movs	r0, #0
 8004e78:	f013 f8de 	bl	8018038 <fflush>
 8004e7c:	f013 f823 	bl	8017ec6 <abort>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004e80:	8a7b      	ldrh	r3, [r7, #18]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff fcb0 	bl	80047e8 <ptr_to_mem>
 8004e88:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	881a      	ldrh	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8bfa      	ldrh	r2, [r7, #30]
 8004e9c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	8a7a      	ldrh	r2, [r7, #18]
 8004ea2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004eb2:	d00b      	beq.n	8004ecc <mem_malloc+0x100>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fc95 	bl	80047e8 <ptr_to_mem>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	8a7b      	ldrh	r3, [r7, #18]
 8004ec2:	8053      	strh	r3, [r2, #2]
 8004ec4:	e002      	b.n	8004ecc <mem_malloc+0x100>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004ecc:	4b31      	ldr	r3, [pc, #196]	; (8004f94 <mem_malloc+0x1c8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d12c      	bne.n	8004f30 <mem_malloc+0x164>
          struct mem *cur = lfree;
 8004ed6:	4b2f      	ldr	r3, [pc, #188]	; (8004f94 <mem_malloc+0x1c8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004edc:	e005      	b.n	8004eea <mem_malloc+0x11e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff fc80 	bl	80047e8 <ptr_to_mem>
 8004ee8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	791b      	ldrb	r3, [r3, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d004      	beq.n	8004efc <mem_malloc+0x130>
 8004ef2:	4b2c      	ldr	r3, [pc, #176]	; (8004fa4 <mem_malloc+0x1d8>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d1f0      	bne.n	8004ede <mem_malloc+0x112>
          }
          lfree = cur;
 8004efc:	4a25      	ldr	r2, [pc, #148]	; (8004f94 <mem_malloc+0x1c8>)
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004f02:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <mem_malloc+0x1c8>)
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4b27      	ldr	r3, [pc, #156]	; (8004fa4 <mem_malloc+0x1d8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d010      	beq.n	8004f30 <mem_malloc+0x164>
 8004f0e:	4b21      	ldr	r3, [pc, #132]	; (8004f94 <mem_malloc+0x1c8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	791b      	ldrb	r3, [r3, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00b      	beq.n	8004f30 <mem_malloc+0x164>
 8004f18:	4b1f      	ldr	r3, [pc, #124]	; (8004f98 <mem_malloc+0x1cc>)
 8004f1a:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8004f1e:	4922      	ldr	r1, [pc, #136]	; (8004fa8 <mem_malloc+0x1dc>)
 8004f20:	481f      	ldr	r0, [pc, #124]	; (8004fa0 <mem_malloc+0x1d4>)
 8004f22:	f012 ff87 	bl	8017e34 <iprintf>
 8004f26:	2000      	movs	r0, #0
 8004f28:	f013 f886 	bl	8018038 <fflush>
 8004f2c:	f012 ffcb 	bl	8017ec6 <abort>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8004f30:	4817      	ldr	r0, [pc, #92]	; (8004f90 <mem_malloc+0x1c4>)
 8004f32:	f7fc f99e 	bl	8001272 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004f36:	8bba      	ldrh	r2, [r7, #28]
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3306      	adds	r3, #6
 8004f3e:	4a19      	ldr	r2, [pc, #100]	; (8004fa4 <mem_malloc+0x1d8>)
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d90b      	bls.n	8004f5e <mem_malloc+0x192>
 8004f46:	4b14      	ldr	r3, [pc, #80]	; (8004f98 <mem_malloc+0x1cc>)
 8004f48:	f240 32ad 	movw	r2, #941	; 0x3ad
 8004f4c:	4917      	ldr	r1, [pc, #92]	; (8004fac <mem_malloc+0x1e0>)
 8004f4e:	4814      	ldr	r0, [pc, #80]	; (8004fa0 <mem_malloc+0x1d4>)
 8004f50:	f012 ff70 	bl	8017e34 <iprintf>
 8004f54:	2000      	movs	r0, #0
 8004f56:	f013 f86f 	bl	8018038 <fflush>
 8004f5a:	f012 ffb4 	bl	8017ec6 <abort>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	3306      	adds	r3, #6
 8004f62:	e011      	b.n	8004f88 <mem_malloc+0x1bc>
         ptr = ptr_to_mem(ptr)->next) {
 8004f64:	8bfb      	ldrh	r3, [r7, #30]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fc3e 	bl	80047e8 <ptr_to_mem>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004f72:	8bfa      	ldrh	r2, [r7, #30]
 8004f74:	8bbb      	ldrh	r3, [r7, #28]
 8004f76:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	f4ff af4c 	bcc.w	8004e18 <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8004f80:	4803      	ldr	r0, [pc, #12]	; (8004f90 <mem_malloc+0x1c4>)
 8004f82:	f7fc f976 	bl	8001272 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3720      	adds	r7, #32
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20000bac 	.word	0x20000bac
 8004f94:	20000bb0 	.word	0x20000bb0
 8004f98:	08019c04 	.word	0x08019c04
 8004f9c:	08019d94 	.word	0x08019d94
 8004fa0:	08019c3c 	.word	0x08019c3c
 8004fa4:	20000ba8 	.word	0x20000ba8
 8004fa8:	08019da8 	.word	0x08019da8
 8004fac:	08019dc4 	.word	0x08019dc4

08004fb0 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	460a      	mov	r2, r1
 8004fba:	80fb      	strh	r3, [r7, #6]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	88ba      	ldrh	r2, [r7, #4]
 8004fc4:	fb02 f303 	mul.w	r3, r2, r3
 8004fc8:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d001      	beq.n	8004fda <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e00e      	b.n	8004ff8 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff fef4 	bl	8004dcc <mem_malloc>
 8004fe4:	60b8      	str	r0, [r7, #8]
  if (p) {
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d004      	beq.n	8004ff6 <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	2100      	movs	r1, #0
 8004ff0:	68b8      	ldr	r0, [r7, #8]
 8004ff2:	f013 f966 	bl	80182c2 <memset>
  }
  return p;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	e011      	b.n	8005040 <memp_init_pool+0x40>
    memp->next = *desc->tab;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	889b      	ldrh	r3, [r3, #4]
 8005032:	461a      	mov	r2, r3
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	4413      	add	r3, r2
 8005038:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3301      	adds	r3, #1
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	88db      	ldrh	r3, [r3, #6]
 8005044:	461a      	mov	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	429a      	cmp	r2, r3
 800504a:	dce7      	bgt.n	800501c <memp_init_pool+0x1c>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800504c:	bf00      	nop
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800505e:	2300      	movs	r3, #0
 8005060:	80fb      	strh	r3, [r7, #6]
 8005062:	e009      	b.n	8005078 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005064:	88fb      	ldrh	r3, [r7, #6]
 8005066:	4a08      	ldr	r2, [pc, #32]	; (8005088 <memp_init+0x30>)
 8005068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff ffc7 	bl	8005000 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	3301      	adds	r3, #1
 8005076:	80fb      	strh	r3, [r7, #6]
 8005078:	88fb      	ldrh	r3, [r7, #6]
 800507a:	2b0c      	cmp	r3, #12
 800507c:	d9f2      	bls.n	8005064 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800507e:	bf00      	nop
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	0801db10 	.word	0x0801db10

0800508c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8005094:	f7fc f966 	bl	8001364 <sys_arch_protect>
 8005098:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d009      	beq.n	80050bc <do_memp_malloc_pool+0x30>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	601a      	str	r2, [r3, #0]
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f7fc f95e 	bl	8001374 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	e003      	b.n	80050c4 <do_memp_malloc_pool+0x38>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7fc f959 	bl	8001374 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10b      	bne.n	80050f2 <memp_malloc_pool+0x26>
 80050da:	4b0c      	ldr	r3, [pc, #48]	; (800510c <memp_malloc_pool+0x40>)
 80050dc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80050e0:	490b      	ldr	r1, [pc, #44]	; (8005110 <memp_malloc_pool+0x44>)
 80050e2:	480c      	ldr	r0, [pc, #48]	; (8005114 <memp_malloc_pool+0x48>)
 80050e4:	f012 fea6 	bl	8017e34 <iprintf>
 80050e8:	2000      	movs	r0, #0
 80050ea:	f012 ffa5 	bl	8018038 <fflush>
 80050ee:	f012 feea 	bl	8017ec6 <abort>
  if (desc == NULL) {
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <memp_malloc_pool+0x30>
    return NULL;
 80050f8:	2300      	movs	r3, #0
 80050fa:	e003      	b.n	8005104 <memp_malloc_pool+0x38>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff ffc5 	bl	800508c <do_memp_malloc_pool>
 8005102:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	08019e88 	.word	0x08019e88
 8005110:	08019ea8 	.word	0x08019ea8
 8005114:	08019ebc 	.word	0x08019ebc

08005118 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	2b0c      	cmp	r3, #12
 8005126:	d908      	bls.n	800513a <memp_malloc+0x22>
 8005128:	4b0a      	ldr	r3, [pc, #40]	; (8005154 <memp_malloc+0x3c>)
 800512a:	f240 1257 	movw	r2, #343	; 0x157
 800512e:	490a      	ldr	r1, [pc, #40]	; (8005158 <memp_malloc+0x40>)
 8005130:	480a      	ldr	r0, [pc, #40]	; (800515c <memp_malloc+0x44>)
 8005132:	f7fc f8de 	bl	80012f2 <lwip_win32_platform_diag>
 8005136:	2300      	movs	r3, #0
 8005138:	e008      	b.n	800514c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	4a08      	ldr	r2, [pc, #32]	; (8005160 <memp_malloc+0x48>)
 800513e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff ffa2 	bl	800508c <do_memp_malloc_pool>
 8005148:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800514a:	68fb      	ldr	r3, [r7, #12]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	08019e88 	.word	0x08019e88
 8005158:	08019ee4 	.word	0x08019ee4
 800515c:	08019ebc 	.word	0x08019ebc
 8005160:	0801db10 	.word	0x0801db10

08005164 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8005172:	f7fc f8f7 	bl	8001364 <sys_arch_protect>
 8005176:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800518a:	68b8      	ldr	r0, [r7, #8]
 800518c:	f7fc f8f2 	bl	8001374 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8005190:	bf00      	nop
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10b      	bne.n	80051c0 <memp_free_pool+0x28>
 80051a8:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <memp_free_pool+0x48>)
 80051aa:	f240 1295 	movw	r2, #405	; 0x195
 80051ae:	490d      	ldr	r1, [pc, #52]	; (80051e4 <memp_free_pool+0x4c>)
 80051b0:	480d      	ldr	r0, [pc, #52]	; (80051e8 <memp_free_pool+0x50>)
 80051b2:	f012 fe3f 	bl	8017e34 <iprintf>
 80051b6:	2000      	movs	r0, #0
 80051b8:	f012 ff3e 	bl	8018038 <fflush>
 80051bc:	f012 fe83 	bl	8017ec6 <abort>
  if ((desc == NULL) || (mem == NULL)) {
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <memp_free_pool+0x3e>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <memp_free_pool+0x3e>
    return;
  }

  do_memp_free_pool(desc, mem);
 80051cc:	6839      	ldr	r1, [r7, #0]
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff ffc8 	bl	8005164 <do_memp_free_pool>
 80051d4:	e000      	b.n	80051d8 <memp_free_pool+0x40>
    return;
 80051d6:	bf00      	nop
}
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	08019e88 	.word	0x08019e88
 80051e4:	08019ea8 	.word	0x08019ea8
 80051e8:	08019ebc 	.word	0x08019ebc

080051ec <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	6039      	str	r1, [r7, #0]
 80051f6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	2b0c      	cmp	r3, #12
 80051fc:	d907      	bls.n	800520e <memp_free+0x22>
 80051fe:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <memp_free+0x44>)
 8005200:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005204:	490b      	ldr	r1, [pc, #44]	; (8005234 <memp_free+0x48>)
 8005206:	480c      	ldr	r0, [pc, #48]	; (8005238 <memp_free+0x4c>)
 8005208:	f7fc f873 	bl	80012f2 <lwip_win32_platform_diag>
 800520c:	e00c      	b.n	8005228 <memp_free+0x3c>

  if (mem == NULL) {
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d008      	beq.n	8005226 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	4a09      	ldr	r2, [pc, #36]	; (800523c <memp_free+0x50>)
 8005218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800521c:	6839      	ldr	r1, [r7, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff ffa0 	bl	8005164 <do_memp_free_pool>
 8005224:	e000      	b.n	8005228 <memp_free+0x3c>
    return;
 8005226:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	08019e88 	.word	0x08019e88
 8005234:	08019f04 	.word	0x08019f04
 8005238:	08019ebc 	.word	0x08019ebc
 800523c:	0801db10 	.word	0x0801db10

08005240 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005244:	bf00      	nop
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
	...

08005250 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d108      	bne.n	8005276 <netif_add+0x26>
 8005264:	4b5b      	ldr	r3, [pc, #364]	; (80053d4 <netif_add+0x184>)
 8005266:	f44f 7299 	mov.w	r2, #306	; 0x132
 800526a:	495b      	ldr	r1, [pc, #364]	; (80053d8 <netif_add+0x188>)
 800526c:	485b      	ldr	r0, [pc, #364]	; (80053dc <netif_add+0x18c>)
 800526e:	f7fc f840 	bl	80012f2 <lwip_win32_platform_diag>
 8005272:	2300      	movs	r3, #0
 8005274:	e0a9      	b.n	80053ca <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	d108      	bne.n	800528e <netif_add+0x3e>
 800527c:	4b55      	ldr	r3, [pc, #340]	; (80053d4 <netif_add+0x184>)
 800527e:	f240 1233 	movw	r2, #307	; 0x133
 8005282:	4957      	ldr	r1, [pc, #348]	; (80053e0 <netif_add+0x190>)
 8005284:	4855      	ldr	r0, [pc, #340]	; (80053dc <netif_add+0x18c>)
 8005286:	f7fc f834 	bl	80012f2 <lwip_win32_platform_diag>
 800528a:	2300      	movs	r3, #0
 800528c:	e09d      	b.n	80053ca <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005294:	4b53      	ldr	r3, [pc, #332]	; (80053e4 <netif_add+0x194>)
 8005296:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800529e:	4b51      	ldr	r3, [pc, #324]	; (80053e4 <netif_add+0x194>)
 80052a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80052a8:	4b4e      	ldr	r3, [pc, #312]	; (80053e4 <netif_add+0x194>)
 80052aa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4a49      	ldr	r2, [pc, #292]	; (80053e8 <netif_add+0x198>)
 80052c2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */

  /* remember netif specific state information data */
  netif->state = state;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a3a      	ldr	r2, [r7, #32]
 80052d6:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 80052d8:	4b44      	ldr	r3, [pc, #272]	; (80053ec <netif_add+0x19c>)
 80052da:	781a      	ldrb	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e6:	611a      	str	r2, [r3, #16]
  netif->reschedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
#endif /* ENABLE_LOOPBACK */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	68b9      	ldr	r1, [r7, #8]
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 f928 	bl	8005544 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	4798      	blx	r3
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <netif_add+0xb4>
    return NULL;
 8005300:	2300      	movs	r3, #0
 8005302:	e062      	b.n	80053ca <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800530a:	2bff      	cmp	r3, #255	; 0xff
 800530c:	d103      	bne.n	8005316 <netif_add+0xc6>
        netif->num = 0;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800531a:	4b35      	ldr	r3, [pc, #212]	; (80053f0 <netif_add+0x1a0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	e035      	b.n	800538e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	429a      	cmp	r2, r3
 8005328:	d10b      	bne.n	8005342 <netif_add+0xf2>
 800532a:	4b2a      	ldr	r3, [pc, #168]	; (80053d4 <netif_add+0x184>)
 800532c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005330:	4930      	ldr	r1, [pc, #192]	; (80053f4 <netif_add+0x1a4>)
 8005332:	482a      	ldr	r0, [pc, #168]	; (80053dc <netif_add+0x18c>)
 8005334:	f012 fd7e 	bl	8017e34 <iprintf>
 8005338:	2000      	movs	r0, #0
 800533a:	f012 fe7d 	bl	8018038 <fflush>
 800533e:	f012 fdc2 	bl	8017ec6 <abort>
        num_netifs++;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	3301      	adds	r3, #1
 8005346:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	2bff      	cmp	r3, #255	; 0xff
 800534c:	dd0b      	ble.n	8005366 <netif_add+0x116>
 800534e:	4b21      	ldr	r3, [pc, #132]	; (80053d4 <netif_add+0x184>)
 8005350:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8005354:	4928      	ldr	r1, [pc, #160]	; (80053f8 <netif_add+0x1a8>)
 8005356:	4821      	ldr	r0, [pc, #132]	; (80053dc <netif_add+0x18c>)
 8005358:	f012 fd6c 	bl	8017e34 <iprintf>
 800535c:	2000      	movs	r0, #0
 800535e:	f012 fe6b 	bl	8018038 <fflush>
 8005362:	f012 fdb0 	bl	8017ec6 <abort>
        if (netif2->num == netif->num) {
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005372:	429a      	cmp	r2, r3
 8005374:	d108      	bne.n	8005388 <netif_add+0x138>
          netif->num++;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800537c:	3301      	adds	r3, #1
 800537e:	b2da      	uxtb	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 8005386:	e005      	b.n	8005394 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1c6      	bne.n	8005322 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1b4      	bne.n	8005304 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80053a0:	2bfe      	cmp	r3, #254	; 0xfe
 80053a2:	d103      	bne.n	80053ac <netif_add+0x15c>
    netif_num = 0;
 80053a4:	4b11      	ldr	r3, [pc, #68]	; (80053ec <netif_add+0x19c>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	e006      	b.n	80053ba <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80053b2:	3301      	adds	r3, #1
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	4b0d      	ldr	r3, [pc, #52]	; (80053ec <netif_add+0x19c>)
 80053b8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80053ba:	4b0d      	ldr	r3, [pc, #52]	; (80053f0 <netif_add+0x1a0>)
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80053c2:	4a0b      	ldr	r2, [pc, #44]	; (80053f0 <netif_add+0x1a0>)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80053c8:	68fb      	ldr	r3, [r7, #12]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	08019f20 	.word	0x08019f20
 80053d8:	08019fa0 	.word	0x08019fa0
 80053dc:	08019f5c 	.word	0x08019f5c
 80053e0:	08019fbc 	.word	0x08019fbc
 80053e4:	0801da38 	.word	0x0801da38
 80053e8:	0800575d 	.word	0x0800575d
 80053ec:	20000be8 	.word	0x20000be8
 80053f0:	2000402c 	.word	0x2000402c
 80053f4:	08019fe0 	.word	0x08019fe0
 80053f8:	08019ff4 	.word	0x08019ff4

080053fc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005406:	6839      	ldr	r1, [r7, #0]
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f003 f9ff 	bl	800880c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f009 f845 	bl	800e4a0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005416:	bf00      	nop
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10b      	bne.n	800544a <netif_do_set_ipaddr+0x2a>
 8005432:	4b22      	ldr	r3, [pc, #136]	; (80054bc <netif_do_set_ipaddr+0x9c>)
 8005434:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8005438:	4921      	ldr	r1, [pc, #132]	; (80054c0 <netif_do_set_ipaddr+0xa0>)
 800543a:	4822      	ldr	r0, [pc, #136]	; (80054c4 <netif_do_set_ipaddr+0xa4>)
 800543c:	f012 fcfa 	bl	8017e34 <iprintf>
 8005440:	2000      	movs	r0, #0
 8005442:	f012 fdf9 	bl	8018038 <fflush>
 8005446:	f012 fd3e 	bl	8017ec6 <abort>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10b      	bne.n	8005468 <netif_do_set_ipaddr+0x48>
 8005450:	4b1a      	ldr	r3, [pc, #104]	; (80054bc <netif_do_set_ipaddr+0x9c>)
 8005452:	f240 12dd 	movw	r2, #477	; 0x1dd
 8005456:	491a      	ldr	r1, [pc, #104]	; (80054c0 <netif_do_set_ipaddr+0xa0>)
 8005458:	481a      	ldr	r0, [pc, #104]	; (80054c4 <netif_do_set_ipaddr+0xa4>)
 800545a:	f012 fceb 	bl	8017e34 <iprintf>
 800545e:	2000      	movs	r0, #0
 8005460:	f012 fdea 	bl	8018038 <fflush>
 8005464:	f012 fd2f 	bl	8017ec6 <abort>

  /* address is actually being changed? */
  if (ip4_addr_eq(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	3304      	adds	r3, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d01c      	beq.n	80054b0 <netif_do_set_ipaddr+0x90>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3304      	adds	r3, #4
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005486:	f107 0314 	add.w	r3, r7, #20
 800548a:	4619      	mov	r1, r3
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff ffb5 	bl	80053fc <netif_do_ip_addr_changed>
#endif /* LWIP_ACD */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <netif_do_set_ipaddr+0x7e>
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	e000      	b.n	80054a0 <netif_do_set_ipaddr+0x80>
 800549e:	2300      	movs	r3, #0
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80054a4:	2101      	movs	r1, #1
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 f8d2 	bl	8005650 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80054ac:	2301      	movs	r3, #1
 80054ae:	e000      	b.n	80054b2 <netif_do_set_ipaddr+0x92>
  }
  return 0; /* address unchanged */
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	08019f20 	.word	0x08019f20
 80054c0:	0801a024 	.word	0x0801a024
 80054c4:	08019f5c 	.word	0x08019f5c

080054c8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(netmask, netif_ip4_netmask(netif)) == 0) {
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3308      	adds	r3, #8
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d00a      	beq.n	80054f8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <netif_do_set_netmask+0x26>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	e000      	b.n	80054f0 <netif_do_set_netmask+0x28>
 80054ee:	2300      	movs	r3, #0
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005506:	b480      	push	{r7}
 8005508:	b085      	sub	sp, #20
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(gw, netif_ip4_gw(netif)) == 0) {
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	330c      	adds	r3, #12
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	429a      	cmp	r2, r3
 800551e:	d00a      	beq.n	8005536 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <netif_do_set_gw+0x26>
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	e000      	b.n	800552e <netif_do_set_gw+0x28>
 800552c:	2300      	movs	r3, #0
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005556:	2300      	movs	r3, #0
 8005558:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005560:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <netif_set_addr+0x90>)
 8005562:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800556a:	4b1a      	ldr	r3, [pc, #104]	; (80055d4 <netif_set_addr+0x90>)
 800556c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005574:	4b17      	ldr	r3, [pc, #92]	; (80055d4 <netif_set_addr+0x90>)
 8005576:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <netif_set_addr+0x42>
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <netif_set_addr+0x46>
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <netif_set_addr+0x48>
 800558a:	2300      	movs	r3, #0
 800558c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d006      	beq.n	80055a2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005594:	f107 0310 	add.w	r3, r7, #16
 8005598:	461a      	mov	r2, r3
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f7ff ff3f 	bl	8005420 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f7ff ff8e 	bl	80054c8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	6839      	ldr	r1, [r7, #0]
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f7ff ffa8 	bl	8005506 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d106      	bne.n	80055ca <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80055bc:	f107 0310 	add.w	r3, r7, #16
 80055c0:	461a      	mov	r2, r3
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f7ff ff2b 	bl	8005420 <netif_do_set_ipaddr>
  }
  if (change_reason != LWIP_NSC_NONE) {
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80055ca:	bf00      	nop
 80055cc:	3720      	adds	r7, #32
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	0801da38 	.word	0x0801da38

080055d8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80055e0:	4a04      	ldr	r2, [pc, #16]	; (80055f4 <netif_set_default+0x1c>)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	20004030 	.word	0x20004030

080055f8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d107      	bne.n	8005616 <netif_set_up+0x1e>
 8005606:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <netif_set_up+0x4c>)
 8005608:	f240 326b 	movw	r2, #875	; 0x36b
 800560c:	490e      	ldr	r1, [pc, #56]	; (8005648 <netif_set_up+0x50>)
 800560e:	480f      	ldr	r0, [pc, #60]	; (800564c <netif_set_up+0x54>)
 8005610:	f7fb fe6f 	bl	80012f2 <lwip_win32_platform_diag>
 8005614:	e013      	b.n	800563e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10c      	bne.n	800563e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	b2da      	uxtb	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005636:	2103      	movs	r1, #3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f809 	bl	8005650 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	08019f20 	.word	0x08019f20
 8005648:	0801a094 	.word	0x0801a094
 800564c:	08019f5c 	.word	0x08019f5c

08005650 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10b      	bne.n	800567a <netif_issue_reports+0x2a>
 8005662:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <netif_issue_reports+0x58>)
 8005664:	f44f 7262 	mov.w	r2, #904	; 0x388
 8005668:	4910      	ldr	r1, [pc, #64]	; (80056ac <netif_issue_reports+0x5c>)
 800566a:	4811      	ldr	r0, [pc, #68]	; (80056b0 <netif_issue_reports+0x60>)
 800566c:	f012 fbe2 	bl	8017e34 <iprintf>
 8005670:	2000      	movs	r0, #0
 8005672:	f012 fce1 	bl	8018038 <fflush>
 8005676:	f012 fc26 	bl	8017ec6 <abort>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00b      	beq.n	80056a0 <netif_issue_reports+0x50>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800568e:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005692:	2b00      	cmp	r3, #0
 8005694:	d004      	beq.n	80056a0 <netif_issue_reports+0x50>
    return;
  }
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005696:	78fb      	ldrb	r3, [r7, #3]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	e000      	b.n	80056a2 <netif_issue_reports+0x52>
    return;
 80056a0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	08019f20 	.word	0x08019f20
 80056ac:	0801a0b0 	.word	0x0801a0b0
 80056b0:	08019f5c 	.word	0x08019f5c

080056b4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d107      	bne.n	80056d2 <netif_set_link_up+0x1e>
 80056c2:	4b0f      	ldr	r3, [pc, #60]	; (8005700 <netif_set_link_up+0x4c>)
 80056c4:	f240 32fd 	movw	r2, #1021	; 0x3fd
 80056c8:	490e      	ldr	r1, [pc, #56]	; (8005704 <netif_set_link_up+0x50>)
 80056ca:	480f      	ldr	r0, [pc, #60]	; (8005708 <netif_set_link_up+0x54>)
 80056cc:	f7fb fe11 	bl	80012f2 <lwip_win32_platform_diag>
 80056d0:	e013      	b.n	80056fa <netif_set_link_up+0x46>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10c      	bne.n	80056fa <netif_set_link_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80056e6:	f043 0304 	orr.w	r3, r3, #4
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

#if LWIP_AUTOIP
    autoip_network_changed_link_up(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80056f2:	2103      	movs	r1, #3
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff ffab 	bl	8005650 <netif_issue_reports>
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	08019f20 	.word	0x08019f20
 8005704:	0801a0f4 	.word	0x0801a0f4
 8005708:	08019f5c 	.word	0x08019f5c

0800570c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d107      	bne.n	800572a <netif_set_link_down+0x1e>
 800571a:	4b0d      	ldr	r3, [pc, #52]	; (8005750 <netif_set_link_down+0x44>)
 800571c:	f240 4223 	movw	r2, #1059	; 0x423
 8005720:	490c      	ldr	r1, [pc, #48]	; (8005754 <netif_set_link_down+0x48>)
 8005722:	480d      	ldr	r0, [pc, #52]	; (8005758 <netif_set_link_down+0x4c>)
 8005724:	f7fb fde5 	bl	80012f2 <lwip_win32_platform_diag>
 8005728:	e00f      	b.n	800574a <netif_set_link_down+0x3e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d008      	beq.n	800574a <netif_set_link_down+0x3e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800573e:	f023 0304 	bic.w	r3, r3, #4
 8005742:	b2da      	uxtb	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	08019f20 	.word	0x08019f20
 8005754:	0801a118 	.word	0x0801a118
 8005758:	08019f5c 	.word	0x08019f5c

0800575c <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005768:	f06f 030b 	mvn.w	r3, #11
}
 800576c:	4618      	mov	r0, r3
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	4603      	mov	r3, r0
 8005780:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d013      	beq.n	80057b0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005788:	4b0d      	ldr	r3, [pc, #52]	; (80057c0 <netif_get_by_index+0x48>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	e00c      	b.n	80057aa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005796:	3301      	adds	r3, #1
 8005798:	b2db      	uxtb	r3, r3
 800579a:	79fa      	ldrb	r2, [r7, #7]
 800579c:	429a      	cmp	r2, r3
 800579e:	d101      	bne.n	80057a4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	e006      	b.n	80057b2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1ef      	bne.n	8005790 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	2000402c 	.word	0x2000402c

080057c4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80057ca:	f7fb fdcb 	bl	8001364 <sys_arch_protect>
 80057ce:	6038      	str	r0, [r7, #0]
 80057d0:	4b0d      	ldr	r3, [pc, #52]	; (8005808 <pbuf_free_ooseq+0x44>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	701a      	strb	r2, [r3, #0]
 80057d6:	6838      	ldr	r0, [r7, #0]
 80057d8:	f7fb fdcc 	bl	8001374 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80057dc:	4b0b      	ldr	r3, [pc, #44]	; (800580c <pbuf_free_ooseq+0x48>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	607b      	str	r3, [r7, #4]
 80057e2:	e00a      	b.n	80057fa <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f003 f84b 	bl	8008888 <tcp_free_ooseq>
      return;
 80057f2:	e005      	b.n	8005800 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	607b      	str	r3, [r7, #4]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1f1      	bne.n	80057e4 <pbuf_free_ooseq+0x20>
    }
  }
}
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20004034 	.word	0x20004034
 800580c:	2000403c 	.word	0x2000403c

08005810 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8005818:	f7ff ffd4 	bl	80057c4 <pbuf_free_ooseq>
}
 800581c:	bf00      	nop
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800582a:	f7fb fd9b 	bl	8001364 <sys_arch_protect>
 800582e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8005830:	4b0f      	ldr	r3, [pc, #60]	; (8005870 <pbuf_pool_is_empty+0x4c>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8005836:	4b0e      	ldr	r3, [pc, #56]	; (8005870 <pbuf_pool_is_empty+0x4c>)
 8005838:	2201      	movs	r2, #1
 800583a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7fb fd99 	bl	8001374 <sys_arch_unprotect>

  if (!queued) {
 8005842:	78fb      	ldrb	r3, [r7, #3]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10f      	bne.n	8005868 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8005848:	2100      	movs	r1, #0
 800584a:	480a      	ldr	r0, [pc, #40]	; (8005874 <pbuf_pool_is_empty+0x50>)
 800584c:	f7fb ff26 	bl	800169c <tcpip_try_callback>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d008      	beq.n	8005868 <pbuf_pool_is_empty+0x44>
 8005856:	f7fb fd85 	bl	8001364 <sys_arch_protect>
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	4b04      	ldr	r3, [pc, #16]	; (8005870 <pbuf_pool_is_empty+0x4c>)
 800585e:	2200      	movs	r2, #0
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7fb fd86 	bl	8001374 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005868:	bf00      	nop
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	20004034 	.word	0x20004034
 8005874:	08005811 	.word	0x08005811

08005878 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	4611      	mov	r1, r2
 8005884:	461a      	mov	r2, r3
 8005886:	460b      	mov	r3, r1
 8005888:	80fb      	strh	r3, [r7, #6]
 800588a:	4613      	mov	r3, r2
 800588c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	88fa      	ldrh	r2, [r7, #6]
 800589e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	88ba      	ldrh	r2, [r7, #4]
 80058a4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80058a6:	8b3b      	ldrh	r3, [r7, #24]
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	7f3a      	ldrb	r2, [r7, #28]
 80058b2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	73da      	strb	r2, [r3, #15]

  LWIP_PBUF_CUSTOM_DATA_INIT(p);
}
 80058c0:	bf00      	nop
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08c      	sub	sp, #48	; 0x30
 80058d0:	af02      	add	r7, sp, #8
 80058d2:	4603      	mov	r3, r0
 80058d4:	71fb      	strb	r3, [r7, #7]
 80058d6:	460b      	mov	r3, r1
 80058d8:	80bb      	strh	r3, [r7, #4]
 80058da:	4613      	mov	r3, r2
 80058dc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80058e2:	887b      	ldrh	r3, [r7, #2]
 80058e4:	2b41      	cmp	r3, #65	; 0x41
 80058e6:	d00b      	beq.n	8005900 <pbuf_alloc+0x34>
 80058e8:	2b41      	cmp	r3, #65	; 0x41
 80058ea:	dc02      	bgt.n	80058f2 <pbuf_alloc+0x26>
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d007      	beq.n	8005900 <pbuf_alloc+0x34>
 80058f0:	e08b      	b.n	8005a0a <pbuf_alloc+0x13e>
 80058f2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80058f6:	d00b      	beq.n	8005910 <pbuf_alloc+0x44>
 80058f8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80058fc:	d05b      	beq.n	80059b6 <pbuf_alloc+0xea>
 80058fe:	e084      	b.n	8005a0a <pbuf_alloc+0x13e>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005900:	887a      	ldrh	r2, [r7, #2]
 8005902:	88bb      	ldrh	r3, [r7, #4]
 8005904:	4619      	mov	r1, r3
 8005906:	2000      	movs	r0, #0
 8005908:	f000 f898 	bl	8005a3c <pbuf_alloc_reference>
 800590c:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800590e:	e088      	b.n	8005a22 <pbuf_alloc+0x156>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005910:	2300      	movs	r3, #0
 8005912:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005914:	2300      	movs	r3, #0
 8005916:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005918:	88bb      	ldrh	r3, [r7, #4]
 800591a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800591c:	200c      	movs	r0, #12
 800591e:	f7ff fbfb 	bl	8005118 <memp_malloc>
 8005922:	6178      	str	r0, [r7, #20]
        if (q == NULL) {
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d109      	bne.n	800593e <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800592a:	f7ff ff7b 	bl	8005824 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <pbuf_alloc+0x6e>
            pbuf_free(p);
 8005934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005936:	f000 fa6d 	bl	8005e14 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800593a:	2300      	movs	r3, #0
 800593c:	e072      	b.n	8005a24 <pbuf_alloc+0x158>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800593e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005940:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005944:	b29a      	uxth	r2, r3
 8005946:	8b7b      	ldrh	r3, [r7, #26]
 8005948:	4293      	cmp	r3, r2
 800594a:	bf28      	it	cs
 800594c:	4613      	movcs	r3, r2
 800594e:	827b      	strh	r3, [r7, #18]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005950:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005952:	3310      	adds	r3, #16
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	18d1      	adds	r1, r2, r3
 8005958:	8a78      	ldrh	r0, [r7, #18]
 800595a:	8b7a      	ldrh	r2, [r7, #26]
 800595c:	2300      	movs	r3, #0
 800595e:	9301      	str	r3, [sp, #4]
 8005960:	887b      	ldrh	r3, [r7, #2]
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	4603      	mov	r3, r0
 8005966:	6978      	ldr	r0, [r7, #20]
 8005968:	f7ff ff86 	bl	8005878 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800596c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800596e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005972:	d10b      	bne.n	800598c <pbuf_alloc+0xc0>
 8005974:	4b2d      	ldr	r3, [pc, #180]	; (8005a2c <pbuf_alloc+0x160>)
 8005976:	f240 1205 	movw	r2, #261	; 0x105
 800597a:	492d      	ldr	r1, [pc, #180]	; (8005a30 <pbuf_alloc+0x164>)
 800597c:	482d      	ldr	r0, [pc, #180]	; (8005a34 <pbuf_alloc+0x168>)
 800597e:	f012 fa59 	bl	8017e34 <iprintf>
 8005982:	2000      	movs	r0, #0
 8005984:	f012 fb58 	bl	8018038 <fflush>
 8005988:	f012 fa9d 	bl	8017ec6 <abort>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <pbuf_alloc+0xcc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	627b      	str	r3, [r7, #36]	; 0x24
 8005996:	e002      	b.n	800599e <pbuf_alloc+0xd2>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80059a2:	8b7a      	ldrh	r2, [r7, #26]
 80059a4:	8a7b      	ldrh	r3, [r7, #18]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80059ae:	8b7b      	ldrh	r3, [r7, #26]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1b3      	bne.n	800591c <pbuf_alloc+0x50>
      break;
 80059b4:	e035      	b.n	8005a22 <pbuf_alloc+0x156>
    }
    case PBUF_RAM: {
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80059b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80059b8:	88bb      	ldrh	r3, [r7, #4]
 80059ba:	4413      	add	r3, r2
 80059bc:	823b      	strh	r3, [r7, #16]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80059be:	8a3b      	ldrh	r3, [r7, #16]
 80059c0:	3310      	adds	r3, #16
 80059c2:	81fb      	strh	r3, [r7, #14]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80059c4:	8a3a      	ldrh	r2, [r7, #16]
 80059c6:	88bb      	ldrh	r3, [r7, #4]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d303      	bcc.n	80059d4 <pbuf_alloc+0x108>
 80059cc:	89fa      	ldrh	r2, [r7, #14]
 80059ce:	88bb      	ldrh	r3, [r7, #4]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d201      	bcs.n	80059d8 <pbuf_alloc+0x10c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
        return NULL;
 80059d4:	2300      	movs	r3, #0
 80059d6:	e025      	b.n	8005a24 <pbuf_alloc+0x158>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80059d8:	89fb      	ldrh	r3, [r7, #14]
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff f9f6 	bl	8004dcc <mem_malloc>
 80059e0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <pbuf_alloc+0x120>
        return NULL;
 80059e8:	2300      	movs	r3, #0
 80059ea:	e01b      	b.n	8005a24 <pbuf_alloc+0x158>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80059ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059ee:	3310      	adds	r3, #16
 80059f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f2:	18d1      	adds	r1, r2, r3
 80059f4:	88b8      	ldrh	r0, [r7, #4]
 80059f6:	88ba      	ldrh	r2, [r7, #4]
 80059f8:	2300      	movs	r3, #0
 80059fa:	9301      	str	r3, [sp, #4]
 80059fc:	887b      	ldrh	r3, [r7, #2]
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	4603      	mov	r3, r0
 8005a02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a04:	f7ff ff38 	bl	8005878 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005a08:	e00b      	b.n	8005a22 <pbuf_alloc+0x156>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005a0a:	4b08      	ldr	r3, [pc, #32]	; (8005a2c <pbuf_alloc+0x160>)
 8005a0c:	f240 1229 	movw	r2, #297	; 0x129
 8005a10:	4909      	ldr	r1, [pc, #36]	; (8005a38 <pbuf_alloc+0x16c>)
 8005a12:	4808      	ldr	r0, [pc, #32]	; (8005a34 <pbuf_alloc+0x168>)
 8005a14:	f012 fa0e 	bl	8017e34 <iprintf>
 8005a18:	2000      	movs	r0, #0
 8005a1a:	f012 fb0d 	bl	8018038 <fflush>
 8005a1e:	f012 fa52 	bl	8017ec6 <abort>
      return NULL;
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3728      	adds	r7, #40	; 0x28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	0801a13c 	.word	0x0801a13c
 8005a30:	0801a15c 	.word	0x0801a15c
 8005a34:	0801a190 	.word	0x0801a190
 8005a38:	0801a1b8 	.word	0x0801a1b8

08005a3c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af02      	add	r7, sp, #8
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	807b      	strh	r3, [r7, #2]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005a4c:	883b      	ldrh	r3, [r7, #0]
 8005a4e:	2b41      	cmp	r3, #65	; 0x41
 8005a50:	d00e      	beq.n	8005a70 <pbuf_alloc_reference+0x34>
 8005a52:	883b      	ldrh	r3, [r7, #0]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d00b      	beq.n	8005a70 <pbuf_alloc_reference+0x34>
 8005a58:	4b12      	ldr	r3, [pc, #72]	; (8005aa4 <pbuf_alloc_reference+0x68>)
 8005a5a:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8005a5e:	4912      	ldr	r1, [pc, #72]	; (8005aa8 <pbuf_alloc_reference+0x6c>)
 8005a60:	4812      	ldr	r0, [pc, #72]	; (8005aac <pbuf_alloc_reference+0x70>)
 8005a62:	f012 f9e7 	bl	8017e34 <iprintf>
 8005a66:	2000      	movs	r0, #0
 8005a68:	f012 fae6 	bl	8018038 <fflush>
 8005a6c:	f012 fa2b 	bl	8017ec6 <abort>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005a70:	200b      	movs	r0, #11
 8005a72:	f7ff fb51 	bl	8005118 <memp_malloc>
 8005a76:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <pbuf_alloc_reference+0x46>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e00b      	b.n	8005a9a <pbuf_alloc_reference+0x5e>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005a82:	8879      	ldrh	r1, [r7, #2]
 8005a84:	887a      	ldrh	r2, [r7, #2]
 8005a86:	2300      	movs	r3, #0
 8005a88:	9301      	str	r3, [sp, #4]
 8005a8a:	883b      	ldrh	r3, [r7, #0]
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f7ff fef0 	bl	8005878 <pbuf_init_alloced_pbuf>
  return p;
 8005a98:	68fb      	ldr	r3, [r7, #12]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	0801a13c 	.word	0x0801a13c
 8005aa8:	0801a1d4 	.word	0x0801a1d4
 8005aac:	0801a190 	.word	0x0801a190

08005ab0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10b      	bne.n	8005ada <pbuf_realloc+0x2a>
 8005ac2:	4b4a      	ldr	r3, [pc, #296]	; (8005bec <pbuf_realloc+0x13c>)
 8005ac4:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8005ac8:	4949      	ldr	r1, [pc, #292]	; (8005bf0 <pbuf_realloc+0x140>)
 8005aca:	484a      	ldr	r0, [pc, #296]	; (8005bf4 <pbuf_realloc+0x144>)
 8005acc:	f012 f9b2 	bl	8017e34 <iprintf>
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	f012 fab1 	bl	8018038 <fflush>
 8005ad6:	f012 f9f6 	bl	8017ec6 <abort>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	891b      	ldrh	r3, [r3, #8]
 8005ade:	887a      	ldrh	r2, [r7, #2]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d27e      	bcs.n	8005be2 <pbuf_realloc+0x132>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	891a      	ldrh	r2, [r3, #8]
 8005ae8:	887b      	ldrh	r3, [r7, #2]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	823b      	strh	r3, [r7, #16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005aee:	887b      	ldrh	r3, [r7, #2]
 8005af0:	827b      	strh	r3, [r7, #18]
  q = p;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005af6:	e01d      	b.n	8005b34 <pbuf_realloc+0x84>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	895b      	ldrh	r3, [r3, #10]
 8005afc:	8a7a      	ldrh	r2, [r7, #18]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	891a      	ldrh	r2, [r3, #8]
 8005b06:	8a3b      	ldrh	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10b      	bne.n	8005b34 <pbuf_realloc+0x84>
 8005b1c:	4b33      	ldr	r3, [pc, #204]	; (8005bec <pbuf_realloc+0x13c>)
 8005b1e:	f240 12b1 	movw	r2, #433	; 0x1b1
 8005b22:	4935      	ldr	r1, [pc, #212]	; (8005bf8 <pbuf_realloc+0x148>)
 8005b24:	4833      	ldr	r0, [pc, #204]	; (8005bf4 <pbuf_realloc+0x144>)
 8005b26:	f012 f985 	bl	8017e34 <iprintf>
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	f012 fa84 	bl	8018038 <fflush>
 8005b30:	f012 f9c9 	bl	8017ec6 <abort>
  while (rem_len > q->len) {
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	895b      	ldrh	r3, [r3, #10]
 8005b38:	8a7a      	ldrh	r2, [r7, #18]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d8dc      	bhi.n	8005af8 <pbuf_realloc+0x48>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	7b1b      	ldrb	r3, [r3, #12]
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d137      	bne.n	8005bba <pbuf_realloc+0x10a>
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	895b      	ldrh	r3, [r3, #10]
 8005b4e:	8a7a      	ldrh	r2, [r7, #18]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d032      	beq.n	8005bba <pbuf_realloc+0x10a>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	7b5b      	ldrb	r3, [r3, #13]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d12c      	bne.n	8005bba <pbuf_realloc+0x10a>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    struct pbuf *r = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	461a      	mov	r2, r3
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	8a7b      	ldrh	r3, [r7, #18]
 8005b6e:	4413      	add	r3, r2
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	4619      	mov	r1, r3
 8005b74:	6978      	ldr	r0, [r7, #20]
 8005b76:	f7ff f80f 	bl	8004b98 <mem_trim>
 8005b7a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned r == NULL", r != NULL);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10b      	bne.n	8005b9a <pbuf_realloc+0xea>
 8005b82:	4b1a      	ldr	r3, [pc, #104]	; (8005bec <pbuf_realloc+0x13c>)
 8005b84:	f240 12bf 	movw	r2, #447	; 0x1bf
 8005b88:	491c      	ldr	r1, [pc, #112]	; (8005bfc <pbuf_realloc+0x14c>)
 8005b8a:	481a      	ldr	r0, [pc, #104]	; (8005bf4 <pbuf_realloc+0x144>)
 8005b8c:	f012 f952 	bl	8017e34 <iprintf>
 8005b90:	2000      	movs	r0, #0
 8005b92:	f012 fa51 	bl	8018038 <fflush>
 8005b96:	f012 f996 	bl	8017ec6 <abort>
    /* help to detect faulty overridden implementation of mem_trim */
    LWIP_ASSERT("mem_trim returned r != q", r == q);
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d00b      	beq.n	8005bba <pbuf_realloc+0x10a>
 8005ba2:	4b12      	ldr	r3, [pc, #72]	; (8005bec <pbuf_realloc+0x13c>)
 8005ba4:	f240 12c1 	movw	r2, #449	; 0x1c1
 8005ba8:	4915      	ldr	r1, [pc, #84]	; (8005c00 <pbuf_realloc+0x150>)
 8005baa:	4812      	ldr	r0, [pc, #72]	; (8005bf4 <pbuf_realloc+0x144>)
 8005bac:	f012 f942 	bl	8017e34 <iprintf>
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	f012 fa41 	bl	8018038 <fflush>
 8005bb6:	f012 f986 	bl	8017ec6 <abort>
    LWIP_UNUSED_ARG(r);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	8a7a      	ldrh	r2, [r7, #18]
 8005bbe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	895a      	ldrh	r2, [r3, #10]
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d004      	beq.n	8005bda <pbuf_realloc+0x12a>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 f91d 	bl	8005e14 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	e000      	b.n	8005be4 <pbuf_realloc+0x134>
    return;
 8005be2:	bf00      	nop

}
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	0801a13c 	.word	0x0801a13c
 8005bf0:	0801a1e8 	.word	0x0801a1e8
 8005bf4:	0801a190 	.word	0x0801a190
 8005bf8:	0801a200 	.word	0x0801a200
 8005bfc:	0801a218 	.word	0x0801a218
 8005c00:	0801a234 	.word	0x0801a234

08005c04 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10b      	bne.n	8005c30 <pbuf_add_header_impl+0x2c>
 8005c18:	4b2e      	ldr	r3, [pc, #184]	; (8005cd4 <pbuf_add_header_impl+0xd0>)
 8005c1a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005c1e:	492e      	ldr	r1, [pc, #184]	; (8005cd8 <pbuf_add_header_impl+0xd4>)
 8005c20:	482e      	ldr	r0, [pc, #184]	; (8005cdc <pbuf_add_header_impl+0xd8>)
 8005c22:	f012 f907 	bl	8017e34 <iprintf>
 8005c26:	2000      	movs	r0, #0
 8005c28:	f012 fa06 	bl	8018038 <fflush>
 8005c2c:	f012 f94b 	bl	8017ec6 <abort>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <pbuf_add_header_impl+0x3a>
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c3c:	d301      	bcc.n	8005c42 <pbuf_add_header_impl+0x3e>
    return 1;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e044      	b.n	8005ccc <pbuf_add_header_impl+0xc8>
  }
  if (header_size_increment == 0) {
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <pbuf_add_header_impl+0x48>
    return 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e03f      	b.n	8005ccc <pbuf_add_header_impl+0xc8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	891a      	ldrh	r2, [r3, #8]
 8005c54:	8a7b      	ldrh	r3, [r7, #18]
 8005c56:	4413      	add	r3, r2
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	8a7a      	ldrh	r2, [r7, #18]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d901      	bls.n	8005c64 <pbuf_add_header_impl+0x60>
    return 1;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e033      	b.n	8005ccc <pbuf_add_header_impl+0xc8>
  }

  type_internal = p->type_internal;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	7b1b      	ldrb	r3, [r3, #12]
 8005c68:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005c6a:	8a3b      	ldrh	r3, [r7, #16]
 8005c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00d      	beq.n	8005c90 <pbuf_add_header_impl+0x8c>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	425b      	negs	r3, r3
 8005c7c:	4413      	add	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f103 0210 	add.w	r2, r3, #16
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d90d      	bls.n	8005ca8 <pbuf_add_header_impl+0xa4>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e01d      	b.n	8005ccc <pbuf_add_header_impl+0xc8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005c90:	79fb      	ldrb	r3, [r7, #7]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d006      	beq.n	8005ca4 <pbuf_add_header_impl+0xa0>
      payload = (u8_t *)p->payload - header_size_increment;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	425b      	negs	r3, r3
 8005c9e:	4413      	add	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	e001      	b.n	8005ca8 <pbuf_add_header_impl+0xa4>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e011      	b.n	8005ccc <pbuf_add_header_impl+0xc8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	895a      	ldrh	r2, [r3, #10]
 8005cb2:	8a7b      	ldrh	r3, [r7, #18]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	891a      	ldrh	r2, [r3, #8]
 8005cc0:	8a7b      	ldrh	r3, [r7, #18]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	811a      	strh	r2, [r3, #8]


  return 0;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	0801a13c 	.word	0x0801a13c
 8005cd8:	0801a250 	.word	0x0801a250
 8005cdc:	0801a190 	.word	0x0801a190

08005ce0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005cea:	2200      	movs	r2, #0
 8005cec:	6839      	ldr	r1, [r7, #0]
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7ff ff88 	bl	8005c04 <pbuf_add_header_impl>
 8005cf4:	4603      	mov	r3, r0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10b      	bne.n	8005d28 <pbuf_remove_header+0x28>
 8005d10:	4b22      	ldr	r3, [pc, #136]	; (8005d9c <pbuf_remove_header+0x9c>)
 8005d12:	f44f 7214 	mov.w	r2, #592	; 0x250
 8005d16:	4922      	ldr	r1, [pc, #136]	; (8005da0 <pbuf_remove_header+0xa0>)
 8005d18:	4822      	ldr	r0, [pc, #136]	; (8005da4 <pbuf_remove_header+0xa4>)
 8005d1a:	f012 f88b 	bl	8017e34 <iprintf>
 8005d1e:	2000      	movs	r0, #0
 8005d20:	f012 f98a 	bl	8018038 <fflush>
 8005d24:	f012 f8cf 	bl	8017ec6 <abort>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <pbuf_remove_header+0x36>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d34:	d301      	bcc.n	8005d3a <pbuf_remove_header+0x3a>
    return 1;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e02c      	b.n	8005d94 <pbuf_remove_header+0x94>
  }
  if (header_size_decrement == 0) {
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <pbuf_remove_header+0x44>
    return 0;
 8005d40:	2300      	movs	r3, #0
 8005d42:	e027      	b.n	8005d94 <pbuf_remove_header+0x94>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	895b      	ldrh	r3, [r3, #10]
 8005d4c:	89fa      	ldrh	r2, [r7, #14]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d908      	bls.n	8005d64 <pbuf_remove_header+0x64>
 8005d52:	4b12      	ldr	r3, [pc, #72]	; (8005d9c <pbuf_remove_header+0x9c>)
 8005d54:	f240 225a 	movw	r2, #602	; 0x25a
 8005d58:	4913      	ldr	r1, [pc, #76]	; (8005da8 <pbuf_remove_header+0xa8>)
 8005d5a:	4812      	ldr	r0, [pc, #72]	; (8005da4 <pbuf_remove_header+0xa4>)
 8005d5c:	f7fb fac9 	bl	80012f2 <lwip_win32_platform_diag>
 8005d60:	2301      	movs	r3, #1
 8005d62:	e017      	b.n	8005d94 <pbuf_remove_header+0x94>

  /* remember current payload pointer */
  payload = p->payload;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	441a      	add	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	895a      	ldrh	r2, [r3, #10]
 8005d7a:	89fb      	ldrh	r3, [r7, #14]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	891a      	ldrh	r2, [r3, #8]
 8005d88:	89fb      	ldrh	r3, [r7, #14]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	0801a13c 	.word	0x0801a13c
 8005da0:	0801a250 	.word	0x0801a250
 8005da4:	0801a190 	.word	0x0801a190
 8005da8:	0801a25c 	.word	0x0801a25c

08005dac <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	807b      	strh	r3, [r7, #2]
 8005db8:	4613      	mov	r3, r2
 8005dba:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005dbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	da08      	bge.n	8005dd6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005dc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005dc8:	425b      	negs	r3, r3
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff ff97 	bl	8005d00 <pbuf_remove_header>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	e007      	b.n	8005de6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005dd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005dda:	787a      	ldrb	r2, [r7, #1]
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff ff10 	bl	8005c04 <pbuf_add_header_impl>
 8005de4:	4603      	mov	r3, r0
  }
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b082      	sub	sp, #8
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	460b      	mov	r3, r1
 8005df8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005dfa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff ffd2 	bl	8005dac <pbuf_header_impl>
 8005e08:	4603      	mov	r3, r0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d110      	bne.n	8005e44 <pbuf_free+0x30>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10b      	bne.n	8005e40 <pbuf_free+0x2c>
 8005e28:	4b45      	ldr	r3, [pc, #276]	; (8005f40 <pbuf_free+0x12c>)
 8005e2a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8005e2e:	4945      	ldr	r1, [pc, #276]	; (8005f44 <pbuf_free+0x130>)
 8005e30:	4845      	ldr	r0, [pc, #276]	; (8005f48 <pbuf_free+0x134>)
 8005e32:	f011 ffff 	bl	8017e34 <iprintf>
 8005e36:	2000      	movs	r0, #0
 8005e38:	f012 f8fe 	bl	8018038 <fflush>
 8005e3c:	f012 f843 	bl	8017ec6 <abort>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005e40:	2300      	movs	r3, #0
 8005e42:	e078      	b.n	8005f36 <pbuf_free+0x122>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005e48:	e071      	b.n	8005f2e <pbuf_free+0x11a>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8005e4a:	f7fb fa8b 	bl	8001364 <sys_arch_protect>
 8005e4e:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	7b9b      	ldrb	r3, [r3, #14]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10b      	bne.n	8005e70 <pbuf_free+0x5c>
 8005e58:	4b39      	ldr	r3, [pc, #228]	; (8005f40 <pbuf_free+0x12c>)
 8005e5a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005e5e:	493b      	ldr	r1, [pc, #236]	; (8005f4c <pbuf_free+0x138>)
 8005e60:	4839      	ldr	r0, [pc, #228]	; (8005f48 <pbuf_free+0x134>)
 8005e62:	f011 ffe7 	bl	8017e34 <iprintf>
 8005e66:	2000      	movs	r0, #0
 8005e68:	f012 f8e6 	bl	8018038 <fflush>
 8005e6c:	f012 f82b 	bl	8017ec6 <abort>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	7b9b      	ldrb	r3, [r3, #14]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	739a      	strb	r2, [r3, #14]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	7b9b      	ldrb	r3, [r3, #14]
 8005e80:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8005e82:	69b8      	ldr	r0, [r7, #24]
 8005e84:	f7fb fa76 	bl	8001374 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005e88:	7dfb      	ldrb	r3, [r7, #23]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d14d      	bne.n	8005f2a <pbuf_free+0x116>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	7b1b      	ldrb	r3, [r3, #12]
 8005e98:	f003 030f 	and.w	r3, r3, #15
 8005e9c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	7b5b      	ldrb	r3, [r3, #13]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d016      	beq.n	8005ed8 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10b      	bne.n	8005ece <pbuf_free+0xba>
 8005eb6:	4b22      	ldr	r3, [pc, #136]	; (8005f40 <pbuf_free+0x12c>)
 8005eb8:	f240 3203 	movw	r2, #771	; 0x303
 8005ebc:	4924      	ldr	r1, [pc, #144]	; (8005f50 <pbuf_free+0x13c>)
 8005ebe:	4822      	ldr	r0, [pc, #136]	; (8005f48 <pbuf_free+0x134>)
 8005ec0:	f011 ffb8 	bl	8017e34 <iprintf>
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	f012 f8b7 	bl	8018038 <fflush>
 8005eca:	f011 fffc 	bl	8017ec6 <abort>
        pc->custom_free_function(p);
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	4798      	blx	r3
 8005ed6:	e022      	b.n	8005f1e <pbuf_free+0x10a>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d104      	bne.n	8005ee8 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	200c      	movs	r0, #12
 8005ee2:	f7ff f983 	bl	80051ec <memp_free>
 8005ee6:	e01a      	b.n	8005f1e <pbuf_free+0x10a>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d104      	bne.n	8005ef8 <pbuf_free+0xe4>
          memp_free(MEMP_PBUF, p);
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	200b      	movs	r0, #11
 8005ef2:	f7ff f97b 	bl	80051ec <memp_free>
 8005ef6:	e012      	b.n	8005f1e <pbuf_free+0x10a>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d103      	bne.n	8005f06 <pbuf_free+0xf2>
          mem_free(p);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fe fdda 	bl	8004ab8 <mem_free>
 8005f04:	e00b      	b.n	8005f1e <pbuf_free+0x10a>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005f06:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <pbuf_free+0x12c>)
 8005f08:	f240 3213 	movw	r2, #787	; 0x313
 8005f0c:	4911      	ldr	r1, [pc, #68]	; (8005f54 <pbuf_free+0x140>)
 8005f0e:	480e      	ldr	r0, [pc, #56]	; (8005f48 <pbuf_free+0x134>)
 8005f10:	f011 ff90 	bl	8017e34 <iprintf>
 8005f14:	2000      	movs	r0, #0
 8005f16:	f012 f88f 	bl	8018038 <fflush>
 8005f1a:	f011 ffd4 	bl	8017ec6 <abort>
        }
      }
      count++;
 8005f1e:	7ffb      	ldrb	r3, [r7, #31]
 8005f20:	3301      	adds	r3, #1
 8005f22:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	607b      	str	r3, [r7, #4]
 8005f28:	e001      	b.n	8005f2e <pbuf_free+0x11a>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d18a      	bne.n	8005e4a <pbuf_free+0x36>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005f34:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3720      	adds	r7, #32
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	0801a13c 	.word	0x0801a13c
 8005f44:	0801a250 	.word	0x0801a250
 8005f48:	0801a190 	.word	0x0801a190
 8005f4c:	0801a27c 	.word	0x0801a27c
 8005f50:	0801a294 	.word	0x0801a294
 8005f54:	0801a2b8 	.word	0x0801a2b8

08005f58 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005f60:	2300      	movs	r3, #0
 8005f62:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005f64:	e005      	b.n	8005f72 <pbuf_clen+0x1a>
    ++len;
 8005f66:	89fb      	ldrh	r3, [r7, #14]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1f6      	bne.n	8005f66 <pbuf_clen+0xe>
  }
  return len;
 8005f78:	89fb      	ldrh	r3, [r7, #14]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
	...

08005f88 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d01b      	beq.n	8005fce <pbuf_ref+0x46>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005f96:	f7fb f9e5 	bl	8001364 <sys_arch_protect>
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	7b9b      	ldrb	r3, [r3, #14]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	739a      	strb	r2, [r3, #14]
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7fb f9e3 	bl	8001374 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	7b9b      	ldrb	r3, [r3, #14]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10b      	bne.n	8005fce <pbuf_ref+0x46>
 8005fb6:	4b08      	ldr	r3, [pc, #32]	; (8005fd8 <pbuf_ref+0x50>)
 8005fb8:	f240 3246 	movw	r2, #838	; 0x346
 8005fbc:	4907      	ldr	r1, [pc, #28]	; (8005fdc <pbuf_ref+0x54>)
 8005fbe:	4808      	ldr	r0, [pc, #32]	; (8005fe0 <pbuf_ref+0x58>)
 8005fc0:	f011 ff38 	bl	8017e34 <iprintf>
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	f012 f837 	bl	8018038 <fflush>
 8005fca:	f011 ff7c 	bl	8017ec6 <abort>
  }
}
 8005fce:	bf00      	nop
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	0801a13c 	.word	0x0801a13c
 8005fdc:	0801a2cc 	.word	0x0801a2cc
 8005fe0:	0801a190 	.word	0x0801a190

08005fe4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <pbuf_cat+0x16>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d107      	bne.n	800600a <pbuf_cat+0x26>
 8005ffa:	4b2d      	ldr	r3, [pc, #180]	; (80060b0 <pbuf_cat+0xcc>)
 8005ffc:	f240 325e 	movw	r2, #862	; 0x35e
 8006000:	492c      	ldr	r1, [pc, #176]	; (80060b4 <pbuf_cat+0xd0>)
 8006002:	482d      	ldr	r0, [pc, #180]	; (80060b8 <pbuf_cat+0xd4>)
 8006004:	f7fb f975 	bl	80012f2 <lwip_win32_platform_diag>
 8006008:	e04e      	b.n	80060a8 <pbuf_cat+0xc4>
             ((h != NULL) && (t != NULL)), return;);
  LWIP_ASSERT("Creating an infinite loop", h != t);
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d10b      	bne.n	800602a <pbuf_cat+0x46>
 8006012:	4b27      	ldr	r3, [pc, #156]	; (80060b0 <pbuf_cat+0xcc>)
 8006014:	f240 325f 	movw	r2, #863	; 0x35f
 8006018:	4928      	ldr	r1, [pc, #160]	; (80060bc <pbuf_cat+0xd8>)
 800601a:	4827      	ldr	r0, [pc, #156]	; (80060b8 <pbuf_cat+0xd4>)
 800601c:	f011 ff0a 	bl	8017e34 <iprintf>
 8006020:	2000      	movs	r0, #0
 8006022:	f012 f809 	bl	8018038 <fflush>
 8006026:	f011 ff4e 	bl	8017ec6 <abort>

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	e00a      	b.n	8006046 <pbuf_cat+0x62>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	891a      	ldrh	r2, [r3, #8]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	891b      	ldrh	r3, [r3, #8]
 8006038:	4413      	add	r3, r2
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	60fb      	str	r3, [r7, #12]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1f0      	bne.n	8006030 <pbuf_cat+0x4c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	891a      	ldrh	r2, [r3, #8]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	895b      	ldrh	r3, [r3, #10]
 8006056:	429a      	cmp	r2, r3
 8006058:	d00b      	beq.n	8006072 <pbuf_cat+0x8e>
 800605a:	4b15      	ldr	r3, [pc, #84]	; (80060b0 <pbuf_cat+0xcc>)
 800605c:	f240 3267 	movw	r2, #871	; 0x367
 8006060:	4917      	ldr	r1, [pc, #92]	; (80060c0 <pbuf_cat+0xdc>)
 8006062:	4815      	ldr	r0, [pc, #84]	; (80060b8 <pbuf_cat+0xd4>)
 8006064:	f011 fee6 	bl	8017e34 <iprintf>
 8006068:	2000      	movs	r0, #0
 800606a:	f011 ffe5 	bl	8018038 <fflush>
 800606e:	f011 ff2a 	bl	8017ec6 <abort>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00b      	beq.n	8006092 <pbuf_cat+0xae>
 800607a:	4b0d      	ldr	r3, [pc, #52]	; (80060b0 <pbuf_cat+0xcc>)
 800607c:	f44f 725a 	mov.w	r2, #872	; 0x368
 8006080:	4910      	ldr	r1, [pc, #64]	; (80060c4 <pbuf_cat+0xe0>)
 8006082:	480d      	ldr	r0, [pc, #52]	; (80060b8 <pbuf_cat+0xd4>)
 8006084:	f011 fed6 	bl	8017e34 <iprintf>
 8006088:	2000      	movs	r0, #0
 800608a:	f011 ffd5 	bl	8018038 <fflush>
 800608e:	f011 ff1a 	bl	8017ec6 <abort>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	891a      	ldrh	r2, [r3, #8]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	891b      	ldrh	r3, [r3, #8]
 800609a:	4413      	add	r3, r2
 800609c:	b29a      	uxth	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	0801a13c 	.word	0x0801a13c
 80060b4:	0801a2e0 	.word	0x0801a2e0
 80060b8:	0801a190 	.word	0x0801a190
 80060bc:	0801a318 	.word	0x0801a318
 80060c0:	0801a334 	.word	0x0801a334
 80060c4:	0801a364 	.word	0x0801a364

080060c8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7ff ff85 	bl	8005fe4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80060da:	6838      	ldr	r0, [r7, #0]
 80060dc:	f7ff ff54 	bl	8005f88 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80060e0:	bf00      	nop
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <pbuf_copy>:
 *                 enough to hold p_from
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d109      	bne.n	800610c <pbuf_copy+0x24>
 80060f8:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <pbuf_copy+0x3c>)
 80060fa:	f240 32c7 	movw	r2, #967	; 0x3c7
 80060fe:	490a      	ldr	r1, [pc, #40]	; (8006128 <pbuf_copy+0x40>)
 8006100:	480a      	ldr	r0, [pc, #40]	; (800612c <pbuf_copy+0x44>)
 8006102:	f7fb f8f6 	bl	80012f2 <lwip_win32_platform_diag>
 8006106:	f06f 030f 	mvn.w	r3, #15
 800610a:	e007      	b.n	800611c <pbuf_copy+0x34>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	891a      	ldrh	r2, [r3, #8]
 8006110:	2300      	movs	r3, #0
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f80b 	bl	8006130 <pbuf_copy_partial_pbuf>
 800611a:	4603      	mov	r3, r0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	0801a13c 	.word	0x0801a13c
 8006128:	0801a3b0 	.word	0x0801a3b0
 800612c:	0801a190 	.word	0x0801a190

08006130 <pbuf_copy_partial_pbuf>:
 *                 or p_to is not big enough to hold copy_len at offset
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy_partial_pbuf(struct pbuf *p_to, const struct pbuf *p_from, u16_t copy_len, u16_t offset)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	4611      	mov	r1, r2
 800613c:	461a      	mov	r2, r3
 800613e:	460b      	mov	r3, r1
 8006140:	80fb      	strh	r3, [r7, #6]
 8006142:	4613      	mov	r3, r2
 8006144:	80bb      	strh	r3, [r7, #4]
  size_t offset_to = offset, offset_from = 0, len;
 8006146:	88bb      	ldrh	r3, [r7, #4]
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	2300      	movs	r3, #0
 800614c:	61bb      	str	r3, [r7, #24]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf(%p, %p, %"U16_F", %"U16_F")\n",
              (const void *)p_to, (const void *)p_from, copy_len, offset));

  /* is the copy_len in range? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d004      	beq.n	800615e <pbuf_copy_partial_pbuf+0x2e>
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	891b      	ldrh	r3, [r3, #8]
 8006158:	88fa      	ldrh	r2, [r7, #6]
 800615a:	429a      	cmp	r2, r3
 800615c:	d909      	bls.n	8006172 <pbuf_copy_partial_pbuf+0x42>
 800615e:	4b74      	ldr	r3, [pc, #464]	; (8006330 <pbuf_copy_partial_pbuf+0x200>)
 8006160:	f240 32e6 	movw	r2, #998	; 0x3e6
 8006164:	4973      	ldr	r1, [pc, #460]	; (8006334 <pbuf_copy_partial_pbuf+0x204>)
 8006166:	4874      	ldr	r0, [pc, #464]	; (8006338 <pbuf_copy_partial_pbuf+0x208>)
 8006168:	f7fb f8c3 	bl	80012f2 <lwip_win32_platform_diag>
 800616c:	f06f 030f 	mvn.w	r3, #15
 8006170:	e0d9      	b.n	8006326 <pbuf_copy_partial_pbuf+0x1f6>
             (p_from->tot_len >= copy_len)), return ERR_ARG;);
  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <pbuf_copy_partial_pbuf+0x58>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	891b      	ldrh	r3, [r3, #8]
 800617c:	4619      	mov	r1, r3
 800617e:	88ba      	ldrh	r2, [r7, #4]
 8006180:	88fb      	ldrh	r3, [r7, #6]
 8006182:	4413      	add	r3, r2
 8006184:	4299      	cmp	r1, r3
 8006186:	da09      	bge.n	800619c <pbuf_copy_partial_pbuf+0x6c>
 8006188:	4b69      	ldr	r3, [pc, #420]	; (8006330 <pbuf_copy_partial_pbuf+0x200>)
 800618a:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800618e:	496b      	ldr	r1, [pc, #428]	; (800633c <pbuf_copy_partial_pbuf+0x20c>)
 8006190:	4869      	ldr	r0, [pc, #420]	; (8006338 <pbuf_copy_partial_pbuf+0x208>)
 8006192:	f7fb f8ae 	bl	80012f2 <lwip_win32_platform_diag>
 8006196:	f06f 030f 	mvn.w	r3, #15
 800619a:	e0c4      	b.n	8006326 <pbuf_copy_partial_pbuf+0x1f6>
             (p_to->tot_len >= (offset + copy_len))), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	895b      	ldrh	r3, [r3, #10]
 80061a0:	461a      	mov	r2, r3
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	1ad2      	subs	r2, r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	895b      	ldrh	r3, [r3, #10]
 80061aa:	4619      	mov	r1, r3
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	1acb      	subs	r3, r1, r3
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d306      	bcc.n	80061c2 <pbuf_copy_partial_pbuf+0x92>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	895b      	ldrh	r3, [r3, #10]
 80061b8:	461a      	mov	r2, r3
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	e005      	b.n	80061ce <pbuf_copy_partial_pbuf+0x9e>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	895b      	ldrh	r3, [r3, #10]
 80061c6:	461a      	mov	r2, r3
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	617b      	str	r3, [r7, #20]
    }
    len = LWIP_MIN(copy_len, len);
 80061ce:	88fb      	ldrh	r3, [r7, #6]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	4293      	cmp	r3, r2
 80061d4:	bf28      	it	cs
 80061d6:	4613      	movcs	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	18d0      	adds	r0, r2, r3
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	4413      	add	r3, r2
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	4619      	mov	r1, r3
 80061ee:	f012 f843 	bl	8018278 <memcpy>
    offset_to += len;
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	4413      	add	r3, r2
 80061f8:	61fb      	str	r3, [r7, #28]
    offset_from += len;
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	4413      	add	r3, r2
 8006200:	61bb      	str	r3, [r7, #24]
    copy_len = (u16_t)(copy_len - len);
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	b29b      	uxth	r3, r3
 8006206:	88fa      	ldrh	r2, [r7, #6]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	80fb      	strh	r3, [r7, #6]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	895b      	ldrh	r3, [r3, #10]
 8006210:	461a      	mov	r2, r3
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	429a      	cmp	r2, r3
 8006216:	d20b      	bcs.n	8006230 <pbuf_copy_partial_pbuf+0x100>
 8006218:	4b45      	ldr	r3, [pc, #276]	; (8006330 <pbuf_copy_partial_pbuf+0x200>)
 800621a:	f240 32fa 	movw	r2, #1018	; 0x3fa
 800621e:	4948      	ldr	r1, [pc, #288]	; (8006340 <pbuf_copy_partial_pbuf+0x210>)
 8006220:	4845      	ldr	r0, [pc, #276]	; (8006338 <pbuf_copy_partial_pbuf+0x208>)
 8006222:	f011 fe07 	bl	8017e34 <iprintf>
 8006226:	2000      	movs	r0, #0
 8006228:	f011 ff06 	bl	8018038 <fflush>
 800622c:	f011 fe4b 	bl	8017ec6 <abort>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	895b      	ldrh	r3, [r3, #10]
 8006234:	461a      	mov	r2, r3
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	429a      	cmp	r2, r3
 800623a:	d20b      	bcs.n	8006254 <pbuf_copy_partial_pbuf+0x124>
 800623c:	4b3c      	ldr	r3, [pc, #240]	; (8006330 <pbuf_copy_partial_pbuf+0x200>)
 800623e:	f240 32fb 	movw	r2, #1019	; 0x3fb
 8006242:	4940      	ldr	r1, [pc, #256]	; (8006344 <pbuf_copy_partial_pbuf+0x214>)
 8006244:	483c      	ldr	r0, [pc, #240]	; (8006338 <pbuf_copy_partial_pbuf+0x208>)
 8006246:	f011 fdf5 	bl	8017e34 <iprintf>
 800624a:	2000      	movs	r0, #0
 800624c:	f011 fef4 	bl	8018038 <fflush>
 8006250:	f011 fe39 	bl	8017ec6 <abort>
    if (offset_from >= p_from->len) {
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	895b      	ldrh	r3, [r3, #10]
 8006258:	461a      	mov	r2, r3
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	429a      	cmp	r2, r3
 800625e:	d814      	bhi.n	800628a <pbuf_copy_partial_pbuf+0x15a>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	61bb      	str	r3, [r7, #24]
      p_from = p_from->next;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	60bb      	str	r3, [r7, #8]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10c      	bne.n	800628a <pbuf_copy_partial_pbuf+0x15a>
 8006270:	88fb      	ldrh	r3, [r7, #6]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d009      	beq.n	800628a <pbuf_copy_partial_pbuf+0x15a>
 8006276:	4b2e      	ldr	r3, [pc, #184]	; (8006330 <pbuf_copy_partial_pbuf+0x200>)
 8006278:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800627c:	4932      	ldr	r1, [pc, #200]	; (8006348 <pbuf_copy_partial_pbuf+0x218>)
 800627e:	482e      	ldr	r0, [pc, #184]	; (8006338 <pbuf_copy_partial_pbuf+0x208>)
 8006280:	f7fb f837 	bl	80012f2 <lwip_win32_platform_diag>
 8006284:	f06f 030f 	mvn.w	r3, #15
 8006288:	e04d      	b.n	8006326 <pbuf_copy_partial_pbuf+0x1f6>
    }
    if (offset_to == p_to->len) {
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	895b      	ldrh	r3, [r3, #10]
 800628e:	461a      	mov	r2, r3
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	429a      	cmp	r2, r3
 8006294:	d114      	bne.n	80062c0 <pbuf_copy_partial_pbuf+0x190>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006296:	2300      	movs	r3, #0
 8006298:	61fb      	str	r3, [r7, #28]
      p_to = p_to->next;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60fb      	str	r3, [r7, #12]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10c      	bne.n	80062c0 <pbuf_copy_partial_pbuf+0x190>
 80062a6:	88fb      	ldrh	r3, [r7, #6]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d009      	beq.n	80062c0 <pbuf_copy_partial_pbuf+0x190>
 80062ac:	4b20      	ldr	r3, [pc, #128]	; (8006330 <pbuf_copy_partial_pbuf+0x200>)
 80062ae:	f240 4206 	movw	r2, #1030	; 0x406
 80062b2:	4926      	ldr	r1, [pc, #152]	; (800634c <pbuf_copy_partial_pbuf+0x21c>)
 80062b4:	4820      	ldr	r0, [pc, #128]	; (8006338 <pbuf_copy_partial_pbuf+0x208>)
 80062b6:	f7fb f81c 	bl	80012f2 <lwip_win32_platform_diag>
 80062ba:	f06f 030f 	mvn.w	r3, #15
 80062be:	e032      	b.n	8006326 <pbuf_copy_partial_pbuf+0x1f6>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d013      	beq.n	80062ee <pbuf_copy_partial_pbuf+0x1be>
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	895a      	ldrh	r2, [r3, #10]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	891b      	ldrh	r3, [r3, #8]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d10d      	bne.n	80062ee <pbuf_copy_partial_pbuf+0x1be>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d009      	beq.n	80062ee <pbuf_copy_partial_pbuf+0x1be>
 80062da:	4b15      	ldr	r3, [pc, #84]	; (8006330 <pbuf_copy_partial_pbuf+0x200>)
 80062dc:	f240 420c 	movw	r2, #1036	; 0x40c
 80062e0:	491b      	ldr	r1, [pc, #108]	; (8006350 <pbuf_copy_partial_pbuf+0x220>)
 80062e2:	4815      	ldr	r0, [pc, #84]	; (8006338 <pbuf_copy_partial_pbuf+0x208>)
 80062e4:	f7fb f805 	bl	80012f2 <lwip_win32_platform_diag>
 80062e8:	f06f 0305 	mvn.w	r3, #5
 80062ec:	e01b      	b.n	8006326 <pbuf_copy_partial_pbuf+0x1f6>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d013      	beq.n	800631c <pbuf_copy_partial_pbuf+0x1ec>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	895a      	ldrh	r2, [r3, #10]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	891b      	ldrh	r3, [r3, #8]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d10d      	bne.n	800631c <pbuf_copy_partial_pbuf+0x1ec>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d009      	beq.n	800631c <pbuf_copy_partial_pbuf+0x1ec>
 8006308:	4b09      	ldr	r3, [pc, #36]	; (8006330 <pbuf_copy_partial_pbuf+0x200>)
 800630a:	f240 4211 	movw	r2, #1041	; 0x411
 800630e:	4910      	ldr	r1, [pc, #64]	; (8006350 <pbuf_copy_partial_pbuf+0x220>)
 8006310:	4809      	ldr	r0, [pc, #36]	; (8006338 <pbuf_copy_partial_pbuf+0x208>)
 8006312:	f7fa ffee 	bl	80012f2 <lwip_win32_platform_diag>
 8006316:	f06f 0305 	mvn.w	r3, #5
 800631a:	e004      	b.n	8006326 <pbuf_copy_partial_pbuf+0x1f6>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (copy_len);
 800631c:	88fb      	ldrh	r3, [r7, #6]
 800631e:	2b00      	cmp	r3, #0
 8006320:	f47f af3c 	bne.w	800619c <pbuf_copy_partial_pbuf+0x6c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf: copy complete.\n"));
  return ERR_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3720      	adds	r7, #32
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	0801a13c 	.word	0x0801a13c
 8006334:	0801a3cc 	.word	0x0801a3cc
 8006338:	0801a190 	.word	0x0801a190
 800633c:	0801a400 	.word	0x0801a400
 8006340:	0801a430 	.word	0x0801a430
 8006344:	0801a448 	.word	0x0801a448
 8006348:	0801a464 	.word	0x0801a464
 800634c:	0801a474 	.word	0x0801a474
 8006350:	0801a484 	.word	0x0801a484

08006354 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	4611      	mov	r1, r2
 8006360:	461a      	mov	r2, r3
 8006362:	460b      	mov	r3, r1
 8006364:	80fb      	strh	r3, [r7, #6]
 8006366:	4613      	mov	r3, r2
 8006368:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d108      	bne.n	800638a <pbuf_copy_partial+0x36>
 8006378:	4b2b      	ldr	r3, [pc, #172]	; (8006428 <pbuf_copy_partial+0xd4>)
 800637a:	f240 422c 	movw	r2, #1068	; 0x42c
 800637e:	492b      	ldr	r1, [pc, #172]	; (800642c <pbuf_copy_partial+0xd8>)
 8006380:	482b      	ldr	r0, [pc, #172]	; (8006430 <pbuf_copy_partial+0xdc>)
 8006382:	f7fa ffb6 	bl	80012f2 <lwip_win32_platform_diag>
 8006386:	2300      	movs	r3, #0
 8006388:	e04a      	b.n	8006420 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d108      	bne.n	80063a2 <pbuf_copy_partial+0x4e>
 8006390:	4b25      	ldr	r3, [pc, #148]	; (8006428 <pbuf_copy_partial+0xd4>)
 8006392:	f240 422d 	movw	r2, #1069	; 0x42d
 8006396:	4927      	ldr	r1, [pc, #156]	; (8006434 <pbuf_copy_partial+0xe0>)
 8006398:	4825      	ldr	r0, [pc, #148]	; (8006430 <pbuf_copy_partial+0xdc>)
 800639a:	f7fa ffaa 	bl	80012f2 <lwip_win32_platform_diag>
 800639e:	2300      	movs	r3, #0
 80063a0:	e03e      	b.n	8006420 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	61fb      	str	r3, [r7, #28]
 80063a6:	e034      	b.n	8006412 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80063a8:	88bb      	ldrh	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <pbuf_copy_partial+0x70>
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	895b      	ldrh	r3, [r3, #10]
 80063b2:	88ba      	ldrh	r2, [r7, #4]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d305      	bcc.n	80063c4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	895b      	ldrh	r3, [r3, #10]
 80063bc:	88ba      	ldrh	r2, [r7, #4]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	80bb      	strh	r3, [r7, #4]
 80063c2:	e023      	b.n	800640c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	895a      	ldrh	r2, [r3, #10]
 80063c8:	88bb      	ldrh	r3, [r7, #4]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80063ce:	8b3a      	ldrh	r2, [r7, #24]
 80063d0:	88fb      	ldrh	r3, [r7, #6]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d901      	bls.n	80063da <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80063da:	8b7b      	ldrh	r3, [r7, #26]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	18d0      	adds	r0, r2, r3
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	88bb      	ldrh	r3, [r7, #4]
 80063e6:	4413      	add	r3, r2
 80063e8:	8b3a      	ldrh	r2, [r7, #24]
 80063ea:	4619      	mov	r1, r3
 80063ec:	f011 ff44 	bl	8018278 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80063f0:	8afa      	ldrh	r2, [r7, #22]
 80063f2:	8b3b      	ldrh	r3, [r7, #24]
 80063f4:	4413      	add	r3, r2
 80063f6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80063f8:	8b7a      	ldrh	r2, [r7, #26]
 80063fa:	8b3b      	ldrh	r3, [r7, #24]
 80063fc:	4413      	add	r3, r2
 80063fe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006400:	88fa      	ldrh	r2, [r7, #6]
 8006402:	8b3b      	ldrh	r3, [r7, #24]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006408:	2300      	movs	r3, #0
 800640a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	61fb      	str	r3, [r7, #28]
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <pbuf_copy_partial+0xca>
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1c4      	bne.n	80063a8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800641e:	8afb      	ldrh	r3, [r7, #22]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3720      	adds	r7, #32
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	0801a13c 	.word	0x0801a13c
 800642c:	0801a4bc 	.word	0x0801a4bc
 8006430:	0801a190 	.word	0x0801a190
 8006434:	0801a4dc 	.word	0x0801a4dc

08006438 <pbuf_get_contiguous>:
 *         - pointer to 'buffer' if data was not contiguous and had to be copied
 *         - NULL on error
 */
void *
pbuf_get_contiguous(const struct pbuf *p, void *buffer, size_t bufsize, u16_t len, u16_t offset)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	807b      	strh	r3, [r7, #2]
  const struct pbuf *q;
  u16_t out_offset;

  LWIP_ERROR("pbuf_get_contiguous: invalid buf", (p != NULL), return NULL;);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d108      	bne.n	800645e <pbuf_get_contiguous+0x26>
 800644c:	4b25      	ldr	r3, [pc, #148]	; (80064e4 <pbuf_get_contiguous+0xac>)
 800644e:	f240 425c 	movw	r2, #1116	; 0x45c
 8006452:	4925      	ldr	r1, [pc, #148]	; (80064e8 <pbuf_get_contiguous+0xb0>)
 8006454:	4825      	ldr	r0, [pc, #148]	; (80064ec <pbuf_get_contiguous+0xb4>)
 8006456:	f7fa ff4c 	bl	80012f2 <lwip_win32_platform_diag>
 800645a:	2300      	movs	r3, #0
 800645c:	e03d      	b.n	80064da <pbuf_get_contiguous+0xa2>
  LWIP_ERROR("pbuf_get_contiguous: invalid bufsize", (buffer == NULL) || (bufsize >= len), return NULL;);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00c      	beq.n	800647e <pbuf_get_contiguous+0x46>
 8006464:	887a      	ldrh	r2, [r7, #2]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	429a      	cmp	r2, r3
 800646a:	d908      	bls.n	800647e <pbuf_get_contiguous+0x46>
 800646c:	4b1d      	ldr	r3, [pc, #116]	; (80064e4 <pbuf_get_contiguous+0xac>)
 800646e:	f240 425d 	movw	r2, #1117	; 0x45d
 8006472:	491f      	ldr	r1, [pc, #124]	; (80064f0 <pbuf_get_contiguous+0xb8>)
 8006474:	481d      	ldr	r0, [pc, #116]	; (80064ec <pbuf_get_contiguous+0xb4>)
 8006476:	f7fa ff3c 	bl	80012f2 <lwip_win32_platform_diag>
 800647a:	2300      	movs	r3, #0
 800647c:	e02d      	b.n	80064da <pbuf_get_contiguous+0xa2>

  q = pbuf_skip_const(p, offset, &out_offset);
 800647e:	f107 0212 	add.w	r2, r7, #18
 8006482:	8c3b      	ldrh	r3, [r7, #32]
 8006484:	4619      	mov	r1, r3
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 f834 	bl	80064f4 <pbuf_skip_const>
 800648c:	6178      	str	r0, [r7, #20]
  if (q != NULL) {
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d021      	beq.n	80064d8 <pbuf_get_contiguous+0xa0>
    if (q->len >= (out_offset + len)) {
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	895b      	ldrh	r3, [r3, #10]
 8006498:	461a      	mov	r2, r3
 800649a:	8a7b      	ldrh	r3, [r7, #18]
 800649c:	4619      	mov	r1, r3
 800649e:	887b      	ldrh	r3, [r7, #2]
 80064a0:	440b      	add	r3, r1
 80064a2:	429a      	cmp	r2, r3
 80064a4:	db04      	blt.n	80064b0 <pbuf_get_contiguous+0x78>
      /* all data in this pbuf, return zero-copy */
      return (u8_t *)q->payload + out_offset;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	8a7a      	ldrh	r2, [r7, #18]
 80064ac:	4413      	add	r3, r2
 80064ae:	e014      	b.n	80064da <pbuf_get_contiguous+0xa2>
    }
    if (buffer == NULL) {
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <pbuf_get_contiguous+0x82>
      /* the caller does not want to copy */
      return NULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e00f      	b.n	80064da <pbuf_get_contiguous+0xa2>
    }
    /* need to copy */
    if (pbuf_copy_partial(q, buffer, len, out_offset) != len) {
 80064ba:	8a7b      	ldrh	r3, [r7, #18]
 80064bc:	887a      	ldrh	r2, [r7, #2]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	6978      	ldr	r0, [r7, #20]
 80064c2:	f7ff ff47 	bl	8006354 <pbuf_copy_partial>
 80064c6:	4603      	mov	r3, r0
 80064c8:	461a      	mov	r2, r3
 80064ca:	887b      	ldrh	r3, [r7, #2]
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d001      	beq.n	80064d4 <pbuf_get_contiguous+0x9c>
      /* copying failed: pbuf is too short */
      return NULL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	e002      	b.n	80064da <pbuf_get_contiguous+0xa2>
    }
    return buffer;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	e000      	b.n	80064da <pbuf_get_contiguous+0xa2>
  }
  /* pbuf is too short (offset does not fit in) */
  return NULL;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	0801a13c 	.word	0x0801a13c
 80064e8:	0801a500 	.word	0x0801a500
 80064ec:	0801a190 	.word	0x0801a190
 80064f0:	0801a524 	.word	0x0801a524

080064f4 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	460b      	mov	r3, r1
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8006502:	897b      	ldrh	r3, [r7, #10]
 8006504:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800650a:	e007      	b.n	800651c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	895b      	ldrh	r3, [r3, #10]
 8006510:	8afa      	ldrh	r2, [r7, #22]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <pbuf_skip_const+0x38>
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	895b      	ldrh	r3, [r3, #10]
 8006526:	8afa      	ldrh	r2, [r7, #22]
 8006528:	429a      	cmp	r2, r3
 800652a:	d2ef      	bcs.n	800650c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	8afa      	ldrh	r2, [r7, #22]
 8006536:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8006538:	693b      	ldr	r3, [r7, #16]
}
 800653a:	4618      	mov	r0, r3
 800653c:	371c      	adds	r7, #28
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is or NULL when the offset is too high
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b086      	sub	sp, #24
 800654a:	af00      	add	r7, sp, #0
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	460b      	mov	r3, r1
 8006550:	607a      	str	r2, [r7, #4]
 8006552:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8006554:	897b      	ldrh	r3, [r7, #10]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	4619      	mov	r1, r3
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f7ff ffca 	bl	80064f4 <pbuf_skip_const>
 8006560:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8006562:	697b      	ldr	r3, [r7, #20]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	4613      	mov	r3, r2
 8006578:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800657a:	88fb      	ldrh	r3, [r7, #6]
 800657c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d109      	bne.n	800659c <pbuf_take+0x30>
 8006588:	4b3f      	ldr	r3, [pc, #252]	; (8006688 <pbuf_take+0x11c>)
 800658a:	f240 42db 	movw	r2, #1243	; 0x4db
 800658e:	493f      	ldr	r1, [pc, #252]	; (800668c <pbuf_take+0x120>)
 8006590:	483f      	ldr	r0, [pc, #252]	; (8006690 <pbuf_take+0x124>)
 8006592:	f7fa feae 	bl	80012f2 <lwip_win32_platform_diag>
 8006596:	f06f 030f 	mvn.w	r3, #15
 800659a:	e071      	b.n	8006680 <pbuf_take+0x114>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <pbuf_take+0x4a>
 80065a2:	4b39      	ldr	r3, [pc, #228]	; (8006688 <pbuf_take+0x11c>)
 80065a4:	f240 42dc 	movw	r2, #1244	; 0x4dc
 80065a8:	493a      	ldr	r1, [pc, #232]	; (8006694 <pbuf_take+0x128>)
 80065aa:	4839      	ldr	r0, [pc, #228]	; (8006690 <pbuf_take+0x124>)
 80065ac:	f7fa fea1 	bl	80012f2 <lwip_win32_platform_diag>
 80065b0:	f06f 030f 	mvn.w	r3, #15
 80065b4:	e064      	b.n	8006680 <pbuf_take+0x114>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	891b      	ldrh	r3, [r3, #8]
 80065ba:	88fa      	ldrh	r2, [r7, #6]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d909      	bls.n	80065d4 <pbuf_take+0x68>
 80065c0:	4b31      	ldr	r3, [pc, #196]	; (8006688 <pbuf_take+0x11c>)
 80065c2:	f240 42dd 	movw	r2, #1245	; 0x4dd
 80065c6:	4934      	ldr	r1, [pc, #208]	; (8006698 <pbuf_take+0x12c>)
 80065c8:	4831      	ldr	r0, [pc, #196]	; (8006690 <pbuf_take+0x124>)
 80065ca:	f7fa fe92 	bl	80012f2 <lwip_win32_platform_diag>
 80065ce:	f04f 33ff 	mov.w	r3, #4294967295
 80065d2:	e055      	b.n	8006680 <pbuf_take+0x114>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d007      	beq.n	80065ea <pbuf_take+0x7e>
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d004      	beq.n	80065ea <pbuf_take+0x7e>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	891b      	ldrh	r3, [r3, #8]
 80065e4:	88fa      	ldrh	r2, [r7, #6]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d902      	bls.n	80065f0 <pbuf_take+0x84>
    return ERR_ARG;
 80065ea:	f06f 030f 	mvn.w	r3, #15
 80065ee:	e047      	b.n	8006680 <pbuf_take+0x114>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	61fb      	str	r3, [r7, #28]
 80065f4:	e02d      	b.n	8006652 <pbuf_take+0xe6>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10b      	bne.n	8006614 <pbuf_take+0xa8>
 80065fc:	4b22      	ldr	r3, [pc, #136]	; (8006688 <pbuf_take+0x11c>)
 80065fe:	f240 42e5 	movw	r2, #1253	; 0x4e5
 8006602:	4926      	ldr	r1, [pc, #152]	; (800669c <pbuf_take+0x130>)
 8006604:	4822      	ldr	r0, [pc, #136]	; (8006690 <pbuf_take+0x124>)
 8006606:	f011 fc15 	bl	8017e34 <iprintf>
 800660a:	2000      	movs	r0, #0
 800660c:	f011 fd14 	bl	8018038 <fflush>
 8006610:	f011 fc59 	bl	8017ec6 <abort>
    buf_copy_len = total_copy_len;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	895b      	ldrh	r3, [r3, #10]
 800661c:	461a      	mov	r2, r3
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	429a      	cmp	r2, r3
 8006622:	d202      	bcs.n	800662a <pbuf_take+0xbe>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	895b      	ldrh	r3, [r3, #10]
 8006628:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	6858      	ldr	r0, [r3, #4]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	4413      	add	r3, r2
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	4619      	mov	r1, r3
 8006638:	f011 fe1e 	bl	8018278 <memcpy>
    total_copy_len -= buf_copy_len;
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	4413      	add	r3, r2
 800664a:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	61fb      	str	r3, [r7, #28]
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1ce      	bne.n	80065f6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d103      	bne.n	8006666 <pbuf_take+0xfa>
 800665e:	88fa      	ldrh	r2, [r7, #6]
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	429a      	cmp	r2, r3
 8006664:	d00b      	beq.n	800667e <pbuf_take+0x112>
 8006666:	4b08      	ldr	r3, [pc, #32]	; (8006688 <pbuf_take+0x11c>)
 8006668:	f44f 629e 	mov.w	r2, #1264	; 0x4f0
 800666c:	490c      	ldr	r1, [pc, #48]	; (80066a0 <pbuf_take+0x134>)
 800666e:	4808      	ldr	r0, [pc, #32]	; (8006690 <pbuf_take+0x124>)
 8006670:	f011 fbe0 	bl	8017e34 <iprintf>
 8006674:	2000      	movs	r0, #0
 8006676:	f011 fcdf 	bl	8018038 <fflush>
 800667a:	f011 fc24 	bl	8017ec6 <abort>
  return ERR_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3720      	adds	r7, #32
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	0801a13c 	.word	0x0801a13c
 800668c:	0801a54c 	.word	0x0801a54c
 8006690:	0801a190 	.word	0x0801a190
 8006694:	0801a564 	.word	0x0801a564
 8006698:	0801a580 	.word	0x0801a580
 800669c:	0801a5a0 	.word	0x0801a5a0
 80066a0:	0801a5b8 	.word	0x0801a5b8

080066a4 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b088      	sub	sp, #32
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	4611      	mov	r1, r2
 80066b0:	461a      	mov	r2, r3
 80066b2:	460b      	mov	r3, r1
 80066b4:	80fb      	strh	r3, [r7, #6]
 80066b6:	4613      	mov	r3, r2
 80066b8:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 80066ba:	f107 0210 	add.w	r2, r7, #16
 80066be:	88bb      	ldrh	r3, [r7, #4]
 80066c0:	4619      	mov	r1, r3
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f7ff ff3f 	bl	8006546 <pbuf_skip>
 80066c8:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d04c      	beq.n	800676a <pbuf_take_at+0xc6>
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	891b      	ldrh	r3, [r3, #8]
 80066d4:	461a      	mov	r2, r3
 80066d6:	8a3b      	ldrh	r3, [r7, #16]
 80066d8:	4619      	mov	r1, r3
 80066da:	88fb      	ldrh	r3, [r7, #6]
 80066dc:	440b      	add	r3, r1
 80066de:	429a      	cmp	r2, r3
 80066e0:	db43      	blt.n	800676a <pbuf_take_at+0xc6>
    u16_t remaining_len = len;
 80066e2:	88fb      	ldrh	r3, [r7, #6]
 80066e4:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	895a      	ldrh	r2, [r3, #10]
 80066ee:	8a3b      	ldrh	r3, [r7, #16]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d80b      	bhi.n	800670c <pbuf_take_at+0x68>
 80066f4:	4b20      	ldr	r3, [pc, #128]	; (8006778 <pbuf_take_at+0xd4>)
 80066f6:	f240 520b 	movw	r2, #1291	; 0x50b
 80066fa:	4920      	ldr	r1, [pc, #128]	; (800677c <pbuf_take_at+0xd8>)
 80066fc:	4820      	ldr	r0, [pc, #128]	; (8006780 <pbuf_take_at+0xdc>)
 80066fe:	f011 fb99 	bl	8017e34 <iprintf>
 8006702:	2000      	movs	r0, #0
 8006704:	f011 fc98 	bl	8018038 <fflush>
 8006708:	f011 fbdd 	bl	8017ec6 <abort>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	895b      	ldrh	r3, [r3, #10]
 8006710:	461a      	mov	r2, r3
 8006712:	8a3b      	ldrh	r3, [r7, #16]
 8006714:	1ad2      	subs	r2, r2, r3
 8006716:	88fb      	ldrh	r3, [r7, #6]
 8006718:	429a      	cmp	r2, r3
 800671a:	da05      	bge.n	8006728 <pbuf_take_at+0x84>
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	895a      	ldrh	r2, [r3, #10]
 8006720:	8a3b      	ldrh	r3, [r7, #16]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	b29b      	uxth	r3, r3
 8006726:	e000      	b.n	800672a <pbuf_take_at+0x86>
 8006728:	88fb      	ldrh	r3, [r7, #6]
 800672a:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	8a3a      	ldrh	r2, [r7, #16]
 8006732:	4413      	add	r3, r2
 8006734:	8a7a      	ldrh	r2, [r7, #18]
 8006736:	68b9      	ldr	r1, [r7, #8]
 8006738:	4618      	mov	r0, r3
 800673a:	f011 fd9d 	bl	8018278 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800673e:	8b7a      	ldrh	r2, [r7, #26]
 8006740:	8a7b      	ldrh	r3, [r7, #18]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8006746:	8a7b      	ldrh	r3, [r7, #18]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	4413      	add	r3, r2
 800674c:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800674e:	8b7b      	ldrh	r3, [r7, #26]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d008      	beq.n	8006766 <pbuf_take_at+0xc2>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	8b7a      	ldrh	r2, [r7, #26]
 800675a:	6979      	ldr	r1, [r7, #20]
 800675c:	4618      	mov	r0, r3
 800675e:	f7ff ff05 	bl	800656c <pbuf_take>
 8006762:	4603      	mov	r3, r0
 8006764:	e003      	b.n	800676e <pbuf_take_at+0xca>
    }
    return ERR_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	e001      	b.n	800676e <pbuf_take_at+0xca>
  }
  return ERR_MEM;
 800676a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800676e:	4618      	mov	r0, r3
 8006770:	3720      	adds	r7, #32
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	0801a13c 	.word	0x0801a13c
 800677c:	0801a5d0 	.word	0x0801a5d0
 8006780:	0801a190 	.word	0x0801a190

08006784 <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf *
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *q;
  if (p->next == NULL) {
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <pbuf_coalesce+0x18>
    return p;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	e010      	b.n	80067be <pbuf_coalesce+0x3a>
  }
  q = pbuf_clone(layer, PBUF_RAM, p);
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	f44f 7120 	mov.w	r1, #640	; 0x280
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 f80f 	bl	80067c8 <pbuf_clone>
 80067aa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <pbuf_coalesce+0x32>
    /* @todo: what do we do now? */
    return p;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	e003      	b.n	80067be <pbuf_coalesce+0x3a>
  }
  pbuf_free(p);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7ff fb2c 	bl	8005e14 <pbuf_free>
  return q;
 80067bc:	68fb      	ldr	r3, [r7, #12]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
	...

080067c8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	4603      	mov	r3, r0
 80067d0:	603a      	str	r2, [r7, #0]
 80067d2:	71fb      	strb	r3, [r7, #7]
 80067d4:	460b      	mov	r3, r1
 80067d6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	8919      	ldrh	r1, [r3, #8]
 80067dc:	88ba      	ldrh	r2, [r7, #4]
 80067de:	79fb      	ldrb	r3, [r7, #7]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff f873 	bl	80058cc <pbuf_alloc>
 80067e6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <pbuf_clone+0x2a>
    return NULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	e016      	b.n	8006820 <pbuf_clone+0x58>
  }
  err = pbuf_copy(q, p);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f7ff fc77 	bl	80060e8 <pbuf_copy>
 80067fa:	4603      	mov	r3, r0
 80067fc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80067fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00b      	beq.n	800681e <pbuf_clone+0x56>
 8006806:	4b08      	ldr	r3, [pc, #32]	; (8006828 <pbuf_clone+0x60>)
 8006808:	f240 524c 	movw	r2, #1356	; 0x54c
 800680c:	4907      	ldr	r1, [pc, #28]	; (800682c <pbuf_clone+0x64>)
 800680e:	4808      	ldr	r0, [pc, #32]	; (8006830 <pbuf_clone+0x68>)
 8006810:	f011 fb10 	bl	8017e34 <iprintf>
 8006814:	2000      	movs	r0, #0
 8006816:	f011 fc0f 	bl	8018038 <fflush>
 800681a:	f011 fb54 	bl	8017ec6 <abort>
  return q;
 800681e:	68fb      	ldr	r3, [r7, #12]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	0801a13c 	.word	0x0801a13c
 800682c:	0801a5e8 	.word	0x0801a5e8
 8006830:	0801a190 	.word	0x0801a190

08006834 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8006840:	887b      	ldrh	r3, [r7, #2]
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f80c 	bl	8006862 <pbuf_try_get_at>
 800684a:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	db02      	blt.n	8006858 <pbuf_get_at+0x24>
    return (u8_t)ret;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	e000      	b.n	800685a <pbuf_get_at+0x26>
  }
  return 0;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b084      	sub	sp, #16
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	460b      	mov	r3, r1
 800686c:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800686e:	f107 020a 	add.w	r2, r7, #10
 8006872:	887b      	ldrh	r3, [r7, #2]
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7ff fe3c 	bl	80064f4 <pbuf_skip_const>
 800687c:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <pbuf_try_get_at+0x38>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	895a      	ldrh	r2, [r3, #10]
 8006888:	897b      	ldrh	r3, [r7, #10]
 800688a:	429a      	cmp	r2, r3
 800688c:	d905      	bls.n	800689a <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	897a      	ldrh	r2, [r7, #10]
 8006894:	4413      	add	r3, r2
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	e001      	b.n	800689e <pbuf_try_get_at+0x3c>
  }
  return -1;
 800689a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	460b      	mov	r3, r1
 80068b0:	807b      	strh	r3, [r7, #2]
 80068b2:	4613      	mov	r3, r2
 80068b4:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 80068b6:	f107 020a 	add.w	r2, r7, #10
 80068ba:	887b      	ldrh	r3, [r7, #2]
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7ff fe41 	bl	8006546 <pbuf_skip>
 80068c4:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00a      	beq.n	80068e2 <pbuf_put_at+0x3c>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	895a      	ldrh	r2, [r3, #10]
 80068d0:	897b      	ldrh	r3, [r7, #10]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d905      	bls.n	80068e2 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	897a      	ldrh	r2, [r7, #10]
 80068dc:	4413      	add	r3, r2
 80068de:	787a      	ldrb	r2, [r7, #1]
 80068e0:	701a      	strb	r2, [r3, #0]
  }
}
 80068e2:	bf00      	nop
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80068f0:	f7fa fd20 	bl	8001334 <lwip_port_rand>
 80068f4:	4603      	mov	r3, r0
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006902:	b29a      	uxth	r2, r3
 8006904:	4b01      	ldr	r3, [pc, #4]	; (800690c <tcp_init+0x20>)
 8006906:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006908:	bf00      	nop
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20000008 	.word	0x20000008

08006910 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	7d1b      	ldrb	r3, [r3, #20]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d10a      	bne.n	8006936 <tcp_free+0x26>
 8006920:	4b09      	ldr	r3, [pc, #36]	; (8006948 <tcp_free+0x38>)
 8006922:	22d4      	movs	r2, #212	; 0xd4
 8006924:	4909      	ldr	r1, [pc, #36]	; (800694c <tcp_free+0x3c>)
 8006926:	480a      	ldr	r0, [pc, #40]	; (8006950 <tcp_free+0x40>)
 8006928:	f011 fa84 	bl	8017e34 <iprintf>
 800692c:	2000      	movs	r0, #0
 800692e:	f011 fb83 	bl	8018038 <fflush>
 8006932:	f011 fac8 	bl	8017ec6 <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006936:	6879      	ldr	r1, [r7, #4]
 8006938:	2001      	movs	r0, #1
 800693a:	f7fe fc57 	bl	80051ec <memp_free>
}
 800693e:	bf00      	nop
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	0801a674 	.word	0x0801a674
 800694c:	0801a694 	.word	0x0801a694
 8006950:	0801a6a8 	.word	0x0801a6a8

08006954 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	7d1b      	ldrb	r3, [r3, #20]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d10a      	bne.n	800697a <tcp_free_listen+0x26>
 8006964:	4b09      	ldr	r3, [pc, #36]	; (800698c <tcp_free_listen+0x38>)
 8006966:	22df      	movs	r2, #223	; 0xdf
 8006968:	4909      	ldr	r1, [pc, #36]	; (8006990 <tcp_free_listen+0x3c>)
 800696a:	480a      	ldr	r0, [pc, #40]	; (8006994 <tcp_free_listen+0x40>)
 800696c:	f011 fa62 	bl	8017e34 <iprintf>
 8006970:	2000      	movs	r0, #0
 8006972:	f011 fb61 	bl	8018038 <fflush>
 8006976:	f011 faa6 	bl	8017ec6 <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	2002      	movs	r0, #2
 800697e:	f7fe fc35 	bl	80051ec <memp_free>
}
 8006982:	bf00      	nop
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	0801a674 	.word	0x0801a674
 8006990:	0801a6d0 	.word	0x0801a6d0
 8006994:	0801a6a8 	.word	0x0801a6a8

08006998 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800699c:	f001 f972 	bl	8007c84 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80069a0:	4b07      	ldr	r3, [pc, #28]	; (80069c0 <tcp_tmr+0x28>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	3301      	adds	r3, #1
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	4b05      	ldr	r3, [pc, #20]	; (80069c0 <tcp_tmr+0x28>)
 80069aa:	701a      	strb	r2, [r3, #0]
 80069ac:	4b04      	ldr	r3, [pc, #16]	; (80069c0 <tcp_tmr+0x28>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80069b8:	f000 fda2 	bl	8007500 <tcp_slowtmr>
  }
}
 80069bc:	bf00      	nop
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20000be9 	.word	0x20000be9

080069c4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <tcp_remove_listener+0x26>
 80069d4:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <tcp_remove_listener+0x50>)
 80069d6:	22ff      	movs	r2, #255	; 0xff
 80069d8:	490f      	ldr	r1, [pc, #60]	; (8006a18 <tcp_remove_listener+0x54>)
 80069da:	4810      	ldr	r0, [pc, #64]	; (8006a1c <tcp_remove_listener+0x58>)
 80069dc:	f011 fa2a 	bl	8017e34 <iprintf>
 80069e0:	2000      	movs	r0, #0
 80069e2:	f011 fb29 	bl	8018038 <fflush>
 80069e6:	f011 fa6e 	bl	8017ec6 <abort>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	e00a      	b.n	8006a06 <tcp_remove_listener+0x42>
    if (pcb->listener == lpcb) {
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d102      	bne.n	8006a00 <tcp_remove_listener+0x3c>
      pcb->listener = NULL;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	60fb      	str	r3, [r7, #12]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1f1      	bne.n	80069f0 <tcp_remove_listener+0x2c>
    }
  }
}
 8006a0c:	bf00      	nop
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	0801a674 	.word	0x0801a674
 8006a18:	0801a6ec 	.word	0x0801a6ec
 8006a1c:	0801a6a8 	.word	0x0801a6a8

08006a20 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10b      	bne.n	8006a46 <tcp_listen_closed+0x26>
 8006a2e:	4b19      	ldr	r3, [pc, #100]	; (8006a94 <tcp_listen_closed+0x74>)
 8006a30:	f240 1211 	movw	r2, #273	; 0x111
 8006a34:	4918      	ldr	r1, [pc, #96]	; (8006a98 <tcp_listen_closed+0x78>)
 8006a36:	4819      	ldr	r0, [pc, #100]	; (8006a9c <tcp_listen_closed+0x7c>)
 8006a38:	f011 f9fc 	bl	8017e34 <iprintf>
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	f011 fafb 	bl	8018038 <fflush>
 8006a42:	f011 fa40 	bl	8017ec6 <abort>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	7d1b      	ldrb	r3, [r3, #20]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d00b      	beq.n	8006a66 <tcp_listen_closed+0x46>
 8006a4e:	4b11      	ldr	r3, [pc, #68]	; (8006a94 <tcp_listen_closed+0x74>)
 8006a50:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006a54:	4912      	ldr	r1, [pc, #72]	; (8006aa0 <tcp_listen_closed+0x80>)
 8006a56:	4811      	ldr	r0, [pc, #68]	; (8006a9c <tcp_listen_closed+0x7c>)
 8006a58:	f011 f9ec 	bl	8017e34 <iprintf>
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	f011 faeb 	bl	8018038 <fflush>
 8006a62:	f011 fa30 	bl	8017ec6 <abort>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006a66:	2301      	movs	r3, #1
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	e00b      	b.n	8006a84 <tcp_listen_closed+0x64>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006a6c:	4a0d      	ldr	r2, [pc, #52]	; (8006aa4 <tcp_listen_closed+0x84>)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7ff ffa3 	bl	80069c4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3301      	adds	r3, #1
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d9f0      	bls.n	8006a6c <tcp_listen_closed+0x4c>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006a8a:	bf00      	nop
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	0801a674 	.word	0x0801a674
 8006a98:	0801a714 	.word	0x0801a714
 8006a9c:	0801a6a8 	.word	0x0801a6a8
 8006aa0:	0801a720 	.word	0x0801a720
 8006aa4:	0801db88 	.word	0x0801db88

08006aa8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006aa8:	b5b0      	push	{r4, r5, r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af04      	add	r7, sp, #16
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10b      	bne.n	8006ad2 <tcp_close_shutdown+0x2a>
 8006aba:	4b66      	ldr	r3, [pc, #408]	; (8006c54 <tcp_close_shutdown+0x1ac>)
 8006abc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006ac0:	4965      	ldr	r1, [pc, #404]	; (8006c58 <tcp_close_shutdown+0x1b0>)
 8006ac2:	4866      	ldr	r0, [pc, #408]	; (8006c5c <tcp_close_shutdown+0x1b4>)
 8006ac4:	f011 f9b6 	bl	8017e34 <iprintf>
 8006ac8:	2000      	movs	r0, #0
 8006aca:	f011 fab5 	bl	8018038 <fflush>
 8006ace:	f011 f9fa 	bl	8017ec6 <abort>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006ad2:	78fb      	ldrb	r3, [r7, #3]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d06b      	beq.n	8006bb0 <tcp_close_shutdown+0x108>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	7d1b      	ldrb	r3, [r3, #20]
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	d003      	beq.n	8006ae8 <tcp_close_shutdown+0x40>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	7d1b      	ldrb	r3, [r3, #20]
 8006ae4:	2b07      	cmp	r3, #7
 8006ae6:	d163      	bne.n	8006bb0 <tcp_close_shutdown+0x108>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d104      	bne.n	8006afa <tcp_close_shutdown+0x52>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006af8:	d05a      	beq.n	8006bb0 <tcp_close_shutdown+0x108>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	8b5b      	ldrh	r3, [r3, #26]
 8006afe:	f003 0310 	and.w	r3, r3, #16
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10b      	bne.n	8006b1e <tcp_close_shutdown+0x76>
 8006b06:	4b53      	ldr	r3, [pc, #332]	; (8006c54 <tcp_close_shutdown+0x1ac>)
 8006b08:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006b0c:	4954      	ldr	r1, [pc, #336]	; (8006c60 <tcp_close_shutdown+0x1b8>)
 8006b0e:	4853      	ldr	r0, [pc, #332]	; (8006c5c <tcp_close_shutdown+0x1b4>)
 8006b10:	f011 f990 	bl	8017e34 <iprintf>
 8006b14:	2000      	movs	r0, #0
 8006b16:	f011 fa8f 	bl	8018038 <fflush>
 8006b1a:	f011 f9d4 	bl	8017ec6 <abort>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006b26:	687d      	ldr	r5, [r7, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	8ad2      	ldrh	r2, [r2, #22]
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	8b09      	ldrh	r1, [r1, #24]
 8006b34:	9102      	str	r1, [sp, #8]
 8006b36:	9201      	str	r2, [sp, #4]
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	462b      	mov	r3, r5
 8006b3c:	4622      	mov	r2, r4
 8006b3e:	4601      	mov	r1, r0
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f006 fc23 	bl	800d38c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f001 fc8e 	bl	8008468 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006b4c:	4b45      	ldr	r3, [pc, #276]	; (8006c64 <tcp_close_shutdown+0x1bc>)
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d105      	bne.n	8006b62 <tcp_close_shutdown+0xba>
 8006b56:	4b43      	ldr	r3, [pc, #268]	; (8006c64 <tcp_close_shutdown+0x1bc>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	4a41      	ldr	r2, [pc, #260]	; (8006c64 <tcp_close_shutdown+0x1bc>)
 8006b5e:	6013      	str	r3, [r2, #0]
 8006b60:	e013      	b.n	8006b8a <tcp_close_shutdown+0xe2>
 8006b62:	4b40      	ldr	r3, [pc, #256]	; (8006c64 <tcp_close_shutdown+0x1bc>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	e00c      	b.n	8006b84 <tcp_close_shutdown+0xdc>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	68da      	ldr	r2, [r3, #12]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d104      	bne.n	8006b7e <tcp_close_shutdown+0xd6>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68da      	ldr	r2, [r3, #12]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	60da      	str	r2, [r3, #12]
 8006b7c:	e005      	b.n	8006b8a <tcp_close_shutdown+0xe2>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1ef      	bne.n	8006b6a <tcp_close_shutdown+0xc2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	60da      	str	r2, [r3, #12]
 8006b90:	4b35      	ldr	r3, [pc, #212]	; (8006c68 <tcp_close_shutdown+0x1c0>)
 8006b92:	2201      	movs	r2, #1
 8006b94:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006b96:	4b35      	ldr	r3, [pc, #212]	; (8006c6c <tcp_close_shutdown+0x1c4>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d102      	bne.n	8006ba6 <tcp_close_shutdown+0xfe>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006ba0:	f004 fc98 	bl	800b4d4 <tcp_trigger_input_pcb_close>
 8006ba4:	e002      	b.n	8006bac <tcp_close_shutdown+0x104>
      } else {
        tcp_free(pcb);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff feb2 	bl	8006910 <tcp_free>
      }
      return ERR_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	e04d      	b.n	8006c4c <tcp_close_shutdown+0x1a4>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	7d1b      	ldrb	r3, [r3, #20]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d02d      	beq.n	8006c14 <tcp_close_shutdown+0x16c>
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d036      	beq.n	8006c2a <tcp_close_shutdown+0x182>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d13f      	bne.n	8006c40 <tcp_close_shutdown+0x198>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	8adb      	ldrh	r3, [r3, #22]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d021      	beq.n	8006c0c <tcp_close_shutdown+0x164>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006bc8:	4b29      	ldr	r3, [pc, #164]	; (8006c70 <tcp_close_shutdown+0x1c8>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d105      	bne.n	8006bde <tcp_close_shutdown+0x136>
 8006bd2:	4b27      	ldr	r3, [pc, #156]	; (8006c70 <tcp_close_shutdown+0x1c8>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	4a25      	ldr	r2, [pc, #148]	; (8006c70 <tcp_close_shutdown+0x1c8>)
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	e013      	b.n	8006c06 <tcp_close_shutdown+0x15e>
 8006bde:	4b24      	ldr	r3, [pc, #144]	; (8006c70 <tcp_close_shutdown+0x1c8>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	60bb      	str	r3, [r7, #8]
 8006be4:	e00c      	b.n	8006c00 <tcp_close_shutdown+0x158>
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d104      	bne.n	8006bfa <tcp_close_shutdown+0x152>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68da      	ldr	r2, [r3, #12]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	60da      	str	r2, [r3, #12]
 8006bf8:	e005      	b.n	8006c06 <tcp_close_shutdown+0x15e>
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	60bb      	str	r3, [r7, #8]
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1ef      	bne.n	8006be6 <tcp_close_shutdown+0x13e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7ff fe7f 	bl	8006910 <tcp_free>
      break;
 8006c12:	e01a      	b.n	8006c4a <tcp_close_shutdown+0x1a2>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff ff03 	bl	8006a20 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006c1a:	6879      	ldr	r1, [r7, #4]
 8006c1c:	4815      	ldr	r0, [pc, #84]	; (8006c74 <tcp_close_shutdown+0x1cc>)
 8006c1e:	f001 fc95 	bl	800854c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff fe96 	bl	8006954 <tcp_free_listen>
      break;
 8006c28:	e00f      	b.n	8006c4a <tcp_close_shutdown+0x1a2>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006c2a:	6879      	ldr	r1, [r7, #4]
 8006c2c:	480d      	ldr	r0, [pc, #52]	; (8006c64 <tcp_close_shutdown+0x1bc>)
 8006c2e:	f001 fc8d 	bl	800854c <tcp_pcb_remove>
 8006c32:	4b0d      	ldr	r3, [pc, #52]	; (8006c68 <tcp_close_shutdown+0x1c0>)
 8006c34:	2201      	movs	r2, #1
 8006c36:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7ff fe69 	bl	8006910 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006c3e:	e004      	b.n	8006c4a <tcp_close_shutdown+0x1a2>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f819 	bl	8006c78 <tcp_close_shutdown_fin>
 8006c46:	4603      	mov	r3, r0
 8006c48:	e000      	b.n	8006c4c <tcp_close_shutdown+0x1a4>
  }
  return ERR_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bdb0      	pop	{r4, r5, r7, pc}
 8006c54:	0801a674 	.word	0x0801a674
 8006c58:	0801a738 	.word	0x0801a738
 8006c5c:	0801a6a8 	.word	0x0801a6a8
 8006c60:	0801a758 	.word	0x0801a758
 8006c64:	2000403c 	.word	0x2000403c
 8006c68:	20004038 	.word	0x20004038
 8006c6c:	20004050 	.word	0x20004050
 8006c70:	20004048 	.word	0x20004048
 8006c74:	20004044 	.word	0x20004044

08006c78 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10b      	bne.n	8006c9e <tcp_close_shutdown_fin+0x26>
 8006c86:	4b2f      	ldr	r3, [pc, #188]	; (8006d44 <tcp_close_shutdown_fin+0xcc>)
 8006c88:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006c8c:	492e      	ldr	r1, [pc, #184]	; (8006d48 <tcp_close_shutdown_fin+0xd0>)
 8006c8e:	482f      	ldr	r0, [pc, #188]	; (8006d4c <tcp_close_shutdown_fin+0xd4>)
 8006c90:	f011 f8d0 	bl	8017e34 <iprintf>
 8006c94:	2000      	movs	r0, #0
 8006c96:	f011 f9cf 	bl	8018038 <fflush>
 8006c9a:	f011 f914 	bl	8017ec6 <abort>

  switch (pcb->state) {
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	7d1b      	ldrb	r3, [r3, #20]
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d010      	beq.n	8006cc8 <tcp_close_shutdown_fin+0x50>
 8006ca6:	2b07      	cmp	r3, #7
 8006ca8:	d01b      	beq.n	8006ce2 <tcp_close_shutdown_fin+0x6a>
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d126      	bne.n	8006cfc <tcp_close_shutdown_fin+0x84>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f005 fb46 	bl	800c340 <tcp_send_fin>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d11f      	bne.n	8006d00 <tcp_close_shutdown_fin+0x88>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2205      	movs	r2, #5
 8006cc4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006cc6:	e01b      	b.n	8006d00 <tcp_close_shutdown_fin+0x88>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f005 fb39 	bl	800c340 <tcp_send_fin>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d114      	bne.n	8006d04 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2205      	movs	r2, #5
 8006cde:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006ce0:	e010      	b.n	8006d04 <tcp_close_shutdown_fin+0x8c>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f005 fb2c 	bl	800c340 <tcp_send_fin>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d109      	bne.n	8006d08 <tcp_close_shutdown_fin+0x90>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2209      	movs	r2, #9
 8006cf8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006cfa:	e005      	b.n	8006d08 <tcp_close_shutdown_fin+0x90>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	e01c      	b.n	8006d3a <tcp_close_shutdown_fin+0xc2>
      break;
 8006d00:	bf00      	nop
 8006d02:	e002      	b.n	8006d0a <tcp_close_shutdown_fin+0x92>
      break;
 8006d04:	bf00      	nop
 8006d06:	e000      	b.n	8006d0a <tcp_close_shutdown_fin+0x92>
      break;
 8006d08:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d103      	bne.n	8006d1a <tcp_close_shutdown_fin+0xa2>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f005 fc62 	bl	800c5dc <tcp_output>
 8006d18:	e00d      	b.n	8006d36 <tcp_close_shutdown_fin+0xbe>
  } else if (err == ERR_MEM) {
 8006d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d22:	d108      	bne.n	8006d36 <tcp_close_shutdown_fin+0xbe>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	8b5b      	ldrh	r3, [r3, #26]
 8006d28:	f043 0308 	orr.w	r3, r3, #8
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	e001      	b.n	8006d3a <tcp_close_shutdown_fin+0xc2>
  }
  return err;
 8006d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	0801a674 	.word	0x0801a674
 8006d48:	0801a714 	.word	0x0801a714
 8006d4c:	0801a6a8 	.word	0x0801a6a8

08006d50 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d109      	bne.n	8006d72 <tcp_close+0x22>
 8006d5e:	4b13      	ldr	r3, [pc, #76]	; (8006dac <tcp_close+0x5c>)
 8006d60:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006d64:	4912      	ldr	r1, [pc, #72]	; (8006db0 <tcp_close+0x60>)
 8006d66:	4813      	ldr	r0, [pc, #76]	; (8006db4 <tcp_close+0x64>)
 8006d68:	f7fa fac3 	bl	80012f2 <lwip_win32_platform_diag>
 8006d6c:	f06f 030f 	mvn.w	r3, #15
 8006d70:	e017      	b.n	8006da2 <tcp_close+0x52>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
 8006d72:	4811      	ldr	r0, [pc, #68]	; (8006db8 <tcp_close+0x68>)
 8006d74:	f7fa fabd 	bl	80012f2 <lwip_win32_platform_diag>

  tcp_debug_print_state(pcb->state);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	7d1b      	ldrb	r3, [r3, #20]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f001 fe77 	bl	8008a70 <tcp_debug_print_state>

  if (pcb->state != LISTEN) {
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	7d1b      	ldrb	r3, [r3, #20]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d006      	beq.n	8006d98 <tcp_close+0x48>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	8b5b      	ldrh	r3, [r3, #26]
 8006d8e:	f043 0310 	orr.w	r3, r3, #16
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006d98:	2101      	movs	r1, #1
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7ff fe84 	bl	8006aa8 <tcp_close_shutdown>
 8006da0:	4603      	mov	r3, r0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	0801a674 	.word	0x0801a674
 8006db0:	0801a774 	.word	0x0801a774
 8006db4:	0801a6a8 	.word	0x0801a6a8
 8006db8:	0801a78c 	.word	0x0801a78c

08006dbc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08e      	sub	sp, #56	; 0x38
 8006dc0:	af04      	add	r7, sp, #16
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d107      	bne.n	8006ddc <tcp_abandon+0x20>
 8006dcc:	4b54      	ldr	r3, [pc, #336]	; (8006f20 <tcp_abandon+0x164>)
 8006dce:	f240 223d 	movw	r2, #573	; 0x23d
 8006dd2:	4954      	ldr	r1, [pc, #336]	; (8006f24 <tcp_abandon+0x168>)
 8006dd4:	4854      	ldr	r0, [pc, #336]	; (8006f28 <tcp_abandon+0x16c>)
 8006dd6:	f7fa fa8c 	bl	80012f2 <lwip_win32_platform_diag>
 8006dda:	e09e      	b.n	8006f1a <tcp_abandon+0x15e>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	7d1b      	ldrb	r3, [r3, #20]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d10b      	bne.n	8006dfc <tcp_abandon+0x40>
 8006de4:	4b4e      	ldr	r3, [pc, #312]	; (8006f20 <tcp_abandon+0x164>)
 8006de6:	f240 2241 	movw	r2, #577	; 0x241
 8006dea:	4950      	ldr	r1, [pc, #320]	; (8006f2c <tcp_abandon+0x170>)
 8006dec:	484e      	ldr	r0, [pc, #312]	; (8006f28 <tcp_abandon+0x16c>)
 8006dee:	f011 f821 	bl	8017e34 <iprintf>
 8006df2:	2000      	movs	r0, #0
 8006df4:	f011 f920 	bl	8018038 <fflush>
 8006df8:	f011 f865 	bl	8017ec6 <abort>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	7d1b      	ldrb	r3, [r3, #20]
 8006e00:	2b0a      	cmp	r3, #10
 8006e02:	d107      	bne.n	8006e14 <tcp_abandon+0x58>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	484a      	ldr	r0, [pc, #296]	; (8006f30 <tcp_abandon+0x174>)
 8006e08:	f001 fba0 	bl	800854c <tcp_pcb_remove>
    tcp_free(pcb);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff fd7f 	bl	8006910 <tcp_free>
 8006e12:	e082      	b.n	8006f1a <tcp_abandon+0x15e>
  } else {
    int send_rst = 0;
 8006e14:	2300      	movs	r3, #0
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e20:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e26:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e2e:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	7d1b      	ldrb	r3, [r3, #20]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d126      	bne.n	8006e8c <tcp_abandon+0xd0>
      if (pcb->local_port != 0) {
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	8adb      	ldrh	r3, [r3, #22]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d02e      	beq.n	8006ea4 <tcp_abandon+0xe8>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006e46:	4b3b      	ldr	r3, [pc, #236]	; (8006f34 <tcp_abandon+0x178>)
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d105      	bne.n	8006e5c <tcp_abandon+0xa0>
 8006e50:	4b38      	ldr	r3, [pc, #224]	; (8006f34 <tcp_abandon+0x178>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	4a37      	ldr	r2, [pc, #220]	; (8006f34 <tcp_abandon+0x178>)
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	e013      	b.n	8006e84 <tcp_abandon+0xc8>
 8006e5c:	4b35      	ldr	r3, [pc, #212]	; (8006f34 <tcp_abandon+0x178>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	61fb      	str	r3, [r7, #28]
 8006e62:	e00c      	b.n	8006e7e <tcp_abandon+0xc2>
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	68da      	ldr	r2, [r3, #12]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d104      	bne.n	8006e78 <tcp_abandon+0xbc>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68da      	ldr	r2, [r3, #12]
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	60da      	str	r2, [r3, #12]
 8006e76:	e005      	b.n	8006e84 <tcp_abandon+0xc8>
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	61fb      	str	r3, [r7, #28]
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1ef      	bne.n	8006e64 <tcp_abandon+0xa8>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	60da      	str	r2, [r3, #12]
 8006e8a:	e00b      	b.n	8006ea4 <tcp_abandon+0xe8>
      }
    } else {
      send_rst = reset;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	8adb      	ldrh	r3, [r3, #22]
 8006e94:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006e96:	6879      	ldr	r1, [r7, #4]
 8006e98:	4827      	ldr	r0, [pc, #156]	; (8006f38 <tcp_abandon+0x17c>)
 8006e9a:	f001 fb57 	bl	800854c <tcp_pcb_remove>
 8006e9e:	4b27      	ldr	r3, [pc, #156]	; (8006f3c <tcp_abandon+0x180>)
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d004      	beq.n	8006eb6 <tcp_abandon+0xfa>
      tcp_segs_free(pcb->unacked);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 ffd1 	bl	8007e58 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d004      	beq.n	8006ec8 <tcp_abandon+0x10c>
      tcp_segs_free(pcb->unsent);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 ffc8 	bl	8007e58 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d004      	beq.n	8006eda <tcp_abandon+0x11e>
      tcp_segs_free(pcb->ooseq);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 ffbf 	bl	8007e58 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00e      	beq.n	8006efe <tcp_abandon+0x142>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	8b12      	ldrh	r2, [r2, #24]
 8006eea:	9202      	str	r2, [sp, #8]
 8006eec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006eee:	9201      	str	r2, [sp, #4]
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	69b9      	ldr	r1, [r7, #24]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f006 fa47 	bl	800d38c <tcp_rst>
    }
    last_state = pcb->state;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	7d1b      	ldrb	r3, [r3, #20]
 8006f02:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7ff fd03 	bl	8006910 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d004      	beq.n	8006f1a <tcp_abandon+0x15e>
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f06f 010c 	mvn.w	r1, #12
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	4798      	blx	r3
  }
}
 8006f1a:	3728      	adds	r7, #40	; 0x28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	0801a674 	.word	0x0801a674
 8006f24:	0801a7c0 	.word	0x0801a7c0
 8006f28:	0801a6a8 	.word	0x0801a6a8
 8006f2c:	0801a7dc 	.word	0x0801a7dc
 8006f30:	2000404c 	.word	0x2000404c
 8006f34:	20004048 	.word	0x20004048
 8006f38:	2000403c 	.word	0x2000403c
 8006f3c:	20004038 	.word	0x20004038

08006f40 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006f48:	2101      	movs	r1, #1
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7ff ff36 	bl	8006dbc <tcp_abandon>
}
 8006f50:	bf00      	nop
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	4613      	mov	r3, r2
 8006f64:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8006f66:	2304      	movs	r3, #4
 8006f68:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8006f70:	4b41      	ldr	r3, [pc, #260]	; (8007078 <tcp_bind+0x120>)
 8006f72:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d109      	bne.n	8006f8e <tcp_bind+0x36>
 8006f7a:	4b40      	ldr	r3, [pc, #256]	; (800707c <tcp_bind+0x124>)
 8006f7c:	f240 22aa 	movw	r2, #682	; 0x2aa
 8006f80:	493f      	ldr	r1, [pc, #252]	; (8007080 <tcp_bind+0x128>)
 8006f82:	4840      	ldr	r0, [pc, #256]	; (8007084 <tcp_bind+0x12c>)
 8006f84:	f7fa f9b5 	bl	80012f2 <lwip_win32_platform_diag>
 8006f88:	f06f 030f 	mvn.w	r3, #15
 8006f8c:	e06f      	b.n	800706e <tcp_bind+0x116>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	7d1b      	ldrb	r3, [r3, #20]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d009      	beq.n	8006faa <tcp_bind+0x52>
 8006f96:	4b39      	ldr	r3, [pc, #228]	; (800707c <tcp_bind+0x124>)
 8006f98:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8006f9c:	493a      	ldr	r1, [pc, #232]	; (8007088 <tcp_bind+0x130>)
 8006f9e:	4839      	ldr	r0, [pc, #228]	; (8007084 <tcp_bind+0x12c>)
 8006fa0:	f7fa f9a7 	bl	80012f2 <lwip_win32_platform_diag>
 8006fa4:	f06f 0305 	mvn.w	r3, #5
 8006fa8:	e061      	b.n	800706e <tcp_bind+0x116>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8006faa:	88fb      	ldrh	r3, [r7, #6]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d109      	bne.n	8006fc4 <tcp_bind+0x6c>
    port = tcp_new_port();
 8006fb0:	f000 f940 	bl	8007234 <tcp_new_port>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006fb8:	88fb      	ldrh	r3, [r7, #6]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d135      	bne.n	800702a <tcp_bind+0xd2>
      return ERR_BUF;
 8006fbe:	f06f 0301 	mvn.w	r3, #1
 8006fc2:	e054      	b.n	800706e <tcp_bind+0x116>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61fb      	str	r3, [r7, #28]
 8006fc8:	e02b      	b.n	8007022 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006fca:	4a30      	ldr	r2, [pc, #192]	; (800708c <tcp_bind+0x134>)
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	e01e      	b.n	8007016 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	8adb      	ldrh	r3, [r3, #22]
 8006fdc:	88fa      	ldrh	r2, [r7, #6]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d116      	bne.n	8007010 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8006fe2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d010      	beq.n	800700a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00c      	beq.n	800700a <tcp_bind+0xb2>
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d009      	beq.n	800700a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d005      	beq.n	800700a <tcp_bind+0xb2>
                 ip_addr_eq(&cpcb->local_ip, ipaddr))) {
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007006:	429a      	cmp	r2, r3
 8007008:	d102      	bne.n	8007010 <tcp_bind+0xb8>
              return ERR_USE;
 800700a:	f06f 0307 	mvn.w	r3, #7
 800700e:	e02e      	b.n	800706e <tcp_bind+0x116>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	61bb      	str	r3, [r7, #24]
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1dd      	bne.n	8006fd8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	3301      	adds	r3, #1
 8007020:	61fb      	str	r3, [r7, #28]
 8007022:	69fa      	ldr	r2, [r7, #28]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	429a      	cmp	r2, r3
 8007028:	dbcf      	blt.n	8006fca <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00c      	beq.n	800704a <tcp_bind+0xf2>
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d008      	beq.n	800704a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <tcp_bind+0xec>
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	e000      	b.n	8007046 <tcp_bind+0xee>
 8007044:	2300      	movs	r3, #0
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	88fa      	ldrh	r2, [r7, #6]
 800704e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007050:	4b0f      	ldr	r3, [pc, #60]	; (8007090 <tcp_bind+0x138>)
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	60da      	str	r2, [r3, #12]
 8007058:	4a0d      	ldr	r2, [pc, #52]	; (8007090 <tcp_bind+0x138>)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	f006 fbe3 	bl	800d828 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
 8007062:	88fb      	ldrh	r3, [r7, #6]
 8007064:	4619      	mov	r1, r3
 8007066:	480b      	ldr	r0, [pc, #44]	; (8007094 <tcp_bind+0x13c>)
 8007068:	f7fa f943 	bl	80012f2 <lwip_win32_platform_diag>
  return ERR_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3720      	adds	r7, #32
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	0801da38 	.word	0x0801da38
 800707c:	0801a674 	.word	0x0801a674
 8007080:	0801a810 	.word	0x0801a810
 8007084:	0801a6a8 	.word	0x0801a6a8
 8007088:	0801a828 	.word	0x0801a828
 800708c:	0801db88 	.word	0x0801db88
 8007090:	20004048 	.word	0x20004048
 8007094:	0801a850 	.word	0x0801a850

08007098 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10b      	bne.n	80070be <tcp_update_rcv_ann_wnd+0x26>
 80070a6:	4b2b      	ldr	r3, [pc, #172]	; (8007154 <tcp_update_rcv_ann_wnd+0xbc>)
 80070a8:	f240 32aa 	movw	r2, #938	; 0x3aa
 80070ac:	492a      	ldr	r1, [pc, #168]	; (8007158 <tcp_update_rcv_ann_wnd+0xc0>)
 80070ae:	482b      	ldr	r0, [pc, #172]	; (800715c <tcp_update_rcv_ann_wnd+0xc4>)
 80070b0:	f010 fec0 	bl	8017e34 <iprintf>
 80070b4:	2000      	movs	r0, #0
 80070b6:	f010 ffbf 	bl	8018038 <fflush>
 80070ba:	f010 ff04 	bl	8017ec6 <abort>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80070c6:	4413      	add	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80070d2:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80070d6:	d802      	bhi.n	80070de <tcp_update_rcv_ann_wnd+0x46>
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80070dc:	e001      	b.n	80070e2 <tcp_update_rcv_ann_wnd+0x4a>
 80070de:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80070e2:	4413      	add	r3, r2
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	db08      	blt.n	80070fe <tcp_update_rcv_ann_wnd+0x66>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	e025      	b.n	800714a <tcp_update_rcv_ann_wnd+0xb2>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	da03      	bge.n	8007114 <tcp_update_rcv_ann_wnd+0x7c>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007112:	e019      	b.n	8007148 <tcp_update_rcv_ann_wnd+0xb0>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007126:	d30b      	bcc.n	8007140 <tcp_update_rcv_ann_wnd+0xa8>
 8007128:	4b0a      	ldr	r3, [pc, #40]	; (8007154 <tcp_update_rcv_ann_wnd+0xbc>)
 800712a:	f240 32ba 	movw	r2, #954	; 0x3ba
 800712e:	490c      	ldr	r1, [pc, #48]	; (8007160 <tcp_update_rcv_ann_wnd+0xc8>)
 8007130:	480a      	ldr	r0, [pc, #40]	; (800715c <tcp_update_rcv_ann_wnd+0xc4>)
 8007132:	f010 fe7f 	bl	8017e34 <iprintf>
 8007136:	2000      	movs	r0, #0
 8007138:	f010 ff7e 	bl	8018038 <fflush>
 800713c:	f010 fec3 	bl	8017ec6 <abort>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	b29a      	uxth	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007148:	2300      	movs	r3, #0
  }
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	0801a674 	.word	0x0801a674
 8007158:	0801a8f4 	.word	0x0801a8f4
 800715c:	0801a6a8 	.word	0x0801a6a8
 8007160:	0801a918 	.word	0x0801a918

08007164 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	460b      	mov	r3, r1
 800716e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d107      	bne.n	8007186 <tcp_recved+0x22>
 8007176:	4b29      	ldr	r3, [pc, #164]	; (800721c <tcp_recved+0xb8>)
 8007178:	f240 32d3 	movw	r2, #979	; 0x3d3
 800717c:	4928      	ldr	r1, [pc, #160]	; (8007220 <tcp_recved+0xbc>)
 800717e:	4829      	ldr	r0, [pc, #164]	; (8007224 <tcp_recved+0xc0>)
 8007180:	f7fa f8b7 	bl	80012f2 <lwip_win32_platform_diag>
 8007184:	e046      	b.n	8007214 <tcp_recved+0xb0>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	7d1b      	ldrb	r3, [r3, #20]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d10b      	bne.n	80071a6 <tcp_recved+0x42>
 800718e:	4b23      	ldr	r3, [pc, #140]	; (800721c <tcp_recved+0xb8>)
 8007190:	f240 32d7 	movw	r2, #983	; 0x3d7
 8007194:	4924      	ldr	r1, [pc, #144]	; (8007228 <tcp_recved+0xc4>)
 8007196:	4823      	ldr	r0, [pc, #140]	; (8007224 <tcp_recved+0xc0>)
 8007198:	f010 fe4c 	bl	8017e34 <iprintf>
 800719c:	2000      	movs	r0, #0
 800719e:	f010 ff4b 	bl	8018038 <fflush>
 80071a2:	f010 fe90 	bl	8017ec6 <abort>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80071aa:	887b      	ldrh	r3, [r7, #2]
 80071ac:	4413      	add	r3, r2
 80071ae:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80071b0:	89fb      	ldrh	r3, [r7, #14]
 80071b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80071b6:	d804      	bhi.n	80071c2 <tcp_recved+0x5e>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071bc:	89fa      	ldrh	r2, [r7, #14]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d207      	bcs.n	80071d2 <tcp_recved+0x6e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
 80071c2:	481a      	ldr	r0, [pc, #104]	; (800722c <tcp_recved+0xc8>)
 80071c4:	f7fa f895 	bl	80012f2 <lwip_win32_platform_diag>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80071ce:	851a      	strh	r2, [r3, #40]	; 0x28
 80071d0:	e002      	b.n	80071d8 <tcp_recved+0x74>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	89fa      	ldrh	r2, [r7, #14]
 80071d6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff ff5d 	bl	8007098 <tcp_update_rcv_ann_wnd>
 80071de:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80071e6:	d309      	bcc.n	80071fc <tcp_recved+0x98>
    tcp_ack_now(pcb);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	8b5b      	ldrh	r3, [r3, #26]
 80071ec:	f043 0302 	orr.w	r3, r3, #2
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f005 f9f0 	bl	800c5dc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
 80071fc:	8879      	ldrh	r1, [r7, #2]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007202:	461a      	mov	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007208:	f5c3 6306 	rsb	r3, r3, #2144	; 0x860
 800720c:	b29b      	uxth	r3, r3
 800720e:	4808      	ldr	r0, [pc, #32]	; (8007230 <tcp_recved+0xcc>)
 8007210:	f7fa f86f 	bl	80012f2 <lwip_win32_platform_diag>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	0801a674 	.word	0x0801a674
 8007220:	0801a934 	.word	0x0801a934
 8007224:	0801a6a8 	.word	0x0801a6a8
 8007228:	0801a94c 	.word	0x0801a94c
 800722c:	0801a974 	.word	0x0801a974
 8007230:	0801a9b0 	.word	0x0801a9b0

08007234 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800723a:	2300      	movs	r3, #0
 800723c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800723e:	4b1e      	ldr	r3, [pc, #120]	; (80072b8 <tcp_new_port+0x84>)
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	3301      	adds	r3, #1
 8007244:	b29a      	uxth	r2, r3
 8007246:	4b1c      	ldr	r3, [pc, #112]	; (80072b8 <tcp_new_port+0x84>)
 8007248:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800724a:	4b1b      	ldr	r3, [pc, #108]	; (80072b8 <tcp_new_port+0x84>)
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007252:	4293      	cmp	r3, r2
 8007254:	d103      	bne.n	800725e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007256:	4b18      	ldr	r3, [pc, #96]	; (80072b8 <tcp_new_port+0x84>)
 8007258:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800725c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800725e:	2300      	movs	r3, #0
 8007260:	71fb      	strb	r3, [r7, #7]
 8007262:	e01e      	b.n	80072a2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007264:	79fb      	ldrb	r3, [r7, #7]
 8007266:	4a15      	ldr	r2, [pc, #84]	; (80072bc <tcp_new_port+0x88>)
 8007268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	603b      	str	r3, [r7, #0]
 8007270:	e011      	b.n	8007296 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	8ada      	ldrh	r2, [r3, #22]
 8007276:	4b10      	ldr	r3, [pc, #64]	; (80072b8 <tcp_new_port+0x84>)
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	429a      	cmp	r2, r3
 800727c:	d108      	bne.n	8007290 <tcp_new_port+0x5c>
        n++;
 800727e:	88bb      	ldrh	r3, [r7, #4]
 8007280:	3301      	adds	r3, #1
 8007282:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007284:	88bb      	ldrh	r3, [r7, #4]
 8007286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800728a:	d3d8      	bcc.n	800723e <tcp_new_port+0xa>
          return 0;
 800728c:	2300      	movs	r3, #0
 800728e:	e00d      	b.n	80072ac <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	603b      	str	r3, [r7, #0]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1ea      	bne.n	8007272 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	3301      	adds	r3, #1
 80072a0:	71fb      	strb	r3, [r7, #7]
 80072a2:	79fb      	ldrb	r3, [r7, #7]
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d9dd      	bls.n	8007264 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80072a8:	4b03      	ldr	r3, [pc, #12]	; (80072b8 <tcp_new_port+0x84>)
 80072aa:	881b      	ldrh	r3, [r3, #0]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	20000008 	.word	0x20000008
 80072bc:	0801db88 	.word	0x0801db88

080072c0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08a      	sub	sp, #40	; 0x28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	603b      	str	r3, [r7, #0]
 80072cc:	4613      	mov	r3, r2
 80072ce:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80072d0:	2300      	movs	r3, #0
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d109      	bne.n	80072ee <tcp_connect+0x2e>
 80072da:	4b80      	ldr	r3, [pc, #512]	; (80074dc <tcp_connect+0x21c>)
 80072dc:	f240 4239 	movw	r2, #1081	; 0x439
 80072e0:	497f      	ldr	r1, [pc, #508]	; (80074e0 <tcp_connect+0x220>)
 80072e2:	4880      	ldr	r0, [pc, #512]	; (80074e4 <tcp_connect+0x224>)
 80072e4:	f7fa f805 	bl	80012f2 <lwip_win32_platform_diag>
 80072e8:	f06f 030f 	mvn.w	r3, #15
 80072ec:	e0f1      	b.n	80074d2 <tcp_connect+0x212>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d109      	bne.n	8007308 <tcp_connect+0x48>
 80072f4:	4b79      	ldr	r3, [pc, #484]	; (80074dc <tcp_connect+0x21c>)
 80072f6:	f240 423a 	movw	r2, #1082	; 0x43a
 80072fa:	497b      	ldr	r1, [pc, #492]	; (80074e8 <tcp_connect+0x228>)
 80072fc:	4879      	ldr	r0, [pc, #484]	; (80074e4 <tcp_connect+0x224>)
 80072fe:	f7f9 fff8 	bl	80012f2 <lwip_win32_platform_diag>
 8007302:	f06f 030f 	mvn.w	r3, #15
 8007306:	e0e4      	b.n	80074d2 <tcp_connect+0x212>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	7d1b      	ldrb	r3, [r3, #20]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d009      	beq.n	8007324 <tcp_connect+0x64>
 8007310:	4b72      	ldr	r3, [pc, #456]	; (80074dc <tcp_connect+0x21c>)
 8007312:	f240 423c 	movw	r2, #1084	; 0x43c
 8007316:	4975      	ldr	r1, [pc, #468]	; (80074ec <tcp_connect+0x22c>)
 8007318:	4872      	ldr	r0, [pc, #456]	; (80074e4 <tcp_connect+0x224>)
 800731a:	f7f9 ffea 	bl	80012f2 <lwip_win32_platform_diag>
 800731e:	f06f 0309 	mvn.w	r3, #9
 8007322:	e0d6      	b.n	80074d2 <tcp_connect+0x212>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
 8007324:	88fb      	ldrh	r3, [r7, #6]
 8007326:	4619      	mov	r1, r3
 8007328:	4871      	ldr	r0, [pc, #452]	; (80074f0 <tcp_connect+0x230>)
 800732a:	f7f9 ffe2 	bl	80012f2 <lwip_win32_platform_diag>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <tcp_connect+0x7a>
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	e000      	b.n	800733c <tcp_connect+0x7c>
 800733a:	2300      	movs	r3, #0
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	88fa      	ldrh	r2, [r7, #6]
 8007344:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	7a1b      	ldrb	r3, [r3, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d006      	beq.n	800735c <tcp_connect+0x9c>
    netif = netif_get_by_index(pcb->netif_idx);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	7a1b      	ldrb	r3, [r3, #8]
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe fa10 	bl	8005778 <netif_get_by_index>
 8007358:	6278      	str	r0, [r7, #36]	; 0x24
 800735a:	e005      	b.n	8007368 <tcp_connect+0xa8>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3304      	adds	r3, #4
 8007360:	4618      	mov	r0, r3
 8007362:	f7fc fe6d 	bl	8004040 <ip4_route>
 8007366:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	2b00      	cmp	r3, #0
 800736c:	d102      	bne.n	8007374 <tcp_connect+0xb4>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800736e:	f06f 0303 	mvn.w	r3, #3
 8007372:	e0ae      	b.n	80074d2 <tcp_connect+0x212>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <tcp_connect+0xc2>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d111      	bne.n	80073a6 <tcp_connect+0xe6>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <tcp_connect+0xce>
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	3304      	adds	r3, #4
 800738c:	e000      	b.n	8007390 <tcp_connect+0xd0>
 800738e:	2300      	movs	r3, #0
 8007390:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d102      	bne.n	800739e <tcp_connect+0xde>
      return ERR_RTE;
 8007398:	f06f 0303 	mvn.w	r3, #3
 800739c:	e099      	b.n	80074d2 <tcp_connect+0x212>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	8adb      	ldrh	r3, [r3, #22]
 80073aa:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8adb      	ldrh	r3, [r3, #22]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10c      	bne.n	80073ce <tcp_connect+0x10e>
    pcb->local_port = tcp_new_port();
 80073b4:	f7ff ff3e 	bl	8007234 <tcp_new_port>
 80073b8:	4603      	mov	r3, r0
 80073ba:	461a      	mov	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8adb      	ldrh	r3, [r3, #22]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d102      	bne.n	80073ce <tcp_connect+0x10e>
      return ERR_BUF;
 80073c8:	f06f 0301 	mvn.w	r3, #1
 80073cc:	e081      	b.n	80074d2 <tcp_connect+0x212>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f001 f97c 	bl	80086cc <tcp_next_iss>
 80073d4:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	1e5a      	subs	r2, r3, #1
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	1e5a      	subs	r2, r3, #1
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	1e5a      	subs	r2, r3, #1
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007400:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007418:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007422:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	3304      	adds	r3, #4
 800742c:	461a      	mov	r2, r3
 800742e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007430:	f001 f976 	bl	8008720 <tcp_eff_send_mss_netif>
 8007434:	4603      	mov	r3, r0
 8007436:	461a      	mov	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2201      	movs	r2, #1
 8007440:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800744c:	2102      	movs	r1, #2
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f004 ffca 	bl	800c3e8 <tcp_enqueue_flags>
 8007454:	4603      	mov	r3, r0
 8007456:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8007458:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d136      	bne.n	80074ce <tcp_connect+0x20e>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2202      	movs	r2, #2
 8007464:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8007466:	8b7b      	ldrh	r3, [r7, #26]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d021      	beq.n	80074b0 <tcp_connect+0x1f0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800746c:	4b21      	ldr	r3, [pc, #132]	; (80074f4 <tcp_connect+0x234>)
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	429a      	cmp	r2, r3
 8007474:	d105      	bne.n	8007482 <tcp_connect+0x1c2>
 8007476:	4b1f      	ldr	r3, [pc, #124]	; (80074f4 <tcp_connect+0x234>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	4a1d      	ldr	r2, [pc, #116]	; (80074f4 <tcp_connect+0x234>)
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	e013      	b.n	80074aa <tcp_connect+0x1ea>
 8007482:	4b1c      	ldr	r3, [pc, #112]	; (80074f4 <tcp_connect+0x234>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	623b      	str	r3, [r7, #32]
 8007488:	e00c      	b.n	80074a4 <tcp_connect+0x1e4>
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	68da      	ldr	r2, [r3, #12]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	429a      	cmp	r2, r3
 8007492:	d104      	bne.n	800749e <tcp_connect+0x1de>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	60da      	str	r2, [r3, #12]
 800749c:	e005      	b.n	80074aa <tcp_connect+0x1ea>
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	623b      	str	r3, [r7, #32]
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1ef      	bne.n	800748a <tcp_connect+0x1ca>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80074b0:	4b11      	ldr	r3, [pc, #68]	; (80074f8 <tcp_connect+0x238>)
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	60da      	str	r2, [r3, #12]
 80074b8:	4a0f      	ldr	r2, [pc, #60]	; (80074f8 <tcp_connect+0x238>)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6013      	str	r3, [r2, #0]
 80074be:	f006 f9b3 	bl	800d828 <tcp_timer_needed>
 80074c2:	4b0e      	ldr	r3, [pc, #56]	; (80074fc <tcp_connect+0x23c>)
 80074c4:	2201      	movs	r2, #1
 80074c6:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f005 f887 	bl	800c5dc <tcp_output>
  }
  return ret;
 80074ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3728      	adds	r7, #40	; 0x28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	0801a674 	.word	0x0801a674
 80074e0:	0801a9e0 	.word	0x0801a9e0
 80074e4:	0801a6a8 	.word	0x0801a6a8
 80074e8:	0801a9fc 	.word	0x0801a9fc
 80074ec:	0801aa18 	.word	0x0801aa18
 80074f0:	0801aa48 	.word	0x0801aa48
 80074f4:	20004048 	.word	0x20004048
 80074f8:	2000403c 	.word	0x2000403c
 80074fc:	20004038 	.word	0x20004038

08007500 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007500:	b5b0      	push	{r4, r5, r7, lr}
 8007502:	b090      	sub	sp, #64	; 0x40
 8007504:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800750c:	4ba9      	ldr	r3, [pc, #676]	; (80077b4 <tcp_slowtmr+0x2b4>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3301      	adds	r3, #1
 8007512:	4aa8      	ldr	r2, [pc, #672]	; (80077b4 <tcp_slowtmr+0x2b4>)
 8007514:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007516:	4ba8      	ldr	r3, [pc, #672]	; (80077b8 <tcp_slowtmr+0x2b8>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	3301      	adds	r3, #1
 800751c:	b2da      	uxtb	r2, r3
 800751e:	4ba6      	ldr	r3, [pc, #664]	; (80077b8 <tcp_slowtmr+0x2b8>)
 8007520:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007522:	2300      	movs	r3, #0
 8007524:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007526:	4ba5      	ldr	r3, [pc, #660]	; (80077bc <tcp_slowtmr+0x2bc>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
 800752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752e:	2b00      	cmp	r3, #0
 8007530:	f040 8322 	bne.w	8007b78 <tcp_slowtmr+0x678>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
 8007534:	48a2      	ldr	r0, [pc, #648]	; (80077c0 <tcp_slowtmr+0x2c0>)
 8007536:	f7f9 fedc 	bl	80012f2 <lwip_win32_platform_diag>
  }
  while (pcb != NULL) {
 800753a:	e31d      	b.n	8007b78 <tcp_slowtmr+0x678>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
 800753c:	48a1      	ldr	r0, [pc, #644]	; (80077c4 <tcp_slowtmr+0x2c4>)
 800753e:	f7f9 fed8 	bl	80012f2 <lwip_win32_platform_diag>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007544:	7d1b      	ldrb	r3, [r3, #20]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10b      	bne.n	8007562 <tcp_slowtmr+0x62>
 800754a:	4b9f      	ldr	r3, [pc, #636]	; (80077c8 <tcp_slowtmr+0x2c8>)
 800754c:	f240 42c2 	movw	r2, #1218	; 0x4c2
 8007550:	499e      	ldr	r1, [pc, #632]	; (80077cc <tcp_slowtmr+0x2cc>)
 8007552:	489f      	ldr	r0, [pc, #636]	; (80077d0 <tcp_slowtmr+0x2d0>)
 8007554:	f010 fc6e 	bl	8017e34 <iprintf>
 8007558:	2000      	movs	r0, #0
 800755a:	f010 fd6d 	bl	8018038 <fflush>
 800755e:	f010 fcb2 	bl	8017ec6 <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007564:	7d1b      	ldrb	r3, [r3, #20]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d10b      	bne.n	8007582 <tcp_slowtmr+0x82>
 800756a:	4b97      	ldr	r3, [pc, #604]	; (80077c8 <tcp_slowtmr+0x2c8>)
 800756c:	f240 42c3 	movw	r2, #1219	; 0x4c3
 8007570:	4998      	ldr	r1, [pc, #608]	; (80077d4 <tcp_slowtmr+0x2d4>)
 8007572:	4897      	ldr	r0, [pc, #604]	; (80077d0 <tcp_slowtmr+0x2d0>)
 8007574:	f010 fc5e 	bl	8017e34 <iprintf>
 8007578:	2000      	movs	r0, #0
 800757a:	f010 fd5d 	bl	8018038 <fflush>
 800757e:	f010 fca2 	bl	8017ec6 <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	7d1b      	ldrb	r3, [r3, #20]
 8007586:	2b0a      	cmp	r3, #10
 8007588:	d10b      	bne.n	80075a2 <tcp_slowtmr+0xa2>
 800758a:	4b8f      	ldr	r3, [pc, #572]	; (80077c8 <tcp_slowtmr+0x2c8>)
 800758c:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8007590:	4991      	ldr	r1, [pc, #580]	; (80077d8 <tcp_slowtmr+0x2d8>)
 8007592:	488f      	ldr	r0, [pc, #572]	; (80077d0 <tcp_slowtmr+0x2d0>)
 8007594:	f010 fc4e 	bl	8017e34 <iprintf>
 8007598:	2000      	movs	r0, #0
 800759a:	f010 fd4d 	bl	8018038 <fflush>
 800759e:	f010 fc92 	bl	8017ec6 <abort>
    if (pcb->last_timer == tcp_timer_ctr) {
 80075a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a4:	7f9a      	ldrb	r2, [r3, #30]
 80075a6:	4b84      	ldr	r3, [pc, #528]	; (80077b8 <tcp_slowtmr+0x2b8>)
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d105      	bne.n	80075ba <tcp_slowtmr+0xba>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80075ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b0:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80075b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80075b8:	e2de      	b.n	8007b78 <tcp_slowtmr+0x678>
    }
    pcb->last_timer = tcp_timer_ctr;
 80075ba:	4b7f      	ldr	r3, [pc, #508]	; (80077b8 <tcp_slowtmr+0x2b8>)
 80075bc:	781a      	ldrb	r2, [r3, #0]
 80075be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c0:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80075c8:	2300      	movs	r3, #0
 80075ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	7d1b      	ldrb	r3, [r3, #20]
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d10d      	bne.n	80075f2 <tcp_slowtmr+0xf2>
 80075d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075dc:	2b05      	cmp	r3, #5
 80075de:	d908      	bls.n	80075f2 <tcp_slowtmr+0xf2>
      ++pcb_remove;
 80075e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075e4:	3301      	adds	r3, #1
 80075e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 80075ea:	487c      	ldr	r0, [pc, #496]	; (80077dc <tcp_slowtmr+0x2dc>)
 80075ec:	f7f9 fe81 	bl	80012f2 <lwip_win32_platform_diag>
 80075f0:	e134      	b.n	800785c <tcp_slowtmr+0x35c>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80075f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075f8:	2b0b      	cmp	r3, #11
 80075fa:	d908      	bls.n	800760e <tcp_slowtmr+0x10e>
      ++pcb_remove;
 80075fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007600:	3301      	adds	r3, #1
 8007602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
 8007606:	4876      	ldr	r0, [pc, #472]	; (80077e0 <tcp_slowtmr+0x2e0>)
 8007608:	f7f9 fe73 	bl	80012f2 <lwip_win32_platform_diag>
 800760c:	e126      	b.n	800785c <tcp_slowtmr+0x35c>
    } else {
      if (pcb->persist_backoff > 0) {
 800760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007610:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007614:	2b00      	cmp	r3, #0
 8007616:	d07f      	beq.n	8007718 <tcp_slowtmr+0x218>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <tcp_slowtmr+0x138>
 8007620:	4b69      	ldr	r3, [pc, #420]	; (80077c8 <tcp_slowtmr+0x2c8>)
 8007622:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 8007626:	496f      	ldr	r1, [pc, #444]	; (80077e4 <tcp_slowtmr+0x2e4>)
 8007628:	4869      	ldr	r0, [pc, #420]	; (80077d0 <tcp_slowtmr+0x2d0>)
 800762a:	f010 fc03 	bl	8017e34 <iprintf>
 800762e:	2000      	movs	r0, #0
 8007630:	f010 fd02 	bl	8018038 <fflush>
 8007634:	f010 fc47 	bl	8017ec6 <abort>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10b      	bne.n	8007658 <tcp_slowtmr+0x158>
 8007640:	4b61      	ldr	r3, [pc, #388]	; (80077c8 <tcp_slowtmr+0x2c8>)
 8007642:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8007646:	4968      	ldr	r1, [pc, #416]	; (80077e8 <tcp_slowtmr+0x2e8>)
 8007648:	4861      	ldr	r0, [pc, #388]	; (80077d0 <tcp_slowtmr+0x2d0>)
 800764a:	f010 fbf3 	bl	8017e34 <iprintf>
 800764e:	2000      	movs	r0, #0
 8007650:	f010 fcf2 	bl	8018038 <fflush>
 8007654:	f010 fc37 	bl	8017ec6 <abort>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800765e:	2b0b      	cmp	r3, #11
 8007660:	d905      	bls.n	800766e <tcp_slowtmr+0x16e>
          ++pcb_remove; /* max probes reached */
 8007662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007666:	3301      	adds	r3, #1
 8007668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800766c:	e0f6      	b.n	800785c <tcp_slowtmr+0x35c>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800766e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007670:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007674:	3b01      	subs	r3, #1
 8007676:	4a5d      	ldr	r2, [pc, #372]	; (80077ec <tcp_slowtmr+0x2ec>)
 8007678:	5cd3      	ldrb	r3, [r2, r3]
 800767a:	77fb      	strb	r3, [r7, #31]
          if (pcb->persist_cnt < backoff_cnt) {
 800767c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007682:	7ffa      	ldrb	r2, [r7, #31]
 8007684:	429a      	cmp	r2, r3
 8007686:	d907      	bls.n	8007698 <tcp_slowtmr+0x198>
            pcb->persist_cnt++;
 8007688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800768e:	3301      	adds	r3, #1
 8007690:	b2da      	uxtb	r2, r3
 8007692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007694:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800769e:	7ffa      	ldrb	r2, [r7, #31]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	f200 80db 	bhi.w	800785c <tcp_slowtmr+0x35c>
            int next_slot = 1; /* increment timer to next slot */
 80076a6:	2301      	movs	r3, #1
 80076a8:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80076aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d108      	bne.n	80076c6 <tcp_slowtmr+0x1c6>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80076b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076b6:	f005 ffa3 	bl	800d600 <tcp_zero_window_probe>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d014      	beq.n	80076ea <tcp_slowtmr+0x1ea>
                next_slot = 0; /* try probe again with current slot */
 80076c0:	2300      	movs	r3, #0
 80076c2:	623b      	str	r3, [r7, #32]
 80076c4:	e011      	b.n	80076ea <tcp_slowtmr+0x1ea>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80076c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80076cc:	4619      	mov	r1, r3
 80076ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076d0:	f004 fcd2 	bl	800c078 <tcp_split_unsent_seg>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d107      	bne.n	80076ea <tcp_slowtmr+0x1ea>
                if (tcp_output(pcb) == ERR_OK) {
 80076da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076dc:	f004 ff7e 	bl	800c5dc <tcp_output>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <tcp_slowtmr+0x1ea>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80076e6:	2300      	movs	r3, #0
 80076e8:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 80b5 	beq.w	800785c <tcp_slowtmr+0x35c>
              pcb->persist_cnt = 0;
 80076f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007700:	2b06      	cmp	r3, #6
 8007702:	f200 80ab 	bhi.w	800785c <tcp_slowtmr+0x35c>
                pcb->persist_backoff++;
 8007706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007708:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800770c:	3301      	adds	r3, #1
 800770e:	b2da      	uxtb	r2, r3
 8007710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007712:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007716:	e0a1      	b.n	800785c <tcp_slowtmr+0x35c>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800771e:	2b00      	cmp	r3, #0
 8007720:	db0f      	blt.n	8007742 <tcp_slowtmr+0x242>
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007728:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800772c:	4293      	cmp	r3, r2
 800772e:	d008      	beq.n	8007742 <tcp_slowtmr+0x242>
          ++pcb->rtime;
 8007730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007732:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007736:	b29b      	uxth	r3, r3
 8007738:	3301      	adds	r3, #1
 800773a:	b29b      	uxth	r3, r3
 800773c:	b21a      	sxth	r2, r3
 800773e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007740:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007744:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800774e:	429a      	cmp	r2, r3
 8007750:	f2c0 8084 	blt.w	800785c <tcp_slowtmr+0x35c>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007754:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007756:	f005 fa77 	bl	800cc48 <tcp_rexmit_rto_prepare>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d007      	beq.n	8007770 <tcp_slowtmr+0x270>
 8007760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007764:	2b00      	cmp	r3, #0
 8007766:	d179      	bne.n	800785c <tcp_slowtmr+0x35c>
 8007768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800776c:	2b00      	cmp	r3, #0
 800776e:	d075      	beq.n	800785c <tcp_slowtmr+0x35c>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007772:	7d1b      	ldrb	r3, [r3, #20]
 8007774:	2b02      	cmp	r3, #2
 8007776:	d042      	beq.n	80077fe <tcp_slowtmr+0x2fe>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800777e:	2b0c      	cmp	r3, #12
 8007780:	bf28      	it	cs
 8007782:	230c      	movcs	r3, #12
 8007784:	77bb      	strb	r3, [r7, #30]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007788:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800778c:	10db      	asrs	r3, r3, #3
 800778e:	b21b      	sxth	r3, r3
 8007790:	461a      	mov	r2, r3
 8007792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007794:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007798:	4413      	add	r3, r2
 800779a:	7fba      	ldrb	r2, [r7, #30]
 800779c:	4914      	ldr	r1, [pc, #80]	; (80077f0 <tcp_slowtmr+0x2f0>)
 800779e:	5c8a      	ldrb	r2, [r1, r2]
 80077a0:	4093      	lsls	r3, r2
 80077a2:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80077aa:	4293      	cmp	r3, r2
 80077ac:	dc22      	bgt.n	80077f4 <tcp_slowtmr+0x2f4>
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	b21a      	sxth	r2, r3
 80077b2:	e021      	b.n	80077f8 <tcp_slowtmr+0x2f8>
 80077b4:	20004040 	.word	0x20004040
 80077b8:	20000bea 	.word	0x20000bea
 80077bc:	2000403c 	.word	0x2000403c
 80077c0:	0801aa64 	.word	0x0801aa64
 80077c4:	0801aa84 	.word	0x0801aa84
 80077c8:	0801a674 	.word	0x0801a674
 80077cc:	0801aaa8 	.word	0x0801aaa8
 80077d0:	0801a6a8 	.word	0x0801a6a8
 80077d4:	0801aad4 	.word	0x0801aad4
 80077d8:	0801ab00 	.word	0x0801ab00
 80077dc:	0801ab2c 	.word	0x0801ab2c
 80077e0:	0801ab54 	.word	0x0801ab54
 80077e4:	0801ab7c 	.word	0x0801ab7c
 80077e8:	0801abb0 	.word	0x0801abb0
 80077ec:	0801db80 	.word	0x0801db80
 80077f0:	0801db70 	.word	0x0801db70
 80077f4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80077f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80077fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007800:	2200      	movs	r2, #0
 8007802:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007806:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800780a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007810:	4293      	cmp	r3, r2
 8007812:	bf28      	it	cs
 8007814:	4613      	movcs	r3, r2
 8007816:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 8007818:	8afb      	ldrh	r3, [r7, #22]
 800781a:	085b      	lsrs	r3, r3, #1
 800781c:	b29a      	uxth	r2, r3
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800782a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	b29b      	uxth	r3, r3
 8007832:	429a      	cmp	r2, r3
 8007834:	d206      	bcs.n	8007844 <tcp_slowtmr+0x344>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007838:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	b29a      	uxth	r2, r3
 800783e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007840:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007846:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800784e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007850:	2200      	movs	r2, #0
 8007852:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007856:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007858:	f005 fa74 	bl	800cd44 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785e:	7d1b      	ldrb	r3, [r3, #20]
 8007860:	2b06      	cmp	r3, #6
 8007862:	d114      	bne.n	800788e <tcp_slowtmr+0x38e>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007866:	8b5b      	ldrh	r3, [r3, #26]
 8007868:	f003 0310 	and.w	r3, r3, #16
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00e      	beq.n	800788e <tcp_slowtmr+0x38e>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007870:	4b95      	ldr	r3, [pc, #596]	; (8007ac8 <tcp_slowtmr+0x5c8>)
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	2b28      	cmp	r3, #40	; 0x28
 800787c:	d907      	bls.n	800788e <tcp_slowtmr+0x38e>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800787e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007882:	3301      	adds	r3, #1
 8007884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in FIN-WAIT-2\n"));
 8007888:	4890      	ldr	r0, [pc, #576]	; (8007acc <tcp_slowtmr+0x5cc>)
 800788a:	f7f9 fd32 	bl	80012f2 <lwip_win32_platform_diag>
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007890:	7a5b      	ldrb	r3, [r3, #9]
 8007892:	f003 0308 	and.w	r3, r3, #8
 8007896:	2b00      	cmp	r3, #0
 8007898:	d069      	beq.n	800796e <tcp_slowtmr+0x46e>
        ((pcb->state == ESTABLISHED) ||
 800789a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d003      	beq.n	80078aa <tcp_slowtmr+0x3aa>
         (pcb->state == CLOSE_WAIT))) {
 80078a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a4:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80078a6:	2b07      	cmp	r3, #7
 80078a8:	d161      	bne.n	800796e <tcp_slowtmr+0x46e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80078aa:	4b87      	ldr	r3, [pc, #540]	; (8007ac8 <tcp_slowtmr+0x5c8>)
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80078b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078ba:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80078be:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80078c2:	4983      	ldr	r1, [pc, #524]	; (8007ad0 <tcp_slowtmr+0x5d0>)
 80078c4:	fba1 1303 	umull	r1, r3, r1, r3
 80078c8:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d927      	bls.n	800791e <tcp_slowtmr+0x41e>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
 80078ce:	4881      	ldr	r0, [pc, #516]	; (8007ad4 <tcp_slowtmr+0x5d4>)
 80078d0:	f7f9 fd0f 	bl	80012f2 <lwip_win32_platform_diag>
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 80078d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	4619      	mov	r1, r3
 80078dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	0a1b      	lsrs	r3, r3, #8
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	461a      	mov	r2, r3
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	0c1b      	lsrs	r3, r3, #16
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	4618      	mov	r0, r3
 80078f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	0e1b      	lsrs	r3, r3, #24
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	4603      	mov	r3, r0
 80078fc:	4876      	ldr	r0, [pc, #472]	; (8007ad8 <tcp_slowtmr+0x5d8>)
 80078fe:	f7f9 fcf8 	bl	80012f2 <lwip_win32_platform_diag>
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 8007902:	4876      	ldr	r0, [pc, #472]	; (8007adc <tcp_slowtmr+0x5dc>)
 8007904:	f7f9 fcf5 	bl	80012f2 <lwip_win32_platform_diag>

        ++pcb_remove;
 8007908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800790c:	3301      	adds	r3, #1
 800790e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007912:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007916:	3301      	adds	r3, #1
 8007918:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800791c:	e027      	b.n	800796e <tcp_slowtmr+0x46e>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800791e:	4b6a      	ldr	r3, [pc, #424]	; (8007ac8 <tcp_slowtmr+0x5c8>)
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800792e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007930:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007934:	4618      	mov	r0, r3
 8007936:	4b6a      	ldr	r3, [pc, #424]	; (8007ae0 <tcp_slowtmr+0x5e0>)
 8007938:	fb03 f300 	mul.w	r3, r3, r0
 800793c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800793e:	4964      	ldr	r1, [pc, #400]	; (8007ad0 <tcp_slowtmr+0x5d0>)
 8007940:	fba1 1303 	umull	r1, r3, r1, r3
 8007944:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007946:	429a      	cmp	r2, r3
 8007948:	d911      	bls.n	800796e <tcp_slowtmr+0x46e>
        err = tcp_keepalive(pcb);
 800794a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800794c:	f005 fdd0 	bl	800d4f0 <tcp_keepalive>
 8007950:	4603      	mov	r3, r0
 8007952:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007956:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800795a:	2b00      	cmp	r3, #0
 800795c:	d107      	bne.n	800796e <tcp_slowtmr+0x46e>
          pcb->keep_cnt_sent++;
 800795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007960:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007964:	3301      	adds	r3, #1
 8007966:	b2da      	uxtb	r2, r3
 8007968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800796e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007972:	2b00      	cmp	r3, #0
 8007974:	d011      	beq.n	800799a <tcp_slowtmr+0x49a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007976:	4b54      	ldr	r3, [pc, #336]	; (8007ac8 <tcp_slowtmr+0x5c8>)
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	1ad2      	subs	r2, r2, r3
 8007980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007982:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007986:	4619      	mov	r1, r3
 8007988:	460b      	mov	r3, r1
 800798a:	005b      	lsls	r3, r3, #1
 800798c:	440b      	add	r3, r1
 800798e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007990:	429a      	cmp	r2, r3
 8007992:	d302      	bcc.n	800799a <tcp_slowtmr+0x49a>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007996:	f000 ff77 	bl	8008888 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800799a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799c:	7d1b      	ldrb	r3, [r3, #20]
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d10e      	bne.n	80079c0 <tcp_slowtmr+0x4c0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80079a2:	4b49      	ldr	r3, [pc, #292]	; (8007ac8 <tcp_slowtmr+0x5c8>)
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	2b28      	cmp	r3, #40	; 0x28
 80079ae:	d907      	bls.n	80079c0 <tcp_slowtmr+0x4c0>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80079b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079b4:	3301      	adds	r3, #1
 80079b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
 80079ba:	484a      	ldr	r0, [pc, #296]	; (8007ae4 <tcp_slowtmr+0x5e4>)
 80079bc:	f7f9 fc99 	bl	80012f2 <lwip_win32_platform_diag>
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80079c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c2:	7d1b      	ldrb	r3, [r3, #20]
 80079c4:	2b09      	cmp	r3, #9
 80079c6:	d10e      	bne.n	80079e6 <tcp_slowtmr+0x4e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80079c8:	4b3f      	ldr	r3, [pc, #252]	; (8007ac8 <tcp_slowtmr+0x5c8>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	2bf0      	cmp	r3, #240	; 0xf0
 80079d4:	d907      	bls.n	80079e6 <tcp_slowtmr+0x4e6>
        ++pcb_remove;
 80079d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079da:	3301      	adds	r3, #1
 80079dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
 80079e0:	4841      	ldr	r0, [pc, #260]	; (8007ae8 <tcp_slowtmr+0x5e8>)
 80079e2:	f7f9 fc86 	bl	80012f2 <lwip_win32_platform_diag>
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80079e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 808a 	beq.w	8007b04 <tcp_slowtmr+0x604>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80079f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f6:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80079f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079fa:	f000 fd35 	bl	8008468 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80079fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d015      	beq.n	8007a30 <tcp_slowtmr+0x530>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007a04:	4b39      	ldr	r3, [pc, #228]	; (8007aec <tcp_slowtmr+0x5ec>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d10b      	bne.n	8007a26 <tcp_slowtmr+0x526>
 8007a0e:	4b38      	ldr	r3, [pc, #224]	; (8007af0 <tcp_slowtmr+0x5f0>)
 8007a10:	f240 5271 	movw	r2, #1393	; 0x571
 8007a14:	4937      	ldr	r1, [pc, #220]	; (8007af4 <tcp_slowtmr+0x5f4>)
 8007a16:	4838      	ldr	r0, [pc, #224]	; (8007af8 <tcp_slowtmr+0x5f8>)
 8007a18:	f010 fa0c 	bl	8017e34 <iprintf>
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	f010 fb0b 	bl	8018038 <fflush>
 8007a22:	f010 fa50 	bl	8017ec6 <abort>
        prev->next = pcb->next;
 8007a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2c:	60da      	str	r2, [r3, #12]
 8007a2e:	e014      	b.n	8007a5a <tcp_slowtmr+0x55a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007a30:	4b2e      	ldr	r3, [pc, #184]	; (8007aec <tcp_slowtmr+0x5ec>)
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d00b      	beq.n	8007a52 <tcp_slowtmr+0x552>
 8007a3a:	4b2d      	ldr	r3, [pc, #180]	; (8007af0 <tcp_slowtmr+0x5f0>)
 8007a3c:	f240 5275 	movw	r2, #1397	; 0x575
 8007a40:	492e      	ldr	r1, [pc, #184]	; (8007afc <tcp_slowtmr+0x5fc>)
 8007a42:	482d      	ldr	r0, [pc, #180]	; (8007af8 <tcp_slowtmr+0x5f8>)
 8007a44:	f010 f9f6 	bl	8017e34 <iprintf>
 8007a48:	2000      	movs	r0, #0
 8007a4a:	f010 faf5 	bl	8018038 <fflush>
 8007a4e:	f010 fa3a 	bl	8017ec6 <abort>
        tcp_active_pcbs = pcb->next;
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	4a25      	ldr	r2, [pc, #148]	; (8007aec <tcp_slowtmr+0x5ec>)
 8007a58:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007a5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d013      	beq.n	8007a8a <tcp_slowtmr+0x58a>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a68:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007a6a:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6e:	3304      	adds	r3, #4
 8007a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a72:	8ad2      	ldrh	r2, [r2, #22]
 8007a74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a76:	8b09      	ldrh	r1, [r1, #24]
 8007a78:	9102      	str	r1, [sp, #8]
 8007a7a:	9201      	str	r2, [sp, #4]
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	462b      	mov	r3, r5
 8007a80:	4622      	mov	r2, r4
 8007a82:	4601      	mov	r1, r0
 8007a84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a86:	f005 fc81 	bl	800d38c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 8007a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a92:	7d1b      	ldrb	r3, [r3, #20]
 8007a94:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 8007a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7fe ff35 	bl	8006910 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007aa6:	4b16      	ldr	r3, [pc, #88]	; (8007b00 <tcp_slowtmr+0x600>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d004      	beq.n	8007abc <tcp_slowtmr+0x5bc>
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f06f 010c 	mvn.w	r1, #12
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007abc:	4b10      	ldr	r3, [pc, #64]	; (8007b00 <tcp_slowtmr+0x600>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d059      	beq.n	8007b78 <tcp_slowtmr+0x678>
        goto tcp_slowtmr_start;
 8007ac4:	e52d      	b.n	8007522 <tcp_slowtmr+0x22>
 8007ac6:	bf00      	nop
 8007ac8:	20004040 	.word	0x20004040
 8007acc:	0801abe8 	.word	0x0801abe8
 8007ad0:	10624dd3 	.word	0x10624dd3
 8007ad4:	0801ac18 	.word	0x0801ac18
 8007ad8:	0801ac50 	.word	0x0801ac50
 8007adc:	0801ac60 	.word	0x0801ac60
 8007ae0:	000124f8 	.word	0x000124f8
 8007ae4:	0801ac64 	.word	0x0801ac64
 8007ae8:	0801ac94 	.word	0x0801ac94
 8007aec:	2000403c 	.word	0x2000403c
 8007af0:	0801a674 	.word	0x0801a674
 8007af4:	0801acc4 	.word	0x0801acc4
 8007af8:	0801a6a8 	.word	0x0801a6a8
 8007afc:	0801acf0 	.word	0x0801acf0
 8007b00:	20004038 	.word	0x20004038
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b06:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b10:	7f1b      	ldrb	r3, [r3, #28]
 8007b12:	3301      	adds	r3, #1
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b18:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1c:	7f1a      	ldrb	r2, [r3, #28]
 8007b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b20:	7f5b      	ldrb	r3, [r3, #29]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d328      	bcc.n	8007b78 <tcp_slowtmr+0x678>
        prev->polltmr = 0;
 8007b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b28:	2200      	movs	r2, #0
 8007b2a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
 8007b2c:	484c      	ldr	r0, [pc, #304]	; (8007c60 <tcp_slowtmr+0x760>)
 8007b2e:	f7f9 fbe0 	bl	80012f2 <lwip_win32_platform_diag>
        tcp_active_pcbs_changed = 0;
 8007b32:	4b4c      	ldr	r3, [pc, #304]	; (8007c64 <tcp_slowtmr+0x764>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00b      	beq.n	8007b5a <tcp_slowtmr+0x65a>
 8007b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b4a:	6912      	ldr	r2, [r2, #16]
 8007b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b4e:	4610      	mov	r0, r2
 8007b50:	4798      	blx	r3
 8007b52:	4603      	mov	r3, r0
 8007b54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007b58:	e002      	b.n	8007b60 <tcp_slowtmr+0x660>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007b60:	4b40      	ldr	r3, [pc, #256]	; (8007c64 <tcp_slowtmr+0x764>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d000      	beq.n	8007b6a <tcp_slowtmr+0x66a>
          goto tcp_slowtmr_start;
 8007b68:	e4db      	b.n	8007522 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007b6a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d102      	bne.n	8007b78 <tcp_slowtmr+0x678>
          tcp_output(prev);
 8007b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b74:	f004 fd32 	bl	800c5dc <tcp_output>
  while (pcb != NULL) {
 8007b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f47f acde 	bne.w	800753c <tcp_slowtmr+0x3c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007b80:	2300      	movs	r3, #0
 8007b82:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007b84:	4b38      	ldr	r3, [pc, #224]	; (8007c68 <tcp_slowtmr+0x768>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007b8a:	e061      	b.n	8007c50 <tcp_slowtmr+0x750>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8e:	7d1b      	ldrb	r3, [r3, #20]
 8007b90:	2b0a      	cmp	r3, #10
 8007b92:	d00b      	beq.n	8007bac <tcp_slowtmr+0x6ac>
 8007b94:	4b35      	ldr	r3, [pc, #212]	; (8007c6c <tcp_slowtmr+0x76c>)
 8007b96:	f240 52a5 	movw	r2, #1445	; 0x5a5
 8007b9a:	4935      	ldr	r1, [pc, #212]	; (8007c70 <tcp_slowtmr+0x770>)
 8007b9c:	4835      	ldr	r0, [pc, #212]	; (8007c74 <tcp_slowtmr+0x774>)
 8007b9e:	f010 f949 	bl	8017e34 <iprintf>
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	f010 fa48 	bl	8018038 <fflush>
 8007ba8:	f010 f98d 	bl	8017ec6 <abort>
    pcb_remove = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007bb2:	4b31      	ldr	r3, [pc, #196]	; (8007c78 <tcp_slowtmr+0x778>)
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2bf0      	cmp	r3, #240	; 0xf0
 8007bbe:	d904      	bls.n	8007bca <tcp_slowtmr+0x6ca>
      ++pcb_remove;
 8007bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007bca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d039      	beq.n	8007c46 <tcp_slowtmr+0x746>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007bd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bd4:	f000 fc48 	bl	8008468 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d015      	beq.n	8007c0a <tcp_slowtmr+0x70a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007bde:	4b22      	ldr	r3, [pc, #136]	; (8007c68 <tcp_slowtmr+0x768>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d10b      	bne.n	8007c00 <tcp_slowtmr+0x700>
 8007be8:	4b20      	ldr	r3, [pc, #128]	; (8007c6c <tcp_slowtmr+0x76c>)
 8007bea:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007bee:	4923      	ldr	r1, [pc, #140]	; (8007c7c <tcp_slowtmr+0x77c>)
 8007bf0:	4820      	ldr	r0, [pc, #128]	; (8007c74 <tcp_slowtmr+0x774>)
 8007bf2:	f010 f91f 	bl	8017e34 <iprintf>
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	f010 fa1e 	bl	8018038 <fflush>
 8007bfc:	f010 f963 	bl	8017ec6 <abort>
        prev->next = pcb->next;
 8007c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c02:	68da      	ldr	r2, [r3, #12]
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	60da      	str	r2, [r3, #12]
 8007c08:	e014      	b.n	8007c34 <tcp_slowtmr+0x734>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007c0a:	4b17      	ldr	r3, [pc, #92]	; (8007c68 <tcp_slowtmr+0x768>)
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d00b      	beq.n	8007c2c <tcp_slowtmr+0x72c>
 8007c14:	4b15      	ldr	r3, [pc, #84]	; (8007c6c <tcp_slowtmr+0x76c>)
 8007c16:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8007c1a:	4919      	ldr	r1, [pc, #100]	; (8007c80 <tcp_slowtmr+0x780>)
 8007c1c:	4815      	ldr	r0, [pc, #84]	; (8007c74 <tcp_slowtmr+0x774>)
 8007c1e:	f010 f909 	bl	8017e34 <iprintf>
 8007c22:	2000      	movs	r0, #0
 8007c24:	f010 fa08 	bl	8018038 <fflush>
 8007c28:	f010 f94d 	bl	8017ec6 <abort>
        tcp_tw_pcbs = pcb->next;
 8007c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	4a0d      	ldr	r2, [pc, #52]	; (8007c68 <tcp_slowtmr+0x768>)
 8007c32:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c36:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007c3e:	6838      	ldr	r0, [r7, #0]
 8007c40:	f7fe fe66 	bl	8006910 <tcp_free>
 8007c44:	e004      	b.n	8007c50 <tcp_slowtmr+0x750>
    } else {
      prev = pcb;
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d19a      	bne.n	8007b8c <tcp_slowtmr+0x68c>
    }
  }
}
 8007c56:	bf00      	nop
 8007c58:	3730      	adds	r7, #48	; 0x30
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	0801ad1c 	.word	0x0801ad1c
 8007c64:	20004038 	.word	0x20004038
 8007c68:	2000404c 	.word	0x2000404c
 8007c6c:	0801a674 	.word	0x0801a674
 8007c70:	0801ad40 	.word	0x0801ad40
 8007c74:	0801a6a8 	.word	0x0801a6a8
 8007c78:	20004040 	.word	0x20004040
 8007c7c:	0801ad70 	.word	0x0801ad70
 8007c80:	0801ad98 	.word	0x0801ad98

08007c84 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007c8a:	4b30      	ldr	r3, [pc, #192]	; (8007d4c <tcp_fasttmr+0xc8>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	4b2e      	ldr	r3, [pc, #184]	; (8007d4c <tcp_fasttmr+0xc8>)
 8007c94:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007c96:	4b2e      	ldr	r3, [pc, #184]	; (8007d50 <tcp_fasttmr+0xcc>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007c9c:	e04e      	b.n	8007d3c <tcp_fasttmr+0xb8>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	7f9a      	ldrb	r2, [r3, #30]
 8007ca2:	4b2a      	ldr	r3, [pc, #168]	; (8007d4c <tcp_fasttmr+0xc8>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d045      	beq.n	8007d36 <tcp_fasttmr+0xb2>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007caa:	4b28      	ldr	r3, [pc, #160]	; (8007d4c <tcp_fasttmr+0xc8>)
 8007cac:	781a      	ldrb	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	8b5b      	ldrh	r3, [r3, #26]
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d013      	beq.n	8007ce6 <tcp_fasttmr+0x62>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
 8007cbe:	4825      	ldr	r0, [pc, #148]	; (8007d54 <tcp_fasttmr+0xd0>)
 8007cc0:	f7f9 fb17 	bl	80012f2 <lwip_win32_platform_diag>
        tcp_ack_now(pcb);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	8b5b      	ldrh	r3, [r3, #26]
 8007cc8:	f043 0302 	orr.w	r3, r3, #2
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f004 fc82 	bl	800c5dc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	8b5b      	ldrh	r3, [r3, #26]
 8007cdc:	f023 0303 	bic.w	r3, r3, #3
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	8b5b      	ldrh	r3, [r3, #26]
 8007cea:	f003 0308 	and.w	r3, r3, #8
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00c      	beq.n	8007d0c <tcp_fasttmr+0x88>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
 8007cf2:	4819      	ldr	r0, [pc, #100]	; (8007d58 <tcp_fasttmr+0xd4>)
 8007cf4:	f7f9 fafd 	bl	80012f2 <lwip_win32_platform_diag>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	8b5b      	ldrh	r3, [r3, #26]
 8007cfc:	f023 0308 	bic.w	r3, r3, #8
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7fe ffb6 	bl	8006c78 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00a      	beq.n	8007d30 <tcp_fasttmr+0xac>
        tcp_active_pcbs_changed = 0;
 8007d1a:	4b10      	ldr	r3, [pc, #64]	; (8007d5c <tcp_fasttmr+0xd8>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f81d 	bl	8007d60 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007d26:	4b0d      	ldr	r3, [pc, #52]	; (8007d5c <tcp_fasttmr+0xd8>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d000      	beq.n	8007d30 <tcp_fasttmr+0xac>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007d2e:	e7b2      	b.n	8007c96 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	607b      	str	r3, [r7, #4]
 8007d34:	e002      	b.n	8007d3c <tcp_fasttmr+0xb8>
    } else {
      pcb = pcb->next;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1ad      	bne.n	8007c9e <tcp_fasttmr+0x1a>
    }
  }
}
 8007d42:	bf00      	nop
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	20000bea 	.word	0x20000bea
 8007d50:	2000403c 	.word	0x2000403c
 8007d54:	0801adc0 	.word	0x0801adc0
 8007d58:	0801addc 	.word	0x0801addc
 8007d5c:	20004038 	.word	0x20004038

08007d60 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007d60:	b590      	push	{r4, r7, lr}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d109      	bne.n	8007d82 <tcp_process_refused_data+0x22>
 8007d6e:	4b37      	ldr	r3, [pc, #220]	; (8007e4c <tcp_process_refused_data+0xec>)
 8007d70:	f240 620d 	movw	r2, #1549	; 0x60d
 8007d74:	4936      	ldr	r1, [pc, #216]	; (8007e50 <tcp_process_refused_data+0xf0>)
 8007d76:	4837      	ldr	r0, [pc, #220]	; (8007e54 <tcp_process_refused_data+0xf4>)
 8007d78:	f7f9 fabb 	bl	80012f2 <lwip_win32_platform_diag>
 8007d7c:	f06f 030f 	mvn.w	r3, #15
 8007d80:	e060      	b.n	8007e44 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d86:	7b5b      	ldrb	r3, [r3, #13]
 8007d88:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d8e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00b      	beq.n	8007db8 <tcp_process_refused_data+0x58>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6918      	ldr	r0, [r3, #16]
 8007daa:	2300      	movs	r3, #0
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	6879      	ldr	r1, [r7, #4]
 8007db0:	47a0      	blx	r4
 8007db2:	4603      	mov	r3, r0
 8007db4:	73fb      	strb	r3, [r7, #15]
 8007db6:	e007      	b.n	8007dc8 <tcp_process_refused_data+0x68>
 8007db8:	2300      	movs	r3, #0
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	6879      	ldr	r1, [r7, #4]
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	f000 f8ac 	bl	8007f1c <tcp_recv_null>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d12a      	bne.n	8007e26 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
 8007dd2:	f003 0320 	and.w	r3, r3, #32
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d033      	beq.n	8007e42 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dde:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007de2:	d005      	beq.n	8007df0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007de8:	3301      	adds	r3, #1
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00b      	beq.n	8007e12 <tcp_process_refused_data+0xb2>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6918      	ldr	r0, [r3, #16]
 8007e04:	2300      	movs	r3, #0
 8007e06:	2200      	movs	r2, #0
 8007e08:	6879      	ldr	r1, [r7, #4]
 8007e0a:	47a0      	blx	r4
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]
 8007e10:	e001      	b.n	8007e16 <tcp_process_refused_data+0xb6>
 8007e12:	2300      	movs	r3, #0
 8007e14:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e1a:	f113 0f0d 	cmn.w	r3, #13
 8007e1e:	d110      	bne.n	8007e42 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007e20:	f06f 030c 	mvn.w	r3, #12
 8007e24:	e00e      	b.n	8007e44 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e2a:	f113 0f0d 	cmn.w	r3, #13
 8007e2e:	d102      	bne.n	8007e36 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007e30:	f06f 030c 	mvn.w	r3, #12
 8007e34:	e006      	b.n	8007e44 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007e3c:	f06f 0304 	mvn.w	r3, #4
 8007e40:	e000      	b.n	8007e44 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd90      	pop	{r4, r7, pc}
 8007e4c:	0801a674 	.word	0x0801a674
 8007e50:	0801adf8 	.word	0x0801adf8
 8007e54:	0801a6a8 	.word	0x0801a6a8

08007e58 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007e60:	e007      	b.n	8007e72 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f809 	bl	8007e80 <tcp_seg_free>
    seg = next;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1f4      	bne.n	8007e62 <tcp_segs_free+0xa>
  }
}
 8007e78:	bf00      	nop
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00f      	beq.n	8007eae <tcp_seg_free+0x2e>
    if (seg->p != NULL) {
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d007      	beq.n	8007ea6 <tcp_seg_free+0x26>
      pbuf_free(seg->p);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fd ffba 	bl	8005e14 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	605a      	str	r2, [r3, #4]
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007ea6:	6879      	ldr	r1, [r7, #4]
 8007ea8:	2003      	movs	r0, #3
 8007eaa:	f7fd f99f 	bl	80051ec <memp_free>
  }
}
 8007eae:	bf00      	nop
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
	...

08007eb8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10b      	bne.n	8007ede <tcp_seg_copy+0x26>
 8007ec6:	4b12      	ldr	r3, [pc, #72]	; (8007f10 <tcp_seg_copy+0x58>)
 8007ec8:	f240 6286 	movw	r2, #1670	; 0x686
 8007ecc:	4911      	ldr	r1, [pc, #68]	; (8007f14 <tcp_seg_copy+0x5c>)
 8007ece:	4812      	ldr	r0, [pc, #72]	; (8007f18 <tcp_seg_copy+0x60>)
 8007ed0:	f00f ffb0 	bl	8017e34 <iprintf>
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	f010 f8af 	bl	8018038 <fflush>
 8007eda:	f00f fff4 	bl	8017ec6 <abort>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007ede:	2003      	movs	r0, #3
 8007ee0:	f7fd f91a 	bl	8005118 <memp_malloc>
 8007ee4:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <tcp_seg_copy+0x38>
    return NULL;
 8007eec:	2300      	movs	r3, #0
 8007eee:	e00a      	b.n	8007f06 <tcp_seg_copy+0x4e>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007ef0:	2214      	movs	r2, #20
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f010 f9bf 	bl	8018278 <memcpy>
  pbuf_ref(cseg->p);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fe f842 	bl	8005f88 <pbuf_ref>
  return cseg;
 8007f04:	68fb      	ldr	r3, [r7, #12]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	0801a674 	.word	0x0801a674
 8007f14:	0801ae3c 	.word	0x0801ae3c
 8007f18:	0801a6a8 	.word	0x0801a6a8

08007f1c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d109      	bne.n	8007f44 <tcp_recv_null+0x28>
 8007f30:	4b12      	ldr	r3, [pc, #72]	; (8007f7c <tcp_recv_null+0x60>)
 8007f32:	f240 629c 	movw	r2, #1692	; 0x69c
 8007f36:	4912      	ldr	r1, [pc, #72]	; (8007f80 <tcp_recv_null+0x64>)
 8007f38:	4812      	ldr	r0, [pc, #72]	; (8007f84 <tcp_recv_null+0x68>)
 8007f3a:	f7f9 f9da 	bl	80012f2 <lwip_win32_platform_diag>
 8007f3e:	f06f 030f 	mvn.w	r3, #15
 8007f42:	e016      	b.n	8007f72 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d009      	beq.n	8007f5e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	891b      	ldrh	r3, [r3, #8]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	68b8      	ldr	r0, [r7, #8]
 8007f52:	f7ff f907 	bl	8007164 <tcp_recved>
    pbuf_free(p);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7fd ff5c 	bl	8005e14 <pbuf_free>
 8007f5c:	e008      	b.n	8007f70 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d104      	bne.n	8007f70 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007f66:	68b8      	ldr	r0, [r7, #8]
 8007f68:	f7fe fef2 	bl	8006d50 <tcp_close>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	e000      	b.n	8007f72 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	0801a674 	.word	0x0801a674
 8007f80:	0801ae58 	.word	0x0801ae58
 8007f84:	0801a6a8 	.word	0x0801a6a8

08007f88 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	db01      	blt.n	8007f9e <tcp_kill_prio+0x16>
 8007f9a:	79fb      	ldrb	r3, [r7, #7]
 8007f9c:	e000      	b.n	8007fa0 <tcp_kill_prio+0x18>
 8007f9e:	237f      	movs	r3, #127	; 0x7f
 8007fa0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007fa2:	7afb      	ldrb	r3, [r7, #11]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d039      	beq.n	800801c <tcp_kill_prio+0x94>
  /* We only want kill connections with a lower prio, so decrement prio by one
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007fa8:	7afb      	ldrb	r3, [r7, #11]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007fb6:	4b1b      	ldr	r3, [pc, #108]	; (8008024 <tcp_kill_prio+0x9c>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	617b      	str	r3, [r7, #20]
 8007fbc:	e01f      	b.n	8007ffe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	7d5b      	ldrb	r3, [r3, #21]
 8007fc2:	7afa      	ldrb	r2, [r7, #11]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d80c      	bhi.n	8007fe2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007fcc:	7afa      	ldrb	r2, [r7, #11]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d112      	bne.n	8007ff8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007fd2:	4b15      	ldr	r3, [pc, #84]	; (8008028 <tcp_kill_prio+0xa0>)
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	1ad2      	subs	r2, r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d30a      	bcc.n	8007ff8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007fe2:	4b11      	ldr	r3, [pc, #68]	; (8008028 <tcp_kill_prio+0xa0>)
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	7d5b      	ldrb	r3, [r3, #21]
 8007ff6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	617b      	str	r3, [r7, #20]
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1dc      	bne.n	8007fbe <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d009      	beq.n	800801e <tcp_kill_prio+0x96>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	6939      	ldr	r1, [r7, #16]
 800800e:	4807      	ldr	r0, [pc, #28]	; (800802c <tcp_kill_prio+0xa4>)
 8008010:	f7f9 f96f 	bl	80012f2 <lwip_win32_platform_diag>
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008014:	6938      	ldr	r0, [r7, #16]
 8008016:	f7fe ff93 	bl	8006f40 <tcp_abort>
 800801a:	e000      	b.n	800801e <tcp_kill_prio+0x96>
    return;
 800801c:	bf00      	nop
  }
}
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	2000403c 	.word	0x2000403c
 8008028:	20004040 	.word	0x20004040
 800802c:	0801ae74 	.word	0x0801ae74

08008030 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	4603      	mov	r3, r0
 8008038:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800803a:	79fb      	ldrb	r3, [r7, #7]
 800803c:	2b08      	cmp	r3, #8
 800803e:	d00e      	beq.n	800805e <tcp_kill_state+0x2e>
 8008040:	79fb      	ldrb	r3, [r7, #7]
 8008042:	2b09      	cmp	r3, #9
 8008044:	d00b      	beq.n	800805e <tcp_kill_state+0x2e>
 8008046:	4b21      	ldr	r3, [pc, #132]	; (80080cc <tcp_kill_state+0x9c>)
 8008048:	f240 62e1 	movw	r2, #1761	; 0x6e1
 800804c:	4920      	ldr	r1, [pc, #128]	; (80080d0 <tcp_kill_state+0xa0>)
 800804e:	4821      	ldr	r0, [pc, #132]	; (80080d4 <tcp_kill_state+0xa4>)
 8008050:	f00f fef0 	bl	8017e34 <iprintf>
 8008054:	2000      	movs	r0, #0
 8008056:	f00f ffef 	bl	8018038 <fflush>
 800805a:	f00f ff34 	bl	8017ec6 <abort>

  inactivity = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008062:	2300      	movs	r3, #0
 8008064:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008066:	4b1c      	ldr	r3, [pc, #112]	; (80080d8 <tcp_kill_state+0xa8>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	617b      	str	r3, [r7, #20]
 800806c:	e017      	b.n	800809e <tcp_kill_state+0x6e>
    if (pcb->state == state) {
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	7d1b      	ldrb	r3, [r3, #20]
 8008072:	79fa      	ldrb	r2, [r7, #7]
 8008074:	429a      	cmp	r2, r3
 8008076:	d10f      	bne.n	8008098 <tcp_kill_state+0x68>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008078:	4b18      	ldr	r3, [pc, #96]	; (80080dc <tcp_kill_state+0xac>)
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	1ad2      	subs	r2, r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	429a      	cmp	r2, r3
 8008086:	d307      	bcc.n	8008098 <tcp_kill_state+0x68>
        inactivity = tcp_ticks - pcb->tmr;
 8008088:	4b14      	ldr	r3, [pc, #80]	; (80080dc <tcp_kill_state+0xac>)
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1e4      	bne.n	800806e <tcp_kill_state+0x3e>
      }
    }
  }
  if (inactive != NULL) {
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00c      	beq.n	80080c4 <tcp_kill_state+0x94>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
 80080aa:	79fb      	ldrb	r3, [r7, #7]
 80080ac:	4a0c      	ldr	r2, [pc, #48]	; (80080e0 <tcp_kill_state+0xb0>)
 80080ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	480b      	ldr	r0, [pc, #44]	; (80080e4 <tcp_kill_state+0xb4>)
 80080b8:	f7f9 f91b 	bl	80012f2 <lwip_win32_platform_diag>
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80080bc:	2100      	movs	r1, #0
 80080be:	6938      	ldr	r0, [r7, #16]
 80080c0:	f7fe fe7c 	bl	8006dbc <tcp_abandon>
  }
}
 80080c4:	bf00      	nop
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	0801a674 	.word	0x0801a674
 80080d0:	0801aea0 	.word	0x0801aea0
 80080d4:	0801a6a8 	.word	0x0801a6a8
 80080d8:	2000403c 	.word	0x2000403c
 80080dc:	20004040 	.word	0x20004040
 80080e0:	0801db44 	.word	0x0801db44
 80080e4:	0801aeb0 	.word	0x0801aeb0

080080e8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80080ee:	2300      	movs	r3, #0
 80080f0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80080f6:	4b14      	ldr	r3, [pc, #80]	; (8008148 <tcp_kill_timewait+0x60>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	e012      	b.n	8008124 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80080fe:	4b13      	ldr	r3, [pc, #76]	; (800814c <tcp_kill_timewait+0x64>)
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	1ad2      	subs	r2, r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	429a      	cmp	r2, r3
 800810c:	d307      	bcc.n	800811e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800810e:	4b0f      	ldr	r3, [pc, #60]	; (800814c <tcp_kill_timewait+0x64>)
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	60fb      	str	r3, [r7, #12]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1e9      	bne.n	80080fe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d007      	beq.n	8008140 <tcp_kill_timewait+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	68b9      	ldr	r1, [r7, #8]
 8008134:	4806      	ldr	r0, [pc, #24]	; (8008150 <tcp_kill_timewait+0x68>)
 8008136:	f7f9 f8dc 	bl	80012f2 <lwip_win32_platform_diag>
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800813a:	68b8      	ldr	r0, [r7, #8]
 800813c:	f7fe ff00 	bl	8006f40 <tcp_abort>
  }
}
 8008140:	bf00      	nop
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	2000404c 	.word	0x2000404c
 800814c:	20004040 	.word	0x20004040
 8008150:	0801aee4 	.word	0x0801aee4

08008154 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800815a:	4b11      	ldr	r3, [pc, #68]	; (80081a0 <tcp_handle_closepend+0x4c>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008160:	e017      	b.n	8008192 <tcp_handle_closepend+0x3e>
    struct tcp_pcb *next = pcb->next;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	8b5b      	ldrh	r3, [r3, #26]
 800816c:	f003 0308 	and.w	r3, r3, #8
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00c      	beq.n	800818e <tcp_handle_closepend+0x3a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
 8008174:	480b      	ldr	r0, [pc, #44]	; (80081a4 <tcp_handle_closepend+0x50>)
 8008176:	f7f9 f8bc 	bl	80012f2 <lwip_win32_platform_diag>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	8b5b      	ldrh	r3, [r3, #26]
 800817e:	f023 0308 	bic.w	r3, r3, #8
 8008182:	b29a      	uxth	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7fe fd75 	bl	8006c78 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e4      	bne.n	8008162 <tcp_handle_closepend+0xe>
  }
}
 8008198:	bf00      	nop
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	2000403c 	.word	0x2000403c
 80081a4:	0801af20 	.word	0x0801af20

080081a8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	4603      	mov	r3, r0
 80081b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80081b2:	2001      	movs	r0, #1
 80081b4:	f7fc ffb0 	bl	8005118 <memp_malloc>
 80081b8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d134      	bne.n	800822a <tcp_alloc+0x82>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80081c0:	f7ff ffc8 	bl	8008154 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
 80081c4:	483d      	ldr	r0, [pc, #244]	; (80082bc <tcp_alloc+0x114>)
 80081c6:	f7f9 f894 	bl	80012f2 <lwip_win32_platform_diag>
    tcp_kill_timewait();
 80081ca:	f7ff ff8d 	bl	80080e8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80081ce:	2001      	movs	r0, #1
 80081d0:	f7fc ffa2 	bl	8005118 <memp_malloc>
 80081d4:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d126      	bne.n	800822a <tcp_alloc+0x82>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
 80081dc:	4838      	ldr	r0, [pc, #224]	; (80082c0 <tcp_alloc+0x118>)
 80081de:	f7f9 f888 	bl	80012f2 <lwip_win32_platform_diag>
      tcp_kill_state(LAST_ACK);
 80081e2:	2009      	movs	r0, #9
 80081e4:	f7ff ff24 	bl	8008030 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80081e8:	2001      	movs	r0, #1
 80081ea:	f7fc ff95 	bl	8005118 <memp_malloc>
 80081ee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d119      	bne.n	800822a <tcp_alloc+0x82>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
 80081f6:	4833      	ldr	r0, [pc, #204]	; (80082c4 <tcp_alloc+0x11c>)
 80081f8:	f7f9 f87b 	bl	80012f2 <lwip_win32_platform_diag>
        tcp_kill_state(CLOSING);
 80081fc:	2008      	movs	r0, #8
 80081fe:	f7ff ff17 	bl	8008030 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008202:	2001      	movs	r0, #1
 8008204:	f7fc ff88 	bl	8005118 <memp_malloc>
 8008208:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10c      	bne.n	800822a <tcp_alloc+0x82>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
 8008210:	79fb      	ldrb	r3, [r7, #7]
 8008212:	4619      	mov	r1, r3
 8008214:	482c      	ldr	r0, [pc, #176]	; (80082c8 <tcp_alloc+0x120>)
 8008216:	f7f9 f86c 	bl	80012f2 <lwip_win32_platform_diag>
          tcp_kill_prio(prio);
 800821a:	79fb      	ldrb	r3, [r7, #7]
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff feb3 	bl	8007f88 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008222:	2001      	movs	r0, #1
 8008224:	f7fc ff78 	bl	8005118 <memp_malloc>
 8008228:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d03f      	beq.n	80082b0 <tcp_alloc+0x108>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008230:	229c      	movs	r2, #156	; 0x9c
 8008232:	2100      	movs	r1, #0
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f010 f844 	bl	80182c2 <memset>
    pcb->prio = prio;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	79fa      	ldrb	r2, [r7, #7]
 800823e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008246:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008250:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	22ff      	movs	r2, #255	; 0xff
 800825e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008266:	865a      	strh	r2, [r3, #50]	; 0x32
    /* Set initial TCP's retransmission timeout to 3000 ms by default.
       This value could be configured in lwipopts */
    pcb->rto = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2206      	movs	r2, #6
 800826c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2206      	movs	r2, #6
 8008274:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800827c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2201      	movs	r2, #1
 8008282:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008286:	4b11      	ldr	r3, [pc, #68]	; (80082cc <tcp_alloc+0x124>)
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800828e:	4b10      	ldr	r3, [pc, #64]	; (80082d0 <tcp_alloc+0x128>)
 8008290:	781a      	ldrb	r2, [r3, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800829c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4a0c      	ldr	r2, [pc, #48]	; (80082d4 <tcp_alloc+0x12c>)
 80082a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4a0b      	ldr	r2, [pc, #44]	; (80082d8 <tcp_alloc+0x130>)
 80082ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
    pcb_tci_init(pcb);
  }
  return pcb;
 80082b0:	68fb      	ldr	r3, [r7, #12]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	0801af44 	.word	0x0801af44
 80082c0:	0801af78 	.word	0x0801af78
 80082c4:	0801afac 	.word	0x0801afac
 80082c8:	0801afe0 	.word	0x0801afe0
 80082cc:	20004040 	.word	0x20004040
 80082d0:	20000bea 	.word	0x20000bea
 80082d4:	08007f1d 	.word	0x08007f1d
 80082d8:	006ddd00 	.word	0x006ddd00

080082dc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	4603      	mov	r3, r0
 80082e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80082e6:	2040      	movs	r0, #64	; 0x40
 80082e8:	f7ff ff5e 	bl	80081a8 <tcp_alloc>
 80082ec:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80082ee:	68fb      	ldr	r3, [r7, #12]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	611a      	str	r2, [r3, #16]
  }
}
 800830e:	bf00      	nop
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
	...

0800831c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d013      	beq.n	8008354 <tcp_recv+0x38>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	7d1b      	ldrb	r3, [r3, #20]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d10b      	bne.n	800834c <tcp_recv+0x30>
 8008334:	4b09      	ldr	r3, [pc, #36]	; (800835c <tcp_recv+0x40>)
 8008336:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 800833a:	4909      	ldr	r1, [pc, #36]	; (8008360 <tcp_recv+0x44>)
 800833c:	4809      	ldr	r0, [pc, #36]	; (8008364 <tcp_recv+0x48>)
 800833e:	f00f fd79 	bl	8017e34 <iprintf>
 8008342:	2000      	movs	r0, #0
 8008344:	f00f fe78 	bl	8018038 <fflush>
 8008348:	f00f fdbd 	bl	8017ec6 <abort>
    pcb->recv = recv;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8008354:	bf00      	nop
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	0801a674 	.word	0x0801a674
 8008360:	0801b020 	.word	0x0801b020
 8008364:	0801a6a8 	.word	0x0801a6a8

08008368 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d013      	beq.n	80083a0 <tcp_sent+0x38>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	7d1b      	ldrb	r3, [r3, #20]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d10b      	bne.n	8008398 <tcp_sent+0x30>
 8008380:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <tcp_sent+0x40>)
 8008382:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8008386:	4909      	ldr	r1, [pc, #36]	; (80083ac <tcp_sent+0x44>)
 8008388:	4809      	ldr	r0, [pc, #36]	; (80083b0 <tcp_sent+0x48>)
 800838a:	f00f fd53 	bl	8017e34 <iprintf>
 800838e:	2000      	movs	r0, #0
 8008390:	f00f fe52 	bl	8018038 <fflush>
 8008394:	f00f fd97 	bl	8017ec6 <abort>
    pcb->sent = sent;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80083a0:	bf00      	nop
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	0801a674 	.word	0x0801a674
 80083ac:	0801b048 	.word	0x0801b048
 80083b0:	0801a6a8 	.word	0x0801a6a8

080083b4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d013      	beq.n	80083ec <tcp_err+0x38>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	7d1b      	ldrb	r3, [r3, #20]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d10b      	bne.n	80083e4 <tcp_err+0x30>
 80083cc:	4b09      	ldr	r3, [pc, #36]	; (80083f4 <tcp_err+0x40>)
 80083ce:	f640 0216 	movw	r2, #2070	; 0x816
 80083d2:	4909      	ldr	r1, [pc, #36]	; (80083f8 <tcp_err+0x44>)
 80083d4:	4809      	ldr	r0, [pc, #36]	; (80083fc <tcp_err+0x48>)
 80083d6:	f00f fd2d 	bl	8017e34 <iprintf>
 80083da:	2000      	movs	r0, #0
 80083dc:	f00f fe2c 	bl	8018038 <fflush>
 80083e0:	f00f fd71 	bl	8017ec6 <abort>
    pcb->errf = err;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80083ec:	bf00      	nop
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	0801a674 	.word	0x0801a674
 80083f8:	0801b070 	.word	0x0801b070
 80083fc:	0801a6a8 	.word	0x0801a6a8

08008400 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	4613      	mov	r3, r2
 800840c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d107      	bne.n	8008424 <tcp_poll+0x24>
 8008414:	4b10      	ldr	r3, [pc, #64]	; (8008458 <tcp_poll+0x58>)
 8008416:	f640 0247 	movw	r2, #2119	; 0x847
 800841a:	4910      	ldr	r1, [pc, #64]	; (800845c <tcp_poll+0x5c>)
 800841c:	4810      	ldr	r0, [pc, #64]	; (8008460 <tcp_poll+0x60>)
 800841e:	f7f8 ff68 	bl	80012f2 <lwip_win32_platform_diag>
 8008422:	e016      	b.n	8008452 <tcp_poll+0x52>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	7d1b      	ldrb	r3, [r3, #20]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d10b      	bne.n	8008444 <tcp_poll+0x44>
 800842c:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <tcp_poll+0x58>)
 800842e:	f640 0248 	movw	r2, #2120	; 0x848
 8008432:	490c      	ldr	r1, [pc, #48]	; (8008464 <tcp_poll+0x64>)
 8008434:	480a      	ldr	r0, [pc, #40]	; (8008460 <tcp_poll+0x60>)
 8008436:	f00f fcfd 	bl	8017e34 <iprintf>
 800843a:	2000      	movs	r0, #0
 800843c:	f00f fdfc 	bl	8018038 <fflush>
 8008440:	f00f fd41 	bl	8017ec6 <abort>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	79fa      	ldrb	r2, [r7, #7]
 8008450:	775a      	strb	r2, [r3, #29]
}
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	0801a674 	.word	0x0801a674
 800845c:	0801b098 	.word	0x0801b098
 8008460:	0801a6a8 	.word	0x0801a6a8
 8008464:	0801b0b0 	.word	0x0801b0b0

08008468 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d107      	bne.n	8008486 <tcp_pcb_purge+0x1e>
 8008476:	4b2d      	ldr	r3, [pc, #180]	; (800852c <tcp_pcb_purge+0xc4>)
 8008478:	f640 025b 	movw	r2, #2139	; 0x85b
 800847c:	492c      	ldr	r1, [pc, #176]	; (8008530 <tcp_pcb_purge+0xc8>)
 800847e:	482d      	ldr	r0, [pc, #180]	; (8008534 <tcp_pcb_purge+0xcc>)
 8008480:	f7f8 ff37 	bl	80012f2 <lwip_win32_platform_diag>
 8008484:	e04e      	b.n	8008524 <tcp_pcb_purge+0xbc>

  if (pcb->state != CLOSED &&
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	7d1b      	ldrb	r3, [r3, #20]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d04a      	beq.n	8008524 <tcp_pcb_purge+0xbc>
      pcb->state != TIME_WAIT &&
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008492:	2b0a      	cmp	r3, #10
 8008494:	d046      	beq.n	8008524 <tcp_pcb_purge+0xbc>
      pcb->state != LISTEN) {
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800849a:	2b01      	cmp	r3, #1
 800849c:	d042      	beq.n	8008524 <tcp_pcb_purge+0xbc>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));
 800849e:	4826      	ldr	r0, [pc, #152]	; (8008538 <tcp_pcb_purge+0xd0>)
 80084a0:	f7f8 ff27 	bl	80012f2 <lwip_win32_platform_diag>

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00a      	beq.n	80084c2 <tcp_pcb_purge+0x5a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
 80084ac:	4823      	ldr	r0, [pc, #140]	; (800853c <tcp_pcb_purge+0xd4>)
 80084ae:	f7f8 ff20 	bl	80012f2 <lwip_win32_platform_diag>
      pbuf_free(pcb->refused_data);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fd fcac 	bl	8005e14 <pbuf_free>
      pcb->refused_data = NULL;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unsent != NULL) {
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <tcp_pcb_purge+0x68>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: not all data sent\n"));
 80084ca:	481d      	ldr	r0, [pc, #116]	; (8008540 <tcp_pcb_purge+0xd8>)
 80084cc:	f7f8 ff11 	bl	80012f2 <lwip_win32_platform_diag>
    }
    if (pcb->unacked != NULL) {
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d002      	beq.n	80084de <tcp_pcb_purge+0x76>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
 80084d8:	481a      	ldr	r0, [pc, #104]	; (8008544 <tcp_pcb_purge+0xdc>)
 80084da:	f7f8 ff0a 	bl	80012f2 <lwip_win32_platform_diag>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d005      	beq.n	80084f2 <tcp_pcb_purge+0x8a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
 80084e6:	4818      	ldr	r0, [pc, #96]	; (8008548 <tcp_pcb_purge+0xe0>)
 80084e8:	f7f8 ff03 	bl	80012f2 <lwip_win32_platform_diag>
      tcp_free_ooseq(pcb);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f9cb 	bl	8008888 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084f8:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084fe:	4618      	mov	r0, r3
 8008500:	f7ff fcaa 	bl	8007e58 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008508:	4618      	mov	r0, r3
 800850a:	f7ff fca5 	bl	8007e58 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	66da      	str	r2, [r3, #108]	; 0x6c
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	0801a674 	.word	0x0801a674
 8008530:	0801b0d0 	.word	0x0801b0d0
 8008534:	0801a6a8 	.word	0x0801a6a8
 8008538:	0801b0ec 	.word	0x0801b0ec
 800853c:	0801b0fc 	.word	0x0801b0fc
 8008540:	0801b128 	.word	0x0801b128
 8008544:	0801b14c 	.word	0x0801b14c
 8008548:	0801b174 	.word	0x0801b174

0800854c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10b      	bne.n	8008574 <tcp_pcb_remove+0x28>
 800855c:	4b53      	ldr	r3, [pc, #332]	; (80086ac <tcp_pcb_remove+0x160>)
 800855e:	f640 028d 	movw	r2, #2189	; 0x88d
 8008562:	4953      	ldr	r1, [pc, #332]	; (80086b0 <tcp_pcb_remove+0x164>)
 8008564:	4853      	ldr	r0, [pc, #332]	; (80086b4 <tcp_pcb_remove+0x168>)
 8008566:	f00f fc65 	bl	8017e34 <iprintf>
 800856a:	2000      	movs	r0, #0
 800856c:	f00f fd64 	bl	8018038 <fflush>
 8008570:	f00f fca9 	bl	8017ec6 <abort>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10b      	bne.n	8008592 <tcp_pcb_remove+0x46>
 800857a:	4b4c      	ldr	r3, [pc, #304]	; (80086ac <tcp_pcb_remove+0x160>)
 800857c:	f640 028e 	movw	r2, #2190	; 0x88e
 8008580:	494d      	ldr	r1, [pc, #308]	; (80086b8 <tcp_pcb_remove+0x16c>)
 8008582:	484c      	ldr	r0, [pc, #304]	; (80086b4 <tcp_pcb_remove+0x168>)
 8008584:	f00f fc56 	bl	8017e34 <iprintf>
 8008588:	2000      	movs	r0, #0
 800858a:	f00f fd55 	bl	8018038 <fflush>
 800858e:	f00f fc9a 	bl	8017ec6 <abort>

  TCP_RMV(pcblist, pcb);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	429a      	cmp	r2, r3
 800859a:	d105      	bne.n	80085a8 <tcp_pcb_remove+0x5c>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68da      	ldr	r2, [r3, #12]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	e013      	b.n	80085d0 <tcp_pcb_remove+0x84>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	60fb      	str	r3, [r7, #12]
 80085ae:	e00c      	b.n	80085ca <tcp_pcb_remove+0x7e>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	68da      	ldr	r2, [r3, #12]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d104      	bne.n	80085c4 <tcp_pcb_remove+0x78>
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	68da      	ldr	r2, [r3, #12]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	60da      	str	r2, [r3, #12]
 80085c2:	e005      	b.n	80085d0 <tcp_pcb_remove+0x84>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1ef      	bne.n	80085b0 <tcp_pcb_remove+0x64>
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	2200      	movs	r2, #0
 80085d4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80085d6:	6838      	ldr	r0, [r7, #0]
 80085d8:	f7ff ff46 	bl	8008468 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	7d1b      	ldrb	r3, [r3, #20]
 80085e0:	2b0a      	cmp	r3, #10
 80085e2:	d013      	beq.n	800860c <tcp_pcb_remove+0xc0>
      (pcb->state != LISTEN) &&
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d00f      	beq.n	800860c <tcp_pcb_remove+0xc0>
      (pcb->flags & TF_ACK_DELAY)) {
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	8b5b      	ldrh	r3, [r3, #26]
 80085f0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d009      	beq.n	800860c <tcp_pcb_remove+0xc0>
    tcp_ack_now(pcb);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	8b5b      	ldrh	r3, [r3, #26]
 80085fc:	f043 0302 	orr.w	r3, r3, #2
 8008600:	b29a      	uxth	r2, r3
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008606:	6838      	ldr	r0, [r7, #0]
 8008608:	f003 ffe8 	bl	800c5dc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	7d1b      	ldrb	r3, [r3, #20]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d02f      	beq.n	8008674 <tcp_pcb_remove+0x128>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00b      	beq.n	8008634 <tcp_pcb_remove+0xe8>
 800861c:	4b23      	ldr	r3, [pc, #140]	; (80086ac <tcp_pcb_remove+0x160>)
 800861e:	f640 029d 	movw	r2, #2205	; 0x89d
 8008622:	4926      	ldr	r1, [pc, #152]	; (80086bc <tcp_pcb_remove+0x170>)
 8008624:	4823      	ldr	r0, [pc, #140]	; (80086b4 <tcp_pcb_remove+0x168>)
 8008626:	f00f fc05 	bl	8017e34 <iprintf>
 800862a:	2000      	movs	r0, #0
 800862c:	f00f fd04 	bl	8018038 <fflush>
 8008630:	f00f fc49 	bl	8017ec6 <abort>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00b      	beq.n	8008654 <tcp_pcb_remove+0x108>
 800863c:	4b1b      	ldr	r3, [pc, #108]	; (80086ac <tcp_pcb_remove+0x160>)
 800863e:	f640 029e 	movw	r2, #2206	; 0x89e
 8008642:	491f      	ldr	r1, [pc, #124]	; (80086c0 <tcp_pcb_remove+0x174>)
 8008644:	481b      	ldr	r0, [pc, #108]	; (80086b4 <tcp_pcb_remove+0x168>)
 8008646:	f00f fbf5 	bl	8017e34 <iprintf>
 800864a:	2000      	movs	r0, #0
 800864c:	f00f fcf4 	bl	8018038 <fflush>
 8008650:	f00f fc39 	bl	8017ec6 <abort>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00b      	beq.n	8008674 <tcp_pcb_remove+0x128>
 800865c:	4b13      	ldr	r3, [pc, #76]	; (80086ac <tcp_pcb_remove+0x160>)
 800865e:	f44f 620a 	mov.w	r2, #2208	; 0x8a0
 8008662:	4918      	ldr	r1, [pc, #96]	; (80086c4 <tcp_pcb_remove+0x178>)
 8008664:	4813      	ldr	r0, [pc, #76]	; (80086b4 <tcp_pcb_remove+0x168>)
 8008666:	f00f fbe5 	bl	8017e34 <iprintf>
 800866a:	2000      	movs	r0, #0
 800866c:	f00f fce4 	bl	8018038 <fflush>
 8008670:	f00f fc29 	bl	8017ec6 <abort>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2200      	movs	r2, #0
 8008678:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2200      	movs	r2, #0
 800867e:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
 8008680:	f000 fa6a 	bl	8008b58 <tcp_pcbs_sane>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10b      	bne.n	80086a2 <tcp_pcb_remove+0x156>
 800868a:	4b08      	ldr	r3, [pc, #32]	; (80086ac <tcp_pcb_remove+0x160>)
 800868c:	f640 02a8 	movw	r2, #2216	; 0x8a8
 8008690:	490d      	ldr	r1, [pc, #52]	; (80086c8 <tcp_pcb_remove+0x17c>)
 8008692:	4808      	ldr	r0, [pc, #32]	; (80086b4 <tcp_pcb_remove+0x168>)
 8008694:	f00f fbce 	bl	8017e34 <iprintf>
 8008698:	2000      	movs	r0, #0
 800869a:	f00f fccd 	bl	8018038 <fflush>
 800869e:	f00f fc12 	bl	8017ec6 <abort>
}
 80086a2:	bf00      	nop
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	0801a674 	.word	0x0801a674
 80086b0:	0801b19c 	.word	0x0801b19c
 80086b4:	0801a6a8 	.word	0x0801a6a8
 80086b8:	0801b1b8 	.word	0x0801b1b8
 80086bc:	0801b1d8 	.word	0x0801b1d8
 80086c0:	0801b1f0 	.word	0x0801b1f0
 80086c4:	0801b20c 	.word	0x0801b20c
 80086c8:	0801b224 	.word	0x0801b224

080086cc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10b      	bne.n	80086f2 <tcp_next_iss+0x26>
 80086da:	4b0c      	ldr	r3, [pc, #48]	; (800870c <tcp_next_iss+0x40>)
 80086dc:	f640 02b9 	movw	r2, #2233	; 0x8b9
 80086e0:	490b      	ldr	r1, [pc, #44]	; (8008710 <tcp_next_iss+0x44>)
 80086e2:	480c      	ldr	r0, [pc, #48]	; (8008714 <tcp_next_iss+0x48>)
 80086e4:	f00f fba6 	bl	8017e34 <iprintf>
 80086e8:	2000      	movs	r0, #0
 80086ea:	f00f fca5 	bl	8018038 <fflush>
 80086ee:	f00f fbea 	bl	8017ec6 <abort>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80086f2:	4b09      	ldr	r3, [pc, #36]	; (8008718 <tcp_next_iss+0x4c>)
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	4b09      	ldr	r3, [pc, #36]	; (800871c <tcp_next_iss+0x50>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4413      	add	r3, r2
 80086fc:	4a06      	ldr	r2, [pc, #24]	; (8008718 <tcp_next_iss+0x4c>)
 80086fe:	6013      	str	r3, [r2, #0]
  return iss;
 8008700:	4b05      	ldr	r3, [pc, #20]	; (8008718 <tcp_next_iss+0x4c>)
 8008702:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008704:	4618      	mov	r0, r3
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	0801a674 	.word	0x0801a674
 8008710:	0801b244 	.word	0x0801b244
 8008714:	0801a6a8 	.word	0x0801a6a8
 8008718:	2000000c 	.word	0x2000000c
 800871c:	20004040 	.word	0x20004040

08008720 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
 800872c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10b      	bne.n	800874c <tcp_eff_send_mss_netif+0x2c>
 8008734:	4b17      	ldr	r3, [pc, #92]	; (8008794 <tcp_eff_send_mss_netif+0x74>)
 8008736:	f640 02cf 	movw	r2, #2255	; 0x8cf
 800873a:	4917      	ldr	r1, [pc, #92]	; (8008798 <tcp_eff_send_mss_netif+0x78>)
 800873c:	4817      	ldr	r0, [pc, #92]	; (800879c <tcp_eff_send_mss_netif+0x7c>)
 800873e:	f00f fb79 	bl	8017e34 <iprintf>
 8008742:	2000      	movs	r0, #0
 8008744:	f00f fc78 	bl	8018038 <fflush>
 8008748:	f00f fbbd 	bl	8017ec6 <abort>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <tcp_eff_send_mss_netif+0x36>
      return sendmss;
 8008752:	89fb      	ldrh	r3, [r7, #14]
 8008754:	e019      	b.n	800878a <tcp_eff_send_mss_netif+0x6a>
    }
    mtu = outif->mtu;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	8c1b      	ldrh	r3, [r3, #32]
 800875a:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800875c:	8afb      	ldrh	r3, [r7, #22]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d012      	beq.n	8008788 <tcp_eff_send_mss_netif+0x68>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008762:	2328      	movs	r3, #40	; 0x28
 8008764:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008766:	8afa      	ldrh	r2, [r7, #22]
 8008768:	8abb      	ldrh	r3, [r7, #20]
 800876a:	429a      	cmp	r2, r3
 800876c:	d904      	bls.n	8008778 <tcp_eff_send_mss_netif+0x58>
 800876e:	8afa      	ldrh	r2, [r7, #22]
 8008770:	8abb      	ldrh	r3, [r7, #20]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	b29b      	uxth	r3, r3
 8008776:	e000      	b.n	800877a <tcp_eff_send_mss_netif+0x5a>
 8008778:	2300      	movs	r3, #0
 800877a:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800877c:	8a7a      	ldrh	r2, [r7, #18]
 800877e:	89fb      	ldrh	r3, [r7, #14]
 8008780:	4293      	cmp	r3, r2
 8008782:	bf28      	it	cs
 8008784:	4613      	movcs	r3, r2
 8008786:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008788:	89fb      	ldrh	r3, [r7, #14]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3718      	adds	r7, #24
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	0801a674 	.word	0x0801a674
 8008798:	0801b260 	.word	0x0801b260
 800879c:	0801a6a8 	.word	0x0801a6a8

080087a0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d11d      	bne.n	80087f0 <tcp_netif_ip_addr_changed_pcblist+0x50>
 80087b4:	4b12      	ldr	r3, [pc, #72]	; (8008800 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80087b6:	f640 120a 	movw	r2, #2314	; 0x90a
 80087ba:	4912      	ldr	r1, [pc, #72]	; (8008804 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 80087bc:	4812      	ldr	r0, [pc, #72]	; (8008808 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 80087be:	f00f fb39 	bl	8017e34 <iprintf>
 80087c2:	2000      	movs	r0, #0
 80087c4:	f00f fc38 	bl	8018038 <fflush>
 80087c8:	f00f fb7d 	bl	8017ec6 <abort>

  while (pcb != NULL) {
    /* PCB bound to current local interface address? */
    if (ip_addr_eq(&pcb->local_ip, old_addr)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d108      	bne.n	80087ea <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f7fe fbae 	bl	8006f40 <tcp_abort>
      pcb = next;
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	60fb      	str	r3, [r7, #12]
 80087e8:	e002      	b.n	80087f0 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1ea      	bne.n	80087cc <tcp_netif_ip_addr_changed_pcblist+0x2c>
    }
  }
}
 80087f6:	bf00      	nop
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	0801a674 	.word	0x0801a674
 8008804:	0801b288 	.word	0x0801b288
 8008808:	0801a6a8 	.word	0x0801a6a8

0800880c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d02a      	beq.n	8008872 <tcp_netif_ip_addr_changed+0x66>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d026      	beq.n	8008872 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008824:	4b15      	ldr	r3, [pc, #84]	; (800887c <tcp_netif_ip_addr_changed+0x70>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff ffb8 	bl	80087a0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008830:	4b13      	ldr	r3, [pc, #76]	; (8008880 <tcp_netif_ip_addr_changed+0x74>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7ff ffb2 	bl	80087a0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d017      	beq.n	8008872 <tcp_netif_ip_addr_changed+0x66>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d013      	beq.n	8008872 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800884a:	4b0e      	ldr	r3, [pc, #56]	; (8008884 <tcp_netif_ip_addr_changed+0x78>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	60fb      	str	r3, [r7, #12]
 8008850:	e00c      	b.n	800886c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_eq(&lpcb->local_ip, old_addr)) {
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	429a      	cmp	r2, r3
 800885c:	d103      	bne.n	8008866 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1ef      	bne.n	8008852 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008872:	bf00      	nop
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	2000403c 	.word	0x2000403c
 8008880:	20004048 	.word	0x20004048
 8008884:	20004044 	.word	0x20004044

08008888 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008894:	2b00      	cmp	r3, #0
 8008896:	d007      	beq.n	80088a8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800889c:	4618      	mov	r0, r3
 800889e:	f7ff fadb 	bl	8007e58 <tcp_segs_free>
    pcb->ooseq = NULL;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80088a8:	bf00      	nop
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <tcp_debug_print>:
 *
 * @param tcphdr pointer to a struct tcp_hdr
 */
void
tcp_debug_print(struct tcp_hdr *tcphdr)
{
 80088b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088b4:	b088      	sub	sp, #32
 80088b6:	af06      	add	r7, sp, #24
 80088b8:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("TCP header:\n"));
 80088ba:	4865      	ldr	r0, [pc, #404]	; (8008a50 <tcp_debug_print+0x1a0>)
 80088bc:	f7f8 fd19 	bl	80012f2 <lwip_win32_platform_diag>
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
 80088c0:	4864      	ldr	r0, [pc, #400]	; (8008a54 <tcp_debug_print+0x1a4>)
 80088c2:	f7f8 fd16 	bl	80012f2 <lwip_win32_platform_diag>
  LWIP_DEBUGF(TCP_DEBUG, ("|    %5"U16_F"      |    %5"U16_F"      | (src port, dest port)\n",
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	881b      	ldrh	r3, [r3, #0]
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fa fd17 	bl	8003300 <lwip_htons>
 80088d2:	4603      	mov	r3, r0
 80088d4:	461c      	mov	r4, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	885b      	ldrh	r3, [r3, #2]
 80088da:	b29b      	uxth	r3, r3
 80088dc:	4618      	mov	r0, r3
 80088de:	f7fa fd0f 	bl	8003300 <lwip_htons>
 80088e2:	4603      	mov	r3, r0
 80088e4:	461a      	mov	r2, r3
 80088e6:	4621      	mov	r1, r4
 80088e8:	485b      	ldr	r0, [pc, #364]	; (8008a58 <tcp_debug_print+0x1a8>)
 80088ea:	f7f8 fd02 	bl	80012f2 <lwip_win32_platform_diag>
                          lwip_ntohs(tcphdr->src), lwip_ntohs(tcphdr->dest)));
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
 80088ee:	4859      	ldr	r0, [pc, #356]	; (8008a54 <tcp_debug_print+0x1a4>)
 80088f0:	f7f8 fcff 	bl	80012f2 <lwip_win32_platform_diag>
  LWIP_DEBUGF(TCP_DEBUG, ("|           %010"U32_F"          | (seq no)\n",
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fa fd16 	bl	800332a <lwip_htonl>
 80088fe:	4603      	mov	r3, r0
 8008900:	4619      	mov	r1, r3
 8008902:	4856      	ldr	r0, [pc, #344]	; (8008a5c <tcp_debug_print+0x1ac>)
 8008904:	f7f8 fcf5 	bl	80012f2 <lwip_win32_platform_diag>
                          lwip_ntohl(tcphdr->seqno)));
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
 8008908:	4852      	ldr	r0, [pc, #328]	; (8008a54 <tcp_debug_print+0x1a4>)
 800890a:	f7f8 fcf2 	bl	80012f2 <lwip_win32_platform_diag>
  LWIP_DEBUGF(TCP_DEBUG, ("|           %010"U32_F"          | (ack no)\n",
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	4618      	mov	r0, r3
 8008914:	f7fa fd09 	bl	800332a <lwip_htonl>
 8008918:	4603      	mov	r3, r0
 800891a:	4619      	mov	r1, r3
 800891c:	4850      	ldr	r0, [pc, #320]	; (8008a60 <tcp_debug_print+0x1b0>)
 800891e:	f7f8 fce8 	bl	80012f2 <lwip_win32_platform_diag>
                          lwip_ntohl(tcphdr->ackno)));
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
 8008922:	484c      	ldr	r0, [pc, #304]	; (8008a54 <tcp_debug_print+0x1a4>)
 8008924:	f7f8 fce5 	bl	80012f2 <lwip_win32_platform_diag>
  LWIP_DEBUGF(TCP_DEBUG, ("| %2"U16_F" |   |%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"|     %5"U16_F"     | (hdrlen, flags (",
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	899b      	ldrh	r3, [r3, #12]
 800892c:	b29b      	uxth	r3, r3
 800892e:	4618      	mov	r0, r3
 8008930:	f7fa fce6 	bl	8003300 <lwip_htons>
 8008934:	4603      	mov	r3, r0
 8008936:	0b1b      	lsrs	r3, r3, #12
 8008938:	b29b      	uxth	r3, r3
 800893a:	469a      	mov	sl, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	899b      	ldrh	r3, [r3, #12]
 8008940:	b29b      	uxth	r3, r3
 8008942:	4618      	mov	r0, r3
 8008944:	f7fa fcdc 	bl	8003300 <lwip_htons>
 8008948:	4603      	mov	r3, r0
 800894a:	b2db      	uxtb	r3, r3
 800894c:	115b      	asrs	r3, r3, #5
 800894e:	b29b      	uxth	r3, r3
 8008950:	f003 0801 	and.w	r8, r3, #1
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	899b      	ldrh	r3, [r3, #12]
 8008958:	b29b      	uxth	r3, r3
 800895a:	4618      	mov	r0, r3
 800895c:	f7fa fcd0 	bl	8003300 <lwip_htons>
 8008960:	4603      	mov	r3, r0
 8008962:	b2db      	uxtb	r3, r3
 8008964:	111b      	asrs	r3, r3, #4
 8008966:	b29b      	uxth	r3, r3
 8008968:	f003 0901 	and.w	r9, r3, #1
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	899b      	ldrh	r3, [r3, #12]
 8008970:	b29b      	uxth	r3, r3
 8008972:	4618      	mov	r0, r3
 8008974:	f7fa fcc4 	bl	8003300 <lwip_htons>
 8008978:	4603      	mov	r3, r0
 800897a:	b2db      	uxtb	r3, r3
 800897c:	10db      	asrs	r3, r3, #3
 800897e:	b29b      	uxth	r3, r3
 8008980:	f003 0401 	and.w	r4, r3, #1
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	899b      	ldrh	r3, [r3, #12]
 8008988:	b29b      	uxth	r3, r3
 800898a:	4618      	mov	r0, r3
 800898c:	f7fa fcb8 	bl	8003300 <lwip_htons>
 8008990:	4603      	mov	r3, r0
 8008992:	b2db      	uxtb	r3, r3
 8008994:	109b      	asrs	r3, r3, #2
 8008996:	b29b      	uxth	r3, r3
 8008998:	f003 0501 	and.w	r5, r3, #1
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	899b      	ldrh	r3, [r3, #12]
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fa fcac 	bl	8003300 <lwip_htons>
 80089a8:	4603      	mov	r3, r0
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	105b      	asrs	r3, r3, #1
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	f003 0601 	and.w	r6, r3, #1
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	899b      	ldrh	r3, [r3, #12]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fa fca0 	bl	8003300 <lwip_htons>
 80089c0:	4603      	mov	r3, r0
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	603b      	str	r3, [r7, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	89db      	ldrh	r3, [r3, #14]
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fa fc95 	bl	8003300 <lwip_htons>
 80089d6:	4603      	mov	r3, r0
 80089d8:	9304      	str	r3, [sp, #16]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	9303      	str	r3, [sp, #12]
 80089de:	9602      	str	r6, [sp, #8]
 80089e0:	9501      	str	r5, [sp, #4]
 80089e2:	9400      	str	r4, [sp, #0]
 80089e4:	464b      	mov	r3, r9
 80089e6:	4642      	mov	r2, r8
 80089e8:	4651      	mov	r1, sl
 80089ea:	481e      	ldr	r0, [pc, #120]	; (8008a64 <tcp_debug_print+0x1b4>)
 80089ec:	f7f8 fc81 	bl	80012f2 <lwip_win32_platform_diag>
                          (u16_t)(TCPH_FLAGS(tcphdr) >> 3 & 1),
                          (u16_t)(TCPH_FLAGS(tcphdr) >> 2 & 1),
                          (u16_t)(TCPH_FLAGS(tcphdr) >> 1 & 1),
                          (u16_t)(TCPH_FLAGS(tcphdr)      & 1),
                          lwip_ntohs(tcphdr->wnd)));
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	899b      	ldrh	r3, [r3, #12]
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fa fc82 	bl	8003300 <lwip_htons>
 80089fc:	4603      	mov	r3, r0
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 f848 	bl	8008a9c <tcp_debug_print_flags>
  LWIP_DEBUGF(TCP_DEBUG, ("), win)\n"));
 8008a0c:	4816      	ldr	r0, [pc, #88]	; (8008a68 <tcp_debug_print+0x1b8>)
 8008a0e:	f7f8 fc70 	bl	80012f2 <lwip_win32_platform_diag>
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
 8008a12:	4810      	ldr	r0, [pc, #64]	; (8008a54 <tcp_debug_print+0x1a4>)
 8008a14:	f7f8 fc6d 	bl	80012f2 <lwip_win32_platform_diag>
  LWIP_DEBUGF(TCP_DEBUG, ("|    0x%04"X16_F"     |     %5"U16_F"     | (chksum, urgp)\n",
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	8a1b      	ldrh	r3, [r3, #16]
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fa fc6e 	bl	8003300 <lwip_htons>
 8008a24:	4603      	mov	r3, r0
 8008a26:	461c      	mov	r4, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	8a5b      	ldrh	r3, [r3, #18]
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fa fc66 	bl	8003300 <lwip_htons>
 8008a34:	4603      	mov	r3, r0
 8008a36:	461a      	mov	r2, r3
 8008a38:	4621      	mov	r1, r4
 8008a3a:	480c      	ldr	r0, [pc, #48]	; (8008a6c <tcp_debug_print+0x1bc>)
 8008a3c:	f7f8 fc59 	bl	80012f2 <lwip_win32_platform_diag>
                          lwip_ntohs(tcphdr->chksum), lwip_ntohs(tcphdr->urgp)));
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
 8008a40:	4804      	ldr	r0, [pc, #16]	; (8008a54 <tcp_debug_print+0x1a4>)
 8008a42:	f7f8 fc56 	bl	80012f2 <lwip_win32_platform_diag>
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a50:	0801b2bc 	.word	0x0801b2bc
 8008a54:	0801b2cc 	.word	0x0801b2cc
 8008a58:	0801b2f0 	.word	0x0801b2f0
 8008a5c:	0801b328 	.word	0x0801b328
 8008a60:	0801b350 	.word	0x0801b350
 8008a64:	0801b378 	.word	0x0801b378
 8008a68:	0801b3b8 	.word	0x0801b3b8
 8008a6c:	0801b3c4 	.word	0x0801b3c4

08008a70 <tcp_debug_print_state>:
 *
 * @param s enum tcp_state to print
 */
void
tcp_debug_print_state(enum tcp_state s)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	4603      	mov	r3, r0
 8008a78:	71fb      	strb	r3, [r7, #7]
  LWIP_DEBUGF(TCP_DEBUG, ("State: %s\n", tcp_state_str[s]));
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	4a05      	ldr	r2, [pc, #20]	; (8008a94 <tcp_debug_print_state+0x24>)
 8008a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a82:	4619      	mov	r1, r3
 8008a84:	4804      	ldr	r0, [pc, #16]	; (8008a98 <tcp_debug_print_state+0x28>)
 8008a86:	f7f8 fc34 	bl	80012f2 <lwip_win32_platform_diag>
}
 8008a8a:	bf00      	nop
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	0801db44 	.word	0x0801db44
 8008a98:	0801b3f8 	.word	0x0801b3f8

08008a9c <tcp_debug_print_flags>:
 *
 * @param flags tcp flags, all active flags are printed
 */
void
tcp_debug_print_flags(u8_t flags)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	71fb      	strb	r3, [r7, #7]
  if (flags & TCP_FIN) {
 8008aa6:	79fb      	ldrb	r3, [r7, #7]
 8008aa8:	f003 0301 	and.w	r3, r3, #1
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d002      	beq.n	8008ab6 <tcp_debug_print_flags+0x1a>
    LWIP_DEBUGF(TCP_DEBUG, ("FIN "));
 8008ab0:	4820      	ldr	r0, [pc, #128]	; (8008b34 <tcp_debug_print_flags+0x98>)
 8008ab2:	f7f8 fc1e 	bl	80012f2 <lwip_win32_platform_diag>
  }
  if (flags & TCP_SYN) {
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	f003 0302 	and.w	r3, r3, #2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <tcp_debug_print_flags+0x2a>
    LWIP_DEBUGF(TCP_DEBUG, ("SYN "));
 8008ac0:	481d      	ldr	r0, [pc, #116]	; (8008b38 <tcp_debug_print_flags+0x9c>)
 8008ac2:	f7f8 fc16 	bl	80012f2 <lwip_win32_platform_diag>
  }
  if (flags & TCP_RST) {
 8008ac6:	79fb      	ldrb	r3, [r7, #7]
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <tcp_debug_print_flags+0x3a>
    LWIP_DEBUGF(TCP_DEBUG, ("RST "));
 8008ad0:	481a      	ldr	r0, [pc, #104]	; (8008b3c <tcp_debug_print_flags+0xa0>)
 8008ad2:	f7f8 fc0e 	bl	80012f2 <lwip_win32_platform_diag>
  }
  if (flags & TCP_PSH) {
 8008ad6:	79fb      	ldrb	r3, [r7, #7]
 8008ad8:	f003 0308 	and.w	r3, r3, #8
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <tcp_debug_print_flags+0x4a>
    LWIP_DEBUGF(TCP_DEBUG, ("PSH "));
 8008ae0:	4817      	ldr	r0, [pc, #92]	; (8008b40 <tcp_debug_print_flags+0xa4>)
 8008ae2:	f7f8 fc06 	bl	80012f2 <lwip_win32_platform_diag>
  }
  if (flags & TCP_ACK) {
 8008ae6:	79fb      	ldrb	r3, [r7, #7]
 8008ae8:	f003 0310 	and.w	r3, r3, #16
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <tcp_debug_print_flags+0x5a>
    LWIP_DEBUGF(TCP_DEBUG, ("ACK "));
 8008af0:	4814      	ldr	r0, [pc, #80]	; (8008b44 <tcp_debug_print_flags+0xa8>)
 8008af2:	f7f8 fbfe 	bl	80012f2 <lwip_win32_platform_diag>
  }
  if (flags & TCP_URG) {
 8008af6:	79fb      	ldrb	r3, [r7, #7]
 8008af8:	f003 0320 	and.w	r3, r3, #32
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <tcp_debug_print_flags+0x6a>
    LWIP_DEBUGF(TCP_DEBUG, ("URG "));
 8008b00:	4811      	ldr	r0, [pc, #68]	; (8008b48 <tcp_debug_print_flags+0xac>)
 8008b02:	f7f8 fbf6 	bl	80012f2 <lwip_win32_platform_diag>
  }
  if (flags & TCP_ECE) {
 8008b06:	79fb      	ldrb	r3, [r7, #7]
 8008b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <tcp_debug_print_flags+0x7a>
    LWIP_DEBUGF(TCP_DEBUG, ("ECE "));
 8008b10:	480e      	ldr	r0, [pc, #56]	; (8008b4c <tcp_debug_print_flags+0xb0>)
 8008b12:	f7f8 fbee 	bl	80012f2 <lwip_win32_platform_diag>
  }
  if (flags & TCP_CWR) {
 8008b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	da02      	bge.n	8008b24 <tcp_debug_print_flags+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("CWR "));
 8008b1e:	480c      	ldr	r0, [pc, #48]	; (8008b50 <tcp_debug_print_flags+0xb4>)
 8008b20:	f7f8 fbe7 	bl	80012f2 <lwip_win32_platform_diag>
  }
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 8008b24:	480b      	ldr	r0, [pc, #44]	; (8008b54 <tcp_debug_print_flags+0xb8>)
 8008b26:	f7f8 fbe4 	bl	80012f2 <lwip_win32_platform_diag>
}
 8008b2a:	bf00      	nop
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	0801b404 	.word	0x0801b404
 8008b38:	0801b40c 	.word	0x0801b40c
 8008b3c:	0801b414 	.word	0x0801b414
 8008b40:	0801b41c 	.word	0x0801b41c
 8008b44:	0801b424 	.word	0x0801b424
 8008b48:	0801b42c 	.word	0x0801b42c
 8008b4c:	0801b434 	.word	0x0801b434
 8008b50:	0801b43c 	.word	0x0801b43c
 8008b54:	0801ac60 	.word	0x0801ac60

08008b58 <tcp_pcbs_sane>:
/**
 * Check state consistency of the tcp_pcb lists.
 */
s16_t
tcp_pcbs_sane(void)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b5e:	4b2c      	ldr	r3, [pc, #176]	; (8008c10 <tcp_pcbs_sane+0xb8>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	607b      	str	r3, [r7, #4]
 8008b64:	e032      	b.n	8008bcc <tcp_pcbs_sane+0x74>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	7d1b      	ldrb	r3, [r3, #20]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10b      	bne.n	8008b86 <tcp_pcbs_sane+0x2e>
 8008b6e:	4b29      	ldr	r3, [pc, #164]	; (8008c14 <tcp_pcbs_sane+0xbc>)
 8008b70:	f640 12e3 	movw	r2, #2531	; 0x9e3
 8008b74:	4928      	ldr	r1, [pc, #160]	; (8008c18 <tcp_pcbs_sane+0xc0>)
 8008b76:	4829      	ldr	r0, [pc, #164]	; (8008c1c <tcp_pcbs_sane+0xc4>)
 8008b78:	f00f f95c 	bl	8017e34 <iprintf>
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	f00f fa5b 	bl	8018038 <fflush>
 8008b82:	f00f f9a0 	bl	8017ec6 <abort>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	7d1b      	ldrb	r3, [r3, #20]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d10b      	bne.n	8008ba6 <tcp_pcbs_sane+0x4e>
 8008b8e:	4b21      	ldr	r3, [pc, #132]	; (8008c14 <tcp_pcbs_sane+0xbc>)
 8008b90:	f640 12e4 	movw	r2, #2532	; 0x9e4
 8008b94:	4922      	ldr	r1, [pc, #136]	; (8008c20 <tcp_pcbs_sane+0xc8>)
 8008b96:	4821      	ldr	r0, [pc, #132]	; (8008c1c <tcp_pcbs_sane+0xc4>)
 8008b98:	f00f f94c 	bl	8017e34 <iprintf>
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	f00f fa4b 	bl	8018038 <fflush>
 8008ba2:	f00f f990 	bl	8017ec6 <abort>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	7d1b      	ldrb	r3, [r3, #20]
 8008baa:	2b0a      	cmp	r3, #10
 8008bac:	d10b      	bne.n	8008bc6 <tcp_pcbs_sane+0x6e>
 8008bae:	4b19      	ldr	r3, [pc, #100]	; (8008c14 <tcp_pcbs_sane+0xbc>)
 8008bb0:	f640 12e5 	movw	r2, #2533	; 0x9e5
 8008bb4:	491b      	ldr	r1, [pc, #108]	; (8008c24 <tcp_pcbs_sane+0xcc>)
 8008bb6:	4819      	ldr	r0, [pc, #100]	; (8008c1c <tcp_pcbs_sane+0xc4>)
 8008bb8:	f00f f93c 	bl	8017e34 <iprintf>
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	f00f fa3b 	bl	8018038 <fflush>
 8008bc2:	f00f f980 	bl	8017ec6 <abort>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	607b      	str	r3, [r7, #4]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1c9      	bne.n	8008b66 <tcp_pcbs_sane+0xe>
  }
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bd2:	4b15      	ldr	r3, [pc, #84]	; (8008c28 <tcp_pcbs_sane+0xd0>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	607b      	str	r3, [r7, #4]
 8008bd8:	e012      	b.n	8008c00 <tcp_pcbs_sane+0xa8>
    LWIP_ASSERT("tcp_pcbs_sane: tw pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	7d1b      	ldrb	r3, [r3, #20]
 8008bde:	2b0a      	cmp	r3, #10
 8008be0:	d00b      	beq.n	8008bfa <tcp_pcbs_sane+0xa2>
 8008be2:	4b0c      	ldr	r3, [pc, #48]	; (8008c14 <tcp_pcbs_sane+0xbc>)
 8008be4:	f640 12e8 	movw	r2, #2536	; 0x9e8
 8008be8:	4910      	ldr	r1, [pc, #64]	; (8008c2c <tcp_pcbs_sane+0xd4>)
 8008bea:	480c      	ldr	r0, [pc, #48]	; (8008c1c <tcp_pcbs_sane+0xc4>)
 8008bec:	f00f f922 	bl	8017e34 <iprintf>
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	f00f fa21 	bl	8018038 <fflush>
 8008bf6:	f00f f966 	bl	8017ec6 <abort>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	607b      	str	r3, [r7, #4]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1e9      	bne.n	8008bda <tcp_pcbs_sane+0x82>
  }
  return 1;
 8008c06:	2301      	movs	r3, #1
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	2000403c 	.word	0x2000403c
 8008c14:	0801a674 	.word	0x0801a674
 8008c18:	0801b4d0 	.word	0x0801b4d0
 8008c1c:	0801a6a8 	.word	0x0801a6a8
 8008c20:	0801b4fc 	.word	0x0801b4fc
 8008c24:	0801b528 	.word	0x0801b528
 8008c28:	2000404c 	.word	0x2000404c
 8008c2c:	0801b558 	.word	0x0801b558

08008c30 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008c30:	b590      	push	{r4, r7, lr}
 8008c32:	b08d      	sub	sp, #52	; 0x34
 8008c34:	af04      	add	r7, sp, #16
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10a      	bne.n	8008c56 <tcp_input+0x26>
 8008c40:	4ba7      	ldr	r3, [pc, #668]	; (8008ee0 <tcp_input+0x2b0>)
 8008c42:	2283      	movs	r2, #131	; 0x83
 8008c44:	49a7      	ldr	r1, [pc, #668]	; (8008ee4 <tcp_input+0x2b4>)
 8008c46:	48a8      	ldr	r0, [pc, #672]	; (8008ee8 <tcp_input+0x2b8>)
 8008c48:	f00f f8f4 	bl	8017e34 <iprintf>
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	f00f f9f3 	bl	8018038 <fflush>
 8008c52:	f00f f938 	bl	8017ec6 <abort>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	4aa4      	ldr	r2, [pc, #656]	; (8008eec <tcp_input+0x2bc>)
 8008c5c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	895b      	ldrh	r3, [r3, #10]
 8008c62:	2b13      	cmp	r3, #19
 8008c64:	f240 8429 	bls.w	80094ba <tcp_input+0x88a>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008c68:	4ba1      	ldr	r3, [pc, #644]	; (8008ef0 <tcp_input+0x2c0>)
 8008c6a:	695a      	ldr	r2, [r3, #20]
 8008c6c:	4ba0      	ldr	r3, [pc, #640]	; (8008ef0 <tcp_input+0x2c0>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4619      	mov	r1, r3
 8008c72:	4610      	mov	r0, r2
 8008c74:	f7fb fce4 	bl	8004640 <ip4_addr_isbroadcast_u32>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f040 8424 	bne.w	80094c8 <tcp_input+0x898>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008c80:	4b9b      	ldr	r3, [pc, #620]	; (8008ef0 <tcp_input+0x2c0>)
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008c88:	2be0      	cmp	r3, #224	; 0xe0
 8008c8a:	f000 841d 	beq.w	80094c8 <tcp_input+0x898>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	891a      	ldrh	r2, [r3, #8]
 8008c92:	4b98      	ldr	r3, [pc, #608]	; (8008ef4 <tcp_input+0x2c4>)
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	4b98      	ldr	r3, [pc, #608]	; (8008ef8 <tcp_input+0x2c8>)
 8008c98:	2106      	movs	r1, #6
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7fa ff76 	bl	8003b8c <ip_chksum_pseudo>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 8008ca4:	8a3b      	ldrh	r3, [r7, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d006      	beq.n	8008cb8 <tcp_input+0x88>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
                                    chksum));
      tcp_debug_print(tcphdr);
 8008caa:	4b90      	ldr	r3, [pc, #576]	; (8008eec <tcp_input+0x2bc>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7ff fdfe 	bl	80088b0 <tcp_debug_print>
      TCP_STATS_INC(tcp.chkerr);
      goto dropped;
 8008cb4:	f000 bc08 	b.w	80094c8 <tcp_input+0x898>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008cb8:	4b8c      	ldr	r3, [pc, #560]	; (8008eec <tcp_input+0x2bc>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	899b      	ldrh	r3, [r3, #12]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fa fb1d 	bl	8003300 <lwip_htons>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	0b1b      	lsrs	r3, r3, #12
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
 8008cd4:	2b13      	cmp	r3, #19
 8008cd6:	f240 83f2 	bls.w	80094be <tcp_input+0x88e>
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	891b      	ldrh	r3, [r3, #8]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	f200 83eb 	bhi.w	80094be <tcp_input+0x88e>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	3b14      	subs	r3, #20
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	4b82      	ldr	r3, [pc, #520]	; (8008efc <tcp_input+0x2cc>)
 8008cf2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008cf4:	4b82      	ldr	r3, [pc, #520]	; (8008f00 <tcp_input+0x2d0>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	895a      	ldrh	r2, [r3, #10]
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d309      	bcc.n	8008d1a <tcp_input+0xea>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008d06:	4b7d      	ldr	r3, [pc, #500]	; (8008efc <tcp_input+0x2cc>)
 8008d08:	881a      	ldrh	r2, [r3, #0]
 8008d0a:	4b7e      	ldr	r3, [pc, #504]	; (8008f04 <tcp_input+0x2d4>)
 8008d0c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7fc fff4 	bl	8005d00 <pbuf_remove_header>
 8008d18:	e05d      	b.n	8008dd6 <tcp_input+0x1a6>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10a      	bne.n	8008d38 <tcp_input+0x108>
 8008d22:	4b6f      	ldr	r3, [pc, #444]	; (8008ee0 <tcp_input+0x2b0>)
 8008d24:	22c2      	movs	r2, #194	; 0xc2
 8008d26:	4978      	ldr	r1, [pc, #480]	; (8008f08 <tcp_input+0x2d8>)
 8008d28:	486f      	ldr	r0, [pc, #444]	; (8008ee8 <tcp_input+0x2b8>)
 8008d2a:	f00f f883 	bl	8017e34 <iprintf>
 8008d2e:	2000      	movs	r0, #0
 8008d30:	f00f f982 	bl	8018038 <fflush>
 8008d34:	f00f f8c7 	bl	8017ec6 <abort>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008d38:	2114      	movs	r1, #20
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7fc ffe0 	bl	8005d00 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	895a      	ldrh	r2, [r3, #10]
 8008d44:	4b6f      	ldr	r3, [pc, #444]	; (8008f04 <tcp_input+0x2d4>)
 8008d46:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008d48:	4b6c      	ldr	r3, [pc, #432]	; (8008efc <tcp_input+0x2cc>)
 8008d4a:	881a      	ldrh	r2, [r3, #0]
 8008d4c:	4b6d      	ldr	r3, [pc, #436]	; (8008f04 <tcp_input+0x2d4>)
 8008d4e:	881b      	ldrh	r3, [r3, #0]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008d54:	4b6b      	ldr	r3, [pc, #428]	; (8008f04 <tcp_input+0x2d4>)
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7fc ffd0 	bl	8005d00 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	895b      	ldrh	r3, [r3, #10]
 8008d66:	89ba      	ldrh	r2, [r7, #12]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	f200 83aa 	bhi.w	80094c2 <tcp_input+0x892>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	4a62      	ldr	r2, [pc, #392]	; (8008f00 <tcp_input+0x2d0>)
 8008d76:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	89ba      	ldrh	r2, [r7, #12]
 8008d7e:	4611      	mov	r1, r2
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7fc ffbd 	bl	8005d00 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	891a      	ldrh	r2, [r3, #8]
 8008d8a:	89bb      	ldrh	r3, [r7, #12]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	895b      	ldrh	r3, [r3, #10]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00a      	beq.n	8008db2 <tcp_input+0x182>
 8008d9c:	4b50      	ldr	r3, [pc, #320]	; (8008ee0 <tcp_input+0x2b0>)
 8008d9e:	22df      	movs	r2, #223	; 0xdf
 8008da0:	495a      	ldr	r1, [pc, #360]	; (8008f0c <tcp_input+0x2dc>)
 8008da2:	4851      	ldr	r0, [pc, #324]	; (8008ee8 <tcp_input+0x2b8>)
 8008da4:	f00f f846 	bl	8017e34 <iprintf>
 8008da8:	2000      	movs	r0, #0
 8008daa:	f00f f945 	bl	8018038 <fflush>
 8008dae:	f00f f88a 	bl	8017ec6 <abort>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	891a      	ldrh	r2, [r3, #8]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	891b      	ldrh	r3, [r3, #8]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d00a      	beq.n	8008dd6 <tcp_input+0x1a6>
 8008dc0:	4b47      	ldr	r3, [pc, #284]	; (8008ee0 <tcp_input+0x2b0>)
 8008dc2:	22e0      	movs	r2, #224	; 0xe0
 8008dc4:	4952      	ldr	r1, [pc, #328]	; (8008f10 <tcp_input+0x2e0>)
 8008dc6:	4848      	ldr	r0, [pc, #288]	; (8008ee8 <tcp_input+0x2b8>)
 8008dc8:	f00f f834 	bl	8017e34 <iprintf>
 8008dcc:	2000      	movs	r0, #0
 8008dce:	f00f f933 	bl	8018038 <fflush>
 8008dd2:	f00f f878 	bl	8017ec6 <abort>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008dd6:	4b45      	ldr	r3, [pc, #276]	; (8008eec <tcp_input+0x2bc>)
 8008dd8:	681c      	ldr	r4, [r3, #0]
 8008dda:	4b44      	ldr	r3, [pc, #272]	; (8008eec <tcp_input+0x2bc>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	881b      	ldrh	r3, [r3, #0]
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fa fa8c 	bl	8003300 <lwip_htons>
 8008de8:	4603      	mov	r3, r0
 8008dea:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008dec:	4b3f      	ldr	r3, [pc, #252]	; (8008eec <tcp_input+0x2bc>)
 8008dee:	681c      	ldr	r4, [r3, #0]
 8008df0:	4b3e      	ldr	r3, [pc, #248]	; (8008eec <tcp_input+0x2bc>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	885b      	ldrh	r3, [r3, #2]
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fa fa81 	bl	8003300 <lwip_htons>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008e02:	4b3a      	ldr	r3, [pc, #232]	; (8008eec <tcp_input+0x2bc>)
 8008e04:	681c      	ldr	r4, [r3, #0]
 8008e06:	4b39      	ldr	r3, [pc, #228]	; (8008eec <tcp_input+0x2bc>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7fa fa8c 	bl	800332a <lwip_htonl>
 8008e12:	4603      	mov	r3, r0
 8008e14:	6063      	str	r3, [r4, #4]
 8008e16:	6863      	ldr	r3, [r4, #4]
 8008e18:	4a3e      	ldr	r2, [pc, #248]	; (8008f14 <tcp_input+0x2e4>)
 8008e1a:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008e1c:	4b33      	ldr	r3, [pc, #204]	; (8008eec <tcp_input+0x2bc>)
 8008e1e:	681c      	ldr	r4, [r3, #0]
 8008e20:	4b32      	ldr	r3, [pc, #200]	; (8008eec <tcp_input+0x2bc>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fa fa7f 	bl	800332a <lwip_htonl>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	60a3      	str	r3, [r4, #8]
 8008e30:	68a3      	ldr	r3, [r4, #8]
 8008e32:	4a39      	ldr	r2, [pc, #228]	; (8008f18 <tcp_input+0x2e8>)
 8008e34:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008e36:	4b2d      	ldr	r3, [pc, #180]	; (8008eec <tcp_input+0x2bc>)
 8008e38:	681c      	ldr	r4, [r3, #0]
 8008e3a:	4b2c      	ldr	r3, [pc, #176]	; (8008eec <tcp_input+0x2bc>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	89db      	ldrh	r3, [r3, #14]
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fa fa5c 	bl	8003300 <lwip_htons>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008e4c:	4b27      	ldr	r3, [pc, #156]	; (8008eec <tcp_input+0x2bc>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	899b      	ldrh	r3, [r3, #12]
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7fa fa53 	bl	8003300 <lwip_htons>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	4b2d      	ldr	r3, [pc, #180]	; (8008f1c <tcp_input+0x2ec>)
 8008e66:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	891a      	ldrh	r2, [r3, #8]
 8008e6c:	4b2c      	ldr	r3, [pc, #176]	; (8008f20 <tcp_input+0x2f0>)
 8008e6e:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008e70:	4b2a      	ldr	r3, [pc, #168]	; (8008f1c <tcp_input+0x2ec>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	f003 0303 	and.w	r3, r3, #3
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00c      	beq.n	8008e96 <tcp_input+0x266>
    tcplen++;
 8008e7c:	4b28      	ldr	r3, [pc, #160]	; (8008f20 <tcp_input+0x2f0>)
 8008e7e:	881b      	ldrh	r3, [r3, #0]
 8008e80:	3301      	adds	r3, #1
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	4b26      	ldr	r3, [pc, #152]	; (8008f20 <tcp_input+0x2f0>)
 8008e86:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	891a      	ldrh	r2, [r3, #8]
 8008e8c:	4b24      	ldr	r3, [pc, #144]	; (8008f20 <tcp_input+0x2f0>)
 8008e8e:	881b      	ldrh	r3, [r3, #0]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	f200 8318 	bhi.w	80094c6 <tcp_input+0x896>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008e96:	2300      	movs	r3, #0
 8008e98:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e9a:	4b22      	ldr	r3, [pc, #136]	; (8008f24 <tcp_input+0x2f4>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	61fb      	str	r3, [r7, #28]
 8008ea0:	e0b7      	b.n	8009012 <tcp_input+0x3e2>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	7d1b      	ldrb	r3, [r3, #20]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10a      	bne.n	8008ec0 <tcp_input+0x290>
 8008eaa:	4b0d      	ldr	r3, [pc, #52]	; (8008ee0 <tcp_input+0x2b0>)
 8008eac:	22fb      	movs	r2, #251	; 0xfb
 8008eae:	491e      	ldr	r1, [pc, #120]	; (8008f28 <tcp_input+0x2f8>)
 8008eb0:	480d      	ldr	r0, [pc, #52]	; (8008ee8 <tcp_input+0x2b8>)
 8008eb2:	f00e ffbf 	bl	8017e34 <iprintf>
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	f00f f8be 	bl	8018038 <fflush>
 8008ebc:	f00f f803 	bl	8017ec6 <abort>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	7d1b      	ldrb	r3, [r3, #20]
 8008ec4:	2b0a      	cmp	r3, #10
 8008ec6:	d133      	bne.n	8008f30 <tcp_input+0x300>
 8008ec8:	4b05      	ldr	r3, [pc, #20]	; (8008ee0 <tcp_input+0x2b0>)
 8008eca:	22fc      	movs	r2, #252	; 0xfc
 8008ecc:	4917      	ldr	r1, [pc, #92]	; (8008f2c <tcp_input+0x2fc>)
 8008ece:	4806      	ldr	r0, [pc, #24]	; (8008ee8 <tcp_input+0x2b8>)
 8008ed0:	f00e ffb0 	bl	8017e34 <iprintf>
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	f00f f8af 	bl	8018038 <fflush>
 8008eda:	f00e fff4 	bl	8017ec6 <abort>
 8008ede:	bf00      	nop
 8008ee0:	0801b584 	.word	0x0801b584
 8008ee4:	0801b5a8 	.word	0x0801b5a8
 8008ee8:	0801b5c0 	.word	0x0801b5c0
 8008eec:	20000c00 	.word	0x20000c00
 8008ef0:	20000d60 	.word	0x20000d60
 8008ef4:	20000d74 	.word	0x20000d74
 8008ef8:	20000d70 	.word	0x20000d70
 8008efc:	20000c04 	.word	0x20000c04
 8008f00:	20000c08 	.word	0x20000c08
 8008f04:	20000c06 	.word	0x20000c06
 8008f08:	0801b5e8 	.word	0x0801b5e8
 8008f0c:	0801b5f8 	.word	0x0801b5f8
 8008f10:	0801b604 	.word	0x0801b604
 8008f14:	20000c10 	.word	0x20000c10
 8008f18:	20000c14 	.word	0x20000c14
 8008f1c:	20000c1c 	.word	0x20000c1c
 8008f20:	20000c1a 	.word	0x20000c1a
 8008f24:	2000403c 	.word	0x2000403c
 8008f28:	0801b624 	.word	0x0801b624
 8008f2c:	0801b64c 	.word	0x0801b64c
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	7d1b      	ldrb	r3, [r3, #20]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d10a      	bne.n	8008f4e <tcp_input+0x31e>
 8008f38:	4b88      	ldr	r3, [pc, #544]	; (800915c <tcp_input+0x52c>)
 8008f3a:	22fd      	movs	r2, #253	; 0xfd
 8008f3c:	4988      	ldr	r1, [pc, #544]	; (8009160 <tcp_input+0x530>)
 8008f3e:	4889      	ldr	r0, [pc, #548]	; (8009164 <tcp_input+0x534>)
 8008f40:	f00e ff78 	bl	8017e34 <iprintf>
 8008f44:	2000      	movs	r0, #0
 8008f46:	f00f f877 	bl	8018038 <fflush>
 8008f4a:	f00e ffbc 	bl	8017ec6 <abort>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	7a1b      	ldrb	r3, [r3, #8]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00c      	beq.n	8008f70 <tcp_input+0x340>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	7a1a      	ldrb	r2, [r3, #8]
 8008f5a:	4b83      	ldr	r3, [pc, #524]	; (8009168 <tcp_input+0x538>)
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f62:	3301      	adds	r3, #1
 8008f64:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d002      	beq.n	8008f70 <tcp_input+0x340>
      prev = pcb;
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	61bb      	str	r3, [r7, #24]
      continue;
 8008f6e:	e04d      	b.n	800900c <tcp_input+0x3dc>
    }

    if (pcb->remote_port == tcphdr->src &&
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	8b1a      	ldrh	r2, [r3, #24]
 8008f74:	4b7d      	ldr	r3, [pc, #500]	; (800916c <tcp_input+0x53c>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	881b      	ldrh	r3, [r3, #0]
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d143      	bne.n	8009008 <tcp_input+0x3d8>
        pcb->local_port == tcphdr->dest &&
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	8ada      	ldrh	r2, [r3, #22]
 8008f84:	4b79      	ldr	r3, [pc, #484]	; (800916c <tcp_input+0x53c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	885b      	ldrh	r3, [r3, #2]
 8008f8a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d13b      	bne.n	8009008 <tcp_input+0x3d8>
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	685a      	ldr	r2, [r3, #4]
 8008f94:	4b74      	ldr	r3, [pc, #464]	; (8009168 <tcp_input+0x538>)
 8008f96:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d135      	bne.n	8009008 <tcp_input+0x3d8>
        ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	4b71      	ldr	r3, [pc, #452]	; (8009168 <tcp_input+0x538>)
 8008fa2:	695b      	ldr	r3, [r3, #20]
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d12f      	bne.n	8009008 <tcp_input+0x3d8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	68da      	ldr	r2, [r3, #12]
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d10b      	bne.n	8008fca <tcp_input+0x39a>
 8008fb2:	4b6a      	ldr	r3, [pc, #424]	; (800915c <tcp_input+0x52c>)
 8008fb4:	f240 120d 	movw	r2, #269	; 0x10d
 8008fb8:	496d      	ldr	r1, [pc, #436]	; (8009170 <tcp_input+0x540>)
 8008fba:	486a      	ldr	r0, [pc, #424]	; (8009164 <tcp_input+0x534>)
 8008fbc:	f00e ff3a 	bl	8017e34 <iprintf>
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	f00f f839 	bl	8018038 <fflush>
 8008fc6:	f00e ff7e 	bl	8017ec6 <abort>
      if (prev != NULL) {
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00a      	beq.n	8008fe6 <tcp_input+0x3b6>
        prev->next = pcb->next;
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	68da      	ldr	r2, [r3, #12]
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008fd8:	4b66      	ldr	r3, [pc, #408]	; (8009174 <tcp_input+0x544>)
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008fe0:	4a64      	ldr	r2, [pc, #400]	; (8009174 <tcp_input+0x544>)
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	68da      	ldr	r2, [r3, #12]
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d115      	bne.n	800901c <tcp_input+0x3ec>
 8008ff0:	4b5a      	ldr	r3, [pc, #360]	; (800915c <tcp_input+0x52c>)
 8008ff2:	f240 1215 	movw	r2, #277	; 0x115
 8008ff6:	4960      	ldr	r1, [pc, #384]	; (8009178 <tcp_input+0x548>)
 8008ff8:	485a      	ldr	r0, [pc, #360]	; (8009164 <tcp_input+0x534>)
 8008ffa:	f00e ff1b 	bl	8017e34 <iprintf>
 8008ffe:	2000      	movs	r0, #0
 8009000:	f00f f81a 	bl	8018038 <fflush>
 8009004:	f00e ff5f 	bl	8017ec6 <abort>
      break;
    }
    prev = pcb;
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	61fb      	str	r3, [r7, #28]
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	2b00      	cmp	r3, #0
 8009016:	f47f af44 	bne.w	8008ea2 <tcp_input+0x272>
 800901a:	e000      	b.n	800901e <tcp_input+0x3ee>
      break;
 800901c:	bf00      	nop
  }

  if (pcb == NULL) {
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	2b00      	cmp	r3, #0
 8009022:	f040 80b1 	bne.w	8009188 <tcp_input+0x558>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009026:	4b55      	ldr	r3, [pc, #340]	; (800917c <tcp_input+0x54c>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	61fb      	str	r3, [r7, #28]
 800902c:	e044      	b.n	80090b8 <tcp_input+0x488>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	7d1b      	ldrb	r3, [r3, #20]
 8009032:	2b0a      	cmp	r3, #10
 8009034:	d00b      	beq.n	800904e <tcp_input+0x41e>
 8009036:	4b49      	ldr	r3, [pc, #292]	; (800915c <tcp_input+0x52c>)
 8009038:	f240 121f 	movw	r2, #287	; 0x11f
 800903c:	4950      	ldr	r1, [pc, #320]	; (8009180 <tcp_input+0x550>)
 800903e:	4849      	ldr	r0, [pc, #292]	; (8009164 <tcp_input+0x534>)
 8009040:	f00e fef8 	bl	8017e34 <iprintf>
 8009044:	2000      	movs	r0, #0
 8009046:	f00e fff7 	bl	8018038 <fflush>
 800904a:	f00e ff3c 	bl	8017ec6 <abort>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	7a1b      	ldrb	r3, [r3, #8]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d009      	beq.n	800906a <tcp_input+0x43a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	7a1a      	ldrb	r2, [r3, #8]
 800905a:	4b43      	ldr	r3, [pc, #268]	; (8009168 <tcp_input+0x538>)
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009062:	3301      	adds	r3, #1
 8009064:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009066:	429a      	cmp	r2, r3
 8009068:	d122      	bne.n	80090b0 <tcp_input+0x480>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	8b1a      	ldrh	r2, [r3, #24]
 800906e:	4b3f      	ldr	r3, [pc, #252]	; (800916c <tcp_input+0x53c>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	b29b      	uxth	r3, r3
 8009076:	429a      	cmp	r2, r3
 8009078:	d11b      	bne.n	80090b2 <tcp_input+0x482>
          pcb->local_port == tcphdr->dest &&
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	8ada      	ldrh	r2, [r3, #22]
 800907e:	4b3b      	ldr	r3, [pc, #236]	; (800916c <tcp_input+0x53c>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	885b      	ldrh	r3, [r3, #2]
 8009084:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009086:	429a      	cmp	r2, r3
 8009088:	d113      	bne.n	80090b2 <tcp_input+0x482>
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	4b36      	ldr	r3, [pc, #216]	; (8009168 <tcp_input+0x538>)
 8009090:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009092:	429a      	cmp	r2, r3
 8009094:	d10d      	bne.n	80090b2 <tcp_input+0x482>
          ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	4b33      	ldr	r3, [pc, #204]	; (8009168 <tcp_input+0x538>)
 800909c:	695b      	ldr	r3, [r3, #20]
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 800909e:	429a      	cmp	r2, r3
 80090a0:	d107      	bne.n	80090b2 <tcp_input+0x482>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80090a2:	69f8      	ldr	r0, [r7, #28]
 80090a4:	f000 fb8a 	bl	80097bc <tcp_timewait_input>
        }
        pbuf_free(p);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7fc feb3 	bl	8005e14 <pbuf_free>
        return;
 80090ae:	e210      	b.n	80094d2 <tcp_input+0x8a2>
        continue;
 80090b0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	61fb      	str	r3, [r7, #28]
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1b7      	bne.n	800902e <tcp_input+0x3fe>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80090be:	2300      	movs	r3, #0
 80090c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80090c2:	4b30      	ldr	r3, [pc, #192]	; (8009184 <tcp_input+0x554>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	e02a      	b.n	8009120 <tcp_input+0x4f0>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	7a1b      	ldrb	r3, [r3, #8]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00c      	beq.n	80090ec <tcp_input+0x4bc>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	7a1a      	ldrb	r2, [r3, #8]
 80090d6:	4b24      	ldr	r3, [pc, #144]	; (8009168 <tcp_input+0x538>)
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80090de:	3301      	adds	r3, #1
 80090e0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d002      	beq.n	80090ec <tcp_input+0x4bc>
        prev = (struct tcp_pcb *)lpcb;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	61bb      	str	r3, [r7, #24]
        continue;
 80090ea:	e016      	b.n	800911a <tcp_input+0x4ea>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	8ada      	ldrh	r2, [r3, #22]
 80090f0:	4b1e      	ldr	r3, [pc, #120]	; (800916c <tcp_input+0x53c>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	885b      	ldrh	r3, [r3, #2]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d10c      	bne.n	8009116 <tcp_input+0x4e6>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_eq(&lpcb->local_ip, ip_current_dest_addr())) {
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	4b19      	ldr	r3, [pc, #100]	; (8009168 <tcp_input+0x538>)
 8009102:	695b      	ldr	r3, [r3, #20]
 8009104:	429a      	cmp	r2, r3
 8009106:	d00f      	beq.n	8009128 <tcp_input+0x4f8>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00d      	beq.n	800912a <tcp_input+0x4fa>
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d009      	beq.n	800912a <tcp_input+0x4fa>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	617b      	str	r3, [r7, #20]
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1d1      	bne.n	80090ca <tcp_input+0x49a>
 8009126:	e000      	b.n	800912a <tcp_input+0x4fa>
            break;
 8009128:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d02b      	beq.n	8009188 <tcp_input+0x558>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00a      	beq.n	800914c <tcp_input+0x51c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	68da      	ldr	r2, [r3, #12]
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800913e:	4b11      	ldr	r3, [pc, #68]	; (8009184 <tcp_input+0x554>)
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009146:	4a0f      	ldr	r2, [pc, #60]	; (8009184 <tcp_input+0x554>)
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800914c:	6978      	ldr	r0, [r7, #20]
 800914e:	f000 fa1d 	bl	800958c <tcp_listen_input>
      }
      pbuf_free(p);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7fc fe5e 	bl	8005e14 <pbuf_free>
      return;
 8009158:	e1bb      	b.n	80094d2 <tcp_input+0x8a2>
 800915a:	bf00      	nop
 800915c:	0801b584 	.word	0x0801b584
 8009160:	0801b678 	.word	0x0801b678
 8009164:	0801b5c0 	.word	0x0801b5c0
 8009168:	20000d60 	.word	0x20000d60
 800916c:	20000c00 	.word	0x20000c00
 8009170:	0801b6a0 	.word	0x0801b6a0
 8009174:	2000403c 	.word	0x2000403c
 8009178:	0801b6cc 	.word	0x0801b6cc
 800917c:	2000404c 	.word	0x2000404c
 8009180:	0801b6f8 	.word	0x0801b6f8
 8009184:	20004044 	.word	0x20004044
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	2b00      	cmp	r3, #0
 800918c:	f000 815a 	beq.w	8009444 <tcp_input+0x814>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009190:	4ba0      	ldr	r3, [pc, #640]	; (8009414 <tcp_input+0x7e4>)
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	891a      	ldrh	r2, [r3, #8]
 800919a:	4b9e      	ldr	r3, [pc, #632]	; (8009414 <tcp_input+0x7e4>)
 800919c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800919e:	4a9d      	ldr	r2, [pc, #628]	; (8009414 <tcp_input+0x7e4>)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80091a4:	4b9c      	ldr	r3, [pc, #624]	; (8009418 <tcp_input+0x7e8>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a9a      	ldr	r2, [pc, #616]	; (8009414 <tcp_input+0x7e4>)
 80091aa:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 80091ac:	4b9b      	ldr	r3, [pc, #620]	; (800941c <tcp_input+0x7ec>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80091b2:	4b9b      	ldr	r3, [pc, #620]	; (8009420 <tcp_input+0x7f0>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80091b8:	4b9a      	ldr	r3, [pc, #616]	; (8009424 <tcp_input+0x7f4>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80091be:	4b9a      	ldr	r3, [pc, #616]	; (8009428 <tcp_input+0x7f8>)
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	f003 0308 	and.w	r3, r3, #8
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d006      	beq.n	80091d8 <tcp_input+0x5a8>
      p->flags |= PBUF_FLAG_PUSH;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	7b5b      	ldrb	r3, [r3, #13]
 80091ce:	f043 0301 	orr.w	r3, r3, #1
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d017      	beq.n	8009210 <tcp_input+0x5e0>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80091e0:	69f8      	ldr	r0, [r7, #28]
 80091e2:	f7fe fdbd 	bl	8007d60 <tcp_process_refused_data>
 80091e6:	4603      	mov	r3, r0
 80091e8:	f113 0f0d 	cmn.w	r3, #13
 80091ec:	d007      	beq.n	80091fe <tcp_input+0x5ce>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00c      	beq.n	8009210 <tcp_input+0x5e0>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80091f6:	4b8d      	ldr	r3, [pc, #564]	; (800942c <tcp_input+0x7fc>)
 80091f8:	881b      	ldrh	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d008      	beq.n	8009210 <tcp_input+0x5e0>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009202:	2b00      	cmp	r3, #0
 8009204:	f040 80e8 	bne.w	80093d8 <tcp_input+0x7a8>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009208:	69f8      	ldr	r0, [r7, #28]
 800920a:	f004 f907 	bl	800d41c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800920e:	e0e3      	b.n	80093d8 <tcp_input+0x7a8>
      }
    }
    tcp_input_pcb = pcb;
 8009210:	4a87      	ldr	r2, [pc, #540]	; (8009430 <tcp_input+0x800>)
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009216:	69f8      	ldr	r0, [r7, #28]
 8009218:	f000 fb50 	bl	80098bc <tcp_process>
 800921c:	4603      	mov	r3, r0
 800921e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009220:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009224:	f113 0f0d 	cmn.w	r3, #13
 8009228:	f000 80e1 	beq.w	80093ee <tcp_input+0x7be>
      if (recv_flags & TF_RESET) {
 800922c:	4b7c      	ldr	r3, [pc, #496]	; (8009420 <tcp_input+0x7f0>)
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	f003 0308 	and.w	r3, r3, #8
 8009234:	2b00      	cmp	r3, #0
 8009236:	d015      	beq.n	8009264 <tcp_input+0x634>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800923e:	2b00      	cmp	r3, #0
 8009240:	d008      	beq.n	8009254 <tcp_input+0x624>
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009248:	69fa      	ldr	r2, [r7, #28]
 800924a:	6912      	ldr	r2, [r2, #16]
 800924c:	f06f 010d 	mvn.w	r1, #13
 8009250:	4610      	mov	r0, r2
 8009252:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009254:	69f9      	ldr	r1, [r7, #28]
 8009256:	4877      	ldr	r0, [pc, #476]	; (8009434 <tcp_input+0x804>)
 8009258:	f7ff f978 	bl	800854c <tcp_pcb_remove>
        tcp_free(pcb);
 800925c:	69f8      	ldr	r0, [r7, #28]
 800925e:	f7fd fb57 	bl	8006910 <tcp_free>
 8009262:	e0c4      	b.n	80093ee <tcp_input+0x7be>
      } else {
        err = ERR_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009268:	4b6e      	ldr	r3, [pc, #440]	; (8009424 <tcp_input+0x7f4>)
 800926a:	881b      	ldrh	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d01d      	beq.n	80092ac <tcp_input+0x67c>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009270:	4b6c      	ldr	r3, [pc, #432]	; (8009424 <tcp_input+0x7f4>)
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00a      	beq.n	8009296 <tcp_input+0x666>
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009286:	69fa      	ldr	r2, [r7, #28]
 8009288:	6910      	ldr	r0, [r2, #16]
 800928a:	897a      	ldrh	r2, [r7, #10]
 800928c:	69f9      	ldr	r1, [r7, #28]
 800928e:	4798      	blx	r3
 8009290:	4603      	mov	r3, r0
 8009292:	74fb      	strb	r3, [r7, #19]
 8009294:	e001      	b.n	800929a <tcp_input+0x66a>
 8009296:	2300      	movs	r3, #0
 8009298:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800929a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800929e:	f113 0f0d 	cmn.w	r3, #13
 80092a2:	f000 809b 	beq.w	80093dc <tcp_input+0x7ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 80092a6:	4b5f      	ldr	r3, [pc, #380]	; (8009424 <tcp_input+0x7f4>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80092ac:	69f8      	ldr	r0, [r7, #28]
 80092ae:	f000 f927 	bl	8009500 <tcp_input_delayed_close>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f040 8093 	bne.w	80093e0 <tcp_input+0x7b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80092ba:	4b58      	ldr	r3, [pc, #352]	; (800941c <tcp_input+0x7ec>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d046      	beq.n	8009350 <tcp_input+0x720>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00b      	beq.n	80092e2 <tcp_input+0x6b2>
 80092ca:	4b5b      	ldr	r3, [pc, #364]	; (8009438 <tcp_input+0x808>)
 80092cc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80092d0:	495a      	ldr	r1, [pc, #360]	; (800943c <tcp_input+0x80c>)
 80092d2:	485b      	ldr	r0, [pc, #364]	; (8009440 <tcp_input+0x810>)
 80092d4:	f00e fdae 	bl	8017e34 <iprintf>
 80092d8:	2000      	movs	r0, #0
 80092da:	f00e fead 	bl	8018038 <fflush>
 80092de:	f00e fdf2 	bl	8017ec6 <abort>
          if (pcb->flags & TF_RXCLOSED) {
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	8b5b      	ldrh	r3, [r3, #26]
 80092e6:	f003 0310 	and.w	r3, r3, #16
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d008      	beq.n	8009300 <tcp_input+0x6d0>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80092ee:	4b4b      	ldr	r3, [pc, #300]	; (800941c <tcp_input+0x7ec>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fc fd8e 	bl	8005e14 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80092f8:	69f8      	ldr	r0, [r7, #28]
 80092fa:	f7fd fe21 	bl	8006f40 <tcp_abort>
            goto aborted;
 80092fe:	e076      	b.n	80093ee <tcp_input+0x7be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00c      	beq.n	8009324 <tcp_input+0x6f4>
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	6918      	ldr	r0, [r3, #16]
 8009314:	4b41      	ldr	r3, [pc, #260]	; (800941c <tcp_input+0x7ec>)
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	2300      	movs	r3, #0
 800931a:	69f9      	ldr	r1, [r7, #28]
 800931c:	47a0      	blx	r4
 800931e:	4603      	mov	r3, r0
 8009320:	74fb      	strb	r3, [r7, #19]
 8009322:	e008      	b.n	8009336 <tcp_input+0x706>
 8009324:	4b3d      	ldr	r3, [pc, #244]	; (800941c <tcp_input+0x7ec>)
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	2300      	movs	r3, #0
 800932a:	69f9      	ldr	r1, [r7, #28]
 800932c:	2000      	movs	r0, #0
 800932e:	f7fe fdf5 	bl	8007f1c <tcp_recv_null>
 8009332:	4603      	mov	r3, r0
 8009334:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009336:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800933a:	f113 0f0d 	cmn.w	r3, #13
 800933e:	d051      	beq.n	80093e4 <tcp_input+0x7b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009340:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d003      	beq.n	8009350 <tcp_input+0x720>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009348:	4b34      	ldr	r3, [pc, #208]	; (800941c <tcp_input+0x7ec>)
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009350:	4b33      	ldr	r3, [pc, #204]	; (8009420 <tcp_input+0x7f0>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	f003 0320 	and.w	r3, r3, #32
 8009358:	2b00      	cmp	r3, #0
 800935a:	d030      	beq.n	80093be <tcp_input+0x78e>
          if (pcb->refused_data != NULL) {
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009360:	2b00      	cmp	r3, #0
 8009362:	d009      	beq.n	8009378 <tcp_input+0x748>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009368:	69fa      	ldr	r2, [r7, #28]
 800936a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800936c:	7b52      	ldrb	r2, [r2, #13]
 800936e:	f042 0220 	orr.w	r2, r2, #32
 8009372:	b2d2      	uxtb	r2, r2
 8009374:	735a      	strb	r2, [r3, #13]
 8009376:	e022      	b.n	80093be <tcp_input+0x78e>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800937c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009380:	d005      	beq.n	800938e <tcp_input+0x75e>
              pcb->rcv_wnd++;
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009386:	3301      	adds	r3, #1
 8009388:	b29a      	uxth	r2, r3
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00b      	beq.n	80093b0 <tcp_input+0x780>
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	6918      	ldr	r0, [r3, #16]
 80093a2:	2300      	movs	r3, #0
 80093a4:	2200      	movs	r2, #0
 80093a6:	69f9      	ldr	r1, [r7, #28]
 80093a8:	47a0      	blx	r4
 80093aa:	4603      	mov	r3, r0
 80093ac:	74fb      	strb	r3, [r7, #19]
 80093ae:	e001      	b.n	80093b4 <tcp_input+0x784>
 80093b0:	2300      	movs	r3, #0
 80093b2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80093b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80093b8:	f113 0f0d 	cmn.w	r3, #13
 80093bc:	d014      	beq.n	80093e8 <tcp_input+0x7b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80093be:	4b1c      	ldr	r3, [pc, #112]	; (8009430 <tcp_input+0x800>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80093c4:	69f8      	ldr	r0, [r7, #28]
 80093c6:	f000 f89b 	bl	8009500 <tcp_input_delayed_close>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d10d      	bne.n	80093ec <tcp_input+0x7bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80093d0:	69f8      	ldr	r0, [r7, #28]
 80093d2:	f003 f903 	bl	800c5dc <tcp_output>
 80093d6:	e00a      	b.n	80093ee <tcp_input+0x7be>
        goto aborted;
 80093d8:	bf00      	nop
 80093da:	e008      	b.n	80093ee <tcp_input+0x7be>
              goto aborted;
 80093dc:	bf00      	nop
 80093de:	e006      	b.n	80093ee <tcp_input+0x7be>
          goto aborted;
 80093e0:	bf00      	nop
 80093e2:	e004      	b.n	80093ee <tcp_input+0x7be>
            goto aborted;
 80093e4:	bf00      	nop
 80093e6:	e002      	b.n	80093ee <tcp_input+0x7be>
              goto aborted;
 80093e8:	bf00      	nop
 80093ea:	e000      	b.n	80093ee <tcp_input+0x7be>
          goto aborted;
 80093ec:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 80093ee:	4b10      	ldr	r3, [pc, #64]	; (8009430 <tcp_input+0x800>)
 80093f0:	2200      	movs	r2, #0
 80093f2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80093f4:	4b09      	ldr	r3, [pc, #36]	; (800941c <tcp_input+0x7ec>)
 80093f6:	2200      	movs	r2, #0
 80093f8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80093fa:	4b06      	ldr	r3, [pc, #24]	; (8009414 <tcp_input+0x7e4>)
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d04a      	beq.n	8009498 <tcp_input+0x868>
      pbuf_free(inseg.p);
 8009402:	4b04      	ldr	r3, [pc, #16]	; (8009414 <tcp_input+0x7e4>)
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	4618      	mov	r0, r3
 8009408:	f7fc fd04 	bl	8005e14 <pbuf_free>
      inseg.p = NULL;
 800940c:	4b01      	ldr	r3, [pc, #4]	; (8009414 <tcp_input+0x7e4>)
 800940e:	2200      	movs	r2, #0
 8009410:	605a      	str	r2, [r3, #4]
 8009412:	e041      	b.n	8009498 <tcp_input+0x868>
 8009414:	20000bec 	.word	0x20000bec
 8009418:	20000c00 	.word	0x20000c00
 800941c:	20000c20 	.word	0x20000c20
 8009420:	20000c1d 	.word	0x20000c1d
 8009424:	20000c18 	.word	0x20000c18
 8009428:	20000c1c 	.word	0x20000c1c
 800942c:	20000c1a 	.word	0x20000c1a
 8009430:	20004050 	.word	0x20004050
 8009434:	2000403c 	.word	0x2000403c
 8009438:	0801b584 	.word	0x0801b584
 800943c:	0801b728 	.word	0x0801b728
 8009440:	0801b5c0 	.word	0x0801b5c0
    }
  } else {
    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009444:	4b24      	ldr	r3, [pc, #144]	; (80094d8 <tcp_input+0x8a8>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	899b      	ldrh	r3, [r3, #12]
 800944a:	b29b      	uxth	r3, r3
 800944c:	4618      	mov	r0, r3
 800944e:	f7f9 ff57 	bl	8003300 <lwip_htons>
 8009452:	4603      	mov	r3, r0
 8009454:	b2db      	uxtb	r3, r3
 8009456:	f003 0304 	and.w	r3, r3, #4
 800945a:	2b00      	cmp	r3, #0
 800945c:	d119      	bne.n	8009492 <tcp_input+0x862>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800945e:	4b1f      	ldr	r3, [pc, #124]	; (80094dc <tcp_input+0x8ac>)
 8009460:	6858      	ldr	r0, [r3, #4]
 8009462:	4b1f      	ldr	r3, [pc, #124]	; (80094e0 <tcp_input+0x8b0>)
 8009464:	6819      	ldr	r1, [r3, #0]
 8009466:	4b1f      	ldr	r3, [pc, #124]	; (80094e4 <tcp_input+0x8b4>)
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	461a      	mov	r2, r3
 800946c:	4b1e      	ldr	r3, [pc, #120]	; (80094e8 <tcp_input+0x8b8>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	18d4      	adds	r4, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009472:	4b19      	ldr	r3, [pc, #100]	; (80094d8 <tcp_input+0x8a8>)
 8009474:	681b      	ldr	r3, [r3, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009476:	885b      	ldrh	r3, [r3, #2]
 8009478:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800947a:	4a17      	ldr	r2, [pc, #92]	; (80094d8 <tcp_input+0x8a8>)
 800947c:	6812      	ldr	r2, [r2, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800947e:	8812      	ldrh	r2, [r2, #0]
 8009480:	b292      	uxth	r2, r2
 8009482:	9202      	str	r2, [sp, #8]
 8009484:	9301      	str	r3, [sp, #4]
 8009486:	4b19      	ldr	r3, [pc, #100]	; (80094ec <tcp_input+0x8bc>)
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	4b19      	ldr	r3, [pc, #100]	; (80094f0 <tcp_input+0x8c0>)
 800948c:	4622      	mov	r2, r4
 800948e:	f003 ff9e 	bl	800d3ce <tcp_rst_netif>
    }
    pbuf_free(p);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7fc fcbe 	bl	8005e14 <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
 8009498:	f7ff fb5e 	bl	8008b58 <tcp_pcbs_sane>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d116      	bne.n	80094d0 <tcp_input+0x8a0>
 80094a2:	4b14      	ldr	r3, [pc, #80]	; (80094f4 <tcp_input+0x8c4>)
 80094a4:	f240 2249 	movw	r2, #585	; 0x249
 80094a8:	4913      	ldr	r1, [pc, #76]	; (80094f8 <tcp_input+0x8c8>)
 80094aa:	4814      	ldr	r0, [pc, #80]	; (80094fc <tcp_input+0x8cc>)
 80094ac:	f00e fcc2 	bl	8017e34 <iprintf>
 80094b0:	2000      	movs	r0, #0
 80094b2:	f00e fdc1 	bl	8018038 <fflush>
 80094b6:	f00e fd06 	bl	8017ec6 <abort>
    goto dropped;
 80094ba:	bf00      	nop
 80094bc:	e004      	b.n	80094c8 <tcp_input+0x898>
    goto dropped;
 80094be:	bf00      	nop
 80094c0:	e002      	b.n	80094c8 <tcp_input+0x898>
      goto dropped;
 80094c2:	bf00      	nop
 80094c4:	e000      	b.n	80094c8 <tcp_input+0x898>
      goto dropped;
 80094c6:	bf00      	nop
  PERF_STOP("tcp_input");
  return;
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f7fc fca3 	bl	8005e14 <pbuf_free>
 80094ce:	e000      	b.n	80094d2 <tcp_input+0x8a2>
  return;
 80094d0:	bf00      	nop
}
 80094d2:	3724      	adds	r7, #36	; 0x24
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd90      	pop	{r4, r7, pc}
 80094d8:	20000c00 	.word	0x20000c00
 80094dc:	20000d60 	.word	0x20000d60
 80094e0:	20000c14 	.word	0x20000c14
 80094e4:	20000c1a 	.word	0x20000c1a
 80094e8:	20000c10 	.word	0x20000c10
 80094ec:	20000d70 	.word	0x20000d70
 80094f0:	20000d74 	.word	0x20000d74
 80094f4:	0801b584 	.word	0x0801b584
 80094f8:	0801b744 	.word	0x0801b744
 80094fc:	0801b5c0 	.word	0x0801b5c0

08009500 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10b      	bne.n	8009526 <tcp_input_delayed_close+0x26>
 800950e:	4b1a      	ldr	r3, [pc, #104]	; (8009578 <tcp_input_delayed_close+0x78>)
 8009510:	f240 225a 	movw	r2, #602	; 0x25a
 8009514:	4919      	ldr	r1, [pc, #100]	; (800957c <tcp_input_delayed_close+0x7c>)
 8009516:	481a      	ldr	r0, [pc, #104]	; (8009580 <tcp_input_delayed_close+0x80>)
 8009518:	f00e fc8c 	bl	8017e34 <iprintf>
 800951c:	2000      	movs	r0, #0
 800951e:	f00e fd8b 	bl	8018038 <fflush>
 8009522:	f00e fcd0 	bl	8017ec6 <abort>

  if (recv_flags & TF_CLOSED) {
 8009526:	4b17      	ldr	r3, [pc, #92]	; (8009584 <tcp_input_delayed_close+0x84>)
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	f003 0310 	and.w	r3, r3, #16
 800952e:	2b00      	cmp	r3, #0
 8009530:	d01c      	beq.n	800956c <tcp_input_delayed_close+0x6c>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	8b5b      	ldrh	r3, [r3, #26]
 8009536:	f003 0310 	and.w	r3, r3, #16
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10d      	bne.n	800955a <tcp_input_delayed_close+0x5a>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009544:	2b00      	cmp	r3, #0
 8009546:	d008      	beq.n	800955a <tcp_input_delayed_close+0x5a>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	6912      	ldr	r2, [r2, #16]
 8009552:	f06f 010e 	mvn.w	r1, #14
 8009556:	4610      	mov	r0, r2
 8009558:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800955a:	6879      	ldr	r1, [r7, #4]
 800955c:	480a      	ldr	r0, [pc, #40]	; (8009588 <tcp_input_delayed_close+0x88>)
 800955e:	f7fe fff5 	bl	800854c <tcp_pcb_remove>
    tcp_free(pcb);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7fd f9d4 	bl	8006910 <tcp_free>
    return 1;
 8009568:	2301      	movs	r3, #1
 800956a:	e000      	b.n	800956e <tcp_input_delayed_close+0x6e>
  }
  return 0;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	0801b584 	.word	0x0801b584
 800957c:	0801b760 	.word	0x0801b760
 8009580:	0801b5c0 	.word	0x0801b5c0
 8009584:	20000c1d 	.word	0x20000c1d
 8009588:	2000403c 	.word	0x2000403c

0800958c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800958c:	b590      	push	{r4, r7, lr}
 800958e:	b08b      	sub	sp, #44	; 0x2c
 8009590:	af04      	add	r7, sp, #16
 8009592:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009594:	4b7a      	ldr	r3, [pc, #488]	; (8009780 <tcp_listen_input+0x1f4>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	f003 0304 	and.w	r3, r3, #4
 800959c:	2b00      	cmp	r3, #0
 800959e:	f040 80e9 	bne.w	8009774 <tcp_listen_input+0x1e8>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10b      	bne.n	80095c0 <tcp_listen_input+0x34>
 80095a8:	4b76      	ldr	r3, [pc, #472]	; (8009784 <tcp_listen_input+0x1f8>)
 80095aa:	f240 2281 	movw	r2, #641	; 0x281
 80095ae:	4976      	ldr	r1, [pc, #472]	; (8009788 <tcp_listen_input+0x1fc>)
 80095b0:	4876      	ldr	r0, [pc, #472]	; (800978c <tcp_listen_input+0x200>)
 80095b2:	f00e fc3f 	bl	8017e34 <iprintf>
 80095b6:	2000      	movs	r0, #0
 80095b8:	f00e fd3e 	bl	8018038 <fflush>
 80095bc:	f00e fc83 	bl	8017ec6 <abort>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80095c0:	4b6f      	ldr	r3, [pc, #444]	; (8009780 <tcp_listen_input+0x1f4>)
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	f003 0310 	and.w	r3, r3, #16
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d01a      	beq.n	8009602 <tcp_listen_input+0x76>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80095cc:	4b70      	ldr	r3, [pc, #448]	; (8009790 <tcp_listen_input+0x204>)
 80095ce:	6858      	ldr	r0, [r3, #4]
 80095d0:	4b70      	ldr	r3, [pc, #448]	; (8009794 <tcp_listen_input+0x208>)
 80095d2:	6819      	ldr	r1, [r3, #0]
 80095d4:	4b70      	ldr	r3, [pc, #448]	; (8009798 <tcp_listen_input+0x20c>)
 80095d6:	881b      	ldrh	r3, [r3, #0]
 80095d8:	461a      	mov	r2, r3
 80095da:	4b70      	ldr	r3, [pc, #448]	; (800979c <tcp_listen_input+0x210>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	18d4      	adds	r4, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80095e0:	4b6f      	ldr	r3, [pc, #444]	; (80097a0 <tcp_listen_input+0x214>)
 80095e2:	681b      	ldr	r3, [r3, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80095e4:	885b      	ldrh	r3, [r3, #2]
 80095e6:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80095e8:	4a6d      	ldr	r2, [pc, #436]	; (80097a0 <tcp_listen_input+0x214>)
 80095ea:	6812      	ldr	r2, [r2, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80095ec:	8812      	ldrh	r2, [r2, #0]
 80095ee:	b292      	uxth	r2, r2
 80095f0:	9202      	str	r2, [sp, #8]
 80095f2:	9301      	str	r3, [sp, #4]
 80095f4:	4b6b      	ldr	r3, [pc, #428]	; (80097a4 <tcp_listen_input+0x218>)
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	4b6b      	ldr	r3, [pc, #428]	; (80097a8 <tcp_listen_input+0x21c>)
 80095fa:	4622      	mov	r2, r4
 80095fc:	f003 fee7 	bl	800d3ce <tcp_rst_netif>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009600:	e0ba      	b.n	8009778 <tcp_listen_input+0x1ec>
  } else if (flags & TCP_SYN) {
 8009602:	4b5f      	ldr	r3, [pc, #380]	; (8009780 <tcp_listen_input+0x1f4>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	2b00      	cmp	r3, #0
 800960c:	f000 80b4 	beq.w	8009778 <tcp_listen_input+0x1ec>
    LWIP_DEBUGF(TCP_DEBUG, ("TCP connection request %"U16_F" -> %"U16_F".\n", tcphdr->src, tcphdr->dest));
 8009610:	4b63      	ldr	r3, [pc, #396]	; (80097a0 <tcp_listen_input+0x214>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	881b      	ldrh	r3, [r3, #0]
 8009616:	b29b      	uxth	r3, r3
 8009618:	4619      	mov	r1, r3
 800961a:	4b61      	ldr	r3, [pc, #388]	; (80097a0 <tcp_listen_input+0x214>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	885b      	ldrh	r3, [r3, #2]
 8009620:	b29b      	uxth	r3, r3
 8009622:	461a      	mov	r2, r3
 8009624:	4861      	ldr	r0, [pc, #388]	; (80097ac <tcp_listen_input+0x220>)
 8009626:	f7f7 fe64 	bl	80012f2 <lwip_win32_platform_diag>
    npcb = tcp_alloc(pcb->prio);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	7d5b      	ldrb	r3, [r3, #21]
 800962e:	4618      	mov	r0, r3
 8009630:	f7fe fdba 	bl	80081a8 <tcp_alloc>
 8009634:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d114      	bne.n	8009666 <tcp_listen_input+0xda>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
 800963c:	485c      	ldr	r0, [pc, #368]	; (80097b0 <tcp_listen_input+0x224>)
 800963e:	f7f7 fe58 	bl	80012f2 <lwip_win32_platform_diag>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00a      	beq.n	8009660 <tcp_listen_input+0xd4>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	699b      	ldr	r3, [r3, #24]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	6910      	ldr	r0, [r2, #16]
 8009652:	f04f 32ff 	mov.w	r2, #4294967295
 8009656:	2100      	movs	r1, #0
 8009658:	4798      	blx	r3
 800965a:	4603      	mov	r3, r0
 800965c:	74fb      	strb	r3, [r7, #19]
      return;
 800965e:	e08c      	b.n	800977a <tcp_listen_input+0x1ee>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009660:	23f0      	movs	r3, #240	; 0xf0
 8009662:	74fb      	strb	r3, [r7, #19]
      return;
 8009664:	e089      	b.n	800977a <tcp_listen_input+0x1ee>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009666:	4b4a      	ldr	r3, [pc, #296]	; (8009790 <tcp_listen_input+0x204>)
 8009668:	695a      	ldr	r2, [r3, #20]
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800966e:	4b48      	ldr	r3, [pc, #288]	; (8009790 <tcp_listen_input+0x204>)
 8009670:	691a      	ldr	r2, [r3, #16]
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	8ada      	ldrh	r2, [r3, #22]
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800967e:	4b48      	ldr	r3, [pc, #288]	; (80097a0 <tcp_listen_input+0x214>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	881b      	ldrh	r3, [r3, #0]
 8009684:	b29a      	uxth	r2, r3
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2203      	movs	r2, #3
 800968e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009690:	4b42      	ldr	r3, [pc, #264]	; (800979c <tcp_listen_input+0x210>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	1c5a      	adds	r2, r3, #1
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80096a2:	6978      	ldr	r0, [r7, #20]
 80096a4:	f7ff f812 	bl	80086cc <tcp_next_iss>
 80096a8:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80096c2:	4b36      	ldr	r3, [pc, #216]	; (800979c <tcp_listen_input+0x210>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	1e5a      	subs	r2, r3, #1
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	691a      	ldr	r2, [r3, #16]
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	7a5b      	ldrb	r3, [r3, #9]
 80096de:	f003 030c 	and.w	r3, r3, #12
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	7a1a      	ldrb	r2, [r3, #8]
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80096f0:	4b30      	ldr	r3, [pc, #192]	; (80097b4 <tcp_listen_input+0x228>)
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	60da      	str	r2, [r3, #12]
 80096f8:	4a2e      	ldr	r2, [pc, #184]	; (80097b4 <tcp_listen_input+0x228>)
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	6013      	str	r3, [r2, #0]
 80096fe:	f004 f893 	bl	800d828 <tcp_timer_needed>
 8009702:	4b2d      	ldr	r3, [pc, #180]	; (80097b8 <tcp_listen_input+0x22c>)
 8009704:	2201      	movs	r2, #1
 8009706:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009708:	6978      	ldr	r0, [r7, #20]
 800970a:	f001 fe6b 	bl	800b3e4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800970e:	4b24      	ldr	r3, [pc, #144]	; (80097a0 <tcp_listen_input+0x214>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	89db      	ldrh	r3, [r3, #14]
 8009714:	b29a      	uxth	r2, r3
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	3304      	adds	r3, #4
 8009730:	4618      	mov	r0, r3
 8009732:	f7fa fc85 	bl	8004040 <ip4_route>
 8009736:	4601      	mov	r1, r0
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	3304      	adds	r3, #4
 800973c:	461a      	mov	r2, r3
 800973e:	4620      	mov	r0, r4
 8009740:	f7fe ffee 	bl	8008720 <tcp_eff_send_mss_netif>
 8009744:	4603      	mov	r3, r0
 8009746:	461a      	mov	r2, r3
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800974c:	2112      	movs	r1, #18
 800974e:	6978      	ldr	r0, [r7, #20]
 8009750:	f002 fe4a 	bl	800c3e8 <tcp_enqueue_flags>
 8009754:	4603      	mov	r3, r0
 8009756:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 8009758:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d004      	beq.n	800976a <tcp_listen_input+0x1de>
      tcp_abandon(npcb, 0);
 8009760:	2100      	movs	r1, #0
 8009762:	6978      	ldr	r0, [r7, #20]
 8009764:	f7fd fb2a 	bl	8006dbc <tcp_abandon>
      return;
 8009768:	e007      	b.n	800977a <tcp_listen_input+0x1ee>
    tcp_output(npcb);
 800976a:	6978      	ldr	r0, [r7, #20]
 800976c:	f002 ff36 	bl	800c5dc <tcp_output>
  return;
 8009770:	bf00      	nop
 8009772:	e001      	b.n	8009778 <tcp_listen_input+0x1ec>
    return;
 8009774:	bf00      	nop
 8009776:	e000      	b.n	800977a <tcp_listen_input+0x1ee>
  return;
 8009778:	bf00      	nop
}
 800977a:	371c      	adds	r7, #28
 800977c:	46bd      	mov	sp, r7
 800977e:	bd90      	pop	{r4, r7, pc}
 8009780:	20000c1c 	.word	0x20000c1c
 8009784:	0801b584 	.word	0x0801b584
 8009788:	0801b788 	.word	0x0801b788
 800978c:	0801b5c0 	.word	0x0801b5c0
 8009790:	20000d60 	.word	0x20000d60
 8009794:	20000c14 	.word	0x20000c14
 8009798:	20000c1a 	.word	0x20000c1a
 800979c:	20000c10 	.word	0x20000c10
 80097a0:	20000c00 	.word	0x20000c00
 80097a4:	20000d70 	.word	0x20000d70
 80097a8:	20000d74 	.word	0x20000d74
 80097ac:	0801b7a8 	.word	0x0801b7a8
 80097b0:	0801b7cc 	.word	0x0801b7cc
 80097b4:	2000403c 	.word	0x2000403c
 80097b8:	20004038 	.word	0x20004038

080097bc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af04      	add	r7, sp, #16
 80097c2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80097c4:	4b32      	ldr	r3, [pc, #200]	; (8009890 <tcp_timewait_input+0xd4>)
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	f003 0304 	and.w	r3, r3, #4
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d159      	bne.n	8009884 <tcp_timewait_input+0xc8>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10b      	bne.n	80097ee <tcp_timewait_input+0x32>
 80097d6:	4b2f      	ldr	r3, [pc, #188]	; (8009894 <tcp_timewait_input+0xd8>)
 80097d8:	f240 22f1 	movw	r2, #753	; 0x2f1
 80097dc:	492e      	ldr	r1, [pc, #184]	; (8009898 <tcp_timewait_input+0xdc>)
 80097de:	482f      	ldr	r0, [pc, #188]	; (800989c <tcp_timewait_input+0xe0>)
 80097e0:	f00e fb28 	bl	8017e34 <iprintf>
 80097e4:	2000      	movs	r0, #0
 80097e6:	f00e fc27 	bl	8018038 <fflush>
 80097ea:	f00e fb6c 	bl	8017ec6 <abort>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80097ee:	4b28      	ldr	r3, [pc, #160]	; (8009890 <tcp_timewait_input+0xd4>)
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	f003 0302 	and.w	r3, r3, #2
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d02a      	beq.n	8009850 <tcp_timewait_input+0x94>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80097fa:	4b29      	ldr	r3, [pc, #164]	; (80098a0 <tcp_timewait_input+0xe4>)
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009802:	1ad3      	subs	r3, r2, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	db2d      	blt.n	8009864 <tcp_timewait_input+0xa8>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009810:	441a      	add	r2, r3
 8009812:	4b23      	ldr	r3, [pc, #140]	; (80098a0 <tcp_timewait_input+0xe4>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	2b00      	cmp	r3, #0
 800981a:	db23      	blt.n	8009864 <tcp_timewait_input+0xa8>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800981c:	4b21      	ldr	r3, [pc, #132]	; (80098a4 <tcp_timewait_input+0xe8>)
 800981e:	6819      	ldr	r1, [r3, #0]
 8009820:	4b21      	ldr	r3, [pc, #132]	; (80098a8 <tcp_timewait_input+0xec>)
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	461a      	mov	r2, r3
 8009826:	4b1e      	ldr	r3, [pc, #120]	; (80098a0 <tcp_timewait_input+0xe4>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800982c:	4b1f      	ldr	r3, [pc, #124]	; (80098ac <tcp_timewait_input+0xf0>)
 800982e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009830:	885b      	ldrh	r3, [r3, #2]
 8009832:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009834:	4a1d      	ldr	r2, [pc, #116]	; (80098ac <tcp_timewait_input+0xf0>)
 8009836:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009838:	8812      	ldrh	r2, [r2, #0]
 800983a:	b292      	uxth	r2, r2
 800983c:	9202      	str	r2, [sp, #8]
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	4b1b      	ldr	r3, [pc, #108]	; (80098b0 <tcp_timewait_input+0xf4>)
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	4b1b      	ldr	r3, [pc, #108]	; (80098b4 <tcp_timewait_input+0xf8>)
 8009846:	4602      	mov	r2, r0
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f003 fd9f 	bl	800d38c <tcp_rst>
      return;
 800984e:	e01c      	b.n	800988a <tcp_timewait_input+0xce>
    }
  } else if (flags & TCP_FIN) {
 8009850:	4b0f      	ldr	r3, [pc, #60]	; (8009890 <tcp_timewait_input+0xd4>)
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	f003 0301 	and.w	r3, r3, #1
 8009858:	2b00      	cmp	r3, #0
 800985a:	d003      	beq.n	8009864 <tcp_timewait_input+0xa8>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800985c:	4b16      	ldr	r3, [pc, #88]	; (80098b8 <tcp_timewait_input+0xfc>)
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009864:	4b10      	ldr	r3, [pc, #64]	; (80098a8 <tcp_timewait_input+0xec>)
 8009866:	881b      	ldrh	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00d      	beq.n	8009888 <tcp_timewait_input+0xcc>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	8b5b      	ldrh	r3, [r3, #26]
 8009870:	f043 0302 	orr.w	r3, r3, #2
 8009874:	b29a      	uxth	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f002 feae 	bl	800c5dc <tcp_output>
  }
  return;
 8009880:	bf00      	nop
 8009882:	e001      	b.n	8009888 <tcp_timewait_input+0xcc>
    return;
 8009884:	bf00      	nop
 8009886:	e000      	b.n	800988a <tcp_timewait_input+0xce>
  return;
 8009888:	bf00      	nop
}
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	20000c1c 	.word	0x20000c1c
 8009894:	0801b584 	.word	0x0801b584
 8009898:	0801b7f8 	.word	0x0801b7f8
 800989c:	0801b5c0 	.word	0x0801b5c0
 80098a0:	20000c10 	.word	0x20000c10
 80098a4:	20000c14 	.word	0x20000c14
 80098a8:	20000c1a 	.word	0x20000c1a
 80098ac:	20000c00 	.word	0x20000c00
 80098b0:	20000d70 	.word	0x20000d70
 80098b4:	20000d74 	.word	0x20000d74
 80098b8:	20004040 	.word	0x20004040

080098bc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80098bc:	b590      	push	{r4, r7, lr}
 80098be:	b08d      	sub	sp, #52	; 0x34
 80098c0:	af04      	add	r7, sp, #16
 80098c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80098c4:	2300      	movs	r3, #0
 80098c6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10b      	bne.n	80098ea <tcp_process+0x2e>
 80098d2:	4ba0      	ldr	r3, [pc, #640]	; (8009b54 <tcp_process+0x298>)
 80098d4:	f240 321f 	movw	r2, #799	; 0x31f
 80098d8:	499f      	ldr	r1, [pc, #636]	; (8009b58 <tcp_process+0x29c>)
 80098da:	48a0      	ldr	r0, [pc, #640]	; (8009b5c <tcp_process+0x2a0>)
 80098dc:	f00e faaa 	bl	8017e34 <iprintf>
 80098e0:	2000      	movs	r0, #0
 80098e2:	f00e fba9 	bl	8018038 <fflush>
 80098e6:	f00e faee 	bl	8017ec6 <abort>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80098ea:	4b9d      	ldr	r3, [pc, #628]	; (8009b60 <tcp_process+0x2a4>)
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	f003 0304 	and.w	r3, r3, #4
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d05b      	beq.n	80099ae <tcp_process+0xf2>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	7d1b      	ldrb	r3, [r3, #20]
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d108      	bne.n	8009910 <tcp_process+0x54>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009902:	4b98      	ldr	r3, [pc, #608]	; (8009b64 <tcp_process+0x2a8>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	429a      	cmp	r2, r3
 8009908:	d123      	bne.n	8009952 <tcp_process+0x96>
        acceptable = 1;
 800990a:	2301      	movs	r3, #1
 800990c:	76fb      	strb	r3, [r7, #27]
 800990e:	e020      	b.n	8009952 <tcp_process+0x96>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009914:	4b94      	ldr	r3, [pc, #592]	; (8009b68 <tcp_process+0x2ac>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	429a      	cmp	r2, r3
 800991a:	d102      	bne.n	8009922 <tcp_process+0x66>
        acceptable = 1;
 800991c:	2301      	movs	r3, #1
 800991e:	76fb      	strb	r3, [r7, #27]
 8009920:	e017      	b.n	8009952 <tcp_process+0x96>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009922:	4b91      	ldr	r3, [pc, #580]	; (8009b68 <tcp_process+0x2ac>)
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	2b00      	cmp	r3, #0
 800992e:	db10      	blt.n	8009952 <tcp_process+0x96>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009938:	441a      	add	r2, r3
 800993a:	4b8b      	ldr	r3, [pc, #556]	; (8009b68 <tcp_process+0x2ac>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	2b00      	cmp	r3, #0
 8009942:	db06      	blt.n	8009952 <tcp_process+0x96>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	8b5b      	ldrh	r3, [r3, #26]
 8009948:	f043 0302 	orr.w	r3, r3, #2
 800994c:	b29a      	uxth	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009952:	7efb      	ldrb	r3, [r7, #27]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d020      	beq.n	800999a <tcp_process+0xde>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	7d1b      	ldrb	r3, [r3, #20]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10b      	bne.n	8009978 <tcp_process+0xbc>
 8009960:	4b7c      	ldr	r3, [pc, #496]	; (8009b54 <tcp_process+0x298>)
 8009962:	f240 323b 	movw	r2, #827	; 0x33b
 8009966:	4981      	ldr	r1, [pc, #516]	; (8009b6c <tcp_process+0x2b0>)
 8009968:	487c      	ldr	r0, [pc, #496]	; (8009b5c <tcp_process+0x2a0>)
 800996a:	f00e fa63 	bl	8017e34 <iprintf>
 800996e:	2000      	movs	r0, #0
 8009970:	f00e fb62 	bl	8018038 <fflush>
 8009974:	f00e faa7 	bl	8017ec6 <abort>
      recv_flags |= TF_RESET;
 8009978:	4b7d      	ldr	r3, [pc, #500]	; (8009b70 <tcp_process+0x2b4>)
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	f043 0308 	orr.w	r3, r3, #8
 8009980:	b2da      	uxtb	r2, r3
 8009982:	4b7b      	ldr	r3, [pc, #492]	; (8009b70 <tcp_process+0x2b4>)
 8009984:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	8b5b      	ldrh	r3, [r3, #26]
 800998a:	f023 0301 	bic.w	r3, r3, #1
 800998e:	b29a      	uxth	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009994:	f06f 030d 	mvn.w	r3, #13
 8009998:	e3fd      	b.n	800a196 <tcp_process+0x8da>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
 800999a:	4b73      	ldr	r3, [pc, #460]	; (8009b68 <tcp_process+0x2ac>)
 800999c:	6819      	ldr	r1, [r3, #0]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a2:	461a      	mov	r2, r3
 80099a4:	4873      	ldr	r0, [pc, #460]	; (8009b74 <tcp_process+0x2b8>)
 80099a6:	f7f7 fca4 	bl	80012f2 <lwip_win32_platform_diag>
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	e3f3      	b.n	800a196 <tcp_process+0x8da>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80099ae:	4b6c      	ldr	r3, [pc, #432]	; (8009b60 <tcp_process+0x2a4>)
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	f003 0302 	and.w	r3, r3, #2
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d010      	beq.n	80099dc <tcp_process+0x120>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	7d1b      	ldrb	r3, [r3, #20]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d00c      	beq.n	80099dc <tcp_process+0x120>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	7d1b      	ldrb	r3, [r3, #20]
 80099c6:	2b03      	cmp	r3, #3
 80099c8:	d008      	beq.n	80099dc <tcp_process+0x120>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	8b5b      	ldrh	r3, [r3, #26]
 80099ce:	f043 0302 	orr.w	r3, r3, #2
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	e3dc      	b.n	800a196 <tcp_process+0x8da>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	8b5b      	ldrh	r3, [r3, #26]
 80099e0:	f003 0310 	and.w	r3, r3, #16
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d103      	bne.n	80099f0 <tcp_process+0x134>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80099e8:	4b63      	ldr	r3, [pc, #396]	; (8009b78 <tcp_process+0x2bc>)
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f001 fcef 	bl	800b3e4 <tcp_parseopt>

  if (flags & TCP_SYN) {
 8009a06:	4b56      	ldr	r3, [pc, #344]	; (8009b60 <tcp_process+0x2a4>)
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	f003 0302 	and.w	r3, r3, #2
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d009      	beq.n	8009a26 <tcp_process+0x16a>
    /* accept SYN only in 2 states: */
    if ((pcb->state != SYN_SENT) && (pcb->state != SYN_RCVD)) {
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	7d1b      	ldrb	r3, [r3, #20]
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d005      	beq.n	8009a26 <tcp_process+0x16a>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	7d1b      	ldrb	r3, [r3, #20]
 8009a1e:	2b03      	cmp	r3, #3
 8009a20:	d001      	beq.n	8009a26 <tcp_process+0x16a>
      return ERR_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	e3b7      	b.n	800a196 <tcp_process+0x8da>
    }
  }

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	7d1b      	ldrb	r3, [r3, #20]
 8009a2a:	3b02      	subs	r3, #2
 8009a2c:	2b07      	cmp	r3, #7
 8009a2e:	f200 83a2 	bhi.w	800a176 <tcp_process+0x8ba>
 8009a32:	a201      	add	r2, pc, #4	; (adr r2, 8009a38 <tcp_process+0x17c>)
 8009a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a38:	08009a59 	.word	0x08009a59
 8009a3c:	08009c9b 	.word	0x08009c9b
 8009a40:	08009e75 	.word	0x08009e75
 8009a44:	08009e9f 	.word	0x08009e9f
 8009a48:	08009fa7 	.word	0x08009fa7
 8009a4c:	08009e75 	.word	0x08009e75
 8009a50:	0800a04d 	.word	0x0800a04d
 8009a54:	0800a127 	.word	0x0800a127
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %s %"U32_F"\n",
                                    ackno, pcb->snd_nxt, pcb->unacked ? "" : " empty:",
                                    pcb->unacked ? lwip_ntohl(pcb->unacked->tcphdr->seqno) : 0));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009a58:	4b41      	ldr	r3, [pc, #260]	; (8009b60 <tcp_process+0x2a4>)
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	f003 0310 	and.w	r3, r3, #16
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 80ed 	beq.w	8009c40 <tcp_process+0x384>
 8009a66:	4b3e      	ldr	r3, [pc, #248]	; (8009b60 <tcp_process+0x2a4>)
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	f003 0302 	and.w	r3, r3, #2
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f000 80e6 	beq.w	8009c40 <tcp_process+0x384>
          && (ackno == pcb->lastack + 1)) {
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a78:	1c5a      	adds	r2, r3, #1
 8009a7a:	4b3a      	ldr	r3, [pc, #232]	; (8009b64 <tcp_process+0x2a8>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	f040 80de 	bne.w	8009c40 <tcp_process+0x384>
        pcb->rcv_nxt = seqno + 1;
 8009a84:	4b38      	ldr	r3, [pc, #224]	; (8009b68 <tcp_process+0x2ac>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	1c5a      	adds	r2, r3, #1
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009a96:	4b33      	ldr	r3, [pc, #204]	; (8009b64 <tcp_process+0x2a8>)
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009a9e:	4b37      	ldr	r3, [pc, #220]	; (8009b7c <tcp_process+0x2c0>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	89db      	ldrh	r3, [r3, #14]
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009ab8:	4b2b      	ldr	r3, [pc, #172]	; (8009b68 <tcp_process+0x2ac>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	1e5a      	subs	r2, r3, #1
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2204      	movs	r2, #4
 8009ac6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	3304      	adds	r3, #4
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fa fab5 	bl	8004040 <ip4_route>
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3304      	adds	r3, #4
 8009adc:	461a      	mov	r2, r3
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f7fe fe1e 	bl	8008720 <tcp_eff_send_mss_netif>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009af0:	009a      	lsls	r2, r3, #2
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009af6:	005b      	lsls	r3, r3, #1
 8009af8:	f241 111c 	movw	r1, #4380	; 0x111c
 8009afc:	428b      	cmp	r3, r1
 8009afe:	bf38      	it	cc
 8009b00:	460b      	movcc	r3, r1
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d204      	bcs.n	8009b10 <tcp_process+0x254>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	e00d      	b.n	8009b2c <tcp_process+0x270>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b14:	005b      	lsls	r3, r3, #1
 8009b16:	f241 121c 	movw	r2, #4380	; 0x111c
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d904      	bls.n	8009b28 <tcp_process+0x26c>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b22:	005b      	lsls	r3, r3, #1
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	e001      	b.n	8009b2c <tcp_process+0x270>
 8009b28:	f241 131c 	movw	r3, #4380	; 0x111c
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d123      	bne.n	8009b84 <tcp_process+0x2c8>
 8009b3c:	4b05      	ldr	r3, [pc, #20]	; (8009b54 <tcp_process+0x298>)
 8009b3e:	f240 3277 	movw	r2, #887	; 0x377
 8009b42:	490f      	ldr	r1, [pc, #60]	; (8009b80 <tcp_process+0x2c4>)
 8009b44:	4805      	ldr	r0, [pc, #20]	; (8009b5c <tcp_process+0x2a0>)
 8009b46:	f00e f975 	bl	8017e34 <iprintf>
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	f00e fa74 	bl	8018038 <fflush>
 8009b50:	f00e f9b9 	bl	8017ec6 <abort>
 8009b54:	0801b584 	.word	0x0801b584
 8009b58:	0801b818 	.word	0x0801b818
 8009b5c:	0801b5c0 	.word	0x0801b5c0
 8009b60:	20000c1c 	.word	0x20000c1c
 8009b64:	20000c14 	.word	0x20000c14
 8009b68:	20000c10 	.word	0x20000c10
 8009b6c:	0801b834 	.word	0x0801b834
 8009b70:	20000c1d 	.word	0x20000c1d
 8009b74:	0801b854 	.word	0x0801b854
 8009b78:	20004040 	.word	0x20004040
 8009b7c:	20000c00 	.word	0x20000c00
 8009b80:	0801b88c 	.word	0x0801b88c
        --pcb->snd_queuelen;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b98:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d116      	bne.n	8009bce <tcp_process+0x312>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ba4:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d10b      	bne.n	8009bc4 <tcp_process+0x308>
 8009bac:	4ba2      	ldr	r3, [pc, #648]	; (8009e38 <tcp_process+0x57c>)
 8009bae:	f240 327f 	movw	r2, #895	; 0x37f
 8009bb2:	49a2      	ldr	r1, [pc, #648]	; (8009e3c <tcp_process+0x580>)
 8009bb4:	48a2      	ldr	r0, [pc, #648]	; (8009e40 <tcp_process+0x584>)
 8009bb6:	f00e f93d 	bl	8017e34 <iprintf>
 8009bba:	2000      	movs	r0, #0
 8009bbc:	f00e fa3c 	bl	8018038 <fflush>
 8009bc0:	f00e f981 	bl	8017ec6 <abort>
          pcb->unsent = rseg->next;
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	66da      	str	r2, [r3, #108]	; 0x6c
 8009bcc:	e003      	b.n	8009bd6 <tcp_process+0x31a>
        } else {
          pcb->unacked = rseg->next;
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009bd6:	69f8      	ldr	r0, [r7, #28]
 8009bd8:	f7fe f952 	bl	8007e80 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d104      	bne.n	8009bee <tcp_process+0x332>
          pcb->rtime = -1;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009bea:	861a      	strh	r2, [r3, #48]	; 0x30
 8009bec:	e006      	b.n	8009bfc <tcp_process+0x340>
        } else {
          pcb->rtime = 0;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00a      	beq.n	8009c1c <tcp_process+0x360>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	6910      	ldr	r0, [r2, #16]
 8009c10:	2200      	movs	r2, #0
 8009c12:	6879      	ldr	r1, [r7, #4]
 8009c14:	4798      	blx	r3
 8009c16:	4603      	mov	r3, r0
 8009c18:	76bb      	strb	r3, [r7, #26]
 8009c1a:	e001      	b.n	8009c20 <tcp_process+0x364>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009c20:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009c24:	f113 0f0d 	cmn.w	r3, #13
 8009c28:	d102      	bne.n	8009c30 <tcp_process+0x374>
          return ERR_ABRT;
 8009c2a:	f06f 030c 	mvn.w	r3, #12
 8009c2e:	e2b2      	b.n	800a196 <tcp_process+0x8da>
        }
        tcp_ack_now(pcb);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	8b5b      	ldrh	r3, [r3, #26]
 8009c34:	f043 0302 	orr.w	r3, r3, #2
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009c3e:	e29c      	b.n	800a17a <tcp_process+0x8be>
      else if (flags & TCP_ACK) {
 8009c40:	4b80      	ldr	r3, [pc, #512]	; (8009e44 <tcp_process+0x588>)
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	f003 0310 	and.w	r3, r3, #16
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f000 8296 	beq.w	800a17a <tcp_process+0x8be>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c4e:	4b7e      	ldr	r3, [pc, #504]	; (8009e48 <tcp_process+0x58c>)
 8009c50:	6819      	ldr	r1, [r3, #0]
 8009c52:	4b7e      	ldr	r3, [pc, #504]	; (8009e4c <tcp_process+0x590>)
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	4b7d      	ldr	r3, [pc, #500]	; (8009e50 <tcp_process+0x594>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c5e:	4b7d      	ldr	r3, [pc, #500]	; (8009e54 <tcp_process+0x598>)
 8009c60:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c62:	885b      	ldrh	r3, [r3, #2]
 8009c64:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c66:	4a7b      	ldr	r2, [pc, #492]	; (8009e54 <tcp_process+0x598>)
 8009c68:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c6a:	8812      	ldrh	r2, [r2, #0]
 8009c6c:	b292      	uxth	r2, r2
 8009c6e:	9202      	str	r2, [sp, #8]
 8009c70:	9301      	str	r3, [sp, #4]
 8009c72:	4b79      	ldr	r3, [pc, #484]	; (8009e58 <tcp_process+0x59c>)
 8009c74:	9300      	str	r3, [sp, #0]
 8009c76:	4b79      	ldr	r3, [pc, #484]	; (8009e5c <tcp_process+0x5a0>)
 8009c78:	4602      	mov	r2, r0
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f003 fb86 	bl	800d38c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c86:	2b05      	cmp	r3, #5
 8009c88:	f200 8277 	bhi.w	800a17a <tcp_process+0x8be>
          pcb->rtime = 0;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f003 f884 	bl	800cda0 <tcp_rexmit_rto>
      break;
 8009c98:	e26f      	b.n	800a17a <tcp_process+0x8be>
    case SYN_RCVD:
      if (flags & TCP_SYN) {
 8009c9a:	4b6a      	ldr	r3, [pc, #424]	; (8009e44 <tcp_process+0x588>)
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	f003 0302 	and.w	r3, r3, #2
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00b      	beq.n	8009cbe <tcp_process+0x402>
        if (seqno == pcb->rcv_nxt - 1) {
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009caa:	1e5a      	subs	r2, r3, #1
 8009cac:	4b68      	ldr	r3, [pc, #416]	; (8009e50 <tcp_process+0x594>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	f040 8264 	bne.w	800a17e <tcp_process+0x8c2>
          /* Looks like another copy of the SYN - retransmit our SYN-ACK */
          tcp_rexmit(pcb);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f003 f898 	bl	800cdec <tcp_rexmit>
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
        }
      }
      break;
 8009cbc:	e25f      	b.n	800a17e <tcp_process+0x8c2>
      } else if (flags & TCP_ACK) {
 8009cbe:	4b61      	ldr	r3, [pc, #388]	; (8009e44 <tcp_process+0x588>)
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	f003 0310 	and.w	r3, r3, #16
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f000 8259 	beq.w	800a17e <tcp_process+0x8c2>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009ccc:	4b5e      	ldr	r3, [pc, #376]	; (8009e48 <tcp_process+0x58c>)
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f2c0 8092 	blt.w	8009e02 <tcp_process+0x546>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ce2:	4b59      	ldr	r3, [pc, #356]	; (8009e48 <tcp_process+0x58c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f2c0 808a 	blt.w	8009e02 <tcp_process+0x546>
          pcb->state = ESTABLISHED;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2204      	movs	r2, #4
 8009cf2:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 8009cf4:	4b5a      	ldr	r3, [pc, #360]	; (8009e60 <tcp_process+0x5a4>)
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	881b      	ldrh	r3, [r3, #0]
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	4b58      	ldr	r3, [pc, #352]	; (8009e60 <tcp_process+0x5a4>)
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	885b      	ldrh	r3, [r3, #2]
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	461a      	mov	r2, r3
 8009d08:	4856      	ldr	r0, [pc, #344]	; (8009e64 <tcp_process+0x5a8>)
 8009d0a:	f7f7 faf2 	bl	80012f2 <lwip_win32_platform_diag>
          if (pcb->listener == NULL) {
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d102      	bne.n	8009d1c <tcp_process+0x460>
            err = ERR_VAL;
 8009d16:	23fa      	movs	r3, #250	; 0xfa
 8009d18:	76bb      	strb	r3, [r7, #26]
 8009d1a:	e022      	b.n	8009d62 <tcp_process+0x4a6>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10b      	bne.n	8009d3e <tcp_process+0x482>
 8009d26:	4b44      	ldr	r3, [pc, #272]	; (8009e38 <tcp_process+0x57c>)
 8009d28:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8009d2c:	494e      	ldr	r1, [pc, #312]	; (8009e68 <tcp_process+0x5ac>)
 8009d2e:	4844      	ldr	r0, [pc, #272]	; (8009e40 <tcp_process+0x584>)
 8009d30:	f00e f880 	bl	8017e34 <iprintf>
 8009d34:	2000      	movs	r0, #0
 8009d36:	f00e f97f 	bl	8018038 <fflush>
 8009d3a:	f00e f8c4 	bl	8017ec6 <abort>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00a      	beq.n	8009d5e <tcp_process+0x4a2>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d4c:	699b      	ldr	r3, [r3, #24]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	6910      	ldr	r0, [r2, #16]
 8009d52:	2200      	movs	r2, #0
 8009d54:	6879      	ldr	r1, [r7, #4]
 8009d56:	4798      	blx	r3
 8009d58:	4603      	mov	r3, r0
 8009d5a:	76bb      	strb	r3, [r7, #26]
 8009d5c:	e001      	b.n	8009d62 <tcp_process+0x4a6>
 8009d5e:	23f0      	movs	r3, #240	; 0xf0
 8009d60:	76bb      	strb	r3, [r7, #26]
          if (err != ERR_OK) {
 8009d62:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00a      	beq.n	8009d80 <tcp_process+0x4c4>
            if (err != ERR_ABRT) {
 8009d6a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009d6e:	f113 0f0d 	cmn.w	r3, #13
 8009d72:	d002      	beq.n	8009d7a <tcp_process+0x4be>
              tcp_abort(pcb);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f7fd f8e3 	bl	8006f40 <tcp_abort>
            return ERR_ABRT;
 8009d7a:	f06f 030c 	mvn.w	r3, #12
 8009d7e:	e20a      	b.n	800a196 <tcp_process+0x8da>
          tcp_receive(pcb);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fb2d 	bl	800a3e0 <tcp_receive>
          if (recv_acked != 0) {
 8009d86:	4b39      	ldr	r3, [pc, #228]	; (8009e6c <tcp_process+0x5b0>)
 8009d88:	881b      	ldrh	r3, [r3, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d005      	beq.n	8009d9a <tcp_process+0x4de>
            recv_acked--;
 8009d8e:	4b37      	ldr	r3, [pc, #220]	; (8009e6c <tcp_process+0x5b0>)
 8009d90:	881b      	ldrh	r3, [r3, #0]
 8009d92:	3b01      	subs	r3, #1
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	4b35      	ldr	r3, [pc, #212]	; (8009e6c <tcp_process+0x5b0>)
 8009d98:	801a      	strh	r2, [r3, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d9e:	009a      	lsls	r2, r3, #2
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009da4:	005b      	lsls	r3, r3, #1
 8009da6:	f241 111c 	movw	r1, #4380	; 0x111c
 8009daa:	428b      	cmp	r3, r1
 8009dac:	bf38      	it	cc
 8009dae:	460b      	movcc	r3, r1
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d204      	bcs.n	8009dbe <tcp_process+0x502>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	e00d      	b.n	8009dda <tcp_process+0x51e>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009dc2:	005b      	lsls	r3, r3, #1
 8009dc4:	f241 121c 	movw	r2, #4380	; 0x111c
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d904      	bls.n	8009dd6 <tcp_process+0x51a>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009dd0:	005b      	lsls	r3, r3, #1
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	e001      	b.n	8009dda <tcp_process+0x51e>
 8009dd6:	f241 131c 	movw	r3, #4380	; 0x111c
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 8009de0:	4b23      	ldr	r3, [pc, #140]	; (8009e70 <tcp_process+0x5b4>)
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	f003 0320 	and.w	r3, r3, #32
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d024      	beq.n	8009e36 <tcp_process+0x57a>
            tcp_ack_now(pcb);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	8b5b      	ldrh	r3, [r3, #26]
 8009df0:	f043 0302 	orr.w	r3, r3, #2
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2207      	movs	r2, #7
 8009dfe:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009e00:	e019      	b.n	8009e36 <tcp_process+0x57a>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e02:	4b11      	ldr	r3, [pc, #68]	; (8009e48 <tcp_process+0x58c>)
 8009e04:	6819      	ldr	r1, [r3, #0]
 8009e06:	4b11      	ldr	r3, [pc, #68]	; (8009e4c <tcp_process+0x590>)
 8009e08:	881b      	ldrh	r3, [r3, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	4b10      	ldr	r3, [pc, #64]	; (8009e50 <tcp_process+0x594>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e12:	4b10      	ldr	r3, [pc, #64]	; (8009e54 <tcp_process+0x598>)
 8009e14:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e16:	885b      	ldrh	r3, [r3, #2]
 8009e18:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e1a:	4a0e      	ldr	r2, [pc, #56]	; (8009e54 <tcp_process+0x598>)
 8009e1c:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e1e:	8812      	ldrh	r2, [r2, #0]
 8009e20:	b292      	uxth	r2, r2
 8009e22:	9202      	str	r2, [sp, #8]
 8009e24:	9301      	str	r3, [sp, #4]
 8009e26:	4b0c      	ldr	r3, [pc, #48]	; (8009e58 <tcp_process+0x59c>)
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	4b0c      	ldr	r3, [pc, #48]	; (8009e5c <tcp_process+0x5a0>)
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f003 faac 	bl	800d38c <tcp_rst>
      break;
 8009e34:	e1a3      	b.n	800a17e <tcp_process+0x8c2>
 8009e36:	e1a2      	b.n	800a17e <tcp_process+0x8c2>
 8009e38:	0801b584 	.word	0x0801b584
 8009e3c:	0801b8a4 	.word	0x0801b8a4
 8009e40:	0801b5c0 	.word	0x0801b5c0
 8009e44:	20000c1c 	.word	0x20000c1c
 8009e48:	20000c14 	.word	0x20000c14
 8009e4c:	20000c1a 	.word	0x20000c1a
 8009e50:	20000c10 	.word	0x20000c10
 8009e54:	20000c00 	.word	0x20000c00
 8009e58:	20000d70 	.word	0x20000d70
 8009e5c:	20000d74 	.word	0x20000d74
 8009e60:	20000bec 	.word	0x20000bec
 8009e64:	0801b8b8 	.word	0x0801b8b8
 8009e68:	0801b8e0 	.word	0x0801b8e0
 8009e6c:	20000c18 	.word	0x20000c18
 8009e70:	20000c1d 	.word	0x20000c1d
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 fab3 	bl	800a3e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009e7a:	4b94      	ldr	r3, [pc, #592]	; (800a0cc <tcp_process+0x810>)
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	f003 0320 	and.w	r3, r3, #32
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f000 817d 	beq.w	800a182 <tcp_process+0x8c6>
        tcp_ack_now(pcb);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	8b5b      	ldrh	r3, [r3, #26]
 8009e8c:	f043 0302 	orr.w	r3, r3, #2
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2207      	movs	r2, #7
 8009e9a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009e9c:	e171      	b.n	800a182 <tcp_process+0x8c6>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fa9e 	bl	800a3e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009ea4:	4b89      	ldr	r3, [pc, #548]	; (800a0cc <tcp_process+0x810>)
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	f003 0320 	and.w	r3, r3, #32
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d063      	beq.n	8009f78 <tcp_process+0x6bc>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009eb0:	4b87      	ldr	r3, [pc, #540]	; (800a0d0 <tcp_process+0x814>)
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	f003 0310 	and.w	r3, r3, #16
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d052      	beq.n	8009f62 <tcp_process+0x6a6>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ec0:	4b84      	ldr	r3, [pc, #528]	; (800a0d4 <tcp_process+0x818>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d14c      	bne.n	8009f62 <tcp_process+0x6a6>
            pcb->unsent == NULL) {
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d148      	bne.n	8009f62 <tcp_process+0x6a6>
          LWIP_DEBUGF(TCP_DEBUG,
 8009ed0:	4b81      	ldr	r3, [pc, #516]	; (800a0d8 <tcp_process+0x81c>)
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	4619      	mov	r1, r3
 8009eda:	4b7f      	ldr	r3, [pc, #508]	; (800a0d8 <tcp_process+0x81c>)
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	885b      	ldrh	r3, [r3, #2]
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	487d      	ldr	r0, [pc, #500]	; (800a0dc <tcp_process+0x820>)
 8009ee6:	f7f7 fa04 	bl	80012f2 <lwip_win32_platform_diag>
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	8b5b      	ldrh	r3, [r3, #26]
 8009eee:	f043 0302 	orr.w	r3, r3, #2
 8009ef2:	b29a      	uxth	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7fe fab5 	bl	8008468 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009efe:	4b78      	ldr	r3, [pc, #480]	; (800a0e0 <tcp_process+0x824>)
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d105      	bne.n	8009f14 <tcp_process+0x658>
 8009f08:	4b75      	ldr	r3, [pc, #468]	; (800a0e0 <tcp_process+0x824>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	4a74      	ldr	r2, [pc, #464]	; (800a0e0 <tcp_process+0x824>)
 8009f10:	6013      	str	r3, [r2, #0]
 8009f12:	e013      	b.n	8009f3c <tcp_process+0x680>
 8009f14:	4b72      	ldr	r3, [pc, #456]	; (800a0e0 <tcp_process+0x824>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	617b      	str	r3, [r7, #20]
 8009f1a:	e00c      	b.n	8009f36 <tcp_process+0x67a>
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d104      	bne.n	8009f30 <tcp_process+0x674>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	68da      	ldr	r2, [r3, #12]
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	60da      	str	r2, [r3, #12]
 8009f2e:	e005      	b.n	8009f3c <tcp_process+0x680>
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	617b      	str	r3, [r7, #20]
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1ef      	bne.n	8009f1c <tcp_process+0x660>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	60da      	str	r2, [r3, #12]
 8009f42:	4b68      	ldr	r3, [pc, #416]	; (800a0e4 <tcp_process+0x828>)
 8009f44:	2201      	movs	r2, #1
 8009f46:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	220a      	movs	r2, #10
 8009f4c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009f4e:	4b66      	ldr	r3, [pc, #408]	; (800a0e8 <tcp_process+0x82c>)
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	60da      	str	r2, [r3, #12]
 8009f56:	4a64      	ldr	r2, [pc, #400]	; (800a0e8 <tcp_process+0x82c>)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6013      	str	r3, [r2, #0]
 8009f5c:	f003 fc64 	bl	800d828 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009f60:	e111      	b.n	800a186 <tcp_process+0x8ca>
          tcp_ack_now(pcb);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	8b5b      	ldrh	r3, [r3, #26]
 8009f66:	f043 0302 	orr.w	r3, r3, #2
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2208      	movs	r2, #8
 8009f74:	751a      	strb	r2, [r3, #20]
      break;
 8009f76:	e106      	b.n	800a186 <tcp_process+0x8ca>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009f78:	4b55      	ldr	r3, [pc, #340]	; (800a0d0 <tcp_process+0x814>)
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	f003 0310 	and.w	r3, r3, #16
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 8100 	beq.w	800a186 <tcp_process+0x8ca>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f8a:	4b52      	ldr	r3, [pc, #328]	; (800a0d4 <tcp_process+0x818>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	f040 80f9 	bne.w	800a186 <tcp_process+0x8ca>
                 pcb->unsent == NULL) {
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f040 80f4 	bne.w	800a186 <tcp_process+0x8ca>
        pcb->state = FIN_WAIT_2;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2206      	movs	r2, #6
 8009fa2:	751a      	strb	r2, [r3, #20]
      break;
 8009fa4:	e0ef      	b.n	800a186 <tcp_process+0x8ca>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fa1a 	bl	800a3e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009fac:	4b47      	ldr	r3, [pc, #284]	; (800a0cc <tcp_process+0x810>)
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	f003 0320 	and.w	r3, r3, #32
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f000 80e8 	beq.w	800a18a <tcp_process+0x8ce>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 8009fba:	4b47      	ldr	r3, [pc, #284]	; (800a0d8 <tcp_process+0x81c>)
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	881b      	ldrh	r3, [r3, #0]
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	4b44      	ldr	r3, [pc, #272]	; (800a0d8 <tcp_process+0x81c>)
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	885b      	ldrh	r3, [r3, #2]
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	461a      	mov	r2, r3
 8009fce:	4847      	ldr	r0, [pc, #284]	; (800a0ec <tcp_process+0x830>)
 8009fd0:	f7f7 f98f 	bl	80012f2 <lwip_win32_platform_diag>
        tcp_ack_now(pcb);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	8b5b      	ldrh	r3, [r3, #26]
 8009fd8:	f043 0302 	orr.w	r3, r3, #2
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f7fe fa40 	bl	8008468 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009fe8:	4b3d      	ldr	r3, [pc, #244]	; (800a0e0 <tcp_process+0x824>)
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d105      	bne.n	8009ffe <tcp_process+0x742>
 8009ff2:	4b3b      	ldr	r3, [pc, #236]	; (800a0e0 <tcp_process+0x824>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	4a39      	ldr	r2, [pc, #228]	; (800a0e0 <tcp_process+0x824>)
 8009ffa:	6013      	str	r3, [r2, #0]
 8009ffc:	e013      	b.n	800a026 <tcp_process+0x76a>
 8009ffe:	4b38      	ldr	r3, [pc, #224]	; (800a0e0 <tcp_process+0x824>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	613b      	str	r3, [r7, #16]
 800a004:	e00c      	b.n	800a020 <tcp_process+0x764>
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	68da      	ldr	r2, [r3, #12]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d104      	bne.n	800a01a <tcp_process+0x75e>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	68da      	ldr	r2, [r3, #12]
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	60da      	str	r2, [r3, #12]
 800a018:	e005      	b.n	800a026 <tcp_process+0x76a>
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	613b      	str	r3, [r7, #16]
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1ef      	bne.n	800a006 <tcp_process+0x74a>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	60da      	str	r2, [r3, #12]
 800a02c:	4b2d      	ldr	r3, [pc, #180]	; (800a0e4 <tcp_process+0x828>)
 800a02e:	2201      	movs	r2, #1
 800a030:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	220a      	movs	r2, #10
 800a036:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a038:	4b2b      	ldr	r3, [pc, #172]	; (800a0e8 <tcp_process+0x82c>)
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	60da      	str	r2, [r3, #12]
 800a040:	4a29      	ldr	r2, [pc, #164]	; (800a0e8 <tcp_process+0x82c>)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6013      	str	r3, [r2, #0]
 800a046:	f003 fbef 	bl	800d828 <tcp_timer_needed>
      }
      break;
 800a04a:	e09e      	b.n	800a18a <tcp_process+0x8ce>
    case CLOSING:
      tcp_receive(pcb);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f9c7 	bl	800a3e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a052:	4b1f      	ldr	r3, [pc, #124]	; (800a0d0 <tcp_process+0x814>)
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	f003 0310 	and.w	r3, r3, #16
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f000 8097 	beq.w	800a18e <tcp_process+0x8d2>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a064:	4b1b      	ldr	r3, [pc, #108]	; (800a0d4 <tcp_process+0x818>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	429a      	cmp	r2, r3
 800a06a:	f040 8090 	bne.w	800a18e <tcp_process+0x8d2>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a072:	2b00      	cmp	r3, #0
 800a074:	f040 808b 	bne.w	800a18e <tcp_process+0x8d2>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 800a078:	4b17      	ldr	r3, [pc, #92]	; (800a0d8 <tcp_process+0x81c>)
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	881b      	ldrh	r3, [r3, #0]
 800a07e:	b29b      	uxth	r3, r3
 800a080:	4619      	mov	r1, r3
 800a082:	4b15      	ldr	r3, [pc, #84]	; (800a0d8 <tcp_process+0x81c>)
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	885b      	ldrh	r3, [r3, #2]
 800a088:	b29b      	uxth	r3, r3
 800a08a:	461a      	mov	r2, r3
 800a08c:	4818      	ldr	r0, [pc, #96]	; (800a0f0 <tcp_process+0x834>)
 800a08e:	f7f7 f930 	bl	80012f2 <lwip_win32_platform_diag>
        tcp_pcb_purge(pcb);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7fe f9e8 	bl	8008468 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a098:	4b11      	ldr	r3, [pc, #68]	; (800a0e0 <tcp_process+0x824>)
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d105      	bne.n	800a0ae <tcp_process+0x7f2>
 800a0a2:	4b0f      	ldr	r3, [pc, #60]	; (800a0e0 <tcp_process+0x824>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	4a0d      	ldr	r2, [pc, #52]	; (800a0e0 <tcp_process+0x824>)
 800a0aa:	6013      	str	r3, [r2, #0]
 800a0ac:	e028      	b.n	800a100 <tcp_process+0x844>
 800a0ae:	4b0c      	ldr	r3, [pc, #48]	; (800a0e0 <tcp_process+0x824>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	e021      	b.n	800a0fa <tcp_process+0x83e>
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	68da      	ldr	r2, [r3, #12]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d119      	bne.n	800a0f4 <tcp_process+0x838>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	68da      	ldr	r2, [r3, #12]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	60da      	str	r2, [r3, #12]
 800a0c8:	e01a      	b.n	800a100 <tcp_process+0x844>
 800a0ca:	bf00      	nop
 800a0cc:	20000c1d 	.word	0x20000c1d
 800a0d0:	20000c1c 	.word	0x20000c1c
 800a0d4:	20000c14 	.word	0x20000c14
 800a0d8:	20000bec 	.word	0x20000bec
 800a0dc:	0801b900 	.word	0x0801b900
 800a0e0:	2000403c 	.word	0x2000403c
 800a0e4:	20004038 	.word	0x20004038
 800a0e8:	2000404c 	.word	0x2000404c
 800a0ec:	0801b930 	.word	0x0801b930
 800a0f0:	0801b960 	.word	0x0801b960
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	60fb      	str	r3, [r7, #12]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1da      	bne.n	800a0b6 <tcp_process+0x7fa>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	60da      	str	r2, [r3, #12]
 800a106:	4b26      	ldr	r3, [pc, #152]	; (800a1a0 <tcp_process+0x8e4>)
 800a108:	2201      	movs	r2, #1
 800a10a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	220a      	movs	r2, #10
 800a110:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a112:	4b24      	ldr	r3, [pc, #144]	; (800a1a4 <tcp_process+0x8e8>)
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	60da      	str	r2, [r3, #12]
 800a11a:	4a22      	ldr	r2, [pc, #136]	; (800a1a4 <tcp_process+0x8e8>)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	f003 fb82 	bl	800d828 <tcp_timer_needed>
      }
      break;
 800a124:	e033      	b.n	800a18e <tcp_process+0x8d2>
    case LAST_ACK:
      tcp_receive(pcb);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f95a 	bl	800a3e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a12c:	4b1e      	ldr	r3, [pc, #120]	; (800a1a8 <tcp_process+0x8ec>)
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	f003 0310 	and.w	r3, r3, #16
 800a134:	2b00      	cmp	r3, #0
 800a136:	d02c      	beq.n	800a192 <tcp_process+0x8d6>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a13c:	4b1b      	ldr	r3, [pc, #108]	; (800a1ac <tcp_process+0x8f0>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	429a      	cmp	r2, r3
 800a142:	d126      	bne.n	800a192 <tcp_process+0x8d6>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d122      	bne.n	800a192 <tcp_process+0x8d6>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 800a14c:	4b18      	ldr	r3, [pc, #96]	; (800a1b0 <tcp_process+0x8f4>)
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	881b      	ldrh	r3, [r3, #0]
 800a152:	b29b      	uxth	r3, r3
 800a154:	4619      	mov	r1, r3
 800a156:	4b16      	ldr	r3, [pc, #88]	; (800a1b0 <tcp_process+0x8f4>)
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	885b      	ldrh	r3, [r3, #2]
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	461a      	mov	r2, r3
 800a160:	4814      	ldr	r0, [pc, #80]	; (800a1b4 <tcp_process+0x8f8>)
 800a162:	f7f7 f8c6 	bl	80012f2 <lwip_win32_platform_diag>
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a166:	4b14      	ldr	r3, [pc, #80]	; (800a1b8 <tcp_process+0x8fc>)
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	f043 0310 	orr.w	r3, r3, #16
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	4b11      	ldr	r3, [pc, #68]	; (800a1b8 <tcp_process+0x8fc>)
 800a172:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a174:	e00d      	b.n	800a192 <tcp_process+0x8d6>
    default:
      break;
 800a176:	bf00      	nop
 800a178:	e00c      	b.n	800a194 <tcp_process+0x8d8>
      break;
 800a17a:	bf00      	nop
 800a17c:	e00a      	b.n	800a194 <tcp_process+0x8d8>
      break;
 800a17e:	bf00      	nop
 800a180:	e008      	b.n	800a194 <tcp_process+0x8d8>
      break;
 800a182:	bf00      	nop
 800a184:	e006      	b.n	800a194 <tcp_process+0x8d8>
      break;
 800a186:	bf00      	nop
 800a188:	e004      	b.n	800a194 <tcp_process+0x8d8>
      break;
 800a18a:	bf00      	nop
 800a18c:	e002      	b.n	800a194 <tcp_process+0x8d8>
      break;
 800a18e:	bf00      	nop
 800a190:	e000      	b.n	800a194 <tcp_process+0x8d8>
      break;
 800a192:	bf00      	nop
  }
  return ERR_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3724      	adds	r7, #36	; 0x24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd90      	pop	{r4, r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	20004038 	.word	0x20004038
 800a1a4:	2000404c 	.word	0x2000404c
 800a1a8:	20000c1c 	.word	0x20000c1c
 800a1ac:	20000c14 	.word	0x20000c14
 800a1b0:	20000bec 	.word	0x20000bec
 800a1b4:	0801b98c 	.word	0x0801b98c
 800a1b8:	20000c1d 	.word	0x20000c1d

0800a1bc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a1bc:	b5b0      	push	{r4, r5, r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d10b      	bne.n	800a1e4 <tcp_oos_insert_segment+0x28>
 800a1cc:	4b3d      	ldr	r3, [pc, #244]	; (800a2c4 <tcp_oos_insert_segment+0x108>)
 800a1ce:	f240 422c 	movw	r2, #1068	; 0x42c
 800a1d2:	493d      	ldr	r1, [pc, #244]	; (800a2c8 <tcp_oos_insert_segment+0x10c>)
 800a1d4:	483d      	ldr	r0, [pc, #244]	; (800a2cc <tcp_oos_insert_segment+0x110>)
 800a1d6:	f00d fe2d 	bl	8017e34 <iprintf>
 800a1da:	2000      	movs	r0, #0
 800a1dc:	f00d ff2c 	bl	8018038 <fflush>
 800a1e0:	f00d fe71 	bl	8017ec6 <abort>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	691b      	ldr	r3, [r3, #16]
 800a1e8:	899b      	ldrh	r3, [r3, #12]
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7f9 f887 	bl	8003300 <lwip_htons>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	f003 0301 	and.w	r3, r3, #1
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d027      	beq.n	800a24e <tcp_oos_insert_segment+0x92>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a1fe:	6838      	ldr	r0, [r7, #0]
 800a200:	f7fd fe2a 	bl	8007e58 <tcp_segs_free>
    next = NULL;
 800a204:	2300      	movs	r3, #0
 800a206:	603b      	str	r3, [r7, #0]
 800a208:	e055      	b.n	800a2b6 <tcp_oos_insert_segment+0xfa>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	899b      	ldrh	r3, [r3, #12]
 800a210:	b29b      	uxth	r3, r3
 800a212:	4618      	mov	r0, r3
 800a214:	f7f9 f874 	bl	8003300 <lwip_htons>
 800a218:	4603      	mov	r3, r0
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	f003 0301 	and.w	r3, r3, #1
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00c      	beq.n	800a23e <tcp_oos_insert_segment+0x82>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	691c      	ldr	r4, [r3, #16]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	899b      	ldrh	r3, [r3, #12]
 800a22e:	b29d      	uxth	r5, r3
 800a230:	2001      	movs	r0, #1
 800a232:	f7f9 f865 	bl	8003300 <lwip_htons>
 800a236:	4603      	mov	r3, r0
 800a238:	432b      	orrs	r3, r5
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f7fd fe19 	bl	8007e80 <tcp_seg_free>
    while (next &&
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00e      	beq.n	800a272 <tcp_oos_insert_segment+0xb6>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	891b      	ldrh	r3, [r3, #8]
 800a258:	461a      	mov	r2, r3
 800a25a:	4b1d      	ldr	r3, [pc, #116]	; (800a2d0 <tcp_oos_insert_segment+0x114>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	441a      	add	r2, r3
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	8909      	ldrh	r1, [r1, #8]
 800a26a:	440b      	add	r3, r1
 800a26c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a26e:	2b00      	cmp	r3, #0
 800a270:	dacb      	bge.n	800a20a <tcp_oos_insert_segment+0x4e>
    }
    if (next &&
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d01e      	beq.n	800a2b6 <tcp_oos_insert_segment+0xfa>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	891b      	ldrh	r3, [r3, #8]
 800a282:	4619      	mov	r1, r3
 800a284:	4b12      	ldr	r3, [pc, #72]	; (800a2d0 <tcp_oos_insert_segment+0x114>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	440b      	add	r3, r1
 800a28a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	da12      	bge.n	800a2b6 <tcp_oos_insert_segment+0xfa>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	b29a      	uxth	r2, r3
 800a298:	4b0d      	ldr	r3, [pc, #52]	; (800a2d0 <tcp_oos_insert_segment+0x114>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	685a      	ldr	r2, [r3, #4]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	891b      	ldrh	r3, [r3, #8]
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	4610      	mov	r0, r2
 800a2b2:	f7fb fbfd 	bl	8005ab0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	601a      	str	r2, [r3, #0]
}
 800a2bc:	bf00      	nop
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bdb0      	pop	{r4, r5, r7, pc}
 800a2c4:	0801b584 	.word	0x0801b584
 800a2c8:	0801b9bc 	.word	0x0801b9bc
 800a2cc:	0801b5c0 	.word	0x0801b5c0
 800a2d0:	20000c10 	.word	0x20000c10

0800a2d4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2d6:	b087      	sub	sp, #28
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
 800a2e0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a2e2:	e048      	b.n	800a376 <tcp_free_acked_segments+0xa2>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fb fe30 	bl	8005f58 <pbuf_clen>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a302:	8a7a      	ldrh	r2, [r7, #18]
 800a304:	429a      	cmp	r2, r3
 800a306:	d90b      	bls.n	800a320 <tcp_free_acked_segments+0x4c>
 800a308:	4b2f      	ldr	r3, [pc, #188]	; (800a3c8 <tcp_free_acked_segments+0xf4>)
 800a30a:	f240 4264 	movw	r2, #1124	; 0x464
 800a30e:	492f      	ldr	r1, [pc, #188]	; (800a3cc <tcp_free_acked_segments+0xf8>)
 800a310:	482f      	ldr	r0, [pc, #188]	; (800a3d0 <tcp_free_acked_segments+0xfc>)
 800a312:	f00d fd8f 	bl	8017e34 <iprintf>
 800a316:	2000      	movs	r0, #0
 800a318:	f00d fe8e 	bl	8018038 <fflush>
 800a31c:	f00d fdd3 	bl	8017ec6 <abort>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a326:	8a7b      	ldrh	r3, [r7, #18]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	891a      	ldrh	r2, [r3, #8]
 800a336:	4b27      	ldr	r3, [pc, #156]	; (800a3d4 <tcp_free_acked_segments+0x100>)
 800a338:	881b      	ldrh	r3, [r3, #0]
 800a33a:	4413      	add	r3, r2
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	4b25      	ldr	r3, [pc, #148]	; (800a3d4 <tcp_free_acked_segments+0x100>)
 800a340:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a342:	6978      	ldr	r0, [r7, #20]
 800a344:	f7fd fd9c 	bl	8007e80 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d011      	beq.n	800a376 <tcp_free_acked_segments+0xa2>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d10e      	bne.n	800a376 <tcp_free_acked_segments+0xa2>
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10b      	bne.n	800a376 <tcp_free_acked_segments+0xa2>
 800a35e:	4b1a      	ldr	r3, [pc, #104]	; (800a3c8 <tcp_free_acked_segments+0xf4>)
 800a360:	f240 426f 	movw	r2, #1135	; 0x46f
 800a364:	491c      	ldr	r1, [pc, #112]	; (800a3d8 <tcp_free_acked_segments+0x104>)
 800a366:	481a      	ldr	r0, [pc, #104]	; (800a3d0 <tcp_free_acked_segments+0xfc>)
 800a368:	f00d fd64 	bl	8017e34 <iprintf>
 800a36c:	2000      	movs	r0, #0
 800a36e:	f00d fe63 	bl	8018038 <fflush>
 800a372:	f00d fda8 	bl	8017ec6 <abort>
  while (seg_list != NULL &&
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d020      	beq.n	800a3be <tcp_free_acked_segments+0xea>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a37c:	4b17      	ldr	r3, [pc, #92]	; (800a3dc <tcp_free_acked_segments+0x108>)
 800a37e:	681c      	ldr	r4, [r3, #0]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	4618      	mov	r0, r3
 800a388:	f7f8 ffcf 	bl	800332a <lwip_htonl>
 800a38c:	4605      	mov	r5, r0
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	891b      	ldrh	r3, [r3, #8]
 800a392:	461e      	mov	r6, r3
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	899b      	ldrh	r3, [r3, #12]
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7f8 ffaf 	bl	8003300 <lwip_htons>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	f003 0303 	and.w	r3, r3, #3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d001      	beq.n	800a3b2 <tcp_free_acked_segments+0xde>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e000      	b.n	800a3b4 <tcp_free_acked_segments+0xe0>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	4433      	add	r3, r6
 800a3b6:	442b      	add	r3, r5
 800a3b8:	1ae3      	subs	r3, r4, r3
  while (seg_list != NULL &&
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	da92      	bge.n	800a2e4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a3be:	68bb      	ldr	r3, [r7, #8]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	371c      	adds	r7, #28
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3c8:	0801b584 	.word	0x0801b584
 800a3cc:	0801b9e4 	.word	0x0801b9e4
 800a3d0:	0801b5c0 	.word	0x0801b5c0
 800a3d4:	20000c18 	.word	0x20000c18
 800a3d8:	0801ba0c 	.word	0x0801ba0c
 800a3dc:	20000c14 	.word	0x20000c14

0800a3e0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a3e0:	b5b0      	push	{r4, r5, r7, lr}
 800a3e2:	b094      	sub	sp, #80	; 0x50
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10b      	bne.n	800a406 <tcp_receive+0x26>
 800a3ee:	4bab      	ldr	r3, [pc, #684]	; (800a69c <tcp_receive+0x2bc>)
 800a3f0:	f240 4287 	movw	r2, #1159	; 0x487
 800a3f4:	49aa      	ldr	r1, [pc, #680]	; (800a6a0 <tcp_receive+0x2c0>)
 800a3f6:	48ab      	ldr	r0, [pc, #684]	; (800a6a4 <tcp_receive+0x2c4>)
 800a3f8:	f00d fd1c 	bl	8017e34 <iprintf>
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	f00d fe1b 	bl	8018038 <fflush>
 800a402:	f00d fd60 	bl	8017ec6 <abort>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	7d1b      	ldrb	r3, [r3, #20]
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	d80b      	bhi.n	800a426 <tcp_receive+0x46>
 800a40e:	4ba3      	ldr	r3, [pc, #652]	; (800a69c <tcp_receive+0x2bc>)
 800a410:	f44f 6291 	mov.w	r2, #1160	; 0x488
 800a414:	49a4      	ldr	r1, [pc, #656]	; (800a6a8 <tcp_receive+0x2c8>)
 800a416:	48a3      	ldr	r0, [pc, #652]	; (800a6a4 <tcp_receive+0x2c4>)
 800a418:	f00d fd0c 	bl	8017e34 <iprintf>
 800a41c:	2000      	movs	r0, #0
 800a41e:	f00d fe0b 	bl	8018038 <fflush>
 800a422:	f00d fd50 	bl	8017ec6 <abort>

  if (flags & TCP_ACK) {
 800a426:	4ba1      	ldr	r3, [pc, #644]	; (800a6ac <tcp_receive+0x2cc>)
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	f003 0310 	and.w	r3, r3, #16
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 8263 	beq.w	800a8fa <tcp_receive+0x51a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a43a:	461a      	mov	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a440:	4413      	add	r3, r2
 800a442:	637b      	str	r3, [r7, #52]	; 0x34

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a448:	4b99      	ldr	r3, [pc, #612]	; (800a6b0 <tcp_receive+0x2d0>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	1ad3      	subs	r3, r2, r3
 800a44e:	2b00      	cmp	r3, #0
 800a450:	db1b      	blt.n	800a48a <tcp_receive+0xaa>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a456:	4b96      	ldr	r3, [pc, #600]	; (800a6b0 <tcp_receive+0x2d0>)
 800a458:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d106      	bne.n	800a46c <tcp_receive+0x8c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a462:	4b94      	ldr	r3, [pc, #592]	; (800a6b4 <tcp_receive+0x2d4>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	2b00      	cmp	r3, #0
 800a46a:	db0e      	blt.n	800a48a <tcp_receive+0xaa>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a470:	4b90      	ldr	r3, [pc, #576]	; (800a6b4 <tcp_receive+0x2d4>)
 800a472:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a474:	429a      	cmp	r2, r3
 800a476:	d125      	bne.n	800a4c4 <tcp_receive+0xe4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a478:	4b8f      	ldr	r3, [pc, #572]	; (800a6b8 <tcp_receive+0x2d8>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	89db      	ldrh	r3, [r3, #14]
 800a47e:	b29a      	uxth	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a486:	429a      	cmp	r2, r3
 800a488:	d91c      	bls.n	800a4c4 <tcp_receive+0xe4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a48a:	4b8b      	ldr	r3, [pc, #556]	; (800a6b8 <tcp_receive+0x2d8>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	89db      	ldrh	r3, [r3, #14]
 800a490:	b29a      	uxth	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d205      	bcs.n	800a4b4 <tcp_receive+0xd4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a4b4:	4b7e      	ldr	r3, [pc, #504]	; (800a6b0 <tcp_receive+0x2d0>)
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a4bc:	4b7d      	ldr	r3, [pc, #500]	; (800a6b4 <tcp_receive+0x2d4>)
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4c8:	4b7a      	ldr	r3, [pc, #488]	; (800a6b4 <tcp_receive+0x2d4>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	db58      	blt.n	800a584 <tcp_receive+0x1a4>
      /* Clause 2 */
      if (tcplen == 0) {
 800a4d2:	4b7a      	ldr	r3, [pc, #488]	; (800a6bc <tcp_receive+0x2dc>)
 800a4d4:	881b      	ldrh	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f040 81af 	bne.w	800a83a <tcp_receive+0x45a>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a4e6:	441a      	add	r2, r3
 800a4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	f040 81a5 	bne.w	800a83a <tcp_receive+0x45a>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	f2c0 819f 	blt.w	800a83a <tcp_receive+0x45a>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a500:	4b6c      	ldr	r3, [pc, #432]	; (800a6b4 <tcp_receive+0x2d4>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	429a      	cmp	r2, r3
 800a506:	f040 8198 	bne.w	800a83a <tcp_receive+0x45a>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a510:	3301      	adds	r3, #1
 800a512:	b2da      	uxtb	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d907      	bls.n	800a52e <tcp_receive+0x14e>
                ++pcb->dupacks;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a524:	3301      	adds	r3, #1
 800a526:	b2da      	uxtb	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a534:	2b03      	cmp	r3, #3
 800a536:	d91b      	bls.n	800a570 <tcp_receive+0x190>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a542:	4413      	add	r3, r2
 800a544:	b29a      	uxth	r2, r3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d30a      	bcc.n	800a566 <tcp_receive+0x186>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a55a:	4413      	add	r3, r2
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a564:	e004      	b.n	800a570 <tcp_receive+0x190>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a56c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a576:	2b02      	cmp	r3, #2
 800a578:	f240 815f 	bls.w	800a83a <tcp_receive+0x45a>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f002 fca7 	bl	800ced0 <tcp_rexmit_fast>
 800a582:	e15a      	b.n	800a83a <tcp_receive+0x45a>
              }
            }
          }
        }
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a584:	4b4b      	ldr	r3, [pc, #300]	; (800a6b4 <tcp_receive+0x2d4>)
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	3b01      	subs	r3, #1
 800a590:	2b00      	cmp	r3, #0
 800a592:	f2c0 814d 	blt.w	800a830 <tcp_receive+0x450>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a59a:	4b46      	ldr	r3, [pc, #280]	; (800a6b4 <tcp_receive+0x2d4>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	1ad3      	subs	r3, r2, r3
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f2c0 8145 	blt.w	800a830 <tcp_receive+0x450>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	8b5b      	ldrh	r3, [r3, #26]
 800a5aa:	f003 0304 	and.w	r3, r3, #4
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d010      	beq.n	800a5d4 <tcp_receive+0x1f4>
        tcp_clear_flags(pcb, TF_INFR);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	8b5b      	ldrh	r3, [r3, #26]
 800a5b6:	f023 0304 	bic.w	r3, r3, #4
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a5e2:	10db      	asrs	r3, r3, #3
 800a5e4:	b21b      	sxth	r3, r3
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	4413      	add	r3, r2
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	b21a      	sxth	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a5fc:	4b2d      	ldr	r3, [pc, #180]	; (800a6b4 <tcp_receive+0x2d4>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	b29a      	uxth	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a606:	b29b      	uxth	r3, r3
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	867b      	strh	r3, [r7, #50]	; 0x32

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a614:	4b27      	ldr	r3, [pc, #156]	; (800a6b4 <tcp_receive+0x2d4>)
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	7d1b      	ldrb	r3, [r3, #20]
 800a620:	2b03      	cmp	r3, #3
 800a622:	f240 8096 	bls.w	800a752 <tcp_receive+0x372>
        if (pcb->cwnd < pcb->ssthresh) {
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a632:	429a      	cmp	r2, r3
 800a634:	d244      	bcs.n	800a6c0 <tcp_receive+0x2e0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	8b5b      	ldrh	r3, [r3, #26]
 800a63a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d001      	beq.n	800a646 <tcp_receive+0x266>
 800a642:	2301      	movs	r3, #1
 800a644:	e000      	b.n	800a648 <tcp_receive+0x268>
 800a646:	2302      	movs	r3, #2
 800a648:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a64c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a650:	b29a      	uxth	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a656:	fb12 f303 	smulbb	r3, r2, r3
 800a65a:	b29a      	uxth	r2, r3
 800a65c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a65e:	4293      	cmp	r3, r2
 800a660:	bf28      	it	cs
 800a662:	4613      	movcs	r3, r2
 800a664:	85fb      	strh	r3, [r7, #46]	; 0x2e
          TCP_WND_INC(pcb->cwnd, increase);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a66c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a66e:	4413      	add	r3, r2
 800a670:	b29a      	uxth	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a678:	429a      	cmp	r2, r3
 800a67a:	d309      	bcc.n	800a690 <tcp_receive+0x2b0>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a682:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a684:	4413      	add	r3, r2
 800a686:	b29a      	uxth	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a68e:	e060      	b.n	800a752 <tcp_receive+0x372>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a696:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a69a:	e05a      	b.n	800a752 <tcp_receive+0x372>
 800a69c:	0801b584 	.word	0x0801b584
 800a6a0:	0801ba2c 	.word	0x0801ba2c
 800a6a4:	0801b5c0 	.word	0x0801b5c0
 800a6a8:	0801ba48 	.word	0x0801ba48
 800a6ac:	20000c1c 	.word	0x20000c1c
 800a6b0:	20000c10 	.word	0x20000c10
 800a6b4:	20000c14 	.word	0x20000c14
 800a6b8:	20000c00 	.word	0x20000c00
 800a6bc:	20000c1a 	.word	0x20000c1a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a6c6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a6c8:	4413      	add	r3, r2
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d309      	bcc.n	800a6ea <tcp_receive+0x30a>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a6dc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a6de:	4413      	add	r3, r2
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a6e8:	e004      	b.n	800a6f4 <tcp_receive+0x314>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a700:	429a      	cmp	r2, r3
 800a702:	d326      	bcc.n	800a752 <tcp_receive+0x372>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	b29a      	uxth	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a724:	4413      	add	r3, r2
 800a726:	b29a      	uxth	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a72e:	429a      	cmp	r2, r3
 800a730:	d30a      	bcc.n	800a748 <tcp_receive+0x368>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a73c:	4413      	add	r3, r2
 800a73e:	b29a      	uxth	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a746:	e004      	b.n	800a752 <tcp_receive+0x372>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a74e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a75a:	4aa0      	ldr	r2, [pc, #640]	; (800a9dc <tcp_receive+0x5fc>)
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f7ff fdb9 	bl	800a2d4 <tcp_free_acked_segments>
 800a762:	4602      	mov	r2, r0
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a770:	4a9b      	ldr	r2, [pc, #620]	; (800a9e0 <tcp_receive+0x600>)
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff fdae 	bl	800a2d4 <tcp_free_acked_segments>
 800a778:	4602      	mov	r2, r0
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a782:	2b00      	cmp	r3, #0
 800a784:	d104      	bne.n	800a790 <tcp_receive+0x3b0>
        pcb->rtime = -1;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a78c:	861a      	strh	r2, [r3, #48]	; 0x30
 800a78e:	e002      	b.n	800a796 <tcp_receive+0x3b6>
      } else {
        pcb->rtime = 0;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d103      	bne.n	800a7ac <tcp_receive+0x3cc>
        pcb->unsent_oversize = 0;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a7b2:	4b8c      	ldr	r3, [pc, #560]	; (800a9e4 <tcp_receive+0x604>)
 800a7b4:	881b      	ldrh	r3, [r3, #0]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	8b5b      	ldrh	r3, [r3, #26]
 800a7c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d035      	beq.n	800a838 <tcp_receive+0x458>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d118      	bne.n	800a806 <tcp_receive+0x426>
          if ((pcb->unsent == NULL) ||
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00c      	beq.n	800a7f6 <tcp_receive+0x416>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7f8 fda0 	bl	800332a <lwip_htonl>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7f0:	1ad3      	subs	r3, r2, r3
          if ((pcb->unsent == NULL) ||
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	db20      	blt.n	800a838 <tcp_receive+0x458>
            tcp_clear_flags(pcb, TF_RTO);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	8b5b      	ldrh	r3, [r3, #26]
 800a7fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a804:	e018      	b.n	800a838 <tcp_receive+0x458>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	4618      	mov	r0, r3
 800a810:	f7f8 fd8b 	bl	800332a <lwip_htonl>
 800a814:	4602      	mov	r2, r0
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a81a:	1ad3      	subs	r3, r2, r3
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	db0b      	blt.n	800a838 <tcp_receive+0x458>
          tcp_clear_flags(pcb, TF_RTO);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	8b5b      	ldrh	r3, [r3, #26]
 800a824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a828:	b29a      	uxth	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a82e:	e003      	b.n	800a838 <tcp_receive+0x458>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f002 fdf3 	bl	800d41c <tcp_send_empty_ack>
 800a836:	e000      	b.n	800a83a <tcp_receive+0x45a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a838:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d05b      	beq.n	800a8fa <tcp_receive+0x51a>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a846:	4b68      	ldr	r3, [pc, #416]	; (800a9e8 <tcp_receive+0x608>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	da54      	bge.n	800a8fa <tcp_receive+0x51a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a850:	4b66      	ldr	r3, [pc, #408]	; (800a9ec <tcp_receive+0x60c>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	b29a      	uxth	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	1ad3      	subs	r3, r2, r3
 800a85e:	b29b      	uxth	r3, r3
 800a860:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a864:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a86e:	10db      	asrs	r3, r3, #3
 800a870:	b21b      	sxth	r3, r3
 800a872:	b29b      	uxth	r3, r3
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	b29b      	uxth	r3, r3
 800a878:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a882:	b29a      	uxth	r2, r3
 800a884:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a888:	4413      	add	r3, r2
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	b21a      	sxth	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a892:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a896:	2b00      	cmp	r3, #0
 800a898:	da05      	bge.n	800a8a6 <tcp_receive+0x4c6>
        m = (s16_t) - m;
 800a89a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a89e:	425b      	negs	r3, r3
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a8a6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a8b0:	109b      	asrs	r3, r3, #2
 800a8b2:	b21b      	sxth	r3, r3
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a8c4:	b29a      	uxth	r2, r3
 800a8c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a8ca:	4413      	add	r3, r2
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	b21a      	sxth	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a8da:	10db      	asrs	r3, r3, #3
 800a8dc:	b21b      	sxth	r3, r3
 800a8de:	b29a      	uxth	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	4413      	add	r3, r2
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	b21a      	sxth	r2, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a8fa:	4b3d      	ldr	r3, [pc, #244]	; (800a9f0 <tcp_receive+0x610>)
 800a8fc:	881b      	ldrh	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f000 850f 	beq.w	800b322 <tcp_receive+0xf42>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	7d1b      	ldrb	r3, [r3, #20]
 800a908:	2b06      	cmp	r3, #6
 800a90a:	f200 850a 	bhi.w	800b322 <tcp_receive+0xf42>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a912:	4b38      	ldr	r3, [pc, #224]	; (800a9f4 <tcp_receive+0x614>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	1ad3      	subs	r3, r2, r3
 800a918:	3b01      	subs	r3, #1
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	f2c0 809e 	blt.w	800aa5c <tcp_receive+0x67c>
 800a920:	4b33      	ldr	r3, [pc, #204]	; (800a9f0 <tcp_receive+0x610>)
 800a922:	881b      	ldrh	r3, [r3, #0]
 800a924:	461a      	mov	r2, r3
 800a926:	4b33      	ldr	r3, [pc, #204]	; (800a9f4 <tcp_receive+0x614>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	441a      	add	r2, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a930:	425b      	negs	r3, r3
 800a932:	4413      	add	r3, r2
 800a934:	3b01      	subs	r3, #1
 800a936:	2b00      	cmp	r3, #0
 800a938:	f2c0 8090 	blt.w	800aa5c <tcp_receive+0x67c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a93c:	4b2e      	ldr	r3, [pc, #184]	; (800a9f8 <tcp_receive+0x618>)
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	64bb      	str	r3, [r7, #72]	; 0x48
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a946:	4b2b      	ldr	r3, [pc, #172]	; (800a9f4 <tcp_receive+0x614>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	62bb      	str	r3, [r7, #40]	; 0x28
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a94e:	4b2a      	ldr	r3, [pc, #168]	; (800a9f8 <tcp_receive+0x618>)
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10b      	bne.n	800a96e <tcp_receive+0x58e>
 800a956:	4b29      	ldr	r3, [pc, #164]	; (800a9fc <tcp_receive+0x61c>)
 800a958:	f240 529a 	movw	r2, #1434	; 0x59a
 800a95c:	4928      	ldr	r1, [pc, #160]	; (800aa00 <tcp_receive+0x620>)
 800a95e:	4829      	ldr	r0, [pc, #164]	; (800aa04 <tcp_receive+0x624>)
 800a960:	f00d fa68 	bl	8017e34 <iprintf>
 800a964:	2000      	movs	r0, #0
 800a966:	f00d fb67 	bl	8018038 <fflush>
 800a96a:	f00d faac 	bl	8017ec6 <abort>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a970:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a974:	4293      	cmp	r3, r2
 800a976:	d90b      	bls.n	800a990 <tcp_receive+0x5b0>
 800a978:	4b20      	ldr	r3, [pc, #128]	; (800a9fc <tcp_receive+0x61c>)
 800a97a:	f240 529b 	movw	r2, #1435	; 0x59b
 800a97e:	4922      	ldr	r1, [pc, #136]	; (800aa08 <tcp_receive+0x628>)
 800a980:	4820      	ldr	r0, [pc, #128]	; (800aa04 <tcp_receive+0x624>)
 800a982:	f00d fa57 	bl	8017e34 <iprintf>
 800a986:	2000      	movs	r0, #0
 800a988:	f00d fb56 	bl	8018038 <fflush>
 800a98c:	f00d fa9b 	bl	8017ec6 <abort>
      off = (u16_t)off32;
 800a990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a992:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a996:	4b18      	ldr	r3, [pc, #96]	; (800a9f8 <tcp_receive+0x618>)
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	891b      	ldrh	r3, [r3, #8]
 800a99c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d90b      	bls.n	800a9bc <tcp_receive+0x5dc>
 800a9a4:	4b15      	ldr	r3, [pc, #84]	; (800a9fc <tcp_receive+0x61c>)
 800a9a6:	f240 529d 	movw	r2, #1437	; 0x59d
 800a9aa:	4918      	ldr	r1, [pc, #96]	; (800aa0c <tcp_receive+0x62c>)
 800a9ac:	4815      	ldr	r0, [pc, #84]	; (800aa04 <tcp_receive+0x624>)
 800a9ae:	f00d fa41 	bl	8017e34 <iprintf>
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	f00d fb40 	bl	8018038 <fflush>
 800a9b8:	f00d fa85 	bl	8017ec6 <abort>
      inseg.len -= off;
 800a9bc:	4b0e      	ldr	r3, [pc, #56]	; (800a9f8 <tcp_receive+0x618>)
 800a9be:	891a      	ldrh	r2, [r3, #8]
 800a9c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a9c4:	1ad3      	subs	r3, r2, r3
 800a9c6:	b29a      	uxth	r2, r3
 800a9c8:	4b0b      	ldr	r3, [pc, #44]	; (800a9f8 <tcp_receive+0x618>)
 800a9ca:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a9cc:	4b0a      	ldr	r3, [pc, #40]	; (800a9f8 <tcp_receive+0x618>)
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	891a      	ldrh	r2, [r3, #8]
 800a9d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	84fb      	strh	r3, [r7, #38]	; 0x26
      while (p->len < off) {
 800a9da:	e029      	b.n	800aa30 <tcp_receive+0x650>
 800a9dc:	0801ba64 	.word	0x0801ba64
 800a9e0:	0801ba6c 	.word	0x0801ba6c
 800a9e4:	20000c18 	.word	0x20000c18
 800a9e8:	20000c14 	.word	0x20000c14
 800a9ec:	20004040 	.word	0x20004040
 800a9f0:	20000c1a 	.word	0x20000c1a
 800a9f4:	20000c10 	.word	0x20000c10
 800a9f8:	20000bec 	.word	0x20000bec
 800a9fc:	0801b584 	.word	0x0801b584
 800aa00:	0801ba74 	.word	0x0801ba74
 800aa04:	0801b5c0 	.word	0x0801b5c0
 800aa08:	0801ba84 	.word	0x0801ba84
 800aa0c:	0801ba94 	.word	0x0801ba94
        off -= p->len;
 800aa10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa12:	895b      	ldrh	r3, [r3, #10]
 800aa14:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800aa1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aa22:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800aa24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa26:	2200      	movs	r2, #0
 800aa28:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800aa2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	64bb      	str	r3, [r7, #72]	; 0x48
      while (p->len < off) {
 800aa30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa32:	895b      	ldrh	r3, [r3, #10]
 800aa34:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d8e9      	bhi.n	800aa10 <tcp_receive+0x630>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800aa3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800aa40:	4619      	mov	r1, r3
 800aa42:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800aa44:	f7fb f95c 	bl	8005d00 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800aa48:	4b94      	ldr	r3, [pc, #592]	; (800ac9c <tcp_receive+0x8bc>)
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aa50:	4993      	ldr	r1, [pc, #588]	; (800aca0 <tcp_receive+0x8c0>)
 800aa52:	600a      	str	r2, [r1, #0]
 800aa54:	4a92      	ldr	r2, [pc, #584]	; (800aca0 <tcp_receive+0x8c0>)
 800aa56:	6812      	ldr	r2, [r2, #0]
 800aa58:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800aa5a:	e00d      	b.n	800aa78 <tcp_receive+0x698>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800aa5c:	4b90      	ldr	r3, [pc, #576]	; (800aca0 <tcp_receive+0x8c0>)
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	da06      	bge.n	800aa78 <tcp_receive+0x698>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	8b5b      	ldrh	r3, [r3, #26]
 800aa6e:	f043 0302 	orr.w	r3, r3, #2
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800aa78:	4b89      	ldr	r3, [pc, #548]	; (800aca0 <tcp_receive+0x8c0>)
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f2c0 8448 	blt.w	800b318 <tcp_receive+0xf38>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800aa90:	441a      	add	r2, r3
 800aa92:	4b83      	ldr	r3, [pc, #524]	; (800aca0 <tcp_receive+0x8c0>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	425b      	negs	r3, r3
 800aa98:	4413      	add	r3, r2
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f2c0 843b 	blt.w	800b318 <tcp_receive+0xf38>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aaa6:	4b7e      	ldr	r3, [pc, #504]	; (800aca0 <tcp_receive+0x8c0>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	f040 82ab 	bne.w	800b006 <tcp_receive+0xc26>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800aab0:	4b7a      	ldr	r3, [pc, #488]	; (800ac9c <tcp_receive+0x8bc>)
 800aab2:	891c      	ldrh	r4, [r3, #8]
 800aab4:	4b79      	ldr	r3, [pc, #484]	; (800ac9c <tcp_receive+0x8bc>)
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	899b      	ldrh	r3, [r3, #12]
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7f8 fc1f 	bl	8003300 <lwip_htons>
 800aac2:	4603      	mov	r3, r0
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	f003 0303 	and.w	r3, r3, #3
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d001      	beq.n	800aad2 <tcp_receive+0x6f2>
 800aace:	2301      	movs	r3, #1
 800aad0:	e000      	b.n	800aad4 <tcp_receive+0x6f4>
 800aad2:	2300      	movs	r3, #0
 800aad4:	4423      	add	r3, r4
 800aad6:	b29a      	uxth	r2, r3
 800aad8:	4b72      	ldr	r3, [pc, #456]	; (800aca4 <tcp_receive+0x8c4>)
 800aada:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aae0:	4b70      	ldr	r3, [pc, #448]	; (800aca4 <tcp_receive+0x8c4>)
 800aae2:	881b      	ldrh	r3, [r3, #0]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d27a      	bcs.n	800abde <tcp_receive+0x7fe>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aae8:	4b6c      	ldr	r3, [pc, #432]	; (800ac9c <tcp_receive+0x8bc>)
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	899b      	ldrh	r3, [r3, #12]
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7f8 fc05 	bl	8003300 <lwip_htons>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	f003 0301 	and.w	r3, r3, #1
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d01f      	beq.n	800ab42 <tcp_receive+0x762>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ab02:	4b66      	ldr	r3, [pc, #408]	; (800ac9c <tcp_receive+0x8bc>)
 800ab04:	691c      	ldr	r4, [r3, #16]
 800ab06:	4b65      	ldr	r3, [pc, #404]	; (800ac9c <tcp_receive+0x8bc>)
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	899b      	ldrh	r3, [r3, #12]
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	b21b      	sxth	r3, r3
 800ab10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ab14:	b21d      	sxth	r5, r3
 800ab16:	4b61      	ldr	r3, [pc, #388]	; (800ac9c <tcp_receive+0x8bc>)
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	899b      	ldrh	r3, [r3, #12]
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7f8 fbee 	bl	8003300 <lwip_htons>
 800ab24:	4603      	mov	r3, r0
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7f8 fbe5 	bl	8003300 <lwip_htons>
 800ab36:	4603      	mov	r3, r0
 800ab38:	b21b      	sxth	r3, r3
 800ab3a:	432b      	orrs	r3, r5
 800ab3c:	b21b      	sxth	r3, r3
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ab46:	4b55      	ldr	r3, [pc, #340]	; (800ac9c <tcp_receive+0x8bc>)
 800ab48:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ab4a:	4b54      	ldr	r3, [pc, #336]	; (800ac9c <tcp_receive+0x8bc>)
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	899b      	ldrh	r3, [r3, #12]
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7f8 fbd4 	bl	8003300 <lwip_htons>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	f003 0302 	and.w	r3, r3, #2
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d005      	beq.n	800ab70 <tcp_receive+0x790>
            inseg.len -= 1;
 800ab64:	4b4d      	ldr	r3, [pc, #308]	; (800ac9c <tcp_receive+0x8bc>)
 800ab66:	891b      	ldrh	r3, [r3, #8]
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	4b4b      	ldr	r3, [pc, #300]	; (800ac9c <tcp_receive+0x8bc>)
 800ab6e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ab70:	4b4a      	ldr	r3, [pc, #296]	; (800ac9c <tcp_receive+0x8bc>)
 800ab72:	685a      	ldr	r2, [r3, #4]
 800ab74:	4b49      	ldr	r3, [pc, #292]	; (800ac9c <tcp_receive+0x8bc>)
 800ab76:	891b      	ldrh	r3, [r3, #8]
 800ab78:	4619      	mov	r1, r3
 800ab7a:	4610      	mov	r0, r2
 800ab7c:	f7fa ff98 	bl	8005ab0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ab80:	4b46      	ldr	r3, [pc, #280]	; (800ac9c <tcp_receive+0x8bc>)
 800ab82:	891c      	ldrh	r4, [r3, #8]
 800ab84:	4b45      	ldr	r3, [pc, #276]	; (800ac9c <tcp_receive+0x8bc>)
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	899b      	ldrh	r3, [r3, #12]
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7f8 fbb7 	bl	8003300 <lwip_htons>
 800ab92:	4603      	mov	r3, r0
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	f003 0303 	and.w	r3, r3, #3
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d001      	beq.n	800aba2 <tcp_receive+0x7c2>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e000      	b.n	800aba4 <tcp_receive+0x7c4>
 800aba2:	2300      	movs	r3, #0
 800aba4:	4423      	add	r3, r4
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	4b3e      	ldr	r3, [pc, #248]	; (800aca4 <tcp_receive+0x8c4>)
 800abaa:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 800abac:	4b3d      	ldr	r3, [pc, #244]	; (800aca4 <tcp_receive+0x8c4>)
 800abae:	881b      	ldrh	r3, [r3, #0]
 800abb0:	461a      	mov	r2, r3
 800abb2:	4b3b      	ldr	r3, [pc, #236]	; (800aca0 <tcp_receive+0x8c0>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	441a      	add	r2, r3
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbc:	6879      	ldr	r1, [r7, #4]
 800abbe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800abc0:	440b      	add	r3, r1
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d00b      	beq.n	800abde <tcp_receive+0x7fe>
 800abc6:	4b38      	ldr	r3, [pc, #224]	; (800aca8 <tcp_receive+0x8c8>)
 800abc8:	f240 52d2 	movw	r2, #1490	; 0x5d2
 800abcc:	4937      	ldr	r1, [pc, #220]	; (800acac <tcp_receive+0x8cc>)
 800abce:	4838      	ldr	r0, [pc, #224]	; (800acb0 <tcp_receive+0x8d0>)
 800abd0:	f00d f930 	bl	8017e34 <iprintf>
 800abd4:	2000      	movs	r0, #0
 800abd6:	f00d fa2f 	bl	8018038 <fflush>
 800abda:	f00d f974 	bl	8017ec6 <abort>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f000 80ea 	beq.w	800adbc <tcp_receive+0x9dc>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800abe8:	4b2c      	ldr	r3, [pc, #176]	; (800ac9c <tcp_receive+0x8bc>)
 800abea:	691b      	ldr	r3, [r3, #16]
 800abec:	899b      	ldrh	r3, [r3, #12]
 800abee:	b29b      	uxth	r3, r3
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7f8 fb85 	bl	8003300 <lwip_htons>
 800abf6:	4603      	mov	r3, r0
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d010      	beq.n	800ac24 <tcp_receive+0x844>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ac02:	e00a      	b.n	800ac1a <tcp_receive+0x83a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac08:	623b      	str	r3, [r7, #32]
              pcb->ooseq = pcb->ooseq->next;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ac14:	6a38      	ldr	r0, [r7, #32]
 800ac16:	f7fd f933 	bl	8007e80 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1f0      	bne.n	800ac04 <tcp_receive+0x824>
 800ac22:	e0cb      	b.n	800adbc <tcp_receive+0x9dc>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac28:	643b      	str	r3, [r7, #64]	; 0x40
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ac2a:	e050      	b.n	800acce <tcp_receive+0x8ee>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ac2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	899b      	ldrh	r3, [r3, #12]
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7f8 fb63 	bl	8003300 <lwip_htons>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	f003 0301 	and.w	r3, r3, #1
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d03b      	beq.n	800acbe <tcp_receive+0x8de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ac46:	4b15      	ldr	r3, [pc, #84]	; (800ac9c <tcp_receive+0x8bc>)
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	899b      	ldrh	r3, [r3, #12]
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7f8 fb56 	bl	8003300 <lwip_htons>
 800ac54:	4603      	mov	r3, r0
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d12e      	bne.n	800acbe <tcp_receive+0x8de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ac60:	4b0e      	ldr	r3, [pc, #56]	; (800ac9c <tcp_receive+0x8bc>)
 800ac62:	691c      	ldr	r4, [r3, #16]
 800ac64:	4b0d      	ldr	r3, [pc, #52]	; (800ac9c <tcp_receive+0x8bc>)
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	899b      	ldrh	r3, [r3, #12]
 800ac6a:	b29d      	uxth	r5, r3
 800ac6c:	2001      	movs	r0, #1
 800ac6e:	f7f8 fb47 	bl	8003300 <lwip_htons>
 800ac72:	4603      	mov	r3, r0
 800ac74:	432b      	orrs	r3, r5
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ac7a:	4b08      	ldr	r3, [pc, #32]	; (800ac9c <tcp_receive+0x8bc>)
 800ac7c:	891c      	ldrh	r4, [r3, #8]
 800ac7e:	4b07      	ldr	r3, [pc, #28]	; (800ac9c <tcp_receive+0x8bc>)
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	899b      	ldrh	r3, [r3, #12]
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7f8 fb3a 	bl	8003300 <lwip_htons>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	f003 0303 	and.w	r3, r3, #3
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00d      	beq.n	800acb4 <tcp_receive+0x8d4>
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e00c      	b.n	800acb6 <tcp_receive+0x8d6>
 800ac9c:	20000bec 	.word	0x20000bec
 800aca0:	20000c10 	.word	0x20000c10
 800aca4:	20000c1a 	.word	0x20000c1a
 800aca8:	0801b584 	.word	0x0801b584
 800acac:	0801baa4 	.word	0x0801baa4
 800acb0:	0801b5c0 	.word	0x0801b5c0
 800acb4:	2300      	movs	r3, #0
 800acb6:	4423      	add	r3, r4
 800acb8:	b29a      	uxth	r2, r3
 800acba:	4b9f      	ldr	r3, [pc, #636]	; (800af38 <tcp_receive+0xb58>)
 800acbc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800acbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acc0:	61fb      	str	r3, [r7, #28]
              next = next->next;
 800acc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	643b      	str	r3, [r7, #64]	; 0x40
              tcp_seg_free(tmp);
 800acc8:	69f8      	ldr	r0, [r7, #28]
 800acca:	f7fd f8d9 	bl	8007e80 <tcp_seg_free>
            while (next &&
 800acce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00e      	beq.n	800acf2 <tcp_receive+0x912>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800acd4:	4b98      	ldr	r3, [pc, #608]	; (800af38 <tcp_receive+0xb58>)
 800acd6:	881b      	ldrh	r3, [r3, #0]
 800acd8:	461a      	mov	r2, r3
 800acda:	4b98      	ldr	r3, [pc, #608]	; (800af3c <tcp_receive+0xb5c>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	441a      	add	r2, r3
 800ace0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ace8:	8909      	ldrh	r1, [r1, #8]
 800acea:	440b      	add	r3, r1
 800acec:	1ad3      	subs	r3, r2, r3
            while (next &&
 800acee:	2b00      	cmp	r3, #0
 800acf0:	da9c      	bge.n	800ac2c <tcp_receive+0x84c>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800acf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d05e      	beq.n	800adb6 <tcp_receive+0x9d6>
                TCP_SEQ_GT(seqno + tcplen,
 800acf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	685a      	ldr	r2, [r3, #4]
 800acfe:	4b8e      	ldr	r3, [pc, #568]	; (800af38 <tcp_receive+0xb58>)
 800ad00:	881b      	ldrh	r3, [r3, #0]
 800ad02:	4619      	mov	r1, r3
 800ad04:	4b8d      	ldr	r3, [pc, #564]	; (800af3c <tcp_receive+0xb5c>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	440b      	add	r3, r1
 800ad0a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	da52      	bge.n	800adb6 <tcp_receive+0x9d6>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ad10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	4b88      	ldr	r3, [pc, #544]	; (800af3c <tcp_receive+0xb5c>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	4b87      	ldr	r3, [pc, #540]	; (800af40 <tcp_receive+0xb60>)
 800ad24:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ad26:	4b86      	ldr	r3, [pc, #536]	; (800af40 <tcp_receive+0xb60>)
 800ad28:	691b      	ldr	r3, [r3, #16]
 800ad2a:	899b      	ldrh	r3, [r3, #12]
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f7f8 fae6 	bl	8003300 <lwip_htons>
 800ad34:	4603      	mov	r3, r0
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	f003 0302 	and.w	r3, r3, #2
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d005      	beq.n	800ad4c <tcp_receive+0x96c>
                inseg.len -= 1;
 800ad40:	4b7f      	ldr	r3, [pc, #508]	; (800af40 <tcp_receive+0xb60>)
 800ad42:	891b      	ldrh	r3, [r3, #8]
 800ad44:	3b01      	subs	r3, #1
 800ad46:	b29a      	uxth	r2, r3
 800ad48:	4b7d      	ldr	r3, [pc, #500]	; (800af40 <tcp_receive+0xb60>)
 800ad4a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ad4c:	4b7c      	ldr	r3, [pc, #496]	; (800af40 <tcp_receive+0xb60>)
 800ad4e:	685a      	ldr	r2, [r3, #4]
 800ad50:	4b7b      	ldr	r3, [pc, #492]	; (800af40 <tcp_receive+0xb60>)
 800ad52:	891b      	ldrh	r3, [r3, #8]
 800ad54:	4619      	mov	r1, r3
 800ad56:	4610      	mov	r0, r2
 800ad58:	f7fa feaa 	bl	8005ab0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ad5c:	4b78      	ldr	r3, [pc, #480]	; (800af40 <tcp_receive+0xb60>)
 800ad5e:	891c      	ldrh	r4, [r3, #8]
 800ad60:	4b77      	ldr	r3, [pc, #476]	; (800af40 <tcp_receive+0xb60>)
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	899b      	ldrh	r3, [r3, #12]
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7f8 fac9 	bl	8003300 <lwip_htons>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	f003 0303 	and.w	r3, r3, #3
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <tcp_receive+0x99e>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e000      	b.n	800ad80 <tcp_receive+0x9a0>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	4423      	add	r3, r4
 800ad82:	b29a      	uxth	r2, r3
 800ad84:	4b6c      	ldr	r3, [pc, #432]	; (800af38 <tcp_receive+0xb58>)
 800ad86:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue",
 800ad88:	4b6b      	ldr	r3, [pc, #428]	; (800af38 <tcp_receive+0xb58>)
 800ad8a:	881b      	ldrh	r3, [r3, #0]
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	4b6b      	ldr	r3, [pc, #428]	; (800af3c <tcp_receive+0xb5c>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	441a      	add	r2, r3
 800ad94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad96:	691b      	ldr	r3, [r3, #16]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d00b      	beq.n	800adb6 <tcp_receive+0x9d6>
 800ad9e:	4b69      	ldr	r3, [pc, #420]	; (800af44 <tcp_receive+0xb64>)
 800ada0:	f240 6203 	movw	r2, #1539	; 0x603
 800ada4:	4968      	ldr	r1, [pc, #416]	; (800af48 <tcp_receive+0xb68>)
 800ada6:	4869      	ldr	r0, [pc, #420]	; (800af4c <tcp_receive+0xb6c>)
 800ada8:	f00d f844 	bl	8017e34 <iprintf>
 800adac:	2000      	movs	r0, #0
 800adae:	f00d f943 	bl	8018038 <fflush>
 800adb2:	f00d f888 	bl	8017ec6 <abort>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800adba:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800adbc:	4b5e      	ldr	r3, [pc, #376]	; (800af38 <tcp_receive+0xb58>)
 800adbe:	881b      	ldrh	r3, [r3, #0]
 800adc0:	461a      	mov	r2, r3
 800adc2:	4b5e      	ldr	r3, [pc, #376]	; (800af3c <tcp_receive+0xb5c>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	441a      	add	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd", pcb->rcv_wnd >= tcplen);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800add0:	4b59      	ldr	r3, [pc, #356]	; (800af38 <tcp_receive+0xb58>)
 800add2:	881b      	ldrh	r3, [r3, #0]
 800add4:	429a      	cmp	r2, r3
 800add6:	d20b      	bcs.n	800adf0 <tcp_receive+0xa10>
 800add8:	4b5a      	ldr	r3, [pc, #360]	; (800af44 <tcp_receive+0xb64>)
 800adda:	f240 620d 	movw	r2, #1549	; 0x60d
 800adde:	495c      	ldr	r1, [pc, #368]	; (800af50 <tcp_receive+0xb70>)
 800ade0:	485a      	ldr	r0, [pc, #360]	; (800af4c <tcp_receive+0xb6c>)
 800ade2:	f00d f827 	bl	8017e34 <iprintf>
 800ade6:	2000      	movs	r0, #0
 800ade8:	f00d f926 	bl	8018038 <fflush>
 800adec:	f00d f86b 	bl	8017ec6 <abort>
        pcb->rcv_wnd -= tcplen;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800adf4:	4b50      	ldr	r3, [pc, #320]	; (800af38 <tcp_receive+0xb58>)
 800adf6:	881b      	ldrh	r3, [r3, #0]
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7fc f949 	bl	8007098 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ae06:	4b4e      	ldr	r3, [pc, #312]	; (800af40 <tcp_receive+0xb60>)
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	891b      	ldrh	r3, [r3, #8]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d006      	beq.n	800ae1e <tcp_receive+0xa3e>
          recv_data = inseg.p;
 800ae10:	4b4b      	ldr	r3, [pc, #300]	; (800af40 <tcp_receive+0xb60>)
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	4a4f      	ldr	r2, [pc, #316]	; (800af54 <tcp_receive+0xb74>)
 800ae16:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakenly) deallocate it. */
          inseg.p = NULL;
 800ae18:	4b49      	ldr	r3, [pc, #292]	; (800af40 <tcp_receive+0xb60>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ae1e:	4b48      	ldr	r3, [pc, #288]	; (800af40 <tcp_receive+0xb60>)
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	899b      	ldrh	r3, [r3, #12]
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7f8 fa6a 	bl	8003300 <lwip_htons>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	f003 0301 	and.w	r3, r3, #1
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f000 80bc 	beq.w	800afb2 <tcp_receive+0xbd2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ae3a:	4b47      	ldr	r3, [pc, #284]	; (800af58 <tcp_receive+0xb78>)
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	f043 0320 	orr.w	r3, r3, #32
 800ae42:	b2da      	uxtb	r2, r3
 800ae44:	4b44      	ldr	r3, [pc, #272]	; (800af58 <tcp_receive+0xb78>)
 800ae46:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ae48:	e0b3      	b.n	800afb2 <tcp_receive+0xbd2>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae4e:	61bb      	str	r3, [r7, #24]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	4a38      	ldr	r2, [pc, #224]	; (800af3c <tcp_receive+0xb5c>)
 800ae5a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	891b      	ldrh	r3, [r3, #8]
 800ae60:	461c      	mov	r4, r3
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	899b      	ldrh	r3, [r3, #12]
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7f8 fa48 	bl	8003300 <lwip_htons>
 800ae70:	4603      	mov	r3, r0
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	f003 0303 	and.w	r3, r3, #3
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d001      	beq.n	800ae80 <tcp_receive+0xaa0>
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e000      	b.n	800ae82 <tcp_receive+0xaa2>
 800ae80:	2300      	movs	r3, #0
 800ae82:	4423      	add	r3, r4
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ae88:	441a      	add	r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd",
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae92:	461c      	mov	r4, r3
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	891b      	ldrh	r3, [r3, #8]
 800ae98:	461d      	mov	r5, r3
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	899b      	ldrh	r3, [r3, #12]
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7f8 fa2c 	bl	8003300 <lwip_htons>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	f003 0303 	and.w	r3, r3, #3
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d001      	beq.n	800aeb8 <tcp_receive+0xad8>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e000      	b.n	800aeba <tcp_receive+0xada>
 800aeb8:	2300      	movs	r3, #0
 800aeba:	442b      	add	r3, r5
 800aebc:	429c      	cmp	r4, r3
 800aebe:	d20b      	bcs.n	800aed8 <tcp_receive+0xaf8>
 800aec0:	4b20      	ldr	r3, [pc, #128]	; (800af44 <tcp_receive+0xb64>)
 800aec2:	f240 6232 	movw	r2, #1586	; 0x632
 800aec6:	4925      	ldr	r1, [pc, #148]	; (800af5c <tcp_receive+0xb7c>)
 800aec8:	4820      	ldr	r0, [pc, #128]	; (800af4c <tcp_receive+0xb6c>)
 800aeca:	f00c ffb3 	bl	8017e34 <iprintf>
 800aece:	2000      	movs	r0, #0
 800aed0:	f00d f8b2 	bl	8018038 <fflush>
 800aed4:	f00c fff7 	bl	8017ec6 <abort>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	891b      	ldrh	r3, [r3, #8]
 800aedc:	461c      	mov	r4, r3
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	899b      	ldrh	r3, [r3, #12]
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7f8 fa0a 	bl	8003300 <lwip_htons>
 800aeec:	4603      	mov	r3, r0
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	f003 0303 	and.w	r3, r3, #3
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d001      	beq.n	800aefc <tcp_receive+0xb1c>
 800aef8:	2301      	movs	r3, #1
 800aefa:	e000      	b.n	800aefe <tcp_receive+0xb1e>
 800aefc:	2300      	movs	r3, #0
 800aefe:	18e1      	adds	r1, r4, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800af04:	b28b      	uxth	r3, r1
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	b29a      	uxth	r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f7fc f8c2 	bl	8007098 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	891b      	ldrh	r3, [r3, #8]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d027      	beq.n	800af6e <tcp_receive+0xb8e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800af1e:	4b0d      	ldr	r3, [pc, #52]	; (800af54 <tcp_receive+0xb74>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d01c      	beq.n	800af60 <tcp_receive+0xb80>
              pbuf_cat(recv_data, cseg->p);
 800af26:	4b0b      	ldr	r3, [pc, #44]	; (800af54 <tcp_receive+0xb74>)
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	4619      	mov	r1, r3
 800af30:	4610      	mov	r0, r2
 800af32:	f7fb f857 	bl	8005fe4 <pbuf_cat>
 800af36:	e017      	b.n	800af68 <tcp_receive+0xb88>
 800af38:	20000c1a 	.word	0x20000c1a
 800af3c:	20000c10 	.word	0x20000c10
 800af40:	20000bec 	.word	0x20000bec
 800af44:	0801b584 	.word	0x0801b584
 800af48:	0801badc 	.word	0x0801badc
 800af4c:	0801b5c0 	.word	0x0801b5c0
 800af50:	0801bb18 	.word	0x0801bb18
 800af54:	20000c20 	.word	0x20000c20
 800af58:	20000c1d 	.word	0x20000c1d
 800af5c:	0801bb38 	.word	0x0801bb38
            } else {
              recv_data = cseg->p;
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	4a73      	ldr	r2, [pc, #460]	; (800b134 <tcp_receive+0xd54>)
 800af66:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	2200      	movs	r2, #0
 800af6c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	691b      	ldr	r3, [r3, #16]
 800af72:	899b      	ldrh	r3, [r3, #12]
 800af74:	b29b      	uxth	r3, r3
 800af76:	4618      	mov	r0, r3
 800af78:	f7f8 f9c2 	bl	8003300 <lwip_htons>
 800af7c:	4603      	mov	r3, r0
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	f003 0301 	and.w	r3, r3, #1
 800af84:	2b00      	cmp	r3, #0
 800af86:	d00d      	beq.n	800afa4 <tcp_receive+0xbc4>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800af88:	4b6b      	ldr	r3, [pc, #428]	; (800b138 <tcp_receive+0xd58>)
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	f043 0320 	orr.w	r3, r3, #32
 800af90:	b2da      	uxtb	r2, r3
 800af92:	4b69      	ldr	r3, [pc, #420]	; (800b138 <tcp_receive+0xd58>)
 800af94:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	7d1b      	ldrb	r3, [r3, #20]
 800af9a:	2b04      	cmp	r3, #4
 800af9c:	d102      	bne.n	800afa4 <tcp_receive+0xbc4>
              pcb->state = CLOSE_WAIT;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2207      	movs	r2, #7
 800afa2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800afac:	69b8      	ldr	r0, [r7, #24]
 800afae:	f7fc ff67 	bl	8007e80 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d008      	beq.n	800afcc <tcp_receive+0xbec>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	685a      	ldr	r2, [r3, #4]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800afc6:	429a      	cmp	r2, r3
 800afc8:	f43f af3f 	beq.w	800ae4a <tcp_receive+0xa6a>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	8b5b      	ldrh	r3, [r3, #26]
 800afd0:	f003 0301 	and.w	r3, r3, #1
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00e      	beq.n	800aff6 <tcp_receive+0xc16>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	8b5b      	ldrh	r3, [r3, #26]
 800afdc:	f023 0301 	bic.w	r3, r3, #1
 800afe0:	b29a      	uxth	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	835a      	strh	r2, [r3, #26]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	8b5b      	ldrh	r3, [r3, #26]
 800afea:	f043 0302 	orr.w	r3, r3, #2
 800afee:	b29a      	uxth	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800aff4:	e194      	b.n	800b320 <tcp_receive+0xf40>
        tcp_ack(pcb);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	8b5b      	ldrh	r3, [r3, #26]
 800affa:	f043 0301 	orr.w	r3, r3, #1
 800affe:	b29a      	uxth	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b004:	e18c      	b.n	800b320 <tcp_receive+0xf40>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d106      	bne.n	800b01c <tcp_receive+0xc3c>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b00e:	484b      	ldr	r0, [pc, #300]	; (800b13c <tcp_receive+0xd5c>)
 800b010:	f7fc ff52 	bl	8007eb8 <tcp_seg_copy>
 800b014:	4602      	mov	r2, r0
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	675a      	str	r2, [r3, #116]	; 0x74
 800b01a:	e179      	b.n	800b310 <tcp_receive+0xf30>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b01c:	2300      	movs	r3, #0
 800b01e:	63bb      	str	r3, [r7, #56]	; 0x38
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b024:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b026:	e161      	b.n	800b2ec <tcp_receive+0xf0c>
            if (seqno == next->tcphdr->seqno) {
 800b028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	685a      	ldr	r2, [r3, #4]
 800b02e:	4b44      	ldr	r3, [pc, #272]	; (800b140 <tcp_receive+0xd60>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	429a      	cmp	r2, r3
 800b034:	d122      	bne.n	800b07c <tcp_receive+0xc9c>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b036:	4b41      	ldr	r3, [pc, #260]	; (800b13c <tcp_receive+0xd5c>)
 800b038:	891a      	ldrh	r2, [r3, #8]
 800b03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b03c:	891b      	ldrh	r3, [r3, #8]
 800b03e:	429a      	cmp	r2, r3
 800b040:	f240 8159 	bls.w	800b2f6 <tcp_receive+0xf16>

                /* If next segment is the last segment in ooseq
                   and smaller than inseg, that means it has been
                   trimmed before to fit our window, so we just
                   break here. */
                if (next->next == NULL) {
 800b044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	f000 8156 	beq.w	800b2fa <tcp_receive+0xf1a>
                }

                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800b04e:	483b      	ldr	r0, [pc, #236]	; (800b13c <tcp_receive+0xd5c>)
 800b050:	f7fc ff32 	bl	8007eb8 <tcp_seg_copy>
 800b054:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f000 8150 	beq.w	800b2fe <tcp_receive+0xf1e>
                  if (prev != NULL) {
 800b05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b060:	2b00      	cmp	r3, #0
 800b062:	d003      	beq.n	800b06c <tcp_receive+0xc8c>
                    prev->next = cseg;
 800b064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b066:	68fa      	ldr	r2, [r7, #12]
 800b068:	601a      	str	r2, [r3, #0]
 800b06a:	e002      	b.n	800b072 <tcp_receive+0xc92>
                  } else {
                    pcb->ooseq = cseg;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b072:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f7ff f8a1 	bl	800a1bc <tcp_oos_insert_segment>
                }
                break;
 800b07a:	e140      	b.n	800b2fe <tcp_receive+0xf1e>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d117      	bne.n	800b0b2 <tcp_receive+0xcd2>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b082:	4b2f      	ldr	r3, [pc, #188]	; (800b140 <tcp_receive+0xd60>)
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b088:	691b      	ldr	r3, [r3, #16]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	1ad3      	subs	r3, r2, r3
 800b08e:	2b00      	cmp	r3, #0
 800b090:	da58      	bge.n	800b144 <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b092:	482a      	ldr	r0, [pc, #168]	; (800b13c <tcp_receive+0xd5c>)
 800b094:	f7fc ff10 	bl	8007eb8 <tcp_seg_copy>
 800b098:	6178      	str	r0, [r7, #20]
                  if (cseg != NULL) {
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f000 8130 	beq.w	800b302 <tcp_receive+0xf22>
                    pcb->ooseq = cseg;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	697a      	ldr	r2, [r7, #20]
 800b0a6:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b0a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b0aa:	6978      	ldr	r0, [r7, #20]
 800b0ac:	f7ff f886 	bl	800a1bc <tcp_oos_insert_segment>
                  }
                  break;
 800b0b0:	e127      	b.n	800b302 <tcp_receive+0xf22>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b0b2:	4b23      	ldr	r3, [pc, #140]	; (800b140 <tcp_receive+0xd60>)
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	1ad3      	subs	r3, r2, r3
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	db3f      	blt.n	800b144 <tcp_receive+0xd64>
 800b0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	685a      	ldr	r2, [r3, #4]
 800b0ca:	4b1d      	ldr	r3, [pc, #116]	; (800b140 <tcp_receive+0xd60>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	1ad3      	subs	r3, r2, r3
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	db36      	blt.n	800b144 <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b0d6:	4819      	ldr	r0, [pc, #100]	; (800b13c <tcp_receive+0xd5c>)
 800b0d8:	f7fc feee 	bl	8007eb8 <tcp_seg_copy>
 800b0dc:	6138      	str	r0, [r7, #16]
                  if (cseg != NULL) {
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 8110 	beq.w	800b306 <tcp_receive+0xf26>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b0e6:	4b16      	ldr	r3, [pc, #88]	; (800b140 <tcp_receive+0xd60>)
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b0f2:	8909      	ldrh	r1, [r1, #8]
 800b0f4:	440b      	add	r3, r1
 800b0f6:	1ad3      	subs	r3, r2, r3
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	da12      	bge.n	800b122 <tcp_receive+0xd42>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b0fc:	4b10      	ldr	r3, [pc, #64]	; (800b140 <tcp_receive+0xd60>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	b29a      	uxth	r2, r3
 800b102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	b29b      	uxth	r3, r3
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b110:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b114:	685a      	ldr	r2, [r3, #4]
 800b116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b118:	891b      	ldrh	r3, [r3, #8]
 800b11a:	4619      	mov	r1, r3
 800b11c:	4610      	mov	r0, r2
 800b11e:	f7fa fcc7 	bl	8005ab0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b124:	693a      	ldr	r2, [r7, #16]
 800b126:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b128:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b12a:	6938      	ldr	r0, [r7, #16]
 800b12c:	f7ff f846 	bl	800a1bc <tcp_oos_insert_segment>
                  }
                  break;
 800b130:	e0e9      	b.n	800b306 <tcp_receive+0xf26>
 800b132:	bf00      	nop
 800b134:	20000c20 	.word	0x20000c20
 800b138:	20000c1d 	.word	0x20000c1d
 800b13c:	20000bec 	.word	0x20000bec
 800b140:	20000c10 	.word	0x20000c10
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b146:	63bb      	str	r3, [r7, #56]	; 0x38

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f040 80ca 	bne.w	800b2e6 <tcp_receive+0xf06>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	685a      	ldr	r2, [r3, #4]
 800b158:	4b81      	ldr	r3, [pc, #516]	; (800b360 <tcp_receive+0xf80>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b15e:	2b00      	cmp	r3, #0
 800b160:	f280 80c1 	bge.w	800b2e6 <tcp_receive+0xf06>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	899b      	ldrh	r3, [r3, #12]
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7f8 f8c7 	bl	8003300 <lwip_htons>
 800b172:	4603      	mov	r3, r0
 800b174:	b2db      	uxtb	r3, r3
 800b176:	f003 0301 	and.w	r3, r3, #1
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f040 80c5 	bne.w	800b30a <tcp_receive+0xf2a>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b180:	4878      	ldr	r0, [pc, #480]	; (800b364 <tcp_receive+0xf84>)
 800b182:	f7fc fe99 	bl	8007eb8 <tcp_seg_copy>
 800b186:	4602      	mov	r2, r0
 800b188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b18a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b18c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	f000 80bc 	beq.w	800b30e <tcp_receive+0xf2e>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b196:	4b72      	ldr	r3, [pc, #456]	; (800b360 <tcp_receive+0xf80>)
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b19c:	691b      	ldr	r3, [r3, #16]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b1a2:	8909      	ldrh	r1, [r1, #8]
 800b1a4:	440b      	add	r3, r1
 800b1a6:	1ad3      	subs	r3, r2, r3
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	da12      	bge.n	800b1d2 <tcp_receive+0xdf2>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b1ac:	4b6c      	ldr	r3, [pc, #432]	; (800b360 <tcp_receive+0xf80>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	b29a      	uxth	r2, r3
 800b1b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	1ad3      	subs	r3, r2, r3
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1c0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1c4:	685a      	ldr	r2, [r3, #4]
 800b1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1c8:	891b      	ldrh	r3, [r3, #8]
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	4610      	mov	r0, r2
 800b1ce:	f7fa fc6f 	bl	8005ab0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b1da:	441a      	add	r2, r3
 800b1dc:	4b62      	ldr	r3, [pc, #392]	; (800b368 <tcp_receive+0xf88>)
 800b1de:	881b      	ldrh	r3, [r3, #0]
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	4b5f      	ldr	r3, [pc, #380]	; (800b360 <tcp_receive+0xf80>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	440b      	add	r3, r1
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f280 808f 	bge.w	800b30e <tcp_receive+0xf2e>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b1f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	691b      	ldr	r3, [r3, #16]
 800b1f6:	899b      	ldrh	r3, [r3, #12]
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7f8 f880 	bl	8003300 <lwip_htons>
 800b200:	4603      	mov	r3, r0
 800b202:	b2db      	uxtb	r3, r3
 800b204:	f003 0301 	and.w	r3, r3, #1
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d022      	beq.n	800b252 <tcp_receive+0xe72>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	691c      	ldr	r4, [r3, #16]
 800b212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	691b      	ldr	r3, [r3, #16]
 800b218:	899b      	ldrh	r3, [r3, #12]
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	b21b      	sxth	r3, r3
 800b21e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b222:	b21d      	sxth	r5, r3
 800b224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	691b      	ldr	r3, [r3, #16]
 800b22a:	899b      	ldrh	r3, [r3, #12]
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	4618      	mov	r0, r3
 800b230:	f7f8 f866 	bl	8003300 <lwip_htons>
 800b234:	4603      	mov	r3, r0
 800b236:	b2db      	uxtb	r3, r3
 800b238:	b29b      	uxth	r3, r3
 800b23a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b23e:	b29b      	uxth	r3, r3
 800b240:	4618      	mov	r0, r3
 800b242:	f7f8 f85d 	bl	8003300 <lwip_htons>
 800b246:	4603      	mov	r3, r0
 800b248:	b21b      	sxth	r3, r3
 800b24a:	432b      	orrs	r3, r5
 800b24c:	b21b      	sxth	r3, r3
 800b24e:	b29b      	uxth	r3, r3
 800b250:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b25a:	b291      	uxth	r1, r2
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b260:	440a      	add	r2, r1
 800b262:	b291      	uxth	r1, r2
 800b264:	4a3e      	ldr	r2, [pc, #248]	; (800b360 <tcp_receive+0xf80>)
 800b266:	6812      	ldr	r2, [r2, #0]
 800b268:	b292      	uxth	r2, r2
 800b26a:	1a8a      	subs	r2, r1, r2
 800b26c:	b292      	uxth	r2, r2
 800b26e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	685a      	ldr	r2, [r3, #4]
 800b276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	891b      	ldrh	r3, [r3, #8]
 800b27c:	4619      	mov	r1, r3
 800b27e:	4610      	mov	r0, r2
 800b280:	f7fa fc16 	bl	8005ab0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	891c      	ldrh	r4, [r3, #8]
 800b28a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	899b      	ldrh	r3, [r3, #12]
 800b292:	b29b      	uxth	r3, r3
 800b294:	4618      	mov	r0, r3
 800b296:	f7f8 f833 	bl	8003300 <lwip_htons>
 800b29a:	4603      	mov	r3, r0
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	f003 0303 	and.w	r3, r3, #3
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <tcp_receive+0xeca>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e000      	b.n	800b2ac <tcp_receive+0xecc>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	4423      	add	r3, r4
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	4b2d      	ldr	r3, [pc, #180]	; (800b368 <tcp_receive+0xf88>)
 800b2b2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 800b2b4:	4b2c      	ldr	r3, [pc, #176]	; (800b368 <tcp_receive+0xf88>)
 800b2b6:	881b      	ldrh	r3, [r3, #0]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	4b29      	ldr	r3, [pc, #164]	; (800b360 <tcp_receive+0xf80>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	441a      	add	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c4:	6879      	ldr	r1, [r7, #4]
 800b2c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b2c8:	440b      	add	r3, r1
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d01f      	beq.n	800b30e <tcp_receive+0xf2e>
 800b2ce:	4b27      	ldr	r3, [pc, #156]	; (800b36c <tcp_receive+0xf8c>)
 800b2d0:	f240 7209 	movw	r2, #1801	; 0x709
 800b2d4:	4926      	ldr	r1, [pc, #152]	; (800b370 <tcp_receive+0xf90>)
 800b2d6:	4827      	ldr	r0, [pc, #156]	; (800b374 <tcp_receive+0xf94>)
 800b2d8:	f00c fdac 	bl	8017e34 <iprintf>
 800b2dc:	2000      	movs	r0, #0
 800b2de:	f00c feab 	bl	8018038 <fflush>
 800b2e2:	f00c fdf0 	bl	8017ec6 <abort>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f47f ae9a 	bne.w	800b028 <tcp_receive+0xc48>
 800b2f4:	e00c      	b.n	800b310 <tcp_receive+0xf30>
                break;
 800b2f6:	bf00      	nop
 800b2f8:	e00a      	b.n	800b310 <tcp_receive+0xf30>
                  break;
 800b2fa:	bf00      	nop
 800b2fc:	e008      	b.n	800b310 <tcp_receive+0xf30>
                break;
 800b2fe:	bf00      	nop
 800b300:	e006      	b.n	800b310 <tcp_receive+0xf30>
                  break;
 800b302:	bf00      	nop
 800b304:	e004      	b.n	800b310 <tcp_receive+0xf30>
                  break;
 800b306:	bf00      	nop
 800b308:	e002      	b.n	800b310 <tcp_receive+0xf30>
                  break;
 800b30a:	bf00      	nop
 800b30c:	e000      	b.n	800b310 <tcp_receive+0xf30>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b30e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f002 f883 	bl	800d41c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b316:	e003      	b.n	800b320 <tcp_receive+0xf40>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f002 f87f 	bl	800d41c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b31e:	e01b      	b.n	800b358 <tcp_receive+0xf78>
 800b320:	e01a      	b.n	800b358 <tcp_receive+0xf78>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b322:	4b0f      	ldr	r3, [pc, #60]	; (800b360 <tcp_receive+0xf80>)
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32a:	1ad3      	subs	r3, r2, r3
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	db0b      	blt.n	800b348 <tcp_receive+0xf68>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b338:	441a      	add	r2, r3
 800b33a:	4b09      	ldr	r3, [pc, #36]	; (800b360 <tcp_receive+0xf80>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	425b      	negs	r3, r3
 800b340:	4413      	add	r3, r2
 800b342:	3b01      	subs	r3, #1
 800b344:	2b00      	cmp	r3, #0
 800b346:	da07      	bge.n	800b358 <tcp_receive+0xf78>
      tcp_ack_now(pcb);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	8b5b      	ldrh	r3, [r3, #26]
 800b34c:	f043 0302 	orr.w	r3, r3, #2
 800b350:	b29a      	uxth	r2, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b356:	e7ff      	b.n	800b358 <tcp_receive+0xf78>
 800b358:	bf00      	nop
 800b35a:	3750      	adds	r7, #80	; 0x50
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bdb0      	pop	{r4, r5, r7, pc}
 800b360:	20000c10 	.word	0x20000c10
 800b364:	20000bec 	.word	0x20000bec
 800b368:	20000c1a 	.word	0x20000c1a
 800b36c:	0801b584 	.word	0x0801b584
 800b370:	0801baa4 	.word	0x0801baa4
 800b374:	0801b5c0 	.word	0x0801b5c0

0800b378 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b37e:	4b15      	ldr	r3, [pc, #84]	; (800b3d4 <tcp_get_next_optbyte+0x5c>)
 800b380:	881b      	ldrh	r3, [r3, #0]
 800b382:	1c5a      	adds	r2, r3, #1
 800b384:	b291      	uxth	r1, r2
 800b386:	4a13      	ldr	r2, [pc, #76]	; (800b3d4 <tcp_get_next_optbyte+0x5c>)
 800b388:	8011      	strh	r1, [r2, #0]
 800b38a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b38c:	4b12      	ldr	r3, [pc, #72]	; (800b3d8 <tcp_get_next_optbyte+0x60>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d004      	beq.n	800b39e <tcp_get_next_optbyte+0x26>
 800b394:	4b11      	ldr	r3, [pc, #68]	; (800b3dc <tcp_get_next_optbyte+0x64>)
 800b396:	881b      	ldrh	r3, [r3, #0]
 800b398:	88fa      	ldrh	r2, [r7, #6]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d208      	bcs.n	800b3b0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b39e:	4b10      	ldr	r3, [pc, #64]	; (800b3e0 <tcp_get_next_optbyte+0x68>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	3314      	adds	r3, #20
 800b3a4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b3a6:	88fb      	ldrh	r3, [r7, #6]
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	e00b      	b.n	800b3c8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b3b0:	88fb      	ldrh	r3, [r7, #6]
 800b3b2:	b2da      	uxtb	r2, r3
 800b3b4:	4b09      	ldr	r3, [pc, #36]	; (800b3dc <tcp_get_next_optbyte+0x64>)
 800b3b6:	881b      	ldrh	r3, [r3, #0]
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	1ad3      	subs	r3, r2, r3
 800b3bc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b3be:	4b06      	ldr	r3, [pc, #24]	; (800b3d8 <tcp_get_next_optbyte+0x60>)
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	797b      	ldrb	r3, [r7, #5]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr
 800b3d4:	20000c0c 	.word	0x20000c0c
 800b3d8:	20000c08 	.word	0x20000c08
 800b3dc:	20000c06 	.word	0x20000c06
 800b3e0:	20000c00 	.word	0x20000c00

0800b3e4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10b      	bne.n	800b40a <tcp_parseopt+0x26>
 800b3f2:	4b33      	ldr	r3, [pc, #204]	; (800b4c0 <tcp_parseopt+0xdc>)
 800b3f4:	f240 728d 	movw	r2, #1933	; 0x78d
 800b3f8:	4932      	ldr	r1, [pc, #200]	; (800b4c4 <tcp_parseopt+0xe0>)
 800b3fa:	4833      	ldr	r0, [pc, #204]	; (800b4c8 <tcp_parseopt+0xe4>)
 800b3fc:	f00c fd1a 	bl	8017e34 <iprintf>
 800b400:	2000      	movs	r0, #0
 800b402:	f00c fe19 	bl	8018038 <fflush>
 800b406:	f00c fd5e 	bl	8017ec6 <abort>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b40a:	4b30      	ldr	r3, [pc, #192]	; (800b4cc <tcp_parseopt+0xe8>)
 800b40c:	881b      	ldrh	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d053      	beq.n	800b4ba <tcp_parseopt+0xd6>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b412:	4b2f      	ldr	r3, [pc, #188]	; (800b4d0 <tcp_parseopt+0xec>)
 800b414:	2200      	movs	r2, #0
 800b416:	801a      	strh	r2, [r3, #0]
 800b418:	e043      	b.n	800b4a2 <tcp_parseopt+0xbe>
      u8_t opt = tcp_get_next_optbyte();
 800b41a:	f7ff ffad 	bl	800b378 <tcp_get_next_optbyte>
 800b41e:	4603      	mov	r3, r0
 800b420:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b422:	7bfb      	ldrb	r3, [r7, #15]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d03c      	beq.n	800b4a2 <tcp_parseopt+0xbe>
 800b428:	2b02      	cmp	r3, #2
 800b42a:	d002      	beq.n	800b432 <tcp_parseopt+0x4e>
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d03f      	beq.n	800b4b0 <tcp_parseopt+0xcc>
 800b430:	e026      	b.n	800b480 <tcp_parseopt+0x9c>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b432:	f7ff ffa1 	bl	800b378 <tcp_get_next_optbyte>
 800b436:	4603      	mov	r3, r0
 800b438:	2b04      	cmp	r3, #4
 800b43a:	d13b      	bne.n	800b4b4 <tcp_parseopt+0xd0>
 800b43c:	4b24      	ldr	r3, [pc, #144]	; (800b4d0 <tcp_parseopt+0xec>)
 800b43e:	881b      	ldrh	r3, [r3, #0]
 800b440:	3302      	adds	r3, #2
 800b442:	4a22      	ldr	r2, [pc, #136]	; (800b4cc <tcp_parseopt+0xe8>)
 800b444:	8812      	ldrh	r2, [r2, #0]
 800b446:	4293      	cmp	r3, r2
 800b448:	dc34      	bgt.n	800b4b4 <tcp_parseopt+0xd0>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b44a:	f7ff ff95 	bl	800b378 <tcp_get_next_optbyte>
 800b44e:	4603      	mov	r3, r0
 800b450:	b29b      	uxth	r3, r3
 800b452:	021b      	lsls	r3, r3, #8
 800b454:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b456:	f7ff ff8f 	bl	800b378 <tcp_get_next_optbyte>
 800b45a:	4603      	mov	r3, r0
 800b45c:	b29a      	uxth	r2, r3
 800b45e:	89bb      	ldrh	r3, [r7, #12]
 800b460:	4313      	orrs	r3, r2
 800b462:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b464:	89bb      	ldrh	r3, [r7, #12]
 800b466:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b46a:	d804      	bhi.n	800b476 <tcp_parseopt+0x92>
 800b46c:	89bb      	ldrh	r3, [r7, #12]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d001      	beq.n	800b476 <tcp_parseopt+0x92>
 800b472:	89ba      	ldrh	r2, [r7, #12]
 800b474:	e001      	b.n	800b47a <tcp_parseopt+0x96>
 800b476:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b47e:	e010      	b.n	800b4a2 <tcp_parseopt+0xbe>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b480:	f7ff ff7a 	bl	800b378 <tcp_get_next_optbyte>
 800b484:	4603      	mov	r3, r0
 800b486:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b488:	7afb      	ldrb	r3, [r7, #11]
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d914      	bls.n	800b4b8 <tcp_parseopt+0xd4>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b48e:	7afb      	ldrb	r3, [r7, #11]
 800b490:	b29a      	uxth	r2, r3
 800b492:	4b0f      	ldr	r3, [pc, #60]	; (800b4d0 <tcp_parseopt+0xec>)
 800b494:	881b      	ldrh	r3, [r3, #0]
 800b496:	4413      	add	r3, r2
 800b498:	b29b      	uxth	r3, r3
 800b49a:	3b02      	subs	r3, #2
 800b49c:	b29a      	uxth	r2, r3
 800b49e:	4b0c      	ldr	r3, [pc, #48]	; (800b4d0 <tcp_parseopt+0xec>)
 800b4a0:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b4a2:	4b0b      	ldr	r3, [pc, #44]	; (800b4d0 <tcp_parseopt+0xec>)
 800b4a4:	881a      	ldrh	r2, [r3, #0]
 800b4a6:	4b09      	ldr	r3, [pc, #36]	; (800b4cc <tcp_parseopt+0xe8>)
 800b4a8:	881b      	ldrh	r3, [r3, #0]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d3b5      	bcc.n	800b41a <tcp_parseopt+0x36>
 800b4ae:	e004      	b.n	800b4ba <tcp_parseopt+0xd6>
          return;
 800b4b0:	bf00      	nop
 800b4b2:	e002      	b.n	800b4ba <tcp_parseopt+0xd6>
            return;
 800b4b4:	bf00      	nop
 800b4b6:	e000      	b.n	800b4ba <tcp_parseopt+0xd6>
            return;
 800b4b8:	bf00      	nop
      }
    }
  }
}
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	0801b584 	.word	0x0801b584
 800b4c4:	0801bb5c 	.word	0x0801bb5c
 800b4c8:	0801b5c0 	.word	0x0801b5c0
 800b4cc:	20000c04 	.word	0x20000c04
 800b4d0:	20000c0c 	.word	0x20000c0c

0800b4d4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b4d8:	4b05      	ldr	r3, [pc, #20]	; (800b4f0 <tcp_trigger_input_pcb_close+0x1c>)
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	f043 0310 	orr.w	r3, r3, #16
 800b4e0:	b2da      	uxtb	r2, r3
 800b4e2:	4b03      	ldr	r3, [pc, #12]	; (800b4f0 <tcp_trigger_input_pcb_close+0x1c>)
 800b4e4:	701a      	strb	r2, [r3, #0]
}
 800b4e6:	bf00      	nop
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	20000c1d 	.word	0x20000c1d

0800b4f4 <tcp_route>:
                                              struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00a      	beq.n	800b51c <tcp_route+0x28>
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	7a1b      	ldrb	r3, [r3, #8]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d006      	beq.n	800b51c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	7a1b      	ldrb	r3, [r3, #8]
 800b512:	4618      	mov	r0, r3
 800b514:	f7fa f930 	bl	8005778 <netif_get_by_index>
 800b518:	4603      	mov	r3, r0
 800b51a:	e003      	b.n	800b524 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f7f8 fd8f 	bl	8004040 <ip4_route>
 800b522:	4603      	mov	r3, r0
  }
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b52c:	b590      	push	{r4, r7, lr}
 800b52e:	b087      	sub	sp, #28
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	603b      	str	r3, [r7, #0]
 800b538:	4613      	mov	r3, r2
 800b53a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10a      	bne.n	800b558 <tcp_create_segment+0x2c>
 800b542:	4b4e      	ldr	r3, [pc, #312]	; (800b67c <tcp_create_segment+0x150>)
 800b544:	22a6      	movs	r2, #166	; 0xa6
 800b546:	494e      	ldr	r1, [pc, #312]	; (800b680 <tcp_create_segment+0x154>)
 800b548:	484e      	ldr	r0, [pc, #312]	; (800b684 <tcp_create_segment+0x158>)
 800b54a:	f00c fc73 	bl	8017e34 <iprintf>
 800b54e:	2000      	movs	r0, #0
 800b550:	f00c fd72 	bl	8018038 <fflush>
 800b554:	f00c fcb7 	bl	8017ec6 <abort>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10a      	bne.n	800b574 <tcp_create_segment+0x48>
 800b55e:	4b47      	ldr	r3, [pc, #284]	; (800b67c <tcp_create_segment+0x150>)
 800b560:	22a7      	movs	r2, #167	; 0xa7
 800b562:	4949      	ldr	r1, [pc, #292]	; (800b688 <tcp_create_segment+0x15c>)
 800b564:	4847      	ldr	r0, [pc, #284]	; (800b684 <tcp_create_segment+0x158>)
 800b566:	f00c fc65 	bl	8017e34 <iprintf>
 800b56a:	2000      	movs	r0, #0
 800b56c:	f00c fd64 	bl	8018038 <fflush>
 800b570:	f00c fca9 	bl	8017ec6 <abort>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b574:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b578:	f003 0301 	and.w	r3, r3, #1
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d001      	beq.n	800b584 <tcp_create_segment+0x58>
 800b580:	2304      	movs	r3, #4
 800b582:	e000      	b.n	800b586 <tcp_create_segment+0x5a>
 800b584:	2300      	movs	r3, #0
 800b586:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b588:	2003      	movs	r0, #3
 800b58a:	f7f9 fdc5 	bl	8005118 <memp_malloc>
 800b58e:	6138      	str	r0, [r7, #16]
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d104      	bne.n	800b5a0 <tcp_create_segment+0x74>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b596:	68b8      	ldr	r0, [r7, #8]
 800b598:	f7fa fc3c 	bl	8005e14 <pbuf_free>
    return NULL;
 800b59c:	2300      	movs	r3, #0
 800b59e:	e069      	b.n	800b674 <tcp_create_segment+0x148>
  }
  seg->flags = optflags;
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b5a6:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	68ba      	ldr	r2, [r7, #8]
 800b5b2:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	891a      	ldrh	r2, [r3, #8]
 800b5b8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d20a      	bcs.n	800b5d6 <tcp_create_segment+0xaa>
 800b5c0:	4b2e      	ldr	r3, [pc, #184]	; (800b67c <tcp_create_segment+0x150>)
 800b5c2:	22b3      	movs	r2, #179	; 0xb3
 800b5c4:	4931      	ldr	r1, [pc, #196]	; (800b68c <tcp_create_segment+0x160>)
 800b5c6:	482f      	ldr	r0, [pc, #188]	; (800b684 <tcp_create_segment+0x158>)
 800b5c8:	f00c fc34 	bl	8017e34 <iprintf>
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	f00c fd33 	bl	8018038 <fflush>
 800b5d2:	f00c fc78 	bl	8017ec6 <abort>
  seg->len = p->tot_len - optlen;
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	891a      	ldrh	r2, [r3, #8]
 800b5da:	7dfb      	ldrb	r3, [r7, #23]
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	1ad3      	subs	r3, r2, r3
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b5ec:	2114      	movs	r1, #20
 800b5ee:	68b8      	ldr	r0, [r7, #8]
 800b5f0:	f7fa fb76 	bl	8005ce0 <pbuf_add_header>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d004      	beq.n	800b604 <tcp_create_segment+0xd8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b5fa:	6938      	ldr	r0, [r7, #16]
 800b5fc:	f7fc fc40 	bl	8007e80 <tcp_seg_free>
    return NULL;
 800b600:	2300      	movs	r3, #0
 800b602:	e037      	b.n	800b674 <tcp_create_segment+0x148>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	685a      	ldr	r2, [r3, #4]
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	691c      	ldr	r4, [r3, #16]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	8adb      	ldrh	r3, [r3, #22]
 800b616:	4618      	mov	r0, r3
 800b618:	f7f7 fe72 	bl	8003300 <lwip_htons>
 800b61c:	4603      	mov	r3, r0
 800b61e:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	691c      	ldr	r4, [r3, #16]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	8b1b      	ldrh	r3, [r3, #24]
 800b628:	4618      	mov	r0, r3
 800b62a:	f7f7 fe69 	bl	8003300 <lwip_htons>
 800b62e:	4603      	mov	r3, r0
 800b630:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	691c      	ldr	r4, [r3, #16]
 800b636:	6838      	ldr	r0, [r7, #0]
 800b638:	f7f7 fe77 	bl	800332a <lwip_htonl>
 800b63c:	4603      	mov	r3, r0
 800b63e:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	691c      	ldr	r4, [r3, #16]
 800b644:	7dfb      	ldrb	r3, [r7, #23]
 800b646:	089b      	lsrs	r3, r3, #2
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	3305      	adds	r3, #5
 800b64e:	b29b      	uxth	r3, r3
 800b650:	031b      	lsls	r3, r3, #12
 800b652:	b29a      	uxth	r2, r3
 800b654:	79fb      	ldrb	r3, [r7, #7]
 800b656:	b29b      	uxth	r3, r3
 800b658:	4313      	orrs	r3, r2
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7f7 fe4f 	bl	8003300 <lwip_htons>
 800b662:	4603      	mov	r3, r0
 800b664:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	691b      	ldr	r3, [r3, #16]
 800b66a:	2200      	movs	r2, #0
 800b66c:	749a      	strb	r2, [r3, #18]
 800b66e:	2200      	movs	r2, #0
 800b670:	74da      	strb	r2, [r3, #19]
  return seg;
 800b672:	693b      	ldr	r3, [r7, #16]
}
 800b674:	4618      	mov	r0, r3
 800b676:	371c      	adds	r7, #28
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd90      	pop	{r4, r7, pc}
 800b67c:	0801bb78 	.word	0x0801bb78
 800b680:	0801bb9c 	.word	0x0801bb9c
 800b684:	0801bbbc 	.word	0x0801bbbc
 800b688:	0801bbe4 	.word	0x0801bbe4
 800b68c:	0801bc08 	.word	0x0801bc08

0800b690 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af00      	add	r7, sp, #0
 800b696:	607b      	str	r3, [r7, #4]
 800b698:	4603      	mov	r3, r0
 800b69a:	73fb      	strb	r3, [r7, #15]
 800b69c:	460b      	mov	r3, r1
 800b69e:	81bb      	strh	r3, [r7, #12]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b6a4:	89bb      	ldrh	r3, [r7, #12]
 800b6a6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d10a      	bne.n	800b6c4 <tcp_pbuf_prealloc+0x34>
 800b6ae:	4b36      	ldr	r3, [pc, #216]	; (800b788 <tcp_pbuf_prealloc+0xf8>)
 800b6b0:	22eb      	movs	r2, #235	; 0xeb
 800b6b2:	4936      	ldr	r1, [pc, #216]	; (800b78c <tcp_pbuf_prealloc+0xfc>)
 800b6b4:	4836      	ldr	r0, [pc, #216]	; (800b790 <tcp_pbuf_prealloc+0x100>)
 800b6b6:	f00c fbbd 	bl	8017e34 <iprintf>
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	f00c fcbc 	bl	8018038 <fflush>
 800b6c0:	f00c fc01 	bl	8017ec6 <abort>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b6c4:	6a3b      	ldr	r3, [r7, #32]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d10a      	bne.n	800b6e0 <tcp_pbuf_prealloc+0x50>
 800b6ca:	4b2f      	ldr	r3, [pc, #188]	; (800b788 <tcp_pbuf_prealloc+0xf8>)
 800b6cc:	22ec      	movs	r2, #236	; 0xec
 800b6ce:	4931      	ldr	r1, [pc, #196]	; (800b794 <tcp_pbuf_prealloc+0x104>)
 800b6d0:	482f      	ldr	r0, [pc, #188]	; (800b790 <tcp_pbuf_prealloc+0x100>)
 800b6d2:	f00c fbaf 	bl	8017e34 <iprintf>
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	f00c fcae 	bl	8018038 <fflush>
 800b6dc:	f00c fbf3 	bl	8017ec6 <abort>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b6e0:	89ba      	ldrh	r2, [r7, #12]
 800b6e2:	897b      	ldrh	r3, [r7, #10]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d21f      	bcs.n	800b728 <tcp_pbuf_prealloc+0x98>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b6e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b6ec:	f003 0302 	and.w	r3, r3, #2
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d111      	bne.n	800b718 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b6f4:	6a3b      	ldr	r3, [r7, #32]
 800b6f6:	8b5b      	ldrh	r3, [r3, #26]
 800b6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d113      	bne.n	800b728 <tcp_pbuf_prealloc+0x98>
        (!(pcb->flags & TF_NODELAY) &&
 800b700:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b704:	2b00      	cmp	r3, #0
 800b706:	d007      	beq.n	800b718 <tcp_pbuf_prealloc+0x88>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b708:	6a3b      	ldr	r3, [r7, #32]
 800b70a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d103      	bne.n	800b718 <tcp_pbuf_prealloc+0x88>
          pcb->unacked != NULL))) {
 800b710:	6a3b      	ldr	r3, [r7, #32]
 800b712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800b714:	2b00      	cmp	r3, #0
 800b716:	d007      	beq.n	800b728 <tcp_pbuf_prealloc+0x98>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b718:	89bb      	ldrh	r3, [r7, #12]
 800b71a:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800b71e:	897b      	ldrh	r3, [r7, #10]
 800b720:	4293      	cmp	r3, r2
 800b722:	bf28      	it	cs
 800b724:	4613      	movcs	r3, r2
 800b726:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b728:	8af9      	ldrh	r1, [r7, #22]
 800b72a:	7bfb      	ldrb	r3, [r7, #15]
 800b72c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b730:	4618      	mov	r0, r3
 800b732:	f7fa f8cb 	bl	80058cc <pbuf_alloc>
 800b736:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d101      	bne.n	800b742 <tcp_pbuf_prealloc+0xb2>
    return NULL;
 800b73e:	2300      	movs	r3, #0
 800b740:	e01e      	b.n	800b780 <tcp_pbuf_prealloc+0xf0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00b      	beq.n	800b762 <tcp_pbuf_prealloc+0xd2>
 800b74a:	4b0f      	ldr	r3, [pc, #60]	; (800b788 <tcp_pbuf_prealloc+0xf8>)
 800b74c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800b750:	4911      	ldr	r1, [pc, #68]	; (800b798 <tcp_pbuf_prealloc+0x108>)
 800b752:	480f      	ldr	r0, [pc, #60]	; (800b790 <tcp_pbuf_prealloc+0x100>)
 800b754:	f00c fb6e 	bl	8017e34 <iprintf>
 800b758:	2000      	movs	r0, #0
 800b75a:	f00c fc6d 	bl	8018038 <fflush>
 800b75e:	f00c fbb2 	bl	8017ec6 <abort>
  *oversize = p->len - length;
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	895a      	ldrh	r2, [r3, #10]
 800b766:	89bb      	ldrh	r3, [r7, #12]
 800b768:	1ad3      	subs	r3, r2, r3
 800b76a:	b29a      	uxth	r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	89ba      	ldrh	r2, [r7, #12]
 800b774:	811a      	strh	r2, [r3, #8]
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	891a      	ldrh	r2, [r3, #8]
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	815a      	strh	r2, [r3, #10]
  return p;
 800b77e:	693b      	ldr	r3, [r7, #16]
}
 800b780:	4618      	mov	r0, r3
 800b782:	3718      	adds	r7, #24
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	0801bb78 	.word	0x0801bb78
 800b78c:	0801bc20 	.word	0x0801bc20
 800b790:	0801bbbc 	.word	0x0801bbbc
 800b794:	0801bc44 	.word	0x0801bc44
 800b798:	0801bc64 	.word	0x0801bc64

0800b79c <tcp_write_checks>:
 * @param len length of data to send (checked against snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d10b      	bne.n	800b7c6 <tcp_write_checks+0x2a>
 800b7ae:	4b3a      	ldr	r3, [pc, #232]	; (800b898 <tcp_write_checks+0xfc>)
 800b7b0:	f44f 729b 	mov.w	r2, #310	; 0x136
 800b7b4:	4939      	ldr	r1, [pc, #228]	; (800b89c <tcp_write_checks+0x100>)
 800b7b6:	483a      	ldr	r0, [pc, #232]	; (800b8a0 <tcp_write_checks+0x104>)
 800b7b8:	f00c fb3c 	bl	8017e34 <iprintf>
 800b7bc:	2000      	movs	r0, #0
 800b7be:	f00c fc3b 	bl	8018038 <fflush>
 800b7c2:	f00c fb80 	bl	8017ec6 <abort>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	7d1b      	ldrb	r3, [r3, #20]
 800b7ca:	2b04      	cmp	r3, #4
 800b7cc:	d00e      	beq.n	800b7ec <tcp_write_checks+0x50>
      (pcb->state != CLOSE_WAIT) &&
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b7d2:	2b07      	cmp	r3, #7
 800b7d4:	d00a      	beq.n	800b7ec <tcp_write_checks+0x50>
      (pcb->state != SYN_SENT) &&
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	d006      	beq.n	800b7ec <tcp_write_checks+0x50>
      (pcb->state != SYN_RCVD)) {
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b7e2:	2b03      	cmp	r3, #3
 800b7e4:	d002      	beq.n	800b7ec <tcp_write_checks+0x50>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b7e6:	f06f 030a 	mvn.w	r3, #10
 800b7ea:	e051      	b.n	800b890 <tcp_write_checks+0xf4>
  } else if (len == 0) {
 800b7ec:	887b      	ldrh	r3, [r7, #2]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d101      	bne.n	800b7f6 <tcp_write_checks+0x5a>
    return ERR_OK;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	e04c      	b.n	800b890 <tcp_write_checks+0xf4>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b7fc:	887a      	ldrh	r2, [r7, #2]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d909      	bls.n	800b816 <tcp_write_checks+0x7a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	8b5b      	ldrh	r3, [r3, #26]
 800b806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b810:	f04f 33ff 	mov.w	r3, #4294967295
 800b814:	e03c      	b.n	800b890 <tcp_write_checks+0xf4>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b81c:	2b07      	cmp	r3, #7
 800b81e:	d909      	bls.n	800b834 <tcp_write_checks+0x98>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	8b5b      	ldrh	r3, [r3, #26]
 800b824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b828:	b29a      	uxth	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b82e:	f04f 33ff 	mov.w	r3, #4294967295
 800b832:	e02d      	b.n	800b890 <tcp_write_checks+0xf4>
  }
  if (pcb->snd_queuelen != 0) {
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d013      	beq.n	800b866 <tcp_write_checks+0xca>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b842:	2b00      	cmp	r3, #0
 800b844:	d123      	bne.n	800b88e <tcp_write_checks+0xf2>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d11f      	bne.n	800b88e <tcp_write_checks+0xf2>
 800b84e:	4b12      	ldr	r3, [pc, #72]	; (800b898 <tcp_write_checks+0xfc>)
 800b850:	f240 1259 	movw	r2, #345	; 0x159
 800b854:	4913      	ldr	r1, [pc, #76]	; (800b8a4 <tcp_write_checks+0x108>)
 800b856:	4812      	ldr	r0, [pc, #72]	; (800b8a0 <tcp_write_checks+0x104>)
 800b858:	f00c faec 	bl	8017e34 <iprintf>
 800b85c:	2000      	movs	r0, #0
 800b85e:	f00c fbeb 	bl	8018038 <fflush>
 800b862:	f00c fb30 	bl	8017ec6 <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d103      	bne.n	800b876 <tcp_write_checks+0xda>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00b      	beq.n	800b88e <tcp_write_checks+0xf2>
 800b876:	4b08      	ldr	r3, [pc, #32]	; (800b898 <tcp_write_checks+0xfc>)
 800b878:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 800b87c:	490a      	ldr	r1, [pc, #40]	; (800b8a8 <tcp_write_checks+0x10c>)
 800b87e:	4808      	ldr	r0, [pc, #32]	; (800b8a0 <tcp_write_checks+0x104>)
 800b880:	f00c fad8 	bl	8017e34 <iprintf>
 800b884:	2000      	movs	r0, #0
 800b886:	f00c fbd7 	bl	8018038 <fflush>
 800b88a:	f00c fb1c 	bl	8017ec6 <abort>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	0801bb78 	.word	0x0801bb78
 800b89c:	0801bc78 	.word	0x0801bc78
 800b8a0:	0801bbbc 	.word	0x0801bbbc
 800b8a4:	0801bc98 	.word	0x0801bc98
 800b8a8:	0801bcd4 	.word	0x0801bcd4

0800b8ac <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b8ac:	b5b0      	push	{r4, r5, r7, lr}
 800b8ae:	b09a      	sub	sp, #104	; 0x68
 800b8b0:	af04      	add	r7, sp, #16
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	4611      	mov	r1, r2
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	80fb      	strh	r3, [r7, #6]
 800b8be:	4613      	mov	r3, r2
 800b8c0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	653b      	str	r3, [r7, #80]	; 0x50
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d109      	bne.n	800b90c <tcp_write+0x60>
 800b8f8:	4ba3      	ldr	r3, [pc, #652]	; (800bb88 <tcp_write+0x2dc>)
 800b8fa:	f240 12a1 	movw	r2, #417	; 0x1a1
 800b8fe:	49a3      	ldr	r1, [pc, #652]	; (800bb8c <tcp_write+0x2e0>)
 800b900:	48a3      	ldr	r0, [pc, #652]	; (800bb90 <tcp_write+0x2e4>)
 800b902:	f7f5 fcf6 	bl	80012f2 <lwip_win32_platform_diag>
 800b906:	f06f 030f 	mvn.w	r3, #15
 800b90a:	e3a8      	b.n	800c05e <tcp_write+0x7b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b912:	085b      	lsrs	r3, r3, #1
 800b914:	b29a      	uxth	r2, r3
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b91a:	4293      	cmp	r3, r2
 800b91c:	bf28      	it	cs
 800b91e:	4613      	movcs	r3, r2
 800b920:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b922:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b924:	2b00      	cmp	r3, #0
 800b926:	d102      	bne.n	800b92e <tcp_write+0x82>
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b92c:	e000      	b.n	800b930 <tcp_write+0x84>
 800b92e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b930:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d109      	bne.n	800b94c <tcp_write+0xa0>
 800b938:	4b93      	ldr	r3, [pc, #588]	; (800bb88 <tcp_write+0x2dc>)
 800b93a:	f240 12b1 	movw	r2, #433	; 0x1b1
 800b93e:	4995      	ldr	r1, [pc, #596]	; (800bb94 <tcp_write+0x2e8>)
 800b940:	4893      	ldr	r0, [pc, #588]	; (800bb90 <tcp_write+0x2e4>)
 800b942:	f7f5 fcd6 	bl	80012f2 <lwip_win32_platform_diag>
 800b946:	f06f 030f 	mvn.w	r3, #15
 800b94a:	e388      	b.n	800c05e <tcp_write+0x7b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b94c:	88fb      	ldrh	r3, [r7, #6]
 800b94e:	4619      	mov	r1, r3
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f7ff ff23 	bl	800b79c <tcp_write_checks>
 800b956:	4603      	mov	r3, r0
 800b958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800b95c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <tcp_write+0xbe>
    return err;
 800b964:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b968:	e379      	b.n	800c05e <tcp_write+0x7b2>
  }
  queuelen = pcb->snd_queuelen;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b970:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b974:	2300      	movs	r3, #0
 800b976:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b97e:	2b00      	cmp	r3, #0
 800b980:	f000 8136 	beq.w	800bbf0 <tcp_write+0x344>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b988:	653b      	str	r3, [r7, #80]	; 0x50
 800b98a:	e002      	b.n	800b992 <tcp_write+0xe6>
         last_unsent = last_unsent->next);
 800b98c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d1f8      	bne.n	800b98c <tcp_write+0xe0>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b99a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b99c:	7b1b      	ldrb	r3, [r3, #12]
 800b99e:	f003 0301 	and.w	r3, r3, #1
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d001      	beq.n	800b9aa <tcp_write+0xfe>
 800b9a6:	2304      	movs	r3, #4
 800b9a8:	e000      	b.n	800b9ac <tcp_write+0x100>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b9ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b9b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9b2:	891b      	ldrh	r3, [r3, #8]
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	8c3b      	ldrh	r3, [r7, #32]
 800b9b8:	440b      	add	r3, r1
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	da0b      	bge.n	800b9d6 <tcp_write+0x12a>
 800b9be:	4b72      	ldr	r3, [pc, #456]	; (800bb88 <tcp_write+0x2dc>)
 800b9c0:	f240 12e9 	movw	r2, #489	; 0x1e9
 800b9c4:	4974      	ldr	r1, [pc, #464]	; (800bb98 <tcp_write+0x2ec>)
 800b9c6:	4872      	ldr	r0, [pc, #456]	; (800bb90 <tcp_write+0x2e4>)
 800b9c8:	f00c fa34 	bl	8017e34 <iprintf>
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	f00c fb33 	bl	8018038 <fflush>
 800b9d2:	f00c fa78 	bl	8017ec6 <abort>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b9d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9d8:	891a      	ldrh	r2, [r3, #8]
 800b9da:	8c3b      	ldrh	r3, [r7, #32]
 800b9dc:	4413      	add	r3, r2
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b9e2:	1ad3      	subs	r3, r2, r3
 800b9e4:	873b      	strh	r3, [r7, #56]	; 0x38
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800b9ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ee:	895b      	ldrh	r3, [r3, #10]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d00b      	beq.n	800ba0c <tcp_write+0x160>
 800b9f4:	4b64      	ldr	r3, [pc, #400]	; (800bb88 <tcp_write+0x2dc>)
 800b9f6:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b9fa:	4968      	ldr	r1, [pc, #416]	; (800bb9c <tcp_write+0x2f0>)
 800b9fc:	4864      	ldr	r0, [pc, #400]	; (800bb90 <tcp_write+0x2e4>)
 800b9fe:	f00c fa19 	bl	8017e34 <iprintf>
 800ba02:	2000      	movs	r0, #0
 800ba04:	f00c fb18 	bl	8018038 <fflush>
 800ba08:	f00c fa5d 	bl	8017ec6 <abort>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ba12:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800ba14:	8a7b      	ldrh	r3, [r7, #18]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d02c      	beq.n	800ba74 <tcp_write+0x1c8>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ba1a:	8a7b      	ldrh	r3, [r7, #18]
 800ba1c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d20b      	bcs.n	800ba3a <tcp_write+0x18e>
 800ba22:	4b59      	ldr	r3, [pc, #356]	; (800bb88 <tcp_write+0x2dc>)
 800ba24:	f240 12fb 	movw	r2, #507	; 0x1fb
 800ba28:	495d      	ldr	r1, [pc, #372]	; (800bba0 <tcp_write+0x2f4>)
 800ba2a:	4859      	ldr	r0, [pc, #356]	; (800bb90 <tcp_write+0x2e4>)
 800ba2c:	f00c fa02 	bl	8017e34 <iprintf>
 800ba30:	2000      	movs	r0, #0
 800ba32:	f00c fb01 	bl	8018038 <fflush>
 800ba36:	f00c fa46 	bl	8017ec6 <abort>
      seg = last_unsent;
 800ba3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba3c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800ba3e:	8a7b      	ldrh	r3, [r7, #18]
 800ba40:	88fa      	ldrh	r2, [r7, #6]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d901      	bls.n	800ba4a <tcp_write+0x19e>
 800ba46:	8a7b      	ldrh	r3, [r7, #18]
 800ba48:	e000      	b.n	800ba4c <tcp_write+0x1a0>
 800ba4a:	88fb      	ldrh	r3, [r7, #6]
 800ba4c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	bfa8      	it	ge
 800ba52:	4613      	movge	r3, r2
 800ba54:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800ba56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ba5a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ba5c:	4413      	add	r3, r2
 800ba5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800ba62:	8a7a      	ldrh	r2, [r7, #18]
 800ba64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ba66:	1ad3      	subs	r3, r2, r3
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800ba6c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ba6e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800ba74:	8a7b      	ldrh	r3, [r7, #18]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d010      	beq.n	800ba9c <tcp_write+0x1f0>
 800ba7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ba7e:	88fb      	ldrh	r3, [r7, #6]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d00b      	beq.n	800ba9c <tcp_write+0x1f0>
 800ba84:	4b40      	ldr	r3, [pc, #256]	; (800bb88 <tcp_write+0x2dc>)
 800ba86:	f240 2203 	movw	r2, #515	; 0x203
 800ba8a:	4946      	ldr	r1, [pc, #280]	; (800bba4 <tcp_write+0x2f8>)
 800ba8c:	4840      	ldr	r0, [pc, #256]	; (800bb90 <tcp_write+0x2e4>)
 800ba8e:	f00c f9d1 	bl	8017e34 <iprintf>
 800ba92:	2000      	movs	r0, #0
 800ba94:	f00c fad0 	bl	8018038 <fflush>
 800ba98:	f00c fa15 	bl	8017ec6 <abort>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ba9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800baa0:	88fb      	ldrh	r3, [r7, #6]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	f080 8185 	bcs.w	800bdb2 <tcp_write+0x506>
 800baa8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f000 8181 	beq.w	800bdb2 <tcp_write+0x506>
 800bab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bab2:	891b      	ldrh	r3, [r3, #8]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f000 817c 	beq.w	800bdb2 <tcp_write+0x506>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800baba:	88fa      	ldrh	r2, [r7, #6]
 800babc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bac0:	1ad2      	subs	r2, r2, r3
 800bac2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bac4:	4293      	cmp	r3, r2
 800bac6:	bfa8      	it	ge
 800bac8:	4613      	movge	r3, r2
 800baca:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800bacc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bace:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bad0:	797b      	ldrb	r3, [r7, #5]
 800bad2:	f003 0301 	and.w	r3, r3, #1
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d029      	beq.n	800bb2e <tcp_write+0x282>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800bada:	f107 0012 	add.w	r0, r7, #18
 800bade:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800bae0:	8bf9      	ldrh	r1, [r7, #30]
 800bae2:	2301      	movs	r3, #1
 800bae4:	9302      	str	r3, [sp, #8]
 800bae6:	797b      	ldrb	r3, [r7, #5]
 800bae8:	9301      	str	r3, [sp, #4]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	9300      	str	r3, [sp, #0]
 800baee:	4603      	mov	r3, r0
 800baf0:	2000      	movs	r0, #0
 800baf2:	f7ff fdcd 	bl	800b690 <tcp_pbuf_prealloc>
 800baf6:	6578      	str	r0, [r7, #84]	; 0x54
 800baf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	f000 8278 	beq.w	800bff0 <tcp_write+0x744>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 800bb00:	8a7b      	ldrh	r3, [r7, #18]
 800bb02:	87bb      	strh	r3, [r7, #60]	; 0x3c
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800bb04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb06:	6858      	ldr	r0, [r3, #4]
 800bb08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bb0c:	68ba      	ldr	r2, [r7, #8]
 800bb0e:	4413      	add	r3, r2
 800bb10:	8bfa      	ldrh	r2, [r7, #30]
 800bb12:	4619      	mov	r1, r3
 800bb14:	f00c fbb0 	bl	8018278 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800bb18:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bb1a:	f7fa fa1d 	bl	8005f58 <pbuf_clen>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	461a      	mov	r2, r3
 800bb22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bb26:	4413      	add	r3, r2
 800bb28:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800bb2c:	e059      	b.n	800bbe2 <tcp_write+0x336>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800bb2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	637b      	str	r3, [r7, #52]	; 0x34
 800bb34:	e002      	b.n	800bb3c <tcp_write+0x290>
 800bb36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	637b      	str	r3, [r7, #52]	; 0x34
 800bb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d1f8      	bne.n	800bb36 <tcp_write+0x28a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bb44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb46:	7b1b      	ldrb	r3, [r3, #12]
 800bb48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d12d      	bne.n	800bbac <tcp_write+0x300>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800bb50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb56:	8952      	ldrh	r2, [r2, #10]
 800bb58:	441a      	add	r2, r3
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d125      	bne.n	800bbac <tcp_write+0x300>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800bb60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00b      	beq.n	800bb80 <tcp_write+0x2d4>
 800bb68:	4b07      	ldr	r3, [pc, #28]	; (800bb88 <tcp_write+0x2dc>)
 800bb6a:	f44f 720d 	mov.w	r2, #564	; 0x234
 800bb6e:	490e      	ldr	r1, [pc, #56]	; (800bba8 <tcp_write+0x2fc>)
 800bb70:	4807      	ldr	r0, [pc, #28]	; (800bb90 <tcp_write+0x2e4>)
 800bb72:	f00c f95f 	bl	8017e34 <iprintf>
 800bb76:	2000      	movs	r0, #0
 800bb78:	f00c fa5e 	bl	8018038 <fflush>
 800bb7c:	f00c f9a3 	bl	8017ec6 <abort>
          extendlen = seglen;
 800bb80:	8bfb      	ldrh	r3, [r7, #30]
 800bb82:	877b      	strh	r3, [r7, #58]	; 0x3a
 800bb84:	e02d      	b.n	800bbe2 <tcp_write+0x336>
 800bb86:	bf00      	nop
 800bb88:	0801bb78 	.word	0x0801bb78
 800bb8c:	0801bd08 	.word	0x0801bd08
 800bb90:	0801bbbc 	.word	0x0801bbbc
 800bb94:	0801bd20 	.word	0x0801bd20
 800bb98:	0801bd54 	.word	0x0801bd54
 800bb9c:	0801bd6c 	.word	0x0801bd6c
 800bba0:	0801bd9c 	.word	0x0801bd9c
 800bba4:	0801bdbc 	.word	0x0801bdbc
 800bba8:	0801bddc 	.word	0x0801bddc
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800bbac:	8bfb      	ldrh	r3, [r7, #30]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	f7f9 fe8a 	bl	80058cc <pbuf_alloc>
 800bbb8:	6578      	str	r0, [r7, #84]	; 0x54
 800bbba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 8219 	beq.w	800bff4 <tcp_write+0x748>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800bbc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bbc6:	68ba      	ldr	r2, [r7, #8]
 800bbc8:	441a      	add	r2, r3
 800bbca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbcc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800bbce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bbd0:	f7fa f9c2 	bl	8005f58 <pbuf_clen>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bbdc:	4413      	add	r3, r2
 800bbde:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800bbe2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bbe6:	8bfb      	ldrh	r3, [r7, #30]
 800bbe8:	4413      	add	r3, r2
 800bbea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bbee:	e0e0      	b.n	800bdb2 <tcp_write+0x506>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	f000 80db 	beq.w	800bdb2 <tcp_write+0x506>
 800bbfc:	4ba5      	ldr	r3, [pc, #660]	; (800be94 <tcp_write+0x5e8>)
 800bbfe:	f240 224e 	movw	r2, #590	; 0x24e
 800bc02:	49a5      	ldr	r1, [pc, #660]	; (800be98 <tcp_write+0x5ec>)
 800bc04:	48a5      	ldr	r0, [pc, #660]	; (800be9c <tcp_write+0x5f0>)
 800bc06:	f00c f915 	bl	8017e34 <iprintf>
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	f00c fa14 	bl	8018038 <fflush>
 800bc10:	f00c f959 	bl	8017ec6 <abort>
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
    struct pbuf *p;
    u16_t left = len - pos;
 800bc14:	88fa      	ldrh	r2, [r7, #6]
 800bc16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800bc1e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800bc2a:	8b7a      	ldrh	r2, [r7, #26]
 800bc2c:	8bbb      	ldrh	r3, [r7, #28]
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	bf28      	it	cs
 800bc32:	4613      	movcs	r3, r2
 800bc34:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bc36:	797b      	ldrb	r3, [r7, #5]
 800bc38:	f003 0301 	and.w	r3, r3, #1
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d03b      	beq.n	800bcb8 <tcp_write+0x40c>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800bc40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	8b3b      	ldrh	r3, [r7, #24]
 800bc48:	4413      	add	r3, r2
 800bc4a:	b299      	uxth	r1, r3
 800bc4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	bf0c      	ite	eq
 800bc52:	2301      	moveq	r3, #1
 800bc54:	2300      	movne	r3, #0
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	f107 0012 	add.w	r0, r7, #18
 800bc5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bc5e:	9302      	str	r3, [sp, #8]
 800bc60:	797b      	ldrb	r3, [r7, #5]
 800bc62:	9301      	str	r3, [sp, #4]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	4603      	mov	r3, r0
 800bc6a:	2036      	movs	r0, #54	; 0x36
 800bc6c:	f7ff fd10 	bl	800b690 <tcp_pbuf_prealloc>
 800bc70:	6338      	str	r0, [r7, #48]	; 0x30
 800bc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f000 81bf 	beq.w	800bff8 <tcp_write+0x74c>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7c:	895b      	ldrh	r3, [r3, #10]
 800bc7e:	8b3a      	ldrh	r2, [r7, #24]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d90b      	bls.n	800bc9c <tcp_write+0x3f0>
 800bc84:	4b83      	ldr	r3, [pc, #524]	; (800be94 <tcp_write+0x5e8>)
 800bc86:	f240 226a 	movw	r2, #618	; 0x26a
 800bc8a:	4985      	ldr	r1, [pc, #532]	; (800bea0 <tcp_write+0x5f4>)
 800bc8c:	4883      	ldr	r0, [pc, #524]	; (800be9c <tcp_write+0x5f0>)
 800bc8e:	f00c f8d1 	bl	8017e34 <iprintf>
 800bc92:	2000      	movs	r0, #0
 800bc94:	f00c f9d0 	bl	8018038 <fflush>
 800bc98:	f00c f915 	bl	8017ec6 <abort>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9e:	685a      	ldr	r2, [r3, #4]
 800bca0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bca4:	18d0      	adds	r0, r2, r3
 800bca6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bcaa:	68ba      	ldr	r2, [r7, #8]
 800bcac:	4413      	add	r3, r2
 800bcae:	8b3a      	ldrh	r2, [r7, #24]
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	f00c fae1 	bl	8018278 <memcpy>
 800bcb6:	e034      	b.n	800bd22 <tcp_write+0x476>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800bcb8:	8a7b      	ldrh	r3, [r7, #18]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00b      	beq.n	800bcd6 <tcp_write+0x42a>
 800bcbe:	4b75      	ldr	r3, [pc, #468]	; (800be94 <tcp_write+0x5e8>)
 800bcc0:	f44f 721d 	mov.w	r2, #628	; 0x274
 800bcc4:	4977      	ldr	r1, [pc, #476]	; (800bea4 <tcp_write+0x5f8>)
 800bcc6:	4875      	ldr	r0, [pc, #468]	; (800be9c <tcp_write+0x5f0>)
 800bcc8:	f00c f8b4 	bl	8017e34 <iprintf>
 800bccc:	2000      	movs	r0, #0
 800bcce:	f00c f9b3 	bl	8018038 <fflush>
 800bcd2:	f00c f8f8 	bl	8017ec6 <abort>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800bcd6:	8b3b      	ldrh	r3, [r7, #24]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	4619      	mov	r1, r3
 800bcdc:	2036      	movs	r0, #54	; 0x36
 800bcde:	f7f9 fdf5 	bl	80058cc <pbuf_alloc>
 800bce2:	6178      	str	r0, [r7, #20]
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	f000 8188 	beq.w	800bffc <tcp_write+0x750>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800bcec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bcf0:	68ba      	ldr	r2, [r7, #8]
 800bcf2:	441a      	add	r2, r3
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bcf8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bd02:	4619      	mov	r1, r3
 800bd04:	2036      	movs	r0, #54	; 0x36
 800bd06:	f7f9 fde1 	bl	80058cc <pbuf_alloc>
 800bd0a:	6338      	str	r0, [r7, #48]	; 0x30
 800bd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d103      	bne.n	800bd1a <tcp_write+0x46e>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800bd12:	6978      	ldr	r0, [r7, #20]
 800bd14:	f7fa f87e 	bl	8005e14 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800bd18:	e173      	b.n	800c002 <tcp_write+0x756>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800bd1a:	6979      	ldr	r1, [r7, #20]
 800bd1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd1e:	f7fa f961 	bl	8005fe4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800bd22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd24:	f7fa f918 	bl	8005f58 <pbuf_clen>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bd30:	4413      	add	r3, r2
 800bd32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800bd36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bd3a:	2b08      	cmp	r3, #8
 800bd3c:	d903      	bls.n	800bd46 <tcp_write+0x49a>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800bd3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd40:	f7fa f868 	bl	8005e14 <pbuf_free>
      goto memerr;
 800bd44:	e15d      	b.n	800c002 <tcp_write+0x756>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bd4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd4e:	441a      	add	r2, r3
 800bd50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	4613      	mov	r3, r2
 800bd58:	2200      	movs	r2, #0
 800bd5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f7ff fbe5 	bl	800b52c <tcp_create_segment>
 800bd62:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bd64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	f000 814a 	beq.w	800c000 <tcp_write+0x754>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 800bd6c:	8a7a      	ldrh	r2, [r7, #18]
 800bd6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd70:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800bd72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d102      	bne.n	800bd7e <tcp_write+0x4d2>
      queue = seg;
 800bd78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd7a:	647b      	str	r3, [r7, #68]	; 0x44
 800bd7c:	e011      	b.n	800bda2 <tcp_write+0x4f6>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800bd7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d10b      	bne.n	800bd9c <tcp_write+0x4f0>
 800bd84:	4b43      	ldr	r3, [pc, #268]	; (800be94 <tcp_write+0x5e8>)
 800bd86:	f240 22ae 	movw	r2, #686	; 0x2ae
 800bd8a:	4947      	ldr	r1, [pc, #284]	; (800bea8 <tcp_write+0x5fc>)
 800bd8c:	4843      	ldr	r0, [pc, #268]	; (800be9c <tcp_write+0x5f0>)
 800bd8e:	f00c f851 	bl	8017e34 <iprintf>
 800bd92:	2000      	movs	r0, #0
 800bd94:	f00c f950 	bl	8018038 <fflush>
 800bd98:	f00c f895 	bl	8017ec6 <abort>
      prev_seg->next = seg;
 800bd9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bda0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800bda2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bda4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800bda6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bdaa:	8b3b      	ldrh	r3, [r7, #24]
 800bdac:	4413      	add	r3, r2
 800bdae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800bdb2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bdb6:	88fb      	ldrh	r3, [r7, #6]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	f4ff af2b 	bcc.w	800bc14 <tcp_write+0x368>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 800bdbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d009      	beq.n	800bdd8 <tcp_write+0x52c>
 800bdc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d006      	beq.n	800bdd8 <tcp_write+0x52c>
    last_unsent->oversize_left += oversize_add;
 800bdca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdcc:	895a      	ldrh	r2, [r3, #10]
 800bdce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bdd0:	4413      	add	r3, r2
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdd6:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800bdd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d044      	beq.n	800be68 <tcp_write+0x5bc>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800bdde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bde4:	e01e      	b.n	800be24 <tcp_write+0x578>
      p->tot_len += oversize_used;
 800bde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde8:	891a      	ldrh	r2, [r3, #8]
 800bdea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bdec:	4413      	add	r3, r2
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf2:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800bdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d110      	bne.n	800be1e <tcp_write+0x572>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800bdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be02:	8952      	ldrh	r2, [r2, #10]
 800be04:	4413      	add	r3, r2
 800be06:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800be08:	68b9      	ldr	r1, [r7, #8]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f00c fa34 	bl	8018278 <memcpy>
        p->len += oversize_used;
 800be10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be12:	895a      	ldrh	r2, [r3, #10]
 800be14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800be16:	4413      	add	r3, r2
 800be18:	b29a      	uxth	r2, r3
 800be1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1c:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800be1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1dd      	bne.n	800bde6 <tcp_write+0x53a>
      }
    }
    last_unsent->len += oversize_used;
 800be2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be2c:	891a      	ldrh	r2, [r3, #8]
 800be2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800be30:	4413      	add	r3, r2
 800be32:	b29a      	uxth	r2, r3
 800be34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be36:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 800be38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be3a:	895b      	ldrh	r3, [r3, #10]
 800be3c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800be3e:	429a      	cmp	r2, r3
 800be40:	d90b      	bls.n	800be5a <tcp_write+0x5ae>
 800be42:	4b14      	ldr	r3, [pc, #80]	; (800be94 <tcp_write+0x5e8>)
 800be44:	f240 22d7 	movw	r2, #727	; 0x2d7
 800be48:	4918      	ldr	r1, [pc, #96]	; (800beac <tcp_write+0x600>)
 800be4a:	4814      	ldr	r0, [pc, #80]	; (800be9c <tcp_write+0x5f0>)
 800be4c:	f00b fff2 	bl	8017e34 <iprintf>
 800be50:	2000      	movs	r0, #0
 800be52:	f00c f8f1 	bl	8018038 <fflush>
 800be56:	f00c f836 	bl	8017ec6 <abort>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 800be5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be5c:	895a      	ldrh	r2, [r3, #10]
 800be5e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	b29a      	uxth	r2, r3
 800be64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be66:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800be68:	8a7a      	ldrh	r2, [r7, #18]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800be70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be72:	2b00      	cmp	r3, #0
 800be74:	d02d      	beq.n	800bed2 <tcp_write+0x626>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800be76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d11b      	bne.n	800beb4 <tcp_write+0x608>
 800be7c:	4b05      	ldr	r3, [pc, #20]	; (800be94 <tcp_write+0x5e8>)
 800be7e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800be82:	490b      	ldr	r1, [pc, #44]	; (800beb0 <tcp_write+0x604>)
 800be84:	4805      	ldr	r0, [pc, #20]	; (800be9c <tcp_write+0x5f0>)
 800be86:	f00b ffd5 	bl	8017e34 <iprintf>
 800be8a:	2000      	movs	r0, #0
 800be8c:	f00c f8d4 	bl	8018038 <fflush>
 800be90:	f00c f819 	bl	8017ec6 <abort>
 800be94:	0801bb78 	.word	0x0801bb78
 800be98:	0801be08 	.word	0x0801be08
 800be9c:	0801bbbc 	.word	0x0801bbbc
 800bea0:	0801be38 	.word	0x0801be38
 800bea4:	0801be78 	.word	0x0801be78
 800bea8:	0801be88 	.word	0x0801be88
 800beac:	0801be9c 	.word	0x0801be9c
 800beb0:	0801bec8 	.word	0x0801bec8
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800beb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800beba:	4618      	mov	r0, r3
 800bebc:	f7fa f892 	bl	8005fe4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800bec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bec2:	891a      	ldrh	r2, [r3, #8]
 800bec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bec6:	891b      	ldrh	r3, [r3, #8]
 800bec8:	4413      	add	r3, r2
 800beca:	b29a      	uxth	r2, r3
 800becc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bece:	811a      	strh	r2, [r3, #8]
 800bed0:	e03c      	b.n	800bf4c <tcp_write+0x6a0>
  } else if (extendlen > 0) {
 800bed2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d039      	beq.n	800bf4c <tcp_write+0x6a0>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800bed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d003      	beq.n	800bee6 <tcp_write+0x63a>
 800bede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10b      	bne.n	800befe <tcp_write+0x652>
 800bee6:	4b60      	ldr	r3, [pc, #384]	; (800c068 <tcp_write+0x7bc>)
 800bee8:	f240 22ea 	movw	r2, #746	; 0x2ea
 800beec:	495f      	ldr	r1, [pc, #380]	; (800c06c <tcp_write+0x7c0>)
 800beee:	4860      	ldr	r0, [pc, #384]	; (800c070 <tcp_write+0x7c4>)
 800bef0:	f00b ffa0 	bl	8017e34 <iprintf>
 800bef4:	2000      	movs	r0, #0
 800bef6:	f00c f89f 	bl	8018038 <fflush>
 800befa:	f00b ffe4 	bl	8017ec6 <abort>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800befe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf04:	e009      	b.n	800bf1a <tcp_write+0x66e>
      p->tot_len += extendlen;
 800bf06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf08:	891a      	ldrh	r2, [r3, #8]
 800bf0a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bf0c:	4413      	add	r3, r2
 800bf0e:	b29a      	uxth	r2, r3
 800bf10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf12:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bf14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d1f1      	bne.n	800bf06 <tcp_write+0x65a>
    }
    p->tot_len += extendlen;
 800bf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf24:	891a      	ldrh	r2, [r3, #8]
 800bf26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bf28:	4413      	add	r3, r2
 800bf2a:	b29a      	uxth	r2, r3
 800bf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2e:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800bf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf32:	895a      	ldrh	r2, [r3, #10]
 800bf34:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bf36:	4413      	add	r3, r2
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800bf3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf40:	891a      	ldrh	r2, [r3, #8]
 800bf42:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bf44:	4413      	add	r3, r2
 800bf46:	b29a      	uxth	r2, r3
 800bf48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf4a:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800bf4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d103      	bne.n	800bf5a <tcp_write+0x6ae>
    pcb->unsent = queue;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf56:	66da      	str	r2, [r3, #108]	; 0x6c
 800bf58:	e002      	b.n	800bf60 <tcp_write+0x6b4>
  } else {
    last_unsent->next = queue;
 800bf5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf5e:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bf64:	88fb      	ldrh	r3, [r7, #6]
 800bf66:	441a      	add	r2, r3
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800bf72:	88fb      	ldrh	r3, [r7, #6]
 800bf74:	1ad3      	subs	r3, r2, r3
 800bf76:	b29a      	uxth	r2, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800bf84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d013      	beq.n	800bfba <tcp_write+0x70e>
    LWIP_ASSERT("tcp_write: valid queue length",
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d10f      	bne.n	800bfba <tcp_write+0x70e>
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d10b      	bne.n	800bfba <tcp_write+0x70e>
 800bfa2:	4b31      	ldr	r3, [pc, #196]	; (800c068 <tcp_write+0x7bc>)
 800bfa4:	f240 3216 	movw	r2, #790	; 0x316
 800bfa8:	4932      	ldr	r1, [pc, #200]	; (800c074 <tcp_write+0x7c8>)
 800bfaa:	4831      	ldr	r0, [pc, #196]	; (800c070 <tcp_write+0x7c4>)
 800bfac:	f00b ff42 	bl	8017e34 <iprintf>
 800bfb0:	2000      	movs	r0, #0
 800bfb2:	f00c f841 	bl	8018038 <fflush>
 800bfb6:	f00b ff86 	bl	8017ec6 <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800bfba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d015      	beq.n	800bfec <tcp_write+0x740>
 800bfc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d011      	beq.n	800bfec <tcp_write+0x740>
 800bfc8:	797b      	ldrb	r3, [r7, #5]
 800bfca:	f003 0302 	and.w	r3, r3, #2
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d10c      	bne.n	800bfec <tcp_write+0x740>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800bfd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfd4:	691c      	ldr	r4, [r3, #16]
 800bfd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfd8:	691b      	ldr	r3, [r3, #16]
 800bfda:	899b      	ldrh	r3, [r3, #12]
 800bfdc:	b29d      	uxth	r5, r3
 800bfde:	2008      	movs	r0, #8
 800bfe0:	f7f7 f98e 	bl	8003300 <lwip_htons>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	432b      	orrs	r3, r5
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 800bfec:	2300      	movs	r3, #0
 800bfee:	e036      	b.n	800c05e <tcp_write+0x7b2>
          goto memerr;
 800bff0:	bf00      	nop
 800bff2:	e006      	b.n	800c002 <tcp_write+0x756>
            goto memerr;
 800bff4:	bf00      	nop
 800bff6:	e004      	b.n	800c002 <tcp_write+0x756>
        goto memerr;
 800bff8:	bf00      	nop
 800bffa:	e002      	b.n	800c002 <tcp_write+0x756>
        goto memerr;
 800bffc:	bf00      	nop
 800bffe:	e000      	b.n	800c002 <tcp_write+0x756>
      goto memerr;
 800c000:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	8b5b      	ldrh	r3, [r3, #26]
 800c006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c00a:	b29a      	uxth	r2, r3
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c012:	2b00      	cmp	r3, #0
 800c014:	d002      	beq.n	800c01c <tcp_write+0x770>
    pbuf_free(concat_p);
 800c016:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c018:	f7f9 fefc 	bl	8005e14 <pbuf_free>
  }
  if (queue != NULL) {
 800c01c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d002      	beq.n	800c028 <tcp_write+0x77c>
    tcp_segs_free(queue);
 800c022:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c024:	f7fb ff18 	bl	8007e58 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d013      	beq.n	800c05a <tcp_write+0x7ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c036:	2b00      	cmp	r3, #0
 800c038:	d10f      	bne.n	800c05a <tcp_write+0x7ae>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d10b      	bne.n	800c05a <tcp_write+0x7ae>
 800c042:	4b09      	ldr	r3, [pc, #36]	; (800c068 <tcp_write+0x7bc>)
 800c044:	f240 322b 	movw	r2, #811	; 0x32b
 800c048:	490a      	ldr	r1, [pc, #40]	; (800c074 <tcp_write+0x7c8>)
 800c04a:	4809      	ldr	r0, [pc, #36]	; (800c070 <tcp_write+0x7c4>)
 800c04c:	f00b fef2 	bl	8017e34 <iprintf>
 800c050:	2000      	movs	r0, #0
 800c052:	f00b fff1 	bl	8018038 <fflush>
 800c056:	f00b ff36 	bl	8017ec6 <abort>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800c05a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3758      	adds	r7, #88	; 0x58
 800c062:	46bd      	mov	sp, r7
 800c064:	bdb0      	pop	{r4, r5, r7, pc}
 800c066:	bf00      	nop
 800c068:	0801bb78 	.word	0x0801bb78
 800c06c:	0801bf00 	.word	0x0801bf00
 800c070:	0801bbbc 	.word	0x0801bbbc
 800c074:	0801bf38 	.word	0x0801bf38

0800c078 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c078:	b5b0      	push	{r4, r5, r7, lr}
 800c07a:	b08a      	sub	sp, #40	; 0x28
 800c07c:	af02      	add	r7, sp, #8
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c084:	2300      	movs	r3, #0
 800c086:	61fb      	str	r3, [r7, #28]
 800c088:	2300      	movs	r3, #0
 800c08a:	613b      	str	r3, [r7, #16]
  struct pbuf *p = NULL;
 800c08c:	2300      	movs	r3, #0
 800c08e:	61bb      	str	r3, [r7, #24]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10b      	bne.n	800c0ae <tcp_split_unsent_seg+0x36>
 800c096:	4ba3      	ldr	r3, [pc, #652]	; (800c324 <tcp_split_unsent_seg+0x2ac>)
 800c098:	f240 324e 	movw	r2, #846	; 0x34e
 800c09c:	49a2      	ldr	r1, [pc, #648]	; (800c328 <tcp_split_unsent_seg+0x2b0>)
 800c09e:	48a3      	ldr	r0, [pc, #652]	; (800c32c <tcp_split_unsent_seg+0x2b4>)
 800c0a0:	f00b fec8 	bl	8017e34 <iprintf>
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	f00b ffc7 	bl	8018038 <fflush>
 800c0aa:	f00b ff0c 	bl	8017ec6 <abort>

  useg = pcb->unsent;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0b2:	613b      	str	r3, [r7, #16]
  if (useg == NULL) {
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d102      	bne.n	800c0c0 <tcp_split_unsent_seg+0x48>
    return ERR_MEM;
 800c0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c0be:	e12d      	b.n	800c31c <tcp_split_unsent_seg+0x2a4>
  }

  if (split == 0) {
 800c0c0:	887b      	ldrh	r3, [r7, #2]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d10b      	bne.n	800c0de <tcp_split_unsent_seg+0x66>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c0c6:	4b97      	ldr	r3, [pc, #604]	; (800c324 <tcp_split_unsent_seg+0x2ac>)
 800c0c8:	f240 3256 	movw	r2, #854	; 0x356
 800c0cc:	4998      	ldr	r1, [pc, #608]	; (800c330 <tcp_split_unsent_seg+0x2b8>)
 800c0ce:	4897      	ldr	r0, [pc, #604]	; (800c32c <tcp_split_unsent_seg+0x2b4>)
 800c0d0:	f00b feb0 	bl	8017e34 <iprintf>
 800c0d4:	2000      	movs	r0, #0
 800c0d6:	f00b ffaf 	bl	8018038 <fflush>
 800c0da:	f00b fef4 	bl	8017ec6 <abort>
    return ERR_VAL;
  }

  if (useg->len <= split) {
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	891b      	ldrh	r3, [r3, #8]
 800c0e2:	887a      	ldrh	r2, [r7, #2]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d301      	bcc.n	800c0ec <tcp_split_unsent_seg+0x74>
    return ERR_OK;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	e117      	b.n	800c31c <tcp_split_unsent_seg+0x2a4>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0f0:	887a      	ldrh	r2, [r7, #2]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d90b      	bls.n	800c10e <tcp_split_unsent_seg+0x96>
 800c0f6:	4b8b      	ldr	r3, [pc, #556]	; (800c324 <tcp_split_unsent_seg+0x2ac>)
 800c0f8:	f240 325e 	movw	r2, #862	; 0x35e
 800c0fc:	498d      	ldr	r1, [pc, #564]	; (800c334 <tcp_split_unsent_seg+0x2bc>)
 800c0fe:	488b      	ldr	r0, [pc, #556]	; (800c32c <tcp_split_unsent_seg+0x2b4>)
 800c100:	f00b fe98 	bl	8017e34 <iprintf>
 800c104:	2000      	movs	r0, #0
 800c106:	f00b ff97 	bl	8018038 <fflush>
 800c10a:	f00b fedc 	bl	8017ec6 <abort>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	891b      	ldrh	r3, [r3, #8]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d10b      	bne.n	800c12e <tcp_split_unsent_seg+0xb6>
 800c116:	4b83      	ldr	r3, [pc, #524]	; (800c324 <tcp_split_unsent_seg+0x2ac>)
 800c118:	f240 325f 	movw	r2, #863	; 0x35f
 800c11c:	4986      	ldr	r1, [pc, #536]	; (800c338 <tcp_split_unsent_seg+0x2c0>)
 800c11e:	4883      	ldr	r0, [pc, #524]	; (800c32c <tcp_split_unsent_seg+0x2b4>)
 800c120:	f00b fe88 	bl	8017e34 <iprintf>
 800c124:	2000      	movs	r0, #0
 800c126:	f00b ff87 	bl	8018038 <fflush>
 800c12a:	f00b fecc 	bl	8017ec6 <abort>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	7b1b      	ldrb	r3, [r3, #12]
 800c132:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c134:	7bfb      	ldrb	r3, [r7, #15]
 800c136:	f003 0301 	and.w	r3, r3, #1
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d001      	beq.n	800c142 <tcp_split_unsent_seg+0xca>
 800c13e:	2304      	movs	r3, #4
 800c140:	e000      	b.n	800c144 <tcp_split_unsent_seg+0xcc>
 800c142:	2300      	movs	r3, #0
 800c144:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	891a      	ldrh	r2, [r3, #8]
 800c14a:	887b      	ldrh	r3, [r7, #2]
 800c14c:	1ad3      	subs	r3, r2, r3
 800c14e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c150:	7bbb      	ldrb	r3, [r7, #14]
 800c152:	b29a      	uxth	r2, r3
 800c154:	89bb      	ldrh	r3, [r7, #12]
 800c156:	4413      	add	r3, r2
 800c158:	b29b      	uxth	r3, r3
 800c15a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c15e:	4619      	mov	r1, r3
 800c160:	2036      	movs	r0, #54	; 0x36
 800c162:	f7f9 fbb3 	bl	80058cc <pbuf_alloc>
 800c166:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	f000 80bc 	beq.w	800c2e8 <tcp_split_unsent_seg+0x270>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	891a      	ldrh	r2, [r3, #8]
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	891b      	ldrh	r3, [r3, #8]
 800c17a:	1ad3      	subs	r3, r2, r3
 800c17c:	b29a      	uxth	r2, r3
 800c17e:	887b      	ldrh	r3, [r7, #2]
 800c180:	4413      	add	r3, r2
 800c182:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	6858      	ldr	r0, [r3, #4]
 800c188:	69bb      	ldr	r3, [r7, #24]
 800c18a:	685a      	ldr	r2, [r3, #4]
 800c18c:	7bbb      	ldrb	r3, [r7, #14]
 800c18e:	18d1      	adds	r1, r2, r3
 800c190:	897b      	ldrh	r3, [r7, #10]
 800c192:	89ba      	ldrh	r2, [r7, #12]
 800c194:	f7fa f8de 	bl	8006354 <pbuf_copy_partial>
 800c198:	4603      	mov	r3, r0
 800c19a:	461a      	mov	r2, r3
 800c19c:	89bb      	ldrh	r3, [r7, #12]
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	f040 80a4 	bne.w	800c2ec <tcp_split_unsent_seg+0x274>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	899b      	ldrh	r3, [r3, #12]
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7f7 f8a7 	bl	8003300 <lwip_htons>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1ba:	75fb      	strb	r3, [r7, #23]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c1bc:	2300      	movs	r3, #0
 800c1be:	75bb      	strb	r3, [r7, #22]

  if (split_flags & TCP_PSH) {
 800c1c0:	7dfb      	ldrb	r3, [r7, #23]
 800c1c2:	f003 0308 	and.w	r3, r3, #8
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d007      	beq.n	800c1da <tcp_split_unsent_seg+0x162>
    split_flags &= ~TCP_PSH;
 800c1ca:	7dfb      	ldrb	r3, [r7, #23]
 800c1cc:	f023 0308 	bic.w	r3, r3, #8
 800c1d0:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_PSH;
 800c1d2:	7dbb      	ldrb	r3, [r7, #22]
 800c1d4:	f043 0308 	orr.w	r3, r3, #8
 800c1d8:	75bb      	strb	r3, [r7, #22]
  }
  if (split_flags & TCP_FIN) {
 800c1da:	7dfb      	ldrb	r3, [r7, #23]
 800c1dc:	f003 0301 	and.w	r3, r3, #1
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d007      	beq.n	800c1f4 <tcp_split_unsent_seg+0x17c>
    split_flags &= ~TCP_FIN;
 800c1e4:	7dfb      	ldrb	r3, [r7, #23]
 800c1e6:	f023 0301 	bic.w	r3, r3, #1
 800c1ea:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_FIN;
 800c1ec:	7dbb      	ldrb	r3, [r7, #22]
 800c1ee:	f043 0301 	orr.w	r3, r3, #1
 800c1f2:	75bb      	strb	r3, [r7, #22]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	691b      	ldr	r3, [r3, #16]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7f7 f895 	bl	800332a <lwip_htonl>
 800c200:	4602      	mov	r2, r0
 800c202:	887b      	ldrh	r3, [r7, #2]
 800c204:	18d1      	adds	r1, r2, r3
 800c206:	7dba      	ldrb	r2, [r7, #22]
 800c208:	7bfb      	ldrb	r3, [r7, #15]
 800c20a:	9300      	str	r3, [sp, #0]
 800c20c:	460b      	mov	r3, r1
 800c20e:	69b9      	ldr	r1, [r7, #24]
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f7ff f98b 	bl	800b52c <tcp_create_segment>
 800c216:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d102      	bne.n	800c224 <tcp_split_unsent_seg+0x1ac>
    p = NULL; /* Freed by tcp_create_segment */
 800c21e:	2300      	movs	r3, #0
 800c220:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
 800c222:	e064      	b.n	800c2ee <tcp_split_unsent_seg+0x276>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	4618      	mov	r0, r3
 800c22a:	f7f9 fe95 	bl	8005f58 <pbuf_clen>
 800c22e:	4603      	mov	r3, r0
 800c230:	461a      	mov	r2, r3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c238:	1a9b      	subs	r3, r3, r2
 800c23a:	b29a      	uxth	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	6858      	ldr	r0, [r3, #4]
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	891a      	ldrh	r2, [r3, #8]
 800c24c:	89bb      	ldrh	r3, [r7, #12]
 800c24e:	1ad3      	subs	r3, r2, r3
 800c250:	b29b      	uxth	r3, r3
 800c252:	4619      	mov	r1, r3
 800c254:	f7f9 fc2c 	bl	8005ab0 <pbuf_realloc>
  useg->len -= remainder;
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	891a      	ldrh	r2, [r3, #8]
 800c25c:	89bb      	ldrh	r3, [r7, #12]
 800c25e:	1ad3      	subs	r3, r2, r3
 800c260:	b29a      	uxth	r2, r3
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	691c      	ldr	r4, [r3, #16]
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	691b      	ldr	r3, [r3, #16]
 800c26e:	899b      	ldrh	r3, [r3, #12]
 800c270:	b29d      	uxth	r5, r3
 800c272:	7dfb      	ldrb	r3, [r7, #23]
 800c274:	b29b      	uxth	r3, r3
 800c276:	4618      	mov	r0, r3
 800c278:	f7f7 f842 	bl	8003300 <lwip_htons>
 800c27c:	4603      	mov	r3, r0
 800c27e:	432b      	orrs	r3, r5
 800c280:	b29b      	uxth	r3, r3
 800c282:	81a3      	strh	r3, [r4, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	2200      	movs	r2, #0
 800c288:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	4618      	mov	r0, r3
 800c290:	f7f9 fe62 	bl	8005f58 <pbuf_clen>
 800c294:	4603      	mov	r3, r0
 800c296:	461a      	mov	r2, r3
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c29e:	4413      	add	r3, r2
 800c2a0:	b29a      	uxth	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7f9 fe53 	bl	8005f58 <pbuf_clen>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c2bc:	4413      	add	r3, r2
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	69fb      	ldr	r3, [r7, #28]
 800c2cc:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	69fa      	ldr	r2, [r7, #28]
 800c2d2:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d103      	bne.n	800c2e4 <tcp_split_unsent_seg+0x26c>
    pcb->unsent_oversize = 0;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	e019      	b.n	800c31c <tcp_split_unsent_seg+0x2a4>
    goto memerr;
 800c2e8:	bf00      	nop
 800c2ea:	e000      	b.n	800c2ee <tcp_split_unsent_seg+0x276>
    goto memerr;
 800c2ec:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00b      	beq.n	800c30c <tcp_split_unsent_seg+0x294>
 800c2f4:	4b0b      	ldr	r3, [pc, #44]	; (800c324 <tcp_split_unsent_seg+0x2ac>)
 800c2f6:	f44f 7277 	mov.w	r2, #988	; 0x3dc
 800c2fa:	4910      	ldr	r1, [pc, #64]	; (800c33c <tcp_split_unsent_seg+0x2c4>)
 800c2fc:	480b      	ldr	r0, [pc, #44]	; (800c32c <tcp_split_unsent_seg+0x2b4>)
 800c2fe:	f00b fd99 	bl	8017e34 <iprintf>
 800c302:	2000      	movs	r0, #0
 800c304:	f00b fe98 	bl	8018038 <fflush>
 800c308:	f00b fddd 	bl	8017ec6 <abort>
  if (p != NULL) {
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d002      	beq.n	800c318 <tcp_split_unsent_seg+0x2a0>
    pbuf_free(p);
 800c312:	69b8      	ldr	r0, [r7, #24]
 800c314:	f7f9 fd7e 	bl	8005e14 <pbuf_free>
  }

  return ERR_MEM;
 800c318:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3720      	adds	r7, #32
 800c320:	46bd      	mov	sp, r7
 800c322:	bdb0      	pop	{r4, r5, r7, pc}
 800c324:	0801bb78 	.word	0x0801bb78
 800c328:	0801bf58 	.word	0x0801bf58
 800c32c:	0801bbbc 	.word	0x0801bbbc
 800c330:	0801bf7c 	.word	0x0801bf7c
 800c334:	0801bfa0 	.word	0x0801bfa0
 800c338:	0801bfb0 	.word	0x0801bfb0
 800c33c:	0801bfc0 	.word	0x0801bfc0

0800c340 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c340:	b5b0      	push	{r4, r5, r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d10b      	bne.n	800c366 <tcp_send_fin+0x26>
 800c34e:	4b23      	ldr	r3, [pc, #140]	; (800c3dc <tcp_send_fin+0x9c>)
 800c350:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800c354:	4922      	ldr	r1, [pc, #136]	; (800c3e0 <tcp_send_fin+0xa0>)
 800c356:	4823      	ldr	r0, [pc, #140]	; (800c3e4 <tcp_send_fin+0xa4>)
 800c358:	f00b fd6c 	bl	8017e34 <iprintf>
 800c35c:	2000      	movs	r0, #0
 800c35e:	f00b fe6b 	bl	8018038 <fflush>
 800c362:	f00b fdb0 	bl	8017ec6 <abort>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d02d      	beq.n	800c3ca <tcp_send_fin+0x8a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c372:	60fb      	str	r3, [r7, #12]
 800c374:	e002      	b.n	800c37c <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d1f8      	bne.n	800c376 <tcp_send_fin+0x36>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	691b      	ldr	r3, [r3, #16]
 800c388:	899b      	ldrh	r3, [r3, #12]
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7f6 ffb7 	bl	8003300 <lwip_htons>
 800c392:	4603      	mov	r3, r0
 800c394:	b2db      	uxtb	r3, r3
 800c396:	f003 0307 	and.w	r3, r3, #7
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d115      	bne.n	800c3ca <tcp_send_fin+0x8a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	691c      	ldr	r4, [r3, #16]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	899b      	ldrh	r3, [r3, #12]
 800c3a8:	b29d      	uxth	r5, r3
 800c3aa:	2001      	movs	r0, #1
 800c3ac:	f7f6 ffa8 	bl	8003300 <lwip_htons>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	432b      	orrs	r3, r5
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	81a3      	strh	r3, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	8b5b      	ldrh	r3, [r3, #26]
 800c3bc:	f043 0320 	orr.w	r3, r3, #32
 800c3c0:	b29a      	uxth	r2, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	e004      	b.n	800c3d4 <tcp_send_fin+0x94>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c3ca:	2101      	movs	r1, #1
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 f80b 	bl	800c3e8 <tcp_enqueue_flags>
 800c3d2:	4603      	mov	r3, r0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bdb0      	pop	{r4, r5, r7, pc}
 800c3dc:	0801bb78 	.word	0x0801bb78
 800c3e0:	0801bfcc 	.word	0x0801bfcc
 800c3e4:	0801bbbc 	.word	0x0801bbbc

0800c3e8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b08a      	sub	sp, #40	; 0x28
 800c3ec:	af02      	add	r7, sp, #8
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c3fc:	78fb      	ldrb	r3, [r7, #3]
 800c3fe:	f003 0303 	and.w	r3, r3, #3
 800c402:	2b00      	cmp	r3, #0
 800c404:	d10b      	bne.n	800c41e <tcp_enqueue_flags+0x36>
 800c406:	4b6e      	ldr	r3, [pc, #440]	; (800c5c0 <tcp_enqueue_flags+0x1d8>)
 800c408:	f240 4214 	movw	r2, #1044	; 0x414
 800c40c:	496d      	ldr	r1, [pc, #436]	; (800c5c4 <tcp_enqueue_flags+0x1dc>)
 800c40e:	486e      	ldr	r0, [pc, #440]	; (800c5c8 <tcp_enqueue_flags+0x1e0>)
 800c410:	f00b fd10 	bl	8017e34 <iprintf>
 800c414:	2000      	movs	r0, #0
 800c416:	f00b fe0f 	bl	8018038 <fflush>
 800c41a:	f00b fd54 	bl	8017ec6 <abort>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10b      	bne.n	800c43c <tcp_enqueue_flags+0x54>
 800c424:	4b66      	ldr	r3, [pc, #408]	; (800c5c0 <tcp_enqueue_flags+0x1d8>)
 800c426:	f240 4215 	movw	r2, #1045	; 0x415
 800c42a:	4968      	ldr	r1, [pc, #416]	; (800c5cc <tcp_enqueue_flags+0x1e4>)
 800c42c:	4866      	ldr	r0, [pc, #408]	; (800c5c8 <tcp_enqueue_flags+0x1e0>)
 800c42e:	f00b fd01 	bl	8017e34 <iprintf>
 800c432:	2000      	movs	r0, #0
 800c434:	f00b fe00 	bl	8018038 <fflush>
 800c438:	f00b fd45 	bl	8017ec6 <abort>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c43c:	78fb      	ldrb	r3, [r7, #3]
 800c43e:	f003 0302 	and.w	r3, r3, #2
 800c442:	2b00      	cmp	r3, #0
 800c444:	d001      	beq.n	800c44a <tcp_enqueue_flags+0x62>
    optflags = TF_SEG_OPTS_MSS;
 800c446:	2301      	movs	r3, #1
 800c448:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c44a:	7ffb      	ldrb	r3, [r7, #31]
 800c44c:	f003 0301 	and.w	r3, r3, #1
 800c450:	2b00      	cmp	r3, #0
 800c452:	d001      	beq.n	800c458 <tcp_enqueue_flags+0x70>
 800c454:	2304      	movs	r3, #4
 800c456:	e000      	b.n	800c45a <tcp_enqueue_flags+0x72>
 800c458:	2300      	movs	r3, #0
 800c45a:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c45c:	7dfb      	ldrb	r3, [r7, #23]
 800c45e:	b29b      	uxth	r3, r3
 800c460:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c464:	4619      	mov	r1, r3
 800c466:	2036      	movs	r0, #54	; 0x36
 800c468:	f7f9 fa30 	bl	80058cc <pbuf_alloc>
 800c46c:	6138      	str	r0, [r7, #16]
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d109      	bne.n	800c488 <tcp_enqueue_flags+0xa0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	8b5b      	ldrh	r3, [r3, #26]
 800c478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c47c:	b29a      	uxth	r2, r3
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c482:	f04f 33ff 	mov.w	r3, #4294967295
 800c486:	e097      	b.n	800c5b8 <tcp_enqueue_flags+0x1d0>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	895a      	ldrh	r2, [r3, #10]
 800c48c:	7dfb      	ldrb	r3, [r7, #23]
 800c48e:	b29b      	uxth	r3, r3
 800c490:	429a      	cmp	r2, r3
 800c492:	d20b      	bcs.n	800c4ac <tcp_enqueue_flags+0xc4>
 800c494:	4b4a      	ldr	r3, [pc, #296]	; (800c5c0 <tcp_enqueue_flags+0x1d8>)
 800c496:	f240 423e 	movw	r2, #1086	; 0x43e
 800c49a:	494d      	ldr	r1, [pc, #308]	; (800c5d0 <tcp_enqueue_flags+0x1e8>)
 800c49c:	484a      	ldr	r0, [pc, #296]	; (800c5c8 <tcp_enqueue_flags+0x1e0>)
 800c49e:	f00b fcc9 	bl	8017e34 <iprintf>
 800c4a2:	2000      	movs	r0, #0
 800c4a4:	f00b fdc8 	bl	8018038 <fflush>
 800c4a8:	f00b fd0d 	bl	8017ec6 <abort>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c4b0:	78fa      	ldrb	r2, [r7, #3]
 800c4b2:	7ffb      	ldrb	r3, [r7, #31]
 800c4b4:	9300      	str	r3, [sp, #0]
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	6939      	ldr	r1, [r7, #16]
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f7ff f836 	bl	800b52c <tcp_create_segment>
 800c4c0:	60f8      	str	r0, [r7, #12]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d109      	bne.n	800c4dc <tcp_enqueue_flags+0xf4>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	8b5b      	ldrh	r3, [r3, #26]
 800c4cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4d0:	b29a      	uxth	r2, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c4d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4da:	e06d      	b.n	800c5b8 <tcp_enqueue_flags+0x1d0>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	891b      	ldrh	r3, [r3, #8]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00b      	beq.n	800c4fc <tcp_enqueue_flags+0x114>
 800c4e4:	4b36      	ldr	r3, [pc, #216]	; (800c5c0 <tcp_enqueue_flags+0x1d8>)
 800c4e6:	f240 4247 	movw	r2, #1095	; 0x447
 800c4ea:	493a      	ldr	r1, [pc, #232]	; (800c5d4 <tcp_enqueue_flags+0x1ec>)
 800c4ec:	4836      	ldr	r0, [pc, #216]	; (800c5c8 <tcp_enqueue_flags+0x1e0>)
 800c4ee:	f00b fca1 	bl	8017e34 <iprintf>
 800c4f2:	2000      	movs	r0, #0
 800c4f4:	f00b fda0 	bl	8018038 <fflush>
 800c4f8:	f00b fce5 	bl	8017ec6 <abort>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c500:	2b00      	cmp	r3, #0
 800c502:	d103      	bne.n	800c50c <tcp_enqueue_flags+0x124>
    pcb->unsent = seg;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	68fa      	ldr	r2, [r7, #12]
 800c508:	66da      	str	r2, [r3, #108]	; 0x6c
 800c50a:	e00d      	b.n	800c528 <tcp_enqueue_flags+0x140>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c510:	61bb      	str	r3, [r7, #24]
 800c512:	e002      	b.n	800c51a <tcp_enqueue_flags+0x132>
 800c514:	69bb      	ldr	r3, [r7, #24]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	61bb      	str	r3, [r7, #24]
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d1f8      	bne.n	800c514 <tcp_enqueue_flags+0x12c>
    useg->next = seg;
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2200      	movs	r2, #0
 800c52c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c530:	78fb      	ldrb	r3, [r7, #3]
 800c532:	f003 0302 	and.w	r3, r3, #2
 800c536:	2b00      	cmp	r3, #0
 800c538:	d104      	bne.n	800c544 <tcp_enqueue_flags+0x15c>
 800c53a:	78fb      	ldrb	r3, [r7, #3]
 800c53c:	f003 0301 	and.w	r3, r3, #1
 800c540:	2b00      	cmp	r3, #0
 800c542:	d004      	beq.n	800c54e <tcp_enqueue_flags+0x166>
    pcb->snd_lbb++;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c548:	1c5a      	adds	r2, r3, #1
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c54e:	78fb      	ldrb	r3, [r7, #3]
 800c550:	f003 0301 	and.w	r3, r3, #1
 800c554:	2b00      	cmp	r3, #0
 800c556:	d006      	beq.n	800c566 <tcp_enqueue_flags+0x17e>
    tcp_set_flags(pcb, TF_FIN);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	8b5b      	ldrh	r3, [r3, #26]
 800c55c:	f043 0320 	orr.w	r3, r3, #32
 800c560:	b29a      	uxth	r2, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7f9 fcf4 	bl	8005f58 <pbuf_clen>
 800c570:	4603      	mov	r3, r0
 800c572:	461a      	mov	r2, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c57a:	4413      	add	r3, r2
 800c57c:	b29a      	uxth	r2, r3
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d013      	beq.n	800c5b6 <tcp_enqueue_flags+0x1ce>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c592:	2b00      	cmp	r3, #0
 800c594:	d10f      	bne.n	800c5b6 <tcp_enqueue_flags+0x1ce>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d10b      	bne.n	800c5b6 <tcp_enqueue_flags+0x1ce>
 800c59e:	4b08      	ldr	r3, [pc, #32]	; (800c5c0 <tcp_enqueue_flags+0x1d8>)
 800c5a0:	f240 426a 	movw	r2, #1130	; 0x46a
 800c5a4:	490c      	ldr	r1, [pc, #48]	; (800c5d8 <tcp_enqueue_flags+0x1f0>)
 800c5a6:	4808      	ldr	r0, [pc, #32]	; (800c5c8 <tcp_enqueue_flags+0x1e0>)
 800c5a8:	f00b fc44 	bl	8017e34 <iprintf>
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	f00b fd43 	bl	8018038 <fflush>
 800c5b2:	f00b fc88 	bl	8017ec6 <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3720      	adds	r7, #32
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	0801bb78 	.word	0x0801bb78
 800c5c4:	0801bfe8 	.word	0x0801bfe8
 800c5c8:	0801bbbc 	.word	0x0801bbbc
 800c5cc:	0801c040 	.word	0x0801c040
 800c5d0:	0801c060 	.word	0x0801c060
 800c5d4:	0801c09c 	.word	0x0801c09c
 800c5d8:	0801c0c8 	.word	0x0801c0c8

0800c5dc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c5dc:	b5b0      	push	{r4, r5, r7, lr}
 800c5de:	b08a      	sub	sp, #40	; 0x28
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d10b      	bne.n	800c602 <tcp_output+0x26>
 800c5ea:	4ba9      	ldr	r3, [pc, #676]	; (800c890 <tcp_output+0x2b4>)
 800c5ec:	f240 42e5 	movw	r2, #1253	; 0x4e5
 800c5f0:	49a8      	ldr	r1, [pc, #672]	; (800c894 <tcp_output+0x2b8>)
 800c5f2:	48a9      	ldr	r0, [pc, #676]	; (800c898 <tcp_output+0x2bc>)
 800c5f4:	f00b fc1e 	bl	8017e34 <iprintf>
 800c5f8:	2000      	movs	r0, #0
 800c5fa:	f00b fd1d 	bl	8018038 <fflush>
 800c5fe:	f00b fc62 	bl	8017ec6 <abort>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	7d1b      	ldrb	r3, [r3, #20]
 800c606:	2b01      	cmp	r3, #1
 800c608:	d10b      	bne.n	800c622 <tcp_output+0x46>
 800c60a:	4ba1      	ldr	r3, [pc, #644]	; (800c890 <tcp_output+0x2b4>)
 800c60c:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
 800c610:	49a2      	ldr	r1, [pc, #648]	; (800c89c <tcp_output+0x2c0>)
 800c612:	48a1      	ldr	r0, [pc, #644]	; (800c898 <tcp_output+0x2bc>)
 800c614:	f00b fc0e 	bl	8017e34 <iprintf>
 800c618:	2000      	movs	r0, #0
 800c61a:	f00b fd0d 	bl	8018038 <fflush>
 800c61e:	f00b fc52 	bl	8017ec6 <abort>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c622:	4b9f      	ldr	r3, [pc, #636]	; (800c8a0 <tcp_output+0x2c4>)
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d101      	bne.n	800c630 <tcp_output+0x54>
    return ERR_OK;
 800c62c:	2300      	movs	r3, #0
 800c62e:	e1d8      	b.n	800c9e2 <tcp_output+0x406>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d203      	bcs.n	800c648 <tcp_output+0x6c>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c646:	e002      	b.n	800c64e <tcp_output+0x72>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c64e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c654:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d10b      	bne.n	800c674 <tcp_output+0x98>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	8b5b      	ldrh	r3, [r3, #26]
 800c660:	f003 0302 	and.w	r3, r3, #2
 800c664:	2b00      	cmp	r3, #0
 800c666:	f000 81b1 	beq.w	800c9cc <tcp_output+0x3f0>
      return tcp_send_empty_ack(pcb);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 fed6 	bl	800d41c <tcp_send_empty_ack>
 800c670:	4603      	mov	r3, r0
 800c672:	e1b6      	b.n	800c9e2 <tcp_output+0x406>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c674:	6879      	ldr	r1, [r7, #4]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	3304      	adds	r3, #4
 800c67a:	461a      	mov	r2, r3
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f7fe ff39 	bl	800b4f4 <tcp_route>
 800c682:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d102      	bne.n	800c690 <tcp_output+0xb4>
    return ERR_RTE;
 800c68a:	f06f 0303 	mvn.w	r3, #3
 800c68e:	e1a8      	b.n	800c9e2 <tcp_output+0x406>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d003      	beq.n	800c69e <tcp_output+0xc2>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d111      	bne.n	800c6c2 <tcp_output+0xe6>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d002      	beq.n	800c6aa <tcp_output+0xce>
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	3304      	adds	r3, #4
 800c6a8:	e000      	b.n	800c6ac <tcp_output+0xd0>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d102      	bne.n	800c6ba <tcp_output+0xde>
      return ERR_RTE;
 800c6b4:	f06f 0303 	mvn.w	r3, #3
 800c6b8:	e193      	b.n	800c9e2 <tcp_output+0x406>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c4:	691b      	ldr	r3, [r3, #16]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7f6 fe2e 	bl	800332a <lwip_htonl>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6d8:	8912      	ldrh	r2, [r2, #8]
 800c6da:	441a      	add	r2, r3
 800c6dc:	69bb      	ldr	r3, [r7, #24]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d927      	bls.n	800c732 <tcp_output+0x156>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d114      	bne.n	800c71a <tcp_output+0x13e>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d110      	bne.n	800c71a <tcp_output+0x13e>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d10b      	bne.n	800c71a <tcp_output+0x13e>
      pcb->persist_cnt = 0;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2201      	movs	r2, #1
 800c70e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2200      	movs	r2, #0
 800c716:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	8b5b      	ldrh	r3, [r3, #26]
 800c71e:	f003 0302 	and.w	r3, r3, #2
 800c722:	2b00      	cmp	r3, #0
 800c724:	f000 8154 	beq.w	800c9d0 <tcp_output+0x3f4>
      return tcp_send_empty_ack(pcb);
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 fe77 	bl	800d41c <tcp_send_empty_ack>
 800c72e:	4603      	mov	r3, r0
 800c730:	e157      	b.n	800c9e2 <tcp_output+0x406>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2200      	movs	r2, #0
 800c736:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c73e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c740:	6a3b      	ldr	r3, [r7, #32]
 800c742:	2b00      	cmp	r3, #0
 800c744:	f000 8123 	beq.w	800c98e <tcp_output+0x3b2>
    for (; useg->next != NULL; useg = useg->next);
 800c748:	e002      	b.n	800c750 <tcp_output+0x174>
 800c74a:	6a3b      	ldr	r3, [r7, #32]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	623b      	str	r3, [r7, #32]
 800c750:	6a3b      	ldr	r3, [r7, #32]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d1f8      	bne.n	800c74a <tcp_output+0x16e>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c758:	e119      	b.n	800c98e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	899b      	ldrh	r3, [r3, #12]
 800c760:	b29b      	uxth	r3, r3
 800c762:	4618      	mov	r0, r3
 800c764:	f7f6 fdcc 	bl	8003300 <lwip_htons>
 800c768:	4603      	mov	r3, r0
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	f003 0304 	and.w	r3, r3, #4
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00b      	beq.n	800c78c <tcp_output+0x1b0>
 800c774:	4b46      	ldr	r3, [pc, #280]	; (800c890 <tcp_output+0x2b4>)
 800c776:	f240 523b 	movw	r2, #1339	; 0x53b
 800c77a:	494a      	ldr	r1, [pc, #296]	; (800c8a4 <tcp_output+0x2c8>)
 800c77c:	4846      	ldr	r0, [pc, #280]	; (800c898 <tcp_output+0x2bc>)
 800c77e:	f00b fb59 	bl	8017e34 <iprintf>
 800c782:	2000      	movs	r0, #0
 800c784:	f00b fc58 	bl	8018038 <fflush>
 800c788:	f00b fb9d 	bl	8017ec6 <abort>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c790:	2b00      	cmp	r3, #0
 800c792:	d01f      	beq.n	800c7d4 <tcp_output+0x1f8>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	8b5b      	ldrh	r3, [r3, #26]
 800c798:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d119      	bne.n	800c7d4 <tcp_output+0x1f8>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00b      	beq.n	800c7c0 <tcp_output+0x1e4>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d110      	bne.n	800c7d4 <tcp_output+0x1f8>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7b6:	891a      	ldrh	r2, [r3, #8]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d209      	bcs.n	800c7d4 <tcp_output+0x1f8>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d004      	beq.n	800c7d4 <tcp_output+0x1f8>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c7d0:	2b07      	cmp	r3, #7
 800c7d2:	d901      	bls.n	800c7d8 <tcp_output+0x1fc>
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	e000      	b.n	800c7da <tcp_output+0x1fe>
 800c7d8:	2300      	movs	r3, #0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d106      	bne.n	800c7ec <tcp_output+0x210>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	8b5b      	ldrh	r3, [r3, #26]
 800c7e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	f000 80e6 	beq.w	800c9b8 <tcp_output+0x3dc>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	7d1b      	ldrb	r3, [r3, #20]
 800c7f0:	2b02      	cmp	r3, #2
 800c7f2:	d00c      	beq.n	800c80e <tcp_output+0x232>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f6:	691c      	ldr	r4, [r3, #16]
 800c7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fa:	691b      	ldr	r3, [r3, #16]
 800c7fc:	899b      	ldrh	r3, [r3, #12]
 800c7fe:	b29d      	uxth	r5, r3
 800c800:	2010      	movs	r0, #16
 800c802:	f7f6 fd7d 	bl	8003300 <lwip_htons>
 800c806:	4603      	mov	r3, r0
 800c808:	432b      	orrs	r3, r5
 800c80a:	b29b      	uxth	r3, r3
 800c80c:	81a3      	strh	r3, [r4, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c80e:	697a      	ldr	r2, [r7, #20]
 800c810:	6879      	ldr	r1, [r7, #4]
 800c812:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c814:	f000 f910 	bl	800ca38 <tcp_output_segment>
 800c818:	4603      	mov	r3, r0
 800c81a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c81c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d009      	beq.n	800c838 <tcp_output+0x25c>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	8b5b      	ldrh	r3, [r3, #26]
 800c828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c82c:	b29a      	uxth	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	835a      	strh	r2, [r3, #26]
      return err;
 800c832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c836:	e0d4      	b.n	800c9e2 <tcp_output+0x406>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800c838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83a:	2200      	movs	r2, #0
 800c83c:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	7d1b      	ldrb	r3, [r3, #20]
 800c84a:	2b02      	cmp	r3, #2
 800c84c:	d006      	beq.n	800c85c <tcp_output+0x280>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	8b5b      	ldrh	r3, [r3, #26]
 800c852:	f023 0303 	bic.w	r3, r3, #3
 800c856:	b29a      	uxth	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85e:	691b      	ldr	r3, [r3, #16]
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	4618      	mov	r0, r3
 800c864:	f7f6 fd61 	bl	800332a <lwip_htonl>
 800c868:	4604      	mov	r4, r0
 800c86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86c:	891b      	ldrh	r3, [r3, #8]
 800c86e:	461d      	mov	r5, r3
 800c870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c872:	691b      	ldr	r3, [r3, #16]
 800c874:	899b      	ldrh	r3, [r3, #12]
 800c876:	b29b      	uxth	r3, r3
 800c878:	4618      	mov	r0, r3
 800c87a:	f7f6 fd41 	bl	8003300 <lwip_htons>
 800c87e:	4603      	mov	r3, r0
 800c880:	b2db      	uxtb	r3, r3
 800c882:	f003 0303 	and.w	r3, r3, #3
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00e      	beq.n	800c8a8 <tcp_output+0x2cc>
 800c88a:	2301      	movs	r3, #1
 800c88c:	e00d      	b.n	800c8aa <tcp_output+0x2ce>
 800c88e:	bf00      	nop
 800c890:	0801bb78 	.word	0x0801bb78
 800c894:	0801c0f0 	.word	0x0801c0f0
 800c898:	0801bbbc 	.word	0x0801bbbc
 800c89c:	0801c108 	.word	0x0801c108
 800c8a0:	20004050 	.word	0x20004050
 800c8a4:	0801c130 	.word	0x0801c130
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	442b      	add	r3, r5
 800c8ac:	4423      	add	r3, r4
 800c8ae:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	1ad3      	subs	r3, r2, r3
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	da02      	bge.n	800c8c2 <tcp_output+0x2e6>
      pcb->snd_nxt = snd_nxt;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	68ba      	ldr	r2, [r7, #8]
 800c8c0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c4:	891b      	ldrh	r3, [r3, #8]
 800c8c6:	461c      	mov	r4, r3
 800c8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ca:	691b      	ldr	r3, [r3, #16]
 800c8cc:	899b      	ldrh	r3, [r3, #12]
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f7f6 fd15 	bl	8003300 <lwip_htons>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	f003 0303 	and.w	r3, r3, #3
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d001      	beq.n	800c8e6 <tcp_output+0x30a>
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e000      	b.n	800c8e8 <tcp_output+0x30c>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	4423      	add	r3, r4
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d049      	beq.n	800c982 <tcp_output+0x3a6>
      seg->next = NULL;
 800c8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d105      	bne.n	800c908 <tcp_output+0x32c>
        pcb->unacked = seg;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c900:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c904:	623b      	str	r3, [r7, #32]
 800c906:	e03f      	b.n	800c988 <tcp_output+0x3ac>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90a:	691b      	ldr	r3, [r3, #16]
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	4618      	mov	r0, r3
 800c910:	f7f6 fd0b 	bl	800332a <lwip_htonl>
 800c914:	4604      	mov	r4, r0
 800c916:	6a3b      	ldr	r3, [r7, #32]
 800c918:	691b      	ldr	r3, [r3, #16]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7f6 fd04 	bl	800332a <lwip_htonl>
 800c922:	4603      	mov	r3, r0
 800c924:	1ae3      	subs	r3, r4, r3
 800c926:	2b00      	cmp	r3, #0
 800c928:	da24      	bge.n	800c974 <tcp_output+0x398>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	3370      	adds	r3, #112	; 0x70
 800c92e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c930:	e002      	b.n	800c938 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c932:	69fb      	ldr	r3, [r7, #28]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d011      	beq.n	800c964 <tcp_output+0x388>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	691b      	ldr	r3, [r3, #16]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	4618      	mov	r0, r3
 800c94a:	f7f6 fcee 	bl	800332a <lwip_htonl>
 800c94e:	4604      	mov	r4, r0
 800c950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c952:	691b      	ldr	r3, [r3, #16]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	4618      	mov	r0, r3
 800c958:	f7f6 fce7 	bl	800332a <lwip_htonl>
 800c95c:	4603      	mov	r3, r0
 800c95e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c960:	2b00      	cmp	r3, #0
 800c962:	dbe6      	blt.n	800c932 <tcp_output+0x356>
          }
          seg->next = (*cur_seg);
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c970:	601a      	str	r2, [r3, #0]
 800c972:	e009      	b.n	800c988 <tcp_output+0x3ac>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c974:	6a3b      	ldr	r3, [r7, #32]
 800c976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c978:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c97a:	6a3b      	ldr	r3, [r7, #32]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	623b      	str	r3, [r7, #32]
 800c980:	e002      	b.n	800c988 <tcp_output+0x3ac>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c982:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c984:	f7fb fa7c 	bl	8007e80 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c98c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c990:	2b00      	cmp	r3, #0
 800c992:	d012      	beq.n	800c9ba <tcp_output+0x3de>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c996:	691b      	ldr	r3, [r3, #16]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7f6 fcc5 	bl	800332a <lwip_htonl>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9a6:	1ad3      	subs	r3, r2, r3
 800c9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9aa:	8912      	ldrh	r2, [r2, #8]
 800c9ac:	441a      	add	r2, r3
  while (seg != NULL &&
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	f67f aed2 	bls.w	800c75a <tcp_output+0x17e>
 800c9b6:	e000      	b.n	800c9ba <tcp_output+0x3de>
      break;
 800c9b8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d107      	bne.n	800c9d2 <tcp_output+0x3f6>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c9ca:	e002      	b.n	800c9d2 <tcp_output+0x3f6>
    goto output_done;
 800c9cc:	bf00      	nop
 800c9ce:	e000      	b.n	800c9d2 <tcp_output+0x3f6>
    goto output_done;
 800c9d0:	bf00      	nop
  }
#endif /* TCP_OVERSIZE */

output_done:
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	8b5b      	ldrh	r3, [r3, #26]
 800c9d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9da:	b29a      	uxth	r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c9e0:	2300      	movs	r3, #0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3728      	adds	r7, #40	; 0x28
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bdb0      	pop	{r4, r5, r7, pc}
 800c9ea:	bf00      	nop

0800c9ec <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d10b      	bne.n	800ca12 <tcp_output_segment_busy+0x26>
 800c9fa:	4b0c      	ldr	r3, [pc, #48]	; (800ca2c <tcp_output_segment_busy+0x40>)
 800c9fc:	f240 529e 	movw	r2, #1438	; 0x59e
 800ca00:	490b      	ldr	r1, [pc, #44]	; (800ca30 <tcp_output_segment_busy+0x44>)
 800ca02:	480c      	ldr	r0, [pc, #48]	; (800ca34 <tcp_output_segment_busy+0x48>)
 800ca04:	f00b fa16 	bl	8017e34 <iprintf>
 800ca08:	2000      	movs	r0, #0
 800ca0a:	f00b fb15 	bl	8018038 <fflush>
 800ca0e:	f00b fa5a 	bl	8017ec6 <abort>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	7b9b      	ldrb	r3, [r3, #14]
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d001      	beq.n	800ca20 <tcp_output_segment_busy+0x34>
    /* other reference found */
    return 1;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	e000      	b.n	800ca22 <tcp_output_segment_busy+0x36>
  }
  /* no other references found */
  return 0;
 800ca20:	2300      	movs	r3, #0
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3708      	adds	r7, #8
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	0801bb78 	.word	0x0801bb78
 800ca30:	0801c148 	.word	0x0801c148
 800ca34:	0801bbbc 	.word	0x0801bbbc

0800ca38 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ca38:	b5b0      	push	{r4, r5, r7, lr}
 800ca3a:	b08c      	sub	sp, #48	; 0x30
 800ca3c:	af04      	add	r7, sp, #16
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10b      	bne.n	800ca62 <tcp_output_segment+0x2a>
 800ca4a:	4b78      	ldr	r3, [pc, #480]	; (800cc2c <tcp_output_segment+0x1f4>)
 800ca4c:	f240 52bc 	movw	r2, #1468	; 0x5bc
 800ca50:	4977      	ldr	r1, [pc, #476]	; (800cc30 <tcp_output_segment+0x1f8>)
 800ca52:	4878      	ldr	r0, [pc, #480]	; (800cc34 <tcp_output_segment+0x1fc>)
 800ca54:	f00b f9ee 	bl	8017e34 <iprintf>
 800ca58:	2000      	movs	r0, #0
 800ca5a:	f00b faed 	bl	8018038 <fflush>
 800ca5e:	f00b fa32 	bl	8017ec6 <abort>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10b      	bne.n	800ca80 <tcp_output_segment+0x48>
 800ca68:	4b70      	ldr	r3, [pc, #448]	; (800cc2c <tcp_output_segment+0x1f4>)
 800ca6a:	f240 52bd 	movw	r2, #1469	; 0x5bd
 800ca6e:	4972      	ldr	r1, [pc, #456]	; (800cc38 <tcp_output_segment+0x200>)
 800ca70:	4870      	ldr	r0, [pc, #448]	; (800cc34 <tcp_output_segment+0x1fc>)
 800ca72:	f00b f9df 	bl	8017e34 <iprintf>
 800ca76:	2000      	movs	r0, #0
 800ca78:	f00b fade 	bl	8018038 <fflush>
 800ca7c:	f00b fa23 	bl	8017ec6 <abort>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d10b      	bne.n	800ca9e <tcp_output_segment+0x66>
 800ca86:	4b69      	ldr	r3, [pc, #420]	; (800cc2c <tcp_output_segment+0x1f4>)
 800ca88:	f240 52be 	movw	r2, #1470	; 0x5be
 800ca8c:	496b      	ldr	r1, [pc, #428]	; (800cc3c <tcp_output_segment+0x204>)
 800ca8e:	4869      	ldr	r0, [pc, #420]	; (800cc34 <tcp_output_segment+0x1fc>)
 800ca90:	f00b f9d0 	bl	8017e34 <iprintf>
 800ca94:	2000      	movs	r0, #0
 800ca96:	f00b facf 	bl	8018038 <fflush>
 800ca9a:	f00b fa14 	bl	8017ec6 <abort>

  if (tcp_output_segment_busy(seg)) {
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	f7ff ffa4 	bl	800c9ec <tcp_output_segment_busy>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d001      	beq.n	800caae <tcp_output_segment+0x76>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800caaa:	2300      	movs	r3, #0
 800caac:	e0ba      	b.n	800cc24 <tcp_output_segment+0x1ec>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	691c      	ldr	r4, [r3, #16]
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7f6 fc37 	bl	800332a <lwip_htonl>
 800cabc:	4603      	mov	r3, r0
 800cabe:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	691c      	ldr	r4, [r3, #16]
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cac8:	4618      	mov	r0, r3
 800caca:	f7f6 fc19 	bl	8003300 <lwip_htons>
 800cace:	4603      	mov	r3, r0
 800cad0:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad6:	68ba      	ldr	r2, [r7, #8]
 800cad8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cada:	441a      	add	r2, r3
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	691b      	ldr	r3, [r3, #16]
 800cae4:	3314      	adds	r3, #20
 800cae6:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	7b1b      	ldrb	r3, [r3, #12]
 800caec:	f003 0301 	and.w	r3, r3, #1
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d015      	beq.n	800cb20 <tcp_output_segment+0xe8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	3304      	adds	r3, #4
 800caf8:	461a      	mov	r2, r3
 800cafa:	6879      	ldr	r1, [r7, #4]
 800cafc:	f44f 7006 	mov.w	r0, #536	; 0x218
 800cb00:	f7fb fe0e 	bl	8008720 <tcp_eff_send_mss_netif>
 800cb04:	4603      	mov	r3, r0
 800cb06:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800cb08:	8b7b      	ldrh	r3, [r7, #26]
 800cb0a:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7f6 fc0b 	bl	800332a <lwip_htonl>
 800cb14:	4602      	mov	r2, r0
 800cb16:	69fb      	ldr	r3, [r7, #28]
 800cb18:	601a      	str	r2, [r3, #0]
    opts += 1;
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	3304      	adds	r3, #4
 800cb1e:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	da02      	bge.n	800cb30 <tcp_output_segment+0xf8>
    pcb->rtime = 0;
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10c      	bne.n	800cb52 <tcp_output_segment+0x11a>
    pcb->rttest = tcp_ticks;
 800cb38:	4b41      	ldr	r3, [pc, #260]	; (800cc40 <tcp_output_segment+0x208>)
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7f6 fbef 	bl	800332a <lwip_htonl>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	691b      	ldr	r3, [r3, #16]
 800cb56:	461a      	mov	r2, r3
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	1ad3      	subs	r3, r2, r3
 800cb60:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	68fa      	ldr	r2, [r7, #12]
 800cb68:	6852      	ldr	r2, [r2, #4]
 800cb6a:	8951      	ldrh	r1, [r2, #10]
 800cb6c:	8b3a      	ldrh	r2, [r7, #24]
 800cb6e:	1a8a      	subs	r2, r1, r2
 800cb70:	b292      	uxth	r2, r2
 800cb72:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	68fa      	ldr	r2, [r7, #12]
 800cb7a:	6852      	ldr	r2, [r2, #4]
 800cb7c:	8911      	ldrh	r1, [r2, #8]
 800cb7e:	8b3a      	ldrh	r2, [r7, #24]
 800cb80:	1a8a      	subs	r2, r1, r2
 800cb82:	b292      	uxth	r2, r2
 800cb84:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	68fa      	ldr	r2, [r7, #12]
 800cb8c:	6912      	ldr	r2, [r2, #16]
 800cb8e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	691b      	ldr	r3, [r3, #16]
 800cb94:	2200      	movs	r2, #0
 800cb96:	741a      	strb	r2, [r3, #16]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	691b      	ldr	r3, [r3, #16]
 800cba0:	f103 0214 	add.w	r2, r3, #20
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	7b1b      	ldrb	r3, [r3, #12]
 800cba8:	f003 0301 	and.w	r3, r3, #1
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d001      	beq.n	800cbb4 <tcp_output_segment+0x17c>
 800cbb0:	2304      	movs	r3, #4
 800cbb2:	e000      	b.n	800cbb6 <tcp_output_segment+0x17e>
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	441a      	add	r2, r3
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d00b      	beq.n	800cbd6 <tcp_output_segment+0x19e>
 800cbbe:	4b1b      	ldr	r3, [pc, #108]	; (800cc2c <tcp_output_segment+0x1f4>)
 800cbc0:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 800cbc4:	491f      	ldr	r1, [pc, #124]	; (800cc44 <tcp_output_segment+0x20c>)
 800cbc6:	481b      	ldr	r0, [pc, #108]	; (800cc34 <tcp_output_segment+0x1fc>)
 800cbc8:	f00b f934 	bl	8017e34 <iprintf>
 800cbcc:	2000      	movs	r0, #0
 800cbce:	f00b fa33 	bl	8018038 <fflush>
 800cbd2:	f00b f978 	bl	8017ec6 <abort>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	691c      	ldr	r4, [r3, #16]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800cbe2:	891a      	ldrh	r2, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800cbe4:	68b9      	ldr	r1, [r7, #8]
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	460b      	mov	r3, r1
 800cbee:	2106      	movs	r1, #6
 800cbf0:	f7f6 ffcc 	bl	8003b8c <ip_chksum_pseudo>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	6858      	ldr	r0, [r3, #4]
 800cbfc:	68b9      	ldr	r1, [r7, #8]
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	1d1c      	adds	r4, r3, #4
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	7add      	ldrb	r5, [r3, #11]
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	7a9b      	ldrb	r3, [r3, #10]
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	9202      	str	r2, [sp, #8]
 800cc0e:	2206      	movs	r2, #6
 800cc10:	9201      	str	r2, [sp, #4]
 800cc12:	9300      	str	r3, [sp, #0]
 800cc14:	462b      	mov	r3, r5
 800cc16:	4622      	mov	r2, r4
 800cc18:	f7f7 fbce 	bl	80043b8 <ip4_output_if>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800cc20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3720      	adds	r7, #32
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bdb0      	pop	{r4, r5, r7, pc}
 800cc2c:	0801bb78 	.word	0x0801bb78
 800cc30:	0801c170 	.word	0x0801c170
 800cc34:	0801bbbc 	.word	0x0801bbbc
 800cc38:	0801c190 	.word	0x0801c190
 800cc3c:	0801c1b0 	.word	0x0801c1b0
 800cc40:	20004040 	.word	0x20004040
 800cc44:	0801c1d4 	.word	0x0801c1d4

0800cc48 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800cc48:	b5b0      	push	{r4, r5, r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d10b      	bne.n	800cc6e <tcp_rexmit_rto_prepare+0x26>
 800cc56:	4b38      	ldr	r3, [pc, #224]	; (800cd38 <tcp_rexmit_rto_prepare+0xf0>)
 800cc58:	f240 6267 	movw	r2, #1639	; 0x667
 800cc5c:	4937      	ldr	r1, [pc, #220]	; (800cd3c <tcp_rexmit_rto_prepare+0xf4>)
 800cc5e:	4838      	ldr	r0, [pc, #224]	; (800cd40 <tcp_rexmit_rto_prepare+0xf8>)
 800cc60:	f00b f8e8 	bl	8017e34 <iprintf>
 800cc64:	2000      	movs	r0, #0
 800cc66:	f00b f9e7 	bl	8018038 <fflush>
 800cc6a:	f00b f92c 	bl	8017ec6 <abort>

  if (pcb->unacked == NULL) {
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d102      	bne.n	800cc7c <tcp_rexmit_rto_prepare+0x34>
    return ERR_VAL;
 800cc76:	f06f 0305 	mvn.w	r3, #5
 800cc7a:	e059      	b.n	800cd30 <tcp_rexmit_rto_prepare+0xe8>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc80:	60fb      	str	r3, [r7, #12]
 800cc82:	e00b      	b.n	800cc9c <tcp_rexmit_rto_prepare+0x54>
    if (tcp_output_segment_busy(seg)) {
 800cc84:	68f8      	ldr	r0, [r7, #12]
 800cc86:	f7ff feb1 	bl	800c9ec <tcp_output_segment_busy>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d002      	beq.n	800cc96 <tcp_rexmit_rto_prepare+0x4e>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800cc90:	f06f 0305 	mvn.w	r3, #5
 800cc94:	e04c      	b.n	800cd30 <tcp_rexmit_rto_prepare+0xe8>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	60fb      	str	r3, [r7, #12]
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d1ef      	bne.n	800cc84 <tcp_rexmit_rto_prepare+0x3c>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f7ff fea1 	bl	800c9ec <tcp_output_segment_busy>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d002      	beq.n	800ccb6 <tcp_rexmit_rto_prepare+0x6e>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ccb0:	f06f 0305 	mvn.w	r3, #5
 800ccb4:	e03c      	b.n	800cd30 <tcp_rexmit_rto_prepare+0xe8>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d104      	bne.n	800ccd0 <tcp_rexmit_rto_prepare+0x88>
    pcb->unsent_oversize = seg->oversize_left;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	895a      	ldrh	r2, [r3, #10]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	8b5b      	ldrh	r3, [r3, #26]
 800cce2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cce6:	b29a      	uxth	r2, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	691b      	ldr	r3, [r3, #16]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7f6 fb19 	bl	800332a <lwip_htonl>
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	891b      	ldrh	r3, [r3, #8]
 800ccfe:	461d      	mov	r5, r3
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	691b      	ldr	r3, [r3, #16]
 800cd04:	899b      	ldrh	r3, [r3, #12]
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7f6 faf9 	bl	8003300 <lwip_htons>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	f003 0303 	and.w	r3, r3, #3
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d001      	beq.n	800cd1e <tcp_rexmit_rto_prepare+0xd6>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e000      	b.n	800cd20 <tcp_rexmit_rto_prepare+0xd8>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	442b      	add	r3, r5
 800cd22:	18e2      	adds	r2, r4, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3710      	adds	r7, #16
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bdb0      	pop	{r4, r5, r7, pc}
 800cd38:	0801bb78 	.word	0x0801bb78
 800cd3c:	0801c1e8 	.word	0x0801c1e8
 800cd40:	0801bbbc 	.word	0x0801bbbc

0800cd44 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d10b      	bne.n	800cd6a <tcp_rexmit_rto_commit+0x26>
 800cd52:	4b10      	ldr	r3, [pc, #64]	; (800cd94 <tcp_rexmit_rto_commit+0x50>)
 800cd54:	f240 629c 	movw	r2, #1692	; 0x69c
 800cd58:	490f      	ldr	r1, [pc, #60]	; (800cd98 <tcp_rexmit_rto_commit+0x54>)
 800cd5a:	4810      	ldr	r0, [pc, #64]	; (800cd9c <tcp_rexmit_rto_commit+0x58>)
 800cd5c:	f00b f86a 	bl	8017e34 <iprintf>
 800cd60:	2000      	movs	r0, #0
 800cd62:	f00b f969 	bl	8018038 <fflush>
 800cd66:	f00b f8ae 	bl	8017ec6 <abort>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd70:	2bff      	cmp	r3, #255	; 0xff
 800cd72:	d007      	beq.n	800cd84 <tcp_rexmit_rto_commit+0x40>
    ++pcb->nrtx;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	b2da      	uxtb	r2, r3
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f7ff fc29 	bl	800c5dc <tcp_output>
}
 800cd8a:	bf00      	nop
 800cd8c:	3708      	adds	r7, #8
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop
 800cd94:	0801bb78 	.word	0x0801bb78
 800cd98:	0801c20c 	.word	0x0801c20c
 800cd9c:	0801bbbc 	.word	0x0801bbbc

0800cda0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d10b      	bne.n	800cdc6 <tcp_rexmit_rto+0x26>
 800cdae:	4b0c      	ldr	r3, [pc, #48]	; (800cde0 <tcp_rexmit_rto+0x40>)
 800cdb0:	f240 62b1 	movw	r2, #1713	; 0x6b1
 800cdb4:	490b      	ldr	r1, [pc, #44]	; (800cde4 <tcp_rexmit_rto+0x44>)
 800cdb6:	480c      	ldr	r0, [pc, #48]	; (800cde8 <tcp_rexmit_rto+0x48>)
 800cdb8:	f00b f83c 	bl	8017e34 <iprintf>
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	f00b f93b 	bl	8018038 <fflush>
 800cdc2:	f00b f880 	bl	8017ec6 <abort>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f7ff ff3e 	bl	800cc48 <tcp_rexmit_rto_prepare>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d102      	bne.n	800cdd8 <tcp_rexmit_rto+0x38>
    tcp_rexmit_rto_commit(pcb);
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f7ff ffb6 	bl	800cd44 <tcp_rexmit_rto_commit>
  }
}
 800cdd8:	bf00      	nop
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	0801bb78 	.word	0x0801bb78
 800cde4:	0801c230 	.word	0x0801c230
 800cde8:	0801bbbc 	.word	0x0801bbbc

0800cdec <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800cdec:	b590      	push	{r4, r7, lr}
 800cdee:	b085      	sub	sp, #20
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d10b      	bne.n	800ce12 <tcp_rexmit+0x26>
 800cdfa:	4b32      	ldr	r3, [pc, #200]	; (800cec4 <tcp_rexmit+0xd8>)
 800cdfc:	f240 62c5 	movw	r2, #1733	; 0x6c5
 800ce00:	4931      	ldr	r1, [pc, #196]	; (800cec8 <tcp_rexmit+0xdc>)
 800ce02:	4832      	ldr	r0, [pc, #200]	; (800cecc <tcp_rexmit+0xe0>)
 800ce04:	f00b f816 	bl	8017e34 <iprintf>
 800ce08:	2000      	movs	r0, #0
 800ce0a:	f00b f915 	bl	8018038 <fflush>
 800ce0e:	f00b f85a 	bl	8017ec6 <abort>

  if (pcb->unacked == NULL) {
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d102      	bne.n	800ce20 <tcp_rexmit+0x34>
    return ERR_VAL;
 800ce1a:	f06f 0305 	mvn.w	r3, #5
 800ce1e:	e04c      	b.n	800ceba <tcp_rexmit+0xce>
  }

  seg = pcb->unacked;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce24:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ce26:	68b8      	ldr	r0, [r7, #8]
 800ce28:	f7ff fde0 	bl	800c9ec <tcp_output_segment_busy>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d002      	beq.n	800ce38 <tcp_rexmit+0x4c>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ce32:	f06f 0305 	mvn.w	r3, #5
 800ce36:	e040      	b.n	800ceba <tcp_rexmit+0xce>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	336c      	adds	r3, #108	; 0x6c
 800ce44:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ce46:	e002      	b.n	800ce4e <tcp_rexmit+0x62>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d011      	beq.n	800ce7a <tcp_rexmit+0x8e>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	691b      	ldr	r3, [r3, #16]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7f6 fa63 	bl	800332a <lwip_htonl>
 800ce64:	4604      	mov	r4, r0
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	691b      	ldr	r3, [r3, #16]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7f6 fa5c 	bl	800332a <lwip_htonl>
 800ce72:	4603      	mov	r3, r0
 800ce74:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	dbe6      	blt.n	800ce48 <tcp_rexmit+0x5c>
  }
  seg->next = *cur_seg;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	68ba      	ldr	r2, [r7, #8]
 800ce86:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d103      	bne.n	800ce98 <tcp_rexmit+0xac>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce9e:	2bff      	cmp	r3, #255	; 0xff
 800cea0:	d007      	beq.n	800ceb2 <tcp_rexmit+0xc6>
    ++pcb->nrtx;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cea8:	3301      	adds	r3, #1
 800ceaa:	b2da      	uxtb	r2, r3
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ceb8:	2300      	movs	r3, #0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3714      	adds	r7, #20
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd90      	pop	{r4, r7, pc}
 800cec2:	bf00      	nop
 800cec4:	0801bb78 	.word	0x0801bb78
 800cec8:	0801c24c 	.word	0x0801c24c
 800cecc:	0801bbbc 	.word	0x0801bbbc

0800ced0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d10b      	bne.n	800cef6 <tcp_rexmit_fast+0x26>
 800cede:	4b31      	ldr	r3, [pc, #196]	; (800cfa4 <tcp_rexmit_fast+0xd4>)
 800cee0:	f240 62fd 	movw	r2, #1789	; 0x6fd
 800cee4:	4930      	ldr	r1, [pc, #192]	; (800cfa8 <tcp_rexmit_fast+0xd8>)
 800cee6:	4831      	ldr	r0, [pc, #196]	; (800cfac <tcp_rexmit_fast+0xdc>)
 800cee8:	f00a ffa4 	bl	8017e34 <iprintf>
 800ceec:	2000      	movs	r0, #0
 800ceee:	f00b f8a3 	bl	8018038 <fflush>
 800cef2:	f00a ffe8 	bl	8017ec6 <abort>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d04d      	beq.n	800cf9a <tcp_rexmit_fast+0xca>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	8b5b      	ldrh	r3, [r3, #26]
 800cf02:	f003 0304 	and.w	r3, r3, #4
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d147      	bne.n	800cf9a <tcp_rexmit_fast+0xca>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f7ff ff6e 	bl	800cdec <tcp_rexmit>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d141      	bne.n	800cf9a <tcp_rexmit_fast+0xca>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d207      	bcs.n	800cf36 <tcp_rexmit_fast+0x66>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cf2c:	0fda      	lsrs	r2, r3, #31
 800cf2e:	4413      	add	r3, r2
 800cf30:	105b      	asrs	r3, r3, #1
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	e006      	b.n	800cf44 <tcp_rexmit_fast+0x74>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf3c:	0fda      	lsrs	r2, r3, #31
 800cf3e:	4413      	add	r3, r2
 800cf40:	105b      	asrs	r3, r3, #1
 800cf42:	b29b      	uxth	r3, r3
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cf50:	461a      	mov	r2, r3
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf56:	005b      	lsls	r3, r3, #1
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d206      	bcs.n	800cf6a <tcp_rexmit_fast+0x9a>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf60:	005b      	lsls	r3, r3, #1
 800cf62:	b29a      	uxth	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf74:	4619      	mov	r1, r3
 800cf76:	0049      	lsls	r1, r1, #1
 800cf78:	440b      	add	r3, r1
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	4413      	add	r3, r2
 800cf7e:	b29a      	uxth	r2, r3
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	8b5b      	ldrh	r3, [r3, #26]
 800cf8a:	f043 0304 	orr.w	r3, r3, #4
 800cf8e:	b29a      	uxth	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800cf9a:	bf00      	nop
 800cf9c:	3708      	adds	r7, #8
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}
 800cfa2:	bf00      	nop
 800cfa4:	0801bb78 	.word	0x0801bb78
 800cfa8:	0801c264 	.word	0x0801c264
 800cfac:	0801bbbc 	.word	0x0801bbbc

0800cfb0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b086      	sub	sp, #24
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	60f8      	str	r0, [r7, #12]
 800cfb8:	607b      	str	r3, [r7, #4]
 800cfba:	460b      	mov	r3, r1
 800cfbc:	817b      	strh	r3, [r7, #10]
 800cfbe:	4613      	mov	r3, r2
 800cfc0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cfc2:	897a      	ldrh	r2, [r7, #10]
 800cfc4:	893b      	ldrh	r3, [r7, #8]
 800cfc6:	4413      	add	r3, r2
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	3314      	adds	r3, #20
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	2022      	movs	r0, #34	; 0x22
 800cfd6:	f7f8 fc79 	bl	80058cc <pbuf_alloc>
 800cfda:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d053      	beq.n	800d08a <tcp_output_alloc_header_common+0xda>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	895b      	ldrh	r3, [r3, #10]
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	897b      	ldrh	r3, [r7, #10]
 800cfea:	3314      	adds	r3, #20
 800cfec:	429a      	cmp	r2, r3
 800cfee:	da0b      	bge.n	800d008 <tcp_output_alloc_header_common+0x58>
 800cff0:	4b28      	ldr	r3, [pc, #160]	; (800d094 <tcp_output_alloc_header_common+0xe4>)
 800cff2:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800cff6:	4928      	ldr	r1, [pc, #160]	; (800d098 <tcp_output_alloc_header_common+0xe8>)
 800cff8:	4828      	ldr	r0, [pc, #160]	; (800d09c <tcp_output_alloc_header_common+0xec>)
 800cffa:	f00a ff1b 	bl	8017e34 <iprintf>
 800cffe:	2000      	movs	r0, #0
 800d000:	f00b f81a 	bl	8018038 <fflush>
 800d004:	f00a ff5f 	bl	8017ec6 <abort>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d00e:	8c3b      	ldrh	r3, [r7, #32]
 800d010:	4618      	mov	r0, r3
 800d012:	f7f6 f975 	bl	8003300 <lwip_htons>
 800d016:	4603      	mov	r3, r0
 800d018:	461a      	mov	r2, r3
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d01e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d020:	4618      	mov	r0, r3
 800d022:	f7f6 f96d 	bl	8003300 <lwip_htons>
 800d026:	4603      	mov	r3, r0
 800d028:	461a      	mov	r2, r3
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f7f6 f978 	bl	800332a <lwip_htonl>
 800d03a:	4602      	mov	r2, r0
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d040:	897b      	ldrh	r3, [r7, #10]
 800d042:	089b      	lsrs	r3, r3, #2
 800d044:	b29b      	uxth	r3, r3
 800d046:	3305      	adds	r3, #5
 800d048:	b29b      	uxth	r3, r3
 800d04a:	031b      	lsls	r3, r3, #12
 800d04c:	b29a      	uxth	r2, r3
 800d04e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d052:	b29b      	uxth	r3, r3
 800d054:	4313      	orrs	r3, r2
 800d056:	b29b      	uxth	r3, r3
 800d058:	4618      	mov	r0, r3
 800d05a:	f7f6 f951 	bl	8003300 <lwip_htons>
 800d05e:	4603      	mov	r3, r0
 800d060:	461a      	mov	r2, r3
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d066:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d068:	4618      	mov	r0, r3
 800d06a:	f7f6 f949 	bl	8003300 <lwip_htons>
 800d06e:	4603      	mov	r3, r0
 800d070:	461a      	mov	r2, r3
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	2200      	movs	r2, #0
 800d07a:	741a      	strb	r2, [r3, #16]
 800d07c:	2200      	movs	r2, #0
 800d07e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	2200      	movs	r2, #0
 800d084:	749a      	strb	r2, [r3, #18]
 800d086:	2200      	movs	r2, #0
 800d088:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d08a:	697b      	ldr	r3, [r7, #20]
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3718      	adds	r7, #24
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	0801bb78 	.word	0x0801bb78
 800d098:	0801c284 	.word	0x0801c284
 800d09c:	0801bbbc 	.word	0x0801bbbc

0800d0a0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d0a0:	b5b0      	push	{r4, r5, r7, lr}
 800d0a2:	b08a      	sub	sp, #40	; 0x28
 800d0a4:	af04      	add	r7, sp, #16
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	607b      	str	r3, [r7, #4]
 800d0aa:	460b      	mov	r3, r1
 800d0ac:	817b      	strh	r3, [r7, #10]
 800d0ae:	4613      	mov	r3, r2
 800d0b0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d10b      	bne.n	800d0d0 <tcp_output_alloc_header+0x30>
 800d0b8:	4b17      	ldr	r3, [pc, #92]	; (800d118 <tcp_output_alloc_header+0x78>)
 800d0ba:	f240 7246 	movw	r2, #1862	; 0x746
 800d0be:	4917      	ldr	r1, [pc, #92]	; (800d11c <tcp_output_alloc_header+0x7c>)
 800d0c0:	4817      	ldr	r0, [pc, #92]	; (800d120 <tcp_output_alloc_header+0x80>)
 800d0c2:	f00a feb7 	bl	8017e34 <iprintf>
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	f00a ffb6 	bl	8018038 <fflush>
 800d0cc:	f00a fefb 	bl	8017ec6 <abort>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	8adb      	ldrh	r3, [r3, #22]
 800d0d8:	68fa      	ldr	r2, [r7, #12]
 800d0da:	8b12      	ldrh	r2, [r2, #24]
 800d0dc:	68f9      	ldr	r1, [r7, #12]
 800d0de:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d0e0:	893d      	ldrh	r5, [r7, #8]
 800d0e2:	897c      	ldrh	r4, [r7, #10]
 800d0e4:	9103      	str	r1, [sp, #12]
 800d0e6:	2110      	movs	r1, #16
 800d0e8:	9102      	str	r1, [sp, #8]
 800d0ea:	9201      	str	r2, [sp, #4]
 800d0ec:	9300      	str	r3, [sp, #0]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	462a      	mov	r2, r5
 800d0f2:	4621      	mov	r1, r4
 800d0f4:	f7ff ff5c 	bl	800cfb0 <tcp_output_alloc_header_common>
 800d0f8:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d006      	beq.n	800d10e <tcp_output_alloc_header+0x6e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d104:	68fa      	ldr	r2, [r7, #12]
 800d106:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d108:	441a      	add	r2, r3
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d10e:	697b      	ldr	r3, [r7, #20]
}
 800d110:	4618      	mov	r0, r3
 800d112:	3718      	adds	r7, #24
 800d114:	46bd      	mov	sp, r7
 800d116:	bdb0      	pop	{r4, r5, r7, pc}
 800d118:	0801bb78 	.word	0x0801bb78
 800d11c:	0801c2b4 	.word	0x0801c2b4
 800d120:	0801bbbc 	.word	0x0801bbbc

0800d124 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b088      	sub	sp, #32
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	4611      	mov	r1, r2
 800d130:	461a      	mov	r2, r3
 800d132:	460b      	mov	r3, r1
 800d134:	71fb      	strb	r3, [r7, #7]
 800d136:	4613      	mov	r3, r2
 800d138:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d13a:	2300      	movs	r3, #0
 800d13c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d10b      	bne.n	800d15c <tcp_output_fill_options+0x38>
 800d144:	4b1a      	ldr	r3, [pc, #104]	; (800d1b0 <tcp_output_fill_options+0x8c>)
 800d146:	f240 725a 	movw	r2, #1882	; 0x75a
 800d14a:	491a      	ldr	r1, [pc, #104]	; (800d1b4 <tcp_output_fill_options+0x90>)
 800d14c:	481a      	ldr	r0, [pc, #104]	; (800d1b8 <tcp_output_fill_options+0x94>)
 800d14e:	f00a fe71 	bl	8017e34 <iprintf>
 800d152:	2000      	movs	r0, #0
 800d154:	f00a ff70 	bl	8018038 <fflush>
 800d158:	f00a feb5 	bl	8017ec6 <abort>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d162:	69bb      	ldr	r3, [r7, #24]
 800d164:	3314      	adds	r3, #20
 800d166:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	f103 0214 	add.w	r2, r3, #20
 800d16e:	8bfb      	ldrh	r3, [r7, #30]
 800d170:	009b      	lsls	r3, r3, #2
 800d172:	4619      	mov	r1, r3
 800d174:	79fb      	ldrb	r3, [r7, #7]
 800d176:	f003 0301 	and.w	r3, r3, #1
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d001      	beq.n	800d182 <tcp_output_fill_options+0x5e>
 800d17e:	2304      	movs	r3, #4
 800d180:	e000      	b.n	800d184 <tcp_output_fill_options+0x60>
 800d182:	2300      	movs	r3, #0
 800d184:	440b      	add	r3, r1
 800d186:	441a      	add	r2, r3
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d00b      	beq.n	800d1a6 <tcp_output_fill_options+0x82>
 800d18e:	4b08      	ldr	r3, [pc, #32]	; (800d1b0 <tcp_output_fill_options+0x8c>)
 800d190:	f240 7279 	movw	r2, #1913	; 0x779
 800d194:	4909      	ldr	r1, [pc, #36]	; (800d1bc <tcp_output_fill_options+0x98>)
 800d196:	4808      	ldr	r0, [pc, #32]	; (800d1b8 <tcp_output_fill_options+0x94>)
 800d198:	f00a fe4c 	bl	8017e34 <iprintf>
 800d19c:	2000      	movs	r0, #0
 800d19e:	f00a ff4b 	bl	8018038 <fflush>
 800d1a2:	f00a fe90 	bl	8017ec6 <abort>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d1a6:	bf00      	nop
 800d1a8:	3720      	adds	r7, #32
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	0801bb78 	.word	0x0801bb78
 800d1b4:	0801c2dc 	.word	0x0801c2dc
 800d1b8:	0801bbbc 	.word	0x0801bbbc
 800d1bc:	0801c1d4 	.word	0x0801c1d4

0800d1c0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b088      	sub	sp, #32
 800d1c4:	af02      	add	r7, sp, #8
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	60b9      	str	r1, [r7, #8]
 800d1ca:	607a      	str	r2, [r7, #4]
 800d1cc:	603b      	str	r3, [r7, #0]
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10b      	bne.n	800d1ec <tcp_output_control_segment+0x2c>
 800d1d4:	4b13      	ldr	r3, [pc, #76]	; (800d224 <tcp_output_control_segment+0x64>)
 800d1d6:	f240 728a 	movw	r2, #1930	; 0x78a
 800d1da:	4913      	ldr	r1, [pc, #76]	; (800d228 <tcp_output_control_segment+0x68>)
 800d1dc:	4813      	ldr	r0, [pc, #76]	; (800d22c <tcp_output_control_segment+0x6c>)
 800d1de:	f00a fe29 	bl	8017e34 <iprintf>
 800d1e2:	2000      	movs	r0, #0
 800d1e4:	f00a ff28 	bl	8018038 <fflush>
 800d1e8:	f00a fe6d 	bl	8017ec6 <abort>

  netif = tcp_route(pcb, src, dst);
 800d1ec:	683a      	ldr	r2, [r7, #0]
 800d1ee:	6879      	ldr	r1, [r7, #4]
 800d1f0:	68f8      	ldr	r0, [r7, #12]
 800d1f2:	f7fe f97f 	bl	800b4f4 <tcp_route>
 800d1f6:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d105      	bne.n	800d20a <tcp_output_control_segment+0x4a>
    pbuf_free(p);
 800d1fe:	68b8      	ldr	r0, [r7, #8]
 800d200:	f7f8 fe08 	bl	8005e14 <pbuf_free>
    return ERR_RTE;
 800d204:	f06f 0303 	mvn.w	r3, #3
 800d208:	e008      	b.n	800d21c <tcp_output_control_segment+0x5c>
  }
  return tcp_output_control_segment_netif(pcb, p, src, dst, netif);
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	9300      	str	r3, [sp, #0]
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	687a      	ldr	r2, [r7, #4]
 800d212:	68b9      	ldr	r1, [r7, #8]
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	f000 f80b 	bl	800d230 <tcp_output_control_segment_netif>
 800d21a:	4603      	mov	r3, r0
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3718      	adds	r7, #24
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	0801bb78 	.word	0x0801bb78
 800d228:	0801c304 	.word	0x0801c304
 800d22c:	0801bbbc 	.word	0x0801bbbc

0800d230 <tcp_output_control_segment_netif>:
 */
static err_t
tcp_output_control_segment_netif(const struct tcp_pcb *pcb, struct pbuf *p,
                                 const ip_addr_t *src, const ip_addr_t *dst,
                                 struct netif *netif)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b08c      	sub	sp, #48	; 0x30
 800d234:	af04      	add	r7, sp, #16
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	607a      	str	r2, [r7, #4]
 800d23c:	603b      	str	r3, [r7, #0]
  err_t err;
  u8_t ttl, tos;

  LWIP_ASSERT("tcp_output_control_segment_netif: no netif given", netif != NULL);
 800d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d240:	2b00      	cmp	r3, #0
 800d242:	d10b      	bne.n	800d25c <tcp_output_control_segment_netif+0x2c>
 800d244:	4b20      	ldr	r3, [pc, #128]	; (800d2c8 <tcp_output_control_segment_netif+0x98>)
 800d246:	f240 72a1 	movw	r2, #1953	; 0x7a1
 800d24a:	4920      	ldr	r1, [pc, #128]	; (800d2cc <tcp_output_control_segment_netif+0x9c>)
 800d24c:	4820      	ldr	r0, [pc, #128]	; (800d2d0 <tcp_output_control_segment_netif+0xa0>)
 800d24e:	f00a fdf1 	bl	8017e34 <iprintf>
 800d252:	2000      	movs	r0, #0
 800d254:	f00a fef0 	bl	8018038 <fflush>
 800d258:	f00a fe35 	bl	8017ec6 <abort>

#if CHECKSUM_GEN_TCP
  IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
    struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	61bb      	str	r3, [r7, #24]
    tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	891a      	ldrh	r2, [r3, #8]
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	9300      	str	r3, [sp, #0]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2106      	movs	r1, #6
 800d26e:	68b8      	ldr	r0, [r7, #8]
 800d270:	f7f6 fc8c 	bl	8003b8c <ip_chksum_pseudo>
 800d274:	4603      	mov	r3, r0
 800d276:	461a      	mov	r2, r3
 800d278:	69bb      	ldr	r3, [r7, #24]
 800d27a:	821a      	strh	r2, [r3, #16]
                                      src, dst);
  }
#endif
  if (pcb != NULL) {
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d006      	beq.n	800d290 <tcp_output_control_segment_netif+0x60>
    NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
    ttl = pcb->ttl;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	7adb      	ldrb	r3, [r3, #11]
 800d286:	77fb      	strb	r3, [r7, #31]
    tos = pcb->tos;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	7a9b      	ldrb	r3, [r3, #10]
 800d28c:	77bb      	strb	r3, [r7, #30]
 800d28e:	e003      	b.n	800d298 <tcp_output_control_segment_netif+0x68>
  } else {
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ttl = TCP_TTL;
 800d290:	23ff      	movs	r3, #255	; 0xff
 800d292:	77fb      	strb	r3, [r7, #31]
    tos = 0;
 800d294:	2300      	movs	r3, #0
 800d296:	77bb      	strb	r3, [r7, #30]
  }
  TCP_STATS_INC(tcp.xmit);
  err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d298:	7ffa      	ldrb	r2, [r7, #31]
 800d29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29c:	9302      	str	r3, [sp, #8]
 800d29e:	2306      	movs	r3, #6
 800d2a0:	9301      	str	r3, [sp, #4]
 800d2a2:	7fbb      	ldrb	r3, [r7, #30]
 800d2a4:	9300      	str	r3, [sp, #0]
 800d2a6:	4613      	mov	r3, r2
 800d2a8:	683a      	ldr	r2, [r7, #0]
 800d2aa:	6879      	ldr	r1, [r7, #4]
 800d2ac:	68b8      	ldr	r0, [r7, #8]
 800d2ae:	f7f7 f883 	bl	80043b8 <ip4_output_if>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	75fb      	strb	r3, [r7, #23]
  NETIF_RESET_HINTS(netif);

  pbuf_free(p);
 800d2b6:	68b8      	ldr	r0, [r7, #8]
 800d2b8:	f7f8 fdac 	bl	8005e14 <pbuf_free>
  return err;
 800d2bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3720      	adds	r7, #32
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	0801bb78 	.word	0x0801bb78
 800d2cc:	0801c330 	.word	0x0801c330
 800d2d0:	0801bbbc 	.word	0x0801bbbc

0800d2d4 <tcp_rst_common>:

static struct pbuf *
tcp_rst_common(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
               const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
               u16_t local_port, u16_t remote_port)
{
 800d2d4:	b590      	push	{r4, r7, lr}
 800d2d6:	b08b      	sub	sp, #44	; 0x2c
 800d2d8:	af04      	add	r7, sp, #16
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	607a      	str	r2, [r7, #4]
 800d2e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d10b      	bne.n	800d300 <tcp_rst_common+0x2c>
 800d2e8:	4b23      	ldr	r3, [pc, #140]	; (800d378 <tcp_rst_common+0xa4>)
 800d2ea:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d2ee:	4923      	ldr	r1, [pc, #140]	; (800d37c <tcp_rst_common+0xa8>)
 800d2f0:	4823      	ldr	r0, [pc, #140]	; (800d380 <tcp_rst_common+0xac>)
 800d2f2:	f00a fd9f 	bl	8017e34 <iprintf>
 800d2f6:	2000      	movs	r0, #0
 800d2f8:	f00a fe9e 	bl	8018038 <fflush>
 800d2fc:	f00a fde3 	bl	8017ec6 <abort>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d302:	2b00      	cmp	r3, #0
 800d304:	d10b      	bne.n	800d31e <tcp_rst_common+0x4a>
 800d306:	4b1c      	ldr	r3, [pc, #112]	; (800d378 <tcp_rst_common+0xa4>)
 800d308:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d30c:	491d      	ldr	r1, [pc, #116]	; (800d384 <tcp_rst_common+0xb0>)
 800d30e:	481c      	ldr	r0, [pc, #112]	; (800d380 <tcp_rst_common+0xac>)
 800d310:	f00a fd90 	bl	8017e34 <iprintf>
 800d314:	2000      	movs	r0, #0
 800d316:	f00a fe8f 	bl	8018038 <fflush>
 800d31a:	f00a fdd4 	bl	8017ec6 <abort>
  /* these two are passed only for checks, disable warnings without asserts */
  LWIP_UNUSED_ARG(local_ip);
  LWIP_UNUSED_ARG(remote_ip);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d31e:	2300      	movs	r3, #0
 800d320:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d322:	f246 0308 	movw	r3, #24584	; 0x6008
 800d326:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d328:	7dfb      	ldrb	r3, [r7, #23]
 800d32a:	b29c      	uxth	r4, r3
 800d32c:	68b8      	ldr	r0, [r7, #8]
 800d32e:	f7f5 fffc 	bl	800332a <lwip_htonl>
 800d332:	4602      	mov	r2, r0
 800d334:	8abb      	ldrh	r3, [r7, #20]
 800d336:	9303      	str	r3, [sp, #12]
 800d338:	2314      	movs	r3, #20
 800d33a:	9302      	str	r3, [sp, #8]
 800d33c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d33e:	9301      	str	r3, [sp, #4]
 800d340:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	4613      	mov	r3, r2
 800d346:	2200      	movs	r2, #0
 800d348:	4621      	mov	r1, r4
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f7ff fe30 	bl	800cfb0 <tcp_output_alloc_header_common>
 800d350:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d104      	bne.n	800d362 <tcp_rst_common+0x8e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
 800d358:	480b      	ldr	r0, [pc, #44]	; (800d388 <tcp_rst_common+0xb4>)
 800d35a:	f7f3 ffca 	bl	80012f2 <lwip_win32_platform_diag>
    return NULL;
 800d35e:	2300      	movs	r3, #0
 800d360:	e006      	b.n	800d370 <tcp_rst_common+0x9c>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800d362:	2300      	movs	r3, #0
 800d364:	2200      	movs	r2, #0
 800d366:	6939      	ldr	r1, [r7, #16]
 800d368:	68f8      	ldr	r0, [r7, #12]
 800d36a:	f7ff fedb 	bl	800d124 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
  return p;
 800d36e:	693b      	ldr	r3, [r7, #16]
}
 800d370:	4618      	mov	r0, r3
 800d372:	371c      	adds	r7, #28
 800d374:	46bd      	mov	sp, r7
 800d376:	bd90      	pop	{r4, r7, pc}
 800d378:	0801bb78 	.word	0x0801bb78
 800d37c:	0801c364 	.word	0x0801c364
 800d380:	0801bbbc 	.word	0x0801bbbc
 800d384:	0801c380 	.word	0x0801c380
 800d388:	0801c39c 	.word	0x0801c39c

0800d38c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b08a      	sub	sp, #40	; 0x28
 800d390:	af04      	add	r7, sp, #16
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	607a      	str	r2, [r7, #4]
 800d398:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  
  p = tcp_rst_common(pcb, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 800d39a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d39c:	9302      	str	r3, [sp, #8]
 800d39e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3a0:	9301      	str	r3, [sp, #4]
 800d3a2:	6a3b      	ldr	r3, [r7, #32]
 800d3a4:	9300      	str	r3, [sp, #0]
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	68b9      	ldr	r1, [r7, #8]
 800d3ac:	68f8      	ldr	r0, [r7, #12]
 800d3ae:	f7ff ff91 	bl	800d2d4 <tcp_rst_common>
 800d3b2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d005      	beq.n	800d3c6 <tcp_rst+0x3a>
    tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d3ba:	6a3b      	ldr	r3, [r7, #32]
 800d3bc:	683a      	ldr	r2, [r7, #0]
 800d3be:	6979      	ldr	r1, [r7, #20]
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f7ff fefd 	bl	800d1c0 <tcp_output_control_segment>
  }
}
 800d3c6:	bf00      	nop
 800d3c8:	3718      	adds	r7, #24
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <tcp_rst_netif>:
 */
void
tcp_rst_netif(struct netif *netif, u32_t seqno, u32_t ackno,
              const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
              u16_t local_port, u16_t remote_port)
{
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b08a      	sub	sp, #40	; 0x28
 800d3d2:	af04      	add	r7, sp, #16
 800d3d4:	60f8      	str	r0, [r7, #12]
 800d3d6:	60b9      	str	r1, [r7, #8]
 800d3d8:	607a      	str	r2, [r7, #4]
 800d3da:	603b      	str	r3, [r7, #0]
  if (netif) {
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d017      	beq.n	800d412 <tcp_rst_netif+0x44>
    struct pbuf *p = tcp_rst_common(NULL, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 800d3e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d3e4:	9302      	str	r3, [sp, #8]
 800d3e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3e8:	9301      	str	r3, [sp, #4]
 800d3ea:	6a3b      	ldr	r3, [r7, #32]
 800d3ec:	9300      	str	r3, [sp, #0]
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	68b9      	ldr	r1, [r7, #8]
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	f7ff ff6d 	bl	800d2d4 <tcp_rst_common>
 800d3fa:	6178      	str	r0, [r7, #20]
    if (p != NULL) {
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d007      	beq.n	800d412 <tcp_rst_netif+0x44>
      tcp_output_control_segment_netif(NULL, p, local_ip, remote_ip, netif);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	6a3b      	ldr	r3, [r7, #32]
 800d408:	683a      	ldr	r2, [r7, #0]
 800d40a:	6979      	ldr	r1, [r7, #20]
 800d40c:	2000      	movs	r0, #0
 800d40e:	f7ff ff0f 	bl	800d230 <tcp_output_control_segment_netif>
    }
  } else {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_rst_netif: no netif given\n"));
  }
}
 800d412:	bf00      	nop
 800d414:	3718      	adds	r7, #24
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
	...

0800d41c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d41c:	b590      	push	{r4, r7, lr}
 800d41e:	b087      	sub	sp, #28
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d424:	2300      	movs	r3, #0
 800d426:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d428:	2300      	movs	r3, #0
 800d42a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d10b      	bne.n	800d44a <tcp_send_empty_ack+0x2e>
 800d432:	4b2c      	ldr	r3, [pc, #176]	; (800d4e4 <tcp_send_empty_ack+0xc8>)
 800d434:	f44f 6203 	mov.w	r2, #2096	; 0x830
 800d438:	492b      	ldr	r1, [pc, #172]	; (800d4e8 <tcp_send_empty_ack+0xcc>)
 800d43a:	482c      	ldr	r0, [pc, #176]	; (800d4ec <tcp_send_empty_ack+0xd0>)
 800d43c:	f00a fcfa 	bl	8017e34 <iprintf>
 800d440:	2000      	movs	r0, #0
 800d442:	f00a fdf9 	bl	8018038 <fflush>
 800d446:	f00a fd3e 	bl	8017ec6 <abort>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d44a:	7dfb      	ldrb	r3, [r7, #23]
 800d44c:	f003 0301 	and.w	r3, r3, #1
 800d450:	2b00      	cmp	r3, #0
 800d452:	d001      	beq.n	800d458 <tcp_send_empty_ack+0x3c>
 800d454:	2304      	movs	r3, #4
 800d456:	e000      	b.n	800d45a <tcp_send_empty_ack+0x3e>
 800d458:	2300      	movs	r3, #0
 800d45a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d45c:	7d7b      	ldrb	r3, [r7, #21]
 800d45e:	b29c      	uxth	r4, r3
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d464:	4618      	mov	r0, r3
 800d466:	f7f5 ff60 	bl	800332a <lwip_htonl>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2200      	movs	r2, #0
 800d46e:	4621      	mov	r1, r4
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f7ff fe15 	bl	800d0a0 <tcp_output_alloc_header>
 800d476:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d109      	bne.n	800d492 <tcp_send_empty_ack+0x76>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	8b5b      	ldrh	r3, [r3, #26]
 800d482:	f043 0303 	orr.w	r3, r3, #3
 800d486:	b29a      	uxth	r2, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d48c:	f06f 0301 	mvn.w	r3, #1
 800d490:	e023      	b.n	800d4da <tcp_send_empty_ack+0xbe>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d492:	7dbb      	ldrb	r3, [r7, #22]
 800d494:	7dfa      	ldrb	r2, [r7, #23]
 800d496:	6939      	ldr	r1, [r7, #16]
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f7ff fe43 	bl	800d124 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	3304      	adds	r3, #4
 800d4a4:	6939      	ldr	r1, [r7, #16]
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f7ff fe8a 	bl	800d1c0 <tcp_output_control_segment>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d4b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d007      	beq.n	800d4c8 <tcp_send_empty_ack+0xac>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	8b5b      	ldrh	r3, [r3, #26]
 800d4bc:	f043 0303 	orr.w	r3, r3, #3
 800d4c0:	b29a      	uxth	r2, r3
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	835a      	strh	r2, [r3, #26]
 800d4c6:	e006      	b.n	800d4d6 <tcp_send_empty_ack+0xba>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	8b5b      	ldrh	r3, [r3, #26]
 800d4cc:	f023 0303 	bic.w	r3, r3, #3
 800d4d0:	b29a      	uxth	r2, r3
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d4d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	371c      	adds	r7, #28
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd90      	pop	{r4, r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	0801bb78 	.word	0x0801bb78
 800d4e8:	0801c3cc 	.word	0x0801c3cc
 800d4ec:	0801bbbc 	.word	0x0801bbbc

0800d4f0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d4f0:	b590      	push	{r4, r7, lr}
 800d4f2:	b089      	sub	sp, #36	; 0x24
 800d4f4:	af02      	add	r7, sp, #8
 800d4f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10b      	bne.n	800d51a <tcp_keepalive+0x2a>
 800d502:	4b35      	ldr	r3, [pc, #212]	; (800d5d8 <tcp_keepalive+0xe8>)
 800d504:	f640 026a 	movw	r2, #2154	; 0x86a
 800d508:	4934      	ldr	r1, [pc, #208]	; (800d5dc <tcp_keepalive+0xec>)
 800d50a:	4835      	ldr	r0, [pc, #212]	; (800d5e0 <tcp_keepalive+0xf0>)
 800d50c:	f00a fc92 	bl	8017e34 <iprintf>
 800d510:	2000      	movs	r0, #0
 800d512:	f00a fd91 	bl	8018038 <fflush>
 800d516:	f00a fcd6 	bl	8017ec6 <abort>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: sending KEEPALIVE probe to "));
 800d51a:	4832      	ldr	r0, [pc, #200]	; (800d5e4 <tcp_keepalive+0xf4>)
 800d51c:	f7f3 fee9 	bl	80012f2 <lwip_win32_platform_diag>
  ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	b2db      	uxtb	r3, r3
 800d526:	4619      	mov	r1, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	0a1b      	lsrs	r3, r3, #8
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	461a      	mov	r2, r3
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	0c1b      	lsrs	r3, r3, #16
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	4618      	mov	r0, r3
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	685b      	ldr	r3, [r3, #4]
 800d540:	0e1b      	lsrs	r3, r3, #24
 800d542:	b2db      	uxtb	r3, r3
 800d544:	9300      	str	r3, [sp, #0]
 800d546:	4603      	mov	r3, r0
 800d548:	4827      	ldr	r0, [pc, #156]	; (800d5e8 <tcp_keepalive+0xf8>)
 800d54a:	f7f3 fed2 	bl	80012f2 <lwip_win32_platform_diag>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 800d54e:	4827      	ldr	r0, [pc, #156]	; (800d5ec <tcp_keepalive+0xfc>)
 800d550:	f7f3 fecf 	bl	80012f2 <lwip_win32_platform_diag>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
 800d554:	4b26      	ldr	r3, [pc, #152]	; (800d5f0 <tcp_keepalive+0x100>)
 800d556:	6819      	ldr	r1, [r3, #0]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6a1a      	ldr	r2, [r3, #32]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d562:	4824      	ldr	r0, [pc, #144]	; (800d5f4 <tcp_keepalive+0x104>)
 800d564:	f7f3 fec5 	bl	80012f2 <lwip_win32_platform_diag>
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d568:	7dfb      	ldrb	r3, [r7, #23]
 800d56a:	b29c      	uxth	r4, r3
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d570:	3b01      	subs	r3, #1
 800d572:	4618      	mov	r0, r3
 800d574:	f7f5 fed9 	bl	800332a <lwip_htonl>
 800d578:	4603      	mov	r3, r0
 800d57a:	2200      	movs	r2, #0
 800d57c:	4621      	mov	r1, r4
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f7ff fd8e 	bl	800d0a0 <tcp_output_alloc_header>
 800d584:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d105      	bne.n	800d598 <tcp_keepalive+0xa8>
    LWIP_DEBUGF(TCP_DEBUG,
 800d58c:	481a      	ldr	r0, [pc, #104]	; (800d5f8 <tcp_keepalive+0x108>)
 800d58e:	f7f3 feb0 	bl	80012f2 <lwip_win32_platform_diag>
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d592:	f04f 33ff 	mov.w	r3, #4294967295
 800d596:	e01a      	b.n	800d5ce <tcp_keepalive+0xde>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800d598:	2300      	movs	r3, #0
 800d59a:	2200      	movs	r2, #0
 800d59c:	6939      	ldr	r1, [r7, #16]
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f7ff fdc0 	bl	800d124 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	3304      	adds	r3, #4
 800d5aa:	6939      	ldr	r1, [r7, #16]
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f7ff fe07 	bl	800d1c0 <tcp_output_control_segment>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5ba:	1e59      	subs	r1, r3, #1
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5c4:	480d      	ldr	r0, [pc, #52]	; (800d5fc <tcp_keepalive+0x10c>)
 800d5c6:	f7f3 fe94 	bl	80012f2 <lwip_win32_platform_diag>
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d5ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	371c      	adds	r7, #28
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd90      	pop	{r4, r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	0801bb78 	.word	0x0801bb78
 800d5dc:	0801c3ec 	.word	0x0801c3ec
 800d5e0:	0801bbbc 	.word	0x0801bbbc
 800d5e4:	0801c408 	.word	0x0801c408
 800d5e8:	0801c434 	.word	0x0801c434
 800d5ec:	0801c444 	.word	0x0801c444
 800d5f0:	20004040 	.word	0x20004040
 800d5f4:	0801c448 	.word	0x0801c448
 800d5f8:	0801c48c 	.word	0x0801c48c
 800d5fc:	0801c4c0 	.word	0x0801c4c0

0800d600 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d600:	b590      	push	{r4, r7, lr}
 800d602:	b08d      	sub	sp, #52	; 0x34
 800d604:	af02      	add	r7, sp, #8
 800d606:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d608:	2300      	movs	r3, #0
 800d60a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d10b      	bne.n	800d62c <tcp_zero_window_probe+0x2c>
 800d614:	4b68      	ldr	r3, [pc, #416]	; (800d7b8 <tcp_zero_window_probe+0x1b8>)
 800d616:	f640 0295 	movw	r2, #2197	; 0x895
 800d61a:	4968      	ldr	r1, [pc, #416]	; (800d7bc <tcp_zero_window_probe+0x1bc>)
 800d61c:	4868      	ldr	r0, [pc, #416]	; (800d7c0 <tcp_zero_window_probe+0x1c0>)
 800d61e:	f00a fc09 	bl	8017e34 <iprintf>
 800d622:	2000      	movs	r0, #0
 800d624:	f00a fd08 	bl	8018038 <fflush>
 800d628:	f00a fc4d 	bl	8017ec6 <abort>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: sending ZERO WINDOW probe to "));
 800d62c:	4865      	ldr	r0, [pc, #404]	; (800d7c4 <tcp_zero_window_probe+0x1c4>)
 800d62e:	f7f3 fe60 	bl	80012f2 <lwip_win32_platform_diag>
  ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	b2db      	uxtb	r3, r3
 800d638:	4619      	mov	r1, r3
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	0a1b      	lsrs	r3, r3, #8
 800d640:	b2db      	uxtb	r3, r3
 800d642:	461a      	mov	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	0c1b      	lsrs	r3, r3, #16
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	4618      	mov	r0, r3
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	0e1b      	lsrs	r3, r3, #24
 800d654:	b2db      	uxtb	r3, r3
 800d656:	9300      	str	r3, [sp, #0]
 800d658:	4603      	mov	r3, r0
 800d65a:	485b      	ldr	r0, [pc, #364]	; (800d7c8 <tcp_zero_window_probe+0x1c8>)
 800d65c:	f7f3 fe49 	bl	80012f2 <lwip_win32_platform_diag>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 800d660:	485a      	ldr	r0, [pc, #360]	; (800d7cc <tcp_zero_window_probe+0x1cc>)
 800d662:	f7f3 fe46 	bl	80012f2 <lwip_win32_platform_diag>

  LWIP_DEBUGF(TCP_DEBUG,
 800d666:	4b5a      	ldr	r3, [pc, #360]	; (800d7d0 <tcp_zero_window_probe+0x1d0>)
 800d668:	6819      	ldr	r1, [r3, #0]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6a1a      	ldr	r2, [r3, #32]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d674:	4857      	ldr	r0, [pc, #348]	; (800d7d4 <tcp_zero_window_probe+0x1d4>)
 800d676:	f7f3 fe3c 	bl	80012f2 <lwip_win32_platform_diag>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d67e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d680:	6a3b      	ldr	r3, [r7, #32]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d101      	bne.n	800d68a <tcp_zero_window_probe+0x8a>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d686:	2300      	movs	r3, #0
 800d688:	e092      	b.n	800d7b0 <tcp_zero_window_probe+0x1b0>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d690:	2bff      	cmp	r3, #255	; 0xff
 800d692:	d007      	beq.n	800d6a4 <tcp_zero_window_probe+0xa4>
    ++pcb->persist_probe;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d69a:	3301      	adds	r3, #1
 800d69c:	b2da      	uxtb	r2, r3
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d6a4:	6a3b      	ldr	r3, [r7, #32]
 800d6a6:	691b      	ldr	r3, [r3, #16]
 800d6a8:	899b      	ldrh	r3, [r3, #12]
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7f5 fe27 	bl	8003300 <lwip_htons>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	b2db      	uxtb	r3, r3
 800d6b6:	f003 0301 	and.w	r3, r3, #1
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d005      	beq.n	800d6ca <tcp_zero_window_probe+0xca>
 800d6be:	6a3b      	ldr	r3, [r7, #32]
 800d6c0:	891b      	ldrh	r3, [r3, #8]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d101      	bne.n	800d6ca <tcp_zero_window_probe+0xca>
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e000      	b.n	800d6cc <tcp_zero_window_probe+0xcc>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d6ce:	7ffb      	ldrb	r3, [r7, #31]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	bf0c      	ite	eq
 800d6d4:	2301      	moveq	r3, #1
 800d6d6:	2300      	movne	r3, #0
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d6dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6e0:	b299      	uxth	r1, r3
 800d6e2:	6a3b      	ldr	r3, [r7, #32]
 800d6e4:	691b      	ldr	r3, [r3, #16]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	8bba      	ldrh	r2, [r7, #28]
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f7ff fcd8 	bl	800d0a0 <tcp_output_alloc_header>
 800d6f0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d6f2:	69bb      	ldr	r3, [r7, #24]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d105      	bne.n	800d704 <tcp_zero_window_probe+0x104>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
 800d6f8:	4837      	ldr	r0, [pc, #220]	; (800d7d8 <tcp_zero_window_probe+0x1d8>)
 800d6fa:	f7f3 fdfa 	bl	80012f2 <lwip_win32_platform_diag>
    return ERR_MEM;
 800d6fe:	f04f 33ff 	mov.w	r3, #4294967295
 800d702:	e055      	b.n	800d7b0 <tcp_zero_window_probe+0x1b0>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d70a:	7ffb      	ldrb	r3, [r7, #31]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d011      	beq.n	800d734 <tcp_zero_window_probe+0x134>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	899b      	ldrh	r3, [r3, #12]
 800d714:	b29b      	uxth	r3, r3
 800d716:	b21b      	sxth	r3, r3
 800d718:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d71c:	b21c      	sxth	r4, r3
 800d71e:	2011      	movs	r0, #17
 800d720:	f7f5 fdee 	bl	8003300 <lwip_htons>
 800d724:	4603      	mov	r3, r0
 800d726:	b21b      	sxth	r3, r3
 800d728:	4323      	orrs	r3, r4
 800d72a:	b21b      	sxth	r3, r3
 800d72c:	b29a      	uxth	r2, r3
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	819a      	strh	r2, [r3, #12]
 800d732:	e010      	b.n	800d756 <tcp_zero_window_probe+0x156>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d734:	69bb      	ldr	r3, [r7, #24]
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	3314      	adds	r3, #20
 800d73a:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d73c:	6a3b      	ldr	r3, [r7, #32]
 800d73e:	6858      	ldr	r0, [r3, #4]
 800d740:	6a3b      	ldr	r3, [r7, #32]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	891a      	ldrh	r2, [r3, #8]
 800d746:	6a3b      	ldr	r3, [r7, #32]
 800d748:	891b      	ldrh	r3, [r3, #8]
 800d74a:	1ad3      	subs	r3, r2, r3
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	2201      	movs	r2, #1
 800d750:	6939      	ldr	r1, [r7, #16]
 800d752:	f7f8 fdff 	bl	8006354 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d756:	6a3b      	ldr	r3, [r7, #32]
 800d758:	691b      	ldr	r3, [r3, #16]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7f5 fde4 	bl	800332a <lwip_htonl>
 800d762:	4603      	mov	r3, r0
 800d764:	3301      	adds	r3, #1
 800d766:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	1ad3      	subs	r3, r2, r3
 800d770:	2b00      	cmp	r3, #0
 800d772:	da02      	bge.n	800d77a <tcp_zero_window_probe+0x17a>
    pcb->snd_nxt = snd_nxt;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	68fa      	ldr	r2, [r7, #12]
 800d778:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800d77a:	2300      	movs	r3, #0
 800d77c:	2200      	movs	r2, #0
 800d77e:	69b9      	ldr	r1, [r7, #24]
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f7ff fccf 	bl	800d124 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	3304      	adds	r3, #4
 800d78c:	69b9      	ldr	r1, [r7, #24]
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f7ff fd16 	bl	800d1c0 <tcp_output_control_segment>
 800d794:	4603      	mov	r3, r0
 800d796:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d79c:	1e59      	subs	r1, r3, #1
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7a2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d7a6:	480d      	ldr	r0, [pc, #52]	; (800d7dc <tcp_zero_window_probe+0x1dc>)
 800d7a8:	f7f3 fda3 	bl	80012f2 <lwip_win32_platform_diag>
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d7ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	372c      	adds	r7, #44	; 0x2c
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd90      	pop	{r4, r7, pc}
 800d7b8:	0801bb78 	.word	0x0801bb78
 800d7bc:	0801c4ec 	.word	0x0801c4ec
 800d7c0:	0801bbbc 	.word	0x0801bbbc
 800d7c4:	0801c510 	.word	0x0801c510
 800d7c8:	0801c434 	.word	0x0801c434
 800d7cc:	0801c444 	.word	0x0801c444
 800d7d0:	20004040 	.word	0x20004040
 800d7d4:	0801c548 	.word	0x0801c548
 800d7d8:	0801c594 	.word	0x0801c594
 800d7dc:	0801c5c0 	.word	0x0801c5c0

0800d7e0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d7e8:	f7f9 f8d6 	bl	8006998 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d7ec:	4b0a      	ldr	r3, [pc, #40]	; (800d818 <tcpip_tcp_timer+0x38>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d103      	bne.n	800d7fc <tcpip_tcp_timer+0x1c>
 800d7f4:	4b09      	ldr	r3, [pc, #36]	; (800d81c <tcpip_tcp_timer+0x3c>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d005      	beq.n	800d808 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	4908      	ldr	r1, [pc, #32]	; (800d820 <tcpip_tcp_timer+0x40>)
 800d800:	20fa      	movs	r0, #250	; 0xfa
 800d802:	f000 f8e9 	bl	800d9d8 <sys_timeout>
 800d806:	e002      	b.n	800d80e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d808:	4b06      	ldr	r3, [pc, #24]	; (800d824 <tcpip_tcp_timer+0x44>)
 800d80a:	2200      	movs	r2, #0
 800d80c:	601a      	str	r2, [r3, #0]
  }
}
 800d80e:	bf00      	nop
 800d810:	3708      	adds	r7, #8
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	2000403c 	.word	0x2000403c
 800d81c:	2000404c 	.word	0x2000404c
 800d820:	0800d7e1 	.word	0x0800d7e1
 800d824:	20000c2c 	.word	0x20000c2c

0800d828 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d82c:	4b0a      	ldr	r3, [pc, #40]	; (800d858 <tcp_timer_needed+0x30>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d10f      	bne.n	800d854 <tcp_timer_needed+0x2c>
 800d834:	4b09      	ldr	r3, [pc, #36]	; (800d85c <tcp_timer_needed+0x34>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d103      	bne.n	800d844 <tcp_timer_needed+0x1c>
 800d83c:	4b08      	ldr	r3, [pc, #32]	; (800d860 <tcp_timer_needed+0x38>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d007      	beq.n	800d854 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d844:	4b04      	ldr	r3, [pc, #16]	; (800d858 <tcp_timer_needed+0x30>)
 800d846:	2201      	movs	r2, #1
 800d848:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d84a:	2200      	movs	r2, #0
 800d84c:	4905      	ldr	r1, [pc, #20]	; (800d864 <tcp_timer_needed+0x3c>)
 800d84e:	20fa      	movs	r0, #250	; 0xfa
 800d850:	f000 f8c2 	bl	800d9d8 <sys_timeout>
  }
}
 800d854:	bf00      	nop
 800d856:	bd80      	pop	{r7, pc}
 800d858:	20000c2c 	.word	0x20000c2c
 800d85c:	2000403c 	.word	0x2000403c
 800d860:	2000404c 	.word	0x2000404c
 800d864:	0800d7e1 	.word	0x0800d7e1

0800d868 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b086      	sub	sp, #24
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	60f8      	str	r0, [r7, #12]
 800d870:	60b9      	str	r1, [r7, #8]
 800d872:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d874:	2009      	movs	r0, #9
 800d876:	f7f7 fc4f 	bl	8005118 <memp_malloc>
 800d87a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d10d      	bne.n	800d89e <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d14d      	bne.n	800d924 <sys_timeout_abs+0xbc>
 800d888:	4b28      	ldr	r3, [pc, #160]	; (800d92c <sys_timeout_abs+0xc4>)
 800d88a:	22be      	movs	r2, #190	; 0xbe
 800d88c:	4928      	ldr	r1, [pc, #160]	; (800d930 <sys_timeout_abs+0xc8>)
 800d88e:	4829      	ldr	r0, [pc, #164]	; (800d934 <sys_timeout_abs+0xcc>)
 800d890:	f00a fad0 	bl	8017e34 <iprintf>
 800d894:	2000      	movs	r0, #0
 800d896:	f00a fbcf 	bl	8018038 <fflush>
 800d89a:	f00a fb14 	bl	8017ec6 <abort>
    return;
  }

  timeout->next = NULL;
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	68ba      	ldr	r2, [r7, #8]
 800d8a8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	68fa      	ldr	r2, [r7, #12]
 800d8b4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d8b6:	4b20      	ldr	r3, [pc, #128]	; (800d938 <sys_timeout_abs+0xd0>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d103      	bne.n	800d8c6 <sys_timeout_abs+0x5e>
    next_timeout = timeout;
 800d8be:	4a1e      	ldr	r2, [pc, #120]	; (800d938 <sys_timeout_abs+0xd0>)
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	6013      	str	r3, [r2, #0]
    return;
 800d8c4:	e02f      	b.n	800d926 <sys_timeout_abs+0xbe>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	685a      	ldr	r2, [r3, #4]
 800d8ca:	4b1b      	ldr	r3, [pc, #108]	; (800d938 <sys_timeout_abs+0xd0>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	1ad3      	subs	r3, r2, r3
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	da07      	bge.n	800d8e6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d8d6:	4b18      	ldr	r3, [pc, #96]	; (800d938 <sys_timeout_abs+0xd0>)
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d8de:	4a16      	ldr	r2, [pc, #88]	; (800d938 <sys_timeout_abs+0xd0>)
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	6013      	str	r3, [r2, #0]
 800d8e4:	e01f      	b.n	800d926 <sys_timeout_abs+0xbe>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d8e6:	4b14      	ldr	r3, [pc, #80]	; (800d938 <sys_timeout_abs+0xd0>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	617b      	str	r3, [r7, #20]
 800d8ec:	e016      	b.n	800d91c <sys_timeout_abs+0xb4>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d007      	beq.n	800d906 <sys_timeout_abs+0x9e>
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	685a      	ldr	r2, [r3, #4]
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	1ad3      	subs	r3, r2, r3
 800d902:	2b00      	cmp	r3, #0
 800d904:	da07      	bge.n	800d916 <sys_timeout_abs+0xae>
        timeout->next = t->next;
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	693a      	ldr	r2, [r7, #16]
 800d912:	601a      	str	r2, [r3, #0]
        break;
 800d914:	e007      	b.n	800d926 <sys_timeout_abs+0xbe>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	617b      	str	r3, [r7, #20]
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d1e5      	bne.n	800d8ee <sys_timeout_abs+0x86>
 800d922:	e000      	b.n	800d926 <sys_timeout_abs+0xbe>
    return;
 800d924:	bf00      	nop
      }
    }
  }
}
 800d926:	3718      	adds	r7, #24
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	0801c5f4 	.word	0x0801c5f4
 800d930:	0801c618 	.word	0x0801c618
 800d934:	0801c658 	.word	0x0801c658
 800d938:	20000c24 	.word	0x20000c24

0800d93c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b086      	sub	sp, #24
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	4798      	blx	r3

  now = sys_now();
 800d94e:	f7f3 fcdb 	bl	8001308 <sys_now>
 800d952:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	4b0d      	ldr	r3, [pc, #52]	; (800d990 <lwip_cyclic_timer+0x54>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4413      	add	r3, r2
 800d95e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d960:	68fa      	ldr	r2, [r7, #12]
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	1ad3      	subs	r3, r2, r3
 800d966:	2b00      	cmp	r3, #0
 800d968:	da09      	bge.n	800d97e <lwip_cyclic_timer+0x42>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	4413      	add	r3, r2
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	4907      	ldr	r1, [pc, #28]	; (800d994 <lwip_cyclic_timer+0x58>)
 800d976:	4618      	mov	r0, r3
 800d978:	f7ff ff76 	bl	800d868 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d97c:	e004      	b.n	800d988 <lwip_cyclic_timer+0x4c>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	4904      	ldr	r1, [pc, #16]	; (800d994 <lwip_cyclic_timer+0x58>)
 800d982:	68f8      	ldr	r0, [r7, #12]
 800d984:	f7ff ff70 	bl	800d868 <sys_timeout_abs>
}
 800d988:	bf00      	nop
 800d98a:	3718      	adds	r7, #24
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	20000c28 	.word	0x20000c28
 800d994:	0800d93d 	.word	0x0800d93d

0800d998 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d99e:	2301      	movs	r3, #1
 800d9a0:	607b      	str	r3, [r7, #4]
 800d9a2:	e00e      	b.n	800d9c2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d9a4:	4a0a      	ldr	r2, [pc, #40]	; (800d9d0 <sys_timeouts_init+0x38>)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	00db      	lsls	r3, r3, #3
 800d9b0:	4a07      	ldr	r2, [pc, #28]	; (800d9d0 <sys_timeouts_init+0x38>)
 800d9b2:	4413      	add	r3, r2
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	4907      	ldr	r1, [pc, #28]	; (800d9d4 <sys_timeouts_init+0x3c>)
 800d9b8:	f000 f80e 	bl	800d9d8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	3301      	adds	r3, #1
 800d9c0:	607b      	str	r3, [r7, #4]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	d9ed      	bls.n	800d9a4 <sys_timeouts_init+0xc>
  }
}
 800d9c8:	bf00      	nop
 800d9ca:	3708      	adds	r7, #8
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	0801db98 	.word	0x0801db98
 800d9d4:	0800d93d 	.word	0x0800d93d

0800d9d8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b086      	sub	sp, #24
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9ea:	d30b      	bcc.n	800da04 <sys_timeout+0x2c>
 800d9ec:	4b0d      	ldr	r3, [pc, #52]	; (800da24 <sys_timeout+0x4c>)
 800d9ee:	f240 1229 	movw	r2, #297	; 0x129
 800d9f2:	490d      	ldr	r1, [pc, #52]	; (800da28 <sys_timeout+0x50>)
 800d9f4:	480d      	ldr	r0, [pc, #52]	; (800da2c <sys_timeout+0x54>)
 800d9f6:	f00a fa1d 	bl	8017e34 <iprintf>
 800d9fa:	2000      	movs	r0, #0
 800d9fc:	f00a fb1c 	bl	8018038 <fflush>
 800da00:	f00a fa61 	bl	8017ec6 <abort>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */
 800da04:	f7f3 fc80 	bl	8001308 <sys_now>
 800da08:	4602      	mov	r2, r0
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	4413      	add	r3, r2
 800da0e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800da10:	687a      	ldr	r2, [r7, #4]
 800da12:	68b9      	ldr	r1, [r7, #8]
 800da14:	6978      	ldr	r0, [r7, #20]
 800da16:	f7ff ff27 	bl	800d868 <sys_timeout_abs>
#endif
}
 800da1a:	bf00      	nop
 800da1c:	3718      	adds	r7, #24
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	0801c5f4 	.word	0x0801c5f4
 800da28:	0801c680 	.word	0x0801c680
 800da2c:	0801c658 	.word	0x0801c658

0800da30 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800da3a:	4b19      	ldr	r3, [pc, #100]	; (800daa0 <sys_untimeout+0x70>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d02a      	beq.n	800da98 <sys_untimeout+0x68>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800da42:	4b17      	ldr	r3, [pc, #92]	; (800daa0 <sys_untimeout+0x70>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	60bb      	str	r3, [r7, #8]
 800da48:	2300      	movs	r3, #0
 800da4a:	60fb      	str	r3, [r7, #12]
 800da4c:	e01f      	b.n	800da8e <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	689a      	ldr	r2, [r3, #8]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	429a      	cmp	r2, r3
 800da56:	d115      	bne.n	800da84 <sys_untimeout+0x54>
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	68da      	ldr	r2, [r3, #12]
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d110      	bne.n	800da84 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d104      	bne.n	800da72 <sys_untimeout+0x42>
        next_timeout = t->next;
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a0c      	ldr	r2, [pc, #48]	; (800daa0 <sys_untimeout+0x70>)
 800da6e:	6013      	str	r3, [r2, #0]
 800da70:	e003      	b.n	800da7a <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 800da7a:	68b9      	ldr	r1, [r7, #8]
 800da7c:	2009      	movs	r0, #9
 800da7e:	f7f7 fbb5 	bl	80051ec <memp_free>
      return;
 800da82:	e00a      	b.n	800da9a <sys_untimeout+0x6a>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	60fb      	str	r3, [r7, #12]
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	60bb      	str	r3, [r7, #8]
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d1dc      	bne.n	800da4e <sys_untimeout+0x1e>
    }
  }
  return;
 800da94:	bf00      	nop
 800da96:	e000      	b.n	800da9a <sys_untimeout+0x6a>
    return;
 800da98:	bf00      	nop
}
 800da9a:	3710      	adds	r7, #16
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	20000c24 	.word	0x20000c24

0800daa4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800daaa:	f7f3 fc2d 	bl	8001308 <sys_now>
 800daae:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800dab0:	4b15      	ldr	r3, [pc, #84]	; (800db08 <sys_check_timeouts+0x64>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d01e      	beq.n	800dafa <sys_check_timeouts+0x56>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	1ad3      	subs	r3, r2, r3
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	db1a      	blt.n	800dafe <sys_check_timeouts+0x5a>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a0e      	ldr	r2, [pc, #56]	; (800db08 <sys_check_timeouts+0x64>)
 800dace:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	689b      	ldr	r3, [r3, #8]
 800dad4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	68db      	ldr	r3, [r3, #12]
 800dada:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	4a0a      	ldr	r2, [pc, #40]	; (800db0c <sys_check_timeouts+0x68>)
 800dae2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800dae4:	68b9      	ldr	r1, [r7, #8]
 800dae6:	2009      	movs	r0, #9
 800dae8:	f7f7 fb80 	bl	80051ec <memp_free>
    if (handler != NULL) {
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d0de      	beq.n	800dab0 <sys_check_timeouts+0xc>
      handler(arg);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6838      	ldr	r0, [r7, #0]
 800daf6:	4798      	blx	r3
  do {
 800daf8:	e7da      	b.n	800dab0 <sys_check_timeouts+0xc>
      return;
 800dafa:	bf00      	nop
 800dafc:	e000      	b.n	800db00 <sys_check_timeouts+0x5c>
      return;
 800dafe:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800db00:	3710      	adds	r7, #16
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	20000c24 	.word	0x20000c24
 800db0c:	20000c28 	.word	0x20000c28

0800db10 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800db16:	4b16      	ldr	r3, [pc, #88]	; (800db70 <sys_timeouts_sleeptime+0x60>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d102      	bne.n	800db24 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800db1e:	f04f 33ff 	mov.w	r3, #4294967295
 800db22:	e021      	b.n	800db68 <sys_timeouts_sleeptime+0x58>
  }
  now = sys_now();
 800db24:	f7f3 fbf0 	bl	8001308 <sys_now>
 800db28:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800db2a:	4b11      	ldr	r3, [pc, #68]	; (800db70 <sys_timeouts_sleeptime+0x60>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	685a      	ldr	r2, [r3, #4]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	1ad3      	subs	r3, r2, r3
 800db34:	2b00      	cmp	r3, #0
 800db36:	da01      	bge.n	800db3c <sys_timeouts_sleeptime+0x2c>
    return 0;
 800db38:	2300      	movs	r3, #0
 800db3a:	e015      	b.n	800db68 <sys_timeouts_sleeptime+0x58>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800db3c:	4b0c      	ldr	r3, [pc, #48]	; (800db70 <sys_timeouts_sleeptime+0x60>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	685a      	ldr	r2, [r3, #4]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	1ad3      	subs	r3, r2, r3
 800db46:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	da0b      	bge.n	800db66 <sys_timeouts_sleeptime+0x56>
 800db4e:	4b09      	ldr	r3, [pc, #36]	; (800db74 <sys_timeouts_sleeptime+0x64>)
 800db50:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800db54:	4908      	ldr	r1, [pc, #32]	; (800db78 <sys_timeouts_sleeptime+0x68>)
 800db56:	4809      	ldr	r0, [pc, #36]	; (800db7c <sys_timeouts_sleeptime+0x6c>)
 800db58:	f00a f96c 	bl	8017e34 <iprintf>
 800db5c:	2000      	movs	r0, #0
 800db5e:	f00a fa6b 	bl	8018038 <fflush>
 800db62:	f00a f9b0 	bl	8017ec6 <abort>
    return ret;
 800db66:	683b      	ldr	r3, [r7, #0]
  }
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3708      	adds	r7, #8
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	20000c24 	.word	0x20000c24
 800db74:	0801c5f4 	.word	0x0801c5f4
 800db78:	0801c6b8 	.word	0x0801c6b8
 800db7c:	0801c658 	.word	0x0801c658

0800db80 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800db84:	f7f3 fbd6 	bl	8001334 <lwip_port_rand>
 800db88:	4603      	mov	r3, r0
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800db90:	b29b      	uxth	r3, r3
 800db92:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800db96:	b29a      	uxth	r2, r3
 800db98:	4b01      	ldr	r3, [pc, #4]	; (800dba0 <udp_init+0x20>)
 800db9a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800db9c:	bf00      	nop
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	20000010 	.word	0x20000010

0800dba4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b083      	sub	sp, #12
 800dba8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800dbae:	4b17      	ldr	r3, [pc, #92]	; (800dc0c <udp_new_port+0x68>)
 800dbb0:	881b      	ldrh	r3, [r3, #0]
 800dbb2:	1c5a      	adds	r2, r3, #1
 800dbb4:	b291      	uxth	r1, r2
 800dbb6:	4a15      	ldr	r2, [pc, #84]	; (800dc0c <udp_new_port+0x68>)
 800dbb8:	8011      	strh	r1, [r2, #0]
 800dbba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d103      	bne.n	800dbca <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800dbc2:	4b12      	ldr	r3, [pc, #72]	; (800dc0c <udp_new_port+0x68>)
 800dbc4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800dbc8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbca:	4b11      	ldr	r3, [pc, #68]	; (800dc10 <udp_new_port+0x6c>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	603b      	str	r3, [r7, #0]
 800dbd0:	e011      	b.n	800dbf6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	8a5a      	ldrh	r2, [r3, #18]
 800dbd6:	4b0d      	ldr	r3, [pc, #52]	; (800dc0c <udp_new_port+0x68>)
 800dbd8:	881b      	ldrh	r3, [r3, #0]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d108      	bne.n	800dbf0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800dbde:	88fb      	ldrh	r3, [r7, #6]
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	80fb      	strh	r3, [r7, #6]
 800dbe4:	88fb      	ldrh	r3, [r7, #6]
 800dbe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dbea:	d3e0      	bcc.n	800dbae <udp_new_port+0xa>
        return 0;
 800dbec:	2300      	movs	r3, #0
 800dbee:	e007      	b.n	800dc00 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	68db      	ldr	r3, [r3, #12]
 800dbf4:	603b      	str	r3, [r7, #0]
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d1ea      	bne.n	800dbd2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800dbfc:	4b03      	ldr	r3, [pc, #12]	; (800dc0c <udp_new_port+0x68>)
 800dbfe:	881b      	ldrh	r3, [r3, #0]
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	370c      	adds	r7, #12
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr
 800dc0c:	20000010 	.word	0x20000010
 800dc10:	20004054 	.word	0x20004054

0800dc14 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	60b9      	str	r1, [r7, #8]
 800dc1e:	4613      	mov	r3, r2
 800dc20:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d10a      	bne.n	800dc3e <udp_input_local_match+0x2a>
 800dc28:	4b2c      	ldr	r3, [pc, #176]	; (800dcdc <udp_input_local_match+0xc8>)
 800dc2a:	2287      	movs	r2, #135	; 0x87
 800dc2c:	492c      	ldr	r1, [pc, #176]	; (800dce0 <udp_input_local_match+0xcc>)
 800dc2e:	482d      	ldr	r0, [pc, #180]	; (800dce4 <udp_input_local_match+0xd0>)
 800dc30:	f00a f900 	bl	8017e34 <iprintf>
 800dc34:	2000      	movs	r0, #0
 800dc36:	f00a f9ff 	bl	8018038 <fflush>
 800dc3a:	f00a f944 	bl	8017ec6 <abort>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d10a      	bne.n	800dc5a <udp_input_local_match+0x46>
 800dc44:	4b25      	ldr	r3, [pc, #148]	; (800dcdc <udp_input_local_match+0xc8>)
 800dc46:	2288      	movs	r2, #136	; 0x88
 800dc48:	4927      	ldr	r1, [pc, #156]	; (800dce8 <udp_input_local_match+0xd4>)
 800dc4a:	4826      	ldr	r0, [pc, #152]	; (800dce4 <udp_input_local_match+0xd0>)
 800dc4c:	f00a f8f2 	bl	8017e34 <iprintf>
 800dc50:	2000      	movs	r0, #0
 800dc52:	f00a f9f1 	bl	8018038 <fflush>
 800dc56:	f00a f936 	bl	8017ec6 <abort>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	7a1b      	ldrb	r3, [r3, #8]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d00b      	beq.n	800dc7a <udp_input_local_match+0x66>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	7a1a      	ldrb	r2, [r3, #8]
 800dc66:	4b21      	ldr	r3, [pc, #132]	; (800dcec <udp_input_local_match+0xd8>)
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dc6e:	3301      	adds	r3, #1
 800dc70:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d001      	beq.n	800dc7a <udp_input_local_match+0x66>
    return 0;
 800dc76:	2300      	movs	r3, #0
 800dc78:	e02b      	b.n	800dcd2 <udp_input_local_match+0xbe>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800dc7a:	79fb      	ldrb	r3, [r7, #7]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d018      	beq.n	800dcb2 <udp_input_local_match+0x9e>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d013      	beq.n	800dcae <udp_input_local_match+0x9a>
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00f      	beq.n	800dcae <udp_input_local_match+0x9a>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dc8e:	4b17      	ldr	r3, [pc, #92]	; (800dcec <udp_input_local_match+0xd8>)
 800dc90:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dc92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc96:	d00a      	beq.n	800dcae <udp_input_local_match+0x9a>
            ip4_addr_net_eq(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	4b13      	ldr	r3, [pc, #76]	; (800dcec <udp_input_local_match+0xd8>)
 800dc9e:	695b      	ldr	r3, [r3, #20]
 800dca0:	405a      	eors	r2, r3
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	3308      	adds	r3, #8
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d110      	bne.n	800dcd0 <udp_input_local_match+0xbc>
          return 1;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	e00f      	b.n	800dcd2 <udp_input_local_match+0xbe>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d009      	beq.n	800dccc <udp_input_local_match+0xb8>
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d005      	beq.n	800dccc <udp_input_local_match+0xb8>
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	4b09      	ldr	r3, [pc, #36]	; (800dcec <udp_input_local_match+0xd8>)
 800dcc6:	695b      	ldr	r3, [r3, #20]
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d101      	bne.n	800dcd0 <udp_input_local_match+0xbc>
        return 1;
 800dccc:	2301      	movs	r3, #1
 800dcce:	e000      	b.n	800dcd2 <udp_input_local_match+0xbe>
      }
  }

  return 0;
 800dcd0:	2300      	movs	r3, #0
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	0801c6cc 	.word	0x0801c6cc
 800dce0:	0801c6ec 	.word	0x0801c6ec
 800dce4:	0801c710 	.word	0x0801c710
 800dce8:	0801c738 	.word	0x0801c738
 800dcec:	20000d60 	.word	0x20000d60

0800dcf0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800dcf0:	b590      	push	{r4, r7, lr}
 800dcf2:	b08d      	sub	sp, #52	; 0x34
 800dcf4:	af02      	add	r7, sp, #8
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d10a      	bne.n	800dd1a <udp_input+0x2a>
 800dd04:	4b8d      	ldr	r3, [pc, #564]	; (800df3c <udp_input+0x24c>)
 800dd06:	22cf      	movs	r2, #207	; 0xcf
 800dd08:	498d      	ldr	r1, [pc, #564]	; (800df40 <udp_input+0x250>)
 800dd0a:	488e      	ldr	r0, [pc, #568]	; (800df44 <udp_input+0x254>)
 800dd0c:	f00a f892 	bl	8017e34 <iprintf>
 800dd10:	2000      	movs	r0, #0
 800dd12:	f00a f991 	bl	8018038 <fflush>
 800dd16:	f00a f8d6 	bl	8017ec6 <abort>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d10a      	bne.n	800dd36 <udp_input+0x46>
 800dd20:	4b86      	ldr	r3, [pc, #536]	; (800df3c <udp_input+0x24c>)
 800dd22:	22d0      	movs	r2, #208	; 0xd0
 800dd24:	4988      	ldr	r1, [pc, #544]	; (800df48 <udp_input+0x258>)
 800dd26:	4887      	ldr	r0, [pc, #540]	; (800df44 <udp_input+0x254>)
 800dd28:	f00a f884 	bl	8017e34 <iprintf>
 800dd2c:	2000      	movs	r0, #0
 800dd2e:	f00a f983 	bl	8018038 <fflush>
 800dd32:	f00a f8c8 	bl	8017ec6 <abort>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	895b      	ldrh	r3, [r3, #10]
 800dd3a:	2b07      	cmp	r3, #7
 800dd3c:	d803      	bhi.n	800dd46 <udp_input+0x56>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f7f8 f868 	bl	8005e14 <pbuf_free>
    goto end;
 800dd44:	e0f1      	b.n	800df2a <udp_input+0x23a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800dd4c:	4b7f      	ldr	r3, [pc, #508]	; (800df4c <udp_input+0x25c>)
 800dd4e:	695a      	ldr	r2, [r3, #20]
 800dd50:	4b7e      	ldr	r3, [pc, #504]	; (800df4c <udp_input+0x25c>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	4619      	mov	r1, r3
 800dd56:	4610      	mov	r0, r2
 800dd58:	f7f6 fc72 	bl	8004640 <ip4_addr_isbroadcast_u32>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	881b      	ldrh	r3, [r3, #0]
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7f5 faca 	bl	8003300 <lwip_htons>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	885b      	ldrh	r3, [r3, #2]
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7f5 fac2 	bl	8003300 <lwip_htons>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800dd80:	2300      	movs	r3, #0
 800dd82:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800dd84:	2300      	movs	r3, #0
 800dd86:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd8c:	4b70      	ldr	r3, [pc, #448]	; (800df50 <udp_input+0x260>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	627b      	str	r3, [r7, #36]	; 0x24
 800dd92:	e054      	b.n	800de3e <udp_input+0x14e>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800dd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd96:	8a5b      	ldrh	r3, [r3, #18]
 800dd98:	89fa      	ldrh	r2, [r7, #14]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d14a      	bne.n	800de34 <udp_input+0x144>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800dd9e:	7cfb      	ldrb	r3, [r7, #19]
 800dda0:	461a      	mov	r2, r3
 800dda2:	6839      	ldr	r1, [r7, #0]
 800dda4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dda6:	f7ff ff35 	bl	800dc14 <udp_input_local_match>
 800ddaa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d041      	beq.n	800de34 <udp_input+0x144>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ddb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb2:	7c1b      	ldrb	r3, [r3, #16]
 800ddb4:	f003 0304 	and.w	r3, r3, #4
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d11d      	bne.n	800ddf8 <udp_input+0x108>
        if (uncon_pcb == NULL) {
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d102      	bne.n	800ddc8 <udp_input+0xd8>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ddc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc4:	61fb      	str	r3, [r7, #28]
 800ddc6:	e017      	b.n	800ddf8 <udp_input+0x108>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ddc8:	7cfb      	ldrb	r3, [r7, #19]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d014      	beq.n	800ddf8 <udp_input+0x108>
 800ddce:	4b5f      	ldr	r3, [pc, #380]	; (800df4c <udp_input+0x25c>)
 800ddd0:	695b      	ldr	r3, [r3, #20]
 800ddd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd6:	d10f      	bne.n	800ddf8 <udp_input+0x108>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_eq(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	3304      	adds	r3, #4
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d008      	beq.n	800ddf8 <udp_input+0x108>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_eq(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800dde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde8:	681a      	ldr	r2, [r3, #0]
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	3304      	adds	r3, #4
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d101      	bne.n	800ddf8 <udp_input+0x108>
              /* better match */
              uncon_pcb = pcb;
 800ddf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfa:	8a9b      	ldrh	r3, [r3, #20]
 800ddfc:	8a3a      	ldrh	r2, [r7, #16]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d118      	bne.n	800de34 <udp_input+0x144>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800de02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de04:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800de06:	2b00      	cmp	r3, #0
 800de08:	d005      	beq.n	800de16 <udp_input+0x126>
           ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()))) {
 800de0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0c:	685a      	ldr	r2, [r3, #4]
 800de0e:	4b4f      	ldr	r3, [pc, #316]	; (800df4c <udp_input+0x25c>)
 800de10:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800de12:	429a      	cmp	r2, r3
 800de14:	d10e      	bne.n	800de34 <udp_input+0x144>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800de16:	6a3b      	ldr	r3, [r7, #32]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d014      	beq.n	800de46 <udp_input+0x156>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1e:	68da      	ldr	r2, [r3, #12]
 800de20:	6a3b      	ldr	r3, [r7, #32]
 800de22:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800de24:	4b4a      	ldr	r3, [pc, #296]	; (800df50 <udp_input+0x260>)
 800de26:	681a      	ldr	r2, [r3, #0]
 800de28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800de2c:	4a48      	ldr	r2, [pc, #288]	; (800df50 <udp_input+0x260>)
 800de2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de30:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800de32:	e008      	b.n	800de46 <udp_input+0x156>
      }
    }

    prev = pcb;
 800de34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de36:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800de38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3a:	68db      	ldr	r3, [r3, #12]
 800de3c:	627b      	str	r3, [r7, #36]	; 0x24
 800de3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de40:	2b00      	cmp	r3, #0
 800de42:	d1a7      	bne.n	800dd94 <udp_input+0xa4>
 800de44:	e000      	b.n	800de48 <udp_input+0x158>
        break;
 800de46:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800de48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d101      	bne.n	800de52 <udp_input+0x162>
    pcb = uncon_pcb;
 800de4e:	69fb      	ldr	r3, [r7, #28]
 800de50:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800de52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de54:	2b00      	cmp	r3, #0
 800de56:	d002      	beq.n	800de5e <udp_input+0x16e>
    for_us = 1;
 800de58:	2301      	movs	r3, #1
 800de5a:	76fb      	strb	r3, [r7, #27]
 800de5c:	e00a      	b.n	800de74 <udp_input+0x184>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_eq(netif_ip4_addr(inp), ip4_current_dest_addr());
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	3304      	adds	r3, #4
 800de62:	681a      	ldr	r2, [r3, #0]
 800de64:	4b39      	ldr	r3, [pc, #228]	; (800df4c <udp_input+0x25c>)
 800de66:	695b      	ldr	r3, [r3, #20]
 800de68:	429a      	cmp	r2, r3
 800de6a:	bf0c      	ite	eq
 800de6c:	2301      	moveq	r3, #1
 800de6e:	2300      	movne	r3, #0
 800de70:	b2db      	uxtb	r3, r3
 800de72:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800de74:	7efb      	ldrb	r3, [r7, #27]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d053      	beq.n	800df22 <udp_input+0x232>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	88db      	ldrh	r3, [r3, #6]
 800de7e:	b29b      	uxth	r3, r3
 800de80:	2b00      	cmp	r3, #0
 800de82:	d00b      	beq.n	800de9c <udp_input+0x1ac>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	891a      	ldrh	r2, [r3, #8]
 800de88:	4b32      	ldr	r3, [pc, #200]	; (800df54 <udp_input+0x264>)
 800de8a:	9300      	str	r3, [sp, #0]
 800de8c:	4b32      	ldr	r3, [pc, #200]	; (800df58 <udp_input+0x268>)
 800de8e:	2111      	movs	r1, #17
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7f5 fe7b 	bl	8003b8c <ip_chksum_pseudo>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d147      	bne.n	800df2c <udp_input+0x23c>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800de9c:	2108      	movs	r1, #8
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f7f7 ff2e 	bl	8005d00 <pbuf_remove_header>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d00b      	beq.n	800dec2 <udp_input+0x1d2>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed", 0);
 800deaa:	4b24      	ldr	r3, [pc, #144]	; (800df3c <udp_input+0x24c>)
 800deac:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800deb0:	492a      	ldr	r1, [pc, #168]	; (800df5c <udp_input+0x26c>)
 800deb2:	4824      	ldr	r0, [pc, #144]	; (800df44 <udp_input+0x254>)
 800deb4:	f009 ffbe 	bl	8017e34 <iprintf>
 800deb8:	2000      	movs	r0, #0
 800deba:	f00a f8bd 	bl	8018038 <fflush>
 800debe:	f00a f802 	bl	8017ec6 <abort>
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
      goto end;
    }

    if (pcb != NULL) {
 800dec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d012      	beq.n	800deee <udp_input+0x1fe>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800dec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deca:	699b      	ldr	r3, [r3, #24]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d00a      	beq.n	800dee6 <udp_input+0x1f6>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ded0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded2:	699c      	ldr	r4, [r3, #24]
 800ded4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded6:	69d8      	ldr	r0, [r3, #28]
 800ded8:	8a3b      	ldrh	r3, [r7, #16]
 800deda:	9300      	str	r3, [sp, #0]
 800dedc:	4b1e      	ldr	r3, [pc, #120]	; (800df58 <udp_input+0x268>)
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dee2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800dee4:	e026      	b.n	800df34 <udp_input+0x244>
        pbuf_free(p);
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f7f7 ff94 	bl	8005e14 <pbuf_free>
        goto end;
 800deec:	e01d      	b.n	800df2a <udp_input+0x23a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800deee:	7cfb      	ldrb	r3, [r7, #19]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d112      	bne.n	800df1a <udp_input+0x22a>
 800def4:	4b15      	ldr	r3, [pc, #84]	; (800df4c <udp_input+0x25c>)
 800def6:	695b      	ldr	r3, [r3, #20]
 800def8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800defc:	2be0      	cmp	r3, #224	; 0xe0
 800defe:	d00c      	beq.n	800df1a <udp_input+0x22a>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800df00:	4b12      	ldr	r3, [pc, #72]	; (800df4c <udp_input+0x25c>)
 800df02:	899b      	ldrh	r3, [r3, #12]
 800df04:	3308      	adds	r3, #8
 800df06:	b29b      	uxth	r3, r3
 800df08:	b21b      	sxth	r3, r3
 800df0a:	4619      	mov	r1, r3
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f7f7 ff6e 	bl	8005dee <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800df12:	2103      	movs	r1, #3
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f7f5 ffff 	bl	8003f18 <icmp_dest_unreach>
      pbuf_free(p);
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f7f7 ff7a 	bl	8005e14 <pbuf_free>
  return;
 800df20:	e008      	b.n	800df34 <udp_input+0x244>
    pbuf_free(p);
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f7f7 ff76 	bl	8005e14 <pbuf_free>
  return;
 800df28:	e004      	b.n	800df34 <udp_input+0x244>
 800df2a:	e003      	b.n	800df34 <udp_input+0x244>
            goto chkerr;
 800df2c:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7f7 ff70 	bl	8005e14 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800df34:	372c      	adds	r7, #44	; 0x2c
 800df36:	46bd      	mov	sp, r7
 800df38:	bd90      	pop	{r4, r7, pc}
 800df3a:	bf00      	nop
 800df3c:	0801c6cc 	.word	0x0801c6cc
 800df40:	0801c760 	.word	0x0801c760
 800df44:	0801c710 	.word	0x0801c710
 800df48:	0801c778 	.word	0x0801c778
 800df4c:	20000d60 	.word	0x20000d60
 800df50:	20004054 	.word	0x20004054
 800df54:	20000d74 	.word	0x20000d74
 800df58:	20000d70 	.word	0x20000d70
 800df5c:	0801c794 	.word	0x0801c794

0800df60 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b088      	sub	sp, #32
 800df64:	af02      	add	r7, sp, #8
 800df66:	60f8      	str	r0, [r7, #12]
 800df68:	60b9      	str	r1, [r7, #8]
 800df6a:	607a      	str	r2, [r7, #4]
 800df6c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d109      	bne.n	800df88 <udp_sendto+0x28>
 800df74:	4b23      	ldr	r3, [pc, #140]	; (800e004 <udp_sendto+0xa4>)
 800df76:	f44f 7206 	mov.w	r2, #536	; 0x218
 800df7a:	4923      	ldr	r1, [pc, #140]	; (800e008 <udp_sendto+0xa8>)
 800df7c:	4823      	ldr	r0, [pc, #140]	; (800e00c <udp_sendto+0xac>)
 800df7e:	f7f3 f9b8 	bl	80012f2 <lwip_win32_platform_diag>
 800df82:	f06f 030f 	mvn.w	r3, #15
 800df86:	e038      	b.n	800dffa <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d109      	bne.n	800dfa2 <udp_sendto+0x42>
 800df8e:	4b1d      	ldr	r3, [pc, #116]	; (800e004 <udp_sendto+0xa4>)
 800df90:	f240 2219 	movw	r2, #537	; 0x219
 800df94:	491e      	ldr	r1, [pc, #120]	; (800e010 <udp_sendto+0xb0>)
 800df96:	481d      	ldr	r0, [pc, #116]	; (800e00c <udp_sendto+0xac>)
 800df98:	f7f3 f9ab 	bl	80012f2 <lwip_win32_platform_diag>
 800df9c:	f06f 030f 	mvn.w	r3, #15
 800dfa0:	e02b      	b.n	800dffa <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d109      	bne.n	800dfbc <udp_sendto+0x5c>
 800dfa8:	4b16      	ldr	r3, [pc, #88]	; (800e004 <udp_sendto+0xa4>)
 800dfaa:	f240 221a 	movw	r2, #538	; 0x21a
 800dfae:	4919      	ldr	r1, [pc, #100]	; (800e014 <udp_sendto+0xb4>)
 800dfb0:	4816      	ldr	r0, [pc, #88]	; (800e00c <udp_sendto+0xac>)
 800dfb2:	f7f3 f99e 	bl	80012f2 <lwip_win32_platform_diag>
 800dfb6:	f06f 030f 	mvn.w	r3, #15
 800dfba:	e01e      	b.n	800dffa <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	7a1b      	ldrb	r3, [r3, #8]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d006      	beq.n	800dfd2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	7a1b      	ldrb	r3, [r3, #8]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7f7 fbd5 	bl	8005778 <netif_get_by_index>
 800dfce:	6178      	str	r0, [r7, #20]
 800dfd0:	e003      	b.n	800dfda <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7f6 f834 	bl	8004040 <ip4_route>
 800dfd8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d102      	bne.n	800dfe6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800dfe0:	f06f 0303 	mvn.w	r3, #3
 800dfe4:	e009      	b.n	800dffa <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800dfe6:	887a      	ldrh	r2, [r7, #2]
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	9300      	str	r3, [sp, #0]
 800dfec:	4613      	mov	r3, r2
 800dfee:	687a      	ldr	r2, [r7, #4]
 800dff0:	68b9      	ldr	r1, [r7, #8]
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f000 f810 	bl	800e018 <udp_sendto_if>
 800dff8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3718      	adds	r7, #24
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	0801c6cc 	.word	0x0801c6cc
 800e008:	0801c7e0 	.word	0x0801c7e0
 800e00c:	0801c710 	.word	0x0801c710
 800e010:	0801c7f8 	.word	0x0801c7f8
 800e014:	0801c814 	.word	0x0801c814

0800e018 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b088      	sub	sp, #32
 800e01c:	af02      	add	r7, sp, #8
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	607a      	str	r2, [r7, #4]
 800e024:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d109      	bne.n	800e040 <udp_sendto_if+0x28>
 800e02c:	4b2e      	ldr	r3, [pc, #184]	; (800e0e8 <udp_sendto_if+0xd0>)
 800e02e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e032:	492e      	ldr	r1, [pc, #184]	; (800e0ec <udp_sendto_if+0xd4>)
 800e034:	482e      	ldr	r0, [pc, #184]	; (800e0f0 <udp_sendto_if+0xd8>)
 800e036:	f7f3 f95c 	bl	80012f2 <lwip_win32_platform_diag>
 800e03a:	f06f 030f 	mvn.w	r3, #15
 800e03e:	e04f      	b.n	800e0e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d109      	bne.n	800e05a <udp_sendto_if+0x42>
 800e046:	4b28      	ldr	r3, [pc, #160]	; (800e0e8 <udp_sendto_if+0xd0>)
 800e048:	f240 2281 	movw	r2, #641	; 0x281
 800e04c:	4929      	ldr	r1, [pc, #164]	; (800e0f4 <udp_sendto_if+0xdc>)
 800e04e:	4828      	ldr	r0, [pc, #160]	; (800e0f0 <udp_sendto_if+0xd8>)
 800e050:	f7f3 f94f 	bl	80012f2 <lwip_win32_platform_diag>
 800e054:	f06f 030f 	mvn.w	r3, #15
 800e058:	e042      	b.n	800e0e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d109      	bne.n	800e074 <udp_sendto_if+0x5c>
 800e060:	4b21      	ldr	r3, [pc, #132]	; (800e0e8 <udp_sendto_if+0xd0>)
 800e062:	f240 2282 	movw	r2, #642	; 0x282
 800e066:	4924      	ldr	r1, [pc, #144]	; (800e0f8 <udp_sendto_if+0xe0>)
 800e068:	4821      	ldr	r0, [pc, #132]	; (800e0f0 <udp_sendto_if+0xd8>)
 800e06a:	f7f3 f942 	bl	80012f2 <lwip_win32_platform_diag>
 800e06e:	f06f 030f 	mvn.w	r3, #15
 800e072:	e035      	b.n	800e0e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e074:	6a3b      	ldr	r3, [r7, #32]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d109      	bne.n	800e08e <udp_sendto_if+0x76>
 800e07a:	4b1b      	ldr	r3, [pc, #108]	; (800e0e8 <udp_sendto_if+0xd0>)
 800e07c:	f240 2283 	movw	r2, #643	; 0x283
 800e080:	491e      	ldr	r1, [pc, #120]	; (800e0fc <udp_sendto_if+0xe4>)
 800e082:	481b      	ldr	r0, [pc, #108]	; (800e0f0 <udp_sendto_if+0xd8>)
 800e084:	f7f3 f935 	bl	80012f2 <lwip_win32_platform_diag>
 800e088:	f06f 030f 	mvn.w	r3, #15
 800e08c:	e028      	b.n	800e0e0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d009      	beq.n	800e0a8 <udp_sendto_if+0x90>
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d005      	beq.n	800e0a8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e0a4:	2be0      	cmp	r3, #224	; 0xe0
 800e0a6:	d103      	bne.n	800e0b0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800e0a8:	6a3b      	ldr	r3, [r7, #32]
 800e0aa:	3304      	adds	r3, #4
 800e0ac:	617b      	str	r3, [r7, #20]
 800e0ae:	e00b      	b.n	800e0c8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_eq(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	6a3b      	ldr	r3, [r7, #32]
 800e0b6:	3304      	adds	r3, #4
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d002      	beq.n	800e0c4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800e0be:	f06f 0303 	mvn.w	r3, #3
 800e0c2:	e00d      	b.n	800e0e0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e0c8:	887a      	ldrh	r2, [r7, #2]
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	9301      	str	r3, [sp, #4]
 800e0ce:	6a3b      	ldr	r3, [r7, #32]
 800e0d0:	9300      	str	r3, [sp, #0]
 800e0d2:	4613      	mov	r3, r2
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	68b9      	ldr	r1, [r7, #8]
 800e0d8:	68f8      	ldr	r0, [r7, #12]
 800e0da:	f000 f811 	bl	800e100 <udp_sendto_if_src>
 800e0de:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3718      	adds	r7, #24
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	0801c6cc 	.word	0x0801c6cc
 800e0ec:	0801c830 	.word	0x0801c830
 800e0f0:	0801c710 	.word	0x0801c710
 800e0f4:	0801c84c 	.word	0x0801c84c
 800e0f8:	0801c868 	.word	0x0801c868
 800e0fc:	0801c888 	.word	0x0801c888

0800e100 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b08c      	sub	sp, #48	; 0x30
 800e104:	af04      	add	r7, sp, #16
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	607a      	str	r2, [r7, #4]
 800e10c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d109      	bne.n	800e128 <udp_sendto_if_src+0x28>
 800e114:	4b75      	ldr	r3, [pc, #468]	; (800e2ec <udp_sendto_if_src+0x1ec>)
 800e116:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e11a:	4975      	ldr	r1, [pc, #468]	; (800e2f0 <udp_sendto_if_src+0x1f0>)
 800e11c:	4875      	ldr	r0, [pc, #468]	; (800e2f4 <udp_sendto_if_src+0x1f4>)
 800e11e:	f7f3 f8e8 	bl	80012f2 <lwip_win32_platform_diag>
 800e122:	f06f 030f 	mvn.w	r3, #15
 800e126:	e0dd      	b.n	800e2e4 <udp_sendto_if_src+0x1e4>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d109      	bne.n	800e142 <udp_sendto_if_src+0x42>
 800e12e:	4b6f      	ldr	r3, [pc, #444]	; (800e2ec <udp_sendto_if_src+0x1ec>)
 800e130:	f240 22d2 	movw	r2, #722	; 0x2d2
 800e134:	4970      	ldr	r1, [pc, #448]	; (800e2f8 <udp_sendto_if_src+0x1f8>)
 800e136:	486f      	ldr	r0, [pc, #444]	; (800e2f4 <udp_sendto_if_src+0x1f4>)
 800e138:	f7f3 f8db 	bl	80012f2 <lwip_win32_platform_diag>
 800e13c:	f06f 030f 	mvn.w	r3, #15
 800e140:	e0d0      	b.n	800e2e4 <udp_sendto_if_src+0x1e4>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d109      	bne.n	800e15c <udp_sendto_if_src+0x5c>
 800e148:	4b68      	ldr	r3, [pc, #416]	; (800e2ec <udp_sendto_if_src+0x1ec>)
 800e14a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800e14e:	496b      	ldr	r1, [pc, #428]	; (800e2fc <udp_sendto_if_src+0x1fc>)
 800e150:	4868      	ldr	r0, [pc, #416]	; (800e2f4 <udp_sendto_if_src+0x1f4>)
 800e152:	f7f3 f8ce 	bl	80012f2 <lwip_win32_platform_diag>
 800e156:	f06f 030f 	mvn.w	r3, #15
 800e15a:	e0c3      	b.n	800e2e4 <udp_sendto_if_src+0x1e4>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d109      	bne.n	800e176 <udp_sendto_if_src+0x76>
 800e162:	4b62      	ldr	r3, [pc, #392]	; (800e2ec <udp_sendto_if_src+0x1ec>)
 800e164:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800e168:	4965      	ldr	r1, [pc, #404]	; (800e300 <udp_sendto_if_src+0x200>)
 800e16a:	4862      	ldr	r0, [pc, #392]	; (800e2f4 <udp_sendto_if_src+0x1f4>)
 800e16c:	f7f3 f8c1 	bl	80012f2 <lwip_win32_platform_diag>
 800e170:	f06f 030f 	mvn.w	r3, #15
 800e174:	e0b6      	b.n	800e2e4 <udp_sendto_if_src+0x1e4>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d109      	bne.n	800e190 <udp_sendto_if_src+0x90>
 800e17c:	4b5b      	ldr	r3, [pc, #364]	; (800e2ec <udp_sendto_if_src+0x1ec>)
 800e17e:	f240 22d5 	movw	r2, #725	; 0x2d5
 800e182:	4960      	ldr	r1, [pc, #384]	; (800e304 <udp_sendto_if_src+0x204>)
 800e184:	485b      	ldr	r0, [pc, #364]	; (800e2f4 <udp_sendto_if_src+0x1f4>)
 800e186:	f7f3 f8b4 	bl	80012f2 <lwip_win32_platform_diag>
 800e18a:	f06f 030f 	mvn.w	r3, #15
 800e18e:	e0a9      	b.n	800e2e4 <udp_sendto_if_src+0x1e4>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	8a5b      	ldrh	r3, [r3, #18]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d10f      	bne.n	800e1b8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e198:	68f9      	ldr	r1, [r7, #12]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	8a5b      	ldrh	r3, [r3, #18]
 800e19e:	461a      	mov	r2, r3
 800e1a0:	68f8      	ldr	r0, [r7, #12]
 800e1a2:	f000 f8b3 	bl	800e30c <udp_bind>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 800e1aa:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d002      	beq.n	800e1b8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e1b2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800e1b6:	e095      	b.n	800e2e4 <udp_sendto_if_src+0x1e4>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	891b      	ldrh	r3, [r3, #8]
 800e1bc:	3308      	adds	r3, #8
 800e1be:	b29a      	uxth	r2, r3
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	891b      	ldrh	r3, [r3, #8]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d202      	bcs.n	800e1ce <udp_sendto_if_src+0xce>
    return ERR_MEM;
 800e1c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1cc:	e08a      	b.n	800e2e4 <udp_sendto_if_src+0x1e4>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e1ce:	2108      	movs	r1, #8
 800e1d0:	68b8      	ldr	r0, [r7, #8]
 800e1d2:	f7f7 fd85 	bl	8005ce0 <pbuf_add_header>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d015      	beq.n	800e208 <udp_sendto_if_src+0x108>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e1dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e1e0:	2108      	movs	r1, #8
 800e1e2:	2022      	movs	r0, #34	; 0x22
 800e1e4:	f7f7 fb72 	bl	80058cc <pbuf_alloc>
 800e1e8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e1ea:	69fb      	ldr	r3, [r7, #28]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d102      	bne.n	800e1f6 <udp_sendto_if_src+0xf6>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800e1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e1f4:	e076      	b.n	800e2e4 <udp_sendto_if_src+0x1e4>
    }
    if (p->tot_len != 0) {
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	891b      	ldrh	r3, [r3, #8]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d006      	beq.n	800e20c <udp_sendto_if_src+0x10c>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e1fe:	68b9      	ldr	r1, [r7, #8]
 800e200:	69f8      	ldr	r0, [r7, #28]
 800e202:	f7f7 ff61 	bl	80060c8 <pbuf_chain>
 800e206:	e001      	b.n	800e20c <udp_sendto_if_src+0x10c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	895b      	ldrh	r3, [r3, #10]
 800e210:	2b07      	cmp	r3, #7
 800e212:	d80b      	bhi.n	800e22c <udp_sendto_if_src+0x12c>
 800e214:	4b35      	ldr	r3, [pc, #212]	; (800e2ec <udp_sendto_if_src+0x1ec>)
 800e216:	f240 320e 	movw	r2, #782	; 0x30e
 800e21a:	493b      	ldr	r1, [pc, #236]	; (800e308 <udp_sendto_if_src+0x208>)
 800e21c:	4835      	ldr	r0, [pc, #212]	; (800e2f4 <udp_sendto_if_src+0x1f4>)
 800e21e:	f009 fe09 	bl	8017e34 <iprintf>
 800e222:	2000      	movs	r0, #0
 800e224:	f009 ff08 	bl	8018038 <fflush>
 800e228:	f009 fe4d 	bl	8017ec6 <abort>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	8a5b      	ldrh	r3, [r3, #18]
 800e236:	4618      	mov	r0, r3
 800e238:	f7f5 f862 	bl	8003300 <lwip_htons>
 800e23c:	4603      	mov	r3, r0
 800e23e:	461a      	mov	r2, r3
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e244:	887b      	ldrh	r3, [r7, #2]
 800e246:	4618      	mov	r0, r3
 800e248:	f7f5 f85a 	bl	8003300 <lwip_htons>
 800e24c:	4603      	mov	r3, r0
 800e24e:	461a      	mov	r2, r3
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	2200      	movs	r2, #0
 800e258:	719a      	strb	r2, [r3, #6]
 800e25a:	2200      	movs	r2, #0
 800e25c:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800e25e:	69fb      	ldr	r3, [r7, #28]
 800e260:	891b      	ldrh	r3, [r3, #8]
 800e262:	4618      	mov	r0, r3
 800e264:	f7f5 f84c 	bl	8003300 <lwip_htons>
 800e268:	4603      	mov	r3, r0
 800e26a:	461a      	mov	r2, r3
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	7c1b      	ldrb	r3, [r3, #16]
 800e274:	f003 0301 	and.w	r3, r3, #1
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d113      	bne.n	800e2a4 <udp_sendto_if_src+0x1a4>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	891a      	ldrh	r2, [r3, #8]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	9300      	str	r3, [sp, #0]
 800e284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e286:	2111      	movs	r1, #17
 800e288:	69f8      	ldr	r0, [r7, #28]
 800e28a:	f7f5 fc7f 	bl	8003b8c <ip_chksum_pseudo>
 800e28e:	4603      	mov	r3, r0
 800e290:	837b      	strh	r3, [r7, #26]
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 800e292:	8b7b      	ldrh	r3, [r7, #26]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d102      	bne.n	800e29e <udp_sendto_if_src+0x19e>
          udpchksum = 0xffff;
 800e298:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e29c:	837b      	strh	r3, [r7, #26]
        }
        udphdr->chksum = udpchksum;
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	8b7a      	ldrh	r2, [r7, #26]
 800e2a2:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e2a4:	2311      	movs	r3, #17
 800e2a6:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	7adb      	ldrb	r3, [r3, #11]
 800e2ac:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	7a9b      	ldrb	r3, [r3, #10]
 800e2b2:	7cb9      	ldrb	r1, [r7, #18]
 800e2b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2b6:	9202      	str	r2, [sp, #8]
 800e2b8:	7cfa      	ldrb	r2, [r7, #19]
 800e2ba:	9201      	str	r2, [sp, #4]
 800e2bc:	9300      	str	r3, [sp, #0]
 800e2be:	460b      	mov	r3, r1
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2c4:	69f8      	ldr	r0, [r7, #28]
 800e2c6:	f7f6 f8a1 	bl	800440c <ip4_output_if_src>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	767b      	strb	r3, [r7, #25]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800e2ce:	69fa      	ldr	r2, [r7, #28]
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d004      	beq.n	800e2e0 <udp_sendto_if_src+0x1e0>
    /* free the header pbuf */
    pbuf_free(q);
 800e2d6:	69f8      	ldr	r0, [r7, #28]
 800e2d8:	f7f7 fd9c 	bl	8005e14 <pbuf_free>
    q = NULL;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800e2e0:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3720      	adds	r7, #32
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	0801c6cc 	.word	0x0801c6cc
 800e2f0:	0801c8a8 	.word	0x0801c8a8
 800e2f4:	0801c710 	.word	0x0801c710
 800e2f8:	0801c8c8 	.word	0x0801c8c8
 800e2fc:	0801c8e8 	.word	0x0801c8e8
 800e300:	0801c90c 	.word	0x0801c90c
 800e304:	0801c930 	.word	0x0801c930
 800e308:	0801c954 	.word	0x0801c954

0800e30c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b086      	sub	sp, #24
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	4613      	mov	r3, r2
 800e318:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d101      	bne.n	800e324 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e320:	4b39      	ldr	r3, [pc, #228]	; (800e408 <udp_bind+0xfc>)
 800e322:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d109      	bne.n	800e33e <udp_bind+0x32>
 800e32a:	4b38      	ldr	r3, [pc, #224]	; (800e40c <udp_bind+0x100>)
 800e32c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800e330:	4937      	ldr	r1, [pc, #220]	; (800e410 <udp_bind+0x104>)
 800e332:	4838      	ldr	r0, [pc, #224]	; (800e414 <udp_bind+0x108>)
 800e334:	f7f2 ffdd 	bl	80012f2 <lwip_win32_platform_diag>
 800e338:	f06f 030f 	mvn.w	r3, #15
 800e33c:	e060      	b.n	800e400 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e33e:	2300      	movs	r3, #0
 800e340:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e342:	4b35      	ldr	r3, [pc, #212]	; (800e418 <udp_bind+0x10c>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	617b      	str	r3, [r7, #20]
 800e348:	e009      	b.n	800e35e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e34a:	68fa      	ldr	r2, [r7, #12]
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	429a      	cmp	r2, r3
 800e350:	d102      	bne.n	800e358 <udp_bind+0x4c>
      rebind = 1;
 800e352:	2301      	movs	r3, #1
 800e354:	74fb      	strb	r3, [r7, #19]
      break;
 800e356:	e005      	b.n	800e364 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	68db      	ldr	r3, [r3, #12]
 800e35c:	617b      	str	r3, [r7, #20]
 800e35e:	697b      	ldr	r3, [r7, #20]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d1f2      	bne.n	800e34a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e364:	88fb      	ldrh	r3, [r7, #6]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d109      	bne.n	800e37e <udp_bind+0x72>
    port = udp_new_port();
 800e36a:	f7ff fc1b 	bl	800dba4 <udp_new_port>
 800e36e:	4603      	mov	r3, r0
 800e370:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e372:	88fb      	ldrh	r3, [r7, #6]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d12c      	bne.n	800e3d2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e378:	f06f 0307 	mvn.w	r3, #7
 800e37c:	e040      	b.n	800e400 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e37e:	4b26      	ldr	r3, [pc, #152]	; (800e418 <udp_bind+0x10c>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	617b      	str	r3, [r7, #20]
 800e384:	e022      	b.n	800e3cc <udp_bind+0xc0>
      if (pcb != ipcb) {
 800e386:	68fa      	ldr	r2, [r7, #12]
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d01b      	beq.n	800e3c6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	8a5b      	ldrh	r3, [r3, #18]
 800e392:	88fa      	ldrh	r2, [r7, #6]
 800e394:	429a      	cmp	r2, r3
 800e396:	d116      	bne.n	800e3c6 <udp_bind+0xba>
              (((IP_GET_TYPE(&ipcb->local_ip) == IP_GET_TYPE(ipaddr)) &&
              /* IP address matches or any IP used? */
              (ip_addr_eq(&ipcb->local_ip, ipaddr) ||
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	681a      	ldr	r2, [r3, #0]
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d00d      	beq.n	800e3c0 <udp_bind+0xb4>
              (ip_addr_eq(&ipcb->local_ip, ipaddr) ||
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d00a      	beq.n	800e3c0 <udp_bind+0xb4>
              ip_addr_isany(ipaddr) ||
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d006      	beq.n	800e3c0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) ||
 800e3b2:	697b      	ldr	r3, [r7, #20]
              (IP_GET_TYPE(&ipcb->local_ip) == IPADDR_TYPE_ANY) ||
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d003      	beq.n	800e3c0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) ||
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d102      	bne.n	800e3c6 <udp_bind+0xba>
              (IP_GET_TYPE(ipaddr) == IPADDR_TYPE_ANY))) {
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e3c0:	f06f 0307 	mvn.w	r3, #7
 800e3c4:	e01c      	b.n	800e400 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	68db      	ldr	r3, [r3, #12]
 800e3ca:	617b      	str	r3, [r7, #20]
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d1d9      	bne.n	800e386 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d002      	beq.n	800e3de <udp_bind+0xd2>
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	e000      	b.n	800e3e0 <udp_bind+0xd4>
 800e3de:	2300      	movs	r3, #0
 800e3e0:	68fa      	ldr	r2, [r7, #12]
 800e3e2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	88fa      	ldrh	r2, [r7, #6]
 800e3e8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e3ea:	7cfb      	ldrb	r3, [r7, #19]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d106      	bne.n	800e3fe <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e3f0:	4b09      	ldr	r3, [pc, #36]	; (800e418 <udp_bind+0x10c>)
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e3f8:	4a07      	ldr	r2, [pc, #28]	; (800e418 <udp_bind+0x10c>)
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e3fe:	2300      	movs	r3, #0
}
 800e400:	4618      	mov	r0, r3
 800e402:	3718      	adds	r7, #24
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	0801da38 	.word	0x0801da38
 800e40c:	0801c6cc 	.word	0x0801c6cc
 800e410:	0801c984 	.word	0x0801c984
 800e414:	0801c710 	.word	0x0801c710
 800e418:	20004054 	.word	0x20004054

0800e41c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d107      	bne.n	800e43a <udp_remove+0x1e>
 800e42a:	4b19      	ldr	r3, [pc, #100]	; (800e490 <udp_remove+0x74>)
 800e42c:	f240 42a5 	movw	r2, #1189	; 0x4a5
 800e430:	4918      	ldr	r1, [pc, #96]	; (800e494 <udp_remove+0x78>)
 800e432:	4819      	ldr	r0, [pc, #100]	; (800e498 <udp_remove+0x7c>)
 800e434:	f7f2 ff5d 	bl	80012f2 <lwip_win32_platform_diag>
 800e438:	e026      	b.n	800e488 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800e43a:	4b18      	ldr	r3, [pc, #96]	; (800e49c <udp_remove+0x80>)
 800e43c:	681a      	ldr	r2, [r3, #0]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	429a      	cmp	r2, r3
 800e442:	d105      	bne.n	800e450 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800e444:	4b15      	ldr	r3, [pc, #84]	; (800e49c <udp_remove+0x80>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	68db      	ldr	r3, [r3, #12]
 800e44a:	4a14      	ldr	r2, [pc, #80]	; (800e49c <udp_remove+0x80>)
 800e44c:	6013      	str	r3, [r2, #0]
 800e44e:	e017      	b.n	800e480 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e450:	4b12      	ldr	r3, [pc, #72]	; (800e49c <udp_remove+0x80>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	60fb      	str	r3, [r7, #12]
 800e456:	e010      	b.n	800e47a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d009      	beq.n	800e474 <udp_remove+0x58>
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	68da      	ldr	r2, [r3, #12]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	429a      	cmp	r2, r3
 800e468:	d104      	bne.n	800e474 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	68da      	ldr	r2, [r3, #12]
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	60da      	str	r2, [r3, #12]
        break;
 800e472:	e005      	b.n	800e480 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	60fb      	str	r3, [r7, #12]
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d1eb      	bne.n	800e458 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800e480:	6879      	ldr	r1, [r7, #4]
 800e482:	2000      	movs	r0, #0
 800e484:	f7f6 feb2 	bl	80051ec <memp_free>
}
 800e488:	3710      	adds	r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	0801c6cc 	.word	0x0801c6cc
 800e494:	0801ca08 	.word	0x0801ca08
 800e498:	0801c710 	.word	0x0801c710
 800e49c:	20004054 	.word	0x20004054

0800e4a0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b085      	sub	sp, #20
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d01e      	beq.n	800e4ee <udp_netif_ip_addr_changed+0x4e>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d01a      	beq.n	800e4ee <udp_netif_ip_addr_changed+0x4e>
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d017      	beq.n	800e4ee <udp_netif_ip_addr_changed+0x4e>
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d013      	beq.n	800e4ee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e4c6:	4b0d      	ldr	r3, [pc, #52]	; (800e4fc <udp_netif_ip_addr_changed+0x5c>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	60fb      	str	r3, [r7, #12]
 800e4cc:	e00c      	b.n	800e4e8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_eq(&upcb->local_ip, old_addr)) {
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681a      	ldr	r2, [r3, #0]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d103      	bne.n	800e4e2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	681a      	ldr	r2, [r3, #0]
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	68db      	ldr	r3, [r3, #12]
 800e4e6:	60fb      	str	r3, [r7, #12]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d1ef      	bne.n	800e4ce <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e4ee:	bf00      	nop
 800e4f0:	3714      	adds	r7, #20
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr
 800e4fa:	bf00      	nop
 800e4fc:	20004054 	.word	0x20004054

0800e500 <link_required>:
#endif

/*
 * An Open on LCP has requested a change from Dead to Establish phase.
 */
void link_required(ppp_pcb *pcb) {
 800e500:	b480      	push	{r7}
 800e502:	b083      	sub	sp, #12
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
    LWIP_UNUSED_ARG(pcb);
}
 800e508:	bf00      	nop
 800e50a:	370c      	adds	r7, #12
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr

0800e514 <link_terminated>:

/*
 * LCP has terminated the link; go to the Dead phase and take the
 * physical layer down.
 */
void link_terminated(ppp_pcb *pcb) {
 800e514:	b580      	push	{r7, lr}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
    if (pcb->phase == PPP_PHASE_DEAD
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e522:	2b00      	cmp	r3, #0
 800e524:	d00d      	beq.n	800e542 <link_terminated+0x2e>
#ifdef HAVE_MULTILINK
    || pcb->phase == PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	return;
    new_phase(pcb, PPP_PHASE_DISCONNECT);
 800e526:	210c      	movs	r1, #12
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f007 faa9 	bl	8015a80 <new_phase>
    }
    session_end(devnam);
#endif /* UNUSED */

    if (!doing_multilink) {
	ppp_notice(("Connection terminated."));
 800e52e:	4807      	ldr	r0, [pc, #28]	; (800e54c <link_terminated+0x38>)
 800e530:	f009 f922 	bl	8017778 <ppp_notice_impl>
	print_link_stats();
#endif /* PPP_STATS_SUPPORT */
    } else
	ppp_notice(("Link terminated."));

    lcp_lowerdown(pcb);
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f003 fc19 	bl	8011d6c <lcp_lowerdown>

    ppp_link_terminated(pcb);
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f007 fa7c 	bl	8015a38 <ppp_link_terminated>
 800e540:	e000      	b.n	800e544 <link_terminated+0x30>
	return;
 800e542:	bf00      	nop
	else
	    mp_bundle_terminated();
    } else
	new_phase(pcb, PPP_PHASE_DEAD);
#endif
}
 800e544:	3708      	adds	r7, #8
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	0801ca20 	.word	0x0801ca20

0800e550 <link_down>:

/*
 * LCP has gone down; it will either die or try to re-establish.
 */
void link_down(ppp_pcb *pcb) {
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
#if PPP_NOTIFY
    notify(link_down_notifier, 0);
#endif /* PPP_NOTIFY */

    if (!doing_multilink) {
	upper_layers_down(pcb);
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 f80d 	bl	800e578 <upper_layers_down>
	if (pcb->phase != PPP_PHASE_DEAD
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e564:	2b00      	cmp	r3, #0
 800e566:	d003      	beq.n	800e570 <link_down+0x20>
#ifdef HAVE_MULTILINK
	&& pcb->phase != PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
	)
	    new_phase(pcb, PPP_PHASE_ESTABLISH);
 800e568:	2106      	movs	r1, #6
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f007 fa88 	bl	8015a80 <new_phase>
    }
    /* XXX if doing_multilink, should do something to stop
       network-layer traffic on the link */
}
 800e570:	bf00      	nop
 800e572:	3708      	adds	r7, #8
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <upper_layers_down>:

void upper_layers_down(ppp_pcb *pcb) {
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
    int i;
    const struct protent *protp;

    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800e580:	2300      	movs	r3, #0
 800e582:	60fb      	str	r3, [r7, #12]
 800e584:	e01e      	b.n	800e5c4 <upper_layers_down+0x4c>
        if (protp->protocol != PPP_LCP && protp->lowerdown != NULL)
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	881b      	ldrh	r3, [r3, #0]
 800e58a:	f24c 0221 	movw	r2, #49185	; 0xc021
 800e58e:	4293      	cmp	r3, r2
 800e590:	d007      	beq.n	800e5a2 <upper_layers_down+0x2a>
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	695b      	ldr	r3, [r3, #20]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d003      	beq.n	800e5a2 <upper_layers_down+0x2a>
	    (*protp->lowerdown)(pcb);
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	695b      	ldr	r3, [r3, #20]
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	4798      	blx	r3
        if (protp->protocol < 0xC000 && protp->close != NULL)
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	881b      	ldrh	r3, [r3, #0]
 800e5a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e5aa:	d208      	bcs.n	800e5be <upper_layers_down+0x46>
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	69db      	ldr	r3, [r3, #28]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d004      	beq.n	800e5be <upper_layers_down+0x46>
	    (*protp->close)(pcb, "LCP down");
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	69db      	ldr	r3, [r3, #28]
 800e5b8:	490c      	ldr	r1, [pc, #48]	; (800e5ec <upper_layers_down+0x74>)
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	4798      	blx	r3
    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	60fb      	str	r3, [r7, #12]
 800e5c4:	4a0a      	ldr	r2, [pc, #40]	; (800e5f0 <upper_layers_down+0x78>)
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5cc:	60bb      	str	r3, [r7, #8]
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d1d8      	bne.n	800e586 <upper_layers_down+0xe>
    }
    pcb->num_np_open = 0;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
    pcb->num_np_up = 0;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
}
 800e5e4:	bf00      	nop
 800e5e6:	3710      	adds	r7, #16
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	0801ca38 	.word	0x0801ca38
 800e5f0:	0801dce8 	.word	0x0801dce8

0800e5f4 <link_established>:

/*
 * The link is established.
 * Proceed to the Dead, Authenticate or Network phase as appropriate.
 */
void link_established(ppp_pcb *pcb) {
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b086      	sub	sp, #24
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
#if PAP_SUPPORT
    lcp_options *wo = &pcb->lcp_wantoptions;
#endif /* PAP_SUPPORT */
    lcp_options *go = &pcb->lcp_gotoptions;
#endif /* PPP_SERVER */
    lcp_options *ho = &pcb->lcp_hisoptions;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800e602:	60fb      	str	r3, [r7, #12]

    /*
     * Tell higher-level protocols that LCP is up.
     */
    if (!doing_multilink) {
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800e604:	2300      	movs	r3, #0
 800e606:	613b      	str	r3, [r7, #16]
 800e608:	e010      	b.n	800e62c <link_established+0x38>
	    if (protp->protocol != PPP_LCP
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	881b      	ldrh	r3, [r3, #0]
 800e60e:	f24c 0221 	movw	r2, #49185	; 0xc021
 800e612:	4293      	cmp	r3, r2
 800e614:	d007      	beq.n	800e626 <link_established+0x32>
		&& protp->lowerup != NULL)
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	691b      	ldr	r3, [r3, #16]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d003      	beq.n	800e626 <link_established+0x32>
		(*protp->lowerup)(pcb);
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	691b      	ldr	r3, [r3, #16]
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	4798      	blx	r3
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	3301      	adds	r3, #1
 800e62a:	613b      	str	r3, [r7, #16]
 800e62c:	4a26      	ldr	r2, [pc, #152]	; (800e6c8 <link_established+0xd4>)
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e634:	60bb      	str	r3, [r7, #8]
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d1e6      	bne.n	800e60a <link_established+0x16>
	    return;
	}
    }
#endif /* PPP_SERVER */

    new_phase(pcb, PPP_PHASE_AUTHENTICATE);
 800e63c:	2107      	movs	r1, #7
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f007 fa1e 	bl	8015a80 <new_phase>
    auth = 0;
 800e644:	2300      	movs	r3, #0
 800e646:	617b      	str	r3, [r7, #20]
	eap_authwithpeer(pcb, pcb->settings.user);
	auth |= EAP_WITHPEER;
    } else
#endif /* EAP_SUPPORT */
#if CHAP_SUPPORT
    if (ho->neg_chap) {
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	f003 0320 	and.w	r3, r3, #32
 800e650:	b2db      	uxtb	r3, r3
 800e652:	2b00      	cmp	r3, #0
 800e654:	d013      	beq.n	800e67e <link_established+0x8a>
	chap_auth_with_peer(pcb, pcb->settings.user, CHAP_DIGEST(ho->chap_mdtype));
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6859      	ldr	r1, [r3, #4]
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	791b      	ldrb	r3, [r3, #4]
 800e65e:	f003 0304 	and.w	r3, r3, #4
 800e662:	2b00      	cmp	r3, #0
 800e664:	d001      	beq.n	800e66a <link_established+0x76>
 800e666:	2305      	movs	r3, #5
 800e668:	e000      	b.n	800e66c <link_established+0x78>
 800e66a:	2300      	movs	r3, #0
 800e66c:	461a      	mov	r2, r3
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f000 f9e6 	bl	800ea40 <chap_auth_with_peer>
	auth |= CHAP_WITHPEER;
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	f043 0304 	orr.w	r3, r3, #4
 800e67a:	617b      	str	r3, [r7, #20]
 800e67c:	e012      	b.n	800e6a4 <link_established+0xb0>
    } else
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    if (ho->neg_upap) {
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	f003 0310 	and.w	r3, r3, #16
 800e686:	b2db      	uxtb	r3, r3
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d00b      	beq.n	800e6a4 <link_established+0xb0>
	upap_authwithpeer(pcb, pcb->settings.user, pcb->settings.passwd);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6859      	ldr	r1, [r3, #4]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	689b      	ldr	r3, [r3, #8]
 800e694:	461a      	mov	r2, r3
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f008 f980 	bl	801699c <upap_authwithpeer>
	auth |= PAP_WITHPEER;
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	f043 0301 	orr.w	r3, r3, #1
 800e6a2:	617b      	str	r3, [r7, #20]
    } else
#endif /* PAP_SUPPORT */
    {}

    pcb->auth_pending = auth;
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	b29a      	uxth	r2, r3
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->auth_done = 0;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	865a      	strh	r2, [r3, #50]	; 0x32

    if (!auth)
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d102      	bne.n	800e6be <link_established+0xca>
#endif /* PPP_AUTH_SUPPORT */
	network_phase(pcb);
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f000 f807 	bl	800e6cc <network_phase>
}
 800e6be:	bf00      	nop
 800e6c0:	3718      	adds	r7, #24
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	0801dce8 	.word	0x0801dce8

0800e6cc <network_phase>:

/*
 * Proceed to the network phase.
 */
static void network_phase(ppp_pcb *pcb) {
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b082      	sub	sp, #8
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
	options_from_list(extra_options, 1);
	free_wordlist(extra_options);
	extra_options = 0;
    }
#endif /* PPP_OPTIONS */
    start_networks(pcb);
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 f804 	bl	800e6e2 <start_networks>
}
 800e6da:	bf00      	nop
 800e6dc:	3708      	adds	r7, #8
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}

0800e6e2 <start_networks>:

void start_networks(ppp_pcb *pcb) {
 800e6e2:	b580      	push	{r7, lr}
 800e6e4:	b082      	sub	sp, #8
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	6078      	str	r0, [r7, #4]
#if CCP_SUPPORT || ECP_SUPPORT
    int i;
    const struct protent *protp;
#endif /* CCP_SUPPORT || ECP_SUPPORT */

    new_phase(pcb, PPP_PHASE_NETWORK);
 800e6ea:	2109      	movs	r1, #9
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f007 f9c7 	bl	8015a80 <new_phase>
#endif /* ECP_SUPPORT */
#if MPPE_SUPPORT
        && !pcb->ccp_gotoptions.mppe
#endif /* MPPE_SUPPORT */
        )
	continue_networks(pcb);
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f000 f804 	bl	800e700 <continue_networks>
}
 800e6f8:	bf00      	nop
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <continue_networks>:

void continue_networks(ppp_pcb *pcb) {
 800e700:	b580      	push	{r7, lr}
 800e702:	b084      	sub	sp, #16
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
    const struct protent *protp;

    /*
     * Start the "real" network protocols.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800e708:	2300      	movs	r3, #0
 800e70a:	60fb      	str	r3, [r7, #12]
 800e70c:	e017      	b.n	800e73e <continue_networks+0x3e>
	if (protp->protocol < 0xC000
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	881b      	ldrh	r3, [r3, #0]
 800e712:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e716:	d20f      	bcs.n	800e738 <continue_networks+0x38>
	    && protp->protocol != PPP_CCP
#endif /* CCP_SUPPORT */
#if ECP_SUPPORT
	    && protp->protocol != PPP_ECP
#endif /* ECP_SUPPORT */
	    && protp->open != NULL) {
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	699b      	ldr	r3, [r3, #24]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d00b      	beq.n	800e738 <continue_networks+0x38>
	    (*protp->open)(pcb);
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	699b      	ldr	r3, [r3, #24]
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	4798      	blx	r3
	    ++pcb->num_np_open;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800e72e:	3301      	adds	r3, #1
 800e730:	b2da      	uxtb	r2, r3
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	3301      	adds	r3, #1
 800e73c:	60fb      	str	r3, [r7, #12]
 800e73e:	4a0a      	ldr	r2, [pc, #40]	; (800e768 <continue_networks+0x68>)
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e746:	60bb      	str	r3, [r7, #8]
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d1df      	bne.n	800e70e <continue_networks+0xe>
	}

    if (pcb->num_np_open == 0)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800e754:	2b00      	cmp	r3, #0
 800e756:	d103      	bne.n	800e760 <continue_networks+0x60>
	/* nothing to do */
	lcp_close(pcb, "No network protocols running");
 800e758:	4904      	ldr	r1, [pc, #16]	; (800e76c <continue_networks+0x6c>)
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f003 fa6a 	bl	8011c34 <lcp_close>
}
 800e760:	bf00      	nop
 800e762:	3710      	adds	r7, #16
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	0801dce8 	.word	0x0801dce8
 800e76c:	0801ca44 	.word	0x0801ca44

0800e770 <auth_withpeer_fail>:
#endif /* PPP_SERVER */

/*
 * We have failed to authenticate ourselves to the peer using `protocol'.
 */
void auth_withpeer_fail(ppp_pcb *pcb, int protocol) {
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	6039      	str	r1, [r7, #0]
     * authentication secrets.
     *
     * He'll probably take the link down, and there's not much
     * we can do except wait for that.
     */
    pcb->err_code = PPPERR_AUTHFAIL;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2207      	movs	r2, #7
 800e77e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    lcp_close(pcb, "Failed to authenticate ourselves to peer");
 800e782:	4904      	ldr	r1, [pc, #16]	; (800e794 <auth_withpeer_fail+0x24>)
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f003 fa55 	bl	8011c34 <lcp_close>
}
 800e78a:	bf00      	nop
 800e78c:	3708      	adds	r7, #8
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	0801ca64 	.word	0x0801ca64

0800e798 <auth_withpeer_success>:

/*
 * We have successfully authenticated ourselves with the peer using `protocol'.
 */
void auth_withpeer_success(ppp_pcb *pcb, int protocol, int prot_flavor) {
 800e798:	b580      	push	{r7, lr}
 800e79a:	b086      	sub	sp, #24
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	60f8      	str	r0, [r7, #12]
 800e7a0:	60b9      	str	r1, [r7, #8]
 800e7a2:	607a      	str	r2, [r7, #4]
    int bit;
    const char *prot = "";
 800e7a4:	4b24      	ldr	r3, [pc, #144]	; (800e838 <auth_withpeer_success+0xa0>)
 800e7a6:	613b      	str	r3, [r7, #16]
    LWIP_UNUSED_ARG(prot_flavor); /* if CHAP_SUPPORT is disabled */

    switch (protocol) {
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	f24c 0223 	movw	r2, #49187	; 0xc023
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d011      	beq.n	800e7d6 <auth_withpeer_success+0x3e>
 800e7b2:	f24c 2223 	movw	r2, #49699	; 0xc223
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d112      	bne.n	800e7e0 <auth_withpeer_success+0x48>
#if CHAP_SUPPORT
    case PPP_CHAP:
	bit = CHAP_WITHPEER;
 800e7ba:	2304      	movs	r3, #4
 800e7bc:	617b      	str	r3, [r7, #20]
	prot = "CHAP";
 800e7be:	4b1f      	ldr	r3, [pc, #124]	; (800e83c <auth_withpeer_success+0xa4>)
 800e7c0:	613b      	str	r3, [r7, #16]
	switch (prot_flavor) {
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2b05      	cmp	r3, #5
 800e7c6:	d000      	beq.n	800e7ca <auth_withpeer_success+0x32>
	case CHAP_MICROSOFT_V2:
	    bit |= CHAP_MS2_WITHPEER;
	    break;
#endif /* MSCHAP_SUPPORT */
	default:
	    break;
 800e7c8:	e004      	b.n	800e7d4 <auth_withpeer_success+0x3c>
	    bit |= CHAP_MD5_WITHPEER;
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7d0:	617b      	str	r3, [r7, #20]
	    break;
 800e7d2:	bf00      	nop
	}
	break;
 800e7d4:	e00a      	b.n	800e7ec <auth_withpeer_success+0x54>
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    case PPP_PAP:
	bit = PAP_WITHPEER;
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	617b      	str	r3, [r7, #20]
	prot = "PAP";
 800e7da:	4b19      	ldr	r3, [pc, #100]	; (800e840 <auth_withpeer_success+0xa8>)
 800e7dc:	613b      	str	r3, [r7, #16]
	break;
 800e7de:	e005      	b.n	800e7ec <auth_withpeer_success+0x54>
	bit = EAP_WITHPEER;
	prot = "EAP";
	break;
#endif /* EAP_SUPPORT */
    default:
	ppp_warn(("auth_withpeer_success: unknown protocol %x", protocol));
 800e7e0:	68b9      	ldr	r1, [r7, #8]
 800e7e2:	4818      	ldr	r0, [pc, #96]	; (800e844 <auth_withpeer_success+0xac>)
 800e7e4:	f008 ffb5 	bl	8017752 <ppp_warn_impl>
	bit = 0;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	617b      	str	r3, [r7, #20]
	/* no break */
    }

    ppp_notice(("%s authentication succeeded", prot));
 800e7ec:	6939      	ldr	r1, [r7, #16]
 800e7ee:	4816      	ldr	r0, [pc, #88]	; (800e848 <auth_withpeer_success+0xb0>)
 800e7f0:	f008 ffc2 	bl	8017778 <ppp_notice_impl>

    /* Save the authentication method for later. */
    pcb->auth_done |= bit;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7f8:	b21a      	sxth	r2, r3
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	b21b      	sxth	r3, r3
 800e7fe:	4313      	orrs	r3, r2
 800e800:	b21b      	sxth	r3, r3
 800e802:	b29a      	uxth	r2, r3
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	865a      	strh	r2, [r3, #50]	; 0x32

    /*
     * If there is no more authentication still being done,
     * proceed to the network (or callback) phase.
     */
    if ((pcb->auth_pending &= ~bit) == 0)
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800e80c:	b21a      	sxth	r2, r3
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	b21b      	sxth	r3, r3
 800e812:	43db      	mvns	r3, r3
 800e814:	b21b      	sxth	r3, r3
 800e816:	4013      	ands	r3, r2
 800e818:	b21b      	sxth	r3, r3
 800e81a:	b29a      	uxth	r2, r3
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	861a      	strh	r2, [r3, #48]	; 0x30
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800e824:	2b00      	cmp	r3, #0
 800e826:	d102      	bne.n	800e82e <auth_withpeer_success+0x96>
	network_phase(pcb);
 800e828:	68f8      	ldr	r0, [r7, #12]
 800e82a:	f7ff ff4f 	bl	800e6cc <network_phase>
}
 800e82e:	bf00      	nop
 800e830:	3718      	adds	r7, #24
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	0801ca90 	.word	0x0801ca90
 800e83c:	0801ca94 	.word	0x0801ca94
 800e840:	0801ca9c 	.word	0x0801ca9c
 800e844:	0801caa0 	.word	0x0801caa0
 800e848:	0801cacc 	.word	0x0801cacc

0800e84c <np_up>:


/*
 * np_up - a network protocol has come up.
 */
void np_up(ppp_pcb *pcb, int proto) {
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
#if PPP_IDLETIMELIMIT
    int tlim;
#endif /* PPP_IDLETIMELIMIT */
    LWIP_UNUSED_ARG(proto);

    if (pcb->num_np_up == 0) {
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d103      	bne.n	800e868 <np_up+0x1c>
	/*
	 * At this point we consider that the link has come up successfully.
	 */
	new_phase(pcb, PPP_PHASE_RUNNING);
 800e860:	210a      	movs	r1, #10
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f007 f90c 	bl	8015a80 <new_phase>
	 */
	if (updetach && !nodetach)
	    detach();
#endif /* Unused */
    }
    ++pcb->num_np_up;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 800e86e:	3301      	adds	r3, #1
 800e870:	b2da      	uxtb	r2, r3
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
}
 800e878:	bf00      	nop
 800e87a:	3708      	adds	r7, #8
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <np_down>:

/*
 * np_down - a network protocol has gone down.
 */
void np_down(ppp_pcb *pcb, int proto) {
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_up == 0) {
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 800e890:	3b01      	subs	r3, #1
 800e892:	b2da      	uxtb	r2, r3
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d103      	bne.n	800e8ac <np_down+0x2c>
	UNTIMEOUT(connect_time_expired, NULL);
#endif /* PPP_MAXCONNECT */
#ifdef MAXOCTETS
	UNTIMEOUT(check_maxoctets, NULL);
#endif
	new_phase(pcb, PPP_PHASE_NETWORK);
 800e8a4:	2109      	movs	r1, #9
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f007 f8ea 	bl	8015a80 <new_phase>
    }
}
 800e8ac:	bf00      	nop
 800e8ae:	3708      	adds	r7, #8
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <np_finished>:

/*
 * np_finished - a network protocol has finished using the link.
 */
void np_finished(ppp_pcb *pcb, int proto) {
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_open <= 0) {
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800e8c4:	3b01      	subs	r3, #1
 800e8c6:	b2da      	uxtb	r2, r3
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d103      	bne.n	800e8e0 <np_finished+0x2c>
	/* no further use for the link: shut up shop. */
	lcp_close(pcb, "No network protocols running");
 800e8d8:	4903      	ldr	r1, [pc, #12]	; (800e8e8 <np_finished+0x34>)
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f003 f9aa 	bl	8011c34 <lcp_close>
    }
}
 800e8e0:	bf00      	nop
 800e8e2:	3708      	adds	r7, #8
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	0801ca44 	.word	0x0801ca44

0800e8ec <get_secret>:
/*
 * get_secret - open the CHAP secret file and return the secret
 * for authenticating the given client on the given server.
 * (We could be either client or server).
 */
int get_secret(ppp_pcb *pcb, const char *client, const char *server, char *secret, int *secret_len, int am_server) {
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b086      	sub	sp, #24
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	60f8      	str	r0, [r7, #12]
 800e8f4:	60b9      	str	r1, [r7, #8]
 800e8f6:	607a      	str	r2, [r7, #4]
 800e8f8:	603b      	str	r3, [r7, #0]
  size_t len;
  LWIP_UNUSED_ARG(server);
  LWIP_UNUSED_ARG(am_server);

  if (!client || !client[0] || !pcb->settings.user || !pcb->settings.passwd || strcmp(client, pcb->settings.user)) {
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d014      	beq.n	800e92a <get_secret+0x3e>
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d010      	beq.n	800e92a <get_secret+0x3e>
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d00c      	beq.n	800e92a <get_secret+0x3e>
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	689b      	ldr	r3, [r3, #8]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d008      	beq.n	800e92a <get_secret+0x3e>
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	685b      	ldr	r3, [r3, #4]
 800e91c:	4619      	mov	r1, r3
 800e91e:	68b8      	ldr	r0, [r7, #8]
 800e920:	f7f1 fc56 	bl	80001d0 <strcmp>
 800e924:	4603      	mov	r3, r0
 800e926:	2b00      	cmp	r3, #0
 800e928:	d001      	beq.n	800e92e <get_secret+0x42>
    return 0;
 800e92a:	2300      	movs	r3, #0
 800e92c:	e01c      	b.n	800e968 <get_secret+0x7c>
  }

  len = strlen(pcb->settings.passwd);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	689b      	ldr	r3, [r3, #8]
 800e932:	4618      	mov	r0, r3
 800e934:	f7f1 fc56 	bl	80001e4 <strlen>
 800e938:	6178      	str	r0, [r7, #20]
  if (len > MAXSECRETLEN) {
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e940:	d907      	bls.n	800e952 <get_secret+0x66>
    ppp_error(("Secret for %s on %s is too long", client, server));
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	68b9      	ldr	r1, [r7, #8]
 800e946:	480a      	ldr	r0, [pc, #40]	; (800e970 <get_secret+0x84>)
 800e948:	f008 fef0 	bl	801772c <ppp_error_impl>
    len = MAXSECRETLEN;
 800e94c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e950:	617b      	str	r3, [r7, #20]
  }

  MEMCPY(secret, pcb->settings.passwd, len);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	689b      	ldr	r3, [r3, #8]
 800e956:	697a      	ldr	r2, [r7, #20]
 800e958:	4619      	mov	r1, r3
 800e95a:	6838      	ldr	r0, [r7, #0]
 800e95c:	f009 fc8c 	bl	8018278 <memcpy>
  *secret_len = len;
 800e960:	697a      	ldr	r2, [r7, #20]
 800e962:	6a3b      	ldr	r3, [r7, #32]
 800e964:	601a      	str	r2, [r3, #0]
  return 1;
 800e966:	2301      	movs	r3, #1
    BZERO(secbuf, sizeof(secbuf));
    *secret_len = len;

    return 1;
#endif /* UNUSED */
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3718      	adds	r7, #24
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}
 800e970:	0801cae8 	.word	0x0801cae8

0800e974 <chap_md5_make_response>:
}
#endif /* PPP_SERVER */

static void chap_md5_make_response(ppp_pcb *pcb, unsigned char *response, int id, const char *our_name,
		       const unsigned char *challenge, const char *secret, int secret_len,
		       unsigned char *private_) {
 800e974:	b580      	push	{r7, lr}
 800e976:	b09c      	sub	sp, #112	; 0x70
 800e978:	af00      	add	r7, sp, #0
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	607a      	str	r2, [r7, #4]
 800e980:	603b      	str	r3, [r7, #0]
	lwip_md5_context ctx;
	unsigned char idbyte = id;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	b2db      	uxtb	r3, r3
 800e986:	74fb      	strb	r3, [r7, #19]
	int challenge_len = *challenge++;
 800e988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e98a:	1c5a      	adds	r2, r3, #1
 800e98c:	67ba      	str	r2, [r7, #120]	; 0x78
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	66fb      	str	r3, [r7, #108]	; 0x6c
	LWIP_UNUSED_ARG(our_name);
	LWIP_UNUSED_ARG(private_);
	LWIP_UNUSED_ARG(pcb);

	lwip_md5_init(&ctx);
	lwip_md5_starts(&ctx);
 800e992:	f107 0314 	add.w	r3, r7, #20
 800e996:	4618      	mov	r0, r3
 800e998:	f005 fd8a 	bl	80144b0 <md5_starts>
	lwip_md5_update(&ctx, &idbyte, 1);
 800e99c:	f107 0113 	add.w	r1, r7, #19
 800e9a0:	f107 0314 	add.w	r3, r7, #20
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f006 fc6a 	bl	8015280 <md5_update>
	lwip_md5_update(&ctx, (const u_char *)secret, secret_len);
 800e9ac:	f107 0314 	add.w	r3, r7, #20
 800e9b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e9b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f006 fc62 	bl	8015280 <md5_update>
	lwip_md5_update(&ctx, challenge, challenge_len);
 800e9bc:	f107 0314 	add.w	r3, r7, #20
 800e9c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e9c2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f006 fc5b 	bl	8015280 <md5_update>
	lwip_md5_finish(&ctx, &response[1]);
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	1c5a      	adds	r2, r3, #1
 800e9ce:	f107 0314 	add.w	r3, r7, #20
 800e9d2:	4611      	mov	r1, r2
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f006 fcbb 	bl	8015350 <md5_finish>
	lwip_md5_free(&ctx);
	response[0] = MD5_HASH_SIZE;
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	2210      	movs	r2, #16
 800e9de:	701a      	strb	r2, [r3, #0]
}
 800e9e0:	bf00      	nop
 800e9e2:	3770      	adds	r7, #112	; 0x70
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <chap_init>:
};

/*
 * chap_init - reset to initial state.
 */
static void chap_init(ppp_pcb *pcb) {
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
	memset(&pcb->chap_client, 0, sizeof(chap_client_state));
#if PPP_SERVER
	memset(&pcb->chap_server, 0, sizeof(chap_server_state));
#endif /* PPP_SERVER */
#endif /* 0 */
}
 800e9f0:	bf00      	nop
 800e9f2:	370c      	adds	r7, #12
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <chap_lowerup>:

/*
 * chap_lowerup - we can start doing stuff now.
 */
static void chap_lowerup(ppp_pcb *pcb) {
 800e9fc:	b480      	push	{r7}
 800e9fe:	b083      	sub	sp, #12
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]

	pcb->chap_client.flags |= LOWERUP;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea0a:	f043 0301 	orr.w	r3, r3, #1
 800ea0e:	b2da      	uxtb	r2, r3
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#if PPP_SERVER
	pcb->chap_server.flags |= LOWERUP;
	if (pcb->chap_server.flags & AUTH_STARTED)
		chap_timeout(pcb);
#endif /* PPP_SERVER */
}
 800ea16:	bf00      	nop
 800ea18:	370c      	adds	r7, #12
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea20:	4770      	bx	lr

0800ea22 <chap_lowerdown>:

static void chap_lowerdown(ppp_pcb *pcb) {
 800ea22:	b480      	push	{r7}
 800ea24:	b083      	sub	sp, #12
 800ea26:	af00      	add	r7, sp, #0
 800ea28:	6078      	str	r0, [r7, #4]

	pcb->chap_client.flags = 0;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#if PPP_SERVER
	if (pcb->chap_server.flags & TIMEOUT_PENDING)
		UNTIMEOUT(chap_timeout, pcb);
	pcb->chap_server.flags = 0;
#endif /* PPP_SERVER */
}
 800ea32:	bf00      	nop
 800ea34:	370c      	adds	r7, #12
 800ea36:	46bd      	mov	sp, r7
 800ea38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3c:	4770      	bx	lr
	...

0800ea40 <chap_auth_with_peer>:

/*
 * chap_auth_with_peer - Prepare to authenticate ourselves to the peer.
 * There isn't much to do until we receive a challenge.
 */
void chap_auth_with_peer(ppp_pcb *pcb, const char *our_name, int digest_code) {
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b086      	sub	sp, #24
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	607a      	str	r2, [r7, #4]
	const struct chap_digest_type *dp;
	int i;

	if(NULL == our_name)
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d036      	beq.n	800eac0 <chap_auth_with_peer+0x80>
		return;

	if (pcb->chap_client.flags & AUTH_STARTED) {
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea58:	f003 0302 	and.w	r3, r3, #2
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d003      	beq.n	800ea68 <chap_auth_with_peer+0x28>
		ppp_error(("CHAP: authentication with peer already started!"));
 800ea60:	4819      	ldr	r0, [pc, #100]	; (800eac8 <chap_auth_with_peer+0x88>)
 800ea62:	f008 fe63 	bl	801772c <ppp_error_impl>
		return;
 800ea66:	e02c      	b.n	800eac2 <chap_auth_with_peer+0x82>
	}
	for (i = 0; (dp = chap_digests[i]) != NULL; ++i)
 800ea68:	2300      	movs	r3, #0
 800ea6a:	617b      	str	r3, [r7, #20]
 800ea6c:	e007      	b.n	800ea7e <chap_auth_with_peer+0x3e>
		if (dp->code == digest_code)
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d00b      	beq.n	800ea90 <chap_auth_with_peer+0x50>
	for (i = 0; (dp = chap_digests[i]) != NULL; ++i)
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	617b      	str	r3, [r7, #20]
 800ea7e:	4a13      	ldr	r2, [pc, #76]	; (800eacc <chap_auth_with_peer+0x8c>)
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea86:	613b      	str	r3, [r7, #16]
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d1ef      	bne.n	800ea6e <chap_auth_with_peer+0x2e>
 800ea8e:	e000      	b.n	800ea92 <chap_auth_with_peer+0x52>
			break;
 800ea90:	bf00      	nop

	if (dp == NULL)
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d103      	bne.n	800eaa0 <chap_auth_with_peer+0x60>
		ppp_fatal(("CHAP digest 0x%x requested but not available",
 800ea98:	6879      	ldr	r1, [r7, #4]
 800ea9a:	480d      	ldr	r0, [pc, #52]	; (800ead0 <chap_auth_with_peer+0x90>)
 800ea9c:	f008 fe28 	bl	80176f0 <ppp_fatal_impl>
		      digest_code));

	pcb->chap_client.digest = dp;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	693a      	ldr	r2, [r7, #16]
 800eaa4:	64da      	str	r2, [r3, #76]	; 0x4c
	pcb->chap_client.name = our_name;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	649a      	str	r2, [r3, #72]	; 0x48
	pcb->chap_client.flags |= AUTH_STARTED;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eab2:	f043 0302 	orr.w	r3, r3, #2
 800eab6:	b2da      	uxtb	r2, r3
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eabe:	e000      	b.n	800eac2 <chap_auth_with_peer+0x82>
		return;
 800eac0:	bf00      	nop
}
 800eac2:	3718      	adds	r7, #24
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}
 800eac8:	0801cb08 	.word	0x0801cb08
 800eacc:	0801dbb8 	.word	0x0801dbb8
 800ead0:	0801cb38 	.word	0x0801cb38

0800ead4 <chap_respond>:

/*
 * chap_respond - Generate and send a response to a challenge.
 */
static void chap_respond(ppp_pcb *pcb, int id,
	     unsigned char *pkt, int len) {
 800ead4:	b5b0      	push	{r4, r5, r7, lr}
 800ead6:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 800eada:	af04      	add	r7, sp, #16
 800eadc:	f107 040c 	add.w	r4, r7, #12
 800eae0:	6020      	str	r0, [r4, #0]
 800eae2:	f107 0008 	add.w	r0, r7, #8
 800eae6:	6001      	str	r1, [r0, #0]
 800eae8:	1d39      	adds	r1, r7, #4
 800eaea:	600a      	str	r2, [r1, #0]
 800eaec:	463a      	mov	r2, r7
 800eaee:	6013      	str	r3, [r2, #0]
	struct pbuf *p;
	u_char *outp;
	char rname[MAXNAMELEN+1];
	char secret[MAXSECRETLEN+1];

	p = pbuf_alloc(PBUF_RAW, (u16_t)(RESP_MAX_PKTLEN), PBUF_RAM);
 800eaf0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eaf4:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800eaf8:	2000      	movs	r0, #0
 800eafa:	f7f6 fee7 	bl	80058cc <pbuf_alloc>
 800eafe:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
	if(NULL == p)
 800eb02:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	f000 810b 	beq.w	800ed22 <chap_respond+0x24e>
		return;
	if(p->tot_len != p->len) {
 800eb0c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800eb10:	891a      	ldrh	r2, [r3, #8]
 800eb12:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800eb16:	895b      	ldrh	r3, [r3, #10]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d004      	beq.n	800eb26 <chap_respond+0x52>
		pbuf_free(p);
 800eb1c:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 800eb20:	f7f7 f978 	bl	8005e14 <pbuf_free>
		return;
 800eb24:	e102      	b.n	800ed2c <chap_respond+0x258>
	}

	if ((pcb->chap_client.flags & (LOWERUP | AUTH_STARTED)) != (LOWERUP | AUTH_STARTED))
 800eb26:	f107 030c 	add.w	r3, r7, #12
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb30:	f003 0303 	and.w	r3, r3, #3
 800eb34:	2b03      	cmp	r3, #3
 800eb36:	f040 80f6 	bne.w	800ed26 <chap_respond+0x252>
		return;		/* not ready */
	if (len < 2 || len < pkt[0] + 1)
 800eb3a:	463b      	mov	r3, r7
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	f340 80f3 	ble.w	800ed2a <chap_respond+0x256>
 800eb44:	1d3b      	adds	r3, r7, #4
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	1c5a      	adds	r2, r3, #1
 800eb4c:	463b      	mov	r3, r7
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	f300 80ea 	bgt.w	800ed2a <chap_respond+0x256>
		return;		/* too short */
	clen = pkt[0];
 800eb56:	1d3b      	adds	r3, r7, #4
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	nlen = len - (clen + 1);
 800eb60:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800eb64:	3301      	adds	r3, #1
 800eb66:	463a      	mov	r2, r7
 800eb68:	6812      	ldr	r2, [r2, #0]
 800eb6a:	1ad3      	subs	r3, r2, r3
 800eb6c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

	/* Null terminate and clean remote name. */
	ppp_slprintf(rname, sizeof(rname), "%.*v", nlen, pkt + clen + 1);
 800eb70:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800eb74:	3301      	adds	r3, #1
 800eb76:	1d3a      	adds	r2, r7, #4
 800eb78:	6812      	ldr	r2, [r2, #0]
 800eb7a:	4413      	add	r3, r2
 800eb7c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800eb80:	9300      	str	r3, [sp, #0]
 800eb82:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800eb86:	4a6b      	ldr	r2, [pc, #428]	; (800ed34 <chap_respond+0x260>)
 800eb88:	f240 1101 	movw	r1, #257	; 0x101
 800eb8c:	f008 f94a 	bl	8016e24 <ppp_slprintf>
	if (pcb->settings.explicit_remote || (pcb->settings.remote_name[0] != 0 && rname[0] == 0))
		strlcpy(rname, pcb->settings.remote_name, sizeof(rname));
#endif /* PPP_REMOTENAME */

	/* get secret for authenticating ourselves with the specified host */
	if (!get_secret(pcb, pcb->chap_client.name, rname, secret, &secret_len, 0)) {
 800eb90:	f107 030c 	add.w	r3, r7, #12
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800eb98:	f107 0414 	add.w	r4, r7, #20
 800eb9c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800eba0:	f107 000c 	add.w	r0, r7, #12
 800eba4:	2300      	movs	r3, #0
 800eba6:	9301      	str	r3, [sp, #4]
 800eba8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ebac:	9300      	str	r3, [sp, #0]
 800ebae:	4623      	mov	r3, r4
 800ebb0:	6800      	ldr	r0, [r0, #0]
 800ebb2:	f7ff fe9b 	bl	800e8ec <get_secret>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d108      	bne.n	800ebce <chap_respond+0xfa>
		secret_len = 0;	/* assume null secret if can't find one */
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
		ppp_warn(("No CHAP secret found for authenticating us to %q", rname));
 800ebc2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	485b      	ldr	r0, [pc, #364]	; (800ed38 <chap_respond+0x264>)
 800ebca:	f008 fdc2 	bl	8017752 <ppp_warn_impl>
	}

	outp = (u_char*)p->payload;
 800ebce:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800ebd2:	685b      	ldr	r3, [r3, #4]
 800ebd4:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	MAKEHEADER(outp, PPP_CHAP);
 800ebd8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800ebdc:	1c5a      	adds	r2, r3, #1
 800ebde:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 800ebe2:	22ff      	movs	r2, #255	; 0xff
 800ebe4:	701a      	strb	r2, [r3, #0]
 800ebe6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800ebea:	1c5a      	adds	r2, r3, #1
 800ebec:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 800ebf0:	2203      	movs	r2, #3
 800ebf2:	701a      	strb	r2, [r3, #0]
 800ebf4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800ebf8:	1c5a      	adds	r2, r3, #1
 800ebfa:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 800ebfe:	22c2      	movs	r2, #194	; 0xc2
 800ec00:	701a      	strb	r2, [r3, #0]
 800ec02:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800ec06:	1c5a      	adds	r2, r3, #1
 800ec08:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 800ec0c:	2223      	movs	r2, #35	; 0x23
 800ec0e:	701a      	strb	r2, [r3, #0]
	outp += CHAP_HDRLEN;
 800ec10:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800ec14:	3304      	adds	r3, #4
 800ec16:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220

	pcb->chap_client.digest->make_response(pcb, outp, id, pcb->chap_client.name, pkt,
 800ec1a:	f107 030c 	add.w	r3, r7, #12
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec22:	685c      	ldr	r4, [r3, #4]
 800ec24:	f107 030c 	add.w	r3, r7, #12
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800ec2c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
				  secret, secret_len, pcb->chap_client.priv);
 800ec30:	f107 020c 	add.w	r2, r7, #12
 800ec34:	6812      	ldr	r2, [r2, #0]
 800ec36:	f102 0150 	add.w	r1, r2, #80	; 0x50
	pcb->chap_client.digest->make_response(pcb, outp, id, pcb->chap_client.name, pkt,
 800ec3a:	f107 0208 	add.w	r2, r7, #8
 800ec3e:	f107 000c 	add.w	r0, r7, #12
 800ec42:	9103      	str	r1, [sp, #12]
 800ec44:	9302      	str	r3, [sp, #8]
 800ec46:	f107 0314 	add.w	r3, r7, #20
 800ec4a:	9301      	str	r3, [sp, #4]
 800ec4c:	1d3b      	adds	r3, r7, #4
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	9300      	str	r3, [sp, #0]
 800ec52:	462b      	mov	r3, r5
 800ec54:	6812      	ldr	r2, [r2, #0]
 800ec56:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 800ec5a:	6800      	ldr	r0, [r0, #0]
 800ec5c:	47a0      	blx	r4
	memset(secret, 0, secret_len);
 800ec5e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800ec62:	461a      	mov	r2, r3
 800ec64:	f107 0314 	add.w	r3, r7, #20
 800ec68:	2100      	movs	r1, #0
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f009 fb29 	bl	80182c2 <memset>

	clen = *outp;
 800ec70:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800ec74:	781b      	ldrb	r3, [r3, #0]
 800ec76:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	nlen = strlen(pcb->chap_client.name);
 800ec7a:	f107 030c 	add.w	r3, r7, #12
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7f1 faae 	bl	80001e4 <strlen>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	memcpy(outp + clen + 1, pcb->chap_client.name, nlen);
 800ec8e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800ec92:	3301      	adds	r3, #1
 800ec94:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800ec98:	18d0      	adds	r0, r2, r3
 800ec9a:	f107 030c 	add.w	r3, r7, #12
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eca2:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800eca6:	4619      	mov	r1, r3
 800eca8:	f009 fae6 	bl	8018278 <memcpy>

	outp = (u_char*)p->payload + PPP_HDRLEN;
 800ecac:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	3304      	adds	r3, #4
 800ecb4:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	len = CHAP_HDRLEN + clen + 1 + nlen;
 800ecb8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800ecbc:	1d59      	adds	r1, r3, #5
 800ecbe:	463b      	mov	r3, r7
 800ecc0:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800ecc4:	440a      	add	r2, r1
 800ecc6:	601a      	str	r2, [r3, #0]
	outp[0] = CHAP_RESPONSE;
 800ecc8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800eccc:	2202      	movs	r2, #2
 800ecce:	701a      	strb	r2, [r3, #0]
	outp[1] = id;
 800ecd0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	f107 0208 	add.w	r2, r7, #8
 800ecda:	6812      	ldr	r2, [r2, #0]
 800ecdc:	b2d2      	uxtb	r2, r2
 800ecde:	701a      	strb	r2, [r3, #0]
	outp[2] = len >> 8;
 800ece0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800ece4:	3302      	adds	r3, #2
 800ece6:	463a      	mov	r2, r7
 800ece8:	6812      	ldr	r2, [r2, #0]
 800ecea:	1212      	asrs	r2, r2, #8
 800ecec:	b2d2      	uxtb	r2, r2
 800ecee:	701a      	strb	r2, [r3, #0]
	outp[3] = len;
 800ecf0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800ecf4:	3303      	adds	r3, #3
 800ecf6:	463a      	mov	r2, r7
 800ecf8:	6812      	ldr	r2, [r2, #0]
 800ecfa:	b2d2      	uxtb	r2, r2
 800ecfc:	701a      	strb	r2, [r3, #0]

	pbuf_realloc(p, PPP_HDRLEN + len);
 800ecfe:	463b      	mov	r3, r7
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	b29b      	uxth	r3, r3
 800ed04:	3304      	adds	r3, #4
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	4619      	mov	r1, r3
 800ed0a:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 800ed0e:	f7f6 fecf 	bl	8005ab0 <pbuf_realloc>
	ppp_write(pcb, p);
 800ed12:	f107 030c 	add.w	r3, r7, #12
 800ed16:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 800ed1a:	6818      	ldr	r0, [r3, #0]
 800ed1c:	f006 fe7a 	bl	8015a14 <ppp_write>
 800ed20:	e004      	b.n	800ed2c <chap_respond+0x258>
		return;
 800ed22:	bf00      	nop
 800ed24:	e002      	b.n	800ed2c <chap_respond+0x258>
		return;		/* not ready */
 800ed26:	bf00      	nop
 800ed28:	e000      	b.n	800ed2c <chap_respond+0x258>
		return;		/* too short */
 800ed2a:	bf00      	nop
}
 800ed2c:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bdb0      	pop	{r4, r5, r7, pc}
 800ed34:	0801cb68 	.word	0x0801cb68
 800ed38:	0801cb70 	.word	0x0801cb70

0800ed3c <chap_handle_status>:

static void chap_handle_status(ppp_pcb *pcb, int code, int id,
		   unsigned char *pkt, int len) {
 800ed3c:	b590      	push	{r4, r7, lr}
 800ed3e:	b087      	sub	sp, #28
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	60f8      	str	r0, [r7, #12]
 800ed44:	60b9      	str	r1, [r7, #8]
 800ed46:	607a      	str	r2, [r7, #4]
 800ed48:	603b      	str	r3, [r7, #0]
	const char *msg = NULL;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	617b      	str	r3, [r7, #20]
	LWIP_UNUSED_ARG(id);

	if ((pcb->chap_client.flags & (AUTH_DONE|AUTH_STARTED|LOWERUP))
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed54:	f003 0307 	and.w	r3, r3, #7
 800ed58:	2b03      	cmp	r3, #3
 800ed5a:	d161      	bne.n	800ee20 <chap_handle_status+0xe4>
	    != (AUTH_STARTED|LOWERUP))
		return;
	pcb->chap_client.flags |= AUTH_DONE;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed62:	f043 0304 	orr.w	r3, r3, #4
 800ed66:	b2da      	uxtb	r2, r3
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	if (code == CHAP_SUCCESS) {
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	2b03      	cmp	r3, #3
 800ed72:	d116      	bne.n	800eda2 <chap_handle_status+0x66>
		/* used for MS-CHAP v2 mutual auth, yuck */
		if (pcb->chap_client.digest->check_success != NULL) {
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d00e      	beq.n	800ed9c <chap_handle_status+0x60>
			if (!(*pcb->chap_client.digest->check_success)(pcb, pkt, len, pcb->chap_client.priv))
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed82:	689c      	ldr	r4, [r3, #8]
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	3350      	adds	r3, #80	; 0x50
 800ed88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed8a:	6839      	ldr	r1, [r7, #0]
 800ed8c:	68f8      	ldr	r0, [r7, #12]
 800ed8e:	47a0      	blx	r4
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d114      	bne.n	800edc0 <chap_handle_status+0x84>
				code = CHAP_FAILURE;
 800ed96:	2304      	movs	r3, #4
 800ed98:	60bb      	str	r3, [r7, #8]
 800ed9a:	e011      	b.n	800edc0 <chap_handle_status+0x84>
		} else
			msg = "CHAP authentication succeeded";
 800ed9c:	4b22      	ldr	r3, [pc, #136]	; (800ee28 <chap_handle_status+0xec>)
 800ed9e:	617b      	str	r3, [r7, #20]
 800eda0:	e00e      	b.n	800edc0 <chap_handle_status+0x84>
	} else {
		if (pcb->chap_client.digest->handle_failure != NULL)
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eda6:	68db      	ldr	r3, [r3, #12]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d007      	beq.n	800edbc <chap_handle_status+0x80>
			(*pcb->chap_client.digest->handle_failure)(pcb, pkt, len);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edb0:	68db      	ldr	r3, [r3, #12]
 800edb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edb4:	6839      	ldr	r1, [r7, #0]
 800edb6:	68f8      	ldr	r0, [r7, #12]
 800edb8:	4798      	blx	r3
 800edba:	e001      	b.n	800edc0 <chap_handle_status+0x84>
		else
			msg = "CHAP authentication failed";
 800edbc:	4b1b      	ldr	r3, [pc, #108]	; (800ee2c <chap_handle_status+0xf0>)
 800edbe:	617b      	str	r3, [r7, #20]
	}
	if (msg) {
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d00d      	beq.n	800ede2 <chap_handle_status+0xa6>
		if (len > 0)
 800edc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc8:	2b00      	cmp	r3, #0
 800edca:	dd06      	ble.n	800edda <chap_handle_status+0x9e>
			ppp_info(("%s: %.*v", msg, len, pkt));
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edd0:	6979      	ldr	r1, [r7, #20]
 800edd2:	4817      	ldr	r0, [pc, #92]	; (800ee30 <chap_handle_status+0xf4>)
 800edd4:	f008 fce3 	bl	801779e <ppp_info_impl>
 800edd8:	e003      	b.n	800ede2 <chap_handle_status+0xa6>
		else
			ppp_info(("%s", msg));
 800edda:	6979      	ldr	r1, [r7, #20]
 800eddc:	4815      	ldr	r0, [pc, #84]	; (800ee34 <chap_handle_status+0xf8>)
 800edde:	f008 fcde 	bl	801779e <ppp_info_impl>
	}
	if (code == CHAP_SUCCESS)
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	2b03      	cmp	r3, #3
 800ede6:	d109      	bne.n	800edfc <chap_handle_status+0xc0>
		auth_withpeer_success(pcb, PPP_CHAP, pcb->chap_client.digest->code);
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	461a      	mov	r2, r3
 800edf0:	f24c 2123 	movw	r1, #49699	; 0xc223
 800edf4:	68f8      	ldr	r0, [r7, #12]
 800edf6:	f7ff fccf 	bl	800e798 <auth_withpeer_success>
 800edfa:	e012      	b.n	800ee22 <chap_handle_status+0xe6>
	else {
		pcb->chap_client.flags |= AUTH_FAILED;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee02:	f043 0308 	orr.w	r3, r3, #8
 800ee06:	b2da      	uxtb	r2, r3
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		ppp_error(("CHAP authentication failed"));
 800ee0e:	4807      	ldr	r0, [pc, #28]	; (800ee2c <chap_handle_status+0xf0>)
 800ee10:	f008 fc8c 	bl	801772c <ppp_error_impl>
		auth_withpeer_fail(pcb, PPP_CHAP);
 800ee14:	f24c 2123 	movw	r1, #49699	; 0xc223
 800ee18:	68f8      	ldr	r0, [r7, #12]
 800ee1a:	f7ff fca9 	bl	800e770 <auth_withpeer_fail>
 800ee1e:	e000      	b.n	800ee22 <chap_handle_status+0xe6>
		return;
 800ee20:	bf00      	nop
	}
}
 800ee22:	371c      	adds	r7, #28
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd90      	pop	{r4, r7, pc}
 800ee28:	0801cba4 	.word	0x0801cba4
 800ee2c:	0801cbc4 	.word	0x0801cbc4
 800ee30:	0801cbe0 	.word	0x0801cbe0
 800ee34:	0801cbec 	.word	0x0801cbec

0800ee38 <chap_input>:

static void chap_input(ppp_pcb *pcb, unsigned char *pkt, int pktlen) {
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b088      	sub	sp, #32
 800ee3c:	af02      	add	r7, sp, #8
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	60b9      	str	r1, [r7, #8]
 800ee42:	607a      	str	r2, [r7, #4]
	unsigned char code, id;
	int len;

	if (pktlen < CHAP_HDRLEN)
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2b03      	cmp	r3, #3
 800ee48:	dd3a      	ble.n	800eec0 <chap_input+0x88>
		return;
	GETCHAR(code, pkt);
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	1c5a      	adds	r2, r3, #1
 800ee4e:	60ba      	str	r2, [r7, #8]
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	75fb      	strb	r3, [r7, #23]
	GETCHAR(id, pkt);
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	1c5a      	adds	r2, r3, #1
 800ee58:	60ba      	str	r2, [r7, #8]
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	75bb      	strb	r3, [r7, #22]
	GETSHORT(len, pkt);
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	1c5a      	adds	r2, r3, #1
 800ee62:	60ba      	str	r2, [r7, #8]
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	021b      	lsls	r3, r3, #8
 800ee68:	613b      	str	r3, [r7, #16]
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	1c5a      	adds	r2, r3, #1
 800ee6e:	60ba      	str	r2, [r7, #8]
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	461a      	mov	r2, r3
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	4313      	orrs	r3, r2
 800ee78:	613b      	str	r3, [r7, #16]
	if (len < CHAP_HDRLEN || len > pktlen)
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	2b03      	cmp	r3, #3
 800ee7e:	dd21      	ble.n	800eec4 <chap_input+0x8c>
 800ee80:	693a      	ldr	r2, [r7, #16]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	dc1d      	bgt.n	800eec4 <chap_input+0x8c>
		return;
	len -= CHAP_HDRLEN;
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	3b04      	subs	r3, #4
 800ee8c:	613b      	str	r3, [r7, #16]

	switch (code) {
 800ee8e:	7dfb      	ldrb	r3, [r7, #23]
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	d005      	beq.n	800eea0 <chap_input+0x68>
 800ee94:	2b01      	cmp	r3, #1
 800ee96:	db17      	blt.n	800eec8 <chap_input+0x90>
 800ee98:	3b03      	subs	r3, #3
 800ee9a:	2b01      	cmp	r3, #1
 800ee9c:	d814      	bhi.n	800eec8 <chap_input+0x90>
 800ee9e:	e006      	b.n	800eeae <chap_input+0x76>
	case CHAP_CHALLENGE:
		chap_respond(pcb, id, pkt, len);
 800eea0:	7db9      	ldrb	r1, [r7, #22]
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	68ba      	ldr	r2, [r7, #8]
 800eea6:	68f8      	ldr	r0, [r7, #12]
 800eea8:	f7ff fe14 	bl	800ead4 <chap_respond>
		break;
 800eeac:	e00d      	b.n	800eeca <chap_input+0x92>
		chap_handle_response(pcb, id, pkt, len);
		break;
#endif /* PPP_SERVER */
	case CHAP_FAILURE:
	case CHAP_SUCCESS:
		chap_handle_status(pcb, code, id, pkt, len);
 800eeae:	7df9      	ldrb	r1, [r7, #23]
 800eeb0:	7dba      	ldrb	r2, [r7, #22]
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	9300      	str	r3, [sp, #0]
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	68f8      	ldr	r0, [r7, #12]
 800eeba:	f7ff ff3f 	bl	800ed3c <chap_handle_status>
		break;
 800eebe:	e004      	b.n	800eeca <chap_input+0x92>
		return;
 800eec0:	bf00      	nop
 800eec2:	e002      	b.n	800eeca <chap_input+0x92>
		return;
 800eec4:	bf00      	nop
 800eec6:	e000      	b.n	800eeca <chap_input+0x92>
	default:
		break;
 800eec8:	bf00      	nop
	}
}
 800eeca:	3718      	adds	r7, #24
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <chap_protrej>:

static void chap_protrej(ppp_pcb *pcb) {
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b082      	sub	sp, #8
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
	if (pcb->chap_server.flags & AUTH_STARTED) {
		pcb->chap_server.flags = 0;
		auth_peer_fail(pcb, PPP_CHAP);
	}
#endif /* PPP_SERVER */
	if ((pcb->chap_client.flags & (AUTH_STARTED|AUTH_DONE)) == AUTH_STARTED) {
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eede:	f003 0306 	and.w	r3, r3, #6
 800eee2:	2b02      	cmp	r3, #2
 800eee4:	d110      	bne.n	800ef08 <chap_protrej+0x38>
		pcb->chap_client.flags &= ~AUTH_STARTED;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eeec:	f023 0302 	bic.w	r3, r3, #2
 800eef0:	b2da      	uxtb	r2, r3
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		ppp_error(("CHAP authentication failed due to protocol-reject"));
 800eef8:	4805      	ldr	r0, [pc, #20]	; (800ef10 <chap_protrej+0x40>)
 800eefa:	f008 fc17 	bl	801772c <ppp_error_impl>
		auth_withpeer_fail(pcb, PPP_CHAP);
 800eefe:	f24c 2123 	movw	r1, #49699	; 0xc223
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f7ff fc34 	bl	800e770 <auth_withpeer_fail>
	}
}
 800ef08:	bf00      	nop
 800ef0a:	3708      	adds	r7, #8
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}
 800ef10:	0801cbf0 	.word	0x0801cbf0

0800ef14 <fsm_init>:
/*
 * fsm_init - Initialize fsm.
 *
 * Initialize fsm state.
 */
void fsm_init(fsm *f) {
 800ef14:	b480      	push	{r7}
 800ef16:	b085      	sub	sp, #20
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	60fb      	str	r3, [r7, #12]
    f->state = PPP_FSM_INITIAL;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2200      	movs	r2, #0
 800ef26:	741a      	strb	r2, [r3, #16]
    f->flags = 0;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	745a      	strb	r2, [r3, #17]
    f->id = 0;				/* XXX Start with random id? */
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2200      	movs	r2, #0
 800ef32:	749a      	strb	r2, [r3, #18]
    f->maxnakloops = pcb->settings.fsm_max_nak_loops;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	7c5a      	ldrb	r2, [r3, #17]
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	75da      	strb	r2, [r3, #23]
    f->term_reason_len = 0;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	761a      	strb	r2, [r3, #24]
}
 800ef42:	bf00      	nop
 800ef44:	3714      	adds	r7, #20
 800ef46:	46bd      	mov	sp, r7
 800ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4c:	4770      	bx	lr

0800ef4e <fsm_lowerup>:


/*
 * fsm_lowerup - The lower layer is up.
 */
void fsm_lowerup(fsm *f) {
 800ef4e:	b580      	push	{r7, lr}
 800ef50:	b082      	sub	sp, #8
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	7c1b      	ldrb	r3, [r3, #16]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d002      	beq.n	800ef64 <fsm_lowerup+0x16>
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d004      	beq.n	800ef6c <fsm_lowerup+0x1e>

    default:
	FSMDEBUG(("%s: Up event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800ef62:	e015      	b.n	800ef90 <fsm_lowerup+0x42>
	f->state = PPP_FSM_CLOSED;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2202      	movs	r2, #2
 800ef68:	741a      	strb	r2, [r3, #16]
	break;
 800ef6a:	e011      	b.n	800ef90 <fsm_lowerup+0x42>
	if( f->flags & OPT_SILENT )
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	7c5b      	ldrb	r3, [r3, #17]
 800ef70:	f003 0304 	and.w	r3, r3, #4
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d003      	beq.n	800ef80 <fsm_lowerup+0x32>
	    f->state = PPP_FSM_STOPPED;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2203      	movs	r2, #3
 800ef7c:	741a      	strb	r2, [r3, #16]
	break;
 800ef7e:	e006      	b.n	800ef8e <fsm_lowerup+0x40>
	    fsm_sconfreq(f, 0);
 800ef80:	2100      	movs	r1, #0
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f000 fdf0 	bl	800fb68 <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2206      	movs	r2, #6
 800ef8c:	741a      	strb	r2, [r3, #16]
	break;
 800ef8e:	bf00      	nop
}
 800ef90:	bf00      	nop
 800ef92:	3708      	adds	r7, #8
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <fsm_lowerdown>:
/*
 * fsm_lowerdown - The lower layer is down.
 *
 * Cancel all timeouts and inform upper layers.
 */
void fsm_lowerdown(fsm *f) {
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	7c1b      	ldrb	r3, [r3, #16]
 800efa4:	3b02      	subs	r3, #2
 800efa6:	2b07      	cmp	r3, #7
 800efa8:	d843      	bhi.n	800f032 <fsm_lowerdown+0x9a>
 800efaa:	a201      	add	r2, pc, #4	; (adr r2, 800efb0 <fsm_lowerdown+0x18>)
 800efac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb0:	0800efd1 	.word	0x0800efd1
 800efb4:	0800efd9 	.word	0x0800efd9
 800efb8:	0800eff5 	.word	0x0800eff5
 800efbc:	0800f005 	.word	0x0800f005
 800efc0:	0800f005 	.word	0x0800f005
 800efc4:	0800f005 	.word	0x0800f005
 800efc8:	0800f005 	.word	0x0800f005
 800efcc:	0800f015 	.word	0x0800f015
    case PPP_FSM_CLOSED:
	f->state = PPP_FSM_INITIAL;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	741a      	strb	r2, [r3, #16]
	break;
 800efd6:	e02c      	b.n	800f032 <fsm_lowerdown+0x9a>

    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_STARTING;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2201      	movs	r2, #1
 800efdc:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->starting )
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	685b      	ldr	r3, [r3, #4]
 800efe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d023      	beq.n	800f030 <fsm_lowerdown+0x98>
	    (*f->callbacks->starting)(f);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	4798      	blx	r3
	break;
 800eff2:	e01d      	b.n	800f030 <fsm_lowerdown+0x98>

    case PPP_FSM_CLOSING:
	f->state = PPP_FSM_INITIAL;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2200      	movs	r2, #0
 800eff8:	741a      	strb	r2, [r3, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800effa:	6879      	ldr	r1, [r7, #4]
 800effc:	480f      	ldr	r0, [pc, #60]	; (800f03c <fsm_lowerdown+0xa4>)
 800effe:	f7fe fd17 	bl	800da30 <sys_untimeout>
	break;
 800f002:	e016      	b.n	800f032 <fsm_lowerdown+0x9a>

    case PPP_FSM_STOPPING:
    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	f->state = PPP_FSM_STARTING;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2201      	movs	r2, #1
 800f008:	741a      	strb	r2, [r3, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800f00a:	6879      	ldr	r1, [r7, #4]
 800f00c:	480b      	ldr	r0, [pc, #44]	; (800f03c <fsm_lowerdown+0xa4>)
 800f00e:	f7fe fd0f 	bl	800da30 <sys_untimeout>
	break;
 800f012:	e00e      	b.n	800f032 <fsm_lowerdown+0x9a>

    case PPP_FSM_OPENED:
	if( f->callbacks->down )
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	685b      	ldr	r3, [r3, #4]
 800f018:	6a1b      	ldr	r3, [r3, #32]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d004      	beq.n	800f028 <fsm_lowerdown+0x90>
	    (*f->callbacks->down)(f);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	6a1b      	ldr	r3, [r3, #32]
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	4798      	blx	r3
	f->state = PPP_FSM_STARTING;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2201      	movs	r2, #1
 800f02c:	741a      	strb	r2, [r3, #16]
	break;
 800f02e:	e000      	b.n	800f032 <fsm_lowerdown+0x9a>
	break;
 800f030:	bf00      	nop

    default:
	FSMDEBUG(("%s: Down event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800f032:	bf00      	nop
 800f034:	3708      	adds	r7, #8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
 800f03a:	bf00      	nop
 800f03c:	0800f269 	.word	0x0800f269

0800f040 <fsm_open>:


/*
 * fsm_open - Link is allowed to come up.
 */
void fsm_open(fsm *f) {
 800f040:	b580      	push	{r7, lr}
 800f042:	b082      	sub	sp, #8
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	7c1b      	ldrb	r3, [r3, #16]
 800f04c:	2b09      	cmp	r3, #9
 800f04e:	d847      	bhi.n	800f0e0 <fsm_open+0xa0>
 800f050:	a201      	add	r2, pc, #4	; (adr r2, 800f058 <fsm_open+0x18>)
 800f052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f056:	bf00      	nop
 800f058:	0800f081 	.word	0x0800f081
 800f05c:	0800f0e1 	.word	0x0800f0e1
 800f060:	0800f09d 	.word	0x0800f09d
 800f064:	0800f0c7 	.word	0x0800f0c7
 800f068:	0800f0c1 	.word	0x0800f0c1
 800f06c:	0800f0e1 	.word	0x0800f0e1
 800f070:	0800f0e1 	.word	0x0800f0e1
 800f074:	0800f0e1 	.word	0x0800f0e1
 800f078:	0800f0e1 	.word	0x0800f0e1
 800f07c:	0800f0c7 	.word	0x0800f0c7
    case PPP_FSM_INITIAL:
	f->state = PPP_FSM_STARTING;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2201      	movs	r2, #1
 800f084:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->starting )
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	685b      	ldr	r3, [r3, #4]
 800f08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d029      	beq.n	800f0e4 <fsm_open+0xa4>
	    (*f->callbacks->starting)(f);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	4798      	blx	r3
	break;
 800f09a:	e023      	b.n	800f0e4 <fsm_open+0xa4>

    case PPP_FSM_CLOSED:
	if( f->flags & OPT_SILENT )
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	7c5b      	ldrb	r3, [r3, #17]
 800f0a0:	f003 0304 	and.w	r3, r3, #4
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d003      	beq.n	800f0b0 <fsm_open+0x70>
	    f->state = PPP_FSM_STOPPED;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2203      	movs	r2, #3
 800f0ac:	741a      	strb	r2, [r3, #16]
	else {
	    /* Send an initial configure-request */
	    fsm_sconfreq(f, 0);
	    f->state = PPP_FSM_REQSENT;
	}
	break;
 800f0ae:	e01c      	b.n	800f0ea <fsm_open+0xaa>
	    fsm_sconfreq(f, 0);
 800f0b0:	2100      	movs	r1, #0
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f000 fd58 	bl	800fb68 <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2206      	movs	r2, #6
 800f0bc:	741a      	strb	r2, [r3, #16]
	break;
 800f0be:	e014      	b.n	800f0ea <fsm_open+0xaa>

    case PPP_FSM_CLOSING:
	f->state = PPP_FSM_STOPPING;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2205      	movs	r2, #5
 800f0c4:	741a      	strb	r2, [r3, #16]
	/* fall through */
	/* no break */
    case PPP_FSM_STOPPED:
    case PPP_FSM_OPENED:
	if( f->flags & OPT_RESTART ){
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	7c5b      	ldrb	r3, [r3, #17]
 800f0ca:	f003 0302 	and.w	r3, r3, #2
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d00a      	beq.n	800f0e8 <fsm_open+0xa8>
	    fsm_lowerdown(f);
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f7ff ff60 	bl	800ef98 <fsm_lowerdown>
	    fsm_lowerup(f);
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f7ff ff38 	bl	800ef4e <fsm_lowerup>
	}
	break;
 800f0de:	e003      	b.n	800f0e8 <fsm_open+0xa8>
    default:
	break;
 800f0e0:	bf00      	nop
 800f0e2:	e002      	b.n	800f0ea <fsm_open+0xaa>
	break;
 800f0e4:	bf00      	nop
 800f0e6:	e000      	b.n	800f0ea <fsm_open+0xaa>
	break;
 800f0e8:	bf00      	nop
    }
}
 800f0ea:	bf00      	nop
 800f0ec:	3708      	adds	r7, #8
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}
 800f0f2:	bf00      	nop

0800f0f4 <terminate_layer>:
 * terminate_layer - Start process of shutting down the FSM
 *
 * Cancel any timeout running, notify upper layers we're done, and
 * send a terminate-request message as configured.
 */
static void terminate_layer(fsm *f, int nextstate) {
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b086      	sub	sp, #24
 800f0f8:	af02      	add	r7, sp, #8
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	6039      	str	r1, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	60fb      	str	r3, [r7, #12]

    if( f->state != PPP_FSM_OPENED )
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	7c1b      	ldrb	r3, [r3, #16]
 800f108:	2b09      	cmp	r3, #9
 800f10a:	d004      	beq.n	800f116 <terminate_layer+0x22>
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800f10c:	6879      	ldr	r1, [r7, #4]
 800f10e:	482f      	ldr	r0, [pc, #188]	; (800f1cc <terminate_layer+0xd8>)
 800f110:	f7fe fc8e 	bl	800da30 <sys_untimeout>
 800f114:	e009      	b.n	800f12a <terminate_layer+0x36>
    else if( f->callbacks->down )
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	685b      	ldr	r3, [r3, #4]
 800f11a:	6a1b      	ldr	r3, [r3, #32]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d004      	beq.n	800f12a <terminate_layer+0x36>
	(*f->callbacks->down)(f);	/* Inform upper layers we're down */
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	6a1b      	ldr	r3, [r3, #32]
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	4798      	blx	r3

    /* Init restart counter and send Terminate-Request */
    f->retransmits = pcb->settings.fsm_max_term_transmits;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	7c1a      	ldrb	r2, [r3, #16]
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	751a      	strb	r2, [r3, #20]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	7c9b      	ldrb	r3, [r3, #18]
 800f136:	3301      	adds	r3, #1
 800f138:	b2da      	uxtb	r2, r3
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	749a      	strb	r2, [r3, #18]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	7c9a      	ldrb	r2, [r3, #18]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	74da      	strb	r2, [r3, #19]
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	7cda      	ldrb	r2, [r3, #19]
	      (const u_char *) f->term_reason, f->term_reason_len);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6899      	ldr	r1, [r3, #8]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	7e1b      	ldrb	r3, [r3, #24]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800f152:	9300      	str	r3, [sp, #0]
 800f154:	460b      	mov	r3, r1
 800f156:	2105      	movs	r1, #5
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f000 fdf3 	bl	800fd44 <fsm_sdata>

    if (f->retransmits == 0) {
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	7d1b      	ldrb	r3, [r3, #20]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d112      	bne.n	800f18c <terminate_layer+0x98>
	/*
	 * User asked for no terminate requests at all; just close it.
	 * We've already fired off one Terminate-Request just to be nice
	 * to the peer, but we're not going to wait for a reply.
	 */
	f->state = nextstate == PPP_FSM_CLOSING ? PPP_FSM_CLOSED : PPP_FSM_STOPPED;
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	2b04      	cmp	r3, #4
 800f16a:	d101      	bne.n	800f170 <terminate_layer+0x7c>
 800f16c:	2202      	movs	r2, #2
 800f16e:	e000      	b.n	800f172 <terminate_layer+0x7e>
 800f170:	2203      	movs	r2, #3
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d020      	beq.n	800f1c2 <terminate_layer+0xce>
	    (*f->callbacks->finished)(f);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	4798      	blx	r3
	return;
 800f18a:	e01a      	b.n	800f1c2 <terminate_layer+0xce>
    }

    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800f18c:	6879      	ldr	r1, [r7, #4]
 800f18e:	480f      	ldr	r0, [pc, #60]	; (800f1cc <terminate_layer+0xd8>)
 800f190:	f7fe fc4e 	bl	800da30 <sys_untimeout>
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	7b9b      	ldrb	r3, [r3, #14]
 800f198:	461a      	mov	r2, r3
 800f19a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f19e:	fb03 f302 	mul.w	r3, r3, r2
 800f1a2:	687a      	ldr	r2, [r7, #4]
 800f1a4:	4909      	ldr	r1, [pc, #36]	; (800f1cc <terminate_layer+0xd8>)
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7fe fc16 	bl	800d9d8 <sys_timeout>
    --f->retransmits;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	7d1b      	ldrb	r3, [r3, #20]
 800f1b0:	3b01      	subs	r3, #1
 800f1b2:	b2da      	uxtb	r2, r3
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	751a      	strb	r2, [r3, #20]

    f->state = nextstate;
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	b2da      	uxtb	r2, r3
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	741a      	strb	r2, [r3, #16]
 800f1c0:	e000      	b.n	800f1c4 <terminate_layer+0xd0>
	return;
 800f1c2:	bf00      	nop
}
 800f1c4:	3710      	adds	r7, #16
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	0800f269 	.word	0x0800f269

0800f1d0 <fsm_close>:
 * fsm_close - Start closing connection.
 *
 * Cancel timeouts and either initiate close or possibly go directly to
 * the PPP_FSM_CLOSED state.
 */
void fsm_close(fsm *f, const char *reason) {
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b082      	sub	sp, #8
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
 800f1d8:	6039      	str	r1, [r7, #0]
    f->term_reason = reason;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	683a      	ldr	r2, [r7, #0]
 800f1de:	609a      	str	r2, [r3, #8]
    f->term_reason_len = (reason == NULL? 0: (u8_t)LWIP_MIN(strlen(reason), 0xFF) );
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d00d      	beq.n	800f202 <fsm_close+0x32>
 800f1e6:	6838      	ldr	r0, [r7, #0]
 800f1e8:	f7f0 fffc 	bl	80001e4 <strlen>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	2bfe      	cmp	r3, #254	; 0xfe
 800f1f0:	d805      	bhi.n	800f1fe <fsm_close+0x2e>
 800f1f2:	6838      	ldr	r0, [r7, #0]
 800f1f4:	f7f0 fff6 	bl	80001e4 <strlen>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	b2db      	uxtb	r3, r3
 800f1fc:	e002      	b.n	800f204 <fsm_close+0x34>
 800f1fe:	23ff      	movs	r3, #255	; 0xff
 800f200:	e000      	b.n	800f204 <fsm_close+0x34>
 800f202:	2300      	movs	r3, #0
 800f204:	687a      	ldr	r2, [r7, #4]
 800f206:	7613      	strb	r3, [r2, #24]
    switch( f->state ){
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	7c1b      	ldrb	r3, [r3, #16]
 800f20c:	3b01      	subs	r3, #1
 800f20e:	2b08      	cmp	r3, #8
 800f210:	d825      	bhi.n	800f25e <fsm_close+0x8e>
 800f212:	a201      	add	r2, pc, #4	; (adr r2, 800f218 <fsm_close+0x48>)
 800f214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f218:	0800f23d 	.word	0x0800f23d
 800f21c:	0800f25f 	.word	0x0800f25f
 800f220:	0800f245 	.word	0x0800f245
 800f224:	0800f25f 	.word	0x0800f25f
 800f228:	0800f24d 	.word	0x0800f24d
 800f22c:	0800f255 	.word	0x0800f255
 800f230:	0800f255 	.word	0x0800f255
 800f234:	0800f255 	.word	0x0800f255
 800f238:	0800f255 	.word	0x0800f255
    case PPP_FSM_STARTING:
	f->state = PPP_FSM_INITIAL;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2200      	movs	r2, #0
 800f240:	741a      	strb	r2, [r3, #16]
	break;
 800f242:	e00d      	b.n	800f260 <fsm_close+0x90>
    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_CLOSED;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2202      	movs	r2, #2
 800f248:	741a      	strb	r2, [r3, #16]
	break;
 800f24a:	e009      	b.n	800f260 <fsm_close+0x90>
    case PPP_FSM_STOPPING:
	f->state = PPP_FSM_CLOSING;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2204      	movs	r2, #4
 800f250:	741a      	strb	r2, [r3, #16]
	break;
 800f252:	e005      	b.n	800f260 <fsm_close+0x90>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
    case PPP_FSM_OPENED:
	terminate_layer(f, PPP_FSM_CLOSING);
 800f254:	2104      	movs	r1, #4
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f7ff ff4c 	bl	800f0f4 <terminate_layer>
	break;
 800f25c:	e000      	b.n	800f260 <fsm_close+0x90>
    default:
	break;
 800f25e:	bf00      	nop
    }
}
 800f260:	bf00      	nop
 800f262:	3708      	adds	r7, #8
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <fsm_timeout>:


/*
 * fsm_timeout - Timeout expired.
 */
static void fsm_timeout(void *arg) {
 800f268:	b580      	push	{r7, lr}
 800f26a:	b086      	sub	sp, #24
 800f26c:	af02      	add	r7, sp, #8
 800f26e:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm *) arg;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	60fb      	str	r3, [r7, #12]
    ppp_pcb *pcb = f->pcb;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	60bb      	str	r3, [r7, #8]

    switch (f->state) {
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	7c1b      	ldrb	r3, [r3, #16]
 800f27e:	3b04      	subs	r3, #4
 800f280:	2b04      	cmp	r3, #4
 800f282:	f200 808a 	bhi.w	800f39a <fsm_timeout+0x132>
 800f286:	a201      	add	r2, pc, #4	; (adr r2, 800f28c <fsm_timeout+0x24>)
 800f288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f28c:	0800f2a1 	.word	0x0800f2a1
 800f290:	0800f2a1 	.word	0x0800f2a1
 800f294:	0800f32b 	.word	0x0800f32b
 800f298:	0800f32b 	.word	0x0800f32b
 800f29c:	0800f32b 	.word	0x0800f32b
    case PPP_FSM_CLOSING:
    case PPP_FSM_STOPPING:
	if( f->retransmits <= 0 ){
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	7d1b      	ldrb	r3, [r3, #20]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d113      	bne.n	800f2d0 <fsm_timeout+0x68>
	    /*
	     * We've waited for an ack long enough.  Peer probably heard us.
	     */
	    f->state = (f->state == PPP_FSM_CLOSING)? PPP_FSM_CLOSED: PPP_FSM_STOPPED;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	7c1b      	ldrb	r3, [r3, #16]
 800f2ac:	2b04      	cmp	r3, #4
 800f2ae:	d101      	bne.n	800f2b4 <fsm_timeout+0x4c>
 800f2b0:	2202      	movs	r2, #2
 800f2b2:	e000      	b.n	800f2b6 <fsm_timeout+0x4e>
 800f2b4:	2203      	movs	r2, #3
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	741a      	strb	r2, [r3, #16]
	    if( f->callbacks->finished )
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d067      	beq.n	800f394 <fsm_timeout+0x12c>
		(*f->callbacks->finished)(f);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2ca:	68f8      	ldr	r0, [r7, #12]
 800f2cc:	4798      	blx	r3
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
		      (const u_char *) f->term_reason, f->term_reason_len);
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
	    --f->retransmits;
	}
	break;
 800f2ce:	e061      	b.n	800f394 <fsm_timeout+0x12c>
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	7c9b      	ldrb	r3, [r3, #18]
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	b2da      	uxtb	r2, r3
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	749a      	strb	r2, [r3, #18]
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	7c9a      	ldrb	r2, [r3, #18]
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	74da      	strb	r2, [r3, #19]
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	7cda      	ldrb	r2, [r3, #19]
		      (const u_char *) f->term_reason, f->term_reason_len);
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	6899      	ldr	r1, [r3, #8]
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	7e1b      	ldrb	r3, [r3, #24]
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800f2f0:	9300      	str	r3, [sp, #0]
 800f2f2:	460b      	mov	r3, r1
 800f2f4:	2105      	movs	r1, #5
 800f2f6:	68f8      	ldr	r0, [r7, #12]
 800f2f8:	f000 fd24 	bl	800fd44 <fsm_sdata>
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800f2fc:	68f9      	ldr	r1, [r7, #12]
 800f2fe:	4829      	ldr	r0, [pc, #164]	; (800f3a4 <fsm_timeout+0x13c>)
 800f300:	f7fe fb96 	bl	800da30 <sys_untimeout>
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	7b9b      	ldrb	r3, [r3, #14]
 800f308:	461a      	mov	r2, r3
 800f30a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f30e:	fb03 f302 	mul.w	r3, r3, r2
 800f312:	68fa      	ldr	r2, [r7, #12]
 800f314:	4923      	ldr	r1, [pc, #140]	; (800f3a4 <fsm_timeout+0x13c>)
 800f316:	4618      	mov	r0, r3
 800f318:	f7fe fb5e 	bl	800d9d8 <sys_timeout>
	    --f->retransmits;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	7d1b      	ldrb	r3, [r3, #20]
 800f320:	3b01      	subs	r3, #1
 800f322:	b2da      	uxtb	r2, r3
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	751a      	strb	r2, [r3, #20]
	break;
 800f328:	e034      	b.n	800f394 <fsm_timeout+0x12c>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	if (f->retransmits <= 0) {
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	7d1b      	ldrb	r3, [r3, #20]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d11a      	bne.n	800f368 <fsm_timeout+0x100>
	    ppp_warn(("%s: timeout sending Config-Requests", PROTO_NAME(f)));
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f338:	4619      	mov	r1, r3
 800f33a:	481b      	ldr	r0, [pc, #108]	; (800f3a8 <fsm_timeout+0x140>)
 800f33c:	f008 fa09 	bl	8017752 <ppp_warn_impl>
	    f->state = PPP_FSM_STOPPED;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2203      	movs	r2, #3
 800f344:	741a      	strb	r2, [r3, #16]
	    if( (f->flags & OPT_PASSIVE) == 0 && f->callbacks->finished )
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	7c5b      	ldrb	r3, [r3, #17]
 800f34a:	f003 0301 	and.w	r3, r3, #1
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d122      	bne.n	800f398 <fsm_timeout+0x130>
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d01d      	beq.n	800f398 <fsm_timeout+0x130>
		(*f->callbacks->finished)(f);
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	685b      	ldr	r3, [r3, #4]
 800f360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	4798      	blx	r3
		(*f->callbacks->retransmit)(f);
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
	    if( f->state == PPP_FSM_ACKRCVD )
		f->state = PPP_FSM_REQSENT;
	}
	break;
 800f366:	e017      	b.n	800f398 <fsm_timeout+0x130>
	    if (f->callbacks->retransmit)
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	685b      	ldr	r3, [r3, #4]
 800f36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d004      	beq.n	800f37c <fsm_timeout+0x114>
		(*f->callbacks->retransmit)(f);
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	685b      	ldr	r3, [r3, #4]
 800f376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f378:	68f8      	ldr	r0, [r7, #12]
 800f37a:	4798      	blx	r3
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
 800f37c:	2101      	movs	r1, #1
 800f37e:	68f8      	ldr	r0, [r7, #12]
 800f380:	f000 fbf2 	bl	800fb68 <fsm_sconfreq>
	    if( f->state == PPP_FSM_ACKRCVD )
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	7c1b      	ldrb	r3, [r3, #16]
 800f388:	2b07      	cmp	r3, #7
 800f38a:	d105      	bne.n	800f398 <fsm_timeout+0x130>
		f->state = PPP_FSM_REQSENT;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2206      	movs	r2, #6
 800f390:	741a      	strb	r2, [r3, #16]
	break;
 800f392:	e001      	b.n	800f398 <fsm_timeout+0x130>
	break;
 800f394:	bf00      	nop
 800f396:	e000      	b.n	800f39a <fsm_timeout+0x132>
	break;
 800f398:	bf00      	nop

    default:
	FSMDEBUG(("%s: Timeout event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800f39a:	bf00      	nop
 800f39c:	3710      	adds	r7, #16
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	bf00      	nop
 800f3a4:	0800f269 	.word	0x0800f269
 800f3a8:	0801cc24 	.word	0x0801cc24

0800f3ac <fsm_input>:


/*
 * fsm_input - Input packet.
 */
void fsm_input(fsm *f, u_char *inpacket, int l) {
 800f3ac:	b590      	push	{r4, r7, lr}
 800f3ae:	b08b      	sub	sp, #44	; 0x2c
 800f3b0:	af02      	add	r7, sp, #8
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]

    /*
     * Parse header (code, id and length).
     * If packet too short, drop it.
     */
    inp = inpacket;
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	61fb      	str	r3, [r7, #28]
    if (l < HEADERLEN) {
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2b03      	cmp	r3, #3
 800f3c0:	f340 808c 	ble.w	800f4dc <fsm_input+0x130>
	FSMDEBUG(("fsm_input(%x): Rcvd short header.", f->protocol));
	return;
    }
    GETCHAR(code, inp);
 800f3c4:	69fb      	ldr	r3, [r7, #28]
 800f3c6:	1c5a      	adds	r2, r3, #1
 800f3c8:	61fa      	str	r2, [r7, #28]
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	76fb      	strb	r3, [r7, #27]
    GETCHAR(id, inp);
 800f3ce:	69fb      	ldr	r3, [r7, #28]
 800f3d0:	1c5a      	adds	r2, r3, #1
 800f3d2:	61fa      	str	r2, [r7, #28]
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	76bb      	strb	r3, [r7, #26]
    GETSHORT(len, inp);
 800f3d8:	69fb      	ldr	r3, [r7, #28]
 800f3da:	1c5a      	adds	r2, r3, #1
 800f3dc:	61fa      	str	r2, [r7, #28]
 800f3de:	781b      	ldrb	r3, [r3, #0]
 800f3e0:	021b      	lsls	r3, r3, #8
 800f3e2:	617b      	str	r3, [r7, #20]
 800f3e4:	69fb      	ldr	r3, [r7, #28]
 800f3e6:	1c5a      	adds	r2, r3, #1
 800f3e8:	61fa      	str	r2, [r7, #28]
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	461a      	mov	r2, r3
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	4313      	orrs	r3, r2
 800f3f2:	617b      	str	r3, [r7, #20]
    if (len < HEADERLEN) {
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	2b03      	cmp	r3, #3
 800f3f8:	dd72      	ble.n	800f4e0 <fsm_input+0x134>
	FSMDEBUG(("fsm_input(%x): Rcvd illegal length.", f->protocol));
	return;
    }
    if (len > l) {
 800f3fa:	697a      	ldr	r2, [r7, #20]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	429a      	cmp	r2, r3
 800f400:	dc70      	bgt.n	800f4e4 <fsm_input+0x138>
	FSMDEBUG(("fsm_input(%x): Rcvd short packet.", f->protocol));
	return;
    }
    len -= HEADERLEN;		/* subtract header length */
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	3b04      	subs	r3, #4
 800f406:	617b      	str	r3, [r7, #20]

    if( f->state == PPP_FSM_INITIAL || f->state == PPP_FSM_STARTING ){
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	7c1b      	ldrb	r3, [r3, #16]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d06b      	beq.n	800f4e8 <fsm_input+0x13c>
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	7c1b      	ldrb	r3, [r3, #16]
 800f414:	2b01      	cmp	r3, #1
 800f416:	d067      	beq.n	800f4e8 <fsm_input+0x13c>
    }

    /*
     * Action depends on code.
     */
    switch (code) {
 800f418:	7efb      	ldrb	r3, [r7, #27]
 800f41a:	3b01      	subs	r3, #1
 800f41c:	2b06      	cmp	r3, #6
 800f41e:	d839      	bhi.n	800f494 <fsm_input+0xe8>
 800f420:	a201      	add	r2, pc, #4	; (adr r2, 800f428 <fsm_input+0x7c>)
 800f422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f426:	bf00      	nop
 800f428:	0800f445 	.word	0x0800f445
 800f42c:	0800f453 	.word	0x0800f453
 800f430:	0800f461 	.word	0x0800f461
 800f434:	0800f461 	.word	0x0800f461
 800f438:	0800f473 	.word	0x0800f473
 800f43c:	0800f481 	.word	0x0800f481
 800f440:	0800f489 	.word	0x0800f489
    case CONFREQ:
	fsm_rconfreq(f, id, inp, len);
 800f444:	7eb9      	ldrb	r1, [r7, #26]
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	69fa      	ldr	r2, [r7, #28]
 800f44a:	68f8      	ldr	r0, [r7, #12]
 800f44c:	f000 f852 	bl	800f4f4 <fsm_rconfreq>
	break;
 800f450:	e04d      	b.n	800f4ee <fsm_input+0x142>
    
    case CONFACK:
	fsm_rconfack(f, id, inp, len);
 800f452:	7eb9      	ldrb	r1, [r7, #26]
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	69fa      	ldr	r2, [r7, #28]
 800f458:	68f8      	ldr	r0, [r7, #12]
 800f45a:	f000 f8f1 	bl	800f640 <fsm_rconfack>
	break;
 800f45e:	e046      	b.n	800f4ee <fsm_input+0x142>
    
    case CONFNAK:
    case CONFREJ:
	fsm_rconfnakrej(f, code, id, inp, len);
 800f460:	7ef9      	ldrb	r1, [r7, #27]
 800f462:	7eba      	ldrb	r2, [r7, #26]
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	9300      	str	r3, [sp, #0]
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	68f8      	ldr	r0, [r7, #12]
 800f46c:	f000 f990 	bl	800f790 <fsm_rconfnakrej>
	break;
 800f470:	e03d      	b.n	800f4ee <fsm_input+0x142>
    
    case TERMREQ:
	fsm_rtermreq(f, id, inp, len);
 800f472:	7eb9      	ldrb	r1, [r7, #26]
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	69fa      	ldr	r2, [r7, #28]
 800f478:	68f8      	ldr	r0, [r7, #12]
 800f47a:	f000 fa3f 	bl	800f8fc <fsm_rtermreq>
	break;
 800f47e:	e036      	b.n	800f4ee <fsm_input+0x142>
    
    case TERMACK:
	fsm_rtermack(f);
 800f480:	68f8      	ldr	r0, [r7, #12]
 800f482:	f000 fa9b 	bl	800f9bc <fsm_rtermack>
	break;
 800f486:	e032      	b.n	800f4ee <fsm_input+0x142>
    
    case CODEREJ:
	fsm_rcoderej(f, inp, len);
 800f488:	697a      	ldr	r2, [r7, #20]
 800f48a:	69f9      	ldr	r1, [r7, #28]
 800f48c:	68f8      	ldr	r0, [r7, #12]
 800f48e:	f000 faf3 	bl	800fa78 <fsm_rcoderej>
	break;
 800f492:	e02c      	b.n	800f4ee <fsm_input+0x142>
    
    default:
	if( !f->callbacks->extcode
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d00c      	beq.n	800f4b8 <fsm_input+0x10c>
	   || !(*f->callbacks->extcode)(f, code, id, inp, len) )
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800f4a4:	7ef9      	ldrb	r1, [r7, #27]
 800f4a6:	7eba      	ldrb	r2, [r7, #26]
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	9300      	str	r3, [sp, #0]
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	68f8      	ldr	r0, [r7, #12]
 800f4b0:	47a0      	blx	r4
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d119      	bne.n	800f4ec <fsm_input+0x140>
	    fsm_sdata(f, CODEREJ, ++f->id, inpacket, len + HEADERLEN);
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	7c9b      	ldrb	r3, [r3, #18]
 800f4bc:	3301      	adds	r3, #1
 800f4be:	b2da      	uxtb	r2, r3
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	749a      	strb	r2, [r3, #18]
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	7c9a      	ldrb	r2, [r3, #18]
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	3304      	adds	r3, #4
 800f4cc:	9300      	str	r3, [sp, #0]
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	2107      	movs	r1, #7
 800f4d2:	68f8      	ldr	r0, [r7, #12]
 800f4d4:	f000 fc36 	bl	800fd44 <fsm_sdata>
	break;
 800f4d8:	bf00      	nop
 800f4da:	e007      	b.n	800f4ec <fsm_input+0x140>
	return;
 800f4dc:	bf00      	nop
 800f4de:	e006      	b.n	800f4ee <fsm_input+0x142>
	return;
 800f4e0:	bf00      	nop
 800f4e2:	e004      	b.n	800f4ee <fsm_input+0x142>
	return;
 800f4e4:	bf00      	nop
 800f4e6:	e002      	b.n	800f4ee <fsm_input+0x142>
	return;
 800f4e8:	bf00      	nop
 800f4ea:	e000      	b.n	800f4ee <fsm_input+0x142>
	break;
 800f4ec:	bf00      	nop
    }
}
 800f4ee:	3724      	adds	r7, #36	; 0x24
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd90      	pop	{r4, r7, pc}

0800f4f4 <fsm_rconfreq>:


/*
 * fsm_rconfreq - Receive Configure-Request.
 */
static void fsm_rconfreq(fsm *f, u_char id, u_char *inp, int len) {
 800f4f4:	b590      	push	{r4, r7, lr}
 800f4f6:	b089      	sub	sp, #36	; 0x24
 800f4f8:	af02      	add	r7, sp, #8
 800f4fa:	60f8      	str	r0, [r7, #12]
 800f4fc:	607a      	str	r2, [r7, #4]
 800f4fe:	603b      	str	r3, [r7, #0]
 800f500:	460b      	mov	r3, r1
 800f502:	72fb      	strb	r3, [r7, #11]
    int code, reject_if_disagree;

    switch( f->state ){
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	7c1b      	ldrb	r3, [r3, #16]
 800f508:	3b02      	subs	r3, #2
 800f50a:	2b07      	cmp	r3, #7
 800f50c:	d835      	bhi.n	800f57a <fsm_rconfreq+0x86>
 800f50e:	a201      	add	r2, pc, #4	; (adr r2, 800f514 <fsm_rconfreq+0x20>)
 800f510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f514:	0800f535 	.word	0x0800f535
 800f518:	0800f56b 	.word	0x0800f56b
 800f51c:	0800f633 	.word	0x0800f633
 800f520:	0800f633 	.word	0x0800f633
 800f524:	0800f57b 	.word	0x0800f57b
 800f528:	0800f57b 	.word	0x0800f57b
 800f52c:	0800f57b 	.word	0x0800f57b
 800f530:	0800f547 	.word	0x0800f547
    case PPP_FSM_CLOSED:
	/* Go away, we're closed */
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800f534:	7afa      	ldrb	r2, [r7, #11]
 800f536:	2300      	movs	r3, #0
 800f538:	9300      	str	r3, [sp, #0]
 800f53a:	2300      	movs	r3, #0
 800f53c:	2106      	movs	r1, #6
 800f53e:	68f8      	ldr	r0, [r7, #12]
 800f540:	f000 fc00 	bl	800fd44 <fsm_sdata>
	return;
 800f544:	e076      	b.n	800f634 <fsm_rconfreq+0x140>
    case PPP_FSM_STOPPING:
	return;

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if( f->callbacks->down )
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	6a1b      	ldr	r3, [r3, #32]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d004      	beq.n	800f55a <fsm_rconfreq+0x66>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	6a1b      	ldr	r3, [r3, #32]
 800f556:	68f8      	ldr	r0, [r7, #12]
 800f558:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800f55a:	2100      	movs	r1, #0
 800f55c:	68f8      	ldr	r0, [r7, #12]
 800f55e:	f000 fb03 	bl	800fb68 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	2206      	movs	r2, #6
 800f566:	741a      	strb	r2, [r3, #16]
	break;
 800f568:	e008      	b.n	800f57c <fsm_rconfreq+0x88>

    case PPP_FSM_STOPPED:
	/* Negotiation started by our peer */
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800f56a:	2100      	movs	r1, #0
 800f56c:	68f8      	ldr	r0, [r7, #12]
 800f56e:	f000 fafb 	bl	800fb68 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2206      	movs	r2, #6
 800f576:	741a      	strb	r2, [r3, #16]
	break;
 800f578:	e000      	b.n	800f57c <fsm_rconfreq+0x88>
    default:
	break;
 800f57a:	bf00      	nop

    /*
     * Pass the requested configuration options
     * to protocol-specific code for checking.
     */
    if (f->callbacks->reqci){		/* Check CI */
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	685b      	ldr	r3, [r3, #4]
 800f580:	699b      	ldr	r3, [r3, #24]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d013      	beq.n	800f5ae <fsm_rconfreq+0xba>
	reject_if_disagree = (f->nakloops >= f->maxnakloops);
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	7d5a      	ldrb	r2, [r3, #21]
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	7ddb      	ldrb	r3, [r3, #23]
 800f58e:	429a      	cmp	r2, r3
 800f590:	bf2c      	ite	cs
 800f592:	2301      	movcs	r3, #1
 800f594:	2300      	movcc	r3, #0
 800f596:	b2db      	uxtb	r3, r3
 800f598:	613b      	str	r3, [r7, #16]
	code = (*f->callbacks->reqci)(f, inp, &len, reject_if_disagree);
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	699c      	ldr	r4, [r3, #24]
 800f5a0:	463a      	mov	r2, r7
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	6879      	ldr	r1, [r7, #4]
 800f5a6:	68f8      	ldr	r0, [r7, #12]
 800f5a8:	47a0      	blx	r4
 800f5aa:	6178      	str	r0, [r7, #20]
 800f5ac:	e007      	b.n	800f5be <fsm_rconfreq+0xca>
    } else if (len)
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d002      	beq.n	800f5ba <fsm_rconfreq+0xc6>
	code = CONFREJ;			/* Reject all CI */
 800f5b4:	2304      	movs	r3, #4
 800f5b6:	617b      	str	r3, [r7, #20]
 800f5b8:	e001      	b.n	800f5be <fsm_rconfreq+0xca>
    else
	code = CONFACK;
 800f5ba:	2302      	movs	r3, #2
 800f5bc:	617b      	str	r3, [r7, #20]

    /* send the Ack, Nak or Rej to the peer */
    fsm_sdata(f, code, id, inp, len);
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	b2d9      	uxtb	r1, r3
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	7afa      	ldrb	r2, [r7, #11]
 800f5c6:	9300      	str	r3, [sp, #0]
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	68f8      	ldr	r0, [r7, #12]
 800f5cc:	f000 fbba 	bl	800fd44 <fsm_sdata>

    if (code == CONFACK) {
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	2b02      	cmp	r3, #2
 800f5d4:	d11c      	bne.n	800f610 <fsm_rconfreq+0x11c>
	if (f->state == PPP_FSM_ACKRCVD) {
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	7c1b      	ldrb	r3, [r3, #16]
 800f5da:	2b07      	cmp	r3, #7
 800f5dc:	d111      	bne.n	800f602 <fsm_rconfreq+0x10e>
	    UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800f5de:	68f9      	ldr	r1, [r7, #12]
 800f5e0:	4816      	ldr	r0, [pc, #88]	; (800f63c <fsm_rconfreq+0x148>)
 800f5e2:	f7fe fa25 	bl	800da30 <sys_untimeout>
	    f->state = PPP_FSM_OPENED;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	2209      	movs	r2, #9
 800f5ea:	741a      	strb	r2, [r3, #16]
	    if (f->callbacks->up)
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	685b      	ldr	r3, [r3, #4]
 800f5f0:	69db      	ldr	r3, [r3, #28]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d008      	beq.n	800f608 <fsm_rconfreq+0x114>
		(*f->callbacks->up)(f);	/* Inform upper layers */
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	685b      	ldr	r3, [r3, #4]
 800f5fa:	69db      	ldr	r3, [r3, #28]
 800f5fc:	68f8      	ldr	r0, [r7, #12]
 800f5fe:	4798      	blx	r3
 800f600:	e002      	b.n	800f608 <fsm_rconfreq+0x114>
	} else
	    f->state = PPP_FSM_ACKSENT;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	2208      	movs	r2, #8
 800f606:	741a      	strb	r2, [r3, #16]
	f->nakloops = 0;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	2200      	movs	r2, #0
 800f60c:	755a      	strb	r2, [r3, #21]
 800f60e:	e011      	b.n	800f634 <fsm_rconfreq+0x140>

    } else {
	/* we sent CONFACK or CONFREJ */
	if (f->state != PPP_FSM_ACKRCVD)
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	7c1b      	ldrb	r3, [r3, #16]
 800f614:	2b07      	cmp	r3, #7
 800f616:	d002      	beq.n	800f61e <fsm_rconfreq+0x12a>
	    f->state = PPP_FSM_REQSENT;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2206      	movs	r2, #6
 800f61c:	741a      	strb	r2, [r3, #16]
	if( code == CONFNAK )
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	2b03      	cmp	r3, #3
 800f622:	d107      	bne.n	800f634 <fsm_rconfreq+0x140>
	    ++f->nakloops;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	7d5b      	ldrb	r3, [r3, #21]
 800f628:	3301      	adds	r3, #1
 800f62a:	b2da      	uxtb	r2, r3
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	755a      	strb	r2, [r3, #21]
 800f630:	e000      	b.n	800f634 <fsm_rconfreq+0x140>
	return;
 800f632:	bf00      	nop
    }
}
 800f634:	371c      	adds	r7, #28
 800f636:	46bd      	mov	sp, r7
 800f638:	bd90      	pop	{r4, r7, pc}
 800f63a:	bf00      	nop
 800f63c:	0800f269 	.word	0x0800f269

0800f640 <fsm_rconfack>:


/*
 * fsm_rconfack - Receive Configure-Ack.
 */
static void fsm_rconfack(fsm *f, int id, u_char *inp, int len) {
 800f640:	b580      	push	{r7, lr}
 800f642:	b088      	sub	sp, #32
 800f644:	af02      	add	r7, sp, #8
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	607a      	str	r2, [r7, #4]
 800f64c:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	617b      	str	r3, [r7, #20]

    if (id != f->reqid || f->seen_ack)		/* Expected id? */
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	7cdb      	ldrb	r3, [r3, #19]
 800f658:	461a      	mov	r2, r3
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	f040 808b 	bne.w	800f778 <fsm_rconfack+0x138>
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	7b1b      	ldrb	r3, [r3, #12]
 800f666:	2b00      	cmp	r3, #0
 800f668:	f040 8086 	bne.w	800f778 <fsm_rconfack+0x138>
	return;					/* Nope, toss... */
    if( !(f->callbacks->ackci? (*f->callbacks->ackci)(f, inp, len):
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	68db      	ldr	r3, [r3, #12]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d00d      	beq.n	800f692 <fsm_rconfack+0x52>
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	685b      	ldr	r3, [r3, #4]
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	683a      	ldr	r2, [r7, #0]
 800f67e:	6879      	ldr	r1, [r7, #4]
 800f680:	68f8      	ldr	r0, [r7, #12]
 800f682:	4798      	blx	r3
 800f684:	4603      	mov	r3, r0
 800f686:	2b00      	cmp	r3, #0
 800f688:	bf0c      	ite	eq
 800f68a:	2301      	moveq	r3, #1
 800f68c:	2300      	movne	r3, #0
 800f68e:	b2db      	uxtb	r3, r3
 800f690:	e005      	b.n	800f69e <fsm_rconfack+0x5e>
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	2b00      	cmp	r3, #0
 800f696:	bf14      	ite	ne
 800f698:	2301      	movne	r3, #1
 800f69a:	2300      	moveq	r3, #0
 800f69c:	b2db      	uxtb	r3, r3
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d005      	beq.n	800f6ae <fsm_rconfack+0x6e>
	  (len == 0)) ){
	/* Ack is bad - ignore it */
	ppp_error(("Received bad configure-ack: %P", inp, len));
 800f6a2:	683a      	ldr	r2, [r7, #0]
 800f6a4:	6879      	ldr	r1, [r7, #4]
 800f6a6:	4838      	ldr	r0, [pc, #224]	; (800f788 <fsm_rconfack+0x148>)
 800f6a8:	f008 f840 	bl	801772c <ppp_error_impl>
	return;
 800f6ac:	e069      	b.n	800f782 <fsm_rconfack+0x142>
    }
    f->seen_ack = 1;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2201      	movs	r2, #1
 800f6b2:	731a      	strb	r2, [r3, #12]
    f->rnakloops = 0;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	759a      	strb	r2, [r3, #22]

    switch (f->state) {
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	7c1b      	ldrb	r3, [r3, #16]
 800f6be:	3b02      	subs	r3, #2
 800f6c0:	2b07      	cmp	r3, #7
 800f6c2:	d85b      	bhi.n	800f77c <fsm_rconfack+0x13c>
 800f6c4:	a201      	add	r2, pc, #4	; (adr r2, 800f6cc <fsm_rconfack+0x8c>)
 800f6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ca:	bf00      	nop
 800f6cc:	0800f6ed 	.word	0x0800f6ed
 800f6d0:	0800f6ed 	.word	0x0800f6ed
 800f6d4:	0800f77d 	.word	0x0800f77d
 800f6d8:	0800f77d 	.word	0x0800f77d
 800f6dc:	0800f701 	.word	0x0800f701
 800f6e0:	0800f711 	.word	0x0800f711
 800f6e4:	0800f729 	.word	0x0800f729
 800f6e8:	0800f755 	.word	0x0800f755
    case PPP_FSM_CLOSED:
    case PPP_FSM_STOPPED:
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	b2da      	uxtb	r2, r3
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	9300      	str	r3, [sp, #0]
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	2106      	movs	r1, #6
 800f6f8:	68f8      	ldr	r0, [r7, #12]
 800f6fa:	f000 fb23 	bl	800fd44 <fsm_sdata>
	break;
 800f6fe:	e040      	b.n	800f782 <fsm_rconfack+0x142>

    case PPP_FSM_REQSENT:
	f->state = PPP_FSM_ACKRCVD;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	2207      	movs	r2, #7
 800f704:	741a      	strb	r2, [r3, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	7bda      	ldrb	r2, [r3, #15]
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	751a      	strb	r2, [r3, #20]
	break;
 800f70e:	e038      	b.n	800f782 <fsm_rconfack+0x142>

    case PPP_FSM_ACKRCVD:
	/* Huh? an extra valid Ack? oh well... */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800f710:	68f9      	ldr	r1, [r7, #12]
 800f712:	481e      	ldr	r0, [pc, #120]	; (800f78c <fsm_rconfack+0x14c>)
 800f714:	f7fe f98c 	bl	800da30 <sys_untimeout>
	fsm_sconfreq(f, 0);
 800f718:	2100      	movs	r1, #0
 800f71a:	68f8      	ldr	r0, [r7, #12]
 800f71c:	f000 fa24 	bl	800fb68 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2206      	movs	r2, #6
 800f724:	741a      	strb	r2, [r3, #16]
	break;
 800f726:	e02c      	b.n	800f782 <fsm_rconfack+0x142>

    case PPP_FSM_ACKSENT:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800f728:	68f9      	ldr	r1, [r7, #12]
 800f72a:	4818      	ldr	r0, [pc, #96]	; (800f78c <fsm_rconfack+0x14c>)
 800f72c:	f7fe f980 	bl	800da30 <sys_untimeout>
	f->state = PPP_FSM_OPENED;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	2209      	movs	r2, #9
 800f734:	741a      	strb	r2, [r3, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	7bda      	ldrb	r2, [r3, #15]
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	751a      	strb	r2, [r3, #20]
	if (f->callbacks->up)
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	69db      	ldr	r3, [r3, #28]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d01b      	beq.n	800f780 <fsm_rconfack+0x140>
	    (*f->callbacks->up)(f);	/* Inform upper layers */
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	685b      	ldr	r3, [r3, #4]
 800f74c:	69db      	ldr	r3, [r3, #28]
 800f74e:	68f8      	ldr	r0, [r7, #12]
 800f750:	4798      	blx	r3
	break;
 800f752:	e015      	b.n	800f780 <fsm_rconfack+0x140>

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if (f->callbacks->down)
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	685b      	ldr	r3, [r3, #4]
 800f758:	6a1b      	ldr	r3, [r3, #32]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d004      	beq.n	800f768 <fsm_rconfack+0x128>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	6a1b      	ldr	r3, [r3, #32]
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800f768:	2100      	movs	r1, #0
 800f76a:	68f8      	ldr	r0, [r7, #12]
 800f76c:	f000 f9fc 	bl	800fb68 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	2206      	movs	r2, #6
 800f774:	741a      	strb	r2, [r3, #16]
	break;
 800f776:	e004      	b.n	800f782 <fsm_rconfack+0x142>
	return;					/* Nope, toss... */
 800f778:	bf00      	nop
 800f77a:	e002      	b.n	800f782 <fsm_rconfack+0x142>
    default:
	break;
 800f77c:	bf00      	nop
 800f77e:	e000      	b.n	800f782 <fsm_rconfack+0x142>
	break;
 800f780:	bf00      	nop
    }
}
 800f782:	3718      	adds	r7, #24
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}
 800f788:	0801cc48 	.word	0x0801cc48
 800f78c:	0800f269 	.word	0x0800f269

0800f790 <fsm_rconfnakrej>:


/*
 * fsm_rconfnakrej - Receive Configure-Nak or Configure-Reject.
 */
static void fsm_rconfnakrej(fsm *f, int code, int id, u_char *inp, int len) {
 800f790:	b590      	push	{r4, r7, lr}
 800f792:	b089      	sub	sp, #36	; 0x24
 800f794:	af02      	add	r7, sp, #8
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	607a      	str	r2, [r7, #4]
 800f79c:	603b      	str	r3, [r7, #0]
    int ret;
    int treat_as_reject;

    if (id != f->reqid || f->seen_ack)	/* Expected id? */
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	7cdb      	ldrb	r3, [r3, #19]
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	f040 809c 	bne.w	800f8e4 <fsm_rconfnakrej+0x154>
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	7b1b      	ldrb	r3, [r3, #12]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	f040 8097 	bne.w	800f8e4 <fsm_rconfnakrej+0x154>
	return;				/* Nope, toss... */

    if (code == CONFNAK) {
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	2b03      	cmp	r3, #3
 800f7ba:	d126      	bne.n	800f80a <fsm_rconfnakrej+0x7a>
	++f->rnakloops;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	7d9b      	ldrb	r3, [r3, #22]
 800f7c0:	3301      	adds	r3, #1
 800f7c2:	b2da      	uxtb	r2, r3
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	759a      	strb	r2, [r3, #22]
	treat_as_reject = (f->rnakloops >= f->maxnakloops);
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	7d9a      	ldrb	r2, [r3, #22]
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	7ddb      	ldrb	r3, [r3, #23]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	bf2c      	ite	cs
 800f7d4:	2301      	movcs	r3, #1
 800f7d6:	2300      	movcc	r3, #0
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	613b      	str	r3, [r7, #16]
	if (f->callbacks->nakci == NULL
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	691b      	ldr	r3, [r3, #16]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d00b      	beq.n	800f7fe <fsm_rconfnakrej+0x6e>
	    || !(ret = f->callbacks->nakci(f, inp, len, treat_as_reject))) {
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	691c      	ldr	r4, [r3, #16]
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7f0:	6839      	ldr	r1, [r7, #0]
 800f7f2:	68f8      	ldr	r0, [r7, #12]
 800f7f4:	47a0      	blx	r4
 800f7f6:	6178      	str	r0, [r7, #20]
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d11e      	bne.n	800f83c <fsm_rconfnakrej+0xac>
	    ppp_error(("Received bad configure-nak: %P", inp, len));
 800f7fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f800:	6839      	ldr	r1, [r7, #0]
 800f802:	483b      	ldr	r0, [pc, #236]	; (800f8f0 <fsm_rconfnakrej+0x160>)
 800f804:	f007 ff92 	bl	801772c <ppp_error_impl>
	    return;
 800f808:	e06f      	b.n	800f8ea <fsm_rconfnakrej+0x15a>
	}
    } else {
	f->rnakloops = 0;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2200      	movs	r2, #0
 800f80e:	759a      	strb	r2, [r3, #22]
	if (f->callbacks->rejci == NULL
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	685b      	ldr	r3, [r3, #4]
 800f814:	695b      	ldr	r3, [r3, #20]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d00a      	beq.n	800f830 <fsm_rconfnakrej+0xa0>
	    || !(ret = f->callbacks->rejci(f, inp, len))) {
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	695b      	ldr	r3, [r3, #20]
 800f820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f822:	6839      	ldr	r1, [r7, #0]
 800f824:	68f8      	ldr	r0, [r7, #12]
 800f826:	4798      	blx	r3
 800f828:	6178      	str	r0, [r7, #20]
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d105      	bne.n	800f83c <fsm_rconfnakrej+0xac>
	    ppp_error(("Received bad configure-rej: %P", inp, len));
 800f830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f832:	6839      	ldr	r1, [r7, #0]
 800f834:	482f      	ldr	r0, [pc, #188]	; (800f8f4 <fsm_rconfnakrej+0x164>)
 800f836:	f007 ff79 	bl	801772c <ppp_error_impl>
	    return;
 800f83a:	e056      	b.n	800f8ea <fsm_rconfnakrej+0x15a>
	}
    }

    f->seen_ack = 1;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2201      	movs	r2, #1
 800f840:	731a      	strb	r2, [r3, #12]

    switch (f->state) {
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	7c1b      	ldrb	r3, [r3, #16]
 800f846:	3b02      	subs	r3, #2
 800f848:	2b07      	cmp	r3, #7
 800f84a:	d84d      	bhi.n	800f8e8 <fsm_rconfnakrej+0x158>
 800f84c:	a201      	add	r2, pc, #4	; (adr r2, 800f854 <fsm_rconfnakrej+0xc4>)
 800f84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f852:	bf00      	nop
 800f854:	0800f875 	.word	0x0800f875
 800f858:	0800f875 	.word	0x0800f875
 800f85c:	0800f8e9 	.word	0x0800f8e9
 800f860:	0800f8e9 	.word	0x0800f8e9
 800f864:	0800f889 	.word	0x0800f889
 800f868:	0800f8a9 	.word	0x0800f8a9
 800f86c:	0800f889 	.word	0x0800f889
 800f870:	0800f8c1 	.word	0x0800f8c1
    case PPP_FSM_CLOSED:
    case PPP_FSM_STOPPED:
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	b2da      	uxtb	r2, r3
 800f878:	2300      	movs	r3, #0
 800f87a:	9300      	str	r3, [sp, #0]
 800f87c:	2300      	movs	r3, #0
 800f87e:	2106      	movs	r1, #6
 800f880:	68f8      	ldr	r0, [r7, #12]
 800f882:	f000 fa5f 	bl	800fd44 <fsm_sdata>
	break;
 800f886:	e030      	b.n	800f8ea <fsm_rconfnakrej+0x15a>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKSENT:
	/* They didn't agree to what we wanted - try another request */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800f888:	68f9      	ldr	r1, [r7, #12]
 800f88a:	481b      	ldr	r0, [pc, #108]	; (800f8f8 <fsm_rconfnakrej+0x168>)
 800f88c:	f7fe f8d0 	bl	800da30 <sys_untimeout>
	if (ret < 0)
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	2b00      	cmp	r3, #0
 800f894:	da03      	bge.n	800f89e <fsm_rconfnakrej+0x10e>
	    f->state = PPP_FSM_STOPPED;		/* kludge for stopping CCP */
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	2203      	movs	r2, #3
 800f89a:	741a      	strb	r2, [r3, #16]
	else
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
	break;
 800f89c:	e025      	b.n	800f8ea <fsm_rconfnakrej+0x15a>
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
 800f89e:	2100      	movs	r1, #0
 800f8a0:	68f8      	ldr	r0, [r7, #12]
 800f8a2:	f000 f961 	bl	800fb68 <fsm_sconfreq>
	break;
 800f8a6:	e020      	b.n	800f8ea <fsm_rconfnakrej+0x15a>

    case PPP_FSM_ACKRCVD:
	/* Got a Nak/reject when we had already had an Ack?? oh well... */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800f8a8:	68f9      	ldr	r1, [r7, #12]
 800f8aa:	4813      	ldr	r0, [pc, #76]	; (800f8f8 <fsm_rconfnakrej+0x168>)
 800f8ac:	f7fe f8c0 	bl	800da30 <sys_untimeout>
	fsm_sconfreq(f, 0);
 800f8b0:	2100      	movs	r1, #0
 800f8b2:	68f8      	ldr	r0, [r7, #12]
 800f8b4:	f000 f958 	bl	800fb68 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	2206      	movs	r2, #6
 800f8bc:	741a      	strb	r2, [r3, #16]
	break;
 800f8be:	e014      	b.n	800f8ea <fsm_rconfnakrej+0x15a>

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if (f->callbacks->down)
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	685b      	ldr	r3, [r3, #4]
 800f8c4:	6a1b      	ldr	r3, [r3, #32]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d004      	beq.n	800f8d4 <fsm_rconfnakrej+0x144>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	685b      	ldr	r3, [r3, #4]
 800f8ce:	6a1b      	ldr	r3, [r3, #32]
 800f8d0:	68f8      	ldr	r0, [r7, #12]
 800f8d2:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800f8d4:	2100      	movs	r1, #0
 800f8d6:	68f8      	ldr	r0, [r7, #12]
 800f8d8:	f000 f946 	bl	800fb68 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	2206      	movs	r2, #6
 800f8e0:	741a      	strb	r2, [r3, #16]
	break;
 800f8e2:	e002      	b.n	800f8ea <fsm_rconfnakrej+0x15a>
	return;				/* Nope, toss... */
 800f8e4:	bf00      	nop
 800f8e6:	e000      	b.n	800f8ea <fsm_rconfnakrej+0x15a>
    default:
	break;
 800f8e8:	bf00      	nop
    }
}
 800f8ea:	371c      	adds	r7, #28
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bd90      	pop	{r4, r7, pc}
 800f8f0:	0801cc68 	.word	0x0801cc68
 800f8f4:	0801cc88 	.word	0x0801cc88
 800f8f8:	0800f269 	.word	0x0800f269

0800f8fc <fsm_rtermreq>:


/*
 * fsm_rtermreq - Receive Terminate-Req.
 */
static void fsm_rtermreq(fsm *f, int id, u_char *p, int len) {
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b088      	sub	sp, #32
 800f900:	af02      	add	r7, sp, #8
 800f902:	60f8      	str	r0, [r7, #12]
 800f904:	60b9      	str	r1, [r7, #8]
 800f906:	607a      	str	r2, [r7, #4]
 800f908:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	617b      	str	r3, [r7, #20]

    switch (f->state) {
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	7c1b      	ldrb	r3, [r3, #16]
 800f914:	2b07      	cmp	r3, #7
 800f916:	db3c      	blt.n	800f992 <fsm_rtermreq+0x96>
 800f918:	2b08      	cmp	r3, #8
 800f91a:	dd02      	ble.n	800f922 <fsm_rtermreq+0x26>
 800f91c:	2b09      	cmp	r3, #9
 800f91e:	d004      	beq.n	800f92a <fsm_rtermreq+0x2e>
	if (f->callbacks->down)
	    (*f->callbacks->down)(f);	/* Inform upper layers */
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
	break;
    default:
	break;
 800f920:	e037      	b.n	800f992 <fsm_rtermreq+0x96>
	f->state = PPP_FSM_REQSENT;		/* Start over but keep trying */
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	2206      	movs	r2, #6
 800f926:	741a      	strb	r2, [r3, #16]
	break;
 800f928:	e034      	b.n	800f994 <fsm_rtermreq+0x98>
	if (len > 0) {
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	dd08      	ble.n	800f942 <fsm_rtermreq+0x46>
	    ppp_info(("%s terminated by peer (%0.*v)", PROTO_NAME(f), len, p));
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	683a      	ldr	r2, [r7, #0]
 800f93a:	481d      	ldr	r0, [pc, #116]	; (800f9b0 <fsm_rtermreq+0xb4>)
 800f93c:	f007 ff2f 	bl	801779e <ppp_info_impl>
 800f940:	e006      	b.n	800f950 <fsm_rtermreq+0x54>
	    ppp_info(("%s terminated by peer", PROTO_NAME(f)));
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f948:	4619      	mov	r1, r3
 800f94a:	481a      	ldr	r0, [pc, #104]	; (800f9b4 <fsm_rtermreq+0xb8>)
 800f94c:	f007 ff27 	bl	801779e <ppp_info_impl>
	f->retransmits = 0;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	2200      	movs	r2, #0
 800f954:	751a      	strb	r2, [r3, #20]
	f->state = PPP_FSM_STOPPING;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2205      	movs	r2, #5
 800f95a:	741a      	strb	r2, [r3, #16]
	if (f->callbacks->down)
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	685b      	ldr	r3, [r3, #4]
 800f960:	6a1b      	ldr	r3, [r3, #32]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d004      	beq.n	800f970 <fsm_rtermreq+0x74>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	6a1b      	ldr	r3, [r3, #32]
 800f96c:	68f8      	ldr	r0, [r7, #12]
 800f96e:	4798      	blx	r3
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800f970:	68f9      	ldr	r1, [r7, #12]
 800f972:	4811      	ldr	r0, [pc, #68]	; (800f9b8 <fsm_rtermreq+0xbc>)
 800f974:	f7fe f85c 	bl	800da30 <sys_untimeout>
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	7b9b      	ldrb	r3, [r3, #14]
 800f97c:	461a      	mov	r2, r3
 800f97e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f982:	fb03 f302 	mul.w	r3, r3, r2
 800f986:	68fa      	ldr	r2, [r7, #12]
 800f988:	490b      	ldr	r1, [pc, #44]	; (800f9b8 <fsm_rtermreq+0xbc>)
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7fe f824 	bl	800d9d8 <sys_timeout>
	break;
 800f990:	e000      	b.n	800f994 <fsm_rtermreq+0x98>
	break;
 800f992:	bf00      	nop
    }

    fsm_sdata(f, TERMACK, id, NULL, 0);
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	b2da      	uxtb	r2, r3
 800f998:	2300      	movs	r3, #0
 800f99a:	9300      	str	r3, [sp, #0]
 800f99c:	2300      	movs	r3, #0
 800f99e:	2106      	movs	r1, #6
 800f9a0:	68f8      	ldr	r0, [r7, #12]
 800f9a2:	f000 f9cf 	bl	800fd44 <fsm_sdata>
}
 800f9a6:	bf00      	nop
 800f9a8:	3718      	adds	r7, #24
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	0801cca8 	.word	0x0801cca8
 800f9b4:	0801ccc8 	.word	0x0801ccc8
 800f9b8:	0800f269 	.word	0x0800f269

0800f9bc <fsm_rtermack>:


/*
 * fsm_rtermack - Receive Terminate-Ack.
 */
static void fsm_rtermack(fsm *f) {
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b082      	sub	sp, #8
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
    switch (f->state) {
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	7c1b      	ldrb	r3, [r3, #16]
 800f9c8:	3b04      	subs	r3, #4
 800f9ca:	2b05      	cmp	r3, #5
 800f9cc:	d848      	bhi.n	800fa60 <fsm_rtermack+0xa4>
 800f9ce:	a201      	add	r2, pc, #4	; (adr r2, 800f9d4 <fsm_rtermack+0x18>)
 800f9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9d4:	0800f9ed 	.word	0x0800f9ed
 800f9d8:	0800fa11 	.word	0x0800fa11
 800f9dc:	0800fa61 	.word	0x0800fa61
 800f9e0:	0800fa35 	.word	0x0800fa35
 800f9e4:	0800fa61 	.word	0x0800fa61
 800f9e8:	0800fa3d 	.word	0x0800fa3d
    case PPP_FSM_CLOSING:
	UNTIMEOUT(fsm_timeout, f);
 800f9ec:	6879      	ldr	r1, [r7, #4]
 800f9ee:	4821      	ldr	r0, [pc, #132]	; (800fa74 <fsm_rtermack+0xb8>)
 800f9f0:	f7fe f81e 	bl	800da30 <sys_untimeout>
	f->state = PPP_FSM_CLOSED;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2202      	movs	r2, #2
 800f9f8:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d02f      	beq.n	800fa64 <fsm_rtermack+0xa8>
	    (*f->callbacks->finished)(f);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	685b      	ldr	r3, [r3, #4]
 800fa08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	4798      	blx	r3
	break;
 800fa0e:	e029      	b.n	800fa64 <fsm_rtermack+0xa8>
    case PPP_FSM_STOPPING:
	UNTIMEOUT(fsm_timeout, f);
 800fa10:	6879      	ldr	r1, [r7, #4]
 800fa12:	4818      	ldr	r0, [pc, #96]	; (800fa74 <fsm_rtermack+0xb8>)
 800fa14:	f7fe f80c 	bl	800da30 <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2203      	movs	r2, #3
 800fa1c:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d01f      	beq.n	800fa68 <fsm_rtermack+0xac>
	    (*f->callbacks->finished)(f);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	4798      	blx	r3
	break;
 800fa32:	e019      	b.n	800fa68 <fsm_rtermack+0xac>

    case PPP_FSM_ACKRCVD:
	f->state = PPP_FSM_REQSENT;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2206      	movs	r2, #6
 800fa38:	741a      	strb	r2, [r3, #16]
	break;
 800fa3a:	e016      	b.n	800fa6a <fsm_rtermack+0xae>

    case PPP_FSM_OPENED:
	if (f->callbacks->down)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	6a1b      	ldr	r3, [r3, #32]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d004      	beq.n	800fa50 <fsm_rtermack+0x94>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	6a1b      	ldr	r3, [r3, #32]
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	4798      	blx	r3
	fsm_sconfreq(f, 0);
 800fa50:	2100      	movs	r1, #0
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f000 f888 	bl	800fb68 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2206      	movs	r2, #6
 800fa5c:	741a      	strb	r2, [r3, #16]
	break;
 800fa5e:	e004      	b.n	800fa6a <fsm_rtermack+0xae>
    default:
	break;
 800fa60:	bf00      	nop
 800fa62:	e002      	b.n	800fa6a <fsm_rtermack+0xae>
	break;
 800fa64:	bf00      	nop
 800fa66:	e000      	b.n	800fa6a <fsm_rtermack+0xae>
	break;
 800fa68:	bf00      	nop
    }
}
 800fa6a:	bf00      	nop
 800fa6c:	3708      	adds	r7, #8
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	0800f269 	.word	0x0800f269

0800fa78 <fsm_rcoderej>:


/*
 * fsm_rcoderej - Receive an Code-Reject.
 */
static void fsm_rcoderej(fsm *f, u_char *inp, int len) {
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b086      	sub	sp, #24
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	60f8      	str	r0, [r7, #12]
 800fa80:	60b9      	str	r1, [r7, #8]
 800fa82:	607a      	str	r2, [r7, #4]
    u_char code, id;

    if (len < HEADERLEN) {
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2b03      	cmp	r3, #3
 800fa88:	dd19      	ble.n	800fabe <fsm_rcoderej+0x46>
	FSMDEBUG(("fsm_rcoderej: Rcvd short Code-Reject packet!"));
	return;
    }
    GETCHAR(code, inp);
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	1c5a      	adds	r2, r3, #1
 800fa8e:	60ba      	str	r2, [r7, #8]
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	75fb      	strb	r3, [r7, #23]
    GETCHAR(id, inp);
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	1c5a      	adds	r2, r3, #1
 800fa98:	60ba      	str	r2, [r7, #8]
 800fa9a:	781b      	ldrb	r3, [r3, #0]
 800fa9c:	75bb      	strb	r3, [r7, #22]
    ppp_warn(("%s: Rcvd Code-Reject for code %d, id %d", PROTO_NAME(f), code, id));
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	685b      	ldr	r3, [r3, #4]
 800faa2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800faa4:	7dfa      	ldrb	r2, [r7, #23]
 800faa6:	7dbb      	ldrb	r3, [r7, #22]
 800faa8:	4807      	ldr	r0, [pc, #28]	; (800fac8 <fsm_rcoderej+0x50>)
 800faaa:	f007 fe52 	bl	8017752 <ppp_warn_impl>

    if( f->state == PPP_FSM_ACKRCVD )
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	7c1b      	ldrb	r3, [r3, #16]
 800fab2:	2b07      	cmp	r3, #7
 800fab4:	d104      	bne.n	800fac0 <fsm_rcoderej+0x48>
	f->state = PPP_FSM_REQSENT;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	2206      	movs	r2, #6
 800faba:	741a      	strb	r2, [r3, #16]
 800fabc:	e000      	b.n	800fac0 <fsm_rcoderej+0x48>
	return;
 800fabe:	bf00      	nop
}
 800fac0:	3718      	adds	r7, #24
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
 800fac6:	bf00      	nop
 800fac8:	0801cce0 	.word	0x0801cce0

0800facc <fsm_protreject>:
/*
 * fsm_protreject - Peer doesn't speak this protocol.
 *
 * Treat this as a catastrophic error (RXJ-).
 */
void fsm_protreject(fsm *f) {
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	7c1b      	ldrb	r3, [r3, #16]
 800fad8:	3b02      	subs	r3, #2
 800fada:	2b07      	cmp	r3, #7
 800fadc:	d83e      	bhi.n	800fb5c <fsm_protreject+0x90>
 800fade:	a201      	add	r2, pc, #4	; (adr r2, 800fae4 <fsm_protreject+0x18>)
 800fae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae4:	0800fb0d 	.word	0x0800fb0d
 800fae8:	0800fb31 	.word	0x0800fb31
 800faec:	0800fb05 	.word	0x0800fb05
 800faf0:	0800fb29 	.word	0x0800fb29
 800faf4:	0800fb29 	.word	0x0800fb29
 800faf8:	0800fb29 	.word	0x0800fb29
 800fafc:	0800fb29 	.word	0x0800fb29
 800fb00:	0800fb4d 	.word	0x0800fb4d
    case PPP_FSM_CLOSING:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800fb04:	6879      	ldr	r1, [r7, #4]
 800fb06:	4817      	ldr	r0, [pc, #92]	; (800fb64 <fsm_protreject+0x98>)
 800fb08:	f7fd ff92 	bl	800da30 <sys_untimeout>
	/* fall through */
	/* no break */
    case PPP_FSM_CLOSED:
	f->state = PPP_FSM_CLOSED;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2202      	movs	r2, #2
 800fb10:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	685b      	ldr	r3, [r3, #4]
 800fb16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d01c      	beq.n	800fb56 <fsm_protreject+0x8a>
	    (*f->callbacks->finished)(f);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	685b      	ldr	r3, [r3, #4]
 800fb20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	4798      	blx	r3
	break;
 800fb26:	e016      	b.n	800fb56 <fsm_protreject+0x8a>

    case PPP_FSM_STOPPING:
    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800fb28:	6879      	ldr	r1, [r7, #4]
 800fb2a:	480e      	ldr	r0, [pc, #56]	; (800fb64 <fsm_protreject+0x98>)
 800fb2c:	f7fd ff80 	bl	800da30 <sys_untimeout>
	/* fall through */
	/* no break */
    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_STOPPED;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2203      	movs	r2, #3
 800fb34:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	685b      	ldr	r3, [r3, #4]
 800fb3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d00c      	beq.n	800fb5a <fsm_protreject+0x8e>
	    (*f->callbacks->finished)(f);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	685b      	ldr	r3, [r3, #4]
 800fb44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	4798      	blx	r3
	break;
 800fb4a:	e006      	b.n	800fb5a <fsm_protreject+0x8e>

    case PPP_FSM_OPENED:
	terminate_layer(f, PPP_FSM_STOPPING);
 800fb4c:	2105      	movs	r1, #5
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f7ff fad0 	bl	800f0f4 <terminate_layer>
	break;
 800fb54:	e002      	b.n	800fb5c <fsm_protreject+0x90>
	break;
 800fb56:	bf00      	nop
 800fb58:	e000      	b.n	800fb5c <fsm_protreject+0x90>
	break;
 800fb5a:	bf00      	nop
    default:
	FSMDEBUG(("%s: Protocol-reject event in state %d!",
		  PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800fb5c:	bf00      	nop
 800fb5e:	3708      	adds	r7, #8
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}
 800fb64:	0800f269 	.word	0x0800f269

0800fb68 <fsm_sconfreq>:


/*
 * fsm_sconfreq - Send a Configure-Request.
 */
static void fsm_sconfreq(fsm *f, int retransmit) {
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b086      	sub	sp, #24
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	617b      	str	r3, [r7, #20]
    struct pbuf *p;
    u_char *outp;
    int cilen;

    if( f->state != PPP_FSM_REQSENT && f->state != PPP_FSM_ACKRCVD && f->state != PPP_FSM_ACKSENT ){
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	7c1b      	ldrb	r3, [r3, #16]
 800fb7c:	2b06      	cmp	r3, #6
 800fb7e:	d017      	beq.n	800fbb0 <fsm_sconfreq+0x48>
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	7c1b      	ldrb	r3, [r3, #16]
 800fb84:	2b07      	cmp	r3, #7
 800fb86:	d013      	beq.n	800fbb0 <fsm_sconfreq+0x48>
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	7c1b      	ldrb	r3, [r3, #16]
 800fb8c:	2b08      	cmp	r3, #8
 800fb8e:	d00f      	beq.n	800fbb0 <fsm_sconfreq+0x48>
	/* Not currently negotiating - reset options */
	if( f->callbacks->resetci )
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d004      	beq.n	800fba4 <fsm_sconfreq+0x3c>
	    (*f->callbacks->resetci)(f);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	4798      	blx	r3
	f->nakloops = 0;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2200      	movs	r2, #0
 800fba8:	755a      	strb	r2, [r3, #21]
	f->rnakloops = 0;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2200      	movs	r2, #0
 800fbae:	759a      	strb	r2, [r3, #22]
    }

    if( !retransmit ){
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d10d      	bne.n	800fbd2 <fsm_sconfreq+0x6a>
	/* New request - reset retransmission counter, use new ID */
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	7bda      	ldrb	r2, [r3, #15]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	751a      	strb	r2, [r3, #20]
	f->reqid = ++f->id;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	7c9b      	ldrb	r3, [r3, #18]
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	b2da      	uxtb	r2, r3
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	749a      	strb	r2, [r3, #18]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	7c9a      	ldrb	r2, [r3, #18]
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	74da      	strb	r2, [r3, #19]
    }

    f->seen_ack = 0;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	731a      	strb	r2, [r3, #12]

    /*
     * Make up the request packet
     */
    if( f->callbacks->cilen && f->callbacks->addci ){
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	685b      	ldr	r3, [r3, #4]
 800fbdc:	685b      	ldr	r3, [r3, #4]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d018      	beq.n	800fc14 <fsm_sconfreq+0xac>
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	685b      	ldr	r3, [r3, #4]
 800fbe6:	689b      	ldr	r3, [r3, #8]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d013      	beq.n	800fc14 <fsm_sconfreq+0xac>
	cilen = (*f->callbacks->cilen)(f);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	4798      	blx	r3
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	60bb      	str	r3, [r7, #8]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800fc00:	1f1a      	subs	r2, r3, #4
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	da07      	bge.n	800fc18 <fsm_sconfreq+0xb0>
	    cilen = pcb->peer_mru - HEADERLEN;
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800fc0e:	3b04      	subs	r3, #4
 800fc10:	60bb      	str	r3, [r7, #8]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800fc12:	e001      	b.n	800fc18 <fsm_sconfreq+0xb0>
    } else
	cilen = 0;
 800fc14:	2300      	movs	r3, #0
 800fc16:	60bb      	str	r3, [r7, #8]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(cilen + HEADERLEN + PPP_HDRLEN), PBUF_RAM);
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	3308      	adds	r3, #8
 800fc1e:	b29b      	uxth	r3, r3
 800fc20:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fc24:	4619      	mov	r1, r3
 800fc26:	2000      	movs	r0, #0
 800fc28:	f7f5 fe50 	bl	80058cc <pbuf_alloc>
 800fc2c:	6138      	str	r0, [r7, #16]
    if(NULL == p)
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d07a      	beq.n	800fd2a <fsm_sconfreq+0x1c2>
        return;
    if(p->tot_len != p->len) {
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	891a      	ldrh	r2, [r3, #8]
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	895b      	ldrh	r3, [r3, #10]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d003      	beq.n	800fc48 <fsm_sconfreq+0xe0>
        pbuf_free(p);
 800fc40:	6938      	ldr	r0, [r7, #16]
 800fc42:	f7f6 f8e7 	bl	8005e14 <pbuf_free>
        return;
 800fc46:	e071      	b.n	800fd2c <fsm_sconfreq+0x1c4>
    }

    /* send the request to our peer */
    outp = (u_char*)p->payload;
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	685b      	ldr	r3, [r3, #4]
 800fc4c:	60fb      	str	r3, [r7, #12]
    MAKEHEADER(outp, f->protocol);
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	1c5a      	adds	r2, r3, #1
 800fc52:	60fa      	str	r2, [r7, #12]
 800fc54:	22ff      	movs	r2, #255	; 0xff
 800fc56:	701a      	strb	r2, [r3, #0]
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	1c5a      	adds	r2, r3, #1
 800fc5c:	60fa      	str	r2, [r7, #12]
 800fc5e:	2203      	movs	r2, #3
 800fc60:	701a      	strb	r2, [r3, #0]
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	1c5a      	adds	r2, r3, #1
 800fc66:	60fa      	str	r2, [r7, #12]
 800fc68:	687a      	ldr	r2, [r7, #4]
 800fc6a:	89d2      	ldrh	r2, [r2, #14]
 800fc6c:	0a12      	lsrs	r2, r2, #8
 800fc6e:	b292      	uxth	r2, r2
 800fc70:	b2d2      	uxtb	r2, r2
 800fc72:	701a      	strb	r2, [r3, #0]
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	1c5a      	adds	r2, r3, #1
 800fc78:	60fa      	str	r2, [r7, #12]
 800fc7a:	687a      	ldr	r2, [r7, #4]
 800fc7c:	89d2      	ldrh	r2, [r2, #14]
 800fc7e:	b2d2      	uxtb	r2, r2
 800fc80:	701a      	strb	r2, [r3, #0]
    PUTCHAR(CONFREQ, outp);
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	1c5a      	adds	r2, r3, #1
 800fc86:	60fa      	str	r2, [r7, #12]
 800fc88:	2201      	movs	r2, #1
 800fc8a:	701a      	strb	r2, [r3, #0]
    PUTCHAR(f->reqid, outp);
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	1c5a      	adds	r2, r3, #1
 800fc90:	60fa      	str	r2, [r7, #12]
 800fc92:	687a      	ldr	r2, [r7, #4]
 800fc94:	7cd2      	ldrb	r2, [r2, #19]
 800fc96:	701a      	strb	r2, [r3, #0]
    PUTSHORT(cilen + HEADERLEN, outp);
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	1c5a      	adds	r2, r3, #1
 800fc9c:	60fa      	str	r2, [r7, #12]
 800fc9e:	68ba      	ldr	r2, [r7, #8]
 800fca0:	3204      	adds	r2, #4
 800fca2:	1212      	asrs	r2, r2, #8
 800fca4:	b2d2      	uxtb	r2, r2
 800fca6:	701a      	strb	r2, [r3, #0]
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	1c5a      	adds	r2, r3, #1
 800fcac:	60fa      	str	r2, [r7, #12]
 800fcae:	68ba      	ldr	r2, [r7, #8]
 800fcb0:	b2d2      	uxtb	r2, r2
 800fcb2:	3204      	adds	r2, #4
 800fcb4:	b2d2      	uxtb	r2, r2
 800fcb6:	701a      	strb	r2, [r3, #0]
    if (cilen != 0) {
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d01a      	beq.n	800fcf4 <fsm_sconfreq+0x18c>
	(*f->callbacks->addci)(f, outp, &cilen);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	685b      	ldr	r3, [r3, #4]
 800fcc2:	689b      	ldr	r3, [r3, #8]
 800fcc4:	f107 0208 	add.w	r2, r7, #8
 800fcc8:	68f9      	ldr	r1, [r7, #12]
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	4798      	blx	r3
	LWIP_ASSERT("cilen == p->len - HEADERLEN - PPP_HDRLEN", cilen == p->len - HEADERLEN - PPP_HDRLEN);
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	895b      	ldrh	r3, [r3, #10]
 800fcd2:	f1a3 0208 	sub.w	r2, r3, #8
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	d00b      	beq.n	800fcf4 <fsm_sconfreq+0x18c>
 800fcdc:	4b15      	ldr	r3, [pc, #84]	; (800fd34 <fsm_sconfreq+0x1cc>)
 800fcde:	f240 22f2 	movw	r2, #754	; 0x2f2
 800fce2:	4915      	ldr	r1, [pc, #84]	; (800fd38 <fsm_sconfreq+0x1d0>)
 800fce4:	4815      	ldr	r0, [pc, #84]	; (800fd3c <fsm_sconfreq+0x1d4>)
 800fce6:	f008 f8a5 	bl	8017e34 <iprintf>
 800fcea:	2000      	movs	r0, #0
 800fcec:	f008 f9a4 	bl	8018038 <fflush>
 800fcf0:	f008 f8e9 	bl	8017ec6 <abort>
    }

    ppp_write(pcb, p);
 800fcf4:	6939      	ldr	r1, [r7, #16]
 800fcf6:	6978      	ldr	r0, [r7, #20]
 800fcf8:	f005 fe8c 	bl	8015a14 <ppp_write>

    /* start the retransmit timer */
    --f->retransmits;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	7d1b      	ldrb	r3, [r3, #20]
 800fd00:	3b01      	subs	r3, #1
 800fd02:	b2da      	uxtb	r2, r3
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	751a      	strb	r2, [r3, #20]
    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800fd08:	6879      	ldr	r1, [r7, #4]
 800fd0a:	480d      	ldr	r0, [pc, #52]	; (800fd40 <fsm_sconfreq+0x1d8>)
 800fd0c:	f7fd fe90 	bl	800da30 <sys_untimeout>
 800fd10:	697b      	ldr	r3, [r7, #20]
 800fd12:	7b9b      	ldrb	r3, [r3, #14]
 800fd14:	461a      	mov	r2, r3
 800fd16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fd1a:	fb03 f302 	mul.w	r3, r3, r2
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	4907      	ldr	r1, [pc, #28]	; (800fd40 <fsm_sconfreq+0x1d8>)
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7fd fe58 	bl	800d9d8 <sys_timeout>
 800fd28:	e000      	b.n	800fd2c <fsm_sconfreq+0x1c4>
        return;
 800fd2a:	bf00      	nop
}
 800fd2c:	3718      	adds	r7, #24
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	0801cd08 	.word	0x0801cd08
 800fd38:	0801cd2c 	.word	0x0801cd2c
 800fd3c:	0801cd58 	.word	0x0801cd58
 800fd40:	0800f269 	.word	0x0800f269

0800fd44 <fsm_sdata>:
/*
 * fsm_sdata - Send some data.
 *
 * Used for all packets sent to our peer by this module.
 */
void fsm_sdata(fsm *f, u_char code, u_char id, const u_char *data, int datalen) {
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b088      	sub	sp, #32
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	60f8      	str	r0, [r7, #12]
 800fd4c:	607b      	str	r3, [r7, #4]
 800fd4e:	460b      	mov	r3, r1
 800fd50:	72fb      	strb	r3, [r7, #11]
 800fd52:	4613      	mov	r3, r2
 800fd54:	72bb      	strb	r3, [r7, #10]
    ppp_pcb *pcb = f->pcb;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	61fb      	str	r3, [r7, #28]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    /* Adjust length to be smaller than MTU */
    if (datalen > pcb->peer_mru - HEADERLEN)
 800fd5c:	69fb      	ldr	r3, [r7, #28]
 800fd5e:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800fd62:	1f1a      	subs	r2, r3, #4
 800fd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd66:	429a      	cmp	r2, r3
 800fd68:	da04      	bge.n	800fd74 <fsm_sdata+0x30>
	datalen = pcb->peer_mru - HEADERLEN;
 800fd6a:	69fb      	ldr	r3, [r7, #28]
 800fd6c:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800fd70:	3b04      	subs	r3, #4
 800fd72:	62bb      	str	r3, [r7, #40]	; 0x28
    outlen = datalen + HEADERLEN;
 800fd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd76:	3304      	adds	r3, #4
 800fd78:	61bb      	str	r3, [r7, #24]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(outlen + PPP_HDRLEN), PBUF_RAM);
 800fd7a:	69bb      	ldr	r3, [r7, #24]
 800fd7c:	b29b      	uxth	r3, r3
 800fd7e:	3304      	adds	r3, #4
 800fd80:	b29b      	uxth	r3, r3
 800fd82:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd86:	4619      	mov	r1, r3
 800fd88:	2000      	movs	r0, #0
 800fd8a:	f7f5 fd9f 	bl	80058cc <pbuf_alloc>
 800fd8e:	6178      	str	r0, [r7, #20]
    if(NULL == p)
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d04f      	beq.n	800fe36 <fsm_sdata+0xf2>
        return;
    if(p->tot_len != p->len) {
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	891a      	ldrh	r2, [r3, #8]
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	895b      	ldrh	r3, [r3, #10]
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	d003      	beq.n	800fdaa <fsm_sdata+0x66>
        pbuf_free(p);
 800fda2:	6978      	ldr	r0, [r7, #20]
 800fda4:	f7f6 f836 	bl	8005e14 <pbuf_free>
        return;
 800fda8:	e046      	b.n	800fe38 <fsm_sdata+0xf4>
    }

    outp = (u_char*)p->payload;
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	685b      	ldr	r3, [r3, #4]
 800fdae:	613b      	str	r3, [r7, #16]
    if (datalen && data != NULL) { /* && data != outp + PPP_HDRLEN + HEADERLEN)  -- was only for fsm_sconfreq() */
 800fdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d009      	beq.n	800fdca <fsm_sdata+0x86>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d006      	beq.n	800fdca <fsm_sdata+0x86>
      MEMCPY(outp + PPP_HDRLEN + HEADERLEN, data, datalen);
 800fdbc:	693b      	ldr	r3, [r7, #16]
 800fdbe:	3308      	adds	r3, #8
 800fdc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fdc2:	6879      	ldr	r1, [r7, #4]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f008 fa57 	bl	8018278 <memcpy>
    }
    MAKEHEADER(outp, f->protocol);
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	1c5a      	adds	r2, r3, #1
 800fdce:	613a      	str	r2, [r7, #16]
 800fdd0:	22ff      	movs	r2, #255	; 0xff
 800fdd2:	701a      	strb	r2, [r3, #0]
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	1c5a      	adds	r2, r3, #1
 800fdd8:	613a      	str	r2, [r7, #16]
 800fdda:	2203      	movs	r2, #3
 800fddc:	701a      	strb	r2, [r3, #0]
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	1c5a      	adds	r2, r3, #1
 800fde2:	613a      	str	r2, [r7, #16]
 800fde4:	68fa      	ldr	r2, [r7, #12]
 800fde6:	89d2      	ldrh	r2, [r2, #14]
 800fde8:	0a12      	lsrs	r2, r2, #8
 800fdea:	b292      	uxth	r2, r2
 800fdec:	b2d2      	uxtb	r2, r2
 800fdee:	701a      	strb	r2, [r3, #0]
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	1c5a      	adds	r2, r3, #1
 800fdf4:	613a      	str	r2, [r7, #16]
 800fdf6:	68fa      	ldr	r2, [r7, #12]
 800fdf8:	89d2      	ldrh	r2, [r2, #14]
 800fdfa:	b2d2      	uxtb	r2, r2
 800fdfc:	701a      	strb	r2, [r3, #0]
    PUTCHAR(code, outp);
 800fdfe:	693b      	ldr	r3, [r7, #16]
 800fe00:	1c5a      	adds	r2, r3, #1
 800fe02:	613a      	str	r2, [r7, #16]
 800fe04:	7afa      	ldrb	r2, [r7, #11]
 800fe06:	701a      	strb	r2, [r3, #0]
    PUTCHAR(id, outp);
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	1c5a      	adds	r2, r3, #1
 800fe0c:	613a      	str	r2, [r7, #16]
 800fe0e:	7aba      	ldrb	r2, [r7, #10]
 800fe10:	701a      	strb	r2, [r3, #0]
    PUTSHORT(outlen, outp);
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	1c5a      	adds	r2, r3, #1
 800fe16:	613a      	str	r2, [r7, #16]
 800fe18:	69ba      	ldr	r2, [r7, #24]
 800fe1a:	1212      	asrs	r2, r2, #8
 800fe1c:	b2d2      	uxtb	r2, r2
 800fe1e:	701a      	strb	r2, [r3, #0]
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	1c5a      	adds	r2, r3, #1
 800fe24:	613a      	str	r2, [r7, #16]
 800fe26:	69ba      	ldr	r2, [r7, #24]
 800fe28:	b2d2      	uxtb	r2, r2
 800fe2a:	701a      	strb	r2, [r3, #0]
    ppp_write(pcb, p);
 800fe2c:	6979      	ldr	r1, [r7, #20]
 800fe2e:	69f8      	ldr	r0, [r7, #28]
 800fe30:	f005 fdf0 	bl	8015a14 <ppp_write>
 800fe34:	e000      	b.n	800fe38 <fsm_sdata+0xf4>
        return;
 800fe36:	bf00      	nop
}
 800fe38:	3720      	adds	r7, #32
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}
	...

0800fe40 <ipcp_init>:
#endif /* PPP_OPTIONS */

/*
 * ipcp_init - Initialize IPCP.
 */
static void ipcp_init(ppp_pcb *pcb) {
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b086      	sub	sp, #24
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fe4e:	617b      	str	r3, [r7, #20]

    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800fe56:	613b      	str	r3, [r7, #16]
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800fe5e:	60fb      	str	r3, [r7, #12]

    f->pcb = pcb;
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	687a      	ldr	r2, [r7, #4]
 800fe64:	601a      	str	r2, [r3, #0]
    f->protocol = PPP_IPCP;
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	f248 0221 	movw	r2, #32801	; 0x8021
 800fe6c:	81da      	strh	r2, [r3, #14]
    f->callbacks = &ipcp_callbacks;
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	4a14      	ldr	r2, [pc, #80]	; (800fec4 <ipcp_init+0x84>)
 800fe72:	605a      	str	r2, [r3, #4]
    fsm_init(f);
 800fe74:	6978      	ldr	r0, [r7, #20]
 800fe76:	f7ff f84d 	bl	800ef14 <fsm_init>
     * Some 3G modems use repeated IPCP NAKs as a way of stalling
     * until they can contact a server on the network, so we increase
     * the default number of NAKs we accept before we start treating
     * them as rejects.
     */
    f->maxnakloops = 100;
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	2264      	movs	r2, #100	; 0x64
 800fe7e:	75da      	strb	r2, [r3, #23]
#if 0 /* Not necessary, everything is cleared in ppp_new() */
    memset(wo, 0, sizeof(*wo));
    memset(ao, 0, sizeof(*ao));
#endif /* 0 */

    wo->neg_addr = wo->old_addrs = 1;
 800fe80:	693a      	ldr	r2, [r7, #16]
 800fe82:	7813      	ldrb	r3, [r2, #0]
 800fe84:	f043 0302 	orr.w	r3, r3, #2
 800fe88:	7013      	strb	r3, [r2, #0]
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	781b      	ldrb	r3, [r3, #0]
 800fe8e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800fe92:	b2d9      	uxtb	r1, r3
 800fe94:	693a      	ldr	r2, [r7, #16]
 800fe96:	7813      	ldrb	r3, [r2, #0]
 800fe98:	f361 0300 	bfi	r3, r1, #0, #1
 800fe9c:	7013      	strb	r3, [r2, #0]
#if 0 /* UNUSED */
    /* wanting default route by default */
    wo->default_route = 1;
#endif /* UNUSED */

    ao->neg_addr = ao->old_addrs = 1;
 800fe9e:	68fa      	ldr	r2, [r7, #12]
 800fea0:	7813      	ldrb	r3, [r2, #0]
 800fea2:	f043 0302 	orr.w	r3, r3, #2
 800fea6:	7013      	strb	r3, [r2, #0]
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800feb0:	b2d9      	uxtb	r1, r3
 800feb2:	68fa      	ldr	r2, [r7, #12]
 800feb4:	7813      	ldrb	r3, [r2, #0]
 800feb6:	f361 0300 	bfi	r3, r1, #0, #1
 800feba:	7013      	strb	r3, [r2, #0]
     * and defaultroute options.
     */
    ao->proxy_arp = 1;
    ao->default_route = 1;
#endif /* UNUSED */
}
 800febc:	bf00      	nop
 800febe:	3718      	adds	r7, #24
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}
 800fec4:	0801dbe0 	.word	0x0801dbe0

0800fec8 <ipcp_open>:


/*
 * ipcp_open - IPCP is allowed to come up.
 */
static void ipcp_open(ppp_pcb *pcb) {
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fed6:	60fb      	str	r3, [r7, #12]
    fsm_open(f);
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f7ff f8b1 	bl	800f040 <fsm_open>
    pcb->ipcp_is_open = 1;
 800fede:	687a      	ldr	r2, [r7, #4]
 800fee0:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800fee4:	f043 0302 	orr.w	r3, r3, #2
 800fee8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
}
 800feec:	bf00      	nop
 800feee:	3710      	adds	r7, #16
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <ipcp_close>:


/*
 * ipcp_close - Take IPCP down.
 */
static void ipcp_close(ppp_pcb *pcb, const char *reason) {
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b084      	sub	sp, #16
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
    fsm *f = &pcb->ipcp_fsm;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ff04:	60fb      	str	r3, [r7, #12]
    fsm_close(f, reason);
 800ff06:	6839      	ldr	r1, [r7, #0]
 800ff08:	68f8      	ldr	r0, [r7, #12]
 800ff0a:	f7ff f961 	bl	800f1d0 <fsm_close>
}
 800ff0e:	bf00      	nop
 800ff10:	3710      	adds	r7, #16
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}

0800ff16 <ipcp_lowerup>:


/*
 * ipcp_lowerup - The lower layer is up.
 */
static void ipcp_lowerup(ppp_pcb *pcb) {
 800ff16:	b580      	push	{r7, lr}
 800ff18:	b084      	sub	sp, #16
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ff24:	60fb      	str	r3, [r7, #12]
    fsm_lowerup(f);
 800ff26:	68f8      	ldr	r0, [r7, #12]
 800ff28:	f7ff f811 	bl	800ef4e <fsm_lowerup>
}
 800ff2c:	bf00      	nop
 800ff2e:	3710      	adds	r7, #16
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}

0800ff34 <ipcp_lowerdown>:


/*
 * ipcp_lowerdown - The lower layer is down.
 */
static void ipcp_lowerdown(ppp_pcb *pcb) {
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b084      	sub	sp, #16
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ff42:	60fb      	str	r3, [r7, #12]
    fsm_lowerdown(f);
 800ff44:	68f8      	ldr	r0, [r7, #12]
 800ff46:	f7ff f827 	bl	800ef98 <fsm_lowerdown>
}
 800ff4a:	bf00      	nop
 800ff4c:	3710      	adds	r7, #16
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}

0800ff52 <ipcp_input>:


/*
 * ipcp_input - Input IPCP packet.
 */
static void ipcp_input(ppp_pcb *pcb, u_char *p, int len) {
 800ff52:	b580      	push	{r7, lr}
 800ff54:	b086      	sub	sp, #24
 800ff56:	af00      	add	r7, sp, #0
 800ff58:	60f8      	str	r0, [r7, #12]
 800ff5a:	60b9      	str	r1, [r7, #8]
 800ff5c:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ff64:	617b      	str	r3, [r7, #20]
    fsm_input(f, p, len);
 800ff66:	687a      	ldr	r2, [r7, #4]
 800ff68:	68b9      	ldr	r1, [r7, #8]
 800ff6a:	6978      	ldr	r0, [r7, #20]
 800ff6c:	f7ff fa1e 	bl	800f3ac <fsm_input>
}
 800ff70:	bf00      	nop
 800ff72:	3718      	adds	r7, #24
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <ipcp_protrej>:
/*
 * ipcp_protrej - A Protocol-Reject was received for IPCP.
 *
 * Pretend the lower layer went down, so we shut up.
 */
static void ipcp_protrej(ppp_pcb *pcb) {
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b084      	sub	sp, #16
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ff86:	60fb      	str	r3, [r7, #12]
    fsm_lowerdown(f);
 800ff88:	68f8      	ldr	r0, [r7, #12]
 800ff8a:	f7ff f805 	bl	800ef98 <fsm_lowerdown>
}
 800ff8e:	bf00      	nop
 800ff90:	3710      	adds	r7, #16
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}

0800ff96 <ipcp_resetci>:

/*
 * ipcp_resetci - Reset our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static void ipcp_resetci(fsm *f) {
 800ff96:	b5b0      	push	{r4, r5, r7, lr}
 800ff98:	b086      	sub	sp, #24
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	617b      	str	r3, [r7, #20]
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800ffaa:	613b      	str	r3, [r7, #16]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800ffb2:	60fb      	str	r3, [r7, #12]
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800ffb4:	697b      	ldr	r3, [r7, #20]
 800ffb6:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800ffba:	60bb      	str	r3, [r7, #8]

    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	781b      	ldrb	r3, [r3, #0]
 800ffc0:	f003 0301 	and.w	r3, r3, #1
 800ffc4:	b2db      	uxtb	r3, r3
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d106      	bne.n	800ffd8 <ipcp_resetci+0x42>
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	f003 0302 	and.w	r3, r3, #2
 800ffd2:	b2db      	uxtb	r3, r3
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d00f      	beq.n	800fff8 <ipcp_resetci+0x62>
	(ao->neg_addr || ao->old_addrs);
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	f003 0301 	and.w	r3, r3, #1
 800ffe0:	b2db      	uxtb	r3, r3
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d106      	bne.n	800fff4 <ipcp_resetci+0x5e>
	(ao->neg_addr || ao->old_addrs);
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	f003 0302 	and.w	r3, r3, #2
 800ffee:	b2db      	uxtb	r3, r3
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d001      	beq.n	800fff8 <ipcp_resetci+0x62>
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800fff4:	2301      	movs	r3, #1
 800fff6:	e000      	b.n	800fffa <ipcp_resetci+0x64>
 800fff8:	2300      	movs	r3, #0
 800fffa:	b2db      	uxtb	r3, r3
 800fffc:	f003 0301 	and.w	r3, r3, #1
 8010000:	b2d9      	uxtb	r1, r3
 8010002:	693a      	ldr	r2, [r7, #16]
 8010004:	7813      	ldrb	r3, [r2, #0]
 8010006:	f361 0382 	bfi	r3, r1, #2, #1
 801000a:	7013      	strb	r3, [r2, #0]
    if (wo->ouraddr == 0)
 801000c:	693b      	ldr	r3, [r7, #16]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d104      	bne.n	801001e <ipcp_resetci+0x88>
	wo->accept_local = 1;
 8010014:	693a      	ldr	r2, [r7, #16]
 8010016:	7813      	ldrb	r3, [r2, #0]
 8010018:	f043 0308 	orr.w	r3, r3, #8
 801001c:	7013      	strb	r3, [r2, #0]
    if (wo->hisaddr == 0)
 801001e:	693b      	ldr	r3, [r7, #16]
 8010020:	689b      	ldr	r3, [r3, #8]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d104      	bne.n	8010030 <ipcp_resetci+0x9a>
	wo->accept_remote = 1;
 8010026:	693a      	ldr	r2, [r7, #16]
 8010028:	7813      	ldrb	r3, [r2, #0]
 801002a:	f043 0310 	orr.w	r3, r3, #16
 801002e:	7013      	strb	r3, [r2, #0]
#if LWIP_DNS
    wo->req_dns1 = wo->req_dns2 = pcb->settings.usepeerdns;	/* Request DNS addresses from the peer */
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010038:	b2d9      	uxtb	r1, r3
 801003a:	693a      	ldr	r2, [r7, #16]
 801003c:	7813      	ldrb	r3, [r2, #0]
 801003e:	f361 1386 	bfi	r3, r1, #6, #1
 8010042:	7013      	strb	r3, [r2, #0]
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	781b      	ldrb	r3, [r3, #0]
 8010048:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801004c:	b2d9      	uxtb	r1, r3
 801004e:	693a      	ldr	r2, [r7, #16]
 8010050:	7813      	ldrb	r3, [r2, #0]
 8010052:	f361 1345 	bfi	r3, r1, #5, #1
 8010056:	7013      	strb	r3, [r2, #0]
#endif /* LWIP_DNS */
    *go = *wo;
 8010058:	68fa      	ldr	r2, [r7, #12]
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	4614      	mov	r4, r2
 801005e:	461d      	mov	r5, r3
 8010060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010064:	682b      	ldr	r3, [r5, #0]
 8010066:	6023      	str	r3, [r4, #0]
    if (!pcb->ask_for_local)
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801006e:	f003 0301 	and.w	r3, r3, #1
 8010072:	b2db      	uxtb	r3, r3
 8010074:	2b00      	cmp	r3, #0
 8010076:	d102      	bne.n	801007e <ipcp_resetci+0xe8>
	go->ouraddr = 0;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	2200      	movs	r2, #0
 801007c:	605a      	str	r2, [r3, #4]
	if (wo->hisaddr) {
	    wo->accept_remote = 0;
	}
    }
#endif /* UNUSED */
    BZERO(&pcb->ipcp_hisoptions, sizeof(ipcp_options));
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010084:	2214      	movs	r2, #20
 8010086:	2100      	movs	r1, #0
 8010088:	4618      	mov	r0, r3
 801008a:	f008 f91a 	bl	80182c2 <memset>
}
 801008e:	bf00      	nop
 8010090:	3718      	adds	r7, #24
 8010092:	46bd      	mov	sp, r7
 8010094:	bdb0      	pop	{r4, r5, r7, pc}

08010096 <ipcp_cilen>:

/*
 * ipcp_cilen - Return length of our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static int ipcp_cilen(fsm *f) {
 8010096:	b480      	push	{r7}
 8010098:	b087      	sub	sp, #28
 801009a:	af00      	add	r7, sp, #0
 801009c:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	617b      	str	r3, [r7, #20]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80100aa:	613b      	str	r3, [r7, #16]
#if VJ_SUPPORT
    ipcp_options *wo = &pcb->ipcp_wantoptions;
#endif /* VJ_SUPPORT */
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80100b2:	60fb      	str	r3, [r7, #12]

    /*
     * First see if we want to change our options to the old
     * forms because we have received old forms from the peer.
     */
    if (go->neg_addr && go->old_addrs && !ho->neg_addr && ho->old_addrs)
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	f003 0301 	and.w	r3, r3, #1
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d019      	beq.n	80100f6 <ipcp_cilen+0x60>
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	781b      	ldrb	r3, [r3, #0]
 80100c6:	f003 0302 	and.w	r3, r3, #2
 80100ca:	b2db      	uxtb	r3, r3
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d012      	beq.n	80100f6 <ipcp_cilen+0x60>
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	781b      	ldrb	r3, [r3, #0]
 80100d4:	f003 0301 	and.w	r3, r3, #1
 80100d8:	b2db      	uxtb	r3, r3
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d10b      	bne.n	80100f6 <ipcp_cilen+0x60>
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	f003 0302 	and.w	r3, r3, #2
 80100e6:	b2db      	uxtb	r3, r3
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d004      	beq.n	80100f6 <ipcp_cilen+0x60>
	go->neg_addr = 0;
 80100ec:	693a      	ldr	r2, [r7, #16]
 80100ee:	7813      	ldrb	r3, [r2, #0]
 80100f0:	f36f 0300 	bfc	r3, #0, #1
 80100f4:	7013      	strb	r3, [r2, #0]
	    go->vj_protocol = ho->vj_protocol;
	}
    }
#endif /* VJ_SUPPORT */

    return (LENCIADDRS(!go->neg_addr && go->old_addrs) +
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	781b      	ldrb	r3, [r3, #0]
 80100fa:	f003 0301 	and.w	r3, r3, #1
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	2b00      	cmp	r3, #0
 8010102:	d108      	bne.n	8010116 <ipcp_cilen+0x80>
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	781b      	ldrb	r3, [r3, #0]
 8010108:	f003 0302 	and.w	r3, r3, #2
 801010c:	b2db      	uxtb	r3, r3
 801010e:	2b00      	cmp	r3, #0
 8010110:	d001      	beq.n	8010116 <ipcp_cilen+0x80>
 8010112:	220a      	movs	r2, #10
 8010114:	e000      	b.n	8010118 <ipcp_cilen+0x82>
 8010116:	2200      	movs	r2, #0
#if VJ_SUPPORT
	    LENCIVJ(go->neg_vj, go->old_vj) +
#endif /* VJ_SUPPORT */
	    LENCIADDR(go->neg_addr) +
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	781b      	ldrb	r3, [r3, #0]
 801011c:	f003 0301 	and.w	r3, r3, #1
 8010120:	b2db      	uxtb	r3, r3
 8010122:	2b00      	cmp	r3, #0
 8010124:	d001      	beq.n	801012a <ipcp_cilen+0x94>
 8010126:	2306      	movs	r3, #6
 8010128:	e000      	b.n	801012c <ipcp_cilen+0x96>
 801012a:	2300      	movs	r3, #0
    return (LENCIADDRS(!go->neg_addr && go->old_addrs) +
 801012c:	441a      	add	r2, r3
#if LWIP_DNS
	    LENCIDNS(go->req_dns1) +
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	f003 0320 	and.w	r3, r3, #32
 8010136:	b2db      	uxtb	r3, r3
 8010138:	2b00      	cmp	r3, #0
 801013a:	d001      	beq.n	8010140 <ipcp_cilen+0xaa>
 801013c:	2306      	movs	r3, #6
 801013e:	e000      	b.n	8010142 <ipcp_cilen+0xac>
 8010140:	2300      	movs	r3, #0
	    LENCIADDR(go->neg_addr) +
 8010142:	441a      	add	r2, r3
	    LENCIDNS(go->req_dns2) +
 8010144:	693b      	ldr	r3, [r7, #16]
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801014c:	b2db      	uxtb	r3, r3
 801014e:	2b00      	cmp	r3, #0
 8010150:	d001      	beq.n	8010156 <ipcp_cilen+0xc0>
 8010152:	2306      	movs	r3, #6
 8010154:	e000      	b.n	8010158 <ipcp_cilen+0xc2>
 8010156:	2300      	movs	r3, #0
 8010158:	4413      	add	r3, r2
#if 0 /* UNUSED - WINS */
	    LENCIWINS(go->winsaddr[0]) +
	    LENCIWINS(go->winsaddr[1]) +
#endif /* UNUSED - WINS */
	    0);
}
 801015a:	4618      	mov	r0, r3
 801015c:	371c      	adds	r7, #28
 801015e:	46bd      	mov	sp, r7
 8010160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010164:	4770      	bx	lr

08010166 <ipcp_addci>:

/*
 * ipcp_addci - Add our desired CIs to a packet.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static void ipcp_addci(fsm *f, u_char *ucp, int *lenp) {
 8010166:	b580      	push	{r7, lr}
 8010168:	b08c      	sub	sp, #48	; 0x30
 801016a:	af00      	add	r7, sp, #0
 801016c:	60f8      	str	r0, [r7, #12]
 801016e:	60b9      	str	r1, [r7, #8]
 8010170:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	62bb      	str	r3, [r7, #40]	; 0x28
    ipcp_options *go = &pcb->ipcp_gotoptions;
 8010178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801017a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 801017e:	627b      	str	r3, [r7, #36]	; 0x24
    int len = *lenp;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	62fb      	str	r3, [r7, #44]	; 0x2c
	} else \
	    addr = 0; \
    }
#endif /* UNUSED - WINS */

    ADDCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 8010186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	f003 0301 	and.w	r3, r3, #1
 801018e:	b2db      	uxtb	r3, r3
 8010190:	2b00      	cmp	r3, #0
 8010192:	d15e      	bne.n	8010252 <ipcp_addci+0xec>
 8010194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010196:	781b      	ldrb	r3, [r3, #0]
 8010198:	f003 0302 	and.w	r3, r3, #2
 801019c:	b2db      	uxtb	r3, r3
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d057      	beq.n	8010252 <ipcp_addci+0xec>
 80101a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101a4:	2b09      	cmp	r3, #9
 80101a6:	dd4f      	ble.n	8010248 <ipcp_addci+0xe2>
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	1c5a      	adds	r2, r3, #1
 80101ac:	60ba      	str	r2, [r7, #8]
 80101ae:	2201      	movs	r2, #1
 80101b0:	701a      	strb	r2, [r3, #0]
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	1c5a      	adds	r2, r3, #1
 80101b6:	60ba      	str	r2, [r7, #8]
 80101b8:	220a      	movs	r2, #10
 80101ba:	701a      	strb	r2, [r3, #0]
 80101bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7f3 f8b2 	bl	800332a <lwip_htonl>
 80101c6:	6238      	str	r0, [r7, #32]
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	1c5a      	adds	r2, r3, #1
 80101cc:	60ba      	str	r2, [r7, #8]
 80101ce:	6a3a      	ldr	r2, [r7, #32]
 80101d0:	0e12      	lsrs	r2, r2, #24
 80101d2:	b2d2      	uxtb	r2, r2
 80101d4:	701a      	strb	r2, [r3, #0]
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	1c5a      	adds	r2, r3, #1
 80101da:	60ba      	str	r2, [r7, #8]
 80101dc:	6a3a      	ldr	r2, [r7, #32]
 80101de:	0c12      	lsrs	r2, r2, #16
 80101e0:	b2d2      	uxtb	r2, r2
 80101e2:	701a      	strb	r2, [r3, #0]
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	1c5a      	adds	r2, r3, #1
 80101e8:	60ba      	str	r2, [r7, #8]
 80101ea:	6a3a      	ldr	r2, [r7, #32]
 80101ec:	0a12      	lsrs	r2, r2, #8
 80101ee:	b2d2      	uxtb	r2, r2
 80101f0:	701a      	strb	r2, [r3, #0]
 80101f2:	68bb      	ldr	r3, [r7, #8]
 80101f4:	1c5a      	adds	r2, r3, #1
 80101f6:	60ba      	str	r2, [r7, #8]
 80101f8:	6a3a      	ldr	r2, [r7, #32]
 80101fa:	b2d2      	uxtb	r2, r2
 80101fc:	701a      	strb	r2, [r3, #0]
 80101fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010200:	689b      	ldr	r3, [r3, #8]
 8010202:	4618      	mov	r0, r3
 8010204:	f7f3 f891 	bl	800332a <lwip_htonl>
 8010208:	6238      	str	r0, [r7, #32]
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	1c5a      	adds	r2, r3, #1
 801020e:	60ba      	str	r2, [r7, #8]
 8010210:	6a3a      	ldr	r2, [r7, #32]
 8010212:	0e12      	lsrs	r2, r2, #24
 8010214:	b2d2      	uxtb	r2, r2
 8010216:	701a      	strb	r2, [r3, #0]
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	1c5a      	adds	r2, r3, #1
 801021c:	60ba      	str	r2, [r7, #8]
 801021e:	6a3a      	ldr	r2, [r7, #32]
 8010220:	0c12      	lsrs	r2, r2, #16
 8010222:	b2d2      	uxtb	r2, r2
 8010224:	701a      	strb	r2, [r3, #0]
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	1c5a      	adds	r2, r3, #1
 801022a:	60ba      	str	r2, [r7, #8]
 801022c:	6a3a      	ldr	r2, [r7, #32]
 801022e:	0a12      	lsrs	r2, r2, #8
 8010230:	b2d2      	uxtb	r2, r2
 8010232:	701a      	strb	r2, [r3, #0]
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	1c5a      	adds	r2, r3, #1
 8010238:	60ba      	str	r2, [r7, #8]
 801023a:	6a3a      	ldr	r2, [r7, #32]
 801023c:	b2d2      	uxtb	r2, r2
 801023e:	701a      	strb	r2, [r3, #0]
 8010240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010242:	3b0a      	subs	r3, #10
 8010244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010246:	e004      	b.n	8010252 <ipcp_addci+0xec>
 8010248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801024a:	7813      	ldrb	r3, [r2, #0]
 801024c:	f36f 0341 	bfc	r3, #1, #1
 8010250:	7013      	strb	r3, [r2, #0]
#if VJ_SUPPORT
    ADDCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    ADDCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 8010252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	f003 0301 	and.w	r3, r3, #1
 801025a:	b2db      	uxtb	r3, r3
 801025c:	2b00      	cmp	r3, #0
 801025e:	d036      	beq.n	80102ce <ipcp_addci+0x168>
 8010260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010262:	2b05      	cmp	r3, #5
 8010264:	dd2e      	ble.n	80102c4 <ipcp_addci+0x15e>
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	1c5a      	adds	r2, r3, #1
 801026a:	60ba      	str	r2, [r7, #8]
 801026c:	2203      	movs	r2, #3
 801026e:	701a      	strb	r2, [r3, #0]
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	1c5a      	adds	r2, r3, #1
 8010274:	60ba      	str	r2, [r7, #8]
 8010276:	2206      	movs	r2, #6
 8010278:	701a      	strb	r2, [r3, #0]
 801027a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	4618      	mov	r0, r3
 8010280:	f7f3 f853 	bl	800332a <lwip_htonl>
 8010284:	61f8      	str	r0, [r7, #28]
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	1c5a      	adds	r2, r3, #1
 801028a:	60ba      	str	r2, [r7, #8]
 801028c:	69fa      	ldr	r2, [r7, #28]
 801028e:	0e12      	lsrs	r2, r2, #24
 8010290:	b2d2      	uxtb	r2, r2
 8010292:	701a      	strb	r2, [r3, #0]
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	1c5a      	adds	r2, r3, #1
 8010298:	60ba      	str	r2, [r7, #8]
 801029a:	69fa      	ldr	r2, [r7, #28]
 801029c:	0c12      	lsrs	r2, r2, #16
 801029e:	b2d2      	uxtb	r2, r2
 80102a0:	701a      	strb	r2, [r3, #0]
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	1c5a      	adds	r2, r3, #1
 80102a6:	60ba      	str	r2, [r7, #8]
 80102a8:	69fa      	ldr	r2, [r7, #28]
 80102aa:	0a12      	lsrs	r2, r2, #8
 80102ac:	b2d2      	uxtb	r2, r2
 80102ae:	701a      	strb	r2, [r3, #0]
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	1c5a      	adds	r2, r3, #1
 80102b4:	60ba      	str	r2, [r7, #8]
 80102b6:	69fa      	ldr	r2, [r7, #28]
 80102b8:	b2d2      	uxtb	r2, r2
 80102ba:	701a      	strb	r2, [r3, #0]
 80102bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102be:	3b06      	subs	r3, #6
 80102c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102c2:	e004      	b.n	80102ce <ipcp_addci+0x168>
 80102c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102c6:	7813      	ldrb	r3, [r2, #0]
 80102c8:	f36f 0300 	bfc	r3, #0, #1
 80102cc:	7013      	strb	r3, [r2, #0]

#if LWIP_DNS
    ADDCIDNS(CI_MS_DNS1, go->req_dns1, go->dnsaddr[0]);
 80102ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	f003 0320 	and.w	r3, r3, #32
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d036      	beq.n	801034a <ipcp_addci+0x1e4>
 80102dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102de:	2b05      	cmp	r3, #5
 80102e0:	dd2e      	ble.n	8010340 <ipcp_addci+0x1da>
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	1c5a      	adds	r2, r3, #1
 80102e6:	60ba      	str	r2, [r7, #8]
 80102e8:	2281      	movs	r2, #129	; 0x81
 80102ea:	701a      	strb	r2, [r3, #0]
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	1c5a      	adds	r2, r3, #1
 80102f0:	60ba      	str	r2, [r7, #8]
 80102f2:	2206      	movs	r2, #6
 80102f4:	701a      	strb	r2, [r3, #0]
 80102f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f8:	68db      	ldr	r3, [r3, #12]
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7f3 f815 	bl	800332a <lwip_htonl>
 8010300:	61b8      	str	r0, [r7, #24]
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	1c5a      	adds	r2, r3, #1
 8010306:	60ba      	str	r2, [r7, #8]
 8010308:	69ba      	ldr	r2, [r7, #24]
 801030a:	0e12      	lsrs	r2, r2, #24
 801030c:	b2d2      	uxtb	r2, r2
 801030e:	701a      	strb	r2, [r3, #0]
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	1c5a      	adds	r2, r3, #1
 8010314:	60ba      	str	r2, [r7, #8]
 8010316:	69ba      	ldr	r2, [r7, #24]
 8010318:	0c12      	lsrs	r2, r2, #16
 801031a:	b2d2      	uxtb	r2, r2
 801031c:	701a      	strb	r2, [r3, #0]
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	1c5a      	adds	r2, r3, #1
 8010322:	60ba      	str	r2, [r7, #8]
 8010324:	69ba      	ldr	r2, [r7, #24]
 8010326:	0a12      	lsrs	r2, r2, #8
 8010328:	b2d2      	uxtb	r2, r2
 801032a:	701a      	strb	r2, [r3, #0]
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	1c5a      	adds	r2, r3, #1
 8010330:	60ba      	str	r2, [r7, #8]
 8010332:	69ba      	ldr	r2, [r7, #24]
 8010334:	b2d2      	uxtb	r2, r2
 8010336:	701a      	strb	r2, [r3, #0]
 8010338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801033a:	3b06      	subs	r3, #6
 801033c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801033e:	e004      	b.n	801034a <ipcp_addci+0x1e4>
 8010340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010342:	7813      	ldrb	r3, [r2, #0]
 8010344:	f36f 1345 	bfc	r3, #5, #1
 8010348:	7013      	strb	r3, [r2, #0]

    ADDCIDNS(CI_MS_DNS2, go->req_dns2, go->dnsaddr[1]);
 801034a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010352:	b2db      	uxtb	r3, r3
 8010354:	2b00      	cmp	r3, #0
 8010356:	d036      	beq.n	80103c6 <ipcp_addci+0x260>
 8010358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801035a:	2b05      	cmp	r3, #5
 801035c:	dd2e      	ble.n	80103bc <ipcp_addci+0x256>
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	1c5a      	adds	r2, r3, #1
 8010362:	60ba      	str	r2, [r7, #8]
 8010364:	2283      	movs	r2, #131	; 0x83
 8010366:	701a      	strb	r2, [r3, #0]
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	1c5a      	adds	r2, r3, #1
 801036c:	60ba      	str	r2, [r7, #8]
 801036e:	2206      	movs	r2, #6
 8010370:	701a      	strb	r2, [r3, #0]
 8010372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010374:	691b      	ldr	r3, [r3, #16]
 8010376:	4618      	mov	r0, r3
 8010378:	f7f2 ffd7 	bl	800332a <lwip_htonl>
 801037c:	6178      	str	r0, [r7, #20]
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	1c5a      	adds	r2, r3, #1
 8010382:	60ba      	str	r2, [r7, #8]
 8010384:	697a      	ldr	r2, [r7, #20]
 8010386:	0e12      	lsrs	r2, r2, #24
 8010388:	b2d2      	uxtb	r2, r2
 801038a:	701a      	strb	r2, [r3, #0]
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	1c5a      	adds	r2, r3, #1
 8010390:	60ba      	str	r2, [r7, #8]
 8010392:	697a      	ldr	r2, [r7, #20]
 8010394:	0c12      	lsrs	r2, r2, #16
 8010396:	b2d2      	uxtb	r2, r2
 8010398:	701a      	strb	r2, [r3, #0]
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	1c5a      	adds	r2, r3, #1
 801039e:	60ba      	str	r2, [r7, #8]
 80103a0:	697a      	ldr	r2, [r7, #20]
 80103a2:	0a12      	lsrs	r2, r2, #8
 80103a4:	b2d2      	uxtb	r2, r2
 80103a6:	701a      	strb	r2, [r3, #0]
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	1c5a      	adds	r2, r3, #1
 80103ac:	60ba      	str	r2, [r7, #8]
 80103ae:	697a      	ldr	r2, [r7, #20]
 80103b0:	b2d2      	uxtb	r2, r2
 80103b2:	701a      	strb	r2, [r3, #0]
 80103b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b6:	3b06      	subs	r3, #6
 80103b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80103ba:	e004      	b.n	80103c6 <ipcp_addci+0x260>
 80103bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103be:	7813      	ldrb	r3, [r2, #0]
 80103c0:	f36f 1386 	bfc	r3, #6, #1
 80103c4:	7013      	strb	r3, [r2, #0]
    ADDCIWINS(CI_MS_WINS1, go->winsaddr[0]);

    ADDCIWINS(CI_MS_WINS2, go->winsaddr[1]);
#endif /* UNUSED - WINS */
    
    *lenp -= len;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681a      	ldr	r2, [r3, #0]
 80103ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103cc:	1ad2      	subs	r2, r2, r3
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	601a      	str	r2, [r3, #0]
}
 80103d2:	bf00      	nop
 80103d4:	3730      	adds	r7, #48	; 0x30
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <ipcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int ipcp_ackci(fsm *f, u_char *p, int len) {
 80103da:	b580      	push	{r7, lr}
 80103dc:	b08c      	sub	sp, #48	; 0x30
 80103de:	af00      	add	r7, sp, #0
 80103e0:	60f8      	str	r0, [r7, #12]
 80103e2:	60b9      	str	r1, [r7, #8]
 80103e4:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    ipcp_options *go = &pcb->ipcp_gotoptions;
 80103ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ee:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80103f2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (addr != cilong) \
	    goto bad; \
    }
#endif /* UNUSED - WINS */

    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 80103f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f6:	781b      	ldrb	r3, [r3, #0]
 80103f8:	f003 0301 	and.w	r3, r3, #1
 80103fc:	b2db      	uxtb	r3, r3
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d17b      	bne.n	80104fa <ipcp_ackci+0x120>
 8010402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010404:	781b      	ldrb	r3, [r3, #0]
 8010406:	f003 0302 	and.w	r3, r3, #2
 801040a:	b2db      	uxtb	r3, r3
 801040c:	2b00      	cmp	r3, #0
 801040e:	d074      	beq.n	80104fa <ipcp_ackci+0x120>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	3b0a      	subs	r3, #10
 8010414:	607b      	str	r3, [r7, #4]
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2b00      	cmp	r3, #0
 801041a:	f2c0 8158 	blt.w	80106ce <ipcp_ackci+0x2f4>
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	1c5a      	adds	r2, r3, #1
 8010422:	60ba      	str	r2, [r7, #8]
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	1c5a      	adds	r2, r3, #1
 801042c:	60ba      	str	r2, [r7, #8]
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010432:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010434:	2b0a      	cmp	r3, #10
 8010436:	f040 815d 	bne.w	80106f4 <ipcp_ackci+0x31a>
 801043a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801043c:	2b01      	cmp	r3, #1
 801043e:	f040 8159 	bne.w	80106f4 <ipcp_ackci+0x31a>
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	1c5a      	adds	r2, r3, #1
 8010446:	60ba      	str	r2, [r7, #8]
 8010448:	781b      	ldrb	r3, [r3, #0]
 801044a:	021b      	lsls	r3, r3, #8
 801044c:	623b      	str	r3, [r7, #32]
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	1c5a      	adds	r2, r3, #1
 8010452:	60ba      	str	r2, [r7, #8]
 8010454:	781b      	ldrb	r3, [r3, #0]
 8010456:	461a      	mov	r2, r3
 8010458:	6a3b      	ldr	r3, [r7, #32]
 801045a:	4313      	orrs	r3, r2
 801045c:	623b      	str	r3, [r7, #32]
 801045e:	6a3b      	ldr	r3, [r7, #32]
 8010460:	021b      	lsls	r3, r3, #8
 8010462:	623b      	str	r3, [r7, #32]
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	1c5a      	adds	r2, r3, #1
 8010468:	60ba      	str	r2, [r7, #8]
 801046a:	781b      	ldrb	r3, [r3, #0]
 801046c:	461a      	mov	r2, r3
 801046e:	6a3b      	ldr	r3, [r7, #32]
 8010470:	4313      	orrs	r3, r2
 8010472:	623b      	str	r3, [r7, #32]
 8010474:	6a3b      	ldr	r3, [r7, #32]
 8010476:	021b      	lsls	r3, r3, #8
 8010478:	623b      	str	r3, [r7, #32]
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	1c5a      	adds	r2, r3, #1
 801047e:	60ba      	str	r2, [r7, #8]
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	461a      	mov	r2, r3
 8010484:	6a3b      	ldr	r3, [r7, #32]
 8010486:	4313      	orrs	r3, r2
 8010488:	623b      	str	r3, [r7, #32]
 801048a:	6a38      	ldr	r0, [r7, #32]
 801048c:	f7f2 ff4d 	bl	800332a <lwip_htonl>
 8010490:	61f8      	str	r0, [r7, #28]
 8010492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010494:	685a      	ldr	r2, [r3, #4]
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	429a      	cmp	r2, r3
 801049a:	f040 811a 	bne.w	80106d2 <ipcp_ackci+0x2f8>
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	1c5a      	adds	r2, r3, #1
 80104a2:	60ba      	str	r2, [r7, #8]
 80104a4:	781b      	ldrb	r3, [r3, #0]
 80104a6:	021b      	lsls	r3, r3, #8
 80104a8:	623b      	str	r3, [r7, #32]
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	1c5a      	adds	r2, r3, #1
 80104ae:	60ba      	str	r2, [r7, #8]
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	461a      	mov	r2, r3
 80104b4:	6a3b      	ldr	r3, [r7, #32]
 80104b6:	4313      	orrs	r3, r2
 80104b8:	623b      	str	r3, [r7, #32]
 80104ba:	6a3b      	ldr	r3, [r7, #32]
 80104bc:	021b      	lsls	r3, r3, #8
 80104be:	623b      	str	r3, [r7, #32]
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	1c5a      	adds	r2, r3, #1
 80104c4:	60ba      	str	r2, [r7, #8]
 80104c6:	781b      	ldrb	r3, [r3, #0]
 80104c8:	461a      	mov	r2, r3
 80104ca:	6a3b      	ldr	r3, [r7, #32]
 80104cc:	4313      	orrs	r3, r2
 80104ce:	623b      	str	r3, [r7, #32]
 80104d0:	6a3b      	ldr	r3, [r7, #32]
 80104d2:	021b      	lsls	r3, r3, #8
 80104d4:	623b      	str	r3, [r7, #32]
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	1c5a      	adds	r2, r3, #1
 80104da:	60ba      	str	r2, [r7, #8]
 80104dc:	781b      	ldrb	r3, [r3, #0]
 80104de:	461a      	mov	r2, r3
 80104e0:	6a3b      	ldr	r3, [r7, #32]
 80104e2:	4313      	orrs	r3, r2
 80104e4:	623b      	str	r3, [r7, #32]
 80104e6:	6a38      	ldr	r0, [r7, #32]
 80104e8:	f7f2 ff1f 	bl	800332a <lwip_htonl>
 80104ec:	61f8      	str	r0, [r7, #28]
 80104ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f0:	689a      	ldr	r2, [r3, #8]
 80104f2:	69fb      	ldr	r3, [r7, #28]
 80104f4:	429a      	cmp	r2, r3
 80104f6:	f040 80ee 	bne.w	80106d6 <ipcp_ackci+0x2fc>
#if VJ_SUPPORT
    ACKCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 80104fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	f003 0301 	and.w	r3, r3, #1
 8010502:	b2db      	uxtb	r3, r3
 8010504:	2b00      	cmp	r3, #0
 8010506:	d046      	beq.n	8010596 <ipcp_ackci+0x1bc>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	3b06      	subs	r3, #6
 801050c:	607b      	str	r3, [r7, #4]
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2b00      	cmp	r3, #0
 8010512:	f2c0 80e2 	blt.w	80106da <ipcp_ackci+0x300>
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	1c5a      	adds	r2, r3, #1
 801051a:	60ba      	str	r2, [r7, #8]
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	1c5a      	adds	r2, r3, #1
 8010524:	60ba      	str	r2, [r7, #8]
 8010526:	781b      	ldrb	r3, [r3, #0]
 8010528:	84bb      	strh	r3, [r7, #36]	; 0x24
 801052a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801052c:	2b06      	cmp	r3, #6
 801052e:	f040 80e1 	bne.w	80106f4 <ipcp_ackci+0x31a>
 8010532:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010534:	2b03      	cmp	r3, #3
 8010536:	f040 80dd 	bne.w	80106f4 <ipcp_ackci+0x31a>
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	1c5a      	adds	r2, r3, #1
 801053e:	60ba      	str	r2, [r7, #8]
 8010540:	781b      	ldrb	r3, [r3, #0]
 8010542:	021b      	lsls	r3, r3, #8
 8010544:	61bb      	str	r3, [r7, #24]
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	1c5a      	adds	r2, r3, #1
 801054a:	60ba      	str	r2, [r7, #8]
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	461a      	mov	r2, r3
 8010550:	69bb      	ldr	r3, [r7, #24]
 8010552:	4313      	orrs	r3, r2
 8010554:	61bb      	str	r3, [r7, #24]
 8010556:	69bb      	ldr	r3, [r7, #24]
 8010558:	021b      	lsls	r3, r3, #8
 801055a:	61bb      	str	r3, [r7, #24]
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	1c5a      	adds	r2, r3, #1
 8010560:	60ba      	str	r2, [r7, #8]
 8010562:	781b      	ldrb	r3, [r3, #0]
 8010564:	461a      	mov	r2, r3
 8010566:	69bb      	ldr	r3, [r7, #24]
 8010568:	4313      	orrs	r3, r2
 801056a:	61bb      	str	r3, [r7, #24]
 801056c:	69bb      	ldr	r3, [r7, #24]
 801056e:	021b      	lsls	r3, r3, #8
 8010570:	61bb      	str	r3, [r7, #24]
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	1c5a      	adds	r2, r3, #1
 8010576:	60ba      	str	r2, [r7, #8]
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	461a      	mov	r2, r3
 801057c:	69bb      	ldr	r3, [r7, #24]
 801057e:	4313      	orrs	r3, r2
 8010580:	61bb      	str	r3, [r7, #24]
 8010582:	69b8      	ldr	r0, [r7, #24]
 8010584:	f7f2 fed1 	bl	800332a <lwip_htonl>
 8010588:	61f8      	str	r0, [r7, #28]
 801058a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058c:	685a      	ldr	r2, [r3, #4]
 801058e:	69fb      	ldr	r3, [r7, #28]
 8010590:	429a      	cmp	r2, r3
 8010592:	f040 80a4 	bne.w	80106de <ipcp_ackci+0x304>

#if LWIP_DNS
    ACKCIDNS(CI_MS_DNS1, go->req_dns1, go->dnsaddr[0]);
 8010596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010598:	781b      	ldrb	r3, [r3, #0]
 801059a:	f003 0320 	and.w	r3, r3, #32
 801059e:	b2db      	uxtb	r3, r3
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d045      	beq.n	8010630 <ipcp_ackci+0x256>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	3b06      	subs	r3, #6
 80105a8:	607b      	str	r3, [r7, #4]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	f2c0 8098 	blt.w	80106e2 <ipcp_ackci+0x308>
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	1c5a      	adds	r2, r3, #1
 80105b6:	60ba      	str	r2, [r7, #8]
 80105b8:	781b      	ldrb	r3, [r3, #0]
 80105ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	1c5a      	adds	r2, r3, #1
 80105c0:	60ba      	str	r2, [r7, #8]
 80105c2:	781b      	ldrb	r3, [r3, #0]
 80105c4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80105c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80105c8:	2b06      	cmp	r3, #6
 80105ca:	f040 8093 	bne.w	80106f4 <ipcp_ackci+0x31a>
 80105ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80105d0:	2b81      	cmp	r3, #129	; 0x81
 80105d2:	f040 808f 	bne.w	80106f4 <ipcp_ackci+0x31a>
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	1c5a      	adds	r2, r3, #1
 80105da:	60ba      	str	r2, [r7, #8]
 80105dc:	781b      	ldrb	r3, [r3, #0]
 80105de:	021b      	lsls	r3, r3, #8
 80105e0:	617b      	str	r3, [r7, #20]
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	1c5a      	adds	r2, r3, #1
 80105e6:	60ba      	str	r2, [r7, #8]
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	461a      	mov	r2, r3
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	4313      	orrs	r3, r2
 80105f0:	617b      	str	r3, [r7, #20]
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	021b      	lsls	r3, r3, #8
 80105f6:	617b      	str	r3, [r7, #20]
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	1c5a      	adds	r2, r3, #1
 80105fc:	60ba      	str	r2, [r7, #8]
 80105fe:	781b      	ldrb	r3, [r3, #0]
 8010600:	461a      	mov	r2, r3
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	4313      	orrs	r3, r2
 8010606:	617b      	str	r3, [r7, #20]
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	021b      	lsls	r3, r3, #8
 801060c:	617b      	str	r3, [r7, #20]
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	1c5a      	adds	r2, r3, #1
 8010612:	60ba      	str	r2, [r7, #8]
 8010614:	781b      	ldrb	r3, [r3, #0]
 8010616:	461a      	mov	r2, r3
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	4313      	orrs	r3, r2
 801061c:	617b      	str	r3, [r7, #20]
 801061e:	6978      	ldr	r0, [r7, #20]
 8010620:	f7f2 fe83 	bl	800332a <lwip_htonl>
 8010624:	61f8      	str	r0, [r7, #28]
 8010626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010628:	68da      	ldr	r2, [r3, #12]
 801062a:	69fb      	ldr	r3, [r7, #28]
 801062c:	429a      	cmp	r2, r3
 801062e:	d15a      	bne.n	80106e6 <ipcp_ackci+0x30c>

    ACKCIDNS(CI_MS_DNS2, go->req_dns2, go->dnsaddr[1]);
 8010630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010632:	781b      	ldrb	r3, [r3, #0]
 8010634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010638:	b2db      	uxtb	r3, r3
 801063a:	2b00      	cmp	r3, #0
 801063c:	d042      	beq.n	80106c4 <ipcp_ackci+0x2ea>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	3b06      	subs	r3, #6
 8010642:	607b      	str	r3, [r7, #4]
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2b00      	cmp	r3, #0
 8010648:	db4f      	blt.n	80106ea <ipcp_ackci+0x310>
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	1c5a      	adds	r2, r3, #1
 801064e:	60ba      	str	r2, [r7, #8]
 8010650:	781b      	ldrb	r3, [r3, #0]
 8010652:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	1c5a      	adds	r2, r3, #1
 8010658:	60ba      	str	r2, [r7, #8]
 801065a:	781b      	ldrb	r3, [r3, #0]
 801065c:	84bb      	strh	r3, [r7, #36]	; 0x24
 801065e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010660:	2b06      	cmp	r3, #6
 8010662:	d147      	bne.n	80106f4 <ipcp_ackci+0x31a>
 8010664:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010666:	2b83      	cmp	r3, #131	; 0x83
 8010668:	d144      	bne.n	80106f4 <ipcp_ackci+0x31a>
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	1c5a      	adds	r2, r3, #1
 801066e:	60ba      	str	r2, [r7, #8]
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	021b      	lsls	r3, r3, #8
 8010674:	613b      	str	r3, [r7, #16]
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	1c5a      	adds	r2, r3, #1
 801067a:	60ba      	str	r2, [r7, #8]
 801067c:	781b      	ldrb	r3, [r3, #0]
 801067e:	461a      	mov	r2, r3
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	4313      	orrs	r3, r2
 8010684:	613b      	str	r3, [r7, #16]
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	021b      	lsls	r3, r3, #8
 801068a:	613b      	str	r3, [r7, #16]
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	1c5a      	adds	r2, r3, #1
 8010690:	60ba      	str	r2, [r7, #8]
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	461a      	mov	r2, r3
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	4313      	orrs	r3, r2
 801069a:	613b      	str	r3, [r7, #16]
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	021b      	lsls	r3, r3, #8
 80106a0:	613b      	str	r3, [r7, #16]
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	1c5a      	adds	r2, r3, #1
 80106a6:	60ba      	str	r2, [r7, #8]
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	461a      	mov	r2, r3
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	4313      	orrs	r3, r2
 80106b0:	613b      	str	r3, [r7, #16]
 80106b2:	6938      	ldr	r0, [r7, #16]
 80106b4:	f7f2 fe39 	bl	800332a <lwip_htonl>
 80106b8:	61f8      	str	r0, [r7, #28]
 80106ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106bc:	691a      	ldr	r2, [r3, #16]
 80106be:	69fb      	ldr	r3, [r7, #28]
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d114      	bne.n	80106ee <ipcp_ackci+0x314>
#endif /* UNUSED - WINS */

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d113      	bne.n	80106f2 <ipcp_ackci+0x318>
	goto bad;
    return (1);
 80106ca:	2301      	movs	r3, #1
 80106cc:	e013      	b.n	80106f6 <ipcp_ackci+0x31c>
    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 80106ce:	bf00      	nop
 80106d0:	e010      	b.n	80106f4 <ipcp_ackci+0x31a>
 80106d2:	bf00      	nop
 80106d4:	e00e      	b.n	80106f4 <ipcp_ackci+0x31a>
 80106d6:	bf00      	nop
 80106d8:	e00c      	b.n	80106f4 <ipcp_ackci+0x31a>
    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 80106da:	bf00      	nop
 80106dc:	e00a      	b.n	80106f4 <ipcp_ackci+0x31a>
 80106de:	bf00      	nop
 80106e0:	e008      	b.n	80106f4 <ipcp_ackci+0x31a>
    ACKCIDNS(CI_MS_DNS1, go->req_dns1, go->dnsaddr[0]);
 80106e2:	bf00      	nop
 80106e4:	e006      	b.n	80106f4 <ipcp_ackci+0x31a>
 80106e6:	bf00      	nop
 80106e8:	e004      	b.n	80106f4 <ipcp_ackci+0x31a>
    ACKCIDNS(CI_MS_DNS2, go->req_dns2, go->dnsaddr[1]);
 80106ea:	bf00      	nop
 80106ec:	e002      	b.n	80106f4 <ipcp_ackci+0x31a>
 80106ee:	bf00      	nop
 80106f0:	e000      	b.n	80106f4 <ipcp_ackci+0x31a>
	goto bad;
 80106f2:	bf00      	nop

bad:
    IPCPDEBUG(("ipcp_ackci: received bad Ack!"));
    return (0);
 80106f4:	2300      	movs	r3, #0
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3730      	adds	r7, #48	; 0x30
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}

080106fe <ipcp_nakci>:
 *
 * Returns:
 *	0 - Nak was bad.
 *	1 - Nak was good.
 */
static int ipcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 80106fe:	b5b0      	push	{r4, r5, r7, lr}
 8010700:	b098      	sub	sp, #96	; 0x60
 8010702:	af00      	add	r7, sp, #0
 8010704:	60f8      	str	r0, [r7, #12]
 8010706:	60b9      	str	r1, [r7, #8]
 8010708:	607a      	str	r2, [r7, #4]
 801070a:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	65fb      	str	r3, [r7, #92]	; 0x5c
    ipcp_options *go = &pcb->ipcp_gotoptions;
 8010712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010714:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8010718:	65bb      	str	r3, [r7, #88]	; 0x58
    u32_t cidnsaddr;
#endif /* LWIP_DNS */
    ipcp_options no;		/* options we've seen Naks for */
    ipcp_options try_;		/* options to request next time */

    BZERO(&no, sizeof(no));
 801071a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801071e:	2214      	movs	r2, #20
 8010720:	2100      	movs	r1, #0
 8010722:	4618      	mov	r0, r3
 8010724:	f007 fdcd 	bl	80182c2 <memset>
    try_ = *go;
 8010728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801072a:	f107 0414 	add.w	r4, r7, #20
 801072e:	461d      	mov	r5, r3
 8010730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010734:	682b      	ldr	r3, [r5, #0]
 8010736:	6023      	str	r3, [r4, #0]

    /*
     * Accept the peer's idea of {our,his} address, if different
     * from our idea, only if the accept_{local,remote} flag is set.
     */
    NAKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 8010738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801073a:	781b      	ldrb	r3, [r3, #0]
 801073c:	f003 0301 	and.w	r3, r3, #1
 8010740:	b2db      	uxtb	r3, r3
 8010742:	2b00      	cmp	r3, #0
 8010744:	f040 8099 	bne.w	801087a <ipcp_nakci+0x17c>
 8010748:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	f003 0302 	and.w	r3, r3, #2
 8010750:	b2db      	uxtb	r3, r3
 8010752:	2b00      	cmp	r3, #0
 8010754:	f000 8091 	beq.w	801087a <ipcp_nakci+0x17c>
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	785b      	ldrb	r3, [r3, #1]
 801075c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8010760:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010764:	2b0a      	cmp	r3, #10
 8010766:	f040 8088 	bne.w	801087a <ipcp_nakci+0x17c>
 801076a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	429a      	cmp	r2, r3
 8010772:	f300 8082 	bgt.w	801087a <ipcp_nakci+0x17c>
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	2b01      	cmp	r3, #1
 801077c:	d17d      	bne.n	801087a <ipcp_nakci+0x17c>
 801077e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010782:	687a      	ldr	r2, [r7, #4]
 8010784:	1ad3      	subs	r3, r2, r3
 8010786:	607b      	str	r3, [r7, #4]
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	3302      	adds	r3, #2
 801078c:	60bb      	str	r3, [r7, #8]
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	1c5a      	adds	r2, r3, #1
 8010792:	60ba      	str	r2, [r7, #8]
 8010794:	781b      	ldrb	r3, [r3, #0]
 8010796:	021b      	lsls	r3, r3, #8
 8010798:	653b      	str	r3, [r7, #80]	; 0x50
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	1c5a      	adds	r2, r3, #1
 801079e:	60ba      	str	r2, [r7, #8]
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	461a      	mov	r2, r3
 80107a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107a6:	4313      	orrs	r3, r2
 80107a8:	653b      	str	r3, [r7, #80]	; 0x50
 80107aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107ac:	021b      	lsls	r3, r3, #8
 80107ae:	653b      	str	r3, [r7, #80]	; 0x50
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	1c5a      	adds	r2, r3, #1
 80107b4:	60ba      	str	r2, [r7, #8]
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	461a      	mov	r2, r3
 80107ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107bc:	4313      	orrs	r3, r2
 80107be:	653b      	str	r3, [r7, #80]	; 0x50
 80107c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107c2:	021b      	lsls	r3, r3, #8
 80107c4:	653b      	str	r3, [r7, #80]	; 0x50
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	1c5a      	adds	r2, r3, #1
 80107ca:	60ba      	str	r2, [r7, #8]
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	461a      	mov	r2, r3
 80107d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107d2:	4313      	orrs	r3, r2
 80107d4:	653b      	str	r3, [r7, #80]	; 0x50
 80107d6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80107d8:	f7f2 fda7 	bl	800332a <lwip_htonl>
 80107dc:	64f8      	str	r0, [r7, #76]	; 0x4c
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	1c5a      	adds	r2, r3, #1
 80107e2:	60ba      	str	r2, [r7, #8]
 80107e4:	781b      	ldrb	r3, [r3, #0]
 80107e6:	021b      	lsls	r3, r3, #8
 80107e8:	653b      	str	r3, [r7, #80]	; 0x50
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	1c5a      	adds	r2, r3, #1
 80107ee:	60ba      	str	r2, [r7, #8]
 80107f0:	781b      	ldrb	r3, [r3, #0]
 80107f2:	461a      	mov	r2, r3
 80107f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107f6:	4313      	orrs	r3, r2
 80107f8:	653b      	str	r3, [r7, #80]	; 0x50
 80107fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107fc:	021b      	lsls	r3, r3, #8
 80107fe:	653b      	str	r3, [r7, #80]	; 0x50
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	1c5a      	adds	r2, r3, #1
 8010804:	60ba      	str	r2, [r7, #8]
 8010806:	781b      	ldrb	r3, [r3, #0]
 8010808:	461a      	mov	r2, r3
 801080a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801080c:	4313      	orrs	r3, r2
 801080e:	653b      	str	r3, [r7, #80]	; 0x50
 8010810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010812:	021b      	lsls	r3, r3, #8
 8010814:	653b      	str	r3, [r7, #80]	; 0x50
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	1c5a      	adds	r2, r3, #1
 801081a:	60ba      	str	r2, [r7, #8]
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	461a      	mov	r2, r3
 8010820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010822:	4313      	orrs	r3, r2
 8010824:	653b      	str	r3, [r7, #80]	; 0x50
 8010826:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010828:	f7f2 fd7f 	bl	800332a <lwip_htonl>
 801082c:	64b8      	str	r0, [r7, #72]	; 0x48
 801082e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010832:	f043 0302 	orr.w	r3, r3, #2
 8010836:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d004      	beq.n	801084a <ipcp_nakci+0x14c>
 8010840:	7d3b      	ldrb	r3, [r7, #20]
 8010842:	f36f 0341 	bfc	r3, #1, #1
 8010846:	753b      	strb	r3, [r7, #20]
 8010848:	e017      	b.n	801087a <ipcp_nakci+0x17c>
 801084a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801084c:	781b      	ldrb	r3, [r3, #0]
 801084e:	f003 0308 	and.w	r3, r3, #8
 8010852:	b2db      	uxtb	r3, r3
 8010854:	2b00      	cmp	r3, #0
 8010856:	d004      	beq.n	8010862 <ipcp_nakci+0x164>
 8010858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801085a:	2b00      	cmp	r3, #0
 801085c:	d001      	beq.n	8010862 <ipcp_nakci+0x164>
 801085e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010860:	61bb      	str	r3, [r7, #24]
 8010862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010864:	781b      	ldrb	r3, [r3, #0]
 8010866:	f003 0310 	and.w	r3, r3, #16
 801086a:	b2db      	uxtb	r3, r3
 801086c:	2b00      	cmp	r3, #0
 801086e:	d004      	beq.n	801087a <ipcp_nakci+0x17c>
 8010870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010872:	2b00      	cmp	r3, #0
 8010874:	d001      	beq.n	801087a <ipcp_nakci+0x17c>
 8010876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010878:	61fb      	str	r3, [r7, #28]
		}
	    }
	    );
#endif /* VJ_SUPPORT */

    NAKCIADDR(CI_ADDR, neg_addr,
 801087a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801087c:	781b      	ldrb	r3, [r3, #0]
 801087e:	f003 0301 	and.w	r3, r3, #1
 8010882:	b2db      	uxtb	r3, r3
 8010884:	2b00      	cmp	r3, #0
 8010886:	d05e      	beq.n	8010946 <ipcp_nakci+0x248>
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	785b      	ldrb	r3, [r3, #1]
 801088c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8010890:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010894:	2b06      	cmp	r3, #6
 8010896:	d156      	bne.n	8010946 <ipcp_nakci+0x248>
 8010898:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	429a      	cmp	r2, r3
 80108a0:	dc51      	bgt.n	8010946 <ipcp_nakci+0x248>
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	781b      	ldrb	r3, [r3, #0]
 80108a6:	2b03      	cmp	r3, #3
 80108a8:	d14d      	bne.n	8010946 <ipcp_nakci+0x248>
 80108aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80108ae:	687a      	ldr	r2, [r7, #4]
 80108b0:	1ad3      	subs	r3, r2, r3
 80108b2:	607b      	str	r3, [r7, #4]
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	3302      	adds	r3, #2
 80108b8:	60bb      	str	r3, [r7, #8]
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	1c5a      	adds	r2, r3, #1
 80108be:	60ba      	str	r2, [r7, #8]
 80108c0:	781b      	ldrb	r3, [r3, #0]
 80108c2:	021b      	lsls	r3, r3, #8
 80108c4:	653b      	str	r3, [r7, #80]	; 0x50
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	1c5a      	adds	r2, r3, #1
 80108ca:	60ba      	str	r2, [r7, #8]
 80108cc:	781b      	ldrb	r3, [r3, #0]
 80108ce:	461a      	mov	r2, r3
 80108d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108d2:	4313      	orrs	r3, r2
 80108d4:	653b      	str	r3, [r7, #80]	; 0x50
 80108d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108d8:	021b      	lsls	r3, r3, #8
 80108da:	653b      	str	r3, [r7, #80]	; 0x50
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	1c5a      	adds	r2, r3, #1
 80108e0:	60ba      	str	r2, [r7, #8]
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	461a      	mov	r2, r3
 80108e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108e8:	4313      	orrs	r3, r2
 80108ea:	653b      	str	r3, [r7, #80]	; 0x50
 80108ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108ee:	021b      	lsls	r3, r3, #8
 80108f0:	653b      	str	r3, [r7, #80]	; 0x50
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	1c5a      	adds	r2, r3, #1
 80108f6:	60ba      	str	r2, [r7, #8]
 80108f8:	781b      	ldrb	r3, [r3, #0]
 80108fa:	461a      	mov	r2, r3
 80108fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108fe:	4313      	orrs	r3, r2
 8010900:	653b      	str	r3, [r7, #80]	; 0x50
 8010902:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010904:	f7f2 fd11 	bl	800332a <lwip_htonl>
 8010908:	64f8      	str	r0, [r7, #76]	; 0x4c
 801090a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801090e:	f043 0301 	orr.w	r3, r3, #1
 8010912:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d008      	beq.n	801092e <ipcp_nakci+0x230>
 801091c:	7d3b      	ldrb	r3, [r7, #20]
 801091e:	f36f 0300 	bfc	r3, #0, #1
 8010922:	753b      	strb	r3, [r7, #20]
 8010924:	7d3b      	ldrb	r3, [r7, #20]
 8010926:	f36f 0341 	bfc	r3, #1, #1
 801092a:	753b      	strb	r3, [r7, #20]
 801092c:	e00b      	b.n	8010946 <ipcp_nakci+0x248>
 801092e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010930:	781b      	ldrb	r3, [r3, #0]
 8010932:	f003 0308 	and.w	r3, r3, #8
 8010936:	b2db      	uxtb	r3, r3
 8010938:	2b00      	cmp	r3, #0
 801093a:	d004      	beq.n	8010946 <ipcp_nakci+0x248>
 801093c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801093e:	2b00      	cmp	r3, #0
 8010940:	d001      	beq.n	8010946 <ipcp_nakci+0x248>
 8010942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010944:	61bb      	str	r3, [r7, #24]
		  try_.ouraddr = ciaddr1;
	      }
	      );

#if LWIP_DNS
    NAKCIDNS(CI_MS_DNS1, req_dns1,
 8010946:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	f003 0320 	and.w	r3, r3, #32
 801094e:	b2db      	uxtb	r3, r3
 8010950:	2b00      	cmp	r3, #0
 8010952:	d050      	beq.n	80109f6 <ipcp_nakci+0x2f8>
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	785b      	ldrb	r3, [r3, #1]
 8010958:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801095c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010960:	2b06      	cmp	r3, #6
 8010962:	d148      	bne.n	80109f6 <ipcp_nakci+0x2f8>
 8010964:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	429a      	cmp	r2, r3
 801096c:	dc43      	bgt.n	80109f6 <ipcp_nakci+0x2f8>
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	781b      	ldrb	r3, [r3, #0]
 8010972:	2b81      	cmp	r3, #129	; 0x81
 8010974:	d13f      	bne.n	80109f6 <ipcp_nakci+0x2f8>
 8010976:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801097a:	687a      	ldr	r2, [r7, #4]
 801097c:	1ad3      	subs	r3, r2, r3
 801097e:	607b      	str	r3, [r7, #4]
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	3302      	adds	r3, #2
 8010984:	60bb      	str	r3, [r7, #8]
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	1c5a      	adds	r2, r3, #1
 801098a:	60ba      	str	r2, [r7, #8]
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	021b      	lsls	r3, r3, #8
 8010990:	653b      	str	r3, [r7, #80]	; 0x50
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	1c5a      	adds	r2, r3, #1
 8010996:	60ba      	str	r2, [r7, #8]
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	461a      	mov	r2, r3
 801099c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801099e:	4313      	orrs	r3, r2
 80109a0:	653b      	str	r3, [r7, #80]	; 0x50
 80109a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109a4:	021b      	lsls	r3, r3, #8
 80109a6:	653b      	str	r3, [r7, #80]	; 0x50
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	1c5a      	adds	r2, r3, #1
 80109ac:	60ba      	str	r2, [r7, #8]
 80109ae:	781b      	ldrb	r3, [r3, #0]
 80109b0:	461a      	mov	r2, r3
 80109b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109b4:	4313      	orrs	r3, r2
 80109b6:	653b      	str	r3, [r7, #80]	; 0x50
 80109b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109ba:	021b      	lsls	r3, r3, #8
 80109bc:	653b      	str	r3, [r7, #80]	; 0x50
 80109be:	68bb      	ldr	r3, [r7, #8]
 80109c0:	1c5a      	adds	r2, r3, #1
 80109c2:	60ba      	str	r2, [r7, #8]
 80109c4:	781b      	ldrb	r3, [r3, #0]
 80109c6:	461a      	mov	r2, r3
 80109c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109ca:	4313      	orrs	r3, r2
 80109cc:	653b      	str	r3, [r7, #80]	; 0x50
 80109ce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80109d0:	f7f2 fcab 	bl	800332a <lwip_htonl>
 80109d4:	6478      	str	r0, [r7, #68]	; 0x44
 80109d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80109da:	f043 0320 	orr.w	r3, r3, #32
 80109de:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d004      	beq.n	80109f2 <ipcp_nakci+0x2f4>
 80109e8:	7d3b      	ldrb	r3, [r7, #20]
 80109ea:	f36f 1345 	bfc	r3, #5, #1
 80109ee:	753b      	strb	r3, [r7, #20]
 80109f0:	e001      	b.n	80109f6 <ipcp_nakci+0x2f8>
 80109f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109f4:	623b      	str	r3, [r7, #32]
	     } else {
		 try_.dnsaddr[0] = cidnsaddr;
	     }
	     );

    NAKCIDNS(CI_MS_DNS2, req_dns2,
 80109f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109f8:	781b      	ldrb	r3, [r3, #0]
 80109fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109fe:	b2db      	uxtb	r3, r3
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	f000 8201 	beq.w	8010e08 <ipcp_nakci+0x70a>
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	785b      	ldrb	r3, [r3, #1]
 8010a0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8010a0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010a12:	2b06      	cmp	r3, #6
 8010a14:	f040 81f8 	bne.w	8010e08 <ipcp_nakci+0x70a>
 8010a18:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	f300 81f2 	bgt.w	8010e08 <ipcp_nakci+0x70a>
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	2b83      	cmp	r3, #131	; 0x83
 8010a2a:	f040 81ed 	bne.w	8010e08 <ipcp_nakci+0x70a>
 8010a2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010a32:	687a      	ldr	r2, [r7, #4]
 8010a34:	1ad3      	subs	r3, r2, r3
 8010a36:	607b      	str	r3, [r7, #4]
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	3302      	adds	r3, #2
 8010a3c:	60bb      	str	r3, [r7, #8]
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	1c5a      	adds	r2, r3, #1
 8010a42:	60ba      	str	r2, [r7, #8]
 8010a44:	781b      	ldrb	r3, [r3, #0]
 8010a46:	021b      	lsls	r3, r3, #8
 8010a48:	653b      	str	r3, [r7, #80]	; 0x50
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	1c5a      	adds	r2, r3, #1
 8010a4e:	60ba      	str	r2, [r7, #8]
 8010a50:	781b      	ldrb	r3, [r3, #0]
 8010a52:	461a      	mov	r2, r3
 8010a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a56:	4313      	orrs	r3, r2
 8010a58:	653b      	str	r3, [r7, #80]	; 0x50
 8010a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a5c:	021b      	lsls	r3, r3, #8
 8010a5e:	653b      	str	r3, [r7, #80]	; 0x50
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	1c5a      	adds	r2, r3, #1
 8010a64:	60ba      	str	r2, [r7, #8]
 8010a66:	781b      	ldrb	r3, [r3, #0]
 8010a68:	461a      	mov	r2, r3
 8010a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a6c:	4313      	orrs	r3, r2
 8010a6e:	653b      	str	r3, [r7, #80]	; 0x50
 8010a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a72:	021b      	lsls	r3, r3, #8
 8010a74:	653b      	str	r3, [r7, #80]	; 0x50
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	1c5a      	adds	r2, r3, #1
 8010a7a:	60ba      	str	r2, [r7, #8]
 8010a7c:	781b      	ldrb	r3, [r3, #0]
 8010a7e:	461a      	mov	r2, r3
 8010a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a82:	4313      	orrs	r3, r2
 8010a84:	653b      	str	r3, [r7, #80]	; 0x50
 8010a86:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010a88:	f7f2 fc4f 	bl	800332a <lwip_htonl>
 8010a8c:	6478      	str	r0, [r7, #68]	; 0x44
 8010a8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a96:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d004      	beq.n	8010aaa <ipcp_nakci+0x3ac>
 8010aa0:	7d3b      	ldrb	r3, [r7, #20]
 8010aa2:	f36f 1386 	bfc	r3, #6, #1
 8010aa6:	753b      	strb	r3, [r7, #20]
 8010aa8:	e1ae      	b.n	8010e08 <ipcp_nakci+0x70a>
 8010aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010aac:	627b      	str	r3, [r7, #36]	; 0x24
     * If they want to negotiate about IP addresses, we comply.
     * If they want us to ask for compression, we refuse.
     * If they want us to ask for ms-dns, we do that, since some
     * peers get huffy if we don't.
     */
    while (len >= CILEN_VOID) {
 8010aae:	e1ab      	b.n	8010e08 <ipcp_nakci+0x70a>
	GETCHAR(citype, p);
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	1c5a      	adds	r2, r3, #1
 8010ab4:	60ba      	str	r2, [r7, #8]
 8010ab6:	781b      	ldrb	r3, [r3, #0]
 8010ab8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	GETCHAR(cilen, p);
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	1c5a      	adds	r2, r3, #1
 8010ac0:	60ba      	str	r2, [r7, #8]
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if ( cilen < CILEN_VOID || (len -= cilen) < 0 )
 8010ac8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	f240 81ad 	bls.w	8010e2c <ipcp_nakci+0x72e>
 8010ad2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ad6:	687a      	ldr	r2, [r7, #4]
 8010ad8:	1ad3      	subs	r3, r2, r3
 8010ada:	607b      	str	r3, [r7, #4]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	f2c0 81a4 	blt.w	8010e2c <ipcp_nakci+0x72e>
	    goto bad;
	next = p + cilen - 2;
 8010ae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ae8:	3b02      	subs	r3, #2
 8010aea:	68ba      	ldr	r2, [r7, #8]
 8010aec:	4413      	add	r3, r2
 8010aee:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch (citype) {
 8010af0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010af4:	2b03      	cmp	r3, #3
 8010af6:	f000 809b 	beq.w	8010c30 <ipcp_nakci+0x532>
 8010afa:	2b03      	cmp	r3, #3
 8010afc:	dc02      	bgt.n	8010b04 <ipcp_nakci+0x406>
 8010afe:	2b01      	cmp	r3, #1
 8010b00:	d007      	beq.n	8010b12 <ipcp_nakci+0x414>
	    if (ciaddr1)
		try_.winsaddr[citype == CI_MS_WINS2] = ciaddr1;
	    break;
#endif /* UNUSED - WINS */
	default:
	    break;
 8010b02:	e17f      	b.n	8010e04 <ipcp_nakci+0x706>
	switch (citype) {
 8010b04:	2b81      	cmp	r3, #129	; 0x81
 8010b06:	f000 80ee 	beq.w	8010ce6 <ipcp_nakci+0x5e8>
 8010b0a:	2b83      	cmp	r3, #131	; 0x83
 8010b0c:	f000 8134 	beq.w	8010d78 <ipcp_nakci+0x67a>
	    break;
 8010b10:	e178      	b.n	8010e04 <ipcp_nakci+0x706>
	    if ((!go->neg_addr && go->old_addrs) || no.old_addrs
 8010b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	f003 0301 	and.w	r3, r3, #1
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d107      	bne.n	8010b30 <ipcp_nakci+0x432>
 8010b20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010b22:	781b      	ldrb	r3, [r3, #0]
 8010b24:	f003 0302 	and.w	r3, r3, #2
 8010b28:	b2db      	uxtb	r3, r3
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	f040 817e 	bne.w	8010e2c <ipcp_nakci+0x72e>
 8010b30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010b34:	f003 0302 	and.w	r3, r3, #2
 8010b38:	b2db      	uxtb	r3, r3
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	f040 8176 	bne.w	8010e2c <ipcp_nakci+0x72e>
		|| cilen != CILEN_ADDRS)
 8010b40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010b44:	2b0a      	cmp	r3, #10
 8010b46:	f040 8171 	bne.w	8010e2c <ipcp_nakci+0x72e>
	    try_.neg_addr = 0;
 8010b4a:	7d3b      	ldrb	r3, [r7, #20]
 8010b4c:	f36f 0300 	bfc	r3, #0, #1
 8010b50:	753b      	strb	r3, [r7, #20]
	    GETLONG(l, p);
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	1c5a      	adds	r2, r3, #1
 8010b56:	60ba      	str	r2, [r7, #8]
 8010b58:	781b      	ldrb	r3, [r3, #0]
 8010b5a:	021b      	lsls	r3, r3, #8
 8010b5c:	653b      	str	r3, [r7, #80]	; 0x50
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	1c5a      	adds	r2, r3, #1
 8010b62:	60ba      	str	r2, [r7, #8]
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	461a      	mov	r2, r3
 8010b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b6a:	4313      	orrs	r3, r2
 8010b6c:	653b      	str	r3, [r7, #80]	; 0x50
 8010b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b70:	021b      	lsls	r3, r3, #8
 8010b72:	653b      	str	r3, [r7, #80]	; 0x50
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	1c5a      	adds	r2, r3, #1
 8010b78:	60ba      	str	r2, [r7, #8]
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	461a      	mov	r2, r3
 8010b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b80:	4313      	orrs	r3, r2
 8010b82:	653b      	str	r3, [r7, #80]	; 0x50
 8010b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b86:	021b      	lsls	r3, r3, #8
 8010b88:	653b      	str	r3, [r7, #80]	; 0x50
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	1c5a      	adds	r2, r3, #1
 8010b8e:	60ba      	str	r2, [r7, #8]
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	461a      	mov	r2, r3
 8010b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b96:	4313      	orrs	r3, r2
 8010b98:	653b      	str	r3, [r7, #80]	; 0x50
	    ciaddr1 = lwip_htonl(l);
 8010b9a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010b9c:	f7f2 fbc5 	bl	800332a <lwip_htonl>
 8010ba0:	64f8      	str	r0, [r7, #76]	; 0x4c
	    if (ciaddr1 && go->accept_local)
 8010ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d008      	beq.n	8010bba <ipcp_nakci+0x4bc>
 8010ba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	f003 0308 	and.w	r3, r3, #8
 8010bb0:	b2db      	uxtb	r3, r3
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d001      	beq.n	8010bba <ipcp_nakci+0x4bc>
		try_.ouraddr = ciaddr1;
 8010bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bb8:	61bb      	str	r3, [r7, #24]
	    GETLONG(l, p);
 8010bba:	68bb      	ldr	r3, [r7, #8]
 8010bbc:	1c5a      	adds	r2, r3, #1
 8010bbe:	60ba      	str	r2, [r7, #8]
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	021b      	lsls	r3, r3, #8
 8010bc4:	653b      	str	r3, [r7, #80]	; 0x50
 8010bc6:	68bb      	ldr	r3, [r7, #8]
 8010bc8:	1c5a      	adds	r2, r3, #1
 8010bca:	60ba      	str	r2, [r7, #8]
 8010bcc:	781b      	ldrb	r3, [r3, #0]
 8010bce:	461a      	mov	r2, r3
 8010bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bd2:	4313      	orrs	r3, r2
 8010bd4:	653b      	str	r3, [r7, #80]	; 0x50
 8010bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bd8:	021b      	lsls	r3, r3, #8
 8010bda:	653b      	str	r3, [r7, #80]	; 0x50
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	1c5a      	adds	r2, r3, #1
 8010be0:	60ba      	str	r2, [r7, #8]
 8010be2:	781b      	ldrb	r3, [r3, #0]
 8010be4:	461a      	mov	r2, r3
 8010be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010be8:	4313      	orrs	r3, r2
 8010bea:	653b      	str	r3, [r7, #80]	; 0x50
 8010bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bee:	021b      	lsls	r3, r3, #8
 8010bf0:	653b      	str	r3, [r7, #80]	; 0x50
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	1c5a      	adds	r2, r3, #1
 8010bf6:	60ba      	str	r2, [r7, #8]
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bfe:	4313      	orrs	r3, r2
 8010c00:	653b      	str	r3, [r7, #80]	; 0x50
	    ciaddr2 = lwip_htonl(l);
 8010c02:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010c04:	f7f2 fb91 	bl	800332a <lwip_htonl>
 8010c08:	64b8      	str	r0, [r7, #72]	; 0x48
	    if (ciaddr2 && go->accept_remote)
 8010c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d008      	beq.n	8010c22 <ipcp_nakci+0x524>
 8010c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010c12:	781b      	ldrb	r3, [r3, #0]
 8010c14:	f003 0310 	and.w	r3, r3, #16
 8010c18:	b2db      	uxtb	r3, r3
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d001      	beq.n	8010c22 <ipcp_nakci+0x524>
		try_.hisaddr = ciaddr2;
 8010c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c20:	61fb      	str	r3, [r7, #28]
	    no.old_addrs = 1;
 8010c22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010c26:	f043 0302 	orr.w	r3, r3, #2
 8010c2a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	    break;
 8010c2e:	e0e9      	b.n	8010e04 <ipcp_nakci+0x706>
	    if (go->neg_addr || no.neg_addr || cilen != CILEN_ADDR)
 8010c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	f003 0301 	and.w	r3, r3, #1
 8010c38:	b2db      	uxtb	r3, r3
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	f040 80f6 	bne.w	8010e2c <ipcp_nakci+0x72e>
 8010c40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010c44:	f003 0301 	and.w	r3, r3, #1
 8010c48:	b2db      	uxtb	r3, r3
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	f040 80ee 	bne.w	8010e2c <ipcp_nakci+0x72e>
 8010c50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c54:	2b06      	cmp	r3, #6
 8010c56:	f040 80e9 	bne.w	8010e2c <ipcp_nakci+0x72e>
	    try_.old_addrs = 0;
 8010c5a:	7d3b      	ldrb	r3, [r7, #20]
 8010c5c:	f36f 0341 	bfc	r3, #1, #1
 8010c60:	753b      	strb	r3, [r7, #20]
	    GETLONG(l, p);
 8010c62:	68bb      	ldr	r3, [r7, #8]
 8010c64:	1c5a      	adds	r2, r3, #1
 8010c66:	60ba      	str	r2, [r7, #8]
 8010c68:	781b      	ldrb	r3, [r3, #0]
 8010c6a:	021b      	lsls	r3, r3, #8
 8010c6c:	653b      	str	r3, [r7, #80]	; 0x50
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	1c5a      	adds	r2, r3, #1
 8010c72:	60ba      	str	r2, [r7, #8]
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	461a      	mov	r2, r3
 8010c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c7a:	4313      	orrs	r3, r2
 8010c7c:	653b      	str	r3, [r7, #80]	; 0x50
 8010c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c80:	021b      	lsls	r3, r3, #8
 8010c82:	653b      	str	r3, [r7, #80]	; 0x50
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	1c5a      	adds	r2, r3, #1
 8010c88:	60ba      	str	r2, [r7, #8]
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c90:	4313      	orrs	r3, r2
 8010c92:	653b      	str	r3, [r7, #80]	; 0x50
 8010c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c96:	021b      	lsls	r3, r3, #8
 8010c98:	653b      	str	r3, [r7, #80]	; 0x50
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	1c5a      	adds	r2, r3, #1
 8010c9e:	60ba      	str	r2, [r7, #8]
 8010ca0:	781b      	ldrb	r3, [r3, #0]
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ca6:	4313      	orrs	r3, r2
 8010ca8:	653b      	str	r3, [r7, #80]	; 0x50
	    ciaddr1 = lwip_htonl(l);
 8010caa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010cac:	f7f2 fb3d 	bl	800332a <lwip_htonl>
 8010cb0:	64f8      	str	r0, [r7, #76]	; 0x4c
	    if (ciaddr1 && go->accept_local)
 8010cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d008      	beq.n	8010cca <ipcp_nakci+0x5cc>
 8010cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010cba:	781b      	ldrb	r3, [r3, #0]
 8010cbc:	f003 0308 	and.w	r3, r3, #8
 8010cc0:	b2db      	uxtb	r3, r3
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d001      	beq.n	8010cca <ipcp_nakci+0x5cc>
		try_.ouraddr = ciaddr1;
 8010cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cc8:	61bb      	str	r3, [r7, #24]
	    if (try_.ouraddr != 0)
 8010cca:	69bb      	ldr	r3, [r7, #24]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d003      	beq.n	8010cd8 <ipcp_nakci+0x5da>
		try_.neg_addr = 1;
 8010cd0:	7d3b      	ldrb	r3, [r7, #20]
 8010cd2:	f043 0301 	orr.w	r3, r3, #1
 8010cd6:	753b      	strb	r3, [r7, #20]
	    no.neg_addr = 1;
 8010cd8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010cdc:	f043 0301 	orr.w	r3, r3, #1
 8010ce0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	    break;
 8010ce4:	e08e      	b.n	8010e04 <ipcp_nakci+0x706>
	    if (go->req_dns1 || no.req_dns1 || cilen != CILEN_ADDR)
 8010ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010ce8:	781b      	ldrb	r3, [r3, #0]
 8010cea:	f003 0320 	and.w	r3, r3, #32
 8010cee:	b2db      	uxtb	r3, r3
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	f040 809b 	bne.w	8010e2c <ipcp_nakci+0x72e>
 8010cf6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010cfa:	f003 0320 	and.w	r3, r3, #32
 8010cfe:	b2db      	uxtb	r3, r3
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	f040 8093 	bne.w	8010e2c <ipcp_nakci+0x72e>
 8010d06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d0a:	2b06      	cmp	r3, #6
 8010d0c:	f040 808e 	bne.w	8010e2c <ipcp_nakci+0x72e>
	    GETLONG(l, p);
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	1c5a      	adds	r2, r3, #1
 8010d14:	60ba      	str	r2, [r7, #8]
 8010d16:	781b      	ldrb	r3, [r3, #0]
 8010d18:	021b      	lsls	r3, r3, #8
 8010d1a:	653b      	str	r3, [r7, #80]	; 0x50
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	1c5a      	adds	r2, r3, #1
 8010d20:	60ba      	str	r2, [r7, #8]
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	461a      	mov	r2, r3
 8010d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d28:	4313      	orrs	r3, r2
 8010d2a:	653b      	str	r3, [r7, #80]	; 0x50
 8010d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d2e:	021b      	lsls	r3, r3, #8
 8010d30:	653b      	str	r3, [r7, #80]	; 0x50
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	1c5a      	adds	r2, r3, #1
 8010d36:	60ba      	str	r2, [r7, #8]
 8010d38:	781b      	ldrb	r3, [r3, #0]
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d3e:	4313      	orrs	r3, r2
 8010d40:	653b      	str	r3, [r7, #80]	; 0x50
 8010d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d44:	021b      	lsls	r3, r3, #8
 8010d46:	653b      	str	r3, [r7, #80]	; 0x50
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	1c5a      	adds	r2, r3, #1
 8010d4c:	60ba      	str	r2, [r7, #8]
 8010d4e:	781b      	ldrb	r3, [r3, #0]
 8010d50:	461a      	mov	r2, r3
 8010d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d54:	4313      	orrs	r3, r2
 8010d56:	653b      	str	r3, [r7, #80]	; 0x50
	    try_.dnsaddr[0] = lwip_htonl(l);
 8010d58:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010d5a:	f7f2 fae6 	bl	800332a <lwip_htonl>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	623b      	str	r3, [r7, #32]
	    try_.req_dns1 = 1;
 8010d62:	7d3b      	ldrb	r3, [r7, #20]
 8010d64:	f043 0320 	orr.w	r3, r3, #32
 8010d68:	753b      	strb	r3, [r7, #20]
	    no.req_dns1 = 1;
 8010d6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010d6e:	f043 0320 	orr.w	r3, r3, #32
 8010d72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	    break;
 8010d76:	e045      	b.n	8010e04 <ipcp_nakci+0x706>
	    if (go->req_dns2 || no.req_dns2 || cilen != CILEN_ADDR)
 8010d78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d152      	bne.n	8010e2c <ipcp_nakci+0x72e>
 8010d86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d8e:	b2db      	uxtb	r3, r3
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d14b      	bne.n	8010e2c <ipcp_nakci+0x72e>
 8010d94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d98:	2b06      	cmp	r3, #6
 8010d9a:	d147      	bne.n	8010e2c <ipcp_nakci+0x72e>
	    GETLONG(l, p);
 8010d9c:	68bb      	ldr	r3, [r7, #8]
 8010d9e:	1c5a      	adds	r2, r3, #1
 8010da0:	60ba      	str	r2, [r7, #8]
 8010da2:	781b      	ldrb	r3, [r3, #0]
 8010da4:	021b      	lsls	r3, r3, #8
 8010da6:	653b      	str	r3, [r7, #80]	; 0x50
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	1c5a      	adds	r2, r3, #1
 8010dac:	60ba      	str	r2, [r7, #8]
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	461a      	mov	r2, r3
 8010db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010db4:	4313      	orrs	r3, r2
 8010db6:	653b      	str	r3, [r7, #80]	; 0x50
 8010db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dba:	021b      	lsls	r3, r3, #8
 8010dbc:	653b      	str	r3, [r7, #80]	; 0x50
 8010dbe:	68bb      	ldr	r3, [r7, #8]
 8010dc0:	1c5a      	adds	r2, r3, #1
 8010dc2:	60ba      	str	r2, [r7, #8]
 8010dc4:	781b      	ldrb	r3, [r3, #0]
 8010dc6:	461a      	mov	r2, r3
 8010dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dca:	4313      	orrs	r3, r2
 8010dcc:	653b      	str	r3, [r7, #80]	; 0x50
 8010dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dd0:	021b      	lsls	r3, r3, #8
 8010dd2:	653b      	str	r3, [r7, #80]	; 0x50
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	1c5a      	adds	r2, r3, #1
 8010dd8:	60ba      	str	r2, [r7, #8]
 8010dda:	781b      	ldrb	r3, [r3, #0]
 8010ddc:	461a      	mov	r2, r3
 8010dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010de0:	4313      	orrs	r3, r2
 8010de2:	653b      	str	r3, [r7, #80]	; 0x50
	    try_.dnsaddr[1] = lwip_htonl(l);
 8010de4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010de6:	f7f2 faa0 	bl	800332a <lwip_htonl>
 8010dea:	4603      	mov	r3, r0
 8010dec:	627b      	str	r3, [r7, #36]	; 0x24
	    try_.req_dns2 = 1;
 8010dee:	7d3b      	ldrb	r3, [r7, #20]
 8010df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010df4:	753b      	strb	r3, [r7, #20]
	    no.req_dns2 = 1;
 8010df6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dfe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	    break;
 8010e02:	bf00      	nop
	}
	p = next;
 8010e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e06:	60bb      	str	r3, [r7, #8]
    while (len >= CILEN_VOID) {
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2b01      	cmp	r3, #1
 8010e0c:	f73f ae50 	bgt.w	8010ab0 <ipcp_nakci+0x3b2>

    /*
     * OK, the Nak is good.  Now we can update state.
     * If there are any remaining options, we ignore them.
     */
    if (f->state != PPP_FSM_OPENED)
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	7c1b      	ldrb	r3, [r3, #16]
 8010e14:	2b09      	cmp	r3, #9
 8010e16:	d007      	beq.n	8010e28 <ipcp_nakci+0x72a>
	*go = try_;
 8010e18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e1a:	461d      	mov	r5, r3
 8010e1c:	f107 0414 	add.w	r4, r7, #20
 8010e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010e24:	6823      	ldr	r3, [r4, #0]
 8010e26:	602b      	str	r3, [r5, #0]

    return 1;
 8010e28:	2301      	movs	r3, #1
 8010e2a:	e000      	b.n	8010e2e <ipcp_nakci+0x730>

bad:
    IPCPDEBUG(("ipcp_nakci: received bad Nak!"));
    return 0;
 8010e2c:	2300      	movs	r3, #0
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3760      	adds	r7, #96	; 0x60
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bdb0      	pop	{r4, r5, r7, pc}

08010e36 <ipcp_rejci>:

/*
 * ipcp_rejci - Reject some of our CIs.
 * Callback from fsm_rconfnakrej.
 */
static int ipcp_rejci(fsm *f, u_char *p, int len) {
 8010e36:	b5b0      	push	{r4, r5, r7, lr}
 8010e38:	b092      	sub	sp, #72	; 0x48
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	60f8      	str	r0, [r7, #12]
 8010e3e:	60b9      	str	r1, [r7, #8]
 8010e40:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	647b      	str	r3, [r7, #68]	; 0x44
    ipcp_options *go = &pcb->ipcp_gotoptions;
 8010e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e4a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8010e4e:	643b      	str	r3, [r7, #64]	; 0x40
    u_short cishort;
#endif /* VJ_SUPPORT */
    u32_t cilong;
    ipcp_options try_;		/* options to request next time */

    try_ = *go;
 8010e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e52:	f107 0414 	add.w	r4, r7, #20
 8010e56:	461d      	mov	r5, r3
 8010e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010e5c:	682b      	ldr	r3, [r5, #0]
 8010e5e:	6023      	str	r3, [r4, #0]
	    goto bad; \
	try_.winsaddr[opt == CI_MS_WINS2] = 0; \
    }
#endif /* UNUSED - WINS */

    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 8010e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	f003 0301 	and.w	r3, r3, #1
 8010e68:	b2db      	uxtb	r3, r3
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d17f      	bne.n	8010f6e <ipcp_rejci+0x138>
 8010e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e70:	781b      	ldrb	r3, [r3, #0]
 8010e72:	f003 0302 	and.w	r3, r3, #2
 8010e76:	b2db      	uxtb	r3, r3
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d078      	beq.n	8010f6e <ipcp_rejci+0x138>
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	785b      	ldrb	r3, [r3, #1]
 8010e80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010e84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010e88:	2b0a      	cmp	r3, #10
 8010e8a:	d170      	bne.n	8010f6e <ipcp_rejci+0x138>
 8010e8c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	dc6b      	bgt.n	8010f6e <ipcp_rejci+0x138>
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	781b      	ldrb	r3, [r3, #0]
 8010e9a:	2b01      	cmp	r3, #1
 8010e9c:	d167      	bne.n	8010f6e <ipcp_rejci+0x138>
 8010e9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010ea2:	687a      	ldr	r2, [r7, #4]
 8010ea4:	1ad3      	subs	r3, r2, r3
 8010ea6:	607b      	str	r3, [r7, #4]
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	3302      	adds	r3, #2
 8010eac:	60bb      	str	r3, [r7, #8]
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	1c5a      	adds	r2, r3, #1
 8010eb2:	60ba      	str	r2, [r7, #8]
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	021b      	lsls	r3, r3, #8
 8010eb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	1c5a      	adds	r2, r3, #1
 8010ebe:	60ba      	str	r2, [r7, #8]
 8010ec0:	781b      	ldrb	r3, [r3, #0]
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ec6:	4313      	orrs	r3, r2
 8010ec8:	63bb      	str	r3, [r7, #56]	; 0x38
 8010eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ecc:	021b      	lsls	r3, r3, #8
 8010ece:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ed0:	68bb      	ldr	r3, [r7, #8]
 8010ed2:	1c5a      	adds	r2, r3, #1
 8010ed4:	60ba      	str	r2, [r7, #8]
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	461a      	mov	r2, r3
 8010eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010edc:	4313      	orrs	r3, r2
 8010ede:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee2:	021b      	lsls	r3, r3, #8
 8010ee4:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	1c5a      	adds	r2, r3, #1
 8010eea:	60ba      	str	r2, [r7, #8]
 8010eec:	781b      	ldrb	r3, [r3, #0]
 8010eee:	461a      	mov	r2, r3
 8010ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef2:	4313      	orrs	r3, r2
 8010ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ef6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010ef8:	f7f2 fa17 	bl	800332a <lwip_htonl>
 8010efc:	6378      	str	r0, [r7, #52]	; 0x34
 8010efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f00:	685a      	ldr	r2, [r3, #4]
 8010f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f04:	429a      	cmp	r2, r3
 8010f06:	f040 8137 	bne.w	8011178 <ipcp_rejci+0x342>
 8010f0a:	68bb      	ldr	r3, [r7, #8]
 8010f0c:	1c5a      	adds	r2, r3, #1
 8010f0e:	60ba      	str	r2, [r7, #8]
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	021b      	lsls	r3, r3, #8
 8010f14:	63bb      	str	r3, [r7, #56]	; 0x38
 8010f16:	68bb      	ldr	r3, [r7, #8]
 8010f18:	1c5a      	adds	r2, r3, #1
 8010f1a:	60ba      	str	r2, [r7, #8]
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	461a      	mov	r2, r3
 8010f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f22:	4313      	orrs	r3, r2
 8010f24:	63bb      	str	r3, [r7, #56]	; 0x38
 8010f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f28:	021b      	lsls	r3, r3, #8
 8010f2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	1c5a      	adds	r2, r3, #1
 8010f30:	60ba      	str	r2, [r7, #8]
 8010f32:	781b      	ldrb	r3, [r3, #0]
 8010f34:	461a      	mov	r2, r3
 8010f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f38:	4313      	orrs	r3, r2
 8010f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8010f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f3e:	021b      	lsls	r3, r3, #8
 8010f40:	63bb      	str	r3, [r7, #56]	; 0x38
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	1c5a      	adds	r2, r3, #1
 8010f46:	60ba      	str	r2, [r7, #8]
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f4e:	4313      	orrs	r3, r2
 8010f50:	63bb      	str	r3, [r7, #56]	; 0x38
 8010f52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f54:	f7f2 f9e9 	bl	800332a <lwip_htonl>
 8010f58:	6378      	str	r0, [r7, #52]	; 0x34
 8010f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f5c:	689a      	ldr	r2, [r3, #8]
 8010f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f60:	429a      	cmp	r2, r3
 8010f62:	f040 810b 	bne.w	801117c <ipcp_rejci+0x346>
 8010f66:	7d3b      	ldrb	r3, [r7, #20]
 8010f68:	f36f 0341 	bfc	r3, #1, #1
 8010f6c:	753b      	strb	r3, [r7, #20]
#if VJ_SUPPORT
    REJCIVJ(CI_COMPRESSTYPE, neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 8010f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f70:	781b      	ldrb	r3, [r3, #0]
 8010f72:	f003 0301 	and.w	r3, r3, #1
 8010f76:	b2db      	uxtb	r3, r3
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d04a      	beq.n	8011012 <ipcp_rejci+0x1dc>
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	785b      	ldrb	r3, [r3, #1]
 8010f80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010f84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f88:	2b06      	cmp	r3, #6
 8010f8a:	d142      	bne.n	8011012 <ipcp_rejci+0x1dc>
 8010f8c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	429a      	cmp	r2, r3
 8010f94:	dc3d      	bgt.n	8011012 <ipcp_rejci+0x1dc>
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	2b03      	cmp	r3, #3
 8010f9c:	d139      	bne.n	8011012 <ipcp_rejci+0x1dc>
 8010f9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010fa2:	687a      	ldr	r2, [r7, #4]
 8010fa4:	1ad3      	subs	r3, r2, r3
 8010fa6:	607b      	str	r3, [r7, #4]
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	3302      	adds	r3, #2
 8010fac:	60bb      	str	r3, [r7, #8]
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	1c5a      	adds	r2, r3, #1
 8010fb2:	60ba      	str	r2, [r7, #8]
 8010fb4:	781b      	ldrb	r3, [r3, #0]
 8010fb6:	021b      	lsls	r3, r3, #8
 8010fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	1c5a      	adds	r2, r3, #1
 8010fbe:	60ba      	str	r2, [r7, #8]
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	461a      	mov	r2, r3
 8010fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc6:	4313      	orrs	r3, r2
 8010fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8010fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fcc:	021b      	lsls	r3, r3, #8
 8010fce:	633b      	str	r3, [r7, #48]	; 0x30
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	1c5a      	adds	r2, r3, #1
 8010fd4:	60ba      	str	r2, [r7, #8]
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	461a      	mov	r2, r3
 8010fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fdc:	4313      	orrs	r3, r2
 8010fde:	633b      	str	r3, [r7, #48]	; 0x30
 8010fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe2:	021b      	lsls	r3, r3, #8
 8010fe4:	633b      	str	r3, [r7, #48]	; 0x30
 8010fe6:	68bb      	ldr	r3, [r7, #8]
 8010fe8:	1c5a      	adds	r2, r3, #1
 8010fea:	60ba      	str	r2, [r7, #8]
 8010fec:	781b      	ldrb	r3, [r3, #0]
 8010fee:	461a      	mov	r2, r3
 8010ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff2:	4313      	orrs	r3, r2
 8010ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8010ff6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ff8:	f7f2 f997 	bl	800332a <lwip_htonl>
 8010ffc:	6378      	str	r0, [r7, #52]	; 0x34
 8010ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011000:	685a      	ldr	r2, [r3, #4]
 8011002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011004:	429a      	cmp	r2, r3
 8011006:	f040 80bb 	bne.w	8011180 <ipcp_rejci+0x34a>
 801100a:	7d3b      	ldrb	r3, [r7, #20]
 801100c:	f36f 0300 	bfc	r3, #0, #1
 8011010:	753b      	strb	r3, [r7, #20]

#if LWIP_DNS
    REJCIDNS(CI_MS_DNS1, req_dns1, go->dnsaddr[0]);
 8011012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011014:	781b      	ldrb	r3, [r3, #0]
 8011016:	f003 0320 	and.w	r3, r3, #32
 801101a:	b2db      	uxtb	r3, r3
 801101c:	2b00      	cmp	r3, #0
 801101e:	d049      	beq.n	80110b4 <ipcp_rejci+0x27e>
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	785b      	ldrb	r3, [r3, #1]
 8011024:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011028:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801102c:	2b06      	cmp	r3, #6
 801102e:	d141      	bne.n	80110b4 <ipcp_rejci+0x27e>
 8011030:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	429a      	cmp	r2, r3
 8011038:	dc3c      	bgt.n	80110b4 <ipcp_rejci+0x27e>
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	781b      	ldrb	r3, [r3, #0]
 801103e:	2b81      	cmp	r3, #129	; 0x81
 8011040:	d138      	bne.n	80110b4 <ipcp_rejci+0x27e>
 8011042:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011046:	687a      	ldr	r2, [r7, #4]
 8011048:	1ad3      	subs	r3, r2, r3
 801104a:	607b      	str	r3, [r7, #4]
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	3302      	adds	r3, #2
 8011050:	60bb      	str	r3, [r7, #8]
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	1c5a      	adds	r2, r3, #1
 8011056:	60ba      	str	r2, [r7, #8]
 8011058:	781b      	ldrb	r3, [r3, #0]
 801105a:	021b      	lsls	r3, r3, #8
 801105c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801105e:	68bb      	ldr	r3, [r7, #8]
 8011060:	1c5a      	adds	r2, r3, #1
 8011062:	60ba      	str	r2, [r7, #8]
 8011064:	781b      	ldrb	r3, [r3, #0]
 8011066:	461a      	mov	r2, r3
 8011068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801106a:	4313      	orrs	r3, r2
 801106c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801106e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011070:	021b      	lsls	r3, r3, #8
 8011072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	1c5a      	adds	r2, r3, #1
 8011078:	60ba      	str	r2, [r7, #8]
 801107a:	781b      	ldrb	r3, [r3, #0]
 801107c:	461a      	mov	r2, r3
 801107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011080:	4313      	orrs	r3, r2
 8011082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011086:	021b      	lsls	r3, r3, #8
 8011088:	62fb      	str	r3, [r7, #44]	; 0x2c
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	1c5a      	adds	r2, r3, #1
 801108e:	60ba      	str	r2, [r7, #8]
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	461a      	mov	r2, r3
 8011094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011096:	4313      	orrs	r3, r2
 8011098:	62fb      	str	r3, [r7, #44]	; 0x2c
 801109a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801109c:	f7f2 f945 	bl	800332a <lwip_htonl>
 80110a0:	6378      	str	r0, [r7, #52]	; 0x34
 80110a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110a4:	68da      	ldr	r2, [r3, #12]
 80110a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d16b      	bne.n	8011184 <ipcp_rejci+0x34e>
 80110ac:	7d3b      	ldrb	r3, [r7, #20]
 80110ae:	f36f 1345 	bfc	r3, #5, #1
 80110b2:	753b      	strb	r3, [r7, #20]

    REJCIDNS(CI_MS_DNS2, req_dns2, go->dnsaddr[1]);
 80110b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110bc:	b2db      	uxtb	r3, r3
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d049      	beq.n	8011156 <ipcp_rejci+0x320>
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	785b      	ldrb	r3, [r3, #1]
 80110c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80110ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80110ce:	2b06      	cmp	r3, #6
 80110d0:	d141      	bne.n	8011156 <ipcp_rejci+0x320>
 80110d2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	429a      	cmp	r2, r3
 80110da:	dc3c      	bgt.n	8011156 <ipcp_rejci+0x320>
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	781b      	ldrb	r3, [r3, #0]
 80110e0:	2b83      	cmp	r3, #131	; 0x83
 80110e2:	d138      	bne.n	8011156 <ipcp_rejci+0x320>
 80110e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80110e8:	687a      	ldr	r2, [r7, #4]
 80110ea:	1ad3      	subs	r3, r2, r3
 80110ec:	607b      	str	r3, [r7, #4]
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	3302      	adds	r3, #2
 80110f2:	60bb      	str	r3, [r7, #8]
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	1c5a      	adds	r2, r3, #1
 80110f8:	60ba      	str	r2, [r7, #8]
 80110fa:	781b      	ldrb	r3, [r3, #0]
 80110fc:	021b      	lsls	r3, r3, #8
 80110fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	1c5a      	adds	r2, r3, #1
 8011104:	60ba      	str	r2, [r7, #8]
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	461a      	mov	r2, r3
 801110a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801110c:	4313      	orrs	r3, r2
 801110e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011112:	021b      	lsls	r3, r3, #8
 8011114:	62bb      	str	r3, [r7, #40]	; 0x28
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	1c5a      	adds	r2, r3, #1
 801111a:	60ba      	str	r2, [r7, #8]
 801111c:	781b      	ldrb	r3, [r3, #0]
 801111e:	461a      	mov	r2, r3
 8011120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011122:	4313      	orrs	r3, r2
 8011124:	62bb      	str	r3, [r7, #40]	; 0x28
 8011126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011128:	021b      	lsls	r3, r3, #8
 801112a:	62bb      	str	r3, [r7, #40]	; 0x28
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	1c5a      	adds	r2, r3, #1
 8011130:	60ba      	str	r2, [r7, #8]
 8011132:	781b      	ldrb	r3, [r3, #0]
 8011134:	461a      	mov	r2, r3
 8011136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011138:	4313      	orrs	r3, r2
 801113a:	62bb      	str	r3, [r7, #40]	; 0x28
 801113c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801113e:	f7f2 f8f4 	bl	800332a <lwip_htonl>
 8011142:	6378      	str	r0, [r7, #52]	; 0x34
 8011144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011146:	691a      	ldr	r2, [r3, #16]
 8011148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801114a:	429a      	cmp	r2, r3
 801114c:	d11c      	bne.n	8011188 <ipcp_rejci+0x352>
 801114e:	7d3b      	ldrb	r3, [r7, #20]
 8011150:	f36f 1386 	bfc	r3, #6, #1
 8011154:	753b      	strb	r3, [r7, #20]
#endif /* UNUSED - WINS */

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d117      	bne.n	801118c <ipcp_rejci+0x356>
	goto bad;
    /*
     * Now we can update state.
     */
    if (f->state != PPP_FSM_OPENED)
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	7c1b      	ldrb	r3, [r3, #16]
 8011160:	2b09      	cmp	r3, #9
 8011162:	d007      	beq.n	8011174 <ipcp_rejci+0x33e>
	*go = try_;
 8011164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011166:	461d      	mov	r5, r3
 8011168:	f107 0414 	add.w	r4, r7, #20
 801116c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801116e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011170:	6823      	ldr	r3, [r4, #0]
 8011172:	602b      	str	r3, [r5, #0]
    return 1;
 8011174:	2301      	movs	r3, #1
 8011176:	e00b      	b.n	8011190 <ipcp_rejci+0x35a>
    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 8011178:	bf00      	nop
 801117a:	e008      	b.n	801118e <ipcp_rejci+0x358>
 801117c:	bf00      	nop
 801117e:	e006      	b.n	801118e <ipcp_rejci+0x358>
    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 8011180:	bf00      	nop
 8011182:	e004      	b.n	801118e <ipcp_rejci+0x358>
    REJCIDNS(CI_MS_DNS1, req_dns1, go->dnsaddr[0]);
 8011184:	bf00      	nop
 8011186:	e002      	b.n	801118e <ipcp_rejci+0x358>
    REJCIDNS(CI_MS_DNS2, req_dns2, go->dnsaddr[1]);
 8011188:	bf00      	nop
 801118a:	e000      	b.n	801118e <ipcp_rejci+0x358>
	goto bad;
 801118c:	bf00      	nop

bad:
    IPCPDEBUG(("ipcp_rejci: received bad Reject!"));
    return 0;
 801118e:	2300      	movs	r3, #0
}
 8011190:	4618      	mov	r0, r3
 8011192:	3748      	adds	r7, #72	; 0x48
 8011194:	46bd      	mov	sp, r7
 8011196:	bdb0      	pop	{r4, r5, r7, pc}

08011198 <ipcp_reqci>:
 * CONFNAK; returns CONFREJ if it can't return CONFACK.
 *
 * inp = Requested CIs
 * len = Length of requested CIs
 */
static int ipcp_reqci(fsm *f, u_char *inp, int *len, int reject_if_disagree) {
 8011198:	b580      	push	{r7, lr}
 801119a:	b096      	sub	sp, #88	; 0x58
 801119c:	af00      	add	r7, sp, #0
 801119e:	60f8      	str	r0, [r7, #12]
 80111a0:	60b9      	str	r1, [r7, #8]
 80111a2:	607a      	str	r2, [r7, #4]
 80111a4:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	63bb      	str	r3, [r7, #56]	; 0x38
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 80111ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ae:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80111b2:	637b      	str	r3, [r7, #52]	; 0x34
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 80111b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80111ba:	633b      	str	r3, [r7, #48]	; 0x30
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 80111bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111be:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80111c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    u_short cilen, citype;	/* Parsed len, type */
#if VJ_SUPPORT
    u_short cishort;		/* Parsed short value */
#endif /* VJ_SUPPORT */
    u32_t tl, ciaddr1, ciaddr2;/* Parsed address values */
    int rc = CONFACK;		/* Final packet return code */
 80111c4:	2302      	movs	r3, #2
 80111c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    int orc;			/* Individual option return code */
    u_char *p;			/* Pointer to next char to parse */
    u_char *ucp = inp;		/* Pointer to current output char */
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	643b      	str	r3, [r7, #64]	; 0x40
    int l = *len;		/* Length left */
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* LWIP_DNS */

    /*
     * Reset all his options.
     */
    BZERO(ho, sizeof(*ho));
 80111d2:	2214      	movs	r2, #20
 80111d4:	2100      	movs	r1, #0
 80111d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111d8:	f007 f873 	bl	80182c2 <memset>
    
    /*
     * Process all his options.
     */
    next = inp;
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	657b      	str	r3, [r7, #84]	; 0x54
    while (l) {
 80111e0:	e26e      	b.n	80116c0 <ipcp_reqci+0x528>
	orc = CONFACK;			/* Assume success */
 80111e2:	2302      	movs	r3, #2
 80111e4:	64bb      	str	r3, [r7, #72]	; 0x48
	cip = p = next;			/* Remember beginning of CI */
 80111e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111e8:	647b      	str	r3, [r7, #68]	; 0x44
 80111ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111ec:	62bb      	str	r3, [r7, #40]	; 0x28
	if (l < 2 ||			/* Not enough data for CI header or */
 80111ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111f0:	2b01      	cmp	r3, #1
 80111f2:	dd0b      	ble.n	801120c <ipcp_reqci+0x74>
	    p[1] < 2 ||			/*  CI length too small or */
 80111f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111f6:	3301      	adds	r3, #1
 80111f8:	781b      	ldrb	r3, [r3, #0]
	if (l < 2 ||			/* Not enough data for CI header or */
 80111fa:	2b01      	cmp	r3, #1
 80111fc:	d906      	bls.n	801120c <ipcp_reqci+0x74>
	    p[1] > l) {			/*  CI length too big? */
 80111fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011200:	3301      	adds	r3, #1
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	461a      	mov	r2, r3
	    p[1] < 2 ||			/*  CI length too small or */
 8011206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011208:	429a      	cmp	r2, r3
 801120a:	dd07      	ble.n	801121c <ipcp_reqci+0x84>
	    IPCPDEBUG(("ipcp_reqci: bad CI length!"));
	    orc = CONFREJ;		/* Reject bad CI */
 801120c:	2304      	movs	r3, #4
 801120e:	64bb      	str	r3, [r7, #72]	; 0x48
	    cilen = l;			/* Reject till end of packet */
 8011210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011212:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	    l = 0;			/* Don't loop again */
 8011216:	2300      	movs	r3, #0
 8011218:	63fb      	str	r3, [r7, #60]	; 0x3c
	    goto endswitch;
 801121a:	e21c      	b.n	8011656 <ipcp_reqci+0x4be>
	}
	GETCHAR(citype, p);		/* Parse CI type */
 801121c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801121e:	1c5a      	adds	r2, r3, #1
 8011220:	647a      	str	r2, [r7, #68]	; 0x44
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	84fb      	strh	r3, [r7, #38]	; 0x26
	GETCHAR(cilen, p);		/* Parse CI length */
 8011226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011228:	1c5a      	adds	r2, r3, #1
 801122a:	647a      	str	r2, [r7, #68]	; 0x44
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	l -= cilen;			/* Adjust remaining length */
 8011232:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8011236:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011238:	1ad3      	subs	r3, r2, r3
 801123a:	63fb      	str	r3, [r7, #60]	; 0x3c
	next += cilen;			/* Step to next CI */
 801123c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8011240:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011242:	4413      	add	r3, r2
 8011244:	657b      	str	r3, [r7, #84]	; 0x54

	switch (citype) {		/* Check CI type */
 8011246:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011248:	2b03      	cmp	r3, #3
 801124a:	f000 8101 	beq.w	8011450 <ipcp_reqci+0x2b8>
 801124e:	2b03      	cmp	r3, #3
 8011250:	dc02      	bgt.n	8011258 <ipcp_reqci+0xc0>
 8011252:	2b01      	cmp	r3, #1
 8011254:	d007      	beq.n	8011266 <ipcp_reqci+0xce>
 8011256:	e1fa      	b.n	801164e <ipcp_reqci+0x4b6>
 8011258:	2b81      	cmp	r3, #129	; 0x81
 801125a:	f000 8187 	beq.w	801156c <ipcp_reqci+0x3d4>
 801125e:	2b83      	cmp	r3, #131	; 0x83
 8011260:	f000 8184 	beq.w	801156c <ipcp_reqci+0x3d4>
 8011264:	e1f3      	b.n	801164e <ipcp_reqci+0x4b6>
	case CI_ADDRS:
	    if (!ao->old_addrs || ho->neg_addr ||
 8011266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011268:	781b      	ldrb	r3, [r3, #0]
 801126a:	f003 0302 	and.w	r3, r3, #2
 801126e:	b2db      	uxtb	r3, r3
 8011270:	2b00      	cmp	r3, #0
 8011272:	d00a      	beq.n	801128a <ipcp_reqci+0xf2>
 8011274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011276:	781b      	ldrb	r3, [r3, #0]
 8011278:	f003 0301 	and.w	r3, r3, #1
 801127c:	b2db      	uxtb	r3, r3
 801127e:	2b00      	cmp	r3, #0
 8011280:	d103      	bne.n	801128a <ipcp_reqci+0xf2>
 8011282:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8011286:	2b0a      	cmp	r3, #10
 8011288:	d002      	beq.n	8011290 <ipcp_reqci+0xf8>
		cilen != CILEN_ADDRS) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 801128a:	2304      	movs	r3, #4
 801128c:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 801128e:	e1e2      	b.n	8011656 <ipcp_reqci+0x4be>
	     * If he has no address, or if we both have his address but
	     * disagree about it, then NAK it with our idea.
	     * In particular, if we don't know his address, but he does,
	     * then accept it.
	     */
	    GETLONG(tl, p);		/* Parse source address (his) */
 8011290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011292:	1c5a      	adds	r2, r3, #1
 8011294:	647a      	str	r2, [r7, #68]	; 0x44
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	021b      	lsls	r3, r3, #8
 801129a:	623b      	str	r3, [r7, #32]
 801129c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801129e:	1c5a      	adds	r2, r3, #1
 80112a0:	647a      	str	r2, [r7, #68]	; 0x44
 80112a2:	781b      	ldrb	r3, [r3, #0]
 80112a4:	461a      	mov	r2, r3
 80112a6:	6a3b      	ldr	r3, [r7, #32]
 80112a8:	4313      	orrs	r3, r2
 80112aa:	623b      	str	r3, [r7, #32]
 80112ac:	6a3b      	ldr	r3, [r7, #32]
 80112ae:	021b      	lsls	r3, r3, #8
 80112b0:	623b      	str	r3, [r7, #32]
 80112b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112b4:	1c5a      	adds	r2, r3, #1
 80112b6:	647a      	str	r2, [r7, #68]	; 0x44
 80112b8:	781b      	ldrb	r3, [r3, #0]
 80112ba:	461a      	mov	r2, r3
 80112bc:	6a3b      	ldr	r3, [r7, #32]
 80112be:	4313      	orrs	r3, r2
 80112c0:	623b      	str	r3, [r7, #32]
 80112c2:	6a3b      	ldr	r3, [r7, #32]
 80112c4:	021b      	lsls	r3, r3, #8
 80112c6:	623b      	str	r3, [r7, #32]
 80112c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112ca:	1c5a      	adds	r2, r3, #1
 80112cc:	647a      	str	r2, [r7, #68]	; 0x44
 80112ce:	781b      	ldrb	r3, [r3, #0]
 80112d0:	461a      	mov	r2, r3
 80112d2:	6a3b      	ldr	r3, [r7, #32]
 80112d4:	4313      	orrs	r3, r2
 80112d6:	623b      	str	r3, [r7, #32]
	    ciaddr1 = lwip_htonl(tl);
 80112d8:	6a38      	ldr	r0, [r7, #32]
 80112da:	f7f2 f826 	bl	800332a <lwip_htonl>
 80112de:	61f8      	str	r0, [r7, #28]
	    if (ciaddr1 != wo->hisaddr
 80112e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112e2:	689a      	ldr	r2, [r3, #8]
 80112e4:	69fb      	ldr	r3, [r7, #28]
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d033      	beq.n	8011352 <ipcp_reqci+0x1ba>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 80112ea:	69fb      	ldr	r3, [r7, #28]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d006      	beq.n	80112fe <ipcp_reqci+0x166>
 80112f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	f003 0310 	and.w	r3, r3, #16
 80112f8:	b2db      	uxtb	r3, r3
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d129      	bne.n	8011352 <ipcp_reqci+0x1ba>
		orc = CONFNAK;
 80112fe:	2303      	movs	r3, #3
 8011300:	64bb      	str	r3, [r7, #72]	; 0x48
		if (!reject_if_disagree) {
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d133      	bne.n	8011370 <ipcp_reqci+0x1d8>
		    DECPTR(sizeof(u32_t), p);
 8011308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801130a:	3b04      	subs	r3, #4
 801130c:	647b      	str	r3, [r7, #68]	; 0x44
		    tl = lwip_ntohl(wo->hisaddr);
 801130e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011310:	689b      	ldr	r3, [r3, #8]
 8011312:	4618      	mov	r0, r3
 8011314:	f7f2 f809 	bl	800332a <lwip_htonl>
 8011318:	6238      	str	r0, [r7, #32]
		    PUTLONG(tl, p);
 801131a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801131c:	1c5a      	adds	r2, r3, #1
 801131e:	647a      	str	r2, [r7, #68]	; 0x44
 8011320:	6a3a      	ldr	r2, [r7, #32]
 8011322:	0e12      	lsrs	r2, r2, #24
 8011324:	b2d2      	uxtb	r2, r2
 8011326:	701a      	strb	r2, [r3, #0]
 8011328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801132a:	1c5a      	adds	r2, r3, #1
 801132c:	647a      	str	r2, [r7, #68]	; 0x44
 801132e:	6a3a      	ldr	r2, [r7, #32]
 8011330:	0c12      	lsrs	r2, r2, #16
 8011332:	b2d2      	uxtb	r2, r2
 8011334:	701a      	strb	r2, [r3, #0]
 8011336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011338:	1c5a      	adds	r2, r3, #1
 801133a:	647a      	str	r2, [r7, #68]	; 0x44
 801133c:	6a3a      	ldr	r2, [r7, #32]
 801133e:	0a12      	lsrs	r2, r2, #8
 8011340:	b2d2      	uxtb	r2, r2
 8011342:	701a      	strb	r2, [r3, #0]
 8011344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011346:	1c5a      	adds	r2, r3, #1
 8011348:	647a      	str	r2, [r7, #68]	; 0x44
 801134a:	6a3a      	ldr	r2, [r7, #32]
 801134c:	b2d2      	uxtb	r2, r2
 801134e:	701a      	strb	r2, [r3, #0]
		if (!reject_if_disagree) {
 8011350:	e00e      	b.n	8011370 <ipcp_reqci+0x1d8>
		}
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 8011352:	69fb      	ldr	r3, [r7, #28]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d10b      	bne.n	8011370 <ipcp_reqci+0x1d8>
 8011358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801135a:	689b      	ldr	r3, [r3, #8]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d107      	bne.n	8011370 <ipcp_reqci+0x1d8>
		/*
		 * If neither we nor he knows his address, reject the option.
		 */
		orc = CONFREJ;
 8011360:	2304      	movs	r3, #4
 8011362:	64bb      	str	r3, [r7, #72]	; 0x48
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 8011364:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011366:	7813      	ldrb	r3, [r2, #0]
 8011368:	f36f 0382 	bfc	r3, #2, #1
 801136c:	7013      	strb	r3, [r2, #0]
		break;
 801136e:	e172      	b.n	8011656 <ipcp_reqci+0x4be>

	    /*
	     * If he doesn't know our address, or if we both have our address
	     * but disagree about it, then NAK it with our idea.
	     */
	    GETLONG(tl, p);		/* Parse destination address (ours) */
 8011370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011372:	1c5a      	adds	r2, r3, #1
 8011374:	647a      	str	r2, [r7, #68]	; 0x44
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	021b      	lsls	r3, r3, #8
 801137a:	623b      	str	r3, [r7, #32]
 801137c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801137e:	1c5a      	adds	r2, r3, #1
 8011380:	647a      	str	r2, [r7, #68]	; 0x44
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	461a      	mov	r2, r3
 8011386:	6a3b      	ldr	r3, [r7, #32]
 8011388:	4313      	orrs	r3, r2
 801138a:	623b      	str	r3, [r7, #32]
 801138c:	6a3b      	ldr	r3, [r7, #32]
 801138e:	021b      	lsls	r3, r3, #8
 8011390:	623b      	str	r3, [r7, #32]
 8011392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011394:	1c5a      	adds	r2, r3, #1
 8011396:	647a      	str	r2, [r7, #68]	; 0x44
 8011398:	781b      	ldrb	r3, [r3, #0]
 801139a:	461a      	mov	r2, r3
 801139c:	6a3b      	ldr	r3, [r7, #32]
 801139e:	4313      	orrs	r3, r2
 80113a0:	623b      	str	r3, [r7, #32]
 80113a2:	6a3b      	ldr	r3, [r7, #32]
 80113a4:	021b      	lsls	r3, r3, #8
 80113a6:	623b      	str	r3, [r7, #32]
 80113a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113aa:	1c5a      	adds	r2, r3, #1
 80113ac:	647a      	str	r2, [r7, #68]	; 0x44
 80113ae:	781b      	ldrb	r3, [r3, #0]
 80113b0:	461a      	mov	r2, r3
 80113b2:	6a3b      	ldr	r3, [r7, #32]
 80113b4:	4313      	orrs	r3, r2
 80113b6:	623b      	str	r3, [r7, #32]
	    ciaddr2 = lwip_htonl(tl);
 80113b8:	6a38      	ldr	r0, [r7, #32]
 80113ba:	f7f1 ffb6 	bl	800332a <lwip_htonl>
 80113be:	61b8      	str	r0, [r7, #24]
	    if (ciaddr2 != wo->ouraddr) {
 80113c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113c2:	685a      	ldr	r2, [r3, #4]
 80113c4:	69bb      	ldr	r3, [r7, #24]
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d036      	beq.n	8011438 <ipcp_reqci+0x2a0>
		if (ciaddr2 == 0 || !wo->accept_local) {
 80113ca:	69bb      	ldr	r3, [r7, #24]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d006      	beq.n	80113de <ipcp_reqci+0x246>
 80113d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113d2:	781b      	ldrb	r3, [r3, #0]
 80113d4:	f003 0308 	and.w	r3, r3, #8
 80113d8:	b2db      	uxtb	r3, r3
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d129      	bne.n	8011432 <ipcp_reqci+0x29a>
		    orc = CONFNAK;
 80113de:	2303      	movs	r3, #3
 80113e0:	64bb      	str	r3, [r7, #72]	; 0x48
		    if (!reject_if_disagree) {
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d127      	bne.n	8011438 <ipcp_reqci+0x2a0>
			DECPTR(sizeof(u32_t), p);
 80113e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113ea:	3b04      	subs	r3, #4
 80113ec:	647b      	str	r3, [r7, #68]	; 0x44
			tl = lwip_ntohl(wo->ouraddr);
 80113ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113f0:	685b      	ldr	r3, [r3, #4]
 80113f2:	4618      	mov	r0, r3
 80113f4:	f7f1 ff99 	bl	800332a <lwip_htonl>
 80113f8:	6238      	str	r0, [r7, #32]
			PUTLONG(tl, p);
 80113fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113fc:	1c5a      	adds	r2, r3, #1
 80113fe:	647a      	str	r2, [r7, #68]	; 0x44
 8011400:	6a3a      	ldr	r2, [r7, #32]
 8011402:	0e12      	lsrs	r2, r2, #24
 8011404:	b2d2      	uxtb	r2, r2
 8011406:	701a      	strb	r2, [r3, #0]
 8011408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801140a:	1c5a      	adds	r2, r3, #1
 801140c:	647a      	str	r2, [r7, #68]	; 0x44
 801140e:	6a3a      	ldr	r2, [r7, #32]
 8011410:	0c12      	lsrs	r2, r2, #16
 8011412:	b2d2      	uxtb	r2, r2
 8011414:	701a      	strb	r2, [r3, #0]
 8011416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011418:	1c5a      	adds	r2, r3, #1
 801141a:	647a      	str	r2, [r7, #68]	; 0x44
 801141c:	6a3a      	ldr	r2, [r7, #32]
 801141e:	0a12      	lsrs	r2, r2, #8
 8011420:	b2d2      	uxtb	r2, r2
 8011422:	701a      	strb	r2, [r3, #0]
 8011424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011426:	1c5a      	adds	r2, r3, #1
 8011428:	647a      	str	r2, [r7, #68]	; 0x44
 801142a:	6a3a      	ldr	r2, [r7, #32]
 801142c:	b2d2      	uxtb	r2, r2
 801142e:	701a      	strb	r2, [r3, #0]
		    if (!reject_if_disagree) {
 8011430:	e002      	b.n	8011438 <ipcp_reqci+0x2a0>
		    }
		} else {
		    wo->ouraddr = ciaddr2;	/* accept peer's idea */
 8011432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011434:	69ba      	ldr	r2, [r7, #24]
 8011436:	605a      	str	r2, [r3, #4]
		}
	    }

	    ho->old_addrs = 1;
 8011438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801143a:	7813      	ldrb	r3, [r2, #0]
 801143c:	f043 0302 	orr.w	r3, r3, #2
 8011440:	7013      	strb	r3, [r2, #0]
	    ho->hisaddr = ciaddr1;
 8011442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011444:	69fa      	ldr	r2, [r7, #28]
 8011446:	609a      	str	r2, [r3, #8]
	    ho->ouraddr = ciaddr2;
 8011448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801144a:	69ba      	ldr	r2, [r7, #24]
 801144c:	605a      	str	r2, [r3, #4]
	    break;
 801144e:	e102      	b.n	8011656 <ipcp_reqci+0x4be>

	case CI_ADDR:
	    if (!ao->neg_addr || ho->old_addrs ||
 8011450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	f003 0301 	and.w	r3, r3, #1
 8011458:	b2db      	uxtb	r3, r3
 801145a:	2b00      	cmp	r3, #0
 801145c:	d00a      	beq.n	8011474 <ipcp_reqci+0x2dc>
 801145e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	f003 0302 	and.w	r3, r3, #2
 8011466:	b2db      	uxtb	r3, r3
 8011468:	2b00      	cmp	r3, #0
 801146a:	d103      	bne.n	8011474 <ipcp_reqci+0x2dc>
 801146c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8011470:	2b06      	cmp	r3, #6
 8011472:	d002      	beq.n	801147a <ipcp_reqci+0x2e2>
		cilen != CILEN_ADDR) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 8011474:	2304      	movs	r3, #4
 8011476:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 8011478:	e0ed      	b.n	8011656 <ipcp_reqci+0x4be>
	     * If he has no address, or if we both have his address but
	     * disagree about it, then NAK it with our idea.
	     * In particular, if we don't know his address, but he does,
	     * then accept it.
	     */
	    GETLONG(tl, p);	/* Parse source address (his) */
 801147a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801147c:	1c5a      	adds	r2, r3, #1
 801147e:	647a      	str	r2, [r7, #68]	; 0x44
 8011480:	781b      	ldrb	r3, [r3, #0]
 8011482:	021b      	lsls	r3, r3, #8
 8011484:	623b      	str	r3, [r7, #32]
 8011486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011488:	1c5a      	adds	r2, r3, #1
 801148a:	647a      	str	r2, [r7, #68]	; 0x44
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	461a      	mov	r2, r3
 8011490:	6a3b      	ldr	r3, [r7, #32]
 8011492:	4313      	orrs	r3, r2
 8011494:	623b      	str	r3, [r7, #32]
 8011496:	6a3b      	ldr	r3, [r7, #32]
 8011498:	021b      	lsls	r3, r3, #8
 801149a:	623b      	str	r3, [r7, #32]
 801149c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801149e:	1c5a      	adds	r2, r3, #1
 80114a0:	647a      	str	r2, [r7, #68]	; 0x44
 80114a2:	781b      	ldrb	r3, [r3, #0]
 80114a4:	461a      	mov	r2, r3
 80114a6:	6a3b      	ldr	r3, [r7, #32]
 80114a8:	4313      	orrs	r3, r2
 80114aa:	623b      	str	r3, [r7, #32]
 80114ac:	6a3b      	ldr	r3, [r7, #32]
 80114ae:	021b      	lsls	r3, r3, #8
 80114b0:	623b      	str	r3, [r7, #32]
 80114b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114b4:	1c5a      	adds	r2, r3, #1
 80114b6:	647a      	str	r2, [r7, #68]	; 0x44
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	461a      	mov	r2, r3
 80114bc:	6a3b      	ldr	r3, [r7, #32]
 80114be:	4313      	orrs	r3, r2
 80114c0:	623b      	str	r3, [r7, #32]
	    ciaddr1 = lwip_htonl(tl);
 80114c2:	6a38      	ldr	r0, [r7, #32]
 80114c4:	f7f1 ff31 	bl	800332a <lwip_htonl>
 80114c8:	61f8      	str	r0, [r7, #28]
	    if (ciaddr1 != wo->hisaddr
 80114ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114cc:	689a      	ldr	r2, [r3, #8]
 80114ce:	69fb      	ldr	r3, [r7, #28]
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d033      	beq.n	801153c <ipcp_reqci+0x3a4>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 80114d4:	69fb      	ldr	r3, [r7, #28]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d006      	beq.n	80114e8 <ipcp_reqci+0x350>
 80114da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114dc:	781b      	ldrb	r3, [r3, #0]
 80114de:	f003 0310 	and.w	r3, r3, #16
 80114e2:	b2db      	uxtb	r3, r3
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d129      	bne.n	801153c <ipcp_reqci+0x3a4>
		orc = CONFNAK;
 80114e8:	2303      	movs	r3, #3
 80114ea:	64bb      	str	r3, [r7, #72]	; 0x48
		if (!reject_if_disagree) {
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d133      	bne.n	801155a <ipcp_reqci+0x3c2>
		    DECPTR(sizeof(u32_t), p);
 80114f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114f4:	3b04      	subs	r3, #4
 80114f6:	647b      	str	r3, [r7, #68]	; 0x44
		    tl = lwip_ntohl(wo->hisaddr);
 80114f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114fa:	689b      	ldr	r3, [r3, #8]
 80114fc:	4618      	mov	r0, r3
 80114fe:	f7f1 ff14 	bl	800332a <lwip_htonl>
 8011502:	6238      	str	r0, [r7, #32]
		    PUTLONG(tl, p);
 8011504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011506:	1c5a      	adds	r2, r3, #1
 8011508:	647a      	str	r2, [r7, #68]	; 0x44
 801150a:	6a3a      	ldr	r2, [r7, #32]
 801150c:	0e12      	lsrs	r2, r2, #24
 801150e:	b2d2      	uxtb	r2, r2
 8011510:	701a      	strb	r2, [r3, #0]
 8011512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011514:	1c5a      	adds	r2, r3, #1
 8011516:	647a      	str	r2, [r7, #68]	; 0x44
 8011518:	6a3a      	ldr	r2, [r7, #32]
 801151a:	0c12      	lsrs	r2, r2, #16
 801151c:	b2d2      	uxtb	r2, r2
 801151e:	701a      	strb	r2, [r3, #0]
 8011520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011522:	1c5a      	adds	r2, r3, #1
 8011524:	647a      	str	r2, [r7, #68]	; 0x44
 8011526:	6a3a      	ldr	r2, [r7, #32]
 8011528:	0a12      	lsrs	r2, r2, #8
 801152a:	b2d2      	uxtb	r2, r2
 801152c:	701a      	strb	r2, [r3, #0]
 801152e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011530:	1c5a      	adds	r2, r3, #1
 8011532:	647a      	str	r2, [r7, #68]	; 0x44
 8011534:	6a3a      	ldr	r2, [r7, #32]
 8011536:	b2d2      	uxtb	r2, r2
 8011538:	701a      	strb	r2, [r3, #0]
		if (!reject_if_disagree) {
 801153a:	e00e      	b.n	801155a <ipcp_reqci+0x3c2>
		}
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 801153c:	69fb      	ldr	r3, [r7, #28]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d10b      	bne.n	801155a <ipcp_reqci+0x3c2>
 8011542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011544:	689b      	ldr	r3, [r3, #8]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d107      	bne.n	801155a <ipcp_reqci+0x3c2>
		/*
		 * Don't ACK an address of 0.0.0.0 - reject it instead.
		 */
		orc = CONFREJ;
 801154a:	2304      	movs	r3, #4
 801154c:	64bb      	str	r3, [r7, #72]	; 0x48
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 801154e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011550:	7813      	ldrb	r3, [r2, #0]
 8011552:	f36f 0382 	bfc	r3, #2, #1
 8011556:	7013      	strb	r3, [r2, #0]
		break;
 8011558:	e07d      	b.n	8011656 <ipcp_reqci+0x4be>
	    }
	
	    ho->neg_addr = 1;
 801155a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801155c:	7813      	ldrb	r3, [r2, #0]
 801155e:	f043 0301 	orr.w	r3, r3, #1
 8011562:	7013      	strb	r3, [r2, #0]
	    ho->hisaddr = ciaddr1;
 8011564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011566:	69fa      	ldr	r2, [r7, #28]
 8011568:	609a      	str	r2, [r3, #8]
	    break;
 801156a:	e074      	b.n	8011656 <ipcp_reqci+0x4be>

#if LWIP_DNS
	case CI_MS_DNS1:
	case CI_MS_DNS2:
	    /* Microsoft primary or secondary DNS request */
	    d = citype == CI_MS_DNS2;
 801156c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801156e:	2b83      	cmp	r3, #131	; 0x83
 8011570:	bf0c      	ite	eq
 8011572:	2301      	moveq	r3, #1
 8011574:	2300      	movne	r3, #0
 8011576:	b2db      	uxtb	r3, r3
 8011578:	617b      	str	r3, [r7, #20]

	    /* If we do not have a DNS address then we cannot send it */
	    if (ao->dnsaddr[d] == 0 ||
 801157a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	3302      	adds	r3, #2
 8011580:	009b      	lsls	r3, r3, #2
 8011582:	4413      	add	r3, r2
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d003      	beq.n	8011592 <ipcp_reqci+0x3fa>
 801158a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801158e:	2b06      	cmp	r3, #6
 8011590:	d002      	beq.n	8011598 <ipcp_reqci+0x400>
		cilen != CILEN_ADDR) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 8011592:	2304      	movs	r3, #4
 8011594:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 8011596:	e05e      	b.n	8011656 <ipcp_reqci+0x4be>
	    }
	    GETLONG(tl, p);
 8011598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801159a:	1c5a      	adds	r2, r3, #1
 801159c:	647a      	str	r2, [r7, #68]	; 0x44
 801159e:	781b      	ldrb	r3, [r3, #0]
 80115a0:	021b      	lsls	r3, r3, #8
 80115a2:	623b      	str	r3, [r7, #32]
 80115a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115a6:	1c5a      	adds	r2, r3, #1
 80115a8:	647a      	str	r2, [r7, #68]	; 0x44
 80115aa:	781b      	ldrb	r3, [r3, #0]
 80115ac:	461a      	mov	r2, r3
 80115ae:	6a3b      	ldr	r3, [r7, #32]
 80115b0:	4313      	orrs	r3, r2
 80115b2:	623b      	str	r3, [r7, #32]
 80115b4:	6a3b      	ldr	r3, [r7, #32]
 80115b6:	021b      	lsls	r3, r3, #8
 80115b8:	623b      	str	r3, [r7, #32]
 80115ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115bc:	1c5a      	adds	r2, r3, #1
 80115be:	647a      	str	r2, [r7, #68]	; 0x44
 80115c0:	781b      	ldrb	r3, [r3, #0]
 80115c2:	461a      	mov	r2, r3
 80115c4:	6a3b      	ldr	r3, [r7, #32]
 80115c6:	4313      	orrs	r3, r2
 80115c8:	623b      	str	r3, [r7, #32]
 80115ca:	6a3b      	ldr	r3, [r7, #32]
 80115cc:	021b      	lsls	r3, r3, #8
 80115ce:	623b      	str	r3, [r7, #32]
 80115d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115d2:	1c5a      	adds	r2, r3, #1
 80115d4:	647a      	str	r2, [r7, #68]	; 0x44
 80115d6:	781b      	ldrb	r3, [r3, #0]
 80115d8:	461a      	mov	r2, r3
 80115da:	6a3b      	ldr	r3, [r7, #32]
 80115dc:	4313      	orrs	r3, r2
 80115de:	623b      	str	r3, [r7, #32]
	    if (lwip_htonl(tl) != ao->dnsaddr[d]) {
 80115e0:	6a38      	ldr	r0, [r7, #32]
 80115e2:	f7f1 fea2 	bl	800332a <lwip_htonl>
 80115e6:	4601      	mov	r1, r0
 80115e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	3302      	adds	r3, #2
 80115ee:	009b      	lsls	r3, r3, #2
 80115f0:	4413      	add	r3, r2
 80115f2:	685b      	ldr	r3, [r3, #4]
 80115f4:	4299      	cmp	r1, r3
 80115f6:	d02d      	beq.n	8011654 <ipcp_reqci+0x4bc>
                DECPTR(sizeof(u32_t), p);
 80115f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115fa:	3b04      	subs	r3, #4
 80115fc:	647b      	str	r3, [r7, #68]	; 0x44
		tl = lwip_ntohl(ao->dnsaddr[d]);
 80115fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	3302      	adds	r3, #2
 8011604:	009b      	lsls	r3, r3, #2
 8011606:	4413      	add	r3, r2
 8011608:	685b      	ldr	r3, [r3, #4]
 801160a:	4618      	mov	r0, r3
 801160c:	f7f1 fe8d 	bl	800332a <lwip_htonl>
 8011610:	6238      	str	r0, [r7, #32]
		PUTLONG(tl, p);
 8011612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011614:	1c5a      	adds	r2, r3, #1
 8011616:	647a      	str	r2, [r7, #68]	; 0x44
 8011618:	6a3a      	ldr	r2, [r7, #32]
 801161a:	0e12      	lsrs	r2, r2, #24
 801161c:	b2d2      	uxtb	r2, r2
 801161e:	701a      	strb	r2, [r3, #0]
 8011620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011622:	1c5a      	adds	r2, r3, #1
 8011624:	647a      	str	r2, [r7, #68]	; 0x44
 8011626:	6a3a      	ldr	r2, [r7, #32]
 8011628:	0c12      	lsrs	r2, r2, #16
 801162a:	b2d2      	uxtb	r2, r2
 801162c:	701a      	strb	r2, [r3, #0]
 801162e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011630:	1c5a      	adds	r2, r3, #1
 8011632:	647a      	str	r2, [r7, #68]	; 0x44
 8011634:	6a3a      	ldr	r2, [r7, #32]
 8011636:	0a12      	lsrs	r2, r2, #8
 8011638:	b2d2      	uxtb	r2, r2
 801163a:	701a      	strb	r2, [r3, #0]
 801163c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801163e:	1c5a      	adds	r2, r3, #1
 8011640:	647a      	str	r2, [r7, #68]	; 0x44
 8011642:	6a3a      	ldr	r2, [r7, #32]
 8011644:	b2d2      	uxtb	r2, r2
 8011646:	701a      	strb	r2, [r3, #0]
		orc = CONFNAK;
 8011648:	2303      	movs	r3, #3
 801164a:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            break;
 801164c:	e002      	b.n	8011654 <ipcp_reqci+0x4bc>
	    }
	    break;
#endif /* VJ_SUPPORT */

	default:
	    orc = CONFREJ;
 801164e:	2304      	movs	r3, #4
 8011650:	64bb      	str	r3, [r7, #72]	; 0x48
	    break;
 8011652:	e000      	b.n	8011656 <ipcp_reqci+0x4be>
            break;
 8011654:	bf00      	nop
	}
endswitch:
	if (orc == CONFACK &&		/* Good CI */
 8011656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011658:	2b02      	cmp	r3, #2
 801165a:	d103      	bne.n	8011664 <ipcp_reqci+0x4cc>
 801165c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801165e:	2b02      	cmp	r3, #2
 8011660:	d000      	beq.n	8011664 <ipcp_reqci+0x4cc>
	    rc != CONFACK)		/*  but prior CI wasn't? */
	    continue;			/* Don't send this one */
 8011662:	e02d      	b.n	80116c0 <ipcp_reqci+0x528>

	if (orc == CONFNAK) {		/* Nak this CI? */
 8011664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011666:	2b03      	cmp	r3, #3
 8011668:	d110      	bne.n	801168c <ipcp_reqci+0x4f4>
	    if (reject_if_disagree)	/* Getting fed up with sending NAKs? */
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d002      	beq.n	8011676 <ipcp_reqci+0x4de>
		orc = CONFREJ;		/* Get tough if so */
 8011670:	2304      	movs	r3, #4
 8011672:	64bb      	str	r3, [r7, #72]	; 0x48
 8011674:	e00a      	b.n	801168c <ipcp_reqci+0x4f4>
	    else {
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 8011676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011678:	2b04      	cmp	r3, #4
 801167a:	d100      	bne.n	801167e <ipcp_reqci+0x4e6>
		    continue;		/* Don't send this one */
 801167c:	e020      	b.n	80116c0 <ipcp_reqci+0x528>
		if (rc == CONFACK) {	/* Ack'd all prior CIs? */
 801167e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011680:	2b02      	cmp	r3, #2
 8011682:	d103      	bne.n	801168c <ipcp_reqci+0x4f4>
		    rc = CONFNAK;	/* Not anymore... */
 8011684:	2303      	movs	r3, #3
 8011686:	64fb      	str	r3, [r7, #76]	; 0x4c
		    ucp = inp;		/* Backup */
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	643b      	str	r3, [r7, #64]	; 0x40
		}
	    }
	}

	if (orc == CONFREJ &&		/* Reject this CI */
 801168c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801168e:	2b04      	cmp	r3, #4
 8011690:	d106      	bne.n	80116a0 <ipcp_reqci+0x508>
 8011692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011694:	2b04      	cmp	r3, #4
 8011696:	d003      	beq.n	80116a0 <ipcp_reqci+0x508>
	    rc != CONFREJ) {		/*  but no prior ones? */
	    rc = CONFREJ;
 8011698:	2304      	movs	r3, #4
 801169a:	64fb      	str	r3, [r7, #76]	; 0x4c
	    ucp = inp;			/* Backup */
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	643b      	str	r3, [r7, #64]	; 0x40
	}

	/* Need to move CI? */
	if (ucp != cip)
 80116a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80116a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d006      	beq.n	80116b6 <ipcp_reqci+0x51e>
	    MEMCPY(ucp, cip, cilen);	/* Move it */
 80116a8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80116ac:	461a      	mov	r2, r3
 80116ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80116b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80116b2:	f006 fde1 	bl	8018278 <memcpy>

	/* Update output pointer */
	INCPTR(cilen, ucp);
 80116b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80116ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80116bc:	4413      	add	r3, r2
 80116be:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 80116c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	f47f ad8d 	bne.w	80111e2 <ipcp_reqci+0x4a>
     * their address, and they didn't send their address, then we
     * send a NAK with a CI_ADDR option appended.  We assume the
     * input buffer is long enough that we can append the extra
     * option safely.
     */
    if (rc != CONFREJ && !ho->neg_addr && !ho->old_addrs &&
 80116c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116ca:	2b04      	cmp	r3, #4
 80116cc:	d055      	beq.n	801177a <ipcp_reqci+0x5e2>
 80116ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d0:	781b      	ldrb	r3, [r3, #0]
 80116d2:	f003 0301 	and.w	r3, r3, #1
 80116d6:	b2db      	uxtb	r3, r3
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d14e      	bne.n	801177a <ipcp_reqci+0x5e2>
 80116dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116de:	781b      	ldrb	r3, [r3, #0]
 80116e0:	f003 0302 	and.w	r3, r3, #2
 80116e4:	b2db      	uxtb	r3, r3
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d147      	bne.n	801177a <ipcp_reqci+0x5e2>
 80116ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116ec:	781b      	ldrb	r3, [r3, #0]
 80116ee:	f003 0304 	and.w	r3, r3, #4
 80116f2:	b2db      	uxtb	r3, r3
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d040      	beq.n	801177a <ipcp_reqci+0x5e2>
	wo->req_addr && !reject_if_disagree && !pcb->settings.noremoteip) {
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d13d      	bne.n	801177a <ipcp_reqci+0x5e2>
 80116fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011700:	781b      	ldrb	r3, [r3, #0]
 8011702:	f003 0310 	and.w	r3, r3, #16
 8011706:	b2db      	uxtb	r3, r3
 8011708:	2b00      	cmp	r3, #0
 801170a:	d136      	bne.n	801177a <ipcp_reqci+0x5e2>
	if (rc == CONFACK) {
 801170c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801170e:	2b02      	cmp	r3, #2
 8011710:	d108      	bne.n	8011724 <ipcp_reqci+0x58c>
	    rc = CONFNAK;
 8011712:	2303      	movs	r3, #3
 8011714:	64fb      	str	r3, [r7, #76]	; 0x4c
	    ucp = inp;			/* reset pointer */
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	643b      	str	r3, [r7, #64]	; 0x40
	    wo->req_addr = 0;		/* don't ask again */
 801171a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801171c:	7813      	ldrb	r3, [r2, #0]
 801171e:	f36f 0382 	bfc	r3, #2, #1
 8011722:	7013      	strb	r3, [r2, #0]
	}
	PUTCHAR(CI_ADDR, ucp);
 8011724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011726:	1c5a      	adds	r2, r3, #1
 8011728:	643a      	str	r2, [r7, #64]	; 0x40
 801172a:	2203      	movs	r2, #3
 801172c:	701a      	strb	r2, [r3, #0]
	PUTCHAR(CILEN_ADDR, ucp);
 801172e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011730:	1c5a      	adds	r2, r3, #1
 8011732:	643a      	str	r2, [r7, #64]	; 0x40
 8011734:	2206      	movs	r2, #6
 8011736:	701a      	strb	r2, [r3, #0]
	tl = lwip_ntohl(wo->hisaddr);
 8011738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801173a:	689b      	ldr	r3, [r3, #8]
 801173c:	4618      	mov	r0, r3
 801173e:	f7f1 fdf4 	bl	800332a <lwip_htonl>
 8011742:	6238      	str	r0, [r7, #32]
	PUTLONG(tl, ucp);
 8011744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011746:	1c5a      	adds	r2, r3, #1
 8011748:	643a      	str	r2, [r7, #64]	; 0x40
 801174a:	6a3a      	ldr	r2, [r7, #32]
 801174c:	0e12      	lsrs	r2, r2, #24
 801174e:	b2d2      	uxtb	r2, r2
 8011750:	701a      	strb	r2, [r3, #0]
 8011752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011754:	1c5a      	adds	r2, r3, #1
 8011756:	643a      	str	r2, [r7, #64]	; 0x40
 8011758:	6a3a      	ldr	r2, [r7, #32]
 801175a:	0c12      	lsrs	r2, r2, #16
 801175c:	b2d2      	uxtb	r2, r2
 801175e:	701a      	strb	r2, [r3, #0]
 8011760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011762:	1c5a      	adds	r2, r3, #1
 8011764:	643a      	str	r2, [r7, #64]	; 0x40
 8011766:	6a3a      	ldr	r2, [r7, #32]
 8011768:	0a12      	lsrs	r2, r2, #8
 801176a:	b2d2      	uxtb	r2, r2
 801176c:	701a      	strb	r2, [r3, #0]
 801176e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011770:	1c5a      	adds	r2, r3, #1
 8011772:	643a      	str	r2, [r7, #64]	; 0x40
 8011774:	6a3a      	ldr	r2, [r7, #32]
 8011776:	b2d2      	uxtb	r2, r2
 8011778:	701a      	strb	r2, [r3, #0]
    }

    *len = ucp - inp;			/* Compute output length */
 801177a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801177c:	68bb      	ldr	r3, [r7, #8]
 801177e:	1ad2      	subs	r2, r2, r3
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	601a      	str	r2, [r3, #0]
    IPCPDEBUG(("ipcp: returning Configure-%s", CODENAME(rc)));
    return (rc);			/* Return final code */
 8011784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8011786:	4618      	mov	r0, r3
 8011788:	3758      	adds	r7, #88	; 0x58
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
	...

08011790 <ipcp_up>:
/*
 * ipcp_up - IPCP has come UP.
 *
 * Configure the IP network interface appropriately and bring it up.
 */
static void ipcp_up(fsm *f) {
 8011790:	b580      	push	{r7, lr}
 8011792:	b088      	sub	sp, #32
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	61fb      	str	r3, [r7, #28]
    u32_t mask;
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 801179e:	69fb      	ldr	r3, [r7, #28]
 80117a0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80117a4:	61bb      	str	r3, [r7, #24]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 80117a6:	69fb      	ldr	r3, [r7, #28]
 80117a8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80117ac:	617b      	str	r3, [r7, #20]
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 80117ae:	69fb      	ldr	r3, [r7, #28]
 80117b0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80117b4:	613b      	str	r3, [r7, #16]
    IPCPDEBUG(("ipcp: up"));

    /*
     * We must have a non-zero IP address for both ends of the link.
     */
    if (!ho->neg_addr && !ho->old_addrs)
 80117b6:	69bb      	ldr	r3, [r7, #24]
 80117b8:	781b      	ldrb	r3, [r3, #0]
 80117ba:	f003 0301 	and.w	r3, r3, #1
 80117be:	b2db      	uxtb	r3, r3
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d10a      	bne.n	80117da <ipcp_up+0x4a>
 80117c4:	69bb      	ldr	r3, [r7, #24]
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	f003 0302 	and.w	r3, r3, #2
 80117cc:	b2db      	uxtb	r3, r3
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d103      	bne.n	80117da <ipcp_up+0x4a>
	ho->hisaddr = wo->hisaddr;
 80117d2:	693b      	ldr	r3, [r7, #16]
 80117d4:	689a      	ldr	r2, [r3, #8]
 80117d6:	69bb      	ldr	r3, [r7, #24]
 80117d8:	609a      	str	r2, [r3, #8]

    if (!(go->neg_addr || go->old_addrs) && (wo->neg_addr || wo->old_addrs)
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	781b      	ldrb	r3, [r3, #0]
 80117de:	f003 0301 	and.w	r3, r3, #1
 80117e2:	b2db      	uxtb	r3, r3
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d122      	bne.n	801182e <ipcp_up+0x9e>
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	781b      	ldrb	r3, [r3, #0]
 80117ec:	f003 0302 	and.w	r3, r3, #2
 80117f0:	b2db      	uxtb	r3, r3
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d11b      	bne.n	801182e <ipcp_up+0x9e>
 80117f6:	693b      	ldr	r3, [r7, #16]
 80117f8:	781b      	ldrb	r3, [r3, #0]
 80117fa:	f003 0301 	and.w	r3, r3, #1
 80117fe:	b2db      	uxtb	r3, r3
 8011800:	2b00      	cmp	r3, #0
 8011802:	d106      	bne.n	8011812 <ipcp_up+0x82>
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	781b      	ldrb	r3, [r3, #0]
 8011808:	f003 0302 	and.w	r3, r3, #2
 801180c:	b2db      	uxtb	r3, r3
 801180e:	2b00      	cmp	r3, #0
 8011810:	d00d      	beq.n	801182e <ipcp_up+0x9e>
	&& wo->ouraddr != 0) {
 8011812:	693b      	ldr	r3, [r7, #16]
 8011814:	685b      	ldr	r3, [r3, #4]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d009      	beq.n	801182e <ipcp_up+0x9e>
	ppp_error(("Peer refused to agree to our IP address"));
 801181a:	4870      	ldr	r0, [pc, #448]	; (80119dc <ipcp_up+0x24c>)
 801181c:	f005 ff86 	bl	801772c <ppp_error_impl>
	ipcp_close(f->pcb, "Refused our IP address");
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	496e      	ldr	r1, [pc, #440]	; (80119e0 <ipcp_up+0x250>)
 8011826:	4618      	mov	r0, r3
 8011828:	f7fe fb64 	bl	800fef4 <ipcp_close>
	return;
 801182c:	e0d2      	b.n	80119d4 <ipcp_up+0x244>
    }
    if (go->ouraddr == 0) {
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	685b      	ldr	r3, [r3, #4]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d109      	bne.n	801184a <ipcp_up+0xba>
	ppp_error(("Could not determine local IP address"));
 8011836:	486b      	ldr	r0, [pc, #428]	; (80119e4 <ipcp_up+0x254>)
 8011838:	f005 ff78 	bl	801772c <ppp_error_impl>
	ipcp_close(f->pcb, "Could not determine local IP address");
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4968      	ldr	r1, [pc, #416]	; (80119e4 <ipcp_up+0x254>)
 8011842:	4618      	mov	r0, r3
 8011844:	f7fe fb56 	bl	800fef4 <ipcp_close>
	return;
 8011848:	e0c4      	b.n	80119d4 <ipcp_up+0x244>
    }
    if (ho->hisaddr == 0 && !pcb->settings.noremoteip) {
 801184a:	69bb      	ldr	r3, [r7, #24]
 801184c:	689b      	ldr	r3, [r3, #8]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d112      	bne.n	8011878 <ipcp_up+0xe8>
 8011852:	69fb      	ldr	r3, [r7, #28]
 8011854:	781b      	ldrb	r3, [r3, #0]
 8011856:	f003 0310 	and.w	r3, r3, #16
 801185a:	b2db      	uxtb	r3, r3
 801185c:	2b00      	cmp	r3, #0
 801185e:	d10b      	bne.n	8011878 <ipcp_up+0xe8>
	ho->hisaddr = lwip_htonl(0x0a404040);
 8011860:	4861      	ldr	r0, [pc, #388]	; (80119e8 <ipcp_up+0x258>)
 8011862:	f7f1 fd62 	bl	800332a <lwip_htonl>
 8011866:	4602      	mov	r2, r0
 8011868:	69bb      	ldr	r3, [r7, #24]
 801186a:	609a      	str	r2, [r3, #8]
	ppp_warn(("Could not determine remote IP address: defaulting to %I",
 801186c:	69bb      	ldr	r3, [r7, #24]
 801186e:	689b      	ldr	r3, [r3, #8]
 8011870:	4619      	mov	r1, r3
 8011872:	485e      	ldr	r0, [pc, #376]	; (80119ec <ipcp_up+0x25c>)
 8011874:	f005 ff6d 	bl	8017752 <ppp_warn_impl>
    if (ho->hisaddr != 0)
	script_setenv("IPREMOTE", ip_ntoa(ho->hisaddr), 1);
#endif /* UNUSED */

#if LWIP_DNS
    if (!go->req_dns1)
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	781b      	ldrb	r3, [r3, #0]
 801187c:	f003 0320 	and.w	r3, r3, #32
 8011880:	b2db      	uxtb	r3, r3
 8011882:	2b00      	cmp	r3, #0
 8011884:	d102      	bne.n	801188c <ipcp_up+0xfc>
	    go->dnsaddr[0] = 0;
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	2200      	movs	r2, #0
 801188a:	60da      	str	r2, [r3, #12]
    if (!go->req_dns2)
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	781b      	ldrb	r3, [r3, #0]
 8011890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011894:	b2db      	uxtb	r3, r3
 8011896:	2b00      	cmp	r3, #0
 8011898:	d102      	bne.n	80118a0 <ipcp_up+0x110>
	    go->dnsaddr[1] = 0;
 801189a:	697b      	ldr	r3, [r7, #20]
 801189c:	2200      	movs	r2, #0
 801189e:	611a      	str	r2, [r3, #16]
    if (go->dnsaddr[0])
	script_setenv("DNS1", ip_ntoa(go->dnsaddr[0]), 0);
    if (go->dnsaddr[1])
	script_setenv("DNS2", ip_ntoa(go->dnsaddr[1]), 0);
#endif /* UNUSED */
    if (pcb->settings.usepeerdns && (go->dnsaddr[0] || go->dnsaddr[1])) {
 80118a0:	69fb      	ldr	r3, [r7, #28]
 80118a2:	781b      	ldrb	r3, [r3, #0]
 80118a4:	f003 0304 	and.w	r3, r3, #4
 80118a8:	b2db      	uxtb	r3, r3
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d00f      	beq.n	80118ce <ipcp_up+0x13e>
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	68db      	ldr	r3, [r3, #12]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d103      	bne.n	80118be <ipcp_up+0x12e>
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	691b      	ldr	r3, [r3, #16]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d007      	beq.n	80118ce <ipcp_up+0x13e>
	sdns(pcb, go->dnsaddr[0], go->dnsaddr[1]);
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	68d9      	ldr	r1, [r3, #12]
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	691b      	ldr	r3, [r3, #16]
 80118c6:	461a      	mov	r2, r3
 80118c8:	69f8      	ldr	r0, [r7, #28]
 80118ca:	f004 f973 	bl	8015bb4 <sdns>
#endif /* LWIP_DNS */

    /*
     * Check that the peer is allowed to use the IP address it wants.
     */
    if (ho->hisaddr != 0) {
 80118ce:	69bb      	ldr	r3, [r7, #24]
 80118d0:	689b      	ldr	r3, [r3, #8]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d020      	beq.n	8011918 <ipcp_up+0x188>
	u32_t addr = lwip_ntohl(ho->hisaddr);
 80118d6:	69bb      	ldr	r3, [r7, #24]
 80118d8:	689b      	ldr	r3, [r3, #8]
 80118da:	4618      	mov	r0, r3
 80118dc:	f7f1 fd25 	bl	800332a <lwip_htonl>
 80118e0:	60f8      	str	r0, [r7, #12]
	if ((addr >> IP_CLASSA_NSHIFT) == IP_LOOPBACKNET
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	0e1b      	lsrs	r3, r3, #24
 80118e6:	2b7f      	cmp	r3, #127	; 0x7f
 80118e8:	d00b      	beq.n	8011902 <ipcp_up+0x172>
	    || IP_MULTICAST(addr) || IP_BADCLASS(addr)
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80118f0:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80118f4:	d005      	beq.n	8011902 <ipcp_up+0x172>
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80118fc:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 8011900:	d10a      	bne.n	8011918 <ipcp_up+0x188>
	     */
#if PPP_SERVER && PPP_AUTH_SUPPORT
	    || (pcb->settings.auth_required && wo->hisaddr != ho->hisaddr)
#endif /* PPP_SERVER && PPP_AUTH_SUPPORT */
	    ) {
		ppp_error(("Peer is not authorized to use remote address %I", ho->hisaddr));
 8011902:	69bb      	ldr	r3, [r7, #24]
 8011904:	689b      	ldr	r3, [r3, #8]
 8011906:	4619      	mov	r1, r3
 8011908:	4839      	ldr	r0, [pc, #228]	; (80119f0 <ipcp_up+0x260>)
 801190a:	f005 ff0f 	bl	801772c <ppp_error_impl>
		ipcp_close(pcb, "Unauthorized remote IP address");
 801190e:	4939      	ldr	r1, [pc, #228]	; (80119f4 <ipcp_up+0x264>)
 8011910:	69f8      	ldr	r0, [r7, #28]
 8011912:	f7fe faef 	bl	800fef4 <ipcp_close>
		return;
 8011916:	e05d      	b.n	80119d4 <ipcp_up+0x244>
#endif /* DEMAND_SUPPORT */
    {
	/*
	 * Set IP addresses and (if specified) netmask.
	 */
	mask = get_mask(go->ouraddr);
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	4618      	mov	r0, r3
 801191e:	f004 f9e7 	bl	8015cf0 <get_mask>
 8011922:	60b8      	str	r0, [r7, #8]

#if !(defined(SVR4) && (defined(SNI) || defined(__USLC__)))
	if (!sifaddr(pcb, go->ouraddr, ho->hisaddr, mask)) {
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	6859      	ldr	r1, [r3, #4]
 8011928:	69bb      	ldr	r3, [r7, #24]
 801192a:	689a      	ldr	r2, [r3, #8]
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	69f8      	ldr	r0, [r7, #28]
 8011930:	f004 f90e 	bl	8015b50 <sifaddr>
 8011934:	4603      	mov	r3, r0
 8011936:	2b00      	cmp	r3, #0
 8011938:	d109      	bne.n	801194e <ipcp_up+0x1be>
#if PPP_DEBUG
	    ppp_warn(("Interface configuration failed"));
 801193a:	482f      	ldr	r0, [pc, #188]	; (80119f8 <ipcp_up+0x268>)
 801193c:	f005 ff09 	bl	8017752 <ppp_warn_impl>
#endif /* PPP_DEBUG */
	    ipcp_close(f->pcb, "Interface configuration failed");
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	492c      	ldr	r1, [pc, #176]	; (80119f8 <ipcp_up+0x268>)
 8011946:	4618      	mov	r0, r3
 8011948:	f7fe fad4 	bl	800fef4 <ipcp_close>
	    return;
 801194c:	e042      	b.n	80119d4 <ipcp_up+0x244>
	}
#endif

	/* bring the interface up for IP */
	if (!sifup(pcb)) {
 801194e:	69f8      	ldr	r0, [r7, #28]
 8011950:	f004 f978 	bl	8015c44 <sifup>
 8011954:	4603      	mov	r3, r0
 8011956:	2b00      	cmp	r3, #0
 8011958:	d109      	bne.n	801196e <ipcp_up+0x1de>
#if PPP_DEBUG
	    ppp_warn(("Interface failed to come up"));
 801195a:	4828      	ldr	r0, [pc, #160]	; (80119fc <ipcp_up+0x26c>)
 801195c:	f005 fef9 	bl	8017752 <ppp_warn_impl>
#endif /* PPP_DEBUG */
	    ipcp_close(f->pcb, "Interface configuration failed");
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	4924      	ldr	r1, [pc, #144]	; (80119f8 <ipcp_up+0x268>)
 8011966:	4618      	mov	r0, r3
 8011968:	f7fe fac4 	bl	800fef4 <ipcp_close>
	    return;
 801196c:	e032      	b.n	80119d4 <ipcp_up+0x244>
	if (ho->hisaddr != 0 && wo->proxy_arp)
	    if (sifproxyarp(pcb, ho->hisaddr))
		pcb->proxy_arp_set = 1;
#endif /* UNUSED - PROXY ARP */

	wo->ouraddr = go->ouraddr;
 801196e:	697b      	ldr	r3, [r7, #20]
 8011970:	685a      	ldr	r2, [r3, #4]
 8011972:	693b      	ldr	r3, [r7, #16]
 8011974:	605a      	str	r2, [r3, #4]

	ppp_notice(("local  IP address %I", go->ouraddr));
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	685b      	ldr	r3, [r3, #4]
 801197a:	4619      	mov	r1, r3
 801197c:	4820      	ldr	r0, [pc, #128]	; (8011a00 <ipcp_up+0x270>)
 801197e:	f005 fefb 	bl	8017778 <ppp_notice_impl>
	if (ho->hisaddr != 0)
 8011982:	69bb      	ldr	r3, [r7, #24]
 8011984:	689b      	ldr	r3, [r3, #8]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d005      	beq.n	8011996 <ipcp_up+0x206>
	    ppp_notice(("remote IP address %I", ho->hisaddr));
 801198a:	69bb      	ldr	r3, [r7, #24]
 801198c:	689b      	ldr	r3, [r3, #8]
 801198e:	4619      	mov	r1, r3
 8011990:	481c      	ldr	r0, [pc, #112]	; (8011a04 <ipcp_up+0x274>)
 8011992:	f005 fef1 	bl	8017778 <ppp_notice_impl>
#if LWIP_DNS
	if (go->dnsaddr[0])
 8011996:	697b      	ldr	r3, [r7, #20]
 8011998:	68db      	ldr	r3, [r3, #12]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d005      	beq.n	80119aa <ipcp_up+0x21a>
	    ppp_notice(("primary   DNS address %I", go->dnsaddr[0]));
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	68db      	ldr	r3, [r3, #12]
 80119a2:	4619      	mov	r1, r3
 80119a4:	4818      	ldr	r0, [pc, #96]	; (8011a08 <ipcp_up+0x278>)
 80119a6:	f005 fee7 	bl	8017778 <ppp_notice_impl>
	if (go->dnsaddr[1])
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	691b      	ldr	r3, [r3, #16]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d005      	beq.n	80119be <ipcp_up+0x22e>
	    ppp_notice(("secondary DNS address %I", go->dnsaddr[1]));
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	691b      	ldr	r3, [r3, #16]
 80119b6:	4619      	mov	r1, r3
 80119b8:	4814      	ldr	r0, [pc, #80]	; (8011a0c <ipcp_up+0x27c>)
 80119ba:	f005 fedd 	bl	8017778 <ppp_notice_impl>

#if PPP_STATS_SUPPORT
    reset_link_stats(f->unit);
#endif /* PPP_STATS_SUPPORT */

    np_up(pcb, PPP_IP);
 80119be:	2121      	movs	r1, #33	; 0x21
 80119c0:	69f8      	ldr	r0, [r7, #28]
 80119c2:	f7fc ff43 	bl	800e84c <np_up>
    pcb->ipcp_is_up = 1;
 80119c6:	69fa      	ldr	r2, [r7, #28]
 80119c8:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 80119cc:	f043 0304 	orr.w	r3, r3, #4
 80119d0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
#endif /* PPP_NOTIFY */
#if 0 /* UNUSED */
    if (ip_up_hook)
	ip_up_hook();
#endif /* UNUSED */
}
 80119d4:	3720      	adds	r7, #32
 80119d6:	46bd      	mov	sp, r7
 80119d8:	bd80      	pop	{r7, pc}
 80119da:	bf00      	nop
 80119dc:	0801cd88 	.word	0x0801cd88
 80119e0:	0801cdb0 	.word	0x0801cdb0
 80119e4:	0801cdc8 	.word	0x0801cdc8
 80119e8:	0a404040 	.word	0x0a404040
 80119ec:	0801cdf0 	.word	0x0801cdf0
 80119f0:	0801ce28 	.word	0x0801ce28
 80119f4:	0801ce58 	.word	0x0801ce58
 80119f8:	0801ce78 	.word	0x0801ce78
 80119fc:	0801ce98 	.word	0x0801ce98
 8011a00:	0801ceb4 	.word	0x0801ceb4
 8011a04:	0801cecc 	.word	0x0801cecc
 8011a08:	0801cee4 	.word	0x0801cee4
 8011a0c:	0801cf00 	.word	0x0801cf00

08011a10 <ipcp_down>:
 * ipcp_down - IPCP has gone DOWN.
 *
 * Take the IP network interface down, clear its addresses
 * and delete routes through it.
 */
static void ipcp_down(fsm *f) {
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b086      	sub	sp, #24
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	617b      	str	r3, [r7, #20]
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 8011a1e:	697b      	ldr	r3, [r7, #20]
 8011a20:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011a24:	613b      	str	r3, [r7, #16]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8011a2c:	60fb      	str	r3, [r7, #12]
#endif /* PPP_NOTIFY */
#if 0 /* UNUSED */
    if (ip_down_hook)
	ip_down_hook();
#endif /* UNUSED */
    if (pcb->ipcp_is_up) {
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011a34:	f003 0304 	and.w	r3, r3, #4
 8011a38:	b2db      	uxtb	r3, r3
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d00a      	beq.n	8011a54 <ipcp_down+0x44>
	pcb->ipcp_is_up = 0;
 8011a3e:	697a      	ldr	r2, [r7, #20]
 8011a40:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8011a44:	f36f 0382 	bfc	r3, #2, #1
 8011a48:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	np_down(pcb, PPP_IP);
 8011a4c:	2121      	movs	r1, #33	; 0x21
 8011a4e:	6978      	ldr	r0, [r7, #20]
 8011a50:	f7fc ff16 	bl	800e880 <np_down>
#endif /* DEMAND_SUPPORT */
    {
#if DEMAND_SUPPORT
	sifnpmode(pcb, PPP_IP, NPMODE_DROP);
#endif /* DEMAND_SUPPORT */
	sifdown(pcb);
 8011a54:	6978      	ldr	r0, [r7, #20]
 8011a56:	f004 f927 	bl	8015ca8 <sifdown>
	ipcp_clear_addrs(pcb, go->ouraddr,
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	6859      	ldr	r1, [r3, #4]
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	689a      	ldr	r2, [r3, #8]
 8011a62:	2300      	movs	r3, #0
 8011a64:	6978      	ldr	r0, [r7, #20]
 8011a66:	f000 f80c 	bl	8011a82 <ipcp_clear_addrs>
			 ho->hisaddr, 0);
#if LWIP_DNS
	cdns(pcb, go->dnsaddr[0], go->dnsaddr[1]);
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	68d9      	ldr	r1, [r3, #12]
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	691b      	ldr	r3, [r3, #16]
 8011a72:	461a      	mov	r2, r3
 8011a74:	6978      	ldr	r0, [r7, #20]
 8011a76:	f004 f8b9 	bl	8015bec <cdns>
#endif /* LWIP_DNS */
    }
}
 8011a7a:	bf00      	nop
 8011a7c:	3718      	adds	r7, #24
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}

08011a82 <ipcp_clear_addrs>:

/*
 * ipcp_clear_addrs() - clear the interface addresses, routes,
 * proxy arp entries, etc.
 */
static void ipcp_clear_addrs(ppp_pcb *pcb, u32_t ouraddr, u32_t hisaddr, u8_t replacedefaultroute) {
 8011a82:	b580      	push	{r7, lr}
 8011a84:	b084      	sub	sp, #16
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	60f8      	str	r0, [r7, #12]
 8011a8a:	60b9      	str	r1, [r7, #8]
 8011a8c:	607a      	str	r2, [r7, #4]
 8011a8e:	70fb      	strb	r3, [r7, #3]
    if (!replacedefaultroute && pcb->default_route_set) {
	cifdefaultroute(pcb, ouraddr, hisaddr);
	pcb->default_route_set = 0;
    }
#endif /* UNUSED */
    cifaddr(pcb, ouraddr, hisaddr);
 8011a90:	687a      	ldr	r2, [r7, #4]
 8011a92:	68b9      	ldr	r1, [r7, #8]
 8011a94:	68f8      	ldr	r0, [r7, #12]
 8011a96:	f004 f877 	bl	8015b88 <cifaddr>
}
 8011a9a:	bf00      	nop
 8011a9c:	3710      	adds	r7, #16
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}

08011aa2 <ipcp_finished>:


/*
 * ipcp_finished - possibly shut down the lower layers.
 */
static void ipcp_finished(fsm *f) {
 8011aa2:	b580      	push	{r7, lr}
 8011aa4:	b084      	sub	sp, #16
 8011aa6:	af00      	add	r7, sp, #0
 8011aa8:	6078      	str	r0, [r7, #4]
	ppp_pcb *pcb = f->pcb;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	60fb      	str	r3, [r7, #12]
	if (pcb->ipcp_is_open) {
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011ab6:	f003 0302 	and.w	r3, r3, #2
 8011aba:	b2db      	uxtb	r3, r3
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d00a      	beq.n	8011ad6 <ipcp_finished+0x34>
		pcb->ipcp_is_open = 0;
 8011ac0:	68fa      	ldr	r2, [r7, #12]
 8011ac2:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8011ac6:	f36f 0341 	bfc	r3, #1, #1
 8011aca:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		np_finished(pcb, PPP_IP);
 8011ace:	2121      	movs	r1, #33	; 0x21
 8011ad0:	68f8      	ldr	r0, [r7, #12]
 8011ad2:	f7fc feef 	bl	800e8b4 <np_finished>
	}
}
 8011ad6:	bf00      	nop
 8011ad8:	3710      	adds	r7, #16
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}
	...

08011ae0 <lcp_init>:
#endif /* HAVE_MULTILINK */

/*
 * lcp_init - Initialize LCP.
 */
static void lcp_init(ppp_pcb *pcb) {
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b086      	sub	sp, #24
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	3390      	adds	r3, #144	; 0x90
 8011aec:	617b      	str	r3, [r7, #20]
    lcp_options *wo = &pcb->lcp_wantoptions;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	33ac      	adds	r3, #172	; 0xac
 8011af2:	613b      	str	r3, [r7, #16]
    lcp_options *ao = &pcb->lcp_allowoptions;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	33fc      	adds	r3, #252	; 0xfc
 8011af8:	60fb      	str	r3, [r7, #12]

    f->pcb = pcb;
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	687a      	ldr	r2, [r7, #4]
 8011afe:	601a      	str	r2, [r3, #0]
    f->protocol = PPP_LCP;
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	f24c 0221 	movw	r2, #49185	; 0xc021
 8011b06:	81da      	strh	r2, [r3, #14]
    f->callbacks = &lcp_callbacks;
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	4a2f      	ldr	r2, [pc, #188]	; (8011bc8 <lcp_init+0xe8>)
 8011b0c:	605a      	str	r2, [r3, #4]

    fsm_init(f);
 8011b0e:	6978      	ldr	r0, [r7, #20]
 8011b10:	f7fd fa00 	bl	800ef14 <fsm_init>

    BZERO(wo, sizeof(*wo));
 8011b14:	2228      	movs	r2, #40	; 0x28
 8011b16:	2100      	movs	r1, #0
 8011b18:	6938      	ldr	r0, [r7, #16]
 8011b1a:	f006 fbd2 	bl	80182c2 <memset>
    wo->neg_mru = 1;
 8011b1e:	693a      	ldr	r2, [r7, #16]
 8011b20:	7813      	ldrb	r3, [r2, #0]
 8011b22:	f043 0304 	orr.w	r3, r3, #4
 8011b26:	7013      	strb	r3, [r2, #0]
    wo->mru = PPP_MRU;
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8011b2e:	805a      	strh	r2, [r3, #2]
    wo->neg_asyncmap = 1;
 8011b30:	693a      	ldr	r2, [r7, #16]
 8011b32:	7813      	ldrb	r3, [r2, #0]
 8011b34:	f043 0308 	orr.w	r3, r3, #8
 8011b38:	7013      	strb	r3, [r2, #0]
    wo->neg_magicnumber = 1;
 8011b3a:	693a      	ldr	r2, [r7, #16]
 8011b3c:	7813      	ldrb	r3, [r2, #0]
 8011b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b42:	7013      	strb	r3, [r2, #0]
    wo->neg_pcompression = 1;
 8011b44:	693a      	ldr	r2, [r7, #16]
 8011b46:	7813      	ldrb	r3, [r2, #0]
 8011b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b4c:	7013      	strb	r3, [r2, #0]
    wo->neg_accompression = 1;
 8011b4e:	693a      	ldr	r2, [r7, #16]
 8011b50:	7853      	ldrb	r3, [r2, #1]
 8011b52:	f043 0301 	orr.w	r3, r3, #1
 8011b56:	7053      	strb	r3, [r2, #1]

    BZERO(ao, sizeof(*ao));
 8011b58:	2228      	movs	r2, #40	; 0x28
 8011b5a:	2100      	movs	r1, #0
 8011b5c:	68f8      	ldr	r0, [r7, #12]
 8011b5e:	f006 fbb0 	bl	80182c2 <memset>
    ao->neg_mru = 1;
 8011b62:	68fa      	ldr	r2, [r7, #12]
 8011b64:	7813      	ldrb	r3, [r2, #0]
 8011b66:	f043 0304 	orr.w	r3, r3, #4
 8011b6a:	7013      	strb	r3, [r2, #0]
    ao->mru = PPP_MAXMRU;
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8011b72:	805a      	strh	r2, [r3, #2]
    ao->neg_asyncmap = 1;
 8011b74:	68fa      	ldr	r2, [r7, #12]
 8011b76:	7813      	ldrb	r3, [r2, #0]
 8011b78:	f043 0308 	orr.w	r3, r3, #8
 8011b7c:	7013      	strb	r3, [r2, #0]
#if CHAP_SUPPORT
    ao->neg_chap = 1;
 8011b7e:	68fa      	ldr	r2, [r7, #12]
 8011b80:	7813      	ldrb	r3, [r2, #0]
 8011b82:	f043 0320 	orr.w	r3, r3, #32
 8011b86:	7013      	strb	r3, [r2, #0]
    ao->chap_mdtype = CHAP_MDTYPE_SUPPORTED;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	2204      	movs	r2, #4
 8011b8c:	711a      	strb	r2, [r3, #4]
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    ao->neg_upap = 1;
 8011b8e:	68fa      	ldr	r2, [r7, #12]
 8011b90:	7813      	ldrb	r3, [r2, #0]
 8011b92:	f043 0310 	orr.w	r3, r3, #16
 8011b96:	7013      	strb	r3, [r2, #0]
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
    ao->neg_eap = 1;
#endif /* EAP_SUPPORT */
    ao->neg_magicnumber = 1;
 8011b98:	68fa      	ldr	r2, [r7, #12]
 8011b9a:	7813      	ldrb	r3, [r2, #0]
 8011b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ba0:	7013      	strb	r3, [r2, #0]
    ao->neg_pcompression = 1;
 8011ba2:	68fa      	ldr	r2, [r7, #12]
 8011ba4:	7813      	ldrb	r3, [r2, #0]
 8011ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011baa:	7013      	strb	r3, [r2, #0]
    ao->neg_accompression = 1;
 8011bac:	68fa      	ldr	r2, [r7, #12]
 8011bae:	7853      	ldrb	r3, [r2, #1]
 8011bb0:	f043 0301 	orr.w	r3, r3, #1
 8011bb4:	7053      	strb	r3, [r2, #1]
    ao->neg_endpoint = 1;
 8011bb6:	68fa      	ldr	r2, [r7, #12]
 8011bb8:	7853      	ldrb	r3, [r2, #1]
 8011bba:	f043 0308 	orr.w	r3, r3, #8
 8011bbe:	7053      	strb	r3, [r2, #1]
}
 8011bc0:	bf00      	nop
 8011bc2:	3718      	adds	r7, #24
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}
 8011bc8:	0801dc3c 	.word	0x0801dc3c

08011bcc <lcp_open>:


/*
 * lcp_open - LCP is allowed to come up.
 */
void lcp_open(ppp_pcb *pcb) {
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	3390      	adds	r3, #144	; 0x90
 8011bd8:	60fb      	str	r3, [r7, #12]
    lcp_options *wo = &pcb->lcp_wantoptions;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	33ac      	adds	r3, #172	; 0xac
 8011bde:	60bb      	str	r3, [r7, #8]

    f->flags &= ~(OPT_PASSIVE | OPT_SILENT);
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	7c5b      	ldrb	r3, [r3, #17]
 8011be4:	f023 0305 	bic.w	r3, r3, #5
 8011be8:	b2da      	uxtb	r2, r3
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	745a      	strb	r2, [r3, #17]
    if (wo->passive)
 8011bee:	68bb      	ldr	r3, [r7, #8]
 8011bf0:	781b      	ldrb	r3, [r3, #0]
 8011bf2:	f003 0301 	and.w	r3, r3, #1
 8011bf6:	b2db      	uxtb	r3, r3
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d006      	beq.n	8011c0a <lcp_open+0x3e>
	f->flags |= OPT_PASSIVE;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	7c5b      	ldrb	r3, [r3, #17]
 8011c00:	f043 0301 	orr.w	r3, r3, #1
 8011c04:	b2da      	uxtb	r2, r3
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	745a      	strb	r2, [r3, #17]
    if (wo->silent)
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	781b      	ldrb	r3, [r3, #0]
 8011c0e:	f003 0302 	and.w	r3, r3, #2
 8011c12:	b2db      	uxtb	r3, r3
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d006      	beq.n	8011c26 <lcp_open+0x5a>
	f->flags |= OPT_SILENT;
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	7c5b      	ldrb	r3, [r3, #17]
 8011c1c:	f043 0304 	orr.w	r3, r3, #4
 8011c20:	b2da      	uxtb	r2, r3
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	745a      	strb	r2, [r3, #17]
    fsm_open(f);
 8011c26:	68f8      	ldr	r0, [r7, #12]
 8011c28:	f7fd fa0a 	bl	800f040 <fsm_open>
}
 8011c2c:	bf00      	nop
 8011c2e:	3710      	adds	r7, #16
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}

08011c34 <lcp_close>:


/*
 * lcp_close - Take LCP down.
 */
void lcp_close(ppp_pcb *pcb, const char *reason) {
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b084      	sub	sp, #16
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	6039      	str	r1, [r7, #0]
    fsm *f = &pcb->lcp_fsm;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	3390      	adds	r3, #144	; 0x90
 8011c42:	60fb      	str	r3, [r7, #12]
    int oldstate;

    if (pcb->phase != PPP_PHASE_DEAD
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d003      	beq.n	8011c56 <lcp_close+0x22>
#ifdef HAVE_MULTILINK
    && pcb->phase != PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	new_phase(pcb, PPP_PHASE_TERMINATE);
 8011c4e:	210b      	movs	r1, #11
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f003 ff15 	bl	8015a80 <new_phase>

    if (f->flags & DELAYED_UP) {
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	7c5b      	ldrb	r3, [r3, #17]
 8011c5a:	b25b      	sxtb	r3, r3
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	da06      	bge.n	8011c6e <lcp_close+0x3a>
	UNTIMEOUT(lcp_delayed_up, f);
 8011c60:	68f9      	ldr	r1, [r7, #12]
 8011c62:	4812      	ldr	r0, [pc, #72]	; (8011cac <lcp_close+0x78>)
 8011c64:	f7fb fee4 	bl	800da30 <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	2203      	movs	r2, #3
 8011c6c:	741a      	strb	r2, [r3, #16]
    }
    oldstate = f->state;
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	7c1b      	ldrb	r3, [r3, #16]
 8011c72:	60bb      	str	r3, [r7, #8]

    fsm_close(f, reason);
 8011c74:	6839      	ldr	r1, [r7, #0]
 8011c76:	68f8      	ldr	r0, [r7, #12]
 8011c78:	f7fd faaa 	bl	800f1d0 <fsm_close>
    if (oldstate == PPP_FSM_STOPPED && (f->flags & (OPT_PASSIVE|OPT_SILENT|DELAYED_UP))) {
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	2b03      	cmp	r3, #3
 8011c80:	d10f      	bne.n	8011ca2 <lcp_close+0x6e>
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	7c5b      	ldrb	r3, [r3, #17]
 8011c86:	f003 0385 	and.w	r3, r3, #133	; 0x85
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d009      	beq.n	8011ca2 <lcp_close+0x6e>
	 * but it does mean that the program terminates if you do a
	 * lcp_close() when a connection hasn't been established
	 * because we are in passive/silent mode or because we have
	 * delayed the fsm_lowerup() call and it hasn't happened yet.
	 */
	f->flags &= ~DELAYED_UP;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	7c5b      	ldrb	r3, [r3, #17]
 8011c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c96:	b2da      	uxtb	r2, r3
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	745a      	strb	r2, [r3, #17]
	lcp_finished(f);
 8011c9c:	68f8      	ldr	r0, [r7, #12]
 8011c9e:	f002 f9db 	bl	8014058 <lcp_finished>
    }
}
 8011ca2:	bf00      	nop
 8011ca4:	3710      	adds	r7, #16
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}
 8011caa:	bf00      	nop
 8011cac:	08011db1 	.word	0x08011db1

08011cb0 <lcp_lowerup>:


/*
 * lcp_lowerup - The lower layer is up.
 */
void lcp_lowerup(ppp_pcb *pcb) {
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b086      	sub	sp, #24
 8011cb4:	af02      	add	r7, sp, #8
 8011cb6:	6078      	str	r0, [r7, #4]
    lcp_options *wo = &pcb->lcp_wantoptions;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	33ac      	adds	r3, #172	; 0xac
 8011cbc:	60fb      	str	r3, [r7, #12]
    fsm *f = &pcb->lcp_fsm;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	3390      	adds	r3, #144	; 0x90
 8011cc2:	60bb      	str	r3, [r7, #8]
    /*
     * Don't use A/C or protocol compression on transmission,
     * but accept A/C and protocol compressed packets
     * if we are going to ask for A/C and protocol compression.
     */
    if (ppp_send_config(pcb, PPP_DEFMRU, 0xffffffff, 0, 0) < 0
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	9300      	str	r3, [sp, #0]
 8011cc8:	2300      	movs	r3, #0
 8011cca:	f04f 32ff 	mov.w	r2, #4294967295
 8011cce:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f003 fef0 	bl	8015ab8 <ppp_send_config>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	db3f      	blt.n	8011d5e <lcp_lowerup+0xae>
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	781b      	ldrb	r3, [r3, #0]
 8011ce2:	f003 0320 	and.w	r3, r3, #32
 8011ce6:	b2db      	uxtb	r3, r3
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d001      	beq.n	8011cf0 <lcp_lowerup+0x40>
 8011cec:	2200      	movs	r2, #0
 8011cee:	e001      	b.n	8011cf4 <lcp_lowerup+0x44>
 8011cf0:	f04f 32ff 	mov.w	r2, #4294967295
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	781b      	ldrb	r3, [r3, #0]
 8011cf8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011cfc:	b2db      	uxtb	r3, r3
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 8011cfe:	4619      	mov	r1, r3
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	785b      	ldrb	r3, [r3, #1]
 8011d04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8011d08:	b2db      	uxtb	r3, r3
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 8011d0a:	9300      	str	r3, [sp, #0]
 8011d0c:	460b      	mov	r3, r1
 8011d0e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f003 fef6 	bl	8015b04 <ppp_recv_config>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	db1f      	blt.n	8011d5e <lcp_lowerup+0xae>
	    return;
    pcb->peer_mru = PPP_DEFMRU;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8011d24:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c

    if (pcb->settings.listen_time != 0) {
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	885b      	ldrh	r3, [r3, #2]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d012      	beq.n	8011d56 <lcp_lowerup+0xa6>
	f->flags |= DELAYED_UP;
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	7c5b      	ldrb	r3, [r3, #17]
 8011d34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011d38:	b2da      	uxtb	r2, r3
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	745a      	strb	r2, [r3, #17]
	TIMEOUTMS(lcp_delayed_up, f, pcb->settings.listen_time);
 8011d3e:	68b9      	ldr	r1, [r7, #8]
 8011d40:	4809      	ldr	r0, [pc, #36]	; (8011d68 <lcp_lowerup+0xb8>)
 8011d42:	f7fb fe75 	bl	800da30 <sys_untimeout>
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	885b      	ldrh	r3, [r3, #2]
 8011d4a:	68ba      	ldr	r2, [r7, #8]
 8011d4c:	4906      	ldr	r1, [pc, #24]	; (8011d68 <lcp_lowerup+0xb8>)
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7fb fe42 	bl	800d9d8 <sys_timeout>
 8011d54:	e004      	b.n	8011d60 <lcp_lowerup+0xb0>
    } else
	fsm_lowerup(f);
 8011d56:	68b8      	ldr	r0, [r7, #8]
 8011d58:	f7fd f8f9 	bl	800ef4e <fsm_lowerup>
 8011d5c:	e000      	b.n	8011d60 <lcp_lowerup+0xb0>
	    return;
 8011d5e:	bf00      	nop
}
 8011d60:	3710      	adds	r7, #16
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}
 8011d66:	bf00      	nop
 8011d68:	08011db1 	.word	0x08011db1

08011d6c <lcp_lowerdown>:


/*
 * lcp_lowerdown - The lower layer is down.
 */
void lcp_lowerdown(ppp_pcb *pcb) {
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b084      	sub	sp, #16
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	3390      	adds	r3, #144	; 0x90
 8011d78:	60fb      	str	r3, [r7, #12]

    if (f->flags & DELAYED_UP) {
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	7c5b      	ldrb	r3, [r3, #17]
 8011d7e:	b25b      	sxtb	r3, r3
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	da0b      	bge.n	8011d9c <lcp_lowerdown+0x30>
	f->flags &= ~DELAYED_UP;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	7c5b      	ldrb	r3, [r3, #17]
 8011d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d8c:	b2da      	uxtb	r2, r3
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	745a      	strb	r2, [r3, #17]
	UNTIMEOUT(lcp_delayed_up, f);
 8011d92:	68f9      	ldr	r1, [r7, #12]
 8011d94:	4805      	ldr	r0, [pc, #20]	; (8011dac <lcp_lowerdown+0x40>)
 8011d96:	f7fb fe4b 	bl	800da30 <sys_untimeout>
    } else
	fsm_lowerdown(f);
}
 8011d9a:	e002      	b.n	8011da2 <lcp_lowerdown+0x36>
	fsm_lowerdown(f);
 8011d9c:	68f8      	ldr	r0, [r7, #12]
 8011d9e:	f7fd f8fb 	bl	800ef98 <fsm_lowerdown>
}
 8011da2:	bf00      	nop
 8011da4:	3710      	adds	r7, #16
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}
 8011daa:	bf00      	nop
 8011dac:	08011db1 	.word	0x08011db1

08011db0 <lcp_delayed_up>:


/*
 * lcp_delayed_up - Bring the lower layer up now.
 */
static void lcp_delayed_up(void *arg) {
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b084      	sub	sp, #16
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm*)arg;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	60fb      	str	r3, [r7, #12]

    if (f->flags & DELAYED_UP) {
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	7c5b      	ldrb	r3, [r3, #17]
 8011dc0:	b25b      	sxtb	r3, r3
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	da09      	bge.n	8011dda <lcp_delayed_up+0x2a>
	f->flags &= ~DELAYED_UP;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	7c5b      	ldrb	r3, [r3, #17]
 8011dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011dce:	b2da      	uxtb	r2, r3
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	745a      	strb	r2, [r3, #17]
	fsm_lowerup(f);
 8011dd4:	68f8      	ldr	r0, [r7, #12]
 8011dd6:	f7fd f8ba 	bl	800ef4e <fsm_lowerup>
    }
}
 8011dda:	bf00      	nop
 8011ddc:	3710      	adds	r7, #16
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}
	...

08011de4 <lcp_input>:


/*
 * lcp_input - Input LCP packet.
 */
static void lcp_input(ppp_pcb *pcb, u_char *p, int len) {
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b086      	sub	sp, #24
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	60f8      	str	r0, [r7, #12]
 8011dec:	60b9      	str	r1, [r7, #8]
 8011dee:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	3390      	adds	r3, #144	; 0x90
 8011df4:	617b      	str	r3, [r7, #20]

    if (f->flags & DELAYED_UP) {
 8011df6:	697b      	ldr	r3, [r7, #20]
 8011df8:	7c5b      	ldrb	r3, [r3, #17]
 8011dfa:	b25b      	sxtb	r3, r3
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	da0d      	bge.n	8011e1c <lcp_input+0x38>
	f->flags &= ~DELAYED_UP;
 8011e00:	697b      	ldr	r3, [r7, #20]
 8011e02:	7c5b      	ldrb	r3, [r3, #17]
 8011e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e08:	b2da      	uxtb	r2, r3
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	745a      	strb	r2, [r3, #17]
	UNTIMEOUT(lcp_delayed_up, f);
 8011e0e:	6979      	ldr	r1, [r7, #20]
 8011e10:	4807      	ldr	r0, [pc, #28]	; (8011e30 <lcp_input+0x4c>)
 8011e12:	f7fb fe0d 	bl	800da30 <sys_untimeout>
	fsm_lowerup(f);
 8011e16:	6978      	ldr	r0, [r7, #20]
 8011e18:	f7fd f899 	bl	800ef4e <fsm_lowerup>
    }
    fsm_input(f, p, len);
 8011e1c:	687a      	ldr	r2, [r7, #4]
 8011e1e:	68b9      	ldr	r1, [r7, #8]
 8011e20:	6978      	ldr	r0, [r7, #20]
 8011e22:	f7fd fac3 	bl	800f3ac <fsm_input>
}
 8011e26:	bf00      	nop
 8011e28:	3718      	adds	r7, #24
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	bd80      	pop	{r7, pc}
 8011e2e:	bf00      	nop
 8011e30:	08011db1 	.word	0x08011db1

08011e34 <lcp_extcode>:

/*
 * lcp_extcode - Handle a LCP-specific code.
 */
static int lcp_extcode(fsm *f, int code, int id, u_char *inp, int len) {
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b08a      	sub	sp, #40	; 0x28
 8011e38:	af02      	add	r7, sp, #8
 8011e3a:	60f8      	str	r0, [r7, #12]
 8011e3c:	60b9      	str	r1, [r7, #8]
 8011e3e:	607a      	str	r2, [r7, #4]
 8011e40:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 8011e48:	69fb      	ldr	r3, [r7, #28]
 8011e4a:	33d4      	adds	r3, #212	; 0xd4
 8011e4c:	61bb      	str	r3, [r7, #24]
    u_char *magp;

    switch( code ){
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	3b08      	subs	r3, #8
 8011e52:	2b05      	cmp	r3, #5
 8011e54:	d84a      	bhi.n	8011eec <lcp_extcode+0xb8>
 8011e56:	a201      	add	r2, pc, #4	; (adr r2, 8011e5c <lcp_extcode+0x28>)
 8011e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e5c:	08011e75 	.word	0x08011e75
 8011e60:	08011e81 	.word	0x08011e81
 8011e64:	08011edf 	.word	0x08011edf
 8011e68:	08011ef1 	.word	0x08011ef1
 8011e6c:	08011ef1 	.word	0x08011ef1
 8011e70:	08011ef1 	.word	0x08011ef1
    case PROTREJ:
	lcp_rprotrej(f, inp, len);
 8011e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e76:	6839      	ldr	r1, [r7, #0]
 8011e78:	68f8      	ldr	r0, [r7, #12]
 8011e7a:	f000 f841 	bl	8011f00 <lcp_rprotrej>
	break;
 8011e7e:	e03a      	b.n	8011ef6 <lcp_extcode+0xc2>
    
    case ECHOREQ:
	if (f->state != PPP_FSM_OPENED)
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	7c1b      	ldrb	r3, [r3, #16]
 8011e84:	2b09      	cmp	r3, #9
 8011e86:	d135      	bne.n	8011ef4 <lcp_extcode+0xc0>
	    break;
	magp = inp;
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	617b      	str	r3, [r7, #20]
	PUTLONG(go->magicnumber, magp);
 8011e8c:	697b      	ldr	r3, [r7, #20]
 8011e8e:	1c5a      	adds	r2, r3, #1
 8011e90:	617a      	str	r2, [r7, #20]
 8011e92:	69ba      	ldr	r2, [r7, #24]
 8011e94:	68d2      	ldr	r2, [r2, #12]
 8011e96:	0e12      	lsrs	r2, r2, #24
 8011e98:	b2d2      	uxtb	r2, r2
 8011e9a:	701a      	strb	r2, [r3, #0]
 8011e9c:	697b      	ldr	r3, [r7, #20]
 8011e9e:	1c5a      	adds	r2, r3, #1
 8011ea0:	617a      	str	r2, [r7, #20]
 8011ea2:	69ba      	ldr	r2, [r7, #24]
 8011ea4:	68d2      	ldr	r2, [r2, #12]
 8011ea6:	0c12      	lsrs	r2, r2, #16
 8011ea8:	b2d2      	uxtb	r2, r2
 8011eaa:	701a      	strb	r2, [r3, #0]
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	1c5a      	adds	r2, r3, #1
 8011eb0:	617a      	str	r2, [r7, #20]
 8011eb2:	69ba      	ldr	r2, [r7, #24]
 8011eb4:	68d2      	ldr	r2, [r2, #12]
 8011eb6:	0a12      	lsrs	r2, r2, #8
 8011eb8:	b2d2      	uxtb	r2, r2
 8011eba:	701a      	strb	r2, [r3, #0]
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	1c5a      	adds	r2, r3, #1
 8011ec0:	617a      	str	r2, [r7, #20]
 8011ec2:	69ba      	ldr	r2, [r7, #24]
 8011ec4:	68d2      	ldr	r2, [r2, #12]
 8011ec6:	b2d2      	uxtb	r2, r2
 8011ec8:	701a      	strb	r2, [r3, #0]
	fsm_sdata(f, ECHOREP, id, inp, len);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	b2da      	uxtb	r2, r3
 8011ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed0:	9300      	str	r3, [sp, #0]
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	210a      	movs	r1, #10
 8011ed6:	68f8      	ldr	r0, [r7, #12]
 8011ed8:	f7fd ff34 	bl	800fd44 <fsm_sdata>
	break;
 8011edc:	e00b      	b.n	8011ef6 <lcp_extcode+0xc2>
    
    case ECHOREP:
	lcp_received_echo_reply(f, id, inp, len);
 8011ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ee0:	683a      	ldr	r2, [r7, #0]
 8011ee2:	6879      	ldr	r1, [r7, #4]
 8011ee4:	68f8      	ldr	r0, [r7, #12]
 8011ee6:	f002 f947 	bl	8014178 <lcp_received_echo_reply>
	break;
 8011eea:	e004      	b.n	8011ef6 <lcp_extcode+0xc2>
    case IDENTIF:
    case TIMEREM:
	break;

    default:
	return 0;
 8011eec:	2300      	movs	r3, #0
 8011eee:	e003      	b.n	8011ef8 <lcp_extcode+0xc4>
	break;
 8011ef0:	bf00      	nop
 8011ef2:	e000      	b.n	8011ef6 <lcp_extcode+0xc2>
	    break;
 8011ef4:	bf00      	nop
    }
    return 1;
 8011ef6:	2301      	movs	r3, #1
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3720      	adds	r7, #32
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}

08011f00 <lcp_rprotrej>:
/*
 * lcp_rprotrej - Receive an Protocol-Reject.
 *
 * Figure out which protocol is rejected and inform it.
 */
static void lcp_rprotrej(fsm *f, u_char *inp, int len) {
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b088      	sub	sp, #32
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	60f8      	str	r0, [r7, #12]
 8011f08:	60b9      	str	r1, [r7, #8]
 8011f0a:	607a      	str	r2, [r7, #4]
    u_short prot;
#if PPP_PROTOCOLNAME
    const char *pname;
#endif /* PPP_PROTOCOLNAME */

    if (len < 2) {
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2b01      	cmp	r3, #1
 8011f10:	dd37      	ble.n	8011f82 <lcp_rprotrej+0x82>
	LCPDEBUG(("lcp_rprotrej: Rcvd short Protocol-Reject packet!"));
	return;
    }

    GETSHORT(prot, inp);
 8011f12:	68bb      	ldr	r3, [r7, #8]
 8011f14:	1c5a      	adds	r2, r3, #1
 8011f16:	60ba      	str	r2, [r7, #8]
 8011f18:	781b      	ldrb	r3, [r3, #0]
 8011f1a:	b29b      	uxth	r3, r3
 8011f1c:	021b      	lsls	r3, r3, #8
 8011f1e:	837b      	strh	r3, [r7, #26]
 8011f20:	68bb      	ldr	r3, [r7, #8]
 8011f22:	1c5a      	adds	r2, r3, #1
 8011f24:	60ba      	str	r2, [r7, #8]
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	b29a      	uxth	r2, r3
 8011f2a:	8b7b      	ldrh	r3, [r7, #26]
 8011f2c:	4313      	orrs	r3, r2
 8011f2e:	837b      	strh	r3, [r7, #26]

    /*
     * Protocol-Reject packets received in any state other than the LCP
     * OPENED state SHOULD be silently discarded.
     */
    if( f->state != PPP_FSM_OPENED ){
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	7c1b      	ldrb	r3, [r3, #16]
 8011f34:	2b09      	cmp	r3, #9
 8011f36:	d126      	bne.n	8011f86 <lcp_rprotrej+0x86>
#endif /* PPP_PROTOCOLNAME */

    /*
     * Upcall the proper Protocol-Reject routine.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 8011f38:	2300      	movs	r3, #0
 8011f3a:	61fb      	str	r3, [r7, #28]
 8011f3c:	e013      	b.n	8011f66 <lcp_rprotrej+0x66>
	if (protp->protocol == prot) {
 8011f3e:	697b      	ldr	r3, [r7, #20]
 8011f40:	881b      	ldrh	r3, [r3, #0]
 8011f42:	8b7a      	ldrh	r2, [r7, #26]
 8011f44:	429a      	cmp	r2, r3
 8011f46:	d10b      	bne.n	8011f60 <lcp_rprotrej+0x60>
	    if (pname != NULL)
		ppp_dbglog(("Protocol-Reject for '%s' (0x%x) received", pname,
		       prot));
	    else
#endif /* PPP_PROTOCOLNAME */
		ppp_dbglog(("Protocol-Reject for 0x%x received", prot));
 8011f48:	8b7b      	ldrh	r3, [r7, #26]
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	4810      	ldr	r0, [pc, #64]	; (8011f90 <lcp_rprotrej+0x90>)
 8011f4e:	f005 fc39 	bl	80177c4 <ppp_dbglog_impl>
	    (*protp->protrej)(f->pcb);
 8011f52:	697b      	ldr	r3, [r7, #20]
 8011f54:	68db      	ldr	r3, [r3, #12]
 8011f56:	68fa      	ldr	r2, [r7, #12]
 8011f58:	6812      	ldr	r2, [r2, #0]
 8011f5a:	4610      	mov	r0, r2
 8011f5c:	4798      	blx	r3
	    return;
 8011f5e:	e013      	b.n	8011f88 <lcp_rprotrej+0x88>
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 8011f60:	69fb      	ldr	r3, [r7, #28]
 8011f62:	3301      	adds	r3, #1
 8011f64:	61fb      	str	r3, [r7, #28]
 8011f66:	4a0b      	ldr	r2, [pc, #44]	; (8011f94 <lcp_rprotrej+0x94>)
 8011f68:	69fb      	ldr	r3, [r7, #28]
 8011f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f6e:	617b      	str	r3, [r7, #20]
 8011f70:	697b      	ldr	r3, [r7, #20]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d1e3      	bne.n	8011f3e <lcp_rprotrej+0x3e>
    if (pname != NULL)
	ppp_warn(("Protocol-Reject for unsupported protocol '%s' (0x%x)", pname,
	     prot));
    else
#endif /* #if PPP_PROTOCOLNAME */
	ppp_warn(("Protocol-Reject for unsupported protocol 0x%x", prot));
 8011f76:	8b7b      	ldrh	r3, [r7, #26]
 8011f78:	4619      	mov	r1, r3
 8011f7a:	4807      	ldr	r0, [pc, #28]	; (8011f98 <lcp_rprotrej+0x98>)
 8011f7c:	f005 fbe9 	bl	8017752 <ppp_warn_impl>
 8011f80:	e002      	b.n	8011f88 <lcp_rprotrej+0x88>
	return;
 8011f82:	bf00      	nop
 8011f84:	e000      	b.n	8011f88 <lcp_rprotrej+0x88>
	return;
 8011f86:	bf00      	nop
}
 8011f88:	3720      	adds	r7, #32
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
 8011f8e:	bf00      	nop
 8011f90:	0801cf20 	.word	0x0801cf20
 8011f94:	0801dce8 	.word	0x0801dce8
 8011f98:	0801cf44 	.word	0x0801cf44

08011f9c <lcp_protrej>:

/*
 * lcp_protrej - A Protocol-Reject was received.
 */
/*ARGSUSED*/
static void lcp_protrej(ppp_pcb *pcb) {
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b082      	sub	sp, #8
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
    /*
     * Can't reject LCP!
     */
    ppp_error(("Received Protocol-Reject for LCP!"));
 8011fa4:	4805      	ldr	r0, [pc, #20]	; (8011fbc <lcp_protrej+0x20>)
 8011fa6:	f005 fbc1 	bl	801772c <ppp_error_impl>
    fsm_protreject(&pcb->lcp_fsm);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	3390      	adds	r3, #144	; 0x90
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f7fd fd8c 	bl	800facc <fsm_protreject>
}
 8011fb4:	bf00      	nop
 8011fb6:	3708      	adds	r7, #8
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}
 8011fbc:	0801cf74 	.word	0x0801cf74

08011fc0 <lcp_sprotrej>:


/*
 * lcp_sprotrej - Send a Protocol-Reject for some protocol.
 */
void lcp_sprotrej(ppp_pcb *pcb, u_char *p, int len) {
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b088      	sub	sp, #32
 8011fc4:	af02      	add	r7, sp, #8
 8011fc6:	60f8      	str	r0, [r7, #12]
 8011fc8:	60b9      	str	r1, [r7, #8]
 8011fca:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	3390      	adds	r3, #144	; 0x90
 8011fd0:	617b      	str	r3, [r7, #20]
#if 0
    p += 2;
    len -= 2;
#endif

    fsm_sdata(f, PROTREJ, ++f->id,
 8011fd2:	697b      	ldr	r3, [r7, #20]
 8011fd4:	7c9b      	ldrb	r3, [r3, #18]
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	b2da      	uxtb	r2, r3
 8011fda:	697b      	ldr	r3, [r7, #20]
 8011fdc:	749a      	strb	r2, [r3, #18]
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	7c9a      	ldrb	r2, [r3, #18]
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	9300      	str	r3, [sp, #0]
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	2108      	movs	r1, #8
 8011fea:	6978      	ldr	r0, [r7, #20]
 8011fec:	f7fd feaa 	bl	800fd44 <fsm_sdata>
	      p, len);
}
 8011ff0:	bf00      	nop
 8011ff2:	3718      	adds	r7, #24
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bd80      	pop	{r7, pc}

08011ff8 <lcp_resetci>:


/*
 * lcp_resetci - Reset our CI.
 */
static void lcp_resetci(fsm *f) {
 8011ff8:	b5b0      	push	{r4, r5, r7, lr}
 8011ffa:	b086      	sub	sp, #24
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	617b      	str	r3, [r7, #20]
    lcp_options *wo = &pcb->lcp_wantoptions;
 8012006:	697b      	ldr	r3, [r7, #20]
 8012008:	33ac      	adds	r3, #172	; 0xac
 801200a:	613b      	str	r3, [r7, #16]
    lcp_options *go = &pcb->lcp_gotoptions;
 801200c:	697b      	ldr	r3, [r7, #20]
 801200e:	33d4      	adds	r3, #212	; 0xd4
 8012010:	60fb      	str	r3, [r7, #12]
    lcp_options *ao = &pcb->lcp_allowoptions;
 8012012:	697b      	ldr	r3, [r7, #20]
 8012014:	33fc      	adds	r3, #252	; 0xfc
 8012016:	60bb      	str	r3, [r7, #8]

#if PPP_AUTH_SUPPORT

    /* note: default value is true for allow options */
    if (pcb->settings.user && pcb->settings.passwd) {
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	685b      	ldr	r3, [r3, #4]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d02a      	beq.n	8012076 <lcp_resetci+0x7e>
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	689b      	ldr	r3, [r3, #8]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d026      	beq.n	8012076 <lcp_resetci+0x7e>
#if PAP_SUPPORT
      if (pcb->settings.refuse_pap) {
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	781b      	ldrb	r3, [r3, #0]
 801202c:	f003 0301 	and.w	r3, r3, #1
 8012030:	b2db      	uxtb	r3, r3
 8012032:	2b00      	cmp	r3, #0
 8012034:	d004      	beq.n	8012040 <lcp_resetci+0x48>
        ao->neg_upap = 0;
 8012036:	68ba      	ldr	r2, [r7, #8]
 8012038:	7813      	ldrb	r3, [r2, #0]
 801203a:	f36f 1304 	bfc	r3, #4, #1
 801203e:	7013      	strb	r3, [r2, #0]
      }
#endif /* PAP_SUPPORT */
#if CHAP_SUPPORT
      if (pcb->settings.refuse_chap) {
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	781b      	ldrb	r3, [r3, #0]
 8012044:	f003 0302 	and.w	r3, r3, #2
 8012048:	b2db      	uxtb	r3, r3
 801204a:	2b00      	cmp	r3, #0
 801204c:	d006      	beq.n	801205c <lcp_resetci+0x64>
        ao->chap_mdtype &= ~MDTYPE_MD5;
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	791b      	ldrb	r3, [r3, #4]
 8012052:	f023 0304 	bic.w	r3, r3, #4
 8012056:	b2da      	uxtb	r2, r3
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	711a      	strb	r2, [r3, #4]
      }
      if (pcb->settings.refuse_mschap_v2) {
        ao->chap_mdtype &= ~MDTYPE_MICROSOFT_V2;
      }
#endif /* MSCHAP_SUPPORT */
      ao->neg_chap = (ao->chap_mdtype != MDTYPE_NONE);
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	791b      	ldrb	r3, [r3, #4]
 8012060:	2b00      	cmp	r3, #0
 8012062:	bf14      	ite	ne
 8012064:	2301      	movne	r3, #1
 8012066:	2300      	moveq	r3, #0
 8012068:	b2d9      	uxtb	r1, r3
 801206a:	68ba      	ldr	r2, [r7, #8]
 801206c:	7813      	ldrb	r3, [r2, #0]
 801206e:	f361 1345 	bfi	r3, r1, #5, #1
 8012072:	7013      	strb	r3, [r2, #0]
 8012074:	e00c      	b.n	8012090 <lcp_resetci+0x98>
      }
#endif /* PPP_SERVER */

    } else {
#if PAP_SUPPORT
      ao->neg_upap = 0;
 8012076:	68ba      	ldr	r2, [r7, #8]
 8012078:	7813      	ldrb	r3, [r2, #0]
 801207a:	f36f 1304 	bfc	r3, #4, #1
 801207e:	7013      	strb	r3, [r2, #0]
#endif /* PAP_SUPPORT */
#if CHAP_SUPPORT
      ao->neg_chap = 0;
 8012080:	68ba      	ldr	r2, [r7, #8]
 8012082:	7813      	ldrb	r3, [r2, #0]
 8012084:	f36f 1345 	bfc	r3, #5, #1
 8012088:	7013      	strb	r3, [r2, #0]
      ao->chap_mdtype = MDTYPE_NONE;
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	2200      	movs	r2, #0
 801208e:	711a      	strb	r2, [r3, #4]
#if EAP_SUPPORT
      ao->neg_eap = 0;
#endif /* EAP_SUPPORT */
    }

    PPPDEBUG(LOG_DEBUG, ("ppp: auth protocols:"));
 8012090:	482a      	ldr	r0, [pc, #168]	; (801213c <lcp_resetci+0x144>)
 8012092:	f7ef f92e 	bl	80012f2 <lwip_win32_platform_diag>
#if PAP_SUPPORT
    PPPDEBUG(LOG_DEBUG, (" PAP=%d", ao->neg_upap));
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801209e:	b2db      	uxtb	r3, r3
 80120a0:	4619      	mov	r1, r3
 80120a2:	4827      	ldr	r0, [pc, #156]	; (8012140 <lcp_resetci+0x148>)
 80120a4:	f7ef f925 	bl	80012f2 <lwip_win32_platform_diag>
#endif /* PAP_SUPPORT */
#if CHAP_SUPPORT
    PPPDEBUG(LOG_DEBUG, (" CHAP=%d CHAP_MD5=%d", ao->neg_chap, !!(ao->chap_mdtype&MDTYPE_MD5)));
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	781b      	ldrb	r3, [r3, #0]
 80120ac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80120b0:	b2db      	uxtb	r3, r3
 80120b2:	4619      	mov	r1, r3
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	791b      	ldrb	r3, [r3, #4]
 80120b8:	f003 0304 	and.w	r3, r3, #4
 80120bc:	2b00      	cmp	r3, #0
 80120be:	bf14      	ite	ne
 80120c0:	2301      	movne	r3, #1
 80120c2:	2300      	moveq	r3, #0
 80120c4:	b2db      	uxtb	r3, r3
 80120c6:	461a      	mov	r2, r3
 80120c8:	481e      	ldr	r0, [pc, #120]	; (8012144 <lcp_resetci+0x14c>)
 80120ca:	f7ef f912 	bl	80012f2 <lwip_win32_platform_diag>
#endif /* MSCHAP_SUPPORT */
#endif /* CHAP_SUPPORT */
#if EAP_SUPPORT
    PPPDEBUG(LOG_DEBUG, (" EAP=%d", ao->neg_eap));
#endif /* EAP_SUPPORT */
    PPPDEBUG(LOG_DEBUG, ("\n"));
 80120ce:	481e      	ldr	r0, [pc, #120]	; (8012148 <lcp_resetci+0x150>)
 80120d0:	f7ef f90f 	bl	80012f2 <lwip_win32_platform_diag>

#endif /* PPP_AUTH_SUPPORT */

    wo->magicnumber = magic();
 80120d4:	f002 f9de 	bl	8014494 <magic>
 80120d8:	4602      	mov	r2, r0
 80120da:	693b      	ldr	r3, [r7, #16]
 80120dc:	60da      	str	r2, [r3, #12]
    wo->numloops = 0;
 80120de:	693b      	ldr	r3, [r7, #16]
 80120e0:	2200      	movs	r2, #0
 80120e2:	741a      	strb	r2, [r3, #16]
    *go = *wo;
 80120e4:	68fa      	ldr	r2, [r7, #12]
 80120e6:	693b      	ldr	r3, [r7, #16]
 80120e8:	4614      	mov	r4, r2
 80120ea:	461d      	mov	r5, r3
 80120ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80120ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80120f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80120f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80120f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80120f8:	e884 0003 	stmia.w	r4, {r0, r1}
#ifdef HAVE_MULTILINK
    if (!multilink) {
	go->neg_mrru = 0;
#endif /* HAVE_MULTILINK */
	go->neg_ssnhf = 0;
 80120fc:	68fa      	ldr	r2, [r7, #12]
 80120fe:	7853      	ldrb	r3, [r2, #1]
 8012100:	f36f 0382 	bfc	r3, #2, #1
 8012104:	7053      	strb	r3, [r2, #1]
	go->neg_endpoint = 0;
 8012106:	68fa      	ldr	r2, [r7, #12]
 8012108:	7853      	ldrb	r3, [r2, #1]
 801210a:	f36f 03c3 	bfc	r3, #3, #1
 801210e:	7053      	strb	r3, [r2, #1]
#ifdef HAVE_MULTILINK
    }
#endif /* HAVE_MULTILINK */
    if (pcb->settings.noendpoint)
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	781b      	ldrb	r3, [r3, #0]
 8012114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012118:	b2db      	uxtb	r3, r3
 801211a:	2b00      	cmp	r3, #0
 801211c:	d004      	beq.n	8012128 <lcp_resetci+0x130>
	ao->neg_endpoint = 0;
 801211e:	68ba      	ldr	r2, [r7, #8]
 8012120:	7853      	ldrb	r3, [r2, #1]
 8012122:	f36f 03c3 	bfc	r3, #3, #1
 8012126:	7053      	strb	r3, [r2, #1]
    pcb->peer_mru = PPP_DEFMRU;
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801212e:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
#if 0 /* UNUSED */
    auth_reset(pcb);
#endif /* UNUSED */
}
 8012132:	bf00      	nop
 8012134:	3718      	adds	r7, #24
 8012136:	46bd      	mov	sp, r7
 8012138:	bdb0      	pop	{r4, r5, r7, pc}
 801213a:	bf00      	nop
 801213c:	0801cf98 	.word	0x0801cf98
 8012140:	0801cfb0 	.word	0x0801cfb0
 8012144:	0801cfb8 	.word	0x0801cfb8
 8012148:	0801cfd0 	.word	0x0801cfd0

0801214c <lcp_cilen>:


/*
 * lcp_cilen - Return length of our CI.
 */
static int lcp_cilen(fsm *f) {
 801214c:	b480      	push	{r7}
 801214e:	b085      	sub	sp, #20
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	60fb      	str	r3, [r7, #12]
    lcp_options *go = &pcb->lcp_gotoptions;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	33d4      	adds	r3, #212	; 0xd4
 801215e:	60bb      	str	r3, [r7, #8]
    /*
     * NB: we only ask for one of CHAP, UPAP, or EAP, even if we will
     * accept more than one.  We prefer EAP first, then CHAP, then
     * PAP.
     */
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 8012160:	68bb      	ldr	r3, [r7, #8]
 8012162:	781b      	ldrb	r3, [r3, #0]
 8012164:	f003 0304 	and.w	r3, r3, #4
 8012168:	b2db      	uxtb	r3, r3
 801216a:	2b00      	cmp	r3, #0
 801216c:	d007      	beq.n	801217e <lcp_cilen+0x32>
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	885b      	ldrh	r3, [r3, #2]
 8012172:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8012176:	4293      	cmp	r3, r2
 8012178:	d001      	beq.n	801217e <lcp_cilen+0x32>
 801217a:	2204      	movs	r2, #4
 801217c:	e000      	b.n	8012180 <lcp_cilen+0x34>
 801217e:	2200      	movs	r2, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 8012180:	68bb      	ldr	r3, [r7, #8]
 8012182:	781b      	ldrb	r3, [r3, #0]
 8012184:	f003 0308 	and.w	r3, r3, #8
 8012188:	b2db      	uxtb	r3, r3
 801218a:	2b00      	cmp	r3, #0
 801218c:	d006      	beq.n	801219c <lcp_cilen+0x50>
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	689b      	ldr	r3, [r3, #8]
 8012192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012196:	d001      	beq.n	801219c <lcp_cilen+0x50>
 8012198:	2306      	movs	r3, #6
 801219a:	e000      	b.n	801219e <lcp_cilen+0x52>
 801219c:	2300      	movs	r3, #0
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 801219e:	441a      	add	r2, r3
#if CHAP_SUPPORT /* cannot be improved, embedding a directive within macro arguments is not portable */
#if EAP_SUPPORT
	    LENCICHAP(!go->neg_eap && go->neg_chap) +
#endif /* EAP_SUPPORT */
#if !EAP_SUPPORT
	    LENCICHAP(go->neg_chap) +
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	781b      	ldrb	r3, [r3, #0]
 80121a4:	f003 0320 	and.w	r3, r3, #32
 80121a8:	b2db      	uxtb	r3, r3
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d001      	beq.n	80121b2 <lcp_cilen+0x66>
 80121ae:	2305      	movs	r3, #5
 80121b0:	e000      	b.n	80121b4 <lcp_cilen+0x68>
 80121b2:	2300      	movs	r3, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 80121b4:	441a      	add	r2, r3
#endif /* EAP_SUPPORT && CHAP_SUPPORT */
#if EAP_SUPPORT && !CHAP_SUPPORT
	    LENCISHORT(!go->neg_eap && go->neg_upap) +
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
	    LENCISHORT(!go->neg_chap && go->neg_upap) +
 80121b6:	68bb      	ldr	r3, [r7, #8]
 80121b8:	781b      	ldrb	r3, [r3, #0]
 80121ba:	f003 0320 	and.w	r3, r3, #32
 80121be:	b2db      	uxtb	r3, r3
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d108      	bne.n	80121d6 <lcp_cilen+0x8a>
 80121c4:	68bb      	ldr	r3, [r7, #8]
 80121c6:	781b      	ldrb	r3, [r3, #0]
 80121c8:	f003 0310 	and.w	r3, r3, #16
 80121cc:	b2db      	uxtb	r3, r3
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d001      	beq.n	80121d6 <lcp_cilen+0x8a>
 80121d2:	2304      	movs	r3, #4
 80121d4:	e000      	b.n	80121d8 <lcp_cilen+0x8c>
 80121d6:	2300      	movs	r3, #0
	    LENCICHAP(go->neg_chap) +
 80121d8:	441a      	add	r2, r3
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
	    LENCILQR(go->neg_lqr) +
#endif /* LQR_SUPPORT */
	    LENCICBCP(go->neg_cbcp) +
 80121da:	68bb      	ldr	r3, [r7, #8]
 80121dc:	785b      	ldrb	r3, [r3, #1]
 80121de:	f003 0302 	and.w	r3, r3, #2
 80121e2:	b2db      	uxtb	r3, r3
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d001      	beq.n	80121ec <lcp_cilen+0xa0>
 80121e8:	2303      	movs	r3, #3
 80121ea:	e000      	b.n	80121ee <lcp_cilen+0xa2>
 80121ec:	2300      	movs	r3, #0
	    LENCISHORT(!go->neg_chap && go->neg_upap) +
 80121ee:	441a      	add	r2, r3
	    LENCILONG(go->neg_magicnumber) +
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121f8:	b2db      	uxtb	r3, r3
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d001      	beq.n	8012202 <lcp_cilen+0xb6>
 80121fe:	2306      	movs	r3, #6
 8012200:	e000      	b.n	8012204 <lcp_cilen+0xb8>
 8012202:	2300      	movs	r3, #0
	    LENCICBCP(go->neg_cbcp) +
 8012204:	441a      	add	r2, r3
	    LENCIVOID(go->neg_pcompression) +
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801220e:	b2db      	uxtb	r3, r3
 8012210:	2b00      	cmp	r3, #0
 8012212:	d001      	beq.n	8012218 <lcp_cilen+0xcc>
 8012214:	2302      	movs	r3, #2
 8012216:	e000      	b.n	801221a <lcp_cilen+0xce>
 8012218:	2300      	movs	r3, #0
	    LENCILONG(go->neg_magicnumber) +
 801221a:	441a      	add	r2, r3
	    LENCIVOID(go->neg_accompression) +
 801221c:	68bb      	ldr	r3, [r7, #8]
 801221e:	785b      	ldrb	r3, [r3, #1]
 8012220:	f003 0301 	and.w	r3, r3, #1
 8012224:	b2db      	uxtb	r3, r3
 8012226:	2b00      	cmp	r3, #0
 8012228:	d001      	beq.n	801222e <lcp_cilen+0xe2>
 801222a:	2302      	movs	r3, #2
 801222c:	e000      	b.n	8012230 <lcp_cilen+0xe4>
 801222e:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_pcompression) +
 8012230:	441a      	add	r2, r3
#ifdef HAVE_MULTILINK
	    LENCISHORT(go->neg_mrru) +
#endif /* HAVE_MULTILINK */
	    LENCIVOID(go->neg_ssnhf) +
 8012232:	68bb      	ldr	r3, [r7, #8]
 8012234:	785b      	ldrb	r3, [r3, #1]
 8012236:	f003 0304 	and.w	r3, r3, #4
 801223a:	b2db      	uxtb	r3, r3
 801223c:	2b00      	cmp	r3, #0
 801223e:	d001      	beq.n	8012244 <lcp_cilen+0xf8>
 8012240:	2302      	movs	r3, #2
 8012242:	e000      	b.n	8012246 <lcp_cilen+0xfa>
 8012244:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_accompression) +
 8012246:	441a      	add	r2, r3
	    (go->neg_endpoint? CILEN_CHAR + go->endpoint.length: 0));
 8012248:	68bb      	ldr	r3, [r7, #8]
 801224a:	785b      	ldrb	r3, [r3, #1]
 801224c:	f003 0308 	and.w	r3, r3, #8
 8012250:	b2db      	uxtb	r3, r3
 8012252:	2b00      	cmp	r3, #0
 8012254:	d003      	beq.n	801225e <lcp_cilen+0x112>
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	7c9b      	ldrb	r3, [r3, #18]
 801225a:	3303      	adds	r3, #3
 801225c:	e000      	b.n	8012260 <lcp_cilen+0x114>
 801225e:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_ssnhf) +
 8012260:	4413      	add	r3, r2
}
 8012262:	4618      	mov	r0, r3
 8012264:	3714      	adds	r7, #20
 8012266:	46bd      	mov	sp, r7
 8012268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226c:	4770      	bx	lr
	...

08012270 <lcp_addci>:


/*
 * lcp_addci - Add our desired CIs to a packet.
 */
static void lcp_addci(fsm *f, u_char *ucp, int *lenp) {
 8012270:	b580      	push	{r7, lr}
 8012272:	b088      	sub	sp, #32
 8012274:	af00      	add	r7, sp, #0
 8012276:	60f8      	str	r0, [r7, #12]
 8012278:	60b9      	str	r1, [r7, #8]
 801227a:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	61bb      	str	r3, [r7, #24]
    lcp_options *go = &pcb->lcp_gotoptions;
 8012282:	69bb      	ldr	r3, [r7, #24]
 8012284:	33d4      	adds	r3, #212	; 0xd4
 8012286:	617b      	str	r3, [r7, #20]
    u_char *start_ucp = ucp;
 8012288:	68bb      	ldr	r3, [r7, #8]
 801228a:	613b      	str	r3, [r7, #16]
	PUTCHAR(class, ucp); \
	for (i = 0; i < len; ++i) \
	    PUTCHAR(val[i], ucp); \
    }

    ADDCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 801228c:	697b      	ldr	r3, [r7, #20]
 801228e:	781b      	ldrb	r3, [r3, #0]
 8012290:	f003 0304 	and.w	r3, r3, #4
 8012294:	b2db      	uxtb	r3, r3
 8012296:	2b00      	cmp	r3, #0
 8012298:	d01f      	beq.n	80122da <lcp_addci+0x6a>
 801229a:	697b      	ldr	r3, [r7, #20]
 801229c:	885b      	ldrh	r3, [r3, #2]
 801229e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80122a2:	4293      	cmp	r3, r2
 80122a4:	d019      	beq.n	80122da <lcp_addci+0x6a>
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	1c5a      	adds	r2, r3, #1
 80122aa:	60ba      	str	r2, [r7, #8]
 80122ac:	2201      	movs	r2, #1
 80122ae:	701a      	strb	r2, [r3, #0]
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	1c5a      	adds	r2, r3, #1
 80122b4:	60ba      	str	r2, [r7, #8]
 80122b6:	2204      	movs	r2, #4
 80122b8:	701a      	strb	r2, [r3, #0]
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	1c5a      	adds	r2, r3, #1
 80122be:	60ba      	str	r2, [r7, #8]
 80122c0:	697a      	ldr	r2, [r7, #20]
 80122c2:	8852      	ldrh	r2, [r2, #2]
 80122c4:	0a12      	lsrs	r2, r2, #8
 80122c6:	b292      	uxth	r2, r2
 80122c8:	b2d2      	uxtb	r2, r2
 80122ca:	701a      	strb	r2, [r3, #0]
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	1c5a      	adds	r2, r3, #1
 80122d0:	60ba      	str	r2, [r7, #8]
 80122d2:	697a      	ldr	r2, [r7, #20]
 80122d4:	8852      	ldrh	r2, [r2, #2]
 80122d6:	b2d2      	uxtb	r2, r2
 80122d8:	701a      	strb	r2, [r3, #0]
    ADDCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 80122da:	697b      	ldr	r3, [r7, #20]
 80122dc:	781b      	ldrb	r3, [r3, #0]
 80122de:	f003 0308 	and.w	r3, r3, #8
 80122e2:	b2db      	uxtb	r3, r3
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d02d      	beq.n	8012344 <lcp_addci+0xd4>
 80122e8:	697b      	ldr	r3, [r7, #20]
 80122ea:	689b      	ldr	r3, [r3, #8]
 80122ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122f0:	d028      	beq.n	8012344 <lcp_addci+0xd4>
 80122f2:	68bb      	ldr	r3, [r7, #8]
 80122f4:	1c5a      	adds	r2, r3, #1
 80122f6:	60ba      	str	r2, [r7, #8]
 80122f8:	2202      	movs	r2, #2
 80122fa:	701a      	strb	r2, [r3, #0]
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	1c5a      	adds	r2, r3, #1
 8012300:	60ba      	str	r2, [r7, #8]
 8012302:	2206      	movs	r2, #6
 8012304:	701a      	strb	r2, [r3, #0]
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	1c5a      	adds	r2, r3, #1
 801230a:	60ba      	str	r2, [r7, #8]
 801230c:	697a      	ldr	r2, [r7, #20]
 801230e:	6892      	ldr	r2, [r2, #8]
 8012310:	0e12      	lsrs	r2, r2, #24
 8012312:	b2d2      	uxtb	r2, r2
 8012314:	701a      	strb	r2, [r3, #0]
 8012316:	68bb      	ldr	r3, [r7, #8]
 8012318:	1c5a      	adds	r2, r3, #1
 801231a:	60ba      	str	r2, [r7, #8]
 801231c:	697a      	ldr	r2, [r7, #20]
 801231e:	6892      	ldr	r2, [r2, #8]
 8012320:	0c12      	lsrs	r2, r2, #16
 8012322:	b2d2      	uxtb	r2, r2
 8012324:	701a      	strb	r2, [r3, #0]
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	1c5a      	adds	r2, r3, #1
 801232a:	60ba      	str	r2, [r7, #8]
 801232c:	697a      	ldr	r2, [r7, #20]
 801232e:	6892      	ldr	r2, [r2, #8]
 8012330:	0a12      	lsrs	r2, r2, #8
 8012332:	b2d2      	uxtb	r2, r2
 8012334:	701a      	strb	r2, [r3, #0]
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	1c5a      	adds	r2, r3, #1
 801233a:	60ba      	str	r2, [r7, #8]
 801233c:	697a      	ldr	r2, [r7, #20]
 801233e:	6892      	ldr	r2, [r2, #8]
 8012340:	b2d2      	uxtb	r2, r2
 8012342:	701a      	strb	r2, [r3, #0]
#if CHAP_SUPPORT /* cannot be improved, embedding a directive within macro arguments is not portable */
#if EAP_SUPPORT
    ADDCICHAP(CI_AUTHTYPE, !go->neg_eap && go->neg_chap, go->chap_mdtype);
#endif /* EAP_SUPPORT */
#if !EAP_SUPPORT
    ADDCICHAP(CI_AUTHTYPE, go->neg_chap, go->chap_mdtype);
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	f003 0320 	and.w	r3, r3, #32
 801234c:	b2db      	uxtb	r3, r3
 801234e:	2b00      	cmp	r3, #0
 8012350:	d020      	beq.n	8012394 <lcp_addci+0x124>
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	1c5a      	adds	r2, r3, #1
 8012356:	60ba      	str	r2, [r7, #8]
 8012358:	2203      	movs	r2, #3
 801235a:	701a      	strb	r2, [r3, #0]
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	1c5a      	adds	r2, r3, #1
 8012360:	60ba      	str	r2, [r7, #8]
 8012362:	2205      	movs	r2, #5
 8012364:	701a      	strb	r2, [r3, #0]
 8012366:	68bb      	ldr	r3, [r7, #8]
 8012368:	1c5a      	adds	r2, r3, #1
 801236a:	60ba      	str	r2, [r7, #8]
 801236c:	22c2      	movs	r2, #194	; 0xc2
 801236e:	701a      	strb	r2, [r3, #0]
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	1c5a      	adds	r2, r3, #1
 8012374:	60ba      	str	r2, [r7, #8]
 8012376:	2223      	movs	r2, #35	; 0x23
 8012378:	701a      	strb	r2, [r3, #0]
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	1c5a      	adds	r2, r3, #1
 801237e:	60ba      	str	r2, [r7, #8]
 8012380:	697a      	ldr	r2, [r7, #20]
 8012382:	7912      	ldrb	r2, [r2, #4]
 8012384:	f002 0204 	and.w	r2, r2, #4
 8012388:	2a00      	cmp	r2, #0
 801238a:	d001      	beq.n	8012390 <lcp_addci+0x120>
 801238c:	2205      	movs	r2, #5
 801238e:	e000      	b.n	8012392 <lcp_addci+0x122>
 8012390:	2200      	movs	r2, #0
 8012392:	701a      	strb	r2, [r3, #0]
#endif /* EAP_SUPPORT && CHAP_SUPPORT */
#if EAP_SUPPORT && !CHAP_SUPPORT
    ADDCISHORT(CI_AUTHTYPE, !go->neg_eap && go->neg_upap, PPP_PAP);
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
    ADDCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	781b      	ldrb	r3, [r3, #0]
 8012398:	f003 0320 	and.w	r3, r3, #32
 801239c:	b2db      	uxtb	r3, r3
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d11a      	bne.n	80123d8 <lcp_addci+0x168>
 80123a2:	697b      	ldr	r3, [r7, #20]
 80123a4:	781b      	ldrb	r3, [r3, #0]
 80123a6:	f003 0310 	and.w	r3, r3, #16
 80123aa:	b2db      	uxtb	r3, r3
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d013      	beq.n	80123d8 <lcp_addci+0x168>
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	1c5a      	adds	r2, r3, #1
 80123b4:	60ba      	str	r2, [r7, #8]
 80123b6:	2203      	movs	r2, #3
 80123b8:	701a      	strb	r2, [r3, #0]
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	1c5a      	adds	r2, r3, #1
 80123be:	60ba      	str	r2, [r7, #8]
 80123c0:	2204      	movs	r2, #4
 80123c2:	701a      	strb	r2, [r3, #0]
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	1c5a      	adds	r2, r3, #1
 80123c8:	60ba      	str	r2, [r7, #8]
 80123ca:	22c0      	movs	r2, #192	; 0xc0
 80123cc:	701a      	strb	r2, [r3, #0]
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	1c5a      	adds	r2, r3, #1
 80123d2:	60ba      	str	r2, [r7, #8]
 80123d4:	2223      	movs	r2, #35	; 0x23
 80123d6:	701a      	strb	r2, [r3, #0]
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ADDCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ADDCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	785b      	ldrb	r3, [r3, #1]
 80123dc:	f003 0302 	and.w	r3, r3, #2
 80123e0:	b2db      	uxtb	r3, r3
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d00e      	beq.n	8012404 <lcp_addci+0x194>
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	1c5a      	adds	r2, r3, #1
 80123ea:	60ba      	str	r2, [r7, #8]
 80123ec:	220d      	movs	r2, #13
 80123ee:	701a      	strb	r2, [r3, #0]
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	1c5a      	adds	r2, r3, #1
 80123f4:	60ba      	str	r2, [r7, #8]
 80123f6:	2203      	movs	r2, #3
 80123f8:	701a      	strb	r2, [r3, #0]
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	1c5a      	adds	r2, r3, #1
 80123fe:	60ba      	str	r2, [r7, #8]
 8012400:	2206      	movs	r2, #6
 8012402:	701a      	strb	r2, [r3, #0]
    ADDCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 8012404:	697b      	ldr	r3, [r7, #20]
 8012406:	781b      	ldrb	r3, [r3, #0]
 8012408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801240c:	b2db      	uxtb	r3, r3
 801240e:	2b00      	cmp	r3, #0
 8012410:	d028      	beq.n	8012464 <lcp_addci+0x1f4>
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	1c5a      	adds	r2, r3, #1
 8012416:	60ba      	str	r2, [r7, #8]
 8012418:	2205      	movs	r2, #5
 801241a:	701a      	strb	r2, [r3, #0]
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	1c5a      	adds	r2, r3, #1
 8012420:	60ba      	str	r2, [r7, #8]
 8012422:	2206      	movs	r2, #6
 8012424:	701a      	strb	r2, [r3, #0]
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	1c5a      	adds	r2, r3, #1
 801242a:	60ba      	str	r2, [r7, #8]
 801242c:	697a      	ldr	r2, [r7, #20]
 801242e:	68d2      	ldr	r2, [r2, #12]
 8012430:	0e12      	lsrs	r2, r2, #24
 8012432:	b2d2      	uxtb	r2, r2
 8012434:	701a      	strb	r2, [r3, #0]
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	1c5a      	adds	r2, r3, #1
 801243a:	60ba      	str	r2, [r7, #8]
 801243c:	697a      	ldr	r2, [r7, #20]
 801243e:	68d2      	ldr	r2, [r2, #12]
 8012440:	0c12      	lsrs	r2, r2, #16
 8012442:	b2d2      	uxtb	r2, r2
 8012444:	701a      	strb	r2, [r3, #0]
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	1c5a      	adds	r2, r3, #1
 801244a:	60ba      	str	r2, [r7, #8]
 801244c:	697a      	ldr	r2, [r7, #20]
 801244e:	68d2      	ldr	r2, [r2, #12]
 8012450:	0a12      	lsrs	r2, r2, #8
 8012452:	b2d2      	uxtb	r2, r2
 8012454:	701a      	strb	r2, [r3, #0]
 8012456:	68bb      	ldr	r3, [r7, #8]
 8012458:	1c5a      	adds	r2, r3, #1
 801245a:	60ba      	str	r2, [r7, #8]
 801245c:	697a      	ldr	r2, [r7, #20]
 801245e:	68d2      	ldr	r2, [r2, #12]
 8012460:	b2d2      	uxtb	r2, r2
 8012462:	701a      	strb	r2, [r3, #0]
    ADDCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 8012464:	697b      	ldr	r3, [r7, #20]
 8012466:	781b      	ldrb	r3, [r3, #0]
 8012468:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801246c:	b2db      	uxtb	r3, r3
 801246e:	2b00      	cmp	r3, #0
 8012470:	d009      	beq.n	8012486 <lcp_addci+0x216>
 8012472:	68bb      	ldr	r3, [r7, #8]
 8012474:	1c5a      	adds	r2, r3, #1
 8012476:	60ba      	str	r2, [r7, #8]
 8012478:	2207      	movs	r2, #7
 801247a:	701a      	strb	r2, [r3, #0]
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	1c5a      	adds	r2, r3, #1
 8012480:	60ba      	str	r2, [r7, #8]
 8012482:	2202      	movs	r2, #2
 8012484:	701a      	strb	r2, [r3, #0]
    ADDCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 8012486:	697b      	ldr	r3, [r7, #20]
 8012488:	785b      	ldrb	r3, [r3, #1]
 801248a:	f003 0301 	and.w	r3, r3, #1
 801248e:	b2db      	uxtb	r3, r3
 8012490:	2b00      	cmp	r3, #0
 8012492:	d009      	beq.n	80124a8 <lcp_addci+0x238>
 8012494:	68bb      	ldr	r3, [r7, #8]
 8012496:	1c5a      	adds	r2, r3, #1
 8012498:	60ba      	str	r2, [r7, #8]
 801249a:	2208      	movs	r2, #8
 801249c:	701a      	strb	r2, [r3, #0]
 801249e:	68bb      	ldr	r3, [r7, #8]
 80124a0:	1c5a      	adds	r2, r3, #1
 80124a2:	60ba      	str	r2, [r7, #8]
 80124a4:	2202      	movs	r2, #2
 80124a6:	701a      	strb	r2, [r3, #0]
#ifdef HAVE_MULTILINK
    ADDCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif
    ADDCIVOID(CI_SSNHF, go->neg_ssnhf);
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	785b      	ldrb	r3, [r3, #1]
 80124ac:	f003 0304 	and.w	r3, r3, #4
 80124b0:	b2db      	uxtb	r3, r3
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d009      	beq.n	80124ca <lcp_addci+0x25a>
 80124b6:	68bb      	ldr	r3, [r7, #8]
 80124b8:	1c5a      	adds	r2, r3, #1
 80124ba:	60ba      	str	r2, [r7, #8]
 80124bc:	2212      	movs	r2, #18
 80124be:	701a      	strb	r2, [r3, #0]
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	1c5a      	adds	r2, r3, #1
 80124c4:	60ba      	str	r2, [r7, #8]
 80124c6:	2202      	movs	r2, #2
 80124c8:	701a      	strb	r2, [r3, #0]
    ADDCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	785b      	ldrb	r3, [r3, #1]
 80124ce:	f003 0308 	and.w	r3, r3, #8
 80124d2:	b2db      	uxtb	r3, r3
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d027      	beq.n	8012528 <lcp_addci+0x2b8>
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	1c5a      	adds	r2, r3, #1
 80124dc:	60ba      	str	r2, [r7, #8]
 80124de:	2213      	movs	r2, #19
 80124e0:	701a      	strb	r2, [r3, #0]
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	1c5a      	adds	r2, r3, #1
 80124e6:	60ba      	str	r2, [r7, #8]
 80124e8:	697a      	ldr	r2, [r7, #20]
 80124ea:	7c92      	ldrb	r2, [r2, #18]
 80124ec:	3203      	adds	r2, #3
 80124ee:	b2d2      	uxtb	r2, r2
 80124f0:	701a      	strb	r2, [r3, #0]
 80124f2:	68bb      	ldr	r3, [r7, #8]
 80124f4:	1c5a      	adds	r2, r3, #1
 80124f6:	60ba      	str	r2, [r7, #8]
 80124f8:	697a      	ldr	r2, [r7, #20]
 80124fa:	7c52      	ldrb	r2, [r2, #17]
 80124fc:	701a      	strb	r2, [r3, #0]
 80124fe:	2300      	movs	r3, #0
 8012500:	61fb      	str	r3, [r7, #28]
 8012502:	e00b      	b.n	801251c <lcp_addci+0x2ac>
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	1c5a      	adds	r2, r3, #1
 8012508:	60ba      	str	r2, [r7, #8]
 801250a:	6979      	ldr	r1, [r7, #20]
 801250c:	69fa      	ldr	r2, [r7, #28]
 801250e:	440a      	add	r2, r1
 8012510:	3213      	adds	r2, #19
 8012512:	7812      	ldrb	r2, [r2, #0]
 8012514:	701a      	strb	r2, [r3, #0]
 8012516:	69fb      	ldr	r3, [r7, #28]
 8012518:	3301      	adds	r3, #1
 801251a:	61fb      	str	r3, [r7, #28]
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	7c9b      	ldrb	r3, [r3, #18]
 8012520:	461a      	mov	r2, r3
 8012522:	69fb      	ldr	r3, [r7, #28]
 8012524:	429a      	cmp	r2, r3
 8012526:	dced      	bgt.n	8012504 <lcp_addci+0x294>
	      go->endpoint.value, go->endpoint.length);

    if (ucp - start_ucp != *lenp) {
 8012528:	68ba      	ldr	r2, [r7, #8]
 801252a:	693b      	ldr	r3, [r7, #16]
 801252c:	1ad2      	subs	r2, r2, r3
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	429a      	cmp	r2, r3
 8012534:	d002      	beq.n	801253c <lcp_addci+0x2cc>
	/* this should never happen, because peer_mtu should be 1500 */
	ppp_error(("Bug in lcp_addci: wrong length"));
 8012536:	4803      	ldr	r0, [pc, #12]	; (8012544 <lcp_addci+0x2d4>)
 8012538:	f005 f8f8 	bl	801772c <ppp_error_impl>
    }
}
 801253c:	bf00      	nop
 801253e:	3720      	adds	r7, #32
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}
 8012544:	0801cfd4 	.word	0x0801cfd4

08012548 <lcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int lcp_ackci(fsm *f, u_char *p, int len) {
 8012548:	b480      	push	{r7}
 801254a:	b08b      	sub	sp, #44	; 0x2c
 801254c:	af00      	add	r7, sp, #0
 801254e:	60f8      	str	r0, [r7, #12]
 8012550:	60b9      	str	r1, [r7, #8]
 8012552:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	623b      	str	r3, [r7, #32]
    lcp_options *go = &pcb->lcp_gotoptions;
 801255a:	6a3b      	ldr	r3, [r7, #32]
 801255c:	33d4      	adds	r3, #212	; 0xd4
 801255e:	61fb      	str	r3, [r7, #28]
	    if (cichar != val[i]) \
		goto bad; \
	} \
    }

    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 8012560:	69fb      	ldr	r3, [r7, #28]
 8012562:	781b      	ldrb	r3, [r3, #0]
 8012564:	f003 0304 	and.w	r3, r3, #4
 8012568:	b2db      	uxtb	r3, r3
 801256a:	2b00      	cmp	r3, #0
 801256c:	d033      	beq.n	80125d6 <lcp_ackci+0x8e>
 801256e:	69fb      	ldr	r3, [r7, #28]
 8012570:	885b      	ldrh	r3, [r3, #2]
 8012572:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8012576:	4293      	cmp	r3, r2
 8012578:	d02d      	beq.n	80125d6 <lcp_ackci+0x8e>
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	3b04      	subs	r3, #4
 801257e:	607b      	str	r3, [r7, #4]
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2b00      	cmp	r3, #0
 8012584:	f2c0 8214 	blt.w	80129b0 <lcp_ackci+0x468>
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	1c5a      	adds	r2, r3, #1
 801258c:	60ba      	str	r2, [r7, #8]
 801258e:	781b      	ldrb	r3, [r3, #0]
 8012590:	76fb      	strb	r3, [r7, #27]
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	1c5a      	adds	r2, r3, #1
 8012596:	60ba      	str	r2, [r7, #8]
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	76bb      	strb	r3, [r7, #26]
 801259c:	7ebb      	ldrb	r3, [r7, #26]
 801259e:	2b04      	cmp	r3, #4
 80125a0:	f040 822d 	bne.w	80129fe <lcp_ackci+0x4b6>
 80125a4:	7efb      	ldrb	r3, [r7, #27]
 80125a6:	2b01      	cmp	r3, #1
 80125a8:	f040 8229 	bne.w	80129fe <lcp_ackci+0x4b6>
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	1c5a      	adds	r2, r3, #1
 80125b0:	60ba      	str	r2, [r7, #8]
 80125b2:	781b      	ldrb	r3, [r3, #0]
 80125b4:	b29b      	uxth	r3, r3
 80125b6:	021b      	lsls	r3, r3, #8
 80125b8:	833b      	strh	r3, [r7, #24]
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	1c5a      	adds	r2, r3, #1
 80125be:	60ba      	str	r2, [r7, #8]
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	b29a      	uxth	r2, r3
 80125c4:	8b3b      	ldrh	r3, [r7, #24]
 80125c6:	4313      	orrs	r3, r2
 80125c8:	833b      	strh	r3, [r7, #24]
 80125ca:	69fb      	ldr	r3, [r7, #28]
 80125cc:	885b      	ldrh	r3, [r3, #2]
 80125ce:	8b3a      	ldrh	r2, [r7, #24]
 80125d0:	429a      	cmp	r2, r3
 80125d2:	f040 81ef 	bne.w	80129b4 <lcp_ackci+0x46c>
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 80125d6:	69fb      	ldr	r3, [r7, #28]
 80125d8:	781b      	ldrb	r3, [r3, #0]
 80125da:	f003 0308 	and.w	r3, r3, #8
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d047      	beq.n	8012674 <lcp_ackci+0x12c>
 80125e4:	69fb      	ldr	r3, [r7, #28]
 80125e6:	689b      	ldr	r3, [r3, #8]
 80125e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125ec:	d042      	beq.n	8012674 <lcp_ackci+0x12c>
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	3b06      	subs	r3, #6
 80125f2:	607b      	str	r3, [r7, #4]
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	f2c0 81de 	blt.w	80129b8 <lcp_ackci+0x470>
 80125fc:	68bb      	ldr	r3, [r7, #8]
 80125fe:	1c5a      	adds	r2, r3, #1
 8012600:	60ba      	str	r2, [r7, #8]
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	76fb      	strb	r3, [r7, #27]
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	1c5a      	adds	r2, r3, #1
 801260a:	60ba      	str	r2, [r7, #8]
 801260c:	781b      	ldrb	r3, [r3, #0]
 801260e:	76bb      	strb	r3, [r7, #26]
 8012610:	7ebb      	ldrb	r3, [r7, #26]
 8012612:	2b06      	cmp	r3, #6
 8012614:	f040 81f3 	bne.w	80129fe <lcp_ackci+0x4b6>
 8012618:	7efb      	ldrb	r3, [r7, #27]
 801261a:	2b02      	cmp	r3, #2
 801261c:	f040 81ef 	bne.w	80129fe <lcp_ackci+0x4b6>
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	1c5a      	adds	r2, r3, #1
 8012624:	60ba      	str	r2, [r7, #8]
 8012626:	781b      	ldrb	r3, [r3, #0]
 8012628:	021b      	lsls	r3, r3, #8
 801262a:	617b      	str	r3, [r7, #20]
 801262c:	68bb      	ldr	r3, [r7, #8]
 801262e:	1c5a      	adds	r2, r3, #1
 8012630:	60ba      	str	r2, [r7, #8]
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	461a      	mov	r2, r3
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	4313      	orrs	r3, r2
 801263a:	617b      	str	r3, [r7, #20]
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	021b      	lsls	r3, r3, #8
 8012640:	617b      	str	r3, [r7, #20]
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	1c5a      	adds	r2, r3, #1
 8012646:	60ba      	str	r2, [r7, #8]
 8012648:	781b      	ldrb	r3, [r3, #0]
 801264a:	461a      	mov	r2, r3
 801264c:	697b      	ldr	r3, [r7, #20]
 801264e:	4313      	orrs	r3, r2
 8012650:	617b      	str	r3, [r7, #20]
 8012652:	697b      	ldr	r3, [r7, #20]
 8012654:	021b      	lsls	r3, r3, #8
 8012656:	617b      	str	r3, [r7, #20]
 8012658:	68bb      	ldr	r3, [r7, #8]
 801265a:	1c5a      	adds	r2, r3, #1
 801265c:	60ba      	str	r2, [r7, #8]
 801265e:	781b      	ldrb	r3, [r3, #0]
 8012660:	461a      	mov	r2, r3
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	4313      	orrs	r3, r2
 8012666:	617b      	str	r3, [r7, #20]
 8012668:	69fb      	ldr	r3, [r7, #28]
 801266a:	689a      	ldr	r2, [r3, #8]
 801266c:	697b      	ldr	r3, [r7, #20]
 801266e:	429a      	cmp	r2, r3
 8012670:	f040 81a4 	bne.w	80129bc <lcp_ackci+0x474>
#if CHAP_SUPPORT /* cannot be improved, embedding a directive within macro arguments is not portable */
#if EAP_SUPPORT
    ACKCICHAP(CI_AUTHTYPE, !go->neg_eap && go->neg_chap, go->chap_mdtype);
#endif /* EAP_SUPPORT */
#if !EAP_SUPPORT
    ACKCICHAP(CI_AUTHTYPE, go->neg_chap, go->chap_mdtype);
 8012674:	69fb      	ldr	r3, [r7, #28]
 8012676:	781b      	ldrb	r3, [r3, #0]
 8012678:	f003 0320 	and.w	r3, r3, #32
 801267c:	b2db      	uxtb	r3, r3
 801267e:	2b00      	cmp	r3, #0
 8012680:	d03f      	beq.n	8012702 <lcp_ackci+0x1ba>
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	3b05      	subs	r3, #5
 8012686:	607b      	str	r3, [r7, #4]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2b00      	cmp	r3, #0
 801268c:	f2c0 8198 	blt.w	80129c0 <lcp_ackci+0x478>
 8012690:	68bb      	ldr	r3, [r7, #8]
 8012692:	1c5a      	adds	r2, r3, #1
 8012694:	60ba      	str	r2, [r7, #8]
 8012696:	781b      	ldrb	r3, [r3, #0]
 8012698:	76fb      	strb	r3, [r7, #27]
 801269a:	68bb      	ldr	r3, [r7, #8]
 801269c:	1c5a      	adds	r2, r3, #1
 801269e:	60ba      	str	r2, [r7, #8]
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	76bb      	strb	r3, [r7, #26]
 80126a4:	7ebb      	ldrb	r3, [r7, #26]
 80126a6:	2b05      	cmp	r3, #5
 80126a8:	f040 81a9 	bne.w	80129fe <lcp_ackci+0x4b6>
 80126ac:	7efb      	ldrb	r3, [r7, #27]
 80126ae:	2b03      	cmp	r3, #3
 80126b0:	f040 81a5 	bne.w	80129fe <lcp_ackci+0x4b6>
 80126b4:	68bb      	ldr	r3, [r7, #8]
 80126b6:	1c5a      	adds	r2, r3, #1
 80126b8:	60ba      	str	r2, [r7, #8]
 80126ba:	781b      	ldrb	r3, [r3, #0]
 80126bc:	b29b      	uxth	r3, r3
 80126be:	021b      	lsls	r3, r3, #8
 80126c0:	833b      	strh	r3, [r7, #24]
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	1c5a      	adds	r2, r3, #1
 80126c6:	60ba      	str	r2, [r7, #8]
 80126c8:	781b      	ldrb	r3, [r3, #0]
 80126ca:	b29a      	uxth	r2, r3
 80126cc:	8b3b      	ldrh	r3, [r7, #24]
 80126ce:	4313      	orrs	r3, r2
 80126d0:	833b      	strh	r3, [r7, #24]
 80126d2:	8b3b      	ldrh	r3, [r7, #24]
 80126d4:	f24c 2223 	movw	r2, #49699	; 0xc223
 80126d8:	4293      	cmp	r3, r2
 80126da:	f040 8173 	bne.w	80129c4 <lcp_ackci+0x47c>
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	1c5a      	adds	r2, r3, #1
 80126e2:	60ba      	str	r2, [r7, #8]
 80126e4:	781b      	ldrb	r3, [r3, #0]
 80126e6:	74fb      	strb	r3, [r7, #19]
 80126e8:	7cfa      	ldrb	r2, [r7, #19]
 80126ea:	69fb      	ldr	r3, [r7, #28]
 80126ec:	791b      	ldrb	r3, [r3, #4]
 80126ee:	f003 0304 	and.w	r3, r3, #4
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d001      	beq.n	80126fa <lcp_ackci+0x1b2>
 80126f6:	2305      	movs	r3, #5
 80126f8:	e000      	b.n	80126fc <lcp_ackci+0x1b4>
 80126fa:	2300      	movs	r3, #0
 80126fc:	429a      	cmp	r2, r3
 80126fe:	f040 8163 	bne.w	80129c8 <lcp_ackci+0x480>
#endif /* EAP_SUPPORT && CHAP_SUPPORT */
#if EAP_SUPPORT && !CHAP_SUPPORT
    ACKCISHORT(CI_AUTHTYPE, !go->neg_eap && go->neg_upap, PPP_PAP);
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
    ACKCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
 8012702:	69fb      	ldr	r3, [r7, #28]
 8012704:	781b      	ldrb	r3, [r3, #0]
 8012706:	f003 0320 	and.w	r3, r3, #32
 801270a:	b2db      	uxtb	r3, r3
 801270c:	2b00      	cmp	r3, #0
 801270e:	d134      	bne.n	801277a <lcp_ackci+0x232>
 8012710:	69fb      	ldr	r3, [r7, #28]
 8012712:	781b      	ldrb	r3, [r3, #0]
 8012714:	f003 0310 	and.w	r3, r3, #16
 8012718:	b2db      	uxtb	r3, r3
 801271a:	2b00      	cmp	r3, #0
 801271c:	d02d      	beq.n	801277a <lcp_ackci+0x232>
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	3b04      	subs	r3, #4
 8012722:	607b      	str	r3, [r7, #4]
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	2b00      	cmp	r3, #0
 8012728:	f2c0 8150 	blt.w	80129cc <lcp_ackci+0x484>
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	1c5a      	adds	r2, r3, #1
 8012730:	60ba      	str	r2, [r7, #8]
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	76fb      	strb	r3, [r7, #27]
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	1c5a      	adds	r2, r3, #1
 801273a:	60ba      	str	r2, [r7, #8]
 801273c:	781b      	ldrb	r3, [r3, #0]
 801273e:	76bb      	strb	r3, [r7, #26]
 8012740:	7ebb      	ldrb	r3, [r7, #26]
 8012742:	2b04      	cmp	r3, #4
 8012744:	f040 815b 	bne.w	80129fe <lcp_ackci+0x4b6>
 8012748:	7efb      	ldrb	r3, [r7, #27]
 801274a:	2b03      	cmp	r3, #3
 801274c:	f040 8157 	bne.w	80129fe <lcp_ackci+0x4b6>
 8012750:	68bb      	ldr	r3, [r7, #8]
 8012752:	1c5a      	adds	r2, r3, #1
 8012754:	60ba      	str	r2, [r7, #8]
 8012756:	781b      	ldrb	r3, [r3, #0]
 8012758:	b29b      	uxth	r3, r3
 801275a:	021b      	lsls	r3, r3, #8
 801275c:	833b      	strh	r3, [r7, #24]
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	1c5a      	adds	r2, r3, #1
 8012762:	60ba      	str	r2, [r7, #8]
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	b29a      	uxth	r2, r3
 8012768:	8b3b      	ldrh	r3, [r7, #24]
 801276a:	4313      	orrs	r3, r2
 801276c:	833b      	strh	r3, [r7, #24]
 801276e:	8b3b      	ldrh	r3, [r7, #24]
 8012770:	f24c 0223 	movw	r2, #49187	; 0xc023
 8012774:	4293      	cmp	r3, r2
 8012776:	f040 812b 	bne.w	80129d0 <lcp_ackci+0x488>
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ACKCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 801277a:	69fb      	ldr	r3, [r7, #28]
 801277c:	785b      	ldrb	r3, [r3, #1]
 801277e:	f003 0302 	and.w	r3, r3, #2
 8012782:	b2db      	uxtb	r3, r3
 8012784:	2b00      	cmp	r3, #0
 8012786:	d021      	beq.n	80127cc <lcp_ackci+0x284>
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	3b03      	subs	r3, #3
 801278c:	607b      	str	r3, [r7, #4]
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2b00      	cmp	r3, #0
 8012792:	f2c0 811f 	blt.w	80129d4 <lcp_ackci+0x48c>
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	1c5a      	adds	r2, r3, #1
 801279a:	60ba      	str	r2, [r7, #8]
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	76fb      	strb	r3, [r7, #27]
 80127a0:	68bb      	ldr	r3, [r7, #8]
 80127a2:	1c5a      	adds	r2, r3, #1
 80127a4:	60ba      	str	r2, [r7, #8]
 80127a6:	781b      	ldrb	r3, [r3, #0]
 80127a8:	76bb      	strb	r3, [r7, #26]
 80127aa:	7ebb      	ldrb	r3, [r7, #26]
 80127ac:	2b03      	cmp	r3, #3
 80127ae:	f040 8126 	bne.w	80129fe <lcp_ackci+0x4b6>
 80127b2:	7efb      	ldrb	r3, [r7, #27]
 80127b4:	2b0d      	cmp	r3, #13
 80127b6:	f040 8122 	bne.w	80129fe <lcp_ackci+0x4b6>
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	1c5a      	adds	r2, r3, #1
 80127be:	60ba      	str	r2, [r7, #8]
 80127c0:	781b      	ldrb	r3, [r3, #0]
 80127c2:	74fb      	strb	r3, [r7, #19]
 80127c4:	7cfb      	ldrb	r3, [r7, #19]
 80127c6:	2b06      	cmp	r3, #6
 80127c8:	f040 8106 	bne.w	80129d8 <lcp_ackci+0x490>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 80127cc:	69fb      	ldr	r3, [r7, #28]
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127d4:	b2db      	uxtb	r3, r3
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d042      	beq.n	8012860 <lcp_ackci+0x318>
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	3b06      	subs	r3, #6
 80127de:	607b      	str	r3, [r7, #4]
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	f2c0 80fa 	blt.w	80129dc <lcp_ackci+0x494>
 80127e8:	68bb      	ldr	r3, [r7, #8]
 80127ea:	1c5a      	adds	r2, r3, #1
 80127ec:	60ba      	str	r2, [r7, #8]
 80127ee:	781b      	ldrb	r3, [r3, #0]
 80127f0:	76fb      	strb	r3, [r7, #27]
 80127f2:	68bb      	ldr	r3, [r7, #8]
 80127f4:	1c5a      	adds	r2, r3, #1
 80127f6:	60ba      	str	r2, [r7, #8]
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	76bb      	strb	r3, [r7, #26]
 80127fc:	7ebb      	ldrb	r3, [r7, #26]
 80127fe:	2b06      	cmp	r3, #6
 8012800:	f040 80fd 	bne.w	80129fe <lcp_ackci+0x4b6>
 8012804:	7efb      	ldrb	r3, [r7, #27]
 8012806:	2b05      	cmp	r3, #5
 8012808:	f040 80f9 	bne.w	80129fe <lcp_ackci+0x4b6>
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	1c5a      	adds	r2, r3, #1
 8012810:	60ba      	str	r2, [r7, #8]
 8012812:	781b      	ldrb	r3, [r3, #0]
 8012814:	021b      	lsls	r3, r3, #8
 8012816:	617b      	str	r3, [r7, #20]
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	1c5a      	adds	r2, r3, #1
 801281c:	60ba      	str	r2, [r7, #8]
 801281e:	781b      	ldrb	r3, [r3, #0]
 8012820:	461a      	mov	r2, r3
 8012822:	697b      	ldr	r3, [r7, #20]
 8012824:	4313      	orrs	r3, r2
 8012826:	617b      	str	r3, [r7, #20]
 8012828:	697b      	ldr	r3, [r7, #20]
 801282a:	021b      	lsls	r3, r3, #8
 801282c:	617b      	str	r3, [r7, #20]
 801282e:	68bb      	ldr	r3, [r7, #8]
 8012830:	1c5a      	adds	r2, r3, #1
 8012832:	60ba      	str	r2, [r7, #8]
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	461a      	mov	r2, r3
 8012838:	697b      	ldr	r3, [r7, #20]
 801283a:	4313      	orrs	r3, r2
 801283c:	617b      	str	r3, [r7, #20]
 801283e:	697b      	ldr	r3, [r7, #20]
 8012840:	021b      	lsls	r3, r3, #8
 8012842:	617b      	str	r3, [r7, #20]
 8012844:	68bb      	ldr	r3, [r7, #8]
 8012846:	1c5a      	adds	r2, r3, #1
 8012848:	60ba      	str	r2, [r7, #8]
 801284a:	781b      	ldrb	r3, [r3, #0]
 801284c:	461a      	mov	r2, r3
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	4313      	orrs	r3, r2
 8012852:	617b      	str	r3, [r7, #20]
 8012854:	69fb      	ldr	r3, [r7, #28]
 8012856:	68da      	ldr	r2, [r3, #12]
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	429a      	cmp	r2, r3
 801285c:	f040 80c0 	bne.w	80129e0 <lcp_ackci+0x498>
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 8012860:	69fb      	ldr	r3, [r7, #28]
 8012862:	781b      	ldrb	r3, [r3, #0]
 8012864:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012868:	b2db      	uxtb	r3, r3
 801286a:	2b00      	cmp	r3, #0
 801286c:	d018      	beq.n	80128a0 <lcp_ackci+0x358>
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	3b02      	subs	r3, #2
 8012872:	607b      	str	r3, [r7, #4]
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2b00      	cmp	r3, #0
 8012878:	f2c0 80b4 	blt.w	80129e4 <lcp_ackci+0x49c>
 801287c:	68bb      	ldr	r3, [r7, #8]
 801287e:	1c5a      	adds	r2, r3, #1
 8012880:	60ba      	str	r2, [r7, #8]
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	76fb      	strb	r3, [r7, #27]
 8012886:	68bb      	ldr	r3, [r7, #8]
 8012888:	1c5a      	adds	r2, r3, #1
 801288a:	60ba      	str	r2, [r7, #8]
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	76bb      	strb	r3, [r7, #26]
 8012890:	7ebb      	ldrb	r3, [r7, #26]
 8012892:	2b02      	cmp	r3, #2
 8012894:	f040 80b3 	bne.w	80129fe <lcp_ackci+0x4b6>
 8012898:	7efb      	ldrb	r3, [r7, #27]
 801289a:	2b07      	cmp	r3, #7
 801289c:	f040 80af 	bne.w	80129fe <lcp_ackci+0x4b6>
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 80128a0:	69fb      	ldr	r3, [r7, #28]
 80128a2:	785b      	ldrb	r3, [r3, #1]
 80128a4:	f003 0301 	and.w	r3, r3, #1
 80128a8:	b2db      	uxtb	r3, r3
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d018      	beq.n	80128e0 <lcp_ackci+0x398>
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	3b02      	subs	r3, #2
 80128b2:	607b      	str	r3, [r7, #4]
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	f2c0 8096 	blt.w	80129e8 <lcp_ackci+0x4a0>
 80128bc:	68bb      	ldr	r3, [r7, #8]
 80128be:	1c5a      	adds	r2, r3, #1
 80128c0:	60ba      	str	r2, [r7, #8]
 80128c2:	781b      	ldrb	r3, [r3, #0]
 80128c4:	76fb      	strb	r3, [r7, #27]
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	1c5a      	adds	r2, r3, #1
 80128ca:	60ba      	str	r2, [r7, #8]
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	76bb      	strb	r3, [r7, #26]
 80128d0:	7ebb      	ldrb	r3, [r7, #26]
 80128d2:	2b02      	cmp	r3, #2
 80128d4:	f040 8093 	bne.w	80129fe <lcp_ackci+0x4b6>
 80128d8:	7efb      	ldrb	r3, [r7, #27]
 80128da:	2b08      	cmp	r3, #8
 80128dc:	f040 808f 	bne.w	80129fe <lcp_ackci+0x4b6>
#ifdef HAVE_MULTILINK
    ACKCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 80128e0:	69fb      	ldr	r3, [r7, #28]
 80128e2:	785b      	ldrb	r3, [r3, #1]
 80128e4:	f003 0304 	and.w	r3, r3, #4
 80128e8:	b2db      	uxtb	r3, r3
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d015      	beq.n	801291a <lcp_ackci+0x3d2>
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	3b02      	subs	r3, #2
 80128f2:	607b      	str	r3, [r7, #4]
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	db78      	blt.n	80129ec <lcp_ackci+0x4a4>
 80128fa:	68bb      	ldr	r3, [r7, #8]
 80128fc:	1c5a      	adds	r2, r3, #1
 80128fe:	60ba      	str	r2, [r7, #8]
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	76fb      	strb	r3, [r7, #27]
 8012904:	68bb      	ldr	r3, [r7, #8]
 8012906:	1c5a      	adds	r2, r3, #1
 8012908:	60ba      	str	r2, [r7, #8]
 801290a:	781b      	ldrb	r3, [r3, #0]
 801290c:	76bb      	strb	r3, [r7, #26]
 801290e:	7ebb      	ldrb	r3, [r7, #26]
 8012910:	2b02      	cmp	r3, #2
 8012912:	d174      	bne.n	80129fe <lcp_ackci+0x4b6>
 8012914:	7efb      	ldrb	r3, [r7, #27]
 8012916:	2b12      	cmp	r3, #18
 8012918:	d171      	bne.n	80129fe <lcp_ackci+0x4b6>
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 801291a:	69fb      	ldr	r3, [r7, #28]
 801291c:	785b      	ldrb	r3, [r3, #1]
 801291e:	f003 0308 	and.w	r3, r3, #8
 8012922:	b2db      	uxtb	r3, r3
 8012924:	2b00      	cmp	r3, #0
 8012926:	d03e      	beq.n	80129a6 <lcp_ackci+0x45e>
 8012928:	69fb      	ldr	r3, [r7, #28]
 801292a:	7c9b      	ldrb	r3, [r3, #18]
 801292c:	3303      	adds	r3, #3
 801292e:	687a      	ldr	r2, [r7, #4]
 8012930:	1ad3      	subs	r3, r2, r3
 8012932:	607b      	str	r3, [r7, #4]
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2b00      	cmp	r3, #0
 8012938:	db5a      	blt.n	80129f0 <lcp_ackci+0x4a8>
 801293a:	68bb      	ldr	r3, [r7, #8]
 801293c:	1c5a      	adds	r2, r3, #1
 801293e:	60ba      	str	r2, [r7, #8]
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	76fb      	strb	r3, [r7, #27]
 8012944:	68bb      	ldr	r3, [r7, #8]
 8012946:	1c5a      	adds	r2, r3, #1
 8012948:	60ba      	str	r2, [r7, #8]
 801294a:	781b      	ldrb	r3, [r3, #0]
 801294c:	76bb      	strb	r3, [r7, #26]
 801294e:	7eba      	ldrb	r2, [r7, #26]
 8012950:	69fb      	ldr	r3, [r7, #28]
 8012952:	7c9b      	ldrb	r3, [r3, #18]
 8012954:	3303      	adds	r3, #3
 8012956:	429a      	cmp	r2, r3
 8012958:	d151      	bne.n	80129fe <lcp_ackci+0x4b6>
 801295a:	7efb      	ldrb	r3, [r7, #27]
 801295c:	2b13      	cmp	r3, #19
 801295e:	d14e      	bne.n	80129fe <lcp_ackci+0x4b6>
 8012960:	68bb      	ldr	r3, [r7, #8]
 8012962:	1c5a      	adds	r2, r3, #1
 8012964:	60ba      	str	r2, [r7, #8]
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	74fb      	strb	r3, [r7, #19]
 801296a:	69fb      	ldr	r3, [r7, #28]
 801296c:	7c5b      	ldrb	r3, [r3, #17]
 801296e:	7cfa      	ldrb	r2, [r7, #19]
 8012970:	429a      	cmp	r2, r3
 8012972:	d13f      	bne.n	80129f4 <lcp_ackci+0x4ac>
 8012974:	2300      	movs	r3, #0
 8012976:	627b      	str	r3, [r7, #36]	; 0x24
 8012978:	e00f      	b.n	801299a <lcp_ackci+0x452>
 801297a:	68bb      	ldr	r3, [r7, #8]
 801297c:	1c5a      	adds	r2, r3, #1
 801297e:	60ba      	str	r2, [r7, #8]
 8012980:	781b      	ldrb	r3, [r3, #0]
 8012982:	74fb      	strb	r3, [r7, #19]
 8012984:	69fa      	ldr	r2, [r7, #28]
 8012986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012988:	4413      	add	r3, r2
 801298a:	3313      	adds	r3, #19
 801298c:	781b      	ldrb	r3, [r3, #0]
 801298e:	7cfa      	ldrb	r2, [r7, #19]
 8012990:	429a      	cmp	r2, r3
 8012992:	d131      	bne.n	80129f8 <lcp_ackci+0x4b0>
 8012994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012996:	3301      	adds	r3, #1
 8012998:	627b      	str	r3, [r7, #36]	; 0x24
 801299a:	69fb      	ldr	r3, [r7, #28]
 801299c:	7c9b      	ldrb	r3, [r3, #18]
 801299e:	461a      	mov	r2, r3
 80129a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a2:	429a      	cmp	r2, r3
 80129a4:	dce9      	bgt.n	801297a <lcp_ackci+0x432>
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d127      	bne.n	80129fc <lcp_ackci+0x4b4>
	goto bad;
    return (1);
 80129ac:	2301      	movs	r3, #1
 80129ae:	e027      	b.n	8012a00 <lcp_ackci+0x4b8>
    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 80129b0:	bf00      	nop
 80129b2:	e024      	b.n	80129fe <lcp_ackci+0x4b6>
 80129b4:	bf00      	nop
 80129b6:	e022      	b.n	80129fe <lcp_ackci+0x4b6>
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 80129b8:	bf00      	nop
 80129ba:	e020      	b.n	80129fe <lcp_ackci+0x4b6>
 80129bc:	bf00      	nop
 80129be:	e01e      	b.n	80129fe <lcp_ackci+0x4b6>
    ACKCICHAP(CI_AUTHTYPE, go->neg_chap, go->chap_mdtype);
 80129c0:	bf00      	nop
 80129c2:	e01c      	b.n	80129fe <lcp_ackci+0x4b6>
 80129c4:	bf00      	nop
 80129c6:	e01a      	b.n	80129fe <lcp_ackci+0x4b6>
 80129c8:	bf00      	nop
 80129ca:	e018      	b.n	80129fe <lcp_ackci+0x4b6>
    ACKCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
 80129cc:	bf00      	nop
 80129ce:	e016      	b.n	80129fe <lcp_ackci+0x4b6>
 80129d0:	bf00      	nop
 80129d2:	e014      	b.n	80129fe <lcp_ackci+0x4b6>
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 80129d4:	bf00      	nop
 80129d6:	e012      	b.n	80129fe <lcp_ackci+0x4b6>
 80129d8:	bf00      	nop
 80129da:	e010      	b.n	80129fe <lcp_ackci+0x4b6>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 80129dc:	bf00      	nop
 80129de:	e00e      	b.n	80129fe <lcp_ackci+0x4b6>
 80129e0:	bf00      	nop
 80129e2:	e00c      	b.n	80129fe <lcp_ackci+0x4b6>
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 80129e4:	bf00      	nop
 80129e6:	e00a      	b.n	80129fe <lcp_ackci+0x4b6>
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 80129e8:	bf00      	nop
 80129ea:	e008      	b.n	80129fe <lcp_ackci+0x4b6>
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 80129ec:	bf00      	nop
 80129ee:	e006      	b.n	80129fe <lcp_ackci+0x4b6>
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 80129f0:	bf00      	nop
 80129f2:	e004      	b.n	80129fe <lcp_ackci+0x4b6>
 80129f4:	bf00      	nop
 80129f6:	e002      	b.n	80129fe <lcp_ackci+0x4b6>
 80129f8:	bf00      	nop
 80129fa:	e000      	b.n	80129fe <lcp_ackci+0x4b6>
	goto bad;
 80129fc:	bf00      	nop
bad:
    LCPDEBUG(("lcp_acki: received bad Ack!"));
    return (0);
 80129fe:	2300      	movs	r3, #0
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	372c      	adds	r7, #44	; 0x2c
 8012a04:	46bd      	mov	sp, r7
 8012a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0a:	4770      	bx	lr

08012a0c <lcp_nakci>:
 *
 * Returns:
 *	0 - Nak was bad.
 *	1 - Nak was good.
 */
static int lcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 8012a0c:	b5b0      	push	{r4, r5, r7, lr}
 8012a0e:	b0a2      	sub	sp, #136	; 0x88
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	60f8      	str	r0, [r7, #12]
 8012a14:	60b9      	str	r1, [r7, #8]
 8012a16:	607a      	str	r2, [r7, #4]
 8012a18:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    lcp_options *go = &pcb->lcp_gotoptions;
 8012a22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012a26:	33d4      	adds	r3, #212	; 0xd4
 8012a28:	67fb      	str	r3, [r7, #124]	; 0x7c
    lcp_options *wo = &pcb->lcp_wantoptions;
 8012a2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012a2e:	33ac      	adds	r3, #172	; 0xac
 8012a30:	67bb      	str	r3, [r7, #120]	; 0x78
    u_char citype, cichar, *next;
    u_short cishort;
    u32_t cilong;
    lcp_options no;		/* options we've seen Naks for */
    lcp_options try_;		/* options to request next time */
    int looped_back = 0;
 8012a32:	2300      	movs	r3, #0
 8012a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    int cilen;

    BZERO(&no, sizeof(no));
 8012a38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012a3c:	2228      	movs	r2, #40	; 0x28
 8012a3e:	2100      	movs	r1, #0
 8012a40:	4618      	mov	r0, r3
 8012a42:	f005 fc3e 	bl	80182c2 <memset>
    try_ = *go;
 8012a46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a48:	f107 0414 	add.w	r4, r7, #20
 8012a4c:	461d      	mov	r5, r3
 8012a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012a5a:	e884 0003 	stmia.w	r4, {r0, r1}
     * we want.  Therefore, accept any MRU less than what we asked for,
     * but then ignore the new value when setting the MRU in the kernel.
     * If they send us a bigger MRU than what we asked, accept it, up to
     * the limit of the default MRU we'd get if we didn't negotiate.
     */
    if (go->neg_mru && go->mru != PPP_DEFMRU) {
 8012a5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a60:	781b      	ldrb	r3, [r3, #0]
 8012a62:	f003 0304 	and.w	r3, r3, #4
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d045      	beq.n	8012af8 <lcp_nakci+0xec>
 8012a6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a6e:	885b      	ldrh	r3, [r3, #2]
 8012a70:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8012a74:	4293      	cmp	r3, r2
 8012a76:	d03f      	beq.n	8012af8 <lcp_nakci+0xec>
	NAKCISHORT(CI_MRU, neg_mru,
 8012a78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a7a:	781b      	ldrb	r3, [r3, #0]
 8012a7c:	f003 0304 	and.w	r3, r3, #4
 8012a80:	b2db      	uxtb	r3, r3
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d038      	beq.n	8012af8 <lcp_nakci+0xec>
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2b03      	cmp	r3, #3
 8012a8a:	dd35      	ble.n	8012af8 <lcp_nakci+0xec>
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	3301      	adds	r3, #1
 8012a90:	781b      	ldrb	r3, [r3, #0]
 8012a92:	2b04      	cmp	r3, #4
 8012a94:	d130      	bne.n	8012af8 <lcp_nakci+0xec>
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	2b01      	cmp	r3, #1
 8012a9c:	d12c      	bne.n	8012af8 <lcp_nakci+0xec>
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	3b04      	subs	r3, #4
 8012aa2:	607b      	str	r3, [r7, #4]
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	3302      	adds	r3, #2
 8012aa8:	60bb      	str	r3, [r7, #8]
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	1c5a      	adds	r2, r3, #1
 8012aae:	60ba      	str	r2, [r7, #8]
 8012ab0:	781b      	ldrb	r3, [r3, #0]
 8012ab2:	b29b      	uxth	r3, r3
 8012ab4:	021b      	lsls	r3, r3, #8
 8012ab6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	1c5a      	adds	r2, r3, #1
 8012abe:	60ba      	str	r2, [r7, #8]
 8012ac0:	781b      	ldrb	r3, [r3, #0]
 8012ac2:	b29a      	uxth	r2, r3
 8012ac4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8012ac8:	4313      	orrs	r3, r2
 8012aca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8012ace:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8012ad2:	f043 0304 	orr.w	r3, r3, #4
 8012ad6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8012ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012adc:	885b      	ldrh	r3, [r3, #2]
 8012ade:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012ae2:	429a      	cmp	r2, r3
 8012ae4:	d905      	bls.n	8012af2 <lcp_nakci+0xe6>
 8012ae6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8012aea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8012aee:	4293      	cmp	r3, r2
 8012af0:	d802      	bhi.n	8012af8 <lcp_nakci+0xec>
 8012af2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8012af6:	82fb      	strh	r3, [r7, #22]
    }

    /*
     * Add any characters they want to our (receive-side) asyncmap.
     */
    if (go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) {
 8012af8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012afa:	781b      	ldrb	r3, [r3, #0]
 8012afc:	f003 0308 	and.w	r3, r3, #8
 8012b00:	b2db      	uxtb	r3, r3
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d04c      	beq.n	8012ba0 <lcp_nakci+0x194>
 8012b06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012b08:	689b      	ldr	r3, [r3, #8]
 8012b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b0e:	d047      	beq.n	8012ba0 <lcp_nakci+0x194>
	NAKCILONG(CI_ASYNCMAP, neg_asyncmap,
 8012b10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012b12:	781b      	ldrb	r3, [r3, #0]
 8012b14:	f003 0308 	and.w	r3, r3, #8
 8012b18:	b2db      	uxtb	r3, r3
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d040      	beq.n	8012ba0 <lcp_nakci+0x194>
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	2b05      	cmp	r3, #5
 8012b22:	dd3d      	ble.n	8012ba0 <lcp_nakci+0x194>
 8012b24:	68bb      	ldr	r3, [r7, #8]
 8012b26:	3301      	adds	r3, #1
 8012b28:	781b      	ldrb	r3, [r3, #0]
 8012b2a:	2b06      	cmp	r3, #6
 8012b2c:	d138      	bne.n	8012ba0 <lcp_nakci+0x194>
 8012b2e:	68bb      	ldr	r3, [r7, #8]
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	2b02      	cmp	r3, #2
 8012b34:	d134      	bne.n	8012ba0 <lcp_nakci+0x194>
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	3b06      	subs	r3, #6
 8012b3a:	607b      	str	r3, [r7, #4]
 8012b3c:	68bb      	ldr	r3, [r7, #8]
 8012b3e:	3302      	adds	r3, #2
 8012b40:	60bb      	str	r3, [r7, #8]
 8012b42:	68bb      	ldr	r3, [r7, #8]
 8012b44:	1c5a      	adds	r2, r3, #1
 8012b46:	60ba      	str	r2, [r7, #8]
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	021b      	lsls	r3, r3, #8
 8012b4c:	673b      	str	r3, [r7, #112]	; 0x70
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	1c5a      	adds	r2, r3, #1
 8012b52:	60ba      	str	r2, [r7, #8]
 8012b54:	781b      	ldrb	r3, [r3, #0]
 8012b56:	461a      	mov	r2, r3
 8012b58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b5a:	4313      	orrs	r3, r2
 8012b5c:	673b      	str	r3, [r7, #112]	; 0x70
 8012b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b60:	021b      	lsls	r3, r3, #8
 8012b62:	673b      	str	r3, [r7, #112]	; 0x70
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	1c5a      	adds	r2, r3, #1
 8012b68:	60ba      	str	r2, [r7, #8]
 8012b6a:	781b      	ldrb	r3, [r3, #0]
 8012b6c:	461a      	mov	r2, r3
 8012b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b70:	4313      	orrs	r3, r2
 8012b72:	673b      	str	r3, [r7, #112]	; 0x70
 8012b74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b76:	021b      	lsls	r3, r3, #8
 8012b78:	673b      	str	r3, [r7, #112]	; 0x70
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	1c5a      	adds	r2, r3, #1
 8012b7e:	60ba      	str	r2, [r7, #8]
 8012b80:	781b      	ldrb	r3, [r3, #0]
 8012b82:	461a      	mov	r2, r3
 8012b84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b86:	4313      	orrs	r3, r2
 8012b88:	673b      	str	r3, [r7, #112]	; 0x70
 8012b8a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8012b8e:	f043 0308 	orr.w	r3, r3, #8
 8012b92:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8012b96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012b98:	689a      	ldr	r2, [r3, #8]
 8012b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b9c:	4313      	orrs	r3, r2
 8012b9e:	61fb      	str	r3, [r7, #28]
     * they are proposing a different protocol, or a different
     * hash algorithm for CHAP.
     */
    if ((0
#if CHAP_SUPPORT
        || go->neg_chap
 8012ba0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012ba2:	781b      	ldrb	r3, [r3, #0]
 8012ba4:	f003 0320 	and.w	r3, r3, #32
 8012ba8:	b2db      	uxtb	r3, r3
    if ((0
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d107      	bne.n	8012bbe <lcp_nakci+0x1b2>
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
        || go->neg_upap
 8012bae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012bb0:	781b      	ldrb	r3, [r3, #0]
 8012bb2:	f003 0310 	and.w	r3, r3, #16
 8012bb6:	b2db      	uxtb	r3, r3
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	f000 80c0 	beq.w	8012d3e <lcp_nakci+0x332>
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
        || go->neg_eap
#endif /* EAP_SUPPORT */
        )
	&& len >= CILEN_SHORT
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2b03      	cmp	r3, #3
 8012bc2:	f340 80bc 	ble.w	8012d3e <lcp_nakci+0x332>
	&& p[0] == CI_AUTHTYPE && p[1] >= CILEN_SHORT && p[1] <= len) {
 8012bc6:	68bb      	ldr	r3, [r7, #8]
 8012bc8:	781b      	ldrb	r3, [r3, #0]
 8012bca:	2b03      	cmp	r3, #3
 8012bcc:	f040 80b7 	bne.w	8012d3e <lcp_nakci+0x332>
 8012bd0:	68bb      	ldr	r3, [r7, #8]
 8012bd2:	3301      	adds	r3, #1
 8012bd4:	781b      	ldrb	r3, [r3, #0]
 8012bd6:	2b03      	cmp	r3, #3
 8012bd8:	f240 80b1 	bls.w	8012d3e <lcp_nakci+0x332>
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	3301      	adds	r3, #1
 8012be0:	781b      	ldrb	r3, [r3, #0]
 8012be2:	461a      	mov	r2, r3
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	429a      	cmp	r2, r3
 8012be8:	f300 80a9 	bgt.w	8012d3e <lcp_nakci+0x332>
	cilen = p[1];
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	3301      	adds	r3, #1
 8012bf0:	781b      	ldrb	r3, [r3, #0]
 8012bf2:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= cilen;
 8012bf4:	687a      	ldr	r2, [r7, #4]
 8012bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012bf8:	1ad3      	subs	r3, r2, r3
 8012bfa:	607b      	str	r3, [r7, #4]
#if CHAP_SUPPORT
	no.neg_chap = go->neg_chap;
 8012bfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8012c04:	b2da      	uxtb	r2, r3
 8012c06:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8012c0a:	f362 1345 	bfi	r3, r2, #5, #1
 8012c0e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	no.neg_upap = go->neg_upap;
 8012c12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c14:	781b      	ldrb	r3, [r3, #0]
 8012c16:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8012c1a:	b2da      	uxtb	r2, r3
 8012c1c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8012c20:	f362 1304 	bfi	r3, r2, #4, #1
 8012c24:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
	no.neg_eap = go->neg_eap;
#endif /* EAP_SUPPORT */
	INCPTR(2, p);
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	3302      	adds	r3, #2
 8012c2c:	60bb      	str	r3, [r7, #8]
	GETSHORT(cishort, p);
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	1c5a      	adds	r2, r3, #1
 8012c32:	60ba      	str	r2, [r7, #8]
 8012c34:	781b      	ldrb	r3, [r3, #0]
 8012c36:	b29b      	uxth	r3, r3
 8012c38:	021b      	lsls	r3, r3, #8
 8012c3a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	1c5a      	adds	r2, r3, #1
 8012c42:	60ba      	str	r2, [r7, #8]
 8012c44:	781b      	ldrb	r3, [r3, #0]
 8012c46:	b29a      	uxth	r2, r3
 8012c48:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8012c4c:	4313      	orrs	r3, r2
 8012c4e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

#if PAP_SUPPORT
	if (cishort == PPP_PAP && cilen == CILEN_SHORT) {
 8012c52:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8012c56:	f24c 0223 	movw	r2, #49187	; 0xc023
 8012c5a:	4293      	cmp	r3, r2
 8012c5c:	d10f      	bne.n	8012c7e <lcp_nakci+0x272>
 8012c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c60:	2b04      	cmp	r3, #4
 8012c62:	d10c      	bne.n	8012c7e <lcp_nakci+0x272>
	    else
#endif /* EAP_SUPPORT */

#if CHAP_SUPPORT
	    /* If we were asking for CHAP, then we need to stop that. */
	    if (go->neg_chap)
 8012c64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	f003 0320 	and.w	r3, r3, #32
 8012c6c:	b2db      	uxtb	r3, r3
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	f000 82da 	beq.w	8013228 <lcp_nakci+0x81c>
		try_.neg_chap = 0;
 8012c74:	7d3b      	ldrb	r3, [r7, #20]
 8012c76:	f36f 1345 	bfc	r3, #5, #1
 8012c7a:	753b      	strb	r3, [r7, #20]
	    if (go->neg_chap)
 8012c7c:	e05f      	b.n	8012d3e <lcp_nakci+0x332>
		goto bad;
	} else
#endif /* PAP_SUPPORT */

#if CHAP_SUPPORT
	if (cishort == PPP_CHAP && cilen == CILEN_CHAP) {
 8012c7e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8012c82:	f24c 2223 	movw	r2, #49699	; 0xc223
 8012c86:	4293      	cmp	r3, r2
 8012c88:	d142      	bne.n	8012d10 <lcp_nakci+0x304>
 8012c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c8c:	2b05      	cmp	r3, #5
 8012c8e:	d13f      	bne.n	8012d10 <lcp_nakci+0x304>
	    GETCHAR(cichar, p);
 8012c90:	68bb      	ldr	r3, [r7, #8]
 8012c92:	1c5a      	adds	r2, r3, #1
 8012c94:	60ba      	str	r2, [r7, #8]
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		/* Try to set up to use their suggestion, if possible */
		if (CHAP_CANDIGEST(go->chap_mdtype, cichar))
		    try_.chap_mdtype = CHAP_MDTYPE_D(cichar);
	    } else
#endif /* EAP_SUPPORT */
	    if (go->neg_chap) {
 8012c9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c9e:	781b      	ldrb	r3, [r3, #0]
 8012ca0:	f003 0320 	and.w	r3, r3, #32
 8012ca4:	b2db      	uxtb	r3, r3
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d02d      	beq.n	8012d06 <lcp_nakci+0x2fa>
		/*
		 * We were asking for our preferred algorithm, they must
		 * want something different.
		 */
		if (cichar != CHAP_DIGEST(go->chap_mdtype)) {
 8012caa:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8012cae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012cb0:	791b      	ldrb	r3, [r3, #4]
 8012cb2:	f003 0304 	and.w	r3, r3, #4
 8012cb6:	429a      	cmp	r2, r3
 8012cb8:	f000 82b8 	beq.w	801322c <lcp_nakci+0x820>
		    if (CHAP_CANDIGEST(go->chap_mdtype, cichar)) {
 8012cbc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012cc0:	2b05      	cmp	r3, #5
 8012cc2:	d10e      	bne.n	8012ce2 <lcp_nakci+0x2d6>
 8012cc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012cc6:	791b      	ldrb	r3, [r3, #4]
 8012cc8:	f003 0304 	and.w	r3, r3, #4
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d008      	beq.n	8012ce2 <lcp_nakci+0x2d6>
			/* Use their suggestion if we support it ... */
			try_.chap_mdtype = CHAP_MDTYPE_D(cichar);
 8012cd0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012cd4:	2b05      	cmp	r3, #5
 8012cd6:	d101      	bne.n	8012cdc <lcp_nakci+0x2d0>
 8012cd8:	2304      	movs	r3, #4
 8012cda:	e000      	b.n	8012cde <lcp_nakci+0x2d2>
 8012cdc:	2300      	movs	r3, #0
 8012cde:	763b      	strb	r3, [r7, #24]
	    if (go->neg_chap) {
 8012ce0:	e02c      	b.n	8012d3c <lcp_nakci+0x330>
		    } else {
			/* ... otherwise, try our next-preferred algorithm. */
			try_.chap_mdtype &= ~(CHAP_MDTYPE(try_.chap_mdtype));
 8012ce2:	7e3b      	ldrb	r3, [r7, #24]
 8012ce4:	b25a      	sxtb	r2, r3
 8012ce6:	7e3b      	ldrb	r3, [r7, #24]
 8012ce8:	3b01      	subs	r3, #1
 8012cea:	b2db      	uxtb	r3, r3
 8012cec:	b25b      	sxtb	r3, r3
 8012cee:	4013      	ands	r3, r2
 8012cf0:	b25b      	sxtb	r3, r3
 8012cf2:	b2db      	uxtb	r3, r3
 8012cf4:	763b      	strb	r3, [r7, #24]
			if (try_.chap_mdtype == MDTYPE_NONE) /* out of algos */
 8012cf6:	7e3b      	ldrb	r3, [r7, #24]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d11f      	bne.n	8012d3c <lcp_nakci+0x330>
			    try_.neg_chap = 0;
 8012cfc:	7d3b      	ldrb	r3, [r7, #20]
 8012cfe:	f36f 1345 	bfc	r3, #5, #1
 8012d02:	753b      	strb	r3, [r7, #20]
	    if (go->neg_chap) {
 8012d04:	e01a      	b.n	8012d3c <lcp_nakci+0x330>
	    } else {
		/*
		 * Stop asking for PAP if we were asking for it.
		 */
#if PAP_SUPPORT
		try_.neg_upap = 0;
 8012d06:	7d3b      	ldrb	r3, [r7, #20]
 8012d08:	f36f 1304 	bfc	r3, #4, #1
 8012d0c:	753b      	strb	r3, [r7, #20]
	    if (go->neg_chap) {
 8012d0e:	e015      	b.n	8012d3c <lcp_nakci+0x330>
		try_.neg_eap = 0;
	    else
#endif /* EAP_SUPPORT */

#if CHAP_SUPPORT
	    if (go->neg_chap)
 8012d10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012d12:	781b      	ldrb	r3, [r3, #0]
 8012d14:	f003 0320 	and.w	r3, r3, #32
 8012d18:	b2db      	uxtb	r3, r3
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d004      	beq.n	8012d28 <lcp_nakci+0x31c>
		try_.neg_chap = 0;
 8012d1e:	7d3b      	ldrb	r3, [r7, #20]
 8012d20:	f36f 1345 	bfc	r3, #5, #1
 8012d24:	753b      	strb	r3, [r7, #20]
 8012d26:	e003      	b.n	8012d30 <lcp_nakci+0x324>
	    else
#endif /* CHAP_SUPPORT */

#if PAP_SUPPORT
	    if(1)
		try_.neg_upap = 0;
 8012d28:	7d3b      	ldrb	r3, [r7, #20]
 8012d2a:	f36f 1304 	bfc	r3, #4, #1
 8012d2e:	753b      	strb	r3, [r7, #20]
	    else
#endif /* PAP_SUPPORT */
	    {}

	    p += cilen - CILEN_SHORT;
 8012d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012d32:	3b04      	subs	r3, #4
 8012d34:	68ba      	ldr	r2, [r7, #8]
 8012d36:	4413      	add	r3, r2
 8012d38:	60bb      	str	r3, [r7, #8]
 8012d3a:	e000      	b.n	8012d3e <lcp_nakci+0x332>
	    if (go->neg_chap) {
 8012d3c:	bf00      	nop
#endif /* LQR_SUPPORT */

    /*
     * Only implementing CBCP...not the rest of the callback options
     */
    NAKCICHAR(CI_CALLBACK, neg_cbcp,
 8012d3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012d40:	785b      	ldrb	r3, [r3, #1]
 8012d42:	f003 0302 	and.w	r3, r3, #2
 8012d46:	b2db      	uxtb	r3, r3
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d021      	beq.n	8012d90 <lcp_nakci+0x384>
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2b02      	cmp	r3, #2
 8012d50:	dd1e      	ble.n	8012d90 <lcp_nakci+0x384>
 8012d52:	68bb      	ldr	r3, [r7, #8]
 8012d54:	3301      	adds	r3, #1
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	2b03      	cmp	r3, #3
 8012d5a:	d119      	bne.n	8012d90 <lcp_nakci+0x384>
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	781b      	ldrb	r3, [r3, #0]
 8012d60:	2b0d      	cmp	r3, #13
 8012d62:	d115      	bne.n	8012d90 <lcp_nakci+0x384>
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	3b03      	subs	r3, #3
 8012d68:	607b      	str	r3, [r7, #4]
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	3302      	adds	r3, #2
 8012d6e:	60bb      	str	r3, [r7, #8]
 8012d70:	68bb      	ldr	r3, [r7, #8]
 8012d72:	1c5a      	adds	r2, r3, #1
 8012d74:	60ba      	str	r2, [r7, #8]
 8012d76:	781b      	ldrb	r3, [r3, #0]
 8012d78:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8012d7c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8012d80:	f043 0302 	orr.w	r3, r3, #2
 8012d84:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8012d88:	7d7b      	ldrb	r3, [r7, #21]
 8012d8a:	f36f 0341 	bfc	r3, #1, #1
 8012d8e:	757b      	strb	r3, [r7, #21]
              );

    /*
     * Check for a looped-back line.
     */
    NAKCILONG(CI_MAGICNUMBER, neg_magicnumber,
 8012d90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012d92:	781b      	ldrb	r3, [r3, #0]
 8012d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d98:	b2db      	uxtb	r3, r3
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d042      	beq.n	8012e24 <lcp_nakci+0x418>
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	2b05      	cmp	r3, #5
 8012da2:	dd3f      	ble.n	8012e24 <lcp_nakci+0x418>
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	3301      	adds	r3, #1
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	2b06      	cmp	r3, #6
 8012dac:	d13a      	bne.n	8012e24 <lcp_nakci+0x418>
 8012dae:	68bb      	ldr	r3, [r7, #8]
 8012db0:	781b      	ldrb	r3, [r3, #0]
 8012db2:	2b05      	cmp	r3, #5
 8012db4:	d136      	bne.n	8012e24 <lcp_nakci+0x418>
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	3b06      	subs	r3, #6
 8012dba:	607b      	str	r3, [r7, #4]
 8012dbc:	68bb      	ldr	r3, [r7, #8]
 8012dbe:	3302      	adds	r3, #2
 8012dc0:	60bb      	str	r3, [r7, #8]
 8012dc2:	68bb      	ldr	r3, [r7, #8]
 8012dc4:	1c5a      	adds	r2, r3, #1
 8012dc6:	60ba      	str	r2, [r7, #8]
 8012dc8:	781b      	ldrb	r3, [r3, #0]
 8012dca:	021b      	lsls	r3, r3, #8
 8012dcc:	673b      	str	r3, [r7, #112]	; 0x70
 8012dce:	68bb      	ldr	r3, [r7, #8]
 8012dd0:	1c5a      	adds	r2, r3, #1
 8012dd2:	60ba      	str	r2, [r7, #8]
 8012dd4:	781b      	ldrb	r3, [r3, #0]
 8012dd6:	461a      	mov	r2, r3
 8012dd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012dda:	4313      	orrs	r3, r2
 8012ddc:	673b      	str	r3, [r7, #112]	; 0x70
 8012dde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012de0:	021b      	lsls	r3, r3, #8
 8012de2:	673b      	str	r3, [r7, #112]	; 0x70
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	1c5a      	adds	r2, r3, #1
 8012de8:	60ba      	str	r2, [r7, #8]
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	461a      	mov	r2, r3
 8012dee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012df0:	4313      	orrs	r3, r2
 8012df2:	673b      	str	r3, [r7, #112]	; 0x70
 8012df4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012df6:	021b      	lsls	r3, r3, #8
 8012df8:	673b      	str	r3, [r7, #112]	; 0x70
 8012dfa:	68bb      	ldr	r3, [r7, #8]
 8012dfc:	1c5a      	adds	r2, r3, #1
 8012dfe:	60ba      	str	r2, [r7, #8]
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	461a      	mov	r2, r3
 8012e04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012e06:	4313      	orrs	r3, r2
 8012e08:	673b      	str	r3, [r7, #112]	; 0x70
 8012e0a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8012e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e12:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8012e16:	f001 fb3d 	bl	8014494 <magic>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	623b      	str	r3, [r7, #32]
 8012e1e:	2301      	movs	r3, #1
 8012e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    /*
     * Peer shouldn't send Nak for protocol compression or
     * address/control compression requests; they should send
     * a Reject instead.  If they send a Nak, treat it as a Reject.
     */
    NAKCIVOID(CI_PCOMPRESSION, neg_pcompression);
 8012e24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012e2c:	b2db      	uxtb	r3, r3
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d01b      	beq.n	8012e6a <lcp_nakci+0x45e>
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2b01      	cmp	r3, #1
 8012e36:	dd18      	ble.n	8012e6a <lcp_nakci+0x45e>
 8012e38:	68bb      	ldr	r3, [r7, #8]
 8012e3a:	3301      	adds	r3, #1
 8012e3c:	781b      	ldrb	r3, [r3, #0]
 8012e3e:	2b02      	cmp	r3, #2
 8012e40:	d113      	bne.n	8012e6a <lcp_nakci+0x45e>
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	781b      	ldrb	r3, [r3, #0]
 8012e46:	2b07      	cmp	r3, #7
 8012e48:	d10f      	bne.n	8012e6a <lcp_nakci+0x45e>
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	3b02      	subs	r3, #2
 8012e4e:	607b      	str	r3, [r7, #4]
 8012e50:	68bb      	ldr	r3, [r7, #8]
 8012e52:	3302      	adds	r3, #2
 8012e54:	60bb      	str	r3, [r7, #8]
 8012e56:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8012e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e5e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8012e62:	7d3b      	ldrb	r3, [r7, #20]
 8012e64:	f36f 13c7 	bfc	r3, #7, #1
 8012e68:	753b      	strb	r3, [r7, #20]
    NAKCIVOID(CI_ACCOMPRESSION, neg_accompression);
 8012e6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012e6c:	785b      	ldrb	r3, [r3, #1]
 8012e6e:	f003 0301 	and.w	r3, r3, #1
 8012e72:	b2db      	uxtb	r3, r3
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d01b      	beq.n	8012eb0 <lcp_nakci+0x4a4>
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2b01      	cmp	r3, #1
 8012e7c:	dd18      	ble.n	8012eb0 <lcp_nakci+0x4a4>
 8012e7e:	68bb      	ldr	r3, [r7, #8]
 8012e80:	3301      	adds	r3, #1
 8012e82:	781b      	ldrb	r3, [r3, #0]
 8012e84:	2b02      	cmp	r3, #2
 8012e86:	d113      	bne.n	8012eb0 <lcp_nakci+0x4a4>
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	781b      	ldrb	r3, [r3, #0]
 8012e8c:	2b08      	cmp	r3, #8
 8012e8e:	d10f      	bne.n	8012eb0 <lcp_nakci+0x4a4>
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	3b02      	subs	r3, #2
 8012e94:	607b      	str	r3, [r7, #4]
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	3302      	adds	r3, #2
 8012e9a:	60bb      	str	r3, [r7, #8]
 8012e9c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8012ea0:	f043 0301 	orr.w	r3, r3, #1
 8012ea4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8012ea8:	7d7b      	ldrb	r3, [r7, #21]
 8012eaa:	f36f 0300 	bfc	r3, #0, #1
 8012eae:	757b      	strb	r3, [r7, #21]

    /*
     * Nak for short sequence numbers shouldn't be sent, treat it
     * like a reject.
     */
    NAKCIVOID(CI_SSNHF, neg_ssnhf);
 8012eb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012eb2:	785b      	ldrb	r3, [r3, #1]
 8012eb4:	f003 0304 	and.w	r3, r3, #4
 8012eb8:	b2db      	uxtb	r3, r3
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d01b      	beq.n	8012ef6 <lcp_nakci+0x4ea>
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	2b01      	cmp	r3, #1
 8012ec2:	dd18      	ble.n	8012ef6 <lcp_nakci+0x4ea>
 8012ec4:	68bb      	ldr	r3, [r7, #8]
 8012ec6:	3301      	adds	r3, #1
 8012ec8:	781b      	ldrb	r3, [r3, #0]
 8012eca:	2b02      	cmp	r3, #2
 8012ecc:	d113      	bne.n	8012ef6 <lcp_nakci+0x4ea>
 8012ece:	68bb      	ldr	r3, [r7, #8]
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	2b12      	cmp	r3, #18
 8012ed4:	d10f      	bne.n	8012ef6 <lcp_nakci+0x4ea>
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	3b02      	subs	r3, #2
 8012eda:	607b      	str	r3, [r7, #4]
 8012edc:	68bb      	ldr	r3, [r7, #8]
 8012ede:	3302      	adds	r3, #2
 8012ee0:	60bb      	str	r3, [r7, #8]
 8012ee2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8012ee6:	f043 0304 	orr.w	r3, r3, #4
 8012eea:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8012eee:	7d7b      	ldrb	r3, [r7, #21]
 8012ef0:	f36f 0382 	bfc	r3, #2, #1
 8012ef4:	757b      	strb	r3, [r7, #21]

    /*
     * Nak of the endpoint discriminator option is not permitted,
     * treat it like a reject.
     */
    NAKCIENDP(CI_EPDISC, neg_endpoint);
 8012ef6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012ef8:	785b      	ldrb	r3, [r3, #1]
 8012efa:	f003 0308 	and.w	r3, r3, #8
 8012efe:	b2db      	uxtb	r3, r3
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	f000 8158 	beq.w	80131b6 <lcp_nakci+0x7aa>
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	2b02      	cmp	r3, #2
 8012f0a:	f340 8154 	ble.w	80131b6 <lcp_nakci+0x7aa>
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	781b      	ldrb	r3, [r3, #0]
 8012f12:	2b13      	cmp	r3, #19
 8012f14:	f040 814f 	bne.w	80131b6 <lcp_nakci+0x7aa>
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	3301      	adds	r3, #1
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	2b02      	cmp	r3, #2
 8012f20:	f240 8149 	bls.w	80131b6 <lcp_nakci+0x7aa>
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	3301      	adds	r3, #1
 8012f28:	781b      	ldrb	r3, [r3, #0]
 8012f2a:	461a      	mov	r2, r3
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	f300 8141 	bgt.w	80131b6 <lcp_nakci+0x7aa>
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	3301      	adds	r3, #1
 8012f38:	781b      	ldrb	r3, [r3, #0]
 8012f3a:	461a      	mov	r2, r3
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	1a9b      	subs	r3, r3, r2
 8012f40:	607b      	str	r3, [r7, #4]
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	3301      	adds	r3, #1
 8012f46:	781b      	ldrb	r3, [r3, #0]
 8012f48:	461a      	mov	r2, r3
 8012f4a:	68bb      	ldr	r3, [r7, #8]
 8012f4c:	4413      	add	r3, r2
 8012f4e:	60bb      	str	r3, [r7, #8]
 8012f50:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8012f54:	f043 0308 	orr.w	r3, r3, #8
 8012f58:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8012f5c:	7d7b      	ldrb	r3, [r7, #21]
 8012f5e:	f36f 03c3 	bfc	r3, #3, #1
 8012f62:	757b      	strb	r3, [r7, #21]
     * For the quality protocol, the Nak means `ask me to send you quality
     * reports', but if we didn't ask for them, we don't want them.
     * An option we don't recognize represents the peer asking to
     * negotiate some option we don't support, so ignore it.
     */
    while (len >= CILEN_VOID) {
 8012f64:	e127      	b.n	80131b6 <lcp_nakci+0x7aa>
	GETCHAR(citype, p);
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	1c5a      	adds	r2, r3, #1
 8012f6a:	60ba      	str	r2, [r7, #8]
 8012f6c:	781b      	ldrb	r3, [r3, #0]
 8012f6e:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	GETCHAR(cilen, p);
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	1c5a      	adds	r2, r3, #1
 8012f76:	60ba      	str	r2, [r7, #8]
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (cilen < CILEN_VOID || (len -= cilen) < 0)
 8012f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012f7e:	2b01      	cmp	r3, #1
 8012f80:	f340 8155 	ble.w	801322e <lcp_nakci+0x822>
 8012f84:	687a      	ldr	r2, [r7, #4]
 8012f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012f88:	1ad3      	subs	r3, r2, r3
 8012f8a:	607b      	str	r3, [r7, #4]
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	f2c0 814d 	blt.w	801322e <lcp_nakci+0x822>
	    goto bad;
	next = p + cilen - 2;
 8012f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012f96:	3b02      	subs	r3, #2
 8012f98:	68ba      	ldr	r2, [r7, #8]
 8012f9a:	4413      	add	r3, r2
 8012f9c:	667b      	str	r3, [r7, #100]	; 0x64

	switch (citype) {
 8012f9e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8012fa2:	3b01      	subs	r3, #1
 8012fa4:	2b12      	cmp	r3, #18
 8012fa6:	f200 8101 	bhi.w	80131ac <lcp_nakci+0x7a0>
 8012faa:	a201      	add	r2, pc, #4	; (adr r2, 8012fb0 <lcp_nakci+0x5a4>)
 8012fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fb0:	08012ffd 	.word	0x08012ffd
 8012fb4:	08013073 	.word	0x08013073
 8012fb8:	080130a7 	.word	0x080130a7
 8012fbc:	080131ad 	.word	0x080131ad
 8012fc0:	080130e9 	.word	0x080130e9
 8012fc4:	080131ad 	.word	0x080131ad
 8012fc8:	08013113 	.word	0x08013113
 8012fcc:	08013139 	.word	0x08013139
 8012fd0:	080131ad 	.word	0x080131ad
 8012fd4:	080131ad 	.word	0x080131ad
 8012fd8:	080131ad 	.word	0x080131ad
 8012fdc:	080131ad 	.word	0x080131ad
 8012fe0:	080131ad 	.word	0x080131ad
 8012fe4:	080131ad 	.word	0x080131ad
 8012fe8:	080131ad 	.word	0x080131ad
 8012fec:	080131ad 	.word	0x080131ad
 8012ff0:	080131ad 	.word	0x080131ad
 8012ff4:	0801315d 	.word	0x0801315d
 8012ff8:	08013189 	.word	0x08013189
	case CI_MRU:
	    if ((go->neg_mru && go->mru != PPP_DEFMRU)
 8012ffc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012ffe:	781b      	ldrb	r3, [r3, #0]
 8013000:	f003 0304 	and.w	r3, r3, #4
 8013004:	b2db      	uxtb	r3, r3
 8013006:	2b00      	cmp	r3, #0
 8013008:	d006      	beq.n	8013018 <lcp_nakci+0x60c>
 801300a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801300c:	885b      	ldrh	r3, [r3, #2]
 801300e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8013012:	4293      	cmp	r3, r2
 8013014:	f040 810b 	bne.w	801322e <lcp_nakci+0x822>
		|| no.neg_mru || cilen != CILEN_SHORT)
 8013018:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801301c:	f003 0304 	and.w	r3, r3, #4
 8013020:	b2db      	uxtb	r3, r3
 8013022:	2b00      	cmp	r3, #0
 8013024:	f040 8103 	bne.w	801322e <lcp_nakci+0x822>
 8013028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801302a:	2b04      	cmp	r3, #4
 801302c:	f040 80ff 	bne.w	801322e <lcp_nakci+0x822>
		goto bad;
	    GETSHORT(cishort, p);
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	1c5a      	adds	r2, r3, #1
 8013034:	60ba      	str	r2, [r7, #8]
 8013036:	781b      	ldrb	r3, [r3, #0]
 8013038:	b29b      	uxth	r3, r3
 801303a:	021b      	lsls	r3, r3, #8
 801303c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8013040:	68bb      	ldr	r3, [r7, #8]
 8013042:	1c5a      	adds	r2, r3, #1
 8013044:	60ba      	str	r2, [r7, #8]
 8013046:	781b      	ldrb	r3, [r3, #0]
 8013048:	b29a      	uxth	r2, r3
 801304a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 801304e:	4313      	orrs	r3, r2
 8013050:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	    if (cishort < PPP_DEFMRU) {
 8013054:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8013058:	f240 52db 	movw	r2, #1499	; 0x5db
 801305c:	4293      	cmp	r3, r2
 801305e:	f200 80a7 	bhi.w	80131b0 <lcp_nakci+0x7a4>
		try_.neg_mru = 1;
 8013062:	7d3b      	ldrb	r3, [r7, #20]
 8013064:	f043 0304 	orr.w	r3, r3, #4
 8013068:	753b      	strb	r3, [r7, #20]
		try_.mru = cishort;
 801306a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 801306e:	82fb      	strh	r3, [r7, #22]
	    }
	    break;
 8013070:	e09e      	b.n	80131b0 <lcp_nakci+0x7a4>
	case CI_ASYNCMAP:
	    if ((go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF)
 8013072:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013074:	781b      	ldrb	r3, [r3, #0]
 8013076:	f003 0308 	and.w	r3, r3, #8
 801307a:	b2db      	uxtb	r3, r3
 801307c:	2b00      	cmp	r3, #0
 801307e:	d005      	beq.n	801308c <lcp_nakci+0x680>
 8013080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013082:	689b      	ldr	r3, [r3, #8]
 8013084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013088:	f040 80d1 	bne.w	801322e <lcp_nakci+0x822>
		|| no.neg_asyncmap || cilen != CILEN_LONG)
 801308c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8013090:	f003 0308 	and.w	r3, r3, #8
 8013094:	b2db      	uxtb	r3, r3
 8013096:	2b00      	cmp	r3, #0
 8013098:	f040 80c9 	bne.w	801322e <lcp_nakci+0x822>
 801309c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801309e:	2b06      	cmp	r3, #6
 80130a0:	f040 80c5 	bne.w	801322e <lcp_nakci+0x822>
		goto bad;
	    break;
 80130a4:	e085      	b.n	80131b2 <lcp_nakci+0x7a6>
		 * Thus the double parentheses to mark the code explicitly
		 * disabled when building with clang
		 */
	    if ((0
#if CHAP_SUPPORT
                || go->neg_chap || no.neg_chap
 80130a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80130a8:	781b      	ldrb	r3, [r3, #0]
 80130aa:	f003 0320 	and.w	r3, r3, #32
 80130ae:	b2db      	uxtb	r3, r3
	    if ((0
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	f040 80bc 	bne.w	801322e <lcp_nakci+0x822>
                || go->neg_chap || no.neg_chap
 80130b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80130ba:	f003 0320 	and.w	r3, r3, #32
 80130be:	b2db      	uxtb	r3, r3
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	f040 80b4 	bne.w	801322e <lcp_nakci+0x822>
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
                || go->neg_upap || no.neg_upap
 80130c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80130c8:	781b      	ldrb	r3, [r3, #0]
 80130ca:	f003 0310 	and.w	r3, r3, #16
 80130ce:	b2db      	uxtb	r3, r3
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	f040 80ac 	bne.w	801322e <lcp_nakci+0x822>
 80130d6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80130da:	f003 0310 	and.w	r3, r3, #16
 80130de:	b2db      	uxtb	r3, r3
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	f040 80a4 	bne.w	801322e <lcp_nakci+0x822>
#if EAP_SUPPORT
		|| go->neg_eap || no.neg_eap
#endif /* EAP_SUPPORT */
		))
		goto bad;
	    break;
 80130e6:	e064      	b.n	80131b2 <lcp_nakci+0x7a6>
	case CI_MAGICNUMBER:
	    if (go->neg_magicnumber || no.neg_magicnumber ||
 80130e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130f0:	b2db      	uxtb	r3, r3
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	f040 809b 	bne.w	801322e <lcp_nakci+0x822>
 80130f8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80130fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013100:	b2db      	uxtb	r3, r3
 8013102:	2b00      	cmp	r3, #0
 8013104:	f040 8093 	bne.w	801322e <lcp_nakci+0x822>
 8013108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801310a:	2b06      	cmp	r3, #6
 801310c:	f040 808f 	bne.w	801322e <lcp_nakci+0x822>
		cilen != CILEN_LONG)
		goto bad;
	    break;
 8013110:	e04f      	b.n	80131b2 <lcp_nakci+0x7a6>
	case CI_PCOMPRESSION:
	    if (go->neg_pcompression || no.neg_pcompression
 8013112:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013114:	781b      	ldrb	r3, [r3, #0]
 8013116:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801311a:	b2db      	uxtb	r3, r3
 801311c:	2b00      	cmp	r3, #0
 801311e:	f040 8086 	bne.w	801322e <lcp_nakci+0x822>
 8013122:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8013126:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801312a:	b2db      	uxtb	r3, r3
 801312c:	2b00      	cmp	r3, #0
 801312e:	d17e      	bne.n	801322e <lcp_nakci+0x822>
		|| cilen != CILEN_VOID)
 8013130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013132:	2b02      	cmp	r3, #2
 8013134:	d17b      	bne.n	801322e <lcp_nakci+0x822>
		goto bad;
	    break;
 8013136:	e03c      	b.n	80131b2 <lcp_nakci+0x7a6>
	case CI_ACCOMPRESSION:
	    if (go->neg_accompression || no.neg_accompression
 8013138:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801313a:	785b      	ldrb	r3, [r3, #1]
 801313c:	f003 0301 	and.w	r3, r3, #1
 8013140:	b2db      	uxtb	r3, r3
 8013142:	2b00      	cmp	r3, #0
 8013144:	d173      	bne.n	801322e <lcp_nakci+0x822>
 8013146:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801314a:	f003 0301 	and.w	r3, r3, #1
 801314e:	b2db      	uxtb	r3, r3
 8013150:	2b00      	cmp	r3, #0
 8013152:	d16c      	bne.n	801322e <lcp_nakci+0x822>
		|| cilen != CILEN_VOID)
 8013154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013156:	2b02      	cmp	r3, #2
 8013158:	d169      	bne.n	801322e <lcp_nakci+0x822>
		goto bad;
	    break;
 801315a:	e02a      	b.n	80131b2 <lcp_nakci+0x7a6>
	    if (go->neg_mrru || no.neg_mrru || cilen != CILEN_SHORT)
		goto bad;
	    break;
#endif /* HAVE_MULTILINK */
	case CI_SSNHF:
	    if (go->neg_ssnhf || no.neg_ssnhf || cilen != CILEN_VOID)
 801315c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801315e:	785b      	ldrb	r3, [r3, #1]
 8013160:	f003 0304 	and.w	r3, r3, #4
 8013164:	b2db      	uxtb	r3, r3
 8013166:	2b00      	cmp	r3, #0
 8013168:	d161      	bne.n	801322e <lcp_nakci+0x822>
 801316a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801316e:	f003 0304 	and.w	r3, r3, #4
 8013172:	b2db      	uxtb	r3, r3
 8013174:	2b00      	cmp	r3, #0
 8013176:	d15a      	bne.n	801322e <lcp_nakci+0x822>
 8013178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801317a:	2b02      	cmp	r3, #2
 801317c:	d157      	bne.n	801322e <lcp_nakci+0x822>
		goto bad;
	    try_.neg_ssnhf = 1;
 801317e:	7d7b      	ldrb	r3, [r7, #21]
 8013180:	f043 0304 	orr.w	r3, r3, #4
 8013184:	757b      	strb	r3, [r7, #21]
	    break;
 8013186:	e014      	b.n	80131b2 <lcp_nakci+0x7a6>
	case CI_EPDISC:
	    if (go->neg_endpoint || no.neg_endpoint || cilen < CILEN_CHAR)
 8013188:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801318a:	785b      	ldrb	r3, [r3, #1]
 801318c:	f003 0308 	and.w	r3, r3, #8
 8013190:	b2db      	uxtb	r3, r3
 8013192:	2b00      	cmp	r3, #0
 8013194:	d14b      	bne.n	801322e <lcp_nakci+0x822>
 8013196:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801319a:	f003 0308 	and.w	r3, r3, #8
 801319e:	b2db      	uxtb	r3, r3
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d144      	bne.n	801322e <lcp_nakci+0x822>
 80131a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80131a6:	2b02      	cmp	r3, #2
 80131a8:	dd41      	ble.n	801322e <lcp_nakci+0x822>
		goto bad;
	    break;
 80131aa:	e002      	b.n	80131b2 <lcp_nakci+0x7a6>
	default:
	    break;
 80131ac:	bf00      	nop
 80131ae:	e000      	b.n	80131b2 <lcp_nakci+0x7a6>
	    break;
 80131b0:	bf00      	nop
	}
	p = next;
 80131b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80131b4:	60bb      	str	r3, [r7, #8]
    while (len >= CILEN_VOID) {
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2b01      	cmp	r3, #1
 80131ba:	f73f aed4 	bgt.w	8012f66 <lcp_nakci+0x55a>

    /*
     * OK, the Nak is good.  Now we can update state.
     * If there are any options left we ignore them.
     */
    if (f->state != PPP_FSM_OPENED) {
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	7c1b      	ldrb	r3, [r3, #16]
 80131c2:	2b09      	cmp	r3, #9
 80131c4:	d02e      	beq.n	8013224 <lcp_nakci+0x818>
	if (looped_back) {
 80131c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d01b      	beq.n	8013206 <lcp_nakci+0x7fa>
	    if (++try_.numloops >= pcb->settings.lcp_loopbackfail) {
 80131ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80131d2:	3301      	adds	r3, #1
 80131d4:	b2db      	uxtb	r3, r3
 80131d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80131da:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80131de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80131e2:	7c9b      	ldrb	r3, [r3, #18]
 80131e4:	429a      	cmp	r2, r3
 80131e6:	d311      	bcc.n	801320c <lcp_nakci+0x800>
		ppp_notice(("Serial line is looped back."));
 80131e8:	4813      	ldr	r0, [pc, #76]	; (8013238 <lcp_nakci+0x82c>)
 80131ea:	f004 fac5 	bl	8017778 <ppp_notice_impl>
		pcb->err_code = PPPERR_LOOPBACK;
 80131ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80131f2:	220c      	movs	r2, #12
 80131f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		lcp_close(f->pcb, "Loopback detected");
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	490f      	ldr	r1, [pc, #60]	; (801323c <lcp_nakci+0x830>)
 80131fe:	4618      	mov	r0, r3
 8013200:	f7fe fd18 	bl	8011c34 <lcp_close>
 8013204:	e002      	b.n	801320c <lcp_nakci+0x800>
	    }
	} else
	    try_.numloops = 0;
 8013206:	2300      	movs	r3, #0
 8013208:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	*go = try_;
 801320c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801320e:	461d      	mov	r5, r3
 8013210:	f107 0414 	add.w	r4, r7, #20
 8013214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801321a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801321c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013220:	e885 0003 	stmia.w	r5, {r0, r1}
    }

    return 1;
 8013224:	2301      	movs	r3, #1
 8013226:	e003      	b.n	8013230 <lcp_nakci+0x824>
		goto bad;
 8013228:	bf00      	nop
 801322a:	e000      	b.n	801322e <lcp_nakci+0x822>
		    goto bad;
 801322c:	bf00      	nop

bad:
    LCPDEBUG(("lcp_nakci: received bad Nak!"));
    return 0;
 801322e:	2300      	movs	r3, #0
}
 8013230:	4618      	mov	r0, r3
 8013232:	3788      	adds	r7, #136	; 0x88
 8013234:	46bd      	mov	sp, r7
 8013236:	bdb0      	pop	{r4, r5, r7, pc}
 8013238:	0801cff4 	.word	0x0801cff4
 801323c:	0801d010 	.word	0x0801d010

08013240 <lcp_rejci>:
 *
 * Returns:
 *	0 - Reject was bad.
 *	1 - Reject was good.
 */
static int lcp_rejci(fsm *f, u_char *p, int len) {
 8013240:	b4b0      	push	{r4, r5, r7}
 8013242:	b095      	sub	sp, #84	; 0x54
 8013244:	af00      	add	r7, sp, #0
 8013246:	60f8      	str	r0, [r7, #12]
 8013248:	60b9      	str	r1, [r7, #8]
 801324a:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	64bb      	str	r3, [r7, #72]	; 0x48
    lcp_options *go = &pcb->lcp_gotoptions;
 8013252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013254:	33d4      	adds	r3, #212	; 0xd4
 8013256:	647b      	str	r3, [r7, #68]	; 0x44
    u_char cichar;
    u_short cishort;
    u32_t cilong;
    lcp_options try_;		/* options to request next time */

    try_ = *go;
 8013258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801325a:	f107 0410 	add.w	r4, r7, #16
 801325e:	461d      	mov	r5, r3
 8013260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013268:	e895 0003 	ldmia.w	r5, {r0, r1}
 801326c:	e884 0003 	stmia.w	r4, {r0, r1}
		goto bad; \
	} \
	try_.neg = 0; \
    }

    REJCISHORT(CI_MRU, neg_mru, go->mru);
 8013270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	f003 0304 	and.w	r3, r3, #4
 8013278:	b2db      	uxtb	r3, r3
 801327a:	2b00      	cmp	r3, #0
 801327c:	d02e      	beq.n	80132dc <lcp_rejci+0x9c>
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	2b03      	cmp	r3, #3
 8013282:	dd2b      	ble.n	80132dc <lcp_rejci+0x9c>
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	3301      	adds	r3, #1
 8013288:	781b      	ldrb	r3, [r3, #0]
 801328a:	2b04      	cmp	r3, #4
 801328c:	d126      	bne.n	80132dc <lcp_rejci+0x9c>
 801328e:	68bb      	ldr	r3, [r7, #8]
 8013290:	781b      	ldrb	r3, [r3, #0]
 8013292:	2b01      	cmp	r3, #1
 8013294:	d122      	bne.n	80132dc <lcp_rejci+0x9c>
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	3b04      	subs	r3, #4
 801329a:	607b      	str	r3, [r7, #4]
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	3302      	adds	r3, #2
 80132a0:	60bb      	str	r3, [r7, #8]
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	1c5a      	adds	r2, r3, #1
 80132a6:	60ba      	str	r2, [r7, #8]
 80132a8:	781b      	ldrb	r3, [r3, #0]
 80132aa:	b29b      	uxth	r3, r3
 80132ac:	021b      	lsls	r3, r3, #8
 80132ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	1c5a      	adds	r2, r3, #1
 80132b6:	60ba      	str	r2, [r7, #8]
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	b29a      	uxth	r2, r3
 80132bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80132c0:	4313      	orrs	r3, r2
 80132c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80132c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132c8:	885b      	ldrh	r3, [r3, #2]
 80132ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80132ce:	429a      	cmp	r2, r3
 80132d0:	f040 81ff 	bne.w	80136d2 <lcp_rejci+0x492>
 80132d4:	7c3b      	ldrb	r3, [r7, #16]
 80132d6:	f36f 0382 	bfc	r3, #2, #1
 80132da:	743b      	strb	r3, [r7, #16]
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 80132dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132de:	781b      	ldrb	r3, [r3, #0]
 80132e0:	f003 0308 	and.w	r3, r3, #8
 80132e4:	b2db      	uxtb	r3, r3
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d03f      	beq.n	801336a <lcp_rejci+0x12a>
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2b05      	cmp	r3, #5
 80132ee:	dd3c      	ble.n	801336a <lcp_rejci+0x12a>
 80132f0:	68bb      	ldr	r3, [r7, #8]
 80132f2:	3301      	adds	r3, #1
 80132f4:	781b      	ldrb	r3, [r3, #0]
 80132f6:	2b06      	cmp	r3, #6
 80132f8:	d137      	bne.n	801336a <lcp_rejci+0x12a>
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	781b      	ldrb	r3, [r3, #0]
 80132fe:	2b02      	cmp	r3, #2
 8013300:	d133      	bne.n	801336a <lcp_rejci+0x12a>
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	3b06      	subs	r3, #6
 8013306:	607b      	str	r3, [r7, #4]
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	3302      	adds	r3, #2
 801330c:	60bb      	str	r3, [r7, #8]
 801330e:	68bb      	ldr	r3, [r7, #8]
 8013310:	1c5a      	adds	r2, r3, #1
 8013312:	60ba      	str	r2, [r7, #8]
 8013314:	781b      	ldrb	r3, [r3, #0]
 8013316:	021b      	lsls	r3, r3, #8
 8013318:	63fb      	str	r3, [r7, #60]	; 0x3c
 801331a:	68bb      	ldr	r3, [r7, #8]
 801331c:	1c5a      	adds	r2, r3, #1
 801331e:	60ba      	str	r2, [r7, #8]
 8013320:	781b      	ldrb	r3, [r3, #0]
 8013322:	461a      	mov	r2, r3
 8013324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013326:	4313      	orrs	r3, r2
 8013328:	63fb      	str	r3, [r7, #60]	; 0x3c
 801332a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801332c:	021b      	lsls	r3, r3, #8
 801332e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013330:	68bb      	ldr	r3, [r7, #8]
 8013332:	1c5a      	adds	r2, r3, #1
 8013334:	60ba      	str	r2, [r7, #8]
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	461a      	mov	r2, r3
 801333a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801333c:	4313      	orrs	r3, r2
 801333e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013342:	021b      	lsls	r3, r3, #8
 8013344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013346:	68bb      	ldr	r3, [r7, #8]
 8013348:	1c5a      	adds	r2, r3, #1
 801334a:	60ba      	str	r2, [r7, #8]
 801334c:	781b      	ldrb	r3, [r3, #0]
 801334e:	461a      	mov	r2, r3
 8013350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013352:	4313      	orrs	r3, r2
 8013354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013358:	689a      	ldr	r2, [r3, #8]
 801335a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801335c:	429a      	cmp	r2, r3
 801335e:	f040 81ba 	bne.w	80136d6 <lcp_rejci+0x496>
 8013362:	7c3b      	ldrb	r3, [r7, #16]
 8013364:	f36f 03c3 	bfc	r3, #3, #1
 8013368:	743b      	strb	r3, [r7, #16]
#if EAP_SUPPORT
    REJCISHORT(CI_AUTHTYPE, neg_eap, PPP_EAP);
    if (!go->neg_eap) {
#endif /* EAP_SUPPORT */
#if CHAP_SUPPORT
	REJCICHAP(CI_AUTHTYPE, neg_chap, go->chap_mdtype);
 801336a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801336c:	781b      	ldrb	r3, [r3, #0]
 801336e:	f003 0320 	and.w	r3, r3, #32
 8013372:	b2db      	uxtb	r3, r3
 8013374:	2b00      	cmp	r3, #0
 8013376:	d046      	beq.n	8013406 <lcp_rejci+0x1c6>
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	2b04      	cmp	r3, #4
 801337c:	dd43      	ble.n	8013406 <lcp_rejci+0x1c6>
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	3301      	adds	r3, #1
 8013382:	781b      	ldrb	r3, [r3, #0]
 8013384:	2b05      	cmp	r3, #5
 8013386:	d13e      	bne.n	8013406 <lcp_rejci+0x1c6>
 8013388:	68bb      	ldr	r3, [r7, #8]
 801338a:	781b      	ldrb	r3, [r3, #0]
 801338c:	2b03      	cmp	r3, #3
 801338e:	d13a      	bne.n	8013406 <lcp_rejci+0x1c6>
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	3b05      	subs	r3, #5
 8013394:	607b      	str	r3, [r7, #4]
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	3302      	adds	r3, #2
 801339a:	60bb      	str	r3, [r7, #8]
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	1c5a      	adds	r2, r3, #1
 80133a0:	60ba      	str	r2, [r7, #8]
 80133a2:	781b      	ldrb	r3, [r3, #0]
 80133a4:	b29b      	uxth	r3, r3
 80133a6:	021b      	lsls	r3, r3, #8
 80133a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	1c5a      	adds	r2, r3, #1
 80133b0:	60ba      	str	r2, [r7, #8]
 80133b2:	781b      	ldrb	r3, [r3, #0]
 80133b4:	b29a      	uxth	r2, r3
 80133b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80133ba:	4313      	orrs	r3, r2
 80133bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80133c0:	68bb      	ldr	r3, [r7, #8]
 80133c2:	1c5a      	adds	r2, r3, #1
 80133c4:	60ba      	str	r2, [r7, #8]
 80133c6:	781b      	ldrb	r3, [r3, #0]
 80133c8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80133cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80133d0:	f24c 2223 	movw	r2, #49699	; 0xc223
 80133d4:	4293      	cmp	r3, r2
 80133d6:	f040 818b 	bne.w	80136f0 <lcp_rejci+0x4b0>
 80133da:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80133de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133e0:	791b      	ldrb	r3, [r3, #4]
 80133e2:	f003 0304 	and.w	r3, r3, #4
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d001      	beq.n	80133ee <lcp_rejci+0x1ae>
 80133ea:	2305      	movs	r3, #5
 80133ec:	e000      	b.n	80133f0 <lcp_rejci+0x1b0>
 80133ee:	2300      	movs	r3, #0
 80133f0:	429a      	cmp	r2, r3
 80133f2:	f040 817d 	bne.w	80136f0 <lcp_rejci+0x4b0>
 80133f6:	7c3b      	ldrb	r3, [r7, #16]
 80133f8:	f36f 1345 	bfc	r3, #5, #1
 80133fc:	743b      	strb	r3, [r7, #16]
 80133fe:	7c3b      	ldrb	r3, [r7, #16]
 8013400:	f36f 1304 	bfc	r3, #4, #1
 8013404:	743b      	strb	r3, [r7, #16]
	if (!go->neg_chap) {
 8013406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013408:	781b      	ldrb	r3, [r3, #0]
 801340a:	f003 0320 	and.w	r3, r3, #32
 801340e:	b2db      	uxtb	r3, r3
 8013410:	2b00      	cmp	r3, #0
 8013412:	d135      	bne.n	8013480 <lcp_rejci+0x240>
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
 8013414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013416:	781b      	ldrb	r3, [r3, #0]
 8013418:	f003 0310 	and.w	r3, r3, #16
 801341c:	b2db      	uxtb	r3, r3
 801341e:	2b00      	cmp	r3, #0
 8013420:	d02e      	beq.n	8013480 <lcp_rejci+0x240>
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	2b03      	cmp	r3, #3
 8013426:	dd2b      	ble.n	8013480 <lcp_rejci+0x240>
 8013428:	68bb      	ldr	r3, [r7, #8]
 801342a:	3301      	adds	r3, #1
 801342c:	781b      	ldrb	r3, [r3, #0]
 801342e:	2b04      	cmp	r3, #4
 8013430:	d126      	bne.n	8013480 <lcp_rejci+0x240>
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	781b      	ldrb	r3, [r3, #0]
 8013436:	2b03      	cmp	r3, #3
 8013438:	d122      	bne.n	8013480 <lcp_rejci+0x240>
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	3b04      	subs	r3, #4
 801343e:	607b      	str	r3, [r7, #4]
 8013440:	68bb      	ldr	r3, [r7, #8]
 8013442:	3302      	adds	r3, #2
 8013444:	60bb      	str	r3, [r7, #8]
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	1c5a      	adds	r2, r3, #1
 801344a:	60ba      	str	r2, [r7, #8]
 801344c:	781b      	ldrb	r3, [r3, #0]
 801344e:	b29b      	uxth	r3, r3
 8013450:	021b      	lsls	r3, r3, #8
 8013452:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013456:	68bb      	ldr	r3, [r7, #8]
 8013458:	1c5a      	adds	r2, r3, #1
 801345a:	60ba      	str	r2, [r7, #8]
 801345c:	781b      	ldrb	r3, [r3, #0]
 801345e:	b29a      	uxth	r2, r3
 8013460:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013464:	4313      	orrs	r3, r2
 8013466:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801346a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801346e:	f24c 0223 	movw	r2, #49187	; 0xc023
 8013472:	4293      	cmp	r3, r2
 8013474:	f040 8131 	bne.w	80136da <lcp_rejci+0x49a>
 8013478:	7c3b      	ldrb	r3, [r7, #16]
 801347a:	f36f 1304 	bfc	r3, #4, #1
 801347e:	743b      	strb	r3, [r7, #16]
    }
#endif /* EAP_SUPPORT */
#if LQR_SUPPORT
    REJCILQR(CI_QUALITY, neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 8013480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013482:	785b      	ldrb	r3, [r3, #1]
 8013484:	f003 0302 	and.w	r3, r3, #2
 8013488:	b2db      	uxtb	r3, r3
 801348a:	2b00      	cmp	r3, #0
 801348c:	d020      	beq.n	80134d0 <lcp_rejci+0x290>
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	2b02      	cmp	r3, #2
 8013492:	dd1d      	ble.n	80134d0 <lcp_rejci+0x290>
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	3301      	adds	r3, #1
 8013498:	781b      	ldrb	r3, [r3, #0]
 801349a:	2b03      	cmp	r3, #3
 801349c:	d118      	bne.n	80134d0 <lcp_rejci+0x290>
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	781b      	ldrb	r3, [r3, #0]
 80134a2:	2b0d      	cmp	r3, #13
 80134a4:	d114      	bne.n	80134d0 <lcp_rejci+0x290>
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	3b03      	subs	r3, #3
 80134aa:	607b      	str	r3, [r7, #4]
 80134ac:	68bb      	ldr	r3, [r7, #8]
 80134ae:	3302      	adds	r3, #2
 80134b0:	60bb      	str	r3, [r7, #8]
 80134b2:	68bb      	ldr	r3, [r7, #8]
 80134b4:	1c5a      	adds	r2, r3, #1
 80134b6:	60ba      	str	r2, [r7, #8]
 80134b8:	781b      	ldrb	r3, [r3, #0]
 80134ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80134be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80134c2:	2b06      	cmp	r3, #6
 80134c4:	f040 810b 	bne.w	80136de <lcp_rejci+0x49e>
 80134c8:	7c7b      	ldrb	r3, [r7, #17]
 80134ca:	f36f 0341 	bfc	r3, #1, #1
 80134ce:	747b      	strb	r3, [r7, #17]
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 80134d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134d2:	781b      	ldrb	r3, [r3, #0]
 80134d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134d8:	b2db      	uxtb	r3, r3
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d03f      	beq.n	801355e <lcp_rejci+0x31e>
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2b05      	cmp	r3, #5
 80134e2:	dd3c      	ble.n	801355e <lcp_rejci+0x31e>
 80134e4:	68bb      	ldr	r3, [r7, #8]
 80134e6:	3301      	adds	r3, #1
 80134e8:	781b      	ldrb	r3, [r3, #0]
 80134ea:	2b06      	cmp	r3, #6
 80134ec:	d137      	bne.n	801355e <lcp_rejci+0x31e>
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	781b      	ldrb	r3, [r3, #0]
 80134f2:	2b05      	cmp	r3, #5
 80134f4:	d133      	bne.n	801355e <lcp_rejci+0x31e>
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	3b06      	subs	r3, #6
 80134fa:	607b      	str	r3, [r7, #4]
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	3302      	adds	r3, #2
 8013500:	60bb      	str	r3, [r7, #8]
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	1c5a      	adds	r2, r3, #1
 8013506:	60ba      	str	r2, [r7, #8]
 8013508:	781b      	ldrb	r3, [r3, #0]
 801350a:	021b      	lsls	r3, r3, #8
 801350c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801350e:	68bb      	ldr	r3, [r7, #8]
 8013510:	1c5a      	adds	r2, r3, #1
 8013512:	60ba      	str	r2, [r7, #8]
 8013514:	781b      	ldrb	r3, [r3, #0]
 8013516:	461a      	mov	r2, r3
 8013518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801351a:	4313      	orrs	r3, r2
 801351c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801351e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013520:	021b      	lsls	r3, r3, #8
 8013522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013524:	68bb      	ldr	r3, [r7, #8]
 8013526:	1c5a      	adds	r2, r3, #1
 8013528:	60ba      	str	r2, [r7, #8]
 801352a:	781b      	ldrb	r3, [r3, #0]
 801352c:	461a      	mov	r2, r3
 801352e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013530:	4313      	orrs	r3, r2
 8013532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013536:	021b      	lsls	r3, r3, #8
 8013538:	63fb      	str	r3, [r7, #60]	; 0x3c
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	1c5a      	adds	r2, r3, #1
 801353e:	60ba      	str	r2, [r7, #8]
 8013540:	781b      	ldrb	r3, [r3, #0]
 8013542:	461a      	mov	r2, r3
 8013544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013546:	4313      	orrs	r3, r2
 8013548:	63fb      	str	r3, [r7, #60]	; 0x3c
 801354a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801354c:	68da      	ldr	r2, [r3, #12]
 801354e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013550:	429a      	cmp	r2, r3
 8013552:	f040 80c6 	bne.w	80136e2 <lcp_rejci+0x4a2>
 8013556:	7c3b      	ldrb	r3, [r7, #16]
 8013558:	f36f 1386 	bfc	r3, #6, #1
 801355c:	743b      	strb	r3, [r7, #16]
    REJCIVOID(CI_PCOMPRESSION, neg_pcompression);
 801355e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013560:	781b      	ldrb	r3, [r3, #0]
 8013562:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013566:	b2db      	uxtb	r3, r3
 8013568:	2b00      	cmp	r3, #0
 801356a:	d015      	beq.n	8013598 <lcp_rejci+0x358>
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2b01      	cmp	r3, #1
 8013570:	dd12      	ble.n	8013598 <lcp_rejci+0x358>
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	3301      	adds	r3, #1
 8013576:	781b      	ldrb	r3, [r3, #0]
 8013578:	2b02      	cmp	r3, #2
 801357a:	d10d      	bne.n	8013598 <lcp_rejci+0x358>
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	781b      	ldrb	r3, [r3, #0]
 8013580:	2b07      	cmp	r3, #7
 8013582:	d109      	bne.n	8013598 <lcp_rejci+0x358>
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	3b02      	subs	r3, #2
 8013588:	607b      	str	r3, [r7, #4]
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	3302      	adds	r3, #2
 801358e:	60bb      	str	r3, [r7, #8]
 8013590:	7c3b      	ldrb	r3, [r7, #16]
 8013592:	f36f 13c7 	bfc	r3, #7, #1
 8013596:	743b      	strb	r3, [r7, #16]
    REJCIVOID(CI_ACCOMPRESSION, neg_accompression);
 8013598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801359a:	785b      	ldrb	r3, [r3, #1]
 801359c:	f003 0301 	and.w	r3, r3, #1
 80135a0:	b2db      	uxtb	r3, r3
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d015      	beq.n	80135d2 <lcp_rejci+0x392>
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	2b01      	cmp	r3, #1
 80135aa:	dd12      	ble.n	80135d2 <lcp_rejci+0x392>
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	3301      	adds	r3, #1
 80135b0:	781b      	ldrb	r3, [r3, #0]
 80135b2:	2b02      	cmp	r3, #2
 80135b4:	d10d      	bne.n	80135d2 <lcp_rejci+0x392>
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	781b      	ldrb	r3, [r3, #0]
 80135ba:	2b08      	cmp	r3, #8
 80135bc:	d109      	bne.n	80135d2 <lcp_rejci+0x392>
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	3b02      	subs	r3, #2
 80135c2:	607b      	str	r3, [r7, #4]
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	3302      	adds	r3, #2
 80135c8:	60bb      	str	r3, [r7, #8]
 80135ca:	7c7b      	ldrb	r3, [r7, #17]
 80135cc:	f36f 0300 	bfc	r3, #0, #1
 80135d0:	747b      	strb	r3, [r7, #17]
#ifdef HAVE_MULTILINK
    REJCISHORT(CI_MRRU, neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    REJCIVOID(CI_SSNHF, neg_ssnhf);
 80135d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80135d4:	785b      	ldrb	r3, [r3, #1]
 80135d6:	f003 0304 	and.w	r3, r3, #4
 80135da:	b2db      	uxtb	r3, r3
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d015      	beq.n	801360c <lcp_rejci+0x3cc>
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	2b01      	cmp	r3, #1
 80135e4:	dd12      	ble.n	801360c <lcp_rejci+0x3cc>
 80135e6:	68bb      	ldr	r3, [r7, #8]
 80135e8:	3301      	adds	r3, #1
 80135ea:	781b      	ldrb	r3, [r3, #0]
 80135ec:	2b02      	cmp	r3, #2
 80135ee:	d10d      	bne.n	801360c <lcp_rejci+0x3cc>
 80135f0:	68bb      	ldr	r3, [r7, #8]
 80135f2:	781b      	ldrb	r3, [r3, #0]
 80135f4:	2b12      	cmp	r3, #18
 80135f6:	d109      	bne.n	801360c <lcp_rejci+0x3cc>
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	3b02      	subs	r3, #2
 80135fc:	607b      	str	r3, [r7, #4]
 80135fe:	68bb      	ldr	r3, [r7, #8]
 8013600:	3302      	adds	r3, #2
 8013602:	60bb      	str	r3, [r7, #8]
 8013604:	7c7b      	ldrb	r3, [r7, #17]
 8013606:	f36f 0382 	bfc	r3, #2, #1
 801360a:	747b      	strb	r3, [r7, #17]
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 801360c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801360e:	785b      	ldrb	r3, [r3, #1]
 8013610:	f003 0308 	and.w	r3, r3, #8
 8013614:	b2db      	uxtb	r3, r3
 8013616:	2b00      	cmp	r3, #0
 8013618:	d046      	beq.n	80136a8 <lcp_rejci+0x468>
 801361a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801361c:	7c9b      	ldrb	r3, [r3, #18]
 801361e:	1cda      	adds	r2, r3, #3
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	429a      	cmp	r2, r3
 8013624:	dc40      	bgt.n	80136a8 <lcp_rejci+0x468>
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	781b      	ldrb	r3, [r3, #0]
 801362a:	2b13      	cmp	r3, #19
 801362c:	d13c      	bne.n	80136a8 <lcp_rejci+0x468>
 801362e:	68bb      	ldr	r3, [r7, #8]
 8013630:	3301      	adds	r3, #1
 8013632:	781b      	ldrb	r3, [r3, #0]
 8013634:	461a      	mov	r2, r3
 8013636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013638:	7c9b      	ldrb	r3, [r3, #18]
 801363a:	3303      	adds	r3, #3
 801363c:	429a      	cmp	r2, r3
 801363e:	d133      	bne.n	80136a8 <lcp_rejci+0x468>
 8013640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013642:	7c9b      	ldrb	r3, [r3, #18]
 8013644:	3303      	adds	r3, #3
 8013646:	687a      	ldr	r2, [r7, #4]
 8013648:	1ad3      	subs	r3, r2, r3
 801364a:	607b      	str	r3, [r7, #4]
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	3302      	adds	r3, #2
 8013650:	60bb      	str	r3, [r7, #8]
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	1c5a      	adds	r2, r3, #1
 8013656:	60ba      	str	r2, [r7, #8]
 8013658:	781b      	ldrb	r3, [r3, #0]
 801365a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801365e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013660:	7c5b      	ldrb	r3, [r3, #17]
 8013662:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8013666:	429a      	cmp	r2, r3
 8013668:	d13d      	bne.n	80136e6 <lcp_rejci+0x4a6>
 801366a:	2300      	movs	r3, #0
 801366c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801366e:	e011      	b.n	8013694 <lcp_rejci+0x454>
 8013670:	68bb      	ldr	r3, [r7, #8]
 8013672:	1c5a      	adds	r2, r3, #1
 8013674:	60ba      	str	r2, [r7, #8]
 8013676:	781b      	ldrb	r3, [r3, #0]
 8013678:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801367c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801367e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013680:	4413      	add	r3, r2
 8013682:	3313      	adds	r3, #19
 8013684:	781b      	ldrb	r3, [r3, #0]
 8013686:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801368a:	429a      	cmp	r2, r3
 801368c:	d12d      	bne.n	80136ea <lcp_rejci+0x4aa>
 801368e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013690:	3301      	adds	r3, #1
 8013692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013696:	7c9b      	ldrb	r3, [r3, #18]
 8013698:	461a      	mov	r2, r3
 801369a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801369c:	429a      	cmp	r2, r3
 801369e:	dce7      	bgt.n	8013670 <lcp_rejci+0x430>
 80136a0:	7c7b      	ldrb	r3, [r7, #17]
 80136a2:	f36f 03c3 	bfc	r3, #3, #1
 80136a6:	747b      	strb	r3, [r7, #17]
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d11f      	bne.n	80136ee <lcp_rejci+0x4ae>
	goto bad;
    /*
     * Now we can update state.
     */
    if (f->state != PPP_FSM_OPENED)
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	7c1b      	ldrb	r3, [r3, #16]
 80136b2:	2b09      	cmp	r3, #9
 80136b4:	d00b      	beq.n	80136ce <lcp_rejci+0x48e>
	*go = try_;
 80136b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80136b8:	461d      	mov	r5, r3
 80136ba:	f107 0410 	add.w	r4, r7, #16
 80136be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80136c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80136c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80136c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80136c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80136ca:	e885 0003 	stmia.w	r5, {r0, r1}
    return 1;
 80136ce:	2301      	movs	r3, #1
 80136d0:	e00f      	b.n	80136f2 <lcp_rejci+0x4b2>
    REJCISHORT(CI_MRU, neg_mru, go->mru);
 80136d2:	bf00      	nop
 80136d4:	e00c      	b.n	80136f0 <lcp_rejci+0x4b0>
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 80136d6:	bf00      	nop
 80136d8:	e00a      	b.n	80136f0 <lcp_rejci+0x4b0>
	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
 80136da:	bf00      	nop
 80136dc:	e008      	b.n	80136f0 <lcp_rejci+0x4b0>
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 80136de:	bf00      	nop
 80136e0:	e006      	b.n	80136f0 <lcp_rejci+0x4b0>
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 80136e2:	bf00      	nop
 80136e4:	e004      	b.n	80136f0 <lcp_rejci+0x4b0>
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 80136e6:	bf00      	nop
 80136e8:	e002      	b.n	80136f0 <lcp_rejci+0x4b0>
 80136ea:	bf00      	nop
 80136ec:	e000      	b.n	80136f0 <lcp_rejci+0x4b0>
	goto bad;
 80136ee:	bf00      	nop

bad:
    LCPDEBUG(("lcp_rejci: received bad Reject!"));
    return 0;
 80136f0:	2300      	movs	r3, #0
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	3754      	adds	r7, #84	; 0x54
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bcb0      	pop	{r4, r5, r7}
 80136fa:	4770      	bx	lr

080136fc <lcp_reqci>:
 * CONFNAK; returns CONFREJ if it can't return CONFACK.
 *
 * inp = Requested CIs
 * lenp = Length of requested CIs
 */
static int lcp_reqci(fsm *f, u_char *inp, int *lenp, int reject_if_disagree) {
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b096      	sub	sp, #88	; 0x58
 8013700:	af00      	add	r7, sp, #0
 8013702:	60f8      	str	r0, [r7, #12]
 8013704:	60b9      	str	r1, [r7, #8]
 8013706:	607a      	str	r2, [r7, #4]
 8013708:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	637b      	str	r3, [r7, #52]	; 0x34
    lcp_options *go = &pcb->lcp_gotoptions;
 8013710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013712:	33d4      	adds	r3, #212	; 0xd4
 8013714:	633b      	str	r3, [r7, #48]	; 0x30
    lcp_options *ho = &pcb->lcp_hisoptions;
 8013716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013718:	f503 7392 	add.w	r3, r3, #292	; 0x124
 801371c:	62fb      	str	r3, [r7, #44]	; 0x2c
    lcp_options *ao = &pcb->lcp_allowoptions;
 801371e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013720:	33fc      	adds	r3, #252	; 0xfc
 8013722:	62bb      	str	r3, [r7, #40]	; 0x28
    u_char *cip, *next;		/* Pointer to current and next CIs */
    int cilen, citype, cichar;	/* Parsed len, type, char value */
    u_short cishort;		/* Parsed short value */
    u32_t cilong;		/* Parse long value */
    int rc = CONFACK;		/* Final packet return code */
 8013724:	2302      	movs	r3, #2
 8013726:	64bb      	str	r3, [r7, #72]	; 0x48
    int orc;			/* Individual option return code */
    u_char *p;			/* Pointer to next char to parse */
    u_char *rejp;		/* Pointer to next char in reject frame */
    struct pbuf *nakp;          /* Nak buffer */
    u_char *nakoutp;		/* Pointer to next char in Nak frame */
    int l = *lenp;		/* Length left */
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	63bb      	str	r3, [r7, #56]	; 0x38

    /*
     * Reset all his options.
     */
    BZERO(ho, sizeof(*ho));
 801372e:	2228      	movs	r2, #40	; 0x28
 8013730:	2100      	movs	r1, #0
 8013732:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013734:	f004 fdc5 	bl	80182c2 <memset>

    /*
     * Process all his options.
     */
    next = inp;
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	657b      	str	r3, [r7, #84]	; 0x54
    nakp = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_CTRL_PBUF_UNKNOWN_SIZE), PBUF_RAM);
 801373c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013740:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013744:	2000      	movs	r0, #0
 8013746:	f7f2 f8c1 	bl	80058cc <pbuf_alloc>
 801374a:	6278      	str	r0, [r7, #36]	; 0x24
    if(NULL == nakp)
 801374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801374e:	2b00      	cmp	r3, #0
 8013750:	d101      	bne.n	8013756 <lcp_reqci+0x5a>
        return 0;
 8013752:	2300      	movs	r3, #0
 8013754:	e376      	b.n	8013e44 <lcp_reqci+0x748>
    if(nakp->tot_len != nakp->len) {
 8013756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013758:	891a      	ldrh	r2, [r3, #8]
 801375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375c:	895b      	ldrh	r3, [r3, #10]
 801375e:	429a      	cmp	r2, r3
 8013760:	d004      	beq.n	801376c <lcp_reqci+0x70>
        pbuf_free(nakp);
 8013762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013764:	f7f2 fb56 	bl	8005e14 <pbuf_free>
        return 0;
 8013768:	2300      	movs	r3, #0
 801376a:	e36b      	b.n	8013e44 <lcp_reqci+0x748>
    }

    nakoutp = (u_char*)nakp->payload;
 801376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801376e:	685b      	ldr	r3, [r3, #4]
 8013770:	63fb      	str	r3, [r7, #60]	; 0x3c
    rejp = inp;
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 8013776:	e33a      	b.n	8013dee <lcp_reqci+0x6f2>
	orc = CONFACK;			/* Assume success */
 8013778:	2302      	movs	r3, #2
 801377a:	647b      	str	r3, [r7, #68]	; 0x44
	cip = p = next;			/* Remember beginning of CI */
 801377c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801377e:	623b      	str	r3, [r7, #32]
 8013780:	6a3b      	ldr	r3, [r7, #32]
 8013782:	61fb      	str	r3, [r7, #28]
	if (l < 2 ||			/* Not enough data for CI header or */
 8013784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013786:	2b01      	cmp	r3, #1
 8013788:	dd0b      	ble.n	80137a2 <lcp_reqci+0xa6>
	    p[1] < 2 ||			/*  CI length too small or */
 801378a:	6a3b      	ldr	r3, [r7, #32]
 801378c:	3301      	adds	r3, #1
 801378e:	781b      	ldrb	r3, [r3, #0]
	if (l < 2 ||			/* Not enough data for CI header or */
 8013790:	2b01      	cmp	r3, #1
 8013792:	d906      	bls.n	80137a2 <lcp_reqci+0xa6>
	    p[1] > l) {			/*  CI length too big? */
 8013794:	6a3b      	ldr	r3, [r7, #32]
 8013796:	3301      	adds	r3, #1
 8013798:	781b      	ldrb	r3, [r3, #0]
 801379a:	461a      	mov	r2, r3
	    p[1] < 2 ||			/*  CI length too small or */
 801379c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801379e:	429a      	cmp	r2, r3
 80137a0:	dd08      	ble.n	80137b4 <lcp_reqci+0xb8>
	    LCPDEBUG(("lcp_reqci: bad CI length!"));
	    orc = CONFREJ;		/* Reject bad CI */
 80137a2:	2304      	movs	r3, #4
 80137a4:	647b      	str	r3, [r7, #68]	; 0x44
	    cilen = l;			/* Reject till end of packet */
 80137a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137a8:	653b      	str	r3, [r7, #80]	; 0x50
	    l = 0;			/* Don't loop again */
 80137aa:	2300      	movs	r3, #0
 80137ac:	63bb      	str	r3, [r7, #56]	; 0x38
	    citype = 0;
 80137ae:	2300      	movs	r3, #0
 80137b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	    goto endswitch;
 80137b2:	e2f0      	b.n	8013d96 <lcp_reqci+0x69a>
	}
	GETCHAR(citype, p);		/* Parse CI type */
 80137b4:	6a3b      	ldr	r3, [r7, #32]
 80137b6:	1c5a      	adds	r2, r3, #1
 80137b8:	623a      	str	r2, [r7, #32]
 80137ba:	781b      	ldrb	r3, [r3, #0]
 80137bc:	64fb      	str	r3, [r7, #76]	; 0x4c
	GETCHAR(cilen, p);		/* Parse CI length */
 80137be:	6a3b      	ldr	r3, [r7, #32]
 80137c0:	1c5a      	adds	r2, r3, #1
 80137c2:	623a      	str	r2, [r7, #32]
 80137c4:	781b      	ldrb	r3, [r3, #0]
 80137c6:	653b      	str	r3, [r7, #80]	; 0x50
	l -= cilen;			/* Adjust remaining length */
 80137c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80137ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137cc:	1ad3      	subs	r3, r2, r3
 80137ce:	63bb      	str	r3, [r7, #56]	; 0x38
	next += cilen;			/* Step to next CI */
 80137d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80137d4:	4413      	add	r3, r2
 80137d6:	657b      	str	r3, [r7, #84]	; 0x54

	switch (citype) {		/* Check CI type */
 80137d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137da:	3b01      	subs	r3, #1
 80137dc:	2b12      	cmp	r3, #18
 80137de:	f200 82d7 	bhi.w	8013d90 <lcp_reqci+0x694>
 80137e2:	a201      	add	r2, pc, #4	; (adr r2, 80137e8 <lcp_reqci+0xec>)
 80137e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137e8:	08013835 	.word	0x08013835
 80137ec:	080138b3 	.word	0x080138b3
 80137f0:	080139a1 	.word	0x080139a1
 80137f4:	08013d91 	.word	0x08013d91
 80137f8:	08013bc9 	.word	0x08013bc9
 80137fc:	08013d91 	.word	0x08013d91
 8013800:	08013cbd 	.word	0x08013cbd
 8013804:	08013ce3 	.word	0x08013ce3
 8013808:	08013d91 	.word	0x08013d91
 801380c:	08013d91 	.word	0x08013d91
 8013810:	08013d91 	.word	0x08013d91
 8013814:	08013d91 	.word	0x08013d91
 8013818:	08013d91 	.word	0x08013d91
 801381c:	08013d91 	.word	0x08013d91
 8013820:	08013d91 	.word	0x08013d91
 8013824:	08013d91 	.word	0x08013d91
 8013828:	08013d91 	.word	0x08013d91
 801382c:	08013d09 	.word	0x08013d09
 8013830:	08013d2f 	.word	0x08013d2f
	case CI_MRU:
	    if (!ao->neg_mru ||		/* Allow option? */
 8013834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013836:	781b      	ldrb	r3, [r3, #0]
 8013838:	f003 0304 	and.w	r3, r3, #4
 801383c:	b2db      	uxtb	r3, r3
 801383e:	2b00      	cmp	r3, #0
 8013840:	d002      	beq.n	8013848 <lcp_reqci+0x14c>
 8013842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013844:	2b04      	cmp	r3, #4
 8013846:	d002      	beq.n	801384e <lcp_reqci+0x152>
		cilen != CILEN_SHORT) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 8013848:	2304      	movs	r3, #4
 801384a:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 801384c:	e2a3      	b.n	8013d96 <lcp_reqci+0x69a>
	    }
	    GETSHORT(cishort, p);	/* Parse MRU */
 801384e:	6a3b      	ldr	r3, [r7, #32]
 8013850:	1c5a      	adds	r2, r3, #1
 8013852:	623a      	str	r2, [r7, #32]
 8013854:	781b      	ldrb	r3, [r3, #0]
 8013856:	b29b      	uxth	r3, r3
 8013858:	021b      	lsls	r3, r3, #8
 801385a:	837b      	strh	r3, [r7, #26]
 801385c:	6a3b      	ldr	r3, [r7, #32]
 801385e:	1c5a      	adds	r2, r3, #1
 8013860:	623a      	str	r2, [r7, #32]
 8013862:	781b      	ldrb	r3, [r3, #0]
 8013864:	b29a      	uxth	r2, r3
 8013866:	8b7b      	ldrh	r3, [r7, #26]
 8013868:	4313      	orrs	r3, r2
 801386a:	837b      	strh	r3, [r7, #26]
	    /*
	     * He must be able to receive at least our minimum.
	     * No need to check a maximum.  If he sends a large number,
	     * we'll just ignore it.
	     */
	    if (cishort < PPP_MINMRU) {
 801386c:	8b7b      	ldrh	r3, [r7, #26]
 801386e:	2b7f      	cmp	r3, #127	; 0x7f
 8013870:	d816      	bhi.n	80138a0 <lcp_reqci+0x1a4>
		orc = CONFNAK;		/* Nak CI */
 8013872:	2303      	movs	r3, #3
 8013874:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_MRU, nakoutp);
 8013876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013878:	1c5a      	adds	r2, r3, #1
 801387a:	63fa      	str	r2, [r7, #60]	; 0x3c
 801387c:	2201      	movs	r2, #1
 801387e:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_SHORT, nakoutp);
 8013880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013882:	1c5a      	adds	r2, r3, #1
 8013884:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013886:	2204      	movs	r2, #4
 8013888:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_MINMRU, nakoutp);	/* Give him a hint */
 801388a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801388c:	1c5a      	adds	r2, r3, #1
 801388e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013890:	2200      	movs	r2, #0
 8013892:	701a      	strb	r2, [r3, #0]
 8013894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013896:	1c5a      	adds	r2, r3, #1
 8013898:	63fa      	str	r2, [r7, #60]	; 0x3c
 801389a:	2280      	movs	r2, #128	; 0x80
 801389c:	701a      	strb	r2, [r3, #0]
		break;
 801389e:	e27a      	b.n	8013d96 <lcp_reqci+0x69a>
	    }
	    ho->neg_mru = 1;		/* Remember he sent MRU */
 80138a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138a2:	7813      	ldrb	r3, [r2, #0]
 80138a4:	f043 0304 	orr.w	r3, r3, #4
 80138a8:	7013      	strb	r3, [r2, #0]
	    ho->mru = cishort;		/* And remember value */
 80138aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ac:	8b7a      	ldrh	r2, [r7, #26]
 80138ae:	805a      	strh	r2, [r3, #2]
	    break;
 80138b0:	e271      	b.n	8013d96 <lcp_reqci+0x69a>

	case CI_ASYNCMAP:
	    if (!ao->neg_asyncmap ||
 80138b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138b4:	781b      	ldrb	r3, [r3, #0]
 80138b6:	f003 0308 	and.w	r3, r3, #8
 80138ba:	b2db      	uxtb	r3, r3
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d002      	beq.n	80138c6 <lcp_reqci+0x1ca>
 80138c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138c2:	2b06      	cmp	r3, #6
 80138c4:	d002      	beq.n	80138cc <lcp_reqci+0x1d0>
		cilen != CILEN_LONG) {
		orc = CONFREJ;
 80138c6:	2304      	movs	r3, #4
 80138c8:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 80138ca:	e264      	b.n	8013d96 <lcp_reqci+0x69a>
	    }
	    GETLONG(cilong, p);
 80138cc:	6a3b      	ldr	r3, [r7, #32]
 80138ce:	1c5a      	adds	r2, r3, #1
 80138d0:	623a      	str	r2, [r7, #32]
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	021b      	lsls	r3, r3, #8
 80138d6:	617b      	str	r3, [r7, #20]
 80138d8:	6a3b      	ldr	r3, [r7, #32]
 80138da:	1c5a      	adds	r2, r3, #1
 80138dc:	623a      	str	r2, [r7, #32]
 80138de:	781b      	ldrb	r3, [r3, #0]
 80138e0:	461a      	mov	r2, r3
 80138e2:	697b      	ldr	r3, [r7, #20]
 80138e4:	4313      	orrs	r3, r2
 80138e6:	617b      	str	r3, [r7, #20]
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	021b      	lsls	r3, r3, #8
 80138ec:	617b      	str	r3, [r7, #20]
 80138ee:	6a3b      	ldr	r3, [r7, #32]
 80138f0:	1c5a      	adds	r2, r3, #1
 80138f2:	623a      	str	r2, [r7, #32]
 80138f4:	781b      	ldrb	r3, [r3, #0]
 80138f6:	461a      	mov	r2, r3
 80138f8:	697b      	ldr	r3, [r7, #20]
 80138fa:	4313      	orrs	r3, r2
 80138fc:	617b      	str	r3, [r7, #20]
 80138fe:	697b      	ldr	r3, [r7, #20]
 8013900:	021b      	lsls	r3, r3, #8
 8013902:	617b      	str	r3, [r7, #20]
 8013904:	6a3b      	ldr	r3, [r7, #32]
 8013906:	1c5a      	adds	r2, r3, #1
 8013908:	623a      	str	r2, [r7, #32]
 801390a:	781b      	ldrb	r3, [r3, #0]
 801390c:	461a      	mov	r2, r3
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	4313      	orrs	r3, r2
 8013912:	617b      	str	r3, [r7, #20]

	    /*
	     * Asyncmap must have set at least the bits
	     * which are set in lcp_allowoptions[unit].asyncmap.
	     */
	    if ((ao->asyncmap & ~cilong) != 0) {
 8013914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013916:	689a      	ldr	r2, [r3, #8]
 8013918:	697b      	ldr	r3, [r7, #20]
 801391a:	43db      	mvns	r3, r3
 801391c:	4013      	ands	r3, r2
 801391e:	2b00      	cmp	r3, #0
 8013920:	d035      	beq.n	801398e <lcp_reqci+0x292>
		orc = CONFNAK;
 8013922:	2303      	movs	r3, #3
 8013924:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_ASYNCMAP, nakoutp);
 8013926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013928:	1c5a      	adds	r2, r3, #1
 801392a:	63fa      	str	r2, [r7, #60]	; 0x3c
 801392c:	2202      	movs	r2, #2
 801392e:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 8013930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013932:	1c5a      	adds	r2, r3, #1
 8013934:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013936:	2206      	movs	r2, #6
 8013938:	701a      	strb	r2, [r3, #0]
		PUTLONG(ao->asyncmap | cilong, nakoutp);
 801393a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801393c:	1c5a      	adds	r2, r3, #1
 801393e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013942:	6891      	ldr	r1, [r2, #8]
 8013944:	697a      	ldr	r2, [r7, #20]
 8013946:	430a      	orrs	r2, r1
 8013948:	0e12      	lsrs	r2, r2, #24
 801394a:	b2d2      	uxtb	r2, r2
 801394c:	701a      	strb	r2, [r3, #0]
 801394e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013950:	1c5a      	adds	r2, r3, #1
 8013952:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013956:	6891      	ldr	r1, [r2, #8]
 8013958:	697a      	ldr	r2, [r7, #20]
 801395a:	430a      	orrs	r2, r1
 801395c:	0c12      	lsrs	r2, r2, #16
 801395e:	b2d2      	uxtb	r2, r2
 8013960:	701a      	strb	r2, [r3, #0]
 8013962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013964:	1c5a      	adds	r2, r3, #1
 8013966:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801396a:	6891      	ldr	r1, [r2, #8]
 801396c:	697a      	ldr	r2, [r7, #20]
 801396e:	430a      	orrs	r2, r1
 8013970:	0a12      	lsrs	r2, r2, #8
 8013972:	b2d2      	uxtb	r2, r2
 8013974:	701a      	strb	r2, [r3, #0]
 8013976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013978:	1c5a      	adds	r2, r3, #1
 801397a:	63fa      	str	r2, [r7, #60]	; 0x3c
 801397c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801397e:	6892      	ldr	r2, [r2, #8]
 8013980:	b2d1      	uxtb	r1, r2
 8013982:	697a      	ldr	r2, [r7, #20]
 8013984:	b2d2      	uxtb	r2, r2
 8013986:	430a      	orrs	r2, r1
 8013988:	b2d2      	uxtb	r2, r2
 801398a:	701a      	strb	r2, [r3, #0]
		break;
 801398c:	e203      	b.n	8013d96 <lcp_reqci+0x69a>
	    }
	    ho->neg_asyncmap = 1;
 801398e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013990:	7813      	ldrb	r3, [r2, #0]
 8013992:	f043 0308 	orr.w	r3, r3, #8
 8013996:	7013      	strb	r3, [r2, #0]
	    ho->asyncmap = cilong;
 8013998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801399a:	697a      	ldr	r2, [r7, #20]
 801399c:	609a      	str	r2, [r3, #8]
	    break;
 801399e:	e1fa      	b.n	8013d96 <lcp_reqci+0x69a>

	case CI_AUTHTYPE:
	    if (cilen < CILEN_SHORT ||
 80139a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139a2:	2b03      	cmp	r3, #3
 80139a4:	dd0d      	ble.n	80139c2 <lcp_reqci+0x2c6>
		!(0
#if PAP_SUPPORT
		|| ao->neg_upap
 80139a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a8:	781b      	ldrb	r3, [r3, #0]
 80139aa:	f003 0310 	and.w	r3, r3, #16
 80139ae:	b2db      	uxtb	r3, r3
	    if (cilen < CILEN_SHORT ||
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d10c      	bne.n	80139ce <lcp_reqci+0x2d2>
#endif /* PAP_SUPPORT */
#if CHAP_SUPPORT
		|| ao->neg_chap
 80139b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b6:	781b      	ldrb	r3, [r3, #0]
 80139b8:	f003 0320 	and.w	r3, r3, #32
 80139bc:	b2db      	uxtb	r3, r3
		!(0
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d105      	bne.n	80139ce <lcp_reqci+0x2d2>
#endif /* EAP_SUPPORT */
		)) {
		/*
		 * Reject the option if we're not willing to authenticate.
		 */
		ppp_dbglog(("No auth is possible"));
 80139c2:	488b      	ldr	r0, [pc, #556]	; (8013bf0 <lcp_reqci+0x4f4>)
 80139c4:	f003 fefe 	bl	80177c4 <ppp_dbglog_impl>
		orc = CONFREJ;
 80139c8:	2304      	movs	r3, #4
 80139ca:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 80139cc:	e1e3      	b.n	8013d96 <lcp_reqci+0x69a>
	    }
	    GETSHORT(cishort, p);
 80139ce:	6a3b      	ldr	r3, [r7, #32]
 80139d0:	1c5a      	adds	r2, r3, #1
 80139d2:	623a      	str	r2, [r7, #32]
 80139d4:	781b      	ldrb	r3, [r3, #0]
 80139d6:	b29b      	uxth	r3, r3
 80139d8:	021b      	lsls	r3, r3, #8
 80139da:	837b      	strh	r3, [r7, #26]
 80139dc:	6a3b      	ldr	r3, [r7, #32]
 80139de:	1c5a      	adds	r2, r3, #1
 80139e0:	623a      	str	r2, [r7, #32]
 80139e2:	781b      	ldrb	r3, [r3, #0]
 80139e4:	b29a      	uxth	r2, r3
 80139e6:	8b7b      	ldrh	r3, [r7, #26]
 80139e8:	4313      	orrs	r3, r2
 80139ea:	837b      	strh	r3, [r7, #26]
	     * Whether we end up doing CHAP, UPAP, or EAP depends then on
	     * the ordering of the CIs in the peer's Configure-Request.
             */

#if PAP_SUPPORT
	    if (cishort == PPP_PAP) {
 80139ec:	8b7b      	ldrh	r3, [r7, #26]
 80139ee:	f24c 0223 	movw	r2, #49187	; 0xc023
 80139f2:	4293      	cmp	r3, r2
 80139f4:	d13d      	bne.n	8013a72 <lcp_reqci+0x376>
		/* we've already accepted CHAP or EAP */
		if (0
#if CHAP_SUPPORT
		    || ho->neg_chap
 80139f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f8:	781b      	ldrb	r3, [r3, #0]
 80139fa:	f003 0320 	and.w	r3, r3, #32
 80139fe:	b2db      	uxtb	r3, r3
		if (0
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d102      	bne.n	8013a0a <lcp_reqci+0x30e>
#endif /* CHAP_SUPPORT */
#if EAP_SUPPORT
		    || ho->neg_eap
#endif /* EAP_SUPPORT */
		    || cilen != CILEN_SHORT) {
 8013a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a06:	2b04      	cmp	r3, #4
 8013a08:	d002      	beq.n	8013a10 <lcp_reqci+0x314>
		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE PAP, rejecting..."));
		    orc = CONFREJ;
 8013a0a:	2304      	movs	r3, #4
 8013a0c:	647b      	str	r3, [r7, #68]	; 0x44
		    break;
 8013a0e:	e1c2      	b.n	8013d96 <lcp_reqci+0x69a>
		}
		if (!ao->neg_upap) {	/* we don't want to do PAP */
 8013a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a12:	781b      	ldrb	r3, [r3, #0]
 8013a14:	f003 0310 	and.w	r3, r3, #16
 8013a18:	b2db      	uxtb	r3, r3
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d123      	bne.n	8013a66 <lcp_reqci+0x36a>
		    orc = CONFNAK;	/* NAK it and suggest CHAP or EAP */
 8013a1e:	2303      	movs	r3, #3
 8013a20:	647b      	str	r3, [r7, #68]	; 0x44
		    PUTCHAR(CI_AUTHTYPE, nakoutp);
 8013a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a24:	1c5a      	adds	r2, r3, #1
 8013a26:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013a28:	2203      	movs	r2, #3
 8013a2a:	701a      	strb	r2, [r3, #0]
			PUTCHAR(CILEN_SHORT, nakoutp);
			PUTSHORT(PPP_EAP, nakoutp);
		    } else {
#endif /* EAP_SUPPORT */
#if CHAP_SUPPORT
			PUTCHAR(CILEN_CHAP, nakoutp);
 8013a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a2e:	1c5a      	adds	r2, r3, #1
 8013a30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013a32:	2205      	movs	r2, #5
 8013a34:	701a      	strb	r2, [r3, #0]
			PUTSHORT(PPP_CHAP, nakoutp);
 8013a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a38:	1c5a      	adds	r2, r3, #1
 8013a3a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013a3c:	22c2      	movs	r2, #194	; 0xc2
 8013a3e:	701a      	strb	r2, [r3, #0]
 8013a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a42:	1c5a      	adds	r2, r3, #1
 8013a44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013a46:	2223      	movs	r2, #35	; 0x23
 8013a48:	701a      	strb	r2, [r3, #0]
			PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
 8013a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a4c:	1c5a      	adds	r2, r3, #1
 8013a4e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a52:	7912      	ldrb	r2, [r2, #4]
 8013a54:	f002 0204 	and.w	r2, r2, #4
 8013a58:	2a00      	cmp	r2, #0
 8013a5a:	d001      	beq.n	8013a60 <lcp_reqci+0x364>
 8013a5c:	2205      	movs	r2, #5
 8013a5e:	e000      	b.n	8013a62 <lcp_reqci+0x366>
 8013a60:	2200      	movs	r2, #0
 8013a62:	701a      	strb	r2, [r3, #0]
#endif /* CHAP_SUPPORT */
#if EAP_SUPPORT
		    }
#endif /* EAP_SUPPORT */
		    break;
 8013a64:	e197      	b.n	8013d96 <lcp_reqci+0x69a>
		}
		ho->neg_upap = 1;
 8013a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a68:	7813      	ldrb	r3, [r2, #0]
 8013a6a:	f043 0310 	orr.w	r3, r3, #16
 8013a6e:	7013      	strb	r3, [r2, #0]
		break;
 8013a70:	e191      	b.n	8013d96 <lcp_reqci+0x69a>
	    }
#endif /* PAP_SUPPORT */
#if CHAP_SUPPORT
	    if (cishort == PPP_CHAP) {
 8013a72:	8b7b      	ldrh	r3, [r7, #26]
 8013a74:	f24c 2223 	movw	r2, #49699	; 0xc223
 8013a78:	4293      	cmp	r3, r2
 8013a7a:	d16a      	bne.n	8013b52 <lcp_reqci+0x456>
		/* we've already accepted PAP or EAP */
		if (
#if PAP_SUPPORT
		    ho->neg_upap ||
 8013a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a7e:	781b      	ldrb	r3, [r3, #0]
 8013a80:	f003 0310 	and.w	r3, r3, #16
 8013a84:	b2db      	uxtb	r3, r3
		if (
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d102      	bne.n	8013a90 <lcp_reqci+0x394>
		    ho->neg_upap ||
 8013a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a8c:	2b05      	cmp	r3, #5
 8013a8e:	d002      	beq.n	8013a96 <lcp_reqci+0x39a>
#if EAP_SUPPORT
		    ho->neg_eap ||
#endif /* EAP_SUPPORT */
		    cilen != CILEN_CHAP) {
		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE CHAP, rejecting..."));
		    orc = CONFREJ;
 8013a90:	2304      	movs	r3, #4
 8013a92:	647b      	str	r3, [r7, #68]	; 0x44
		    break;
 8013a94:	e17f      	b.n	8013d96 <lcp_reqci+0x69a>
		}
		if (!ao->neg_chap) {	/* we don't want to do CHAP */
 8013a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a98:	781b      	ldrb	r3, [r3, #0]
 8013a9a:	f003 0320 	and.w	r3, r3, #32
 8013a9e:	b2db      	uxtb	r3, r3
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d116      	bne.n	8013ad2 <lcp_reqci+0x3d6>
		    orc = CONFNAK;	/* NAK it and suggest EAP or PAP */
 8013aa4:	2303      	movs	r3, #3
 8013aa6:	647b      	str	r3, [r7, #68]	; 0x44
		    PUTCHAR(CI_AUTHTYPE, nakoutp);
 8013aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013aaa:	1c5a      	adds	r2, r3, #1
 8013aac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013aae:	2203      	movs	r2, #3
 8013ab0:	701a      	strb	r2, [r3, #0]
		    PUTCHAR(CILEN_SHORT, nakoutp);
 8013ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ab4:	1c5a      	adds	r2, r3, #1
 8013ab6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013ab8:	2204      	movs	r2, #4
 8013aba:	701a      	strb	r2, [r3, #0]
			PUTSHORT(PPP_EAP, nakoutp);
		    } else
#endif /* EAP_SUPPORT */
#if PAP_SUPPORT
		    if(1) {
			PUTSHORT(PPP_PAP, nakoutp);
 8013abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013abe:	1c5a      	adds	r2, r3, #1
 8013ac0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013ac2:	22c0      	movs	r2, #192	; 0xc0
 8013ac4:	701a      	strb	r2, [r3, #0]
 8013ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ac8:	1c5a      	adds	r2, r3, #1
 8013aca:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013acc:	2223      	movs	r2, #35	; 0x23
 8013ace:	701a      	strb	r2, [r3, #0]
		    }
		    else
#endif /* PAP_SUPPORT */
		    {}
		    break;
 8013ad0:	e161      	b.n	8013d96 <lcp_reqci+0x69a>
		}
		GETCHAR(cichar, p);	/* get digest type */
 8013ad2:	6a3b      	ldr	r3, [r7, #32]
 8013ad4:	1c5a      	adds	r2, r3, #1
 8013ad6:	623a      	str	r2, [r7, #32]
 8013ad8:	781b      	ldrb	r3, [r3, #0]
 8013ada:	613b      	str	r3, [r7, #16]
		if (!(CHAP_CANDIGEST(ao->chap_mdtype, cichar))) {
 8013adc:	693b      	ldr	r3, [r7, #16]
 8013ade:	2b05      	cmp	r3, #5
 8013ae0:	d105      	bne.n	8013aee <lcp_reqci+0x3f2>
 8013ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae4:	791b      	ldrb	r3, [r3, #4]
 8013ae6:	f003 0304 	and.w	r3, r3, #4
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d123      	bne.n	8013b36 <lcp_reqci+0x43a>
		    /*
		     * We can't/won't do the requested type,
		     * suggest something else.
		     */
		    orc = CONFNAK;
 8013aee:	2303      	movs	r3, #3
 8013af0:	647b      	str	r3, [r7, #68]	; 0x44
		    PUTCHAR(CI_AUTHTYPE, nakoutp);
 8013af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013af4:	1c5a      	adds	r2, r3, #1
 8013af6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013af8:	2203      	movs	r2, #3
 8013afa:	701a      	strb	r2, [r3, #0]
		    PUTCHAR(CILEN_CHAP, nakoutp);
 8013afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013afe:	1c5a      	adds	r2, r3, #1
 8013b00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013b02:	2205      	movs	r2, #5
 8013b04:	701a      	strb	r2, [r3, #0]
		    PUTSHORT(PPP_CHAP, nakoutp);
 8013b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b08:	1c5a      	adds	r2, r3, #1
 8013b0a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013b0c:	22c2      	movs	r2, #194	; 0xc2
 8013b0e:	701a      	strb	r2, [r3, #0]
 8013b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b12:	1c5a      	adds	r2, r3, #1
 8013b14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013b16:	2223      	movs	r2, #35	; 0x23
 8013b18:	701a      	strb	r2, [r3, #0]
		    PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
 8013b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b1c:	1c5a      	adds	r2, r3, #1
 8013b1e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b22:	7912      	ldrb	r2, [r2, #4]
 8013b24:	f002 0204 	and.w	r2, r2, #4
 8013b28:	2a00      	cmp	r2, #0
 8013b2a:	d001      	beq.n	8013b30 <lcp_reqci+0x434>
 8013b2c:	2205      	movs	r2, #5
 8013b2e:	e000      	b.n	8013b32 <lcp_reqci+0x436>
 8013b30:	2200      	movs	r2, #0
 8013b32:	701a      	strb	r2, [r3, #0]
		    break;
 8013b34:	e12f      	b.n	8013d96 <lcp_reqci+0x69a>
		}
		ho->chap_mdtype = CHAP_MDTYPE_D(cichar); /* save md type */
 8013b36:	693b      	ldr	r3, [r7, #16]
 8013b38:	2b05      	cmp	r3, #5
 8013b3a:	d101      	bne.n	8013b40 <lcp_reqci+0x444>
 8013b3c:	2204      	movs	r2, #4
 8013b3e:	e000      	b.n	8013b42 <lcp_reqci+0x446>
 8013b40:	2200      	movs	r2, #0
 8013b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b44:	711a      	strb	r2, [r3, #4]
		ho->neg_chap = 1;
 8013b46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b48:	7813      	ldrb	r3, [r2, #0]
 8013b4a:	f043 0320 	orr.w	r3, r3, #32
 8013b4e:	7013      	strb	r3, [r2, #0]
		break;
 8013b50:	e121      	b.n	8013d96 <lcp_reqci+0x69a>
	     * We don't recognize the protocol they're asking for.
	     * Nak it with something we're willing to do.
	     * (At this point we know ao->neg_upap || ao->neg_chap ||
	     * ao->neg_eap.)
	     */
	    orc = CONFNAK;
 8013b52:	2303      	movs	r3, #3
 8013b54:	647b      	str	r3, [r7, #68]	; 0x44
	    PUTCHAR(CI_AUTHTYPE, nakoutp);
 8013b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b58:	1c5a      	adds	r2, r3, #1
 8013b5a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013b5c:	2203      	movs	r2, #3
 8013b5e:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_SHORT, nakoutp);
		PUTSHORT(PPP_EAP, nakoutp);
	    } else
#endif /* EAP_SUPPORT */
#if CHAP_SUPPORT
	    if (ao->neg_chap) {
 8013b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b62:	781b      	ldrb	r3, [r3, #0]
 8013b64:	f003 0320 	and.w	r3, r3, #32
 8013b68:	b2db      	uxtb	r3, r3
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d01c      	beq.n	8013ba8 <lcp_reqci+0x4ac>
		PUTCHAR(CILEN_CHAP, nakoutp);
 8013b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b70:	1c5a      	adds	r2, r3, #1
 8013b72:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013b74:	2205      	movs	r2, #5
 8013b76:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_CHAP, nakoutp);
 8013b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b7a:	1c5a      	adds	r2, r3, #1
 8013b7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013b7e:	22c2      	movs	r2, #194	; 0xc2
 8013b80:	701a      	strb	r2, [r3, #0]
 8013b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b84:	1c5a      	adds	r2, r3, #1
 8013b86:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013b88:	2223      	movs	r2, #35	; 0x23
 8013b8a:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
 8013b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b8e:	1c5a      	adds	r2, r3, #1
 8013b90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b94:	7912      	ldrb	r2, [r2, #4]
 8013b96:	f002 0204 	and.w	r2, r2, #4
 8013b9a:	2a00      	cmp	r2, #0
 8013b9c:	d001      	beq.n	8013ba2 <lcp_reqci+0x4a6>
 8013b9e:	2205      	movs	r2, #5
 8013ba0:	e000      	b.n	8013ba4 <lcp_reqci+0x4a8>
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_SHORT, nakoutp);
		PUTSHORT(PPP_PAP, nakoutp);
	    } else
#endif /* PAP_SUPPORT */
	    {}
	    break;
 8013ba6:	e0f6      	b.n	8013d96 <lcp_reqci+0x69a>
		PUTCHAR(CILEN_SHORT, nakoutp);
 8013ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013baa:	1c5a      	adds	r2, r3, #1
 8013bac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013bae:	2204      	movs	r2, #4
 8013bb0:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_PAP, nakoutp);
 8013bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bb4:	1c5a      	adds	r2, r3, #1
 8013bb6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013bb8:	22c0      	movs	r2, #192	; 0xc0
 8013bba:	701a      	strb	r2, [r3, #0]
 8013bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bbe:	1c5a      	adds	r2, r3, #1
 8013bc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013bc2:	2223      	movs	r2, #35	; 0x23
 8013bc4:	701a      	strb	r2, [r3, #0]
	    break;
 8013bc6:	e0e6      	b.n	8013d96 <lcp_reqci+0x69a>
	    }
	    break;
#endif /* LQR_SUPPORT */

	case CI_MAGICNUMBER:
	    if (!(ao->neg_magicnumber || go->neg_magicnumber) ||
 8013bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bca:	781b      	ldrb	r3, [r3, #0]
 8013bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013bd0:	b2db      	uxtb	r3, r3
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d106      	bne.n	8013be4 <lcp_reqci+0x4e8>
 8013bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bd8:	781b      	ldrb	r3, [r3, #0]
 8013bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013bde:	b2db      	uxtb	r3, r3
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d002      	beq.n	8013bea <lcp_reqci+0x4ee>
 8013be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013be6:	2b06      	cmp	r3, #6
 8013be8:	d004      	beq.n	8013bf4 <lcp_reqci+0x4f8>
		cilen != CILEN_LONG) {
		orc = CONFREJ;
 8013bea:	2304      	movs	r3, #4
 8013bec:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8013bee:	e0d2      	b.n	8013d96 <lcp_reqci+0x69a>
 8013bf0:	0801d024 	.word	0x0801d024
	    }
	    GETLONG(cilong, p);
 8013bf4:	6a3b      	ldr	r3, [r7, #32]
 8013bf6:	1c5a      	adds	r2, r3, #1
 8013bf8:	623a      	str	r2, [r7, #32]
 8013bfa:	781b      	ldrb	r3, [r3, #0]
 8013bfc:	021b      	lsls	r3, r3, #8
 8013bfe:	617b      	str	r3, [r7, #20]
 8013c00:	6a3b      	ldr	r3, [r7, #32]
 8013c02:	1c5a      	adds	r2, r3, #1
 8013c04:	623a      	str	r2, [r7, #32]
 8013c06:	781b      	ldrb	r3, [r3, #0]
 8013c08:	461a      	mov	r2, r3
 8013c0a:	697b      	ldr	r3, [r7, #20]
 8013c0c:	4313      	orrs	r3, r2
 8013c0e:	617b      	str	r3, [r7, #20]
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	021b      	lsls	r3, r3, #8
 8013c14:	617b      	str	r3, [r7, #20]
 8013c16:	6a3b      	ldr	r3, [r7, #32]
 8013c18:	1c5a      	adds	r2, r3, #1
 8013c1a:	623a      	str	r2, [r7, #32]
 8013c1c:	781b      	ldrb	r3, [r3, #0]
 8013c1e:	461a      	mov	r2, r3
 8013c20:	697b      	ldr	r3, [r7, #20]
 8013c22:	4313      	orrs	r3, r2
 8013c24:	617b      	str	r3, [r7, #20]
 8013c26:	697b      	ldr	r3, [r7, #20]
 8013c28:	021b      	lsls	r3, r3, #8
 8013c2a:	617b      	str	r3, [r7, #20]
 8013c2c:	6a3b      	ldr	r3, [r7, #32]
 8013c2e:	1c5a      	adds	r2, r3, #1
 8013c30:	623a      	str	r2, [r7, #32]
 8013c32:	781b      	ldrb	r3, [r3, #0]
 8013c34:	461a      	mov	r2, r3
 8013c36:	697b      	ldr	r3, [r7, #20]
 8013c38:	4313      	orrs	r3, r2
 8013c3a:	617b      	str	r3, [r7, #20]

	    /*
	     * He must have a different magic number.
	     */
	    if (go->neg_magicnumber &&
 8013c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c3e:	781b      	ldrb	r3, [r3, #0]
 8013c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c44:	b2db      	uxtb	r3, r3
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d02f      	beq.n	8013caa <lcp_reqci+0x5ae>
		cilong == go->magicnumber) {
 8013c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c4c:	68da      	ldr	r2, [r3, #12]
	    if (go->neg_magicnumber &&
 8013c4e:	697b      	ldr	r3, [r7, #20]
 8013c50:	429a      	cmp	r2, r3
 8013c52:	d12a      	bne.n	8013caa <lcp_reqci+0x5ae>
		cilong = magic();	/* Don't put magic() inside macro! */
 8013c54:	f000 fc1e 	bl	8014494 <magic>
 8013c58:	6178      	str	r0, [r7, #20]
		orc = CONFNAK;
 8013c5a:	2303      	movs	r3, #3
 8013c5c:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_MAGICNUMBER, nakoutp);
 8013c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c60:	1c5a      	adds	r2, r3, #1
 8013c62:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013c64:	2205      	movs	r2, #5
 8013c66:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 8013c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c6a:	1c5a      	adds	r2, r3, #1
 8013c6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013c6e:	2206      	movs	r2, #6
 8013c70:	701a      	strb	r2, [r3, #0]
		PUTLONG(cilong, nakoutp);
 8013c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c74:	1c5a      	adds	r2, r3, #1
 8013c76:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013c78:	697a      	ldr	r2, [r7, #20]
 8013c7a:	0e12      	lsrs	r2, r2, #24
 8013c7c:	b2d2      	uxtb	r2, r2
 8013c7e:	701a      	strb	r2, [r3, #0]
 8013c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c82:	1c5a      	adds	r2, r3, #1
 8013c84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013c86:	697a      	ldr	r2, [r7, #20]
 8013c88:	0c12      	lsrs	r2, r2, #16
 8013c8a:	b2d2      	uxtb	r2, r2
 8013c8c:	701a      	strb	r2, [r3, #0]
 8013c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c90:	1c5a      	adds	r2, r3, #1
 8013c92:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013c94:	697a      	ldr	r2, [r7, #20]
 8013c96:	0a12      	lsrs	r2, r2, #8
 8013c98:	b2d2      	uxtb	r2, r2
 8013c9a:	701a      	strb	r2, [r3, #0]
 8013c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c9e:	1c5a      	adds	r2, r3, #1
 8013ca0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013ca2:	697a      	ldr	r2, [r7, #20]
 8013ca4:	b2d2      	uxtb	r2, r2
 8013ca6:	701a      	strb	r2, [r3, #0]
		break;
 8013ca8:	e075      	b.n	8013d96 <lcp_reqci+0x69a>
	    }
	    ho->neg_magicnumber = 1;
 8013caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013cac:	7813      	ldrb	r3, [r2, #0]
 8013cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013cb2:	7013      	strb	r3, [r2, #0]
	    ho->magicnumber = cilong;
 8013cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb6:	697a      	ldr	r2, [r7, #20]
 8013cb8:	60da      	str	r2, [r3, #12]
	    break;
 8013cba:	e06c      	b.n	8013d96 <lcp_reqci+0x69a>


	case CI_PCOMPRESSION:
	    if (!ao->neg_pcompression ||
 8013cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cbe:	781b      	ldrb	r3, [r3, #0]
 8013cc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013cc4:	b2db      	uxtb	r3, r3
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d002      	beq.n	8013cd0 <lcp_reqci+0x5d4>
 8013cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ccc:	2b02      	cmp	r3, #2
 8013cce:	d002      	beq.n	8013cd6 <lcp_reqci+0x5da>
		cilen != CILEN_VOID) {
		orc = CONFREJ;
 8013cd0:	2304      	movs	r3, #4
 8013cd2:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8013cd4:	e05f      	b.n	8013d96 <lcp_reqci+0x69a>
	    }
	    ho->neg_pcompression = 1;
 8013cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013cd8:	7813      	ldrb	r3, [r2, #0]
 8013cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013cde:	7013      	strb	r3, [r2, #0]
	    break;
 8013ce0:	e059      	b.n	8013d96 <lcp_reqci+0x69a>

	case CI_ACCOMPRESSION:
	    if (!ao->neg_accompression ||
 8013ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce4:	785b      	ldrb	r3, [r3, #1]
 8013ce6:	f003 0301 	and.w	r3, r3, #1
 8013cea:	b2db      	uxtb	r3, r3
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d002      	beq.n	8013cf6 <lcp_reqci+0x5fa>
 8013cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cf2:	2b02      	cmp	r3, #2
 8013cf4:	d002      	beq.n	8013cfc <lcp_reqci+0x600>
		cilen != CILEN_VOID) {
		orc = CONFREJ;
 8013cf6:	2304      	movs	r3, #4
 8013cf8:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8013cfa:	e04c      	b.n	8013d96 <lcp_reqci+0x69a>
	    }
	    ho->neg_accompression = 1;
 8013cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013cfe:	7853      	ldrb	r3, [r2, #1]
 8013d00:	f043 0301 	orr.w	r3, r3, #1
 8013d04:	7053      	strb	r3, [r2, #1]
	    break;
 8013d06:	e046      	b.n	8013d96 <lcp_reqci+0x69a>
	    ho->mrru = cishort;
	    break;
#endif /* HAVE_MULTILINK */

	case CI_SSNHF:
	    if (!ao->neg_ssnhf
 8013d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d0a:	785b      	ldrb	r3, [r3, #1]
 8013d0c:	f003 0304 	and.w	r3, r3, #4
 8013d10:	b2db      	uxtb	r3, r3
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d002      	beq.n	8013d1c <lcp_reqci+0x620>
#ifdef HAVE_MULTILINK
		|| !multilink
#endif /* HAVE_MULTILINK */
		|| cilen != CILEN_VOID) {
 8013d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d18:	2b02      	cmp	r3, #2
 8013d1a:	d002      	beq.n	8013d22 <lcp_reqci+0x626>
		orc = CONFREJ;
 8013d1c:	2304      	movs	r3, #4
 8013d1e:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8013d20:	e039      	b.n	8013d96 <lcp_reqci+0x69a>
	    }
	    ho->neg_ssnhf = 1;
 8013d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d24:	7853      	ldrb	r3, [r2, #1]
 8013d26:	f043 0304 	orr.w	r3, r3, #4
 8013d2a:	7053      	strb	r3, [r2, #1]
	    break;
 8013d2c:	e033      	b.n	8013d96 <lcp_reqci+0x69a>

	case CI_EPDISC:
	    if (!ao->neg_endpoint ||
 8013d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d30:	785b      	ldrb	r3, [r3, #1]
 8013d32:	f003 0308 	and.w	r3, r3, #8
 8013d36:	b2db      	uxtb	r3, r3
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d005      	beq.n	8013d48 <lcp_reqci+0x64c>
 8013d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d3e:	2b02      	cmp	r3, #2
 8013d40:	dd02      	ble.n	8013d48 <lcp_reqci+0x64c>
		cilen < CILEN_CHAR ||
 8013d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d44:	2b17      	cmp	r3, #23
 8013d46:	dd02      	ble.n	8013d4e <lcp_reqci+0x652>
		cilen > CILEN_CHAR + MAX_ENDP_LEN) {
		orc = CONFREJ;
 8013d48:	2304      	movs	r3, #4
 8013d4a:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8013d4c:	e023      	b.n	8013d96 <lcp_reqci+0x69a>
	    }
	    GETCHAR(cichar, p);
 8013d4e:	6a3b      	ldr	r3, [r7, #32]
 8013d50:	1c5a      	adds	r2, r3, #1
 8013d52:	623a      	str	r2, [r7, #32]
 8013d54:	781b      	ldrb	r3, [r3, #0]
 8013d56:	613b      	str	r3, [r7, #16]
	    cilen -= CILEN_CHAR;
 8013d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d5a:	3b03      	subs	r3, #3
 8013d5c:	653b      	str	r3, [r7, #80]	; 0x50
	    ho->neg_endpoint = 1;
 8013d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d60:	7853      	ldrb	r3, [r2, #1]
 8013d62:	f043 0308 	orr.w	r3, r3, #8
 8013d66:	7053      	strb	r3, [r2, #1]
	    ho->endpoint.class_ = cichar;
 8013d68:	693b      	ldr	r3, [r7, #16]
 8013d6a:	b2da      	uxtb	r2, r3
 8013d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d6e:	745a      	strb	r2, [r3, #17]
	    ho->endpoint.length = cilen;
 8013d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d72:	b2da      	uxtb	r2, r3
 8013d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d76:	749a      	strb	r2, [r3, #18]
	    MEMCPY(ho->endpoint.value, p, cilen);
 8013d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d7a:	3313      	adds	r3, #19
 8013d7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013d7e:	6a39      	ldr	r1, [r7, #32]
 8013d80:	4618      	mov	r0, r3
 8013d82:	f004 fa79 	bl	8018278 <memcpy>
	    INCPTR(cilen, p);
 8013d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d88:	6a3a      	ldr	r2, [r7, #32]
 8013d8a:	4413      	add	r3, r2
 8013d8c:	623b      	str	r3, [r7, #32]
	    break;
 8013d8e:	e002      	b.n	8013d96 <lcp_reqci+0x69a>

	default:
	    LCPDEBUG(("lcp_reqci: rcvd unknown option %d", citype));
	    orc = CONFREJ;
 8013d90:	2304      	movs	r3, #4
 8013d92:	647b      	str	r3, [r7, #68]	; 0x44
	    break;
 8013d94:	bf00      	nop
	}

endswitch:
	if (orc == CONFACK &&		/* Good CI */
 8013d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d98:	2b02      	cmp	r3, #2
 8013d9a:	d103      	bne.n	8013da4 <lcp_reqci+0x6a8>
 8013d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d9e:	2b02      	cmp	r3, #2
 8013da0:	d000      	beq.n	8013da4 <lcp_reqci+0x6a8>
	    rc != CONFACK)		/*  but prior CI wasn't? */
	    continue;			/* Don't send this one */
 8013da2:	e024      	b.n	8013dee <lcp_reqci+0x6f2>

	if (orc == CONFNAK) {		/* Nak this CI? */
 8013da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013da6:	2b03      	cmp	r3, #3
 8013da8:	d10e      	bne.n	8013dc8 <lcp_reqci+0x6cc>
	    if (reject_if_disagree	/* Getting fed up with sending NAKs? */
 8013daa:	683b      	ldr	r3, [r7, #0]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d005      	beq.n	8013dbc <lcp_reqci+0x6c0>
		&& citype != CI_MAGICNUMBER) {
 8013db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013db2:	2b05      	cmp	r3, #5
 8013db4:	d002      	beq.n	8013dbc <lcp_reqci+0x6c0>
		orc = CONFREJ;		/* Get tough if so */
 8013db6:	2304      	movs	r3, #4
 8013db8:	647b      	str	r3, [r7, #68]	; 0x44
 8013dba:	e005      	b.n	8013dc8 <lcp_reqci+0x6cc>
	    } else {
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 8013dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013dbe:	2b04      	cmp	r3, #4
 8013dc0:	d100      	bne.n	8013dc4 <lcp_reqci+0x6c8>
		    continue;		/* Don't send this one */
 8013dc2:	e014      	b.n	8013dee <lcp_reqci+0x6f2>
		rc = CONFNAK;
 8013dc4:	2303      	movs	r3, #3
 8013dc6:	64bb      	str	r3, [r7, #72]	; 0x48
	    }
	}
	if (orc == CONFREJ) {		/* Reject this CI */
 8013dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dca:	2b04      	cmp	r3, #4
 8013dcc:	d10f      	bne.n	8013dee <lcp_reqci+0x6f2>
	    rc = CONFREJ;
 8013dce:	2304      	movs	r3, #4
 8013dd0:	64bb      	str	r3, [r7, #72]	; 0x48
	    if (cip != rejp)		/* Need to move rejected CI? */
 8013dd2:	69fa      	ldr	r2, [r7, #28]
 8013dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	d005      	beq.n	8013de6 <lcp_reqci+0x6ea>
		MEMCPY(rejp, cip, cilen); /* Move it */
 8013dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ddc:	461a      	mov	r2, r3
 8013dde:	69f9      	ldr	r1, [r7, #28]
 8013de0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013de2:	f004 fa49 	bl	8018278 <memcpy>
	    INCPTR(cilen, rejp);	/* Update output pointer */
 8013de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013de8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013dea:	4413      	add	r3, r2
 8013dec:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 8013dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	f47f acc1 	bne.w	8013778 <lcp_reqci+0x7c>
     * code would go here.  The extra NAKs would go at *nakoutp.
     * At present there are no cases where we want to ask the
     * peer to negotiate an option.
     */

    switch (rc) {
 8013df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013df8:	2b03      	cmp	r3, #3
 8013dfa:	d00a      	beq.n	8013e12 <lcp_reqci+0x716>
 8013dfc:	2b04      	cmp	r3, #4
 8013dfe:	d017      	beq.n	8013e30 <lcp_reqci+0x734>
 8013e00:	2b02      	cmp	r3, #2
 8013e02:	d000      	beq.n	8013e06 <lcp_reqci+0x70a>
	break;
    case CONFREJ:
	*lenp = rejp - inp;
	break;
    default:
	break;
 8013e04:	e01a      	b.n	8013e3c <lcp_reqci+0x740>
	*lenp = next - inp;
 8013e06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	1ad2      	subs	r2, r2, r3
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	601a      	str	r2, [r3, #0]
	break;
 8013e10:	e014      	b.n	8013e3c <lcp_reqci+0x740>
	*lenp = nakoutp - (u_char*)nakp->payload;
 8013e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e16:	6852      	ldr	r2, [r2, #4]
 8013e18:	1a9a      	subs	r2, r3, r2
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	601a      	str	r2, [r3, #0]
	MEMCPY(inp, nakp->payload, *lenp);
 8013e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e20:	6859      	ldr	r1, [r3, #4]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	461a      	mov	r2, r3
 8013e28:	68b8      	ldr	r0, [r7, #8]
 8013e2a:	f004 fa25 	bl	8018278 <memcpy>
	break;
 8013e2e:	e005      	b.n	8013e3c <lcp_reqci+0x740>
	*lenp = rejp - inp;
 8013e30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	1ad2      	subs	r2, r2, r3
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	601a      	str	r2, [r3, #0]
	break;
 8013e3a:	bf00      	nop
    }

    pbuf_free(nakp);
 8013e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e3e:	f7f1 ffe9 	bl	8005e14 <pbuf_free>
    LCPDEBUG(("lcp_reqci: returning CONF%s.", CODENAME(rc)));
    return (rc);			/* Return final code */
 8013e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8013e44:	4618      	mov	r0, r3
 8013e46:	3758      	adds	r7, #88	; 0x58
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bd80      	pop	{r7, pc}

08013e4c <lcp_up>:


/*
 * lcp_up - LCP has come UP.
 */
static void lcp_up(fsm *f) {
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b08c      	sub	sp, #48	; 0x30
 8013e50:	af02      	add	r7, sp, #8
 8013e52:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	627b      	str	r3, [r7, #36]	; 0x24
    lcp_options *wo = &pcb->lcp_wantoptions;
 8013e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e5c:	33ac      	adds	r3, #172	; 0xac
 8013e5e:	623b      	str	r3, [r7, #32]
    lcp_options *ho = &pcb->lcp_hisoptions;
 8013e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e62:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8013e66:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 8013e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e6a:	33d4      	adds	r3, #212	; 0xd4
 8013e6c:	61bb      	str	r3, [r7, #24]
    lcp_options *ao = &pcb->lcp_allowoptions;
 8013e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e70:	33fc      	adds	r3, #252	; 0xfc
 8013e72:	617b      	str	r3, [r7, #20]
    int mtu, mru;

    if (!go->neg_magicnumber)
 8013e74:	69bb      	ldr	r3, [r7, #24]
 8013e76:	781b      	ldrb	r3, [r3, #0]
 8013e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e7c:	b2db      	uxtb	r3, r3
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d102      	bne.n	8013e88 <lcp_up+0x3c>
	go->magicnumber = 0;
 8013e82:	69bb      	ldr	r3, [r7, #24]
 8013e84:	2200      	movs	r2, #0
 8013e86:	60da      	str	r2, [r3, #12]
    if (!ho->neg_magicnumber)
 8013e88:	69fb      	ldr	r3, [r7, #28]
 8013e8a:	781b      	ldrb	r3, [r3, #0]
 8013e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e90:	b2db      	uxtb	r3, r3
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d102      	bne.n	8013e9c <lcp_up+0x50>
	ho->magicnumber = 0;
 8013e96:	69fb      	ldr	r3, [r7, #28]
 8013e98:	2200      	movs	r2, #0
 8013e9a:	60da      	str	r2, [r3, #12]
     * the value we got in the negotiation.
     * Note on the MTU: the link MTU can be the MRU the peer wanted,
     * the interface MTU is set to the lowest of that, the
     * MTU we want to use, and our link MRU.
     */
    mtu = ho->neg_mru? ho->mru: PPP_DEFMRU;
 8013e9c:	69fb      	ldr	r3, [r7, #28]
 8013e9e:	781b      	ldrb	r3, [r3, #0]
 8013ea0:	f003 0304 	and.w	r3, r3, #4
 8013ea4:	b2db      	uxtb	r3, r3
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d002      	beq.n	8013eb0 <lcp_up+0x64>
 8013eaa:	69fb      	ldr	r3, [r7, #28]
 8013eac:	885b      	ldrh	r3, [r3, #2]
 8013eae:	e001      	b.n	8013eb4 <lcp_up+0x68>
 8013eb0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8013eb4:	613b      	str	r3, [r7, #16]
    mru = go->neg_mru? LWIP_MAX(wo->mru, go->mru): PPP_DEFMRU;
 8013eb6:	69bb      	ldr	r3, [r7, #24]
 8013eb8:	781b      	ldrb	r3, [r3, #0]
 8013eba:	f003 0304 	and.w	r3, r3, #4
 8013ebe:	b2db      	uxtb	r3, r3
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d00b      	beq.n	8013edc <lcp_up+0x90>
 8013ec4:	6a3b      	ldr	r3, [r7, #32]
 8013ec6:	885a      	ldrh	r2, [r3, #2]
 8013ec8:	69bb      	ldr	r3, [r7, #24]
 8013eca:	885b      	ldrh	r3, [r3, #2]
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d902      	bls.n	8013ed6 <lcp_up+0x8a>
 8013ed0:	6a3b      	ldr	r3, [r7, #32]
 8013ed2:	885b      	ldrh	r3, [r3, #2]
 8013ed4:	e004      	b.n	8013ee0 <lcp_up+0x94>
 8013ed6:	69bb      	ldr	r3, [r7, #24]
 8013ed8:	885b      	ldrh	r3, [r3, #2]
 8013eda:	e001      	b.n	8013ee0 <lcp_up+0x94>
 8013edc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8013ee0:	60fb      	str	r3, [r7, #12]
#ifdef HAVE_MULTILINK
    if (!(multilink && go->neg_mrru && ho->neg_mrru))
#endif /* HAVE_MULTILINK */
	ppp_netif_set_mtu(pcb, LWIP_MIN(LWIP_MIN(mtu, mru), ao->mru));
 8013ee2:	697b      	ldr	r3, [r7, #20]
 8013ee4:	885b      	ldrh	r3, [r3, #2]
 8013ee6:	4619      	mov	r1, r3
 8013ee8:	68fa      	ldr	r2, [r7, #12]
 8013eea:	693b      	ldr	r3, [r7, #16]
 8013eec:	4293      	cmp	r3, r2
 8013eee:	bfa8      	it	ge
 8013ef0:	4613      	movge	r3, r2
 8013ef2:	428b      	cmp	r3, r1
 8013ef4:	bfa8      	it	ge
 8013ef6:	460b      	movge	r3, r1
 8013ef8:	4619      	mov	r1, r3
 8013efa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013efc:	f001 ff04 	bl	8015d08 <ppp_netif_set_mtu>
    ppp_send_config(pcb, mtu,
		    (ho->neg_asyncmap? ho->asyncmap: 0xffffffff),
 8013f00:	69fb      	ldr	r3, [r7, #28]
 8013f02:	781b      	ldrb	r3, [r3, #0]
 8013f04:	f003 0308 	and.w	r3, r3, #8
 8013f08:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d002      	beq.n	8013f14 <lcp_up+0xc8>
 8013f0e:	69fb      	ldr	r3, [r7, #28]
 8013f10:	689a      	ldr	r2, [r3, #8]
 8013f12:	e001      	b.n	8013f18 <lcp_up+0xcc>
 8013f14:	f04f 32ff 	mov.w	r2, #4294967295
		    ho->neg_pcompression, ho->neg_accompression);
 8013f18:	69fb      	ldr	r3, [r7, #28]
 8013f1a:	781b      	ldrb	r3, [r3, #0]
 8013f1c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8013f20:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 8013f22:	4619      	mov	r1, r3
		    ho->neg_pcompression, ho->neg_accompression);
 8013f24:	69fb      	ldr	r3, [r7, #28]
 8013f26:	785b      	ldrb	r3, [r3, #1]
 8013f28:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8013f2c:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 8013f2e:	9300      	str	r3, [sp, #0]
 8013f30:	460b      	mov	r3, r1
 8013f32:	6939      	ldr	r1, [r7, #16]
 8013f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f36:	f001 fdbf 	bl	8015ab8 <ppp_send_config>
    ppp_recv_config(pcb, mru,
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8013f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f3c:	781b      	ldrb	r3, [r3, #0]
 8013f3e:	f003 0320 	and.w	r3, r3, #32
 8013f42:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d10c      	bne.n	8013f62 <lcp_up+0x116>
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8013f48:	69bb      	ldr	r3, [r7, #24]
 8013f4a:	781b      	ldrb	r3, [r3, #0]
 8013f4c:	f003 0308 	and.w	r3, r3, #8
 8013f50:	b2db      	uxtb	r3, r3
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d002      	beq.n	8013f5c <lcp_up+0x110>
 8013f56:	69bb      	ldr	r3, [r7, #24]
 8013f58:	689a      	ldr	r2, [r3, #8]
 8013f5a:	e003      	b.n	8013f64 <lcp_up+0x118>
 8013f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8013f60:	e000      	b.n	8013f64 <lcp_up+0x118>
    ppp_recv_config(pcb, mru,
 8013f62:	2200      	movs	r2, #0
		    go->neg_pcompression, go->neg_accompression);
 8013f64:	69bb      	ldr	r3, [r7, #24]
 8013f66:	781b      	ldrb	r3, [r3, #0]
 8013f68:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8013f6c:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 8013f6e:	4619      	mov	r1, r3
		    go->neg_pcompression, go->neg_accompression);
 8013f70:	69bb      	ldr	r3, [r7, #24]
 8013f72:	785b      	ldrb	r3, [r3, #1]
 8013f74:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8013f78:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 8013f7a:	9300      	str	r3, [sp, #0]
 8013f7c:	460b      	mov	r3, r1
 8013f7e:	68f9      	ldr	r1, [r7, #12]
 8013f80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f82:	f001 fdbf 	bl	8015b04 <ppp_recv_config>

    if (ho->neg_mru)
 8013f86:	69fb      	ldr	r3, [r7, #28]
 8013f88:	781b      	ldrb	r3, [r3, #0]
 8013f8a:	f003 0304 	and.w	r3, r3, #4
 8013f8e:	b2db      	uxtb	r3, r3
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d004      	beq.n	8013f9e <lcp_up+0x152>
	pcb->peer_mru = ho->mru;
 8013f94:	69fb      	ldr	r3, [r7, #28]
 8013f96:	885a      	ldrh	r2, [r3, #2]
 8013f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f9a:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c

    lcp_echo_lowerup(f->pcb);  /* Enable echo messages */
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f000 f99d 	bl	80142e2 <lcp_echo_lowerup>

    link_established(pcb);
 8013fa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013faa:	f7fa fb23 	bl	800e5f4 <link_established>
}
 8013fae:	bf00      	nop
 8013fb0:	3728      	adds	r7, #40	; 0x28
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}

08013fb6 <lcp_down>:
/*
 * lcp_down - LCP has gone DOWN.
 *
 * Alert other protocols.
 */
static void lcp_down(fsm *f) {
 8013fb6:	b580      	push	{r7, lr}
 8013fb8:	b086      	sub	sp, #24
 8013fba:	af02      	add	r7, sp, #8
 8013fbc:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	60fb      	str	r3, [r7, #12]
    lcp_options *go = &pcb->lcp_gotoptions;
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	33d4      	adds	r3, #212	; 0xd4
 8013fc8:	60bb      	str	r3, [r7, #8]

    lcp_echo_lowerdown(f->pcb);
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	4618      	mov	r0, r3
 8013fd0:	f000 f9a8 	bl	8014324 <lcp_echo_lowerdown>

    link_down(pcb);
 8013fd4:	68f8      	ldr	r0, [r7, #12]
 8013fd6:	f7fa fabb 	bl	800e550 <link_down>

    ppp_send_config(pcb, PPP_DEFMRU, 0xffffffff, 0, 0);
 8013fda:	2300      	movs	r3, #0
 8013fdc:	9300      	str	r3, [sp, #0]
 8013fde:	2300      	movs	r3, #0
 8013fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8013fe4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8013fe8:	68f8      	ldr	r0, [r7, #12]
 8013fea:	f001 fd65 	bl	8015ab8 <ppp_send_config>
    ppp_recv_config(pcb, PPP_DEFMRU,
		    (go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	781b      	ldrb	r3, [r3, #0]
 8013ff2:	f003 0308 	and.w	r3, r3, #8
 8013ff6:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d002      	beq.n	8014002 <lcp_down+0x4c>
 8013ffc:	68bb      	ldr	r3, [r7, #8]
 8013ffe:	689a      	ldr	r2, [r3, #8]
 8014000:	e001      	b.n	8014006 <lcp_down+0x50>
 8014002:	f04f 32ff 	mov.w	r2, #4294967295
		    go->neg_pcompression, go->neg_accompression);
 8014006:	68bb      	ldr	r3, [r7, #8]
 8014008:	781b      	ldrb	r3, [r3, #0]
 801400a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801400e:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 8014010:	4619      	mov	r1, r3
		    go->neg_pcompression, go->neg_accompression);
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	785b      	ldrb	r3, [r3, #1]
 8014016:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801401a:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 801401c:	9300      	str	r3, [sp, #0]
 801401e:	460b      	mov	r3, r1
 8014020:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8014024:	68f8      	ldr	r0, [r7, #12]
 8014026:	f001 fd6d 	bl	8015b04 <ppp_recv_config>
    pcb->peer_mru = PPP_DEFMRU;
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8014030:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
}
 8014034:	bf00      	nop
 8014036:	3710      	adds	r7, #16
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}

0801403c <lcp_starting>:


/*
 * lcp_starting - LCP needs the lower layer up.
 */
static void lcp_starting(fsm *f) {
 801403c:	b580      	push	{r7, lr}
 801403e:	b084      	sub	sp, #16
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	60fb      	str	r3, [r7, #12]
    link_required(pcb);
 801404a:	68f8      	ldr	r0, [r7, #12]
 801404c:	f7fa fa58 	bl	800e500 <link_required>
}
 8014050:	bf00      	nop
 8014052:	3710      	adds	r7, #16
 8014054:	46bd      	mov	sp, r7
 8014056:	bd80      	pop	{r7, pc}

08014058 <lcp_finished>:


/*
 * lcp_finished - LCP has finished with the lower layer.
 */
static void lcp_finished(fsm *f) {
 8014058:	b580      	push	{r7, lr}
 801405a:	b084      	sub	sp, #16
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	60fb      	str	r3, [r7, #12]
    link_terminated(pcb);
 8014066:	68f8      	ldr	r0, [r7, #12]
 8014068:	f7fa fa54 	bl	800e514 <link_terminated>
}
 801406c:	bf00      	nop
 801406e:	3710      	adds	r7, #16
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}

08014074 <LcpLinkFailure>:

/*
 * Time to shut down the link because there is nothing out there.
 */

static void LcpLinkFailure(fsm *f) {
 8014074:	b580      	push	{r7, lr}
 8014076:	b084      	sub	sp, #16
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	60fb      	str	r3, [r7, #12]
    if (f->state == PPP_FSM_OPENED) {
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	7c1b      	ldrb	r3, [r3, #16]
 8014086:	2b09      	cmp	r3, #9
 8014088:	d111      	bne.n	80140ae <LcpLinkFailure+0x3a>
	ppp_info(("No response to %d echo-requests", pcb->lcp_echos_pending));
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	f893 314e 	ldrb.w	r3, [r3, #334]	; 0x14e
 8014090:	4619      	mov	r1, r3
 8014092:	4809      	ldr	r0, [pc, #36]	; (80140b8 <LcpLinkFailure+0x44>)
 8014094:	f003 fb83 	bl	801779e <ppp_info_impl>
        ppp_notice(("Serial link appears to be disconnected."));
 8014098:	4808      	ldr	r0, [pc, #32]	; (80140bc <LcpLinkFailure+0x48>)
 801409a:	f003 fb6d 	bl	8017778 <ppp_notice_impl>
	pcb->err_code = PPPERR_PEERDEAD;
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	2209      	movs	r2, #9
 80140a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	lcp_close(pcb, "Peer not responding");
 80140a6:	4906      	ldr	r1, [pc, #24]	; (80140c0 <LcpLinkFailure+0x4c>)
 80140a8:	68f8      	ldr	r0, [r7, #12]
 80140aa:	f7fd fdc3 	bl	8011c34 <lcp_close>
    }
}
 80140ae:	bf00      	nop
 80140b0:	3710      	adds	r7, #16
 80140b2:	46bd      	mov	sp, r7
 80140b4:	bd80      	pop	{r7, pc}
 80140b6:	bf00      	nop
 80140b8:	0801d038 	.word	0x0801d038
 80140bc:	0801d058 	.word	0x0801d058
 80140c0:	0801d080 	.word	0x0801d080

080140c4 <LcpEchoCheck>:

/*
 * Timer expired for the LCP echo requests from this process.
 */

static void LcpEchoCheck(fsm *f) {
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b084      	sub	sp, #16
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	60fb      	str	r3, [r7, #12]

    LcpSendEchoRequest (f);
 80140d2:	6878      	ldr	r0, [r7, #4]
 80140d4:	f000 f8a4 	bl	8014220 <LcpSendEchoRequest>
    if (f->state != PPP_FSM_OPENED)
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	7c1b      	ldrb	r3, [r3, #16]
 80140dc:	2b09      	cmp	r3, #9
 80140de:	d122      	bne.n	8014126 <LcpEchoCheck+0x62>
	return;

    /*
     * Start the timer for the next interval.
     */
    if (pcb->lcp_echo_timer_running)
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80140e6:	f003 0310 	and.w	r3, r3, #16
 80140ea:	b2db      	uxtb	r3, r3
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d002      	beq.n	80140f6 <LcpEchoCheck+0x32>
	ppp_warn(("assertion lcp_echo_timer_running==0 failed"));
 80140f0:	480f      	ldr	r0, [pc, #60]	; (8014130 <LcpEchoCheck+0x6c>)
 80140f2:	f003 fb2e 	bl	8017752 <ppp_warn_impl>
    TIMEOUT (LcpEchoTimeout, f, pcb->settings.lcp_echo_interval);
 80140f6:	6879      	ldr	r1, [r7, #4]
 80140f8:	480e      	ldr	r0, [pc, #56]	; (8014134 <LcpEchoCheck+0x70>)
 80140fa:	f7f9 fc99 	bl	800da30 <sys_untimeout>
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	7cdb      	ldrb	r3, [r3, #19]
 8014102:	461a      	mov	r2, r3
 8014104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014108:	fb03 f302 	mul.w	r3, r3, r2
 801410c:	687a      	ldr	r2, [r7, #4]
 801410e:	4909      	ldr	r1, [pc, #36]	; (8014134 <LcpEchoCheck+0x70>)
 8014110:	4618      	mov	r0, r3
 8014112:	f7f9 fc61 	bl	800d9d8 <sys_timeout>
    pcb->lcp_echo_timer_running = 1;
 8014116:	68fa      	ldr	r2, [r7, #12]
 8014118:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801411c:	f043 0310 	orr.w	r3, r3, #16
 8014120:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 8014124:	e000      	b.n	8014128 <LcpEchoCheck+0x64>
	return;
 8014126:	bf00      	nop
}
 8014128:	3710      	adds	r7, #16
 801412a:	46bd      	mov	sp, r7
 801412c:	bd80      	pop	{r7, pc}
 801412e:	bf00      	nop
 8014130:	0801d094 	.word	0x0801d094
 8014134:	08014139 	.word	0x08014139

08014138 <LcpEchoTimeout>:

/*
 * LcpEchoTimeout - Timer expired on the LCP echo
 */

static void LcpEchoTimeout(void *arg) {
 8014138:	b580      	push	{r7, lr}
 801413a:	b084      	sub	sp, #16
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm*)arg;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	60fb      	str	r3, [r7, #12]
    ppp_pcb *pcb = f->pcb;
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	60bb      	str	r3, [r7, #8]
    if (pcb->lcp_echo_timer_running != 0) {
 801414a:	68bb      	ldr	r3, [r7, #8]
 801414c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8014150:	f003 0310 	and.w	r3, r3, #16
 8014154:	b2db      	uxtb	r3, r3
 8014156:	2b00      	cmp	r3, #0
 8014158:	d009      	beq.n	801416e <LcpEchoTimeout+0x36>
        pcb->lcp_echo_timer_running = 0;
 801415a:	68ba      	ldr	r2, [r7, #8]
 801415c:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8014160:	f36f 1304 	bfc	r3, #4, #1
 8014164:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
        LcpEchoCheck ((fsm *) arg);
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	f7ff ffab 	bl	80140c4 <LcpEchoCheck>
    }
}
 801416e:	bf00      	nop
 8014170:	3710      	adds	r7, #16
 8014172:	46bd      	mov	sp, r7
 8014174:	bd80      	pop	{r7, pc}
	...

08014178 <lcp_received_echo_reply>:

/*
 * LcpEchoReply - LCP has received a reply to the echo
 */

static void lcp_received_echo_reply(fsm *f, int id, u_char *inp, int len) {
 8014178:	b580      	push	{r7, lr}
 801417a:	b088      	sub	sp, #32
 801417c:	af00      	add	r7, sp, #0
 801417e:	60f8      	str	r0, [r7, #12]
 8014180:	60b9      	str	r1, [r7, #8]
 8014182:	607a      	str	r2, [r7, #4]
 8014184:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 801418c:	69fb      	ldr	r3, [r7, #28]
 801418e:	33d4      	adds	r3, #212	; 0xd4
 8014190:	61bb      	str	r3, [r7, #24]
    u32_t magic_val;
    LWIP_UNUSED_ARG(id);

    /* Check the magic number - don't count replies from ourselves. */
    if (len < 4) {
 8014192:	683b      	ldr	r3, [r7, #0]
 8014194:	2b03      	cmp	r3, #3
 8014196:	dc04      	bgt.n	80141a2 <lcp_received_echo_reply+0x2a>
	ppp_dbglog(("lcp: received short Echo-Reply, length %d", len));
 8014198:	6839      	ldr	r1, [r7, #0]
 801419a:	481f      	ldr	r0, [pc, #124]	; (8014218 <lcp_received_echo_reply+0xa0>)
 801419c:	f003 fb12 	bl	80177c4 <ppp_dbglog_impl>
	return;
 80141a0:	e037      	b.n	8014212 <lcp_received_echo_reply+0x9a>
    }
    GETLONG(magic_val, inp);
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	1c5a      	adds	r2, r3, #1
 80141a6:	607a      	str	r2, [r7, #4]
 80141a8:	781b      	ldrb	r3, [r3, #0]
 80141aa:	021b      	lsls	r3, r3, #8
 80141ac:	617b      	str	r3, [r7, #20]
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	1c5a      	adds	r2, r3, #1
 80141b2:	607a      	str	r2, [r7, #4]
 80141b4:	781b      	ldrb	r3, [r3, #0]
 80141b6:	461a      	mov	r2, r3
 80141b8:	697b      	ldr	r3, [r7, #20]
 80141ba:	4313      	orrs	r3, r2
 80141bc:	617b      	str	r3, [r7, #20]
 80141be:	697b      	ldr	r3, [r7, #20]
 80141c0:	021b      	lsls	r3, r3, #8
 80141c2:	617b      	str	r3, [r7, #20]
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	1c5a      	adds	r2, r3, #1
 80141c8:	607a      	str	r2, [r7, #4]
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	461a      	mov	r2, r3
 80141ce:	697b      	ldr	r3, [r7, #20]
 80141d0:	4313      	orrs	r3, r2
 80141d2:	617b      	str	r3, [r7, #20]
 80141d4:	697b      	ldr	r3, [r7, #20]
 80141d6:	021b      	lsls	r3, r3, #8
 80141d8:	617b      	str	r3, [r7, #20]
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	1c5a      	adds	r2, r3, #1
 80141de:	607a      	str	r2, [r7, #4]
 80141e0:	781b      	ldrb	r3, [r3, #0]
 80141e2:	461a      	mov	r2, r3
 80141e4:	697b      	ldr	r3, [r7, #20]
 80141e6:	4313      	orrs	r3, r2
 80141e8:	617b      	str	r3, [r7, #20]
    if (go->neg_magicnumber
 80141ea:	69bb      	ldr	r3, [r7, #24]
 80141ec:	781b      	ldrb	r3, [r3, #0]
 80141ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80141f2:	b2db      	uxtb	r3, r3
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d008      	beq.n	801420a <lcp_received_echo_reply+0x92>
	&& magic_val == go->magicnumber) {
 80141f8:	69bb      	ldr	r3, [r7, #24]
 80141fa:	68da      	ldr	r2, [r3, #12]
 80141fc:	697b      	ldr	r3, [r7, #20]
 80141fe:	429a      	cmp	r2, r3
 8014200:	d103      	bne.n	801420a <lcp_received_echo_reply+0x92>
	ppp_warn(("appear to have received our own echo-reply!"));
 8014202:	4806      	ldr	r0, [pc, #24]	; (801421c <lcp_received_echo_reply+0xa4>)
 8014204:	f003 faa5 	bl	8017752 <ppp_warn_impl>
	return;
 8014208:	e003      	b.n	8014212 <lcp_received_echo_reply+0x9a>
    }

    /* Reset the number of outstanding echo frames */
    pcb->lcp_echos_pending = 0;
 801420a:	69fb      	ldr	r3, [r7, #28]
 801420c:	2200      	movs	r2, #0
 801420e:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
}
 8014212:	3720      	adds	r7, #32
 8014214:	46bd      	mov	sp, r7
 8014216:	bd80      	pop	{r7, pc}
 8014218:	0801d0c0 	.word	0x0801d0c0
 801421c:	0801d0ec 	.word	0x0801d0ec

08014220 <LcpSendEchoRequest>:

/*
 * LcpSendEchoRequest - Send an echo request frame to the peer
 */

static void LcpSendEchoRequest(fsm *f) {
 8014220:	b580      	push	{r7, lr}
 8014222:	b08a      	sub	sp, #40	; 0x28
 8014224:	af02      	add	r7, sp, #8
 8014226:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 801422e:	69fb      	ldr	r3, [r7, #28]
 8014230:	33d4      	adds	r3, #212	; 0xd4
 8014232:	61bb      	str	r3, [r7, #24]
    u_char pkt[4], *pktp;

    /*
     * Detect the failure of the peer at this point.
     */
    if (pcb->settings.lcp_echo_fails != 0) {
 8014234:	69fb      	ldr	r3, [r7, #28]
 8014236:	7d1b      	ldrb	r3, [r3, #20]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d00d      	beq.n	8014258 <LcpSendEchoRequest+0x38>
        if (pcb->lcp_echos_pending >= pcb->settings.lcp_echo_fails) {
 801423c:	69fb      	ldr	r3, [r7, #28]
 801423e:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
 8014242:	69fb      	ldr	r3, [r7, #28]
 8014244:	7d1b      	ldrb	r3, [r3, #20]
 8014246:	429a      	cmp	r2, r3
 8014248:	d306      	bcc.n	8014258 <LcpSendEchoRequest+0x38>
            LcpLinkFailure(f);
 801424a:	6878      	ldr	r0, [r7, #4]
 801424c:	f7ff ff12 	bl	8014074 <LcpLinkFailure>
            pcb->lcp_echos_pending = 0;
 8014250:	69fb      	ldr	r3, [r7, #28]
 8014252:	2200      	movs	r2, #0
 8014254:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
#endif

    /*
     * Make and send the echo request frame.
     */
    if (f->state == PPP_FSM_OPENED) {
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	7c1b      	ldrb	r3, [r3, #16]
 801425c:	2b09      	cmp	r3, #9
 801425e:	d13c      	bne.n	80142da <LcpSendEchoRequest+0xba>
        lcp_magic = go->magicnumber;
 8014260:	69bb      	ldr	r3, [r7, #24]
 8014262:	68db      	ldr	r3, [r3, #12]
 8014264:	617b      	str	r3, [r7, #20]
	pktp = pkt;
 8014266:	f107 030c 	add.w	r3, r7, #12
 801426a:	613b      	str	r3, [r7, #16]
	PUTLONG(lcp_magic, pktp);
 801426c:	693b      	ldr	r3, [r7, #16]
 801426e:	1c5a      	adds	r2, r3, #1
 8014270:	613a      	str	r2, [r7, #16]
 8014272:	697a      	ldr	r2, [r7, #20]
 8014274:	0e12      	lsrs	r2, r2, #24
 8014276:	b2d2      	uxtb	r2, r2
 8014278:	701a      	strb	r2, [r3, #0]
 801427a:	693b      	ldr	r3, [r7, #16]
 801427c:	1c5a      	adds	r2, r3, #1
 801427e:	613a      	str	r2, [r7, #16]
 8014280:	697a      	ldr	r2, [r7, #20]
 8014282:	0c12      	lsrs	r2, r2, #16
 8014284:	b2d2      	uxtb	r2, r2
 8014286:	701a      	strb	r2, [r3, #0]
 8014288:	693b      	ldr	r3, [r7, #16]
 801428a:	1c5a      	adds	r2, r3, #1
 801428c:	613a      	str	r2, [r7, #16]
 801428e:	697a      	ldr	r2, [r7, #20]
 8014290:	0a12      	lsrs	r2, r2, #8
 8014292:	b2d2      	uxtb	r2, r2
 8014294:	701a      	strb	r2, [r3, #0]
 8014296:	693b      	ldr	r3, [r7, #16]
 8014298:	1c5a      	adds	r2, r3, #1
 801429a:	613a      	str	r2, [r7, #16]
 801429c:	697a      	ldr	r2, [r7, #20]
 801429e:	b2d2      	uxtb	r2, r2
 80142a0:	701a      	strb	r2, [r3, #0]
        fsm_sdata(f, ECHOREQ, pcb->lcp_echo_number++, pkt, pktp - pkt);
 80142a2:	69fb      	ldr	r3, [r7, #28]
 80142a4:	f893 214f 	ldrb.w	r2, [r3, #335]	; 0x14f
 80142a8:	1c53      	adds	r3, r2, #1
 80142aa:	b2d9      	uxtb	r1, r3
 80142ac:	69fb      	ldr	r3, [r7, #28]
 80142ae:	f883 114f 	strb.w	r1, [r3, #335]	; 0x14f
 80142b2:	6939      	ldr	r1, [r7, #16]
 80142b4:	f107 030c 	add.w	r3, r7, #12
 80142b8:	1acb      	subs	r3, r1, r3
 80142ba:	f107 010c 	add.w	r1, r7, #12
 80142be:	9300      	str	r3, [sp, #0]
 80142c0:	460b      	mov	r3, r1
 80142c2:	2109      	movs	r1, #9
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	f7fb fd3d 	bl	800fd44 <fsm_sdata>
	++pcb->lcp_echos_pending;
 80142ca:	69fb      	ldr	r3, [r7, #28]
 80142cc:	f893 314e 	ldrb.w	r3, [r3, #334]	; 0x14e
 80142d0:	3301      	adds	r3, #1
 80142d2:	b2da      	uxtb	r2, r3
 80142d4:	69fb      	ldr	r3, [r7, #28]
 80142d6:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
    }
}
 80142da:	bf00      	nop
 80142dc:	3720      	adds	r7, #32
 80142de:	46bd      	mov	sp, r7
 80142e0:	bd80      	pop	{r7, pc}

080142e2 <lcp_echo_lowerup>:

/*
 * lcp_echo_lowerup - Start the timer for the LCP frame
 */

static void lcp_echo_lowerup(ppp_pcb *pcb) {
 80142e2:	b580      	push	{r7, lr}
 80142e4:	b084      	sub	sp, #16
 80142e6:	af00      	add	r7, sp, #0
 80142e8:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	3390      	adds	r3, #144	; 0x90
 80142ee:	60fb      	str	r3, [r7, #12]

    /* Clear the parameters for generating echo frames */
    pcb->lcp_echos_pending      = 0;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2200      	movs	r2, #0
 80142f4:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
    pcb->lcp_echo_number        = 0;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	2200      	movs	r2, #0
 80142fc:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
    pcb->lcp_echo_timer_running = 0;
 8014300:	687a      	ldr	r2, [r7, #4]
 8014302:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8014306:	f36f 1304 	bfc	r3, #4, #1
 801430a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  
    /* If a timeout interval is specified then start the timer */
    if (pcb->settings.lcp_echo_interval != 0)
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	7cdb      	ldrb	r3, [r3, #19]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d002      	beq.n	801431c <lcp_echo_lowerup+0x3a>
        LcpEchoCheck (f);
 8014316:	68f8      	ldr	r0, [r7, #12]
 8014318:	f7ff fed4 	bl	80140c4 <LcpEchoCheck>
}
 801431c:	bf00      	nop
 801431e:	3710      	adds	r7, #16
 8014320:	46bd      	mov	sp, r7
 8014322:	bd80      	pop	{r7, pc}

08014324 <lcp_echo_lowerdown>:

/*
 * lcp_echo_lowerdown - Stop the timer for the LCP frame
 */

static void lcp_echo_lowerdown(ppp_pcb *pcb) {
 8014324:	b580      	push	{r7, lr}
 8014326:	b084      	sub	sp, #16
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	3390      	adds	r3, #144	; 0x90
 8014330:	60fb      	str	r3, [r7, #12]

    if (pcb->lcp_echo_timer_running != 0) {
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8014338:	f003 0310 	and.w	r3, r3, #16
 801433c:	b2db      	uxtb	r3, r3
 801433e:	2b00      	cmp	r3, #0
 8014340:	d00a      	beq.n	8014358 <lcp_echo_lowerdown+0x34>
        UNTIMEOUT (LcpEchoTimeout, f);
 8014342:	68f9      	ldr	r1, [r7, #12]
 8014344:	4806      	ldr	r0, [pc, #24]	; (8014360 <lcp_echo_lowerdown+0x3c>)
 8014346:	f7f9 fb73 	bl	800da30 <sys_untimeout>
        pcb->lcp_echo_timer_running = 0;
 801434a:	687a      	ldr	r2, [r7, #4]
 801434c:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8014350:	f36f 1304 	bfc	r3, #4, #1
 8014354:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    }
}
 8014358:	bf00      	nop
 801435a:	3710      	adds	r7, #16
 801435c:	46bd      	mov	sp, r7
 801435e:	bd80      	pop	{r7, pc}
 8014360:	08014139 	.word	0x08014139

08014364 <magic_churnrand>:
 *  If new random data is available, pass a pointer to that and it will be
 *  included.
 *
 * Ref: Applied Cryptography 2nd Ed. by Bruce Schneier p. 427
 */
static void magic_churnrand(char *rand_data, u32_t rand_len) {
 8014364:	b580      	push	{r7, lr}
 8014366:	b09a      	sub	sp, #104	; 0x68
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
 801436c:	6039      	str	r1, [r7, #0]
  lwip_md5_context md5_ctx;

  /* LWIP_DEBUGF(LOG_INFO, ("magic_churnrand: %u@%P\n", rand_len, rand_data)); */
  lwip_md5_init(&md5_ctx);
  lwip_md5_starts(&md5_ctx);
 801436e:	f107 0310 	add.w	r3, r7, #16
 8014372:	4618      	mov	r0, r3
 8014374:	f000 f89c 	bl	80144b0 <md5_starts>
  lwip_md5_update(&md5_ctx, (u_char *)magic_randpool, sizeof(magic_randpool));
 8014378:	f107 0310 	add.w	r3, r7, #16
 801437c:	2210      	movs	r2, #16
 801437e:	4918      	ldr	r1, [pc, #96]	; (80143e0 <magic_churnrand+0x7c>)
 8014380:	4618      	mov	r0, r3
 8014382:	f000 ff7d 	bl	8015280 <md5_update>
  if (rand_data) {
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d007      	beq.n	801439c <magic_churnrand+0x38>
    lwip_md5_update(&md5_ctx, (u_char *)rand_data, rand_len);
 801438c:	683a      	ldr	r2, [r7, #0]
 801438e:	f107 0310 	add.w	r3, r7, #16
 8014392:	6879      	ldr	r1, [r7, #4]
 8014394:	4618      	mov	r0, r3
 8014396:	f000 ff73 	bl	8015280 <md5_update>
 801439a:	e016      	b.n	80143ca <magic_churnrand+0x66>
#ifdef LWIP_RAND
      u32_t rand;
#endif /* LWIP_RAND */
    } sys_data;
    /* Load sys_data fields here. */
    magic_randomseed += sys_jiffies();
 801439c:	f7ec ffc2 	bl	8001324 <sys_jiffies>
 80143a0:	4602      	mov	r2, r0
 80143a2:	4b10      	ldr	r3, [pc, #64]	; (80143e4 <magic_churnrand+0x80>)
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	4413      	add	r3, r2
 80143a8:	4a0e      	ldr	r2, [pc, #56]	; (80143e4 <magic_churnrand+0x80>)
 80143aa:	6013      	str	r3, [r2, #0]
    sys_data.jiffies = magic_randomseed;
 80143ac:	4b0d      	ldr	r3, [pc, #52]	; (80143e4 <magic_churnrand+0x80>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	60bb      	str	r3, [r7, #8]
#ifdef LWIP_RAND
    sys_data.rand = LWIP_RAND();
 80143b2:	f7ec ffbf 	bl	8001334 <lwip_port_rand>
 80143b6:	4603      	mov	r3, r0
 80143b8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_RAND */
    lwip_md5_update(&md5_ctx, (u_char *)&sys_data, sizeof(sys_data));
 80143ba:	f107 0108 	add.w	r1, r7, #8
 80143be:	f107 0310 	add.w	r3, r7, #16
 80143c2:	2208      	movs	r2, #8
 80143c4:	4618      	mov	r0, r3
 80143c6:	f000 ff5b 	bl	8015280 <md5_update>
  }
  lwip_md5_finish(&md5_ctx, (u_char *)magic_randpool);
 80143ca:	f107 0310 	add.w	r3, r7, #16
 80143ce:	4904      	ldr	r1, [pc, #16]	; (80143e0 <magic_churnrand+0x7c>)
 80143d0:	4618      	mov	r0, r3
 80143d2:	f000 ffbd 	bl	8015350 <md5_finish>
  lwip_md5_free(&md5_ctx);
/*  LWIP_DEBUGF(LOG_INFO, ("magic_churnrand: -> 0\n")); */
}
 80143d6:	bf00      	nop
 80143d8:	3768      	adds	r7, #104	; 0x68
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}
 80143de:	bf00      	nop
 80143e0:	20000c30 	.word	0x20000c30
 80143e4:	20000c44 	.word	0x20000c44

080143e8 <magic_init>:

/*
 * Initialize the random number generator.
 */
void magic_init(void) {
 80143e8:	b580      	push	{r7, lr}
 80143ea:	af00      	add	r7, sp, #0
  magic_churnrand(NULL, 0);
 80143ec:	2100      	movs	r1, #0
 80143ee:	2000      	movs	r0, #0
 80143f0:	f7ff ffb8 	bl	8014364 <magic_churnrand>
}
 80143f4:	bf00      	nop
 80143f6:	bd80      	pop	{r7, pc}

080143f8 <magic_randomize>:

/*
 * Randomize our random seed value.
 */
void magic_randomize(void) {
 80143f8:	b580      	push	{r7, lr}
 80143fa:	af00      	add	r7, sp, #0
  magic_churnrand(NULL, 0);
 80143fc:	2100      	movs	r1, #0
 80143fe:	2000      	movs	r0, #0
 8014400:	f7ff ffb0 	bl	8014364 <magic_churnrand>
}
 8014404:	bf00      	nop
 8014406:	bd80      	pop	{r7, pc}

08014408 <magic_random_bytes>:
 *  predict future values.
 * XXX Why don't we preserve md5 between blocks and just update it with
 *  magic_randcount each time?  Probably there is a weakness but I wish that
 *  it was documented.
 */
void magic_random_bytes(unsigned char *buf, u32_t buf_len) {
 8014408:	b580      	push	{r7, lr}
 801440a:	b09e      	sub	sp, #120	; 0x78
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	6039      	str	r1, [r7, #0]
  lwip_md5_context md5_ctx;
  u_char tmp[MD5_HASH_SIZE];
  u32_t n;

  while (buf_len > 0) {
 8014412:	e033      	b.n	801447c <magic_random_bytes+0x74>
    lwip_md5_init(&md5_ctx);
    lwip_md5_starts(&md5_ctx);
 8014414:	f107 031c 	add.w	r3, r7, #28
 8014418:	4618      	mov	r0, r3
 801441a:	f000 f849 	bl	80144b0 <md5_starts>
    lwip_md5_update(&md5_ctx, (u_char *)magic_randpool, sizeof(magic_randpool));
 801441e:	f107 031c 	add.w	r3, r7, #28
 8014422:	2210      	movs	r2, #16
 8014424:	4919      	ldr	r1, [pc, #100]	; (801448c <magic_random_bytes+0x84>)
 8014426:	4618      	mov	r0, r3
 8014428:	f000 ff2a 	bl	8015280 <md5_update>
    lwip_md5_update(&md5_ctx, (u_char *)&magic_randcount, sizeof(magic_randcount));
 801442c:	f107 031c 	add.w	r3, r7, #28
 8014430:	2204      	movs	r2, #4
 8014432:	4917      	ldr	r1, [pc, #92]	; (8014490 <magic_random_bytes+0x88>)
 8014434:	4618      	mov	r0, r3
 8014436:	f000 ff23 	bl	8015280 <md5_update>
    lwip_md5_finish(&md5_ctx, tmp);
 801443a:	f107 020c 	add.w	r2, r7, #12
 801443e:	f107 031c 	add.w	r3, r7, #28
 8014442:	4611      	mov	r1, r2
 8014444:	4618      	mov	r0, r3
 8014446:	f000 ff83 	bl	8015350 <md5_finish>
    lwip_md5_free(&md5_ctx);
    magic_randcount++;
 801444a:	4b11      	ldr	r3, [pc, #68]	; (8014490 <magic_random_bytes+0x88>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	3301      	adds	r3, #1
 8014450:	4a0f      	ldr	r2, [pc, #60]	; (8014490 <magic_random_bytes+0x88>)
 8014452:	6013      	str	r3, [r2, #0]
    n = LWIP_MIN(buf_len, MD5_HASH_SIZE);
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	2b10      	cmp	r3, #16
 8014458:	bf28      	it	cs
 801445a:	2310      	movcs	r3, #16
 801445c:	677b      	str	r3, [r7, #116]	; 0x74
    MEMCPY(buf, tmp, n);
 801445e:	f107 030c 	add.w	r3, r7, #12
 8014462:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014464:	4619      	mov	r1, r3
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f003 ff06 	bl	8018278 <memcpy>
    buf += n;
 801446c:	687a      	ldr	r2, [r7, #4]
 801446e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014470:	4413      	add	r3, r2
 8014472:	607b      	str	r3, [r7, #4]
    buf_len -= n;
 8014474:	683a      	ldr	r2, [r7, #0]
 8014476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014478:	1ad3      	subs	r3, r2, r3
 801447a:	603b      	str	r3, [r7, #0]
  while (buf_len > 0) {
 801447c:	683b      	ldr	r3, [r7, #0]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d1c8      	bne.n	8014414 <magic_random_bytes+0xc>
  }
}
 8014482:	bf00      	nop
 8014484:	3778      	adds	r7, #120	; 0x78
 8014486:	46bd      	mov	sp, r7
 8014488:	bd80      	pop	{r7, pc}
 801448a:	bf00      	nop
 801448c:	20000c30 	.word	0x20000c30
 8014490:	20000c40 	.word	0x20000c40

08014494 <magic>:

/*
 * Return a new 32-bit random number.
 */
u32_t magic(void) {
 8014494:	b580      	push	{r7, lr}
 8014496:	b082      	sub	sp, #8
 8014498:	af00      	add	r7, sp, #0
  u32_t new_rand;

  magic_random_bytes((unsigned char *)&new_rand, sizeof(new_rand));
 801449a:	1d3b      	adds	r3, r7, #4
 801449c:	2104      	movs	r1, #4
 801449e:	4618      	mov	r0, r3
 80144a0:	f7ff ffb2 	bl	8014408 <magic_random_bytes>
  return new_rand;
 80144a4:	687b      	ldr	r3, [r7, #4]
}
 80144a6:	4618      	mov	r0, r3
 80144a8:	3708      	adds	r7, #8
 80144aa:	46bd      	mov	sp, r7
 80144ac:	bd80      	pop	{r7, pc}
	...

080144b0 <md5_starts>:

/*
 * MD5 context setup
 */
void md5_starts( md5_context *ctx )
{
 80144b0:	b480      	push	{r7}
 80144b2:	b083      	sub	sp, #12
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	2200      	movs	r2, #0
 80144bc:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	2200      	movs	r2, #0
 80144c2:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x67452301;
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	4a08      	ldr	r2, [pc, #32]	; (80144e8 <md5_starts+0x38>)
 80144c8:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	4a07      	ldr	r2, [pc, #28]	; (80144ec <md5_starts+0x3c>)
 80144ce:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	4a07      	ldr	r2, [pc, #28]	; (80144f0 <md5_starts+0x40>)
 80144d4:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	4a06      	ldr	r2, [pc, #24]	; (80144f4 <md5_starts+0x44>)
 80144da:	615a      	str	r2, [r3, #20]
}
 80144dc:	bf00      	nop
 80144de:	370c      	adds	r7, #12
 80144e0:	46bd      	mov	sp, r7
 80144e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e6:	4770      	bx	lr
 80144e8:	67452301 	.word	0x67452301
 80144ec:	efcdab89 	.word	0xefcdab89
 80144f0:	98badcfe 	.word	0x98badcfe
 80144f4:	10325476 	.word	0x10325476

080144f8 <md5_process>:

static void md5_process( md5_context *ctx, const unsigned char data[64] )
{
 80144f8:	b480      	push	{r7}
 80144fa:	b097      	sub	sp, #92	; 0x5c
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
 8014500:	6039      	str	r1, [r7, #0]
    unsigned long X[16], A, B, C, D;

    GET_ULONG_LE( X[ 0], data,  0 );
 8014502:	683b      	ldr	r3, [r7, #0]
 8014504:	781b      	ldrb	r3, [r3, #0]
 8014506:	461a      	mov	r2, r3
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	3301      	adds	r3, #1
 801450c:	781b      	ldrb	r3, [r3, #0]
 801450e:	021b      	lsls	r3, r3, #8
 8014510:	431a      	orrs	r2, r3
 8014512:	683b      	ldr	r3, [r7, #0]
 8014514:	3302      	adds	r3, #2
 8014516:	781b      	ldrb	r3, [r3, #0]
 8014518:	041b      	lsls	r3, r3, #16
 801451a:	431a      	orrs	r2, r3
 801451c:	683b      	ldr	r3, [r7, #0]
 801451e:	3303      	adds	r3, #3
 8014520:	781b      	ldrb	r3, [r3, #0]
 8014522:	061b      	lsls	r3, r3, #24
 8014524:	4313      	orrs	r3, r2
 8014526:	60bb      	str	r3, [r7, #8]
    GET_ULONG_LE( X[ 1], data,  4 );
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	3304      	adds	r3, #4
 801452c:	781b      	ldrb	r3, [r3, #0]
 801452e:	461a      	mov	r2, r3
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	3305      	adds	r3, #5
 8014534:	781b      	ldrb	r3, [r3, #0]
 8014536:	021b      	lsls	r3, r3, #8
 8014538:	431a      	orrs	r2, r3
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	3306      	adds	r3, #6
 801453e:	781b      	ldrb	r3, [r3, #0]
 8014540:	041b      	lsls	r3, r3, #16
 8014542:	431a      	orrs	r2, r3
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	3307      	adds	r3, #7
 8014548:	781b      	ldrb	r3, [r3, #0]
 801454a:	061b      	lsls	r3, r3, #24
 801454c:	4313      	orrs	r3, r2
 801454e:	60fb      	str	r3, [r7, #12]
    GET_ULONG_LE( X[ 2], data,  8 );
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	3308      	adds	r3, #8
 8014554:	781b      	ldrb	r3, [r3, #0]
 8014556:	461a      	mov	r2, r3
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	3309      	adds	r3, #9
 801455c:	781b      	ldrb	r3, [r3, #0]
 801455e:	021b      	lsls	r3, r3, #8
 8014560:	431a      	orrs	r2, r3
 8014562:	683b      	ldr	r3, [r7, #0]
 8014564:	330a      	adds	r3, #10
 8014566:	781b      	ldrb	r3, [r3, #0]
 8014568:	041b      	lsls	r3, r3, #16
 801456a:	431a      	orrs	r2, r3
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	330b      	adds	r3, #11
 8014570:	781b      	ldrb	r3, [r3, #0]
 8014572:	061b      	lsls	r3, r3, #24
 8014574:	4313      	orrs	r3, r2
 8014576:	613b      	str	r3, [r7, #16]
    GET_ULONG_LE( X[ 3], data, 12 );
 8014578:	683b      	ldr	r3, [r7, #0]
 801457a:	330c      	adds	r3, #12
 801457c:	781b      	ldrb	r3, [r3, #0]
 801457e:	461a      	mov	r2, r3
 8014580:	683b      	ldr	r3, [r7, #0]
 8014582:	330d      	adds	r3, #13
 8014584:	781b      	ldrb	r3, [r3, #0]
 8014586:	021b      	lsls	r3, r3, #8
 8014588:	431a      	orrs	r2, r3
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	330e      	adds	r3, #14
 801458e:	781b      	ldrb	r3, [r3, #0]
 8014590:	041b      	lsls	r3, r3, #16
 8014592:	431a      	orrs	r2, r3
 8014594:	683b      	ldr	r3, [r7, #0]
 8014596:	330f      	adds	r3, #15
 8014598:	781b      	ldrb	r3, [r3, #0]
 801459a:	061b      	lsls	r3, r3, #24
 801459c:	4313      	orrs	r3, r2
 801459e:	617b      	str	r3, [r7, #20]
    GET_ULONG_LE( X[ 4], data, 16 );
 80145a0:	683b      	ldr	r3, [r7, #0]
 80145a2:	3310      	adds	r3, #16
 80145a4:	781b      	ldrb	r3, [r3, #0]
 80145a6:	461a      	mov	r2, r3
 80145a8:	683b      	ldr	r3, [r7, #0]
 80145aa:	3311      	adds	r3, #17
 80145ac:	781b      	ldrb	r3, [r3, #0]
 80145ae:	021b      	lsls	r3, r3, #8
 80145b0:	431a      	orrs	r2, r3
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	3312      	adds	r3, #18
 80145b6:	781b      	ldrb	r3, [r3, #0]
 80145b8:	041b      	lsls	r3, r3, #16
 80145ba:	431a      	orrs	r2, r3
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	3313      	adds	r3, #19
 80145c0:	781b      	ldrb	r3, [r3, #0]
 80145c2:	061b      	lsls	r3, r3, #24
 80145c4:	4313      	orrs	r3, r2
 80145c6:	61bb      	str	r3, [r7, #24]
    GET_ULONG_LE( X[ 5], data, 20 );
 80145c8:	683b      	ldr	r3, [r7, #0]
 80145ca:	3314      	adds	r3, #20
 80145cc:	781b      	ldrb	r3, [r3, #0]
 80145ce:	461a      	mov	r2, r3
 80145d0:	683b      	ldr	r3, [r7, #0]
 80145d2:	3315      	adds	r3, #21
 80145d4:	781b      	ldrb	r3, [r3, #0]
 80145d6:	021b      	lsls	r3, r3, #8
 80145d8:	431a      	orrs	r2, r3
 80145da:	683b      	ldr	r3, [r7, #0]
 80145dc:	3316      	adds	r3, #22
 80145de:	781b      	ldrb	r3, [r3, #0]
 80145e0:	041b      	lsls	r3, r3, #16
 80145e2:	431a      	orrs	r2, r3
 80145e4:	683b      	ldr	r3, [r7, #0]
 80145e6:	3317      	adds	r3, #23
 80145e8:	781b      	ldrb	r3, [r3, #0]
 80145ea:	061b      	lsls	r3, r3, #24
 80145ec:	4313      	orrs	r3, r2
 80145ee:	61fb      	str	r3, [r7, #28]
    GET_ULONG_LE( X[ 6], data, 24 );
 80145f0:	683b      	ldr	r3, [r7, #0]
 80145f2:	3318      	adds	r3, #24
 80145f4:	781b      	ldrb	r3, [r3, #0]
 80145f6:	461a      	mov	r2, r3
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	3319      	adds	r3, #25
 80145fc:	781b      	ldrb	r3, [r3, #0]
 80145fe:	021b      	lsls	r3, r3, #8
 8014600:	431a      	orrs	r2, r3
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	331a      	adds	r3, #26
 8014606:	781b      	ldrb	r3, [r3, #0]
 8014608:	041b      	lsls	r3, r3, #16
 801460a:	431a      	orrs	r2, r3
 801460c:	683b      	ldr	r3, [r7, #0]
 801460e:	331b      	adds	r3, #27
 8014610:	781b      	ldrb	r3, [r3, #0]
 8014612:	061b      	lsls	r3, r3, #24
 8014614:	4313      	orrs	r3, r2
 8014616:	623b      	str	r3, [r7, #32]
    GET_ULONG_LE( X[ 7], data, 28 );
 8014618:	683b      	ldr	r3, [r7, #0]
 801461a:	331c      	adds	r3, #28
 801461c:	781b      	ldrb	r3, [r3, #0]
 801461e:	461a      	mov	r2, r3
 8014620:	683b      	ldr	r3, [r7, #0]
 8014622:	331d      	adds	r3, #29
 8014624:	781b      	ldrb	r3, [r3, #0]
 8014626:	021b      	lsls	r3, r3, #8
 8014628:	431a      	orrs	r2, r3
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	331e      	adds	r3, #30
 801462e:	781b      	ldrb	r3, [r3, #0]
 8014630:	041b      	lsls	r3, r3, #16
 8014632:	431a      	orrs	r2, r3
 8014634:	683b      	ldr	r3, [r7, #0]
 8014636:	331f      	adds	r3, #31
 8014638:	781b      	ldrb	r3, [r3, #0]
 801463a:	061b      	lsls	r3, r3, #24
 801463c:	4313      	orrs	r3, r2
 801463e:	627b      	str	r3, [r7, #36]	; 0x24
    GET_ULONG_LE( X[ 8], data, 32 );
 8014640:	683b      	ldr	r3, [r7, #0]
 8014642:	3320      	adds	r3, #32
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	461a      	mov	r2, r3
 8014648:	683b      	ldr	r3, [r7, #0]
 801464a:	3321      	adds	r3, #33	; 0x21
 801464c:	781b      	ldrb	r3, [r3, #0]
 801464e:	021b      	lsls	r3, r3, #8
 8014650:	431a      	orrs	r2, r3
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	3322      	adds	r3, #34	; 0x22
 8014656:	781b      	ldrb	r3, [r3, #0]
 8014658:	041b      	lsls	r3, r3, #16
 801465a:	431a      	orrs	r2, r3
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	3323      	adds	r3, #35	; 0x23
 8014660:	781b      	ldrb	r3, [r3, #0]
 8014662:	061b      	lsls	r3, r3, #24
 8014664:	4313      	orrs	r3, r2
 8014666:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_ULONG_LE( X[ 9], data, 36 );
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	3324      	adds	r3, #36	; 0x24
 801466c:	781b      	ldrb	r3, [r3, #0]
 801466e:	461a      	mov	r2, r3
 8014670:	683b      	ldr	r3, [r7, #0]
 8014672:	3325      	adds	r3, #37	; 0x25
 8014674:	781b      	ldrb	r3, [r3, #0]
 8014676:	021b      	lsls	r3, r3, #8
 8014678:	431a      	orrs	r2, r3
 801467a:	683b      	ldr	r3, [r7, #0]
 801467c:	3326      	adds	r3, #38	; 0x26
 801467e:	781b      	ldrb	r3, [r3, #0]
 8014680:	041b      	lsls	r3, r3, #16
 8014682:	431a      	orrs	r2, r3
 8014684:	683b      	ldr	r3, [r7, #0]
 8014686:	3327      	adds	r3, #39	; 0x27
 8014688:	781b      	ldrb	r3, [r3, #0]
 801468a:	061b      	lsls	r3, r3, #24
 801468c:	4313      	orrs	r3, r2
 801468e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_ULONG_LE( X[10], data, 40 );
 8014690:	683b      	ldr	r3, [r7, #0]
 8014692:	3328      	adds	r3, #40	; 0x28
 8014694:	781b      	ldrb	r3, [r3, #0]
 8014696:	461a      	mov	r2, r3
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	3329      	adds	r3, #41	; 0x29
 801469c:	781b      	ldrb	r3, [r3, #0]
 801469e:	021b      	lsls	r3, r3, #8
 80146a0:	431a      	orrs	r2, r3
 80146a2:	683b      	ldr	r3, [r7, #0]
 80146a4:	332a      	adds	r3, #42	; 0x2a
 80146a6:	781b      	ldrb	r3, [r3, #0]
 80146a8:	041b      	lsls	r3, r3, #16
 80146aa:	431a      	orrs	r2, r3
 80146ac:	683b      	ldr	r3, [r7, #0]
 80146ae:	332b      	adds	r3, #43	; 0x2b
 80146b0:	781b      	ldrb	r3, [r3, #0]
 80146b2:	061b      	lsls	r3, r3, #24
 80146b4:	4313      	orrs	r3, r2
 80146b6:	633b      	str	r3, [r7, #48]	; 0x30
    GET_ULONG_LE( X[11], data, 44 );
 80146b8:	683b      	ldr	r3, [r7, #0]
 80146ba:	332c      	adds	r3, #44	; 0x2c
 80146bc:	781b      	ldrb	r3, [r3, #0]
 80146be:	461a      	mov	r2, r3
 80146c0:	683b      	ldr	r3, [r7, #0]
 80146c2:	332d      	adds	r3, #45	; 0x2d
 80146c4:	781b      	ldrb	r3, [r3, #0]
 80146c6:	021b      	lsls	r3, r3, #8
 80146c8:	431a      	orrs	r2, r3
 80146ca:	683b      	ldr	r3, [r7, #0]
 80146cc:	332e      	adds	r3, #46	; 0x2e
 80146ce:	781b      	ldrb	r3, [r3, #0]
 80146d0:	041b      	lsls	r3, r3, #16
 80146d2:	431a      	orrs	r2, r3
 80146d4:	683b      	ldr	r3, [r7, #0]
 80146d6:	332f      	adds	r3, #47	; 0x2f
 80146d8:	781b      	ldrb	r3, [r3, #0]
 80146da:	061b      	lsls	r3, r3, #24
 80146dc:	4313      	orrs	r3, r2
 80146de:	637b      	str	r3, [r7, #52]	; 0x34
    GET_ULONG_LE( X[12], data, 48 );
 80146e0:	683b      	ldr	r3, [r7, #0]
 80146e2:	3330      	adds	r3, #48	; 0x30
 80146e4:	781b      	ldrb	r3, [r3, #0]
 80146e6:	461a      	mov	r2, r3
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	3331      	adds	r3, #49	; 0x31
 80146ec:	781b      	ldrb	r3, [r3, #0]
 80146ee:	021b      	lsls	r3, r3, #8
 80146f0:	431a      	orrs	r2, r3
 80146f2:	683b      	ldr	r3, [r7, #0]
 80146f4:	3332      	adds	r3, #50	; 0x32
 80146f6:	781b      	ldrb	r3, [r3, #0]
 80146f8:	041b      	lsls	r3, r3, #16
 80146fa:	431a      	orrs	r2, r3
 80146fc:	683b      	ldr	r3, [r7, #0]
 80146fe:	3333      	adds	r3, #51	; 0x33
 8014700:	781b      	ldrb	r3, [r3, #0]
 8014702:	061b      	lsls	r3, r3, #24
 8014704:	4313      	orrs	r3, r2
 8014706:	63bb      	str	r3, [r7, #56]	; 0x38
    GET_ULONG_LE( X[13], data, 52 );
 8014708:	683b      	ldr	r3, [r7, #0]
 801470a:	3334      	adds	r3, #52	; 0x34
 801470c:	781b      	ldrb	r3, [r3, #0]
 801470e:	461a      	mov	r2, r3
 8014710:	683b      	ldr	r3, [r7, #0]
 8014712:	3335      	adds	r3, #53	; 0x35
 8014714:	781b      	ldrb	r3, [r3, #0]
 8014716:	021b      	lsls	r3, r3, #8
 8014718:	431a      	orrs	r2, r3
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	3336      	adds	r3, #54	; 0x36
 801471e:	781b      	ldrb	r3, [r3, #0]
 8014720:	041b      	lsls	r3, r3, #16
 8014722:	431a      	orrs	r2, r3
 8014724:	683b      	ldr	r3, [r7, #0]
 8014726:	3337      	adds	r3, #55	; 0x37
 8014728:	781b      	ldrb	r3, [r3, #0]
 801472a:	061b      	lsls	r3, r3, #24
 801472c:	4313      	orrs	r3, r2
 801472e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GET_ULONG_LE( X[14], data, 56 );
 8014730:	683b      	ldr	r3, [r7, #0]
 8014732:	3338      	adds	r3, #56	; 0x38
 8014734:	781b      	ldrb	r3, [r3, #0]
 8014736:	461a      	mov	r2, r3
 8014738:	683b      	ldr	r3, [r7, #0]
 801473a:	3339      	adds	r3, #57	; 0x39
 801473c:	781b      	ldrb	r3, [r3, #0]
 801473e:	021b      	lsls	r3, r3, #8
 8014740:	431a      	orrs	r2, r3
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	333a      	adds	r3, #58	; 0x3a
 8014746:	781b      	ldrb	r3, [r3, #0]
 8014748:	041b      	lsls	r3, r3, #16
 801474a:	431a      	orrs	r2, r3
 801474c:	683b      	ldr	r3, [r7, #0]
 801474e:	333b      	adds	r3, #59	; 0x3b
 8014750:	781b      	ldrb	r3, [r3, #0]
 8014752:	061b      	lsls	r3, r3, #24
 8014754:	4313      	orrs	r3, r2
 8014756:	643b      	str	r3, [r7, #64]	; 0x40
    GET_ULONG_LE( X[15], data, 60 );
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	333c      	adds	r3, #60	; 0x3c
 801475c:	781b      	ldrb	r3, [r3, #0]
 801475e:	461a      	mov	r2, r3
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	333d      	adds	r3, #61	; 0x3d
 8014764:	781b      	ldrb	r3, [r3, #0]
 8014766:	021b      	lsls	r3, r3, #8
 8014768:	431a      	orrs	r2, r3
 801476a:	683b      	ldr	r3, [r7, #0]
 801476c:	333e      	adds	r3, #62	; 0x3e
 801476e:	781b      	ldrb	r3, [r3, #0]
 8014770:	041b      	lsls	r3, r3, #16
 8014772:	431a      	orrs	r2, r3
 8014774:	683b      	ldr	r3, [r7, #0]
 8014776:	333f      	adds	r3, #63	; 0x3f
 8014778:	781b      	ldrb	r3, [r3, #0]
 801477a:	061b      	lsls	r3, r3, #24
 801477c:	4313      	orrs	r3, r2
 801477e:	647b      	str	r3, [r7, #68]	; 0x44
#define P(a,b,c,d,k,s,t)                                \
{                                                       \
    a += F(b,c,d) + X[k] + t; a = S(a,s) + b;           \
}

    A = ctx->state[0];
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	689b      	ldr	r3, [r3, #8]
 8014784:	657b      	str	r3, [r7, #84]	; 0x54
    B = ctx->state[1];
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	68db      	ldr	r3, [r3, #12]
 801478a:	653b      	str	r3, [r7, #80]	; 0x50
    C = ctx->state[2];
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	691b      	ldr	r3, [r3, #16]
 8014790:	64fb      	str	r3, [r7, #76]	; 0x4c
    D = ctx->state[3];
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	695b      	ldr	r3, [r3, #20]
 8014796:	64bb      	str	r3, [r7, #72]	; 0x48

#define F(x,y,z) (z ^ (x & (y ^ z)))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
 8014798:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801479a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801479c:	405a      	eors	r2, r3
 801479e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147a0:	401a      	ands	r2, r3
 80147a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147a4:	405a      	eors	r2, r3
 80147a6:	68bb      	ldr	r3, [r7, #8]
 80147a8:	441a      	add	r2, r3
 80147aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147ac:	441a      	add	r2, r3
 80147ae:	4ba5      	ldr	r3, [pc, #660]	; (8014a44 <md5_process+0x54c>)
 80147b0:	4413      	add	r3, r2
 80147b2:	657b      	str	r3, [r7, #84]	; 0x54
 80147b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147b6:	ea4f 6273 	mov.w	r2, r3, ror #25
 80147ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147bc:	4413      	add	r3, r2
 80147be:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 80147c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80147c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147c4:	405a      	eors	r2, r3
 80147c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147c8:	401a      	ands	r2, r3
 80147ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147cc:	405a      	eors	r2, r3
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	441a      	add	r2, r3
 80147d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147d4:	441a      	add	r2, r3
 80147d6:	4b9c      	ldr	r3, [pc, #624]	; (8014a48 <md5_process+0x550>)
 80147d8:	4413      	add	r3, r2
 80147da:	64bb      	str	r3, [r7, #72]	; 0x48
 80147dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147de:	ea4f 5233 	mov.w	r2, r3, ror #20
 80147e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147e4:	4413      	add	r3, r2
 80147e6:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 17, 0x242070DB );
 80147e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80147ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147ec:	405a      	eors	r2, r3
 80147ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147f0:	401a      	ands	r2, r3
 80147f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147f4:	405a      	eors	r2, r3
 80147f6:	693b      	ldr	r3, [r7, #16]
 80147f8:	441a      	add	r2, r3
 80147fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147fc:	441a      	add	r2, r3
 80147fe:	4b93      	ldr	r3, [pc, #588]	; (8014a4c <md5_process+0x554>)
 8014800:	4413      	add	r3, r2
 8014802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014806:	ea4f 32f3 	mov.w	r2, r3, ror #15
 801480a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801480c:	4413      	add	r3, r2
 801480e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 8014810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014814:	405a      	eors	r2, r3
 8014816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014818:	401a      	ands	r2, r3
 801481a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801481c:	405a      	eors	r2, r3
 801481e:	697b      	ldr	r3, [r7, #20]
 8014820:	441a      	add	r2, r3
 8014822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014824:	441a      	add	r2, r3
 8014826:	4b8a      	ldr	r3, [pc, #552]	; (8014a50 <md5_process+0x558>)
 8014828:	4413      	add	r3, r2
 801482a:	653b      	str	r3, [r7, #80]	; 0x50
 801482c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801482e:	ea4f 22b3 	mov.w	r2, r3, ror #10
 8014832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014834:	4413      	add	r3, r2
 8014836:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 8014838:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801483a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801483c:	405a      	eors	r2, r3
 801483e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014840:	401a      	ands	r2, r3
 8014842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014844:	405a      	eors	r2, r3
 8014846:	69bb      	ldr	r3, [r7, #24]
 8014848:	441a      	add	r2, r3
 801484a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801484c:	441a      	add	r2, r3
 801484e:	4b81      	ldr	r3, [pc, #516]	; (8014a54 <md5_process+0x55c>)
 8014850:	4413      	add	r3, r2
 8014852:	657b      	str	r3, [r7, #84]	; 0x54
 8014854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014856:	ea4f 6273 	mov.w	r2, r3, ror #25
 801485a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801485c:	4413      	add	r3, r2
 801485e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  5, 12, 0x4787C62A );
 8014860:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014864:	405a      	eors	r2, r3
 8014866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014868:	401a      	ands	r2, r3
 801486a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801486c:	405a      	eors	r2, r3
 801486e:	69fb      	ldr	r3, [r7, #28]
 8014870:	441a      	add	r2, r3
 8014872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014874:	441a      	add	r2, r3
 8014876:	4b78      	ldr	r3, [pc, #480]	; (8014a58 <md5_process+0x560>)
 8014878:	4413      	add	r3, r2
 801487a:	64bb      	str	r3, [r7, #72]	; 0x48
 801487c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801487e:	ea4f 5233 	mov.w	r2, r3, ror #20
 8014882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014884:	4413      	add	r3, r2
 8014886:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 17, 0xA8304613 );
 8014888:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801488a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801488c:	405a      	eors	r2, r3
 801488e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014890:	401a      	ands	r2, r3
 8014892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014894:	405a      	eors	r2, r3
 8014896:	6a3b      	ldr	r3, [r7, #32]
 8014898:	441a      	add	r2, r3
 801489a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801489c:	441a      	add	r2, r3
 801489e:	4b6f      	ldr	r3, [pc, #444]	; (8014a5c <md5_process+0x564>)
 80148a0:	4413      	add	r3, r2
 80148a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80148a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148a6:	ea4f 32f3 	mov.w	r2, r3, ror #15
 80148aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80148ac:	4413      	add	r3, r2
 80148ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  7, 22, 0xFD469501 );
 80148b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80148b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148b4:	405a      	eors	r2, r3
 80148b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148b8:	401a      	ands	r2, r3
 80148ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148bc:	405a      	eors	r2, r3
 80148be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c0:	441a      	add	r2, r3
 80148c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148c4:	441a      	add	r2, r3
 80148c6:	4b66      	ldr	r3, [pc, #408]	; (8014a60 <md5_process+0x568>)
 80148c8:	4413      	add	r3, r2
 80148ca:	653b      	str	r3, [r7, #80]	; 0x50
 80148cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148ce:	ea4f 22b3 	mov.w	r2, r3, ror #10
 80148d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148d4:	4413      	add	r3, r2
 80148d6:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  7, 0x698098D8 );
 80148d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80148da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80148dc:	405a      	eors	r2, r3
 80148de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148e0:	401a      	ands	r2, r3
 80148e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80148e4:	405a      	eors	r2, r3
 80148e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148e8:	441a      	add	r2, r3
 80148ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148ec:	441a      	add	r2, r3
 80148ee:	4b5d      	ldr	r3, [pc, #372]	; (8014a64 <md5_process+0x56c>)
 80148f0:	4413      	add	r3, r2
 80148f2:	657b      	str	r3, [r7, #84]	; 0x54
 80148f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148f6:	ea4f 6273 	mov.w	r2, r3, ror #25
 80148fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148fc:	4413      	add	r3, r2
 80148fe:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 8014900:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014904:	405a      	eors	r2, r3
 8014906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014908:	401a      	ands	r2, r3
 801490a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801490c:	405a      	eors	r2, r3
 801490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014910:	441a      	add	r2, r3
 8014912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014914:	441a      	add	r2, r3
 8014916:	4b54      	ldr	r3, [pc, #336]	; (8014a68 <md5_process+0x570>)
 8014918:	4413      	add	r3, r2
 801491a:	64bb      	str	r3, [r7, #72]	; 0x48
 801491c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801491e:	ea4f 5233 	mov.w	r2, r3, ror #20
 8014922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014924:	4413      	add	r3, r2
 8014926:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 8014928:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801492a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801492c:	405a      	eors	r2, r3
 801492e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014930:	401a      	ands	r2, r3
 8014932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014934:	405a      	eors	r2, r3
 8014936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014938:	441a      	add	r2, r3
 801493a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801493c:	4413      	add	r3, r2
 801493e:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
 8014942:	3b4f      	subs	r3, #79	; 0x4f
 8014944:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014948:	ea4f 32f3 	mov.w	r2, r3, ror #15
 801494c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801494e:	4413      	add	r3, r2
 8014950:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 8014952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014956:	405a      	eors	r2, r3
 8014958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801495a:	401a      	ands	r2, r3
 801495c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801495e:	405a      	eors	r2, r3
 8014960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014962:	441a      	add	r2, r3
 8014964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014966:	441a      	add	r2, r3
 8014968:	4b40      	ldr	r3, [pc, #256]	; (8014a6c <md5_process+0x574>)
 801496a:	4413      	add	r3, r2
 801496c:	653b      	str	r3, [r7, #80]	; 0x50
 801496e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014970:	ea4f 22b3 	mov.w	r2, r3, ror #10
 8014974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014976:	4413      	add	r3, r2
 8014978:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  7, 0x6B901122 );
 801497a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801497c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801497e:	405a      	eors	r2, r3
 8014980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014982:	401a      	ands	r2, r3
 8014984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014986:	405a      	eors	r2, r3
 8014988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801498a:	441a      	add	r2, r3
 801498c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801498e:	441a      	add	r2, r3
 8014990:	4b37      	ldr	r3, [pc, #220]	; (8014a70 <md5_process+0x578>)
 8014992:	4413      	add	r3, r2
 8014994:	657b      	str	r3, [r7, #84]	; 0x54
 8014996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014998:	ea4f 6273 	mov.w	r2, r3, ror #25
 801499c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801499e:	4413      	add	r3, r2
 80149a0:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 13, 12, 0xFD987193 );
 80149a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80149a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149a6:	405a      	eors	r2, r3
 80149a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80149aa:	401a      	ands	r2, r3
 80149ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149ae:	405a      	eors	r2, r3
 80149b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149b2:	441a      	add	r2, r3
 80149b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80149b6:	441a      	add	r2, r3
 80149b8:	4b2e      	ldr	r3, [pc, #184]	; (8014a74 <md5_process+0x57c>)
 80149ba:	4413      	add	r3, r2
 80149bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80149be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80149c0:	ea4f 5233 	mov.w	r2, r3, ror #20
 80149c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80149c6:	4413      	add	r3, r2
 80149c8:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 17, 0xA679438E );
 80149ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80149cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149ce:	405a      	eors	r2, r3
 80149d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80149d2:	401a      	ands	r2, r3
 80149d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149d6:	405a      	eors	r2, r3
 80149d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149da:	441a      	add	r2, r3
 80149dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149de:	441a      	add	r2, r3
 80149e0:	4b25      	ldr	r3, [pc, #148]	; (8014a78 <md5_process+0x580>)
 80149e2:	4413      	add	r3, r2
 80149e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80149e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149e8:	ea4f 32f3 	mov.w	r2, r3, ror #15
 80149ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80149ee:	4413      	add	r3, r2
 80149f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 15, 22, 0x49B40821 );
 80149f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80149f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80149f6:	405a      	eors	r2, r3
 80149f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149fa:	401a      	ands	r2, r3
 80149fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80149fe:	405a      	eors	r2, r3
 8014a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a02:	441a      	add	r2, r3
 8014a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a06:	441a      	add	r2, r3
 8014a08:	4b1c      	ldr	r3, [pc, #112]	; (8014a7c <md5_process+0x584>)
 8014a0a:	4413      	add	r3, r2
 8014a0c:	653b      	str	r3, [r7, #80]	; 0x50
 8014a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a10:	ea4f 22b3 	mov.w	r2, r3, ror #10
 8014a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a16:	4413      	add	r3, r2
 8014a18:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) (y ^ (z & (x ^ y)))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
 8014a1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a1e:	405a      	eors	r2, r3
 8014a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a22:	401a      	ands	r2, r3
 8014a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a26:	405a      	eors	r2, r3
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	441a      	add	r2, r3
 8014a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a2e:	441a      	add	r2, r3
 8014a30:	4b13      	ldr	r3, [pc, #76]	; (8014a80 <md5_process+0x588>)
 8014a32:	4413      	add	r3, r2
 8014a34:	657b      	str	r3, [r7, #84]	; 0x54
 8014a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a38:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8014a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a3e:	4413      	add	r3, r2
 8014a40:	e020      	b.n	8014a84 <md5_process+0x58c>
 8014a42:	bf00      	nop
 8014a44:	d76aa478 	.word	0xd76aa478
 8014a48:	e8c7b756 	.word	0xe8c7b756
 8014a4c:	242070db 	.word	0x242070db
 8014a50:	c1bdceee 	.word	0xc1bdceee
 8014a54:	f57c0faf 	.word	0xf57c0faf
 8014a58:	4787c62a 	.word	0x4787c62a
 8014a5c:	a8304613 	.word	0xa8304613
 8014a60:	fd469501 	.word	0xfd469501
 8014a64:	698098d8 	.word	0x698098d8
 8014a68:	8b44f7af 	.word	0x8b44f7af
 8014a6c:	895cd7be 	.word	0x895cd7be
 8014a70:	6b901122 	.word	0x6b901122
 8014a74:	fd987193 	.word	0xfd987193
 8014a78:	a679438e 	.word	0xa679438e
 8014a7c:	49b40821 	.word	0x49b40821
 8014a80:	f61e2562 	.word	0xf61e2562
 8014a84:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  6,  9, 0xC040B340 );
 8014a86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a8a:	405a      	eors	r2, r3
 8014a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a8e:	401a      	ands	r2, r3
 8014a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a92:	405a      	eors	r2, r3
 8014a94:	6a3b      	ldr	r3, [r7, #32]
 8014a96:	441a      	add	r2, r3
 8014a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a9a:	441a      	add	r2, r3
 8014a9c:	4ba4      	ldr	r3, [pc, #656]	; (8014d30 <md5_process+0x838>)
 8014a9e:	4413      	add	r3, r2
 8014aa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8014aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014aa4:	ea4f 52f3 	mov.w	r2, r3, ror #23
 8014aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014aaa:	4413      	add	r3, r2
 8014aac:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 14, 0x265E5A51 );
 8014aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ab2:	405a      	eors	r2, r3
 8014ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ab6:	401a      	ands	r2, r3
 8014ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014aba:	405a      	eors	r2, r3
 8014abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014abe:	441a      	add	r2, r3
 8014ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ac2:	441a      	add	r2, r3
 8014ac4:	4b9b      	ldr	r3, [pc, #620]	; (8014d34 <md5_process+0x83c>)
 8014ac6:	4413      	add	r3, r2
 8014ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014acc:	ea4f 42b3 	mov.w	r2, r3, ror #18
 8014ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ad2:	4413      	add	r3, r2
 8014ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
 8014ad6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ada:	405a      	eors	r2, r3
 8014adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ade:	401a      	ands	r2, r3
 8014ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ae2:	405a      	eors	r2, r3
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	441a      	add	r2, r3
 8014ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014aea:	441a      	add	r2, r3
 8014aec:	4b92      	ldr	r3, [pc, #584]	; (8014d38 <md5_process+0x840>)
 8014aee:	4413      	add	r3, r2
 8014af0:	653b      	str	r3, [r7, #80]	; 0x50
 8014af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014af4:	ea4f 3233 	mov.w	r2, r3, ror #12
 8014af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014afa:	4413      	add	r3, r2
 8014afc:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  5,  5, 0xD62F105D );
 8014afe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b02:	405a      	eors	r2, r3
 8014b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b06:	401a      	ands	r2, r3
 8014b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b0a:	405a      	eors	r2, r3
 8014b0c:	69fb      	ldr	r3, [r7, #28]
 8014b0e:	441a      	add	r2, r3
 8014b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b12:	441a      	add	r2, r3
 8014b14:	4b89      	ldr	r3, [pc, #548]	; (8014d3c <md5_process+0x844>)
 8014b16:	4413      	add	r3, r2
 8014b18:	657b      	str	r3, [r7, #84]	; 0x54
 8014b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b1c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8014b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b22:	4413      	add	r3, r2
 8014b24:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 10,  9, 0x02441453 );
 8014b26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b2a:	405a      	eors	r2, r3
 8014b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b2e:	401a      	ands	r2, r3
 8014b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b32:	405a      	eors	r2, r3
 8014b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b36:	441a      	add	r2, r3
 8014b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b3a:	441a      	add	r2, r3
 8014b3c:	4b80      	ldr	r3, [pc, #512]	; (8014d40 <md5_process+0x848>)
 8014b3e:	4413      	add	r3, r2
 8014b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8014b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b44:	ea4f 52f3 	mov.w	r2, r3, ror #23
 8014b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b4a:	4413      	add	r3, r2
 8014b4c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
 8014b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b52:	405a      	eors	r2, r3
 8014b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b56:	401a      	ands	r2, r3
 8014b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b5a:	405a      	eors	r2, r3
 8014b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b5e:	441a      	add	r2, r3
 8014b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b62:	441a      	add	r2, r3
 8014b64:	4b77      	ldr	r3, [pc, #476]	; (8014d44 <md5_process+0x84c>)
 8014b66:	4413      	add	r3, r2
 8014b68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b6c:	ea4f 42b3 	mov.w	r2, r3, ror #18
 8014b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b72:	4413      	add	r3, r2
 8014b74:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
 8014b76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b7a:	405a      	eors	r2, r3
 8014b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b7e:	401a      	ands	r2, r3
 8014b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b82:	405a      	eors	r2, r3
 8014b84:	69bb      	ldr	r3, [r7, #24]
 8014b86:	441a      	add	r2, r3
 8014b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b8a:	441a      	add	r2, r3
 8014b8c:	4b6e      	ldr	r3, [pc, #440]	; (8014d48 <md5_process+0x850>)
 8014b8e:	4413      	add	r3, r2
 8014b90:	653b      	str	r3, [r7, #80]	; 0x50
 8014b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b94:	ea4f 3233 	mov.w	r2, r3, ror #12
 8014b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b9a:	4413      	add	r3, r2
 8014b9c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
 8014b9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ba2:	405a      	eors	r2, r3
 8014ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ba6:	401a      	ands	r2, r3
 8014ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014baa:	405a      	eors	r2, r3
 8014bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bae:	441a      	add	r2, r3
 8014bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bb2:	441a      	add	r2, r3
 8014bb4:	4b65      	ldr	r3, [pc, #404]	; (8014d4c <md5_process+0x854>)
 8014bb6:	4413      	add	r3, r2
 8014bb8:	657b      	str	r3, [r7, #84]	; 0x54
 8014bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bbc:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8014bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bc2:	4413      	add	r3, r2
 8014bc4:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 14,  9, 0xC33707D6 );
 8014bc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bca:	405a      	eors	r2, r3
 8014bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bce:	401a      	ands	r2, r3
 8014bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bd2:	405a      	eors	r2, r3
 8014bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014bd6:	441a      	add	r2, r3
 8014bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014bda:	441a      	add	r2, r3
 8014bdc:	4b5c      	ldr	r3, [pc, #368]	; (8014d50 <md5_process+0x858>)
 8014bde:	4413      	add	r3, r2
 8014be0:	64bb      	str	r3, [r7, #72]	; 0x48
 8014be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014be4:	ea4f 52f3 	mov.w	r2, r3, ror #23
 8014be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bea:	4413      	add	r3, r2
 8014bec:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
 8014bee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bf2:	405a      	eors	r2, r3
 8014bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bf6:	401a      	ands	r2, r3
 8014bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bfa:	405a      	eors	r2, r3
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	441a      	add	r2, r3
 8014c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c02:	441a      	add	r2, r3
 8014c04:	4b53      	ldr	r3, [pc, #332]	; (8014d54 <md5_process+0x85c>)
 8014c06:	4413      	add	r3, r2
 8014c08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c0c:	ea4f 42b3 	mov.w	r2, r3, ror #18
 8014c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c12:	4413      	add	r3, r2
 8014c14:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  8, 20, 0x455A14ED );
 8014c16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c1a:	405a      	eors	r2, r3
 8014c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c1e:	401a      	ands	r2, r3
 8014c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c22:	405a      	eors	r2, r3
 8014c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c26:	441a      	add	r2, r3
 8014c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c2a:	441a      	add	r2, r3
 8014c2c:	4b4a      	ldr	r3, [pc, #296]	; (8014d58 <md5_process+0x860>)
 8014c2e:	4413      	add	r3, r2
 8014c30:	653b      	str	r3, [r7, #80]	; 0x50
 8014c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c34:	ea4f 3233 	mov.w	r2, r3, ror #12
 8014c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c3a:	4413      	add	r3, r2
 8014c3c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
 8014c3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c42:	405a      	eors	r2, r3
 8014c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c46:	401a      	ands	r2, r3
 8014c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c4a:	405a      	eors	r2, r3
 8014c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c4e:	441a      	add	r2, r3
 8014c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c52:	441a      	add	r2, r3
 8014c54:	4b41      	ldr	r3, [pc, #260]	; (8014d5c <md5_process+0x864>)
 8014c56:	4413      	add	r3, r2
 8014c58:	657b      	str	r3, [r7, #84]	; 0x54
 8014c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c5c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8014c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c62:	4413      	add	r3, r2
 8014c64:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
 8014c66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c6a:	405a      	eors	r2, r3
 8014c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c6e:	401a      	ands	r2, r3
 8014c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c72:	405a      	eors	r2, r3
 8014c74:	693b      	ldr	r3, [r7, #16]
 8014c76:	441a      	add	r2, r3
 8014c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c7a:	441a      	add	r2, r3
 8014c7c:	4b38      	ldr	r3, [pc, #224]	; (8014d60 <md5_process+0x868>)
 8014c7e:	4413      	add	r3, r2
 8014c80:	64bb      	str	r3, [r7, #72]	; 0x48
 8014c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c84:	ea4f 52f3 	mov.w	r2, r3, ror #23
 8014c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c8a:	4413      	add	r3, r2
 8014c8c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 14, 0x676F02D9 );
 8014c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c92:	405a      	eors	r2, r3
 8014c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c96:	401a      	ands	r2, r3
 8014c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c9a:	405a      	eors	r2, r3
 8014c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c9e:	441a      	add	r2, r3
 8014ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ca2:	441a      	add	r2, r3
 8014ca4:	4b2f      	ldr	r3, [pc, #188]	; (8014d64 <md5_process+0x86c>)
 8014ca6:	4413      	add	r3, r2
 8014ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cac:	ea4f 42b3 	mov.w	r2, r3, ror #18
 8014cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014cb2:	4413      	add	r3, r2
 8014cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );
 8014cb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014cba:	405a      	eors	r2, r3
 8014cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014cbe:	401a      	ands	r2, r3
 8014cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014cc2:	405a      	eors	r2, r3
 8014cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cc6:	441a      	add	r2, r3
 8014cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cca:	441a      	add	r2, r3
 8014ccc:	4b26      	ldr	r3, [pc, #152]	; (8014d68 <md5_process+0x870>)
 8014cce:	4413      	add	r3, r2
 8014cd0:	653b      	str	r3, [r7, #80]	; 0x50
 8014cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cd4:	ea4f 3233 	mov.w	r2, r3, ror #12
 8014cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cda:	4413      	add	r3, r2
 8014cdc:	653b      	str	r3, [r7, #80]	; 0x50

#undef F
    
#define F(x,y,z) (x ^ y ^ z)

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
 8014cde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ce2:	405a      	eors	r2, r3
 8014ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ce6:	405a      	eors	r2, r3
 8014ce8:	69fb      	ldr	r3, [r7, #28]
 8014cea:	441a      	add	r2, r3
 8014cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014cee:	4413      	add	r3, r2
 8014cf0:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
 8014cf4:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
 8014cf8:	657b      	str	r3, [r7, #84]	; 0x54
 8014cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014cfc:	ea4f 7233 	mov.w	r2, r3, ror #28
 8014d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d02:	4413      	add	r3, r2
 8014d04:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  8, 11, 0x8771F681 );
 8014d06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d0a:	405a      	eors	r2, r3
 8014d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d0e:	405a      	eors	r2, r3
 8014d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d12:	441a      	add	r2, r3
 8014d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d16:	441a      	add	r2, r3
 8014d18:	4b14      	ldr	r3, [pc, #80]	; (8014d6c <md5_process+0x874>)
 8014d1a:	4413      	add	r3, r2
 8014d1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8014d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d20:	ea4f 5273 	mov.w	r2, r3, ror #21
 8014d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014d26:	4413      	add	r3, r2
 8014d28:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
 8014d2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014d2c:	e020      	b.n	8014d70 <md5_process+0x878>
 8014d2e:	bf00      	nop
 8014d30:	c040b340 	.word	0xc040b340
 8014d34:	265e5a51 	.word	0x265e5a51
 8014d38:	e9b6c7aa 	.word	0xe9b6c7aa
 8014d3c:	d62f105d 	.word	0xd62f105d
 8014d40:	02441453 	.word	0x02441453
 8014d44:	d8a1e681 	.word	0xd8a1e681
 8014d48:	e7d3fbc8 	.word	0xe7d3fbc8
 8014d4c:	21e1cde6 	.word	0x21e1cde6
 8014d50:	c33707d6 	.word	0xc33707d6
 8014d54:	f4d50d87 	.word	0xf4d50d87
 8014d58:	455a14ed 	.word	0x455a14ed
 8014d5c:	a9e3e905 	.word	0xa9e3e905
 8014d60:	fcefa3f8 	.word	0xfcefa3f8
 8014d64:	676f02d9 	.word	0x676f02d9
 8014d68:	8d2a4c8a 	.word	0x8d2a4c8a
 8014d6c:	8771f681 	.word	0x8771f681
 8014d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014d72:	405a      	eors	r2, r3
 8014d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d76:	405a      	eors	r2, r3
 8014d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d7a:	441a      	add	r2, r3
 8014d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d7e:	441a      	add	r2, r3
 8014d80:	4ba4      	ldr	r3, [pc, #656]	; (8015014 <md5_process+0xb1c>)
 8014d82:	4413      	add	r3, r2
 8014d84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d88:	ea4f 4233 	mov.w	r2, r3, ror #16
 8014d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d8e:	4413      	add	r3, r2
 8014d90:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 14, 23, 0xFDE5380C );
 8014d92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d96:	405a      	eors	r2, r3
 8014d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014d9a:	405a      	eors	r2, r3
 8014d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d9e:	441a      	add	r2, r3
 8014da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014da2:	441a      	add	r2, r3
 8014da4:	4b9c      	ldr	r3, [pc, #624]	; (8015018 <md5_process+0xb20>)
 8014da6:	4413      	add	r3, r2
 8014da8:	653b      	str	r3, [r7, #80]	; 0x50
 8014daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014dac:	ea4f 2273 	mov.w	r2, r3, ror #9
 8014db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014db2:	4413      	add	r3, r2
 8014db4:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
 8014db6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014dba:	405a      	eors	r2, r3
 8014dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014dbe:	405a      	eors	r2, r3
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	441a      	add	r2, r3
 8014dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014dc6:	441a      	add	r2, r3
 8014dc8:	4b94      	ldr	r3, [pc, #592]	; (801501c <md5_process+0xb24>)
 8014dca:	4413      	add	r3, r2
 8014dcc:	657b      	str	r3, [r7, #84]	; 0x54
 8014dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014dd0:	ea4f 7233 	mov.w	r2, r3, ror #28
 8014dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014dd6:	4413      	add	r3, r2
 8014dd8:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
 8014dda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014dde:	405a      	eors	r2, r3
 8014de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014de2:	405a      	eors	r2, r3
 8014de4:	69bb      	ldr	r3, [r7, #24]
 8014de6:	441a      	add	r2, r3
 8014de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014dea:	441a      	add	r2, r3
 8014dec:	4b8c      	ldr	r3, [pc, #560]	; (8015020 <md5_process+0xb28>)
 8014dee:	4413      	add	r3, r2
 8014df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8014df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014df4:	ea4f 5273 	mov.w	r2, r3, ror #21
 8014df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014dfa:	4413      	add	r3, r2
 8014dfc:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
 8014dfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e02:	405a      	eors	r2, r3
 8014e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e06:	405a      	eors	r2, r3
 8014e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e0a:	441a      	add	r2, r3
 8014e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e0e:	441a      	add	r2, r3
 8014e10:	4b84      	ldr	r3, [pc, #528]	; (8015024 <md5_process+0xb2c>)
 8014e12:	4413      	add	r3, r2
 8014e14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e18:	ea4f 4233 	mov.w	r2, r3, ror #16
 8014e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e1e:	4413      	add	r3, r2
 8014e20:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
 8014e22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e26:	405a      	eors	r2, r3
 8014e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e2a:	405a      	eors	r2, r3
 8014e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e2e:	441a      	add	r2, r3
 8014e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e32:	441a      	add	r2, r3
 8014e34:	4b7c      	ldr	r3, [pc, #496]	; (8015028 <md5_process+0xb30>)
 8014e36:	4413      	add	r3, r2
 8014e38:	653b      	str	r3, [r7, #80]	; 0x50
 8014e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e3c:	ea4f 2273 	mov.w	r2, r3, ror #9
 8014e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e42:	4413      	add	r3, r2
 8014e44:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
 8014e46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e4a:	405a      	eors	r2, r3
 8014e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e4e:	405a      	eors	r2, r3
 8014e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e52:	441a      	add	r2, r3
 8014e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e56:	441a      	add	r2, r3
 8014e58:	4b74      	ldr	r3, [pc, #464]	; (801502c <md5_process+0xb34>)
 8014e5a:	4413      	add	r3, r2
 8014e5c:	657b      	str	r3, [r7, #84]	; 0x54
 8014e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e60:	ea4f 7233 	mov.w	r2, r3, ror #28
 8014e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e66:	4413      	add	r3, r2
 8014e68:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  0, 11, 0xEAA127FA );
 8014e6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e6e:	405a      	eors	r2, r3
 8014e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e72:	405a      	eors	r2, r3
 8014e74:	68bb      	ldr	r3, [r7, #8]
 8014e76:	441a      	add	r2, r3
 8014e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e7a:	441a      	add	r2, r3
 8014e7c:	4b6c      	ldr	r3, [pc, #432]	; (8015030 <md5_process+0xb38>)
 8014e7e:	4413      	add	r3, r2
 8014e80:	64bb      	str	r3, [r7, #72]	; 0x48
 8014e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e84:	ea4f 5273 	mov.w	r2, r3, ror #21
 8014e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e8a:	4413      	add	r3, r2
 8014e8c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
 8014e8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e92:	405a      	eors	r2, r3
 8014e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e96:	405a      	eors	r2, r3
 8014e98:	697b      	ldr	r3, [r7, #20]
 8014e9a:	441a      	add	r2, r3
 8014e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e9e:	441a      	add	r2, r3
 8014ea0:	4b64      	ldr	r3, [pc, #400]	; (8015034 <md5_process+0xb3c>)
 8014ea2:	4413      	add	r3, r2
 8014ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ea8:	ea4f 4233 	mov.w	r2, r3, ror #16
 8014eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014eae:	4413      	add	r3, r2
 8014eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  6, 23, 0x04881D05 );
 8014eb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014eb6:	405a      	eors	r2, r3
 8014eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014eba:	405a      	eors	r2, r3
 8014ebc:	6a3b      	ldr	r3, [r7, #32]
 8014ebe:	441a      	add	r2, r3
 8014ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ec2:	441a      	add	r2, r3
 8014ec4:	4b5c      	ldr	r3, [pc, #368]	; (8015038 <md5_process+0xb40>)
 8014ec6:	4413      	add	r3, r2
 8014ec8:	653b      	str	r3, [r7, #80]	; 0x50
 8014eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ecc:	ea4f 2273 	mov.w	r2, r3, ror #9
 8014ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ed2:	4413      	add	r3, r2
 8014ed4:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
 8014ed6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014eda:	405a      	eors	r2, r3
 8014edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ede:	405a      	eors	r2, r3
 8014ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ee2:	441a      	add	r2, r3
 8014ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ee6:	441a      	add	r2, r3
 8014ee8:	4b54      	ldr	r3, [pc, #336]	; (801503c <md5_process+0xb44>)
 8014eea:	4413      	add	r3, r2
 8014eec:	657b      	str	r3, [r7, #84]	; 0x54
 8014eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ef0:	ea4f 7233 	mov.w	r2, r3, ror #28
 8014ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ef6:	4413      	add	r3, r2
 8014ef8:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
 8014efa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014efe:	405a      	eors	r2, r3
 8014f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f02:	405a      	eors	r2, r3
 8014f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f06:	441a      	add	r2, r3
 8014f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f0a:	441a      	add	r2, r3
 8014f0c:	4b4c      	ldr	r3, [pc, #304]	; (8015040 <md5_process+0xb48>)
 8014f0e:	4413      	add	r3, r2
 8014f10:	64bb      	str	r3, [r7, #72]	; 0x48
 8014f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f14:	ea4f 5273 	mov.w	r2, r3, ror #21
 8014f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f1a:	4413      	add	r3, r2
 8014f1c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
 8014f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f22:	405a      	eors	r2, r3
 8014f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f26:	405a      	eors	r2, r3
 8014f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f2a:	441a      	add	r2, r3
 8014f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f2e:	441a      	add	r2, r3
 8014f30:	4b44      	ldr	r3, [pc, #272]	; (8015044 <md5_process+0xb4c>)
 8014f32:	4413      	add	r3, r2
 8014f34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f38:	ea4f 4233 	mov.w	r2, r3, ror #16
 8014f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f3e:	4413      	add	r3, r2
 8014f40:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  2, 23, 0xC4AC5665 );
 8014f42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f46:	405a      	eors	r2, r3
 8014f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f4a:	405a      	eors	r2, r3
 8014f4c:	693b      	ldr	r3, [r7, #16]
 8014f4e:	441a      	add	r2, r3
 8014f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f52:	441a      	add	r2, r3
 8014f54:	4b3c      	ldr	r3, [pc, #240]	; (8015048 <md5_process+0xb50>)
 8014f56:	4413      	add	r3, r2
 8014f58:	653b      	str	r3, [r7, #80]	; 0x50
 8014f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f5c:	ea4f 2273 	mov.w	r2, r3, ror #9
 8014f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f62:	4413      	add	r3, r2
 8014f64:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) (y ^ (x | ~z))

    P( A, B, C, D,  0,  6, 0xF4292244 );
 8014f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f68:	43da      	mvns	r2, r3
 8014f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f6c:	431a      	orrs	r2, r3
 8014f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f70:	405a      	eors	r2, r3
 8014f72:	68bb      	ldr	r3, [r7, #8]
 8014f74:	441a      	add	r2, r3
 8014f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f78:	441a      	add	r2, r3
 8014f7a:	4b34      	ldr	r3, [pc, #208]	; (801504c <md5_process+0xb54>)
 8014f7c:	4413      	add	r3, r2
 8014f7e:	657b      	str	r3, [r7, #84]	; 0x54
 8014f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f82:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8014f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f88:	4413      	add	r3, r2
 8014f8a:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  7, 10, 0x432AFF97 );
 8014f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f8e:	43da      	mvns	r2, r3
 8014f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f92:	431a      	orrs	r2, r3
 8014f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f96:	405a      	eors	r2, r3
 8014f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f9a:	441a      	add	r2, r3
 8014f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f9e:	441a      	add	r2, r3
 8014fa0:	4b2b      	ldr	r3, [pc, #172]	; (8015050 <md5_process+0xb58>)
 8014fa2:	4413      	add	r3, r2
 8014fa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8014fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014fa8:	ea4f 52b3 	mov.w	r2, r3, ror #22
 8014fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014fae:	4413      	add	r3, r2
 8014fb0:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
 8014fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fb4:	43da      	mvns	r2, r3
 8014fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014fb8:	431a      	orrs	r2, r3
 8014fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014fbc:	405a      	eors	r2, r3
 8014fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014fc0:	441a      	add	r2, r3
 8014fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fc4:	441a      	add	r2, r3
 8014fc6:	4b23      	ldr	r3, [pc, #140]	; (8015054 <md5_process+0xb5c>)
 8014fc8:	4413      	add	r3, r2
 8014fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fce:	ea4f 4273 	mov.w	r2, r3, ror #17
 8014fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014fd4:	4413      	add	r3, r2
 8014fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  5, 21, 0xFC93A039 );
 8014fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014fda:	43da      	mvns	r2, r3
 8014fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fde:	431a      	orrs	r2, r3
 8014fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014fe2:	405a      	eors	r2, r3
 8014fe4:	69fb      	ldr	r3, [r7, #28]
 8014fe6:	441a      	add	r2, r3
 8014fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fea:	441a      	add	r2, r3
 8014fec:	4b1a      	ldr	r3, [pc, #104]	; (8015058 <md5_process+0xb60>)
 8014fee:	4413      	add	r3, r2
 8014ff0:	653b      	str	r3, [r7, #80]	; 0x50
 8014ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ff4:	ea4f 22f3 	mov.w	r2, r3, ror #11
 8014ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ffa:	4413      	add	r3, r2
 8014ffc:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  6, 0x655B59C3 );
 8014ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015000:	43da      	mvns	r2, r3
 8015002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015004:	431a      	orrs	r2, r3
 8015006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015008:	405a      	eors	r2, r3
 801500a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801500c:	441a      	add	r2, r3
 801500e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015010:	e024      	b.n	801505c <md5_process+0xb64>
 8015012:	bf00      	nop
 8015014:	6d9d6122 	.word	0x6d9d6122
 8015018:	fde5380c 	.word	0xfde5380c
 801501c:	a4beea44 	.word	0xa4beea44
 8015020:	4bdecfa9 	.word	0x4bdecfa9
 8015024:	f6bb4b60 	.word	0xf6bb4b60
 8015028:	bebfbc70 	.word	0xbebfbc70
 801502c:	289b7ec6 	.word	0x289b7ec6
 8015030:	eaa127fa 	.word	0xeaa127fa
 8015034:	d4ef3085 	.word	0xd4ef3085
 8015038:	04881d05 	.word	0x04881d05
 801503c:	d9d4d039 	.word	0xd9d4d039
 8015040:	e6db99e5 	.word	0xe6db99e5
 8015044:	1fa27cf8 	.word	0x1fa27cf8
 8015048:	c4ac5665 	.word	0xc4ac5665
 801504c:	f4292244 	.word	0xf4292244
 8015050:	432aff97 	.word	0x432aff97
 8015054:	ab9423a7 	.word	0xab9423a7
 8015058:	fc93a039 	.word	0xfc93a039
 801505c:	441a      	add	r2, r3
 801505e:	4b7d      	ldr	r3, [pc, #500]	; (8015254 <md5_process+0xd5c>)
 8015060:	4413      	add	r3, r2
 8015062:	657b      	str	r3, [r7, #84]	; 0x54
 8015064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015066:	ea4f 62b3 	mov.w	r2, r3, ror #26
 801506a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801506c:	4413      	add	r3, r2
 801506e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
 8015070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015072:	43da      	mvns	r2, r3
 8015074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015076:	431a      	orrs	r2, r3
 8015078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801507a:	405a      	eors	r2, r3
 801507c:	697b      	ldr	r3, [r7, #20]
 801507e:	441a      	add	r2, r3
 8015080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015082:	441a      	add	r2, r3
 8015084:	4b74      	ldr	r3, [pc, #464]	; (8015258 <md5_process+0xd60>)
 8015086:	4413      	add	r3, r2
 8015088:	64bb      	str	r3, [r7, #72]	; 0x48
 801508a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801508c:	ea4f 52b3 	mov.w	r2, r3, ror #22
 8015090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015092:	4413      	add	r3, r2
 8015094:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
 8015096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015098:	43da      	mvns	r2, r3
 801509a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801509c:	431a      	orrs	r2, r3
 801509e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80150a0:	405a      	eors	r2, r3
 80150a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150a4:	441a      	add	r2, r3
 80150a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150a8:	4413      	add	r3, r2
 80150aa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80150ae:	f6a3 3383 	subw	r3, r3, #2947	; 0xb83
 80150b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80150b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150b6:	ea4f 4273 	mov.w	r2, r3, ror #17
 80150ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80150bc:	4413      	add	r3, r2
 80150be:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  1, 21, 0x85845DD1 );
 80150c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80150c2:	43da      	mvns	r2, r3
 80150c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150c6:	431a      	orrs	r2, r3
 80150c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80150ca:	405a      	eors	r2, r3
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	441a      	add	r2, r3
 80150d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150d2:	441a      	add	r2, r3
 80150d4:	4b61      	ldr	r3, [pc, #388]	; (801525c <md5_process+0xd64>)
 80150d6:	4413      	add	r3, r2
 80150d8:	653b      	str	r3, [r7, #80]	; 0x50
 80150da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150dc:	ea4f 22f3 	mov.w	r2, r3, ror #11
 80150e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150e2:	4413      	add	r3, r2
 80150e4:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
 80150e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80150e8:	43da      	mvns	r2, r3
 80150ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150ec:	431a      	orrs	r2, r3
 80150ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150f0:	405a      	eors	r2, r3
 80150f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150f4:	441a      	add	r2, r3
 80150f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80150f8:	441a      	add	r2, r3
 80150fa:	4b59      	ldr	r3, [pc, #356]	; (8015260 <md5_process+0xd68>)
 80150fc:	4413      	add	r3, r2
 80150fe:	657b      	str	r3, [r7, #84]	; 0x54
 8015100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015102:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8015106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015108:	4413      	add	r3, r2
 801510a:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
 801510c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801510e:	43da      	mvns	r2, r3
 8015110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015112:	431a      	orrs	r2, r3
 8015114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015116:	405a      	eors	r2, r3
 8015118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801511a:	441a      	add	r2, r3
 801511c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801511e:	441a      	add	r2, r3
 8015120:	4b50      	ldr	r3, [pc, #320]	; (8015264 <md5_process+0xd6c>)
 8015122:	4413      	add	r3, r2
 8015124:	64bb      	str	r3, [r7, #72]	; 0x48
 8015126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015128:	ea4f 52b3 	mov.w	r2, r3, ror #22
 801512c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801512e:	4413      	add	r3, r2
 8015130:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 15, 0xA3014314 );
 8015132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015134:	43da      	mvns	r2, r3
 8015136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015138:	431a      	orrs	r2, r3
 801513a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801513c:	405a      	eors	r2, r3
 801513e:	6a3b      	ldr	r3, [r7, #32]
 8015140:	441a      	add	r2, r3
 8015142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015144:	441a      	add	r2, r3
 8015146:	4b48      	ldr	r3, [pc, #288]	; (8015268 <md5_process+0xd70>)
 8015148:	4413      	add	r3, r2
 801514a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801514c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801514e:	ea4f 4273 	mov.w	r2, r3, ror #17
 8015152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015154:	4413      	add	r3, r2
 8015156:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
 8015158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801515a:	43da      	mvns	r2, r3
 801515c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801515e:	431a      	orrs	r2, r3
 8015160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015162:	405a      	eors	r2, r3
 8015164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015166:	441a      	add	r2, r3
 8015168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801516a:	441a      	add	r2, r3
 801516c:	4b3f      	ldr	r3, [pc, #252]	; (801526c <md5_process+0xd74>)
 801516e:	4413      	add	r3, r2
 8015170:	653b      	str	r3, [r7, #80]	; 0x50
 8015172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015174:	ea4f 22f3 	mov.w	r2, r3, ror #11
 8015178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801517a:	4413      	add	r3, r2
 801517c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  6, 0xF7537E82 );
 801517e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015180:	43da      	mvns	r2, r3
 8015182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015184:	431a      	orrs	r2, r3
 8015186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015188:	405a      	eors	r2, r3
 801518a:	69bb      	ldr	r3, [r7, #24]
 801518c:	441a      	add	r2, r3
 801518e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015190:	441a      	add	r2, r3
 8015192:	4b37      	ldr	r3, [pc, #220]	; (8015270 <md5_process+0xd78>)
 8015194:	4413      	add	r3, r2
 8015196:	657b      	str	r3, [r7, #84]	; 0x54
 8015198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801519a:	ea4f 62b3 	mov.w	r2, r3, ror #26
 801519e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151a0:	4413      	add	r3, r2
 80151a2:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
 80151a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151a6:	43da      	mvns	r2, r3
 80151a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80151aa:	431a      	orrs	r2, r3
 80151ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151ae:	405a      	eors	r2, r3
 80151b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151b2:	441a      	add	r2, r3
 80151b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80151b6:	441a      	add	r2, r3
 80151b8:	4b2e      	ldr	r3, [pc, #184]	; (8015274 <md5_process+0xd7c>)
 80151ba:	4413      	add	r3, r2
 80151bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80151be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80151c0:	ea4f 52b3 	mov.w	r2, r3, ror #22
 80151c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80151c6:	4413      	add	r3, r2
 80151c8:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 80151ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151cc:	43da      	mvns	r2, r3
 80151ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80151d0:	431a      	orrs	r2, r3
 80151d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80151d4:	405a      	eors	r2, r3
 80151d6:	693b      	ldr	r3, [r7, #16]
 80151d8:	441a      	add	r2, r3
 80151da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151dc:	441a      	add	r2, r3
 80151de:	4b26      	ldr	r3, [pc, #152]	; (8015278 <md5_process+0xd80>)
 80151e0:	4413      	add	r3, r2
 80151e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80151e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151e6:	ea4f 4273 	mov.w	r2, r3, ror #17
 80151ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80151ec:	4413      	add	r3, r2
 80151ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 80151f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80151f2:	43da      	mvns	r2, r3
 80151f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151f6:	431a      	orrs	r2, r3
 80151f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80151fa:	405a      	eors	r2, r3
 80151fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151fe:	441a      	add	r2, r3
 8015200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015202:	441a      	add	r2, r3
 8015204:	4b1d      	ldr	r3, [pc, #116]	; (801527c <md5_process+0xd84>)
 8015206:	4413      	add	r3, r2
 8015208:	653b      	str	r3, [r7, #80]	; 0x50
 801520a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801520c:	ea4f 22f3 	mov.w	r2, r3, ror #11
 8015210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015212:	4413      	add	r3, r2
 8015214:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

    ctx->state[0] += A;
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	689a      	ldr	r2, [r3, #8]
 801521a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801521c:	441a      	add	r2, r3
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	609a      	str	r2, [r3, #8]
    ctx->state[1] += B;
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	68da      	ldr	r2, [r3, #12]
 8015226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015228:	441a      	add	r2, r3
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	60da      	str	r2, [r3, #12]
    ctx->state[2] += C;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	691a      	ldr	r2, [r3, #16]
 8015232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015234:	441a      	add	r2, r3
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	611a      	str	r2, [r3, #16]
    ctx->state[3] += D;
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	695a      	ldr	r2, [r3, #20]
 801523e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015240:	441a      	add	r2, r3
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	615a      	str	r2, [r3, #20]
}
 8015246:	bf00      	nop
 8015248:	375c      	adds	r7, #92	; 0x5c
 801524a:	46bd      	mov	sp, r7
 801524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015250:	4770      	bx	lr
 8015252:	bf00      	nop
 8015254:	655b59c3 	.word	0x655b59c3
 8015258:	8f0ccc92 	.word	0x8f0ccc92
 801525c:	85845dd1 	.word	0x85845dd1
 8015260:	6fa87e4f 	.word	0x6fa87e4f
 8015264:	fe2ce6e0 	.word	0xfe2ce6e0
 8015268:	a3014314 	.word	0xa3014314
 801526c:	4e0811a1 	.word	0x4e0811a1
 8015270:	f7537e82 	.word	0xf7537e82
 8015274:	bd3af235 	.word	0xbd3af235
 8015278:	2ad7d2bb 	.word	0x2ad7d2bb
 801527c:	eb86d391 	.word	0xeb86d391

08015280 <md5_update>:

/*
 * MD5 process buffer
 */
void md5_update( md5_context *ctx, const unsigned char *input, int ilen )
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b086      	sub	sp, #24
 8015284:	af00      	add	r7, sp, #0
 8015286:	60f8      	str	r0, [r7, #12]
 8015288:	60b9      	str	r1, [r7, #8]
 801528a:	607a      	str	r2, [r7, #4]
    int fill;
    unsigned long left;

    if( ilen <= 0 )
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	2b00      	cmp	r3, #0
 8015290:	dd59      	ble.n	8015346 <md5_update+0xc6>
        return;

    left = ctx->total[0] & 0x3F;
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801529a:	617b      	str	r3, [r7, #20]
    fill = 64 - left;
 801529c:	697b      	ldr	r3, [r7, #20]
 801529e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80152a2:	613b      	str	r3, [r7, #16]

    ctx->total[0] += ilen;
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	681a      	ldr	r2, [r3, #0]
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	441a      	add	r2, r3
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	681a      	ldr	r2, [r3, #0]
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (unsigned long) ilen )
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	681a      	ldr	r2, [r3, #0]
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	429a      	cmp	r2, r3
 80152c0:	d204      	bcs.n	80152cc <md5_update+0x4c>
        ctx->total[1]++;
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	685b      	ldr	r3, [r3, #4]
 80152c6:	1c5a      	adds	r2, r3, #1
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 80152cc:	697b      	ldr	r3, [r7, #20]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d028      	beq.n	8015324 <md5_update+0xa4>
 80152d2:	687a      	ldr	r2, [r7, #4]
 80152d4:	693b      	ldr	r3, [r7, #16]
 80152d6:	429a      	cmp	r2, r3
 80152d8:	db24      	blt.n	8015324 <md5_update+0xa4>
    {
        MEMCPY( (void *) (ctx->buffer + left),
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	f103 0218 	add.w	r2, r3, #24
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	4413      	add	r3, r2
 80152e4:	693a      	ldr	r2, [r7, #16]
 80152e6:	68b9      	ldr	r1, [r7, #8]
 80152e8:	4618      	mov	r0, r3
 80152ea:	f002 ffc5 	bl	8018278 <memcpy>
                input, fill );
        md5_process( ctx, ctx->buffer );
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	3318      	adds	r3, #24
 80152f2:	4619      	mov	r1, r3
 80152f4:	68f8      	ldr	r0, [r7, #12]
 80152f6:	f7ff f8ff 	bl	80144f8 <md5_process>
        input += fill;
 80152fa:	693b      	ldr	r3, [r7, #16]
 80152fc:	68ba      	ldr	r2, [r7, #8]
 80152fe:	4413      	add	r3, r2
 8015300:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 8015302:	687a      	ldr	r2, [r7, #4]
 8015304:	693b      	ldr	r3, [r7, #16]
 8015306:	1ad3      	subs	r3, r2, r3
 8015308:	607b      	str	r3, [r7, #4]
        left = 0;
 801530a:	2300      	movs	r3, #0
 801530c:	617b      	str	r3, [r7, #20]
    }

    while( ilen >= 64 )
 801530e:	e009      	b.n	8015324 <md5_update+0xa4>
    {
        md5_process( ctx, input );
 8015310:	68b9      	ldr	r1, [r7, #8]
 8015312:	68f8      	ldr	r0, [r7, #12]
 8015314:	f7ff f8f0 	bl	80144f8 <md5_process>
        input += 64;
 8015318:	68bb      	ldr	r3, [r7, #8]
 801531a:	3340      	adds	r3, #64	; 0x40
 801531c:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	3b40      	subs	r3, #64	; 0x40
 8015322:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	2b3f      	cmp	r3, #63	; 0x3f
 8015328:	dcf2      	bgt.n	8015310 <md5_update+0x90>
    }

    if( ilen > 0 )
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	2b00      	cmp	r3, #0
 801532e:	dd0b      	ble.n	8015348 <md5_update+0xc8>
    {
        MEMCPY( (void *) (ctx->buffer + left),
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	f103 0218 	add.w	r2, r3, #24
 8015336:	697b      	ldr	r3, [r7, #20]
 8015338:	4413      	add	r3, r2
 801533a:	687a      	ldr	r2, [r7, #4]
 801533c:	68b9      	ldr	r1, [r7, #8]
 801533e:	4618      	mov	r0, r3
 8015340:	f002 ff9a 	bl	8018278 <memcpy>
 8015344:	e000      	b.n	8015348 <md5_update+0xc8>
        return;
 8015346:	bf00      	nop
                input, ilen );
    }
}
 8015348:	3718      	adds	r7, #24
 801534a:	46bd      	mov	sp, r7
 801534c:	bd80      	pop	{r7, pc}
	...

08015350 <md5_finish>:

/*
 * MD5 final digest
 */
void md5_finish( md5_context *ctx, unsigned char output[16] )
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b088      	sub	sp, #32
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
 8015358:	6039      	str	r1, [r7, #0]
    unsigned long last, padn;
    unsigned long high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	685b      	ldr	r3, [r3, #4]
 8015364:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 8015366:	4313      	orrs	r3, r2
 8015368:	61fb      	str	r3, [r7, #28]
    low  = ( ctx->total[0] <<  3 );
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	00db      	lsls	r3, r3, #3
 8015370:	61bb      	str	r3, [r7, #24]

    PUT_ULONG_LE( low,  msglen, 0 );
 8015372:	69bb      	ldr	r3, [r7, #24]
 8015374:	b2db      	uxtb	r3, r3
 8015376:	723b      	strb	r3, [r7, #8]
 8015378:	69bb      	ldr	r3, [r7, #24]
 801537a:	0a1b      	lsrs	r3, r3, #8
 801537c:	b2db      	uxtb	r3, r3
 801537e:	727b      	strb	r3, [r7, #9]
 8015380:	69bb      	ldr	r3, [r7, #24]
 8015382:	0c1b      	lsrs	r3, r3, #16
 8015384:	b2db      	uxtb	r3, r3
 8015386:	72bb      	strb	r3, [r7, #10]
 8015388:	69bb      	ldr	r3, [r7, #24]
 801538a:	0e1b      	lsrs	r3, r3, #24
 801538c:	b2db      	uxtb	r3, r3
 801538e:	72fb      	strb	r3, [r7, #11]
    PUT_ULONG_LE( high, msglen, 4 );
 8015390:	69fb      	ldr	r3, [r7, #28]
 8015392:	b2db      	uxtb	r3, r3
 8015394:	733b      	strb	r3, [r7, #12]
 8015396:	69fb      	ldr	r3, [r7, #28]
 8015398:	0a1b      	lsrs	r3, r3, #8
 801539a:	b2db      	uxtb	r3, r3
 801539c:	737b      	strb	r3, [r7, #13]
 801539e:	69fb      	ldr	r3, [r7, #28]
 80153a0:	0c1b      	lsrs	r3, r3, #16
 80153a2:	b2db      	uxtb	r3, r3
 80153a4:	73bb      	strb	r3, [r7, #14]
 80153a6:	69fb      	ldr	r3, [r7, #28]
 80153a8:	0e1b      	lsrs	r3, r3, #24
 80153aa:	b2db      	uxtb	r3, r3
 80153ac:	73fb      	strb	r3, [r7, #15]

    last = ctx->total[0] & 0x3F;
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80153b6:	617b      	str	r3, [r7, #20]
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 80153b8:	697b      	ldr	r3, [r7, #20]
 80153ba:	2b37      	cmp	r3, #55	; 0x37
 80153bc:	d803      	bhi.n	80153c6 <md5_finish+0x76>
 80153be:	697b      	ldr	r3, [r7, #20]
 80153c0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80153c4:	e002      	b.n	80153cc <md5_finish+0x7c>
 80153c6:	697b      	ldr	r3, [r7, #20]
 80153c8:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80153cc:	613b      	str	r3, [r7, #16]

    md5_update( ctx, md5_padding, padn );
 80153ce:	693b      	ldr	r3, [r7, #16]
 80153d0:	461a      	mov	r2, r3
 80153d2:	493d      	ldr	r1, [pc, #244]	; (80154c8 <md5_finish+0x178>)
 80153d4:	6878      	ldr	r0, [r7, #4]
 80153d6:	f7ff ff53 	bl	8015280 <md5_update>
    md5_update( ctx, msglen, 8 );
 80153da:	f107 0308 	add.w	r3, r7, #8
 80153de:	2208      	movs	r2, #8
 80153e0:	4619      	mov	r1, r3
 80153e2:	6878      	ldr	r0, [r7, #4]
 80153e4:	f7ff ff4c 	bl	8015280 <md5_update>

    PUT_ULONG_LE( ctx->state[0], output,  0 );
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	689b      	ldr	r3, [r3, #8]
 80153ec:	b2da      	uxtb	r2, r3
 80153ee:	683b      	ldr	r3, [r7, #0]
 80153f0:	701a      	strb	r2, [r3, #0]
 80153f2:	683b      	ldr	r3, [r7, #0]
 80153f4:	3301      	adds	r3, #1
 80153f6:	687a      	ldr	r2, [r7, #4]
 80153f8:	6892      	ldr	r2, [r2, #8]
 80153fa:	0a12      	lsrs	r2, r2, #8
 80153fc:	b2d2      	uxtb	r2, r2
 80153fe:	701a      	strb	r2, [r3, #0]
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	3302      	adds	r3, #2
 8015404:	687a      	ldr	r2, [r7, #4]
 8015406:	6892      	ldr	r2, [r2, #8]
 8015408:	0c12      	lsrs	r2, r2, #16
 801540a:	b2d2      	uxtb	r2, r2
 801540c:	701a      	strb	r2, [r3, #0]
 801540e:	683b      	ldr	r3, [r7, #0]
 8015410:	3303      	adds	r3, #3
 8015412:	687a      	ldr	r2, [r7, #4]
 8015414:	6892      	ldr	r2, [r2, #8]
 8015416:	0e12      	lsrs	r2, r2, #24
 8015418:	b2d2      	uxtb	r2, r2
 801541a:	701a      	strb	r2, [r3, #0]
    PUT_ULONG_LE( ctx->state[1], output,  4 );
 801541c:	683b      	ldr	r3, [r7, #0]
 801541e:	3304      	adds	r3, #4
 8015420:	687a      	ldr	r2, [r7, #4]
 8015422:	68d2      	ldr	r2, [r2, #12]
 8015424:	b2d2      	uxtb	r2, r2
 8015426:	701a      	strb	r2, [r3, #0]
 8015428:	683b      	ldr	r3, [r7, #0]
 801542a:	3305      	adds	r3, #5
 801542c:	687a      	ldr	r2, [r7, #4]
 801542e:	68d2      	ldr	r2, [r2, #12]
 8015430:	0a12      	lsrs	r2, r2, #8
 8015432:	b2d2      	uxtb	r2, r2
 8015434:	701a      	strb	r2, [r3, #0]
 8015436:	683b      	ldr	r3, [r7, #0]
 8015438:	3306      	adds	r3, #6
 801543a:	687a      	ldr	r2, [r7, #4]
 801543c:	68d2      	ldr	r2, [r2, #12]
 801543e:	0c12      	lsrs	r2, r2, #16
 8015440:	b2d2      	uxtb	r2, r2
 8015442:	701a      	strb	r2, [r3, #0]
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	3307      	adds	r3, #7
 8015448:	687a      	ldr	r2, [r7, #4]
 801544a:	68d2      	ldr	r2, [r2, #12]
 801544c:	0e12      	lsrs	r2, r2, #24
 801544e:	b2d2      	uxtb	r2, r2
 8015450:	701a      	strb	r2, [r3, #0]
    PUT_ULONG_LE( ctx->state[2], output,  8 );
 8015452:	683b      	ldr	r3, [r7, #0]
 8015454:	3308      	adds	r3, #8
 8015456:	687a      	ldr	r2, [r7, #4]
 8015458:	6912      	ldr	r2, [r2, #16]
 801545a:	b2d2      	uxtb	r2, r2
 801545c:	701a      	strb	r2, [r3, #0]
 801545e:	683b      	ldr	r3, [r7, #0]
 8015460:	3309      	adds	r3, #9
 8015462:	687a      	ldr	r2, [r7, #4]
 8015464:	6912      	ldr	r2, [r2, #16]
 8015466:	0a12      	lsrs	r2, r2, #8
 8015468:	b2d2      	uxtb	r2, r2
 801546a:	701a      	strb	r2, [r3, #0]
 801546c:	683b      	ldr	r3, [r7, #0]
 801546e:	330a      	adds	r3, #10
 8015470:	687a      	ldr	r2, [r7, #4]
 8015472:	6912      	ldr	r2, [r2, #16]
 8015474:	0c12      	lsrs	r2, r2, #16
 8015476:	b2d2      	uxtb	r2, r2
 8015478:	701a      	strb	r2, [r3, #0]
 801547a:	683b      	ldr	r3, [r7, #0]
 801547c:	330b      	adds	r3, #11
 801547e:	687a      	ldr	r2, [r7, #4]
 8015480:	6912      	ldr	r2, [r2, #16]
 8015482:	0e12      	lsrs	r2, r2, #24
 8015484:	b2d2      	uxtb	r2, r2
 8015486:	701a      	strb	r2, [r3, #0]
    PUT_ULONG_LE( ctx->state[3], output, 12 );
 8015488:	683b      	ldr	r3, [r7, #0]
 801548a:	330c      	adds	r3, #12
 801548c:	687a      	ldr	r2, [r7, #4]
 801548e:	6952      	ldr	r2, [r2, #20]
 8015490:	b2d2      	uxtb	r2, r2
 8015492:	701a      	strb	r2, [r3, #0]
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	330d      	adds	r3, #13
 8015498:	687a      	ldr	r2, [r7, #4]
 801549a:	6952      	ldr	r2, [r2, #20]
 801549c:	0a12      	lsrs	r2, r2, #8
 801549e:	b2d2      	uxtb	r2, r2
 80154a0:	701a      	strb	r2, [r3, #0]
 80154a2:	683b      	ldr	r3, [r7, #0]
 80154a4:	330e      	adds	r3, #14
 80154a6:	687a      	ldr	r2, [r7, #4]
 80154a8:	6952      	ldr	r2, [r2, #20]
 80154aa:	0c12      	lsrs	r2, r2, #16
 80154ac:	b2d2      	uxtb	r2, r2
 80154ae:	701a      	strb	r2, [r3, #0]
 80154b0:	683b      	ldr	r3, [r7, #0]
 80154b2:	330f      	adds	r3, #15
 80154b4:	687a      	ldr	r2, [r7, #4]
 80154b6:	6952      	ldr	r2, [r2, #20]
 80154b8:	0e12      	lsrs	r2, r2, #24
 80154ba:	b2d2      	uxtb	r2, r2
 80154bc:	701a      	strb	r2, [r3, #0]
}
 80154be:	bf00      	nop
 80154c0:	3720      	adds	r7, #32
 80154c2:	46bd      	mov	sp, r7
 80154c4:	bd80      	pop	{r7, pc}
 80154c6:	bf00      	nop
 80154c8:	0801dc98 	.word	0x0801dc98

080154cc <ppp_connect>:
 * the connection.
 *
 * If this port connects to a modem, the modem connection must be
 * established before calling this.
 */
err_t ppp_connect(ppp_pcb *pcb, u16_t holdoff) {
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b082      	sub	sp, #8
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
 80154d4:	460b      	mov	r3, r1
 80154d6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb->phase != PPP_PHASE_DEAD) {
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d002      	beq.n	80154e8 <ppp_connect+0x1c>
    return ERR_ALREADY;
 80154e2:	f06f 0308 	mvn.w	r3, #8
 80154e6:	e022      	b.n	801552e <ppp_connect+0x62>
  }

  PPPDEBUG(LOG_DEBUG, ("ppp_connect[%d]: holdoff=%d\n", pcb->netif->num, holdoff));
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80154f0:	4619      	mov	r1, r3
 80154f2:	887b      	ldrh	r3, [r7, #2]
 80154f4:	461a      	mov	r2, r3
 80154f6:	4810      	ldr	r0, [pc, #64]	; (8015538 <ppp_connect+0x6c>)
 80154f8:	f7eb fefb 	bl	80012f2 <lwip_win32_platform_diag>

  magic_randomize();
 80154fc:	f7fe ff7c 	bl	80143f8 <magic_randomize>

  if (holdoff == 0) {
 8015500:	887b      	ldrh	r3, [r7, #2]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d104      	bne.n	8015510 <ppp_connect+0x44>
    ppp_do_connect(pcb);
 8015506:	6878      	ldr	r0, [r7, #4]
 8015508:	f000 f81a 	bl	8015540 <ppp_do_connect>
    return ERR_OK;
 801550c:	2300      	movs	r3, #0
 801550e:	e00e      	b.n	801552e <ppp_connect+0x62>
  }

  new_phase(pcb, PPP_PHASE_HOLDOFF);
 8015510:	2102      	movs	r1, #2
 8015512:	6878      	ldr	r0, [r7, #4]
 8015514:	f000 fab4 	bl	8015a80 <new_phase>
  sys_timeout((u32_t)(holdoff*1000), ppp_do_connect, pcb);
 8015518:	887b      	ldrh	r3, [r7, #2]
 801551a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801551e:	fb02 f303 	mul.w	r3, r2, r3
 8015522:	687a      	ldr	r2, [r7, #4]
 8015524:	4905      	ldr	r1, [pc, #20]	; (801553c <ppp_connect+0x70>)
 8015526:	4618      	mov	r0, r3
 8015528:	f7f8 fa56 	bl	800d9d8 <sys_timeout>
  return ERR_OK;
 801552c:	2300      	movs	r3, #0
}
 801552e:	4618      	mov	r0, r3
 8015530:	3708      	adds	r7, #8
 8015532:	46bd      	mov	sp, r7
 8015534:	bd80      	pop	{r7, pc}
 8015536:	bf00      	nop
 8015538:	0801d18c 	.word	0x0801d18c
 801553c:	08015541 	.word	0x08015541

08015540 <ppp_do_connect>:

/**********************************/
/*** LOCAL FUNCTION DEFINITIONS ***/
/**********************************/

static void ppp_do_connect(void *arg) {
 8015540:	b580      	push	{r7, lr}
 8015542:	b084      	sub	sp, #16
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
  ppp_pcb *pcb = (ppp_pcb*)arg;
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("pcb->phase == PPP_PHASE_DEAD || pcb->phase == PPP_PHASE_HOLDOFF", pcb->phase == PPP_PHASE_DEAD || pcb->phase == PPP_PHASE_HOLDOFF);
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015552:	2b00      	cmp	r3, #0
 8015554:	d010      	beq.n	8015578 <ppp_do_connect+0x38>
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801555c:	2b02      	cmp	r3, #2
 801555e:	d00b      	beq.n	8015578 <ppp_do_connect+0x38>
 8015560:	4b0d      	ldr	r3, [pc, #52]	; (8015598 <ppp_do_connect+0x58>)
 8015562:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8015566:	490d      	ldr	r1, [pc, #52]	; (801559c <ppp_do_connect+0x5c>)
 8015568:	480d      	ldr	r0, [pc, #52]	; (80155a0 <ppp_do_connect+0x60>)
 801556a:	f002 fc63 	bl	8017e34 <iprintf>
 801556e:	2000      	movs	r0, #0
 8015570:	f002 fd62 	bl	8018038 <fflush>
 8015574:	f002 fca7 	bl	8017ec6 <abort>

  new_phase(pcb, PPP_PHASE_INITIALIZE);
 8015578:	2103      	movs	r1, #3
 801557a:	68f8      	ldr	r0, [r7, #12]
 801557c:	f000 fa80 	bl	8015a80 <new_phase>
  pcb->link_cb->connect(pcb, pcb->link_ctx_cb);
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	699b      	ldr	r3, [r3, #24]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	68fa      	ldr	r2, [r7, #12]
 8015588:	69d2      	ldr	r2, [r2, #28]
 801558a:	4611      	mov	r1, r2
 801558c:	68f8      	ldr	r0, [r7, #12]
 801558e:	4798      	blx	r3
}
 8015590:	bf00      	nop
 8015592:	3710      	adds	r7, #16
 8015594:	46bd      	mov	sp, r7
 8015596:	bd80      	pop	{r7, pc}
 8015598:	0801d120 	.word	0x0801d120
 801559c:	0801d224 	.word	0x0801d224
 80155a0:	0801d164 	.word	0x0801d164

080155a4 <ppp_netif_init_cb>:

/*
 * ppp_netif_init_cb - netif init callback
 */
static err_t ppp_netif_init_cb(struct netif *netif) {
 80155a4:	b480      	push	{r7}
 80155a6:	b083      	sub	sp, #12
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	6078      	str	r0, [r7, #4]
  netif->name[0] = 'p';
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	2270      	movs	r2, #112	; 0x70
 80155b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = 'p';
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	2270      	movs	r2, #112	; 0x70
 80155b8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if PPP_IPV4_SUPPORT
  netif->output = ppp_netif_output_ip4;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	4a04      	ldr	r2, [pc, #16]	; (80155d0 <ppp_netif_init_cb+0x2c>)
 80155c0:	615a      	str	r2, [r3, #20]
#endif /* PPP_IPV6_SUPPORT */
#if LWIP_NETIF_HOSTNAME
  /* @todo: Initialize interface hostname */
  /* netif_set_hostname(netif, "lwip"); */
#endif /* LWIP_NETIF_HOSTNAME */
  return ERR_OK;
 80155c2:	2300      	movs	r3, #0
}
 80155c4:	4618      	mov	r0, r3
 80155c6:	370c      	adds	r7, #12
 80155c8:	46bd      	mov	sp, r7
 80155ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ce:	4770      	bx	lr
 80155d0:	080155d5 	.word	0x080155d5

080155d4 <ppp_netif_output_ip4>:

#if PPP_IPV4_SUPPORT
/*
 * Send an IPv4 packet on the given connection.
 */
static err_t ppp_netif_output_ip4(struct netif *netif, struct pbuf *pb, const ip4_addr_t *ipaddr) {
 80155d4:	b580      	push	{r7, lr}
 80155d6:	b084      	sub	sp, #16
 80155d8:	af00      	add	r7, sp, #0
 80155da:	60f8      	str	r0, [r7, #12]
 80155dc:	60b9      	str	r1, [r7, #8]
 80155de:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(ipaddr);
  return ppp_netif_output(netif, pb, PPP_IP);
 80155e0:	2221      	movs	r2, #33	; 0x21
 80155e2:	68b9      	ldr	r1, [r7, #8]
 80155e4:	68f8      	ldr	r0, [r7, #12]
 80155e6:	f000 f805 	bl	80155f4 <ppp_netif_output>
 80155ea:	4603      	mov	r3, r0
}
 80155ec:	4618      	mov	r0, r3
 80155ee:	3710      	adds	r7, #16
 80155f0:	46bd      	mov	sp, r7
 80155f2:	bd80      	pop	{r7, pc}

080155f4 <ppp_netif_output>:
  LWIP_UNUSED_ARG(ipaddr);
  return ppp_netif_output(netif, pb, PPP_IPV6);
}
#endif /* PPP_IPV6_SUPPORT */

static err_t ppp_netif_output(struct netif *netif, struct pbuf *pb, u16_t protocol) {
 80155f4:	b590      	push	{r4, r7, lr}
 80155f6:	b089      	sub	sp, #36	; 0x24
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	60f8      	str	r0, [r7, #12]
 80155fc:	60b9      	str	r1, [r7, #8]
 80155fe:	4613      	mov	r3, r2
 8015600:	80fb      	strh	r3, [r7, #6]
  ppp_pcb *pcb = (ppp_pcb*)netif->state;
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	69db      	ldr	r3, [r3, #28]
 8015606:	61bb      	str	r3, [r7, #24]
  err_t err;
  struct pbuf *fpb = NULL;
 8015608:	2300      	movs	r3, #0
 801560a:	617b      	str	r3, [r7, #20]

  /* Check that the link is up. */
  if (0
 801560c:	88fb      	ldrh	r3, [r7, #6]
 801560e:	2b21      	cmp	r3, #33	; 0x21
 8015610:	d113      	bne.n	801563a <ppp_netif_output+0x46>
#if PPP_IPV4_SUPPORT
      || (protocol == PPP_IP && !pcb->if4_up)
 8015612:	69bb      	ldr	r3, [r7, #24]
 8015614:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8015618:	f003 0308 	and.w	r3, r3, #8
 801561c:	b2db      	uxtb	r3, r3
 801561e:	2b00      	cmp	r3, #0
 8015620:	d10b      	bne.n	801563a <ppp_netif_output+0x46>
#endif /* PPP_IPV4_SUPPORT */
#if PPP_IPV6_SUPPORT
      || (protocol == PPP_IPV6 && !pcb->if6_up)
#endif /* PPP_IPV6_SUPPORT */
      ) {
    PPPDEBUG(LOG_ERR, ("ppp_netif_output[%d]: link not up\n", pcb->netif->num));
 8015622:	69bb      	ldr	r3, [r7, #24]
 8015624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015626:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801562a:	4619      	mov	r1, r3
 801562c:	480f      	ldr	r0, [pc, #60]	; (801566c <ppp_netif_output+0x78>)
 801562e:	f7eb fe60 	bl	80012f2 <lwip_win32_platform_diag>
    goto err_rte_drop;
 8015632:	bf00      	nop

  err = pcb->link_cb->netif_output(pcb, pcb->link_ctx_cb, pb, protocol);
  goto err;

err_rte_drop:
  err = ERR_RTE;
 8015634:	23fc      	movs	r3, #252	; 0xfc
 8015636:	77fb      	strb	r3, [r7, #31]
 8015638:	e00b      	b.n	8015652 <ppp_netif_output+0x5e>
  err = pcb->link_cb->netif_output(pcb, pcb->link_ctx_cb, pb, protocol);
 801563a:	69bb      	ldr	r3, [r7, #24]
 801563c:	699b      	ldr	r3, [r3, #24]
 801563e:	691c      	ldr	r4, [r3, #16]
 8015640:	69bb      	ldr	r3, [r7, #24]
 8015642:	69d9      	ldr	r1, [r3, #28]
 8015644:	88fb      	ldrh	r3, [r7, #6]
 8015646:	68ba      	ldr	r2, [r7, #8]
 8015648:	69b8      	ldr	r0, [r7, #24]
 801564a:	47a0      	blx	r4
 801564c:	4603      	mov	r3, r0
 801564e:	77fb      	strb	r3, [r7, #31]
  goto err;
 8015650:	bf00      	nop
  LINK_STATS_INC(link.rterr);
  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
err:
  if (fpb) {
 8015652:	697b      	ldr	r3, [r7, #20]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d002      	beq.n	801565e <ppp_netif_output+0x6a>
    pbuf_free(fpb);
 8015658:	6978      	ldr	r0, [r7, #20]
 801565a:	f7f0 fbdb 	bl	8005e14 <pbuf_free>
  }
  return err;
 801565e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015662:	4618      	mov	r0, r3
 8015664:	3724      	adds	r7, #36	; 0x24
 8015666:	46bd      	mov	sp, r7
 8015668:	bd90      	pop	{r4, r7, pc}
 801566a:	bf00      	nop
 801566c:	0801d264 	.word	0x0801d264

08015670 <ppp_init>:
/*** PRIVATE FUNCTION DEFINITIONS ***/
/************************************/

/* Initialize the PPP subsystem. */
int ppp_init(void)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	af00      	add	r7, sp, #0
#if PPPOS_SUPPORT
  LWIP_MEMPOOL_INIT(PPPOS_PCB);
 8015674:	4805      	ldr	r0, [pc, #20]	; (801568c <ppp_init+0x1c>)
 8015676:	f7ef fcc3 	bl	8005000 <memp_init_pool>
#endif
#if LWIP_PPP_API && LWIP_MPU_COMPATIBLE
  LWIP_MEMPOOL_INIT(PPPAPI_MSG);
#endif

  LWIP_MEMPOOL_INIT(PPP_PCB);
 801567a:	4805      	ldr	r0, [pc, #20]	; (8015690 <ppp_init+0x20>)
 801567c:	f7ef fcc0 	bl	8005000 <memp_init_pool>

  /*
   * Initialize magic number generator now so that protocols may
   * use magic numbers in initialization.
   */
  magic_init();
 8015680:	f7fe feb2 	bl	80143e8 <magic_init>

  return 0;
 8015684:	2300      	movs	r3, #0
}
 8015686:	4618      	mov	r0, r3
 8015688:	bd80      	pop	{r7, pc}
 801568a:	bf00      	nop
 801568c:	0801dcfc 	.word	0x0801dcfc
 8015690:	0801dcd8 	.word	0x0801dcd8

08015694 <ppp_new>:
 * attempt to negotiate the LCP session.
 *
 * Return a new PPP connection control block pointer
 * on success or a null pointer on failure.
 */
ppp_pcb *ppp_new(struct netif *pppif, const struct link_callbacks *callbacks, void *link_ctx_cb, ppp_link_status_cb_fn link_status_cb, void *ctx_cb) {
 8015694:	b580      	push	{r7, lr}
 8015696:	b08c      	sub	sp, #48	; 0x30
 8015698:	af04      	add	r7, sp, #16
 801569a:	60f8      	str	r0, [r7, #12]
 801569c:	60b9      	str	r1, [r7, #8]
 801569e:	607a      	str	r2, [r7, #4]
 80156a0:	603b      	str	r3, [r7, #0]
  const struct protent *protp;
  int i;

  /* PPP is single-threaded: without a callback,
   * there is no way to know when the link is up. */
  if (link_status_cb == NULL) {
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d101      	bne.n	80156ac <ppp_new+0x18>
    return NULL;
 80156a8:	2300      	movs	r3, #0
 80156aa:	e06d      	b.n	8015788 <ppp_new+0xf4>
  }

  pcb = (ppp_pcb*)LWIP_MEMPOOL_ALLOC(PPP_PCB);
 80156ac:	4838      	ldr	r0, [pc, #224]	; (8015790 <ppp_new+0xfc>)
 80156ae:	f7ef fd0d 	bl	80050cc <memp_malloc_pool>
 80156b2:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 80156b4:	69bb      	ldr	r3, [r7, #24]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d101      	bne.n	80156be <ppp_new+0x2a>
    return NULL;
 80156ba:	2300      	movs	r3, #0
 80156bc:	e064      	b.n	8015788 <ppp_new+0xf4>
  }

  memset(pcb, 0, sizeof(ppp_pcb));
 80156be:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80156c2:	2100      	movs	r1, #0
 80156c4:	69b8      	ldr	r0, [r7, #24]
 80156c6:	f002 fdfc 	bl	80182c2 <memset>

  /* default configuration */
#if PAP_SUPPORT
  pcb->settings.pap_timeout_time = UPAP_DEFTIMEOUT;
 80156ca:	69bb      	ldr	r3, [r7, #24]
 80156cc:	2206      	movs	r2, #6
 80156ce:	731a      	strb	r2, [r3, #12]
  pcb->settings.pap_max_transmits = UPAP_DEFTRANSMITS;
 80156d0:	69bb      	ldr	r3, [r7, #24]
 80156d2:	220a      	movs	r2, #10
 80156d4:	735a      	strb	r2, [r3, #13]
  pcb->settings.eap_timeout_time = EAP_DEFTIMEOUT;
  pcb->settings.eap_max_transmits = EAP_DEFTRANSMITS;
#endif /* PPP_SERVER */
#endif /* EAP_SUPPORT */

  pcb->settings.lcp_loopbackfail = LCP_DEFLOOPBACKFAIL;
 80156d6:	69bb      	ldr	r3, [r7, #24]
 80156d8:	220a      	movs	r2, #10
 80156da:	749a      	strb	r2, [r3, #18]
  pcb->settings.lcp_echo_interval = LCP_ECHOINTERVAL;
 80156dc:	69bb      	ldr	r3, [r7, #24]
 80156de:	2200      	movs	r2, #0
 80156e0:	74da      	strb	r2, [r3, #19]
  pcb->settings.lcp_echo_fails = LCP_MAXECHOFAILS;
 80156e2:	69bb      	ldr	r3, [r7, #24]
 80156e4:	2203      	movs	r2, #3
 80156e6:	751a      	strb	r2, [r3, #20]

  pcb->settings.fsm_timeout_time = FSM_DEFTIMEOUT;
 80156e8:	69bb      	ldr	r3, [r7, #24]
 80156ea:	2206      	movs	r2, #6
 80156ec:	739a      	strb	r2, [r3, #14]
  pcb->settings.fsm_max_conf_req_transmits = FSM_DEFMAXCONFREQS;
 80156ee:	69bb      	ldr	r3, [r7, #24]
 80156f0:	220a      	movs	r2, #10
 80156f2:	73da      	strb	r2, [r3, #15]
  pcb->settings.fsm_max_term_transmits = FSM_DEFMAXTERMREQS;
 80156f4:	69bb      	ldr	r3, [r7, #24]
 80156f6:	2202      	movs	r2, #2
 80156f8:	741a      	strb	r2, [r3, #16]
  pcb->settings.fsm_max_nak_loops = FSM_DEFMAXNAKLOOPS;
 80156fa:	69bb      	ldr	r3, [r7, #24]
 80156fc:	2205      	movs	r2, #5
 80156fe:	745a      	strb	r2, [r3, #17]

  pcb->netif = pppif;
 8015700:	69bb      	ldr	r3, [r7, #24]
 8015702:	68fa      	ldr	r2, [r7, #12]
 8015704:	629a      	str	r2, [r3, #40]	; 0x28
  MIB2_INIT_NETIF(pppif, snmp_ifType_ppp, 0);
  if (!netif_add(pcb->netif,
 8015706:	69bb      	ldr	r3, [r7, #24]
 8015708:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801570a:	2300      	movs	r3, #0
 801570c:	9302      	str	r3, [sp, #8]
 801570e:	4b21      	ldr	r3, [pc, #132]	; (8015794 <ppp_new+0x100>)
 8015710:	9301      	str	r3, [sp, #4]
 8015712:	69bb      	ldr	r3, [r7, #24]
 8015714:	9300      	str	r3, [sp, #0]
 8015716:	4b20      	ldr	r3, [pc, #128]	; (8015798 <ppp_new+0x104>)
 8015718:	4a20      	ldr	r2, [pc, #128]	; (801579c <ppp_new+0x108>)
 801571a:	491f      	ldr	r1, [pc, #124]	; (8015798 <ppp_new+0x104>)
 801571c:	f7ef fd98 	bl	8005250 <netif_add>
 8015720:	4603      	mov	r3, r0
 8015722:	2b00      	cmp	r3, #0
 8015724:	d108      	bne.n	8015738 <ppp_new+0xa4>
#if LWIP_IPV4
                 IP4_ADDR_ANY4, IP4_ADDR_BROADCAST, IP4_ADDR_ANY4,
#endif /* LWIP_IPV4 */
                 (void *)pcb, ppp_netif_init_cb, NULL)) {
    LWIP_MEMPOOL_FREE(PPP_PCB, pcb);
 8015726:	69b9      	ldr	r1, [r7, #24]
 8015728:	4819      	ldr	r0, [pc, #100]	; (8015790 <ppp_new+0xfc>)
 801572a:	f7ef fd35 	bl	8005198 <memp_free_pool>
    PPPDEBUG(LOG_ERR, ("ppp_new: netif_add failed\n"));
 801572e:	481c      	ldr	r0, [pc, #112]	; (80157a0 <ppp_new+0x10c>)
 8015730:	f7eb fddf 	bl	80012f2 <lwip_win32_platform_diag>
    return NULL;
 8015734:	2300      	movs	r3, #0
 8015736:	e027      	b.n	8015788 <ppp_new+0xf4>
  }
  /* FIXME: user application should be responsible to call netif_set_up(),
   * remove it for next release with allowed behavior break */
  netif_set_up(pcb->netif);
 8015738:	69bb      	ldr	r3, [r7, #24]
 801573a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801573c:	4618      	mov	r0, r3
 801573e:	f7ef ff5b 	bl	80055f8 <netif_set_up>

  pcb->link_cb = callbacks;
 8015742:	69bb      	ldr	r3, [r7, #24]
 8015744:	68ba      	ldr	r2, [r7, #8]
 8015746:	619a      	str	r2, [r3, #24]
  pcb->link_ctx_cb = link_ctx_cb;
 8015748:	69bb      	ldr	r3, [r7, #24]
 801574a:	687a      	ldr	r2, [r7, #4]
 801574c:	61da      	str	r2, [r3, #28]
  pcb->link_status_cb = link_status_cb;
 801574e:	69bb      	ldr	r3, [r7, #24]
 8015750:	683a      	ldr	r2, [r7, #0]
 8015752:	621a      	str	r2, [r3, #32]
  pcb->ctx_cb = ctx_cb;
 8015754:	69bb      	ldr	r3, [r7, #24]
 8015756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015758:	625a      	str	r2, [r3, #36]	; 0x24

  /*
   * Initialize each protocol.
   */
  for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 801575a:	2300      	movs	r3, #0
 801575c:	61fb      	str	r3, [r7, #28]
 801575e:	e006      	b.n	801576e <ppp_new+0xda>
      (*protp->init)(pcb);
 8015760:	697b      	ldr	r3, [r7, #20]
 8015762:	685b      	ldr	r3, [r3, #4]
 8015764:	69b8      	ldr	r0, [r7, #24]
 8015766:	4798      	blx	r3
  for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 8015768:	69fb      	ldr	r3, [r7, #28]
 801576a:	3301      	adds	r3, #1
 801576c:	61fb      	str	r3, [r7, #28]
 801576e:	4a0d      	ldr	r2, [pc, #52]	; (80157a4 <ppp_new+0x110>)
 8015770:	69fb      	ldr	r3, [r7, #28]
 8015772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015776:	617b      	str	r3, [r7, #20]
 8015778:	697b      	ldr	r3, [r7, #20]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d1f0      	bne.n	8015760 <ppp_new+0xcc>
  }

  new_phase(pcb, PPP_PHASE_DEAD);
 801577e:	2100      	movs	r1, #0
 8015780:	69b8      	ldr	r0, [r7, #24]
 8015782:	f000 f97d 	bl	8015a80 <new_phase>
  return pcb;
 8015786:	69bb      	ldr	r3, [r7, #24]
}
 8015788:	4618      	mov	r0, r3
 801578a:	3720      	adds	r7, #32
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}
 8015790:	0801dcd8 	.word	0x0801dcd8
 8015794:	080155a5 	.word	0x080155a5
 8015798:	0801da38 	.word	0x0801da38
 801579c:	0801da3c 	.word	0x0801da3c
 80157a0:	0801d288 	.word	0x0801d288
 80157a4:	0801dce8 	.word	0x0801dce8

080157a8 <ppp_start>:

/** Initiate LCP open request */
void ppp_start(ppp_pcb *pcb) {
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b082      	sub	sp, #8
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
  PPPDEBUG(LOG_DEBUG, ("ppp_start[%d]\n", pcb->netif->num));
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80157b8:	4619      	mov	r1, r3
 80157ba:	480c      	ldr	r0, [pc, #48]	; (80157ec <ppp_start+0x44>)
 80157bc:	f7eb fd99 	bl	80012f2 <lwip_win32_platform_diag>
#if VJ_SUPPORT
  vj_compress_init(&pcb->vj_comp);
#endif /* VJ_SUPPORT */

  /* Start protocol */
  new_phase(pcb, PPP_PHASE_ESTABLISH);
 80157c0:	2106      	movs	r1, #6
 80157c2:	6878      	ldr	r0, [r7, #4]
 80157c4:	f000 f95c 	bl	8015a80 <new_phase>
  lcp_open(pcb);
 80157c8:	6878      	ldr	r0, [r7, #4]
 80157ca:	f7fc f9ff 	bl	8011bcc <lcp_open>
  lcp_lowerup(pcb);
 80157ce:	6878      	ldr	r0, [r7, #4]
 80157d0:	f7fc fa6e 	bl	8011cb0 <lcp_lowerup>
  PPPDEBUG(LOG_DEBUG, ("ppp_start[%d]: finished\n", pcb->netif->num));
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80157dc:	4619      	mov	r1, r3
 80157de:	4804      	ldr	r0, [pc, #16]	; (80157f0 <ppp_start+0x48>)
 80157e0:	f7eb fd87 	bl	80012f2 <lwip_win32_platform_diag>
}
 80157e4:	bf00      	nop
 80157e6:	3708      	adds	r7, #8
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}
 80157ec:	0801d2a4 	.word	0x0801d2a4
 80157f0:	0801d2b4 	.word	0x0801d2b4

080157f4 <ppp_link_end>:
  pcb->err_code = PPPERR_OPEN;
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
}

/** Called when link is normally down (i.e. it was asked to end) */
void ppp_link_end(ppp_pcb *pcb) {
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b082      	sub	sp, #8
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	6078      	str	r0, [r7, #4]
  PPPDEBUG(LOG_DEBUG, ("ppp_link_end[%d]\n", pcb->netif->num));
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015800:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015804:	4619      	mov	r1, r3
 8015806:	480f      	ldr	r0, [pc, #60]	; (8015844 <ppp_link_end+0x50>)
 8015808:	f7eb fd73 	bl	80012f2 <lwip_win32_platform_diag>
  new_phase(pcb, PPP_PHASE_DEAD);
 801580c:	2100      	movs	r1, #0
 801580e:	6878      	ldr	r0, [r7, #4]
 8015810:	f000 f936 	bl	8015a80 <new_phase>
  if (pcb->err_code == PPPERR_NONE) {
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801581a:	2b00      	cmp	r3, #0
 801581c:	d103      	bne.n	8015826 <ppp_link_end+0x32>
    pcb->err_code = PPPERR_CONNECT;
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	2206      	movs	r2, #6
 8015822:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	6a1b      	ldr	r3, [r3, #32]
 801582a:	687a      	ldr	r2, [r7, #4]
 801582c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8015830:	4611      	mov	r1, r2
 8015832:	687a      	ldr	r2, [r7, #4]
 8015834:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015836:	6878      	ldr	r0, [r7, #4]
 8015838:	4798      	blx	r3
}
 801583a:	bf00      	nop
 801583c:	3708      	adds	r7, #8
 801583e:	46bd      	mov	sp, r7
 8015840:	bd80      	pop	{r7, pc}
 8015842:	bf00      	nop
 8015844:	0801d2e8 	.word	0x0801d2e8

08015848 <ppp_input>:

/*
 * Pass the processed input packet to the appropriate handler.
 * This function and all handlers run in the context of the tcpip_thread
 */
void ppp_input(ppp_pcb *pcb, struct pbuf *pb) {
 8015848:	b580      	push	{r7, lr}
 801584a:	b086      	sub	sp, #24
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
 8015850:	6039      	str	r1, [r7, #0]
  u16_t protocol;
#if PPP_DEBUG && PPP_PROTOCOLNAME
  const char *pname;
#endif /* PPP_DEBUG && PPP_PROTOCOLNAME */
  LWIP_ASSERT("pcb->phase >= PPP_PHASE_ESTABLISH && pcb->phase <= PPP_PHASE_TERMINATE",
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015858:	2b05      	cmp	r3, #5
 801585a:	d904      	bls.n	8015866 <ppp_input+0x1e>
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015862:	2b0b      	cmp	r3, #11
 8015864:	d90b      	bls.n	801587e <ppp_input+0x36>
 8015866:	4b60      	ldr	r3, [pc, #384]	; (80159e8 <ppp_input+0x1a0>)
 8015868:	f240 3211 	movw	r2, #785	; 0x311
 801586c:	495f      	ldr	r1, [pc, #380]	; (80159ec <ppp_input+0x1a4>)
 801586e:	4860      	ldr	r0, [pc, #384]	; (80159f0 <ppp_input+0x1a8>)
 8015870:	f002 fae0 	bl	8017e34 <iprintf>
 8015874:	2000      	movs	r0, #0
 8015876:	f002 fbdf 	bl	8018038 <fflush>
 801587a:	f002 fb24 	bl	8017ec6 <abort>
    pcb->phase >= PPP_PHASE_ESTABLISH && pcb->phase <= PPP_PHASE_TERMINATE);

  magic_randomize();
 801587e:	f7fe fdbb 	bl	80143f8 <magic_randomize>

  if (pb->len < 2) {
 8015882:	683b      	ldr	r3, [r7, #0]
 8015884:	895b      	ldrh	r3, [r3, #10]
 8015886:	2b01      	cmp	r3, #1
 8015888:	d808      	bhi.n	801589c <ppp_input+0x54>
    PPPDEBUG(LOG_ERR, ("ppp_input[%d]: packet too short\n", pcb->netif->num));
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801588e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015892:	4619      	mov	r1, r3
 8015894:	4857      	ldr	r0, [pc, #348]	; (80159f4 <ppp_input+0x1ac>)
 8015896:	f7eb fd2c 	bl	80012f2 <lwip_win32_platform_diag>
    goto drop;
 801589a:	e09f      	b.n	80159dc <ppp_input+0x194>
  }
  protocol = (((u8_t *)pb->payload)[0] << 8) | ((u8_t*)pb->payload)[1];
 801589c:	683b      	ldr	r3, [r7, #0]
 801589e:	685b      	ldr	r3, [r3, #4]
 80158a0:	781b      	ldrb	r3, [r3, #0]
 80158a2:	021b      	lsls	r3, r3, #8
 80158a4:	b21a      	sxth	r2, r3
 80158a6:	683b      	ldr	r3, [r7, #0]
 80158a8:	685b      	ldr	r3, [r3, #4]
 80158aa:	3301      	adds	r3, #1
 80158ac:	781b      	ldrb	r3, [r3, #0]
 80158ae:	b21b      	sxth	r3, r3
 80158b0:	4313      	orrs	r3, r2
 80158b2:	b21b      	sxth	r3, r3
 80158b4:	827b      	strh	r3, [r7, #18]

#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "rcvd", (unsigned char *)pb->payload, pb->len);
#endif /* PRINTPKT_SUPPORT */

  pbuf_remove_header(pb, sizeof(protocol));
 80158b6:	2102      	movs	r1, #2
 80158b8:	6838      	ldr	r0, [r7, #0]
 80158ba:	f7f0 fa21 	bl	8005d00 <pbuf_remove_header>
  MIB2_STATS_NETIF_ADD(pcb->netif, ifinoctets, pb->tot_len);

  /*
   * Toss all non-LCP packets unless LCP is OPEN.
   */
  if (protocol != PPP_LCP && pcb->lcp_fsm.state != PPP_FSM_OPENED) {
 80158be:	8a7b      	ldrh	r3, [r7, #18]
 80158c0:	f24c 0221 	movw	r2, #49185	; 0xc021
 80158c4:	4293      	cmp	r3, r2
 80158c6:	d008      	beq.n	80158da <ppp_input+0x92>
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80158ce:	2b09      	cmp	r3, #9
 80158d0:	d003      	beq.n	80158da <ppp_input+0x92>
    ppp_dbglog(("Discarded non-LCP packet when LCP not open"));
 80158d2:	4849      	ldr	r0, [pc, #292]	; (80159f8 <ppp_input+0x1b0>)
 80158d4:	f001 ff76 	bl	80177c4 <ppp_dbglog_impl>
    goto drop;
 80158d8:	e080      	b.n	80159dc <ppp_input+0x194>

  /*
   * Until we get past the authentication phase, toss all packets
   * except LCP, LQR and authentication packets.
   */
  if (pcb->phase <= PPP_PHASE_AUTHENTICATE
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80158e0:	2b07      	cmp	r3, #7
 80158e2:	d817      	bhi.n	8015914 <ppp_input+0xcc>
   && !(protocol == PPP_LCP
 80158e4:	8a7b      	ldrh	r3, [r7, #18]
 80158e6:	f24c 0221 	movw	r2, #49185	; 0xc021
 80158ea:	4293      	cmp	r3, r2
 80158ec:	d012      	beq.n	8015914 <ppp_input+0xcc>
#if LQR_SUPPORT
   || protocol == PPP_LQR
#endif /* LQR_SUPPORT */
#if PAP_SUPPORT
   || protocol == PPP_PAP
 80158ee:	8a7b      	ldrh	r3, [r7, #18]
 80158f0:	f24c 0223 	movw	r2, #49187	; 0xc023
 80158f4:	4293      	cmp	r3, r2
 80158f6:	d00d      	beq.n	8015914 <ppp_input+0xcc>
   && !(protocol == PPP_LCP
 80158f8:	8a7b      	ldrh	r3, [r7, #18]
 80158fa:	f24c 2223 	movw	r2, #49699	; 0xc223
 80158fe:	4293      	cmp	r3, r2
 8015900:	d008      	beq.n	8015914 <ppp_input+0xcc>
#endif /* CHAP_SUPPORT */
#if EAP_SUPPORT
   || protocol == PPP_EAP
#endif /* EAP_SUPPORT */
   )) {
    ppp_dbglog(("discarding proto 0x%x in phase %d", protocol, pcb->phase));
 8015902:	8a79      	ldrh	r1, [r7, #18]
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801590a:	461a      	mov	r2, r3
 801590c:	483b      	ldr	r0, [pc, #236]	; (80159fc <ppp_input+0x1b4>)
 801590e:	f001 ff59 	bl	80177c4 <ppp_dbglog_impl>
    goto drop;
 8015912:	e063      	b.n	80159dc <ppp_input+0x194>
      pbuf_remove_header(pb, 2);
    }
  }
#endif /* CCP_SUPPORT */

  switch (protocol) {
 8015914:	8a7b      	ldrh	r3, [r7, #18]
 8015916:	2b21      	cmp	r3, #33	; 0x21
 8015918:	d111      	bne.n	801593e <ppp_input+0xf6>

#if PPP_IPV4_SUPPORT
    case PPP_IP:            /* Internet Protocol */
      PPPDEBUG(LOG_INFO, ("ppp_input[%d]: ip in pbuf len=%d\n", pcb->netif->num, pb->tot_len));
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801591e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015922:	4619      	mov	r1, r3
 8015924:	683b      	ldr	r3, [r7, #0]
 8015926:	891b      	ldrh	r3, [r3, #8]
 8015928:	461a      	mov	r2, r3
 801592a:	4835      	ldr	r0, [pc, #212]	; (8015a00 <ppp_input+0x1b8>)
 801592c:	f7eb fce1 	bl	80012f2 <lwip_win32_platform_diag>
      ip4_input(pb, pcb->netif);
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015934:	4619      	mov	r1, r3
 8015936:	6838      	ldr	r0, [r7, #0]
 8015938:	f7ee fc18 	bl	800416c <ip4_input>
      return;
 801593c:	e051      	b.n	80159e2 <ppp_input+0x19a>
      const struct protent *protp;

      /*
       * Upcall the proper protocol input routine.
       */
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 801593e:	2300      	movs	r3, #0
 8015940:	617b      	str	r3, [r7, #20]
 8015942:	e025      	b.n	8015990 <ppp_input+0x148>
        if (protp->protocol == protocol) {
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	881b      	ldrh	r3, [r3, #0]
 8015948:	8a7a      	ldrh	r2, [r7, #18]
 801594a:	429a      	cmp	r2, r3
 801594c:	d11d      	bne.n	801598a <ppp_input+0x142>
          pb = pbuf_coalesce(pb, PBUF_RAW);
 801594e:	2100      	movs	r1, #0
 8015950:	6838      	ldr	r0, [r7, #0]
 8015952:	f7f0 ff17 	bl	8006784 <pbuf_coalesce>
 8015956:	6038      	str	r0, [r7, #0]
          if (pb->next != NULL) {
 8015958:	683b      	ldr	r3, [r7, #0]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d00b      	beq.n	8015978 <ppp_input+0x130>
            PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_coalesce failed), len=%d\n", pcb->netif->num, pb->tot_len));
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015964:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015968:	4619      	mov	r1, r3
 801596a:	683b      	ldr	r3, [r7, #0]
 801596c:	891b      	ldrh	r3, [r3, #8]
 801596e:	461a      	mov	r2, r3
 8015970:	4824      	ldr	r0, [pc, #144]	; (8015a04 <ppp_input+0x1bc>)
 8015972:	f7eb fcbe 	bl	80012f2 <lwip_win32_platform_diag>
            goto drop;
 8015976:	e031      	b.n	80159dc <ppp_input+0x194>
          }
          (*protp->input)(pcb, (u8_t*)pb->payload, pb->len);
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	689b      	ldr	r3, [r3, #8]
 801597c:	683a      	ldr	r2, [r7, #0]
 801597e:	6851      	ldr	r1, [r2, #4]
 8015980:	683a      	ldr	r2, [r7, #0]
 8015982:	8952      	ldrh	r2, [r2, #10]
 8015984:	6878      	ldr	r0, [r7, #4]
 8015986:	4798      	blx	r3
          goto out;
 8015988:	e028      	b.n	80159dc <ppp_input+0x194>
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 801598a:	697b      	ldr	r3, [r7, #20]
 801598c:	3301      	adds	r3, #1
 801598e:	617b      	str	r3, [r7, #20]
 8015990:	4a1d      	ldr	r2, [pc, #116]	; (8015a08 <ppp_input+0x1c0>)
 8015992:	697b      	ldr	r3, [r7, #20]
 8015994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015998:	60fb      	str	r3, [r7, #12]
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d1d1      	bne.n	8015944 <ppp_input+0xfc>
      pname = protocol_name(protocol);
      if (pname != NULL) {
        ppp_warn(("Unsupported protocol '%s' (0x%x) received", pname, protocol));
      } else
#endif /* PPP_PROTOCOLNAME */
        ppp_warn(("Unsupported protocol 0x%x received", protocol));
 80159a0:	8a7b      	ldrh	r3, [r7, #18]
 80159a2:	4619      	mov	r1, r3
 80159a4:	4819      	ldr	r0, [pc, #100]	; (8015a0c <ppp_input+0x1c4>)
 80159a6:	f001 fed4 	bl	8017752 <ppp_warn_impl>
#endif /* PPP_DEBUG */

      if (pbuf_add_header(pb, sizeof(protocol))) {
 80159aa:	2102      	movs	r1, #2
 80159ac:	6838      	ldr	r0, [r7, #0]
 80159ae:	f7f0 f997 	bl	8005ce0 <pbuf_add_header>
 80159b2:	4603      	mov	r3, r0
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d008      	beq.n	80159ca <ppp_input+0x182>
        PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_add_header failed)\n", pcb->netif->num));
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80159c0:	4619      	mov	r1, r3
 80159c2:	4813      	ldr	r0, [pc, #76]	; (8015a10 <ppp_input+0x1c8>)
 80159c4:	f7eb fc95 	bl	80012f2 <lwip_win32_platform_diag>
        goto drop;
 80159c8:	e008      	b.n	80159dc <ppp_input+0x194>
      }
      lcp_sprotrej(pcb, (u8_t*)pb->payload, pb->len);
 80159ca:	683b      	ldr	r3, [r7, #0]
 80159cc:	6859      	ldr	r1, [r3, #4]
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	895b      	ldrh	r3, [r3, #10]
 80159d2:	461a      	mov	r2, r3
 80159d4:	6878      	ldr	r0, [r7, #4]
 80159d6:	f7fc faf3 	bl	8011fc0 <lcp_sprotrej>
    }
    break;
 80159da:	bf00      	nop
drop:
  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(pcb->netif, ifindiscards);

out:
  pbuf_free(pb);
 80159dc:	6838      	ldr	r0, [r7, #0]
 80159de:	f7f0 fa19 	bl	8005e14 <pbuf_free>
}
 80159e2:	3718      	adds	r7, #24
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}
 80159e8:	0801d120 	.word	0x0801d120
 80159ec:	0801d2fc 	.word	0x0801d2fc
 80159f0:	0801d164 	.word	0x0801d164
 80159f4:	0801d344 	.word	0x0801d344
 80159f8:	0801d368 	.word	0x0801d368
 80159fc:	0801d394 	.word	0x0801d394
 8015a00:	0801d3b8 	.word	0x0801d3b8
 8015a04:	0801d3dc 	.word	0x0801d3dc
 8015a08:	0801dce8 	.word	0x0801dce8
 8015a0c:	0801d414 	.word	0x0801d414
 8015a10:	0801d438 	.word	0x0801d438

08015a14 <ppp_write>:
 *
 * IPv4 and IPv6 packets from lwIP are sent, respectively,
 * with ppp_netif_output_ip4() and ppp_netif_output_ip6()
 * functions (which are callbacks of the netif PPP interface).
 */
err_t ppp_write(ppp_pcb *pcb, struct pbuf *p) {
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b082      	sub	sp, #8
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
 8015a1c:	6039      	str	r1, [r7, #0]
#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "sent", (unsigned char *)p->payload+2, p->len-2);
#endif /* PRINTPKT_SUPPORT */
  return pcb->link_cb->write(pcb, pcb->link_ctx_cb, p);
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	699b      	ldr	r3, [r3, #24]
 8015a22:	68db      	ldr	r3, [r3, #12]
 8015a24:	687a      	ldr	r2, [r7, #4]
 8015a26:	69d1      	ldr	r1, [r2, #28]
 8015a28:	683a      	ldr	r2, [r7, #0]
 8015a2a:	6878      	ldr	r0, [r7, #4]
 8015a2c:	4798      	blx	r3
 8015a2e:	4603      	mov	r3, r0
}
 8015a30:	4618      	mov	r0, r3
 8015a32:	3708      	adds	r7, #8
 8015a34:	46bd      	mov	sp, r7
 8015a36:	bd80      	pop	{r7, pc}

08015a38 <ppp_link_terminated>:

void ppp_link_terminated(ppp_pcb *pcb) {
 8015a38:	b580      	push	{r7, lr}
 8015a3a:	b082      	sub	sp, #8
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	6078      	str	r0, [r7, #4]
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]\n", pcb->netif->num));
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015a48:	4619      	mov	r1, r3
 8015a4a:	480b      	ldr	r0, [pc, #44]	; (8015a78 <ppp_link_terminated+0x40>)
 8015a4c:	f7eb fc51 	bl	80012f2 <lwip_win32_platform_diag>
  pcb->link_cb->disconnect(pcb, pcb->link_ctx_cb);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	699b      	ldr	r3, [r3, #24]
 8015a54:	685b      	ldr	r3, [r3, #4]
 8015a56:	687a      	ldr	r2, [r7, #4]
 8015a58:	69d2      	ldr	r2, [r2, #28]
 8015a5a:	4611      	mov	r1, r2
 8015a5c:	6878      	ldr	r0, [r7, #4]
 8015a5e:	4798      	blx	r3
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]: finished.\n", pcb->netif->num));
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a64:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015a68:	4619      	mov	r1, r3
 8015a6a:	4804      	ldr	r0, [pc, #16]	; (8015a7c <ppp_link_terminated+0x44>)
 8015a6c:	f7eb fc41 	bl	80012f2 <lwip_win32_platform_diag>
}
 8015a70:	bf00      	nop
 8015a72:	3708      	adds	r7, #8
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}
 8015a78:	0801d46c 	.word	0x0801d46c
 8015a7c:	0801d488 	.word	0x0801d488

08015a80 <new_phase>:
 */

/*
 * new_phase - signal the start of a new phase of pppd's operation.
 */
void new_phase(ppp_pcb *pcb, int p) {
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b082      	sub	sp, #8
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
 8015a88:	6039      	str	r1, [r7, #0]
  pcb->phase = p;
 8015a8a:	683b      	ldr	r3, [r7, #0]
 8015a8c:	b2da      	uxtb	r2, r3
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  PPPDEBUG(LOG_DEBUG, ("ppp phase changed[%d]: phase=%d\n", pcb->netif->num, pcb->phase));
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a98:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015a9c:	4619      	mov	r1, r3
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015aa4:	461a      	mov	r2, r3
 8015aa6:	4803      	ldr	r0, [pc, #12]	; (8015ab4 <new_phase+0x34>)
 8015aa8:	f7eb fc23 	bl	80012f2 <lwip_win32_platform_diag>
#if PPP_NOTIFY_PHASE
  if (pcb->notify_phase_cb != NULL) {
    pcb->notify_phase_cb(pcb, p, pcb->ctx_cb);
  }
#endif /* PPP_NOTIFY_PHASE */
}
 8015aac:	bf00      	nop
 8015aae:	3708      	adds	r7, #8
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}
 8015ab4:	0801d4ac 	.word	0x0801d4ac

08015ab8 <ppp_send_config>:

/*
 * ppp_send_config - configure the transmit-side characteristics of
 * the ppp interface.
 */
int ppp_send_config(ppp_pcb *pcb, int mtu, u32_t accm, int pcomp, int accomp) {
 8015ab8:	b590      	push	{r4, r7, lr}
 8015aba:	b087      	sub	sp, #28
 8015abc:	af02      	add	r7, sp, #8
 8015abe:	60f8      	str	r0, [r7, #12]
 8015ac0:	60b9      	str	r1, [r7, #8]
 8015ac2:	607a      	str	r2, [r7, #4]
 8015ac4:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(mtu);

  PPPDEBUG(LOG_INFO, ("ppp_send_config[%d]\n", pcb->netif->num));
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015aca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015ace:	4619      	mov	r1, r3
 8015ad0:	480b      	ldr	r0, [pc, #44]	; (8015b00 <ppp_send_config+0x48>)
 8015ad2:	f7eb fc0e 	bl	80012f2 <lwip_win32_platform_diag>

  if (pcb->link_cb->send_config) {
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	699b      	ldr	r3, [r3, #24]
 8015ada:	695b      	ldr	r3, [r3, #20]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d00a      	beq.n	8015af6 <ppp_send_config+0x3e>
    pcb->link_cb->send_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	699b      	ldr	r3, [r3, #24]
 8015ae4:	695c      	ldr	r4, [r3, #20]
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	69d9      	ldr	r1, [r3, #28]
 8015aea:	6a3b      	ldr	r3, [r7, #32]
 8015aec:	9300      	str	r3, [sp, #0]
 8015aee:	683b      	ldr	r3, [r7, #0]
 8015af0:	687a      	ldr	r2, [r7, #4]
 8015af2:	68f8      	ldr	r0, [r7, #12]
 8015af4:	47a0      	blx	r4
  }

  return 0;
 8015af6:	2300      	movs	r3, #0
}
 8015af8:	4618      	mov	r0, r3
 8015afa:	3714      	adds	r7, #20
 8015afc:	46bd      	mov	sp, r7
 8015afe:	bd90      	pop	{r4, r7, pc}
 8015b00:	0801d4d0 	.word	0x0801d4d0

08015b04 <ppp_recv_config>:

/*
 * ppp_recv_config - configure the receive-side characteristics of
 * the ppp interface.
 */
int ppp_recv_config(ppp_pcb *pcb, int mru, u32_t accm, int pcomp, int accomp) {
 8015b04:	b590      	push	{r4, r7, lr}
 8015b06:	b087      	sub	sp, #28
 8015b08:	af02      	add	r7, sp, #8
 8015b0a:	60f8      	str	r0, [r7, #12]
 8015b0c:	60b9      	str	r1, [r7, #8]
 8015b0e:	607a      	str	r2, [r7, #4]
 8015b10:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(mru);

  PPPDEBUG(LOG_INFO, ("ppp_recv_config[%d]\n", pcb->netif->num));
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015b1a:	4619      	mov	r1, r3
 8015b1c:	480b      	ldr	r0, [pc, #44]	; (8015b4c <ppp_recv_config+0x48>)
 8015b1e:	f7eb fbe8 	bl	80012f2 <lwip_win32_platform_diag>

  if (pcb->link_cb->recv_config) {
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	699b      	ldr	r3, [r3, #24]
 8015b26:	699b      	ldr	r3, [r3, #24]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d00a      	beq.n	8015b42 <ppp_recv_config+0x3e>
    pcb->link_cb->recv_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	699b      	ldr	r3, [r3, #24]
 8015b30:	699c      	ldr	r4, [r3, #24]
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	69d9      	ldr	r1, [r3, #28]
 8015b36:	6a3b      	ldr	r3, [r7, #32]
 8015b38:	9300      	str	r3, [sp, #0]
 8015b3a:	683b      	ldr	r3, [r7, #0]
 8015b3c:	687a      	ldr	r2, [r7, #4]
 8015b3e:	68f8      	ldr	r0, [r7, #12]
 8015b40:	47a0      	blx	r4
  }

  return 0;
 8015b42:	2300      	movs	r3, #0
}
 8015b44:	4618      	mov	r0, r3
 8015b46:	3714      	adds	r7, #20
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd90      	pop	{r4, r7, pc}
 8015b4c:	0801d4e8 	.word	0x0801d4e8

08015b50 <sifaddr>:

#if PPP_IPV4_SUPPORT
/*
 * sifaddr - Config the interface IP addresses and netmask.
 */
int sifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr, u32_t netmask) {
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b088      	sub	sp, #32
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	60f8      	str	r0, [r7, #12]
 8015b58:	60b9      	str	r1, [r7, #8]
 8015b5a:	607a      	str	r2, [r7, #4]
 8015b5c:	603b      	str	r3, [r7, #0]
  ip4_addr_t ip, nm, gw;

  ip4_addr_set_u32(&ip, our_adr);
 8015b5e:	68bb      	ldr	r3, [r7, #8]
 8015b60:	61fb      	str	r3, [r7, #28]
  ip4_addr_set_u32(&nm, netmask);
 8015b62:	683b      	ldr	r3, [r7, #0]
 8015b64:	61bb      	str	r3, [r7, #24]
  ip4_addr_set_u32(&gw, his_adr);
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	617b      	str	r3, [r7, #20]
  netif_set_addr(pcb->netif, &ip, &nm, &gw);
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8015b6e:	f107 0314 	add.w	r3, r7, #20
 8015b72:	f107 0218 	add.w	r2, r7, #24
 8015b76:	f107 011c 	add.w	r1, r7, #28
 8015b7a:	f7ef fce3 	bl	8005544 <netif_set_addr>
  return 1;
 8015b7e:	2301      	movs	r3, #1
}
 8015b80:	4618      	mov	r0, r3
 8015b82:	3720      	adds	r7, #32
 8015b84:	46bd      	mov	sp, r7
 8015b86:	bd80      	pop	{r7, pc}

08015b88 <cifaddr>:
/********************************************************************
 *
 * cifaddr - Clear the interface IP addresses, and delete routes
 * through the interface if possible.
 */
int cifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr) {
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b084      	sub	sp, #16
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	60f8      	str	r0, [r7, #12]
 8015b90:	60b9      	str	r1, [r7, #8]
 8015b92:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(our_adr);
  LWIP_UNUSED_ARG(his_adr);

  netif_set_addr(pcb->netif, IP4_ADDR_ANY4, IP4_ADDR_BROADCAST, IP4_ADDR_ANY4);
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8015b98:	4b04      	ldr	r3, [pc, #16]	; (8015bac <cifaddr+0x24>)
 8015b9a:	4a05      	ldr	r2, [pc, #20]	; (8015bb0 <cifaddr+0x28>)
 8015b9c:	4903      	ldr	r1, [pc, #12]	; (8015bac <cifaddr+0x24>)
 8015b9e:	f7ef fcd1 	bl	8005544 <netif_set_addr>
  return 1;
 8015ba2:	2301      	movs	r3, #1
}
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	3710      	adds	r7, #16
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd80      	pop	{r7, pc}
 8015bac:	0801da38 	.word	0x0801da38
 8015bb0:	0801da3c 	.word	0x0801da3c

08015bb4 <sdns>:

#if LWIP_DNS
/*
 * sdns - Config the DNS servers
 */
int sdns(ppp_pcb *pcb, u32_t ns1, u32_t ns2) {
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b086      	sub	sp, #24
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	60f8      	str	r0, [r7, #12]
 8015bbc:	60b9      	str	r1, [r7, #8]
 8015bbe:	607a      	str	r2, [r7, #4]
  ip_addr_t ns;
  LWIP_UNUSED_ARG(pcb);

  ip_addr_set_ip4_u32_val(ns, ns1);
 8015bc0:	68bb      	ldr	r3, [r7, #8]
 8015bc2:	617b      	str	r3, [r7, #20]
  dns_setserver(0, &ns);
 8015bc4:	f107 0314 	add.w	r3, r7, #20
 8015bc8:	4619      	mov	r1, r3
 8015bca:	2000      	movs	r0, #0
 8015bcc:	f7ed fbce 	bl	800336c <dns_setserver>
  ip_addr_set_ip4_u32_val(ns, ns2);
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	617b      	str	r3, [r7, #20]
  dns_setserver(1, &ns);
 8015bd4:	f107 0314 	add.w	r3, r7, #20
 8015bd8:	4619      	mov	r1, r3
 8015bda:	2001      	movs	r0, #1
 8015bdc:	f7ed fbc6 	bl	800336c <dns_setserver>
  return 1;
 8015be0:	2301      	movs	r3, #1
}
 8015be2:	4618      	mov	r0, r3
 8015be4:	3718      	adds	r7, #24
 8015be6:	46bd      	mov	sp, r7
 8015be8:	bd80      	pop	{r7, pc}
	...

08015bec <cdns>:

/********************************************************************
 *
 * cdns - Clear the DNS servers
 */
int cdns(ppp_pcb *pcb, u32_t ns1, u32_t ns2) {
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b086      	sub	sp, #24
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	60f8      	str	r0, [r7, #12]
 8015bf4:	60b9      	str	r1, [r7, #8]
 8015bf6:	607a      	str	r2, [r7, #4]
  const ip_addr_t *nsa;
  ip_addr_t nsb;
  LWIP_UNUSED_ARG(pcb);

  nsa = dns_getserver(0);
 8015bf8:	2000      	movs	r0, #0
 8015bfa:	f7ed fbdb 	bl	80033b4 <dns_getserver>
 8015bfe:	6178      	str	r0, [r7, #20]
  ip_addr_set_ip4_u32_val(nsb, ns1);
 8015c00:	68bb      	ldr	r3, [r7, #8]
 8015c02:	613b      	str	r3, [r7, #16]
  if (ip_addr_eq(nsa, &nsb)) {
 8015c04:	697b      	ldr	r3, [r7, #20]
 8015c06:	681a      	ldr	r2, [r3, #0]
 8015c08:	693b      	ldr	r3, [r7, #16]
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d103      	bne.n	8015c16 <cdns+0x2a>
    dns_setserver(0, IP_ADDR_ANY);
 8015c0e:	490c      	ldr	r1, [pc, #48]	; (8015c40 <cdns+0x54>)
 8015c10:	2000      	movs	r0, #0
 8015c12:	f7ed fbab 	bl	800336c <dns_setserver>
  }
  nsa = dns_getserver(1);
 8015c16:	2001      	movs	r0, #1
 8015c18:	f7ed fbcc 	bl	80033b4 <dns_getserver>
 8015c1c:	6178      	str	r0, [r7, #20]
  ip_addr_set_ip4_u32_val(nsb, ns2);
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	613b      	str	r3, [r7, #16]
  if (ip_addr_eq(nsa, &nsb)) {
 8015c22:	697b      	ldr	r3, [r7, #20]
 8015c24:	681a      	ldr	r2, [r3, #0]
 8015c26:	693b      	ldr	r3, [r7, #16]
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	d103      	bne.n	8015c34 <cdns+0x48>
    dns_setserver(1, IP_ADDR_ANY);
 8015c2c:	4904      	ldr	r1, [pc, #16]	; (8015c40 <cdns+0x54>)
 8015c2e:	2001      	movs	r0, #1
 8015c30:	f7ed fb9c 	bl	800336c <dns_setserver>
  }
  return 1;
 8015c34:	2301      	movs	r3, #1
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	3718      	adds	r7, #24
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}
 8015c3e:	bf00      	nop
 8015c40:	0801da38 	.word	0x0801da38

08015c44 <sifup>:
#endif /* VJ_SUPPORT */

/*
 * sifup - Config the interface up and enable IP packets to pass.
 */
int sifup(ppp_pcb *pcb) {
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b082      	sub	sp, #8
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
  pcb->if4_up = 1;
 8015c4c:	687a      	ldr	r2, [r7, #4]
 8015c4e:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8015c52:	f043 0308 	orr.w	r3, r3, #8
 8015c56:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  pcb->err_code = PPPERR_NONE;
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif_set_link_up(pcb->netif);
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c66:	4618      	mov	r0, r3
 8015c68:	f7ef fd24 	bl	80056b4 <netif_set_link_up>

  PPPDEBUG(LOG_DEBUG, ("sifup[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015c74:	4619      	mov	r1, r3
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c7c:	461a      	mov	r2, r3
 8015c7e:	4809      	ldr	r0, [pc, #36]	; (8015ca4 <sifup+0x60>)
 8015c80:	f7eb fb37 	bl	80012f2 <lwip_win32_platform_diag>
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	6a1b      	ldr	r3, [r3, #32]
 8015c88:	687a      	ldr	r2, [r7, #4]
 8015c8a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8015c8e:	4611      	mov	r1, r2
 8015c90:	687a      	ldr	r2, [r7, #4]
 8015c92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015c94:	6878      	ldr	r0, [r7, #4]
 8015c96:	4798      	blx	r3
  return 1;
 8015c98:	2301      	movs	r3, #1
}
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	3708      	adds	r7, #8
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	bd80      	pop	{r7, pc}
 8015ca2:	bf00      	nop
 8015ca4:	0801d500 	.word	0x0801d500

08015ca8 <sifdown>:
/********************************************************************
 *
 * sifdown - Disable the indicated protocol and config the interface
 *           down if there are no remaining protocols.
 */
int sifdown(ppp_pcb *pcb) {
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b082      	sub	sp, #8
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]

  pcb->if4_up = 0;
 8015cb0:	687a      	ldr	r2, [r7, #4]
 8015cb2:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8015cb6:	f36f 03c3 	bfc	r3, #3, #1
 8015cba:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   /* set the interface down if IPv6 is down as well */
   && !pcb->if6_up
#endif /* PPP_IPV6_SUPPORT */
  ) {
    /* make sure the netif link callback is called */
    netif_set_link_down(pcb->netif);
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7ef fd22 	bl	800570c <netif_set_link_down>
  }
  PPPDEBUG(LOG_DEBUG, ("sifdown[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ccc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015cd0:	4619      	mov	r1, r3
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015cd8:	461a      	mov	r2, r3
 8015cda:	4804      	ldr	r0, [pc, #16]	; (8015cec <sifdown+0x44>)
 8015cdc:	f7eb fb09 	bl	80012f2 <lwip_win32_platform_diag>
  return 1;
 8015ce0:	2301      	movs	r3, #1
}
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	3708      	adds	r7, #8
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	bd80      	pop	{r7, pc}
 8015cea:	bf00      	nop
 8015cec:	0801d518 	.word	0x0801d518

08015cf0 <get_mask>:
 * Here we scan through the system's list of interfaces, looking for
 * any non-point-to-point interfaces which might appear to be on the same
 * network as `addr'.  If we find any, we OR in their netmask to the
 * user-specified netmask.
 */
u32_t get_mask(u32_t addr) {
 8015cf0:	b480      	push	{r7}
 8015cf2:	b083      	sub	sp, #12
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
   */
  /* return mask; */
  return mask;
#endif /* 0 */
  LWIP_UNUSED_ARG(addr);
  return IPADDR_BROADCAST;
 8015cf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	370c      	adds	r7, #12
 8015d00:	46bd      	mov	sp, r7
 8015d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d06:	4770      	bx	lr

08015d08 <ppp_netif_set_mtu>:
#endif /* DEMAND_SUPPORT */

/*
 * ppp_netif_set_mtu - set the MTU on the PPP network interface.
 */
void ppp_netif_set_mtu(ppp_pcb *pcb, int mtu) {
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b082      	sub	sp, #8
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
 8015d10:	6039      	str	r1, [r7, #0]

  pcb->netif->mtu = mtu;
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d16:	683a      	ldr	r2, [r7, #0]
 8015d18:	b292      	uxth	r2, r2
 8015d1a:	841a      	strh	r2, [r3, #32]
#if PPP_IPV6_SUPPORT && LWIP_ND6_ALLOW_RA_UPDATES
  pcb->netif->mtu6 = mtu;
#endif /* PPP_IPV6_SUPPORT && LWIP_ND6_ALLOW_RA_UPDATES */
  PPPDEBUG(LOG_INFO, ("ppp_netif_set_mtu[%d]: mtu=%d\n", pcb->netif->num, mtu));
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015d24:	683a      	ldr	r2, [r7, #0]
 8015d26:	4619      	mov	r1, r3
 8015d28:	4803      	ldr	r0, [pc, #12]	; (8015d38 <ppp_netif_set_mtu+0x30>)
 8015d2a:	f7eb fae2 	bl	80012f2 <lwip_win32_platform_diag>
}
 8015d2e:	bf00      	nop
 8015d30:	3708      	adds	r7, #8
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}
 8015d36:	bf00      	nop
 8015d38:	0801d534 	.word	0x0801d534

08015d3c <pppos_create>:
 *
 * Return 0 on success, an error code on failure.
 */
ppp_pcb *pppos_create(struct netif *pppif, pppos_output_cb_fn output_cb,
       ppp_link_status_cb_fn link_status_cb, void *ctx_cb)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b088      	sub	sp, #32
 8015d40:	af02      	add	r7, sp, #8
 8015d42:	60f8      	str	r0, [r7, #12]
 8015d44:	60b9      	str	r1, [r7, #8]
 8015d46:	607a      	str	r2, [r7, #4]
 8015d48:	603b      	str	r3, [r7, #0]
  pppos_pcb *pppos;
  ppp_pcb *ppp;
  LWIP_ASSERT_CORE_LOCKED();

  pppos = (pppos_pcb *)LWIP_MEMPOOL_ALLOC(PPPOS_PCB);
 8015d4a:	4815      	ldr	r0, [pc, #84]	; (8015da0 <pppos_create+0x64>)
 8015d4c:	f7ef f9be 	bl	80050cc <memp_malloc_pool>
 8015d50:	6178      	str	r0, [r7, #20]
  if (pppos == NULL) {
 8015d52:	697b      	ldr	r3, [r7, #20]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d101      	bne.n	8015d5c <pppos_create+0x20>
    return NULL;
 8015d58:	2300      	movs	r3, #0
 8015d5a:	e01d      	b.n	8015d98 <pppos_create+0x5c>
  }

  ppp = ppp_new(pppif, &pppos_callbacks, pppos, link_status_cb, ctx_cb);
 8015d5c:	683b      	ldr	r3, [r7, #0]
 8015d5e:	9300      	str	r3, [sp, #0]
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	697a      	ldr	r2, [r7, #20]
 8015d64:	490f      	ldr	r1, [pc, #60]	; (8015da4 <pppos_create+0x68>)
 8015d66:	68f8      	ldr	r0, [r7, #12]
 8015d68:	f7ff fc94 	bl	8015694 <ppp_new>
 8015d6c:	6138      	str	r0, [r7, #16]
  if (ppp == NULL) {
 8015d6e:	693b      	ldr	r3, [r7, #16]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d105      	bne.n	8015d80 <pppos_create+0x44>
    LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
 8015d74:	6979      	ldr	r1, [r7, #20]
 8015d76:	480a      	ldr	r0, [pc, #40]	; (8015da0 <pppos_create+0x64>)
 8015d78:	f7ef fa0e 	bl	8005198 <memp_free_pool>
    return NULL;
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	e00b      	b.n	8015d98 <pppos_create+0x5c>
  }

  memset(pppos, 0, sizeof(pppos_pcb));
 8015d80:	2260      	movs	r2, #96	; 0x60
 8015d82:	2100      	movs	r1, #0
 8015d84:	6978      	ldr	r0, [r7, #20]
 8015d86:	f002 fa9c 	bl	80182c2 <memset>
  pppos->ppp = ppp;
 8015d8a:	697b      	ldr	r3, [r7, #20]
 8015d8c:	693a      	ldr	r2, [r7, #16]
 8015d8e:	601a      	str	r2, [r3, #0]
  pppos->output_cb = output_cb;
 8015d90:	697b      	ldr	r3, [r7, #20]
 8015d92:	68ba      	ldr	r2, [r7, #8]
 8015d94:	605a      	str	r2, [r3, #4]
  return ppp;
 8015d96:	693b      	ldr	r3, [r7, #16]
}
 8015d98:	4618      	mov	r0, r3
 8015d9a:	3718      	adds	r7, #24
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd80      	pop	{r7, pc}
 8015da0:	0801dcfc 	.word	0x0801dcfc
 8015da4:	0801dd0c 	.word	0x0801dd0c

08015da8 <pppos_write>:

/* Called by PPP core */
static err_t
pppos_write(ppp_pcb *ppp, void *ctx, struct pbuf *p)
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b08c      	sub	sp, #48	; 0x30
 8015dac:	af02      	add	r7, sp, #8
 8015dae:	60f8      	str	r0, [r7, #12]
 8015db0:	60b9      	str	r1, [r7, #8]
 8015db2:	607a      	str	r2, [r7, #4]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8015db4:	68bb      	ldr	r3, [r7, #8]
 8015db6:	61fb      	str	r3, [r7, #28]
  err_t err;
  LWIP_UNUSED_ARG(ppp);

  /* Grab an output buffer. Assume PBUF_POOL_BUFSIZE is an acceptable
   * chunk size for Tx as well. */
  nb = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_RAM);
 8015db8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015dbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015dc0:	2000      	movs	r0, #0
 8015dc2:	f7ef fd83 	bl	80058cc <pbuf_alloc>
 8015dc6:	61b8      	str	r0, [r7, #24]
  if (nb == NULL) {
 8015dc8:	69bb      	ldr	r3, [r7, #24]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d10d      	bne.n	8015dea <pppos_write+0x42>
    PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: alloc fail\n", ppp->netif->num));
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015dd2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015dd6:	4619      	mov	r1, r3
 8015dd8:	483c      	ldr	r0, [pc, #240]	; (8015ecc <pppos_write+0x124>)
 8015dda:	f7eb fa8a 	bl	80012f2 <lwip_win32_platform_diag>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
    pbuf_free(p);
 8015dde:	6878      	ldr	r0, [r7, #4]
 8015de0:	f7f0 f818 	bl	8005e14 <pbuf_free>
    return ERR_MEM;
 8015de4:	f04f 33ff 	mov.w	r3, #4294967295
 8015de8:	e06c      	b.n	8015ec4 <pppos_write+0x11c>
  }

  /* Empty the buffer */
  nb->len = 0;
 8015dea:	69bb      	ldr	r3, [r7, #24]
 8015dec:	2200      	movs	r2, #0
 8015dee:	815a      	strh	r2, [r3, #10]
  /* Set nb->tot_len to actual payload length */
  nb->tot_len = p->len;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	895a      	ldrh	r2, [r3, #10]
 8015df4:	69bb      	ldr	r3, [r7, #24]
 8015df6:	811a      	strh	r2, [r3, #8]

  /* If the link has been idle, we'll send a fresh flag character to
   * flush any noise. */
  err = ERR_OK;
 8015df8:	2300      	movs	r3, #0
 8015dfa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
 8015dfe:	f7eb fa83 	bl	8001308 <sys_now>
 8015e02:	4602      	mov	r2, r0
 8015e04:	69fb      	ldr	r3, [r7, #28]
 8015e06:	689b      	ldr	r3, [r3, #8]
 8015e08:	1ad3      	subs	r3, r2, r3
 8015e0a:	2b63      	cmp	r3, #99	; 0x63
 8015e0c:	d90d      	bls.n	8015e2a <pppos_write+0x82>
    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 8015e0e:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 8015e12:	2300      	movs	r3, #0
 8015e14:	9301      	str	r3, [sp, #4]
 8015e16:	2300      	movs	r3, #0
 8015e18:	9300      	str	r3, [sp, #0]
 8015e1a:	237e      	movs	r3, #126	; 0x7e
 8015e1c:	69ba      	ldr	r2, [r7, #24]
 8015e1e:	69f8      	ldr	r0, [r7, #28]
 8015e20:	f000 fca6 	bl	8016770 <pppos_output_append>
 8015e24:	4603      	mov	r3, r0
 8015e26:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  }

  /* Load output buffer. */
  fcs_out = PPP_INITFCS;
 8015e2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e2e:	82fb      	strh	r3, [r7, #22]
  s = (u8_t*)p->payload;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	685b      	ldr	r3, [r3, #4]
 8015e34:	627b      	str	r3, [r7, #36]	; 0x24
  n = p->len;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	895b      	ldrh	r3, [r3, #10]
 8015e3a:	847b      	strh	r3, [r7, #34]	; 0x22
  while (n-- > 0) {
 8015e3c:	e012      	b.n	8015e64 <pppos_write+0xbc>
    err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 8015e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e40:	1c5a      	adds	r2, r3, #1
 8015e42:	627a      	str	r2, [r7, #36]	; 0x24
 8015e44:	781a      	ldrb	r2, [r3, #0]
 8015e46:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 8015e4a:	f107 0316 	add.w	r3, r7, #22
 8015e4e:	9301      	str	r3, [sp, #4]
 8015e50:	2301      	movs	r3, #1
 8015e52:	9300      	str	r3, [sp, #0]
 8015e54:	4613      	mov	r3, r2
 8015e56:	69ba      	ldr	r2, [r7, #24]
 8015e58:	69f8      	ldr	r0, [r7, #28]
 8015e5a:	f000 fc89 	bl	8016770 <pppos_output_append>
 8015e5e:	4603      	mov	r3, r0
 8015e60:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  while (n-- > 0) {
 8015e64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015e66:	1e5a      	subs	r2, r3, #1
 8015e68:	847a      	strh	r2, [r7, #34]	; 0x22
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d1e7      	bne.n	8015e3e <pppos_write+0x96>
  }

  err = pppos_output_last(pppos, err, nb, &fcs_out);
 8015e6e:	f107 0316 	add.w	r3, r7, #22
 8015e72:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 8015e76:	69ba      	ldr	r2, [r7, #24]
 8015e78:	69f8      	ldr	r0, [r7, #28]
 8015e7a:	f000 fcff 	bl	801687c <pppos_output_last>
 8015e7e:	4603      	mov	r3, r0
 8015e80:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (err == ERR_OK) {
 8015e84:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d10b      	bne.n	8015ea4 <pppos_write+0xfc>
    PPPDEBUG(LOG_INFO, ("pppos_write[%d]: len=%d\n", ppp->netif->num, p->len));
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015e94:	4619      	mov	r1, r3
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	895b      	ldrh	r3, [r3, #10]
 8015e9a:	461a      	mov	r2, r3
 8015e9c:	480c      	ldr	r0, [pc, #48]	; (8015ed0 <pppos_write+0x128>)
 8015e9e:	f7eb fa28 	bl	80012f2 <lwip_win32_platform_diag>
 8015ea2:	e00a      	b.n	8015eba <pppos_write+0x112>
  } else {
    PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: output failed len=%d\n", ppp->netif->num, p->len));
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ea8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015eac:	4619      	mov	r1, r3
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	895b      	ldrh	r3, [r3, #10]
 8015eb2:	461a      	mov	r2, r3
 8015eb4:	4807      	ldr	r0, [pc, #28]	; (8015ed4 <pppos_write+0x12c>)
 8015eb6:	f7eb fa1c 	bl	80012f2 <lwip_win32_platform_diag>
  }
  pbuf_free(p);
 8015eba:	6878      	ldr	r0, [r7, #4]
 8015ebc:	f7ef ffaa 	bl	8005e14 <pbuf_free>
  return err;
 8015ec0:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
}
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	3728      	adds	r7, #40	; 0x28
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	bd80      	pop	{r7, pc}
 8015ecc:	0801d560 	.word	0x0801d560
 8015ed0:	0801d580 	.word	0x0801d580
 8015ed4:	0801d59c 	.word	0x0801d59c

08015ed8 <pppos_netif_output>:

/* Called by PPP core */
static err_t
pppos_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *pb, u16_t protocol)
{
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b08c      	sub	sp, #48	; 0x30
 8015edc:	af02      	add	r7, sp, #8
 8015ede:	60f8      	str	r0, [r7, #12]
 8015ee0:	60b9      	str	r1, [r7, #8]
 8015ee2:	607a      	str	r2, [r7, #4]
 8015ee4:	807b      	strh	r3, [r7, #2]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8015ee6:	68bb      	ldr	r3, [r7, #8]
 8015ee8:	61bb      	str	r3, [r7, #24]
  err_t err;
  LWIP_UNUSED_ARG(ppp);

  /* Grab an output buffer. Assume PBUF_POOL_BUFSIZE is an acceptable
   * chunk size for Tx as well. */
  nb = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_RAM);
 8015eea:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015eee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015ef2:	2000      	movs	r0, #0
 8015ef4:	f7ef fcea 	bl	80058cc <pbuf_alloc>
 8015ef8:	6178      	str	r0, [r7, #20]
  if (nb == NULL) {
 8015efa:	697b      	ldr	r3, [r7, #20]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d10a      	bne.n	8015f16 <pppos_netif_output+0x3e>
    PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: alloc fail\n", ppp->netif->num));
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015f08:	4619      	mov	r1, r3
 8015f0a:	4869      	ldr	r0, [pc, #420]	; (80160b0 <pppos_netif_output+0x1d8>)
 8015f0c:	f7eb f9f1 	bl	80012f2 <lwip_win32_platform_diag>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
    return ERR_MEM;
 8015f10:	f04f 33ff 	mov.w	r3, #4294967295
 8015f14:	e0c7      	b.n	80160a6 <pppos_netif_output+0x1ce>
  }

  /* Empty the buffer */
  nb->len = 0;
 8015f16:	697b      	ldr	r3, [r7, #20]
 8015f18:	2200      	movs	r2, #0
 8015f1a:	815a      	strh	r2, [r3, #10]
  /* Set nb->tot_len to actual payload length */
  nb->tot_len = pb->tot_len;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	891a      	ldrh	r2, [r3, #8]
 8015f20:	697b      	ldr	r3, [r7, #20]
 8015f22:	811a      	strh	r2, [r3, #8]

  /* If the link has been idle, we'll send a fresh flag character to
   * flush any noise. */
  err = ERR_OK;
 8015f24:	2300      	movs	r3, #0
 8015f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
 8015f2a:	f7eb f9ed 	bl	8001308 <sys_now>
 8015f2e:	4602      	mov	r2, r0
 8015f30:	69bb      	ldr	r3, [r7, #24]
 8015f32:	689b      	ldr	r3, [r3, #8]
 8015f34:	1ad3      	subs	r3, r2, r3
 8015f36:	2b63      	cmp	r3, #99	; 0x63
 8015f38:	d90d      	bls.n	8015f56 <pppos_netif_output+0x7e>
    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 8015f3a:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8015f3e:	2300      	movs	r3, #0
 8015f40:	9301      	str	r3, [sp, #4]
 8015f42:	2300      	movs	r3, #0
 8015f44:	9300      	str	r3, [sp, #0]
 8015f46:	237e      	movs	r3, #126	; 0x7e
 8015f48:	697a      	ldr	r2, [r7, #20]
 8015f4a:	69b8      	ldr	r0, [r7, #24]
 8015f4c:	f000 fc10 	bl	8016770 <pppos_output_append>
 8015f50:	4603      	mov	r3, r0
 8015f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }

  fcs_out = PPP_INITFCS;
 8015f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f5a:	827b      	strh	r3, [r7, #18]
  if (!pppos->accomp) {
 8015f5c:	69bb      	ldr	r3, [r7, #24]
 8015f5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015f62:	f003 0304 	and.w	r3, r3, #4
 8015f66:	b2db      	uxtb	r3, r3
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d11d      	bne.n	8015fa8 <pppos_netif_output+0xd0>
    err = pppos_output_append(pppos, err,  nb, PPP_ALLSTATIONS, 1, &fcs_out);
 8015f6c:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8015f70:	f107 0312 	add.w	r3, r7, #18
 8015f74:	9301      	str	r3, [sp, #4]
 8015f76:	2301      	movs	r3, #1
 8015f78:	9300      	str	r3, [sp, #0]
 8015f7a:	23ff      	movs	r3, #255	; 0xff
 8015f7c:	697a      	ldr	r2, [r7, #20]
 8015f7e:	69b8      	ldr	r0, [r7, #24]
 8015f80:	f000 fbf6 	bl	8016770 <pppos_output_append>
 8015f84:	4603      	mov	r3, r0
 8015f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    err = pppos_output_append(pppos, err,  nb, PPP_UI, 1, &fcs_out);
 8015f8a:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8015f8e:	f107 0312 	add.w	r3, r7, #18
 8015f92:	9301      	str	r3, [sp, #4]
 8015f94:	2301      	movs	r3, #1
 8015f96:	9300      	str	r3, [sp, #0]
 8015f98:	2303      	movs	r3, #3
 8015f9a:	697a      	ldr	r2, [r7, #20]
 8015f9c:	69b8      	ldr	r0, [r7, #24]
 8015f9e:	f000 fbe7 	bl	8016770 <pppos_output_append>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
  if (!pppos->pcomp || protocol > 0xFF) {
 8015fa8:	69bb      	ldr	r3, [r7, #24]
 8015faa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015fae:	f003 0302 	and.w	r3, r3, #2
 8015fb2:	b2db      	uxtb	r3, r3
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d002      	beq.n	8015fbe <pppos_netif_output+0xe6>
 8015fb8:	887b      	ldrh	r3, [r7, #2]
 8015fba:	2bff      	cmp	r3, #255	; 0xff
 8015fbc:	d912      	bls.n	8015fe4 <pppos_netif_output+0x10c>
    err = pppos_output_append(pppos, err,  nb, (protocol >> 8) & 0xFF, 1, &fcs_out);
 8015fbe:	887b      	ldrh	r3, [r7, #2]
 8015fc0:	0a1b      	lsrs	r3, r3, #8
 8015fc2:	b29b      	uxth	r3, r3
 8015fc4:	b2da      	uxtb	r2, r3
 8015fc6:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8015fca:	f107 0312 	add.w	r3, r7, #18
 8015fce:	9301      	str	r3, [sp, #4]
 8015fd0:	2301      	movs	r3, #1
 8015fd2:	9300      	str	r3, [sp, #0]
 8015fd4:	4613      	mov	r3, r2
 8015fd6:	697a      	ldr	r2, [r7, #20]
 8015fd8:	69b8      	ldr	r0, [r7, #24]
 8015fda:	f000 fbc9 	bl	8016770 <pppos_output_append>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
  err = pppos_output_append(pppos, err,  nb, protocol & 0xFF, 1, &fcs_out);
 8015fe4:	887b      	ldrh	r3, [r7, #2]
 8015fe6:	b2da      	uxtb	r2, r3
 8015fe8:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8015fec:	f107 0312 	add.w	r3, r7, #18
 8015ff0:	9301      	str	r3, [sp, #4]
 8015ff2:	2301      	movs	r3, #1
 8015ff4:	9300      	str	r3, [sp, #0]
 8015ff6:	4613      	mov	r3, r2
 8015ff8:	697a      	ldr	r2, [r7, #20]
 8015ffa:	69b8      	ldr	r0, [r7, #24]
 8015ffc:	f000 fbb8 	bl	8016770 <pppos_output_append>
 8016000:	4603      	mov	r3, r0
 8016002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Load packet. */
  for(p = pb; p; p = p->next) {
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	627b      	str	r3, [r7, #36]	; 0x24
 801600a:	e021      	b.n	8016050 <pppos_netif_output+0x178>
    u16_t n = p->len;
 801600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801600e:	895b      	ldrh	r3, [r3, #10]
 8016010:	843b      	strh	r3, [r7, #32]
    u8_t *s = (u8_t*)p->payload;
 8016012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016014:	685b      	ldr	r3, [r3, #4]
 8016016:	61fb      	str	r3, [r7, #28]

    while (n-- > 0) {
 8016018:	e012      	b.n	8016040 <pppos_netif_output+0x168>
      err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 801601a:	69fb      	ldr	r3, [r7, #28]
 801601c:	1c5a      	adds	r2, r3, #1
 801601e:	61fa      	str	r2, [r7, #28]
 8016020:	781a      	ldrb	r2, [r3, #0]
 8016022:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8016026:	f107 0312 	add.w	r3, r7, #18
 801602a:	9301      	str	r3, [sp, #4]
 801602c:	2301      	movs	r3, #1
 801602e:	9300      	str	r3, [sp, #0]
 8016030:	4613      	mov	r3, r2
 8016032:	697a      	ldr	r2, [r7, #20]
 8016034:	69b8      	ldr	r0, [r7, #24]
 8016036:	f000 fb9b 	bl	8016770 <pppos_output_append>
 801603a:	4603      	mov	r3, r0
 801603c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while (n-- > 0) {
 8016040:	8c3b      	ldrh	r3, [r7, #32]
 8016042:	1e5a      	subs	r2, r3, #1
 8016044:	843a      	strh	r2, [r7, #32]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d1e7      	bne.n	801601a <pppos_netif_output+0x142>
  for(p = pb; p; p = p->next) {
 801604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	627b      	str	r3, [r7, #36]	; 0x24
 8016050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016052:	2b00      	cmp	r3, #0
 8016054:	d1da      	bne.n	801600c <pppos_netif_output+0x134>
    }
  }

  err = pppos_output_last(pppos, err, nb, &fcs_out);
 8016056:	f107 0312 	add.w	r3, r7, #18
 801605a:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 801605e:	697a      	ldr	r2, [r7, #20]
 8016060:	69b8      	ldr	r0, [r7, #24]
 8016062:	f000 fc0b 	bl	801687c <pppos_output_last>
 8016066:	4603      	mov	r3, r0
 8016068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err == ERR_OK) {
 801606c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016070:	2b00      	cmp	r3, #0
 8016072:	d10b      	bne.n	801608c <pppos_netif_output+0x1b4>
    PPPDEBUG(LOG_INFO, ("pppos_netif_output[%d]: proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016078:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801607c:	4619      	mov	r1, r3
 801607e:	887a      	ldrh	r2, [r7, #2]
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	891b      	ldrh	r3, [r3, #8]
 8016084:	480b      	ldr	r0, [pc, #44]	; (80160b4 <pppos_netif_output+0x1dc>)
 8016086:	f7eb f934 	bl	80012f2 <lwip_win32_platform_diag>
 801608a:	e00a      	b.n	80160a2 <pppos_netif_output+0x1ca>
  } else {
    PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: output failed proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016090:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016094:	4619      	mov	r1, r3
 8016096:	887a      	ldrh	r2, [r7, #2]
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	891b      	ldrh	r3, [r3, #8]
 801609c:	4806      	ldr	r0, [pc, #24]	; (80160b8 <pppos_netif_output+0x1e0>)
 801609e:	f7eb f928 	bl	80012f2 <lwip_win32_platform_diag>
  }
  return err;
 80160a2:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 80160a6:	4618      	mov	r0, r3
 80160a8:	3728      	adds	r7, #40	; 0x28
 80160aa:	46bd      	mov	sp, r7
 80160ac:	bd80      	pop	{r7, pc}
 80160ae:	bf00      	nop
 80160b0:	0801d5c4 	.word	0x0801d5c4
 80160b4:	0801d5e8 	.word	0x0801d5e8
 80160b8:	0801d618 	.word	0x0801d618

080160bc <pppos_connect>:

static void
pppos_connect(ppp_pcb *ppp, void *ctx)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b084      	sub	sp, #16
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
 80160c4:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	60fb      	str	r3, [r7, #12]
  /* input pbuf left over from last session? */
  pppos_input_free_current_packet(pppos);
#endif /* PPP_INPROC_IRQ_SAFE */

  /* reset PPPoS control block to its initial state */
  memset(&pppos->last_xmit, 0, sizeof(pppos_pcb) - offsetof(pppos_pcb, last_xmit));
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	3308      	adds	r3, #8
 80160ce:	2258      	movs	r2, #88	; 0x58
 80160d0:	2100      	movs	r1, #0
 80160d2:	4618      	mov	r0, r3
 80160d4:	f002 f8f5 	bl	80182c2 <memset>

  /*
   * Default the in and out accm so that escape and flag characters
   * are always escaped.
   */
  pppos->in_accm[15] = 0x60; /* no need to protect since RX is not running */
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	2260      	movs	r2, #96	; 0x60
 80160dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  pppos->out_accm[15] = 0x60;
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	2260      	movs	r2, #96	; 0x60
 80160e4:	76da      	strb	r2, [r3, #27]
  PPPOS_PROTECT(lev);
  pppos->open = 1;
 80160e6:	68fa      	ldr	r2, [r7, #12]
 80160e8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80160ec:	f043 0301 	orr.w	r3, r3, #1
 80160f0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
  PPPOS_UNPROTECT(lev);

  /*
   * Start the connection and handle incoming events (packet or timeout).
   */
  PPPDEBUG(LOG_INFO, ("pppos_connect: unit %d: connecting\n", ppp->netif->num));
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80160fc:	4619      	mov	r1, r3
 80160fe:	4805      	ldr	r0, [pc, #20]	; (8016114 <pppos_connect+0x58>)
 8016100:	f7eb f8f7 	bl	80012f2 <lwip_win32_platform_diag>
  ppp_start(ppp); /* notify upper layers */
 8016104:	6878      	ldr	r0, [r7, #4]
 8016106:	f7ff fb4f 	bl	80157a8 <ppp_start>
}
 801610a:	bf00      	nop
 801610c:	3710      	adds	r7, #16
 801610e:	46bd      	mov	sp, r7
 8016110:	bd80      	pop	{r7, pc}
 8016112:	bf00      	nop
 8016114:	0801d658 	.word	0x0801d658

08016118 <pppos_disconnect>:
}
#endif /* PPP_SERVER */

static void
pppos_disconnect(ppp_pcb *ppp, void *ctx)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b084      	sub	sp, #16
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
 8016120:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8016122:	683b      	ldr	r3, [r7, #0]
 8016124:	60fb      	str	r3, [r7, #12]
  PPPOS_DECL_PROTECT(lev);

  PPPOS_PROTECT(lev);
  pppos->open = 0;
 8016126:	68fa      	ldr	r2, [r7, #12]
 8016128:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 801612c:	f36f 0300 	bfc	r3, #0, #1
 8016130:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
   * pppos_input_free_current_packet() here because
   * rx IRQ might still call pppos_input().
   */
#if !PPP_INPROC_IRQ_SAFE
  /* input pbuf left ? */
  pppos_input_free_current_packet(pppos);
 8016134:	68f8      	ldr	r0, [r7, #12]
 8016136:	f000 fad9 	bl	80166ec <pppos_input_free_current_packet>
#endif /* !PPP_INPROC_IRQ_SAFE */

  ppp_link_end(ppp); /* notify upper layers */
 801613a:	6878      	ldr	r0, [r7, #4]
 801613c:	f7ff fb5a 	bl	80157f4 <ppp_link_end>
}
 8016140:	bf00      	nop
 8016142:	3710      	adds	r7, #16
 8016144:	46bd      	mov	sp, r7
 8016146:	bd80      	pop	{r7, pc}

08016148 <pppos_destroy>:

static err_t
pppos_destroy(ppp_pcb *ppp, void *ctx)
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b084      	sub	sp, #16
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
 8016150:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8016152:	683b      	ldr	r3, [r7, #0]
 8016154:	60fb      	str	r3, [r7, #12]
#if PPP_INPROC_IRQ_SAFE
  /* input pbuf left ? */
  pppos_input_free_current_packet(pppos);
#endif /* PPP_INPROC_IRQ_SAFE */

  LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
 8016156:	68f9      	ldr	r1, [r7, #12]
 8016158:	4803      	ldr	r0, [pc, #12]	; (8016168 <pppos_destroy+0x20>)
 801615a:	f7ef f81d 	bl	8005198 <memp_free_pool>
  return ERR_OK;
 801615e:	2300      	movs	r3, #0
}
 8016160:	4618      	mov	r0, r3
 8016162:	3710      	adds	r7, #16
 8016164:	46bd      	mov	sp, r7
 8016166:	bd80      	pop	{r7, pc}
 8016168:	0801dcfc 	.word	0x0801dcfc

0801616c <pppos_input>:
 * @param s received data
 * @param l length of received data
 */
void
pppos_input(ppp_pcb *ppp, const void *s, int l)
{
 801616c:	b580      	push	{r7, lr}
 801616e:	b08c      	sub	sp, #48	; 0x30
 8016170:	af00      	add	r7, sp, #0
 8016172:	60f8      	str	r0, [r7, #12]
 8016174:	60b9      	str	r1, [r7, #8]
 8016176:	607a      	str	r2, [r7, #4]
  pppos_pcb *pppos = (pppos_pcb *)ppp->link_ctx_cb;
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	69db      	ldr	r3, [r3, #28]
 801617c:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *next_pbuf;
  const u8_t *s_u8 = (const u8_t *)s;
 801617e:	68bb      	ldr	r3, [r7, #8]
 8016180:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Don't even bother parsing data if we are disconnected.
   * Added to that, ppp_input must never be called if the upper layer is down.
   */
  PPPOS_PROTECT(lev);
  if (!pppos->open) {
 8016182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016184:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016188:	f003 0301 	and.w	r3, r3, #1
 801618c:	b2db      	uxtb	r3, r3
 801618e:	2b00      	cmp	r3, #0
 8016190:	f000 820c 	beq.w	80165ac <pppos_input+0x440>
    PPPOS_UNPROTECT(lev);
    return;
  }
  PPPOS_UNPROTECT(lev);

  PPPDEBUG(LOG_DEBUG, ("pppos_input[%d]: got %d bytes\n", ppp->netif->num, l));
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016198:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801619c:	687a      	ldr	r2, [r7, #4]
 801619e:	4619      	mov	r1, r3
 80161a0:	48a6      	ldr	r0, [pc, #664]	; (801643c <pppos_input+0x2d0>)
 80161a2:	f7eb f8a6 	bl	80012f2 <lwip_win32_platform_diag>
  while (l-- > 0) {
 80161a6:	e1fa      	b.n	801659e <pppos_input+0x432>
    cur_char = *s_u8++;
 80161a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161aa:	1c5a      	adds	r2, r3, #1
 80161ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80161ae:	781b      	ldrb	r3, [r3, #0]
 80161b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    PPPOS_PROTECT(lev);
    escaped = ESCAPE_P(pppos->in_accm, cur_char);
 80161b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80161b8:	08db      	lsrs	r3, r3, #3
 80161ba:	b2db      	uxtb	r3, r3
 80161bc:	461a      	mov	r2, r3
 80161be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161c0:	4413      	add	r3, r2
 80161c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80161c6:	b25a      	sxtb	r2, r3
 80161c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80161cc:	f003 0307 	and.w	r3, r3, #7
 80161d0:	2101      	movs	r1, #1
 80161d2:	fa01 f303 	lsl.w	r3, r1, r3
 80161d6:	b25b      	sxtb	r3, r3
 80161d8:	4013      	ands	r3, r2
 80161da:	b25b      	sxtb	r3, r3
 80161dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    PPPOS_UNPROTECT(lev);

    /* Handle special characters. */
    if (escaped) {
 80161e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	f000 80c4 	beq.w	8016372 <pppos_input+0x206>
      /* Check for escape sequences. */
      /* XXX Note that this does not handle an escaped 0x5d character which
       * would appear as an escape character.  Since this is an ASCII ']'
       * and there is no reason that I know of to escape it, I won't complicate
       * the code to handle this case. GLL */
      if (cur_char == PPP_ESCAPE) {
 80161ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80161ee:	2b7d      	cmp	r3, #125	; 0x7d
 80161f0:	d104      	bne.n	80161fc <pppos_input+0x90>
        pppos->in_escaped = 1;
 80161f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f4:	2201      	movs	r2, #1
 80161f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80161fa:	e1d0      	b.n	801659e <pppos_input+0x432>
      /* Check for the flag character. */
      } else if (cur_char == PPP_FLAG) {
 80161fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016200:	2b7e      	cmp	r3, #126	; 0x7e
 8016202:	f040 80aa 	bne.w	801635a <pppos_input+0x1ee>
        /* If this is just an extra flag character, ignore it. */
        if (pppos->in_state <= PDADDRESS) {
 8016206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016208:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801620c:	2b01      	cmp	r3, #1
 801620e:	f240 8096 	bls.w	801633e <pppos_input+0x1d2>
          /* ignore it */;
        /* If we haven't received the packet header, drop what has come in. */
        } else if (pppos->in_state < PDDATA) {
 8016212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016214:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8016218:	2b04      	cmp	r3, #4
 801621a:	d80f      	bhi.n	801623c <pppos_input+0xd0>
          PPPDEBUG(LOG_WARNING,
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016220:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016224:	4619      	mov	r1, r3
 8016226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016228:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801622c:	461a      	mov	r2, r3
 801622e:	4884      	ldr	r0, [pc, #528]	; (8016440 <pppos_input+0x2d4>)
 8016230:	f7eb f85f 	bl	80012f2 <lwip_win32_platform_diag>
                   ("pppos_input[%d]: Dropping incomplete packet %d\n",
                    ppp->netif->num, pppos->in_state));
          LINK_STATS_INC(link.lenerr);
          pppos_input_drop(pppos);
 8016234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016236:	f000 fa7f 	bl	8016738 <pppos_input_drop>
 801623a:	e080      	b.n	801633e <pppos_input+0x1d2>
        /* If the fcs is invalid, drop the packet. */
        } else if (pppos->in_fcs != PPP_GOODFCS) {
 801623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801623e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8016242:	f24f 02b8 	movw	r2, #61624	; 0xf0b8
 8016246:	4293      	cmp	r3, r2
 8016248:	d012      	beq.n	8016270 <pppos_input+0x104>
          PPPDEBUG(LOG_INFO,
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801624e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016252:	4619      	mov	r1, r3
 8016254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016256:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801625a:	461a      	mov	r2, r3
 801625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801625e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8016262:	4878      	ldr	r0, [pc, #480]	; (8016444 <pppos_input+0x2d8>)
 8016264:	f7eb f845 	bl	80012f2 <lwip_win32_platform_diag>
                   ("pppos_input[%d]: Dropping bad fcs 0x%"X16_F" proto=0x%"X16_F"\n",
                    ppp->netif->num, pppos->in_fcs, pppos->in_protocol));
          /* Note: If you get lots of these, check for UART frame errors or try different baud rate */
          LINK_STATS_INC(link.chkerr);
          pppos_input_drop(pppos);
 8016268:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801626a:	f000 fa65 	bl	8016738 <pppos_input_drop>
 801626e:	e066      	b.n	801633e <pppos_input+0x1d2>
        } else if (!pppos->in_tail) {
 8016270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016274:	2b00      	cmp	r3, #0
 8016276:	d10b      	bne.n	8016290 <pppos_input+0x124>
          PPPDEBUG(LOG_INFO,
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801627c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016280:	4619      	mov	r1, r3
 8016282:	4871      	ldr	r0, [pc, #452]	; (8016448 <pppos_input+0x2dc>)
 8016284:	f7eb f835 	bl	80012f2 <lwip_win32_platform_diag>
                   ("pppos_input[%d]: Dropping null in_tail\n",
                    ppp->netif->num));
          LINK_STATS_INC(link.drop);
          pppos_input_drop(pppos);
 8016288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801628a:	f000 fa55 	bl	8016738 <pppos_input_drop>
 801628e:	e056      	b.n	801633e <pppos_input+0x1d2>
        /* Otherwise it's a good packet so pass it on. */
        } else {
          struct pbuf *inp;
          /* Trim off the checksum. */
          if(pppos->in_tail->len > 2) {
 8016290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016294:	895b      	ldrh	r3, [r3, #10]
 8016296:	2b02      	cmp	r3, #2
 8016298:	d91c      	bls.n	80162d4 <pppos_input+0x168>
            pppos->in_tail->len -= 2;
 801629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801629c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801629e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162a0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80162a2:	8952      	ldrh	r2, [r2, #10]
 80162a4:	3a02      	subs	r2, #2
 80162a6:	b292      	uxth	r2, r2
 80162a8:	815a      	strh	r2, [r3, #10]

            pppos->in_tail->tot_len = pppos->in_tail->len;
 80162aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80162ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80162b2:	8952      	ldrh	r2, [r2, #10]
 80162b4:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 80162b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80162ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80162be:	429a      	cmp	r2, r3
 80162c0:	d027      	beq.n	8016312 <pppos_input+0x1a6>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 80162c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80162c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80162ca:	4619      	mov	r1, r3
 80162cc:	4610      	mov	r0, r2
 80162ce:	f7ef fe89 	bl	8005fe4 <pbuf_cat>
 80162d2:	e01e      	b.n	8016312 <pppos_input+0x1a6>
            }
          } else {
            pppos->in_tail->tot_len = pppos->in_tail->len;
 80162d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80162d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162da:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80162dc:	8952      	ldrh	r2, [r2, #10]
 80162de:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 80162e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80162e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80162e8:	429a      	cmp	r2, r3
 80162ea:	d007      	beq.n	80162fc <pppos_input+0x190>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 80162ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80162f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80162f4:	4619      	mov	r1, r3
 80162f6:	4610      	mov	r0, r2
 80162f8:	f7ef fe74 	bl	8005fe4 <pbuf_cat>
            }

            pbuf_realloc(pppos->in_head, pppos->in_head->tot_len - 2);
 80162fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016304:	891b      	ldrh	r3, [r3, #8]
 8016306:	3b02      	subs	r3, #2
 8016308:	b29b      	uxth	r3, r3
 801630a:	4619      	mov	r1, r3
 801630c:	4610      	mov	r0, r2
 801630e:	f7ef fbcf 	bl	8005ab0 <pbuf_realloc>
          }

          /* Dispatch the packet thereby consuming it. */
          inp = pppos->in_head;
 8016312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016316:	613b      	str	r3, [r7, #16]
          /* Packet consumed, release our references. */
          pppos->in_head = NULL;
 8016318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801631a:	2200      	movs	r2, #0
 801631c:	651a      	str	r2, [r3, #80]	; 0x50
          pppos->in_tail = NULL;
 801631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016320:	2200      	movs	r2, #0
 8016322:	655a      	str	r2, [r3, #84]	; 0x54
            pbuf_free(inp);
            LINK_STATS_INC(link.drop);
            MIB2_STATS_NETIF_INC(ppp->netif, ifindiscards);
          }
#else /* PPP_INPROC_IRQ_SAFE */
          ppp_input(ppp, inp);
 8016324:	6939      	ldr	r1, [r7, #16]
 8016326:	68f8      	ldr	r0, [r7, #12]
 8016328:	f7ff fa8e 	bl	8015848 <ppp_input>
          /* ppp_input can disconnect the interface, we need to abort to prevent a memory
           * leak if there are remaining bytes because pppos_connect and pppos_listen
           * functions expect input buffer to be free. Furthermore there are no real
           * reason to continue reading bytes if we are disconnected.
           */
          if (!pppos->open) {
 801632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801632e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016332:	f003 0301 	and.w	r3, r3, #1
 8016336:	b2db      	uxtb	r3, r3
 8016338:	2b00      	cmp	r3, #0
 801633a:	f000 8139 	beq.w	80165b0 <pppos_input+0x444>
          }
#endif /* PPP_INPROC_IRQ_SAFE */
        }

        /* Prepare for a new packet. */
        pppos->in_fcs = PPP_INITFCS;
 801633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016344:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
        pppos->in_state = PDADDRESS;
 8016348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801634a:	2201      	movs	r2, #1
 801634c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        pppos->in_escaped = 0;
 8016350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016352:	2200      	movs	r2, #0
 8016354:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8016358:	e121      	b.n	801659e <pppos_input+0x432>
      /* Other characters are usually control characters that may have
       * been inserted by the physical layer so here we just drop them. */
      } else {
        PPPDEBUG(LOG_WARNING,
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801635e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016362:	4619      	mov	r1, r3
 8016364:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016368:	461a      	mov	r2, r3
 801636a:	4838      	ldr	r0, [pc, #224]	; (801644c <pppos_input+0x2e0>)
 801636c:	f7ea ffc1 	bl	80012f2 <lwip_win32_platform_diag>
 8016370:	e115      	b.n	801659e <pppos_input+0x432>
                 ("pppos_input[%d]: Dropping ACCM char <%d>\n", ppp->netif->num, cur_char));
      }
    /* Process other characters. */
    } else {
      /* Unencode escaped characters. */
      if (pppos->in_escaped) {
 8016372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016374:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8016378:	2b00      	cmp	r3, #0
 801637a:	d009      	beq.n	8016390 <pppos_input+0x224>
        pppos->in_escaped = 0;
 801637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801637e:	2200      	movs	r2, #0
 8016380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        cur_char ^= PPP_TRANS;
 8016384:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016388:	f083 0320 	eor.w	r3, r3, #32
 801638c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      }

      /* Process character relative to current state. */
      switch (pppos->in_state) {
 8016390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016392:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8016396:	2b05      	cmp	r3, #5
 8016398:	f200 80eb 	bhi.w	8016572 <pppos_input+0x406>
 801639c:	a201      	add	r2, pc, #4	; (adr r2, 80163a4 <pppos_input+0x238>)
 801639e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163a2:	bf00      	nop
 80163a4:	08016573 	.word	0x08016573
 80163a8:	080163bd 	.word	0x080163bd
 80163ac:	080163cf 	.word	0x080163cf
 80163b0:	080163e1 	.word	0x080163e1
 80163b4:	0801641d 	.word	0x0801641d
 80163b8:	08016451 	.word	0x08016451
        case PDIDLE:                    /* Idle state - wait for flag character. */
          break;
        case PDADDRESS:                 /* Process address field. */
          if (cur_char == PPP_ALLSTATIONS) {
 80163bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80163c0:	2bff      	cmp	r3, #255	; 0xff
 80163c2:	d104      	bne.n	80163ce <pppos_input+0x262>
            pppos->in_state = PDCONTROL;
 80163c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163c6:	2202      	movs	r2, #2
 80163c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            break;
 80163cc:	e0d2      	b.n	8016574 <pppos_input+0x408>
          }
          /* Else assume compressed address and control fields so
           * fall through to get the protocol... */
          /* Fall through */
        case PDCONTROL:                 /* Process control field. */
          if (cur_char == PPP_UI) {
 80163ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80163d2:	2b03      	cmp	r3, #3
 80163d4:	d104      	bne.n	80163e0 <pppos_input+0x274>
            pppos->in_state = PDPROTOCOL1;
 80163d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163d8:	2203      	movs	r2, #3
 80163da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            break;
 80163de:	e0c9      	b.n	8016574 <pppos_input+0x408>
          }
          /* Fall through */
        case PDPROTOCOL1:               /* Process protocol field 1. */
          /* If the lower bit is set, this is the end of the protocol
           * field. */
          if (cur_char & 1) {
 80163e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80163e4:	f003 0301 	and.w	r3, r3, #1
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d00a      	beq.n	8016402 <pppos_input+0x296>
            pppos->in_protocol = cur_char;
 80163ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80163f0:	b29a      	uxth	r2, r3
 80163f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
            pppos->in_state = PDDATA;
 80163f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163fa:	2205      	movs	r2, #5
 80163fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          } else {
            pppos->in_protocol = (u16_t)cur_char << 8;
            pppos->in_state = PDPROTOCOL2;
          }
          break;
 8016400:	e0b8      	b.n	8016574 <pppos_input+0x408>
            pppos->in_protocol = (u16_t)cur_char << 8;
 8016402:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016406:	b29b      	uxth	r3, r3
 8016408:	021b      	lsls	r3, r3, #8
 801640a:	b29a      	uxth	r2, r3
 801640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801640e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
            pppos->in_state = PDPROTOCOL2;
 8016412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016414:	2204      	movs	r2, #4
 8016416:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          break;
 801641a:	e0ab      	b.n	8016574 <pppos_input+0x408>
        case PDPROTOCOL2:               /* Process protocol field 2. */
          pppos->in_protocol |= cur_char;
 801641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801641e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8016422:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016426:	b29b      	uxth	r3, r3
 8016428:	4313      	orrs	r3, r2
 801642a:	b29a      	uxth	r2, r3
 801642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801642e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          pppos->in_state = PDDATA;
 8016432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016434:	2205      	movs	r2, #5
 8016436:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          break;
 801643a:	e09b      	b.n	8016574 <pppos_input+0x408>
 801643c:	0801d67c 	.word	0x0801d67c
 8016440:	0801d69c 	.word	0x0801d69c
 8016444:	0801d6cc 	.word	0x0801d6cc
 8016448:	0801d704 	.word	0x0801d704
 801644c:	0801d72c 	.word	0x0801d72c
        case PDDATA:                    /* Process data byte. */
          /* Make space to receive processed data. */
          if (pppos->in_tail == NULL || pppos->in_tail->len == PBUF_POOL_BUFSIZE) {
 8016450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016454:	2b00      	cmp	r3, #0
 8016456:	d005      	beq.n	8016464 <pppos_input+0x2f8>
 8016458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801645a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801645c:	895b      	ldrh	r3, [r3, #10]
 801645e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016462:	d177      	bne.n	8016554 <pppos_input+0x3e8>
            u16_t pbuf_alloc_len;
            if (pppos->in_tail != NULL) {
 8016464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016468:	2b00      	cmp	r3, #0
 801646a:	d031      	beq.n	80164d0 <pppos_input+0x364>
              u16_t mru;
              pppos->in_tail->tot_len = pppos->in_tail->len;
 801646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801646e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016472:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8016474:	8952      	ldrh	r2, [r2, #10]
 8016476:	811a      	strh	r2, [r3, #8]
              if (pppos->in_tail != pppos->in_head) {
 8016478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801647a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801647e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016480:	429a      	cmp	r2, r3
 8016482:	d00a      	beq.n	801649a <pppos_input+0x32e>
                pbuf_cat(pppos->in_head, pppos->in_tail);
 8016484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016486:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801648a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801648c:	4619      	mov	r1, r3
 801648e:	4610      	mov	r0, r2
 8016490:	f7ef fda8 	bl	8005fe4 <pbuf_cat>
                /* give up the in_tail reference now */
                pppos->in_tail = NULL;
 8016494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016496:	2200      	movs	r2, #0
 8016498:	655a      	str	r2, [r3, #84]	; 0x54
              }
              /* Compute MRU including headers length.  If smaller packets are
               * requested, we must still be able to receive packets of the
               * default MRU for control packets. */
              mru = LWIP_MAX(PPP_MRU, PPP_DEFMRU)
 801649a:	f240 6374 	movw	r3, #1652	; 0x674
 801649e:	843b      	strh	r3, [r7, #32]
#endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
#if PPP_INPROC_IRQ_SAFE
                + sizeof(struct pppos_input_header)
#endif /* PPP_INPROC_IRQ_SAFE */
                + sizeof(pppos->in_protocol);
              if (pppos->in_head->tot_len > mru) {
 80164a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80164a4:	891b      	ldrh	r3, [r3, #8]
 80164a6:	8c3a      	ldrh	r2, [r7, #32]
 80164a8:	429a      	cmp	r2, r3
 80164aa:	d211      	bcs.n	80164d0 <pppos_input+0x364>
                /* Packet too big. Drop the input packet and let the
                 * higher layers deal with it.  Continue processing
                 * received characters in case a new packet starts. */
                PPPDEBUG(LOG_ERR, ("pppos_input[%d]: packet too big, max_len=%d, dropping packet\n", ppp->netif->num, mru));
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80164b4:	4619      	mov	r1, r3
 80164b6:	8c3b      	ldrh	r3, [r7, #32]
 80164b8:	461a      	mov	r2, r3
 80164ba:	483f      	ldr	r0, [pc, #252]	; (80165b8 <pppos_input+0x44c>)
 80164bc:	f7ea ff19 	bl	80012f2 <lwip_win32_platform_diag>
                LINK_STATS_INC(link.lenerr);
                pppos_input_drop(pppos);
 80164c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164c2:	f000 f939 	bl	8016738 <pppos_input_drop>
                pppos->in_state = PDIDLE;  /* Wait for flag character. */
 80164c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164c8:	2200      	movs	r2, #0
 80164ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                break;
 80164ce:	e051      	b.n	8016574 <pppos_input+0x408>
              }
            }
            /* If we haven't started a packet, we need a packet header. */
            pbuf_alloc_len = 0;
 80164d0:	2300      	movs	r3, #0
 80164d2:	83fb      	strh	r3, [r7, #30]
#endif /* PPP_IPV6_SUPPORT */
             )) {
              pbuf_alloc_len = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
            }
#endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
            next_pbuf = pbuf_alloc(PBUF_RAW, pbuf_alloc_len, PBUF_POOL);
 80164d4:	8bfb      	ldrh	r3, [r7, #30]
 80164d6:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80164da:	4619      	mov	r1, r3
 80164dc:	2000      	movs	r0, #0
 80164de:	f7ef f9f5 	bl	80058cc <pbuf_alloc>
 80164e2:	61b8      	str	r0, [r7, #24]
            if (next_pbuf == NULL) {
 80164e4:	69bb      	ldr	r3, [r7, #24]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d10f      	bne.n	801650a <pppos_input+0x39e>
              /* No free buffers.  Drop the input packet and let the
               * higher layers deal with it.  Continue processing
               * received characters in case a new packet starts. */
              PPPDEBUG(LOG_ERR, ("pppos_input[%d]: NO FREE PBUFS!\n", ppp->netif->num));
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80164f2:	4619      	mov	r1, r3
 80164f4:	4831      	ldr	r0, [pc, #196]	; (80165bc <pppos_input+0x450>)
 80164f6:	f7ea fefc 	bl	80012f2 <lwip_win32_platform_diag>
              LINK_STATS_INC(link.memerr);
              pppos_input_drop(pppos);
 80164fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164fc:	f000 f91c 	bl	8016738 <pppos_input_drop>
              pppos->in_state = PDIDLE;  /* Wait for flag character. */
 8016500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016502:	2200      	movs	r2, #0
 8016504:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
              break;
 8016508:	e034      	b.n	8016574 <pppos_input+0x408>
            }
            if (pppos->in_head == NULL) {
 801650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801650c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801650e:	2b00      	cmp	r3, #0
 8016510:	d11d      	bne.n	801654e <pppos_input+0x3e2>
              u8_t *payload = ((u8_t*)next_pbuf->payload) + pbuf_alloc_len;
 8016512:	69bb      	ldr	r3, [r7, #24]
 8016514:	685a      	ldr	r2, [r3, #4]
 8016516:	8bfb      	ldrh	r3, [r7, #30]
 8016518:	4413      	add	r3, r2
 801651a:	617b      	str	r3, [r7, #20]
#if PPP_INPROC_IRQ_SAFE
              ((struct pppos_input_header*)payload)->ppp = ppp;
              payload += sizeof(struct pppos_input_header);
              next_pbuf->len += sizeof(struct pppos_input_header);
#endif /* PPP_INPROC_IRQ_SAFE */
              next_pbuf->len += sizeof(pppos->in_protocol);
 801651c:	69bb      	ldr	r3, [r7, #24]
 801651e:	895b      	ldrh	r3, [r3, #10]
 8016520:	3302      	adds	r3, #2
 8016522:	b29a      	uxth	r2, r3
 8016524:	69bb      	ldr	r3, [r7, #24]
 8016526:	815a      	strh	r2, [r3, #10]
              *(payload++) = pppos->in_protocol >> 8;
 8016528:	697b      	ldr	r3, [r7, #20]
 801652a:	1c5a      	adds	r2, r3, #1
 801652c:	617a      	str	r2, [r7, #20]
 801652e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016530:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8016534:	0a12      	lsrs	r2, r2, #8
 8016536:	b292      	uxth	r2, r2
 8016538:	b2d2      	uxtb	r2, r2
 801653a:	701a      	strb	r2, [r3, #0]
              *(payload) = pppos->in_protocol & 0xFF;
 801653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801653e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8016542:	b2da      	uxtb	r2, r3
 8016544:	697b      	ldr	r3, [r7, #20]
 8016546:	701a      	strb	r2, [r3, #0]
              pppos->in_head = next_pbuf;
 8016548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801654a:	69ba      	ldr	r2, [r7, #24]
 801654c:	651a      	str	r2, [r3, #80]	; 0x50
            }
            pppos->in_tail = next_pbuf;
 801654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016550:	69ba      	ldr	r2, [r7, #24]
 8016552:	655a      	str	r2, [r3, #84]	; 0x54
          }
          /* Load character into buffer. */
          ((u8_t*)pppos->in_tail->payload)[pppos->in_tail->len++] = cur_char;
 8016554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016558:	6859      	ldr	r1, [r3, #4]
 801655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801655c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801655e:	895a      	ldrh	r2, [r3, #10]
 8016560:	1c50      	adds	r0, r2, #1
 8016562:	b280      	uxth	r0, r0
 8016564:	8158      	strh	r0, [r3, #10]
 8016566:	4613      	mov	r3, r2
 8016568:	440b      	add	r3, r1
 801656a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801656e:	701a      	strb	r2, [r3, #0]
          break;
 8016570:	e000      	b.n	8016574 <pppos_input+0x408>
        default:
          break;
 8016572:	bf00      	nop
      }

      /* update the frame check sequence number. */
      pppos->in_fcs = PPP_FCS(pppos->in_fcs, cur_char);
 8016574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016576:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801657a:	0a1b      	lsrs	r3, r3, #8
 801657c:	b29a      	uxth	r2, r3
 801657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016580:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8016584:	4619      	mov	r1, r3
 8016586:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801658a:	404b      	eors	r3, r1
 801658c:	b2db      	uxtb	r3, r3
 801658e:	490c      	ldr	r1, [pc, #48]	; (80165c0 <pppos_input+0x454>)
 8016590:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016594:	4053      	eors	r3, r2
 8016596:	b29a      	uxth	r2, r3
 8016598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801659a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  while (l-- > 0) {
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	1e5a      	subs	r2, r3, #1
 80165a2:	607a      	str	r2, [r7, #4]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	f73f adff 	bgt.w	80161a8 <pppos_input+0x3c>
 80165aa:	e002      	b.n	80165b2 <pppos_input+0x446>
    return;
 80165ac:	bf00      	nop
 80165ae:	e000      	b.n	80165b2 <pppos_input+0x446>
            break;
 80165b0:	bf00      	nop
    }
  } /* while (l-- > 0), all bytes processed */
}
 80165b2:	3730      	adds	r7, #48	; 0x30
 80165b4:	46bd      	mov	sp, r7
 80165b6:	bd80      	pop	{r7, pc}
 80165b8:	0801d758 	.word	0x0801d758
 80165bc:	0801d798 	.word	0x0801d798
 80165c0:	0801dd28 	.word	0x0801dd28

080165c4 <pppos_send_config>:
}
#endif /* PPP_INPROC_IRQ_SAFE */

static void
pppos_send_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
{
 80165c4:	b590      	push	{r4, r7, lr}
 80165c6:	b089      	sub	sp, #36	; 0x24
 80165c8:	af02      	add	r7, sp, #8
 80165ca:	60f8      	str	r0, [r7, #12]
 80165cc:	60b9      	str	r1, [r7, #8]
 80165ce:	607a      	str	r2, [r7, #4]
 80165d0:	603b      	str	r3, [r7, #0]
  int i;
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 80165d2:	68bb      	ldr	r3, [r7, #8]
 80165d4:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(ppp);

  pppos->pcomp = pcomp;
 80165d6:	683b      	ldr	r3, [r7, #0]
 80165d8:	b2db      	uxtb	r3, r3
 80165da:	f003 0301 	and.w	r3, r3, #1
 80165de:	b2d9      	uxtb	r1, r3
 80165e0:	693a      	ldr	r2, [r7, #16]
 80165e2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80165e6:	f361 0341 	bfi	r3, r1, #1, #1
 80165ea:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
  pppos->accomp = accomp;
 80165ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165f0:	b2db      	uxtb	r3, r3
 80165f2:	f003 0301 	and.w	r3, r3, #1
 80165f6:	b2d9      	uxtb	r1, r3
 80165f8:	693a      	ldr	r2, [r7, #16]
 80165fa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80165fe:	f361 0382 	bfi	r3, r1, #2, #1
 8016602:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

  /* Load the ACCM bits for the 32 control codes. */
  for (i = 0; i < 32/8; i++) {
 8016606:	2300      	movs	r3, #0
 8016608:	617b      	str	r3, [r7, #20]
 801660a:	e00e      	b.n	801662a <pppos_send_config+0x66>
    pppos->out_accm[i] = (u8_t)((accm >> (8 * i)) & 0xFF);
 801660c:	697b      	ldr	r3, [r7, #20]
 801660e:	00db      	lsls	r3, r3, #3
 8016610:	687a      	ldr	r2, [r7, #4]
 8016612:	fa22 f303 	lsr.w	r3, r2, r3
 8016616:	b2d9      	uxtb	r1, r3
 8016618:	693a      	ldr	r2, [r7, #16]
 801661a:	697b      	ldr	r3, [r7, #20]
 801661c:	4413      	add	r3, r2
 801661e:	330c      	adds	r3, #12
 8016620:	460a      	mov	r2, r1
 8016622:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 32/8; i++) {
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	3301      	adds	r3, #1
 8016628:	617b      	str	r3, [r7, #20]
 801662a:	697b      	ldr	r3, [r7, #20]
 801662c:	2b03      	cmp	r3, #3
 801662e:	dded      	ble.n	801660c <pppos_send_config+0x48>
  }

  PPPDEBUG(LOG_INFO, ("pppos_send_config[%d]: out_accm=%X %X %X %X\n",
 8016630:	693b      	ldr	r3, [r7, #16]
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016636:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801663a:	4619      	mov	r1, r3
 801663c:	693b      	ldr	r3, [r7, #16]
 801663e:	7b1b      	ldrb	r3, [r3, #12]
 8016640:	4618      	mov	r0, r3
 8016642:	693b      	ldr	r3, [r7, #16]
 8016644:	7b5b      	ldrb	r3, [r3, #13]
 8016646:	461c      	mov	r4, r3
 8016648:	693b      	ldr	r3, [r7, #16]
 801664a:	7b9b      	ldrb	r3, [r3, #14]
 801664c:	461a      	mov	r2, r3
 801664e:	693b      	ldr	r3, [r7, #16]
 8016650:	7bdb      	ldrb	r3, [r3, #15]
 8016652:	9301      	str	r3, [sp, #4]
 8016654:	9200      	str	r2, [sp, #0]
 8016656:	4623      	mov	r3, r4
 8016658:	4602      	mov	r2, r0
 801665a:	4803      	ldr	r0, [pc, #12]	; (8016668 <pppos_send_config+0xa4>)
 801665c:	f7ea fe49 	bl	80012f2 <lwip_win32_platform_diag>
            pppos->ppp->netif->num,
            pppos->out_accm[0], pppos->out_accm[1], pppos->out_accm[2], pppos->out_accm[3]));
}
 8016660:	bf00      	nop
 8016662:	371c      	adds	r7, #28
 8016664:	46bd      	mov	sp, r7
 8016666:	bd90      	pop	{r4, r7, pc}
 8016668:	0801d7bc 	.word	0x0801d7bc

0801666c <pppos_recv_config>:

static void
pppos_recv_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
{
 801666c:	b590      	push	{r4, r7, lr}
 801666e:	b089      	sub	sp, #36	; 0x24
 8016670:	af02      	add	r7, sp, #8
 8016672:	60f8      	str	r0, [r7, #12]
 8016674:	60b9      	str	r1, [r7, #8]
 8016676:	607a      	str	r2, [r7, #4]
 8016678:	603b      	str	r3, [r7, #0]
  int i;
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 801667a:	68bb      	ldr	r3, [r7, #8]
 801667c:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(pcomp);
  LWIP_UNUSED_ARG(accomp);

  /* Load the ACCM bits for the 32 control codes. */
  PPPOS_PROTECT(lev);
  for (i = 0; i < 32 / 8; i++) {
 801667e:	2300      	movs	r3, #0
 8016680:	617b      	str	r3, [r7, #20]
 8016682:	e00e      	b.n	80166a2 <pppos_recv_config+0x36>
    pppos->in_accm[i] = (u8_t)(accm >> (i * 8));
 8016684:	697b      	ldr	r3, [r7, #20]
 8016686:	00db      	lsls	r3, r3, #3
 8016688:	687a      	ldr	r2, [r7, #4]
 801668a:	fa22 f303 	lsr.w	r3, r2, r3
 801668e:	b2d9      	uxtb	r1, r3
 8016690:	693a      	ldr	r2, [r7, #16]
 8016692:	697b      	ldr	r3, [r7, #20]
 8016694:	4413      	add	r3, r2
 8016696:	332d      	adds	r3, #45	; 0x2d
 8016698:	460a      	mov	r2, r1
 801669a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 32 / 8; i++) {
 801669c:	697b      	ldr	r3, [r7, #20]
 801669e:	3301      	adds	r3, #1
 80166a0:	617b      	str	r3, [r7, #20]
 80166a2:	697b      	ldr	r3, [r7, #20]
 80166a4:	2b03      	cmp	r3, #3
 80166a6:	dded      	ble.n	8016684 <pppos_recv_config+0x18>
  }
  PPPOS_UNPROTECT(lev);

  PPPDEBUG(LOG_INFO, ("pppos_recv_config[%d]: in_accm=%X %X %X %X\n",
 80166a8:	693b      	ldr	r3, [r7, #16]
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80166b2:	4619      	mov	r1, r3
 80166b4:	693b      	ldr	r3, [r7, #16]
 80166b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80166ba:	4618      	mov	r0, r3
 80166bc:	693b      	ldr	r3, [r7, #16]
 80166be:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80166c2:	461c      	mov	r4, r3
 80166c4:	693b      	ldr	r3, [r7, #16]
 80166c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80166ca:	461a      	mov	r2, r3
 80166cc:	693b      	ldr	r3, [r7, #16]
 80166ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80166d2:	9301      	str	r3, [sp, #4]
 80166d4:	9200      	str	r2, [sp, #0]
 80166d6:	4623      	mov	r3, r4
 80166d8:	4602      	mov	r2, r0
 80166da:	4803      	ldr	r0, [pc, #12]	; (80166e8 <pppos_recv_config+0x7c>)
 80166dc:	f7ea fe09 	bl	80012f2 <lwip_win32_platform_diag>
            pppos->ppp->netif->num,
            pppos->in_accm[0], pppos->in_accm[1], pppos->in_accm[2], pppos->in_accm[3]));
}
 80166e0:	bf00      	nop
 80166e2:	371c      	adds	r7, #28
 80166e4:	46bd      	mov	sp, r7
 80166e6:	bd90      	pop	{r4, r7, pc}
 80166e8:	0801d7ec 	.word	0x0801d7ec

080166ec <pppos_input_free_current_packet>:
/*
 * Drop the input packet.
 */
static void
pppos_input_free_current_packet(pppos_pcb *pppos)
{
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b082      	sub	sp, #8
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
  if (pppos->in_head != NULL) {
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d016      	beq.n	801672a <pppos_input_free_current_packet+0x3e>
    if (pppos->in_tail && (pppos->in_tail != pppos->in_head)) {
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016700:	2b00      	cmp	r3, #0
 8016702:	d00a      	beq.n	801671a <pppos_input_free_current_packet+0x2e>
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801670c:	429a      	cmp	r2, r3
 801670e:	d004      	beq.n	801671a <pppos_input_free_current_packet+0x2e>
      pbuf_free(pppos->in_tail);
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016714:	4618      	mov	r0, r3
 8016716:	f7ef fb7d 	bl	8005e14 <pbuf_free>
    }
    pbuf_free(pppos->in_head);
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801671e:	4618      	mov	r0, r3
 8016720:	f7ef fb78 	bl	8005e14 <pbuf_free>
    pppos->in_head = NULL;
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	2200      	movs	r2, #0
 8016728:	651a      	str	r2, [r3, #80]	; 0x50
  }
  pppos->in_tail = NULL;
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	2200      	movs	r2, #0
 801672e:	655a      	str	r2, [r3, #84]	; 0x54
}
 8016730:	bf00      	nop
 8016732:	3708      	adds	r7, #8
 8016734:	46bd      	mov	sp, r7
 8016736:	bd80      	pop	{r7, pc}

08016738 <pppos_input_drop>:
/*
 * Drop the input packet and increase error counters.
 */
static void
pppos_input_drop(pppos_pcb *pppos)
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b082      	sub	sp, #8
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
  if (pppos->in_head != NULL) {
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016744:	2b00      	cmp	r3, #0
 8016746:	d009      	beq.n	801675c <pppos_input_drop+0x24>
#if 0
    PPPDEBUG(LOG_INFO, ("pppos_input_drop: %d:%.*H\n", pppos->in_head->len, min(60, pppos->in_head->len * 2), pppos->in_head->payload));
#endif
    PPPDEBUG(LOG_INFO, ("pppos_input_drop: pbuf len=%d, addr %p\n", pppos->in_head->len, (void*)pppos->in_head));
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801674c:	895b      	ldrh	r3, [r3, #10]
 801674e:	4619      	mov	r1, r3
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016754:	461a      	mov	r2, r3
 8016756:	4805      	ldr	r0, [pc, #20]	; (801676c <pppos_input_drop+0x34>)
 8016758:	f7ea fdcb 	bl	80012f2 <lwip_win32_platform_diag>
  }
  pppos_input_free_current_packet(pppos);
 801675c:	6878      	ldr	r0, [r7, #4]
 801675e:	f7ff ffc5 	bl	80166ec <pppos_input_free_current_packet>
  vj_uncompress_err(&pppos->ppp->vj_comp);
#endif /* VJ_SUPPORT */

  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(pppos->ppp->netif, ifindiscards);
}
 8016762:	bf00      	nop
 8016764:	3708      	adds	r7, #8
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}
 801676a:	bf00      	nop
 801676c:	0801d818 	.word	0x0801d818

08016770 <pppos_output_append>:
 * If pbuf is full, send the pbuf and reuse it.
 * Return the current pbuf.
 */
static err_t
pppos_output_append(pppos_pcb *pppos, err_t err, struct pbuf *nb, u8_t c, u8_t accm, u16_t *fcs)
{
 8016770:	b590      	push	{r4, r7, lr}
 8016772:	b087      	sub	sp, #28
 8016774:	af00      	add	r7, sp, #0
 8016776:	60f8      	str	r0, [r7, #12]
 8016778:	607a      	str	r2, [r7, #4]
 801677a:	461a      	mov	r2, r3
 801677c:	460b      	mov	r3, r1
 801677e:	72fb      	strb	r3, [r7, #11]
 8016780:	4613      	mov	r3, r2
 8016782:	72bb      	strb	r3, [r7, #10]
  if (err != ERR_OK) {
 8016784:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d002      	beq.n	8016792 <pppos_output_append+0x22>
    return err;
 801678c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016790:	e06e      	b.n	8016870 <pppos_output_append+0x100>
  }

  /* Make sure there is room for the character and an escape code.
   * Sure we don't quite fill the buffer if the character doesn't
   * get escaped but is one character worth complicating this? */
  if ((PBUF_POOL_BUFSIZE - nb->len) < 2) {
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	895b      	ldrh	r3, [r3, #10]
 8016796:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801679a:	2b01      	cmp	r3, #1
 801679c:	dc19      	bgt.n	80167d2 <pppos_output_append+0x62>
    u32_t l = pppos->output_cb(pppos->ppp, nb->payload, nb->len, pppos->ppp->ctx_cb);
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	685c      	ldr	r4, [r3, #4]
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	6818      	ldr	r0, [r3, #0]
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	6859      	ldr	r1, [r3, #4]
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	895b      	ldrh	r3, [r3, #10]
 80167ae:	461a      	mov	r2, r3
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167b6:	47a0      	blx	r4
 80167b8:	6178      	str	r0, [r7, #20]
    if (l != nb->len) {
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	895b      	ldrh	r3, [r3, #10]
 80167be:	461a      	mov	r2, r3
 80167c0:	697b      	ldr	r3, [r7, #20]
 80167c2:	429a      	cmp	r2, r3
 80167c4:	d002      	beq.n	80167cc <pppos_output_append+0x5c>
      return ERR_IF;
 80167c6:	f06f 030b 	mvn.w	r3, #11
 80167ca:	e051      	b.n	8016870 <pppos_output_append+0x100>
    }
    nb->len = 0;
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	2200      	movs	r2, #0
 80167d0:	815a      	strh	r2, [r3, #10]
  }

  /* Update FCS before checking for special characters. */
  if (fcs) {
 80167d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d010      	beq.n	80167fa <pppos_output_append+0x8a>
    *fcs = PPP_FCS(*fcs, c);
 80167d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167da:	881b      	ldrh	r3, [r3, #0]
 80167dc:	0a1b      	lsrs	r3, r3, #8
 80167de:	b29a      	uxth	r2, r3
 80167e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167e2:	881b      	ldrh	r3, [r3, #0]
 80167e4:	4619      	mov	r1, r3
 80167e6:	7abb      	ldrb	r3, [r7, #10]
 80167e8:	404b      	eors	r3, r1
 80167ea:	b2db      	uxtb	r3, r3
 80167ec:	4922      	ldr	r1, [pc, #136]	; (8016878 <pppos_output_append+0x108>)
 80167ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80167f2:	4053      	eors	r3, r2
 80167f4:	b29a      	uxth	r2, r3
 80167f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167f8:	801a      	strh	r2, [r3, #0]
  }

  /* Copy to output buffer escaping special characters. */
  if (accm && ESCAPE_P(pppos->out_accm, c)) {
 80167fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d02a      	beq.n	8016858 <pppos_output_append+0xe8>
 8016802:	7abb      	ldrb	r3, [r7, #10]
 8016804:	08db      	lsrs	r3, r3, #3
 8016806:	b2db      	uxtb	r3, r3
 8016808:	461a      	mov	r2, r3
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	4413      	add	r3, r2
 801680e:	7b1b      	ldrb	r3, [r3, #12]
 8016810:	461a      	mov	r2, r3
 8016812:	7abb      	ldrb	r3, [r7, #10]
 8016814:	f003 0307 	and.w	r3, r3, #7
 8016818:	fa42 f303 	asr.w	r3, r2, r3
 801681c:	f003 0301 	and.w	r3, r3, #1
 8016820:	2b00      	cmp	r3, #0
 8016822:	d019      	beq.n	8016858 <pppos_output_append+0xe8>
    *((u8_t*)nb->payload + nb->len++) = PPP_ESCAPE;
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	685a      	ldr	r2, [r3, #4]
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	895b      	ldrh	r3, [r3, #10]
 801682c:	1c59      	adds	r1, r3, #1
 801682e:	b288      	uxth	r0, r1
 8016830:	6879      	ldr	r1, [r7, #4]
 8016832:	8148      	strh	r0, [r1, #10]
 8016834:	4413      	add	r3, r2
 8016836:	227d      	movs	r2, #125	; 0x7d
 8016838:	701a      	strb	r2, [r3, #0]
    *((u8_t*)nb->payload + nb->len++) = c ^ PPP_TRANS;
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	685a      	ldr	r2, [r3, #4]
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	895b      	ldrh	r3, [r3, #10]
 8016842:	1c59      	adds	r1, r3, #1
 8016844:	b288      	uxth	r0, r1
 8016846:	6879      	ldr	r1, [r7, #4]
 8016848:	8148      	strh	r0, [r1, #10]
 801684a:	4413      	add	r3, r2
 801684c:	7aba      	ldrb	r2, [r7, #10]
 801684e:	f082 0220 	eor.w	r2, r2, #32
 8016852:	b2d2      	uxtb	r2, r2
 8016854:	701a      	strb	r2, [r3, #0]
 8016856:	e00a      	b.n	801686e <pppos_output_append+0xfe>
  } else {
    *((u8_t*)nb->payload + nb->len++) = c;
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	685a      	ldr	r2, [r3, #4]
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	895b      	ldrh	r3, [r3, #10]
 8016860:	1c59      	adds	r1, r3, #1
 8016862:	b288      	uxth	r0, r1
 8016864:	6879      	ldr	r1, [r7, #4]
 8016866:	8148      	strh	r0, [r1, #10]
 8016868:	4413      	add	r3, r2
 801686a:	7aba      	ldrb	r2, [r7, #10]
 801686c:	701a      	strb	r2, [r3, #0]
  }

  return ERR_OK;
 801686e:	2300      	movs	r3, #0
}
 8016870:	4618      	mov	r0, r3
 8016872:	371c      	adds	r7, #28
 8016874:	46bd      	mov	sp, r7
 8016876:	bd90      	pop	{r4, r7, pc}
 8016878:	0801dd28 	.word	0x0801dd28

0801687c <pppos_output_last>:

static err_t
pppos_output_last(pppos_pcb *pppos, err_t err, struct pbuf *nb, u16_t *fcs)
{
 801687c:	b590      	push	{r4, r7, lr}
 801687e:	b089      	sub	sp, #36	; 0x24
 8016880:	af02      	add	r7, sp, #8
 8016882:	60f8      	str	r0, [r7, #12]
 8016884:	607a      	str	r2, [r7, #4]
 8016886:	603b      	str	r3, [r7, #0]
 8016888:	460b      	mov	r3, r1
 801688a:	72fb      	strb	r3, [r7, #11]
  ppp_pcb *ppp = pppos->ppp;
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	617b      	str	r3, [r7, #20]

  /* Add FCS and trailing flag. */
  err = pppos_output_append(pppos, err,  nb, ~(*fcs) & 0xFF, 1, NULL);
 8016892:	683b      	ldr	r3, [r7, #0]
 8016894:	881b      	ldrh	r3, [r3, #0]
 8016896:	b2db      	uxtb	r3, r3
 8016898:	43db      	mvns	r3, r3
 801689a:	b2da      	uxtb	r2, r3
 801689c:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80168a0:	2300      	movs	r3, #0
 80168a2:	9301      	str	r3, [sp, #4]
 80168a4:	2301      	movs	r3, #1
 80168a6:	9300      	str	r3, [sp, #0]
 80168a8:	4613      	mov	r3, r2
 80168aa:	687a      	ldr	r2, [r7, #4]
 80168ac:	68f8      	ldr	r0, [r7, #12]
 80168ae:	f7ff ff5f 	bl	8016770 <pppos_output_append>
 80168b2:	4603      	mov	r3, r0
 80168b4:	72fb      	strb	r3, [r7, #11]
  err = pppos_output_append(pppos, err,  nb, (~(*fcs) >> 8) & 0xFF, 1, NULL);
 80168b6:	683b      	ldr	r3, [r7, #0]
 80168b8:	881b      	ldrh	r3, [r3, #0]
 80168ba:	43db      	mvns	r3, r3
 80168bc:	121b      	asrs	r3, r3, #8
 80168be:	b2da      	uxtb	r2, r3
 80168c0:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80168c4:	2300      	movs	r3, #0
 80168c6:	9301      	str	r3, [sp, #4]
 80168c8:	2301      	movs	r3, #1
 80168ca:	9300      	str	r3, [sp, #0]
 80168cc:	4613      	mov	r3, r2
 80168ce:	687a      	ldr	r2, [r7, #4]
 80168d0:	68f8      	ldr	r0, [r7, #12]
 80168d2:	f7ff ff4d 	bl	8016770 <pppos_output_append>
 80168d6:	4603      	mov	r3, r0
 80168d8:	72fb      	strb	r3, [r7, #11]
  err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 80168da:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80168de:	2300      	movs	r3, #0
 80168e0:	9301      	str	r3, [sp, #4]
 80168e2:	2300      	movs	r3, #0
 80168e4:	9300      	str	r3, [sp, #0]
 80168e6:	237e      	movs	r3, #126	; 0x7e
 80168e8:	687a      	ldr	r2, [r7, #4]
 80168ea:	68f8      	ldr	r0, [r7, #12]
 80168ec:	f7ff ff40 	bl	8016770 <pppos_output_append>
 80168f0:	4603      	mov	r3, r0
 80168f2:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK) {
 80168f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d122      	bne.n	8016942 <pppos_output_last+0xc6>
    goto failed;
  }

  /* Send remaining buffer if not empty */
  if (nb->len > 0) {
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	895b      	ldrh	r3, [r3, #10]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d014      	beq.n	801692e <pppos_output_last+0xb2>
    u32_t l = pppos->output_cb(ppp, nb->payload, nb->len, ppp->ctx_cb);
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	685c      	ldr	r4, [r3, #4]
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	6859      	ldr	r1, [r3, #4]
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	895b      	ldrh	r3, [r3, #10]
 8016910:	461a      	mov	r2, r3
 8016912:	697b      	ldr	r3, [r7, #20]
 8016914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016916:	6978      	ldr	r0, [r7, #20]
 8016918:	47a0      	blx	r4
 801691a:	6138      	str	r0, [r7, #16]
    if (l != nb->len) {
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	895b      	ldrh	r3, [r3, #10]
 8016920:	461a      	mov	r2, r3
 8016922:	693b      	ldr	r3, [r7, #16]
 8016924:	429a      	cmp	r2, r3
 8016926:	d002      	beq.n	801692e <pppos_output_last+0xb2>
      err = ERR_IF;
 8016928:	23f4      	movs	r3, #244	; 0xf4
 801692a:	72fb      	strb	r3, [r7, #11]
      goto failed;
 801692c:	e00a      	b.n	8016944 <pppos_output_last+0xc8>
    }
  }

  pppos->last_xmit = sys_now();
 801692e:	f7ea fceb 	bl	8001308 <sys_now>
 8016932:	4602      	mov	r2, r0
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	609a      	str	r2, [r3, #8]
  MIB2_STATS_NETIF_ADD(ppp->netif, ifoutoctets, nb->tot_len);
  MIB2_STATS_NETIF_INC(ppp->netif, ifoutucastpkts);
  LINK_STATS_INC(link.xmit);
  pbuf_free(nb);
 8016938:	6878      	ldr	r0, [r7, #4]
 801693a:	f7ef fa6b 	bl	8005e14 <pbuf_free>
  return ERR_OK;
 801693e:	2300      	movs	r3, #0
 8016940:	e008      	b.n	8016954 <pppos_output_last+0xd8>
    goto failed;
 8016942:	bf00      	nop

failed:
  pppos->last_xmit = 0; /* prepend PPP_FLAG to next packet */
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	2200      	movs	r2, #0
 8016948:	609a      	str	r2, [r3, #8]
  LINK_STATS_INC(link.err);
  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
  pbuf_free(nb);
 801694a:	6878      	ldr	r0, [r7, #4]
 801694c:	f7ef fa62 	bl	8005e14 <pbuf_free>
  return err;
 8016950:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016954:	4618      	mov	r0, r3
 8016956:	371c      	adds	r7, #28
 8016958:	46bd      	mov	sp, r7
 801695a:	bd90      	pop	{r4, r7, pc}

0801695c <upap_init>:


/*
 * upap_init - Initialize a UPAP unit.
 */
static void upap_init(ppp_pcb *pcb) {
 801695c:	b480      	push	{r7}
 801695e:	b083      	sub	sp, #12
 8016960:	af00      	add	r7, sp, #0
 8016962:	6078      	str	r0, [r7, #4]
    pcb->upap.us_user = NULL;
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	2200      	movs	r2, #0
 8016968:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->upap.us_userlen = 0;
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	2200      	movs	r2, #0
 801696e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pcb->upap.us_passwd = NULL;
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	2200      	movs	r2, #0
 8016976:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->upap.us_passwdlen = 0;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	2200      	movs	r2, #0
 801697c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pcb->upap.us_clientstate = UPAPCS_INITIAL;
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	2200      	movs	r2, #0
 8016984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if PPP_SERVER
    pcb->upap.us_serverstate = UPAPSS_INITIAL;
#endif /* PPP_SERVER */
    pcb->upap.us_id = 0;
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	2200      	movs	r2, #0
 801698c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 8016990:	bf00      	nop
 8016992:	370c      	adds	r7, #12
 8016994:	46bd      	mov	sp, r7
 8016996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801699a:	4770      	bx	lr

0801699c <upap_authwithpeer>:
/*
 * upap_authwithpeer - Authenticate us with our peer (start client).
 *
 * Set new state and send authenticate's.
 */
void upap_authwithpeer(ppp_pcb *pcb, const char *user, const char *password) {
 801699c:	b580      	push	{r7, lr}
 801699e:	b084      	sub	sp, #16
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	60f8      	str	r0, [r7, #12]
 80169a4:	60b9      	str	r1, [r7, #8]
 80169a6:	607a      	str	r2, [r7, #4]

    if(!user || !password)
 80169a8:	68bb      	ldr	r3, [r7, #8]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d03f      	beq.n	8016a2e <upap_authwithpeer+0x92>
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d03c      	beq.n	8016a2e <upap_authwithpeer+0x92>
        return;

    /* Save the username and password we're given */
    pcb->upap.us_user = user;
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	68ba      	ldr	r2, [r7, #8]
 80169b8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->upap.us_userlen = (u8_t)LWIP_MIN(strlen(user), 0xff);
 80169ba:	68b8      	ldr	r0, [r7, #8]
 80169bc:	f7e9 fc12 	bl	80001e4 <strlen>
 80169c0:	4603      	mov	r3, r0
 80169c2:	2bfe      	cmp	r3, #254	; 0xfe
 80169c4:	d805      	bhi.n	80169d2 <upap_authwithpeer+0x36>
 80169c6:	68b8      	ldr	r0, [r7, #8]
 80169c8:	f7e9 fc0c 	bl	80001e4 <strlen>
 80169cc:	4603      	mov	r3, r0
 80169ce:	b2da      	uxtb	r2, r3
 80169d0:	e000      	b.n	80169d4 <upap_authwithpeer+0x38>
 80169d2:	22ff      	movs	r2, #255	; 0xff
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pcb->upap.us_passwd = password;
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	687a      	ldr	r2, [r7, #4]
 80169de:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->upap.us_passwdlen = (u8_t)LWIP_MIN(strlen(password), 0xff);
 80169e0:	6878      	ldr	r0, [r7, #4]
 80169e2:	f7e9 fbff 	bl	80001e4 <strlen>
 80169e6:	4603      	mov	r3, r0
 80169e8:	2bfe      	cmp	r3, #254	; 0xfe
 80169ea:	d805      	bhi.n	80169f8 <upap_authwithpeer+0x5c>
 80169ec:	6878      	ldr	r0, [r7, #4]
 80169ee:	f7e9 fbf9 	bl	80001e4 <strlen>
 80169f2:	4603      	mov	r3, r0
 80169f4:	b2da      	uxtb	r2, r3
 80169f6:	e000      	b.n	80169fa <upap_authwithpeer+0x5e>
 80169f8:	22ff      	movs	r2, #255	; 0xff
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pcb->upap.us_transmits = 0;
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	2200      	movs	r2, #0
 8016a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    /* Lower layer up yet? */
    if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d004      	beq.n	8016a1c <upap_authwithpeer+0x80>
	pcb->upap.us_clientstate == UPAPCS_PENDING) {
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
 8016a18:	2b02      	cmp	r3, #2
 8016a1a:	d104      	bne.n	8016a26 <upap_authwithpeer+0x8a>
	pcb->upap.us_clientstate = UPAPCS_PENDING;
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	2202      	movs	r2, #2
 8016a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	return;
 8016a24:	e004      	b.n	8016a30 <upap_authwithpeer+0x94>
    }

    upap_sauthreq(pcb);		/* Start protocol */
 8016a26:	68f8      	ldr	r0, [r7, #12]
 8016a28:	f000 f94e 	bl	8016cc8 <upap_sauthreq>
 8016a2c:	e000      	b.n	8016a30 <upap_authwithpeer+0x94>
        return;
 8016a2e:	bf00      	nop
}
 8016a30:	3710      	adds	r7, #16
 8016a32:	46bd      	mov	sp, r7
 8016a34:	bd80      	pop	{r7, pc}
	...

08016a38 <upap_timeout>:
#endif /* PPP_SERVER */

/*
 * upap_timeout - Retransmission timer for sending auth-reqs expired.
 */
static void upap_timeout(void *arg) {
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b084      	sub	sp, #16
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = (ppp_pcb*)arg;
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	60fb      	str	r3, [r7, #12]

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ)
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016a4a:	2b03      	cmp	r3, #3
 8016a4c:	d117      	bne.n	8016a7e <upap_timeout+0x46>
	return;

    if (pcb->upap.us_transmits >= pcb->settings.pap_max_transmits) {
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	7b5b      	ldrb	r3, [r3, #13]
 8016a58:	429a      	cmp	r2, r3
 8016a5a:	d30c      	bcc.n	8016a76 <upap_timeout+0x3e>
	/* give up in disgust */
	ppp_error(("No response to PAP authenticate-requests"));
 8016a5c:	480a      	ldr	r0, [pc, #40]	; (8016a88 <upap_timeout+0x50>)
 8016a5e:	f000 fe65 	bl	801772c <ppp_error_impl>
	pcb->upap.us_clientstate = UPAPCS_BADAUTH;
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	2205      	movs	r2, #5
 8016a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	auth_withpeer_fail(pcb, PPP_PAP);
 8016a6a:	f24c 0123 	movw	r1, #49187	; 0xc023
 8016a6e:	68f8      	ldr	r0, [r7, #12]
 8016a70:	f7f7 fe7e 	bl	800e770 <auth_withpeer_fail>
	return;
 8016a74:	e004      	b.n	8016a80 <upap_timeout+0x48>
    }

    upap_sauthreq(pcb);		/* Send Authenticate-Request */
 8016a76:	68f8      	ldr	r0, [r7, #12]
 8016a78:	f000 f926 	bl	8016cc8 <upap_sauthreq>
 8016a7c:	e000      	b.n	8016a80 <upap_timeout+0x48>
	return;
 8016a7e:	bf00      	nop
}
 8016a80:	3710      	adds	r7, #16
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bd80      	pop	{r7, pc}
 8016a86:	bf00      	nop
 8016a88:	0801d840 	.word	0x0801d840

08016a8c <upap_lowerup>:
/*
 * upap_lowerup - The lower layer is up.
 *
 * Start authenticating if pending.
 */
static void upap_lowerup(ppp_pcb *pcb) {
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	b082      	sub	sp, #8
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_INITIAL)
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d104      	bne.n	8016aa8 <upap_lowerup+0x1c>
	pcb->upap.us_clientstate = UPAPCS_CLOSED;
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	2201      	movs	r2, #1
 8016aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	pcb->upap.us_serverstate = UPAPSS_LISTEN;
	if (pcb->settings.pap_req_timeout > 0)
	    TIMEOUT(upap_reqtimeout, pcb, pcb->settings.pap_req_timeout);
    }
#endif /* PPP_SERVER */
}
 8016aa6:	e007      	b.n	8016ab8 <upap_lowerup+0x2c>
    else if (pcb->upap.us_clientstate == UPAPCS_PENDING) {
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016aae:	2b02      	cmp	r3, #2
 8016ab0:	d102      	bne.n	8016ab8 <upap_lowerup+0x2c>
	upap_sauthreq(pcb);	/* send an auth-request */
 8016ab2:	6878      	ldr	r0, [r7, #4]
 8016ab4:	f000 f908 	bl	8016cc8 <upap_sauthreq>
}
 8016ab8:	bf00      	nop
 8016aba:	3708      	adds	r7, #8
 8016abc:	46bd      	mov	sp, r7
 8016abe:	bd80      	pop	{r7, pc}

08016ac0 <upap_lowerdown>:
/*
 * upap_lowerdown - The lower layer is down.
 *
 * Cancel all timeouts.
 */
static void upap_lowerdown(ppp_pcb *pcb) {
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b082      	sub	sp, #8
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ)	/* Timeout pending? */
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016ace:	2b03      	cmp	r3, #3
 8016ad0:	d103      	bne.n	8016ada <upap_lowerdown+0x1a>
	UNTIMEOUT(upap_timeout, pcb);		/* Cancel timeout */
 8016ad2:	6879      	ldr	r1, [r7, #4]
 8016ad4:	4805      	ldr	r0, [pc, #20]	; (8016aec <upap_lowerdown+0x2c>)
 8016ad6:	f7f6 ffab 	bl	800da30 <sys_untimeout>
#if PPP_SERVER
    if (pcb->upap.us_serverstate == UPAPSS_LISTEN && pcb->settings.pap_req_timeout > 0)
	UNTIMEOUT(upap_reqtimeout, pcb);
#endif /* PPP_SERVER */

    pcb->upap.us_clientstate = UPAPCS_INITIAL;
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	2200      	movs	r2, #0
 8016ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if PPP_SERVER
    pcb->upap.us_serverstate = UPAPSS_INITIAL;
#endif /* PPP_SERVER */
}
 8016ae2:	bf00      	nop
 8016ae4:	3708      	adds	r7, #8
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	bd80      	pop	{r7, pc}
 8016aea:	bf00      	nop
 8016aec:	08016a39 	.word	0x08016a39

08016af0 <upap_protrej>:
/*
 * upap_protrej - Peer doesn't speak this protocol.
 *
 * This shouldn't happen.  In any case, pretend lower layer went down.
 */
static void upap_protrej(ppp_pcb *pcb) {
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b082      	sub	sp, #8
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ) {
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016afe:	2b03      	cmp	r3, #3
 8016b00:	d107      	bne.n	8016b12 <upap_protrej+0x22>
	ppp_error(("PAP authentication failed due to protocol-reject"));
 8016b02:	4807      	ldr	r0, [pc, #28]	; (8016b20 <upap_protrej+0x30>)
 8016b04:	f000 fe12 	bl	801772c <ppp_error_impl>
	auth_withpeer_fail(pcb, PPP_PAP);
 8016b08:	f24c 0123 	movw	r1, #49187	; 0xc023
 8016b0c:	6878      	ldr	r0, [r7, #4]
 8016b0e:	f7f7 fe2f 	bl	800e770 <auth_withpeer_fail>
    if (pcb->upap.us_serverstate == UPAPSS_LISTEN) {
	ppp_error(("PAP authentication of peer failed (protocol-reject)"));
	auth_peer_fail(pcb, PPP_PAP);
    }
#endif /* PPP_SERVER */
    upap_lowerdown(pcb);
 8016b12:	6878      	ldr	r0, [r7, #4]
 8016b14:	f7ff ffd4 	bl	8016ac0 <upap_lowerdown>
}
 8016b18:	bf00      	nop
 8016b1a:	3708      	adds	r7, #8
 8016b1c:	46bd      	mov	sp, r7
 8016b1e:	bd80      	pop	{r7, pc}
 8016b20:	0801d86c 	.word	0x0801d86c

08016b24 <upap_input>:


/*
 * upap_input - Input UPAP packet.
 */
static void upap_input(ppp_pcb *pcb, u_char *inpacket, int l) {
 8016b24:	b580      	push	{r7, lr}
 8016b26:	b088      	sub	sp, #32
 8016b28:	af00      	add	r7, sp, #0
 8016b2a:	60f8      	str	r0, [r7, #12]
 8016b2c:	60b9      	str	r1, [r7, #8]
 8016b2e:	607a      	str	r2, [r7, #4]

    /*
     * Parse header (code, id and length).
     * If packet too short, drop it.
     */
    inp = inpacket;
 8016b30:	68bb      	ldr	r3, [r7, #8]
 8016b32:	61fb      	str	r3, [r7, #28]
    if (l < UPAP_HEADERLEN) {
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	2b03      	cmp	r3, #3
 8016b38:	dd37      	ble.n	8016baa <upap_input+0x86>
	UPAPDEBUG(("pap_input: rcvd short header."));
	return;
    }
    GETCHAR(code, inp);
 8016b3a:	69fb      	ldr	r3, [r7, #28]
 8016b3c:	1c5a      	adds	r2, r3, #1
 8016b3e:	61fa      	str	r2, [r7, #28]
 8016b40:	781b      	ldrb	r3, [r3, #0]
 8016b42:	76fb      	strb	r3, [r7, #27]
    GETCHAR(id, inp);
 8016b44:	69fb      	ldr	r3, [r7, #28]
 8016b46:	1c5a      	adds	r2, r3, #1
 8016b48:	61fa      	str	r2, [r7, #28]
 8016b4a:	781b      	ldrb	r3, [r3, #0]
 8016b4c:	76bb      	strb	r3, [r7, #26]
    GETSHORT(len, inp);
 8016b4e:	69fb      	ldr	r3, [r7, #28]
 8016b50:	1c5a      	adds	r2, r3, #1
 8016b52:	61fa      	str	r2, [r7, #28]
 8016b54:	781b      	ldrb	r3, [r3, #0]
 8016b56:	021b      	lsls	r3, r3, #8
 8016b58:	617b      	str	r3, [r7, #20]
 8016b5a:	69fb      	ldr	r3, [r7, #28]
 8016b5c:	1c5a      	adds	r2, r3, #1
 8016b5e:	61fa      	str	r2, [r7, #28]
 8016b60:	781b      	ldrb	r3, [r3, #0]
 8016b62:	461a      	mov	r2, r3
 8016b64:	697b      	ldr	r3, [r7, #20]
 8016b66:	4313      	orrs	r3, r2
 8016b68:	617b      	str	r3, [r7, #20]
    if (len < UPAP_HEADERLEN) {
 8016b6a:	697b      	ldr	r3, [r7, #20]
 8016b6c:	2b03      	cmp	r3, #3
 8016b6e:	dd1e      	ble.n	8016bae <upap_input+0x8a>
	UPAPDEBUG(("pap_input: rcvd illegal length."));
	return;
    }
    if (len > l) {
 8016b70:	697a      	ldr	r2, [r7, #20]
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	429a      	cmp	r2, r3
 8016b76:	dc1c      	bgt.n	8016bb2 <upap_input+0x8e>
	UPAPDEBUG(("pap_input: rcvd short packet."));
	return;
    }
    len -= UPAP_HEADERLEN;
 8016b78:	697b      	ldr	r3, [r7, #20]
 8016b7a:	3b04      	subs	r3, #4
 8016b7c:	617b      	str	r3, [r7, #20]

    /*
     * Action depends on code.
     */
    switch (code) {
 8016b7e:	7efb      	ldrb	r3, [r7, #27]
 8016b80:	2b02      	cmp	r3, #2
 8016b82:	d004      	beq.n	8016b8e <upap_input+0x6a>
 8016b84:	2b03      	cmp	r3, #3
 8016b86:	d009      	beq.n	8016b9c <upap_input+0x78>
 8016b88:	2b01      	cmp	r3, #1
 8016b8a:	d014      	beq.n	8016bb6 <upap_input+0x92>
    case UPAP_AUTHNAK:
	upap_rauthnak(pcb, inp, id, len);
	break;

    default:				/* XXX Need code reject */
	break;
 8016b8c:	e014      	b.n	8016bb8 <upap_input+0x94>
	upap_rauthack(pcb, inp, id, len);
 8016b8e:	7eba      	ldrb	r2, [r7, #26]
 8016b90:	697b      	ldr	r3, [r7, #20]
 8016b92:	69f9      	ldr	r1, [r7, #28]
 8016b94:	68f8      	ldr	r0, [r7, #12]
 8016b96:	f000 f813 	bl	8016bc0 <upap_rauthack>
	break;
 8016b9a:	e00d      	b.n	8016bb8 <upap_input+0x94>
	upap_rauthnak(pcb, inp, id, len);
 8016b9c:	7eba      	ldrb	r2, [r7, #26]
 8016b9e:	697b      	ldr	r3, [r7, #20]
 8016ba0:	69f9      	ldr	r1, [r7, #28]
 8016ba2:	68f8      	ldr	r0, [r7, #12]
 8016ba4:	f000 f84c 	bl	8016c40 <upap_rauthnak>
	break;
 8016ba8:	e006      	b.n	8016bb8 <upap_input+0x94>
	return;
 8016baa:	bf00      	nop
 8016bac:	e004      	b.n	8016bb8 <upap_input+0x94>
	return;
 8016bae:	bf00      	nop
 8016bb0:	e002      	b.n	8016bb8 <upap_input+0x94>
	return;
 8016bb2:	bf00      	nop
 8016bb4:	e000      	b.n	8016bb8 <upap_input+0x94>
	break;
 8016bb6:	bf00      	nop
    }
}
 8016bb8:	3720      	adds	r7, #32
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	bd80      	pop	{r7, pc}
	...

08016bc0 <upap_rauthack>:
#endif /* PPP_SERVER */

/*
 * upap_rauthack - Receive Authenticate-Ack.
 */
static void upap_rauthack(ppp_pcb *pcb, u_char *inp, int id, int len) {
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b086      	sub	sp, #24
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	60f8      	str	r0, [r7, #12]
 8016bc8:	60b9      	str	r1, [r7, #8]
 8016bca:	607a      	str	r2, [r7, #4]
 8016bcc:	603b      	str	r3, [r7, #0]
    u_char msglen;
    char *msg;
    LWIP_UNUSED_ARG(id);

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016bd4:	2b03      	cmp	r3, #3
 8016bd6:	d128      	bne.n	8016c2a <upap_rauthack+0x6a>
	return;

    /*
     * Parse message.
     */
    if (len < 1) {
 8016bd8:	683b      	ldr	r3, [r7, #0]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	dd16      	ble.n	8016c0c <upap_rauthack+0x4c>
	UPAPDEBUG(("pap_rauthack: ignoring missing msg-length."));
    } else {
	GETCHAR(msglen, inp);
 8016bde:	68bb      	ldr	r3, [r7, #8]
 8016be0:	1c5a      	adds	r2, r3, #1
 8016be2:	60ba      	str	r2, [r7, #8]
 8016be4:	781b      	ldrb	r3, [r3, #0]
 8016be6:	75fb      	strb	r3, [r7, #23]
	if (msglen > 0) {
 8016be8:	7dfb      	ldrb	r3, [r7, #23]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d00e      	beq.n	8016c0c <upap_rauthack+0x4c>
	    len -= sizeof (u_char);
 8016bee:	683b      	ldr	r3, [r7, #0]
 8016bf0:	3b01      	subs	r3, #1
 8016bf2:	603b      	str	r3, [r7, #0]
	    if (len < msglen) {
 8016bf4:	7dfa      	ldrb	r2, [r7, #23]
 8016bf6:	683b      	ldr	r3, [r7, #0]
 8016bf8:	429a      	cmp	r2, r3
 8016bfa:	dc18      	bgt.n	8016c2e <upap_rauthack+0x6e>
		UPAPDEBUG(("pap_rauthack: rcvd short packet."));
		return;
	    }
	    msg = (char *) inp;
 8016bfc:	68bb      	ldr	r3, [r7, #8]
 8016bfe:	613b      	str	r3, [r7, #16]
	    PRINTMSG(msg, msglen);
 8016c00:	7dfb      	ldrb	r3, [r7, #23]
 8016c02:	693a      	ldr	r2, [r7, #16]
 8016c04:	4619      	mov	r1, r3
 8016c06:	480c      	ldr	r0, [pc, #48]	; (8016c38 <upap_rauthack+0x78>)
 8016c08:	f000 fdc9 	bl	801779e <ppp_info_impl>
	}
    }

    UNTIMEOUT(upap_timeout, pcb);
 8016c0c:	68f9      	ldr	r1, [r7, #12]
 8016c0e:	480b      	ldr	r0, [pc, #44]	; (8016c3c <upap_rauthack+0x7c>)
 8016c10:	f7f6 ff0e 	bl	800da30 <sys_untimeout>
    pcb->upap.us_clientstate = UPAPCS_OPEN;
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	2204      	movs	r2, #4
 8016c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    auth_withpeer_success(pcb, PPP_PAP, 0);
 8016c1c:	2200      	movs	r2, #0
 8016c1e:	f24c 0123 	movw	r1, #49187	; 0xc023
 8016c22:	68f8      	ldr	r0, [r7, #12]
 8016c24:	f7f7 fdb8 	bl	800e798 <auth_withpeer_success>
 8016c28:	e002      	b.n	8016c30 <upap_rauthack+0x70>
	return;
 8016c2a:	bf00      	nop
 8016c2c:	e000      	b.n	8016c30 <upap_rauthack+0x70>
		return;
 8016c2e:	bf00      	nop
}
 8016c30:	3718      	adds	r7, #24
 8016c32:	46bd      	mov	sp, r7
 8016c34:	bd80      	pop	{r7, pc}
 8016c36:	bf00      	nop
 8016c38:	0801d8a0 	.word	0x0801d8a0
 8016c3c:	08016a39 	.word	0x08016a39

08016c40 <upap_rauthnak>:


/*
 * upap_rauthnak - Receive Authenticate-Nak.
 */
static void upap_rauthnak(ppp_pcb *pcb, u_char *inp, int id, int len) {
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b086      	sub	sp, #24
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	60f8      	str	r0, [r7, #12]
 8016c48:	60b9      	str	r1, [r7, #8]
 8016c4a:	607a      	str	r2, [r7, #4]
 8016c4c:	603b      	str	r3, [r7, #0]
    u_char msglen;
    char *msg;
    LWIP_UNUSED_ARG(id);

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016c54:	2b03      	cmp	r3, #3
 8016c56:	d12a      	bne.n	8016cae <upap_rauthnak+0x6e>
	return;

    /*
     * Parse message.
     */
    if (len < 1) {
 8016c58:	683b      	ldr	r3, [r7, #0]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	dd16      	ble.n	8016c8c <upap_rauthnak+0x4c>
	UPAPDEBUG(("pap_rauthnak: ignoring missing msg-length."));
    } else {
	GETCHAR(msglen, inp);
 8016c5e:	68bb      	ldr	r3, [r7, #8]
 8016c60:	1c5a      	adds	r2, r3, #1
 8016c62:	60ba      	str	r2, [r7, #8]
 8016c64:	781b      	ldrb	r3, [r3, #0]
 8016c66:	75fb      	strb	r3, [r7, #23]
	if (msglen > 0) {
 8016c68:	7dfb      	ldrb	r3, [r7, #23]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d00e      	beq.n	8016c8c <upap_rauthnak+0x4c>
	    len -= sizeof (u_char);
 8016c6e:	683b      	ldr	r3, [r7, #0]
 8016c70:	3b01      	subs	r3, #1
 8016c72:	603b      	str	r3, [r7, #0]
	    if (len < msglen) {
 8016c74:	7dfa      	ldrb	r2, [r7, #23]
 8016c76:	683b      	ldr	r3, [r7, #0]
 8016c78:	429a      	cmp	r2, r3
 8016c7a:	dc1a      	bgt.n	8016cb2 <upap_rauthnak+0x72>
		UPAPDEBUG(("pap_rauthnak: rcvd short packet."));
		return;
	    }
	    msg = (char *) inp;
 8016c7c:	68bb      	ldr	r3, [r7, #8]
 8016c7e:	613b      	str	r3, [r7, #16]
	    PRINTMSG(msg, msglen);
 8016c80:	7dfb      	ldrb	r3, [r7, #23]
 8016c82:	693a      	ldr	r2, [r7, #16]
 8016c84:	4619      	mov	r1, r3
 8016c86:	480d      	ldr	r0, [pc, #52]	; (8016cbc <upap_rauthnak+0x7c>)
 8016c88:	f000 fd89 	bl	801779e <ppp_info_impl>
	}
    }

    UNTIMEOUT(upap_timeout, pcb);
 8016c8c:	68f9      	ldr	r1, [r7, #12]
 8016c8e:	480c      	ldr	r0, [pc, #48]	; (8016cc0 <upap_rauthnak+0x80>)
 8016c90:	f7f6 fece 	bl	800da30 <sys_untimeout>
    pcb->upap.us_clientstate = UPAPCS_BADAUTH;
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	2205      	movs	r2, #5
 8016c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    ppp_error(("PAP authentication failed"));
 8016c9c:	4809      	ldr	r0, [pc, #36]	; (8016cc4 <upap_rauthnak+0x84>)
 8016c9e:	f000 fd45 	bl	801772c <ppp_error_impl>
    auth_withpeer_fail(pcb, PPP_PAP);
 8016ca2:	f24c 0123 	movw	r1, #49187	; 0xc023
 8016ca6:	68f8      	ldr	r0, [r7, #12]
 8016ca8:	f7f7 fd62 	bl	800e770 <auth_withpeer_fail>
 8016cac:	e002      	b.n	8016cb4 <upap_rauthnak+0x74>
	return;
 8016cae:	bf00      	nop
 8016cb0:	e000      	b.n	8016cb4 <upap_rauthnak+0x74>
		return;
 8016cb2:	bf00      	nop
}
 8016cb4:	3718      	adds	r7, #24
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}
 8016cba:	bf00      	nop
 8016cbc:	0801d8a0 	.word	0x0801d8a0
 8016cc0:	08016a39 	.word	0x08016a39
 8016cc4:	0801d8b8 	.word	0x0801d8b8

08016cc8 <upap_sauthreq>:


/*
 * upap_sauthreq - Send an Authenticate-Request.
 */
static void upap_sauthreq(ppp_pcb *pcb) {
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b086      	sub	sp, #24
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
	pcb->upap.us_userlen + pcb->upap.us_passwdlen;
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016cd6:	461a      	mov	r2, r3
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016cde:	4413      	add	r3, r2
 8016ce0:	3306      	adds	r3, #6
    outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
 8016ce2:	617b      	str	r3, [r7, #20]
    p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN +outlen), PBUF_RAM);
 8016ce4:	697b      	ldr	r3, [r7, #20]
 8016ce6:	b29b      	uxth	r3, r3
 8016ce8:	3304      	adds	r3, #4
 8016cea:	b29b      	uxth	r3, r3
 8016cec:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016cf0:	4619      	mov	r1, r3
 8016cf2:	2000      	movs	r0, #0
 8016cf4:	f7ee fdea 	bl	80058cc <pbuf_alloc>
 8016cf8:	6138      	str	r0, [r7, #16]
    if(NULL == p)
 8016cfa:	693b      	ldr	r3, [r7, #16]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	f000 808a 	beq.w	8016e16 <upap_sauthreq+0x14e>
        return;
    if(p->tot_len != p->len) {
 8016d02:	693b      	ldr	r3, [r7, #16]
 8016d04:	891a      	ldrh	r2, [r3, #8]
 8016d06:	693b      	ldr	r3, [r7, #16]
 8016d08:	895b      	ldrh	r3, [r3, #10]
 8016d0a:	429a      	cmp	r2, r3
 8016d0c:	d003      	beq.n	8016d16 <upap_sauthreq+0x4e>
        pbuf_free(p);
 8016d0e:	6938      	ldr	r0, [r7, #16]
 8016d10:	f7ef f880 	bl	8005e14 <pbuf_free>
        return;
 8016d14:	e080      	b.n	8016e18 <upap_sauthreq+0x150>
    }

    outp = (u_char*)p->payload;
 8016d16:	693b      	ldr	r3, [r7, #16]
 8016d18:	685b      	ldr	r3, [r3, #4]
 8016d1a:	60fb      	str	r3, [r7, #12]
    MAKEHEADER(outp, PPP_PAP);
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	1c5a      	adds	r2, r3, #1
 8016d20:	60fa      	str	r2, [r7, #12]
 8016d22:	22ff      	movs	r2, #255	; 0xff
 8016d24:	701a      	strb	r2, [r3, #0]
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	1c5a      	adds	r2, r3, #1
 8016d2a:	60fa      	str	r2, [r7, #12]
 8016d2c:	2203      	movs	r2, #3
 8016d2e:	701a      	strb	r2, [r3, #0]
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	1c5a      	adds	r2, r3, #1
 8016d34:	60fa      	str	r2, [r7, #12]
 8016d36:	22c0      	movs	r2, #192	; 0xc0
 8016d38:	701a      	strb	r2, [r3, #0]
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	1c5a      	adds	r2, r3, #1
 8016d3e:	60fa      	str	r2, [r7, #12]
 8016d40:	2223      	movs	r2, #35	; 0x23
 8016d42:	701a      	strb	r2, [r3, #0]

    PUTCHAR(UPAP_AUTHREQ, outp);
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	1c5a      	adds	r2, r3, #1
 8016d48:	60fa      	str	r2, [r7, #12]
 8016d4a:	2201      	movs	r2, #1
 8016d4c:	701a      	strb	r2, [r3, #0]
    PUTCHAR(++pcb->upap.us_id, outp);
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	1c5a      	adds	r2, r3, #1
 8016d52:	60fa      	str	r2, [r7, #12]
 8016d54:	687a      	ldr	r2, [r7, #4]
 8016d56:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 8016d5a:	3201      	adds	r2, #1
 8016d5c:	b2d1      	uxtb	r1, r2
 8016d5e:	687a      	ldr	r2, [r7, #4]
 8016d60:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
 8016d64:	687a      	ldr	r2, [r7, #4]
 8016d66:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 8016d6a:	701a      	strb	r2, [r3, #0]
    PUTSHORT(outlen, outp);
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	1c5a      	adds	r2, r3, #1
 8016d70:	60fa      	str	r2, [r7, #12]
 8016d72:	697a      	ldr	r2, [r7, #20]
 8016d74:	1212      	asrs	r2, r2, #8
 8016d76:	b2d2      	uxtb	r2, r2
 8016d78:	701a      	strb	r2, [r3, #0]
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	1c5a      	adds	r2, r3, #1
 8016d7e:	60fa      	str	r2, [r7, #12]
 8016d80:	697a      	ldr	r2, [r7, #20]
 8016d82:	b2d2      	uxtb	r2, r2
 8016d84:	701a      	strb	r2, [r3, #0]
    PUTCHAR(pcb->upap.us_userlen, outp);
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	1c5a      	adds	r2, r3, #1
 8016d8a:	60fa      	str	r2, [r7, #12]
 8016d8c:	687a      	ldr	r2, [r7, #4]
 8016d8e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8016d92:	701a      	strb	r2, [r3, #0]
    MEMCPY(outp, pcb->upap.us_user, pcb->upap.us_userlen);
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016d9e:	461a      	mov	r2, r3
 8016da0:	68f8      	ldr	r0, [r7, #12]
 8016da2:	f001 fa69 	bl	8018278 <memcpy>
    INCPTR(pcb->upap.us_userlen, outp);
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016dac:	461a      	mov	r2, r3
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	4413      	add	r3, r2
 8016db2:	60fb      	str	r3, [r7, #12]
    PUTCHAR(pcb->upap.us_passwdlen, outp);
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	1c5a      	adds	r2, r3, #1
 8016db8:	60fa      	str	r2, [r7, #12]
 8016dba:	687a      	ldr	r2, [r7, #4]
 8016dbc:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8016dc0:	701a      	strb	r2, [r3, #0]
    MEMCPY(outp, pcb->upap.us_passwd, pcb->upap.us_passwdlen);
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016dcc:	461a      	mov	r2, r3
 8016dce:	68f8      	ldr	r0, [r7, #12]
 8016dd0:	f001 fa52 	bl	8018278 <memcpy>

    ppp_write(pcb, p);
 8016dd4:	6939      	ldr	r1, [r7, #16]
 8016dd6:	6878      	ldr	r0, [r7, #4]
 8016dd8:	f7fe fe1c 	bl	8015a14 <ppp_write>

    TIMEOUT(upap_timeout, pcb, pcb->settings.pap_timeout_time);
 8016ddc:	6879      	ldr	r1, [r7, #4]
 8016dde:	4810      	ldr	r0, [pc, #64]	; (8016e20 <upap_sauthreq+0x158>)
 8016de0:	f7f6 fe26 	bl	800da30 <sys_untimeout>
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	7b1b      	ldrb	r3, [r3, #12]
 8016de8:	461a      	mov	r2, r3
 8016dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016dee:	fb03 f302 	mul.w	r3, r3, r2
 8016df2:	687a      	ldr	r2, [r7, #4]
 8016df4:	490a      	ldr	r1, [pc, #40]	; (8016e20 <upap_sauthreq+0x158>)
 8016df6:	4618      	mov	r0, r3
 8016df8:	f7f6 fdee 	bl	800d9d8 <sys_timeout>
    ++pcb->upap.us_transmits;
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016e02:	3301      	adds	r3, #1
 8016e04:	b2da      	uxtb	r2, r3
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    pcb->upap.us_clientstate = UPAPCS_AUTHREQ;
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	2203      	movs	r2, #3
 8016e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8016e14:	e000      	b.n	8016e18 <upap_sauthreq+0x150>
        return;
 8016e16:	bf00      	nop
}
 8016e18:	3718      	adds	r7, #24
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	bd80      	pop	{r7, pc}
 8016e1e:	bf00      	nop
 8016e20:	08016a39 	.word	0x08016a39

08016e24 <ppp_slprintf>:
 * %m (error message), %v (visible string),
 * %q (quoted string), %t (current time) and %I (IP address) formats.
 * Doesn't do floating-point formats.
 * Returns the number of chars put into buf.
 */
int ppp_slprintf(char *buf, int buflen, const char *fmt, ...) {
 8016e24:	b40c      	push	{r2, r3}
 8016e26:	b580      	push	{r7, lr}
 8016e28:	b084      	sub	sp, #16
 8016e2a:	af00      	add	r7, sp, #0
 8016e2c:	6078      	str	r0, [r7, #4]
 8016e2e:	6039      	str	r1, [r7, #0]
    va_list args;
    int n;

    va_start(args, fmt);
 8016e30:	f107 031c 	add.w	r3, r7, #28
 8016e34:	60bb      	str	r3, [r7, #8]
    n = ppp_vslprintf(buf, buflen, fmt, args);
 8016e36:	68bb      	ldr	r3, [r7, #8]
 8016e38:	69ba      	ldr	r2, [r7, #24]
 8016e3a:	6839      	ldr	r1, [r7, #0]
 8016e3c:	6878      	ldr	r0, [r7, #4]
 8016e3e:	f000 f809 	bl	8016e54 <ppp_vslprintf>
 8016e42:	60f8      	str	r0, [r7, #12]
    va_end(args);
    return n;
 8016e44:	68fb      	ldr	r3, [r7, #12]
}
 8016e46:	4618      	mov	r0, r3
 8016e48:	3710      	adds	r7, #16
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016e50:	b002      	add	sp, #8
 8016e52:	4770      	bx	lr

08016e54 <ppp_vslprintf>:
/*
 * ppp_vslprintf - like ppp_slprintf, takes a va_list instead of a list of args.
 */
#define OUTCHAR(c)	(buflen > 0? (--buflen, *buf++ = (c)): 0)

int ppp_vslprintf(char *buf, int buflen, const char *fmt, va_list args) {
 8016e54:	b590      	push	{r4, r7, lr}
 8016e56:	b0a1      	sub	sp, #132	; 0x84
 8016e58:	af04      	add	r7, sp, #16
 8016e5a:	60f8      	str	r0, [r7, #12]
 8016e5c:	60b9      	str	r1, [r7, #8]
 8016e5e:	607a      	str	r2, [r7, #4]
 8016e60:	603b      	str	r3, [r7, #0]
    int c, i, n;
    int width, prec, fillch;
    int base, len, neg, quoted;
    unsigned long val = 0;
 8016e62:	2300      	movs	r3, #0
 8016e64:	64fb      	str	r3, [r7, #76]	; 0x4c
    static char hexchars[] = "0123456789abcdef";
#if PRINTPKT_SUPPORT
    struct buffer_info bufinfo;
#endif /* PRINTPKT_SUPPORT */

    buf0 = buf;
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	63fb      	str	r3, [r7, #60]	; 0x3c
    --buflen;
 8016e6a:	68bb      	ldr	r3, [r7, #8]
 8016e6c:	3b01      	subs	r3, #1
 8016e6e:	60bb      	str	r3, [r7, #8]
    while (buflen > 0) {
 8016e70:	e3e8      	b.n	8017644 <ppp_vslprintf+0x7f0>
	for (f = fmt; *f != '%' && *f != 0; ++f)
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	64bb      	str	r3, [r7, #72]	; 0x48
 8016e76:	e002      	b.n	8016e7e <ppp_vslprintf+0x2a>
 8016e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e7a:	3301      	adds	r3, #1
 8016e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8016e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e80:	781b      	ldrb	r3, [r3, #0]
 8016e82:	2b25      	cmp	r3, #37	; 0x25
 8016e84:	d003      	beq.n	8016e8e <ppp_vslprintf+0x3a>
 8016e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e88:	781b      	ldrb	r3, [r3, #0]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d1f4      	bne.n	8016e78 <ppp_vslprintf+0x24>
	    ;
	if (f > fmt) {
 8016e8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	429a      	cmp	r2, r3
 8016e94:	d919      	bls.n	8016eca <ppp_vslprintf+0x76>
	    len = f - fmt;
 8016e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	1ad3      	subs	r3, r2, r3
 8016e9c:	657b      	str	r3, [r7, #84]	; 0x54
	    if (len > buflen)
 8016e9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016ea0:	68bb      	ldr	r3, [r7, #8]
 8016ea2:	429a      	cmp	r2, r3
 8016ea4:	dd01      	ble.n	8016eaa <ppp_vslprintf+0x56>
		len = buflen;
 8016ea6:	68bb      	ldr	r3, [r7, #8]
 8016ea8:	657b      	str	r3, [r7, #84]	; 0x54
	    memcpy(buf, fmt, len);
 8016eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016eac:	461a      	mov	r2, r3
 8016eae:	6879      	ldr	r1, [r7, #4]
 8016eb0:	68f8      	ldr	r0, [r7, #12]
 8016eb2:	f001 f9e1 	bl	8018278 <memcpy>
	    buf += len;
 8016eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016eb8:	68fa      	ldr	r2, [r7, #12]
 8016eba:	4413      	add	r3, r2
 8016ebc:	60fb      	str	r3, [r7, #12]
	    buflen -= len;
 8016ebe:	68ba      	ldr	r2, [r7, #8]
 8016ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016ec2:	1ad3      	subs	r3, r2, r3
 8016ec4:	60bb      	str	r3, [r7, #8]
	    fmt = f;
 8016ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016ec8:	607b      	str	r3, [r7, #4]
	}
	if (*fmt == 0)
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	781b      	ldrb	r3, [r3, #0]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	f000 83bd 	beq.w	801764e <ppp_vslprintf+0x7fa>
	    break;
	c = *++fmt;
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	3301      	adds	r3, #1
 8016ed8:	607b      	str	r3, [r7, #4]
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	781b      	ldrb	r3, [r3, #0]
 8016ede:	66fb      	str	r3, [r7, #108]	; 0x6c
	width = 0;
 8016ee0:	2300      	movs	r3, #0
 8016ee2:	667b      	str	r3, [r7, #100]	; 0x64
	prec = -1;
 8016ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8016ee8:	663b      	str	r3, [r7, #96]	; 0x60
	fillch = ' ';
 8016eea:	2320      	movs	r3, #32
 8016eec:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (c == '0') {
 8016eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016ef0:	2b30      	cmp	r3, #48	; 0x30
 8016ef2:	d107      	bne.n	8016f04 <ppp_vslprintf+0xb0>
	    fillch = '0';
 8016ef4:	2330      	movs	r3, #48	; 0x30
 8016ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
	    c = *++fmt;
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	3301      	adds	r3, #1
 8016efc:	607b      	str	r3, [r7, #4]
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	781b      	ldrb	r3, [r3, #0]
 8016f02:	66fb      	str	r3, [r7, #108]	; 0x6c
	}
	if (c == '*') {
 8016f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016f06:	2b2a      	cmp	r3, #42	; 0x2a
 8016f08:	d11b      	bne.n	8016f42 <ppp_vslprintf+0xee>
	    width = va_arg(args, int);
 8016f0a:	683b      	ldr	r3, [r7, #0]
 8016f0c:	1d1a      	adds	r2, r3, #4
 8016f0e:	603a      	str	r2, [r7, #0]
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	667b      	str	r3, [r7, #100]	; 0x64
	    c = *++fmt;
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	3301      	adds	r3, #1
 8016f18:	607b      	str	r3, [r7, #4]
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	781b      	ldrb	r3, [r3, #0]
 8016f1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016f20:	e01b      	b.n	8016f5a <ppp_vslprintf+0x106>
	} else {
	    while (lwip_isdigit(c)) {
		width = width * 10 + c - '0';
 8016f22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016f24:	4613      	mov	r3, r2
 8016f26:	009b      	lsls	r3, r3, #2
 8016f28:	4413      	add	r3, r2
 8016f2a:	005b      	lsls	r3, r3, #1
 8016f2c:	461a      	mov	r2, r3
 8016f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016f30:	4413      	add	r3, r2
 8016f32:	3b30      	subs	r3, #48	; 0x30
 8016f34:	667b      	str	r3, [r7, #100]	; 0x64
		c = *++fmt;
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	3301      	adds	r3, #1
 8016f3a:	607b      	str	r3, [r7, #4]
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	781b      	ldrb	r3, [r3, #0]
 8016f40:	66fb      	str	r3, [r7, #108]	; 0x6c
	    while (lwip_isdigit(c)) {
 8016f42:	f001 f979 	bl	8018238 <__locale_ctype_ptr>
 8016f46:	4602      	mov	r2, r0
 8016f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016f4a:	b2db      	uxtb	r3, r3
 8016f4c:	3301      	adds	r3, #1
 8016f4e:	4413      	add	r3, r2
 8016f50:	781b      	ldrb	r3, [r3, #0]
 8016f52:	f003 0304 	and.w	r3, r3, #4
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d1e3      	bne.n	8016f22 <ppp_vslprintf+0xce>
	    }
	}
	if (c == '.') {
 8016f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8016f5e:	d133      	bne.n	8016fc8 <ppp_vslprintf+0x174>
	    c = *++fmt;
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	3301      	adds	r3, #1
 8016f64:	607b      	str	r3, [r7, #4]
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	781b      	ldrb	r3, [r3, #0]
 8016f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
	    if (c == '*') {
 8016f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016f6e:	2b2a      	cmp	r3, #42	; 0x2a
 8016f70:	d10b      	bne.n	8016f8a <ppp_vslprintf+0x136>
		prec = va_arg(args, int);
 8016f72:	683b      	ldr	r3, [r7, #0]
 8016f74:	1d1a      	adds	r2, r3, #4
 8016f76:	603a      	str	r2, [r7, #0]
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	663b      	str	r3, [r7, #96]	; 0x60
		c = *++fmt;
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	3301      	adds	r3, #1
 8016f80:	607b      	str	r3, [r7, #4]
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	781b      	ldrb	r3, [r3, #0]
 8016f86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016f88:	e01e      	b.n	8016fc8 <ppp_vslprintf+0x174>
	    } else {
		prec = 0;
 8016f8a:	2300      	movs	r3, #0
 8016f8c:	663b      	str	r3, [r7, #96]	; 0x60
		while (lwip_isdigit(c)) {
 8016f8e:	e00f      	b.n	8016fb0 <ppp_vslprintf+0x15c>
		    prec = prec * 10 + c - '0';
 8016f90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016f92:	4613      	mov	r3, r2
 8016f94:	009b      	lsls	r3, r3, #2
 8016f96:	4413      	add	r3, r2
 8016f98:	005b      	lsls	r3, r3, #1
 8016f9a:	461a      	mov	r2, r3
 8016f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016f9e:	4413      	add	r3, r2
 8016fa0:	3b30      	subs	r3, #48	; 0x30
 8016fa2:	663b      	str	r3, [r7, #96]	; 0x60
		    c = *++fmt;
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	3301      	adds	r3, #1
 8016fa8:	607b      	str	r3, [r7, #4]
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	781b      	ldrb	r3, [r3, #0]
 8016fae:	66fb      	str	r3, [r7, #108]	; 0x6c
		while (lwip_isdigit(c)) {
 8016fb0:	f001 f942 	bl	8018238 <__locale_ctype_ptr>
 8016fb4:	4602      	mov	r2, r0
 8016fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016fb8:	b2db      	uxtb	r3, r3
 8016fba:	3301      	adds	r3, #1
 8016fbc:	4413      	add	r3, r2
 8016fbe:	781b      	ldrb	r3, [r3, #0]
 8016fc0:	f003 0304 	and.w	r3, r3, #4
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d1e3      	bne.n	8016f90 <ppp_vslprintf+0x13c>
		}
	    }
	}
	str = 0;
 8016fc8:	2300      	movs	r3, #0
 8016fca:	647b      	str	r3, [r7, #68]	; 0x44
	base = 0;
 8016fcc:	2300      	movs	r3, #0
 8016fce:	65bb      	str	r3, [r7, #88]	; 0x58
	neg = 0;
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	653b      	str	r3, [r7, #80]	; 0x50
	++fmt;
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	3301      	adds	r3, #1
 8016fd8:	607b      	str	r3, [r7, #4]
	switch (c) {
 8016fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016fdc:	3b42      	subs	r3, #66	; 0x42
 8016fde:	2b36      	cmp	r3, #54	; 0x36
 8016fe0:	f200 8289 	bhi.w	80174f6 <ppp_vslprintf+0x6a2>
 8016fe4:	a201      	add	r2, pc, #4	; (adr r2, 8016fec <ppp_vslprintf+0x198>)
 8016fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fea:	bf00      	nop
 8016fec:	08017475 	.word	0x08017475
 8016ff0:	080174f7 	.word	0x080174f7
 8016ff4:	080174f7 	.word	0x080174f7
 8016ff8:	080174f7 	.word	0x080174f7
 8016ffc:	080174f7 	.word	0x080174f7
 8017000:	080174f7 	.word	0x080174f7
 8017004:	080174f7 	.word	0x080174f7
 8017008:	080171bf 	.word	0x080171bf
 801700c:	080174f7 	.word	0x080174f7
 8017010:	080174f7 	.word	0x080174f7
 8017014:	080174f7 	.word	0x080174f7
 8017018:	080174f7 	.word	0x080174f7
 801701c:	080174f7 	.word	0x080174f7
 8017020:	080174f7 	.word	0x080174f7
 8017024:	080174f7 	.word	0x080174f7
 8017028:	080174f7 	.word	0x080174f7
 801702c:	080174f7 	.word	0x080174f7
 8017030:	080174f7 	.word	0x080174f7
 8017034:	080174f7 	.word	0x080174f7
 8017038:	080174f7 	.word	0x080174f7
 801703c:	080174f7 	.word	0x080174f7
 8017040:	080174f7 	.word	0x080174f7
 8017044:	0801718b 	.word	0x0801718b
 8017048:	080174f7 	.word	0x080174f7
 801704c:	080174f7 	.word	0x080174f7
 8017050:	080174f7 	.word	0x080174f7
 8017054:	080174f7 	.word	0x080174f7
 8017058:	080174f7 	.word	0x080174f7
 801705c:	080174f7 	.word	0x080174f7
 8017060:	080174f7 	.word	0x080174f7
 8017064:	080174f7 	.word	0x080174f7
 8017068:	080174f7 	.word	0x080174f7
 801706c:	080174f7 	.word	0x080174f7
 8017070:	080171a7 	.word	0x080171a7
 8017074:	08017145 	.word	0x08017145
 8017078:	080174f7 	.word	0x080174f7
 801707c:	080174f7 	.word	0x080174f7
 8017080:	080174f7 	.word	0x080174f7
 8017084:	080174f7 	.word	0x080174f7
 8017088:	080174f7 	.word	0x080174f7
 801708c:	080174f7 	.word	0x080174f7
 8017090:	080174f7 	.word	0x080174f7
 8017094:	080170c9 	.word	0x080170c9
 8017098:	080174f7 	.word	0x080174f7
 801709c:	080174f7 	.word	0x080174f7
 80170a0:	0801717b 	.word	0x0801717b
 80170a4:	080174f7 	.word	0x080174f7
 80170a8:	08017201 	.word	0x08017201
 80170ac:	080174f7 	.word	0x080174f7
 80170b0:	0801719b 	.word	0x0801719b
 80170b4:	080174f7 	.word	0x080174f7
 80170b8:	0801716b 	.word	0x0801716b
 80170bc:	08017201 	.word	0x08017201
 80170c0:	080174f7 	.word	0x080174f7
 80170c4:	0801718b 	.word	0x0801718b
	case 'l':
	    c = *fmt++;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	1c5a      	adds	r2, r3, #1
 80170cc:	607a      	str	r2, [r7, #4]
 80170ce:	781b      	ldrb	r3, [r3, #0]
 80170d0:	66fb      	str	r3, [r7, #108]	; 0x6c
	    switch (c) {
 80170d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80170d4:	2b64      	cmp	r3, #100	; 0x64
 80170d6:	d002      	beq.n	80170de <ppp_vslprintf+0x28a>
 80170d8:	2b75      	cmp	r3, #117	; 0x75
 80170da:	d010      	beq.n	80170fe <ppp_vslprintf+0x2aa>
 80170dc:	e017      	b.n	801710e <ppp_vslprintf+0x2ba>
	    case 'd':
		val = va_arg(args, long);
 80170de:	683b      	ldr	r3, [r7, #0]
 80170e0:	1d1a      	adds	r2, r3, #4
 80170e2:	603a      	str	r2, [r7, #0]
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if ((long)val < 0) {
 80170e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	da04      	bge.n	80170f8 <ppp_vslprintf+0x2a4>
		    neg = 1;
 80170ee:	2301      	movs	r3, #1
 80170f0:	653b      	str	r3, [r7, #80]	; 0x50
		    val = (unsigned long)-(long)val;
 80170f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170f4:	425b      	negs	r3, r3
 80170f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		base = 10;
 80170f8:	230a      	movs	r3, #10
 80170fa:	65bb      	str	r3, [r7, #88]	; 0x58
		break;
 80170fc:	e021      	b.n	8017142 <ppp_vslprintf+0x2ee>
	    case 'u':
		val = va_arg(args, unsigned long);
 80170fe:	683b      	ldr	r3, [r7, #0]
 8017100:	1d1a      	adds	r2, r3, #4
 8017102:	603a      	str	r2, [r7, #0]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	64fb      	str	r3, [r7, #76]	; 0x4c
		base = 10;
 8017108:	230a      	movs	r3, #10
 801710a:	65bb      	str	r3, [r7, #88]	; 0x58
		break;
 801710c:	e019      	b.n	8017142 <ppp_vslprintf+0x2ee>
	    default:
		OUTCHAR('%');
 801710e:	68bb      	ldr	r3, [r7, #8]
 8017110:	2b00      	cmp	r3, #0
 8017112:	dd07      	ble.n	8017124 <ppp_vslprintf+0x2d0>
 8017114:	68bb      	ldr	r3, [r7, #8]
 8017116:	3b01      	subs	r3, #1
 8017118:	60bb      	str	r3, [r7, #8]
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	1c5a      	adds	r2, r3, #1
 801711e:	60fa      	str	r2, [r7, #12]
 8017120:	2225      	movs	r2, #37	; 0x25
 8017122:	701a      	strb	r2, [r3, #0]
		OUTCHAR('l');
 8017124:	68bb      	ldr	r3, [r7, #8]
 8017126:	2b00      	cmp	r3, #0
 8017128:	dd07      	ble.n	801713a <ppp_vslprintf+0x2e6>
 801712a:	68bb      	ldr	r3, [r7, #8]
 801712c:	3b01      	subs	r3, #1
 801712e:	60bb      	str	r3, [r7, #8]
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	1c5a      	adds	r2, r3, #1
 8017134:	60fa      	str	r2, [r7, #12]
 8017136:	226c      	movs	r2, #108	; 0x6c
 8017138:	701a      	strb	r2, [r3, #0]
		--fmt;		/* so %lz outputs %lz etc. */
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	3b01      	subs	r3, #1
 801713e:	607b      	str	r3, [r7, #4]
		continue;
 8017140:	e280      	b.n	8017644 <ppp_vslprintf+0x7f0>
	    }
	    break;
 8017142:	e1e7      	b.n	8017514 <ppp_vslprintf+0x6c0>
	case 'd':
	    i = va_arg(args, int);
 8017144:	683b      	ldr	r3, [r7, #0]
 8017146:	1d1a      	adds	r2, r3, #4
 8017148:	603a      	str	r2, [r7, #0]
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	637b      	str	r3, [r7, #52]	; 0x34
	    if (i < 0) {
 801714e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017150:	2b00      	cmp	r3, #0
 8017152:	da05      	bge.n	8017160 <ppp_vslprintf+0x30c>
		neg = 1;
 8017154:	2301      	movs	r3, #1
 8017156:	653b      	str	r3, [r7, #80]	; 0x50
		val = -i;
 8017158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801715a:	425b      	negs	r3, r3
 801715c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801715e:	e001      	b.n	8017164 <ppp_vslprintf+0x310>
	    } else
		val = i;
 8017160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017162:	64fb      	str	r3, [r7, #76]	; 0x4c
	    base = 10;
 8017164:	230a      	movs	r3, #10
 8017166:	65bb      	str	r3, [r7, #88]	; 0x58
	    break;
 8017168:	e1d4      	b.n	8017514 <ppp_vslprintf+0x6c0>
	case 'u':
	    val = va_arg(args, unsigned int);
 801716a:	683b      	ldr	r3, [r7, #0]
 801716c:	1d1a      	adds	r2, r3, #4
 801716e:	603a      	str	r2, [r7, #0]
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	64fb      	str	r3, [r7, #76]	; 0x4c
	    base = 10;
 8017174:	230a      	movs	r3, #10
 8017176:	65bb      	str	r3, [r7, #88]	; 0x58
	    break;
 8017178:	e1cc      	b.n	8017514 <ppp_vslprintf+0x6c0>
	case 'o':
	    val = va_arg(args, unsigned int);
 801717a:	683b      	ldr	r3, [r7, #0]
 801717c:	1d1a      	adds	r2, r3, #4
 801717e:	603a      	str	r2, [r7, #0]
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	64fb      	str	r3, [r7, #76]	; 0x4c
	    base = 8;
 8017184:	2308      	movs	r3, #8
 8017186:	65bb      	str	r3, [r7, #88]	; 0x58
	    break;
 8017188:	e1c4      	b.n	8017514 <ppp_vslprintf+0x6c0>
	case 'x':
	case 'X':
	    val = va_arg(args, unsigned int);
 801718a:	683b      	ldr	r3, [r7, #0]
 801718c:	1d1a      	adds	r2, r3, #4
 801718e:	603a      	str	r2, [r7, #0]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	64fb      	str	r3, [r7, #76]	; 0x4c
	    base = 16;
 8017194:	2310      	movs	r3, #16
 8017196:	65bb      	str	r3, [r7, #88]	; 0x58
	    break;
 8017198:	e1bc      	b.n	8017514 <ppp_vslprintf+0x6c0>
	    base = 16;
	    neg = 2;
	    break;
#endif /* unused (and wrong on LLP64 systems) */
	case 's':
	    str = va_arg(args, char *);
 801719a:	683b      	ldr	r3, [r7, #0]
 801719c:	1d1a      	adds	r2, r3, #4
 801719e:	603a      	str	r2, [r7, #0]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	647b      	str	r3, [r7, #68]	; 0x44
	    break;
 80171a4:	e1b6      	b.n	8017514 <ppp_vslprintf+0x6c0>
	case 'c':
	    num[0] = va_arg(args, int);
 80171a6:	683b      	ldr	r3, [r7, #0]
 80171a8:	1d1a      	adds	r2, r3, #4
 80171aa:	603a      	str	r2, [r7, #0]
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	b2db      	uxtb	r3, r3
 80171b0:	743b      	strb	r3, [r7, #16]
	    num[1] = 0;
 80171b2:	2300      	movs	r3, #0
 80171b4:	747b      	strb	r3, [r7, #17]
	    str = num;
 80171b6:	f107 0310 	add.w	r3, r7, #16
 80171ba:	647b      	str	r3, [r7, #68]	; 0x44
	    break;
 80171bc:	e1aa      	b.n	8017514 <ppp_vslprintf+0x6c0>
	case 'm':
	    str = strerror(errno);
	    break;
#endif /* do we always have strerror() in embedded ? */
	case 'I':
	    ip = va_arg(args, u32_t);
 80171be:	683b      	ldr	r3, [r7, #0]
 80171c0:	1d1a      	adds	r2, r3, #4
 80171c2:	603a      	str	r2, [r7, #0]
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	633b      	str	r3, [r7, #48]	; 0x30
	    ip = lwip_ntohl(ip);
 80171c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80171ca:	f7ec f8ae 	bl	800332a <lwip_htonl>
 80171ce:	6338      	str	r0, [r7, #48]	; 0x30
	    ppp_slprintf(num, sizeof(num), "%d.%d.%d.%d", (ip >> 24) & 0xff,
 80171d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171d2:	0e1c      	lsrs	r4, r3, #24
		     (ip >> 16) & 0xff, (ip >> 8) & 0xff, ip & 0xff);
 80171d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171d6:	0c1b      	lsrs	r3, r3, #16
	    ppp_slprintf(num, sizeof(num), "%d.%d.%d.%d", (ip >> 24) & 0xff,
 80171d8:	b2db      	uxtb	r3, r3
		     (ip >> 16) & 0xff, (ip >> 8) & 0xff, ip & 0xff);
 80171da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171dc:	0a12      	lsrs	r2, r2, #8
	    ppp_slprintf(num, sizeof(num), "%d.%d.%d.%d", (ip >> 24) & 0xff,
 80171de:	b2d2      	uxtb	r2, r2
 80171e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80171e2:	b2c9      	uxtb	r1, r1
 80171e4:	f107 0010 	add.w	r0, r7, #16
 80171e8:	9102      	str	r1, [sp, #8]
 80171ea:	9201      	str	r2, [sp, #4]
 80171ec:	9300      	str	r3, [sp, #0]
 80171ee:	4623      	mov	r3, r4
 80171f0:	4a9d      	ldr	r2, [pc, #628]	; (8017468 <ppp_vslprintf+0x614>)
 80171f2:	2120      	movs	r1, #32
 80171f4:	f7ff fe16 	bl	8016e24 <ppp_slprintf>
	    str = num;
 80171f8:	f107 0310 	add.w	r3, r7, #16
 80171fc:	647b      	str	r3, [r7, #68]	; 0x44
	    break;
 80171fe:	e189      	b.n	8017514 <ppp_vslprintf+0x6c0>
	    str[15] = 0;	/* chop off year and newline */
	    break;
#endif /* need port */
	case 'v':		/* "visible" string */
	case 'q':		/* quoted string */
	    quoted = c == 'q';
 8017200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017202:	2b71      	cmp	r3, #113	; 0x71
 8017204:	bf0c      	ite	eq
 8017206:	2301      	moveq	r3, #1
 8017208:	2300      	movne	r3, #0
 801720a:	b2db      	uxtb	r3, r3
 801720c:	63bb      	str	r3, [r7, #56]	; 0x38
	    p = va_arg(args, unsigned char *);
 801720e:	683b      	ldr	r3, [r7, #0]
 8017210:	1d1a      	adds	r2, r3, #4
 8017212:	603a      	str	r2, [r7, #0]
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	643b      	str	r3, [r7, #64]	; 0x40
	    if (p == NULL)
 8017218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801721a:	2b00      	cmp	r3, #0
 801721c:	d101      	bne.n	8017222 <ppp_vslprintf+0x3ce>
		p = (const unsigned char *)"<NULL>";
 801721e:	4b93      	ldr	r3, [pc, #588]	; (801746c <ppp_vslprintf+0x618>)
 8017220:	643b      	str	r3, [r7, #64]	; 0x40
	    if (fillch == '0' && prec >= 0) {
 8017222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017224:	2b30      	cmp	r3, #48	; 0x30
 8017226:	d105      	bne.n	8017234 <ppp_vslprintf+0x3e0>
 8017228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801722a:	2b00      	cmp	r3, #0
 801722c:	db02      	blt.n	8017234 <ppp_vslprintf+0x3e0>
		n = prec;
 801722e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017230:	66bb      	str	r3, [r7, #104]	; 0x68
 8017232:	e00f      	b.n	8017254 <ppp_vslprintf+0x400>
	    } else {
		n = strlen((const char *)p);
 8017234:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017236:	f7e8 ffd5 	bl	80001e4 <strlen>
 801723a:	4603      	mov	r3, r0
 801723c:	66bb      	str	r3, [r7, #104]	; 0x68
		if (prec >= 0 && n > prec)
 801723e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017240:	2b00      	cmp	r3, #0
 8017242:	f2c0 8107 	blt.w	8017454 <ppp_vslprintf+0x600>
 8017246:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801724a:	429a      	cmp	r2, r3
 801724c:	f340 8102 	ble.w	8017454 <ppp_vslprintf+0x600>
		    n = prec;
 8017250:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017252:	66bb      	str	r3, [r7, #104]	; 0x68
	    }
	    while (n > 0 && buflen > 0) {
 8017254:	e0fe      	b.n	8017454 <ppp_vslprintf+0x600>
		c = *p++;
 8017256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017258:	1c5a      	adds	r2, r3, #1
 801725a:	643a      	str	r2, [r7, #64]	; 0x40
 801725c:	781b      	ldrb	r3, [r3, #0]
 801725e:	66fb      	str	r3, [r7, #108]	; 0x6c
		--n;
 8017260:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017262:	3b01      	subs	r3, #1
 8017264:	66bb      	str	r3, [r7, #104]	; 0x68
		if (!quoted && c >= 0x80) {
 8017266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017268:	2b00      	cmp	r3, #0
 801726a:	d11b      	bne.n	80172a4 <ppp_vslprintf+0x450>
 801726c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801726e:	2b7f      	cmp	r3, #127	; 0x7f
 8017270:	dd18      	ble.n	80172a4 <ppp_vslprintf+0x450>
		    OUTCHAR('M');
 8017272:	68bb      	ldr	r3, [r7, #8]
 8017274:	2b00      	cmp	r3, #0
 8017276:	dd07      	ble.n	8017288 <ppp_vslprintf+0x434>
 8017278:	68bb      	ldr	r3, [r7, #8]
 801727a:	3b01      	subs	r3, #1
 801727c:	60bb      	str	r3, [r7, #8]
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	1c5a      	adds	r2, r3, #1
 8017282:	60fa      	str	r2, [r7, #12]
 8017284:	224d      	movs	r2, #77	; 0x4d
 8017286:	701a      	strb	r2, [r3, #0]
		    OUTCHAR('-');
 8017288:	68bb      	ldr	r3, [r7, #8]
 801728a:	2b00      	cmp	r3, #0
 801728c:	dd07      	ble.n	801729e <ppp_vslprintf+0x44a>
 801728e:	68bb      	ldr	r3, [r7, #8]
 8017290:	3b01      	subs	r3, #1
 8017292:	60bb      	str	r3, [r7, #8]
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	1c5a      	adds	r2, r3, #1
 8017298:	60fa      	str	r2, [r7, #12]
 801729a:	222d      	movs	r2, #45	; 0x2d
 801729c:	701a      	strb	r2, [r3, #0]
		    c -= 0x80;
 801729e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80172a0:	3b80      	subs	r3, #128	; 0x80
 80172a2:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		if (quoted && (c == '"' || c == '\\'))
 80172a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d010      	beq.n	80172cc <ppp_vslprintf+0x478>
 80172aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80172ac:	2b22      	cmp	r3, #34	; 0x22
 80172ae:	d002      	beq.n	80172b6 <ppp_vslprintf+0x462>
 80172b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80172b2:	2b5c      	cmp	r3, #92	; 0x5c
 80172b4:	d10a      	bne.n	80172cc <ppp_vslprintf+0x478>
		    OUTCHAR('\\');
 80172b6:	68bb      	ldr	r3, [r7, #8]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	dd07      	ble.n	80172cc <ppp_vslprintf+0x478>
 80172bc:	68bb      	ldr	r3, [r7, #8]
 80172be:	3b01      	subs	r3, #1
 80172c0:	60bb      	str	r3, [r7, #8]
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	1c5a      	adds	r2, r3, #1
 80172c6:	60fa      	str	r2, [r7, #12]
 80172c8:	225c      	movs	r2, #92	; 0x5c
 80172ca:	701a      	strb	r2, [r3, #0]
		if (c < 0x20 || (0x7f <= c && c < 0xa0)) {
 80172cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80172ce:	2b1f      	cmp	r3, #31
 80172d0:	dd07      	ble.n	80172e2 <ppp_vslprintf+0x48e>
 80172d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80172d4:	2b7e      	cmp	r3, #126	; 0x7e
 80172d6:	f340 80b1 	ble.w	801743c <ppp_vslprintf+0x5e8>
 80172da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80172dc:	2b9f      	cmp	r3, #159	; 0x9f
 80172de:	f300 80ad 	bgt.w	801743c <ppp_vslprintf+0x5e8>
		    if (quoted) {
 80172e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d075      	beq.n	80173d4 <ppp_vslprintf+0x580>
			OUTCHAR('\\');
 80172e8:	68bb      	ldr	r3, [r7, #8]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	dd07      	ble.n	80172fe <ppp_vslprintf+0x4aa>
 80172ee:	68bb      	ldr	r3, [r7, #8]
 80172f0:	3b01      	subs	r3, #1
 80172f2:	60bb      	str	r3, [r7, #8]
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	1c5a      	adds	r2, r3, #1
 80172f8:	60fa      	str	r2, [r7, #12]
 80172fa:	225c      	movs	r2, #92	; 0x5c
 80172fc:	701a      	strb	r2, [r3, #0]
			switch (c) {
 80172fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017300:	3b08      	subs	r3, #8
 8017302:	2b04      	cmp	r3, #4
 8017304:	d83d      	bhi.n	8017382 <ppp_vslprintf+0x52e>
 8017306:	a201      	add	r2, pc, #4	; (adr r2, 801730c <ppp_vslprintf+0x4b8>)
 8017308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801730c:	08017353 	.word	0x08017353
 8017310:	08017321 	.word	0x08017321
 8017314:	0801733b 	.word	0x0801733b
 8017318:	08017383 	.word	0x08017383
 801731c:	0801736b 	.word	0x0801736b
			case '\t':	OUTCHAR('t');	break;
 8017320:	68bb      	ldr	r3, [r7, #8]
 8017322:	2b00      	cmp	r3, #0
 8017324:	f340 8082 	ble.w	801742c <ppp_vslprintf+0x5d8>
 8017328:	68bb      	ldr	r3, [r7, #8]
 801732a:	3b01      	subs	r3, #1
 801732c:	60bb      	str	r3, [r7, #8]
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	1c5a      	adds	r2, r3, #1
 8017332:	60fa      	str	r2, [r7, #12]
 8017334:	2274      	movs	r2, #116	; 0x74
 8017336:	701a      	strb	r2, [r3, #0]
 8017338:	e078      	b.n	801742c <ppp_vslprintf+0x5d8>
			case '\n':	OUTCHAR('n');	break;
 801733a:	68bb      	ldr	r3, [r7, #8]
 801733c:	2b00      	cmp	r3, #0
 801733e:	dd77      	ble.n	8017430 <ppp_vslprintf+0x5dc>
 8017340:	68bb      	ldr	r3, [r7, #8]
 8017342:	3b01      	subs	r3, #1
 8017344:	60bb      	str	r3, [r7, #8]
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	1c5a      	adds	r2, r3, #1
 801734a:	60fa      	str	r2, [r7, #12]
 801734c:	226e      	movs	r2, #110	; 0x6e
 801734e:	701a      	strb	r2, [r3, #0]
 8017350:	e06e      	b.n	8017430 <ppp_vslprintf+0x5dc>
			case '\b':	OUTCHAR('b');	break;
 8017352:	68bb      	ldr	r3, [r7, #8]
 8017354:	2b00      	cmp	r3, #0
 8017356:	dd6d      	ble.n	8017434 <ppp_vslprintf+0x5e0>
 8017358:	68bb      	ldr	r3, [r7, #8]
 801735a:	3b01      	subs	r3, #1
 801735c:	60bb      	str	r3, [r7, #8]
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	1c5a      	adds	r2, r3, #1
 8017362:	60fa      	str	r2, [r7, #12]
 8017364:	2262      	movs	r2, #98	; 0x62
 8017366:	701a      	strb	r2, [r3, #0]
 8017368:	e064      	b.n	8017434 <ppp_vslprintf+0x5e0>
			case '\f':	OUTCHAR('f');	break;
 801736a:	68bb      	ldr	r3, [r7, #8]
 801736c:	2b00      	cmp	r3, #0
 801736e:	dd63      	ble.n	8017438 <ppp_vslprintf+0x5e4>
 8017370:	68bb      	ldr	r3, [r7, #8]
 8017372:	3b01      	subs	r3, #1
 8017374:	60bb      	str	r3, [r7, #8]
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	1c5a      	adds	r2, r3, #1
 801737a:	60fa      	str	r2, [r7, #12]
 801737c:	2266      	movs	r2, #102	; 0x66
 801737e:	701a      	strb	r2, [r3, #0]
 8017380:	e05a      	b.n	8017438 <ppp_vslprintf+0x5e4>
			default:
			    OUTCHAR('x');
 8017382:	68bb      	ldr	r3, [r7, #8]
 8017384:	2b00      	cmp	r3, #0
 8017386:	dd07      	ble.n	8017398 <ppp_vslprintf+0x544>
 8017388:	68bb      	ldr	r3, [r7, #8]
 801738a:	3b01      	subs	r3, #1
 801738c:	60bb      	str	r3, [r7, #8]
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	1c5a      	adds	r2, r3, #1
 8017392:	60fa      	str	r2, [r7, #12]
 8017394:	2278      	movs	r2, #120	; 0x78
 8017396:	701a      	strb	r2, [r3, #0]
			    OUTCHAR(hexchars[c >> 4]);
 8017398:	68bb      	ldr	r3, [r7, #8]
 801739a:	2b00      	cmp	r3, #0
 801739c:	dd0a      	ble.n	80173b4 <ppp_vslprintf+0x560>
 801739e:	68bb      	ldr	r3, [r7, #8]
 80173a0:	3b01      	subs	r3, #1
 80173a2:	60bb      	str	r3, [r7, #8]
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	1c5a      	adds	r2, r3, #1
 80173a8:	60fa      	str	r2, [r7, #12]
 80173aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80173ac:	1112      	asrs	r2, r2, #4
 80173ae:	4930      	ldr	r1, [pc, #192]	; (8017470 <ppp_vslprintf+0x61c>)
 80173b0:	5c8a      	ldrb	r2, [r1, r2]
 80173b2:	701a      	strb	r2, [r3, #0]
			    OUTCHAR(hexchars[c & 0xf]);
 80173b4:	68bb      	ldr	r3, [r7, #8]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	dd4c      	ble.n	8017454 <ppp_vslprintf+0x600>
 80173ba:	68bb      	ldr	r3, [r7, #8]
 80173bc:	3b01      	subs	r3, #1
 80173be:	60bb      	str	r3, [r7, #8]
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	1c5a      	adds	r2, r3, #1
 80173c4:	60fa      	str	r2, [r7, #12]
 80173c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80173c8:	f002 020f 	and.w	r2, r2, #15
 80173cc:	4928      	ldr	r1, [pc, #160]	; (8017470 <ppp_vslprintf+0x61c>)
 80173ce:	5c8a      	ldrb	r2, [r1, r2]
 80173d0:	701a      	strb	r2, [r3, #0]
 80173d2:	e03f      	b.n	8017454 <ppp_vslprintf+0x600>
			}
		    } else {
			if (c == '\t')
 80173d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80173d6:	2b09      	cmp	r3, #9
 80173d8:	d10c      	bne.n	80173f4 <ppp_vslprintf+0x5a0>
			    OUTCHAR(c);
 80173da:	68bb      	ldr	r3, [r7, #8]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	dd39      	ble.n	8017454 <ppp_vslprintf+0x600>
 80173e0:	68bb      	ldr	r3, [r7, #8]
 80173e2:	3b01      	subs	r3, #1
 80173e4:	60bb      	str	r3, [r7, #8]
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	1c5a      	adds	r2, r3, #1
 80173ea:	60fa      	str	r2, [r7, #12]
 80173ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80173ee:	b2d2      	uxtb	r2, r2
 80173f0:	701a      	strb	r2, [r3, #0]
 80173f2:	e02f      	b.n	8017454 <ppp_vslprintf+0x600>
			else {
			    OUTCHAR('^');
 80173f4:	68bb      	ldr	r3, [r7, #8]
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	dd07      	ble.n	801740a <ppp_vslprintf+0x5b6>
 80173fa:	68bb      	ldr	r3, [r7, #8]
 80173fc:	3b01      	subs	r3, #1
 80173fe:	60bb      	str	r3, [r7, #8]
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	1c5a      	adds	r2, r3, #1
 8017404:	60fa      	str	r2, [r7, #12]
 8017406:	225e      	movs	r2, #94	; 0x5e
 8017408:	701a      	strb	r2, [r3, #0]
			    OUTCHAR(c ^ 0x40);
 801740a:	68bb      	ldr	r3, [r7, #8]
 801740c:	2b00      	cmp	r3, #0
 801740e:	dd21      	ble.n	8017454 <ppp_vslprintf+0x600>
 8017410:	68bb      	ldr	r3, [r7, #8]
 8017412:	3b01      	subs	r3, #1
 8017414:	60bb      	str	r3, [r7, #8]
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	1c5a      	adds	r2, r3, #1
 801741a:	60fa      	str	r2, [r7, #12]
 801741c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801741e:	b252      	sxtb	r2, r2
 8017420:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 8017424:	b252      	sxtb	r2, r2
 8017426:	b2d2      	uxtb	r2, r2
 8017428:	701a      	strb	r2, [r3, #0]
 801742a:	e013      	b.n	8017454 <ppp_vslprintf+0x600>
			case '\t':	OUTCHAR('t');	break;
 801742c:	bf00      	nop
 801742e:	e011      	b.n	8017454 <ppp_vslprintf+0x600>
			case '\n':	OUTCHAR('n');	break;
 8017430:	bf00      	nop
 8017432:	e00f      	b.n	8017454 <ppp_vslprintf+0x600>
			case '\b':	OUTCHAR('b');	break;
 8017434:	bf00      	nop
 8017436:	e00d      	b.n	8017454 <ppp_vslprintf+0x600>
			case '\f':	OUTCHAR('f');	break;
 8017438:	bf00      	nop
		    if (quoted) {
 801743a:	e00b      	b.n	8017454 <ppp_vslprintf+0x600>
			}
		    }
		} else
		    OUTCHAR(c);
 801743c:	68bb      	ldr	r3, [r7, #8]
 801743e:	2b00      	cmp	r3, #0
 8017440:	dd08      	ble.n	8017454 <ppp_vslprintf+0x600>
 8017442:	68bb      	ldr	r3, [r7, #8]
 8017444:	3b01      	subs	r3, #1
 8017446:	60bb      	str	r3, [r7, #8]
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	1c5a      	adds	r2, r3, #1
 801744c:	60fa      	str	r2, [r7, #12]
 801744e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017450:	b2d2      	uxtb	r2, r2
 8017452:	701a      	strb	r2, [r3, #0]
	    while (n > 0 && buflen > 0) {
 8017454:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017456:	2b00      	cmp	r3, #0
 8017458:	f340 80f4 	ble.w	8017644 <ppp_vslprintf+0x7f0>
 801745c:	68bb      	ldr	r3, [r7, #8]
 801745e:	2b00      	cmp	r3, #0
 8017460:	f73f aef9 	bgt.w	8017256 <ppp_vslprintf+0x402>
	    }
	    continue;
 8017464:	e0ee      	b.n	8017644 <ppp_vslprintf+0x7f0>
 8017466:	bf00      	nop
 8017468:	0801d8d4 	.word	0x0801d8d4
 801746c:	0801d8e0 	.word	0x0801d8e0
 8017470:	20000014 	.word	0x20000014
	    buf = bufinfo.ptr;
	    buflen = bufinfo.len - 1;
	    continue;
#endif /* PRINTPKT_SUPPORT */
	case 'B':
	    p = va_arg(args, unsigned char *);
 8017474:	683b      	ldr	r3, [r7, #0]
 8017476:	1d1a      	adds	r2, r3, #4
 8017478:	603a      	str	r2, [r7, #0]
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	643b      	str	r3, [r7, #64]	; 0x40
	    for (n = prec; n > 0; --n) {
 801747e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017480:	66bb      	str	r3, [r7, #104]	; 0x68
 8017482:	e034      	b.n	80174ee <ppp_vslprintf+0x69a>
		c = *p++;
 8017484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017486:	1c5a      	adds	r2, r3, #1
 8017488:	643a      	str	r2, [r7, #64]	; 0x40
 801748a:	781b      	ldrb	r3, [r3, #0]
 801748c:	66fb      	str	r3, [r7, #108]	; 0x6c
		if (fillch == ' ')
 801748e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017490:	2b20      	cmp	r3, #32
 8017492:	d10a      	bne.n	80174aa <ppp_vslprintf+0x656>
		    OUTCHAR(' ');
 8017494:	68bb      	ldr	r3, [r7, #8]
 8017496:	2b00      	cmp	r3, #0
 8017498:	dd07      	ble.n	80174aa <ppp_vslprintf+0x656>
 801749a:	68bb      	ldr	r3, [r7, #8]
 801749c:	3b01      	subs	r3, #1
 801749e:	60bb      	str	r3, [r7, #8]
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	1c5a      	adds	r2, r3, #1
 80174a4:	60fa      	str	r2, [r7, #12]
 80174a6:	2220      	movs	r2, #32
 80174a8:	701a      	strb	r2, [r3, #0]
		OUTCHAR(hexchars[(c >> 4) & 0xf]);
 80174aa:	68bb      	ldr	r3, [r7, #8]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	dd0c      	ble.n	80174ca <ppp_vslprintf+0x676>
 80174b0:	68bb      	ldr	r3, [r7, #8]
 80174b2:	3b01      	subs	r3, #1
 80174b4:	60bb      	str	r3, [r7, #8]
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	1c5a      	adds	r2, r3, #1
 80174ba:	60fa      	str	r2, [r7, #12]
 80174bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80174be:	1112      	asrs	r2, r2, #4
 80174c0:	f002 020f 	and.w	r2, r2, #15
 80174c4:	4967      	ldr	r1, [pc, #412]	; (8017664 <ppp_vslprintf+0x810>)
 80174c6:	5c8a      	ldrb	r2, [r1, r2]
 80174c8:	701a      	strb	r2, [r3, #0]
		OUTCHAR(hexchars[c & 0xf]);
 80174ca:	68bb      	ldr	r3, [r7, #8]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	dd0b      	ble.n	80174e8 <ppp_vslprintf+0x694>
 80174d0:	68bb      	ldr	r3, [r7, #8]
 80174d2:	3b01      	subs	r3, #1
 80174d4:	60bb      	str	r3, [r7, #8]
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	1c5a      	adds	r2, r3, #1
 80174da:	60fa      	str	r2, [r7, #12]
 80174dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80174de:	f002 020f 	and.w	r2, r2, #15
 80174e2:	4960      	ldr	r1, [pc, #384]	; (8017664 <ppp_vslprintf+0x810>)
 80174e4:	5c8a      	ldrb	r2, [r1, r2]
 80174e6:	701a      	strb	r2, [r3, #0]
	    for (n = prec; n > 0; --n) {
 80174e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80174ea:	3b01      	subs	r3, #1
 80174ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80174ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	dcc7      	bgt.n	8017484 <ppp_vslprintf+0x630>
	    }
	    continue;
 80174f4:	e0a6      	b.n	8017644 <ppp_vslprintf+0x7f0>
	default:
	    *buf++ = '%';
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	1c5a      	adds	r2, r3, #1
 80174fa:	60fa      	str	r2, [r7, #12]
 80174fc:	2225      	movs	r2, #37	; 0x25
 80174fe:	701a      	strb	r2, [r3, #0]
	    if (c != '%')
 8017500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017502:	2b25      	cmp	r3, #37	; 0x25
 8017504:	d002      	beq.n	801750c <ppp_vslprintf+0x6b8>
		--fmt;		/* so %z outputs %z etc. */
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	3b01      	subs	r3, #1
 801750a:	607b      	str	r3, [r7, #4]
	    --buflen;
 801750c:	68bb      	ldr	r3, [r7, #8]
 801750e:	3b01      	subs	r3, #1
 8017510:	60bb      	str	r3, [r7, #8]
	    continue;
 8017512:	e097      	b.n	8017644 <ppp_vslprintf+0x7f0>
	}
	if (base != 0) {
 8017514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017516:	2b00      	cmp	r3, #0
 8017518:	d051      	beq.n	80175be <ppp_vslprintf+0x76a>
	    str = num + sizeof(num);
 801751a:	f107 0310 	add.w	r3, r7, #16
 801751e:	3320      	adds	r3, #32
 8017520:	647b      	str	r3, [r7, #68]	; 0x44
	    *--str = 0;
 8017522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017524:	3b01      	subs	r3, #1
 8017526:	647b      	str	r3, [r7, #68]	; 0x44
 8017528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801752a:	2200      	movs	r2, #0
 801752c:	701a      	strb	r2, [r3, #0]
	    while (str > num + neg) {
 801752e:	e01b      	b.n	8017568 <ppp_vslprintf+0x714>
		*--str = hexchars[val % base];
 8017530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017532:	3b01      	subs	r3, #1
 8017534:	647b      	str	r3, [r7, #68]	; 0x44
 8017536:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801753a:	fbb3 f1f2 	udiv	r1, r3, r2
 801753e:	fb02 f201 	mul.w	r2, r2, r1
 8017542:	1a9b      	subs	r3, r3, r2
 8017544:	4a47      	ldr	r2, [pc, #284]	; (8017664 <ppp_vslprintf+0x810>)
 8017546:	5cd2      	ldrb	r2, [r2, r3]
 8017548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801754a:	701a      	strb	r2, [r3, #0]
		val = val / base;
 801754c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801754e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017550:	fbb2 f3f3 	udiv	r3, r2, r3
 8017554:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (--prec <= 0 && val == 0)
 8017556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017558:	3b01      	subs	r3, #1
 801755a:	663b      	str	r3, [r7, #96]	; 0x60
 801755c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801755e:	2b00      	cmp	r3, #0
 8017560:	dc02      	bgt.n	8017568 <ppp_vslprintf+0x714>
 8017562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017564:	2b00      	cmp	r3, #0
 8017566:	d007      	beq.n	8017578 <ppp_vslprintf+0x724>
	    while (str > num + neg) {
 8017568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801756a:	f107 0210 	add.w	r2, r7, #16
 801756e:	441a      	add	r2, r3
 8017570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017572:	429a      	cmp	r2, r3
 8017574:	d3dc      	bcc.n	8017530 <ppp_vslprintf+0x6dc>
 8017576:	e000      	b.n	801757a <ppp_vslprintf+0x726>
		    break;
 8017578:	bf00      	nop
	    }
	    switch (neg) {
 801757a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801757c:	2b01      	cmp	r3, #1
 801757e:	d002      	beq.n	8017586 <ppp_vslprintf+0x732>
 8017580:	2b02      	cmp	r3, #2
 8017582:	d007      	beq.n	8017594 <ppp_vslprintf+0x740>
	    case 2:
		*--str = 'x';
		*--str = '0';
		break;
	    default:
		break;
 8017584:	e013      	b.n	80175ae <ppp_vslprintf+0x75a>
		*--str = '-';
 8017586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017588:	3b01      	subs	r3, #1
 801758a:	647b      	str	r3, [r7, #68]	; 0x44
 801758c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801758e:	222d      	movs	r2, #45	; 0x2d
 8017590:	701a      	strb	r2, [r3, #0]
		break;
 8017592:	e00c      	b.n	80175ae <ppp_vslprintf+0x75a>
		*--str = 'x';
 8017594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017596:	3b01      	subs	r3, #1
 8017598:	647b      	str	r3, [r7, #68]	; 0x44
 801759a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801759c:	2278      	movs	r2, #120	; 0x78
 801759e:	701a      	strb	r2, [r3, #0]
		*--str = '0';
 80175a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80175a2:	3b01      	subs	r3, #1
 80175a4:	647b      	str	r3, [r7, #68]	; 0x44
 80175a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80175a8:	2230      	movs	r2, #48	; 0x30
 80175aa:	701a      	strb	r2, [r3, #0]
		break;
 80175ac:	bf00      	nop
	    }
	    len = num + sizeof(num) - 1 - str;
 80175ae:	f107 0310 	add.w	r3, r7, #16
 80175b2:	331f      	adds	r3, #31
 80175b4:	461a      	mov	r2, r3
 80175b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80175b8:	1ad3      	subs	r3, r2, r3
 80175ba:	657b      	str	r3, [r7, #84]	; 0x54
 80175bc:	e00d      	b.n	80175da <ppp_vslprintf+0x786>
	} else {
	    len = strlen(str);
 80175be:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80175c0:	f7e8 fe10 	bl	80001e4 <strlen>
 80175c4:	4603      	mov	r3, r0
 80175c6:	657b      	str	r3, [r7, #84]	; 0x54
	    if (prec >= 0 && len > prec)
 80175c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	db05      	blt.n	80175da <ppp_vslprintf+0x786>
 80175ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80175d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80175d2:	429a      	cmp	r2, r3
 80175d4:	dd01      	ble.n	80175da <ppp_vslprintf+0x786>
		len = prec;
 80175d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80175d8:	657b      	str	r3, [r7, #84]	; 0x54
	}
	if (width > 0) {
 80175da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80175dc:	2b00      	cmp	r3, #0
 80175de:	dd1d      	ble.n	801761c <ppp_vslprintf+0x7c8>
	    if (width > buflen)
 80175e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80175e2:	68bb      	ldr	r3, [r7, #8]
 80175e4:	429a      	cmp	r2, r3
 80175e6:	dd01      	ble.n	80175ec <ppp_vslprintf+0x798>
		width = buflen;
 80175e8:	68bb      	ldr	r3, [r7, #8]
 80175ea:	667b      	str	r3, [r7, #100]	; 0x64
	    if ((n = width - len) > 0) {
 80175ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80175ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80175f0:	1ad3      	subs	r3, r2, r3
 80175f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80175f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	dd10      	ble.n	801761c <ppp_vslprintf+0x7c8>
		buflen -= n;
 80175fa:	68ba      	ldr	r2, [r7, #8]
 80175fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80175fe:	1ad3      	subs	r3, r2, r3
 8017600:	60bb      	str	r3, [r7, #8]
		for (; n > 0; --n)
 8017602:	e008      	b.n	8017616 <ppp_vslprintf+0x7c2>
		    *buf++ = fillch;
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	1c5a      	adds	r2, r3, #1
 8017608:	60fa      	str	r2, [r7, #12]
 801760a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801760c:	b2d2      	uxtb	r2, r2
 801760e:	701a      	strb	r2, [r3, #0]
		for (; n > 0; --n)
 8017610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017612:	3b01      	subs	r3, #1
 8017614:	66bb      	str	r3, [r7, #104]	; 0x68
 8017616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017618:	2b00      	cmp	r3, #0
 801761a:	dcf3      	bgt.n	8017604 <ppp_vslprintf+0x7b0>
	    }
	}
	if (len > buflen)
 801761c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801761e:	68bb      	ldr	r3, [r7, #8]
 8017620:	429a      	cmp	r2, r3
 8017622:	dd01      	ble.n	8017628 <ppp_vslprintf+0x7d4>
	    len = buflen;
 8017624:	68bb      	ldr	r3, [r7, #8]
 8017626:	657b      	str	r3, [r7, #84]	; 0x54
	memcpy(buf, str, len);
 8017628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801762a:	461a      	mov	r2, r3
 801762c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801762e:	68f8      	ldr	r0, [r7, #12]
 8017630:	f000 fe22 	bl	8018278 <memcpy>
	buf += len;
 8017634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017636:	68fa      	ldr	r2, [r7, #12]
 8017638:	4413      	add	r3, r2
 801763a:	60fb      	str	r3, [r7, #12]
	buflen -= len;
 801763c:	68ba      	ldr	r2, [r7, #8]
 801763e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017640:	1ad3      	subs	r3, r2, r3
 8017642:	60bb      	str	r3, [r7, #8]
    while (buflen > 0) {
 8017644:	68bb      	ldr	r3, [r7, #8]
 8017646:	2b00      	cmp	r3, #0
 8017648:	f73f ac13 	bgt.w	8016e72 <ppp_vslprintf+0x1e>
 801764c:	e000      	b.n	8017650 <ppp_vslprintf+0x7fc>
	    break;
 801764e:	bf00      	nop
    }
    *buf = 0;
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	2200      	movs	r2, #0
 8017654:	701a      	strb	r2, [r3, #0]
    return buf - buf0;
 8017656:	68fa      	ldr	r2, [r7, #12]
 8017658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801765a:	1ad3      	subs	r3, r2, r3
}
 801765c:	4618      	mov	r0, r3
 801765e:	3774      	adds	r7, #116	; 0x74
 8017660:	46bd      	mov	sp, r7
 8017662:	bd90      	pop	{r4, r7, pc}
 8017664:	20000014 	.word	0x20000014

08017668 <ppp_logit>:
}

/*
 * ppp_logit - does the hard work for fatal et al.
 */
static void ppp_logit(int level, const char *fmt, va_list args) {
 8017668:	b580      	push	{r7, lr}
 801766a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 801766e:	af00      	add	r7, sp, #0
 8017670:	f107 030c 	add.w	r3, r7, #12
 8017674:	6018      	str	r0, [r3, #0]
 8017676:	f107 0308 	add.w	r3, r7, #8
 801767a:	6019      	str	r1, [r3, #0]
 801767c:	1d3b      	adds	r3, r7, #4
 801767e:	601a      	str	r2, [r3, #0]
    char buf[1024];

    ppp_vslprintf(buf, sizeof(buf), fmt, args);
 8017680:	1d3b      	adds	r3, r7, #4
 8017682:	f107 0208 	add.w	r2, r7, #8
 8017686:	f107 0010 	add.w	r0, r7, #16
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	6812      	ldr	r2, [r2, #0]
 801768e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017692:	f7ff fbdf 	bl	8016e54 <ppp_vslprintf>
    ppp_log_write(level, buf);
 8017696:	f107 0210 	add.w	r2, r7, #16
 801769a:	f107 030c 	add.w	r3, r7, #12
 801769e:	4611      	mov	r1, r2
 80176a0:	6818      	ldr	r0, [r3, #0]
 80176a2:	f000 f805 	bl	80176b0 <ppp_log_write>
}
 80176a6:	bf00      	nop
 80176a8:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}

080176b0 <ppp_log_write>:

static void ppp_log_write(int level, char *buf) {
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b082      	sub	sp, #8
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
 80176b8:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(level); /* necessary if PPPDEBUG is defined to an empty function */
    LWIP_UNUSED_ARG(buf);
    PPPDEBUG(level, ("%s\n", buf) );
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d00e      	beq.n	80176e2 <ppp_log_write+0x32>
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d009      	beq.n	80176e2 <ppp_log_write+0x32>
 80176ce:	6839      	ldr	r1, [r7, #0]
 80176d0:	4806      	ldr	r0, [pc, #24]	; (80176ec <ppp_log_write+0x3c>)
 80176d2:	f7e9 fe0e 	bl	80012f2 <lwip_win32_platform_diag>
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	f003 0308 	and.w	r3, r3, #8
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d000      	beq.n	80176e2 <ppp_log_write+0x32>
 80176e0:	e7fe      	b.n	80176e0 <ppp_log_write+0x30>
	if (write(log_to_fd, buf, n) != n
	    || write(log_to_fd, "\n", 1) != 1)
	    log_to_fd = -1;
    }
#endif
}
 80176e2:	bf00      	nop
 80176e4:	3708      	adds	r7, #8
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bd80      	pop	{r7, pc}
 80176ea:	bf00      	nop
 80176ec:	0801d908 	.word	0x0801d908

080176f0 <ppp_fatal_impl>:

/*
 * ppp_fatal - log an error message and die horribly.
 */
void ppp_fatal_impl(const char *fmt, ...) {
 80176f0:	b40f      	push	{r0, r1, r2, r3}
 80176f2:	b580      	push	{r7, lr}
 80176f4:	b082      	sub	sp, #8
 80176f6:	af00      	add	r7, sp, #0
    va_list pvar;

    va_start(pvar, fmt);
 80176f8:	f107 0314 	add.w	r3, r7, #20
 80176fc:	607b      	str	r3, [r7, #4]
    ppp_logit(LOG_ERR, fmt, pvar);
 80176fe:	687a      	ldr	r2, [r7, #4]
 8017700:	6939      	ldr	r1, [r7, #16]
 8017702:	2083      	movs	r0, #131	; 0x83
 8017704:	f7ff ffb0 	bl	8017668 <ppp_logit>
    va_end(pvar);

    LWIP_ASSERT("ppp_fatal", 0);   /* as promised */
 8017708:	4b05      	ldr	r3, [pc, #20]	; (8017720 <ppp_fatal_impl+0x30>)
 801770a:	f240 227f 	movw	r2, #639	; 0x27f
 801770e:	4905      	ldr	r1, [pc, #20]	; (8017724 <ppp_fatal_impl+0x34>)
 8017710:	4805      	ldr	r0, [pc, #20]	; (8017728 <ppp_fatal_impl+0x38>)
 8017712:	f000 fb8f 	bl	8017e34 <iprintf>
 8017716:	2000      	movs	r0, #0
 8017718:	f000 fc8e 	bl	8018038 <fflush>
 801771c:	f000 fbd3 	bl	8017ec6 <abort>
 8017720:	0801d90c 	.word	0x0801d90c
 8017724:	0801d934 	.word	0x0801d934
 8017728:	0801d940 	.word	0x0801d940

0801772c <ppp_error_impl>:
}

/*
 * ppp_error - log an error message.
 */
void ppp_error_impl(const char *fmt, ...) {
 801772c:	b40f      	push	{r0, r1, r2, r3}
 801772e:	b580      	push	{r7, lr}
 8017730:	b082      	sub	sp, #8
 8017732:	af00      	add	r7, sp, #0
    va_list pvar;

    va_start(pvar, fmt);
 8017734:	f107 0314 	add.w	r3, r7, #20
 8017738:	607b      	str	r3, [r7, #4]
    ppp_logit(LOG_ERR, fmt, pvar);
 801773a:	687a      	ldr	r2, [r7, #4]
 801773c:	6939      	ldr	r1, [r7, #16]
 801773e:	2083      	movs	r0, #131	; 0x83
 8017740:	f7ff ff92 	bl	8017668 <ppp_logit>
    va_end(pvar);
#if 0 /* UNUSED */
    ++error_count;
#endif /* UNUSED */
}
 8017744:	bf00      	nop
 8017746:	3708      	adds	r7, #8
 8017748:	46bd      	mov	sp, r7
 801774a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801774e:	b004      	add	sp, #16
 8017750:	4770      	bx	lr

08017752 <ppp_warn_impl>:

/*
 * ppp_warn - log a warning message.
 */
void ppp_warn_impl(const char *fmt, ...) {
 8017752:	b40f      	push	{r0, r1, r2, r3}
 8017754:	b580      	push	{r7, lr}
 8017756:	b082      	sub	sp, #8
 8017758:	af00      	add	r7, sp, #0
    va_list pvar;

    va_start(pvar, fmt);
 801775a:	f107 0314 	add.w	r3, r7, #20
 801775e:	607b      	str	r3, [r7, #4]
    ppp_logit(LOG_WARNING, fmt, pvar);
 8017760:	687a      	ldr	r2, [r7, #4]
 8017762:	6939      	ldr	r1, [r7, #16]
 8017764:	2081      	movs	r0, #129	; 0x81
 8017766:	f7ff ff7f 	bl	8017668 <ppp_logit>
    va_end(pvar);
}
 801776a:	bf00      	nop
 801776c:	3708      	adds	r7, #8
 801776e:	46bd      	mov	sp, r7
 8017770:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8017774:	b004      	add	sp, #16
 8017776:	4770      	bx	lr

08017778 <ppp_notice_impl>:

/*
 * ppp_notice - log a notice-level message.
 */
void ppp_notice_impl(const char *fmt, ...) {
 8017778:	b40f      	push	{r0, r1, r2, r3}
 801777a:	b580      	push	{r7, lr}
 801777c:	b082      	sub	sp, #8
 801777e:	af00      	add	r7, sp, #0
    va_list pvar;

    va_start(pvar, fmt);
 8017780:	f107 0314 	add.w	r3, r7, #20
 8017784:	607b      	str	r3, [r7, #4]
    ppp_logit(LOG_NOTICE, fmt, pvar);
 8017786:	687a      	ldr	r2, [r7, #4]
 8017788:	6939      	ldr	r1, [r7, #16]
 801778a:	2081      	movs	r0, #129	; 0x81
 801778c:	f7ff ff6c 	bl	8017668 <ppp_logit>
    va_end(pvar);
}
 8017790:	bf00      	nop
 8017792:	3708      	adds	r7, #8
 8017794:	46bd      	mov	sp, r7
 8017796:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801779a:	b004      	add	sp, #16
 801779c:	4770      	bx	lr

0801779e <ppp_info_impl>:

/*
 * ppp_info - log an informational message.
 */
void ppp_info_impl(const char *fmt, ...) {
 801779e:	b40f      	push	{r0, r1, r2, r3}
 80177a0:	b580      	push	{r7, lr}
 80177a2:	b082      	sub	sp, #8
 80177a4:	af00      	add	r7, sp, #0
    va_list pvar;

    va_start(pvar, fmt);
 80177a6:	f107 0314 	add.w	r3, r7, #20
 80177aa:	607b      	str	r3, [r7, #4]
    ppp_logit(LOG_INFO, fmt, pvar);
 80177ac:	687a      	ldr	r2, [r7, #4]
 80177ae:	6939      	ldr	r1, [r7, #16]
 80177b0:	2080      	movs	r0, #128	; 0x80
 80177b2:	f7ff ff59 	bl	8017668 <ppp_logit>
    va_end(pvar);
}
 80177b6:	bf00      	nop
 80177b8:	3708      	adds	r7, #8
 80177ba:	46bd      	mov	sp, r7
 80177bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80177c0:	b004      	add	sp, #16
 80177c2:	4770      	bx	lr

080177c4 <ppp_dbglog_impl>:

/*
 * ppp_dbglog - log a debug message.
 */
void ppp_dbglog_impl(const char *fmt, ...) {
 80177c4:	b40f      	push	{r0, r1, r2, r3}
 80177c6:	b580      	push	{r7, lr}
 80177c8:	b082      	sub	sp, #8
 80177ca:	af00      	add	r7, sp, #0
    va_list pvar;

    va_start(pvar, fmt);
 80177cc:	f107 0314 	add.w	r3, r7, #20
 80177d0:	607b      	str	r3, [r7, #4]
    ppp_logit(LOG_DEBUG, fmt, pvar);
 80177d2:	687a      	ldr	r2, [r7, #4]
 80177d4:	6939      	ldr	r1, [r7, #16]
 80177d6:	2080      	movs	r0, #128	; 0x80
 80177d8:	f7ff ff46 	bl	8017668 <ppp_logit>
    va_end(pvar);
}
 80177dc:	bf00      	nop
 80177de:	3708      	adds	r7, #8
 80177e0:	46bd      	mov	sp, r7
 80177e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80177e6:	b004      	add	sp, #16
 80177e8:	4770      	bx	lr
	...

080177ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80177ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8017824 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80177f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80177f2:	e003      	b.n	80177fc <LoopCopyDataInit>

080177f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80177f4:	4b0c      	ldr	r3, [pc, #48]	; (8017828 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80177f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80177f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80177fa:	3104      	adds	r1, #4

080177fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80177fc:	480b      	ldr	r0, [pc, #44]	; (801782c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80177fe:	4b0c      	ldr	r3, [pc, #48]	; (8017830 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8017800:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8017802:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8017804:	d3f6      	bcc.n	80177f4 <CopyDataInit>
  ldr  r2, =_sbss
 8017806:	4a0b      	ldr	r2, [pc, #44]	; (8017834 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8017808:	e002      	b.n	8017810 <LoopFillZerobss>

0801780a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801780a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801780c:	f842 3b04 	str.w	r3, [r2], #4

08017810 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8017810:	4b09      	ldr	r3, [pc, #36]	; (8017838 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8017812:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8017814:	d3f9      	bcc.n	801780a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8017816:	f000 f8d5 	bl	80179c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801781a:	f000 fce9 	bl	80181f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801781e:	f7e9 fc0f 	bl	8001040 <main>
  bx  lr    
 8017822:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8017824:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8017828:	0801e0f4 	.word	0x0801e0f4
  ldr  r0, =_sdata
 801782c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8017830:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8017834:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8017838:	2000427c 	.word	0x2000427c

0801783c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801783c:	e7fe      	b.n	801783c <ADC_IRQHandler>

0801783e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 801783e:	b480      	push	{r7}
 8017840:	af00      	add	r7, sp, #0
}
 8017842:	bf00      	nop
 8017844:	46bd      	mov	sp, r7
 8017846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784a:	4770      	bx	lr

0801784c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 801784c:	b480      	push	{r7}
 801784e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8017850:	e7fe      	b.n	8017850 <HardFault_Handler+0x4>

08017852 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8017852:	b480      	push	{r7}
 8017854:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8017856:	e7fe      	b.n	8017856 <MemManage_Handler+0x4>

08017858 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8017858:	b480      	push	{r7}
 801785a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 801785c:	e7fe      	b.n	801785c <BusFault_Handler+0x4>

0801785e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 801785e:	b480      	push	{r7}
 8017860:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8017862:	e7fe      	b.n	8017862 <UsageFault_Handler+0x4>

08017864 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8017864:	b480      	push	{r7}
 8017866:	af00      	add	r7, sp, #0
}
 8017868:	bf00      	nop
 801786a:	46bd      	mov	sp, r7
 801786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017870:	4770      	bx	lr

08017872 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8017872:	b480      	push	{r7}
 8017874:	af00      	add	r7, sp, #0
}
 8017876:	bf00      	nop
 8017878:	46bd      	mov	sp, r7
 801787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801787e:	4770      	bx	lr

08017880 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8017880:	b480      	push	{r7}
 8017882:	af00      	add	r7, sp, #0
}
 8017884:	bf00      	nop
 8017886:	46bd      	mov	sp, r7
 8017888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801788c:	4770      	bx	lr

0801788e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 801788e:	b480      	push	{r7}
 8017890:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8017892:	bf00      	nop
 8017894:	46bd      	mov	sp, r7
 8017896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801789a:	4770      	bx	lr

0801789c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801789c:	b480      	push	{r7}
 801789e:	af00      	add	r7, sp, #0
	errno = ENOSYS;
 80178a0:	4b04      	ldr	r3, [pc, #16]	; (80178b4 <_getpid+0x18>)
 80178a2:	2226      	movs	r2, #38	; 0x26
 80178a4:	601a      	str	r2, [r3, #0]
	return -1;
 80178a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80178aa:	4618      	mov	r0, r3
 80178ac:	46bd      	mov	sp, r7
 80178ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178b2:	4770      	bx	lr
 80178b4:	20004278 	.word	0x20004278

080178b8 <_kill>:
  errno = ENOSYS;
  return -1;
}

int _kill(int32_t pid, int32_t sig)
{
 80178b8:	b480      	push	{r7}
 80178ba:	b083      	sub	sp, #12
 80178bc:	af00      	add	r7, sp, #0
 80178be:	6078      	str	r0, [r7, #4]
 80178c0:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 80178c2:	4b05      	ldr	r3, [pc, #20]	; (80178d8 <_kill+0x20>)
 80178c4:	2226      	movs	r2, #38	; 0x26
 80178c6:	601a      	str	r2, [r3, #0]
	return -1;
 80178c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80178cc:	4618      	mov	r0, r3
 80178ce:	370c      	adds	r7, #12
 80178d0:	46bd      	mov	sp, r7
 80178d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d6:	4770      	bx	lr
 80178d8:	20004278 	.word	0x20004278

080178dc <_exit>:

void _exit(int32_t status)
{
 80178dc:	b480      	push	{r7}
 80178de:	b083      	sub	sp, #12
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	6078      	str	r0, [r7, #4]
	while (1) {}		/* Make sure we hang here */
 80178e4:	e7fe      	b.n	80178e4 <_exit+0x8>
	...

080178e8 <_write>:
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80178e8:	b480      	push	{r7}
 80178ea:	b085      	sub	sp, #20
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	60f8      	str	r0, [r7, #12]
 80178f0:	60b9      	str	r1, [r7, #8]
 80178f2:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	
	errno = ENOSYS;
 80178f4:	4b05      	ldr	r3, [pc, #20]	; (801790c <_write+0x24>)
 80178f6:	2226      	movs	r2, #38	; 0x26
 80178f8:	601a      	str	r2, [r3, #0]
	return -1;
 80178fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80178fe:	4618      	mov	r0, r3
 8017900:	3714      	adds	r7, #20
 8017902:	46bd      	mov	sp, r7
 8017904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017908:	4770      	bx	lr
 801790a:	bf00      	nop
 801790c:	20004278 	.word	0x20004278

08017910 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8017910:	b480      	push	{r7}
 8017912:	b085      	sub	sp, #20
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8017918:	4b0b      	ldr	r3, [pc, #44]	; (8017948 <_sbrk+0x38>)
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d102      	bne.n	8017926 <_sbrk+0x16>
		heap_end = & end;
 8017920:	4b09      	ldr	r3, [pc, #36]	; (8017948 <_sbrk+0x38>)
 8017922:	4a0a      	ldr	r2, [pc, #40]	; (801794c <_sbrk+0x3c>)
 8017924:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8017926:	4b08      	ldr	r3, [pc, #32]	; (8017948 <_sbrk+0x38>)
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 801792c:	4b06      	ldr	r3, [pc, #24]	; (8017948 <_sbrk+0x38>)
 801792e:	681a      	ldr	r2, [r3, #0]
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	4413      	add	r3, r2
 8017934:	4a04      	ldr	r2, [pc, #16]	; (8017948 <_sbrk+0x38>)
 8017936:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8017938:	68fb      	ldr	r3, [r7, #12]
}
 801793a:	4618      	mov	r0, r3
 801793c:	3714      	adds	r7, #20
 801793e:	46bd      	mov	sp, r7
 8017940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017944:	4770      	bx	lr
 8017946:	bf00      	nop
 8017948:	20000c50 	.word	0x20000c50
 801794c:	2000427c 	.word	0x2000427c

08017950 <_close>:

int _close(int32_t file)
{
 8017950:	b480      	push	{r7}
 8017952:	b083      	sub	sp, #12
 8017954:	af00      	add	r7, sp, #0
 8017956:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8017958:	4b05      	ldr	r3, [pc, #20]	; (8017970 <_close+0x20>)
 801795a:	2226      	movs	r2, #38	; 0x26
 801795c:	601a      	str	r2, [r3, #0]
	return -1;
 801795e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017962:	4618      	mov	r0, r3
 8017964:	370c      	adds	r7, #12
 8017966:	46bd      	mov	sp, r7
 8017968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801796c:	4770      	bx	lr
 801796e:	bf00      	nop
 8017970:	20004278 	.word	0x20004278

08017974 <_lseek>:
	errno = ENOSYS;
	return 0;
}

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8017974:	b480      	push	{r7}
 8017976:	b085      	sub	sp, #20
 8017978:	af00      	add	r7, sp, #0
 801797a:	60f8      	str	r0, [r7, #12]
 801797c:	60b9      	str	r1, [r7, #8]
 801797e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8017980:	4b05      	ldr	r3, [pc, #20]	; (8017998 <_lseek+0x24>)
 8017982:	2226      	movs	r2, #38	; 0x26
 8017984:	601a      	str	r2, [r3, #0]
	return -1;
 8017986:	f04f 33ff 	mov.w	r3, #4294967295
}
 801798a:	4618      	mov	r0, r3
 801798c:	3714      	adds	r7, #20
 801798e:	46bd      	mov	sp, r7
 8017990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017994:	4770      	bx	lr
 8017996:	bf00      	nop
 8017998:	20004278 	.word	0x20004278

0801799c <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 801799c:	b480      	push	{r7}
 801799e:	b085      	sub	sp, #20
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	60f8      	str	r0, [r7, #12]
 80179a4:	60b9      	str	r1, [r7, #8]
 80179a6:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80179a8:	4b05      	ldr	r3, [pc, #20]	; (80179c0 <_read+0x24>)
 80179aa:	2226      	movs	r2, #38	; 0x26
 80179ac:	601a      	str	r2, [r3, #0]
	return -1;
 80179ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80179b2:	4618      	mov	r0, r3
 80179b4:	3714      	adds	r7, #20
 80179b6:	46bd      	mov	sp, r7
 80179b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179bc:	4770      	bx	lr
 80179be:	bf00      	nop
 80179c0:	20004278 	.word	0x20004278

080179c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80179c4:	b580      	push	{r7, lr}
 80179c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80179c8:	4a16      	ldr	r2, [pc, #88]	; (8017a24 <SystemInit+0x60>)
 80179ca:	4b16      	ldr	r3, [pc, #88]	; (8017a24 <SystemInit+0x60>)
 80179cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80179d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80179d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80179d8:	4a13      	ldr	r2, [pc, #76]	; (8017a28 <SystemInit+0x64>)
 80179da:	4b13      	ldr	r3, [pc, #76]	; (8017a28 <SystemInit+0x64>)
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	f043 0301 	orr.w	r3, r3, #1
 80179e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80179e4:	4b10      	ldr	r3, [pc, #64]	; (8017a28 <SystemInit+0x64>)
 80179e6:	2200      	movs	r2, #0
 80179e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80179ea:	4a0f      	ldr	r2, [pc, #60]	; (8017a28 <SystemInit+0x64>)
 80179ec:	4b0e      	ldr	r3, [pc, #56]	; (8017a28 <SystemInit+0x64>)
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80179f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80179f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80179fa:	4b0b      	ldr	r3, [pc, #44]	; (8017a28 <SystemInit+0x64>)
 80179fc:	4a0b      	ldr	r2, [pc, #44]	; (8017a2c <SystemInit+0x68>)
 80179fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8017a00:	4a09      	ldr	r2, [pc, #36]	; (8017a28 <SystemInit+0x64>)
 8017a02:	4b09      	ldr	r3, [pc, #36]	; (8017a28 <SystemInit+0x64>)
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8017a0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8017a0c:	4b06      	ldr	r3, [pc, #24]	; (8017a28 <SystemInit+0x64>)
 8017a0e:	2200      	movs	r2, #0
 8017a10:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8017a12:	f000 f80d 	bl	8017a30 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8017a16:	4b03      	ldr	r3, [pc, #12]	; (8017a24 <SystemInit+0x60>)
 8017a18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8017a1c:	609a      	str	r2, [r3, #8]
#endif
}
 8017a1e:	bf00      	nop
 8017a20:	bd80      	pop	{r7, pc}
 8017a22:	bf00      	nop
 8017a24:	e000ed00 	.word	0xe000ed00
 8017a28:	40023800 	.word	0x40023800
 8017a2c:	24003010 	.word	0x24003010

08017a30 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8017a30:	b480      	push	{r7}
 8017a32:	b083      	sub	sp, #12
 8017a34:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8017a36:	2300      	movs	r3, #0
 8017a38:	607b      	str	r3, [r7, #4]
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	603b      	str	r3, [r7, #0]
  //RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8017a3e:	4b33      	ldr	r3, [pc, #204]	; (8017b0c <SetSysClock+0xdc>)
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017a46:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	3301      	adds	r3, #1
 8017a4c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8017a4e:	683b      	ldr	r3, [r7, #0]
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d103      	bne.n	8017a5c <SetSysClock+0x2c>
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8017a5a:	d1f0      	bne.n	8017a3e <SetSysClock+0xe>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8017a5c:	4b2b      	ldr	r3, [pc, #172]	; (8017b0c <SetSysClock+0xdc>)
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d002      	beq.n	8017a6e <SetSysClock+0x3e>
  {
    HSEStatus = (uint32_t)0x01;
 8017a68:	2301      	movs	r3, #1
 8017a6a:	603b      	str	r3, [r7, #0]
 8017a6c:	e001      	b.n	8017a72 <SetSysClock+0x42>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8017a6e:	2300      	movs	r3, #0
 8017a70:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8017a72:	683b      	ldr	r3, [r7, #0]
 8017a74:	2b01      	cmp	r3, #1
 8017a76:	d142      	bne.n	8017afe <SetSysClock+0xce>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8017a78:	4a24      	ldr	r2, [pc, #144]	; (8017b0c <SetSysClock+0xdc>)
 8017a7a:	4b24      	ldr	r3, [pc, #144]	; (8017b0c <SetSysClock+0xdc>)
 8017a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017a82:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8017a84:	4a22      	ldr	r2, [pc, #136]	; (8017b10 <SetSysClock+0xe0>)
 8017a86:	4b22      	ldr	r3, [pc, #136]	; (8017b10 <SetSysClock+0xe0>)
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8017a8e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8017a90:	4a1e      	ldr	r2, [pc, #120]	; (8017b0c <SetSysClock+0xdc>)
 8017a92:	4b1e      	ldr	r3, [pc, #120]	; (8017b0c <SetSysClock+0xdc>)
 8017a94:	689b      	ldr	r3, [r3, #8]
 8017a96:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8017a98:	4a1c      	ldr	r2, [pc, #112]	; (8017b0c <SetSysClock+0xdc>)
 8017a9a:	4b1c      	ldr	r3, [pc, #112]	; (8017b0c <SetSysClock+0xdc>)
 8017a9c:	689b      	ldr	r3, [r3, #8]
 8017a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017aa2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8017aa4:	4a19      	ldr	r2, [pc, #100]	; (8017b0c <SetSysClock+0xdc>)
 8017aa6:	4b19      	ldr	r3, [pc, #100]	; (8017b0c <SetSysClock+0xdc>)
 8017aa8:	689b      	ldr	r3, [r3, #8]
 8017aaa:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8017aae:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8017ab0:	4b16      	ldr	r3, [pc, #88]	; (8017b0c <SetSysClock+0xdc>)
 8017ab2:	4a18      	ldr	r2, [pc, #96]	; (8017b14 <SetSysClock+0xe4>)
 8017ab4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8017ab6:	4a15      	ldr	r2, [pc, #84]	; (8017b0c <SetSysClock+0xdc>)
 8017ab8:	4b14      	ldr	r3, [pc, #80]	; (8017b0c <SetSysClock+0xdc>)
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017ac0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8017ac2:	bf00      	nop
 8017ac4:	4b11      	ldr	r3, [pc, #68]	; (8017b0c <SetSysClock+0xdc>)
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d0f9      	beq.n	8017ac4 <SetSysClock+0x94>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8017ad0:	4b11      	ldr	r3, [pc, #68]	; (8017b18 <SetSysClock+0xe8>)
 8017ad2:	f240 7205 	movw	r2, #1797	; 0x705
 8017ad6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8017ad8:	4a0c      	ldr	r2, [pc, #48]	; (8017b0c <SetSysClock+0xdc>)
 8017ada:	4b0c      	ldr	r3, [pc, #48]	; (8017b0c <SetSysClock+0xdc>)
 8017adc:	689b      	ldr	r3, [r3, #8]
 8017ade:	f023 0303 	bic.w	r3, r3, #3
 8017ae2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8017ae4:	4a09      	ldr	r2, [pc, #36]	; (8017b0c <SetSysClock+0xdc>)
 8017ae6:	4b09      	ldr	r3, [pc, #36]	; (8017b0c <SetSysClock+0xdc>)
 8017ae8:	689b      	ldr	r3, [r3, #8]
 8017aea:	f043 0302 	orr.w	r3, r3, #2
 8017aee:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8017af0:	bf00      	nop
 8017af2:	4b06      	ldr	r3, [pc, #24]	; (8017b0c <SetSysClock+0xdc>)
 8017af4:	689b      	ldr	r3, [r3, #8]
 8017af6:	f003 030c 	and.w	r3, r3, #12
 8017afa:	2b08      	cmp	r3, #8
 8017afc:	d1f9      	bne.n	8017af2 <SetSysClock+0xc2>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8017afe:	bf00      	nop
 8017b00:	370c      	adds	r7, #12
 8017b02:	46bd      	mov	sp, r7
 8017b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b08:	4770      	bx	lr
 8017b0a:	bf00      	nop
 8017b0c:	40023800 	.word	0x40023800
 8017b10:	40007000 	.word	0x40007000
 8017b14:	07405419 	.word	0x07405419
 8017b18:	40023c00 	.word	0x40023c00

08017b1c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8017b1c:	b480      	push	{r7}
 8017b1e:	b087      	sub	sp, #28
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	60f8      	str	r0, [r7, #12]
 8017b24:	60b9      	str	r1, [r7, #8]
 8017b26:	607a      	str	r2, [r7, #4]
	int div = 1;
 8017b28:	2301      	movs	r3, #1
 8017b2a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8017b2c:	e004      	b.n	8017b38 <ts_itoa+0x1c>
		div *= base;
 8017b2e:	697b      	ldr	r3, [r7, #20]
 8017b30:	687a      	ldr	r2, [r7, #4]
 8017b32:	fb02 f303 	mul.w	r3, r2, r3
 8017b36:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8017b38:	697b      	ldr	r3, [r7, #20]
 8017b3a:	68ba      	ldr	r2, [r7, #8]
 8017b3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	429a      	cmp	r2, r3
 8017b44:	d2f3      	bcs.n	8017b2e <ts_itoa+0x12>

	while (div != 0)
 8017b46:	e029      	b.n	8017b9c <ts_itoa+0x80>
	{
		int num = d/div;
 8017b48:	697b      	ldr	r3, [r7, #20]
 8017b4a:	68ba      	ldr	r2, [r7, #8]
 8017b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8017b50:	613b      	str	r3, [r7, #16]
		d = d%div;
 8017b52:	697a      	ldr	r2, [r7, #20]
 8017b54:	68bb      	ldr	r3, [r7, #8]
 8017b56:	fbb3 f1f2 	udiv	r1, r3, r2
 8017b5a:	fb02 f201 	mul.w	r2, r2, r1
 8017b5e:	1a9b      	subs	r3, r3, r2
 8017b60:	60bb      	str	r3, [r7, #8]
		div /= base;
 8017b62:	697a      	ldr	r2, [r7, #20]
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8017b6a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8017b6c:	693b      	ldr	r3, [r7, #16]
 8017b6e:	2b09      	cmp	r3, #9
 8017b70:	dd0a      	ble.n	8017b88 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	1c59      	adds	r1, r3, #1
 8017b78:	68fa      	ldr	r2, [r7, #12]
 8017b7a:	6011      	str	r1, [r2, #0]
 8017b7c:	693a      	ldr	r2, [r7, #16]
 8017b7e:	b2d2      	uxtb	r2, r2
 8017b80:	3237      	adds	r2, #55	; 0x37
 8017b82:	b2d2      	uxtb	r2, r2
 8017b84:	701a      	strb	r2, [r3, #0]
 8017b86:	e009      	b.n	8017b9c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	1c59      	adds	r1, r3, #1
 8017b8e:	68fa      	ldr	r2, [r7, #12]
 8017b90:	6011      	str	r1, [r2, #0]
 8017b92:	693a      	ldr	r2, [r7, #16]
 8017b94:	b2d2      	uxtb	r2, r2
 8017b96:	3230      	adds	r2, #48	; 0x30
 8017b98:	b2d2      	uxtb	r2, r2
 8017b9a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8017b9c:	697b      	ldr	r3, [r7, #20]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d1d2      	bne.n	8017b48 <ts_itoa+0x2c>
	}
}
 8017ba2:	bf00      	nop
 8017ba4:	371c      	adds	r7, #28
 8017ba6:	46bd      	mov	sp, r7
 8017ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bac:	4770      	bx	lr

08017bae <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8017bae:	b580      	push	{r7, lr}
 8017bb0:	b088      	sub	sp, #32
 8017bb2:	af00      	add	r7, sp, #0
 8017bb4:	60f8      	str	r0, [r7, #12]
 8017bb6:	60b9      	str	r1, [r7, #8]
 8017bb8:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8017bbe:	e07d      	b.n	8017cbc <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8017bc0:	68bb      	ldr	r3, [r7, #8]
 8017bc2:	781b      	ldrb	r3, [r3, #0]
 8017bc4:	2b25      	cmp	r3, #37	; 0x25
 8017bc6:	d171      	bne.n	8017cac <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8017bc8:	68bb      	ldr	r3, [r7, #8]
 8017bca:	3301      	adds	r3, #1
 8017bcc:	60bb      	str	r3, [r7, #8]
 8017bce:	68bb      	ldr	r3, [r7, #8]
 8017bd0:	781b      	ldrb	r3, [r3, #0]
 8017bd2:	2b64      	cmp	r3, #100	; 0x64
 8017bd4:	d01e      	beq.n	8017c14 <ts_formatstring+0x66>
 8017bd6:	2b64      	cmp	r3, #100	; 0x64
 8017bd8:	dc06      	bgt.n	8017be8 <ts_formatstring+0x3a>
 8017bda:	2b58      	cmp	r3, #88	; 0x58
 8017bdc:	d050      	beq.n	8017c80 <ts_formatstring+0xd2>
 8017bde:	2b63      	cmp	r3, #99	; 0x63
 8017be0:	d00e      	beq.n	8017c00 <ts_formatstring+0x52>
 8017be2:	2b25      	cmp	r3, #37	; 0x25
 8017be4:	d058      	beq.n	8017c98 <ts_formatstring+0xea>
 8017be6:	e05d      	b.n	8017ca4 <ts_formatstring+0xf6>
 8017be8:	2b73      	cmp	r3, #115	; 0x73
 8017bea:	d02b      	beq.n	8017c44 <ts_formatstring+0x96>
 8017bec:	2b73      	cmp	r3, #115	; 0x73
 8017bee:	dc02      	bgt.n	8017bf6 <ts_formatstring+0x48>
 8017bf0:	2b69      	cmp	r3, #105	; 0x69
 8017bf2:	d00f      	beq.n	8017c14 <ts_formatstring+0x66>
 8017bf4:	e056      	b.n	8017ca4 <ts_formatstring+0xf6>
 8017bf6:	2b75      	cmp	r3, #117	; 0x75
 8017bf8:	d037      	beq.n	8017c6a <ts_formatstring+0xbc>
 8017bfa:	2b78      	cmp	r3, #120	; 0x78
 8017bfc:	d040      	beq.n	8017c80 <ts_formatstring+0xd2>
 8017bfe:	e051      	b.n	8017ca4 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	1c5a      	adds	r2, r3, #1
 8017c04:	60fa      	str	r2, [r7, #12]
 8017c06:	687a      	ldr	r2, [r7, #4]
 8017c08:	1d11      	adds	r1, r2, #4
 8017c0a:	6079      	str	r1, [r7, #4]
 8017c0c:	6812      	ldr	r2, [r2, #0]
 8017c0e:	b2d2      	uxtb	r2, r2
 8017c10:	701a      	strb	r2, [r3, #0]
				break;
 8017c12:	e047      	b.n	8017ca4 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	1d1a      	adds	r2, r3, #4
 8017c18:	607a      	str	r2, [r7, #4]
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8017c1e:	69fb      	ldr	r3, [r7, #28]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	da07      	bge.n	8017c34 <ts_formatstring+0x86>
					{
						val *= -1;
 8017c24:	69fb      	ldr	r3, [r7, #28]
 8017c26:	425b      	negs	r3, r3
 8017c28:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	1c5a      	adds	r2, r3, #1
 8017c2e:	60fa      	str	r2, [r7, #12]
 8017c30:	222d      	movs	r2, #45	; 0x2d
 8017c32:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8017c34:	69f9      	ldr	r1, [r7, #28]
 8017c36:	f107 030c 	add.w	r3, r7, #12
 8017c3a:	220a      	movs	r2, #10
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	f7ff ff6d 	bl	8017b1c <ts_itoa>
				}
				break;
 8017c42:	e02f      	b.n	8017ca4 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	1d1a      	adds	r2, r3, #4
 8017c48:	607a      	str	r2, [r7, #4]
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8017c4e:	e007      	b.n	8017c60 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	1c5a      	adds	r2, r3, #1
 8017c54:	60fa      	str	r2, [r7, #12]
 8017c56:	69ba      	ldr	r2, [r7, #24]
 8017c58:	1c51      	adds	r1, r2, #1
 8017c5a:	61b9      	str	r1, [r7, #24]
 8017c5c:	7812      	ldrb	r2, [r2, #0]
 8017c5e:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8017c60:	69bb      	ldr	r3, [r7, #24]
 8017c62:	781b      	ldrb	r3, [r3, #0]
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d1f3      	bne.n	8017c50 <ts_formatstring+0xa2>
					}
				}
				break;
 8017c68:	e01c      	b.n	8017ca4 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	1d1a      	adds	r2, r3, #4
 8017c6e:	607a      	str	r2, [r7, #4]
 8017c70:	6819      	ldr	r1, [r3, #0]
 8017c72:	f107 030c 	add.w	r3, r7, #12
 8017c76:	220a      	movs	r2, #10
 8017c78:	4618      	mov	r0, r3
 8017c7a:	f7ff ff4f 	bl	8017b1c <ts_itoa>
				break;
 8017c7e:	e011      	b.n	8017ca4 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	1d1a      	adds	r2, r3, #4
 8017c84:	607a      	str	r2, [r7, #4]
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	4619      	mov	r1, r3
 8017c8a:	f107 030c 	add.w	r3, r7, #12
 8017c8e:	2210      	movs	r2, #16
 8017c90:	4618      	mov	r0, r3
 8017c92:	f7ff ff43 	bl	8017b1c <ts_itoa>
				break;
 8017c96:	e005      	b.n	8017ca4 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	1c5a      	adds	r2, r3, #1
 8017c9c:	60fa      	str	r2, [r7, #12]
 8017c9e:	2225      	movs	r2, #37	; 0x25
 8017ca0:	701a      	strb	r2, [r3, #0]
				  break;
 8017ca2:	bf00      	nop
			}
			fmt++;
 8017ca4:	68bb      	ldr	r3, [r7, #8]
 8017ca6:	3301      	adds	r3, #1
 8017ca8:	60bb      	str	r3, [r7, #8]
 8017caa:	e007      	b.n	8017cbc <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	1c5a      	adds	r2, r3, #1
 8017cb0:	60fa      	str	r2, [r7, #12]
 8017cb2:	68ba      	ldr	r2, [r7, #8]
 8017cb4:	1c51      	adds	r1, r2, #1
 8017cb6:	60b9      	str	r1, [r7, #8]
 8017cb8:	7812      	ldrb	r2, [r2, #0]
 8017cba:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8017cbc:	68bb      	ldr	r3, [r7, #8]
 8017cbe:	781b      	ldrb	r3, [r3, #0]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	f47f af7d 	bne.w	8017bc0 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	2200      	movs	r2, #0
 8017cca:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	461a      	mov	r2, r3
 8017cd0:	697b      	ldr	r3, [r7, #20]
 8017cd2:	1ad3      	subs	r3, r2, r3
}
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	3720      	adds	r7, #32
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	bd80      	pop	{r7, pc}

08017cdc <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8017cdc:	b480      	push	{r7}
 8017cde:	b085      	sub	sp, #20
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	6078      	str	r0, [r7, #4]
 8017ce4:	6039      	str	r1, [r7, #0]
	int length = 0;
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8017cea:	e081      	b.n	8017df0 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	781b      	ldrb	r3, [r3, #0]
 8017cf0:	2b25      	cmp	r3, #37	; 0x25
 8017cf2:	d177      	bne.n	8017de4 <ts_formatlength+0x108>
		{
			++fmt;
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	3301      	adds	r3, #1
 8017cf8:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	781b      	ldrb	r3, [r3, #0]
 8017cfe:	3b58      	subs	r3, #88	; 0x58
 8017d00:	2b20      	cmp	r3, #32
 8017d02:	d86a      	bhi.n	8017dda <ts_formatlength+0xfe>
 8017d04:	a201      	add	r2, pc, #4	; (adr r2, 8017d0c <ts_formatlength+0x30>)
 8017d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d0a:	bf00      	nop
 8017d0c:	08017dcd 	.word	0x08017dcd
 8017d10:	08017ddb 	.word	0x08017ddb
 8017d14:	08017ddb 	.word	0x08017ddb
 8017d18:	08017ddb 	.word	0x08017ddb
 8017d1c:	08017ddb 	.word	0x08017ddb
 8017d20:	08017ddb 	.word	0x08017ddb
 8017d24:	08017ddb 	.word	0x08017ddb
 8017d28:	08017ddb 	.word	0x08017ddb
 8017d2c:	08017ddb 	.word	0x08017ddb
 8017d30:	08017ddb 	.word	0x08017ddb
 8017d34:	08017ddb 	.word	0x08017ddb
 8017d38:	08017d91 	.word	0x08017d91
 8017d3c:	08017d9f 	.word	0x08017d9f
 8017d40:	08017ddb 	.word	0x08017ddb
 8017d44:	08017ddb 	.word	0x08017ddb
 8017d48:	08017ddb 	.word	0x08017ddb
 8017d4c:	08017ddb 	.word	0x08017ddb
 8017d50:	08017d9f 	.word	0x08017d9f
 8017d54:	08017ddb 	.word	0x08017ddb
 8017d58:	08017ddb 	.word	0x08017ddb
 8017d5c:	08017ddb 	.word	0x08017ddb
 8017d60:	08017ddb 	.word	0x08017ddb
 8017d64:	08017ddb 	.word	0x08017ddb
 8017d68:	08017ddb 	.word	0x08017ddb
 8017d6c:	08017ddb 	.word	0x08017ddb
 8017d70:	08017ddb 	.word	0x08017ddb
 8017d74:	08017ddb 	.word	0x08017ddb
 8017d78:	08017dad 	.word	0x08017dad
 8017d7c:	08017ddb 	.word	0x08017ddb
 8017d80:	08017d9f 	.word	0x08017d9f
 8017d84:	08017ddb 	.word	0x08017ddb
 8017d88:	08017ddb 	.word	0x08017ddb
 8017d8c:	08017dcd 	.word	0x08017dcd
			{
			  case 'c':
		  		  va_arg(va, int);
 8017d90:	683b      	ldr	r3, [r7, #0]
 8017d92:	3304      	adds	r3, #4
 8017d94:	603b      	str	r3, [r7, #0]
				  ++length;
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	3301      	adds	r3, #1
 8017d9a:	60fb      	str	r3, [r7, #12]
				  break;
 8017d9c:	e025      	b.n	8017dea <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	330b      	adds	r3, #11
 8017da2:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8017da4:	683b      	ldr	r3, [r7, #0]
 8017da6:	3304      	adds	r3, #4
 8017da8:	603b      	str	r3, [r7, #0]
				  break;
 8017daa:	e01e      	b.n	8017dea <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8017dac:	683b      	ldr	r3, [r7, #0]
 8017dae:	1d1a      	adds	r2, r3, #4
 8017db0:	603a      	str	r2, [r7, #0]
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8017db6:	e002      	b.n	8017dbe <ts_formatlength+0xe2>
			  			  ++length;
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	3301      	adds	r3, #1
 8017dbc:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8017dbe:	68bb      	ldr	r3, [r7, #8]
 8017dc0:	1c5a      	adds	r2, r3, #1
 8017dc2:	60ba      	str	r2, [r7, #8]
 8017dc4:	781b      	ldrb	r3, [r3, #0]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d1f6      	bne.n	8017db8 <ts_formatlength+0xdc>
			  	  }
				  break;
 8017dca:	e00e      	b.n	8017dea <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	3308      	adds	r3, #8
 8017dd0:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8017dd2:	683b      	ldr	r3, [r7, #0]
 8017dd4:	3304      	adds	r3, #4
 8017dd6:	603b      	str	r3, [r7, #0]
				  break;
 8017dd8:	e007      	b.n	8017dea <ts_formatlength+0x10e>
			  default:
				  ++length;
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	3301      	adds	r3, #1
 8017dde:	60fb      	str	r3, [r7, #12]
				  break;
 8017de0:	bf00      	nop
 8017de2:	e002      	b.n	8017dea <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	3301      	adds	r3, #1
 8017de8:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	3301      	adds	r3, #1
 8017dee:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	781b      	ldrb	r3, [r3, #0]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	f47f af79 	bne.w	8017cec <ts_formatlength+0x10>
	}
	return length;
 8017dfa:	68fb      	ldr	r3, [r7, #12]
}
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	3714      	adds	r7, #20
 8017e00:	46bd      	mov	sp, r7
 8017e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e06:	4770      	bx	lr

08017e08 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8017e08:	b40e      	push	{r1, r2, r3}
 8017e0a:	b580      	push	{r7, lr}
 8017e0c:	b085      	sub	sp, #20
 8017e0e:	af00      	add	r7, sp, #0
 8017e10:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8017e12:	f107 0320 	add.w	r3, r7, #32
 8017e16:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8017e18:	68ba      	ldr	r2, [r7, #8]
 8017e1a:	69f9      	ldr	r1, [r7, #28]
 8017e1c:	6878      	ldr	r0, [r7, #4]
 8017e1e:	f7ff fec6 	bl	8017bae <ts_formatstring>
 8017e22:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8017e24:	68fb      	ldr	r3, [r7, #12]
}
 8017e26:	4618      	mov	r0, r3
 8017e28:	3714      	adds	r7, #20
 8017e2a:	46bd      	mov	sp, r7
 8017e2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8017e30:	b003      	add	sp, #12
 8017e32:	4770      	bx	lr

08017e34 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8017e34:	b40f      	push	{r0, r1, r2, r3}
 8017e36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e3a:	b085      	sub	sp, #20
 8017e3c:	af00      	add	r7, sp, #0
	int length = 0;
 8017e3e:	2300      	movs	r3, #0
 8017e40:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8017e42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017e46:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8017e48:	6839      	ldr	r1, [r7, #0]
 8017e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017e4c:	f7ff ff46 	bl	8017cdc <ts_formatlength>
 8017e50:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8017e52:	466b      	mov	r3, sp
 8017e54:	461e      	mov	r6, r3
		char buf[length];
 8017e56:	68f9      	ldr	r1, [r7, #12]
 8017e58:	1e4b      	subs	r3, r1, #1
 8017e5a:	60bb      	str	r3, [r7, #8]
 8017e5c:	460b      	mov	r3, r1
 8017e5e:	461a      	mov	r2, r3
 8017e60:	f04f 0300 	mov.w	r3, #0
 8017e64:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8017e68:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8017e6c:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8017e70:	460b      	mov	r3, r1
 8017e72:	461a      	mov	r2, r3
 8017e74:	f04f 0300 	mov.w	r3, #0
 8017e78:	00dd      	lsls	r5, r3, #3
 8017e7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8017e7e:	00d4      	lsls	r4, r2, #3
 8017e80:	460b      	mov	r3, r1
 8017e82:	3307      	adds	r3, #7
 8017e84:	08db      	lsrs	r3, r3, #3
 8017e86:	00db      	lsls	r3, r3, #3
 8017e88:	ebad 0d03 	sub.w	sp, sp, r3
 8017e8c:	466b      	mov	r3, sp
 8017e8e:	3300      	adds	r3, #0
 8017e90:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8017e92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017e96:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	683a      	ldr	r2, [r7, #0]
 8017e9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	f7ff fe85 	bl	8017bae <ts_formatstring>
 8017ea4:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	68fa      	ldr	r2, [r7, #12]
 8017eaa:	4619      	mov	r1, r3
 8017eac:	2001      	movs	r0, #1
 8017eae:	f7ff fd1b 	bl	80178e8 <_write>
 8017eb2:	60f8      	str	r0, [r7, #12]
 8017eb4:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8017eb6:	68fb      	ldr	r3, [r7, #12]
}
 8017eb8:	4618      	mov	r0, r3
 8017eba:	3714      	adds	r7, #20
 8017ebc:	46bd      	mov	sp, r7
 8017ebe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ec2:	b004      	add	sp, #16
 8017ec4:	4770      	bx	lr

08017ec6 <abort>:
 8017ec6:	b508      	push	{r3, lr}
 8017ec8:	2006      	movs	r0, #6
 8017eca:	f000 fae7 	bl	801849c <raise>
 8017ece:	2001      	movs	r0, #1
 8017ed0:	f7ff fd04 	bl	80178dc <_exit>

08017ed4 <__sflush_r>:
 8017ed4:	898a      	ldrh	r2, [r1, #12]
 8017ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017eda:	4605      	mov	r5, r0
 8017edc:	0710      	lsls	r0, r2, #28
 8017ede:	460c      	mov	r4, r1
 8017ee0:	d45a      	bmi.n	8017f98 <__sflush_r+0xc4>
 8017ee2:	684b      	ldr	r3, [r1, #4]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	dc05      	bgt.n	8017ef4 <__sflush_r+0x20>
 8017ee8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	dc02      	bgt.n	8017ef4 <__sflush_r+0x20>
 8017eee:	2000      	movs	r0, #0
 8017ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017ef6:	2e00      	cmp	r6, #0
 8017ef8:	d0f9      	beq.n	8017eee <__sflush_r+0x1a>
 8017efa:	2300      	movs	r3, #0
 8017efc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017f00:	682f      	ldr	r7, [r5, #0]
 8017f02:	602b      	str	r3, [r5, #0]
 8017f04:	d033      	beq.n	8017f6e <__sflush_r+0x9a>
 8017f06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017f08:	89a3      	ldrh	r3, [r4, #12]
 8017f0a:	075a      	lsls	r2, r3, #29
 8017f0c:	d505      	bpl.n	8017f1a <__sflush_r+0x46>
 8017f0e:	6863      	ldr	r3, [r4, #4]
 8017f10:	1ac0      	subs	r0, r0, r3
 8017f12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017f14:	b10b      	cbz	r3, 8017f1a <__sflush_r+0x46>
 8017f16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017f18:	1ac0      	subs	r0, r0, r3
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	4602      	mov	r2, r0
 8017f1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017f20:	6a21      	ldr	r1, [r4, #32]
 8017f22:	4628      	mov	r0, r5
 8017f24:	47b0      	blx	r6
 8017f26:	1c43      	adds	r3, r0, #1
 8017f28:	89a3      	ldrh	r3, [r4, #12]
 8017f2a:	d106      	bne.n	8017f3a <__sflush_r+0x66>
 8017f2c:	6829      	ldr	r1, [r5, #0]
 8017f2e:	291d      	cmp	r1, #29
 8017f30:	d84b      	bhi.n	8017fca <__sflush_r+0xf6>
 8017f32:	4a2b      	ldr	r2, [pc, #172]	; (8017fe0 <__sflush_r+0x10c>)
 8017f34:	40ca      	lsrs	r2, r1
 8017f36:	07d6      	lsls	r6, r2, #31
 8017f38:	d547      	bpl.n	8017fca <__sflush_r+0xf6>
 8017f3a:	2200      	movs	r2, #0
 8017f3c:	6062      	str	r2, [r4, #4]
 8017f3e:	04d9      	lsls	r1, r3, #19
 8017f40:	6922      	ldr	r2, [r4, #16]
 8017f42:	6022      	str	r2, [r4, #0]
 8017f44:	d504      	bpl.n	8017f50 <__sflush_r+0x7c>
 8017f46:	1c42      	adds	r2, r0, #1
 8017f48:	d101      	bne.n	8017f4e <__sflush_r+0x7a>
 8017f4a:	682b      	ldr	r3, [r5, #0]
 8017f4c:	b903      	cbnz	r3, 8017f50 <__sflush_r+0x7c>
 8017f4e:	6560      	str	r0, [r4, #84]	; 0x54
 8017f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017f52:	602f      	str	r7, [r5, #0]
 8017f54:	2900      	cmp	r1, #0
 8017f56:	d0ca      	beq.n	8017eee <__sflush_r+0x1a>
 8017f58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f5c:	4299      	cmp	r1, r3
 8017f5e:	d002      	beq.n	8017f66 <__sflush_r+0x92>
 8017f60:	4628      	mov	r0, r5
 8017f62:	f000 f9b7 	bl	80182d4 <_free_r>
 8017f66:	2000      	movs	r0, #0
 8017f68:	6360      	str	r0, [r4, #52]	; 0x34
 8017f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f6e:	6a21      	ldr	r1, [r4, #32]
 8017f70:	2301      	movs	r3, #1
 8017f72:	4628      	mov	r0, r5
 8017f74:	47b0      	blx	r6
 8017f76:	1c41      	adds	r1, r0, #1
 8017f78:	d1c6      	bne.n	8017f08 <__sflush_r+0x34>
 8017f7a:	682b      	ldr	r3, [r5, #0]
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d0c3      	beq.n	8017f08 <__sflush_r+0x34>
 8017f80:	2b1d      	cmp	r3, #29
 8017f82:	d001      	beq.n	8017f88 <__sflush_r+0xb4>
 8017f84:	2b16      	cmp	r3, #22
 8017f86:	d101      	bne.n	8017f8c <__sflush_r+0xb8>
 8017f88:	602f      	str	r7, [r5, #0]
 8017f8a:	e7b0      	b.n	8017eee <__sflush_r+0x1a>
 8017f8c:	89a3      	ldrh	r3, [r4, #12]
 8017f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f92:	81a3      	strh	r3, [r4, #12]
 8017f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f98:	690f      	ldr	r7, [r1, #16]
 8017f9a:	2f00      	cmp	r7, #0
 8017f9c:	d0a7      	beq.n	8017eee <__sflush_r+0x1a>
 8017f9e:	0793      	lsls	r3, r2, #30
 8017fa0:	680e      	ldr	r6, [r1, #0]
 8017fa2:	bf08      	it	eq
 8017fa4:	694b      	ldreq	r3, [r1, #20]
 8017fa6:	600f      	str	r7, [r1, #0]
 8017fa8:	bf18      	it	ne
 8017faa:	2300      	movne	r3, #0
 8017fac:	eba6 0807 	sub.w	r8, r6, r7
 8017fb0:	608b      	str	r3, [r1, #8]
 8017fb2:	f1b8 0f00 	cmp.w	r8, #0
 8017fb6:	dd9a      	ble.n	8017eee <__sflush_r+0x1a>
 8017fb8:	4643      	mov	r3, r8
 8017fba:	463a      	mov	r2, r7
 8017fbc:	6a21      	ldr	r1, [r4, #32]
 8017fbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017fc0:	4628      	mov	r0, r5
 8017fc2:	47b0      	blx	r6
 8017fc4:	2800      	cmp	r0, #0
 8017fc6:	dc07      	bgt.n	8017fd8 <__sflush_r+0x104>
 8017fc8:	89a3      	ldrh	r3, [r4, #12]
 8017fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017fce:	81a3      	strh	r3, [r4, #12]
 8017fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8017fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fd8:	4407      	add	r7, r0
 8017fda:	eba8 0800 	sub.w	r8, r8, r0
 8017fde:	e7e8      	b.n	8017fb2 <__sflush_r+0xde>
 8017fe0:	20400001 	.word	0x20400001

08017fe4 <_fflush_r>:
 8017fe4:	b538      	push	{r3, r4, r5, lr}
 8017fe6:	690b      	ldr	r3, [r1, #16]
 8017fe8:	4605      	mov	r5, r0
 8017fea:	460c      	mov	r4, r1
 8017fec:	b1db      	cbz	r3, 8018026 <_fflush_r+0x42>
 8017fee:	b118      	cbz	r0, 8017ff8 <_fflush_r+0x14>
 8017ff0:	6983      	ldr	r3, [r0, #24]
 8017ff2:	b90b      	cbnz	r3, 8017ff8 <_fflush_r+0x14>
 8017ff4:	f000 f872 	bl	80180dc <__sinit>
 8017ff8:	4b0c      	ldr	r3, [pc, #48]	; (801802c <_fflush_r+0x48>)
 8017ffa:	429c      	cmp	r4, r3
 8017ffc:	d109      	bne.n	8018012 <_fflush_r+0x2e>
 8017ffe:	686c      	ldr	r4, [r5, #4]
 8018000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018004:	b17b      	cbz	r3, 8018026 <_fflush_r+0x42>
 8018006:	4621      	mov	r1, r4
 8018008:	4628      	mov	r0, r5
 801800a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801800e:	f7ff bf61 	b.w	8017ed4 <__sflush_r>
 8018012:	4b07      	ldr	r3, [pc, #28]	; (8018030 <_fflush_r+0x4c>)
 8018014:	429c      	cmp	r4, r3
 8018016:	d101      	bne.n	801801c <_fflush_r+0x38>
 8018018:	68ac      	ldr	r4, [r5, #8]
 801801a:	e7f1      	b.n	8018000 <_fflush_r+0x1c>
 801801c:	4b05      	ldr	r3, [pc, #20]	; (8018034 <_fflush_r+0x50>)
 801801e:	429c      	cmp	r4, r3
 8018020:	bf08      	it	eq
 8018022:	68ec      	ldreq	r4, [r5, #12]
 8018024:	e7ec      	b.n	8018000 <_fflush_r+0x1c>
 8018026:	2000      	movs	r0, #0
 8018028:	bd38      	pop	{r3, r4, r5, pc}
 801802a:	bf00      	nop
 801802c:	0801df68 	.word	0x0801df68
 8018030:	0801df88 	.word	0x0801df88
 8018034:	0801df48 	.word	0x0801df48

08018038 <fflush>:
 8018038:	4601      	mov	r1, r0
 801803a:	b920      	cbnz	r0, 8018046 <fflush+0xe>
 801803c:	4b04      	ldr	r3, [pc, #16]	; (8018050 <fflush+0x18>)
 801803e:	4905      	ldr	r1, [pc, #20]	; (8018054 <fflush+0x1c>)
 8018040:	6818      	ldr	r0, [r3, #0]
 8018042:	f000 b8b7 	b.w	80181b4 <_fwalk_reent>
 8018046:	4b04      	ldr	r3, [pc, #16]	; (8018058 <fflush+0x20>)
 8018048:	6818      	ldr	r0, [r3, #0]
 801804a:	f7ff bfcb 	b.w	8017fe4 <_fflush_r>
 801804e:	bf00      	nop
 8018050:	0801dfa8 	.word	0x0801dfa8
 8018054:	08017fe5 	.word	0x08017fe5
 8018058:	20000028 	.word	0x20000028

0801805c <_cleanup_r>:
 801805c:	4901      	ldr	r1, [pc, #4]	; (8018064 <_cleanup_r+0x8>)
 801805e:	f000 b8a9 	b.w	80181b4 <_fwalk_reent>
 8018062:	bf00      	nop
 8018064:	08017fe5 	.word	0x08017fe5

08018068 <std.isra.0>:
 8018068:	2300      	movs	r3, #0
 801806a:	b510      	push	{r4, lr}
 801806c:	4604      	mov	r4, r0
 801806e:	6003      	str	r3, [r0, #0]
 8018070:	6043      	str	r3, [r0, #4]
 8018072:	6083      	str	r3, [r0, #8]
 8018074:	8181      	strh	r1, [r0, #12]
 8018076:	6643      	str	r3, [r0, #100]	; 0x64
 8018078:	81c2      	strh	r2, [r0, #14]
 801807a:	6103      	str	r3, [r0, #16]
 801807c:	6143      	str	r3, [r0, #20]
 801807e:	6183      	str	r3, [r0, #24]
 8018080:	4619      	mov	r1, r3
 8018082:	2208      	movs	r2, #8
 8018084:	305c      	adds	r0, #92	; 0x5c
 8018086:	f000 f91c 	bl	80182c2 <memset>
 801808a:	4b05      	ldr	r3, [pc, #20]	; (80180a0 <std.isra.0+0x38>)
 801808c:	6263      	str	r3, [r4, #36]	; 0x24
 801808e:	4b05      	ldr	r3, [pc, #20]	; (80180a4 <std.isra.0+0x3c>)
 8018090:	62a3      	str	r3, [r4, #40]	; 0x28
 8018092:	4b05      	ldr	r3, [pc, #20]	; (80180a8 <std.isra.0+0x40>)
 8018094:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018096:	4b05      	ldr	r3, [pc, #20]	; (80180ac <std.isra.0+0x44>)
 8018098:	6224      	str	r4, [r4, #32]
 801809a:	6323      	str	r3, [r4, #48]	; 0x30
 801809c:	bd10      	pop	{r4, pc}
 801809e:	bf00      	nop
 80180a0:	0801853d 	.word	0x0801853d
 80180a4:	0801855f 	.word	0x0801855f
 80180a8:	08018597 	.word	0x08018597
 80180ac:	080185bb 	.word	0x080185bb

080180b0 <__sfmoreglue>:
 80180b0:	b570      	push	{r4, r5, r6, lr}
 80180b2:	1e4a      	subs	r2, r1, #1
 80180b4:	2568      	movs	r5, #104	; 0x68
 80180b6:	4355      	muls	r5, r2
 80180b8:	460e      	mov	r6, r1
 80180ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80180be:	f000 f957 	bl	8018370 <_malloc_r>
 80180c2:	4604      	mov	r4, r0
 80180c4:	b140      	cbz	r0, 80180d8 <__sfmoreglue+0x28>
 80180c6:	2100      	movs	r1, #0
 80180c8:	e880 0042 	stmia.w	r0, {r1, r6}
 80180cc:	300c      	adds	r0, #12
 80180ce:	60a0      	str	r0, [r4, #8]
 80180d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80180d4:	f000 f8f5 	bl	80182c2 <memset>
 80180d8:	4620      	mov	r0, r4
 80180da:	bd70      	pop	{r4, r5, r6, pc}

080180dc <__sinit>:
 80180dc:	6983      	ldr	r3, [r0, #24]
 80180de:	b510      	push	{r4, lr}
 80180e0:	4604      	mov	r4, r0
 80180e2:	bb33      	cbnz	r3, 8018132 <__sinit+0x56>
 80180e4:	6483      	str	r3, [r0, #72]	; 0x48
 80180e6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80180e8:	6503      	str	r3, [r0, #80]	; 0x50
 80180ea:	4b12      	ldr	r3, [pc, #72]	; (8018134 <__sinit+0x58>)
 80180ec:	4a12      	ldr	r2, [pc, #72]	; (8018138 <__sinit+0x5c>)
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	6282      	str	r2, [r0, #40]	; 0x28
 80180f2:	4298      	cmp	r0, r3
 80180f4:	bf04      	itt	eq
 80180f6:	2301      	moveq	r3, #1
 80180f8:	6183      	streq	r3, [r0, #24]
 80180fa:	f000 f81f 	bl	801813c <__sfp>
 80180fe:	6060      	str	r0, [r4, #4]
 8018100:	4620      	mov	r0, r4
 8018102:	f000 f81b 	bl	801813c <__sfp>
 8018106:	60a0      	str	r0, [r4, #8]
 8018108:	4620      	mov	r0, r4
 801810a:	f000 f817 	bl	801813c <__sfp>
 801810e:	2200      	movs	r2, #0
 8018110:	60e0      	str	r0, [r4, #12]
 8018112:	2104      	movs	r1, #4
 8018114:	6860      	ldr	r0, [r4, #4]
 8018116:	f7ff ffa7 	bl	8018068 <std.isra.0>
 801811a:	2201      	movs	r2, #1
 801811c:	2109      	movs	r1, #9
 801811e:	68a0      	ldr	r0, [r4, #8]
 8018120:	f7ff ffa2 	bl	8018068 <std.isra.0>
 8018124:	2202      	movs	r2, #2
 8018126:	2112      	movs	r1, #18
 8018128:	68e0      	ldr	r0, [r4, #12]
 801812a:	f7ff ff9d 	bl	8018068 <std.isra.0>
 801812e:	2301      	movs	r3, #1
 8018130:	61a3      	str	r3, [r4, #24]
 8018132:	bd10      	pop	{r4, pc}
 8018134:	0801dfa8 	.word	0x0801dfa8
 8018138:	0801805d 	.word	0x0801805d

0801813c <__sfp>:
 801813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801813e:	4b1c      	ldr	r3, [pc, #112]	; (80181b0 <__sfp+0x74>)
 8018140:	681e      	ldr	r6, [r3, #0]
 8018142:	69b3      	ldr	r3, [r6, #24]
 8018144:	4607      	mov	r7, r0
 8018146:	b913      	cbnz	r3, 801814e <__sfp+0x12>
 8018148:	4630      	mov	r0, r6
 801814a:	f7ff ffc7 	bl	80180dc <__sinit>
 801814e:	3648      	adds	r6, #72	; 0x48
 8018150:	68b4      	ldr	r4, [r6, #8]
 8018152:	6873      	ldr	r3, [r6, #4]
 8018154:	3b01      	subs	r3, #1
 8018156:	d503      	bpl.n	8018160 <__sfp+0x24>
 8018158:	6833      	ldr	r3, [r6, #0]
 801815a:	b133      	cbz	r3, 801816a <__sfp+0x2e>
 801815c:	6836      	ldr	r6, [r6, #0]
 801815e:	e7f7      	b.n	8018150 <__sfp+0x14>
 8018160:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018164:	b16d      	cbz	r5, 8018182 <__sfp+0x46>
 8018166:	3468      	adds	r4, #104	; 0x68
 8018168:	e7f4      	b.n	8018154 <__sfp+0x18>
 801816a:	2104      	movs	r1, #4
 801816c:	4638      	mov	r0, r7
 801816e:	f7ff ff9f 	bl	80180b0 <__sfmoreglue>
 8018172:	6030      	str	r0, [r6, #0]
 8018174:	2800      	cmp	r0, #0
 8018176:	d1f1      	bne.n	801815c <__sfp+0x20>
 8018178:	230c      	movs	r3, #12
 801817a:	603b      	str	r3, [r7, #0]
 801817c:	4604      	mov	r4, r0
 801817e:	4620      	mov	r0, r4
 8018180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018182:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018186:	81e3      	strh	r3, [r4, #14]
 8018188:	2301      	movs	r3, #1
 801818a:	81a3      	strh	r3, [r4, #12]
 801818c:	6665      	str	r5, [r4, #100]	; 0x64
 801818e:	6025      	str	r5, [r4, #0]
 8018190:	60a5      	str	r5, [r4, #8]
 8018192:	6065      	str	r5, [r4, #4]
 8018194:	6125      	str	r5, [r4, #16]
 8018196:	6165      	str	r5, [r4, #20]
 8018198:	61a5      	str	r5, [r4, #24]
 801819a:	2208      	movs	r2, #8
 801819c:	4629      	mov	r1, r5
 801819e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80181a2:	f000 f88e 	bl	80182c2 <memset>
 80181a6:	6365      	str	r5, [r4, #52]	; 0x34
 80181a8:	63a5      	str	r5, [r4, #56]	; 0x38
 80181aa:	64a5      	str	r5, [r4, #72]	; 0x48
 80181ac:	64e5      	str	r5, [r4, #76]	; 0x4c
 80181ae:	e7e6      	b.n	801817e <__sfp+0x42>
 80181b0:	0801dfa8 	.word	0x0801dfa8

080181b4 <_fwalk_reent>:
 80181b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181b8:	4680      	mov	r8, r0
 80181ba:	4689      	mov	r9, r1
 80181bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80181c0:	2600      	movs	r6, #0
 80181c2:	b914      	cbnz	r4, 80181ca <_fwalk_reent+0x16>
 80181c4:	4630      	mov	r0, r6
 80181c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181ca:	68a5      	ldr	r5, [r4, #8]
 80181cc:	6867      	ldr	r7, [r4, #4]
 80181ce:	3f01      	subs	r7, #1
 80181d0:	d501      	bpl.n	80181d6 <_fwalk_reent+0x22>
 80181d2:	6824      	ldr	r4, [r4, #0]
 80181d4:	e7f5      	b.n	80181c2 <_fwalk_reent+0xe>
 80181d6:	89ab      	ldrh	r3, [r5, #12]
 80181d8:	2b01      	cmp	r3, #1
 80181da:	d907      	bls.n	80181ec <_fwalk_reent+0x38>
 80181dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80181e0:	3301      	adds	r3, #1
 80181e2:	d003      	beq.n	80181ec <_fwalk_reent+0x38>
 80181e4:	4629      	mov	r1, r5
 80181e6:	4640      	mov	r0, r8
 80181e8:	47c8      	blx	r9
 80181ea:	4306      	orrs	r6, r0
 80181ec:	3568      	adds	r5, #104	; 0x68
 80181ee:	e7ee      	b.n	80181ce <_fwalk_reent+0x1a>

080181f0 <__libc_init_array>:
 80181f0:	b570      	push	{r4, r5, r6, lr}
 80181f2:	4e0d      	ldr	r6, [pc, #52]	; (8018228 <__libc_init_array+0x38>)
 80181f4:	4c0d      	ldr	r4, [pc, #52]	; (801822c <__libc_init_array+0x3c>)
 80181f6:	1ba4      	subs	r4, r4, r6
 80181f8:	10a4      	asrs	r4, r4, #2
 80181fa:	2500      	movs	r5, #0
 80181fc:	42a5      	cmp	r5, r4
 80181fe:	d109      	bne.n	8018214 <__libc_init_array+0x24>
 8018200:	4e0b      	ldr	r6, [pc, #44]	; (8018230 <__libc_init_array+0x40>)
 8018202:	4c0c      	ldr	r4, [pc, #48]	; (8018234 <__libc_init_array+0x44>)
 8018204:	f000 fd78 	bl	8018cf8 <_init>
 8018208:	1ba4      	subs	r4, r4, r6
 801820a:	10a4      	asrs	r4, r4, #2
 801820c:	2500      	movs	r5, #0
 801820e:	42a5      	cmp	r5, r4
 8018210:	d105      	bne.n	801821e <__libc_init_array+0x2e>
 8018212:	bd70      	pop	{r4, r5, r6, pc}
 8018214:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018218:	4798      	blx	r3
 801821a:	3501      	adds	r5, #1
 801821c:	e7ee      	b.n	80181fc <__libc_init_array+0xc>
 801821e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018222:	4798      	blx	r3
 8018224:	3501      	adds	r5, #1
 8018226:	e7f2      	b.n	801820e <__libc_init_array+0x1e>
 8018228:	0801e0ec 	.word	0x0801e0ec
 801822c:	0801e0ec 	.word	0x0801e0ec
 8018230:	0801e0ec 	.word	0x0801e0ec
 8018234:	0801e0f0 	.word	0x0801e0f0

08018238 <__locale_ctype_ptr>:
 8018238:	4b04      	ldr	r3, [pc, #16]	; (801824c <__locale_ctype_ptr+0x14>)
 801823a:	4a05      	ldr	r2, [pc, #20]	; (8018250 <__locale_ctype_ptr+0x18>)
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	6a1b      	ldr	r3, [r3, #32]
 8018240:	2b00      	cmp	r3, #0
 8018242:	bf08      	it	eq
 8018244:	4613      	moveq	r3, r2
 8018246:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801824a:	4770      	bx	lr
 801824c:	20000028 	.word	0x20000028
 8018250:	2000008c 	.word	0x2000008c

08018254 <__ascii_mbtowc>:
 8018254:	b082      	sub	sp, #8
 8018256:	b901      	cbnz	r1, 801825a <__ascii_mbtowc+0x6>
 8018258:	a901      	add	r1, sp, #4
 801825a:	b142      	cbz	r2, 801826e <__ascii_mbtowc+0x1a>
 801825c:	b14b      	cbz	r3, 8018272 <__ascii_mbtowc+0x1e>
 801825e:	7813      	ldrb	r3, [r2, #0]
 8018260:	600b      	str	r3, [r1, #0]
 8018262:	7812      	ldrb	r2, [r2, #0]
 8018264:	1c10      	adds	r0, r2, #0
 8018266:	bf18      	it	ne
 8018268:	2001      	movne	r0, #1
 801826a:	b002      	add	sp, #8
 801826c:	4770      	bx	lr
 801826e:	4610      	mov	r0, r2
 8018270:	e7fb      	b.n	801826a <__ascii_mbtowc+0x16>
 8018272:	f06f 0001 	mvn.w	r0, #1
 8018276:	e7f8      	b.n	801826a <__ascii_mbtowc+0x16>

08018278 <memcpy>:
 8018278:	b510      	push	{r4, lr}
 801827a:	1e43      	subs	r3, r0, #1
 801827c:	440a      	add	r2, r1
 801827e:	4291      	cmp	r1, r2
 8018280:	d100      	bne.n	8018284 <memcpy+0xc>
 8018282:	bd10      	pop	{r4, pc}
 8018284:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018288:	f803 4f01 	strb.w	r4, [r3, #1]!
 801828c:	e7f7      	b.n	801827e <memcpy+0x6>

0801828e <memmove>:
 801828e:	4288      	cmp	r0, r1
 8018290:	b510      	push	{r4, lr}
 8018292:	eb01 0302 	add.w	r3, r1, r2
 8018296:	d803      	bhi.n	80182a0 <memmove+0x12>
 8018298:	1e42      	subs	r2, r0, #1
 801829a:	4299      	cmp	r1, r3
 801829c:	d10c      	bne.n	80182b8 <memmove+0x2a>
 801829e:	bd10      	pop	{r4, pc}
 80182a0:	4298      	cmp	r0, r3
 80182a2:	d2f9      	bcs.n	8018298 <memmove+0xa>
 80182a4:	1881      	adds	r1, r0, r2
 80182a6:	1ad2      	subs	r2, r2, r3
 80182a8:	42d3      	cmn	r3, r2
 80182aa:	d100      	bne.n	80182ae <memmove+0x20>
 80182ac:	bd10      	pop	{r4, pc}
 80182ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80182b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80182b6:	e7f7      	b.n	80182a8 <memmove+0x1a>
 80182b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80182bc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80182c0:	e7eb      	b.n	801829a <memmove+0xc>

080182c2 <memset>:
 80182c2:	4402      	add	r2, r0
 80182c4:	4603      	mov	r3, r0
 80182c6:	4293      	cmp	r3, r2
 80182c8:	d100      	bne.n	80182cc <memset+0xa>
 80182ca:	4770      	bx	lr
 80182cc:	f803 1b01 	strb.w	r1, [r3], #1
 80182d0:	e7f9      	b.n	80182c6 <memset+0x4>
	...

080182d4 <_free_r>:
 80182d4:	b538      	push	{r3, r4, r5, lr}
 80182d6:	4605      	mov	r5, r0
 80182d8:	2900      	cmp	r1, #0
 80182da:	d045      	beq.n	8018368 <_free_r+0x94>
 80182dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80182e0:	1f0c      	subs	r4, r1, #4
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	bfb8      	it	lt
 80182e6:	18e4      	addlt	r4, r4, r3
 80182e8:	f000 f9dc 	bl	80186a4 <__malloc_lock>
 80182ec:	4a1f      	ldr	r2, [pc, #124]	; (801836c <_free_r+0x98>)
 80182ee:	6813      	ldr	r3, [r2, #0]
 80182f0:	4610      	mov	r0, r2
 80182f2:	b933      	cbnz	r3, 8018302 <_free_r+0x2e>
 80182f4:	6063      	str	r3, [r4, #4]
 80182f6:	6014      	str	r4, [r2, #0]
 80182f8:	4628      	mov	r0, r5
 80182fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80182fe:	f000 b9d2 	b.w	80186a6 <__malloc_unlock>
 8018302:	42a3      	cmp	r3, r4
 8018304:	d90c      	bls.n	8018320 <_free_r+0x4c>
 8018306:	6821      	ldr	r1, [r4, #0]
 8018308:	1862      	adds	r2, r4, r1
 801830a:	4293      	cmp	r3, r2
 801830c:	bf04      	itt	eq
 801830e:	681a      	ldreq	r2, [r3, #0]
 8018310:	685b      	ldreq	r3, [r3, #4]
 8018312:	6063      	str	r3, [r4, #4]
 8018314:	bf04      	itt	eq
 8018316:	1852      	addeq	r2, r2, r1
 8018318:	6022      	streq	r2, [r4, #0]
 801831a:	6004      	str	r4, [r0, #0]
 801831c:	e7ec      	b.n	80182f8 <_free_r+0x24>
 801831e:	4613      	mov	r3, r2
 8018320:	685a      	ldr	r2, [r3, #4]
 8018322:	b10a      	cbz	r2, 8018328 <_free_r+0x54>
 8018324:	42a2      	cmp	r2, r4
 8018326:	d9fa      	bls.n	801831e <_free_r+0x4a>
 8018328:	6819      	ldr	r1, [r3, #0]
 801832a:	1858      	adds	r0, r3, r1
 801832c:	42a0      	cmp	r0, r4
 801832e:	d10b      	bne.n	8018348 <_free_r+0x74>
 8018330:	6820      	ldr	r0, [r4, #0]
 8018332:	4401      	add	r1, r0
 8018334:	1858      	adds	r0, r3, r1
 8018336:	4282      	cmp	r2, r0
 8018338:	6019      	str	r1, [r3, #0]
 801833a:	d1dd      	bne.n	80182f8 <_free_r+0x24>
 801833c:	6810      	ldr	r0, [r2, #0]
 801833e:	6852      	ldr	r2, [r2, #4]
 8018340:	605a      	str	r2, [r3, #4]
 8018342:	4401      	add	r1, r0
 8018344:	6019      	str	r1, [r3, #0]
 8018346:	e7d7      	b.n	80182f8 <_free_r+0x24>
 8018348:	d902      	bls.n	8018350 <_free_r+0x7c>
 801834a:	230c      	movs	r3, #12
 801834c:	602b      	str	r3, [r5, #0]
 801834e:	e7d3      	b.n	80182f8 <_free_r+0x24>
 8018350:	6820      	ldr	r0, [r4, #0]
 8018352:	1821      	adds	r1, r4, r0
 8018354:	428a      	cmp	r2, r1
 8018356:	bf04      	itt	eq
 8018358:	6811      	ldreq	r1, [r2, #0]
 801835a:	6852      	ldreq	r2, [r2, #4]
 801835c:	6062      	str	r2, [r4, #4]
 801835e:	bf04      	itt	eq
 8018360:	1809      	addeq	r1, r1, r0
 8018362:	6021      	streq	r1, [r4, #0]
 8018364:	605c      	str	r4, [r3, #4]
 8018366:	e7c7      	b.n	80182f8 <_free_r+0x24>
 8018368:	bd38      	pop	{r3, r4, r5, pc}
 801836a:	bf00      	nop
 801836c:	20000c54 	.word	0x20000c54

08018370 <_malloc_r>:
 8018370:	b570      	push	{r4, r5, r6, lr}
 8018372:	1ccd      	adds	r5, r1, #3
 8018374:	f025 0503 	bic.w	r5, r5, #3
 8018378:	3508      	adds	r5, #8
 801837a:	2d0c      	cmp	r5, #12
 801837c:	bf38      	it	cc
 801837e:	250c      	movcc	r5, #12
 8018380:	2d00      	cmp	r5, #0
 8018382:	4606      	mov	r6, r0
 8018384:	db01      	blt.n	801838a <_malloc_r+0x1a>
 8018386:	42a9      	cmp	r1, r5
 8018388:	d903      	bls.n	8018392 <_malloc_r+0x22>
 801838a:	230c      	movs	r3, #12
 801838c:	6033      	str	r3, [r6, #0]
 801838e:	2000      	movs	r0, #0
 8018390:	bd70      	pop	{r4, r5, r6, pc}
 8018392:	f000 f987 	bl	80186a4 <__malloc_lock>
 8018396:	4a23      	ldr	r2, [pc, #140]	; (8018424 <_malloc_r+0xb4>)
 8018398:	6814      	ldr	r4, [r2, #0]
 801839a:	4621      	mov	r1, r4
 801839c:	b991      	cbnz	r1, 80183c4 <_malloc_r+0x54>
 801839e:	4c22      	ldr	r4, [pc, #136]	; (8018428 <_malloc_r+0xb8>)
 80183a0:	6823      	ldr	r3, [r4, #0]
 80183a2:	b91b      	cbnz	r3, 80183ac <_malloc_r+0x3c>
 80183a4:	4630      	mov	r0, r6
 80183a6:	f000 f841 	bl	801842c <_sbrk_r>
 80183aa:	6020      	str	r0, [r4, #0]
 80183ac:	4629      	mov	r1, r5
 80183ae:	4630      	mov	r0, r6
 80183b0:	f000 f83c 	bl	801842c <_sbrk_r>
 80183b4:	1c43      	adds	r3, r0, #1
 80183b6:	d126      	bne.n	8018406 <_malloc_r+0x96>
 80183b8:	230c      	movs	r3, #12
 80183ba:	6033      	str	r3, [r6, #0]
 80183bc:	4630      	mov	r0, r6
 80183be:	f000 f972 	bl	80186a6 <__malloc_unlock>
 80183c2:	e7e4      	b.n	801838e <_malloc_r+0x1e>
 80183c4:	680b      	ldr	r3, [r1, #0]
 80183c6:	1b5b      	subs	r3, r3, r5
 80183c8:	d41a      	bmi.n	8018400 <_malloc_r+0x90>
 80183ca:	2b0b      	cmp	r3, #11
 80183cc:	d90f      	bls.n	80183ee <_malloc_r+0x7e>
 80183ce:	600b      	str	r3, [r1, #0]
 80183d0:	50cd      	str	r5, [r1, r3]
 80183d2:	18cc      	adds	r4, r1, r3
 80183d4:	4630      	mov	r0, r6
 80183d6:	f000 f966 	bl	80186a6 <__malloc_unlock>
 80183da:	f104 000b 	add.w	r0, r4, #11
 80183de:	1d23      	adds	r3, r4, #4
 80183e0:	f020 0007 	bic.w	r0, r0, #7
 80183e4:	1ac3      	subs	r3, r0, r3
 80183e6:	d01b      	beq.n	8018420 <_malloc_r+0xb0>
 80183e8:	425a      	negs	r2, r3
 80183ea:	50e2      	str	r2, [r4, r3]
 80183ec:	bd70      	pop	{r4, r5, r6, pc}
 80183ee:	428c      	cmp	r4, r1
 80183f0:	bf0d      	iteet	eq
 80183f2:	6863      	ldreq	r3, [r4, #4]
 80183f4:	684b      	ldrne	r3, [r1, #4]
 80183f6:	6063      	strne	r3, [r4, #4]
 80183f8:	6013      	streq	r3, [r2, #0]
 80183fa:	bf18      	it	ne
 80183fc:	460c      	movne	r4, r1
 80183fe:	e7e9      	b.n	80183d4 <_malloc_r+0x64>
 8018400:	460c      	mov	r4, r1
 8018402:	6849      	ldr	r1, [r1, #4]
 8018404:	e7ca      	b.n	801839c <_malloc_r+0x2c>
 8018406:	1cc4      	adds	r4, r0, #3
 8018408:	f024 0403 	bic.w	r4, r4, #3
 801840c:	42a0      	cmp	r0, r4
 801840e:	d005      	beq.n	801841c <_malloc_r+0xac>
 8018410:	1a21      	subs	r1, r4, r0
 8018412:	4630      	mov	r0, r6
 8018414:	f000 f80a 	bl	801842c <_sbrk_r>
 8018418:	3001      	adds	r0, #1
 801841a:	d0cd      	beq.n	80183b8 <_malloc_r+0x48>
 801841c:	6025      	str	r5, [r4, #0]
 801841e:	e7d9      	b.n	80183d4 <_malloc_r+0x64>
 8018420:	bd70      	pop	{r4, r5, r6, pc}
 8018422:	bf00      	nop
 8018424:	20000c54 	.word	0x20000c54
 8018428:	20000c58 	.word	0x20000c58

0801842c <_sbrk_r>:
 801842c:	b538      	push	{r3, r4, r5, lr}
 801842e:	4c06      	ldr	r4, [pc, #24]	; (8018448 <_sbrk_r+0x1c>)
 8018430:	2300      	movs	r3, #0
 8018432:	4605      	mov	r5, r0
 8018434:	4608      	mov	r0, r1
 8018436:	6023      	str	r3, [r4, #0]
 8018438:	f7ff fa6a 	bl	8017910 <_sbrk>
 801843c:	1c43      	adds	r3, r0, #1
 801843e:	d102      	bne.n	8018446 <_sbrk_r+0x1a>
 8018440:	6823      	ldr	r3, [r4, #0]
 8018442:	b103      	cbz	r3, 8018446 <_sbrk_r+0x1a>
 8018444:	602b      	str	r3, [r5, #0]
 8018446:	bd38      	pop	{r3, r4, r5, pc}
 8018448:	20004278 	.word	0x20004278

0801844c <_raise_r>:
 801844c:	291f      	cmp	r1, #31
 801844e:	b538      	push	{r3, r4, r5, lr}
 8018450:	4604      	mov	r4, r0
 8018452:	460d      	mov	r5, r1
 8018454:	d904      	bls.n	8018460 <_raise_r+0x14>
 8018456:	2316      	movs	r3, #22
 8018458:	6003      	str	r3, [r0, #0]
 801845a:	f04f 30ff 	mov.w	r0, #4294967295
 801845e:	bd38      	pop	{r3, r4, r5, pc}
 8018460:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018462:	b112      	cbz	r2, 801846a <_raise_r+0x1e>
 8018464:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018468:	b94b      	cbnz	r3, 801847e <_raise_r+0x32>
 801846a:	4620      	mov	r0, r4
 801846c:	f000 f830 	bl	80184d0 <_getpid_r>
 8018470:	462a      	mov	r2, r5
 8018472:	4601      	mov	r1, r0
 8018474:	4620      	mov	r0, r4
 8018476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801847a:	f000 b817 	b.w	80184ac <_kill_r>
 801847e:	2b01      	cmp	r3, #1
 8018480:	d00a      	beq.n	8018498 <_raise_r+0x4c>
 8018482:	1c59      	adds	r1, r3, #1
 8018484:	d103      	bne.n	801848e <_raise_r+0x42>
 8018486:	2316      	movs	r3, #22
 8018488:	6003      	str	r3, [r0, #0]
 801848a:	2001      	movs	r0, #1
 801848c:	bd38      	pop	{r3, r4, r5, pc}
 801848e:	2400      	movs	r4, #0
 8018490:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018494:	4628      	mov	r0, r5
 8018496:	4798      	blx	r3
 8018498:	2000      	movs	r0, #0
 801849a:	bd38      	pop	{r3, r4, r5, pc}

0801849c <raise>:
 801849c:	4b02      	ldr	r3, [pc, #8]	; (80184a8 <raise+0xc>)
 801849e:	4601      	mov	r1, r0
 80184a0:	6818      	ldr	r0, [r3, #0]
 80184a2:	f7ff bfd3 	b.w	801844c <_raise_r>
 80184a6:	bf00      	nop
 80184a8:	20000028 	.word	0x20000028

080184ac <_kill_r>:
 80184ac:	b538      	push	{r3, r4, r5, lr}
 80184ae:	4c07      	ldr	r4, [pc, #28]	; (80184cc <_kill_r+0x20>)
 80184b0:	2300      	movs	r3, #0
 80184b2:	4605      	mov	r5, r0
 80184b4:	4608      	mov	r0, r1
 80184b6:	4611      	mov	r1, r2
 80184b8:	6023      	str	r3, [r4, #0]
 80184ba:	f7ff f9fd 	bl	80178b8 <_kill>
 80184be:	1c43      	adds	r3, r0, #1
 80184c0:	d102      	bne.n	80184c8 <_kill_r+0x1c>
 80184c2:	6823      	ldr	r3, [r4, #0]
 80184c4:	b103      	cbz	r3, 80184c8 <_kill_r+0x1c>
 80184c6:	602b      	str	r3, [r5, #0]
 80184c8:	bd38      	pop	{r3, r4, r5, pc}
 80184ca:	bf00      	nop
 80184cc:	20004278 	.word	0x20004278

080184d0 <_getpid_r>:
 80184d0:	f7ff b9e4 	b.w	801789c <_getpid>

080184d4 <sniprintf>:
 80184d4:	b40c      	push	{r2, r3}
 80184d6:	b530      	push	{r4, r5, lr}
 80184d8:	4b17      	ldr	r3, [pc, #92]	; (8018538 <sniprintf+0x64>)
 80184da:	1e0c      	subs	r4, r1, #0
 80184dc:	b09d      	sub	sp, #116	; 0x74
 80184de:	681d      	ldr	r5, [r3, #0]
 80184e0:	da08      	bge.n	80184f4 <sniprintf+0x20>
 80184e2:	238b      	movs	r3, #139	; 0x8b
 80184e4:	602b      	str	r3, [r5, #0]
 80184e6:	f04f 30ff 	mov.w	r0, #4294967295
 80184ea:	b01d      	add	sp, #116	; 0x74
 80184ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80184f0:	b002      	add	sp, #8
 80184f2:	4770      	bx	lr
 80184f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80184f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80184fc:	bf14      	ite	ne
 80184fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018502:	4623      	moveq	r3, r4
 8018504:	9304      	str	r3, [sp, #16]
 8018506:	9307      	str	r3, [sp, #28]
 8018508:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801850c:	9002      	str	r0, [sp, #8]
 801850e:	9006      	str	r0, [sp, #24]
 8018510:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018514:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018516:	ab21      	add	r3, sp, #132	; 0x84
 8018518:	a902      	add	r1, sp, #8
 801851a:	4628      	mov	r0, r5
 801851c:	9301      	str	r3, [sp, #4]
 801851e:	f000 f91f 	bl	8018760 <_svfiprintf_r>
 8018522:	1c43      	adds	r3, r0, #1
 8018524:	bfbc      	itt	lt
 8018526:	238b      	movlt	r3, #139	; 0x8b
 8018528:	602b      	strlt	r3, [r5, #0]
 801852a:	2c00      	cmp	r4, #0
 801852c:	d0dd      	beq.n	80184ea <sniprintf+0x16>
 801852e:	9b02      	ldr	r3, [sp, #8]
 8018530:	2200      	movs	r2, #0
 8018532:	701a      	strb	r2, [r3, #0]
 8018534:	e7d9      	b.n	80184ea <sniprintf+0x16>
 8018536:	bf00      	nop
 8018538:	20000028 	.word	0x20000028

0801853c <__sread>:
 801853c:	b510      	push	{r4, lr}
 801853e:	460c      	mov	r4, r1
 8018540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018544:	f000 fb96 	bl	8018c74 <_read_r>
 8018548:	2800      	cmp	r0, #0
 801854a:	bfab      	itete	ge
 801854c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801854e:	89a3      	ldrhlt	r3, [r4, #12]
 8018550:	181b      	addge	r3, r3, r0
 8018552:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018556:	bfac      	ite	ge
 8018558:	6563      	strge	r3, [r4, #84]	; 0x54
 801855a:	81a3      	strhlt	r3, [r4, #12]
 801855c:	bd10      	pop	{r4, pc}

0801855e <__swrite>:
 801855e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018562:	461f      	mov	r7, r3
 8018564:	898b      	ldrh	r3, [r1, #12]
 8018566:	05db      	lsls	r3, r3, #23
 8018568:	4605      	mov	r5, r0
 801856a:	460c      	mov	r4, r1
 801856c:	4616      	mov	r6, r2
 801856e:	d505      	bpl.n	801857c <__swrite+0x1e>
 8018570:	2302      	movs	r3, #2
 8018572:	2200      	movs	r2, #0
 8018574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018578:	f000 f882 	bl	8018680 <_lseek_r>
 801857c:	89a3      	ldrh	r3, [r4, #12]
 801857e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018586:	81a3      	strh	r3, [r4, #12]
 8018588:	4632      	mov	r2, r6
 801858a:	463b      	mov	r3, r7
 801858c:	4628      	mov	r0, r5
 801858e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018592:	f000 b853 	b.w	801863c <_write_r>

08018596 <__sseek>:
 8018596:	b510      	push	{r4, lr}
 8018598:	460c      	mov	r4, r1
 801859a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801859e:	f000 f86f 	bl	8018680 <_lseek_r>
 80185a2:	1c43      	adds	r3, r0, #1
 80185a4:	89a3      	ldrh	r3, [r4, #12]
 80185a6:	bf15      	itete	ne
 80185a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80185aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80185ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80185b2:	81a3      	strheq	r3, [r4, #12]
 80185b4:	bf18      	it	ne
 80185b6:	81a3      	strhne	r3, [r4, #12]
 80185b8:	bd10      	pop	{r4, pc}

080185ba <__sclose>:
 80185ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185be:	f000 b84f 	b.w	8018660 <_close_r>

080185c2 <strncpy>:
 80185c2:	b570      	push	{r4, r5, r6, lr}
 80185c4:	4604      	mov	r4, r0
 80185c6:	b902      	cbnz	r2, 80185ca <strncpy+0x8>
 80185c8:	bd70      	pop	{r4, r5, r6, pc}
 80185ca:	4623      	mov	r3, r4
 80185cc:	f811 5b01 	ldrb.w	r5, [r1], #1
 80185d0:	f803 5b01 	strb.w	r5, [r3], #1
 80185d4:	1e56      	subs	r6, r2, #1
 80185d6:	b91d      	cbnz	r5, 80185e0 <strncpy+0x1e>
 80185d8:	4414      	add	r4, r2
 80185da:	42a3      	cmp	r3, r4
 80185dc:	d103      	bne.n	80185e6 <strncpy+0x24>
 80185de:	bd70      	pop	{r4, r5, r6, pc}
 80185e0:	461c      	mov	r4, r3
 80185e2:	4632      	mov	r2, r6
 80185e4:	e7ef      	b.n	80185c6 <strncpy+0x4>
 80185e6:	f803 5b01 	strb.w	r5, [r3], #1
 80185ea:	e7f6      	b.n	80185da <strncpy+0x18>

080185ec <strstr>:
 80185ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185ee:	7803      	ldrb	r3, [r0, #0]
 80185f0:	b133      	cbz	r3, 8018600 <strstr+0x14>
 80185f2:	4603      	mov	r3, r0
 80185f4:	4618      	mov	r0, r3
 80185f6:	1c5e      	adds	r6, r3, #1
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	b933      	cbnz	r3, 801860a <strstr+0x1e>
 80185fc:	4618      	mov	r0, r3
 80185fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018600:	780b      	ldrb	r3, [r1, #0]
 8018602:	2b00      	cmp	r3, #0
 8018604:	bf18      	it	ne
 8018606:	2000      	movne	r0, #0
 8018608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801860a:	1e4d      	subs	r5, r1, #1
 801860c:	1e44      	subs	r4, r0, #1
 801860e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8018612:	2a00      	cmp	r2, #0
 8018614:	d0f3      	beq.n	80185fe <strstr+0x12>
 8018616:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 801861a:	4297      	cmp	r7, r2
 801861c:	4633      	mov	r3, r6
 801861e:	d0f6      	beq.n	801860e <strstr+0x22>
 8018620:	e7e8      	b.n	80185f4 <strstr+0x8>

08018622 <__ascii_wctomb>:
 8018622:	b149      	cbz	r1, 8018638 <__ascii_wctomb+0x16>
 8018624:	2aff      	cmp	r2, #255	; 0xff
 8018626:	bf85      	ittet	hi
 8018628:	238a      	movhi	r3, #138	; 0x8a
 801862a:	6003      	strhi	r3, [r0, #0]
 801862c:	700a      	strbls	r2, [r1, #0]
 801862e:	f04f 30ff 	movhi.w	r0, #4294967295
 8018632:	bf98      	it	ls
 8018634:	2001      	movls	r0, #1
 8018636:	4770      	bx	lr
 8018638:	4608      	mov	r0, r1
 801863a:	4770      	bx	lr

0801863c <_write_r>:
 801863c:	b538      	push	{r3, r4, r5, lr}
 801863e:	4c07      	ldr	r4, [pc, #28]	; (801865c <_write_r+0x20>)
 8018640:	4605      	mov	r5, r0
 8018642:	4608      	mov	r0, r1
 8018644:	4611      	mov	r1, r2
 8018646:	2200      	movs	r2, #0
 8018648:	6022      	str	r2, [r4, #0]
 801864a:	461a      	mov	r2, r3
 801864c:	f7ff f94c 	bl	80178e8 <_write>
 8018650:	1c43      	adds	r3, r0, #1
 8018652:	d102      	bne.n	801865a <_write_r+0x1e>
 8018654:	6823      	ldr	r3, [r4, #0]
 8018656:	b103      	cbz	r3, 801865a <_write_r+0x1e>
 8018658:	602b      	str	r3, [r5, #0]
 801865a:	bd38      	pop	{r3, r4, r5, pc}
 801865c:	20004278 	.word	0x20004278

08018660 <_close_r>:
 8018660:	b538      	push	{r3, r4, r5, lr}
 8018662:	4c06      	ldr	r4, [pc, #24]	; (801867c <_close_r+0x1c>)
 8018664:	2300      	movs	r3, #0
 8018666:	4605      	mov	r5, r0
 8018668:	4608      	mov	r0, r1
 801866a:	6023      	str	r3, [r4, #0]
 801866c:	f7ff f970 	bl	8017950 <_close>
 8018670:	1c43      	adds	r3, r0, #1
 8018672:	d102      	bne.n	801867a <_close_r+0x1a>
 8018674:	6823      	ldr	r3, [r4, #0]
 8018676:	b103      	cbz	r3, 801867a <_close_r+0x1a>
 8018678:	602b      	str	r3, [r5, #0]
 801867a:	bd38      	pop	{r3, r4, r5, pc}
 801867c:	20004278 	.word	0x20004278

08018680 <_lseek_r>:
 8018680:	b538      	push	{r3, r4, r5, lr}
 8018682:	4c07      	ldr	r4, [pc, #28]	; (80186a0 <_lseek_r+0x20>)
 8018684:	4605      	mov	r5, r0
 8018686:	4608      	mov	r0, r1
 8018688:	4611      	mov	r1, r2
 801868a:	2200      	movs	r2, #0
 801868c:	6022      	str	r2, [r4, #0]
 801868e:	461a      	mov	r2, r3
 8018690:	f7ff f970 	bl	8017974 <_lseek>
 8018694:	1c43      	adds	r3, r0, #1
 8018696:	d102      	bne.n	801869e <_lseek_r+0x1e>
 8018698:	6823      	ldr	r3, [r4, #0]
 801869a:	b103      	cbz	r3, 801869e <_lseek_r+0x1e>
 801869c:	602b      	str	r3, [r5, #0]
 801869e:	bd38      	pop	{r3, r4, r5, pc}
 80186a0:	20004278 	.word	0x20004278

080186a4 <__malloc_lock>:
 80186a4:	4770      	bx	lr

080186a6 <__malloc_unlock>:
 80186a6:	4770      	bx	lr

080186a8 <__ssputs_r>:
 80186a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186ac:	688e      	ldr	r6, [r1, #8]
 80186ae:	429e      	cmp	r6, r3
 80186b0:	4682      	mov	sl, r0
 80186b2:	460c      	mov	r4, r1
 80186b4:	4691      	mov	r9, r2
 80186b6:	4698      	mov	r8, r3
 80186b8:	d835      	bhi.n	8018726 <__ssputs_r+0x7e>
 80186ba:	898a      	ldrh	r2, [r1, #12]
 80186bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80186c0:	d031      	beq.n	8018726 <__ssputs_r+0x7e>
 80186c2:	6825      	ldr	r5, [r4, #0]
 80186c4:	6909      	ldr	r1, [r1, #16]
 80186c6:	1a6f      	subs	r7, r5, r1
 80186c8:	6965      	ldr	r5, [r4, #20]
 80186ca:	2302      	movs	r3, #2
 80186cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80186d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80186d4:	f108 0301 	add.w	r3, r8, #1
 80186d8:	443b      	add	r3, r7
 80186da:	429d      	cmp	r5, r3
 80186dc:	bf38      	it	cc
 80186de:	461d      	movcc	r5, r3
 80186e0:	0553      	lsls	r3, r2, #21
 80186e2:	d531      	bpl.n	8018748 <__ssputs_r+0xa0>
 80186e4:	4629      	mov	r1, r5
 80186e6:	f7ff fe43 	bl	8018370 <_malloc_r>
 80186ea:	4606      	mov	r6, r0
 80186ec:	b950      	cbnz	r0, 8018704 <__ssputs_r+0x5c>
 80186ee:	230c      	movs	r3, #12
 80186f0:	f8ca 3000 	str.w	r3, [sl]
 80186f4:	89a3      	ldrh	r3, [r4, #12]
 80186f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80186fa:	81a3      	strh	r3, [r4, #12]
 80186fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018704:	463a      	mov	r2, r7
 8018706:	6921      	ldr	r1, [r4, #16]
 8018708:	f7ff fdb6 	bl	8018278 <memcpy>
 801870c:	89a3      	ldrh	r3, [r4, #12]
 801870e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018716:	81a3      	strh	r3, [r4, #12]
 8018718:	6126      	str	r6, [r4, #16]
 801871a:	6165      	str	r5, [r4, #20]
 801871c:	443e      	add	r6, r7
 801871e:	1bed      	subs	r5, r5, r7
 8018720:	6026      	str	r6, [r4, #0]
 8018722:	60a5      	str	r5, [r4, #8]
 8018724:	4646      	mov	r6, r8
 8018726:	4546      	cmp	r6, r8
 8018728:	bf28      	it	cs
 801872a:	4646      	movcs	r6, r8
 801872c:	4632      	mov	r2, r6
 801872e:	4649      	mov	r1, r9
 8018730:	6820      	ldr	r0, [r4, #0]
 8018732:	f7ff fdac 	bl	801828e <memmove>
 8018736:	68a3      	ldr	r3, [r4, #8]
 8018738:	1b9b      	subs	r3, r3, r6
 801873a:	60a3      	str	r3, [r4, #8]
 801873c:	6823      	ldr	r3, [r4, #0]
 801873e:	441e      	add	r6, r3
 8018740:	6026      	str	r6, [r4, #0]
 8018742:	2000      	movs	r0, #0
 8018744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018748:	462a      	mov	r2, r5
 801874a:	f000 faa5 	bl	8018c98 <_realloc_r>
 801874e:	4606      	mov	r6, r0
 8018750:	2800      	cmp	r0, #0
 8018752:	d1e1      	bne.n	8018718 <__ssputs_r+0x70>
 8018754:	6921      	ldr	r1, [r4, #16]
 8018756:	4650      	mov	r0, sl
 8018758:	f7ff fdbc 	bl	80182d4 <_free_r>
 801875c:	e7c7      	b.n	80186ee <__ssputs_r+0x46>
	...

08018760 <_svfiprintf_r>:
 8018760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018764:	b09d      	sub	sp, #116	; 0x74
 8018766:	4680      	mov	r8, r0
 8018768:	9303      	str	r3, [sp, #12]
 801876a:	898b      	ldrh	r3, [r1, #12]
 801876c:	061c      	lsls	r4, r3, #24
 801876e:	460d      	mov	r5, r1
 8018770:	4616      	mov	r6, r2
 8018772:	d50f      	bpl.n	8018794 <_svfiprintf_r+0x34>
 8018774:	690b      	ldr	r3, [r1, #16]
 8018776:	b96b      	cbnz	r3, 8018794 <_svfiprintf_r+0x34>
 8018778:	2140      	movs	r1, #64	; 0x40
 801877a:	f7ff fdf9 	bl	8018370 <_malloc_r>
 801877e:	6028      	str	r0, [r5, #0]
 8018780:	6128      	str	r0, [r5, #16]
 8018782:	b928      	cbnz	r0, 8018790 <_svfiprintf_r+0x30>
 8018784:	230c      	movs	r3, #12
 8018786:	f8c8 3000 	str.w	r3, [r8]
 801878a:	f04f 30ff 	mov.w	r0, #4294967295
 801878e:	e0c5      	b.n	801891c <_svfiprintf_r+0x1bc>
 8018790:	2340      	movs	r3, #64	; 0x40
 8018792:	616b      	str	r3, [r5, #20]
 8018794:	2300      	movs	r3, #0
 8018796:	9309      	str	r3, [sp, #36]	; 0x24
 8018798:	2320      	movs	r3, #32
 801879a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801879e:	2330      	movs	r3, #48	; 0x30
 80187a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80187a4:	f04f 0b01 	mov.w	fp, #1
 80187a8:	4637      	mov	r7, r6
 80187aa:	463c      	mov	r4, r7
 80187ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d13c      	bne.n	801882e <_svfiprintf_r+0xce>
 80187b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80187b8:	d00b      	beq.n	80187d2 <_svfiprintf_r+0x72>
 80187ba:	4653      	mov	r3, sl
 80187bc:	4632      	mov	r2, r6
 80187be:	4629      	mov	r1, r5
 80187c0:	4640      	mov	r0, r8
 80187c2:	f7ff ff71 	bl	80186a8 <__ssputs_r>
 80187c6:	3001      	adds	r0, #1
 80187c8:	f000 80a3 	beq.w	8018912 <_svfiprintf_r+0x1b2>
 80187cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187ce:	4453      	add	r3, sl
 80187d0:	9309      	str	r3, [sp, #36]	; 0x24
 80187d2:	783b      	ldrb	r3, [r7, #0]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	f000 809c 	beq.w	8018912 <_svfiprintf_r+0x1b2>
 80187da:	2300      	movs	r3, #0
 80187dc:	f04f 32ff 	mov.w	r2, #4294967295
 80187e0:	9304      	str	r3, [sp, #16]
 80187e2:	9307      	str	r3, [sp, #28]
 80187e4:	9205      	str	r2, [sp, #20]
 80187e6:	9306      	str	r3, [sp, #24]
 80187e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80187ec:	931a      	str	r3, [sp, #104]	; 0x68
 80187ee:	2205      	movs	r2, #5
 80187f0:	7821      	ldrb	r1, [r4, #0]
 80187f2:	4850      	ldr	r0, [pc, #320]	; (8018934 <_svfiprintf_r+0x1d4>)
 80187f4:	f7e7 fd04 	bl	8000200 <memchr>
 80187f8:	1c67      	adds	r7, r4, #1
 80187fa:	9b04      	ldr	r3, [sp, #16]
 80187fc:	b9d8      	cbnz	r0, 8018836 <_svfiprintf_r+0xd6>
 80187fe:	06d9      	lsls	r1, r3, #27
 8018800:	bf44      	itt	mi
 8018802:	2220      	movmi	r2, #32
 8018804:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018808:	071a      	lsls	r2, r3, #28
 801880a:	bf44      	itt	mi
 801880c:	222b      	movmi	r2, #43	; 0x2b
 801880e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018812:	7822      	ldrb	r2, [r4, #0]
 8018814:	2a2a      	cmp	r2, #42	; 0x2a
 8018816:	d016      	beq.n	8018846 <_svfiprintf_r+0xe6>
 8018818:	9a07      	ldr	r2, [sp, #28]
 801881a:	2100      	movs	r1, #0
 801881c:	200a      	movs	r0, #10
 801881e:	4627      	mov	r7, r4
 8018820:	3401      	adds	r4, #1
 8018822:	783b      	ldrb	r3, [r7, #0]
 8018824:	3b30      	subs	r3, #48	; 0x30
 8018826:	2b09      	cmp	r3, #9
 8018828:	d951      	bls.n	80188ce <_svfiprintf_r+0x16e>
 801882a:	b1c9      	cbz	r1, 8018860 <_svfiprintf_r+0x100>
 801882c:	e011      	b.n	8018852 <_svfiprintf_r+0xf2>
 801882e:	2b25      	cmp	r3, #37	; 0x25
 8018830:	d0c0      	beq.n	80187b4 <_svfiprintf_r+0x54>
 8018832:	4627      	mov	r7, r4
 8018834:	e7b9      	b.n	80187aa <_svfiprintf_r+0x4a>
 8018836:	4a3f      	ldr	r2, [pc, #252]	; (8018934 <_svfiprintf_r+0x1d4>)
 8018838:	1a80      	subs	r0, r0, r2
 801883a:	fa0b f000 	lsl.w	r0, fp, r0
 801883e:	4318      	orrs	r0, r3
 8018840:	9004      	str	r0, [sp, #16]
 8018842:	463c      	mov	r4, r7
 8018844:	e7d3      	b.n	80187ee <_svfiprintf_r+0x8e>
 8018846:	9a03      	ldr	r2, [sp, #12]
 8018848:	1d11      	adds	r1, r2, #4
 801884a:	6812      	ldr	r2, [r2, #0]
 801884c:	9103      	str	r1, [sp, #12]
 801884e:	2a00      	cmp	r2, #0
 8018850:	db01      	blt.n	8018856 <_svfiprintf_r+0xf6>
 8018852:	9207      	str	r2, [sp, #28]
 8018854:	e004      	b.n	8018860 <_svfiprintf_r+0x100>
 8018856:	4252      	negs	r2, r2
 8018858:	f043 0302 	orr.w	r3, r3, #2
 801885c:	9207      	str	r2, [sp, #28]
 801885e:	9304      	str	r3, [sp, #16]
 8018860:	783b      	ldrb	r3, [r7, #0]
 8018862:	2b2e      	cmp	r3, #46	; 0x2e
 8018864:	d10e      	bne.n	8018884 <_svfiprintf_r+0x124>
 8018866:	787b      	ldrb	r3, [r7, #1]
 8018868:	2b2a      	cmp	r3, #42	; 0x2a
 801886a:	f107 0101 	add.w	r1, r7, #1
 801886e:	d132      	bne.n	80188d6 <_svfiprintf_r+0x176>
 8018870:	9b03      	ldr	r3, [sp, #12]
 8018872:	1d1a      	adds	r2, r3, #4
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	9203      	str	r2, [sp, #12]
 8018878:	2b00      	cmp	r3, #0
 801887a:	bfb8      	it	lt
 801887c:	f04f 33ff 	movlt.w	r3, #4294967295
 8018880:	3702      	adds	r7, #2
 8018882:	9305      	str	r3, [sp, #20]
 8018884:	4c2c      	ldr	r4, [pc, #176]	; (8018938 <_svfiprintf_r+0x1d8>)
 8018886:	7839      	ldrb	r1, [r7, #0]
 8018888:	2203      	movs	r2, #3
 801888a:	4620      	mov	r0, r4
 801888c:	f7e7 fcb8 	bl	8000200 <memchr>
 8018890:	b138      	cbz	r0, 80188a2 <_svfiprintf_r+0x142>
 8018892:	2340      	movs	r3, #64	; 0x40
 8018894:	1b00      	subs	r0, r0, r4
 8018896:	fa03 f000 	lsl.w	r0, r3, r0
 801889a:	9b04      	ldr	r3, [sp, #16]
 801889c:	4303      	orrs	r3, r0
 801889e:	9304      	str	r3, [sp, #16]
 80188a0:	3701      	adds	r7, #1
 80188a2:	7839      	ldrb	r1, [r7, #0]
 80188a4:	4825      	ldr	r0, [pc, #148]	; (801893c <_svfiprintf_r+0x1dc>)
 80188a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80188aa:	2206      	movs	r2, #6
 80188ac:	1c7e      	adds	r6, r7, #1
 80188ae:	f7e7 fca7 	bl	8000200 <memchr>
 80188b2:	2800      	cmp	r0, #0
 80188b4:	d035      	beq.n	8018922 <_svfiprintf_r+0x1c2>
 80188b6:	4b22      	ldr	r3, [pc, #136]	; (8018940 <_svfiprintf_r+0x1e0>)
 80188b8:	b9fb      	cbnz	r3, 80188fa <_svfiprintf_r+0x19a>
 80188ba:	9b03      	ldr	r3, [sp, #12]
 80188bc:	3307      	adds	r3, #7
 80188be:	f023 0307 	bic.w	r3, r3, #7
 80188c2:	3308      	adds	r3, #8
 80188c4:	9303      	str	r3, [sp, #12]
 80188c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188c8:	444b      	add	r3, r9
 80188ca:	9309      	str	r3, [sp, #36]	; 0x24
 80188cc:	e76c      	b.n	80187a8 <_svfiprintf_r+0x48>
 80188ce:	fb00 3202 	mla	r2, r0, r2, r3
 80188d2:	2101      	movs	r1, #1
 80188d4:	e7a3      	b.n	801881e <_svfiprintf_r+0xbe>
 80188d6:	2300      	movs	r3, #0
 80188d8:	9305      	str	r3, [sp, #20]
 80188da:	4618      	mov	r0, r3
 80188dc:	240a      	movs	r4, #10
 80188de:	460f      	mov	r7, r1
 80188e0:	3101      	adds	r1, #1
 80188e2:	783a      	ldrb	r2, [r7, #0]
 80188e4:	3a30      	subs	r2, #48	; 0x30
 80188e6:	2a09      	cmp	r2, #9
 80188e8:	d903      	bls.n	80188f2 <_svfiprintf_r+0x192>
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d0ca      	beq.n	8018884 <_svfiprintf_r+0x124>
 80188ee:	9005      	str	r0, [sp, #20]
 80188f0:	e7c8      	b.n	8018884 <_svfiprintf_r+0x124>
 80188f2:	fb04 2000 	mla	r0, r4, r0, r2
 80188f6:	2301      	movs	r3, #1
 80188f8:	e7f1      	b.n	80188de <_svfiprintf_r+0x17e>
 80188fa:	ab03      	add	r3, sp, #12
 80188fc:	9300      	str	r3, [sp, #0]
 80188fe:	462a      	mov	r2, r5
 8018900:	4b10      	ldr	r3, [pc, #64]	; (8018944 <_svfiprintf_r+0x1e4>)
 8018902:	a904      	add	r1, sp, #16
 8018904:	4640      	mov	r0, r8
 8018906:	f3af 8000 	nop.w
 801890a:	f1b0 3fff 	cmp.w	r0, #4294967295
 801890e:	4681      	mov	r9, r0
 8018910:	d1d9      	bne.n	80188c6 <_svfiprintf_r+0x166>
 8018912:	89ab      	ldrh	r3, [r5, #12]
 8018914:	065b      	lsls	r3, r3, #25
 8018916:	f53f af38 	bmi.w	801878a <_svfiprintf_r+0x2a>
 801891a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801891c:	b01d      	add	sp, #116	; 0x74
 801891e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018922:	ab03      	add	r3, sp, #12
 8018924:	9300      	str	r3, [sp, #0]
 8018926:	462a      	mov	r2, r5
 8018928:	4b06      	ldr	r3, [pc, #24]	; (8018944 <_svfiprintf_r+0x1e4>)
 801892a:	a904      	add	r1, sp, #16
 801892c:	4640      	mov	r0, r8
 801892e:	f000 f881 	bl	8018a34 <_printf_i>
 8018932:	e7ea      	b.n	801890a <_svfiprintf_r+0x1aa>
 8018934:	0801e0b7 	.word	0x0801e0b7
 8018938:	0801e0bd 	.word	0x0801e0bd
 801893c:	0801e0c1 	.word	0x0801e0c1
 8018940:	00000000 	.word	0x00000000
 8018944:	080186a9 	.word	0x080186a9

08018948 <_printf_common>:
 8018948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801894c:	4691      	mov	r9, r2
 801894e:	461f      	mov	r7, r3
 8018950:	688a      	ldr	r2, [r1, #8]
 8018952:	690b      	ldr	r3, [r1, #16]
 8018954:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018958:	4293      	cmp	r3, r2
 801895a:	bfb8      	it	lt
 801895c:	4613      	movlt	r3, r2
 801895e:	f8c9 3000 	str.w	r3, [r9]
 8018962:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018966:	4606      	mov	r6, r0
 8018968:	460c      	mov	r4, r1
 801896a:	b112      	cbz	r2, 8018972 <_printf_common+0x2a>
 801896c:	3301      	adds	r3, #1
 801896e:	f8c9 3000 	str.w	r3, [r9]
 8018972:	6823      	ldr	r3, [r4, #0]
 8018974:	0699      	lsls	r1, r3, #26
 8018976:	bf42      	ittt	mi
 8018978:	f8d9 3000 	ldrmi.w	r3, [r9]
 801897c:	3302      	addmi	r3, #2
 801897e:	f8c9 3000 	strmi.w	r3, [r9]
 8018982:	6825      	ldr	r5, [r4, #0]
 8018984:	f015 0506 	ands.w	r5, r5, #6
 8018988:	d107      	bne.n	801899a <_printf_common+0x52>
 801898a:	f104 0a19 	add.w	sl, r4, #25
 801898e:	68e3      	ldr	r3, [r4, #12]
 8018990:	f8d9 2000 	ldr.w	r2, [r9]
 8018994:	1a9b      	subs	r3, r3, r2
 8018996:	429d      	cmp	r5, r3
 8018998:	db29      	blt.n	80189ee <_printf_common+0xa6>
 801899a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801899e:	6822      	ldr	r2, [r4, #0]
 80189a0:	3300      	adds	r3, #0
 80189a2:	bf18      	it	ne
 80189a4:	2301      	movne	r3, #1
 80189a6:	0692      	lsls	r2, r2, #26
 80189a8:	d42e      	bmi.n	8018a08 <_printf_common+0xc0>
 80189aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80189ae:	4639      	mov	r1, r7
 80189b0:	4630      	mov	r0, r6
 80189b2:	47c0      	blx	r8
 80189b4:	3001      	adds	r0, #1
 80189b6:	d021      	beq.n	80189fc <_printf_common+0xb4>
 80189b8:	6823      	ldr	r3, [r4, #0]
 80189ba:	68e5      	ldr	r5, [r4, #12]
 80189bc:	f8d9 2000 	ldr.w	r2, [r9]
 80189c0:	f003 0306 	and.w	r3, r3, #6
 80189c4:	2b04      	cmp	r3, #4
 80189c6:	bf08      	it	eq
 80189c8:	1aad      	subeq	r5, r5, r2
 80189ca:	68a3      	ldr	r3, [r4, #8]
 80189cc:	6922      	ldr	r2, [r4, #16]
 80189ce:	bf0c      	ite	eq
 80189d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80189d4:	2500      	movne	r5, #0
 80189d6:	4293      	cmp	r3, r2
 80189d8:	bfc4      	itt	gt
 80189da:	1a9b      	subgt	r3, r3, r2
 80189dc:	18ed      	addgt	r5, r5, r3
 80189de:	f04f 0900 	mov.w	r9, #0
 80189e2:	341a      	adds	r4, #26
 80189e4:	454d      	cmp	r5, r9
 80189e6:	d11b      	bne.n	8018a20 <_printf_common+0xd8>
 80189e8:	2000      	movs	r0, #0
 80189ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189ee:	2301      	movs	r3, #1
 80189f0:	4652      	mov	r2, sl
 80189f2:	4639      	mov	r1, r7
 80189f4:	4630      	mov	r0, r6
 80189f6:	47c0      	blx	r8
 80189f8:	3001      	adds	r0, #1
 80189fa:	d103      	bne.n	8018a04 <_printf_common+0xbc>
 80189fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a04:	3501      	adds	r5, #1
 8018a06:	e7c2      	b.n	801898e <_printf_common+0x46>
 8018a08:	18e1      	adds	r1, r4, r3
 8018a0a:	1c5a      	adds	r2, r3, #1
 8018a0c:	2030      	movs	r0, #48	; 0x30
 8018a0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018a12:	4422      	add	r2, r4
 8018a14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018a18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018a1c:	3302      	adds	r3, #2
 8018a1e:	e7c4      	b.n	80189aa <_printf_common+0x62>
 8018a20:	2301      	movs	r3, #1
 8018a22:	4622      	mov	r2, r4
 8018a24:	4639      	mov	r1, r7
 8018a26:	4630      	mov	r0, r6
 8018a28:	47c0      	blx	r8
 8018a2a:	3001      	adds	r0, #1
 8018a2c:	d0e6      	beq.n	80189fc <_printf_common+0xb4>
 8018a2e:	f109 0901 	add.w	r9, r9, #1
 8018a32:	e7d7      	b.n	80189e4 <_printf_common+0x9c>

08018a34 <_printf_i>:
 8018a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a38:	4617      	mov	r7, r2
 8018a3a:	7e0a      	ldrb	r2, [r1, #24]
 8018a3c:	b085      	sub	sp, #20
 8018a3e:	2a6e      	cmp	r2, #110	; 0x6e
 8018a40:	4698      	mov	r8, r3
 8018a42:	4606      	mov	r6, r0
 8018a44:	460c      	mov	r4, r1
 8018a46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018a48:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8018a4c:	f000 80bc 	beq.w	8018bc8 <_printf_i+0x194>
 8018a50:	d81a      	bhi.n	8018a88 <_printf_i+0x54>
 8018a52:	2a63      	cmp	r2, #99	; 0x63
 8018a54:	d02e      	beq.n	8018ab4 <_printf_i+0x80>
 8018a56:	d80a      	bhi.n	8018a6e <_printf_i+0x3a>
 8018a58:	2a00      	cmp	r2, #0
 8018a5a:	f000 80c8 	beq.w	8018bee <_printf_i+0x1ba>
 8018a5e:	2a58      	cmp	r2, #88	; 0x58
 8018a60:	f000 808a 	beq.w	8018b78 <_printf_i+0x144>
 8018a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018a68:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8018a6c:	e02a      	b.n	8018ac4 <_printf_i+0x90>
 8018a6e:	2a64      	cmp	r2, #100	; 0x64
 8018a70:	d001      	beq.n	8018a76 <_printf_i+0x42>
 8018a72:	2a69      	cmp	r2, #105	; 0x69
 8018a74:	d1f6      	bne.n	8018a64 <_printf_i+0x30>
 8018a76:	6821      	ldr	r1, [r4, #0]
 8018a78:	681a      	ldr	r2, [r3, #0]
 8018a7a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8018a7e:	d023      	beq.n	8018ac8 <_printf_i+0x94>
 8018a80:	1d11      	adds	r1, r2, #4
 8018a82:	6019      	str	r1, [r3, #0]
 8018a84:	6813      	ldr	r3, [r2, #0]
 8018a86:	e027      	b.n	8018ad8 <_printf_i+0xa4>
 8018a88:	2a73      	cmp	r2, #115	; 0x73
 8018a8a:	f000 80b4 	beq.w	8018bf6 <_printf_i+0x1c2>
 8018a8e:	d808      	bhi.n	8018aa2 <_printf_i+0x6e>
 8018a90:	2a6f      	cmp	r2, #111	; 0x6f
 8018a92:	d02a      	beq.n	8018aea <_printf_i+0xb6>
 8018a94:	2a70      	cmp	r2, #112	; 0x70
 8018a96:	d1e5      	bne.n	8018a64 <_printf_i+0x30>
 8018a98:	680a      	ldr	r2, [r1, #0]
 8018a9a:	f042 0220 	orr.w	r2, r2, #32
 8018a9e:	600a      	str	r2, [r1, #0]
 8018aa0:	e003      	b.n	8018aaa <_printf_i+0x76>
 8018aa2:	2a75      	cmp	r2, #117	; 0x75
 8018aa4:	d021      	beq.n	8018aea <_printf_i+0xb6>
 8018aa6:	2a78      	cmp	r2, #120	; 0x78
 8018aa8:	d1dc      	bne.n	8018a64 <_printf_i+0x30>
 8018aaa:	2278      	movs	r2, #120	; 0x78
 8018aac:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8018ab0:	496e      	ldr	r1, [pc, #440]	; (8018c6c <_printf_i+0x238>)
 8018ab2:	e064      	b.n	8018b7e <_printf_i+0x14a>
 8018ab4:	681a      	ldr	r2, [r3, #0]
 8018ab6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8018aba:	1d11      	adds	r1, r2, #4
 8018abc:	6019      	str	r1, [r3, #0]
 8018abe:	6813      	ldr	r3, [r2, #0]
 8018ac0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018ac4:	2301      	movs	r3, #1
 8018ac6:	e0a3      	b.n	8018c10 <_printf_i+0x1dc>
 8018ac8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8018acc:	f102 0104 	add.w	r1, r2, #4
 8018ad0:	6019      	str	r1, [r3, #0]
 8018ad2:	d0d7      	beq.n	8018a84 <_printf_i+0x50>
 8018ad4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	da03      	bge.n	8018ae4 <_printf_i+0xb0>
 8018adc:	222d      	movs	r2, #45	; 0x2d
 8018ade:	425b      	negs	r3, r3
 8018ae0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8018ae4:	4962      	ldr	r1, [pc, #392]	; (8018c70 <_printf_i+0x23c>)
 8018ae6:	220a      	movs	r2, #10
 8018ae8:	e017      	b.n	8018b1a <_printf_i+0xe6>
 8018aea:	6820      	ldr	r0, [r4, #0]
 8018aec:	6819      	ldr	r1, [r3, #0]
 8018aee:	f010 0f80 	tst.w	r0, #128	; 0x80
 8018af2:	d003      	beq.n	8018afc <_printf_i+0xc8>
 8018af4:	1d08      	adds	r0, r1, #4
 8018af6:	6018      	str	r0, [r3, #0]
 8018af8:	680b      	ldr	r3, [r1, #0]
 8018afa:	e006      	b.n	8018b0a <_printf_i+0xd6>
 8018afc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018b00:	f101 0004 	add.w	r0, r1, #4
 8018b04:	6018      	str	r0, [r3, #0]
 8018b06:	d0f7      	beq.n	8018af8 <_printf_i+0xc4>
 8018b08:	880b      	ldrh	r3, [r1, #0]
 8018b0a:	4959      	ldr	r1, [pc, #356]	; (8018c70 <_printf_i+0x23c>)
 8018b0c:	2a6f      	cmp	r2, #111	; 0x6f
 8018b0e:	bf14      	ite	ne
 8018b10:	220a      	movne	r2, #10
 8018b12:	2208      	moveq	r2, #8
 8018b14:	2000      	movs	r0, #0
 8018b16:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8018b1a:	6865      	ldr	r5, [r4, #4]
 8018b1c:	60a5      	str	r5, [r4, #8]
 8018b1e:	2d00      	cmp	r5, #0
 8018b20:	f2c0 809c 	blt.w	8018c5c <_printf_i+0x228>
 8018b24:	6820      	ldr	r0, [r4, #0]
 8018b26:	f020 0004 	bic.w	r0, r0, #4
 8018b2a:	6020      	str	r0, [r4, #0]
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d13f      	bne.n	8018bb0 <_printf_i+0x17c>
 8018b30:	2d00      	cmp	r5, #0
 8018b32:	f040 8095 	bne.w	8018c60 <_printf_i+0x22c>
 8018b36:	4675      	mov	r5, lr
 8018b38:	2a08      	cmp	r2, #8
 8018b3a:	d10b      	bne.n	8018b54 <_printf_i+0x120>
 8018b3c:	6823      	ldr	r3, [r4, #0]
 8018b3e:	07da      	lsls	r2, r3, #31
 8018b40:	d508      	bpl.n	8018b54 <_printf_i+0x120>
 8018b42:	6923      	ldr	r3, [r4, #16]
 8018b44:	6862      	ldr	r2, [r4, #4]
 8018b46:	429a      	cmp	r2, r3
 8018b48:	bfde      	ittt	le
 8018b4a:	2330      	movle	r3, #48	; 0x30
 8018b4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018b50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018b54:	ebae 0305 	sub.w	r3, lr, r5
 8018b58:	6123      	str	r3, [r4, #16]
 8018b5a:	f8cd 8000 	str.w	r8, [sp]
 8018b5e:	463b      	mov	r3, r7
 8018b60:	aa03      	add	r2, sp, #12
 8018b62:	4621      	mov	r1, r4
 8018b64:	4630      	mov	r0, r6
 8018b66:	f7ff feef 	bl	8018948 <_printf_common>
 8018b6a:	3001      	adds	r0, #1
 8018b6c:	d155      	bne.n	8018c1a <_printf_i+0x1e6>
 8018b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8018b72:	b005      	add	sp, #20
 8018b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b78:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8018b7c:	493c      	ldr	r1, [pc, #240]	; (8018c70 <_printf_i+0x23c>)
 8018b7e:	6822      	ldr	r2, [r4, #0]
 8018b80:	6818      	ldr	r0, [r3, #0]
 8018b82:	f012 0f80 	tst.w	r2, #128	; 0x80
 8018b86:	f100 0504 	add.w	r5, r0, #4
 8018b8a:	601d      	str	r5, [r3, #0]
 8018b8c:	d001      	beq.n	8018b92 <_printf_i+0x15e>
 8018b8e:	6803      	ldr	r3, [r0, #0]
 8018b90:	e002      	b.n	8018b98 <_printf_i+0x164>
 8018b92:	0655      	lsls	r5, r2, #25
 8018b94:	d5fb      	bpl.n	8018b8e <_printf_i+0x15a>
 8018b96:	8803      	ldrh	r3, [r0, #0]
 8018b98:	07d0      	lsls	r0, r2, #31
 8018b9a:	bf44      	itt	mi
 8018b9c:	f042 0220 	orrmi.w	r2, r2, #32
 8018ba0:	6022      	strmi	r2, [r4, #0]
 8018ba2:	b91b      	cbnz	r3, 8018bac <_printf_i+0x178>
 8018ba4:	6822      	ldr	r2, [r4, #0]
 8018ba6:	f022 0220 	bic.w	r2, r2, #32
 8018baa:	6022      	str	r2, [r4, #0]
 8018bac:	2210      	movs	r2, #16
 8018bae:	e7b1      	b.n	8018b14 <_printf_i+0xe0>
 8018bb0:	4675      	mov	r5, lr
 8018bb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8018bb6:	fb02 3310 	mls	r3, r2, r0, r3
 8018bba:	5ccb      	ldrb	r3, [r1, r3]
 8018bbc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018bc0:	4603      	mov	r3, r0
 8018bc2:	2800      	cmp	r0, #0
 8018bc4:	d1f5      	bne.n	8018bb2 <_printf_i+0x17e>
 8018bc6:	e7b7      	b.n	8018b38 <_printf_i+0x104>
 8018bc8:	6808      	ldr	r0, [r1, #0]
 8018bca:	681a      	ldr	r2, [r3, #0]
 8018bcc:	6949      	ldr	r1, [r1, #20]
 8018bce:	f010 0f80 	tst.w	r0, #128	; 0x80
 8018bd2:	d004      	beq.n	8018bde <_printf_i+0x1aa>
 8018bd4:	1d10      	adds	r0, r2, #4
 8018bd6:	6018      	str	r0, [r3, #0]
 8018bd8:	6813      	ldr	r3, [r2, #0]
 8018bda:	6019      	str	r1, [r3, #0]
 8018bdc:	e007      	b.n	8018bee <_printf_i+0x1ba>
 8018bde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018be2:	f102 0004 	add.w	r0, r2, #4
 8018be6:	6018      	str	r0, [r3, #0]
 8018be8:	6813      	ldr	r3, [r2, #0]
 8018bea:	d0f6      	beq.n	8018bda <_printf_i+0x1a6>
 8018bec:	8019      	strh	r1, [r3, #0]
 8018bee:	2300      	movs	r3, #0
 8018bf0:	6123      	str	r3, [r4, #16]
 8018bf2:	4675      	mov	r5, lr
 8018bf4:	e7b1      	b.n	8018b5a <_printf_i+0x126>
 8018bf6:	681a      	ldr	r2, [r3, #0]
 8018bf8:	1d11      	adds	r1, r2, #4
 8018bfa:	6019      	str	r1, [r3, #0]
 8018bfc:	6815      	ldr	r5, [r2, #0]
 8018bfe:	6862      	ldr	r2, [r4, #4]
 8018c00:	2100      	movs	r1, #0
 8018c02:	4628      	mov	r0, r5
 8018c04:	f7e7 fafc 	bl	8000200 <memchr>
 8018c08:	b108      	cbz	r0, 8018c0e <_printf_i+0x1da>
 8018c0a:	1b40      	subs	r0, r0, r5
 8018c0c:	6060      	str	r0, [r4, #4]
 8018c0e:	6863      	ldr	r3, [r4, #4]
 8018c10:	6123      	str	r3, [r4, #16]
 8018c12:	2300      	movs	r3, #0
 8018c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018c18:	e79f      	b.n	8018b5a <_printf_i+0x126>
 8018c1a:	6923      	ldr	r3, [r4, #16]
 8018c1c:	462a      	mov	r2, r5
 8018c1e:	4639      	mov	r1, r7
 8018c20:	4630      	mov	r0, r6
 8018c22:	47c0      	blx	r8
 8018c24:	3001      	adds	r0, #1
 8018c26:	d0a2      	beq.n	8018b6e <_printf_i+0x13a>
 8018c28:	6823      	ldr	r3, [r4, #0]
 8018c2a:	079b      	lsls	r3, r3, #30
 8018c2c:	d507      	bpl.n	8018c3e <_printf_i+0x20a>
 8018c2e:	2500      	movs	r5, #0
 8018c30:	f104 0919 	add.w	r9, r4, #25
 8018c34:	68e3      	ldr	r3, [r4, #12]
 8018c36:	9a03      	ldr	r2, [sp, #12]
 8018c38:	1a9b      	subs	r3, r3, r2
 8018c3a:	429d      	cmp	r5, r3
 8018c3c:	db05      	blt.n	8018c4a <_printf_i+0x216>
 8018c3e:	68e0      	ldr	r0, [r4, #12]
 8018c40:	9b03      	ldr	r3, [sp, #12]
 8018c42:	4298      	cmp	r0, r3
 8018c44:	bfb8      	it	lt
 8018c46:	4618      	movlt	r0, r3
 8018c48:	e793      	b.n	8018b72 <_printf_i+0x13e>
 8018c4a:	2301      	movs	r3, #1
 8018c4c:	464a      	mov	r2, r9
 8018c4e:	4639      	mov	r1, r7
 8018c50:	4630      	mov	r0, r6
 8018c52:	47c0      	blx	r8
 8018c54:	3001      	adds	r0, #1
 8018c56:	d08a      	beq.n	8018b6e <_printf_i+0x13a>
 8018c58:	3501      	adds	r5, #1
 8018c5a:	e7eb      	b.n	8018c34 <_printf_i+0x200>
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d1a7      	bne.n	8018bb0 <_printf_i+0x17c>
 8018c60:	780b      	ldrb	r3, [r1, #0]
 8018c62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018c66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018c6a:	e765      	b.n	8018b38 <_printf_i+0x104>
 8018c6c:	0801e0d9 	.word	0x0801e0d9
 8018c70:	0801e0c8 	.word	0x0801e0c8

08018c74 <_read_r>:
 8018c74:	b538      	push	{r3, r4, r5, lr}
 8018c76:	4c07      	ldr	r4, [pc, #28]	; (8018c94 <_read_r+0x20>)
 8018c78:	4605      	mov	r5, r0
 8018c7a:	4608      	mov	r0, r1
 8018c7c:	4611      	mov	r1, r2
 8018c7e:	2200      	movs	r2, #0
 8018c80:	6022      	str	r2, [r4, #0]
 8018c82:	461a      	mov	r2, r3
 8018c84:	f7fe fe8a 	bl	801799c <_read>
 8018c88:	1c43      	adds	r3, r0, #1
 8018c8a:	d102      	bne.n	8018c92 <_read_r+0x1e>
 8018c8c:	6823      	ldr	r3, [r4, #0]
 8018c8e:	b103      	cbz	r3, 8018c92 <_read_r+0x1e>
 8018c90:	602b      	str	r3, [r5, #0]
 8018c92:	bd38      	pop	{r3, r4, r5, pc}
 8018c94:	20004278 	.word	0x20004278

08018c98 <_realloc_r>:
 8018c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c9a:	4607      	mov	r7, r0
 8018c9c:	4614      	mov	r4, r2
 8018c9e:	460e      	mov	r6, r1
 8018ca0:	b921      	cbnz	r1, 8018cac <_realloc_r+0x14>
 8018ca2:	4611      	mov	r1, r2
 8018ca4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018ca8:	f7ff bb62 	b.w	8018370 <_malloc_r>
 8018cac:	b922      	cbnz	r2, 8018cb8 <_realloc_r+0x20>
 8018cae:	f7ff fb11 	bl	80182d4 <_free_r>
 8018cb2:	4625      	mov	r5, r4
 8018cb4:	4628      	mov	r0, r5
 8018cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cb8:	f000 f814 	bl	8018ce4 <_malloc_usable_size_r>
 8018cbc:	4284      	cmp	r4, r0
 8018cbe:	d90f      	bls.n	8018ce0 <_realloc_r+0x48>
 8018cc0:	4621      	mov	r1, r4
 8018cc2:	4638      	mov	r0, r7
 8018cc4:	f7ff fb54 	bl	8018370 <_malloc_r>
 8018cc8:	4605      	mov	r5, r0
 8018cca:	2800      	cmp	r0, #0
 8018ccc:	d0f2      	beq.n	8018cb4 <_realloc_r+0x1c>
 8018cce:	4631      	mov	r1, r6
 8018cd0:	4622      	mov	r2, r4
 8018cd2:	f7ff fad1 	bl	8018278 <memcpy>
 8018cd6:	4631      	mov	r1, r6
 8018cd8:	4638      	mov	r0, r7
 8018cda:	f7ff fafb 	bl	80182d4 <_free_r>
 8018cde:	e7e9      	b.n	8018cb4 <_realloc_r+0x1c>
 8018ce0:	4635      	mov	r5, r6
 8018ce2:	e7e7      	b.n	8018cb4 <_realloc_r+0x1c>

08018ce4 <_malloc_usable_size_r>:
 8018ce4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8018ce8:	2800      	cmp	r0, #0
 8018cea:	f1a0 0004 	sub.w	r0, r0, #4
 8018cee:	bfbc      	itt	lt
 8018cf0:	580b      	ldrlt	r3, [r1, r0]
 8018cf2:	18c0      	addlt	r0, r0, r3
 8018cf4:	4770      	bx	lr
	...

08018cf8 <_init>:
 8018cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cfa:	bf00      	nop
 8018cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018cfe:	bc08      	pop	{r3}
 8018d00:	469e      	mov	lr, r3
 8018d02:	4770      	bx	lr

08018d04 <_fini>:
 8018d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d06:	bf00      	nop
 8018d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d0a:	bc08      	pop	{r3}
 8018d0c:	469e      	mov	lr, r3
 8018d0e:	4770      	bx	lr
