
src_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08000a7c  08000a7c  00010a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000aec  08000aec  00010aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000af0  08000af0  00010af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000af4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000044  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  20000048  20000048  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002bd2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000c6d  00000000  00000000  00022c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000002f8  00000000  00000000  00023878  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000248  00000000  00000000  00023b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001825  00000000  00000000  00023db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001555  00000000  00000000  000255dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00026b32  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000844  00000000  00000000  00026bb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000a64 	.word	0x08000a64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000a64 	.word	0x08000a64

080001c8 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80001d4:	2300      	movs	r3, #0
 80001d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	691a      	ldr	r2, [r3, #16]
 80001dc:	887b      	ldrh	r3, [r7, #2]
 80001de:	4013      	ands	r3, r2
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80001e4:	2301      	movs	r3, #1
 80001e6:	73fb      	strb	r3, [r7, #15]
 80001e8:	e001      	b.n	80001ee <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80001ea:	2300      	movs	r3, #0
 80001ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3714      	adds	r7, #20
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr

080001fc <button_init>:
#include "button.h"

void button_init(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
    // Cấu hình input pull-up
    uint8_t pin = 0;
 8000202:	2300      	movs	r3, #0
 8000204:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 16; ++i) {
 8000206:	2300      	movs	r3, #0
 8000208:	71bb      	strb	r3, [r7, #6]
 800020a:	e008      	b.n	800021e <button_init+0x22>
        if (BUTTON_PIN & (1U << i)) { pin = i; break; }
 800020c:	79bb      	ldrb	r3, [r7, #6]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d102      	bne.n	8000218 <button_init+0x1c>
 8000212:	79bb      	ldrb	r3, [r7, #6]
 8000214:	71fb      	strb	r3, [r7, #7]
 8000216:	e005      	b.n	8000224 <button_init+0x28>
    for (uint8_t i = 0; i < 16; ++i) {
 8000218:	79bb      	ldrb	r3, [r7, #6]
 800021a:	3301      	adds	r3, #1
 800021c:	71bb      	strb	r3, [r7, #6]
 800021e:	79bb      	ldrb	r3, [r7, #6]
 8000220:	2b0f      	cmp	r3, #15
 8000222:	d9f3      	bls.n	800020c <button_init+0x10>
    }
    BUTTON_PORT->MODER &= ~(3U << (pin * 2));
 8000224:	4912      	ldr	r1, [pc, #72]	; (8000270 <button_init+0x74>)
 8000226:	4b12      	ldr	r3, [pc, #72]	; (8000270 <button_init+0x74>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	005b      	lsls	r3, r3, #1
 800022e:	2003      	movs	r0, #3
 8000230:	fa00 f303 	lsl.w	r3, r0, r3
 8000234:	43db      	mvns	r3, r3
 8000236:	4013      	ands	r3, r2
 8000238:	600b      	str	r3, [r1, #0]
    BUTTON_PORT->PUPDR &= ~(3U << (pin * 2));
 800023a:	490d      	ldr	r1, [pc, #52]	; (8000270 <button_init+0x74>)
 800023c:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <button_init+0x74>)
 800023e:	68da      	ldr	r2, [r3, #12]
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	005b      	lsls	r3, r3, #1
 8000244:	2003      	movs	r0, #3
 8000246:	fa00 f303 	lsl.w	r3, r0, r3
 800024a:	43db      	mvns	r3, r3
 800024c:	4013      	ands	r3, r2
 800024e:	60cb      	str	r3, [r1, #12]
    BUTTON_PORT->PUPDR |=  (1U << (pin * 2)); // Pull-up
 8000250:	4907      	ldr	r1, [pc, #28]	; (8000270 <button_init+0x74>)
 8000252:	4b07      	ldr	r3, [pc, #28]	; (8000270 <button_init+0x74>)
 8000254:	68da      	ldr	r2, [r3, #12]
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	2001      	movs	r0, #1
 800025c:	fa00 f303 	lsl.w	r3, r0, r3
 8000260:	4313      	orrs	r3, r2
 8000262:	60cb      	str	r3, [r1, #12]
}
 8000264:	bf00      	nop
 8000266:	370c      	adds	r7, #12
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr
 8000270:	40020000 	.word	0x40020000

08000274 <button_read_pin>:

uint8_t button_read_pin(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
    return GPIO_ReadInputDataBit(BUTTON_PORT, BUTTON_PIN);
 8000278:	2101      	movs	r1, #1
 800027a:	4803      	ldr	r0, [pc, #12]	; (8000288 <button_read_pin+0x14>)
 800027c:	f7ff ffa4 	bl	80001c8 <GPIO_ReadInputDataBit>
 8000280:	4603      	mov	r3, r0
 8000282:	4618      	mov	r0, r3
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40020000 	.word	0x40020000

0800028c <hardware_init>:
#include "button.h"
#include "uart.h"
#include "timer.h"
#include "stm32f4xx.h"

void hardware_init(void) {
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000290:	4a0b      	ldr	r2, [pc, #44]	; (80002c0 <hardware_init+0x34>)
 8000292:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <hardware_init+0x34>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000296:	f043 0303 	orr.w	r3, r3, #3
 800029a:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN | RCC_APB1ENR_TIM2EN; 
 800029c:	4a08      	ldr	r2, [pc, #32]	; (80002c0 <hardware_init+0x34>)
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <hardware_init+0x34>)
 80002a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	6413      	str	r3, [r2, #64]	; 0x40
    timer2_init_1ms();
 80002ac:	f000 f878 	bl	80003a0 <timer2_init_1ms>
    uart_init();
 80002b0:	f000 f8ca 	bl	8000448 <uart_init>
    led_init();
 80002b4:	f000 f806 	bl	80002c4 <led_init>
    button_init();
 80002b8:	f7ff ffa0 	bl	80001fc <button_init>
}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40023800 	.word	0x40023800

080002c4 <led_init>:
#include "stm32f4xx.h"
#include "led.h"

void led_init(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
    // Configure PB4 as output
    GPIOB->MODER &= ~(3U << (4 * 2));
 80002c8:	4a12      	ldr	r2, [pc, #72]	; (8000314 <led_init+0x50>)
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <led_init+0x50>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80002d2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (4 * 2));
 80002d4:	4a0f      	ldr	r2, [pc, #60]	; (8000314 <led_init+0x50>)
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <led_init+0x50>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002de:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER &= ~(1U << 4);
 80002e0:	4a0c      	ldr	r2, [pc, #48]	; (8000314 <led_init+0x50>)
 80002e2:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <led_init+0x50>)
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	f023 0310 	bic.w	r3, r3, #16
 80002ea:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (4 * 2));
 80002ec:	4a09      	ldr	r2, [pc, #36]	; (8000314 <led_init+0x50>)
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <led_init+0x50>)
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80002f6:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (4 * 2));
 80002f8:	4a06      	ldr	r2, [pc, #24]	; (8000314 <led_init+0x50>)
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <led_init+0x50>)
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000302:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 4);
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <led_init+0x50>)
 8000306:	2210      	movs	r2, #16
 8000308:	835a      	strh	r2, [r3, #26]
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	40020400 	.word	0x40020400

08000318 <led_4g_on>:

void led_4g_on(void) {
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
    GPIOB->BSRRL = (1U << 4);
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <led_4g_on+0x14>)
 800031e:	2210      	movs	r2, #16
 8000320:	831a      	strh	r2, [r3, #24]
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	40020400 	.word	0x40020400

08000330 <led_4g_off>:

void led_4g_off(void) {
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
    GPIOB->BSRRH = (1U << 4);
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <led_4g_off+0x14>)
 8000336:	2210      	movs	r2, #16
 8000338:	835a      	strh	r2, [r3, #26]
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	40020400 	.word	0x40020400

08000348 <led_4g_toggle>:

void led_4g_toggle(uint8_t value) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
    if (value)
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d002      	beq.n	800035e <led_4g_toggle+0x16>
        led_4g_on();
 8000358:	f7ff ffde 	bl	8000318 <led_4g_on>
    else
        led_4g_off();
 800035c:	e001      	b.n	8000362 <led_4g_toggle+0x1a>
        led_4g_off();
 800035e:	f7ff ffe7 	bl	8000330 <led_4g_off>
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
	...

0800036c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000376:	4909      	ldr	r1, [pc, #36]	; (800039c <NVIC_EnableIRQ+0x30>)
 8000378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037c:	095b      	lsrs	r3, r3, #5
 800037e:	79fa      	ldrb	r2, [r7, #7]
 8000380:	f002 021f 	and.w	r2, r2, #31
 8000384:	2001      	movs	r0, #1
 8000386:	fa00 f202 	lsl.w	r2, r0, r2
 800038a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	e000e100 	.word	0xe000e100

080003a0 <timer2_init_1ms>:
#include "stm32f4xx.h"

static volatile uint32_t timer2_tick = 0;

void timer2_init_1ms(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
    TIM2->PSC = 15;      // 16MHz / (15+1) = 1MHz
 80003a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a8:	220f      	movs	r2, #15
 80003aa:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM2->ARR = 999;     // 1MHz / (999+1) = 1kHz (1ms)
 80003ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003b4:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->EGR = TIM_EGR_UG;
 80003b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ba:	2201      	movs	r2, #1
 80003bc:	829a      	strh	r2, [r3, #20]
    TIM2->DIER |= TIM_DIER_UIE;
 80003be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003c6:	899b      	ldrh	r3, [r3, #12]
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	f043 0301 	orr.w	r3, r3, #1
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	8193      	strh	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;
 80003d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	b29b      	uxth	r3, r3
 80003de:	f043 0301 	orr.w	r3, r3, #1
 80003e2:	b29b      	uxth	r3, r3
 80003e4:	8013      	strh	r3, [r2, #0]
    NVIC_EnableIRQ(TIM2_IRQn);
 80003e6:	201c      	movs	r0, #28
 80003e8:	f7ff ffc0 	bl	800036c <NVIC_EnableIRQ>
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) // Update interrupt flag
 80003f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f8:	8a1b      	ldrh	r3, [r3, #16]
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	f003 0301 	and.w	r3, r3, #1
 8000400:	2b00      	cmp	r3, #0
 8000402:	d00e      	beq.n	8000422 <TIM2_IRQHandler+0x32>
    {
        TIM2->SR &= ~TIM_SR_UIF; // Clear flag
 8000404:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800040c:	8a1b      	ldrh	r3, [r3, #16]
 800040e:	b29b      	uxth	r3, r3
 8000410:	f023 0301 	bic.w	r3, r3, #1
 8000414:	b29b      	uxth	r3, r3
 8000416:	8213      	strh	r3, [r2, #16]
        timer2_tick++;
 8000418:	4b04      	ldr	r3, [pc, #16]	; (800042c <TIM2_IRQHandler+0x3c>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	3301      	adds	r3, #1
 800041e:	4a03      	ldr	r2, [pc, #12]	; (800042c <TIM2_IRQHandler+0x3c>)
 8000420:	6013      	str	r3, [r2, #0]
    }
}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	20000020 	.word	0x20000020

08000430 <timer2_get_tick>:

uint32_t timer2_get_tick(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
    return timer2_tick;
 8000434:	4b03      	ldr	r3, [pc, #12]	; (8000444 <timer2_get_tick+0x14>)
 8000436:	681b      	ldr	r3, [r3, #0]
}
 8000438:	4618      	mov	r0, r3
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	20000020 	.word	0x20000020

08000448 <uart_init>:
#include "hardware.h"
#include "stm32f4xx.h"
#include <string.h>

void uart_init(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
    // PA2 (TX), PA3 (RX) alternate function
    OS_PC_UART_GPIO_PORT->MODER &= ~((3U << (2*2)) | (3U << (3*2)));
 800044c:	4a11      	ldr	r2, [pc, #68]	; (8000494 <uart_init+0x4c>)
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <uart_init+0x4c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000456:	6013      	str	r3, [r2, #0]
    OS_PC_UART_GPIO_PORT->MODER |=  ((2U << (2*2)) | (2U << (3*2)));
 8000458:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <uart_init+0x4c>)
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <uart_init+0x4c>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000462:	6013      	str	r3, [r2, #0]
    OS_PC_UART_GPIO_PORT->AFR[0] &= ~((0xF << (4*2)) | (0xF << (4*3)));
 8000464:	4a0b      	ldr	r2, [pc, #44]	; (8000494 <uart_init+0x4c>)
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <uart_init+0x4c>)
 8000468:	6a1b      	ldr	r3, [r3, #32]
 800046a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800046e:	6213      	str	r3, [r2, #32]
    OS_PC_UART_GPIO_PORT->AFR[0] |=  ((7U << (4*2)) | (7U << (4*3))); // AF7 for USART2
 8000470:	4a08      	ldr	r2, [pc, #32]	; (8000494 <uart_init+0x4c>)
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <uart_init+0x4c>)
 8000474:	6a1b      	ldr	r3, [r3, #32]
 8000476:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800047a:	6213      	str	r3, [r2, #32]

    OS_PC_UART_INSTANCE->BRR = 16000000/115200;
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <uart_init+0x50>)
 800047e:	228a      	movs	r2, #138	; 0x8a
 8000480:	811a      	strh	r2, [r3, #8]
    OS_PC_UART_INSTANCE->CR1 = USART_CR1_TE | USART_CR1_UE;
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <uart_init+0x50>)
 8000484:	f242 0208 	movw	r2, #8200	; 0x2008
 8000488:	819a      	strh	r2, [r3, #12]
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	40020000 	.word	0x40020000
 8000498:	40004400 	.word	0x40004400

0800049c <uart_log>:

void uart_log(const char* msg)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
    const char* p = msg;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	60fb      	str	r3, [r7, #12]
    while (*p) {
 80004a8:	e00e      	b.n	80004c8 <uart_log+0x2c>
        while (!(OS_PC_UART_INSTANCE->SR & USART_SR_TXE));
 80004aa:	bf00      	nop
 80004ac:	4b16      	ldr	r3, [pc, #88]	; (8000508 <uart_log+0x6c>)
 80004ae:	881b      	ldrh	r3, [r3, #0]
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d0f8      	beq.n	80004ac <uart_log+0x10>
        OS_PC_UART_INSTANCE->DR = *p++;
 80004ba:	4913      	ldr	r1, [pc, #76]	; (8000508 <uart_log+0x6c>)
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	60fa      	str	r2, [r7, #12]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	808b      	strh	r3, [r1, #4]
    while (*p) {
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d1ec      	bne.n	80004aa <uart_log+0xe>
    }
    // Gửi ký tự xuống dòng
    while (!(OS_PC_UART_INSTANCE->SR & USART_SR_TXE));
 80004d0:	bf00      	nop
 80004d2:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <uart_log+0x6c>)
 80004d4:	881b      	ldrh	r3, [r3, #0]
 80004d6:	b29b      	uxth	r3, r3
 80004d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d0f8      	beq.n	80004d2 <uart_log+0x36>
    OS_PC_UART_INSTANCE->DR = '\r';
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <uart_log+0x6c>)
 80004e2:	220d      	movs	r2, #13
 80004e4:	809a      	strh	r2, [r3, #4]
    while (!(OS_PC_UART_INSTANCE->SR & USART_SR_TXE));
 80004e6:	bf00      	nop
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <uart_log+0x6c>)
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0f8      	beq.n	80004e8 <uart_log+0x4c>
    OS_PC_UART_INSTANCE->DR = '\n';
 80004f6:	4b04      	ldr	r3, [pc, #16]	; (8000508 <uart_log+0x6c>)
 80004f8:	220a      	movs	r2, #10
 80004fa:	809a      	strh	r2, [r3, #4]
 80004fc:	bf00      	nop
 80004fe:	3714      	adds	r7, #20
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	40004400 	.word	0x40004400

0800050c <main>:
#include "middle/button_logic.h"
#include "middle/led_logic.h"
#include "middle/logger.h"

int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
    hardware_init();
 8000510:	f7ff febc 	bl	800028c <hardware_init>
    logger_log("System started");
 8000514:	480b      	ldr	r0, [pc, #44]	; (8000544 <main+0x38>)
 8000516:	f000 f971 	bl	80007fc <logger_log>
    while (1)
    {
        button_logic_update();    
 800051a:	f000 f817 	bl	800054c <button_logic_update>
        button_logic_process();   
 800051e:	f000 f87d 	bl	800061c <button_logic_process>
        switch (led_4g_mode)
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <main+0x3c>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	b2db      	uxtb	r3, r3
 8000528:	2b01      	cmp	r3, #1
 800052a:	d003      	beq.n	8000534 <main+0x28>
 800052c:	2b02      	cmp	r3, #2
 800052e:	d004      	beq.n	800053a <main+0x2e>
 8000530:	2b00      	cmp	r3, #0
        {
            case 0:
                break;
 8000532:	e005      	b.n	8000540 <main+0x34>
            case 1:
                led_logic_blink_200_200();
 8000534:	f000 f8bc 	bl	80006b0 <led_logic_blink_200_200>
                break;
 8000538:	e002      	b.n	8000540 <main+0x34>
            case 2:
                led_logic_blink_200_500_200_2000();
 800053a:	f000 f8f1 	bl	8000720 <led_logic_blink_200_500_200_2000>
                break;
 800053e:	bf00      	nop
        button_logic_update();    
 8000540:	e7eb      	b.n	800051a <main+0xe>
 8000542:	bf00      	nop
 8000544:	08000a7c 	.word	0x08000a7c
 8000548:	20000024 	.word	0x20000024

0800054c <button_logic_update>:

void button_logic_init(void) {
    button_init();
}

void button_logic_update(void) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
    uint8_t state = button_read_pin();
 8000552:	f7ff fe8f 	bl	8000274 <button_read_pin>
 8000556:	4603      	mov	r3, r0
 8000558:	73fb      	strb	r3, [r7, #15]
    uint32_t now = timer2_get_tick();
 800055a:	f7ff ff69 	bl	8000430 <timer2_get_tick>
 800055e:	60b8      	str	r0, [r7, #8]

    if (state != last_state) {
 8000560:	4b26      	ldr	r3, [pc, #152]	; (80005fc <button_logic_update+0xb0>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	7bfa      	ldrb	r2, [r7, #15]
 8000566:	429a      	cmp	r2, r3
 8000568:	d005      	beq.n	8000576 <button_logic_update+0x2a>
        last_debounce_tick = now;
 800056a:	4a25      	ldr	r2, [pc, #148]	; (8000600 <button_logic_update+0xb4>)
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	6013      	str	r3, [r2, #0]
        last_state = state;
 8000570:	4a22      	ldr	r2, [pc, #136]	; (80005fc <button_logic_update+0xb0>)
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	7013      	strb	r3, [r2, #0]
    }

    if ((now - last_debounce_tick) > DEBOUNCE_TIME) {
 8000576:	4b22      	ldr	r3, [pc, #136]	; (8000600 <button_logic_update+0xb4>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	2b32      	cmp	r3, #50	; 0x32
 8000580:	d938      	bls.n	80005f4 <button_logic_update+0xa8>
        if (state == 0 && !button_handled) { // Nhấn
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d109      	bne.n	800059c <button_logic_update+0x50>
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <button_logic_update+0xb8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d105      	bne.n	800059c <button_logic_update+0x50>
            press_time = now;
 8000590:	4a1d      	ldr	r2, [pc, #116]	; (8000608 <button_logic_update+0xbc>)
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	6013      	str	r3, [r2, #0]
            button_handled = 1;
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <button_logic_update+0xb8>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
        }
        if (state == 1 && button_handled) { // Nhả
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d128      	bne.n	80005f4 <button_logic_update+0xa8>
 80005a2:	4b18      	ldr	r3, [pc, #96]	; (8000604 <button_logic_update+0xb8>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d024      	beq.n	80005f4 <button_logic_update+0xa8>
            release_time = now;
 80005aa:	4a18      	ldr	r2, [pc, #96]	; (800060c <button_logic_update+0xc0>)
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	6013      	str	r3, [r2, #0]
            uint32_t hold_time = release_time - press_time;
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <button_logic_update+0xc0>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <button_logic_update+0xbc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	607b      	str	r3, [r7, #4]
            if (hold_time < SHORT_PRESS_MAX) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f241 3287 	movw	r2, #4999	; 0x1387
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d813      	bhi.n	80005ee <button_logic_update+0xa2>
                led_4g_state ^= 1;
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <button_logic_update+0xc4>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	f083 0301 	eor.w	r3, r3, #1
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <button_logic_update+0xc4>)
 80005d4:	701a      	strb	r2, [r3, #0]
                led_4g_toggle(led_4g_state);
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <button_logic_update+0xc4>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff feb3 	bl	8000348 <led_4g_toggle>
                led_4g_mode = 0;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <button_logic_update+0xc8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
                uart_log("Button: Short press, mode 0");
 80005e8:	480b      	ldr	r0, [pc, #44]	; (8000618 <button_logic_update+0xcc>)
 80005ea:	f7ff ff57 	bl	800049c <uart_log>
            }
            button_handled = 0;
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <button_logic_update+0xb8>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000000 	.word	0x20000000
 8000600:	20000034 	.word	0x20000034
 8000604:	20000030 	.word	0x20000030
 8000608:	20000028 	.word	0x20000028
 800060c:	2000002c 	.word	0x2000002c
 8000610:	20000025 	.word	0x20000025
 8000614:	20000024 	.word	0x20000024
 8000618:	08000a8c 	.word	0x08000a8c

0800061c <button_logic_process>:

void button_logic_process(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
    if (last_state == 0 && button_handled) { // Đang giữ nút
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <button_logic_process+0x7c>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d131      	bne.n	800068e <button_logic_process+0x72>
 800062a:	4b1c      	ldr	r3, [pc, #112]	; (800069c <button_logic_process+0x80>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d02d      	beq.n	800068e <button_logic_process+0x72>
        uint32_t now = timer2_get_tick();
 8000632:	f7ff fefd 	bl	8000430 <timer2_get_tick>
 8000636:	6078      	str	r0, [r7, #4]
        uint32_t hold_time = now - press_time;
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <button_logic_process+0x84>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	603b      	str	r3, [r7, #0]
        if (hold_time >= LONG_PRESS_2 && led_4g_mode != 2) {
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	f242 720f 	movw	r2, #9999	; 0x270f
 8000648:	4293      	cmp	r3, r2
 800064a:	d90b      	bls.n	8000664 <button_logic_process+0x48>
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <button_logic_process+0x88>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b02      	cmp	r3, #2
 8000654:	d006      	beq.n	8000664 <button_logic_process+0x48>
            led_4g_mode = 2;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <button_logic_process+0x88>)
 8000658:	2202      	movs	r2, #2
 800065a:	701a      	strb	r2, [r3, #0]
            uart_log("Button: Long press >10s, mode 2");
 800065c:	4812      	ldr	r0, [pc, #72]	; (80006a8 <button_logic_process+0x8c>)
 800065e:	f7ff ff1d 	bl	800049c <uart_log>
        } else if (hold_time >= LONG_PRESS_1 && hold_time < LONG_PRESS_2 && led_4g_mode != 1) {
            led_4g_mode = 1;
            uart_log("Button: Long press 5-10s, mode 1");
        }
    }
 8000662:	e014      	b.n	800068e <button_logic_process+0x72>
        } else if (hold_time >= LONG_PRESS_1 && hold_time < LONG_PRESS_2 && led_4g_mode != 1) {
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	f241 3287 	movw	r2, #4999	; 0x1387
 800066a:	4293      	cmp	r3, r2
 800066c:	d90f      	bls.n	800068e <button_logic_process+0x72>
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	f242 720f 	movw	r2, #9999	; 0x270f
 8000674:	4293      	cmp	r3, r2
 8000676:	d80a      	bhi.n	800068e <button_logic_process+0x72>
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <button_logic_process+0x88>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b01      	cmp	r3, #1
 8000680:	d005      	beq.n	800068e <button_logic_process+0x72>
            led_4g_mode = 1;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <button_logic_process+0x88>)
 8000684:	2201      	movs	r2, #1
 8000686:	701a      	strb	r2, [r3, #0]
            uart_log("Button: Long press 5-10s, mode 1");
 8000688:	4808      	ldr	r0, [pc, #32]	; (80006ac <button_logic_process+0x90>)
 800068a:	f7ff ff07 	bl	800049c <uart_log>
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000000 	.word	0x20000000
 800069c:	20000030 	.word	0x20000030
 80006a0:	20000028 	.word	0x20000028
 80006a4:	20000024 	.word	0x20000024
 80006a8:	08000aa8 	.word	0x08000aa8
 80006ac:	08000ac8 	.word	0x08000ac8

080006b0 <led_logic_blink_200_200>:
#include "middle/led_logic.h"
#include "hardware/led.h"
#include "hardware/timer.h"

void led_logic_blink_200_200(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t led_state = 0;
    uint32_t now = timer2_get_tick();
 80006b6:	f7ff febb 	bl	8000430 <timer2_get_tick>
 80006ba:	6078      	str	r0, [r7, #4]

    if (now < last_tick) last_tick = now;
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <led_logic_blink_200_200+0x68>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d202      	bcs.n	80006cc <led_logic_blink_200_200+0x1c>
 80006c6:	4a14      	ldr	r2, [pc, #80]	; (8000718 <led_logic_blink_200_200+0x68>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6013      	str	r3, [r2, #0]

    if (led_state) {
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <led_logic_blink_200_200+0x6c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d00e      	beq.n	80006f2 <led_logic_blink_200_200+0x42>
        if (now - last_tick >= 200) {
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <led_logic_blink_200_200+0x68>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	2bc7      	cmp	r3, #199	; 0xc7
 80006de:	d916      	bls.n	800070e <led_logic_blink_200_200+0x5e>
            led_4g_off();
 80006e0:	f7ff fe26 	bl	8000330 <led_4g_off>
            led_state = 0;
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <led_logic_blink_200_200+0x6c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
            last_tick = now;
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <led_logic_blink_200_200+0x68>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6013      	str	r3, [r2, #0]
            led_4g_on();
            led_state = 1;
            last_tick = now;
        }
    }
}
 80006f0:	e00d      	b.n	800070e <led_logic_blink_200_200+0x5e>
        if (now - last_tick >= 200) {
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <led_logic_blink_200_200+0x68>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	2bc7      	cmp	r3, #199	; 0xc7
 80006fc:	d907      	bls.n	800070e <led_logic_blink_200_200+0x5e>
            led_4g_on();
 80006fe:	f7ff fe0b 	bl	8000318 <led_4g_on>
            led_state = 1;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <led_logic_blink_200_200+0x6c>)
 8000704:	2201      	movs	r2, #1
 8000706:	701a      	strb	r2, [r3, #0]
            last_tick = now;
 8000708:	4a03      	ldr	r2, [pc, #12]	; (8000718 <led_logic_blink_200_200+0x68>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6013      	str	r3, [r2, #0]
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000038 	.word	0x20000038
 800071c:	2000003c 	.word	0x2000003c

08000720 <led_logic_blink_200_500_200_2000>:

void led_logic_blink_200_500_200_2000(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t phase = 0;
    uint32_t now = timer2_get_tick();
 8000726:	f7ff fe83 	bl	8000430 <timer2_get_tick>
 800072a:	6078      	str	r0, [r7, #4]

    if (now < last_tick) {
 800072c:	4b31      	ldr	r3, [pc, #196]	; (80007f4 <led_logic_blink_200_500_200_2000+0xd4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	429a      	cmp	r2, r3
 8000734:	d205      	bcs.n	8000742 <led_logic_blink_200_500_200_2000+0x22>
        last_tick = now;
 8000736:	4a2f      	ldr	r2, [pc, #188]	; (80007f4 <led_logic_blink_200_500_200_2000+0xd4>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6013      	str	r3, [r2, #0]
        phase = 0;
 800073c:	4b2e      	ldr	r3, [pc, #184]	; (80007f8 <led_logic_blink_200_500_200_2000+0xd8>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
    }

    switch (phase) {
 8000742:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <led_logic_blink_200_500_200_2000+0xd8>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b03      	cmp	r3, #3
 8000748:	d84f      	bhi.n	80007ea <led_logic_blink_200_500_200_2000+0xca>
 800074a:	a201      	add	r2, pc, #4	; (adr r2, 8000750 <led_logic_blink_200_500_200_2000+0x30>)
 800074c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000750:	08000761 	.word	0x08000761
 8000754:	0800077f 	.word	0x0800077f
 8000758:	0800079f 	.word	0x0800079f
 800075c:	080007bd 	.word	0x080007bd
        case 0:
            led_4g_on();
 8000760:	f7ff fdda 	bl	8000318 <led_4g_on>
            if (now - last_tick >= 200) {
 8000764:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <led_logic_blink_200_500_200_2000+0xd4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	2bc7      	cmp	r3, #199	; 0xc7
 800076e:	d935      	bls.n	80007dc <led_logic_blink_200_500_200_2000+0xbc>
                last_tick = now;
 8000770:	4a20      	ldr	r2, [pc, #128]	; (80007f4 <led_logic_blink_200_500_200_2000+0xd4>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6013      	str	r3, [r2, #0]
                phase = 1;
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <led_logic_blink_200_500_200_2000+0xd8>)
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800077c:	e02e      	b.n	80007dc <led_logic_blink_200_500_200_2000+0xbc>
        case 1:
            led_4g_off();
 800077e:	f7ff fdd7 	bl	8000330 <led_4g_off>
            if (now - last_tick >= 500) {
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <led_logic_blink_200_500_200_2000+0xd4>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800078e:	d327      	bcc.n	80007e0 <led_logic_blink_200_500_200_2000+0xc0>
                last_tick = now;
 8000790:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <led_logic_blink_200_500_200_2000+0xd4>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6013      	str	r3, [r2, #0]
                phase = 2;
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <led_logic_blink_200_500_200_2000+0xd8>)
 8000798:	2202      	movs	r2, #2
 800079a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800079c:	e020      	b.n	80007e0 <led_logic_blink_200_500_200_2000+0xc0>
        case 2:
            led_4g_on();
 800079e:	f7ff fdbb 	bl	8000318 <led_4g_on>
            if (now - last_tick >= 200) {
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <led_logic_blink_200_500_200_2000+0xd4>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	2bc7      	cmp	r3, #199	; 0xc7
 80007ac:	d91a      	bls.n	80007e4 <led_logic_blink_200_500_200_2000+0xc4>
                last_tick = now;
 80007ae:	4a11      	ldr	r2, [pc, #68]	; (80007f4 <led_logic_blink_200_500_200_2000+0xd4>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6013      	str	r3, [r2, #0]
                phase = 3;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <led_logic_blink_200_500_200_2000+0xd8>)
 80007b6:	2203      	movs	r2, #3
 80007b8:	701a      	strb	r2, [r3, #0]
            }
            break;
 80007ba:	e013      	b.n	80007e4 <led_logic_blink_200_500_200_2000+0xc4>
        case 3:
            led_4g_off();
 80007bc:	f7ff fdb8 	bl	8000330 <led_4g_off>
            if (now - last_tick >= 2000) {
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <led_logic_blink_200_500_200_2000+0xd4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80007cc:	d30c      	bcc.n	80007e8 <led_logic_blink_200_500_200_2000+0xc8>
                last_tick = now;
 80007ce:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <led_logic_blink_200_500_200_2000+0xd4>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6013      	str	r3, [r2, #0]
                phase = 0;
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <led_logic_blink_200_500_200_2000+0xd8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
            }
            break;
 80007da:	e005      	b.n	80007e8 <led_logic_blink_200_500_200_2000+0xc8>
            break;
 80007dc:	bf00      	nop
 80007de:	e004      	b.n	80007ea <led_logic_blink_200_500_200_2000+0xca>
            break;
 80007e0:	bf00      	nop
 80007e2:	e002      	b.n	80007ea <led_logic_blink_200_500_200_2000+0xca>
            break;
 80007e4:	bf00      	nop
 80007e6:	e000      	b.n	80007ea <led_logic_blink_200_500_200_2000+0xca>
            break;
 80007e8:	bf00      	nop
    }
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000040 	.word	0x20000040
 80007f8:	20000044 	.word	0x20000044

080007fc <logger_log>:

void logger_init(void) {
    uart_init();
}

void logger_log(const char* msg) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
    uart_log(msg);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff fe49 	bl	800049c <uart_log>
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800084c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000818:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800081a:	e003      	b.n	8000824 <LoopCopyDataInit>

0800081c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800081e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000820:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000822:	3104      	adds	r1, #4

08000824 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000828:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800082a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800082c:	d3f6      	bcc.n	800081c <CopyDataInit>
  ldr  r2, =_sbss
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000830:	e002      	b.n	8000838 <LoopFillZerobss>

08000832 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000832:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000834:	f842 3b04 	str.w	r3, [r2], #4

08000838 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800083a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800083c:	d3f9      	bcc.n	8000832 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800083e:	f000 f841 	bl	80008c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000842:	f000 f8eb 	bl	8000a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000846:	f7ff fe61 	bl	800050c <main>
  bx  lr    
 800084a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800084c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000850:	08000af4 	.word	0x08000af4
  ldr  r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000858:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 800085c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000860:	20000048 	.word	0x20000048

08000864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC_IRQHandler>

08000866 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000878:	e7fe      	b.n	8000878 <HardFault_Handler+0x4>

0800087a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800087e:	e7fe      	b.n	800087e <MemManage_Handler+0x4>

08000880 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000884:	e7fe      	b.n	8000884 <BusFault_Handler+0x4>

08000886 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800088a:	e7fe      	b.n	800088a <UsageFault_Handler+0x4>

0800088c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c8:	4a16      	ldr	r2, [pc, #88]	; (8000924 <SystemInit+0x60>)
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <SystemInit+0x60>)
 80008cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <SystemInit+0x64>)
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <SystemInit+0x64>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008e4:	4b10      	ldr	r3, [pc, #64]	; (8000928 <SystemInit+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80008ea:	4a0f      	ldr	r2, [pc, #60]	; (8000928 <SystemInit+0x64>)
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <SystemInit+0x64>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80008f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <SystemInit+0x64>)
 80008fc:	4a0b      	ldr	r2, [pc, #44]	; (800092c <SystemInit+0x68>)
 80008fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000900:	4a09      	ldr	r2, [pc, #36]	; (8000928 <SystemInit+0x64>)
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <SystemInit+0x64>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800090a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <SystemInit+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000912:	f000 f80d 	bl	8000930 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000916:	4b03      	ldr	r3, [pc, #12]	; (8000924 <SystemInit+0x60>)
 8000918:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800091c:	609a      	str	r2, [r3, #8]
#endif
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00
 8000928:	40023800 	.word	0x40023800
 800092c:	24003010 	.word	0x24003010

08000930 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
  //RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800093e:	4b33      	ldr	r3, [pc, #204]	; (8000a0c <SetSysClock+0xdc>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000946:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3301      	adds	r3, #1
 800094c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d103      	bne.n	800095c <SetSysClock+0x2c>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800095a:	d1f0      	bne.n	800093e <SetSysClock+0xe>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800095c:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <SetSysClock+0xdc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <SetSysClock+0x3e>
  {
    HSEStatus = (uint32_t)0x01;
 8000968:	2301      	movs	r3, #1
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	e001      	b.n	8000972 <SetSysClock+0x42>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d142      	bne.n	80009fe <SetSysClock+0xce>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000978:	4a24      	ldr	r2, [pc, #144]	; (8000a0c <SetSysClock+0xdc>)
 800097a:	4b24      	ldr	r3, [pc, #144]	; (8000a0c <SetSysClock+0xdc>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000982:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000984:	4a22      	ldr	r2, [pc, #136]	; (8000a10 <SetSysClock+0xe0>)
 8000986:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <SetSysClock+0xe0>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800098e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000990:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <SetSysClock+0xdc>)
 8000992:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <SetSysClock+0xdc>)
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000998:	4a1c      	ldr	r2, [pc, #112]	; (8000a0c <SetSysClock+0xdc>)
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <SetSysClock+0xdc>)
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009a2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80009a4:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <SetSysClock+0xdc>)
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <SetSysClock+0xdc>)
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80009ae:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <SetSysClock+0xdc>)
 80009b2:	4a18      	ldr	r2, [pc, #96]	; (8000a14 <SetSysClock+0xe4>)
 80009b4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <SetSysClock+0xdc>)
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <SetSysClock+0xdc>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009c0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80009c2:	bf00      	nop
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <SetSysClock+0xdc>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d0f9      	beq.n	80009c4 <SetSysClock+0x94>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <SetSysClock+0xe8>)
 80009d2:	f240 7205 	movw	r2, #1797	; 0x705
 80009d6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80009d8:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <SetSysClock+0xdc>)
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <SetSysClock+0xdc>)
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	f023 0303 	bic.w	r3, r3, #3
 80009e2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80009e4:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <SetSysClock+0xdc>)
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <SetSysClock+0xdc>)
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	f043 0302 	orr.w	r3, r3, #2
 80009ee:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80009f0:	bf00      	nop
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <SetSysClock+0xdc>)
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	f003 030c 	and.w	r3, r3, #12
 80009fa:	2b08      	cmp	r3, #8
 80009fc:	d1f9      	bne.n	80009f2 <SetSysClock+0xc2>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40007000 	.word	0x40007000
 8000a14:	07405419 	.word	0x07405419
 8000a18:	40023c00 	.word	0x40023c00

08000a1c <__libc_init_array>:
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	4e0d      	ldr	r6, [pc, #52]	; (8000a54 <__libc_init_array+0x38>)
 8000a20:	4c0d      	ldr	r4, [pc, #52]	; (8000a58 <__libc_init_array+0x3c>)
 8000a22:	1ba4      	subs	r4, r4, r6
 8000a24:	10a4      	asrs	r4, r4, #2
 8000a26:	2500      	movs	r5, #0
 8000a28:	42a5      	cmp	r5, r4
 8000a2a:	d109      	bne.n	8000a40 <__libc_init_array+0x24>
 8000a2c:	4e0b      	ldr	r6, [pc, #44]	; (8000a5c <__libc_init_array+0x40>)
 8000a2e:	4c0c      	ldr	r4, [pc, #48]	; (8000a60 <__libc_init_array+0x44>)
 8000a30:	f000 f818 	bl	8000a64 <_init>
 8000a34:	1ba4      	subs	r4, r4, r6
 8000a36:	10a4      	asrs	r4, r4, #2
 8000a38:	2500      	movs	r5, #0
 8000a3a:	42a5      	cmp	r5, r4
 8000a3c:	d105      	bne.n	8000a4a <__libc_init_array+0x2e>
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a44:	4798      	blx	r3
 8000a46:	3501      	adds	r5, #1
 8000a48:	e7ee      	b.n	8000a28 <__libc_init_array+0xc>
 8000a4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a4e:	4798      	blx	r3
 8000a50:	3501      	adds	r5, #1
 8000a52:	e7f2      	b.n	8000a3a <__libc_init_array+0x1e>
 8000a54:	08000aec 	.word	0x08000aec
 8000a58:	08000aec 	.word	0x08000aec
 8000a5c:	08000aec 	.word	0x08000aec
 8000a60:	08000af0 	.word	0x08000af0

08000a64 <_init>:
 8000a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a66:	bf00      	nop
 8000a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a6a:	bc08      	pop	{r3}
 8000a6c:	469e      	mov	lr, r3
 8000a6e:	4770      	bx	lr

08000a70 <_fini>:
 8000a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a72:	bf00      	nop
 8000a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a76:	bc08      	pop	{r3}
 8000a78:	469e      	mov	lr, r3
 8000a7a:	4770      	bx	lr
