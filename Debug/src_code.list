
src_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001479c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035d0  0801492c  0801492c  0002492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08017efc  08017efc  00027efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08017f00  08017f00  00027f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08017f04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00030074  2**0
                  CONTENTS
  7 .bss          0000240c  20000074  20000074  00030074  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  20002480  20002480  00030074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003bdce  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000071fe  00000000  00000000  0006be72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001730  00000000  00000000  00073070  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001600  00000000  00000000  000747a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010c85  00000000  00000000  00075da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000066a9  00000000  00000000  00086a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0008d0ce  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005f9c  00000000  00000000  0008d14c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014914 	.word	0x08014914

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08014914 	.word	0x08014914

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80002a8:	2300      	movs	r3, #0
 80002aa:	73fb      	strb	r3, [r7, #15]
 80002ac:	2300      	movs	r3, #0
 80002ae:	73bb      	strb	r3, [r7, #14]
 80002b0:	230f      	movs	r3, #15
 80002b2:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	78db      	ldrb	r3, [r3, #3]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d039      	beq.n	8000330 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80002bc:	4b27      	ldr	r3, [pc, #156]	; (800035c <NVIC_Init+0xbc>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	43db      	mvns	r3, r3
 80002c2:	0a1b      	lsrs	r3, r3, #8
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	f003 0307 	and.w	r3, r3, #7
 80002ca:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80002cc:	7bfb      	ldrb	r3, [r7, #15]
 80002ce:	f1c3 0304 	rsb	r3, r3, #4
 80002d2:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80002d4:	7b7a      	ldrb	r2, [r7, #13]
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
 80002d8:	fa42 f303 	asr.w	r3, r2, r3
 80002dc:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	785b      	ldrb	r3, [r3, #1]
 80002e2:	461a      	mov	r2, r3
 80002e4:	7bbb      	ldrb	r3, [r7, #14]
 80002e6:	fa02 f303 	lsl.w	r3, r2, r3
 80002ea:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	789a      	ldrb	r2, [r3, #2]
 80002f0:	7b7b      	ldrb	r3, [r7, #13]
 80002f2:	4013      	ands	r3, r2
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	7bfb      	ldrb	r3, [r7, #15]
 80002f8:	4313      	orrs	r3, r2
 80002fa:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80002fc:	7bfb      	ldrb	r3, [r7, #15]
 80002fe:	011b      	lsls	r3, r3, #4
 8000300:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000302:	4a17      	ldr	r2, [pc, #92]	; (8000360 <NVIC_Init+0xc0>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	4413      	add	r3, r2
 800030a:	7bfa      	ldrb	r2, [r7, #15]
 800030c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000310:	4a13      	ldr	r2, [pc, #76]	; (8000360 <NVIC_Init+0xc0>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	095b      	lsrs	r3, r3, #5
 8000318:	b2db      	uxtb	r3, r3
 800031a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	f003 031f 	and.w	r3, r3, #31
 8000324:	2101      	movs	r1, #1
 8000326:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800032a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800032e:	e00f      	b.n	8000350 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000330:	490b      	ldr	r1, [pc, #44]	; (8000360 <NVIC_Init+0xc0>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	095b      	lsrs	r3, r3, #5
 8000338:	b2db      	uxtb	r3, r3
 800033a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	f003 031f 	and.w	r3, r3, #31
 8000344:	2201      	movs	r2, #1
 8000346:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000348:	f100 0320 	add.w	r3, r0, #32
 800034c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000350:	bf00      	nop
 8000352:	3714      	adds	r7, #20
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	e000ed00 	.word	0xe000ed00
 8000360:	e000e100 	.word	0xe000e100

08000364 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000370:	4b34      	ldr	r3, [pc, #208]	; (8000444 <EXTI_Init+0xe0>)
 8000372:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	799b      	ldrb	r3, [r3, #6]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d04f      	beq.n	800041c <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800037c:	4931      	ldr	r1, [pc, #196]	; (8000444 <EXTI_Init+0xe0>)
 800037e:	4b31      	ldr	r3, [pc, #196]	; (8000444 <EXTI_Init+0xe0>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	43db      	mvns	r3, r3
 8000388:	4013      	ands	r3, r2
 800038a:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800038c:	492d      	ldr	r1, [pc, #180]	; (8000444 <EXTI_Init+0xe0>)
 800038e:	4b2d      	ldr	r3, [pc, #180]	; (8000444 <EXTI_Init+0xe0>)
 8000390:	685a      	ldr	r2, [r3, #4]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	43db      	mvns	r3, r3
 8000398:	4013      	ands	r3, r2
 800039a:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	791b      	ldrb	r3, [r3, #4]
 80003a0:	461a      	mov	r2, r3
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	4413      	add	r3, r2
 80003a6:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	6811      	ldr	r1, [r2, #0]
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	6812      	ldr	r2, [r2, #0]
 80003b2:	430a      	orrs	r2, r1
 80003b4:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80003b6:	4923      	ldr	r1, [pc, #140]	; (8000444 <EXTI_Init+0xe0>)
 80003b8:	4b22      	ldr	r3, [pc, #136]	; (8000444 <EXTI_Init+0xe0>)
 80003ba:	689a      	ldr	r2, [r3, #8]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	43db      	mvns	r3, r3
 80003c2:	4013      	ands	r3, r2
 80003c4:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80003c6:	491f      	ldr	r1, [pc, #124]	; (8000444 <EXTI_Init+0xe0>)
 80003c8:	4b1e      	ldr	r3, [pc, #120]	; (8000444 <EXTI_Init+0xe0>)
 80003ca:	68da      	ldr	r2, [r3, #12]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	43db      	mvns	r3, r3
 80003d2:	4013      	ands	r3, r2
 80003d4:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	795b      	ldrb	r3, [r3, #5]
 80003da:	2b10      	cmp	r3, #16
 80003dc:	d10e      	bne.n	80003fc <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80003de:	4919      	ldr	r1, [pc, #100]	; (8000444 <EXTI_Init+0xe0>)
 80003e0:	4b18      	ldr	r3, [pc, #96]	; (8000444 <EXTI_Init+0xe0>)
 80003e2:	689a      	ldr	r2, [r3, #8]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80003ec:	4915      	ldr	r1, [pc, #84]	; (8000444 <EXTI_Init+0xe0>)
 80003ee:	4b15      	ldr	r3, [pc, #84]	; (8000444 <EXTI_Init+0xe0>)
 80003f0:	68da      	ldr	r2, [r3, #12]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4313      	orrs	r3, r2
 80003f8:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80003fa:	e01d      	b.n	8000438 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80003fc:	4b11      	ldr	r3, [pc, #68]	; (8000444 <EXTI_Init+0xe0>)
 80003fe:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	795b      	ldrb	r3, [r3, #5]
 8000404:	461a      	mov	r2, r3
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	4413      	add	r3, r2
 800040a:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	6811      	ldr	r1, [r2, #0]
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	6812      	ldr	r2, [r2, #0]
 8000416:	430a      	orrs	r2, r1
 8000418:	601a      	str	r2, [r3, #0]
}
 800041a:	e00d      	b.n	8000438 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	791b      	ldrb	r3, [r3, #4]
 8000420:	461a      	mov	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	4413      	add	r3, r2
 8000426:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	68fa      	ldr	r2, [r7, #12]
 800042c:	6811      	ldr	r1, [r2, #0]
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	6812      	ldr	r2, [r2, #0]
 8000432:	43d2      	mvns	r2, r2
 8000434:	400a      	ands	r2, r1
 8000436:	601a      	str	r2, [r3, #0]
}
 8000438:	bf00      	nop
 800043a:	3714      	adds	r7, #20
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	40013c00 	.word	0x40013c00

08000448 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000450:	2300      	movs	r3, #0
 8000452:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <EXTI_GetITStatus+0x44>)
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4013      	ands	r3, r2
 8000460:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000462:	4b0a      	ldr	r3, [pc, #40]	; (800048c <EXTI_GetITStatus+0x44>)
 8000464:	695a      	ldr	r2, [r3, #20]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4013      	ands	r3, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	d005      	beq.n	800047a <EXTI_GetITStatus+0x32>
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d002      	beq.n	800047a <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000474:	2301      	movs	r3, #1
 8000476:	73fb      	strb	r3, [r7, #15]
 8000478:	e001      	b.n	800047e <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 800047a:	2300      	movs	r3, #0
 800047c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800047e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000480:	4618      	mov	r0, r3
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	40013c00 	.word	0x40013c00

08000490 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <EXTI_ClearITPendingBit+0x1c>)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	6153      	str	r3, [r2, #20]
}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40013c00 	.word	0x40013c00

080004b0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b087      	sub	sp, #28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
 80004be:	2300      	movs	r3, #0
 80004c0:	613b      	str	r3, [r7, #16]
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]
 80004ca:	e076      	b.n	80005ba <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004cc:	2201      	movs	r2, #1
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d165      	bne.n	80005b4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	2103      	movs	r1, #3
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	43db      	mvns	r3, r3
 80004f8:	401a      	ands	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	4619      	mov	r1, r3
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	fa01 f303 	lsl.w	r3, r1, r3
 8000510:	431a      	orrs	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d003      	beq.n	8000526 <GPIO_Init+0x76>
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	2b02      	cmp	r3, #2
 8000524:	d12e      	bne.n	8000584 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	689a      	ldr	r2, [r3, #8]
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	2103      	movs	r1, #3
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	43db      	mvns	r3, r3
 8000536:	401a      	ands	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	795b      	ldrb	r3, [r3, #5]
 8000544:	4619      	mov	r1, r3
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	431a      	orrs	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	b29b      	uxth	r3, r3
 800055c:	4619      	mov	r1, r3
 800055e:	2301      	movs	r3, #1
 8000560:	408b      	lsls	r3, r1
 8000562:	43db      	mvns	r3, r3
 8000564:	401a      	ands	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	7992      	ldrb	r2, [r2, #6]
 8000572:	4611      	mov	r1, r2
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	b292      	uxth	r2, r2
 8000578:	fa01 f202 	lsl.w	r2, r1, r2
 800057c:	b292      	uxth	r2, r2
 800057e:	431a      	orrs	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	68da      	ldr	r2, [r3, #12]
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	b29b      	uxth	r3, r3
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	2103      	movs	r1, #3
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	401a      	ands	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	79db      	ldrb	r3, [r3, #7]
 80005a4:	4619      	mov	r1, r3
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	431a      	orrs	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	3301      	adds	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2b0f      	cmp	r3, #15
 80005be:	d985      	bls.n	80004cc <GPIO_Init+0x1c>
    }
  }
}
 80005c0:	bf00      	nop
 80005c2:	371c      	adds	r7, #28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80005d8:	2300      	movs	r3, #0
 80005da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	691a      	ldr	r2, [r3, #16]
 80005e0:	887b      	ldrh	r3, [r7, #2]
 80005e2:	4013      	ands	r3, r2
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	e001      	b.n	80005f2 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	887a      	ldrh	r2, [r7, #2]
 8000610:	831a      	strh	r2, [r3, #24]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	460b      	mov	r3, r1
 8000628:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	887a      	ldrh	r2, [r7, #2]
 800062e:	835a      	strh	r2, [r3, #26]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800063c:	b490      	push	{r4, r7}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	460a      	mov	r2, r1
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	4613      	mov	r3, r2
 800064a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	f003 0303 	and.w	r3, r3, #3
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	220f      	movs	r2, #15
 800065a:	fa02 f303 	lsl.w	r3, r2, r3
 800065e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000660:	4916      	ldr	r1, [pc, #88]	; (80006bc <SYSCFG_EXTILineConfig+0x80>)
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	089b      	lsrs	r3, r3, #2
 8000666:	b2db      	uxtb	r3, r3
 8000668:	4618      	mov	r0, r3
 800066a:	4a14      	ldr	r2, [pc, #80]	; (80006bc <SYSCFG_EXTILineConfig+0x80>)
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	089b      	lsrs	r3, r3, #2
 8000670:	b2db      	uxtb	r3, r3
 8000672:	3302      	adds	r3, #2
 8000674:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	43db      	mvns	r3, r3
 800067c:	401a      	ands	r2, r3
 800067e:	1c83      	adds	r3, r0, #2
 8000680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <SYSCFG_EXTILineConfig+0x80>)
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	089b      	lsrs	r3, r3, #2
 800068a:	b2db      	uxtb	r3, r3
 800068c:	461c      	mov	r4, r3
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <SYSCFG_EXTILineConfig+0x80>)
 8000690:	79bb      	ldrb	r3, [r7, #6]
 8000692:	089b      	lsrs	r3, r3, #2
 8000694:	b2db      	uxtb	r3, r3
 8000696:	3302      	adds	r3, #2
 8000698:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800069c:	79f9      	ldrb	r1, [r7, #7]
 800069e:	79bb      	ldrb	r3, [r7, #6]
 80006a0:	f003 0303 	and.w	r3, r3, #3
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	431a      	orrs	r2, r3
 80006ac:	1ca3      	adds	r3, r4, #2
 80006ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc90      	pop	{r4, r7}
 80006ba:	4770      	bx	lr
 80006bc:	40013800 	.word	0x40013800

080006c0 <send_gsm_command_by_index>:
#include "uart_line_queue.h"
#include "main.h"
#include "gsm_state.h"

// Hàm gửi lệnh AT dựa trên chỉ số lệnh trong gsm_commands
void send_gsm_command_by_index(int idx) {
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    if (idx < 0 || idx >= gsm_commands_count) return;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db1d      	blt.n	800070a <send_gsm_command_by_index+0x4a>
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <send_gsm_command_by_index+0x54>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	da18      	bge.n	800070a <send_gsm_command_by_index+0x4a>
    uart1_send_raw((uint8_t *)gsm_commands[idx].syntax, strlen(gsm_commands[idx].syntax));
 80006d8:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <send_gsm_command_by_index+0x58>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	4413      	add	r3, r2
 80006e0:	3304      	adds	r3, #4
 80006e2:	681c      	ldr	r4, [r3, #0]
 80006e4:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <send_gsm_command_by_index+0x58>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	4413      	add	r3, r2
 80006ec:	3304      	adds	r3, #4
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fd77 	bl	80001e4 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4619      	mov	r1, r3
 80006fa:	4620      	mov	r0, r4
 80006fc:	f000 fca2 	bl	8001044 <uart1_send_raw>
    uart1_send_raw((uint8_t *)"\r\n", 2);
 8000700:	2102      	movs	r1, #2
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <send_gsm_command_by_index+0x5c>)
 8000704:	f000 fc9e 	bl	8001044 <uart1_send_raw>
 8000708:	e000      	b.n	800070c <send_gsm_command_by_index+0x4c>
    if (idx < 0 || idx >= gsm_commands_count) return;
 800070a:	bf00      	nop
}
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bd90      	pop	{r4, r7, pc}
 8000712:	bf00      	nop
 8000714:	08017a20 	.word	0x08017a20
 8000718:	08017970 	.word	0x08017970
 800071c:	0801492c 	.word	0x0801492c

08000720 <send_all_gsm_commands_with_check>:

// Hàm gửi lần lượt các lệnh, chỉ gửi tiếp khi phản hồi thành công
void send_all_gsm_commands_with_check(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b0d4      	sub	sp, #336	; 0x150
 8000724:	af02      	add	r7, sp, #8
    static uint32_t start_tick = 0;
    static uint32_t last_send_tick = 0;
    static bool waiting_for_response = false;
    char response[256];

    if (current_command_index >= gsm_commands_count) {
 8000726:	4b42      	ldr	r3, [pc, #264]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	4b42      	ldr	r3, [pc, #264]	; (8000834 <send_all_gsm_commands_with_check+0x114>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	429a      	cmp	r2, r3
 8000730:	da78      	bge.n	8000824 <send_all_gsm_commands_with_check+0x104>
        return; 
    }

    if (!waiting_for_response) {
 8000732:	4b41      	ldr	r3, [pc, #260]	; (8000838 <send_all_gsm_commands_with_check+0x118>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	f083 0301 	eor.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00e      	beq.n	800075e <send_all_gsm_commands_with_check+0x3e>
        start_tick = timer2_get_tick();
 8000740:	f000 fb7c 	bl	8000e3c <timer2_get_tick>
 8000744:	4602      	mov	r2, r0
 8000746:	4b3d      	ldr	r3, [pc, #244]	; (800083c <send_all_gsm_commands_with_check+0x11c>)
 8000748:	601a      	str	r2, [r3, #0]
        last_send_tick = start_tick - 5000;
 800074a:	4b3c      	ldr	r3, [pc, #240]	; (800083c <send_all_gsm_commands_with_check+0x11c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000752:	3b08      	subs	r3, #8
 8000754:	4a3a      	ldr	r2, [pc, #232]	; (8000840 <send_all_gsm_commands_with_check+0x120>)
 8000756:	6013      	str	r3, [r2, #0]
        waiting_for_response = true;
 8000758:	4b37      	ldr	r3, [pc, #220]	; (8000838 <send_all_gsm_commands_with_check+0x118>)
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
    }

    uint32_t wait_time = gsm_commands[current_command_index].max_response_time_ms;
 800075e:	4b34      	ldr	r3, [pc, #208]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a38      	ldr	r2, [pc, #224]	; (8000844 <send_all_gsm_commands_with_check+0x124>)
 8000764:	011b      	lsls	r3, r3, #4
 8000766:	4413      	add	r3, r2
 8000768:	330c      	adds	r3, #12
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    if ((timer2_get_tick() - start_tick) < wait_time) {
 8000770:	f000 fb64 	bl	8000e3c <timer2_get_tick>
 8000774:	4602      	mov	r2, r0
 8000776:	4b31      	ldr	r3, [pc, #196]	; (800083c <send_all_gsm_commands_with_check+0x11c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	1ad2      	subs	r2, r2, r3
 800077c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000780:	429a      	cmp	r2, r3
 8000782:	d231      	bcs.n	80007e8 <send_all_gsm_commands_with_check+0xc8>
        if ((timer2_get_tick() - last_send_tick) >= 3000) { 
 8000784:	f000 fb5a 	bl	8000e3c <timer2_get_tick>
 8000788:	4602      	mov	r2, r0
 800078a:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <send_all_gsm_commands_with_check+0x120>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000794:	4293      	cmp	r3, r2
 8000796:	d91e      	bls.n	80007d6 <send_all_gsm_commands_with_check+0xb6>
            send_gsm_command_by_index(current_command_index);
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff8f 	bl	80006c0 <send_gsm_command_by_index>
            last_send_tick = timer2_get_tick();
 80007a2:	f000 fb4b 	bl	8000e3c <timer2_get_tick>
 80007a6:	4602      	mov	r2, r0
 80007a8:	4b25      	ldr	r3, [pc, #148]	; (8000840 <send_all_gsm_commands_with_check+0x120>)
 80007aa:	601a      	str	r2, [r3, #0]
        }
        while (uart_line_queue_pop(response)) {
 80007ac:	e013      	b.n	80007d6 <send_all_gsm_commands_with_check+0xb6>
            if (check_gsm_response_by_index(current_command_index, response)) {
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 f931 	bl	8000a20 <check_gsm_response_by_index>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d008      	beq.n	80007d6 <send_all_gsm_commands_with_check+0xb6>
                waiting_for_response = false;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <send_all_gsm_commands_with_check+0x118>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
                current_command_index++;
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	4a17      	ldr	r2, [pc, #92]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 80007d2:	6013      	str	r3, [r2, #0]
                return; 
 80007d4:	e027      	b.n	8000826 <send_all_gsm_commands_with_check+0x106>
        while (uart_line_queue_pop(response)) {
 80007d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fe0a 	bl	80013f4 <uart_line_queue_pop>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1e3      	bne.n	80007ae <send_all_gsm_commands_with_check+0x8e>
 80007e6:	e01e      	b.n	8000826 <send_all_gsm_commands_with_check+0x106>
            }
        }
    } else {
        current_device_state = DEVICE_STATE_GSM_ERROR;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <send_all_gsm_commands_with_check+0x128>)
 80007ea:	2202      	movs	r2, #2
 80007ec:	701a      	strb	r2, [r3, #0]
        char log_buf[64];
        snprintf(log_buf, sizeof(log_buf), "Loi khi gui lenh case %d: %s", current_command_index, gsm_commands[current_command_index].command);
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 80007f0:	6819      	ldr	r1, [r3, #0]
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a13      	ldr	r2, [pc, #76]	; (8000844 <send_all_gsm_commands_with_check+0x124>)
 80007f8:	011b      	lsls	r3, r3, #4
 80007fa:	4413      	add	r3, r2
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	1d38      	adds	r0, r7, #4
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	460b      	mov	r3, r1
 8000804:	4a11      	ldr	r2, [pc, #68]	; (800084c <send_all_gsm_commands_with_check+0x12c>)
 8000806:	2140      	movs	r1, #64	; 0x40
 8000808:	f013 fc5e 	bl	80140c8 <sniprintf>
        uart_log(log_buf);
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fbe0 	bl	8000fd4 <uart_log>
        waiting_for_response = false;
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <send_all_gsm_commands_with_check+0x118>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
        current_command_index = gsm_commands_count;
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <send_all_gsm_commands_with_check+0x114>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a04      	ldr	r2, [pc, #16]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	e000      	b.n	8000826 <send_all_gsm_commands_with_check+0x106>
        return; 
 8000824:	bf00      	nop
    }
 8000826:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000090 	.word	0x20000090
 8000834:	08017a20 	.word	0x08017a20
 8000838:	20000094 	.word	0x20000094
 800083c:	20000098 	.word	0x20000098
 8000840:	2000009c 	.word	0x2000009c
 8000844:	08017970 	.word	0x08017970
 8000848:	20000537 	.word	0x20000537
 800084c:	08014930 	.word	0x08014930

08000850 <parse_response_at>:
#include <stdio.h>
#include "gsm_state.h"
#include "ppp_net/ppp_connection.h"
#include "main.h"

bool parse_response_at(const char* response) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "OK") != NULL;
 8000858:	4906      	ldr	r1, [pc, #24]	; (8000874 <parse_response_at+0x24>)
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f013 fce0 	bl	8014220 <strstr>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	bf14      	ite	ne
 8000866:	2301      	movne	r3, #1
 8000868:	2300      	moveq	r3, #0
 800086a:	b2db      	uxtb	r3, r3
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	08014ab0 	.word	0x08014ab0

08000878 <parse_response_ati>:

bool parse_response_ati(const char* response) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "Manufacturer: INCORPORATED") != NULL;
 8000880:	4906      	ldr	r1, [pc, #24]	; (800089c <parse_response_ati+0x24>)
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f013 fccc 	bl	8014220 <strstr>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	bf14      	ite	ne
 800088e:	2301      	movne	r3, #1
 8000890:	2300      	moveq	r3, #0
 8000892:	b2db      	uxtb	r3, r3
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	08014ab4 	.word	0x08014ab4

080008a0 <parse_response_at_cpin>:

bool parse_response_at_cpin(const char* response) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "+CPIN: READY") != NULL;
 80008a8:	4906      	ldr	r1, [pc, #24]	; (80008c4 <parse_response_at_cpin+0x24>)
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f013 fcb8 	bl	8014220 <strstr>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bf14      	ite	ne
 80008b6:	2301      	movne	r3, #1
 80008b8:	2300      	moveq	r3, #0
 80008ba:	b2db      	uxtb	r3, r3
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	08014ad0 	.word	0x08014ad0

080008c8 <parse_response_at_csq>:

bool parse_response_at_csq(const char* response) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "+CSQ:") != NULL;
 80008d0:	4906      	ldr	r1, [pc, #24]	; (80008ec <parse_response_at_csq+0x24>)
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f013 fca4 	bl	8014220 <strstr>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	bf14      	ite	ne
 80008de:	2301      	movne	r3, #1
 80008e0:	2300      	moveq	r3, #0
 80008e2:	b2db      	uxtb	r3, r3
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	08014ae0 	.word	0x08014ae0

080008f0 <parse_response_at_cereg>:

bool parse_response_at_cereg(const char* response) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "+CEREG: 0,1") != NULL;
 80008f8:	4906      	ldr	r1, [pc, #24]	; (8000914 <parse_response_at_cereg+0x24>)
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f013 fc90 	bl	8014220 <strstr>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	bf14      	ite	ne
 8000906:	2301      	movne	r3, #1
 8000908:	2300      	moveq	r3, #0
 800090a:	b2db      	uxtb	r3, r3
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	08014ae8 	.word	0x08014ae8

08000918 <parse_response_at_cops>:

bool parse_response_at_cops(const char* response) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "+COPS=0") != NULL;
 8000920:	4906      	ldr	r1, [pc, #24]	; (800093c <parse_response_at_cops+0x24>)
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f013 fc7c 	bl	8014220 <strstr>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	bf14      	ite	ne
 800092e:	2301      	movne	r3, #1
 8000930:	2300      	moveq	r3, #0
 8000932:	b2db      	uxtb	r3, r3
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	08014af4 	.word	0x08014af4

08000940 <parse_response_at_cgdcont>:

bool parse_response_at_cgdcont(const char* response) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
   // uart_log(response);
    return strstr(response, "OK") != NULL;
 8000948:	4906      	ldr	r1, [pc, #24]	; (8000964 <parse_response_at_cgdcont+0x24>)
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f013 fc68 	bl	8014220 <strstr>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	bf14      	ite	ne
 8000956:	2301      	movne	r3, #1
 8000958:	2300      	moveq	r3, #0
 800095a:	b2db      	uxtb	r3, r3
}
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	08014ab0 	.word	0x08014ab0

08000968 <parse_response_at_cgauth>:

bool parse_response_at_cgauth(const char* response) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "OK") != NULL;
 8000970:	4906      	ldr	r1, [pc, #24]	; (800098c <parse_response_at_cgauth+0x24>)
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f013 fc54 	bl	8014220 <strstr>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	bf14      	ite	ne
 800097e:	2301      	movne	r3, #1
 8000980:	2300      	moveq	r3, #0
 8000982:	b2db      	uxtb	r3, r3
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	08014ab0 	.word	0x08014ab0

08000990 <parse_response_at_cgact>:

bool parse_response_at_cgact(const char* response) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "OK") != NULL;
 8000998:	4906      	ldr	r1, [pc, #24]	; (80009b4 <parse_response_at_cgact+0x24>)
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f013 fc40 	bl	8014220 <strstr>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bf14      	ite	ne
 80009a6:	2301      	movne	r3, #1
 80009a8:	2300      	moveq	r3, #0
 80009aa:	b2db      	uxtb	r3, r3
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	08014ab0 	.word	0x08014ab0

080009b8 <parse_response_at_cgpaddr>:

bool parse_response_at_cgpaddr(const char* response) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "+CGPADDR: 1,") != NULL;
 80009c0:	4906      	ldr	r1, [pc, #24]	; (80009dc <parse_response_at_cgpaddr+0x24>)
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f013 fc2c 	bl	8014220 <strstr>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	bf14      	ite	ne
 80009ce:	2301      	movne	r3, #1
 80009d0:	2300      	moveq	r3, #0
 80009d2:	b2db      	uxtb	r3, r3
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	08014afc 	.word	0x08014afc

080009e0 <parse_response_atd99>:
bool parse_response_at_cgdata(const char* response) {
    //uart_log(response);
    return strstr(response, "CONNECT") != NULL;
}

bool parse_response_atd99(const char* response) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    if (strstr(response, "CONNECT") != NULL) {
 80009e8:	490a      	ldr	r1, [pc, #40]	; (8000a14 <parse_response_atd99+0x34>)
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f013 fc18 	bl	8014220 <strstr>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d009      	beq.n	8000a0a <parse_response_atd99+0x2a>
        gsm_ppp_mode = true;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <parse_response_atd99+0x38>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
        //uart_log("Switching to PPP mode.");
        current_device_state = DEVICE_STATE_BOOTING_DEVICE;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <parse_response_atd99+0x3c>)
 80009fe:	2203      	movs	r2, #3
 8000a00:	701a      	strb	r2, [r3, #0]
        restart_dma2_stream2();
 8000a02:	f000 fc71 	bl	80012e8 <restart_dma2_stream2>
        return true;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e000      	b.n	8000a0c <parse_response_atd99+0x2c>
    }
    return false;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	08014b0c 	.word	0x08014b0c
 8000a18:	200005f4 	.word	0x200005f4
 8000a1c:	20000537 	.word	0x20000537

08000a20 <check_gsm_response_by_index>:
#include "gsm_parser.h"
#include <stdbool.h>
#include <string.h>
#include "gsm_state.h"

bool check_gsm_response_by_index(int idx, const char* response) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
    switch (idx) {
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0a      	cmp	r3, #10
 8000a2e:	d855      	bhi.n	8000adc <check_gsm_response_by_index+0xbc>
 8000a30:	a201      	add	r2, pc, #4	; (adr r2, 8000a38 <check_gsm_response_by_index+0x18>)
 8000a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a36:	bf00      	nop
 8000a38:	08000a65 	.word	0x08000a65
 8000a3c:	08000a6f 	.word	0x08000a6f
 8000a40:	08000a79 	.word	0x08000a79
 8000a44:	08000a83 	.word	0x08000a83
 8000a48:	08000a8d 	.word	0x08000a8d
 8000a4c:	08000a97 	.word	0x08000a97
 8000a50:	08000aab 	.word	0x08000aab
 8000a54:	08000ab5 	.word	0x08000ab5
 8000a58:	08000abf 	.word	0x08000abf
 8000a5c:	08000ac9 	.word	0x08000ac9
 8000a60:	08000ad3 	.word	0x08000ad3
        case 0: // AT
            return parse_response_at(response);
 8000a64:	6838      	ldr	r0, [r7, #0]
 8000a66:	f7ff fef3 	bl	8000850 <parse_response_at>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	e037      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 1: // ATI
            return parse_response_ati(response);
 8000a6e:	6838      	ldr	r0, [r7, #0]
 8000a70:	f7ff ff02 	bl	8000878 <parse_response_ati>
 8000a74:	4603      	mov	r3, r0
 8000a76:	e032      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 2: // AT+CPIN?
            return parse_response_at_cpin(response);
 8000a78:	6838      	ldr	r0, [r7, #0]
 8000a7a:	f7ff ff11 	bl	80008a0 <parse_response_at_cpin>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	e02d      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 3: // AT+CSQ
            return parse_response_at_csq(response);
 8000a82:	6838      	ldr	r0, [r7, #0]
 8000a84:	f7ff ff20 	bl	80008c8 <parse_response_at_csq>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	e028      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 4: // AT+CEREG?
            return parse_response_at_cereg(response);
 8000a8c:	6838      	ldr	r0, [r7, #0]
 8000a8e:	f7ff ff2f 	bl	80008f0 <parse_response_at_cereg>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e023      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 5: // AT+COPS
            return parse_response_at_cops(response);
 8000a96:	6838      	ldr	r0, [r7, #0]
 8000a98:	f7ff ff3e 	bl	8000918 <parse_response_at_cops>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	bf14      	ite	ne
 8000aa2:	2301      	movne	r3, #1
 8000aa4:	2300      	moveq	r3, #0
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	e019      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 6: // AT+CGDCONT
            return parse_response_at_cgdcont(response);
 8000aaa:	6838      	ldr	r0, [r7, #0]
 8000aac:	f7ff ff48 	bl	8000940 <parse_response_at_cgdcont>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	e014      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 7: // AT+CGAUTH
            return parse_response_at_cgauth(response);
 8000ab4:	6838      	ldr	r0, [r7, #0]
 8000ab6:	f7ff ff57 	bl	8000968 <parse_response_at_cgauth>
 8000aba:	4603      	mov	r3, r0
 8000abc:	e00f      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 8: // AT+CGACT
            return parse_response_at_cgact(response);
 8000abe:	6838      	ldr	r0, [r7, #0]
 8000ac0:	f7ff ff66 	bl	8000990 <parse_response_at_cgact>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	e00a      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 9: // AT+CGPADDR
            return parse_response_at_cgpaddr(response);
 8000ac8:	6838      	ldr	r0, [r7, #0]
 8000aca:	f7ff ff75 	bl	80009b8 <parse_response_at_cgpaddr>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	e005      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 10: // ATD*99#
            return parse_response_atd99(response);
 8000ad2:	6838      	ldr	r0, [r7, #0]
 8000ad4:	f7ff ff84 	bl	80009e0 <parse_response_atd99>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	e000      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        // case 11: // +++
        //     return parse_response_plus(response);
        // case 12: // ATH
        //     return parse_response_ath(response);
        default:
            return false;
 8000adc:	2300      	movs	r3, #0
    }
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop

08000ae8 <button_init>:
volatile uint8_t g_button_pressed_flag = 0;
volatile uint8_t g_button_released_flag = 0;
static uint32_t last_irq_tick = 0;

void button_init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    EXTI_InitTypeDef EXTI_InitStruct;
    NVIC_InitTypeDef NVIC_InitStruct;

    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 8000aee:	2301      	movs	r3, #1
 8000af0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8000af2:	2300      	movs	r3, #0
 8000af4:	753b      	strb	r3, [r7, #20]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8000afa:	2300      	movs	r3, #0
 8000afc:	757b      	strb	r3, [r7, #21]
    GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4619      	mov	r1, r3
 8000b04:	4811      	ldr	r0, [pc, #68]	; (8000b4c <button_init+0x64>)
 8000b06:	f7ff fcd3 	bl	80004b0 <GPIO_Init>

    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f7ff fd95 	bl	800063c <SYSCFG_EXTILineConfig>
    EXTI_InitStruct.EXTI_Line = EXTI_Line0;
 8000b12:	2301      	movs	r3, #1
 8000b14:	60bb      	str	r3, [r7, #8]
    EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8000b16:	2300      	movs	r3, #0
 8000b18:	733b      	strb	r3, [r7, #12]
    EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	737b      	strb	r3, [r7, #13]
    EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStruct);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fc1c 	bl	8000364 <EXTI_Init>

    NVIC_InitStruct.NVIC_IRQChannel = EXTI0_IRQn;
 8000b2c:	2306      	movs	r3, #6
 8000b2e:	713b      	strb	r3, [r7, #4]
    NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x01;
 8000b30:	2301      	movs	r3, #1
 8000b32:	717b      	strb	r3, [r7, #5]
    NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x01;
 8000b34:	2301      	movs	r3, #1
 8000b36:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStruct);
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fbae 	bl	80002a0 <NVIC_Init>
}
 8000b44:	bf00      	nop
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40020000 	.word	0x40020000

08000b50 <EXTI0_IRQHandler>:

// Hàm xử lý ngắt EXTI0 (PA0)
void EXTI0_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
 8000b56:	2001      	movs	r0, #1
 8000b58:	f7ff fc76 	bl	8000448 <EXTI_GetITStatus>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d01c      	beq.n	8000b9c <EXTI0_IRQHandler+0x4c>
        uint32_t now = timer2_get_tick();
 8000b62:	f000 f96b 	bl	8000e3c <timer2_get_tick>
 8000b66:	6078      	str	r0, [r7, #4]
        if (now - last_irq_tick > 30) { 
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <EXTI0_IRQHandler+0x54>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	2b1e      	cmp	r3, #30
 8000b72:	d910      	bls.n	8000b96 <EXTI0_IRQHandler+0x46>
            if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0) == Bit_RESET) {
 8000b74:	2101      	movs	r1, #1
 8000b76:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <EXTI0_IRQHandler+0x58>)
 8000b78:	f7ff fd28 	bl	80005cc <GPIO_ReadInputDataBit>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d103      	bne.n	8000b8a <EXTI0_IRQHandler+0x3a>
                g_button_pressed_flag = 1;   
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <EXTI0_IRQHandler+0x5c>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	e002      	b.n	8000b90 <EXTI0_IRQHandler+0x40>
            } else {
                g_button_released_flag = 1;  
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <EXTI0_IRQHandler+0x60>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
            }
            last_irq_tick = now;
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <EXTI0_IRQHandler+0x54>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
        }
        EXTI_ClearITPendingBit(EXTI_Line0);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff fc7a 	bl	8000490 <EXTI_ClearITPendingBit>
    }
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200000a4 	.word	0x200000a4
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	200000a0 	.word	0x200000a0
 8000bb0:	200000a1 	.word	0x200000a1

08000bb4 <hardware_init>:
#include "stm32f4xx.h"
#include "uart_line_queue.h"

#define GSM_POWER_GPIO_PORT GPIOA
#define GSM_POWER_PIN       8
void hardware_init(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <hardware_init+0x58>)
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <hardware_init+0x58>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f043 0303 	orr.w	r3, r3, #3
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN | RCC_APB1ENR_TIM2EN;
 8000bc4:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <hardware_init+0x58>)
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <hardware_init+0x58>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN | RCC_APB2ENR_SYSCFGEN;
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <hardware_init+0x58>)
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <hardware_init+0x58>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	6453      	str	r3, [r2, #68]	; 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000be4:	4a09      	ldr	r2, [pc, #36]	; (8000c0c <hardware_init+0x58>)
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <hardware_init+0x58>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bee:	6313      	str	r3, [r2, #48]	; 0x30

    timer2_init_1ms();
 8000bf0:	f000 f8dc 	bl	8000dac <timer2_init_1ms>
    uart_line_queue_init();
 8000bf4:	f000 fba8 	bl	8001348 <uart_line_queue_init>
    uart_init_all();
 8000bf8:	f000 f95a 	bl	8000eb0 <uart_init_all>
    led_init();
 8000bfc:	f000 f854 	bl	8000ca8 <led_init>
    button_init();
 8000c00:	f7ff ff72 	bl	8000ae8 <button_init>
    gsm_module_power_cycle();
 8000c04:	f000 f804 	bl	8000c10 <gsm_module_power_cycle>
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800

08000c10 <gsm_module_power_cycle>:

uint8_t switch_read(uint8_t index) {
    return 0; 
}

void gsm_module_power_cycle(void) {
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
    // Cấu hình chân GSM_POWER_PIN là output push-pull
    GSM_POWER_GPIO_PORT->MODER &= ~(3U << (GSM_POWER_PIN * 2));
 8000c16:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <gsm_module_power_cycle+0x90>)
 8000c18:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <gsm_module_power_cycle+0x90>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000c20:	6013      	str	r3, [r2, #0]
    GSM_POWER_GPIO_PORT->MODER |=  (1U << (GSM_POWER_PIN * 2));
 8000c22:	4a1f      	ldr	r2, [pc, #124]	; (8000ca0 <gsm_module_power_cycle+0x90>)
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <gsm_module_power_cycle+0x90>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2c:	6013      	str	r3, [r2, #0]
    GSM_POWER_GPIO_PORT->OTYPER &= ~(1U << GSM_POWER_PIN);
 8000c2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ca0 <gsm_module_power_cycle+0x90>)
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <gsm_module_power_cycle+0x90>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c38:	6053      	str	r3, [r2, #4]
    GSM_POWER_GPIO_PORT->OSPEEDR |= (3U << (GSM_POWER_PIN * 2));
 8000c3a:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <gsm_module_power_cycle+0x90>)
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <gsm_module_power_cycle+0x90>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000c44:	6093      	str	r3, [r2, #8]
    GSM_POWER_GPIO_PORT->PUPDR &= ~(3U << (GSM_POWER_PIN * 2));
 8000c46:	4a16      	ldr	r2, [pc, #88]	; (8000ca0 <gsm_module_power_cycle+0x90>)
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <gsm_module_power_cycle+0x90>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000c50:	60d3      	str	r3, [r2, #12]

    // Đưa chân xuống mức thấp (tắt nguồn)
    GSM_POWER_GPIO_PORT->ODR &= ~(1U << GSM_POWER_PIN);
 8000c52:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <gsm_module_power_cycle+0x90>)
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <gsm_module_power_cycle+0x90>)
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c5c:	6153      	str	r3, [r2, #20]
    for (volatile int i = 0; i < 1000000; i++);
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	e002      	b.n	8000c6a <gsm_module_power_cycle+0x5a>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3301      	adds	r3, #1
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <gsm_module_power_cycle+0x94>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	ddf8      	ble.n	8000c64 <gsm_module_power_cycle+0x54>

    // Bật lại nguồn
    GSM_POWER_GPIO_PORT->ODR |= (1U << GSM_POWER_PIN);
 8000c72:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <gsm_module_power_cycle+0x90>)
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <gsm_module_power_cycle+0x90>)
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7c:	6153      	str	r3, [r2, #20]
    for (volatile int i = 0; i < 1000000; i++);
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	e002      	b.n	8000c8a <gsm_module_power_cycle+0x7a>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <gsm_module_power_cycle+0x94>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	ddf8      	ble.n	8000c84 <gsm_module_power_cycle+0x74>
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	000f423f 	.word	0x000f423f

08000ca8 <led_init>:
#include "stm32f4xx.h"
#include "led.h"
#include "hardware.h"

void led_init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
    // Configure LED 4G (Green Network) as output
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.GPIO_Pin = LED_4G_PIN;
 8000cae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb2:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	713b      	strb	r3, [r7, #4]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	717b      	strb	r3, [r7, #5]
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(LED_4G_PORT, &GPIO_InitStruct);
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <led_init+0x4c>)
 8000cca:	f7ff fbf1 	bl	80004b0 <GPIO_Init>
    GPIO_InitStruct.GPIO_Pin = LED_STT_PIN;
 8000cce:	2310      	movs	r3, #16
 8000cd0:	603b      	str	r3, [r7, #0]
    GPIO_Init(LED_STT_PORT, &GPIO_InitStruct);
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <led_init+0x4c>)
 8000cd8:	f7ff fbea 	bl	80004b0 <GPIO_Init>
    GPIO_InitStruct.GPIO_Pin = LED_STT_SWITCH_PIN;
 8000cdc:	2320      	movs	r3, #32
 8000cde:	603b      	str	r3, [r7, #0]
    GPIO_Init(LED_STT_SWITCH_PORT, &GPIO_InitStruct);
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <led_init+0x4c>)
 8000ce6:	f7ff fbe3 	bl	80004b0 <GPIO_Init>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40020400 	.word	0x40020400

08000cf8 <led_4g_on>:

void led_4g_on(void) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
    GPIO_SetBits(LED_4G_PORT, LED_4G_PIN);
 8000cfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <led_4g_on+0x14>)
 8000d02:	f7ff fc7d 	bl	8000600 <GPIO_SetBits>
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40020400 	.word	0x40020400

08000d10 <led_4g_off>:

void led_4g_off(void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
    GPIO_ResetBits(LED_4G_PORT, LED_4G_PIN);
 8000d14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <led_4g_off+0x14>)
 8000d1a:	f7ff fc80 	bl	800061e <GPIO_ResetBits>
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40020400 	.word	0x40020400

08000d28 <led_stt_on>:
        led_4g_on();
    else
        led_4g_off();
}

void led_stt_on(void) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
    GPIO_SetBits(LED_STT_PORT, LED_STT_PIN);
 8000d2c:	2110      	movs	r1, #16
 8000d2e:	4802      	ldr	r0, [pc, #8]	; (8000d38 <led_stt_on+0x10>)
 8000d30:	f7ff fc66 	bl	8000600 <GPIO_SetBits>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40020400 	.word	0x40020400

08000d3c <led_stt_off>:

void led_stt_off(void) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
    GPIO_ResetBits(LED_STT_PORT, LED_STT_PIN);
 8000d40:	2110      	movs	r1, #16
 8000d42:	4802      	ldr	r0, [pc, #8]	; (8000d4c <led_stt_off+0x10>)
 8000d44:	f7ff fc6b 	bl	800061e <GPIO_ResetBits>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40020400 	.word	0x40020400

08000d50 <led_stt_switch_on>:
        led_stt_on();
    else
        led_stt_off();
}

void led_stt_switch_on(void) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
    GPIO_SetBits(LED_STT_SWITCH_PORT, LED_STT_SWITCH_PIN);
 8000d54:	2120      	movs	r1, #32
 8000d56:	4802      	ldr	r0, [pc, #8]	; (8000d60 <led_stt_switch_on+0x10>)
 8000d58:	f7ff fc52 	bl	8000600 <GPIO_SetBits>
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40020400 	.word	0x40020400

08000d64 <led_stt_switch_off>:

void led_stt_switch_off(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
    GPIO_ResetBits(LED_STT_SWITCH_PORT, LED_STT_SWITCH_PIN);
 8000d68:	2120      	movs	r1, #32
 8000d6a:	4802      	ldr	r0, [pc, #8]	; (8000d74 <led_stt_switch_off+0x10>)
 8000d6c:	f7ff fc57 	bl	800061e <GPIO_ResetBits>
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40020400 	.word	0x40020400

08000d78 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000d82:	4909      	ldr	r1, [pc, #36]	; (8000da8 <NVIC_EnableIRQ+0x30>)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	095b      	lsrs	r3, r3, #5
 8000d8a:	79fa      	ldrb	r2, [r7, #7]
 8000d8c:	f002 021f 	and.w	r2, r2, #31
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100

08000dac <timer2_init_1ms>:
#include "stm32f4xx.h"

static volatile uint32_t timer2_tick = 0;

void timer2_init_1ms(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
    TIM2->PSC = 15;      // 16MHz / (15+1) = 1MHz
 8000db0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db4:	220f      	movs	r2, #15
 8000db6:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM2->ARR = 999;     // 1MHz / (999+1) = 1kHz (1ms)
 8000db8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dc0:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->EGR = TIM_EGR_UG;
 8000dc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	829a      	strh	r2, [r3, #20]
    TIM2->DIER |= TIM_DIER_UIE;
 8000dca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dd2:	899b      	ldrh	r3, [r3, #12]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	8193      	strh	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;
 8000dde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	8013      	strh	r3, [r2, #0]

    NVIC_EnableIRQ(TIM2_IRQn);
 8000df2:	201c      	movs	r0, #28
 8000df4:	f7ff ffc0 	bl	8000d78 <NVIC_EnableIRQ>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) // Update interrupt flag
 8000e00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e04:	8a1b      	ldrh	r3, [r3, #16]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d00e      	beq.n	8000e2e <TIM2_IRQHandler+0x32>
    {
        TIM2->SR &= ~TIM_SR_UIF; // Clear flag
 8000e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e18:	8a1b      	ldrh	r3, [r3, #16]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	f023 0301 	bic.w	r3, r3, #1
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	8213      	strh	r3, [r2, #16]
        timer2_tick++;
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <TIM2_IRQHandler+0x3c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	4a03      	ldr	r2, [pc, #12]	; (8000e38 <TIM2_IRQHandler+0x3c>)
 8000e2c:	6013      	str	r3, [r2, #0]
    }
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	200000a8 	.word	0x200000a8

08000e3c <timer2_get_tick>:

uint32_t timer2_get_tick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
    return timer2_tick;
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <timer2_get_tick+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	200000a8 	.word	0x200000a8

08000e54 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
    uint32_t start = timer2_get_tick();
 8000e5c:	f7ff ffee 	bl	8000e3c <timer2_get_tick>
 8000e60:	60f8      	str	r0, [r7, #12]
    while ((timer2_get_tick() - start) < ms) {
 8000e62:	bf00      	nop
 8000e64:	f7ff ffea 	bl	8000e3c <timer2_get_tick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	1ad2      	subs	r2, r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d3f7      	bcc.n	8000e64 <delay_ms+0x10>
    }
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <NVIC_EnableIRQ>:
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000e86:	4909      	ldr	r1, [pc, #36]	; (8000eac <NVIC_EnableIRQ+0x30>)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	095b      	lsrs	r3, r3, #5
 8000e8e:	79fa      	ldrb	r2, [r7, #7]
 8000e90:	f002 021f 	and.w	r2, r2, #31
 8000e94:	2001      	movs	r0, #1
 8000e96:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <uart_init_all>:
uint8_t m_uart1_rx_buffer[UART1_RX_BUFFER_SIZE];
volatile uint32_t m_old_uart1_dma_rx_pos = 0;
volatile bool rx_line_ready = false;

void uart_init_all(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000eb4:	4a3f      	ldr	r2, [pc, #252]	; (8000fb4 <uart_init_all+0x104>)
 8000eb6:	4b3f      	ldr	r3, [pc, #252]	; (8000fb4 <uart_init_all+0x104>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000ec0:	4a3c      	ldr	r2, [pc, #240]	; (8000fb4 <uart_init_all+0x104>)
 8000ec2:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <uart_init_all+0x104>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f043 0310 	orr.w	r3, r3, #16
 8000eca:	6453      	str	r3, [r2, #68]	; 0x44

    GPIOA->MODER &= ~((3U << (9 * 2)) | (3U << (10 * 2)));
 8000ecc:	4a3a      	ldr	r2, [pc, #232]	; (8000fb8 <uart_init_all+0x108>)
 8000ece:	4b3a      	ldr	r3, [pc, #232]	; (8000fb8 <uart_init_all+0x108>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000ed6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2U << (9 * 2)) | (2U << (10 * 2)));
 8000ed8:	4a37      	ldr	r2, [pc, #220]	; (8000fb8 <uart_init_all+0x108>)
 8000eda:	4b37      	ldr	r3, [pc, #220]	; (8000fb8 <uart_init_all+0x108>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8000ee2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~((0xF << (4 * 1)) | (0xF << (4 * 2)));
 8000ee4:	4a34      	ldr	r2, [pc, #208]	; (8000fb8 <uart_init_all+0x108>)
 8000ee6:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <uart_init_all+0x108>)
 8000ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000eee:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= ((7U << (4 * 1)) | (7U << (4 * 2)));
 8000ef0:	4a31      	ldr	r2, [pc, #196]	; (8000fb8 <uart_init_all+0x108>)
 8000ef2:	4b31      	ldr	r3, [pc, #196]	; (8000fb8 <uart_init_all+0x108>)
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef6:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000efa:	6253      	str	r3, [r2, #36]	; 0x24

    USART1->BRR = 16000000 / 115200;
 8000efc:	4b2f      	ldr	r3, [pc, #188]	; (8000fbc <uart_init_all+0x10c>)
 8000efe:	228a      	movs	r2, #138	; 0x8a
 8000f00:	811a      	strh	r2, [r3, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000f02:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <uart_init_all+0x10c>)
 8000f04:	f242 020c 	movw	r2, #8204	; 0x200c
 8000f08:	819a      	strh	r2, [r3, #12]

    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000f0a:	4a2a      	ldr	r2, [pc, #168]	; (8000fb4 <uart_init_all+0x104>)
 8000f0c:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <uart_init_all+0x104>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40

    GPIOA->MODER &= ~((3U << (2 * 2)) | (3U << (3 * 2)));
 8000f16:	4a28      	ldr	r2, [pc, #160]	; (8000fb8 <uart_init_all+0x108>)
 8000f18:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <uart_init_all+0x108>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f20:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2U << (2 * 2)) | (2U << (3 * 2)));
 8000f22:	4a25      	ldr	r2, [pc, #148]	; (8000fb8 <uart_init_all+0x108>)
 8000f24:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <uart_init_all+0x108>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000f2c:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0xF << (4 * 2)) | (0xF << (4 * 3)));
 8000f2e:	4a22      	ldr	r2, [pc, #136]	; (8000fb8 <uart_init_all+0x108>)
 8000f30:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <uart_init_all+0x108>)
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000f38:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= ((7U << (4 * 2)) | (7U << (4 * 3)));
 8000f3a:	4a1f      	ldr	r2, [pc, #124]	; (8000fb8 <uart_init_all+0x108>)
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <uart_init_all+0x108>)
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000f44:	6213      	str	r3, [r2, #32]

    USART2->BRR = 16000000 / 115200;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <uart_init_all+0x110>)
 8000f48:	228a      	movs	r2, #138	; 0x8a
 8000f4a:	811a      	strh	r2, [r3, #8]
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <uart_init_all+0x110>)
 8000f4e:	f242 020c 	movw	r2, #8204	; 0x200c
 8000f52:	819a      	strh	r2, [r3, #12]

    USART1->CR3 |= USART_CR3_DMAR;
 8000f54:	4a19      	ldr	r2, [pc, #100]	; (8000fbc <uart_init_all+0x10c>)
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <uart_init_all+0x10c>)
 8000f58:	8a9b      	ldrh	r3, [r3, #20]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	8293      	strh	r3, [r2, #20]

    DMA2_Stream2->CR &= ~DMA_SxCR_EN;
 8000f64:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <uart_init_all+0x114>)
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <uart_init_all+0x114>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f023 0301 	bic.w	r3, r3, #1
 8000f6e:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream2->CR & DMA_SxCR_EN);
 8000f70:	bf00      	nop
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <uart_init_all+0x114>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f9      	bne.n	8000f72 <uart_init_all+0xc2>

    DMA2_Stream2->PAR  = (uint32_t)&USART1->DR;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <uart_init_all+0x114>)
 8000f80:	4a11      	ldr	r2, [pc, #68]	; (8000fc8 <uart_init_all+0x118>)
 8000f82:	609a      	str	r2, [r3, #8]
    DMA2_Stream2->M0AR = (uint32_t)m_uart1_rx_buffer;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <uart_init_all+0x114>)
 8000f86:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <uart_init_all+0x11c>)
 8000f88:	60da      	str	r2, [r3, #12]
    DMA2_Stream2->NDTR = UART1_RX_BUFFER_SIZE;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <uart_init_all+0x114>)
 8000f8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f90:	605a      	str	r2, [r3, #4]

    DMA2_Stream2->CR =
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <uart_init_all+0x114>)
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <uart_init_all+0x120>)
 8000f96:	601a      	str	r2, [r3, #0]
        (0 << 6) |
        (0 << 13) |
        (0 << 11) |
        (0 << 16);

    DMA2_Stream2->CR |= DMA_SxCR_EN;
 8000f98:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <uart_init_all+0x114>)
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <uart_init_all+0x114>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6013      	str	r3, [r2, #0]

    NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000fa4:	203a      	movs	r0, #58	; 0x3a
 8000fa6:	f7ff ff69 	bl	8000e7c <NVIC_EnableIRQ>
    uart_enable_uart1_idle_irq();
 8000faa:	f000 f98b 	bl	80012c4 <uart_enable_uart1_idle_irq>
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	40011000 	.word	0x40011000
 8000fc0:	40004400 	.word	0x40004400
 8000fc4:	40026440 	.word	0x40026440
 8000fc8:	40011004 	.word	0x40011004
 8000fcc:	20000778 	.word	0x20000778
 8000fd0:	08000500 	.word	0x08000500

08000fd4 <uart_log>:

void uart_log(const char* msg)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
    const char* p = msg;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	60fb      	str	r3, [r7, #12]
    while (*p) {
 8000fe0:	e00e      	b.n	8001000 <uart_log+0x2c>
        while (!(USART2->SR & USART_SR_TXE));
 8000fe2:	bf00      	nop
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <uart_log+0x6c>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d0f8      	beq.n	8000fe4 <uart_log+0x10>
        USART2->DR = *p++;
 8000ff2:	4913      	ldr	r1, [pc, #76]	; (8001040 <uart_log+0x6c>)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	60fa      	str	r2, [r7, #12]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	808b      	strh	r3, [r1, #4]
    while (*p) {
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1ec      	bne.n	8000fe2 <uart_log+0xe>
    }
    while (!(USART2->SR & USART_SR_TXE));
 8001008:	bf00      	nop
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <uart_log+0x6c>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	b29b      	uxth	r3, r3
 8001010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f8      	beq.n	800100a <uart_log+0x36>
    USART2->DR = '\r';
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <uart_log+0x6c>)
 800101a:	220d      	movs	r2, #13
 800101c:	809a      	strh	r2, [r3, #4]
    while (!(USART2->SR & USART_SR_TXE));
 800101e:	bf00      	nop
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <uart_log+0x6c>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	b29b      	uxth	r3, r3
 8001026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f8      	beq.n	8001020 <uart_log+0x4c>
    USART2->DR = '\n';
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <uart_log+0x6c>)
 8001030:	220a      	movs	r2, #10
 8001032:	809a      	strh	r2, [r3, #4]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40004400 	.word	0x40004400

08001044 <uart1_send_raw>:

void uart1_send_raw(const uint8_t* raw, uint32_t length)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < length; i++) {
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	e011      	b.n	8001078 <uart1_send_raw+0x34>
        while (!(USART1->SR & USART_SR_TXE));
 8001054:	bf00      	nop
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <uart1_send_raw+0x58>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	b29b      	uxth	r3, r3
 800105c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f8      	beq.n	8001056 <uart1_send_raw+0x12>
        USART1->DR = raw[i];
 8001064:	490d      	ldr	r1, [pc, #52]	; (800109c <uart1_send_raw+0x58>)
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	808b      	strh	r3, [r1, #4]
    for (uint32_t i = 0; i < length; i++) {
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3301      	adds	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	d3e9      	bcc.n	8001054 <uart1_send_raw+0x10>
    }
    while (!(USART1->SR & USART_SR_TC));
 8001080:	bf00      	nop
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <uart1_send_raw+0x58>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	b29b      	uxth	r3, r3
 8001088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f8      	beq.n	8001082 <uart1_send_raw+0x3e>
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	40011000 	.word	0x40011000

080010a0 <gsm_hw_layer_uart_fill_rx>:

void gsm_hw_layer_uart_fill_rx(uint8_t *data, uint32_t length)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
    static uint8_t line_buf[UART_LINE_MAX_LEN];
    static uint16_t line_idx = 0;

    for (uint32_t i = 0; i < length; i++) {
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	e033      	b.n	8001118 <gsm_hw_layer_uart_fill_rx+0x78>
        if (line_idx < UART_LINE_MAX_LEN - 1) {
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <gsm_hw_layer_uart_fill_rx+0x88>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	2b7e      	cmp	r3, #126	; 0x7e
 80010b6:	d829      	bhi.n	800110c <gsm_hw_layer_uart_fill_rx+0x6c>
            line_buf[line_idx++] = data[i];
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <gsm_hw_layer_uart_fill_rx+0x88>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	1c5a      	adds	r2, r3, #1
 80010be:	b291      	uxth	r1, r2
 80010c0:	4a19      	ldr	r2, [pc, #100]	; (8001128 <gsm_hw_layer_uart_fill_rx+0x88>)
 80010c2:	8011      	strh	r1, [r2, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <gsm_hw_layer_uart_fill_rx+0x8c>)
 80010d0:	545a      	strb	r2, [r3, r1]
            if (data[i] == '\n' || data[i] == '\r') {
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b0a      	cmp	r3, #10
 80010dc:	d005      	beq.n	80010ea <gsm_hw_layer_uart_fill_rx+0x4a>
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b0d      	cmp	r3, #13
 80010e8:	d113      	bne.n	8001112 <gsm_hw_layer_uart_fill_rx+0x72>
                if (line_idx > 1) {
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <gsm_hw_layer_uart_fill_rx+0x88>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d908      	bls.n	8001104 <gsm_hw_layer_uart_fill_rx+0x64>
                    line_buf[line_idx] = 0;
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <gsm_hw_layer_uart_fill_rx+0x88>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <gsm_hw_layer_uart_fill_rx+0x8c>)
 80010fa:	2100      	movs	r1, #0
 80010fc:	5499      	strb	r1, [r3, r2]
                    uart_line_queue_push((char*)line_buf);
 80010fe:	480b      	ldr	r0, [pc, #44]	; (800112c <gsm_hw_layer_uart_fill_rx+0x8c>)
 8001100:	f000 f938 	bl	8001374 <uart_line_queue_push>
                }
                line_idx = 0;
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <gsm_hw_layer_uart_fill_rx+0x88>)
 8001106:	2200      	movs	r2, #0
 8001108:	801a      	strh	r2, [r3, #0]
 800110a:	e002      	b.n	8001112 <gsm_hw_layer_uart_fill_rx+0x72>
            }
        } else {
            line_idx = 0;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <gsm_hw_layer_uart_fill_rx+0x88>)
 800110e:	2200      	movs	r2, #0
 8001110:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++) {
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d3c7      	bcc.n	80010b0 <gsm_hw_layer_uart_fill_rx+0x10>
        }
    }
}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200000b2 	.word	0x200000b2
 800112c:	200000b4 	.word	0x200000b4

08001130 <uart1_poll>:

void uart1_poll(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
    if (!rx_line_ready) {
 8001136:	4b40      	ldr	r3, [pc, #256]	; (8001238 <uart1_poll+0x108>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f083 0301 	eor.w	r3, r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d172      	bne.n	800122c <uart1_poll+0xfc>
        return;
    }
    rx_line_ready = false;
 8001146:	4b3c      	ldr	r3, [pc, #240]	; (8001238 <uart1_poll+0x108>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]

    uint32_t pos = UART1_RX_BUFFER_SIZE - DMA2_Stream2->NDTR;
 800114c:	4b3b      	ldr	r3, [pc, #236]	; (800123c <uart1_poll+0x10c>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001154:	607b      	str	r3, [r7, #4]

    if (pos == m_old_uart1_dma_rx_pos) {
 8001156:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <uart1_poll+0x110>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	429a      	cmp	r2, r3
 800115e:	d067      	beq.n	8001230 <uart1_poll+0x100>
        return;
    }

    if (gsm_ppp_mode && ppp != NULL) {
 8001160:	4b38      	ldr	r3, [pc, #224]	; (8001244 <uart1_poll+0x114>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d02e      	beq.n	80011c8 <uart1_poll+0x98>
 800116a:	4b37      	ldr	r3, [pc, #220]	; (8001248 <uart1_poll+0x118>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d02a      	beq.n	80011c8 <uart1_poll+0x98>
        if (pos > m_old_uart1_dma_rx_pos) {
 8001172:	4b33      	ldr	r3, [pc, #204]	; (8001240 <uart1_poll+0x110>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	429a      	cmp	r2, r3
 800117a:	d90d      	bls.n	8001198 <uart1_poll+0x68>
            pppos_input(ppp, &m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], pos - m_old_uart1_dma_rx_pos);
 800117c:	4b32      	ldr	r3, [pc, #200]	; (8001248 <uart1_poll+0x118>)
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <uart1_poll+0x110>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a31      	ldr	r2, [pc, #196]	; (800124c <uart1_poll+0x11c>)
 8001186:	1899      	adds	r1, r3, r2
 8001188:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <uart1_poll+0x110>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	461a      	mov	r2, r3
 8001192:	f011 fb69 	bl	8012868 <pppos_input>
        if (pos > m_old_uart1_dma_rx_pos) {
 8001196:	e03c      	b.n	8001212 <uart1_poll+0xe2>
        } else {
            pppos_input(ppp, &m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], UART1_RX_BUFFER_SIZE - m_old_uart1_dma_rx_pos);
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <uart1_poll+0x118>)
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	4b28      	ldr	r3, [pc, #160]	; (8001240 <uart1_poll+0x110>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a2a      	ldr	r2, [pc, #168]	; (800124c <uart1_poll+0x11c>)
 80011a2:	1899      	adds	r1, r3, r2
 80011a4:	4b26      	ldr	r3, [pc, #152]	; (8001240 <uart1_poll+0x110>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80011ac:	461a      	mov	r2, r3
 80011ae:	f011 fb5b 	bl	8012868 <pppos_input>
            if (pos > 0) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d02c      	beq.n	8001212 <uart1_poll+0xe2>
                pppos_input(ppp, &m_uart1_rx_buffer[0], pos);
 80011b8:	4b23      	ldr	r3, [pc, #140]	; (8001248 <uart1_poll+0x118>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	4923      	ldr	r1, [pc, #140]	; (800124c <uart1_poll+0x11c>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f011 fb51 	bl	8012868 <pppos_input>
        if (pos > m_old_uart1_dma_rx_pos) {
 80011c6:	e024      	b.n	8001212 <uart1_poll+0xe2>
            }
        }
    } else {
        if (pos > m_old_uart1_dma_rx_pos) {
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <uart1_poll+0x110>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d90b      	bls.n	80011ea <uart1_poll+0xba>
            gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], pos - m_old_uart1_dma_rx_pos);
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <uart1_poll+0x110>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a1d      	ldr	r2, [pc, #116]	; (800124c <uart1_poll+0x11c>)
 80011d8:	1898      	adds	r0, r3, r2
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <uart1_poll+0x110>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff ff5c 	bl	80010a0 <gsm_hw_layer_uart_fill_rx>
 80011e8:	e014      	b.n	8001214 <uart1_poll+0xe4>
        } else {
            gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], UART1_RX_BUFFER_SIZE - m_old_uart1_dma_rx_pos);
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <uart1_poll+0x110>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a17      	ldr	r2, [pc, #92]	; (800124c <uart1_poll+0x11c>)
 80011f0:	441a      	add	r2, r3
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <uart1_poll+0x110>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80011fa:	4619      	mov	r1, r3
 80011fc:	4610      	mov	r0, r2
 80011fe:	f7ff ff4f 	bl	80010a0 <gsm_hw_layer_uart_fill_rx>
            if (pos > 0) {
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d005      	beq.n	8001214 <uart1_poll+0xe4>
                gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[0], pos);
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	4810      	ldr	r0, [pc, #64]	; (800124c <uart1_poll+0x11c>)
 800120c:	f7ff ff48 	bl	80010a0 <gsm_hw_layer_uart_fill_rx>
 8001210:	e000      	b.n	8001214 <uart1_poll+0xe4>
        if (pos > m_old_uart1_dma_rx_pos) {
 8001212:	bf00      	nop
            }
        }
    }
    m_old_uart1_dma_rx_pos = pos;
 8001214:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <uart1_poll+0x110>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
    if (m_old_uart1_dma_rx_pos == UART1_RX_BUFFER_SIZE)
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <uart1_poll+0x110>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001222:	d106      	bne.n	8001232 <uart1_poll+0x102>
        m_old_uart1_dma_rx_pos = 0;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <uart1_poll+0x110>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	e002      	b.n	8001232 <uart1_poll+0x102>
        return;
 800122c:	bf00      	nop
 800122e:	e000      	b.n	8001232 <uart1_poll+0x102>
        return;
 8001230:	bf00      	nop
}
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200000b0 	.word	0x200000b0
 800123c:	40026440 	.word	0x40026440
 8001240:	200000ac 	.word	0x200000ac
 8001244:	200005f4 	.word	0x200005f4
 8001248:	200005f0 	.word	0x200005f0
 800124c:	20000778 	.word	0x20000778

08001250 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
    if (DMA2->LISR & DMA_LISR_TCIF2) {
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <DMA2_Stream2_IRQHandler+0x2c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d008      	beq.n	8001272 <DMA2_Stream2_IRQHandler+0x22>
        DMA2->LIFCR |= DMA_LIFCR_CTCIF2;
 8001260:	4a06      	ldr	r2, [pc, #24]	; (800127c <DMA2_Stream2_IRQHandler+0x2c>)
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <DMA2_Stream2_IRQHandler+0x2c>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800126a:	6093      	str	r3, [r2, #8]
        rx_line_ready = true;
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <DMA2_Stream2_IRQHandler+0x30>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
    }
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	40026400 	.word	0x40026400
 8001280:	200000b0 	.word	0x200000b0

08001284 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_IDLE) {
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <USART1_IRQHandler+0x38>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	b29b      	uxth	r3, r3
 8001290:	f003 0310 	and.w	r3, r3, #16
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00b      	beq.n	80012b0 <USART1_IRQHandler+0x2c>
        volatile uint32_t tmp;
        tmp = USART1->SR;
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <USART1_IRQHandler+0x38>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	b29b      	uxth	r3, r3
 800129e:	607b      	str	r3, [r7, #4]
        tmp = USART1->DR;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <USART1_IRQHandler+0x38>)
 80012a2:	889b      	ldrh	r3, [r3, #4]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	607b      	str	r3, [r7, #4]
        (void)tmp;
 80012a8:	687b      	ldr	r3, [r7, #4]
        rx_line_ready = true;
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <USART1_IRQHandler+0x3c>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
    }
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	40011000 	.word	0x40011000
 80012c0:	200000b0 	.word	0x200000b0

080012c4 <uart_enable_uart1_idle_irq>:

void uart_enable_uart1_idle_irq(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
    USART1->CR1 |= USART_CR1_IDLEIE;
 80012c8:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <uart_enable_uart1_idle_irq+0x20>)
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <uart_enable_uart1_idle_irq+0x20>)
 80012cc:	899b      	ldrh	r3, [r3, #12]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	f043 0310 	orr.w	r3, r3, #16
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	8193      	strh	r3, [r2, #12]
    NVIC_EnableIRQ(USART1_IRQn);
 80012d8:	2025      	movs	r0, #37	; 0x25
 80012da:	f7ff fdcf 	bl	8000e7c <NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40011000 	.word	0x40011000

080012e8 <restart_dma2_stream2>:
    NVIC_DisableIRQ(USART1_IRQn);
    uart_log("UART1 IRQ disabled");
}

void restart_dma2_stream2(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
    DMA2_Stream2->CR &= ~DMA_SxCR_EN;
 80012ec:	4a12      	ldr	r2, [pc, #72]	; (8001338 <restart_dma2_stream2+0x50>)
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <restart_dma2_stream2+0x50>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 0301 	bic.w	r3, r3, #1
 80012f6:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream2->CR & DMA_SxCR_EN);
 80012f8:	bf00      	nop
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <restart_dma2_stream2+0x50>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f9      	bne.n	80012fa <restart_dma2_stream2+0x12>

    DMA2_Stream2->PAR  = (uint32_t)&USART1->DR;
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <restart_dma2_stream2+0x50>)
 8001308:	4a0c      	ldr	r2, [pc, #48]	; (800133c <restart_dma2_stream2+0x54>)
 800130a:	609a      	str	r2, [r3, #8]
    DMA2_Stream2->M0AR = (uint32_t)m_uart1_rx_buffer;
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <restart_dma2_stream2+0x50>)
 800130e:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <restart_dma2_stream2+0x58>)
 8001310:	60da      	str	r2, [r3, #12]
    DMA2_Stream2->NDTR = UART1_RX_BUFFER_SIZE;
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <restart_dma2_stream2+0x50>)
 8001314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001318:	605a      	str	r2, [r3, #4]

    DMA2_Stream2->CR =
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <restart_dma2_stream2+0x50>)
 800131c:	4a09      	ldr	r2, [pc, #36]	; (8001344 <restart_dma2_stream2+0x5c>)
 800131e:	601a      	str	r2, [r3, #0]
        (0 << 6) |
        (0 << 13) |
        (0 << 11) |
        (0 << 16);

    DMA2_Stream2->CR |= DMA_SxCR_EN;
 8001320:	4a05      	ldr	r2, [pc, #20]	; (8001338 <restart_dma2_stream2+0x50>)
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <restart_dma2_stream2+0x50>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40026440 	.word	0x40026440
 800133c:	40011004 	.word	0x40011004
 8001340:	20000778 	.word	0x20000778
 8001344:	08000500 	.word	0x08000500

08001348 <uart_line_queue_init>:
static char uart_line_queue[UART_LINE_QUEUE_SIZE][UART_LINE_MAX_LEN];
static volatile uint8_t uart_line_queue_head = 0;
static volatile uint8_t uart_line_queue_tail = 0;
static volatile uint8_t uart_line_queue_count = 0;

void uart_line_queue_init(void) {
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
    uart_line_queue_head = 0;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <uart_line_queue_init+0x20>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
    uart_line_queue_tail = 0;
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <uart_line_queue_init+0x24>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count = 0;
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <uart_line_queue_init+0x28>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	20000534 	.word	0x20000534
 800136c:	20000535 	.word	0x20000535
 8001370:	20000536 	.word	0x20000536

08001374 <uart_line_queue_push>:

// Push a line into the queue, returns true if success, false if full
bool uart_line_queue_push(const char *line) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
    if (uart_line_queue_count >= UART_LINE_QUEUE_SIZE) return false;
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <uart_line_queue_push+0x74>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b07      	cmp	r3, #7
 8001384:	d901      	bls.n	800138a <uart_line_queue_push+0x16>
 8001386:	2300      	movs	r3, #0
 8001388:	e029      	b.n	80013de <uart_line_queue_push+0x6a>
    strncpy(uart_line_queue[uart_line_queue_head], line, UART_LINE_MAX_LEN - 1);
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <uart_line_queue_push+0x78>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	01db      	lsls	r3, r3, #7
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <uart_line_queue_push+0x7c>)
 8001394:	4413      	add	r3, r2
 8001396:	227f      	movs	r2, #127	; 0x7f
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	4618      	mov	r0, r3
 800139c:	f012 ff2b 	bl	80141f6 <strncpy>
    uart_line_queue[uart_line_queue_head][UART_LINE_MAX_LEN - 1] = '\0';
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <uart_line_queue_push+0x78>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <uart_line_queue_push+0x7c>)
 80013a8:	01db      	lsls	r3, r3, #7
 80013aa:	4413      	add	r3, r2
 80013ac:	337f      	adds	r3, #127	; 0x7f
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
    uart_line_queue_head = (uart_line_queue_head + 1) % UART_LINE_QUEUE_SIZE;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <uart_line_queue_push+0x78>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	3301      	adds	r3, #1
 80013ba:	425a      	negs	r2, r3
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	f002 0207 	and.w	r2, r2, #7
 80013c4:	bf58      	it	pl
 80013c6:	4253      	negpl	r3, r2
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <uart_line_queue_push+0x78>)
 80013cc:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count++;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <uart_line_queue_push+0x74>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	3301      	adds	r3, #1
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <uart_line_queue_push+0x74>)
 80013da:	701a      	strb	r2, [r3, #0]
    return true;
 80013dc:	2301      	movs	r3, #1
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000536 	.word	0x20000536
 80013ec:	20000534 	.word	0x20000534
 80013f0:	20000134 	.word	0x20000134

080013f4 <uart_line_queue_pop>:

// Pop a line from the queue, returns true if a line was available
bool uart_line_queue_pop(char *out_line) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    if (uart_line_queue_count == 0) return false;
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <uart_line_queue_pop+0x60>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <uart_line_queue_pop+0x16>
 8001406:	2300      	movs	r3, #0
 8001408:	e020      	b.n	800144c <uart_line_queue_pop+0x58>
    strncpy(out_line, uart_line_queue[uart_line_queue_tail], UART_LINE_MAX_LEN);
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <uart_line_queue_pop+0x64>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	01db      	lsls	r3, r3, #7
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <uart_line_queue_pop+0x68>)
 8001414:	4413      	add	r3, r2
 8001416:	2280      	movs	r2, #128	; 0x80
 8001418:	4619      	mov	r1, r3
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f012 feeb 	bl	80141f6 <strncpy>
    uart_line_queue_tail = (uart_line_queue_tail + 1) % UART_LINE_QUEUE_SIZE;
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <uart_line_queue_pop+0x64>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	3301      	adds	r3, #1
 8001428:	425a      	negs	r2, r3
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	f002 0207 	and.w	r2, r2, #7
 8001432:	bf58      	it	pl
 8001434:	4253      	negpl	r3, r2
 8001436:	b2da      	uxtb	r2, r3
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <uart_line_queue_pop+0x64>)
 800143a:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count--;
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <uart_line_queue_pop+0x60>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	3b01      	subs	r3, #1
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b03      	ldr	r3, [pc, #12]	; (8001454 <uart_line_queue_pop+0x60>)
 8001448:	701a      	strb	r2, [r3, #0]
    return true;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000536 	.word	0x20000536
 8001458:	20000535 	.word	0x20000535
 800145c:	20000134 	.word	0x20000134

08001460 <main>:
#include "hardware/button.h"

device_state_t current_device_state = DEVICE_STATE_BOOTING_GSM;
swich_state_t switch_state = swich_off;
int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
    hardware_init();
 8001466:	f7ff fba5 	bl	8000bb4 <hardware_init>
    uart_log("UART2 log test");
 800146a:	4814      	ldr	r0, [pc, #80]	; (80014bc <main+0x5c>)
 800146c:	f7ff fdb2 	bl	8000fd4 <uart_log>
    uint32_t start_tick = timer2_get_tick();
 8001470:	f7ff fce4 	bl	8000e3c <timer2_get_tick>
 8001474:	6078      	str	r0, [r7, #4]
    while (timer2_get_tick() - start_tick < 15000) {
 8001476:	f7ff fce1 	bl	8000e3c <timer2_get_tick>
 800147a:	4602      	mov	r2, r0
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001484:	4293      	cmp	r3, r2
 8001486:	bf94      	ite	ls
 8001488:	2301      	movls	r3, #1
 800148a:	2300      	movhi	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <main+0x3e>
        led_update_by_device_state();
 8001492:	f000 f9c9 	bl	8001828 <led_update_by_device_state>
        delay_ms(10);
 8001496:	200a      	movs	r0, #10
 8001498:	f7ff fcdc 	bl	8000e54 <delay_ms>
    while (timer2_get_tick() - start_tick < 15000) {
 800149c:	e7eb      	b.n	8001476 <main+0x16>
    }
    ppp_connection_init();
 800149e:	f000 fd9f 	bl	8001fe0 <ppp_connection_init>
    //led_stt_switch_set_state(1); 
    while (1) {      
        led_update_by_device_state();
 80014a2:	f000 f9c1 	bl	8001828 <led_update_by_device_state>
        led_stt_switch_control();
 80014a6:	f000 f9fd 	bl	80018a4 <led_stt_switch_control>
        button_logic_update();
 80014aa:	f000 f81d 	bl	80014e8 <button_logic_update>
        uart1_poll();
 80014ae:	f7ff fe3f 	bl	8001130 <uart1_poll>
        send_all_gsm_commands_with_check();
 80014b2:	f7ff f935 	bl	8000720 <send_all_gsm_commands_with_check>
        ppp_connection_poll();
 80014b6:	f000 fdc1 	bl	800203c <ppp_connection_poll>
        led_update_by_device_state();
 80014ba:	e7f2      	b.n	80014a2 <main+0x42>
 80014bc:	08014b14 	.word	0x08014b14

080014c0 <toggle_switch_state>:
} button_state_t;

static button_state_t button_state = BUTTON_IDLE;
static uint32_t button_press_time = 0;

static void toggle_switch_state(void) {
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
    if (switch_state == swich_on) {
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <toggle_switch_state+0x24>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d103      	bne.n	80014d4 <toggle_switch_state+0x14>
        switch_state = swich_off;
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <toggle_switch_state+0x24>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
    } else {
        switch_state = swich_on;
    }
}
 80014d2:	e002      	b.n	80014da <toggle_switch_state+0x1a>
        switch_state = swich_on;
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <toggle_switch_state+0x24>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	20000538 	.word	0x20000538

080014e8 <button_logic_update>:

void button_logic_update(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
    uint32_t now = timer2_get_tick();
 80014ee:	f7ff fca5 	bl	8000e3c <timer2_get_tick>
 80014f2:	6078      	str	r0, [r7, #4]

    switch (button_state)
 80014f4:	4b20      	ldr	r3, [pc, #128]	; (8001578 <button_logic_update+0x90>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d002      	beq.n	8001502 <button_logic_update+0x1a>
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d00f      	beq.n	8001520 <button_logic_update+0x38>

                button_state = BUTTON_IDLE;
            }
            break;
    }
 8001500:	e036      	b.n	8001570 <button_logic_update+0x88>
            if (g_button_pressed_flag)
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <button_logic_update+0x94>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d02e      	beq.n	800156a <button_logic_update+0x82>
                g_button_pressed_flag = 0;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <button_logic_update+0x94>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
                button_press_time = now;
 8001512:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <button_logic_update+0x98>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6013      	str	r3, [r2, #0]
                button_state = BUTTON_PRESSED_WAIT_RELEASE;
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <button_logic_update+0x90>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
            break;
 800151e:	e024      	b.n	800156a <button_logic_update+0x82>
            if (g_button_released_flag)
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <button_logic_update+0x9c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d021      	beq.n	800156e <button_logic_update+0x86>
                g_button_released_flag = 0;
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <button_logic_update+0x9c>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
                uint32_t duration = now - button_press_time;
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <button_logic_update+0x98>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	603b      	str	r3, [r7, #0]
                if (duration < 5000) {
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001540:	4293      	cmp	r3, r2
 8001542:	d802      	bhi.n	800154a <button_logic_update+0x62>
                    toggle_switch_state();
 8001544:	f7ff ffbc 	bl	80014c0 <toggle_switch_state>
 8001548:	e00b      	b.n	8001562 <button_logic_update+0x7a>
                else if (duration < 10000) {
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001550:	4293      	cmp	r3, r2
 8001552:	d803      	bhi.n	800155c <button_logic_update+0x74>
                    uart_log("5<s < 10s");
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <button_logic_update+0xa0>)
 8001556:	f7ff fd3d 	bl	8000fd4 <uart_log>
 800155a:	e002      	b.n	8001562 <button_logic_update+0x7a>
                    uart_log("10s");
 800155c:	480b      	ldr	r0, [pc, #44]	; (800158c <button_logic_update+0xa4>)
 800155e:	f7ff fd39 	bl	8000fd4 <uart_log>
                button_state = BUTTON_IDLE;
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <button_logic_update+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
            break;
 8001568:	e001      	b.n	800156e <button_logic_update+0x86>
            break;
 800156a:	bf00      	nop
 800156c:	e000      	b.n	8001570 <button_logic_update+0x88>
            break;
 800156e:	bf00      	nop
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000539 	.word	0x20000539
 800157c:	200000a0 	.word	0x200000a0
 8001580:	2000053c 	.word	0x2000053c
 8001584:	200000a1 	.word	0x200000a1
 8001588:	08014b24 	.word	0x08014b24
 800158c:	08014b30 	.word	0x08014b30

08001590 <led_4g_blink_200_200>:
#include "middle/led_logic.h"
#include "hardware/led.h"
#include "hardware/timer.h"
#include "main.h"

void led_4g_blink_200_200(void) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t led_state = 0;
    uint32_t now = timer2_get_tick();
 8001596:	f7ff fc51 	bl	8000e3c <timer2_get_tick>
 800159a:	6078      	str	r0, [r7, #4]

    if (now < last_tick) last_tick = now;
 800159c:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <led_4g_blink_200_200+0x68>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d202      	bcs.n	80015ac <led_4g_blink_200_200+0x1c>
 80015a6:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <led_4g_blink_200_200+0x68>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6013      	str	r3, [r2, #0]

    if (led_state) {
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <led_4g_blink_200_200+0x6c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00e      	beq.n	80015d2 <led_4g_blink_200_200+0x42>
        if (now - last_tick >= 200) {
 80015b4:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <led_4g_blink_200_200+0x68>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2bc7      	cmp	r3, #199	; 0xc7
 80015be:	d916      	bls.n	80015ee <led_4g_blink_200_200+0x5e>
            led_4g_off();
 80015c0:	f7ff fba6 	bl	8000d10 <led_4g_off>
            led_state = 0;
 80015c4:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <led_4g_blink_200_200+0x6c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
            last_tick = now;
 80015ca:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <led_4g_blink_200_200+0x68>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6013      	str	r3, [r2, #0]
            led_4g_on();
            led_state = 1;
            last_tick = now;
        }
    }
}
 80015d0:	e00d      	b.n	80015ee <led_4g_blink_200_200+0x5e>
        if (now - last_tick >= 200) {
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <led_4g_blink_200_200+0x68>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2bc7      	cmp	r3, #199	; 0xc7
 80015dc:	d907      	bls.n	80015ee <led_4g_blink_200_200+0x5e>
            led_4g_on();
 80015de:	f7ff fb8b 	bl	8000cf8 <led_4g_on>
            led_state = 1;
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <led_4g_blink_200_200+0x6c>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
            last_tick = now;
 80015e8:	4a03      	ldr	r2, [pc, #12]	; (80015f8 <led_4g_blink_200_200+0x68>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6013      	str	r3, [r2, #0]
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000540 	.word	0x20000540
 80015fc:	20000544 	.word	0x20000544

08001600 <led_4g_blink_200_500_200_2000>:

void led_4g_blink_200_500_200_2000(void) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t phase = 0;
    uint32_t now = timer2_get_tick();
 8001606:	f7ff fc19 	bl	8000e3c <timer2_get_tick>
 800160a:	6078      	str	r0, [r7, #4]

    if (now < last_tick) {
 800160c:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <led_4g_blink_200_500_200_2000+0xd4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	429a      	cmp	r2, r3
 8001614:	d205      	bcs.n	8001622 <led_4g_blink_200_500_200_2000+0x22>
        last_tick = now;
 8001616:	4a2f      	ldr	r2, [pc, #188]	; (80016d4 <led_4g_blink_200_500_200_2000+0xd4>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6013      	str	r3, [r2, #0]
        phase = 0;
 800161c:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <led_4g_blink_200_500_200_2000+0xd8>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
    }

    switch (phase) {
 8001622:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <led_4g_blink_200_500_200_2000+0xd8>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d84f      	bhi.n	80016ca <led_4g_blink_200_500_200_2000+0xca>
 800162a:	a201      	add	r2, pc, #4	; (adr r2, 8001630 <led_4g_blink_200_500_200_2000+0x30>)
 800162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001630:	08001641 	.word	0x08001641
 8001634:	0800165f 	.word	0x0800165f
 8001638:	0800167f 	.word	0x0800167f
 800163c:	0800169d 	.word	0x0800169d
        case 0:
            led_4g_on();
 8001640:	f7ff fb5a 	bl	8000cf8 <led_4g_on>
            if (now - last_tick >= 200) {
 8001644:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <led_4g_blink_200_500_200_2000+0xd4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2bc7      	cmp	r3, #199	; 0xc7
 800164e:	d935      	bls.n	80016bc <led_4g_blink_200_500_200_2000+0xbc>
                last_tick = now;
 8001650:	4a20      	ldr	r2, [pc, #128]	; (80016d4 <led_4g_blink_200_500_200_2000+0xd4>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
                phase = 1;
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <led_4g_blink_200_500_200_2000+0xd8>)
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800165c:	e02e      	b.n	80016bc <led_4g_blink_200_500_200_2000+0xbc>
        case 1:
            led_4g_off();
 800165e:	f7ff fb57 	bl	8000d10 <led_4g_off>
            if (now - last_tick >= 500) {
 8001662:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <led_4g_blink_200_500_200_2000+0xd4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800166e:	d327      	bcc.n	80016c0 <led_4g_blink_200_500_200_2000+0xc0>
                last_tick = now;
 8001670:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <led_4g_blink_200_500_200_2000+0xd4>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6013      	str	r3, [r2, #0]
                phase = 2;
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <led_4g_blink_200_500_200_2000+0xd8>)
 8001678:	2202      	movs	r2, #2
 800167a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800167c:	e020      	b.n	80016c0 <led_4g_blink_200_500_200_2000+0xc0>
        case 2:
            led_4g_on();
 800167e:	f7ff fb3b 	bl	8000cf8 <led_4g_on>
            if (now - last_tick >= 200) {
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <led_4g_blink_200_500_200_2000+0xd4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2bc7      	cmp	r3, #199	; 0xc7
 800168c:	d91a      	bls.n	80016c4 <led_4g_blink_200_500_200_2000+0xc4>
                last_tick = now;
 800168e:	4a11      	ldr	r2, [pc, #68]	; (80016d4 <led_4g_blink_200_500_200_2000+0xd4>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6013      	str	r3, [r2, #0]
                phase = 3;
 8001694:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <led_4g_blink_200_500_200_2000+0xd8>)
 8001696:	2203      	movs	r2, #3
 8001698:	701a      	strb	r2, [r3, #0]
            }
            break;
 800169a:	e013      	b.n	80016c4 <led_4g_blink_200_500_200_2000+0xc4>
        case 3:
            led_4g_off();
 800169c:	f7ff fb38 	bl	8000d10 <led_4g_off>
            if (now - last_tick >= 2000) {
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <led_4g_blink_200_500_200_2000+0xd4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016ac:	d30c      	bcc.n	80016c8 <led_4g_blink_200_500_200_2000+0xc8>
                last_tick = now;
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <led_4g_blink_200_500_200_2000+0xd4>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6013      	str	r3, [r2, #0]
                phase = 0;
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <led_4g_blink_200_500_200_2000+0xd8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
            }
            break;
 80016ba:	e005      	b.n	80016c8 <led_4g_blink_200_500_200_2000+0xc8>
            break;
 80016bc:	bf00      	nop
 80016be:	e004      	b.n	80016ca <led_4g_blink_200_500_200_2000+0xca>
            break;
 80016c0:	bf00      	nop
 80016c2:	e002      	b.n	80016ca <led_4g_blink_200_500_200_2000+0xca>
            break;
 80016c4:	bf00      	nop
 80016c6:	e000      	b.n	80016ca <led_4g_blink_200_500_200_2000+0xca>
            break;
 80016c8:	bf00      	nop
    }
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000548 	.word	0x20000548
 80016d8:	2000054c 	.word	0x2000054c

080016dc <led_stt_blink_200_200>:

void led_stt_blink_200_200(void) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t led_state = 0;
    uint32_t now = timer2_get_tick();
 80016e2:	f7ff fbab 	bl	8000e3c <timer2_get_tick>
 80016e6:	6078      	str	r0, [r7, #4]

    if (now < last_tick) last_tick = now;
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <led_stt_blink_200_200+0x68>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d202      	bcs.n	80016f8 <led_stt_blink_200_200+0x1c>
 80016f2:	4a14      	ldr	r2, [pc, #80]	; (8001744 <led_stt_blink_200_200+0x68>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6013      	str	r3, [r2, #0]

    if (led_state) {
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <led_stt_blink_200_200+0x6c>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00e      	beq.n	800171e <led_stt_blink_200_200+0x42>
        if (now - last_tick >= 200) {
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <led_stt_blink_200_200+0x68>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2bc7      	cmp	r3, #199	; 0xc7
 800170a:	d916      	bls.n	800173a <led_stt_blink_200_200+0x5e>
            led_stt_off();
 800170c:	f7ff fb16 	bl	8000d3c <led_stt_off>
            led_state = 0;
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <led_stt_blink_200_200+0x6c>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
            last_tick = now;
 8001716:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <led_stt_blink_200_200+0x68>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6013      	str	r3, [r2, #0]
            led_stt_on();
            led_state = 1;
            last_tick = now;
        }
    }
}
 800171c:	e00d      	b.n	800173a <led_stt_blink_200_200+0x5e>
        if (now - last_tick >= 200) {
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <led_stt_blink_200_200+0x68>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2bc7      	cmp	r3, #199	; 0xc7
 8001728:	d907      	bls.n	800173a <led_stt_blink_200_200+0x5e>
            led_stt_on();
 800172a:	f7ff fafd 	bl	8000d28 <led_stt_on>
            led_state = 1;
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <led_stt_blink_200_200+0x6c>)
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
            last_tick = now;
 8001734:	4a03      	ldr	r2, [pc, #12]	; (8001744 <led_stt_blink_200_200+0x68>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000550 	.word	0x20000550
 8001748:	20000554 	.word	0x20000554

0800174c <led_stt_blink_200_500_200_2000>:

void led_stt_blink_200_500_200_2000(void) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t phase = 0;
    uint32_t now = timer2_get_tick();
 8001752:	f7ff fb73 	bl	8000e3c <timer2_get_tick>
 8001756:	6078      	str	r0, [r7, #4]

    if (now < last_tick) {
 8001758:	4b31      	ldr	r3, [pc, #196]	; (8001820 <led_stt_blink_200_500_200_2000+0xd4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	429a      	cmp	r2, r3
 8001760:	d205      	bcs.n	800176e <led_stt_blink_200_500_200_2000+0x22>
        last_tick = now;
 8001762:	4a2f      	ldr	r2, [pc, #188]	; (8001820 <led_stt_blink_200_500_200_2000+0xd4>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6013      	str	r3, [r2, #0]
        phase = 0;
 8001768:	4b2e      	ldr	r3, [pc, #184]	; (8001824 <led_stt_blink_200_500_200_2000+0xd8>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
    }

    switch (phase) {
 800176e:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <led_stt_blink_200_500_200_2000+0xd8>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d84f      	bhi.n	8001816 <led_stt_blink_200_500_200_2000+0xca>
 8001776:	a201      	add	r2, pc, #4	; (adr r2, 800177c <led_stt_blink_200_500_200_2000+0x30>)
 8001778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177c:	0800178d 	.word	0x0800178d
 8001780:	080017ab 	.word	0x080017ab
 8001784:	080017cb 	.word	0x080017cb
 8001788:	080017e9 	.word	0x080017e9
        case 0:
            led_stt_on();
 800178c:	f7ff facc 	bl	8000d28 <led_stt_on>
            if (now - last_tick >= 200) {
 8001790:	4b23      	ldr	r3, [pc, #140]	; (8001820 <led_stt_blink_200_500_200_2000+0xd4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2bc7      	cmp	r3, #199	; 0xc7
 800179a:	d935      	bls.n	8001808 <led_stt_blink_200_500_200_2000+0xbc>
                last_tick = now;
 800179c:	4a20      	ldr	r2, [pc, #128]	; (8001820 <led_stt_blink_200_500_200_2000+0xd4>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
                phase = 1;
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <led_stt_blink_200_500_200_2000+0xd8>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80017a8:	e02e      	b.n	8001808 <led_stt_blink_200_500_200_2000+0xbc>
        case 1:
            led_stt_off();
 80017aa:	f7ff fac7 	bl	8000d3c <led_stt_off>
            if (now - last_tick >= 500) {
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <led_stt_blink_200_500_200_2000+0xd4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017ba:	d327      	bcc.n	800180c <led_stt_blink_200_500_200_2000+0xc0>
                last_tick = now;
 80017bc:	4a18      	ldr	r2, [pc, #96]	; (8001820 <led_stt_blink_200_500_200_2000+0xd4>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
                phase = 2;
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <led_stt_blink_200_500_200_2000+0xd8>)
 80017c4:	2202      	movs	r2, #2
 80017c6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80017c8:	e020      	b.n	800180c <led_stt_blink_200_500_200_2000+0xc0>
        case 2:
            led_stt_on();
 80017ca:	f7ff faad 	bl	8000d28 <led_stt_on>
            if (now - last_tick >= 200) {
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <led_stt_blink_200_500_200_2000+0xd4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2bc7      	cmp	r3, #199	; 0xc7
 80017d8:	d91a      	bls.n	8001810 <led_stt_blink_200_500_200_2000+0xc4>
                last_tick = now;
 80017da:	4a11      	ldr	r2, [pc, #68]	; (8001820 <led_stt_blink_200_500_200_2000+0xd4>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6013      	str	r3, [r2, #0]
                phase = 3;
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <led_stt_blink_200_500_200_2000+0xd8>)
 80017e2:	2203      	movs	r2, #3
 80017e4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80017e6:	e013      	b.n	8001810 <led_stt_blink_200_500_200_2000+0xc4>
        case 3:
            led_stt_off();
 80017e8:	f7ff faa8 	bl	8000d3c <led_stt_off>
            if (now - last_tick >= 2000) {
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <led_stt_blink_200_500_200_2000+0xd4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017f8:	d30c      	bcc.n	8001814 <led_stt_blink_200_500_200_2000+0xc8>
                last_tick = now;
 80017fa:	4a09      	ldr	r2, [pc, #36]	; (8001820 <led_stt_blink_200_500_200_2000+0xd4>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6013      	str	r3, [r2, #0]
                phase = 0;
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <led_stt_blink_200_500_200_2000+0xd8>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001806:	e005      	b.n	8001814 <led_stt_blink_200_500_200_2000+0xc8>
            break;
 8001808:	bf00      	nop
 800180a:	e004      	b.n	8001816 <led_stt_blink_200_500_200_2000+0xca>
            break;
 800180c:	bf00      	nop
 800180e:	e002      	b.n	8001816 <led_stt_blink_200_500_200_2000+0xca>
            break;
 8001810:	bf00      	nop
 8001812:	e000      	b.n	8001816 <led_stt_blink_200_500_200_2000+0xca>
            break;
 8001814:	bf00      	nop
    }
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000558 	.word	0x20000558
 8001824:	2000055c 	.word	0x2000055c

08001828 <led_update_by_device_state>:

void led_update_by_device_state(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
    switch (current_device_state) {
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <led_update_by_device_state+0x78>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b05      	cmp	r3, #5
 8001832:	d82d      	bhi.n	8001890 <led_update_by_device_state+0x68>
 8001834:	a201      	add	r2, pc, #4	; (adr r2, 800183c <led_update_by_device_state+0x14>)
 8001836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183a:	bf00      	nop
 800183c:	08001855 	.word	0x08001855
 8001840:	0800185f 	.word	0x0800185f
 8001844:	08001869 	.word	0x08001869
 8001848:	08001873 	.word	0x08001873
 800184c:	0800187d 	.word	0x0800187d
 8001850:	08001887 	.word	0x08001887
        case DEVICE_STATE_BOOTING_GSM:
            led_4g_blink_200_200();
 8001854:	f7ff fe9c 	bl	8001590 <led_4g_blink_200_200>
            led_stt_off();
 8001858:	f7ff fa70 	bl	8000d3c <led_stt_off>
            break;
 800185c:	e01d      	b.n	800189a <led_update_by_device_state+0x72>

        case DEVICE_STATE_GSM_READY:
            led_4g_on();
 800185e:	f7ff fa4b 	bl	8000cf8 <led_4g_on>
            led_stt_off();
 8001862:	f7ff fa6b 	bl	8000d3c <led_stt_off>
            break;
 8001866:	e018      	b.n	800189a <led_update_by_device_state+0x72>

        case DEVICE_STATE_GSM_ERROR:
            led_4g_blink_200_500_200_2000();
 8001868:	f7ff feca 	bl	8001600 <led_4g_blink_200_500_200_2000>
            led_stt_off();
 800186c:	f7ff fa66 	bl	8000d3c <led_stt_off>
            break;
 8001870:	e013      	b.n	800189a <led_update_by_device_state+0x72>

        case DEVICE_STATE_BOOTING_DEVICE:
            led_stt_blink_200_200();
 8001872:	f7ff ff33 	bl	80016dc <led_stt_blink_200_200>
            led_4g_on();
 8001876:	f7ff fa3f 	bl	8000cf8 <led_4g_on>
            break;
 800187a:	e00e      	b.n	800189a <led_update_by_device_state+0x72>

        case DEVICE_STATE_DEVICE_READY:
            led_stt_on();
 800187c:	f7ff fa54 	bl	8000d28 <led_stt_on>
            led_4g_on();
 8001880:	f7ff fa3a 	bl	8000cf8 <led_4g_on>
            break;
 8001884:	e009      	b.n	800189a <led_update_by_device_state+0x72>

        case DEVICE_STATE_DEVICE_ERROR:
            led_stt_blink_200_500_200_2000();
 8001886:	f7ff ff61 	bl	800174c <led_stt_blink_200_500_200_2000>
            led_4g_on();
 800188a:	f7ff fa35 	bl	8000cf8 <led_4g_on>
            break;
 800188e:	e004      	b.n	800189a <led_update_by_device_state+0x72>
        default:
            led_4g_off();
 8001890:	f7ff fa3e 	bl	8000d10 <led_4g_off>
            led_stt_off();
 8001894:	f7ff fa52 	bl	8000d3c <led_stt_off>
            break;
 8001898:	bf00      	nop
    }
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000537 	.word	0x20000537

080018a4 <led_stt_switch_control>:

uint8_t led_stt_switch_read_state(void) {
    return (switch_state == swich_on) ? 1 : 0;
}

void led_stt_switch_control(void) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
    if (switch_state == swich_on) {
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <led_stt_switch_control+0x1c>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d102      	bne.n	80018b6 <led_stt_switch_control+0x12>
        led_stt_switch_on();
 80018b0:	f7ff fa4e 	bl	8000d50 <led_stt_switch_on>
    } else {
        led_stt_switch_off();
    }
 80018b4:	e001      	b.n	80018ba <led_stt_switch_control+0x16>
        led_stt_switch_off();
 80018b6:	f7ff fa55 	bl	8000d64 <led_stt_switch_off>
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000538 	.word	0x20000538

080018c4 <mqtt_incoming_publish_cb>:
static char last_topic[128] = {0};
static int mqtt_phase = 0; // 0: xác nhận, 1: chuyển sang topic chính

static void
mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b0a6      	sub	sp, #152	; 0x98
 80018c8:	af02      	add	r7, sp, #8
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
    snprintf(last_topic, sizeof(last_topic), "%s", topic);
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <mqtt_incoming_publish_cb+0x3c>)
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	480b      	ldr	r0, [pc, #44]	; (8001904 <mqtt_incoming_publish_cb+0x40>)
 80018d8:	f012 fbf6 	bl	80140c8 <sniprintf>
    char log_buf[128];
    snprintf(log_buf, sizeof(log_buf), "Incoming publish: topic %s, len %d", topic, (int)tot_len);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f107 0010 	add.w	r0, r7, #16
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4a08      	ldr	r2, [pc, #32]	; (8001908 <mqtt_incoming_publish_cb+0x44>)
 80018e8:	2180      	movs	r1, #128	; 0x80
 80018ea:	f012 fbed 	bl	80140c8 <sniprintf>
    uart_log(log_buf);
 80018ee:	f107 0310 	add.w	r3, r7, #16
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fb6e 	bl	8000fd4 <uart_log>
}
 80018f8:	bf00      	nop
 80018fa:	3790      	adds	r7, #144	; 0x90
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	08014b48 	.word	0x08014b48
 8001904:	20000564 	.word	0x20000564
 8001908:	08014b4c 	.word	0x08014b4c

0800190c <mqtt_incoming_data_cb>:

static void
mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b08d      	sub	sp, #52	; 0x34
 8001910:	af04      	add	r7, sp, #16
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	4611      	mov	r1, r2
 8001918:	461a      	mov	r2, r3
 800191a:	460b      	mov	r3, r1
 800191c:	80fb      	strh	r3, [r7, #6]
 800191e:	4613      	mov	r3, r2
 8001920:	717b      	strb	r3, [r7, #5]
    uart_log("Received data:");
 8001922:	4834      	ldr	r0, [pc, #208]	; (80019f4 <mqtt_incoming_data_cb+0xe8>)
 8001924:	f7ff fb56 	bl	8000fd4 <uart_log>
    uart_log((const char *)data);
 8001928:	68b8      	ldr	r0, [r7, #8]
 800192a:	f7ff fb53 	bl	8000fd4 <uart_log>

    if (mqtt_phase == 0 && strcmp(last_topic, "start/device/cmd") == 0) {
 800192e:	4b32      	ldr	r3, [pc, #200]	; (80019f8 <mqtt_incoming_data_cb+0xec>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d13d      	bne.n	80019b2 <mqtt_incoming_data_cb+0xa6>
 8001936:	4931      	ldr	r1, [pc, #196]	; (80019fc <mqtt_incoming_data_cb+0xf0>)
 8001938:	4831      	ldr	r0, [pc, #196]	; (8001a00 <mqtt_incoming_data_cb+0xf4>)
 800193a:	f7fe fc49 	bl	80001d0 <strcmp>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d136      	bne.n	80019b2 <mqtt_incoming_data_cb+0xa6>
        // Nhận xác nhận kết nối, chuyển sang phase 1
        uart_log("Received connect confirm, switching to main topics.");
 8001944:	482f      	ldr	r0, [pc, #188]	; (8001a04 <mqtt_incoming_data_cb+0xf8>)
 8001946:	f7ff fb45 	bl	8000fd4 <uart_log>
        // Hủy subscribe topic cũ, subscribe topic mới
        mqtt_sub_unsub(mqtt_client, "start/device/cmd", 0, NULL, NULL, 0); // Unsub
 800194a:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <mqtt_incoming_data_cb+0xfc>)
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	2300      	movs	r3, #0
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	2300      	movs	r3, #0
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2300      	movs	r3, #0
 8001958:	2200      	movs	r2, #0
 800195a:	4928      	ldr	r1, [pc, #160]	; (80019fc <mqtt_incoming_data_cb+0xf0>)
 800195c:	f001 fe9a 	bl	8003694 <mqtt_sub_unsub>
        mqtt_sub_unsub(mqtt_client, "device/switch1/cmd", 0, NULL, NULL, 1); // Sub
 8001960:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <mqtt_incoming_data_cb+0xfc>)
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	2301      	movs	r3, #1
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	2300      	movs	r3, #0
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2300      	movs	r3, #0
 800196e:	2200      	movs	r2, #0
 8001970:	4926      	ldr	r1, [pc, #152]	; (8001a0c <mqtt_incoming_data_cb+0x100>)
 8001972:	f001 fe8f 	bl	8003694 <mqtt_sub_unsub>
        // Gửi trạng thái lên topic mới
        const char *topic = "device/switch1/status";
 8001976:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <mqtt_incoming_data_cb+0x104>)
 8001978:	61fb      	str	r3, [r7, #28]
        const char *message = "{\"msg\": \"OFF\"}";
 800197a:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <mqtt_incoming_data_cb+0x108>)
 800197c:	61bb      	str	r3, [r7, #24]
        mqtt_publish(mqtt_client, topic, message, strlen(message), 0, 0, NULL, NULL);
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <mqtt_incoming_data_cb+0xfc>)
 8001980:	681c      	ldr	r4, [r3, #0]
 8001982:	69b8      	ldr	r0, [r7, #24]
 8001984:	f7fe fc2e 	bl	80001e4 <strlen>
 8001988:	4603      	mov	r3, r0
 800198a:	b29a      	uxth	r2, r3
 800198c:	2300      	movs	r3, #0
 800198e:	9303      	str	r3, [sp, #12]
 8001990:	2300      	movs	r3, #0
 8001992:	9302      	str	r3, [sp, #8]
 8001994:	2300      	movs	r3, #0
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	2300      	movs	r3, #0
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	4613      	mov	r3, r2
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	69f9      	ldr	r1, [r7, #28]
 80019a2:	4620      	mov	r0, r4
 80019a4:	f001 fd98 	bl	80034d8 <mqtt_publish>
        mqtt_phase = 1;
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <mqtt_incoming_data_cb+0xec>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	601a      	str	r2, [r3, #0]
    if (mqtt_phase == 0 && strcmp(last_topic, "start/device/cmd") == 0) {
 80019ae:	bf00      	nop
        int cmd_code = mqtt_parse_command(last_topic, data, len);
        if (cmd_code == 1 || cmd_code == 2) {
            mqtt_handle_command_and_respond("device/switch1/status", cmd_code);
        }
    }
}
 80019b0:	e01b      	b.n	80019ea <mqtt_incoming_data_cb+0xde>
    } else if (mqtt_phase == 1 && strcmp(last_topic, "device/switch1/cmd") == 0) {
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <mqtt_incoming_data_cb+0xec>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d117      	bne.n	80019ea <mqtt_incoming_data_cb+0xde>
 80019ba:	4914      	ldr	r1, [pc, #80]	; (8001a0c <mqtt_incoming_data_cb+0x100>)
 80019bc:	4810      	ldr	r0, [pc, #64]	; (8001a00 <mqtt_incoming_data_cb+0xf4>)
 80019be:	f7fe fc07 	bl	80001d0 <strcmp>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d110      	bne.n	80019ea <mqtt_incoming_data_cb+0xde>
        int cmd_code = mqtt_parse_command(last_topic, data, len);
 80019c8:	88fb      	ldrh	r3, [r7, #6]
 80019ca:	461a      	mov	r2, r3
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	480c      	ldr	r0, [pc, #48]	; (8001a00 <mqtt_incoming_data_cb+0xf4>)
 80019d0:	f000 f914 	bl	8001bfc <mqtt_parse_command>
 80019d4:	6178      	str	r0, [r7, #20]
        if (cmd_code == 1 || cmd_code == 2) {
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d002      	beq.n	80019e2 <mqtt_incoming_data_cb+0xd6>
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d103      	bne.n	80019ea <mqtt_incoming_data_cb+0xde>
            mqtt_handle_command_and_respond("device/switch1/status", cmd_code);
 80019e2:	6979      	ldr	r1, [r7, #20]
 80019e4:	480a      	ldr	r0, [pc, #40]	; (8001a10 <mqtt_incoming_data_cb+0x104>)
 80019e6:	f000 f8b3 	bl	8001b50 <mqtt_handle_command_and_respond>
}
 80019ea:	bf00      	nop
 80019ec:	3724      	adds	r7, #36	; 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd90      	pop	{r4, r7, pc}
 80019f2:	bf00      	nop
 80019f4:	08014b70 	.word	0x08014b70
 80019f8:	200005e4 	.word	0x200005e4
 80019fc:	08014b80 	.word	0x08014b80
 8001a00:	20000564 	.word	0x20000564
 8001a04:	08014b94 	.word	0x08014b94
 8001a08:	20000560 	.word	0x20000560
 8001a0c:	08014bc8 	.word	0x08014bc8
 8001a10:	08014bdc 	.word	0x08014bdc
 8001a14:	08014bf4 	.word	0x08014bf4

08001a18 <mqtt_connection_cb>:

static void
mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	; 0x30
 8001a1c:	af04      	add	r7, sp, #16
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	4613      	mov	r3, r2
 8001a24:	80fb      	strh	r3, [r7, #6]
    const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	61fb      	str	r3, [r7, #28]

    if (status == MQTT_CONNECT_ACCEPTED) {
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d12a      	bne.n	8001a86 <mqtt_connection_cb+0x6e>
        uart_log("MQTT connection accepted!");
 8001a30:	481a      	ldr	r0, [pc, #104]	; (8001a9c <mqtt_connection_cb+0x84>)
 8001a32:	f7ff facf 	bl	8000fd4 <uart_log>
        current_device_state = DEVICE_STATE_DEVICE_READY;
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <mqtt_connection_cb+0x88>)
 8001a38:	2204      	movs	r2, #4
 8001a3a:	701a      	strb	r2, [r3, #0]
        mqtt_phase = 0;
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <mqtt_connection_cb+0x8c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
        // Đăng ký nhận lệnh xác nhận kết nối
        mqtt_sub_unsub(client,
 8001a42:	2301      	movs	r3, #1
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4916      	ldr	r1, [pc, #88]	; (8001aa8 <mqtt_connection_cb+0x90>)
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f001 fe1f 	bl	8003694 <mqtt_sub_unsub>
                "start/device/cmd", 0,
                NULL, LWIP_CONST_CAST(void*, client_info),
                1);
        // Gửi xác nhận kết nối lên topic mặc định
        const char *topic = "start/device/status";
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <mqtt_connection_cb+0x94>)
 8001a58:	61bb      	str	r3, [r7, #24]
        const char *message = "{\"msg\": \"Connect broker\"}";
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <mqtt_connection_cb+0x98>)
 8001a5c:	617b      	str	r3, [r7, #20]
        mqtt_publish(client, topic, message, strlen(message), 0, 0, NULL, NULL);
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f7fe fbc0 	bl	80001e4 <strlen>
 8001a64:	4603      	mov	r3, r0
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9303      	str	r3, [sp, #12]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9302      	str	r3, [sp, #8]
 8001a70:	2300      	movs	r3, #0
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	2300      	movs	r3, #0
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	69b9      	ldr	r1, [r7, #24]
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f001 fd2a 	bl	80034d8 <mqtt_publish>
    } else {
        uart_log("MQTT connection failed!");
        current_device_state = DEVICE_STATE_DEVICE_ERROR;
    }
}
 8001a84:	e005      	b.n	8001a92 <mqtt_connection_cb+0x7a>
        uart_log("MQTT connection failed!");
 8001a86:	480b      	ldr	r0, [pc, #44]	; (8001ab4 <mqtt_connection_cb+0x9c>)
 8001a88:	f7ff faa4 	bl	8000fd4 <uart_log>
        current_device_state = DEVICE_STATE_DEVICE_ERROR;
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <mqtt_connection_cb+0x88>)
 8001a8e:	2205      	movs	r2, #5
 8001a90:	701a      	strb	r2, [r3, #0]
}
 8001a92:	bf00      	nop
 8001a94:	3720      	adds	r7, #32
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	08014c04 	.word	0x08014c04
 8001aa0:	20000537 	.word	0x20000537
 8001aa4:	200005e4 	.word	0x200005e4
 8001aa8:	08014b80 	.word	0x08014b80
 8001aac:	08014c20 	.word	0x08014c20
 8001ab0:	08014c34 	.word	0x08014c34
 8001ab4:	08014c50 	.word	0x08014c50

08001ab8 <mqtt_example_init>:

void
mqtt_example_init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af02      	add	r7, sp, #8
#if LWIP_TCP
  mqtt_client = mqtt_client_new();
 8001abe:	f001 fef7 	bl	80038b0 <mqtt_client_new>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <mqtt_example_init+0x3c>)
 8001ac6:	601a      	str	r2, [r3, #0]

  mqtt_set_inpub_callback(mqtt_client,
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <mqtt_example_init+0x3c>)
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <mqtt_example_init+0x40>)
 8001ace:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <mqtt_example_init+0x44>)
 8001ad0:	490b      	ldr	r1, [pc, #44]	; (8001b00 <mqtt_example_init+0x48>)
 8001ad2:	f001 fec3 	bl	800385c <mqtt_set_inpub_callback>
          mqtt_incoming_publish_cb,
          mqtt_incoming_data_cb,
          LWIP_CONST_CAST(void*, &mqtt_client_info));

  mqtt_client_connect(mqtt_client,
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <mqtt_example_init+0x3c>)
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <mqtt_example_init+0x40>)
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <mqtt_example_init+0x40>)
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <mqtt_example_init+0x4c>)
 8001ae4:	f240 725b 	movw	r2, #1883	; 0x75b
 8001ae8:	4907      	ldr	r1, [pc, #28]	; (8001b08 <mqtt_example_init+0x50>)
 8001aea:	f001 feeb 	bl	80038c4 <mqtt_client_connect>
          &mqtt_ip, MQTT_PORT,
          mqtt_connection_cb, LWIP_CONST_CAST(void*, &mqtt_client_info),
          &mqtt_client_info);
#endif
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000560 	.word	0x20000560
 8001af8:	08017a24 	.word	0x08017a24
 8001afc:	0800190d 	.word	0x0800190d
 8001b00:	080018c5 	.word	0x080018c5
 8001b04:	08001a19 	.word	0x08001a19
 8001b08:	20000000 	.word	0x20000000

08001b0c <handle_led_stt_switch>:
extern mqtt_client_t* mqtt_client;
extern device_state_t current_device_state;
extern swich_state_t switch_state;

// Hàm xử lý bật/tắt led_stt_switch dựa vào mã lệnh
void handle_led_stt_switch(int cmd_code) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
    if (cmd_code == 1) { // ON
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d106      	bne.n	8001b28 <handle_led_stt_switch+0x1c>
        switch_state = swich_on;
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <handle_led_stt_switch+0x38>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]
        uart_log("led_stt_switch: ON");
 8001b20:	4809      	ldr	r0, [pc, #36]	; (8001b48 <handle_led_stt_switch+0x3c>)
 8001b22:	f7ff fa57 	bl	8000fd4 <uart_log>
    } else if (cmd_code == 2) { // OFF
        switch_state = swich_off;
        uart_log("led_stt_switch: OFF");
    }
}
 8001b26:	e008      	b.n	8001b3a <handle_led_stt_switch+0x2e>
    } else if (cmd_code == 2) { // OFF
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d105      	bne.n	8001b3a <handle_led_stt_switch+0x2e>
        switch_state = swich_off;
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <handle_led_stt_switch+0x38>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
        uart_log("led_stt_switch: OFF");
 8001b34:	4805      	ldr	r0, [pc, #20]	; (8001b4c <handle_led_stt_switch+0x40>)
 8001b36:	f7ff fa4d 	bl	8000fd4 <uart_log>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000538 	.word	0x20000538
 8001b48:	08014c68 	.word	0x08014c68
 8001b4c:	08014c7c 	.word	0x08014c7c

08001b50 <mqtt_handle_command_and_respond>:

void mqtt_handle_command_and_respond(const char* topic, int cmd_code) {
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b0b6      	sub	sp, #216	; 0xd8
 8001b54:	af04      	add	r7, sp, #16
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
    char response_topic[64] = "device/switch1/status";
 8001b5a:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <mqtt_handle_command_and_respond+0x98>)
 8001b5c:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8001b60:	461d      	mov	r5, r3
 8001b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b66:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b6a:	6020      	str	r0, [r4, #0]
 8001b6c:	3404      	adds	r4, #4
 8001b6e:	8021      	strh	r1, [r4, #0]
 8001b70:	f107 039e 	add.w	r3, r7, #158	; 0x9e
 8001b74:	222a      	movs	r2, #42	; 0x2a
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f012 f99c 	bl	8013eb6 <memset>
    char response_msg[128];

    // Xử lý bật/tắt led_stt_switch
    handle_led_stt_switch(cmd_code);
 8001b7e:	6838      	ldr	r0, [r7, #0]
 8001b80:	f7ff ffc4 	bl	8001b0c <handle_led_stt_switch>

    // Gửi trạng thái thiết bị lên MQTT với chuỗi trạng thái từ parser
    snprintf(response_msg, sizeof(response_msg),
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <mqtt_handle_command_and_respond+0x9c>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 f8cb 	bl	8001d24 <get_switch_state_string>
 8001b8e:	4604      	mov	r4, r0
 8001b90:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <mqtt_handle_command_and_respond+0xa0>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 f88b 	bl	8001cb0 <get_device_state_string>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f107 0008 	add.w	r0, r7, #8
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	4623      	mov	r3, r4
 8001ba4:	4a13      	ldr	r2, [pc, #76]	; (8001bf4 <mqtt_handle_command_and_respond+0xa4>)
 8001ba6:	2180      	movs	r1, #128	; 0x80
 8001ba8:	f012 fa8e 	bl	80140c8 <sniprintf>
             "{\"status\":\"%s\",\"state\":\"%s\"}",
             get_switch_state_string(switch_state),
             get_device_state_string(current_device_state));

    mqtt_publish(mqtt_client, response_topic, response_msg, strlen(response_msg), 0, 0, NULL, NULL);
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <mqtt_handle_command_and_respond+0xa8>)
 8001bae:	681c      	ldr	r4, [r3, #0]
 8001bb0:	f107 0308 	add.w	r3, r7, #8
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fb15 	bl	80001e4 <strlen>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b298      	uxth	r0, r3
 8001bbe:	f107 0208 	add.w	r2, r7, #8
 8001bc2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	9303      	str	r3, [sp, #12]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	9302      	str	r3, [sp, #8]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f001 fc7d 	bl	80034d8 <mqtt_publish>
 8001bde:	bf00      	nop
 8001be0:	37c8      	adds	r7, #200	; 0xc8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bdb0      	pop	{r4, r5, r7, pc}
 8001be6:	bf00      	nop
 8001be8:	08014cb0 	.word	0x08014cb0
 8001bec:	20000538 	.word	0x20000538
 8001bf0:	20000537 	.word	0x20000537
 8001bf4:	08014c90 	.word	0x08014c90
 8001bf8:	20000560 	.word	0x20000560

08001bfc <mqtt_parse_command>:
#include <stdio.h>
#include "hardware/uart.h"
#include "main.h"

// Trả về 1 nếu là ON, 2 nếu là OFF, 0 nếu không hợp lệ
int mqtt_parse_command(const char* topic, const uint8_t* data, uint16_t len) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	4613      	mov	r3, r2
 8001c08:	80fb      	strh	r3, [r7, #6]
    if (topic == NULL || data == NULL || len == 0) return 0;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <mqtt_parse_command+0x20>
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <mqtt_parse_command+0x20>
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <mqtt_parse_command+0x24>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e039      	b.n	8001c94 <mqtt_parse_command+0x98>

    // Tìm chuỗi "msg"
    const char* msg_ptr = strstr((const char*)data, "\"msg\"");
 8001c20:	491e      	ldr	r1, [pc, #120]	; (8001c9c <mqtt_parse_command+0xa0>)
 8001c22:	68b8      	ldr	r0, [r7, #8]
 8001c24:	f012 fafc 	bl	8014220 <strstr>
 8001c28:	61b8      	str	r0, [r7, #24]
    if (msg_ptr) {
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d030      	beq.n	8001c92 <mqtt_parse_command+0x96>
        const char* colon = strchr(msg_ptr, ':');
 8001c30:	213a      	movs	r1, #58	; 0x3a
 8001c32:	69b8      	ldr	r0, [r7, #24]
 8001c34:	f012 fabf 	bl	80141b6 <strchr>
 8001c38:	6178      	str	r0, [r7, #20]
        if (colon) {
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d028      	beq.n	8001c92 <mqtt_parse_command+0x96>
            const char* value = colon + 1;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	3301      	adds	r3, #1
 8001c44:	61fb      	str	r3, [r7, #28]
            while (*value == ' ' || *value == '\"') value++;
 8001c46:	e002      	b.n	8001c4e <mqtt_parse_command+0x52>
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b20      	cmp	r3, #32
 8001c54:	d0f8      	beq.n	8001c48 <mqtt_parse_command+0x4c>
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b22      	cmp	r3, #34	; 0x22
 8001c5c:	d0f4      	beq.n	8001c48 <mqtt_parse_command+0x4c>
            if (strncmp(value, "ON", 2) == 0) {
 8001c5e:	2202      	movs	r2, #2
 8001c60:	490f      	ldr	r1, [pc, #60]	; (8001ca0 <mqtt_parse_command+0xa4>)
 8001c62:	69f8      	ldr	r0, [r7, #28]
 8001c64:	f012 fab5 	bl	80141d2 <strncmp>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d104      	bne.n	8001c78 <mqtt_parse_command+0x7c>
                uart_log("MQTT CMD: ON");
 8001c6e:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <mqtt_parse_command+0xa8>)
 8001c70:	f7ff f9b0 	bl	8000fd4 <uart_log>
                return 1;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e00d      	b.n	8001c94 <mqtt_parse_command+0x98>
            }
            if (strncmp(value, "OFF", 3) == 0) {
 8001c78:	2203      	movs	r2, #3
 8001c7a:	490b      	ldr	r1, [pc, #44]	; (8001ca8 <mqtt_parse_command+0xac>)
 8001c7c:	69f8      	ldr	r0, [r7, #28]
 8001c7e:	f012 faa8 	bl	80141d2 <strncmp>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d104      	bne.n	8001c92 <mqtt_parse_command+0x96>
                uart_log("MQTT CMD: OFF");
 8001c88:	4808      	ldr	r0, [pc, #32]	; (8001cac <mqtt_parse_command+0xb0>)
 8001c8a:	f7ff f9a3 	bl	8000fd4 <uart_log>
                return 2;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e000      	b.n	8001c94 <mqtt_parse_command+0x98>
            }
        }
    }
    return 0;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	08014cf0 	.word	0x08014cf0
 8001ca0:	08014cf8 	.word	0x08014cf8
 8001ca4:	08014cfc 	.word	0x08014cfc
 8001ca8:	08014d0c 	.word	0x08014d0c
 8001cac:	08014d10 	.word	0x08014d10

08001cb0 <get_device_state_string>:

const char* get_device_state_string(device_state_t state) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d81b      	bhi.n	8001cf8 <get_device_state_string+0x48>
 8001cc0:	a201      	add	r2, pc, #4	; (adr r2, 8001cc8 <get_device_state_string+0x18>)
 8001cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc6:	bf00      	nop
 8001cc8:	08001ce1 	.word	0x08001ce1
 8001ccc:	08001ce5 	.word	0x08001ce5
 8001cd0:	08001ce9 	.word	0x08001ce9
 8001cd4:	08001ced 	.word	0x08001ced
 8001cd8:	08001cf1 	.word	0x08001cf1
 8001cdc:	08001cf5 	.word	0x08001cf5
        case DEVICE_STATE_BOOTING_GSM:     return "BOOTING_GSM";
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <get_device_state_string+0x58>)
 8001ce2:	e00a      	b.n	8001cfa <get_device_state_string+0x4a>
        case DEVICE_STATE_GSM_READY:       return "GSM_READY";
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <get_device_state_string+0x5c>)
 8001ce6:	e008      	b.n	8001cfa <get_device_state_string+0x4a>
        case DEVICE_STATE_GSM_ERROR:       return "GSM_ERROR";
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <get_device_state_string+0x60>)
 8001cea:	e006      	b.n	8001cfa <get_device_state_string+0x4a>
        case DEVICE_STATE_BOOTING_DEVICE:  return "BOOTING_DEVICE";
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <get_device_state_string+0x64>)
 8001cee:	e004      	b.n	8001cfa <get_device_state_string+0x4a>
        case DEVICE_STATE_DEVICE_READY:    return "DEVICE_READY";
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <get_device_state_string+0x68>)
 8001cf2:	e002      	b.n	8001cfa <get_device_state_string+0x4a>
        case DEVICE_STATE_DEVICE_ERROR:    return "DEVICE_ERROR";
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <get_device_state_string+0x6c>)
 8001cf6:	e000      	b.n	8001cfa <get_device_state_string+0x4a>
        default:                           return "UNKNOWN";
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <get_device_state_string+0x70>)
    }
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	08014d20 	.word	0x08014d20
 8001d0c:	08014d2c 	.word	0x08014d2c
 8001d10:	08014d38 	.word	0x08014d38
 8001d14:	08014d44 	.word	0x08014d44
 8001d18:	08014d54 	.word	0x08014d54
 8001d1c:	08014d64 	.word	0x08014d64
 8001d20:	08014d74 	.word	0x08014d74

08001d24 <get_switch_state_string>:

const char* get_switch_state_string(swich_state_t state) {
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <get_switch_state_string+0x18>
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d103      	bne.n	8001d40 <get_switch_state_string+0x1c>
        case swich_on:  return "ON";
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <get_switch_state_string+0x2c>)
 8001d3a:	e002      	b.n	8001d42 <get_switch_state_string+0x1e>
        case swich_off: return "OFF";
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <get_switch_state_string+0x30>)
 8001d3e:	e000      	b.n	8001d42 <get_switch_state_string+0x1e>
        default:        return "UNKNOWN";
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <get_switch_state_string+0x34>)
    }
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	08014cf8 	.word	0x08014cf8
 8001d54:	08014d0c 	.word	0x08014d0c
 8001d58:	08014d74 	.word	0x08014d74

08001d5c <sys_init>:
#include "lwip/opt.h"
#include "lwip/sys.h"
#include "lwip/err.h"
#include "arch/sys_arch.h"

void sys_init(void) {}
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <sys_mutex_new>:

err_t sys_mutex_new(sys_mutex_t *mutex) { *mutex = 0; return ERR_OK; }
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex) { (void)mutex; }
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <sys_mutex_unlock>:
void sys_mutex_unlock(sys_mutex_t *mutex) { (void)mutex; }
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <sys_mbox_new>:
err_t sys_sem_new(sys_sem_t *sem, u8_t count) { *sem = 0; (void)count; return ERR_OK; }
void sys_sem_signal(sys_sem_t *sem) { (void)sem; }
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout) { (void)sem; (void)timeout; return 0; }
void sys_sem_free(sys_sem_t *sem) { (void)sem; }

err_t sys_mbox_new(sys_mbox_t *mbox, int size) { *mbox = 0; (void)size; return ERR_OK; }
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <sys_mbox_trypost>:
void sys_mbox_post(sys_mbox_t *mbox, void *msg) { (void)mbox; (void)msg; }
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg) { (void)mbox; (void)msg; return ERR_OK; }
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <sys_arch_mbox_fetch>:
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout) { (void)mbox; (void)msg; (void)timeout; return 0; }
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	2300      	movs	r3, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <sys_thread_new>:
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg) { (void)mbox; (void)msg; return 0; }
void sys_mbox_free(sys_mbox_t *mbox) { (void)mbox; }

sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread, void *arg, int stacksize, int prio) { (void)name; (void)thread; (void)arg; (void)stacksize; (void)prio; return 0; }
 8001dfe:	b480      	push	{r7}
 8001e00:	b085      	sub	sp, #20
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <lwip_win32_platform_diag>:
    (void)msg;
    while (1) { }
}

// Diagnostic output for LwIP (optional)
void lwip_win32_platform_diag(const char *msg) {
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
    // Optionally send to UART or ignore
    (void)msg;
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <sys_now>:
void sys_check_core_locking(void) {
    // No-op for baremetal
}

// Returns system time in ms (replace with your own timer if needed)
uint32_t sys_now(void) {
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
    // TODO: Thay thế bằng hàm trả về thời gian thực tế nếu bạn có timer
    static uint32_t fake_tick = 0;
    return fake_tick++;
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <sys_now+0x18>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	4903      	ldr	r1, [pc, #12]	; (8001e48 <sys_now+0x18>)
 8001e3c:	600a      	str	r2, [r1, #0]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	200005e8 	.word	0x200005e8

08001e4c <sys_jiffies>:

// Returns system time in ticks (can be same as sys_now)
uint32_t sys_jiffies(void) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
    return sys_now();
 8001e50:	f7ff ffee 	bl	8001e30 <sys_now>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <lwip_port_rand>:

// Returns a random 32-bit value (replace with your own RNG if needed)
uint32_t lwip_port_rand(void) {
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
    static uint32_t seed = 123456789;
    seed = seed * 1103515245 + 12345;
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <lwip_port_rand+0x28>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <lwip_port_rand+0x2c>)
 8001e66:	fb02 f303 	mul.w	r3, r2, r3
 8001e6a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001e6e:	3339      	adds	r3, #57	; 0x39
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <lwip_port_rand+0x28>)
 8001e72:	6013      	str	r3, [r2, #0]
    return seed;
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <lwip_port_rand+0x28>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000004 	.word	0x20000004
 8001e88:	41c64e6d 	.word	0x41c64e6d

08001e8c <sys_arch_protect>:

// --- LwIP baremetal porting functions ---

// sys_arch_protect/sys_arch_unprotect: No real protection needed for single-thread
unsigned long sys_arch_protect(void) {
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
    return 0;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <sys_arch_unprotect>:
void sys_arch_unprotect(unsigned long pval) {
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
    (void)pval;
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <ppp_output_callback>:
volatile bool gsm_ppp_mode = false;

static struct netif ppp_netif;
static bool ppp_connected = false;

static u32_t ppp_output_callback(ppp_pcb *pcb, const void *data, u32_t len, void *ctx) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
    (void)pcb;
    (void)ctx;
    uart1_send_raw((const uint8_t*)data, len);
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	68b8      	ldr	r0, [r7, #8]
 8001ec2:	f7ff f8bf 	bl	8001044 <uart1_send_raw>
    return len;
 8001ec6:	687b      	ldr	r3, [r7, #4]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <ppp_status_cb>:

static void ppp_status_cb(ppp_pcb *pcb, int err_code, void *ctx) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b09e      	sub	sp, #120	; 0x78
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
    (void)pcb;
    (void)ctx;
    switch (err_code) {
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <ppp_status_cb+0x18>
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d044      	beq.n	8001f70 <ppp_status_cb+0xa0>
 8001ee6:	e050      	b.n	8001f8a <ppp_status_cb+0xba>
        case PPPERR_NONE: {
            char log_buf[100];
            uart_log("PPP connected");
 8001ee8:	4830      	ldr	r0, [pc, #192]	; (8001fac <ppp_status_cb+0xdc>)
 8001eea:	f7ff f873 	bl	8000fd4 <uart_log>
            ppp_connected = true;
 8001eee:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <ppp_status_cb+0xe0>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
            gsm_ppp_mode = true;
 8001ef4:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <ppp_status_cb+0xe4>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
            ppp_connection_established = true;
 8001efa:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <ppp_status_cb+0xe8>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]

            sprintf(log_buf, "   IP address:  %s", ipaddr_ntoa(netif_ip4_addr(&ppp_netif)));
 8001f00:	482e      	ldr	r0, [pc, #184]	; (8001fbc <ppp_status_cb+0xec>)
 8001f02:	f002 fc7d 	bl	8004800 <ip4addr_ntoa>
 8001f06:	4602      	mov	r2, r0
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	492c      	ldr	r1, [pc, #176]	; (8001fc0 <ppp_status_cb+0xf0>)
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f011 fd94 	bl	8013a3c <siprintf>
            uart_log(log_buf);
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff f85b 	bl	8000fd4 <uart_log>
            sprintf(log_buf, "   Gateway:     %s", ipaddr_ntoa(netif_ip4_gw(&ppp_netif)));
 8001f1e:	4829      	ldr	r0, [pc, #164]	; (8001fc4 <ppp_status_cb+0xf4>)
 8001f20:	f002 fc6e 	bl	8004800 <ip4addr_ntoa>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4927      	ldr	r1, [pc, #156]	; (8001fc8 <ppp_status_cb+0xf8>)
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f011 fd85 	bl	8013a3c <siprintf>
            uart_log(log_buf);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff f84c 	bl	8000fd4 <uart_log>
            sprintf(log_buf, "   Netmask:     %s", ipaddr_ntoa(netif_ip4_netmask(&ppp_netif)));
 8001f3c:	4823      	ldr	r0, [pc, #140]	; (8001fcc <ppp_status_cb+0xfc>)
 8001f3e:	f002 fc5f 	bl	8004800 <ip4addr_ntoa>
 8001f42:	4602      	mov	r2, r0
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	4921      	ldr	r1, [pc, #132]	; (8001fd0 <ppp_status_cb+0x100>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f011 fd76 	bl	8013a3c <siprintf>
            uart_log(log_buf);
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff f83d 	bl	8000fd4 <uart_log>
            
            //uart_log("Waiting for PPP to stabilize...");
            delay_ms(2000);
 8001f5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f5e:	f7fe ff79 	bl	8000e54 <delay_ms>
            //uart_log("Testing Internet connection...");
            //test_tcp_connect_google();
            //uart_log("Internet connection test completed.");

            //uart_log("Initializing MQTT...");
            mqtt_example_init();
 8001f62:	f7ff fda9 	bl	8001ab8 <mqtt_example_init>
            uart_log("MQTT initialization completed.");
 8001f66:	481b      	ldr	r0, [pc, #108]	; (8001fd4 <ppp_status_cb+0x104>)
 8001f68:	f7ff f834 	bl	8000fd4 <uart_log>

            break;
 8001f6c:	bf00      	nop
 8001f6e:	e019      	b.n	8001fa4 <ppp_status_cb+0xd4>
        }
        case PPPERR_USER:
            uart_log("PPP connection terminated by user");
 8001f70:	4819      	ldr	r0, [pc, #100]	; (8001fd8 <ppp_status_cb+0x108>)
 8001f72:	f7ff f82f 	bl	8000fd4 <uart_log>
            ppp_connected = false;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <ppp_status_cb+0xe0>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
            gsm_ppp_mode = false;
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <ppp_status_cb+0xe4>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
            ppp_connection_established = false;
 8001f82:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <ppp_status_cb+0xe8>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
            break;
 8001f88:	e00c      	b.n	8001fa4 <ppp_status_cb+0xd4>
        default:
            uart_log("PPP connection error");
 8001f8a:	4814      	ldr	r0, [pc, #80]	; (8001fdc <ppp_status_cb+0x10c>)
 8001f8c:	f7ff f822 	bl	8000fd4 <uart_log>
            ppp_connected = false;
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <ppp_status_cb+0xe0>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
            gsm_ppp_mode = false;
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <ppp_status_cb+0xe4>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
            ppp_connection_established = false;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <ppp_status_cb+0xe8>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
            break;
 8001fa2:	bf00      	nop
    }
}
 8001fa4:	bf00      	nop
 8001fa6:	3778      	adds	r7, #120	; 0x78
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	08014d7c 	.word	0x08014d7c
 8001fb0:	20000628 	.word	0x20000628
 8001fb4:	200005f4 	.word	0x200005f4
 8001fb8:	200005ec 	.word	0x200005ec
 8001fbc:	200005fc 	.word	0x200005fc
 8001fc0:	08014d8c 	.word	0x08014d8c
 8001fc4:	20000604 	.word	0x20000604
 8001fc8:	08014da0 	.word	0x08014da0
 8001fcc:	20000600 	.word	0x20000600
 8001fd0:	08014db4 	.word	0x08014db4
 8001fd4:	08014dc8 	.word	0x08014dc8
 8001fd8:	08014de8 	.word	0x08014de8
 8001fdc:	08014e0c 	.word	0x08014e0c

08001fe0 <ppp_connection_init>:

void ppp_connection_init(void) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
    //uart_log("Initializing PPP connection...");

    tcpip_init(NULL, NULL);
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f000 f912 	bl	8002210 <tcpip_init>

    ppp = pppos_create(&ppp_netif, ppp_output_callback, ppp_status_cb, NULL);
 8001fec:	2300      	movs	r3, #0
 8001fee:	4a0e      	ldr	r2, [pc, #56]	; (8002028 <ppp_connection_init+0x48>)
 8001ff0:	490e      	ldr	r1, [pc, #56]	; (800202c <ppp_connection_init+0x4c>)
 8001ff2:	480f      	ldr	r0, [pc, #60]	; (8002030 <ppp_connection_init+0x50>)
 8001ff4:	f010 fa60 	bl	80124b8 <pppos_create>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <ppp_connection_init+0x54>)
 8001ffc:	601a      	str	r2, [r3, #0]
    if (ppp == NULL) {
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <ppp_connection_init+0x54>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d103      	bne.n	800200e <ppp_connection_init+0x2e>
        uart_log("Failed to create PPP control block");
 8002006:	480c      	ldr	r0, [pc, #48]	; (8002038 <ppp_connection_init+0x58>)
 8002008:	f7fe ffe4 	bl	8000fd4 <uart_log>
        return;
 800200c:	e00b      	b.n	8002026 <ppp_connection_init+0x46>
    }

    ppp_set_default(ppp);
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <ppp_connection_init+0x54>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	4618      	mov	r0, r3
 8002016:	f003 fc2d 	bl	8005874 <netif_set_default>
    ppp_connect(ppp, 0);
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <ppp_connection_init+0x54>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f00f ff17 	bl	8011e54 <ppp_connect>
}
 8002026:	bd80      	pop	{r7, pc}
 8002028:	08001ed1 	.word	0x08001ed1
 800202c:	08001eb1 	.word	0x08001eb1
 8002030:	200005f8 	.word	0x200005f8
 8002034:	200005f0 	.word	0x200005f0
 8002038:	08014e24 	.word	0x08014e24

0800203c <ppp_connection_poll>:

void ppp_connection_poll(void) {
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
    sys_check_timeouts();
 8002040:	f00b fa0a 	bl	800d458 <sys_check_timeouts>
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}

08002048 <tcpip_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8002052:	f00b fa37 	bl	800d4c4 <sys_timeouts_sleeptime>
 8002056:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205e:	d10b      	bne.n	8002078 <tcpip_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8002060:	4813      	ldr	r0, [pc, #76]	; (80020b0 <tcpip_mbox_fetch+0x68>)
 8002062:	f7ff fe9a 	bl	8001d9a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	6839      	ldr	r1, [r7, #0]
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff feba 	bl	8001de4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8002070:	480f      	ldr	r0, [pc, #60]	; (80020b0 <tcpip_mbox_fetch+0x68>)
 8002072:	f7ff fe88 	bl	8001d86 <sys_mutex_lock>
    return;
 8002076:	e018      	b.n	80020aa <tcpip_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d102      	bne.n	8002084 <tcpip_mbox_fetch+0x3c>
    sys_check_timeouts();
 800207e:	f00b f9eb 	bl	800d458 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8002082:	e7e6      	b.n	8002052 <tcpip_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8002084:	480a      	ldr	r0, [pc, #40]	; (80020b0 <tcpip_mbox_fetch+0x68>)
 8002086:	f7ff fe88 	bl	8001d9a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	6839      	ldr	r1, [r7, #0]
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff fea8 	bl	8001de4 <sys_arch_mbox_fetch>
 8002094:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8002096:	4806      	ldr	r0, [pc, #24]	; (80020b0 <tcpip_mbox_fetch+0x68>)
 8002098:	f7ff fe75 	bl	8001d86 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a2:	d102      	bne.n	80020aa <tcpip_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80020a4:	f00b f9d8 	bl	800d458 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80020a8:	e7d3      	b.n	8002052 <tcpip_mbox_fetch+0xa>
  }
}
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000878 	.word	0x20000878

080020b4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80020bc:	4812      	ldr	r0, [pc, #72]	; (8002108 <tcpip_thread+0x54>)
 80020be:	f7ff fe62 	bl	8001d86 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <tcpip_thread+0x58>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <tcpip_thread+0x58>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a10      	ldr	r2, [pc, #64]	; (8002110 <tcpip_thread+0x5c>)
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	4610      	mov	r0, r2
 80020d4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    tcpip_mbox_fetch(&tcpip_mbox, (void **)&msg);
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	4619      	mov	r1, r3
 80020dc:	480d      	ldr	r0, [pc, #52]	; (8002114 <tcpip_thread+0x60>)
 80020de:	f7ff ffb3 	bl	8002048 <tcpip_mbox_fetch>
    if (msg == NULL) {
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10a      	bne.n	80020fe <tcpip_thread+0x4a>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <tcpip_thread+0x64>)
 80020ea:	229a      	movs	r2, #154	; 0x9a
 80020ec:	490b      	ldr	r1, [pc, #44]	; (800211c <tcpip_thread+0x68>)
 80020ee:	480c      	ldr	r0, [pc, #48]	; (8002120 <tcpip_thread+0x6c>)
 80020f0:	f011 fcba 	bl	8013a68 <iprintf>
 80020f4:	2000      	movs	r0, #0
 80020f6:	f011 fdb9 	bl	8013c6c <fflush>
 80020fa:	f011 fcfe 	bl	8013afa <abort>
      continue;
    }
    tcpip_thread_handle_msg(msg);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4618      	mov	r0, r3
 8002102:	f000 f80f 	bl	8002124 <tcpip_thread_handle_msg>
    tcpip_mbox_fetch(&tcpip_mbox, (void **)&msg);
 8002106:	e7e6      	b.n	80020d6 <tcpip_thread+0x22>
 8002108:	20000878 	.word	0x20000878
 800210c:	2000062c 	.word	0x2000062c
 8002110:	20000630 	.word	0x20000630
 8002114:	20000634 	.word	0x20000634
 8002118:	08014e48 	.word	0x08014e48
 800211c:	08014e68 	.word	0x08014e68
 8002120:	08014e88 	.word	0x08014e88

08002124 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d018      	beq.n	8002166 <tcpip_thread_handle_msg+0x42>
 8002134:	2b02      	cmp	r3, #2
 8002136:	d021      	beq.n	800217c <tcpip_thread_handle_msg+0x58>
 8002138:	2b00      	cmp	r3, #0
 800213a:	d126      	bne.n	800218a <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6850      	ldr	r0, [r2, #4]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6892      	ldr	r2, [r2, #8]
 8002148:	4611      	mov	r1, r2
 800214a:	4798      	blx	r3
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d004      	beq.n	800215c <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4618      	mov	r0, r3
 8002158:	f003 ff70 	bl	800603c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	2004      	movs	r0, #4
 8002160:	f003 f996 	bl	8005490 <memp_free>
      break;
 8002164:	e01c      	b.n	80021a0 <tcpip_thread_handle_msg+0x7c>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6892      	ldr	r2, [r2, #8]
 800216e:	4610      	mov	r0, r2
 8002170:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	2003      	movs	r0, #3
 8002176:	f003 f98b 	bl	8005490 <memp_free>
      break;
 800217a:	e011      	b.n	80021a0 <tcpip_thread_handle_msg+0x7c>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6892      	ldr	r2, [r2, #8]
 8002184:	4610      	mov	r0, r2
 8002186:	4798      	blx	r3
      break;
 8002188:	e00a      	b.n	80021a0 <tcpip_thread_handle_msg+0x7c>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800218a:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <tcpip_thread_handle_msg+0x84>)
 800218c:	22dd      	movs	r2, #221	; 0xdd
 800218e:	4907      	ldr	r1, [pc, #28]	; (80021ac <tcpip_thread_handle_msg+0x88>)
 8002190:	4807      	ldr	r0, [pc, #28]	; (80021b0 <tcpip_thread_handle_msg+0x8c>)
 8002192:	f011 fc69 	bl	8013a68 <iprintf>
 8002196:	2000      	movs	r0, #0
 8002198:	f011 fd68 	bl	8013c6c <fflush>
 800219c:	f011 fcad 	bl	8013afa <abort>
      break;
  }
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	08014e48 	.word	0x08014e48
 80021ac:	08014e68 	.word	0x08014e68
 80021b0:	08014e88 	.word	0x08014e88

080021b4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80021be:	2003      	movs	r0, #3
 80021c0:	f003 f8f6 	bl	80053b0 <memp_malloc>
 80021c4:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <tcpip_try_callback+0x1e>
    return ERR_MEM;
 80021cc:	f04f 33ff 	mov.w	r3, #4294967295
 80021d0:	e017      	b.n	8002202 <tcpip_try_callback+0x4e>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80021e4:	68f9      	ldr	r1, [r7, #12]
 80021e6:	4809      	ldr	r0, [pc, #36]	; (800220c <tcpip_try_callback+0x58>)
 80021e8:	f7ff fdf0 	bl	8001dcc <sys_mbox_trypost>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <tcpip_try_callback+0x4c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80021f2:	68f9      	ldr	r1, [r7, #12]
 80021f4:	2003      	movs	r0, #3
 80021f6:	f003 f94b 	bl	8005490 <memp_free>
    return ERR_MEM;
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
 80021fe:	e000      	b.n	8002202 <tcpip_try_callback+0x4e>
  }
  return ERR_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000634 	.word	0x20000634

08002210 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af02      	add	r7, sp, #8
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  lwip_init();
 800221a:	f001 ff57 	bl	80040cc <lwip_init>

  tcpip_init_done = initfunc;
 800221e:	4a1b      	ldr	r2, [pc, #108]	; (800228c <tcpip_init+0x7c>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8002224:	4a1a      	ldr	r2, [pc, #104]	; (8002290 <tcpip_init+0x80>)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800222a:	2100      	movs	r1, #0
 800222c:	4819      	ldr	r0, [pc, #100]	; (8002294 <tcpip_init+0x84>)
 800222e:	f7ff fdbe 	bl	8001dae <sys_mbox_new>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00b      	beq.n	8002250 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8002238:	4b17      	ldr	r3, [pc, #92]	; (8002298 <tcpip_init+0x88>)
 800223a:	f240 229a 	movw	r2, #666	; 0x29a
 800223e:	4917      	ldr	r1, [pc, #92]	; (800229c <tcpip_init+0x8c>)
 8002240:	4817      	ldr	r0, [pc, #92]	; (80022a0 <tcpip_init+0x90>)
 8002242:	f011 fc11 	bl	8013a68 <iprintf>
 8002246:	2000      	movs	r0, #0
 8002248:	f011 fd10 	bl	8013c6c <fflush>
 800224c:	f011 fc55 	bl	8013afa <abort>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8002250:	4814      	ldr	r0, [pc, #80]	; (80022a4 <tcpip_init+0x94>)
 8002252:	f7ff fd8a 	bl	8001d6a <sys_mutex_new>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00b      	beq.n	8002274 <tcpip_init+0x64>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <tcpip_init+0x88>)
 800225e:	f240 229e 	movw	r2, #670	; 0x29e
 8002262:	4911      	ldr	r1, [pc, #68]	; (80022a8 <tcpip_init+0x98>)
 8002264:	480e      	ldr	r0, [pc, #56]	; (80022a0 <tcpip_init+0x90>)
 8002266:	f011 fbff 	bl	8013a68 <iprintf>
 800226a:	2000      	movs	r0, #0
 800226c:	f011 fcfe 	bl	8013c6c <fflush>
 8002270:	f011 fc43 	bl	8013afa <abort>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8002274:	2301      	movs	r3, #1
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	2300      	movs	r3, #0
 800227a:	2200      	movs	r2, #0
 800227c:	490b      	ldr	r1, [pc, #44]	; (80022ac <tcpip_init+0x9c>)
 800227e:	480c      	ldr	r0, [pc, #48]	; (80022b0 <tcpip_init+0xa0>)
 8002280:	f7ff fdbd 	bl	8001dfe <sys_thread_new>
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	2000062c 	.word	0x2000062c
 8002290:	20000630 	.word	0x20000630
 8002294:	20000634 	.word	0x20000634
 8002298:	08014e48 	.word	0x08014e48
 800229c:	08014eb0 	.word	0x08014eb0
 80022a0:	08014e88 	.word	0x08014e88
 80022a4:	20000878 	.word	0x20000878
 80022a8:	08014ed4 	.word	0x08014ed4
 80022ac:	080020b5 	.word	0x080020b5
 80022b0:	08014ef8 	.word	0x08014ef8

080022b4 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	88db      	ldrh	r3, [r3, #6]
 80022c0:	3301      	adds	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	88db      	ldrh	r3, [r3, #6]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	88db      	ldrh	r3, [r3, #6]
 80022d4:	3301      	adds	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	88db      	ldrh	r3, [r3, #6]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	711a      	strb	r2, [r3, #4]
  rb->put++;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	3301      	adds	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	2bff      	cmp	r3, #255	; 0xff
 8002318:	d902      	bls.n	8002320 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	801a      	strh	r2, [r3, #0]
  }
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	885b      	ldrh	r3, [r3, #2]
 8002338:	461a      	mov	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	3304      	adds	r3, #4
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	2bff      	cmp	r3, #255	; 0xff
 800235c:	d90a      	bls.n	8002374 <mqtt_ringbuf_advance_get_idx+0x28>
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <mqtt_ringbuf_advance_get_idx+0x54>)
 8002360:	22cb      	movs	r2, #203	; 0xcb
 8002362:	4910      	ldr	r1, [pc, #64]	; (80023a4 <mqtt_ringbuf_advance_get_idx+0x58>)
 8002364:	4810      	ldr	r0, [pc, #64]	; (80023a8 <mqtt_ringbuf_advance_get_idx+0x5c>)
 8002366:	f011 fb7f 	bl	8013a68 <iprintf>
 800236a:	2000      	movs	r0, #0
 800236c:	f011 fc7e 	bl	8013c6c <fflush>
 8002370:	f011 fbc3 	bl	8013afa <abort>

  rb->get += len;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	885a      	ldrh	r2, [r3, #2]
 8002378:	887b      	ldrh	r3, [r7, #2]
 800237a:	4413      	add	r3, r2
 800237c:	b29a      	uxth	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	885b      	ldrh	r3, [r3, #2]
 8002386:	2bff      	cmp	r3, #255	; 0xff
 8002388:	d906      	bls.n	8002398 <mqtt_ringbuf_advance_get_idx+0x4c>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	885b      	ldrh	r3, [r3, #2]
 800238e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002392:	b29a      	uxth	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	805a      	strh	r2, [r3, #2]
  }
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	08014f98 	.word	0x08014f98
 80023a4:	08014fbc 	.word	0x08014fbc
 80023a8:	08014ffc 	.word	0x08014ffc

080023ac <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	885b      	ldrh	r3, [r3, #2]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c8:	d303      	bcc.n	80023d2 <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80023d0:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	b29b      	uxth	r3, r3
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffda 	bl	80023ac <mqtt_ringbuf_len>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461a      	mov	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	885b      	ldrh	r3, [r3, #2]
 8002400:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002404:	429a      	cmp	r2, r3
 8002406:	da04      	bge.n	8002412 <mqtt_output_send+0x2e>
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ffcf 	bl	80023ac <mqtt_ringbuf_len>
 800240e:	4603      	mov	r3, r0
 8002410:	e004      	b.n	800241c <mqtt_output_send+0x38>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	885b      	ldrh	r3, [r3, #2]
 8002416:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800241a:	b29b      	uxth	r3, r3
 800241c:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002424:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <mqtt_output_send+0x5e>
 800242c:	4b47      	ldr	r3, [pc, #284]	; (800254c <mqtt_output_send+0x168>)
 800242e:	22f0      	movs	r2, #240	; 0xf0
 8002430:	4947      	ldr	r1, [pc, #284]	; (8002550 <mqtt_output_send+0x16c>)
 8002432:	4848      	ldr	r0, [pc, #288]	; (8002554 <mqtt_output_send+0x170>)
 8002434:	f011 fb18 	bl	8013a68 <iprintf>
 8002438:	2000      	movs	r0, #0
 800243a:	f011 fc17 	bl	8013c6c <fflush>
 800243e:	f011 fb5c 	bl	8013afa <abort>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 8002442:	89bb      	ldrh	r3, [r7, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d07c      	beq.n	8002542 <mqtt_output_send+0x15e>
 8002448:	897b      	ldrh	r3, [r7, #10]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d079      	beq.n	8002542 <mqtt_output_send+0x15e>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 800244e:	89ba      	ldrh	r2, [r7, #12]
 8002450:	897b      	ldrh	r3, [r7, #10]
 8002452:	429a      	cmp	r2, r3
 8002454:	d90d      	bls.n	8002472 <mqtt_output_send+0x8e>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 8002456:	897b      	ldrh	r3, [r7, #10]
 8002458:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ffa6 	bl	80023ac <mqtt_ringbuf_len>
 8002460:	4603      	mov	r3, r0
 8002462:	461a      	mov	r2, r3
 8002464:	897b      	ldrh	r3, [r7, #10]
 8002466:	4293      	cmp	r3, r2
 8002468:	bf34      	ite	cc
 800246a:	2301      	movcc	r3, #1
 800246c:	2300      	movcs	r3, #0
 800246e:	b2db      	uxtb	r3, r3
 8002470:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ff5a 	bl	800232c <mqtt_ringbuf_get_ptr>
 8002478:	4601      	mov	r1, r0
 800247a:	7bbb      	ldrb	r3, [r7, #14]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <mqtt_output_send+0xa0>
 8002480:	2303      	movs	r3, #3
 8002482:	e000      	b.n	8002486 <mqtt_output_send+0xa2>
 8002484:	2301      	movs	r3, #1
 8002486:	89ba      	ldrh	r2, [r7, #12]
 8002488:	6838      	ldr	r0, [r7, #0]
 800248a:	f008 ff37 	bl	800b2fc <tcp_write>
 800248e:	4603      	mov	r3, r0
 8002490:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 8002492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d146      	bne.n	8002528 <mqtt_output_send+0x144>
 800249a:	7bbb      	ldrb	r3, [r7, #14]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d043      	beq.n	8002528 <mqtt_output_send+0x144>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 80024a0:	89bb      	ldrh	r3, [r7, #12]
 80024a2:	4619      	mov	r1, r3
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ff51 	bl	800234c <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80024b0:	461c      	mov	r4, r3
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ff7a 	bl	80023ac <mqtt_ringbuf_len>
 80024b8:	4603      	mov	r3, r0
 80024ba:	461a      	mov	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	885b      	ldrh	r3, [r3, #2]
 80024c0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80024c4:	429a      	cmp	r2, r3
 80024c6:	da04      	bge.n	80024d2 <mqtt_output_send+0xee>
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ff6f 	bl	80023ac <mqtt_ringbuf_len>
 80024ce:	4603      	mov	r3, r0
 80024d0:	e003      	b.n	80024da <mqtt_output_send+0xf6>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	885b      	ldrh	r3, [r3, #2]
 80024d6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80024da:	429c      	cmp	r4, r3
 80024dc:	da03      	bge.n	80024e6 <mqtt_output_send+0x102>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80024e4:	e014      	b.n	8002510 <mqtt_output_send+0x12c>
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ff60 	bl	80023ac <mqtt_ringbuf_len>
 80024ec:	4603      	mov	r3, r0
 80024ee:	461a      	mov	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	885b      	ldrh	r3, [r3, #2]
 80024f4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80024f8:	429a      	cmp	r2, r3
 80024fa:	da04      	bge.n	8002506 <mqtt_output_send+0x122>
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ff55 	bl	80023ac <mqtt_ringbuf_len>
 8002502:	4603      	mov	r3, r0
 8002504:	e004      	b.n	8002510 <mqtt_output_send+0x12c>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	885b      	ldrh	r3, [r3, #2]
 800250a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800250e:	b29b      	uxth	r3, r3
 8002510:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff ff0a 	bl	800232c <mqtt_ringbuf_get_ptr>
 8002518:	4601      	mov	r1, r0
 800251a:	89ba      	ldrh	r2, [r7, #12]
 800251c:	2301      	movs	r3, #1
 800251e:	6838      	ldr	r0, [r7, #0]
 8002520:	f008 feec 	bl	800b2fc <tcp_write>
 8002524:	4603      	mov	r3, r0
 8002526:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8002528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d109      	bne.n	8002544 <mqtt_output_send+0x160>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8002530:	89bb      	ldrh	r3, [r7, #12]
 8002532:	4619      	mov	r1, r3
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff09 	bl	800234c <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 800253a:	6838      	ldr	r0, [r7, #0]
 800253c:	f009 fd9c 	bl	800c078 <tcp_output>
 8002540:	e000      	b.n	8002544 <mqtt_output_send+0x160>
    return;
 8002542:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bd90      	pop	{r4, r7, pc}
 800254a:	bf00      	nop
 800254c:	08014f98 	.word	0x08014f98
 8002550:	08015024 	.word	0x08015024
 8002554:	08014ffc 	.word	0x08014ffc

08002558 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	4613      	mov	r3, r2
 8002566:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10b      	bne.n	800258a <mqtt_create_request+0x32>
 8002572:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <mqtt_create_request+0x8c>)
 8002574:	f240 1223 	movw	r2, #291	; 0x123
 8002578:	491b      	ldr	r1, [pc, #108]	; (80025e8 <mqtt_create_request+0x90>)
 800257a:	481c      	ldr	r0, [pc, #112]	; (80025ec <mqtt_create_request+0x94>)
 800257c:	f011 fa74 	bl	8013a68 <iprintf>
 8002580:	2000      	movs	r0, #0
 8002582:	f011 fb73 	bl	8013c6c <fflush>
 8002586:	f011 fab8 	bl	8013afa <abort>
  for (n = 0; n < r_objs_len; n++) {
 800258a:	2300      	movs	r3, #0
 800258c:	74fb      	strb	r3, [r7, #19]
 800258e:	e01f      	b.n	80025d0 <mqtt_create_request+0x78>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	7cfb      	ldrb	r3, [r7, #19]
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	68f9      	ldr	r1, [r7, #12]
 80025a0:	440b      	add	r3, r1
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d111      	bne.n	80025ca <mqtt_create_request+0x72>
      r = &r_objs[n];
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4413      	add	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	6a3a      	ldr	r2, [r7, #32]
 80025c0:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	88fa      	ldrh	r2, [r7, #6]
 80025c6:	819a      	strh	r2, [r3, #12]
      break;
 80025c8:	e006      	b.n	80025d8 <mqtt_create_request+0x80>
  for (n = 0; n < r_objs_len; n++) {
 80025ca:	7cfb      	ldrb	r3, [r7, #19]
 80025cc:	3301      	adds	r3, #1
 80025ce:	74fb      	strb	r3, [r7, #19]
 80025d0:	7cfa      	ldrb	r2, [r7, #19]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d3db      	bcc.n	8002590 <mqtt_create_request+0x38>
    }
  }
  return r;
 80025d8:	697b      	ldr	r3, [r7, #20]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	08014f98 	.word	0x08014f98
 80025e8:	08015044 	.word	0x08015044
 80025ec:	08014ffc 	.word	0x08014ffc

080025f0 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10b      	bne.n	8002620 <mqtt_append_request+0x30>
 8002608:	4b20      	ldr	r3, [pc, #128]	; (800268c <mqtt_append_request+0x9c>)
 800260a:	f240 123f 	movw	r2, #319	; 0x13f
 800260e:	4920      	ldr	r1, [pc, #128]	; (8002690 <mqtt_append_request+0xa0>)
 8002610:	4820      	ldr	r0, [pc, #128]	; (8002694 <mqtt_append_request+0xa4>)
 8002612:	f011 fa29 	bl	8013a68 <iprintf>
 8002616:	2000      	movs	r0, #0
 8002618:	f011 fb28 	bl	8013c6c <fflush>
 800261c:	f011 fa6d 	bl	8013afa <abort>

  /* Iterate through queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	e00a      	b.n	800263e <mqtt_append_request+0x4e>
    time_before += iter->timeout_diff;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	89da      	ldrh	r2, [r3, #14]
 800262c:	8a7b      	ldrh	r3, [r7, #18]
 800262e:	4413      	add	r3, r2
 8002630:	b29b      	uxth	r3, r3
 8002632:	827b      	strh	r3, [r7, #18]
    head = iter;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f1      	bne.n	8002628 <mqtt_append_request+0x38>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 8002644:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002648:	2b1e      	cmp	r3, #30
 800264a:	dd0b      	ble.n	8002664 <mqtt_append_request+0x74>
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <mqtt_append_request+0x9c>)
 800264e:	f240 1247 	movw	r2, #327	; 0x147
 8002652:	4911      	ldr	r1, [pc, #68]	; (8002698 <mqtt_append_request+0xa8>)
 8002654:	480f      	ldr	r0, [pc, #60]	; (8002694 <mqtt_append_request+0xa4>)
 8002656:	f011 fa07 	bl	8013a68 <iprintf>
 800265a:	2000      	movs	r0, #0
 800265c:	f011 fb06 	bl	8013c6c <fflush>
 8002660:	f011 fa4b 	bl	8013afa <abort>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8002664:	8a7b      	ldrh	r3, [r7, #18]
 8002666:	f1c3 031e 	rsb	r3, r3, #30
 800266a:	b29a      	uxth	r2, r3
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d103      	bne.n	800267e <mqtt_append_request+0x8e>
    *tail = r;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 800267c:	e002      	b.n	8002684 <mqtt_append_request+0x94>
    head->next = r;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	601a      	str	r2, [r3, #0]
}
 8002684:	bf00      	nop
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	08014f98 	.word	0x08014f98
 8002690:	08015068 	.word	0x08015068
 8002694:	08014ffc 	.word	0x08014ffc
 8002698:	0801508c 	.word	0x0801508c

0800269c <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <mqtt_delete_request+0x14>
    r->next = r;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	601a      	str	r2, [r3, #0]
  }
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10b      	bne.n	80026ee <mqtt_take_request+0x32>
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <mqtt_take_request+0xa4>)
 80026d8:	f240 1267 	movw	r2, #359	; 0x167
 80026dc:	4921      	ldr	r1, [pc, #132]	; (8002764 <mqtt_take_request+0xa8>)
 80026de:	4822      	ldr	r0, [pc, #136]	; (8002768 <mqtt_take_request+0xac>)
 80026e0:	f011 f9c2 	bl	8013a68 <iprintf>
 80026e4:	2000      	movs	r0, #0
 80026e6:	f011 fac1 	bl	8013c6c <fflush>
 80026ea:	f011 fa06 	bl	8013afa <abort>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	e009      	b.n	800270a <mqtt_take_request+0x4e>
    if (iter->pkt_id == pkt_id) {
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	899b      	ldrh	r3, [r3, #12]
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d008      	beq.n	8002712 <mqtt_take_request+0x56>
      break;
    }
    prev = iter;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f2      	bne.n	80026f6 <mqtt_take_request+0x3a>
 8002710:	e000      	b.n	8002714 <mqtt_take_request+0x58>
      break;
 8002712:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d01c      	beq.n	8002754 <mqtt_take_request+0x98>
    /* unchain */
    if (prev == NULL) {
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d104      	bne.n	800272a <mqtt_take_request+0x6e>
      *tail = iter->next;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	e003      	b.n	8002732 <mqtt_take_request+0x76>
    } else {
      prev->next = iter->next;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <mqtt_take_request+0x92>
      iter->next->timeout_diff += iter->timeout_diff;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	89d1      	ldrh	r1, [r2, #14]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	89d2      	ldrh	r2, [r2, #14]
 8002748:	440a      	add	r2, r1
 800274a:	b292      	uxth	r2, r2
 800274c:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8002754:	68fb      	ldr	r3, [r7, #12]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	08014f98 	.word	0x08014f98
 8002764:	080150c4 	.word	0x080150c4
 8002768:	08014ffc 	.word	0x08014ffc

0800276c <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10b      	bne.n	8002796 <mqtt_request_time_elapsed+0x2a>
 800277e:	4b23      	ldr	r3, [pc, #140]	; (800280c <mqtt_request_time_elapsed+0xa0>)
 8002780:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8002784:	4922      	ldr	r1, [pc, #136]	; (8002810 <mqtt_request_time_elapsed+0xa4>)
 8002786:	4823      	ldr	r0, [pc, #140]	; (8002814 <mqtt_request_time_elapsed+0xa8>)
 8002788:	f011 f96e 	bl	8013a68 <iprintf>
 800278c:	2000      	movs	r0, #0
 800278e:	f011 fa6d 	bl	8013c6c <fflush>
 8002792:	f011 f9b2 	bl	8013afa <abort>
  r = *tail;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 800279c:	e02c      	b.n	80027f8 <mqtt_request_time_elapsed+0x8c>
    if (t >= r->timeout_diff) {
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	89db      	ldrh	r3, [r3, #14]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d31c      	bcc.n	80027e4 <mqtt_request_time_elapsed+0x78>
      t -= (u8_t)r->timeout_diff;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	89db      	ldrh	r3, [r3, #14]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <mqtt_request_time_elapsed+0x6a>
        r->cb(r->arg, ERR_TIMEOUT);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	6892      	ldr	r2, [r2, #8]
 80027ce:	f06f 0102 	mvn.w	r1, #2
 80027d2:	4610      	mov	r0, r2
 80027d4:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f7ff ff60 	bl	800269c <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	e009      	b.n	80027f8 <mqtt_request_time_elapsed+0x8c>
    } else {
      r->timeout_diff -= t;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	89da      	ldrh	r2, [r3, #14]
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	81da      	strh	r2, [r3, #14]
      t = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <mqtt_request_time_elapsed+0x98>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1cc      	bne.n	800279e <mqtt_request_time_elapsed+0x32>
    }
  }
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	08014f98 	.word	0x08014f98
 8002810:	080150e4 	.word	0x080150e4
 8002814:	08014ffc 	.word	0x08014ffc

08002818 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10b      	bne.n	800283e <mqtt_clear_requests+0x26>
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <mqtt_clear_requests+0x54>)
 8002828:	f240 12a7 	movw	r2, #423	; 0x1a7
 800282c:	4910      	ldr	r1, [pc, #64]	; (8002870 <mqtt_clear_requests+0x58>)
 800282e:	4811      	ldr	r0, [pc, #68]	; (8002874 <mqtt_clear_requests+0x5c>)
 8002830:	f011 f91a 	bl	8013a68 <iprintf>
 8002834:	2000      	movs	r0, #0
 8002836:	f011 fa19 	bl	8013c6c <fflush>
 800283a:	f011 f95e 	bl	8013afa <abort>
  for (iter = *tail; iter != NULL; iter = next) {
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	e007      	b.n	8002856 <mqtt_clear_requests+0x3e>
    next = iter->next;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f7ff ff25 	bl	800269c <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f4      	bne.n	8002846 <mqtt_clear_requests+0x2e>
  }
  *tail = NULL;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
}
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	08014f98 	.word	0x08014f98
 8002870:	0801510c 	.word	0x0801510c
 8002874:	08014ffc 	.word	0x08014ffc

08002878 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10b      	bne.n	80028a0 <mqtt_init_requests+0x28>
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <mqtt_init_requests+0x58>)
 800288a:	f240 12b7 	movw	r2, #439	; 0x1b7
 800288e:	4911      	ldr	r1, [pc, #68]	; (80028d4 <mqtt_init_requests+0x5c>)
 8002890:	4811      	ldr	r0, [pc, #68]	; (80028d8 <mqtt_init_requests+0x60>)
 8002892:	f011 f8e9 	bl	8013a68 <iprintf>
 8002896:	2000      	movs	r0, #0
 8002898:	f011 f9e8 	bl	8013c6c <fflush>
 800289c:	f011 f92d 	bl	8013afa <abort>
  for (n = 0; n < r_objs_len; n++) {
 80028a0:	2300      	movs	r3, #0
 80028a2:	73fb      	strb	r3, [r7, #15]
 80028a4:	e00b      	b.n	80028be <mqtt_init_requests+0x46>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	4413      	add	r3, r2
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	0112      	lsls	r2, r2, #4
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	440a      	add	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	3301      	adds	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
 80028be:	7bfa      	ldrb	r2, [r7, #15]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d3ef      	bcc.n	80028a6 <mqtt_init_requests+0x2e>
  }
}
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	08014f98 	.word	0x08014f98
 80028d4:	08015130 	.word	0x08015130
 80028d8:	08014ffc 	.word	0x08014ffc

080028dc <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	4619      	mov	r1, r3
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff fcfd 	bl	80022ec <mqtt_ringbuf_put>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8002906:	887b      	ldrh	r3, [r7, #2]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	b29b      	uxth	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	4619      	mov	r1, r3
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff fceb 	bl	80022ec <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8002916:	887b      	ldrh	r3, [r7, #2]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	4619      	mov	r1, r3
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff fce5 	bl	80022ec <mqtt_ringbuf_put>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	4613      	mov	r3, r2
 8002936:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 8002938:	2300      	movs	r3, #0
 800293a:	82fb      	strh	r3, [r7, #22]
 800293c:	e00a      	b.n	8002954 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 800293e:	8afb      	ldrh	r3, [r7, #22]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	4413      	add	r3, r2
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	4619      	mov	r1, r3
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f7ff fccf 	bl	80022ec <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800294e:	8afb      	ldrh	r3, [r7, #22]
 8002950:	3301      	adds	r3, #1
 8002952:	82fb      	strh	r3, [r7, #22]
 8002954:	8afa      	ldrh	r2, [r7, #22]
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	429a      	cmp	r2, r3
 800295a:	d3f0      	bcc.n	800293e <mqtt_output_append_buf+0x14>
  }
}
 800295c:	bf00      	nop
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	4613      	mov	r3, r2
 8002970:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	b29b      	uxth	r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	4619      	mov	r1, r3
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff fcb5 	bl	80022ec <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	4619      	mov	r1, r3
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f7ff fcaf 	bl	80022ec <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800298e:	2300      	movs	r3, #0
 8002990:	82fb      	strh	r3, [r7, #22]
 8002992:	e00a      	b.n	80029aa <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8002994:	8afb      	ldrh	r3, [r7, #22]
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	4413      	add	r3, r2
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4619      	mov	r1, r3
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7ff fca4 	bl	80022ec <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 80029a4:	8afb      	ldrh	r3, [r7, #22]
 80029a6:	3301      	adds	r3, #1
 80029a8:	82fb      	strh	r3, [r7, #22]
 80029aa:	8afa      	ldrh	r2, [r7, #22]
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d3f0      	bcc.n	8002994 <mqtt_output_append_string+0x30>
  }
}
 80029b2:	bf00      	nop
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	4608      	mov	r0, r1
 80029c4:	4611      	mov	r1, r2
 80029c6:	461a      	mov	r2, r3
 80029c8:	4603      	mov	r3, r0
 80029ca:	70fb      	strb	r3, [r7, #3]
 80029cc:	460b      	mov	r3, r1
 80029ce:	70bb      	strb	r3, [r7, #2]
 80029d0:	4613      	mov	r3, r2
 80029d2:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	b25a      	sxtb	r2, r3
 80029da:	78bb      	ldrb	r3, [r7, #2]
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	b25b      	sxtb	r3, r3
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	b25b      	sxtb	r3, r3
 80029e6:	4313      	orrs	r3, r2
 80029e8:	b25a      	sxtb	r2, r3
 80029ea:	787b      	ldrb	r3, [r7, #1]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	b25b      	sxtb	r3, r3
 80029f0:	f003 0306 	and.w	r3, r3, #6
 80029f4:	b25b      	sxtb	r3, r3
 80029f6:	4313      	orrs	r3, r2
 80029f8:	b25a      	sxtb	r2, r3
 80029fa:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	b25b      	sxtb	r3, r3
 8002a04:	4313      	orrs	r3, r2
 8002a06:	b25b      	sxtb	r3, r3
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff ff65 	bl	80028dc <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8002a12:	8abb      	ldrh	r3, [r7, #20]
 8002a14:	b25b      	sxtb	r3, r3
 8002a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a1a:	b25a      	sxtb	r2, r3
 8002a1c:	8abb      	ldrh	r3, [r7, #20]
 8002a1e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a20:	d902      	bls.n	8002a28 <mqtt_output_append_fixed_header+0x6e>
 8002a22:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8002a26:	e000      	b.n	8002a2a <mqtt_output_append_fixed_header+0x70>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	b25b      	sxtb	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	4619      	mov	r1, r3
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff ff52 	bl	80028dc <mqtt_output_append_u8>
    r_length >>= 7;
 8002a38:	8abb      	ldrh	r3, [r7, #20]
 8002a3a:	09db      	lsrs	r3, r3, #7
 8002a3c:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8002a3e:	8abb      	ldrh	r3, [r7, #20]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e6      	bne.n	8002a12 <mqtt_output_append_fixed_header+0x58>
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8002a58:	887b      	ldrh	r3, [r7, #2]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10b      	bne.n	8002a7c <mqtt_output_check_space+0x30>
 8002a64:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <mqtt_output_check_space+0x64>)
 8002a66:	f240 2207 	movw	r2, #519	; 0x207
 8002a6a:	4912      	ldr	r1, [pc, #72]	; (8002ab4 <mqtt_output_check_space+0x68>)
 8002a6c:	4812      	ldr	r0, [pc, #72]	; (8002ab8 <mqtt_output_check_space+0x6c>)
 8002a6e:	f010 fffb 	bl	8013a68 <iprintf>
 8002a72:	2000      	movs	r0, #0
 8002a74:	f011 f8fa 	bl	8013c6c <fflush>
 8002a78:	f011 f83f 	bl	8013afa <abort>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 8002a7c:	89fb      	ldrh	r3, [r7, #14]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8002a82:	887b      	ldrh	r3, [r7, #2]
 8002a84:	09db      	lsrs	r3, r3, #7
 8002a86:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8002a88:	887b      	ldrh	r3, [r7, #2]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f6      	bne.n	8002a7c <mqtt_output_check_space+0x30>

  return (total_len <= mqtt_ringbuf_free(rb));
 8002a8e:	89fc      	ldrh	r4, [r7, #14]
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff fc8b 	bl	80023ac <mqtt_ringbuf_len>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002a9c:	429c      	cmp	r4, r3
 8002a9e:	bfd4      	ite	le
 8002aa0:	2301      	movle	r3, #1
 8002aa2:	2300      	movgt	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd90      	pop	{r4, r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	08014f98 	.word	0x08014f98
 8002ab4:	08015154 	.word	0x08015154
 8002ab8:	08014ffc 	.word	0x08014ffc

08002abc <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10b      	bne.n	8002ae6 <mqtt_close+0x2a>
 8002ace:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <mqtt_close+0xbc>)
 8002ad0:	f240 221b 	movw	r2, #539	; 0x21b
 8002ad4:	4929      	ldr	r1, [pc, #164]	; (8002b7c <mqtt_close+0xc0>)
 8002ad6:	482a      	ldr	r0, [pc, #168]	; (8002b80 <mqtt_close+0xc4>)
 8002ad8:	f010 ffc6 	bl	8013a68 <iprintf>
 8002adc:	2000      	movs	r0, #0
 8002ade:	f011 f8c5 	bl	8013c6c <fflush>
 8002ae2:	f011 f80a 	bl	8013afa <abort>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d024      	beq.n	8002b38 <mqtt_close+0x7c>
    err_t res;
    altcp_recv(client->conn, NULL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2100      	movs	r1, #0
 8002af4:	4618      	mov	r0, r3
 8002af6:	f005 fb2f 	bl	8008158 <tcp_recv>
    altcp_err(client->conn,  NULL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f005 fb75 	bl	80081f0 <tcp_err>
    altcp_sent(client->conn, NULL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f005 fb49 	bl	80081a4 <tcp_sent>
    res = altcp_close(client->conn);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f004 f8cc 	bl	8006cb4 <tcp_close>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 8002b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d004      	beq.n	8002b32 <mqtt_close+0x76>
      altcp_abort(client->conn);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f004 f9af 	bl	8006e90 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3318      	adds	r3, #24
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fe6b 	bl	8002818 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	480f      	ldr	r0, [pc, #60]	; (8002b84 <mqtt_close+0xc8>)
 8002b46:	f00a fc4d 	bl	800d3e4 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	7a9b      	ldrb	r3, [r3, #10]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00d      	beq.n	8002b6e <mqtt_close+0xb2>

    client->conn_state = TCP_DISCONNECTED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <mqtt_close+0xb2>
      client->connect_cb(client, client->connect_arg, reason);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6911      	ldr	r1, [r2, #16]
 8002b68:	887a      	ldrh	r2, [r7, #2]
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
    }
  }
}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	08014f98 	.word	0x08014f98
 8002b7c:	08015178 	.word	0x08015178
 8002b80:	08014ffc 	.word	0x08014ffc
 8002b84:	08002b89 	.word	0x08002b89

08002b88 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10b      	bne.n	8002bb6 <mqtt_cyclic_timer+0x2e>
 8002b9e:	4b44      	ldr	r3, [pc, #272]	; (8002cb0 <mqtt_cyclic_timer+0x128>)
 8002ba0:	f44f 7211 	mov.w	r2, #580	; 0x244
 8002ba4:	4943      	ldr	r1, [pc, #268]	; (8002cb4 <mqtt_cyclic_timer+0x12c>)
 8002ba6:	4844      	ldr	r0, [pc, #272]	; (8002cb8 <mqtt_cyclic_timer+0x130>)
 8002ba8:	f010 ff5e 	bl	8013a68 <iprintf>
 8002bac:	2000      	movs	r0, #0
 8002bae:	f011 f85d 	bl	8013c6c <fflush>
 8002bb2:	f010 ffa2 	bl	8013afa <abort>

  if (client->conn_state == MQTT_CONNECTING) {
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	7a9b      	ldrb	r3, [r3, #10]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d115      	bne.n	8002bea <mqtt_cyclic_timer+0x62>
    client->cyclic_tick++;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	2b63      	cmp	r3, #99	; 0x63
 8002bd8:	dd5d      	ble.n	8002c96 <mqtt_cyclic_timer+0x10e>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8002bda:	f240 1101 	movw	r1, #257	; 0x101
 8002bde:	68b8      	ldr	r0, [r7, #8]
 8002be0:	f7ff ff6c 	bl	8002abc <mqtt_close>
      restart_timer = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	e055      	b.n	8002c96 <mqtt_cyclic_timer+0x10e>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	7a9b      	ldrb	r3, [r3, #10]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d14f      	bne.n	8002c92 <mqtt_cyclic_timer+0x10a>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	3318      	adds	r3, #24
 8002bf6:	2105      	movs	r1, #5
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fdb7 	bl	800276c <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	885b      	ldrh	r3, [r3, #2]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d047      	beq.n	8002c96 <mqtt_cyclic_timer+0x10e>

      client->server_watchdog++;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	889b      	ldrh	r3, [r3, #4]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	889b      	ldrh	r3, [r3, #4]
 8002c16:	461a      	mov	r2, r3
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	441a      	add	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	885b      	ldrh	r3, [r3, #2]
 8002c22:	4619      	mov	r1, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	885b      	ldrh	r3, [r3, #2]
 8002c28:	085b      	lsrs	r3, r3, #1
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	dd06      	ble.n	8002c40 <mqtt_cyclic_timer+0xb8>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8002c32:	f240 1101 	movw	r1, #257	; 0x101
 8002c36:	68b8      	ldr	r0, [r7, #8]
 8002c38:	f7ff ff40 	bl	8002abc <mqtt_close>
        restart_timer = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      client->cyclic_tick++;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	3301      	adds	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	801a      	strh	r2, [r3, #0]
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	8852      	ldrh	r2, [r2, #2]
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	db1a      	blt.n	8002c96 <mqtt_cyclic_timer+0x10e>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	33ec      	adds	r3, #236	; 0xec
 8002c64:	2100      	movs	r1, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fef0 	bl	8002a4c <mqtt_output_check_space>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d011      	beq.n	8002c96 <mqtt_cyclic_timer+0x10e>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2300      	movs	r3, #0
 8002c82:	2200      	movs	r2, #0
 8002c84:	210c      	movs	r1, #12
 8002c86:	f7ff fe98 	bl	80029ba <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	801a      	strh	r2, [r3, #0]
 8002c90:	e001      	b.n	8002c96 <mqtt_cyclic_timer+0x10e>
        }
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <mqtt_cyclic_timer+0x120>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	4907      	ldr	r1, [pc, #28]	; (8002cbc <mqtt_cyclic_timer+0x134>)
 8002ca0:	f241 3088 	movw	r0, #5000	; 0x1388
 8002ca4:	f00a fb72 	bl	800d38c <sys_timeout>
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	08014f98 	.word	0x08014f98
 8002cb4:	08015194 	.word	0x08015194
 8002cb8:	08014ffc 	.word	0x08014ffc
 8002cbc:	08002b89 	.word	0x08002b89

08002cc0 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	4608      	mov	r0, r1
 8002cca:	4611      	mov	r1, r2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4603      	mov	r3, r0
 8002cd0:	70fb      	strb	r3, [r7, #3]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	803b      	strh	r3, [r7, #0]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	33ec      	adds	r3, #236	; 0xec
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff feb1 	bl	8002a4c <mqtt_output_check_space>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01d      	beq.n	8002d2c <pub_ack_rec_rel_response+0x6c>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8002cf6:	78ba      	ldrb	r2, [r7, #2]
 8002cf8:	78f9      	ldrb	r1, [r7, #3]
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	4613      	mov	r3, r2
 8002d04:	2200      	movs	r2, #0
 8002d06:	f7ff fe58 	bl	80029ba <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	33ec      	adds	r3, #236	; 0xec
 8002d0e:	883a      	ldrh	r2, [r7, #0]
 8002d10:	4611      	mov	r1, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fdf1 	bl	80028fa <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	4619      	mov	r1, r3
 8002d24:	4610      	mov	r0, r2
 8002d26:	f7ff fb5d 	bl	80023e4 <mqtt_output_send>
 8002d2a:	e001      	b.n	8002d30 <pub_ack_rec_rel_response+0x70>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 8002d2c:	23ff      	movs	r3, #255	; 0xff
 8002d2e:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 8002d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <mqtt_incoming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incoming_suback(struct mqtt_request_t *r, u8_t result)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00c      	beq.n	8002d6a <mqtt_incoming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6890      	ldr	r0, [r2, #8]
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	2a02      	cmp	r2, #2
 8002d5c:	d801      	bhi.n	8002d62 <mqtt_incoming_suback+0x26>
 8002d5e:	2200      	movs	r2, #0
 8002d60:	e001      	b.n	8002d66 <mqtt_incoming_suback+0x2a>
 8002d62:	f06f 020c 	mvn.w	r2, #12
 8002d66:	4611      	mov	r1, r2
 8002d68:	4798      	blx	r3
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <mqtt_message_received>:
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_len, u16_t length, u32_t remaining_length,
                      u8_t *var_hdr_payload)
{
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b08f      	sub	sp, #60	; 0x3c
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	607b      	str	r3, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	72fb      	strb	r3, [r7, #11]
 8002d82:	4613      	mov	r3, r2
 8002d84:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8002d86:	2300      	movs	r3, #0
 8002d88:	86fb      	strh	r3, [r7, #54]	; 0x36

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  u16_t pkt_id = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	85bb      	strh	r3, [r7, #44]	; 0x2c

  LWIP_ASSERT("fixed_hdr_len <= client->msg_idx", fixed_hdr_len <= client->msg_idx);
 8002d9a:	7afa      	ldrb	r2, [r7, #11]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d90b      	bls.n	8002dbc <mqtt_message_received+0x48>
 8002da4:	4ba3      	ldr	r3, [pc, #652]	; (8003034 <mqtt_message_received+0x2c0>)
 8002da6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8002daa:	49a3      	ldr	r1, [pc, #652]	; (8003038 <mqtt_message_received+0x2c4>)
 8002dac:	48a3      	ldr	r0, [pc, #652]	; (800303c <mqtt_message_received+0x2c8>)
 8002dae:	f010 fe5b 	bl	8013a68 <iprintf>
 8002db2:	2000      	movs	r0, #0
 8002db4:	f010 ff5a 	bl	8013c6c <fflush>
 8002db8:	f010 fe9f 	bl	8013afa <abort>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_len + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 8002dbc:	7afa      	ldrb	r2, [r7, #11]
 8002dbe:	893b      	ldrh	r3, [r7, #8]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	2b80      	cmp	r3, #128	; 0x80
 8002dc4:	dd09      	ble.n	8002dda <mqtt_message_received+0x66>
 8002dc6:	4b9b      	ldr	r3, [pc, #620]	; (8003034 <mqtt_message_received+0x2c0>)
 8002dc8:	f240 22aa 	movw	r2, #682	; 0x2aa
 8002dcc:	499c      	ldr	r1, [pc, #624]	; (8003040 <mqtt_message_received+0x2cc>)
 8002dce:	489b      	ldr	r0, [pc, #620]	; (800303c <mqtt_message_received+0x2c8>)
 8002dd0:	f7ff f823 	bl	8001e1a <lwip_win32_platform_diag>
 8002dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dd8:	e184      	b.n	80030e4 <mqtt_message_received+0x370>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 8002dda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d123      	bne.n	8002e2a <mqtt_message_received+0xb6>
    if (client->conn_state == MQTT_CONNECTING) {
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	7a9b      	ldrb	r3, [r3, #10]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	f040 8165 	bne.w	80030b6 <mqtt_message_received+0x342>
      if (length < 2) {
 8002dec:	893b      	ldrh	r3, [r7, #8]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	f240 8163 	bls.w	80030ba <mqtt_message_received+0x346>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 8002df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df6:	3301      	adds	r3, #1
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 8002dfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 8159 	bne.w	80030b6 <mqtt_message_received+0x342>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != NULL) {
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 814e 	beq.w	80030b6 <mqtt_message_received+0x342>
          client->connect_cb(client, client->connect_arg, res);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	6911      	ldr	r1, [r2, #16]
 8002e22:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	4798      	blx	r3
 8002e28:	e145      	b.n	80030b6 <mqtt_message_received+0x342>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 8002e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e2e:	2b0d      	cmp	r3, #13
 8002e30:	f000 8141 	beq.w	80030b6 <mqtt_message_received+0x342>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 8002e34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	f040 80d2 	bne.w	8002fe2 <mqtt_message_received+0x26e>
    u16_t payload_offset = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 8002e42:	893b      	ldrh	r3, [r7, #8]
 8002e44:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002e4c:	105b      	asrs	r3, r3, #1
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if (client->msg_idx == (u32_t)(fixed_hdr_len + length)) {
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e5c:	7af9      	ldrb	r1, [r7, #11]
 8002e5e:	893a      	ldrh	r2, [r7, #8]
 8002e60:	440a      	add	r2, r1
 8002e62:	4293      	cmp	r3, r2
 8002e64:	f040 8085 	bne.w	8002f72 <mqtt_message_received+0x1fe>
      /* First publish message frame. Should have topic and pkt id*/
      size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_len;
 8002e68:	7afb      	ldrb	r3, [r7, #11]
 8002e6a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 8002e70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <mqtt_message_received+0x108>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e000      	b.n	8002e7e <mqtt_message_received+0x10a>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	847b      	strh	r3, [r7, #34]	; 0x22
      if (length < 2 + qos_len) {
 8002e80:	893a      	ldrh	r2, [r7, #8]
 8002e82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e84:	3302      	adds	r3, #2
 8002e86:	429a      	cmp	r2, r3
 8002e88:	f2c0 8119 	blt.w	80030be <mqtt_message_received+0x34a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 8002e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	843b      	strh	r3, [r7, #32]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 8002e92:	8c3b      	ldrh	r3, [r7, #32]
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	843b      	strh	r3, [r7, #32]
      if ((topic_len > length - (2 + qos_len)) ||
 8002ea4:	8c3a      	ldrh	r2, [r7, #32]
 8002ea6:	8939      	ldrh	r1, [r7, #8]
 8002ea8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002eaa:	3302      	adds	r3, #2
 8002eac:	1acb      	subs	r3, r1, r3
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	f300 8107 	bgt.w	80030c2 <mqtt_message_received+0x34e>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 8002eb4:	8c3a      	ldrh	r2, [r7, #32]
 8002eb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002eb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eba:	1acb      	subs	r3, r1, r3
 8002ebc:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	f200 80ff 	bhi.w	80030c2 <mqtt_message_received+0x34e>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 8002ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	61fb      	str	r3, [r7, #28]
      after_topic = 2 + topic_len;
 8002eca:	8c3b      	ldrh	r3, [r7, #32]
 8002ecc:	3302      	adds	r3, #2
 8002ece:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8002ed0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002ed2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <mqtt_message_received+0x16a>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e000      	b.n	8002ee0 <mqtt_message_received+0x16c>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	441a      	add	r2, r3
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	f200 80ee 	bhi.w	80030c6 <mqtt_message_received+0x352>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 8002eea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01a      	beq.n	8002f28 <mqtt_message_received+0x1b4>
        if (length < after_topic + 2U) {
 8002ef2:	893a      	ldrh	r2, [r7, #8]
 8002ef4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	f0c0 80e6 	bcc.w	80030ca <mqtt_message_received+0x356>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8002efe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f02:	4413      	add	r3, r2
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f0e:	3301      	adds	r3, #1
 8002f10:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002f12:	440b      	add	r3, r1
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	4413      	add	r3, r2
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 8002f20:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f22:	3302      	adds	r3, #2
 8002f24:	863b      	strh	r3, [r7, #48]	; 0x30
 8002f26:	e002      	b.n	8002f2e <mqtt_message_received+0x1ba>
      } else {
        client->inpub_pkt_id = 0;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 8002f2e:	8c3b      	ldrh	r3, [r7, #32]
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	4413      	add	r3, r2
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	76fb      	strb	r3, [r7, #27]
      /* Zero terminate string */
      topic[topic_len] = 0;
 8002f38:	8c3b      	ldrh	r3, [r7, #32]
 8002f3a:	69fa      	ldr	r2, [r7, #28]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 8002f42:	893a      	ldrh	r2, [r7, #8]
 8002f44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 8002f4a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f4c:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incoming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <mqtt_message_received+0x1f4>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8002f5e:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	440a      	add	r2, r1
 8002f64:	69f9      	ldr	r1, [r7, #28]
 8002f66:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 8002f68:	8c3b      	ldrh	r3, [r7, #32]
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	7efa      	ldrb	r2, [r7, #27]
 8002f70:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 8002f72:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d103      	bne.n	8002f80 <mqtt_message_received+0x20c>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f040 809b 	bne.w	80030b6 <mqtt_message_received+0x342>
      if (length < (size_t)(payload_offset + payload_length)) {
 8002f80:	893b      	ldrh	r3, [r7, #8]
 8002f82:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8002f84:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002f86:	440a      	add	r2, r1
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	f0c0 80a0 	bcc.w	80030ce <mqtt_message_received+0x35a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      if (client->data_cb != NULL) {
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00e      	beq.n	8002fb4 <mqtt_message_received+0x240>
        client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8002f9e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fa2:	18d1      	adds	r1, r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bf0c      	ite	eq
 8002faa:	2301      	moveq	r3, #1
 8002fac:	2300      	movne	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002fb2:	47a0      	blx	r4
      }
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d17d      	bne.n	80030b6 <mqtt_message_received+0x342>
 8002fba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d079      	beq.n	80030b6 <mqtt_message_received+0x342>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8002fc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <mqtt_message_received+0x25a>
 8002fca:	2304      	movs	r3, #4
 8002fcc:	e000      	b.n	8002fd0 <mqtt_message_received+0x25c>
 8002fce:	2305      	movs	r3, #5
 8002fd0:	76bb      	strb	r3, [r7, #26]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incoming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	891a      	ldrh	r2, [r3, #8]
 8002fd6:	7eb9      	ldrb	r1, [r7, #26]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f7ff fe70 	bl	8002cc0 <pub_ack_rec_rel_response>
 8002fe0:	e069      	b.n	80030b6 <mqtt_message_received+0x342>
      }
    }
  } else {
    if (length < 2) {
 8002fe2:	893b      	ldrh	r3, [r7, #8]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d974      	bls.n	80030d2 <mqtt_message_received+0x35e>
      LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short message\n"));
      goto out_disconnect;
    }
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 8002fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    pkt_id |= (u16_t)var_hdr_payload[1];
 8002ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (pkt_id == 0) {
 8003000:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003002:	2b00      	cmp	r3, #0
 8003004:	d067      	beq.n	80030d6 <mqtt_message_received+0x362>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8003006:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800300a:	2b05      	cmp	r3, #5
 800300c:	d106      	bne.n	800301c <mqtt_message_received+0x2a8>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 800300e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003010:	2301      	movs	r3, #1
 8003012:	2106      	movs	r1, #6
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f7ff fe53 	bl	8002cc0 <pub_ack_rec_rel_response>
 800301a:	e04c      	b.n	80030b6 <mqtt_message_received+0x342>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 800301c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003020:	2b06      	cmp	r3, #6
 8003022:	d10f      	bne.n	8003044 <mqtt_message_received+0x2d0>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8003024:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003026:	2300      	movs	r3, #0
 8003028:	2107      	movs	r1, #7
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f7ff fe48 	bl	8002cc0 <pub_ack_rec_rel_response>
 8003030:	e041      	b.n	80030b6 <mqtt_message_received+0x342>
 8003032:	bf00      	nop
 8003034:	08014f98 	.word	0x08014f98
 8003038:	080151b8 	.word	0x080151b8
 800303c:	08014ffc 	.word	0x08014ffc
 8003040:	080151dc 	.word	0x080151dc

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 8003044:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003048:	2b09      	cmp	r3, #9
 800304a:	d00b      	beq.n	8003064 <mqtt_message_received+0x2f0>
 800304c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003050:	2b0b      	cmp	r3, #11
 8003052:	d007      	beq.n	8003064 <mqtt_message_received+0x2f0>
 8003054:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003058:	2b07      	cmp	r3, #7
 800305a:	d003      	beq.n	8003064 <mqtt_message_received+0x2f0>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800305c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003060:	2b04      	cmp	r3, #4
 8003062:	d13a      	bne.n	80030da <mqtt_message_received+0x366>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3318      	adds	r3, #24
 8003068:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fb25 	bl	80026bc <mqtt_take_request>
 8003072:	6178      	str	r0, [r7, #20]
      if (r != NULL) {
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d01c      	beq.n	80030b4 <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800307a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800307e:	2b09      	cmp	r3, #9
 8003080:	d10a      	bne.n	8003098 <mqtt_message_received+0x324>
          if (length < 3) {
 8003082:	893b      	ldrh	r3, [r7, #8]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d92a      	bls.n	80030de <mqtt_message_received+0x36a>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incoming_suback(r, var_hdr_payload[2]);
 8003088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800308a:	3302      	adds	r3, #2
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	4619      	mov	r1, r3
 8003090:	6978      	ldr	r0, [r7, #20]
 8003092:	f7ff fe53 	bl	8002d3c <mqtt_incoming_suback>
 8003096:	e00a      	b.n	80030ae <mqtt_message_received+0x33a>
          }
        } else if (r->cb != NULL) {
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d006      	beq.n	80030ae <mqtt_message_received+0x33a>
          r->cb(r->arg, ERR_OK);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	6892      	ldr	r2, [r2, #8]
 80030a8:	2100      	movs	r1, #0
 80030aa:	4610      	mov	r0, r2
 80030ac:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 80030ae:	6978      	ldr	r0, [r7, #20]
 80030b0:	f7ff faf4 	bl	800269c <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 80030b4:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 80030b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030b8:	e014      	b.n	80030e4 <mqtt_message_received+0x370>
        goto out_disconnect;
 80030ba:	bf00      	nop
 80030bc:	e010      	b.n	80030e0 <mqtt_message_received+0x36c>
        goto out_disconnect;
 80030be:	bf00      	nop
 80030c0:	e00e      	b.n	80030e0 <mqtt_message_received+0x36c>
        goto out_disconnect;
 80030c2:	bf00      	nop
 80030c4:	e00c      	b.n	80030e0 <mqtt_message_received+0x36c>
        goto out_disconnect;
 80030c6:	bf00      	nop
 80030c8:	e00a      	b.n	80030e0 <mqtt_message_received+0x36c>
          goto out_disconnect;
 80030ca:	bf00      	nop
 80030cc:	e008      	b.n	80030e0 <mqtt_message_received+0x36c>
        goto out_disconnect;
 80030ce:	bf00      	nop
 80030d0:	e006      	b.n	80030e0 <mqtt_message_received+0x36c>
      goto out_disconnect;
 80030d2:	bf00      	nop
 80030d4:	e004      	b.n	80030e0 <mqtt_message_received+0x36c>
      goto out_disconnect;
 80030d6:	bf00      	nop
 80030d8:	e002      	b.n	80030e0 <mqtt_message_received+0x36c>
      goto out_disconnect;
 80030da:	bf00      	nop
 80030dc:	e000      	b.n	80030e0 <mqtt_message_received+0x36c>
            goto out_disconnect;
 80030de:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 80030e0:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	373c      	adds	r7, #60	; 0x3c
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd90      	pop	{r4, r7, pc}

080030ec <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_len = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 8003106:	e0b7      	b.n	8003278 <mqtt_parse_incoming+0x18c>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_len < 2) || ((b & 0x80) != 0)) {
 8003108:	7dfb      	ldrb	r3, [r7, #23]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d903      	bls.n	8003116 <mqtt_parse_incoming+0x2a>
 800310e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003112:	2b00      	cmp	r3, #0
 8003114:	da4f      	bge.n	80031b6 <mqtt_parse_incoming+0xca>

      if (fixed_hdr_len < client->msg_idx) {
 8003116:	7dfa      	ldrb	r2, [r7, #23]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800311c:	429a      	cmp	r2, r3
 800311e:	d206      	bcs.n	800312e <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_len];
 8003120:	7dfb      	ldrb	r3, [r7, #23]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800312a:	75bb      	strb	r3, [r7, #22]
 800312c:	e012      	b.n	8003154 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 800312e:	8bfb      	ldrh	r3, [r7, #30]
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	83fa      	strh	r2, [r7, #30]
 8003134:	4619      	mov	r1, r3
 8003136:	6838      	ldr	r0, [r7, #0]
 8003138:	f003 fb40 	bl	80067bc <pbuf_get_at>
 800313c:	4603      	mov	r3, r0
 800313e:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003144:	1c59      	adds	r1, r3, #1
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6691      	str	r1, [r2, #104]	; 0x68
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	7dba      	ldrb	r2, [r7, #22]
 8003150:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_len++;
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	3301      	adds	r3, #1
 8003158:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_len >= 2) {
 800315a:	7dfb      	ldrb	r3, [r7, #23]
 800315c:	2b01      	cmp	r3, #1
 800315e:	f240 808b 	bls.w	8003278 <mqtt_parse_incoming+0x18c>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_len - 2) * 7);
 8003162:	7dbb      	ldrb	r3, [r7, #22]
 8003164:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8003168:	7dfb      	ldrb	r3, [r7, #23]
 800316a:	1e9a      	subs	r2, r3, #2
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	fa01 f303 	lsl.w	r3, r1, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 800317c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003180:	2b00      	cmp	r3, #0
 8003182:	db79      	blt.n	8003278 <mqtt_parse_incoming+0x18c>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10d      	bne.n	80031a6 <mqtt_parse_incoming+0xba>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_len, 0, 0, NULL);
 800318a:	7df9      	ldrb	r1, [r7, #23]
 800318c:	2300      	movs	r3, #0
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	2300      	movs	r3, #0
 8003192:	2200      	movs	r2, #0
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff fded 	bl	8002d74 <mqtt_message_received>
            client->msg_idx = 0;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_len = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	75fb      	strb	r3, [r7, #23]
 80031a4:	e068      	b.n	8003278 <mqtt_parse_incoming+0x18c>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_len) - client->msg_idx;
 80031a6:	7dfa      	ldrb	r2, [r7, #23]
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	441a      	add	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_len >= 2) {
 80031b4:	e060      	b.n	8003278 <mqtt_parse_incoming+0x18c>
      u16_t cpy_len, buffer_space;
      u8_t *var_hdr_payload;
      mqtt_connection_status_t res;

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	891a      	ldrh	r2, [r3, #8]
 80031ba:	8bfb      	ldrh	r3, [r7, #30]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	b29b      	uxth	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d205      	bcs.n	80031d4 <mqtt_parse_incoming+0xe8>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	891a      	ldrh	r2, [r3, #8]
 80031cc:	8bfb      	ldrh	r3, [r7, #30]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	e001      	b.n	80031d8 <mqtt_parse_incoming+0xec>
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_len;
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80031e2:	827b      	strh	r3, [r7, #18]
      if (cpy_len > buffer_space) {
 80031e4:	8aba      	ldrh	r2, [r7, #20]
 80031e6:	8a7b      	ldrh	r3, [r7, #18]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d901      	bls.n	80031f0 <mqtt_parse_incoming+0x104>
        cpy_len = buffer_space;
 80031ec:	8a7b      	ldrh	r3, [r7, #18]
 80031ee:	82bb      	strh	r3, [r7, #20]
      }
      /* Adjust cpy_len to ensure zero-copy operation for remaining parts of current message */
      if (client->msg_idx >= MQTT_VAR_HEADER_BUFFER_LEN) {
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031f4:	2b7f      	cmp	r3, #127	; 0x7f
 80031f6:	d90c      	bls.n	8003212 <mqtt_parse_incoming+0x126>
        if (cpy_len > (p->len - in_offset))
 80031f8:	8aba      	ldrh	r2, [r7, #20]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	895b      	ldrh	r3, [r3, #10]
 80031fe:	4619      	mov	r1, r3
 8003200:	8bfb      	ldrh	r3, [r7, #30]
 8003202:	1acb      	subs	r3, r1, r3
 8003204:	429a      	cmp	r2, r3
 8003206:	dd04      	ble.n	8003212 <mqtt_parse_incoming+0x126>
          cpy_len = p->len - in_offset;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	895a      	ldrh	r2, [r3, #10]
 800320c:	8bfb      	ldrh	r3, [r7, #30]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	82bb      	strh	r3, [r7, #20]
      }
      var_hdr_payload = (u8_t*)pbuf_get_contiguous(p, client->rx_buffer + fixed_hdr_len,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8003218:	7dfb      	ldrb	r3, [r7, #23]
 800321a:	18d1      	adds	r1, r2, r3
 800321c:	8a7a      	ldrh	r2, [r7, #18]
 800321e:	8ab8      	ldrh	r0, [r7, #20]
 8003220:	8bfb      	ldrh	r3, [r7, #30]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	4603      	mov	r3, r0
 8003226:	6838      	ldr	r0, [r7, #0]
 8003228:	f003 f9ea 	bl	8006600 <pbuf_get_contiguous>
 800322c:	60f8      	str	r0, [r7, #12]
                                                   buffer_space, cpy_len, in_offset);

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003232:	8abb      	ldrh	r3, [r7, #20]
 8003234:	441a      	add	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 800323a:	8bfa      	ldrh	r2, [r7, #30]
 800323c:	8abb      	ldrh	r3, [r7, #20]
 800323e:	4413      	add	r3, r2
 8003240:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 8003242:	8abb      	ldrh	r3, [r7, #20]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      /* Whole or partial message received */
      res = mqtt_message_received(client, fixed_hdr_len, cpy_len, msg_rem_len, var_hdr_payload);
 800324a:	8aba      	ldrh	r2, [r7, #20]
 800324c:	7df9      	ldrb	r1, [r7, #23]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff fd8d 	bl	8002d74 <mqtt_message_received>
 800325a:	4603      	mov	r3, r0
 800325c:	817b      	strh	r3, [r7, #10]
      if (res != MQTT_CONNECT_ACCEPTED) {
 800325e:	897b      	ldrh	r3, [r7, #10]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <mqtt_parse_incoming+0x17c>
        return res;
 8003264:	897b      	ldrh	r3, [r7, #10]
 8003266:	e00e      	b.n	8003286 <mqtt_parse_incoming+0x19a>
      }
      if (msg_rem_len == 0) {
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d104      	bne.n	8003278 <mqtt_parse_incoming+0x18c>
        /* Reset parser state */
        client->msg_idx = 0;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	669a      	str	r2, [r3, #104]	; 0x68
        /* msg_tot_len = 0; */
        fixed_hdr_len = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	891b      	ldrh	r3, [r3, #8]
 800327c:	8bfa      	ldrh	r2, [r7, #30]
 800327e:	429a      	cmp	r2, r3
 8003280:	f4ff af42 	bcc.w	8003108 <mqtt_parse_incoming+0x1c>
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3720      	adds	r7, #32
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10b      	bne.n	80032c0 <mqtt_tcp_recv_cb+0x30>
 80032a8:	4b29      	ldr	r3, [pc, #164]	; (8003350 <mqtt_tcp_recv_cb+0xc0>)
 80032aa:	f240 32ae 	movw	r2, #942	; 0x3ae
 80032ae:	4929      	ldr	r1, [pc, #164]	; (8003354 <mqtt_tcp_recv_cb+0xc4>)
 80032b0:	4829      	ldr	r0, [pc, #164]	; (8003358 <mqtt_tcp_recv_cb+0xc8>)
 80032b2:	f010 fbd9 	bl	8013a68 <iprintf>
 80032b6:	2000      	movs	r0, #0
 80032b8:	f010 fcd8 	bl	8013c6c <fflush>
 80032bc:	f010 fc1d 	bl	8013afa <abort>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d00b      	beq.n	80032e2 <mqtt_tcp_recv_cb+0x52>
 80032ca:	4b21      	ldr	r3, [pc, #132]	; (8003350 <mqtt_tcp_recv_cb+0xc0>)
 80032cc:	f240 32af 	movw	r2, #943	; 0x3af
 80032d0:	4922      	ldr	r1, [pc, #136]	; (800335c <mqtt_tcp_recv_cb+0xcc>)
 80032d2:	4821      	ldr	r0, [pc, #132]	; (8003358 <mqtt_tcp_recv_cb+0xc8>)
 80032d4:	f010 fbc8 	bl	8013a68 <iprintf>
 80032d8:	2000      	movs	r0, #0
 80032da:	f010 fcc7 	bl	8013c6c <fflush>
 80032de:	f010 fc0c 	bl	8013afa <abort>

  if (p == NULL) {
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <mqtt_tcp_recv_cb+0x64>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 80032e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032ec:	6978      	ldr	r0, [r7, #20]
 80032ee:	f7ff fbe5 	bl	8002abc <mqtt_close>
 80032f2:	e027      	b.n	8003344 <mqtt_tcp_recv_cb+0xb4>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 80032f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <mqtt_tcp_recv_cb+0x78>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f002 fe9d 	bl	800603c <pbuf_free>
      return err;
 8003302:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003306:	e01e      	b.n	8003346 <mqtt_tcp_recv_cb+0xb6>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	891b      	ldrh	r3, [r3, #8]
 800330c:	4619      	mov	r1, r3
 800330e:	68b8      	ldr	r0, [r7, #8]
 8003310:	f003 fec8 	bl	80070a4 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	6978      	ldr	r0, [r7, #20]
 8003318:	f7ff fee8 	bl	80030ec <mqtt_parse_incoming>
 800331c:	4603      	mov	r3, r0
 800331e:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f002 fe8b 	bl	800603c <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 8003326:	8a7b      	ldrh	r3, [r7, #18]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d004      	beq.n	8003336 <mqtt_tcp_recv_cb+0xa6>
      mqtt_close(client, res);
 800332c:	8a7b      	ldrh	r3, [r7, #18]
 800332e:	4619      	mov	r1, r3
 8003330:	6978      	ldr	r0, [r7, #20]
 8003332:	f7ff fbc3 	bl	8002abc <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	885b      	ldrh	r3, [r3, #2]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <mqtt_tcp_recv_cb+0xb4>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2200      	movs	r2, #0
 8003342:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	08014f98 	.word	0x08014f98
 8003354:	080151f4 	.word	0x080151f4
 8003358:	08014ffc 	.word	0x08014ffc
 800335c:	08015218 	.word	0x08015218

08003360 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	7a9b      	ldrb	r3, [r3, #10]
 8003376:	2b03      	cmp	r3, #3
 8003378:	d127      	bne.n	80033ca <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2200      	movs	r2, #0
 800337e:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2200      	movs	r2, #0
 8003384:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8003386:	e00d      	b.n	80033a4 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d006      	beq.n	800339e <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	6892      	ldr	r2, [r2, #8]
 8003398:	2100      	movs	r1, #0
 800339a:	4610      	mov	r0, r2
 800339c:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800339e:	6938      	ldr	r0, [r7, #16]
 80033a0:	f7ff f97c 	bl	800269c <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	3318      	adds	r3, #24
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff f986 	bl	80026bc <mqtt_take_request>
 80033b0:	6138      	str	r0, [r7, #16]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e7      	bne.n	8003388 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	4619      	mov	r1, r3
 80033c4:	4610      	mov	r0, r2
 80033c6:	f7ff f80d 	bl	80023e4 <mqtt_output_send>
  }
  return ERR_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10b      	bne.n	8003402 <mqtt_tcp_err_cb+0x2e>
 80033ea:	4b0c      	ldr	r3, [pc, #48]	; (800341c <mqtt_tcp_err_cb+0x48>)
 80033ec:	f240 32fd 	movw	r2, #1021	; 0x3fd
 80033f0:	490b      	ldr	r1, [pc, #44]	; (8003420 <mqtt_tcp_err_cb+0x4c>)
 80033f2:	480c      	ldr	r0, [pc, #48]	; (8003424 <mqtt_tcp_err_cb+0x50>)
 80033f4:	f010 fb38 	bl	8013a68 <iprintf>
 80033f8:	2000      	movs	r0, #0
 80033fa:	f010 fc37 	bl	8013c6c <fflush>
 80033fe:	f010 fb7c 	bl	8013afa <abort>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = NULL;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8003408:	f44f 7180 	mov.w	r1, #256	; 0x100
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f7ff fb55 	bl	8002abc <mqtt_close>
}
 8003412:	bf00      	nop
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	08014f98 	.word	0x08014f98
 8003420:	08015240 	.word	0x08015240
 8003424:	08014ffc 	.word	0x08014ffc

08003428 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	7a9b      	ldrb	r3, [r3, #10]
 800343a:	2b03      	cmp	r3, #3
 800343c:	d105      	bne.n	800344a <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	33ec      	adds	r3, #236	; 0xec
 8003442:	6839      	ldr	r1, [r7, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7fe ffcd 	bl	80023e4 <mqtt_output_send>
  }
  return ERR_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	4613      	mov	r3, r2
 8003460:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 800346e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003472:	e025      	b.n	80034c0 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2200      	movs	r2, #0
 8003478:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 800347a:	4913      	ldr	r1, [pc, #76]	; (80034c8 <mqtt_tcp_connect_cb+0x74>)
 800347c:	68b8      	ldr	r0, [r7, #8]
 800347e:	f004 fe6b 	bl	8008158 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 8003482:	4912      	ldr	r1, [pc, #72]	; (80034cc <mqtt_tcp_connect_cb+0x78>)
 8003484:	68b8      	ldr	r0, [r7, #8]
 8003486:	f004 fe8d 	bl	80081a4 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 800348a:	2202      	movs	r2, #2
 800348c:	4910      	ldr	r1, [pc, #64]	; (80034d0 <mqtt_tcp_connect_cb+0x7c>)
 800348e:	68b8      	ldr	r0, [r7, #8]
 8003490:	f004 fed4 	bl	800823c <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2202      	movs	r2, #2
 8003498:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	490d      	ldr	r1, [pc, #52]	; (80034d4 <mqtt_tcp_connect_cb+0x80>)
 800349e:	f241 3088 	movw	r0, #5000	; 0x1388
 80034a2:	f009 ff73 	bl	800d38c <sys_timeout>
  client->cyclic_tick = 0;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2200      	movs	r2, #0
 80034aa:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	4619      	mov	r1, r3
 80034b8:	4610      	mov	r0, r2
 80034ba:	f7fe ff93 	bl	80023e4 <mqtt_output_send>

  return ERR_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	08003291 	.word	0x08003291
 80034cc:	08003361 	.word	0x08003361
 80034d0:	08003429 	.word	0x08003429
 80034d4:	08002b89 	.word	0x08002b89

080034d8 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08c      	sub	sp, #48	; 0x30
 80034dc:	af02      	add	r7, sp, #8
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10b      	bne.n	8003504 <mqtt_publish+0x2c>
 80034ec:	4b62      	ldr	r3, [pc, #392]	; (8003678 <mqtt_publish+0x1a0>)
 80034ee:	f240 425b 	movw	r2, #1115	; 0x45b
 80034f2:	4962      	ldr	r1, [pc, #392]	; (800367c <mqtt_publish+0x1a4>)
 80034f4:	4862      	ldr	r0, [pc, #392]	; (8003680 <mqtt_publish+0x1a8>)
 80034f6:	f010 fab7 	bl	8013a68 <iprintf>
 80034fa:	2000      	movs	r0, #0
 80034fc:	f010 fbb6 	bl	8013c6c <fflush>
 8003500:	f010 fafb 	bl	8013afa <abort>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10b      	bne.n	8003522 <mqtt_publish+0x4a>
 800350a:	4b5b      	ldr	r3, [pc, #364]	; (8003678 <mqtt_publish+0x1a0>)
 800350c:	f240 425c 	movw	r2, #1116	; 0x45c
 8003510:	495c      	ldr	r1, [pc, #368]	; (8003684 <mqtt_publish+0x1ac>)
 8003512:	485b      	ldr	r0, [pc, #364]	; (8003680 <mqtt_publish+0x1a8>)
 8003514:	f010 faa8 	bl	8013a68 <iprintf>
 8003518:	2000      	movs	r0, #0
 800351a:	f010 fba7 	bl	8013c6c <fflush>
 800351e:	f010 faec 	bl	8013afa <abort>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	7a9b      	ldrb	r3, [r3, #10]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <mqtt_publish+0x66>
 800352a:	4b53      	ldr	r3, [pc, #332]	; (8003678 <mqtt_publish+0x1a0>)
 800352c:	f240 425d 	movw	r2, #1117	; 0x45d
 8003530:	4955      	ldr	r1, [pc, #340]	; (8003688 <mqtt_publish+0x1b0>)
 8003532:	4853      	ldr	r0, [pc, #332]	; (8003680 <mqtt_publish+0x1a8>)
 8003534:	f7fe fc71 	bl	8001e1a <lwip_win32_platform_diag>
 8003538:	f06f 030a 	mvn.w	r3, #10
 800353c:	e097      	b.n	800366e <mqtt_publish+0x196>

  topic_strlen = strlen(topic);
 800353e:	68b8      	ldr	r0, [r7, #8]
 8003540:	f7fc fe50 	bl	80001e4 <strlen>
 8003544:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800354c:	4293      	cmp	r3, r2
 800354e:	d909      	bls.n	8003564 <mqtt_publish+0x8c>
 8003550:	4b49      	ldr	r3, [pc, #292]	; (8003678 <mqtt_publish+0x1a0>)
 8003552:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8003556:	494d      	ldr	r1, [pc, #308]	; (800368c <mqtt_publish+0x1b4>)
 8003558:	4849      	ldr	r0, [pc, #292]	; (8003680 <mqtt_publish+0x1a8>)
 800355a:	f7fe fc5e 	bl	8001e1a <lwip_win32_platform_diag>
 800355e:	f06f 030f 	mvn.w	r3, #15
 8003562:	e084      	b.n	800366e <mqtt_publish+0x196>
  topic_len = (u16_t)topic_strlen;
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 8003568:	8b7b      	ldrh	r3, [r7, #26]
 800356a:	1c9a      	adds	r2, r3, #2
 800356c:	887b      	ldrh	r3, [r7, #2]
 800356e:	4413      	add	r3, r2
 8003570:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 8003572:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003576:	2b00      	cmp	r3, #0
 8003578:	d008      	beq.n	800358c <mqtt_publish+0xb4>
    total_len += 2;
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	3302      	adds	r3, #2
 800357e:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f7fe fe97 	bl	80022b4 <msg_generate_packet_id>
 8003586:	4603      	mov	r3, r0
 8003588:	84fb      	strh	r3, [r7, #38]	; 0x26
 800358a:	e001      	b.n	8003590 <mqtt_publish+0xb8>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003596:	d309      	bcc.n	80035ac <mqtt_publish+0xd4>
 8003598:	4b37      	ldr	r3, [pc, #220]	; (8003678 <mqtt_publish+0x1a0>)
 800359a:	f240 426c 	movw	r2, #1132	; 0x46c
 800359e:	493c      	ldr	r1, [pc, #240]	; (8003690 <mqtt_publish+0x1b8>)
 80035a0:	4837      	ldr	r0, [pc, #220]	; (8003680 <mqtt_publish+0x1a8>)
 80035a2:	f7fe fc3a 	bl	8001e1a <lwip_win32_platform_diag>
 80035a6:	f06f 030f 	mvn.w	r3, #15
 80035aa:	e060      	b.n	800366e <mqtt_publish+0x196>
  remaining_length = (u16_t)total_len;
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f103 001c 	add.w	r0, r3, #28
 80035b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80035b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035be:	2104      	movs	r1, #4
 80035c0:	f7fe ffca 	bl	8002558 <mqtt_create_request>
 80035c4:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d102      	bne.n	80035d2 <mqtt_publish+0xfa>
    return ERR_MEM;
 80035cc:	f04f 33ff 	mov.w	r3, #4294967295
 80035d0:	e04d      	b.n	800366e <mqtt_publish+0x196>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	33ec      	adds	r3, #236	; 0xec
 80035d6:	8b3a      	ldrh	r2, [r7, #24]
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fa36 	bl	8002a4c <mqtt_output_check_space>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <mqtt_publish+0x11a>
    mqtt_delete_request(r);
 80035e6:	6978      	ldr	r0, [r7, #20]
 80035e8:	f7ff f858 	bl	800269c <mqtt_delete_request>
    return ERR_MEM;
 80035ec:	f04f 33ff 	mov.w	r3, #4294967295
 80035f0:	e03d      	b.n	800366e <mqtt_publish+0x196>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80035f8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80035fc:	8b3b      	ldrh	r3, [r7, #24]
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	4613      	mov	r3, r2
 8003608:	2200      	movs	r2, #0
 800360a:	2103      	movs	r1, #3
 800360c:	f7ff f9d5 	bl	80029ba <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	33ec      	adds	r3, #236	; 0xec
 8003614:	8b7a      	ldrh	r2, [r7, #26]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff f9a3 	bl	8002964 <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 800361e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003622:	2b00      	cmp	r3, #0
 8003624:	d006      	beq.n	8003634 <mqtt_publish+0x15c>
    mqtt_output_append_u16(&client->output, pkt_id);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	33ec      	adds	r3, #236	; 0xec
 800362a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800362c:	4611      	mov	r1, r2
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff f963 	bl	80028fa <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <mqtt_publish+0x176>
 800363a:	887b      	ldrh	r3, [r7, #2]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d006      	beq.n	800364e <mqtt_publish+0x176>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	33ec      	adds	r3, #236	; 0xec
 8003644:	887a      	ldrh	r2, [r7, #2]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff f96e 	bl	800292a <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	3318      	adds	r3, #24
 8003652:	6979      	ldr	r1, [r7, #20]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fe ffcb 	bl	80025f0 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f7fe febc 	bl	80023e4 <mqtt_output_send>
  return ERR_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3728      	adds	r7, #40	; 0x28
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	08014f98 	.word	0x08014f98
 800367c:	08015260 	.word	0x08015260
 8003680:	08014ffc 	.word	0x08014ffc
 8003684:	08015280 	.word	0x08015280
 8003688:	0801529c 	.word	0x0801529c
 800368c:	080152bc 	.word	0x080152bc
 8003690:	080152e0 	.word	0x080152e0

08003694 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08c      	sub	sp, #48	; 0x30
 8003698:	af02      	add	r7, sp, #8
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	4613      	mov	r3, r2
 80036a2:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10b      	bne.n	80036c2 <mqtt_sub_unsub+0x2e>
 80036aa:	4b65      	ldr	r3, [pc, #404]	; (8003840 <mqtt_sub_unsub+0x1ac>)
 80036ac:	f240 42a6 	movw	r2, #1190	; 0x4a6
 80036b0:	4964      	ldr	r1, [pc, #400]	; (8003844 <mqtt_sub_unsub+0x1b0>)
 80036b2:	4865      	ldr	r0, [pc, #404]	; (8003848 <mqtt_sub_unsub+0x1b4>)
 80036b4:	f010 f9d8 	bl	8013a68 <iprintf>
 80036b8:	2000      	movs	r0, #0
 80036ba:	f010 fad7 	bl	8013c6c <fflush>
 80036be:	f010 fa1c 	bl	8013afa <abort>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10b      	bne.n	80036e0 <mqtt_sub_unsub+0x4c>
 80036c8:	4b5d      	ldr	r3, [pc, #372]	; (8003840 <mqtt_sub_unsub+0x1ac>)
 80036ca:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80036ce:	495f      	ldr	r1, [pc, #380]	; (800384c <mqtt_sub_unsub+0x1b8>)
 80036d0:	485d      	ldr	r0, [pc, #372]	; (8003848 <mqtt_sub_unsub+0x1b4>)
 80036d2:	f010 f9c9 	bl	8013a68 <iprintf>
 80036d6:	2000      	movs	r0, #0
 80036d8:	f010 fac8 	bl	8013c6c <fflush>
 80036dc:	f010 fa0d 	bl	8013afa <abort>

  topic_strlen = strlen(topic);
 80036e0:	68b8      	ldr	r0, [r7, #8]
 80036e2:	f7fc fd7f 	bl	80001e4 <strlen>
 80036e6:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d909      	bls.n	8003706 <mqtt_sub_unsub+0x72>
 80036f2:	4b53      	ldr	r3, [pc, #332]	; (8003840 <mqtt_sub_unsub+0x1ac>)
 80036f4:	f240 42aa 	movw	r2, #1194	; 0x4aa
 80036f8:	4955      	ldr	r1, [pc, #340]	; (8003850 <mqtt_sub_unsub+0x1bc>)
 80036fa:	4853      	ldr	r0, [pc, #332]	; (8003848 <mqtt_sub_unsub+0x1b4>)
 80036fc:	f7fe fb8d 	bl	8001e1a <lwip_win32_platform_diag>
 8003700:	f06f 030f 	mvn.w	r3, #15
 8003704:	e098      	b.n	8003838 <mqtt_sub_unsub+0x1a4>
  topic_len = (u16_t)topic_strlen;
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 800370a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800370c:	3304      	adds	r3, #4
 800370e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003712:	2a00      	cmp	r2, #0
 8003714:	bf14      	ite	ne
 8003716:	2201      	movne	r2, #1
 8003718:	2200      	moveq	r2, #0
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	4413      	add	r3, r2
 800371e:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003726:	d309      	bcc.n	800373c <mqtt_sub_unsub+0xa8>
 8003728:	4b45      	ldr	r3, [pc, #276]	; (8003840 <mqtt_sub_unsub+0x1ac>)
 800372a:	f240 42ae 	movw	r2, #1198	; 0x4ae
 800372e:	4949      	ldr	r1, [pc, #292]	; (8003854 <mqtt_sub_unsub+0x1c0>)
 8003730:	4845      	ldr	r0, [pc, #276]	; (8003848 <mqtt_sub_unsub+0x1b4>)
 8003732:	f7fe fb72 	bl	8001e1a <lwip_win32_platform_diag>
 8003736:	f06f 030f 	mvn.w	r3, #15
 800373a:	e07d      	b.n	8003838 <mqtt_sub_unsub+0x1a4>
  remaining_length = (u16_t)total_len;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d90b      	bls.n	800375e <mqtt_sub_unsub+0xca>
 8003746:	4b3e      	ldr	r3, [pc, #248]	; (8003840 <mqtt_sub_unsub+0x1ac>)
 8003748:	f240 42b1 	movw	r2, #1201	; 0x4b1
 800374c:	4942      	ldr	r1, [pc, #264]	; (8003858 <mqtt_sub_unsub+0x1c4>)
 800374e:	483e      	ldr	r0, [pc, #248]	; (8003848 <mqtt_sub_unsub+0x1b4>)
 8003750:	f010 f98a 	bl	8013a68 <iprintf>
 8003754:	2000      	movs	r0, #0
 8003756:	f010 fa89 	bl	8013c6c <fflush>
 800375a:	f010 f9ce 	bl	8013afa <abort>
  if (client->conn_state == TCP_DISCONNECTED) {
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	7a9b      	ldrb	r3, [r3, #10]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <mqtt_sub_unsub+0xd8>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 8003766:	f06f 030a 	mvn.w	r3, #10
 800376a:	e065      	b.n	8003838 <mqtt_sub_unsub+0x1a4>
  }

  pkt_id = msg_generate_packet_id(client);
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f7fe fda1 	bl	80022b4 <msg_generate_packet_id>
 8003772:	4603      	mov	r3, r0
 8003774:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f103 001c 	add.w	r0, r3, #28
 800377c:	8b3a      	ldrh	r2, [r7, #24]
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2104      	movs	r1, #4
 8003786:	f7fe fee7 	bl	8002558 <mqtt_create_request>
 800378a:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d102      	bne.n	8003798 <mqtt_sub_unsub+0x104>
    return ERR_MEM;
 8003792:	f04f 33ff 	mov.w	r3, #4294967295
 8003796:	e04f      	b.n	8003838 <mqtt_sub_unsub+0x1a4>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	33ec      	adds	r3, #236	; 0xec
 800379c:	8b7a      	ldrh	r2, [r7, #26]
 800379e:	4611      	mov	r1, r2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff f953 	bl	8002a4c <mqtt_output_check_space>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <mqtt_sub_unsub+0x124>
    mqtt_delete_request(r);
 80037ac:	6978      	ldr	r0, [r7, #20]
 80037ae:	f7fe ff75 	bl	800269c <mqtt_delete_request>
    return ERR_MEM;
 80037b2:	f04f 33ff 	mov.w	r3, #4294967295
 80037b6:	e03f      	b.n	8003838 <mqtt_sub_unsub+0x1a4>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80037be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <mqtt_sub_unsub+0x136>
 80037c6:	2108      	movs	r1, #8
 80037c8:	e000      	b.n	80037cc <mqtt_sub_unsub+0x138>
 80037ca:	210a      	movs	r1, #10
 80037cc:	8b7b      	ldrh	r3, [r7, #26]
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	2300      	movs	r3, #0
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	2301      	movs	r3, #1
 80037d6:	2200      	movs	r2, #0
 80037d8:	f7ff f8ef 	bl	80029ba <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	33ec      	adds	r3, #236	; 0xec
 80037e0:	8b3a      	ldrh	r2, [r7, #24]
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff f888 	bl	80028fa <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	33ec      	adds	r3, #236	; 0xec
 80037ee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80037f0:	68b9      	ldr	r1, [r7, #8]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff f8b6 	bl	8002964 <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 80037f8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00b      	beq.n	8003818 <mqtt_sub_unsub+0x184>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	2b02      	cmp	r3, #2
 800380a:	bf28      	it	cs
 800380c:	2302      	movcs	r3, #2
 800380e:	b2db      	uxtb	r3, r3
 8003810:	4619      	mov	r1, r3
 8003812:	4610      	mov	r0, r2
 8003814:	f7ff f862 	bl	80028dc <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	3318      	adds	r3, #24
 800381c:	6979      	ldr	r1, [r7, #20]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe fee6 	bl	80025f0 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f7fe fdd7 	bl	80023e4 <mqtt_output_send>
  return ERR_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3728      	adds	r7, #40	; 0x28
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	08014f98 	.word	0x08014f98
 8003844:	08015304 	.word	0x08015304
 8003848:	08014ffc 	.word	0x08014ffc
 800384c:	08015324 	.word	0x08015324
 8003850:	08015344 	.word	0x08015344
 8003854:	0801536c 	.word	0x0801536c
 8003858:	08015394 	.word	0x08015394

0800385c <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10b      	bne.n	8003888 <mqtt_set_inpub_callback+0x2c>
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <mqtt_set_inpub_callback+0x48>)
 8003872:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8003876:	490c      	ldr	r1, [pc, #48]	; (80038a8 <mqtt_set_inpub_callback+0x4c>)
 8003878:	480c      	ldr	r0, [pc, #48]	; (80038ac <mqtt_set_inpub_callback+0x50>)
 800387a:	f010 f8f5 	bl	8013a68 <iprintf>
 800387e:	2000      	movs	r0, #0
 8003880:	f010 f9f4 	bl	8013c6c <fflush>
 8003884:	f010 f939 	bl	8013afa <abort>
  client->data_cb = data_cb;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	08014f98 	.word	0x08014f98
 80038a8:	080153ac 	.word	0x080153ac
 80038ac:	08014ffc 	.word	0x08014ffc

080038b0 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 80038b4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80038b8:	2001      	movs	r0, #1
 80038ba:	f001 fc95 	bl	80051e8 <mem_calloc>
 80038be:	4603      	mov	r3, r0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08e      	sub	sp, #56	; 0x38
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	4613      	mov	r3, r2
 80038d2:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 80038d4:	230a      	movs	r3, #10
 80038d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 80038d8:	2300      	movs	r3, #0
 80038da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038de:	2300      	movs	r3, #0
 80038e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  u16_t client_user_len = 0, client_pass_len = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80038ee:	2300      	movs	r3, #0
 80038f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mqtt_incoming_data_cb_t data_cb;
  mqtt_incoming_publish_cb_t pub_cb;
  void *inpub_arg;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10b      	bne.n	8003910 <mqtt_client_connect+0x4c>
 80038f8:	4bab      	ldr	r3, [pc, #684]	; (8003ba8 <mqtt_client_connect+0x2e4>)
 80038fa:	f240 5219 	movw	r2, #1305	; 0x519
 80038fe:	49ab      	ldr	r1, [pc, #684]	; (8003bac <mqtt_client_connect+0x2e8>)
 8003900:	48ab      	ldr	r0, [pc, #684]	; (8003bb0 <mqtt_client_connect+0x2ec>)
 8003902:	f010 f8b1 	bl	8013a68 <iprintf>
 8003906:	2000      	movs	r0, #0
 8003908:	f010 f9b0 	bl	8013c6c <fflush>
 800390c:	f010 f8f5 	bl	8013afa <abort>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10b      	bne.n	800392e <mqtt_client_connect+0x6a>
 8003916:	4ba4      	ldr	r3, [pc, #656]	; (8003ba8 <mqtt_client_connect+0x2e4>)
 8003918:	f240 521a 	movw	r2, #1306	; 0x51a
 800391c:	49a5      	ldr	r1, [pc, #660]	; (8003bb4 <mqtt_client_connect+0x2f0>)
 800391e:	48a4      	ldr	r0, [pc, #656]	; (8003bb0 <mqtt_client_connect+0x2ec>)
 8003920:	f010 f8a2 	bl	8013a68 <iprintf>
 8003924:	2000      	movs	r0, #0
 8003926:	f010 f9a1 	bl	8013c6c <fflush>
 800392a:	f010 f8e6 	bl	8013afa <abort>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 800392e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10b      	bne.n	800394c <mqtt_client_connect+0x88>
 8003934:	4b9c      	ldr	r3, [pc, #624]	; (8003ba8 <mqtt_client_connect+0x2e4>)
 8003936:	f240 521b 	movw	r2, #1307	; 0x51b
 800393a:	499f      	ldr	r1, [pc, #636]	; (8003bb8 <mqtt_client_connect+0x2f4>)
 800393c:	489c      	ldr	r0, [pc, #624]	; (8003bb0 <mqtt_client_connect+0x2ec>)
 800393e:	f010 f893 	bl	8013a68 <iprintf>
 8003942:	2000      	movs	r0, #0
 8003944:	f010 f992 	bl	8013c6c <fflush>
 8003948:	f010 f8d7 	bl	8013afa <abort>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 800394c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10b      	bne.n	800396c <mqtt_client_connect+0xa8>
 8003954:	4b94      	ldr	r3, [pc, #592]	; (8003ba8 <mqtt_client_connect+0x2e4>)
 8003956:	f240 521c 	movw	r2, #1308	; 0x51c
 800395a:	4998      	ldr	r1, [pc, #608]	; (8003bbc <mqtt_client_connect+0x2f8>)
 800395c:	4894      	ldr	r0, [pc, #592]	; (8003bb0 <mqtt_client_connect+0x2ec>)
 800395e:	f010 f883 	bl	8013a68 <iprintf>
 8003962:	2000      	movs	r0, #0
 8003964:	f010 f982 	bl	8013c6c <fflush>
 8003968:	f010 f8c7 	bl	8013afa <abort>

  if (client->conn_state != TCP_DISCONNECTED) {
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	7a9b      	ldrb	r3, [r3, #10]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <mqtt_client_connect+0xb6>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8003974:	f06f 0309 	mvn.w	r3, #9
 8003978:	e23a      	b.n	8003df0 <mqtt_client_connect+0x52c>
  }

  /* Wipe clean, but keep callbacks */
  data_cb = client->data_cb;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397e:	623b      	str	r3, [r7, #32]
  pub_cb = client->pub_cb;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003984:	61fb      	str	r3, [r7, #28]
  inpub_arg = client->inpub_arg;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398a:	61bb      	str	r3, [r7, #24]
  memset(client, 0, sizeof(mqtt_client_t));
 800398c:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8003990:	2100      	movs	r1, #0
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f010 fa8f 	bl	8013eb6 <memset>
  client->data_cb = data_cb;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a3a      	ldr	r2, [r7, #32]
 800399c:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	69fa      	ldr	r2, [r7, #28]
 80039a2:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = inpub_arg;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	65da      	str	r2, [r3, #92]	; 0x5c

  client->connect_arg = arg;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039ae:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 80039b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b8:	899a      	ldrh	r2, [r3, #12]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	331c      	adds	r3, #28
 80039c2:	2104      	movs	r1, #4
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fe ff57 	bl	8002878 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 80039ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d07c      	beq.n	8003acc <mqtt_client_connect+0x208>
 80039d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d078      	beq.n	8003acc <mqtt_client_connect+0x208>
    flags |= MQTT_CONNECT_FLAG_WILL;
 80039da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039de:	f043 0304 	orr.w	r3, r3, #4
 80039e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    flags |= (client_info->will_qos & 3) << 3;
 80039e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e8:	7e5b      	ldrb	r3, [r3, #25]
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	b25b      	sxtb	r3, r3
 80039ee:	f003 0318 	and.w	r3, r3, #24
 80039f2:	b25a      	sxtb	r2, r3
 80039f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80039f8:	4313      	orrs	r3, r2
 80039fa:	b25b      	sxtb	r3, r3
 80039fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (client_info->will_retain) {
 8003a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a02:	7e9b      	ldrb	r3, [r3, #26]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <mqtt_client_connect+0x150>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8003a08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a0c:	f043 0320 	orr.w	r3, r3, #32
 8003a10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
    len = strlen(client_info->will_topic);
 8003a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fc fbe3 	bl	80001e4 <strlen>
 8003a1e:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2bff      	cmp	r3, #255	; 0xff
 8003a24:	d909      	bls.n	8003a3a <mqtt_client_connect+0x176>
 8003a26:	4b60      	ldr	r3, [pc, #384]	; (8003ba8 <mqtt_client_connect+0x2e4>)
 8003a28:	f240 5239 	movw	r2, #1337	; 0x539
 8003a2c:	4964      	ldr	r1, [pc, #400]	; (8003bc0 <mqtt_client_connect+0x2fc>)
 8003a2e:	4860      	ldr	r0, [pc, #384]	; (8003bb0 <mqtt_client_connect+0x2ec>)
 8003a30:	f7fe f9f3 	bl	8001e1a <lwip_win32_platform_diag>
 8003a34:	f06f 0305 	mvn.w	r3, #5
 8003a38:	e1da      	b.n	8003df0 <mqtt_client_connect+0x52c>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <mqtt_client_connect+0x190>
 8003a40:	4b59      	ldr	r3, [pc, #356]	; (8003ba8 <mqtt_client_connect+0x2e4>)
 8003a42:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a46:	495f      	ldr	r1, [pc, #380]	; (8003bc4 <mqtt_client_connect+0x300>)
 8003a48:	4859      	ldr	r0, [pc, #356]	; (8003bb0 <mqtt_client_connect+0x2ec>)
 8003a4a:	f7fe f9e6 	bl	8001e1a <lwip_win32_platform_diag>
 8003a4e:	f06f 0305 	mvn.w	r3, #5
 8003a52:	e1cd      	b.n	8003df0 <mqtt_client_connect+0x52c>
    will_topic_len = (u8_t)len;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    if (client_info->will_msg_len == 0)
 8003a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a5c:	7e1b      	ldrb	r3, [r3, #24]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d116      	bne.n	8003a90 <mqtt_client_connect+0x1cc>
    {
        len = strlen(client_info->will_msg);
 8003a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fc fbbc 	bl	80001e4 <strlen>
 8003a6c:	6178      	str	r0, [r7, #20]
        LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2bff      	cmp	r3, #255	; 0xff
 8003a72:	d909      	bls.n	8003a88 <mqtt_client_connect+0x1c4>
 8003a74:	4b4c      	ldr	r3, [pc, #304]	; (8003ba8 <mqtt_client_connect+0x2e4>)
 8003a76:	f240 523f 	movw	r2, #1343	; 0x53f
 8003a7a:	4953      	ldr	r1, [pc, #332]	; (8003bc8 <mqtt_client_connect+0x304>)
 8003a7c:	484c      	ldr	r0, [pc, #304]	; (8003bb0 <mqtt_client_connect+0x2ec>)
 8003a7e:	f7fe f9cc 	bl	8001e1a <lwip_win32_platform_diag>
 8003a82:	f06f 0305 	mvn.w	r3, #5
 8003a86:	e1b3      	b.n	8003df0 <mqtt_client_connect+0x52c>
        will_msg_len = (u8_t)len;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8003a8e:	e003      	b.n	8003a98 <mqtt_client_connect+0x1d4>
    }
    else
    {
        will_msg_len = client_info->will_msg_len;
 8003a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a92:	7e1b      	ldrb	r3, [r3, #24]
 8003a94:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8003a98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003a9a:	1c9a      	adds	r2, r3, #2
 8003a9c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003aa0:	4413      	add	r3, r2
 8003aa2:	1c9a      	adds	r2, r3, #2
 8003aa4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003aa8:	4413      	add	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab2:	d309      	bcc.n	8003ac8 <mqtt_client_connect+0x204>
 8003ab4:	4b3c      	ldr	r3, [pc, #240]	; (8003ba8 <mqtt_client_connect+0x2e4>)
 8003ab6:	f240 5247 	movw	r2, #1351	; 0x547
 8003aba:	4944      	ldr	r1, [pc, #272]	; (8003bcc <mqtt_client_connect+0x308>)
 8003abc:	483c      	ldr	r0, [pc, #240]	; (8003bb0 <mqtt_client_connect+0x2ec>)
 8003abe:	f7fe f9ac 	bl	8001e1a <lwip_win32_platform_diag>
 8003ac2:	f06f 0305 	mvn.w	r3, #5
 8003ac6:	e193      	b.n	8003df0 <mqtt_client_connect+0x52c>
    remaining_length = (u16_t)len;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }
  if (client_info->client_user != NULL) {
 8003acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d03d      	beq.n	8003b50 <mqtt_client_connect+0x28c>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 8003ad4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ad8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003adc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    len = strlen(client_info->client_user);
 8003ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fc fb7d 	bl	80001e4 <strlen>
 8003aea:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af2:	d309      	bcc.n	8003b08 <mqtt_client_connect+0x244>
 8003af4:	4b2c      	ldr	r3, [pc, #176]	; (8003ba8 <mqtt_client_connect+0x2e4>)
 8003af6:	f240 524d 	movw	r2, #1357	; 0x54d
 8003afa:	4935      	ldr	r1, [pc, #212]	; (8003bd0 <mqtt_client_connect+0x30c>)
 8003afc:	482c      	ldr	r0, [pc, #176]	; (8003bb0 <mqtt_client_connect+0x2ec>)
 8003afe:	f7fe f98c 	bl	8001e1a <lwip_win32_platform_diag>
 8003b02:	f06f 0305 	mvn.w	r3, #5
 8003b06:	e173      	b.n	8003df0 <mqtt_client_connect+0x52c>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <mqtt_client_connect+0x25e>
 8003b0e:	4b26      	ldr	r3, [pc, #152]	; (8003ba8 <mqtt_client_connect+0x2e4>)
 8003b10:	f240 524e 	movw	r2, #1358	; 0x54e
 8003b14:	492f      	ldr	r1, [pc, #188]	; (8003bd4 <mqtt_client_connect+0x310>)
 8003b16:	4826      	ldr	r0, [pc, #152]	; (8003bb0 <mqtt_client_connect+0x2ec>)
 8003b18:	f7fe f97f 	bl	8001e1a <lwip_win32_platform_diag>
 8003b1c:	f06f 0305 	mvn.w	r3, #5
 8003b20:	e166      	b.n	8003df0 <mqtt_client_connect+0x52c>
    client_user_len = (u16_t)len;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	84fb      	strh	r3, [r7, #38]	; 0x26
    len = remaining_length + 2 + client_user_len;
 8003b26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003b28:	1c9a      	adds	r2, r3, #2
 8003b2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b2c:	4413      	add	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b36:	d309      	bcc.n	8003b4c <mqtt_client_connect+0x288>
 8003b38:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <mqtt_client_connect+0x2e4>)
 8003b3a:	f240 5251 	movw	r2, #1361	; 0x551
 8003b3e:	4923      	ldr	r1, [pc, #140]	; (8003bcc <mqtt_client_connect+0x308>)
 8003b40:	481b      	ldr	r0, [pc, #108]	; (8003bb0 <mqtt_client_connect+0x2ec>)
 8003b42:	f7fe f96a 	bl	8001e1a <lwip_win32_platform_diag>
 8003b46:	f06f 0305 	mvn.w	r3, #5
 8003b4a:	e151      	b.n	8003df0 <mqtt_client_connect+0x52c>
    remaining_length = (u16_t)len;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }
  if (client_info->client_pass != NULL) {
 8003b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d05a      	beq.n	8003c0e <mqtt_client_connect+0x34a>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8003b58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    len = strlen(client_info->client_pass);
 8003b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fc fb3b 	bl	80001e4 <strlen>
 8003b6e:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b76:	d309      	bcc.n	8003b8c <mqtt_client_connect+0x2c8>
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <mqtt_client_connect+0x2e4>)
 8003b7a:	f240 5257 	movw	r2, #1367	; 0x557
 8003b7e:	4916      	ldr	r1, [pc, #88]	; (8003bd8 <mqtt_client_connect+0x314>)
 8003b80:	480b      	ldr	r0, [pc, #44]	; (8003bb0 <mqtt_client_connect+0x2ec>)
 8003b82:	f7fe f94a 	bl	8001e1a <lwip_win32_platform_diag>
 8003b86:	f06f 0305 	mvn.w	r3, #5
 8003b8a:	e131      	b.n	8003df0 <mqtt_client_connect+0x52c>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d126      	bne.n	8003be0 <mqtt_client_connect+0x31c>
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <mqtt_client_connect+0x2e4>)
 8003b94:	f44f 62ab 	mov.w	r2, #1368	; 0x558
 8003b98:	4910      	ldr	r1, [pc, #64]	; (8003bdc <mqtt_client_connect+0x318>)
 8003b9a:	4805      	ldr	r0, [pc, #20]	; (8003bb0 <mqtt_client_connect+0x2ec>)
 8003b9c:	f7fe f93d 	bl	8001e1a <lwip_win32_platform_diag>
 8003ba0:	f06f 0305 	mvn.w	r3, #5
 8003ba4:	e124      	b.n	8003df0 <mqtt_client_connect+0x52c>
 8003ba6:	bf00      	nop
 8003ba8:	08014f98 	.word	0x08014f98
 8003bac:	080153d4 	.word	0x080153d4
 8003bb0:	08014ffc 	.word	0x08014ffc
 8003bb4:	080153f8 	.word	0x080153f8
 8003bb8:	08015420 	.word	0x08015420
 8003bbc:	0801544c 	.word	0x0801544c
 8003bc0:	08015480 	.word	0x08015480
 8003bc4:	080154c0 	.word	0x080154c0
 8003bc8:	08015500 	.word	0x08015500
 8003bcc:	0801553c 	.word	0x0801553c
 8003bd0:	0801556c 	.word	0x0801556c
 8003bd4:	080155ac 	.word	0x080155ac
 8003bd8:	080155f0 	.word	0x080155f0
 8003bdc:	08015630 	.word	0x08015630
    client_pass_len = (u16_t)len;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	84bb      	strh	r3, [r7, #36]	; 0x24
    len = remaining_length + 2 + client_pass_len;
 8003be4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003be6:	1c9a      	adds	r2, r3, #2
 8003be8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bea:	4413      	add	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf4:	d309      	bcc.n	8003c0a <mqtt_client_connect+0x346>
 8003bf6:	4b80      	ldr	r3, [pc, #512]	; (8003df8 <mqtt_client_connect+0x534>)
 8003bf8:	f240 525b 	movw	r2, #1371	; 0x55b
 8003bfc:	497f      	ldr	r1, [pc, #508]	; (8003dfc <mqtt_client_connect+0x538>)
 8003bfe:	4880      	ldr	r0, [pc, #512]	; (8003e00 <mqtt_client_connect+0x53c>)
 8003c00:	f7fe f90b 	bl	8001e1a <lwip_win32_platform_diag>
 8003c04:	f06f 0305 	mvn.w	r3, #5
 8003c08:	e0f2      	b.n	8003df0 <mqtt_client_connect+0x52c>
    remaining_length = (u16_t)len;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8003c0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c12:	f043 0302 	orr.w	r3, r3, #2
 8003c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  len = strlen(client_info->client_id);
 8003c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fc fae0 	bl	80001e4 <strlen>
 8003c24:	6178      	str	r0, [r7, #20]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2c:	d309      	bcc.n	8003c42 <mqtt_client_connect+0x37e>
 8003c2e:	4b72      	ldr	r3, [pc, #456]	; (8003df8 <mqtt_client_connect+0x534>)
 8003c30:	f240 5263 	movw	r2, #1379	; 0x563
 8003c34:	4973      	ldr	r1, [pc, #460]	; (8003e04 <mqtt_client_connect+0x540>)
 8003c36:	4872      	ldr	r0, [pc, #456]	; (8003e00 <mqtt_client_connect+0x53c>)
 8003c38:	f7fe f8ef 	bl	8001e1a <lwip_win32_platform_diag>
 8003c3c:	f06f 0305 	mvn.w	r3, #5
 8003c40:	e0d6      	b.n	8003df0 <mqtt_client_connect+0x52c>
  client_id_length = (u16_t)len;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	827b      	strh	r3, [r7, #18]
  len = remaining_length + 2 + client_id_length;
 8003c46:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c48:	1c9a      	adds	r2, r3, #2
 8003c4a:	8a7b      	ldrh	r3, [r7, #18]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c56:	d309      	bcc.n	8003c6c <mqtt_client_connect+0x3a8>
 8003c58:	4b67      	ldr	r3, [pc, #412]	; (8003df8 <mqtt_client_connect+0x534>)
 8003c5a:	f240 5266 	movw	r2, #1382	; 0x566
 8003c5e:	4967      	ldr	r1, [pc, #412]	; (8003dfc <mqtt_client_connect+0x538>)
 8003c60:	4867      	ldr	r0, [pc, #412]	; (8003e00 <mqtt_client_connect+0x53c>)
 8003c62:	f7fe f8da 	bl	8001e1a <lwip_win32_platform_diag>
 8003c66:	f06f 0305 	mvn.w	r3, #5
 8003c6a:	e0c1      	b.n	8003df0 <mqtt_client_connect+0x52c>
  remaining_length = (u16_t)len;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	85bb      	strh	r3, [r7, #44]	; 0x2c

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	33ec      	adds	r3, #236	; 0xec
 8003c74:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003c76:	4611      	mov	r1, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fe fee7 	bl	8002a4c <mqtt_output_check_space>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <mqtt_client_connect+0x3c6>
    return ERR_MEM;
 8003c84:	f04f 33ff 	mov.w	r3, #4294967295
 8003c88:	e0b2      	b.n	8003df0 <mqtt_client_connect+0x52c>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	f004 fa44 	bl	8008118 <tcp_new_ip_type>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <mqtt_client_connect+0x3e0>
    return ERR_MEM;
 8003c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca2:	e0a5      	b.n	8003df0 <mqtt_client_connect+0x52c>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	68f9      	ldr	r1, [r7, #12]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f004 fa42 	bl	8008134 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	4954      	ldr	r1, [pc, #336]	; (8003e08 <mqtt_client_connect+0x544>)
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f003 f8f5 	bl	8006ea8 <tcp_bind>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (err != ERR_OK) {
 8003cc4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f040 8084 	bne.w	8003dd6 <mqtt_client_connect+0x512>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	68d8      	ldr	r0, [r3, #12]
 8003cd2:	88fa      	ldrh	r2, [r7, #6]
 8003cd4:	4b4d      	ldr	r3, [pc, #308]	; (8003e0c <mqtt_client_connect+0x548>)
 8003cd6:	68b9      	ldr	r1, [r7, #8]
 8003cd8:	f003 fa80 	bl	80071dc <tcp_connect>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (err != ERR_OK) {
 8003ce2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d177      	bne.n	8003dda <mqtt_client_connect+0x516>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	4948      	ldr	r1, [pc, #288]	; (8003e10 <mqtt_client_connect+0x54c>)
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f004 fa7d 	bl	80081f0 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003d02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	2300      	movs	r3, #0
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2101      	movs	r1, #1
 8003d10:	f7fe fe53 	bl	80029ba <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	33ec      	adds	r3, #236	; 0xec
 8003d18:	2204      	movs	r2, #4
 8003d1a:	493e      	ldr	r1, [pc, #248]	; (8003e14 <mqtt_client_connect+0x550>)
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fe fe21 	bl	8002964 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	33ec      	adds	r3, #236	; 0xec
 8003d26:	2104      	movs	r1, #4
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe fdd7 	bl	80028dc <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	33ec      	adds	r3, #236	; 0xec
 8003d32:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003d36:	4611      	mov	r1, r2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fe fdcf 	bl	80028dc <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8003d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d46:	899b      	ldrh	r3, [r3, #12]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	f7fe fdd5 	bl	80028fa <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	8a7a      	ldrh	r2, [r7, #18]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	f7fe fe01 	bl	8002964 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 8003d62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d015      	beq.n	8003d9a <mqtt_client_connect+0x4d6>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8003d7c:	b292      	uxth	r2, r2
 8003d7e:	4619      	mov	r1, r3
 8003d80:	f7fe fdf0 	bl	8002964 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003d92:	b292      	uxth	r2, r2
 8003d94:	4619      	mov	r1, r3
 8003d96:	f7fe fde5 	bl	8002964 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8003d9a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	da08      	bge.n	8003db4 <mqtt_client_connect+0x4f0>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003dae:	4619      	mov	r1, r3
 8003db0:	f7fe fdd8 	bl	8002964 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 8003db4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <mqtt_client_connect+0x50e>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f7fe fdc9 	bl	8002964 <mqtt_output_append_string>
  }
  return ERR_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e00c      	b.n	8003df0 <mqtt_client_connect+0x52c>
    goto tcp_fail;
 8003dd6:	bf00      	nop
 8003dd8:	e000      	b.n	8003ddc <mqtt_client_connect+0x518>
    goto tcp_fail;
 8003dda:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f003 f855 	bl	8006e90 <tcp_abort>
  client->conn = NULL;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	60da      	str	r2, [r3, #12]
  return err;
 8003dec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3730      	adds	r7, #48	; 0x30
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	08014f98 	.word	0x08014f98
 8003dfc:	0801553c 	.word	0x0801553c
 8003e00:	08014ffc 	.word	0x08014ffc
 8003e04:	08015674 	.word	0x08015674
 8003e08:	08017a40 	.word	0x08017a40
 8003e0c:	08003455 	.word	0x08003455
 8003e10:	080033d5 	.word	0x080033d5
 8003e14:	080156b0 	.word	0x080156b0

08003e18 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	b21a      	sxth	r2, r3
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	b21b      	sxth	r3, r3
 8003e30:	4313      	orrs	r3, r2
 8003e32:	b21b      	sxth	r3, r3
 8003e34:	b29b      	uxth	r3, r3
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	061a      	lsls	r2, r3, #24
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	0a1b      	lsrs	r3, r3, #8
 8003e5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	0e1b      	lsrs	r3, r3, #24
 8003e66:	4313      	orrs	r3, r2
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b089      	sub	sp, #36	; 0x24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00d      	beq.n	8003eb4 <lwip_standard_chksum+0x40>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	dd0a      	ble.n	8003eb4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8003e9e:	f107 030e 	add.w	r3, r7, #14
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	1c51      	adds	r1, r2, #1
 8003ea8:	61f9      	str	r1, [r7, #28]
 8003eaa:	7812      	ldrb	r2, [r2, #0]
 8003eac:	701a      	strb	r2, [r3, #0]
    len--;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8003eb8:	e00a      	b.n	8003ed0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	1c9a      	adds	r2, r3, #2
 8003ebe:	61ba      	str	r2, [r7, #24]
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]
    len -= 2;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	3b02      	subs	r3, #2
 8003ece:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	dcf1      	bgt.n	8003eba <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	dd04      	ble.n	8003ee6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8003edc:	f107 030e 	add.w	r3, r7, #14
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	7812      	ldrb	r2, [r2, #0]
 8003ee4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8003ee6:	89fb      	ldrh	r3, [r7, #14]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	4413      	add	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	0c1a      	lsrs	r2, r3, #16
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	4413      	add	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	0c1a      	lsrs	r2, r3, #16
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	4413      	add	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d007      	beq.n	8003f1e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	b29b      	uxth	r3, r3
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3724      	adds	r7, #36	; 0x24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b086      	sub	sp, #24
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	72fb      	strb	r3, [r7, #11]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	e02b      	b.n	8003fa2 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	895b      	ldrh	r3, [r3, #10]
 8003f52:	4619      	mov	r1, r3
 8003f54:	4610      	mov	r0, r2
 8003f56:	f7ff ff8d 	bl	8003e74 <lwip_standard_chksum>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4413      	add	r3, r2
 8003f62:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	0c1a      	lsrs	r2, r3, #16
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	895b      	ldrh	r3, [r3, #10]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00e      	beq.n	8003f9c <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	021b      	lsls	r3, r3, #8
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	0a1b      	lsrs	r3, r3, #8
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1d0      	bne.n	8003f4a <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d007      	beq.n	8003fbe <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	0a1b      	lsrs	r3, r3, #8
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8003fbe:	7afb      	ldrb	r3, [r7, #11]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff ff28 	bl	8003e18 <lwip_htons>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	461a      	mov	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4413      	add	r3, r2
 8003fd0:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8003fd2:	893b      	ldrh	r3, [r7, #8]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff ff1f 	bl	8003e18 <lwip_htons>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	461a      	mov	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	0c1a      	lsrs	r2, r3, #16
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	4413      	add	r3, r2
 8003fee:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	0c1a      	lsrs	r2, r3, #16
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	b29b      	uxth	r3, r3
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	607b      	str	r3, [r7, #4]
 8004016:	460b      	mov	r3, r1
 8004018:	72fb      	strb	r3, [r7, #11]
 800401a:	4613      	mov	r3, r2
 800401c:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	b29b      	uxth	r3, r3
 8004028:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4413      	add	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	b29b      	uxth	r3, r3
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4413      	add	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	0c1b      	lsrs	r3, r3, #16
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4413      	add	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	0c1a      	lsrs	r2, r3, #16
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	b29b      	uxth	r3, r3
 8004056:	4413      	add	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	0c1a      	lsrs	r2, r3, #16
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	b29b      	uxth	r3, r3
 8004062:	4413      	add	r3, r2
 8004064:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8004066:	893a      	ldrh	r2, [r7, #8]
 8004068:	7af9      	ldrb	r1, [r7, #11]
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f7ff ff5e 	bl	8003f2e <inet_cksum_pseudo_base>
 8004072:	4603      	mov	r3, r0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af02      	add	r7, sp, #8
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	607b      	str	r3, [r7, #4]
 8004086:	460b      	mov	r3, r1
 8004088:	72fb      	strb	r3, [r7, #11]
 800408a:	4613      	mov	r3, r2
 800408c:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800408e:	893a      	ldrh	r2, [r7, #8]
 8004090:	7af9      	ldrb	r1, [r7, #11]
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f7ff ffb7 	bl	800400c <inet_chksum_pseudo>
 800409e:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80040b4:	887b      	ldrh	r3, [r7, #2]
 80040b6:	4619      	mov	r1, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff fedb 	bl	8003e74 <lwip_standard_chksum>
 80040be:	4603      	mov	r3, r0
 80040c0:	43db      	mvns	r3, r3
 80040c2:	b29b      	uxth	r3, r3
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 80040d6:	f002 fbab 	bl	8006830 <stats_init>
#if !NO_SYS
  sys_init();
 80040da:	f7fd fe3f 	bl	8001d5c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80040de:	f000 fcfb 	bl	8004ad8 <mem_init>
  memp_init();
 80040e2:	f001 f8df 	bl	80052a4 <memp_init>
  pbuf_init();
  netif_init();
 80040e6:	f001 f9fd 	bl	80054e4 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80040ea:	f002 fbaf 	bl	800684c <tcp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */
#if PPP_SUPPORT
  ppp_init();
 80040ee:	f00d ff79 	bl	8011fe4 <ppp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80040f2:	f009 f92b 	bl	800d34c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80040f6:	bf00      	nop
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8004108:	4b34      	ldr	r3, [pc, #208]	; (80041dc <ip4_route+0xdc>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	e033      	b.n	8004178 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d029      	beq.n	8004172 <ip4_route+0x72>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d022      	beq.n	8004172 <ip4_route+0x72>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3304      	adds	r3, #4
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01d      	beq.n	8004172 <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_net_eq(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3304      	adds	r3, #4
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	405a      	eors	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3308      	adds	r3, #8
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4013      	ands	r3, r2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	e03e      	b.n	80041d0 <ip4_route+0xd0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_eq(dest, netif_ip4_gw(netif))) {
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d108      	bne.n	8004172 <ip4_route+0x72>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	330c      	adds	r3, #12
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d101      	bne.n	8004172 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	e02e      	b.n	80041d0 <ip4_route+0xd0>
  NETIF_FOREACH(netif) {
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1c8      	bne.n	8004110 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800417e:	4b18      	ldr	r3, [pc, #96]	; (80041e0 <ip4_route+0xe0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d01a      	beq.n	80041bc <ip4_route+0xbc>
 8004186:	4b16      	ldr	r3, [pc, #88]	; (80041e0 <ip4_route+0xe0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d012      	beq.n	80041bc <ip4_route+0xbc>
 8004196:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <ip4_route+0xe0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80041a6:	4b0e      	ldr	r3, [pc, #56]	; (80041e0 <ip4_route+0xe0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3304      	adds	r3, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d004      	beq.n	80041bc <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b7f      	cmp	r3, #127	; 0x7f
 80041ba:	d107      	bne.n	80041cc <ip4_route+0xcc>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 80041bc:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <ip4_route+0xe4>)
 80041be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041c0:	3301      	adds	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <ip4_route+0xe4>)
 80041c6:	84da      	strh	r2, [r3, #38]	; 0x26
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e001      	b.n	80041d0 <ip4_route+0xd0>
  }

  return netif_default;
 80041cc:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <ip4_route+0xe0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	2000220c 	.word	0x2000220c
 80041e0:	20002210 	.word	0x20002210
 80041e4:	20002218 	.word	0x20002218

080041e8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d016      	beq.n	800422c <ip4_input_accept+0x44>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3304      	adds	r3, #4
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d011      	beq.n	800422c <ip4_input_accept+0x44>
    /* unicast to this interface address? */
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <ip4_input_accept+0x50>)
 800420a:	695a      	ldr	r2, [r3, #20]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d008      	beq.n	8004228 <ip4_input_accept+0x40>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8004216:	4b08      	ldr	r3, [pc, #32]	; (8004238 <ip4_input_accept+0x50>)
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4618      	mov	r0, r3
 800421e:	f000 faad 	bl	800477c <ip4_addr_isbroadcast_u32>
 8004222:	4603      	mov	r3, r0
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <ip4_input_accept+0x44>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <ip4_input_accept+0x46>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	2000087c 	.word	0x2000087c

0800423c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 8004246:	4b8e      	ldr	r3, [pc, #568]	; (8004480 <ip4_input+0x244>)
 8004248:	8b5b      	ldrh	r3, [r3, #26]
 800424a:	3301      	adds	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	4b8c      	ldr	r3, [pc, #560]	; (8004480 <ip4_input+0x244>)
 8004250:	835a      	strh	r2, [r3, #26]
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b04      	cmp	r3, #4
 8004262:	d010      	beq.n	8004286 <ip4_input+0x4a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f001 fee9 	bl	800603c <pbuf_free>
    IP_STATS_INC(ip.err);
 800426a:	4b85      	ldr	r3, [pc, #532]	; (8004480 <ip4_input+0x244>)
 800426c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800426e:	3301      	adds	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	4b83      	ldr	r3, [pc, #524]	; (8004480 <ip4_input+0x244>)
 8004274:	859a      	strh	r2, [r3, #44]	; 0x2c
    IP_STATS_INC(ip.drop);
 8004276:	4b82      	ldr	r3, [pc, #520]	; (8004480 <ip4_input+0x244>)
 8004278:	8bdb      	ldrh	r3, [r3, #30]
 800427a:	3301      	adds	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	4b80      	ldr	r3, [pc, #512]	; (8004480 <ip4_input+0x244>)
 8004280:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	e125      	b.n	80044d2 <ip4_input+0x296>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	b2db      	uxtb	r3, r3
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	b2db      	uxtb	r3, r3
 8004294:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	885b      	ldrh	r3, [r3, #2]
 800429a:	b29b      	uxth	r3, r3
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff fdbb 	bl	8003e18 <lwip_htons>
 80042a2:	4603      	mov	r3, r0
 80042a4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	891b      	ldrh	r3, [r3, #8]
 80042aa:	89ba      	ldrh	r2, [r7, #12]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d204      	bcs.n	80042ba <ip4_input+0x7e>
    pbuf_realloc(p, iphdr_len);
 80042b0:	89bb      	ldrh	r3, [r7, #12]
 80042b2:	4619      	mov	r1, r3
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f001 fd49 	bl	8005d4c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	895b      	ldrh	r3, [r3, #10]
 80042be:	89fa      	ldrh	r2, [r7, #14]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d807      	bhi.n	80042d4 <ip4_input+0x98>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	891b      	ldrh	r3, [r3, #8]
 80042c8:	89ba      	ldrh	r2, [r7, #12]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d802      	bhi.n	80042d4 <ip4_input+0x98>
 80042ce:	89fb      	ldrh	r3, [r7, #14]
 80042d0:	2b13      	cmp	r3, #19
 80042d2:	d810      	bhi.n	80042f6 <ip4_input+0xba>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f001 feb1 	bl	800603c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 80042da:	4b69      	ldr	r3, [pc, #420]	; (8004480 <ip4_input+0x244>)
 80042dc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80042de:	3301      	adds	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	4b67      	ldr	r3, [pc, #412]	; (8004480 <ip4_input+0x244>)
 80042e4:	845a      	strh	r2, [r3, #34]	; 0x22
    IP_STATS_INC(ip.drop);
 80042e6:	4b66      	ldr	r3, [pc, #408]	; (8004480 <ip4_input+0x244>)
 80042e8:	8bdb      	ldrh	r3, [r3, #30]
 80042ea:	3301      	adds	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	4b64      	ldr	r3, [pc, #400]	; (8004480 <ip4_input+0x244>)
 80042f0:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e0ed      	b.n	80044d2 <ip4_input+0x296>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 80042f6:	89fb      	ldrh	r3, [r7, #14]
 80042f8:	4619      	mov	r1, r3
 80042fa:	6938      	ldr	r0, [r7, #16]
 80042fc:	f7ff fed4 	bl	80040a8 <inet_chksum>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d010      	beq.n	8004328 <ip4_input+0xec>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f001 fe98 	bl	800603c <pbuf_free>
      IP_STATS_INC(ip.chkerr);
 800430c:	4b5c      	ldr	r3, [pc, #368]	; (8004480 <ip4_input+0x244>)
 800430e:	8c1b      	ldrh	r3, [r3, #32]
 8004310:	3301      	adds	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	4b5a      	ldr	r3, [pc, #360]	; (8004480 <ip4_input+0x244>)
 8004316:	841a      	strh	r2, [r3, #32]
      IP_STATS_INC(ip.drop);
 8004318:	4b59      	ldr	r3, [pc, #356]	; (8004480 <ip4_input+0x244>)
 800431a:	8bdb      	ldrh	r3, [r3, #30]
 800431c:	3301      	adds	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	4b57      	ldr	r3, [pc, #348]	; (8004480 <ip4_input+0x244>)
 8004322:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e0d4      	b.n	80044d2 <ip4_input+0x296>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	4a55      	ldr	r2, [pc, #340]	; (8004484 <ip4_input+0x248>)
 800432e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a53      	ldr	r2, [pc, #332]	; (8004484 <ip4_input+0x248>)
 8004336:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004338:	4b52      	ldr	r3, [pc, #328]	; (8004484 <ip4_input+0x248>)
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004340:	2be0      	cmp	r3, #224	; 0xe0
 8004342:	d111      	bne.n	8004368 <ip4_input+0x12c>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <ip4_input+0x126>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	3304      	adds	r3, #4
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <ip4_input+0x126>
      netif = inp;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	e02a      	b.n	80043b8 <ip4_input+0x17c>
    } else {
      netif = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	e027      	b.n	80043b8 <ip4_input+0x17c>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8004368:	6838      	ldr	r0, [r7, #0]
 800436a:	f7ff ff3d 	bl	80041e8 <ip4_input_accept>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <ip4_input+0x13e>
      netif = inp;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	e01e      	b.n	80043b8 <ip4_input+0x17c>
    } else {
      netif = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800437e:	4b41      	ldr	r3, [pc, #260]	; (8004484 <ip4_input+0x248>)
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b7f      	cmp	r3, #127	; 0x7f
 8004386:	d017      	beq.n	80043b8 <ip4_input+0x17c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8004388:	4b3f      	ldr	r3, [pc, #252]	; (8004488 <ip4_input+0x24c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	e00e      	b.n	80043ae <ip4_input+0x172>
          if (netif == inp) {
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d006      	beq.n	80043a6 <ip4_input+0x16a>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8004398:	6978      	ldr	r0, [r7, #20]
 800439a:	f7ff ff25 	bl	80041e8 <ip4_input_accept>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d108      	bne.n	80043b6 <ip4_input+0x17a>
 80043a4:	e000      	b.n	80043a8 <ip4_input+0x16c>
            continue;
 80043a6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1ed      	bne.n	8004390 <ip4_input+0x154>
 80043b4:	e000      	b.n	80043b8 <ip4_input+0x17c>
            break;
 80043b6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80043b8:	4b32      	ldr	r3, [pc, #200]	; (8004484 <ip4_input+0x248>)
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	6839      	ldr	r1, [r7, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f9dc 	bl	800477c <ip4_addr_isbroadcast_u32>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d105      	bne.n	80043d6 <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80043ca:	4b2e      	ldr	r3, [pc, #184]	; (8004484 <ip4_input+0x248>)
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80043d2:	2be0      	cmp	r3, #224	; 0xe0
 80043d4:	d10a      	bne.n	80043ec <ip4_input+0x1b0>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f001 fe30 	bl	800603c <pbuf_free>
      IP_STATS_INC(ip.drop);
 80043dc:	4b28      	ldr	r3, [pc, #160]	; (8004480 <ip4_input+0x244>)
 80043de:	8bdb      	ldrh	r3, [r3, #30]
 80043e0:	3301      	adds	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	4b26      	ldr	r3, [pc, #152]	; (8004480 <ip4_input+0x244>)
 80043e6:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e072      	b.n	80044d2 <ip4_input+0x296>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <ip4_input+0x1cc>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 80043f2:	4b23      	ldr	r3, [pc, #140]	; (8004480 <ip4_input+0x244>)
 80043f4:	8bdb      	ldrh	r3, [r3, #30]
 80043f6:	3301      	adds	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	4b21      	ldr	r3, [pc, #132]	; (8004480 <ip4_input+0x244>)
 80043fc:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f001 fe1c 	bl	800603c <pbuf_free>
    return ERR_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	e064      	b.n	80044d2 <ip4_input+0x296>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	88db      	ldrh	r3, [r3, #6]
 800440c:	b29b      	uxth	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8004414:	4013      	ands	r3, r2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d010      	beq.n	800443c <ip4_input+0x200>
    if (p == NULL) {
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
#else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
    pbuf_free(p);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f001 fe0e 	bl	800603c <pbuf_free>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since it was fragmented (0x%"X16_F") (while IP_REASSEMBLY == 0).\n",
                lwip_ntohs(IPH_OFFSET(iphdr))));
    IP_STATS_INC(ip.opterr);
 8004420:	4b17      	ldr	r3, [pc, #92]	; (8004480 <ip4_input+0x244>)
 8004422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004424:	3301      	adds	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	4b15      	ldr	r3, [pc, #84]	; (8004480 <ip4_input+0x244>)
 800442a:	855a      	strh	r2, [r3, #42]	; 0x2a
    IP_STATS_INC(ip.drop);
 800442c:	4b14      	ldr	r3, [pc, #80]	; (8004480 <ip4_input+0x244>)
 800442e:	8bdb      	ldrh	r3, [r3, #30]
 8004430:	3301      	adds	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	4b12      	ldr	r3, [pc, #72]	; (8004480 <ip4_input+0x244>)
 8004436:	83da      	strh	r2, [r3, #30]
    /* unsupported protocol feature */
    MIB2_STATS_INC(mib2.ipinunknownprotos);
    return ERR_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	e04a      	b.n	80044d2 <ip4_input+0x296>
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800443c:	4a11      	ldr	r2, [pc, #68]	; (8004484 <ip4_input+0x248>)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8004442:	4a10      	ldr	r2, [pc, #64]	; (8004484 <ip4_input+0x248>)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8004448:	4a0e      	ldr	r2, [pc, #56]	; (8004484 <ip4_input+0x248>)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	b2db      	uxtb	r3, r3
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	b2db      	uxtb	r3, r3
 800445c:	b29a      	uxth	r2, r3
 800445e:	4b09      	ldr	r3, [pc, #36]	; (8004484 <ip4_input+0x248>)
 8004460:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8004462:	89fb      	ldrh	r3, [r7, #14]
 8004464:	4619      	mov	r1, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f001 fd92 	bl	8005f90 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	7a5b      	ldrb	r3, [r3, #9]
 8004470:	2b06      	cmp	r3, #6
 8004472:	d10b      	bne.n	800448c <ip4_input+0x250>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8004474:	6839      	ldr	r1, [r7, #0]
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f004 f902 	bl	8008680 <tcp_input>
        break;
 800447c:	e016      	b.n	80044ac <ip4_input+0x270>
 800447e:	bf00      	nop
 8004480:	20002218 	.word	0x20002218
 8004484:	2000087c 	.word	0x2000087c
 8004488:	2000220c 	.word	0x2000220c
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 800448c:	4b13      	ldr	r3, [pc, #76]	; (80044dc <ip4_input+0x2a0>)
 800448e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004490:	3301      	adds	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	4b11      	ldr	r3, [pc, #68]	; (80044dc <ip4_input+0x2a0>)
 8004496:	851a      	strh	r2, [r3, #40]	; 0x28
          IP_STATS_INC(ip.drop);
 8004498:	4b10      	ldr	r3, [pc, #64]	; (80044dc <ip4_input+0x2a0>)
 800449a:	8bdb      	ldrh	r3, [r3, #30]
 800449c:	3301      	adds	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <ip4_input+0x2a0>)
 80044a2:	83da      	strh	r2, [r3, #30]
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f001 fdc9 	bl	800603c <pbuf_free>
        break;
 80044aa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80044ac:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <ip4_input+0x2a4>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80044b2:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <ip4_input+0x2a4>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80044b8:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <ip4_input+0x2a4>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80044be:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <ip4_input+0x2a4>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <ip4_input+0x2a4>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <ip4_input+0x2a4>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20002218 	.word	0x20002218
 80044e0:	2000087c 	.word	0x2000087c

080044e4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af04      	add	r7, sp, #16
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d009      	beq.n	8004510 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <ip4_output_if+0x26>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d102      	bne.n	8004510 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	3304      	adds	r3, #4
 800450e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8004510:	78fa      	ldrb	r2, [r7, #3]
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	9302      	str	r3, [sp, #8]
 8004516:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800451a:	9301      	str	r3, [sp, #4]
 800451c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	4613      	mov	r3, r2
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6979      	ldr	r1, [r7, #20]
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 f805 	bl	8004538 <ip4_output_if_src>
 800452e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	7b9b      	ldrb	r3, [r3, #14]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d00b      	beq.n	800456a <ip4_output_if_src+0x32>
 8004552:	4b83      	ldr	r3, [pc, #524]	; (8004760 <ip4_output_if_src+0x228>)
 8004554:	f240 326b 	movw	r2, #875	; 0x36b
 8004558:	4982      	ldr	r1, [pc, #520]	; (8004764 <ip4_output_if_src+0x22c>)
 800455a:	4883      	ldr	r0, [pc, #524]	; (8004768 <ip4_output_if_src+0x230>)
 800455c:	f00f fa84 	bl	8013a68 <iprintf>
 8004560:	2000      	movs	r0, #0
 8004562:	f00f fb83 	bl	8013c6c <fflush>
 8004566:	f00f fac8 	bl	8013afa <abort>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80cf 	beq.w	8004710 <ip4_output_if_src+0x1d8>
    u16_t ip_hlen = IP_HLEN;
 8004572:	2314      	movs	r3, #20
 8004574:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8004576:	2114      	movs	r1, #20
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f001 fcf9 	bl	8005f70 <pbuf_add_header>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <ip4_output_if_src+0x5e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 8004584:	4b79      	ldr	r3, [pc, #484]	; (800476c <ip4_output_if_src+0x234>)
 8004586:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004588:	3301      	adds	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	4b77      	ldr	r3, [pc, #476]	; (800476c <ip4_output_if_src+0x234>)
 800458e:	859a      	strh	r2, [r3, #44]	; 0x2c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8004590:	f06f 0301 	mvn.w	r3, #1
 8004594:	e0df      	b.n	8004756 <ip4_output_if_src+0x21e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	895b      	ldrh	r3, [r3, #10]
 80045a0:	2b13      	cmp	r3, #19
 80045a2:	d80b      	bhi.n	80045bc <ip4_output_if_src+0x84>
 80045a4:	4b6e      	ldr	r3, [pc, #440]	; (8004760 <ip4_output_if_src+0x228>)
 80045a6:	f44f 7268 	mov.w	r2, #928	; 0x3a0
 80045aa:	4971      	ldr	r1, [pc, #452]	; (8004770 <ip4_output_if_src+0x238>)
 80045ac:	486e      	ldr	r0, [pc, #440]	; (8004768 <ip4_output_if_src+0x230>)
 80045ae:	f00f fa5b 	bl	8013a68 <iprintf>
 80045b2:	2000      	movs	r0, #0
 80045b4:	f00f fb5a 	bl	8013c6c <fflush>
 80045b8:	f00f fa9f 	bl	8013afa <abort>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	78fa      	ldrb	r2, [r7, #3]
 80045c0:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80045c8:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 80045ca:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	4313      	orrs	r3, r2
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	b21a      	sxth	r2, r3
 80045d8:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	430b      	orrs	r3, r1
 80045e2:	121b      	asrs	r3, r3, #8
 80045e4:	b21b      	sxth	r3, r3
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	b21b      	sxth	r3, r3
 80045ea:	4313      	orrs	r3, r2
 80045ec:	b21b      	sxth	r3, r3
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	4413      	add	r3, r2
 80045f6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	b29b      	uxth	r3, r3
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	4413      	add	r3, r2
 800460a:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	0c1b      	lsrs	r3, r3, #16
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	4413      	add	r3, r2
 8004616:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8004618:	8b7b      	ldrh	r3, [r7, #26]
 800461a:	089b      	lsrs	r3, r3, #2
 800461c:	b29b      	uxth	r3, r3
 800461e:	b2db      	uxtb	r3, r3
 8004620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004624:	b2da      	uxtb	r2, r3
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004630:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8004632:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	021b      	lsls	r3, r3, #8
 800463c:	4313      	orrs	r3, r2
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	b21a      	sxth	r2, r3
 8004642:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	430b      	orrs	r3, r1
 800464e:	121b      	asrs	r3, r3, #8
 8004650:	b21b      	sxth	r3, r3
 8004652:	b2db      	uxtb	r3, r3
 8004654:	b21b      	sxth	r3, r3
 8004656:	4313      	orrs	r3, r2
 8004658:	b21b      	sxth	r3, r3
 800465a:	b29b      	uxth	r3, r3
 800465c:	461a      	mov	r2, r3
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	4413      	add	r3, r2
 8004662:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	891b      	ldrh	r3, [r3, #8]
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff fbd5 	bl	8003e18 <lwip_htons>
 800466e:	4603      	mov	r3, r0
 8004670:	461a      	mov	r2, r3
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	885b      	ldrh	r3, [r3, #2]
 800467a:	b29b      	uxth	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4413      	add	r3, r2
 8004682:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2200      	movs	r2, #0
 8004688:	719a      	strb	r2, [r3, #6]
 800468a:	2200      	movs	r2, #0
 800468c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800468e:	4b39      	ldr	r3, [pc, #228]	; (8004774 <ip4_output_if_src+0x23c>)
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff fbc0 	bl	8003e18 <lwip_htons>
 8004698:	4603      	mov	r3, r0
 800469a:	461a      	mov	r2, r3
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	889b      	ldrh	r3, [r3, #4]
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	4413      	add	r3, r2
 80046ac:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80046ae:	4b31      	ldr	r3, [pc, #196]	; (8004774 <ip4_output_if_src+0x23c>)
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	3301      	adds	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	4b2f      	ldr	r3, [pc, #188]	; (8004774 <ip4_output_if_src+0x23c>)
 80046b8:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d104      	bne.n	80046ca <ip4_output_if_src+0x192>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80046c0:	4b2d      	ldr	r3, [pc, #180]	; (8004778 <ip4_output_if_src+0x240>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	60da      	str	r2, [r3, #12]
 80046c8:	e003      	b.n	80046d2 <ip4_output_if_src+0x19a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	69fa      	ldr	r2, [r7, #28]
 80046da:	4413      	add	r3, r2
 80046dc:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	0c1b      	lsrs	r3, r3, #16
 80046e4:	69fa      	ldr	r2, [r7, #28]
 80046e6:	4413      	add	r3, r2
 80046e8:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	0c1a      	lsrs	r2, r3, #16
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	4413      	add	r3, r2
 80046f4:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	0c1b      	lsrs	r3, r3, #16
 80046fa:	69fa      	ldr	r2, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	43db      	mvns	r3, r3
 8004704:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	b29a      	uxth	r2, r3
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	815a      	strh	r2, [r3, #10]
 800470e:	e015      	b.n	800473c <ip4_output_if_src+0x204>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	895b      	ldrh	r3, [r3, #10]
 8004714:	2b13      	cmp	r3, #19
 8004716:	d808      	bhi.n	800472a <ip4_output_if_src+0x1f2>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 8004718:	4b14      	ldr	r3, [pc, #80]	; (800476c <ip4_output_if_src+0x234>)
 800471a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800471c:	3301      	adds	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	4b12      	ldr	r3, [pc, #72]	; (800476c <ip4_output_if_src+0x234>)
 8004722:	859a      	strh	r2, [r3, #44]	; 0x2c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8004724:	f06f 0301 	mvn.w	r3, #1
 8004728:	e015      	b.n	8004756 <ip4_output_if_src+0x21e>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	617b      	str	r3, [r7, #20]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8004736:	f107 0310 	add.w	r3, r7, #16
 800473a:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 800473c:	4b0b      	ldr	r3, [pc, #44]	; (800476c <ip4_output_if_src+0x234>)
 800473e:	8b1b      	ldrh	r3, [r3, #24]
 8004740:	3301      	adds	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	4b09      	ldr	r3, [pc, #36]	; (800476c <ip4_output_if_src+0x234>)
 8004746:	831a      	strh	r2, [r3, #24]
    return ERR_BUF;
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	68f9      	ldr	r1, [r7, #12]
 8004750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004752:	4798      	blx	r3
 8004754:	4603      	mov	r3, r0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	08015704 	.word	0x08015704
 8004764:	08015728 	.word	0x08015728
 8004768:	08015734 	.word	0x08015734
 800476c:	20002218 	.word	0x20002218
 8004770:	0801575c 	.word	0x0801575c
 8004774:	20000636 	.word	0x20000636
 8004778:	08017a40 	.word	0x08017a40

0800477c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004790:	d002      	beq.n	8004798 <ip4_addr_isbroadcast_u32+0x1c>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8004798:	2301      	movs	r3, #1
 800479a:	e02a      	b.n	80047f2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e021      	b.n	80047f2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	3304      	adds	r3, #4
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d101      	bne.n	80047be <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	e019      	b.n	80047f2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_net_eq(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	3304      	adds	r3, #4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	405a      	eors	r2, r3
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	3308      	adds	r3, #8
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10d      	bne.n	80047f0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	3308      	adds	r3, #8
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	43da      	mvns	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	3308      	adds	r3, #8
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d101      	bne.n	80047f0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e000      	b.n	80047f2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80047f0:	2300      	movs	r3, #0
  }
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8004808:	2210      	movs	r2, #16
 800480a:	4904      	ldr	r1, [pc, #16]	; (800481c <ip4addr_ntoa+0x1c>)
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f807 	bl	8004820 <ip4addr_ntoa_r>
 8004812:	4603      	mov	r3, r0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	20000638 	.word	0x20000638

08004820 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8004820:	b480      	push	{r7}
 8004822:	b08d      	sub	sp, #52	; 0x34
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800483a:	f107 0318 	add.w	r3, r7, #24
 800483e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8004840:	2300      	movs	r3, #0
 8004842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004846:	e059      	b.n	80048fc <ip4addr_ntoa_r+0xdc>
    i = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	4b33      	ldr	r3, [pc, #204]	; (8004920 <ip4addr_ntoa_r+0x100>)
 8004854:	fba3 1302 	umull	r1, r3, r3, r2
 8004858:	08d9      	lsrs	r1, r3, #3
 800485a:	460b      	mov	r3, r1
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	440b      	add	r3, r1
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8004866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	4a2d      	ldr	r2, [pc, #180]	; (8004920 <ip4addr_ntoa_r+0x100>)
 800486c:	fba2 2303 	umull	r2, r3, r2, r3
 8004870:	08db      	lsrs	r3, r3, #3
 8004872:	b2da      	uxtb	r2, r3
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8004878:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8004882:	4619      	mov	r1, r3
 8004884:	7ffb      	ldrb	r3, [r7, #31]
 8004886:	3330      	adds	r3, #48	; 0x30
 8004888:	b2da      	uxtb	r2, r3
 800488a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800488e:	440b      	add	r3, r1
 8004890:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1d8      	bne.n	800484e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800489c:	e012      	b.n	80048c4 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	623a      	str	r2, [r7, #32]
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	4293      	cmp	r3, r2
 80048a8:	db01      	blt.n	80048ae <ip4addr_ntoa_r+0x8e>
        return NULL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	e031      	b.n	8004912 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 80048ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80048b8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80048bc:	440a      	add	r2, r1
 80048be:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80048c2:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80048c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80048c8:	1e5a      	subs	r2, r3, #1
 80048ca:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e5      	bne.n	800489e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	623a      	str	r2, [r7, #32]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	4293      	cmp	r3, r2
 80048dc:	db01      	blt.n	80048e2 <ip4addr_ntoa_r+0xc2>
      return NULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	e017      	b.n	8004912 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e8:	222e      	movs	r2, #46	; 0x2e
 80048ea:	701a      	strb	r2, [r3, #0]
    ap++;
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	3301      	adds	r3, #1
 80048f0:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80048f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048f6:	3301      	adds	r3, #1
 80048f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004900:	2b03      	cmp	r3, #3
 8004902:	d9a1      	bls.n	8004848 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8004904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004906:	3b01      	subs	r3, #1
 8004908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800490a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490c:	2200      	movs	r2, #0
 800490e:	701a      	strb	r2, [r3, #0]
  return buf;
 8004910:	68bb      	ldr	r3, [r7, #8]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3734      	adds	r7, #52	; 0x34
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	cccccccd 	.word	0xcccccccd

08004924 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <ptr_to_mem+0x20>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	4413      	add	r3, r2
}
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000648 	.word	0x20000648

08004948 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a05      	ldr	r2, [pc, #20]	; (8004968 <mem_to_ptr+0x20>)
 8004954:	6812      	ldr	r2, [r2, #0]
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	b29b      	uxth	r3, r3
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	20000648 	.word	0x20000648

0800496c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800496c:	b590      	push	{r4, r7, lr}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004974:	4b4f      	ldr	r3, [pc, #316]	; (8004ab4 <plug_holes+0x148>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d20b      	bcs.n	8004996 <plug_holes+0x2a>
 800497e:	4b4e      	ldr	r3, [pc, #312]	; (8004ab8 <plug_holes+0x14c>)
 8004980:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 8004984:	494d      	ldr	r1, [pc, #308]	; (8004abc <plug_holes+0x150>)
 8004986:	484e      	ldr	r0, [pc, #312]	; (8004ac0 <plug_holes+0x154>)
 8004988:	f00f f86e 	bl	8013a68 <iprintf>
 800498c:	2000      	movs	r0, #0
 800498e:	f00f f96d 	bl	8013c6c <fflush>
 8004992:	f00f f8b2 	bl	8013afa <abort>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004996:	4b4b      	ldr	r3, [pc, #300]	; (8004ac4 <plug_holes+0x158>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	429a      	cmp	r2, r3
 800499e:	d30b      	bcc.n	80049b8 <plug_holes+0x4c>
 80049a0:	4b45      	ldr	r3, [pc, #276]	; (8004ab8 <plug_holes+0x14c>)
 80049a2:	f240 12d3 	movw	r2, #467	; 0x1d3
 80049a6:	4948      	ldr	r1, [pc, #288]	; (8004ac8 <plug_holes+0x15c>)
 80049a8:	4845      	ldr	r0, [pc, #276]	; (8004ac0 <plug_holes+0x154>)
 80049aa:	f00f f85d 	bl	8013a68 <iprintf>
 80049ae:	2000      	movs	r0, #0
 80049b0:	f00f f95c 	bl	8013c6c <fflush>
 80049b4:	f00f f8a1 	bl	8013afa <abort>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	791b      	ldrb	r3, [r3, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00b      	beq.n	80049d8 <plug_holes+0x6c>
 80049c0:	4b3d      	ldr	r3, [pc, #244]	; (8004ab8 <plug_holes+0x14c>)
 80049c2:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 80049c6:	4941      	ldr	r1, [pc, #260]	; (8004acc <plug_holes+0x160>)
 80049c8:	483d      	ldr	r0, [pc, #244]	; (8004ac0 <plug_holes+0x154>)
 80049ca:	f00f f84d 	bl	8013a68 <iprintf>
 80049ce:	2000      	movs	r0, #0
 80049d0:	f00f f94c 	bl	8013c6c <fflush>
 80049d4:	f00f f891 	bl	8013afa <abort>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80049e0:	d90b      	bls.n	80049fa <plug_holes+0x8e>
 80049e2:	4b35      	ldr	r3, [pc, #212]	; (8004ab8 <plug_holes+0x14c>)
 80049e4:	f240 12d7 	movw	r2, #471	; 0x1d7
 80049e8:	4939      	ldr	r1, [pc, #228]	; (8004ad0 <plug_holes+0x164>)
 80049ea:	4835      	ldr	r0, [pc, #212]	; (8004ac0 <plug_holes+0x154>)
 80049ec:	f00f f83c 	bl	8013a68 <iprintf>
 80049f0:	2000      	movs	r0, #0
 80049f2:	f00f f93b 	bl	8013c6c <fflush>
 80049f6:	f00f f880 	bl	8013afa <abort>

  nmem = ptr_to_mem(mem->next);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff ff90 	bl	8004924 <ptr_to_mem>
 8004a04:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d024      	beq.n	8004a58 <plug_holes+0xec>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	791b      	ldrb	r3, [r3, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d120      	bne.n	8004a58 <plug_holes+0xec>
 8004a16:	4b2b      	ldr	r3, [pc, #172]	; (8004ac4 <plug_holes+0x158>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d01b      	beq.n	8004a58 <plug_holes+0xec>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004a20:	4b2c      	ldr	r3, [pc, #176]	; (8004ad4 <plug_holes+0x168>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d102      	bne.n	8004a30 <plug_holes+0xc4>
      lfree = mem;
 8004a2a:	4a2a      	ldr	r2, [pc, #168]	; (8004ad4 <plug_holes+0x168>)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	881a      	ldrh	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a40:	d00a      	beq.n	8004a58 <plug_holes+0xec>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff ff6c 	bl	8004924 <ptr_to_mem>
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff ff7a 	bl	8004948 <mem_to_ptr>
 8004a54:	4603      	mov	r3, r0
 8004a56:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	885b      	ldrh	r3, [r3, #2]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff ff61 	bl	8004924 <ptr_to_mem>
 8004a62:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d01f      	beq.n	8004aac <plug_holes+0x140>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	791b      	ldrb	r3, [r3, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d11b      	bne.n	8004aac <plug_holes+0x140>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004a74:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <plug_holes+0x168>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d102      	bne.n	8004a84 <plug_holes+0x118>
      lfree = pmem;
 8004a7e:	4a15      	ldr	r2, [pc, #84]	; (8004ad4 <plug_holes+0x168>)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	881a      	ldrh	r2, [r3, #0]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a94:	d00a      	beq.n	8004aac <plug_holes+0x140>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff ff42 	bl	8004924 <ptr_to_mem>
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	68b8      	ldr	r0, [r7, #8]
 8004aa4:	f7ff ff50 	bl	8004948 <mem_to_ptr>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004aac:	bf00      	nop
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd90      	pop	{r4, r7, pc}
 8004ab4:	20000648 	.word	0x20000648
 8004ab8:	0801578c 	.word	0x0801578c
 8004abc:	080157ac 	.word	0x080157ac
 8004ac0:	080157c4 	.word	0x080157c4
 8004ac4:	2000064c 	.word	0x2000064c
 8004ac8:	080157ec 	.word	0x080157ec
 8004acc:	08015808 	.word	0x08015808
 8004ad0:	08015824 	.word	0x08015824
 8004ad4:	20000654 	.word	0x20000654

08004ad8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004ade:	4b22      	ldr	r3, [pc, #136]	; (8004b68 <mem_init+0x90>)
 8004ae0:	4a22      	ldr	r2, [pc, #136]	; (8004b6c <mem_init+0x94>)
 8004ae2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004ae4:	4b20      	ldr	r3, [pc, #128]	; (8004b68 <mem_init+0x90>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004af0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004afe:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004b02:	f7ff ff0f 	bl	8004924 <ptr_to_mem>
 8004b06:	4602      	mov	r2, r0
 8004b08:	4b19      	ldr	r3, [pc, #100]	; (8004b70 <mem_init+0x98>)
 8004b0a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8004b0c:	4b18      	ldr	r3, [pc, #96]	; (8004b70 <mem_init+0x98>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2201      	movs	r2, #1
 8004b12:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004b14:	4b16      	ldr	r3, [pc, #88]	; (8004b70 <mem_init+0x98>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b1c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004b1e:	4b14      	ldr	r3, [pc, #80]	; (8004b70 <mem_init+0x98>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b26:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004b28:	4b0f      	ldr	r3, [pc, #60]	; (8004b68 <mem_init+0x90>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a11      	ldr	r2, [pc, #68]	; (8004b74 <mem_init+0x9c>)
 8004b2e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8004b30:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <mem_init+0xa0>)
 8004b32:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b36:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8004b3a:	4810      	ldr	r0, [pc, #64]	; (8004b7c <mem_init+0xa4>)
 8004b3c:	f7fd f915 	bl	8001d6a <sys_mutex_new>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00b      	beq.n	8004b5e <mem_init+0x86>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8004b46:	4b0e      	ldr	r3, [pc, #56]	; (8004b80 <mem_init+0xa8>)
 8004b48:	f240 2212 	movw	r2, #530	; 0x212
 8004b4c:	490d      	ldr	r1, [pc, #52]	; (8004b84 <mem_init+0xac>)
 8004b4e:	480e      	ldr	r0, [pc, #56]	; (8004b88 <mem_init+0xb0>)
 8004b50:	f00e ff8a 	bl	8013a68 <iprintf>
 8004b54:	2000      	movs	r0, #0
 8004b56:	f00f f889 	bl	8013c6c <fflush>
 8004b5a:	f00e ffce 	bl	8013afa <abort>
  }
}
 8004b5e:	bf00      	nop
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000648 	.word	0x20000648
 8004b6c:	20000894 	.word	0x20000894
 8004b70:	2000064c 	.word	0x2000064c
 8004b74:	20000654 	.word	0x20000654
 8004b78:	20002218 	.word	0x20002218
 8004b7c:	20000650 	.word	0x20000650
 8004b80:	0801578c 	.word	0x0801578c
 8004b84:	08015850 	.word	0x08015850
 8004b88:	080157c4 	.word	0x080157c4

08004b8c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff fed7 	bl	8004948 <mem_to_ptr>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff febe 	bl	8004924 <ptr_to_mem>
 8004ba8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	885b      	ldrh	r3, [r3, #2]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff feb8 	bl	8004924 <ptr_to_mem>
 8004bb4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004bbe:	d818      	bhi.n	8004bf2 <mem_link_valid+0x66>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	885b      	ldrh	r3, [r3, #2]
 8004bc4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004bc8:	d813      	bhi.n	8004bf2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004bce:	8afa      	ldrh	r2, [r7, #22]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d004      	beq.n	8004bde <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	8afa      	ldrh	r2, [r7, #22]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d109      	bne.n	8004bf2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004bde:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <mem_link_valid+0x74>)
 8004be0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d006      	beq.n	8004bf6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	885b      	ldrh	r3, [r3, #2]
 8004bec:	8afa      	ldrh	r2, [r7, #22]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d001      	beq.n	8004bf6 <mem_link_valid+0x6a>
    return 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e000      	b.n	8004bf8 <mem_link_valid+0x6c>
  }
  return 1;
 8004bf6:	2301      	movs	r3, #1
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	2000064c 	.word	0x2000064c

08004c04 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d062      	beq.n	8004cd8 <mem_free+0xd4>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3b06      	subs	r3, #6
 8004c16:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004c18:	4b31      	ldr	r3, [pc, #196]	; (8004ce0 <mem_free+0xdc>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d306      	bcc.n	8004c30 <mem_free+0x2c>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f103 020c 	add.w	r2, r3, #12
 8004c28:	4b2e      	ldr	r3, [pc, #184]	; (8004ce4 <mem_free+0xe0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d90b      	bls.n	8004c48 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004c30:	4b2d      	ldr	r3, [pc, #180]	; (8004ce8 <mem_free+0xe4>)
 8004c32:	f240 2272 	movw	r2, #626	; 0x272
 8004c36:	492d      	ldr	r1, [pc, #180]	; (8004cec <mem_free+0xe8>)
 8004c38:	482d      	ldr	r0, [pc, #180]	; (8004cf0 <mem_free+0xec>)
 8004c3a:	f00e ff15 	bl	8013a68 <iprintf>
 8004c3e:	2000      	movs	r0, #0
 8004c40:	f00f f814 	bl	8013c6c <fflush>
 8004c44:	f00e ff59 	bl	8013afa <abort>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8004c48:	482a      	ldr	r0, [pc, #168]	; (8004cf4 <mem_free+0xf0>)
 8004c4a:	f7fd f89c 	bl	8001d86 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	791b      	ldrb	r3, [r3, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10b      	bne.n	8004c6e <mem_free+0x6a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004c56:	4b24      	ldr	r3, [pc, #144]	; (8004ce8 <mem_free+0xe4>)
 8004c58:	f240 227f 	movw	r2, #639	; 0x27f
 8004c5c:	4926      	ldr	r1, [pc, #152]	; (8004cf8 <mem_free+0xf4>)
 8004c5e:	4824      	ldr	r0, [pc, #144]	; (8004cf0 <mem_free+0xec>)
 8004c60:	f00e ff02 	bl	8013a68 <iprintf>
 8004c64:	2000      	movs	r0, #0
 8004c66:	f00f f801 	bl	8013c6c <fflush>
 8004c6a:	f00e ff46 	bl	8013afa <abort>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7ff ff8c 	bl	8004b8c <mem_link_valid>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10b      	bne.n	8004c92 <mem_free+0x8e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004c7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ce8 <mem_free+0xe4>)
 8004c7c:	f44f 7222 	mov.w	r2, #648	; 0x288
 8004c80:	491e      	ldr	r1, [pc, #120]	; (8004cfc <mem_free+0xf8>)
 8004c82:	481b      	ldr	r0, [pc, #108]	; (8004cf0 <mem_free+0xec>)
 8004c84:	f00e fef0 	bl	8013a68 <iprintf>
 8004c88:	2000      	movs	r0, #0
 8004c8a:	f00e ffef 	bl	8013c6c <fflush>
 8004c8e:	f00e ff34 	bl	8013afa <abort>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004c98:	4b19      	ldr	r3, [pc, #100]	; (8004d00 <mem_free+0xfc>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d202      	bcs.n	8004ca8 <mem_free+0xa4>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004ca2:	4a17      	ldr	r2, [pc, #92]	; (8004d00 <mem_free+0xfc>)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8004ca8:	4b16      	ldr	r3, [pc, #88]	; (8004d04 <mem_free+0x100>)
 8004caa:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	490b      	ldr	r1, [pc, #44]	; (8004ce0 <mem_free+0xdc>)
 8004cb2:	6809      	ldr	r1, [r1, #0]
 8004cb4:	1a5b      	subs	r3, r3, r1
 8004cb6:	b299      	uxth	r1, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	1acb      	subs	r3, r1, r3
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <mem_free+0x100>)
 8004cc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f7ff fe4e 	bl	800496c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8004cd0:	4808      	ldr	r0, [pc, #32]	; (8004cf4 <mem_free+0xf0>)
 8004cd2:	f7fd f862 	bl	8001d9a <sys_mutex_unlock>
 8004cd6:	e000      	b.n	8004cda <mem_free+0xd6>
    return;
 8004cd8:	bf00      	nop
}
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000648 	.word	0x20000648
 8004ce4:	2000064c 	.word	0x2000064c
 8004ce8:	0801578c 	.word	0x0801578c
 8004cec:	0801586c 	.word	0x0801586c
 8004cf0:	080157c4 	.word	0x080157c4
 8004cf4:	20000650 	.word	0x20000650
 8004cf8:	08015888 	.word	0x08015888
 8004cfc:	080158b0 	.word	0x080158b0
 8004d00:	20000654 	.word	0x20000654
 8004d04:	20002218 	.word	0x20002218

08004d08 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004d14:	887b      	ldrh	r3, [r7, #2]
 8004d16:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004d18:	8bfb      	ldrh	r3, [r7, #30]
 8004d1a:	2b0b      	cmp	r3, #11
 8004d1c:	d801      	bhi.n	8004d22 <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004d1e:	230c      	movs	r3, #12
 8004d20:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004d22:	8bfb      	ldrh	r3, [r7, #30]
 8004d24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d28:	d803      	bhi.n	8004d32 <mem_trim+0x2a>
 8004d2a:	8bfa      	ldrh	r2, [r7, #30]
 8004d2c:	887b      	ldrh	r3, [r7, #2]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d201      	bcs.n	8004d36 <mem_trim+0x2e>
    return NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	e10c      	b.n	8004f50 <mem_trim+0x248>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004d36:	4b88      	ldr	r3, [pc, #544]	; (8004f58 <mem_trim+0x250>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d304      	bcc.n	8004d4a <mem_trim+0x42>
 8004d40:	4b86      	ldr	r3, [pc, #536]	; (8004f5c <mem_trim+0x254>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d30b      	bcc.n	8004d62 <mem_trim+0x5a>
 8004d4a:	4b85      	ldr	r3, [pc, #532]	; (8004f60 <mem_trim+0x258>)
 8004d4c:	f240 22c5 	movw	r2, #709	; 0x2c5
 8004d50:	4984      	ldr	r1, [pc, #528]	; (8004f64 <mem_trim+0x25c>)
 8004d52:	4885      	ldr	r0, [pc, #532]	; (8004f68 <mem_trim+0x260>)
 8004d54:	f00e fe88 	bl	8013a68 <iprintf>
 8004d58:	2000      	movs	r0, #0
 8004d5a:	f00e ff87 	bl	8013c6c <fflush>
 8004d5e:	f00e fecc 	bl	8013afa <abort>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004d62:	4b7d      	ldr	r3, [pc, #500]	; (8004f58 <mem_trim+0x250>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d304      	bcc.n	8004d76 <mem_trim+0x6e>
 8004d6c:	4b7b      	ldr	r3, [pc, #492]	; (8004f5c <mem_trim+0x254>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d30f      	bcc.n	8004d96 <mem_trim+0x8e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8004d76:	f7fd f889 	bl	8001e8c <sys_arch_protect>
 8004d7a:	60b8      	str	r0, [r7, #8]
 8004d7c:	4b7b      	ldr	r3, [pc, #492]	; (8004f6c <mem_trim+0x264>)
 8004d7e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8004d82:	3301      	adds	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	4b79      	ldr	r3, [pc, #484]	; (8004f6c <mem_trim+0x264>)
 8004d88:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8004d8c:	68b8      	ldr	r0, [r7, #8]
 8004d8e:	f7fd f885 	bl	8001e9c <sys_arch_unprotect>
    return rmem;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	e0dc      	b.n	8004f50 <mem_trim+0x248>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3b06      	subs	r3, #6
 8004d9a:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004d9c:	69b8      	ldr	r0, [r7, #24]
 8004d9e:	f7ff fdd3 	bl	8004948 <mem_to_ptr>
 8004da2:	4603      	mov	r3, r0
 8004da4:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	881a      	ldrh	r2, [r3, #0]
 8004daa:	8afb      	ldrh	r3, [r7, #22]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b06      	subs	r3, #6
 8004db2:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004db4:	8bfa      	ldrh	r2, [r7, #30]
 8004db6:	8abb      	ldrh	r3, [r7, #20]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d90b      	bls.n	8004dd4 <mem_trim+0xcc>
 8004dbc:	4b68      	ldr	r3, [pc, #416]	; (8004f60 <mem_trim+0x258>)
 8004dbe:	f240 22d7 	movw	r2, #727	; 0x2d7
 8004dc2:	496b      	ldr	r1, [pc, #428]	; (8004f70 <mem_trim+0x268>)
 8004dc4:	4868      	ldr	r0, [pc, #416]	; (8004f68 <mem_trim+0x260>)
 8004dc6:	f00e fe4f 	bl	8013a68 <iprintf>
 8004dca:	2000      	movs	r0, #0
 8004dcc:	f00e ff4e 	bl	8013c6c <fflush>
 8004dd0:	f00e fe93 	bl	8013afa <abort>
  if (newsize > size) {
 8004dd4:	8bfa      	ldrh	r2, [r7, #30]
 8004dd6:	8abb      	ldrh	r3, [r7, #20]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d901      	bls.n	8004de0 <mem_trim+0xd8>
    /* not supported */
    return NULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e0b7      	b.n	8004f50 <mem_trim+0x248>
  }
  if (newsize == size) {
 8004de0:	8bfa      	ldrh	r2, [r7, #30]
 8004de2:	8abb      	ldrh	r3, [r7, #20]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d101      	bne.n	8004dec <mem_trim+0xe4>
    /* No change in size, simply return */
    return rmem;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	e0b1      	b.n	8004f50 <mem_trim+0x248>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8004dec:	4861      	ldr	r0, [pc, #388]	; (8004f74 <mem_trim+0x26c>)
 8004dee:	f7fc ffca 	bl	8001d86 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff fd94 	bl	8004924 <ptr_to_mem>
 8004dfc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	791b      	ldrb	r3, [r3, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d150      	bne.n	8004ea8 <mem_trim+0x1a0>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e0e:	d10b      	bne.n	8004e28 <mem_trim+0x120>
 8004e10:	4b53      	ldr	r3, [pc, #332]	; (8004f60 <mem_trim+0x258>)
 8004e12:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8004e16:	4958      	ldr	r1, [pc, #352]	; (8004f78 <mem_trim+0x270>)
 8004e18:	4853      	ldr	r0, [pc, #332]	; (8004f68 <mem_trim+0x260>)
 8004e1a:	f00e fe25 	bl	8013a68 <iprintf>
 8004e1e:	2000      	movs	r0, #0
 8004e20:	f00e ff24 	bl	8013c6c <fflush>
 8004e24:	f00e fe69 	bl	8013afa <abort>
    /* remember the old next pointer */
    next = mem2->next;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	81fb      	strh	r3, [r7, #14]
    /* create new struct mem which is moved directly after the shrunk mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004e2e:	8afa      	ldrh	r2, [r7, #22]
 8004e30:	8bfb      	ldrh	r3, [r7, #30]
 8004e32:	4413      	add	r3, r2
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3306      	adds	r3, #6
 8004e38:	81bb      	strh	r3, [r7, #12]
    if (lfree == mem2) {
 8004e3a:	4b50      	ldr	r3, [pc, #320]	; (8004f7c <mem_trim+0x274>)
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d106      	bne.n	8004e52 <mem_trim+0x14a>
      lfree = ptr_to_mem(ptr2);
 8004e44:	89bb      	ldrh	r3, [r7, #12]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff fd6c 	bl	8004924 <ptr_to_mem>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	4b4b      	ldr	r3, [pc, #300]	; (8004f7c <mem_trim+0x274>)
 8004e50:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004e52:	89bb      	ldrh	r3, [r7, #12]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fd65 	bl	8004924 <ptr_to_mem>
 8004e5a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	89fa      	ldrh	r2, [r7, #14]
 8004e66:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	8afa      	ldrh	r2, [r7, #22]
 8004e6c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	89ba      	ldrh	r2, [r7, #12]
 8004e72:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e7c:	d007      	beq.n	8004e8e <mem_trim+0x186>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff fd4e 	bl	8004924 <ptr_to_mem>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	89bb      	ldrh	r3, [r7, #12]
 8004e8c:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8004e8e:	4b37      	ldr	r3, [pc, #220]	; (8004f6c <mem_trim+0x264>)
 8004e90:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8004e94:	8bf9      	ldrh	r1, [r7, #30]
 8004e96:	8abb      	ldrh	r3, [r7, #20]
 8004e98:	1acb      	subs	r3, r1, r3
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	4413      	add	r3, r2
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	4b32      	ldr	r3, [pc, #200]	; (8004f6c <mem_trim+0x264>)
 8004ea2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8004ea6:	e04f      	b.n	8004f48 <mem_trim+0x240>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004ea8:	8bfb      	ldrh	r3, [r7, #30]
 8004eaa:	f103 0212 	add.w	r2, r3, #18
 8004eae:	8abb      	ldrh	r3, [r7, #20]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d849      	bhi.n	8004f48 <mem_trim+0x240>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004eb4:	8afa      	ldrh	r2, [r7, #22]
 8004eb6:	8bfb      	ldrh	r3, [r7, #30]
 8004eb8:	4413      	add	r3, r2
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3306      	adds	r3, #6
 8004ebe:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ec8:	d10b      	bne.n	8004ee2 <mem_trim+0x1da>
 8004eca:	4b25      	ldr	r3, [pc, #148]	; (8004f60 <mem_trim+0x258>)
 8004ecc:	f240 3209 	movw	r2, #777	; 0x309
 8004ed0:	4929      	ldr	r1, [pc, #164]	; (8004f78 <mem_trim+0x270>)
 8004ed2:	4825      	ldr	r0, [pc, #148]	; (8004f68 <mem_trim+0x260>)
 8004ed4:	f00e fdc8 	bl	8013a68 <iprintf>
 8004ed8:	2000      	movs	r0, #0
 8004eda:	f00e fec7 	bl	8013c6c <fflush>
 8004ede:	f00e fe0c 	bl	8013afa <abort>
    mem2 = ptr_to_mem(ptr2);
 8004ee2:	89bb      	ldrh	r3, [r7, #12]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fd1d 	bl	8004924 <ptr_to_mem>
 8004eea:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004eec:	4b23      	ldr	r3, [pc, #140]	; (8004f7c <mem_trim+0x274>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d202      	bcs.n	8004efc <mem_trim+0x1f4>
      lfree = mem2;
 8004ef6:	4a21      	ldr	r2, [pc, #132]	; (8004f7c <mem_trim+0x274>)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2200      	movs	r2, #0
 8004f00:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	881a      	ldrh	r2, [r3, #0]
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	8afa      	ldrh	r2, [r7, #22]
 8004f0e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	89ba      	ldrh	r2, [r7, #12]
 8004f14:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f1e:	d007      	beq.n	8004f30 <mem_trim+0x228>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff fcfd 	bl	8004924 <ptr_to_mem>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	89bb      	ldrh	r3, [r7, #12]
 8004f2e:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8004f30:	4b0e      	ldr	r3, [pc, #56]	; (8004f6c <mem_trim+0x264>)
 8004f32:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8004f36:	8bf9      	ldrh	r1, [r7, #30]
 8004f38:	8abb      	ldrh	r3, [r7, #20]
 8004f3a:	1acb      	subs	r3, r1, r3
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	4413      	add	r3, r2
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <mem_trim+0x264>)
 8004f44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8004f48:	480a      	ldr	r0, [pc, #40]	; (8004f74 <mem_trim+0x26c>)
 8004f4a:	f7fc ff26 	bl	8001d9a <sys_mutex_unlock>
  return rmem;
 8004f4e:	687b      	ldr	r3, [r7, #4]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3720      	adds	r7, #32
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	20000648 	.word	0x20000648
 8004f5c:	2000064c 	.word	0x2000064c
 8004f60:	0801578c 	.word	0x0801578c
 8004f64:	080158e4 	.word	0x080158e4
 8004f68:	080157c4 	.word	0x080157c4
 8004f6c:	20002218 	.word	0x20002218
 8004f70:	080158fc 	.word	0x080158fc
 8004f74:	20000650 	.word	0x20000650
 8004f78:	0801591c 	.word	0x0801591c
 8004f7c:	20000654 	.word	0x20000654

08004f80 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004f80:	b590      	push	{r4, r7, lr}
 8004f82:	b089      	sub	sp, #36	; 0x24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <mem_malloc+0x14>
    return NULL;
 8004f90:	2300      	movs	r3, #0
 8004f92:	e112      	b.n	80051ba <mem_malloc+0x23a>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004f94:	88fb      	ldrh	r3, [r7, #6]
 8004f96:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004f98:	8bbb      	ldrh	r3, [r7, #28]
 8004f9a:	2b0b      	cmp	r3, #11
 8004f9c:	d801      	bhi.n	8004fa2 <mem_malloc+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004f9e:	230c      	movs	r3, #12
 8004fa0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004fa2:	8bbb      	ldrh	r3, [r7, #28]
 8004fa4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004fa8:	d803      	bhi.n	8004fb2 <mem_malloc+0x32>
 8004faa:	8bba      	ldrh	r2, [r7, #28]
 8004fac:	88fb      	ldrh	r3, [r7, #6]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d201      	bcs.n	8004fb6 <mem_malloc+0x36>
    return NULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e101      	b.n	80051ba <mem_malloc+0x23a>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8004fb6:	4883      	ldr	r0, [pc, #524]	; (80051c4 <mem_malloc+0x244>)
 8004fb8:	f7fc fee5 	bl	8001d86 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004fbc:	4b82      	ldr	r3, [pc, #520]	; (80051c8 <mem_malloc+0x248>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff fcc1 	bl	8004948 <mem_to_ptr>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	83fb      	strh	r3, [r7, #30]
 8004fca:	e0e3      	b.n	8005194 <mem_malloc+0x214>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004fcc:	8bfb      	ldrh	r3, [r7, #30]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff fca8 	bl	8004924 <ptr_to_mem>
 8004fd4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	791b      	ldrb	r3, [r3, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f040 80d3 	bne.w	8005186 <mem_malloc+0x206>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	8bfb      	ldrh	r3, [r7, #30]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	1f9a      	subs	r2, r3, #6
 8004fec:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	f0c0 80c9 	bcc.w	8005186 <mem_malloc+0x206>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	8bfb      	ldrh	r3, [r7, #30]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	1f9a      	subs	r2, r3, #6
 8005000:	8bbb      	ldrh	r3, [r7, #28]
 8005002:	3312      	adds	r3, #18
 8005004:	429a      	cmp	r2, r3
 8005006:	d351      	bcc.n	80050ac <mem_malloc+0x12c>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005008:	8bfa      	ldrh	r2, [r7, #30]
 800500a:	8bbb      	ldrh	r3, [r7, #28]
 800500c:	4413      	add	r3, r2
 800500e:	b29b      	uxth	r3, r3
 8005010:	3306      	adds	r3, #6
 8005012:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005014:	8a7b      	ldrh	r3, [r7, #18]
 8005016:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800501a:	d10b      	bne.n	8005034 <mem_malloc+0xb4>
 800501c:	4b6b      	ldr	r3, [pc, #428]	; (80051cc <mem_malloc+0x24c>)
 800501e:	f240 327a 	movw	r2, #890	; 0x37a
 8005022:	496b      	ldr	r1, [pc, #428]	; (80051d0 <mem_malloc+0x250>)
 8005024:	486b      	ldr	r0, [pc, #428]	; (80051d4 <mem_malloc+0x254>)
 8005026:	f00e fd1f 	bl	8013a68 <iprintf>
 800502a:	2000      	movs	r0, #0
 800502c:	f00e fe1e 	bl	8013c6c <fflush>
 8005030:	f00e fd63 	bl	8013afa <abort>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005034:	8a7b      	ldrh	r3, [r7, #18]
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff fc74 	bl	8004924 <ptr_to_mem>
 800503c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	881a      	ldrh	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8bfa      	ldrh	r2, [r7, #30]
 8005050:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	8a7a      	ldrh	r2, [r7, #18]
 8005056:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2201      	movs	r2, #1
 800505c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005066:	d007      	beq.n	8005078 <mem_malloc+0xf8>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff fc59 	bl	8004924 <ptr_to_mem>
 8005072:	4602      	mov	r2, r0
 8005074:	8a7b      	ldrh	r3, [r7, #18]
 8005076:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8005078:	4b57      	ldr	r3, [pc, #348]	; (80051d8 <mem_malloc+0x258>)
 800507a:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800507e:	8bbb      	ldrh	r3, [r7, #28]
 8005080:	4413      	add	r3, r2
 8005082:	b29b      	uxth	r3, r3
 8005084:	3306      	adds	r3, #6
 8005086:	b29a      	uxth	r2, r3
 8005088:	4b53      	ldr	r3, [pc, #332]	; (80051d8 <mem_malloc+0x258>)
 800508a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800508e:	4b52      	ldr	r3, [pc, #328]	; (80051d8 <mem_malloc+0x258>)
 8005090:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8005094:	4b50      	ldr	r3, [pc, #320]	; (80051d8 <mem_malloc+0x258>)
 8005096:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800509a:	429a      	cmp	r2, r3
 800509c:	d227      	bcs.n	80050ee <mem_malloc+0x16e>
 800509e:	4b4e      	ldr	r3, [pc, #312]	; (80051d8 <mem_malloc+0x258>)
 80050a0:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 80050a4:	4b4c      	ldr	r3, [pc, #304]	; (80051d8 <mem_malloc+0x258>)
 80050a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80050aa:	e020      	b.n	80050ee <mem_malloc+0x16e>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2201      	movs	r2, #1
 80050b0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 80050b2:	4b49      	ldr	r3, [pc, #292]	; (80051d8 <mem_malloc+0x258>)
 80050b4:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	4413      	add	r3, r2
 80050be:	b29c      	uxth	r4, r3
 80050c0:	6978      	ldr	r0, [r7, #20]
 80050c2:	f7ff fc41 	bl	8004948 <mem_to_ptr>
 80050c6:	4603      	mov	r3, r0
 80050c8:	1ae3      	subs	r3, r4, r3
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	4b42      	ldr	r3, [pc, #264]	; (80051d8 <mem_malloc+0x258>)
 80050ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80050d2:	4b41      	ldr	r3, [pc, #260]	; (80051d8 <mem_malloc+0x258>)
 80050d4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80050d8:	4b3f      	ldr	r3, [pc, #252]	; (80051d8 <mem_malloc+0x258>)
 80050da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80050de:	429a      	cmp	r2, r3
 80050e0:	d205      	bcs.n	80050ee <mem_malloc+0x16e>
 80050e2:	4b3d      	ldr	r3, [pc, #244]	; (80051d8 <mem_malloc+0x258>)
 80050e4:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 80050e8:	4b3b      	ldr	r3, [pc, #236]	; (80051d8 <mem_malloc+0x258>)
 80050ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80050ee:	4b36      	ldr	r3, [pc, #216]	; (80051c8 <mem_malloc+0x248>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d12c      	bne.n	8005152 <mem_malloc+0x1d2>
          struct mem *cur = lfree;
 80050f8:	4b33      	ldr	r3, [pc, #204]	; (80051c8 <mem_malloc+0x248>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80050fe:	e005      	b.n	800510c <mem_malloc+0x18c>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff fc0d 	bl	8004924 <ptr_to_mem>
 800510a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	791b      	ldrb	r3, [r3, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d004      	beq.n	800511e <mem_malloc+0x19e>
 8005114:	4b31      	ldr	r3, [pc, #196]	; (80051dc <mem_malloc+0x25c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	429a      	cmp	r2, r3
 800511c:	d1f0      	bne.n	8005100 <mem_malloc+0x180>
          }
          lfree = cur;
 800511e:	4a2a      	ldr	r2, [pc, #168]	; (80051c8 <mem_malloc+0x248>)
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005124:	4b28      	ldr	r3, [pc, #160]	; (80051c8 <mem_malloc+0x248>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	4b2c      	ldr	r3, [pc, #176]	; (80051dc <mem_malloc+0x25c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d010      	beq.n	8005152 <mem_malloc+0x1d2>
 8005130:	4b25      	ldr	r3, [pc, #148]	; (80051c8 <mem_malloc+0x248>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	791b      	ldrb	r3, [r3, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00b      	beq.n	8005152 <mem_malloc+0x1d2>
 800513a:	4b24      	ldr	r3, [pc, #144]	; (80051cc <mem_malloc+0x24c>)
 800513c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8005140:	4927      	ldr	r1, [pc, #156]	; (80051e0 <mem_malloc+0x260>)
 8005142:	4824      	ldr	r0, [pc, #144]	; (80051d4 <mem_malloc+0x254>)
 8005144:	f00e fc90 	bl	8013a68 <iprintf>
 8005148:	2000      	movs	r0, #0
 800514a:	f00e fd8f 	bl	8013c6c <fflush>
 800514e:	f00e fcd4 	bl	8013afa <abort>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8005152:	481c      	ldr	r0, [pc, #112]	; (80051c4 <mem_malloc+0x244>)
 8005154:	f7fc fe21 	bl	8001d9a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005158:	8bba      	ldrh	r2, [r7, #28]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	4413      	add	r3, r2
 800515e:	3306      	adds	r3, #6
 8005160:	4a1e      	ldr	r2, [pc, #120]	; (80051dc <mem_malloc+0x25c>)
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	4293      	cmp	r3, r2
 8005166:	d90b      	bls.n	8005180 <mem_malloc+0x200>
 8005168:	4b18      	ldr	r3, [pc, #96]	; (80051cc <mem_malloc+0x24c>)
 800516a:	f240 32ad 	movw	r2, #941	; 0x3ad
 800516e:	491d      	ldr	r1, [pc, #116]	; (80051e4 <mem_malloc+0x264>)
 8005170:	4818      	ldr	r0, [pc, #96]	; (80051d4 <mem_malloc+0x254>)
 8005172:	f00e fc79 	bl	8013a68 <iprintf>
 8005176:	2000      	movs	r0, #0
 8005178:	f00e fd78 	bl	8013c6c <fflush>
 800517c:	f00e fcbd 	bl	8013afa <abort>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	3306      	adds	r3, #6
 8005184:	e019      	b.n	80051ba <mem_malloc+0x23a>
         ptr = ptr_to_mem(ptr)->next) {
 8005186:	8bfb      	ldrh	r3, [r7, #30]
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff fbcb 	bl	8004924 <ptr_to_mem>
 800518e:	4603      	mov	r3, r0
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005194:	8bfa      	ldrh	r2, [r7, #30]
 8005196:	8bbb      	ldrh	r3, [r7, #28]
 8005198:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800519c:	429a      	cmp	r2, r3
 800519e:	f4ff af15 	bcc.w	8004fcc <mem_malloc+0x4c>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 80051a2:	4b0d      	ldr	r3, [pc, #52]	; (80051d8 <mem_malloc+0x258>)
 80051a4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80051a8:	3301      	adds	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <mem_malloc+0x258>)
 80051ae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80051b2:	4804      	ldr	r0, [pc, #16]	; (80051c4 <mem_malloc+0x244>)
 80051b4:	f7fc fdf1 	bl	8001d9a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3724      	adds	r7, #36	; 0x24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd90      	pop	{r4, r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20000650 	.word	0x20000650
 80051c8:	20000654 	.word	0x20000654
 80051cc:	0801578c 	.word	0x0801578c
 80051d0:	0801591c 	.word	0x0801591c
 80051d4:	080157c4 	.word	0x080157c4
 80051d8:	20002218 	.word	0x20002218
 80051dc:	2000064c 	.word	0x2000064c
 80051e0:	08015930 	.word	0x08015930
 80051e4:	0801594c 	.word	0x0801594c

080051e8 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	4603      	mov	r3, r0
 80051f0:	460a      	mov	r2, r1
 80051f2:	80fb      	strh	r3, [r7, #6]
 80051f4:	4613      	mov	r3, r2
 80051f6:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 80051f8:	88fb      	ldrh	r3, [r7, #6]
 80051fa:	88ba      	ldrh	r2, [r7, #4]
 80051fc:	fb02 f303 	mul.w	r3, r2, r3
 8005200:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	b29b      	uxth	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	429a      	cmp	r2, r3
 800520c:	d001      	beq.n	8005212 <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	e00e      	b.n	8005230 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	b29b      	uxth	r3, r3
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff feb2 	bl	8004f80 <mem_malloc>
 800521c:	60b8      	str	r0, [r7, #8]
  if (p) {
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d004      	beq.n	800522e <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	2100      	movs	r1, #0
 8005228:	68b8      	ldr	r0, [r7, #8]
 800522a:	f00e fe44 	bl	8013eb6 <memset>
  }
  return p;
 800522e:	68bb      	ldr	r3, [r7, #8]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	e011      	b.n	8005278 <memp_init_pool+0x40>
    memp->next = *desc->tab;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	891b      	ldrh	r3, [r3, #8]
 800526a:	461a      	mov	r2, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4413      	add	r3, r2
 8005270:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3301      	adds	r3, #1
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	895b      	ldrh	r3, [r3, #10]
 800527c:	461a      	mov	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	429a      	cmp	r2, r3
 8005282:	dce7      	bgt.n	8005254 <memp_init_pool+0x1c>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	8952      	ldrh	r2, [r2, #10]
 800528c:	80da      	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	601a      	str	r2, [r3, #0]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005298:	bf00      	nop
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80052aa:	2300      	movs	r3, #0
 80052ac:	80fb      	strh	r3, [r7, #6]
 80052ae:	e013      	b.n	80052d8 <memp_init+0x34>
    memp_init_pool(memp_pools[i]);
 80052b0:	88fb      	ldrh	r3, [r7, #6]
 80052b2:	4a0d      	ldr	r2, [pc, #52]	; (80052e8 <memp_init+0x44>)
 80052b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff ffbd 	bl	8005238 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	88fa      	ldrh	r2, [r7, #6]
 80052c2:	4909      	ldr	r1, [pc, #36]	; (80052e8 <memp_init+0x44>)
 80052c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80052c8:	6852      	ldr	r2, [r2, #4]
 80052ca:	4908      	ldr	r1, [pc, #32]	; (80052ec <memp_init+0x48>)
 80052cc:	331c      	adds	r3, #28
 80052ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	3301      	adds	r3, #1
 80052d6:	80fb      	strh	r3, [r7, #6]
 80052d8:	88fb      	ldrh	r3, [r7, #6]
 80052da:	2b07      	cmp	r3, #7
 80052dc:	d9e8      	bls.n	80052b0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80052de:	bf00      	nop
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	08017ae8 	.word	0x08017ae8
 80052ec:	20002218 	.word	0x20002218

080052f0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80052f8:	f7fc fdc8 	bl	8001e8c <sys_arch_protect>
 80052fc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01d      	beq.n	8005348 <do_memp_malloc_pool+0x58>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	601a      	str	r2, [r3, #0]
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	891a      	ldrh	r2, [r3, #8]
 800531c:	3201      	adds	r2, #1
 800531e:	b292      	uxth	r2, r2
 8005320:	811a      	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	891a      	ldrh	r2, [r3, #8]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	895b      	ldrh	r3, [r3, #10]
 800532e:	429a      	cmp	r2, r3
 8005330:	d905      	bls.n	800533e <do_memp_malloc_pool+0x4e>
      desc->stats->max = desc->stats->used;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6852      	ldr	r2, [r2, #4]
 800533a:	8912      	ldrh	r2, [r2, #8]
 800533c:	815a      	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f7fc fdac 	bl	8001e9c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	e009      	b.n	800535c <do_memp_malloc_pool+0x6c>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	889a      	ldrh	r2, [r3, #4]
 800534e:	3201      	adds	r2, #1
 8005350:	b292      	uxth	r2, r2
 8005352:	809a      	strh	r2, [r3, #4]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f7fc fda1 	bl	8001e9c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10b      	bne.n	800538a <memp_malloc_pool+0x26>
 8005372:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <memp_malloc_pool+0x40>)
 8005374:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8005378:	490b      	ldr	r1, [pc, #44]	; (80053a8 <memp_malloc_pool+0x44>)
 800537a:	480c      	ldr	r0, [pc, #48]	; (80053ac <memp_malloc_pool+0x48>)
 800537c:	f00e fb74 	bl	8013a68 <iprintf>
 8005380:	2000      	movs	r0, #0
 8005382:	f00e fc73 	bl	8013c6c <fflush>
 8005386:	f00e fbb8 	bl	8013afa <abort>
  if (desc == NULL) {
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <memp_malloc_pool+0x30>
    return NULL;
 8005390:	2300      	movs	r3, #0
 8005392:	e003      	b.n	800539c <memp_malloc_pool+0x38>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff ffab 	bl	80052f0 <do_memp_malloc_pool>
 800539a:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800539c:	4618      	mov	r0, r3
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	080159e4 	.word	0x080159e4
 80053a8:	08015a04 	.word	0x08015a04
 80053ac:	08015a18 	.word	0x08015a18

080053b0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	4603      	mov	r3, r0
 80053b8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	2b07      	cmp	r3, #7
 80053be:	d908      	bls.n	80053d2 <memp_malloc+0x22>
 80053c0:	4b0a      	ldr	r3, [pc, #40]	; (80053ec <memp_malloc+0x3c>)
 80053c2:	f240 1257 	movw	r2, #343	; 0x157
 80053c6:	490a      	ldr	r1, [pc, #40]	; (80053f0 <memp_malloc+0x40>)
 80053c8:	480a      	ldr	r0, [pc, #40]	; (80053f4 <memp_malloc+0x44>)
 80053ca:	f7fc fd26 	bl	8001e1a <lwip_win32_platform_diag>
 80053ce:	2300      	movs	r3, #0
 80053d0:	e008      	b.n	80053e4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	4a08      	ldr	r2, [pc, #32]	; (80053f8 <memp_malloc+0x48>)
 80053d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff ff88 	bl	80052f0 <do_memp_malloc_pool>
 80053e0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80053e2:	68fb      	ldr	r3, [r7, #12]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	080159e4 	.word	0x080159e4
 80053f0:	08015a40 	.word	0x08015a40
 80053f4:	08015a18 	.word	0x08015a18
 80053f8:	08017ae8 	.word	0x08017ae8

080053fc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800540a:	f7fc fd3f 	bl	8001e8c <sys_arch_protect>
 800540e:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	891a      	ldrh	r2, [r3, #8]
 8005416:	3a01      	subs	r2, #1
 8005418:	b292      	uxth	r2, r2
 800541a:	811a      	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800542e:	68b8      	ldr	r0, [r7, #8]
 8005430:	f7fc fd34 	bl	8001e9c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8005434:	bf00      	nop
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10b      	bne.n	8005464 <memp_free_pool+0x28>
 800544c:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <memp_free_pool+0x48>)
 800544e:	f240 1295 	movw	r2, #405	; 0x195
 8005452:	490d      	ldr	r1, [pc, #52]	; (8005488 <memp_free_pool+0x4c>)
 8005454:	480d      	ldr	r0, [pc, #52]	; (800548c <memp_free_pool+0x50>)
 8005456:	f00e fb07 	bl	8013a68 <iprintf>
 800545a:	2000      	movs	r0, #0
 800545c:	f00e fc06 	bl	8013c6c <fflush>
 8005460:	f00e fb4b 	bl	8013afa <abort>
  if ((desc == NULL) || (mem == NULL)) {
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <memp_free_pool+0x3e>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d004      	beq.n	800547a <memp_free_pool+0x3e>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff ffc2 	bl	80053fc <do_memp_free_pool>
 8005478:	e000      	b.n	800547c <memp_free_pool+0x40>
    return;
 800547a:	bf00      	nop
}
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	080159e4 	.word	0x080159e4
 8005488:	08015a04 	.word	0x08015a04
 800548c:	08015a18 	.word	0x08015a18

08005490 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	6039      	str	r1, [r7, #0]
 800549a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800549c:	79fb      	ldrb	r3, [r7, #7]
 800549e:	2b07      	cmp	r3, #7
 80054a0:	d907      	bls.n	80054b2 <memp_free+0x22>
 80054a2:	4b0c      	ldr	r3, [pc, #48]	; (80054d4 <memp_free+0x44>)
 80054a4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80054a8:	490b      	ldr	r1, [pc, #44]	; (80054d8 <memp_free+0x48>)
 80054aa:	480c      	ldr	r0, [pc, #48]	; (80054dc <memp_free+0x4c>)
 80054ac:	f7fc fcb5 	bl	8001e1a <lwip_win32_platform_diag>
 80054b0:	e00c      	b.n	80054cc <memp_free+0x3c>

  if (mem == NULL) {
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	4a09      	ldr	r2, [pc, #36]	; (80054e0 <memp_free+0x50>)
 80054bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c0:	6839      	ldr	r1, [r7, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff ff9a 	bl	80053fc <do_memp_free_pool>
 80054c8:	e000      	b.n	80054cc <memp_free+0x3c>
    return;
 80054ca:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	080159e4 	.word	0x080159e4
 80054d8:	08015a60 	.word	0x08015a60
 80054dc:	08015a18 	.word	0x08015a18
 80054e0:	08017ae8 	.word	0x08017ae8

080054e4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80054e8:	bf00      	nop
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
	...

080054f4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
 8005500:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d108      	bne.n	800551a <netif_add+0x26>
 8005508:	4b5b      	ldr	r3, [pc, #364]	; (8005678 <netif_add+0x184>)
 800550a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800550e:	495b      	ldr	r1, [pc, #364]	; (800567c <netif_add+0x188>)
 8005510:	485b      	ldr	r0, [pc, #364]	; (8005680 <netif_add+0x18c>)
 8005512:	f7fc fc82 	bl	8001e1a <lwip_win32_platform_diag>
 8005516:	2300      	movs	r3, #0
 8005518:	e0a9      	b.n	800566e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	2b00      	cmp	r3, #0
 800551e:	d108      	bne.n	8005532 <netif_add+0x3e>
 8005520:	4b55      	ldr	r3, [pc, #340]	; (8005678 <netif_add+0x184>)
 8005522:	f240 1233 	movw	r2, #307	; 0x133
 8005526:	4957      	ldr	r1, [pc, #348]	; (8005684 <netif_add+0x190>)
 8005528:	4855      	ldr	r0, [pc, #340]	; (8005680 <netif_add+0x18c>)
 800552a:	f7fc fc76 	bl	8001e1a <lwip_win32_platform_diag>
 800552e:	2300      	movs	r3, #0
 8005530:	e09d      	b.n	800566e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005538:	4b53      	ldr	r3, [pc, #332]	; (8005688 <netif_add+0x194>)
 800553a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005542:	4b51      	ldr	r3, [pc, #324]	; (8005688 <netif_add+0x194>)
 8005544:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800554c:	4b4e      	ldr	r3, [pc, #312]	; (8005688 <netif_add+0x194>)
 800554e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4a49      	ldr	r2, [pc, #292]	; (800568c <netif_add+0x198>)
 8005566:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */

  /* remember netif specific state information data */
  netif->state = state;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a3a      	ldr	r2, [r7, #32]
 800557a:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800557c:	4b44      	ldr	r3, [pc, #272]	; (8005690 <netif_add+0x19c>)
 800557e:	781a      	ldrb	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800558a:	611a      	str	r2, [r3, #16]
  netif->reschedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
#endif /* ENABLE_LOOPBACK */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 f924 	bl	80057e0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	4798      	blx	r3
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <netif_add+0xb4>
    return NULL;
 80055a4:	2300      	movs	r3, #0
 80055a6:	e062      	b.n	800566e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80055ae:	2bff      	cmp	r3, #255	; 0xff
 80055b0:	d103      	bne.n	80055ba <netif_add+0xc6>
        netif->num = 0;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 80055ba:	2300      	movs	r3, #0
 80055bc:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80055be:	4b35      	ldr	r3, [pc, #212]	; (8005694 <netif_add+0x1a0>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	e035      	b.n	8005632 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d10b      	bne.n	80055e6 <netif_add+0xf2>
 80055ce:	4b2a      	ldr	r3, [pc, #168]	; (8005678 <netif_add+0x184>)
 80055d0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80055d4:	4930      	ldr	r1, [pc, #192]	; (8005698 <netif_add+0x1a4>)
 80055d6:	482a      	ldr	r0, [pc, #168]	; (8005680 <netif_add+0x18c>)
 80055d8:	f00e fa46 	bl	8013a68 <iprintf>
 80055dc:	2000      	movs	r0, #0
 80055de:	f00e fb45 	bl	8013c6c <fflush>
 80055e2:	f00e fa8a 	bl	8013afa <abort>
        num_netifs++;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	3301      	adds	r3, #1
 80055ea:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2bff      	cmp	r3, #255	; 0xff
 80055f0:	dd0b      	ble.n	800560a <netif_add+0x116>
 80055f2:	4b21      	ldr	r3, [pc, #132]	; (8005678 <netif_add+0x184>)
 80055f4:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80055f8:	4928      	ldr	r1, [pc, #160]	; (800569c <netif_add+0x1a8>)
 80055fa:	4821      	ldr	r0, [pc, #132]	; (8005680 <netif_add+0x18c>)
 80055fc:	f00e fa34 	bl	8013a68 <iprintf>
 8005600:	2000      	movs	r0, #0
 8005602:	f00e fb33 	bl	8013c6c <fflush>
 8005606:	f00e fa78 	bl	8013afa <abort>
        if (netif2->num == netif->num) {
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005616:	429a      	cmp	r2, r3
 8005618:	d108      	bne.n	800562c <netif_add+0x138>
          netif->num++;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005620:	3301      	adds	r3, #1
 8005622:	b2da      	uxtb	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 800562a:	e005      	b.n	8005638 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1c6      	bne.n	80055c6 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1b4      	bne.n	80055a8 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005644:	2bfe      	cmp	r3, #254	; 0xfe
 8005646:	d103      	bne.n	8005650 <netif_add+0x15c>
    netif_num = 0;
 8005648:	4b11      	ldr	r3, [pc, #68]	; (8005690 <netif_add+0x19c>)
 800564a:	2200      	movs	r2, #0
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	e006      	b.n	800565e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005656:	3301      	adds	r3, #1
 8005658:	b2da      	uxtb	r2, r3
 800565a:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <netif_add+0x19c>)
 800565c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800565e:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <netif_add+0x1a0>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005666:	4a0b      	ldr	r2, [pc, #44]	; (8005694 <netif_add+0x1a0>)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800566c:	68fb      	ldr	r3, [r7, #12]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	08015a7c 	.word	0x08015a7c
 800567c:	08015afc 	.word	0x08015afc
 8005680:	08015ab8 	.word	0x08015ab8
 8005684:	08015b18 	.word	0x08015b18
 8005688:	08017a40 	.word	0x08017a40
 800568c:	080059f9 	.word	0x080059f9
 8005690:	200006f8 	.word	0x200006f8
 8005694:	2000220c 	.word	0x2000220c
 8005698:	08015b3c 	.word	0x08015b3c
 800569c:	08015b50 	.word	0x08015b50

080056a0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80056aa:	6839      	ldr	r1, [r7, #0]
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f002 ff95 	bl	80085dc <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80056b2:	bf00      	nop
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10b      	bne.n	80056e6 <netif_do_set_ipaddr+0x2a>
 80056ce:	4b22      	ldr	r3, [pc, #136]	; (8005758 <netif_do_set_ipaddr+0x9c>)
 80056d0:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 80056d4:	4921      	ldr	r1, [pc, #132]	; (800575c <netif_do_set_ipaddr+0xa0>)
 80056d6:	4822      	ldr	r0, [pc, #136]	; (8005760 <netif_do_set_ipaddr+0xa4>)
 80056d8:	f00e f9c6 	bl	8013a68 <iprintf>
 80056dc:	2000      	movs	r0, #0
 80056de:	f00e fac5 	bl	8013c6c <fflush>
 80056e2:	f00e fa0a 	bl	8013afa <abort>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10b      	bne.n	8005704 <netif_do_set_ipaddr+0x48>
 80056ec:	4b1a      	ldr	r3, [pc, #104]	; (8005758 <netif_do_set_ipaddr+0x9c>)
 80056ee:	f240 12dd 	movw	r2, #477	; 0x1dd
 80056f2:	491a      	ldr	r1, [pc, #104]	; (800575c <netif_do_set_ipaddr+0xa0>)
 80056f4:	481a      	ldr	r0, [pc, #104]	; (8005760 <netif_do_set_ipaddr+0xa4>)
 80056f6:	f00e f9b7 	bl	8013a68 <iprintf>
 80056fa:	2000      	movs	r0, #0
 80056fc:	f00e fab6 	bl	8013c6c <fflush>
 8005700:	f00e f9fb 	bl	8013afa <abort>

  /* address is actually being changed? */
  if (ip4_addr_eq(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3304      	adds	r3, #4
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d01c      	beq.n	800574c <netif_do_set_ipaddr+0x90>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3304      	adds	r3, #4
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005722:	f107 0314 	add.w	r3, r7, #20
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff ffb9 	bl	80056a0 <netif_do_ip_addr_changed>
#endif /* LWIP_ACD */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <netif_do_set_ipaddr+0x7e>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	e000      	b.n	800573c <netif_do_set_ipaddr+0x80>
 800573a:	2300      	movs	r3, #0
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005740:	2101      	movs	r1, #1
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 f8d2 	bl	80058ec <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005748:	2301      	movs	r3, #1
 800574a:	e000      	b.n	800574e <netif_do_set_ipaddr+0x92>
  }
  return 0; /* address unchanged */
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	08015a7c 	.word	0x08015a7c
 800575c:	08015b80 	.word	0x08015b80
 8005760:	08015ab8 	.word	0x08015ab8

08005764 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(netmask, netif_ip4_netmask(netif)) == 0) {
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3308      	adds	r3, #8
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d00a      	beq.n	8005794 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <netif_do_set_netmask+0x26>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	e000      	b.n	800578c <netif_do_set_netmask+0x28>
 800578a:	2300      	movs	r3, #0
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b085      	sub	sp, #20
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(gw, netif_ip4_gw(netif)) == 0) {
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	330c      	adds	r3, #12
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d00a      	beq.n	80057d2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <netif_do_set_gw+0x26>
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	e000      	b.n	80057ca <netif_do_set_gw+0x28>
 80057c8:	2300      	movs	r3, #0
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b088      	sub	sp, #32
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80057fc:	4b1c      	ldr	r3, [pc, #112]	; (8005870 <netif_set_addr+0x90>)
 80057fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005806:	4b1a      	ldr	r3, [pc, #104]	; (8005870 <netif_set_addr+0x90>)
 8005808:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005810:	4b17      	ldr	r3, [pc, #92]	; (8005870 <netif_set_addr+0x90>)
 8005812:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <netif_set_addr+0x42>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <netif_set_addr+0x46>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <netif_set_addr+0x48>
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]
  if (remove) {
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d006      	beq.n	800583e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005830:	f107 0310 	add.w	r3, r7, #16
 8005834:	461a      	mov	r2, r3
 8005836:	68b9      	ldr	r1, [r7, #8]
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f7ff ff3f 	bl	80056bc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800583e:	69fa      	ldr	r2, [r7, #28]
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f7ff ff8e 	bl	8005764 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	6839      	ldr	r1, [r7, #0]
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7ff ffa8 	bl	80057a2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d106      	bne.n	8005866 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005858:	f107 0310 	add.w	r3, r7, #16
 800585c:	461a      	mov	r2, r3
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f7ff ff2b 	bl	80056bc <netif_do_set_ipaddr>
  }
  if (change_reason != LWIP_NSC_NONE) {
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005866:	bf00      	nop
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	08017a40 	.word	0x08017a40

08005874 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800587c:	4a04      	ldr	r2, [pc, #16]	; (8005890 <netif_set_default+0x1c>)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005882:	bf00      	nop
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	20002210 	.word	0x20002210

08005894 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d107      	bne.n	80058b2 <netif_set_up+0x1e>
 80058a2:	4b0f      	ldr	r3, [pc, #60]	; (80058e0 <netif_set_up+0x4c>)
 80058a4:	f240 326b 	movw	r2, #875	; 0x36b
 80058a8:	490e      	ldr	r1, [pc, #56]	; (80058e4 <netif_set_up+0x50>)
 80058aa:	480f      	ldr	r0, [pc, #60]	; (80058e8 <netif_set_up+0x54>)
 80058ac:	f7fc fab5 	bl	8001e1a <lwip_win32_platform_diag>
 80058b0:	e013      	b.n	80058da <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10c      	bne.n	80058da <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80058d2:	2103      	movs	r1, #3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f809 	bl	80058ec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	08015a7c 	.word	0x08015a7c
 80058e4:	08015bf0 	.word	0x08015bf0
 80058e8:	08015ab8 	.word	0x08015ab8

080058ec <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	460b      	mov	r3, r1
 80058f6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10b      	bne.n	8005916 <netif_issue_reports+0x2a>
 80058fe:	4b11      	ldr	r3, [pc, #68]	; (8005944 <netif_issue_reports+0x58>)
 8005900:	f44f 7262 	mov.w	r2, #904	; 0x388
 8005904:	4910      	ldr	r1, [pc, #64]	; (8005948 <netif_issue_reports+0x5c>)
 8005906:	4811      	ldr	r0, [pc, #68]	; (800594c <netif_issue_reports+0x60>)
 8005908:	f00e f8ae 	bl	8013a68 <iprintf>
 800590c:	2000      	movs	r0, #0
 800590e:	f00e f9ad 	bl	8013c6c <fflush>
 8005912:	f00e f8f2 	bl	8013afa <abort>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00b      	beq.n	800593c <netif_issue_reports+0x50>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800592a:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800592e:	2b00      	cmp	r3, #0
 8005930:	d004      	beq.n	800593c <netif_issue_reports+0x50>
    return;
  }
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005932:	78fb      	ldrb	r3, [r7, #3]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b00      	cmp	r3, #0
 800593a:	e000      	b.n	800593e <netif_issue_reports+0x52>
    return;
 800593c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	08015a7c 	.word	0x08015a7c
 8005948:	08015c0c 	.word	0x08015c0c
 800594c:	08015ab8 	.word	0x08015ab8

08005950 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d107      	bne.n	800596e <netif_set_link_up+0x1e>
 800595e:	4b0f      	ldr	r3, [pc, #60]	; (800599c <netif_set_link_up+0x4c>)
 8005960:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8005964:	490e      	ldr	r1, [pc, #56]	; (80059a0 <netif_set_link_up+0x50>)
 8005966:	480f      	ldr	r0, [pc, #60]	; (80059a4 <netif_set_link_up+0x54>)
 8005968:	f7fc fa57 	bl	8001e1a <lwip_win32_platform_diag>
 800596c:	e013      	b.n	8005996 <netif_set_link_up+0x46>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10c      	bne.n	8005996 <netif_set_link_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005982:	f043 0304 	orr.w	r3, r3, #4
 8005986:	b2da      	uxtb	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

#if LWIP_AUTOIP
    autoip_network_changed_link_up(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800598e:	2103      	movs	r1, #3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff ffab 	bl	80058ec <netif_issue_reports>
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	08015a7c 	.word	0x08015a7c
 80059a0:	08015c50 	.word	0x08015c50
 80059a4:	08015ab8 	.word	0x08015ab8

080059a8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d107      	bne.n	80059c6 <netif_set_link_down+0x1e>
 80059b6:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <netif_set_link_down+0x44>)
 80059b8:	f240 4223 	movw	r2, #1059	; 0x423
 80059bc:	490c      	ldr	r1, [pc, #48]	; (80059f0 <netif_set_link_down+0x48>)
 80059be:	480d      	ldr	r0, [pc, #52]	; (80059f4 <netif_set_link_down+0x4c>)
 80059c0:	f7fc fa2b 	bl	8001e1a <lwip_win32_platform_diag>
 80059c4:	e00f      	b.n	80059e6 <netif_set_link_down+0x3e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <netif_set_link_down+0x3e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80059da:	f023 0304 	bic.w	r3, r3, #4
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	08015a7c 	.word	0x08015a7c
 80059f0:	08015c74 	.word	0x08015c74
 80059f4:	08015ab8 	.word	0x08015ab8

080059f8 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005a04:	f06f 030b 	mvn.w	r3, #11
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005a1e:	79fb      	ldrb	r3, [r7, #7]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d013      	beq.n	8005a4c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005a24:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <netif_get_by_index+0x48>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	e00c      	b.n	8005a46 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a32:	3301      	adds	r3, #1
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	79fa      	ldrb	r2, [r7, #7]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d101      	bne.n	8005a40 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	e006      	b.n	8005a4e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1ef      	bne.n	8005a2c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	2000220c 	.word	0x2000220c

08005a60 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005a66:	f7fc fa11 	bl	8001e8c <sys_arch_protect>
 8005a6a:	6038      	str	r0, [r7, #0]
 8005a6c:	4b0d      	ldr	r3, [pc, #52]	; (8005aa4 <pbuf_free_ooseq+0x44>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	6838      	ldr	r0, [r7, #0]
 8005a74:	f7fc fa12 	bl	8001e9c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005a78:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <pbuf_free_ooseq+0x48>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	607b      	str	r3, [r7, #4]
 8005a7e:	e00a      	b.n	8005a96 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f002 fde5 	bl	8008658 <tcp_free_ooseq>
      return;
 8005a8e:	e005      	b.n	8005a9c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	607b      	str	r3, [r7, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1f1      	bne.n	8005a80 <pbuf_free_ooseq+0x20>
    }
  }
}
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20002214 	.word	0x20002214
 8005aa8:	200022c0 	.word	0x200022c0

08005aac <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8005ab4:	f7ff ffd4 	bl	8005a60 <pbuf_free_ooseq>
}
 8005ab8:	bf00      	nop
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8005ac6:	f7fc f9e1 	bl	8001e8c <sys_arch_protect>
 8005aca:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8005acc:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <pbuf_pool_is_empty+0x4c>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8005ad2:	4b0e      	ldr	r3, [pc, #56]	; (8005b0c <pbuf_pool_is_empty+0x4c>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7fc f9df 	bl	8001e9c <sys_arch_unprotect>

  if (!queued) {
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10f      	bne.n	8005b04 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	480a      	ldr	r0, [pc, #40]	; (8005b10 <pbuf_pool_is_empty+0x50>)
 8005ae8:	f7fc fb64 	bl	80021b4 <tcpip_try_callback>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d008      	beq.n	8005b04 <pbuf_pool_is_empty+0x44>
 8005af2:	f7fc f9cb 	bl	8001e8c <sys_arch_protect>
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	4b04      	ldr	r3, [pc, #16]	; (8005b0c <pbuf_pool_is_empty+0x4c>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	701a      	strb	r2, [r3, #0]
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fc f9cc 	bl	8001e9c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005b04:	bf00      	nop
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	20002214 	.word	0x20002214
 8005b10:	08005aad 	.word	0x08005aad

08005b14 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	4611      	mov	r1, r2
 8005b20:	461a      	mov	r2, r3
 8005b22:	460b      	mov	r3, r1
 8005b24:	80fb      	strh	r3, [r7, #6]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	88fa      	ldrh	r2, [r7, #6]
 8005b3a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	88ba      	ldrh	r2, [r7, #4]
 8005b40:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005b42:	8b3b      	ldrh	r3, [r7, #24]
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	7f3a      	ldrb	r2, [r7, #28]
 8005b4e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2201      	movs	r2, #1
 8005b54:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	73da      	strb	r2, [r3, #15]

  LWIP_PBUF_CUSTOM_DATA_INIT(p);
}
 8005b5c:	bf00      	nop
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08c      	sub	sp, #48	; 0x30
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	4603      	mov	r3, r0
 8005b70:	71fb      	strb	r3, [r7, #7]
 8005b72:	460b      	mov	r3, r1
 8005b74:	80bb      	strh	r3, [r7, #4]
 8005b76:	4613      	mov	r3, r2
 8005b78:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005b7e:	887b      	ldrh	r3, [r7, #2]
 8005b80:	2b41      	cmp	r3, #65	; 0x41
 8005b82:	d00b      	beq.n	8005b9c <pbuf_alloc+0x34>
 8005b84:	2b41      	cmp	r3, #65	; 0x41
 8005b86:	dc02      	bgt.n	8005b8e <pbuf_alloc+0x26>
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d007      	beq.n	8005b9c <pbuf_alloc+0x34>
 8005b8c:	e08b      	b.n	8005ca6 <pbuf_alloc+0x13e>
 8005b8e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005b92:	d00b      	beq.n	8005bac <pbuf_alloc+0x44>
 8005b94:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005b98:	d05b      	beq.n	8005c52 <pbuf_alloc+0xea>
 8005b9a:	e084      	b.n	8005ca6 <pbuf_alloc+0x13e>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005b9c:	887a      	ldrh	r2, [r7, #2]
 8005b9e:	88bb      	ldrh	r3, [r7, #4]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	f000 f898 	bl	8005cd8 <pbuf_alloc_reference>
 8005ba8:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005baa:	e088      	b.n	8005cbe <pbuf_alloc+0x156>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005bac:	2300      	movs	r3, #0
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005bb4:	88bb      	ldrh	r3, [r7, #4]
 8005bb6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005bb8:	2007      	movs	r0, #7
 8005bba:	f7ff fbf9 	bl	80053b0 <memp_malloc>
 8005bbe:	6178      	str	r0, [r7, #20]
        if (q == NULL) {
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d109      	bne.n	8005bda <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8005bc6:	f7ff ff7b 	bl	8005ac0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <pbuf_alloc+0x6e>
            pbuf_free(p);
 8005bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bd2:	f000 fa33 	bl	800603c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	e072      	b.n	8005cc0 <pbuf_alloc+0x158>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005bda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bdc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	8b7b      	ldrh	r3, [r7, #26]
 8005be4:	4293      	cmp	r3, r2
 8005be6:	bf28      	it	cs
 8005be8:	4613      	movcs	r3, r2
 8005bea:	827b      	strh	r3, [r7, #18]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005bec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bee:	3310      	adds	r3, #16
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	18d1      	adds	r1, r2, r3
 8005bf4:	8a78      	ldrh	r0, [r7, #18]
 8005bf6:	8b7a      	ldrh	r2, [r7, #26]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	9301      	str	r3, [sp, #4]
 8005bfc:	887b      	ldrh	r3, [r7, #2]
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	4603      	mov	r3, r0
 8005c02:	6978      	ldr	r0, [r7, #20]
 8005c04:	f7ff ff86 	bl	8005b14 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005c08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c0e:	d10b      	bne.n	8005c28 <pbuf_alloc+0xc0>
 8005c10:	4b2d      	ldr	r3, [pc, #180]	; (8005cc8 <pbuf_alloc+0x160>)
 8005c12:	f240 1205 	movw	r2, #261	; 0x105
 8005c16:	492d      	ldr	r1, [pc, #180]	; (8005ccc <pbuf_alloc+0x164>)
 8005c18:	482d      	ldr	r0, [pc, #180]	; (8005cd0 <pbuf_alloc+0x168>)
 8005c1a:	f00d ff25 	bl	8013a68 <iprintf>
 8005c1e:	2000      	movs	r0, #0
 8005c20:	f00e f824 	bl	8013c6c <fflush>
 8005c24:	f00d ff69 	bl	8013afa <abort>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d102      	bne.n	8005c34 <pbuf_alloc+0xcc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
 8005c32:	e002      	b.n	8005c3a <pbuf_alloc+0xd2>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005c3e:	8b7a      	ldrh	r2, [r7, #26]
 8005c40:	8a7b      	ldrh	r3, [r7, #18]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005c4a:	8b7b      	ldrh	r3, [r7, #26]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1b3      	bne.n	8005bb8 <pbuf_alloc+0x50>
      break;
 8005c50:	e035      	b.n	8005cbe <pbuf_alloc+0x156>
    }
    case PBUF_RAM: {
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005c52:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005c54:	88bb      	ldrh	r3, [r7, #4]
 8005c56:	4413      	add	r3, r2
 8005c58:	823b      	strh	r3, [r7, #16]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005c5a:	8a3b      	ldrh	r3, [r7, #16]
 8005c5c:	3310      	adds	r3, #16
 8005c5e:	81fb      	strh	r3, [r7, #14]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005c60:	8a3a      	ldrh	r2, [r7, #16]
 8005c62:	88bb      	ldrh	r3, [r7, #4]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d303      	bcc.n	8005c70 <pbuf_alloc+0x108>
 8005c68:	89fa      	ldrh	r2, [r7, #14]
 8005c6a:	88bb      	ldrh	r3, [r7, #4]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d201      	bcs.n	8005c74 <pbuf_alloc+0x10c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
        return NULL;
 8005c70:	2300      	movs	r3, #0
 8005c72:	e025      	b.n	8005cc0 <pbuf_alloc+0x158>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005c74:	89fb      	ldrh	r3, [r7, #14]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7ff f982 	bl	8004f80 <mem_malloc>
 8005c7c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <pbuf_alloc+0x120>
        return NULL;
 8005c84:	2300      	movs	r3, #0
 8005c86:	e01b      	b.n	8005cc0 <pbuf_alloc+0x158>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005c88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c8a:	3310      	adds	r3, #16
 8005c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8e:	18d1      	adds	r1, r2, r3
 8005c90:	88b8      	ldrh	r0, [r7, #4]
 8005c92:	88ba      	ldrh	r2, [r7, #4]
 8005c94:	2300      	movs	r3, #0
 8005c96:	9301      	str	r3, [sp, #4]
 8005c98:	887b      	ldrh	r3, [r7, #2]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ca0:	f7ff ff38 	bl	8005b14 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005ca4:	e00b      	b.n	8005cbe <pbuf_alloc+0x156>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005ca6:	4b08      	ldr	r3, [pc, #32]	; (8005cc8 <pbuf_alloc+0x160>)
 8005ca8:	f240 1229 	movw	r2, #297	; 0x129
 8005cac:	4909      	ldr	r1, [pc, #36]	; (8005cd4 <pbuf_alloc+0x16c>)
 8005cae:	4808      	ldr	r0, [pc, #32]	; (8005cd0 <pbuf_alloc+0x168>)
 8005cb0:	f00d feda 	bl	8013a68 <iprintf>
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	f00d ffd9 	bl	8013c6c <fflush>
 8005cba:	f00d ff1e 	bl	8013afa <abort>
      return NULL;
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3728      	adds	r7, #40	; 0x28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	08015c98 	.word	0x08015c98
 8005ccc:	08015cb8 	.word	0x08015cb8
 8005cd0:	08015cec 	.word	0x08015cec
 8005cd4:	08015d14 	.word	0x08015d14

08005cd8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	807b      	strh	r3, [r7, #2]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005ce8:	883b      	ldrh	r3, [r7, #0]
 8005cea:	2b41      	cmp	r3, #65	; 0x41
 8005cec:	d00e      	beq.n	8005d0c <pbuf_alloc_reference+0x34>
 8005cee:	883b      	ldrh	r3, [r7, #0]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d00b      	beq.n	8005d0c <pbuf_alloc_reference+0x34>
 8005cf4:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <pbuf_alloc_reference+0x68>)
 8005cf6:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8005cfa:	4912      	ldr	r1, [pc, #72]	; (8005d44 <pbuf_alloc_reference+0x6c>)
 8005cfc:	4812      	ldr	r0, [pc, #72]	; (8005d48 <pbuf_alloc_reference+0x70>)
 8005cfe:	f00d feb3 	bl	8013a68 <iprintf>
 8005d02:	2000      	movs	r0, #0
 8005d04:	f00d ffb2 	bl	8013c6c <fflush>
 8005d08:	f00d fef7 	bl	8013afa <abort>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005d0c:	2006      	movs	r0, #6
 8005d0e:	f7ff fb4f 	bl	80053b0 <memp_malloc>
 8005d12:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <pbuf_alloc_reference+0x46>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e00b      	b.n	8005d36 <pbuf_alloc_reference+0x5e>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005d1e:	8879      	ldrh	r1, [r7, #2]
 8005d20:	887a      	ldrh	r2, [r7, #2]
 8005d22:	2300      	movs	r3, #0
 8005d24:	9301      	str	r3, [sp, #4]
 8005d26:	883b      	ldrh	r3, [r7, #0]
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	6879      	ldr	r1, [r7, #4]
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f7ff fef0 	bl	8005b14 <pbuf_init_alloced_pbuf>
  return p;
 8005d34:	68fb      	ldr	r3, [r7, #12]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	08015c98 	.word	0x08015c98
 8005d44:	08015d30 	.word	0x08015d30
 8005d48:	08015cec 	.word	0x08015cec

08005d4c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	460b      	mov	r3, r1
 8005d56:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10b      	bne.n	8005d76 <pbuf_realloc+0x2a>
 8005d5e:	4b47      	ldr	r3, [pc, #284]	; (8005e7c <pbuf_realloc+0x130>)
 8005d60:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8005d64:	4946      	ldr	r1, [pc, #280]	; (8005e80 <pbuf_realloc+0x134>)
 8005d66:	4847      	ldr	r0, [pc, #284]	; (8005e84 <pbuf_realloc+0x138>)
 8005d68:	f00d fe7e 	bl	8013a68 <iprintf>
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	f00d ff7d 	bl	8013c6c <fflush>
 8005d72:	f00d fec2 	bl	8013afa <abort>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	891b      	ldrh	r3, [r3, #8]
 8005d7a:	887a      	ldrh	r2, [r7, #2]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d278      	bcs.n	8005e72 <pbuf_realloc+0x126>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	891a      	ldrh	r2, [r3, #8]
 8005d84:	887b      	ldrh	r3, [r7, #2]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	823b      	strh	r3, [r7, #16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005d8a:	887b      	ldrh	r3, [r7, #2]
 8005d8c:	827b      	strh	r3, [r7, #18]
  q = p;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005d92:	e01d      	b.n	8005dd0 <pbuf_realloc+0x84>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	895b      	ldrh	r3, [r3, #10]
 8005d98:	8a7a      	ldrh	r2, [r7, #18]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	891a      	ldrh	r2, [r3, #8]
 8005da2:	8a3b      	ldrh	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10b      	bne.n	8005dd0 <pbuf_realloc+0x84>
 8005db8:	4b30      	ldr	r3, [pc, #192]	; (8005e7c <pbuf_realloc+0x130>)
 8005dba:	f240 12b1 	movw	r2, #433	; 0x1b1
 8005dbe:	4932      	ldr	r1, [pc, #200]	; (8005e88 <pbuf_realloc+0x13c>)
 8005dc0:	4830      	ldr	r0, [pc, #192]	; (8005e84 <pbuf_realloc+0x138>)
 8005dc2:	f00d fe51 	bl	8013a68 <iprintf>
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	f00d ff50 	bl	8013c6c <fflush>
 8005dcc:	f00d fe95 	bl	8013afa <abort>
  while (rem_len > q->len) {
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	895b      	ldrh	r3, [r3, #10]
 8005dd4:	8a7a      	ldrh	r2, [r7, #18]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d8dc      	bhi.n	8005d94 <pbuf_realloc+0x48>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	7b1b      	ldrb	r3, [r3, #12]
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d131      	bne.n	8005e4a <pbuf_realloc+0xfe>
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	895b      	ldrh	r3, [r3, #10]
 8005dea:	8a7a      	ldrh	r2, [r7, #18]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d02c      	beq.n	8005e4a <pbuf_realloc+0xfe>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    struct pbuf *r = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	461a      	mov	r2, r3
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	8a7b      	ldrh	r3, [r7, #18]
 8005dfe:	4413      	add	r3, r2
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	4619      	mov	r1, r3
 8005e04:	6978      	ldr	r0, [r7, #20]
 8005e06:	f7fe ff7f 	bl	8004d08 <mem_trim>
 8005e0a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned r == NULL", r != NULL);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10b      	bne.n	8005e2a <pbuf_realloc+0xde>
 8005e12:	4b1a      	ldr	r3, [pc, #104]	; (8005e7c <pbuf_realloc+0x130>)
 8005e14:	f240 12bf 	movw	r2, #447	; 0x1bf
 8005e18:	491c      	ldr	r1, [pc, #112]	; (8005e8c <pbuf_realloc+0x140>)
 8005e1a:	481a      	ldr	r0, [pc, #104]	; (8005e84 <pbuf_realloc+0x138>)
 8005e1c:	f00d fe24 	bl	8013a68 <iprintf>
 8005e20:	2000      	movs	r0, #0
 8005e22:	f00d ff23 	bl	8013c6c <fflush>
 8005e26:	f00d fe68 	bl	8013afa <abort>
    /* help to detect faulty overridden implementation of mem_trim */
    LWIP_ASSERT("mem_trim returned r != q", r == q);
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d00b      	beq.n	8005e4a <pbuf_realloc+0xfe>
 8005e32:	4b12      	ldr	r3, [pc, #72]	; (8005e7c <pbuf_realloc+0x130>)
 8005e34:	f240 12c1 	movw	r2, #449	; 0x1c1
 8005e38:	4915      	ldr	r1, [pc, #84]	; (8005e90 <pbuf_realloc+0x144>)
 8005e3a:	4812      	ldr	r0, [pc, #72]	; (8005e84 <pbuf_realloc+0x138>)
 8005e3c:	f00d fe14 	bl	8013a68 <iprintf>
 8005e40:	2000      	movs	r0, #0
 8005e42:	f00d ff13 	bl	8013c6c <fflush>
 8005e46:	f00d fe58 	bl	8013afa <abort>
    LWIP_UNUSED_ARG(r);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	8a7a      	ldrh	r2, [r7, #18]
 8005e4e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	895a      	ldrh	r2, [r3, #10]
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d004      	beq.n	8005e6a <pbuf_realloc+0x11e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 f8e9 	bl	800603c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	e000      	b.n	8005e74 <pbuf_realloc+0x128>
    return;
 8005e72:	bf00      	nop

}
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	08015c98 	.word	0x08015c98
 8005e80:	08015d44 	.word	0x08015d44
 8005e84:	08015cec 	.word	0x08015cec
 8005e88:	08015d5c 	.word	0x08015d5c
 8005e8c:	08015d74 	.word	0x08015d74
 8005e90:	08015d90 	.word	0x08015d90

08005e94 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10b      	bne.n	8005ec0 <pbuf_add_header_impl+0x2c>
 8005ea8:	4b2e      	ldr	r3, [pc, #184]	; (8005f64 <pbuf_add_header_impl+0xd0>)
 8005eaa:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005eae:	492e      	ldr	r1, [pc, #184]	; (8005f68 <pbuf_add_header_impl+0xd4>)
 8005eb0:	482e      	ldr	r0, [pc, #184]	; (8005f6c <pbuf_add_header_impl+0xd8>)
 8005eb2:	f00d fdd9 	bl	8013a68 <iprintf>
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	f00d fed8 	bl	8013c6c <fflush>
 8005ebc:	f00d fe1d 	bl	8013afa <abort>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <pbuf_add_header_impl+0x3a>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ecc:	d301      	bcc.n	8005ed2 <pbuf_add_header_impl+0x3e>
    return 1;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e044      	b.n	8005f5c <pbuf_add_header_impl+0xc8>
  }
  if (header_size_increment == 0) {
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <pbuf_add_header_impl+0x48>
    return 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e03f      	b.n	8005f5c <pbuf_add_header_impl+0xc8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	891a      	ldrh	r2, [r3, #8]
 8005ee4:	8a7b      	ldrh	r3, [r7, #18]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	8a7a      	ldrh	r2, [r7, #18]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d901      	bls.n	8005ef4 <pbuf_add_header_impl+0x60>
    return 1;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e033      	b.n	8005f5c <pbuf_add_header_impl+0xc8>
  }

  type_internal = p->type_internal;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	7b1b      	ldrb	r3, [r3, #12]
 8005ef8:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005efa:	8a3b      	ldrh	r3, [r7, #16]
 8005efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00d      	beq.n	8005f20 <pbuf_add_header_impl+0x8c>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	425b      	negs	r3, r3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f103 0210 	add.w	r2, r3, #16
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d90d      	bls.n	8005f38 <pbuf_add_header_impl+0xa4>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e01d      	b.n	8005f5c <pbuf_add_header_impl+0xc8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005f20:	79fb      	ldrb	r3, [r7, #7]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d006      	beq.n	8005f34 <pbuf_add_header_impl+0xa0>
      payload = (u8_t *)p->payload - header_size_increment;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	425b      	negs	r3, r3
 8005f2e:	4413      	add	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	e001      	b.n	8005f38 <pbuf_add_header_impl+0xa4>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e011      	b.n	8005f5c <pbuf_add_header_impl+0xc8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	895a      	ldrh	r2, [r3, #10]
 8005f42:	8a7b      	ldrh	r3, [r7, #18]
 8005f44:	4413      	add	r3, r2
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	891a      	ldrh	r2, [r3, #8]
 8005f50:	8a7b      	ldrh	r3, [r7, #18]
 8005f52:	4413      	add	r3, r2
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	811a      	strh	r2, [r3, #8]


  return 0;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	08015c98 	.word	0x08015c98
 8005f68:	08015dac 	.word	0x08015dac
 8005f6c:	08015cec 	.word	0x08015cec

08005f70 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	6839      	ldr	r1, [r7, #0]
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff ff88 	bl	8005e94 <pbuf_add_header_impl>
 8005f84:	4603      	mov	r3, r0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
	...

08005f90 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10b      	bne.n	8005fb8 <pbuf_remove_header+0x28>
 8005fa0:	4b22      	ldr	r3, [pc, #136]	; (800602c <pbuf_remove_header+0x9c>)
 8005fa2:	f44f 7214 	mov.w	r2, #592	; 0x250
 8005fa6:	4922      	ldr	r1, [pc, #136]	; (8006030 <pbuf_remove_header+0xa0>)
 8005fa8:	4822      	ldr	r0, [pc, #136]	; (8006034 <pbuf_remove_header+0xa4>)
 8005faa:	f00d fd5d 	bl	8013a68 <iprintf>
 8005fae:	2000      	movs	r0, #0
 8005fb0:	f00d fe5c 	bl	8013c6c <fflush>
 8005fb4:	f00d fda1 	bl	8013afa <abort>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <pbuf_remove_header+0x36>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc4:	d301      	bcc.n	8005fca <pbuf_remove_header+0x3a>
    return 1;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e02c      	b.n	8006024 <pbuf_remove_header+0x94>
  }
  if (header_size_decrement == 0) {
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <pbuf_remove_header+0x44>
    return 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	e027      	b.n	8006024 <pbuf_remove_header+0x94>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	895b      	ldrh	r3, [r3, #10]
 8005fdc:	89fa      	ldrh	r2, [r7, #14]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d908      	bls.n	8005ff4 <pbuf_remove_header+0x64>
 8005fe2:	4b12      	ldr	r3, [pc, #72]	; (800602c <pbuf_remove_header+0x9c>)
 8005fe4:	f240 225a 	movw	r2, #602	; 0x25a
 8005fe8:	4913      	ldr	r1, [pc, #76]	; (8006038 <pbuf_remove_header+0xa8>)
 8005fea:	4812      	ldr	r0, [pc, #72]	; (8006034 <pbuf_remove_header+0xa4>)
 8005fec:	f7fb ff15 	bl	8001e1a <lwip_win32_platform_diag>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e017      	b.n	8006024 <pbuf_remove_header+0x94>

  /* remember current payload pointer */
  payload = p->payload;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	441a      	add	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	895a      	ldrh	r2, [r3, #10]
 800600a:	89fb      	ldrh	r3, [r7, #14]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	b29a      	uxth	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	891a      	ldrh	r2, [r3, #8]
 8006018:	89fb      	ldrh	r3, [r7, #14]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	b29a      	uxth	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	08015c98 	.word	0x08015c98
 8006030:	08015dac 	.word	0x08015dac
 8006034:	08015cec 	.word	0x08015cec
 8006038:	08015db8 	.word	0x08015db8

0800603c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d110      	bne.n	800606c <pbuf_free+0x30>
    LWIP_ASSERT("p != NULL", p != NULL);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10b      	bne.n	8006068 <pbuf_free+0x2c>
 8006050:	4b36      	ldr	r3, [pc, #216]	; (800612c <pbuf_free+0xf0>)
 8006052:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8006056:	4936      	ldr	r1, [pc, #216]	; (8006130 <pbuf_free+0xf4>)
 8006058:	4836      	ldr	r0, [pc, #216]	; (8006134 <pbuf_free+0xf8>)
 800605a:	f00d fd05 	bl	8013a68 <iprintf>
 800605e:	2000      	movs	r0, #0
 8006060:	f00d fe04 	bl	8013c6c <fflush>
 8006064:	f00d fd49 	bl	8013afa <abort>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006068:	2300      	movs	r3, #0
 800606a:	e05b      	b.n	8006124 <pbuf_free+0xe8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800606c:	2300      	movs	r3, #0
 800606e:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006070:	e054      	b.n	800611c <pbuf_free+0xe0>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8006072:	f7fb ff0b 	bl	8001e8c <sys_arch_protect>
 8006076:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	7b9b      	ldrb	r3, [r3, #14]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10b      	bne.n	8006098 <pbuf_free+0x5c>
 8006080:	4b2a      	ldr	r3, [pc, #168]	; (800612c <pbuf_free+0xf0>)
 8006082:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006086:	492c      	ldr	r1, [pc, #176]	; (8006138 <pbuf_free+0xfc>)
 8006088:	482a      	ldr	r0, [pc, #168]	; (8006134 <pbuf_free+0xf8>)
 800608a:	f00d fced 	bl	8013a68 <iprintf>
 800608e:	2000      	movs	r0, #0
 8006090:	f00d fdec 	bl	8013c6c <fflush>
 8006094:	f00d fd31 	bl	8013afa <abort>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	7b9b      	ldrb	r3, [r3, #14]
 800609c:	3b01      	subs	r3, #1
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	739a      	strb	r2, [r3, #14]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	7b9b      	ldrb	r3, [r3, #14]
 80060a8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80060aa:	69b8      	ldr	r0, [r7, #24]
 80060ac:	f7fb fef6 	bl	8001e9c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d130      	bne.n	8006118 <pbuf_free+0xdc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	7b1b      	ldrb	r3, [r3, #12]
 80060c0:	f003 030f 	and.w	r3, r3, #15
 80060c4:	73fb      	strb	r3, [r7, #15]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d104      	bne.n	80060d6 <pbuf_free+0x9a>
          memp_free(MEMP_PBUF_POOL, p);
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	2007      	movs	r0, #7
 80060d0:	f7ff f9de 	bl	8005490 <memp_free>
 80060d4:	e01a      	b.n	800610c <pbuf_free+0xd0>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d104      	bne.n	80060e6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF, p);
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	2006      	movs	r0, #6
 80060e0:	f7ff f9d6 	bl	8005490 <memp_free>
 80060e4:	e012      	b.n	800610c <pbuf_free+0xd0>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d103      	bne.n	80060f4 <pbuf_free+0xb8>
          mem_free(p);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7fe fd89 	bl	8004c04 <mem_free>
 80060f2:	e00b      	b.n	800610c <pbuf_free+0xd0>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80060f4:	4b0d      	ldr	r3, [pc, #52]	; (800612c <pbuf_free+0xf0>)
 80060f6:	f240 3213 	movw	r2, #787	; 0x313
 80060fa:	4910      	ldr	r1, [pc, #64]	; (800613c <pbuf_free+0x100>)
 80060fc:	480d      	ldr	r0, [pc, #52]	; (8006134 <pbuf_free+0xf8>)
 80060fe:	f00d fcb3 	bl	8013a68 <iprintf>
 8006102:	2000      	movs	r0, #0
 8006104:	f00d fdb2 	bl	8013c6c <fflush>
 8006108:	f00d fcf7 	bl	8013afa <abort>
        }
      }
      count++;
 800610c:	7ffb      	ldrb	r3, [r7, #31]
 800610e:	3301      	adds	r3, #1
 8006110:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	607b      	str	r3, [r7, #4]
 8006116:	e001      	b.n	800611c <pbuf_free+0xe0>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006118:	2300      	movs	r3, #0
 800611a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1a7      	bne.n	8006072 <pbuf_free+0x36>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006122:	7ffb      	ldrb	r3, [r7, #31]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3720      	adds	r7, #32
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	08015c98 	.word	0x08015c98
 8006130:	08015dac 	.word	0x08015dac
 8006134:	08015cec 	.word	0x08015cec
 8006138:	08015dd8 	.word	0x08015dd8
 800613c:	08015df0 	.word	0x08015df0

08006140 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800614c:	e005      	b.n	800615a <pbuf_clen+0x1a>
    ++len;
 800614e:	89fb      	ldrh	r3, [r7, #14]
 8006150:	3301      	adds	r3, #1
 8006152:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1f6      	bne.n	800614e <pbuf_clen+0xe>
  }
  return len;
 8006160:	89fb      	ldrh	r3, [r7, #14]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01b      	beq.n	80061b6 <pbuf_ref+0x46>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800617e:	f7fb fe85 	bl	8001e8c <sys_arch_protect>
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	7b9b      	ldrb	r3, [r3, #14]
 8006188:	3301      	adds	r3, #1
 800618a:	b2da      	uxtb	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	739a      	strb	r2, [r3, #14]
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f7fb fe83 	bl	8001e9c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	7b9b      	ldrb	r3, [r3, #14]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10b      	bne.n	80061b6 <pbuf_ref+0x46>
 800619e:	4b08      	ldr	r3, [pc, #32]	; (80061c0 <pbuf_ref+0x50>)
 80061a0:	f240 3246 	movw	r2, #838	; 0x346
 80061a4:	4907      	ldr	r1, [pc, #28]	; (80061c4 <pbuf_ref+0x54>)
 80061a6:	4808      	ldr	r0, [pc, #32]	; (80061c8 <pbuf_ref+0x58>)
 80061a8:	f00d fc5e 	bl	8013a68 <iprintf>
 80061ac:	2000      	movs	r0, #0
 80061ae:	f00d fd5d 	bl	8013c6c <fflush>
 80061b2:	f00d fca2 	bl	8013afa <abort>
  }
}
 80061b6:	bf00      	nop
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	08015c98 	.word	0x08015c98
 80061c4:	08015e04 	.word	0x08015e04
 80061c8:	08015cec 	.word	0x08015cec

080061cc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <pbuf_cat+0x16>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d107      	bne.n	80061f2 <pbuf_cat+0x26>
 80061e2:	4b2d      	ldr	r3, [pc, #180]	; (8006298 <pbuf_cat+0xcc>)
 80061e4:	f240 325e 	movw	r2, #862	; 0x35e
 80061e8:	492c      	ldr	r1, [pc, #176]	; (800629c <pbuf_cat+0xd0>)
 80061ea:	482d      	ldr	r0, [pc, #180]	; (80062a0 <pbuf_cat+0xd4>)
 80061ec:	f7fb fe15 	bl	8001e1a <lwip_win32_platform_diag>
 80061f0:	e04e      	b.n	8006290 <pbuf_cat+0xc4>
             ((h != NULL) && (t != NULL)), return;);
  LWIP_ASSERT("Creating an infinite loop", h != t);
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d10b      	bne.n	8006212 <pbuf_cat+0x46>
 80061fa:	4b27      	ldr	r3, [pc, #156]	; (8006298 <pbuf_cat+0xcc>)
 80061fc:	f240 325f 	movw	r2, #863	; 0x35f
 8006200:	4928      	ldr	r1, [pc, #160]	; (80062a4 <pbuf_cat+0xd8>)
 8006202:	4827      	ldr	r0, [pc, #156]	; (80062a0 <pbuf_cat+0xd4>)
 8006204:	f00d fc30 	bl	8013a68 <iprintf>
 8006208:	2000      	movs	r0, #0
 800620a:	f00d fd2f 	bl	8013c6c <fflush>
 800620e:	f00d fc74 	bl	8013afa <abort>

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	e00a      	b.n	800622e <pbuf_cat+0x62>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	891a      	ldrh	r2, [r3, #8]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	891b      	ldrh	r3, [r3, #8]
 8006220:	4413      	add	r3, r2
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1f0      	bne.n	8006218 <pbuf_cat+0x4c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	891a      	ldrh	r2, [r3, #8]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	895b      	ldrh	r3, [r3, #10]
 800623e:	429a      	cmp	r2, r3
 8006240:	d00b      	beq.n	800625a <pbuf_cat+0x8e>
 8006242:	4b15      	ldr	r3, [pc, #84]	; (8006298 <pbuf_cat+0xcc>)
 8006244:	f240 3267 	movw	r2, #871	; 0x367
 8006248:	4917      	ldr	r1, [pc, #92]	; (80062a8 <pbuf_cat+0xdc>)
 800624a:	4815      	ldr	r0, [pc, #84]	; (80062a0 <pbuf_cat+0xd4>)
 800624c:	f00d fc0c 	bl	8013a68 <iprintf>
 8006250:	2000      	movs	r0, #0
 8006252:	f00d fd0b 	bl	8013c6c <fflush>
 8006256:	f00d fc50 	bl	8013afa <abort>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00b      	beq.n	800627a <pbuf_cat+0xae>
 8006262:	4b0d      	ldr	r3, [pc, #52]	; (8006298 <pbuf_cat+0xcc>)
 8006264:	f44f 725a 	mov.w	r2, #872	; 0x368
 8006268:	4910      	ldr	r1, [pc, #64]	; (80062ac <pbuf_cat+0xe0>)
 800626a:	480d      	ldr	r0, [pc, #52]	; (80062a0 <pbuf_cat+0xd4>)
 800626c:	f00d fbfc 	bl	8013a68 <iprintf>
 8006270:	2000      	movs	r0, #0
 8006272:	f00d fcfb 	bl	8013c6c <fflush>
 8006276:	f00d fc40 	bl	8013afa <abort>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	891a      	ldrh	r2, [r3, #8]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	891b      	ldrh	r3, [r3, #8]
 8006282:	4413      	add	r3, r2
 8006284:	b29a      	uxth	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	08015c98 	.word	0x08015c98
 800629c:	08015e18 	.word	0x08015e18
 80062a0:	08015cec 	.word	0x08015cec
 80062a4:	08015e50 	.word	0x08015e50
 80062a8:	08015e6c 	.word	0x08015e6c
 80062ac:	08015e9c 	.word	0x08015e9c

080062b0 <pbuf_copy>:
 *                 enough to hold p_from
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d109      	bne.n	80062d4 <pbuf_copy+0x24>
 80062c0:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <pbuf_copy+0x3c>)
 80062c2:	f240 32c7 	movw	r2, #967	; 0x3c7
 80062c6:	490a      	ldr	r1, [pc, #40]	; (80062f0 <pbuf_copy+0x40>)
 80062c8:	480a      	ldr	r0, [pc, #40]	; (80062f4 <pbuf_copy+0x44>)
 80062ca:	f7fb fda6 	bl	8001e1a <lwip_win32_platform_diag>
 80062ce:	f06f 030f 	mvn.w	r3, #15
 80062d2:	e007      	b.n	80062e4 <pbuf_copy+0x34>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	891a      	ldrh	r2, [r3, #8]
 80062d8:	2300      	movs	r3, #0
 80062da:	6839      	ldr	r1, [r7, #0]
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f80b 	bl	80062f8 <pbuf_copy_partial_pbuf>
 80062e2:	4603      	mov	r3, r0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	08015c98 	.word	0x08015c98
 80062f0:	08015ee8 	.word	0x08015ee8
 80062f4:	08015cec 	.word	0x08015cec

080062f8 <pbuf_copy_partial_pbuf>:
 *                 or p_to is not big enough to hold copy_len at offset
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy_partial_pbuf(struct pbuf *p_to, const struct pbuf *p_from, u16_t copy_len, u16_t offset)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b088      	sub	sp, #32
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	4611      	mov	r1, r2
 8006304:	461a      	mov	r2, r3
 8006306:	460b      	mov	r3, r1
 8006308:	80fb      	strh	r3, [r7, #6]
 800630a:	4613      	mov	r3, r2
 800630c:	80bb      	strh	r3, [r7, #4]
  size_t offset_to = offset, offset_from = 0, len;
 800630e:	88bb      	ldrh	r3, [r7, #4]
 8006310:	61fb      	str	r3, [r7, #28]
 8006312:	2300      	movs	r3, #0
 8006314:	61bb      	str	r3, [r7, #24]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf(%p, %p, %"U16_F", %"U16_F")\n",
              (const void *)p_to, (const void *)p_from, copy_len, offset));

  /* is the copy_len in range? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d004      	beq.n	8006326 <pbuf_copy_partial_pbuf+0x2e>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	891b      	ldrh	r3, [r3, #8]
 8006320:	88fa      	ldrh	r2, [r7, #6]
 8006322:	429a      	cmp	r2, r3
 8006324:	d909      	bls.n	800633a <pbuf_copy_partial_pbuf+0x42>
 8006326:	4b74      	ldr	r3, [pc, #464]	; (80064f8 <pbuf_copy_partial_pbuf+0x200>)
 8006328:	f240 32e6 	movw	r2, #998	; 0x3e6
 800632c:	4973      	ldr	r1, [pc, #460]	; (80064fc <pbuf_copy_partial_pbuf+0x204>)
 800632e:	4874      	ldr	r0, [pc, #464]	; (8006500 <pbuf_copy_partial_pbuf+0x208>)
 8006330:	f7fb fd73 	bl	8001e1a <lwip_win32_platform_diag>
 8006334:	f06f 030f 	mvn.w	r3, #15
 8006338:	e0d9      	b.n	80064ee <pbuf_copy_partial_pbuf+0x1f6>
             (p_from->tot_len >= copy_len)), return ERR_ARG;);
  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <pbuf_copy_partial_pbuf+0x58>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	891b      	ldrh	r3, [r3, #8]
 8006344:	4619      	mov	r1, r3
 8006346:	88ba      	ldrh	r2, [r7, #4]
 8006348:	88fb      	ldrh	r3, [r7, #6]
 800634a:	4413      	add	r3, r2
 800634c:	4299      	cmp	r1, r3
 800634e:	da09      	bge.n	8006364 <pbuf_copy_partial_pbuf+0x6c>
 8006350:	4b69      	ldr	r3, [pc, #420]	; (80064f8 <pbuf_copy_partial_pbuf+0x200>)
 8006352:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006356:	496b      	ldr	r1, [pc, #428]	; (8006504 <pbuf_copy_partial_pbuf+0x20c>)
 8006358:	4869      	ldr	r0, [pc, #420]	; (8006500 <pbuf_copy_partial_pbuf+0x208>)
 800635a:	f7fb fd5e 	bl	8001e1a <lwip_win32_platform_diag>
 800635e:	f06f 030f 	mvn.w	r3, #15
 8006362:	e0c4      	b.n	80064ee <pbuf_copy_partial_pbuf+0x1f6>
             (p_to->tot_len >= (offset + copy_len))), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	895b      	ldrh	r3, [r3, #10]
 8006368:	461a      	mov	r2, r3
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	1ad2      	subs	r2, r2, r3
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	895b      	ldrh	r3, [r3, #10]
 8006372:	4619      	mov	r1, r3
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	1acb      	subs	r3, r1, r3
 8006378:	429a      	cmp	r2, r3
 800637a:	d306      	bcc.n	800638a <pbuf_copy_partial_pbuf+0x92>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	895b      	ldrh	r3, [r3, #10]
 8006380:	461a      	mov	r2, r3
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	e005      	b.n	8006396 <pbuf_copy_partial_pbuf+0x9e>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	895b      	ldrh	r3, [r3, #10]
 800638e:	461a      	mov	r2, r3
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	617b      	str	r3, [r7, #20]
    }
    len = LWIP_MIN(copy_len, len);
 8006396:	88fb      	ldrh	r3, [r7, #6]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	4293      	cmp	r3, r2
 800639c:	bf28      	it	cs
 800639e:	4613      	movcs	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	18d0      	adds	r0, r2, r3
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	4413      	add	r3, r2
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4619      	mov	r1, r3
 80063b6:	f00d fd59 	bl	8013e6c <memcpy>
    offset_to += len;
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	4413      	add	r3, r2
 80063c0:	61fb      	str	r3, [r7, #28]
    offset_from += len;
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	4413      	add	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
    copy_len = (u16_t)(copy_len - len);
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	88fa      	ldrh	r2, [r7, #6]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	80fb      	strh	r3, [r7, #6]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	895b      	ldrh	r3, [r3, #10]
 80063d8:	461a      	mov	r2, r3
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d20b      	bcs.n	80063f8 <pbuf_copy_partial_pbuf+0x100>
 80063e0:	4b45      	ldr	r3, [pc, #276]	; (80064f8 <pbuf_copy_partial_pbuf+0x200>)
 80063e2:	f240 32fa 	movw	r2, #1018	; 0x3fa
 80063e6:	4948      	ldr	r1, [pc, #288]	; (8006508 <pbuf_copy_partial_pbuf+0x210>)
 80063e8:	4845      	ldr	r0, [pc, #276]	; (8006500 <pbuf_copy_partial_pbuf+0x208>)
 80063ea:	f00d fb3d 	bl	8013a68 <iprintf>
 80063ee:	2000      	movs	r0, #0
 80063f0:	f00d fc3c 	bl	8013c6c <fflush>
 80063f4:	f00d fb81 	bl	8013afa <abort>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	895b      	ldrh	r3, [r3, #10]
 80063fc:	461a      	mov	r2, r3
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	429a      	cmp	r2, r3
 8006402:	d20b      	bcs.n	800641c <pbuf_copy_partial_pbuf+0x124>
 8006404:	4b3c      	ldr	r3, [pc, #240]	; (80064f8 <pbuf_copy_partial_pbuf+0x200>)
 8006406:	f240 32fb 	movw	r2, #1019	; 0x3fb
 800640a:	4940      	ldr	r1, [pc, #256]	; (800650c <pbuf_copy_partial_pbuf+0x214>)
 800640c:	483c      	ldr	r0, [pc, #240]	; (8006500 <pbuf_copy_partial_pbuf+0x208>)
 800640e:	f00d fb2b 	bl	8013a68 <iprintf>
 8006412:	2000      	movs	r0, #0
 8006414:	f00d fc2a 	bl	8013c6c <fflush>
 8006418:	f00d fb6f 	bl	8013afa <abort>
    if (offset_from >= p_from->len) {
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	895b      	ldrh	r3, [r3, #10]
 8006420:	461a      	mov	r2, r3
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	429a      	cmp	r2, r3
 8006426:	d814      	bhi.n	8006452 <pbuf_copy_partial_pbuf+0x15a>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006428:	2300      	movs	r3, #0
 800642a:	61bb      	str	r3, [r7, #24]
      p_from = p_from->next;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60bb      	str	r3, [r7, #8]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10c      	bne.n	8006452 <pbuf_copy_partial_pbuf+0x15a>
 8006438:	88fb      	ldrh	r3, [r7, #6]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d009      	beq.n	8006452 <pbuf_copy_partial_pbuf+0x15a>
 800643e:	4b2e      	ldr	r3, [pc, #184]	; (80064f8 <pbuf_copy_partial_pbuf+0x200>)
 8006440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006444:	4932      	ldr	r1, [pc, #200]	; (8006510 <pbuf_copy_partial_pbuf+0x218>)
 8006446:	482e      	ldr	r0, [pc, #184]	; (8006500 <pbuf_copy_partial_pbuf+0x208>)
 8006448:	f7fb fce7 	bl	8001e1a <lwip_win32_platform_diag>
 800644c:	f06f 030f 	mvn.w	r3, #15
 8006450:	e04d      	b.n	80064ee <pbuf_copy_partial_pbuf+0x1f6>
    }
    if (offset_to == p_to->len) {
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	895b      	ldrh	r3, [r3, #10]
 8006456:	461a      	mov	r2, r3
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	429a      	cmp	r2, r3
 800645c:	d114      	bne.n	8006488 <pbuf_copy_partial_pbuf+0x190>
      /* on to next p_to (if any) */
      offset_to = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	61fb      	str	r3, [r7, #28]
      p_to = p_to->next;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	60fb      	str	r3, [r7, #12]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10c      	bne.n	8006488 <pbuf_copy_partial_pbuf+0x190>
 800646e:	88fb      	ldrh	r3, [r7, #6]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d009      	beq.n	8006488 <pbuf_copy_partial_pbuf+0x190>
 8006474:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <pbuf_copy_partial_pbuf+0x200>)
 8006476:	f240 4206 	movw	r2, #1030	; 0x406
 800647a:	4926      	ldr	r1, [pc, #152]	; (8006514 <pbuf_copy_partial_pbuf+0x21c>)
 800647c:	4820      	ldr	r0, [pc, #128]	; (8006500 <pbuf_copy_partial_pbuf+0x208>)
 800647e:	f7fb fccc 	bl	8001e1a <lwip_win32_platform_diag>
 8006482:	f06f 030f 	mvn.w	r3, #15
 8006486:	e032      	b.n	80064ee <pbuf_copy_partial_pbuf+0x1f6>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d013      	beq.n	80064b6 <pbuf_copy_partial_pbuf+0x1be>
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	895a      	ldrh	r2, [r3, #10]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	891b      	ldrh	r3, [r3, #8]
 8006496:	429a      	cmp	r2, r3
 8006498:	d10d      	bne.n	80064b6 <pbuf_copy_partial_pbuf+0x1be>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d009      	beq.n	80064b6 <pbuf_copy_partial_pbuf+0x1be>
 80064a2:	4b15      	ldr	r3, [pc, #84]	; (80064f8 <pbuf_copy_partial_pbuf+0x200>)
 80064a4:	f240 420c 	movw	r2, #1036	; 0x40c
 80064a8:	491b      	ldr	r1, [pc, #108]	; (8006518 <pbuf_copy_partial_pbuf+0x220>)
 80064aa:	4815      	ldr	r0, [pc, #84]	; (8006500 <pbuf_copy_partial_pbuf+0x208>)
 80064ac:	f7fb fcb5 	bl	8001e1a <lwip_win32_platform_diag>
 80064b0:	f06f 0305 	mvn.w	r3, #5
 80064b4:	e01b      	b.n	80064ee <pbuf_copy_partial_pbuf+0x1f6>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d013      	beq.n	80064e4 <pbuf_copy_partial_pbuf+0x1ec>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	895a      	ldrh	r2, [r3, #10]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	891b      	ldrh	r3, [r3, #8]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d10d      	bne.n	80064e4 <pbuf_copy_partial_pbuf+0x1ec>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d009      	beq.n	80064e4 <pbuf_copy_partial_pbuf+0x1ec>
 80064d0:	4b09      	ldr	r3, [pc, #36]	; (80064f8 <pbuf_copy_partial_pbuf+0x200>)
 80064d2:	f240 4211 	movw	r2, #1041	; 0x411
 80064d6:	4910      	ldr	r1, [pc, #64]	; (8006518 <pbuf_copy_partial_pbuf+0x220>)
 80064d8:	4809      	ldr	r0, [pc, #36]	; (8006500 <pbuf_copy_partial_pbuf+0x208>)
 80064da:	f7fb fc9e 	bl	8001e1a <lwip_win32_platform_diag>
 80064de:	f06f 0305 	mvn.w	r3, #5
 80064e2:	e004      	b.n	80064ee <pbuf_copy_partial_pbuf+0x1f6>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (copy_len);
 80064e4:	88fb      	ldrh	r3, [r7, #6]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f47f af3c 	bne.w	8006364 <pbuf_copy_partial_pbuf+0x6c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf: copy complete.\n"));
  return ERR_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	08015c98 	.word	0x08015c98
 80064fc:	08015f04 	.word	0x08015f04
 8006500:	08015cec 	.word	0x08015cec
 8006504:	08015f38 	.word	0x08015f38
 8006508:	08015f68 	.word	0x08015f68
 800650c:	08015f80 	.word	0x08015f80
 8006510:	08015f9c 	.word	0x08015f9c
 8006514:	08015fac 	.word	0x08015fac
 8006518:	08015fbc 	.word	0x08015fbc

0800651c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b088      	sub	sp, #32
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	4611      	mov	r1, r2
 8006528:	461a      	mov	r2, r3
 800652a:	460b      	mov	r3, r1
 800652c:	80fb      	strh	r3, [r7, #6]
 800652e:	4613      	mov	r3, r2
 8006530:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d108      	bne.n	8006552 <pbuf_copy_partial+0x36>
 8006540:	4b2b      	ldr	r3, [pc, #172]	; (80065f0 <pbuf_copy_partial+0xd4>)
 8006542:	f240 422c 	movw	r2, #1068	; 0x42c
 8006546:	492b      	ldr	r1, [pc, #172]	; (80065f4 <pbuf_copy_partial+0xd8>)
 8006548:	482b      	ldr	r0, [pc, #172]	; (80065f8 <pbuf_copy_partial+0xdc>)
 800654a:	f7fb fc66 	bl	8001e1a <lwip_win32_platform_diag>
 800654e:	2300      	movs	r3, #0
 8006550:	e04a      	b.n	80065e8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d108      	bne.n	800656a <pbuf_copy_partial+0x4e>
 8006558:	4b25      	ldr	r3, [pc, #148]	; (80065f0 <pbuf_copy_partial+0xd4>)
 800655a:	f240 422d 	movw	r2, #1069	; 0x42d
 800655e:	4927      	ldr	r1, [pc, #156]	; (80065fc <pbuf_copy_partial+0xe0>)
 8006560:	4825      	ldr	r0, [pc, #148]	; (80065f8 <pbuf_copy_partial+0xdc>)
 8006562:	f7fb fc5a 	bl	8001e1a <lwip_win32_platform_diag>
 8006566:	2300      	movs	r3, #0
 8006568:	e03e      	b.n	80065e8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	61fb      	str	r3, [r7, #28]
 800656e:	e034      	b.n	80065da <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006570:	88bb      	ldrh	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <pbuf_copy_partial+0x70>
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	895b      	ldrh	r3, [r3, #10]
 800657a:	88ba      	ldrh	r2, [r7, #4]
 800657c:	429a      	cmp	r2, r3
 800657e:	d305      	bcc.n	800658c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	895b      	ldrh	r3, [r3, #10]
 8006584:	88ba      	ldrh	r2, [r7, #4]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	80bb      	strh	r3, [r7, #4]
 800658a:	e023      	b.n	80065d4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	895a      	ldrh	r2, [r3, #10]
 8006590:	88bb      	ldrh	r3, [r7, #4]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006596:	8b3a      	ldrh	r2, [r7, #24]
 8006598:	88fb      	ldrh	r3, [r7, #6]
 800659a:	429a      	cmp	r2, r3
 800659c:	d901      	bls.n	80065a2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800659e:	88fb      	ldrh	r3, [r7, #6]
 80065a0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80065a2:	8b7b      	ldrh	r3, [r7, #26]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	18d0      	adds	r0, r2, r3
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	88bb      	ldrh	r3, [r7, #4]
 80065ae:	4413      	add	r3, r2
 80065b0:	8b3a      	ldrh	r2, [r7, #24]
 80065b2:	4619      	mov	r1, r3
 80065b4:	f00d fc5a 	bl	8013e6c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80065b8:	8afa      	ldrh	r2, [r7, #22]
 80065ba:	8b3b      	ldrh	r3, [r7, #24]
 80065bc:	4413      	add	r3, r2
 80065be:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80065c0:	8b7a      	ldrh	r2, [r7, #26]
 80065c2:	8b3b      	ldrh	r3, [r7, #24]
 80065c4:	4413      	add	r3, r2
 80065c6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80065c8:	88fa      	ldrh	r2, [r7, #6]
 80065ca:	8b3b      	ldrh	r3, [r7, #24]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80065d0:	2300      	movs	r3, #0
 80065d2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	61fb      	str	r3, [r7, #28]
 80065da:	88fb      	ldrh	r3, [r7, #6]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <pbuf_copy_partial+0xca>
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1c4      	bne.n	8006570 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80065e6:	8afb      	ldrh	r3, [r7, #22]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3720      	adds	r7, #32
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	08015c98 	.word	0x08015c98
 80065f4:	08015ff4 	.word	0x08015ff4
 80065f8:	08015cec 	.word	0x08015cec
 80065fc:	08016014 	.word	0x08016014

08006600 <pbuf_get_contiguous>:
 *         - pointer to 'buffer' if data was not contiguous and had to be copied
 *         - NULL on error
 */
void *
pbuf_get_contiguous(const struct pbuf *p, void *buffer, size_t bufsize, u16_t len, u16_t offset)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	807b      	strh	r3, [r7, #2]
  const struct pbuf *q;
  u16_t out_offset;

  LWIP_ERROR("pbuf_get_contiguous: invalid buf", (p != NULL), return NULL;);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d108      	bne.n	8006626 <pbuf_get_contiguous+0x26>
 8006614:	4b25      	ldr	r3, [pc, #148]	; (80066ac <pbuf_get_contiguous+0xac>)
 8006616:	f240 425c 	movw	r2, #1116	; 0x45c
 800661a:	4925      	ldr	r1, [pc, #148]	; (80066b0 <pbuf_get_contiguous+0xb0>)
 800661c:	4825      	ldr	r0, [pc, #148]	; (80066b4 <pbuf_get_contiguous+0xb4>)
 800661e:	f7fb fbfc 	bl	8001e1a <lwip_win32_platform_diag>
 8006622:	2300      	movs	r3, #0
 8006624:	e03d      	b.n	80066a2 <pbuf_get_contiguous+0xa2>
  LWIP_ERROR("pbuf_get_contiguous: invalid bufsize", (buffer == NULL) || (bufsize >= len), return NULL;);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00c      	beq.n	8006646 <pbuf_get_contiguous+0x46>
 800662c:	887a      	ldrh	r2, [r7, #2]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	429a      	cmp	r2, r3
 8006632:	d908      	bls.n	8006646 <pbuf_get_contiguous+0x46>
 8006634:	4b1d      	ldr	r3, [pc, #116]	; (80066ac <pbuf_get_contiguous+0xac>)
 8006636:	f240 425d 	movw	r2, #1117	; 0x45d
 800663a:	491f      	ldr	r1, [pc, #124]	; (80066b8 <pbuf_get_contiguous+0xb8>)
 800663c:	481d      	ldr	r0, [pc, #116]	; (80066b4 <pbuf_get_contiguous+0xb4>)
 800663e:	f7fb fbec 	bl	8001e1a <lwip_win32_platform_diag>
 8006642:	2300      	movs	r3, #0
 8006644:	e02d      	b.n	80066a2 <pbuf_get_contiguous+0xa2>

  q = pbuf_skip_const(p, offset, &out_offset);
 8006646:	f107 0212 	add.w	r2, r7, #18
 800664a:	8c3b      	ldrh	r3, [r7, #32]
 800664c:	4619      	mov	r1, r3
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 f834 	bl	80066bc <pbuf_skip_const>
 8006654:	6178      	str	r0, [r7, #20]
  if (q != NULL) {
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d021      	beq.n	80066a0 <pbuf_get_contiguous+0xa0>
    if (q->len >= (out_offset + len)) {
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	895b      	ldrh	r3, [r3, #10]
 8006660:	461a      	mov	r2, r3
 8006662:	8a7b      	ldrh	r3, [r7, #18]
 8006664:	4619      	mov	r1, r3
 8006666:	887b      	ldrh	r3, [r7, #2]
 8006668:	440b      	add	r3, r1
 800666a:	429a      	cmp	r2, r3
 800666c:	db04      	blt.n	8006678 <pbuf_get_contiguous+0x78>
      /* all data in this pbuf, return zero-copy */
      return (u8_t *)q->payload + out_offset;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	8a7a      	ldrh	r2, [r7, #18]
 8006674:	4413      	add	r3, r2
 8006676:	e014      	b.n	80066a2 <pbuf_get_contiguous+0xa2>
    }
    if (buffer == NULL) {
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <pbuf_get_contiguous+0x82>
      /* the caller does not want to copy */
      return NULL;
 800667e:	2300      	movs	r3, #0
 8006680:	e00f      	b.n	80066a2 <pbuf_get_contiguous+0xa2>
    }
    /* need to copy */
    if (pbuf_copy_partial(q, buffer, len, out_offset) != len) {
 8006682:	8a7b      	ldrh	r3, [r7, #18]
 8006684:	887a      	ldrh	r2, [r7, #2]
 8006686:	68b9      	ldr	r1, [r7, #8]
 8006688:	6978      	ldr	r0, [r7, #20]
 800668a:	f7ff ff47 	bl	800651c <pbuf_copy_partial>
 800668e:	4603      	mov	r3, r0
 8006690:	461a      	mov	r2, r3
 8006692:	887b      	ldrh	r3, [r7, #2]
 8006694:	4293      	cmp	r3, r2
 8006696:	d001      	beq.n	800669c <pbuf_get_contiguous+0x9c>
      /* copying failed: pbuf is too short */
      return NULL;
 8006698:	2300      	movs	r3, #0
 800669a:	e002      	b.n	80066a2 <pbuf_get_contiguous+0xa2>
    }
    return buffer;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	e000      	b.n	80066a2 <pbuf_get_contiguous+0xa2>
  }
  /* pbuf is too short (offset does not fit in) */
  return NULL;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	08015c98 	.word	0x08015c98
 80066b0:	08016038 	.word	0x08016038
 80066b4:	08015cec 	.word	0x08015cec
 80066b8:	0801605c 	.word	0x0801605c

080066bc <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	460b      	mov	r3, r1
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80066ca:	897b      	ldrh	r3, [r7, #10]
 80066cc:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80066d2:	e007      	b.n	80066e4 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	895b      	ldrh	r3, [r3, #10]
 80066d8:	8afa      	ldrh	r2, [r7, #22]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d004      	beq.n	80066f4 <pbuf_skip_const+0x38>
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	895b      	ldrh	r3, [r3, #10]
 80066ee:	8afa      	ldrh	r2, [r7, #22]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d2ef      	bcs.n	80066d4 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	8afa      	ldrh	r2, [r7, #22]
 80066fe:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8006700:	693b      	ldr	r3, [r7, #16]
}
 8006702:	4618      	mov	r0, r3
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf *
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	460b      	mov	r3, r1
 8006718:	70fb      	strb	r3, [r7, #3]
  struct pbuf *q;
  if (p->next == NULL) {
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <pbuf_coalesce+0x18>
    return p;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	e010      	b.n	8006748 <pbuf_coalesce+0x3a>
  }
  q = pbuf_clone(layer, PBUF_RAM, p);
 8006726:	78fb      	ldrb	r3, [r7, #3]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800672e:	4618      	mov	r0, r3
 8006730:	f000 f80e 	bl	8006750 <pbuf_clone>
 8006734:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <pbuf_coalesce+0x32>
    /* @todo: what do we do now? */
    return p;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	e003      	b.n	8006748 <pbuf_coalesce+0x3a>
  }
  pbuf_free(p);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7ff fc7b 	bl	800603c <pbuf_free>
  return q;
 8006746:	68fb      	ldr	r3, [r7, #12]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	4603      	mov	r3, r0
 8006758:	603a      	str	r2, [r7, #0]
 800675a:	71fb      	strb	r3, [r7, #7]
 800675c:	460b      	mov	r3, r1
 800675e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	8919      	ldrh	r1, [r3, #8]
 8006764:	88ba      	ldrh	r2, [r7, #4]
 8006766:	79fb      	ldrb	r3, [r7, #7]
 8006768:	4618      	mov	r0, r3
 800676a:	f7ff f9fd 	bl	8005b68 <pbuf_alloc>
 800676e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <pbuf_clone+0x2a>
    return NULL;
 8006776:	2300      	movs	r3, #0
 8006778:	e016      	b.n	80067a8 <pbuf_clone+0x58>
  }
  err = pbuf_copy(q, p);
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f7ff fd97 	bl	80062b0 <pbuf_copy>
 8006782:	4603      	mov	r3, r0
 8006784:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006786:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00b      	beq.n	80067a6 <pbuf_clone+0x56>
 800678e:	4b08      	ldr	r3, [pc, #32]	; (80067b0 <pbuf_clone+0x60>)
 8006790:	f240 524c 	movw	r2, #1356	; 0x54c
 8006794:	4907      	ldr	r1, [pc, #28]	; (80067b4 <pbuf_clone+0x64>)
 8006796:	4808      	ldr	r0, [pc, #32]	; (80067b8 <pbuf_clone+0x68>)
 8006798:	f00d f966 	bl	8013a68 <iprintf>
 800679c:	2000      	movs	r0, #0
 800679e:	f00d fa65 	bl	8013c6c <fflush>
 80067a2:	f00d f9aa 	bl	8013afa <abort>
  return q;
 80067a6:	68fb      	ldr	r3, [r7, #12]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	08015c98 	.word	0x08015c98
 80067b4:	08016120 	.word	0x08016120
 80067b8:	08015cec 	.word	0x08015cec

080067bc <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	460b      	mov	r3, r1
 80067c6:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 80067c8:	887b      	ldrh	r3, [r7, #2]
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f80c 	bl	80067ea <pbuf_try_get_at>
 80067d2:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	db02      	blt.n	80067e0 <pbuf_get_at+0x24>
    return (u8_t)ret;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	e000      	b.n	80067e2 <pbuf_get_at+0x26>
  }
  return 0;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b084      	sub	sp, #16
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	460b      	mov	r3, r1
 80067f4:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 80067f6:	f107 020a 	add.w	r2, r7, #10
 80067fa:	887b      	ldrh	r3, [r7, #2]
 80067fc:	4619      	mov	r1, r3
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7ff ff5c 	bl	80066bc <pbuf_skip_const>
 8006804:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00a      	beq.n	8006822 <pbuf_try_get_at+0x38>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	895a      	ldrh	r2, [r3, #10]
 8006810:	897b      	ldrh	r3, [r7, #10]
 8006812:	429a      	cmp	r2, r3
 8006814:	d905      	bls.n	8006822 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	897a      	ldrh	r2, [r7, #10]
 800681c:	4413      	add	r3, r2
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	e001      	b.n	8006826 <pbuf_try_get_at+0x3c>
  }
  return -1;
 8006822:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
 8006834:	4b03      	ldr	r3, [pc, #12]	; (8006844 <stats_init+0x14>)
 8006836:	4a04      	ldr	r2, [pc, #16]	; (8006848 <stats_init+0x18>)
 8006838:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 800683a:	bf00      	nop
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	20002218 	.word	0x20002218
 8006848:	08016134 	.word	0x08016134

0800684c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006850:	f7fb fb04 	bl	8001e5c <lwip_port_rand>
 8006854:	4603      	mov	r3, r0
 8006856:	b29b      	uxth	r3, r3
 8006858:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800685c:	b29b      	uxth	r3, r3
 800685e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006862:	b29a      	uxth	r2, r3
 8006864:	4b01      	ldr	r3, [pc, #4]	; (800686c <tcp_init+0x20>)
 8006866:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006868:	bf00      	nop
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20000008 	.word	0x20000008

08006870 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	7d1b      	ldrb	r3, [r3, #20]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d10a      	bne.n	8006896 <tcp_free+0x26>
 8006880:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <tcp_free+0x38>)
 8006882:	22d4      	movs	r2, #212	; 0xd4
 8006884:	4909      	ldr	r1, [pc, #36]	; (80068ac <tcp_free+0x3c>)
 8006886:	480a      	ldr	r0, [pc, #40]	; (80068b0 <tcp_free+0x40>)
 8006888:	f00d f8ee 	bl	8013a68 <iprintf>
 800688c:	2000      	movs	r0, #0
 800688e:	f00d f9ed 	bl	8013c6c <fflush>
 8006892:	f00d f932 	bl	8013afa <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	2000      	movs	r0, #0
 800689a:	f7fe fdf9 	bl	8005490 <memp_free>
}
 800689e:	bf00      	nop
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	080161b0 	.word	0x080161b0
 80068ac:	080161d0 	.word	0x080161d0
 80068b0:	080161e4 	.word	0x080161e4

080068b4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	7d1b      	ldrb	r3, [r3, #20]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d10a      	bne.n	80068da <tcp_free_listen+0x26>
 80068c4:	4b09      	ldr	r3, [pc, #36]	; (80068ec <tcp_free_listen+0x38>)
 80068c6:	22df      	movs	r2, #223	; 0xdf
 80068c8:	4909      	ldr	r1, [pc, #36]	; (80068f0 <tcp_free_listen+0x3c>)
 80068ca:	480a      	ldr	r0, [pc, #40]	; (80068f4 <tcp_free_listen+0x40>)
 80068cc:	f00d f8cc 	bl	8013a68 <iprintf>
 80068d0:	2000      	movs	r0, #0
 80068d2:	f00d f9cb 	bl	8013c6c <fflush>
 80068d6:	f00d f910 	bl	8013afa <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	2001      	movs	r0, #1
 80068de:	f7fe fdd7 	bl	8005490 <memp_free>
}
 80068e2:	bf00      	nop
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	080161b0 	.word	0x080161b0
 80068f0:	0801620c 	.word	0x0801620c
 80068f4:	080161e4 	.word	0x080161e4

080068f8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80068fc:	f001 f8f8 	bl	8007af0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006900:	4b07      	ldr	r3, [pc, #28]	; (8006920 <tcp_tmr+0x28>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	3301      	adds	r3, #1
 8006906:	b2da      	uxtb	r2, r3
 8006908:	4b05      	ldr	r3, [pc, #20]	; (8006920 <tcp_tmr+0x28>)
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	4b04      	ldr	r3, [pc, #16]	; (8006920 <tcp_tmr+0x28>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006918:	f000 fd78 	bl	800740c <tcp_slowtmr>
  }
}
 800691c:	bf00      	nop
 800691e:	bd80      	pop	{r7, pc}
 8006920:	200006f9 	.word	0x200006f9

08006924 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <tcp_remove_listener+0x26>
 8006934:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <tcp_remove_listener+0x50>)
 8006936:	22ff      	movs	r2, #255	; 0xff
 8006938:	490f      	ldr	r1, [pc, #60]	; (8006978 <tcp_remove_listener+0x54>)
 800693a:	4810      	ldr	r0, [pc, #64]	; (800697c <tcp_remove_listener+0x58>)
 800693c:	f00d f894 	bl	8013a68 <iprintf>
 8006940:	2000      	movs	r0, #0
 8006942:	f00d f993 	bl	8013c6c <fflush>
 8006946:	f00d f8d8 	bl	8013afa <abort>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	e00a      	b.n	8006966 <tcp_remove_listener+0x42>
    if (pcb->listener == lpcb) {
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d102      	bne.n	8006960 <tcp_remove_listener+0x3c>
      pcb->listener = NULL;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1f1      	bne.n	8006950 <tcp_remove_listener+0x2c>
    }
  }
}
 800696c:	bf00      	nop
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	080161b0 	.word	0x080161b0
 8006978:	08016228 	.word	0x08016228
 800697c:	080161e4 	.word	0x080161e4

08006980 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10b      	bne.n	80069a6 <tcp_listen_closed+0x26>
 800698e:	4b19      	ldr	r3, [pc, #100]	; (80069f4 <tcp_listen_closed+0x74>)
 8006990:	f240 1211 	movw	r2, #273	; 0x111
 8006994:	4918      	ldr	r1, [pc, #96]	; (80069f8 <tcp_listen_closed+0x78>)
 8006996:	4819      	ldr	r0, [pc, #100]	; (80069fc <tcp_listen_closed+0x7c>)
 8006998:	f00d f866 	bl	8013a68 <iprintf>
 800699c:	2000      	movs	r0, #0
 800699e:	f00d f965 	bl	8013c6c <fflush>
 80069a2:	f00d f8aa 	bl	8013afa <abort>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	7d1b      	ldrb	r3, [r3, #20]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d00b      	beq.n	80069c6 <tcp_listen_closed+0x46>
 80069ae:	4b11      	ldr	r3, [pc, #68]	; (80069f4 <tcp_listen_closed+0x74>)
 80069b0:	f44f 7289 	mov.w	r2, #274	; 0x112
 80069b4:	4912      	ldr	r1, [pc, #72]	; (8006a00 <tcp_listen_closed+0x80>)
 80069b6:	4811      	ldr	r0, [pc, #68]	; (80069fc <tcp_listen_closed+0x7c>)
 80069b8:	f00d f856 	bl	8013a68 <iprintf>
 80069bc:	2000      	movs	r0, #0
 80069be:	f00d f955 	bl	8013c6c <fflush>
 80069c2:	f00d f89a 	bl	8013afa <abort>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80069c6:	2301      	movs	r3, #1
 80069c8:	60fb      	str	r3, [r7, #12]
 80069ca:	e00b      	b.n	80069e4 <tcp_listen_closed+0x64>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80069cc:	4a0d      	ldr	r2, [pc, #52]	; (8006a04 <tcp_listen_closed+0x84>)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff ffa3 	bl	8006924 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	3301      	adds	r3, #1
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d9f0      	bls.n	80069cc <tcp_listen_closed+0x4c>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80069ea:	bf00      	nop
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	080161b0 	.word	0x080161b0
 80069f8:	08016250 	.word	0x08016250
 80069fc:	080161e4 	.word	0x080161e4
 8006a00:	0801625c 	.word	0x0801625c
 8006a04:	08017b20 	.word	0x08017b20

08006a08 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006a08:	b5b0      	push	{r4, r5, r7, lr}
 8006a0a:	b088      	sub	sp, #32
 8006a0c:	af04      	add	r7, sp, #16
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10b      	bne.n	8006a32 <tcp_close_shutdown+0x2a>
 8006a1a:	4b67      	ldr	r3, [pc, #412]	; (8006bb8 <tcp_close_shutdown+0x1b0>)
 8006a1c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006a20:	4966      	ldr	r1, [pc, #408]	; (8006bbc <tcp_close_shutdown+0x1b4>)
 8006a22:	4867      	ldr	r0, [pc, #412]	; (8006bc0 <tcp_close_shutdown+0x1b8>)
 8006a24:	f00d f820 	bl	8013a68 <iprintf>
 8006a28:	2000      	movs	r0, #0
 8006a2a:	f00d f91f 	bl	8013c6c <fflush>
 8006a2e:	f00d f864 	bl	8013afa <abort>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006a32:	78fb      	ldrb	r3, [r7, #3]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d06c      	beq.n	8006b12 <tcp_close_shutdown+0x10a>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	7d1b      	ldrb	r3, [r3, #20]
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	d003      	beq.n	8006a48 <tcp_close_shutdown+0x40>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	7d1b      	ldrb	r3, [r3, #20]
 8006a44:	2b07      	cmp	r3, #7
 8006a46:	d164      	bne.n	8006b12 <tcp_close_shutdown+0x10a>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d105      	bne.n	8006a5c <tcp_close_shutdown+0x54>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a54:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d05a      	beq.n	8006b12 <tcp_close_shutdown+0x10a>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	8b5b      	ldrh	r3, [r3, #26]
 8006a60:	f003 0310 	and.w	r3, r3, #16
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10b      	bne.n	8006a80 <tcp_close_shutdown+0x78>
 8006a68:	4b53      	ldr	r3, [pc, #332]	; (8006bb8 <tcp_close_shutdown+0x1b0>)
 8006a6a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006a6e:	4955      	ldr	r1, [pc, #340]	; (8006bc4 <tcp_close_shutdown+0x1bc>)
 8006a70:	4853      	ldr	r0, [pc, #332]	; (8006bc0 <tcp_close_shutdown+0x1b8>)
 8006a72:	f00c fff9 	bl	8013a68 <iprintf>
 8006a76:	2000      	movs	r0, #0
 8006a78:	f00d f8f8 	bl	8013c6c <fflush>
 8006a7c:	f00d f83d 	bl	8013afa <abort>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006a88:	687d      	ldr	r5, [r7, #4]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	8ad2      	ldrh	r2, [r2, #22]
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	8b09      	ldrh	r1, [r1, #24]
 8006a96:	9102      	str	r1, [sp, #8]
 8006a98:	9201      	str	r2, [sp, #4]
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	462b      	mov	r3, r5
 8006a9e:	4622      	mov	r2, r4
 8006aa0:	4601      	mov	r1, r0
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f006 f9d0 	bl	800ce48 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 fbfb 	bl	80082a4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006aae:	4b46      	ldr	r3, [pc, #280]	; (8006bc8 <tcp_close_shutdown+0x1c0>)
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d105      	bne.n	8006ac4 <tcp_close_shutdown+0xbc>
 8006ab8:	4b43      	ldr	r3, [pc, #268]	; (8006bc8 <tcp_close_shutdown+0x1c0>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	4a42      	ldr	r2, [pc, #264]	; (8006bc8 <tcp_close_shutdown+0x1c0>)
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	e013      	b.n	8006aec <tcp_close_shutdown+0xe4>
 8006ac4:	4b40      	ldr	r3, [pc, #256]	; (8006bc8 <tcp_close_shutdown+0x1c0>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	e00c      	b.n	8006ae6 <tcp_close_shutdown+0xde>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	68da      	ldr	r2, [r3, #12]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d104      	bne.n	8006ae0 <tcp_close_shutdown+0xd8>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	60da      	str	r2, [r3, #12]
 8006ade:	e005      	b.n	8006aec <tcp_close_shutdown+0xe4>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1ef      	bne.n	8006acc <tcp_close_shutdown+0xc4>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	60da      	str	r2, [r3, #12]
 8006af2:	4b36      	ldr	r3, [pc, #216]	; (8006bcc <tcp_close_shutdown+0x1c4>)
 8006af4:	2201      	movs	r2, #1
 8006af6:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006af8:	4b35      	ldr	r3, [pc, #212]	; (8006bd0 <tcp_close_shutdown+0x1c8>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d102      	bne.n	8006b08 <tcp_close_shutdown+0x100>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006b02:	f004 f9fb 	bl	800aefc <tcp_trigger_input_pcb_close>
 8006b06:	e002      	b.n	8006b0e <tcp_close_shutdown+0x106>
      } else {
        tcp_free(pcb);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff feb1 	bl	8006870 <tcp_free>
      }
      return ERR_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e04d      	b.n	8006bae <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	7d1b      	ldrb	r3, [r3, #20]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d02d      	beq.n	8006b76 <tcp_close_shutdown+0x16e>
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d036      	beq.n	8006b8c <tcp_close_shutdown+0x184>
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d13f      	bne.n	8006ba2 <tcp_close_shutdown+0x19a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	8adb      	ldrh	r3, [r3, #22]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d021      	beq.n	8006b6e <tcp_close_shutdown+0x166>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006b2a:	4b2a      	ldr	r3, [pc, #168]	; (8006bd4 <tcp_close_shutdown+0x1cc>)
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d105      	bne.n	8006b40 <tcp_close_shutdown+0x138>
 8006b34:	4b27      	ldr	r3, [pc, #156]	; (8006bd4 <tcp_close_shutdown+0x1cc>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	4a26      	ldr	r2, [pc, #152]	; (8006bd4 <tcp_close_shutdown+0x1cc>)
 8006b3c:	6013      	str	r3, [r2, #0]
 8006b3e:	e013      	b.n	8006b68 <tcp_close_shutdown+0x160>
 8006b40:	4b24      	ldr	r3, [pc, #144]	; (8006bd4 <tcp_close_shutdown+0x1cc>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	60bb      	str	r3, [r7, #8]
 8006b46:	e00c      	b.n	8006b62 <tcp_close_shutdown+0x15a>
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d104      	bne.n	8006b5c <tcp_close_shutdown+0x154>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	60da      	str	r2, [r3, #12]
 8006b5a:	e005      	b.n	8006b68 <tcp_close_shutdown+0x160>
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	60bb      	str	r3, [r7, #8]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1ef      	bne.n	8006b48 <tcp_close_shutdown+0x140>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7ff fe7e 	bl	8006870 <tcp_free>
      break;
 8006b74:	e01a      	b.n	8006bac <tcp_close_shutdown+0x1a4>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff ff02 	bl	8006980 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	4816      	ldr	r0, [pc, #88]	; (8006bd8 <tcp_close_shutdown+0x1d0>)
 8006b80:	f001 fbe0 	bl	8008344 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff fe95 	bl	80068b4 <tcp_free_listen>
      break;
 8006b8a:	e00f      	b.n	8006bac <tcp_close_shutdown+0x1a4>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	480e      	ldr	r0, [pc, #56]	; (8006bc8 <tcp_close_shutdown+0x1c0>)
 8006b90:	f001 fbd8 	bl	8008344 <tcp_pcb_remove>
 8006b94:	4b0d      	ldr	r3, [pc, #52]	; (8006bcc <tcp_close_shutdown+0x1c4>)
 8006b96:	2201      	movs	r2, #1
 8006b98:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7ff fe68 	bl	8006870 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006ba0:	e004      	b.n	8006bac <tcp_close_shutdown+0x1a4>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f81a 	bl	8006bdc <tcp_close_shutdown_fin>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	e000      	b.n	8006bae <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	080161b0 	.word	0x080161b0
 8006bbc:	08016274 	.word	0x08016274
 8006bc0:	080161e4 	.word	0x080161e4
 8006bc4:	08016294 	.word	0x08016294
 8006bc8:	200022c0 	.word	0x200022c0
 8006bcc:	200022bc 	.word	0x200022bc
 8006bd0:	200022d4 	.word	0x200022d4
 8006bd4:	200022cc 	.word	0x200022cc
 8006bd8:	200022c8 	.word	0x200022c8

08006bdc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10b      	bne.n	8006c02 <tcp_close_shutdown_fin+0x26>
 8006bea:	4b2f      	ldr	r3, [pc, #188]	; (8006ca8 <tcp_close_shutdown_fin+0xcc>)
 8006bec:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006bf0:	492e      	ldr	r1, [pc, #184]	; (8006cac <tcp_close_shutdown_fin+0xd0>)
 8006bf2:	482f      	ldr	r0, [pc, #188]	; (8006cb0 <tcp_close_shutdown_fin+0xd4>)
 8006bf4:	f00c ff38 	bl	8013a68 <iprintf>
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	f00d f837 	bl	8013c6c <fflush>
 8006bfe:	f00c ff7c 	bl	8013afa <abort>

  switch (pcb->state) {
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	7d1b      	ldrb	r3, [r3, #20]
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d010      	beq.n	8006c2c <tcp_close_shutdown_fin+0x50>
 8006c0a:	2b07      	cmp	r3, #7
 8006c0c:	d01b      	beq.n	8006c46 <tcp_close_shutdown_fin+0x6a>
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d126      	bne.n	8006c60 <tcp_close_shutdown_fin+0x84>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f005 f8d0 	bl	800bdb8 <tcp_send_fin>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d11f      	bne.n	8006c64 <tcp_close_shutdown_fin+0x88>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2205      	movs	r2, #5
 8006c28:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006c2a:	e01b      	b.n	8006c64 <tcp_close_shutdown_fin+0x88>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f005 f8c3 	bl	800bdb8 <tcp_send_fin>
 8006c32:	4603      	mov	r3, r0
 8006c34:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d114      	bne.n	8006c68 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2205      	movs	r2, #5
 8006c42:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006c44:	e010      	b.n	8006c68 <tcp_close_shutdown_fin+0x8c>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f005 f8b6 	bl	800bdb8 <tcp_send_fin>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d109      	bne.n	8006c6c <tcp_close_shutdown_fin+0x90>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2209      	movs	r2, #9
 8006c5c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006c5e:	e005      	b.n	8006c6c <tcp_close_shutdown_fin+0x90>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	e01c      	b.n	8006c9e <tcp_close_shutdown_fin+0xc2>
      break;
 8006c64:	bf00      	nop
 8006c66:	e002      	b.n	8006c6e <tcp_close_shutdown_fin+0x92>
      break;
 8006c68:	bf00      	nop
 8006c6a:	e000      	b.n	8006c6e <tcp_close_shutdown_fin+0x92>
      break;
 8006c6c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d103      	bne.n	8006c7e <tcp_close_shutdown_fin+0xa2>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f005 f9fe 	bl	800c078 <tcp_output>
 8006c7c:	e00d      	b.n	8006c9a <tcp_close_shutdown_fin+0xbe>
  } else if (err == ERR_MEM) {
 8006c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c86:	d108      	bne.n	8006c9a <tcp_close_shutdown_fin+0xbe>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	8b5b      	ldrh	r3, [r3, #26]
 8006c8c:	f043 0308 	orr.w	r3, r3, #8
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	e001      	b.n	8006c9e <tcp_close_shutdown_fin+0xc2>
  }
  return err;
 8006c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	080161b0 	.word	0x080161b0
 8006cac:	08016250 	.word	0x08016250
 8006cb0:	080161e4 	.word	0x080161e4

08006cb4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d109      	bne.n	8006cd6 <tcp_close+0x22>
 8006cc2:	4b0f      	ldr	r3, [pc, #60]	; (8006d00 <tcp_close+0x4c>)
 8006cc4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006cc8:	490e      	ldr	r1, [pc, #56]	; (8006d04 <tcp_close+0x50>)
 8006cca:	480f      	ldr	r0, [pc, #60]	; (8006d08 <tcp_close+0x54>)
 8006ccc:	f7fb f8a5 	bl	8001e1a <lwip_win32_platform_diag>
 8006cd0:	f06f 030f 	mvn.w	r3, #15
 8006cd4:	e00f      	b.n	8006cf6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	7d1b      	ldrb	r3, [r3, #20]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d006      	beq.n	8006cec <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	8b5b      	ldrh	r3, [r3, #26]
 8006ce2:	f043 0310 	orr.w	r3, r3, #16
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006cec:	2101      	movs	r1, #1
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff fe8a 	bl	8006a08 <tcp_close_shutdown>
 8006cf4:	4603      	mov	r3, r0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	080161b0 	.word	0x080161b0
 8006d04:	080162b0 	.word	0x080162b0
 8006d08:	080161e4 	.word	0x080161e4

08006d0c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b08e      	sub	sp, #56	; 0x38
 8006d10:	af04      	add	r7, sp, #16
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d107      	bne.n	8006d2c <tcp_abandon+0x20>
 8006d1c:	4b54      	ldr	r3, [pc, #336]	; (8006e70 <tcp_abandon+0x164>)
 8006d1e:	f240 223d 	movw	r2, #573	; 0x23d
 8006d22:	4954      	ldr	r1, [pc, #336]	; (8006e74 <tcp_abandon+0x168>)
 8006d24:	4854      	ldr	r0, [pc, #336]	; (8006e78 <tcp_abandon+0x16c>)
 8006d26:	f7fb f878 	bl	8001e1a <lwip_win32_platform_diag>
 8006d2a:	e09e      	b.n	8006e6a <tcp_abandon+0x15e>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	7d1b      	ldrb	r3, [r3, #20]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d10b      	bne.n	8006d4c <tcp_abandon+0x40>
 8006d34:	4b4e      	ldr	r3, [pc, #312]	; (8006e70 <tcp_abandon+0x164>)
 8006d36:	f240 2241 	movw	r2, #577	; 0x241
 8006d3a:	4950      	ldr	r1, [pc, #320]	; (8006e7c <tcp_abandon+0x170>)
 8006d3c:	484e      	ldr	r0, [pc, #312]	; (8006e78 <tcp_abandon+0x16c>)
 8006d3e:	f00c fe93 	bl	8013a68 <iprintf>
 8006d42:	2000      	movs	r0, #0
 8006d44:	f00c ff92 	bl	8013c6c <fflush>
 8006d48:	f00c fed7 	bl	8013afa <abort>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	7d1b      	ldrb	r3, [r3, #20]
 8006d50:	2b0a      	cmp	r3, #10
 8006d52:	d107      	bne.n	8006d64 <tcp_abandon+0x58>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006d54:	6879      	ldr	r1, [r7, #4]
 8006d56:	484a      	ldr	r0, [pc, #296]	; (8006e80 <tcp_abandon+0x174>)
 8006d58:	f001 faf4 	bl	8008344 <tcp_pcb_remove>
    tcp_free(pcb);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff fd87 	bl	8006870 <tcp_free>
 8006d62:	e082      	b.n	8006e6a <tcp_abandon+0x15e>
  } else {
    int send_rst = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d70:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d7e:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	7d1b      	ldrb	r3, [r3, #20]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d126      	bne.n	8006ddc <tcp_abandon+0xd0>
      if (pcb->local_port != 0) {
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	8adb      	ldrh	r3, [r3, #22]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d02e      	beq.n	8006df4 <tcp_abandon+0xe8>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006d96:	4b3b      	ldr	r3, [pc, #236]	; (8006e84 <tcp_abandon+0x178>)
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d105      	bne.n	8006dac <tcp_abandon+0xa0>
 8006da0:	4b38      	ldr	r3, [pc, #224]	; (8006e84 <tcp_abandon+0x178>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	4a37      	ldr	r2, [pc, #220]	; (8006e84 <tcp_abandon+0x178>)
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	e013      	b.n	8006dd4 <tcp_abandon+0xc8>
 8006dac:	4b35      	ldr	r3, [pc, #212]	; (8006e84 <tcp_abandon+0x178>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	61fb      	str	r3, [r7, #28]
 8006db2:	e00c      	b.n	8006dce <tcp_abandon+0xc2>
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d104      	bne.n	8006dc8 <tcp_abandon+0xbc>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68da      	ldr	r2, [r3, #12]
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	60da      	str	r2, [r3, #12]
 8006dc6:	e005      	b.n	8006dd4 <tcp_abandon+0xc8>
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	61fb      	str	r3, [r7, #28]
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1ef      	bne.n	8006db4 <tcp_abandon+0xa8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	60da      	str	r2, [r3, #12]
 8006dda:	e00b      	b.n	8006df4 <tcp_abandon+0xe8>
      }
    } else {
      send_rst = reset;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	8adb      	ldrh	r3, [r3, #22]
 8006de4:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	4827      	ldr	r0, [pc, #156]	; (8006e88 <tcp_abandon+0x17c>)
 8006dea:	f001 faab 	bl	8008344 <tcp_pcb_remove>
 8006dee:	4b27      	ldr	r3, [pc, #156]	; (8006e8c <tcp_abandon+0x180>)
 8006df0:	2201      	movs	r2, #1
 8006df2:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d004      	beq.n	8006e06 <tcp_abandon+0xfa>
      tcp_segs_free(pcb->unacked);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 ff57 	bl	8007cb4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d004      	beq.n	8006e18 <tcp_abandon+0x10c>
      tcp_segs_free(pcb->unsent);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 ff4e 	bl	8007cb4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d004      	beq.n	8006e2a <tcp_abandon+0x11e>
      tcp_segs_free(pcb->ooseq);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 ff45 	bl	8007cb4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00e      	beq.n	8006e4e <tcp_abandon+0x142>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006e30:	6879      	ldr	r1, [r7, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	3304      	adds	r3, #4
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	8b12      	ldrh	r2, [r2, #24]
 8006e3a:	9202      	str	r2, [sp, #8]
 8006e3c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006e3e:	9201      	str	r2, [sp, #4]
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	460b      	mov	r3, r1
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	69b9      	ldr	r1, [r7, #24]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f005 fffd 	bl	800ce48 <tcp_rst>
    }
    last_state = pcb->state;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	7d1b      	ldrb	r3, [r3, #20]
 8006e52:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff fd0b 	bl	8006870 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d004      	beq.n	8006e6a <tcp_abandon+0x15e>
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f06f 010c 	mvn.w	r1, #12
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	4798      	blx	r3
  }
}
 8006e6a:	3728      	adds	r7, #40	; 0x28
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	080161b0 	.word	0x080161b0
 8006e74:	080162e4 	.word	0x080162e4
 8006e78:	080161e4 	.word	0x080161e4
 8006e7c:	08016300 	.word	0x08016300
 8006e80:	200022d0 	.word	0x200022d0
 8006e84:	200022cc 	.word	0x200022cc
 8006e88:	200022c0 	.word	0x200022c0
 8006e8c:	200022bc 	.word	0x200022bc

08006e90 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006e98:	2101      	movs	r1, #1
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff ff36 	bl	8006d0c <tcp_abandon>
}
 8006ea0:	bf00      	nop
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b088      	sub	sp, #32
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8006eb6:	2304      	movs	r3, #4
 8006eb8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8006ec0:	4b3e      	ldr	r3, [pc, #248]	; (8006fbc <tcp_bind+0x114>)
 8006ec2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d109      	bne.n	8006ede <tcp_bind+0x36>
 8006eca:	4b3d      	ldr	r3, [pc, #244]	; (8006fc0 <tcp_bind+0x118>)
 8006ecc:	f240 22aa 	movw	r2, #682	; 0x2aa
 8006ed0:	493c      	ldr	r1, [pc, #240]	; (8006fc4 <tcp_bind+0x11c>)
 8006ed2:	483d      	ldr	r0, [pc, #244]	; (8006fc8 <tcp_bind+0x120>)
 8006ed4:	f7fa ffa1 	bl	8001e1a <lwip_win32_platform_diag>
 8006ed8:	f06f 030f 	mvn.w	r3, #15
 8006edc:	e06a      	b.n	8006fb4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	7d1b      	ldrb	r3, [r3, #20]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d009      	beq.n	8006efa <tcp_bind+0x52>
 8006ee6:	4b36      	ldr	r3, [pc, #216]	; (8006fc0 <tcp_bind+0x118>)
 8006ee8:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8006eec:	4937      	ldr	r1, [pc, #220]	; (8006fcc <tcp_bind+0x124>)
 8006eee:	4836      	ldr	r0, [pc, #216]	; (8006fc8 <tcp_bind+0x120>)
 8006ef0:	f7fa ff93 	bl	8001e1a <lwip_win32_platform_diag>
 8006ef4:	f06f 0305 	mvn.w	r3, #5
 8006ef8:	e05c      	b.n	8006fb4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8006efa:	88fb      	ldrh	r3, [r7, #6]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d109      	bne.n	8006f14 <tcp_bind+0x6c>
    port = tcp_new_port();
 8006f00:	f000 f926 	bl	8007150 <tcp_new_port>
 8006f04:	4603      	mov	r3, r0
 8006f06:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006f08:	88fb      	ldrh	r3, [r7, #6]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d135      	bne.n	8006f7a <tcp_bind+0xd2>
      return ERR_BUF;
 8006f0e:	f06f 0301 	mvn.w	r3, #1
 8006f12:	e04f      	b.n	8006fb4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006f14:	2300      	movs	r3, #0
 8006f16:	61fb      	str	r3, [r7, #28]
 8006f18:	e02b      	b.n	8006f72 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006f1a:	4a2d      	ldr	r2, [pc, #180]	; (8006fd0 <tcp_bind+0x128>)
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	61bb      	str	r3, [r7, #24]
 8006f26:	e01e      	b.n	8006f66 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	8adb      	ldrh	r3, [r3, #22]
 8006f2c:	88fa      	ldrh	r2, [r7, #6]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d116      	bne.n	8006f60 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8006f32:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d010      	beq.n	8006f5a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00c      	beq.n	8006f5a <tcp_bind+0xb2>
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d009      	beq.n	8006f5a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d005      	beq.n	8006f5a <tcp_bind+0xb2>
                 ip_addr_eq(&cpcb->local_ip, ipaddr))) {
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d102      	bne.n	8006f60 <tcp_bind+0xb8>
              return ERR_USE;
 8006f5a:	f06f 0307 	mvn.w	r3, #7
 8006f5e:	e029      	b.n	8006fb4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1dd      	bne.n	8006f28 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	61fb      	str	r3, [r7, #28]
 8006f72:	69fa      	ldr	r2, [r7, #28]
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	dbcf      	blt.n	8006f1a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00c      	beq.n	8006f9a <tcp_bind+0xf2>
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d008      	beq.n	8006f9a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <tcp_bind+0xec>
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	e000      	b.n	8006f96 <tcp_bind+0xee>
 8006f94:	2300      	movs	r3, #0
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	88fa      	ldrh	r2, [r7, #6]
 8006f9e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006fa0:	4b0c      	ldr	r3, [pc, #48]	; (8006fd4 <tcp_bind+0x12c>)
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	60da      	str	r2, [r3, #12]
 8006fa8:	4a0a      	ldr	r2, [pc, #40]	; (8006fd4 <tcp_bind+0x12c>)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	f006 f915 	bl	800d1dc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3720      	adds	r7, #32
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	08017a40 	.word	0x08017a40
 8006fc0:	080161b0 	.word	0x080161b0
 8006fc4:	08016334 	.word	0x08016334
 8006fc8:	080161e4 	.word	0x080161e4
 8006fcc:	0801634c 	.word	0x0801634c
 8006fd0:	08017b20 	.word	0x08017b20
 8006fd4:	200022cc 	.word	0x200022cc

08006fd8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10b      	bne.n	8006ffe <tcp_update_rcv_ann_wnd+0x26>
 8006fe6:	4b2b      	ldr	r3, [pc, #172]	; (8007094 <tcp_update_rcv_ann_wnd+0xbc>)
 8006fe8:	f240 32aa 	movw	r2, #938	; 0x3aa
 8006fec:	492a      	ldr	r1, [pc, #168]	; (8007098 <tcp_update_rcv_ann_wnd+0xc0>)
 8006fee:	482b      	ldr	r0, [pc, #172]	; (800709c <tcp_update_rcv_ann_wnd+0xc4>)
 8006ff0:	f00c fd3a 	bl	8013a68 <iprintf>
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	f00c fe39 	bl	8013c6c <fflush>
 8006ffa:	f00c fd7e 	bl	8013afa <abort>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007006:	4413      	add	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007012:	f240 21da 	movw	r1, #730	; 0x2da
 8007016:	428a      	cmp	r2, r1
 8007018:	d802      	bhi.n	8007020 <tcp_update_rcv_ann_wnd+0x48>
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800701e:	e001      	b.n	8007024 <tcp_update_rcv_ann_wnd+0x4c>
 8007020:	f240 22da 	movw	r2, #730	; 0x2da
 8007024:	4413      	add	r3, r2
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	db08      	blt.n	8007040 <tcp_update_rcv_ann_wnd+0x68>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	e025      	b.n	800708c <tcp_update_rcv_ann_wnd+0xb4>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	da03      	bge.n	8007056 <tcp_update_rcv_ann_wnd+0x7e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007054:	e019      	b.n	800708a <tcp_update_rcv_ann_wnd+0xb2>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007068:	d30b      	bcc.n	8007082 <tcp_update_rcv_ann_wnd+0xaa>
 800706a:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <tcp_update_rcv_ann_wnd+0xbc>)
 800706c:	f240 32ba 	movw	r2, #954	; 0x3ba
 8007070:	490b      	ldr	r1, [pc, #44]	; (80070a0 <tcp_update_rcv_ann_wnd+0xc8>)
 8007072:	480a      	ldr	r0, [pc, #40]	; (800709c <tcp_update_rcv_ann_wnd+0xc4>)
 8007074:	f00c fcf8 	bl	8013a68 <iprintf>
 8007078:	2000      	movs	r0, #0
 800707a:	f00c fdf7 	bl	8013c6c <fflush>
 800707e:	f00c fd3c 	bl	8013afa <abort>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	b29a      	uxth	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800708a:	2300      	movs	r3, #0
  }
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	080161b0 	.word	0x080161b0
 8007098:	080163fc 	.word	0x080163fc
 800709c:	080161e4 	.word	0x080161e4
 80070a0:	08016420 	.word	0x08016420

080070a4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	460b      	mov	r3, r1
 80070ae:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d107      	bne.n	80070c6 <tcp_recved+0x22>
 80070b6:	4b22      	ldr	r3, [pc, #136]	; (8007140 <tcp_recved+0x9c>)
 80070b8:	f240 32d3 	movw	r2, #979	; 0x3d3
 80070bc:	4921      	ldr	r1, [pc, #132]	; (8007144 <tcp_recved+0xa0>)
 80070be:	4822      	ldr	r0, [pc, #136]	; (8007148 <tcp_recved+0xa4>)
 80070c0:	f7fa feab 	bl	8001e1a <lwip_win32_platform_diag>
 80070c4:	e038      	b.n	8007138 <tcp_recved+0x94>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	7d1b      	ldrb	r3, [r3, #20]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d10b      	bne.n	80070e6 <tcp_recved+0x42>
 80070ce:	4b1c      	ldr	r3, [pc, #112]	; (8007140 <tcp_recved+0x9c>)
 80070d0:	f240 32d7 	movw	r2, #983	; 0x3d7
 80070d4:	491d      	ldr	r1, [pc, #116]	; (800714c <tcp_recved+0xa8>)
 80070d6:	481c      	ldr	r0, [pc, #112]	; (8007148 <tcp_recved+0xa4>)
 80070d8:	f00c fcc6 	bl	8013a68 <iprintf>
 80070dc:	2000      	movs	r0, #0
 80070de:	f00c fdc5 	bl	8013c6c <fflush>
 80070e2:	f00c fd0a 	bl	8013afa <abort>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80070ea:	887b      	ldrh	r3, [r7, #2]
 80070ec:	4413      	add	r3, r2
 80070ee:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80070f0:	89fb      	ldrh	r3, [r7, #14]
 80070f2:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d804      	bhi.n	8007104 <tcp_recved+0x60>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070fe:	89fa      	ldrh	r2, [r7, #14]
 8007100:	429a      	cmp	r2, r3
 8007102:	d204      	bcs.n	800710e <tcp_recved+0x6a>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800710a:	851a      	strh	r2, [r3, #40]	; 0x28
 800710c:	e002      	b.n	8007114 <tcp_recved+0x70>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	89fa      	ldrh	r2, [r7, #14]
 8007112:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff ff5f 	bl	8006fd8 <tcp_update_rcv_ann_wnd>
 800711a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8007122:	d909      	bls.n	8007138 <tcp_recved+0x94>
    tcp_ack_now(pcb);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	8b5b      	ldrh	r3, [r3, #26]
 8007128:	f043 0302 	orr.w	r3, r3, #2
 800712c:	b29a      	uxth	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f004 ffa0 	bl	800c078 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	080161b0 	.word	0x080161b0
 8007144:	0801643c 	.word	0x0801643c
 8007148:	080161e4 	.word	0x080161e4
 800714c:	08016454 	.word	0x08016454

08007150 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007156:	2300      	movs	r3, #0
 8007158:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800715a:	4b1e      	ldr	r3, [pc, #120]	; (80071d4 <tcp_new_port+0x84>)
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	3301      	adds	r3, #1
 8007160:	b29a      	uxth	r2, r3
 8007162:	4b1c      	ldr	r3, [pc, #112]	; (80071d4 <tcp_new_port+0x84>)
 8007164:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007166:	4b1b      	ldr	r3, [pc, #108]	; (80071d4 <tcp_new_port+0x84>)
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800716e:	4293      	cmp	r3, r2
 8007170:	d103      	bne.n	800717a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007172:	4b18      	ldr	r3, [pc, #96]	; (80071d4 <tcp_new_port+0x84>)
 8007174:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007178:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800717a:	2300      	movs	r3, #0
 800717c:	71fb      	strb	r3, [r7, #7]
 800717e:	e01e      	b.n	80071be <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007180:	79fb      	ldrb	r3, [r7, #7]
 8007182:	4a15      	ldr	r2, [pc, #84]	; (80071d8 <tcp_new_port+0x88>)
 8007184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	e011      	b.n	80071b2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	8ada      	ldrh	r2, [r3, #22]
 8007192:	4b10      	ldr	r3, [pc, #64]	; (80071d4 <tcp_new_port+0x84>)
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d108      	bne.n	80071ac <tcp_new_port+0x5c>
        n++;
 800719a:	88bb      	ldrh	r3, [r7, #4]
 800719c:	3301      	adds	r3, #1
 800719e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80071a0:	88bb      	ldrh	r3, [r7, #4]
 80071a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071a6:	d3d8      	bcc.n	800715a <tcp_new_port+0xa>
          return 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	e00d      	b.n	80071c8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	603b      	str	r3, [r7, #0]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1ea      	bne.n	800718e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	3301      	adds	r3, #1
 80071bc:	71fb      	strb	r3, [r7, #7]
 80071be:	79fb      	ldrb	r3, [r7, #7]
 80071c0:	2b03      	cmp	r3, #3
 80071c2:	d9dd      	bls.n	8007180 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80071c4:	4b03      	ldr	r3, [pc, #12]	; (80071d4 <tcp_new_port+0x84>)
 80071c6:	881b      	ldrh	r3, [r3, #0]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	20000008 	.word	0x20000008
 80071d8:	08017b20 	.word	0x08017b20

080071dc <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08a      	sub	sp, #40	; 0x28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	603b      	str	r3, [r7, #0]
 80071e8:	4613      	mov	r3, r2
 80071ea:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80071ec:	2300      	movs	r3, #0
 80071ee:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d109      	bne.n	800720a <tcp_connect+0x2e>
 80071f6:	4b7d      	ldr	r3, [pc, #500]	; (80073ec <tcp_connect+0x210>)
 80071f8:	f240 4239 	movw	r2, #1081	; 0x439
 80071fc:	497c      	ldr	r1, [pc, #496]	; (80073f0 <tcp_connect+0x214>)
 80071fe:	487d      	ldr	r0, [pc, #500]	; (80073f4 <tcp_connect+0x218>)
 8007200:	f7fa fe0b 	bl	8001e1a <lwip_win32_platform_diag>
 8007204:	f06f 030f 	mvn.w	r3, #15
 8007208:	e0ec      	b.n	80073e4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d109      	bne.n	8007224 <tcp_connect+0x48>
 8007210:	4b76      	ldr	r3, [pc, #472]	; (80073ec <tcp_connect+0x210>)
 8007212:	f240 423a 	movw	r2, #1082	; 0x43a
 8007216:	4978      	ldr	r1, [pc, #480]	; (80073f8 <tcp_connect+0x21c>)
 8007218:	4876      	ldr	r0, [pc, #472]	; (80073f4 <tcp_connect+0x218>)
 800721a:	f7fa fdfe 	bl	8001e1a <lwip_win32_platform_diag>
 800721e:	f06f 030f 	mvn.w	r3, #15
 8007222:	e0df      	b.n	80073e4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	7d1b      	ldrb	r3, [r3, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d009      	beq.n	8007240 <tcp_connect+0x64>
 800722c:	4b6f      	ldr	r3, [pc, #444]	; (80073ec <tcp_connect+0x210>)
 800722e:	f240 423c 	movw	r2, #1084	; 0x43c
 8007232:	4972      	ldr	r1, [pc, #456]	; (80073fc <tcp_connect+0x220>)
 8007234:	486f      	ldr	r0, [pc, #444]	; (80073f4 <tcp_connect+0x218>)
 8007236:	f7fa fdf0 	bl	8001e1a <lwip_win32_platform_diag>
 800723a:	f06f 0309 	mvn.w	r3, #9
 800723e:	e0d1      	b.n	80073e4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d002      	beq.n	800724c <tcp_connect+0x70>
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	e000      	b.n	800724e <tcp_connect+0x72>
 800724c:	2300      	movs	r3, #0
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	88fa      	ldrh	r2, [r7, #6]
 8007256:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	7a1b      	ldrb	r3, [r3, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d006      	beq.n	800726e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	7a1b      	ldrb	r3, [r3, #8]
 8007264:	4618      	mov	r0, r3
 8007266:	f7fe fbd5 	bl	8005a14 <netif_get_by_index>
 800726a:	6278      	str	r0, [r7, #36]	; 0x24
 800726c:	e005      	b.n	800727a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3304      	adds	r3, #4
 8007272:	4618      	mov	r0, r3
 8007274:	f7fc ff44 	bl	8004100 <ip4_route>
 8007278:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	2b00      	cmp	r3, #0
 800727e:	d102      	bne.n	8007286 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8007280:	f06f 0303 	mvn.w	r3, #3
 8007284:	e0ae      	b.n	80073e4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d003      	beq.n	8007294 <tcp_connect+0xb8>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d111      	bne.n	80072b8 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <tcp_connect+0xc4>
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	3304      	adds	r3, #4
 800729e:	e000      	b.n	80072a2 <tcp_connect+0xc6>
 80072a0:	2300      	movs	r3, #0
 80072a2:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d102      	bne.n	80072b0 <tcp_connect+0xd4>
      return ERR_RTE;
 80072aa:	f06f 0303 	mvn.w	r3, #3
 80072ae:	e099      	b.n	80073e4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8adb      	ldrh	r3, [r3, #22]
 80072bc:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8adb      	ldrh	r3, [r3, #22]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10c      	bne.n	80072e0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 80072c6:	f7ff ff43 	bl	8007150 <tcp_new_port>
 80072ca:	4603      	mov	r3, r0
 80072cc:	461a      	mov	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8adb      	ldrh	r3, [r3, #22]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d102      	bne.n	80072e0 <tcp_connect+0x104>
      return ERR_BUF;
 80072da:	f06f 0301 	mvn.w	r3, #1
 80072de:	e081      	b.n	80073e4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f001 f8db 	bl	800849c <tcp_next_iss>
 80072e6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	1e5a      	subs	r2, r3, #1
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	1e5a      	subs	r2, r3, #1
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	1e5a      	subs	r2, r3, #1
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8007312:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800732a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007334:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	3304      	adds	r3, #4
 800733e:	461a      	mov	r2, r3
 8007340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007342:	f001 f8d5 	bl	80084f0 <tcp_eff_send_mss_netif>
 8007346:	4603      	mov	r3, r0
 8007348:	461a      	mov	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2201      	movs	r2, #1
 8007352:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800735e:	2102      	movs	r1, #2
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f004 fd7d 	bl	800be60 <tcp_enqueue_flags>
 8007366:	4603      	mov	r3, r0
 8007368:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800736a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d136      	bne.n	80073e0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2202      	movs	r2, #2
 8007376:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8007378:	8b7b      	ldrh	r3, [r7, #26]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d021      	beq.n	80073c2 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800737e:	4b20      	ldr	r3, [pc, #128]	; (8007400 <tcp_connect+0x224>)
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	429a      	cmp	r2, r3
 8007386:	d105      	bne.n	8007394 <tcp_connect+0x1b8>
 8007388:	4b1d      	ldr	r3, [pc, #116]	; (8007400 <tcp_connect+0x224>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	4a1c      	ldr	r2, [pc, #112]	; (8007400 <tcp_connect+0x224>)
 8007390:	6013      	str	r3, [r2, #0]
 8007392:	e013      	b.n	80073bc <tcp_connect+0x1e0>
 8007394:	4b1a      	ldr	r3, [pc, #104]	; (8007400 <tcp_connect+0x224>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	623b      	str	r3, [r7, #32]
 800739a:	e00c      	b.n	80073b6 <tcp_connect+0x1da>
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	68da      	ldr	r2, [r3, #12]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d104      	bne.n	80073b0 <tcp_connect+0x1d4>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	68da      	ldr	r2, [r3, #12]
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	60da      	str	r2, [r3, #12]
 80073ae:	e005      	b.n	80073bc <tcp_connect+0x1e0>
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	623b      	str	r3, [r7, #32]
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1ef      	bne.n	800739c <tcp_connect+0x1c0>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80073c2:	4b10      	ldr	r3, [pc, #64]	; (8007404 <tcp_connect+0x228>)
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	60da      	str	r2, [r3, #12]
 80073ca:	4a0e      	ldr	r2, [pc, #56]	; (8007404 <tcp_connect+0x228>)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	f005 ff04 	bl	800d1dc <tcp_timer_needed>
 80073d4:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <tcp_connect+0x22c>)
 80073d6:	2201      	movs	r2, #1
 80073d8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f004 fe4c 	bl	800c078 <tcp_output>
  }
  return ret;
 80073e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3728      	adds	r7, #40	; 0x28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	080161b0 	.word	0x080161b0
 80073f0:	0801647c 	.word	0x0801647c
 80073f4:	080161e4 	.word	0x080161e4
 80073f8:	08016498 	.word	0x08016498
 80073fc:	080164b4 	.word	0x080164b4
 8007400:	200022cc 	.word	0x200022cc
 8007404:	200022c0 	.word	0x200022c0
 8007408:	200022bc 	.word	0x200022bc

0800740c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800740c:	b5b0      	push	{r4, r5, r7, lr}
 800740e:	b090      	sub	sp, #64	; 0x40
 8007410:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007418:	4ba1      	ldr	r3, [pc, #644]	; (80076a0 <tcp_slowtmr+0x294>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3301      	adds	r3, #1
 800741e:	4aa0      	ldr	r2, [pc, #640]	; (80076a0 <tcp_slowtmr+0x294>)
 8007420:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007422:	4ba0      	ldr	r3, [pc, #640]	; (80076a4 <tcp_slowtmr+0x298>)
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	3301      	adds	r3, #1
 8007428:	b2da      	uxtb	r2, r3
 800742a:	4b9e      	ldr	r3, [pc, #632]	; (80076a4 <tcp_slowtmr+0x298>)
 800742c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800742e:	2300      	movs	r3, #0
 8007430:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007432:	4b9d      	ldr	r3, [pc, #628]	; (80076a8 <tcp_slowtmr+0x29c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007438:	e2c3      	b.n	80079c2 <tcp_slowtmr+0x5b6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED", pcb->state != CLOSED);
 800743a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743c:	7d1b      	ldrb	r3, [r3, #20]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10b      	bne.n	800745a <tcp_slowtmr+0x4e>
 8007442:	4b9a      	ldr	r3, [pc, #616]	; (80076ac <tcp_slowtmr+0x2a0>)
 8007444:	f240 42c2 	movw	r2, #1218	; 0x4c2
 8007448:	4999      	ldr	r1, [pc, #612]	; (80076b0 <tcp_slowtmr+0x2a4>)
 800744a:	489a      	ldr	r0, [pc, #616]	; (80076b4 <tcp_slowtmr+0x2a8>)
 800744c:	f00c fb0c 	bl	8013a68 <iprintf>
 8007450:	2000      	movs	r0, #0
 8007452:	f00c fc0b 	bl	8013c6c <fflush>
 8007456:	f00c fb50 	bl	8013afa <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN", pcb->state != LISTEN);
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745c:	7d1b      	ldrb	r3, [r3, #20]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d10b      	bne.n	800747a <tcp_slowtmr+0x6e>
 8007462:	4b92      	ldr	r3, [pc, #584]	; (80076ac <tcp_slowtmr+0x2a0>)
 8007464:	f240 42c3 	movw	r2, #1219	; 0x4c3
 8007468:	4993      	ldr	r1, [pc, #588]	; (80076b8 <tcp_slowtmr+0x2ac>)
 800746a:	4892      	ldr	r0, [pc, #584]	; (80076b4 <tcp_slowtmr+0x2a8>)
 800746c:	f00c fafc 	bl	8013a68 <iprintf>
 8007470:	2000      	movs	r0, #0
 8007472:	f00c fbfb 	bl	8013c6c <fflush>
 8007476:	f00c fb40 	bl	8013afa <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747c:	7d1b      	ldrb	r3, [r3, #20]
 800747e:	2b0a      	cmp	r3, #10
 8007480:	d10b      	bne.n	800749a <tcp_slowtmr+0x8e>
 8007482:	4b8a      	ldr	r3, [pc, #552]	; (80076ac <tcp_slowtmr+0x2a0>)
 8007484:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8007488:	498c      	ldr	r1, [pc, #560]	; (80076bc <tcp_slowtmr+0x2b0>)
 800748a:	488a      	ldr	r0, [pc, #552]	; (80076b4 <tcp_slowtmr+0x2a8>)
 800748c:	f00c faec 	bl	8013a68 <iprintf>
 8007490:	2000      	movs	r0, #0
 8007492:	f00c fbeb 	bl	8013c6c <fflush>
 8007496:	f00c fb30 	bl	8013afa <abort>
    if (pcb->last_timer == tcp_timer_ctr) {
 800749a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749c:	7f9a      	ldrb	r2, [r3, #30]
 800749e:	4b81      	ldr	r3, [pc, #516]	; (80076a4 <tcp_slowtmr+0x298>)
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d105      	bne.n	80074b2 <tcp_slowtmr+0xa6>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80074a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a8:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80074aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80074b0:	e287      	b.n	80079c2 <tcp_slowtmr+0x5b6>
    }
    pcb->last_timer = tcp_timer_ctr;
 80074b2:	4b7c      	ldr	r3, [pc, #496]	; (80076a4 <tcp_slowtmr+0x298>)
 80074b4:	781a      	ldrb	r2, [r3, #0]
 80074b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b8:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80074c0:	2300      	movs	r3, #0
 80074c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80074c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c8:	7d1b      	ldrb	r3, [r3, #20]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d10a      	bne.n	80074e4 <tcp_slowtmr+0xd8>
 80074ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074d4:	2b05      	cmp	r3, #5
 80074d6:	d905      	bls.n	80074e4 <tcp_slowtmr+0xd8>
      ++pcb_remove;
 80074d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074dc:	3301      	adds	r3, #1
 80074de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 80074e2:	e129      	b.n	8007738 <tcp_slowtmr+0x32c>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074ea:	2b0b      	cmp	r3, #11
 80074ec:	d905      	bls.n	80074fa <tcp_slowtmr+0xee>
      ++pcb_remove;
 80074ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074f2:	3301      	adds	r3, #1
 80074f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80074f8:	e11e      	b.n	8007738 <tcp_slowtmr+0x32c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007500:	2b00      	cmp	r3, #0
 8007502:	d07f      	beq.n	8007604 <tcp_slowtmr+0x1f8>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00b      	beq.n	8007524 <tcp_slowtmr+0x118>
 800750c:	4b67      	ldr	r3, [pc, #412]	; (80076ac <tcp_slowtmr+0x2a0>)
 800750e:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 8007512:	496b      	ldr	r1, [pc, #428]	; (80076c0 <tcp_slowtmr+0x2b4>)
 8007514:	4867      	ldr	r0, [pc, #412]	; (80076b4 <tcp_slowtmr+0x2a8>)
 8007516:	f00c faa7 	bl	8013a68 <iprintf>
 800751a:	2000      	movs	r0, #0
 800751c:	f00c fba6 	bl	8013c6c <fflush>
 8007520:	f00c faeb 	bl	8013afa <abort>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10b      	bne.n	8007544 <tcp_slowtmr+0x138>
 800752c:	4b5f      	ldr	r3, [pc, #380]	; (80076ac <tcp_slowtmr+0x2a0>)
 800752e:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8007532:	4964      	ldr	r1, [pc, #400]	; (80076c4 <tcp_slowtmr+0x2b8>)
 8007534:	485f      	ldr	r0, [pc, #380]	; (80076b4 <tcp_slowtmr+0x2a8>)
 8007536:	f00c fa97 	bl	8013a68 <iprintf>
 800753a:	2000      	movs	r0, #0
 800753c:	f00c fb96 	bl	8013c6c <fflush>
 8007540:	f00c fadb 	bl	8013afa <abort>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007546:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800754a:	2b0b      	cmp	r3, #11
 800754c:	d905      	bls.n	800755a <tcp_slowtmr+0x14e>
          ++pcb_remove; /* max probes reached */
 800754e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007552:	3301      	adds	r3, #1
 8007554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007558:	e0ee      	b.n	8007738 <tcp_slowtmr+0x32c>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007560:	3b01      	subs	r3, #1
 8007562:	4a59      	ldr	r2, [pc, #356]	; (80076c8 <tcp_slowtmr+0x2bc>)
 8007564:	5cd3      	ldrb	r3, [r2, r3]
 8007566:	77fb      	strb	r3, [r7, #31]
          if (pcb->persist_cnt < backoff_cnt) {
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800756e:	7ffa      	ldrb	r2, [r7, #31]
 8007570:	429a      	cmp	r2, r3
 8007572:	d907      	bls.n	8007584 <tcp_slowtmr+0x178>
            pcb->persist_cnt++;
 8007574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007576:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800757a:	3301      	adds	r3, #1
 800757c:	b2da      	uxtb	r2, r3
 800757e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007580:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007586:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800758a:	7ffa      	ldrb	r2, [r7, #31]
 800758c:	429a      	cmp	r2, r3
 800758e:	f200 80d3 	bhi.w	8007738 <tcp_slowtmr+0x32c>
            int next_slot = 1; /* increment timer to next slot */
 8007592:	2301      	movs	r3, #1
 8007594:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007598:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800759c:	2b00      	cmp	r3, #0
 800759e:	d108      	bne.n	80075b2 <tcp_slowtmr+0x1a6>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80075a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075a2:	f005 fd49 	bl	800d038 <tcp_zero_window_probe>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d014      	beq.n	80075d6 <tcp_slowtmr+0x1ca>
                next_slot = 0; /* try probe again with current slot */
 80075ac:	2300      	movs	r3, #0
 80075ae:	623b      	str	r3, [r7, #32]
 80075b0:	e011      	b.n	80075d6 <tcp_slowtmr+0x1ca>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80075b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80075b8:	4619      	mov	r1, r3
 80075ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075bc:	f004 fa8e 	bl	800badc <tcp_split_unsent_seg>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d107      	bne.n	80075d6 <tcp_slowtmr+0x1ca>
                if (tcp_output(pcb) == ERR_OK) {
 80075c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075c8:	f004 fd56 	bl	800c078 <tcp_output>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <tcp_slowtmr+0x1ca>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 80ad 	beq.w	8007738 <tcp_slowtmr+0x32c>
              pcb->persist_cnt = 0;
 80075de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80075e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80075ec:	2b06      	cmp	r3, #6
 80075ee:	f200 80a3 	bhi.w	8007738 <tcp_slowtmr+0x32c>
                pcb->persist_backoff++;
 80075f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80075f8:	3301      	adds	r3, #1
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007602:	e099      	b.n	8007738 <tcp_slowtmr+0x32c>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007606:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800760a:	2b00      	cmp	r3, #0
 800760c:	db0f      	blt.n	800762e <tcp_slowtmr+0x222>
 800760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007610:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007614:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007618:	4293      	cmp	r3, r2
 800761a:	d008      	beq.n	800762e <tcp_slowtmr+0x222>
          ++pcb->rtime;
 800761c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007622:	b29b      	uxth	r3, r3
 8007624:	3301      	adds	r3, #1
 8007626:	b29b      	uxth	r3, r3
 8007628:	b21a      	sxth	r2, r3
 800762a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762c:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800762e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007630:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007636:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800763a:	429a      	cmp	r2, r3
 800763c:	db7c      	blt.n	8007738 <tcp_slowtmr+0x32c>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800763e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007640:	f005 f85a 	bl	800c6f8 <tcp_rexmit_rto_prepare>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d007      	beq.n	800765a <tcp_slowtmr+0x24e>
 800764a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800764e:	2b00      	cmp	r3, #0
 8007650:	d172      	bne.n	8007738 <tcp_slowtmr+0x32c>
 8007652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007656:	2b00      	cmp	r3, #0
 8007658:	d06e      	beq.n	8007738 <tcp_slowtmr+0x32c>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765c:	7d1b      	ldrb	r3, [r3, #20]
 800765e:	2b02      	cmp	r3, #2
 8007660:	d03b      	beq.n	80076da <tcp_slowtmr+0x2ce>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007664:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007668:	2b0c      	cmp	r3, #12
 800766a:	bf28      	it	cs
 800766c:	230c      	movcs	r3, #12
 800766e:	77bb      	strb	r3, [r7, #30]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007672:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007676:	10db      	asrs	r3, r3, #3
 8007678:	b21b      	sxth	r3, r3
 800767a:	461a      	mov	r2, r3
 800767c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007682:	4413      	add	r3, r2
 8007684:	7fba      	ldrb	r2, [r7, #30]
 8007686:	4911      	ldr	r1, [pc, #68]	; (80076cc <tcp_slowtmr+0x2c0>)
 8007688:	5c8a      	ldrb	r2, [r1, r2]
 800768a:	4093      	lsls	r3, r2
 800768c:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007694:	4293      	cmp	r3, r2
 8007696:	dc1b      	bgt.n	80076d0 <tcp_slowtmr+0x2c4>
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	b21a      	sxth	r2, r3
 800769c:	e01a      	b.n	80076d4 <tcp_slowtmr+0x2c8>
 800769e:	bf00      	nop
 80076a0:	200022c4 	.word	0x200022c4
 80076a4:	200006fa 	.word	0x200006fa
 80076a8:	200022c0 	.word	0x200022c0
 80076ac:	080161b0 	.word	0x080161b0
 80076b0:	080164e4 	.word	0x080164e4
 80076b4:	080161e4 	.word	0x080161e4
 80076b8:	08016510 	.word	0x08016510
 80076bc:	0801653c 	.word	0x0801653c
 80076c0:	08016568 	.word	0x08016568
 80076c4:	0801659c 	.word	0x0801659c
 80076c8:	08017b18 	.word	0x08017b18
 80076cc:	08017b08 	.word	0x08017b08
 80076d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80076d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80076da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076dc:	2200      	movs	r2, #0
 80076de:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80076e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80076ec:	4293      	cmp	r3, r2
 80076ee:	bf28      	it	cs
 80076f0:	4613      	movcs	r3, r2
 80076f2:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 80076f4:	8afb      	ldrh	r3, [r7, #22]
 80076f6:	085b      	lsrs	r3, r3, #1
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007702:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	b29b      	uxth	r3, r3
 800770e:	429a      	cmp	r2, r3
 8007710:	d206      	bcs.n	8007720 <tcp_slowtmr+0x314>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007714:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007722:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007726:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	2200      	movs	r2, #0
 800772e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007732:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007734:	f005 f85e 	bl	800c7f4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773a:	7d1b      	ldrb	r3, [r3, #20]
 800773c:	2b06      	cmp	r3, #6
 800773e:	d111      	bne.n	8007764 <tcp_slowtmr+0x358>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007742:	8b5b      	ldrh	r3, [r3, #26]
 8007744:	f003 0310 	and.w	r3, r3, #16
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00b      	beq.n	8007764 <tcp_slowtmr+0x358>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800774c:	4ba2      	ldr	r3, [pc, #648]	; (80079d8 <tcp_slowtmr+0x5cc>)
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b28      	cmp	r3, #40	; 0x28
 8007758:	d904      	bls.n	8007764 <tcp_slowtmr+0x358>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800775a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800775e:	3301      	adds	r3, #1
 8007760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007766:	7a5b      	ldrb	r3, [r3, #9]
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b00      	cmp	r3, #0
 800776e:	d04c      	beq.n	800780a <tcp_slowtmr+0x3fe>
        ((pcb->state == ESTABLISHED) ||
 8007770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007772:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007774:	2b04      	cmp	r3, #4
 8007776:	d003      	beq.n	8007780 <tcp_slowtmr+0x374>
         (pcb->state == CLOSE_WAIT))) {
 8007778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800777c:	2b07      	cmp	r3, #7
 800777e:	d144      	bne.n	800780a <tcp_slowtmr+0x3fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007780:	4b95      	ldr	r3, [pc, #596]	; (80079d8 <tcp_slowtmr+0x5cc>)
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007790:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8007794:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007798:	4990      	ldr	r1, [pc, #576]	; (80079dc <tcp_slowtmr+0x5d0>)
 800779a:	fba1 1303 	umull	r1, r3, r1, r3
 800779e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d90a      	bls.n	80077ba <tcp_slowtmr+0x3ae>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80077a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077a8:	3301      	adds	r3, #1
 80077aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80077ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80077b2:	3301      	adds	r3, #1
 80077b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80077b8:	e027      	b.n	800780a <tcp_slowtmr+0x3fe>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077ba:	4b87      	ldr	r3, [pc, #540]	; (80079d8 <tcp_slowtmr+0x5cc>)
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80077c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80077ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077cc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80077d0:	4618      	mov	r0, r3
 80077d2:	4b83      	ldr	r3, [pc, #524]	; (80079e0 <tcp_slowtmr+0x5d4>)
 80077d4:	fb03 f300 	mul.w	r3, r3, r0
 80077d8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80077da:	4980      	ldr	r1, [pc, #512]	; (80079dc <tcp_slowtmr+0x5d0>)
 80077dc:	fba1 1303 	umull	r1, r3, r1, r3
 80077e0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d911      	bls.n	800780a <tcp_slowtmr+0x3fe>
        err = tcp_keepalive(pcb);
 80077e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077e8:	f005 fbe0 	bl	800cfac <tcp_keepalive>
 80077ec:	4603      	mov	r3, r0
 80077ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80077f2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d107      	bne.n	800780a <tcp_slowtmr+0x3fe>
          pcb->keep_cnt_sent++;
 80077fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007800:	3301      	adds	r3, #1
 8007802:	b2da      	uxtb	r2, r3
 8007804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007806:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800780a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800780e:	2b00      	cmp	r3, #0
 8007810:	d011      	beq.n	8007836 <tcp_slowtmr+0x42a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007812:	4b71      	ldr	r3, [pc, #452]	; (80079d8 <tcp_slowtmr+0x5cc>)
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	1ad2      	subs	r2, r2, r3
 800781c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007822:	4619      	mov	r1, r3
 8007824:	460b      	mov	r3, r1
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	440b      	add	r3, r1
 800782a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800782c:	429a      	cmp	r2, r3
 800782e:	d302      	bcc.n	8007836 <tcp_slowtmr+0x42a>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007830:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007832:	f000 ff11 	bl	8008658 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007838:	7d1b      	ldrb	r3, [r3, #20]
 800783a:	2b03      	cmp	r3, #3
 800783c:	d10b      	bne.n	8007856 <tcp_slowtmr+0x44a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800783e:	4b66      	ldr	r3, [pc, #408]	; (80079d8 <tcp_slowtmr+0x5cc>)
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	2b28      	cmp	r3, #40	; 0x28
 800784a:	d904      	bls.n	8007856 <tcp_slowtmr+0x44a>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800784c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007850:	3301      	adds	r3, #1
 8007852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	7d1b      	ldrb	r3, [r3, #20]
 800785a:	2b09      	cmp	r3, #9
 800785c:	d10b      	bne.n	8007876 <tcp_slowtmr+0x46a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800785e:	4b5e      	ldr	r3, [pc, #376]	; (80079d8 <tcp_slowtmr+0x5cc>)
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	2bf0      	cmp	r3, #240	; 0xf0
 800786a:	d904      	bls.n	8007876 <tcp_slowtmr+0x46a>
        ++pcb_remove;
 800786c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007870:	3301      	adds	r3, #1
 8007872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800787a:	2b00      	cmp	r3, #0
 800787c:	d06a      	beq.n	8007954 <tcp_slowtmr+0x548>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007884:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007886:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007888:	f000 fd0c 	bl	80082a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	2b00      	cmp	r3, #0
 8007890:	d015      	beq.n	80078be <tcp_slowtmr+0x4b2>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007892:	4b54      	ldr	r3, [pc, #336]	; (80079e4 <tcp_slowtmr+0x5d8>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007898:	429a      	cmp	r2, r3
 800789a:	d10b      	bne.n	80078b4 <tcp_slowtmr+0x4a8>
 800789c:	4b52      	ldr	r3, [pc, #328]	; (80079e8 <tcp_slowtmr+0x5dc>)
 800789e:	f240 5271 	movw	r2, #1393	; 0x571
 80078a2:	4952      	ldr	r1, [pc, #328]	; (80079ec <tcp_slowtmr+0x5e0>)
 80078a4:	4852      	ldr	r0, [pc, #328]	; (80079f0 <tcp_slowtmr+0x5e4>)
 80078a6:	f00c f8df 	bl	8013a68 <iprintf>
 80078aa:	2000      	movs	r0, #0
 80078ac:	f00c f9de 	bl	8013c6c <fflush>
 80078b0:	f00c f923 	bl	8013afa <abort>
        prev->next = pcb->next;
 80078b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	60da      	str	r2, [r3, #12]
 80078bc:	e014      	b.n	80078e8 <tcp_slowtmr+0x4dc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80078be:	4b49      	ldr	r3, [pc, #292]	; (80079e4 <tcp_slowtmr+0x5d8>)
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d00b      	beq.n	80078e0 <tcp_slowtmr+0x4d4>
 80078c8:	4b47      	ldr	r3, [pc, #284]	; (80079e8 <tcp_slowtmr+0x5dc>)
 80078ca:	f240 5275 	movw	r2, #1397	; 0x575
 80078ce:	4949      	ldr	r1, [pc, #292]	; (80079f4 <tcp_slowtmr+0x5e8>)
 80078d0:	4847      	ldr	r0, [pc, #284]	; (80079f0 <tcp_slowtmr+0x5e4>)
 80078d2:	f00c f8c9 	bl	8013a68 <iprintf>
 80078d6:	2000      	movs	r0, #0
 80078d8:	f00c f9c8 	bl	8013c6c <fflush>
 80078dc:	f00c f90d 	bl	8013afa <abort>
        tcp_active_pcbs = pcb->next;
 80078e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	4a3f      	ldr	r2, [pc, #252]	; (80079e4 <tcp_slowtmr+0x5d8>)
 80078e6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80078e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d013      	beq.n	8007918 <tcp_slowtmr+0x50c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80078f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80078f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80078f8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80078fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fc:	3304      	adds	r3, #4
 80078fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007900:	8ad2      	ldrh	r2, [r2, #22]
 8007902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007904:	8b09      	ldrh	r1, [r1, #24]
 8007906:	9102      	str	r1, [sp, #8]
 8007908:	9201      	str	r2, [sp, #4]
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	462b      	mov	r3, r5
 800790e:	4622      	mov	r2, r4
 8007910:	4601      	mov	r1, r0
 8007912:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007914:	f005 fa98 	bl	800ce48 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 800791e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007920:	7d1b      	ldrb	r3, [r3, #20]
 8007922:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 8007924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007926:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 8007928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fe ff9e 	bl	8006870 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007934:	4b30      	ldr	r3, [pc, #192]	; (80079f8 <tcp_slowtmr+0x5ec>)
 8007936:	2200      	movs	r2, #0
 8007938:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d004      	beq.n	800794a <tcp_slowtmr+0x53e>
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	f06f 010c 	mvn.w	r1, #12
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800794a:	4b2b      	ldr	r3, [pc, #172]	; (80079f8 <tcp_slowtmr+0x5ec>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d037      	beq.n	80079c2 <tcp_slowtmr+0x5b6>
        goto tcp_slowtmr_start;
 8007952:	e56c      	b.n	800742e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007956:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800795e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007960:	7f1b      	ldrb	r3, [r3, #28]
 8007962:	3301      	adds	r3, #1
 8007964:	b2da      	uxtb	r2, r3
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007968:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796c:	7f1a      	ldrb	r2, [r3, #28]
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007970:	7f5b      	ldrb	r3, [r3, #29]
 8007972:	429a      	cmp	r2, r3
 8007974:	d325      	bcc.n	80079c2 <tcp_slowtmr+0x5b6>
        prev->polltmr = 0;
 8007976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007978:	2200      	movs	r2, #0
 800797a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800797c:	4b1e      	ldr	r3, [pc, #120]	; (80079f8 <tcp_slowtmr+0x5ec>)
 800797e:	2200      	movs	r2, #0
 8007980:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00b      	beq.n	80079a4 <tcp_slowtmr+0x598>
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007994:	6912      	ldr	r2, [r2, #16]
 8007996:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007998:	4610      	mov	r0, r2
 800799a:	4798      	blx	r3
 800799c:	4603      	mov	r3, r0
 800799e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80079a2:	e002      	b.n	80079aa <tcp_slowtmr+0x59e>
 80079a4:	2300      	movs	r3, #0
 80079a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80079aa:	4b13      	ldr	r3, [pc, #76]	; (80079f8 <tcp_slowtmr+0x5ec>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d000      	beq.n	80079b4 <tcp_slowtmr+0x5a8>
          goto tcp_slowtmr_start;
 80079b2:	e53c      	b.n	800742e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80079b4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d102      	bne.n	80079c2 <tcp_slowtmr+0x5b6>
          tcp_output(prev);
 80079bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079be:	f004 fb5b 	bl	800c078 <tcp_output>
  while (pcb != NULL) {
 80079c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f47f ad38 	bne.w	800743a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80079ca:	2300      	movs	r3, #0
 80079cc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80079ce:	4b0b      	ldr	r3, [pc, #44]	; (80079fc <tcp_slowtmr+0x5f0>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80079d4:	e076      	b.n	8007ac4 <tcp_slowtmr+0x6b8>
 80079d6:	bf00      	nop
 80079d8:	200022c4 	.word	0x200022c4
 80079dc:	10624dd3 	.word	0x10624dd3
 80079e0:	000124f8 	.word	0x000124f8
 80079e4:	200022c0 	.word	0x200022c0
 80079e8:	080161b0 	.word	0x080161b0
 80079ec:	080165d4 	.word	0x080165d4
 80079f0:	080161e4 	.word	0x080161e4
 80079f4:	08016600 	.word	0x08016600
 80079f8:	200022bc 	.word	0x200022bc
 80079fc:	200022d0 	.word	0x200022d0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a02:	7d1b      	ldrb	r3, [r3, #20]
 8007a04:	2b0a      	cmp	r3, #10
 8007a06:	d00b      	beq.n	8007a20 <tcp_slowtmr+0x614>
 8007a08:	4b32      	ldr	r3, [pc, #200]	; (8007ad4 <tcp_slowtmr+0x6c8>)
 8007a0a:	f240 52a5 	movw	r2, #1445	; 0x5a5
 8007a0e:	4932      	ldr	r1, [pc, #200]	; (8007ad8 <tcp_slowtmr+0x6cc>)
 8007a10:	4832      	ldr	r0, [pc, #200]	; (8007adc <tcp_slowtmr+0x6d0>)
 8007a12:	f00c f829 	bl	8013a68 <iprintf>
 8007a16:	2000      	movs	r0, #0
 8007a18:	f00c f928 	bl	8013c6c <fflush>
 8007a1c:	f00c f86d 	bl	8013afa <abort>
    pcb_remove = 0;
 8007a20:	2300      	movs	r3, #0
 8007a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007a26:	4b2e      	ldr	r3, [pc, #184]	; (8007ae0 <tcp_slowtmr+0x6d4>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	2bf0      	cmp	r3, #240	; 0xf0
 8007a32:	d904      	bls.n	8007a3e <tcp_slowtmr+0x632>
      ++pcb_remove;
 8007a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a38:	3301      	adds	r3, #1
 8007a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d039      	beq.n	8007aba <tcp_slowtmr+0x6ae>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007a46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a48:	f000 fc2c 	bl	80082a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d015      	beq.n	8007a7e <tcp_slowtmr+0x672>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007a52:	4b24      	ldr	r3, [pc, #144]	; (8007ae4 <tcp_slowtmr+0x6d8>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d10b      	bne.n	8007a74 <tcp_slowtmr+0x668>
 8007a5c:	4b1d      	ldr	r3, [pc, #116]	; (8007ad4 <tcp_slowtmr+0x6c8>)
 8007a5e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007a62:	4921      	ldr	r1, [pc, #132]	; (8007ae8 <tcp_slowtmr+0x6dc>)
 8007a64:	481d      	ldr	r0, [pc, #116]	; (8007adc <tcp_slowtmr+0x6d0>)
 8007a66:	f00b ffff 	bl	8013a68 <iprintf>
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	f00c f8fe 	bl	8013c6c <fflush>
 8007a70:	f00c f843 	bl	8013afa <abort>
        prev->next = pcb->next;
 8007a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	60da      	str	r2, [r3, #12]
 8007a7c:	e014      	b.n	8007aa8 <tcp_slowtmr+0x69c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007a7e:	4b19      	ldr	r3, [pc, #100]	; (8007ae4 <tcp_slowtmr+0x6d8>)
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d00b      	beq.n	8007aa0 <tcp_slowtmr+0x694>
 8007a88:	4b12      	ldr	r3, [pc, #72]	; (8007ad4 <tcp_slowtmr+0x6c8>)
 8007a8a:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8007a8e:	4917      	ldr	r1, [pc, #92]	; (8007aec <tcp_slowtmr+0x6e0>)
 8007a90:	4812      	ldr	r0, [pc, #72]	; (8007adc <tcp_slowtmr+0x6d0>)
 8007a92:	f00b ffe9 	bl	8013a68 <iprintf>
 8007a96:	2000      	movs	r0, #0
 8007a98:	f00c f8e8 	bl	8013c6c <fflush>
 8007a9c:	f00c f82d 	bl	8013afa <abort>
        tcp_tw_pcbs = pcb->next;
 8007aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	4a0f      	ldr	r2, [pc, #60]	; (8007ae4 <tcp_slowtmr+0x6d8>)
 8007aa6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007ab2:	6838      	ldr	r0, [r7, #0]
 8007ab4:	f7fe fedc 	bl	8006870 <tcp_free>
 8007ab8:	e004      	b.n	8007ac4 <tcp_slowtmr+0x6b8>
    } else {
      prev = pcb;
 8007aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abc:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d19a      	bne.n	8007a00 <tcp_slowtmr+0x5f4>
    }
  }
}
 8007aca:	bf00      	nop
 8007acc:	3730      	adds	r7, #48	; 0x30
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	080161b0 	.word	0x080161b0
 8007ad8:	0801662c 	.word	0x0801662c
 8007adc:	080161e4 	.word	0x080161e4
 8007ae0:	200022c4 	.word	0x200022c4
 8007ae4:	200022d0 	.word	0x200022d0
 8007ae8:	0801665c 	.word	0x0801665c
 8007aec:	08016684 	.word	0x08016684

08007af0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007af6:	4b2d      	ldr	r3, [pc, #180]	; (8007bac <tcp_fasttmr+0xbc>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	3301      	adds	r3, #1
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	4b2b      	ldr	r3, [pc, #172]	; (8007bac <tcp_fasttmr+0xbc>)
 8007b00:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007b02:	4b2b      	ldr	r3, [pc, #172]	; (8007bb0 <tcp_fasttmr+0xc0>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007b08:	e048      	b.n	8007b9c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	7f9a      	ldrb	r2, [r3, #30]
 8007b0e:	4b27      	ldr	r3, [pc, #156]	; (8007bac <tcp_fasttmr+0xbc>)
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d03f      	beq.n	8007b96 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007b16:	4b25      	ldr	r3, [pc, #148]	; (8007bac <tcp_fasttmr+0xbc>)
 8007b18:	781a      	ldrb	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	8b5b      	ldrh	r3, [r3, #26]
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d010      	beq.n	8007b4c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	8b5b      	ldrh	r3, [r3, #26]
 8007b2e:	f043 0302 	orr.w	r3, r3, #2
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f004 fa9d 	bl	800c078 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	8b5b      	ldrh	r3, [r3, #26]
 8007b42:	f023 0303 	bic.w	r3, r3, #3
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	8b5b      	ldrh	r3, [r3, #26]
 8007b50:	f003 0308 	and.w	r3, r3, #8
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d009      	beq.n	8007b6c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	8b5b      	ldrh	r3, [r3, #26]
 8007b5c:	f023 0308 	bic.w	r3, r3, #8
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7ff f838 	bl	8006bdc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00a      	beq.n	8007b90 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007b7a:	4b0e      	ldr	r3, [pc, #56]	; (8007bb4 <tcp_fasttmr+0xc4>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f819 	bl	8007bb8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007b86:	4b0b      	ldr	r3, [pc, #44]	; (8007bb4 <tcp_fasttmr+0xc4>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d000      	beq.n	8007b90 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007b8e:	e7b8      	b.n	8007b02 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	607b      	str	r3, [r7, #4]
 8007b94:	e002      	b.n	8007b9c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1b3      	bne.n	8007b0a <tcp_fasttmr+0x1a>
    }
  }
}
 8007ba2:	bf00      	nop
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	200006fa 	.word	0x200006fa
 8007bb0:	200022c0 	.word	0x200022c0
 8007bb4:	200022bc 	.word	0x200022bc

08007bb8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007bb8:	b590      	push	{r4, r7, lr}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d109      	bne.n	8007bda <tcp_process_refused_data+0x22>
 8007bc6:	4b38      	ldr	r3, [pc, #224]	; (8007ca8 <tcp_process_refused_data+0xf0>)
 8007bc8:	f240 620d 	movw	r2, #1549	; 0x60d
 8007bcc:	4937      	ldr	r1, [pc, #220]	; (8007cac <tcp_process_refused_data+0xf4>)
 8007bce:	4838      	ldr	r0, [pc, #224]	; (8007cb0 <tcp_process_refused_data+0xf8>)
 8007bd0:	f7fa f923 	bl	8001e1a <lwip_win32_platform_diag>
 8007bd4:	f06f 030f 	mvn.w	r3, #15
 8007bd8:	e061      	b.n	8007c9e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bde:	7b5b      	ldrb	r3, [r3, #13]
 8007be0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007be6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00b      	beq.n	8007c10 <tcp_process_refused_data+0x58>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6918      	ldr	r0, [r3, #16]
 8007c02:	2300      	movs	r3, #0
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	47a0      	blx	r4
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	73fb      	strb	r3, [r7, #15]
 8007c0e:	e007      	b.n	8007c20 <tcp_process_refused_data+0x68>
 8007c10:	2300      	movs	r3, #0
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	6879      	ldr	r1, [r7, #4]
 8007c16:	2000      	movs	r0, #0
 8007c18:	f000 f8aa 	bl	8007d70 <tcp_recv_null>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d12b      	bne.n	8007c80 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007c28:	7bbb      	ldrb	r3, [r7, #14]
 8007c2a:	f003 0320 	and.w	r3, r3, #32
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d034      	beq.n	8007c9c <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c36:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d005      	beq.n	8007c4a <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c42:	3301      	adds	r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00b      	beq.n	8007c6c <tcp_process_refused_data+0xb4>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6918      	ldr	r0, [r3, #16]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	2200      	movs	r2, #0
 8007c62:	6879      	ldr	r1, [r7, #4]
 8007c64:	47a0      	blx	r4
 8007c66:	4603      	mov	r3, r0
 8007c68:	73fb      	strb	r3, [r7, #15]
 8007c6a:	e001      	b.n	8007c70 <tcp_process_refused_data+0xb8>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c74:	f113 0f0d 	cmn.w	r3, #13
 8007c78:	d110      	bne.n	8007c9c <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8007c7a:	f06f 030c 	mvn.w	r3, #12
 8007c7e:	e00e      	b.n	8007c9e <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8007c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c84:	f113 0f0d 	cmn.w	r3, #13
 8007c88:	d102      	bne.n	8007c90 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007c8a:	f06f 030c 	mvn.w	r3, #12
 8007c8e:	e006      	b.n	8007c9e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007c96:	f06f 0304 	mvn.w	r3, #4
 8007c9a:	e000      	b.n	8007c9e <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd90      	pop	{r4, r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	080161b0 	.word	0x080161b0
 8007cac:	080166ac 	.word	0x080166ac
 8007cb0:	080161e4 	.word	0x080161e4

08007cb4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007cbc:	e007      	b.n	8007cce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f809 	bl	8007cdc <tcp_seg_free>
    seg = next;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1f4      	bne.n	8007cbe <tcp_segs_free+0xa>
  }
}
 8007cd4:	bf00      	nop
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00c      	beq.n	8007d04 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d004      	beq.n	8007cfc <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe f9a0 	bl	800603c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007cfc:	6879      	ldr	r1, [r7, #4]
 8007cfe:	2002      	movs	r0, #2
 8007d00:	f7fd fbc6 	bl	8005490 <memp_free>
  }
}
 8007d04:	bf00      	nop
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10b      	bne.n	8007d32 <tcp_seg_copy+0x26>
 8007d1a:	4b12      	ldr	r3, [pc, #72]	; (8007d64 <tcp_seg_copy+0x58>)
 8007d1c:	f240 6286 	movw	r2, #1670	; 0x686
 8007d20:	4911      	ldr	r1, [pc, #68]	; (8007d68 <tcp_seg_copy+0x5c>)
 8007d22:	4812      	ldr	r0, [pc, #72]	; (8007d6c <tcp_seg_copy+0x60>)
 8007d24:	f00b fea0 	bl	8013a68 <iprintf>
 8007d28:	2000      	movs	r0, #0
 8007d2a:	f00b ff9f 	bl	8013c6c <fflush>
 8007d2e:	f00b fee4 	bl	8013afa <abort>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007d32:	2002      	movs	r0, #2
 8007d34:	f7fd fb3c 	bl	80053b0 <memp_malloc>
 8007d38:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <tcp_seg_copy+0x38>
    return NULL;
 8007d40:	2300      	movs	r3, #0
 8007d42:	e00a      	b.n	8007d5a <tcp_seg_copy+0x4e>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007d44:	2214      	movs	r2, #20
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f00c f88f 	bl	8013e6c <memcpy>
  pbuf_ref(cseg->p);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fe fa0c 	bl	8006170 <pbuf_ref>
  return cseg;
 8007d58:	68fb      	ldr	r3, [r7, #12]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	080161b0 	.word	0x080161b0
 8007d68:	080166f0 	.word	0x080166f0
 8007d6c:	080161e4 	.word	0x080161e4

08007d70 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
 8007d7c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d109      	bne.n	8007d98 <tcp_recv_null+0x28>
 8007d84:	4b12      	ldr	r3, [pc, #72]	; (8007dd0 <tcp_recv_null+0x60>)
 8007d86:	f240 629c 	movw	r2, #1692	; 0x69c
 8007d8a:	4912      	ldr	r1, [pc, #72]	; (8007dd4 <tcp_recv_null+0x64>)
 8007d8c:	4812      	ldr	r0, [pc, #72]	; (8007dd8 <tcp_recv_null+0x68>)
 8007d8e:	f7fa f844 	bl	8001e1a <lwip_win32_platform_diag>
 8007d92:	f06f 030f 	mvn.w	r3, #15
 8007d96:	e016      	b.n	8007dc6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d009      	beq.n	8007db2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	891b      	ldrh	r3, [r3, #8]
 8007da2:	4619      	mov	r1, r3
 8007da4:	68b8      	ldr	r0, [r7, #8]
 8007da6:	f7ff f97d 	bl	80070a4 <tcp_recved>
    pbuf_free(p);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7fe f946 	bl	800603c <pbuf_free>
 8007db0:	e008      	b.n	8007dc4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d104      	bne.n	8007dc4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007dba:	68b8      	ldr	r0, [r7, #8]
 8007dbc:	f7fe ff7a 	bl	8006cb4 <tcp_close>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	e000      	b.n	8007dc6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	080161b0 	.word	0x080161b0
 8007dd4:	0801670c 	.word	0x0801670c
 8007dd8:	080161e4 	.word	0x080161e4

08007ddc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	4603      	mov	r3, r0
 8007de4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	db01      	blt.n	8007df2 <tcp_kill_prio+0x16>
 8007dee:	79fb      	ldrb	r3, [r7, #7]
 8007df0:	e000      	b.n	8007df4 <tcp_kill_prio+0x18>
 8007df2:	237f      	movs	r3, #127	; 0x7f
 8007df4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007df6:	7afb      	ldrb	r3, [r7, #11]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d034      	beq.n	8007e66 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007dfc:	7afb      	ldrb	r3, [r7, #11]
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007e06:	2300      	movs	r3, #0
 8007e08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e0a:	4b19      	ldr	r3, [pc, #100]	; (8007e70 <tcp_kill_prio+0x94>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	617b      	str	r3, [r7, #20]
 8007e10:	e01f      	b.n	8007e52 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	7d5b      	ldrb	r3, [r3, #21]
 8007e16:	7afa      	ldrb	r2, [r7, #11]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d80c      	bhi.n	8007e36 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007e20:	7afa      	ldrb	r2, [r7, #11]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d112      	bne.n	8007e4c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007e26:	4b13      	ldr	r3, [pc, #76]	; (8007e74 <tcp_kill_prio+0x98>)
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	1ad2      	subs	r2, r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d30a      	bcc.n	8007e4c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007e36:	4b0f      	ldr	r3, [pc, #60]	; (8007e74 <tcp_kill_prio+0x98>)
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	7d5b      	ldrb	r3, [r3, #21]
 8007e4a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	617b      	str	r3, [r7, #20]
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1dc      	bne.n	8007e12 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d004      	beq.n	8007e68 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007e5e:	6938      	ldr	r0, [r7, #16]
 8007e60:	f7ff f816 	bl	8006e90 <tcp_abort>
 8007e64:	e000      	b.n	8007e68 <tcp_kill_prio+0x8c>
    return;
 8007e66:	bf00      	nop
  }
}
 8007e68:	3718      	adds	r7, #24
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	200022c0 	.word	0x200022c0
 8007e74:	200022c4 	.word	0x200022c4

08007e78 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	4603      	mov	r3, r0
 8007e80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	2b08      	cmp	r3, #8
 8007e86:	d00e      	beq.n	8007ea6 <tcp_kill_state+0x2e>
 8007e88:	79fb      	ldrb	r3, [r7, #7]
 8007e8a:	2b09      	cmp	r3, #9
 8007e8c:	d00b      	beq.n	8007ea6 <tcp_kill_state+0x2e>
 8007e8e:	4b1d      	ldr	r3, [pc, #116]	; (8007f04 <tcp_kill_state+0x8c>)
 8007e90:	f240 62e1 	movw	r2, #1761	; 0x6e1
 8007e94:	491c      	ldr	r1, [pc, #112]	; (8007f08 <tcp_kill_state+0x90>)
 8007e96:	481d      	ldr	r0, [pc, #116]	; (8007f0c <tcp_kill_state+0x94>)
 8007e98:	f00b fde6 	bl	8013a68 <iprintf>
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	f00b fee5 	bl	8013c6c <fflush>
 8007ea2:	f00b fe2a 	bl	8013afa <abort>

  inactivity = 0;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007eae:	4b18      	ldr	r3, [pc, #96]	; (8007f10 <tcp_kill_state+0x98>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	617b      	str	r3, [r7, #20]
 8007eb4:	e017      	b.n	8007ee6 <tcp_kill_state+0x6e>
    if (pcb->state == state) {
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	7d1b      	ldrb	r3, [r3, #20]
 8007eba:	79fa      	ldrb	r2, [r7, #7]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d10f      	bne.n	8007ee0 <tcp_kill_state+0x68>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007ec0:	4b14      	ldr	r3, [pc, #80]	; (8007f14 <tcp_kill_state+0x9c>)
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	1ad2      	subs	r2, r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d307      	bcc.n	8007ee0 <tcp_kill_state+0x68>
        inactivity = tcp_ticks - pcb->tmr;
 8007ed0:	4b10      	ldr	r3, [pc, #64]	; (8007f14 <tcp_kill_state+0x9c>)
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	6a1b      	ldr	r3, [r3, #32]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	617b      	str	r3, [r7, #20]
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e4      	bne.n	8007eb6 <tcp_kill_state+0x3e>
      }
    }
  }
  if (inactive != NULL) {
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <tcp_kill_state+0x82>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	6938      	ldr	r0, [r7, #16]
 8007ef6:	f7fe ff09 	bl	8006d0c <tcp_abandon>
  }
}
 8007efa:	bf00      	nop
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	080161b0 	.word	0x080161b0
 8007f08:	08016728 	.word	0x08016728
 8007f0c:	080161e4 	.word	0x080161e4
 8007f10:	200022c0 	.word	0x200022c0
 8007f14:	200022c4 	.word	0x200022c4

08007f18 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007f22:	2300      	movs	r3, #0
 8007f24:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f26:	4b12      	ldr	r3, [pc, #72]	; (8007f70 <tcp_kill_timewait+0x58>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	e012      	b.n	8007f54 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f2e:	4b11      	ldr	r3, [pc, #68]	; (8007f74 <tcp_kill_timewait+0x5c>)
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	1ad2      	subs	r2, r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d307      	bcc.n	8007f4e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007f3e:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <tcp_kill_timewait+0x5c>)
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1e9      	bne.n	8007f2e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007f60:	68b8      	ldr	r0, [r7, #8]
 8007f62:	f7fe ff95 	bl	8006e90 <tcp_abort>
  }
}
 8007f66:	bf00      	nop
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	200022d0 	.word	0x200022d0
 8007f74:	200022c4 	.word	0x200022c4

08007f78 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007f7e:	4b10      	ldr	r3, [pc, #64]	; (8007fc0 <tcp_handle_closepend+0x48>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007f84:	e014      	b.n	8007fb0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	8b5b      	ldrh	r3, [r3, #26]
 8007f90:	f003 0308 	and.w	r3, r3, #8
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d009      	beq.n	8007fac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	8b5b      	ldrh	r3, [r3, #26]
 8007f9c:	f023 0308 	bic.w	r3, r3, #8
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7fe fe18 	bl	8006bdc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1e7      	bne.n	8007f86 <tcp_handle_closepend+0xe>
  }
}
 8007fb6:	bf00      	nop
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	200022c0 	.word	0x200022c0

08007fc4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	4603      	mov	r3, r0
 8007fcc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007fce:	2000      	movs	r0, #0
 8007fd0:	f7fd f9ee 	bl	80053b0 <memp_malloc>
 8007fd4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d14a      	bne.n	8008072 <tcp_alloc+0xae>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007fdc:	f7ff ffcc 	bl	8007f78 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007fe0:	f7ff ff9a 	bl	8007f18 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	f7fd f9e3 	bl	80053b0 <memp_malloc>
 8007fea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d136      	bne.n	8008060 <tcp_alloc+0x9c>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007ff2:	2009      	movs	r0, #9
 8007ff4:	f7ff ff40 	bl	8007e78 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	f7fd f9d9 	bl	80053b0 <memp_malloc>
 8007ffe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d123      	bne.n	800804e <tcp_alloc+0x8a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008006:	2008      	movs	r0, #8
 8008008:	f7ff ff36 	bl	8007e78 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800800c:	2000      	movs	r0, #0
 800800e:	f7fd f9cf 	bl	80053b0 <memp_malloc>
 8008012:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d110      	bne.n	800803c <tcp_alloc+0x78>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800801a:	79fb      	ldrb	r3, [r7, #7]
 800801c:	4618      	mov	r0, r3
 800801e:	f7ff fedd 	bl	8007ddc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008022:	2000      	movs	r0, #0
 8008024:	f7fd f9c4 	bl	80053b0 <memp_malloc>
 8008028:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d005      	beq.n	800803c <tcp_alloc+0x78>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8008030:	4b34      	ldr	r3, [pc, #208]	; (8008104 <tcp_alloc+0x140>)
 8008032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008034:	889a      	ldrh	r2, [r3, #4]
 8008036:	3a01      	subs	r2, #1
 8008038:	b292      	uxth	r2, r2
 800803a:	809a      	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d005      	beq.n	800804e <tcp_alloc+0x8a>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8008042:	4b30      	ldr	r3, [pc, #192]	; (8008104 <tcp_alloc+0x140>)
 8008044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008046:	889a      	ldrh	r2, [r3, #4]
 8008048:	3a01      	subs	r2, #1
 800804a:	b292      	uxth	r2, r2
 800804c:	809a      	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d005      	beq.n	8008060 <tcp_alloc+0x9c>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8008054:	4b2b      	ldr	r3, [pc, #172]	; (8008104 <tcp_alloc+0x140>)
 8008056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008058:	889a      	ldrh	r2, [r3, #4]
 800805a:	3a01      	subs	r2, #1
 800805c:	b292      	uxth	r2, r2
 800805e:	809a      	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d005      	beq.n	8008072 <tcp_alloc+0xae>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8008066:	4b27      	ldr	r3, [pc, #156]	; (8008104 <tcp_alloc+0x140>)
 8008068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800806a:	889a      	ldrh	r2, [r3, #4]
 800806c:	3a01      	subs	r2, #1
 800806e:	b292      	uxth	r2, r2
 8008070:	809a      	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d03f      	beq.n	80080f8 <tcp_alloc+0x134>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008078:	229c      	movs	r2, #156	; 0x9c
 800807a:	2100      	movs	r1, #0
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f00b ff1a 	bl	8013eb6 <memset>
    pcb->prio = prio;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	79fa      	ldrb	r2, [r7, #7]
 8008086:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f640 3268 	movw	r2, #2920	; 0xb68
 800808e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8008098:	855a      	strh	r2, [r3, #42]	; 0x2a
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	22ff      	movs	r2, #255	; 0xff
 80080a6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 80080ae:	865a      	strh	r2, [r3, #50]	; 0x32
    /* Set initial TCP's retransmission timeout to 3000 ms by default.
       This value could be configured in lwipopts */
    pcb->rto = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2206      	movs	r2, #6
 80080b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2206      	movs	r2, #6
 80080bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080c4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80080ce:	4b0e      	ldr	r3, [pc, #56]	; (8008108 <tcp_alloc+0x144>)
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80080d6:	4b0d      	ldr	r3, [pc, #52]	; (800810c <tcp_alloc+0x148>)
 80080d8:	781a      	ldrb	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f640 3268 	movw	r2, #2920	; 0xb68
 80080e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	4a09      	ldr	r2, [pc, #36]	; (8008110 <tcp_alloc+0x14c>)
 80080ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	4a08      	ldr	r2, [pc, #32]	; (8008114 <tcp_alloc+0x150>)
 80080f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
    pcb_tci_init(pcb);
  }
  return pcb;
 80080f8:	68fb      	ldr	r3, [r7, #12]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	20002218 	.word	0x20002218
 8008108:	200022c4 	.word	0x200022c4
 800810c:	200006fa 	.word	0x200006fa
 8008110:	08007d71 	.word	0x08007d71
 8008114:	006ddd00 	.word	0x006ddd00

08008118 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	4603      	mov	r3, r0
 8008120:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008122:	2040      	movs	r0, #64	; 0x40
 8008124:	f7ff ff4e 	bl	8007fc4 <tcp_alloc>
 8008128:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800812a:	68fb      	ldr	r3, [r7, #12]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	611a      	str	r2, [r3, #16]
  }
}
 800814a:	bf00      	nop
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
	...

08008158 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d013      	beq.n	8008190 <tcp_recv+0x38>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	7d1b      	ldrb	r3, [r3, #20]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d10b      	bne.n	8008188 <tcp_recv+0x30>
 8008170:	4b09      	ldr	r3, [pc, #36]	; (8008198 <tcp_recv+0x40>)
 8008172:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 8008176:	4909      	ldr	r1, [pc, #36]	; (800819c <tcp_recv+0x44>)
 8008178:	4809      	ldr	r0, [pc, #36]	; (80081a0 <tcp_recv+0x48>)
 800817a:	f00b fc75 	bl	8013a68 <iprintf>
 800817e:	2000      	movs	r0, #0
 8008180:	f00b fd74 	bl	8013c6c <fflush>
 8008184:	f00b fcb9 	bl	8013afa <abort>
    pcb->recv = recv;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	080161b0 	.word	0x080161b0
 800819c:	08016738 	.word	0x08016738
 80081a0:	080161e4 	.word	0x080161e4

080081a4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d013      	beq.n	80081dc <tcp_sent+0x38>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	7d1b      	ldrb	r3, [r3, #20]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d10b      	bne.n	80081d4 <tcp_sent+0x30>
 80081bc:	4b09      	ldr	r3, [pc, #36]	; (80081e4 <tcp_sent+0x40>)
 80081be:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80081c2:	4909      	ldr	r1, [pc, #36]	; (80081e8 <tcp_sent+0x44>)
 80081c4:	4809      	ldr	r0, [pc, #36]	; (80081ec <tcp_sent+0x48>)
 80081c6:	f00b fc4f 	bl	8013a68 <iprintf>
 80081ca:	2000      	movs	r0, #0
 80081cc:	f00b fd4e 	bl	8013c6c <fflush>
 80081d0:	f00b fc93 	bl	8013afa <abort>
    pcb->sent = sent;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80081dc:	bf00      	nop
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	080161b0 	.word	0x080161b0
 80081e8:	08016760 	.word	0x08016760
 80081ec:	080161e4 	.word	0x080161e4

080081f0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d013      	beq.n	8008228 <tcp_err+0x38>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	7d1b      	ldrb	r3, [r3, #20]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d10b      	bne.n	8008220 <tcp_err+0x30>
 8008208:	4b09      	ldr	r3, [pc, #36]	; (8008230 <tcp_err+0x40>)
 800820a:	f640 0216 	movw	r2, #2070	; 0x816
 800820e:	4909      	ldr	r1, [pc, #36]	; (8008234 <tcp_err+0x44>)
 8008210:	4809      	ldr	r0, [pc, #36]	; (8008238 <tcp_err+0x48>)
 8008212:	f00b fc29 	bl	8013a68 <iprintf>
 8008216:	2000      	movs	r0, #0
 8008218:	f00b fd28 	bl	8013c6c <fflush>
 800821c:	f00b fc6d 	bl	8013afa <abort>
    pcb->errf = err;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8008228:	bf00      	nop
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	080161b0 	.word	0x080161b0
 8008234:	08016788 	.word	0x08016788
 8008238:	080161e4 	.word	0x080161e4

0800823c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	4613      	mov	r3, r2
 8008248:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d107      	bne.n	8008260 <tcp_poll+0x24>
 8008250:	4b10      	ldr	r3, [pc, #64]	; (8008294 <tcp_poll+0x58>)
 8008252:	f640 0247 	movw	r2, #2119	; 0x847
 8008256:	4910      	ldr	r1, [pc, #64]	; (8008298 <tcp_poll+0x5c>)
 8008258:	4810      	ldr	r0, [pc, #64]	; (800829c <tcp_poll+0x60>)
 800825a:	f7f9 fdde 	bl	8001e1a <lwip_win32_platform_diag>
 800825e:	e016      	b.n	800828e <tcp_poll+0x52>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	7d1b      	ldrb	r3, [r3, #20]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d10b      	bne.n	8008280 <tcp_poll+0x44>
 8008268:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <tcp_poll+0x58>)
 800826a:	f640 0248 	movw	r2, #2120	; 0x848
 800826e:	490c      	ldr	r1, [pc, #48]	; (80082a0 <tcp_poll+0x64>)
 8008270:	480a      	ldr	r0, [pc, #40]	; (800829c <tcp_poll+0x60>)
 8008272:	f00b fbf9 	bl	8013a68 <iprintf>
 8008276:	2000      	movs	r0, #0
 8008278:	f00b fcf8 	bl	8013c6c <fflush>
 800827c:	f00b fc3d 	bl	8013afa <abort>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	79fa      	ldrb	r2, [r7, #7]
 800828c:	775a      	strb	r2, [r3, #29]
}
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	080161b0 	.word	0x080161b0
 8008298:	080167b0 	.word	0x080167b0
 800829c:	080161e4 	.word	0x080161e4
 80082a0:	080167c8 	.word	0x080167c8

080082a4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d107      	bne.n	80082c2 <tcp_pcb_purge+0x1e>
 80082b2:	4b21      	ldr	r3, [pc, #132]	; (8008338 <tcp_pcb_purge+0x94>)
 80082b4:	f640 025b 	movw	r2, #2139	; 0x85b
 80082b8:	4920      	ldr	r1, [pc, #128]	; (800833c <tcp_pcb_purge+0x98>)
 80082ba:	4821      	ldr	r0, [pc, #132]	; (8008340 <tcp_pcb_purge+0x9c>)
 80082bc:	f7f9 fdad 	bl	8001e1a <lwip_win32_platform_diag>
 80082c0:	e037      	b.n	8008332 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	7d1b      	ldrb	r3, [r3, #20]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d033      	beq.n	8008332 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80082ce:	2b0a      	cmp	r3, #10
 80082d0:	d02f      	beq.n	8008332 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d02b      	beq.n	8008332 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d007      	beq.n	80082f2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fd fea8 	bl	800603c <pbuf_free>
      pcb->refused_data = NULL;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d002      	beq.n	8008300 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f9ac 	bl	8008658 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008306:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800830c:	4618      	mov	r0, r3
 800830e:	f7ff fcd1 	bl	8007cb4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008316:	4618      	mov	r0, r3
 8008318:	f7ff fccc 	bl	8007cb4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	66da      	str	r2, [r3, #108]	; 0x6c
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	080161b0 	.word	0x080161b0
 800833c:	080167e8 	.word	0x080167e8
 8008340:	080161e4 	.word	0x080161e4

08008344 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10b      	bne.n	800836c <tcp_pcb_remove+0x28>
 8008354:	4b4a      	ldr	r3, [pc, #296]	; (8008480 <tcp_pcb_remove+0x13c>)
 8008356:	f640 028d 	movw	r2, #2189	; 0x88d
 800835a:	494a      	ldr	r1, [pc, #296]	; (8008484 <tcp_pcb_remove+0x140>)
 800835c:	484a      	ldr	r0, [pc, #296]	; (8008488 <tcp_pcb_remove+0x144>)
 800835e:	f00b fb83 	bl	8013a68 <iprintf>
 8008362:	2000      	movs	r0, #0
 8008364:	f00b fc82 	bl	8013c6c <fflush>
 8008368:	f00b fbc7 	bl	8013afa <abort>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10b      	bne.n	800838a <tcp_pcb_remove+0x46>
 8008372:	4b43      	ldr	r3, [pc, #268]	; (8008480 <tcp_pcb_remove+0x13c>)
 8008374:	f640 028e 	movw	r2, #2190	; 0x88e
 8008378:	4944      	ldr	r1, [pc, #272]	; (800848c <tcp_pcb_remove+0x148>)
 800837a:	4843      	ldr	r0, [pc, #268]	; (8008488 <tcp_pcb_remove+0x144>)
 800837c:	f00b fb74 	bl	8013a68 <iprintf>
 8008380:	2000      	movs	r0, #0
 8008382:	f00b fc73 	bl	8013c6c <fflush>
 8008386:	f00b fbb8 	bl	8013afa <abort>

  TCP_RMV(pcblist, pcb);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	429a      	cmp	r2, r3
 8008392:	d105      	bne.n	80083a0 <tcp_pcb_remove+0x5c>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	601a      	str	r2, [r3, #0]
 800839e:	e013      	b.n	80083c8 <tcp_pcb_remove+0x84>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	60fb      	str	r3, [r7, #12]
 80083a6:	e00c      	b.n	80083c2 <tcp_pcb_remove+0x7e>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	68da      	ldr	r2, [r3, #12]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d104      	bne.n	80083bc <tcp_pcb_remove+0x78>
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	60da      	str	r2, [r3, #12]
 80083ba:	e005      	b.n	80083c8 <tcp_pcb_remove+0x84>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1ef      	bne.n	80083a8 <tcp_pcb_remove+0x64>
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	2200      	movs	r2, #0
 80083cc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80083ce:	6838      	ldr	r0, [r7, #0]
 80083d0:	f7ff ff68 	bl	80082a4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	7d1b      	ldrb	r3, [r3, #20]
 80083d8:	2b0a      	cmp	r3, #10
 80083da:	d013      	beq.n	8008404 <tcp_pcb_remove+0xc0>
      (pcb->state != LISTEN) &&
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d00f      	beq.n	8008404 <tcp_pcb_remove+0xc0>
      (pcb->flags & TF_ACK_DELAY)) {
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	8b5b      	ldrh	r3, [r3, #26]
 80083e8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d009      	beq.n	8008404 <tcp_pcb_remove+0xc0>
    tcp_ack_now(pcb);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	8b5b      	ldrh	r3, [r3, #26]
 80083f4:	f043 0302 	orr.w	r3, r3, #2
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80083fe:	6838      	ldr	r0, [r7, #0]
 8008400:	f003 fe3a 	bl	800c078 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	7d1b      	ldrb	r3, [r3, #20]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d02f      	beq.n	800846c <tcp_pcb_remove+0x128>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00b      	beq.n	800842c <tcp_pcb_remove+0xe8>
 8008414:	4b1a      	ldr	r3, [pc, #104]	; (8008480 <tcp_pcb_remove+0x13c>)
 8008416:	f640 029d 	movw	r2, #2205	; 0x89d
 800841a:	491d      	ldr	r1, [pc, #116]	; (8008490 <tcp_pcb_remove+0x14c>)
 800841c:	481a      	ldr	r0, [pc, #104]	; (8008488 <tcp_pcb_remove+0x144>)
 800841e:	f00b fb23 	bl	8013a68 <iprintf>
 8008422:	2000      	movs	r0, #0
 8008424:	f00b fc22 	bl	8013c6c <fflush>
 8008428:	f00b fb67 	bl	8013afa <abort>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00b      	beq.n	800844c <tcp_pcb_remove+0x108>
 8008434:	4b12      	ldr	r3, [pc, #72]	; (8008480 <tcp_pcb_remove+0x13c>)
 8008436:	f640 029e 	movw	r2, #2206	; 0x89e
 800843a:	4916      	ldr	r1, [pc, #88]	; (8008494 <tcp_pcb_remove+0x150>)
 800843c:	4812      	ldr	r0, [pc, #72]	; (8008488 <tcp_pcb_remove+0x144>)
 800843e:	f00b fb13 	bl	8013a68 <iprintf>
 8008442:	2000      	movs	r0, #0
 8008444:	f00b fc12 	bl	8013c6c <fflush>
 8008448:	f00b fb57 	bl	8013afa <abort>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00b      	beq.n	800846c <tcp_pcb_remove+0x128>
 8008454:	4b0a      	ldr	r3, [pc, #40]	; (8008480 <tcp_pcb_remove+0x13c>)
 8008456:	f44f 620a 	mov.w	r2, #2208	; 0x8a0
 800845a:	490f      	ldr	r1, [pc, #60]	; (8008498 <tcp_pcb_remove+0x154>)
 800845c:	480a      	ldr	r0, [pc, #40]	; (8008488 <tcp_pcb_remove+0x144>)
 800845e:	f00b fb03 	bl	8013a68 <iprintf>
 8008462:	2000      	movs	r0, #0
 8008464:	f00b fc02 	bl	8013c6c <fflush>
 8008468:	f00b fb47 	bl	8013afa <abort>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2200      	movs	r2, #0
 8008470:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2200      	movs	r2, #0
 8008476:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008478:	bf00      	nop
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	080161b0 	.word	0x080161b0
 8008484:	08016804 	.word	0x08016804
 8008488:	080161e4 	.word	0x080161e4
 800848c:	08016820 	.word	0x08016820
 8008490:	08016840 	.word	0x08016840
 8008494:	08016858 	.word	0x08016858
 8008498:	08016874 	.word	0x08016874

0800849c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10b      	bne.n	80084c2 <tcp_next_iss+0x26>
 80084aa:	4b0c      	ldr	r3, [pc, #48]	; (80084dc <tcp_next_iss+0x40>)
 80084ac:	f640 02b9 	movw	r2, #2233	; 0x8b9
 80084b0:	490b      	ldr	r1, [pc, #44]	; (80084e0 <tcp_next_iss+0x44>)
 80084b2:	480c      	ldr	r0, [pc, #48]	; (80084e4 <tcp_next_iss+0x48>)
 80084b4:	f00b fad8 	bl	8013a68 <iprintf>
 80084b8:	2000      	movs	r0, #0
 80084ba:	f00b fbd7 	bl	8013c6c <fflush>
 80084be:	f00b fb1c 	bl	8013afa <abort>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80084c2:	4b09      	ldr	r3, [pc, #36]	; (80084e8 <tcp_next_iss+0x4c>)
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	4b09      	ldr	r3, [pc, #36]	; (80084ec <tcp_next_iss+0x50>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4413      	add	r3, r2
 80084cc:	4a06      	ldr	r2, [pc, #24]	; (80084e8 <tcp_next_iss+0x4c>)
 80084ce:	6013      	str	r3, [r2, #0]
  return iss;
 80084d0:	4b05      	ldr	r3, [pc, #20]	; (80084e8 <tcp_next_iss+0x4c>)
 80084d2:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	080161b0 	.word	0x080161b0
 80084e0:	0801688c 	.word	0x0801688c
 80084e4:	080161e4 	.word	0x080161e4
 80084e8:	2000000c 	.word	0x2000000c
 80084ec:	200022c4 	.word	0x200022c4

080084f0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10b      	bne.n	800851c <tcp_eff_send_mss_netif+0x2c>
 8008504:	4b17      	ldr	r3, [pc, #92]	; (8008564 <tcp_eff_send_mss_netif+0x74>)
 8008506:	f640 02cf 	movw	r2, #2255	; 0x8cf
 800850a:	4917      	ldr	r1, [pc, #92]	; (8008568 <tcp_eff_send_mss_netif+0x78>)
 800850c:	4817      	ldr	r0, [pc, #92]	; (800856c <tcp_eff_send_mss_netif+0x7c>)
 800850e:	f00b faab 	bl	8013a68 <iprintf>
 8008512:	2000      	movs	r0, #0
 8008514:	f00b fbaa 	bl	8013c6c <fflush>
 8008518:	f00b faef 	bl	8013afa <abort>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <tcp_eff_send_mss_netif+0x36>
      return sendmss;
 8008522:	89fb      	ldrh	r3, [r7, #14]
 8008524:	e019      	b.n	800855a <tcp_eff_send_mss_netif+0x6a>
    }
    mtu = outif->mtu;
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	8c1b      	ldrh	r3, [r3, #32]
 800852a:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800852c:	8afb      	ldrh	r3, [r7, #22]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d012      	beq.n	8008558 <tcp_eff_send_mss_netif+0x68>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008532:	2328      	movs	r3, #40	; 0x28
 8008534:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008536:	8afa      	ldrh	r2, [r7, #22]
 8008538:	8abb      	ldrh	r3, [r7, #20]
 800853a:	429a      	cmp	r2, r3
 800853c:	d904      	bls.n	8008548 <tcp_eff_send_mss_netif+0x58>
 800853e:	8afa      	ldrh	r2, [r7, #22]
 8008540:	8abb      	ldrh	r3, [r7, #20]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	b29b      	uxth	r3, r3
 8008546:	e000      	b.n	800854a <tcp_eff_send_mss_netif+0x5a>
 8008548:	2300      	movs	r3, #0
 800854a:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800854c:	8a7a      	ldrh	r2, [r7, #18]
 800854e:	89fb      	ldrh	r3, [r7, #14]
 8008550:	4293      	cmp	r3, r2
 8008552:	bf28      	it	cs
 8008554:	4613      	movcs	r3, r2
 8008556:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008558:	89fb      	ldrh	r3, [r7, #14]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	080161b0 	.word	0x080161b0
 8008568:	080168a8 	.word	0x080168a8
 800856c:	080161e4 	.word	0x080161e4

08008570 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d11d      	bne.n	80085c0 <tcp_netif_ip_addr_changed_pcblist+0x50>
 8008584:	4b12      	ldr	r3, [pc, #72]	; (80085d0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008586:	f640 120a 	movw	r2, #2314	; 0x90a
 800858a:	4912      	ldr	r1, [pc, #72]	; (80085d4 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 800858c:	4812      	ldr	r0, [pc, #72]	; (80085d8 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 800858e:	f00b fa6b 	bl	8013a68 <iprintf>
 8008592:	2000      	movs	r0, #0
 8008594:	f00b fb6a 	bl	8013c6c <fflush>
 8008598:	f00b faaf 	bl	8013afa <abort>

  while (pcb != NULL) {
    /* PCB bound to current local interface address? */
    if (ip_addr_eq(&pcb->local_ip, old_addr)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d108      	bne.n	80085ba <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f7fe fc6e 	bl	8006e90 <tcp_abort>
      pcb = next;
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	e002      	b.n	80085c0 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1ea      	bne.n	800859c <tcp_netif_ip_addr_changed_pcblist+0x2c>
    }
  }
}
 80085c6:	bf00      	nop
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	080161b0 	.word	0x080161b0
 80085d4:	080168d0 	.word	0x080168d0
 80085d8:	080161e4 	.word	0x080161e4

080085dc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d02a      	beq.n	8008642 <tcp_netif_ip_addr_changed+0x66>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d026      	beq.n	8008642 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80085f4:	4b15      	ldr	r3, [pc, #84]	; (800864c <tcp_netif_ip_addr_changed+0x70>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f7ff ffb8 	bl	8008570 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008600:	4b13      	ldr	r3, [pc, #76]	; (8008650 <tcp_netif_ip_addr_changed+0x74>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4619      	mov	r1, r3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7ff ffb2 	bl	8008570 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d017      	beq.n	8008642 <tcp_netif_ip_addr_changed+0x66>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d013      	beq.n	8008642 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800861a:	4b0e      	ldr	r3, [pc, #56]	; (8008654 <tcp_netif_ip_addr_changed+0x78>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	e00c      	b.n	800863c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_eq(&lpcb->local_ip, old_addr)) {
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	429a      	cmp	r2, r3
 800862c:	d103      	bne.n	8008636 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1ef      	bne.n	8008622 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008642:	bf00      	nop
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	200022c0 	.word	0x200022c0
 8008650:	200022cc 	.word	0x200022cc
 8008654:	200022c8 	.word	0x200022c8

08008658 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008664:	2b00      	cmp	r3, #0
 8008666:	d007      	beq.n	8008678 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800866c:	4618      	mov	r0, r3
 800866e:	f7ff fb21 	bl	8007cb4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008678:	bf00      	nop
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008680:	b590      	push	{r4, r7, lr}
 8008682:	b08d      	sub	sp, #52	; 0x34
 8008684:	af04      	add	r7, sp, #16
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10a      	bne.n	80086a6 <tcp_input+0x26>
 8008690:	4b7b      	ldr	r3, [pc, #492]	; (8008880 <tcp_input+0x200>)
 8008692:	2283      	movs	r2, #131	; 0x83
 8008694:	497b      	ldr	r1, [pc, #492]	; (8008884 <tcp_input+0x204>)
 8008696:	487c      	ldr	r0, [pc, #496]	; (8008888 <tcp_input+0x208>)
 8008698:	f00b f9e6 	bl	8013a68 <iprintf>
 800869c:	2000      	movs	r0, #0
 800869e:	f00b fae5 	bl	8013c6c <fflush>
 80086a2:	f00b fa2a 	bl	8013afa <abort>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 80086a6:	4b79      	ldr	r3, [pc, #484]	; (800888c <tcp_input+0x20c>)
 80086a8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80086ac:	3301      	adds	r3, #1
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	4b76      	ldr	r3, [pc, #472]	; (800888c <tcp_input+0x20c>)
 80086b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	4a75      	ldr	r2, [pc, #468]	; (8008890 <tcp_input+0x210>)
 80086bc:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	895b      	ldrh	r3, [r3, #10]
 80086c2:	2b13      	cmp	r3, #19
 80086c4:	d809      	bhi.n	80086da <tcp_input+0x5a>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 80086c6:	4b71      	ldr	r3, [pc, #452]	; (800888c <tcp_input+0x20c>)
 80086c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80086cc:	3301      	adds	r3, #1
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	4b6e      	ldr	r3, [pc, #440]	; (800888c <tcp_input+0x20c>)
 80086d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    goto dropped;
 80086d6:	f000 bc6a 	b.w	8008fae <tcp_input+0x92e>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80086da:	4b6e      	ldr	r3, [pc, #440]	; (8008894 <tcp_input+0x214>)
 80086dc:	695a      	ldr	r2, [r3, #20]
 80086de:	4b6d      	ldr	r3, [pc, #436]	; (8008894 <tcp_input+0x214>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4619      	mov	r1, r3
 80086e4:	4610      	mov	r0, r2
 80086e6:	f7fc f849 	bl	800477c <ip4_addr_isbroadcast_u32>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d105      	bne.n	80086fc <tcp_input+0x7c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80086f0:	4b68      	ldr	r3, [pc, #416]	; (8008894 <tcp_input+0x214>)
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80086f8:	2be0      	cmp	r3, #224	; 0xe0
 80086fa:	d109      	bne.n	8008710 <tcp_input+0x90>
    TCP_STATS_INC(tcp.proterr);
 80086fc:	4b63      	ldr	r3, [pc, #396]	; (800888c <tcp_input+0x20c>)
 80086fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008702:	3301      	adds	r3, #1
 8008704:	b29a      	uxth	r2, r3
 8008706:	4b61      	ldr	r3, [pc, #388]	; (800888c <tcp_input+0x20c>)
 8008708:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    goto dropped;
 800870c:	f000 bc4f 	b.w	8008fae <tcp_input+0x92e>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	891a      	ldrh	r2, [r3, #8]
 8008714:	4b60      	ldr	r3, [pc, #384]	; (8008898 <tcp_input+0x218>)
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	4b60      	ldr	r3, [pc, #384]	; (800889c <tcp_input+0x21c>)
 800871a:	2106      	movs	r1, #6
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7fb fcad 	bl	800407c <ip_chksum_pseudo>
 8008722:	4603      	mov	r3, r0
 8008724:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 8008726:	8a3b      	ldrh	r3, [r7, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d009      	beq.n	8008740 <tcp_input+0xc0>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
                                    chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
 800872c:	4b57      	ldr	r3, [pc, #348]	; (800888c <tcp_input+0x20c>)
 800872e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008732:	3301      	adds	r3, #1
 8008734:	b29a      	uxth	r2, r3
 8008736:	4b55      	ldr	r3, [pc, #340]	; (800888c <tcp_input+0x20c>)
 8008738:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
      goto dropped;
 800873c:	f000 bc37 	b.w	8008fae <tcp_input+0x92e>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008740:	4b53      	ldr	r3, [pc, #332]	; (8008890 <tcp_input+0x210>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	899b      	ldrh	r3, [r3, #12]
 8008746:	b29b      	uxth	r3, r3
 8008748:	4618      	mov	r0, r3
 800874a:	f7fb fb65 	bl	8003e18 <lwip_htons>
 800874e:	4603      	mov	r3, r0
 8008750:	0b1b      	lsrs	r3, r3, #12
 8008752:	b29b      	uxth	r3, r3
 8008754:	b2db      	uxtb	r3, r3
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800875a:	7bfb      	ldrb	r3, [r7, #15]
 800875c:	2b13      	cmp	r3, #19
 800875e:	d905      	bls.n	800876c <tcp_input+0xec>
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	b29a      	uxth	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	891b      	ldrh	r3, [r3, #8]
 8008768:	429a      	cmp	r2, r3
 800876a:	d909      	bls.n	8008780 <tcp_input+0x100>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 800876c:	4b47      	ldr	r3, [pc, #284]	; (800888c <tcp_input+0x20c>)
 800876e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008772:	3301      	adds	r3, #1
 8008774:	b29a      	uxth	r2, r3
 8008776:	4b45      	ldr	r3, [pc, #276]	; (800888c <tcp_input+0x20c>)
 8008778:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    goto dropped;
 800877c:	f000 bc17 	b.w	8008fae <tcp_input+0x92e>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008780:	7bfb      	ldrb	r3, [r7, #15]
 8008782:	b29b      	uxth	r3, r3
 8008784:	3b14      	subs	r3, #20
 8008786:	b29a      	uxth	r2, r3
 8008788:	4b45      	ldr	r3, [pc, #276]	; (80088a0 <tcp_input+0x220>)
 800878a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800878c:	4b45      	ldr	r3, [pc, #276]	; (80088a4 <tcp_input+0x224>)
 800878e:	2200      	movs	r2, #0
 8008790:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	895a      	ldrh	r2, [r3, #10]
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	b29b      	uxth	r3, r3
 800879a:	429a      	cmp	r2, r3
 800879c:	d309      	bcc.n	80087b2 <tcp_input+0x132>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800879e:	4b40      	ldr	r3, [pc, #256]	; (80088a0 <tcp_input+0x220>)
 80087a0:	881a      	ldrh	r2, [r3, #0]
 80087a2:	4b41      	ldr	r3, [pc, #260]	; (80088a8 <tcp_input+0x228>)
 80087a4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7fd fbf0 	bl	8005f90 <pbuf_remove_header>
 80087b0:	e082      	b.n	80088b8 <tcp_input+0x238>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10a      	bne.n	80087d0 <tcp_input+0x150>
 80087ba:	4b31      	ldr	r3, [pc, #196]	; (8008880 <tcp_input+0x200>)
 80087bc:	22c2      	movs	r2, #194	; 0xc2
 80087be:	493b      	ldr	r1, [pc, #236]	; (80088ac <tcp_input+0x22c>)
 80087c0:	4831      	ldr	r0, [pc, #196]	; (8008888 <tcp_input+0x208>)
 80087c2:	f00b f951 	bl	8013a68 <iprintf>
 80087c6:	2000      	movs	r0, #0
 80087c8:	f00b fa50 	bl	8013c6c <fflush>
 80087cc:	f00b f995 	bl	8013afa <abort>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80087d0:	2114      	movs	r1, #20
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7fd fbdc 	bl	8005f90 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	895a      	ldrh	r2, [r3, #10]
 80087dc:	4b32      	ldr	r3, [pc, #200]	; (80088a8 <tcp_input+0x228>)
 80087de:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80087e0:	4b2f      	ldr	r3, [pc, #188]	; (80088a0 <tcp_input+0x220>)
 80087e2:	881a      	ldrh	r2, [r3, #0]
 80087e4:	4b30      	ldr	r3, [pc, #192]	; (80088a8 <tcp_input+0x228>)
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80087ec:	4b2e      	ldr	r3, [pc, #184]	; (80088a8 <tcp_input+0x228>)
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7fd fbcc 	bl	8005f90 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	895b      	ldrh	r3, [r3, #10]
 80087fe:	89ba      	ldrh	r2, [r7, #12]
 8008800:	429a      	cmp	r2, r3
 8008802:	d908      	bls.n	8008816 <tcp_input+0x196>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8008804:	4b21      	ldr	r3, [pc, #132]	; (800888c <tcp_input+0x20c>)
 8008806:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800880a:	3301      	adds	r3, #1
 800880c:	b29a      	uxth	r2, r3
 800880e:	4b1f      	ldr	r3, [pc, #124]	; (800888c <tcp_input+0x20c>)
 8008810:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      goto dropped;
 8008814:	e3cb      	b.n	8008fae <tcp_input+0x92e>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	4a21      	ldr	r2, [pc, #132]	; (80088a4 <tcp_input+0x224>)
 800881e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	89ba      	ldrh	r2, [r7, #12]
 8008826:	4611      	mov	r1, r2
 8008828:	4618      	mov	r0, r3
 800882a:	f7fd fbb1 	bl	8005f90 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	891a      	ldrh	r2, [r3, #8]
 8008832:	89bb      	ldrh	r3, [r7, #12]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	b29a      	uxth	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	895b      	ldrh	r3, [r3, #10]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00a      	beq.n	800885a <tcp_input+0x1da>
 8008844:	4b0e      	ldr	r3, [pc, #56]	; (8008880 <tcp_input+0x200>)
 8008846:	22df      	movs	r2, #223	; 0xdf
 8008848:	4919      	ldr	r1, [pc, #100]	; (80088b0 <tcp_input+0x230>)
 800884a:	480f      	ldr	r0, [pc, #60]	; (8008888 <tcp_input+0x208>)
 800884c:	f00b f90c 	bl	8013a68 <iprintf>
 8008850:	2000      	movs	r0, #0
 8008852:	f00b fa0b 	bl	8013c6c <fflush>
 8008856:	f00b f950 	bl	8013afa <abort>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	891a      	ldrh	r2, [r3, #8]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	891b      	ldrh	r3, [r3, #8]
 8008864:	429a      	cmp	r2, r3
 8008866:	d027      	beq.n	80088b8 <tcp_input+0x238>
 8008868:	4b05      	ldr	r3, [pc, #20]	; (8008880 <tcp_input+0x200>)
 800886a:	22e0      	movs	r2, #224	; 0xe0
 800886c:	4911      	ldr	r1, [pc, #68]	; (80088b4 <tcp_input+0x234>)
 800886e:	4806      	ldr	r0, [pc, #24]	; (8008888 <tcp_input+0x208>)
 8008870:	f00b f8fa 	bl	8013a68 <iprintf>
 8008874:	2000      	movs	r0, #0
 8008876:	f00b f9f9 	bl	8013c6c <fflush>
 800887a:	f00b f93e 	bl	8013afa <abort>
 800887e:	bf00      	nop
 8008880:	08016904 	.word	0x08016904
 8008884:	08016928 	.word	0x08016928
 8008888:	08016940 	.word	0x08016940
 800888c:	20002218 	.word	0x20002218
 8008890:	20000710 	.word	0x20000710
 8008894:	2000087c 	.word	0x2000087c
 8008898:	20000890 	.word	0x20000890
 800889c:	2000088c 	.word	0x2000088c
 80088a0:	20000714 	.word	0x20000714
 80088a4:	20000718 	.word	0x20000718
 80088a8:	20000716 	.word	0x20000716
 80088ac:	08016968 	.word	0x08016968
 80088b0:	08016978 	.word	0x08016978
 80088b4:	08016984 	.word	0x08016984
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80088b8:	4b91      	ldr	r3, [pc, #580]	; (8008b00 <tcp_input+0x480>)
 80088ba:	681c      	ldr	r4, [r3, #0]
 80088bc:	4b90      	ldr	r3, [pc, #576]	; (8008b00 <tcp_input+0x480>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	881b      	ldrh	r3, [r3, #0]
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fb faa7 	bl	8003e18 <lwip_htons>
 80088ca:	4603      	mov	r3, r0
 80088cc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80088ce:	4b8c      	ldr	r3, [pc, #560]	; (8008b00 <tcp_input+0x480>)
 80088d0:	681c      	ldr	r4, [r3, #0]
 80088d2:	4b8b      	ldr	r3, [pc, #556]	; (8008b00 <tcp_input+0x480>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	885b      	ldrh	r3, [r3, #2]
 80088d8:	b29b      	uxth	r3, r3
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fb fa9c 	bl	8003e18 <lwip_htons>
 80088e0:	4603      	mov	r3, r0
 80088e2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80088e4:	4b86      	ldr	r3, [pc, #536]	; (8008b00 <tcp_input+0x480>)
 80088e6:	681c      	ldr	r4, [r3, #0]
 80088e8:	4b85      	ldr	r3, [pc, #532]	; (8008b00 <tcp_input+0x480>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fb faa7 	bl	8003e42 <lwip_htonl>
 80088f4:	4603      	mov	r3, r0
 80088f6:	6063      	str	r3, [r4, #4]
 80088f8:	6863      	ldr	r3, [r4, #4]
 80088fa:	4a82      	ldr	r2, [pc, #520]	; (8008b04 <tcp_input+0x484>)
 80088fc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80088fe:	4b80      	ldr	r3, [pc, #512]	; (8008b00 <tcp_input+0x480>)
 8008900:	681c      	ldr	r4, [r3, #0]
 8008902:	4b7f      	ldr	r3, [pc, #508]	; (8008b00 <tcp_input+0x480>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	4618      	mov	r0, r3
 800890a:	f7fb fa9a 	bl	8003e42 <lwip_htonl>
 800890e:	4603      	mov	r3, r0
 8008910:	60a3      	str	r3, [r4, #8]
 8008912:	68a3      	ldr	r3, [r4, #8]
 8008914:	4a7c      	ldr	r2, [pc, #496]	; (8008b08 <tcp_input+0x488>)
 8008916:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008918:	4b79      	ldr	r3, [pc, #484]	; (8008b00 <tcp_input+0x480>)
 800891a:	681c      	ldr	r4, [r3, #0]
 800891c:	4b78      	ldr	r3, [pc, #480]	; (8008b00 <tcp_input+0x480>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	89db      	ldrh	r3, [r3, #14]
 8008922:	b29b      	uxth	r3, r3
 8008924:	4618      	mov	r0, r3
 8008926:	f7fb fa77 	bl	8003e18 <lwip_htons>
 800892a:	4603      	mov	r3, r0
 800892c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800892e:	4b74      	ldr	r3, [pc, #464]	; (8008b00 <tcp_input+0x480>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	899b      	ldrh	r3, [r3, #12]
 8008934:	b29b      	uxth	r3, r3
 8008936:	4618      	mov	r0, r3
 8008938:	f7fb fa6e 	bl	8003e18 <lwip_htons>
 800893c:	4603      	mov	r3, r0
 800893e:	b2db      	uxtb	r3, r3
 8008940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008944:	b2da      	uxtb	r2, r3
 8008946:	4b71      	ldr	r3, [pc, #452]	; (8008b0c <tcp_input+0x48c>)
 8008948:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	891a      	ldrh	r2, [r3, #8]
 800894e:	4b70      	ldr	r3, [pc, #448]	; (8008b10 <tcp_input+0x490>)
 8008950:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008952:	4b6e      	ldr	r3, [pc, #440]	; (8008b0c <tcp_input+0x48c>)
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	f003 0303 	and.w	r3, r3, #3
 800895a:	2b00      	cmp	r3, #0
 800895c:	d014      	beq.n	8008988 <tcp_input+0x308>
    tcplen++;
 800895e:	4b6c      	ldr	r3, [pc, #432]	; (8008b10 <tcp_input+0x490>)
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	3301      	adds	r3, #1
 8008964:	b29a      	uxth	r2, r3
 8008966:	4b6a      	ldr	r3, [pc, #424]	; (8008b10 <tcp_input+0x490>)
 8008968:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	891a      	ldrh	r2, [r3, #8]
 800896e:	4b68      	ldr	r3, [pc, #416]	; (8008b10 <tcp_input+0x490>)
 8008970:	881b      	ldrh	r3, [r3, #0]
 8008972:	429a      	cmp	r2, r3
 8008974:	d908      	bls.n	8008988 <tcp_input+0x308>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8008976:	4b67      	ldr	r3, [pc, #412]	; (8008b14 <tcp_input+0x494>)
 8008978:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800897c:	3301      	adds	r3, #1
 800897e:	b29a      	uxth	r2, r3
 8008980:	4b64      	ldr	r3, [pc, #400]	; (8008b14 <tcp_input+0x494>)
 8008982:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      goto dropped;
 8008986:	e312      	b.n	8008fae <tcp_input+0x92e>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008988:	2300      	movs	r3, #0
 800898a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800898c:	4b62      	ldr	r3, [pc, #392]	; (8008b18 <tcp_input+0x498>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	61fb      	str	r3, [r7, #28]
 8008992:	e097      	b.n	8008ac4 <tcp_input+0x444>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	7d1b      	ldrb	r3, [r3, #20]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10a      	bne.n	80089b2 <tcp_input+0x332>
 800899c:	4b5f      	ldr	r3, [pc, #380]	; (8008b1c <tcp_input+0x49c>)
 800899e:	22fb      	movs	r2, #251	; 0xfb
 80089a0:	495f      	ldr	r1, [pc, #380]	; (8008b20 <tcp_input+0x4a0>)
 80089a2:	4860      	ldr	r0, [pc, #384]	; (8008b24 <tcp_input+0x4a4>)
 80089a4:	f00b f860 	bl	8013a68 <iprintf>
 80089a8:	2000      	movs	r0, #0
 80089aa:	f00b f95f 	bl	8013c6c <fflush>
 80089ae:	f00b f8a4 	bl	8013afa <abort>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	7d1b      	ldrb	r3, [r3, #20]
 80089b6:	2b0a      	cmp	r3, #10
 80089b8:	d10a      	bne.n	80089d0 <tcp_input+0x350>
 80089ba:	4b58      	ldr	r3, [pc, #352]	; (8008b1c <tcp_input+0x49c>)
 80089bc:	22fc      	movs	r2, #252	; 0xfc
 80089be:	495a      	ldr	r1, [pc, #360]	; (8008b28 <tcp_input+0x4a8>)
 80089c0:	4858      	ldr	r0, [pc, #352]	; (8008b24 <tcp_input+0x4a4>)
 80089c2:	f00b f851 	bl	8013a68 <iprintf>
 80089c6:	2000      	movs	r0, #0
 80089c8:	f00b f950 	bl	8013c6c <fflush>
 80089cc:	f00b f895 	bl	8013afa <abort>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	7d1b      	ldrb	r3, [r3, #20]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d10a      	bne.n	80089ee <tcp_input+0x36e>
 80089d8:	4b50      	ldr	r3, [pc, #320]	; (8008b1c <tcp_input+0x49c>)
 80089da:	22fd      	movs	r2, #253	; 0xfd
 80089dc:	4953      	ldr	r1, [pc, #332]	; (8008b2c <tcp_input+0x4ac>)
 80089de:	4851      	ldr	r0, [pc, #324]	; (8008b24 <tcp_input+0x4a4>)
 80089e0:	f00b f842 	bl	8013a68 <iprintf>
 80089e4:	2000      	movs	r0, #0
 80089e6:	f00b f941 	bl	8013c6c <fflush>
 80089ea:	f00b f886 	bl	8013afa <abort>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	7a1b      	ldrb	r3, [r3, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00c      	beq.n	8008a10 <tcp_input+0x390>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	7a1a      	ldrb	r2, [r3, #8]
 80089fa:	4b4d      	ldr	r3, [pc, #308]	; (8008b30 <tcp_input+0x4b0>)
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a02:	3301      	adds	r3, #1
 8008a04:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d002      	beq.n	8008a10 <tcp_input+0x390>
      prev = pcb;
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	61bb      	str	r3, [r7, #24]
      continue;
 8008a0e:	e056      	b.n	8008abe <tcp_input+0x43e>
    }

    if (pcb->remote_port == tcphdr->src &&
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	8b1a      	ldrh	r2, [r3, #24]
 8008a14:	4b3a      	ldr	r3, [pc, #232]	; (8008b00 <tcp_input+0x480>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	881b      	ldrh	r3, [r3, #0]
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d14c      	bne.n	8008aba <tcp_input+0x43a>
        pcb->local_port == tcphdr->dest &&
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	8ada      	ldrh	r2, [r3, #22]
 8008a24:	4b36      	ldr	r3, [pc, #216]	; (8008b00 <tcp_input+0x480>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	885b      	ldrh	r3, [r3, #2]
 8008a2a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d144      	bne.n	8008aba <tcp_input+0x43a>
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	685a      	ldr	r2, [r3, #4]
 8008a34:	4b3e      	ldr	r3, [pc, #248]	; (8008b30 <tcp_input+0x4b0>)
 8008a36:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d13e      	bne.n	8008aba <tcp_input+0x43a>
        ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	4b3b      	ldr	r3, [pc, #236]	; (8008b30 <tcp_input+0x4b0>)
 8008a42:	695b      	ldr	r3, [r3, #20]
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d138      	bne.n	8008aba <tcp_input+0x43a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	68da      	ldr	r2, [r3, #12]
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d10b      	bne.n	8008a6a <tcp_input+0x3ea>
 8008a52:	4b32      	ldr	r3, [pc, #200]	; (8008b1c <tcp_input+0x49c>)
 8008a54:	f240 120d 	movw	r2, #269	; 0x10d
 8008a58:	4936      	ldr	r1, [pc, #216]	; (8008b34 <tcp_input+0x4b4>)
 8008a5a:	4832      	ldr	r0, [pc, #200]	; (8008b24 <tcp_input+0x4a4>)
 8008a5c:	f00b f804 	bl	8013a68 <iprintf>
 8008a60:	2000      	movs	r0, #0
 8008a62:	f00b f903 	bl	8013c6c <fflush>
 8008a66:	f00b f848 	bl	8013afa <abort>
      if (prev != NULL) {
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00b      	beq.n	8008a88 <tcp_input+0x408>
        prev->next = pcb->next;
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	68da      	ldr	r2, [r3, #12]
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008a78:	4b27      	ldr	r3, [pc, #156]	; (8008b18 <tcp_input+0x498>)
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008a80:	4a25      	ldr	r2, [pc, #148]	; (8008b18 <tcp_input+0x498>)
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	6013      	str	r3, [r2, #0]
 8008a86:	e007      	b.n	8008a98 <tcp_input+0x418>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8008a88:	4b22      	ldr	r3, [pc, #136]	; (8008b14 <tcp_input+0x494>)
 8008a8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a8e:	3301      	adds	r3, #1
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	4b20      	ldr	r3, [pc, #128]	; (8008b14 <tcp_input+0x494>)
 8008a94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	68da      	ldr	r2, [r3, #12]
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d115      	bne.n	8008ace <tcp_input+0x44e>
 8008aa2:	4b1e      	ldr	r3, [pc, #120]	; (8008b1c <tcp_input+0x49c>)
 8008aa4:	f240 1215 	movw	r2, #277	; 0x115
 8008aa8:	4923      	ldr	r1, [pc, #140]	; (8008b38 <tcp_input+0x4b8>)
 8008aaa:	481e      	ldr	r0, [pc, #120]	; (8008b24 <tcp_input+0x4a4>)
 8008aac:	f00a ffdc 	bl	8013a68 <iprintf>
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	f00b f8db 	bl	8013c6c <fflush>
 8008ab6:	f00b f820 	bl	8013afa <abort>
      break;
    }
    prev = pcb;
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	61fb      	str	r3, [r7, #28]
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f47f af64 	bne.w	8008994 <tcp_input+0x314>
 8008acc:	e000      	b.n	8008ad0 <tcp_input+0x450>
      break;
 8008ace:	bf00      	nop
  }

  if (pcb == NULL) {
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f040 80c5 	bne.w	8008c62 <tcp_input+0x5e2>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ad8:	4b18      	ldr	r3, [pc, #96]	; (8008b3c <tcp_input+0x4bc>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	61fb      	str	r3, [r7, #28]
 8008ade:	e066      	b.n	8008bae <tcp_input+0x52e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	7d1b      	ldrb	r3, [r3, #20]
 8008ae4:	2b0a      	cmp	r3, #10
 8008ae6:	d02d      	beq.n	8008b44 <tcp_input+0x4c4>
 8008ae8:	4b0c      	ldr	r3, [pc, #48]	; (8008b1c <tcp_input+0x49c>)
 8008aea:	f240 121f 	movw	r2, #287	; 0x11f
 8008aee:	4914      	ldr	r1, [pc, #80]	; (8008b40 <tcp_input+0x4c0>)
 8008af0:	480c      	ldr	r0, [pc, #48]	; (8008b24 <tcp_input+0x4a4>)
 8008af2:	f00a ffb9 	bl	8013a68 <iprintf>
 8008af6:	2000      	movs	r0, #0
 8008af8:	f00b f8b8 	bl	8013c6c <fflush>
 8008afc:	f00a fffd 	bl	8013afa <abort>
 8008b00:	20000710 	.word	0x20000710
 8008b04:	20000720 	.word	0x20000720
 8008b08:	20000724 	.word	0x20000724
 8008b0c:	2000072c 	.word	0x2000072c
 8008b10:	2000072a 	.word	0x2000072a
 8008b14:	20002218 	.word	0x20002218
 8008b18:	200022c0 	.word	0x200022c0
 8008b1c:	08016904 	.word	0x08016904
 8008b20:	080169a4 	.word	0x080169a4
 8008b24:	08016940 	.word	0x08016940
 8008b28:	080169cc 	.word	0x080169cc
 8008b2c:	080169f8 	.word	0x080169f8
 8008b30:	2000087c 	.word	0x2000087c
 8008b34:	08016a20 	.word	0x08016a20
 8008b38:	08016a4c 	.word	0x08016a4c
 8008b3c:	200022d0 	.word	0x200022d0
 8008b40:	08016a78 	.word	0x08016a78

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	7a1b      	ldrb	r3, [r3, #8]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d009      	beq.n	8008b60 <tcp_input+0x4e0>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	7a1a      	ldrb	r2, [r3, #8]
 8008b50:	4b9e      	ldr	r3, [pc, #632]	; (8008dcc <tcp_input+0x74c>)
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b58:	3301      	adds	r3, #1
 8008b5a:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d122      	bne.n	8008ba6 <tcp_input+0x526>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	8b1a      	ldrh	r2, [r3, #24]
 8008b64:	4b9a      	ldr	r3, [pc, #616]	; (8008dd0 <tcp_input+0x750>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	881b      	ldrh	r3, [r3, #0]
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d11b      	bne.n	8008ba8 <tcp_input+0x528>
          pcb->local_port == tcphdr->dest &&
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	8ada      	ldrh	r2, [r3, #22]
 8008b74:	4b96      	ldr	r3, [pc, #600]	; (8008dd0 <tcp_input+0x750>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	885b      	ldrh	r3, [r3, #2]
 8008b7a:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d113      	bne.n	8008ba8 <tcp_input+0x528>
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	685a      	ldr	r2, [r3, #4]
 8008b84:	4b91      	ldr	r3, [pc, #580]	; (8008dcc <tcp_input+0x74c>)
 8008b86:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d10d      	bne.n	8008ba8 <tcp_input+0x528>
          ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	4b8e      	ldr	r3, [pc, #568]	; (8008dcc <tcp_input+0x74c>)
 8008b92:	695b      	ldr	r3, [r3, #20]
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d107      	bne.n	8008ba8 <tcp_input+0x528>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008b98:	69f8      	ldr	r0, [r7, #28]
 8008b9a:	f000 fb85 	bl	80092a8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7fd fa4c 	bl	800603c <pbuf_free>
        return;
 8008ba4:	e210      	b.n	8008fc8 <tcp_input+0x948>
        continue;
 8008ba6:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	61fb      	str	r3, [r7, #28]
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d195      	bne.n	8008ae0 <tcp_input+0x460>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008bb8:	4b86      	ldr	r3, [pc, #536]	; (8008dd4 <tcp_input+0x754>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	617b      	str	r3, [r7, #20]
 8008bbe:	e02a      	b.n	8008c16 <tcp_input+0x596>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	7a1b      	ldrb	r3, [r3, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00c      	beq.n	8008be2 <tcp_input+0x562>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	7a1a      	ldrb	r2, [r3, #8]
 8008bcc:	4b7f      	ldr	r3, [pc, #508]	; (8008dcc <tcp_input+0x74c>)
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d002      	beq.n	8008be2 <tcp_input+0x562>
        prev = (struct tcp_pcb *)lpcb;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	61bb      	str	r3, [r7, #24]
        continue;
 8008be0:	e016      	b.n	8008c10 <tcp_input+0x590>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	8ada      	ldrh	r2, [r3, #22]
 8008be6:	4b7a      	ldr	r3, [pc, #488]	; (8008dd0 <tcp_input+0x750>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	885b      	ldrh	r3, [r3, #2]
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d10c      	bne.n	8008c0c <tcp_input+0x58c>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_eq(&lpcb->local_ip, ip_current_dest_addr())) {
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	4b75      	ldr	r3, [pc, #468]	; (8008dcc <tcp_input+0x74c>)
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d00f      	beq.n	8008c1e <tcp_input+0x59e>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00d      	beq.n	8008c20 <tcp_input+0x5a0>
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d009      	beq.n	8008c20 <tcp_input+0x5a0>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	617b      	str	r3, [r7, #20]
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1d1      	bne.n	8008bc0 <tcp_input+0x540>
 8008c1c:	e000      	b.n	8008c20 <tcp_input+0x5a0>
            break;
 8008c1e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d01d      	beq.n	8008c62 <tcp_input+0x5e2>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00b      	beq.n	8008c44 <tcp_input+0x5c4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	68da      	ldr	r2, [r3, #12]
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008c34:	4b67      	ldr	r3, [pc, #412]	; (8008dd4 <tcp_input+0x754>)
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008c3c:	4a65      	ldr	r2, [pc, #404]	; (8008dd4 <tcp_input+0x754>)
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	6013      	str	r3, [r2, #0]
 8008c42:	e007      	b.n	8008c54 <tcp_input+0x5d4>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8008c44:	4b64      	ldr	r3, [pc, #400]	; (8008dd8 <tcp_input+0x758>)
 8008c46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	4b62      	ldr	r3, [pc, #392]	; (8008dd8 <tcp_input+0x758>)
 8008c50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008c54:	6978      	ldr	r0, [r7, #20]
 8008c56:	f000 fa19 	bl	800908c <tcp_listen_input>
      }
      pbuf_free(p);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7fd f9ee 	bl	800603c <pbuf_free>
      return;
 8008c60:	e1b2      	b.n	8008fc8 <tcp_input+0x948>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f000 8167 	beq.w	8008f38 <tcp_input+0x8b8>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008c6a:	4b5c      	ldr	r3, [pc, #368]	; (8008ddc <tcp_input+0x75c>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	891a      	ldrh	r2, [r3, #8]
 8008c74:	4b59      	ldr	r3, [pc, #356]	; (8008ddc <tcp_input+0x75c>)
 8008c76:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008c78:	4a58      	ldr	r2, [pc, #352]	; (8008ddc <tcp_input+0x75c>)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008c7e:	4b54      	ldr	r3, [pc, #336]	; (8008dd0 <tcp_input+0x750>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a56      	ldr	r2, [pc, #344]	; (8008ddc <tcp_input+0x75c>)
 8008c84:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8008c86:	4b56      	ldr	r3, [pc, #344]	; (8008de0 <tcp_input+0x760>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008c8c:	4b55      	ldr	r3, [pc, #340]	; (8008de4 <tcp_input+0x764>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008c92:	4b55      	ldr	r3, [pc, #340]	; (8008de8 <tcp_input+0x768>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008c98:	4b54      	ldr	r3, [pc, #336]	; (8008dec <tcp_input+0x76c>)
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	f003 0308 	and.w	r3, r3, #8
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d006      	beq.n	8008cb2 <tcp_input+0x632>
      p->flags |= PBUF_FLAG_PUSH;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	7b5b      	ldrb	r3, [r3, #13]
 8008ca8:	f043 0301 	orr.w	r3, r3, #1
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d01e      	beq.n	8008cf8 <tcp_input+0x678>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008cba:	69f8      	ldr	r0, [r7, #28]
 8008cbc:	f7fe ff7c 	bl	8007bb8 <tcp_process_refused_data>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	f113 0f0d 	cmn.w	r3, #13
 8008cc6:	d007      	beq.n	8008cd8 <tcp_input+0x658>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d013      	beq.n	8008cf8 <tcp_input+0x678>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008cd0:	4b47      	ldr	r3, [pc, #284]	; (8008df0 <tcp_input+0x770>)
 8008cd2:	881b      	ldrh	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00f      	beq.n	8008cf8 <tcp_input+0x678>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d102      	bne.n	8008ce6 <tcp_input+0x666>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008ce0:	69f8      	ldr	r0, [r7, #28]
 8008ce2:	f004 f8f9 	bl	800ced8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8008ce6:	4b3c      	ldr	r3, [pc, #240]	; (8008dd8 <tcp_input+0x758>)
 8008ce8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8008cec:	3301      	adds	r3, #1
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	4b39      	ldr	r3, [pc, #228]	; (8008dd8 <tcp_input+0x758>)
 8008cf2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008cf6:	e10c      	b.n	8008f12 <tcp_input+0x892>
      }
    }
    tcp_input_pcb = pcb;
 8008cf8:	4a3e      	ldr	r2, [pc, #248]	; (8008df4 <tcp_input+0x774>)
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008cfe:	69f8      	ldr	r0, [r7, #28]
 8008d00:	f000 fb52 	bl	80093a8 <tcp_process>
 8008d04:	4603      	mov	r3, r0
 8008d06:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008d08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008d0c:	f113 0f0d 	cmn.w	r3, #13
 8008d10:	f000 80ff 	beq.w	8008f12 <tcp_input+0x892>
      if (recv_flags & TF_RESET) {
 8008d14:	4b33      	ldr	r3, [pc, #204]	; (8008de4 <tcp_input+0x764>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	f003 0308 	and.w	r3, r3, #8
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d015      	beq.n	8008d4c <tcp_input+0x6cc>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d008      	beq.n	8008d3c <tcp_input+0x6bc>
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d30:	69fa      	ldr	r2, [r7, #28]
 8008d32:	6912      	ldr	r2, [r2, #16]
 8008d34:	f06f 010d 	mvn.w	r1, #13
 8008d38:	4610      	mov	r0, r2
 8008d3a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008d3c:	69f9      	ldr	r1, [r7, #28]
 8008d3e:	482e      	ldr	r0, [pc, #184]	; (8008df8 <tcp_input+0x778>)
 8008d40:	f7ff fb00 	bl	8008344 <tcp_pcb_remove>
        tcp_free(pcb);
 8008d44:	69f8      	ldr	r0, [r7, #28]
 8008d46:	f7fd fd93 	bl	8006870 <tcp_free>
 8008d4a:	e0e2      	b.n	8008f12 <tcp_input+0x892>
      } else {
        err = ERR_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008d50:	4b25      	ldr	r3, [pc, #148]	; (8008de8 <tcp_input+0x768>)
 8008d52:	881b      	ldrh	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d01d      	beq.n	8008d94 <tcp_input+0x714>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008d58:	4b23      	ldr	r3, [pc, #140]	; (8008de8 <tcp_input+0x768>)
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00a      	beq.n	8008d7e <tcp_input+0x6fe>
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d6e:	69fa      	ldr	r2, [r7, #28]
 8008d70:	6910      	ldr	r0, [r2, #16]
 8008d72:	897a      	ldrh	r2, [r7, #10]
 8008d74:	69f9      	ldr	r1, [r7, #28]
 8008d76:	4798      	blx	r3
 8008d78:	4603      	mov	r3, r0
 8008d7a:	74fb      	strb	r3, [r7, #19]
 8008d7c:	e001      	b.n	8008d82 <tcp_input+0x702>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008d82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008d86:	f113 0f0d 	cmn.w	r3, #13
 8008d8a:	f000 80b9 	beq.w	8008f00 <tcp_input+0x880>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008d8e:	4b16      	ldr	r3, [pc, #88]	; (8008de8 <tcp_input+0x768>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008d94:	69f8      	ldr	r0, [r7, #28]
 8008d96:	f000 f933 	bl	8009000 <tcp_input_delayed_close>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f040 80b1 	bne.w	8008f04 <tcp_input+0x884>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008da2:	4b0f      	ldr	r3, [pc, #60]	; (8008de0 <tcp_input+0x760>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d065      	beq.n	8008e76 <tcp_input+0x7f6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d02a      	beq.n	8008e08 <tcp_input+0x788>
 8008db2:	4b12      	ldr	r3, [pc, #72]	; (8008dfc <tcp_input+0x77c>)
 8008db4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008db8:	4911      	ldr	r1, [pc, #68]	; (8008e00 <tcp_input+0x780>)
 8008dba:	4812      	ldr	r0, [pc, #72]	; (8008e04 <tcp_input+0x784>)
 8008dbc:	f00a fe54 	bl	8013a68 <iprintf>
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	f00a ff53 	bl	8013c6c <fflush>
 8008dc6:	f00a fe98 	bl	8013afa <abort>
 8008dca:	bf00      	nop
 8008dcc:	2000087c 	.word	0x2000087c
 8008dd0:	20000710 	.word	0x20000710
 8008dd4:	200022c8 	.word	0x200022c8
 8008dd8:	20002218 	.word	0x20002218
 8008ddc:	200006fc 	.word	0x200006fc
 8008de0:	20000730 	.word	0x20000730
 8008de4:	2000072d 	.word	0x2000072d
 8008de8:	20000728 	.word	0x20000728
 8008dec:	2000072c 	.word	0x2000072c
 8008df0:	2000072a 	.word	0x2000072a
 8008df4:	200022d4 	.word	0x200022d4
 8008df8:	200022c0 	.word	0x200022c0
 8008dfc:	08016904 	.word	0x08016904
 8008e00:	08016aa8 	.word	0x08016aa8
 8008e04:	08016940 	.word	0x08016940
          if (pcb->flags & TF_RXCLOSED) {
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	8b5b      	ldrh	r3, [r3, #26]
 8008e0c:	f003 0310 	and.w	r3, r3, #16
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d008      	beq.n	8008e26 <tcp_input+0x7a6>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008e14:	4b6e      	ldr	r3, [pc, #440]	; (8008fd0 <tcp_input+0x950>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fd f90f 	bl	800603c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008e1e:	69f8      	ldr	r0, [r7, #28]
 8008e20:	f7fe f836 	bl	8006e90 <tcp_abort>
            goto aborted;
 8008e24:	e075      	b.n	8008f12 <tcp_input+0x892>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00c      	beq.n	8008e4a <tcp_input+0x7ca>
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	6918      	ldr	r0, [r3, #16]
 8008e3a:	4b65      	ldr	r3, [pc, #404]	; (8008fd0 <tcp_input+0x950>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	69f9      	ldr	r1, [r7, #28]
 8008e42:	47a0      	blx	r4
 8008e44:	4603      	mov	r3, r0
 8008e46:	74fb      	strb	r3, [r7, #19]
 8008e48:	e008      	b.n	8008e5c <tcp_input+0x7dc>
 8008e4a:	4b61      	ldr	r3, [pc, #388]	; (8008fd0 <tcp_input+0x950>)
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	2300      	movs	r3, #0
 8008e50:	69f9      	ldr	r1, [r7, #28]
 8008e52:	2000      	movs	r0, #0
 8008e54:	f7fe ff8c 	bl	8007d70 <tcp_recv_null>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008e5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008e60:	f113 0f0d 	cmn.w	r3, #13
 8008e64:	d050      	beq.n	8008f08 <tcp_input+0x888>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008e66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <tcp_input+0x7f6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008e6e:	4b58      	ldr	r3, [pc, #352]	; (8008fd0 <tcp_input+0x950>)
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008e76:	4b57      	ldr	r3, [pc, #348]	; (8008fd4 <tcp_input+0x954>)
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	f003 0320 	and.w	r3, r3, #32
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d031      	beq.n	8008ee6 <tcp_input+0x866>
          if (pcb->refused_data != NULL) {
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d009      	beq.n	8008e9e <tcp_input+0x81e>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e8e:	69fa      	ldr	r2, [r7, #28]
 8008e90:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8008e92:	7b52      	ldrb	r2, [r2, #13]
 8008e94:	f042 0220 	orr.w	r2, r2, #32
 8008e98:	b2d2      	uxtb	r2, r2
 8008e9a:	735a      	strb	r2, [r3, #13]
 8008e9c:	e023      	b.n	8008ee6 <tcp_input+0x866>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ea2:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d005      	beq.n	8008eb6 <tcp_input+0x836>
              pcb->rcv_wnd++;
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eae:	3301      	adds	r3, #1
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00b      	beq.n	8008ed8 <tcp_input+0x858>
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	6918      	ldr	r0, [r3, #16]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	2200      	movs	r2, #0
 8008ece:	69f9      	ldr	r1, [r7, #28]
 8008ed0:	47a0      	blx	r4
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	74fb      	strb	r3, [r7, #19]
 8008ed6:	e001      	b.n	8008edc <tcp_input+0x85c>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008edc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008ee0:	f113 0f0d 	cmn.w	r3, #13
 8008ee4:	d012      	beq.n	8008f0c <tcp_input+0x88c>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008ee6:	4b3c      	ldr	r3, [pc, #240]	; (8008fd8 <tcp_input+0x958>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008eec:	69f8      	ldr	r0, [r7, #28]
 8008eee:	f000 f887 	bl	8009000 <tcp_input_delayed_close>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10b      	bne.n	8008f10 <tcp_input+0x890>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008ef8:	69f8      	ldr	r0, [r7, #28]
 8008efa:	f003 f8bd 	bl	800c078 <tcp_output>
 8008efe:	e008      	b.n	8008f12 <tcp_input+0x892>
              goto aborted;
 8008f00:	bf00      	nop
 8008f02:	e006      	b.n	8008f12 <tcp_input+0x892>
          goto aborted;
 8008f04:	bf00      	nop
 8008f06:	e004      	b.n	8008f12 <tcp_input+0x892>
            goto aborted;
 8008f08:	bf00      	nop
 8008f0a:	e002      	b.n	8008f12 <tcp_input+0x892>
              goto aborted;
 8008f0c:	bf00      	nop
 8008f0e:	e000      	b.n	8008f12 <tcp_input+0x892>
          goto aborted;
 8008f10:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 8008f12:	4b31      	ldr	r3, [pc, #196]	; (8008fd8 <tcp_input+0x958>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008f18:	4b2d      	ldr	r3, [pc, #180]	; (8008fd0 <tcp_input+0x950>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008f1e:	4b2f      	ldr	r3, [pc, #188]	; (8008fdc <tcp_input+0x95c>)
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d04f      	beq.n	8008fc6 <tcp_input+0x946>
      pbuf_free(inseg.p);
 8008f26:	4b2d      	ldr	r3, [pc, #180]	; (8008fdc <tcp_input+0x95c>)
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fd f886 	bl	800603c <pbuf_free>
      inseg.p = NULL;
 8008f30:	4b2a      	ldr	r3, [pc, #168]	; (8008fdc <tcp_input+0x95c>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008f36:	e046      	b.n	8008fc6 <tcp_input+0x946>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008f38:	4b29      	ldr	r3, [pc, #164]	; (8008fe0 <tcp_input+0x960>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	899b      	ldrh	r3, [r3, #12]
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fa ff69 	bl	8003e18 <lwip_htons>
 8008f46:	4603      	mov	r3, r0
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	f003 0304 	and.w	r3, r3, #4
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d129      	bne.n	8008fa6 <tcp_input+0x926>
      TCP_STATS_INC(tcp.proterr);
 8008f52:	4b24      	ldr	r3, [pc, #144]	; (8008fe4 <tcp_input+0x964>)
 8008f54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f58:	3301      	adds	r3, #1
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	4b21      	ldr	r3, [pc, #132]	; (8008fe4 <tcp_input+0x964>)
 8008f5e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
      TCP_STATS_INC(tcp.drop);
 8008f62:	4b20      	ldr	r3, [pc, #128]	; (8008fe4 <tcp_input+0x964>)
 8008f64:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8008f68:	3301      	adds	r3, #1
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	4b1d      	ldr	r3, [pc, #116]	; (8008fe4 <tcp_input+0x964>)
 8008f6e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f72:	4b1d      	ldr	r3, [pc, #116]	; (8008fe8 <tcp_input+0x968>)
 8008f74:	6858      	ldr	r0, [r3, #4]
 8008f76:	4b1d      	ldr	r3, [pc, #116]	; (8008fec <tcp_input+0x96c>)
 8008f78:	6819      	ldr	r1, [r3, #0]
 8008f7a:	4b1d      	ldr	r3, [pc, #116]	; (8008ff0 <tcp_input+0x970>)
 8008f7c:	881b      	ldrh	r3, [r3, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	4b1c      	ldr	r3, [pc, #112]	; (8008ff4 <tcp_input+0x974>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	18d4      	adds	r4, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f86:	4b16      	ldr	r3, [pc, #88]	; (8008fe0 <tcp_input+0x960>)
 8008f88:	681b      	ldr	r3, [r3, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f8a:	885b      	ldrh	r3, [r3, #2]
 8008f8c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f8e:	4a14      	ldr	r2, [pc, #80]	; (8008fe0 <tcp_input+0x960>)
 8008f90:	6812      	ldr	r2, [r2, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f92:	8812      	ldrh	r2, [r2, #0]
 8008f94:	b292      	uxth	r2, r2
 8008f96:	9202      	str	r2, [sp, #8]
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	4b17      	ldr	r3, [pc, #92]	; (8008ff8 <tcp_input+0x978>)
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	4b17      	ldr	r3, [pc, #92]	; (8008ffc <tcp_input+0x97c>)
 8008fa0:	4622      	mov	r2, r4
 8008fa2:	f003 ff72 	bl	800ce8a <tcp_rst_netif>
    pbuf_free(p);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7fd f848 	bl	800603c <pbuf_free>
  return;
 8008fac:	e00b      	b.n	8008fc6 <tcp_input+0x946>
dropped:
  TCP_STATS_INC(tcp.drop);
 8008fae:	4b0d      	ldr	r3, [pc, #52]	; (8008fe4 <tcp_input+0x964>)
 8008fb0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	4b0a      	ldr	r3, [pc, #40]	; (8008fe4 <tcp_input+0x964>)
 8008fba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7fd f83c 	bl	800603c <pbuf_free>
 8008fc4:	e000      	b.n	8008fc8 <tcp_input+0x948>
  return;
 8008fc6:	bf00      	nop
}
 8008fc8:	3724      	adds	r7, #36	; 0x24
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd90      	pop	{r4, r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20000730 	.word	0x20000730
 8008fd4:	2000072d 	.word	0x2000072d
 8008fd8:	200022d4 	.word	0x200022d4
 8008fdc:	200006fc 	.word	0x200006fc
 8008fe0:	20000710 	.word	0x20000710
 8008fe4:	20002218 	.word	0x20002218
 8008fe8:	2000087c 	.word	0x2000087c
 8008fec:	20000724 	.word	0x20000724
 8008ff0:	2000072a 	.word	0x2000072a
 8008ff4:	20000720 	.word	0x20000720
 8008ff8:	2000088c 	.word	0x2000088c
 8008ffc:	20000890 	.word	0x20000890

08009000 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d10b      	bne.n	8009026 <tcp_input_delayed_close+0x26>
 800900e:	4b1a      	ldr	r3, [pc, #104]	; (8009078 <tcp_input_delayed_close+0x78>)
 8009010:	f240 225a 	movw	r2, #602	; 0x25a
 8009014:	4919      	ldr	r1, [pc, #100]	; (800907c <tcp_input_delayed_close+0x7c>)
 8009016:	481a      	ldr	r0, [pc, #104]	; (8009080 <tcp_input_delayed_close+0x80>)
 8009018:	f00a fd26 	bl	8013a68 <iprintf>
 800901c:	2000      	movs	r0, #0
 800901e:	f00a fe25 	bl	8013c6c <fflush>
 8009022:	f00a fd6a 	bl	8013afa <abort>

  if (recv_flags & TF_CLOSED) {
 8009026:	4b17      	ldr	r3, [pc, #92]	; (8009084 <tcp_input_delayed_close+0x84>)
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	f003 0310 	and.w	r3, r3, #16
 800902e:	2b00      	cmp	r3, #0
 8009030:	d01c      	beq.n	800906c <tcp_input_delayed_close+0x6c>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	8b5b      	ldrh	r3, [r3, #26]
 8009036:	f003 0310 	and.w	r3, r3, #16
 800903a:	2b00      	cmp	r3, #0
 800903c:	d10d      	bne.n	800905a <tcp_input_delayed_close+0x5a>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009044:	2b00      	cmp	r3, #0
 8009046:	d008      	beq.n	800905a <tcp_input_delayed_close+0x5a>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	6912      	ldr	r2, [r2, #16]
 8009052:	f06f 010e 	mvn.w	r1, #14
 8009056:	4610      	mov	r0, r2
 8009058:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800905a:	6879      	ldr	r1, [r7, #4]
 800905c:	480a      	ldr	r0, [pc, #40]	; (8009088 <tcp_input_delayed_close+0x88>)
 800905e:	f7ff f971 	bl	8008344 <tcp_pcb_remove>
    tcp_free(pcb);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7fd fc04 	bl	8006870 <tcp_free>
    return 1;
 8009068:	2301      	movs	r3, #1
 800906a:	e000      	b.n	800906e <tcp_input_delayed_close+0x6e>
  }
  return 0;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	08016904 	.word	0x08016904
 800907c:	08016ac4 	.word	0x08016ac4
 8009080:	08016940 	.word	0x08016940
 8009084:	2000072d 	.word	0x2000072d
 8009088:	200022c0 	.word	0x200022c0

0800908c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800908c:	b590      	push	{r4, r7, lr}
 800908e:	b08b      	sub	sp, #44	; 0x2c
 8009090:	af04      	add	r7, sp, #16
 8009092:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009094:	4b76      	ldr	r3, [pc, #472]	; (8009270 <tcp_listen_input+0x1e4>)
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	f003 0304 	and.w	r3, r3, #4
 800909c:	2b00      	cmp	r3, #0
 800909e:	f040 80e1 	bne.w	8009264 <tcp_listen_input+0x1d8>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10b      	bne.n	80090c0 <tcp_listen_input+0x34>
 80090a8:	4b72      	ldr	r3, [pc, #456]	; (8009274 <tcp_listen_input+0x1e8>)
 80090aa:	f240 2281 	movw	r2, #641	; 0x281
 80090ae:	4972      	ldr	r1, [pc, #456]	; (8009278 <tcp_listen_input+0x1ec>)
 80090b0:	4872      	ldr	r0, [pc, #456]	; (800927c <tcp_listen_input+0x1f0>)
 80090b2:	f00a fcd9 	bl	8013a68 <iprintf>
 80090b6:	2000      	movs	r0, #0
 80090b8:	f00a fdd8 	bl	8013c6c <fflush>
 80090bc:	f00a fd1d 	bl	8013afa <abort>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80090c0:	4b6b      	ldr	r3, [pc, #428]	; (8009270 <tcp_listen_input+0x1e4>)
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	f003 0310 	and.w	r3, r3, #16
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d01a      	beq.n	8009102 <tcp_listen_input+0x76>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80090cc:	4b6c      	ldr	r3, [pc, #432]	; (8009280 <tcp_listen_input+0x1f4>)
 80090ce:	6858      	ldr	r0, [r3, #4]
 80090d0:	4b6c      	ldr	r3, [pc, #432]	; (8009284 <tcp_listen_input+0x1f8>)
 80090d2:	6819      	ldr	r1, [r3, #0]
 80090d4:	4b6c      	ldr	r3, [pc, #432]	; (8009288 <tcp_listen_input+0x1fc>)
 80090d6:	881b      	ldrh	r3, [r3, #0]
 80090d8:	461a      	mov	r2, r3
 80090da:	4b6c      	ldr	r3, [pc, #432]	; (800928c <tcp_listen_input+0x200>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	18d4      	adds	r4, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80090e0:	4b6b      	ldr	r3, [pc, #428]	; (8009290 <tcp_listen_input+0x204>)
 80090e2:	681b      	ldr	r3, [r3, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80090e4:	885b      	ldrh	r3, [r3, #2]
 80090e6:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80090e8:	4a69      	ldr	r2, [pc, #420]	; (8009290 <tcp_listen_input+0x204>)
 80090ea:	6812      	ldr	r2, [r2, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80090ec:	8812      	ldrh	r2, [r2, #0]
 80090ee:	b292      	uxth	r2, r2
 80090f0:	9202      	str	r2, [sp, #8]
 80090f2:	9301      	str	r3, [sp, #4]
 80090f4:	4b67      	ldr	r3, [pc, #412]	; (8009294 <tcp_listen_input+0x208>)
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	4b67      	ldr	r3, [pc, #412]	; (8009298 <tcp_listen_input+0x20c>)
 80090fa:	4622      	mov	r2, r4
 80090fc:	f003 fec5 	bl	800ce8a <tcp_rst_netif>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009100:	e0b2      	b.n	8009268 <tcp_listen_input+0x1dc>
  } else if (flags & TCP_SYN) {
 8009102:	4b5b      	ldr	r3, [pc, #364]	; (8009270 <tcp_listen_input+0x1e4>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	f003 0302 	and.w	r3, r3, #2
 800910a:	2b00      	cmp	r3, #0
 800910c:	f000 80ac 	beq.w	8009268 <tcp_listen_input+0x1dc>
    npcb = tcp_alloc(pcb->prio);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	7d5b      	ldrb	r3, [r3, #21]
 8009114:	4618      	mov	r0, r3
 8009116:	f7fe ff55 	bl	8007fc4 <tcp_alloc>
 800911a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d119      	bne.n	8009156 <tcp_listen_input+0xca>
      TCP_STATS_INC(tcp.memerr);
 8009122:	4b5e      	ldr	r3, [pc, #376]	; (800929c <tcp_listen_input+0x210>)
 8009124:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009128:	3301      	adds	r3, #1
 800912a:	b29a      	uxth	r2, r3
 800912c:	4b5b      	ldr	r3, [pc, #364]	; (800929c <tcp_listen_input+0x210>)
 800912e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00a      	beq.n	8009150 <tcp_listen_input+0xc4>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	6910      	ldr	r0, [r2, #16]
 8009142:	f04f 32ff 	mov.w	r2, #4294967295
 8009146:	2100      	movs	r1, #0
 8009148:	4798      	blx	r3
 800914a:	4603      	mov	r3, r0
 800914c:	74fb      	strb	r3, [r7, #19]
      return;
 800914e:	e08c      	b.n	800926a <tcp_listen_input+0x1de>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009150:	23f0      	movs	r3, #240	; 0xf0
 8009152:	74fb      	strb	r3, [r7, #19]
      return;
 8009154:	e089      	b.n	800926a <tcp_listen_input+0x1de>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009156:	4b4a      	ldr	r3, [pc, #296]	; (8009280 <tcp_listen_input+0x1f4>)
 8009158:	695a      	ldr	r2, [r3, #20]
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800915e:	4b48      	ldr	r3, [pc, #288]	; (8009280 <tcp_listen_input+0x1f4>)
 8009160:	691a      	ldr	r2, [r3, #16]
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	8ada      	ldrh	r2, [r3, #22]
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800916e:	4b48      	ldr	r3, [pc, #288]	; (8009290 <tcp_listen_input+0x204>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	881b      	ldrh	r3, [r3, #0]
 8009174:	b29a      	uxth	r2, r3
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2203      	movs	r2, #3
 800917e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009180:	4b42      	ldr	r3, [pc, #264]	; (800928c <tcp_listen_input+0x200>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	1c5a      	adds	r2, r3, #1
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009192:	6978      	ldr	r0, [r7, #20]
 8009194:	f7ff f982 	bl	800849c <tcp_next_iss>
 8009198:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80091b2:	4b36      	ldr	r3, [pc, #216]	; (800928c <tcp_listen_input+0x200>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	1e5a      	subs	r2, r3, #1
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	691a      	ldr	r2, [r3, #16]
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	7a5b      	ldrb	r3, [r3, #9]
 80091ce:	f003 030c 	and.w	r3, r3, #12
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	7a1a      	ldrb	r2, [r3, #8]
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80091e0:	4b2f      	ldr	r3, [pc, #188]	; (80092a0 <tcp_listen_input+0x214>)
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	60da      	str	r2, [r3, #12]
 80091e8:	4a2d      	ldr	r2, [pc, #180]	; (80092a0 <tcp_listen_input+0x214>)
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	6013      	str	r3, [r2, #0]
 80091ee:	f003 fff5 	bl	800d1dc <tcp_timer_needed>
 80091f2:	4b2c      	ldr	r3, [pc, #176]	; (80092a4 <tcp_listen_input+0x218>)
 80091f4:	2201      	movs	r2, #1
 80091f6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80091f8:	6978      	ldr	r0, [r7, #20]
 80091fa:	f001 fe05 	bl	800ae08 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80091fe:	4b24      	ldr	r3, [pc, #144]	; (8009290 <tcp_listen_input+0x204>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	89db      	ldrh	r3, [r3, #14]
 8009204:	b29a      	uxth	r2, r3
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	3304      	adds	r3, #4
 8009220:	4618      	mov	r0, r3
 8009222:	f7fa ff6d 	bl	8004100 <ip4_route>
 8009226:	4601      	mov	r1, r0
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	3304      	adds	r3, #4
 800922c:	461a      	mov	r2, r3
 800922e:	4620      	mov	r0, r4
 8009230:	f7ff f95e 	bl	80084f0 <tcp_eff_send_mss_netif>
 8009234:	4603      	mov	r3, r0
 8009236:	461a      	mov	r2, r3
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800923c:	2112      	movs	r1, #18
 800923e:	6978      	ldr	r0, [r7, #20]
 8009240:	f002 fe0e 	bl	800be60 <tcp_enqueue_flags>
 8009244:	4603      	mov	r3, r0
 8009246:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 8009248:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d004      	beq.n	800925a <tcp_listen_input+0x1ce>
      tcp_abandon(npcb, 0);
 8009250:	2100      	movs	r1, #0
 8009252:	6978      	ldr	r0, [r7, #20]
 8009254:	f7fd fd5a 	bl	8006d0c <tcp_abandon>
      return;
 8009258:	e007      	b.n	800926a <tcp_listen_input+0x1de>
    tcp_output(npcb);
 800925a:	6978      	ldr	r0, [r7, #20]
 800925c:	f002 ff0c 	bl	800c078 <tcp_output>
  return;
 8009260:	bf00      	nop
 8009262:	e001      	b.n	8009268 <tcp_listen_input+0x1dc>
    return;
 8009264:	bf00      	nop
 8009266:	e000      	b.n	800926a <tcp_listen_input+0x1de>
  return;
 8009268:	bf00      	nop
}
 800926a:	371c      	adds	r7, #28
 800926c:	46bd      	mov	sp, r7
 800926e:	bd90      	pop	{r4, r7, pc}
 8009270:	2000072c 	.word	0x2000072c
 8009274:	08016904 	.word	0x08016904
 8009278:	08016aec 	.word	0x08016aec
 800927c:	08016940 	.word	0x08016940
 8009280:	2000087c 	.word	0x2000087c
 8009284:	20000724 	.word	0x20000724
 8009288:	2000072a 	.word	0x2000072a
 800928c:	20000720 	.word	0x20000720
 8009290:	20000710 	.word	0x20000710
 8009294:	2000088c 	.word	0x2000088c
 8009298:	20000890 	.word	0x20000890
 800929c:	20002218 	.word	0x20002218
 80092a0:	200022c0 	.word	0x200022c0
 80092a4:	200022bc 	.word	0x200022bc

080092a8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af04      	add	r7, sp, #16
 80092ae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80092b0:	4b32      	ldr	r3, [pc, #200]	; (800937c <tcp_timewait_input+0xd4>)
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	f003 0304 	and.w	r3, r3, #4
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d159      	bne.n	8009370 <tcp_timewait_input+0xc8>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d10b      	bne.n	80092da <tcp_timewait_input+0x32>
 80092c2:	4b2f      	ldr	r3, [pc, #188]	; (8009380 <tcp_timewait_input+0xd8>)
 80092c4:	f240 22f1 	movw	r2, #753	; 0x2f1
 80092c8:	492e      	ldr	r1, [pc, #184]	; (8009384 <tcp_timewait_input+0xdc>)
 80092ca:	482f      	ldr	r0, [pc, #188]	; (8009388 <tcp_timewait_input+0xe0>)
 80092cc:	f00a fbcc 	bl	8013a68 <iprintf>
 80092d0:	2000      	movs	r0, #0
 80092d2:	f00a fccb 	bl	8013c6c <fflush>
 80092d6:	f00a fc10 	bl	8013afa <abort>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80092da:	4b28      	ldr	r3, [pc, #160]	; (800937c <tcp_timewait_input+0xd4>)
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	f003 0302 	and.w	r3, r3, #2
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d02a      	beq.n	800933c <tcp_timewait_input+0x94>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80092e6:	4b29      	ldr	r3, [pc, #164]	; (800938c <tcp_timewait_input+0xe4>)
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	db2d      	blt.n	8009350 <tcp_timewait_input+0xa8>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80092fc:	441a      	add	r2, r3
 80092fe:	4b23      	ldr	r3, [pc, #140]	; (800938c <tcp_timewait_input+0xe4>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	2b00      	cmp	r3, #0
 8009306:	db23      	blt.n	8009350 <tcp_timewait_input+0xa8>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009308:	4b21      	ldr	r3, [pc, #132]	; (8009390 <tcp_timewait_input+0xe8>)
 800930a:	6819      	ldr	r1, [r3, #0]
 800930c:	4b21      	ldr	r3, [pc, #132]	; (8009394 <tcp_timewait_input+0xec>)
 800930e:	881b      	ldrh	r3, [r3, #0]
 8009310:	461a      	mov	r2, r3
 8009312:	4b1e      	ldr	r3, [pc, #120]	; (800938c <tcp_timewait_input+0xe4>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009318:	4b1f      	ldr	r3, [pc, #124]	; (8009398 <tcp_timewait_input+0xf0>)
 800931a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800931c:	885b      	ldrh	r3, [r3, #2]
 800931e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009320:	4a1d      	ldr	r2, [pc, #116]	; (8009398 <tcp_timewait_input+0xf0>)
 8009322:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009324:	8812      	ldrh	r2, [r2, #0]
 8009326:	b292      	uxth	r2, r2
 8009328:	9202      	str	r2, [sp, #8]
 800932a:	9301      	str	r3, [sp, #4]
 800932c:	4b1b      	ldr	r3, [pc, #108]	; (800939c <tcp_timewait_input+0xf4>)
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	4b1b      	ldr	r3, [pc, #108]	; (80093a0 <tcp_timewait_input+0xf8>)
 8009332:	4602      	mov	r2, r0
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f003 fd87 	bl	800ce48 <tcp_rst>
      return;
 800933a:	e01c      	b.n	8009376 <tcp_timewait_input+0xce>
    }
  } else if (flags & TCP_FIN) {
 800933c:	4b0f      	ldr	r3, [pc, #60]	; (800937c <tcp_timewait_input+0xd4>)
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	f003 0301 	and.w	r3, r3, #1
 8009344:	2b00      	cmp	r3, #0
 8009346:	d003      	beq.n	8009350 <tcp_timewait_input+0xa8>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009348:	4b16      	ldr	r3, [pc, #88]	; (80093a4 <tcp_timewait_input+0xfc>)
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009350:	4b10      	ldr	r3, [pc, #64]	; (8009394 <tcp_timewait_input+0xec>)
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00d      	beq.n	8009374 <tcp_timewait_input+0xcc>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	8b5b      	ldrh	r3, [r3, #26]
 800935c:	f043 0302 	orr.w	r3, r3, #2
 8009360:	b29a      	uxth	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f002 fe86 	bl	800c078 <tcp_output>
  }
  return;
 800936c:	bf00      	nop
 800936e:	e001      	b.n	8009374 <tcp_timewait_input+0xcc>
    return;
 8009370:	bf00      	nop
 8009372:	e000      	b.n	8009376 <tcp_timewait_input+0xce>
  return;
 8009374:	bf00      	nop
}
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	2000072c 	.word	0x2000072c
 8009380:	08016904 	.word	0x08016904
 8009384:	08016b0c 	.word	0x08016b0c
 8009388:	08016940 	.word	0x08016940
 800938c:	20000720 	.word	0x20000720
 8009390:	20000724 	.word	0x20000724
 8009394:	2000072a 	.word	0x2000072a
 8009398:	20000710 	.word	0x20000710
 800939c:	2000088c 	.word	0x2000088c
 80093a0:	20000890 	.word	0x20000890
 80093a4:	200022c4 	.word	0x200022c4

080093a8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80093a8:	b590      	push	{r4, r7, lr}
 80093aa:	b08d      	sub	sp, #52	; 0x34
 80093ac:	af04      	add	r7, sp, #16
 80093ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80093b0:	2300      	movs	r3, #0
 80093b2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80093b4:	2300      	movs	r3, #0
 80093b6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10b      	bne.n	80093d6 <tcp_process+0x2e>
 80093be:	4b9c      	ldr	r3, [pc, #624]	; (8009630 <tcp_process+0x288>)
 80093c0:	f240 321f 	movw	r2, #799	; 0x31f
 80093c4:	499b      	ldr	r1, [pc, #620]	; (8009634 <tcp_process+0x28c>)
 80093c6:	489c      	ldr	r0, [pc, #624]	; (8009638 <tcp_process+0x290>)
 80093c8:	f00a fb4e 	bl	8013a68 <iprintf>
 80093cc:	2000      	movs	r0, #0
 80093ce:	f00a fc4d 	bl	8013c6c <fflush>
 80093d2:	f00a fb92 	bl	8013afa <abort>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80093d6:	4b99      	ldr	r3, [pc, #612]	; (800963c <tcp_process+0x294>)
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	f003 0304 	and.w	r3, r3, #4
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d053      	beq.n	800948a <tcp_process+0xe2>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	7d1b      	ldrb	r3, [r3, #20]
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d108      	bne.n	80093fc <tcp_process+0x54>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093ee:	4b94      	ldr	r3, [pc, #592]	; (8009640 <tcp_process+0x298>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d123      	bne.n	800943e <tcp_process+0x96>
        acceptable = 1;
 80093f6:	2301      	movs	r3, #1
 80093f8:	76fb      	strb	r3, [r7, #27]
 80093fa:	e020      	b.n	800943e <tcp_process+0x96>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009400:	4b90      	ldr	r3, [pc, #576]	; (8009644 <tcp_process+0x29c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	429a      	cmp	r2, r3
 8009406:	d102      	bne.n	800940e <tcp_process+0x66>
        acceptable = 1;
 8009408:	2301      	movs	r3, #1
 800940a:	76fb      	strb	r3, [r7, #27]
 800940c:	e017      	b.n	800943e <tcp_process+0x96>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800940e:	4b8d      	ldr	r3, [pc, #564]	; (8009644 <tcp_process+0x29c>)
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	2b00      	cmp	r3, #0
 800941a:	db10      	blt.n	800943e <tcp_process+0x96>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009424:	441a      	add	r2, r3
 8009426:	4b87      	ldr	r3, [pc, #540]	; (8009644 <tcp_process+0x29c>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	2b00      	cmp	r3, #0
 800942e:	db06      	blt.n	800943e <tcp_process+0x96>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	8b5b      	ldrh	r3, [r3, #26]
 8009434:	f043 0302 	orr.w	r3, r3, #2
 8009438:	b29a      	uxth	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800943e:	7efb      	ldrb	r3, [r7, #27]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d020      	beq.n	8009486 <tcp_process+0xde>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	7d1b      	ldrb	r3, [r3, #20]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10b      	bne.n	8009464 <tcp_process+0xbc>
 800944c:	4b78      	ldr	r3, [pc, #480]	; (8009630 <tcp_process+0x288>)
 800944e:	f240 323b 	movw	r2, #827	; 0x33b
 8009452:	497d      	ldr	r1, [pc, #500]	; (8009648 <tcp_process+0x2a0>)
 8009454:	4878      	ldr	r0, [pc, #480]	; (8009638 <tcp_process+0x290>)
 8009456:	f00a fb07 	bl	8013a68 <iprintf>
 800945a:	2000      	movs	r0, #0
 800945c:	f00a fc06 	bl	8013c6c <fflush>
 8009460:	f00a fb4b 	bl	8013afa <abort>
      recv_flags |= TF_RESET;
 8009464:	4b79      	ldr	r3, [pc, #484]	; (800964c <tcp_process+0x2a4>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	f043 0308 	orr.w	r3, r3, #8
 800946c:	b2da      	uxtb	r2, r3
 800946e:	4b77      	ldr	r3, [pc, #476]	; (800964c <tcp_process+0x2a4>)
 8009470:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	8b5b      	ldrh	r3, [r3, #26]
 8009476:	f023 0301 	bic.w	r3, r3, #1
 800947a:	b29a      	uxth	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009480:	f06f 030d 	mvn.w	r3, #13
 8009484:	e3a1      	b.n	8009bca <tcp_process+0x822>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	e39f      	b.n	8009bca <tcp_process+0x822>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800948a:	4b6c      	ldr	r3, [pc, #432]	; (800963c <tcp_process+0x294>)
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b00      	cmp	r3, #0
 8009494:	d010      	beq.n	80094b8 <tcp_process+0x110>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	7d1b      	ldrb	r3, [r3, #20]
 800949a:	2b02      	cmp	r3, #2
 800949c:	d00c      	beq.n	80094b8 <tcp_process+0x110>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	7d1b      	ldrb	r3, [r3, #20]
 80094a2:	2b03      	cmp	r3, #3
 80094a4:	d008      	beq.n	80094b8 <tcp_process+0x110>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	8b5b      	ldrh	r3, [r3, #26]
 80094aa:	f043 0302 	orr.w	r3, r3, #2
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80094b4:	2300      	movs	r3, #0
 80094b6:	e388      	b.n	8009bca <tcp_process+0x822>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	8b5b      	ldrh	r3, [r3, #26]
 80094bc:	f003 0310 	and.w	r3, r3, #16
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d103      	bne.n	80094cc <tcp_process+0x124>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80094c4:	4b62      	ldr	r3, [pc, #392]	; (8009650 <tcp_process+0x2a8>)
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 fc93 	bl	800ae08 <tcp_parseopt>

  if (flags & TCP_SYN) {
 80094e2:	4b56      	ldr	r3, [pc, #344]	; (800963c <tcp_process+0x294>)
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	f003 0302 	and.w	r3, r3, #2
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d009      	beq.n	8009502 <tcp_process+0x15a>
    /* accept SYN only in 2 states: */
    if ((pcb->state != SYN_SENT) && (pcb->state != SYN_RCVD)) {
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	7d1b      	ldrb	r3, [r3, #20]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d005      	beq.n	8009502 <tcp_process+0x15a>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	7d1b      	ldrb	r3, [r3, #20]
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d001      	beq.n	8009502 <tcp_process+0x15a>
      return ERR_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	e363      	b.n	8009bca <tcp_process+0x822>
    }
  }

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	7d1b      	ldrb	r3, [r3, #20]
 8009506:	3b02      	subs	r3, #2
 8009508:	2b07      	cmp	r3, #7
 800950a:	f200 834e 	bhi.w	8009baa <tcp_process+0x802>
 800950e:	a201      	add	r2, pc, #4	; (adr r2, 8009514 <tcp_process+0x16c>)
 8009510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009514:	08009535 	.word	0x08009535
 8009518:	08009773 	.word	0x08009773
 800951c:	08009929 	.word	0x08009929
 8009520:	08009953 	.word	0x08009953
 8009524:	08009a41 	.word	0x08009a41
 8009528:	08009929 	.word	0x08009929
 800952c:	08009acd 	.word	0x08009acd
 8009530:	08009b75 	.word	0x08009b75
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %s %"U32_F"\n",
                                    ackno, pcb->snd_nxt, pcb->unacked ? "" : " empty:",
                                    pcb->unacked ? lwip_ntohl(pcb->unacked->tcphdr->seqno) : 0));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009534:	4b41      	ldr	r3, [pc, #260]	; (800963c <tcp_process+0x294>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	f003 0310 	and.w	r3, r3, #16
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 80eb 	beq.w	8009718 <tcp_process+0x370>
 8009542:	4b3e      	ldr	r3, [pc, #248]	; (800963c <tcp_process+0x294>)
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	f003 0302 	and.w	r3, r3, #2
 800954a:	2b00      	cmp	r3, #0
 800954c:	f000 80e4 	beq.w	8009718 <tcp_process+0x370>
          && (ackno == pcb->lastack + 1)) {
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009554:	1c5a      	adds	r2, r3, #1
 8009556:	4b3a      	ldr	r3, [pc, #232]	; (8009640 <tcp_process+0x298>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	429a      	cmp	r2, r3
 800955c:	f040 80dc 	bne.w	8009718 <tcp_process+0x370>
        pcb->rcv_nxt = seqno + 1;
 8009560:	4b38      	ldr	r3, [pc, #224]	; (8009644 <tcp_process+0x29c>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	1c5a      	adds	r2, r3, #1
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009572:	4b33      	ldr	r3, [pc, #204]	; (8009640 <tcp_process+0x298>)
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800957a:	4b36      	ldr	r3, [pc, #216]	; (8009654 <tcp_process+0x2ac>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	89db      	ldrh	r3, [r3, #14]
 8009580:	b29a      	uxth	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009594:	4b2b      	ldr	r3, [pc, #172]	; (8009644 <tcp_process+0x29c>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	1e5a      	subs	r2, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2204      	movs	r2, #4
 80095a2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	3304      	adds	r3, #4
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fa fda7 	bl	8004100 <ip4_route>
 80095b2:	4601      	mov	r1, r0
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	3304      	adds	r3, #4
 80095b8:	461a      	mov	r2, r3
 80095ba:	4620      	mov	r0, r4
 80095bc:	f7fe ff98 	bl	80084f0 <tcp_eff_send_mss_netif>
 80095c0:	4603      	mov	r3, r0
 80095c2:	461a      	mov	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095cc:	009a      	lsls	r2, r3, #2
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095d2:	005b      	lsls	r3, r3, #1
 80095d4:	f241 111c 	movw	r1, #4380	; 0x111c
 80095d8:	428b      	cmp	r3, r1
 80095da:	bf38      	it	cc
 80095dc:	460b      	movcc	r3, r1
 80095de:	429a      	cmp	r2, r3
 80095e0:	d204      	bcs.n	80095ec <tcp_process+0x244>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	e00d      	b.n	8009608 <tcp_process+0x260>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095f0:	005b      	lsls	r3, r3, #1
 80095f2:	f241 121c 	movw	r2, #4380	; 0x111c
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d904      	bls.n	8009604 <tcp_process+0x25c>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095fe:	005b      	lsls	r3, r3, #1
 8009600:	b29b      	uxth	r3, r3
 8009602:	e001      	b.n	8009608 <tcp_process+0x260>
 8009604:	f241 131c 	movw	r3, #4380	; 0x111c
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009614:	2b00      	cmp	r3, #0
 8009616:	d121      	bne.n	800965c <tcp_process+0x2b4>
 8009618:	4b05      	ldr	r3, [pc, #20]	; (8009630 <tcp_process+0x288>)
 800961a:	f240 3277 	movw	r2, #887	; 0x377
 800961e:	490e      	ldr	r1, [pc, #56]	; (8009658 <tcp_process+0x2b0>)
 8009620:	4805      	ldr	r0, [pc, #20]	; (8009638 <tcp_process+0x290>)
 8009622:	f00a fa21 	bl	8013a68 <iprintf>
 8009626:	2000      	movs	r0, #0
 8009628:	f00a fb20 	bl	8013c6c <fflush>
 800962c:	f00a fa65 	bl	8013afa <abort>
 8009630:	08016904 	.word	0x08016904
 8009634:	08016b2c 	.word	0x08016b2c
 8009638:	08016940 	.word	0x08016940
 800963c:	2000072c 	.word	0x2000072c
 8009640:	20000724 	.word	0x20000724
 8009644:	20000720 	.word	0x20000720
 8009648:	08016b48 	.word	0x08016b48
 800964c:	2000072d 	.word	0x2000072d
 8009650:	200022c4 	.word	0x200022c4
 8009654:	20000710 	.word	0x20000710
 8009658:	08016b68 	.word	0x08016b68
        --pcb->snd_queuelen;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009662:	3b01      	subs	r3, #1
 8009664:	b29a      	uxth	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009670:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d116      	bne.n	80096a6 <tcp_process+0x2fe>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800967c:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10b      	bne.n	800969c <tcp_process+0x2f4>
 8009684:	4b9b      	ldr	r3, [pc, #620]	; (80098f4 <tcp_process+0x54c>)
 8009686:	f240 327f 	movw	r2, #895	; 0x37f
 800968a:	499b      	ldr	r1, [pc, #620]	; (80098f8 <tcp_process+0x550>)
 800968c:	489b      	ldr	r0, [pc, #620]	; (80098fc <tcp_process+0x554>)
 800968e:	f00a f9eb 	bl	8013a68 <iprintf>
 8009692:	2000      	movs	r0, #0
 8009694:	f00a faea 	bl	8013c6c <fflush>
 8009698:	f00a fa2f 	bl	8013afa <abort>
          pcb->unsent = rseg->next;
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	66da      	str	r2, [r3, #108]	; 0x6c
 80096a4:	e003      	b.n	80096ae <tcp_process+0x306>
        } else {
          pcb->unacked = rseg->next;
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80096ae:	69f8      	ldr	r0, [r7, #28]
 80096b0:	f7fe fb14 	bl	8007cdc <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d104      	bne.n	80096c6 <tcp_process+0x31e>
          pcb->rtime = -1;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096c2:	861a      	strh	r2, [r3, #48]	; 0x30
 80096c4:	e006      	b.n	80096d4 <tcp_process+0x32c>
        } else {
          pcb->rtime = 0;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00a      	beq.n	80096f4 <tcp_process+0x34c>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	6910      	ldr	r0, [r2, #16]
 80096e8:	2200      	movs	r2, #0
 80096ea:	6879      	ldr	r1, [r7, #4]
 80096ec:	4798      	blx	r3
 80096ee:	4603      	mov	r3, r0
 80096f0:	76bb      	strb	r3, [r7, #26]
 80096f2:	e001      	b.n	80096f8 <tcp_process+0x350>
 80096f4:	2300      	movs	r3, #0
 80096f6:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80096f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80096fc:	f113 0f0d 	cmn.w	r3, #13
 8009700:	d102      	bne.n	8009708 <tcp_process+0x360>
          return ERR_ABRT;
 8009702:	f06f 030c 	mvn.w	r3, #12
 8009706:	e260      	b.n	8009bca <tcp_process+0x822>
        }
        tcp_ack_now(pcb);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	8b5b      	ldrh	r3, [r3, #26]
 800970c:	f043 0302 	orr.w	r3, r3, #2
 8009710:	b29a      	uxth	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009716:	e24a      	b.n	8009bae <tcp_process+0x806>
      else if (flags & TCP_ACK) {
 8009718:	4b79      	ldr	r3, [pc, #484]	; (8009900 <tcp_process+0x558>)
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	f003 0310 	and.w	r3, r3, #16
 8009720:	2b00      	cmp	r3, #0
 8009722:	f000 8244 	beq.w	8009bae <tcp_process+0x806>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009726:	4b77      	ldr	r3, [pc, #476]	; (8009904 <tcp_process+0x55c>)
 8009728:	6819      	ldr	r1, [r3, #0]
 800972a:	4b77      	ldr	r3, [pc, #476]	; (8009908 <tcp_process+0x560>)
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	461a      	mov	r2, r3
 8009730:	4b76      	ldr	r3, [pc, #472]	; (800990c <tcp_process+0x564>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009736:	4b76      	ldr	r3, [pc, #472]	; (8009910 <tcp_process+0x568>)
 8009738:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800973a:	885b      	ldrh	r3, [r3, #2]
 800973c:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800973e:	4a74      	ldr	r2, [pc, #464]	; (8009910 <tcp_process+0x568>)
 8009740:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009742:	8812      	ldrh	r2, [r2, #0]
 8009744:	b292      	uxth	r2, r2
 8009746:	9202      	str	r2, [sp, #8]
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	4b72      	ldr	r3, [pc, #456]	; (8009914 <tcp_process+0x56c>)
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	4b72      	ldr	r3, [pc, #456]	; (8009918 <tcp_process+0x570>)
 8009750:	4602      	mov	r2, r0
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f003 fb78 	bl	800ce48 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800975e:	2b05      	cmp	r3, #5
 8009760:	f200 8225 	bhi.w	8009bae <tcp_process+0x806>
          pcb->rtime = 0;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f003 f870 	bl	800c850 <tcp_rexmit_rto>
      break;
 8009770:	e21d      	b.n	8009bae <tcp_process+0x806>
    case SYN_RCVD:
      if (flags & TCP_SYN) {
 8009772:	4b63      	ldr	r3, [pc, #396]	; (8009900 <tcp_process+0x558>)
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00b      	beq.n	8009796 <tcp_process+0x3ee>
        if (seqno == pcb->rcv_nxt - 1) {
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009782:	1e5a      	subs	r2, r3, #1
 8009784:	4b61      	ldr	r3, [pc, #388]	; (800990c <tcp_process+0x564>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	429a      	cmp	r2, r3
 800978a:	f040 8212 	bne.w	8009bb2 <tcp_process+0x80a>
          /* Looks like another copy of the SYN - retransmit our SYN-ACK */
          tcp_rexmit(pcb);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f003 f884 	bl	800c89c <tcp_rexmit>
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
        }
      }
      break;
 8009794:	e20d      	b.n	8009bb2 <tcp_process+0x80a>
      } else if (flags & TCP_ACK) {
 8009796:	4b5a      	ldr	r3, [pc, #360]	; (8009900 <tcp_process+0x558>)
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	f003 0310 	and.w	r3, r3, #16
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f000 8207 	beq.w	8009bb2 <tcp_process+0x80a>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80097a4:	4b57      	ldr	r3, [pc, #348]	; (8009904 <tcp_process+0x55c>)
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ac:	1ad3      	subs	r3, r2, r3
 80097ae:	3b01      	subs	r3, #1
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f2c0 8084 	blt.w	80098be <tcp_process+0x516>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097ba:	4b52      	ldr	r3, [pc, #328]	; (8009904 <tcp_process+0x55c>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	db7c      	blt.n	80098be <tcp_process+0x516>
          pcb->state = ESTABLISHED;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2204      	movs	r2, #4
 80097c8:	751a      	strb	r2, [r3, #20]
          if (pcb->listener == NULL) {
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d102      	bne.n	80097d8 <tcp_process+0x430>
            err = ERR_VAL;
 80097d2:	23fa      	movs	r3, #250	; 0xfa
 80097d4:	76bb      	strb	r3, [r7, #26]
 80097d6:	e022      	b.n	800981e <tcp_process+0x476>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10b      	bne.n	80097fa <tcp_process+0x452>
 80097e2:	4b44      	ldr	r3, [pc, #272]	; (80098f4 <tcp_process+0x54c>)
 80097e4:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 80097e8:	494c      	ldr	r1, [pc, #304]	; (800991c <tcp_process+0x574>)
 80097ea:	4844      	ldr	r0, [pc, #272]	; (80098fc <tcp_process+0x554>)
 80097ec:	f00a f93c 	bl	8013a68 <iprintf>
 80097f0:	2000      	movs	r0, #0
 80097f2:	f00a fa3b 	bl	8013c6c <fflush>
 80097f6:	f00a f980 	bl	8013afa <abort>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00a      	beq.n	800981a <tcp_process+0x472>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	6910      	ldr	r0, [r2, #16]
 800980e:	2200      	movs	r2, #0
 8009810:	6879      	ldr	r1, [r7, #4]
 8009812:	4798      	blx	r3
 8009814:	4603      	mov	r3, r0
 8009816:	76bb      	strb	r3, [r7, #26]
 8009818:	e001      	b.n	800981e <tcp_process+0x476>
 800981a:	23f0      	movs	r3, #240	; 0xf0
 800981c:	76bb      	strb	r3, [r7, #26]
          if (err != ERR_OK) {
 800981e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00a      	beq.n	800983c <tcp_process+0x494>
            if (err != ERR_ABRT) {
 8009826:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800982a:	f113 0f0d 	cmn.w	r3, #13
 800982e:	d002      	beq.n	8009836 <tcp_process+0x48e>
              tcp_abort(pcb);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7fd fb2d 	bl	8006e90 <tcp_abort>
            return ERR_ABRT;
 8009836:	f06f 030c 	mvn.w	r3, #12
 800983a:	e1c6      	b.n	8009bca <tcp_process+0x822>
          tcp_receive(pcb);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fae1 	bl	8009e04 <tcp_receive>
          if (recv_acked != 0) {
 8009842:	4b37      	ldr	r3, [pc, #220]	; (8009920 <tcp_process+0x578>)
 8009844:	881b      	ldrh	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d005      	beq.n	8009856 <tcp_process+0x4ae>
            recv_acked--;
 800984a:	4b35      	ldr	r3, [pc, #212]	; (8009920 <tcp_process+0x578>)
 800984c:	881b      	ldrh	r3, [r3, #0]
 800984e:	3b01      	subs	r3, #1
 8009850:	b29a      	uxth	r2, r3
 8009852:	4b33      	ldr	r3, [pc, #204]	; (8009920 <tcp_process+0x578>)
 8009854:	801a      	strh	r2, [r3, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800985a:	009a      	lsls	r2, r3, #2
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	f241 111c 	movw	r1, #4380	; 0x111c
 8009866:	428b      	cmp	r3, r1
 8009868:	bf38      	it	cc
 800986a:	460b      	movcc	r3, r1
 800986c:	429a      	cmp	r2, r3
 800986e:	d204      	bcs.n	800987a <tcp_process+0x4d2>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	b29b      	uxth	r3, r3
 8009878:	e00d      	b.n	8009896 <tcp_process+0x4ee>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800987e:	005b      	lsls	r3, r3, #1
 8009880:	f241 121c 	movw	r2, #4380	; 0x111c
 8009884:	4293      	cmp	r3, r2
 8009886:	d904      	bls.n	8009892 <tcp_process+0x4ea>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800988c:	005b      	lsls	r3, r3, #1
 800988e:	b29b      	uxth	r3, r3
 8009890:	e001      	b.n	8009896 <tcp_process+0x4ee>
 8009892:	f241 131c 	movw	r3, #4380	; 0x111c
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800989c:	4b21      	ldr	r3, [pc, #132]	; (8009924 <tcp_process+0x57c>)
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	f003 0320 	and.w	r3, r3, #32
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d024      	beq.n	80098f2 <tcp_process+0x54a>
            tcp_ack_now(pcb);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	8b5b      	ldrh	r3, [r3, #26]
 80098ac:	f043 0302 	orr.w	r3, r3, #2
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2207      	movs	r2, #7
 80098ba:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80098bc:	e019      	b.n	80098f2 <tcp_process+0x54a>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098be:	4b11      	ldr	r3, [pc, #68]	; (8009904 <tcp_process+0x55c>)
 80098c0:	6819      	ldr	r1, [r3, #0]
 80098c2:	4b11      	ldr	r3, [pc, #68]	; (8009908 <tcp_process+0x560>)
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	461a      	mov	r2, r3
 80098c8:	4b10      	ldr	r3, [pc, #64]	; (800990c <tcp_process+0x564>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098ce:	4b10      	ldr	r3, [pc, #64]	; (8009910 <tcp_process+0x568>)
 80098d0:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098d2:	885b      	ldrh	r3, [r3, #2]
 80098d4:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098d6:	4a0e      	ldr	r2, [pc, #56]	; (8009910 <tcp_process+0x568>)
 80098d8:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098da:	8812      	ldrh	r2, [r2, #0]
 80098dc:	b292      	uxth	r2, r2
 80098de:	9202      	str	r2, [sp, #8]
 80098e0:	9301      	str	r3, [sp, #4]
 80098e2:	4b0c      	ldr	r3, [pc, #48]	; (8009914 <tcp_process+0x56c>)
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	4b0c      	ldr	r3, [pc, #48]	; (8009918 <tcp_process+0x570>)
 80098e8:	4602      	mov	r2, r0
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f003 faac 	bl	800ce48 <tcp_rst>
      break;
 80098f0:	e15f      	b.n	8009bb2 <tcp_process+0x80a>
 80098f2:	e15e      	b.n	8009bb2 <tcp_process+0x80a>
 80098f4:	08016904 	.word	0x08016904
 80098f8:	08016b80 	.word	0x08016b80
 80098fc:	08016940 	.word	0x08016940
 8009900:	2000072c 	.word	0x2000072c
 8009904:	20000724 	.word	0x20000724
 8009908:	2000072a 	.word	0x2000072a
 800990c:	20000720 	.word	0x20000720
 8009910:	20000710 	.word	0x20000710
 8009914:	2000088c 	.word	0x2000088c
 8009918:	20000890 	.word	0x20000890
 800991c:	08016b94 	.word	0x08016b94
 8009920:	20000728 	.word	0x20000728
 8009924:	2000072d 	.word	0x2000072d
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fa6b 	bl	8009e04 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800992e:	4b8b      	ldr	r3, [pc, #556]	; (8009b5c <tcp_process+0x7b4>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	f003 0320 	and.w	r3, r3, #32
 8009936:	2b00      	cmp	r3, #0
 8009938:	f000 813d 	beq.w	8009bb6 <tcp_process+0x80e>
        tcp_ack_now(pcb);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	8b5b      	ldrh	r3, [r3, #26]
 8009940:	f043 0302 	orr.w	r3, r3, #2
 8009944:	b29a      	uxth	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2207      	movs	r2, #7
 800994e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009950:	e131      	b.n	8009bb6 <tcp_process+0x80e>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fa56 	bl	8009e04 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009958:	4b80      	ldr	r3, [pc, #512]	; (8009b5c <tcp_process+0x7b4>)
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	f003 0320 	and.w	r3, r3, #32
 8009960:	2b00      	cmp	r3, #0
 8009962:	d056      	beq.n	8009a12 <tcp_process+0x66a>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009964:	4b7e      	ldr	r3, [pc, #504]	; (8009b60 <tcp_process+0x7b8>)
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	f003 0310 	and.w	r3, r3, #16
 800996c:	2b00      	cmp	r3, #0
 800996e:	d045      	beq.n	80099fc <tcp_process+0x654>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009974:	4b7b      	ldr	r3, [pc, #492]	; (8009b64 <tcp_process+0x7bc>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	429a      	cmp	r2, r3
 800997a:	d13f      	bne.n	80099fc <tcp_process+0x654>
            pcb->unsent == NULL) {
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009980:	2b00      	cmp	r3, #0
 8009982:	d13b      	bne.n	80099fc <tcp_process+0x654>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	8b5b      	ldrh	r3, [r3, #26]
 8009988:	f043 0302 	orr.w	r3, r3, #2
 800998c:	b29a      	uxth	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7fe fc86 	bl	80082a4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009998:	4b73      	ldr	r3, [pc, #460]	; (8009b68 <tcp_process+0x7c0>)
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d105      	bne.n	80099ae <tcp_process+0x606>
 80099a2:	4b71      	ldr	r3, [pc, #452]	; (8009b68 <tcp_process+0x7c0>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	4a6f      	ldr	r2, [pc, #444]	; (8009b68 <tcp_process+0x7c0>)
 80099aa:	6013      	str	r3, [r2, #0]
 80099ac:	e013      	b.n	80099d6 <tcp_process+0x62e>
 80099ae:	4b6e      	ldr	r3, [pc, #440]	; (8009b68 <tcp_process+0x7c0>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	617b      	str	r3, [r7, #20]
 80099b4:	e00c      	b.n	80099d0 <tcp_process+0x628>
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	68da      	ldr	r2, [r3, #12]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d104      	bne.n	80099ca <tcp_process+0x622>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	68da      	ldr	r2, [r3, #12]
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	60da      	str	r2, [r3, #12]
 80099c8:	e005      	b.n	80099d6 <tcp_process+0x62e>
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	617b      	str	r3, [r7, #20]
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1ef      	bne.n	80099b6 <tcp_process+0x60e>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	60da      	str	r2, [r3, #12]
 80099dc:	4b63      	ldr	r3, [pc, #396]	; (8009b6c <tcp_process+0x7c4>)
 80099de:	2201      	movs	r2, #1
 80099e0:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	220a      	movs	r2, #10
 80099e6:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80099e8:	4b61      	ldr	r3, [pc, #388]	; (8009b70 <tcp_process+0x7c8>)
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	60da      	str	r2, [r3, #12]
 80099f0:	4a5f      	ldr	r2, [pc, #380]	; (8009b70 <tcp_process+0x7c8>)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6013      	str	r3, [r2, #0]
 80099f6:	f003 fbf1 	bl	800d1dc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80099fa:	e0de      	b.n	8009bba <tcp_process+0x812>
          tcp_ack_now(pcb);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	8b5b      	ldrh	r3, [r3, #26]
 8009a00:	f043 0302 	orr.w	r3, r3, #2
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2208      	movs	r2, #8
 8009a0e:	751a      	strb	r2, [r3, #20]
      break;
 8009a10:	e0d3      	b.n	8009bba <tcp_process+0x812>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a12:	4b53      	ldr	r3, [pc, #332]	; (8009b60 <tcp_process+0x7b8>)
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	f003 0310 	and.w	r3, r3, #16
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 80cd 	beq.w	8009bba <tcp_process+0x812>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a24:	4b4f      	ldr	r3, [pc, #316]	; (8009b64 <tcp_process+0x7bc>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	f040 80c6 	bne.w	8009bba <tcp_process+0x812>
                 pcb->unsent == NULL) {
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f040 80c1 	bne.w	8009bba <tcp_process+0x812>
        pcb->state = FIN_WAIT_2;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2206      	movs	r2, #6
 8009a3c:	751a      	strb	r2, [r3, #20]
      break;
 8009a3e:	e0bc      	b.n	8009bba <tcp_process+0x812>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f9df 	bl	8009e04 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009a46:	4b45      	ldr	r3, [pc, #276]	; (8009b5c <tcp_process+0x7b4>)
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	f003 0320 	and.w	r3, r3, #32
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f000 80b5 	beq.w	8009bbe <tcp_process+0x816>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	8b5b      	ldrh	r3, [r3, #26]
 8009a58:	f043 0302 	orr.w	r3, r3, #2
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7fe fc1e 	bl	80082a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009a68:	4b3f      	ldr	r3, [pc, #252]	; (8009b68 <tcp_process+0x7c0>)
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d105      	bne.n	8009a7e <tcp_process+0x6d6>
 8009a72:	4b3d      	ldr	r3, [pc, #244]	; (8009b68 <tcp_process+0x7c0>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	4a3b      	ldr	r2, [pc, #236]	; (8009b68 <tcp_process+0x7c0>)
 8009a7a:	6013      	str	r3, [r2, #0]
 8009a7c:	e013      	b.n	8009aa6 <tcp_process+0x6fe>
 8009a7e:	4b3a      	ldr	r3, [pc, #232]	; (8009b68 <tcp_process+0x7c0>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	613b      	str	r3, [r7, #16]
 8009a84:	e00c      	b.n	8009aa0 <tcp_process+0x6f8>
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	68da      	ldr	r2, [r3, #12]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d104      	bne.n	8009a9a <tcp_process+0x6f2>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	68da      	ldr	r2, [r3, #12]
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	60da      	str	r2, [r3, #12]
 8009a98:	e005      	b.n	8009aa6 <tcp_process+0x6fe>
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	613b      	str	r3, [r7, #16]
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1ef      	bne.n	8009a86 <tcp_process+0x6de>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	60da      	str	r2, [r3, #12]
 8009aac:	4b2f      	ldr	r3, [pc, #188]	; (8009b6c <tcp_process+0x7c4>)
 8009aae:	2201      	movs	r2, #1
 8009ab0:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	220a      	movs	r2, #10
 8009ab6:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009ab8:	4b2d      	ldr	r3, [pc, #180]	; (8009b70 <tcp_process+0x7c8>)
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	60da      	str	r2, [r3, #12]
 8009ac0:	4a2b      	ldr	r2, [pc, #172]	; (8009b70 <tcp_process+0x7c8>)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6013      	str	r3, [r2, #0]
 8009ac6:	f003 fb89 	bl	800d1dc <tcp_timer_needed>
      }
      break;
 8009aca:	e078      	b.n	8009bbe <tcp_process+0x816>
    case CLOSING:
      tcp_receive(pcb);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 f999 	bl	8009e04 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009ad2:	4b23      	ldr	r3, [pc, #140]	; (8009b60 <tcp_process+0x7b8>)
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	f003 0310 	and.w	r3, r3, #16
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d071      	beq.n	8009bc2 <tcp_process+0x81a>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ae2:	4b20      	ldr	r3, [pc, #128]	; (8009b64 <tcp_process+0x7bc>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d16b      	bne.n	8009bc2 <tcp_process+0x81a>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d167      	bne.n	8009bc2 <tcp_process+0x81a>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f7fe fbd6 	bl	80082a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009af8:	4b1b      	ldr	r3, [pc, #108]	; (8009b68 <tcp_process+0x7c0>)
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d105      	bne.n	8009b0e <tcp_process+0x766>
 8009b02:	4b19      	ldr	r3, [pc, #100]	; (8009b68 <tcp_process+0x7c0>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	4a17      	ldr	r2, [pc, #92]	; (8009b68 <tcp_process+0x7c0>)
 8009b0a:	6013      	str	r3, [r2, #0]
 8009b0c:	e013      	b.n	8009b36 <tcp_process+0x78e>
 8009b0e:	4b16      	ldr	r3, [pc, #88]	; (8009b68 <tcp_process+0x7c0>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	60fb      	str	r3, [r7, #12]
 8009b14:	e00c      	b.n	8009b30 <tcp_process+0x788>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	68da      	ldr	r2, [r3, #12]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d104      	bne.n	8009b2a <tcp_process+0x782>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	68da      	ldr	r2, [r3, #12]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	60da      	str	r2, [r3, #12]
 8009b28:	e005      	b.n	8009b36 <tcp_process+0x78e>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	60fb      	str	r3, [r7, #12]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1ef      	bne.n	8009b16 <tcp_process+0x76e>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	60da      	str	r2, [r3, #12]
 8009b3c:	4b0b      	ldr	r3, [pc, #44]	; (8009b6c <tcp_process+0x7c4>)
 8009b3e:	2201      	movs	r2, #1
 8009b40:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	220a      	movs	r2, #10
 8009b46:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009b48:	4b09      	ldr	r3, [pc, #36]	; (8009b70 <tcp_process+0x7c8>)
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	60da      	str	r2, [r3, #12]
 8009b50:	4a07      	ldr	r2, [pc, #28]	; (8009b70 <tcp_process+0x7c8>)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6013      	str	r3, [r2, #0]
 8009b56:	f003 fb41 	bl	800d1dc <tcp_timer_needed>
      }
      break;
 8009b5a:	e032      	b.n	8009bc2 <tcp_process+0x81a>
 8009b5c:	2000072d 	.word	0x2000072d
 8009b60:	2000072c 	.word	0x2000072c
 8009b64:	20000724 	.word	0x20000724
 8009b68:	200022c0 	.word	0x200022c0
 8009b6c:	200022bc 	.word	0x200022bc
 8009b70:	200022d0 	.word	0x200022d0
    case LAST_ACK:
      tcp_receive(pcb);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f945 	bl	8009e04 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009b7a:	4b16      	ldr	r3, [pc, #88]	; (8009bd4 <tcp_process+0x82c>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	f003 0310 	and.w	r3, r3, #16
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d01f      	beq.n	8009bc6 <tcp_process+0x81e>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b8a:	4b13      	ldr	r3, [pc, #76]	; (8009bd8 <tcp_process+0x830>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d119      	bne.n	8009bc6 <tcp_process+0x81e>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d115      	bne.n	8009bc6 <tcp_process+0x81e>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009b9a:	4b10      	ldr	r3, [pc, #64]	; (8009bdc <tcp_process+0x834>)
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	f043 0310 	orr.w	r3, r3, #16
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	4b0d      	ldr	r3, [pc, #52]	; (8009bdc <tcp_process+0x834>)
 8009ba6:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009ba8:	e00d      	b.n	8009bc6 <tcp_process+0x81e>
    default:
      break;
 8009baa:	bf00      	nop
 8009bac:	e00c      	b.n	8009bc8 <tcp_process+0x820>
      break;
 8009bae:	bf00      	nop
 8009bb0:	e00a      	b.n	8009bc8 <tcp_process+0x820>
      break;
 8009bb2:	bf00      	nop
 8009bb4:	e008      	b.n	8009bc8 <tcp_process+0x820>
      break;
 8009bb6:	bf00      	nop
 8009bb8:	e006      	b.n	8009bc8 <tcp_process+0x820>
      break;
 8009bba:	bf00      	nop
 8009bbc:	e004      	b.n	8009bc8 <tcp_process+0x820>
      break;
 8009bbe:	bf00      	nop
 8009bc0:	e002      	b.n	8009bc8 <tcp_process+0x820>
      break;
 8009bc2:	bf00      	nop
 8009bc4:	e000      	b.n	8009bc8 <tcp_process+0x820>
      break;
 8009bc6:	bf00      	nop
  }
  return ERR_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3724      	adds	r7, #36	; 0x24
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd90      	pop	{r4, r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	2000072c 	.word	0x2000072c
 8009bd8:	20000724 	.word	0x20000724
 8009bdc:	2000072d 	.word	0x2000072d

08009be0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009be0:	b5b0      	push	{r4, r5, r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10b      	bne.n	8009c08 <tcp_oos_insert_segment+0x28>
 8009bf0:	4b3d      	ldr	r3, [pc, #244]	; (8009ce8 <tcp_oos_insert_segment+0x108>)
 8009bf2:	f240 422c 	movw	r2, #1068	; 0x42c
 8009bf6:	493d      	ldr	r1, [pc, #244]	; (8009cec <tcp_oos_insert_segment+0x10c>)
 8009bf8:	483d      	ldr	r0, [pc, #244]	; (8009cf0 <tcp_oos_insert_segment+0x110>)
 8009bfa:	f009 ff35 	bl	8013a68 <iprintf>
 8009bfe:	2000      	movs	r0, #0
 8009c00:	f00a f834 	bl	8013c6c <fflush>
 8009c04:	f009 ff79 	bl	8013afa <abort>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	899b      	ldrh	r3, [r3, #12]
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fa f901 	bl	8003e18 <lwip_htons>
 8009c16:	4603      	mov	r3, r0
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d027      	beq.n	8009c72 <tcp_oos_insert_segment+0x92>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009c22:	6838      	ldr	r0, [r7, #0]
 8009c24:	f7fe f846 	bl	8007cb4 <tcp_segs_free>
    next = NULL;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	603b      	str	r3, [r7, #0]
 8009c2c:	e055      	b.n	8009cda <tcp_oos_insert_segment+0xfa>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	899b      	ldrh	r3, [r3, #12]
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fa f8ee 	bl	8003e18 <lwip_htons>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00c      	beq.n	8009c62 <tcp_oos_insert_segment+0x82>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	691c      	ldr	r4, [r3, #16]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	899b      	ldrh	r3, [r3, #12]
 8009c52:	b29d      	uxth	r5, r3
 8009c54:	2001      	movs	r0, #1
 8009c56:	f7fa f8df 	bl	8003e18 <lwip_htons>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	432b      	orrs	r3, r5
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f7fe f835 	bl	8007cdc <tcp_seg_free>
    while (next &&
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00e      	beq.n	8009c96 <tcp_oos_insert_segment+0xb6>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	891b      	ldrh	r3, [r3, #8]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	4b1d      	ldr	r3, [pc, #116]	; (8009cf4 <tcp_oos_insert_segment+0x114>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	441a      	add	r2, r3
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	6839      	ldr	r1, [r7, #0]
 8009c8c:	8909      	ldrh	r1, [r1, #8]
 8009c8e:	440b      	add	r3, r1
 8009c90:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	dacb      	bge.n	8009c2e <tcp_oos_insert_segment+0x4e>
    }
    if (next &&
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d01e      	beq.n	8009cda <tcp_oos_insert_segment+0xfa>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	891b      	ldrh	r3, [r3, #8]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	4b12      	ldr	r3, [pc, #72]	; (8009cf4 <tcp_oos_insert_segment+0x114>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	440b      	add	r3, r1
 8009cae:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	da12      	bge.n	8009cda <tcp_oos_insert_segment+0xfa>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	4b0d      	ldr	r3, [pc, #52]	; (8009cf4 <tcp_oos_insert_segment+0x114>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685a      	ldr	r2, [r3, #4]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	891b      	ldrh	r3, [r3, #8]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	4610      	mov	r0, r2
 8009cd6:	f7fc f839 	bl	8005d4c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	683a      	ldr	r2, [r7, #0]
 8009cde:	601a      	str	r2, [r3, #0]
}
 8009ce0:	bf00      	nop
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8009ce8:	08016904 	.word	0x08016904
 8009cec:	08016bb4 	.word	0x08016bb4
 8009cf0:	08016940 	.word	0x08016940
 8009cf4:	20000720 	.word	0x20000720

08009cf8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cfa:	b087      	sub	sp, #28
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009d06:	e048      	b.n	8009d9a <tcp_free_acked_segments+0xa2>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fc fa12 	bl	8006140 <pbuf_clen>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d26:	8a7a      	ldrh	r2, [r7, #18]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d90b      	bls.n	8009d44 <tcp_free_acked_segments+0x4c>
 8009d2c:	4b2f      	ldr	r3, [pc, #188]	; (8009dec <tcp_free_acked_segments+0xf4>)
 8009d2e:	f240 4264 	movw	r2, #1124	; 0x464
 8009d32:	492f      	ldr	r1, [pc, #188]	; (8009df0 <tcp_free_acked_segments+0xf8>)
 8009d34:	482f      	ldr	r0, [pc, #188]	; (8009df4 <tcp_free_acked_segments+0xfc>)
 8009d36:	f009 fe97 	bl	8013a68 <iprintf>
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	f009 ff96 	bl	8013c6c <fflush>
 8009d40:	f009 fedb 	bl	8013afa <abort>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009d4a:	8a7b      	ldrh	r3, [r7, #18]
 8009d4c:	1ad3      	subs	r3, r2, r3
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	891a      	ldrh	r2, [r3, #8]
 8009d5a:	4b27      	ldr	r3, [pc, #156]	; (8009df8 <tcp_free_acked_segments+0x100>)
 8009d5c:	881b      	ldrh	r3, [r3, #0]
 8009d5e:	4413      	add	r3, r2
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	4b25      	ldr	r3, [pc, #148]	; (8009df8 <tcp_free_acked_segments+0x100>)
 8009d64:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009d66:	6978      	ldr	r0, [r7, #20]
 8009d68:	f7fd ffb8 	bl	8007cdc <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d011      	beq.n	8009d9a <tcp_free_acked_segments+0xa2>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10e      	bne.n	8009d9a <tcp_free_acked_segments+0xa2>
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10b      	bne.n	8009d9a <tcp_free_acked_segments+0xa2>
 8009d82:	4b1a      	ldr	r3, [pc, #104]	; (8009dec <tcp_free_acked_segments+0xf4>)
 8009d84:	f240 426f 	movw	r2, #1135	; 0x46f
 8009d88:	491c      	ldr	r1, [pc, #112]	; (8009dfc <tcp_free_acked_segments+0x104>)
 8009d8a:	481a      	ldr	r0, [pc, #104]	; (8009df4 <tcp_free_acked_segments+0xfc>)
 8009d8c:	f009 fe6c 	bl	8013a68 <iprintf>
 8009d90:	2000      	movs	r0, #0
 8009d92:	f009 ff6b 	bl	8013c6c <fflush>
 8009d96:	f009 feb0 	bl	8013afa <abort>
  while (seg_list != NULL &&
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d020      	beq.n	8009de2 <tcp_free_acked_segments+0xea>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009da0:	4b17      	ldr	r3, [pc, #92]	; (8009e00 <tcp_free_acked_segments+0x108>)
 8009da2:	681c      	ldr	r4, [r3, #0]
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fa f849 	bl	8003e42 <lwip_htonl>
 8009db0:	4605      	mov	r5, r0
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	891b      	ldrh	r3, [r3, #8]
 8009db6:	461e      	mov	r6, r3
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	899b      	ldrh	r3, [r3, #12]
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7fa f829 	bl	8003e18 <lwip_htons>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	f003 0303 	and.w	r3, r3, #3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d001      	beq.n	8009dd6 <tcp_free_acked_segments+0xde>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e000      	b.n	8009dd8 <tcp_free_acked_segments+0xe0>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	4433      	add	r3, r6
 8009dda:	442b      	add	r3, r5
 8009ddc:	1ae3      	subs	r3, r4, r3
  while (seg_list != NULL &&
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	da92      	bge.n	8009d08 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009de2:	68bb      	ldr	r3, [r7, #8]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	371c      	adds	r7, #28
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dec:	08016904 	.word	0x08016904
 8009df0:	08016bdc 	.word	0x08016bdc
 8009df4:	08016940 	.word	0x08016940
 8009df8:	20000728 	.word	0x20000728
 8009dfc:	08016c04 	.word	0x08016c04
 8009e00:	20000724 	.word	0x20000724

08009e04 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009e04:	b5b0      	push	{r4, r5, r7, lr}
 8009e06:	b094      	sub	sp, #80	; 0x50
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10b      	bne.n	8009e2a <tcp_receive+0x26>
 8009e12:	4bab      	ldr	r3, [pc, #684]	; (800a0c0 <tcp_receive+0x2bc>)
 8009e14:	f240 4287 	movw	r2, #1159	; 0x487
 8009e18:	49aa      	ldr	r1, [pc, #680]	; (800a0c4 <tcp_receive+0x2c0>)
 8009e1a:	48ab      	ldr	r0, [pc, #684]	; (800a0c8 <tcp_receive+0x2c4>)
 8009e1c:	f009 fe24 	bl	8013a68 <iprintf>
 8009e20:	2000      	movs	r0, #0
 8009e22:	f009 ff23 	bl	8013c6c <fflush>
 8009e26:	f009 fe68 	bl	8013afa <abort>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	7d1b      	ldrb	r3, [r3, #20]
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d80b      	bhi.n	8009e4a <tcp_receive+0x46>
 8009e32:	4ba3      	ldr	r3, [pc, #652]	; (800a0c0 <tcp_receive+0x2bc>)
 8009e34:	f44f 6291 	mov.w	r2, #1160	; 0x488
 8009e38:	49a4      	ldr	r1, [pc, #656]	; (800a0cc <tcp_receive+0x2c8>)
 8009e3a:	48a3      	ldr	r0, [pc, #652]	; (800a0c8 <tcp_receive+0x2c4>)
 8009e3c:	f009 fe14 	bl	8013a68 <iprintf>
 8009e40:	2000      	movs	r0, #0
 8009e42:	f009 ff13 	bl	8013c6c <fflush>
 8009e46:	f009 fe58 	bl	8013afa <abort>

  if (flags & TCP_ACK) {
 8009e4a:	4ba1      	ldr	r3, [pc, #644]	; (800a0d0 <tcp_receive+0x2cc>)
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	f003 0310 	and.w	r3, r3, #16
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	f000 8263 	beq.w	800a31e <tcp_receive+0x51a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009e5e:	461a      	mov	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e64:	4413      	add	r3, r2
 8009e66:	637b      	str	r3, [r7, #52]	; 0x34

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e6c:	4b99      	ldr	r3, [pc, #612]	; (800a0d4 <tcp_receive+0x2d0>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	db1b      	blt.n	8009eae <tcp_receive+0xaa>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e7a:	4b96      	ldr	r3, [pc, #600]	; (800a0d4 <tcp_receive+0x2d0>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d106      	bne.n	8009e90 <tcp_receive+0x8c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e86:	4b94      	ldr	r3, [pc, #592]	; (800a0d8 <tcp_receive+0x2d4>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	db0e      	blt.n	8009eae <tcp_receive+0xaa>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e94:	4b90      	ldr	r3, [pc, #576]	; (800a0d8 <tcp_receive+0x2d4>)
 8009e96:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d125      	bne.n	8009ee8 <tcp_receive+0xe4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009e9c:	4b8f      	ldr	r3, [pc, #572]	; (800a0dc <tcp_receive+0x2d8>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	89db      	ldrh	r3, [r3, #14]
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d91c      	bls.n	8009ee8 <tcp_receive+0xe4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009eae:	4b8b      	ldr	r3, [pc, #556]	; (800a0dc <tcp_receive+0x2d8>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	89db      	ldrh	r3, [r3, #14]
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d205      	bcs.n	8009ed8 <tcp_receive+0xd4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009ed8:	4b7e      	ldr	r3, [pc, #504]	; (800a0d4 <tcp_receive+0x2d0>)
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009ee0:	4b7d      	ldr	r3, [pc, #500]	; (800a0d8 <tcp_receive+0x2d4>)
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009eec:	4b7a      	ldr	r3, [pc, #488]	; (800a0d8 <tcp_receive+0x2d4>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	db58      	blt.n	8009fa8 <tcp_receive+0x1a4>
      /* Clause 2 */
      if (tcplen == 0) {
 8009ef6:	4b7a      	ldr	r3, [pc, #488]	; (800a0e0 <tcp_receive+0x2dc>)
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f040 81af 	bne.w	800a25e <tcp_receive+0x45a>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009f0a:	441a      	add	r2, r3
 8009f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	f040 81a5 	bne.w	800a25e <tcp_receive+0x45a>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f2c0 819f 	blt.w	800a25e <tcp_receive+0x45a>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f24:	4b6c      	ldr	r3, [pc, #432]	; (800a0d8 <tcp_receive+0x2d4>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	f040 8198 	bne.w	800a25e <tcp_receive+0x45a>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f34:	3301      	adds	r3, #1
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d907      	bls.n	8009f52 <tcp_receive+0x14e>
                ++pcb->dupacks;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f48:	3301      	adds	r3, #1
 8009f4a:	b2da      	uxtb	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f58:	2b03      	cmp	r3, #3
 8009f5a:	d91b      	bls.n	8009f94 <tcp_receive+0x190>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f66:	4413      	add	r3, r2
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d30a      	bcc.n	8009f8a <tcp_receive+0x186>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f7e:	4413      	add	r3, r2
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009f88:	e004      	b.n	8009f94 <tcp_receive+0x190>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f90:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	f240 815f 	bls.w	800a25e <tcp_receive+0x45a>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f002 fced 	bl	800c980 <tcp_rexmit_fast>
 8009fa6:	e15a      	b.n	800a25e <tcp_receive+0x45a>
              }
            }
          }
        }
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009fa8:	4b4b      	ldr	r3, [pc, #300]	; (800a0d8 <tcp_receive+0x2d4>)
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f2c0 814d 	blt.w	800a254 <tcp_receive+0x450>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009fbe:	4b46      	ldr	r3, [pc, #280]	; (800a0d8 <tcp_receive+0x2d4>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f2c0 8145 	blt.w	800a254 <tcp_receive+0x450>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	8b5b      	ldrh	r3, [r3, #26]
 8009fce:	f003 0304 	and.w	r3, r3, #4
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d010      	beq.n	8009ff8 <tcp_receive+0x1f4>
        tcp_clear_flags(pcb, TF_INFR);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	8b5b      	ldrh	r3, [r3, #26]
 8009fda:	f023 0304 	bic.w	r3, r3, #4
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a006:	10db      	asrs	r3, r3, #3
 800a008:	b21b      	sxth	r3, r3
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a012:	b29b      	uxth	r3, r3
 800a014:	4413      	add	r3, r2
 800a016:	b29b      	uxth	r3, r3
 800a018:	b21a      	sxth	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a020:	4b2d      	ldr	r3, [pc, #180]	; (800a0d8 <tcp_receive+0x2d4>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	b29a      	uxth	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	1ad3      	subs	r3, r2, r3
 800a02e:	867b      	strh	r3, [r7, #50]	; 0x32

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a038:	4b27      	ldr	r3, [pc, #156]	; (800a0d8 <tcp_receive+0x2d4>)
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	7d1b      	ldrb	r3, [r3, #20]
 800a044:	2b03      	cmp	r3, #3
 800a046:	f240 8096 	bls.w	800a176 <tcp_receive+0x372>
        if (pcb->cwnd < pcb->ssthresh) {
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a056:	429a      	cmp	r2, r3
 800a058:	d244      	bcs.n	800a0e4 <tcp_receive+0x2e0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	8b5b      	ldrh	r3, [r3, #26]
 800a05e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <tcp_receive+0x266>
 800a066:	2301      	movs	r3, #1
 800a068:	e000      	b.n	800a06c <tcp_receive+0x268>
 800a06a:	2302      	movs	r3, #2
 800a06c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a070:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a074:	b29a      	uxth	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a07a:	fb12 f303 	smulbb	r3, r2, r3
 800a07e:	b29a      	uxth	r2, r3
 800a080:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a082:	4293      	cmp	r3, r2
 800a084:	bf28      	it	cs
 800a086:	4613      	movcs	r3, r2
 800a088:	85fb      	strh	r3, [r7, #46]	; 0x2e
          TCP_WND_INC(pcb->cwnd, increase);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a090:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a092:	4413      	add	r3, r2
 800a094:	b29a      	uxth	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d309      	bcc.n	800a0b4 <tcp_receive+0x2b0>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a0a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0a8:	4413      	add	r3, r2
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a0b2:	e060      	b.n	800a176 <tcp_receive+0x372>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a0be:	e05a      	b.n	800a176 <tcp_receive+0x372>
 800a0c0:	08016904 	.word	0x08016904
 800a0c4:	08016c24 	.word	0x08016c24
 800a0c8:	08016940 	.word	0x08016940
 800a0cc:	08016c40 	.word	0x08016c40
 800a0d0:	2000072c 	.word	0x2000072c
 800a0d4:	20000720 	.word	0x20000720
 800a0d8:	20000724 	.word	0x20000724
 800a0dc:	20000710 	.word	0x20000710
 800a0e0:	2000072a 	.word	0x2000072a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a0ea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a0ec:	4413      	add	r3, r2
 800a0ee:	b29a      	uxth	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d309      	bcc.n	800a10e <tcp_receive+0x30a>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a100:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a102:	4413      	add	r3, r2
 800a104:	b29a      	uxth	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a10c:	e004      	b.n	800a118 <tcp_receive+0x314>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a114:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a124:	429a      	cmp	r2, r3
 800a126:	d326      	bcc.n	800a176 <tcp_receive+0x372>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	b29a      	uxth	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a148:	4413      	add	r3, r2
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a152:	429a      	cmp	r2, r3
 800a154:	d30a      	bcc.n	800a16c <tcp_receive+0x368>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a160:	4413      	add	r3, r2
 800a162:	b29a      	uxth	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a16a:	e004      	b.n	800a176 <tcp_receive+0x372>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a172:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a17e:	4aa0      	ldr	r2, [pc, #640]	; (800a400 <tcp_receive+0x5fc>)
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7ff fdb9 	bl	8009cf8 <tcp_free_acked_segments>
 800a186:	4602      	mov	r2, r0
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a194:	4a9b      	ldr	r2, [pc, #620]	; (800a404 <tcp_receive+0x600>)
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7ff fdae 	bl	8009cf8 <tcp_free_acked_segments>
 800a19c:	4602      	mov	r2, r0
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d104      	bne.n	800a1b4 <tcp_receive+0x3b0>
        pcb->rtime = -1;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1b0:	861a      	strh	r2, [r3, #48]	; 0x30
 800a1b2:	e002      	b.n	800a1ba <tcp_receive+0x3b6>
      } else {
        pcb->rtime = 0;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d103      	bne.n	800a1d0 <tcp_receive+0x3cc>
        pcb->unsent_oversize = 0;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a1d6:	4b8c      	ldr	r3, [pc, #560]	; (800a408 <tcp_receive+0x604>)
 800a1d8:	881b      	ldrh	r3, [r3, #0]
 800a1da:	4413      	add	r3, r2
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	8b5b      	ldrh	r3, [r3, #26]
 800a1e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d035      	beq.n	800a25c <tcp_receive+0x458>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d118      	bne.n	800a22a <tcp_receive+0x426>
          if ((pcb->unsent == NULL) ||
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00c      	beq.n	800a21a <tcp_receive+0x416>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	4618      	mov	r0, r3
 800a20a:	f7f9 fe1a 	bl	8003e42 <lwip_htonl>
 800a20e:	4602      	mov	r2, r0
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a214:	1ad3      	subs	r3, r2, r3
          if ((pcb->unsent == NULL) ||
 800a216:	2b00      	cmp	r3, #0
 800a218:	db20      	blt.n	800a25c <tcp_receive+0x458>
            tcp_clear_flags(pcb, TF_RTO);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	8b5b      	ldrh	r3, [r3, #26]
 800a21e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a222:	b29a      	uxth	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a228:	e018      	b.n	800a25c <tcp_receive+0x458>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	4618      	mov	r0, r3
 800a234:	f7f9 fe05 	bl	8003e42 <lwip_htonl>
 800a238:	4602      	mov	r2, r0
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a23e:	1ad3      	subs	r3, r2, r3
 800a240:	2b00      	cmp	r3, #0
 800a242:	db0b      	blt.n	800a25c <tcp_receive+0x458>
          tcp_clear_flags(pcb, TF_RTO);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	8b5b      	ldrh	r3, [r3, #26]
 800a248:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a24c:	b29a      	uxth	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a252:	e003      	b.n	800a25c <tcp_receive+0x458>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f002 fe3f 	bl	800ced8 <tcp_send_empty_ack>
 800a25a:	e000      	b.n	800a25e <tcp_receive+0x45a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a25c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a262:	2b00      	cmp	r3, #0
 800a264:	d05b      	beq.n	800a31e <tcp_receive+0x51a>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a26a:	4b68      	ldr	r3, [pc, #416]	; (800a40c <tcp_receive+0x608>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	1ad3      	subs	r3, r2, r3
 800a270:	2b00      	cmp	r3, #0
 800a272:	da54      	bge.n	800a31e <tcp_receive+0x51a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a274:	4b66      	ldr	r3, [pc, #408]	; (800a410 <tcp_receive+0x60c>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	b29a      	uxth	r2, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a27e:	b29b      	uxth	r3, r3
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	b29b      	uxth	r3, r3
 800a284:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a288:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a292:	10db      	asrs	r3, r3, #3
 800a294:	b21b      	sxth	r3, r3
 800a296:	b29b      	uxth	r3, r3
 800a298:	1ad3      	subs	r3, r2, r3
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a2ac:	4413      	add	r3, r2
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	b21a      	sxth	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a2b6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	da05      	bge.n	800a2ca <tcp_receive+0x4c6>
        m = (s16_t) - m;
 800a2be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a2c2:	425b      	negs	r3, r3
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a2ca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a2d4:	109b      	asrs	r3, r3, #2
 800a2d6:	b21b      	sxth	r3, r3
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	1ad3      	subs	r3, r2, r3
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a2ee:	4413      	add	r3, r2
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	b21a      	sxth	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a2fe:	10db      	asrs	r3, r3, #3
 800a300:	b21b      	sxth	r3, r3
 800a302:	b29a      	uxth	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	4413      	add	r3, r2
 800a30e:	b29b      	uxth	r3, r3
 800a310:	b21a      	sxth	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a31e:	4b3d      	ldr	r3, [pc, #244]	; (800a414 <tcp_receive+0x610>)
 800a320:	881b      	ldrh	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	f000 850f 	beq.w	800ad46 <tcp_receive+0xf42>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	7d1b      	ldrb	r3, [r3, #20]
 800a32c:	2b06      	cmp	r3, #6
 800a32e:	f200 850a 	bhi.w	800ad46 <tcp_receive+0xf42>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a336:	4b38      	ldr	r3, [pc, #224]	; (800a418 <tcp_receive+0x614>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	1ad3      	subs	r3, r2, r3
 800a33c:	3b01      	subs	r3, #1
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f2c0 809e 	blt.w	800a480 <tcp_receive+0x67c>
 800a344:	4b33      	ldr	r3, [pc, #204]	; (800a414 <tcp_receive+0x610>)
 800a346:	881b      	ldrh	r3, [r3, #0]
 800a348:	461a      	mov	r2, r3
 800a34a:	4b33      	ldr	r3, [pc, #204]	; (800a418 <tcp_receive+0x614>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	441a      	add	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a354:	425b      	negs	r3, r3
 800a356:	4413      	add	r3, r2
 800a358:	3b01      	subs	r3, #1
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f2c0 8090 	blt.w	800a480 <tcp_receive+0x67c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a360:	4b2e      	ldr	r3, [pc, #184]	; (800a41c <tcp_receive+0x618>)
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	64bb      	str	r3, [r7, #72]	; 0x48
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a36a:	4b2b      	ldr	r3, [pc, #172]	; (800a418 <tcp_receive+0x614>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	62bb      	str	r3, [r7, #40]	; 0x28
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a372:	4b2a      	ldr	r3, [pc, #168]	; (800a41c <tcp_receive+0x618>)
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10b      	bne.n	800a392 <tcp_receive+0x58e>
 800a37a:	4b29      	ldr	r3, [pc, #164]	; (800a420 <tcp_receive+0x61c>)
 800a37c:	f240 529a 	movw	r2, #1434	; 0x59a
 800a380:	4928      	ldr	r1, [pc, #160]	; (800a424 <tcp_receive+0x620>)
 800a382:	4829      	ldr	r0, [pc, #164]	; (800a428 <tcp_receive+0x624>)
 800a384:	f009 fb70 	bl	8013a68 <iprintf>
 800a388:	2000      	movs	r0, #0
 800a38a:	f009 fc6f 	bl	8013c6c <fflush>
 800a38e:	f009 fbb4 	bl	8013afa <abort>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a394:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a398:	4293      	cmp	r3, r2
 800a39a:	d90b      	bls.n	800a3b4 <tcp_receive+0x5b0>
 800a39c:	4b20      	ldr	r3, [pc, #128]	; (800a420 <tcp_receive+0x61c>)
 800a39e:	f240 529b 	movw	r2, #1435	; 0x59b
 800a3a2:	4922      	ldr	r1, [pc, #136]	; (800a42c <tcp_receive+0x628>)
 800a3a4:	4820      	ldr	r0, [pc, #128]	; (800a428 <tcp_receive+0x624>)
 800a3a6:	f009 fb5f 	bl	8013a68 <iprintf>
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	f009 fc5e 	bl	8013c6c <fflush>
 800a3b0:	f009 fba3 	bl	8013afa <abort>
      off = (u16_t)off32;
 800a3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a3ba:	4b18      	ldr	r3, [pc, #96]	; (800a41c <tcp_receive+0x618>)
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	891b      	ldrh	r3, [r3, #8]
 800a3c0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d90b      	bls.n	800a3e0 <tcp_receive+0x5dc>
 800a3c8:	4b15      	ldr	r3, [pc, #84]	; (800a420 <tcp_receive+0x61c>)
 800a3ca:	f240 529d 	movw	r2, #1437	; 0x59d
 800a3ce:	4918      	ldr	r1, [pc, #96]	; (800a430 <tcp_receive+0x62c>)
 800a3d0:	4815      	ldr	r0, [pc, #84]	; (800a428 <tcp_receive+0x624>)
 800a3d2:	f009 fb49 	bl	8013a68 <iprintf>
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	f009 fc48 	bl	8013c6c <fflush>
 800a3dc:	f009 fb8d 	bl	8013afa <abort>
      inseg.len -= off;
 800a3e0:	4b0e      	ldr	r3, [pc, #56]	; (800a41c <tcp_receive+0x618>)
 800a3e2:	891a      	ldrh	r2, [r3, #8]
 800a3e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a3e8:	1ad3      	subs	r3, r2, r3
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	4b0b      	ldr	r3, [pc, #44]	; (800a41c <tcp_receive+0x618>)
 800a3ee:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a3f0:	4b0a      	ldr	r3, [pc, #40]	; (800a41c <tcp_receive+0x618>)
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	891a      	ldrh	r2, [r3, #8]
 800a3f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	84fb      	strh	r3, [r7, #38]	; 0x26
      while (p->len < off) {
 800a3fe:	e029      	b.n	800a454 <tcp_receive+0x650>
 800a400:	08016c5c 	.word	0x08016c5c
 800a404:	08016c64 	.word	0x08016c64
 800a408:	20000728 	.word	0x20000728
 800a40c:	20000724 	.word	0x20000724
 800a410:	200022c4 	.word	0x200022c4
 800a414:	2000072a 	.word	0x2000072a
 800a418:	20000720 	.word	0x20000720
 800a41c:	200006fc 	.word	0x200006fc
 800a420:	08016904 	.word	0x08016904
 800a424:	08016c6c 	.word	0x08016c6c
 800a428:	08016940 	.word	0x08016940
 800a42c:	08016c7c 	.word	0x08016c7c
 800a430:	08016c8c 	.word	0x08016c8c
        off -= p->len;
 800a434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a436:	895b      	ldrh	r3, [r3, #10]
 800a438:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a444:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a446:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a44a:	2200      	movs	r2, #0
 800a44c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a44e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	64bb      	str	r3, [r7, #72]	; 0x48
      while (p->len < off) {
 800a454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a456:	895b      	ldrh	r3, [r3, #10]
 800a458:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d8e9      	bhi.n	800a434 <tcp_receive+0x630>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a460:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a464:	4619      	mov	r1, r3
 800a466:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a468:	f7fb fd92 	bl	8005f90 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a46c:	4b94      	ldr	r3, [pc, #592]	; (800a6c0 <tcp_receive+0x8bc>)
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a474:	4993      	ldr	r1, [pc, #588]	; (800a6c4 <tcp_receive+0x8c0>)
 800a476:	600a      	str	r2, [r1, #0]
 800a478:	4a92      	ldr	r2, [pc, #584]	; (800a6c4 <tcp_receive+0x8c0>)
 800a47a:	6812      	ldr	r2, [r2, #0]
 800a47c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a47e:	e00d      	b.n	800a49c <tcp_receive+0x698>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a480:	4b90      	ldr	r3, [pc, #576]	; (800a6c4 <tcp_receive+0x8c0>)
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a488:	1ad3      	subs	r3, r2, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	da06      	bge.n	800a49c <tcp_receive+0x698>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	8b5b      	ldrh	r3, [r3, #26]
 800a492:	f043 0302 	orr.w	r3, r3, #2
 800a496:	b29a      	uxth	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a49c:	4b89      	ldr	r3, [pc, #548]	; (800a6c4 <tcp_receive+0x8c0>)
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f2c0 8448 	blt.w	800ad3c <tcp_receive+0xf38>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a4b4:	441a      	add	r2, r3
 800a4b6:	4b83      	ldr	r3, [pc, #524]	; (800a6c4 <tcp_receive+0x8c0>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	425b      	negs	r3, r3
 800a4bc:	4413      	add	r3, r2
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f2c0 843b 	blt.w	800ad3c <tcp_receive+0xf38>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4ca:	4b7e      	ldr	r3, [pc, #504]	; (800a6c4 <tcp_receive+0x8c0>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	f040 82ab 	bne.w	800aa2a <tcp_receive+0xc26>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a4d4:	4b7a      	ldr	r3, [pc, #488]	; (800a6c0 <tcp_receive+0x8bc>)
 800a4d6:	891c      	ldrh	r4, [r3, #8]
 800a4d8:	4b79      	ldr	r3, [pc, #484]	; (800a6c0 <tcp_receive+0x8bc>)
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	899b      	ldrh	r3, [r3, #12]
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7f9 fc99 	bl	8003e18 <lwip_htons>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	f003 0303 	and.w	r3, r3, #3
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <tcp_receive+0x6f2>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e000      	b.n	800a4f8 <tcp_receive+0x6f4>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	4423      	add	r3, r4
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	4b72      	ldr	r3, [pc, #456]	; (800a6c8 <tcp_receive+0x8c4>)
 800a4fe:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a504:	4b70      	ldr	r3, [pc, #448]	; (800a6c8 <tcp_receive+0x8c4>)
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d27a      	bcs.n	800a602 <tcp_receive+0x7fe>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a50c:	4b6c      	ldr	r3, [pc, #432]	; (800a6c0 <tcp_receive+0x8bc>)
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	899b      	ldrh	r3, [r3, #12]
 800a512:	b29b      	uxth	r3, r3
 800a514:	4618      	mov	r0, r3
 800a516:	f7f9 fc7f 	bl	8003e18 <lwip_htons>
 800a51a:	4603      	mov	r3, r0
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	f003 0301 	and.w	r3, r3, #1
 800a522:	2b00      	cmp	r3, #0
 800a524:	d01f      	beq.n	800a566 <tcp_receive+0x762>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a526:	4b66      	ldr	r3, [pc, #408]	; (800a6c0 <tcp_receive+0x8bc>)
 800a528:	691c      	ldr	r4, [r3, #16]
 800a52a:	4b65      	ldr	r3, [pc, #404]	; (800a6c0 <tcp_receive+0x8bc>)
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	899b      	ldrh	r3, [r3, #12]
 800a530:	b29b      	uxth	r3, r3
 800a532:	b21b      	sxth	r3, r3
 800a534:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a538:	b21d      	sxth	r5, r3
 800a53a:	4b61      	ldr	r3, [pc, #388]	; (800a6c0 <tcp_receive+0x8bc>)
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	899b      	ldrh	r3, [r3, #12]
 800a540:	b29b      	uxth	r3, r3
 800a542:	4618      	mov	r0, r3
 800a544:	f7f9 fc68 	bl	8003e18 <lwip_htons>
 800a548:	4603      	mov	r3, r0
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a552:	b29b      	uxth	r3, r3
 800a554:	4618      	mov	r0, r3
 800a556:	f7f9 fc5f 	bl	8003e18 <lwip_htons>
 800a55a:	4603      	mov	r3, r0
 800a55c:	b21b      	sxth	r3, r3
 800a55e:	432b      	orrs	r3, r5
 800a560:	b21b      	sxth	r3, r3
 800a562:	b29b      	uxth	r3, r3
 800a564:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a56a:	4b55      	ldr	r3, [pc, #340]	; (800a6c0 <tcp_receive+0x8bc>)
 800a56c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a56e:	4b54      	ldr	r3, [pc, #336]	; (800a6c0 <tcp_receive+0x8bc>)
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	899b      	ldrh	r3, [r3, #12]
 800a574:	b29b      	uxth	r3, r3
 800a576:	4618      	mov	r0, r3
 800a578:	f7f9 fc4e 	bl	8003e18 <lwip_htons>
 800a57c:	4603      	mov	r3, r0
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	f003 0302 	and.w	r3, r3, #2
 800a584:	2b00      	cmp	r3, #0
 800a586:	d005      	beq.n	800a594 <tcp_receive+0x790>
            inseg.len -= 1;
 800a588:	4b4d      	ldr	r3, [pc, #308]	; (800a6c0 <tcp_receive+0x8bc>)
 800a58a:	891b      	ldrh	r3, [r3, #8]
 800a58c:	3b01      	subs	r3, #1
 800a58e:	b29a      	uxth	r2, r3
 800a590:	4b4b      	ldr	r3, [pc, #300]	; (800a6c0 <tcp_receive+0x8bc>)
 800a592:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a594:	4b4a      	ldr	r3, [pc, #296]	; (800a6c0 <tcp_receive+0x8bc>)
 800a596:	685a      	ldr	r2, [r3, #4]
 800a598:	4b49      	ldr	r3, [pc, #292]	; (800a6c0 <tcp_receive+0x8bc>)
 800a59a:	891b      	ldrh	r3, [r3, #8]
 800a59c:	4619      	mov	r1, r3
 800a59e:	4610      	mov	r0, r2
 800a5a0:	f7fb fbd4 	bl	8005d4c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a5a4:	4b46      	ldr	r3, [pc, #280]	; (800a6c0 <tcp_receive+0x8bc>)
 800a5a6:	891c      	ldrh	r4, [r3, #8]
 800a5a8:	4b45      	ldr	r3, [pc, #276]	; (800a6c0 <tcp_receive+0x8bc>)
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	899b      	ldrh	r3, [r3, #12]
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7f9 fc31 	bl	8003e18 <lwip_htons>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	f003 0303 	and.w	r3, r3, #3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <tcp_receive+0x7c2>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e000      	b.n	800a5c8 <tcp_receive+0x7c4>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	4423      	add	r3, r4
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	4b3e      	ldr	r3, [pc, #248]	; (800a6c8 <tcp_receive+0x8c4>)
 800a5ce:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 800a5d0:	4b3d      	ldr	r3, [pc, #244]	; (800a6c8 <tcp_receive+0x8c4>)
 800a5d2:	881b      	ldrh	r3, [r3, #0]
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	4b3b      	ldr	r3, [pc, #236]	; (800a6c4 <tcp_receive+0x8c0>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	441a      	add	r2, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e0:	6879      	ldr	r1, [r7, #4]
 800a5e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a5e4:	440b      	add	r3, r1
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d00b      	beq.n	800a602 <tcp_receive+0x7fe>
 800a5ea:	4b38      	ldr	r3, [pc, #224]	; (800a6cc <tcp_receive+0x8c8>)
 800a5ec:	f240 52d2 	movw	r2, #1490	; 0x5d2
 800a5f0:	4937      	ldr	r1, [pc, #220]	; (800a6d0 <tcp_receive+0x8cc>)
 800a5f2:	4838      	ldr	r0, [pc, #224]	; (800a6d4 <tcp_receive+0x8d0>)
 800a5f4:	f009 fa38 	bl	8013a68 <iprintf>
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	f009 fb37 	bl	8013c6c <fflush>
 800a5fe:	f009 fa7c 	bl	8013afa <abort>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a606:	2b00      	cmp	r3, #0
 800a608:	f000 80ea 	beq.w	800a7e0 <tcp_receive+0x9dc>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a60c:	4b2c      	ldr	r3, [pc, #176]	; (800a6c0 <tcp_receive+0x8bc>)
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	899b      	ldrh	r3, [r3, #12]
 800a612:	b29b      	uxth	r3, r3
 800a614:	4618      	mov	r0, r3
 800a616:	f7f9 fbff 	bl	8003e18 <lwip_htons>
 800a61a:	4603      	mov	r3, r0
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	f003 0301 	and.w	r3, r3, #1
 800a622:	2b00      	cmp	r3, #0
 800a624:	d010      	beq.n	800a648 <tcp_receive+0x844>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a626:	e00a      	b.n	800a63e <tcp_receive+0x83a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a62c:	623b      	str	r3, [r7, #32]
              pcb->ooseq = pcb->ooseq->next;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a638:	6a38      	ldr	r0, [r7, #32]
 800a63a:	f7fd fb4f 	bl	8007cdc <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a642:	2b00      	cmp	r3, #0
 800a644:	d1f0      	bne.n	800a628 <tcp_receive+0x824>
 800a646:	e0cb      	b.n	800a7e0 <tcp_receive+0x9dc>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a64c:	643b      	str	r3, [r7, #64]	; 0x40
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a64e:	e050      	b.n	800a6f2 <tcp_receive+0x8ee>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	899b      	ldrh	r3, [r3, #12]
 800a656:	b29b      	uxth	r3, r3
 800a658:	4618      	mov	r0, r3
 800a65a:	f7f9 fbdd 	bl	8003e18 <lwip_htons>
 800a65e:	4603      	mov	r3, r0
 800a660:	b2db      	uxtb	r3, r3
 800a662:	f003 0301 	and.w	r3, r3, #1
 800a666:	2b00      	cmp	r3, #0
 800a668:	d03b      	beq.n	800a6e2 <tcp_receive+0x8de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a66a:	4b15      	ldr	r3, [pc, #84]	; (800a6c0 <tcp_receive+0x8bc>)
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	899b      	ldrh	r3, [r3, #12]
 800a670:	b29b      	uxth	r3, r3
 800a672:	4618      	mov	r0, r3
 800a674:	f7f9 fbd0 	bl	8003e18 <lwip_htons>
 800a678:	4603      	mov	r3, r0
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a680:	2b00      	cmp	r3, #0
 800a682:	d12e      	bne.n	800a6e2 <tcp_receive+0x8de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a684:	4b0e      	ldr	r3, [pc, #56]	; (800a6c0 <tcp_receive+0x8bc>)
 800a686:	691c      	ldr	r4, [r3, #16]
 800a688:	4b0d      	ldr	r3, [pc, #52]	; (800a6c0 <tcp_receive+0x8bc>)
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	899b      	ldrh	r3, [r3, #12]
 800a68e:	b29d      	uxth	r5, r3
 800a690:	2001      	movs	r0, #1
 800a692:	f7f9 fbc1 	bl	8003e18 <lwip_htons>
 800a696:	4603      	mov	r3, r0
 800a698:	432b      	orrs	r3, r5
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a69e:	4b08      	ldr	r3, [pc, #32]	; (800a6c0 <tcp_receive+0x8bc>)
 800a6a0:	891c      	ldrh	r4, [r3, #8]
 800a6a2:	4b07      	ldr	r3, [pc, #28]	; (800a6c0 <tcp_receive+0x8bc>)
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	899b      	ldrh	r3, [r3, #12]
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7f9 fbb4 	bl	8003e18 <lwip_htons>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	f003 0303 	and.w	r3, r3, #3
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00d      	beq.n	800a6d8 <tcp_receive+0x8d4>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e00c      	b.n	800a6da <tcp_receive+0x8d6>
 800a6c0:	200006fc 	.word	0x200006fc
 800a6c4:	20000720 	.word	0x20000720
 800a6c8:	2000072a 	.word	0x2000072a
 800a6cc:	08016904 	.word	0x08016904
 800a6d0:	08016c9c 	.word	0x08016c9c
 800a6d4:	08016940 	.word	0x08016940
 800a6d8:	2300      	movs	r3, #0
 800a6da:	4423      	add	r3, r4
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	4b9f      	ldr	r3, [pc, #636]	; (800a95c <tcp_receive+0xb58>)
 800a6e0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a6e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6e4:	61fb      	str	r3, [r7, #28]
              next = next->next;
 800a6e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	643b      	str	r3, [r7, #64]	; 0x40
              tcp_seg_free(tmp);
 800a6ec:	69f8      	ldr	r0, [r7, #28]
 800a6ee:	f7fd faf5 	bl	8007cdc <tcp_seg_free>
            while (next &&
 800a6f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00e      	beq.n	800a716 <tcp_receive+0x912>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a6f8:	4b98      	ldr	r3, [pc, #608]	; (800a95c <tcp_receive+0xb58>)
 800a6fa:	881b      	ldrh	r3, [r3, #0]
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	4b98      	ldr	r3, [pc, #608]	; (800a960 <tcp_receive+0xb5c>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	441a      	add	r2, r3
 800a704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a70c:	8909      	ldrh	r1, [r1, #8]
 800a70e:	440b      	add	r3, r1
 800a710:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a712:	2b00      	cmp	r3, #0
 800a714:	da9c      	bge.n	800a650 <tcp_receive+0x84c>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d05e      	beq.n	800a7da <tcp_receive+0x9d6>
                TCP_SEQ_GT(seqno + tcplen,
 800a71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	4b8e      	ldr	r3, [pc, #568]	; (800a95c <tcp_receive+0xb58>)
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	4619      	mov	r1, r3
 800a728:	4b8d      	ldr	r3, [pc, #564]	; (800a960 <tcp_receive+0xb5c>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	440b      	add	r3, r1
 800a72e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a730:	2b00      	cmp	r3, #0
 800a732:	da52      	bge.n	800a7da <tcp_receive+0x9d6>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	4b88      	ldr	r3, [pc, #544]	; (800a960 <tcp_receive+0xb5c>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	b29b      	uxth	r3, r3
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	b29a      	uxth	r2, r3
 800a746:	4b87      	ldr	r3, [pc, #540]	; (800a964 <tcp_receive+0xb60>)
 800a748:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a74a:	4b86      	ldr	r3, [pc, #536]	; (800a964 <tcp_receive+0xb60>)
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	899b      	ldrh	r3, [r3, #12]
 800a750:	b29b      	uxth	r3, r3
 800a752:	4618      	mov	r0, r3
 800a754:	f7f9 fb60 	bl	8003e18 <lwip_htons>
 800a758:	4603      	mov	r3, r0
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	f003 0302 	and.w	r3, r3, #2
 800a760:	2b00      	cmp	r3, #0
 800a762:	d005      	beq.n	800a770 <tcp_receive+0x96c>
                inseg.len -= 1;
 800a764:	4b7f      	ldr	r3, [pc, #508]	; (800a964 <tcp_receive+0xb60>)
 800a766:	891b      	ldrh	r3, [r3, #8]
 800a768:	3b01      	subs	r3, #1
 800a76a:	b29a      	uxth	r2, r3
 800a76c:	4b7d      	ldr	r3, [pc, #500]	; (800a964 <tcp_receive+0xb60>)
 800a76e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a770:	4b7c      	ldr	r3, [pc, #496]	; (800a964 <tcp_receive+0xb60>)
 800a772:	685a      	ldr	r2, [r3, #4]
 800a774:	4b7b      	ldr	r3, [pc, #492]	; (800a964 <tcp_receive+0xb60>)
 800a776:	891b      	ldrh	r3, [r3, #8]
 800a778:	4619      	mov	r1, r3
 800a77a:	4610      	mov	r0, r2
 800a77c:	f7fb fae6 	bl	8005d4c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a780:	4b78      	ldr	r3, [pc, #480]	; (800a964 <tcp_receive+0xb60>)
 800a782:	891c      	ldrh	r4, [r3, #8]
 800a784:	4b77      	ldr	r3, [pc, #476]	; (800a964 <tcp_receive+0xb60>)
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	899b      	ldrh	r3, [r3, #12]
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7f9 fb43 	bl	8003e18 <lwip_htons>
 800a792:	4603      	mov	r3, r0
 800a794:	b2db      	uxtb	r3, r3
 800a796:	f003 0303 	and.w	r3, r3, #3
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <tcp_receive+0x99e>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e000      	b.n	800a7a4 <tcp_receive+0x9a0>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	4423      	add	r3, r4
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	4b6c      	ldr	r3, [pc, #432]	; (800a95c <tcp_receive+0xb58>)
 800a7aa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue",
 800a7ac:	4b6b      	ldr	r3, [pc, #428]	; (800a95c <tcp_receive+0xb58>)
 800a7ae:	881b      	ldrh	r3, [r3, #0]
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	4b6b      	ldr	r3, [pc, #428]	; (800a960 <tcp_receive+0xb5c>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	441a      	add	r2, r3
 800a7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d00b      	beq.n	800a7da <tcp_receive+0x9d6>
 800a7c2:	4b69      	ldr	r3, [pc, #420]	; (800a968 <tcp_receive+0xb64>)
 800a7c4:	f240 6203 	movw	r2, #1539	; 0x603
 800a7c8:	4968      	ldr	r1, [pc, #416]	; (800a96c <tcp_receive+0xb68>)
 800a7ca:	4869      	ldr	r0, [pc, #420]	; (800a970 <tcp_receive+0xb6c>)
 800a7cc:	f009 f94c 	bl	8013a68 <iprintf>
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	f009 fa4b 	bl	8013c6c <fflush>
 800a7d6:	f009 f990 	bl	8013afa <abort>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7de:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a7e0:	4b5e      	ldr	r3, [pc, #376]	; (800a95c <tcp_receive+0xb58>)
 800a7e2:	881b      	ldrh	r3, [r3, #0]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	4b5e      	ldr	r3, [pc, #376]	; (800a960 <tcp_receive+0xb5c>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	441a      	add	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd", pcb->rcv_wnd >= tcplen);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a7f4:	4b59      	ldr	r3, [pc, #356]	; (800a95c <tcp_receive+0xb58>)
 800a7f6:	881b      	ldrh	r3, [r3, #0]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d20b      	bcs.n	800a814 <tcp_receive+0xa10>
 800a7fc:	4b5a      	ldr	r3, [pc, #360]	; (800a968 <tcp_receive+0xb64>)
 800a7fe:	f240 620d 	movw	r2, #1549	; 0x60d
 800a802:	495c      	ldr	r1, [pc, #368]	; (800a974 <tcp_receive+0xb70>)
 800a804:	485a      	ldr	r0, [pc, #360]	; (800a970 <tcp_receive+0xb6c>)
 800a806:	f009 f92f 	bl	8013a68 <iprintf>
 800a80a:	2000      	movs	r0, #0
 800a80c:	f009 fa2e 	bl	8013c6c <fflush>
 800a810:	f009 f973 	bl	8013afa <abort>
        pcb->rcv_wnd -= tcplen;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a818:	4b50      	ldr	r3, [pc, #320]	; (800a95c <tcp_receive+0xb58>)
 800a81a:	881b      	ldrh	r3, [r3, #0]
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	b29a      	uxth	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f7fc fbd7 	bl	8006fd8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a82a:	4b4e      	ldr	r3, [pc, #312]	; (800a964 <tcp_receive+0xb60>)
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	891b      	ldrh	r3, [r3, #8]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d006      	beq.n	800a842 <tcp_receive+0xa3e>
          recv_data = inseg.p;
 800a834:	4b4b      	ldr	r3, [pc, #300]	; (800a964 <tcp_receive+0xb60>)
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	4a4f      	ldr	r2, [pc, #316]	; (800a978 <tcp_receive+0xb74>)
 800a83a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakenly) deallocate it. */
          inseg.p = NULL;
 800a83c:	4b49      	ldr	r3, [pc, #292]	; (800a964 <tcp_receive+0xb60>)
 800a83e:	2200      	movs	r2, #0
 800a840:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a842:	4b48      	ldr	r3, [pc, #288]	; (800a964 <tcp_receive+0xb60>)
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	899b      	ldrh	r3, [r3, #12]
 800a848:	b29b      	uxth	r3, r3
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7f9 fae4 	bl	8003e18 <lwip_htons>
 800a850:	4603      	mov	r3, r0
 800a852:	b2db      	uxtb	r3, r3
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	2b00      	cmp	r3, #0
 800a85a:	f000 80bc 	beq.w	800a9d6 <tcp_receive+0xbd2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a85e:	4b47      	ldr	r3, [pc, #284]	; (800a97c <tcp_receive+0xb78>)
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	f043 0320 	orr.w	r3, r3, #32
 800a866:	b2da      	uxtb	r2, r3
 800a868:	4b44      	ldr	r3, [pc, #272]	; (800a97c <tcp_receive+0xb78>)
 800a86a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a86c:	e0b3      	b.n	800a9d6 <tcp_receive+0xbd2>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a872:	61bb      	str	r3, [r7, #24]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	4a38      	ldr	r2, [pc, #224]	; (800a960 <tcp_receive+0xb5c>)
 800a87e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	891b      	ldrh	r3, [r3, #8]
 800a884:	461c      	mov	r4, r3
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	899b      	ldrh	r3, [r3, #12]
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	4618      	mov	r0, r3
 800a890:	f7f9 fac2 	bl	8003e18 <lwip_htons>
 800a894:	4603      	mov	r3, r0
 800a896:	b2db      	uxtb	r3, r3
 800a898:	f003 0303 	and.w	r3, r3, #3
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d001      	beq.n	800a8a4 <tcp_receive+0xaa0>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e000      	b.n	800a8a6 <tcp_receive+0xaa2>
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	4423      	add	r3, r4
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a8ac:	441a      	add	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd",
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8b6:	461c      	mov	r4, r3
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	891b      	ldrh	r3, [r3, #8]
 800a8bc:	461d      	mov	r5, r3
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	899b      	ldrh	r3, [r3, #12]
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7f9 faa6 	bl	8003e18 <lwip_htons>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	f003 0303 	and.w	r3, r3, #3
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d001      	beq.n	800a8dc <tcp_receive+0xad8>
 800a8d8:	2301      	movs	r3, #1
 800a8da:	e000      	b.n	800a8de <tcp_receive+0xada>
 800a8dc:	2300      	movs	r3, #0
 800a8de:	442b      	add	r3, r5
 800a8e0:	429c      	cmp	r4, r3
 800a8e2:	d20b      	bcs.n	800a8fc <tcp_receive+0xaf8>
 800a8e4:	4b20      	ldr	r3, [pc, #128]	; (800a968 <tcp_receive+0xb64>)
 800a8e6:	f240 6232 	movw	r2, #1586	; 0x632
 800a8ea:	4925      	ldr	r1, [pc, #148]	; (800a980 <tcp_receive+0xb7c>)
 800a8ec:	4820      	ldr	r0, [pc, #128]	; (800a970 <tcp_receive+0xb6c>)
 800a8ee:	f009 f8bb 	bl	8013a68 <iprintf>
 800a8f2:	2000      	movs	r0, #0
 800a8f4:	f009 f9ba 	bl	8013c6c <fflush>
 800a8f8:	f009 f8ff 	bl	8013afa <abort>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	891b      	ldrh	r3, [r3, #8]
 800a900:	461c      	mov	r4, r3
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	899b      	ldrh	r3, [r3, #12]
 800a908:	b29b      	uxth	r3, r3
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7f9 fa84 	bl	8003e18 <lwip_htons>
 800a910:	4603      	mov	r3, r0
 800a912:	b2db      	uxtb	r3, r3
 800a914:	f003 0303 	and.w	r3, r3, #3
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d001      	beq.n	800a920 <tcp_receive+0xb1c>
 800a91c:	2301      	movs	r3, #1
 800a91e:	e000      	b.n	800a922 <tcp_receive+0xb1e>
 800a920:	2300      	movs	r3, #0
 800a922:	18e1      	adds	r1, r4, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a928:	b28b      	uxth	r3, r1
 800a92a:	1ad3      	subs	r3, r2, r3
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f7fc fb50 	bl	8006fd8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	891b      	ldrh	r3, [r3, #8]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d027      	beq.n	800a992 <tcp_receive+0xb8e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a942:	4b0d      	ldr	r3, [pc, #52]	; (800a978 <tcp_receive+0xb74>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d01c      	beq.n	800a984 <tcp_receive+0xb80>
              pbuf_cat(recv_data, cseg->p);
 800a94a:	4b0b      	ldr	r3, [pc, #44]	; (800a978 <tcp_receive+0xb74>)
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	4619      	mov	r1, r3
 800a954:	4610      	mov	r0, r2
 800a956:	f7fb fc39 	bl	80061cc <pbuf_cat>
 800a95a:	e017      	b.n	800a98c <tcp_receive+0xb88>
 800a95c:	2000072a 	.word	0x2000072a
 800a960:	20000720 	.word	0x20000720
 800a964:	200006fc 	.word	0x200006fc
 800a968:	08016904 	.word	0x08016904
 800a96c:	08016cd4 	.word	0x08016cd4
 800a970:	08016940 	.word	0x08016940
 800a974:	08016d10 	.word	0x08016d10
 800a978:	20000730 	.word	0x20000730
 800a97c:	2000072d 	.word	0x2000072d
 800a980:	08016d30 	.word	0x08016d30
            } else {
              recv_data = cseg->p;
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	4a73      	ldr	r2, [pc, #460]	; (800ab58 <tcp_receive+0xd54>)
 800a98a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	2200      	movs	r2, #0
 800a990:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	899b      	ldrh	r3, [r3, #12]
 800a998:	b29b      	uxth	r3, r3
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7f9 fa3c 	bl	8003e18 <lwip_htons>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	f003 0301 	and.w	r3, r3, #1
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d00d      	beq.n	800a9c8 <tcp_receive+0xbc4>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a9ac:	4b6b      	ldr	r3, [pc, #428]	; (800ab5c <tcp_receive+0xd58>)
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	f043 0320 	orr.w	r3, r3, #32
 800a9b4:	b2da      	uxtb	r2, r3
 800a9b6:	4b69      	ldr	r3, [pc, #420]	; (800ab5c <tcp_receive+0xd58>)
 800a9b8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	7d1b      	ldrb	r3, [r3, #20]
 800a9be:	2b04      	cmp	r3, #4
 800a9c0:	d102      	bne.n	800a9c8 <tcp_receive+0xbc4>
              pcb->state = CLOSE_WAIT;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2207      	movs	r2, #7
 800a9c6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a9c8:	69bb      	ldr	r3, [r7, #24]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a9d0:	69b8      	ldr	r0, [r7, #24]
 800a9d2:	f7fd f983 	bl	8007cdc <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d008      	beq.n	800a9f0 <tcp_receive+0xbec>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	f43f af3f 	beq.w	800a86e <tcp_receive+0xa6a>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	8b5b      	ldrh	r3, [r3, #26]
 800a9f4:	f003 0301 	and.w	r3, r3, #1
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d00e      	beq.n	800aa1a <tcp_receive+0xc16>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	8b5b      	ldrh	r3, [r3, #26]
 800aa00:	f023 0301 	bic.w	r3, r3, #1
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	835a      	strh	r2, [r3, #26]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	8b5b      	ldrh	r3, [r3, #26]
 800aa0e:	f043 0302 	orr.w	r3, r3, #2
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800aa18:	e194      	b.n	800ad44 <tcp_receive+0xf40>
        tcp_ack(pcb);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	8b5b      	ldrh	r3, [r3, #26]
 800aa1e:	f043 0301 	orr.w	r3, r3, #1
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800aa28:	e18c      	b.n	800ad44 <tcp_receive+0xf40>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d106      	bne.n	800aa40 <tcp_receive+0xc3c>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800aa32:	484b      	ldr	r0, [pc, #300]	; (800ab60 <tcp_receive+0xd5c>)
 800aa34:	f7fd f96a 	bl	8007d0c <tcp_seg_copy>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	675a      	str	r2, [r3, #116]	; 0x74
 800aa3e:	e179      	b.n	800ad34 <tcp_receive+0xf30>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800aa40:	2300      	movs	r3, #0
 800aa42:	63bb      	str	r3, [r7, #56]	; 0x38
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa4a:	e161      	b.n	800ad10 <tcp_receive+0xf0c>
            if (seqno == next->tcphdr->seqno) {
 800aa4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	685a      	ldr	r2, [r3, #4]
 800aa52:	4b44      	ldr	r3, [pc, #272]	; (800ab64 <tcp_receive+0xd60>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d122      	bne.n	800aaa0 <tcp_receive+0xc9c>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800aa5a:	4b41      	ldr	r3, [pc, #260]	; (800ab60 <tcp_receive+0xd5c>)
 800aa5c:	891a      	ldrh	r2, [r3, #8]
 800aa5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa60:	891b      	ldrh	r3, [r3, #8]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	f240 8159 	bls.w	800ad1a <tcp_receive+0xf16>

                /* If next segment is the last segment in ooseq
                   and smaller than inseg, that means it has been
                   trimmed before to fit our window, so we just
                   break here. */
                if (next->next == NULL) {
 800aa68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f000 8156 	beq.w	800ad1e <tcp_receive+0xf1a>
                }

                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800aa72:	483b      	ldr	r0, [pc, #236]	; (800ab60 <tcp_receive+0xd5c>)
 800aa74:	f7fd f94a 	bl	8007d0c <tcp_seg_copy>
 800aa78:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 8150 	beq.w	800ad22 <tcp_receive+0xf1e>
                  if (prev != NULL) {
 800aa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d003      	beq.n	800aa90 <tcp_receive+0xc8c>
                    prev->next = cseg;
 800aa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	601a      	str	r2, [r3, #0]
 800aa8e:	e002      	b.n	800aa96 <tcp_receive+0xc92>
                  } else {
                    pcb->ooseq = cseg;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800aa96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f7ff f8a1 	bl	8009be0 <tcp_oos_insert_segment>
                }
                break;
 800aa9e:	e140      	b.n	800ad22 <tcp_receive+0xf1e>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d117      	bne.n	800aad6 <tcp_receive+0xcd2>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800aaa6:	4b2f      	ldr	r3, [pc, #188]	; (800ab64 <tcp_receive+0xd60>)
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	1ad3      	subs	r3, r2, r3
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	da58      	bge.n	800ab68 <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aab6:	482a      	ldr	r0, [pc, #168]	; (800ab60 <tcp_receive+0xd5c>)
 800aab8:	f7fd f928 	bl	8007d0c <tcp_seg_copy>
 800aabc:	6178      	str	r0, [r7, #20]
                  if (cseg != NULL) {
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f000 8130 	beq.w	800ad26 <tcp_receive+0xf22>
                    pcb->ooseq = cseg;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	697a      	ldr	r2, [r7, #20]
 800aaca:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800aacc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aace:	6978      	ldr	r0, [r7, #20]
 800aad0:	f7ff f886 	bl	8009be0 <tcp_oos_insert_segment>
                  }
                  break;
 800aad4:	e127      	b.n	800ad26 <tcp_receive+0xf22>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800aad6:	4b23      	ldr	r3, [pc, #140]	; (800ab64 <tcp_receive+0xd60>)
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	3b01      	subs	r3, #1
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	db3f      	blt.n	800ab68 <tcp_receive+0xd64>
 800aae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	685a      	ldr	r2, [r3, #4]
 800aaee:	4b1d      	ldr	r3, [pc, #116]	; (800ab64 <tcp_receive+0xd60>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	1ad3      	subs	r3, r2, r3
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	db36      	blt.n	800ab68 <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aafa:	4819      	ldr	r0, [pc, #100]	; (800ab60 <tcp_receive+0xd5c>)
 800aafc:	f7fd f906 	bl	8007d0c <tcp_seg_copy>
 800ab00:	6138      	str	r0, [r7, #16]
                  if (cseg != NULL) {
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 8110 	beq.w	800ad2a <tcp_receive+0xf26>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ab0a:	4b16      	ldr	r3, [pc, #88]	; (800ab64 <tcp_receive+0xd60>)
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab16:	8909      	ldrh	r1, [r1, #8]
 800ab18:	440b      	add	r3, r1
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	da12      	bge.n	800ab46 <tcp_receive+0xd42>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ab20:	4b10      	ldr	r3, [pc, #64]	; (800ab64 <tcp_receive+0xd60>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	1ad3      	subs	r3, r2, r3
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab34:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ab36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab38:	685a      	ldr	r2, [r3, #4]
 800ab3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3c:	891b      	ldrh	r3, [r3, #8]
 800ab3e:	4619      	mov	r1, r3
 800ab40:	4610      	mov	r0, r2
 800ab42:	f7fb f903 	bl	8005d4c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ab46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab48:	693a      	ldr	r2, [r7, #16]
 800ab4a:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ab4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab4e:	6938      	ldr	r0, [r7, #16]
 800ab50:	f7ff f846 	bl	8009be0 <tcp_oos_insert_segment>
                  }
                  break;
 800ab54:	e0e9      	b.n	800ad2a <tcp_receive+0xf26>
 800ab56:	bf00      	nop
 800ab58:	20000730 	.word	0x20000730
 800ab5c:	2000072d 	.word	0x2000072d
 800ab60:	200006fc 	.word	0x200006fc
 800ab64:	20000720 	.word	0x20000720
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ab68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab6a:	63bb      	str	r3, [r7, #56]	; 0x38

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ab6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f040 80ca 	bne.w	800ad0a <tcp_receive+0xf06>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ab76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	685a      	ldr	r2, [r3, #4]
 800ab7c:	4b81      	ldr	r3, [pc, #516]	; (800ad84 <tcp_receive+0xf80>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f280 80c1 	bge.w	800ad0a <tcp_receive+0xf06>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ab88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	899b      	ldrh	r3, [r3, #12]
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7f9 f941 	bl	8003e18 <lwip_htons>
 800ab96:	4603      	mov	r3, r0
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	f003 0301 	and.w	r3, r3, #1
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f040 80c5 	bne.w	800ad2e <tcp_receive+0xf2a>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800aba4:	4878      	ldr	r0, [pc, #480]	; (800ad88 <tcp_receive+0xf84>)
 800aba6:	f7fd f8b1 	bl	8007d0c <tcp_seg_copy>
 800abaa:	4602      	mov	r2, r0
 800abac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abae:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800abb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f000 80bc 	beq.w	800ad32 <tcp_receive+0xf2e>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800abba:	4b72      	ldr	r3, [pc, #456]	; (800ad84 <tcp_receive+0xf80>)
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800abc6:	8909      	ldrh	r1, [r1, #8]
 800abc8:	440b      	add	r3, r1
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	2b00      	cmp	r3, #0
 800abce:	da12      	bge.n	800abf6 <tcp_receive+0xdf2>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800abd0:	4b6c      	ldr	r3, [pc, #432]	; (800ad84 <tcp_receive+0xf80>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	b29b      	uxth	r3, r3
 800abde:	1ad3      	subs	r3, r2, r3
 800abe0:	b29a      	uxth	r2, r3
 800abe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abe4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800abe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abe8:	685a      	ldr	r2, [r3, #4]
 800abea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abec:	891b      	ldrh	r3, [r3, #8]
 800abee:	4619      	mov	r1, r3
 800abf0:	4610      	mov	r0, r2
 800abf2:	f7fb f8ab 	bl	8005d4c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800abfe:	441a      	add	r2, r3
 800ac00:	4b62      	ldr	r3, [pc, #392]	; (800ad8c <tcp_receive+0xf88>)
 800ac02:	881b      	ldrh	r3, [r3, #0]
 800ac04:	4619      	mov	r1, r3
 800ac06:	4b5f      	ldr	r3, [pc, #380]	; (800ad84 <tcp_receive+0xf80>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	440b      	add	r3, r1
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f280 808f 	bge.w	800ad32 <tcp_receive+0xf2e>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ac14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	899b      	ldrh	r3, [r3, #12]
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7f9 f8fa 	bl	8003e18 <lwip_htons>
 800ac24:	4603      	mov	r3, r0
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	f003 0301 	and.w	r3, r3, #1
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d022      	beq.n	800ac76 <tcp_receive+0xe72>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ac30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	691c      	ldr	r4, [r3, #16]
 800ac36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	899b      	ldrh	r3, [r3, #12]
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	b21b      	sxth	r3, r3
 800ac42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ac46:	b21d      	sxth	r5, r3
 800ac48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	899b      	ldrh	r3, [r3, #12]
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7f9 f8e0 	bl	8003e18 <lwip_htons>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7f9 f8d7 	bl	8003e18 <lwip_htons>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	b21b      	sxth	r3, r3
 800ac6e:	432b      	orrs	r3, r5
 800ac70:	b21b      	sxth	r3, r3
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ac76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ac7e:	b291      	uxth	r1, r2
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ac84:	440a      	add	r2, r1
 800ac86:	b291      	uxth	r1, r2
 800ac88:	4a3e      	ldr	r2, [pc, #248]	; (800ad84 <tcp_receive+0xf80>)
 800ac8a:	6812      	ldr	r2, [r2, #0]
 800ac8c:	b292      	uxth	r2, r2
 800ac8e:	1a8a      	subs	r2, r1, r2
 800ac90:	b292      	uxth	r2, r2
 800ac92:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ac94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	685a      	ldr	r2, [r3, #4]
 800ac9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	891b      	ldrh	r3, [r3, #8]
 800aca0:	4619      	mov	r1, r3
 800aca2:	4610      	mov	r0, r2
 800aca4:	f7fb f852 	bl	8005d4c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800aca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	891c      	ldrh	r4, [r3, #8]
 800acae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	899b      	ldrh	r3, [r3, #12]
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	4618      	mov	r0, r3
 800acba:	f7f9 f8ad 	bl	8003e18 <lwip_htons>
 800acbe:	4603      	mov	r3, r0
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	f003 0303 	and.w	r3, r3, #3
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d001      	beq.n	800acce <tcp_receive+0xeca>
 800acca:	2301      	movs	r3, #1
 800accc:	e000      	b.n	800acd0 <tcp_receive+0xecc>
 800acce:	2300      	movs	r3, #0
 800acd0:	4423      	add	r3, r4
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	4b2d      	ldr	r3, [pc, #180]	; (800ad8c <tcp_receive+0xf88>)
 800acd6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 800acd8:	4b2c      	ldr	r3, [pc, #176]	; (800ad8c <tcp_receive+0xf88>)
 800acda:	881b      	ldrh	r3, [r3, #0]
 800acdc:	461a      	mov	r2, r3
 800acde:	4b29      	ldr	r3, [pc, #164]	; (800ad84 <tcp_receive+0xf80>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	441a      	add	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace8:	6879      	ldr	r1, [r7, #4]
 800acea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800acec:	440b      	add	r3, r1
 800acee:	429a      	cmp	r2, r3
 800acf0:	d01f      	beq.n	800ad32 <tcp_receive+0xf2e>
 800acf2:	4b27      	ldr	r3, [pc, #156]	; (800ad90 <tcp_receive+0xf8c>)
 800acf4:	f240 7209 	movw	r2, #1801	; 0x709
 800acf8:	4926      	ldr	r1, [pc, #152]	; (800ad94 <tcp_receive+0xf90>)
 800acfa:	4827      	ldr	r0, [pc, #156]	; (800ad98 <tcp_receive+0xf94>)
 800acfc:	f008 feb4 	bl	8013a68 <iprintf>
 800ad00:	2000      	movs	r0, #0
 800ad02:	f008 ffb3 	bl	8013c6c <fflush>
 800ad06:	f008 fef8 	bl	8013afa <abort>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ad0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f47f ae9a 	bne.w	800aa4c <tcp_receive+0xc48>
 800ad18:	e00c      	b.n	800ad34 <tcp_receive+0xf30>
                break;
 800ad1a:	bf00      	nop
 800ad1c:	e00a      	b.n	800ad34 <tcp_receive+0xf30>
                  break;
 800ad1e:	bf00      	nop
 800ad20:	e008      	b.n	800ad34 <tcp_receive+0xf30>
                break;
 800ad22:	bf00      	nop
 800ad24:	e006      	b.n	800ad34 <tcp_receive+0xf30>
                  break;
 800ad26:	bf00      	nop
 800ad28:	e004      	b.n	800ad34 <tcp_receive+0xf30>
                  break;
 800ad2a:	bf00      	nop
 800ad2c:	e002      	b.n	800ad34 <tcp_receive+0xf30>
                  break;
 800ad2e:	bf00      	nop
 800ad30:	e000      	b.n	800ad34 <tcp_receive+0xf30>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ad32:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f002 f8cf 	bl	800ced8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ad3a:	e003      	b.n	800ad44 <tcp_receive+0xf40>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f002 f8cb 	bl	800ced8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ad42:	e01b      	b.n	800ad7c <tcp_receive+0xf78>
 800ad44:	e01a      	b.n	800ad7c <tcp_receive+0xf78>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ad46:	4b0f      	ldr	r3, [pc, #60]	; (800ad84 <tcp_receive+0xf80>)
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	db0b      	blt.n	800ad6c <tcp_receive+0xf68>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ad5c:	441a      	add	r2, r3
 800ad5e:	4b09      	ldr	r3, [pc, #36]	; (800ad84 <tcp_receive+0xf80>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	425b      	negs	r3, r3
 800ad64:	4413      	add	r3, r2
 800ad66:	3b01      	subs	r3, #1
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	da07      	bge.n	800ad7c <tcp_receive+0xf78>
      tcp_ack_now(pcb);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	8b5b      	ldrh	r3, [r3, #26]
 800ad70:	f043 0302 	orr.w	r3, r3, #2
 800ad74:	b29a      	uxth	r2, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ad7a:	e7ff      	b.n	800ad7c <tcp_receive+0xf78>
 800ad7c:	bf00      	nop
 800ad7e:	3750      	adds	r7, #80	; 0x50
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bdb0      	pop	{r4, r5, r7, pc}
 800ad84:	20000720 	.word	0x20000720
 800ad88:	200006fc 	.word	0x200006fc
 800ad8c:	2000072a 	.word	0x2000072a
 800ad90:	08016904 	.word	0x08016904
 800ad94:	08016c9c 	.word	0x08016c9c
 800ad98:	08016940 	.word	0x08016940

0800ad9c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ada2:	4b15      	ldr	r3, [pc, #84]	; (800adf8 <tcp_get_next_optbyte+0x5c>)
 800ada4:	881b      	ldrh	r3, [r3, #0]
 800ada6:	1c5a      	adds	r2, r3, #1
 800ada8:	b291      	uxth	r1, r2
 800adaa:	4a13      	ldr	r2, [pc, #76]	; (800adf8 <tcp_get_next_optbyte+0x5c>)
 800adac:	8011      	strh	r1, [r2, #0]
 800adae:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800adb0:	4b12      	ldr	r3, [pc, #72]	; (800adfc <tcp_get_next_optbyte+0x60>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d004      	beq.n	800adc2 <tcp_get_next_optbyte+0x26>
 800adb8:	4b11      	ldr	r3, [pc, #68]	; (800ae00 <tcp_get_next_optbyte+0x64>)
 800adba:	881b      	ldrh	r3, [r3, #0]
 800adbc:	88fa      	ldrh	r2, [r7, #6]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d208      	bcs.n	800add4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800adc2:	4b10      	ldr	r3, [pc, #64]	; (800ae04 <tcp_get_next_optbyte+0x68>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	3314      	adds	r3, #20
 800adc8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800adca:	88fb      	ldrh	r3, [r7, #6]
 800adcc:	683a      	ldr	r2, [r7, #0]
 800adce:	4413      	add	r3, r2
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	e00b      	b.n	800adec <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800add4:	88fb      	ldrh	r3, [r7, #6]
 800add6:	b2da      	uxtb	r2, r3
 800add8:	4b09      	ldr	r3, [pc, #36]	; (800ae00 <tcp_get_next_optbyte+0x64>)
 800adda:	881b      	ldrh	r3, [r3, #0]
 800addc:	b2db      	uxtb	r3, r3
 800adde:	1ad3      	subs	r3, r2, r3
 800ade0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ade2:	4b06      	ldr	r3, [pc, #24]	; (800adfc <tcp_get_next_optbyte+0x60>)
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	797b      	ldrb	r3, [r7, #5]
 800ade8:	4413      	add	r3, r2
 800adea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800adec:	4618      	mov	r0, r3
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr
 800adf8:	2000071c 	.word	0x2000071c
 800adfc:	20000718 	.word	0x20000718
 800ae00:	20000716 	.word	0x20000716
 800ae04:	20000710 	.word	0x20000710

0800ae08 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10b      	bne.n	800ae2e <tcp_parseopt+0x26>
 800ae16:	4b34      	ldr	r3, [pc, #208]	; (800aee8 <tcp_parseopt+0xe0>)
 800ae18:	f240 728d 	movw	r2, #1933	; 0x78d
 800ae1c:	4933      	ldr	r1, [pc, #204]	; (800aeec <tcp_parseopt+0xe4>)
 800ae1e:	4834      	ldr	r0, [pc, #208]	; (800aef0 <tcp_parseopt+0xe8>)
 800ae20:	f008 fe22 	bl	8013a68 <iprintf>
 800ae24:	2000      	movs	r0, #0
 800ae26:	f008 ff21 	bl	8013c6c <fflush>
 800ae2a:	f008 fe66 	bl	8013afa <abort>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ae2e:	4b31      	ldr	r3, [pc, #196]	; (800aef4 <tcp_parseopt+0xec>)
 800ae30:	881b      	ldrh	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d054      	beq.n	800aee0 <tcp_parseopt+0xd8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ae36:	4b30      	ldr	r3, [pc, #192]	; (800aef8 <tcp_parseopt+0xf0>)
 800ae38:	2200      	movs	r2, #0
 800ae3a:	801a      	strh	r2, [r3, #0]
 800ae3c:	e044      	b.n	800aec8 <tcp_parseopt+0xc0>
      u8_t opt = tcp_get_next_optbyte();
 800ae3e:	f7ff ffad 	bl	800ad9c <tcp_get_next_optbyte>
 800ae42:	4603      	mov	r3, r0
 800ae44:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ae46:	7bfb      	ldrb	r3, [r7, #15]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d03d      	beq.n	800aec8 <tcp_parseopt+0xc0>
 800ae4c:	2b02      	cmp	r3, #2
 800ae4e:	d002      	beq.n	800ae56 <tcp_parseopt+0x4e>
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d040      	beq.n	800aed6 <tcp_parseopt+0xce>
 800ae54:	e027      	b.n	800aea6 <tcp_parseopt+0x9e>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ae56:	f7ff ffa1 	bl	800ad9c <tcp_get_next_optbyte>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b04      	cmp	r3, #4
 800ae5e:	d13c      	bne.n	800aeda <tcp_parseopt+0xd2>
 800ae60:	4b25      	ldr	r3, [pc, #148]	; (800aef8 <tcp_parseopt+0xf0>)
 800ae62:	881b      	ldrh	r3, [r3, #0]
 800ae64:	3302      	adds	r3, #2
 800ae66:	4a23      	ldr	r2, [pc, #140]	; (800aef4 <tcp_parseopt+0xec>)
 800ae68:	8812      	ldrh	r2, [r2, #0]
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	dc35      	bgt.n	800aeda <tcp_parseopt+0xd2>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ae6e:	f7ff ff95 	bl	800ad9c <tcp_get_next_optbyte>
 800ae72:	4603      	mov	r3, r0
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	021b      	lsls	r3, r3, #8
 800ae78:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ae7a:	f7ff ff8f 	bl	800ad9c <tcp_get_next_optbyte>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	89bb      	ldrh	r3, [r7, #12]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ae88:	89bb      	ldrh	r3, [r7, #12]
 800ae8a:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d804      	bhi.n	800ae9c <tcp_parseopt+0x94>
 800ae92:	89bb      	ldrh	r3, [r7, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d001      	beq.n	800ae9c <tcp_parseopt+0x94>
 800ae98:	89ba      	ldrh	r2, [r7, #12]
 800ae9a:	e001      	b.n	800aea0 <tcp_parseopt+0x98>
 800ae9c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800aea4:	e010      	b.n	800aec8 <tcp_parseopt+0xc0>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800aea6:	f7ff ff79 	bl	800ad9c <tcp_get_next_optbyte>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800aeae:	7afb      	ldrb	r3, [r7, #11]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d914      	bls.n	800aede <tcp_parseopt+0xd6>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800aeb4:	7afb      	ldrb	r3, [r7, #11]
 800aeb6:	b29a      	uxth	r2, r3
 800aeb8:	4b0f      	ldr	r3, [pc, #60]	; (800aef8 <tcp_parseopt+0xf0>)
 800aeba:	881b      	ldrh	r3, [r3, #0]
 800aebc:	4413      	add	r3, r2
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	3b02      	subs	r3, #2
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	4b0c      	ldr	r3, [pc, #48]	; (800aef8 <tcp_parseopt+0xf0>)
 800aec6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800aec8:	4b0b      	ldr	r3, [pc, #44]	; (800aef8 <tcp_parseopt+0xf0>)
 800aeca:	881a      	ldrh	r2, [r3, #0]
 800aecc:	4b09      	ldr	r3, [pc, #36]	; (800aef4 <tcp_parseopt+0xec>)
 800aece:	881b      	ldrh	r3, [r3, #0]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d3b4      	bcc.n	800ae3e <tcp_parseopt+0x36>
 800aed4:	e004      	b.n	800aee0 <tcp_parseopt+0xd8>
          return;
 800aed6:	bf00      	nop
 800aed8:	e002      	b.n	800aee0 <tcp_parseopt+0xd8>
            return;
 800aeda:	bf00      	nop
 800aedc:	e000      	b.n	800aee0 <tcp_parseopt+0xd8>
            return;
 800aede:	bf00      	nop
      }
    }
  }
}
 800aee0:	3710      	adds	r7, #16
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	08016904 	.word	0x08016904
 800aeec:	08016d54 	.word	0x08016d54
 800aef0:	08016940 	.word	0x08016940
 800aef4:	20000714 	.word	0x20000714
 800aef8:	2000071c 	.word	0x2000071c

0800aefc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800aefc:	b480      	push	{r7}
 800aefe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800af00:	4b05      	ldr	r3, [pc, #20]	; (800af18 <tcp_trigger_input_pcb_close+0x1c>)
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	f043 0310 	orr.w	r3, r3, #16
 800af08:	b2da      	uxtb	r2, r3
 800af0a:	4b03      	ldr	r3, [pc, #12]	; (800af18 <tcp_trigger_input_pcb_close+0x1c>)
 800af0c:	701a      	strb	r2, [r3, #0]
}
 800af0e:	bf00      	nop
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr
 800af18:	2000072d 	.word	0x2000072d

0800af1c <tcp_route>:
                                              struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00a      	beq.n	800af44 <tcp_route+0x28>
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	7a1b      	ldrb	r3, [r3, #8]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d006      	beq.n	800af44 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	7a1b      	ldrb	r3, [r3, #8]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fa fd6a 	bl	8005a14 <netif_get_by_index>
 800af40:	4603      	mov	r3, r0
 800af42:	e003      	b.n	800af4c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f7f9 f8db 	bl	8004100 <ip4_route>
 800af4a:	4603      	mov	r3, r0
  }
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800af54:	b590      	push	{r4, r7, lr}
 800af56:	b087      	sub	sp, #28
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	603b      	str	r3, [r7, #0]
 800af60:	4613      	mov	r3, r2
 800af62:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10a      	bne.n	800af80 <tcp_create_segment+0x2c>
 800af6a:	4b52      	ldr	r3, [pc, #328]	; (800b0b4 <tcp_create_segment+0x160>)
 800af6c:	22a6      	movs	r2, #166	; 0xa6
 800af6e:	4952      	ldr	r1, [pc, #328]	; (800b0b8 <tcp_create_segment+0x164>)
 800af70:	4852      	ldr	r0, [pc, #328]	; (800b0bc <tcp_create_segment+0x168>)
 800af72:	f008 fd79 	bl	8013a68 <iprintf>
 800af76:	2000      	movs	r0, #0
 800af78:	f008 fe78 	bl	8013c6c <fflush>
 800af7c:	f008 fdbd 	bl	8013afa <abort>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10a      	bne.n	800af9c <tcp_create_segment+0x48>
 800af86:	4b4b      	ldr	r3, [pc, #300]	; (800b0b4 <tcp_create_segment+0x160>)
 800af88:	22a7      	movs	r2, #167	; 0xa7
 800af8a:	494d      	ldr	r1, [pc, #308]	; (800b0c0 <tcp_create_segment+0x16c>)
 800af8c:	484b      	ldr	r0, [pc, #300]	; (800b0bc <tcp_create_segment+0x168>)
 800af8e:	f008 fd6b 	bl	8013a68 <iprintf>
 800af92:	2000      	movs	r0, #0
 800af94:	f008 fe6a 	bl	8013c6c <fflush>
 800af98:	f008 fdaf 	bl	8013afa <abort>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800af9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800afa0:	f003 0301 	and.w	r3, r3, #1
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d001      	beq.n	800afac <tcp_create_segment+0x58>
 800afa8:	2304      	movs	r3, #4
 800afaa:	e000      	b.n	800afae <tcp_create_segment+0x5a>
 800afac:	2300      	movs	r3, #0
 800afae:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800afb0:	2002      	movs	r0, #2
 800afb2:	f7fa f9fd 	bl	80053b0 <memp_malloc>
 800afb6:	6138      	str	r0, [r7, #16]
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d104      	bne.n	800afc8 <tcp_create_segment+0x74>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800afbe:	68b8      	ldr	r0, [r7, #8]
 800afc0:	f7fb f83c 	bl	800603c <pbuf_free>
    return NULL;
 800afc4:	2300      	movs	r3, #0
 800afc6:	e071      	b.n	800b0ac <tcp_create_segment+0x158>
  }
  seg->flags = optflags;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800afce:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	2200      	movs	r2, #0
 800afd4:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	68ba      	ldr	r2, [r7, #8]
 800afda:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	891a      	ldrh	r2, [r3, #8]
 800afe0:	7dfb      	ldrb	r3, [r7, #23]
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d20a      	bcs.n	800affe <tcp_create_segment+0xaa>
 800afe8:	4b32      	ldr	r3, [pc, #200]	; (800b0b4 <tcp_create_segment+0x160>)
 800afea:	22b3      	movs	r2, #179	; 0xb3
 800afec:	4935      	ldr	r1, [pc, #212]	; (800b0c4 <tcp_create_segment+0x170>)
 800afee:	4833      	ldr	r0, [pc, #204]	; (800b0bc <tcp_create_segment+0x168>)
 800aff0:	f008 fd3a 	bl	8013a68 <iprintf>
 800aff4:	2000      	movs	r0, #0
 800aff6:	f008 fe39 	bl	8013c6c <fflush>
 800affa:	f008 fd7e 	bl	8013afa <abort>
  seg->len = p->tot_len - optlen;
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	891a      	ldrh	r2, [r3, #8]
 800b002:	7dfb      	ldrb	r3, [r7, #23]
 800b004:	b29b      	uxth	r3, r3
 800b006:	1ad3      	subs	r3, r2, r3
 800b008:	b29a      	uxth	r2, r3
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	2200      	movs	r2, #0
 800b012:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b014:	2114      	movs	r1, #20
 800b016:	68b8      	ldr	r0, [r7, #8]
 800b018:	f7fa ffaa 	bl	8005f70 <pbuf_add_header>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00c      	beq.n	800b03c <tcp_create_segment+0xe8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 800b022:	4b29      	ldr	r3, [pc, #164]	; (800b0c8 <tcp_create_segment+0x174>)
 800b024:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b028:	3301      	adds	r3, #1
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	4b26      	ldr	r3, [pc, #152]	; (800b0c8 <tcp_create_segment+0x174>)
 800b02e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    tcp_seg_free(seg);
 800b032:	6938      	ldr	r0, [r7, #16]
 800b034:	f7fc fe52 	bl	8007cdc <tcp_seg_free>
    return NULL;
 800b038:	2300      	movs	r3, #0
 800b03a:	e037      	b.n	800b0ac <tcp_create_segment+0x158>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	685a      	ldr	r2, [r3, #4]
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	691c      	ldr	r4, [r3, #16]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	8adb      	ldrh	r3, [r3, #22]
 800b04e:	4618      	mov	r0, r3
 800b050:	f7f8 fee2 	bl	8003e18 <lwip_htons>
 800b054:	4603      	mov	r3, r0
 800b056:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	691c      	ldr	r4, [r3, #16]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	8b1b      	ldrh	r3, [r3, #24]
 800b060:	4618      	mov	r0, r3
 800b062:	f7f8 fed9 	bl	8003e18 <lwip_htons>
 800b066:	4603      	mov	r3, r0
 800b068:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	691c      	ldr	r4, [r3, #16]
 800b06e:	6838      	ldr	r0, [r7, #0]
 800b070:	f7f8 fee7 	bl	8003e42 <lwip_htonl>
 800b074:	4603      	mov	r3, r0
 800b076:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	691c      	ldr	r4, [r3, #16]
 800b07c:	7dfb      	ldrb	r3, [r7, #23]
 800b07e:	089b      	lsrs	r3, r3, #2
 800b080:	b2db      	uxtb	r3, r3
 800b082:	b29b      	uxth	r3, r3
 800b084:	3305      	adds	r3, #5
 800b086:	b29b      	uxth	r3, r3
 800b088:	031b      	lsls	r3, r3, #12
 800b08a:	b29a      	uxth	r2, r3
 800b08c:	79fb      	ldrb	r3, [r7, #7]
 800b08e:	b29b      	uxth	r3, r3
 800b090:	4313      	orrs	r3, r2
 800b092:	b29b      	uxth	r3, r3
 800b094:	4618      	mov	r0, r3
 800b096:	f7f8 febf 	bl	8003e18 <lwip_htons>
 800b09a:	4603      	mov	r3, r0
 800b09c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	749a      	strb	r2, [r3, #18]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	74da      	strb	r2, [r3, #19]
  return seg;
 800b0aa:	693b      	ldr	r3, [r7, #16]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	371c      	adds	r7, #28
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd90      	pop	{r4, r7, pc}
 800b0b4:	08016d70 	.word	0x08016d70
 800b0b8:	08016d94 	.word	0x08016d94
 800b0bc:	08016db4 	.word	0x08016db4
 800b0c0:	08016ddc 	.word	0x08016ddc
 800b0c4:	08016e00 	.word	0x08016e00
 800b0c8:	20002218 	.word	0x20002218

0800b0cc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b086      	sub	sp, #24
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	607b      	str	r3, [r7, #4]
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	73fb      	strb	r3, [r7, #15]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	81bb      	strh	r3, [r7, #12]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b0e0:	89bb      	ldrh	r3, [r7, #12]
 800b0e2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10a      	bne.n	800b100 <tcp_pbuf_prealloc+0x34>
 800b0ea:	4b36      	ldr	r3, [pc, #216]	; (800b1c4 <tcp_pbuf_prealloc+0xf8>)
 800b0ec:	22eb      	movs	r2, #235	; 0xeb
 800b0ee:	4936      	ldr	r1, [pc, #216]	; (800b1c8 <tcp_pbuf_prealloc+0xfc>)
 800b0f0:	4836      	ldr	r0, [pc, #216]	; (800b1cc <tcp_pbuf_prealloc+0x100>)
 800b0f2:	f008 fcb9 	bl	8013a68 <iprintf>
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	f008 fdb8 	bl	8013c6c <fflush>
 800b0fc:	f008 fcfd 	bl	8013afa <abort>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b100:	6a3b      	ldr	r3, [r7, #32]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d10a      	bne.n	800b11c <tcp_pbuf_prealloc+0x50>
 800b106:	4b2f      	ldr	r3, [pc, #188]	; (800b1c4 <tcp_pbuf_prealloc+0xf8>)
 800b108:	22ec      	movs	r2, #236	; 0xec
 800b10a:	4931      	ldr	r1, [pc, #196]	; (800b1d0 <tcp_pbuf_prealloc+0x104>)
 800b10c:	482f      	ldr	r0, [pc, #188]	; (800b1cc <tcp_pbuf_prealloc+0x100>)
 800b10e:	f008 fcab 	bl	8013a68 <iprintf>
 800b112:	2000      	movs	r0, #0
 800b114:	f008 fdaa 	bl	8013c6c <fflush>
 800b118:	f008 fcef 	bl	8013afa <abort>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b11c:	89ba      	ldrh	r2, [r7, #12]
 800b11e:	897b      	ldrh	r3, [r7, #10]
 800b120:	429a      	cmp	r2, r3
 800b122:	d21f      	bcs.n	800b164 <tcp_pbuf_prealloc+0x98>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b124:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b128:	f003 0302 	and.w	r3, r3, #2
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d111      	bne.n	800b154 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b130:	6a3b      	ldr	r3, [r7, #32]
 800b132:	8b5b      	ldrh	r3, [r3, #26]
 800b134:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d113      	bne.n	800b164 <tcp_pbuf_prealloc+0x98>
        (!(pcb->flags & TF_NODELAY) &&
 800b13c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b140:	2b00      	cmp	r3, #0
 800b142:	d007      	beq.n	800b154 <tcp_pbuf_prealloc+0x88>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b144:	6a3b      	ldr	r3, [r7, #32]
 800b146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d103      	bne.n	800b154 <tcp_pbuf_prealloc+0x88>
          pcb->unacked != NULL))) {
 800b14c:	6a3b      	ldr	r3, [r7, #32]
 800b14e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800b150:	2b00      	cmp	r3, #0
 800b152:	d007      	beq.n	800b164 <tcp_pbuf_prealloc+0x98>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b154:	89bb      	ldrh	r3, [r7, #12]
 800b156:	f203 52b4 	addw	r2, r3, #1460	; 0x5b4
 800b15a:	897b      	ldrh	r3, [r7, #10]
 800b15c:	4293      	cmp	r3, r2
 800b15e:	bf28      	it	cs
 800b160:	4613      	movcs	r3, r2
 800b162:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b164:	8af9      	ldrh	r1, [r7, #22]
 800b166:	7bfb      	ldrb	r3, [r7, #15]
 800b168:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7fa fcfb 	bl	8005b68 <pbuf_alloc>
 800b172:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d101      	bne.n	800b17e <tcp_pbuf_prealloc+0xb2>
    return NULL;
 800b17a:	2300      	movs	r3, #0
 800b17c:	e01e      	b.n	800b1bc <tcp_pbuf_prealloc+0xf0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00b      	beq.n	800b19e <tcp_pbuf_prealloc+0xd2>
 800b186:	4b0f      	ldr	r3, [pc, #60]	; (800b1c4 <tcp_pbuf_prealloc+0xf8>)
 800b188:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800b18c:	4911      	ldr	r1, [pc, #68]	; (800b1d4 <tcp_pbuf_prealloc+0x108>)
 800b18e:	480f      	ldr	r0, [pc, #60]	; (800b1cc <tcp_pbuf_prealloc+0x100>)
 800b190:	f008 fc6a 	bl	8013a68 <iprintf>
 800b194:	2000      	movs	r0, #0
 800b196:	f008 fd69 	bl	8013c6c <fflush>
 800b19a:	f008 fcae 	bl	8013afa <abort>
  *oversize = p->len - length;
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	895a      	ldrh	r2, [r3, #10]
 800b1a2:	89bb      	ldrh	r3, [r7, #12]
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	89ba      	ldrh	r2, [r7, #12]
 800b1b0:	811a      	strh	r2, [r3, #8]
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	891a      	ldrh	r2, [r3, #8]
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	815a      	strh	r2, [r3, #10]
  return p;
 800b1ba:	693b      	ldr	r3, [r7, #16]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3718      	adds	r7, #24
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	08016d70 	.word	0x08016d70
 800b1c8:	08016e18 	.word	0x08016e18
 800b1cc:	08016db4 	.word	0x08016db4
 800b1d0:	08016e3c 	.word	0x08016e3c
 800b1d4:	08016e5c 	.word	0x08016e5c

0800b1d8 <tcp_write_checks>:
 * @param len length of data to send (checked against snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10b      	bne.n	800b202 <tcp_write_checks+0x2a>
 800b1ea:	4b3e      	ldr	r3, [pc, #248]	; (800b2e4 <tcp_write_checks+0x10c>)
 800b1ec:	f44f 729b 	mov.w	r2, #310	; 0x136
 800b1f0:	493d      	ldr	r1, [pc, #244]	; (800b2e8 <tcp_write_checks+0x110>)
 800b1f2:	483e      	ldr	r0, [pc, #248]	; (800b2ec <tcp_write_checks+0x114>)
 800b1f4:	f008 fc38 	bl	8013a68 <iprintf>
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	f008 fd37 	bl	8013c6c <fflush>
 800b1fe:	f008 fc7c 	bl	8013afa <abort>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	7d1b      	ldrb	r3, [r3, #20]
 800b206:	2b04      	cmp	r3, #4
 800b208:	d00e      	beq.n	800b228 <tcp_write_checks+0x50>
      (pcb->state != CLOSE_WAIT) &&
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b20e:	2b07      	cmp	r3, #7
 800b210:	d00a      	beq.n	800b228 <tcp_write_checks+0x50>
      (pcb->state != SYN_SENT) &&
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b216:	2b02      	cmp	r3, #2
 800b218:	d006      	beq.n	800b228 <tcp_write_checks+0x50>
      (pcb->state != SYN_RCVD)) {
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b21e:	2b03      	cmp	r3, #3
 800b220:	d002      	beq.n	800b228 <tcp_write_checks+0x50>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b222:	f06f 030a 	mvn.w	r3, #10
 800b226:	e059      	b.n	800b2dc <tcp_write_checks+0x104>
  } else if (len == 0) {
 800b228:	887b      	ldrh	r3, [r7, #2]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <tcp_write_checks+0x5a>
    return ERR_OK;
 800b22e:	2300      	movs	r3, #0
 800b230:	e054      	b.n	800b2dc <tcp_write_checks+0x104>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b238:	887a      	ldrh	r2, [r7, #2]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d909      	bls.n	800b252 <tcp_write_checks+0x7a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	8b5b      	ldrh	r3, [r3, #26]
 800b242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b246:	b29a      	uxth	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b24c:	f04f 33ff 	mov.w	r3, #4294967295
 800b250:	e044      	b.n	800b2dc <tcp_write_checks+0x104>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b258:	2b07      	cmp	r3, #7
 800b25a:	d911      	bls.n	800b280 <tcp_write_checks+0xa8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 800b25c:	4b24      	ldr	r3, [pc, #144]	; (800b2f0 <tcp_write_checks+0x118>)
 800b25e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b262:	3301      	adds	r3, #1
 800b264:	b29a      	uxth	r2, r3
 800b266:	4b22      	ldr	r3, [pc, #136]	; (800b2f0 <tcp_write_checks+0x118>)
 800b268:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	8b5b      	ldrh	r3, [r3, #26]
 800b270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b274:	b29a      	uxth	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b27a:	f04f 33ff 	mov.w	r3, #4294967295
 800b27e:	e02d      	b.n	800b2dc <tcp_write_checks+0x104>
  }
  if (pcb->snd_queuelen != 0) {
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b286:	2b00      	cmp	r3, #0
 800b288:	d013      	beq.n	800b2b2 <tcp_write_checks+0xda>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d123      	bne.n	800b2da <tcp_write_checks+0x102>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b296:	2b00      	cmp	r3, #0
 800b298:	d11f      	bne.n	800b2da <tcp_write_checks+0x102>
 800b29a:	4b12      	ldr	r3, [pc, #72]	; (800b2e4 <tcp_write_checks+0x10c>)
 800b29c:	f240 1259 	movw	r2, #345	; 0x159
 800b2a0:	4914      	ldr	r1, [pc, #80]	; (800b2f4 <tcp_write_checks+0x11c>)
 800b2a2:	4812      	ldr	r0, [pc, #72]	; (800b2ec <tcp_write_checks+0x114>)
 800b2a4:	f008 fbe0 	bl	8013a68 <iprintf>
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	f008 fcdf 	bl	8013c6c <fflush>
 800b2ae:	f008 fc24 	bl	8013afa <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d103      	bne.n	800b2c2 <tcp_write_checks+0xea>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d00b      	beq.n	800b2da <tcp_write_checks+0x102>
 800b2c2:	4b08      	ldr	r3, [pc, #32]	; (800b2e4 <tcp_write_checks+0x10c>)
 800b2c4:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 800b2c8:	490b      	ldr	r1, [pc, #44]	; (800b2f8 <tcp_write_checks+0x120>)
 800b2ca:	4808      	ldr	r0, [pc, #32]	; (800b2ec <tcp_write_checks+0x114>)
 800b2cc:	f008 fbcc 	bl	8013a68 <iprintf>
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	f008 fccb 	bl	8013c6c <fflush>
 800b2d6:	f008 fc10 	bl	8013afa <abort>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	08016d70 	.word	0x08016d70
 800b2e8:	08016e70 	.word	0x08016e70
 800b2ec:	08016db4 	.word	0x08016db4
 800b2f0:	20002218 	.word	0x20002218
 800b2f4:	08016e90 	.word	0x08016e90
 800b2f8:	08016ecc 	.word	0x08016ecc

0800b2fc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b2fc:	b5b0      	push	{r4, r5, r7, lr}
 800b2fe:	b09a      	sub	sp, #104	; 0x68
 800b300:	af04      	add	r7, sp, #16
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	4611      	mov	r1, r2
 800b308:	461a      	mov	r2, r3
 800b30a:	460b      	mov	r3, r1
 800b30c:	80fb      	strh	r3, [r7, #6]
 800b30e:	4613      	mov	r3, r2
 800b310:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b312:	2300      	movs	r3, #0
 800b314:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b316:	2300      	movs	r3, #0
 800b318:	653b      	str	r3, [r7, #80]	; 0x50
 800b31a:	2300      	movs	r3, #0
 800b31c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b31e:	2300      	movs	r3, #0
 800b320:	64bb      	str	r3, [r7, #72]	; 0x48
 800b322:	2300      	movs	r3, #0
 800b324:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b326:	2300      	movs	r3, #0
 800b328:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800b32c:	2300      	movs	r3, #0
 800b32e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b332:	2300      	movs	r3, #0
 800b334:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800b336:	2300      	movs	r3, #0
 800b338:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 800b33a:	2300      	movs	r3, #0
 800b33c:	87bb      	strh	r3, [r7, #60]	; 0x3c
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800b33e:	2300      	movs	r3, #0
 800b340:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d109      	bne.n	800b35c <tcp_write+0x60>
 800b348:	4ba3      	ldr	r3, [pc, #652]	; (800b5d8 <tcp_write+0x2dc>)
 800b34a:	f240 12a1 	movw	r2, #417	; 0x1a1
 800b34e:	49a3      	ldr	r1, [pc, #652]	; (800b5dc <tcp_write+0x2e0>)
 800b350:	48a3      	ldr	r0, [pc, #652]	; (800b5e0 <tcp_write+0x2e4>)
 800b352:	f7f6 fd62 	bl	8001e1a <lwip_win32_platform_diag>
 800b356:	f06f 030f 	mvn.w	r3, #15
 800b35a:	e3b0      	b.n	800babe <tcp_write+0x7c2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b362:	085b      	lsrs	r3, r3, #1
 800b364:	b29a      	uxth	r2, r3
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b36a:	4293      	cmp	r3, r2
 800b36c:	bf28      	it	cs
 800b36e:	4613      	movcs	r3, r2
 800b370:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b374:	2b00      	cmp	r3, #0
 800b376:	d102      	bne.n	800b37e <tcp_write+0x82>
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b37c:	e000      	b.n	800b380 <tcp_write+0x84>
 800b37e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b380:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d109      	bne.n	800b39c <tcp_write+0xa0>
 800b388:	4b93      	ldr	r3, [pc, #588]	; (800b5d8 <tcp_write+0x2dc>)
 800b38a:	f240 12b1 	movw	r2, #433	; 0x1b1
 800b38e:	4995      	ldr	r1, [pc, #596]	; (800b5e4 <tcp_write+0x2e8>)
 800b390:	4893      	ldr	r0, [pc, #588]	; (800b5e0 <tcp_write+0x2e4>)
 800b392:	f7f6 fd42 	bl	8001e1a <lwip_win32_platform_diag>
 800b396:	f06f 030f 	mvn.w	r3, #15
 800b39a:	e390      	b.n	800babe <tcp_write+0x7c2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b39c:	88fb      	ldrh	r3, [r7, #6]
 800b39e:	4619      	mov	r1, r3
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f7ff ff19 	bl	800b1d8 <tcp_write_checks>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800b3ac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d002      	beq.n	800b3ba <tcp_write+0xbe>
    return err;
 800b3b4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b3b8:	e381      	b.n	800babe <tcp_write+0x7c2>
  }
  queuelen = pcb->snd_queuelen;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b3c0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	f000 8136 	beq.w	800b640 <tcp_write+0x344>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3d8:	653b      	str	r3, [r7, #80]	; 0x50
 800b3da:	e002      	b.n	800b3e2 <tcp_write+0xe6>
         last_unsent = last_unsent->next);
 800b3dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b3e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1f8      	bne.n	800b3dc <tcp_write+0xe0>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b3ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3ec:	7b1b      	ldrb	r3, [r3, #12]
 800b3ee:	f003 0301 	and.w	r3, r3, #1
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d001      	beq.n	800b3fa <tcp_write+0xfe>
 800b3f6:	2304      	movs	r3, #4
 800b3f8:	e000      	b.n	800b3fc <tcp_write+0x100>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b3fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b402:	891b      	ldrh	r3, [r3, #8]
 800b404:	4619      	mov	r1, r3
 800b406:	8c3b      	ldrh	r3, [r7, #32]
 800b408:	440b      	add	r3, r1
 800b40a:	429a      	cmp	r2, r3
 800b40c:	da0b      	bge.n	800b426 <tcp_write+0x12a>
 800b40e:	4b72      	ldr	r3, [pc, #456]	; (800b5d8 <tcp_write+0x2dc>)
 800b410:	f240 12e9 	movw	r2, #489	; 0x1e9
 800b414:	4974      	ldr	r1, [pc, #464]	; (800b5e8 <tcp_write+0x2ec>)
 800b416:	4872      	ldr	r0, [pc, #456]	; (800b5e0 <tcp_write+0x2e4>)
 800b418:	f008 fb26 	bl	8013a68 <iprintf>
 800b41c:	2000      	movs	r0, #0
 800b41e:	f008 fc25 	bl	8013c6c <fflush>
 800b422:	f008 fb6a 	bl	8013afa <abort>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b428:	891a      	ldrh	r2, [r3, #8]
 800b42a:	8c3b      	ldrh	r3, [r7, #32]
 800b42c:	4413      	add	r3, r2
 800b42e:	b29b      	uxth	r3, r3
 800b430:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b432:	1ad3      	subs	r3, r2, r3
 800b434:	873b      	strh	r3, [r7, #56]	; 0x38
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800b43c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b43e:	895b      	ldrh	r3, [r3, #10]
 800b440:	429a      	cmp	r2, r3
 800b442:	d00b      	beq.n	800b45c <tcp_write+0x160>
 800b444:	4b64      	ldr	r3, [pc, #400]	; (800b5d8 <tcp_write+0x2dc>)
 800b446:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b44a:	4968      	ldr	r1, [pc, #416]	; (800b5ec <tcp_write+0x2f0>)
 800b44c:	4864      	ldr	r0, [pc, #400]	; (800b5e0 <tcp_write+0x2e4>)
 800b44e:	f008 fb0b 	bl	8013a68 <iprintf>
 800b452:	2000      	movs	r0, #0
 800b454:	f008 fc0a 	bl	8013c6c <fflush>
 800b458:	f008 fb4f 	bl	8013afa <abort>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b462:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800b464:	8a7b      	ldrh	r3, [r7, #18]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d02c      	beq.n	800b4c4 <tcp_write+0x1c8>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b46a:	8a7b      	ldrh	r3, [r7, #18]
 800b46c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b46e:	429a      	cmp	r2, r3
 800b470:	d20b      	bcs.n	800b48a <tcp_write+0x18e>
 800b472:	4b59      	ldr	r3, [pc, #356]	; (800b5d8 <tcp_write+0x2dc>)
 800b474:	f240 12fb 	movw	r2, #507	; 0x1fb
 800b478:	495d      	ldr	r1, [pc, #372]	; (800b5f0 <tcp_write+0x2f4>)
 800b47a:	4859      	ldr	r0, [pc, #356]	; (800b5e0 <tcp_write+0x2e4>)
 800b47c:	f008 faf4 	bl	8013a68 <iprintf>
 800b480:	2000      	movs	r0, #0
 800b482:	f008 fbf3 	bl	8013c6c <fflush>
 800b486:	f008 fb38 	bl	8013afa <abort>
      seg = last_unsent;
 800b48a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b48c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b48e:	8a7b      	ldrh	r3, [r7, #18]
 800b490:	88fa      	ldrh	r2, [r7, #6]
 800b492:	429a      	cmp	r2, r3
 800b494:	d901      	bls.n	800b49a <tcp_write+0x19e>
 800b496:	8a7b      	ldrh	r3, [r7, #18]
 800b498:	e000      	b.n	800b49c <tcp_write+0x1a0>
 800b49a:	88fb      	ldrh	r3, [r7, #6]
 800b49c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	bfa8      	it	ge
 800b4a2:	4613      	movge	r3, r2
 800b4a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800b4a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b4aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b4ac:	4413      	add	r3, r2
 800b4ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800b4b2:	8a7a      	ldrh	r2, [r7, #18]
 800b4b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b4b6:	1ad3      	subs	r3, r2, r3
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800b4bc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b4be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b4c4:	8a7b      	ldrh	r3, [r7, #18]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d010      	beq.n	800b4ec <tcp_write+0x1f0>
 800b4ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b4ce:	88fb      	ldrh	r3, [r7, #6]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d00b      	beq.n	800b4ec <tcp_write+0x1f0>
 800b4d4:	4b40      	ldr	r3, [pc, #256]	; (800b5d8 <tcp_write+0x2dc>)
 800b4d6:	f240 2203 	movw	r2, #515	; 0x203
 800b4da:	4946      	ldr	r1, [pc, #280]	; (800b5f4 <tcp_write+0x2f8>)
 800b4dc:	4840      	ldr	r0, [pc, #256]	; (800b5e0 <tcp_write+0x2e4>)
 800b4de:	f008 fac3 	bl	8013a68 <iprintf>
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	f008 fbc2 	bl	8013c6c <fflush>
 800b4e8:	f008 fb07 	bl	8013afa <abort>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b4ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b4f0:	88fb      	ldrh	r3, [r7, #6]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	f080 8185 	bcs.w	800b802 <tcp_write+0x506>
 800b4f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f000 8181 	beq.w	800b802 <tcp_write+0x506>
 800b500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b502:	891b      	ldrh	r3, [r3, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	f000 817c 	beq.w	800b802 <tcp_write+0x506>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b50a:	88fa      	ldrh	r2, [r7, #6]
 800b50c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b510:	1ad2      	subs	r2, r2, r3
 800b512:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b514:	4293      	cmp	r3, r2
 800b516:	bfa8      	it	ge
 800b518:	4613      	movge	r3, r2
 800b51a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b51c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b51e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b520:	797b      	ldrb	r3, [r7, #5]
 800b522:	f003 0301 	and.w	r3, r3, #1
 800b526:	2b00      	cmp	r3, #0
 800b528:	d029      	beq.n	800b57e <tcp_write+0x282>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b52a:	f107 0012 	add.w	r0, r7, #18
 800b52e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b530:	8bf9      	ldrh	r1, [r7, #30]
 800b532:	2301      	movs	r3, #1
 800b534:	9302      	str	r3, [sp, #8]
 800b536:	797b      	ldrb	r3, [r7, #5]
 800b538:	9301      	str	r3, [sp, #4]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	4603      	mov	r3, r0
 800b540:	2000      	movs	r0, #0
 800b542:	f7ff fdc3 	bl	800b0cc <tcp_pbuf_prealloc>
 800b546:	6578      	str	r0, [r7, #84]	; 0x54
 800b548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f000 8278 	beq.w	800ba40 <tcp_write+0x744>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 800b550:	8a7b      	ldrh	r3, [r7, #18]
 800b552:	87bb      	strh	r3, [r7, #60]	; 0x3c
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b556:	6858      	ldr	r0, [r3, #4]
 800b558:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	4413      	add	r3, r2
 800b560:	8bfa      	ldrh	r2, [r7, #30]
 800b562:	4619      	mov	r1, r3
 800b564:	f008 fc82 	bl	8013e6c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b568:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b56a:	f7fa fde9 	bl	8006140 <pbuf_clen>
 800b56e:	4603      	mov	r3, r0
 800b570:	461a      	mov	r2, r3
 800b572:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b576:	4413      	add	r3, r2
 800b578:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b57c:	e059      	b.n	800b632 <tcp_write+0x336>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b57e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	637b      	str	r3, [r7, #52]	; 0x34
 800b584:	e002      	b.n	800b58c <tcp_write+0x290>
 800b586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	637b      	str	r3, [r7, #52]	; 0x34
 800b58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1f8      	bne.n	800b586 <tcp_write+0x28a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b596:	7b1b      	ldrb	r3, [r3, #12]
 800b598:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d12d      	bne.n	800b5fc <tcp_write+0x300>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5a6:	8952      	ldrh	r2, [r2, #10]
 800b5a8:	441a      	add	r2, r3
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d125      	bne.n	800b5fc <tcp_write+0x300>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b5b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00b      	beq.n	800b5d0 <tcp_write+0x2d4>
 800b5b8:	4b07      	ldr	r3, [pc, #28]	; (800b5d8 <tcp_write+0x2dc>)
 800b5ba:	f44f 720d 	mov.w	r2, #564	; 0x234
 800b5be:	490e      	ldr	r1, [pc, #56]	; (800b5f8 <tcp_write+0x2fc>)
 800b5c0:	4807      	ldr	r0, [pc, #28]	; (800b5e0 <tcp_write+0x2e4>)
 800b5c2:	f008 fa51 	bl	8013a68 <iprintf>
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	f008 fb50 	bl	8013c6c <fflush>
 800b5cc:	f008 fa95 	bl	8013afa <abort>
          extendlen = seglen;
 800b5d0:	8bfb      	ldrh	r3, [r7, #30]
 800b5d2:	877b      	strh	r3, [r7, #58]	; 0x3a
 800b5d4:	e02d      	b.n	800b632 <tcp_write+0x336>
 800b5d6:	bf00      	nop
 800b5d8:	08016d70 	.word	0x08016d70
 800b5dc:	08016f00 	.word	0x08016f00
 800b5e0:	08016db4 	.word	0x08016db4
 800b5e4:	08016f18 	.word	0x08016f18
 800b5e8:	08016f4c 	.word	0x08016f4c
 800b5ec:	08016f64 	.word	0x08016f64
 800b5f0:	08016f94 	.word	0x08016f94
 800b5f4:	08016fb4 	.word	0x08016fb4
 800b5f8:	08016fd4 	.word	0x08016fd4
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b5fc:	8bfb      	ldrh	r3, [r7, #30]
 800b5fe:	2201      	movs	r2, #1
 800b600:	4619      	mov	r1, r3
 800b602:	2000      	movs	r0, #0
 800b604:	f7fa fab0 	bl	8005b68 <pbuf_alloc>
 800b608:	6578      	str	r0, [r7, #84]	; 0x54
 800b60a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f000 8219 	beq.w	800ba44 <tcp_write+0x748>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b612:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b616:	68ba      	ldr	r2, [r7, #8]
 800b618:	441a      	add	r2, r3
 800b61a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b61c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800b61e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b620:	f7fa fd8e 	bl	8006140 <pbuf_clen>
 800b624:	4603      	mov	r3, r0
 800b626:	461a      	mov	r2, r3
 800b628:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b62c:	4413      	add	r3, r2
 800b62e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800b632:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b636:	8bfb      	ldrh	r3, [r7, #30]
 800b638:	4413      	add	r3, r2
 800b63a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b63e:	e0e0      	b.n	800b802 <tcp_write+0x506>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b646:	2b00      	cmp	r3, #0
 800b648:	f000 80db 	beq.w	800b802 <tcp_write+0x506>
 800b64c:	4ba5      	ldr	r3, [pc, #660]	; (800b8e4 <tcp_write+0x5e8>)
 800b64e:	f240 224e 	movw	r2, #590	; 0x24e
 800b652:	49a5      	ldr	r1, [pc, #660]	; (800b8e8 <tcp_write+0x5ec>)
 800b654:	48a5      	ldr	r0, [pc, #660]	; (800b8ec <tcp_write+0x5f0>)
 800b656:	f008 fa07 	bl	8013a68 <iprintf>
 800b65a:	2000      	movs	r0, #0
 800b65c:	f008 fb06 	bl	8013c6c <fflush>
 800b660:	f008 fa4b 	bl	8013afa <abort>
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
    struct pbuf *p;
    u16_t left = len - pos;
 800b664:	88fa      	ldrh	r2, [r7, #6]
 800b666:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b66a:	1ad3      	subs	r3, r2, r3
 800b66c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800b66e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b672:	b29b      	uxth	r3, r3
 800b674:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b67a:	8b7a      	ldrh	r2, [r7, #26]
 800b67c:	8bbb      	ldrh	r3, [r7, #28]
 800b67e:	4293      	cmp	r3, r2
 800b680:	bf28      	it	cs
 800b682:	4613      	movcs	r3, r2
 800b684:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b686:	797b      	ldrb	r3, [r7, #5]
 800b688:	f003 0301 	and.w	r3, r3, #1
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d03b      	beq.n	800b708 <tcp_write+0x40c>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b690:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b694:	b29a      	uxth	r2, r3
 800b696:	8b3b      	ldrh	r3, [r7, #24]
 800b698:	4413      	add	r3, r2
 800b69a:	b299      	uxth	r1, r3
 800b69c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	bf0c      	ite	eq
 800b6a2:	2301      	moveq	r3, #1
 800b6a4:	2300      	movne	r3, #0
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	f107 0012 	add.w	r0, r7, #18
 800b6ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b6ae:	9302      	str	r3, [sp, #8]
 800b6b0:	797b      	ldrb	r3, [r7, #5]
 800b6b2:	9301      	str	r3, [sp, #4]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2036      	movs	r0, #54	; 0x36
 800b6bc:	f7ff fd06 	bl	800b0cc <tcp_pbuf_prealloc>
 800b6c0:	6338      	str	r0, [r7, #48]	; 0x30
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f000 81bf 	beq.w	800ba48 <tcp_write+0x74c>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6cc:	895b      	ldrh	r3, [r3, #10]
 800b6ce:	8b3a      	ldrh	r2, [r7, #24]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d90b      	bls.n	800b6ec <tcp_write+0x3f0>
 800b6d4:	4b83      	ldr	r3, [pc, #524]	; (800b8e4 <tcp_write+0x5e8>)
 800b6d6:	f240 226a 	movw	r2, #618	; 0x26a
 800b6da:	4985      	ldr	r1, [pc, #532]	; (800b8f0 <tcp_write+0x5f4>)
 800b6dc:	4883      	ldr	r0, [pc, #524]	; (800b8ec <tcp_write+0x5f0>)
 800b6de:	f008 f9c3 	bl	8013a68 <iprintf>
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	f008 fac2 	bl	8013c6c <fflush>
 800b6e8:	f008 fa07 	bl	8013afa <abort>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ee:	685a      	ldr	r2, [r3, #4]
 800b6f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b6f4:	18d0      	adds	r0, r2, r3
 800b6f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b6fa:	68ba      	ldr	r2, [r7, #8]
 800b6fc:	4413      	add	r3, r2
 800b6fe:	8b3a      	ldrh	r2, [r7, #24]
 800b700:	4619      	mov	r1, r3
 800b702:	f008 fbb3 	bl	8013e6c <memcpy>
 800b706:	e034      	b.n	800b772 <tcp_write+0x476>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b708:	8a7b      	ldrh	r3, [r7, #18]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00b      	beq.n	800b726 <tcp_write+0x42a>
 800b70e:	4b75      	ldr	r3, [pc, #468]	; (800b8e4 <tcp_write+0x5e8>)
 800b710:	f44f 721d 	mov.w	r2, #628	; 0x274
 800b714:	4977      	ldr	r1, [pc, #476]	; (800b8f4 <tcp_write+0x5f8>)
 800b716:	4875      	ldr	r0, [pc, #468]	; (800b8ec <tcp_write+0x5f0>)
 800b718:	f008 f9a6 	bl	8013a68 <iprintf>
 800b71c:	2000      	movs	r0, #0
 800b71e:	f008 faa5 	bl	8013c6c <fflush>
 800b722:	f008 f9ea 	bl	8013afa <abort>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b726:	8b3b      	ldrh	r3, [r7, #24]
 800b728:	2201      	movs	r2, #1
 800b72a:	4619      	mov	r1, r3
 800b72c:	2036      	movs	r0, #54	; 0x36
 800b72e:	f7fa fa1b 	bl	8005b68 <pbuf_alloc>
 800b732:	6178      	str	r0, [r7, #20]
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	2b00      	cmp	r3, #0
 800b738:	f000 8188 	beq.w	800ba4c <tcp_write+0x750>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b73c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	441a      	add	r2, r3
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b748:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b752:	4619      	mov	r1, r3
 800b754:	2036      	movs	r0, #54	; 0x36
 800b756:	f7fa fa07 	bl	8005b68 <pbuf_alloc>
 800b75a:	6338      	str	r0, [r7, #48]	; 0x30
 800b75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d103      	bne.n	800b76a <tcp_write+0x46e>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b762:	6978      	ldr	r0, [r7, #20]
 800b764:	f7fa fc6a 	bl	800603c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b768:	e173      	b.n	800ba52 <tcp_write+0x756>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b76a:	6979      	ldr	r1, [r7, #20]
 800b76c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b76e:	f7fa fd2d 	bl	80061cc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b772:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b774:	f7fa fce4 	bl	8006140 <pbuf_clen>
 800b778:	4603      	mov	r3, r0
 800b77a:	461a      	mov	r2, r3
 800b77c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b780:	4413      	add	r3, r2
 800b782:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b786:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b78a:	2b08      	cmp	r3, #8
 800b78c:	d903      	bls.n	800b796 <tcp_write+0x49a>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b78e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b790:	f7fa fc54 	bl	800603c <pbuf_free>
      goto memerr;
 800b794:	e15d      	b.n	800ba52 <tcp_write+0x756>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b79a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b79e:	441a      	add	r2, r3
 800b7a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7a4:	9300      	str	r3, [sp, #0]
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f7ff fbd1 	bl	800af54 <tcp_create_segment>
 800b7b2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b7b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f000 814a 	beq.w	800ba50 <tcp_write+0x754>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 800b7bc:	8a7a      	ldrh	r2, [r7, #18]
 800b7be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7c0:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b7c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d102      	bne.n	800b7ce <tcp_write+0x4d2>
      queue = seg;
 800b7c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7ca:	647b      	str	r3, [r7, #68]	; 0x44
 800b7cc:	e011      	b.n	800b7f2 <tcp_write+0x4f6>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b7ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d10b      	bne.n	800b7ec <tcp_write+0x4f0>
 800b7d4:	4b43      	ldr	r3, [pc, #268]	; (800b8e4 <tcp_write+0x5e8>)
 800b7d6:	f240 22ae 	movw	r2, #686	; 0x2ae
 800b7da:	4947      	ldr	r1, [pc, #284]	; (800b8f8 <tcp_write+0x5fc>)
 800b7dc:	4843      	ldr	r0, [pc, #268]	; (800b8ec <tcp_write+0x5f0>)
 800b7de:	f008 f943 	bl	8013a68 <iprintf>
 800b7e2:	2000      	movs	r0, #0
 800b7e4:	f008 fa42 	bl	8013c6c <fflush>
 800b7e8:	f008 f987 	bl	8013afa <abort>
      prev_seg->next = seg;
 800b7ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7f0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b7f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7f4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b7f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7fa:	8b3b      	ldrh	r3, [r7, #24]
 800b7fc:	4413      	add	r3, r2
 800b7fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b802:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b806:	88fb      	ldrh	r3, [r7, #6]
 800b808:	429a      	cmp	r2, r3
 800b80a:	f4ff af2b 	bcc.w	800b664 <tcp_write+0x368>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 800b80e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b810:	2b00      	cmp	r3, #0
 800b812:	d009      	beq.n	800b828 <tcp_write+0x52c>
 800b814:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b816:	2b00      	cmp	r3, #0
 800b818:	d006      	beq.n	800b828 <tcp_write+0x52c>
    last_unsent->oversize_left += oversize_add;
 800b81a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b81c:	895a      	ldrh	r2, [r3, #10]
 800b81e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b820:	4413      	add	r3, r2
 800b822:	b29a      	uxth	r2, r3
 800b824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b826:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b828:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d044      	beq.n	800b8b8 <tcp_write+0x5bc>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b82e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b834:	e01e      	b.n	800b874 <tcp_write+0x578>
      p->tot_len += oversize_used;
 800b836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b838:	891a      	ldrh	r2, [r3, #8]
 800b83a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b83c:	4413      	add	r3, r2
 800b83e:	b29a      	uxth	r2, r3
 800b840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b842:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d110      	bne.n	800b86e <tcp_write+0x572>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b852:	8952      	ldrh	r2, [r2, #10]
 800b854:	4413      	add	r3, r2
 800b856:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b858:	68b9      	ldr	r1, [r7, #8]
 800b85a:	4618      	mov	r0, r3
 800b85c:	f008 fb06 	bl	8013e6c <memcpy>
        p->len += oversize_used;
 800b860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b862:	895a      	ldrh	r2, [r3, #10]
 800b864:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b866:	4413      	add	r3, r2
 800b868:	b29a      	uxth	r2, r3
 800b86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86c:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b876:	2b00      	cmp	r3, #0
 800b878:	d1dd      	bne.n	800b836 <tcp_write+0x53a>
      }
    }
    last_unsent->len += oversize_used;
 800b87a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b87c:	891a      	ldrh	r2, [r3, #8]
 800b87e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b880:	4413      	add	r3, r2
 800b882:	b29a      	uxth	r2, r3
 800b884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b886:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 800b888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b88a:	895b      	ldrh	r3, [r3, #10]
 800b88c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b88e:	429a      	cmp	r2, r3
 800b890:	d90b      	bls.n	800b8aa <tcp_write+0x5ae>
 800b892:	4b14      	ldr	r3, [pc, #80]	; (800b8e4 <tcp_write+0x5e8>)
 800b894:	f240 22d7 	movw	r2, #727	; 0x2d7
 800b898:	4918      	ldr	r1, [pc, #96]	; (800b8fc <tcp_write+0x600>)
 800b89a:	4814      	ldr	r0, [pc, #80]	; (800b8ec <tcp_write+0x5f0>)
 800b89c:	f008 f8e4 	bl	8013a68 <iprintf>
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	f008 f9e3 	bl	8013c6c <fflush>
 800b8a6:	f008 f928 	bl	8013afa <abort>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 800b8aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ac:	895a      	ldrh	r2, [r3, #10]
 800b8ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	b29a      	uxth	r2, r3
 800b8b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8b6:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b8b8:	8a7a      	ldrh	r2, [r7, #18]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b8c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d02d      	beq.n	800b922 <tcp_write+0x626>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b8c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d11b      	bne.n	800b904 <tcp_write+0x608>
 800b8cc:	4b05      	ldr	r3, [pc, #20]	; (800b8e4 <tcp_write+0x5e8>)
 800b8ce:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b8d2:	490b      	ldr	r1, [pc, #44]	; (800b900 <tcp_write+0x604>)
 800b8d4:	4805      	ldr	r0, [pc, #20]	; (800b8ec <tcp_write+0x5f0>)
 800b8d6:	f008 f8c7 	bl	8013a68 <iprintf>
 800b8da:	2000      	movs	r0, #0
 800b8dc:	f008 f9c6 	bl	8013c6c <fflush>
 800b8e0:	f008 f90b 	bl	8013afa <abort>
 800b8e4:	08016d70 	.word	0x08016d70
 800b8e8:	08017000 	.word	0x08017000
 800b8ec:	08016db4 	.word	0x08016db4
 800b8f0:	08017030 	.word	0x08017030
 800b8f4:	08017070 	.word	0x08017070
 800b8f8:	08017080 	.word	0x08017080
 800b8fc:	08017094 	.word	0x08017094
 800b900:	080170c0 	.word	0x080170c0
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7fa fc5e 	bl	80061cc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b912:	891a      	ldrh	r2, [r3, #8]
 800b914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b916:	891b      	ldrh	r3, [r3, #8]
 800b918:	4413      	add	r3, r2
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b91e:	811a      	strh	r2, [r3, #8]
 800b920:	e03c      	b.n	800b99c <tcp_write+0x6a0>
  } else if (extendlen > 0) {
 800b922:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b924:	2b00      	cmp	r3, #0
 800b926:	d039      	beq.n	800b99c <tcp_write+0x6a0>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d003      	beq.n	800b936 <tcp_write+0x63a>
 800b92e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10b      	bne.n	800b94e <tcp_write+0x652>
 800b936:	4b64      	ldr	r3, [pc, #400]	; (800bac8 <tcp_write+0x7cc>)
 800b938:	f240 22ea 	movw	r2, #746	; 0x2ea
 800b93c:	4963      	ldr	r1, [pc, #396]	; (800bacc <tcp_write+0x7d0>)
 800b93e:	4864      	ldr	r0, [pc, #400]	; (800bad0 <tcp_write+0x7d4>)
 800b940:	f008 f892 	bl	8013a68 <iprintf>
 800b944:	2000      	movs	r0, #0
 800b946:	f008 f991 	bl	8013c6c <fflush>
 800b94a:	f008 f8d6 	bl	8013afa <abort>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b94e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	62bb      	str	r3, [r7, #40]	; 0x28
 800b954:	e009      	b.n	800b96a <tcp_write+0x66e>
      p->tot_len += extendlen;
 800b956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b958:	891a      	ldrh	r2, [r3, #8]
 800b95a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b95c:	4413      	add	r3, r2
 800b95e:	b29a      	uxth	r2, r3
 800b960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b962:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	62bb      	str	r3, [r7, #40]	; 0x28
 800b96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d1f1      	bne.n	800b956 <tcp_write+0x65a>
    }
    p->tot_len += extendlen;
 800b972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b974:	891a      	ldrh	r2, [r3, #8]
 800b976:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b978:	4413      	add	r3, r2
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97e:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b982:	895a      	ldrh	r2, [r3, #10]
 800b984:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b986:	4413      	add	r3, r2
 800b988:	b29a      	uxth	r2, r3
 800b98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b98e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b990:	891a      	ldrh	r2, [r3, #8]
 800b992:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b994:	4413      	add	r3, r2
 800b996:	b29a      	uxth	r2, r3
 800b998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b99a:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b99c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d103      	bne.n	800b9aa <tcp_write+0x6ae>
    pcb->unsent = queue;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9a6:	66da      	str	r2, [r3, #108]	; 0x6c
 800b9a8:	e002      	b.n	800b9b0 <tcp_write+0x6b4>
  } else {
    last_unsent->next = queue;
 800b9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9ae:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b9b4:	88fb      	ldrh	r3, [r7, #6]
 800b9b6:	441a      	add	r2, r3
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b9c2:	88fb      	ldrh	r3, [r7, #6]
 800b9c4:	1ad3      	subs	r3, r2, r3
 800b9c6:	b29a      	uxth	r2, r3
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b9d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d013      	beq.n	800ba0a <tcp_write+0x70e>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d10f      	bne.n	800ba0a <tcp_write+0x70e>
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d10b      	bne.n	800ba0a <tcp_write+0x70e>
 800b9f2:	4b35      	ldr	r3, [pc, #212]	; (800bac8 <tcp_write+0x7cc>)
 800b9f4:	f240 3216 	movw	r2, #790	; 0x316
 800b9f8:	4936      	ldr	r1, [pc, #216]	; (800bad4 <tcp_write+0x7d8>)
 800b9fa:	4835      	ldr	r0, [pc, #212]	; (800bad0 <tcp_write+0x7d4>)
 800b9fc:	f008 f834 	bl	8013a68 <iprintf>
 800ba00:	2000      	movs	r0, #0
 800ba02:	f008 f933 	bl	8013c6c <fflush>
 800ba06:	f008 f878 	bl	8013afa <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800ba0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d015      	beq.n	800ba3c <tcp_write+0x740>
 800ba10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba12:	691b      	ldr	r3, [r3, #16]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d011      	beq.n	800ba3c <tcp_write+0x740>
 800ba18:	797b      	ldrb	r3, [r7, #5]
 800ba1a:	f003 0302 	and.w	r3, r3, #2
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d10c      	bne.n	800ba3c <tcp_write+0x740>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800ba22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba24:	691c      	ldr	r4, [r3, #16]
 800ba26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba28:	691b      	ldr	r3, [r3, #16]
 800ba2a:	899b      	ldrh	r3, [r3, #12]
 800ba2c:	b29d      	uxth	r5, r3
 800ba2e:	2008      	movs	r0, #8
 800ba30:	f7f8 f9f2 	bl	8003e18 <lwip_htons>
 800ba34:	4603      	mov	r3, r0
 800ba36:	432b      	orrs	r3, r5
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	e03e      	b.n	800babe <tcp_write+0x7c2>
          goto memerr;
 800ba40:	bf00      	nop
 800ba42:	e006      	b.n	800ba52 <tcp_write+0x756>
            goto memerr;
 800ba44:	bf00      	nop
 800ba46:	e004      	b.n	800ba52 <tcp_write+0x756>
        goto memerr;
 800ba48:	bf00      	nop
 800ba4a:	e002      	b.n	800ba52 <tcp_write+0x756>
        goto memerr;
 800ba4c:	bf00      	nop
 800ba4e:	e000      	b.n	800ba52 <tcp_write+0x756>
      goto memerr;
 800ba50:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	8b5b      	ldrh	r3, [r3, #26]
 800ba56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba5a:	b29a      	uxth	r2, r3
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 800ba60:	4b1d      	ldr	r3, [pc, #116]	; (800bad8 <tcp_write+0x7dc>)
 800ba62:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ba66:	3301      	adds	r3, #1
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	4b1b      	ldr	r3, [pc, #108]	; (800bad8 <tcp_write+0x7dc>)
 800ba6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  if (concat_p != NULL) {
 800ba70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d002      	beq.n	800ba7c <tcp_write+0x780>
    pbuf_free(concat_p);
 800ba76:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ba78:	f7fa fae0 	bl	800603c <pbuf_free>
  }
  if (queue != NULL) {
 800ba7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d002      	beq.n	800ba88 <tcp_write+0x78c>
    tcp_segs_free(queue);
 800ba82:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ba84:	f7fc f916 	bl	8007cb4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d013      	beq.n	800baba <tcp_write+0x7be>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10f      	bne.n	800baba <tcp_write+0x7be>
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d10b      	bne.n	800baba <tcp_write+0x7be>
 800baa2:	4b09      	ldr	r3, [pc, #36]	; (800bac8 <tcp_write+0x7cc>)
 800baa4:	f240 322b 	movw	r2, #811	; 0x32b
 800baa8:	490a      	ldr	r1, [pc, #40]	; (800bad4 <tcp_write+0x7d8>)
 800baaa:	4809      	ldr	r0, [pc, #36]	; (800bad0 <tcp_write+0x7d4>)
 800baac:	f007 ffdc 	bl	8013a68 <iprintf>
 800bab0:	2000      	movs	r0, #0
 800bab2:	f008 f8db 	bl	8013c6c <fflush>
 800bab6:	f008 f820 	bl	8013afa <abort>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800baba:	f04f 33ff 	mov.w	r3, #4294967295
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3758      	adds	r7, #88	; 0x58
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bdb0      	pop	{r4, r5, r7, pc}
 800bac6:	bf00      	nop
 800bac8:	08016d70 	.word	0x08016d70
 800bacc:	080170f8 	.word	0x080170f8
 800bad0:	08016db4 	.word	0x08016db4
 800bad4:	08017130 	.word	0x08017130
 800bad8:	20002218 	.word	0x20002218

0800badc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800badc:	b5b0      	push	{r4, r5, r7, lr}
 800bade:	b08a      	sub	sp, #40	; 0x28
 800bae0:	af02      	add	r7, sp, #8
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	460b      	mov	r3, r1
 800bae6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800bae8:	2300      	movs	r3, #0
 800baea:	61fb      	str	r3, [r7, #28]
 800baec:	2300      	movs	r3, #0
 800baee:	613b      	str	r3, [r7, #16]
  struct pbuf *p = NULL;
 800baf0:	2300      	movs	r3, #0
 800baf2:	61bb      	str	r3, [r7, #24]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10b      	bne.n	800bb12 <tcp_split_unsent_seg+0x36>
 800bafa:	4ba7      	ldr	r3, [pc, #668]	; (800bd98 <tcp_split_unsent_seg+0x2bc>)
 800bafc:	f240 324e 	movw	r2, #846	; 0x34e
 800bb00:	49a6      	ldr	r1, [pc, #664]	; (800bd9c <tcp_split_unsent_seg+0x2c0>)
 800bb02:	48a7      	ldr	r0, [pc, #668]	; (800bda0 <tcp_split_unsent_seg+0x2c4>)
 800bb04:	f007 ffb0 	bl	8013a68 <iprintf>
 800bb08:	2000      	movs	r0, #0
 800bb0a:	f008 f8af 	bl	8013c6c <fflush>
 800bb0e:	f007 fff4 	bl	8013afa <abort>

  useg = pcb->unsent;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb16:	613b      	str	r3, [r7, #16]
  if (useg == NULL) {
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d102      	bne.n	800bb24 <tcp_split_unsent_seg+0x48>
    return ERR_MEM;
 800bb1e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb22:	e135      	b.n	800bd90 <tcp_split_unsent_seg+0x2b4>
  }

  if (split == 0) {
 800bb24:	887b      	ldrh	r3, [r7, #2]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d10b      	bne.n	800bb42 <tcp_split_unsent_seg+0x66>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800bb2a:	4b9b      	ldr	r3, [pc, #620]	; (800bd98 <tcp_split_unsent_seg+0x2bc>)
 800bb2c:	f240 3256 	movw	r2, #854	; 0x356
 800bb30:	499c      	ldr	r1, [pc, #624]	; (800bda4 <tcp_split_unsent_seg+0x2c8>)
 800bb32:	489b      	ldr	r0, [pc, #620]	; (800bda0 <tcp_split_unsent_seg+0x2c4>)
 800bb34:	f007 ff98 	bl	8013a68 <iprintf>
 800bb38:	2000      	movs	r0, #0
 800bb3a:	f008 f897 	bl	8013c6c <fflush>
 800bb3e:	f007 ffdc 	bl	8013afa <abort>
    return ERR_VAL;
  }

  if (useg->len <= split) {
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	891b      	ldrh	r3, [r3, #8]
 800bb46:	887a      	ldrh	r2, [r7, #2]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d301      	bcc.n	800bb50 <tcp_split_unsent_seg+0x74>
    return ERR_OK;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	e11f      	b.n	800bd90 <tcp_split_unsent_seg+0x2b4>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb54:	887a      	ldrh	r2, [r7, #2]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d90b      	bls.n	800bb72 <tcp_split_unsent_seg+0x96>
 800bb5a:	4b8f      	ldr	r3, [pc, #572]	; (800bd98 <tcp_split_unsent_seg+0x2bc>)
 800bb5c:	f240 325e 	movw	r2, #862	; 0x35e
 800bb60:	4991      	ldr	r1, [pc, #580]	; (800bda8 <tcp_split_unsent_seg+0x2cc>)
 800bb62:	488f      	ldr	r0, [pc, #572]	; (800bda0 <tcp_split_unsent_seg+0x2c4>)
 800bb64:	f007 ff80 	bl	8013a68 <iprintf>
 800bb68:	2000      	movs	r0, #0
 800bb6a:	f008 f87f 	bl	8013c6c <fflush>
 800bb6e:	f007 ffc4 	bl	8013afa <abort>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	891b      	ldrh	r3, [r3, #8]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d10b      	bne.n	800bb92 <tcp_split_unsent_seg+0xb6>
 800bb7a:	4b87      	ldr	r3, [pc, #540]	; (800bd98 <tcp_split_unsent_seg+0x2bc>)
 800bb7c:	f240 325f 	movw	r2, #863	; 0x35f
 800bb80:	498a      	ldr	r1, [pc, #552]	; (800bdac <tcp_split_unsent_seg+0x2d0>)
 800bb82:	4887      	ldr	r0, [pc, #540]	; (800bda0 <tcp_split_unsent_seg+0x2c4>)
 800bb84:	f007 ff70 	bl	8013a68 <iprintf>
 800bb88:	2000      	movs	r0, #0
 800bb8a:	f008 f86f 	bl	8013c6c <fflush>
 800bb8e:	f007 ffb4 	bl	8013afa <abort>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	7b1b      	ldrb	r3, [r3, #12]
 800bb96:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bb98:	7bfb      	ldrb	r3, [r7, #15]
 800bb9a:	f003 0301 	and.w	r3, r3, #1
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d001      	beq.n	800bba6 <tcp_split_unsent_seg+0xca>
 800bba2:	2304      	movs	r3, #4
 800bba4:	e000      	b.n	800bba8 <tcp_split_unsent_seg+0xcc>
 800bba6:	2300      	movs	r3, #0
 800bba8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	891a      	ldrh	r2, [r3, #8]
 800bbae:	887b      	ldrh	r3, [r7, #2]
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800bbb4:	7bbb      	ldrb	r3, [r7, #14]
 800bbb6:	b29a      	uxth	r2, r3
 800bbb8:	89bb      	ldrh	r3, [r7, #12]
 800bbba:	4413      	add	r3, r2
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	2036      	movs	r0, #54	; 0x36
 800bbc6:	f7f9 ffcf 	bl	8005b68 <pbuf_alloc>
 800bbca:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 80bc 	beq.w	800bd4c <tcp_split_unsent_seg+0x270>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	891a      	ldrh	r2, [r3, #8]
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	891b      	ldrh	r3, [r3, #8]
 800bbde:	1ad3      	subs	r3, r2, r3
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	887b      	ldrh	r3, [r7, #2]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	6858      	ldr	r0, [r3, #4]
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	685a      	ldr	r2, [r3, #4]
 800bbf0:	7bbb      	ldrb	r3, [r7, #14]
 800bbf2:	18d1      	adds	r1, r2, r3
 800bbf4:	897b      	ldrh	r3, [r7, #10]
 800bbf6:	89ba      	ldrh	r2, [r7, #12]
 800bbf8:	f7fa fc90 	bl	800651c <pbuf_copy_partial>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	461a      	mov	r2, r3
 800bc00:	89bb      	ldrh	r3, [r7, #12]
 800bc02:	4293      	cmp	r3, r2
 800bc04:	f040 80a4 	bne.w	800bd50 <tcp_split_unsent_seg+0x274>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	691b      	ldr	r3, [r3, #16]
 800bc0c:	899b      	ldrh	r3, [r3, #12]
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7f8 f901 	bl	8003e18 <lwip_htons>
 800bc16:	4603      	mov	r3, r0
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc1e:	75fb      	strb	r3, [r7, #23]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800bc20:	2300      	movs	r3, #0
 800bc22:	75bb      	strb	r3, [r7, #22]

  if (split_flags & TCP_PSH) {
 800bc24:	7dfb      	ldrb	r3, [r7, #23]
 800bc26:	f003 0308 	and.w	r3, r3, #8
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d007      	beq.n	800bc3e <tcp_split_unsent_seg+0x162>
    split_flags &= ~TCP_PSH;
 800bc2e:	7dfb      	ldrb	r3, [r7, #23]
 800bc30:	f023 0308 	bic.w	r3, r3, #8
 800bc34:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_PSH;
 800bc36:	7dbb      	ldrb	r3, [r7, #22]
 800bc38:	f043 0308 	orr.w	r3, r3, #8
 800bc3c:	75bb      	strb	r3, [r7, #22]
  }
  if (split_flags & TCP_FIN) {
 800bc3e:	7dfb      	ldrb	r3, [r7, #23]
 800bc40:	f003 0301 	and.w	r3, r3, #1
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d007      	beq.n	800bc58 <tcp_split_unsent_seg+0x17c>
    split_flags &= ~TCP_FIN;
 800bc48:	7dfb      	ldrb	r3, [r7, #23]
 800bc4a:	f023 0301 	bic.w	r3, r3, #1
 800bc4e:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_FIN;
 800bc50:	7dbb      	ldrb	r3, [r7, #22]
 800bc52:	f043 0301 	orr.w	r3, r3, #1
 800bc56:	75bb      	strb	r3, [r7, #22]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7f8 f8ef 	bl	8003e42 <lwip_htonl>
 800bc64:	4602      	mov	r2, r0
 800bc66:	887b      	ldrh	r3, [r7, #2]
 800bc68:	18d1      	adds	r1, r2, r3
 800bc6a:	7dba      	ldrb	r2, [r7, #22]
 800bc6c:	7bfb      	ldrb	r3, [r7, #15]
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	460b      	mov	r3, r1
 800bc72:	69b9      	ldr	r1, [r7, #24]
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f7ff f96d 	bl	800af54 <tcp_create_segment>
 800bc7a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800bc7c:	69fb      	ldr	r3, [r7, #28]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d102      	bne.n	800bc88 <tcp_split_unsent_seg+0x1ac>
    p = NULL; /* Freed by tcp_create_segment */
 800bc82:	2300      	movs	r3, #0
 800bc84:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
 800bc86:	e064      	b.n	800bd52 <tcp_split_unsent_seg+0x276>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7fa fa57 	bl	8006140 <pbuf_clen>
 800bc92:	4603      	mov	r3, r0
 800bc94:	461a      	mov	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bc9c:	1a9b      	subs	r3, r3, r2
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	6858      	ldr	r0, [r3, #4]
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	891a      	ldrh	r2, [r3, #8]
 800bcb0:	89bb      	ldrh	r3, [r7, #12]
 800bcb2:	1ad3      	subs	r3, r2, r3
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	f7fa f848 	bl	8005d4c <pbuf_realloc>
  useg->len -= remainder;
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	891a      	ldrh	r2, [r3, #8]
 800bcc0:	89bb      	ldrh	r3, [r7, #12]
 800bcc2:	1ad3      	subs	r3, r2, r3
 800bcc4:	b29a      	uxth	r2, r3
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	691c      	ldr	r4, [r3, #16]
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	691b      	ldr	r3, [r3, #16]
 800bcd2:	899b      	ldrh	r3, [r3, #12]
 800bcd4:	b29d      	uxth	r5, r3
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7f8 f89c 	bl	8003e18 <lwip_htons>
 800bce0:	4603      	mov	r3, r0
 800bce2:	432b      	orrs	r3, r5
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	81a3      	strh	r3, [r4, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	2200      	movs	r2, #0
 800bcec:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7fa fa24 	bl	8006140 <pbuf_clen>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd02:	4413      	add	r3, r2
 800bd04:	b29a      	uxth	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7fa fa15 	bl	8006140 <pbuf_clen>
 800bd16:	4603      	mov	r3, r0
 800bd18:	461a      	mov	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd20:	4413      	add	r3, r2
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	69fa      	ldr	r2, [r7, #28]
 800bd36:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d103      	bne.n	800bd48 <tcp_split_unsent_seg+0x26c>
    pcb->unsent_oversize = 0;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	e021      	b.n	800bd90 <tcp_split_unsent_seg+0x2b4>
    goto memerr;
 800bd4c:	bf00      	nop
 800bd4e:	e000      	b.n	800bd52 <tcp_split_unsent_seg+0x276>
    goto memerr;
 800bd50:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 800bd52:	4b17      	ldr	r3, [pc, #92]	; (800bdb0 <tcp_split_unsent_seg+0x2d4>)
 800bd54:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bd58:	3301      	adds	r3, #1
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	4b14      	ldr	r3, [pc, #80]	; (800bdb0 <tcp_split_unsent_seg+0x2d4>)
 800bd5e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00b      	beq.n	800bd80 <tcp_split_unsent_seg+0x2a4>
 800bd68:	4b0b      	ldr	r3, [pc, #44]	; (800bd98 <tcp_split_unsent_seg+0x2bc>)
 800bd6a:	f44f 7277 	mov.w	r2, #988	; 0x3dc
 800bd6e:	4911      	ldr	r1, [pc, #68]	; (800bdb4 <tcp_split_unsent_seg+0x2d8>)
 800bd70:	480b      	ldr	r0, [pc, #44]	; (800bda0 <tcp_split_unsent_seg+0x2c4>)
 800bd72:	f007 fe79 	bl	8013a68 <iprintf>
 800bd76:	2000      	movs	r0, #0
 800bd78:	f007 ff78 	bl	8013c6c <fflush>
 800bd7c:	f007 febd 	bl	8013afa <abort>
  if (p != NULL) {
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d002      	beq.n	800bd8c <tcp_split_unsent_seg+0x2b0>
    pbuf_free(p);
 800bd86:	69b8      	ldr	r0, [r7, #24]
 800bd88:	f7fa f958 	bl	800603c <pbuf_free>
  }

  return ERR_MEM;
 800bd8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3720      	adds	r7, #32
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bdb0      	pop	{r4, r5, r7, pc}
 800bd98:	08016d70 	.word	0x08016d70
 800bd9c:	08017150 	.word	0x08017150
 800bda0:	08016db4 	.word	0x08016db4
 800bda4:	08017174 	.word	0x08017174
 800bda8:	08017198 	.word	0x08017198
 800bdac:	080171a8 	.word	0x080171a8
 800bdb0:	20002218 	.word	0x20002218
 800bdb4:	080171b8 	.word	0x080171b8

0800bdb8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800bdb8:	b5b0      	push	{r4, r5, r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d10b      	bne.n	800bdde <tcp_send_fin+0x26>
 800bdc6:	4b23      	ldr	r3, [pc, #140]	; (800be54 <tcp_send_fin+0x9c>)
 800bdc8:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800bdcc:	4922      	ldr	r1, [pc, #136]	; (800be58 <tcp_send_fin+0xa0>)
 800bdce:	4823      	ldr	r0, [pc, #140]	; (800be5c <tcp_send_fin+0xa4>)
 800bdd0:	f007 fe4a 	bl	8013a68 <iprintf>
 800bdd4:	2000      	movs	r0, #0
 800bdd6:	f007 ff49 	bl	8013c6c <fflush>
 800bdda:	f007 fe8e 	bl	8013afa <abort>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d02d      	beq.n	800be42 <tcp_send_fin+0x8a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdea:	60fb      	str	r3, [r7, #12]
 800bdec:	e002      	b.n	800bdf4 <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d1f8      	bne.n	800bdee <tcp_send_fin+0x36>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	691b      	ldr	r3, [r3, #16]
 800be00:	899b      	ldrh	r3, [r3, #12]
 800be02:	b29b      	uxth	r3, r3
 800be04:	4618      	mov	r0, r3
 800be06:	f7f8 f807 	bl	8003e18 <lwip_htons>
 800be0a:	4603      	mov	r3, r0
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	f003 0307 	and.w	r3, r3, #7
 800be12:	2b00      	cmp	r3, #0
 800be14:	d115      	bne.n	800be42 <tcp_send_fin+0x8a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	691c      	ldr	r4, [r3, #16]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	691b      	ldr	r3, [r3, #16]
 800be1e:	899b      	ldrh	r3, [r3, #12]
 800be20:	b29d      	uxth	r5, r3
 800be22:	2001      	movs	r0, #1
 800be24:	f7f7 fff8 	bl	8003e18 <lwip_htons>
 800be28:	4603      	mov	r3, r0
 800be2a:	432b      	orrs	r3, r5
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	81a3      	strh	r3, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	8b5b      	ldrh	r3, [r3, #26]
 800be34:	f043 0320 	orr.w	r3, r3, #32
 800be38:	b29a      	uxth	r2, r3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800be3e:	2300      	movs	r3, #0
 800be40:	e004      	b.n	800be4c <tcp_send_fin+0x94>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800be42:	2101      	movs	r1, #1
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 f80b 	bl	800be60 <tcp_enqueue_flags>
 800be4a:	4603      	mov	r3, r0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bdb0      	pop	{r4, r5, r7, pc}
 800be54:	08016d70 	.word	0x08016d70
 800be58:	080171c4 	.word	0x080171c4
 800be5c:	08016db4 	.word	0x08016db4

0800be60 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b08a      	sub	sp, #40	; 0x28
 800be64:	af02      	add	r7, sp, #8
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	460b      	mov	r3, r1
 800be6a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800be6c:	2300      	movs	r3, #0
 800be6e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800be70:	2300      	movs	r3, #0
 800be72:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800be74:	78fb      	ldrb	r3, [r7, #3]
 800be76:	f003 0303 	and.w	r3, r3, #3
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d10b      	bne.n	800be96 <tcp_enqueue_flags+0x36>
 800be7e:	4b76      	ldr	r3, [pc, #472]	; (800c058 <tcp_enqueue_flags+0x1f8>)
 800be80:	f240 4214 	movw	r2, #1044	; 0x414
 800be84:	4975      	ldr	r1, [pc, #468]	; (800c05c <tcp_enqueue_flags+0x1fc>)
 800be86:	4876      	ldr	r0, [pc, #472]	; (800c060 <tcp_enqueue_flags+0x200>)
 800be88:	f007 fdee 	bl	8013a68 <iprintf>
 800be8c:	2000      	movs	r0, #0
 800be8e:	f007 feed 	bl	8013c6c <fflush>
 800be92:	f007 fe32 	bl	8013afa <abort>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10b      	bne.n	800beb4 <tcp_enqueue_flags+0x54>
 800be9c:	4b6e      	ldr	r3, [pc, #440]	; (800c058 <tcp_enqueue_flags+0x1f8>)
 800be9e:	f240 4215 	movw	r2, #1045	; 0x415
 800bea2:	4970      	ldr	r1, [pc, #448]	; (800c064 <tcp_enqueue_flags+0x204>)
 800bea4:	486e      	ldr	r0, [pc, #440]	; (800c060 <tcp_enqueue_flags+0x200>)
 800bea6:	f007 fddf 	bl	8013a68 <iprintf>
 800beaa:	2000      	movs	r0, #0
 800beac:	f007 fede 	bl	8013c6c <fflush>
 800beb0:	f007 fe23 	bl	8013afa <abort>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800beb4:	78fb      	ldrb	r3, [r7, #3]
 800beb6:	f003 0302 	and.w	r3, r3, #2
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d001      	beq.n	800bec2 <tcp_enqueue_flags+0x62>
    optflags = TF_SEG_OPTS_MSS;
 800bebe:	2301      	movs	r3, #1
 800bec0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bec2:	7ffb      	ldrb	r3, [r7, #31]
 800bec4:	f003 0301 	and.w	r3, r3, #1
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d001      	beq.n	800bed0 <tcp_enqueue_flags+0x70>
 800becc:	2304      	movs	r3, #4
 800bece:	e000      	b.n	800bed2 <tcp_enqueue_flags+0x72>
 800bed0:	2300      	movs	r3, #0
 800bed2:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bed4:	7dfb      	ldrb	r3, [r7, #23]
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bedc:	4619      	mov	r1, r3
 800bede:	2036      	movs	r0, #54	; 0x36
 800bee0:	f7f9 fe42 	bl	8005b68 <pbuf_alloc>
 800bee4:	6138      	str	r0, [r7, #16]
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d111      	bne.n	800bf10 <tcp_enqueue_flags+0xb0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	8b5b      	ldrh	r3, [r3, #26]
 800bef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800befa:	4b5b      	ldr	r3, [pc, #364]	; (800c068 <tcp_enqueue_flags+0x208>)
 800befc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bf00:	3301      	adds	r3, #1
 800bf02:	b29a      	uxth	r2, r3
 800bf04:	4b58      	ldr	r3, [pc, #352]	; (800c068 <tcp_enqueue_flags+0x208>)
 800bf06:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    return ERR_MEM;
 800bf0a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf0e:	e09f      	b.n	800c050 <tcp_enqueue_flags+0x1f0>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	895a      	ldrh	r2, [r3, #10]
 800bf14:	7dfb      	ldrb	r3, [r7, #23]
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d20b      	bcs.n	800bf34 <tcp_enqueue_flags+0xd4>
 800bf1c:	4b4e      	ldr	r3, [pc, #312]	; (800c058 <tcp_enqueue_flags+0x1f8>)
 800bf1e:	f240 423e 	movw	r2, #1086	; 0x43e
 800bf22:	4952      	ldr	r1, [pc, #328]	; (800c06c <tcp_enqueue_flags+0x20c>)
 800bf24:	484e      	ldr	r0, [pc, #312]	; (800c060 <tcp_enqueue_flags+0x200>)
 800bf26:	f007 fd9f 	bl	8013a68 <iprintf>
 800bf2a:	2000      	movs	r0, #0
 800bf2c:	f007 fe9e 	bl	8013c6c <fflush>
 800bf30:	f007 fde3 	bl	8013afa <abort>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800bf38:	78fa      	ldrb	r2, [r7, #3]
 800bf3a:	7ffb      	ldrb	r3, [r7, #31]
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	460b      	mov	r3, r1
 800bf40:	6939      	ldr	r1, [r7, #16]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f7ff f806 	bl	800af54 <tcp_create_segment>
 800bf48:	60f8      	str	r0, [r7, #12]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d111      	bne.n	800bf74 <tcp_enqueue_flags+0x114>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	8b5b      	ldrh	r3, [r3, #26]
 800bf54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf58:	b29a      	uxth	r2, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800bf5e:	4b42      	ldr	r3, [pc, #264]	; (800c068 <tcp_enqueue_flags+0x208>)
 800bf60:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bf64:	3301      	adds	r3, #1
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	4b3f      	ldr	r3, [pc, #252]	; (800c068 <tcp_enqueue_flags+0x208>)
 800bf6a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    return ERR_MEM;
 800bf6e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf72:	e06d      	b.n	800c050 <tcp_enqueue_flags+0x1f0>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	891b      	ldrh	r3, [r3, #8]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00b      	beq.n	800bf94 <tcp_enqueue_flags+0x134>
 800bf7c:	4b36      	ldr	r3, [pc, #216]	; (800c058 <tcp_enqueue_flags+0x1f8>)
 800bf7e:	f240 4247 	movw	r2, #1095	; 0x447
 800bf82:	493b      	ldr	r1, [pc, #236]	; (800c070 <tcp_enqueue_flags+0x210>)
 800bf84:	4836      	ldr	r0, [pc, #216]	; (800c060 <tcp_enqueue_flags+0x200>)
 800bf86:	f007 fd6f 	bl	8013a68 <iprintf>
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	f007 fe6e 	bl	8013c6c <fflush>
 800bf90:	f007 fdb3 	bl	8013afa <abort>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d103      	bne.n	800bfa4 <tcp_enqueue_flags+0x144>
    pcb->unsent = seg;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	68fa      	ldr	r2, [r7, #12]
 800bfa0:	66da      	str	r2, [r3, #108]	; 0x6c
 800bfa2:	e00d      	b.n	800bfc0 <tcp_enqueue_flags+0x160>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfa8:	61bb      	str	r3, [r7, #24]
 800bfaa:	e002      	b.n	800bfb2 <tcp_enqueue_flags+0x152>
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	61bb      	str	r3, [r7, #24]
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1f8      	bne.n	800bfac <tcp_enqueue_flags+0x14c>
    useg->next = seg;
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	68fa      	ldr	r2, [r7, #12]
 800bfbe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800bfc8:	78fb      	ldrb	r3, [r7, #3]
 800bfca:	f003 0302 	and.w	r3, r3, #2
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d104      	bne.n	800bfdc <tcp_enqueue_flags+0x17c>
 800bfd2:	78fb      	ldrb	r3, [r7, #3]
 800bfd4:	f003 0301 	and.w	r3, r3, #1
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d004      	beq.n	800bfe6 <tcp_enqueue_flags+0x186>
    pcb->snd_lbb++;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfe0:	1c5a      	adds	r2, r3, #1
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800bfe6:	78fb      	ldrb	r3, [r7, #3]
 800bfe8:	f003 0301 	and.w	r3, r3, #1
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d006      	beq.n	800bffe <tcp_enqueue_flags+0x19e>
    tcp_set_flags(pcb, TF_FIN);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	8b5b      	ldrh	r3, [r3, #26]
 800bff4:	f043 0320 	orr.w	r3, r3, #32
 800bff8:	b29a      	uxth	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	4618      	mov	r0, r3
 800c004:	f7fa f89c 	bl	8006140 <pbuf_clen>
 800c008:	4603      	mov	r3, r0
 800c00a:	461a      	mov	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c012:	4413      	add	r3, r2
 800c014:	b29a      	uxth	r2, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c022:	2b00      	cmp	r3, #0
 800c024:	d013      	beq.n	800c04e <tcp_enqueue_flags+0x1ee>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d10f      	bne.n	800c04e <tcp_enqueue_flags+0x1ee>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10b      	bne.n	800c04e <tcp_enqueue_flags+0x1ee>
 800c036:	4b08      	ldr	r3, [pc, #32]	; (800c058 <tcp_enqueue_flags+0x1f8>)
 800c038:	f240 426a 	movw	r2, #1130	; 0x46a
 800c03c:	490d      	ldr	r1, [pc, #52]	; (800c074 <tcp_enqueue_flags+0x214>)
 800c03e:	4808      	ldr	r0, [pc, #32]	; (800c060 <tcp_enqueue_flags+0x200>)
 800c040:	f007 fd12 	bl	8013a68 <iprintf>
 800c044:	2000      	movs	r0, #0
 800c046:	f007 fe11 	bl	8013c6c <fflush>
 800c04a:	f007 fd56 	bl	8013afa <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3720      	adds	r7, #32
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	08016d70 	.word	0x08016d70
 800c05c:	080171e0 	.word	0x080171e0
 800c060:	08016db4 	.word	0x08016db4
 800c064:	08017238 	.word	0x08017238
 800c068:	20002218 	.word	0x20002218
 800c06c:	08017258 	.word	0x08017258
 800c070:	08017294 	.word	0x08017294
 800c074:	080172c0 	.word	0x080172c0

0800c078 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c078:	b5b0      	push	{r4, r5, r7, lr}
 800c07a:	b08a      	sub	sp, #40	; 0x28
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d10b      	bne.n	800c09e <tcp_output+0x26>
 800c086:	4ba9      	ldr	r3, [pc, #676]	; (800c32c <tcp_output+0x2b4>)
 800c088:	f240 42e5 	movw	r2, #1253	; 0x4e5
 800c08c:	49a8      	ldr	r1, [pc, #672]	; (800c330 <tcp_output+0x2b8>)
 800c08e:	48a9      	ldr	r0, [pc, #676]	; (800c334 <tcp_output+0x2bc>)
 800c090:	f007 fcea 	bl	8013a68 <iprintf>
 800c094:	2000      	movs	r0, #0
 800c096:	f007 fde9 	bl	8013c6c <fflush>
 800c09a:	f007 fd2e 	bl	8013afa <abort>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	7d1b      	ldrb	r3, [r3, #20]
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d10b      	bne.n	800c0be <tcp_output+0x46>
 800c0a6:	4ba1      	ldr	r3, [pc, #644]	; (800c32c <tcp_output+0x2b4>)
 800c0a8:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
 800c0ac:	49a2      	ldr	r1, [pc, #648]	; (800c338 <tcp_output+0x2c0>)
 800c0ae:	48a1      	ldr	r0, [pc, #644]	; (800c334 <tcp_output+0x2bc>)
 800c0b0:	f007 fcda 	bl	8013a68 <iprintf>
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	f007 fdd9 	bl	8013c6c <fflush>
 800c0ba:	f007 fd1e 	bl	8013afa <abort>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c0be:	4b9f      	ldr	r3, [pc, #636]	; (800c33c <tcp_output+0x2c4>)
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d101      	bne.n	800c0cc <tcp_output+0x54>
    return ERR_OK;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	e1d8      	b.n	800c47e <tcp_output+0x406>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d203      	bcs.n	800c0e4 <tcp_output+0x6c>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c0e2:	e002      	b.n	800c0ea <tcp_output+0x72>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c0ea:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0f0:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d10b      	bne.n	800c110 <tcp_output+0x98>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	8b5b      	ldrh	r3, [r3, #26]
 800c0fc:	f003 0302 	and.w	r3, r3, #2
 800c100:	2b00      	cmp	r3, #0
 800c102:	f000 81b1 	beq.w	800c468 <tcp_output+0x3f0>
      return tcp_send_empty_ack(pcb);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fee6 	bl	800ced8 <tcp_send_empty_ack>
 800c10c:	4603      	mov	r3, r0
 800c10e:	e1b6      	b.n	800c47e <tcp_output+0x406>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c110:	6879      	ldr	r1, [r7, #4]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	3304      	adds	r3, #4
 800c116:	461a      	mov	r2, r3
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f7fe feff 	bl	800af1c <tcp_route>
 800c11e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d102      	bne.n	800c12c <tcp_output+0xb4>
    return ERR_RTE;
 800c126:	f06f 0303 	mvn.w	r3, #3
 800c12a:	e1a8      	b.n	800c47e <tcp_output+0x406>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d003      	beq.n	800c13a <tcp_output+0xc2>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d111      	bne.n	800c15e <tcp_output+0xe6>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d002      	beq.n	800c146 <tcp_output+0xce>
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	3304      	adds	r3, #4
 800c144:	e000      	b.n	800c148 <tcp_output+0xd0>
 800c146:	2300      	movs	r3, #0
 800c148:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d102      	bne.n	800c156 <tcp_output+0xde>
      return ERR_RTE;
 800c150:	f06f 0303 	mvn.w	r3, #3
 800c154:	e193      	b.n	800c47e <tcp_output+0x406>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	681a      	ldr	r2, [r3, #0]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c160:	691b      	ldr	r3, [r3, #16]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	4618      	mov	r0, r3
 800c166:	f7f7 fe6c 	bl	8003e42 <lwip_htonl>
 800c16a:	4602      	mov	r2, r0
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c170:	1ad3      	subs	r3, r2, r3
 800c172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c174:	8912      	ldrh	r2, [r2, #8]
 800c176:	441a      	add	r2, r3
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d927      	bls.n	800c1ce <tcp_output+0x156>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c184:	461a      	mov	r2, r3
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d114      	bne.n	800c1b6 <tcp_output+0x13e>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c190:	2b00      	cmp	r3, #0
 800c192:	d110      	bne.n	800c1b6 <tcp_output+0x13e>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10b      	bne.n	800c1b6 <tcp_output+0x13e>
      pcb->persist_cnt = 0;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	8b5b      	ldrh	r3, [r3, #26]
 800c1ba:	f003 0302 	and.w	r3, r3, #2
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	f000 8154 	beq.w	800c46c <tcp_output+0x3f4>
      return tcp_send_empty_ack(pcb);
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 fe87 	bl	800ced8 <tcp_send_empty_ack>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	e157      	b.n	800c47e <tcp_output+0x406>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1da:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c1dc:	6a3b      	ldr	r3, [r7, #32]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f000 8123 	beq.w	800c42a <tcp_output+0x3b2>
    for (; useg->next != NULL; useg = useg->next);
 800c1e4:	e002      	b.n	800c1ec <tcp_output+0x174>
 800c1e6:	6a3b      	ldr	r3, [r7, #32]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	623b      	str	r3, [r7, #32]
 800c1ec:	6a3b      	ldr	r3, [r7, #32]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d1f8      	bne.n	800c1e6 <tcp_output+0x16e>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c1f4:	e119      	b.n	800c42a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	899b      	ldrh	r3, [r3, #12]
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7f7 fe0a 	bl	8003e18 <lwip_htons>
 800c204:	4603      	mov	r3, r0
 800c206:	b2db      	uxtb	r3, r3
 800c208:	f003 0304 	and.w	r3, r3, #4
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00b      	beq.n	800c228 <tcp_output+0x1b0>
 800c210:	4b46      	ldr	r3, [pc, #280]	; (800c32c <tcp_output+0x2b4>)
 800c212:	f240 523b 	movw	r2, #1339	; 0x53b
 800c216:	494a      	ldr	r1, [pc, #296]	; (800c340 <tcp_output+0x2c8>)
 800c218:	4846      	ldr	r0, [pc, #280]	; (800c334 <tcp_output+0x2bc>)
 800c21a:	f007 fc25 	bl	8013a68 <iprintf>
 800c21e:	2000      	movs	r0, #0
 800c220:	f007 fd24 	bl	8013c6c <fflush>
 800c224:	f007 fc69 	bl	8013afa <abort>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d01f      	beq.n	800c270 <tcp_output+0x1f8>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	8b5b      	ldrh	r3, [r3, #26]
 800c234:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d119      	bne.n	800c270 <tcp_output+0x1f8>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c240:	2b00      	cmp	r3, #0
 800c242:	d00b      	beq.n	800c25c <tcp_output+0x1e4>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d110      	bne.n	800c270 <tcp_output+0x1f8>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c252:	891a      	ldrh	r2, [r3, #8]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c258:	429a      	cmp	r2, r3
 800c25a:	d209      	bcs.n	800c270 <tcp_output+0x1f8>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c262:	2b00      	cmp	r3, #0
 800c264:	d004      	beq.n	800c270 <tcp_output+0x1f8>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c26c:	2b07      	cmp	r3, #7
 800c26e:	d901      	bls.n	800c274 <tcp_output+0x1fc>
 800c270:	2301      	movs	r3, #1
 800c272:	e000      	b.n	800c276 <tcp_output+0x1fe>
 800c274:	2300      	movs	r3, #0
 800c276:	2b00      	cmp	r3, #0
 800c278:	d106      	bne.n	800c288 <tcp_output+0x210>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	8b5b      	ldrh	r3, [r3, #26]
 800c27e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c282:	2b00      	cmp	r3, #0
 800c284:	f000 80e6 	beq.w	800c454 <tcp_output+0x3dc>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	7d1b      	ldrb	r3, [r3, #20]
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d00c      	beq.n	800c2aa <tcp_output+0x232>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c292:	691c      	ldr	r4, [r3, #16]
 800c294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c296:	691b      	ldr	r3, [r3, #16]
 800c298:	899b      	ldrh	r3, [r3, #12]
 800c29a:	b29d      	uxth	r5, r3
 800c29c:	2010      	movs	r0, #16
 800c29e:	f7f7 fdbb 	bl	8003e18 <lwip_htons>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	432b      	orrs	r3, r5
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	81a3      	strh	r3, [r4, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c2aa:	697a      	ldr	r2, [r7, #20]
 800c2ac:	6879      	ldr	r1, [r7, #4]
 800c2ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2b0:	f000 f910 	bl	800c4d4 <tcp_output_segment>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c2b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d009      	beq.n	800c2d4 <tcp_output+0x25c>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	8b5b      	ldrh	r3, [r3, #26]
 800c2c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2c8:	b29a      	uxth	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	835a      	strh	r2, [r3, #26]
      return err;
 800c2ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2d2:	e0d4      	b.n	800c47e <tcp_output+0x406>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	7d1b      	ldrb	r3, [r3, #20]
 800c2e6:	2b02      	cmp	r3, #2
 800c2e8:	d006      	beq.n	800c2f8 <tcp_output+0x280>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	8b5b      	ldrh	r3, [r3, #26]
 800c2ee:	f023 0303 	bic.w	r3, r3, #3
 800c2f2:	b29a      	uxth	r2, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fa:	691b      	ldr	r3, [r3, #16]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7f7 fd9f 	bl	8003e42 <lwip_htonl>
 800c304:	4604      	mov	r4, r0
 800c306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c308:	891b      	ldrh	r3, [r3, #8]
 800c30a:	461d      	mov	r5, r3
 800c30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	899b      	ldrh	r3, [r3, #12]
 800c312:	b29b      	uxth	r3, r3
 800c314:	4618      	mov	r0, r3
 800c316:	f7f7 fd7f 	bl	8003e18 <lwip_htons>
 800c31a:	4603      	mov	r3, r0
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	f003 0303 	and.w	r3, r3, #3
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00e      	beq.n	800c344 <tcp_output+0x2cc>
 800c326:	2301      	movs	r3, #1
 800c328:	e00d      	b.n	800c346 <tcp_output+0x2ce>
 800c32a:	bf00      	nop
 800c32c:	08016d70 	.word	0x08016d70
 800c330:	080172e8 	.word	0x080172e8
 800c334:	08016db4 	.word	0x08016db4
 800c338:	08017300 	.word	0x08017300
 800c33c:	200022d4 	.word	0x200022d4
 800c340:	08017328 	.word	0x08017328
 800c344:	2300      	movs	r3, #0
 800c346:	442b      	add	r3, r5
 800c348:	4423      	add	r3, r4
 800c34a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	1ad3      	subs	r3, r2, r3
 800c354:	2b00      	cmp	r3, #0
 800c356:	da02      	bge.n	800c35e <tcp_output+0x2e6>
      pcb->snd_nxt = snd_nxt;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	68ba      	ldr	r2, [r7, #8]
 800c35c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c360:	891b      	ldrh	r3, [r3, #8]
 800c362:	461c      	mov	r4, r3
 800c364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	899b      	ldrh	r3, [r3, #12]
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7f7 fd53 	bl	8003e18 <lwip_htons>
 800c372:	4603      	mov	r3, r0
 800c374:	b2db      	uxtb	r3, r3
 800c376:	f003 0303 	and.w	r3, r3, #3
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d001      	beq.n	800c382 <tcp_output+0x30a>
 800c37e:	2301      	movs	r3, #1
 800c380:	e000      	b.n	800c384 <tcp_output+0x30c>
 800c382:	2300      	movs	r3, #0
 800c384:	4423      	add	r3, r4
 800c386:	2b00      	cmp	r3, #0
 800c388:	d049      	beq.n	800c41e <tcp_output+0x3a6>
      seg->next = NULL;
 800c38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38c:	2200      	movs	r2, #0
 800c38e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c394:	2b00      	cmp	r3, #0
 800c396:	d105      	bne.n	800c3a4 <tcp_output+0x32c>
        pcb->unacked = seg;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c39c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a0:	623b      	str	r3, [r7, #32]
 800c3a2:	e03f      	b.n	800c424 <tcp_output+0x3ac>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7f7 fd49 	bl	8003e42 <lwip_htonl>
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	6a3b      	ldr	r3, [r7, #32]
 800c3b4:	691b      	ldr	r3, [r3, #16]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7f7 fd42 	bl	8003e42 <lwip_htonl>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	1ae3      	subs	r3, r4, r3
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	da24      	bge.n	800c410 <tcp_output+0x398>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	3370      	adds	r3, #112	; 0x70
 800c3ca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c3cc:	e002      	b.n	800c3d4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d011      	beq.n	800c400 <tcp_output+0x388>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	691b      	ldr	r3, [r3, #16]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7f7 fd2c 	bl	8003e42 <lwip_htonl>
 800c3ea:	4604      	mov	r4, r0
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ee:	691b      	ldr	r3, [r3, #16]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7f7 fd25 	bl	8003e42 <lwip_htonl>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	dbe6      	blt.n	800c3ce <tcp_output+0x356>
          }
          seg->next = (*cur_seg);
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c406:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c40c:	601a      	str	r2, [r3, #0]
 800c40e:	e009      	b.n	800c424 <tcp_output+0x3ac>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c410:	6a3b      	ldr	r3, [r7, #32]
 800c412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c414:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c416:	6a3b      	ldr	r3, [r7, #32]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	623b      	str	r3, [r7, #32]
 800c41c:	e002      	b.n	800c424 <tcp_output+0x3ac>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c41e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c420:	f7fb fc5c 	bl	8007cdc <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c428:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d012      	beq.n	800c456 <tcp_output+0x3de>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c432:	691b      	ldr	r3, [r3, #16]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	4618      	mov	r0, r3
 800c438:	f7f7 fd03 	bl	8003e42 <lwip_htonl>
 800c43c:	4602      	mov	r2, r0
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c442:	1ad3      	subs	r3, r2, r3
 800c444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c446:	8912      	ldrh	r2, [r2, #8]
 800c448:	441a      	add	r2, r3
  while (seg != NULL &&
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	f67f aed2 	bls.w	800c1f6 <tcp_output+0x17e>
 800c452:	e000      	b.n	800c456 <tcp_output+0x3de>
      break;
 800c454:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d107      	bne.n	800c46e <tcp_output+0x3f6>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c466:	e002      	b.n	800c46e <tcp_output+0x3f6>
    goto output_done;
 800c468:	bf00      	nop
 800c46a:	e000      	b.n	800c46e <tcp_output+0x3f6>
    goto output_done;
 800c46c:	bf00      	nop
  }
#endif /* TCP_OVERSIZE */

output_done:
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	8b5b      	ldrh	r3, [r3, #26]
 800c472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c476:	b29a      	uxth	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c47c:	2300      	movs	r3, #0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3728      	adds	r7, #40	; 0x28
 800c482:	46bd      	mov	sp, r7
 800c484:	bdb0      	pop	{r4, r5, r7, pc}
 800c486:	bf00      	nop

0800c488 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d10b      	bne.n	800c4ae <tcp_output_segment_busy+0x26>
 800c496:	4b0c      	ldr	r3, [pc, #48]	; (800c4c8 <tcp_output_segment_busy+0x40>)
 800c498:	f240 529e 	movw	r2, #1438	; 0x59e
 800c49c:	490b      	ldr	r1, [pc, #44]	; (800c4cc <tcp_output_segment_busy+0x44>)
 800c49e:	480c      	ldr	r0, [pc, #48]	; (800c4d0 <tcp_output_segment_busy+0x48>)
 800c4a0:	f007 fae2 	bl	8013a68 <iprintf>
 800c4a4:	2000      	movs	r0, #0
 800c4a6:	f007 fbe1 	bl	8013c6c <fflush>
 800c4aa:	f007 fb26 	bl	8013afa <abort>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	7b9b      	ldrb	r3, [r3, #14]
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d001      	beq.n	800c4bc <tcp_output_segment_busy+0x34>
    /* other reference found */
    return 1;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	e000      	b.n	800c4be <tcp_output_segment_busy+0x36>
  }
  /* no other references found */
  return 0;
 800c4bc:	2300      	movs	r3, #0
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3708      	adds	r7, #8
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	08016d70 	.word	0x08016d70
 800c4cc:	08017340 	.word	0x08017340
 800c4d0:	08016db4 	.word	0x08016db4

0800c4d4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c4d4:	b5b0      	push	{r4, r5, r7, lr}
 800c4d6:	b08c      	sub	sp, #48	; 0x30
 800c4d8:	af04      	add	r7, sp, #16
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d10b      	bne.n	800c4fe <tcp_output_segment+0x2a>
 800c4e6:	4b7c      	ldr	r3, [pc, #496]	; (800c6d8 <tcp_output_segment+0x204>)
 800c4e8:	f240 52bc 	movw	r2, #1468	; 0x5bc
 800c4ec:	497b      	ldr	r1, [pc, #492]	; (800c6dc <tcp_output_segment+0x208>)
 800c4ee:	487c      	ldr	r0, [pc, #496]	; (800c6e0 <tcp_output_segment+0x20c>)
 800c4f0:	f007 faba 	bl	8013a68 <iprintf>
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	f007 fbb9 	bl	8013c6c <fflush>
 800c4fa:	f007 fafe 	bl	8013afa <abort>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d10b      	bne.n	800c51c <tcp_output_segment+0x48>
 800c504:	4b74      	ldr	r3, [pc, #464]	; (800c6d8 <tcp_output_segment+0x204>)
 800c506:	f240 52bd 	movw	r2, #1469	; 0x5bd
 800c50a:	4976      	ldr	r1, [pc, #472]	; (800c6e4 <tcp_output_segment+0x210>)
 800c50c:	4874      	ldr	r0, [pc, #464]	; (800c6e0 <tcp_output_segment+0x20c>)
 800c50e:	f007 faab 	bl	8013a68 <iprintf>
 800c512:	2000      	movs	r0, #0
 800c514:	f007 fbaa 	bl	8013c6c <fflush>
 800c518:	f007 faef 	bl	8013afa <abort>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10b      	bne.n	800c53a <tcp_output_segment+0x66>
 800c522:	4b6d      	ldr	r3, [pc, #436]	; (800c6d8 <tcp_output_segment+0x204>)
 800c524:	f240 52be 	movw	r2, #1470	; 0x5be
 800c528:	496f      	ldr	r1, [pc, #444]	; (800c6e8 <tcp_output_segment+0x214>)
 800c52a:	486d      	ldr	r0, [pc, #436]	; (800c6e0 <tcp_output_segment+0x20c>)
 800c52c:	f007 fa9c 	bl	8013a68 <iprintf>
 800c530:	2000      	movs	r0, #0
 800c532:	f007 fb9b 	bl	8013c6c <fflush>
 800c536:	f007 fae0 	bl	8013afa <abort>

  if (tcp_output_segment_busy(seg)) {
 800c53a:	68f8      	ldr	r0, [r7, #12]
 800c53c:	f7ff ffa4 	bl	800c488 <tcp_output_segment_busy>
 800c540:	4603      	mov	r3, r0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d001      	beq.n	800c54a <tcp_output_segment+0x76>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c546:	2300      	movs	r3, #0
 800c548:	e0c2      	b.n	800c6d0 <tcp_output_segment+0x1fc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	691c      	ldr	r4, [r3, #16]
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c552:	4618      	mov	r0, r3
 800c554:	f7f7 fc75 	bl	8003e42 <lwip_htonl>
 800c558:	4603      	mov	r3, r0
 800c55a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	691c      	ldr	r4, [r3, #16]
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c564:	4618      	mov	r0, r3
 800c566:	f7f7 fc57 	bl	8003e18 <lwip_htons>
 800c56a:	4603      	mov	r3, r0
 800c56c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c572:	68ba      	ldr	r2, [r7, #8]
 800c574:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c576:	441a      	add	r2, r3
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	691b      	ldr	r3, [r3, #16]
 800c580:	3314      	adds	r3, #20
 800c582:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	7b1b      	ldrb	r3, [r3, #12]
 800c588:	f003 0301 	and.w	r3, r3, #1
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d015      	beq.n	800c5bc <tcp_output_segment+0xe8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	3304      	adds	r3, #4
 800c594:	461a      	mov	r2, r3
 800c596:	6879      	ldr	r1, [r7, #4]
 800c598:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800c59c:	f7fb ffa8 	bl	80084f0 <tcp_eff_send_mss_netif>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c5a4:	8b7b      	ldrh	r3, [r7, #26]
 800c5a6:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7f7 fc49 	bl	8003e42 <lwip_htonl>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	3304      	adds	r3, #4
 800c5ba:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	da02      	bge.n	800c5cc <tcp_output_segment+0xf8>
    pcb->rtime = 0;
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10c      	bne.n	800c5ee <tcp_output_segment+0x11a>
    pcb->rttest = tcp_ticks;
 800c5d4:	4b45      	ldr	r3, [pc, #276]	; (800c6ec <tcp_output_segment+0x218>)
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	691b      	ldr	r3, [r3, #16]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7f7 fc2d 	bl	8003e42 <lwip_htonl>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	68fa      	ldr	r2, [r7, #12]
 800c604:	6852      	ldr	r2, [r2, #4]
 800c606:	8951      	ldrh	r1, [r2, #10]
 800c608:	8b3a      	ldrh	r2, [r7, #24]
 800c60a:	1a8a      	subs	r2, r1, r2
 800c60c:	b292      	uxth	r2, r2
 800c60e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	6852      	ldr	r2, [r2, #4]
 800c618:	8911      	ldrh	r1, [r2, #8]
 800c61a:	8b3a      	ldrh	r2, [r7, #24]
 800c61c:	1a8a      	subs	r2, r1, r2
 800c61e:	b292      	uxth	r2, r2
 800c620:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	6912      	ldr	r2, [r2, #16]
 800c62a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	691b      	ldr	r3, [r3, #16]
 800c630:	2200      	movs	r2, #0
 800c632:	741a      	strb	r2, [r3, #16]
 800c634:	2200      	movs	r2, #0
 800c636:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	691b      	ldr	r3, [r3, #16]
 800c63c:	f103 0214 	add.w	r2, r3, #20
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	7b1b      	ldrb	r3, [r3, #12]
 800c644:	f003 0301 	and.w	r3, r3, #1
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d001      	beq.n	800c650 <tcp_output_segment+0x17c>
 800c64c:	2304      	movs	r3, #4
 800c64e:	e000      	b.n	800c652 <tcp_output_segment+0x17e>
 800c650:	2300      	movs	r3, #0
 800c652:	441a      	add	r2, r3
 800c654:	69fb      	ldr	r3, [r7, #28]
 800c656:	429a      	cmp	r2, r3
 800c658:	d00b      	beq.n	800c672 <tcp_output_segment+0x19e>
 800c65a:	4b1f      	ldr	r3, [pc, #124]	; (800c6d8 <tcp_output_segment+0x204>)
 800c65c:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 800c660:	4923      	ldr	r1, [pc, #140]	; (800c6f0 <tcp_output_segment+0x21c>)
 800c662:	481f      	ldr	r0, [pc, #124]	; (800c6e0 <tcp_output_segment+0x20c>)
 800c664:	f007 fa00 	bl	8013a68 <iprintf>
 800c668:	2000      	movs	r0, #0
 800c66a:	f007 faff 	bl	8013c6c <fflush>
 800c66e:	f007 fa44 	bl	8013afa <abort>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	691c      	ldr	r4, [r3, #16]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800c67e:	891a      	ldrh	r2, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800c680:	68b9      	ldr	r1, [r7, #8]
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800c686:	9300      	str	r3, [sp, #0]
 800c688:	460b      	mov	r3, r1
 800c68a:	2106      	movs	r1, #6
 800c68c:	f7f7 fcf6 	bl	800407c <ip_chksum_pseudo>
 800c690:	4603      	mov	r3, r0
 800c692:	8223      	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 800c694:	4b17      	ldr	r3, [pc, #92]	; (800c6f4 <tcp_output_segment+0x220>)
 800c696:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c69a:	3301      	adds	r3, #1
 800c69c:	b29a      	uxth	r2, r3
 800c69e:	4b15      	ldr	r3, [pc, #84]	; (800c6f4 <tcp_output_segment+0x220>)
 800c6a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	6858      	ldr	r0, [r3, #4]
 800c6a8:	68b9      	ldr	r1, [r7, #8]
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	1d1c      	adds	r4, r3, #4
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	7add      	ldrb	r5, [r3, #11]
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	7a9b      	ldrb	r3, [r3, #10]
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	9202      	str	r2, [sp, #8]
 800c6ba:	2206      	movs	r2, #6
 800c6bc:	9201      	str	r2, [sp, #4]
 800c6be:	9300      	str	r3, [sp, #0]
 800c6c0:	462b      	mov	r3, r5
 800c6c2:	4622      	mov	r2, r4
 800c6c4:	f7f7 ff0e 	bl	80044e4 <ip4_output_if>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c6cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3720      	adds	r7, #32
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bdb0      	pop	{r4, r5, r7, pc}
 800c6d8:	08016d70 	.word	0x08016d70
 800c6dc:	08017368 	.word	0x08017368
 800c6e0:	08016db4 	.word	0x08016db4
 800c6e4:	08017388 	.word	0x08017388
 800c6e8:	080173a8 	.word	0x080173a8
 800c6ec:	200022c4 	.word	0x200022c4
 800c6f0:	080173cc 	.word	0x080173cc
 800c6f4:	20002218 	.word	0x20002218

0800c6f8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c6f8:	b5b0      	push	{r4, r5, r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10b      	bne.n	800c71e <tcp_rexmit_rto_prepare+0x26>
 800c706:	4b38      	ldr	r3, [pc, #224]	; (800c7e8 <tcp_rexmit_rto_prepare+0xf0>)
 800c708:	f240 6267 	movw	r2, #1639	; 0x667
 800c70c:	4937      	ldr	r1, [pc, #220]	; (800c7ec <tcp_rexmit_rto_prepare+0xf4>)
 800c70e:	4838      	ldr	r0, [pc, #224]	; (800c7f0 <tcp_rexmit_rto_prepare+0xf8>)
 800c710:	f007 f9aa 	bl	8013a68 <iprintf>
 800c714:	2000      	movs	r0, #0
 800c716:	f007 faa9 	bl	8013c6c <fflush>
 800c71a:	f007 f9ee 	bl	8013afa <abort>

  if (pcb->unacked == NULL) {
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c722:	2b00      	cmp	r3, #0
 800c724:	d102      	bne.n	800c72c <tcp_rexmit_rto_prepare+0x34>
    return ERR_VAL;
 800c726:	f06f 0305 	mvn.w	r3, #5
 800c72a:	e059      	b.n	800c7e0 <tcp_rexmit_rto_prepare+0xe8>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c730:	60fb      	str	r3, [r7, #12]
 800c732:	e00b      	b.n	800c74c <tcp_rexmit_rto_prepare+0x54>
    if (tcp_output_segment_busy(seg)) {
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	f7ff fea7 	bl	800c488 <tcp_output_segment_busy>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <tcp_rexmit_rto_prepare+0x4e>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c740:	f06f 0305 	mvn.w	r3, #5
 800c744:	e04c      	b.n	800c7e0 <tcp_rexmit_rto_prepare+0xe8>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	60fb      	str	r3, [r7, #12]
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d1ef      	bne.n	800c734 <tcp_rexmit_rto_prepare+0x3c>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c754:	68f8      	ldr	r0, [r7, #12]
 800c756:	f7ff fe97 	bl	800c488 <tcp_output_segment_busy>
 800c75a:	4603      	mov	r3, r0
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <tcp_rexmit_rto_prepare+0x6e>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c760:	f06f 0305 	mvn.w	r3, #5
 800c764:	e03c      	b.n	800c7e0 <tcp_rexmit_rto_prepare+0xe8>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c772:	2b00      	cmp	r3, #0
 800c774:	d104      	bne.n	800c780 <tcp_rexmit_rto_prepare+0x88>
    pcb->unsent_oversize = seg->oversize_left;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	895a      	ldrh	r2, [r3, #10]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	8b5b      	ldrh	r3, [r3, #26]
 800c792:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c796:	b29a      	uxth	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	691b      	ldr	r3, [r3, #16]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7f7 fb4d 	bl	8003e42 <lwip_htonl>
 800c7a8:	4604      	mov	r4, r0
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	891b      	ldrh	r3, [r3, #8]
 800c7ae:	461d      	mov	r5, r3
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	691b      	ldr	r3, [r3, #16]
 800c7b4:	899b      	ldrh	r3, [r3, #12]
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7f7 fb2d 	bl	8003e18 <lwip_htons>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	f003 0303 	and.w	r3, r3, #3
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d001      	beq.n	800c7ce <tcp_rexmit_rto_prepare+0xd6>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e000      	b.n	800c7d0 <tcp_rexmit_rto_prepare+0xd8>
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	442b      	add	r3, r5
 800c7d2:	18e2      	adds	r2, r4, r3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3710      	adds	r7, #16
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bdb0      	pop	{r4, r5, r7, pc}
 800c7e8:	08016d70 	.word	0x08016d70
 800c7ec:	080173e0 	.word	0x080173e0
 800c7f0:	08016db4 	.word	0x08016db4

0800c7f4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10b      	bne.n	800c81a <tcp_rexmit_rto_commit+0x26>
 800c802:	4b10      	ldr	r3, [pc, #64]	; (800c844 <tcp_rexmit_rto_commit+0x50>)
 800c804:	f240 629c 	movw	r2, #1692	; 0x69c
 800c808:	490f      	ldr	r1, [pc, #60]	; (800c848 <tcp_rexmit_rto_commit+0x54>)
 800c80a:	4810      	ldr	r0, [pc, #64]	; (800c84c <tcp_rexmit_rto_commit+0x58>)
 800c80c:	f007 f92c 	bl	8013a68 <iprintf>
 800c810:	2000      	movs	r0, #0
 800c812:	f007 fa2b 	bl	8013c6c <fflush>
 800c816:	f007 f970 	bl	8013afa <abort>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c820:	2bff      	cmp	r3, #255	; 0xff
 800c822:	d007      	beq.n	800c834 <tcp_rexmit_rto_commit+0x40>
    ++pcb->nrtx;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c82a:	3301      	adds	r3, #1
 800c82c:	b2da      	uxtb	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f7ff fc1f 	bl	800c078 <tcp_output>
}
 800c83a:	bf00      	nop
 800c83c:	3708      	adds	r7, #8
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	08016d70 	.word	0x08016d70
 800c848:	08017404 	.word	0x08017404
 800c84c:	08016db4 	.word	0x08016db4

0800c850 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d10b      	bne.n	800c876 <tcp_rexmit_rto+0x26>
 800c85e:	4b0c      	ldr	r3, [pc, #48]	; (800c890 <tcp_rexmit_rto+0x40>)
 800c860:	f240 62b1 	movw	r2, #1713	; 0x6b1
 800c864:	490b      	ldr	r1, [pc, #44]	; (800c894 <tcp_rexmit_rto+0x44>)
 800c866:	480c      	ldr	r0, [pc, #48]	; (800c898 <tcp_rexmit_rto+0x48>)
 800c868:	f007 f8fe 	bl	8013a68 <iprintf>
 800c86c:	2000      	movs	r0, #0
 800c86e:	f007 f9fd 	bl	8013c6c <fflush>
 800c872:	f007 f942 	bl	8013afa <abort>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f7ff ff3e 	bl	800c6f8 <tcp_rexmit_rto_prepare>
 800c87c:	4603      	mov	r3, r0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d102      	bne.n	800c888 <tcp_rexmit_rto+0x38>
    tcp_rexmit_rto_commit(pcb);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f7ff ffb6 	bl	800c7f4 <tcp_rexmit_rto_commit>
  }
}
 800c888:	bf00      	nop
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	08016d70 	.word	0x08016d70
 800c894:	08017428 	.word	0x08017428
 800c898:	08016db4 	.word	0x08016db4

0800c89c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c89c:	b590      	push	{r4, r7, lr}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d10b      	bne.n	800c8c2 <tcp_rexmit+0x26>
 800c8aa:	4b32      	ldr	r3, [pc, #200]	; (800c974 <tcp_rexmit+0xd8>)
 800c8ac:	f240 62c5 	movw	r2, #1733	; 0x6c5
 800c8b0:	4931      	ldr	r1, [pc, #196]	; (800c978 <tcp_rexmit+0xdc>)
 800c8b2:	4832      	ldr	r0, [pc, #200]	; (800c97c <tcp_rexmit+0xe0>)
 800c8b4:	f007 f8d8 	bl	8013a68 <iprintf>
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	f007 f9d7 	bl	8013c6c <fflush>
 800c8be:	f007 f91c 	bl	8013afa <abort>

  if (pcb->unacked == NULL) {
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d102      	bne.n	800c8d0 <tcp_rexmit+0x34>
    return ERR_VAL;
 800c8ca:	f06f 0305 	mvn.w	r3, #5
 800c8ce:	e04c      	b.n	800c96a <tcp_rexmit+0xce>
  }

  seg = pcb->unacked;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8d4:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c8d6:	68b8      	ldr	r0, [r7, #8]
 800c8d8:	f7ff fdd6 	bl	800c488 <tcp_output_segment_busy>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d002      	beq.n	800c8e8 <tcp_rexmit+0x4c>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c8e2:	f06f 0305 	mvn.w	r3, #5
 800c8e6:	e040      	b.n	800c96a <tcp_rexmit+0xce>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	336c      	adds	r3, #108	; 0x6c
 800c8f4:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c8f6:	e002      	b.n	800c8fe <tcp_rexmit+0x62>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d011      	beq.n	800c92a <tcp_rexmit+0x8e>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	691b      	ldr	r3, [r3, #16]
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	4618      	mov	r0, r3
 800c910:	f7f7 fa97 	bl	8003e42 <lwip_htonl>
 800c914:	4604      	mov	r4, r0
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	691b      	ldr	r3, [r3, #16]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7f7 fa90 	bl	8003e42 <lwip_htonl>
 800c922:	4603      	mov	r3, r0
 800c924:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c926:	2b00      	cmp	r3, #0
 800c928:	dbe6      	blt.n	800c8f8 <tcp_rexmit+0x5c>
  }
  seg->next = *cur_seg;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d103      	bne.n	800c948 <tcp_rexmit+0xac>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c94e:	2bff      	cmp	r3, #255	; 0xff
 800c950:	d007      	beq.n	800c962 <tcp_rexmit+0xc6>
    ++pcb->nrtx;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c958:	3301      	adds	r3, #1
 800c95a:	b2da      	uxtb	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c968:	2300      	movs	r3, #0
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3714      	adds	r7, #20
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd90      	pop	{r4, r7, pc}
 800c972:	bf00      	nop
 800c974:	08016d70 	.word	0x08016d70
 800c978:	08017444 	.word	0x08017444
 800c97c:	08016db4 	.word	0x08016db4

0800c980 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d10b      	bne.n	800c9a6 <tcp_rexmit_fast+0x26>
 800c98e:	4b31      	ldr	r3, [pc, #196]	; (800ca54 <tcp_rexmit_fast+0xd4>)
 800c990:	f240 62fd 	movw	r2, #1789	; 0x6fd
 800c994:	4930      	ldr	r1, [pc, #192]	; (800ca58 <tcp_rexmit_fast+0xd8>)
 800c996:	4831      	ldr	r0, [pc, #196]	; (800ca5c <tcp_rexmit_fast+0xdc>)
 800c998:	f007 f866 	bl	8013a68 <iprintf>
 800c99c:	2000      	movs	r0, #0
 800c99e:	f007 f965 	bl	8013c6c <fflush>
 800c9a2:	f007 f8aa 	bl	8013afa <abort>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d04d      	beq.n	800ca4a <tcp_rexmit_fast+0xca>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	8b5b      	ldrh	r3, [r3, #26]
 800c9b2:	f003 0304 	and.w	r3, r3, #4
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d147      	bne.n	800ca4a <tcp_rexmit_fast+0xca>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f7ff ff6e 	bl	800c89c <tcp_rexmit>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d141      	bne.n	800ca4a <tcp_rexmit_fast+0xca>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d207      	bcs.n	800c9e6 <tcp_rexmit_fast+0x66>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c9dc:	0fda      	lsrs	r2, r3, #31
 800c9de:	4413      	add	r3, r2
 800c9e0:	105b      	asrs	r3, r3, #1
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	e006      	b.n	800c9f4 <tcp_rexmit_fast+0x74>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c9ec:	0fda      	lsrs	r2, r3, #31
 800c9ee:	4413      	add	r3, r2
 800c9f0:	105b      	asrs	r3, r3, #1
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ca00:	461a      	mov	r2, r3
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca06:	005b      	lsls	r3, r3, #1
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d206      	bcs.n	800ca1a <tcp_rexmit_fast+0x9a>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca10:	005b      	lsls	r3, r3, #1
 800ca12:	b29a      	uxth	r2, r3
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca24:	4619      	mov	r1, r3
 800ca26:	0049      	lsls	r1, r1, #1
 800ca28:	440b      	add	r3, r1
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	4413      	add	r3, r2
 800ca2e:	b29a      	uxth	r2, r3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	8b5b      	ldrh	r3, [r3, #26]
 800ca3a:	f043 0304 	orr.w	r3, r3, #4
 800ca3e:	b29a      	uxth	r2, r3
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2200      	movs	r2, #0
 800ca48:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800ca4a:	bf00      	nop
 800ca4c:	3708      	adds	r7, #8
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	08016d70 	.word	0x08016d70
 800ca58:	0801745c 	.word	0x0801745c
 800ca5c:	08016db4 	.word	0x08016db4

0800ca60 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b086      	sub	sp, #24
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	607b      	str	r3, [r7, #4]
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	817b      	strh	r3, [r7, #10]
 800ca6e:	4613      	mov	r3, r2
 800ca70:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ca72:	897a      	ldrh	r2, [r7, #10]
 800ca74:	893b      	ldrh	r3, [r7, #8]
 800ca76:	4413      	add	r3, r2
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	3314      	adds	r3, #20
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ca82:	4619      	mov	r1, r3
 800ca84:	2022      	movs	r0, #34	; 0x22
 800ca86:	f7f9 f86f 	bl	8005b68 <pbuf_alloc>
 800ca8a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d053      	beq.n	800cb3a <tcp_output_alloc_header_common+0xda>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	895b      	ldrh	r3, [r3, #10]
 800ca96:	461a      	mov	r2, r3
 800ca98:	897b      	ldrh	r3, [r7, #10]
 800ca9a:	3314      	adds	r3, #20
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	da0b      	bge.n	800cab8 <tcp_output_alloc_header_common+0x58>
 800caa0:	4b28      	ldr	r3, [pc, #160]	; (800cb44 <tcp_output_alloc_header_common+0xe4>)
 800caa2:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800caa6:	4928      	ldr	r1, [pc, #160]	; (800cb48 <tcp_output_alloc_header_common+0xe8>)
 800caa8:	4828      	ldr	r0, [pc, #160]	; (800cb4c <tcp_output_alloc_header_common+0xec>)
 800caaa:	f006 ffdd 	bl	8013a68 <iprintf>
 800caae:	2000      	movs	r0, #0
 800cab0:	f007 f8dc 	bl	8013c6c <fflush>
 800cab4:	f007 f821 	bl	8013afa <abort>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800cabe:	8c3b      	ldrh	r3, [r7, #32]
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7f7 f9a9 	bl	8003e18 <lwip_htons>
 800cac6:	4603      	mov	r3, r0
 800cac8:	461a      	mov	r2, r3
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800cace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7f7 f9a1 	bl	8003e18 <lwip_htons>
 800cad6:	4603      	mov	r3, r0
 800cad8:	461a      	mov	r2, r3
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800cae4:	68f8      	ldr	r0, [r7, #12]
 800cae6:	f7f7 f9ac 	bl	8003e42 <lwip_htonl>
 800caea:	4602      	mov	r2, r0
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800caf0:	897b      	ldrh	r3, [r7, #10]
 800caf2:	089b      	lsrs	r3, r3, #2
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	3305      	adds	r3, #5
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	031b      	lsls	r3, r3, #12
 800cafc:	b29a      	uxth	r2, r3
 800cafe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	4313      	orrs	r3, r2
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7f7 f985 	bl	8003e18 <lwip_htons>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	461a      	mov	r2, r3
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800cb16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7f7 f97d 	bl	8003e18 <lwip_htons>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	461a      	mov	r2, r3
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	741a      	strb	r2, [r3, #16]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	2200      	movs	r2, #0
 800cb34:	749a      	strb	r2, [r3, #18]
 800cb36:	2200      	movs	r2, #0
 800cb38:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800cb3a:	697b      	ldr	r3, [r7, #20]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3718      	adds	r7, #24
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	08016d70 	.word	0x08016d70
 800cb48:	0801747c 	.word	0x0801747c
 800cb4c:	08016db4 	.word	0x08016db4

0800cb50 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800cb50:	b5b0      	push	{r4, r5, r7, lr}
 800cb52:	b08a      	sub	sp, #40	; 0x28
 800cb54:	af04      	add	r7, sp, #16
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	607b      	str	r3, [r7, #4]
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	817b      	strh	r3, [r7, #10]
 800cb5e:	4613      	mov	r3, r2
 800cb60:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d10b      	bne.n	800cb80 <tcp_output_alloc_header+0x30>
 800cb68:	4b17      	ldr	r3, [pc, #92]	; (800cbc8 <tcp_output_alloc_header+0x78>)
 800cb6a:	f240 7246 	movw	r2, #1862	; 0x746
 800cb6e:	4917      	ldr	r1, [pc, #92]	; (800cbcc <tcp_output_alloc_header+0x7c>)
 800cb70:	4817      	ldr	r0, [pc, #92]	; (800cbd0 <tcp_output_alloc_header+0x80>)
 800cb72:	f006 ff79 	bl	8013a68 <iprintf>
 800cb76:	2000      	movs	r0, #0
 800cb78:	f007 f878 	bl	8013c6c <fflush>
 800cb7c:	f006 ffbd 	bl	8013afa <abort>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	8adb      	ldrh	r3, [r3, #22]
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	8b12      	ldrh	r2, [r2, #24]
 800cb8c:	68f9      	ldr	r1, [r7, #12]
 800cb8e:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800cb90:	893d      	ldrh	r5, [r7, #8]
 800cb92:	897c      	ldrh	r4, [r7, #10]
 800cb94:	9103      	str	r1, [sp, #12]
 800cb96:	2110      	movs	r1, #16
 800cb98:	9102      	str	r1, [sp, #8]
 800cb9a:	9201      	str	r2, [sp, #4]
 800cb9c:	9300      	str	r3, [sp, #0]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	462a      	mov	r2, r5
 800cba2:	4621      	mov	r1, r4
 800cba4:	f7ff ff5c 	bl	800ca60 <tcp_output_alloc_header_common>
 800cba8:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d006      	beq.n	800cbbe <tcp_output_alloc_header+0x6e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cbb8:	441a      	add	r2, r3
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800cbbe:	697b      	ldr	r3, [r7, #20]
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3718      	adds	r7, #24
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bdb0      	pop	{r4, r5, r7, pc}
 800cbc8:	08016d70 	.word	0x08016d70
 800cbcc:	080174ac 	.word	0x080174ac
 800cbd0:	08016db4 	.word	0x08016db4

0800cbd4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b088      	sub	sp, #32
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	4611      	mov	r1, r2
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	71fb      	strb	r3, [r7, #7]
 800cbe6:	4613      	mov	r3, r2
 800cbe8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800cbea:	2300      	movs	r3, #0
 800cbec:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10b      	bne.n	800cc0c <tcp_output_fill_options+0x38>
 800cbf4:	4b1a      	ldr	r3, [pc, #104]	; (800cc60 <tcp_output_fill_options+0x8c>)
 800cbf6:	f240 725a 	movw	r2, #1882	; 0x75a
 800cbfa:	491a      	ldr	r1, [pc, #104]	; (800cc64 <tcp_output_fill_options+0x90>)
 800cbfc:	481a      	ldr	r0, [pc, #104]	; (800cc68 <tcp_output_fill_options+0x94>)
 800cbfe:	f006 ff33 	bl	8013a68 <iprintf>
 800cc02:	2000      	movs	r0, #0
 800cc04:	f007 f832 	bl	8013c6c <fflush>
 800cc08:	f006 ff77 	bl	8013afa <abort>

  tcphdr = (struct tcp_hdr *)p->payload;
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	3314      	adds	r3, #20
 800cc16:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800cc18:	69bb      	ldr	r3, [r7, #24]
 800cc1a:	f103 0214 	add.w	r2, r3, #20
 800cc1e:	8bfb      	ldrh	r3, [r7, #30]
 800cc20:	009b      	lsls	r3, r3, #2
 800cc22:	4619      	mov	r1, r3
 800cc24:	79fb      	ldrb	r3, [r7, #7]
 800cc26:	f003 0301 	and.w	r3, r3, #1
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d001      	beq.n	800cc32 <tcp_output_fill_options+0x5e>
 800cc2e:	2304      	movs	r3, #4
 800cc30:	e000      	b.n	800cc34 <tcp_output_fill_options+0x60>
 800cc32:	2300      	movs	r3, #0
 800cc34:	440b      	add	r3, r1
 800cc36:	441a      	add	r2, r3
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d00b      	beq.n	800cc56 <tcp_output_fill_options+0x82>
 800cc3e:	4b08      	ldr	r3, [pc, #32]	; (800cc60 <tcp_output_fill_options+0x8c>)
 800cc40:	f240 7279 	movw	r2, #1913	; 0x779
 800cc44:	4909      	ldr	r1, [pc, #36]	; (800cc6c <tcp_output_fill_options+0x98>)
 800cc46:	4808      	ldr	r0, [pc, #32]	; (800cc68 <tcp_output_fill_options+0x94>)
 800cc48:	f006 ff0e 	bl	8013a68 <iprintf>
 800cc4c:	2000      	movs	r0, #0
 800cc4e:	f007 f80d 	bl	8013c6c <fflush>
 800cc52:	f006 ff52 	bl	8013afa <abort>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800cc56:	bf00      	nop
 800cc58:	3720      	adds	r7, #32
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	08016d70 	.word	0x08016d70
 800cc64:	080174d4 	.word	0x080174d4
 800cc68:	08016db4 	.word	0x08016db4
 800cc6c:	080173cc 	.word	0x080173cc

0800cc70 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b088      	sub	sp, #32
 800cc74:	af02      	add	r7, sp, #8
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	60b9      	str	r1, [r7, #8]
 800cc7a:	607a      	str	r2, [r7, #4]
 800cc7c:	603b      	str	r3, [r7, #0]
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d10b      	bne.n	800cc9c <tcp_output_control_segment+0x2c>
 800cc84:	4b13      	ldr	r3, [pc, #76]	; (800ccd4 <tcp_output_control_segment+0x64>)
 800cc86:	f240 728a 	movw	r2, #1930	; 0x78a
 800cc8a:	4913      	ldr	r1, [pc, #76]	; (800ccd8 <tcp_output_control_segment+0x68>)
 800cc8c:	4813      	ldr	r0, [pc, #76]	; (800ccdc <tcp_output_control_segment+0x6c>)
 800cc8e:	f006 feeb 	bl	8013a68 <iprintf>
 800cc92:	2000      	movs	r0, #0
 800cc94:	f006 ffea 	bl	8013c6c <fflush>
 800cc98:	f006 ff2f 	bl	8013afa <abort>

  netif = tcp_route(pcb, src, dst);
 800cc9c:	683a      	ldr	r2, [r7, #0]
 800cc9e:	6879      	ldr	r1, [r7, #4]
 800cca0:	68f8      	ldr	r0, [r7, #12]
 800cca2:	f7fe f93b 	bl	800af1c <tcp_route>
 800cca6:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d105      	bne.n	800ccba <tcp_output_control_segment+0x4a>
    pbuf_free(p);
 800ccae:	68b8      	ldr	r0, [r7, #8]
 800ccb0:	f7f9 f9c4 	bl	800603c <pbuf_free>
    return ERR_RTE;
 800ccb4:	f06f 0303 	mvn.w	r3, #3
 800ccb8:	e008      	b.n	800cccc <tcp_output_control_segment+0x5c>
  }
  return tcp_output_control_segment_netif(pcb, p, src, dst, netif);
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	68b9      	ldr	r1, [r7, #8]
 800ccc4:	68f8      	ldr	r0, [r7, #12]
 800ccc6:	f000 f80b 	bl	800cce0 <tcp_output_control_segment_netif>
 800ccca:	4603      	mov	r3, r0
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3718      	adds	r7, #24
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	08016d70 	.word	0x08016d70
 800ccd8:	080174fc 	.word	0x080174fc
 800ccdc:	08016db4 	.word	0x08016db4

0800cce0 <tcp_output_control_segment_netif>:
 */
static err_t
tcp_output_control_segment_netif(const struct tcp_pcb *pcb, struct pbuf *p,
                                 const ip_addr_t *src, const ip_addr_t *dst,
                                 struct netif *netif)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b08c      	sub	sp, #48	; 0x30
 800cce4:	af04      	add	r7, sp, #16
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	607a      	str	r2, [r7, #4]
 800ccec:	603b      	str	r3, [r7, #0]
  err_t err;
  u8_t ttl, tos;

  LWIP_ASSERT("tcp_output_control_segment_netif: no netif given", netif != NULL);
 800ccee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d10b      	bne.n	800cd0c <tcp_output_control_segment_netif+0x2c>
 800ccf4:	4b24      	ldr	r3, [pc, #144]	; (800cd88 <tcp_output_control_segment_netif+0xa8>)
 800ccf6:	f240 72a1 	movw	r2, #1953	; 0x7a1
 800ccfa:	4924      	ldr	r1, [pc, #144]	; (800cd8c <tcp_output_control_segment_netif+0xac>)
 800ccfc:	4824      	ldr	r0, [pc, #144]	; (800cd90 <tcp_output_control_segment_netif+0xb0>)
 800ccfe:	f006 feb3 	bl	8013a68 <iprintf>
 800cd02:	2000      	movs	r0, #0
 800cd04:	f006 ffb2 	bl	8013c6c <fflush>
 800cd08:	f006 fef7 	bl	8013afa <abort>

#if CHECKSUM_GEN_TCP
  IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
    struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	61bb      	str	r3, [r7, #24]
    tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	891a      	ldrh	r2, [r3, #8]
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	9300      	str	r3, [sp, #0]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2106      	movs	r1, #6
 800cd1e:	68b8      	ldr	r0, [r7, #8]
 800cd20:	f7f7 f9ac 	bl	800407c <ip_chksum_pseudo>
 800cd24:	4603      	mov	r3, r0
 800cd26:	461a      	mov	r2, r3
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	821a      	strh	r2, [r3, #16]
                                      src, dst);
  }
#endif
  if (pcb != NULL) {
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d006      	beq.n	800cd40 <tcp_output_control_segment_netif+0x60>
    NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
    ttl = pcb->ttl;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	7adb      	ldrb	r3, [r3, #11]
 800cd36:	77fb      	strb	r3, [r7, #31]
    tos = pcb->tos;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	7a9b      	ldrb	r3, [r3, #10]
 800cd3c:	77bb      	strb	r3, [r7, #30]
 800cd3e:	e003      	b.n	800cd48 <tcp_output_control_segment_netif+0x68>
  } else {
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ttl = TCP_TTL;
 800cd40:	23ff      	movs	r3, #255	; 0xff
 800cd42:	77fb      	strb	r3, [r7, #31]
    tos = 0;
 800cd44:	2300      	movs	r3, #0
 800cd46:	77bb      	strb	r3, [r7, #30]
  }
  TCP_STATS_INC(tcp.xmit);
 800cd48:	4b12      	ldr	r3, [pc, #72]	; (800cd94 <tcp_output_control_segment_netif+0xb4>)
 800cd4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cd4e:	3301      	adds	r3, #1
 800cd50:	b29a      	uxth	r2, r3
 800cd52:	4b10      	ldr	r3, [pc, #64]	; (800cd94 <tcp_output_control_segment_netif+0xb4>)
 800cd54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800cd58:	7ffa      	ldrb	r2, [r7, #31]
 800cd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5c:	9302      	str	r3, [sp, #8]
 800cd5e:	2306      	movs	r3, #6
 800cd60:	9301      	str	r3, [sp, #4]
 800cd62:	7fbb      	ldrb	r3, [r7, #30]
 800cd64:	9300      	str	r3, [sp, #0]
 800cd66:	4613      	mov	r3, r2
 800cd68:	683a      	ldr	r2, [r7, #0]
 800cd6a:	6879      	ldr	r1, [r7, #4]
 800cd6c:	68b8      	ldr	r0, [r7, #8]
 800cd6e:	f7f7 fbb9 	bl	80044e4 <ip4_output_if>
 800cd72:	4603      	mov	r3, r0
 800cd74:	75fb      	strb	r3, [r7, #23]
  NETIF_RESET_HINTS(netif);

  pbuf_free(p);
 800cd76:	68b8      	ldr	r0, [r7, #8]
 800cd78:	f7f9 f960 	bl	800603c <pbuf_free>
  return err;
 800cd7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3720      	adds	r7, #32
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	08016d70 	.word	0x08016d70
 800cd8c:	08017528 	.word	0x08017528
 800cd90:	08016db4 	.word	0x08016db4
 800cd94:	20002218 	.word	0x20002218

0800cd98 <tcp_rst_common>:

static struct pbuf *
tcp_rst_common(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
               const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
               u16_t local_port, u16_t remote_port)
{
 800cd98:	b590      	push	{r4, r7, lr}
 800cd9a:	b08b      	sub	sp, #44	; 0x2c
 800cd9c:	af04      	add	r7, sp, #16
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	607a      	str	r2, [r7, #4]
 800cda4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d10b      	bne.n	800cdc4 <tcp_rst_common+0x2c>
 800cdac:	4b22      	ldr	r3, [pc, #136]	; (800ce38 <tcp_rst_common+0xa0>)
 800cdae:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800cdb2:	4922      	ldr	r1, [pc, #136]	; (800ce3c <tcp_rst_common+0xa4>)
 800cdb4:	4822      	ldr	r0, [pc, #136]	; (800ce40 <tcp_rst_common+0xa8>)
 800cdb6:	f006 fe57 	bl	8013a68 <iprintf>
 800cdba:	2000      	movs	r0, #0
 800cdbc:	f006 ff56 	bl	8013c6c <fflush>
 800cdc0:	f006 fe9b 	bl	8013afa <abort>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800cdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d10b      	bne.n	800cde2 <tcp_rst_common+0x4a>
 800cdca:	4b1b      	ldr	r3, [pc, #108]	; (800ce38 <tcp_rst_common+0xa0>)
 800cdcc:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800cdd0:	491c      	ldr	r1, [pc, #112]	; (800ce44 <tcp_rst_common+0xac>)
 800cdd2:	481b      	ldr	r0, [pc, #108]	; (800ce40 <tcp_rst_common+0xa8>)
 800cdd4:	f006 fe48 	bl	8013a68 <iprintf>
 800cdd8:	2000      	movs	r0, #0
 800cdda:	f006 ff47 	bl	8013c6c <fflush>
 800cdde:	f006 fe8c 	bl	8013afa <abort>
  /* these two are passed only for checks, disable warnings without asserts */
  LWIP_UNUSED_ARG(local_ip);
  LWIP_UNUSED_ARG(remote_ip);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cde2:	2300      	movs	r3, #0
 800cde4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800cde6:	f24b 4305 	movw	r3, #46085	; 0xb405
 800cdea:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800cdec:	7dfb      	ldrb	r3, [r7, #23]
 800cdee:	b29c      	uxth	r4, r3
 800cdf0:	68b8      	ldr	r0, [r7, #8]
 800cdf2:	f7f7 f826 	bl	8003e42 <lwip_htonl>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	8abb      	ldrh	r3, [r7, #20]
 800cdfa:	9303      	str	r3, [sp, #12]
 800cdfc:	2314      	movs	r3, #20
 800cdfe:	9302      	str	r3, [sp, #8]
 800ce00:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ce02:	9301      	str	r3, [sp, #4]
 800ce04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ce06:	9300      	str	r3, [sp, #0]
 800ce08:	4613      	mov	r3, r2
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	4621      	mov	r1, r4
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f7ff fe26 	bl	800ca60 <tcp_output_alloc_header_common>
 800ce14:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d101      	bne.n	800ce20 <tcp_rst_common+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return NULL;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	e006      	b.n	800ce2e <tcp_rst_common+0x96>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800ce20:	2300      	movs	r3, #0
 800ce22:	2200      	movs	r2, #0
 800ce24:	6939      	ldr	r1, [r7, #16]
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f7ff fed4 	bl	800cbd4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
  return p;
 800ce2c:	693b      	ldr	r3, [r7, #16]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	371c      	adds	r7, #28
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd90      	pop	{r4, r7, pc}
 800ce36:	bf00      	nop
 800ce38:	08016d70 	.word	0x08016d70
 800ce3c:	0801755c 	.word	0x0801755c
 800ce40:	08016db4 	.word	0x08016db4
 800ce44:	08017578 	.word	0x08017578

0800ce48 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b08a      	sub	sp, #40	; 0x28
 800ce4c:	af04      	add	r7, sp, #16
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
 800ce54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  
  p = tcp_rst_common(pcb, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 800ce56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ce58:	9302      	str	r3, [sp, #8]
 800ce5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce5c:	9301      	str	r3, [sp, #4]
 800ce5e:	6a3b      	ldr	r3, [r7, #32]
 800ce60:	9300      	str	r3, [sp, #0]
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	68b9      	ldr	r1, [r7, #8]
 800ce68:	68f8      	ldr	r0, [r7, #12]
 800ce6a:	f7ff ff95 	bl	800cd98 <tcp_rst_common>
 800ce6e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d005      	beq.n	800ce82 <tcp_rst+0x3a>
    tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ce76:	6a3b      	ldr	r3, [r7, #32]
 800ce78:	683a      	ldr	r2, [r7, #0]
 800ce7a:	6979      	ldr	r1, [r7, #20]
 800ce7c:	68f8      	ldr	r0, [r7, #12]
 800ce7e:	f7ff fef7 	bl	800cc70 <tcp_output_control_segment>
  }
}
 800ce82:	bf00      	nop
 800ce84:	3718      	adds	r7, #24
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}

0800ce8a <tcp_rst_netif>:
 */
void
tcp_rst_netif(struct netif *netif, u32_t seqno, u32_t ackno,
              const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
              u16_t local_port, u16_t remote_port)
{
 800ce8a:	b580      	push	{r7, lr}
 800ce8c:	b08a      	sub	sp, #40	; 0x28
 800ce8e:	af04      	add	r7, sp, #16
 800ce90:	60f8      	str	r0, [r7, #12]
 800ce92:	60b9      	str	r1, [r7, #8]
 800ce94:	607a      	str	r2, [r7, #4]
 800ce96:	603b      	str	r3, [r7, #0]
  if (netif) {
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d017      	beq.n	800cece <tcp_rst_netif+0x44>
    struct pbuf *p = tcp_rst_common(NULL, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 800ce9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cea0:	9302      	str	r3, [sp, #8]
 800cea2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cea4:	9301      	str	r3, [sp, #4]
 800cea6:	6a3b      	ldr	r3, [r7, #32]
 800cea8:	9300      	str	r3, [sp, #0]
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	68b9      	ldr	r1, [r7, #8]
 800ceb0:	2000      	movs	r0, #0
 800ceb2:	f7ff ff71 	bl	800cd98 <tcp_rst_common>
 800ceb6:	6178      	str	r0, [r7, #20]
    if (p != NULL) {
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d007      	beq.n	800cece <tcp_rst_netif+0x44>
      tcp_output_control_segment_netif(NULL, p, local_ip, remote_ip, netif);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	9300      	str	r3, [sp, #0]
 800cec2:	6a3b      	ldr	r3, [r7, #32]
 800cec4:	683a      	ldr	r2, [r7, #0]
 800cec6:	6979      	ldr	r1, [r7, #20]
 800cec8:	2000      	movs	r0, #0
 800ceca:	f7ff ff09 	bl	800cce0 <tcp_output_control_segment_netif>
    }
  } else {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_rst_netif: no netif given\n"));
  }
}
 800cece:	bf00      	nop
 800ced0:	3718      	adds	r7, #24
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
	...

0800ced8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ced8:	b590      	push	{r4, r7, lr}
 800ceda:	b087      	sub	sp, #28
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800cee0:	2300      	movs	r3, #0
 800cee2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800cee4:	2300      	movs	r3, #0
 800cee6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d10b      	bne.n	800cf06 <tcp_send_empty_ack+0x2e>
 800ceee:	4b2c      	ldr	r3, [pc, #176]	; (800cfa0 <tcp_send_empty_ack+0xc8>)
 800cef0:	f44f 6203 	mov.w	r2, #2096	; 0x830
 800cef4:	492b      	ldr	r1, [pc, #172]	; (800cfa4 <tcp_send_empty_ack+0xcc>)
 800cef6:	482c      	ldr	r0, [pc, #176]	; (800cfa8 <tcp_send_empty_ack+0xd0>)
 800cef8:	f006 fdb6 	bl	8013a68 <iprintf>
 800cefc:	2000      	movs	r0, #0
 800cefe:	f006 feb5 	bl	8013c6c <fflush>
 800cf02:	f006 fdfa 	bl	8013afa <abort>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cf06:	7dfb      	ldrb	r3, [r7, #23]
 800cf08:	f003 0301 	and.w	r3, r3, #1
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d001      	beq.n	800cf14 <tcp_send_empty_ack+0x3c>
 800cf10:	2304      	movs	r3, #4
 800cf12:	e000      	b.n	800cf16 <tcp_send_empty_ack+0x3e>
 800cf14:	2300      	movs	r3, #0
 800cf16:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800cf18:	7d7b      	ldrb	r3, [r7, #21]
 800cf1a:	b29c      	uxth	r4, r3
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7f6 ff8e 	bl	8003e42 <lwip_htonl>
 800cf26:	4603      	mov	r3, r0
 800cf28:	2200      	movs	r2, #0
 800cf2a:	4621      	mov	r1, r4
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f7ff fe0f 	bl	800cb50 <tcp_output_alloc_header>
 800cf32:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d109      	bne.n	800cf4e <tcp_send_empty_ack+0x76>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	8b5b      	ldrh	r3, [r3, #26]
 800cf3e:	f043 0303 	orr.w	r3, r3, #3
 800cf42:	b29a      	uxth	r2, r3
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800cf48:	f06f 0301 	mvn.w	r3, #1
 800cf4c:	e023      	b.n	800cf96 <tcp_send_empty_ack+0xbe>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800cf4e:	7dbb      	ldrb	r3, [r7, #22]
 800cf50:	7dfa      	ldrb	r2, [r7, #23]
 800cf52:	6939      	ldr	r1, [r7, #16]
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f7ff fe3d 	bl	800cbd4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	3304      	adds	r3, #4
 800cf60:	6939      	ldr	r1, [r7, #16]
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f7ff fe84 	bl	800cc70 <tcp_output_control_segment>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800cf6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d007      	beq.n	800cf84 <tcp_send_empty_ack+0xac>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	8b5b      	ldrh	r3, [r3, #26]
 800cf78:	f043 0303 	orr.w	r3, r3, #3
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	835a      	strh	r2, [r3, #26]
 800cf82:	e006      	b.n	800cf92 <tcp_send_empty_ack+0xba>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	8b5b      	ldrh	r3, [r3, #26]
 800cf88:	f023 0303 	bic.w	r3, r3, #3
 800cf8c:	b29a      	uxth	r2, r3
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800cf92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	371c      	adds	r7, #28
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd90      	pop	{r4, r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	08016d70 	.word	0x08016d70
 800cfa4:	08017594 	.word	0x08017594
 800cfa8:	08016db4 	.word	0x08016db4

0800cfac <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800cfac:	b590      	push	{r4, r7, lr}
 800cfae:	b087      	sub	sp, #28
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10b      	bne.n	800cfd6 <tcp_keepalive+0x2a>
 800cfbe:	4b1b      	ldr	r3, [pc, #108]	; (800d02c <tcp_keepalive+0x80>)
 800cfc0:	f640 026a 	movw	r2, #2154	; 0x86a
 800cfc4:	491a      	ldr	r1, [pc, #104]	; (800d030 <tcp_keepalive+0x84>)
 800cfc6:	481b      	ldr	r0, [pc, #108]	; (800d034 <tcp_keepalive+0x88>)
 800cfc8:	f006 fd4e 	bl	8013a68 <iprintf>
 800cfcc:	2000      	movs	r0, #0
 800cfce:	f006 fe4d 	bl	8013c6c <fflush>
 800cfd2:	f006 fd92 	bl	8013afa <abort>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800cfd6:	7dfb      	ldrb	r3, [r7, #23]
 800cfd8:	b29c      	uxth	r4, r3
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfde:	3b01      	subs	r3, #1
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7f6 ff2e 	bl	8003e42 <lwip_htonl>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2200      	movs	r2, #0
 800cfea:	4621      	mov	r1, r4
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f7ff fdaf 	bl	800cb50 <tcp_output_alloc_header>
 800cff2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d102      	bne.n	800d000 <tcp_keepalive+0x54>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800cffa:	f04f 33ff 	mov.w	r3, #4294967295
 800cffe:	e010      	b.n	800d022 <tcp_keepalive+0x76>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800d000:	2300      	movs	r3, #0
 800d002:	2200      	movs	r2, #0
 800d004:	6939      	ldr	r1, [r7, #16]
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f7ff fde4 	bl	800cbd4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	3304      	adds	r3, #4
 800d012:	6939      	ldr	r1, [r7, #16]
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f7ff fe2b 	bl	800cc70 <tcp_output_control_segment>
 800d01a:	4603      	mov	r3, r0
 800d01c:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d01e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d022:	4618      	mov	r0, r3
 800d024:	371c      	adds	r7, #28
 800d026:	46bd      	mov	sp, r7
 800d028:	bd90      	pop	{r4, r7, pc}
 800d02a:	bf00      	nop
 800d02c:	08016d70 	.word	0x08016d70
 800d030:	080175b4 	.word	0x080175b4
 800d034:	08016db4 	.word	0x08016db4

0800d038 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d038:	b590      	push	{r4, r7, lr}
 800d03a:	b08b      	sub	sp, #44	; 0x2c
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d040:	2300      	movs	r3, #0
 800d042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d10b      	bne.n	800d064 <tcp_zero_window_probe+0x2c>
 800d04c:	4b4e      	ldr	r3, [pc, #312]	; (800d188 <tcp_zero_window_probe+0x150>)
 800d04e:	f640 0295 	movw	r2, #2197	; 0x895
 800d052:	494e      	ldr	r1, [pc, #312]	; (800d18c <tcp_zero_window_probe+0x154>)
 800d054:	484e      	ldr	r0, [pc, #312]	; (800d190 <tcp_zero_window_probe+0x158>)
 800d056:	f006 fd07 	bl	8013a68 <iprintf>
 800d05a:	2000      	movs	r0, #0
 800d05c:	f006 fe06 	bl	8013c6c <fflush>
 800d060:	f006 fd4b 	bl	8013afa <abort>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d068:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d06a:	6a3b      	ldr	r3, [r7, #32]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d101      	bne.n	800d074 <tcp_zero_window_probe+0x3c>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d070:	2300      	movs	r3, #0
 800d072:	e085      	b.n	800d180 <tcp_zero_window_probe+0x148>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d07a:	2bff      	cmp	r3, #255	; 0xff
 800d07c:	d007      	beq.n	800d08e <tcp_zero_window_probe+0x56>
    ++pcb->persist_probe;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d084:	3301      	adds	r3, #1
 800d086:	b2da      	uxtb	r2, r3
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d08e:	6a3b      	ldr	r3, [r7, #32]
 800d090:	691b      	ldr	r3, [r3, #16]
 800d092:	899b      	ldrh	r3, [r3, #12]
 800d094:	b29b      	uxth	r3, r3
 800d096:	4618      	mov	r0, r3
 800d098:	f7f6 febe 	bl	8003e18 <lwip_htons>
 800d09c:	4603      	mov	r3, r0
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	f003 0301 	and.w	r3, r3, #1
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d005      	beq.n	800d0b4 <tcp_zero_window_probe+0x7c>
 800d0a8:	6a3b      	ldr	r3, [r7, #32]
 800d0aa:	891b      	ldrh	r3, [r3, #8]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d101      	bne.n	800d0b4 <tcp_zero_window_probe+0x7c>
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e000      	b.n	800d0b6 <tcp_zero_window_probe+0x7e>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d0b8:	7ffb      	ldrb	r3, [r7, #31]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	bf0c      	ite	eq
 800d0be:	2301      	moveq	r3, #1
 800d0c0:	2300      	movne	r3, #0
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d0c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0ca:	b299      	uxth	r1, r3
 800d0cc:	6a3b      	ldr	r3, [r7, #32]
 800d0ce:	691b      	ldr	r3, [r3, #16]
 800d0d0:	685b      	ldr	r3, [r3, #4]
 800d0d2:	8bba      	ldrh	r2, [r7, #28]
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f7ff fd3b 	bl	800cb50 <tcp_output_alloc_header>
 800d0da:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d102      	bne.n	800d0e8 <tcp_zero_window_probe+0xb0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d0e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d0e6:	e04b      	b.n	800d180 <tcp_zero_window_probe+0x148>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d0e8:	69bb      	ldr	r3, [r7, #24]
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d0ee:	7ffb      	ldrb	r3, [r7, #31]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d011      	beq.n	800d118 <tcp_zero_window_probe+0xe0>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	899b      	ldrh	r3, [r3, #12]
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	b21b      	sxth	r3, r3
 800d0fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d100:	b21c      	sxth	r4, r3
 800d102:	2011      	movs	r0, #17
 800d104:	f7f6 fe88 	bl	8003e18 <lwip_htons>
 800d108:	4603      	mov	r3, r0
 800d10a:	b21b      	sxth	r3, r3
 800d10c:	4323      	orrs	r3, r4
 800d10e:	b21b      	sxth	r3, r3
 800d110:	b29a      	uxth	r2, r3
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	819a      	strh	r2, [r3, #12]
 800d116:	e010      	b.n	800d13a <tcp_zero_window_probe+0x102>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	3314      	adds	r3, #20
 800d11e:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d120:	6a3b      	ldr	r3, [r7, #32]
 800d122:	6858      	ldr	r0, [r3, #4]
 800d124:	6a3b      	ldr	r3, [r7, #32]
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	891a      	ldrh	r2, [r3, #8]
 800d12a:	6a3b      	ldr	r3, [r7, #32]
 800d12c:	891b      	ldrh	r3, [r3, #8]
 800d12e:	1ad3      	subs	r3, r2, r3
 800d130:	b29b      	uxth	r3, r3
 800d132:	2201      	movs	r2, #1
 800d134:	6939      	ldr	r1, [r7, #16]
 800d136:	f7f9 f9f1 	bl	800651c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d13a:	6a3b      	ldr	r3, [r7, #32]
 800d13c:	691b      	ldr	r3, [r3, #16]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	4618      	mov	r0, r3
 800d142:	f7f6 fe7e 	bl	8003e42 <lwip_htonl>
 800d146:	4603      	mov	r3, r0
 800d148:	3301      	adds	r3, #1
 800d14a:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	1ad3      	subs	r3, r2, r3
 800d154:	2b00      	cmp	r3, #0
 800d156:	da02      	bge.n	800d15e <tcp_zero_window_probe+0x126>
    pcb->snd_nxt = snd_nxt;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	68fa      	ldr	r2, [r7, #12]
 800d15c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800d15e:	2300      	movs	r3, #0
 800d160:	2200      	movs	r2, #0
 800d162:	69b9      	ldr	r1, [r7, #24]
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f7ff fd35 	bl	800cbd4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	3304      	adds	r3, #4
 800d170:	69b9      	ldr	r1, [r7, #24]
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f7ff fd7c 	bl	800cc70 <tcp_output_control_segment>
 800d178:	4603      	mov	r3, r0
 800d17a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d17c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d180:	4618      	mov	r0, r3
 800d182:	372c      	adds	r7, #44	; 0x2c
 800d184:	46bd      	mov	sp, r7
 800d186:	bd90      	pop	{r4, r7, pc}
 800d188:	08016d70 	.word	0x08016d70
 800d18c:	080175d0 	.word	0x080175d0
 800d190:	08016db4 	.word	0x08016db4

0800d194 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d19c:	f7f9 fbac 	bl	80068f8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d1a0:	4b0a      	ldr	r3, [pc, #40]	; (800d1cc <tcpip_tcp_timer+0x38>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d103      	bne.n	800d1b0 <tcpip_tcp_timer+0x1c>
 800d1a8:	4b09      	ldr	r3, [pc, #36]	; (800d1d0 <tcpip_tcp_timer+0x3c>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d005      	beq.n	800d1bc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	4908      	ldr	r1, [pc, #32]	; (800d1d4 <tcpip_tcp_timer+0x40>)
 800d1b4:	20fa      	movs	r0, #250	; 0xfa
 800d1b6:	f000 f8e9 	bl	800d38c <sys_timeout>
 800d1ba:	e002      	b.n	800d1c2 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d1bc:	4b06      	ldr	r3, [pc, #24]	; (800d1d8 <tcpip_tcp_timer+0x44>)
 800d1be:	2200      	movs	r2, #0
 800d1c0:	601a      	str	r2, [r3, #0]
  }
}
 800d1c2:	bf00      	nop
 800d1c4:	3708      	adds	r7, #8
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	200022c0 	.word	0x200022c0
 800d1d0:	200022d0 	.word	0x200022d0
 800d1d4:	0800d195 	.word	0x0800d195
 800d1d8:	2000073c 	.word	0x2000073c

0800d1dc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d1e0:	4b0a      	ldr	r3, [pc, #40]	; (800d20c <tcp_timer_needed+0x30>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d10f      	bne.n	800d208 <tcp_timer_needed+0x2c>
 800d1e8:	4b09      	ldr	r3, [pc, #36]	; (800d210 <tcp_timer_needed+0x34>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d103      	bne.n	800d1f8 <tcp_timer_needed+0x1c>
 800d1f0:	4b08      	ldr	r3, [pc, #32]	; (800d214 <tcp_timer_needed+0x38>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d007      	beq.n	800d208 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d1f8:	4b04      	ldr	r3, [pc, #16]	; (800d20c <tcp_timer_needed+0x30>)
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d1fe:	2200      	movs	r2, #0
 800d200:	4905      	ldr	r1, [pc, #20]	; (800d218 <tcp_timer_needed+0x3c>)
 800d202:	20fa      	movs	r0, #250	; 0xfa
 800d204:	f000 f8c2 	bl	800d38c <sys_timeout>
  }
}
 800d208:	bf00      	nop
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	2000073c 	.word	0x2000073c
 800d210:	200022c0 	.word	0x200022c0
 800d214:	200022d0 	.word	0x200022d0
 800d218:	0800d195 	.word	0x0800d195

0800d21c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b086      	sub	sp, #24
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d228:	2005      	movs	r0, #5
 800d22a:	f7f8 f8c1 	bl	80053b0 <memp_malloc>
 800d22e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d10d      	bne.n	800d252 <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d14d      	bne.n	800d2d8 <sys_timeout_abs+0xbc>
 800d23c:	4b28      	ldr	r3, [pc, #160]	; (800d2e0 <sys_timeout_abs+0xc4>)
 800d23e:	22be      	movs	r2, #190	; 0xbe
 800d240:	4928      	ldr	r1, [pc, #160]	; (800d2e4 <sys_timeout_abs+0xc8>)
 800d242:	4829      	ldr	r0, [pc, #164]	; (800d2e8 <sys_timeout_abs+0xcc>)
 800d244:	f006 fc10 	bl	8013a68 <iprintf>
 800d248:	2000      	movs	r0, #0
 800d24a:	f006 fd0f 	bl	8013c6c <fflush>
 800d24e:	f006 fc54 	bl	8013afa <abort>
    return;
  }

  timeout->next = NULL;
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	2200      	movs	r2, #0
 800d256:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	68ba      	ldr	r2, [r7, #8]
 800d25c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	68fa      	ldr	r2, [r7, #12]
 800d268:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d26a:	4b20      	ldr	r3, [pc, #128]	; (800d2ec <sys_timeout_abs+0xd0>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d103      	bne.n	800d27a <sys_timeout_abs+0x5e>
    next_timeout = timeout;
 800d272:	4a1e      	ldr	r2, [pc, #120]	; (800d2ec <sys_timeout_abs+0xd0>)
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	6013      	str	r3, [r2, #0]
    return;
 800d278:	e02f      	b.n	800d2da <sys_timeout_abs+0xbe>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	685a      	ldr	r2, [r3, #4]
 800d27e:	4b1b      	ldr	r3, [pc, #108]	; (800d2ec <sys_timeout_abs+0xd0>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	1ad3      	subs	r3, r2, r3
 800d286:	2b00      	cmp	r3, #0
 800d288:	da07      	bge.n	800d29a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d28a:	4b18      	ldr	r3, [pc, #96]	; (800d2ec <sys_timeout_abs+0xd0>)
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d292:	4a16      	ldr	r2, [pc, #88]	; (800d2ec <sys_timeout_abs+0xd0>)
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	6013      	str	r3, [r2, #0]
 800d298:	e01f      	b.n	800d2da <sys_timeout_abs+0xbe>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d29a:	4b14      	ldr	r3, [pc, #80]	; (800d2ec <sys_timeout_abs+0xd0>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	617b      	str	r3, [r7, #20]
 800d2a0:	e016      	b.n	800d2d0 <sys_timeout_abs+0xb4>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d007      	beq.n	800d2ba <sys_timeout_abs+0x9e>
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	685a      	ldr	r2, [r3, #4]
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	1ad3      	subs	r3, r2, r3
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	da07      	bge.n	800d2ca <sys_timeout_abs+0xae>
        timeout->next = t->next;
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	681a      	ldr	r2, [r3, #0]
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	693a      	ldr	r2, [r7, #16]
 800d2c6:	601a      	str	r2, [r3, #0]
        break;
 800d2c8:	e007      	b.n	800d2da <sys_timeout_abs+0xbe>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	617b      	str	r3, [r7, #20]
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d1e5      	bne.n	800d2a2 <sys_timeout_abs+0x86>
 800d2d6:	e000      	b.n	800d2da <sys_timeout_abs+0xbe>
    return;
 800d2d8:	bf00      	nop
      }
    }
  }
}
 800d2da:	3718      	adds	r7, #24
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	080175f4 	.word	0x080175f4
 800d2e4:	08017618 	.word	0x08017618
 800d2e8:	08017658 	.word	0x08017658
 800d2ec:	20000734 	.word	0x20000734

0800d2f0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b086      	sub	sp, #24
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	4798      	blx	r3

  now = sys_now();
 800d302:	f7f4 fd95 	bl	8001e30 <sys_now>
 800d306:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	4b0d      	ldr	r3, [pc, #52]	; (800d344 <lwip_cyclic_timer+0x54>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4413      	add	r3, r2
 800d312:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	1ad3      	subs	r3, r2, r3
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	da09      	bge.n	800d332 <lwip_cyclic_timer+0x42>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	4413      	add	r3, r2
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	4907      	ldr	r1, [pc, #28]	; (800d348 <lwip_cyclic_timer+0x58>)
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7ff ff76 	bl	800d21c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d330:	e004      	b.n	800d33c <lwip_cyclic_timer+0x4c>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	4904      	ldr	r1, [pc, #16]	; (800d348 <lwip_cyclic_timer+0x58>)
 800d336:	68f8      	ldr	r0, [r7, #12]
 800d338:	f7ff ff70 	bl	800d21c <sys_timeout_abs>
}
 800d33c:	bf00      	nop
 800d33e:	3718      	adds	r7, #24
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	20000738 	.word	0x20000738
 800d348:	0800d2f1 	.word	0x0800d2f1

0800d34c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d352:	2301      	movs	r3, #1
 800d354:	607b      	str	r3, [r7, #4]
 800d356:	e00e      	b.n	800d376 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d358:	4a0a      	ldr	r2, [pc, #40]	; (800d384 <sys_timeouts_init+0x38>)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	00db      	lsls	r3, r3, #3
 800d364:	4a07      	ldr	r2, [pc, #28]	; (800d384 <sys_timeouts_init+0x38>)
 800d366:	4413      	add	r3, r2
 800d368:	461a      	mov	r2, r3
 800d36a:	4907      	ldr	r1, [pc, #28]	; (800d388 <sys_timeouts_init+0x3c>)
 800d36c:	f000 f80e 	bl	800d38c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	3301      	adds	r3, #1
 800d374:	607b      	str	r3, [r7, #4]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d0ed      	beq.n	800d358 <sys_timeouts_init+0xc>
  }
}
 800d37c:	bf00      	nop
 800d37e:	3708      	adds	r7, #8
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	08017b30 	.word	0x08017b30
 800d388:	0800d2f1 	.word	0x0800d2f1

0800d38c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b086      	sub	sp, #24
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d39e:	d30b      	bcc.n	800d3b8 <sys_timeout+0x2c>
 800d3a0:	4b0d      	ldr	r3, [pc, #52]	; (800d3d8 <sys_timeout+0x4c>)
 800d3a2:	f240 1229 	movw	r2, #297	; 0x129
 800d3a6:	490d      	ldr	r1, [pc, #52]	; (800d3dc <sys_timeout+0x50>)
 800d3a8:	480d      	ldr	r0, [pc, #52]	; (800d3e0 <sys_timeout+0x54>)
 800d3aa:	f006 fb5d 	bl	8013a68 <iprintf>
 800d3ae:	2000      	movs	r0, #0
 800d3b0:	f006 fc5c 	bl	8013c6c <fflush>
 800d3b4:	f006 fba1 	bl	8013afa <abort>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */
 800d3b8:	f7f4 fd3a 	bl	8001e30 <sys_now>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	68b9      	ldr	r1, [r7, #8]
 800d3c8:	6978      	ldr	r0, [r7, #20]
 800d3ca:	f7ff ff27 	bl	800d21c <sys_timeout_abs>
#endif
}
 800d3ce:	bf00      	nop
 800d3d0:	3718      	adds	r7, #24
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	080175f4 	.word	0x080175f4
 800d3dc:	08017680 	.word	0x08017680
 800d3e0:	08017658 	.word	0x08017658

0800d3e4 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800d3ee:	4b19      	ldr	r3, [pc, #100]	; (800d454 <sys_untimeout+0x70>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d02a      	beq.n	800d44c <sys_untimeout+0x68>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800d3f6:	4b17      	ldr	r3, [pc, #92]	; (800d454 <sys_untimeout+0x70>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	60bb      	str	r3, [r7, #8]
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	60fb      	str	r3, [r7, #12]
 800d400:	e01f      	b.n	800d442 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	689a      	ldr	r2, [r3, #8]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d115      	bne.n	800d438 <sys_untimeout+0x54>
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	68da      	ldr	r2, [r3, #12]
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	429a      	cmp	r2, r3
 800d414:	d110      	bne.n	800d438 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d104      	bne.n	800d426 <sys_untimeout+0x42>
        next_timeout = t->next;
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a0c      	ldr	r2, [pc, #48]	; (800d454 <sys_untimeout+0x70>)
 800d422:	6013      	str	r3, [r2, #0]
 800d424:	e003      	b.n	800d42e <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 800d42e:	68b9      	ldr	r1, [r7, #8]
 800d430:	2005      	movs	r0, #5
 800d432:	f7f8 f82d 	bl	8005490 <memp_free>
      return;
 800d436:	e00a      	b.n	800d44e <sys_untimeout+0x6a>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	60fb      	str	r3, [r7, #12]
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	60bb      	str	r3, [r7, #8]
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d1dc      	bne.n	800d402 <sys_untimeout+0x1e>
    }
  }
  return;
 800d448:	bf00      	nop
 800d44a:	e000      	b.n	800d44e <sys_untimeout+0x6a>
    return;
 800d44c:	bf00      	nop
}
 800d44e:	3710      	adds	r7, #16
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}
 800d454:	20000734 	.word	0x20000734

0800d458 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b084      	sub	sp, #16
 800d45c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d45e:	f7f4 fce7 	bl	8001e30 <sys_now>
 800d462:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800d464:	4b15      	ldr	r3, [pc, #84]	; (800d4bc <sys_check_timeouts+0x64>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d01e      	beq.n	800d4ae <sys_check_timeouts+0x56>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	68fa      	ldr	r2, [r7, #12]
 800d476:	1ad3      	subs	r3, r2, r3
 800d478:	2b00      	cmp	r3, #0
 800d47a:	db1a      	blt.n	800d4b2 <sys_check_timeouts+0x5a>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a0e      	ldr	r2, [pc, #56]	; (800d4bc <sys_check_timeouts+0x64>)
 800d482:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	689b      	ldr	r3, [r3, #8]
 800d488:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	4a0a      	ldr	r2, [pc, #40]	; (800d4c0 <sys_check_timeouts+0x68>)
 800d496:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d498:	68b9      	ldr	r1, [r7, #8]
 800d49a:	2005      	movs	r0, #5
 800d49c:	f7f7 fff8 	bl	8005490 <memp_free>
    if (handler != NULL) {
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d0de      	beq.n	800d464 <sys_check_timeouts+0xc>
      handler(arg);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6838      	ldr	r0, [r7, #0]
 800d4aa:	4798      	blx	r3
  do {
 800d4ac:	e7da      	b.n	800d464 <sys_check_timeouts+0xc>
      return;
 800d4ae:	bf00      	nop
 800d4b0:	e000      	b.n	800d4b4 <sys_check_timeouts+0x5c>
      return;
 800d4b2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	20000734 	.word	0x20000734
 800d4c0:	20000738 	.word	0x20000738

0800d4c4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800d4ca:	4b16      	ldr	r3, [pc, #88]	; (800d524 <sys_timeouts_sleeptime+0x60>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d102      	bne.n	800d4d8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800d4d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d4d6:	e021      	b.n	800d51c <sys_timeouts_sleeptime+0x58>
  }
  now = sys_now();
 800d4d8:	f7f4 fcaa 	bl	8001e30 <sys_now>
 800d4dc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800d4de:	4b11      	ldr	r3, [pc, #68]	; (800d524 <sys_timeouts_sleeptime+0x60>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	685a      	ldr	r2, [r3, #4]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	1ad3      	subs	r3, r2, r3
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	da01      	bge.n	800d4f0 <sys_timeouts_sleeptime+0x2c>
    return 0;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	e015      	b.n	800d51c <sys_timeouts_sleeptime+0x58>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800d4f0:	4b0c      	ldr	r3, [pc, #48]	; (800d524 <sys_timeouts_sleeptime+0x60>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	685a      	ldr	r2, [r3, #4]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	1ad3      	subs	r3, r2, r3
 800d4fa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	da0b      	bge.n	800d51a <sys_timeouts_sleeptime+0x56>
 800d502:	4b09      	ldr	r3, [pc, #36]	; (800d528 <sys_timeouts_sleeptime+0x64>)
 800d504:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800d508:	4908      	ldr	r1, [pc, #32]	; (800d52c <sys_timeouts_sleeptime+0x68>)
 800d50a:	4809      	ldr	r0, [pc, #36]	; (800d530 <sys_timeouts_sleeptime+0x6c>)
 800d50c:	f006 faac 	bl	8013a68 <iprintf>
 800d510:	2000      	movs	r0, #0
 800d512:	f006 fbab 	bl	8013c6c <fflush>
 800d516:	f006 faf0 	bl	8013afa <abort>
    return ret;
 800d51a:	683b      	ldr	r3, [r7, #0]
  }
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}
 800d524:	20000734 	.word	0x20000734
 800d528:	080175f4 	.word	0x080175f4
 800d52c:	080176b8 	.word	0x080176b8
 800d530:	08017658 	.word	0x08017658

0800d534 <link_required>:
#endif

/*
 * An Open on LCP has requested a change from Dead to Establish phase.
 */
void link_required(ppp_pcb *pcb) {
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
    LWIP_UNUSED_ARG(pcb);
}
 800d53c:	bf00      	nop
 800d53e:	370c      	adds	r7, #12
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr

0800d548 <link_terminated>:

/*
 * LCP has terminated the link; go to the Dead phase and take the
 * physical layer down.
 */
void link_terminated(ppp_pcb *pcb) {
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
    if (pcb->phase == PPP_PHASE_DEAD
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d556:	2b00      	cmp	r3, #0
 800d558:	d00a      	beq.n	800d570 <link_terminated+0x28>
#ifdef HAVE_MULTILINK
    || pcb->phase == PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	return;
    new_phase(pcb, PPP_PHASE_DISCONNECT);
 800d55a:	210c      	movs	r1, #12
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f004 fedd 	bl	801231c <new_phase>
	print_link_stats();
#endif /* PPP_STATS_SUPPORT */
    } else
	ppp_notice(("Link terminated."));

    lcp_lowerdown(pcb);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f002 fc30 	bl	800fdc8 <lcp_lowerdown>

    ppp_link_terminated(pcb);
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f004 fec7 	bl	80122fc <ppp_link_terminated>
 800d56e:	e000      	b.n	800d572 <link_terminated+0x2a>
	return;
 800d570:	bf00      	nop
	else
	    mp_bundle_terminated();
    } else
	new_phase(pcb, PPP_PHASE_DEAD);
#endif
}
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <link_down>:

/*
 * LCP has gone down; it will either die or try to re-establish.
 */
void link_down(ppp_pcb *pcb) {
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
#if PPP_NOTIFY
    notify(link_down_notifier, 0);
#endif /* PPP_NOTIFY */

    if (!doing_multilink) {
	upper_layers_down(pcb);
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f000 f80d 	bl	800d5a0 <upper_layers_down>
	if (pcb->phase != PPP_PHASE_DEAD
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d003      	beq.n	800d598 <link_down+0x20>
#ifdef HAVE_MULTILINK
	&& pcb->phase != PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
	)
	    new_phase(pcb, PPP_PHASE_ESTABLISH);
 800d590:	2106      	movs	r1, #6
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f004 fec2 	bl	801231c <new_phase>
    }
    /* XXX if doing_multilink, should do something to stop
       network-layer traffic on the link */
}
 800d598:	bf00      	nop
 800d59a:	3708      	adds	r7, #8
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <upper_layers_down>:

void upper_layers_down(ppp_pcb *pcb) {
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
    int i;
    const struct protent *protp;

    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	60fb      	str	r3, [r7, #12]
 800d5ac:	e01e      	b.n	800d5ec <upper_layers_down+0x4c>
        if (protp->protocol != PPP_LCP && protp->lowerdown != NULL)
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	881b      	ldrh	r3, [r3, #0]
 800d5b2:	f24c 0221 	movw	r2, #49185	; 0xc021
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d007      	beq.n	800d5ca <upper_layers_down+0x2a>
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	695b      	ldr	r3, [r3, #20]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d003      	beq.n	800d5ca <upper_layers_down+0x2a>
	    (*protp->lowerdown)(pcb);
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	695b      	ldr	r3, [r3, #20]
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	4798      	blx	r3
        if (protp->protocol < 0xC000 && protp->close != NULL)
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	881b      	ldrh	r3, [r3, #0]
 800d5ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d5d2:	d208      	bcs.n	800d5e6 <upper_layers_down+0x46>
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	69db      	ldr	r3, [r3, #28]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d004      	beq.n	800d5e6 <upper_layers_down+0x46>
	    (*protp->close)(pcb, "LCP down");
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	69db      	ldr	r3, [r3, #28]
 800d5e0:	490c      	ldr	r1, [pc, #48]	; (800d614 <upper_layers_down+0x74>)
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	4798      	blx	r3
    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	60fb      	str	r3, [r7, #12]
 800d5ec:	4a0a      	ldr	r2, [pc, #40]	; (800d618 <upper_layers_down+0x78>)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5f4:	60bb      	str	r3, [r7, #8]
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1d8      	bne.n	800d5ae <upper_layers_down+0xe>
    }
    pcb->num_np_open = 0;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2200      	movs	r2, #0
 800d600:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    pcb->num_np_up = 0;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2200      	movs	r2, #0
 800d608:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
}
 800d60c:	bf00      	nop
 800d60e:	3710      	adds	r7, #16
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	080176cc 	.word	0x080176cc
 800d618:	08017c04 	.word	0x08017c04

0800d61c <link_established>:

/*
 * The link is established.
 * Proceed to the Dead, Authenticate or Network phase as appropriate.
 */
void link_established(ppp_pcb *pcb) {
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b086      	sub	sp, #24
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
#if PAP_SUPPORT
    lcp_options *wo = &pcb->lcp_wantoptions;
#endif /* PAP_SUPPORT */
    lcp_options *go = &pcb->lcp_gotoptions;
#endif /* PPP_SERVER */
    lcp_options *ho = &pcb->lcp_hisoptions;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	33cc      	adds	r3, #204	; 0xcc
 800d628:	60fb      	str	r3, [r7, #12]

    /*
     * Tell higher-level protocols that LCP is up.
     */
    if (!doing_multilink) {
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800d62a:	2300      	movs	r3, #0
 800d62c:	613b      	str	r3, [r7, #16]
 800d62e:	e010      	b.n	800d652 <link_established+0x36>
	    if (protp->protocol != PPP_LCP
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	881b      	ldrh	r3, [r3, #0]
 800d634:	f24c 0221 	movw	r2, #49185	; 0xc021
 800d638:	4293      	cmp	r3, r2
 800d63a:	d007      	beq.n	800d64c <link_established+0x30>
		&& protp->lowerup != NULL)
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	691b      	ldr	r3, [r3, #16]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d003      	beq.n	800d64c <link_established+0x30>
		(*protp->lowerup)(pcb);
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	691b      	ldr	r3, [r3, #16]
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	4798      	blx	r3
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	3301      	adds	r3, #1
 800d650:	613b      	str	r3, [r7, #16]
 800d652:	4a19      	ldr	r2, [pc, #100]	; (800d6b8 <link_established+0x9c>)
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d65a:	60bb      	str	r3, [r7, #8]
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1e6      	bne.n	800d630 <link_established+0x14>
	    return;
	}
    }
#endif /* PPP_SERVER */

    new_phase(pcb, PPP_PHASE_AUTHENTICATE);
 800d662:	2107      	movs	r1, #7
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f004 fe59 	bl	801231c <new_phase>
    auth = 0;
 800d66a:	2300      	movs	r3, #0
 800d66c:	617b      	str	r3, [r7, #20]
	chap_auth_with_peer(pcb, pcb->settings.user, CHAP_DIGEST(ho->chap_mdtype));
	auth |= CHAP_WITHPEER;
    } else
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    if (ho->neg_upap) {
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	f003 0310 	and.w	r3, r3, #16
 800d676:	b2db      	uxtb	r3, r3
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d00b      	beq.n	800d694 <link_established+0x78>
	upap_authwithpeer(pcb, pcb->settings.user, pcb->settings.passwd);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6859      	ldr	r1, [r3, #4]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	689b      	ldr	r3, [r3, #8]
 800d684:	461a      	mov	r2, r3
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f005 fca8 	bl	8012fdc <upap_authwithpeer>
	auth |= PAP_WITHPEER;
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	f043 0301 	orr.w	r3, r3, #1
 800d692:	617b      	str	r3, [r7, #20]
    } else
#endif /* PAP_SUPPORT */
    {}

    pcb->auth_pending = auth;
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	b29a      	uxth	r2, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->auth_done = 0;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	865a      	strh	r2, [r3, #50]	; 0x32

    if (!auth)
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d102      	bne.n	800d6ae <link_established+0x92>
#endif /* PPP_AUTH_SUPPORT */
	network_phase(pcb);
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f000 f807 	bl	800d6bc <network_phase>
}
 800d6ae:	bf00      	nop
 800d6b0:	3718      	adds	r7, #24
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	08017c04 	.word	0x08017c04

0800d6bc <network_phase>:

/*
 * Proceed to the network phase.
 */
static void network_phase(ppp_pcb *pcb) {
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
	options_from_list(extra_options, 1);
	free_wordlist(extra_options);
	extra_options = 0;
    }
#endif /* PPP_OPTIONS */
    start_networks(pcb);
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 f804 	bl	800d6d2 <start_networks>
}
 800d6ca:	bf00      	nop
 800d6cc:	3708      	adds	r7, #8
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}

0800d6d2 <start_networks>:

void start_networks(ppp_pcb *pcb) {
 800d6d2:	b580      	push	{r7, lr}
 800d6d4:	b082      	sub	sp, #8
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]
#if CCP_SUPPORT || ECP_SUPPORT
    int i;
    const struct protent *protp;
#endif /* CCP_SUPPORT || ECP_SUPPORT */

    new_phase(pcb, PPP_PHASE_NETWORK);
 800d6da:	2109      	movs	r1, #9
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f004 fe1d 	bl	801231c <new_phase>
#endif /* ECP_SUPPORT */
#if MPPE_SUPPORT
        && !pcb->ccp_gotoptions.mppe
#endif /* MPPE_SUPPORT */
        )
	continue_networks(pcb);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 f804 	bl	800d6f0 <continue_networks>
}
 800d6e8:	bf00      	nop
 800d6ea:	3708      	adds	r7, #8
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <continue_networks>:

void continue_networks(ppp_pcb *pcb) {
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
    const struct protent *protp;

    /*
     * Start the "real" network protocols.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	60fb      	str	r3, [r7, #12]
 800d6fc:	e017      	b.n	800d72e <continue_networks+0x3e>
	if (protp->protocol < 0xC000
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	881b      	ldrh	r3, [r3, #0]
 800d702:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d706:	d20f      	bcs.n	800d728 <continue_networks+0x38>
	    && protp->protocol != PPP_CCP
#endif /* CCP_SUPPORT */
#if ECP_SUPPORT
	    && protp->protocol != PPP_ECP
#endif /* ECP_SUPPORT */
	    && protp->open != NULL) {
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	699b      	ldr	r3, [r3, #24]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00b      	beq.n	800d728 <continue_networks+0x38>
	    (*protp->open)(pcb);
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	699b      	ldr	r3, [r3, #24]
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	4798      	blx	r3
	    ++pcb->num_np_open;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800d71e:	3301      	adds	r3, #1
 800d720:	b2da      	uxtb	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	3301      	adds	r3, #1
 800d72c:	60fb      	str	r3, [r7, #12]
 800d72e:	4a0a      	ldr	r2, [pc, #40]	; (800d758 <continue_networks+0x68>)
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d736:	60bb      	str	r3, [r7, #8]
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d1df      	bne.n	800d6fe <continue_networks+0xe>
	}

    if (pcb->num_np_open == 0)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800d744:	2b00      	cmp	r3, #0
 800d746:	d103      	bne.n	800d750 <continue_networks+0x60>
	/* nothing to do */
	lcp_close(pcb, "No network protocols running");
 800d748:	4904      	ldr	r1, [pc, #16]	; (800d75c <continue_networks+0x6c>)
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f002 faa0 	bl	800fc90 <lcp_close>
}
 800d750:	bf00      	nop
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}
 800d758:	08017c04 	.word	0x08017c04
 800d75c:	080176d8 	.word	0x080176d8

0800d760 <auth_withpeer_fail>:
#endif /* PPP_SERVER */

/*
 * We have failed to authenticate ourselves to the peer using `protocol'.
 */
void auth_withpeer_fail(ppp_pcb *pcb, int protocol) {
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]
     * authentication secrets.
     *
     * He'll probably take the link down, and there's not much
     * we can do except wait for that.
     */
    pcb->err_code = PPPERR_AUTHFAIL;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2207      	movs	r2, #7
 800d76e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    lcp_close(pcb, "Failed to authenticate ourselves to peer");
 800d772:	4904      	ldr	r1, [pc, #16]	; (800d784 <auth_withpeer_fail+0x24>)
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f002 fa8b 	bl	800fc90 <lcp_close>
}
 800d77a:	bf00      	nop
 800d77c:	3708      	adds	r7, #8
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	080176f8 	.word	0x080176f8

0800d788 <auth_withpeer_success>:

/*
 * We have successfully authenticated ourselves with the peer using `protocol'.
 */
void auth_withpeer_success(ppp_pcb *pcb, int protocol, int prot_flavor) {
 800d788:	b580      	push	{r7, lr}
 800d78a:	b086      	sub	sp, #24
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	60f8      	str	r0, [r7, #12]
 800d790:	60b9      	str	r1, [r7, #8]
 800d792:	607a      	str	r2, [r7, #4]
    int bit;
    const char *prot = "";
 800d794:	4b17      	ldr	r3, [pc, #92]	; (800d7f4 <auth_withpeer_success+0x6c>)
 800d796:	613b      	str	r3, [r7, #16]
    LWIP_UNUSED_ARG(prot_flavor); /* if CHAP_SUPPORT is disabled */

    switch (protocol) {
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	f24c 0223 	movw	r2, #49187	; 0xc023
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d104      	bne.n	800d7ac <auth_withpeer_success+0x24>
	}
	break;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    case PPP_PAP:
	bit = PAP_WITHPEER;
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	617b      	str	r3, [r7, #20]
	prot = "PAP";
 800d7a6:	4b14      	ldr	r3, [pc, #80]	; (800d7f8 <auth_withpeer_success+0x70>)
 800d7a8:	613b      	str	r3, [r7, #16]
	break;
 800d7aa:	e001      	b.n	800d7b0 <auth_withpeer_success+0x28>
	prot = "EAP";
	break;
#endif /* EAP_SUPPORT */
    default:
	ppp_warn(("auth_withpeer_success: unknown protocol %x", protocol));
	bit = 0;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	617b      	str	r3, [r7, #20]
    }

    ppp_notice(("%s authentication succeeded", prot));

    /* Save the authentication method for later. */
    pcb->auth_done |= bit;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7b4:	b21a      	sxth	r2, r3
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	b21b      	sxth	r3, r3
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	b21b      	sxth	r3, r3
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	865a      	strh	r2, [r3, #50]	; 0x32

    /*
     * If there is no more authentication still being done,
     * proceed to the network (or callback) phase.
     */
    if ((pcb->auth_pending &= ~bit) == 0)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d7c8:	b21a      	sxth	r2, r3
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	b21b      	sxth	r3, r3
 800d7ce:	43db      	mvns	r3, r3
 800d7d0:	b21b      	sxth	r3, r3
 800d7d2:	4013      	ands	r3, r2
 800d7d4:	b21b      	sxth	r3, r3
 800d7d6:	b29a      	uxth	r2, r3
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	861a      	strh	r2, [r3, #48]	; 0x30
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d102      	bne.n	800d7ea <auth_withpeer_success+0x62>
	network_phase(pcb);
 800d7e4:	68f8      	ldr	r0, [r7, #12]
 800d7e6:	f7ff ff69 	bl	800d6bc <network_phase>
}
 800d7ea:	bf00      	nop
 800d7ec:	3718      	adds	r7, #24
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	08017724 	.word	0x08017724
 800d7f8:	08017728 	.word	0x08017728

0800d7fc <np_up>:


/*
 * np_up - a network protocol has come up.
 */
void np_up(ppp_pcb *pcb, int proto) {
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
#if PPP_IDLETIMELIMIT
    int tlim;
#endif /* PPP_IDLETIMELIMIT */
    LWIP_UNUSED_ARG(proto);

    if (pcb->num_np_up == 0) {
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d103      	bne.n	800d818 <np_up+0x1c>
	/*
	 * At this point we consider that the link has come up successfully.
	 */
	new_phase(pcb, PPP_PHASE_RUNNING);
 800d810:	210a      	movs	r1, #10
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f004 fd82 	bl	801231c <new_phase>
	 */
	if (updetach && !nodetach)
	    detach();
#endif /* Unused */
    }
    ++pcb->num_np_up;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800d81e:	3301      	adds	r3, #1
 800d820:	b2da      	uxtb	r2, r3
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
}
 800d828:	bf00      	nop
 800d82a:	3708      	adds	r7, #8
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <np_down>:

/*
 * np_down - a network protocol has gone down.
 */
void np_down(ppp_pcb *pcb, int proto) {
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_up == 0) {
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800d840:	3b01      	subs	r3, #1
 800d842:	b2da      	uxtb	r2, r3
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800d850:	2b00      	cmp	r3, #0
 800d852:	d103      	bne.n	800d85c <np_down+0x2c>
	UNTIMEOUT(connect_time_expired, NULL);
#endif /* PPP_MAXCONNECT */
#ifdef MAXOCTETS
	UNTIMEOUT(check_maxoctets, NULL);
#endif
	new_phase(pcb, PPP_PHASE_NETWORK);
 800d854:	2109      	movs	r1, #9
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f004 fd60 	bl	801231c <new_phase>
    }
}
 800d85c:	bf00      	nop
 800d85e:	3708      	adds	r7, #8
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}

0800d864 <np_finished>:

/*
 * np_finished - a network protocol has finished using the link.
 */
void np_finished(ppp_pcb *pcb, int proto) {
 800d864:	b580      	push	{r7, lr}
 800d866:	b082      	sub	sp, #8
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_open <= 0) {
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800d874:	3b01      	subs	r3, #1
 800d876:	b2da      	uxtb	r2, r3
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800d884:	2b00      	cmp	r3, #0
 800d886:	d103      	bne.n	800d890 <np_finished+0x2c>
	/* no further use for the link: shut up shop. */
	lcp_close(pcb, "No network protocols running");
 800d888:	4903      	ldr	r1, [pc, #12]	; (800d898 <np_finished+0x34>)
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f002 fa00 	bl	800fc90 <lcp_close>
    }
}
 800d890:	bf00      	nop
 800d892:	3708      	adds	r7, #8
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	080176d8 	.word	0x080176d8

0800d89c <fsm_init>:
/*
 * fsm_init - Initialize fsm.
 *
 * Initialize fsm state.
 */
void fsm_init(fsm *f) {
 800d89c:	b480      	push	{r7}
 800d89e:	b085      	sub	sp, #20
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	60fb      	str	r3, [r7, #12]
    f->state = PPP_FSM_INITIAL;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	741a      	strb	r2, [r3, #16]
    f->flags = 0;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	745a      	strb	r2, [r3, #17]
    f->id = 0;				/* XXX Start with random id? */
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	749a      	strb	r2, [r3, #18]
    f->maxnakloops = pcb->settings.fsm_max_nak_loops;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	7c5a      	ldrb	r2, [r3, #17]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	75da      	strb	r2, [r3, #23]
    f->term_reason_len = 0;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	761a      	strb	r2, [r3, #24]
}
 800d8ca:	bf00      	nop
 800d8cc:	3714      	adds	r7, #20
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr

0800d8d6 <fsm_lowerup>:


/*
 * fsm_lowerup - The lower layer is up.
 */
void fsm_lowerup(fsm *f) {
 800d8d6:	b580      	push	{r7, lr}
 800d8d8:	b082      	sub	sp, #8
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	7c1b      	ldrb	r3, [r3, #16]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d002      	beq.n	800d8ec <fsm_lowerup+0x16>
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d004      	beq.n	800d8f4 <fsm_lowerup+0x1e>

    default:
	FSMDEBUG(("%s: Up event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800d8ea:	e015      	b.n	800d918 <fsm_lowerup+0x42>
	f->state = PPP_FSM_CLOSED;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2202      	movs	r2, #2
 800d8f0:	741a      	strb	r2, [r3, #16]
	break;
 800d8f2:	e011      	b.n	800d918 <fsm_lowerup+0x42>
	if( f->flags & OPT_SILENT )
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	7c5b      	ldrb	r3, [r3, #17]
 800d8f8:	f003 0304 	and.w	r3, r3, #4
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d003      	beq.n	800d908 <fsm_lowerup+0x32>
	    f->state = PPP_FSM_STOPPED;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2203      	movs	r2, #3
 800d904:	741a      	strb	r2, [r3, #16]
	break;
 800d906:	e006      	b.n	800d916 <fsm_lowerup+0x40>
	    fsm_sconfreq(f, 0);
 800d908:	2100      	movs	r1, #0
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 fdb2 	bl	800e474 <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2206      	movs	r2, #6
 800d914:	741a      	strb	r2, [r3, #16]
	break;
 800d916:	bf00      	nop
}
 800d918:	bf00      	nop
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <fsm_lowerdown>:
/*
 * fsm_lowerdown - The lower layer is down.
 *
 * Cancel all timeouts and inform upper layers.
 */
void fsm_lowerdown(fsm *f) {
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	7c1b      	ldrb	r3, [r3, #16]
 800d92c:	3b02      	subs	r3, #2
 800d92e:	2b07      	cmp	r3, #7
 800d930:	d843      	bhi.n	800d9ba <fsm_lowerdown+0x9a>
 800d932:	a201      	add	r2, pc, #4	; (adr r2, 800d938 <fsm_lowerdown+0x18>)
 800d934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d938:	0800d959 	.word	0x0800d959
 800d93c:	0800d961 	.word	0x0800d961
 800d940:	0800d97d 	.word	0x0800d97d
 800d944:	0800d98d 	.word	0x0800d98d
 800d948:	0800d98d 	.word	0x0800d98d
 800d94c:	0800d98d 	.word	0x0800d98d
 800d950:	0800d98d 	.word	0x0800d98d
 800d954:	0800d99d 	.word	0x0800d99d
    case PPP_FSM_CLOSED:
	f->state = PPP_FSM_INITIAL;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2200      	movs	r2, #0
 800d95c:	741a      	strb	r2, [r3, #16]
	break;
 800d95e:	e02c      	b.n	800d9ba <fsm_lowerdown+0x9a>

    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_STARTING;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2201      	movs	r2, #1
 800d964:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->starting )
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d023      	beq.n	800d9b8 <fsm_lowerdown+0x98>
	    (*f->callbacks->starting)(f);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	4798      	blx	r3
	break;
 800d97a:	e01d      	b.n	800d9b8 <fsm_lowerdown+0x98>

    case PPP_FSM_CLOSING:
	f->state = PPP_FSM_INITIAL;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	741a      	strb	r2, [r3, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800d982:	6879      	ldr	r1, [r7, #4]
 800d984:	480f      	ldr	r0, [pc, #60]	; (800d9c4 <fsm_lowerdown+0xa4>)
 800d986:	f7ff fd2d 	bl	800d3e4 <sys_untimeout>
	break;
 800d98a:	e016      	b.n	800d9ba <fsm_lowerdown+0x9a>

    case PPP_FSM_STOPPING:
    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	f->state = PPP_FSM_STARTING;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2201      	movs	r2, #1
 800d990:	741a      	strb	r2, [r3, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800d992:	6879      	ldr	r1, [r7, #4]
 800d994:	480b      	ldr	r0, [pc, #44]	; (800d9c4 <fsm_lowerdown+0xa4>)
 800d996:	f7ff fd25 	bl	800d3e4 <sys_untimeout>
	break;
 800d99a:	e00e      	b.n	800d9ba <fsm_lowerdown+0x9a>

    case PPP_FSM_OPENED:
	if( f->callbacks->down )
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	6a1b      	ldr	r3, [r3, #32]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d004      	beq.n	800d9b0 <fsm_lowerdown+0x90>
	    (*f->callbacks->down)(f);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	6a1b      	ldr	r3, [r3, #32]
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	4798      	blx	r3
	f->state = PPP_FSM_STARTING;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	741a      	strb	r2, [r3, #16]
	break;
 800d9b6:	e000      	b.n	800d9ba <fsm_lowerdown+0x9a>
	break;
 800d9b8:	bf00      	nop

    default:
	FSMDEBUG(("%s: Down event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800d9ba:	bf00      	nop
 800d9bc:	3708      	adds	r7, #8
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	0800dbf1 	.word	0x0800dbf1

0800d9c8 <fsm_open>:


/*
 * fsm_open - Link is allowed to come up.
 */
void fsm_open(fsm *f) {
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	7c1b      	ldrb	r3, [r3, #16]
 800d9d4:	2b09      	cmp	r3, #9
 800d9d6:	d847      	bhi.n	800da68 <fsm_open+0xa0>
 800d9d8:	a201      	add	r2, pc, #4	; (adr r2, 800d9e0 <fsm_open+0x18>)
 800d9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9de:	bf00      	nop
 800d9e0:	0800da09 	.word	0x0800da09
 800d9e4:	0800da69 	.word	0x0800da69
 800d9e8:	0800da25 	.word	0x0800da25
 800d9ec:	0800da4f 	.word	0x0800da4f
 800d9f0:	0800da49 	.word	0x0800da49
 800d9f4:	0800da69 	.word	0x0800da69
 800d9f8:	0800da69 	.word	0x0800da69
 800d9fc:	0800da69 	.word	0x0800da69
 800da00:	0800da69 	.word	0x0800da69
 800da04:	0800da4f 	.word	0x0800da4f
    case PPP_FSM_INITIAL:
	f->state = PPP_FSM_STARTING;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2201      	movs	r2, #1
 800da0c:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->starting )
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da14:	2b00      	cmp	r3, #0
 800da16:	d029      	beq.n	800da6c <fsm_open+0xa4>
	    (*f->callbacks->starting)(f);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	4798      	blx	r3
	break;
 800da22:	e023      	b.n	800da6c <fsm_open+0xa4>

    case PPP_FSM_CLOSED:
	if( f->flags & OPT_SILENT )
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	7c5b      	ldrb	r3, [r3, #17]
 800da28:	f003 0304 	and.w	r3, r3, #4
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d003      	beq.n	800da38 <fsm_open+0x70>
	    f->state = PPP_FSM_STOPPED;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2203      	movs	r2, #3
 800da34:	741a      	strb	r2, [r3, #16]
	else {
	    /* Send an initial configure-request */
	    fsm_sconfreq(f, 0);
	    f->state = PPP_FSM_REQSENT;
	}
	break;
 800da36:	e01c      	b.n	800da72 <fsm_open+0xaa>
	    fsm_sconfreq(f, 0);
 800da38:	2100      	movs	r1, #0
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 fd1a 	bl	800e474 <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2206      	movs	r2, #6
 800da44:	741a      	strb	r2, [r3, #16]
	break;
 800da46:	e014      	b.n	800da72 <fsm_open+0xaa>

    case PPP_FSM_CLOSING:
	f->state = PPP_FSM_STOPPING;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2205      	movs	r2, #5
 800da4c:	741a      	strb	r2, [r3, #16]
	/* fall through */
	/* no break */
    case PPP_FSM_STOPPED:
    case PPP_FSM_OPENED:
	if( f->flags & OPT_RESTART ){
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	7c5b      	ldrb	r3, [r3, #17]
 800da52:	f003 0302 	and.w	r3, r3, #2
 800da56:	2b00      	cmp	r3, #0
 800da58:	d00a      	beq.n	800da70 <fsm_open+0xa8>
	    fsm_lowerdown(f);
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f7ff ff60 	bl	800d920 <fsm_lowerdown>
	    fsm_lowerup(f);
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f7ff ff38 	bl	800d8d6 <fsm_lowerup>
	}
	break;
 800da66:	e003      	b.n	800da70 <fsm_open+0xa8>
    default:
	break;
 800da68:	bf00      	nop
 800da6a:	e002      	b.n	800da72 <fsm_open+0xaa>
	break;
 800da6c:	bf00      	nop
 800da6e:	e000      	b.n	800da72 <fsm_open+0xaa>
	break;
 800da70:	bf00      	nop
    }
}
 800da72:	bf00      	nop
 800da74:	3708      	adds	r7, #8
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop

0800da7c <terminate_layer>:
 * terminate_layer - Start process of shutting down the FSM
 *
 * Cancel any timeout running, notify upper layers we're done, and
 * send a terminate-request message as configured.
 */
static void terminate_layer(fsm *f, int nextstate) {
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b086      	sub	sp, #24
 800da80:	af02      	add	r7, sp, #8
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	60fb      	str	r3, [r7, #12]

    if( f->state != PPP_FSM_OPENED )
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	7c1b      	ldrb	r3, [r3, #16]
 800da90:	2b09      	cmp	r3, #9
 800da92:	d004      	beq.n	800da9e <terminate_layer+0x22>
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800da94:	6879      	ldr	r1, [r7, #4]
 800da96:	482f      	ldr	r0, [pc, #188]	; (800db54 <terminate_layer+0xd8>)
 800da98:	f7ff fca4 	bl	800d3e4 <sys_untimeout>
 800da9c:	e009      	b.n	800dab2 <terminate_layer+0x36>
    else if( f->callbacks->down )
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	6a1b      	ldr	r3, [r3, #32]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d004      	beq.n	800dab2 <terminate_layer+0x36>
	(*f->callbacks->down)(f);	/* Inform upper layers we're down */
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	6a1b      	ldr	r3, [r3, #32]
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	4798      	blx	r3

    /* Init restart counter and send Terminate-Request */
    f->retransmits = pcb->settings.fsm_max_term_transmits;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	7c1a      	ldrb	r2, [r3, #16]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	751a      	strb	r2, [r3, #20]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	7c9b      	ldrb	r3, [r3, #18]
 800dabe:	3301      	adds	r3, #1
 800dac0:	b2da      	uxtb	r2, r3
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	749a      	strb	r2, [r3, #18]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	7c9a      	ldrb	r2, [r3, #18]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	74da      	strb	r2, [r3, #19]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	7cda      	ldrb	r2, [r3, #19]
	      (const u_char *) f->term_reason, f->term_reason_len);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6899      	ldr	r1, [r3, #8]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	7e1b      	ldrb	r3, [r3, #24]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800dada:	9300      	str	r3, [sp, #0]
 800dadc:	460b      	mov	r3, r1
 800dade:	2105      	movs	r1, #5
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f000 fdb5 	bl	800e650 <fsm_sdata>

    if (f->retransmits == 0) {
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	7d1b      	ldrb	r3, [r3, #20]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d112      	bne.n	800db14 <terminate_layer+0x98>
	/*
	 * User asked for no terminate requests at all; just close it.
	 * We've already fired off one Terminate-Request just to be nice
	 * to the peer, but we're not going to wait for a reply.
	 */
	f->state = nextstate == PPP_FSM_CLOSING ? PPP_FSM_CLOSED : PPP_FSM_STOPPED;
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	2b04      	cmp	r3, #4
 800daf2:	d101      	bne.n	800daf8 <terminate_layer+0x7c>
 800daf4:	2202      	movs	r2, #2
 800daf6:	e000      	b.n	800dafa <terminate_layer+0x7e>
 800daf8:	2203      	movs	r2, #3
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db04:	2b00      	cmp	r3, #0
 800db06:	d020      	beq.n	800db4a <terminate_layer+0xce>
	    (*f->callbacks->finished)(f);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	4798      	blx	r3
	return;
 800db12:	e01a      	b.n	800db4a <terminate_layer+0xce>
    }

    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800db14:	6879      	ldr	r1, [r7, #4]
 800db16:	480f      	ldr	r0, [pc, #60]	; (800db54 <terminate_layer+0xd8>)
 800db18:	f7ff fc64 	bl	800d3e4 <sys_untimeout>
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	7b9b      	ldrb	r3, [r3, #14]
 800db20:	461a      	mov	r2, r3
 800db22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800db26:	fb03 f302 	mul.w	r3, r3, r2
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	4909      	ldr	r1, [pc, #36]	; (800db54 <terminate_layer+0xd8>)
 800db2e:	4618      	mov	r0, r3
 800db30:	f7ff fc2c 	bl	800d38c <sys_timeout>
    --f->retransmits;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	7d1b      	ldrb	r3, [r3, #20]
 800db38:	3b01      	subs	r3, #1
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	751a      	strb	r2, [r3, #20]

    f->state = nextstate;
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	b2da      	uxtb	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	741a      	strb	r2, [r3, #16]
 800db48:	e000      	b.n	800db4c <terminate_layer+0xd0>
	return;
 800db4a:	bf00      	nop
}
 800db4c:	3710      	adds	r7, #16
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	0800dbf1 	.word	0x0800dbf1

0800db58 <fsm_close>:
 * fsm_close - Start closing connection.
 *
 * Cancel timeouts and either initiate close or possibly go directly to
 * the PPP_FSM_CLOSED state.
 */
void fsm_close(fsm *f, const char *reason) {
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
    f->term_reason = reason;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	683a      	ldr	r2, [r7, #0]
 800db66:	609a      	str	r2, [r3, #8]
    f->term_reason_len = (reason == NULL? 0: (u8_t)LWIP_MIN(strlen(reason), 0xFF) );
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d00d      	beq.n	800db8a <fsm_close+0x32>
 800db6e:	6838      	ldr	r0, [r7, #0]
 800db70:	f7f2 fb38 	bl	80001e4 <strlen>
 800db74:	4603      	mov	r3, r0
 800db76:	2bfe      	cmp	r3, #254	; 0xfe
 800db78:	d805      	bhi.n	800db86 <fsm_close+0x2e>
 800db7a:	6838      	ldr	r0, [r7, #0]
 800db7c:	f7f2 fb32 	bl	80001e4 <strlen>
 800db80:	4603      	mov	r3, r0
 800db82:	b2db      	uxtb	r3, r3
 800db84:	e002      	b.n	800db8c <fsm_close+0x34>
 800db86:	23ff      	movs	r3, #255	; 0xff
 800db88:	e000      	b.n	800db8c <fsm_close+0x34>
 800db8a:	2300      	movs	r3, #0
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	7613      	strb	r3, [r2, #24]
    switch( f->state ){
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	7c1b      	ldrb	r3, [r3, #16]
 800db94:	3b01      	subs	r3, #1
 800db96:	2b08      	cmp	r3, #8
 800db98:	d825      	bhi.n	800dbe6 <fsm_close+0x8e>
 800db9a:	a201      	add	r2, pc, #4	; (adr r2, 800dba0 <fsm_close+0x48>)
 800db9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dba0:	0800dbc5 	.word	0x0800dbc5
 800dba4:	0800dbe7 	.word	0x0800dbe7
 800dba8:	0800dbcd 	.word	0x0800dbcd
 800dbac:	0800dbe7 	.word	0x0800dbe7
 800dbb0:	0800dbd5 	.word	0x0800dbd5
 800dbb4:	0800dbdd 	.word	0x0800dbdd
 800dbb8:	0800dbdd 	.word	0x0800dbdd
 800dbbc:	0800dbdd 	.word	0x0800dbdd
 800dbc0:	0800dbdd 	.word	0x0800dbdd
    case PPP_FSM_STARTING:
	f->state = PPP_FSM_INITIAL;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	741a      	strb	r2, [r3, #16]
	break;
 800dbca:	e00d      	b.n	800dbe8 <fsm_close+0x90>
    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_CLOSED;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2202      	movs	r2, #2
 800dbd0:	741a      	strb	r2, [r3, #16]
	break;
 800dbd2:	e009      	b.n	800dbe8 <fsm_close+0x90>
    case PPP_FSM_STOPPING:
	f->state = PPP_FSM_CLOSING;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2204      	movs	r2, #4
 800dbd8:	741a      	strb	r2, [r3, #16]
	break;
 800dbda:	e005      	b.n	800dbe8 <fsm_close+0x90>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
    case PPP_FSM_OPENED:
	terminate_layer(f, PPP_FSM_CLOSING);
 800dbdc:	2104      	movs	r1, #4
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f7ff ff4c 	bl	800da7c <terminate_layer>
	break;
 800dbe4:	e000      	b.n	800dbe8 <fsm_close+0x90>
    default:
	break;
 800dbe6:	bf00      	nop
    }
}
 800dbe8:	bf00      	nop
 800dbea:	3708      	adds	r7, #8
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <fsm_timeout>:


/*
 * fsm_timeout - Timeout expired.
 */
static void fsm_timeout(void *arg) {
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b086      	sub	sp, #24
 800dbf4:	af02      	add	r7, sp, #8
 800dbf6:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm *) arg;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	60fb      	str	r3, [r7, #12]
    ppp_pcb *pcb = f->pcb;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	60bb      	str	r3, [r7, #8]

    switch (f->state) {
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	7c1b      	ldrb	r3, [r3, #16]
 800dc06:	3b04      	subs	r3, #4
 800dc08:	2b04      	cmp	r3, #4
 800dc0a:	f200 8083 	bhi.w	800dd14 <fsm_timeout+0x124>
 800dc0e:	a201      	add	r2, pc, #4	; (adr r2, 800dc14 <fsm_timeout+0x24>)
 800dc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc14:	0800dc29 	.word	0x0800dc29
 800dc18:	0800dc29 	.word	0x0800dc29
 800dc1c:	0800dcb3 	.word	0x0800dcb3
 800dc20:	0800dcb3 	.word	0x0800dcb3
 800dc24:	0800dcb3 	.word	0x0800dcb3
    case PPP_FSM_CLOSING:
    case PPP_FSM_STOPPING:
	if( f->retransmits <= 0 ){
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	7d1b      	ldrb	r3, [r3, #20]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d113      	bne.n	800dc58 <fsm_timeout+0x68>
	    /*
	     * We've waited for an ack long enough.  Peer probably heard us.
	     */
	    f->state = (f->state == PPP_FSM_CLOSING)? PPP_FSM_CLOSED: PPP_FSM_STOPPED;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	7c1b      	ldrb	r3, [r3, #16]
 800dc34:	2b04      	cmp	r3, #4
 800dc36:	d101      	bne.n	800dc3c <fsm_timeout+0x4c>
 800dc38:	2202      	movs	r2, #2
 800dc3a:	e000      	b.n	800dc3e <fsm_timeout+0x4e>
 800dc3c:	2203      	movs	r2, #3
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	741a      	strb	r2, [r3, #16]
	    if( f->callbacks->finished )
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d060      	beq.n	800dd0e <fsm_timeout+0x11e>
		(*f->callbacks->finished)(f);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc52:	68f8      	ldr	r0, [r7, #12]
 800dc54:	4798      	blx	r3
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
		      (const u_char *) f->term_reason, f->term_reason_len);
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
	    --f->retransmits;
	}
	break;
 800dc56:	e05a      	b.n	800dd0e <fsm_timeout+0x11e>
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	7c9b      	ldrb	r3, [r3, #18]
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	b2da      	uxtb	r2, r3
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	749a      	strb	r2, [r3, #18]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	7c9a      	ldrb	r2, [r3, #18]
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	74da      	strb	r2, [r3, #19]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	7cda      	ldrb	r2, [r3, #19]
		      (const u_char *) f->term_reason, f->term_reason_len);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6899      	ldr	r1, [r3, #8]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	7e1b      	ldrb	r3, [r3, #24]
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800dc78:	9300      	str	r3, [sp, #0]
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	2105      	movs	r1, #5
 800dc7e:	68f8      	ldr	r0, [r7, #12]
 800dc80:	f000 fce6 	bl	800e650 <fsm_sdata>
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800dc84:	68f9      	ldr	r1, [r7, #12]
 800dc86:	4825      	ldr	r0, [pc, #148]	; (800dd1c <fsm_timeout+0x12c>)
 800dc88:	f7ff fbac 	bl	800d3e4 <sys_untimeout>
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	7b9b      	ldrb	r3, [r3, #14]
 800dc90:	461a      	mov	r2, r3
 800dc92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dc96:	fb03 f302 	mul.w	r3, r3, r2
 800dc9a:	68fa      	ldr	r2, [r7, #12]
 800dc9c:	491f      	ldr	r1, [pc, #124]	; (800dd1c <fsm_timeout+0x12c>)
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7ff fb74 	bl	800d38c <sys_timeout>
	    --f->retransmits;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	7d1b      	ldrb	r3, [r3, #20]
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	b2da      	uxtb	r2, r3
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	751a      	strb	r2, [r3, #20]
	break;
 800dcb0:	e02d      	b.n	800dd0e <fsm_timeout+0x11e>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	if (f->retransmits <= 0) {
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	7d1b      	ldrb	r3, [r3, #20]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d113      	bne.n	800dce2 <fsm_timeout+0xf2>
	    ppp_warn(("%s: timeout sending Config-Requests", PROTO_NAME(f)));
	    f->state = PPP_FSM_STOPPED;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2203      	movs	r2, #3
 800dcbe:	741a      	strb	r2, [r3, #16]
	    if( (f->flags & OPT_PASSIVE) == 0 && f->callbacks->finished )
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	7c5b      	ldrb	r3, [r3, #17]
 800dcc4:	f003 0301 	and.w	r3, r3, #1
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d122      	bne.n	800dd12 <fsm_timeout+0x122>
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d01d      	beq.n	800dd12 <fsm_timeout+0x122>
		(*f->callbacks->finished)(f);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcdc:	68f8      	ldr	r0, [r7, #12]
 800dcde:	4798      	blx	r3
		(*f->callbacks->retransmit)(f);
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
	    if( f->state == PPP_FSM_ACKRCVD )
		f->state = PPP_FSM_REQSENT;
	}
	break;
 800dce0:	e017      	b.n	800dd12 <fsm_timeout+0x122>
	    if (f->callbacks->retransmit)
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d004      	beq.n	800dcf6 <fsm_timeout+0x106>
		(*f->callbacks->retransmit)(f);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	4798      	blx	r3
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
 800dcf6:	2101      	movs	r1, #1
 800dcf8:	68f8      	ldr	r0, [r7, #12]
 800dcfa:	f000 fbbb 	bl	800e474 <fsm_sconfreq>
	    if( f->state == PPP_FSM_ACKRCVD )
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	7c1b      	ldrb	r3, [r3, #16]
 800dd02:	2b07      	cmp	r3, #7
 800dd04:	d105      	bne.n	800dd12 <fsm_timeout+0x122>
		f->state = PPP_FSM_REQSENT;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	2206      	movs	r2, #6
 800dd0a:	741a      	strb	r2, [r3, #16]
	break;
 800dd0c:	e001      	b.n	800dd12 <fsm_timeout+0x122>
	break;
 800dd0e:	bf00      	nop
 800dd10:	e000      	b.n	800dd14 <fsm_timeout+0x124>
	break;
 800dd12:	bf00      	nop

    default:
	FSMDEBUG(("%s: Timeout event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800dd14:	bf00      	nop
 800dd16:	3710      	adds	r7, #16
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	0800dbf1 	.word	0x0800dbf1

0800dd20 <fsm_input>:


/*
 * fsm_input - Input packet.
 */
void fsm_input(fsm *f, u_char *inpacket, int l) {
 800dd20:	b590      	push	{r4, r7, lr}
 800dd22:	b08b      	sub	sp, #44	; 0x2c
 800dd24:	af02      	add	r7, sp, #8
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	607a      	str	r2, [r7, #4]

    /*
     * Parse header (code, id and length).
     * If packet too short, drop it.
     */
    inp = inpacket;
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	61fb      	str	r3, [r7, #28]
    if (l < HEADERLEN) {
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2b03      	cmp	r3, #3
 800dd34:	f340 808c 	ble.w	800de50 <fsm_input+0x130>
	FSMDEBUG(("fsm_input(%x): Rcvd short header.", f->protocol));
	return;
    }
    GETCHAR(code, inp);
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	1c5a      	adds	r2, r3, #1
 800dd3c:	61fa      	str	r2, [r7, #28]
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	76fb      	strb	r3, [r7, #27]
    GETCHAR(id, inp);
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	1c5a      	adds	r2, r3, #1
 800dd46:	61fa      	str	r2, [r7, #28]
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	76bb      	strb	r3, [r7, #26]
    GETSHORT(len, inp);
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	1c5a      	adds	r2, r3, #1
 800dd50:	61fa      	str	r2, [r7, #28]
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	021b      	lsls	r3, r3, #8
 800dd56:	617b      	str	r3, [r7, #20]
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	1c5a      	adds	r2, r3, #1
 800dd5c:	61fa      	str	r2, [r7, #28]
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	461a      	mov	r2, r3
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	4313      	orrs	r3, r2
 800dd66:	617b      	str	r3, [r7, #20]
    if (len < HEADERLEN) {
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	2b03      	cmp	r3, #3
 800dd6c:	dd72      	ble.n	800de54 <fsm_input+0x134>
	FSMDEBUG(("fsm_input(%x): Rcvd illegal length.", f->protocol));
	return;
    }
    if (len > l) {
 800dd6e:	697a      	ldr	r2, [r7, #20]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	429a      	cmp	r2, r3
 800dd74:	dc70      	bgt.n	800de58 <fsm_input+0x138>
	FSMDEBUG(("fsm_input(%x): Rcvd short packet.", f->protocol));
	return;
    }
    len -= HEADERLEN;		/* subtract header length */
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	3b04      	subs	r3, #4
 800dd7a:	617b      	str	r3, [r7, #20]

    if( f->state == PPP_FSM_INITIAL || f->state == PPP_FSM_STARTING ){
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	7c1b      	ldrb	r3, [r3, #16]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d06b      	beq.n	800de5c <fsm_input+0x13c>
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	7c1b      	ldrb	r3, [r3, #16]
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d067      	beq.n	800de5c <fsm_input+0x13c>
    }

    /*
     * Action depends on code.
     */
    switch (code) {
 800dd8c:	7efb      	ldrb	r3, [r7, #27]
 800dd8e:	3b01      	subs	r3, #1
 800dd90:	2b06      	cmp	r3, #6
 800dd92:	d839      	bhi.n	800de08 <fsm_input+0xe8>
 800dd94:	a201      	add	r2, pc, #4	; (adr r2, 800dd9c <fsm_input+0x7c>)
 800dd96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd9a:	bf00      	nop
 800dd9c:	0800ddb9 	.word	0x0800ddb9
 800dda0:	0800ddc7 	.word	0x0800ddc7
 800dda4:	0800ddd5 	.word	0x0800ddd5
 800dda8:	0800ddd5 	.word	0x0800ddd5
 800ddac:	0800dde7 	.word	0x0800dde7
 800ddb0:	0800ddf5 	.word	0x0800ddf5
 800ddb4:	0800ddfd 	.word	0x0800ddfd
    case CONFREQ:
	fsm_rconfreq(f, id, inp, len);
 800ddb8:	7eb9      	ldrb	r1, [r7, #26]
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	69fa      	ldr	r2, [r7, #28]
 800ddbe:	68f8      	ldr	r0, [r7, #12]
 800ddc0:	f000 f852 	bl	800de68 <fsm_rconfreq>
	break;
 800ddc4:	e04d      	b.n	800de62 <fsm_input+0x142>
    
    case CONFACK:
	fsm_rconfack(f, id, inp, len);
 800ddc6:	7eb9      	ldrb	r1, [r7, #26]
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	69fa      	ldr	r2, [r7, #28]
 800ddcc:	68f8      	ldr	r0, [r7, #12]
 800ddce:	f000 f8f1 	bl	800dfb4 <fsm_rconfack>
	break;
 800ddd2:	e046      	b.n	800de62 <fsm_input+0x142>
    
    case CONFNAK:
    case CONFREJ:
	fsm_rconfnakrej(f, code, id, inp, len);
 800ddd4:	7ef9      	ldrb	r1, [r7, #27]
 800ddd6:	7eba      	ldrb	r2, [r7, #26]
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	9300      	str	r3, [sp, #0]
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	68f8      	ldr	r0, [r7, #12]
 800dde0:	f000 f988 	bl	800e0f4 <fsm_rconfnakrej>
	break;
 800dde4:	e03d      	b.n	800de62 <fsm_input+0x142>
    
    case TERMREQ:
	fsm_rtermreq(f, id, inp, len);
 800dde6:	7eb9      	ldrb	r1, [r7, #26]
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	69fa      	ldr	r2, [r7, #28]
 800ddec:	68f8      	ldr	r0, [r7, #12]
 800ddee:	f000 fa2b 	bl	800e248 <fsm_rtermreq>
	break;
 800ddf2:	e036      	b.n	800de62 <fsm_input+0x142>
    
    case TERMACK:
	fsm_rtermack(f);
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	f000 fa6f 	bl	800e2d8 <fsm_rtermack>
	break;
 800ddfa:	e032      	b.n	800de62 <fsm_input+0x142>
    
    case CODEREJ:
	fsm_rcoderej(f, inp, len);
 800ddfc:	697a      	ldr	r2, [r7, #20]
 800ddfe:	69f9      	ldr	r1, [r7, #28]
 800de00:	68f8      	ldr	r0, [r7, #12]
 800de02:	f000 fac7 	bl	800e394 <fsm_rcoderej>
	break;
 800de06:	e02c      	b.n	800de62 <fsm_input+0x142>
    
    default:
	if( !f->callbacks->extcode
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d00c      	beq.n	800de2c <fsm_input+0x10c>
	   || !(*f->callbacks->extcode)(f, code, id, inp, len) )
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800de18:	7ef9      	ldrb	r1, [r7, #27]
 800de1a:	7eba      	ldrb	r2, [r7, #26]
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	9300      	str	r3, [sp, #0]
 800de20:	69fb      	ldr	r3, [r7, #28]
 800de22:	68f8      	ldr	r0, [r7, #12]
 800de24:	47a0      	blx	r4
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d119      	bne.n	800de60 <fsm_input+0x140>
	    fsm_sdata(f, CODEREJ, ++f->id, inpacket, len + HEADERLEN);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	7c9b      	ldrb	r3, [r3, #18]
 800de30:	3301      	adds	r3, #1
 800de32:	b2da      	uxtb	r2, r3
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	749a      	strb	r2, [r3, #18]
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	7c9a      	ldrb	r2, [r3, #18]
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	3304      	adds	r3, #4
 800de40:	9300      	str	r3, [sp, #0]
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	2107      	movs	r1, #7
 800de46:	68f8      	ldr	r0, [r7, #12]
 800de48:	f000 fc02 	bl	800e650 <fsm_sdata>
	break;
 800de4c:	bf00      	nop
 800de4e:	e007      	b.n	800de60 <fsm_input+0x140>
	return;
 800de50:	bf00      	nop
 800de52:	e006      	b.n	800de62 <fsm_input+0x142>
	return;
 800de54:	bf00      	nop
 800de56:	e004      	b.n	800de62 <fsm_input+0x142>
	return;
 800de58:	bf00      	nop
 800de5a:	e002      	b.n	800de62 <fsm_input+0x142>
	return;
 800de5c:	bf00      	nop
 800de5e:	e000      	b.n	800de62 <fsm_input+0x142>
	break;
 800de60:	bf00      	nop
    }
}
 800de62:	3724      	adds	r7, #36	; 0x24
 800de64:	46bd      	mov	sp, r7
 800de66:	bd90      	pop	{r4, r7, pc}

0800de68 <fsm_rconfreq>:


/*
 * fsm_rconfreq - Receive Configure-Request.
 */
static void fsm_rconfreq(fsm *f, u_char id, u_char *inp, int len) {
 800de68:	b590      	push	{r4, r7, lr}
 800de6a:	b089      	sub	sp, #36	; 0x24
 800de6c:	af02      	add	r7, sp, #8
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	607a      	str	r2, [r7, #4]
 800de72:	603b      	str	r3, [r7, #0]
 800de74:	460b      	mov	r3, r1
 800de76:	72fb      	strb	r3, [r7, #11]
    int code, reject_if_disagree;

    switch( f->state ){
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	7c1b      	ldrb	r3, [r3, #16]
 800de7c:	3b02      	subs	r3, #2
 800de7e:	2b07      	cmp	r3, #7
 800de80:	d835      	bhi.n	800deee <fsm_rconfreq+0x86>
 800de82:	a201      	add	r2, pc, #4	; (adr r2, 800de88 <fsm_rconfreq+0x20>)
 800de84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de88:	0800dea9 	.word	0x0800dea9
 800de8c:	0800dedf 	.word	0x0800dedf
 800de90:	0800dfa7 	.word	0x0800dfa7
 800de94:	0800dfa7 	.word	0x0800dfa7
 800de98:	0800deef 	.word	0x0800deef
 800de9c:	0800deef 	.word	0x0800deef
 800dea0:	0800deef 	.word	0x0800deef
 800dea4:	0800debb 	.word	0x0800debb
    case PPP_FSM_CLOSED:
	/* Go away, we're closed */
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800dea8:	7afa      	ldrb	r2, [r7, #11]
 800deaa:	2300      	movs	r3, #0
 800deac:	9300      	str	r3, [sp, #0]
 800deae:	2300      	movs	r3, #0
 800deb0:	2106      	movs	r1, #6
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f000 fbcc 	bl	800e650 <fsm_sdata>
	return;
 800deb8:	e076      	b.n	800dfa8 <fsm_rconfreq+0x140>
    case PPP_FSM_STOPPING:
	return;

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if( f->callbacks->down )
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	6a1b      	ldr	r3, [r3, #32]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d004      	beq.n	800dece <fsm_rconfreq+0x66>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	6a1b      	ldr	r3, [r3, #32]
 800deca:	68f8      	ldr	r0, [r7, #12]
 800decc:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800dece:	2100      	movs	r1, #0
 800ded0:	68f8      	ldr	r0, [r7, #12]
 800ded2:	f000 facf 	bl	800e474 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2206      	movs	r2, #6
 800deda:	741a      	strb	r2, [r3, #16]
	break;
 800dedc:	e008      	b.n	800def0 <fsm_rconfreq+0x88>

    case PPP_FSM_STOPPED:
	/* Negotiation started by our peer */
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800dede:	2100      	movs	r1, #0
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f000 fac7 	bl	800e474 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2206      	movs	r2, #6
 800deea:	741a      	strb	r2, [r3, #16]
	break;
 800deec:	e000      	b.n	800def0 <fsm_rconfreq+0x88>
    default:
	break;
 800deee:	bf00      	nop

    /*
     * Pass the requested configuration options
     * to protocol-specific code for checking.
     */
    if (f->callbacks->reqci){		/* Check CI */
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	699b      	ldr	r3, [r3, #24]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d013      	beq.n	800df22 <fsm_rconfreq+0xba>
	reject_if_disagree = (f->nakloops >= f->maxnakloops);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	7d5a      	ldrb	r2, [r3, #21]
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	7ddb      	ldrb	r3, [r3, #23]
 800df02:	429a      	cmp	r2, r3
 800df04:	bf2c      	ite	cs
 800df06:	2301      	movcs	r3, #1
 800df08:	2300      	movcc	r3, #0
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	613b      	str	r3, [r7, #16]
	code = (*f->callbacks->reqci)(f, inp, &len, reject_if_disagree);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	699c      	ldr	r4, [r3, #24]
 800df14:	463a      	mov	r2, r7
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	6879      	ldr	r1, [r7, #4]
 800df1a:	68f8      	ldr	r0, [r7, #12]
 800df1c:	47a0      	blx	r4
 800df1e:	6178      	str	r0, [r7, #20]
 800df20:	e007      	b.n	800df32 <fsm_rconfreq+0xca>
    } else if (len)
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d002      	beq.n	800df2e <fsm_rconfreq+0xc6>
	code = CONFREJ;			/* Reject all CI */
 800df28:	2304      	movs	r3, #4
 800df2a:	617b      	str	r3, [r7, #20]
 800df2c:	e001      	b.n	800df32 <fsm_rconfreq+0xca>
    else
	code = CONFACK;
 800df2e:	2302      	movs	r3, #2
 800df30:	617b      	str	r3, [r7, #20]

    /* send the Ack, Nak or Rej to the peer */
    fsm_sdata(f, code, id, inp, len);
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	b2d9      	uxtb	r1, r3
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	7afa      	ldrb	r2, [r7, #11]
 800df3a:	9300      	str	r3, [sp, #0]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	68f8      	ldr	r0, [r7, #12]
 800df40:	f000 fb86 	bl	800e650 <fsm_sdata>

    if (code == CONFACK) {
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	2b02      	cmp	r3, #2
 800df48:	d11c      	bne.n	800df84 <fsm_rconfreq+0x11c>
	if (f->state == PPP_FSM_ACKRCVD) {
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	7c1b      	ldrb	r3, [r3, #16]
 800df4e:	2b07      	cmp	r3, #7
 800df50:	d111      	bne.n	800df76 <fsm_rconfreq+0x10e>
	    UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800df52:	68f9      	ldr	r1, [r7, #12]
 800df54:	4816      	ldr	r0, [pc, #88]	; (800dfb0 <fsm_rconfreq+0x148>)
 800df56:	f7ff fa45 	bl	800d3e4 <sys_untimeout>
	    f->state = PPP_FSM_OPENED;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	2209      	movs	r2, #9
 800df5e:	741a      	strb	r2, [r3, #16]
	    if (f->callbacks->up)
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	69db      	ldr	r3, [r3, #28]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d008      	beq.n	800df7c <fsm_rconfreq+0x114>
		(*f->callbacks->up)(f);	/* Inform upper layers */
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	69db      	ldr	r3, [r3, #28]
 800df70:	68f8      	ldr	r0, [r7, #12]
 800df72:	4798      	blx	r3
 800df74:	e002      	b.n	800df7c <fsm_rconfreq+0x114>
	} else
	    f->state = PPP_FSM_ACKSENT;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2208      	movs	r2, #8
 800df7a:	741a      	strb	r2, [r3, #16]
	f->nakloops = 0;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2200      	movs	r2, #0
 800df80:	755a      	strb	r2, [r3, #21]
 800df82:	e011      	b.n	800dfa8 <fsm_rconfreq+0x140>

    } else {
	/* we sent CONFACK or CONFREJ */
	if (f->state != PPP_FSM_ACKRCVD)
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	7c1b      	ldrb	r3, [r3, #16]
 800df88:	2b07      	cmp	r3, #7
 800df8a:	d002      	beq.n	800df92 <fsm_rconfreq+0x12a>
	    f->state = PPP_FSM_REQSENT;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2206      	movs	r2, #6
 800df90:	741a      	strb	r2, [r3, #16]
	if( code == CONFNAK )
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	2b03      	cmp	r3, #3
 800df96:	d107      	bne.n	800dfa8 <fsm_rconfreq+0x140>
	    ++f->nakloops;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	7d5b      	ldrb	r3, [r3, #21]
 800df9c:	3301      	adds	r3, #1
 800df9e:	b2da      	uxtb	r2, r3
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	755a      	strb	r2, [r3, #21]
 800dfa4:	e000      	b.n	800dfa8 <fsm_rconfreq+0x140>
	return;
 800dfa6:	bf00      	nop
    }
}
 800dfa8:	371c      	adds	r7, #28
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd90      	pop	{r4, r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	0800dbf1 	.word	0x0800dbf1

0800dfb4 <fsm_rconfack>:


/*
 * fsm_rconfack - Receive Configure-Ack.
 */
static void fsm_rconfack(fsm *f, int id, u_char *inp, int len) {
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b088      	sub	sp, #32
 800dfb8:	af02      	add	r7, sp, #8
 800dfba:	60f8      	str	r0, [r7, #12]
 800dfbc:	60b9      	str	r1, [r7, #8]
 800dfbe:	607a      	str	r2, [r7, #4]
 800dfc0:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	617b      	str	r3, [r7, #20]

    if (id != f->reqid || f->seen_ack)		/* Expected id? */
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	7cdb      	ldrb	r3, [r3, #19]
 800dfcc:	461a      	mov	r2, r3
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	f040 8083 	bne.w	800e0dc <fsm_rconfack+0x128>
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	7b1b      	ldrb	r3, [r3, #12]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d17e      	bne.n	800e0dc <fsm_rconfack+0x128>
	return;					/* Nope, toss... */
    if( !(f->callbacks->ackci? (*f->callbacks->ackci)(f, inp, len):
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	68db      	ldr	r3, [r3, #12]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d00d      	beq.n	800e004 <fsm_rconfack+0x50>
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	68db      	ldr	r3, [r3, #12]
 800dfee:	683a      	ldr	r2, [r7, #0]
 800dff0:	6879      	ldr	r1, [r7, #4]
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	4798      	blx	r3
 800dff6:	4603      	mov	r3, r0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	bf0c      	ite	eq
 800dffc:	2301      	moveq	r3, #1
 800dffe:	2300      	movne	r3, #0
 800e000:	b2db      	uxtb	r3, r3
 800e002:	e005      	b.n	800e010 <fsm_rconfack+0x5c>
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	bf14      	ite	ne
 800e00a:	2301      	movne	r3, #1
 800e00c:	2300      	moveq	r3, #0
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	2b00      	cmp	r3, #0
 800e012:	d165      	bne.n	800e0e0 <fsm_rconfack+0x12c>
	  (len == 0)) ){
	/* Ack is bad - ignore it */
	ppp_error(("Received bad configure-ack: %P", inp, len));
	return;
    }
    f->seen_ack = 1;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	2201      	movs	r2, #1
 800e018:	731a      	strb	r2, [r3, #12]
    f->rnakloops = 0;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2200      	movs	r2, #0
 800e01e:	759a      	strb	r2, [r3, #22]

    switch (f->state) {
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	7c1b      	ldrb	r3, [r3, #16]
 800e024:	3b02      	subs	r3, #2
 800e026:	2b07      	cmp	r3, #7
 800e028:	d85c      	bhi.n	800e0e4 <fsm_rconfack+0x130>
 800e02a:	a201      	add	r2, pc, #4	; (adr r2, 800e030 <fsm_rconfack+0x7c>)
 800e02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e030:	0800e051 	.word	0x0800e051
 800e034:	0800e051 	.word	0x0800e051
 800e038:	0800e0e5 	.word	0x0800e0e5
 800e03c:	0800e0e5 	.word	0x0800e0e5
 800e040:	0800e065 	.word	0x0800e065
 800e044:	0800e075 	.word	0x0800e075
 800e048:	0800e08d 	.word	0x0800e08d
 800e04c:	0800e0b9 	.word	0x0800e0b9
    case PPP_FSM_CLOSED:
    case PPP_FSM_STOPPED:
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	b2da      	uxtb	r2, r3
 800e054:	2300      	movs	r3, #0
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	2300      	movs	r3, #0
 800e05a:	2106      	movs	r1, #6
 800e05c:	68f8      	ldr	r0, [r7, #12]
 800e05e:	f000 faf7 	bl	800e650 <fsm_sdata>
	break;
 800e062:	e042      	b.n	800e0ea <fsm_rconfack+0x136>

    case PPP_FSM_REQSENT:
	f->state = PPP_FSM_ACKRCVD;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	2207      	movs	r2, #7
 800e068:	741a      	strb	r2, [r3, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	7bda      	ldrb	r2, [r3, #15]
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	751a      	strb	r2, [r3, #20]
	break;
 800e072:	e03a      	b.n	800e0ea <fsm_rconfack+0x136>

    case PPP_FSM_ACKRCVD:
	/* Huh? an extra valid Ack? oh well... */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e074:	68f9      	ldr	r1, [r7, #12]
 800e076:	481e      	ldr	r0, [pc, #120]	; (800e0f0 <fsm_rconfack+0x13c>)
 800e078:	f7ff f9b4 	bl	800d3e4 <sys_untimeout>
	fsm_sconfreq(f, 0);
 800e07c:	2100      	movs	r1, #0
 800e07e:	68f8      	ldr	r0, [r7, #12]
 800e080:	f000 f9f8 	bl	800e474 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2206      	movs	r2, #6
 800e088:	741a      	strb	r2, [r3, #16]
	break;
 800e08a:	e02e      	b.n	800e0ea <fsm_rconfack+0x136>

    case PPP_FSM_ACKSENT:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e08c:	68f9      	ldr	r1, [r7, #12]
 800e08e:	4818      	ldr	r0, [pc, #96]	; (800e0f0 <fsm_rconfack+0x13c>)
 800e090:	f7ff f9a8 	bl	800d3e4 <sys_untimeout>
	f->state = PPP_FSM_OPENED;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2209      	movs	r2, #9
 800e098:	741a      	strb	r2, [r3, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	7bda      	ldrb	r2, [r3, #15]
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	751a      	strb	r2, [r3, #20]
	if (f->callbacks->up)
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	69db      	ldr	r3, [r3, #28]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d01d      	beq.n	800e0e8 <fsm_rconfack+0x134>
	    (*f->callbacks->up)(f);	/* Inform upper layers */
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	685b      	ldr	r3, [r3, #4]
 800e0b0:	69db      	ldr	r3, [r3, #28]
 800e0b2:	68f8      	ldr	r0, [r7, #12]
 800e0b4:	4798      	blx	r3
	break;
 800e0b6:	e017      	b.n	800e0e8 <fsm_rconfack+0x134>

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if (f->callbacks->down)
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	685b      	ldr	r3, [r3, #4]
 800e0bc:	6a1b      	ldr	r3, [r3, #32]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d004      	beq.n	800e0cc <fsm_rconfack+0x118>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	6a1b      	ldr	r3, [r3, #32]
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800e0cc:	2100      	movs	r1, #0
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	f000 f9d0 	bl	800e474 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2206      	movs	r2, #6
 800e0d8:	741a      	strb	r2, [r3, #16]
	break;
 800e0da:	e006      	b.n	800e0ea <fsm_rconfack+0x136>
	return;					/* Nope, toss... */
 800e0dc:	bf00      	nop
 800e0de:	e004      	b.n	800e0ea <fsm_rconfack+0x136>
	return;
 800e0e0:	bf00      	nop
 800e0e2:	e002      	b.n	800e0ea <fsm_rconfack+0x136>
    default:
	break;
 800e0e4:	bf00      	nop
 800e0e6:	e000      	b.n	800e0ea <fsm_rconfack+0x136>
	break;
 800e0e8:	bf00      	nop
    }
}
 800e0ea:	3718      	adds	r7, #24
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	0800dbf1 	.word	0x0800dbf1

0800e0f4 <fsm_rconfnakrej>:


/*
 * fsm_rconfnakrej - Receive Configure-Nak or Configure-Reject.
 */
static void fsm_rconfnakrej(fsm *f, int code, int id, u_char *inp, int len) {
 800e0f4:	b590      	push	{r4, r7, lr}
 800e0f6:	b089      	sub	sp, #36	; 0x24
 800e0f8:	af02      	add	r7, sp, #8
 800e0fa:	60f8      	str	r0, [r7, #12]
 800e0fc:	60b9      	str	r1, [r7, #8]
 800e0fe:	607a      	str	r2, [r7, #4]
 800e100:	603b      	str	r3, [r7, #0]
    int ret;
    int treat_as_reject;

    if (id != f->reqid || f->seen_ack)	/* Expected id? */
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	7cdb      	ldrb	r3, [r3, #19]
 800e106:	461a      	mov	r2, r3
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	429a      	cmp	r2, r3
 800e10c:	f040 8090 	bne.w	800e230 <fsm_rconfnakrej+0x13c>
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	7b1b      	ldrb	r3, [r3, #12]
 800e114:	2b00      	cmp	r3, #0
 800e116:	f040 808b 	bne.w	800e230 <fsm_rconfnakrej+0x13c>
	return;				/* Nope, toss... */

    if (code == CONFNAK) {
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	2b03      	cmp	r3, #3
 800e11e:	d121      	bne.n	800e164 <fsm_rconfnakrej+0x70>
	++f->rnakloops;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	7d9b      	ldrb	r3, [r3, #22]
 800e124:	3301      	adds	r3, #1
 800e126:	b2da      	uxtb	r2, r3
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	759a      	strb	r2, [r3, #22]
	treat_as_reject = (f->rnakloops >= f->maxnakloops);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	7d9a      	ldrb	r2, [r3, #22]
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	7ddb      	ldrb	r3, [r3, #23]
 800e134:	429a      	cmp	r2, r3
 800e136:	bf2c      	ite	cs
 800e138:	2301      	movcs	r3, #1
 800e13a:	2300      	movcc	r3, #0
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	613b      	str	r3, [r7, #16]
	if (f->callbacks->nakci == NULL
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	685b      	ldr	r3, [r3, #4]
 800e144:	691b      	ldr	r3, [r3, #16]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d074      	beq.n	800e234 <fsm_rconfnakrej+0x140>
	    || !(ret = f->callbacks->nakci(f, inp, len, treat_as_reject))) {
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	691c      	ldr	r4, [r3, #16]
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e154:	6839      	ldr	r1, [r7, #0]
 800e156:	68f8      	ldr	r0, [r7, #12]
 800e158:	47a0      	blx	r4
 800e15a:	6178      	str	r0, [r7, #20]
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d113      	bne.n	800e18a <fsm_rconfnakrej+0x96>
	    ppp_error(("Received bad configure-nak: %P", inp, len));
	    return;
 800e162:	e067      	b.n	800e234 <fsm_rconfnakrej+0x140>
	}
    } else {
	f->rnakloops = 0;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2200      	movs	r2, #0
 800e168:	759a      	strb	r2, [r3, #22]
	if (f->callbacks->rejci == NULL
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	695b      	ldr	r3, [r3, #20]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d061      	beq.n	800e238 <fsm_rconfnakrej+0x144>
	    || !(ret = f->callbacks->rejci(f, inp, len))) {
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	695b      	ldr	r3, [r3, #20]
 800e17a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e17c:	6839      	ldr	r1, [r7, #0]
 800e17e:	68f8      	ldr	r0, [r7, #12]
 800e180:	4798      	blx	r3
 800e182:	6178      	str	r0, [r7, #20]
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d056      	beq.n	800e238 <fsm_rconfnakrej+0x144>
	    ppp_error(("Received bad configure-rej: %P", inp, len));
	    return;
	}
    }

    f->seen_ack = 1;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2201      	movs	r2, #1
 800e18e:	731a      	strb	r2, [r3, #12]

    switch (f->state) {
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	7c1b      	ldrb	r3, [r3, #16]
 800e194:	3b02      	subs	r3, #2
 800e196:	2b07      	cmp	r3, #7
 800e198:	d850      	bhi.n	800e23c <fsm_rconfnakrej+0x148>
 800e19a:	a201      	add	r2, pc, #4	; (adr r2, 800e1a0 <fsm_rconfnakrej+0xac>)
 800e19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a0:	0800e1c1 	.word	0x0800e1c1
 800e1a4:	0800e1c1 	.word	0x0800e1c1
 800e1a8:	0800e23d 	.word	0x0800e23d
 800e1ac:	0800e23d 	.word	0x0800e23d
 800e1b0:	0800e1d5 	.word	0x0800e1d5
 800e1b4:	0800e1f5 	.word	0x0800e1f5
 800e1b8:	0800e1d5 	.word	0x0800e1d5
 800e1bc:	0800e20d 	.word	0x0800e20d
    case PPP_FSM_CLOSED:
    case PPP_FSM_STOPPED:
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	b2da      	uxtb	r2, r3
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	9300      	str	r3, [sp, #0]
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	2106      	movs	r1, #6
 800e1cc:	68f8      	ldr	r0, [r7, #12]
 800e1ce:	f000 fa3f 	bl	800e650 <fsm_sdata>
	break;
 800e1d2:	e034      	b.n	800e23e <fsm_rconfnakrej+0x14a>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKSENT:
	/* They didn't agree to what we wanted - try another request */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e1d4:	68f9      	ldr	r1, [r7, #12]
 800e1d6:	481b      	ldr	r0, [pc, #108]	; (800e244 <fsm_rconfnakrej+0x150>)
 800e1d8:	f7ff f904 	bl	800d3e4 <sys_untimeout>
	if (ret < 0)
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	da03      	bge.n	800e1ea <fsm_rconfnakrej+0xf6>
	    f->state = PPP_FSM_STOPPED;		/* kludge for stopping CCP */
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2203      	movs	r2, #3
 800e1e6:	741a      	strb	r2, [r3, #16]
	else
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
	break;
 800e1e8:	e029      	b.n	800e23e <fsm_rconfnakrej+0x14a>
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
 800e1ea:	2100      	movs	r1, #0
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	f000 f941 	bl	800e474 <fsm_sconfreq>
	break;
 800e1f2:	e024      	b.n	800e23e <fsm_rconfnakrej+0x14a>

    case PPP_FSM_ACKRCVD:
	/* Got a Nak/reject when we had already had an Ack?? oh well... */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e1f4:	68f9      	ldr	r1, [r7, #12]
 800e1f6:	4813      	ldr	r0, [pc, #76]	; (800e244 <fsm_rconfnakrej+0x150>)
 800e1f8:	f7ff f8f4 	bl	800d3e4 <sys_untimeout>
	fsm_sconfreq(f, 0);
 800e1fc:	2100      	movs	r1, #0
 800e1fe:	68f8      	ldr	r0, [r7, #12]
 800e200:	f000 f938 	bl	800e474 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2206      	movs	r2, #6
 800e208:	741a      	strb	r2, [r3, #16]
	break;
 800e20a:	e018      	b.n	800e23e <fsm_rconfnakrej+0x14a>

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if (f->callbacks->down)
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	6a1b      	ldr	r3, [r3, #32]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d004      	beq.n	800e220 <fsm_rconfnakrej+0x12c>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	6a1b      	ldr	r3, [r3, #32]
 800e21c:	68f8      	ldr	r0, [r7, #12]
 800e21e:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800e220:	2100      	movs	r1, #0
 800e222:	68f8      	ldr	r0, [r7, #12]
 800e224:	f000 f926 	bl	800e474 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2206      	movs	r2, #6
 800e22c:	741a      	strb	r2, [r3, #16]
	break;
 800e22e:	e006      	b.n	800e23e <fsm_rconfnakrej+0x14a>
	return;				/* Nope, toss... */
 800e230:	bf00      	nop
 800e232:	e004      	b.n	800e23e <fsm_rconfnakrej+0x14a>
	    return;
 800e234:	bf00      	nop
 800e236:	e002      	b.n	800e23e <fsm_rconfnakrej+0x14a>
	    return;
 800e238:	bf00      	nop
 800e23a:	e000      	b.n	800e23e <fsm_rconfnakrej+0x14a>
    default:
	break;
 800e23c:	bf00      	nop
    }
}
 800e23e:	371c      	adds	r7, #28
 800e240:	46bd      	mov	sp, r7
 800e242:	bd90      	pop	{r4, r7, pc}
 800e244:	0800dbf1 	.word	0x0800dbf1

0800e248 <fsm_rtermreq>:


/*
 * fsm_rtermreq - Receive Terminate-Req.
 */
static void fsm_rtermreq(fsm *f, int id, u_char *p, int len) {
 800e248:	b580      	push	{r7, lr}
 800e24a:	b088      	sub	sp, #32
 800e24c:	af02      	add	r7, sp, #8
 800e24e:	60f8      	str	r0, [r7, #12]
 800e250:	60b9      	str	r1, [r7, #8]
 800e252:	607a      	str	r2, [r7, #4]
 800e254:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	617b      	str	r3, [r7, #20]

    switch (f->state) {
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	7c1b      	ldrb	r3, [r3, #16]
 800e260:	2b07      	cmp	r3, #7
 800e262:	db29      	blt.n	800e2b8 <fsm_rtermreq+0x70>
 800e264:	2b08      	cmp	r3, #8
 800e266:	dd02      	ble.n	800e26e <fsm_rtermreq+0x26>
 800e268:	2b09      	cmp	r3, #9
 800e26a:	d004      	beq.n	800e276 <fsm_rtermreq+0x2e>
	if (f->callbacks->down)
	    (*f->callbacks->down)(f);	/* Inform upper layers */
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
	break;
    default:
	break;
 800e26c:	e024      	b.n	800e2b8 <fsm_rtermreq+0x70>
	f->state = PPP_FSM_REQSENT;		/* Start over but keep trying */
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2206      	movs	r2, #6
 800e272:	741a      	strb	r2, [r3, #16]
	break;
 800e274:	e021      	b.n	800e2ba <fsm_rtermreq+0x72>
	f->retransmits = 0;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2200      	movs	r2, #0
 800e27a:	751a      	strb	r2, [r3, #20]
	f->state = PPP_FSM_STOPPING;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2205      	movs	r2, #5
 800e280:	741a      	strb	r2, [r3, #16]
	if (f->callbacks->down)
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	6a1b      	ldr	r3, [r3, #32]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d004      	beq.n	800e296 <fsm_rtermreq+0x4e>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	685b      	ldr	r3, [r3, #4]
 800e290:	6a1b      	ldr	r3, [r3, #32]
 800e292:	68f8      	ldr	r0, [r7, #12]
 800e294:	4798      	blx	r3
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800e296:	68f9      	ldr	r1, [r7, #12]
 800e298:	480e      	ldr	r0, [pc, #56]	; (800e2d4 <fsm_rtermreq+0x8c>)
 800e29a:	f7ff f8a3 	bl	800d3e4 <sys_untimeout>
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	7b9b      	ldrb	r3, [r3, #14]
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e2a8:	fb03 f302 	mul.w	r3, r3, r2
 800e2ac:	68fa      	ldr	r2, [r7, #12]
 800e2ae:	4909      	ldr	r1, [pc, #36]	; (800e2d4 <fsm_rtermreq+0x8c>)
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7ff f86b 	bl	800d38c <sys_timeout>
	break;
 800e2b6:	e000      	b.n	800e2ba <fsm_rtermreq+0x72>
	break;
 800e2b8:	bf00      	nop
    }

    fsm_sdata(f, TERMACK, id, NULL, 0);
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	b2da      	uxtb	r2, r3
 800e2be:	2300      	movs	r3, #0
 800e2c0:	9300      	str	r3, [sp, #0]
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	2106      	movs	r1, #6
 800e2c6:	68f8      	ldr	r0, [r7, #12]
 800e2c8:	f000 f9c2 	bl	800e650 <fsm_sdata>
}
 800e2cc:	bf00      	nop
 800e2ce:	3718      	adds	r7, #24
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	0800dbf1 	.word	0x0800dbf1

0800e2d8 <fsm_rtermack>:


/*
 * fsm_rtermack - Receive Terminate-Ack.
 */
static void fsm_rtermack(fsm *f) {
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b082      	sub	sp, #8
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
    switch (f->state) {
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	7c1b      	ldrb	r3, [r3, #16]
 800e2e4:	3b04      	subs	r3, #4
 800e2e6:	2b05      	cmp	r3, #5
 800e2e8:	d848      	bhi.n	800e37c <fsm_rtermack+0xa4>
 800e2ea:	a201      	add	r2, pc, #4	; (adr r2, 800e2f0 <fsm_rtermack+0x18>)
 800e2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2f0:	0800e309 	.word	0x0800e309
 800e2f4:	0800e32d 	.word	0x0800e32d
 800e2f8:	0800e37d 	.word	0x0800e37d
 800e2fc:	0800e351 	.word	0x0800e351
 800e300:	0800e37d 	.word	0x0800e37d
 800e304:	0800e359 	.word	0x0800e359
    case PPP_FSM_CLOSING:
	UNTIMEOUT(fsm_timeout, f);
 800e308:	6879      	ldr	r1, [r7, #4]
 800e30a:	4821      	ldr	r0, [pc, #132]	; (800e390 <fsm_rtermack+0xb8>)
 800e30c:	f7ff f86a 	bl	800d3e4 <sys_untimeout>
	f->state = PPP_FSM_CLOSED;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2202      	movs	r2, #2
 800e314:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d02f      	beq.n	800e380 <fsm_rtermack+0xa8>
	    (*f->callbacks->finished)(f);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	4798      	blx	r3
	break;
 800e32a:	e029      	b.n	800e380 <fsm_rtermack+0xa8>
    case PPP_FSM_STOPPING:
	UNTIMEOUT(fsm_timeout, f);
 800e32c:	6879      	ldr	r1, [r7, #4]
 800e32e:	4818      	ldr	r0, [pc, #96]	; (800e390 <fsm_rtermack+0xb8>)
 800e330:	f7ff f858 	bl	800d3e4 <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2203      	movs	r2, #3
 800e338:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e340:	2b00      	cmp	r3, #0
 800e342:	d01f      	beq.n	800e384 <fsm_rtermack+0xac>
	    (*f->callbacks->finished)(f);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	4798      	blx	r3
	break;
 800e34e:	e019      	b.n	800e384 <fsm_rtermack+0xac>

    case PPP_FSM_ACKRCVD:
	f->state = PPP_FSM_REQSENT;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2206      	movs	r2, #6
 800e354:	741a      	strb	r2, [r3, #16]
	break;
 800e356:	e016      	b.n	800e386 <fsm_rtermack+0xae>

    case PPP_FSM_OPENED:
	if (f->callbacks->down)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	6a1b      	ldr	r3, [r3, #32]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d004      	beq.n	800e36c <fsm_rtermack+0x94>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	685b      	ldr	r3, [r3, #4]
 800e366:	6a1b      	ldr	r3, [r3, #32]
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	4798      	blx	r3
	fsm_sconfreq(f, 0);
 800e36c:	2100      	movs	r1, #0
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 f880 	bl	800e474 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2206      	movs	r2, #6
 800e378:	741a      	strb	r2, [r3, #16]
	break;
 800e37a:	e004      	b.n	800e386 <fsm_rtermack+0xae>
    default:
	break;
 800e37c:	bf00      	nop
 800e37e:	e002      	b.n	800e386 <fsm_rtermack+0xae>
	break;
 800e380:	bf00      	nop
 800e382:	e000      	b.n	800e386 <fsm_rtermack+0xae>
	break;
 800e384:	bf00      	nop
    }
}
 800e386:	bf00      	nop
 800e388:	3708      	adds	r7, #8
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	0800dbf1 	.word	0x0800dbf1

0800e394 <fsm_rcoderej>:


/*
 * fsm_rcoderej - Receive an Code-Reject.
 */
static void fsm_rcoderej(fsm *f, u_char *inp, int len) {
 800e394:	b480      	push	{r7}
 800e396:	b087      	sub	sp, #28
 800e398:	af00      	add	r7, sp, #0
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	60b9      	str	r1, [r7, #8]
 800e39e:	607a      	str	r2, [r7, #4]
    u_char code, id;

    if (len < HEADERLEN) {
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2b03      	cmp	r3, #3
 800e3a4:	dd11      	ble.n	800e3ca <fsm_rcoderej+0x36>
	FSMDEBUG(("fsm_rcoderej: Rcvd short Code-Reject packet!"));
	return;
    }
    GETCHAR(code, inp);
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	1c5a      	adds	r2, r3, #1
 800e3aa:	60ba      	str	r2, [r7, #8]
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	75fb      	strb	r3, [r7, #23]
    GETCHAR(id, inp);
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	1c5a      	adds	r2, r3, #1
 800e3b4:	60ba      	str	r2, [r7, #8]
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	75bb      	strb	r3, [r7, #22]
    ppp_warn(("%s: Rcvd Code-Reject for code %d, id %d", PROTO_NAME(f), code, id));

    if( f->state == PPP_FSM_ACKRCVD )
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	7c1b      	ldrb	r3, [r3, #16]
 800e3be:	2b07      	cmp	r3, #7
 800e3c0:	d104      	bne.n	800e3cc <fsm_rcoderej+0x38>
	f->state = PPP_FSM_REQSENT;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2206      	movs	r2, #6
 800e3c6:	741a      	strb	r2, [r3, #16]
 800e3c8:	e000      	b.n	800e3cc <fsm_rcoderej+0x38>
	return;
 800e3ca:	bf00      	nop
}
 800e3cc:	371c      	adds	r7, #28
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d4:	4770      	bx	lr
	...

0800e3d8 <fsm_protreject>:
/*
 * fsm_protreject - Peer doesn't speak this protocol.
 *
 * Treat this as a catastrophic error (RXJ-).
 */
void fsm_protreject(fsm *f) {
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	7c1b      	ldrb	r3, [r3, #16]
 800e3e4:	3b02      	subs	r3, #2
 800e3e6:	2b07      	cmp	r3, #7
 800e3e8:	d83e      	bhi.n	800e468 <fsm_protreject+0x90>
 800e3ea:	a201      	add	r2, pc, #4	; (adr r2, 800e3f0 <fsm_protreject+0x18>)
 800e3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3f0:	0800e419 	.word	0x0800e419
 800e3f4:	0800e43d 	.word	0x0800e43d
 800e3f8:	0800e411 	.word	0x0800e411
 800e3fc:	0800e435 	.word	0x0800e435
 800e400:	0800e435 	.word	0x0800e435
 800e404:	0800e435 	.word	0x0800e435
 800e408:	0800e435 	.word	0x0800e435
 800e40c:	0800e459 	.word	0x0800e459
    case PPP_FSM_CLOSING:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e410:	6879      	ldr	r1, [r7, #4]
 800e412:	4817      	ldr	r0, [pc, #92]	; (800e470 <fsm_protreject+0x98>)
 800e414:	f7fe ffe6 	bl	800d3e4 <sys_untimeout>
	/* fall through */
	/* no break */
    case PPP_FSM_CLOSED:
	f->state = PPP_FSM_CLOSED;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2202      	movs	r2, #2
 800e41c:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	685b      	ldr	r3, [r3, #4]
 800e422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e424:	2b00      	cmp	r3, #0
 800e426:	d01c      	beq.n	800e462 <fsm_protreject+0x8a>
	    (*f->callbacks->finished)(f);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	4798      	blx	r3
	break;
 800e432:	e016      	b.n	800e462 <fsm_protreject+0x8a>

    case PPP_FSM_STOPPING:
    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e434:	6879      	ldr	r1, [r7, #4]
 800e436:	480e      	ldr	r0, [pc, #56]	; (800e470 <fsm_protreject+0x98>)
 800e438:	f7fe ffd4 	bl	800d3e4 <sys_untimeout>
	/* fall through */
	/* no break */
    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_STOPPED;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2203      	movs	r2, #3
 800e440:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	685b      	ldr	r3, [r3, #4]
 800e446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d00c      	beq.n	800e466 <fsm_protreject+0x8e>
	    (*f->callbacks->finished)(f);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	685b      	ldr	r3, [r3, #4]
 800e450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	4798      	blx	r3
	break;
 800e456:	e006      	b.n	800e466 <fsm_protreject+0x8e>

    case PPP_FSM_OPENED:
	terminate_layer(f, PPP_FSM_STOPPING);
 800e458:	2105      	movs	r1, #5
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f7ff fb0e 	bl	800da7c <terminate_layer>
	break;
 800e460:	e002      	b.n	800e468 <fsm_protreject+0x90>
	break;
 800e462:	bf00      	nop
 800e464:	e000      	b.n	800e468 <fsm_protreject+0x90>
	break;
 800e466:	bf00      	nop
    default:
	FSMDEBUG(("%s: Protocol-reject event in state %d!",
		  PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800e468:	bf00      	nop
 800e46a:	3708      	adds	r7, #8
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}
 800e470:	0800dbf1 	.word	0x0800dbf1

0800e474 <fsm_sconfreq>:


/*
 * fsm_sconfreq - Send a Configure-Request.
 */
static void fsm_sconfreq(fsm *f, int retransmit) {
 800e474:	b580      	push	{r7, lr}
 800e476:	b086      	sub	sp, #24
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	6039      	str	r1, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	617b      	str	r3, [r7, #20]
    struct pbuf *p;
    u_char *outp;
    int cilen;

    if( f->state != PPP_FSM_REQSENT && f->state != PPP_FSM_ACKRCVD && f->state != PPP_FSM_ACKSENT ){
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	7c1b      	ldrb	r3, [r3, #16]
 800e488:	2b06      	cmp	r3, #6
 800e48a:	d017      	beq.n	800e4bc <fsm_sconfreq+0x48>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	7c1b      	ldrb	r3, [r3, #16]
 800e490:	2b07      	cmp	r3, #7
 800e492:	d013      	beq.n	800e4bc <fsm_sconfreq+0x48>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	7c1b      	ldrb	r3, [r3, #16]
 800e498:	2b08      	cmp	r3, #8
 800e49a:	d00f      	beq.n	800e4bc <fsm_sconfreq+0x48>
	/* Not currently negotiating - reset options */
	if( f->callbacks->resetci )
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	685b      	ldr	r3, [r3, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d004      	beq.n	800e4b0 <fsm_sconfreq+0x3c>
	    (*f->callbacks->resetci)(f);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	685b      	ldr	r3, [r3, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	4798      	blx	r3
	f->nakloops = 0;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	755a      	strb	r2, [r3, #21]
	f->rnakloops = 0;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	759a      	strb	r2, [r3, #22]
    }

    if( !retransmit ){
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d10d      	bne.n	800e4de <fsm_sconfreq+0x6a>
	/* New request - reset retransmission counter, use new ID */
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	7bda      	ldrb	r2, [r3, #15]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	751a      	strb	r2, [r3, #20]
	f->reqid = ++f->id;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	7c9b      	ldrb	r3, [r3, #18]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	b2da      	uxtb	r2, r3
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	749a      	strb	r2, [r3, #18]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	7c9a      	ldrb	r2, [r3, #18]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	74da      	strb	r2, [r3, #19]
    }

    f->seen_ack = 0;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	731a      	strb	r2, [r3, #12]

    /*
     * Make up the request packet
     */
    if( f->callbacks->cilen && f->callbacks->addci ){
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d018      	beq.n	800e520 <fsm_sconfreq+0xac>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	689b      	ldr	r3, [r3, #8]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d013      	beq.n	800e520 <fsm_sconfreq+0xac>
	cilen = (*f->callbacks->cilen)(f);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	685b      	ldr	r3, [r3, #4]
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	4798      	blx	r3
 800e502:	4603      	mov	r3, r0
 800e504:	60bb      	str	r3, [r7, #8]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800e50c:	1f1a      	subs	r2, r3, #4
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	429a      	cmp	r2, r3
 800e512:	da07      	bge.n	800e524 <fsm_sconfreq+0xb0>
	    cilen = pcb->peer_mru - HEADERLEN;
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800e51a:	3b04      	subs	r3, #4
 800e51c:	60bb      	str	r3, [r7, #8]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800e51e:	e001      	b.n	800e524 <fsm_sconfreq+0xb0>
    } else
	cilen = 0;
 800e520:	2300      	movs	r3, #0
 800e522:	60bb      	str	r3, [r7, #8]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(cilen + HEADERLEN + PPP_HDRLEN), PBUF_RAM);
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	b29b      	uxth	r3, r3
 800e528:	3308      	adds	r3, #8
 800e52a:	b29b      	uxth	r3, r3
 800e52c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e530:	4619      	mov	r1, r3
 800e532:	2000      	movs	r0, #0
 800e534:	f7f7 fb18 	bl	8005b68 <pbuf_alloc>
 800e538:	6138      	str	r0, [r7, #16]
    if(NULL == p)
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d07a      	beq.n	800e636 <fsm_sconfreq+0x1c2>
        return;
    if(p->tot_len != p->len) {
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	891a      	ldrh	r2, [r3, #8]
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	895b      	ldrh	r3, [r3, #10]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d003      	beq.n	800e554 <fsm_sconfreq+0xe0>
        pbuf_free(p);
 800e54c:	6938      	ldr	r0, [r7, #16]
 800e54e:	f7f7 fd75 	bl	800603c <pbuf_free>
        return;
 800e552:	e071      	b.n	800e638 <fsm_sconfreq+0x1c4>
    }

    /* send the request to our peer */
    outp = (u_char*)p->payload;
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	685b      	ldr	r3, [r3, #4]
 800e558:	60fb      	str	r3, [r7, #12]
    MAKEHEADER(outp, f->protocol);
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	1c5a      	adds	r2, r3, #1
 800e55e:	60fa      	str	r2, [r7, #12]
 800e560:	22ff      	movs	r2, #255	; 0xff
 800e562:	701a      	strb	r2, [r3, #0]
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	1c5a      	adds	r2, r3, #1
 800e568:	60fa      	str	r2, [r7, #12]
 800e56a:	2203      	movs	r2, #3
 800e56c:	701a      	strb	r2, [r3, #0]
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	1c5a      	adds	r2, r3, #1
 800e572:	60fa      	str	r2, [r7, #12]
 800e574:	687a      	ldr	r2, [r7, #4]
 800e576:	89d2      	ldrh	r2, [r2, #14]
 800e578:	0a12      	lsrs	r2, r2, #8
 800e57a:	b292      	uxth	r2, r2
 800e57c:	b2d2      	uxtb	r2, r2
 800e57e:	701a      	strb	r2, [r3, #0]
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	1c5a      	adds	r2, r3, #1
 800e584:	60fa      	str	r2, [r7, #12]
 800e586:	687a      	ldr	r2, [r7, #4]
 800e588:	89d2      	ldrh	r2, [r2, #14]
 800e58a:	b2d2      	uxtb	r2, r2
 800e58c:	701a      	strb	r2, [r3, #0]
    PUTCHAR(CONFREQ, outp);
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	1c5a      	adds	r2, r3, #1
 800e592:	60fa      	str	r2, [r7, #12]
 800e594:	2201      	movs	r2, #1
 800e596:	701a      	strb	r2, [r3, #0]
    PUTCHAR(f->reqid, outp);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	1c5a      	adds	r2, r3, #1
 800e59c:	60fa      	str	r2, [r7, #12]
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	7cd2      	ldrb	r2, [r2, #19]
 800e5a2:	701a      	strb	r2, [r3, #0]
    PUTSHORT(cilen + HEADERLEN, outp);
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	1c5a      	adds	r2, r3, #1
 800e5a8:	60fa      	str	r2, [r7, #12]
 800e5aa:	68ba      	ldr	r2, [r7, #8]
 800e5ac:	3204      	adds	r2, #4
 800e5ae:	1212      	asrs	r2, r2, #8
 800e5b0:	b2d2      	uxtb	r2, r2
 800e5b2:	701a      	strb	r2, [r3, #0]
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	1c5a      	adds	r2, r3, #1
 800e5b8:	60fa      	str	r2, [r7, #12]
 800e5ba:	68ba      	ldr	r2, [r7, #8]
 800e5bc:	b2d2      	uxtb	r2, r2
 800e5be:	3204      	adds	r2, #4
 800e5c0:	b2d2      	uxtb	r2, r2
 800e5c2:	701a      	strb	r2, [r3, #0]
    if (cilen != 0) {
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d01a      	beq.n	800e600 <fsm_sconfreq+0x18c>
	(*f->callbacks->addci)(f, outp, &cilen);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	689b      	ldr	r3, [r3, #8]
 800e5d0:	f107 0208 	add.w	r2, r7, #8
 800e5d4:	68f9      	ldr	r1, [r7, #12]
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	4798      	blx	r3
	LWIP_ASSERT("cilen == p->len - HEADERLEN - PPP_HDRLEN", cilen == p->len - HEADERLEN - PPP_HDRLEN);
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	895b      	ldrh	r3, [r3, #10]
 800e5de:	f1a3 0208 	sub.w	r2, r3, #8
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d00b      	beq.n	800e600 <fsm_sconfreq+0x18c>
 800e5e8:	4b15      	ldr	r3, [pc, #84]	; (800e640 <fsm_sconfreq+0x1cc>)
 800e5ea:	f240 22f2 	movw	r2, #754	; 0x2f2
 800e5ee:	4915      	ldr	r1, [pc, #84]	; (800e644 <fsm_sconfreq+0x1d0>)
 800e5f0:	4815      	ldr	r0, [pc, #84]	; (800e648 <fsm_sconfreq+0x1d4>)
 800e5f2:	f005 fa39 	bl	8013a68 <iprintf>
 800e5f6:	2000      	movs	r0, #0
 800e5f8:	f005 fb38 	bl	8013c6c <fflush>
 800e5fc:	f005 fa7d 	bl	8013afa <abort>
    }

    ppp_write(pcb, p);
 800e600:	6939      	ldr	r1, [r7, #16]
 800e602:	6978      	ldr	r0, [r7, #20]
 800e604:	f003 fe68 	bl	80122d8 <ppp_write>

    /* start the retransmit timer */
    --f->retransmits;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	7d1b      	ldrb	r3, [r3, #20]
 800e60c:	3b01      	subs	r3, #1
 800e60e:	b2da      	uxtb	r2, r3
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	751a      	strb	r2, [r3, #20]
    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800e614:	6879      	ldr	r1, [r7, #4]
 800e616:	480d      	ldr	r0, [pc, #52]	; (800e64c <fsm_sconfreq+0x1d8>)
 800e618:	f7fe fee4 	bl	800d3e4 <sys_untimeout>
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	7b9b      	ldrb	r3, [r3, #14]
 800e620:	461a      	mov	r2, r3
 800e622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e626:	fb03 f302 	mul.w	r3, r3, r2
 800e62a:	687a      	ldr	r2, [r7, #4]
 800e62c:	4907      	ldr	r1, [pc, #28]	; (800e64c <fsm_sconfreq+0x1d8>)
 800e62e:	4618      	mov	r0, r3
 800e630:	f7fe feac 	bl	800d38c <sys_timeout>
 800e634:	e000      	b.n	800e638 <fsm_sconfreq+0x1c4>
        return;
 800e636:	bf00      	nop
}
 800e638:	3718      	adds	r7, #24
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	0801772c 	.word	0x0801772c
 800e644:	08017750 	.word	0x08017750
 800e648:	0801777c 	.word	0x0801777c
 800e64c:	0800dbf1 	.word	0x0800dbf1

0800e650 <fsm_sdata>:
/*
 * fsm_sdata - Send some data.
 *
 * Used for all packets sent to our peer by this module.
 */
void fsm_sdata(fsm *f, u_char code, u_char id, const u_char *data, int datalen) {
 800e650:	b580      	push	{r7, lr}
 800e652:	b088      	sub	sp, #32
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	607b      	str	r3, [r7, #4]
 800e65a:	460b      	mov	r3, r1
 800e65c:	72fb      	strb	r3, [r7, #11]
 800e65e:	4613      	mov	r3, r2
 800e660:	72bb      	strb	r3, [r7, #10]
    ppp_pcb *pcb = f->pcb;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	61fb      	str	r3, [r7, #28]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    /* Adjust length to be smaller than MTU */
    if (datalen > pcb->peer_mru - HEADERLEN)
 800e668:	69fb      	ldr	r3, [r7, #28]
 800e66a:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800e66e:	1f1a      	subs	r2, r3, #4
 800e670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e672:	429a      	cmp	r2, r3
 800e674:	da04      	bge.n	800e680 <fsm_sdata+0x30>
	datalen = pcb->peer_mru - HEADERLEN;
 800e676:	69fb      	ldr	r3, [r7, #28]
 800e678:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800e67c:	3b04      	subs	r3, #4
 800e67e:	62bb      	str	r3, [r7, #40]	; 0x28
    outlen = datalen + HEADERLEN;
 800e680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e682:	3304      	adds	r3, #4
 800e684:	61bb      	str	r3, [r7, #24]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(outlen + PPP_HDRLEN), PBUF_RAM);
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	b29b      	uxth	r3, r3
 800e68a:	3304      	adds	r3, #4
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e692:	4619      	mov	r1, r3
 800e694:	2000      	movs	r0, #0
 800e696:	f7f7 fa67 	bl	8005b68 <pbuf_alloc>
 800e69a:	6178      	str	r0, [r7, #20]
    if(NULL == p)
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d04f      	beq.n	800e742 <fsm_sdata+0xf2>
        return;
    if(p->tot_len != p->len) {
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	891a      	ldrh	r2, [r3, #8]
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	895b      	ldrh	r3, [r3, #10]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d003      	beq.n	800e6b6 <fsm_sdata+0x66>
        pbuf_free(p);
 800e6ae:	6978      	ldr	r0, [r7, #20]
 800e6b0:	f7f7 fcc4 	bl	800603c <pbuf_free>
        return;
 800e6b4:	e046      	b.n	800e744 <fsm_sdata+0xf4>
    }

    outp = (u_char*)p->payload;
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	685b      	ldr	r3, [r3, #4]
 800e6ba:	613b      	str	r3, [r7, #16]
    if (datalen && data != NULL) { /* && data != outp + PPP_HDRLEN + HEADERLEN)  -- was only for fsm_sconfreq() */
 800e6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d009      	beq.n	800e6d6 <fsm_sdata+0x86>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d006      	beq.n	800e6d6 <fsm_sdata+0x86>
      MEMCPY(outp + PPP_HDRLEN + HEADERLEN, data, datalen);
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	3308      	adds	r3, #8
 800e6cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6ce:	6879      	ldr	r1, [r7, #4]
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f005 fbcb 	bl	8013e6c <memcpy>
    }
    MAKEHEADER(outp, f->protocol);
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	1c5a      	adds	r2, r3, #1
 800e6da:	613a      	str	r2, [r7, #16]
 800e6dc:	22ff      	movs	r2, #255	; 0xff
 800e6de:	701a      	strb	r2, [r3, #0]
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	1c5a      	adds	r2, r3, #1
 800e6e4:	613a      	str	r2, [r7, #16]
 800e6e6:	2203      	movs	r2, #3
 800e6e8:	701a      	strb	r2, [r3, #0]
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	1c5a      	adds	r2, r3, #1
 800e6ee:	613a      	str	r2, [r7, #16]
 800e6f0:	68fa      	ldr	r2, [r7, #12]
 800e6f2:	89d2      	ldrh	r2, [r2, #14]
 800e6f4:	0a12      	lsrs	r2, r2, #8
 800e6f6:	b292      	uxth	r2, r2
 800e6f8:	b2d2      	uxtb	r2, r2
 800e6fa:	701a      	strb	r2, [r3, #0]
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	1c5a      	adds	r2, r3, #1
 800e700:	613a      	str	r2, [r7, #16]
 800e702:	68fa      	ldr	r2, [r7, #12]
 800e704:	89d2      	ldrh	r2, [r2, #14]
 800e706:	b2d2      	uxtb	r2, r2
 800e708:	701a      	strb	r2, [r3, #0]
    PUTCHAR(code, outp);
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	1c5a      	adds	r2, r3, #1
 800e70e:	613a      	str	r2, [r7, #16]
 800e710:	7afa      	ldrb	r2, [r7, #11]
 800e712:	701a      	strb	r2, [r3, #0]
    PUTCHAR(id, outp);
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	1c5a      	adds	r2, r3, #1
 800e718:	613a      	str	r2, [r7, #16]
 800e71a:	7aba      	ldrb	r2, [r7, #10]
 800e71c:	701a      	strb	r2, [r3, #0]
    PUTSHORT(outlen, outp);
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	1c5a      	adds	r2, r3, #1
 800e722:	613a      	str	r2, [r7, #16]
 800e724:	69ba      	ldr	r2, [r7, #24]
 800e726:	1212      	asrs	r2, r2, #8
 800e728:	b2d2      	uxtb	r2, r2
 800e72a:	701a      	strb	r2, [r3, #0]
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	1c5a      	adds	r2, r3, #1
 800e730:	613a      	str	r2, [r7, #16]
 800e732:	69ba      	ldr	r2, [r7, #24]
 800e734:	b2d2      	uxtb	r2, r2
 800e736:	701a      	strb	r2, [r3, #0]
    ppp_write(pcb, p);
 800e738:	6979      	ldr	r1, [r7, #20]
 800e73a:	69f8      	ldr	r0, [r7, #28]
 800e73c:	f003 fdcc 	bl	80122d8 <ppp_write>
 800e740:	e000      	b.n	800e744 <fsm_sdata+0xf4>
        return;
 800e742:	bf00      	nop
}
 800e744:	3720      	adds	r7, #32
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
	...

0800e74c <ipcp_init>:
#endif /* PPP_OPTIONS */

/*
 * ipcp_init - Initialize IPCP.
 */
static void ipcp_init(ppp_pcb *pcb) {
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b086      	sub	sp, #24
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	33f8      	adds	r3, #248	; 0xf8
 800e758:	617b      	str	r3, [r7, #20]

    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800e760:	613b      	str	r3, [r7, #16]
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800e768:	60fb      	str	r3, [r7, #12]

    f->pcb = pcb;
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	687a      	ldr	r2, [r7, #4]
 800e76e:	601a      	str	r2, [r3, #0]
    f->protocol = PPP_IPCP;
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	f248 0221 	movw	r2, #32801	; 0x8021
 800e776:	81da      	strh	r2, [r3, #14]
    f->callbacks = &ipcp_callbacks;
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	4a15      	ldr	r2, [pc, #84]	; (800e7d0 <ipcp_init+0x84>)
 800e77c:	605a      	str	r2, [r3, #4]
    fsm_init(f);
 800e77e:	6978      	ldr	r0, [r7, #20]
 800e780:	f7ff f88c 	bl	800d89c <fsm_init>
     * Some 3G modems use repeated IPCP NAKs as a way of stalling
     * until they can contact a server on the network, so we increase
     * the default number of NAKs we accept before we start treating
     * them as rejects.
     */
    f->maxnakloops = 100;
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	2264      	movs	r2, #100	; 0x64
 800e788:	75da      	strb	r2, [r3, #23]
#if 0 /* Not necessary, everything is cleared in ppp_new() */
    memset(wo, 0, sizeof(*wo));
    memset(ao, 0, sizeof(*ao));
#endif /* 0 */

    wo->neg_addr = wo->old_addrs = 1;
 800e78a:	693a      	ldr	r2, [r7, #16]
 800e78c:	7813      	ldrb	r3, [r2, #0]
 800e78e:	f043 0302 	orr.w	r3, r3, #2
 800e792:	7013      	strb	r3, [r2, #0]
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e79c:	b2d9      	uxtb	r1, r3
 800e79e:	693a      	ldr	r2, [r7, #16]
 800e7a0:	7813      	ldrb	r3, [r2, #0]
 800e7a2:	f361 0300 	bfi	r3, r1, #0, #1
 800e7a6:	7013      	strb	r3, [r2, #0]
#if 0 /* UNUSED */
    /* wanting default route by default */
    wo->default_route = 1;
#endif /* UNUSED */

    ao->neg_addr = ao->old_addrs = 1;
 800e7a8:	68fa      	ldr	r2, [r7, #12]
 800e7aa:	7813      	ldrb	r3, [r2, #0]
 800e7ac:	f043 0302 	orr.w	r3, r3, #2
 800e7b0:	7013      	strb	r3, [r2, #0]
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	781b      	ldrb	r3, [r3, #0]
 800e7b6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e7ba:	b2d9      	uxtb	r1, r3
 800e7bc:	68fa      	ldr	r2, [r7, #12]
 800e7be:	7813      	ldrb	r3, [r2, #0]
 800e7c0:	f361 0300 	bfi	r3, r1, #0, #1
 800e7c4:	7013      	strb	r3, [r2, #0]
     * and defaultroute options.
     */
    ao->proxy_arp = 1;
    ao->default_route = 1;
#endif /* UNUSED */
}
 800e7c6:	bf00      	nop
 800e7c8:	3718      	adds	r7, #24
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	08017b38 	.word	0x08017b38

0800e7d4 <ipcp_open>:


/*
 * ipcp_open - IPCP is allowed to come up.
 */
static void ipcp_open(ppp_pcb *pcb) {
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b084      	sub	sp, #16
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	33f8      	adds	r3, #248	; 0xf8
 800e7e0:	60fb      	str	r3, [r7, #12]
    fsm_open(f);
 800e7e2:	68f8      	ldr	r0, [r7, #12]
 800e7e4:	f7ff f8f0 	bl	800d9c8 <fsm_open>
    pcb->ipcp_is_open = 1;
 800e7e8:	687a      	ldr	r2, [r7, #4]
 800e7ea:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800e7ee:	f043 0302 	orr.w	r3, r3, #2
 800e7f2:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
}
 800e7f6:	bf00      	nop
 800e7f8:	3710      	adds	r7, #16
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}

0800e7fe <ipcp_close>:


/*
 * ipcp_close - Take IPCP down.
 */
static void ipcp_close(ppp_pcb *pcb, const char *reason) {
 800e7fe:	b580      	push	{r7, lr}
 800e800:	b084      	sub	sp, #16
 800e802:	af00      	add	r7, sp, #0
 800e804:	6078      	str	r0, [r7, #4]
 800e806:	6039      	str	r1, [r7, #0]
    fsm *f = &pcb->ipcp_fsm;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	33f8      	adds	r3, #248	; 0xf8
 800e80c:	60fb      	str	r3, [r7, #12]
    fsm_close(f, reason);
 800e80e:	6839      	ldr	r1, [r7, #0]
 800e810:	68f8      	ldr	r0, [r7, #12]
 800e812:	f7ff f9a1 	bl	800db58 <fsm_close>
}
 800e816:	bf00      	nop
 800e818:	3710      	adds	r7, #16
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}

0800e81e <ipcp_lowerup>:


/*
 * ipcp_lowerup - The lower layer is up.
 */
static void ipcp_lowerup(ppp_pcb *pcb) {
 800e81e:	b580      	push	{r7, lr}
 800e820:	b084      	sub	sp, #16
 800e822:	af00      	add	r7, sp, #0
 800e824:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	33f8      	adds	r3, #248	; 0xf8
 800e82a:	60fb      	str	r3, [r7, #12]
    fsm_lowerup(f);
 800e82c:	68f8      	ldr	r0, [r7, #12]
 800e82e:	f7ff f852 	bl	800d8d6 <fsm_lowerup>
}
 800e832:	bf00      	nop
 800e834:	3710      	adds	r7, #16
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}

0800e83a <ipcp_lowerdown>:


/*
 * ipcp_lowerdown - The lower layer is down.
 */
static void ipcp_lowerdown(ppp_pcb *pcb) {
 800e83a:	b580      	push	{r7, lr}
 800e83c:	b084      	sub	sp, #16
 800e83e:	af00      	add	r7, sp, #0
 800e840:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	33f8      	adds	r3, #248	; 0xf8
 800e846:	60fb      	str	r3, [r7, #12]
    fsm_lowerdown(f);
 800e848:	68f8      	ldr	r0, [r7, #12]
 800e84a:	f7ff f869 	bl	800d920 <fsm_lowerdown>
}
 800e84e:	bf00      	nop
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <ipcp_input>:


/*
 * ipcp_input - Input IPCP packet.
 */
static void ipcp_input(ppp_pcb *pcb, u_char *p, int len) {
 800e856:	b580      	push	{r7, lr}
 800e858:	b086      	sub	sp, #24
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	60f8      	str	r0, [r7, #12]
 800e85e:	60b9      	str	r1, [r7, #8]
 800e860:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	33f8      	adds	r3, #248	; 0xf8
 800e866:	617b      	str	r3, [r7, #20]
    fsm_input(f, p, len);
 800e868:	687a      	ldr	r2, [r7, #4]
 800e86a:	68b9      	ldr	r1, [r7, #8]
 800e86c:	6978      	ldr	r0, [r7, #20]
 800e86e:	f7ff fa57 	bl	800dd20 <fsm_input>
}
 800e872:	bf00      	nop
 800e874:	3718      	adds	r7, #24
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}

0800e87a <ipcp_protrej>:
/*
 * ipcp_protrej - A Protocol-Reject was received for IPCP.
 *
 * Pretend the lower layer went down, so we shut up.
 */
static void ipcp_protrej(ppp_pcb *pcb) {
 800e87a:	b580      	push	{r7, lr}
 800e87c:	b084      	sub	sp, #16
 800e87e:	af00      	add	r7, sp, #0
 800e880:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	33f8      	adds	r3, #248	; 0xf8
 800e886:	60fb      	str	r3, [r7, #12]
    fsm_lowerdown(f);
 800e888:	68f8      	ldr	r0, [r7, #12]
 800e88a:	f7ff f849 	bl	800d920 <fsm_lowerdown>
}
 800e88e:	bf00      	nop
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}

0800e896 <ipcp_resetci>:

/*
 * ipcp_resetci - Reset our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static void ipcp_resetci(fsm *f) {
 800e896:	b580      	push	{r7, lr}
 800e898:	b086      	sub	sp, #24
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	617b      	str	r3, [r7, #20]
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800e8aa:	613b      	str	r3, [r7, #16]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800e8b2:	60fb      	str	r3, [r7, #12]
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800e8ba:	60bb      	str	r3, [r7, #8]

    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	f003 0301 	and.w	r3, r3, #1
 800e8c4:	b2db      	uxtb	r3, r3
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d106      	bne.n	800e8d8 <ipcp_resetci+0x42>
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	781b      	ldrb	r3, [r3, #0]
 800e8ce:	f003 0302 	and.w	r3, r3, #2
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d00f      	beq.n	800e8f8 <ipcp_resetci+0x62>
	(ao->neg_addr || ao->old_addrs);
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	f003 0301 	and.w	r3, r3, #1
 800e8e0:	b2db      	uxtb	r3, r3
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d106      	bne.n	800e8f4 <ipcp_resetci+0x5e>
	(ao->neg_addr || ao->old_addrs);
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	f003 0302 	and.w	r3, r3, #2
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d001      	beq.n	800e8f8 <ipcp_resetci+0x62>
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	e000      	b.n	800e8fa <ipcp_resetci+0x64>
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	b2db      	uxtb	r3, r3
 800e8fc:	f003 0301 	and.w	r3, r3, #1
 800e900:	b2d9      	uxtb	r1, r3
 800e902:	693a      	ldr	r2, [r7, #16]
 800e904:	7813      	ldrb	r3, [r2, #0]
 800e906:	f361 0382 	bfi	r3, r1, #2, #1
 800e90a:	7013      	strb	r3, [r2, #0]
    if (wo->ouraddr == 0)
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d104      	bne.n	800e91e <ipcp_resetci+0x88>
	wo->accept_local = 1;
 800e914:	693a      	ldr	r2, [r7, #16]
 800e916:	7813      	ldrb	r3, [r2, #0]
 800e918:	f043 0308 	orr.w	r3, r3, #8
 800e91c:	7013      	strb	r3, [r2, #0]
    if (wo->hisaddr == 0)
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	689b      	ldr	r3, [r3, #8]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d104      	bne.n	800e930 <ipcp_resetci+0x9a>
	wo->accept_remote = 1;
 800e926:	693a      	ldr	r2, [r7, #16]
 800e928:	7813      	ldrb	r3, [r2, #0]
 800e92a:	f043 0310 	orr.w	r3, r3, #16
 800e92e:	7013      	strb	r3, [r2, #0]
#if LWIP_DNS
    wo->req_dns1 = wo->req_dns2 = pcb->settings.usepeerdns;	/* Request DNS addresses from the peer */
#endif /* LWIP_DNS */
    *go = *wo;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	693a      	ldr	r2, [r7, #16]
 800e934:	ca07      	ldmia	r2, {r0, r1, r2}
 800e936:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (!pcb->ask_for_local)
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e940:	f003 0301 	and.w	r3, r3, #1
 800e944:	b2db      	uxtb	r3, r3
 800e946:	2b00      	cmp	r3, #0
 800e948:	d102      	bne.n	800e950 <ipcp_resetci+0xba>
	go->ouraddr = 0;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2200      	movs	r2, #0
 800e94e:	605a      	str	r2, [r3, #4]
	if (wo->hisaddr) {
	    wo->accept_remote = 0;
	}
    }
#endif /* UNUSED */
    BZERO(&pcb->ipcp_hisoptions, sizeof(ipcp_options));
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800e956:	220c      	movs	r2, #12
 800e958:	2100      	movs	r1, #0
 800e95a:	4618      	mov	r0, r3
 800e95c:	f005 faab 	bl	8013eb6 <memset>
}
 800e960:	bf00      	nop
 800e962:	3718      	adds	r7, #24
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}

0800e968 <ipcp_cilen>:

/*
 * ipcp_cilen - Return length of our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static int ipcp_cilen(fsm *f) {
 800e968:	b480      	push	{r7}
 800e96a:	b087      	sub	sp, #28
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	617b      	str	r3, [r7, #20]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800e97c:	613b      	str	r3, [r7, #16]
#if VJ_SUPPORT
    ipcp_options *wo = &pcb->ipcp_wantoptions;
#endif /* VJ_SUPPORT */
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800e984:	60fb      	str	r3, [r7, #12]

    /*
     * First see if we want to change our options to the old
     * forms because we have received old forms from the peer.
     */
    if (go->neg_addr && go->old_addrs && !ho->neg_addr && ho->old_addrs)
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	f003 0301 	and.w	r3, r3, #1
 800e98e:	b2db      	uxtb	r3, r3
 800e990:	2b00      	cmp	r3, #0
 800e992:	d019      	beq.n	800e9c8 <ipcp_cilen+0x60>
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	f003 0302 	and.w	r3, r3, #2
 800e99c:	b2db      	uxtb	r3, r3
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d012      	beq.n	800e9c8 <ipcp_cilen+0x60>
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	f003 0301 	and.w	r3, r3, #1
 800e9aa:	b2db      	uxtb	r3, r3
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d10b      	bne.n	800e9c8 <ipcp_cilen+0x60>
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	781b      	ldrb	r3, [r3, #0]
 800e9b4:	f003 0302 	and.w	r3, r3, #2
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d004      	beq.n	800e9c8 <ipcp_cilen+0x60>
	go->neg_addr = 0;
 800e9be:	693a      	ldr	r2, [r7, #16]
 800e9c0:	7813      	ldrb	r3, [r2, #0]
 800e9c2:	f36f 0300 	bfc	r3, #0, #1
 800e9c6:	7013      	strb	r3, [r2, #0]
	    go->vj_protocol = ho->vj_protocol;
	}
    }
#endif /* VJ_SUPPORT */

    return (LENCIADDRS(!go->neg_addr && go->old_addrs) +
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	781b      	ldrb	r3, [r3, #0]
 800e9cc:	f003 0301 	and.w	r3, r3, #1
 800e9d0:	b2db      	uxtb	r3, r3
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d108      	bne.n	800e9e8 <ipcp_cilen+0x80>
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	f003 0302 	and.w	r3, r3, #2
 800e9de:	b2db      	uxtb	r3, r3
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d001      	beq.n	800e9e8 <ipcp_cilen+0x80>
 800e9e4:	220a      	movs	r2, #10
 800e9e6:	e000      	b.n	800e9ea <ipcp_cilen+0x82>
 800e9e8:	2200      	movs	r2, #0
#if VJ_SUPPORT
	    LENCIVJ(go->neg_vj, go->old_vj) +
#endif /* VJ_SUPPORT */
	    LENCIADDR(go->neg_addr) +
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	781b      	ldrb	r3, [r3, #0]
 800e9ee:	f003 0301 	and.w	r3, r3, #1
 800e9f2:	b2db      	uxtb	r3, r3
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d001      	beq.n	800e9fc <ipcp_cilen+0x94>
 800e9f8:	2306      	movs	r3, #6
 800e9fa:	e000      	b.n	800e9fe <ipcp_cilen+0x96>
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	4413      	add	r3, r2
#if 0 /* UNUSED - WINS */
	    LENCIWINS(go->winsaddr[0]) +
	    LENCIWINS(go->winsaddr[1]) +
#endif /* UNUSED - WINS */
	    0);
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	371c      	adds	r7, #28
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr

0800ea0c <ipcp_addci>:

/*
 * ipcp_addci - Add our desired CIs to a packet.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static void ipcp_addci(fsm *f, u_char *ucp, int *lenp) {
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b08a      	sub	sp, #40	; 0x28
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	623b      	str	r3, [r7, #32]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800ea1e:	6a3b      	ldr	r3, [r7, #32]
 800ea20:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ea24:	61fb      	str	r3, [r7, #28]
    int len = *lenp;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	627b      	str	r3, [r7, #36]	; 0x24
	} else \
	    addr = 0; \
    }
#endif /* UNUSED - WINS */

    ADDCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	f003 0301 	and.w	r3, r3, #1
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d15e      	bne.n	800eaf8 <ipcp_addci+0xec>
 800ea3a:	69fb      	ldr	r3, [r7, #28]
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	f003 0302 	and.w	r3, r3, #2
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d057      	beq.n	800eaf8 <ipcp_addci+0xec>
 800ea48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4a:	2b09      	cmp	r3, #9
 800ea4c:	dd4f      	ble.n	800eaee <ipcp_addci+0xe2>
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	1c5a      	adds	r2, r3, #1
 800ea52:	60ba      	str	r2, [r7, #8]
 800ea54:	2201      	movs	r2, #1
 800ea56:	701a      	strb	r2, [r3, #0]
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	1c5a      	adds	r2, r3, #1
 800ea5c:	60ba      	str	r2, [r7, #8]
 800ea5e:	220a      	movs	r2, #10
 800ea60:	701a      	strb	r2, [r3, #0]
 800ea62:	69fb      	ldr	r3, [r7, #28]
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7f5 f9eb 	bl	8003e42 <lwip_htonl>
 800ea6c:	61b8      	str	r0, [r7, #24]
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	1c5a      	adds	r2, r3, #1
 800ea72:	60ba      	str	r2, [r7, #8]
 800ea74:	69ba      	ldr	r2, [r7, #24]
 800ea76:	0e12      	lsrs	r2, r2, #24
 800ea78:	b2d2      	uxtb	r2, r2
 800ea7a:	701a      	strb	r2, [r3, #0]
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	1c5a      	adds	r2, r3, #1
 800ea80:	60ba      	str	r2, [r7, #8]
 800ea82:	69ba      	ldr	r2, [r7, #24]
 800ea84:	0c12      	lsrs	r2, r2, #16
 800ea86:	b2d2      	uxtb	r2, r2
 800ea88:	701a      	strb	r2, [r3, #0]
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	1c5a      	adds	r2, r3, #1
 800ea8e:	60ba      	str	r2, [r7, #8]
 800ea90:	69ba      	ldr	r2, [r7, #24]
 800ea92:	0a12      	lsrs	r2, r2, #8
 800ea94:	b2d2      	uxtb	r2, r2
 800ea96:	701a      	strb	r2, [r3, #0]
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	1c5a      	adds	r2, r3, #1
 800ea9c:	60ba      	str	r2, [r7, #8]
 800ea9e:	69ba      	ldr	r2, [r7, #24]
 800eaa0:	b2d2      	uxtb	r2, r2
 800eaa2:	701a      	strb	r2, [r3, #0]
 800eaa4:	69fb      	ldr	r3, [r7, #28]
 800eaa6:	689b      	ldr	r3, [r3, #8]
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7f5 f9ca 	bl	8003e42 <lwip_htonl>
 800eaae:	61b8      	str	r0, [r7, #24]
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	1c5a      	adds	r2, r3, #1
 800eab4:	60ba      	str	r2, [r7, #8]
 800eab6:	69ba      	ldr	r2, [r7, #24]
 800eab8:	0e12      	lsrs	r2, r2, #24
 800eaba:	b2d2      	uxtb	r2, r2
 800eabc:	701a      	strb	r2, [r3, #0]
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	1c5a      	adds	r2, r3, #1
 800eac2:	60ba      	str	r2, [r7, #8]
 800eac4:	69ba      	ldr	r2, [r7, #24]
 800eac6:	0c12      	lsrs	r2, r2, #16
 800eac8:	b2d2      	uxtb	r2, r2
 800eaca:	701a      	strb	r2, [r3, #0]
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	1c5a      	adds	r2, r3, #1
 800ead0:	60ba      	str	r2, [r7, #8]
 800ead2:	69ba      	ldr	r2, [r7, #24]
 800ead4:	0a12      	lsrs	r2, r2, #8
 800ead6:	b2d2      	uxtb	r2, r2
 800ead8:	701a      	strb	r2, [r3, #0]
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	1c5a      	adds	r2, r3, #1
 800eade:	60ba      	str	r2, [r7, #8]
 800eae0:	69ba      	ldr	r2, [r7, #24]
 800eae2:	b2d2      	uxtb	r2, r2
 800eae4:	701a      	strb	r2, [r3, #0]
 800eae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae8:	3b0a      	subs	r3, #10
 800eaea:	627b      	str	r3, [r7, #36]	; 0x24
 800eaec:	e004      	b.n	800eaf8 <ipcp_addci+0xec>
 800eaee:	69fa      	ldr	r2, [r7, #28]
 800eaf0:	7813      	ldrb	r3, [r2, #0]
 800eaf2:	f36f 0341 	bfc	r3, #1, #1
 800eaf6:	7013      	strb	r3, [r2, #0]
#if VJ_SUPPORT
    ADDCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    ADDCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800eaf8:	69fb      	ldr	r3, [r7, #28]
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	f003 0301 	and.w	r3, r3, #1
 800eb00:	b2db      	uxtb	r3, r3
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d036      	beq.n	800eb74 <ipcp_addci+0x168>
 800eb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb08:	2b05      	cmp	r3, #5
 800eb0a:	dd2e      	ble.n	800eb6a <ipcp_addci+0x15e>
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	1c5a      	adds	r2, r3, #1
 800eb10:	60ba      	str	r2, [r7, #8]
 800eb12:	2203      	movs	r2, #3
 800eb14:	701a      	strb	r2, [r3, #0]
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	1c5a      	adds	r2, r3, #1
 800eb1a:	60ba      	str	r2, [r7, #8]
 800eb1c:	2206      	movs	r2, #6
 800eb1e:	701a      	strb	r2, [r3, #0]
 800eb20:	69fb      	ldr	r3, [r7, #28]
 800eb22:	685b      	ldr	r3, [r3, #4]
 800eb24:	4618      	mov	r0, r3
 800eb26:	f7f5 f98c 	bl	8003e42 <lwip_htonl>
 800eb2a:	6178      	str	r0, [r7, #20]
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	1c5a      	adds	r2, r3, #1
 800eb30:	60ba      	str	r2, [r7, #8]
 800eb32:	697a      	ldr	r2, [r7, #20]
 800eb34:	0e12      	lsrs	r2, r2, #24
 800eb36:	b2d2      	uxtb	r2, r2
 800eb38:	701a      	strb	r2, [r3, #0]
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	1c5a      	adds	r2, r3, #1
 800eb3e:	60ba      	str	r2, [r7, #8]
 800eb40:	697a      	ldr	r2, [r7, #20]
 800eb42:	0c12      	lsrs	r2, r2, #16
 800eb44:	b2d2      	uxtb	r2, r2
 800eb46:	701a      	strb	r2, [r3, #0]
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	1c5a      	adds	r2, r3, #1
 800eb4c:	60ba      	str	r2, [r7, #8]
 800eb4e:	697a      	ldr	r2, [r7, #20]
 800eb50:	0a12      	lsrs	r2, r2, #8
 800eb52:	b2d2      	uxtb	r2, r2
 800eb54:	701a      	strb	r2, [r3, #0]
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	1c5a      	adds	r2, r3, #1
 800eb5a:	60ba      	str	r2, [r7, #8]
 800eb5c:	697a      	ldr	r2, [r7, #20]
 800eb5e:	b2d2      	uxtb	r2, r2
 800eb60:	701a      	strb	r2, [r3, #0]
 800eb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb64:	3b06      	subs	r3, #6
 800eb66:	627b      	str	r3, [r7, #36]	; 0x24
 800eb68:	e004      	b.n	800eb74 <ipcp_addci+0x168>
 800eb6a:	69fa      	ldr	r2, [r7, #28]
 800eb6c:	7813      	ldrb	r3, [r2, #0]
 800eb6e:	f36f 0300 	bfc	r3, #0, #1
 800eb72:	7013      	strb	r3, [r2, #0]
    ADDCIWINS(CI_MS_WINS1, go->winsaddr[0]);

    ADDCIWINS(CI_MS_WINS2, go->winsaddr[1]);
#endif /* UNUSED - WINS */
    
    *lenp -= len;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb7a:	1ad2      	subs	r2, r2, r3
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	601a      	str	r2, [r3, #0]
}
 800eb80:	bf00      	nop
 800eb82:	3728      	adds	r7, #40	; 0x28
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <ipcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int ipcp_ackci(fsm *f, u_char *p, int len) {
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b08a      	sub	sp, #40	; 0x28
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	627b      	str	r3, [r7, #36]	; 0x24
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800eb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800eba0:	623b      	str	r3, [r7, #32]
	if (addr != cilong) \
	    goto bad; \
    }
#endif /* UNUSED - WINS */

    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800eba2:	6a3b      	ldr	r3, [r7, #32]
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	f003 0301 	and.w	r3, r3, #1
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d179      	bne.n	800eca4 <ipcp_ackci+0x11c>
 800ebb0:	6a3b      	ldr	r3, [r7, #32]
 800ebb2:	781b      	ldrb	r3, [r3, #0]
 800ebb4:	f003 0302 	and.w	r3, r3, #2
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d072      	beq.n	800eca4 <ipcp_ackci+0x11c>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	3b0a      	subs	r3, #10
 800ebc2:	607b      	str	r3, [r7, #4]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	f2c0 80bb 	blt.w	800ed42 <ipcp_ackci+0x1ba>
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	1c5a      	adds	r2, r3, #1
 800ebd0:	60ba      	str	r2, [r7, #8]
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	83fb      	strh	r3, [r7, #30]
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	1c5a      	adds	r2, r3, #1
 800ebda:	60ba      	str	r2, [r7, #8]
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	83bb      	strh	r3, [r7, #28]
 800ebe0:	8bbb      	ldrh	r3, [r7, #28]
 800ebe2:	2b0a      	cmp	r3, #10
 800ebe4:	f040 80b8 	bne.w	800ed58 <ipcp_ackci+0x1d0>
 800ebe8:	8bfb      	ldrh	r3, [r7, #30]
 800ebea:	2b01      	cmp	r3, #1
 800ebec:	f040 80b4 	bne.w	800ed58 <ipcp_ackci+0x1d0>
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	1c5a      	adds	r2, r3, #1
 800ebf4:	60ba      	str	r2, [r7, #8]
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	021b      	lsls	r3, r3, #8
 800ebfa:	61bb      	str	r3, [r7, #24]
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	1c5a      	adds	r2, r3, #1
 800ec00:	60ba      	str	r2, [r7, #8]
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	461a      	mov	r2, r3
 800ec06:	69bb      	ldr	r3, [r7, #24]
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	61bb      	str	r3, [r7, #24]
 800ec0c:	69bb      	ldr	r3, [r7, #24]
 800ec0e:	021b      	lsls	r3, r3, #8
 800ec10:	61bb      	str	r3, [r7, #24]
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	1c5a      	adds	r2, r3, #1
 800ec16:	60ba      	str	r2, [r7, #8]
 800ec18:	781b      	ldrb	r3, [r3, #0]
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	69bb      	ldr	r3, [r7, #24]
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	61bb      	str	r3, [r7, #24]
 800ec22:	69bb      	ldr	r3, [r7, #24]
 800ec24:	021b      	lsls	r3, r3, #8
 800ec26:	61bb      	str	r3, [r7, #24]
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	1c5a      	adds	r2, r3, #1
 800ec2c:	60ba      	str	r2, [r7, #8]
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	461a      	mov	r2, r3
 800ec32:	69bb      	ldr	r3, [r7, #24]
 800ec34:	4313      	orrs	r3, r2
 800ec36:	61bb      	str	r3, [r7, #24]
 800ec38:	69b8      	ldr	r0, [r7, #24]
 800ec3a:	f7f5 f902 	bl	8003e42 <lwip_htonl>
 800ec3e:	6178      	str	r0, [r7, #20]
 800ec40:	6a3b      	ldr	r3, [r7, #32]
 800ec42:	685a      	ldr	r2, [r3, #4]
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d17d      	bne.n	800ed46 <ipcp_ackci+0x1be>
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	1c5a      	adds	r2, r3, #1
 800ec4e:	60ba      	str	r2, [r7, #8]
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	021b      	lsls	r3, r3, #8
 800ec54:	61bb      	str	r3, [r7, #24]
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	1c5a      	adds	r2, r3, #1
 800ec5a:	60ba      	str	r2, [r7, #8]
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	461a      	mov	r2, r3
 800ec60:	69bb      	ldr	r3, [r7, #24]
 800ec62:	4313      	orrs	r3, r2
 800ec64:	61bb      	str	r3, [r7, #24]
 800ec66:	69bb      	ldr	r3, [r7, #24]
 800ec68:	021b      	lsls	r3, r3, #8
 800ec6a:	61bb      	str	r3, [r7, #24]
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	1c5a      	adds	r2, r3, #1
 800ec70:	60ba      	str	r2, [r7, #8]
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	461a      	mov	r2, r3
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	4313      	orrs	r3, r2
 800ec7a:	61bb      	str	r3, [r7, #24]
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	021b      	lsls	r3, r3, #8
 800ec80:	61bb      	str	r3, [r7, #24]
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	1c5a      	adds	r2, r3, #1
 800ec86:	60ba      	str	r2, [r7, #8]
 800ec88:	781b      	ldrb	r3, [r3, #0]
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	69bb      	ldr	r3, [r7, #24]
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	61bb      	str	r3, [r7, #24]
 800ec92:	69b8      	ldr	r0, [r7, #24]
 800ec94:	f7f5 f8d5 	bl	8003e42 <lwip_htonl>
 800ec98:	6178      	str	r0, [r7, #20]
 800ec9a:	6a3b      	ldr	r3, [r7, #32]
 800ec9c:	689a      	ldr	r2, [r3, #8]
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d152      	bne.n	800ed4a <ipcp_ackci+0x1c2>
#if VJ_SUPPORT
    ACKCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800eca4:	6a3b      	ldr	r3, [r7, #32]
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	f003 0301 	and.w	r3, r3, #1
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d042      	beq.n	800ed38 <ipcp_ackci+0x1b0>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	3b06      	subs	r3, #6
 800ecb6:	607b      	str	r3, [r7, #4]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	db47      	blt.n	800ed4e <ipcp_ackci+0x1c6>
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	1c5a      	adds	r2, r3, #1
 800ecc2:	60ba      	str	r2, [r7, #8]
 800ecc4:	781b      	ldrb	r3, [r3, #0]
 800ecc6:	83fb      	strh	r3, [r7, #30]
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	1c5a      	adds	r2, r3, #1
 800eccc:	60ba      	str	r2, [r7, #8]
 800ecce:	781b      	ldrb	r3, [r3, #0]
 800ecd0:	83bb      	strh	r3, [r7, #28]
 800ecd2:	8bbb      	ldrh	r3, [r7, #28]
 800ecd4:	2b06      	cmp	r3, #6
 800ecd6:	d13f      	bne.n	800ed58 <ipcp_ackci+0x1d0>
 800ecd8:	8bfb      	ldrh	r3, [r7, #30]
 800ecda:	2b03      	cmp	r3, #3
 800ecdc:	d13c      	bne.n	800ed58 <ipcp_ackci+0x1d0>
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	1c5a      	adds	r2, r3, #1
 800ece2:	60ba      	str	r2, [r7, #8]
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	021b      	lsls	r3, r3, #8
 800ece8:	613b      	str	r3, [r7, #16]
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	1c5a      	adds	r2, r3, #1
 800ecee:	60ba      	str	r2, [r7, #8]
 800ecf0:	781b      	ldrb	r3, [r3, #0]
 800ecf2:	461a      	mov	r2, r3
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	4313      	orrs	r3, r2
 800ecf8:	613b      	str	r3, [r7, #16]
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	021b      	lsls	r3, r3, #8
 800ecfe:	613b      	str	r3, [r7, #16]
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	1c5a      	adds	r2, r3, #1
 800ed04:	60ba      	str	r2, [r7, #8]
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	461a      	mov	r2, r3
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	4313      	orrs	r3, r2
 800ed0e:	613b      	str	r3, [r7, #16]
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	021b      	lsls	r3, r3, #8
 800ed14:	613b      	str	r3, [r7, #16]
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	1c5a      	adds	r2, r3, #1
 800ed1a:	60ba      	str	r2, [r7, #8]
 800ed1c:	781b      	ldrb	r3, [r3, #0]
 800ed1e:	461a      	mov	r2, r3
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	4313      	orrs	r3, r2
 800ed24:	613b      	str	r3, [r7, #16]
 800ed26:	6938      	ldr	r0, [r7, #16]
 800ed28:	f7f5 f88b 	bl	8003e42 <lwip_htonl>
 800ed2c:	6178      	str	r0, [r7, #20]
 800ed2e:	6a3b      	ldr	r3, [r7, #32]
 800ed30:	685a      	ldr	r2, [r3, #4]
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d10c      	bne.n	800ed52 <ipcp_ackci+0x1ca>
#endif /* UNUSED - WINS */

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d10b      	bne.n	800ed56 <ipcp_ackci+0x1ce>
	goto bad;
    return (1);
 800ed3e:	2301      	movs	r3, #1
 800ed40:	e00b      	b.n	800ed5a <ipcp_ackci+0x1d2>
    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800ed42:	bf00      	nop
 800ed44:	e008      	b.n	800ed58 <ipcp_ackci+0x1d0>
 800ed46:	bf00      	nop
 800ed48:	e006      	b.n	800ed58 <ipcp_ackci+0x1d0>
 800ed4a:	bf00      	nop
 800ed4c:	e004      	b.n	800ed58 <ipcp_ackci+0x1d0>
    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800ed4e:	bf00      	nop
 800ed50:	e002      	b.n	800ed58 <ipcp_ackci+0x1d0>
 800ed52:	bf00      	nop
 800ed54:	e000      	b.n	800ed58 <ipcp_ackci+0x1d0>
	goto bad;
 800ed56:	bf00      	nop

bad:
    IPCPDEBUG(("ipcp_ackci: received bad Ack!"));
    return (0);
 800ed58:	2300      	movs	r3, #0
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3728      	adds	r7, #40	; 0x28
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}

0800ed62 <ipcp_nakci>:
 *
 * Returns:
 *	0 - Nak was bad.
 *	1 - Nak was good.
 */
static int ipcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 800ed62:	b590      	push	{r4, r7, lr}
 800ed64:	b093      	sub	sp, #76	; 0x4c
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	60f8      	str	r0, [r7, #12]
 800ed6a:	60b9      	str	r1, [r7, #8]
 800ed6c:	607a      	str	r2, [r7, #4]
 800ed6e:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	647b      	str	r3, [r7, #68]	; 0x44
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800ed76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed78:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ed7c:	643b      	str	r3, [r7, #64]	; 0x40
    u32_t cidnsaddr;
#endif /* LWIP_DNS */
    ipcp_options no;		/* options we've seen Naks for */
    ipcp_options try_;		/* options to request next time */

    BZERO(&no, sizeof(no));
 800ed7e:	f107 031c 	add.w	r3, r7, #28
 800ed82:	220c      	movs	r2, #12
 800ed84:	2100      	movs	r1, #0
 800ed86:	4618      	mov	r0, r3
 800ed88:	f005 f895 	bl	8013eb6 <memset>
    try_ = *go;
 800ed8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ed8e:	f107 0310 	add.w	r3, r7, #16
 800ed92:	ca07      	ldmia	r2, {r0, r1, r2}
 800ed94:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /*
     * Accept the peer's idea of {our,his} address, if different
     * from our idea, only if the accept_{local,remote} flag is set.
     */
    NAKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800ed98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	f003 0301 	and.w	r3, r3, #1
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	f040 8096 	bne.w	800eed4 <ipcp_nakci+0x172>
 800eda8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	f003 0302 	and.w	r3, r3, #2
 800edb0:	b2db      	uxtb	r3, r3
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	f000 808e 	beq.w	800eed4 <ipcp_nakci+0x172>
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	785b      	ldrb	r3, [r3, #1]
 800edbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800edc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800edc4:	2b0a      	cmp	r3, #10
 800edc6:	f040 8085 	bne.w	800eed4 <ipcp_nakci+0x172>
 800edca:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	dc7f      	bgt.n	800eed4 <ipcp_nakci+0x172>
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d17b      	bne.n	800eed4 <ipcp_nakci+0x172>
 800eddc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	1ad3      	subs	r3, r2, r3
 800ede4:	607b      	str	r3, [r7, #4]
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	3302      	adds	r3, #2
 800edea:	60bb      	str	r3, [r7, #8]
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	1c5a      	adds	r2, r3, #1
 800edf0:	60ba      	str	r2, [r7, #8]
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	021b      	lsls	r3, r3, #8
 800edf6:	63bb      	str	r3, [r7, #56]	; 0x38
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	1c5a      	adds	r2, r3, #1
 800edfc:	60ba      	str	r2, [r7, #8]
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	461a      	mov	r2, r3
 800ee02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee04:	4313      	orrs	r3, r2
 800ee06:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0a:	021b      	lsls	r3, r3, #8
 800ee0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	1c5a      	adds	r2, r3, #1
 800ee12:	60ba      	str	r2, [r7, #8]
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	461a      	mov	r2, r3
 800ee18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee20:	021b      	lsls	r3, r3, #8
 800ee22:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	1c5a      	adds	r2, r3, #1
 800ee28:	60ba      	str	r2, [r7, #8]
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	461a      	mov	r2, r3
 800ee2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee30:	4313      	orrs	r3, r2
 800ee32:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee36:	f7f5 f804 	bl	8003e42 <lwip_htonl>
 800ee3a:	6378      	str	r0, [r7, #52]	; 0x34
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	1c5a      	adds	r2, r3, #1
 800ee40:	60ba      	str	r2, [r7, #8]
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	021b      	lsls	r3, r3, #8
 800ee46:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	1c5a      	adds	r2, r3, #1
 800ee4c:	60ba      	str	r2, [r7, #8]
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	461a      	mov	r2, r3
 800ee52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee54:	4313      	orrs	r3, r2
 800ee56:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5a:	021b      	lsls	r3, r3, #8
 800ee5c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	1c5a      	adds	r2, r3, #1
 800ee62:	60ba      	str	r2, [r7, #8]
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	461a      	mov	r2, r3
 800ee68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6a:	4313      	orrs	r3, r2
 800ee6c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee70:	021b      	lsls	r3, r3, #8
 800ee72:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	1c5a      	adds	r2, r3, #1
 800ee78:	60ba      	str	r2, [r7, #8]
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee80:	4313      	orrs	r3, r2
 800ee82:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee86:	f7f4 ffdc 	bl	8003e42 <lwip_htonl>
 800ee8a:	6338      	str	r0, [r7, #48]	; 0x30
 800ee8c:	7f3b      	ldrb	r3, [r7, #28]
 800ee8e:	f043 0302 	orr.w	r3, r3, #2
 800ee92:	773b      	strb	r3, [r7, #28]
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d004      	beq.n	800eea4 <ipcp_nakci+0x142>
 800ee9a:	7c3b      	ldrb	r3, [r7, #16]
 800ee9c:	f36f 0341 	bfc	r3, #1, #1
 800eea0:	743b      	strb	r3, [r7, #16]
 800eea2:	e017      	b.n	800eed4 <ipcp_nakci+0x172>
 800eea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	f003 0308 	and.w	r3, r3, #8
 800eeac:	b2db      	uxtb	r3, r3
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d004      	beq.n	800eebc <ipcp_nakci+0x15a>
 800eeb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d001      	beq.n	800eebc <ipcp_nakci+0x15a>
 800eeb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeba:	617b      	str	r3, [r7, #20]
 800eebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	f003 0310 	and.w	r3, r3, #16
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d004      	beq.n	800eed4 <ipcp_nakci+0x172>
 800eeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d001      	beq.n	800eed4 <ipcp_nakci+0x172>
 800eed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed2:	61bb      	str	r3, [r7, #24]
		}
	    }
	    );
#endif /* VJ_SUPPORT */

    NAKCIADDR(CI_ADDR, neg_addr,
 800eed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	f003 0301 	and.w	r3, r3, #1
 800eedc:	b2db      	uxtb	r3, r3
 800eede:	2b00      	cmp	r3, #0
 800eee0:	f000 816e 	beq.w	800f1c0 <ipcp_nakci+0x45e>
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	785b      	ldrb	r3, [r3, #1]
 800eee8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800eeec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eef0:	2b06      	cmp	r3, #6
 800eef2:	f040 8165 	bne.w	800f1c0 <ipcp_nakci+0x45e>
 800eef6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	429a      	cmp	r2, r3
 800eefe:	f300 815f 	bgt.w	800f1c0 <ipcp_nakci+0x45e>
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	2b03      	cmp	r3, #3
 800ef08:	f040 815a 	bne.w	800f1c0 <ipcp_nakci+0x45e>
 800ef0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ef10:	687a      	ldr	r2, [r7, #4]
 800ef12:	1ad3      	subs	r3, r2, r3
 800ef14:	607b      	str	r3, [r7, #4]
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	3302      	adds	r3, #2
 800ef1a:	60bb      	str	r3, [r7, #8]
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	1c5a      	adds	r2, r3, #1
 800ef20:	60ba      	str	r2, [r7, #8]
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	021b      	lsls	r3, r3, #8
 800ef26:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	1c5a      	adds	r2, r3, #1
 800ef2c:	60ba      	str	r2, [r7, #8]
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	461a      	mov	r2, r3
 800ef32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef34:	4313      	orrs	r3, r2
 800ef36:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef3a:	021b      	lsls	r3, r3, #8
 800ef3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	1c5a      	adds	r2, r3, #1
 800ef42:	60ba      	str	r2, [r7, #8]
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	461a      	mov	r2, r3
 800ef48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef4a:	4313      	orrs	r3, r2
 800ef4c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef50:	021b      	lsls	r3, r3, #8
 800ef52:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	1c5a      	adds	r2, r3, #1
 800ef58:	60ba      	str	r2, [r7, #8]
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef60:	4313      	orrs	r3, r2
 800ef62:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef66:	f7f4 ff6c 	bl	8003e42 <lwip_htonl>
 800ef6a:	6378      	str	r0, [r7, #52]	; 0x34
 800ef6c:	7f3b      	ldrb	r3, [r7, #28]
 800ef6e:	f043 0301 	orr.w	r3, r3, #1
 800ef72:	773b      	strb	r3, [r7, #28]
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d008      	beq.n	800ef8c <ipcp_nakci+0x22a>
 800ef7a:	7c3b      	ldrb	r3, [r7, #16]
 800ef7c:	f36f 0300 	bfc	r3, #0, #1
 800ef80:	743b      	strb	r3, [r7, #16]
 800ef82:	7c3b      	ldrb	r3, [r7, #16]
 800ef84:	f36f 0341 	bfc	r3, #1, #1
 800ef88:	743b      	strb	r3, [r7, #16]
 800ef8a:	e119      	b.n	800f1c0 <ipcp_nakci+0x45e>
 800ef8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	f003 0308 	and.w	r3, r3, #8
 800ef94:	b2db      	uxtb	r3, r3
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	f000 8112 	beq.w	800f1c0 <ipcp_nakci+0x45e>
 800ef9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	f000 810e 	beq.w	800f1c0 <ipcp_nakci+0x45e>
 800efa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efa6:	617b      	str	r3, [r7, #20]
     * If they want to negotiate about IP addresses, we comply.
     * If they want us to ask for compression, we refuse.
     * If they want us to ask for ms-dns, we do that, since some
     * peers get huffy if we don't.
     */
    while (len >= CILEN_VOID) {
 800efa8:	e10a      	b.n	800f1c0 <ipcp_nakci+0x45e>
	GETCHAR(citype, p);
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	1c5a      	adds	r2, r3, #1
 800efae:	60ba      	str	r2, [r7, #8]
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GETCHAR(cilen, p);
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	1c5a      	adds	r2, r3, #1
 800efba:	60ba      	str	r2, [r7, #8]
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if ( cilen < CILEN_VOID || (len -= cilen) < 0 )
 800efc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800efc6:	2b01      	cmp	r3, #1
 800efc8:	f240 810c 	bls.w	800f1e4 <ipcp_nakci+0x482>
 800efcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800efd0:	687a      	ldr	r2, [r7, #4]
 800efd2:	1ad3      	subs	r3, r2, r3
 800efd4:	607b      	str	r3, [r7, #4]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	f2c0 8103 	blt.w	800f1e4 <ipcp_nakci+0x482>
	    goto bad;
	next = p + cilen - 2;
 800efde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800efe2:	3b02      	subs	r3, #2
 800efe4:	68ba      	ldr	r2, [r7, #8]
 800efe6:	4413      	add	r3, r2
 800efe8:	62bb      	str	r3, [r7, #40]	; 0x28

	switch (citype) {
 800efea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800efee:	2b01      	cmp	r3, #1
 800eff0:	d003      	beq.n	800effa <ipcp_nakci+0x298>
 800eff2:	2b03      	cmp	r3, #3
 800eff4:	f000 808d 	beq.w	800f112 <ipcp_nakci+0x3b0>
	    if (ciaddr1)
		try_.winsaddr[citype == CI_MS_WINS2] = ciaddr1;
	    break;
#endif /* UNUSED - WINS */
	default:
	    break;
 800eff8:	e0e0      	b.n	800f1bc <ipcp_nakci+0x45a>
	    if ((!go->neg_addr && go->old_addrs) || no.old_addrs
 800effa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	f003 0301 	and.w	r3, r3, #1
 800f002:	b2db      	uxtb	r3, r3
 800f004:	2b00      	cmp	r3, #0
 800f006:	d107      	bne.n	800f018 <ipcp_nakci+0x2b6>
 800f008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f00a:	781b      	ldrb	r3, [r3, #0]
 800f00c:	f003 0302 	and.w	r3, r3, #2
 800f010:	b2db      	uxtb	r3, r3
 800f012:	2b00      	cmp	r3, #0
 800f014:	f040 80e6 	bne.w	800f1e4 <ipcp_nakci+0x482>
 800f018:	7f3b      	ldrb	r3, [r7, #28]
 800f01a:	f003 0302 	and.w	r3, r3, #2
 800f01e:	b2db      	uxtb	r3, r3
 800f020:	2b00      	cmp	r3, #0
 800f022:	f040 80df 	bne.w	800f1e4 <ipcp_nakci+0x482>
		|| cilen != CILEN_ADDRS)
 800f026:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f02a:	2b0a      	cmp	r3, #10
 800f02c:	f040 80da 	bne.w	800f1e4 <ipcp_nakci+0x482>
	    try_.neg_addr = 0;
 800f030:	7c3b      	ldrb	r3, [r7, #16]
 800f032:	f36f 0300 	bfc	r3, #0, #1
 800f036:	743b      	strb	r3, [r7, #16]
	    GETLONG(l, p);
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	1c5a      	adds	r2, r3, #1
 800f03c:	60ba      	str	r2, [r7, #8]
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	021b      	lsls	r3, r3, #8
 800f042:	63bb      	str	r3, [r7, #56]	; 0x38
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	1c5a      	adds	r2, r3, #1
 800f048:	60ba      	str	r2, [r7, #8]
 800f04a:	781b      	ldrb	r3, [r3, #0]
 800f04c:	461a      	mov	r2, r3
 800f04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f050:	4313      	orrs	r3, r2
 800f052:	63bb      	str	r3, [r7, #56]	; 0x38
 800f054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f056:	021b      	lsls	r3, r3, #8
 800f058:	63bb      	str	r3, [r7, #56]	; 0x38
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	1c5a      	adds	r2, r3, #1
 800f05e:	60ba      	str	r2, [r7, #8]
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	461a      	mov	r2, r3
 800f064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f066:	4313      	orrs	r3, r2
 800f068:	63bb      	str	r3, [r7, #56]	; 0x38
 800f06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06c:	021b      	lsls	r3, r3, #8
 800f06e:	63bb      	str	r3, [r7, #56]	; 0x38
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	1c5a      	adds	r2, r3, #1
 800f074:	60ba      	str	r2, [r7, #8]
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	461a      	mov	r2, r3
 800f07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f07c:	4313      	orrs	r3, r2
 800f07e:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr1 = lwip_htonl(l);
 800f080:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f082:	f7f4 fede 	bl	8003e42 <lwip_htonl>
 800f086:	6378      	str	r0, [r7, #52]	; 0x34
	    if (ciaddr1 && go->accept_local)
 800f088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d008      	beq.n	800f0a0 <ipcp_nakci+0x33e>
 800f08e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f090:	781b      	ldrb	r3, [r3, #0]
 800f092:	f003 0308 	and.w	r3, r3, #8
 800f096:	b2db      	uxtb	r3, r3
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d001      	beq.n	800f0a0 <ipcp_nakci+0x33e>
		try_.ouraddr = ciaddr1;
 800f09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f09e:	617b      	str	r3, [r7, #20]
	    GETLONG(l, p);
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	1c5a      	adds	r2, r3, #1
 800f0a4:	60ba      	str	r2, [r7, #8]
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	021b      	lsls	r3, r3, #8
 800f0aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	1c5a      	adds	r2, r3, #1
 800f0b0:	60ba      	str	r2, [r7, #8]
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	461a      	mov	r2, r3
 800f0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b8:	4313      	orrs	r3, r2
 800f0ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0be:	021b      	lsls	r3, r3, #8
 800f0c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	1c5a      	adds	r2, r3, #1
 800f0c6:	60ba      	str	r2, [r7, #8]
 800f0c8:	781b      	ldrb	r3, [r3, #0]
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ce:	4313      	orrs	r3, r2
 800f0d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d4:	021b      	lsls	r3, r3, #8
 800f0d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	1c5a      	adds	r2, r3, #1
 800f0dc:	60ba      	str	r2, [r7, #8]
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	461a      	mov	r2, r3
 800f0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr2 = lwip_htonl(l);
 800f0e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f0ea:	f7f4 feaa 	bl	8003e42 <lwip_htonl>
 800f0ee:	6338      	str	r0, [r7, #48]	; 0x30
	    if (ciaddr2 && go->accept_remote)
 800f0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d008      	beq.n	800f108 <ipcp_nakci+0x3a6>
 800f0f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	f003 0310 	and.w	r3, r3, #16
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	2b00      	cmp	r3, #0
 800f102:	d001      	beq.n	800f108 <ipcp_nakci+0x3a6>
		try_.hisaddr = ciaddr2;
 800f104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f106:	61bb      	str	r3, [r7, #24]
	    no.old_addrs = 1;
 800f108:	7f3b      	ldrb	r3, [r7, #28]
 800f10a:	f043 0302 	orr.w	r3, r3, #2
 800f10e:	773b      	strb	r3, [r7, #28]
	    break;
 800f110:	e054      	b.n	800f1bc <ipcp_nakci+0x45a>
	    if (go->neg_addr || no.neg_addr || cilen != CILEN_ADDR)
 800f112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	f003 0301 	and.w	r3, r3, #1
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d161      	bne.n	800f1e4 <ipcp_nakci+0x482>
 800f120:	7f3b      	ldrb	r3, [r7, #28]
 800f122:	f003 0301 	and.w	r3, r3, #1
 800f126:	b2db      	uxtb	r3, r3
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d15b      	bne.n	800f1e4 <ipcp_nakci+0x482>
 800f12c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f130:	2b06      	cmp	r3, #6
 800f132:	d157      	bne.n	800f1e4 <ipcp_nakci+0x482>
	    try_.old_addrs = 0;
 800f134:	7c3b      	ldrb	r3, [r7, #16]
 800f136:	f36f 0341 	bfc	r3, #1, #1
 800f13a:	743b      	strb	r3, [r7, #16]
	    GETLONG(l, p);
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	1c5a      	adds	r2, r3, #1
 800f140:	60ba      	str	r2, [r7, #8]
 800f142:	781b      	ldrb	r3, [r3, #0]
 800f144:	021b      	lsls	r3, r3, #8
 800f146:	63bb      	str	r3, [r7, #56]	; 0x38
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	1c5a      	adds	r2, r3, #1
 800f14c:	60ba      	str	r2, [r7, #8]
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	461a      	mov	r2, r3
 800f152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f154:	4313      	orrs	r3, r2
 800f156:	63bb      	str	r3, [r7, #56]	; 0x38
 800f158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f15a:	021b      	lsls	r3, r3, #8
 800f15c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	1c5a      	adds	r2, r3, #1
 800f162:	60ba      	str	r2, [r7, #8]
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	461a      	mov	r2, r3
 800f168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f16a:	4313      	orrs	r3, r2
 800f16c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f170:	021b      	lsls	r3, r3, #8
 800f172:	63bb      	str	r3, [r7, #56]	; 0x38
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	1c5a      	adds	r2, r3, #1
 800f178:	60ba      	str	r2, [r7, #8]
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	461a      	mov	r2, r3
 800f17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f180:	4313      	orrs	r3, r2
 800f182:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr1 = lwip_htonl(l);
 800f184:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f186:	f7f4 fe5c 	bl	8003e42 <lwip_htonl>
 800f18a:	6378      	str	r0, [r7, #52]	; 0x34
	    if (ciaddr1 && go->accept_local)
 800f18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d008      	beq.n	800f1a4 <ipcp_nakci+0x442>
 800f192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	f003 0308 	and.w	r3, r3, #8
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d001      	beq.n	800f1a4 <ipcp_nakci+0x442>
		try_.ouraddr = ciaddr1;
 800f1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1a2:	617b      	str	r3, [r7, #20]
	    if (try_.ouraddr != 0)
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d003      	beq.n	800f1b2 <ipcp_nakci+0x450>
		try_.neg_addr = 1;
 800f1aa:	7c3b      	ldrb	r3, [r7, #16]
 800f1ac:	f043 0301 	orr.w	r3, r3, #1
 800f1b0:	743b      	strb	r3, [r7, #16]
	    no.neg_addr = 1;
 800f1b2:	7f3b      	ldrb	r3, [r7, #28]
 800f1b4:	f043 0301 	orr.w	r3, r3, #1
 800f1b8:	773b      	strb	r3, [r7, #28]
	    break;
 800f1ba:	bf00      	nop
	}
	p = next;
 800f1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1be:	60bb      	str	r3, [r7, #8]
    while (len >= CILEN_VOID) {
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	f73f aef1 	bgt.w	800efaa <ipcp_nakci+0x248>

    /*
     * OK, the Nak is good.  Now we can update state.
     * If there are any remaining options, we ignore them.
     */
    if (f->state != PPP_FSM_OPENED)
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	7c1b      	ldrb	r3, [r3, #16]
 800f1cc:	2b09      	cmp	r3, #9
 800f1ce:	d007      	beq.n	800f1e0 <ipcp_nakci+0x47e>
	*go = try_;
 800f1d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1d2:	461c      	mov	r4, r3
 800f1d4:	f107 0310 	add.w	r3, r7, #16
 800f1d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f1dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    return 1;
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	e000      	b.n	800f1e6 <ipcp_nakci+0x484>

bad:
    IPCPDEBUG(("ipcp_nakci: received bad Nak!"));
    return 0;
 800f1e4:	2300      	movs	r3, #0
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	374c      	adds	r7, #76	; 0x4c
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd90      	pop	{r4, r7, pc}

0800f1ee <ipcp_rejci>:

/*
 * ipcp_rejci - Reject some of our CIs.
 * Callback from fsm_rconfnakrej.
 */
static int ipcp_rejci(fsm *f, u_char *p, int len) {
 800f1ee:	b590      	push	{r4, r7, lr}
 800f1f0:	b08f      	sub	sp, #60	; 0x3c
 800f1f2:	af00      	add	r7, sp, #0
 800f1f4:	60f8      	str	r0, [r7, #12]
 800f1f6:	60b9      	str	r1, [r7, #8]
 800f1f8:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	637b      	str	r3, [r7, #52]	; 0x34
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800f200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f202:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800f206:	633b      	str	r3, [r7, #48]	; 0x30
    u_short cishort;
#endif /* VJ_SUPPORT */
    u32_t cilong;
    ipcp_options try_;		/* options to request next time */

    try_ = *go;
 800f208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f20a:	f107 0314 	add.w	r3, r7, #20
 800f20e:	ca07      	ldmia	r2, {r0, r1, r2}
 800f210:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    goto bad; \
	try_.winsaddr[opt == CI_MS_WINS2] = 0; \
    }
#endif /* UNUSED - WINS */

    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800f214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	f003 0301 	and.w	r3, r3, #1
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d17e      	bne.n	800f320 <ipcp_rejci+0x132>
 800f222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	f003 0302 	and.w	r3, r3, #2
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d077      	beq.n	800f320 <ipcp_rejci+0x132>
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	785b      	ldrb	r3, [r3, #1]
 800f234:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f238:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f23c:	2b0a      	cmp	r3, #10
 800f23e:	d16f      	bne.n	800f320 <ipcp_rejci+0x132>
 800f240:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	429a      	cmp	r2, r3
 800f248:	dc6a      	bgt.n	800f320 <ipcp_rejci+0x132>
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	2b01      	cmp	r3, #1
 800f250:	d166      	bne.n	800f320 <ipcp_rejci+0x132>
 800f252:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f256:	687a      	ldr	r2, [r7, #4]
 800f258:	1ad3      	subs	r3, r2, r3
 800f25a:	607b      	str	r3, [r7, #4]
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	3302      	adds	r3, #2
 800f260:	60bb      	str	r3, [r7, #8]
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	1c5a      	adds	r2, r3, #1
 800f266:	60ba      	str	r2, [r7, #8]
 800f268:	781b      	ldrb	r3, [r3, #0]
 800f26a:	021b      	lsls	r3, r3, #8
 800f26c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	1c5a      	adds	r2, r3, #1
 800f272:	60ba      	str	r2, [r7, #8]
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	461a      	mov	r2, r3
 800f278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27a:	4313      	orrs	r3, r2
 800f27c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f280:	021b      	lsls	r3, r3, #8
 800f282:	62bb      	str	r3, [r7, #40]	; 0x28
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	1c5a      	adds	r2, r3, #1
 800f288:	60ba      	str	r2, [r7, #8]
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	461a      	mov	r2, r3
 800f28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f290:	4313      	orrs	r3, r2
 800f292:	62bb      	str	r3, [r7, #40]	; 0x28
 800f294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f296:	021b      	lsls	r3, r3, #8
 800f298:	62bb      	str	r3, [r7, #40]	; 0x28
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	1c5a      	adds	r2, r3, #1
 800f29e:	60ba      	str	r2, [r7, #8]
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a6:	4313      	orrs	r3, r2
 800f2a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2ac:	f7f4 fdc9 	bl	8003e42 <lwip_htonl>
 800f2b0:	6278      	str	r0, [r7, #36]	; 0x24
 800f2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b4:	685a      	ldr	r2, [r3, #4]
 800f2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	f040 8093 	bne.w	800f3e4 <ipcp_rejci+0x1f6>
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	1c5a      	adds	r2, r3, #1
 800f2c2:	60ba      	str	r2, [r7, #8]
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	021b      	lsls	r3, r3, #8
 800f2c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	1c5a      	adds	r2, r3, #1
 800f2ce:	60ba      	str	r2, [r7, #8]
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d6:	4313      	orrs	r3, r2
 800f2d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2dc:	021b      	lsls	r3, r3, #8
 800f2de:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	1c5a      	adds	r2, r3, #1
 800f2e4:	60ba      	str	r2, [r7, #8]
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ec:	4313      	orrs	r3, r2
 800f2ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f2:	021b      	lsls	r3, r3, #8
 800f2f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	1c5a      	adds	r2, r3, #1
 800f2fa:	60ba      	str	r2, [r7, #8]
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	461a      	mov	r2, r3
 800f300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f302:	4313      	orrs	r3, r2
 800f304:	62bb      	str	r3, [r7, #40]	; 0x28
 800f306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f308:	f7f4 fd9b 	bl	8003e42 <lwip_htonl>
 800f30c:	6278      	str	r0, [r7, #36]	; 0x24
 800f30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f310:	689a      	ldr	r2, [r3, #8]
 800f312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f314:	429a      	cmp	r2, r3
 800f316:	d167      	bne.n	800f3e8 <ipcp_rejci+0x1fa>
 800f318:	7d3b      	ldrb	r3, [r7, #20]
 800f31a:	f36f 0341 	bfc	r3, #1, #1
 800f31e:	753b      	strb	r3, [r7, #20]
#if VJ_SUPPORT
    REJCIVJ(CI_COMPRESSTYPE, neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800f320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	f003 0301 	and.w	r3, r3, #1
 800f328:	b2db      	uxtb	r3, r3
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d049      	beq.n	800f3c2 <ipcp_rejci+0x1d4>
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	785b      	ldrb	r3, [r3, #1]
 800f332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f33a:	2b06      	cmp	r3, #6
 800f33c:	d141      	bne.n	800f3c2 <ipcp_rejci+0x1d4>
 800f33e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	429a      	cmp	r2, r3
 800f346:	dc3c      	bgt.n	800f3c2 <ipcp_rejci+0x1d4>
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	2b03      	cmp	r3, #3
 800f34e:	d138      	bne.n	800f3c2 <ipcp_rejci+0x1d4>
 800f350:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f354:	687a      	ldr	r2, [r7, #4]
 800f356:	1ad3      	subs	r3, r2, r3
 800f358:	607b      	str	r3, [r7, #4]
 800f35a:	68bb      	ldr	r3, [r7, #8]
 800f35c:	3302      	adds	r3, #2
 800f35e:	60bb      	str	r3, [r7, #8]
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	1c5a      	adds	r2, r3, #1
 800f364:	60ba      	str	r2, [r7, #8]
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	021b      	lsls	r3, r3, #8
 800f36a:	623b      	str	r3, [r7, #32]
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	1c5a      	adds	r2, r3, #1
 800f370:	60ba      	str	r2, [r7, #8]
 800f372:	781b      	ldrb	r3, [r3, #0]
 800f374:	461a      	mov	r2, r3
 800f376:	6a3b      	ldr	r3, [r7, #32]
 800f378:	4313      	orrs	r3, r2
 800f37a:	623b      	str	r3, [r7, #32]
 800f37c:	6a3b      	ldr	r3, [r7, #32]
 800f37e:	021b      	lsls	r3, r3, #8
 800f380:	623b      	str	r3, [r7, #32]
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	1c5a      	adds	r2, r3, #1
 800f386:	60ba      	str	r2, [r7, #8]
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	461a      	mov	r2, r3
 800f38c:	6a3b      	ldr	r3, [r7, #32]
 800f38e:	4313      	orrs	r3, r2
 800f390:	623b      	str	r3, [r7, #32]
 800f392:	6a3b      	ldr	r3, [r7, #32]
 800f394:	021b      	lsls	r3, r3, #8
 800f396:	623b      	str	r3, [r7, #32]
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	1c5a      	adds	r2, r3, #1
 800f39c:	60ba      	str	r2, [r7, #8]
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	6a3b      	ldr	r3, [r7, #32]
 800f3a4:	4313      	orrs	r3, r2
 800f3a6:	623b      	str	r3, [r7, #32]
 800f3a8:	6a38      	ldr	r0, [r7, #32]
 800f3aa:	f7f4 fd4a 	bl	8003e42 <lwip_htonl>
 800f3ae:	6278      	str	r0, [r7, #36]	; 0x24
 800f3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b2:	685a      	ldr	r2, [r3, #4]
 800f3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d118      	bne.n	800f3ec <ipcp_rejci+0x1fe>
 800f3ba:	7d3b      	ldrb	r3, [r7, #20]
 800f3bc:	f36f 0300 	bfc	r3, #0, #1
 800f3c0:	753b      	strb	r3, [r7, #20]
#endif /* UNUSED - WINS */

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d113      	bne.n	800f3f0 <ipcp_rejci+0x202>
	goto bad;
    /*
     * Now we can update state.
     */
    if (f->state != PPP_FSM_OPENED)
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	7c1b      	ldrb	r3, [r3, #16]
 800f3cc:	2b09      	cmp	r3, #9
 800f3ce:	d007      	beq.n	800f3e0 <ipcp_rejci+0x1f2>
	*go = try_;
 800f3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d2:	461c      	mov	r4, r3
 800f3d4:	f107 0314 	add.w	r3, r7, #20
 800f3d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f3dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return 1;
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	e007      	b.n	800f3f4 <ipcp_rejci+0x206>
    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800f3e4:	bf00      	nop
 800f3e6:	e004      	b.n	800f3f2 <ipcp_rejci+0x204>
 800f3e8:	bf00      	nop
 800f3ea:	e002      	b.n	800f3f2 <ipcp_rejci+0x204>
    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800f3ec:	bf00      	nop
 800f3ee:	e000      	b.n	800f3f2 <ipcp_rejci+0x204>
	goto bad;
 800f3f0:	bf00      	nop

bad:
    IPCPDEBUG(("ipcp_rejci: received bad Reject!"));
    return 0;
 800f3f2:	2300      	movs	r3, #0
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	373c      	adds	r7, #60	; 0x3c
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd90      	pop	{r4, r7, pc}

0800f3fc <ipcp_reqci>:
 * CONFNAK; returns CONFREJ if it can't return CONFACK.
 *
 * inp = Requested CIs
 * len = Length of requested CIs
 */
static int ipcp_reqci(fsm *f, u_char *inp, int *len, int reject_if_disagree) {
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b094      	sub	sp, #80	; 0x50
 800f400:	af00      	add	r7, sp, #0
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	607a      	str	r2, [r7, #4]
 800f408:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	633b      	str	r3, [r7, #48]	; 0x30
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800f410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f412:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800f416:	62fb      	str	r3, [r7, #44]	; 0x2c
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800f418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800f41e:	62bb      	str	r3, [r7, #40]	; 0x28
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800f420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f422:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800f426:	627b      	str	r3, [r7, #36]	; 0x24
    u_short cilen, citype;	/* Parsed len, type */
#if VJ_SUPPORT
    u_short cishort;		/* Parsed short value */
#endif /* VJ_SUPPORT */
    u32_t tl, ciaddr1, ciaddr2;/* Parsed address values */
    int rc = CONFACK;		/* Final packet return code */
 800f428:	2302      	movs	r3, #2
 800f42a:	647b      	str	r3, [r7, #68]	; 0x44
    int orc;			/* Individual option return code */
    u_char *p;			/* Pointer to next char to parse */
    u_char *ucp = inp;		/* Pointer to current output char */
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	63bb      	str	r3, [r7, #56]	; 0x38
    int l = *len;		/* Length left */
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_DNS */

    /*
     * Reset all his options.
     */
    BZERO(ho, sizeof(*ho));
 800f436:	220c      	movs	r2, #12
 800f438:	2100      	movs	r1, #0
 800f43a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f43c:	f004 fd3b 	bl	8013eb6 <memset>
    
    /*
     * Process all his options.
     */
    next = inp;
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	64fb      	str	r3, [r7, #76]	; 0x4c
    while (l) {
 800f444:	e1f3      	b.n	800f82e <ipcp_reqci+0x432>
	orc = CONFACK;			/* Assume success */
 800f446:	2302      	movs	r3, #2
 800f448:	643b      	str	r3, [r7, #64]	; 0x40
	cip = p = next;			/* Remember beginning of CI */
 800f44a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f44c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f450:	623b      	str	r3, [r7, #32]
	if (l < 2 ||			/* Not enough data for CI header or */
 800f452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f454:	2b01      	cmp	r3, #1
 800f456:	dd0b      	ble.n	800f470 <ipcp_reqci+0x74>
	    p[1] < 2 ||			/*  CI length too small or */
 800f458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f45a:	3301      	adds	r3, #1
 800f45c:	781b      	ldrb	r3, [r3, #0]
	if (l < 2 ||			/* Not enough data for CI header or */
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d906      	bls.n	800f470 <ipcp_reqci+0x74>
	    p[1] > l) {			/*  CI length too big? */
 800f462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f464:	3301      	adds	r3, #1
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	461a      	mov	r2, r3
	    p[1] < 2 ||			/*  CI length too small or */
 800f46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f46c:	429a      	cmp	r2, r3
 800f46e:	dd07      	ble.n	800f480 <ipcp_reqci+0x84>
	    IPCPDEBUG(("ipcp_reqci: bad CI length!"));
	    orc = CONFREJ;		/* Reject bad CI */
 800f470:	2304      	movs	r3, #4
 800f472:	643b      	str	r3, [r7, #64]	; 0x40
	    cilen = l;			/* Reject till end of packet */
 800f474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f476:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	    l = 0;			/* Don't loop again */
 800f47a:	2300      	movs	r3, #0
 800f47c:	637b      	str	r3, [r7, #52]	; 0x34
	    goto endswitch;
 800f47e:	e1a1      	b.n	800f7c4 <ipcp_reqci+0x3c8>
	}
	GETCHAR(citype, p);		/* Parse CI type */
 800f480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f482:	1c5a      	adds	r2, r3, #1
 800f484:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	83fb      	strh	r3, [r7, #30]
	GETCHAR(cilen, p);		/* Parse CI length */
 800f48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f48c:	1c5a      	adds	r2, r3, #1
 800f48e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f490:	781b      	ldrb	r3, [r3, #0]
 800f492:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	l -= cilen;			/* Adjust remaining length */
 800f496:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f49a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f49c:	1ad3      	subs	r3, r2, r3
 800f49e:	637b      	str	r3, [r7, #52]	; 0x34
	next += cilen;			/* Step to next CI */
 800f4a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f4a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f4a6:	4413      	add	r3, r2
 800f4a8:	64fb      	str	r3, [r7, #76]	; 0x4c

	switch (citype) {		/* Check CI type */
 800f4aa:	8bfb      	ldrh	r3, [r7, #30]
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	d003      	beq.n	800f4b8 <ipcp_reqci+0xbc>
 800f4b0:	2b03      	cmp	r3, #3
 800f4b2:	f000 80f6 	beq.w	800f6a2 <ipcp_reqci+0x2a6>
 800f4b6:	e182      	b.n	800f7be <ipcp_reqci+0x3c2>
	case CI_ADDRS:
	    if (!ao->old_addrs || ho->neg_addr ||
 800f4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	f003 0302 	and.w	r3, r3, #2
 800f4c0:	b2db      	uxtb	r3, r3
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d00a      	beq.n	800f4dc <ipcp_reqci+0xe0>
 800f4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	f003 0301 	and.w	r3, r3, #1
 800f4ce:	b2db      	uxtb	r3, r3
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d103      	bne.n	800f4dc <ipcp_reqci+0xe0>
 800f4d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f4d8:	2b0a      	cmp	r3, #10
 800f4da:	d002      	beq.n	800f4e2 <ipcp_reqci+0xe6>
		cilen != CILEN_ADDRS) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800f4dc:	2304      	movs	r3, #4
 800f4de:	643b      	str	r3, [r7, #64]	; 0x40
		break;
 800f4e0:	e170      	b.n	800f7c4 <ipcp_reqci+0x3c8>
	     * If he has no address, or if we both have his address but
	     * disagree about it, then NAK it with our idea.
	     * In particular, if we don't know his address, but he does,
	     * then accept it.
	     */
	    GETLONG(tl, p);		/* Parse source address (his) */
 800f4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4e4:	1c5a      	adds	r2, r3, #1
 800f4e6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	021b      	lsls	r3, r3, #8
 800f4ec:	61bb      	str	r3, [r7, #24]
 800f4ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4f0:	1c5a      	adds	r2, r3, #1
 800f4f2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	69bb      	ldr	r3, [r7, #24]
 800f4fa:	4313      	orrs	r3, r2
 800f4fc:	61bb      	str	r3, [r7, #24]
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	021b      	lsls	r3, r3, #8
 800f502:	61bb      	str	r3, [r7, #24]
 800f504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f506:	1c5a      	adds	r2, r3, #1
 800f508:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	461a      	mov	r2, r3
 800f50e:	69bb      	ldr	r3, [r7, #24]
 800f510:	4313      	orrs	r3, r2
 800f512:	61bb      	str	r3, [r7, #24]
 800f514:	69bb      	ldr	r3, [r7, #24]
 800f516:	021b      	lsls	r3, r3, #8
 800f518:	61bb      	str	r3, [r7, #24]
 800f51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f51c:	1c5a      	adds	r2, r3, #1
 800f51e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	461a      	mov	r2, r3
 800f524:	69bb      	ldr	r3, [r7, #24]
 800f526:	4313      	orrs	r3, r2
 800f528:	61bb      	str	r3, [r7, #24]
	    ciaddr1 = lwip_htonl(tl);
 800f52a:	69b8      	ldr	r0, [r7, #24]
 800f52c:	f7f4 fc89 	bl	8003e42 <lwip_htonl>
 800f530:	6178      	str	r0, [r7, #20]
	    if (ciaddr1 != wo->hisaddr
 800f532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f534:	689a      	ldr	r2, [r3, #8]
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	429a      	cmp	r2, r3
 800f53a:	d033      	beq.n	800f5a4 <ipcp_reqci+0x1a8>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d006      	beq.n	800f550 <ipcp_reqci+0x154>
 800f542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	f003 0310 	and.w	r3, r3, #16
 800f54a:	b2db      	uxtb	r3, r3
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d129      	bne.n	800f5a4 <ipcp_reqci+0x1a8>
		orc = CONFNAK;
 800f550:	2303      	movs	r3, #3
 800f552:	643b      	str	r3, [r7, #64]	; 0x40
		if (!reject_if_disagree) {
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d133      	bne.n	800f5c2 <ipcp_reqci+0x1c6>
		    DECPTR(sizeof(u32_t), p);
 800f55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f55c:	3b04      	subs	r3, #4
 800f55e:	63fb      	str	r3, [r7, #60]	; 0x3c
		    tl = lwip_ntohl(wo->hisaddr);
 800f560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f562:	689b      	ldr	r3, [r3, #8]
 800f564:	4618      	mov	r0, r3
 800f566:	f7f4 fc6c 	bl	8003e42 <lwip_htonl>
 800f56a:	61b8      	str	r0, [r7, #24]
		    PUTLONG(tl, p);
 800f56c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f56e:	1c5a      	adds	r2, r3, #1
 800f570:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f572:	69ba      	ldr	r2, [r7, #24]
 800f574:	0e12      	lsrs	r2, r2, #24
 800f576:	b2d2      	uxtb	r2, r2
 800f578:	701a      	strb	r2, [r3, #0]
 800f57a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f57c:	1c5a      	adds	r2, r3, #1
 800f57e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f580:	69ba      	ldr	r2, [r7, #24]
 800f582:	0c12      	lsrs	r2, r2, #16
 800f584:	b2d2      	uxtb	r2, r2
 800f586:	701a      	strb	r2, [r3, #0]
 800f588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f58a:	1c5a      	adds	r2, r3, #1
 800f58c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f58e:	69ba      	ldr	r2, [r7, #24]
 800f590:	0a12      	lsrs	r2, r2, #8
 800f592:	b2d2      	uxtb	r2, r2
 800f594:	701a      	strb	r2, [r3, #0]
 800f596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f598:	1c5a      	adds	r2, r3, #1
 800f59a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f59c:	69ba      	ldr	r2, [r7, #24]
 800f59e:	b2d2      	uxtb	r2, r2
 800f5a0:	701a      	strb	r2, [r3, #0]
		if (!reject_if_disagree) {
 800f5a2:	e00e      	b.n	800f5c2 <ipcp_reqci+0x1c6>
		}
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d10b      	bne.n	800f5c2 <ipcp_reqci+0x1c6>
 800f5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ac:	689b      	ldr	r3, [r3, #8]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d107      	bne.n	800f5c2 <ipcp_reqci+0x1c6>
		/*
		 * If neither we nor he knows his address, reject the option.
		 */
		orc = CONFREJ;
 800f5b2:	2304      	movs	r3, #4
 800f5b4:	643b      	str	r3, [r7, #64]	; 0x40
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 800f5b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5b8:	7813      	ldrb	r3, [r2, #0]
 800f5ba:	f36f 0382 	bfc	r3, #2, #1
 800f5be:	7013      	strb	r3, [r2, #0]
		break;
 800f5c0:	e100      	b.n	800f7c4 <ipcp_reqci+0x3c8>

	    /*
	     * If he doesn't know our address, or if we both have our address
	     * but disagree about it, then NAK it with our idea.
	     */
	    GETLONG(tl, p);		/* Parse destination address (ours) */
 800f5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5c4:	1c5a      	adds	r2, r3, #1
 800f5c6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	021b      	lsls	r3, r3, #8
 800f5cc:	61bb      	str	r3, [r7, #24]
 800f5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5d0:	1c5a      	adds	r2, r3, #1
 800f5d2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	461a      	mov	r2, r3
 800f5d8:	69bb      	ldr	r3, [r7, #24]
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	61bb      	str	r3, [r7, #24]
 800f5de:	69bb      	ldr	r3, [r7, #24]
 800f5e0:	021b      	lsls	r3, r3, #8
 800f5e2:	61bb      	str	r3, [r7, #24]
 800f5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5e6:	1c5a      	adds	r2, r3, #1
 800f5e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	461a      	mov	r2, r3
 800f5ee:	69bb      	ldr	r3, [r7, #24]
 800f5f0:	4313      	orrs	r3, r2
 800f5f2:	61bb      	str	r3, [r7, #24]
 800f5f4:	69bb      	ldr	r3, [r7, #24]
 800f5f6:	021b      	lsls	r3, r3, #8
 800f5f8:	61bb      	str	r3, [r7, #24]
 800f5fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5fc:	1c5a      	adds	r2, r3, #1
 800f5fe:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f600:	781b      	ldrb	r3, [r3, #0]
 800f602:	461a      	mov	r2, r3
 800f604:	69bb      	ldr	r3, [r7, #24]
 800f606:	4313      	orrs	r3, r2
 800f608:	61bb      	str	r3, [r7, #24]
	    ciaddr2 = lwip_htonl(tl);
 800f60a:	69b8      	ldr	r0, [r7, #24]
 800f60c:	f7f4 fc19 	bl	8003e42 <lwip_htonl>
 800f610:	6138      	str	r0, [r7, #16]
	    if (ciaddr2 != wo->ouraddr) {
 800f612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f614:	685a      	ldr	r2, [r3, #4]
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	429a      	cmp	r2, r3
 800f61a:	d036      	beq.n	800f68a <ipcp_reqci+0x28e>
		if (ciaddr2 == 0 || !wo->accept_local) {
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d006      	beq.n	800f630 <ipcp_reqci+0x234>
 800f622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	f003 0308 	and.w	r3, r3, #8
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d129      	bne.n	800f684 <ipcp_reqci+0x288>
		    orc = CONFNAK;
 800f630:	2303      	movs	r3, #3
 800f632:	643b      	str	r3, [r7, #64]	; 0x40
		    if (!reject_if_disagree) {
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d127      	bne.n	800f68a <ipcp_reqci+0x28e>
			DECPTR(sizeof(u32_t), p);
 800f63a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f63c:	3b04      	subs	r3, #4
 800f63e:	63fb      	str	r3, [r7, #60]	; 0x3c
			tl = lwip_ntohl(wo->ouraddr);
 800f640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	4618      	mov	r0, r3
 800f646:	f7f4 fbfc 	bl	8003e42 <lwip_htonl>
 800f64a:	61b8      	str	r0, [r7, #24]
			PUTLONG(tl, p);
 800f64c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f64e:	1c5a      	adds	r2, r3, #1
 800f650:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f652:	69ba      	ldr	r2, [r7, #24]
 800f654:	0e12      	lsrs	r2, r2, #24
 800f656:	b2d2      	uxtb	r2, r2
 800f658:	701a      	strb	r2, [r3, #0]
 800f65a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f65c:	1c5a      	adds	r2, r3, #1
 800f65e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f660:	69ba      	ldr	r2, [r7, #24]
 800f662:	0c12      	lsrs	r2, r2, #16
 800f664:	b2d2      	uxtb	r2, r2
 800f666:	701a      	strb	r2, [r3, #0]
 800f668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f66a:	1c5a      	adds	r2, r3, #1
 800f66c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f66e:	69ba      	ldr	r2, [r7, #24]
 800f670:	0a12      	lsrs	r2, r2, #8
 800f672:	b2d2      	uxtb	r2, r2
 800f674:	701a      	strb	r2, [r3, #0]
 800f676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f678:	1c5a      	adds	r2, r3, #1
 800f67a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f67c:	69ba      	ldr	r2, [r7, #24]
 800f67e:	b2d2      	uxtb	r2, r2
 800f680:	701a      	strb	r2, [r3, #0]
		    if (!reject_if_disagree) {
 800f682:	e002      	b.n	800f68a <ipcp_reqci+0x28e>
		    }
		} else {
		    wo->ouraddr = ciaddr2;	/* accept peer's idea */
 800f684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f686:	693a      	ldr	r2, [r7, #16]
 800f688:	605a      	str	r2, [r3, #4]
		}
	    }

	    ho->old_addrs = 1;
 800f68a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f68c:	7813      	ldrb	r3, [r2, #0]
 800f68e:	f043 0302 	orr.w	r3, r3, #2
 800f692:	7013      	strb	r3, [r2, #0]
	    ho->hisaddr = ciaddr1;
 800f694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f696:	697a      	ldr	r2, [r7, #20]
 800f698:	609a      	str	r2, [r3, #8]
	    ho->ouraddr = ciaddr2;
 800f69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69c:	693a      	ldr	r2, [r7, #16]
 800f69e:	605a      	str	r2, [r3, #4]
	    break;
 800f6a0:	e090      	b.n	800f7c4 <ipcp_reqci+0x3c8>

	case CI_ADDR:
	    if (!ao->neg_addr || ho->old_addrs ||
 800f6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	f003 0301 	and.w	r3, r3, #1
 800f6aa:	b2db      	uxtb	r3, r3
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d00a      	beq.n	800f6c6 <ipcp_reqci+0x2ca>
 800f6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	f003 0302 	and.w	r3, r3, #2
 800f6b8:	b2db      	uxtb	r3, r3
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d103      	bne.n	800f6c6 <ipcp_reqci+0x2ca>
 800f6be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f6c2:	2b06      	cmp	r3, #6
 800f6c4:	d002      	beq.n	800f6cc <ipcp_reqci+0x2d0>
		cilen != CILEN_ADDR) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800f6c6:	2304      	movs	r3, #4
 800f6c8:	643b      	str	r3, [r7, #64]	; 0x40
		break;
 800f6ca:	e07b      	b.n	800f7c4 <ipcp_reqci+0x3c8>
	     * If he has no address, or if we both have his address but
	     * disagree about it, then NAK it with our idea.
	     * In particular, if we don't know his address, but he does,
	     * then accept it.
	     */
	    GETLONG(tl, p);	/* Parse source address (his) */
 800f6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6ce:	1c5a      	adds	r2, r3, #1
 800f6d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f6d2:	781b      	ldrb	r3, [r3, #0]
 800f6d4:	021b      	lsls	r3, r3, #8
 800f6d6:	61bb      	str	r3, [r7, #24]
 800f6d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6da:	1c5a      	adds	r2, r3, #1
 800f6dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	69bb      	ldr	r3, [r7, #24]
 800f6e4:	4313      	orrs	r3, r2
 800f6e6:	61bb      	str	r3, [r7, #24]
 800f6e8:	69bb      	ldr	r3, [r7, #24]
 800f6ea:	021b      	lsls	r3, r3, #8
 800f6ec:	61bb      	str	r3, [r7, #24]
 800f6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6f0:	1c5a      	adds	r2, r3, #1
 800f6f2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	461a      	mov	r2, r3
 800f6f8:	69bb      	ldr	r3, [r7, #24]
 800f6fa:	4313      	orrs	r3, r2
 800f6fc:	61bb      	str	r3, [r7, #24]
 800f6fe:	69bb      	ldr	r3, [r7, #24]
 800f700:	021b      	lsls	r3, r3, #8
 800f702:	61bb      	str	r3, [r7, #24]
 800f704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f706:	1c5a      	adds	r2, r3, #1
 800f708:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f70a:	781b      	ldrb	r3, [r3, #0]
 800f70c:	461a      	mov	r2, r3
 800f70e:	69bb      	ldr	r3, [r7, #24]
 800f710:	4313      	orrs	r3, r2
 800f712:	61bb      	str	r3, [r7, #24]
	    ciaddr1 = lwip_htonl(tl);
 800f714:	69b8      	ldr	r0, [r7, #24]
 800f716:	f7f4 fb94 	bl	8003e42 <lwip_htonl>
 800f71a:	6178      	str	r0, [r7, #20]
	    if (ciaddr1 != wo->hisaddr
 800f71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f71e:	689a      	ldr	r2, [r3, #8]
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	429a      	cmp	r2, r3
 800f724:	d033      	beq.n	800f78e <ipcp_reqci+0x392>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d006      	beq.n	800f73a <ipcp_reqci+0x33e>
 800f72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	f003 0310 	and.w	r3, r3, #16
 800f734:	b2db      	uxtb	r3, r3
 800f736:	2b00      	cmp	r3, #0
 800f738:	d129      	bne.n	800f78e <ipcp_reqci+0x392>
		orc = CONFNAK;
 800f73a:	2303      	movs	r3, #3
 800f73c:	643b      	str	r3, [r7, #64]	; 0x40
		if (!reject_if_disagree) {
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d133      	bne.n	800f7ac <ipcp_reqci+0x3b0>
		    DECPTR(sizeof(u32_t), p);
 800f744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f746:	3b04      	subs	r3, #4
 800f748:	63fb      	str	r3, [r7, #60]	; 0x3c
		    tl = lwip_ntohl(wo->hisaddr);
 800f74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	4618      	mov	r0, r3
 800f750:	f7f4 fb77 	bl	8003e42 <lwip_htonl>
 800f754:	61b8      	str	r0, [r7, #24]
		    PUTLONG(tl, p);
 800f756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f758:	1c5a      	adds	r2, r3, #1
 800f75a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f75c:	69ba      	ldr	r2, [r7, #24]
 800f75e:	0e12      	lsrs	r2, r2, #24
 800f760:	b2d2      	uxtb	r2, r2
 800f762:	701a      	strb	r2, [r3, #0]
 800f764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f766:	1c5a      	adds	r2, r3, #1
 800f768:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f76a:	69ba      	ldr	r2, [r7, #24]
 800f76c:	0c12      	lsrs	r2, r2, #16
 800f76e:	b2d2      	uxtb	r2, r2
 800f770:	701a      	strb	r2, [r3, #0]
 800f772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f774:	1c5a      	adds	r2, r3, #1
 800f776:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f778:	69ba      	ldr	r2, [r7, #24]
 800f77a:	0a12      	lsrs	r2, r2, #8
 800f77c:	b2d2      	uxtb	r2, r2
 800f77e:	701a      	strb	r2, [r3, #0]
 800f780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f782:	1c5a      	adds	r2, r3, #1
 800f784:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f786:	69ba      	ldr	r2, [r7, #24]
 800f788:	b2d2      	uxtb	r2, r2
 800f78a:	701a      	strb	r2, [r3, #0]
		if (!reject_if_disagree) {
 800f78c:	e00e      	b.n	800f7ac <ipcp_reqci+0x3b0>
		}
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d10b      	bne.n	800f7ac <ipcp_reqci+0x3b0>
 800f794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f796:	689b      	ldr	r3, [r3, #8]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d107      	bne.n	800f7ac <ipcp_reqci+0x3b0>
		/*
		 * Don't ACK an address of 0.0.0.0 - reject it instead.
		 */
		orc = CONFREJ;
 800f79c:	2304      	movs	r3, #4
 800f79e:	643b      	str	r3, [r7, #64]	; 0x40
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 800f7a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7a2:	7813      	ldrb	r3, [r2, #0]
 800f7a4:	f36f 0382 	bfc	r3, #2, #1
 800f7a8:	7013      	strb	r3, [r2, #0]
		break;
 800f7aa:	e00b      	b.n	800f7c4 <ipcp_reqci+0x3c8>
	    }
	
	    ho->neg_addr = 1;
 800f7ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7ae:	7813      	ldrb	r3, [r2, #0]
 800f7b0:	f043 0301 	orr.w	r3, r3, #1
 800f7b4:	7013      	strb	r3, [r2, #0]
	    ho->hisaddr = ciaddr1;
 800f7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b8:	697a      	ldr	r2, [r7, #20]
 800f7ba:	609a      	str	r2, [r3, #8]
	    break;
 800f7bc:	e002      	b.n	800f7c4 <ipcp_reqci+0x3c8>
	    }
	    break;
#endif /* VJ_SUPPORT */

	default:
	    orc = CONFREJ;
 800f7be:	2304      	movs	r3, #4
 800f7c0:	643b      	str	r3, [r7, #64]	; 0x40
	    break;
 800f7c2:	bf00      	nop
	}
endswitch:
	if (orc == CONFACK &&		/* Good CI */
 800f7c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7c6:	2b02      	cmp	r3, #2
 800f7c8:	d103      	bne.n	800f7d2 <ipcp_reqci+0x3d6>
 800f7ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7cc:	2b02      	cmp	r3, #2
 800f7ce:	d000      	beq.n	800f7d2 <ipcp_reqci+0x3d6>
	    rc != CONFACK)		/*  but prior CI wasn't? */
	    continue;			/* Don't send this one */
 800f7d0:	e02d      	b.n	800f82e <ipcp_reqci+0x432>

	if (orc == CONFNAK) {		/* Nak this CI? */
 800f7d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7d4:	2b03      	cmp	r3, #3
 800f7d6:	d110      	bne.n	800f7fa <ipcp_reqci+0x3fe>
	    if (reject_if_disagree)	/* Getting fed up with sending NAKs? */
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d002      	beq.n	800f7e4 <ipcp_reqci+0x3e8>
		orc = CONFREJ;		/* Get tough if so */
 800f7de:	2304      	movs	r3, #4
 800f7e0:	643b      	str	r3, [r7, #64]	; 0x40
 800f7e2:	e00a      	b.n	800f7fa <ipcp_reqci+0x3fe>
	    else {
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 800f7e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7e6:	2b04      	cmp	r3, #4
 800f7e8:	d100      	bne.n	800f7ec <ipcp_reqci+0x3f0>
		    continue;		/* Don't send this one */
 800f7ea:	e020      	b.n	800f82e <ipcp_reqci+0x432>
		if (rc == CONFACK) {	/* Ack'd all prior CIs? */
 800f7ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7ee:	2b02      	cmp	r3, #2
 800f7f0:	d103      	bne.n	800f7fa <ipcp_reqci+0x3fe>
		    rc = CONFNAK;	/* Not anymore... */
 800f7f2:	2303      	movs	r3, #3
 800f7f4:	647b      	str	r3, [r7, #68]	; 0x44
		    ucp = inp;		/* Backup */
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	    }
	}

	if (orc == CONFREJ &&		/* Reject this CI */
 800f7fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7fc:	2b04      	cmp	r3, #4
 800f7fe:	d106      	bne.n	800f80e <ipcp_reqci+0x412>
 800f800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f802:	2b04      	cmp	r3, #4
 800f804:	d003      	beq.n	800f80e <ipcp_reqci+0x412>
	    rc != CONFREJ) {		/*  but no prior ones? */
	    rc = CONFREJ;
 800f806:	2304      	movs	r3, #4
 800f808:	647b      	str	r3, [r7, #68]	; 0x44
	    ucp = inp;			/* Backup */
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	/* Need to move CI? */
	if (ucp != cip)
 800f80e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f810:	6a3b      	ldr	r3, [r7, #32]
 800f812:	429a      	cmp	r2, r3
 800f814:	d006      	beq.n	800f824 <ipcp_reqci+0x428>
	    MEMCPY(ucp, cip, cilen);	/* Move it */
 800f816:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f81a:	461a      	mov	r2, r3
 800f81c:	6a39      	ldr	r1, [r7, #32]
 800f81e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f820:	f004 fb24 	bl	8013e6c <memcpy>

	/* Update output pointer */
	INCPTR(cilen, ucp);
 800f824:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f82a:	4413      	add	r3, r2
 800f82c:	63bb      	str	r3, [r7, #56]	; 0x38
    while (l) {
 800f82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f830:	2b00      	cmp	r3, #0
 800f832:	f47f ae08 	bne.w	800f446 <ipcp_reqci+0x4a>
     * their address, and they didn't send their address, then we
     * send a NAK with a CI_ADDR option appended.  We assume the
     * input buffer is long enough that we can append the extra
     * option safely.
     */
    if (rc != CONFREJ && !ho->neg_addr && !ho->old_addrs &&
 800f836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f838:	2b04      	cmp	r3, #4
 800f83a:	d055      	beq.n	800f8e8 <ipcp_reqci+0x4ec>
 800f83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f83e:	781b      	ldrb	r3, [r3, #0]
 800f840:	f003 0301 	and.w	r3, r3, #1
 800f844:	b2db      	uxtb	r3, r3
 800f846:	2b00      	cmp	r3, #0
 800f848:	d14e      	bne.n	800f8e8 <ipcp_reqci+0x4ec>
 800f84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	f003 0302 	and.w	r3, r3, #2
 800f852:	b2db      	uxtb	r3, r3
 800f854:	2b00      	cmp	r3, #0
 800f856:	d147      	bne.n	800f8e8 <ipcp_reqci+0x4ec>
 800f858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	f003 0304 	and.w	r3, r3, #4
 800f860:	b2db      	uxtb	r3, r3
 800f862:	2b00      	cmp	r3, #0
 800f864:	d040      	beq.n	800f8e8 <ipcp_reqci+0x4ec>
	wo->req_addr && !reject_if_disagree && !pcb->settings.noremoteip) {
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d13d      	bne.n	800f8e8 <ipcp_reqci+0x4ec>
 800f86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	f003 0304 	and.w	r3, r3, #4
 800f874:	b2db      	uxtb	r3, r3
 800f876:	2b00      	cmp	r3, #0
 800f878:	d136      	bne.n	800f8e8 <ipcp_reqci+0x4ec>
	if (rc == CONFACK) {
 800f87a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f87c:	2b02      	cmp	r3, #2
 800f87e:	d108      	bne.n	800f892 <ipcp_reqci+0x496>
	    rc = CONFNAK;
 800f880:	2303      	movs	r3, #3
 800f882:	647b      	str	r3, [r7, #68]	; 0x44
	    ucp = inp;			/* reset pointer */
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	63bb      	str	r3, [r7, #56]	; 0x38
	    wo->req_addr = 0;		/* don't ask again */
 800f888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f88a:	7813      	ldrb	r3, [r2, #0]
 800f88c:	f36f 0382 	bfc	r3, #2, #1
 800f890:	7013      	strb	r3, [r2, #0]
	}
	PUTCHAR(CI_ADDR, ucp);
 800f892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f894:	1c5a      	adds	r2, r3, #1
 800f896:	63ba      	str	r2, [r7, #56]	; 0x38
 800f898:	2203      	movs	r2, #3
 800f89a:	701a      	strb	r2, [r3, #0]
	PUTCHAR(CILEN_ADDR, ucp);
 800f89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f89e:	1c5a      	adds	r2, r3, #1
 800f8a0:	63ba      	str	r2, [r7, #56]	; 0x38
 800f8a2:	2206      	movs	r2, #6
 800f8a4:	701a      	strb	r2, [r3, #0]
	tl = lwip_ntohl(wo->hisaddr);
 800f8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a8:	689b      	ldr	r3, [r3, #8]
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7f4 fac9 	bl	8003e42 <lwip_htonl>
 800f8b0:	61b8      	str	r0, [r7, #24]
	PUTLONG(tl, ucp);
 800f8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b4:	1c5a      	adds	r2, r3, #1
 800f8b6:	63ba      	str	r2, [r7, #56]	; 0x38
 800f8b8:	69ba      	ldr	r2, [r7, #24]
 800f8ba:	0e12      	lsrs	r2, r2, #24
 800f8bc:	b2d2      	uxtb	r2, r2
 800f8be:	701a      	strb	r2, [r3, #0]
 800f8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c2:	1c5a      	adds	r2, r3, #1
 800f8c4:	63ba      	str	r2, [r7, #56]	; 0x38
 800f8c6:	69ba      	ldr	r2, [r7, #24]
 800f8c8:	0c12      	lsrs	r2, r2, #16
 800f8ca:	b2d2      	uxtb	r2, r2
 800f8cc:	701a      	strb	r2, [r3, #0]
 800f8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d0:	1c5a      	adds	r2, r3, #1
 800f8d2:	63ba      	str	r2, [r7, #56]	; 0x38
 800f8d4:	69ba      	ldr	r2, [r7, #24]
 800f8d6:	0a12      	lsrs	r2, r2, #8
 800f8d8:	b2d2      	uxtb	r2, r2
 800f8da:	701a      	strb	r2, [r3, #0]
 800f8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8de:	1c5a      	adds	r2, r3, #1
 800f8e0:	63ba      	str	r2, [r7, #56]	; 0x38
 800f8e2:	69ba      	ldr	r2, [r7, #24]
 800f8e4:	b2d2      	uxtb	r2, r2
 800f8e6:	701a      	strb	r2, [r3, #0]
    }

    *len = ucp - inp;			/* Compute output length */
 800f8e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	1ad2      	subs	r2, r2, r3
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	601a      	str	r2, [r3, #0]
    IPCPDEBUG(("ipcp: returning Configure-%s", CODENAME(rc)));
    return (rc);			/* Return final code */
 800f8f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	3750      	adds	r7, #80	; 0x50
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}

0800f8fc <ipcp_up>:
/*
 * ipcp_up - IPCP has come UP.
 *
 * Configure the IP network interface appropriately and bring it up.
 */
static void ipcp_up(fsm *f) {
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b088      	sub	sp, #32
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	61fb      	str	r3, [r7, #28]
    u32_t mask;
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800f90a:	69fb      	ldr	r3, [r7, #28]
 800f90c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800f910:	61bb      	str	r3, [r7, #24]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800f912:	69fb      	ldr	r3, [r7, #28]
 800f914:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800f918:	617b      	str	r3, [r7, #20]
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800f920:	613b      	str	r3, [r7, #16]
    IPCPDEBUG(("ipcp: up"));

    /*
     * We must have a non-zero IP address for both ends of the link.
     */
    if (!ho->neg_addr && !ho->old_addrs)
 800f922:	69bb      	ldr	r3, [r7, #24]
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	f003 0301 	and.w	r3, r3, #1
 800f92a:	b2db      	uxtb	r3, r3
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d10a      	bne.n	800f946 <ipcp_up+0x4a>
 800f930:	69bb      	ldr	r3, [r7, #24]
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	f003 0302 	and.w	r3, r3, #2
 800f938:	b2db      	uxtb	r3, r3
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d103      	bne.n	800f946 <ipcp_up+0x4a>
	ho->hisaddr = wo->hisaddr;
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	689a      	ldr	r2, [r3, #8]
 800f942:	69bb      	ldr	r3, [r7, #24]
 800f944:	609a      	str	r2, [r3, #8]

    if (!(go->neg_addr || go->old_addrs) && (wo->neg_addr || wo->old_addrs)
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	f003 0301 	and.w	r3, r3, #1
 800f94e:	b2db      	uxtb	r3, r3
 800f950:	2b00      	cmp	r3, #0
 800f952:	d11f      	bne.n	800f994 <ipcp_up+0x98>
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	f003 0302 	and.w	r3, r3, #2
 800f95c:	b2db      	uxtb	r3, r3
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d118      	bne.n	800f994 <ipcp_up+0x98>
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	781b      	ldrb	r3, [r3, #0]
 800f966:	f003 0301 	and.w	r3, r3, #1
 800f96a:	b2db      	uxtb	r3, r3
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d106      	bne.n	800f97e <ipcp_up+0x82>
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	f003 0302 	and.w	r3, r3, #2
 800f978:	b2db      	uxtb	r3, r3
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d00a      	beq.n	800f994 <ipcp_up+0x98>
	&& wo->ouraddr != 0) {
 800f97e:	693b      	ldr	r3, [r7, #16]
 800f980:	685b      	ldr	r3, [r3, #4]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d006      	beq.n	800f994 <ipcp_up+0x98>
	ppp_error(("Peer refused to agree to our IP address"));
	ipcp_close(f->pcb, "Refused our IP address");
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	493b      	ldr	r1, [pc, #236]	; (800fa78 <ipcp_up+0x17c>)
 800f98c:	4618      	mov	r0, r3
 800f98e:	f7fe ff36 	bl	800e7fe <ipcp_close>
	return;
 800f992:	e06e      	b.n	800fa72 <ipcp_up+0x176>
    }
    if (go->ouraddr == 0) {
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	685b      	ldr	r3, [r3, #4]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d106      	bne.n	800f9aa <ipcp_up+0xae>
	ppp_error(("Could not determine local IP address"));
	ipcp_close(f->pcb, "Could not determine local IP address");
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4936      	ldr	r1, [pc, #216]	; (800fa7c <ipcp_up+0x180>)
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f7fe ff2b 	bl	800e7fe <ipcp_close>
	return;
 800f9a8:	e063      	b.n	800fa72 <ipcp_up+0x176>
    }
    if (ho->hisaddr == 0 && !pcb->settings.noremoteip) {
 800f9aa:	69bb      	ldr	r3, [r7, #24]
 800f9ac:	689b      	ldr	r3, [r3, #8]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d10c      	bne.n	800f9cc <ipcp_up+0xd0>
 800f9b2:	69fb      	ldr	r3, [r7, #28]
 800f9b4:	781b      	ldrb	r3, [r3, #0]
 800f9b6:	f003 0304 	and.w	r3, r3, #4
 800f9ba:	b2db      	uxtb	r3, r3
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d105      	bne.n	800f9cc <ipcp_up+0xd0>
	ho->hisaddr = lwip_htonl(0x0a404040);
 800f9c0:	482f      	ldr	r0, [pc, #188]	; (800fa80 <ipcp_up+0x184>)
 800f9c2:	f7f4 fa3e 	bl	8003e42 <lwip_htonl>
 800f9c6:	4602      	mov	r2, r0
 800f9c8:	69bb      	ldr	r3, [r7, #24]
 800f9ca:	609a      	str	r2, [r3, #8]
#endif /* LWIP_DNS */

    /*
     * Check that the peer is allowed to use the IP address it wants.
     */
    if (ho->hisaddr != 0) {
 800f9cc:	69bb      	ldr	r3, [r7, #24]
 800f9ce:	689b      	ldr	r3, [r3, #8]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d01a      	beq.n	800fa0a <ipcp_up+0x10e>
	u32_t addr = lwip_ntohl(ho->hisaddr);
 800f9d4:	69bb      	ldr	r3, [r7, #24]
 800f9d6:	689b      	ldr	r3, [r3, #8]
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f7f4 fa32 	bl	8003e42 <lwip_htonl>
 800f9de:	60f8      	str	r0, [r7, #12]
	if ((addr >> IP_CLASSA_NSHIFT) == IP_LOOPBACKNET
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	0e1b      	lsrs	r3, r3, #24
 800f9e4:	2b7f      	cmp	r3, #127	; 0x7f
 800f9e6:	d00b      	beq.n	800fa00 <ipcp_up+0x104>
	    || IP_MULTICAST(addr) || IP_BADCLASS(addr)
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f9ee:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800f9f2:	d005      	beq.n	800fa00 <ipcp_up+0x104>
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f9fa:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 800f9fe:	d104      	bne.n	800fa0a <ipcp_up+0x10e>
#if PPP_SERVER && PPP_AUTH_SUPPORT
	    || (pcb->settings.auth_required && wo->hisaddr != ho->hisaddr)
#endif /* PPP_SERVER && PPP_AUTH_SUPPORT */
	    ) {
		ppp_error(("Peer is not authorized to use remote address %I", ho->hisaddr));
		ipcp_close(pcb, "Unauthorized remote IP address");
 800fa00:	4920      	ldr	r1, [pc, #128]	; (800fa84 <ipcp_up+0x188>)
 800fa02:	69f8      	ldr	r0, [r7, #28]
 800fa04:	f7fe fefb 	bl	800e7fe <ipcp_close>
		return;
 800fa08:	e033      	b.n	800fa72 <ipcp_up+0x176>
#endif /* DEMAND_SUPPORT */
    {
	/*
	 * Set IP addresses and (if specified) netmask.
	 */
	mask = get_mask(go->ouraddr);
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f002 fd36 	bl	8012480 <get_mask>
 800fa14:	60b8      	str	r0, [r7, #8]

#if !(defined(SVR4) && (defined(SNI) || defined(__USLC__)))
	if (!sifaddr(pcb, go->ouraddr, ho->hisaddr, mask)) {
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	6859      	ldr	r1, [r3, #4]
 800fa1a:	69bb      	ldr	r3, [r7, #24]
 800fa1c:	689a      	ldr	r2, [r3, #8]
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	69f8      	ldr	r0, [r7, #28]
 800fa22:	f002 fcc3 	bl	80123ac <sifaddr>
 800fa26:	4603      	mov	r3, r0
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d106      	bne.n	800fa3a <ipcp_up+0x13e>
#if PPP_DEBUG
	    ppp_warn(("Interface configuration failed"));
#endif /* PPP_DEBUG */
	    ipcp_close(f->pcb, "Interface configuration failed");
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	4915      	ldr	r1, [pc, #84]	; (800fa88 <ipcp_up+0x18c>)
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7fe fee3 	bl	800e7fe <ipcp_close>
	    return;
 800fa38:	e01b      	b.n	800fa72 <ipcp_up+0x176>
	}
#endif

	/* bring the interface up for IP */
	if (!sifup(pcb)) {
 800fa3a:	69f8      	ldr	r0, [r7, #28]
 800fa3c:	f002 fce8 	bl	8012410 <sifup>
 800fa40:	4603      	mov	r3, r0
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d106      	bne.n	800fa54 <ipcp_up+0x158>
#if PPP_DEBUG
	    ppp_warn(("Interface failed to come up"));
#endif /* PPP_DEBUG */
	    ipcp_close(f->pcb, "Interface configuration failed");
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	490f      	ldr	r1, [pc, #60]	; (800fa88 <ipcp_up+0x18c>)
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f7fe fed6 	bl	800e7fe <ipcp_close>
	    return;
 800fa52:	e00e      	b.n	800fa72 <ipcp_up+0x176>
	if (ho->hisaddr != 0 && wo->proxy_arp)
	    if (sifproxyarp(pcb, ho->hisaddr))
		pcb->proxy_arp_set = 1;
#endif /* UNUSED - PROXY ARP */

	wo->ouraddr = go->ouraddr;
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	685a      	ldr	r2, [r3, #4]
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	605a      	str	r2, [r3, #4]

#if PPP_STATS_SUPPORT
    reset_link_stats(f->unit);
#endif /* PPP_STATS_SUPPORT */

    np_up(pcb, PPP_IP);
 800fa5c:	2121      	movs	r1, #33	; 0x21
 800fa5e:	69f8      	ldr	r0, [r7, #28]
 800fa60:	f7fd fecc 	bl	800d7fc <np_up>
    pcb->ipcp_is_up = 1;
 800fa64:	69fa      	ldr	r2, [r7, #28]
 800fa66:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800fa6a:	f043 0304 	orr.w	r3, r3, #4
 800fa6e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
#endif /* PPP_NOTIFY */
#if 0 /* UNUSED */
    if (ip_up_hook)
	ip_up_hook();
#endif /* UNUSED */
}
 800fa72:	3720      	adds	r7, #32
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}
 800fa78:	080177ac 	.word	0x080177ac
 800fa7c:	080177c4 	.word	0x080177c4
 800fa80:	0a404040 	.word	0x0a404040
 800fa84:	080177ec 	.word	0x080177ec
 800fa88:	0801780c 	.word	0x0801780c

0800fa8c <ipcp_down>:
 * ipcp_down - IPCP has gone DOWN.
 *
 * Take the IP network interface down, clear its addresses
 * and delete routes through it.
 */
static void ipcp_down(fsm *f) {
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b086      	sub	sp, #24
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	617b      	str	r3, [r7, #20]
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800faa0:	613b      	str	r3, [r7, #16]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800faa8:	60fb      	str	r3, [r7, #12]
#endif /* PPP_NOTIFY */
#if 0 /* UNUSED */
    if (ip_down_hook)
	ip_down_hook();
#endif /* UNUSED */
    if (pcb->ipcp_is_up) {
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800fab0:	f003 0304 	and.w	r3, r3, #4
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d00a      	beq.n	800fad0 <ipcp_down+0x44>
	pcb->ipcp_is_up = 0;
 800faba:	697a      	ldr	r2, [r7, #20]
 800fabc:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800fac0:	f36f 0382 	bfc	r3, #2, #1
 800fac4:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	np_down(pcb, PPP_IP);
 800fac8:	2121      	movs	r1, #33	; 0x21
 800faca:	6978      	ldr	r0, [r7, #20]
 800facc:	f7fd feb0 	bl	800d830 <np_down>
#endif /* DEMAND_SUPPORT */
    {
#if DEMAND_SUPPORT
	sifnpmode(pcb, PPP_IP, NPMODE_DROP);
#endif /* DEMAND_SUPPORT */
	sifdown(pcb);
 800fad0:	6978      	ldr	r0, [r7, #20]
 800fad2:	f002 fcc0 	bl	8012456 <sifdown>
	ipcp_clear_addrs(pcb, go->ouraddr,
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	6859      	ldr	r1, [r3, #4]
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	689a      	ldr	r2, [r3, #8]
 800fade:	2300      	movs	r3, #0
 800fae0:	6978      	ldr	r0, [r7, #20]
 800fae2:	f000 f804 	bl	800faee <ipcp_clear_addrs>
			 ho->hisaddr, 0);
#if LWIP_DNS
	cdns(pcb, go->dnsaddr[0], go->dnsaddr[1]);
#endif /* LWIP_DNS */
    }
}
 800fae6:	bf00      	nop
 800fae8:	3718      	adds	r7, #24
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}

0800faee <ipcp_clear_addrs>:

/*
 * ipcp_clear_addrs() - clear the interface addresses, routes,
 * proxy arp entries, etc.
 */
static void ipcp_clear_addrs(ppp_pcb *pcb, u32_t ouraddr, u32_t hisaddr, u8_t replacedefaultroute) {
 800faee:	b580      	push	{r7, lr}
 800faf0:	b084      	sub	sp, #16
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	60f8      	str	r0, [r7, #12]
 800faf6:	60b9      	str	r1, [r7, #8]
 800faf8:	607a      	str	r2, [r7, #4]
 800fafa:	70fb      	strb	r3, [r7, #3]
    if (!replacedefaultroute && pcb->default_route_set) {
	cifdefaultroute(pcb, ouraddr, hisaddr);
	pcb->default_route_set = 0;
    }
#endif /* UNUSED */
    cifaddr(pcb, ouraddr, hisaddr);
 800fafc:	687a      	ldr	r2, [r7, #4]
 800fafe:	68b9      	ldr	r1, [r7, #8]
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	f002 fc6f 	bl	80123e4 <cifaddr>
}
 800fb06:	bf00      	nop
 800fb08:	3710      	adds	r7, #16
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}

0800fb0e <ipcp_finished>:


/*
 * ipcp_finished - possibly shut down the lower layers.
 */
static void ipcp_finished(fsm *f) {
 800fb0e:	b580      	push	{r7, lr}
 800fb10:	b084      	sub	sp, #16
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	6078      	str	r0, [r7, #4]
	ppp_pcb *pcb = f->pcb;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	60fb      	str	r3, [r7, #12]
	if (pcb->ipcp_is_open) {
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800fb22:	f003 0302 	and.w	r3, r3, #2
 800fb26:	b2db      	uxtb	r3, r3
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d00a      	beq.n	800fb42 <ipcp_finished+0x34>
		pcb->ipcp_is_open = 0;
 800fb2c:	68fa      	ldr	r2, [r7, #12]
 800fb2e:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800fb32:	f36f 0341 	bfc	r3, #1, #1
 800fb36:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		np_finished(pcb, PPP_IP);
 800fb3a:	2121      	movs	r1, #33	; 0x21
 800fb3c:	68f8      	ldr	r0, [r7, #12]
 800fb3e:	f7fd fe91 	bl	800d864 <np_finished>
	}
}
 800fb42:	bf00      	nop
 800fb44:	3710      	adds	r7, #16
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
	...

0800fb4c <lcp_init>:
#endif /* HAVE_MULTILINK */

/*
 * lcp_init - Initialize LCP.
 */
static void lcp_init(ppp_pcb *pcb) {
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b086      	sub	sp, #24
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	3344      	adds	r3, #68	; 0x44
 800fb58:	617b      	str	r3, [r7, #20]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	3360      	adds	r3, #96	; 0x60
 800fb5e:	613b      	str	r3, [r7, #16]
    lcp_options *ao = &pcb->lcp_allowoptions;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	33a8      	adds	r3, #168	; 0xa8
 800fb64:	60fb      	str	r3, [r7, #12]

    f->pcb = pcb;
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	687a      	ldr	r2, [r7, #4]
 800fb6a:	601a      	str	r2, [r3, #0]
    f->protocol = PPP_LCP;
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	f24c 0221 	movw	r2, #49185	; 0xc021
 800fb72:	81da      	strh	r2, [r3, #14]
    f->callbacks = &lcp_callbacks;
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	4a2b      	ldr	r2, [pc, #172]	; (800fc24 <lcp_init+0xd8>)
 800fb78:	605a      	str	r2, [r3, #4]

    fsm_init(f);
 800fb7a:	6978      	ldr	r0, [r7, #20]
 800fb7c:	f7fd fe8e 	bl	800d89c <fsm_init>

    BZERO(wo, sizeof(*wo));
 800fb80:	2224      	movs	r2, #36	; 0x24
 800fb82:	2100      	movs	r1, #0
 800fb84:	6938      	ldr	r0, [r7, #16]
 800fb86:	f004 f996 	bl	8013eb6 <memset>
    wo->neg_mru = 1;
 800fb8a:	693a      	ldr	r2, [r7, #16]
 800fb8c:	7813      	ldrb	r3, [r2, #0]
 800fb8e:	f043 0304 	orr.w	r3, r3, #4
 800fb92:	7013      	strb	r3, [r2, #0]
    wo->mru = PPP_MRU;
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800fb9a:	805a      	strh	r2, [r3, #2]
    wo->neg_asyncmap = 1;
 800fb9c:	693a      	ldr	r2, [r7, #16]
 800fb9e:	7813      	ldrb	r3, [r2, #0]
 800fba0:	f043 0308 	orr.w	r3, r3, #8
 800fba4:	7013      	strb	r3, [r2, #0]
    wo->neg_magicnumber = 1;
 800fba6:	693a      	ldr	r2, [r7, #16]
 800fba8:	7813      	ldrb	r3, [r2, #0]
 800fbaa:	f043 0320 	orr.w	r3, r3, #32
 800fbae:	7013      	strb	r3, [r2, #0]
    wo->neg_pcompression = 1;
 800fbb0:	693a      	ldr	r2, [r7, #16]
 800fbb2:	7813      	ldrb	r3, [r2, #0]
 800fbb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbb8:	7013      	strb	r3, [r2, #0]
    wo->neg_accompression = 1;
 800fbba:	693a      	ldr	r2, [r7, #16]
 800fbbc:	7813      	ldrb	r3, [r2, #0]
 800fbbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbc2:	7013      	strb	r3, [r2, #0]

    BZERO(ao, sizeof(*ao));
 800fbc4:	2224      	movs	r2, #36	; 0x24
 800fbc6:	2100      	movs	r1, #0
 800fbc8:	68f8      	ldr	r0, [r7, #12]
 800fbca:	f004 f974 	bl	8013eb6 <memset>
    ao->neg_mru = 1;
 800fbce:	68fa      	ldr	r2, [r7, #12]
 800fbd0:	7813      	ldrb	r3, [r2, #0]
 800fbd2:	f043 0304 	orr.w	r3, r3, #4
 800fbd6:	7013      	strb	r3, [r2, #0]
    ao->mru = PPP_MAXMRU;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800fbde:	805a      	strh	r2, [r3, #2]
    ao->neg_asyncmap = 1;
 800fbe0:	68fa      	ldr	r2, [r7, #12]
 800fbe2:	7813      	ldrb	r3, [r2, #0]
 800fbe4:	f043 0308 	orr.w	r3, r3, #8
 800fbe8:	7013      	strb	r3, [r2, #0]
#if CHAP_SUPPORT
    ao->neg_chap = 1;
    ao->chap_mdtype = CHAP_MDTYPE_SUPPORTED;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    ao->neg_upap = 1;
 800fbea:	68fa      	ldr	r2, [r7, #12]
 800fbec:	7813      	ldrb	r3, [r2, #0]
 800fbee:	f043 0310 	orr.w	r3, r3, #16
 800fbf2:	7013      	strb	r3, [r2, #0]
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
    ao->neg_eap = 1;
#endif /* EAP_SUPPORT */
    ao->neg_magicnumber = 1;
 800fbf4:	68fa      	ldr	r2, [r7, #12]
 800fbf6:	7813      	ldrb	r3, [r2, #0]
 800fbf8:	f043 0320 	orr.w	r3, r3, #32
 800fbfc:	7013      	strb	r3, [r2, #0]
    ao->neg_pcompression = 1;
 800fbfe:	68fa      	ldr	r2, [r7, #12]
 800fc00:	7813      	ldrb	r3, [r2, #0]
 800fc02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc06:	7013      	strb	r3, [r2, #0]
    ao->neg_accompression = 1;
 800fc08:	68fa      	ldr	r2, [r7, #12]
 800fc0a:	7813      	ldrb	r3, [r2, #0]
 800fc0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc10:	7013      	strb	r3, [r2, #0]
    ao->neg_endpoint = 1;
 800fc12:	68fa      	ldr	r2, [r7, #12]
 800fc14:	7853      	ldrb	r3, [r2, #1]
 800fc16:	f043 0304 	orr.w	r3, r3, #4
 800fc1a:	7053      	strb	r3, [r2, #1]
}
 800fc1c:	bf00      	nop
 800fc1e:	3718      	adds	r7, #24
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}
 800fc24:	08017b94 	.word	0x08017b94

0800fc28 <lcp_open>:


/*
 * lcp_open - LCP is allowed to come up.
 */
void lcp_open(ppp_pcb *pcb) {
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b084      	sub	sp, #16
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	3344      	adds	r3, #68	; 0x44
 800fc34:	60fb      	str	r3, [r7, #12]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	3360      	adds	r3, #96	; 0x60
 800fc3a:	60bb      	str	r3, [r7, #8]

    f->flags &= ~(OPT_PASSIVE | OPT_SILENT);
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	7c5b      	ldrb	r3, [r3, #17]
 800fc40:	f023 0305 	bic.w	r3, r3, #5
 800fc44:	b2da      	uxtb	r2, r3
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	745a      	strb	r2, [r3, #17]
    if (wo->passive)
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	781b      	ldrb	r3, [r3, #0]
 800fc4e:	f003 0301 	and.w	r3, r3, #1
 800fc52:	b2db      	uxtb	r3, r3
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d006      	beq.n	800fc66 <lcp_open+0x3e>
	f->flags |= OPT_PASSIVE;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	7c5b      	ldrb	r3, [r3, #17]
 800fc5c:	f043 0301 	orr.w	r3, r3, #1
 800fc60:	b2da      	uxtb	r2, r3
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	745a      	strb	r2, [r3, #17]
    if (wo->silent)
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	781b      	ldrb	r3, [r3, #0]
 800fc6a:	f003 0302 	and.w	r3, r3, #2
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d006      	beq.n	800fc82 <lcp_open+0x5a>
	f->flags |= OPT_SILENT;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	7c5b      	ldrb	r3, [r3, #17]
 800fc78:	f043 0304 	orr.w	r3, r3, #4
 800fc7c:	b2da      	uxtb	r2, r3
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	745a      	strb	r2, [r3, #17]
    fsm_open(f);
 800fc82:	68f8      	ldr	r0, [r7, #12]
 800fc84:	f7fd fea0 	bl	800d9c8 <fsm_open>
}
 800fc88:	bf00      	nop
 800fc8a:	3710      	adds	r7, #16
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <lcp_close>:


/*
 * lcp_close - Take LCP down.
 */
void lcp_close(ppp_pcb *pcb, const char *reason) {
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	6039      	str	r1, [r7, #0]
    fsm *f = &pcb->lcp_fsm;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	3344      	adds	r3, #68	; 0x44
 800fc9e:	60fb      	str	r3, [r7, #12]
    int oldstate;

    if (pcb->phase != PPP_PHASE_DEAD
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d003      	beq.n	800fcb2 <lcp_close+0x22>
#ifdef HAVE_MULTILINK
    && pcb->phase != PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	new_phase(pcb, PPP_PHASE_TERMINATE);
 800fcaa:	210b      	movs	r1, #11
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f002 fb35 	bl	801231c <new_phase>

    if (f->flags & DELAYED_UP) {
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	7c5b      	ldrb	r3, [r3, #17]
 800fcb6:	b25b      	sxtb	r3, r3
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	da06      	bge.n	800fcca <lcp_close+0x3a>
	UNTIMEOUT(lcp_delayed_up, f);
 800fcbc:	68f9      	ldr	r1, [r7, #12]
 800fcbe:	4812      	ldr	r0, [pc, #72]	; (800fd08 <lcp_close+0x78>)
 800fcc0:	f7fd fb90 	bl	800d3e4 <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2203      	movs	r2, #3
 800fcc8:	741a      	strb	r2, [r3, #16]
    }
    oldstate = f->state;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	7c1b      	ldrb	r3, [r3, #16]
 800fcce:	60bb      	str	r3, [r7, #8]

    fsm_close(f, reason);
 800fcd0:	6839      	ldr	r1, [r7, #0]
 800fcd2:	68f8      	ldr	r0, [r7, #12]
 800fcd4:	f7fd ff40 	bl	800db58 <fsm_close>
    if (oldstate == PPP_FSM_STOPPED && (f->flags & (OPT_PASSIVE|OPT_SILENT|DELAYED_UP))) {
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	2b03      	cmp	r3, #3
 800fcdc:	d10f      	bne.n	800fcfe <lcp_close+0x6e>
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	7c5b      	ldrb	r3, [r3, #17]
 800fce2:	f003 0385 	and.w	r3, r3, #133	; 0x85
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d009      	beq.n	800fcfe <lcp_close+0x6e>
	 * but it does mean that the program terminates if you do a
	 * lcp_close() when a connection hasn't been established
	 * because we are in passive/silent mode or because we have
	 * delayed the fsm_lowerup() call and it hasn't happened yet.
	 */
	f->flags &= ~DELAYED_UP;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	7c5b      	ldrb	r3, [r3, #17]
 800fcee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcf2:	b2da      	uxtb	r2, r3
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	745a      	strb	r2, [r3, #17]
	lcp_finished(f);
 800fcf8:	68f8      	ldr	r0, [r7, #12]
 800fcfa:	f001 ff1a 	bl	8011b32 <lcp_finished>
    }
}
 800fcfe:	bf00      	nop
 800fd00:	3710      	adds	r7, #16
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}
 800fd06:	bf00      	nop
 800fd08:	0800fe0d 	.word	0x0800fe0d

0800fd0c <lcp_lowerup>:


/*
 * lcp_lowerup - The lower layer is up.
 */
void lcp_lowerup(ppp_pcb *pcb) {
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b086      	sub	sp, #24
 800fd10:	af02      	add	r7, sp, #8
 800fd12:	6078      	str	r0, [r7, #4]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	3360      	adds	r3, #96	; 0x60
 800fd18:	60fb      	str	r3, [r7, #12]
    fsm *f = &pcb->lcp_fsm;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	3344      	adds	r3, #68	; 0x44
 800fd1e:	60bb      	str	r3, [r7, #8]
    /*
     * Don't use A/C or protocol compression on transmission,
     * but accept A/C and protocol compressed packets
     * if we are going to ask for A/C and protocol compression.
     */
    if (ppp_send_config(pcb, PPP_DEFMRU, 0xffffffff, 0, 0) < 0
 800fd20:	2300      	movs	r3, #0
 800fd22:	9300      	str	r3, [sp, #0]
 800fd24:	2300      	movs	r3, #0
 800fd26:	f04f 32ff 	mov.w	r2, #4294967295
 800fd2a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f002 fb04 	bl	801233c <ppp_send_config>
 800fd34:	4603      	mov	r3, r0
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	db3f      	blt.n	800fdba <lcp_lowerup+0xae>
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	f003 0308 	and.w	r3, r3, #8
 800fd42:	b2db      	uxtb	r3, r3
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d001      	beq.n	800fd4c <lcp_lowerup+0x40>
 800fd48:	2200      	movs	r2, #0
 800fd4a:	e001      	b.n	800fd50 <lcp_lowerup+0x44>
 800fd4c:	f04f 32ff 	mov.w	r2, #4294967295
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	781b      	ldrb	r3, [r3, #0]
 800fd54:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800fd58:	b2db      	uxtb	r3, r3
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800fd5a:	4619      	mov	r1, r3
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	781b      	ldrb	r3, [r3, #0]
 800fd60:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fd64:	b2db      	uxtb	r3, r3
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800fd66:	9300      	str	r3, [sp, #0]
 800fd68:	460b      	mov	r3, r1
 800fd6a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f002 fb00 	bl	8012374 <ppp_recv_config>
 800fd74:	4603      	mov	r3, r0
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	db1f      	blt.n	800fdba <lcp_lowerup+0xae>
	    return;
    pcb->peer_mru = PPP_DEFMRU;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800fd80:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0

    if (pcb->settings.listen_time != 0) {
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	885b      	ldrh	r3, [r3, #2]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d012      	beq.n	800fdb2 <lcp_lowerup+0xa6>
	f->flags |= DELAYED_UP;
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	7c5b      	ldrb	r3, [r3, #17]
 800fd90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fd94:	b2da      	uxtb	r2, r3
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	745a      	strb	r2, [r3, #17]
	TIMEOUTMS(lcp_delayed_up, f, pcb->settings.listen_time);
 800fd9a:	68b9      	ldr	r1, [r7, #8]
 800fd9c:	4809      	ldr	r0, [pc, #36]	; (800fdc4 <lcp_lowerup+0xb8>)
 800fd9e:	f7fd fb21 	bl	800d3e4 <sys_untimeout>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	885b      	ldrh	r3, [r3, #2]
 800fda6:	68ba      	ldr	r2, [r7, #8]
 800fda8:	4906      	ldr	r1, [pc, #24]	; (800fdc4 <lcp_lowerup+0xb8>)
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7fd faee 	bl	800d38c <sys_timeout>
 800fdb0:	e004      	b.n	800fdbc <lcp_lowerup+0xb0>
    } else
	fsm_lowerup(f);
 800fdb2:	68b8      	ldr	r0, [r7, #8]
 800fdb4:	f7fd fd8f 	bl	800d8d6 <fsm_lowerup>
 800fdb8:	e000      	b.n	800fdbc <lcp_lowerup+0xb0>
	    return;
 800fdba:	bf00      	nop
}
 800fdbc:	3710      	adds	r7, #16
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}
 800fdc2:	bf00      	nop
 800fdc4:	0800fe0d 	.word	0x0800fe0d

0800fdc8 <lcp_lowerdown>:


/*
 * lcp_lowerdown - The lower layer is down.
 */
void lcp_lowerdown(ppp_pcb *pcb) {
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b084      	sub	sp, #16
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	3344      	adds	r3, #68	; 0x44
 800fdd4:	60fb      	str	r3, [r7, #12]

    if (f->flags & DELAYED_UP) {
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	7c5b      	ldrb	r3, [r3, #17]
 800fdda:	b25b      	sxtb	r3, r3
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	da0b      	bge.n	800fdf8 <lcp_lowerdown+0x30>
	f->flags &= ~DELAYED_UP;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	7c5b      	ldrb	r3, [r3, #17]
 800fde4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fde8:	b2da      	uxtb	r2, r3
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	745a      	strb	r2, [r3, #17]
	UNTIMEOUT(lcp_delayed_up, f);
 800fdee:	68f9      	ldr	r1, [r7, #12]
 800fdf0:	4805      	ldr	r0, [pc, #20]	; (800fe08 <lcp_lowerdown+0x40>)
 800fdf2:	f7fd faf7 	bl	800d3e4 <sys_untimeout>
    } else
	fsm_lowerdown(f);
}
 800fdf6:	e002      	b.n	800fdfe <lcp_lowerdown+0x36>
	fsm_lowerdown(f);
 800fdf8:	68f8      	ldr	r0, [r7, #12]
 800fdfa:	f7fd fd91 	bl	800d920 <fsm_lowerdown>
}
 800fdfe:	bf00      	nop
 800fe00:	3710      	adds	r7, #16
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
 800fe06:	bf00      	nop
 800fe08:	0800fe0d 	.word	0x0800fe0d

0800fe0c <lcp_delayed_up>:


/*
 * lcp_delayed_up - Bring the lower layer up now.
 */
static void lcp_delayed_up(void *arg) {
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b084      	sub	sp, #16
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm*)arg;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	60fb      	str	r3, [r7, #12]

    if (f->flags & DELAYED_UP) {
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	7c5b      	ldrb	r3, [r3, #17]
 800fe1c:	b25b      	sxtb	r3, r3
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	da09      	bge.n	800fe36 <lcp_delayed_up+0x2a>
	f->flags &= ~DELAYED_UP;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	7c5b      	ldrb	r3, [r3, #17]
 800fe26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe2a:	b2da      	uxtb	r2, r3
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	745a      	strb	r2, [r3, #17]
	fsm_lowerup(f);
 800fe30:	68f8      	ldr	r0, [r7, #12]
 800fe32:	f7fd fd50 	bl	800d8d6 <fsm_lowerup>
    }
}
 800fe36:	bf00      	nop
 800fe38:	3710      	adds	r7, #16
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}
	...

0800fe40 <lcp_input>:


/*
 * lcp_input - Input LCP packet.
 */
static void lcp_input(ppp_pcb *pcb, u_char *p, int len) {
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b086      	sub	sp, #24
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	60f8      	str	r0, [r7, #12]
 800fe48:	60b9      	str	r1, [r7, #8]
 800fe4a:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	3344      	adds	r3, #68	; 0x44
 800fe50:	617b      	str	r3, [r7, #20]

    if (f->flags & DELAYED_UP) {
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	7c5b      	ldrb	r3, [r3, #17]
 800fe56:	b25b      	sxtb	r3, r3
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	da0d      	bge.n	800fe78 <lcp_input+0x38>
	f->flags &= ~DELAYED_UP;
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	7c5b      	ldrb	r3, [r3, #17]
 800fe60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe64:	b2da      	uxtb	r2, r3
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	745a      	strb	r2, [r3, #17]
	UNTIMEOUT(lcp_delayed_up, f);
 800fe6a:	6979      	ldr	r1, [r7, #20]
 800fe6c:	4807      	ldr	r0, [pc, #28]	; (800fe8c <lcp_input+0x4c>)
 800fe6e:	f7fd fab9 	bl	800d3e4 <sys_untimeout>
	fsm_lowerup(f);
 800fe72:	6978      	ldr	r0, [r7, #20]
 800fe74:	f7fd fd2f 	bl	800d8d6 <fsm_lowerup>
    }
    fsm_input(f, p, len);
 800fe78:	687a      	ldr	r2, [r7, #4]
 800fe7a:	68b9      	ldr	r1, [r7, #8]
 800fe7c:	6978      	ldr	r0, [r7, #20]
 800fe7e:	f7fd ff4f 	bl	800dd20 <fsm_input>
}
 800fe82:	bf00      	nop
 800fe84:	3718      	adds	r7, #24
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	0800fe0d 	.word	0x0800fe0d

0800fe90 <lcp_extcode>:

/*
 * lcp_extcode - Handle a LCP-specific code.
 */
static int lcp_extcode(fsm *f, int code, int id, u_char *inp, int len) {
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b08a      	sub	sp, #40	; 0x28
 800fe94:	af02      	add	r7, sp, #8
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	60b9      	str	r1, [r7, #8]
 800fe9a:	607a      	str	r2, [r7, #4]
 800fe9c:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800fea4:	69fb      	ldr	r3, [r7, #28]
 800fea6:	3384      	adds	r3, #132	; 0x84
 800fea8:	61bb      	str	r3, [r7, #24]
    u_char *magp;

    switch( code ){
 800feaa:	68bb      	ldr	r3, [r7, #8]
 800feac:	3b08      	subs	r3, #8
 800feae:	2b05      	cmp	r3, #5
 800feb0:	d84a      	bhi.n	800ff48 <lcp_extcode+0xb8>
 800feb2:	a201      	add	r2, pc, #4	; (adr r2, 800feb8 <lcp_extcode+0x28>)
 800feb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feb8:	0800fed1 	.word	0x0800fed1
 800febc:	0800fedd 	.word	0x0800fedd
 800fec0:	0800ff3b 	.word	0x0800ff3b
 800fec4:	0800ff4d 	.word	0x0800ff4d
 800fec8:	0800ff4d 	.word	0x0800ff4d
 800fecc:	0800ff4d 	.word	0x0800ff4d
    case PROTREJ:
	lcp_rprotrej(f, inp, len);
 800fed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fed2:	6839      	ldr	r1, [r7, #0]
 800fed4:	68f8      	ldr	r0, [r7, #12]
 800fed6:	f000 f841 	bl	800ff5c <lcp_rprotrej>
	break;
 800feda:	e03a      	b.n	800ff52 <lcp_extcode+0xc2>
    
    case ECHOREQ:
	if (f->state != PPP_FSM_OPENED)
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	7c1b      	ldrb	r3, [r3, #16]
 800fee0:	2b09      	cmp	r3, #9
 800fee2:	d135      	bne.n	800ff50 <lcp_extcode+0xc0>
	    break;
	magp = inp;
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	617b      	str	r3, [r7, #20]
	PUTLONG(go->magicnumber, magp);
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	1c5a      	adds	r2, r3, #1
 800feec:	617a      	str	r2, [r7, #20]
 800feee:	69ba      	ldr	r2, [r7, #24]
 800fef0:	6892      	ldr	r2, [r2, #8]
 800fef2:	0e12      	lsrs	r2, r2, #24
 800fef4:	b2d2      	uxtb	r2, r2
 800fef6:	701a      	strb	r2, [r3, #0]
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	1c5a      	adds	r2, r3, #1
 800fefc:	617a      	str	r2, [r7, #20]
 800fefe:	69ba      	ldr	r2, [r7, #24]
 800ff00:	6892      	ldr	r2, [r2, #8]
 800ff02:	0c12      	lsrs	r2, r2, #16
 800ff04:	b2d2      	uxtb	r2, r2
 800ff06:	701a      	strb	r2, [r3, #0]
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	1c5a      	adds	r2, r3, #1
 800ff0c:	617a      	str	r2, [r7, #20]
 800ff0e:	69ba      	ldr	r2, [r7, #24]
 800ff10:	6892      	ldr	r2, [r2, #8]
 800ff12:	0a12      	lsrs	r2, r2, #8
 800ff14:	b2d2      	uxtb	r2, r2
 800ff16:	701a      	strb	r2, [r3, #0]
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	1c5a      	adds	r2, r3, #1
 800ff1c:	617a      	str	r2, [r7, #20]
 800ff1e:	69ba      	ldr	r2, [r7, #24]
 800ff20:	6892      	ldr	r2, [r2, #8]
 800ff22:	b2d2      	uxtb	r2, r2
 800ff24:	701a      	strb	r2, [r3, #0]
	fsm_sdata(f, ECHOREP, id, inp, len);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	b2da      	uxtb	r2, r3
 800ff2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff2c:	9300      	str	r3, [sp, #0]
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	210a      	movs	r1, #10
 800ff32:	68f8      	ldr	r0, [r7, #12]
 800ff34:	f7fe fb8c 	bl	800e650 <fsm_sdata>
	break;
 800ff38:	e00b      	b.n	800ff52 <lcp_extcode+0xc2>
    
    case ECHOREP:
	lcp_received_echo_reply(f, id, inp, len);
 800ff3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff3c:	683a      	ldr	r2, [r7, #0]
 800ff3e:	6879      	ldr	r1, [r7, #4]
 800ff40:	68f8      	ldr	r0, [r7, #12]
 800ff42:	f001 fe6a 	bl	8011c1a <lcp_received_echo_reply>
	break;
 800ff46:	e004      	b.n	800ff52 <lcp_extcode+0xc2>
    case IDENTIF:
    case TIMEREM:
	break;

    default:
	return 0;
 800ff48:	2300      	movs	r3, #0
 800ff4a:	e003      	b.n	800ff54 <lcp_extcode+0xc4>
	break;
 800ff4c:	bf00      	nop
 800ff4e:	e000      	b.n	800ff52 <lcp_extcode+0xc2>
	    break;
 800ff50:	bf00      	nop
    }
    return 1;
 800ff52:	2301      	movs	r3, #1
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	3720      	adds	r7, #32
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}

0800ff5c <lcp_rprotrej>:
/*
 * lcp_rprotrej - Receive an Protocol-Reject.
 *
 * Figure out which protocol is rejected and inform it.
 */
static void lcp_rprotrej(fsm *f, u_char *inp, int len) {
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b088      	sub	sp, #32
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	60f8      	str	r0, [r7, #12]
 800ff64:	60b9      	str	r1, [r7, #8]
 800ff66:	607a      	str	r2, [r7, #4]
    u_short prot;
#if PPP_PROTOCOLNAME
    const char *pname;
#endif /* PPP_PROTOCOLNAME */

    if (len < 2) {
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2b01      	cmp	r3, #1
 800ff6c:	dd2d      	ble.n	800ffca <lcp_rprotrej+0x6e>
	LCPDEBUG(("lcp_rprotrej: Rcvd short Protocol-Reject packet!"));
	return;
    }

    GETSHORT(prot, inp);
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	1c5a      	adds	r2, r3, #1
 800ff72:	60ba      	str	r2, [r7, #8]
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	b29b      	uxth	r3, r3
 800ff78:	021b      	lsls	r3, r3, #8
 800ff7a:	837b      	strh	r3, [r7, #26]
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	1c5a      	adds	r2, r3, #1
 800ff80:	60ba      	str	r2, [r7, #8]
 800ff82:	781b      	ldrb	r3, [r3, #0]
 800ff84:	b29a      	uxth	r2, r3
 800ff86:	8b7b      	ldrh	r3, [r7, #26]
 800ff88:	4313      	orrs	r3, r2
 800ff8a:	837b      	strh	r3, [r7, #26]

    /*
     * Protocol-Reject packets received in any state other than the LCP
     * OPENED state SHOULD be silently discarded.
     */
    if( f->state != PPP_FSM_OPENED ){
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	7c1b      	ldrb	r3, [r3, #16]
 800ff90:	2b09      	cmp	r3, #9
 800ff92:	d11c      	bne.n	800ffce <lcp_rprotrej+0x72>
#endif /* PPP_PROTOCOLNAME */

    /*
     * Upcall the proper Protocol-Reject routine.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800ff94:	2300      	movs	r3, #0
 800ff96:	61fb      	str	r3, [r7, #28]
 800ff98:	e00e      	b.n	800ffb8 <lcp_rprotrej+0x5c>
	if (protp->protocol == prot) {
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	881b      	ldrh	r3, [r3, #0]
 800ff9e:	8b7a      	ldrh	r2, [r7, #26]
 800ffa0:	429a      	cmp	r2, r3
 800ffa2:	d106      	bne.n	800ffb2 <lcp_rprotrej+0x56>
		ppp_dbglog(("Protocol-Reject for '%s' (0x%x) received", pname,
		       prot));
	    else
#endif /* PPP_PROTOCOLNAME */
		ppp_dbglog(("Protocol-Reject for 0x%x received", prot));
	    (*protp->protrej)(f->pcb);
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	68db      	ldr	r3, [r3, #12]
 800ffa8:	68fa      	ldr	r2, [r7, #12]
 800ffaa:	6812      	ldr	r2, [r2, #0]
 800ffac:	4610      	mov	r0, r2
 800ffae:	4798      	blx	r3
	    return;
 800ffb0:	e00e      	b.n	800ffd0 <lcp_rprotrej+0x74>
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800ffb2:	69fb      	ldr	r3, [r7, #28]
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	61fb      	str	r3, [r7, #28]
 800ffb8:	4a07      	ldr	r2, [pc, #28]	; (800ffd8 <lcp_rprotrej+0x7c>)
 800ffba:	69fb      	ldr	r3, [r7, #28]
 800ffbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffc0:	617b      	str	r3, [r7, #20]
 800ffc2:	697b      	ldr	r3, [r7, #20]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d1e8      	bne.n	800ff9a <lcp_rprotrej+0x3e>
 800ffc8:	e002      	b.n	800ffd0 <lcp_rprotrej+0x74>
	return;
 800ffca:	bf00      	nop
 800ffcc:	e000      	b.n	800ffd0 <lcp_rprotrej+0x74>
	return;
 800ffce:	bf00      	nop
	ppp_warn(("Protocol-Reject for unsupported protocol '%s' (0x%x)", pname,
	     prot));
    else
#endif /* #if PPP_PROTOCOLNAME */
	ppp_warn(("Protocol-Reject for unsupported protocol 0x%x", prot));
}
 800ffd0:	3720      	adds	r7, #32
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}
 800ffd6:	bf00      	nop
 800ffd8:	08017c04 	.word	0x08017c04

0800ffdc <lcp_protrej>:

/*
 * lcp_protrej - A Protocol-Reject was received.
 */
/*ARGSUSED*/
static void lcp_protrej(ppp_pcb *pcb) {
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b082      	sub	sp, #8
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
    /*
     * Can't reject LCP!
     */
    ppp_error(("Received Protocol-Reject for LCP!"));
    fsm_protreject(&pcb->lcp_fsm);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	3344      	adds	r3, #68	; 0x44
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f7fe f9f5 	bl	800e3d8 <fsm_protreject>
}
 800ffee:	bf00      	nop
 800fff0:	3708      	adds	r7, #8
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}

0800fff6 <lcp_sprotrej>:


/*
 * lcp_sprotrej - Send a Protocol-Reject for some protocol.
 */
void lcp_sprotrej(ppp_pcb *pcb, u_char *p, int len) {
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b088      	sub	sp, #32
 800fffa:	af02      	add	r7, sp, #8
 800fffc:	60f8      	str	r0, [r7, #12]
 800fffe:	60b9      	str	r1, [r7, #8]
 8010000:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	3344      	adds	r3, #68	; 0x44
 8010006:	617b      	str	r3, [r7, #20]
#if 0
    p += 2;
    len -= 2;
#endif

    fsm_sdata(f, PROTREJ, ++f->id,
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	7c9b      	ldrb	r3, [r3, #18]
 801000c:	3301      	adds	r3, #1
 801000e:	b2da      	uxtb	r2, r3
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	749a      	strb	r2, [r3, #18]
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	7c9a      	ldrb	r2, [r3, #18]
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	9300      	str	r3, [sp, #0]
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	2108      	movs	r1, #8
 8010020:	6978      	ldr	r0, [r7, #20]
 8010022:	f7fe fb15 	bl	800e650 <fsm_sdata>
	      p, len);
}
 8010026:	bf00      	nop
 8010028:	3718      	adds	r7, #24
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}

0801002e <lcp_resetci>:


/*
 * lcp_resetci - Reset our CI.
 */
static void lcp_resetci(fsm *f) {
 801002e:	b5b0      	push	{r4, r5, r7, lr}
 8010030:	b086      	sub	sp, #24
 8010032:	af00      	add	r7, sp, #0
 8010034:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	617b      	str	r3, [r7, #20]
    lcp_options *wo = &pcb->lcp_wantoptions;
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	3360      	adds	r3, #96	; 0x60
 8010040:	613b      	str	r3, [r7, #16]
    lcp_options *go = &pcb->lcp_gotoptions;
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	3384      	adds	r3, #132	; 0x84
 8010046:	60fb      	str	r3, [r7, #12]
    lcp_options *ao = &pcb->lcp_allowoptions;
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	33a8      	adds	r3, #168	; 0xa8
 801004c:	60bb      	str	r3, [r7, #8]

#if PPP_AUTH_SUPPORT

    /* note: default value is true for allow options */
    if (pcb->settings.user && pcb->settings.passwd) {
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d010      	beq.n	8010078 <lcp_resetci+0x4a>
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	689b      	ldr	r3, [r3, #8]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d00c      	beq.n	8010078 <lcp_resetci+0x4a>
#if PAP_SUPPORT
      if (pcb->settings.refuse_pap) {
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	781b      	ldrb	r3, [r3, #0]
 8010062:	f003 0301 	and.w	r3, r3, #1
 8010066:	b2db      	uxtb	r3, r3
 8010068:	2b00      	cmp	r3, #0
 801006a:	d00a      	beq.n	8010082 <lcp_resetci+0x54>
        ao->neg_upap = 0;
 801006c:	68ba      	ldr	r2, [r7, #8]
 801006e:	7813      	ldrb	r3, [r2, #0]
 8010070:	f36f 1304 	bfc	r3, #4, #1
 8010074:	7013      	strb	r3, [r2, #0]
      if (pcb->settings.refuse_pap) {
 8010076:	e004      	b.n	8010082 <lcp_resetci+0x54>
      }
#endif /* PPP_SERVER */

    } else {
#if PAP_SUPPORT
      ao->neg_upap = 0;
 8010078:	68ba      	ldr	r2, [r7, #8]
 801007a:	7813      	ldrb	r3, [r2, #0]
 801007c:	f36f 1304 	bfc	r3, #4, #1
 8010080:	7013      	strb	r3, [r2, #0]
#endif /* EAP_SUPPORT */
    PPPDEBUG(LOG_DEBUG, ("\n"));

#endif /* PPP_AUTH_SUPPORT */

    wo->magicnumber = magic();
 8010082:	f001 fed5 	bl	8011e30 <magic>
 8010086:	4602      	mov	r2, r0
 8010088:	693b      	ldr	r3, [r7, #16]
 801008a:	609a      	str	r2, [r3, #8]
    wo->numloops = 0;
 801008c:	693b      	ldr	r3, [r7, #16]
 801008e:	2200      	movs	r2, #0
 8010090:	731a      	strb	r2, [r3, #12]
    *go = *wo;
 8010092:	68fa      	ldr	r2, [r7, #12]
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	4614      	mov	r4, r2
 8010098:	461d      	mov	r5, r3
 801009a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801009c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801009e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80100a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80100a2:	682b      	ldr	r3, [r5, #0]
 80100a4:	6023      	str	r3, [r4, #0]
#ifdef HAVE_MULTILINK
    if (!multilink) {
	go->neg_mrru = 0;
#endif /* HAVE_MULTILINK */
	go->neg_ssnhf = 0;
 80100a6:	68fa      	ldr	r2, [r7, #12]
 80100a8:	7853      	ldrb	r3, [r2, #1]
 80100aa:	f36f 0341 	bfc	r3, #1, #1
 80100ae:	7053      	strb	r3, [r2, #1]
	go->neg_endpoint = 0;
 80100b0:	68fa      	ldr	r2, [r7, #12]
 80100b2:	7853      	ldrb	r3, [r2, #1]
 80100b4:	f36f 0382 	bfc	r3, #2, #1
 80100b8:	7053      	strb	r3, [r2, #1]
#ifdef HAVE_MULTILINK
    }
#endif /* HAVE_MULTILINK */
    if (pcb->settings.noendpoint)
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	f003 0310 	and.w	r3, r3, #16
 80100c2:	b2db      	uxtb	r3, r3
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d004      	beq.n	80100d2 <lcp_resetci+0xa4>
	ao->neg_endpoint = 0;
 80100c8:	68ba      	ldr	r2, [r7, #8]
 80100ca:	7853      	ldrb	r3, [r2, #1]
 80100cc:	f36f 0382 	bfc	r3, #2, #1
 80100d0:	7053      	strb	r3, [r2, #1]
    pcb->peer_mru = PPP_DEFMRU;
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80100d8:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
#if 0 /* UNUSED */
    auth_reset(pcb);
#endif /* UNUSED */
}
 80100dc:	bf00      	nop
 80100de:	3718      	adds	r7, #24
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bdb0      	pop	{r4, r5, r7, pc}

080100e4 <lcp_cilen>:


/*
 * lcp_cilen - Return length of our CI.
 */
static int lcp_cilen(fsm *f) {
 80100e4:	b480      	push	{r7}
 80100e6:	b085      	sub	sp, #20
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	60fb      	str	r3, [r7, #12]
    lcp_options *go = &pcb->lcp_gotoptions;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	3384      	adds	r3, #132	; 0x84
 80100f6:	60bb      	str	r3, [r7, #8]
    /*
     * NB: we only ask for one of CHAP, UPAP, or EAP, even if we will
     * accept more than one.  We prefer EAP first, then CHAP, then
     * PAP.
     */
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	f003 0304 	and.w	r3, r3, #4
 8010100:	b2db      	uxtb	r3, r3
 8010102:	2b00      	cmp	r3, #0
 8010104:	d007      	beq.n	8010116 <lcp_cilen+0x32>
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	885b      	ldrh	r3, [r3, #2]
 801010a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801010e:	4293      	cmp	r3, r2
 8010110:	d001      	beq.n	8010116 <lcp_cilen+0x32>
 8010112:	2204      	movs	r2, #4
 8010114:	e000      	b.n	8010118 <lcp_cilen+0x34>
 8010116:	2200      	movs	r2, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	781b      	ldrb	r3, [r3, #0]
 801011c:	f003 0308 	and.w	r3, r3, #8
 8010120:	b2db      	uxtb	r3, r3
 8010122:	2b00      	cmp	r3, #0
 8010124:	d006      	beq.n	8010134 <lcp_cilen+0x50>
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801012e:	d001      	beq.n	8010134 <lcp_cilen+0x50>
 8010130:	2306      	movs	r3, #6
 8010132:	e000      	b.n	8010136 <lcp_cilen+0x52>
 8010134:	2300      	movs	r3, #0
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 8010136:	441a      	add	r2, r3
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
	    LENCISHORT(!go->neg_chap && go->neg_upap) +
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
	    LENCISHORT(go->neg_upap) +
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	781b      	ldrb	r3, [r3, #0]
 801013c:	f003 0310 	and.w	r3, r3, #16
 8010140:	b2db      	uxtb	r3, r3
 8010142:	2b00      	cmp	r3, #0
 8010144:	d001      	beq.n	801014a <lcp_cilen+0x66>
 8010146:	2304      	movs	r3, #4
 8010148:	e000      	b.n	801014c <lcp_cilen+0x68>
 801014a:	2300      	movs	r3, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 801014c:	441a      	add	r2, r3
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
	    LENCILQR(go->neg_lqr) +
#endif /* LQR_SUPPORT */
	    LENCICBCP(go->neg_cbcp) +
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	785b      	ldrb	r3, [r3, #1]
 8010152:	f003 0301 	and.w	r3, r3, #1
 8010156:	b2db      	uxtb	r3, r3
 8010158:	2b00      	cmp	r3, #0
 801015a:	d001      	beq.n	8010160 <lcp_cilen+0x7c>
 801015c:	2303      	movs	r3, #3
 801015e:	e000      	b.n	8010162 <lcp_cilen+0x7e>
 8010160:	2300      	movs	r3, #0
	    LENCISHORT(go->neg_upap) +
 8010162:	441a      	add	r2, r3
	    LENCILONG(go->neg_magicnumber) +
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	f003 0320 	and.w	r3, r3, #32
 801016c:	b2db      	uxtb	r3, r3
 801016e:	2b00      	cmp	r3, #0
 8010170:	d001      	beq.n	8010176 <lcp_cilen+0x92>
 8010172:	2306      	movs	r3, #6
 8010174:	e000      	b.n	8010178 <lcp_cilen+0x94>
 8010176:	2300      	movs	r3, #0
	    LENCICBCP(go->neg_cbcp) +
 8010178:	441a      	add	r2, r3
	    LENCIVOID(go->neg_pcompression) +
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010182:	b2db      	uxtb	r3, r3
 8010184:	2b00      	cmp	r3, #0
 8010186:	d001      	beq.n	801018c <lcp_cilen+0xa8>
 8010188:	2302      	movs	r3, #2
 801018a:	e000      	b.n	801018e <lcp_cilen+0xaa>
 801018c:	2300      	movs	r3, #0
	    LENCILONG(go->neg_magicnumber) +
 801018e:	441a      	add	r2, r3
	    LENCIVOID(go->neg_accompression) +
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010198:	b2db      	uxtb	r3, r3
 801019a:	2b00      	cmp	r3, #0
 801019c:	d001      	beq.n	80101a2 <lcp_cilen+0xbe>
 801019e:	2302      	movs	r3, #2
 80101a0:	e000      	b.n	80101a4 <lcp_cilen+0xc0>
 80101a2:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_pcompression) +
 80101a4:	441a      	add	r2, r3
#ifdef HAVE_MULTILINK
	    LENCISHORT(go->neg_mrru) +
#endif /* HAVE_MULTILINK */
	    LENCIVOID(go->neg_ssnhf) +
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	785b      	ldrb	r3, [r3, #1]
 80101aa:	f003 0302 	and.w	r3, r3, #2
	    LENCIVOID(go->neg_accompression) +
 80101ae:	441a      	add	r2, r3
	    (go->neg_endpoint? CILEN_CHAR + go->endpoint.length: 0));
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	785b      	ldrb	r3, [r3, #1]
 80101b4:	f003 0304 	and.w	r3, r3, #4
 80101b8:	b2db      	uxtb	r3, r3
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d003      	beq.n	80101c6 <lcp_cilen+0xe2>
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	7b9b      	ldrb	r3, [r3, #14]
 80101c2:	3303      	adds	r3, #3
 80101c4:	e000      	b.n	80101c8 <lcp_cilen+0xe4>
 80101c6:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_ssnhf) +
 80101c8:	4413      	add	r3, r2
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3714      	adds	r7, #20
 80101ce:	46bd      	mov	sp, r7
 80101d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d4:	4770      	bx	lr

080101d6 <lcp_addci>:


/*
 * lcp_addci - Add our desired CIs to a packet.
 */
static void lcp_addci(fsm *f, u_char *ucp, int *lenp) {
 80101d6:	b480      	push	{r7}
 80101d8:	b089      	sub	sp, #36	; 0x24
 80101da:	af00      	add	r7, sp, #0
 80101dc:	60f8      	str	r0, [r7, #12]
 80101de:	60b9      	str	r1, [r7, #8]
 80101e0:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	61bb      	str	r3, [r7, #24]
    lcp_options *go = &pcb->lcp_gotoptions;
 80101e8:	69bb      	ldr	r3, [r7, #24]
 80101ea:	3384      	adds	r3, #132	; 0x84
 80101ec:	617b      	str	r3, [r7, #20]
    u_char *start_ucp = ucp;
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	613b      	str	r3, [r7, #16]
	PUTCHAR(class, ucp); \
	for (i = 0; i < len; ++i) \
	    PUTCHAR(val[i], ucp); \
    }

    ADDCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	781b      	ldrb	r3, [r3, #0]
 80101f6:	f003 0304 	and.w	r3, r3, #4
 80101fa:	b2db      	uxtb	r3, r3
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d01f      	beq.n	8010240 <lcp_addci+0x6a>
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	885b      	ldrh	r3, [r3, #2]
 8010204:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010208:	4293      	cmp	r3, r2
 801020a:	d019      	beq.n	8010240 <lcp_addci+0x6a>
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	1c5a      	adds	r2, r3, #1
 8010210:	60ba      	str	r2, [r7, #8]
 8010212:	2201      	movs	r2, #1
 8010214:	701a      	strb	r2, [r3, #0]
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	1c5a      	adds	r2, r3, #1
 801021a:	60ba      	str	r2, [r7, #8]
 801021c:	2204      	movs	r2, #4
 801021e:	701a      	strb	r2, [r3, #0]
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	1c5a      	adds	r2, r3, #1
 8010224:	60ba      	str	r2, [r7, #8]
 8010226:	697a      	ldr	r2, [r7, #20]
 8010228:	8852      	ldrh	r2, [r2, #2]
 801022a:	0a12      	lsrs	r2, r2, #8
 801022c:	b292      	uxth	r2, r2
 801022e:	b2d2      	uxtb	r2, r2
 8010230:	701a      	strb	r2, [r3, #0]
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	1c5a      	adds	r2, r3, #1
 8010236:	60ba      	str	r2, [r7, #8]
 8010238:	697a      	ldr	r2, [r7, #20]
 801023a:	8852      	ldrh	r2, [r2, #2]
 801023c:	b2d2      	uxtb	r2, r2
 801023e:	701a      	strb	r2, [r3, #0]
    ADDCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	781b      	ldrb	r3, [r3, #0]
 8010244:	f003 0308 	and.w	r3, r3, #8
 8010248:	b2db      	uxtb	r3, r3
 801024a:	2b00      	cmp	r3, #0
 801024c:	d02d      	beq.n	80102aa <lcp_addci+0xd4>
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	685b      	ldr	r3, [r3, #4]
 8010252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010256:	d028      	beq.n	80102aa <lcp_addci+0xd4>
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	1c5a      	adds	r2, r3, #1
 801025c:	60ba      	str	r2, [r7, #8]
 801025e:	2202      	movs	r2, #2
 8010260:	701a      	strb	r2, [r3, #0]
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	1c5a      	adds	r2, r3, #1
 8010266:	60ba      	str	r2, [r7, #8]
 8010268:	2206      	movs	r2, #6
 801026a:	701a      	strb	r2, [r3, #0]
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	1c5a      	adds	r2, r3, #1
 8010270:	60ba      	str	r2, [r7, #8]
 8010272:	697a      	ldr	r2, [r7, #20]
 8010274:	6852      	ldr	r2, [r2, #4]
 8010276:	0e12      	lsrs	r2, r2, #24
 8010278:	b2d2      	uxtb	r2, r2
 801027a:	701a      	strb	r2, [r3, #0]
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	1c5a      	adds	r2, r3, #1
 8010280:	60ba      	str	r2, [r7, #8]
 8010282:	697a      	ldr	r2, [r7, #20]
 8010284:	6852      	ldr	r2, [r2, #4]
 8010286:	0c12      	lsrs	r2, r2, #16
 8010288:	b2d2      	uxtb	r2, r2
 801028a:	701a      	strb	r2, [r3, #0]
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	1c5a      	adds	r2, r3, #1
 8010290:	60ba      	str	r2, [r7, #8]
 8010292:	697a      	ldr	r2, [r7, #20]
 8010294:	6852      	ldr	r2, [r2, #4]
 8010296:	0a12      	lsrs	r2, r2, #8
 8010298:	b2d2      	uxtb	r2, r2
 801029a:	701a      	strb	r2, [r3, #0]
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	1c5a      	adds	r2, r3, #1
 80102a0:	60ba      	str	r2, [r7, #8]
 80102a2:	697a      	ldr	r2, [r7, #20]
 80102a4:	6852      	ldr	r2, [r2, #4]
 80102a6:	b2d2      	uxtb	r2, r2
 80102a8:	701a      	strb	r2, [r3, #0]
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
    ADDCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
    ADDCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	f003 0310 	and.w	r3, r3, #16
 80102b2:	b2db      	uxtb	r3, r3
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d013      	beq.n	80102e0 <lcp_addci+0x10a>
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	1c5a      	adds	r2, r3, #1
 80102bc:	60ba      	str	r2, [r7, #8]
 80102be:	2203      	movs	r2, #3
 80102c0:	701a      	strb	r2, [r3, #0]
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	1c5a      	adds	r2, r3, #1
 80102c6:	60ba      	str	r2, [r7, #8]
 80102c8:	2204      	movs	r2, #4
 80102ca:	701a      	strb	r2, [r3, #0]
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	1c5a      	adds	r2, r3, #1
 80102d0:	60ba      	str	r2, [r7, #8]
 80102d2:	22c0      	movs	r2, #192	; 0xc0
 80102d4:	701a      	strb	r2, [r3, #0]
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	1c5a      	adds	r2, r3, #1
 80102da:	60ba      	str	r2, [r7, #8]
 80102dc:	2223      	movs	r2, #35	; 0x23
 80102de:	701a      	strb	r2, [r3, #0]
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ADDCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ADDCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	785b      	ldrb	r3, [r3, #1]
 80102e4:	f003 0301 	and.w	r3, r3, #1
 80102e8:	b2db      	uxtb	r3, r3
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d00e      	beq.n	801030c <lcp_addci+0x136>
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	1c5a      	adds	r2, r3, #1
 80102f2:	60ba      	str	r2, [r7, #8]
 80102f4:	220d      	movs	r2, #13
 80102f6:	701a      	strb	r2, [r3, #0]
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	1c5a      	adds	r2, r3, #1
 80102fc:	60ba      	str	r2, [r7, #8]
 80102fe:	2203      	movs	r2, #3
 8010300:	701a      	strb	r2, [r3, #0]
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	1c5a      	adds	r2, r3, #1
 8010306:	60ba      	str	r2, [r7, #8]
 8010308:	2206      	movs	r2, #6
 801030a:	701a      	strb	r2, [r3, #0]
    ADDCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	f003 0320 	and.w	r3, r3, #32
 8010314:	b2db      	uxtb	r3, r3
 8010316:	2b00      	cmp	r3, #0
 8010318:	d028      	beq.n	801036c <lcp_addci+0x196>
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	1c5a      	adds	r2, r3, #1
 801031e:	60ba      	str	r2, [r7, #8]
 8010320:	2205      	movs	r2, #5
 8010322:	701a      	strb	r2, [r3, #0]
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	1c5a      	adds	r2, r3, #1
 8010328:	60ba      	str	r2, [r7, #8]
 801032a:	2206      	movs	r2, #6
 801032c:	701a      	strb	r2, [r3, #0]
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	1c5a      	adds	r2, r3, #1
 8010332:	60ba      	str	r2, [r7, #8]
 8010334:	697a      	ldr	r2, [r7, #20]
 8010336:	6892      	ldr	r2, [r2, #8]
 8010338:	0e12      	lsrs	r2, r2, #24
 801033a:	b2d2      	uxtb	r2, r2
 801033c:	701a      	strb	r2, [r3, #0]
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	1c5a      	adds	r2, r3, #1
 8010342:	60ba      	str	r2, [r7, #8]
 8010344:	697a      	ldr	r2, [r7, #20]
 8010346:	6892      	ldr	r2, [r2, #8]
 8010348:	0c12      	lsrs	r2, r2, #16
 801034a:	b2d2      	uxtb	r2, r2
 801034c:	701a      	strb	r2, [r3, #0]
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	1c5a      	adds	r2, r3, #1
 8010352:	60ba      	str	r2, [r7, #8]
 8010354:	697a      	ldr	r2, [r7, #20]
 8010356:	6892      	ldr	r2, [r2, #8]
 8010358:	0a12      	lsrs	r2, r2, #8
 801035a:	b2d2      	uxtb	r2, r2
 801035c:	701a      	strb	r2, [r3, #0]
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	1c5a      	adds	r2, r3, #1
 8010362:	60ba      	str	r2, [r7, #8]
 8010364:	697a      	ldr	r2, [r7, #20]
 8010366:	6892      	ldr	r2, [r2, #8]
 8010368:	b2d2      	uxtb	r2, r2
 801036a:	701a      	strb	r2, [r3, #0]
    ADDCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010374:	b2db      	uxtb	r3, r3
 8010376:	2b00      	cmp	r3, #0
 8010378:	d009      	beq.n	801038e <lcp_addci+0x1b8>
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	1c5a      	adds	r2, r3, #1
 801037e:	60ba      	str	r2, [r7, #8]
 8010380:	2207      	movs	r2, #7
 8010382:	701a      	strb	r2, [r3, #0]
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	1c5a      	adds	r2, r3, #1
 8010388:	60ba      	str	r2, [r7, #8]
 801038a:	2202      	movs	r2, #2
 801038c:	701a      	strb	r2, [r3, #0]
    ADDCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	781b      	ldrb	r3, [r3, #0]
 8010392:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010396:	b2db      	uxtb	r3, r3
 8010398:	2b00      	cmp	r3, #0
 801039a:	d009      	beq.n	80103b0 <lcp_addci+0x1da>
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	1c5a      	adds	r2, r3, #1
 80103a0:	60ba      	str	r2, [r7, #8]
 80103a2:	2208      	movs	r2, #8
 80103a4:	701a      	strb	r2, [r3, #0]
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	1c5a      	adds	r2, r3, #1
 80103aa:	60ba      	str	r2, [r7, #8]
 80103ac:	2202      	movs	r2, #2
 80103ae:	701a      	strb	r2, [r3, #0]
#ifdef HAVE_MULTILINK
    ADDCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif
    ADDCIVOID(CI_SSNHF, go->neg_ssnhf);
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	785b      	ldrb	r3, [r3, #1]
 80103b4:	f003 0302 	and.w	r3, r3, #2
 80103b8:	b2db      	uxtb	r3, r3
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d009      	beq.n	80103d2 <lcp_addci+0x1fc>
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	1c5a      	adds	r2, r3, #1
 80103c2:	60ba      	str	r2, [r7, #8]
 80103c4:	2212      	movs	r2, #18
 80103c6:	701a      	strb	r2, [r3, #0]
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	1c5a      	adds	r2, r3, #1
 80103cc:	60ba      	str	r2, [r7, #8]
 80103ce:	2202      	movs	r2, #2
 80103d0:	701a      	strb	r2, [r3, #0]
    ADDCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	785b      	ldrb	r3, [r3, #1]
 80103d6:	f003 0304 	and.w	r3, r3, #4
 80103da:	b2db      	uxtb	r3, r3
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d027      	beq.n	8010430 <lcp_addci+0x25a>
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	1c5a      	adds	r2, r3, #1
 80103e4:	60ba      	str	r2, [r7, #8]
 80103e6:	2213      	movs	r2, #19
 80103e8:	701a      	strb	r2, [r3, #0]
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	1c5a      	adds	r2, r3, #1
 80103ee:	60ba      	str	r2, [r7, #8]
 80103f0:	697a      	ldr	r2, [r7, #20]
 80103f2:	7b92      	ldrb	r2, [r2, #14]
 80103f4:	3203      	adds	r2, #3
 80103f6:	b2d2      	uxtb	r2, r2
 80103f8:	701a      	strb	r2, [r3, #0]
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	1c5a      	adds	r2, r3, #1
 80103fe:	60ba      	str	r2, [r7, #8]
 8010400:	697a      	ldr	r2, [r7, #20]
 8010402:	7b52      	ldrb	r2, [r2, #13]
 8010404:	701a      	strb	r2, [r3, #0]
 8010406:	2300      	movs	r3, #0
 8010408:	61fb      	str	r3, [r7, #28]
 801040a:	e00b      	b.n	8010424 <lcp_addci+0x24e>
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	1c5a      	adds	r2, r3, #1
 8010410:	60ba      	str	r2, [r7, #8]
 8010412:	6979      	ldr	r1, [r7, #20]
 8010414:	69fa      	ldr	r2, [r7, #28]
 8010416:	440a      	add	r2, r1
 8010418:	320f      	adds	r2, #15
 801041a:	7812      	ldrb	r2, [r2, #0]
 801041c:	701a      	strb	r2, [r3, #0]
 801041e:	69fb      	ldr	r3, [r7, #28]
 8010420:	3301      	adds	r3, #1
 8010422:	61fb      	str	r3, [r7, #28]
 8010424:	697b      	ldr	r3, [r7, #20]
 8010426:	7b9b      	ldrb	r3, [r3, #14]
 8010428:	461a      	mov	r2, r3
 801042a:	69fb      	ldr	r3, [r7, #28]
 801042c:	429a      	cmp	r2, r3
 801042e:	dced      	bgt.n	801040c <lcp_addci+0x236>

    if (ucp - start_ucp != *lenp) {
	/* this should never happen, because peer_mtu should be 1500 */
	ppp_error(("Bug in lcp_addci: wrong length"));
    }
}
 8010430:	bf00      	nop
 8010432:	3724      	adds	r7, #36	; 0x24
 8010434:	46bd      	mov	sp, r7
 8010436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043a:	4770      	bx	lr

0801043c <lcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int lcp_ackci(fsm *f, u_char *p, int len) {
 801043c:	b480      	push	{r7}
 801043e:	b08b      	sub	sp, #44	; 0x2c
 8010440:	af00      	add	r7, sp, #0
 8010442:	60f8      	str	r0, [r7, #12]
 8010444:	60b9      	str	r1, [r7, #8]
 8010446:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	623b      	str	r3, [r7, #32]
    lcp_options *go = &pcb->lcp_gotoptions;
 801044e:	6a3b      	ldr	r3, [r7, #32]
 8010450:	3384      	adds	r3, #132	; 0x84
 8010452:	61fb      	str	r3, [r7, #28]
	    if (cichar != val[i]) \
		goto bad; \
	} \
    }

    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 8010454:	69fb      	ldr	r3, [r7, #28]
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	f003 0304 	and.w	r3, r3, #4
 801045c:	b2db      	uxtb	r3, r3
 801045e:	2b00      	cmp	r3, #0
 8010460:	d033      	beq.n	80104ca <lcp_ackci+0x8e>
 8010462:	69fb      	ldr	r3, [r7, #28]
 8010464:	885b      	ldrh	r3, [r3, #2]
 8010466:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801046a:	4293      	cmp	r3, r2
 801046c:	d02d      	beq.n	80104ca <lcp_ackci+0x8e>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	3b04      	subs	r3, #4
 8010472:	607b      	str	r3, [r7, #4]
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2b00      	cmp	r3, #0
 8010478:	f2c0 81c6 	blt.w	8010808 <lcp_ackci+0x3cc>
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	1c5a      	adds	r2, r3, #1
 8010480:	60ba      	str	r2, [r7, #8]
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	76fb      	strb	r3, [r7, #27]
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	1c5a      	adds	r2, r3, #1
 801048a:	60ba      	str	r2, [r7, #8]
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	76bb      	strb	r3, [r7, #26]
 8010490:	7ebb      	ldrb	r3, [r7, #26]
 8010492:	2b04      	cmp	r3, #4
 8010494:	f040 81d9 	bne.w	801084a <lcp_ackci+0x40e>
 8010498:	7efb      	ldrb	r3, [r7, #27]
 801049a:	2b01      	cmp	r3, #1
 801049c:	f040 81d5 	bne.w	801084a <lcp_ackci+0x40e>
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	1c5a      	adds	r2, r3, #1
 80104a4:	60ba      	str	r2, [r7, #8]
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	021b      	lsls	r3, r3, #8
 80104ac:	833b      	strh	r3, [r7, #24]
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	1c5a      	adds	r2, r3, #1
 80104b2:	60ba      	str	r2, [r7, #8]
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	b29a      	uxth	r2, r3
 80104b8:	8b3b      	ldrh	r3, [r7, #24]
 80104ba:	4313      	orrs	r3, r2
 80104bc:	833b      	strh	r3, [r7, #24]
 80104be:	69fb      	ldr	r3, [r7, #28]
 80104c0:	885b      	ldrh	r3, [r3, #2]
 80104c2:	8b3a      	ldrh	r2, [r7, #24]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	f040 81a1 	bne.w	801080c <lcp_ackci+0x3d0>
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 80104ca:	69fb      	ldr	r3, [r7, #28]
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	f003 0308 	and.w	r3, r3, #8
 80104d2:	b2db      	uxtb	r3, r3
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d047      	beq.n	8010568 <lcp_ackci+0x12c>
 80104d8:	69fb      	ldr	r3, [r7, #28]
 80104da:	685b      	ldr	r3, [r3, #4]
 80104dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104e0:	d042      	beq.n	8010568 <lcp_ackci+0x12c>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	3b06      	subs	r3, #6
 80104e6:	607b      	str	r3, [r7, #4]
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	f2c0 8190 	blt.w	8010810 <lcp_ackci+0x3d4>
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	1c5a      	adds	r2, r3, #1
 80104f4:	60ba      	str	r2, [r7, #8]
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	76fb      	strb	r3, [r7, #27]
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	1c5a      	adds	r2, r3, #1
 80104fe:	60ba      	str	r2, [r7, #8]
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	76bb      	strb	r3, [r7, #26]
 8010504:	7ebb      	ldrb	r3, [r7, #26]
 8010506:	2b06      	cmp	r3, #6
 8010508:	f040 819f 	bne.w	801084a <lcp_ackci+0x40e>
 801050c:	7efb      	ldrb	r3, [r7, #27]
 801050e:	2b02      	cmp	r3, #2
 8010510:	f040 819b 	bne.w	801084a <lcp_ackci+0x40e>
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	1c5a      	adds	r2, r3, #1
 8010518:	60ba      	str	r2, [r7, #8]
 801051a:	781b      	ldrb	r3, [r3, #0]
 801051c:	021b      	lsls	r3, r3, #8
 801051e:	617b      	str	r3, [r7, #20]
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	1c5a      	adds	r2, r3, #1
 8010524:	60ba      	str	r2, [r7, #8]
 8010526:	781b      	ldrb	r3, [r3, #0]
 8010528:	461a      	mov	r2, r3
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	4313      	orrs	r3, r2
 801052e:	617b      	str	r3, [r7, #20]
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	021b      	lsls	r3, r3, #8
 8010534:	617b      	str	r3, [r7, #20]
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	1c5a      	adds	r2, r3, #1
 801053a:	60ba      	str	r2, [r7, #8]
 801053c:	781b      	ldrb	r3, [r3, #0]
 801053e:	461a      	mov	r2, r3
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	4313      	orrs	r3, r2
 8010544:	617b      	str	r3, [r7, #20]
 8010546:	697b      	ldr	r3, [r7, #20]
 8010548:	021b      	lsls	r3, r3, #8
 801054a:	617b      	str	r3, [r7, #20]
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	1c5a      	adds	r2, r3, #1
 8010550:	60ba      	str	r2, [r7, #8]
 8010552:	781b      	ldrb	r3, [r3, #0]
 8010554:	461a      	mov	r2, r3
 8010556:	697b      	ldr	r3, [r7, #20]
 8010558:	4313      	orrs	r3, r2
 801055a:	617b      	str	r3, [r7, #20]
 801055c:	69fb      	ldr	r3, [r7, #28]
 801055e:	685a      	ldr	r2, [r3, #4]
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	429a      	cmp	r2, r3
 8010564:	f040 8156 	bne.w	8010814 <lcp_ackci+0x3d8>
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
    ACKCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
    ACKCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	f003 0310 	and.w	r3, r3, #16
 8010570:	b2db      	uxtb	r3, r3
 8010572:	2b00      	cmp	r3, #0
 8010574:	d02d      	beq.n	80105d2 <lcp_ackci+0x196>
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	3b04      	subs	r3, #4
 801057a:	607b      	str	r3, [r7, #4]
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2b00      	cmp	r3, #0
 8010580:	f2c0 814a 	blt.w	8010818 <lcp_ackci+0x3dc>
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	1c5a      	adds	r2, r3, #1
 8010588:	60ba      	str	r2, [r7, #8]
 801058a:	781b      	ldrb	r3, [r3, #0]
 801058c:	76fb      	strb	r3, [r7, #27]
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	1c5a      	adds	r2, r3, #1
 8010592:	60ba      	str	r2, [r7, #8]
 8010594:	781b      	ldrb	r3, [r3, #0]
 8010596:	76bb      	strb	r3, [r7, #26]
 8010598:	7ebb      	ldrb	r3, [r7, #26]
 801059a:	2b04      	cmp	r3, #4
 801059c:	f040 8155 	bne.w	801084a <lcp_ackci+0x40e>
 80105a0:	7efb      	ldrb	r3, [r7, #27]
 80105a2:	2b03      	cmp	r3, #3
 80105a4:	f040 8151 	bne.w	801084a <lcp_ackci+0x40e>
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	1c5a      	adds	r2, r3, #1
 80105ac:	60ba      	str	r2, [r7, #8]
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	021b      	lsls	r3, r3, #8
 80105b4:	833b      	strh	r3, [r7, #24]
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	1c5a      	adds	r2, r3, #1
 80105ba:	60ba      	str	r2, [r7, #8]
 80105bc:	781b      	ldrb	r3, [r3, #0]
 80105be:	b29a      	uxth	r2, r3
 80105c0:	8b3b      	ldrh	r3, [r7, #24]
 80105c2:	4313      	orrs	r3, r2
 80105c4:	833b      	strh	r3, [r7, #24]
 80105c6:	8b3b      	ldrh	r3, [r7, #24]
 80105c8:	f24c 0223 	movw	r2, #49187	; 0xc023
 80105cc:	4293      	cmp	r3, r2
 80105ce:	f040 8125 	bne.w	801081c <lcp_ackci+0x3e0>
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ACKCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 80105d2:	69fb      	ldr	r3, [r7, #28]
 80105d4:	785b      	ldrb	r3, [r3, #1]
 80105d6:	f003 0301 	and.w	r3, r3, #1
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d021      	beq.n	8010624 <lcp_ackci+0x1e8>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	3b03      	subs	r3, #3
 80105e4:	607b      	str	r3, [r7, #4]
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	f2c0 8119 	blt.w	8010820 <lcp_ackci+0x3e4>
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	1c5a      	adds	r2, r3, #1
 80105f2:	60ba      	str	r2, [r7, #8]
 80105f4:	781b      	ldrb	r3, [r3, #0]
 80105f6:	76fb      	strb	r3, [r7, #27]
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	1c5a      	adds	r2, r3, #1
 80105fc:	60ba      	str	r2, [r7, #8]
 80105fe:	781b      	ldrb	r3, [r3, #0]
 8010600:	76bb      	strb	r3, [r7, #26]
 8010602:	7ebb      	ldrb	r3, [r7, #26]
 8010604:	2b03      	cmp	r3, #3
 8010606:	f040 8120 	bne.w	801084a <lcp_ackci+0x40e>
 801060a:	7efb      	ldrb	r3, [r7, #27]
 801060c:	2b0d      	cmp	r3, #13
 801060e:	f040 811c 	bne.w	801084a <lcp_ackci+0x40e>
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	1c5a      	adds	r2, r3, #1
 8010616:	60ba      	str	r2, [r7, #8]
 8010618:	781b      	ldrb	r3, [r3, #0]
 801061a:	74fb      	strb	r3, [r7, #19]
 801061c:	7cfb      	ldrb	r3, [r7, #19]
 801061e:	2b06      	cmp	r3, #6
 8010620:	f040 8100 	bne.w	8010824 <lcp_ackci+0x3e8>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 8010624:	69fb      	ldr	r3, [r7, #28]
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	f003 0320 	and.w	r3, r3, #32
 801062c:	b2db      	uxtb	r3, r3
 801062e:	2b00      	cmp	r3, #0
 8010630:	d042      	beq.n	80106b8 <lcp_ackci+0x27c>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	3b06      	subs	r3, #6
 8010636:	607b      	str	r3, [r7, #4]
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2b00      	cmp	r3, #0
 801063c:	f2c0 80f4 	blt.w	8010828 <lcp_ackci+0x3ec>
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	1c5a      	adds	r2, r3, #1
 8010644:	60ba      	str	r2, [r7, #8]
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	76fb      	strb	r3, [r7, #27]
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	1c5a      	adds	r2, r3, #1
 801064e:	60ba      	str	r2, [r7, #8]
 8010650:	781b      	ldrb	r3, [r3, #0]
 8010652:	76bb      	strb	r3, [r7, #26]
 8010654:	7ebb      	ldrb	r3, [r7, #26]
 8010656:	2b06      	cmp	r3, #6
 8010658:	f040 80f7 	bne.w	801084a <lcp_ackci+0x40e>
 801065c:	7efb      	ldrb	r3, [r7, #27]
 801065e:	2b05      	cmp	r3, #5
 8010660:	f040 80f3 	bne.w	801084a <lcp_ackci+0x40e>
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	1c5a      	adds	r2, r3, #1
 8010668:	60ba      	str	r2, [r7, #8]
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	021b      	lsls	r3, r3, #8
 801066e:	617b      	str	r3, [r7, #20]
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	1c5a      	adds	r2, r3, #1
 8010674:	60ba      	str	r2, [r7, #8]
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	461a      	mov	r2, r3
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	4313      	orrs	r3, r2
 801067e:	617b      	str	r3, [r7, #20]
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	021b      	lsls	r3, r3, #8
 8010684:	617b      	str	r3, [r7, #20]
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	1c5a      	adds	r2, r3, #1
 801068a:	60ba      	str	r2, [r7, #8]
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	461a      	mov	r2, r3
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	4313      	orrs	r3, r2
 8010694:	617b      	str	r3, [r7, #20]
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	021b      	lsls	r3, r3, #8
 801069a:	617b      	str	r3, [r7, #20]
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	1c5a      	adds	r2, r3, #1
 80106a0:	60ba      	str	r2, [r7, #8]
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	461a      	mov	r2, r3
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	4313      	orrs	r3, r2
 80106aa:	617b      	str	r3, [r7, #20]
 80106ac:	69fb      	ldr	r3, [r7, #28]
 80106ae:	689a      	ldr	r2, [r3, #8]
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	429a      	cmp	r2, r3
 80106b4:	f040 80ba 	bne.w	801082c <lcp_ackci+0x3f0>
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 80106b8:	69fb      	ldr	r3, [r7, #28]
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d018      	beq.n	80106f8 <lcp_ackci+0x2bc>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	3b02      	subs	r3, #2
 80106ca:	607b      	str	r3, [r7, #4]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	f2c0 80ae 	blt.w	8010830 <lcp_ackci+0x3f4>
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	1c5a      	adds	r2, r3, #1
 80106d8:	60ba      	str	r2, [r7, #8]
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	76fb      	strb	r3, [r7, #27]
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	1c5a      	adds	r2, r3, #1
 80106e2:	60ba      	str	r2, [r7, #8]
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	76bb      	strb	r3, [r7, #26]
 80106e8:	7ebb      	ldrb	r3, [r7, #26]
 80106ea:	2b02      	cmp	r3, #2
 80106ec:	f040 80ad 	bne.w	801084a <lcp_ackci+0x40e>
 80106f0:	7efb      	ldrb	r3, [r7, #27]
 80106f2:	2b07      	cmp	r3, #7
 80106f4:	f040 80a9 	bne.w	801084a <lcp_ackci+0x40e>
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 80106f8:	69fb      	ldr	r3, [r7, #28]
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010700:	b2db      	uxtb	r3, r3
 8010702:	2b00      	cmp	r3, #0
 8010704:	d018      	beq.n	8010738 <lcp_ackci+0x2fc>
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	3b02      	subs	r3, #2
 801070a:	607b      	str	r3, [r7, #4]
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2b00      	cmp	r3, #0
 8010710:	f2c0 8090 	blt.w	8010834 <lcp_ackci+0x3f8>
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	1c5a      	adds	r2, r3, #1
 8010718:	60ba      	str	r2, [r7, #8]
 801071a:	781b      	ldrb	r3, [r3, #0]
 801071c:	76fb      	strb	r3, [r7, #27]
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	1c5a      	adds	r2, r3, #1
 8010722:	60ba      	str	r2, [r7, #8]
 8010724:	781b      	ldrb	r3, [r3, #0]
 8010726:	76bb      	strb	r3, [r7, #26]
 8010728:	7ebb      	ldrb	r3, [r7, #26]
 801072a:	2b02      	cmp	r3, #2
 801072c:	f040 808d 	bne.w	801084a <lcp_ackci+0x40e>
 8010730:	7efb      	ldrb	r3, [r7, #27]
 8010732:	2b08      	cmp	r3, #8
 8010734:	f040 8089 	bne.w	801084a <lcp_ackci+0x40e>
#ifdef HAVE_MULTILINK
    ACKCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 8010738:	69fb      	ldr	r3, [r7, #28]
 801073a:	785b      	ldrb	r3, [r3, #1]
 801073c:	f003 0302 	and.w	r3, r3, #2
 8010740:	b2db      	uxtb	r3, r3
 8010742:	2b00      	cmp	r3, #0
 8010744:	d015      	beq.n	8010772 <lcp_ackci+0x336>
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	3b02      	subs	r3, #2
 801074a:	607b      	str	r3, [r7, #4]
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2b00      	cmp	r3, #0
 8010750:	db72      	blt.n	8010838 <lcp_ackci+0x3fc>
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	1c5a      	adds	r2, r3, #1
 8010756:	60ba      	str	r2, [r7, #8]
 8010758:	781b      	ldrb	r3, [r3, #0]
 801075a:	76fb      	strb	r3, [r7, #27]
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	1c5a      	adds	r2, r3, #1
 8010760:	60ba      	str	r2, [r7, #8]
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	76bb      	strb	r3, [r7, #26]
 8010766:	7ebb      	ldrb	r3, [r7, #26]
 8010768:	2b02      	cmp	r3, #2
 801076a:	d16e      	bne.n	801084a <lcp_ackci+0x40e>
 801076c:	7efb      	ldrb	r3, [r7, #27]
 801076e:	2b12      	cmp	r3, #18
 8010770:	d16b      	bne.n	801084a <lcp_ackci+0x40e>
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 8010772:	69fb      	ldr	r3, [r7, #28]
 8010774:	785b      	ldrb	r3, [r3, #1]
 8010776:	f003 0304 	and.w	r3, r3, #4
 801077a:	b2db      	uxtb	r3, r3
 801077c:	2b00      	cmp	r3, #0
 801077e:	d03e      	beq.n	80107fe <lcp_ackci+0x3c2>
 8010780:	69fb      	ldr	r3, [r7, #28]
 8010782:	7b9b      	ldrb	r3, [r3, #14]
 8010784:	3303      	adds	r3, #3
 8010786:	687a      	ldr	r2, [r7, #4]
 8010788:	1ad3      	subs	r3, r2, r3
 801078a:	607b      	str	r3, [r7, #4]
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2b00      	cmp	r3, #0
 8010790:	db54      	blt.n	801083c <lcp_ackci+0x400>
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	1c5a      	adds	r2, r3, #1
 8010796:	60ba      	str	r2, [r7, #8]
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	76fb      	strb	r3, [r7, #27]
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	1c5a      	adds	r2, r3, #1
 80107a0:	60ba      	str	r2, [r7, #8]
 80107a2:	781b      	ldrb	r3, [r3, #0]
 80107a4:	76bb      	strb	r3, [r7, #26]
 80107a6:	7eba      	ldrb	r2, [r7, #26]
 80107a8:	69fb      	ldr	r3, [r7, #28]
 80107aa:	7b9b      	ldrb	r3, [r3, #14]
 80107ac:	3303      	adds	r3, #3
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d14b      	bne.n	801084a <lcp_ackci+0x40e>
 80107b2:	7efb      	ldrb	r3, [r7, #27]
 80107b4:	2b13      	cmp	r3, #19
 80107b6:	d148      	bne.n	801084a <lcp_ackci+0x40e>
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	1c5a      	adds	r2, r3, #1
 80107bc:	60ba      	str	r2, [r7, #8]
 80107be:	781b      	ldrb	r3, [r3, #0]
 80107c0:	74fb      	strb	r3, [r7, #19]
 80107c2:	69fb      	ldr	r3, [r7, #28]
 80107c4:	7b5b      	ldrb	r3, [r3, #13]
 80107c6:	7cfa      	ldrb	r2, [r7, #19]
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d139      	bne.n	8010840 <lcp_ackci+0x404>
 80107cc:	2300      	movs	r3, #0
 80107ce:	627b      	str	r3, [r7, #36]	; 0x24
 80107d0:	e00f      	b.n	80107f2 <lcp_ackci+0x3b6>
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	1c5a      	adds	r2, r3, #1
 80107d6:	60ba      	str	r2, [r7, #8]
 80107d8:	781b      	ldrb	r3, [r3, #0]
 80107da:	74fb      	strb	r3, [r7, #19]
 80107dc:	69fa      	ldr	r2, [r7, #28]
 80107de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e0:	4413      	add	r3, r2
 80107e2:	330f      	adds	r3, #15
 80107e4:	781b      	ldrb	r3, [r3, #0]
 80107e6:	7cfa      	ldrb	r2, [r7, #19]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d12b      	bne.n	8010844 <lcp_ackci+0x408>
 80107ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ee:	3301      	adds	r3, #1
 80107f0:	627b      	str	r3, [r7, #36]	; 0x24
 80107f2:	69fb      	ldr	r3, [r7, #28]
 80107f4:	7b9b      	ldrb	r3, [r3, #14]
 80107f6:	461a      	mov	r2, r3
 80107f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107fa:	429a      	cmp	r2, r3
 80107fc:	dce9      	bgt.n	80107d2 <lcp_ackci+0x396>
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d121      	bne.n	8010848 <lcp_ackci+0x40c>
	goto bad;
    return (1);
 8010804:	2301      	movs	r3, #1
 8010806:	e021      	b.n	801084c <lcp_ackci+0x410>
    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 8010808:	bf00      	nop
 801080a:	e01e      	b.n	801084a <lcp_ackci+0x40e>
 801080c:	bf00      	nop
 801080e:	e01c      	b.n	801084a <lcp_ackci+0x40e>
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 8010810:	bf00      	nop
 8010812:	e01a      	b.n	801084a <lcp_ackci+0x40e>
 8010814:	bf00      	nop
 8010816:	e018      	b.n	801084a <lcp_ackci+0x40e>
    ACKCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 8010818:	bf00      	nop
 801081a:	e016      	b.n	801084a <lcp_ackci+0x40e>
 801081c:	bf00      	nop
 801081e:	e014      	b.n	801084a <lcp_ackci+0x40e>
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 8010820:	bf00      	nop
 8010822:	e012      	b.n	801084a <lcp_ackci+0x40e>
 8010824:	bf00      	nop
 8010826:	e010      	b.n	801084a <lcp_ackci+0x40e>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 8010828:	bf00      	nop
 801082a:	e00e      	b.n	801084a <lcp_ackci+0x40e>
 801082c:	bf00      	nop
 801082e:	e00c      	b.n	801084a <lcp_ackci+0x40e>
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 8010830:	bf00      	nop
 8010832:	e00a      	b.n	801084a <lcp_ackci+0x40e>
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 8010834:	bf00      	nop
 8010836:	e008      	b.n	801084a <lcp_ackci+0x40e>
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 8010838:	bf00      	nop
 801083a:	e006      	b.n	801084a <lcp_ackci+0x40e>
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 801083c:	bf00      	nop
 801083e:	e004      	b.n	801084a <lcp_ackci+0x40e>
 8010840:	bf00      	nop
 8010842:	e002      	b.n	801084a <lcp_ackci+0x40e>
 8010844:	bf00      	nop
 8010846:	e000      	b.n	801084a <lcp_ackci+0x40e>
	goto bad;
 8010848:	bf00      	nop
bad:
    LCPDEBUG(("lcp_acki: received bad Ack!"));
    return (0);
 801084a:	2300      	movs	r3, #0
}
 801084c:	4618      	mov	r0, r3
 801084e:	372c      	adds	r7, #44	; 0x2c
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr

08010858 <lcp_nakci>:
 *
 * Returns:
 *	0 - Nak was bad.
 *	1 - Nak was good.
 */
static int lcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 8010858:	b5b0      	push	{r4, r5, r7, lr}
 801085a:	b0a0      	sub	sp, #128	; 0x80
 801085c:	af00      	add	r7, sp, #0
 801085e:	60f8      	str	r0, [r7, #12]
 8010860:	60b9      	str	r1, [r7, #8]
 8010862:	607a      	str	r2, [r7, #4]
 8010864:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	67bb      	str	r3, [r7, #120]	; 0x78
    lcp_options *go = &pcb->lcp_gotoptions;
 801086c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801086e:	3384      	adds	r3, #132	; 0x84
 8010870:	677b      	str	r3, [r7, #116]	; 0x74
    lcp_options *wo = &pcb->lcp_wantoptions;
 8010872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010874:	3360      	adds	r3, #96	; 0x60
 8010876:	673b      	str	r3, [r7, #112]	; 0x70
    u_char citype, cichar, *next;
    u_short cishort;
    u32_t cilong;
    lcp_options no;		/* options we've seen Naks for */
    lcp_options try_;		/* options to request next time */
    int looped_back = 0;
 8010878:	2300      	movs	r3, #0
 801087a:	67fb      	str	r3, [r7, #124]	; 0x7c
    int cilen;

    BZERO(&no, sizeof(no));
 801087c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010880:	2224      	movs	r2, #36	; 0x24
 8010882:	2100      	movs	r1, #0
 8010884:	4618      	mov	r0, r3
 8010886:	f003 fb16 	bl	8013eb6 <memset>
    try_ = *go;
 801088a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801088c:	f107 0414 	add.w	r4, r7, #20
 8010890:	461d      	mov	r5, r3
 8010892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801089a:	682b      	ldr	r3, [r5, #0]
 801089c:	6023      	str	r3, [r4, #0]
     * we want.  Therefore, accept any MRU less than what we asked for,
     * but then ignore the new value when setting the MRU in the kernel.
     * If they send us a bigger MRU than what we asked, accept it, up to
     * the limit of the default MRU we'd get if we didn't negotiate.
     */
    if (go->neg_mru && go->mru != PPP_DEFMRU) {
 801089e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80108a0:	781b      	ldrb	r3, [r3, #0]
 80108a2:	f003 0304 	and.w	r3, r3, #4
 80108a6:	b2db      	uxtb	r3, r3
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d045      	beq.n	8010938 <lcp_nakci+0xe0>
 80108ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80108ae:	885b      	ldrh	r3, [r3, #2]
 80108b0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80108b4:	4293      	cmp	r3, r2
 80108b6:	d03f      	beq.n	8010938 <lcp_nakci+0xe0>
	NAKCISHORT(CI_MRU, neg_mru,
 80108b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80108ba:	781b      	ldrb	r3, [r3, #0]
 80108bc:	f003 0304 	and.w	r3, r3, #4
 80108c0:	b2db      	uxtb	r3, r3
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d038      	beq.n	8010938 <lcp_nakci+0xe0>
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2b03      	cmp	r3, #3
 80108ca:	dd35      	ble.n	8010938 <lcp_nakci+0xe0>
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	3301      	adds	r3, #1
 80108d0:	781b      	ldrb	r3, [r3, #0]
 80108d2:	2b04      	cmp	r3, #4
 80108d4:	d130      	bne.n	8010938 <lcp_nakci+0xe0>
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	781b      	ldrb	r3, [r3, #0]
 80108da:	2b01      	cmp	r3, #1
 80108dc:	d12c      	bne.n	8010938 <lcp_nakci+0xe0>
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	3b04      	subs	r3, #4
 80108e2:	607b      	str	r3, [r7, #4]
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	3302      	adds	r3, #2
 80108e8:	60bb      	str	r3, [r7, #8]
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	1c5a      	adds	r2, r3, #1
 80108ee:	60ba      	str	r2, [r7, #8]
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	b29b      	uxth	r3, r3
 80108f4:	021b      	lsls	r3, r3, #8
 80108f6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	1c5a      	adds	r2, r3, #1
 80108fe:	60ba      	str	r2, [r7, #8]
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	b29a      	uxth	r2, r3
 8010904:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010908:	4313      	orrs	r3, r2
 801090a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 801090e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010912:	f043 0304 	orr.w	r3, r3, #4
 8010916:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 801091a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801091c:	885b      	ldrh	r3, [r3, #2]
 801091e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8010922:	429a      	cmp	r2, r3
 8010924:	d905      	bls.n	8010932 <lcp_nakci+0xda>
 8010926:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801092a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801092e:	4293      	cmp	r3, r2
 8010930:	d802      	bhi.n	8010938 <lcp_nakci+0xe0>
 8010932:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010936:	82fb      	strh	r3, [r7, #22]
    }

    /*
     * Add any characters they want to our (receive-side) asyncmap.
     */
    if (go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) {
 8010938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801093a:	781b      	ldrb	r3, [r3, #0]
 801093c:	f003 0308 	and.w	r3, r3, #8
 8010940:	b2db      	uxtb	r3, r3
 8010942:	2b00      	cmp	r3, #0
 8010944:	d04c      	beq.n	80109e0 <lcp_nakci+0x188>
 8010946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801094e:	d047      	beq.n	80109e0 <lcp_nakci+0x188>
	NAKCILONG(CI_ASYNCMAP, neg_asyncmap,
 8010950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	f003 0308 	and.w	r3, r3, #8
 8010958:	b2db      	uxtb	r3, r3
 801095a:	2b00      	cmp	r3, #0
 801095c:	d040      	beq.n	80109e0 <lcp_nakci+0x188>
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2b05      	cmp	r3, #5
 8010962:	dd3d      	ble.n	80109e0 <lcp_nakci+0x188>
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	3301      	adds	r3, #1
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	2b06      	cmp	r3, #6
 801096c:	d138      	bne.n	80109e0 <lcp_nakci+0x188>
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	781b      	ldrb	r3, [r3, #0]
 8010972:	2b02      	cmp	r3, #2
 8010974:	d134      	bne.n	80109e0 <lcp_nakci+0x188>
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	3b06      	subs	r3, #6
 801097a:	607b      	str	r3, [r7, #4]
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	3302      	adds	r3, #2
 8010980:	60bb      	str	r3, [r7, #8]
 8010982:	68bb      	ldr	r3, [r7, #8]
 8010984:	1c5a      	adds	r2, r3, #1
 8010986:	60ba      	str	r2, [r7, #8]
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	021b      	lsls	r3, r3, #8
 801098c:	66bb      	str	r3, [r7, #104]	; 0x68
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	1c5a      	adds	r2, r3, #1
 8010992:	60ba      	str	r2, [r7, #8]
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	461a      	mov	r2, r3
 8010998:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801099a:	4313      	orrs	r3, r2
 801099c:	66bb      	str	r3, [r7, #104]	; 0x68
 801099e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109a0:	021b      	lsls	r3, r3, #8
 80109a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	1c5a      	adds	r2, r3, #1
 80109a8:	60ba      	str	r2, [r7, #8]
 80109aa:	781b      	ldrb	r3, [r3, #0]
 80109ac:	461a      	mov	r2, r3
 80109ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109b0:	4313      	orrs	r3, r2
 80109b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80109b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109b6:	021b      	lsls	r3, r3, #8
 80109b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	1c5a      	adds	r2, r3, #1
 80109be:	60ba      	str	r2, [r7, #8]
 80109c0:	781b      	ldrb	r3, [r3, #0]
 80109c2:	461a      	mov	r2, r3
 80109c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109c6:	4313      	orrs	r3, r2
 80109c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80109ca:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80109ce:	f043 0308 	orr.w	r3, r3, #8
 80109d2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80109d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109d8:	685a      	ldr	r2, [r3, #4]
 80109da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109dc:	4313      	orrs	r3, r2
 80109de:	61bb      	str	r3, [r7, #24]
    if ((0
#if CHAP_SUPPORT
        || go->neg_chap
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
        || go->neg_upap
 80109e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109e2:	781b      	ldrb	r3, [r3, #0]
 80109e4:	f003 0310 	and.w	r3, r3, #16
 80109e8:	b2db      	uxtb	r3, r3
    if ((0
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d04d      	beq.n	8010a8a <lcp_nakci+0x232>
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
        || go->neg_eap
#endif /* EAP_SUPPORT */
        )
	&& len >= CILEN_SHORT
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	2b03      	cmp	r3, #3
 80109f2:	dd4a      	ble.n	8010a8a <lcp_nakci+0x232>
	&& p[0] == CI_AUTHTYPE && p[1] >= CILEN_SHORT && p[1] <= len) {
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	2b03      	cmp	r3, #3
 80109fa:	d146      	bne.n	8010a8a <lcp_nakci+0x232>
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	3301      	adds	r3, #1
 8010a00:	781b      	ldrb	r3, [r3, #0]
 8010a02:	2b03      	cmp	r3, #3
 8010a04:	d941      	bls.n	8010a8a <lcp_nakci+0x232>
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	3301      	adds	r3, #1
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	429a      	cmp	r2, r3
 8010a12:	dc3a      	bgt.n	8010a8a <lcp_nakci+0x232>
	cilen = p[1];
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	3301      	adds	r3, #1
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	667b      	str	r3, [r7, #100]	; 0x64
	len -= cilen;
 8010a1c:	687a      	ldr	r2, [r7, #4]
 8010a1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a20:	1ad3      	subs	r3, r2, r3
 8010a22:	607b      	str	r3, [r7, #4]
#if CHAP_SUPPORT
	no.neg_chap = go->neg_chap;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	no.neg_upap = go->neg_upap;
 8010a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8010a2c:	b2da      	uxtb	r2, r3
 8010a2e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010a32:	f362 1304 	bfi	r3, r2, #4, #1
 8010a36:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
	no.neg_eap = go->neg_eap;
#endif /* EAP_SUPPORT */
	INCPTR(2, p);
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	3302      	adds	r3, #2
 8010a3e:	60bb      	str	r3, [r7, #8]
	GETSHORT(cishort, p);
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	1c5a      	adds	r2, r3, #1
 8010a44:	60ba      	str	r2, [r7, #8]
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	b29b      	uxth	r3, r3
 8010a4a:	021b      	lsls	r3, r3, #8
 8010a4c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	1c5a      	adds	r2, r3, #1
 8010a54:	60ba      	str	r2, [r7, #8]
 8010a56:	781b      	ldrb	r3, [r3, #0]
 8010a58:	b29a      	uxth	r2, r3
 8010a5a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010a5e:	4313      	orrs	r3, r2
 8010a60:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

#if PAP_SUPPORT
	if (cishort == PPP_PAP && cilen == CILEN_SHORT) {
 8010a64:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010a68:	f24c 0223 	movw	r2, #49187	; 0xc023
 8010a6c:	4293      	cmp	r3, r2
 8010a6e:	d103      	bne.n	8010a78 <lcp_nakci+0x220>
 8010a70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a72:	2b04      	cmp	r3, #4
 8010a74:	f000 8265 	beq.w	8010f42 <lcp_nakci+0x6ea>
	    else
#endif /* CHAP_SUPPORT */

#if PAP_SUPPORT
	    if(1)
		try_.neg_upap = 0;
 8010a78:	7d3b      	ldrb	r3, [r7, #20]
 8010a7a:	f36f 1304 	bfc	r3, #4, #1
 8010a7e:	753b      	strb	r3, [r7, #20]
	    else
#endif /* PAP_SUPPORT */
	    {}

	    p += cilen - CILEN_SHORT;
 8010a80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a82:	3b04      	subs	r3, #4
 8010a84:	68ba      	ldr	r2, [r7, #8]
 8010a86:	4413      	add	r3, r2
 8010a88:	60bb      	str	r3, [r7, #8]
#endif /* LQR_SUPPORT */

    /*
     * Only implementing CBCP...not the rest of the callback options
     */
    NAKCICHAR(CI_CALLBACK, neg_cbcp,
 8010a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a8c:	785b      	ldrb	r3, [r3, #1]
 8010a8e:	f003 0301 	and.w	r3, r3, #1
 8010a92:	b2db      	uxtb	r3, r3
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d021      	beq.n	8010adc <lcp_nakci+0x284>
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2b02      	cmp	r3, #2
 8010a9c:	dd1e      	ble.n	8010adc <lcp_nakci+0x284>
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	3301      	adds	r3, #1
 8010aa2:	781b      	ldrb	r3, [r3, #0]
 8010aa4:	2b03      	cmp	r3, #3
 8010aa6:	d119      	bne.n	8010adc <lcp_nakci+0x284>
 8010aa8:	68bb      	ldr	r3, [r7, #8]
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	2b0d      	cmp	r3, #13
 8010aae:	d115      	bne.n	8010adc <lcp_nakci+0x284>
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	3b03      	subs	r3, #3
 8010ab4:	607b      	str	r3, [r7, #4]
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	3302      	adds	r3, #2
 8010aba:	60bb      	str	r3, [r7, #8]
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	1c5a      	adds	r2, r3, #1
 8010ac0:	60ba      	str	r2, [r7, #8]
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8010ac8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010acc:	f043 0301 	orr.w	r3, r3, #1
 8010ad0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8010ad4:	7d7b      	ldrb	r3, [r7, #21]
 8010ad6:	f36f 0300 	bfc	r3, #0, #1
 8010ada:	757b      	strb	r3, [r7, #21]
              );

    /*
     * Check for a looped-back line.
     */
    NAKCILONG(CI_MAGICNUMBER, neg_magicnumber,
 8010adc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ade:	781b      	ldrb	r3, [r3, #0]
 8010ae0:	f003 0320 	and.w	r3, r3, #32
 8010ae4:	b2db      	uxtb	r3, r3
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d041      	beq.n	8010b6e <lcp_nakci+0x316>
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2b05      	cmp	r3, #5
 8010aee:	dd3e      	ble.n	8010b6e <lcp_nakci+0x316>
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	3301      	adds	r3, #1
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	2b06      	cmp	r3, #6
 8010af8:	d139      	bne.n	8010b6e <lcp_nakci+0x316>
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	781b      	ldrb	r3, [r3, #0]
 8010afe:	2b05      	cmp	r3, #5
 8010b00:	d135      	bne.n	8010b6e <lcp_nakci+0x316>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	3b06      	subs	r3, #6
 8010b06:	607b      	str	r3, [r7, #4]
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	3302      	adds	r3, #2
 8010b0c:	60bb      	str	r3, [r7, #8]
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	1c5a      	adds	r2, r3, #1
 8010b12:	60ba      	str	r2, [r7, #8]
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	021b      	lsls	r3, r3, #8
 8010b18:	66bb      	str	r3, [r7, #104]	; 0x68
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	1c5a      	adds	r2, r3, #1
 8010b1e:	60ba      	str	r2, [r7, #8]
 8010b20:	781b      	ldrb	r3, [r3, #0]
 8010b22:	461a      	mov	r2, r3
 8010b24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b26:	4313      	orrs	r3, r2
 8010b28:	66bb      	str	r3, [r7, #104]	; 0x68
 8010b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b2c:	021b      	lsls	r3, r3, #8
 8010b2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	1c5a      	adds	r2, r3, #1
 8010b34:	60ba      	str	r2, [r7, #8]
 8010b36:	781b      	ldrb	r3, [r3, #0]
 8010b38:	461a      	mov	r2, r3
 8010b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b3c:	4313      	orrs	r3, r2
 8010b3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b42:	021b      	lsls	r3, r3, #8
 8010b44:	66bb      	str	r3, [r7, #104]	; 0x68
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	1c5a      	adds	r2, r3, #1
 8010b4a:	60ba      	str	r2, [r7, #8]
 8010b4c:	781b      	ldrb	r3, [r3, #0]
 8010b4e:	461a      	mov	r2, r3
 8010b50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b52:	4313      	orrs	r3, r2
 8010b54:	66bb      	str	r3, [r7, #104]	; 0x68
 8010b56:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010b5a:	f043 0320 	orr.w	r3, r3, #32
 8010b5e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8010b62:	f001 f965 	bl	8011e30 <magic>
 8010b66:	4603      	mov	r3, r0
 8010b68:	61fb      	str	r3, [r7, #28]
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	67fb      	str	r3, [r7, #124]	; 0x7c
    /*
     * Peer shouldn't send Nak for protocol compression or
     * address/control compression requests; they should send
     * a Reject instead.  If they send a Nak, treat it as a Reject.
     */
    NAKCIVOID(CI_PCOMPRESSION, neg_pcompression);
 8010b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b70:	781b      	ldrb	r3, [r3, #0]
 8010b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d01b      	beq.n	8010bb4 <lcp_nakci+0x35c>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2b01      	cmp	r3, #1
 8010b80:	dd18      	ble.n	8010bb4 <lcp_nakci+0x35c>
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	3301      	adds	r3, #1
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	2b02      	cmp	r3, #2
 8010b8a:	d113      	bne.n	8010bb4 <lcp_nakci+0x35c>
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	781b      	ldrb	r3, [r3, #0]
 8010b90:	2b07      	cmp	r3, #7
 8010b92:	d10f      	bne.n	8010bb4 <lcp_nakci+0x35c>
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	3b02      	subs	r3, #2
 8010b98:	607b      	str	r3, [r7, #4]
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	3302      	adds	r3, #2
 8010b9e:	60bb      	str	r3, [r7, #8]
 8010ba0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ba8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8010bac:	7d3b      	ldrb	r3, [r7, #20]
 8010bae:	f36f 1386 	bfc	r3, #6, #1
 8010bb2:	753b      	strb	r3, [r7, #20]
    NAKCIVOID(CI_ACCOMPRESSION, neg_accompression);
 8010bb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010bbc:	b2db      	uxtb	r3, r3
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d01b      	beq.n	8010bfa <lcp_nakci+0x3a2>
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2b01      	cmp	r3, #1
 8010bc6:	dd18      	ble.n	8010bfa <lcp_nakci+0x3a2>
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	3301      	adds	r3, #1
 8010bcc:	781b      	ldrb	r3, [r3, #0]
 8010bce:	2b02      	cmp	r3, #2
 8010bd0:	d113      	bne.n	8010bfa <lcp_nakci+0x3a2>
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	781b      	ldrb	r3, [r3, #0]
 8010bd6:	2b08      	cmp	r3, #8
 8010bd8:	d10f      	bne.n	8010bfa <lcp_nakci+0x3a2>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	3b02      	subs	r3, #2
 8010bde:	607b      	str	r3, [r7, #4]
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	3302      	adds	r3, #2
 8010be4:	60bb      	str	r3, [r7, #8]
 8010be6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bee:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8010bf2:	7d3b      	ldrb	r3, [r7, #20]
 8010bf4:	f36f 13c7 	bfc	r3, #7, #1
 8010bf8:	753b      	strb	r3, [r7, #20]

    /*
     * Nak for short sequence numbers shouldn't be sent, treat it
     * like a reject.
     */
    NAKCIVOID(CI_SSNHF, neg_ssnhf);
 8010bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010bfc:	785b      	ldrb	r3, [r3, #1]
 8010bfe:	f003 0302 	and.w	r3, r3, #2
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d01b      	beq.n	8010c40 <lcp_nakci+0x3e8>
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2b01      	cmp	r3, #1
 8010c0c:	dd18      	ble.n	8010c40 <lcp_nakci+0x3e8>
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	3301      	adds	r3, #1
 8010c12:	781b      	ldrb	r3, [r3, #0]
 8010c14:	2b02      	cmp	r3, #2
 8010c16:	d113      	bne.n	8010c40 <lcp_nakci+0x3e8>
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	781b      	ldrb	r3, [r3, #0]
 8010c1c:	2b12      	cmp	r3, #18
 8010c1e:	d10f      	bne.n	8010c40 <lcp_nakci+0x3e8>
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	3b02      	subs	r3, #2
 8010c24:	607b      	str	r3, [r7, #4]
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	3302      	adds	r3, #2
 8010c2a:	60bb      	str	r3, [r7, #8]
 8010c2c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010c30:	f043 0302 	orr.w	r3, r3, #2
 8010c34:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8010c38:	7d7b      	ldrb	r3, [r7, #21]
 8010c3a:	f36f 0341 	bfc	r3, #1, #1
 8010c3e:	757b      	strb	r3, [r7, #21]

    /*
     * Nak of the endpoint discriminator option is not permitted,
     * treat it like a reject.
     */
    NAKCIENDP(CI_EPDISC, neg_endpoint);
 8010c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c42:	785b      	ldrb	r3, [r3, #1]
 8010c44:	f003 0304 	and.w	r3, r3, #4
 8010c48:	b2db      	uxtb	r3, r3
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	f000 8148 	beq.w	8010ee0 <lcp_nakci+0x688>
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	2b02      	cmp	r3, #2
 8010c54:	f340 8144 	ble.w	8010ee0 <lcp_nakci+0x688>
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	781b      	ldrb	r3, [r3, #0]
 8010c5c:	2b13      	cmp	r3, #19
 8010c5e:	f040 813f 	bne.w	8010ee0 <lcp_nakci+0x688>
 8010c62:	68bb      	ldr	r3, [r7, #8]
 8010c64:	3301      	adds	r3, #1
 8010c66:	781b      	ldrb	r3, [r3, #0]
 8010c68:	2b02      	cmp	r3, #2
 8010c6a:	f240 8139 	bls.w	8010ee0 <lcp_nakci+0x688>
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	3301      	adds	r3, #1
 8010c72:	781b      	ldrb	r3, [r3, #0]
 8010c74:	461a      	mov	r2, r3
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	f300 8131 	bgt.w	8010ee0 <lcp_nakci+0x688>
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	3301      	adds	r3, #1
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	461a      	mov	r2, r3
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	1a9b      	subs	r3, r3, r2
 8010c8a:	607b      	str	r3, [r7, #4]
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	3301      	adds	r3, #1
 8010c90:	781b      	ldrb	r3, [r3, #0]
 8010c92:	461a      	mov	r2, r3
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	4413      	add	r3, r2
 8010c98:	60bb      	str	r3, [r7, #8]
 8010c9a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010c9e:	f043 0304 	orr.w	r3, r3, #4
 8010ca2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8010ca6:	7d7b      	ldrb	r3, [r7, #21]
 8010ca8:	f36f 0382 	bfc	r3, #2, #1
 8010cac:	757b      	strb	r3, [r7, #21]
     * For the quality protocol, the Nak means `ask me to send you quality
     * reports', but if we didn't ask for them, we don't want them.
     * An option we don't recognize represents the peer asking to
     * negotiate some option we don't support, so ignore it.
     */
    while (len >= CILEN_VOID) {
 8010cae:	e117      	b.n	8010ee0 <lcp_nakci+0x688>
	GETCHAR(citype, p);
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	1c5a      	adds	r2, r3, #1
 8010cb4:	60ba      	str	r2, [r7, #8]
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	GETCHAR(cilen, p);
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	1c5a      	adds	r2, r3, #1
 8010cc0:	60ba      	str	r2, [r7, #8]
 8010cc2:	781b      	ldrb	r3, [r3, #0]
 8010cc4:	667b      	str	r3, [r7, #100]	; 0x64
	if (cilen < CILEN_VOID || (len -= cilen) < 0)
 8010cc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010cc8:	2b01      	cmp	r3, #1
 8010cca:	f340 813a 	ble.w	8010f42 <lcp_nakci+0x6ea>
 8010cce:	687a      	ldr	r2, [r7, #4]
 8010cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010cd2:	1ad3      	subs	r3, r2, r3
 8010cd4:	607b      	str	r3, [r7, #4]
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	f2c0 8132 	blt.w	8010f42 <lcp_nakci+0x6ea>
	    goto bad;
	next = p + cilen - 2;
 8010cde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ce0:	3b02      	subs	r3, #2
 8010ce2:	68ba      	ldr	r2, [r7, #8]
 8010ce4:	4413      	add	r3, r2
 8010ce6:	65fb      	str	r3, [r7, #92]	; 0x5c

	switch (citype) {
 8010ce8:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8010cec:	3b01      	subs	r3, #1
 8010cee:	2b12      	cmp	r3, #18
 8010cf0:	f200 80f1 	bhi.w	8010ed6 <lcp_nakci+0x67e>
 8010cf4:	a201      	add	r2, pc, #4	; (adr r2, 8010cfc <lcp_nakci+0x4a4>)
 8010cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cfa:	bf00      	nop
 8010cfc:	08010d49 	.word	0x08010d49
 8010d00:	08010dbf 	.word	0x08010dbf
 8010d04:	08010df3 	.word	0x08010df3
 8010d08:	08010ed7 	.word	0x08010ed7
 8010d0c:	08010e15 	.word	0x08010e15
 8010d10:	08010ed7 	.word	0x08010ed7
 8010d14:	08010e3f 	.word	0x08010e3f
 8010d18:	08010e63 	.word	0x08010e63
 8010d1c:	08010ed7 	.word	0x08010ed7
 8010d20:	08010ed7 	.word	0x08010ed7
 8010d24:	08010ed7 	.word	0x08010ed7
 8010d28:	08010ed7 	.word	0x08010ed7
 8010d2c:	08010ed7 	.word	0x08010ed7
 8010d30:	08010ed7 	.word	0x08010ed7
 8010d34:	08010ed7 	.word	0x08010ed7
 8010d38:	08010ed7 	.word	0x08010ed7
 8010d3c:	08010ed7 	.word	0x08010ed7
 8010d40:	08010e87 	.word	0x08010e87
 8010d44:	08010eb3 	.word	0x08010eb3
	case CI_MRU:
	    if ((go->neg_mru && go->mru != PPP_DEFMRU)
 8010d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d4a:	781b      	ldrb	r3, [r3, #0]
 8010d4c:	f003 0304 	and.w	r3, r3, #4
 8010d50:	b2db      	uxtb	r3, r3
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d006      	beq.n	8010d64 <lcp_nakci+0x50c>
 8010d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d58:	885b      	ldrh	r3, [r3, #2]
 8010d5a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010d5e:	4293      	cmp	r3, r2
 8010d60:	f040 80ef 	bne.w	8010f42 <lcp_nakci+0x6ea>
		|| no.neg_mru || cilen != CILEN_SHORT)
 8010d64:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010d68:	f003 0304 	and.w	r3, r3, #4
 8010d6c:	b2db      	uxtb	r3, r3
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	f040 80e7 	bne.w	8010f42 <lcp_nakci+0x6ea>
 8010d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010d76:	2b04      	cmp	r3, #4
 8010d78:	f040 80e3 	bne.w	8010f42 <lcp_nakci+0x6ea>
		goto bad;
	    GETSHORT(cishort, p);
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	1c5a      	adds	r2, r3, #1
 8010d80:	60ba      	str	r2, [r7, #8]
 8010d82:	781b      	ldrb	r3, [r3, #0]
 8010d84:	b29b      	uxth	r3, r3
 8010d86:	021b      	lsls	r3, r3, #8
 8010d88:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	1c5a      	adds	r2, r3, #1
 8010d90:	60ba      	str	r2, [r7, #8]
 8010d92:	781b      	ldrb	r3, [r3, #0]
 8010d94:	b29a      	uxth	r2, r3
 8010d96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010d9a:	4313      	orrs	r3, r2
 8010d9c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	    if (cishort < PPP_DEFMRU) {
 8010da0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010da4:	f240 52db 	movw	r2, #1499	; 0x5db
 8010da8:	4293      	cmp	r3, r2
 8010daa:	f200 8096 	bhi.w	8010eda <lcp_nakci+0x682>
		try_.neg_mru = 1;
 8010dae:	7d3b      	ldrb	r3, [r7, #20]
 8010db0:	f043 0304 	orr.w	r3, r3, #4
 8010db4:	753b      	strb	r3, [r7, #20]
		try_.mru = cishort;
 8010db6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010dba:	82fb      	strh	r3, [r7, #22]
	    }
	    break;
 8010dbc:	e08d      	b.n	8010eda <lcp_nakci+0x682>
	case CI_ASYNCMAP:
	    if ((go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF)
 8010dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010dc0:	781b      	ldrb	r3, [r3, #0]
 8010dc2:	f003 0308 	and.w	r3, r3, #8
 8010dc6:	b2db      	uxtb	r3, r3
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d005      	beq.n	8010dd8 <lcp_nakci+0x580>
 8010dcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010dce:	685b      	ldr	r3, [r3, #4]
 8010dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dd4:	f040 80b5 	bne.w	8010f42 <lcp_nakci+0x6ea>
		|| no.neg_asyncmap || cilen != CILEN_LONG)
 8010dd8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010ddc:	f003 0308 	and.w	r3, r3, #8
 8010de0:	b2db      	uxtb	r3, r3
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	f040 80ad 	bne.w	8010f42 <lcp_nakci+0x6ea>
 8010de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010dea:	2b06      	cmp	r3, #6
 8010dec:	f040 80a9 	bne.w	8010f42 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 8010df0:	e074      	b.n	8010edc <lcp_nakci+0x684>
	    if ((0
#if CHAP_SUPPORT
                || go->neg_chap || no.neg_chap
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
                || go->neg_upap || no.neg_upap
 8010df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010df4:	781b      	ldrb	r3, [r3, #0]
 8010df6:	f003 0310 	and.w	r3, r3, #16
 8010dfa:	b2db      	uxtb	r3, r3
	    if ((0
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	f040 80a0 	bne.w	8010f42 <lcp_nakci+0x6ea>
                || go->neg_upap || no.neg_upap
 8010e02:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010e06:	f003 0310 	and.w	r3, r3, #16
 8010e0a:	b2db      	uxtb	r3, r3
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	f040 8098 	bne.w	8010f42 <lcp_nakci+0x6ea>
#if EAP_SUPPORT
		|| go->neg_eap || no.neg_eap
#endif /* EAP_SUPPORT */
		))
		goto bad;
	    break;
 8010e12:	e063      	b.n	8010edc <lcp_nakci+0x684>
	case CI_MAGICNUMBER:
	    if (go->neg_magicnumber || no.neg_magicnumber ||
 8010e14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010e16:	781b      	ldrb	r3, [r3, #0]
 8010e18:	f003 0320 	and.w	r3, r3, #32
 8010e1c:	b2db      	uxtb	r3, r3
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	f040 808f 	bne.w	8010f42 <lcp_nakci+0x6ea>
 8010e24:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010e28:	f003 0320 	and.w	r3, r3, #32
 8010e2c:	b2db      	uxtb	r3, r3
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	f040 8087 	bne.w	8010f42 <lcp_nakci+0x6ea>
 8010e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e36:	2b06      	cmp	r3, #6
 8010e38:	f040 8083 	bne.w	8010f42 <lcp_nakci+0x6ea>
		cilen != CILEN_LONG)
		goto bad;
	    break;
 8010e3c:	e04e      	b.n	8010edc <lcp_nakci+0x684>
	case CI_PCOMPRESSION:
	    if (go->neg_pcompression || no.neg_pcompression
 8010e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e46:	b2db      	uxtb	r3, r3
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d17a      	bne.n	8010f42 <lcp_nakci+0x6ea>
 8010e4c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e54:	b2db      	uxtb	r3, r3
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d173      	bne.n	8010f42 <lcp_nakci+0x6ea>
		|| cilen != CILEN_VOID)
 8010e5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e5c:	2b02      	cmp	r3, #2
 8010e5e:	d170      	bne.n	8010f42 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 8010e60:	e03c      	b.n	8010edc <lcp_nakci+0x684>
	case CI_ACCOMPRESSION:
	    if (go->neg_accompression || no.neg_accompression
 8010e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010e64:	781b      	ldrb	r3, [r3, #0]
 8010e66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010e6a:	b2db      	uxtb	r3, r3
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d168      	bne.n	8010f42 <lcp_nakci+0x6ea>
 8010e70:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010e74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010e78:	b2db      	uxtb	r3, r3
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d161      	bne.n	8010f42 <lcp_nakci+0x6ea>
		|| cilen != CILEN_VOID)
 8010e7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e80:	2b02      	cmp	r3, #2
 8010e82:	d15e      	bne.n	8010f42 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 8010e84:	e02a      	b.n	8010edc <lcp_nakci+0x684>
	    if (go->neg_mrru || no.neg_mrru || cilen != CILEN_SHORT)
		goto bad;
	    break;
#endif /* HAVE_MULTILINK */
	case CI_SSNHF:
	    if (go->neg_ssnhf || no.neg_ssnhf || cilen != CILEN_VOID)
 8010e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010e88:	785b      	ldrb	r3, [r3, #1]
 8010e8a:	f003 0302 	and.w	r3, r3, #2
 8010e8e:	b2db      	uxtb	r3, r3
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d156      	bne.n	8010f42 <lcp_nakci+0x6ea>
 8010e94:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010e98:	f003 0302 	and.w	r3, r3, #2
 8010e9c:	b2db      	uxtb	r3, r3
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d14f      	bne.n	8010f42 <lcp_nakci+0x6ea>
 8010ea2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ea4:	2b02      	cmp	r3, #2
 8010ea6:	d14c      	bne.n	8010f42 <lcp_nakci+0x6ea>
		goto bad;
	    try_.neg_ssnhf = 1;
 8010ea8:	7d7b      	ldrb	r3, [r7, #21]
 8010eaa:	f043 0302 	orr.w	r3, r3, #2
 8010eae:	757b      	strb	r3, [r7, #21]
	    break;
 8010eb0:	e014      	b.n	8010edc <lcp_nakci+0x684>
	case CI_EPDISC:
	    if (go->neg_endpoint || no.neg_endpoint || cilen < CILEN_CHAR)
 8010eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010eb4:	785b      	ldrb	r3, [r3, #1]
 8010eb6:	f003 0304 	and.w	r3, r3, #4
 8010eba:	b2db      	uxtb	r3, r3
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d140      	bne.n	8010f42 <lcp_nakci+0x6ea>
 8010ec0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010ec4:	f003 0304 	and.w	r3, r3, #4
 8010ec8:	b2db      	uxtb	r3, r3
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d139      	bne.n	8010f42 <lcp_nakci+0x6ea>
 8010ece:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ed0:	2b02      	cmp	r3, #2
 8010ed2:	dd36      	ble.n	8010f42 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 8010ed4:	e002      	b.n	8010edc <lcp_nakci+0x684>
	default:
	    break;
 8010ed6:	bf00      	nop
 8010ed8:	e000      	b.n	8010edc <lcp_nakci+0x684>
	    break;
 8010eda:	bf00      	nop
	}
	p = next;
 8010edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ede:	60bb      	str	r3, [r7, #8]
    while (len >= CILEN_VOID) {
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2b01      	cmp	r3, #1
 8010ee4:	f73f aee4 	bgt.w	8010cb0 <lcp_nakci+0x458>

    /*
     * OK, the Nak is good.  Now we can update state.
     * If there are any options left we ignore them.
     */
    if (f->state != PPP_FSM_OPENED) {
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	7c1b      	ldrb	r3, [r3, #16]
 8010eec:	2b09      	cmp	r3, #9
 8010eee:	d026      	beq.n	8010f3e <lcp_nakci+0x6e6>
	if (looped_back) {
 8010ef0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d016      	beq.n	8010f24 <lcp_nakci+0x6cc>
	    if (++try_.numloops >= pcb->settings.lcp_loopbackfail) {
 8010ef6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010efa:	3301      	adds	r3, #1
 8010efc:	b2db      	uxtb	r3, r3
 8010efe:	f887 3020 	strb.w	r3, [r7, #32]
 8010f02:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010f08:	7c9b      	ldrb	r3, [r3, #18]
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	d30d      	bcc.n	8010f2a <lcp_nakci+0x6d2>
		ppp_notice(("Serial line is looped back."));
		pcb->err_code = PPPERR_LOOPBACK;
 8010f0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010f10:	220c      	movs	r2, #12
 8010f12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		lcp_close(f->pcb, "Loopback detected");
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	490c      	ldr	r1, [pc, #48]	; (8010f4c <lcp_nakci+0x6f4>)
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7fe feb7 	bl	800fc90 <lcp_close>
 8010f22:	e002      	b.n	8010f2a <lcp_nakci+0x6d2>
	    }
	} else
	    try_.numloops = 0;
 8010f24:	2300      	movs	r3, #0
 8010f26:	f887 3020 	strb.w	r3, [r7, #32]
	*go = try_;
 8010f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f2c:	461d      	mov	r5, r3
 8010f2e:	f107 0414 	add.w	r4, r7, #20
 8010f32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010f36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010f3a:	6823      	ldr	r3, [r4, #0]
 8010f3c:	602b      	str	r3, [r5, #0]
    }

    return 1;
 8010f3e:	2301      	movs	r3, #1
 8010f40:	e000      	b.n	8010f44 <lcp_nakci+0x6ec>

bad:
    LCPDEBUG(("lcp_nakci: received bad Nak!"));
    return 0;
 8010f42:	2300      	movs	r3, #0
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3780      	adds	r7, #128	; 0x80
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8010f4c:	08017830 	.word	0x08017830

08010f50 <lcp_rejci>:
 *
 * Returns:
 *	0 - Reject was bad.
 *	1 - Reject was good.
 */
static int lcp_rejci(fsm *f, u_char *p, int len) {
 8010f50:	b4b0      	push	{r4, r5, r7}
 8010f52:	b095      	sub	sp, #84	; 0x54
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	60f8      	str	r0, [r7, #12]
 8010f58:	60b9      	str	r1, [r7, #8]
 8010f5a:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	64bb      	str	r3, [r7, #72]	; 0x48
    lcp_options *go = &pcb->lcp_gotoptions;
 8010f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f64:	3384      	adds	r3, #132	; 0x84
 8010f66:	647b      	str	r3, [r7, #68]	; 0x44
    u_char cichar;
    u_short cishort;
    u32_t cilong;
    lcp_options try_;		/* options to request next time */

    try_ = *go;
 8010f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f6a:	f107 0414 	add.w	r4, r7, #20
 8010f6e:	461d      	mov	r5, r3
 8010f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010f78:	682b      	ldr	r3, [r5, #0]
 8010f7a:	6023      	str	r3, [r4, #0]
		goto bad; \
	} \
	try_.neg = 0; \
    }

    REJCISHORT(CI_MRU, neg_mru, go->mru);
 8010f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f7e:	781b      	ldrb	r3, [r3, #0]
 8010f80:	f003 0304 	and.w	r3, r3, #4
 8010f84:	b2db      	uxtb	r3, r3
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d02e      	beq.n	8010fe8 <lcp_rejci+0x98>
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2b03      	cmp	r3, #3
 8010f8e:	dd2b      	ble.n	8010fe8 <lcp_rejci+0x98>
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	3301      	adds	r3, #1
 8010f94:	781b      	ldrb	r3, [r3, #0]
 8010f96:	2b04      	cmp	r3, #4
 8010f98:	d126      	bne.n	8010fe8 <lcp_rejci+0x98>
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	781b      	ldrb	r3, [r3, #0]
 8010f9e:	2b01      	cmp	r3, #1
 8010fa0:	d122      	bne.n	8010fe8 <lcp_rejci+0x98>
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	3b04      	subs	r3, #4
 8010fa6:	607b      	str	r3, [r7, #4]
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	3302      	adds	r3, #2
 8010fac:	60bb      	str	r3, [r7, #8]
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	1c5a      	adds	r2, r3, #1
 8010fb2:	60ba      	str	r2, [r7, #8]
 8010fb4:	781b      	ldrb	r3, [r3, #0]
 8010fb6:	b29b      	uxth	r3, r3
 8010fb8:	021b      	lsls	r3, r3, #8
 8010fba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	1c5a      	adds	r2, r3, #1
 8010fc2:	60ba      	str	r2, [r7, #8]
 8010fc4:	781b      	ldrb	r3, [r3, #0]
 8010fc6:	b29a      	uxth	r2, r3
 8010fc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fcc:	4313      	orrs	r3, r2
 8010fce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fd4:	885b      	ldrh	r3, [r3, #2]
 8010fd6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	f040 81a8 	bne.w	8011330 <lcp_rejci+0x3e0>
 8010fe0:	7d3b      	ldrb	r3, [r7, #20]
 8010fe2:	f36f 0382 	bfc	r3, #2, #1
 8010fe6:	753b      	strb	r3, [r7, #20]
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 8010fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	f003 0308 	and.w	r3, r3, #8
 8010ff0:	b2db      	uxtb	r3, r3
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d03f      	beq.n	8011076 <lcp_rejci+0x126>
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2b05      	cmp	r3, #5
 8010ffa:	dd3c      	ble.n	8011076 <lcp_rejci+0x126>
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	3301      	adds	r3, #1
 8011000:	781b      	ldrb	r3, [r3, #0]
 8011002:	2b06      	cmp	r3, #6
 8011004:	d137      	bne.n	8011076 <lcp_rejci+0x126>
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	781b      	ldrb	r3, [r3, #0]
 801100a:	2b02      	cmp	r3, #2
 801100c:	d133      	bne.n	8011076 <lcp_rejci+0x126>
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	3b06      	subs	r3, #6
 8011012:	607b      	str	r3, [r7, #4]
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	3302      	adds	r3, #2
 8011018:	60bb      	str	r3, [r7, #8]
 801101a:	68bb      	ldr	r3, [r7, #8]
 801101c:	1c5a      	adds	r2, r3, #1
 801101e:	60ba      	str	r2, [r7, #8]
 8011020:	781b      	ldrb	r3, [r3, #0]
 8011022:	021b      	lsls	r3, r3, #8
 8011024:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	1c5a      	adds	r2, r3, #1
 801102a:	60ba      	str	r2, [r7, #8]
 801102c:	781b      	ldrb	r3, [r3, #0]
 801102e:	461a      	mov	r2, r3
 8011030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011032:	4313      	orrs	r3, r2
 8011034:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011038:	021b      	lsls	r3, r3, #8
 801103a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	1c5a      	adds	r2, r3, #1
 8011040:	60ba      	str	r2, [r7, #8]
 8011042:	781b      	ldrb	r3, [r3, #0]
 8011044:	461a      	mov	r2, r3
 8011046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011048:	4313      	orrs	r3, r2
 801104a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801104c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801104e:	021b      	lsls	r3, r3, #8
 8011050:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	1c5a      	adds	r2, r3, #1
 8011056:	60ba      	str	r2, [r7, #8]
 8011058:	781b      	ldrb	r3, [r3, #0]
 801105a:	461a      	mov	r2, r3
 801105c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801105e:	4313      	orrs	r3, r2
 8011060:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011064:	685a      	ldr	r2, [r3, #4]
 8011066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011068:	429a      	cmp	r2, r3
 801106a:	f040 8163 	bne.w	8011334 <lcp_rejci+0x3e4>
 801106e:	7d3b      	ldrb	r3, [r7, #20]
 8011070:	f36f 03c3 	bfc	r3, #3, #1
 8011074:	753b      	strb	r3, [r7, #20]
#if CHAP_SUPPORT
	REJCICHAP(CI_AUTHTYPE, neg_chap, go->chap_mdtype);
	if (!go->neg_chap) {
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
 8011076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011078:	781b      	ldrb	r3, [r3, #0]
 801107a:	f003 0310 	and.w	r3, r3, #16
 801107e:	b2db      	uxtb	r3, r3
 8011080:	2b00      	cmp	r3, #0
 8011082:	d02e      	beq.n	80110e2 <lcp_rejci+0x192>
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2b03      	cmp	r3, #3
 8011088:	dd2b      	ble.n	80110e2 <lcp_rejci+0x192>
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	3301      	adds	r3, #1
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	2b04      	cmp	r3, #4
 8011092:	d126      	bne.n	80110e2 <lcp_rejci+0x192>
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	781b      	ldrb	r3, [r3, #0]
 8011098:	2b03      	cmp	r3, #3
 801109a:	d122      	bne.n	80110e2 <lcp_rejci+0x192>
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	3b04      	subs	r3, #4
 80110a0:	607b      	str	r3, [r7, #4]
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	3302      	adds	r3, #2
 80110a6:	60bb      	str	r3, [r7, #8]
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	1c5a      	adds	r2, r3, #1
 80110ac:	60ba      	str	r2, [r7, #8]
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	b29b      	uxth	r3, r3
 80110b2:	021b      	lsls	r3, r3, #8
 80110b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	1c5a      	adds	r2, r3, #1
 80110bc:	60ba      	str	r2, [r7, #8]
 80110be:	781b      	ldrb	r3, [r3, #0]
 80110c0:	b29a      	uxth	r2, r3
 80110c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110c6:	4313      	orrs	r3, r2
 80110c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80110cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110d0:	f24c 0223 	movw	r2, #49187	; 0xc023
 80110d4:	4293      	cmp	r3, r2
 80110d6:	f040 812f 	bne.w	8011338 <lcp_rejci+0x3e8>
 80110da:	7d3b      	ldrb	r3, [r7, #20]
 80110dc:	f36f 1304 	bfc	r3, #4, #1
 80110e0:	753b      	strb	r3, [r7, #20]
    }
#endif /* EAP_SUPPORT */
#if LQR_SUPPORT
    REJCILQR(CI_QUALITY, neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 80110e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110e4:	785b      	ldrb	r3, [r3, #1]
 80110e6:	f003 0301 	and.w	r3, r3, #1
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d020      	beq.n	8011132 <lcp_rejci+0x1e2>
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2b02      	cmp	r3, #2
 80110f4:	dd1d      	ble.n	8011132 <lcp_rejci+0x1e2>
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	3301      	adds	r3, #1
 80110fa:	781b      	ldrb	r3, [r3, #0]
 80110fc:	2b03      	cmp	r3, #3
 80110fe:	d118      	bne.n	8011132 <lcp_rejci+0x1e2>
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	781b      	ldrb	r3, [r3, #0]
 8011104:	2b0d      	cmp	r3, #13
 8011106:	d114      	bne.n	8011132 <lcp_rejci+0x1e2>
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	3b03      	subs	r3, #3
 801110c:	607b      	str	r3, [r7, #4]
 801110e:	68bb      	ldr	r3, [r7, #8]
 8011110:	3302      	adds	r3, #2
 8011112:	60bb      	str	r3, [r7, #8]
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	1c5a      	adds	r2, r3, #1
 8011118:	60ba      	str	r2, [r7, #8]
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8011120:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011124:	2b06      	cmp	r3, #6
 8011126:	f040 8109 	bne.w	801133c <lcp_rejci+0x3ec>
 801112a:	7d7b      	ldrb	r3, [r7, #21]
 801112c:	f36f 0300 	bfc	r3, #0, #1
 8011130:	757b      	strb	r3, [r7, #21]
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 8011132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011134:	781b      	ldrb	r3, [r3, #0]
 8011136:	f003 0320 	and.w	r3, r3, #32
 801113a:	b2db      	uxtb	r3, r3
 801113c:	2b00      	cmp	r3, #0
 801113e:	d03f      	beq.n	80111c0 <lcp_rejci+0x270>
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2b05      	cmp	r3, #5
 8011144:	dd3c      	ble.n	80111c0 <lcp_rejci+0x270>
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	3301      	adds	r3, #1
 801114a:	781b      	ldrb	r3, [r3, #0]
 801114c:	2b06      	cmp	r3, #6
 801114e:	d137      	bne.n	80111c0 <lcp_rejci+0x270>
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	781b      	ldrb	r3, [r3, #0]
 8011154:	2b05      	cmp	r3, #5
 8011156:	d133      	bne.n	80111c0 <lcp_rejci+0x270>
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	3b06      	subs	r3, #6
 801115c:	607b      	str	r3, [r7, #4]
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	3302      	adds	r3, #2
 8011162:	60bb      	str	r3, [r7, #8]
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	1c5a      	adds	r2, r3, #1
 8011168:	60ba      	str	r2, [r7, #8]
 801116a:	781b      	ldrb	r3, [r3, #0]
 801116c:	021b      	lsls	r3, r3, #8
 801116e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	1c5a      	adds	r2, r3, #1
 8011174:	60ba      	str	r2, [r7, #8]
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	461a      	mov	r2, r3
 801117a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801117c:	4313      	orrs	r3, r2
 801117e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011182:	021b      	lsls	r3, r3, #8
 8011184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	1c5a      	adds	r2, r3, #1
 801118a:	60ba      	str	r2, [r7, #8]
 801118c:	781b      	ldrb	r3, [r3, #0]
 801118e:	461a      	mov	r2, r3
 8011190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011192:	4313      	orrs	r3, r2
 8011194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011198:	021b      	lsls	r3, r3, #8
 801119a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	1c5a      	adds	r2, r3, #1
 80111a0:	60ba      	str	r2, [r7, #8]
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	461a      	mov	r2, r3
 80111a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111a8:	4313      	orrs	r3, r2
 80111aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111ae:	689a      	ldr	r2, [r3, #8]
 80111b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111b2:	429a      	cmp	r2, r3
 80111b4:	f040 80c4 	bne.w	8011340 <lcp_rejci+0x3f0>
 80111b8:	7d3b      	ldrb	r3, [r7, #20]
 80111ba:	f36f 1345 	bfc	r3, #5, #1
 80111be:	753b      	strb	r3, [r7, #20]
    REJCIVOID(CI_PCOMPRESSION, neg_pcompression);
 80111c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111c8:	b2db      	uxtb	r3, r3
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d015      	beq.n	80111fa <lcp_rejci+0x2aa>
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2b01      	cmp	r3, #1
 80111d2:	dd12      	ble.n	80111fa <lcp_rejci+0x2aa>
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	3301      	adds	r3, #1
 80111d8:	781b      	ldrb	r3, [r3, #0]
 80111da:	2b02      	cmp	r3, #2
 80111dc:	d10d      	bne.n	80111fa <lcp_rejci+0x2aa>
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	2b07      	cmp	r3, #7
 80111e4:	d109      	bne.n	80111fa <lcp_rejci+0x2aa>
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	3b02      	subs	r3, #2
 80111ea:	607b      	str	r3, [r7, #4]
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	3302      	adds	r3, #2
 80111f0:	60bb      	str	r3, [r7, #8]
 80111f2:	7d3b      	ldrb	r3, [r7, #20]
 80111f4:	f36f 1386 	bfc	r3, #6, #1
 80111f8:	753b      	strb	r3, [r7, #20]
    REJCIVOID(CI_ACCOMPRESSION, neg_accompression);
 80111fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111fc:	781b      	ldrb	r3, [r3, #0]
 80111fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011202:	b2db      	uxtb	r3, r3
 8011204:	2b00      	cmp	r3, #0
 8011206:	d015      	beq.n	8011234 <lcp_rejci+0x2e4>
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2b01      	cmp	r3, #1
 801120c:	dd12      	ble.n	8011234 <lcp_rejci+0x2e4>
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	3301      	adds	r3, #1
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	2b02      	cmp	r3, #2
 8011216:	d10d      	bne.n	8011234 <lcp_rejci+0x2e4>
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	2b08      	cmp	r3, #8
 801121e:	d109      	bne.n	8011234 <lcp_rejci+0x2e4>
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	3b02      	subs	r3, #2
 8011224:	607b      	str	r3, [r7, #4]
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	3302      	adds	r3, #2
 801122a:	60bb      	str	r3, [r7, #8]
 801122c:	7d3b      	ldrb	r3, [r7, #20]
 801122e:	f36f 13c7 	bfc	r3, #7, #1
 8011232:	753b      	strb	r3, [r7, #20]
#ifdef HAVE_MULTILINK
    REJCISHORT(CI_MRRU, neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    REJCIVOID(CI_SSNHF, neg_ssnhf);
 8011234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011236:	785b      	ldrb	r3, [r3, #1]
 8011238:	f003 0302 	and.w	r3, r3, #2
 801123c:	b2db      	uxtb	r3, r3
 801123e:	2b00      	cmp	r3, #0
 8011240:	d015      	beq.n	801126e <lcp_rejci+0x31e>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2b01      	cmp	r3, #1
 8011246:	dd12      	ble.n	801126e <lcp_rejci+0x31e>
 8011248:	68bb      	ldr	r3, [r7, #8]
 801124a:	3301      	adds	r3, #1
 801124c:	781b      	ldrb	r3, [r3, #0]
 801124e:	2b02      	cmp	r3, #2
 8011250:	d10d      	bne.n	801126e <lcp_rejci+0x31e>
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	781b      	ldrb	r3, [r3, #0]
 8011256:	2b12      	cmp	r3, #18
 8011258:	d109      	bne.n	801126e <lcp_rejci+0x31e>
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	3b02      	subs	r3, #2
 801125e:	607b      	str	r3, [r7, #4]
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	3302      	adds	r3, #2
 8011264:	60bb      	str	r3, [r7, #8]
 8011266:	7d7b      	ldrb	r3, [r7, #21]
 8011268:	f36f 0341 	bfc	r3, #1, #1
 801126c:	757b      	strb	r3, [r7, #21]
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 801126e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011270:	785b      	ldrb	r3, [r3, #1]
 8011272:	f003 0304 	and.w	r3, r3, #4
 8011276:	b2db      	uxtb	r3, r3
 8011278:	2b00      	cmp	r3, #0
 801127a:	d046      	beq.n	801130a <lcp_rejci+0x3ba>
 801127c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801127e:	7b9b      	ldrb	r3, [r3, #14]
 8011280:	1cda      	adds	r2, r3, #3
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	429a      	cmp	r2, r3
 8011286:	dc40      	bgt.n	801130a <lcp_rejci+0x3ba>
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	781b      	ldrb	r3, [r3, #0]
 801128c:	2b13      	cmp	r3, #19
 801128e:	d13c      	bne.n	801130a <lcp_rejci+0x3ba>
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	3301      	adds	r3, #1
 8011294:	781b      	ldrb	r3, [r3, #0]
 8011296:	461a      	mov	r2, r3
 8011298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801129a:	7b9b      	ldrb	r3, [r3, #14]
 801129c:	3303      	adds	r3, #3
 801129e:	429a      	cmp	r2, r3
 80112a0:	d133      	bne.n	801130a <lcp_rejci+0x3ba>
 80112a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112a4:	7b9b      	ldrb	r3, [r3, #14]
 80112a6:	3303      	adds	r3, #3
 80112a8:	687a      	ldr	r2, [r7, #4]
 80112aa:	1ad3      	subs	r3, r2, r3
 80112ac:	607b      	str	r3, [r7, #4]
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	3302      	adds	r3, #2
 80112b2:	60bb      	str	r3, [r7, #8]
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	1c5a      	adds	r2, r3, #1
 80112b8:	60ba      	str	r2, [r7, #8]
 80112ba:	781b      	ldrb	r3, [r3, #0]
 80112bc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80112c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112c2:	7b5b      	ldrb	r3, [r3, #13]
 80112c4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80112c8:	429a      	cmp	r2, r3
 80112ca:	d13b      	bne.n	8011344 <lcp_rejci+0x3f4>
 80112cc:	2300      	movs	r3, #0
 80112ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80112d0:	e011      	b.n	80112f6 <lcp_rejci+0x3a6>
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	1c5a      	adds	r2, r3, #1
 80112d6:	60ba      	str	r2, [r7, #8]
 80112d8:	781b      	ldrb	r3, [r3, #0]
 80112da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80112de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80112e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112e2:	4413      	add	r3, r2
 80112e4:	330f      	adds	r3, #15
 80112e6:	781b      	ldrb	r3, [r3, #0]
 80112e8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80112ec:	429a      	cmp	r2, r3
 80112ee:	d12b      	bne.n	8011348 <lcp_rejci+0x3f8>
 80112f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112f2:	3301      	adds	r3, #1
 80112f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80112f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112f8:	7b9b      	ldrb	r3, [r3, #14]
 80112fa:	461a      	mov	r2, r3
 80112fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112fe:	429a      	cmp	r2, r3
 8011300:	dce7      	bgt.n	80112d2 <lcp_rejci+0x382>
 8011302:	7d7b      	ldrb	r3, [r7, #21]
 8011304:	f36f 0382 	bfc	r3, #2, #1
 8011308:	757b      	strb	r3, [r7, #21]
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d11d      	bne.n	801134c <lcp_rejci+0x3fc>
	goto bad;
    /*
     * Now we can update state.
     */
    if (f->state != PPP_FSM_OPENED)
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	7c1b      	ldrb	r3, [r3, #16]
 8011314:	2b09      	cmp	r3, #9
 8011316:	d009      	beq.n	801132c <lcp_rejci+0x3dc>
	*go = try_;
 8011318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801131a:	461d      	mov	r5, r3
 801131c:	f107 0414 	add.w	r4, r7, #20
 8011320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011326:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011328:	6823      	ldr	r3, [r4, #0]
 801132a:	602b      	str	r3, [r5, #0]
    return 1;
 801132c:	2301      	movs	r3, #1
 801132e:	e00f      	b.n	8011350 <lcp_rejci+0x400>
    REJCISHORT(CI_MRU, neg_mru, go->mru);
 8011330:	bf00      	nop
 8011332:	e00c      	b.n	801134e <lcp_rejci+0x3fe>
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 8011334:	bf00      	nop
 8011336:	e00a      	b.n	801134e <lcp_rejci+0x3fe>
	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
 8011338:	bf00      	nop
 801133a:	e008      	b.n	801134e <lcp_rejci+0x3fe>
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 801133c:	bf00      	nop
 801133e:	e006      	b.n	801134e <lcp_rejci+0x3fe>
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 8011340:	bf00      	nop
 8011342:	e004      	b.n	801134e <lcp_rejci+0x3fe>
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 8011344:	bf00      	nop
 8011346:	e002      	b.n	801134e <lcp_rejci+0x3fe>
 8011348:	bf00      	nop
 801134a:	e000      	b.n	801134e <lcp_rejci+0x3fe>
	goto bad;
 801134c:	bf00      	nop

bad:
    LCPDEBUG(("lcp_rejci: received bad Reject!"));
    return 0;
 801134e:	2300      	movs	r3, #0
}
 8011350:	4618      	mov	r0, r3
 8011352:	3754      	adds	r7, #84	; 0x54
 8011354:	46bd      	mov	sp, r7
 8011356:	bcb0      	pop	{r4, r5, r7}
 8011358:	4770      	bx	lr
	...

0801135c <lcp_reqci>:
 * CONFNAK; returns CONFREJ if it can't return CONFACK.
 *
 * inp = Requested CIs
 * lenp = Length of requested CIs
 */
static int lcp_reqci(fsm *f, u_char *inp, int *lenp, int reject_if_disagree) {
 801135c:	b580      	push	{r7, lr}
 801135e:	b096      	sub	sp, #88	; 0x58
 8011360:	af00      	add	r7, sp, #0
 8011362:	60f8      	str	r0, [r7, #12]
 8011364:	60b9      	str	r1, [r7, #8]
 8011366:	607a      	str	r2, [r7, #4]
 8011368:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	637b      	str	r3, [r7, #52]	; 0x34
    lcp_options *go = &pcb->lcp_gotoptions;
 8011370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011372:	3384      	adds	r3, #132	; 0x84
 8011374:	633b      	str	r3, [r7, #48]	; 0x30
    lcp_options *ho = &pcb->lcp_hisoptions;
 8011376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011378:	33cc      	adds	r3, #204	; 0xcc
 801137a:	62fb      	str	r3, [r7, #44]	; 0x2c
    lcp_options *ao = &pcb->lcp_allowoptions;
 801137c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801137e:	33a8      	adds	r3, #168	; 0xa8
 8011380:	62bb      	str	r3, [r7, #40]	; 0x28
    u_char *cip, *next;		/* Pointer to current and next CIs */
    int cilen, citype, cichar;	/* Parsed len, type, char value */
    u_short cishort;		/* Parsed short value */
    u32_t cilong;		/* Parse long value */
    int rc = CONFACK;		/* Final packet return code */
 8011382:	2302      	movs	r3, #2
 8011384:	64bb      	str	r3, [r7, #72]	; 0x48
    int orc;			/* Individual option return code */
    u_char *p;			/* Pointer to next char to parse */
    u_char *rejp;		/* Pointer to next char in reject frame */
    struct pbuf *nakp;          /* Nak buffer */
    u_char *nakoutp;		/* Pointer to next char in Nak frame */
    int l = *lenp;		/* Length left */
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	63bb      	str	r3, [r7, #56]	; 0x38

    /*
     * Reset all his options.
     */
    BZERO(ho, sizeof(*ho));
 801138c:	2224      	movs	r2, #36	; 0x24
 801138e:	2100      	movs	r1, #0
 8011390:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011392:	f002 fd90 	bl	8013eb6 <memset>

    /*
     * Process all his options.
     */
    next = inp;
 8011396:	68bb      	ldr	r3, [r7, #8]
 8011398:	657b      	str	r3, [r7, #84]	; 0x54
    nakp = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_CTRL_PBUF_UNKNOWN_SIZE), PBUF_RAM);
 801139a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801139e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80113a2:	2000      	movs	r0, #0
 80113a4:	f7f4 fbe0 	bl	8005b68 <pbuf_alloc>
 80113a8:	6278      	str	r0, [r7, #36]	; 0x24
    if(NULL == nakp)
 80113aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d101      	bne.n	80113b4 <lcp_reqci+0x58>
        return 0;
 80113b0:	2300      	movs	r3, #0
 80113b2:	e2b4      	b.n	801191e <lcp_reqci+0x5c2>
    if(nakp->tot_len != nakp->len) {
 80113b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b6:	891a      	ldrh	r2, [r3, #8]
 80113b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ba:	895b      	ldrh	r3, [r3, #10]
 80113bc:	429a      	cmp	r2, r3
 80113be:	d004      	beq.n	80113ca <lcp_reqci+0x6e>
        pbuf_free(nakp);
 80113c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113c2:	f7f4 fe3b 	bl	800603c <pbuf_free>
        return 0;
 80113c6:	2300      	movs	r3, #0
 80113c8:	e2a9      	b.n	801191e <lcp_reqci+0x5c2>
    }

    nakoutp = (u_char*)nakp->payload;
 80113ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    rejp = inp;
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 80113d4:	e278      	b.n	80118c8 <lcp_reqci+0x56c>
	orc = CONFACK;			/* Assume success */
 80113d6:	2302      	movs	r3, #2
 80113d8:	647b      	str	r3, [r7, #68]	; 0x44
	cip = p = next;			/* Remember beginning of CI */
 80113da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113dc:	623b      	str	r3, [r7, #32]
 80113de:	6a3b      	ldr	r3, [r7, #32]
 80113e0:	61fb      	str	r3, [r7, #28]
	if (l < 2 ||			/* Not enough data for CI header or */
 80113e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e4:	2b01      	cmp	r3, #1
 80113e6:	dd0b      	ble.n	8011400 <lcp_reqci+0xa4>
	    p[1] < 2 ||			/*  CI length too small or */
 80113e8:	6a3b      	ldr	r3, [r7, #32]
 80113ea:	3301      	adds	r3, #1
 80113ec:	781b      	ldrb	r3, [r3, #0]
	if (l < 2 ||			/* Not enough data for CI header or */
 80113ee:	2b01      	cmp	r3, #1
 80113f0:	d906      	bls.n	8011400 <lcp_reqci+0xa4>
	    p[1] > l) {			/*  CI length too big? */
 80113f2:	6a3b      	ldr	r3, [r7, #32]
 80113f4:	3301      	adds	r3, #1
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	461a      	mov	r2, r3
	    p[1] < 2 ||			/*  CI length too small or */
 80113fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113fc:	429a      	cmp	r2, r3
 80113fe:	dd08      	ble.n	8011412 <lcp_reqci+0xb6>
	    LCPDEBUG(("lcp_reqci: bad CI length!"));
	    orc = CONFREJ;		/* Reject bad CI */
 8011400:	2304      	movs	r3, #4
 8011402:	647b      	str	r3, [r7, #68]	; 0x44
	    cilen = l;			/* Reject till end of packet */
 8011404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011406:	653b      	str	r3, [r7, #80]	; 0x50
	    l = 0;			/* Don't loop again */
 8011408:	2300      	movs	r3, #0
 801140a:	63bb      	str	r3, [r7, #56]	; 0x38
	    citype = 0;
 801140c:	2300      	movs	r3, #0
 801140e:	64fb      	str	r3, [r7, #76]	; 0x4c
	    goto endswitch;
 8011410:	e22e      	b.n	8011870 <lcp_reqci+0x514>
	}
	GETCHAR(citype, p);		/* Parse CI type */
 8011412:	6a3b      	ldr	r3, [r7, #32]
 8011414:	1c5a      	adds	r2, r3, #1
 8011416:	623a      	str	r2, [r7, #32]
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GETCHAR(cilen, p);		/* Parse CI length */
 801141c:	6a3b      	ldr	r3, [r7, #32]
 801141e:	1c5a      	adds	r2, r3, #1
 8011420:	623a      	str	r2, [r7, #32]
 8011422:	781b      	ldrb	r3, [r3, #0]
 8011424:	653b      	str	r3, [r7, #80]	; 0x50
	l -= cilen;			/* Adjust remaining length */
 8011426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801142a:	1ad3      	subs	r3, r2, r3
 801142c:	63bb      	str	r3, [r7, #56]	; 0x38
	next += cilen;			/* Step to next CI */
 801142e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011430:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011432:	4413      	add	r3, r2
 8011434:	657b      	str	r3, [r7, #84]	; 0x54

	switch (citype) {		/* Check CI type */
 8011436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011438:	3b01      	subs	r3, #1
 801143a:	2b12      	cmp	r3, #18
 801143c:	f200 8215 	bhi.w	801186a <lcp_reqci+0x50e>
 8011440:	a201      	add	r2, pc, #4	; (adr r2, 8011448 <lcp_reqci+0xec>)
 8011442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011446:	bf00      	nop
 8011448:	08011495 	.word	0x08011495
 801144c:	08011513 	.word	0x08011513
 8011450:	08011601 	.word	0x08011601
 8011454:	0801186b 	.word	0x0801186b
 8011458:	080116a7 	.word	0x080116a7
 801145c:	0801186b 	.word	0x0801186b
 8011460:	08011797 	.word	0x08011797
 8011464:	080117bd 	.word	0x080117bd
 8011468:	0801186b 	.word	0x0801186b
 801146c:	0801186b 	.word	0x0801186b
 8011470:	0801186b 	.word	0x0801186b
 8011474:	0801186b 	.word	0x0801186b
 8011478:	0801186b 	.word	0x0801186b
 801147c:	0801186b 	.word	0x0801186b
 8011480:	0801186b 	.word	0x0801186b
 8011484:	0801186b 	.word	0x0801186b
 8011488:	0801186b 	.word	0x0801186b
 801148c:	080117e3 	.word	0x080117e3
 8011490:	08011809 	.word	0x08011809
	case CI_MRU:
	    if (!ao->neg_mru ||		/* Allow option? */
 8011494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	f003 0304 	and.w	r3, r3, #4
 801149c:	b2db      	uxtb	r3, r3
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d002      	beq.n	80114a8 <lcp_reqci+0x14c>
 80114a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114a4:	2b04      	cmp	r3, #4
 80114a6:	d002      	beq.n	80114ae <lcp_reqci+0x152>
		cilen != CILEN_SHORT) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 80114a8:	2304      	movs	r3, #4
 80114aa:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 80114ac:	e1e0      	b.n	8011870 <lcp_reqci+0x514>
	    }
	    GETSHORT(cishort, p);	/* Parse MRU */
 80114ae:	6a3b      	ldr	r3, [r7, #32]
 80114b0:	1c5a      	adds	r2, r3, #1
 80114b2:	623a      	str	r2, [r7, #32]
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	b29b      	uxth	r3, r3
 80114b8:	021b      	lsls	r3, r3, #8
 80114ba:	837b      	strh	r3, [r7, #26]
 80114bc:	6a3b      	ldr	r3, [r7, #32]
 80114be:	1c5a      	adds	r2, r3, #1
 80114c0:	623a      	str	r2, [r7, #32]
 80114c2:	781b      	ldrb	r3, [r3, #0]
 80114c4:	b29a      	uxth	r2, r3
 80114c6:	8b7b      	ldrh	r3, [r7, #26]
 80114c8:	4313      	orrs	r3, r2
 80114ca:	837b      	strh	r3, [r7, #26]
	    /*
	     * He must be able to receive at least our minimum.
	     * No need to check a maximum.  If he sends a large number,
	     * we'll just ignore it.
	     */
	    if (cishort < PPP_MINMRU) {
 80114cc:	8b7b      	ldrh	r3, [r7, #26]
 80114ce:	2b7f      	cmp	r3, #127	; 0x7f
 80114d0:	d816      	bhi.n	8011500 <lcp_reqci+0x1a4>
		orc = CONFNAK;		/* Nak CI */
 80114d2:	2303      	movs	r3, #3
 80114d4:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_MRU, nakoutp);
 80114d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114d8:	1c5a      	adds	r2, r3, #1
 80114da:	63fa      	str	r2, [r7, #60]	; 0x3c
 80114dc:	2201      	movs	r2, #1
 80114de:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_SHORT, nakoutp);
 80114e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114e2:	1c5a      	adds	r2, r3, #1
 80114e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80114e6:	2204      	movs	r2, #4
 80114e8:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_MINMRU, nakoutp);	/* Give him a hint */
 80114ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114ec:	1c5a      	adds	r2, r3, #1
 80114ee:	63fa      	str	r2, [r7, #60]	; 0x3c
 80114f0:	2200      	movs	r2, #0
 80114f2:	701a      	strb	r2, [r3, #0]
 80114f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114f6:	1c5a      	adds	r2, r3, #1
 80114f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80114fa:	2280      	movs	r2, #128	; 0x80
 80114fc:	701a      	strb	r2, [r3, #0]
		break;
 80114fe:	e1b7      	b.n	8011870 <lcp_reqci+0x514>
	    }
	    ho->neg_mru = 1;		/* Remember he sent MRU */
 8011500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011502:	7813      	ldrb	r3, [r2, #0]
 8011504:	f043 0304 	orr.w	r3, r3, #4
 8011508:	7013      	strb	r3, [r2, #0]
	    ho->mru = cishort;		/* And remember value */
 801150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150c:	8b7a      	ldrh	r2, [r7, #26]
 801150e:	805a      	strh	r2, [r3, #2]
	    break;
 8011510:	e1ae      	b.n	8011870 <lcp_reqci+0x514>

	case CI_ASYNCMAP:
	    if (!ao->neg_asyncmap ||
 8011512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	f003 0308 	and.w	r3, r3, #8
 801151a:	b2db      	uxtb	r3, r3
 801151c:	2b00      	cmp	r3, #0
 801151e:	d002      	beq.n	8011526 <lcp_reqci+0x1ca>
 8011520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011522:	2b06      	cmp	r3, #6
 8011524:	d002      	beq.n	801152c <lcp_reqci+0x1d0>
		cilen != CILEN_LONG) {
		orc = CONFREJ;
 8011526:	2304      	movs	r3, #4
 8011528:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 801152a:	e1a1      	b.n	8011870 <lcp_reqci+0x514>
	    }
	    GETLONG(cilong, p);
 801152c:	6a3b      	ldr	r3, [r7, #32]
 801152e:	1c5a      	adds	r2, r3, #1
 8011530:	623a      	str	r2, [r7, #32]
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	021b      	lsls	r3, r3, #8
 8011536:	617b      	str	r3, [r7, #20]
 8011538:	6a3b      	ldr	r3, [r7, #32]
 801153a:	1c5a      	adds	r2, r3, #1
 801153c:	623a      	str	r2, [r7, #32]
 801153e:	781b      	ldrb	r3, [r3, #0]
 8011540:	461a      	mov	r2, r3
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	4313      	orrs	r3, r2
 8011546:	617b      	str	r3, [r7, #20]
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	021b      	lsls	r3, r3, #8
 801154c:	617b      	str	r3, [r7, #20]
 801154e:	6a3b      	ldr	r3, [r7, #32]
 8011550:	1c5a      	adds	r2, r3, #1
 8011552:	623a      	str	r2, [r7, #32]
 8011554:	781b      	ldrb	r3, [r3, #0]
 8011556:	461a      	mov	r2, r3
 8011558:	697b      	ldr	r3, [r7, #20]
 801155a:	4313      	orrs	r3, r2
 801155c:	617b      	str	r3, [r7, #20]
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	021b      	lsls	r3, r3, #8
 8011562:	617b      	str	r3, [r7, #20]
 8011564:	6a3b      	ldr	r3, [r7, #32]
 8011566:	1c5a      	adds	r2, r3, #1
 8011568:	623a      	str	r2, [r7, #32]
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	461a      	mov	r2, r3
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	4313      	orrs	r3, r2
 8011572:	617b      	str	r3, [r7, #20]

	    /*
	     * Asyncmap must have set at least the bits
	     * which are set in lcp_allowoptions[unit].asyncmap.
	     */
	    if ((ao->asyncmap & ~cilong) != 0) {
 8011574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011576:	685a      	ldr	r2, [r3, #4]
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	43db      	mvns	r3, r3
 801157c:	4013      	ands	r3, r2
 801157e:	2b00      	cmp	r3, #0
 8011580:	d035      	beq.n	80115ee <lcp_reqci+0x292>
		orc = CONFNAK;
 8011582:	2303      	movs	r3, #3
 8011584:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_ASYNCMAP, nakoutp);
 8011586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011588:	1c5a      	adds	r2, r3, #1
 801158a:	63fa      	str	r2, [r7, #60]	; 0x3c
 801158c:	2202      	movs	r2, #2
 801158e:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 8011590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011592:	1c5a      	adds	r2, r3, #1
 8011594:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011596:	2206      	movs	r2, #6
 8011598:	701a      	strb	r2, [r3, #0]
		PUTLONG(ao->asyncmap | cilong, nakoutp);
 801159a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801159c:	1c5a      	adds	r2, r3, #1
 801159e:	63fa      	str	r2, [r7, #60]	; 0x3c
 80115a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115a2:	6851      	ldr	r1, [r2, #4]
 80115a4:	697a      	ldr	r2, [r7, #20]
 80115a6:	430a      	orrs	r2, r1
 80115a8:	0e12      	lsrs	r2, r2, #24
 80115aa:	b2d2      	uxtb	r2, r2
 80115ac:	701a      	strb	r2, [r3, #0]
 80115ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115b0:	1c5a      	adds	r2, r3, #1
 80115b2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80115b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115b6:	6851      	ldr	r1, [r2, #4]
 80115b8:	697a      	ldr	r2, [r7, #20]
 80115ba:	430a      	orrs	r2, r1
 80115bc:	0c12      	lsrs	r2, r2, #16
 80115be:	b2d2      	uxtb	r2, r2
 80115c0:	701a      	strb	r2, [r3, #0]
 80115c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115c4:	1c5a      	adds	r2, r3, #1
 80115c6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80115c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115ca:	6851      	ldr	r1, [r2, #4]
 80115cc:	697a      	ldr	r2, [r7, #20]
 80115ce:	430a      	orrs	r2, r1
 80115d0:	0a12      	lsrs	r2, r2, #8
 80115d2:	b2d2      	uxtb	r2, r2
 80115d4:	701a      	strb	r2, [r3, #0]
 80115d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115d8:	1c5a      	adds	r2, r3, #1
 80115da:	63fa      	str	r2, [r7, #60]	; 0x3c
 80115dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115de:	6852      	ldr	r2, [r2, #4]
 80115e0:	b2d1      	uxtb	r1, r2
 80115e2:	697a      	ldr	r2, [r7, #20]
 80115e4:	b2d2      	uxtb	r2, r2
 80115e6:	430a      	orrs	r2, r1
 80115e8:	b2d2      	uxtb	r2, r2
 80115ea:	701a      	strb	r2, [r3, #0]
		break;
 80115ec:	e140      	b.n	8011870 <lcp_reqci+0x514>
	    }
	    ho->neg_asyncmap = 1;
 80115ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115f0:	7813      	ldrb	r3, [r2, #0]
 80115f2:	f043 0308 	orr.w	r3, r3, #8
 80115f6:	7013      	strb	r3, [r2, #0]
	    ho->asyncmap = cilong;
 80115f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115fa:	697a      	ldr	r2, [r7, #20]
 80115fc:	605a      	str	r2, [r3, #4]
	    break;
 80115fe:	e137      	b.n	8011870 <lcp_reqci+0x514>

	case CI_AUTHTYPE:
	    if (cilen < CILEN_SHORT ||
 8011600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011602:	2b03      	cmp	r3, #3
 8011604:	dd06      	ble.n	8011614 <lcp_reqci+0x2b8>
		!(0
#if PAP_SUPPORT
		|| ao->neg_upap
 8011606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011608:	781b      	ldrb	r3, [r3, #0]
		!(0
 801160a:	f003 0310 	and.w	r3, r3, #16
 801160e:	b2db      	uxtb	r3, r3
	    if (cilen < CILEN_SHORT ||
 8011610:	2b00      	cmp	r3, #0
 8011612:	d102      	bne.n	801161a <lcp_reqci+0x2be>
		)) {
		/*
		 * Reject the option if we're not willing to authenticate.
		 */
		ppp_dbglog(("No auth is possible"));
		orc = CONFREJ;
 8011614:	2304      	movs	r3, #4
 8011616:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8011618:	e12a      	b.n	8011870 <lcp_reqci+0x514>
	    }
	    GETSHORT(cishort, p);
 801161a:	6a3b      	ldr	r3, [r7, #32]
 801161c:	1c5a      	adds	r2, r3, #1
 801161e:	623a      	str	r2, [r7, #32]
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	b29b      	uxth	r3, r3
 8011624:	021b      	lsls	r3, r3, #8
 8011626:	837b      	strh	r3, [r7, #26]
 8011628:	6a3b      	ldr	r3, [r7, #32]
 801162a:	1c5a      	adds	r2, r3, #1
 801162c:	623a      	str	r2, [r7, #32]
 801162e:	781b      	ldrb	r3, [r3, #0]
 8011630:	b29a      	uxth	r2, r3
 8011632:	8b7b      	ldrh	r3, [r7, #26]
 8011634:	4313      	orrs	r3, r2
 8011636:	837b      	strh	r3, [r7, #26]
	     * Whether we end up doing CHAP, UPAP, or EAP depends then on
	     * the ordering of the CIs in the peer's Configure-Request.
             */

#if PAP_SUPPORT
	    if (cishort == PPP_PAP) {
 8011638:	8b7b      	ldrh	r3, [r7, #26]
 801163a:	f24c 0223 	movw	r2, #49187	; 0xc023
 801163e:	4293      	cmp	r3, r2
 8011640:	d11a      	bne.n	8011678 <lcp_reqci+0x31c>
		/* we've already accepted CHAP or EAP */
		if (0
 8011642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011644:	2b04      	cmp	r3, #4
 8011646:	d002      	beq.n	801164e <lcp_reqci+0x2f2>
#if EAP_SUPPORT
		    || ho->neg_eap
#endif /* EAP_SUPPORT */
		    || cilen != CILEN_SHORT) {
		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE PAP, rejecting..."));
		    orc = CONFREJ;
 8011648:	2304      	movs	r3, #4
 801164a:	647b      	str	r3, [r7, #68]	; 0x44
		    break;
 801164c:	e110      	b.n	8011870 <lcp_reqci+0x514>
		}
		if (!ao->neg_upap) {	/* we don't want to do PAP */
 801164e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	f003 0310 	and.w	r3, r3, #16
 8011656:	b2db      	uxtb	r3, r3
 8011658:	2b00      	cmp	r3, #0
 801165a:	d107      	bne.n	801166c <lcp_reqci+0x310>
		    orc = CONFNAK;	/* NAK it and suggest CHAP or EAP */
 801165c:	2303      	movs	r3, #3
 801165e:	647b      	str	r3, [r7, #68]	; 0x44
		    PUTCHAR(CI_AUTHTYPE, nakoutp);
 8011660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011662:	1c5a      	adds	r2, r3, #1
 8011664:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011666:	2203      	movs	r2, #3
 8011668:	701a      	strb	r2, [r3, #0]
			PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
#endif /* CHAP_SUPPORT */
#if EAP_SUPPORT
		    }
#endif /* EAP_SUPPORT */
		    break;
 801166a:	e101      	b.n	8011870 <lcp_reqci+0x514>
		}
		ho->neg_upap = 1;
 801166c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801166e:	7813      	ldrb	r3, [r2, #0]
 8011670:	f043 0310 	orr.w	r3, r3, #16
 8011674:	7013      	strb	r3, [r2, #0]
		break;
 8011676:	e0fb      	b.n	8011870 <lcp_reqci+0x514>
	     * We don't recognize the protocol they're asking for.
	     * Nak it with something we're willing to do.
	     * (At this point we know ao->neg_upap || ao->neg_chap ||
	     * ao->neg_eap.)
	     */
	    orc = CONFNAK;
 8011678:	2303      	movs	r3, #3
 801167a:	647b      	str	r3, [r7, #68]	; 0x44
	    PUTCHAR(CI_AUTHTYPE, nakoutp);
 801167c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801167e:	1c5a      	adds	r2, r3, #1
 8011680:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011682:	2203      	movs	r2, #3
 8011684:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
	    } else
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	    if(1) {
		PUTCHAR(CILEN_SHORT, nakoutp);
 8011686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011688:	1c5a      	adds	r2, r3, #1
 801168a:	63fa      	str	r2, [r7, #60]	; 0x3c
 801168c:	2204      	movs	r2, #4
 801168e:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_PAP, nakoutp);
 8011690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011692:	1c5a      	adds	r2, r3, #1
 8011694:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011696:	22c0      	movs	r2, #192	; 0xc0
 8011698:	701a      	strb	r2, [r3, #0]
 801169a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801169c:	1c5a      	adds	r2, r3, #1
 801169e:	63fa      	str	r2, [r7, #60]	; 0x3c
 80116a0:	2223      	movs	r2, #35	; 0x23
 80116a2:	701a      	strb	r2, [r3, #0]
	    } else
#endif /* PAP_SUPPORT */
	    {}
	    break;
 80116a4:	e0e4      	b.n	8011870 <lcp_reqci+0x514>
	    }
	    break;
#endif /* LQR_SUPPORT */

	case CI_MAGICNUMBER:
	    if (!(ao->neg_magicnumber || go->neg_magicnumber) ||
 80116a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116a8:	781b      	ldrb	r3, [r3, #0]
 80116aa:	f003 0320 	and.w	r3, r3, #32
 80116ae:	b2db      	uxtb	r3, r3
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d106      	bne.n	80116c2 <lcp_reqci+0x366>
 80116b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116b6:	781b      	ldrb	r3, [r3, #0]
 80116b8:	f003 0320 	and.w	r3, r3, #32
 80116bc:	b2db      	uxtb	r3, r3
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d002      	beq.n	80116c8 <lcp_reqci+0x36c>
 80116c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116c4:	2b06      	cmp	r3, #6
 80116c6:	d002      	beq.n	80116ce <lcp_reqci+0x372>
		cilen != CILEN_LONG) {
		orc = CONFREJ;
 80116c8:	2304      	movs	r3, #4
 80116ca:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 80116cc:	e0d0      	b.n	8011870 <lcp_reqci+0x514>
	    }
	    GETLONG(cilong, p);
 80116ce:	6a3b      	ldr	r3, [r7, #32]
 80116d0:	1c5a      	adds	r2, r3, #1
 80116d2:	623a      	str	r2, [r7, #32]
 80116d4:	781b      	ldrb	r3, [r3, #0]
 80116d6:	021b      	lsls	r3, r3, #8
 80116d8:	617b      	str	r3, [r7, #20]
 80116da:	6a3b      	ldr	r3, [r7, #32]
 80116dc:	1c5a      	adds	r2, r3, #1
 80116de:	623a      	str	r2, [r7, #32]
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	461a      	mov	r2, r3
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	4313      	orrs	r3, r2
 80116e8:	617b      	str	r3, [r7, #20]
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	021b      	lsls	r3, r3, #8
 80116ee:	617b      	str	r3, [r7, #20]
 80116f0:	6a3b      	ldr	r3, [r7, #32]
 80116f2:	1c5a      	adds	r2, r3, #1
 80116f4:	623a      	str	r2, [r7, #32]
 80116f6:	781b      	ldrb	r3, [r3, #0]
 80116f8:	461a      	mov	r2, r3
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	4313      	orrs	r3, r2
 80116fe:	617b      	str	r3, [r7, #20]
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	021b      	lsls	r3, r3, #8
 8011704:	617b      	str	r3, [r7, #20]
 8011706:	6a3b      	ldr	r3, [r7, #32]
 8011708:	1c5a      	adds	r2, r3, #1
 801170a:	623a      	str	r2, [r7, #32]
 801170c:	781b      	ldrb	r3, [r3, #0]
 801170e:	461a      	mov	r2, r3
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	4313      	orrs	r3, r2
 8011714:	617b      	str	r3, [r7, #20]

	    /*
	     * He must have a different magic number.
	     */
	    if (go->neg_magicnumber &&
 8011716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011718:	781b      	ldrb	r3, [r3, #0]
 801171a:	f003 0320 	and.w	r3, r3, #32
 801171e:	b2db      	uxtb	r3, r3
 8011720:	2b00      	cmp	r3, #0
 8011722:	d02f      	beq.n	8011784 <lcp_reqci+0x428>
		cilong == go->magicnumber) {
 8011724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011726:	689a      	ldr	r2, [r3, #8]
	    if (go->neg_magicnumber &&
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	429a      	cmp	r2, r3
 801172c:	d12a      	bne.n	8011784 <lcp_reqci+0x428>
		cilong = magic();	/* Don't put magic() inside macro! */
 801172e:	f000 fb7f 	bl	8011e30 <magic>
 8011732:	6178      	str	r0, [r7, #20]
		orc = CONFNAK;
 8011734:	2303      	movs	r3, #3
 8011736:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_MAGICNUMBER, nakoutp);
 8011738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801173a:	1c5a      	adds	r2, r3, #1
 801173c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801173e:	2205      	movs	r2, #5
 8011740:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 8011742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011744:	1c5a      	adds	r2, r3, #1
 8011746:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011748:	2206      	movs	r2, #6
 801174a:	701a      	strb	r2, [r3, #0]
		PUTLONG(cilong, nakoutp);
 801174c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801174e:	1c5a      	adds	r2, r3, #1
 8011750:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011752:	697a      	ldr	r2, [r7, #20]
 8011754:	0e12      	lsrs	r2, r2, #24
 8011756:	b2d2      	uxtb	r2, r2
 8011758:	701a      	strb	r2, [r3, #0]
 801175a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801175c:	1c5a      	adds	r2, r3, #1
 801175e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011760:	697a      	ldr	r2, [r7, #20]
 8011762:	0c12      	lsrs	r2, r2, #16
 8011764:	b2d2      	uxtb	r2, r2
 8011766:	701a      	strb	r2, [r3, #0]
 8011768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801176a:	1c5a      	adds	r2, r3, #1
 801176c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801176e:	697a      	ldr	r2, [r7, #20]
 8011770:	0a12      	lsrs	r2, r2, #8
 8011772:	b2d2      	uxtb	r2, r2
 8011774:	701a      	strb	r2, [r3, #0]
 8011776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011778:	1c5a      	adds	r2, r3, #1
 801177a:	63fa      	str	r2, [r7, #60]	; 0x3c
 801177c:	697a      	ldr	r2, [r7, #20]
 801177e:	b2d2      	uxtb	r2, r2
 8011780:	701a      	strb	r2, [r3, #0]
		break;
 8011782:	e075      	b.n	8011870 <lcp_reqci+0x514>
	    }
	    ho->neg_magicnumber = 1;
 8011784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011786:	7813      	ldrb	r3, [r2, #0]
 8011788:	f043 0320 	orr.w	r3, r3, #32
 801178c:	7013      	strb	r3, [r2, #0]
	    ho->magicnumber = cilong;
 801178e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011790:	697a      	ldr	r2, [r7, #20]
 8011792:	609a      	str	r2, [r3, #8]
	    break;
 8011794:	e06c      	b.n	8011870 <lcp_reqci+0x514>


	case CI_PCOMPRESSION:
	    if (!ao->neg_pcompression ||
 8011796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011798:	781b      	ldrb	r3, [r3, #0]
 801179a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801179e:	b2db      	uxtb	r3, r3
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d002      	beq.n	80117aa <lcp_reqci+0x44e>
 80117a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117a6:	2b02      	cmp	r3, #2
 80117a8:	d002      	beq.n	80117b0 <lcp_reqci+0x454>
		cilen != CILEN_VOID) {
		orc = CONFREJ;
 80117aa:	2304      	movs	r3, #4
 80117ac:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 80117ae:	e05f      	b.n	8011870 <lcp_reqci+0x514>
	    }
	    ho->neg_pcompression = 1;
 80117b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117b2:	7813      	ldrb	r3, [r2, #0]
 80117b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117b8:	7013      	strb	r3, [r2, #0]
	    break;
 80117ba:	e059      	b.n	8011870 <lcp_reqci+0x514>

	case CI_ACCOMPRESSION:
	    if (!ao->neg_accompression ||
 80117bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d002      	beq.n	80117d0 <lcp_reqci+0x474>
 80117ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117cc:	2b02      	cmp	r3, #2
 80117ce:	d002      	beq.n	80117d6 <lcp_reqci+0x47a>
		cilen != CILEN_VOID) {
		orc = CONFREJ;
 80117d0:	2304      	movs	r3, #4
 80117d2:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 80117d4:	e04c      	b.n	8011870 <lcp_reqci+0x514>
	    }
	    ho->neg_accompression = 1;
 80117d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117d8:	7813      	ldrb	r3, [r2, #0]
 80117da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117de:	7013      	strb	r3, [r2, #0]
	    break;
 80117e0:	e046      	b.n	8011870 <lcp_reqci+0x514>
	    ho->mrru = cishort;
	    break;
#endif /* HAVE_MULTILINK */

	case CI_SSNHF:
	    if (!ao->neg_ssnhf
 80117e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e4:	785b      	ldrb	r3, [r3, #1]
 80117e6:	f003 0302 	and.w	r3, r3, #2
 80117ea:	b2db      	uxtb	r3, r3
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d002      	beq.n	80117f6 <lcp_reqci+0x49a>
#ifdef HAVE_MULTILINK
		|| !multilink
#endif /* HAVE_MULTILINK */
		|| cilen != CILEN_VOID) {
 80117f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117f2:	2b02      	cmp	r3, #2
 80117f4:	d002      	beq.n	80117fc <lcp_reqci+0x4a0>
		orc = CONFREJ;
 80117f6:	2304      	movs	r3, #4
 80117f8:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 80117fa:	e039      	b.n	8011870 <lcp_reqci+0x514>
	    }
	    ho->neg_ssnhf = 1;
 80117fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117fe:	7853      	ldrb	r3, [r2, #1]
 8011800:	f043 0302 	orr.w	r3, r3, #2
 8011804:	7053      	strb	r3, [r2, #1]
	    break;
 8011806:	e033      	b.n	8011870 <lcp_reqci+0x514>

	case CI_EPDISC:
	    if (!ao->neg_endpoint ||
 8011808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801180a:	785b      	ldrb	r3, [r3, #1]
 801180c:	f003 0304 	and.w	r3, r3, #4
 8011810:	b2db      	uxtb	r3, r3
 8011812:	2b00      	cmp	r3, #0
 8011814:	d005      	beq.n	8011822 <lcp_reqci+0x4c6>
 8011816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011818:	2b02      	cmp	r3, #2
 801181a:	dd02      	ble.n	8011822 <lcp_reqci+0x4c6>
		cilen < CILEN_CHAR ||
 801181c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801181e:	2b17      	cmp	r3, #23
 8011820:	dd02      	ble.n	8011828 <lcp_reqci+0x4cc>
		cilen > CILEN_CHAR + MAX_ENDP_LEN) {
		orc = CONFREJ;
 8011822:	2304      	movs	r3, #4
 8011824:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8011826:	e023      	b.n	8011870 <lcp_reqci+0x514>
	    }
	    GETCHAR(cichar, p);
 8011828:	6a3b      	ldr	r3, [r7, #32]
 801182a:	1c5a      	adds	r2, r3, #1
 801182c:	623a      	str	r2, [r7, #32]
 801182e:	781b      	ldrb	r3, [r3, #0]
 8011830:	613b      	str	r3, [r7, #16]
	    cilen -= CILEN_CHAR;
 8011832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011834:	3b03      	subs	r3, #3
 8011836:	653b      	str	r3, [r7, #80]	; 0x50
	    ho->neg_endpoint = 1;
 8011838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801183a:	7853      	ldrb	r3, [r2, #1]
 801183c:	f043 0304 	orr.w	r3, r3, #4
 8011840:	7053      	strb	r3, [r2, #1]
	    ho->endpoint.class_ = cichar;
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	b2da      	uxtb	r2, r3
 8011846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011848:	735a      	strb	r2, [r3, #13]
	    ho->endpoint.length = cilen;
 801184a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801184c:	b2da      	uxtb	r2, r3
 801184e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011850:	739a      	strb	r2, [r3, #14]
	    MEMCPY(ho->endpoint.value, p, cilen);
 8011852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011854:	330f      	adds	r3, #15
 8011856:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011858:	6a39      	ldr	r1, [r7, #32]
 801185a:	4618      	mov	r0, r3
 801185c:	f002 fb06 	bl	8013e6c <memcpy>
	    INCPTR(cilen, p);
 8011860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011862:	6a3a      	ldr	r2, [r7, #32]
 8011864:	4413      	add	r3, r2
 8011866:	623b      	str	r3, [r7, #32]
	    break;
 8011868:	e002      	b.n	8011870 <lcp_reqci+0x514>

	default:
	    LCPDEBUG(("lcp_reqci: rcvd unknown option %d", citype));
	    orc = CONFREJ;
 801186a:	2304      	movs	r3, #4
 801186c:	647b      	str	r3, [r7, #68]	; 0x44
	    break;
 801186e:	bf00      	nop
	}

endswitch:
	if (orc == CONFACK &&		/* Good CI */
 8011870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011872:	2b02      	cmp	r3, #2
 8011874:	d103      	bne.n	801187e <lcp_reqci+0x522>
 8011876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011878:	2b02      	cmp	r3, #2
 801187a:	d000      	beq.n	801187e <lcp_reqci+0x522>
	    rc != CONFACK)		/*  but prior CI wasn't? */
	    continue;			/* Don't send this one */
 801187c:	e024      	b.n	80118c8 <lcp_reqci+0x56c>

	if (orc == CONFNAK) {		/* Nak this CI? */
 801187e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011880:	2b03      	cmp	r3, #3
 8011882:	d10e      	bne.n	80118a2 <lcp_reqci+0x546>
	    if (reject_if_disagree	/* Getting fed up with sending NAKs? */
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d005      	beq.n	8011896 <lcp_reqci+0x53a>
		&& citype != CI_MAGICNUMBER) {
 801188a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801188c:	2b05      	cmp	r3, #5
 801188e:	d002      	beq.n	8011896 <lcp_reqci+0x53a>
		orc = CONFREJ;		/* Get tough if so */
 8011890:	2304      	movs	r3, #4
 8011892:	647b      	str	r3, [r7, #68]	; 0x44
 8011894:	e005      	b.n	80118a2 <lcp_reqci+0x546>
	    } else {
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 8011896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011898:	2b04      	cmp	r3, #4
 801189a:	d100      	bne.n	801189e <lcp_reqci+0x542>
		    continue;		/* Don't send this one */
 801189c:	e014      	b.n	80118c8 <lcp_reqci+0x56c>
		rc = CONFNAK;
 801189e:	2303      	movs	r3, #3
 80118a0:	64bb      	str	r3, [r7, #72]	; 0x48
	    }
	}
	if (orc == CONFREJ) {		/* Reject this CI */
 80118a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118a4:	2b04      	cmp	r3, #4
 80118a6:	d10f      	bne.n	80118c8 <lcp_reqci+0x56c>
	    rc = CONFREJ;
 80118a8:	2304      	movs	r3, #4
 80118aa:	64bb      	str	r3, [r7, #72]	; 0x48
	    if (cip != rejp)		/* Need to move rejected CI? */
 80118ac:	69fa      	ldr	r2, [r7, #28]
 80118ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d005      	beq.n	80118c0 <lcp_reqci+0x564>
		MEMCPY(rejp, cip, cilen); /* Move it */
 80118b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118b6:	461a      	mov	r2, r3
 80118b8:	69f9      	ldr	r1, [r7, #28]
 80118ba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80118bc:	f002 fad6 	bl	8013e6c <memcpy>
	    INCPTR(cilen, rejp);	/* Update output pointer */
 80118c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80118c4:	4413      	add	r3, r2
 80118c6:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 80118c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	f47f ad83 	bne.w	80113d6 <lcp_reqci+0x7a>
     * code would go here.  The extra NAKs would go at *nakoutp.
     * At present there are no cases where we want to ask the
     * peer to negotiate an option.
     */

    switch (rc) {
 80118d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118d2:	2b03      	cmp	r3, #3
 80118d4:	d00a      	beq.n	80118ec <lcp_reqci+0x590>
 80118d6:	2b04      	cmp	r3, #4
 80118d8:	d017      	beq.n	801190a <lcp_reqci+0x5ae>
 80118da:	2b02      	cmp	r3, #2
 80118dc:	d000      	beq.n	80118e0 <lcp_reqci+0x584>
	break;
    case CONFREJ:
	*lenp = rejp - inp;
	break;
    default:
	break;
 80118de:	e01a      	b.n	8011916 <lcp_reqci+0x5ba>
	*lenp = next - inp;
 80118e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	1ad2      	subs	r2, r2, r3
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	601a      	str	r2, [r3, #0]
	break;
 80118ea:	e014      	b.n	8011916 <lcp_reqci+0x5ba>
	*lenp = nakoutp - (u_char*)nakp->payload;
 80118ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118f0:	6852      	ldr	r2, [r2, #4]
 80118f2:	1a9a      	subs	r2, r3, r2
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	601a      	str	r2, [r3, #0]
	MEMCPY(inp, nakp->payload, *lenp);
 80118f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fa:	6859      	ldr	r1, [r3, #4]
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	461a      	mov	r2, r3
 8011902:	68b8      	ldr	r0, [r7, #8]
 8011904:	f002 fab2 	bl	8013e6c <memcpy>
	break;
 8011908:	e005      	b.n	8011916 <lcp_reqci+0x5ba>
	*lenp = rejp - inp;
 801190a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801190c:	68bb      	ldr	r3, [r7, #8]
 801190e:	1ad2      	subs	r2, r2, r3
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	601a      	str	r2, [r3, #0]
	break;
 8011914:	bf00      	nop
    }

    pbuf_free(nakp);
 8011916:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011918:	f7f4 fb90 	bl	800603c <pbuf_free>
    LCPDEBUG(("lcp_reqci: returning CONF%s.", CODENAME(rc)));
    return (rc);			/* Return final code */
 801191c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801191e:	4618      	mov	r0, r3
 8011920:	3758      	adds	r7, #88	; 0x58
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop

08011928 <lcp_up>:


/*
 * lcp_up - LCP has come UP.
 */
static void lcp_up(fsm *f) {
 8011928:	b580      	push	{r7, lr}
 801192a:	b08c      	sub	sp, #48	; 0x30
 801192c:	af02      	add	r7, sp, #8
 801192e:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	627b      	str	r3, [r7, #36]	; 0x24
    lcp_options *wo = &pcb->lcp_wantoptions;
 8011936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011938:	3360      	adds	r3, #96	; 0x60
 801193a:	623b      	str	r3, [r7, #32]
    lcp_options *ho = &pcb->lcp_hisoptions;
 801193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801193e:	33cc      	adds	r3, #204	; 0xcc
 8011940:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 8011942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011944:	3384      	adds	r3, #132	; 0x84
 8011946:	61bb      	str	r3, [r7, #24]
    lcp_options *ao = &pcb->lcp_allowoptions;
 8011948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801194a:	33a8      	adds	r3, #168	; 0xa8
 801194c:	617b      	str	r3, [r7, #20]
    int mtu, mru;

    if (!go->neg_magicnumber)
 801194e:	69bb      	ldr	r3, [r7, #24]
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	f003 0320 	and.w	r3, r3, #32
 8011956:	b2db      	uxtb	r3, r3
 8011958:	2b00      	cmp	r3, #0
 801195a:	d102      	bne.n	8011962 <lcp_up+0x3a>
	go->magicnumber = 0;
 801195c:	69bb      	ldr	r3, [r7, #24]
 801195e:	2200      	movs	r2, #0
 8011960:	609a      	str	r2, [r3, #8]
    if (!ho->neg_magicnumber)
 8011962:	69fb      	ldr	r3, [r7, #28]
 8011964:	781b      	ldrb	r3, [r3, #0]
 8011966:	f003 0320 	and.w	r3, r3, #32
 801196a:	b2db      	uxtb	r3, r3
 801196c:	2b00      	cmp	r3, #0
 801196e:	d102      	bne.n	8011976 <lcp_up+0x4e>
	ho->magicnumber = 0;
 8011970:	69fb      	ldr	r3, [r7, #28]
 8011972:	2200      	movs	r2, #0
 8011974:	609a      	str	r2, [r3, #8]
     * the value we got in the negotiation.
     * Note on the MTU: the link MTU can be the MRU the peer wanted,
     * the interface MTU is set to the lowest of that, the
     * MTU we want to use, and our link MRU.
     */
    mtu = ho->neg_mru? ho->mru: PPP_DEFMRU;
 8011976:	69fb      	ldr	r3, [r7, #28]
 8011978:	781b      	ldrb	r3, [r3, #0]
 801197a:	f003 0304 	and.w	r3, r3, #4
 801197e:	b2db      	uxtb	r3, r3
 8011980:	2b00      	cmp	r3, #0
 8011982:	d002      	beq.n	801198a <lcp_up+0x62>
 8011984:	69fb      	ldr	r3, [r7, #28]
 8011986:	885b      	ldrh	r3, [r3, #2]
 8011988:	e001      	b.n	801198e <lcp_up+0x66>
 801198a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 801198e:	613b      	str	r3, [r7, #16]
    mru = go->neg_mru? LWIP_MAX(wo->mru, go->mru): PPP_DEFMRU;
 8011990:	69bb      	ldr	r3, [r7, #24]
 8011992:	781b      	ldrb	r3, [r3, #0]
 8011994:	f003 0304 	and.w	r3, r3, #4
 8011998:	b2db      	uxtb	r3, r3
 801199a:	2b00      	cmp	r3, #0
 801199c:	d00b      	beq.n	80119b6 <lcp_up+0x8e>
 801199e:	6a3b      	ldr	r3, [r7, #32]
 80119a0:	885a      	ldrh	r2, [r3, #2]
 80119a2:	69bb      	ldr	r3, [r7, #24]
 80119a4:	885b      	ldrh	r3, [r3, #2]
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d902      	bls.n	80119b0 <lcp_up+0x88>
 80119aa:	6a3b      	ldr	r3, [r7, #32]
 80119ac:	885b      	ldrh	r3, [r3, #2]
 80119ae:	e004      	b.n	80119ba <lcp_up+0x92>
 80119b0:	69bb      	ldr	r3, [r7, #24]
 80119b2:	885b      	ldrh	r3, [r3, #2]
 80119b4:	e001      	b.n	80119ba <lcp_up+0x92>
 80119b6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80119ba:	60fb      	str	r3, [r7, #12]
#ifdef HAVE_MULTILINK
    if (!(multilink && go->neg_mrru && ho->neg_mrru))
#endif /* HAVE_MULTILINK */
	ppp_netif_set_mtu(pcb, LWIP_MIN(LWIP_MIN(mtu, mru), ao->mru));
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	885b      	ldrh	r3, [r3, #2]
 80119c0:	4619      	mov	r1, r3
 80119c2:	68fa      	ldr	r2, [r7, #12]
 80119c4:	693b      	ldr	r3, [r7, #16]
 80119c6:	4293      	cmp	r3, r2
 80119c8:	bfa8      	it	ge
 80119ca:	4613      	movge	r3, r2
 80119cc:	428b      	cmp	r3, r1
 80119ce:	bfa8      	it	ge
 80119d0:	460b      	movge	r3, r1
 80119d2:	4619      	mov	r1, r3
 80119d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80119d6:	f000 fd5f 	bl	8012498 <ppp_netif_set_mtu>
    ppp_send_config(pcb, mtu,
		    (ho->neg_asyncmap? ho->asyncmap: 0xffffffff),
 80119da:	69fb      	ldr	r3, [r7, #28]
 80119dc:	781b      	ldrb	r3, [r3, #0]
 80119de:	f003 0308 	and.w	r3, r3, #8
 80119e2:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d002      	beq.n	80119ee <lcp_up+0xc6>
 80119e8:	69fb      	ldr	r3, [r7, #28]
 80119ea:	685a      	ldr	r2, [r3, #4]
 80119ec:	e001      	b.n	80119f2 <lcp_up+0xca>
 80119ee:	f04f 32ff 	mov.w	r2, #4294967295
		    ho->neg_pcompression, ho->neg_accompression);
 80119f2:	69fb      	ldr	r3, [r7, #28]
 80119f4:	781b      	ldrb	r3, [r3, #0]
 80119f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80119fa:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 80119fc:	4619      	mov	r1, r3
		    ho->neg_pcompression, ho->neg_accompression);
 80119fe:	69fb      	ldr	r3, [r7, #28]
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011a06:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 8011a08:	9300      	str	r3, [sp, #0]
 8011a0a:	460b      	mov	r3, r1
 8011a0c:	6939      	ldr	r1, [r7, #16]
 8011a0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a10:	f000 fc94 	bl	801233c <ppp_send_config>
    ppp_recv_config(pcb, mru,
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8011a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a16:	781b      	ldrb	r3, [r3, #0]
 8011a18:	f003 0308 	and.w	r3, r3, #8
 8011a1c:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d10c      	bne.n	8011a3c <lcp_up+0x114>
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8011a22:	69bb      	ldr	r3, [r7, #24]
 8011a24:	781b      	ldrb	r3, [r3, #0]
 8011a26:	f003 0308 	and.w	r3, r3, #8
 8011a2a:	b2db      	uxtb	r3, r3
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d002      	beq.n	8011a36 <lcp_up+0x10e>
 8011a30:	69bb      	ldr	r3, [r7, #24]
 8011a32:	685a      	ldr	r2, [r3, #4]
 8011a34:	e003      	b.n	8011a3e <lcp_up+0x116>
 8011a36:	f04f 32ff 	mov.w	r2, #4294967295
 8011a3a:	e000      	b.n	8011a3e <lcp_up+0x116>
    ppp_recv_config(pcb, mru,
 8011a3c:	2200      	movs	r2, #0
		    go->neg_pcompression, go->neg_accompression);
 8011a3e:	69bb      	ldr	r3, [r7, #24]
 8011a40:	781b      	ldrb	r3, [r3, #0]
 8011a42:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8011a46:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 8011a48:	4619      	mov	r1, r3
		    go->neg_pcompression, go->neg_accompression);
 8011a4a:	69bb      	ldr	r3, [r7, #24]
 8011a4c:	781b      	ldrb	r3, [r3, #0]
 8011a4e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011a52:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 8011a54:	9300      	str	r3, [sp, #0]
 8011a56:	460b      	mov	r3, r1
 8011a58:	68f9      	ldr	r1, [r7, #12]
 8011a5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a5c:	f000 fc8a 	bl	8012374 <ppp_recv_config>

    if (ho->neg_mru)
 8011a60:	69fb      	ldr	r3, [r7, #28]
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	f003 0304 	and.w	r3, r3, #4
 8011a68:	b2db      	uxtb	r3, r3
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d004      	beq.n	8011a78 <lcp_up+0x150>
	pcb->peer_mru = ho->mru;
 8011a6e:	69fb      	ldr	r3, [r7, #28]
 8011a70:	885a      	ldrh	r2, [r3, #2]
 8011a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a74:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0

    lcp_echo_lowerup(f->pcb);  /* Enable echo messages */
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f000 f97a 	bl	8011d76 <lcp_echo_lowerup>

    link_established(pcb);
 8011a82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a84:	f7fb fdca 	bl	800d61c <link_established>
}
 8011a88:	bf00      	nop
 8011a8a:	3728      	adds	r7, #40	; 0x28
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}

08011a90 <lcp_down>:
/*
 * lcp_down - LCP has gone DOWN.
 *
 * Alert other protocols.
 */
static void lcp_down(fsm *f) {
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b086      	sub	sp, #24
 8011a94:	af02      	add	r7, sp, #8
 8011a96:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	60fb      	str	r3, [r7, #12]
    lcp_options *go = &pcb->lcp_gotoptions;
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	3384      	adds	r3, #132	; 0x84
 8011aa2:	60bb      	str	r3, [r7, #8]

    lcp_echo_lowerdown(f->pcb);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f000 f985 	bl	8011db8 <lcp_echo_lowerdown>

    link_down(pcb);
 8011aae:	68f8      	ldr	r0, [r7, #12]
 8011ab0:	f7fb fd62 	bl	800d578 <link_down>

    ppp_send_config(pcb, PPP_DEFMRU, 0xffffffff, 0, 0);
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	9300      	str	r3, [sp, #0]
 8011ab8:	2300      	movs	r3, #0
 8011aba:	f04f 32ff 	mov.w	r2, #4294967295
 8011abe:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8011ac2:	68f8      	ldr	r0, [r7, #12]
 8011ac4:	f000 fc3a 	bl	801233c <ppp_send_config>
    ppp_recv_config(pcb, PPP_DEFMRU,
		    (go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	781b      	ldrb	r3, [r3, #0]
 8011acc:	f003 0308 	and.w	r3, r3, #8
 8011ad0:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d002      	beq.n	8011adc <lcp_down+0x4c>
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	685a      	ldr	r2, [r3, #4]
 8011ada:	e001      	b.n	8011ae0 <lcp_down+0x50>
 8011adc:	f04f 32ff 	mov.w	r2, #4294967295
		    go->neg_pcompression, go->neg_accompression);
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	781b      	ldrb	r3, [r3, #0]
 8011ae4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8011ae8:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 8011aea:	4619      	mov	r1, r3
		    go->neg_pcompression, go->neg_accompression);
 8011aec:	68bb      	ldr	r3, [r7, #8]
 8011aee:	781b      	ldrb	r3, [r3, #0]
 8011af0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011af4:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 8011af6:	9300      	str	r3, [sp, #0]
 8011af8:	460b      	mov	r3, r1
 8011afa:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8011afe:	68f8      	ldr	r0, [r7, #12]
 8011b00:	f000 fc38 	bl	8012374 <ppp_recv_config>
    pcb->peer_mru = PPP_DEFMRU;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8011b0a:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
}
 8011b0e:	bf00      	nop
 8011b10:	3710      	adds	r7, #16
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}

08011b16 <lcp_starting>:


/*
 * lcp_starting - LCP needs the lower layer up.
 */
static void lcp_starting(fsm *f) {
 8011b16:	b580      	push	{r7, lr}
 8011b18:	b084      	sub	sp, #16
 8011b1a:	af00      	add	r7, sp, #0
 8011b1c:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	60fb      	str	r3, [r7, #12]
    link_required(pcb);
 8011b24:	68f8      	ldr	r0, [r7, #12]
 8011b26:	f7fb fd05 	bl	800d534 <link_required>
}
 8011b2a:	bf00      	nop
 8011b2c:	3710      	adds	r7, #16
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}

08011b32 <lcp_finished>:


/*
 * lcp_finished - LCP has finished with the lower layer.
 */
static void lcp_finished(fsm *f) {
 8011b32:	b580      	push	{r7, lr}
 8011b34:	b084      	sub	sp, #16
 8011b36:	af00      	add	r7, sp, #0
 8011b38:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	60fb      	str	r3, [r7, #12]
    link_terminated(pcb);
 8011b40:	68f8      	ldr	r0, [r7, #12]
 8011b42:	f7fb fd01 	bl	800d548 <link_terminated>
}
 8011b46:	bf00      	nop
 8011b48:	3710      	adds	r7, #16
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}
	...

08011b50 <LcpLinkFailure>:

/*
 * Time to shut down the link because there is nothing out there.
 */

static void LcpLinkFailure(fsm *f) {
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b084      	sub	sp, #16
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	60fb      	str	r3, [r7, #12]
    if (f->state == PPP_FSM_OPENED) {
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	7c1b      	ldrb	r3, [r3, #16]
 8011b62:	2b09      	cmp	r3, #9
 8011b64:	d107      	bne.n	8011b76 <LcpLinkFailure+0x26>
	ppp_info(("No response to %d echo-requests", pcb->lcp_echos_pending));
        ppp_notice(("Serial link appears to be disconnected."));
	pcb->err_code = PPPERR_PEERDEAD;
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	2209      	movs	r2, #9
 8011b6a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	lcp_close(pcb, "Peer not responding");
 8011b6e:	4904      	ldr	r1, [pc, #16]	; (8011b80 <LcpLinkFailure+0x30>)
 8011b70:	68f8      	ldr	r0, [r7, #12]
 8011b72:	f7fe f88d 	bl	800fc90 <lcp_close>
    }
}
 8011b76:	bf00      	nop
 8011b78:	3710      	adds	r7, #16
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
 8011b7e:	bf00      	nop
 8011b80:	08017844 	.word	0x08017844

08011b84 <LcpEchoCheck>:

/*
 * Timer expired for the LCP echo requests from this process.
 */

static void LcpEchoCheck(fsm *f) {
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b084      	sub	sp, #16
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	60fb      	str	r3, [r7, #12]

    LcpSendEchoRequest (f);
 8011b92:	6878      	ldr	r0, [r7, #4]
 8011b94:	f000 f88e 	bl	8011cb4 <LcpSendEchoRequest>
    if (f->state != PPP_FSM_OPENED)
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	7c1b      	ldrb	r3, [r3, #16]
 8011b9c:	2b09      	cmp	r3, #9
 8011b9e:	d117      	bne.n	8011bd0 <LcpEchoCheck+0x4c>
    /*
     * Start the timer for the next interval.
     */
    if (pcb->lcp_echo_timer_running)
	ppp_warn(("assertion lcp_echo_timer_running==0 failed"));
    TIMEOUT (LcpEchoTimeout, f, pcb->settings.lcp_echo_interval);
 8011ba0:	6879      	ldr	r1, [r7, #4]
 8011ba2:	480d      	ldr	r0, [pc, #52]	; (8011bd8 <LcpEchoCheck+0x54>)
 8011ba4:	f7fb fc1e 	bl	800d3e4 <sys_untimeout>
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	7cdb      	ldrb	r3, [r3, #19]
 8011bac:	461a      	mov	r2, r3
 8011bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011bb2:	fb03 f302 	mul.w	r3, r3, r2
 8011bb6:	687a      	ldr	r2, [r7, #4]
 8011bb8:	4907      	ldr	r1, [pc, #28]	; (8011bd8 <LcpEchoCheck+0x54>)
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7fb fbe6 	bl	800d38c <sys_timeout>
    pcb->lcp_echo_timer_running = 1;
 8011bc0:	68fa      	ldr	r2, [r7, #12]
 8011bc2:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8011bc6:	f043 0310 	orr.w	r3, r3, #16
 8011bca:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 8011bce:	e000      	b.n	8011bd2 <LcpEchoCheck+0x4e>
	return;
 8011bd0:	bf00      	nop
}
 8011bd2:	3710      	adds	r7, #16
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}
 8011bd8:	08011bdd 	.word	0x08011bdd

08011bdc <LcpEchoTimeout>:

/*
 * LcpEchoTimeout - Timer expired on the LCP echo
 */

static void LcpEchoTimeout(void *arg) {
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b084      	sub	sp, #16
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm*)arg;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	60fb      	str	r3, [r7, #12]
    ppp_pcb *pcb = f->pcb;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	60bb      	str	r3, [r7, #8]
    if (pcb->lcp_echo_timer_running != 0) {
 8011bee:	68bb      	ldr	r3, [r7, #8]
 8011bf0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011bf4:	f003 0310 	and.w	r3, r3, #16
 8011bf8:	b2db      	uxtb	r3, r3
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d009      	beq.n	8011c12 <LcpEchoTimeout+0x36>
        pcb->lcp_echo_timer_running = 0;
 8011bfe:	68ba      	ldr	r2, [r7, #8]
 8011c00:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8011c04:	f36f 1304 	bfc	r3, #4, #1
 8011c08:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
        LcpEchoCheck ((fsm *) arg);
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f7ff ffb9 	bl	8011b84 <LcpEchoCheck>
    }
}
 8011c12:	bf00      	nop
 8011c14:	3710      	adds	r7, #16
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}

08011c1a <lcp_received_echo_reply>:

/*
 * LcpEchoReply - LCP has received a reply to the echo
 */

static void lcp_received_echo_reply(fsm *f, int id, u_char *inp, int len) {
 8011c1a:	b480      	push	{r7}
 8011c1c:	b089      	sub	sp, #36	; 0x24
 8011c1e:	af00      	add	r7, sp, #0
 8011c20:	60f8      	str	r0, [r7, #12]
 8011c22:	60b9      	str	r1, [r7, #8]
 8011c24:	607a      	str	r2, [r7, #4]
 8011c26:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 8011c2e:	69fb      	ldr	r3, [r7, #28]
 8011c30:	3384      	adds	r3, #132	; 0x84
 8011c32:	61bb      	str	r3, [r7, #24]
    u32_t magic_val;
    LWIP_UNUSED_ARG(id);

    /* Check the magic number - don't count replies from ourselves. */
    if (len < 4) {
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	2b03      	cmp	r3, #3
 8011c38:	dd34      	ble.n	8011ca4 <lcp_received_echo_reply+0x8a>
	ppp_dbglog(("lcp: received short Echo-Reply, length %d", len));
	return;
    }
    GETLONG(magic_val, inp);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	1c5a      	adds	r2, r3, #1
 8011c3e:	607a      	str	r2, [r7, #4]
 8011c40:	781b      	ldrb	r3, [r3, #0]
 8011c42:	021b      	lsls	r3, r3, #8
 8011c44:	617b      	str	r3, [r7, #20]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	1c5a      	adds	r2, r3, #1
 8011c4a:	607a      	str	r2, [r7, #4]
 8011c4c:	781b      	ldrb	r3, [r3, #0]
 8011c4e:	461a      	mov	r2, r3
 8011c50:	697b      	ldr	r3, [r7, #20]
 8011c52:	4313      	orrs	r3, r2
 8011c54:	617b      	str	r3, [r7, #20]
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	021b      	lsls	r3, r3, #8
 8011c5a:	617b      	str	r3, [r7, #20]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	1c5a      	adds	r2, r3, #1
 8011c60:	607a      	str	r2, [r7, #4]
 8011c62:	781b      	ldrb	r3, [r3, #0]
 8011c64:	461a      	mov	r2, r3
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	4313      	orrs	r3, r2
 8011c6a:	617b      	str	r3, [r7, #20]
 8011c6c:	697b      	ldr	r3, [r7, #20]
 8011c6e:	021b      	lsls	r3, r3, #8
 8011c70:	617b      	str	r3, [r7, #20]
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	1c5a      	adds	r2, r3, #1
 8011c76:	607a      	str	r2, [r7, #4]
 8011c78:	781b      	ldrb	r3, [r3, #0]
 8011c7a:	461a      	mov	r2, r3
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	4313      	orrs	r3, r2
 8011c80:	617b      	str	r3, [r7, #20]
    if (go->neg_magicnumber
 8011c82:	69bb      	ldr	r3, [r7, #24]
 8011c84:	781b      	ldrb	r3, [r3, #0]
 8011c86:	f003 0320 	and.w	r3, r3, #32
 8011c8a:	b2db      	uxtb	r3, r3
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d004      	beq.n	8011c9a <lcp_received_echo_reply+0x80>
	&& magic_val == go->magicnumber) {
 8011c90:	69bb      	ldr	r3, [r7, #24]
 8011c92:	689a      	ldr	r2, [r3, #8]
 8011c94:	697b      	ldr	r3, [r7, #20]
 8011c96:	429a      	cmp	r2, r3
 8011c98:	d006      	beq.n	8011ca8 <lcp_received_echo_reply+0x8e>
	ppp_warn(("appear to have received our own echo-reply!"));
	return;
    }

    /* Reset the number of outstanding echo frames */
    pcb->lcp_echos_pending = 0;
 8011c9a:	69fb      	ldr	r3, [r7, #28]
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8011ca2:	e002      	b.n	8011caa <lcp_received_echo_reply+0x90>
	return;
 8011ca4:	bf00      	nop
 8011ca6:	e000      	b.n	8011caa <lcp_received_echo_reply+0x90>
	return;
 8011ca8:	bf00      	nop
}
 8011caa:	3724      	adds	r7, #36	; 0x24
 8011cac:	46bd      	mov	sp, r7
 8011cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb2:	4770      	bx	lr

08011cb4 <LcpSendEchoRequest>:

/*
 * LcpSendEchoRequest - Send an echo request frame to the peer
 */

static void LcpSendEchoRequest(fsm *f) {
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b08a      	sub	sp, #40	; 0x28
 8011cb8:	af02      	add	r7, sp, #8
 8011cba:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 8011cc2:	69fb      	ldr	r3, [r7, #28]
 8011cc4:	3384      	adds	r3, #132	; 0x84
 8011cc6:	61bb      	str	r3, [r7, #24]
    u_char pkt[4], *pktp;

    /*
     * Detect the failure of the peer at this point.
     */
    if (pcb->settings.lcp_echo_fails != 0) {
 8011cc8:	69fb      	ldr	r3, [r7, #28]
 8011cca:	7d1b      	ldrb	r3, [r3, #20]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d00d      	beq.n	8011cec <LcpSendEchoRequest+0x38>
        if (pcb->lcp_echos_pending >= pcb->settings.lcp_echo_fails) {
 8011cd0:	69fb      	ldr	r3, [r7, #28]
 8011cd2:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 8011cd6:	69fb      	ldr	r3, [r7, #28]
 8011cd8:	7d1b      	ldrb	r3, [r3, #20]
 8011cda:	429a      	cmp	r2, r3
 8011cdc:	d306      	bcc.n	8011cec <LcpSendEchoRequest+0x38>
            LcpLinkFailure(f);
 8011cde:	6878      	ldr	r0, [r7, #4]
 8011ce0:	f7ff ff36 	bl	8011b50 <LcpLinkFailure>
            pcb->lcp_echos_pending = 0;
 8011ce4:	69fb      	ldr	r3, [r7, #28]
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
#endif

    /*
     * Make and send the echo request frame.
     */
    if (f->state == PPP_FSM_OPENED) {
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	7c1b      	ldrb	r3, [r3, #16]
 8011cf0:	2b09      	cmp	r3, #9
 8011cf2:	d13c      	bne.n	8011d6e <LcpSendEchoRequest+0xba>
        lcp_magic = go->magicnumber;
 8011cf4:	69bb      	ldr	r3, [r7, #24]
 8011cf6:	689b      	ldr	r3, [r3, #8]
 8011cf8:	617b      	str	r3, [r7, #20]
	pktp = pkt;
 8011cfa:	f107 030c 	add.w	r3, r7, #12
 8011cfe:	613b      	str	r3, [r7, #16]
	PUTLONG(lcp_magic, pktp);
 8011d00:	693b      	ldr	r3, [r7, #16]
 8011d02:	1c5a      	adds	r2, r3, #1
 8011d04:	613a      	str	r2, [r7, #16]
 8011d06:	697a      	ldr	r2, [r7, #20]
 8011d08:	0e12      	lsrs	r2, r2, #24
 8011d0a:	b2d2      	uxtb	r2, r2
 8011d0c:	701a      	strb	r2, [r3, #0]
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	1c5a      	adds	r2, r3, #1
 8011d12:	613a      	str	r2, [r7, #16]
 8011d14:	697a      	ldr	r2, [r7, #20]
 8011d16:	0c12      	lsrs	r2, r2, #16
 8011d18:	b2d2      	uxtb	r2, r2
 8011d1a:	701a      	strb	r2, [r3, #0]
 8011d1c:	693b      	ldr	r3, [r7, #16]
 8011d1e:	1c5a      	adds	r2, r3, #1
 8011d20:	613a      	str	r2, [r7, #16]
 8011d22:	697a      	ldr	r2, [r7, #20]
 8011d24:	0a12      	lsrs	r2, r2, #8
 8011d26:	b2d2      	uxtb	r2, r2
 8011d28:	701a      	strb	r2, [r3, #0]
 8011d2a:	693b      	ldr	r3, [r7, #16]
 8011d2c:	1c5a      	adds	r2, r3, #1
 8011d2e:	613a      	str	r2, [r7, #16]
 8011d30:	697a      	ldr	r2, [r7, #20]
 8011d32:	b2d2      	uxtb	r2, r2
 8011d34:	701a      	strb	r2, [r3, #0]
        fsm_sdata(f, ECHOREQ, pcb->lcp_echo_number++, pkt, pktp - pkt);
 8011d36:	69fb      	ldr	r3, [r7, #28]
 8011d38:	f893 20f3 	ldrb.w	r2, [r3, #243]	; 0xf3
 8011d3c:	1c53      	adds	r3, r2, #1
 8011d3e:	b2d9      	uxtb	r1, r3
 8011d40:	69fb      	ldr	r3, [r7, #28]
 8011d42:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8011d46:	6939      	ldr	r1, [r7, #16]
 8011d48:	f107 030c 	add.w	r3, r7, #12
 8011d4c:	1acb      	subs	r3, r1, r3
 8011d4e:	f107 010c 	add.w	r1, r7, #12
 8011d52:	9300      	str	r3, [sp, #0]
 8011d54:	460b      	mov	r3, r1
 8011d56:	2109      	movs	r1, #9
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f7fc fc79 	bl	800e650 <fsm_sdata>
	++pcb->lcp_echos_pending;
 8011d5e:	69fb      	ldr	r3, [r7, #28]
 8011d60:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8011d64:	3301      	adds	r3, #1
 8011d66:	b2da      	uxtb	r2, r3
 8011d68:	69fb      	ldr	r3, [r7, #28]
 8011d6a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    }
}
 8011d6e:	bf00      	nop
 8011d70:	3720      	adds	r7, #32
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}

08011d76 <lcp_echo_lowerup>:

/*
 * lcp_echo_lowerup - Start the timer for the LCP frame
 */

static void lcp_echo_lowerup(ppp_pcb *pcb) {
 8011d76:	b580      	push	{r7, lr}
 8011d78:	b084      	sub	sp, #16
 8011d7a:	af00      	add	r7, sp, #0
 8011d7c:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	3344      	adds	r3, #68	; 0x44
 8011d82:	60fb      	str	r3, [r7, #12]

    /* Clear the parameters for generating echo frames */
    pcb->lcp_echos_pending      = 0;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2200      	movs	r2, #0
 8011d88:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    pcb->lcp_echo_number        = 0;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2200      	movs	r2, #0
 8011d90:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
    pcb->lcp_echo_timer_running = 0;
 8011d94:	687a      	ldr	r2, [r7, #4]
 8011d96:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8011d9a:	f36f 1304 	bfc	r3, #4, #1
 8011d9e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  
    /* If a timeout interval is specified then start the timer */
    if (pcb->settings.lcp_echo_interval != 0)
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	7cdb      	ldrb	r3, [r3, #19]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d002      	beq.n	8011db0 <lcp_echo_lowerup+0x3a>
        LcpEchoCheck (f);
 8011daa:	68f8      	ldr	r0, [r7, #12]
 8011dac:	f7ff feea 	bl	8011b84 <LcpEchoCheck>
}
 8011db0:	bf00      	nop
 8011db2:	3710      	adds	r7, #16
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <lcp_echo_lowerdown>:

/*
 * lcp_echo_lowerdown - Stop the timer for the LCP frame
 */

static void lcp_echo_lowerdown(ppp_pcb *pcb) {
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b084      	sub	sp, #16
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	3344      	adds	r3, #68	; 0x44
 8011dc4:	60fb      	str	r3, [r7, #12]

    if (pcb->lcp_echo_timer_running != 0) {
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011dcc:	f003 0310 	and.w	r3, r3, #16
 8011dd0:	b2db      	uxtb	r3, r3
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d00a      	beq.n	8011dec <lcp_echo_lowerdown+0x34>
        UNTIMEOUT (LcpEchoTimeout, f);
 8011dd6:	68f9      	ldr	r1, [r7, #12]
 8011dd8:	4806      	ldr	r0, [pc, #24]	; (8011df4 <lcp_echo_lowerdown+0x3c>)
 8011dda:	f7fb fb03 	bl	800d3e4 <sys_untimeout>
        pcb->lcp_echo_timer_running = 0;
 8011dde:	687a      	ldr	r2, [r7, #4]
 8011de0:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8011de4:	f36f 1304 	bfc	r3, #4, #1
 8011de8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    }
}
 8011dec:	bf00      	nop
 8011dee:	3710      	adds	r7, #16
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}
 8011df4:	08011bdd 	.word	0x08011bdd

08011df8 <magic_init>:
 * random event.
 *
 * If LWIP_RAND if available, we do not call srand() as we are
 * not going to call rand().
 */
void magic_init(void) {
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	af00      	add	r7, sp, #0
  magic_randomseed += sys_jiffies();
 8011dfc:	f7f0 f826 	bl	8001e4c <sys_jiffies>
 8011e00:	4602      	mov	r2, r0
 8011e02:	4b03      	ldr	r3, [pc, #12]	; (8011e10 <magic_init+0x18>)
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	4413      	add	r3, r2
 8011e08:	4a01      	ldr	r2, [pc, #4]	; (8011e10 <magic_init+0x18>)
 8011e0a:	6013      	str	r3, [r2, #0]
#ifndef LWIP_RAND
  /* Initialize the random number generator. */
  srand((unsigned)magic_randomseed);
#endif /* LWIP_RAND */
}
 8011e0c:	bf00      	nop
 8011e0e:	bd80      	pop	{r7, pc}
 8011e10:	20000740 	.word	0x20000740

08011e14 <magic_randomize>:
 * this function is called at *truly random* times by the polling
 * and network functions.  Here we only get 16 bits of new random
 * value but we use the previous value to randomize the other 16
 * bits.
 */
void magic_randomize(void) {
 8011e14:	b580      	push	{r7, lr}
 8011e16:	af00      	add	r7, sp, #0
    magic_init();
    /* The initialization function also updates the seed. */
    return;
  }
#endif /* LWIP_RAND */
  magic_randomseed += sys_jiffies();
 8011e18:	f7f0 f818 	bl	8001e4c <sys_jiffies>
 8011e1c:	4602      	mov	r2, r0
 8011e1e:	4b03      	ldr	r3, [pc, #12]	; (8011e2c <magic_randomize+0x18>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	4413      	add	r3, r2
 8011e24:	4a01      	ldr	r2, [pc, #4]	; (8011e2c <magic_randomize+0x18>)
 8011e26:	6013      	str	r3, [r2, #0]
}
 8011e28:	bf00      	nop
 8011e2a:	bd80      	pop	{r7, pc}
 8011e2c:	20000740 	.word	0x20000740

08011e30 <magic>:
 * Alternatively, use LWIP_RAND if available, but we do not assume
 * it is returning 32 bits of random data because it is probably
 * going to be defined to directly return the rand() value. For
 * example, LCP magic numbers are 32-bit random values.
 */
u32_t magic(void) {
 8011e30:	b598      	push	{r3, r4, r7, lr}
 8011e32:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  return (LWIP_RAND() << 16) + LWIP_RAND() + magic_randomseed;
 8011e34:	f7f0 f812 	bl	8001e5c <lwip_port_rand>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	041c      	lsls	r4, r3, #16
 8011e3c:	f7f0 f80e 	bl	8001e5c <lwip_port_rand>
 8011e40:	4603      	mov	r3, r0
 8011e42:	18e2      	adds	r2, r4, r3
 8011e44:	4b02      	ldr	r3, [pc, #8]	; (8011e50 <magic+0x20>)
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	4413      	add	r3, r2
#else /* LWIP_RAND */
  return ((u32_t)rand() << 16) + (u32_t)rand() + magic_randomseed;
#endif /* LWIP_RAND */
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	bd98      	pop	{r3, r4, r7, pc}
 8011e4e:	bf00      	nop
 8011e50:	20000740 	.word	0x20000740

08011e54 <ppp_connect>:
 * the connection.
 *
 * If this port connects to a modem, the modem connection must be
 * established before calling this.
 */
err_t ppp_connect(ppp_pcb *pcb, u16_t holdoff) {
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b082      	sub	sp, #8
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
 8011e5c:	460b      	mov	r3, r1
 8011e5e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb->phase != PPP_PHASE_DEAD) {
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d002      	beq.n	8011e70 <ppp_connect+0x1c>
    return ERR_ALREADY;
 8011e6a:	f06f 0308 	mvn.w	r3, #8
 8011e6e:	e018      	b.n	8011ea2 <ppp_connect+0x4e>
  }

  PPPDEBUG(LOG_DEBUG, ("ppp_connect[%d]: holdoff=%d\n", pcb->netif->num, holdoff));

  magic_randomize();
 8011e70:	f7ff ffd0 	bl	8011e14 <magic_randomize>

  if (holdoff == 0) {
 8011e74:	887b      	ldrh	r3, [r7, #2]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d104      	bne.n	8011e84 <ppp_connect+0x30>
    ppp_do_connect(pcb);
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f000 f818 	bl	8011eb0 <ppp_do_connect>
    return ERR_OK;
 8011e80:	2300      	movs	r3, #0
 8011e82:	e00e      	b.n	8011ea2 <ppp_connect+0x4e>
  }

  new_phase(pcb, PPP_PHASE_HOLDOFF);
 8011e84:	2102      	movs	r1, #2
 8011e86:	6878      	ldr	r0, [r7, #4]
 8011e88:	f000 fa48 	bl	801231c <new_phase>
  sys_timeout((u32_t)(holdoff*1000), ppp_do_connect, pcb);
 8011e8c:	887b      	ldrh	r3, [r7, #2]
 8011e8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011e92:	fb02 f303 	mul.w	r3, r2, r3
 8011e96:	687a      	ldr	r2, [r7, #4]
 8011e98:	4904      	ldr	r1, [pc, #16]	; (8011eac <ppp_connect+0x58>)
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f7fb fa76 	bl	800d38c <sys_timeout>
  return ERR_OK;
 8011ea0:	2300      	movs	r3, #0
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	3708      	adds	r7, #8
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}
 8011eaa:	bf00      	nop
 8011eac:	08011eb1 	.word	0x08011eb1

08011eb0 <ppp_do_connect>:

/**********************************/
/*** LOCAL FUNCTION DEFINITIONS ***/
/**********************************/

static void ppp_do_connect(void *arg) {
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b084      	sub	sp, #16
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
  ppp_pcb *pcb = (ppp_pcb*)arg;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("pcb->phase == PPP_PHASE_DEAD || pcb->phase == PPP_PHASE_HOLDOFF", pcb->phase == PPP_PHASE_DEAD || pcb->phase == PPP_PHASE_HOLDOFF);
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d010      	beq.n	8011ee8 <ppp_do_connect+0x38>
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011ecc:	2b02      	cmp	r3, #2
 8011ece:	d00b      	beq.n	8011ee8 <ppp_do_connect+0x38>
 8011ed0:	4b0d      	ldr	r3, [pc, #52]	; (8011f08 <ppp_do_connect+0x58>)
 8011ed2:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8011ed6:	490d      	ldr	r1, [pc, #52]	; (8011f0c <ppp_do_connect+0x5c>)
 8011ed8:	480d      	ldr	r0, [pc, #52]	; (8011f10 <ppp_do_connect+0x60>)
 8011eda:	f001 fdc5 	bl	8013a68 <iprintf>
 8011ede:	2000      	movs	r0, #0
 8011ee0:	f001 fec4 	bl	8013c6c <fflush>
 8011ee4:	f001 fe09 	bl	8013afa <abort>

  new_phase(pcb, PPP_PHASE_INITIALIZE);
 8011ee8:	2103      	movs	r1, #3
 8011eea:	68f8      	ldr	r0, [r7, #12]
 8011eec:	f000 fa16 	bl	801231c <new_phase>
  pcb->link_cb->connect(pcb, pcb->link_ctx_cb);
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	699b      	ldr	r3, [r3, #24]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	68fa      	ldr	r2, [r7, #12]
 8011ef8:	69d2      	ldr	r2, [r2, #28]
 8011efa:	4611      	mov	r1, r2
 8011efc:	68f8      	ldr	r0, [r7, #12]
 8011efe:	4798      	blx	r3
}
 8011f00:	bf00      	nop
 8011f02:	3710      	adds	r7, #16
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	08017860 	.word	0x08017860
 8011f0c:	080178dc 	.word	0x080178dc
 8011f10:	080178a4 	.word	0x080178a4

08011f14 <ppp_netif_init_cb>:

/*
 * ppp_netif_init_cb - netif init callback
 */
static err_t ppp_netif_init_cb(struct netif *netif) {
 8011f14:	b480      	push	{r7}
 8011f16:	b083      	sub	sp, #12
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
  netif->name[0] = 'p';
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2270      	movs	r2, #112	; 0x70
 8011f20:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = 'p';
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2270      	movs	r2, #112	; 0x70
 8011f28:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if PPP_IPV4_SUPPORT
  netif->output = ppp_netif_output_ip4;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	4a04      	ldr	r2, [pc, #16]	; (8011f40 <ppp_netif_init_cb+0x2c>)
 8011f30:	615a      	str	r2, [r3, #20]
#endif /* PPP_IPV6_SUPPORT */
#if LWIP_NETIF_HOSTNAME
  /* @todo: Initialize interface hostname */
  /* netif_set_hostname(netif, "lwip"); */
#endif /* LWIP_NETIF_HOSTNAME */
  return ERR_OK;
 8011f32:	2300      	movs	r3, #0
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	370c      	adds	r7, #12
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3e:	4770      	bx	lr
 8011f40:	08011f45 	.word	0x08011f45

08011f44 <ppp_netif_output_ip4>:

#if PPP_IPV4_SUPPORT
/*
 * Send an IPv4 packet on the given connection.
 */
static err_t ppp_netif_output_ip4(struct netif *netif, struct pbuf *pb, const ip4_addr_t *ipaddr) {
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b084      	sub	sp, #16
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	60f8      	str	r0, [r7, #12]
 8011f4c:	60b9      	str	r1, [r7, #8]
 8011f4e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(ipaddr);
  return ppp_netif_output(netif, pb, PPP_IP);
 8011f50:	2221      	movs	r2, #33	; 0x21
 8011f52:	68b9      	ldr	r1, [r7, #8]
 8011f54:	68f8      	ldr	r0, [r7, #12]
 8011f56:	f000 f805 	bl	8011f64 <ppp_netif_output>
 8011f5a:	4603      	mov	r3, r0
}
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	3710      	adds	r7, #16
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}

08011f64 <ppp_netif_output>:
  LWIP_UNUSED_ARG(ipaddr);
  return ppp_netif_output(netif, pb, PPP_IPV6);
}
#endif /* PPP_IPV6_SUPPORT */

static err_t ppp_netif_output(struct netif *netif, struct pbuf *pb, u16_t protocol) {
 8011f64:	b590      	push	{r4, r7, lr}
 8011f66:	b089      	sub	sp, #36	; 0x24
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	60f8      	str	r0, [r7, #12]
 8011f6c:	60b9      	str	r1, [r7, #8]
 8011f6e:	4613      	mov	r3, r2
 8011f70:	80fb      	strh	r3, [r7, #6]
  ppp_pcb *pcb = (ppp_pcb*)netif->state;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	69db      	ldr	r3, [r3, #28]
 8011f76:	61bb      	str	r3, [r7, #24]
  err_t err;
  struct pbuf *fpb = NULL;
 8011f78:	2300      	movs	r3, #0
 8011f7a:	617b      	str	r3, [r7, #20]

  /* Check that the link is up. */
  if (0
 8011f7c:	88fb      	ldrh	r3, [r7, #6]
 8011f7e:	2b21      	cmp	r3, #33	; 0x21
 8011f80:	d107      	bne.n	8011f92 <ppp_netif_output+0x2e>
#if PPP_IPV4_SUPPORT
      || (protocol == PPP_IP && !pcb->if4_up)
 8011f82:	69bb      	ldr	r3, [r7, #24]
 8011f84:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011f88:	f003 0308 	and.w	r3, r3, #8
 8011f8c:	b2db      	uxtb	r3, r3
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d00b      	beq.n	8011faa <ppp_netif_output+0x46>
    PPPDEBUG(LOG_ERR, ("ppp_netif_output[%d]: bad CCP transmit method\n", pcb->netif->num));
    goto err_rte_drop; /* Cannot really happen, we only negotiate what we are able to do */
  }
#endif /* CCP_SUPPORT */

  err = pcb->link_cb->netif_output(pcb, pcb->link_ctx_cb, pb, protocol);
 8011f92:	69bb      	ldr	r3, [r7, #24]
 8011f94:	699b      	ldr	r3, [r3, #24]
 8011f96:	691c      	ldr	r4, [r3, #16]
 8011f98:	69bb      	ldr	r3, [r7, #24]
 8011f9a:	69d9      	ldr	r1, [r3, #28]
 8011f9c:	88fb      	ldrh	r3, [r7, #6]
 8011f9e:	68ba      	ldr	r2, [r7, #8]
 8011fa0:	69b8      	ldr	r0, [r7, #24]
 8011fa2:	47a0      	blx	r4
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	77fb      	strb	r3, [r7, #31]
  goto err;
 8011fa8:	e00e      	b.n	8011fc8 <ppp_netif_output+0x64>
    goto err_rte_drop;
 8011faa:	bf00      	nop

err_rte_drop:
  err = ERR_RTE;
 8011fac:	23fc      	movs	r3, #252	; 0xfc
 8011fae:	77fb      	strb	r3, [r7, #31]
  LINK_STATS_INC(link.rterr);
 8011fb0:	4b0b      	ldr	r3, [pc, #44]	; (8011fe0 <ppp_netif_output+0x7c>)
 8011fb2:	89db      	ldrh	r3, [r3, #14]
 8011fb4:	3301      	adds	r3, #1
 8011fb6:	b29a      	uxth	r2, r3
 8011fb8:	4b09      	ldr	r3, [pc, #36]	; (8011fe0 <ppp_netif_output+0x7c>)
 8011fba:	81da      	strh	r2, [r3, #14]
  LINK_STATS_INC(link.drop);
 8011fbc:	4b08      	ldr	r3, [pc, #32]	; (8011fe0 <ppp_netif_output+0x7c>)
 8011fbe:	88db      	ldrh	r3, [r3, #6]
 8011fc0:	3301      	adds	r3, #1
 8011fc2:	b29a      	uxth	r2, r3
 8011fc4:	4b06      	ldr	r3, [pc, #24]	; (8011fe0 <ppp_netif_output+0x7c>)
 8011fc6:	80da      	strh	r2, [r3, #6]
  MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
err:
  if (fpb) {
 8011fc8:	697b      	ldr	r3, [r7, #20]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d002      	beq.n	8011fd4 <ppp_netif_output+0x70>
    pbuf_free(fpb);
 8011fce:	6978      	ldr	r0, [r7, #20]
 8011fd0:	f7f4 f834 	bl	800603c <pbuf_free>
  }
  return err;
 8011fd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011fd8:	4618      	mov	r0, r3
 8011fda:	3724      	adds	r7, #36	; 0x24
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd90      	pop	{r4, r7, pc}
 8011fe0:	20002218 	.word	0x20002218

08011fe4 <ppp_init>:
/*** PRIVATE FUNCTION DEFINITIONS ***/
/************************************/

/* Initialize the PPP subsystem. */
int ppp_init(void)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	af00      	add	r7, sp, #0
#if PPPOS_SUPPORT
  LWIP_MEMPOOL_INIT(PPPOS_PCB);
 8011fe8:	4805      	ldr	r0, [pc, #20]	; (8012000 <ppp_init+0x1c>)
 8011fea:	f7f3 f925 	bl	8005238 <memp_init_pool>
#endif
#if LWIP_PPP_API && LWIP_MPU_COMPATIBLE
  LWIP_MEMPOOL_INIT(PPPAPI_MSG);
#endif

  LWIP_MEMPOOL_INIT(PPP_PCB);
 8011fee:	4805      	ldr	r0, [pc, #20]	; (8012004 <ppp_init+0x20>)
 8011ff0:	f7f3 f922 	bl	8005238 <memp_init_pool>

  /*
   * Initialize magic number generator now so that protocols may
   * use magic numbers in initialization.
   */
  magic_init();
 8011ff4:	f7ff ff00 	bl	8011df8 <magic_init>

  return 0;
 8011ff8:	2300      	movs	r3, #0
}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	bd80      	pop	{r7, pc}
 8011ffe:	bf00      	nop
 8012000:	08017c14 	.word	0x08017c14
 8012004:	08017bf0 	.word	0x08017bf0

08012008 <ppp_new>:
 * attempt to negotiate the LCP session.
 *
 * Return a new PPP connection control block pointer
 * on success or a null pointer on failure.
 */
ppp_pcb *ppp_new(struct netif *pppif, const struct link_callbacks *callbacks, void *link_ctx_cb, ppp_link_status_cb_fn link_status_cb, void *ctx_cb) {
 8012008:	b580      	push	{r7, lr}
 801200a:	b08c      	sub	sp, #48	; 0x30
 801200c:	af04      	add	r7, sp, #16
 801200e:	60f8      	str	r0, [r7, #12]
 8012010:	60b9      	str	r1, [r7, #8]
 8012012:	607a      	str	r2, [r7, #4]
 8012014:	603b      	str	r3, [r7, #0]
  const struct protent *protp;
  int i;

  /* PPP is single-threaded: without a callback,
   * there is no way to know when the link is up. */
  if (link_status_cb == NULL) {
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d101      	bne.n	8012020 <ppp_new+0x18>
    return NULL;
 801201c:	2300      	movs	r3, #0
 801201e:	e06a      	b.n	80120f6 <ppp_new+0xee>
  }

  pcb = (ppp_pcb*)LWIP_MEMPOOL_ALLOC(PPP_PCB);
 8012020:	4837      	ldr	r0, [pc, #220]	; (8012100 <ppp_new+0xf8>)
 8012022:	f7f3 f99f 	bl	8005364 <memp_malloc_pool>
 8012026:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 8012028:	69bb      	ldr	r3, [r7, #24]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d101      	bne.n	8012032 <ppp_new+0x2a>
    return NULL;
 801202e:	2300      	movs	r3, #0
 8012030:	e061      	b.n	80120f6 <ppp_new+0xee>
  }

  memset(pcb, 0, sizeof(ppp_pcb));
 8012032:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8012036:	2100      	movs	r1, #0
 8012038:	69b8      	ldr	r0, [r7, #24]
 801203a:	f001 ff3c 	bl	8013eb6 <memset>

  /* default configuration */
#if PAP_SUPPORT
  pcb->settings.pap_timeout_time = UPAP_DEFTIMEOUT;
 801203e:	69bb      	ldr	r3, [r7, #24]
 8012040:	2206      	movs	r2, #6
 8012042:	731a      	strb	r2, [r3, #12]
  pcb->settings.pap_max_transmits = UPAP_DEFTRANSMITS;
 8012044:	69bb      	ldr	r3, [r7, #24]
 8012046:	220a      	movs	r2, #10
 8012048:	735a      	strb	r2, [r3, #13]
  pcb->settings.eap_timeout_time = EAP_DEFTIMEOUT;
  pcb->settings.eap_max_transmits = EAP_DEFTRANSMITS;
#endif /* PPP_SERVER */
#endif /* EAP_SUPPORT */

  pcb->settings.lcp_loopbackfail = LCP_DEFLOOPBACKFAIL;
 801204a:	69bb      	ldr	r3, [r7, #24]
 801204c:	220a      	movs	r2, #10
 801204e:	749a      	strb	r2, [r3, #18]
  pcb->settings.lcp_echo_interval = LCP_ECHOINTERVAL;
 8012050:	69bb      	ldr	r3, [r7, #24]
 8012052:	2200      	movs	r2, #0
 8012054:	74da      	strb	r2, [r3, #19]
  pcb->settings.lcp_echo_fails = LCP_MAXECHOFAILS;
 8012056:	69bb      	ldr	r3, [r7, #24]
 8012058:	2203      	movs	r2, #3
 801205a:	751a      	strb	r2, [r3, #20]

  pcb->settings.fsm_timeout_time = FSM_DEFTIMEOUT;
 801205c:	69bb      	ldr	r3, [r7, #24]
 801205e:	2206      	movs	r2, #6
 8012060:	739a      	strb	r2, [r3, #14]
  pcb->settings.fsm_max_conf_req_transmits = FSM_DEFMAXCONFREQS;
 8012062:	69bb      	ldr	r3, [r7, #24]
 8012064:	220a      	movs	r2, #10
 8012066:	73da      	strb	r2, [r3, #15]
  pcb->settings.fsm_max_term_transmits = FSM_DEFMAXTERMREQS;
 8012068:	69bb      	ldr	r3, [r7, #24]
 801206a:	2202      	movs	r2, #2
 801206c:	741a      	strb	r2, [r3, #16]
  pcb->settings.fsm_max_nak_loops = FSM_DEFMAXNAKLOOPS;
 801206e:	69bb      	ldr	r3, [r7, #24]
 8012070:	2205      	movs	r2, #5
 8012072:	745a      	strb	r2, [r3, #17]

  pcb->netif = pppif;
 8012074:	69bb      	ldr	r3, [r7, #24]
 8012076:	68fa      	ldr	r2, [r7, #12]
 8012078:	629a      	str	r2, [r3, #40]	; 0x28
  MIB2_INIT_NETIF(pppif, snmp_ifType_ppp, 0);
  if (!netif_add(pcb->netif,
 801207a:	69bb      	ldr	r3, [r7, #24]
 801207c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801207e:	2300      	movs	r3, #0
 8012080:	9302      	str	r3, [sp, #8]
 8012082:	4b20      	ldr	r3, [pc, #128]	; (8012104 <ppp_new+0xfc>)
 8012084:	9301      	str	r3, [sp, #4]
 8012086:	69bb      	ldr	r3, [r7, #24]
 8012088:	9300      	str	r3, [sp, #0]
 801208a:	4b1f      	ldr	r3, [pc, #124]	; (8012108 <ppp_new+0x100>)
 801208c:	4a1f      	ldr	r2, [pc, #124]	; (801210c <ppp_new+0x104>)
 801208e:	491e      	ldr	r1, [pc, #120]	; (8012108 <ppp_new+0x100>)
 8012090:	f7f3 fa30 	bl	80054f4 <netif_add>
 8012094:	4603      	mov	r3, r0
 8012096:	2b00      	cmp	r3, #0
 8012098:	d105      	bne.n	80120a6 <ppp_new+0x9e>
#if LWIP_IPV4
                 IP4_ADDR_ANY4, IP4_ADDR_BROADCAST, IP4_ADDR_ANY4,
#endif /* LWIP_IPV4 */
                 (void *)pcb, ppp_netif_init_cb, NULL)) {
    LWIP_MEMPOOL_FREE(PPP_PCB, pcb);
 801209a:	69b9      	ldr	r1, [r7, #24]
 801209c:	4818      	ldr	r0, [pc, #96]	; (8012100 <ppp_new+0xf8>)
 801209e:	f7f3 f9cd 	bl	800543c <memp_free_pool>
    PPPDEBUG(LOG_ERR, ("ppp_new: netif_add failed\n"));
    return NULL;
 80120a2:	2300      	movs	r3, #0
 80120a4:	e027      	b.n	80120f6 <ppp_new+0xee>
  }
  /* FIXME: user application should be responsible to call netif_set_up(),
   * remove it for next release with allowed behavior break */
  netif_set_up(pcb->netif);
 80120a6:	69bb      	ldr	r3, [r7, #24]
 80120a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120aa:	4618      	mov	r0, r3
 80120ac:	f7f3 fbf2 	bl	8005894 <netif_set_up>

  pcb->link_cb = callbacks;
 80120b0:	69bb      	ldr	r3, [r7, #24]
 80120b2:	68ba      	ldr	r2, [r7, #8]
 80120b4:	619a      	str	r2, [r3, #24]
  pcb->link_ctx_cb = link_ctx_cb;
 80120b6:	69bb      	ldr	r3, [r7, #24]
 80120b8:	687a      	ldr	r2, [r7, #4]
 80120ba:	61da      	str	r2, [r3, #28]
  pcb->link_status_cb = link_status_cb;
 80120bc:	69bb      	ldr	r3, [r7, #24]
 80120be:	683a      	ldr	r2, [r7, #0]
 80120c0:	621a      	str	r2, [r3, #32]
  pcb->ctx_cb = ctx_cb;
 80120c2:	69bb      	ldr	r3, [r7, #24]
 80120c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120c6:	625a      	str	r2, [r3, #36]	; 0x24

  /*
   * Initialize each protocol.
   */
  for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 80120c8:	2300      	movs	r3, #0
 80120ca:	61fb      	str	r3, [r7, #28]
 80120cc:	e006      	b.n	80120dc <ppp_new+0xd4>
      (*protp->init)(pcb);
 80120ce:	697b      	ldr	r3, [r7, #20]
 80120d0:	685b      	ldr	r3, [r3, #4]
 80120d2:	69b8      	ldr	r0, [r7, #24]
 80120d4:	4798      	blx	r3
  for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 80120d6:	69fb      	ldr	r3, [r7, #28]
 80120d8:	3301      	adds	r3, #1
 80120da:	61fb      	str	r3, [r7, #28]
 80120dc:	4a0c      	ldr	r2, [pc, #48]	; (8012110 <ppp_new+0x108>)
 80120de:	69fb      	ldr	r3, [r7, #28]
 80120e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80120e4:	617b      	str	r3, [r7, #20]
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d1f0      	bne.n	80120ce <ppp_new+0xc6>
  }

  new_phase(pcb, PPP_PHASE_DEAD);
 80120ec:	2100      	movs	r1, #0
 80120ee:	69b8      	ldr	r0, [r7, #24]
 80120f0:	f000 f914 	bl	801231c <new_phase>
  return pcb;
 80120f4:	69bb      	ldr	r3, [r7, #24]
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	3720      	adds	r7, #32
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
 80120fe:	bf00      	nop
 8012100:	08017bf0 	.word	0x08017bf0
 8012104:	08011f15 	.word	0x08011f15
 8012108:	08017a40 	.word	0x08017a40
 801210c:	08017a44 	.word	0x08017a44
 8012110:	08017c04 	.word	0x08017c04

08012114 <ppp_start>:

/** Initiate LCP open request */
void ppp_start(ppp_pcb *pcb) {
 8012114:	b580      	push	{r7, lr}
 8012116:	b082      	sub	sp, #8
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
#if VJ_SUPPORT
  vj_compress_init(&pcb->vj_comp);
#endif /* VJ_SUPPORT */

  /* Start protocol */
  new_phase(pcb, PPP_PHASE_ESTABLISH);
 801211c:	2106      	movs	r1, #6
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	f000 f8fc 	bl	801231c <new_phase>
  lcp_open(pcb);
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f7fd fd7f 	bl	800fc28 <lcp_open>
  lcp_lowerup(pcb);
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f7fd fdee 	bl	800fd0c <lcp_lowerup>
  PPPDEBUG(LOG_DEBUG, ("ppp_start[%d]: finished\n", pcb->netif->num));
}
 8012130:	bf00      	nop
 8012132:	3708      	adds	r7, #8
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}

08012138 <ppp_link_end>:
  pcb->err_code = PPPERR_OPEN;
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
}

/** Called when link is normally down (i.e. it was asked to end) */
void ppp_link_end(ppp_pcb *pcb) {
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
  PPPDEBUG(LOG_DEBUG, ("ppp_link_end[%d]\n", pcb->netif->num));
  new_phase(pcb, PPP_PHASE_DEAD);
 8012140:	2100      	movs	r1, #0
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f000 f8ea 	bl	801231c <new_phase>
  if (pcb->err_code == PPPERR_NONE) {
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801214e:	2b00      	cmp	r3, #0
 8012150:	d103      	bne.n	801215a <ppp_link_end+0x22>
    pcb->err_code = PPPERR_CONNECT;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2206      	movs	r2, #6
 8012156:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	6a1b      	ldr	r3, [r3, #32]
 801215e:	687a      	ldr	r2, [r7, #4]
 8012160:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012164:	4611      	mov	r1, r2
 8012166:	687a      	ldr	r2, [r7, #4]
 8012168:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801216a:	6878      	ldr	r0, [r7, #4]
 801216c:	4798      	blx	r3
}
 801216e:	bf00      	nop
 8012170:	3708      	adds	r7, #8
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
	...

08012178 <ppp_input>:

/*
 * Pass the processed input packet to the appropriate handler.
 * This function and all handlers run in the context of the tcpip_thread
 */
void ppp_input(ppp_pcb *pcb, struct pbuf *pb) {
 8012178:	b580      	push	{r7, lr}
 801217a:	b086      	sub	sp, #24
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
 8012180:	6039      	str	r1, [r7, #0]
  u16_t protocol;
#if PPP_DEBUG && PPP_PROTOCOLNAME
  const char *pname;
#endif /* PPP_DEBUG && PPP_PROTOCOLNAME */
  LWIP_ASSERT("pcb->phase >= PPP_PHASE_ESTABLISH && pcb->phase <= PPP_PHASE_TERMINATE",
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012188:	2b05      	cmp	r3, #5
 801218a:	d904      	bls.n	8012196 <ppp_input+0x1e>
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012192:	2b0b      	cmp	r3, #11
 8012194:	d90b      	bls.n	80121ae <ppp_input+0x36>
 8012196:	4b4b      	ldr	r3, [pc, #300]	; (80122c4 <ppp_input+0x14c>)
 8012198:	f240 3211 	movw	r2, #785	; 0x311
 801219c:	494a      	ldr	r1, [pc, #296]	; (80122c8 <ppp_input+0x150>)
 801219e:	484b      	ldr	r0, [pc, #300]	; (80122cc <ppp_input+0x154>)
 80121a0:	f001 fc62 	bl	8013a68 <iprintf>
 80121a4:	2000      	movs	r0, #0
 80121a6:	f001 fd61 	bl	8013c6c <fflush>
 80121aa:	f001 fca6 	bl	8013afa <abort>
    pcb->phase >= PPP_PHASE_ESTABLISH && pcb->phase <= PPP_PHASE_TERMINATE);

  magic_randomize();
 80121ae:	f7ff fe31 	bl	8011e14 <magic_randomize>

  if (pb->len < 2) {
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	895b      	ldrh	r3, [r3, #10]
 80121b6:	2b01      	cmp	r3, #1
 80121b8:	d96e      	bls.n	8012298 <ppp_input+0x120>
    PPPDEBUG(LOG_ERR, ("ppp_input[%d]: packet too short\n", pcb->netif->num));
    goto drop;
  }
  protocol = (((u8_t *)pb->payload)[0] << 8) | ((u8_t*)pb->payload)[1];
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	685b      	ldr	r3, [r3, #4]
 80121be:	781b      	ldrb	r3, [r3, #0]
 80121c0:	021b      	lsls	r3, r3, #8
 80121c2:	b21a      	sxth	r2, r3
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	685b      	ldr	r3, [r3, #4]
 80121c8:	3301      	adds	r3, #1
 80121ca:	781b      	ldrb	r3, [r3, #0]
 80121cc:	b21b      	sxth	r3, r3
 80121ce:	4313      	orrs	r3, r2
 80121d0:	b21b      	sxth	r3, r3
 80121d2:	827b      	strh	r3, [r7, #18]

#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "rcvd", (unsigned char *)pb->payload, pb->len);
#endif /* PRINTPKT_SUPPORT */

  pbuf_remove_header(pb, sizeof(protocol));
 80121d4:	2102      	movs	r1, #2
 80121d6:	6838      	ldr	r0, [r7, #0]
 80121d8:	f7f3 feda 	bl	8005f90 <pbuf_remove_header>

  LINK_STATS_INC(link.recv);
 80121dc:	4b3c      	ldr	r3, [pc, #240]	; (80122d0 <ppp_input+0x158>)
 80121de:	885b      	ldrh	r3, [r3, #2]
 80121e0:	3301      	adds	r3, #1
 80121e2:	b29a      	uxth	r2, r3
 80121e4:	4b3a      	ldr	r3, [pc, #232]	; (80122d0 <ppp_input+0x158>)
 80121e6:	805a      	strh	r2, [r3, #2]
  MIB2_STATS_NETIF_ADD(pcb->netif, ifinoctets, pb->tot_len);

  /*
   * Toss all non-LCP packets unless LCP is OPEN.
   */
  if (protocol != PPP_LCP && pcb->lcp_fsm.state != PPP_FSM_OPENED) {
 80121e8:	8a7b      	ldrh	r3, [r7, #18]
 80121ea:	f24c 0221 	movw	r2, #49185	; 0xc021
 80121ee:	4293      	cmp	r3, r2
 80121f0:	d004      	beq.n	80121fc <ppp_input+0x84>
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80121f8:	2b09      	cmp	r3, #9
 80121fa:	d14f      	bne.n	801229c <ppp_input+0x124>

  /*
   * Until we get past the authentication phase, toss all packets
   * except LCP, LQR and authentication packets.
   */
  if (pcb->phase <= PPP_PHASE_AUTHENTICATE
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012202:	2b07      	cmp	r3, #7
 8012204:	d809      	bhi.n	801221a <ppp_input+0xa2>
   && !(protocol == PPP_LCP
 8012206:	8a7b      	ldrh	r3, [r7, #18]
 8012208:	f24c 0221 	movw	r2, #49185	; 0xc021
 801220c:	4293      	cmp	r3, r2
 801220e:	d004      	beq.n	801221a <ppp_input+0xa2>
 8012210:	8a7b      	ldrh	r3, [r7, #18]
 8012212:	f24c 0223 	movw	r2, #49187	; 0xc023
 8012216:	4293      	cmp	r3, r2
 8012218:	d142      	bne.n	80122a0 <ppp_input+0x128>
      pbuf_remove_header(pb, 2);
    }
  }
#endif /* CCP_SUPPORT */

  switch (protocol) {
 801221a:	8a7b      	ldrh	r3, [r7, #18]
 801221c:	2b21      	cmp	r3, #33	; 0x21
 801221e:	d106      	bne.n	801222e <ppp_input+0xb6>

#if PPP_IPV4_SUPPORT
    case PPP_IP:            /* Internet Protocol */
      PPPDEBUG(LOG_INFO, ("ppp_input[%d]: ip in pbuf len=%d\n", pcb->netif->num, pb->tot_len));
      ip4_input(pb, pcb->netif);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012224:	4619      	mov	r1, r3
 8012226:	6838      	ldr	r0, [r7, #0]
 8012228:	f7f2 f808 	bl	800423c <ip4_input>
      return;
 801222c:	e046      	b.n	80122bc <ppp_input+0x144>
      const struct protent *protp;

      /*
       * Upcall the proper protocol input routine.
       */
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 801222e:	2300      	movs	r3, #0
 8012230:	617b      	str	r3, [r7, #20]
 8012232:	e019      	b.n	8012268 <ppp_input+0xf0>
        if (protp->protocol == protocol) {
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	881b      	ldrh	r3, [r3, #0]
 8012238:	8a7a      	ldrh	r2, [r7, #18]
 801223a:	429a      	cmp	r2, r3
 801223c:	d111      	bne.n	8012262 <ppp_input+0xea>
          pb = pbuf_coalesce(pb, PBUF_RAW);
 801223e:	2100      	movs	r1, #0
 8012240:	6838      	ldr	r0, [r7, #0]
 8012242:	f7f4 fa64 	bl	800670e <pbuf_coalesce>
 8012246:	6038      	str	r0, [r7, #0]
          if (pb->next != NULL) {
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d129      	bne.n	80122a4 <ppp_input+0x12c>
            PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_coalesce failed), len=%d\n", pcb->netif->num, pb->tot_len));
            goto drop;
          }
          (*protp->input)(pcb, (u8_t*)pb->payload, pb->len);
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	689b      	ldr	r3, [r3, #8]
 8012254:	683a      	ldr	r2, [r7, #0]
 8012256:	6851      	ldr	r1, [r2, #4]
 8012258:	683a      	ldr	r2, [r7, #0]
 801225a:	8952      	ldrh	r2, [r2, #10]
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	4798      	blx	r3
          goto out;
 8012260:	e029      	b.n	80122b6 <ppp_input+0x13e>
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 8012262:	697b      	ldr	r3, [r7, #20]
 8012264:	3301      	adds	r3, #1
 8012266:	617b      	str	r3, [r7, #20]
 8012268:	4a1a      	ldr	r2, [pc, #104]	; (80122d4 <ppp_input+0x15c>)
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012270:	60fb      	str	r3, [r7, #12]
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d1dd      	bne.n	8012234 <ppp_input+0xbc>
      } else
#endif /* PPP_PROTOCOLNAME */
        ppp_warn(("Unsupported protocol 0x%x received", protocol));
#endif /* PPP_DEBUG */

      if (pbuf_add_header(pb, sizeof(protocol))) {
 8012278:	2102      	movs	r1, #2
 801227a:	6838      	ldr	r0, [r7, #0]
 801227c:	f7f3 fe78 	bl	8005f70 <pbuf_add_header>
 8012280:	4603      	mov	r3, r0
 8012282:	2b00      	cmp	r3, #0
 8012284:	d110      	bne.n	80122a8 <ppp_input+0x130>
        PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_add_header failed)\n", pcb->netif->num));
        goto drop;
      }
      lcp_sprotrej(pcb, (u8_t*)pb->payload, pb->len);
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	6859      	ldr	r1, [r3, #4]
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	895b      	ldrh	r3, [r3, #10]
 801228e:	461a      	mov	r2, r3
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f7fd feb0 	bl	800fff6 <lcp_sprotrej>
    }
    break;
 8012296:	e008      	b.n	80122aa <ppp_input+0x132>
    goto drop;
 8012298:	bf00      	nop
 801229a:	e006      	b.n	80122aa <ppp_input+0x132>
    goto drop;
 801229c:	bf00      	nop
 801229e:	e004      	b.n	80122aa <ppp_input+0x132>
    goto drop;
 80122a0:	bf00      	nop
 80122a2:	e002      	b.n	80122aa <ppp_input+0x132>
            goto drop;
 80122a4:	bf00      	nop
 80122a6:	e000      	b.n	80122aa <ppp_input+0x132>
        goto drop;
 80122a8:	bf00      	nop
  }

drop:
  LINK_STATS_INC(link.drop);
 80122aa:	4b09      	ldr	r3, [pc, #36]	; (80122d0 <ppp_input+0x158>)
 80122ac:	88db      	ldrh	r3, [r3, #6]
 80122ae:	3301      	adds	r3, #1
 80122b0:	b29a      	uxth	r2, r3
 80122b2:	4b07      	ldr	r3, [pc, #28]	; (80122d0 <ppp_input+0x158>)
 80122b4:	80da      	strh	r2, [r3, #6]
  MIB2_STATS_NETIF_INC(pcb->netif, ifindiscards);

out:
  pbuf_free(pb);
 80122b6:	6838      	ldr	r0, [r7, #0]
 80122b8:	f7f3 fec0 	bl	800603c <pbuf_free>
}
 80122bc:	3718      	adds	r7, #24
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}
 80122c2:	bf00      	nop
 80122c4:	08017860 	.word	0x08017860
 80122c8:	0801791c 	.word	0x0801791c
 80122cc:	080178a4 	.word	0x080178a4
 80122d0:	20002218 	.word	0x20002218
 80122d4:	08017c04 	.word	0x08017c04

080122d8 <ppp_write>:
 *
 * IPv4 and IPv6 packets from lwIP are sent, respectively,
 * with ppp_netif_output_ip4() and ppp_netif_output_ip6()
 * functions (which are callbacks of the netif PPP interface).
 */
err_t ppp_write(ppp_pcb *pcb, struct pbuf *p) {
 80122d8:	b580      	push	{r7, lr}
 80122da:	b082      	sub	sp, #8
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
 80122e0:	6039      	str	r1, [r7, #0]
#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "sent", (unsigned char *)p->payload+2, p->len-2);
#endif /* PRINTPKT_SUPPORT */
  return pcb->link_cb->write(pcb, pcb->link_ctx_cb, p);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	699b      	ldr	r3, [r3, #24]
 80122e6:	68db      	ldr	r3, [r3, #12]
 80122e8:	687a      	ldr	r2, [r7, #4]
 80122ea:	69d1      	ldr	r1, [r2, #28]
 80122ec:	683a      	ldr	r2, [r7, #0]
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	4798      	blx	r3
 80122f2:	4603      	mov	r3, r0
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3708      	adds	r7, #8
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}

080122fc <ppp_link_terminated>:

void ppp_link_terminated(ppp_pcb *pcb) {
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b082      	sub	sp, #8
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]\n", pcb->netif->num));
  pcb->link_cb->disconnect(pcb, pcb->link_ctx_cb);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	699b      	ldr	r3, [r3, #24]
 8012308:	685b      	ldr	r3, [r3, #4]
 801230a:	687a      	ldr	r2, [r7, #4]
 801230c:	69d2      	ldr	r2, [r2, #28]
 801230e:	4611      	mov	r1, r2
 8012310:	6878      	ldr	r0, [r7, #4]
 8012312:	4798      	blx	r3
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]: finished.\n", pcb->netif->num));
}
 8012314:	bf00      	nop
 8012316:	3708      	adds	r7, #8
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}

0801231c <new_phase>:
 */

/*
 * new_phase - signal the start of a new phase of pppd's operation.
 */
void new_phase(ppp_pcb *pcb, int p) {
 801231c:	b480      	push	{r7}
 801231e:	b083      	sub	sp, #12
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
 8012324:	6039      	str	r1, [r7, #0]
  pcb->phase = p;
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	b2da      	uxtb	r2, r3
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#if PPP_NOTIFY_PHASE
  if (pcb->notify_phase_cb != NULL) {
    pcb->notify_phase_cb(pcb, p, pcb->ctx_cb);
  }
#endif /* PPP_NOTIFY_PHASE */
}
 8012330:	bf00      	nop
 8012332:	370c      	adds	r7, #12
 8012334:	46bd      	mov	sp, r7
 8012336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233a:	4770      	bx	lr

0801233c <ppp_send_config>:

/*
 * ppp_send_config - configure the transmit-side characteristics of
 * the ppp interface.
 */
int ppp_send_config(ppp_pcb *pcb, int mtu, u32_t accm, int pcomp, int accomp) {
 801233c:	b590      	push	{r4, r7, lr}
 801233e:	b087      	sub	sp, #28
 8012340:	af02      	add	r7, sp, #8
 8012342:	60f8      	str	r0, [r7, #12]
 8012344:	60b9      	str	r1, [r7, #8]
 8012346:	607a      	str	r2, [r7, #4]
 8012348:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(mtu);

  PPPDEBUG(LOG_INFO, ("ppp_send_config[%d]\n", pcb->netif->num));

  if (pcb->link_cb->send_config) {
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	699b      	ldr	r3, [r3, #24]
 801234e:	695b      	ldr	r3, [r3, #20]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d00a      	beq.n	801236a <ppp_send_config+0x2e>
    pcb->link_cb->send_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	699b      	ldr	r3, [r3, #24]
 8012358:	695c      	ldr	r4, [r3, #20]
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	69d9      	ldr	r1, [r3, #28]
 801235e:	6a3b      	ldr	r3, [r7, #32]
 8012360:	9300      	str	r3, [sp, #0]
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	687a      	ldr	r2, [r7, #4]
 8012366:	68f8      	ldr	r0, [r7, #12]
 8012368:	47a0      	blx	r4
  }

  return 0;
 801236a:	2300      	movs	r3, #0
}
 801236c:	4618      	mov	r0, r3
 801236e:	3714      	adds	r7, #20
 8012370:	46bd      	mov	sp, r7
 8012372:	bd90      	pop	{r4, r7, pc}

08012374 <ppp_recv_config>:

/*
 * ppp_recv_config - configure the receive-side characteristics of
 * the ppp interface.
 */
int ppp_recv_config(ppp_pcb *pcb, int mru, u32_t accm, int pcomp, int accomp) {
 8012374:	b590      	push	{r4, r7, lr}
 8012376:	b087      	sub	sp, #28
 8012378:	af02      	add	r7, sp, #8
 801237a:	60f8      	str	r0, [r7, #12]
 801237c:	60b9      	str	r1, [r7, #8]
 801237e:	607a      	str	r2, [r7, #4]
 8012380:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(mru);

  PPPDEBUG(LOG_INFO, ("ppp_recv_config[%d]\n", pcb->netif->num));

  if (pcb->link_cb->recv_config) {
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	699b      	ldr	r3, [r3, #24]
 8012386:	699b      	ldr	r3, [r3, #24]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d00a      	beq.n	80123a2 <ppp_recv_config+0x2e>
    pcb->link_cb->recv_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	699b      	ldr	r3, [r3, #24]
 8012390:	699c      	ldr	r4, [r3, #24]
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	69d9      	ldr	r1, [r3, #28]
 8012396:	6a3b      	ldr	r3, [r7, #32]
 8012398:	9300      	str	r3, [sp, #0]
 801239a:	683b      	ldr	r3, [r7, #0]
 801239c:	687a      	ldr	r2, [r7, #4]
 801239e:	68f8      	ldr	r0, [r7, #12]
 80123a0:	47a0      	blx	r4
  }

  return 0;
 80123a2:	2300      	movs	r3, #0
}
 80123a4:	4618      	mov	r0, r3
 80123a6:	3714      	adds	r7, #20
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd90      	pop	{r4, r7, pc}

080123ac <sifaddr>:

#if PPP_IPV4_SUPPORT
/*
 * sifaddr - Config the interface IP addresses and netmask.
 */
int sifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr, u32_t netmask) {
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b088      	sub	sp, #32
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	60f8      	str	r0, [r7, #12]
 80123b4:	60b9      	str	r1, [r7, #8]
 80123b6:	607a      	str	r2, [r7, #4]
 80123b8:	603b      	str	r3, [r7, #0]
  ip4_addr_t ip, nm, gw;

  ip4_addr_set_u32(&ip, our_adr);
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	61fb      	str	r3, [r7, #28]
  ip4_addr_set_u32(&nm, netmask);
 80123be:	683b      	ldr	r3, [r7, #0]
 80123c0:	61bb      	str	r3, [r7, #24]
  ip4_addr_set_u32(&gw, his_adr);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	617b      	str	r3, [r7, #20]
  netif_set_addr(pcb->netif, &ip, &nm, &gw);
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80123ca:	f107 0314 	add.w	r3, r7, #20
 80123ce:	f107 0218 	add.w	r2, r7, #24
 80123d2:	f107 011c 	add.w	r1, r7, #28
 80123d6:	f7f3 fa03 	bl	80057e0 <netif_set_addr>
  return 1;
 80123da:	2301      	movs	r3, #1
}
 80123dc:	4618      	mov	r0, r3
 80123de:	3720      	adds	r7, #32
 80123e0:	46bd      	mov	sp, r7
 80123e2:	bd80      	pop	{r7, pc}

080123e4 <cifaddr>:
/********************************************************************
 *
 * cifaddr - Clear the interface IP addresses, and delete routes
 * through the interface if possible.
 */
int cifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr) {
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b084      	sub	sp, #16
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	60f8      	str	r0, [r7, #12]
 80123ec:	60b9      	str	r1, [r7, #8]
 80123ee:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(our_adr);
  LWIP_UNUSED_ARG(his_adr);

  netif_set_addr(pcb->netif, IP4_ADDR_ANY4, IP4_ADDR_BROADCAST, IP4_ADDR_ANY4);
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80123f4:	4b04      	ldr	r3, [pc, #16]	; (8012408 <cifaddr+0x24>)
 80123f6:	4a05      	ldr	r2, [pc, #20]	; (801240c <cifaddr+0x28>)
 80123f8:	4903      	ldr	r1, [pc, #12]	; (8012408 <cifaddr+0x24>)
 80123fa:	f7f3 f9f1 	bl	80057e0 <netif_set_addr>
  return 1;
 80123fe:	2301      	movs	r3, #1
}
 8012400:	4618      	mov	r0, r3
 8012402:	3710      	adds	r7, #16
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}
 8012408:	08017a40 	.word	0x08017a40
 801240c:	08017a44 	.word	0x08017a44

08012410 <sifup>:
#endif /* VJ_SUPPORT */

/*
 * sifup - Config the interface up and enable IP packets to pass.
 */
int sifup(ppp_pcb *pcb) {
 8012410:	b580      	push	{r7, lr}
 8012412:	b082      	sub	sp, #8
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
  pcb->if4_up = 1;
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801241e:	f043 0308 	orr.w	r3, r3, #8
 8012422:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  pcb->err_code = PPPERR_NONE;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2200      	movs	r2, #0
 801242a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif_set_link_up(pcb->netif);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012432:	4618      	mov	r0, r3
 8012434:	f7f3 fa8c 	bl	8005950 <netif_set_link_up>

  PPPDEBUG(LOG_DEBUG, ("sifup[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	6a1b      	ldr	r3, [r3, #32]
 801243c:	687a      	ldr	r2, [r7, #4]
 801243e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012442:	4611      	mov	r1, r2
 8012444:	687a      	ldr	r2, [r7, #4]
 8012446:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	4798      	blx	r3
  return 1;
 801244c:	2301      	movs	r3, #1
}
 801244e:	4618      	mov	r0, r3
 8012450:	3708      	adds	r7, #8
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}

08012456 <sifdown>:
/********************************************************************
 *
 * sifdown - Disable the indicated protocol and config the interface
 *           down if there are no remaining protocols.
 */
int sifdown(ppp_pcb *pcb) {
 8012456:	b580      	push	{r7, lr}
 8012458:	b082      	sub	sp, #8
 801245a:	af00      	add	r7, sp, #0
 801245c:	6078      	str	r0, [r7, #4]

  pcb->if4_up = 0;
 801245e:	687a      	ldr	r2, [r7, #4]
 8012460:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8012464:	f36f 03c3 	bfc	r3, #3, #1
 8012468:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   /* set the interface down if IPv6 is down as well */
   && !pcb->if6_up
#endif /* PPP_IPV6_SUPPORT */
  ) {
    /* make sure the netif link callback is called */
    netif_set_link_down(pcb->netif);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012470:	4618      	mov	r0, r3
 8012472:	f7f3 fa99 	bl	80059a8 <netif_set_link_down>
  }
  PPPDEBUG(LOG_DEBUG, ("sifdown[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
  return 1;
 8012476:	2301      	movs	r3, #1
}
 8012478:	4618      	mov	r0, r3
 801247a:	3708      	adds	r7, #8
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}

08012480 <get_mask>:
 * Here we scan through the system's list of interfaces, looking for
 * any non-point-to-point interfaces which might appear to be on the same
 * network as `addr'.  If we find any, we OR in their netmask to the
 * user-specified netmask.
 */
u32_t get_mask(u32_t addr) {
 8012480:	b480      	push	{r7}
 8012482:	b083      	sub	sp, #12
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
   */
  /* return mask; */
  return mask;
#endif /* 0 */
  LWIP_UNUSED_ARG(addr);
  return IPADDR_BROADCAST;
 8012488:	f04f 33ff 	mov.w	r3, #4294967295
}
 801248c:	4618      	mov	r0, r3
 801248e:	370c      	adds	r7, #12
 8012490:	46bd      	mov	sp, r7
 8012492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012496:	4770      	bx	lr

08012498 <ppp_netif_set_mtu>:
#endif /* DEMAND_SUPPORT */

/*
 * ppp_netif_set_mtu - set the MTU on the PPP network interface.
 */
void ppp_netif_set_mtu(ppp_pcb *pcb, int mtu) {
 8012498:	b480      	push	{r7}
 801249a:	b083      	sub	sp, #12
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
 80124a0:	6039      	str	r1, [r7, #0]

  pcb->netif->mtu = mtu;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124a6:	683a      	ldr	r2, [r7, #0]
 80124a8:	b292      	uxth	r2, r2
 80124aa:	841a      	strh	r2, [r3, #32]
#if PPP_IPV6_SUPPORT && LWIP_ND6_ALLOW_RA_UPDATES
  pcb->netif->mtu6 = mtu;
#endif /* PPP_IPV6_SUPPORT && LWIP_ND6_ALLOW_RA_UPDATES */
  PPPDEBUG(LOG_INFO, ("ppp_netif_set_mtu[%d]: mtu=%d\n", pcb->netif->num, mtu));
}
 80124ac:	bf00      	nop
 80124ae:	370c      	adds	r7, #12
 80124b0:	46bd      	mov	sp, r7
 80124b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b6:	4770      	bx	lr

080124b8 <pppos_create>:
 *
 * Return 0 on success, an error code on failure.
 */
ppp_pcb *pppos_create(struct netif *pppif, pppos_output_cb_fn output_cb,
       ppp_link_status_cb_fn link_status_cb, void *ctx_cb)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b088      	sub	sp, #32
 80124bc:	af02      	add	r7, sp, #8
 80124be:	60f8      	str	r0, [r7, #12]
 80124c0:	60b9      	str	r1, [r7, #8]
 80124c2:	607a      	str	r2, [r7, #4]
 80124c4:	603b      	str	r3, [r7, #0]
  pppos_pcb *pppos;
  ppp_pcb *ppp;
  LWIP_ASSERT_CORE_LOCKED();

  pppos = (pppos_pcb *)LWIP_MEMPOOL_ALLOC(PPPOS_PCB);
 80124c6:	4815      	ldr	r0, [pc, #84]	; (801251c <pppos_create+0x64>)
 80124c8:	f7f2 ff4c 	bl	8005364 <memp_malloc_pool>
 80124cc:	6178      	str	r0, [r7, #20]
  if (pppos == NULL) {
 80124ce:	697b      	ldr	r3, [r7, #20]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d101      	bne.n	80124d8 <pppos_create+0x20>
    return NULL;
 80124d4:	2300      	movs	r3, #0
 80124d6:	e01d      	b.n	8012514 <pppos_create+0x5c>
  }

  ppp = ppp_new(pppif, &pppos_callbacks, pppos, link_status_cb, ctx_cb);
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	9300      	str	r3, [sp, #0]
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	697a      	ldr	r2, [r7, #20]
 80124e0:	490f      	ldr	r1, [pc, #60]	; (8012520 <pppos_create+0x68>)
 80124e2:	68f8      	ldr	r0, [r7, #12]
 80124e4:	f7ff fd90 	bl	8012008 <ppp_new>
 80124e8:	6138      	str	r0, [r7, #16]
  if (ppp == NULL) {
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d105      	bne.n	80124fc <pppos_create+0x44>
    LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
 80124f0:	6979      	ldr	r1, [r7, #20]
 80124f2:	480a      	ldr	r0, [pc, #40]	; (801251c <pppos_create+0x64>)
 80124f4:	f7f2 ffa2 	bl	800543c <memp_free_pool>
    return NULL;
 80124f8:	2300      	movs	r3, #0
 80124fa:	e00b      	b.n	8012514 <pppos_create+0x5c>
  }

  memset(pppos, 0, sizeof(pppos_pcb));
 80124fc:	2260      	movs	r2, #96	; 0x60
 80124fe:	2100      	movs	r1, #0
 8012500:	6978      	ldr	r0, [r7, #20]
 8012502:	f001 fcd8 	bl	8013eb6 <memset>
  pppos->ppp = ppp;
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	693a      	ldr	r2, [r7, #16]
 801250a:	601a      	str	r2, [r3, #0]
  pppos->output_cb = output_cb;
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	68ba      	ldr	r2, [r7, #8]
 8012510:	605a      	str	r2, [r3, #4]
  return ppp;
 8012512:	693b      	ldr	r3, [r7, #16]
}
 8012514:	4618      	mov	r0, r3
 8012516:	3718      	adds	r7, #24
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}
 801251c:	08017c14 	.word	0x08017c14
 8012520:	08017c28 	.word	0x08017c28

08012524 <pppos_write>:

/* Called by PPP core */
static err_t
pppos_write(ppp_pcb *ppp, void *ctx, struct pbuf *p)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b08c      	sub	sp, #48	; 0x30
 8012528:	af02      	add	r7, sp, #8
 801252a:	60f8      	str	r0, [r7, #12]
 801252c:	60b9      	str	r1, [r7, #8]
 801252e:	607a      	str	r2, [r7, #4]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	61fb      	str	r3, [r7, #28]
  err_t err;
  LWIP_UNUSED_ARG(ppp);

  /* Grab an output buffer. Assume PBUF_POOL_BUFSIZE is an acceptable
   * chunk size for Tx as well. */
  nb = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_RAM);
 8012534:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012538:	f44f 7100 	mov.w	r1, #512	; 0x200
 801253c:	2000      	movs	r0, #0
 801253e:	f7f3 fb13 	bl	8005b68 <pbuf_alloc>
 8012542:	61b8      	str	r0, [r7, #24]
  if (nb == NULL) {
 8012544:	69bb      	ldr	r3, [r7, #24]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d111      	bne.n	801256e <pppos_write+0x4a>
    PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: alloc fail\n", ppp->netif->num));
    LINK_STATS_INC(link.memerr);
 801254a:	4b34      	ldr	r3, [pc, #208]	; (801261c <pppos_write+0xf8>)
 801254c:	899b      	ldrh	r3, [r3, #12]
 801254e:	3301      	adds	r3, #1
 8012550:	b29a      	uxth	r2, r3
 8012552:	4b32      	ldr	r3, [pc, #200]	; (801261c <pppos_write+0xf8>)
 8012554:	819a      	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
 8012556:	4b31      	ldr	r3, [pc, #196]	; (801261c <pppos_write+0xf8>)
 8012558:	88db      	ldrh	r3, [r3, #6]
 801255a:	3301      	adds	r3, #1
 801255c:	b29a      	uxth	r2, r3
 801255e:	4b2f      	ldr	r3, [pc, #188]	; (801261c <pppos_write+0xf8>)
 8012560:	80da      	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
    pbuf_free(p);
 8012562:	6878      	ldr	r0, [r7, #4]
 8012564:	f7f3 fd6a 	bl	800603c <pbuf_free>
    return ERR_MEM;
 8012568:	f04f 33ff 	mov.w	r3, #4294967295
 801256c:	e051      	b.n	8012612 <pppos_write+0xee>
  }

  /* Empty the buffer */
  nb->len = 0;
 801256e:	69bb      	ldr	r3, [r7, #24]
 8012570:	2200      	movs	r2, #0
 8012572:	815a      	strh	r2, [r3, #10]
  /* Set nb->tot_len to actual payload length */
  nb->tot_len = p->len;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	895a      	ldrh	r2, [r3, #10]
 8012578:	69bb      	ldr	r3, [r7, #24]
 801257a:	811a      	strh	r2, [r3, #8]

  /* If the link has been idle, we'll send a fresh flag character to
   * flush any noise. */
  err = ERR_OK;
 801257c:	2300      	movs	r3, #0
 801257e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
 8012582:	f7ef fc55 	bl	8001e30 <sys_now>
 8012586:	4602      	mov	r2, r0
 8012588:	69fb      	ldr	r3, [r7, #28]
 801258a:	689b      	ldr	r3, [r3, #8]
 801258c:	1ad3      	subs	r3, r2, r3
 801258e:	2b63      	cmp	r3, #99	; 0x63
 8012590:	d90d      	bls.n	80125ae <pppos_write+0x8a>
    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 8012592:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 8012596:	2300      	movs	r3, #0
 8012598:	9301      	str	r3, [sp, #4]
 801259a:	2300      	movs	r3, #0
 801259c:	9300      	str	r3, [sp, #0]
 801259e:	237e      	movs	r3, #126	; 0x7e
 80125a0:	69ba      	ldr	r2, [r7, #24]
 80125a2:	69f8      	ldr	r0, [r7, #28]
 80125a4:	f000 fbf0 	bl	8012d88 <pppos_output_append>
 80125a8:	4603      	mov	r3, r0
 80125aa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  }

  /* Load output buffer. */
  fcs_out = PPP_INITFCS;
 80125ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125b2:	82fb      	strh	r3, [r7, #22]
  s = (u8_t*)p->payload;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	627b      	str	r3, [r7, #36]	; 0x24
  n = p->len;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	895b      	ldrh	r3, [r3, #10]
 80125be:	847b      	strh	r3, [r7, #34]	; 0x22
  while (n-- > 0) {
 80125c0:	e012      	b.n	80125e8 <pppos_write+0xc4>
    err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 80125c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c4:	1c5a      	adds	r2, r3, #1
 80125c6:	627a      	str	r2, [r7, #36]	; 0x24
 80125c8:	781a      	ldrb	r2, [r3, #0]
 80125ca:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 80125ce:	f107 0316 	add.w	r3, r7, #22
 80125d2:	9301      	str	r3, [sp, #4]
 80125d4:	2301      	movs	r3, #1
 80125d6:	9300      	str	r3, [sp, #0]
 80125d8:	4613      	mov	r3, r2
 80125da:	69ba      	ldr	r2, [r7, #24]
 80125dc:	69f8      	ldr	r0, [r7, #28]
 80125de:	f000 fbd3 	bl	8012d88 <pppos_output_append>
 80125e2:	4603      	mov	r3, r0
 80125e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  while (n-- > 0) {
 80125e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80125ea:	1e5a      	subs	r2, r3, #1
 80125ec:	847a      	strh	r2, [r7, #34]	; 0x22
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d1e7      	bne.n	80125c2 <pppos_write+0x9e>
  }

  err = pppos_output_last(pppos, err, nb, &fcs_out);
 80125f2:	f107 0316 	add.w	r3, r7, #22
 80125f6:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 80125fa:	69ba      	ldr	r2, [r7, #24]
 80125fc:	69f8      	ldr	r0, [r7, #28]
 80125fe:	f000 fc49 	bl	8012e94 <pppos_output_last>
 8012602:	4603      	mov	r3, r0
 8012604:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (err == ERR_OK) {
    PPPDEBUG(LOG_INFO, ("pppos_write[%d]: len=%d\n", ppp->netif->num, p->len));
  } else {
    PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: output failed len=%d\n", ppp->netif->num, p->len));
  }
  pbuf_free(p);
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f7f3 fd17 	bl	800603c <pbuf_free>
  return err;
 801260e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
}
 8012612:	4618      	mov	r0, r3
 8012614:	3728      	adds	r7, #40	; 0x28
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}
 801261a:	bf00      	nop
 801261c:	20002218 	.word	0x20002218

08012620 <pppos_netif_output>:

/* Called by PPP core */
static err_t
pppos_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *pb, u16_t protocol)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b08c      	sub	sp, #48	; 0x30
 8012624:	af02      	add	r7, sp, #8
 8012626:	60f8      	str	r0, [r7, #12]
 8012628:	60b9      	str	r1, [r7, #8]
 801262a:	607a      	str	r2, [r7, #4]
 801262c:	807b      	strh	r3, [r7, #2]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	61bb      	str	r3, [r7, #24]
  err_t err;
  LWIP_UNUSED_ARG(ppp);

  /* Grab an output buffer. Assume PBUF_POOL_BUFSIZE is an acceptable
   * chunk size for Tx as well. */
  nb = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_RAM);
 8012632:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012636:	f44f 7100 	mov.w	r1, #512	; 0x200
 801263a:	2000      	movs	r0, #0
 801263c:	f7f3 fa94 	bl	8005b68 <pbuf_alloc>
 8012640:	6178      	str	r0, [r7, #20]
  if (nb == NULL) {
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d10e      	bne.n	8012666 <pppos_netif_output+0x46>
    PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: alloc fail\n", ppp->netif->num));
    LINK_STATS_INC(link.memerr);
 8012648:	4b5f      	ldr	r3, [pc, #380]	; (80127c8 <pppos_netif_output+0x1a8>)
 801264a:	899b      	ldrh	r3, [r3, #12]
 801264c:	3301      	adds	r3, #1
 801264e:	b29a      	uxth	r2, r3
 8012650:	4b5d      	ldr	r3, [pc, #372]	; (80127c8 <pppos_netif_output+0x1a8>)
 8012652:	819a      	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
 8012654:	4b5c      	ldr	r3, [pc, #368]	; (80127c8 <pppos_netif_output+0x1a8>)
 8012656:	88db      	ldrh	r3, [r3, #6]
 8012658:	3301      	adds	r3, #1
 801265a:	b29a      	uxth	r2, r3
 801265c:	4b5a      	ldr	r3, [pc, #360]	; (80127c8 <pppos_netif_output+0x1a8>)
 801265e:	80da      	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
    return ERR_MEM;
 8012660:	f04f 33ff 	mov.w	r3, #4294967295
 8012664:	e0ac      	b.n	80127c0 <pppos_netif_output+0x1a0>
  }

  /* Empty the buffer */
  nb->len = 0;
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	2200      	movs	r2, #0
 801266a:	815a      	strh	r2, [r3, #10]
  /* Set nb->tot_len to actual payload length */
  nb->tot_len = pb->tot_len;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	891a      	ldrh	r2, [r3, #8]
 8012670:	697b      	ldr	r3, [r7, #20]
 8012672:	811a      	strh	r2, [r3, #8]

  /* If the link has been idle, we'll send a fresh flag character to
   * flush any noise. */
  err = ERR_OK;
 8012674:	2300      	movs	r3, #0
 8012676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
 801267a:	f7ef fbd9 	bl	8001e30 <sys_now>
 801267e:	4602      	mov	r2, r0
 8012680:	69bb      	ldr	r3, [r7, #24]
 8012682:	689b      	ldr	r3, [r3, #8]
 8012684:	1ad3      	subs	r3, r2, r3
 8012686:	2b63      	cmp	r3, #99	; 0x63
 8012688:	d90d      	bls.n	80126a6 <pppos_netif_output+0x86>
    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 801268a:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 801268e:	2300      	movs	r3, #0
 8012690:	9301      	str	r3, [sp, #4]
 8012692:	2300      	movs	r3, #0
 8012694:	9300      	str	r3, [sp, #0]
 8012696:	237e      	movs	r3, #126	; 0x7e
 8012698:	697a      	ldr	r2, [r7, #20]
 801269a:	69b8      	ldr	r0, [r7, #24]
 801269c:	f000 fb74 	bl	8012d88 <pppos_output_append>
 80126a0:	4603      	mov	r3, r0
 80126a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }

  fcs_out = PPP_INITFCS;
 80126a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80126aa:	827b      	strh	r3, [r7, #18]
  if (!pppos->accomp) {
 80126ac:	69bb      	ldr	r3, [r7, #24]
 80126ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80126b2:	f003 0304 	and.w	r3, r3, #4
 80126b6:	b2db      	uxtb	r3, r3
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d11d      	bne.n	80126f8 <pppos_netif_output+0xd8>
    err = pppos_output_append(pppos, err,  nb, PPP_ALLSTATIONS, 1, &fcs_out);
 80126bc:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 80126c0:	f107 0312 	add.w	r3, r7, #18
 80126c4:	9301      	str	r3, [sp, #4]
 80126c6:	2301      	movs	r3, #1
 80126c8:	9300      	str	r3, [sp, #0]
 80126ca:	23ff      	movs	r3, #255	; 0xff
 80126cc:	697a      	ldr	r2, [r7, #20]
 80126ce:	69b8      	ldr	r0, [r7, #24]
 80126d0:	f000 fb5a 	bl	8012d88 <pppos_output_append>
 80126d4:	4603      	mov	r3, r0
 80126d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    err = pppos_output_append(pppos, err,  nb, PPP_UI, 1, &fcs_out);
 80126da:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 80126de:	f107 0312 	add.w	r3, r7, #18
 80126e2:	9301      	str	r3, [sp, #4]
 80126e4:	2301      	movs	r3, #1
 80126e6:	9300      	str	r3, [sp, #0]
 80126e8:	2303      	movs	r3, #3
 80126ea:	697a      	ldr	r2, [r7, #20]
 80126ec:	69b8      	ldr	r0, [r7, #24]
 80126ee:	f000 fb4b 	bl	8012d88 <pppos_output_append>
 80126f2:	4603      	mov	r3, r0
 80126f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
  if (!pppos->pcomp || protocol > 0xFF) {
 80126f8:	69bb      	ldr	r3, [r7, #24]
 80126fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80126fe:	f003 0302 	and.w	r3, r3, #2
 8012702:	b2db      	uxtb	r3, r3
 8012704:	2b00      	cmp	r3, #0
 8012706:	d002      	beq.n	801270e <pppos_netif_output+0xee>
 8012708:	887b      	ldrh	r3, [r7, #2]
 801270a:	2bff      	cmp	r3, #255	; 0xff
 801270c:	d912      	bls.n	8012734 <pppos_netif_output+0x114>
    err = pppos_output_append(pppos, err,  nb, (protocol >> 8) & 0xFF, 1, &fcs_out);
 801270e:	887b      	ldrh	r3, [r7, #2]
 8012710:	0a1b      	lsrs	r3, r3, #8
 8012712:	b29b      	uxth	r3, r3
 8012714:	b2da      	uxtb	r2, r3
 8012716:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 801271a:	f107 0312 	add.w	r3, r7, #18
 801271e:	9301      	str	r3, [sp, #4]
 8012720:	2301      	movs	r3, #1
 8012722:	9300      	str	r3, [sp, #0]
 8012724:	4613      	mov	r3, r2
 8012726:	697a      	ldr	r2, [r7, #20]
 8012728:	69b8      	ldr	r0, [r7, #24]
 801272a:	f000 fb2d 	bl	8012d88 <pppos_output_append>
 801272e:	4603      	mov	r3, r0
 8012730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
  err = pppos_output_append(pppos, err,  nb, protocol & 0xFF, 1, &fcs_out);
 8012734:	887b      	ldrh	r3, [r7, #2]
 8012736:	b2da      	uxtb	r2, r3
 8012738:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 801273c:	f107 0312 	add.w	r3, r7, #18
 8012740:	9301      	str	r3, [sp, #4]
 8012742:	2301      	movs	r3, #1
 8012744:	9300      	str	r3, [sp, #0]
 8012746:	4613      	mov	r3, r2
 8012748:	697a      	ldr	r2, [r7, #20]
 801274a:	69b8      	ldr	r0, [r7, #24]
 801274c:	f000 fb1c 	bl	8012d88 <pppos_output_append>
 8012750:	4603      	mov	r3, r0
 8012752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Load packet. */
  for(p = pb; p; p = p->next) {
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	627b      	str	r3, [r7, #36]	; 0x24
 801275a:	e021      	b.n	80127a0 <pppos_netif_output+0x180>
    u16_t n = p->len;
 801275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801275e:	895b      	ldrh	r3, [r3, #10]
 8012760:	843b      	strh	r3, [r7, #32]
    u8_t *s = (u8_t*)p->payload;
 8012762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012764:	685b      	ldr	r3, [r3, #4]
 8012766:	61fb      	str	r3, [r7, #28]

    while (n-- > 0) {
 8012768:	e012      	b.n	8012790 <pppos_netif_output+0x170>
      err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 801276a:	69fb      	ldr	r3, [r7, #28]
 801276c:	1c5a      	adds	r2, r3, #1
 801276e:	61fa      	str	r2, [r7, #28]
 8012770:	781a      	ldrb	r2, [r3, #0]
 8012772:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8012776:	f107 0312 	add.w	r3, r7, #18
 801277a:	9301      	str	r3, [sp, #4]
 801277c:	2301      	movs	r3, #1
 801277e:	9300      	str	r3, [sp, #0]
 8012780:	4613      	mov	r3, r2
 8012782:	697a      	ldr	r2, [r7, #20]
 8012784:	69b8      	ldr	r0, [r7, #24]
 8012786:	f000 faff 	bl	8012d88 <pppos_output_append>
 801278a:	4603      	mov	r3, r0
 801278c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while (n-- > 0) {
 8012790:	8c3b      	ldrh	r3, [r7, #32]
 8012792:	1e5a      	subs	r2, r3, #1
 8012794:	843a      	strh	r2, [r7, #32]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d1e7      	bne.n	801276a <pppos_netif_output+0x14a>
  for(p = pb; p; p = p->next) {
 801279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	627b      	str	r3, [r7, #36]	; 0x24
 80127a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d1da      	bne.n	801275c <pppos_netif_output+0x13c>
    }
  }

  err = pppos_output_last(pppos, err, nb, &fcs_out);
 80127a6:	f107 0312 	add.w	r3, r7, #18
 80127aa:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 80127ae:	697a      	ldr	r2, [r7, #20]
 80127b0:	69b8      	ldr	r0, [r7, #24]
 80127b2:	f000 fb6f 	bl	8012e94 <pppos_output_last>
 80127b6:	4603      	mov	r3, r0
 80127b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err == ERR_OK) {
    PPPDEBUG(LOG_INFO, ("pppos_netif_output[%d]: proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
  } else {
    PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: output failed proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
  }
  return err;
 80127bc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	3728      	adds	r7, #40	; 0x28
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}
 80127c8:	20002218 	.word	0x20002218

080127cc <pppos_connect>:

static void
pppos_connect(ppp_pcb *ppp, void *ctx)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b084      	sub	sp, #16
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 80127d6:	683b      	ldr	r3, [r7, #0]
 80127d8:	60fb      	str	r3, [r7, #12]
  /* input pbuf left over from last session? */
  pppos_input_free_current_packet(pppos);
#endif /* PPP_INPROC_IRQ_SAFE */

  /* reset PPPoS control block to its initial state */
  memset(&pppos->last_xmit, 0, sizeof(pppos_pcb) - offsetof(pppos_pcb, last_xmit));
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	3308      	adds	r3, #8
 80127de:	2258      	movs	r2, #88	; 0x58
 80127e0:	2100      	movs	r1, #0
 80127e2:	4618      	mov	r0, r3
 80127e4:	f001 fb67 	bl	8013eb6 <memset>

  /*
   * Default the in and out accm so that escape and flag characters
   * are always escaped.
   */
  pppos->in_accm[15] = 0x60; /* no need to protect since RX is not running */
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	2260      	movs	r2, #96	; 0x60
 80127ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  pppos->out_accm[15] = 0x60;
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	2260      	movs	r2, #96	; 0x60
 80127f4:	76da      	strb	r2, [r3, #27]
  PPPOS_PROTECT(lev);
  pppos->open = 1;
 80127f6:	68fa      	ldr	r2, [r7, #12]
 80127f8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80127fc:	f043 0301 	orr.w	r3, r3, #1
 8012800:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

  /*
   * Start the connection and handle incoming events (packet or timeout).
   */
  PPPDEBUG(LOG_INFO, ("pppos_connect: unit %d: connecting\n", ppp->netif->num));
  ppp_start(ppp); /* notify upper layers */
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f7ff fc85 	bl	8012114 <ppp_start>
}
 801280a:	bf00      	nop
 801280c:	3710      	adds	r7, #16
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}

08012812 <pppos_disconnect>:
}
#endif /* PPP_SERVER */

static void
pppos_disconnect(ppp_pcb *ppp, void *ctx)
{
 8012812:	b580      	push	{r7, lr}
 8012814:	b084      	sub	sp, #16
 8012816:	af00      	add	r7, sp, #0
 8012818:	6078      	str	r0, [r7, #4]
 801281a:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 801281c:	683b      	ldr	r3, [r7, #0]
 801281e:	60fb      	str	r3, [r7, #12]
  PPPOS_DECL_PROTECT(lev);

  PPPOS_PROTECT(lev);
  pppos->open = 0;
 8012820:	68fa      	ldr	r2, [r7, #12]
 8012822:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8012826:	f36f 0300 	bfc	r3, #0, #1
 801282a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
   * pppos_input_free_current_packet() here because
   * rx IRQ might still call pppos_input().
   */
#if !PPP_INPROC_IRQ_SAFE
  /* input pbuf left ? */
  pppos_input_free_current_packet(pppos);
 801282e:	68f8      	ldr	r0, [r7, #12]
 8012830:	f000 fa70 	bl	8012d14 <pppos_input_free_current_packet>
#endif /* !PPP_INPROC_IRQ_SAFE */

  ppp_link_end(ppp); /* notify upper layers */
 8012834:	6878      	ldr	r0, [r7, #4]
 8012836:	f7ff fc7f 	bl	8012138 <ppp_link_end>
}
 801283a:	bf00      	nop
 801283c:	3710      	adds	r7, #16
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}
	...

08012844 <pppos_destroy>:

static err_t
pppos_destroy(ppp_pcb *ppp, void *ctx)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b084      	sub	sp, #16
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	60fb      	str	r3, [r7, #12]
#if PPP_INPROC_IRQ_SAFE
  /* input pbuf left ? */
  pppos_input_free_current_packet(pppos);
#endif /* PPP_INPROC_IRQ_SAFE */

  LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
 8012852:	68f9      	ldr	r1, [r7, #12]
 8012854:	4803      	ldr	r0, [pc, #12]	; (8012864 <pppos_destroy+0x20>)
 8012856:	f7f2 fdf1 	bl	800543c <memp_free_pool>
  return ERR_OK;
 801285a:	2300      	movs	r3, #0
}
 801285c:	4618      	mov	r0, r3
 801285e:	3710      	adds	r7, #16
 8012860:	46bd      	mov	sp, r7
 8012862:	bd80      	pop	{r7, pc}
 8012864:	08017c14 	.word	0x08017c14

08012868 <pppos_input>:
 * @param s received data
 * @param l length of received data
 */
void
pppos_input(ppp_pcb *ppp, const void *s, int l)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b08c      	sub	sp, #48	; 0x30
 801286c:	af00      	add	r7, sp, #0
 801286e:	60f8      	str	r0, [r7, #12]
 8012870:	60b9      	str	r1, [r7, #8]
 8012872:	607a      	str	r2, [r7, #4]
  pppos_pcb *pppos = (pppos_pcb *)ppp->link_ctx_cb;
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	69db      	ldr	r3, [r3, #28]
 8012878:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *next_pbuf;
  const u8_t *s_u8 = (const u8_t *)s;
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Don't even bother parsing data if we are disconnected.
   * Added to that, ppp_input must never be called if the upper layer is down.
   */
  PPPOS_PROTECT(lev);
  if (!pppos->open) {
 801287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012880:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012884:	f003 0301 	and.w	r3, r3, #1
 8012888:	b2db      	uxtb	r3, r3
 801288a:	2b00      	cmp	r3, #0
 801288c:	f000 81d9 	beq.w	8012c42 <pppos_input+0x3da>
    return;
  }
  PPPOS_UNPROTECT(lev);

  PPPDEBUG(LOG_DEBUG, ("pppos_input[%d]: got %d bytes\n", ppp->netif->num, l));
  while (l-- > 0) {
 8012890:	e1d0      	b.n	8012c34 <pppos_input+0x3cc>
    cur_char = *s_u8++;
 8012892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012894:	1c5a      	adds	r2, r3, #1
 8012896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012898:	781b      	ldrb	r3, [r3, #0]
 801289a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    PPPOS_PROTECT(lev);
    escaped = ESCAPE_P(pppos->in_accm, cur_char);
 801289e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80128a2:	08db      	lsrs	r3, r3, #3
 80128a4:	b2db      	uxtb	r3, r3
 80128a6:	461a      	mov	r2, r3
 80128a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128aa:	4413      	add	r3, r2
 80128ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80128b0:	b25a      	sxtb	r2, r3
 80128b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80128b6:	f003 0307 	and.w	r3, r3, #7
 80128ba:	2101      	movs	r1, #1
 80128bc:	fa01 f303 	lsl.w	r3, r1, r3
 80128c0:	b25b      	sxtb	r3, r3
 80128c2:	4013      	ands	r3, r2
 80128c4:	b25b      	sxtb	r3, r3
 80128c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    PPPOS_UNPROTECT(lev);

    /* Handle special characters. */
    if (escaped) {
 80128ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	f000 80a7 	beq.w	8012a22 <pppos_input+0x1ba>
      /* Check for escape sequences. */
      /* XXX Note that this does not handle an escaped 0x5d character which
       * would appear as an escape character.  Since this is an ASCII ']'
       * and there is no reason that I know of to escape it, I won't complicate
       * the code to handle this case. GLL */
      if (cur_char == PPP_ESCAPE) {
 80128d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80128d8:	2b7d      	cmp	r3, #125	; 0x7d
 80128da:	d104      	bne.n	80128e6 <pppos_input+0x7e>
        pppos->in_escaped = 1;
 80128dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128de:	2201      	movs	r2, #1
 80128e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80128e4:	e1a6      	b.n	8012c34 <pppos_input+0x3cc>
      /* Check for the flag character. */
      } else if (cur_char == PPP_FLAG) {
 80128e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80128ea:	2b7e      	cmp	r3, #126	; 0x7e
 80128ec:	f040 81a2 	bne.w	8012c34 <pppos_input+0x3cc>
        /* If this is just an extra flag character, ignore it. */
        if (pppos->in_state <= PDADDRESS) {
 80128f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80128f6:	2b01      	cmp	r3, #1
 80128f8:	f240 8085 	bls.w	8012a06 <pppos_input+0x19e>
          /* ignore it */;
        /* If we haven't received the packet header, drop what has come in. */
        } else if (pppos->in_state < PDDATA) {
 80128fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128fe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8012902:	2b04      	cmp	r3, #4
 8012904:	d809      	bhi.n	801291a <pppos_input+0xb2>
          PPPDEBUG(LOG_WARNING,
                   ("pppos_input[%d]: Dropping incomplete packet %d\n",
                    ppp->netif->num, pppos->in_state));
          LINK_STATS_INC(link.lenerr);
 8012906:	4ba5      	ldr	r3, [pc, #660]	; (8012b9c <pppos_input+0x334>)
 8012908:	895b      	ldrh	r3, [r3, #10]
 801290a:	3301      	adds	r3, #1
 801290c:	b29a      	uxth	r2, r3
 801290e:	4ba3      	ldr	r3, [pc, #652]	; (8012b9c <pppos_input+0x334>)
 8012910:	815a      	strh	r2, [r3, #10]
          pppos_input_drop(pppos);
 8012912:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012914:	f000 fa24 	bl	8012d60 <pppos_input_drop>
 8012918:	e075      	b.n	8012a06 <pppos_input+0x19e>
        /* If the fcs is invalid, drop the packet. */
        } else if (pppos->in_fcs != PPP_GOODFCS) {
 801291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012920:	f24f 02b8 	movw	r2, #61624	; 0xf0b8
 8012924:	4293      	cmp	r3, r2
 8012926:	d009      	beq.n	801293c <pppos_input+0xd4>
          PPPDEBUG(LOG_INFO,
                   ("pppos_input[%d]: Dropping bad fcs 0x%"X16_F" proto=0x%"X16_F"\n",
                    ppp->netif->num, pppos->in_fcs, pppos->in_protocol));
          /* Note: If you get lots of these, check for UART frame errors or try different baud rate */
          LINK_STATS_INC(link.chkerr);
 8012928:	4b9c      	ldr	r3, [pc, #624]	; (8012b9c <pppos_input+0x334>)
 801292a:	891b      	ldrh	r3, [r3, #8]
 801292c:	3301      	adds	r3, #1
 801292e:	b29a      	uxth	r2, r3
 8012930:	4b9a      	ldr	r3, [pc, #616]	; (8012b9c <pppos_input+0x334>)
 8012932:	811a      	strh	r2, [r3, #8]
          pppos_input_drop(pppos);
 8012934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012936:	f000 fa13 	bl	8012d60 <pppos_input_drop>
 801293a:	e064      	b.n	8012a06 <pppos_input+0x19e>
        } else if (!pppos->in_tail) {
 801293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012940:	2b00      	cmp	r3, #0
 8012942:	d109      	bne.n	8012958 <pppos_input+0xf0>
          PPPDEBUG(LOG_INFO,
                   ("pppos_input[%d]: Dropping null in_tail\n",
                    ppp->netif->num));
          LINK_STATS_INC(link.drop);
 8012944:	4b95      	ldr	r3, [pc, #596]	; (8012b9c <pppos_input+0x334>)
 8012946:	88db      	ldrh	r3, [r3, #6]
 8012948:	3301      	adds	r3, #1
 801294a:	b29a      	uxth	r2, r3
 801294c:	4b93      	ldr	r3, [pc, #588]	; (8012b9c <pppos_input+0x334>)
 801294e:	80da      	strh	r2, [r3, #6]
          pppos_input_drop(pppos);
 8012950:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012952:	f000 fa05 	bl	8012d60 <pppos_input_drop>
 8012956:	e056      	b.n	8012a06 <pppos_input+0x19e>
        /* Otherwise it's a good packet so pass it on. */
        } else {
          struct pbuf *inp;
          /* Trim off the checksum. */
          if(pppos->in_tail->len > 2) {
 8012958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801295a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801295c:	895b      	ldrh	r3, [r3, #10]
 801295e:	2b02      	cmp	r3, #2
 8012960:	d91c      	bls.n	801299c <pppos_input+0x134>
            pppos->in_tail->len -= 2;
 8012962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012968:	6d52      	ldr	r2, [r2, #84]	; 0x54
 801296a:	8952      	ldrh	r2, [r2, #10]
 801296c:	3a02      	subs	r2, #2
 801296e:	b292      	uxth	r2, r2
 8012970:	815a      	strh	r2, [r3, #10]

            pppos->in_tail->tot_len = pppos->in_tail->len;
 8012972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012978:	6d52      	ldr	r2, [r2, #84]	; 0x54
 801297a:	8952      	ldrh	r2, [r2, #10]
 801297c:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 801297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012986:	429a      	cmp	r2, r3
 8012988:	d027      	beq.n	80129da <pppos_input+0x172>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 801298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801298c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012992:	4619      	mov	r1, r3
 8012994:	4610      	mov	r0, r2
 8012996:	f7f3 fc19 	bl	80061cc <pbuf_cat>
 801299a:	e01e      	b.n	80129da <pppos_input+0x172>
            }
          } else {
            pppos->in_tail->tot_len = pppos->in_tail->len;
 801299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80129a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129a2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80129a4:	8952      	ldrh	r2, [r2, #10]
 80129a6:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 80129a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80129ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80129b0:	429a      	cmp	r2, r3
 80129b2:	d007      	beq.n	80129c4 <pppos_input+0x15c>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 80129b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80129b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80129bc:	4619      	mov	r1, r3
 80129be:	4610      	mov	r0, r2
 80129c0:	f7f3 fc04 	bl	80061cc <pbuf_cat>
            }

            pbuf_realloc(pppos->in_head, pppos->in_head->tot_len - 2);
 80129c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80129c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80129cc:	891b      	ldrh	r3, [r3, #8]
 80129ce:	3b02      	subs	r3, #2
 80129d0:	b29b      	uxth	r3, r3
 80129d2:	4619      	mov	r1, r3
 80129d4:	4610      	mov	r0, r2
 80129d6:	f7f3 f9b9 	bl	8005d4c <pbuf_realloc>
          }

          /* Dispatch the packet thereby consuming it. */
          inp = pppos->in_head;
 80129da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80129de:	613b      	str	r3, [r7, #16]
          /* Packet consumed, release our references. */
          pppos->in_head = NULL;
 80129e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e2:	2200      	movs	r2, #0
 80129e4:	651a      	str	r2, [r3, #80]	; 0x50
          pppos->in_tail = NULL;
 80129e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e8:	2200      	movs	r2, #0
 80129ea:	655a      	str	r2, [r3, #84]	; 0x54
            pbuf_free(inp);
            LINK_STATS_INC(link.drop);
            MIB2_STATS_NETIF_INC(ppp->netif, ifindiscards);
          }
#else /* PPP_INPROC_IRQ_SAFE */
          ppp_input(ppp, inp);
 80129ec:	6939      	ldr	r1, [r7, #16]
 80129ee:	68f8      	ldr	r0, [r7, #12]
 80129f0:	f7ff fbc2 	bl	8012178 <ppp_input>
          /* ppp_input can disconnect the interface, we need to abort to prevent a memory
           * leak if there are remaining bytes because pppos_connect and pppos_listen
           * functions expect input buffer to be free. Furthermore there are no real
           * reason to continue reading bytes if we are disconnected.
           */
          if (!pppos->open) {
 80129f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80129fa:	f003 0301 	and.w	r3, r3, #1
 80129fe:	b2db      	uxtb	r3, r3
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	f000 8120 	beq.w	8012c46 <pppos_input+0x3de>
          }
#endif /* PPP_INPROC_IRQ_SAFE */
        }

        /* Prepare for a new packet. */
        pppos->in_fcs = PPP_INITFCS;
 8012a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
        pppos->in_state = PDADDRESS;
 8012a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a12:	2201      	movs	r2, #1
 8012a14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        pppos->in_escaped = 0;
 8012a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8012a20:	e108      	b.n	8012c34 <pppos_input+0x3cc>
                 ("pppos_input[%d]: Dropping ACCM char <%d>\n", ppp->netif->num, cur_char));
      }
    /* Process other characters. */
    } else {
      /* Unencode escaped characters. */
      if (pppos->in_escaped) {
 8012a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d009      	beq.n	8012a40 <pppos_input+0x1d8>
        pppos->in_escaped = 0;
 8012a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a2e:	2200      	movs	r2, #0
 8012a30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        cur_char ^= PPP_TRANS;
 8012a34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012a38:	f083 0320 	eor.w	r3, r3, #32
 8012a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      }

      /* Process character relative to current state. */
      switch (pppos->in_state) {
 8012a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a42:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8012a46:	2b05      	cmp	r3, #5
 8012a48:	f200 80de 	bhi.w	8012c08 <pppos_input+0x3a0>
 8012a4c:	a201      	add	r2, pc, #4	; (adr r2, 8012a54 <pppos_input+0x1ec>)
 8012a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a52:	bf00      	nop
 8012a54:	08012c09 	.word	0x08012c09
 8012a58:	08012a6d 	.word	0x08012a6d
 8012a5c:	08012a7f 	.word	0x08012a7f
 8012a60:	08012a91 	.word	0x08012a91
 8012a64:	08012acd 	.word	0x08012acd
 8012a68:	08012aed 	.word	0x08012aed
        case PDIDLE:                    /* Idle state - wait for flag character. */
          break;
        case PDADDRESS:                 /* Process address field. */
          if (cur_char == PPP_ALLSTATIONS) {
 8012a6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012a70:	2bff      	cmp	r3, #255	; 0xff
 8012a72:	d104      	bne.n	8012a7e <pppos_input+0x216>
            pppos->in_state = PDCONTROL;
 8012a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a76:	2202      	movs	r2, #2
 8012a78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            break;
 8012a7c:	e0c5      	b.n	8012c0a <pppos_input+0x3a2>
          }
          /* Else assume compressed address and control fields so
           * fall through to get the protocol... */
          /* Fall through */
        case PDCONTROL:                 /* Process control field. */
          if (cur_char == PPP_UI) {
 8012a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012a82:	2b03      	cmp	r3, #3
 8012a84:	d104      	bne.n	8012a90 <pppos_input+0x228>
            pppos->in_state = PDPROTOCOL1;
 8012a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a88:	2203      	movs	r2, #3
 8012a8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            break;
 8012a8e:	e0bc      	b.n	8012c0a <pppos_input+0x3a2>
          }
          /* Fall through */
        case PDPROTOCOL1:               /* Process protocol field 1. */
          /* If the lower bit is set, this is the end of the protocol
           * field. */
          if (cur_char & 1) {
 8012a90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012a94:	f003 0301 	and.w	r3, r3, #1
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d00a      	beq.n	8012ab2 <pppos_input+0x24a>
            pppos->in_protocol = cur_char;
 8012a9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012aa0:	b29a      	uxth	r2, r3
 8012aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
            pppos->in_state = PDDATA;
 8012aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aaa:	2205      	movs	r2, #5
 8012aac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          } else {
            pppos->in_protocol = (u16_t)cur_char << 8;
            pppos->in_state = PDPROTOCOL2;
          }
          break;
 8012ab0:	e0ab      	b.n	8012c0a <pppos_input+0x3a2>
            pppos->in_protocol = (u16_t)cur_char << 8;
 8012ab2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012ab6:	b29b      	uxth	r3, r3
 8012ab8:	021b      	lsls	r3, r3, #8
 8012aba:	b29a      	uxth	r2, r3
 8012abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012abe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
            pppos->in_state = PDPROTOCOL2;
 8012ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac4:	2204      	movs	r2, #4
 8012ac6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          break;
 8012aca:	e09e      	b.n	8012c0a <pppos_input+0x3a2>
        case PDPROTOCOL2:               /* Process protocol field 2. */
          pppos->in_protocol |= cur_char;
 8012acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ace:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8012ad2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012ad6:	b29b      	uxth	r3, r3
 8012ad8:	4313      	orrs	r3, r2
 8012ada:	b29a      	uxth	r2, r3
 8012adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ade:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          pppos->in_state = PDDATA;
 8012ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae4:	2205      	movs	r2, #5
 8012ae6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          break;
 8012aea:	e08e      	b.n	8012c0a <pppos_input+0x3a2>
        case PDDATA:                    /* Process data byte. */
          /* Make space to receive processed data. */
          if (pppos->in_tail == NULL || pppos->in_tail->len == PBUF_POOL_BUFSIZE) {
 8012aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d005      	beq.n	8012b00 <pppos_input+0x298>
 8012af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012af8:	895b      	ldrh	r3, [r3, #10]
 8012afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012afe:	d174      	bne.n	8012bea <pppos_input+0x382>
            u16_t pbuf_alloc_len;
            if (pppos->in_tail != NULL) {
 8012b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d02d      	beq.n	8012b64 <pppos_input+0x2fc>
              u16_t mru;
              pppos->in_tail->tot_len = pppos->in_tail->len;
 8012b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b0e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012b10:	8952      	ldrh	r2, [r2, #10]
 8012b12:	811a      	strh	r2, [r3, #8]
              if (pppos->in_tail != pppos->in_head) {
 8012b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d00a      	beq.n	8012b36 <pppos_input+0x2ce>
                pbuf_cat(pppos->in_head, pppos->in_tail);
 8012b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b28:	4619      	mov	r1, r3
 8012b2a:	4610      	mov	r0, r2
 8012b2c:	f7f3 fb4e 	bl	80061cc <pbuf_cat>
                /* give up the in_tail reference now */
                pppos->in_tail = NULL;
 8012b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b32:	2200      	movs	r2, #0
 8012b34:	655a      	str	r2, [r3, #84]	; 0x54
              }
              /* Compute MRU including headers length.  If smaller packets are
               * requested, we must still be able to receive packets of the
               * default MRU for control packets. */
              mru = LWIP_MAX(PPP_MRU, PPP_DEFMRU)
 8012b36:	f240 6374 	movw	r3, #1652	; 0x674
 8012b3a:	843b      	strh	r3, [r7, #32]
#endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
#if PPP_INPROC_IRQ_SAFE
                + sizeof(struct pppos_input_header)
#endif /* PPP_INPROC_IRQ_SAFE */
                + sizeof(pppos->in_protocol);
              if (pppos->in_head->tot_len > mru) {
 8012b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b40:	891b      	ldrh	r3, [r3, #8]
 8012b42:	8c3a      	ldrh	r2, [r7, #32]
 8012b44:	429a      	cmp	r2, r3
 8012b46:	d20d      	bcs.n	8012b64 <pppos_input+0x2fc>
                /* Packet too big. Drop the input packet and let the
                 * higher layers deal with it.  Continue processing
                 * received characters in case a new packet starts. */
                PPPDEBUG(LOG_ERR, ("pppos_input[%d]: packet too big, max_len=%d, dropping packet\n", ppp->netif->num, mru));
                LINK_STATS_INC(link.lenerr);
 8012b48:	4b14      	ldr	r3, [pc, #80]	; (8012b9c <pppos_input+0x334>)
 8012b4a:	895b      	ldrh	r3, [r3, #10]
 8012b4c:	3301      	adds	r3, #1
 8012b4e:	b29a      	uxth	r2, r3
 8012b50:	4b12      	ldr	r3, [pc, #72]	; (8012b9c <pppos_input+0x334>)
 8012b52:	815a      	strh	r2, [r3, #10]
                pppos_input_drop(pppos);
 8012b54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b56:	f000 f903 	bl	8012d60 <pppos_input_drop>
                pppos->in_state = PDIDLE;  /* Wait for flag character. */
 8012b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                break;
 8012b62:	e052      	b.n	8012c0a <pppos_input+0x3a2>
              }
            }
            /* If we haven't started a packet, we need a packet header. */
            pbuf_alloc_len = 0;
 8012b64:	2300      	movs	r3, #0
 8012b66:	83fb      	strh	r3, [r7, #30]
#endif /* PPP_IPV6_SUPPORT */
             )) {
              pbuf_alloc_len = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
            }
#endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
            next_pbuf = pbuf_alloc(PBUF_RAW, pbuf_alloc_len, PBUF_POOL);
 8012b68:	8bfb      	ldrh	r3, [r7, #30]
 8012b6a:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8012b6e:	4619      	mov	r1, r3
 8012b70:	2000      	movs	r0, #0
 8012b72:	f7f2 fff9 	bl	8005b68 <pbuf_alloc>
 8012b76:	61b8      	str	r0, [r7, #24]
            if (next_pbuf == NULL) {
 8012b78:	69bb      	ldr	r3, [r7, #24]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d110      	bne.n	8012ba0 <pppos_input+0x338>
              /* No free buffers.  Drop the input packet and let the
               * higher layers deal with it.  Continue processing
               * received characters in case a new packet starts. */
              PPPDEBUG(LOG_ERR, ("pppos_input[%d]: NO FREE PBUFS!\n", ppp->netif->num));
              LINK_STATS_INC(link.memerr);
 8012b7e:	4b07      	ldr	r3, [pc, #28]	; (8012b9c <pppos_input+0x334>)
 8012b80:	899b      	ldrh	r3, [r3, #12]
 8012b82:	3301      	adds	r3, #1
 8012b84:	b29a      	uxth	r2, r3
 8012b86:	4b05      	ldr	r3, [pc, #20]	; (8012b9c <pppos_input+0x334>)
 8012b88:	819a      	strh	r2, [r3, #12]
              pppos_input_drop(pppos);
 8012b8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b8c:	f000 f8e8 	bl	8012d60 <pppos_input_drop>
              pppos->in_state = PDIDLE;  /* Wait for flag character. */
 8012b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b92:	2200      	movs	r2, #0
 8012b94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
              break;
 8012b98:	e037      	b.n	8012c0a <pppos_input+0x3a2>
 8012b9a:	bf00      	nop
 8012b9c:	20002218 	.word	0x20002218
            }
            if (pppos->in_head == NULL) {
 8012ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d11d      	bne.n	8012be4 <pppos_input+0x37c>
              u8_t *payload = ((u8_t*)next_pbuf->payload) + pbuf_alloc_len;
 8012ba8:	69bb      	ldr	r3, [r7, #24]
 8012baa:	685a      	ldr	r2, [r3, #4]
 8012bac:	8bfb      	ldrh	r3, [r7, #30]
 8012bae:	4413      	add	r3, r2
 8012bb0:	617b      	str	r3, [r7, #20]
#if PPP_INPROC_IRQ_SAFE
              ((struct pppos_input_header*)payload)->ppp = ppp;
              payload += sizeof(struct pppos_input_header);
              next_pbuf->len += sizeof(struct pppos_input_header);
#endif /* PPP_INPROC_IRQ_SAFE */
              next_pbuf->len += sizeof(pppos->in_protocol);
 8012bb2:	69bb      	ldr	r3, [r7, #24]
 8012bb4:	895b      	ldrh	r3, [r3, #10]
 8012bb6:	3302      	adds	r3, #2
 8012bb8:	b29a      	uxth	r2, r3
 8012bba:	69bb      	ldr	r3, [r7, #24]
 8012bbc:	815a      	strh	r2, [r3, #10]
              *(payload++) = pppos->in_protocol >> 8;
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	1c5a      	adds	r2, r3, #1
 8012bc2:	617a      	str	r2, [r7, #20]
 8012bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bc6:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8012bca:	0a12      	lsrs	r2, r2, #8
 8012bcc:	b292      	uxth	r2, r2
 8012bce:	b2d2      	uxtb	r2, r2
 8012bd0:	701a      	strb	r2, [r3, #0]
              *(payload) = pppos->in_protocol & 0xFF;
 8012bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012bd8:	b2da      	uxtb	r2, r3
 8012bda:	697b      	ldr	r3, [r7, #20]
 8012bdc:	701a      	strb	r2, [r3, #0]
              pppos->in_head = next_pbuf;
 8012bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be0:	69ba      	ldr	r2, [r7, #24]
 8012be2:	651a      	str	r2, [r3, #80]	; 0x50
            }
            pppos->in_tail = next_pbuf;
 8012be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be6:	69ba      	ldr	r2, [r7, #24]
 8012be8:	655a      	str	r2, [r3, #84]	; 0x54
          }
          /* Load character into buffer. */
          ((u8_t*)pppos->in_tail->payload)[pppos->in_tail->len++] = cur_char;
 8012bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012bee:	6859      	ldr	r1, [r3, #4]
 8012bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012bf4:	895a      	ldrh	r2, [r3, #10]
 8012bf6:	1c50      	adds	r0, r2, #1
 8012bf8:	b280      	uxth	r0, r0
 8012bfa:	8158      	strh	r0, [r3, #10]
 8012bfc:	4613      	mov	r3, r2
 8012bfe:	440b      	add	r3, r1
 8012c00:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8012c04:	701a      	strb	r2, [r3, #0]
          break;
 8012c06:	e000      	b.n	8012c0a <pppos_input+0x3a2>
        default:
          break;
 8012c08:	bf00      	nop
      }

      /* update the frame check sequence number. */
      pppos->in_fcs = PPP_FCS(pppos->in_fcs, cur_char);
 8012c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012c10:	0a1b      	lsrs	r3, r3, #8
 8012c12:	b29a      	uxth	r2, r3
 8012c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012c1a:	4619      	mov	r1, r3
 8012c1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012c20:	404b      	eors	r3, r1
 8012c22:	b2db      	uxtb	r3, r3
 8012c24:	490a      	ldr	r1, [pc, #40]	; (8012c50 <pppos_input+0x3e8>)
 8012c26:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012c2a:	4053      	eors	r3, r2
 8012c2c:	b29a      	uxth	r2, r3
 8012c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  while (l-- > 0) {
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	1e5a      	subs	r2, r3, #1
 8012c38:	607a      	str	r2, [r7, #4]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	f73f ae29 	bgt.w	8012892 <pppos_input+0x2a>
 8012c40:	e002      	b.n	8012c48 <pppos_input+0x3e0>
    return;
 8012c42:	bf00      	nop
 8012c44:	e000      	b.n	8012c48 <pppos_input+0x3e0>
            break;
 8012c46:	bf00      	nop
    }
  } /* while (l-- > 0), all bytes processed */
}
 8012c48:	3730      	adds	r7, #48	; 0x30
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}
 8012c4e:	bf00      	nop
 8012c50:	08017c44 	.word	0x08017c44

08012c54 <pppos_send_config>:
}
#endif /* PPP_INPROC_IRQ_SAFE */

static void
pppos_send_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
{
 8012c54:	b480      	push	{r7}
 8012c56:	b087      	sub	sp, #28
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	60f8      	str	r0, [r7, #12]
 8012c5c:	60b9      	str	r1, [r7, #8]
 8012c5e:	607a      	str	r2, [r7, #4]
 8012c60:	603b      	str	r3, [r7, #0]
  int i;
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8012c62:	68bb      	ldr	r3, [r7, #8]
 8012c64:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(ppp);

  pppos->pcomp = pcomp;
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	b2db      	uxtb	r3, r3
 8012c6a:	f003 0301 	and.w	r3, r3, #1
 8012c6e:	b2d9      	uxtb	r1, r3
 8012c70:	693a      	ldr	r2, [r7, #16]
 8012c72:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8012c76:	f361 0341 	bfi	r3, r1, #1, #1
 8012c7a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
  pppos->accomp = accomp;
 8012c7e:	6a3b      	ldr	r3, [r7, #32]
 8012c80:	b2db      	uxtb	r3, r3
 8012c82:	f003 0301 	and.w	r3, r3, #1
 8012c86:	b2d9      	uxtb	r1, r3
 8012c88:	693a      	ldr	r2, [r7, #16]
 8012c8a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8012c8e:	f361 0382 	bfi	r3, r1, #2, #1
 8012c92:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

  /* Load the ACCM bits for the 32 control codes. */
  for (i = 0; i < 32/8; i++) {
 8012c96:	2300      	movs	r3, #0
 8012c98:	617b      	str	r3, [r7, #20]
 8012c9a:	e00e      	b.n	8012cba <pppos_send_config+0x66>
    pppos->out_accm[i] = (u8_t)((accm >> (8 * i)) & 0xFF);
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	00db      	lsls	r3, r3, #3
 8012ca0:	687a      	ldr	r2, [r7, #4]
 8012ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8012ca6:	b2d9      	uxtb	r1, r3
 8012ca8:	693a      	ldr	r2, [r7, #16]
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	4413      	add	r3, r2
 8012cae:	330c      	adds	r3, #12
 8012cb0:	460a      	mov	r2, r1
 8012cb2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 32/8; i++) {
 8012cb4:	697b      	ldr	r3, [r7, #20]
 8012cb6:	3301      	adds	r3, #1
 8012cb8:	617b      	str	r3, [r7, #20]
 8012cba:	697b      	ldr	r3, [r7, #20]
 8012cbc:	2b03      	cmp	r3, #3
 8012cbe:	dded      	ble.n	8012c9c <pppos_send_config+0x48>
  }

  PPPDEBUG(LOG_INFO, ("pppos_send_config[%d]: out_accm=%X %X %X %X\n",
            pppos->ppp->netif->num,
            pppos->out_accm[0], pppos->out_accm[1], pppos->out_accm[2], pppos->out_accm[3]));
}
 8012cc0:	bf00      	nop
 8012cc2:	371c      	adds	r7, #28
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cca:	4770      	bx	lr

08012ccc <pppos_recv_config>:

static void
pppos_recv_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
{
 8012ccc:	b480      	push	{r7}
 8012cce:	b087      	sub	sp, #28
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	60f8      	str	r0, [r7, #12]
 8012cd4:	60b9      	str	r1, [r7, #8]
 8012cd6:	607a      	str	r2, [r7, #4]
 8012cd8:	603b      	str	r3, [r7, #0]
  int i;
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8012cda:	68bb      	ldr	r3, [r7, #8]
 8012cdc:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(pcomp);
  LWIP_UNUSED_ARG(accomp);

  /* Load the ACCM bits for the 32 control codes. */
  PPPOS_PROTECT(lev);
  for (i = 0; i < 32 / 8; i++) {
 8012cde:	2300      	movs	r3, #0
 8012ce0:	617b      	str	r3, [r7, #20]
 8012ce2:	e00e      	b.n	8012d02 <pppos_recv_config+0x36>
    pppos->in_accm[i] = (u8_t)(accm >> (i * 8));
 8012ce4:	697b      	ldr	r3, [r7, #20]
 8012ce6:	00db      	lsls	r3, r3, #3
 8012ce8:	687a      	ldr	r2, [r7, #4]
 8012cea:	fa22 f303 	lsr.w	r3, r2, r3
 8012cee:	b2d9      	uxtb	r1, r3
 8012cf0:	693a      	ldr	r2, [r7, #16]
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	4413      	add	r3, r2
 8012cf6:	332d      	adds	r3, #45	; 0x2d
 8012cf8:	460a      	mov	r2, r1
 8012cfa:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 32 / 8; i++) {
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	3301      	adds	r3, #1
 8012d00:	617b      	str	r3, [r7, #20]
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	2b03      	cmp	r3, #3
 8012d06:	dded      	ble.n	8012ce4 <pppos_recv_config+0x18>
  PPPOS_UNPROTECT(lev);

  PPPDEBUG(LOG_INFO, ("pppos_recv_config[%d]: in_accm=%X %X %X %X\n",
            pppos->ppp->netif->num,
            pppos->in_accm[0], pppos->in_accm[1], pppos->in_accm[2], pppos->in_accm[3]));
}
 8012d08:	bf00      	nop
 8012d0a:	371c      	adds	r7, #28
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d12:	4770      	bx	lr

08012d14 <pppos_input_free_current_packet>:
/*
 * Drop the input packet.
 */
static void
pppos_input_free_current_packet(pppos_pcb *pppos)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b082      	sub	sp, #8
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
  if (pppos->in_head != NULL) {
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d016      	beq.n	8012d52 <pppos_input_free_current_packet+0x3e>
    if (pppos->in_tail && (pppos->in_tail != pppos->in_head)) {
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d00a      	beq.n	8012d42 <pppos_input_free_current_packet+0x2e>
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d34:	429a      	cmp	r2, r3
 8012d36:	d004      	beq.n	8012d42 <pppos_input_free_current_packet+0x2e>
      pbuf_free(pppos->in_tail);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7f3 f97d 	bl	800603c <pbuf_free>
    }
    pbuf_free(pppos->in_head);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d46:	4618      	mov	r0, r3
 8012d48:	f7f3 f978 	bl	800603c <pbuf_free>
    pppos->in_head = NULL;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2200      	movs	r2, #0
 8012d50:	651a      	str	r2, [r3, #80]	; 0x50
  }
  pppos->in_tail = NULL;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	2200      	movs	r2, #0
 8012d56:	655a      	str	r2, [r3, #84]	; 0x54
}
 8012d58:	bf00      	nop
 8012d5a:	3708      	adds	r7, #8
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}

08012d60 <pppos_input_drop>:
/*
 * Drop the input packet and increase error counters.
 */
static void
pppos_input_drop(pppos_pcb *pppos)
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
#if 0
    PPPDEBUG(LOG_INFO, ("pppos_input_drop: %d:%.*H\n", pppos->in_head->len, min(60, pppos->in_head->len * 2), pppos->in_head->payload));
#endif
    PPPDEBUG(LOG_INFO, ("pppos_input_drop: pbuf len=%d, addr %p\n", pppos->in_head->len, (void*)pppos->in_head));
  }
  pppos_input_free_current_packet(pppos);
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f7ff ffd3 	bl	8012d14 <pppos_input_free_current_packet>
#if VJ_SUPPORT
  vj_uncompress_err(&pppos->ppp->vj_comp);
#endif /* VJ_SUPPORT */

  LINK_STATS_INC(link.drop);
 8012d6e:	4b05      	ldr	r3, [pc, #20]	; (8012d84 <pppos_input_drop+0x24>)
 8012d70:	88db      	ldrh	r3, [r3, #6]
 8012d72:	3301      	adds	r3, #1
 8012d74:	b29a      	uxth	r2, r3
 8012d76:	4b03      	ldr	r3, [pc, #12]	; (8012d84 <pppos_input_drop+0x24>)
 8012d78:	80da      	strh	r2, [r3, #6]
  MIB2_STATS_NETIF_INC(pppos->ppp->netif, ifindiscards);
}
 8012d7a:	bf00      	nop
 8012d7c:	3708      	adds	r7, #8
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bd80      	pop	{r7, pc}
 8012d82:	bf00      	nop
 8012d84:	20002218 	.word	0x20002218

08012d88 <pppos_output_append>:
 * If pbuf is full, send the pbuf and reuse it.
 * Return the current pbuf.
 */
static err_t
pppos_output_append(pppos_pcb *pppos, err_t err, struct pbuf *nb, u8_t c, u8_t accm, u16_t *fcs)
{
 8012d88:	b590      	push	{r4, r7, lr}
 8012d8a:	b087      	sub	sp, #28
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	60f8      	str	r0, [r7, #12]
 8012d90:	607a      	str	r2, [r7, #4]
 8012d92:	461a      	mov	r2, r3
 8012d94:	460b      	mov	r3, r1
 8012d96:	72fb      	strb	r3, [r7, #11]
 8012d98:	4613      	mov	r3, r2
 8012d9a:	72bb      	strb	r3, [r7, #10]
  if (err != ERR_OK) {
 8012d9c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d002      	beq.n	8012daa <pppos_output_append+0x22>
    return err;
 8012da4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012da8:	e06e      	b.n	8012e88 <pppos_output_append+0x100>
  }

  /* Make sure there is room for the character and an escape code.
   * Sure we don't quite fill the buffer if the character doesn't
   * get escaped but is one character worth complicating this? */
  if ((PBUF_POOL_BUFSIZE - nb->len) < 2) {
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	895b      	ldrh	r3, [r3, #10]
 8012dae:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012db2:	2b01      	cmp	r3, #1
 8012db4:	dc19      	bgt.n	8012dea <pppos_output_append+0x62>
    u32_t l = pppos->output_cb(pppos->ppp, nb->payload, nb->len, pppos->ppp->ctx_cb);
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	685c      	ldr	r4, [r3, #4]
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	6818      	ldr	r0, [r3, #0]
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6859      	ldr	r1, [r3, #4]
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	895b      	ldrh	r3, [r3, #10]
 8012dc6:	461a      	mov	r2, r3
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dce:	47a0      	blx	r4
 8012dd0:	6178      	str	r0, [r7, #20]
    if (l != nb->len) {
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	895b      	ldrh	r3, [r3, #10]
 8012dd6:	461a      	mov	r2, r3
 8012dd8:	697b      	ldr	r3, [r7, #20]
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	d002      	beq.n	8012de4 <pppos_output_append+0x5c>
      return ERR_IF;
 8012dde:	f06f 030b 	mvn.w	r3, #11
 8012de2:	e051      	b.n	8012e88 <pppos_output_append+0x100>
    }
    nb->len = 0;
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2200      	movs	r2, #0
 8012de8:	815a      	strh	r2, [r3, #10]
  }

  /* Update FCS before checking for special characters. */
  if (fcs) {
 8012dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d010      	beq.n	8012e12 <pppos_output_append+0x8a>
    *fcs = PPP_FCS(*fcs, c);
 8012df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df2:	881b      	ldrh	r3, [r3, #0]
 8012df4:	0a1b      	lsrs	r3, r3, #8
 8012df6:	b29a      	uxth	r2, r3
 8012df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dfa:	881b      	ldrh	r3, [r3, #0]
 8012dfc:	4619      	mov	r1, r3
 8012dfe:	7abb      	ldrb	r3, [r7, #10]
 8012e00:	404b      	eors	r3, r1
 8012e02:	b2db      	uxtb	r3, r3
 8012e04:	4922      	ldr	r1, [pc, #136]	; (8012e90 <pppos_output_append+0x108>)
 8012e06:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012e0a:	4053      	eors	r3, r2
 8012e0c:	b29a      	uxth	r2, r3
 8012e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e10:	801a      	strh	r2, [r3, #0]
  }

  /* Copy to output buffer escaping special characters. */
  if (accm && ESCAPE_P(pppos->out_accm, c)) {
 8012e12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d02a      	beq.n	8012e70 <pppos_output_append+0xe8>
 8012e1a:	7abb      	ldrb	r3, [r7, #10]
 8012e1c:	08db      	lsrs	r3, r3, #3
 8012e1e:	b2db      	uxtb	r3, r3
 8012e20:	461a      	mov	r2, r3
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	4413      	add	r3, r2
 8012e26:	7b1b      	ldrb	r3, [r3, #12]
 8012e28:	461a      	mov	r2, r3
 8012e2a:	7abb      	ldrb	r3, [r7, #10]
 8012e2c:	f003 0307 	and.w	r3, r3, #7
 8012e30:	fa42 f303 	asr.w	r3, r2, r3
 8012e34:	f003 0301 	and.w	r3, r3, #1
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d019      	beq.n	8012e70 <pppos_output_append+0xe8>
    *((u8_t*)nb->payload + nb->len++) = PPP_ESCAPE;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	685a      	ldr	r2, [r3, #4]
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	895b      	ldrh	r3, [r3, #10]
 8012e44:	1c59      	adds	r1, r3, #1
 8012e46:	b288      	uxth	r0, r1
 8012e48:	6879      	ldr	r1, [r7, #4]
 8012e4a:	8148      	strh	r0, [r1, #10]
 8012e4c:	4413      	add	r3, r2
 8012e4e:	227d      	movs	r2, #125	; 0x7d
 8012e50:	701a      	strb	r2, [r3, #0]
    *((u8_t*)nb->payload + nb->len++) = c ^ PPP_TRANS;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	685a      	ldr	r2, [r3, #4]
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	895b      	ldrh	r3, [r3, #10]
 8012e5a:	1c59      	adds	r1, r3, #1
 8012e5c:	b288      	uxth	r0, r1
 8012e5e:	6879      	ldr	r1, [r7, #4]
 8012e60:	8148      	strh	r0, [r1, #10]
 8012e62:	4413      	add	r3, r2
 8012e64:	7aba      	ldrb	r2, [r7, #10]
 8012e66:	f082 0220 	eor.w	r2, r2, #32
 8012e6a:	b2d2      	uxtb	r2, r2
 8012e6c:	701a      	strb	r2, [r3, #0]
 8012e6e:	e00a      	b.n	8012e86 <pppos_output_append+0xfe>
  } else {
    *((u8_t*)nb->payload + nb->len++) = c;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	685a      	ldr	r2, [r3, #4]
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	895b      	ldrh	r3, [r3, #10]
 8012e78:	1c59      	adds	r1, r3, #1
 8012e7a:	b288      	uxth	r0, r1
 8012e7c:	6879      	ldr	r1, [r7, #4]
 8012e7e:	8148      	strh	r0, [r1, #10]
 8012e80:	4413      	add	r3, r2
 8012e82:	7aba      	ldrb	r2, [r7, #10]
 8012e84:	701a      	strb	r2, [r3, #0]
  }

  return ERR_OK;
 8012e86:	2300      	movs	r3, #0
}
 8012e88:	4618      	mov	r0, r3
 8012e8a:	371c      	adds	r7, #28
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd90      	pop	{r4, r7, pc}
 8012e90:	08017c44 	.word	0x08017c44

08012e94 <pppos_output_last>:

static err_t
pppos_output_last(pppos_pcb *pppos, err_t err, struct pbuf *nb, u16_t *fcs)
{
 8012e94:	b590      	push	{r4, r7, lr}
 8012e96:	b089      	sub	sp, #36	; 0x24
 8012e98:	af02      	add	r7, sp, #8
 8012e9a:	60f8      	str	r0, [r7, #12]
 8012e9c:	607a      	str	r2, [r7, #4]
 8012e9e:	603b      	str	r3, [r7, #0]
 8012ea0:	460b      	mov	r3, r1
 8012ea2:	72fb      	strb	r3, [r7, #11]
  ppp_pcb *ppp = pppos->ppp;
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	617b      	str	r3, [r7, #20]

  /* Add FCS and trailing flag. */
  err = pppos_output_append(pppos, err,  nb, ~(*fcs) & 0xFF, 1, NULL);
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	881b      	ldrh	r3, [r3, #0]
 8012eae:	b2db      	uxtb	r3, r3
 8012eb0:	43db      	mvns	r3, r3
 8012eb2:	b2da      	uxtb	r2, r3
 8012eb4:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8012eb8:	2300      	movs	r3, #0
 8012eba:	9301      	str	r3, [sp, #4]
 8012ebc:	2301      	movs	r3, #1
 8012ebe:	9300      	str	r3, [sp, #0]
 8012ec0:	4613      	mov	r3, r2
 8012ec2:	687a      	ldr	r2, [r7, #4]
 8012ec4:	68f8      	ldr	r0, [r7, #12]
 8012ec6:	f7ff ff5f 	bl	8012d88 <pppos_output_append>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	72fb      	strb	r3, [r7, #11]
  err = pppos_output_append(pppos, err,  nb, (~(*fcs) >> 8) & 0xFF, 1, NULL);
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	881b      	ldrh	r3, [r3, #0]
 8012ed2:	43db      	mvns	r3, r3
 8012ed4:	121b      	asrs	r3, r3, #8
 8012ed6:	b2da      	uxtb	r2, r3
 8012ed8:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8012edc:	2300      	movs	r3, #0
 8012ede:	9301      	str	r3, [sp, #4]
 8012ee0:	2301      	movs	r3, #1
 8012ee2:	9300      	str	r3, [sp, #0]
 8012ee4:	4613      	mov	r3, r2
 8012ee6:	687a      	ldr	r2, [r7, #4]
 8012ee8:	68f8      	ldr	r0, [r7, #12]
 8012eea:	f7ff ff4d 	bl	8012d88 <pppos_output_append>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	72fb      	strb	r3, [r7, #11]
  err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 8012ef2:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	9301      	str	r3, [sp, #4]
 8012efa:	2300      	movs	r3, #0
 8012efc:	9300      	str	r3, [sp, #0]
 8012efe:	237e      	movs	r3, #126	; 0x7e
 8012f00:	687a      	ldr	r2, [r7, #4]
 8012f02:	68f8      	ldr	r0, [r7, #12]
 8012f04:	f7ff ff40 	bl	8012d88 <pppos_output_append>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK) {
 8012f0c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d128      	bne.n	8012f66 <pppos_output_last+0xd2>
    goto failed;
  }

  /* Send remaining buffer if not empty */
  if (nb->len > 0) {
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	895b      	ldrh	r3, [r3, #10]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d014      	beq.n	8012f46 <pppos_output_last+0xb2>
    u32_t l = pppos->output_cb(ppp, nb->payload, nb->len, ppp->ctx_cb);
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	685c      	ldr	r4, [r3, #4]
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	6859      	ldr	r1, [r3, #4]
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	895b      	ldrh	r3, [r3, #10]
 8012f28:	461a      	mov	r2, r3
 8012f2a:	697b      	ldr	r3, [r7, #20]
 8012f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f2e:	6978      	ldr	r0, [r7, #20]
 8012f30:	47a0      	blx	r4
 8012f32:	6138      	str	r0, [r7, #16]
    if (l != nb->len) {
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	895b      	ldrh	r3, [r3, #10]
 8012f38:	461a      	mov	r2, r3
 8012f3a:	693b      	ldr	r3, [r7, #16]
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d002      	beq.n	8012f46 <pppos_output_last+0xb2>
      err = ERR_IF;
 8012f40:	23f4      	movs	r3, #244	; 0xf4
 8012f42:	72fb      	strb	r3, [r7, #11]
      goto failed;
 8012f44:	e010      	b.n	8012f68 <pppos_output_last+0xd4>
    }
  }

  pppos->last_xmit = sys_now();
 8012f46:	f7ee ff73 	bl	8001e30 <sys_now>
 8012f4a:	4602      	mov	r2, r0
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	609a      	str	r2, [r3, #8]
  MIB2_STATS_NETIF_ADD(ppp->netif, ifoutoctets, nb->tot_len);
  MIB2_STATS_NETIF_INC(ppp->netif, ifoutucastpkts);
  LINK_STATS_INC(link.xmit);
 8012f50:	4b11      	ldr	r3, [pc, #68]	; (8012f98 <pppos_output_last+0x104>)
 8012f52:	881b      	ldrh	r3, [r3, #0]
 8012f54:	3301      	adds	r3, #1
 8012f56:	b29a      	uxth	r2, r3
 8012f58:	4b0f      	ldr	r3, [pc, #60]	; (8012f98 <pppos_output_last+0x104>)
 8012f5a:	801a      	strh	r2, [r3, #0]
  pbuf_free(nb);
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f7f3 f86d 	bl	800603c <pbuf_free>
  return ERR_OK;
 8012f62:	2300      	movs	r3, #0
 8012f64:	e014      	b.n	8012f90 <pppos_output_last+0xfc>
    goto failed;
 8012f66:	bf00      	nop

failed:
  pppos->last_xmit = 0; /* prepend PPP_FLAG to next packet */
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	609a      	str	r2, [r3, #8]
  LINK_STATS_INC(link.err);
 8012f6e:	4b0a      	ldr	r3, [pc, #40]	; (8012f98 <pppos_output_last+0x104>)
 8012f70:	8a9b      	ldrh	r3, [r3, #20]
 8012f72:	3301      	adds	r3, #1
 8012f74:	b29a      	uxth	r2, r3
 8012f76:	4b08      	ldr	r3, [pc, #32]	; (8012f98 <pppos_output_last+0x104>)
 8012f78:	829a      	strh	r2, [r3, #20]
  LINK_STATS_INC(link.drop);
 8012f7a:	4b07      	ldr	r3, [pc, #28]	; (8012f98 <pppos_output_last+0x104>)
 8012f7c:	88db      	ldrh	r3, [r3, #6]
 8012f7e:	3301      	adds	r3, #1
 8012f80:	b29a      	uxth	r2, r3
 8012f82:	4b05      	ldr	r3, [pc, #20]	; (8012f98 <pppos_output_last+0x104>)
 8012f84:	80da      	strh	r2, [r3, #6]
  MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
  pbuf_free(nb);
 8012f86:	6878      	ldr	r0, [r7, #4]
 8012f88:	f7f3 f858 	bl	800603c <pbuf_free>
  return err;
 8012f8c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	371c      	adds	r7, #28
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd90      	pop	{r4, r7, pc}
 8012f98:	20002218 	.word	0x20002218

08012f9c <upap_init>:


/*
 * upap_init - Initialize a UPAP unit.
 */
static void upap_init(ppp_pcb *pcb) {
 8012f9c:	b480      	push	{r7}
 8012f9e:	b083      	sub	sp, #12
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
    pcb->upap.us_user = NULL;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->upap.us_userlen = 0;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	2200      	movs	r2, #0
 8012fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pcb->upap.us_passwd = NULL;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->upap.us_passwdlen = 0;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pcb->upap.us_clientstate = UPAPCS_INITIAL;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if PPP_SERVER
    pcb->upap.us_serverstate = UPAPSS_INITIAL;
#endif /* PPP_SERVER */
    pcb->upap.us_id = 0;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2200      	movs	r2, #0
 8012fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 8012fd0:	bf00      	nop
 8012fd2:	370c      	adds	r7, #12
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fda:	4770      	bx	lr

08012fdc <upap_authwithpeer>:
/*
 * upap_authwithpeer - Authenticate us with our peer (start client).
 *
 * Set new state and send authenticate's.
 */
void upap_authwithpeer(ppp_pcb *pcb, const char *user, const char *password) {
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b084      	sub	sp, #16
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	60f8      	str	r0, [r7, #12]
 8012fe4:	60b9      	str	r1, [r7, #8]
 8012fe6:	607a      	str	r2, [r7, #4]

    if(!user || !password)
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d03f      	beq.n	801306e <upap_authwithpeer+0x92>
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d03c      	beq.n	801306e <upap_authwithpeer+0x92>
        return;

    /* Save the username and password we're given */
    pcb->upap.us_user = user;
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	68ba      	ldr	r2, [r7, #8]
 8012ff8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->upap.us_userlen = (u8_t)LWIP_MIN(strlen(user), 0xff);
 8012ffa:	68b8      	ldr	r0, [r7, #8]
 8012ffc:	f7ed f8f2 	bl	80001e4 <strlen>
 8013000:	4603      	mov	r3, r0
 8013002:	2bfe      	cmp	r3, #254	; 0xfe
 8013004:	d805      	bhi.n	8013012 <upap_authwithpeer+0x36>
 8013006:	68b8      	ldr	r0, [r7, #8]
 8013008:	f7ed f8ec 	bl	80001e4 <strlen>
 801300c:	4603      	mov	r3, r0
 801300e:	b2da      	uxtb	r2, r3
 8013010:	e000      	b.n	8013014 <upap_authwithpeer+0x38>
 8013012:	22ff      	movs	r2, #255	; 0xff
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pcb->upap.us_passwd = password;
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	687a      	ldr	r2, [r7, #4]
 801301e:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->upap.us_passwdlen = (u8_t)LWIP_MIN(strlen(password), 0xff);
 8013020:	6878      	ldr	r0, [r7, #4]
 8013022:	f7ed f8df 	bl	80001e4 <strlen>
 8013026:	4603      	mov	r3, r0
 8013028:	2bfe      	cmp	r3, #254	; 0xfe
 801302a:	d805      	bhi.n	8013038 <upap_authwithpeer+0x5c>
 801302c:	6878      	ldr	r0, [r7, #4]
 801302e:	f7ed f8d9 	bl	80001e4 <strlen>
 8013032:	4603      	mov	r3, r0
 8013034:	b2da      	uxtb	r2, r3
 8013036:	e000      	b.n	801303a <upap_authwithpeer+0x5e>
 8013038:	22ff      	movs	r2, #255	; 0xff
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pcb->upap.us_transmits = 0;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	2200      	movs	r2, #0
 8013044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    /* Lower layer up yet? */
    if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801304e:	2b00      	cmp	r3, #0
 8013050:	d004      	beq.n	801305c <upap_authwithpeer+0x80>
	pcb->upap.us_clientstate == UPAPCS_PENDING) {
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
 8013058:	2b02      	cmp	r3, #2
 801305a:	d104      	bne.n	8013066 <upap_authwithpeer+0x8a>
	pcb->upap.us_clientstate = UPAPCS_PENDING;
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	2202      	movs	r2, #2
 8013060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	return;
 8013064:	e004      	b.n	8013070 <upap_authwithpeer+0x94>
    }

    upap_sauthreq(pcb);		/* Start protocol */
 8013066:	68f8      	ldr	r0, [r7, #12]
 8013068:	f000 f92c 	bl	80132c4 <upap_sauthreq>
 801306c:	e000      	b.n	8013070 <upap_authwithpeer+0x94>
        return;
 801306e:	bf00      	nop
}
 8013070:	3710      	adds	r7, #16
 8013072:	46bd      	mov	sp, r7
 8013074:	bd80      	pop	{r7, pc}

08013076 <upap_timeout>:
#endif /* PPP_SERVER */

/*
 * upap_timeout - Retransmission timer for sending auth-reqs expired.
 */
static void upap_timeout(void *arg) {
 8013076:	b580      	push	{r7, lr}
 8013078:	b084      	sub	sp, #16
 801307a:	af00      	add	r7, sp, #0
 801307c:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = (ppp_pcb*)arg;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	60fb      	str	r3, [r7, #12]

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ)
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013088:	2b03      	cmp	r3, #3
 801308a:	d114      	bne.n	80130b6 <upap_timeout+0x40>
	return;

    if (pcb->upap.us_transmits >= pcb->settings.pap_max_transmits) {
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	7b5b      	ldrb	r3, [r3, #13]
 8013096:	429a      	cmp	r2, r3
 8013098:	d309      	bcc.n	80130ae <upap_timeout+0x38>
	/* give up in disgust */
	ppp_error(("No response to PAP authenticate-requests"));
	pcb->upap.us_clientstate = UPAPCS_BADAUTH;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	2205      	movs	r2, #5
 801309e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	auth_withpeer_fail(pcb, PPP_PAP);
 80130a2:	f24c 0123 	movw	r1, #49187	; 0xc023
 80130a6:	68f8      	ldr	r0, [r7, #12]
 80130a8:	f7fa fb5a 	bl	800d760 <auth_withpeer_fail>
	return;
 80130ac:	e004      	b.n	80130b8 <upap_timeout+0x42>
    }

    upap_sauthreq(pcb);		/* Send Authenticate-Request */
 80130ae:	68f8      	ldr	r0, [r7, #12]
 80130b0:	f000 f908 	bl	80132c4 <upap_sauthreq>
 80130b4:	e000      	b.n	80130b8 <upap_timeout+0x42>
	return;
 80130b6:	bf00      	nop
}
 80130b8:	3710      	adds	r7, #16
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}

080130be <upap_lowerup>:
/*
 * upap_lowerup - The lower layer is up.
 *
 * Start authenticating if pending.
 */
static void upap_lowerup(ppp_pcb *pcb) {
 80130be:	b580      	push	{r7, lr}
 80130c0:	b082      	sub	sp, #8
 80130c2:	af00      	add	r7, sp, #0
 80130c4:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_INITIAL)
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d104      	bne.n	80130da <upap_lowerup+0x1c>
	pcb->upap.us_clientstate = UPAPCS_CLOSED;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	2201      	movs	r2, #1
 80130d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	pcb->upap.us_serverstate = UPAPSS_LISTEN;
	if (pcb->settings.pap_req_timeout > 0)
	    TIMEOUT(upap_reqtimeout, pcb, pcb->settings.pap_req_timeout);
    }
#endif /* PPP_SERVER */
}
 80130d8:	e007      	b.n	80130ea <upap_lowerup+0x2c>
    else if (pcb->upap.us_clientstate == UPAPCS_PENDING) {
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80130e0:	2b02      	cmp	r3, #2
 80130e2:	d102      	bne.n	80130ea <upap_lowerup+0x2c>
	upap_sauthreq(pcb);	/* send an auth-request */
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f000 f8ed 	bl	80132c4 <upap_sauthreq>
}
 80130ea:	bf00      	nop
 80130ec:	3708      	adds	r7, #8
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}
	...

080130f4 <upap_lowerdown>:
/*
 * upap_lowerdown - The lower layer is down.
 *
 * Cancel all timeouts.
 */
static void upap_lowerdown(ppp_pcb *pcb) {
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b082      	sub	sp, #8
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ)	/* Timeout pending? */
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013102:	2b03      	cmp	r3, #3
 8013104:	d103      	bne.n	801310e <upap_lowerdown+0x1a>
	UNTIMEOUT(upap_timeout, pcb);		/* Cancel timeout */
 8013106:	6879      	ldr	r1, [r7, #4]
 8013108:	4805      	ldr	r0, [pc, #20]	; (8013120 <upap_lowerdown+0x2c>)
 801310a:	f7fa f96b 	bl	800d3e4 <sys_untimeout>
#if PPP_SERVER
    if (pcb->upap.us_serverstate == UPAPSS_LISTEN && pcb->settings.pap_req_timeout > 0)
	UNTIMEOUT(upap_reqtimeout, pcb);
#endif /* PPP_SERVER */

    pcb->upap.us_clientstate = UPAPCS_INITIAL;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	2200      	movs	r2, #0
 8013112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if PPP_SERVER
    pcb->upap.us_serverstate = UPAPSS_INITIAL;
#endif /* PPP_SERVER */
}
 8013116:	bf00      	nop
 8013118:	3708      	adds	r7, #8
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}
 801311e:	bf00      	nop
 8013120:	08013077 	.word	0x08013077

08013124 <upap_protrej>:
/*
 * upap_protrej - Peer doesn't speak this protocol.
 *
 * This shouldn't happen.  In any case, pretend lower layer went down.
 */
static void upap_protrej(ppp_pcb *pcb) {
 8013124:	b580      	push	{r7, lr}
 8013126:	b082      	sub	sp, #8
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ) {
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013132:	2b03      	cmp	r3, #3
 8013134:	d104      	bne.n	8013140 <upap_protrej+0x1c>
	ppp_error(("PAP authentication failed due to protocol-reject"));
	auth_withpeer_fail(pcb, PPP_PAP);
 8013136:	f24c 0123 	movw	r1, #49187	; 0xc023
 801313a:	6878      	ldr	r0, [r7, #4]
 801313c:	f7fa fb10 	bl	800d760 <auth_withpeer_fail>
    if (pcb->upap.us_serverstate == UPAPSS_LISTEN) {
	ppp_error(("PAP authentication of peer failed (protocol-reject)"));
	auth_peer_fail(pcb, PPP_PAP);
    }
#endif /* PPP_SERVER */
    upap_lowerdown(pcb);
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	f7ff ffd7 	bl	80130f4 <upap_lowerdown>
}
 8013146:	bf00      	nop
 8013148:	3708      	adds	r7, #8
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}

0801314e <upap_input>:


/*
 * upap_input - Input UPAP packet.
 */
static void upap_input(ppp_pcb *pcb, u_char *inpacket, int l) {
 801314e:	b580      	push	{r7, lr}
 8013150:	b088      	sub	sp, #32
 8013152:	af00      	add	r7, sp, #0
 8013154:	60f8      	str	r0, [r7, #12]
 8013156:	60b9      	str	r1, [r7, #8]
 8013158:	607a      	str	r2, [r7, #4]

    /*
     * Parse header (code, id and length).
     * If packet too short, drop it.
     */
    inp = inpacket;
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	61fb      	str	r3, [r7, #28]
    if (l < UPAP_HEADERLEN) {
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	2b03      	cmp	r3, #3
 8013162:	dd37      	ble.n	80131d4 <upap_input+0x86>
	UPAPDEBUG(("pap_input: rcvd short header."));
	return;
    }
    GETCHAR(code, inp);
 8013164:	69fb      	ldr	r3, [r7, #28]
 8013166:	1c5a      	adds	r2, r3, #1
 8013168:	61fa      	str	r2, [r7, #28]
 801316a:	781b      	ldrb	r3, [r3, #0]
 801316c:	76fb      	strb	r3, [r7, #27]
    GETCHAR(id, inp);
 801316e:	69fb      	ldr	r3, [r7, #28]
 8013170:	1c5a      	adds	r2, r3, #1
 8013172:	61fa      	str	r2, [r7, #28]
 8013174:	781b      	ldrb	r3, [r3, #0]
 8013176:	76bb      	strb	r3, [r7, #26]
    GETSHORT(len, inp);
 8013178:	69fb      	ldr	r3, [r7, #28]
 801317a:	1c5a      	adds	r2, r3, #1
 801317c:	61fa      	str	r2, [r7, #28]
 801317e:	781b      	ldrb	r3, [r3, #0]
 8013180:	021b      	lsls	r3, r3, #8
 8013182:	617b      	str	r3, [r7, #20]
 8013184:	69fb      	ldr	r3, [r7, #28]
 8013186:	1c5a      	adds	r2, r3, #1
 8013188:	61fa      	str	r2, [r7, #28]
 801318a:	781b      	ldrb	r3, [r3, #0]
 801318c:	461a      	mov	r2, r3
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	4313      	orrs	r3, r2
 8013192:	617b      	str	r3, [r7, #20]
    if (len < UPAP_HEADERLEN) {
 8013194:	697b      	ldr	r3, [r7, #20]
 8013196:	2b03      	cmp	r3, #3
 8013198:	dd1e      	ble.n	80131d8 <upap_input+0x8a>
	UPAPDEBUG(("pap_input: rcvd illegal length."));
	return;
    }
    if (len > l) {
 801319a:	697a      	ldr	r2, [r7, #20]
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	429a      	cmp	r2, r3
 80131a0:	dc1c      	bgt.n	80131dc <upap_input+0x8e>
	UPAPDEBUG(("pap_input: rcvd short packet."));
	return;
    }
    len -= UPAP_HEADERLEN;
 80131a2:	697b      	ldr	r3, [r7, #20]
 80131a4:	3b04      	subs	r3, #4
 80131a6:	617b      	str	r3, [r7, #20]

    /*
     * Action depends on code.
     */
    switch (code) {
 80131a8:	7efb      	ldrb	r3, [r7, #27]
 80131aa:	2b02      	cmp	r3, #2
 80131ac:	d004      	beq.n	80131b8 <upap_input+0x6a>
 80131ae:	2b03      	cmp	r3, #3
 80131b0:	d009      	beq.n	80131c6 <upap_input+0x78>
 80131b2:	2b01      	cmp	r3, #1
 80131b4:	d014      	beq.n	80131e0 <upap_input+0x92>
    case UPAP_AUTHNAK:
	upap_rauthnak(pcb, inp, id, len);
	break;

    default:				/* XXX Need code reject */
	break;
 80131b6:	e014      	b.n	80131e2 <upap_input+0x94>
	upap_rauthack(pcb, inp, id, len);
 80131b8:	7eba      	ldrb	r2, [r7, #26]
 80131ba:	697b      	ldr	r3, [r7, #20]
 80131bc:	69f9      	ldr	r1, [r7, #28]
 80131be:	68f8      	ldr	r0, [r7, #12]
 80131c0:	f000 f812 	bl	80131e8 <upap_rauthack>
	break;
 80131c4:	e00d      	b.n	80131e2 <upap_input+0x94>
	upap_rauthnak(pcb, inp, id, len);
 80131c6:	7eba      	ldrb	r2, [r7, #26]
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	69f9      	ldr	r1, [r7, #28]
 80131cc:	68f8      	ldr	r0, [r7, #12]
 80131ce:	f000 f843 	bl	8013258 <upap_rauthnak>
	break;
 80131d2:	e006      	b.n	80131e2 <upap_input+0x94>
	return;
 80131d4:	bf00      	nop
 80131d6:	e004      	b.n	80131e2 <upap_input+0x94>
	return;
 80131d8:	bf00      	nop
 80131da:	e002      	b.n	80131e2 <upap_input+0x94>
	return;
 80131dc:	bf00      	nop
 80131de:	e000      	b.n	80131e2 <upap_input+0x94>
	break;
 80131e0:	bf00      	nop
    }
}
 80131e2:	3720      	adds	r7, #32
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bd80      	pop	{r7, pc}

080131e8 <upap_rauthack>:
#endif /* PPP_SERVER */

/*
 * upap_rauthack - Receive Authenticate-Ack.
 */
static void upap_rauthack(ppp_pcb *pcb, u_char *inp, int id, int len) {
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b086      	sub	sp, #24
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	60f8      	str	r0, [r7, #12]
 80131f0:	60b9      	str	r1, [r7, #8]
 80131f2:	607a      	str	r2, [r7, #4]
 80131f4:	603b      	str	r3, [r7, #0]
    u_char msglen;
    char *msg;
    LWIP_UNUSED_ARG(id);

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80131fc:	2b03      	cmp	r3, #3
 80131fe:	d122      	bne.n	8013246 <upap_rauthack+0x5e>
	return;

    /*
     * Parse message.
     */
    if (len < 1) {
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	2b00      	cmp	r3, #0
 8013204:	dd10      	ble.n	8013228 <upap_rauthack+0x40>
	UPAPDEBUG(("pap_rauthack: ignoring missing msg-length."));
    } else {
	GETCHAR(msglen, inp);
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	1c5a      	adds	r2, r3, #1
 801320a:	60ba      	str	r2, [r7, #8]
 801320c:	781b      	ldrb	r3, [r3, #0]
 801320e:	75fb      	strb	r3, [r7, #23]
	if (msglen > 0) {
 8013210:	7dfb      	ldrb	r3, [r7, #23]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d008      	beq.n	8013228 <upap_rauthack+0x40>
	    len -= sizeof (u_char);
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	3b01      	subs	r3, #1
 801321a:	603b      	str	r3, [r7, #0]
	    if (len < msglen) {
 801321c:	7dfa      	ldrb	r2, [r7, #23]
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	429a      	cmp	r2, r3
 8013222:	dc12      	bgt.n	801324a <upap_rauthack+0x62>
		UPAPDEBUG(("pap_rauthack: rcvd short packet."));
		return;
	    }
	    msg = (char *) inp;
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	613b      	str	r3, [r7, #16]
	    PRINTMSG(msg, msglen);
	}
    }

    UNTIMEOUT(upap_timeout, pcb);
 8013228:	68f9      	ldr	r1, [r7, #12]
 801322a:	480a      	ldr	r0, [pc, #40]	; (8013254 <upap_rauthack+0x6c>)
 801322c:	f7fa f8da 	bl	800d3e4 <sys_untimeout>
    pcb->upap.us_clientstate = UPAPCS_OPEN;
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	2204      	movs	r2, #4
 8013234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    auth_withpeer_success(pcb, PPP_PAP, 0);
 8013238:	2200      	movs	r2, #0
 801323a:	f24c 0123 	movw	r1, #49187	; 0xc023
 801323e:	68f8      	ldr	r0, [r7, #12]
 8013240:	f7fa faa2 	bl	800d788 <auth_withpeer_success>
 8013244:	e002      	b.n	801324c <upap_rauthack+0x64>
	return;
 8013246:	bf00      	nop
 8013248:	e000      	b.n	801324c <upap_rauthack+0x64>
		return;
 801324a:	bf00      	nop
}
 801324c:	3718      	adds	r7, #24
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}
 8013252:	bf00      	nop
 8013254:	08013077 	.word	0x08013077

08013258 <upap_rauthnak>:


/*
 * upap_rauthnak - Receive Authenticate-Nak.
 */
static void upap_rauthnak(ppp_pcb *pcb, u_char *inp, int id, int len) {
 8013258:	b580      	push	{r7, lr}
 801325a:	b086      	sub	sp, #24
 801325c:	af00      	add	r7, sp, #0
 801325e:	60f8      	str	r0, [r7, #12]
 8013260:	60b9      	str	r1, [r7, #8]
 8013262:	607a      	str	r2, [r7, #4]
 8013264:	603b      	str	r3, [r7, #0]
    u_char msglen;
    char *msg;
    LWIP_UNUSED_ARG(id);

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801326c:	2b03      	cmp	r3, #3
 801326e:	d121      	bne.n	80132b4 <upap_rauthnak+0x5c>
	return;

    /*
     * Parse message.
     */
    if (len < 1) {
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	2b00      	cmp	r3, #0
 8013274:	dd10      	ble.n	8013298 <upap_rauthnak+0x40>
	UPAPDEBUG(("pap_rauthnak: ignoring missing msg-length."));
    } else {
	GETCHAR(msglen, inp);
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	1c5a      	adds	r2, r3, #1
 801327a:	60ba      	str	r2, [r7, #8]
 801327c:	781b      	ldrb	r3, [r3, #0]
 801327e:	75fb      	strb	r3, [r7, #23]
	if (msglen > 0) {
 8013280:	7dfb      	ldrb	r3, [r7, #23]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d008      	beq.n	8013298 <upap_rauthnak+0x40>
	    len -= sizeof (u_char);
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	3b01      	subs	r3, #1
 801328a:	603b      	str	r3, [r7, #0]
	    if (len < msglen) {
 801328c:	7dfa      	ldrb	r2, [r7, #23]
 801328e:	683b      	ldr	r3, [r7, #0]
 8013290:	429a      	cmp	r2, r3
 8013292:	dc11      	bgt.n	80132b8 <upap_rauthnak+0x60>
		UPAPDEBUG(("pap_rauthnak: rcvd short packet."));
		return;
	    }
	    msg = (char *) inp;
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	613b      	str	r3, [r7, #16]
	    PRINTMSG(msg, msglen);
	}
    }

    UNTIMEOUT(upap_timeout, pcb);
 8013298:	68f9      	ldr	r1, [r7, #12]
 801329a:	4809      	ldr	r0, [pc, #36]	; (80132c0 <upap_rauthnak+0x68>)
 801329c:	f7fa f8a2 	bl	800d3e4 <sys_untimeout>
    pcb->upap.us_clientstate = UPAPCS_BADAUTH;
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	2205      	movs	r2, #5
 80132a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    ppp_error(("PAP authentication failed"));
    auth_withpeer_fail(pcb, PPP_PAP);
 80132a8:	f24c 0123 	movw	r1, #49187	; 0xc023
 80132ac:	68f8      	ldr	r0, [r7, #12]
 80132ae:	f7fa fa57 	bl	800d760 <auth_withpeer_fail>
 80132b2:	e002      	b.n	80132ba <upap_rauthnak+0x62>
	return;
 80132b4:	bf00      	nop
 80132b6:	e000      	b.n	80132ba <upap_rauthnak+0x62>
		return;
 80132b8:	bf00      	nop
}
 80132ba:	3718      	adds	r7, #24
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}
 80132c0:	08013077 	.word	0x08013077

080132c4 <upap_sauthreq>:


/*
 * upap_sauthreq - Send an Authenticate-Request.
 */
static void upap_sauthreq(ppp_pcb *pcb) {
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b086      	sub	sp, #24
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
	pcb->upap.us_userlen + pcb->upap.us_passwdlen;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80132d2:	461a      	mov	r2, r3
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80132da:	4413      	add	r3, r2
 80132dc:	3306      	adds	r3, #6
    outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
 80132de:	617b      	str	r3, [r7, #20]
    p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN +outlen), PBUF_RAM);
 80132e0:	697b      	ldr	r3, [r7, #20]
 80132e2:	b29b      	uxth	r3, r3
 80132e4:	3304      	adds	r3, #4
 80132e6:	b29b      	uxth	r3, r3
 80132e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80132ec:	4619      	mov	r1, r3
 80132ee:	2000      	movs	r0, #0
 80132f0:	f7f2 fc3a 	bl	8005b68 <pbuf_alloc>
 80132f4:	6138      	str	r0, [r7, #16]
    if(NULL == p)
 80132f6:	693b      	ldr	r3, [r7, #16]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	f000 808a 	beq.w	8013412 <upap_sauthreq+0x14e>
        return;
    if(p->tot_len != p->len) {
 80132fe:	693b      	ldr	r3, [r7, #16]
 8013300:	891a      	ldrh	r2, [r3, #8]
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	895b      	ldrh	r3, [r3, #10]
 8013306:	429a      	cmp	r2, r3
 8013308:	d003      	beq.n	8013312 <upap_sauthreq+0x4e>
        pbuf_free(p);
 801330a:	6938      	ldr	r0, [r7, #16]
 801330c:	f7f2 fe96 	bl	800603c <pbuf_free>
        return;
 8013310:	e080      	b.n	8013414 <upap_sauthreq+0x150>
    }

    outp = (u_char*)p->payload;
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	685b      	ldr	r3, [r3, #4]
 8013316:	60fb      	str	r3, [r7, #12]
    MAKEHEADER(outp, PPP_PAP);
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	1c5a      	adds	r2, r3, #1
 801331c:	60fa      	str	r2, [r7, #12]
 801331e:	22ff      	movs	r2, #255	; 0xff
 8013320:	701a      	strb	r2, [r3, #0]
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	1c5a      	adds	r2, r3, #1
 8013326:	60fa      	str	r2, [r7, #12]
 8013328:	2203      	movs	r2, #3
 801332a:	701a      	strb	r2, [r3, #0]
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	1c5a      	adds	r2, r3, #1
 8013330:	60fa      	str	r2, [r7, #12]
 8013332:	22c0      	movs	r2, #192	; 0xc0
 8013334:	701a      	strb	r2, [r3, #0]
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	1c5a      	adds	r2, r3, #1
 801333a:	60fa      	str	r2, [r7, #12]
 801333c:	2223      	movs	r2, #35	; 0x23
 801333e:	701a      	strb	r2, [r3, #0]

    PUTCHAR(UPAP_AUTHREQ, outp);
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	1c5a      	adds	r2, r3, #1
 8013344:	60fa      	str	r2, [r7, #12]
 8013346:	2201      	movs	r2, #1
 8013348:	701a      	strb	r2, [r3, #0]
    PUTCHAR(++pcb->upap.us_id, outp);
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	1c5a      	adds	r2, r3, #1
 801334e:	60fa      	str	r2, [r7, #12]
 8013350:	687a      	ldr	r2, [r7, #4]
 8013352:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 8013356:	3201      	adds	r2, #1
 8013358:	b2d1      	uxtb	r1, r2
 801335a:	687a      	ldr	r2, [r7, #4]
 801335c:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
 8013360:	687a      	ldr	r2, [r7, #4]
 8013362:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 8013366:	701a      	strb	r2, [r3, #0]
    PUTSHORT(outlen, outp);
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	1c5a      	adds	r2, r3, #1
 801336c:	60fa      	str	r2, [r7, #12]
 801336e:	697a      	ldr	r2, [r7, #20]
 8013370:	1212      	asrs	r2, r2, #8
 8013372:	b2d2      	uxtb	r2, r2
 8013374:	701a      	strb	r2, [r3, #0]
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	1c5a      	adds	r2, r3, #1
 801337a:	60fa      	str	r2, [r7, #12]
 801337c:	697a      	ldr	r2, [r7, #20]
 801337e:	b2d2      	uxtb	r2, r2
 8013380:	701a      	strb	r2, [r3, #0]
    PUTCHAR(pcb->upap.us_userlen, outp);
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	1c5a      	adds	r2, r3, #1
 8013386:	60fa      	str	r2, [r7, #12]
 8013388:	687a      	ldr	r2, [r7, #4]
 801338a:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801338e:	701a      	strb	r2, [r3, #0]
    MEMCPY(outp, pcb->upap.us_user, pcb->upap.us_userlen);
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801339a:	461a      	mov	r2, r3
 801339c:	68f8      	ldr	r0, [r7, #12]
 801339e:	f000 fd65 	bl	8013e6c <memcpy>
    INCPTR(pcb->upap.us_userlen, outp);
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80133a8:	461a      	mov	r2, r3
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	4413      	add	r3, r2
 80133ae:	60fb      	str	r3, [r7, #12]
    PUTCHAR(pcb->upap.us_passwdlen, outp);
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	1c5a      	adds	r2, r3, #1
 80133b4:	60fa      	str	r2, [r7, #12]
 80133b6:	687a      	ldr	r2, [r7, #4]
 80133b8:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 80133bc:	701a      	strb	r2, [r3, #0]
    MEMCPY(outp, pcb->upap.us_passwd, pcb->upap.us_passwdlen);
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80133c8:	461a      	mov	r2, r3
 80133ca:	68f8      	ldr	r0, [r7, #12]
 80133cc:	f000 fd4e 	bl	8013e6c <memcpy>

    ppp_write(pcb, p);
 80133d0:	6939      	ldr	r1, [r7, #16]
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f7fe ff80 	bl	80122d8 <ppp_write>

    TIMEOUT(upap_timeout, pcb, pcb->settings.pap_timeout_time);
 80133d8:	6879      	ldr	r1, [r7, #4]
 80133da:	4810      	ldr	r0, [pc, #64]	; (801341c <upap_sauthreq+0x158>)
 80133dc:	f7fa f802 	bl	800d3e4 <sys_untimeout>
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	7b1b      	ldrb	r3, [r3, #12]
 80133e4:	461a      	mov	r2, r3
 80133e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80133ea:	fb03 f302 	mul.w	r3, r3, r2
 80133ee:	687a      	ldr	r2, [r7, #4]
 80133f0:	490a      	ldr	r1, [pc, #40]	; (801341c <upap_sauthreq+0x158>)
 80133f2:	4618      	mov	r0, r3
 80133f4:	f7f9 ffca 	bl	800d38c <sys_timeout>
    ++pcb->upap.us_transmits;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80133fe:	3301      	adds	r3, #1
 8013400:	b2da      	uxtb	r2, r3
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    pcb->upap.us_clientstate = UPAPCS_AUTHREQ;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	2203      	movs	r2, #3
 801340c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013410:	e000      	b.n	8013414 <upap_sauthreq+0x150>
        return;
 8013412:	bf00      	nop
}
 8013414:	3718      	adds	r7, #24
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}
 801341a:	bf00      	nop
 801341c:	08013077 	.word	0x08013077

08013420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8013420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8013458 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8013424:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8013426:	e003      	b.n	8013430 <LoopCopyDataInit>

08013428 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8013428:	4b0c      	ldr	r3, [pc, #48]	; (801345c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801342a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801342c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801342e:	3104      	adds	r1, #4

08013430 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8013430:	480b      	ldr	r0, [pc, #44]	; (8013460 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8013432:	4b0c      	ldr	r3, [pc, #48]	; (8013464 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8013434:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8013436:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8013438:	d3f6      	bcc.n	8013428 <CopyDataInit>
  ldr  r2, =_sbss
 801343a:	4a0b      	ldr	r2, [pc, #44]	; (8013468 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801343c:	e002      	b.n	8013444 <LoopFillZerobss>

0801343e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801343e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8013440:	f842 3b04 	str.w	r3, [r2], #4

08013444 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8013444:	4b09      	ldr	r3, [pc, #36]	; (801346c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8013446:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8013448:	d3f9      	bcc.n	801343e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801344a:	f000 f8d5 	bl	80135f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801344e:	f000 fce9 	bl	8013e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013452:	f7ee f805 	bl	8001460 <main>
  bx  lr    
 8013456:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8013458:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 801345c:	08017f04 	.word	0x08017f04
  ldr  r0, =_sdata
 8013460:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8013464:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8013468:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 801346c:	20002480 	.word	0x20002480

08013470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013470:	e7fe      	b.n	8013470 <ADC_IRQHandler>

08013472 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8013472:	b480      	push	{r7}
 8013474:	af00      	add	r7, sp, #0
}
 8013476:	bf00      	nop
 8013478:	46bd      	mov	sp, r7
 801347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347e:	4770      	bx	lr

08013480 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8013480:	b480      	push	{r7}
 8013482:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8013484:	e7fe      	b.n	8013484 <HardFault_Handler+0x4>

08013486 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8013486:	b480      	push	{r7}
 8013488:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 801348a:	e7fe      	b.n	801348a <MemManage_Handler+0x4>

0801348c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 801348c:	b480      	push	{r7}
 801348e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8013490:	e7fe      	b.n	8013490 <BusFault_Handler+0x4>

08013492 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8013492:	b480      	push	{r7}
 8013494:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8013496:	e7fe      	b.n	8013496 <UsageFault_Handler+0x4>

08013498 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8013498:	b480      	push	{r7}
 801349a:	af00      	add	r7, sp, #0
}
 801349c:	bf00      	nop
 801349e:	46bd      	mov	sp, r7
 80134a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a4:	4770      	bx	lr

080134a6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80134a6:	b480      	push	{r7}
 80134a8:	af00      	add	r7, sp, #0
}
 80134aa:	bf00      	nop
 80134ac:	46bd      	mov	sp, r7
 80134ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b2:	4770      	bx	lr

080134b4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80134b4:	b480      	push	{r7}
 80134b6:	af00      	add	r7, sp, #0
}
 80134b8:	bf00      	nop
 80134ba:	46bd      	mov	sp, r7
 80134bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c0:	4770      	bx	lr

080134c2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80134c2:	b480      	push	{r7}
 80134c4:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80134c6:	bf00      	nop
 80134c8:	46bd      	mov	sp, r7
 80134ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ce:	4770      	bx	lr

080134d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80134d0:	b480      	push	{r7}
 80134d2:	af00      	add	r7, sp, #0
	errno = ENOSYS;
 80134d4:	4b04      	ldr	r3, [pc, #16]	; (80134e8 <_getpid+0x18>)
 80134d6:	2226      	movs	r2, #38	; 0x26
 80134d8:	601a      	str	r2, [r3, #0]
	return -1;
 80134da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80134de:	4618      	mov	r0, r3
 80134e0:	46bd      	mov	sp, r7
 80134e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e6:	4770      	bx	lr
 80134e8:	2000247c 	.word	0x2000247c

080134ec <_kill>:
  errno = ENOSYS;
  return -1;
}

int _kill(int32_t pid, int32_t sig)
{
 80134ec:	b480      	push	{r7}
 80134ee:	b083      	sub	sp, #12
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
 80134f4:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 80134f6:	4b05      	ldr	r3, [pc, #20]	; (801350c <_kill+0x20>)
 80134f8:	2226      	movs	r2, #38	; 0x26
 80134fa:	601a      	str	r2, [r3, #0]
	return -1;
 80134fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013500:	4618      	mov	r0, r3
 8013502:	370c      	adds	r7, #12
 8013504:	46bd      	mov	sp, r7
 8013506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350a:	4770      	bx	lr
 801350c:	2000247c 	.word	0x2000247c

08013510 <_exit>:

void _exit(int32_t status)
{
 8013510:	b480      	push	{r7}
 8013512:	b083      	sub	sp, #12
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
	while (1) {}		/* Make sure we hang here */
 8013518:	e7fe      	b.n	8013518 <_exit+0x8>
	...

0801351c <_write>:
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 801351c:	b480      	push	{r7}
 801351e:	b085      	sub	sp, #20
 8013520:	af00      	add	r7, sp, #0
 8013522:	60f8      	str	r0, [r7, #12]
 8013524:	60b9      	str	r1, [r7, #8]
 8013526:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	
	errno = ENOSYS;
 8013528:	4b05      	ldr	r3, [pc, #20]	; (8013540 <_write+0x24>)
 801352a:	2226      	movs	r2, #38	; 0x26
 801352c:	601a      	str	r2, [r3, #0]
	return -1;
 801352e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013532:	4618      	mov	r0, r3
 8013534:	3714      	adds	r7, #20
 8013536:	46bd      	mov	sp, r7
 8013538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353c:	4770      	bx	lr
 801353e:	bf00      	nop
 8013540:	2000247c 	.word	0x2000247c

08013544 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8013544:	b480      	push	{r7}
 8013546:	b085      	sub	sp, #20
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 801354c:	4b0b      	ldr	r3, [pc, #44]	; (801357c <_sbrk+0x38>)
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d102      	bne.n	801355a <_sbrk+0x16>
		heap_end = & end;
 8013554:	4b09      	ldr	r3, [pc, #36]	; (801357c <_sbrk+0x38>)
 8013556:	4a0a      	ldr	r2, [pc, #40]	; (8013580 <_sbrk+0x3c>)
 8013558:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 801355a:	4b08      	ldr	r3, [pc, #32]	; (801357c <_sbrk+0x38>)
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8013560:	4b06      	ldr	r3, [pc, #24]	; (801357c <_sbrk+0x38>)
 8013562:	681a      	ldr	r2, [r3, #0]
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	4413      	add	r3, r2
 8013568:	4a04      	ldr	r2, [pc, #16]	; (801357c <_sbrk+0x38>)
 801356a:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 801356c:	68fb      	ldr	r3, [r7, #12]
}
 801356e:	4618      	mov	r0, r3
 8013570:	3714      	adds	r7, #20
 8013572:	46bd      	mov	sp, r7
 8013574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013578:	4770      	bx	lr
 801357a:	bf00      	nop
 801357c:	2000076c 	.word	0x2000076c
 8013580:	20002480 	.word	0x20002480

08013584 <_close>:

int _close(int32_t file)
{
 8013584:	b480      	push	{r7}
 8013586:	b083      	sub	sp, #12
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 801358c:	4b05      	ldr	r3, [pc, #20]	; (80135a4 <_close+0x20>)
 801358e:	2226      	movs	r2, #38	; 0x26
 8013590:	601a      	str	r2, [r3, #0]
	return -1;
 8013592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013596:	4618      	mov	r0, r3
 8013598:	370c      	adds	r7, #12
 801359a:	46bd      	mov	sp, r7
 801359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a0:	4770      	bx	lr
 80135a2:	bf00      	nop
 80135a4:	2000247c 	.word	0x2000247c

080135a8 <_lseek>:
	errno = ENOSYS;
	return 0;
}

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 80135a8:	b480      	push	{r7}
 80135aa:	b085      	sub	sp, #20
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	60f8      	str	r0, [r7, #12]
 80135b0:	60b9      	str	r1, [r7, #8]
 80135b2:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80135b4:	4b05      	ldr	r3, [pc, #20]	; (80135cc <_lseek+0x24>)
 80135b6:	2226      	movs	r2, #38	; 0x26
 80135b8:	601a      	str	r2, [r3, #0]
	return -1;
 80135ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80135be:	4618      	mov	r0, r3
 80135c0:	3714      	adds	r7, #20
 80135c2:	46bd      	mov	sp, r7
 80135c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c8:	4770      	bx	lr
 80135ca:	bf00      	nop
 80135cc:	2000247c 	.word	0x2000247c

080135d0 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 80135d0:	b480      	push	{r7}
 80135d2:	b085      	sub	sp, #20
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	60f8      	str	r0, [r7, #12]
 80135d8:	60b9      	str	r1, [r7, #8]
 80135da:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80135dc:	4b05      	ldr	r3, [pc, #20]	; (80135f4 <_read+0x24>)
 80135de:	2226      	movs	r2, #38	; 0x26
 80135e0:	601a      	str	r2, [r3, #0]
	return -1;
 80135e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80135e6:	4618      	mov	r0, r3
 80135e8:	3714      	adds	r7, #20
 80135ea:	46bd      	mov	sp, r7
 80135ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f0:	4770      	bx	lr
 80135f2:	bf00      	nop
 80135f4:	2000247c 	.word	0x2000247c

080135f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80135fc:	4a16      	ldr	r2, [pc, #88]	; (8013658 <SystemInit+0x60>)
 80135fe:	4b16      	ldr	r3, [pc, #88]	; (8013658 <SystemInit+0x60>)
 8013600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801360c:	4a13      	ldr	r2, [pc, #76]	; (801365c <SystemInit+0x64>)
 801360e:	4b13      	ldr	r3, [pc, #76]	; (801365c <SystemInit+0x64>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	f043 0301 	orr.w	r3, r3, #1
 8013616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8013618:	4b10      	ldr	r3, [pc, #64]	; (801365c <SystemInit+0x64>)
 801361a:	2200      	movs	r2, #0
 801361c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801361e:	4a0f      	ldr	r2, [pc, #60]	; (801365c <SystemInit+0x64>)
 8013620:	4b0e      	ldr	r3, [pc, #56]	; (801365c <SystemInit+0x64>)
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8013628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801362c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801362e:	4b0b      	ldr	r3, [pc, #44]	; (801365c <SystemInit+0x64>)
 8013630:	4a0b      	ldr	r2, [pc, #44]	; (8013660 <SystemInit+0x68>)
 8013632:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8013634:	4a09      	ldr	r2, [pc, #36]	; (801365c <SystemInit+0x64>)
 8013636:	4b09      	ldr	r3, [pc, #36]	; (801365c <SystemInit+0x64>)
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801363e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8013640:	4b06      	ldr	r3, [pc, #24]	; (801365c <SystemInit+0x64>)
 8013642:	2200      	movs	r2, #0
 8013644:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8013646:	f000 f80d 	bl	8013664 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801364a:	4b03      	ldr	r3, [pc, #12]	; (8013658 <SystemInit+0x60>)
 801364c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013650:	609a      	str	r2, [r3, #8]
#endif
}
 8013652:	bf00      	nop
 8013654:	bd80      	pop	{r7, pc}
 8013656:	bf00      	nop
 8013658:	e000ed00 	.word	0xe000ed00
 801365c:	40023800 	.word	0x40023800
 8013660:	24003010 	.word	0x24003010

08013664 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8013664:	b480      	push	{r7}
 8013666:	b083      	sub	sp, #12
 8013668:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 801366a:	2300      	movs	r3, #0
 801366c:	607b      	str	r3, [r7, #4]
 801366e:	2300      	movs	r3, #0
 8013670:	603b      	str	r3, [r7, #0]
  //RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8013672:	4b33      	ldr	r3, [pc, #204]	; (8013740 <SetSysClock+0xdc>)
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801367a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	3301      	adds	r3, #1
 8013680:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d103      	bne.n	8013690 <SetSysClock+0x2c>
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 801368e:	d1f0      	bne.n	8013672 <SetSysClock+0xe>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8013690:	4b2b      	ldr	r3, [pc, #172]	; (8013740 <SetSysClock+0xdc>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013698:	2b00      	cmp	r3, #0
 801369a:	d002      	beq.n	80136a2 <SetSysClock+0x3e>
  {
    HSEStatus = (uint32_t)0x01;
 801369c:	2301      	movs	r3, #1
 801369e:	603b      	str	r3, [r7, #0]
 80136a0:	e001      	b.n	80136a6 <SetSysClock+0x42>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80136a2:	2300      	movs	r3, #0
 80136a4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80136a6:	683b      	ldr	r3, [r7, #0]
 80136a8:	2b01      	cmp	r3, #1
 80136aa:	d142      	bne.n	8013732 <SetSysClock+0xce>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80136ac:	4a24      	ldr	r2, [pc, #144]	; (8013740 <SetSysClock+0xdc>)
 80136ae:	4b24      	ldr	r3, [pc, #144]	; (8013740 <SetSysClock+0xdc>)
 80136b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136b6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80136b8:	4a22      	ldr	r2, [pc, #136]	; (8013744 <SetSysClock+0xe0>)
 80136ba:	4b22      	ldr	r3, [pc, #136]	; (8013744 <SetSysClock+0xe0>)
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80136c2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80136c4:	4a1e      	ldr	r2, [pc, #120]	; (8013740 <SetSysClock+0xdc>)
 80136c6:	4b1e      	ldr	r3, [pc, #120]	; (8013740 <SetSysClock+0xdc>)
 80136c8:	689b      	ldr	r3, [r3, #8]
 80136ca:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80136cc:	4a1c      	ldr	r2, [pc, #112]	; (8013740 <SetSysClock+0xdc>)
 80136ce:	4b1c      	ldr	r3, [pc, #112]	; (8013740 <SetSysClock+0xdc>)
 80136d0:	689b      	ldr	r3, [r3, #8]
 80136d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80136d6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80136d8:	4a19      	ldr	r2, [pc, #100]	; (8013740 <SetSysClock+0xdc>)
 80136da:	4b19      	ldr	r3, [pc, #100]	; (8013740 <SetSysClock+0xdc>)
 80136dc:	689b      	ldr	r3, [r3, #8]
 80136de:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80136e2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80136e4:	4b16      	ldr	r3, [pc, #88]	; (8013740 <SetSysClock+0xdc>)
 80136e6:	4a18      	ldr	r2, [pc, #96]	; (8013748 <SetSysClock+0xe4>)
 80136e8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80136ea:	4a15      	ldr	r2, [pc, #84]	; (8013740 <SetSysClock+0xdc>)
 80136ec:	4b14      	ldr	r3, [pc, #80]	; (8013740 <SetSysClock+0xdc>)
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80136f4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80136f6:	bf00      	nop
 80136f8:	4b11      	ldr	r3, [pc, #68]	; (8013740 <SetSysClock+0xdc>)
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013700:	2b00      	cmp	r3, #0
 8013702:	d0f9      	beq.n	80136f8 <SetSysClock+0x94>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8013704:	4b11      	ldr	r3, [pc, #68]	; (801374c <SetSysClock+0xe8>)
 8013706:	f240 7205 	movw	r2, #1797	; 0x705
 801370a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 801370c:	4a0c      	ldr	r2, [pc, #48]	; (8013740 <SetSysClock+0xdc>)
 801370e:	4b0c      	ldr	r3, [pc, #48]	; (8013740 <SetSysClock+0xdc>)
 8013710:	689b      	ldr	r3, [r3, #8]
 8013712:	f023 0303 	bic.w	r3, r3, #3
 8013716:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8013718:	4a09      	ldr	r2, [pc, #36]	; (8013740 <SetSysClock+0xdc>)
 801371a:	4b09      	ldr	r3, [pc, #36]	; (8013740 <SetSysClock+0xdc>)
 801371c:	689b      	ldr	r3, [r3, #8]
 801371e:	f043 0302 	orr.w	r3, r3, #2
 8013722:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8013724:	bf00      	nop
 8013726:	4b06      	ldr	r3, [pc, #24]	; (8013740 <SetSysClock+0xdc>)
 8013728:	689b      	ldr	r3, [r3, #8]
 801372a:	f003 030c 	and.w	r3, r3, #12
 801372e:	2b08      	cmp	r3, #8
 8013730:	d1f9      	bne.n	8013726 <SetSysClock+0xc2>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8013732:	bf00      	nop
 8013734:	370c      	adds	r7, #12
 8013736:	46bd      	mov	sp, r7
 8013738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373c:	4770      	bx	lr
 801373e:	bf00      	nop
 8013740:	40023800 	.word	0x40023800
 8013744:	40007000 	.word	0x40007000
 8013748:	07405419 	.word	0x07405419
 801374c:	40023c00 	.word	0x40023c00

08013750 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8013750:	b480      	push	{r7}
 8013752:	b087      	sub	sp, #28
 8013754:	af00      	add	r7, sp, #0
 8013756:	60f8      	str	r0, [r7, #12]
 8013758:	60b9      	str	r1, [r7, #8]
 801375a:	607a      	str	r2, [r7, #4]
	int div = 1;
 801375c:	2301      	movs	r3, #1
 801375e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8013760:	e004      	b.n	801376c <ts_itoa+0x1c>
		div *= base;
 8013762:	697b      	ldr	r3, [r7, #20]
 8013764:	687a      	ldr	r2, [r7, #4]
 8013766:	fb02 f303 	mul.w	r3, r2, r3
 801376a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 801376c:	697b      	ldr	r3, [r7, #20]
 801376e:	68ba      	ldr	r2, [r7, #8]
 8013770:	fbb2 f2f3 	udiv	r2, r2, r3
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	429a      	cmp	r2, r3
 8013778:	d2f3      	bcs.n	8013762 <ts_itoa+0x12>

	while (div != 0)
 801377a:	e029      	b.n	80137d0 <ts_itoa+0x80>
	{
		int num = d/div;
 801377c:	697b      	ldr	r3, [r7, #20]
 801377e:	68ba      	ldr	r2, [r7, #8]
 8013780:	fbb2 f3f3 	udiv	r3, r2, r3
 8013784:	613b      	str	r3, [r7, #16]
		d = d%div;
 8013786:	697a      	ldr	r2, [r7, #20]
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	fbb3 f1f2 	udiv	r1, r3, r2
 801378e:	fb02 f201 	mul.w	r2, r2, r1
 8013792:	1a9b      	subs	r3, r3, r2
 8013794:	60bb      	str	r3, [r7, #8]
		div /= base;
 8013796:	697a      	ldr	r2, [r7, #20]
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	fb92 f3f3 	sdiv	r3, r2, r3
 801379e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	2b09      	cmp	r3, #9
 80137a4:	dd0a      	ble.n	80137bc <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	1c59      	adds	r1, r3, #1
 80137ac:	68fa      	ldr	r2, [r7, #12]
 80137ae:	6011      	str	r1, [r2, #0]
 80137b0:	693a      	ldr	r2, [r7, #16]
 80137b2:	b2d2      	uxtb	r2, r2
 80137b4:	3237      	adds	r2, #55	; 0x37
 80137b6:	b2d2      	uxtb	r2, r2
 80137b8:	701a      	strb	r2, [r3, #0]
 80137ba:	e009      	b.n	80137d0 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	1c59      	adds	r1, r3, #1
 80137c2:	68fa      	ldr	r2, [r7, #12]
 80137c4:	6011      	str	r1, [r2, #0]
 80137c6:	693a      	ldr	r2, [r7, #16]
 80137c8:	b2d2      	uxtb	r2, r2
 80137ca:	3230      	adds	r2, #48	; 0x30
 80137cc:	b2d2      	uxtb	r2, r2
 80137ce:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80137d0:	697b      	ldr	r3, [r7, #20]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d1d2      	bne.n	801377c <ts_itoa+0x2c>
	}
}
 80137d6:	bf00      	nop
 80137d8:	371c      	adds	r7, #28
 80137da:	46bd      	mov	sp, r7
 80137dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e0:	4770      	bx	lr

080137e2 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80137e2:	b580      	push	{r7, lr}
 80137e4:	b088      	sub	sp, #32
 80137e6:	af00      	add	r7, sp, #0
 80137e8:	60f8      	str	r0, [r7, #12]
 80137ea:	60b9      	str	r1, [r7, #8]
 80137ec:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80137f2:	e07d      	b.n	80138f0 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	781b      	ldrb	r3, [r3, #0]
 80137f8:	2b25      	cmp	r3, #37	; 0x25
 80137fa:	d171      	bne.n	80138e0 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80137fc:	68bb      	ldr	r3, [r7, #8]
 80137fe:	3301      	adds	r3, #1
 8013800:	60bb      	str	r3, [r7, #8]
 8013802:	68bb      	ldr	r3, [r7, #8]
 8013804:	781b      	ldrb	r3, [r3, #0]
 8013806:	2b64      	cmp	r3, #100	; 0x64
 8013808:	d01e      	beq.n	8013848 <ts_formatstring+0x66>
 801380a:	2b64      	cmp	r3, #100	; 0x64
 801380c:	dc06      	bgt.n	801381c <ts_formatstring+0x3a>
 801380e:	2b58      	cmp	r3, #88	; 0x58
 8013810:	d050      	beq.n	80138b4 <ts_formatstring+0xd2>
 8013812:	2b63      	cmp	r3, #99	; 0x63
 8013814:	d00e      	beq.n	8013834 <ts_formatstring+0x52>
 8013816:	2b25      	cmp	r3, #37	; 0x25
 8013818:	d058      	beq.n	80138cc <ts_formatstring+0xea>
 801381a:	e05d      	b.n	80138d8 <ts_formatstring+0xf6>
 801381c:	2b73      	cmp	r3, #115	; 0x73
 801381e:	d02b      	beq.n	8013878 <ts_formatstring+0x96>
 8013820:	2b73      	cmp	r3, #115	; 0x73
 8013822:	dc02      	bgt.n	801382a <ts_formatstring+0x48>
 8013824:	2b69      	cmp	r3, #105	; 0x69
 8013826:	d00f      	beq.n	8013848 <ts_formatstring+0x66>
 8013828:	e056      	b.n	80138d8 <ts_formatstring+0xf6>
 801382a:	2b75      	cmp	r3, #117	; 0x75
 801382c:	d037      	beq.n	801389e <ts_formatstring+0xbc>
 801382e:	2b78      	cmp	r3, #120	; 0x78
 8013830:	d040      	beq.n	80138b4 <ts_formatstring+0xd2>
 8013832:	e051      	b.n	80138d8 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	1c5a      	adds	r2, r3, #1
 8013838:	60fa      	str	r2, [r7, #12]
 801383a:	687a      	ldr	r2, [r7, #4]
 801383c:	1d11      	adds	r1, r2, #4
 801383e:	6079      	str	r1, [r7, #4]
 8013840:	6812      	ldr	r2, [r2, #0]
 8013842:	b2d2      	uxtb	r2, r2
 8013844:	701a      	strb	r2, [r3, #0]
				break;
 8013846:	e047      	b.n	80138d8 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	1d1a      	adds	r2, r3, #4
 801384c:	607a      	str	r2, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8013852:	69fb      	ldr	r3, [r7, #28]
 8013854:	2b00      	cmp	r3, #0
 8013856:	da07      	bge.n	8013868 <ts_formatstring+0x86>
					{
						val *= -1;
 8013858:	69fb      	ldr	r3, [r7, #28]
 801385a:	425b      	negs	r3, r3
 801385c:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	1c5a      	adds	r2, r3, #1
 8013862:	60fa      	str	r2, [r7, #12]
 8013864:	222d      	movs	r2, #45	; 0x2d
 8013866:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8013868:	69f9      	ldr	r1, [r7, #28]
 801386a:	f107 030c 	add.w	r3, r7, #12
 801386e:	220a      	movs	r2, #10
 8013870:	4618      	mov	r0, r3
 8013872:	f7ff ff6d 	bl	8013750 <ts_itoa>
				}
				break;
 8013876:	e02f      	b.n	80138d8 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	1d1a      	adds	r2, r3, #4
 801387c:	607a      	str	r2, [r7, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8013882:	e007      	b.n	8013894 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	1c5a      	adds	r2, r3, #1
 8013888:	60fa      	str	r2, [r7, #12]
 801388a:	69ba      	ldr	r2, [r7, #24]
 801388c:	1c51      	adds	r1, r2, #1
 801388e:	61b9      	str	r1, [r7, #24]
 8013890:	7812      	ldrb	r2, [r2, #0]
 8013892:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8013894:	69bb      	ldr	r3, [r7, #24]
 8013896:	781b      	ldrb	r3, [r3, #0]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d1f3      	bne.n	8013884 <ts_formatstring+0xa2>
					}
				}
				break;
 801389c:	e01c      	b.n	80138d8 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	1d1a      	adds	r2, r3, #4
 80138a2:	607a      	str	r2, [r7, #4]
 80138a4:	6819      	ldr	r1, [r3, #0]
 80138a6:	f107 030c 	add.w	r3, r7, #12
 80138aa:	220a      	movs	r2, #10
 80138ac:	4618      	mov	r0, r3
 80138ae:	f7ff ff4f 	bl	8013750 <ts_itoa>
				break;
 80138b2:	e011      	b.n	80138d8 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	1d1a      	adds	r2, r3, #4
 80138b8:	607a      	str	r2, [r7, #4]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	4619      	mov	r1, r3
 80138be:	f107 030c 	add.w	r3, r7, #12
 80138c2:	2210      	movs	r2, #16
 80138c4:	4618      	mov	r0, r3
 80138c6:	f7ff ff43 	bl	8013750 <ts_itoa>
				break;
 80138ca:	e005      	b.n	80138d8 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	1c5a      	adds	r2, r3, #1
 80138d0:	60fa      	str	r2, [r7, #12]
 80138d2:	2225      	movs	r2, #37	; 0x25
 80138d4:	701a      	strb	r2, [r3, #0]
				  break;
 80138d6:	bf00      	nop
			}
			fmt++;
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	3301      	adds	r3, #1
 80138dc:	60bb      	str	r3, [r7, #8]
 80138de:	e007      	b.n	80138f0 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	1c5a      	adds	r2, r3, #1
 80138e4:	60fa      	str	r2, [r7, #12]
 80138e6:	68ba      	ldr	r2, [r7, #8]
 80138e8:	1c51      	adds	r1, r2, #1
 80138ea:	60b9      	str	r1, [r7, #8]
 80138ec:	7812      	ldrb	r2, [r2, #0]
 80138ee:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80138f0:	68bb      	ldr	r3, [r7, #8]
 80138f2:	781b      	ldrb	r3, [r3, #0]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	f47f af7d 	bne.w	80137f4 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	2200      	movs	r2, #0
 80138fe:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	461a      	mov	r2, r3
 8013904:	697b      	ldr	r3, [r7, #20]
 8013906:	1ad3      	subs	r3, r2, r3
}
 8013908:	4618      	mov	r0, r3
 801390a:	3720      	adds	r7, #32
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}

08013910 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8013910:	b480      	push	{r7}
 8013912:	b085      	sub	sp, #20
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	6039      	str	r1, [r7, #0]
	int length = 0;
 801391a:	2300      	movs	r3, #0
 801391c:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 801391e:	e081      	b.n	8013a24 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	781b      	ldrb	r3, [r3, #0]
 8013924:	2b25      	cmp	r3, #37	; 0x25
 8013926:	d177      	bne.n	8013a18 <ts_formatlength+0x108>
		{
			++fmt;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	3301      	adds	r3, #1
 801392c:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	781b      	ldrb	r3, [r3, #0]
 8013932:	3b58      	subs	r3, #88	; 0x58
 8013934:	2b20      	cmp	r3, #32
 8013936:	d86a      	bhi.n	8013a0e <ts_formatlength+0xfe>
 8013938:	a201      	add	r2, pc, #4	; (adr r2, 8013940 <ts_formatlength+0x30>)
 801393a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801393e:	bf00      	nop
 8013940:	08013a01 	.word	0x08013a01
 8013944:	08013a0f 	.word	0x08013a0f
 8013948:	08013a0f 	.word	0x08013a0f
 801394c:	08013a0f 	.word	0x08013a0f
 8013950:	08013a0f 	.word	0x08013a0f
 8013954:	08013a0f 	.word	0x08013a0f
 8013958:	08013a0f 	.word	0x08013a0f
 801395c:	08013a0f 	.word	0x08013a0f
 8013960:	08013a0f 	.word	0x08013a0f
 8013964:	08013a0f 	.word	0x08013a0f
 8013968:	08013a0f 	.word	0x08013a0f
 801396c:	080139c5 	.word	0x080139c5
 8013970:	080139d3 	.word	0x080139d3
 8013974:	08013a0f 	.word	0x08013a0f
 8013978:	08013a0f 	.word	0x08013a0f
 801397c:	08013a0f 	.word	0x08013a0f
 8013980:	08013a0f 	.word	0x08013a0f
 8013984:	080139d3 	.word	0x080139d3
 8013988:	08013a0f 	.word	0x08013a0f
 801398c:	08013a0f 	.word	0x08013a0f
 8013990:	08013a0f 	.word	0x08013a0f
 8013994:	08013a0f 	.word	0x08013a0f
 8013998:	08013a0f 	.word	0x08013a0f
 801399c:	08013a0f 	.word	0x08013a0f
 80139a0:	08013a0f 	.word	0x08013a0f
 80139a4:	08013a0f 	.word	0x08013a0f
 80139a8:	08013a0f 	.word	0x08013a0f
 80139ac:	080139e1 	.word	0x080139e1
 80139b0:	08013a0f 	.word	0x08013a0f
 80139b4:	080139d3 	.word	0x080139d3
 80139b8:	08013a0f 	.word	0x08013a0f
 80139bc:	08013a0f 	.word	0x08013a0f
 80139c0:	08013a01 	.word	0x08013a01
			{
			  case 'c':
		  		  va_arg(va, int);
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	3304      	adds	r3, #4
 80139c8:	603b      	str	r3, [r7, #0]
				  ++length;
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	3301      	adds	r3, #1
 80139ce:	60fb      	str	r3, [r7, #12]
				  break;
 80139d0:	e025      	b.n	8013a1e <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	330b      	adds	r3, #11
 80139d6:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	3304      	adds	r3, #4
 80139dc:	603b      	str	r3, [r7, #0]
				  break;
 80139de:	e01e      	b.n	8013a1e <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	1d1a      	adds	r2, r3, #4
 80139e4:	603a      	str	r2, [r7, #0]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80139ea:	e002      	b.n	80139f2 <ts_formatlength+0xe2>
			  			  ++length;
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	3301      	adds	r3, #1
 80139f0:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	1c5a      	adds	r2, r3, #1
 80139f6:	60ba      	str	r2, [r7, #8]
 80139f8:	781b      	ldrb	r3, [r3, #0]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d1f6      	bne.n	80139ec <ts_formatlength+0xdc>
			  	  }
				  break;
 80139fe:	e00e      	b.n	8013a1e <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	3308      	adds	r3, #8
 8013a04:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	3304      	adds	r3, #4
 8013a0a:	603b      	str	r3, [r7, #0]
				  break;
 8013a0c:	e007      	b.n	8013a1e <ts_formatlength+0x10e>
			  default:
				  ++length;
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	3301      	adds	r3, #1
 8013a12:	60fb      	str	r3, [r7, #12]
				  break;
 8013a14:	bf00      	nop
 8013a16:	e002      	b.n	8013a1e <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	3301      	adds	r3, #1
 8013a1c:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	3301      	adds	r3, #1
 8013a22:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	781b      	ldrb	r3, [r3, #0]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	f47f af79 	bne.w	8013920 <ts_formatlength+0x10>
	}
	return length;
 8013a2e:	68fb      	ldr	r3, [r7, #12]
}
 8013a30:	4618      	mov	r0, r3
 8013a32:	3714      	adds	r7, #20
 8013a34:	46bd      	mov	sp, r7
 8013a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3a:	4770      	bx	lr

08013a3c <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8013a3c:	b40e      	push	{r1, r2, r3}
 8013a3e:	b580      	push	{r7, lr}
 8013a40:	b085      	sub	sp, #20
 8013a42:	af00      	add	r7, sp, #0
 8013a44:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8013a46:	f107 0320 	add.w	r3, r7, #32
 8013a4a:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8013a4c:	68ba      	ldr	r2, [r7, #8]
 8013a4e:	69f9      	ldr	r1, [r7, #28]
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	f7ff fec6 	bl	80137e2 <ts_formatstring>
 8013a56:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8013a58:	68fb      	ldr	r3, [r7, #12]
}
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	3714      	adds	r7, #20
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013a64:	b003      	add	sp, #12
 8013a66:	4770      	bx	lr

08013a68 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8013a68:	b40f      	push	{r0, r1, r2, r3}
 8013a6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a6e:	b085      	sub	sp, #20
 8013a70:	af00      	add	r7, sp, #0
	int length = 0;
 8013a72:	2300      	movs	r3, #0
 8013a74:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8013a76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013a7a:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8013a7c:	6839      	ldr	r1, [r7, #0]
 8013a7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a80:	f7ff ff46 	bl	8013910 <ts_formatlength>
 8013a84:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8013a86:	466b      	mov	r3, sp
 8013a88:	461e      	mov	r6, r3
		char buf[length];
 8013a8a:	68f9      	ldr	r1, [r7, #12]
 8013a8c:	1e4b      	subs	r3, r1, #1
 8013a8e:	60bb      	str	r3, [r7, #8]
 8013a90:	460b      	mov	r3, r1
 8013a92:	461a      	mov	r2, r3
 8013a94:	f04f 0300 	mov.w	r3, #0
 8013a98:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8013a9c:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8013aa0:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8013aa4:	460b      	mov	r3, r1
 8013aa6:	461a      	mov	r2, r3
 8013aa8:	f04f 0300 	mov.w	r3, #0
 8013aac:	00dd      	lsls	r5, r3, #3
 8013aae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8013ab2:	00d4      	lsls	r4, r2, #3
 8013ab4:	460b      	mov	r3, r1
 8013ab6:	3307      	adds	r3, #7
 8013ab8:	08db      	lsrs	r3, r3, #3
 8013aba:	00db      	lsls	r3, r3, #3
 8013abc:	ebad 0d03 	sub.w	sp, sp, r3
 8013ac0:	466b      	mov	r3, sp
 8013ac2:	3300      	adds	r3, #0
 8013ac4:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8013ac6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013aca:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	683a      	ldr	r2, [r7, #0]
 8013ad0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f7ff fe85 	bl	80137e2 <ts_formatstring>
 8013ad8:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	68fa      	ldr	r2, [r7, #12]
 8013ade:	4619      	mov	r1, r3
 8013ae0:	2001      	movs	r0, #1
 8013ae2:	f7ff fd1b 	bl	801351c <_write>
 8013ae6:	60f8      	str	r0, [r7, #12]
 8013ae8:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8013aea:	68fb      	ldr	r3, [r7, #12]
}
 8013aec:	4618      	mov	r0, r3
 8013aee:	3714      	adds	r7, #20
 8013af0:	46bd      	mov	sp, r7
 8013af2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013af6:	b004      	add	sp, #16
 8013af8:	4770      	bx	lr

08013afa <abort>:
 8013afa:	b508      	push	{r3, lr}
 8013afc:	2006      	movs	r0, #6
 8013afe:	f000 fac7 	bl	8014090 <raise>
 8013b02:	2001      	movs	r0, #1
 8013b04:	f7ff fd04 	bl	8013510 <_exit>

08013b08 <__sflush_r>:
 8013b08:	898a      	ldrh	r2, [r1, #12]
 8013b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b0e:	4605      	mov	r5, r0
 8013b10:	0710      	lsls	r0, r2, #28
 8013b12:	460c      	mov	r4, r1
 8013b14:	d45a      	bmi.n	8013bcc <__sflush_r+0xc4>
 8013b16:	684b      	ldr	r3, [r1, #4]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	dc05      	bgt.n	8013b28 <__sflush_r+0x20>
 8013b1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	dc02      	bgt.n	8013b28 <__sflush_r+0x20>
 8013b22:	2000      	movs	r0, #0
 8013b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b2a:	2e00      	cmp	r6, #0
 8013b2c:	d0f9      	beq.n	8013b22 <__sflush_r+0x1a>
 8013b2e:	2300      	movs	r3, #0
 8013b30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013b34:	682f      	ldr	r7, [r5, #0]
 8013b36:	602b      	str	r3, [r5, #0]
 8013b38:	d033      	beq.n	8013ba2 <__sflush_r+0x9a>
 8013b3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013b3c:	89a3      	ldrh	r3, [r4, #12]
 8013b3e:	075a      	lsls	r2, r3, #29
 8013b40:	d505      	bpl.n	8013b4e <__sflush_r+0x46>
 8013b42:	6863      	ldr	r3, [r4, #4]
 8013b44:	1ac0      	subs	r0, r0, r3
 8013b46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013b48:	b10b      	cbz	r3, 8013b4e <__sflush_r+0x46>
 8013b4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b4c:	1ac0      	subs	r0, r0, r3
 8013b4e:	2300      	movs	r3, #0
 8013b50:	4602      	mov	r2, r0
 8013b52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b54:	6a21      	ldr	r1, [r4, #32]
 8013b56:	4628      	mov	r0, r5
 8013b58:	47b0      	blx	r6
 8013b5a:	1c43      	adds	r3, r0, #1
 8013b5c:	89a3      	ldrh	r3, [r4, #12]
 8013b5e:	d106      	bne.n	8013b6e <__sflush_r+0x66>
 8013b60:	6829      	ldr	r1, [r5, #0]
 8013b62:	291d      	cmp	r1, #29
 8013b64:	d84b      	bhi.n	8013bfe <__sflush_r+0xf6>
 8013b66:	4a2b      	ldr	r2, [pc, #172]	; (8013c14 <__sflush_r+0x10c>)
 8013b68:	40ca      	lsrs	r2, r1
 8013b6a:	07d6      	lsls	r6, r2, #31
 8013b6c:	d547      	bpl.n	8013bfe <__sflush_r+0xf6>
 8013b6e:	2200      	movs	r2, #0
 8013b70:	6062      	str	r2, [r4, #4]
 8013b72:	04d9      	lsls	r1, r3, #19
 8013b74:	6922      	ldr	r2, [r4, #16]
 8013b76:	6022      	str	r2, [r4, #0]
 8013b78:	d504      	bpl.n	8013b84 <__sflush_r+0x7c>
 8013b7a:	1c42      	adds	r2, r0, #1
 8013b7c:	d101      	bne.n	8013b82 <__sflush_r+0x7a>
 8013b7e:	682b      	ldr	r3, [r5, #0]
 8013b80:	b903      	cbnz	r3, 8013b84 <__sflush_r+0x7c>
 8013b82:	6560      	str	r0, [r4, #84]	; 0x54
 8013b84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b86:	602f      	str	r7, [r5, #0]
 8013b88:	2900      	cmp	r1, #0
 8013b8a:	d0ca      	beq.n	8013b22 <__sflush_r+0x1a>
 8013b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b90:	4299      	cmp	r1, r3
 8013b92:	d002      	beq.n	8013b9a <__sflush_r+0x92>
 8013b94:	4628      	mov	r0, r5
 8013b96:	f000 f997 	bl	8013ec8 <_free_r>
 8013b9a:	2000      	movs	r0, #0
 8013b9c:	6360      	str	r0, [r4, #52]	; 0x34
 8013b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ba2:	6a21      	ldr	r1, [r4, #32]
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	4628      	mov	r0, r5
 8013ba8:	47b0      	blx	r6
 8013baa:	1c41      	adds	r1, r0, #1
 8013bac:	d1c6      	bne.n	8013b3c <__sflush_r+0x34>
 8013bae:	682b      	ldr	r3, [r5, #0]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d0c3      	beq.n	8013b3c <__sflush_r+0x34>
 8013bb4:	2b1d      	cmp	r3, #29
 8013bb6:	d001      	beq.n	8013bbc <__sflush_r+0xb4>
 8013bb8:	2b16      	cmp	r3, #22
 8013bba:	d101      	bne.n	8013bc0 <__sflush_r+0xb8>
 8013bbc:	602f      	str	r7, [r5, #0]
 8013bbe:	e7b0      	b.n	8013b22 <__sflush_r+0x1a>
 8013bc0:	89a3      	ldrh	r3, [r4, #12]
 8013bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bc6:	81a3      	strh	r3, [r4, #12]
 8013bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bcc:	690f      	ldr	r7, [r1, #16]
 8013bce:	2f00      	cmp	r7, #0
 8013bd0:	d0a7      	beq.n	8013b22 <__sflush_r+0x1a>
 8013bd2:	0793      	lsls	r3, r2, #30
 8013bd4:	680e      	ldr	r6, [r1, #0]
 8013bd6:	bf08      	it	eq
 8013bd8:	694b      	ldreq	r3, [r1, #20]
 8013bda:	600f      	str	r7, [r1, #0]
 8013bdc:	bf18      	it	ne
 8013bde:	2300      	movne	r3, #0
 8013be0:	eba6 0807 	sub.w	r8, r6, r7
 8013be4:	608b      	str	r3, [r1, #8]
 8013be6:	f1b8 0f00 	cmp.w	r8, #0
 8013bea:	dd9a      	ble.n	8013b22 <__sflush_r+0x1a>
 8013bec:	4643      	mov	r3, r8
 8013bee:	463a      	mov	r2, r7
 8013bf0:	6a21      	ldr	r1, [r4, #32]
 8013bf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013bf4:	4628      	mov	r0, r5
 8013bf6:	47b0      	blx	r6
 8013bf8:	2800      	cmp	r0, #0
 8013bfa:	dc07      	bgt.n	8013c0c <__sflush_r+0x104>
 8013bfc:	89a3      	ldrh	r3, [r4, #12]
 8013bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c02:	81a3      	strh	r3, [r4, #12]
 8013c04:	f04f 30ff 	mov.w	r0, #4294967295
 8013c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c0c:	4407      	add	r7, r0
 8013c0e:	eba8 0800 	sub.w	r8, r8, r0
 8013c12:	e7e8      	b.n	8013be6 <__sflush_r+0xde>
 8013c14:	20400001 	.word	0x20400001

08013c18 <_fflush_r>:
 8013c18:	b538      	push	{r3, r4, r5, lr}
 8013c1a:	690b      	ldr	r3, [r1, #16]
 8013c1c:	4605      	mov	r5, r0
 8013c1e:	460c      	mov	r4, r1
 8013c20:	b1db      	cbz	r3, 8013c5a <_fflush_r+0x42>
 8013c22:	b118      	cbz	r0, 8013c2c <_fflush_r+0x14>
 8013c24:	6983      	ldr	r3, [r0, #24]
 8013c26:	b90b      	cbnz	r3, 8013c2c <_fflush_r+0x14>
 8013c28:	f000 f872 	bl	8013d10 <__sinit>
 8013c2c:	4b0c      	ldr	r3, [pc, #48]	; (8013c60 <_fflush_r+0x48>)
 8013c2e:	429c      	cmp	r4, r3
 8013c30:	d109      	bne.n	8013c46 <_fflush_r+0x2e>
 8013c32:	686c      	ldr	r4, [r5, #4]
 8013c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c38:	b17b      	cbz	r3, 8013c5a <_fflush_r+0x42>
 8013c3a:	4621      	mov	r1, r4
 8013c3c:	4628      	mov	r0, r5
 8013c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c42:	f7ff bf61 	b.w	8013b08 <__sflush_r>
 8013c46:	4b07      	ldr	r3, [pc, #28]	; (8013c64 <_fflush_r+0x4c>)
 8013c48:	429c      	cmp	r4, r3
 8013c4a:	d101      	bne.n	8013c50 <_fflush_r+0x38>
 8013c4c:	68ac      	ldr	r4, [r5, #8]
 8013c4e:	e7f1      	b.n	8013c34 <_fflush_r+0x1c>
 8013c50:	4b05      	ldr	r3, [pc, #20]	; (8013c68 <_fflush_r+0x50>)
 8013c52:	429c      	cmp	r4, r3
 8013c54:	bf08      	it	eq
 8013c56:	68ec      	ldreq	r4, [r5, #12]
 8013c58:	e7ec      	b.n	8013c34 <_fflush_r+0x1c>
 8013c5a:	2000      	movs	r0, #0
 8013c5c:	bd38      	pop	{r3, r4, r5, pc}
 8013c5e:	bf00      	nop
 8013c60:	08017e84 	.word	0x08017e84
 8013c64:	08017ea4 	.word	0x08017ea4
 8013c68:	08017e64 	.word	0x08017e64

08013c6c <fflush>:
 8013c6c:	4601      	mov	r1, r0
 8013c6e:	b920      	cbnz	r0, 8013c7a <fflush+0xe>
 8013c70:	4b04      	ldr	r3, [pc, #16]	; (8013c84 <fflush+0x18>)
 8013c72:	4905      	ldr	r1, [pc, #20]	; (8013c88 <fflush+0x1c>)
 8013c74:	6818      	ldr	r0, [r3, #0]
 8013c76:	f000 b8b7 	b.w	8013de8 <_fwalk_reent>
 8013c7a:	4b04      	ldr	r3, [pc, #16]	; (8013c8c <fflush+0x20>)
 8013c7c:	6818      	ldr	r0, [r3, #0]
 8013c7e:	f7ff bfcb 	b.w	8013c18 <_fflush_r>
 8013c82:	bf00      	nop
 8013c84:	08017ec4 	.word	0x08017ec4
 8013c88:	08013c19 	.word	0x08013c19
 8013c8c:	20000010 	.word	0x20000010

08013c90 <_cleanup_r>:
 8013c90:	4901      	ldr	r1, [pc, #4]	; (8013c98 <_cleanup_r+0x8>)
 8013c92:	f000 b8a9 	b.w	8013de8 <_fwalk_reent>
 8013c96:	bf00      	nop
 8013c98:	08013c19 	.word	0x08013c19

08013c9c <std.isra.0>:
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	b510      	push	{r4, lr}
 8013ca0:	4604      	mov	r4, r0
 8013ca2:	6003      	str	r3, [r0, #0]
 8013ca4:	6043      	str	r3, [r0, #4]
 8013ca6:	6083      	str	r3, [r0, #8]
 8013ca8:	8181      	strh	r1, [r0, #12]
 8013caa:	6643      	str	r3, [r0, #100]	; 0x64
 8013cac:	81c2      	strh	r2, [r0, #14]
 8013cae:	6103      	str	r3, [r0, #16]
 8013cb0:	6143      	str	r3, [r0, #20]
 8013cb2:	6183      	str	r3, [r0, #24]
 8013cb4:	4619      	mov	r1, r3
 8013cb6:	2208      	movs	r2, #8
 8013cb8:	305c      	adds	r0, #92	; 0x5c
 8013cba:	f000 f8fc 	bl	8013eb6 <memset>
 8013cbe:	4b05      	ldr	r3, [pc, #20]	; (8013cd4 <std.isra.0+0x38>)
 8013cc0:	6263      	str	r3, [r4, #36]	; 0x24
 8013cc2:	4b05      	ldr	r3, [pc, #20]	; (8013cd8 <std.isra.0+0x3c>)
 8013cc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8013cc6:	4b05      	ldr	r3, [pc, #20]	; (8013cdc <std.isra.0+0x40>)
 8013cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013cca:	4b05      	ldr	r3, [pc, #20]	; (8013ce0 <std.isra.0+0x44>)
 8013ccc:	6224      	str	r4, [r4, #32]
 8013cce:	6323      	str	r3, [r4, #48]	; 0x30
 8013cd0:	bd10      	pop	{r4, pc}
 8013cd2:	bf00      	nop
 8013cd4:	08014131 	.word	0x08014131
 8013cd8:	08014153 	.word	0x08014153
 8013cdc:	0801418b 	.word	0x0801418b
 8013ce0:	080141af 	.word	0x080141af

08013ce4 <__sfmoreglue>:
 8013ce4:	b570      	push	{r4, r5, r6, lr}
 8013ce6:	1e4a      	subs	r2, r1, #1
 8013ce8:	2568      	movs	r5, #104	; 0x68
 8013cea:	4355      	muls	r5, r2
 8013cec:	460e      	mov	r6, r1
 8013cee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013cf2:	f000 f937 	bl	8013f64 <_malloc_r>
 8013cf6:	4604      	mov	r4, r0
 8013cf8:	b140      	cbz	r0, 8013d0c <__sfmoreglue+0x28>
 8013cfa:	2100      	movs	r1, #0
 8013cfc:	e880 0042 	stmia.w	r0, {r1, r6}
 8013d00:	300c      	adds	r0, #12
 8013d02:	60a0      	str	r0, [r4, #8]
 8013d04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013d08:	f000 f8d5 	bl	8013eb6 <memset>
 8013d0c:	4620      	mov	r0, r4
 8013d0e:	bd70      	pop	{r4, r5, r6, pc}

08013d10 <__sinit>:
 8013d10:	6983      	ldr	r3, [r0, #24]
 8013d12:	b510      	push	{r4, lr}
 8013d14:	4604      	mov	r4, r0
 8013d16:	bb33      	cbnz	r3, 8013d66 <__sinit+0x56>
 8013d18:	6483      	str	r3, [r0, #72]	; 0x48
 8013d1a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8013d1c:	6503      	str	r3, [r0, #80]	; 0x50
 8013d1e:	4b12      	ldr	r3, [pc, #72]	; (8013d68 <__sinit+0x58>)
 8013d20:	4a12      	ldr	r2, [pc, #72]	; (8013d6c <__sinit+0x5c>)
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	6282      	str	r2, [r0, #40]	; 0x28
 8013d26:	4298      	cmp	r0, r3
 8013d28:	bf04      	itt	eq
 8013d2a:	2301      	moveq	r3, #1
 8013d2c:	6183      	streq	r3, [r0, #24]
 8013d2e:	f000 f81f 	bl	8013d70 <__sfp>
 8013d32:	6060      	str	r0, [r4, #4]
 8013d34:	4620      	mov	r0, r4
 8013d36:	f000 f81b 	bl	8013d70 <__sfp>
 8013d3a:	60a0      	str	r0, [r4, #8]
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	f000 f817 	bl	8013d70 <__sfp>
 8013d42:	2200      	movs	r2, #0
 8013d44:	60e0      	str	r0, [r4, #12]
 8013d46:	2104      	movs	r1, #4
 8013d48:	6860      	ldr	r0, [r4, #4]
 8013d4a:	f7ff ffa7 	bl	8013c9c <std.isra.0>
 8013d4e:	2201      	movs	r2, #1
 8013d50:	2109      	movs	r1, #9
 8013d52:	68a0      	ldr	r0, [r4, #8]
 8013d54:	f7ff ffa2 	bl	8013c9c <std.isra.0>
 8013d58:	2202      	movs	r2, #2
 8013d5a:	2112      	movs	r1, #18
 8013d5c:	68e0      	ldr	r0, [r4, #12]
 8013d5e:	f7ff ff9d 	bl	8013c9c <std.isra.0>
 8013d62:	2301      	movs	r3, #1
 8013d64:	61a3      	str	r3, [r4, #24]
 8013d66:	bd10      	pop	{r4, pc}
 8013d68:	08017ec4 	.word	0x08017ec4
 8013d6c:	08013c91 	.word	0x08013c91

08013d70 <__sfp>:
 8013d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d72:	4b1c      	ldr	r3, [pc, #112]	; (8013de4 <__sfp+0x74>)
 8013d74:	681e      	ldr	r6, [r3, #0]
 8013d76:	69b3      	ldr	r3, [r6, #24]
 8013d78:	4607      	mov	r7, r0
 8013d7a:	b913      	cbnz	r3, 8013d82 <__sfp+0x12>
 8013d7c:	4630      	mov	r0, r6
 8013d7e:	f7ff ffc7 	bl	8013d10 <__sinit>
 8013d82:	3648      	adds	r6, #72	; 0x48
 8013d84:	68b4      	ldr	r4, [r6, #8]
 8013d86:	6873      	ldr	r3, [r6, #4]
 8013d88:	3b01      	subs	r3, #1
 8013d8a:	d503      	bpl.n	8013d94 <__sfp+0x24>
 8013d8c:	6833      	ldr	r3, [r6, #0]
 8013d8e:	b133      	cbz	r3, 8013d9e <__sfp+0x2e>
 8013d90:	6836      	ldr	r6, [r6, #0]
 8013d92:	e7f7      	b.n	8013d84 <__sfp+0x14>
 8013d94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013d98:	b16d      	cbz	r5, 8013db6 <__sfp+0x46>
 8013d9a:	3468      	adds	r4, #104	; 0x68
 8013d9c:	e7f4      	b.n	8013d88 <__sfp+0x18>
 8013d9e:	2104      	movs	r1, #4
 8013da0:	4638      	mov	r0, r7
 8013da2:	f7ff ff9f 	bl	8013ce4 <__sfmoreglue>
 8013da6:	6030      	str	r0, [r6, #0]
 8013da8:	2800      	cmp	r0, #0
 8013daa:	d1f1      	bne.n	8013d90 <__sfp+0x20>
 8013dac:	230c      	movs	r3, #12
 8013dae:	603b      	str	r3, [r7, #0]
 8013db0:	4604      	mov	r4, r0
 8013db2:	4620      	mov	r0, r4
 8013db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013db6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013dba:	81e3      	strh	r3, [r4, #14]
 8013dbc:	2301      	movs	r3, #1
 8013dbe:	81a3      	strh	r3, [r4, #12]
 8013dc0:	6665      	str	r5, [r4, #100]	; 0x64
 8013dc2:	6025      	str	r5, [r4, #0]
 8013dc4:	60a5      	str	r5, [r4, #8]
 8013dc6:	6065      	str	r5, [r4, #4]
 8013dc8:	6125      	str	r5, [r4, #16]
 8013dca:	6165      	str	r5, [r4, #20]
 8013dcc:	61a5      	str	r5, [r4, #24]
 8013dce:	2208      	movs	r2, #8
 8013dd0:	4629      	mov	r1, r5
 8013dd2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013dd6:	f000 f86e 	bl	8013eb6 <memset>
 8013dda:	6365      	str	r5, [r4, #52]	; 0x34
 8013ddc:	63a5      	str	r5, [r4, #56]	; 0x38
 8013dde:	64a5      	str	r5, [r4, #72]	; 0x48
 8013de0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8013de2:	e7e6      	b.n	8013db2 <__sfp+0x42>
 8013de4:	08017ec4 	.word	0x08017ec4

08013de8 <_fwalk_reent>:
 8013de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013dec:	4680      	mov	r8, r0
 8013dee:	4689      	mov	r9, r1
 8013df0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013df4:	2600      	movs	r6, #0
 8013df6:	b914      	cbnz	r4, 8013dfe <_fwalk_reent+0x16>
 8013df8:	4630      	mov	r0, r6
 8013dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013dfe:	68a5      	ldr	r5, [r4, #8]
 8013e00:	6867      	ldr	r7, [r4, #4]
 8013e02:	3f01      	subs	r7, #1
 8013e04:	d501      	bpl.n	8013e0a <_fwalk_reent+0x22>
 8013e06:	6824      	ldr	r4, [r4, #0]
 8013e08:	e7f5      	b.n	8013df6 <_fwalk_reent+0xe>
 8013e0a:	89ab      	ldrh	r3, [r5, #12]
 8013e0c:	2b01      	cmp	r3, #1
 8013e0e:	d907      	bls.n	8013e20 <_fwalk_reent+0x38>
 8013e10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e14:	3301      	adds	r3, #1
 8013e16:	d003      	beq.n	8013e20 <_fwalk_reent+0x38>
 8013e18:	4629      	mov	r1, r5
 8013e1a:	4640      	mov	r0, r8
 8013e1c:	47c8      	blx	r9
 8013e1e:	4306      	orrs	r6, r0
 8013e20:	3568      	adds	r5, #104	; 0x68
 8013e22:	e7ee      	b.n	8013e02 <_fwalk_reent+0x1a>

08013e24 <__libc_init_array>:
 8013e24:	b570      	push	{r4, r5, r6, lr}
 8013e26:	4e0d      	ldr	r6, [pc, #52]	; (8013e5c <__libc_init_array+0x38>)
 8013e28:	4c0d      	ldr	r4, [pc, #52]	; (8013e60 <__libc_init_array+0x3c>)
 8013e2a:	1ba4      	subs	r4, r4, r6
 8013e2c:	10a4      	asrs	r4, r4, #2
 8013e2e:	2500      	movs	r5, #0
 8013e30:	42a5      	cmp	r5, r4
 8013e32:	d109      	bne.n	8013e48 <__libc_init_array+0x24>
 8013e34:	4e0b      	ldr	r6, [pc, #44]	; (8013e64 <__libc_init_array+0x40>)
 8013e36:	4c0c      	ldr	r4, [pc, #48]	; (8013e68 <__libc_init_array+0x44>)
 8013e38:	f000 fd6c 	bl	8014914 <_init>
 8013e3c:	1ba4      	subs	r4, r4, r6
 8013e3e:	10a4      	asrs	r4, r4, #2
 8013e40:	2500      	movs	r5, #0
 8013e42:	42a5      	cmp	r5, r4
 8013e44:	d105      	bne.n	8013e52 <__libc_init_array+0x2e>
 8013e46:	bd70      	pop	{r4, r5, r6, pc}
 8013e48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013e4c:	4798      	blx	r3
 8013e4e:	3501      	adds	r5, #1
 8013e50:	e7ee      	b.n	8013e30 <__libc_init_array+0xc>
 8013e52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013e56:	4798      	blx	r3
 8013e58:	3501      	adds	r5, #1
 8013e5a:	e7f2      	b.n	8013e42 <__libc_init_array+0x1e>
 8013e5c:	08017efc 	.word	0x08017efc
 8013e60:	08017efc 	.word	0x08017efc
 8013e64:	08017efc 	.word	0x08017efc
 8013e68:	08017f00 	.word	0x08017f00

08013e6c <memcpy>:
 8013e6c:	b510      	push	{r4, lr}
 8013e6e:	1e43      	subs	r3, r0, #1
 8013e70:	440a      	add	r2, r1
 8013e72:	4291      	cmp	r1, r2
 8013e74:	d100      	bne.n	8013e78 <memcpy+0xc>
 8013e76:	bd10      	pop	{r4, pc}
 8013e78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e80:	e7f7      	b.n	8013e72 <memcpy+0x6>

08013e82 <memmove>:
 8013e82:	4288      	cmp	r0, r1
 8013e84:	b510      	push	{r4, lr}
 8013e86:	eb01 0302 	add.w	r3, r1, r2
 8013e8a:	d803      	bhi.n	8013e94 <memmove+0x12>
 8013e8c:	1e42      	subs	r2, r0, #1
 8013e8e:	4299      	cmp	r1, r3
 8013e90:	d10c      	bne.n	8013eac <memmove+0x2a>
 8013e92:	bd10      	pop	{r4, pc}
 8013e94:	4298      	cmp	r0, r3
 8013e96:	d2f9      	bcs.n	8013e8c <memmove+0xa>
 8013e98:	1881      	adds	r1, r0, r2
 8013e9a:	1ad2      	subs	r2, r2, r3
 8013e9c:	42d3      	cmn	r3, r2
 8013e9e:	d100      	bne.n	8013ea2 <memmove+0x20>
 8013ea0:	bd10      	pop	{r4, pc}
 8013ea2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013ea6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013eaa:	e7f7      	b.n	8013e9c <memmove+0x1a>
 8013eac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013eb0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013eb4:	e7eb      	b.n	8013e8e <memmove+0xc>

08013eb6 <memset>:
 8013eb6:	4402      	add	r2, r0
 8013eb8:	4603      	mov	r3, r0
 8013eba:	4293      	cmp	r3, r2
 8013ebc:	d100      	bne.n	8013ec0 <memset+0xa>
 8013ebe:	4770      	bx	lr
 8013ec0:	f803 1b01 	strb.w	r1, [r3], #1
 8013ec4:	e7f9      	b.n	8013eba <memset+0x4>
	...

08013ec8 <_free_r>:
 8013ec8:	b538      	push	{r3, r4, r5, lr}
 8013eca:	4605      	mov	r5, r0
 8013ecc:	2900      	cmp	r1, #0
 8013ece:	d045      	beq.n	8013f5c <_free_r+0x94>
 8013ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ed4:	1f0c      	subs	r4, r1, #4
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	bfb8      	it	lt
 8013eda:	18e4      	addlt	r4, r4, r3
 8013edc:	f000 f9f0 	bl	80142c0 <__malloc_lock>
 8013ee0:	4a1f      	ldr	r2, [pc, #124]	; (8013f60 <_free_r+0x98>)
 8013ee2:	6813      	ldr	r3, [r2, #0]
 8013ee4:	4610      	mov	r0, r2
 8013ee6:	b933      	cbnz	r3, 8013ef6 <_free_r+0x2e>
 8013ee8:	6063      	str	r3, [r4, #4]
 8013eea:	6014      	str	r4, [r2, #0]
 8013eec:	4628      	mov	r0, r5
 8013eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ef2:	f000 b9e6 	b.w	80142c2 <__malloc_unlock>
 8013ef6:	42a3      	cmp	r3, r4
 8013ef8:	d90c      	bls.n	8013f14 <_free_r+0x4c>
 8013efa:	6821      	ldr	r1, [r4, #0]
 8013efc:	1862      	adds	r2, r4, r1
 8013efe:	4293      	cmp	r3, r2
 8013f00:	bf04      	itt	eq
 8013f02:	681a      	ldreq	r2, [r3, #0]
 8013f04:	685b      	ldreq	r3, [r3, #4]
 8013f06:	6063      	str	r3, [r4, #4]
 8013f08:	bf04      	itt	eq
 8013f0a:	1852      	addeq	r2, r2, r1
 8013f0c:	6022      	streq	r2, [r4, #0]
 8013f0e:	6004      	str	r4, [r0, #0]
 8013f10:	e7ec      	b.n	8013eec <_free_r+0x24>
 8013f12:	4613      	mov	r3, r2
 8013f14:	685a      	ldr	r2, [r3, #4]
 8013f16:	b10a      	cbz	r2, 8013f1c <_free_r+0x54>
 8013f18:	42a2      	cmp	r2, r4
 8013f1a:	d9fa      	bls.n	8013f12 <_free_r+0x4a>
 8013f1c:	6819      	ldr	r1, [r3, #0]
 8013f1e:	1858      	adds	r0, r3, r1
 8013f20:	42a0      	cmp	r0, r4
 8013f22:	d10b      	bne.n	8013f3c <_free_r+0x74>
 8013f24:	6820      	ldr	r0, [r4, #0]
 8013f26:	4401      	add	r1, r0
 8013f28:	1858      	adds	r0, r3, r1
 8013f2a:	4282      	cmp	r2, r0
 8013f2c:	6019      	str	r1, [r3, #0]
 8013f2e:	d1dd      	bne.n	8013eec <_free_r+0x24>
 8013f30:	6810      	ldr	r0, [r2, #0]
 8013f32:	6852      	ldr	r2, [r2, #4]
 8013f34:	605a      	str	r2, [r3, #4]
 8013f36:	4401      	add	r1, r0
 8013f38:	6019      	str	r1, [r3, #0]
 8013f3a:	e7d7      	b.n	8013eec <_free_r+0x24>
 8013f3c:	d902      	bls.n	8013f44 <_free_r+0x7c>
 8013f3e:	230c      	movs	r3, #12
 8013f40:	602b      	str	r3, [r5, #0]
 8013f42:	e7d3      	b.n	8013eec <_free_r+0x24>
 8013f44:	6820      	ldr	r0, [r4, #0]
 8013f46:	1821      	adds	r1, r4, r0
 8013f48:	428a      	cmp	r2, r1
 8013f4a:	bf04      	itt	eq
 8013f4c:	6811      	ldreq	r1, [r2, #0]
 8013f4e:	6852      	ldreq	r2, [r2, #4]
 8013f50:	6062      	str	r2, [r4, #4]
 8013f52:	bf04      	itt	eq
 8013f54:	1809      	addeq	r1, r1, r0
 8013f56:	6021      	streq	r1, [r4, #0]
 8013f58:	605c      	str	r4, [r3, #4]
 8013f5a:	e7c7      	b.n	8013eec <_free_r+0x24>
 8013f5c:	bd38      	pop	{r3, r4, r5, pc}
 8013f5e:	bf00      	nop
 8013f60:	20000770 	.word	0x20000770

08013f64 <_malloc_r>:
 8013f64:	b570      	push	{r4, r5, r6, lr}
 8013f66:	1ccd      	adds	r5, r1, #3
 8013f68:	f025 0503 	bic.w	r5, r5, #3
 8013f6c:	3508      	adds	r5, #8
 8013f6e:	2d0c      	cmp	r5, #12
 8013f70:	bf38      	it	cc
 8013f72:	250c      	movcc	r5, #12
 8013f74:	2d00      	cmp	r5, #0
 8013f76:	4606      	mov	r6, r0
 8013f78:	db01      	blt.n	8013f7e <_malloc_r+0x1a>
 8013f7a:	42a9      	cmp	r1, r5
 8013f7c:	d903      	bls.n	8013f86 <_malloc_r+0x22>
 8013f7e:	230c      	movs	r3, #12
 8013f80:	6033      	str	r3, [r6, #0]
 8013f82:	2000      	movs	r0, #0
 8013f84:	bd70      	pop	{r4, r5, r6, pc}
 8013f86:	f000 f99b 	bl	80142c0 <__malloc_lock>
 8013f8a:	4a23      	ldr	r2, [pc, #140]	; (8014018 <_malloc_r+0xb4>)
 8013f8c:	6814      	ldr	r4, [r2, #0]
 8013f8e:	4621      	mov	r1, r4
 8013f90:	b991      	cbnz	r1, 8013fb8 <_malloc_r+0x54>
 8013f92:	4c22      	ldr	r4, [pc, #136]	; (801401c <_malloc_r+0xb8>)
 8013f94:	6823      	ldr	r3, [r4, #0]
 8013f96:	b91b      	cbnz	r3, 8013fa0 <_malloc_r+0x3c>
 8013f98:	4630      	mov	r0, r6
 8013f9a:	f000 f841 	bl	8014020 <_sbrk_r>
 8013f9e:	6020      	str	r0, [r4, #0]
 8013fa0:	4629      	mov	r1, r5
 8013fa2:	4630      	mov	r0, r6
 8013fa4:	f000 f83c 	bl	8014020 <_sbrk_r>
 8013fa8:	1c43      	adds	r3, r0, #1
 8013faa:	d126      	bne.n	8013ffa <_malloc_r+0x96>
 8013fac:	230c      	movs	r3, #12
 8013fae:	6033      	str	r3, [r6, #0]
 8013fb0:	4630      	mov	r0, r6
 8013fb2:	f000 f986 	bl	80142c2 <__malloc_unlock>
 8013fb6:	e7e4      	b.n	8013f82 <_malloc_r+0x1e>
 8013fb8:	680b      	ldr	r3, [r1, #0]
 8013fba:	1b5b      	subs	r3, r3, r5
 8013fbc:	d41a      	bmi.n	8013ff4 <_malloc_r+0x90>
 8013fbe:	2b0b      	cmp	r3, #11
 8013fc0:	d90f      	bls.n	8013fe2 <_malloc_r+0x7e>
 8013fc2:	600b      	str	r3, [r1, #0]
 8013fc4:	50cd      	str	r5, [r1, r3]
 8013fc6:	18cc      	adds	r4, r1, r3
 8013fc8:	4630      	mov	r0, r6
 8013fca:	f000 f97a 	bl	80142c2 <__malloc_unlock>
 8013fce:	f104 000b 	add.w	r0, r4, #11
 8013fd2:	1d23      	adds	r3, r4, #4
 8013fd4:	f020 0007 	bic.w	r0, r0, #7
 8013fd8:	1ac3      	subs	r3, r0, r3
 8013fda:	d01b      	beq.n	8014014 <_malloc_r+0xb0>
 8013fdc:	425a      	negs	r2, r3
 8013fde:	50e2      	str	r2, [r4, r3]
 8013fe0:	bd70      	pop	{r4, r5, r6, pc}
 8013fe2:	428c      	cmp	r4, r1
 8013fe4:	bf0d      	iteet	eq
 8013fe6:	6863      	ldreq	r3, [r4, #4]
 8013fe8:	684b      	ldrne	r3, [r1, #4]
 8013fea:	6063      	strne	r3, [r4, #4]
 8013fec:	6013      	streq	r3, [r2, #0]
 8013fee:	bf18      	it	ne
 8013ff0:	460c      	movne	r4, r1
 8013ff2:	e7e9      	b.n	8013fc8 <_malloc_r+0x64>
 8013ff4:	460c      	mov	r4, r1
 8013ff6:	6849      	ldr	r1, [r1, #4]
 8013ff8:	e7ca      	b.n	8013f90 <_malloc_r+0x2c>
 8013ffa:	1cc4      	adds	r4, r0, #3
 8013ffc:	f024 0403 	bic.w	r4, r4, #3
 8014000:	42a0      	cmp	r0, r4
 8014002:	d005      	beq.n	8014010 <_malloc_r+0xac>
 8014004:	1a21      	subs	r1, r4, r0
 8014006:	4630      	mov	r0, r6
 8014008:	f000 f80a 	bl	8014020 <_sbrk_r>
 801400c:	3001      	adds	r0, #1
 801400e:	d0cd      	beq.n	8013fac <_malloc_r+0x48>
 8014010:	6025      	str	r5, [r4, #0]
 8014012:	e7d9      	b.n	8013fc8 <_malloc_r+0x64>
 8014014:	bd70      	pop	{r4, r5, r6, pc}
 8014016:	bf00      	nop
 8014018:	20000770 	.word	0x20000770
 801401c:	20000774 	.word	0x20000774

08014020 <_sbrk_r>:
 8014020:	b538      	push	{r3, r4, r5, lr}
 8014022:	4c06      	ldr	r4, [pc, #24]	; (801403c <_sbrk_r+0x1c>)
 8014024:	2300      	movs	r3, #0
 8014026:	4605      	mov	r5, r0
 8014028:	4608      	mov	r0, r1
 801402a:	6023      	str	r3, [r4, #0]
 801402c:	f7ff fa8a 	bl	8013544 <_sbrk>
 8014030:	1c43      	adds	r3, r0, #1
 8014032:	d102      	bne.n	801403a <_sbrk_r+0x1a>
 8014034:	6823      	ldr	r3, [r4, #0]
 8014036:	b103      	cbz	r3, 801403a <_sbrk_r+0x1a>
 8014038:	602b      	str	r3, [r5, #0]
 801403a:	bd38      	pop	{r3, r4, r5, pc}
 801403c:	2000247c 	.word	0x2000247c

08014040 <_raise_r>:
 8014040:	291f      	cmp	r1, #31
 8014042:	b538      	push	{r3, r4, r5, lr}
 8014044:	4604      	mov	r4, r0
 8014046:	460d      	mov	r5, r1
 8014048:	d904      	bls.n	8014054 <_raise_r+0x14>
 801404a:	2316      	movs	r3, #22
 801404c:	6003      	str	r3, [r0, #0]
 801404e:	f04f 30ff 	mov.w	r0, #4294967295
 8014052:	bd38      	pop	{r3, r4, r5, pc}
 8014054:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014056:	b112      	cbz	r2, 801405e <_raise_r+0x1e>
 8014058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801405c:	b94b      	cbnz	r3, 8014072 <_raise_r+0x32>
 801405e:	4620      	mov	r0, r4
 8014060:	f000 f830 	bl	80140c4 <_getpid_r>
 8014064:	462a      	mov	r2, r5
 8014066:	4601      	mov	r1, r0
 8014068:	4620      	mov	r0, r4
 801406a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801406e:	f000 b817 	b.w	80140a0 <_kill_r>
 8014072:	2b01      	cmp	r3, #1
 8014074:	d00a      	beq.n	801408c <_raise_r+0x4c>
 8014076:	1c59      	adds	r1, r3, #1
 8014078:	d103      	bne.n	8014082 <_raise_r+0x42>
 801407a:	2316      	movs	r3, #22
 801407c:	6003      	str	r3, [r0, #0]
 801407e:	2001      	movs	r0, #1
 8014080:	bd38      	pop	{r3, r4, r5, pc}
 8014082:	2400      	movs	r4, #0
 8014084:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014088:	4628      	mov	r0, r5
 801408a:	4798      	blx	r3
 801408c:	2000      	movs	r0, #0
 801408e:	bd38      	pop	{r3, r4, r5, pc}

08014090 <raise>:
 8014090:	4b02      	ldr	r3, [pc, #8]	; (801409c <raise+0xc>)
 8014092:	4601      	mov	r1, r0
 8014094:	6818      	ldr	r0, [r3, #0]
 8014096:	f7ff bfd3 	b.w	8014040 <_raise_r>
 801409a:	bf00      	nop
 801409c:	20000010 	.word	0x20000010

080140a0 <_kill_r>:
 80140a0:	b538      	push	{r3, r4, r5, lr}
 80140a2:	4c07      	ldr	r4, [pc, #28]	; (80140c0 <_kill_r+0x20>)
 80140a4:	2300      	movs	r3, #0
 80140a6:	4605      	mov	r5, r0
 80140a8:	4608      	mov	r0, r1
 80140aa:	4611      	mov	r1, r2
 80140ac:	6023      	str	r3, [r4, #0]
 80140ae:	f7ff fa1d 	bl	80134ec <_kill>
 80140b2:	1c43      	adds	r3, r0, #1
 80140b4:	d102      	bne.n	80140bc <_kill_r+0x1c>
 80140b6:	6823      	ldr	r3, [r4, #0]
 80140b8:	b103      	cbz	r3, 80140bc <_kill_r+0x1c>
 80140ba:	602b      	str	r3, [r5, #0]
 80140bc:	bd38      	pop	{r3, r4, r5, pc}
 80140be:	bf00      	nop
 80140c0:	2000247c 	.word	0x2000247c

080140c4 <_getpid_r>:
 80140c4:	f7ff ba04 	b.w	80134d0 <_getpid>

080140c8 <sniprintf>:
 80140c8:	b40c      	push	{r2, r3}
 80140ca:	b530      	push	{r4, r5, lr}
 80140cc:	4b17      	ldr	r3, [pc, #92]	; (801412c <sniprintf+0x64>)
 80140ce:	1e0c      	subs	r4, r1, #0
 80140d0:	b09d      	sub	sp, #116	; 0x74
 80140d2:	681d      	ldr	r5, [r3, #0]
 80140d4:	da08      	bge.n	80140e8 <sniprintf+0x20>
 80140d6:	238b      	movs	r3, #139	; 0x8b
 80140d8:	602b      	str	r3, [r5, #0]
 80140da:	f04f 30ff 	mov.w	r0, #4294967295
 80140de:	b01d      	add	sp, #116	; 0x74
 80140e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80140e4:	b002      	add	sp, #8
 80140e6:	4770      	bx	lr
 80140e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80140ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80140f0:	bf14      	ite	ne
 80140f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80140f6:	4623      	moveq	r3, r4
 80140f8:	9304      	str	r3, [sp, #16]
 80140fa:	9307      	str	r3, [sp, #28]
 80140fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014100:	9002      	str	r0, [sp, #8]
 8014102:	9006      	str	r0, [sp, #24]
 8014104:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014108:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801410a:	ab21      	add	r3, sp, #132	; 0x84
 801410c:	a902      	add	r1, sp, #8
 801410e:	4628      	mov	r0, r5
 8014110:	9301      	str	r3, [sp, #4]
 8014112:	f000 f933 	bl	801437c <_svfiprintf_r>
 8014116:	1c43      	adds	r3, r0, #1
 8014118:	bfbc      	itt	lt
 801411a:	238b      	movlt	r3, #139	; 0x8b
 801411c:	602b      	strlt	r3, [r5, #0]
 801411e:	2c00      	cmp	r4, #0
 8014120:	d0dd      	beq.n	80140de <sniprintf+0x16>
 8014122:	9b02      	ldr	r3, [sp, #8]
 8014124:	2200      	movs	r2, #0
 8014126:	701a      	strb	r2, [r3, #0]
 8014128:	e7d9      	b.n	80140de <sniprintf+0x16>
 801412a:	bf00      	nop
 801412c:	20000010 	.word	0x20000010

08014130 <__sread>:
 8014130:	b510      	push	{r4, lr}
 8014132:	460c      	mov	r4, r1
 8014134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014138:	f000 fbaa 	bl	8014890 <_read_r>
 801413c:	2800      	cmp	r0, #0
 801413e:	bfab      	itete	ge
 8014140:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014142:	89a3      	ldrhlt	r3, [r4, #12]
 8014144:	181b      	addge	r3, r3, r0
 8014146:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801414a:	bfac      	ite	ge
 801414c:	6563      	strge	r3, [r4, #84]	; 0x54
 801414e:	81a3      	strhlt	r3, [r4, #12]
 8014150:	bd10      	pop	{r4, pc}

08014152 <__swrite>:
 8014152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014156:	461f      	mov	r7, r3
 8014158:	898b      	ldrh	r3, [r1, #12]
 801415a:	05db      	lsls	r3, r3, #23
 801415c:	4605      	mov	r5, r0
 801415e:	460c      	mov	r4, r1
 8014160:	4616      	mov	r6, r2
 8014162:	d505      	bpl.n	8014170 <__swrite+0x1e>
 8014164:	2302      	movs	r3, #2
 8014166:	2200      	movs	r2, #0
 8014168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801416c:	f000 f896 	bl	801429c <_lseek_r>
 8014170:	89a3      	ldrh	r3, [r4, #12]
 8014172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801417a:	81a3      	strh	r3, [r4, #12]
 801417c:	4632      	mov	r2, r6
 801417e:	463b      	mov	r3, r7
 8014180:	4628      	mov	r0, r5
 8014182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014186:	f000 b867 	b.w	8014258 <_write_r>

0801418a <__sseek>:
 801418a:	b510      	push	{r4, lr}
 801418c:	460c      	mov	r4, r1
 801418e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014192:	f000 f883 	bl	801429c <_lseek_r>
 8014196:	1c43      	adds	r3, r0, #1
 8014198:	89a3      	ldrh	r3, [r4, #12]
 801419a:	bf15      	itete	ne
 801419c:	6560      	strne	r0, [r4, #84]	; 0x54
 801419e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80141a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80141a6:	81a3      	strheq	r3, [r4, #12]
 80141a8:	bf18      	it	ne
 80141aa:	81a3      	strhne	r3, [r4, #12]
 80141ac:	bd10      	pop	{r4, pc}

080141ae <__sclose>:
 80141ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141b2:	f000 b863 	b.w	801427c <_close_r>

080141b6 <strchr>:
 80141b6:	b2c9      	uxtb	r1, r1
 80141b8:	4603      	mov	r3, r0
 80141ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80141be:	b11a      	cbz	r2, 80141c8 <strchr+0x12>
 80141c0:	4291      	cmp	r1, r2
 80141c2:	d1f9      	bne.n	80141b8 <strchr+0x2>
 80141c4:	4618      	mov	r0, r3
 80141c6:	4770      	bx	lr
 80141c8:	2900      	cmp	r1, #0
 80141ca:	bf0c      	ite	eq
 80141cc:	4618      	moveq	r0, r3
 80141ce:	2000      	movne	r0, #0
 80141d0:	4770      	bx	lr

080141d2 <strncmp>:
 80141d2:	b510      	push	{r4, lr}
 80141d4:	b16a      	cbz	r2, 80141f2 <strncmp+0x20>
 80141d6:	3901      	subs	r1, #1
 80141d8:	1884      	adds	r4, r0, r2
 80141da:	f810 3b01 	ldrb.w	r3, [r0], #1
 80141de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80141e2:	4293      	cmp	r3, r2
 80141e4:	d103      	bne.n	80141ee <strncmp+0x1c>
 80141e6:	42a0      	cmp	r0, r4
 80141e8:	d001      	beq.n	80141ee <strncmp+0x1c>
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d1f5      	bne.n	80141da <strncmp+0x8>
 80141ee:	1a98      	subs	r0, r3, r2
 80141f0:	bd10      	pop	{r4, pc}
 80141f2:	4610      	mov	r0, r2
 80141f4:	bd10      	pop	{r4, pc}

080141f6 <strncpy>:
 80141f6:	b570      	push	{r4, r5, r6, lr}
 80141f8:	4604      	mov	r4, r0
 80141fa:	b902      	cbnz	r2, 80141fe <strncpy+0x8>
 80141fc:	bd70      	pop	{r4, r5, r6, pc}
 80141fe:	4623      	mov	r3, r4
 8014200:	f811 5b01 	ldrb.w	r5, [r1], #1
 8014204:	f803 5b01 	strb.w	r5, [r3], #1
 8014208:	1e56      	subs	r6, r2, #1
 801420a:	b91d      	cbnz	r5, 8014214 <strncpy+0x1e>
 801420c:	4414      	add	r4, r2
 801420e:	42a3      	cmp	r3, r4
 8014210:	d103      	bne.n	801421a <strncpy+0x24>
 8014212:	bd70      	pop	{r4, r5, r6, pc}
 8014214:	461c      	mov	r4, r3
 8014216:	4632      	mov	r2, r6
 8014218:	e7ef      	b.n	80141fa <strncpy+0x4>
 801421a:	f803 5b01 	strb.w	r5, [r3], #1
 801421e:	e7f6      	b.n	801420e <strncpy+0x18>

08014220 <strstr>:
 8014220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014222:	7803      	ldrb	r3, [r0, #0]
 8014224:	b133      	cbz	r3, 8014234 <strstr+0x14>
 8014226:	4603      	mov	r3, r0
 8014228:	4618      	mov	r0, r3
 801422a:	1c5e      	adds	r6, r3, #1
 801422c:	781b      	ldrb	r3, [r3, #0]
 801422e:	b933      	cbnz	r3, 801423e <strstr+0x1e>
 8014230:	4618      	mov	r0, r3
 8014232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014234:	780b      	ldrb	r3, [r1, #0]
 8014236:	2b00      	cmp	r3, #0
 8014238:	bf18      	it	ne
 801423a:	2000      	movne	r0, #0
 801423c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801423e:	1e4d      	subs	r5, r1, #1
 8014240:	1e44      	subs	r4, r0, #1
 8014242:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8014246:	2a00      	cmp	r2, #0
 8014248:	d0f3      	beq.n	8014232 <strstr+0x12>
 801424a:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 801424e:	4297      	cmp	r7, r2
 8014250:	4633      	mov	r3, r6
 8014252:	d0f6      	beq.n	8014242 <strstr+0x22>
 8014254:	e7e8      	b.n	8014228 <strstr+0x8>
	...

08014258 <_write_r>:
 8014258:	b538      	push	{r3, r4, r5, lr}
 801425a:	4c07      	ldr	r4, [pc, #28]	; (8014278 <_write_r+0x20>)
 801425c:	4605      	mov	r5, r0
 801425e:	4608      	mov	r0, r1
 8014260:	4611      	mov	r1, r2
 8014262:	2200      	movs	r2, #0
 8014264:	6022      	str	r2, [r4, #0]
 8014266:	461a      	mov	r2, r3
 8014268:	f7ff f958 	bl	801351c <_write>
 801426c:	1c43      	adds	r3, r0, #1
 801426e:	d102      	bne.n	8014276 <_write_r+0x1e>
 8014270:	6823      	ldr	r3, [r4, #0]
 8014272:	b103      	cbz	r3, 8014276 <_write_r+0x1e>
 8014274:	602b      	str	r3, [r5, #0]
 8014276:	bd38      	pop	{r3, r4, r5, pc}
 8014278:	2000247c 	.word	0x2000247c

0801427c <_close_r>:
 801427c:	b538      	push	{r3, r4, r5, lr}
 801427e:	4c06      	ldr	r4, [pc, #24]	; (8014298 <_close_r+0x1c>)
 8014280:	2300      	movs	r3, #0
 8014282:	4605      	mov	r5, r0
 8014284:	4608      	mov	r0, r1
 8014286:	6023      	str	r3, [r4, #0]
 8014288:	f7ff f97c 	bl	8013584 <_close>
 801428c:	1c43      	adds	r3, r0, #1
 801428e:	d102      	bne.n	8014296 <_close_r+0x1a>
 8014290:	6823      	ldr	r3, [r4, #0]
 8014292:	b103      	cbz	r3, 8014296 <_close_r+0x1a>
 8014294:	602b      	str	r3, [r5, #0]
 8014296:	bd38      	pop	{r3, r4, r5, pc}
 8014298:	2000247c 	.word	0x2000247c

0801429c <_lseek_r>:
 801429c:	b538      	push	{r3, r4, r5, lr}
 801429e:	4c07      	ldr	r4, [pc, #28]	; (80142bc <_lseek_r+0x20>)
 80142a0:	4605      	mov	r5, r0
 80142a2:	4608      	mov	r0, r1
 80142a4:	4611      	mov	r1, r2
 80142a6:	2200      	movs	r2, #0
 80142a8:	6022      	str	r2, [r4, #0]
 80142aa:	461a      	mov	r2, r3
 80142ac:	f7ff f97c 	bl	80135a8 <_lseek>
 80142b0:	1c43      	adds	r3, r0, #1
 80142b2:	d102      	bne.n	80142ba <_lseek_r+0x1e>
 80142b4:	6823      	ldr	r3, [r4, #0]
 80142b6:	b103      	cbz	r3, 80142ba <_lseek_r+0x1e>
 80142b8:	602b      	str	r3, [r5, #0]
 80142ba:	bd38      	pop	{r3, r4, r5, pc}
 80142bc:	2000247c 	.word	0x2000247c

080142c0 <__malloc_lock>:
 80142c0:	4770      	bx	lr

080142c2 <__malloc_unlock>:
 80142c2:	4770      	bx	lr

080142c4 <__ssputs_r>:
 80142c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142c8:	688e      	ldr	r6, [r1, #8]
 80142ca:	429e      	cmp	r6, r3
 80142cc:	4682      	mov	sl, r0
 80142ce:	460c      	mov	r4, r1
 80142d0:	4691      	mov	r9, r2
 80142d2:	4698      	mov	r8, r3
 80142d4:	d835      	bhi.n	8014342 <__ssputs_r+0x7e>
 80142d6:	898a      	ldrh	r2, [r1, #12]
 80142d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80142dc:	d031      	beq.n	8014342 <__ssputs_r+0x7e>
 80142de:	6825      	ldr	r5, [r4, #0]
 80142e0:	6909      	ldr	r1, [r1, #16]
 80142e2:	1a6f      	subs	r7, r5, r1
 80142e4:	6965      	ldr	r5, [r4, #20]
 80142e6:	2302      	movs	r3, #2
 80142e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80142ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80142f0:	f108 0301 	add.w	r3, r8, #1
 80142f4:	443b      	add	r3, r7
 80142f6:	429d      	cmp	r5, r3
 80142f8:	bf38      	it	cc
 80142fa:	461d      	movcc	r5, r3
 80142fc:	0553      	lsls	r3, r2, #21
 80142fe:	d531      	bpl.n	8014364 <__ssputs_r+0xa0>
 8014300:	4629      	mov	r1, r5
 8014302:	f7ff fe2f 	bl	8013f64 <_malloc_r>
 8014306:	4606      	mov	r6, r0
 8014308:	b950      	cbnz	r0, 8014320 <__ssputs_r+0x5c>
 801430a:	230c      	movs	r3, #12
 801430c:	f8ca 3000 	str.w	r3, [sl]
 8014310:	89a3      	ldrh	r3, [r4, #12]
 8014312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014316:	81a3      	strh	r3, [r4, #12]
 8014318:	f04f 30ff 	mov.w	r0, #4294967295
 801431c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014320:	463a      	mov	r2, r7
 8014322:	6921      	ldr	r1, [r4, #16]
 8014324:	f7ff fda2 	bl	8013e6c <memcpy>
 8014328:	89a3      	ldrh	r3, [r4, #12]
 801432a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801432e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014332:	81a3      	strh	r3, [r4, #12]
 8014334:	6126      	str	r6, [r4, #16]
 8014336:	6165      	str	r5, [r4, #20]
 8014338:	443e      	add	r6, r7
 801433a:	1bed      	subs	r5, r5, r7
 801433c:	6026      	str	r6, [r4, #0]
 801433e:	60a5      	str	r5, [r4, #8]
 8014340:	4646      	mov	r6, r8
 8014342:	4546      	cmp	r6, r8
 8014344:	bf28      	it	cs
 8014346:	4646      	movcs	r6, r8
 8014348:	4632      	mov	r2, r6
 801434a:	4649      	mov	r1, r9
 801434c:	6820      	ldr	r0, [r4, #0]
 801434e:	f7ff fd98 	bl	8013e82 <memmove>
 8014352:	68a3      	ldr	r3, [r4, #8]
 8014354:	1b9b      	subs	r3, r3, r6
 8014356:	60a3      	str	r3, [r4, #8]
 8014358:	6823      	ldr	r3, [r4, #0]
 801435a:	441e      	add	r6, r3
 801435c:	6026      	str	r6, [r4, #0]
 801435e:	2000      	movs	r0, #0
 8014360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014364:	462a      	mov	r2, r5
 8014366:	f000 faa5 	bl	80148b4 <_realloc_r>
 801436a:	4606      	mov	r6, r0
 801436c:	2800      	cmp	r0, #0
 801436e:	d1e1      	bne.n	8014334 <__ssputs_r+0x70>
 8014370:	6921      	ldr	r1, [r4, #16]
 8014372:	4650      	mov	r0, sl
 8014374:	f7ff fda8 	bl	8013ec8 <_free_r>
 8014378:	e7c7      	b.n	801430a <__ssputs_r+0x46>
	...

0801437c <_svfiprintf_r>:
 801437c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014380:	b09d      	sub	sp, #116	; 0x74
 8014382:	4680      	mov	r8, r0
 8014384:	9303      	str	r3, [sp, #12]
 8014386:	898b      	ldrh	r3, [r1, #12]
 8014388:	061c      	lsls	r4, r3, #24
 801438a:	460d      	mov	r5, r1
 801438c:	4616      	mov	r6, r2
 801438e:	d50f      	bpl.n	80143b0 <_svfiprintf_r+0x34>
 8014390:	690b      	ldr	r3, [r1, #16]
 8014392:	b96b      	cbnz	r3, 80143b0 <_svfiprintf_r+0x34>
 8014394:	2140      	movs	r1, #64	; 0x40
 8014396:	f7ff fde5 	bl	8013f64 <_malloc_r>
 801439a:	6028      	str	r0, [r5, #0]
 801439c:	6128      	str	r0, [r5, #16]
 801439e:	b928      	cbnz	r0, 80143ac <_svfiprintf_r+0x30>
 80143a0:	230c      	movs	r3, #12
 80143a2:	f8c8 3000 	str.w	r3, [r8]
 80143a6:	f04f 30ff 	mov.w	r0, #4294967295
 80143aa:	e0c5      	b.n	8014538 <_svfiprintf_r+0x1bc>
 80143ac:	2340      	movs	r3, #64	; 0x40
 80143ae:	616b      	str	r3, [r5, #20]
 80143b0:	2300      	movs	r3, #0
 80143b2:	9309      	str	r3, [sp, #36]	; 0x24
 80143b4:	2320      	movs	r3, #32
 80143b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80143ba:	2330      	movs	r3, #48	; 0x30
 80143bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80143c0:	f04f 0b01 	mov.w	fp, #1
 80143c4:	4637      	mov	r7, r6
 80143c6:	463c      	mov	r4, r7
 80143c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d13c      	bne.n	801444a <_svfiprintf_r+0xce>
 80143d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80143d4:	d00b      	beq.n	80143ee <_svfiprintf_r+0x72>
 80143d6:	4653      	mov	r3, sl
 80143d8:	4632      	mov	r2, r6
 80143da:	4629      	mov	r1, r5
 80143dc:	4640      	mov	r0, r8
 80143de:	f7ff ff71 	bl	80142c4 <__ssputs_r>
 80143e2:	3001      	adds	r0, #1
 80143e4:	f000 80a3 	beq.w	801452e <_svfiprintf_r+0x1b2>
 80143e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143ea:	4453      	add	r3, sl
 80143ec:	9309      	str	r3, [sp, #36]	; 0x24
 80143ee:	783b      	ldrb	r3, [r7, #0]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	f000 809c 	beq.w	801452e <_svfiprintf_r+0x1b2>
 80143f6:	2300      	movs	r3, #0
 80143f8:	f04f 32ff 	mov.w	r2, #4294967295
 80143fc:	9304      	str	r3, [sp, #16]
 80143fe:	9307      	str	r3, [sp, #28]
 8014400:	9205      	str	r2, [sp, #20]
 8014402:	9306      	str	r3, [sp, #24]
 8014404:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014408:	931a      	str	r3, [sp, #104]	; 0x68
 801440a:	2205      	movs	r2, #5
 801440c:	7821      	ldrb	r1, [r4, #0]
 801440e:	4850      	ldr	r0, [pc, #320]	; (8014550 <_svfiprintf_r+0x1d4>)
 8014410:	f7eb fef6 	bl	8000200 <memchr>
 8014414:	1c67      	adds	r7, r4, #1
 8014416:	9b04      	ldr	r3, [sp, #16]
 8014418:	b9d8      	cbnz	r0, 8014452 <_svfiprintf_r+0xd6>
 801441a:	06d9      	lsls	r1, r3, #27
 801441c:	bf44      	itt	mi
 801441e:	2220      	movmi	r2, #32
 8014420:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014424:	071a      	lsls	r2, r3, #28
 8014426:	bf44      	itt	mi
 8014428:	222b      	movmi	r2, #43	; 0x2b
 801442a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801442e:	7822      	ldrb	r2, [r4, #0]
 8014430:	2a2a      	cmp	r2, #42	; 0x2a
 8014432:	d016      	beq.n	8014462 <_svfiprintf_r+0xe6>
 8014434:	9a07      	ldr	r2, [sp, #28]
 8014436:	2100      	movs	r1, #0
 8014438:	200a      	movs	r0, #10
 801443a:	4627      	mov	r7, r4
 801443c:	3401      	adds	r4, #1
 801443e:	783b      	ldrb	r3, [r7, #0]
 8014440:	3b30      	subs	r3, #48	; 0x30
 8014442:	2b09      	cmp	r3, #9
 8014444:	d951      	bls.n	80144ea <_svfiprintf_r+0x16e>
 8014446:	b1c9      	cbz	r1, 801447c <_svfiprintf_r+0x100>
 8014448:	e011      	b.n	801446e <_svfiprintf_r+0xf2>
 801444a:	2b25      	cmp	r3, #37	; 0x25
 801444c:	d0c0      	beq.n	80143d0 <_svfiprintf_r+0x54>
 801444e:	4627      	mov	r7, r4
 8014450:	e7b9      	b.n	80143c6 <_svfiprintf_r+0x4a>
 8014452:	4a3f      	ldr	r2, [pc, #252]	; (8014550 <_svfiprintf_r+0x1d4>)
 8014454:	1a80      	subs	r0, r0, r2
 8014456:	fa0b f000 	lsl.w	r0, fp, r0
 801445a:	4318      	orrs	r0, r3
 801445c:	9004      	str	r0, [sp, #16]
 801445e:	463c      	mov	r4, r7
 8014460:	e7d3      	b.n	801440a <_svfiprintf_r+0x8e>
 8014462:	9a03      	ldr	r2, [sp, #12]
 8014464:	1d11      	adds	r1, r2, #4
 8014466:	6812      	ldr	r2, [r2, #0]
 8014468:	9103      	str	r1, [sp, #12]
 801446a:	2a00      	cmp	r2, #0
 801446c:	db01      	blt.n	8014472 <_svfiprintf_r+0xf6>
 801446e:	9207      	str	r2, [sp, #28]
 8014470:	e004      	b.n	801447c <_svfiprintf_r+0x100>
 8014472:	4252      	negs	r2, r2
 8014474:	f043 0302 	orr.w	r3, r3, #2
 8014478:	9207      	str	r2, [sp, #28]
 801447a:	9304      	str	r3, [sp, #16]
 801447c:	783b      	ldrb	r3, [r7, #0]
 801447e:	2b2e      	cmp	r3, #46	; 0x2e
 8014480:	d10e      	bne.n	80144a0 <_svfiprintf_r+0x124>
 8014482:	787b      	ldrb	r3, [r7, #1]
 8014484:	2b2a      	cmp	r3, #42	; 0x2a
 8014486:	f107 0101 	add.w	r1, r7, #1
 801448a:	d132      	bne.n	80144f2 <_svfiprintf_r+0x176>
 801448c:	9b03      	ldr	r3, [sp, #12]
 801448e:	1d1a      	adds	r2, r3, #4
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	9203      	str	r2, [sp, #12]
 8014494:	2b00      	cmp	r3, #0
 8014496:	bfb8      	it	lt
 8014498:	f04f 33ff 	movlt.w	r3, #4294967295
 801449c:	3702      	adds	r7, #2
 801449e:	9305      	str	r3, [sp, #20]
 80144a0:	4c2c      	ldr	r4, [pc, #176]	; (8014554 <_svfiprintf_r+0x1d8>)
 80144a2:	7839      	ldrb	r1, [r7, #0]
 80144a4:	2203      	movs	r2, #3
 80144a6:	4620      	mov	r0, r4
 80144a8:	f7eb feaa 	bl	8000200 <memchr>
 80144ac:	b138      	cbz	r0, 80144be <_svfiprintf_r+0x142>
 80144ae:	2340      	movs	r3, #64	; 0x40
 80144b0:	1b00      	subs	r0, r0, r4
 80144b2:	fa03 f000 	lsl.w	r0, r3, r0
 80144b6:	9b04      	ldr	r3, [sp, #16]
 80144b8:	4303      	orrs	r3, r0
 80144ba:	9304      	str	r3, [sp, #16]
 80144bc:	3701      	adds	r7, #1
 80144be:	7839      	ldrb	r1, [r7, #0]
 80144c0:	4825      	ldr	r0, [pc, #148]	; (8014558 <_svfiprintf_r+0x1dc>)
 80144c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80144c6:	2206      	movs	r2, #6
 80144c8:	1c7e      	adds	r6, r7, #1
 80144ca:	f7eb fe99 	bl	8000200 <memchr>
 80144ce:	2800      	cmp	r0, #0
 80144d0:	d035      	beq.n	801453e <_svfiprintf_r+0x1c2>
 80144d2:	4b22      	ldr	r3, [pc, #136]	; (801455c <_svfiprintf_r+0x1e0>)
 80144d4:	b9fb      	cbnz	r3, 8014516 <_svfiprintf_r+0x19a>
 80144d6:	9b03      	ldr	r3, [sp, #12]
 80144d8:	3307      	adds	r3, #7
 80144da:	f023 0307 	bic.w	r3, r3, #7
 80144de:	3308      	adds	r3, #8
 80144e0:	9303      	str	r3, [sp, #12]
 80144e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144e4:	444b      	add	r3, r9
 80144e6:	9309      	str	r3, [sp, #36]	; 0x24
 80144e8:	e76c      	b.n	80143c4 <_svfiprintf_r+0x48>
 80144ea:	fb00 3202 	mla	r2, r0, r2, r3
 80144ee:	2101      	movs	r1, #1
 80144f0:	e7a3      	b.n	801443a <_svfiprintf_r+0xbe>
 80144f2:	2300      	movs	r3, #0
 80144f4:	9305      	str	r3, [sp, #20]
 80144f6:	4618      	mov	r0, r3
 80144f8:	240a      	movs	r4, #10
 80144fa:	460f      	mov	r7, r1
 80144fc:	3101      	adds	r1, #1
 80144fe:	783a      	ldrb	r2, [r7, #0]
 8014500:	3a30      	subs	r2, #48	; 0x30
 8014502:	2a09      	cmp	r2, #9
 8014504:	d903      	bls.n	801450e <_svfiprintf_r+0x192>
 8014506:	2b00      	cmp	r3, #0
 8014508:	d0ca      	beq.n	80144a0 <_svfiprintf_r+0x124>
 801450a:	9005      	str	r0, [sp, #20]
 801450c:	e7c8      	b.n	80144a0 <_svfiprintf_r+0x124>
 801450e:	fb04 2000 	mla	r0, r4, r0, r2
 8014512:	2301      	movs	r3, #1
 8014514:	e7f1      	b.n	80144fa <_svfiprintf_r+0x17e>
 8014516:	ab03      	add	r3, sp, #12
 8014518:	9300      	str	r3, [sp, #0]
 801451a:	462a      	mov	r2, r5
 801451c:	4b10      	ldr	r3, [pc, #64]	; (8014560 <_svfiprintf_r+0x1e4>)
 801451e:	a904      	add	r1, sp, #16
 8014520:	4640      	mov	r0, r8
 8014522:	f3af 8000 	nop.w
 8014526:	f1b0 3fff 	cmp.w	r0, #4294967295
 801452a:	4681      	mov	r9, r0
 801452c:	d1d9      	bne.n	80144e2 <_svfiprintf_r+0x166>
 801452e:	89ab      	ldrh	r3, [r5, #12]
 8014530:	065b      	lsls	r3, r3, #25
 8014532:	f53f af38 	bmi.w	80143a6 <_svfiprintf_r+0x2a>
 8014536:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014538:	b01d      	add	sp, #116	; 0x74
 801453a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801453e:	ab03      	add	r3, sp, #12
 8014540:	9300      	str	r3, [sp, #0]
 8014542:	462a      	mov	r2, r5
 8014544:	4b06      	ldr	r3, [pc, #24]	; (8014560 <_svfiprintf_r+0x1e4>)
 8014546:	a904      	add	r1, sp, #16
 8014548:	4640      	mov	r0, r8
 801454a:	f000 f881 	bl	8014650 <_printf_i>
 801454e:	e7ea      	b.n	8014526 <_svfiprintf_r+0x1aa>
 8014550:	08017ec8 	.word	0x08017ec8
 8014554:	08017ece 	.word	0x08017ece
 8014558:	08017ed2 	.word	0x08017ed2
 801455c:	00000000 	.word	0x00000000
 8014560:	080142c5 	.word	0x080142c5

08014564 <_printf_common>:
 8014564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014568:	4691      	mov	r9, r2
 801456a:	461f      	mov	r7, r3
 801456c:	688a      	ldr	r2, [r1, #8]
 801456e:	690b      	ldr	r3, [r1, #16]
 8014570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014574:	4293      	cmp	r3, r2
 8014576:	bfb8      	it	lt
 8014578:	4613      	movlt	r3, r2
 801457a:	f8c9 3000 	str.w	r3, [r9]
 801457e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014582:	4606      	mov	r6, r0
 8014584:	460c      	mov	r4, r1
 8014586:	b112      	cbz	r2, 801458e <_printf_common+0x2a>
 8014588:	3301      	adds	r3, #1
 801458a:	f8c9 3000 	str.w	r3, [r9]
 801458e:	6823      	ldr	r3, [r4, #0]
 8014590:	0699      	lsls	r1, r3, #26
 8014592:	bf42      	ittt	mi
 8014594:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014598:	3302      	addmi	r3, #2
 801459a:	f8c9 3000 	strmi.w	r3, [r9]
 801459e:	6825      	ldr	r5, [r4, #0]
 80145a0:	f015 0506 	ands.w	r5, r5, #6
 80145a4:	d107      	bne.n	80145b6 <_printf_common+0x52>
 80145a6:	f104 0a19 	add.w	sl, r4, #25
 80145aa:	68e3      	ldr	r3, [r4, #12]
 80145ac:	f8d9 2000 	ldr.w	r2, [r9]
 80145b0:	1a9b      	subs	r3, r3, r2
 80145b2:	429d      	cmp	r5, r3
 80145b4:	db29      	blt.n	801460a <_printf_common+0xa6>
 80145b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80145ba:	6822      	ldr	r2, [r4, #0]
 80145bc:	3300      	adds	r3, #0
 80145be:	bf18      	it	ne
 80145c0:	2301      	movne	r3, #1
 80145c2:	0692      	lsls	r2, r2, #26
 80145c4:	d42e      	bmi.n	8014624 <_printf_common+0xc0>
 80145c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80145ca:	4639      	mov	r1, r7
 80145cc:	4630      	mov	r0, r6
 80145ce:	47c0      	blx	r8
 80145d0:	3001      	adds	r0, #1
 80145d2:	d021      	beq.n	8014618 <_printf_common+0xb4>
 80145d4:	6823      	ldr	r3, [r4, #0]
 80145d6:	68e5      	ldr	r5, [r4, #12]
 80145d8:	f8d9 2000 	ldr.w	r2, [r9]
 80145dc:	f003 0306 	and.w	r3, r3, #6
 80145e0:	2b04      	cmp	r3, #4
 80145e2:	bf08      	it	eq
 80145e4:	1aad      	subeq	r5, r5, r2
 80145e6:	68a3      	ldr	r3, [r4, #8]
 80145e8:	6922      	ldr	r2, [r4, #16]
 80145ea:	bf0c      	ite	eq
 80145ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80145f0:	2500      	movne	r5, #0
 80145f2:	4293      	cmp	r3, r2
 80145f4:	bfc4      	itt	gt
 80145f6:	1a9b      	subgt	r3, r3, r2
 80145f8:	18ed      	addgt	r5, r5, r3
 80145fa:	f04f 0900 	mov.w	r9, #0
 80145fe:	341a      	adds	r4, #26
 8014600:	454d      	cmp	r5, r9
 8014602:	d11b      	bne.n	801463c <_printf_common+0xd8>
 8014604:	2000      	movs	r0, #0
 8014606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801460a:	2301      	movs	r3, #1
 801460c:	4652      	mov	r2, sl
 801460e:	4639      	mov	r1, r7
 8014610:	4630      	mov	r0, r6
 8014612:	47c0      	blx	r8
 8014614:	3001      	adds	r0, #1
 8014616:	d103      	bne.n	8014620 <_printf_common+0xbc>
 8014618:	f04f 30ff 	mov.w	r0, #4294967295
 801461c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014620:	3501      	adds	r5, #1
 8014622:	e7c2      	b.n	80145aa <_printf_common+0x46>
 8014624:	18e1      	adds	r1, r4, r3
 8014626:	1c5a      	adds	r2, r3, #1
 8014628:	2030      	movs	r0, #48	; 0x30
 801462a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801462e:	4422      	add	r2, r4
 8014630:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014634:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014638:	3302      	adds	r3, #2
 801463a:	e7c4      	b.n	80145c6 <_printf_common+0x62>
 801463c:	2301      	movs	r3, #1
 801463e:	4622      	mov	r2, r4
 8014640:	4639      	mov	r1, r7
 8014642:	4630      	mov	r0, r6
 8014644:	47c0      	blx	r8
 8014646:	3001      	adds	r0, #1
 8014648:	d0e6      	beq.n	8014618 <_printf_common+0xb4>
 801464a:	f109 0901 	add.w	r9, r9, #1
 801464e:	e7d7      	b.n	8014600 <_printf_common+0x9c>

08014650 <_printf_i>:
 8014650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014654:	4617      	mov	r7, r2
 8014656:	7e0a      	ldrb	r2, [r1, #24]
 8014658:	b085      	sub	sp, #20
 801465a:	2a6e      	cmp	r2, #110	; 0x6e
 801465c:	4698      	mov	r8, r3
 801465e:	4606      	mov	r6, r0
 8014660:	460c      	mov	r4, r1
 8014662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014664:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8014668:	f000 80bc 	beq.w	80147e4 <_printf_i+0x194>
 801466c:	d81a      	bhi.n	80146a4 <_printf_i+0x54>
 801466e:	2a63      	cmp	r2, #99	; 0x63
 8014670:	d02e      	beq.n	80146d0 <_printf_i+0x80>
 8014672:	d80a      	bhi.n	801468a <_printf_i+0x3a>
 8014674:	2a00      	cmp	r2, #0
 8014676:	f000 80c8 	beq.w	801480a <_printf_i+0x1ba>
 801467a:	2a58      	cmp	r2, #88	; 0x58
 801467c:	f000 808a 	beq.w	8014794 <_printf_i+0x144>
 8014680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014684:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8014688:	e02a      	b.n	80146e0 <_printf_i+0x90>
 801468a:	2a64      	cmp	r2, #100	; 0x64
 801468c:	d001      	beq.n	8014692 <_printf_i+0x42>
 801468e:	2a69      	cmp	r2, #105	; 0x69
 8014690:	d1f6      	bne.n	8014680 <_printf_i+0x30>
 8014692:	6821      	ldr	r1, [r4, #0]
 8014694:	681a      	ldr	r2, [r3, #0]
 8014696:	f011 0f80 	tst.w	r1, #128	; 0x80
 801469a:	d023      	beq.n	80146e4 <_printf_i+0x94>
 801469c:	1d11      	adds	r1, r2, #4
 801469e:	6019      	str	r1, [r3, #0]
 80146a0:	6813      	ldr	r3, [r2, #0]
 80146a2:	e027      	b.n	80146f4 <_printf_i+0xa4>
 80146a4:	2a73      	cmp	r2, #115	; 0x73
 80146a6:	f000 80b4 	beq.w	8014812 <_printf_i+0x1c2>
 80146aa:	d808      	bhi.n	80146be <_printf_i+0x6e>
 80146ac:	2a6f      	cmp	r2, #111	; 0x6f
 80146ae:	d02a      	beq.n	8014706 <_printf_i+0xb6>
 80146b0:	2a70      	cmp	r2, #112	; 0x70
 80146b2:	d1e5      	bne.n	8014680 <_printf_i+0x30>
 80146b4:	680a      	ldr	r2, [r1, #0]
 80146b6:	f042 0220 	orr.w	r2, r2, #32
 80146ba:	600a      	str	r2, [r1, #0]
 80146bc:	e003      	b.n	80146c6 <_printf_i+0x76>
 80146be:	2a75      	cmp	r2, #117	; 0x75
 80146c0:	d021      	beq.n	8014706 <_printf_i+0xb6>
 80146c2:	2a78      	cmp	r2, #120	; 0x78
 80146c4:	d1dc      	bne.n	8014680 <_printf_i+0x30>
 80146c6:	2278      	movs	r2, #120	; 0x78
 80146c8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80146cc:	496e      	ldr	r1, [pc, #440]	; (8014888 <_printf_i+0x238>)
 80146ce:	e064      	b.n	801479a <_printf_i+0x14a>
 80146d0:	681a      	ldr	r2, [r3, #0]
 80146d2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80146d6:	1d11      	adds	r1, r2, #4
 80146d8:	6019      	str	r1, [r3, #0]
 80146da:	6813      	ldr	r3, [r2, #0]
 80146dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80146e0:	2301      	movs	r3, #1
 80146e2:	e0a3      	b.n	801482c <_printf_i+0x1dc>
 80146e4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80146e8:	f102 0104 	add.w	r1, r2, #4
 80146ec:	6019      	str	r1, [r3, #0]
 80146ee:	d0d7      	beq.n	80146a0 <_printf_i+0x50>
 80146f0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	da03      	bge.n	8014700 <_printf_i+0xb0>
 80146f8:	222d      	movs	r2, #45	; 0x2d
 80146fa:	425b      	negs	r3, r3
 80146fc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014700:	4962      	ldr	r1, [pc, #392]	; (801488c <_printf_i+0x23c>)
 8014702:	220a      	movs	r2, #10
 8014704:	e017      	b.n	8014736 <_printf_i+0xe6>
 8014706:	6820      	ldr	r0, [r4, #0]
 8014708:	6819      	ldr	r1, [r3, #0]
 801470a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801470e:	d003      	beq.n	8014718 <_printf_i+0xc8>
 8014710:	1d08      	adds	r0, r1, #4
 8014712:	6018      	str	r0, [r3, #0]
 8014714:	680b      	ldr	r3, [r1, #0]
 8014716:	e006      	b.n	8014726 <_printf_i+0xd6>
 8014718:	f010 0f40 	tst.w	r0, #64	; 0x40
 801471c:	f101 0004 	add.w	r0, r1, #4
 8014720:	6018      	str	r0, [r3, #0]
 8014722:	d0f7      	beq.n	8014714 <_printf_i+0xc4>
 8014724:	880b      	ldrh	r3, [r1, #0]
 8014726:	4959      	ldr	r1, [pc, #356]	; (801488c <_printf_i+0x23c>)
 8014728:	2a6f      	cmp	r2, #111	; 0x6f
 801472a:	bf14      	ite	ne
 801472c:	220a      	movne	r2, #10
 801472e:	2208      	moveq	r2, #8
 8014730:	2000      	movs	r0, #0
 8014732:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8014736:	6865      	ldr	r5, [r4, #4]
 8014738:	60a5      	str	r5, [r4, #8]
 801473a:	2d00      	cmp	r5, #0
 801473c:	f2c0 809c 	blt.w	8014878 <_printf_i+0x228>
 8014740:	6820      	ldr	r0, [r4, #0]
 8014742:	f020 0004 	bic.w	r0, r0, #4
 8014746:	6020      	str	r0, [r4, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d13f      	bne.n	80147cc <_printf_i+0x17c>
 801474c:	2d00      	cmp	r5, #0
 801474e:	f040 8095 	bne.w	801487c <_printf_i+0x22c>
 8014752:	4675      	mov	r5, lr
 8014754:	2a08      	cmp	r2, #8
 8014756:	d10b      	bne.n	8014770 <_printf_i+0x120>
 8014758:	6823      	ldr	r3, [r4, #0]
 801475a:	07da      	lsls	r2, r3, #31
 801475c:	d508      	bpl.n	8014770 <_printf_i+0x120>
 801475e:	6923      	ldr	r3, [r4, #16]
 8014760:	6862      	ldr	r2, [r4, #4]
 8014762:	429a      	cmp	r2, r3
 8014764:	bfde      	ittt	le
 8014766:	2330      	movle	r3, #48	; 0x30
 8014768:	f805 3c01 	strble.w	r3, [r5, #-1]
 801476c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014770:	ebae 0305 	sub.w	r3, lr, r5
 8014774:	6123      	str	r3, [r4, #16]
 8014776:	f8cd 8000 	str.w	r8, [sp]
 801477a:	463b      	mov	r3, r7
 801477c:	aa03      	add	r2, sp, #12
 801477e:	4621      	mov	r1, r4
 8014780:	4630      	mov	r0, r6
 8014782:	f7ff feef 	bl	8014564 <_printf_common>
 8014786:	3001      	adds	r0, #1
 8014788:	d155      	bne.n	8014836 <_printf_i+0x1e6>
 801478a:	f04f 30ff 	mov.w	r0, #4294967295
 801478e:	b005      	add	sp, #20
 8014790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014794:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8014798:	493c      	ldr	r1, [pc, #240]	; (801488c <_printf_i+0x23c>)
 801479a:	6822      	ldr	r2, [r4, #0]
 801479c:	6818      	ldr	r0, [r3, #0]
 801479e:	f012 0f80 	tst.w	r2, #128	; 0x80
 80147a2:	f100 0504 	add.w	r5, r0, #4
 80147a6:	601d      	str	r5, [r3, #0]
 80147a8:	d001      	beq.n	80147ae <_printf_i+0x15e>
 80147aa:	6803      	ldr	r3, [r0, #0]
 80147ac:	e002      	b.n	80147b4 <_printf_i+0x164>
 80147ae:	0655      	lsls	r5, r2, #25
 80147b0:	d5fb      	bpl.n	80147aa <_printf_i+0x15a>
 80147b2:	8803      	ldrh	r3, [r0, #0]
 80147b4:	07d0      	lsls	r0, r2, #31
 80147b6:	bf44      	itt	mi
 80147b8:	f042 0220 	orrmi.w	r2, r2, #32
 80147bc:	6022      	strmi	r2, [r4, #0]
 80147be:	b91b      	cbnz	r3, 80147c8 <_printf_i+0x178>
 80147c0:	6822      	ldr	r2, [r4, #0]
 80147c2:	f022 0220 	bic.w	r2, r2, #32
 80147c6:	6022      	str	r2, [r4, #0]
 80147c8:	2210      	movs	r2, #16
 80147ca:	e7b1      	b.n	8014730 <_printf_i+0xe0>
 80147cc:	4675      	mov	r5, lr
 80147ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80147d2:	fb02 3310 	mls	r3, r2, r0, r3
 80147d6:	5ccb      	ldrb	r3, [r1, r3]
 80147d8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80147dc:	4603      	mov	r3, r0
 80147de:	2800      	cmp	r0, #0
 80147e0:	d1f5      	bne.n	80147ce <_printf_i+0x17e>
 80147e2:	e7b7      	b.n	8014754 <_printf_i+0x104>
 80147e4:	6808      	ldr	r0, [r1, #0]
 80147e6:	681a      	ldr	r2, [r3, #0]
 80147e8:	6949      	ldr	r1, [r1, #20]
 80147ea:	f010 0f80 	tst.w	r0, #128	; 0x80
 80147ee:	d004      	beq.n	80147fa <_printf_i+0x1aa>
 80147f0:	1d10      	adds	r0, r2, #4
 80147f2:	6018      	str	r0, [r3, #0]
 80147f4:	6813      	ldr	r3, [r2, #0]
 80147f6:	6019      	str	r1, [r3, #0]
 80147f8:	e007      	b.n	801480a <_printf_i+0x1ba>
 80147fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80147fe:	f102 0004 	add.w	r0, r2, #4
 8014802:	6018      	str	r0, [r3, #0]
 8014804:	6813      	ldr	r3, [r2, #0]
 8014806:	d0f6      	beq.n	80147f6 <_printf_i+0x1a6>
 8014808:	8019      	strh	r1, [r3, #0]
 801480a:	2300      	movs	r3, #0
 801480c:	6123      	str	r3, [r4, #16]
 801480e:	4675      	mov	r5, lr
 8014810:	e7b1      	b.n	8014776 <_printf_i+0x126>
 8014812:	681a      	ldr	r2, [r3, #0]
 8014814:	1d11      	adds	r1, r2, #4
 8014816:	6019      	str	r1, [r3, #0]
 8014818:	6815      	ldr	r5, [r2, #0]
 801481a:	6862      	ldr	r2, [r4, #4]
 801481c:	2100      	movs	r1, #0
 801481e:	4628      	mov	r0, r5
 8014820:	f7eb fcee 	bl	8000200 <memchr>
 8014824:	b108      	cbz	r0, 801482a <_printf_i+0x1da>
 8014826:	1b40      	subs	r0, r0, r5
 8014828:	6060      	str	r0, [r4, #4]
 801482a:	6863      	ldr	r3, [r4, #4]
 801482c:	6123      	str	r3, [r4, #16]
 801482e:	2300      	movs	r3, #0
 8014830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014834:	e79f      	b.n	8014776 <_printf_i+0x126>
 8014836:	6923      	ldr	r3, [r4, #16]
 8014838:	462a      	mov	r2, r5
 801483a:	4639      	mov	r1, r7
 801483c:	4630      	mov	r0, r6
 801483e:	47c0      	blx	r8
 8014840:	3001      	adds	r0, #1
 8014842:	d0a2      	beq.n	801478a <_printf_i+0x13a>
 8014844:	6823      	ldr	r3, [r4, #0]
 8014846:	079b      	lsls	r3, r3, #30
 8014848:	d507      	bpl.n	801485a <_printf_i+0x20a>
 801484a:	2500      	movs	r5, #0
 801484c:	f104 0919 	add.w	r9, r4, #25
 8014850:	68e3      	ldr	r3, [r4, #12]
 8014852:	9a03      	ldr	r2, [sp, #12]
 8014854:	1a9b      	subs	r3, r3, r2
 8014856:	429d      	cmp	r5, r3
 8014858:	db05      	blt.n	8014866 <_printf_i+0x216>
 801485a:	68e0      	ldr	r0, [r4, #12]
 801485c:	9b03      	ldr	r3, [sp, #12]
 801485e:	4298      	cmp	r0, r3
 8014860:	bfb8      	it	lt
 8014862:	4618      	movlt	r0, r3
 8014864:	e793      	b.n	801478e <_printf_i+0x13e>
 8014866:	2301      	movs	r3, #1
 8014868:	464a      	mov	r2, r9
 801486a:	4639      	mov	r1, r7
 801486c:	4630      	mov	r0, r6
 801486e:	47c0      	blx	r8
 8014870:	3001      	adds	r0, #1
 8014872:	d08a      	beq.n	801478a <_printf_i+0x13a>
 8014874:	3501      	adds	r5, #1
 8014876:	e7eb      	b.n	8014850 <_printf_i+0x200>
 8014878:	2b00      	cmp	r3, #0
 801487a:	d1a7      	bne.n	80147cc <_printf_i+0x17c>
 801487c:	780b      	ldrb	r3, [r1, #0]
 801487e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014882:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014886:	e765      	b.n	8014754 <_printf_i+0x104>
 8014888:	08017eea 	.word	0x08017eea
 801488c:	08017ed9 	.word	0x08017ed9

08014890 <_read_r>:
 8014890:	b538      	push	{r3, r4, r5, lr}
 8014892:	4c07      	ldr	r4, [pc, #28]	; (80148b0 <_read_r+0x20>)
 8014894:	4605      	mov	r5, r0
 8014896:	4608      	mov	r0, r1
 8014898:	4611      	mov	r1, r2
 801489a:	2200      	movs	r2, #0
 801489c:	6022      	str	r2, [r4, #0]
 801489e:	461a      	mov	r2, r3
 80148a0:	f7fe fe96 	bl	80135d0 <_read>
 80148a4:	1c43      	adds	r3, r0, #1
 80148a6:	d102      	bne.n	80148ae <_read_r+0x1e>
 80148a8:	6823      	ldr	r3, [r4, #0]
 80148aa:	b103      	cbz	r3, 80148ae <_read_r+0x1e>
 80148ac:	602b      	str	r3, [r5, #0]
 80148ae:	bd38      	pop	{r3, r4, r5, pc}
 80148b0:	2000247c 	.word	0x2000247c

080148b4 <_realloc_r>:
 80148b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148b6:	4607      	mov	r7, r0
 80148b8:	4614      	mov	r4, r2
 80148ba:	460e      	mov	r6, r1
 80148bc:	b921      	cbnz	r1, 80148c8 <_realloc_r+0x14>
 80148be:	4611      	mov	r1, r2
 80148c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80148c4:	f7ff bb4e 	b.w	8013f64 <_malloc_r>
 80148c8:	b922      	cbnz	r2, 80148d4 <_realloc_r+0x20>
 80148ca:	f7ff fafd 	bl	8013ec8 <_free_r>
 80148ce:	4625      	mov	r5, r4
 80148d0:	4628      	mov	r0, r5
 80148d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148d4:	f000 f814 	bl	8014900 <_malloc_usable_size_r>
 80148d8:	4284      	cmp	r4, r0
 80148da:	d90f      	bls.n	80148fc <_realloc_r+0x48>
 80148dc:	4621      	mov	r1, r4
 80148de:	4638      	mov	r0, r7
 80148e0:	f7ff fb40 	bl	8013f64 <_malloc_r>
 80148e4:	4605      	mov	r5, r0
 80148e6:	2800      	cmp	r0, #0
 80148e8:	d0f2      	beq.n	80148d0 <_realloc_r+0x1c>
 80148ea:	4631      	mov	r1, r6
 80148ec:	4622      	mov	r2, r4
 80148ee:	f7ff fabd 	bl	8013e6c <memcpy>
 80148f2:	4631      	mov	r1, r6
 80148f4:	4638      	mov	r0, r7
 80148f6:	f7ff fae7 	bl	8013ec8 <_free_r>
 80148fa:	e7e9      	b.n	80148d0 <_realloc_r+0x1c>
 80148fc:	4635      	mov	r5, r6
 80148fe:	e7e7      	b.n	80148d0 <_realloc_r+0x1c>

08014900 <_malloc_usable_size_r>:
 8014900:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8014904:	2800      	cmp	r0, #0
 8014906:	f1a0 0004 	sub.w	r0, r0, #4
 801490a:	bfbc      	itt	lt
 801490c:	580b      	ldrlt	r3, [r1, r0]
 801490e:	18c0      	addlt	r0, r0, r3
 8014910:	4770      	bx	lr
	...

08014914 <_init>:
 8014914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014916:	bf00      	nop
 8014918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801491a:	bc08      	pop	{r3}
 801491c:	469e      	mov	lr, r3
 801491e:	4770      	bx	lr

08014920 <_fini>:
 8014920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014922:	bf00      	nop
 8014924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014926:	bc08      	pop	{r3}
 8014928:	469e      	mov	lr, r3
 801492a:	4770      	bx	lr
