
src_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013044  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e8c  080131d4  080131d4  000231d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08016060  08016060  00026060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08016064  08016064  00026064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  20000000  08016068  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000301f0  2**0
                  CONTENTS
  7 .bss          00001910  200001f0  200001f0  000301f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  20001b00  20001b00  000301f0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00039a85  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006a9d  00000000  00000000  00069ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000014c8  00000000  00000000  00070748  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000013f8  00000000  00000000  00071c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000fa61  00000000  00000000  00073008  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000053bb  00000000  00000000  00082a69  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00087e24  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000057c8  00000000  00000000  00087ea0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080131bc 	.word	0x080131bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	080131bc 	.word	0x080131bc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <send_gsm_command_by_index>:
#include <string.h>
#include <stdbool.h>
#include "uart_line_queue.h"// định nghĩa tạm thời cho biến ppp_mode để xác định trạng thái 

// Hàm gửi lệnh AT dựa trên chỉ số lệnh trong gsm_commands
void send_gsm_command_by_index(int idx) {
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
    if (idx < 0 || idx >= gsm_commands_count) return;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	db1d      	blt.n	80002ea <send_gsm_command_by_index+0x4a>
 80002ae:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <send_gsm_command_by_index+0x54>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	da18      	bge.n	80002ea <send_gsm_command_by_index+0x4a>
    uart1_send_raw((uint8_t *)gsm_commands[idx].syntax, strlen(gsm_commands[idx].syntax));
 80002b8:	4a0f      	ldr	r2, [pc, #60]	; (80002f8 <send_gsm_command_by_index+0x58>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	011b      	lsls	r3, r3, #4
 80002be:	4413      	add	r3, r2
 80002c0:	3304      	adds	r3, #4
 80002c2:	681c      	ldr	r4, [r3, #0]
 80002c4:	4a0c      	ldr	r2, [pc, #48]	; (80002f8 <send_gsm_command_by_index+0x58>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	011b      	lsls	r3, r3, #4
 80002ca:	4413      	add	r3, r2
 80002cc:	3304      	adds	r3, #4
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f7ff ff87 	bl	80001e4 <strlen>
 80002d6:	4603      	mov	r3, r0
 80002d8:	4619      	mov	r1, r3
 80002da:	4620      	mov	r0, r4
 80002dc:	f000 fca2 	bl	8000c24 <uart1_send_raw>
    uart1_send_raw((uint8_t *)"\r\n", 2);
 80002e0:	2102      	movs	r1, #2
 80002e2:	4806      	ldr	r0, [pc, #24]	; (80002fc <send_gsm_command_by_index+0x5c>)
 80002e4:	f000 fc9e 	bl	8000c24 <uart1_send_raw>
 80002e8:	e000      	b.n	80002ec <send_gsm_command_by_index+0x4c>
    if (idx < 0 || idx >= gsm_commands_count) return;
 80002ea:	bf00      	nop
}
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd90      	pop	{r4, r7, pc}
 80002f2:	bf00      	nop
 80002f4:	08015a18 	.word	0x08015a18
 80002f8:	08015968 	.word	0x08015968
 80002fc:	080131d4 	.word	0x080131d4

08000300 <send_all_gsm_commands_with_check>:

// Hàm gửi lần lượt các lệnh, chỉ gửi tiếp khi phản hồi thành công
void send_all_gsm_commands_with_check(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b0d4      	sub	sp, #336	; 0x150
 8000304:	af02      	add	r7, sp, #8
    static uint32_t start_tick = 0;
    static uint32_t last_send_tick = 0;
    static bool waiting_for_response = false;
    char response[256];

    if (current_command_index >= gsm_commands_count) {
 8000306:	4b40      	ldr	r3, [pc, #256]	; (8000408 <send_all_gsm_commands_with_check+0x108>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	4b40      	ldr	r3, [pc, #256]	; (800040c <send_all_gsm_commands_with_check+0x10c>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	429a      	cmp	r2, r3
 8000310:	da75      	bge.n	80003fe <send_all_gsm_commands_with_check+0xfe>
        return; // Đã gửi hết lệnh
    }

    if (!waiting_for_response) {
 8000312:	4b3f      	ldr	r3, [pc, #252]	; (8000410 <send_all_gsm_commands_with_check+0x110>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	f083 0301 	eor.w	r3, r3, #1
 800031a:	b2db      	uxtb	r3, r3
 800031c:	2b00      	cmp	r3, #0
 800031e:	d00e      	beq.n	800033e <send_all_gsm_commands_with_check+0x3e>
        start_tick = timer2_get_tick();
 8000320:	f000 fb7c 	bl	8000a1c <timer2_get_tick>
 8000324:	4602      	mov	r2, r0
 8000326:	4b3b      	ldr	r3, [pc, #236]	; (8000414 <send_all_gsm_commands_with_check+0x114>)
 8000328:	601a      	str	r2, [r3, #0]
        last_send_tick = start_tick - 5000;
 800032a:	4b3a      	ldr	r3, [pc, #232]	; (8000414 <send_all_gsm_commands_with_check+0x114>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000332:	3b08      	subs	r3, #8
 8000334:	4a38      	ldr	r2, [pc, #224]	; (8000418 <send_all_gsm_commands_with_check+0x118>)
 8000336:	6013      	str	r3, [r2, #0]
        waiting_for_response = true;
 8000338:	4b35      	ldr	r3, [pc, #212]	; (8000410 <send_all_gsm_commands_with_check+0x110>)
 800033a:	2201      	movs	r2, #1
 800033c:	701a      	strb	r2, [r3, #0]
    }

    uint32_t wait_time = gsm_commands[current_command_index].max_response_time_ms;
 800033e:	4b32      	ldr	r3, [pc, #200]	; (8000408 <send_all_gsm_commands_with_check+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a36      	ldr	r2, [pc, #216]	; (800041c <send_all_gsm_commands_with_check+0x11c>)
 8000344:	011b      	lsls	r3, r3, #4
 8000346:	4413      	add	r3, r2
 8000348:	330c      	adds	r3, #12
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    if ((timer2_get_tick() - start_tick) < wait_time) {
 8000350:	f000 fb64 	bl	8000a1c <timer2_get_tick>
 8000354:	4602      	mov	r2, r0
 8000356:	4b2f      	ldr	r3, [pc, #188]	; (8000414 <send_all_gsm_commands_with_check+0x114>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	1ad2      	subs	r2, r2, r3
 800035c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000360:	429a      	cmp	r2, r3
 8000362:	d231      	bcs.n	80003c8 <send_all_gsm_commands_with_check+0xc8>
        if ((timer2_get_tick() - last_send_tick) >= 5000) {
 8000364:	f000 fb5a 	bl	8000a1c <timer2_get_tick>
 8000368:	4602      	mov	r2, r0
 800036a:	4b2b      	ldr	r3, [pc, #172]	; (8000418 <send_all_gsm_commands_with_check+0x118>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	1ad3      	subs	r3, r2, r3
 8000370:	f241 3287 	movw	r2, #4999	; 0x1387
 8000374:	4293      	cmp	r3, r2
 8000376:	d91e      	bls.n	80003b6 <send_all_gsm_commands_with_check+0xb6>
            send_gsm_command_by_index(current_command_index);
 8000378:	4b23      	ldr	r3, [pc, #140]	; (8000408 <send_all_gsm_commands_with_check+0x108>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff ff8f 	bl	80002a0 <send_gsm_command_by_index>
            last_send_tick = timer2_get_tick();
 8000382:	f000 fb4b 	bl	8000a1c <timer2_get_tick>
 8000386:	4602      	mov	r2, r0
 8000388:	4b23      	ldr	r3, [pc, #140]	; (8000418 <send_all_gsm_commands_with_check+0x118>)
 800038a:	601a      	str	r2, [r3, #0]
        }
        while (uart_line_queue_pop(response)) {
 800038c:	e013      	b.n	80003b6 <send_all_gsm_commands_with_check+0xb6>
            if (check_gsm_response_by_index(current_command_index, response)) {
 800038e:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <send_all_gsm_commands_with_check+0x108>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000396:	4611      	mov	r1, r2
 8000398:	4618      	mov	r0, r3
 800039a:	f000 f957 	bl	800064c <check_gsm_response_by_index>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d008      	beq.n	80003b6 <send_all_gsm_commands_with_check+0xb6>
                waiting_for_response = false;
 80003a4:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <send_all_gsm_commands_with_check+0x110>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
                current_command_index++;
 80003aa:	4b17      	ldr	r3, [pc, #92]	; (8000408 <send_all_gsm_commands_with_check+0x108>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	3301      	adds	r3, #1
 80003b0:	4a15      	ldr	r2, [pc, #84]	; (8000408 <send_all_gsm_commands_with_check+0x108>)
 80003b2:	6013      	str	r3, [r2, #0]
                return; // Chuyển sang lệnh tiếp theo
 80003b4:	e024      	b.n	8000400 <send_all_gsm_commands_with_check+0x100>
        while (uart_line_queue_pop(response)) {
 80003b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 fe0a 	bl	8000fd4 <uart_line_queue_pop>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d1e3      	bne.n	800038e <send_all_gsm_commands_with_check+0x8e>
 80003c6:	e01b      	b.n	8000400 <send_all_gsm_commands_with_check+0x100>
            }
        }
    } else {
        char log_buf[64];
        snprintf(log_buf, sizeof(log_buf), "Loi khi gui lenh case %d: %s", current_command_index, gsm_commands[current_command_index].command);
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <send_all_gsm_commands_with_check+0x108>)
 80003ca:	6819      	ldr	r1, [r3, #0]
 80003cc:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <send_all_gsm_commands_with_check+0x108>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a12      	ldr	r2, [pc, #72]	; (800041c <send_all_gsm_commands_with_check+0x11c>)
 80003d2:	011b      	lsls	r3, r3, #4
 80003d4:	4413      	add	r3, r2
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	1d38      	adds	r0, r7, #4
 80003da:	9300      	str	r3, [sp, #0]
 80003dc:	460b      	mov	r3, r1
 80003de:	4a10      	ldr	r2, [pc, #64]	; (8000420 <send_all_gsm_commands_with_check+0x120>)
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	f012 fad9 	bl	8012998 <sniprintf>
        uart_log(log_buf);
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 fbe3 	bl	8000bb4 <uart_log>
        waiting_for_response = false;
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <send_all_gsm_commands_with_check+0x110>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	701a      	strb	r2, [r3, #0]
        current_command_index = gsm_commands_count; // Kết thúc gửi lệnh
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <send_all_gsm_commands_with_check+0x10c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a03      	ldr	r2, [pc, #12]	; (8000408 <send_all_gsm_commands_with_check+0x108>)
 80003fa:	6013      	str	r3, [r2, #0]
 80003fc:	e000      	b.n	8000400 <send_all_gsm_commands_with_check+0x100>
        return; // Đã gửi hết lệnh
 80003fe:	bf00      	nop
    }
 8000400:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	2000020c 	.word	0x2000020c
 800040c:	08015a18 	.word	0x08015a18
 8000410:	20000210 	.word	0x20000210
 8000414:	20000214 	.word	0x20000214
 8000418:	20000218 	.word	0x20000218
 800041c:	08015968 	.word	0x08015968
 8000420:	080131d8 	.word	0x080131d8

08000424 <parse_response_at>:
#include "gsm_state.h"
#include "ppp_net/ppp_connection.h" // Thêm header để truy cập gsm_ppp_mode


// Hàm phân tích phản hồi cho lệnh "AT"
bool parse_response_at(const char* response) {
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800042c:	6878      	ldr	r0, [r7, #4]
 800042e:	f000 fbc1 	bl	8000bb4 <uart_log>
    return strstr(response, "OK") != NULL;
 8000432:	4907      	ldr	r1, [pc, #28]	; (8000450 <parse_response_at+0x2c>)
 8000434:	6878      	ldr	r0, [r7, #4]
 8000436:	f012 fb3b 	bl	8012ab0 <strstr>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	bf14      	ite	ne
 8000440:	2301      	movne	r3, #1
 8000442:	2300      	moveq	r3, #0
 8000444:	b2db      	uxtb	r3, r3
}
 8000446:	4618      	mov	r0, r3
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	08013358 	.word	0x08013358

08000454 <parse_response_ati>:

// Hàm phân tích phản hồi cho lệnh "ATI"
bool parse_response_ati(const char* response) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f000 fba9 	bl	8000bb4 <uart_log>
    return strstr(response, "Manufacturer: INCORPORATED") != NULL; // Dòng dữ liệu chính
 8000462:	4907      	ldr	r1, [pc, #28]	; (8000480 <parse_response_ati+0x2c>)
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f012 fb23 	bl	8012ab0 <strstr>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	bf14      	ite	ne
 8000470:	2301      	movne	r3, #1
 8000472:	2300      	moveq	r3, #0
 8000474:	b2db      	uxtb	r3, r3
}
 8000476:	4618      	mov	r0, r3
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	0801335c 	.word	0x0801335c

08000484 <parse_response_at_cpin>:

// Hàm phân tích phản hồi cho lệnh "AT+CPIN?"
bool parse_response_at_cpin(const char* response) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f000 fb91 	bl	8000bb4 <uart_log>
    return strstr(response, "+CPIN: READY") != NULL; // Dòng dữ liệu chính
 8000492:	4907      	ldr	r1, [pc, #28]	; (80004b0 <parse_response_at_cpin+0x2c>)
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f012 fb0b 	bl	8012ab0 <strstr>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	bf14      	ite	ne
 80004a0:	2301      	movne	r3, #1
 80004a2:	2300      	moveq	r3, #0
 80004a4:	b2db      	uxtb	r3, r3
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	08013378 	.word	0x08013378

080004b4 <parse_response_at_csq>:

// Hàm phân tích phản hồi cho lệnh "AT+CSQ"
bool parse_response_at_csq(const char* response) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f000 fb79 	bl	8000bb4 <uart_log>
    return strstr(response, "+CSQ:") != NULL; // Dòng dữ liệu chính
 80004c2:	4907      	ldr	r1, [pc, #28]	; (80004e0 <parse_response_at_csq+0x2c>)
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f012 faf3 	bl	8012ab0 <strstr>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	bf14      	ite	ne
 80004d0:	2301      	movne	r3, #1
 80004d2:	2300      	moveq	r3, #0
 80004d4:	b2db      	uxtb	r3, r3
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	08013388 	.word	0x08013388

080004e4 <parse_response_at_cereg>:

// Hàm phân tích phản hồi cho lệnh "AT+CEREG?"
bool parse_response_at_cereg(const char* response) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f000 fb61 	bl	8000bb4 <uart_log>
    return strstr(response, "+CEREG: 0,1") != NULL; // Dòng dữ liệu chính
 80004f2:	4907      	ldr	r1, [pc, #28]	; (8000510 <parse_response_at_cereg+0x2c>)
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f012 fadb 	bl	8012ab0 <strstr>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	bf14      	ite	ne
 8000500:	2301      	movne	r3, #1
 8000502:	2300      	moveq	r3, #0
 8000504:	b2db      	uxtb	r3, r3
}
 8000506:	4618      	mov	r0, r3
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	08013390 	.word	0x08013390

08000514 <parse_response_at_cops>:

// Hàm phân tích phản hồi cho lệnh "AT+COPS"
bool parse_response_at_cops(const char* response) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f000 fb49 	bl	8000bb4 <uart_log>
    return strstr(response, "+COPS=0") != NULL; // Dòng dữ liệu chính
 8000522:	4907      	ldr	r1, [pc, #28]	; (8000540 <parse_response_at_cops+0x2c>)
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f012 fac3 	bl	8012ab0 <strstr>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	bf14      	ite	ne
 8000530:	2301      	movne	r3, #1
 8000532:	2300      	moveq	r3, #0
 8000534:	b2db      	uxtb	r3, r3
}
 8000536:	4618      	mov	r0, r3
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	0801339c 	.word	0x0801339c

08000544 <parse_response_at_cgdcont>:

// Hàm phân tích phản hồi cho lệnh "AT+CGDCONT"
bool parse_response_at_cgdcont(const char* response) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f000 fb31 	bl	8000bb4 <uart_log>
    return strstr(response, "OK") != NULL; // Dòng xác nhận
 8000552:	4907      	ldr	r1, [pc, #28]	; (8000570 <parse_response_at_cgdcont+0x2c>)
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f012 faab 	bl	8012ab0 <strstr>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	bf14      	ite	ne
 8000560:	2301      	movne	r3, #1
 8000562:	2300      	moveq	r3, #0
 8000564:	b2db      	uxtb	r3, r3
}
 8000566:	4618      	mov	r0, r3
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	08013358 	.word	0x08013358

08000574 <parse_response_at_cgauth>:

// Hàm phân tích phản hồi cho lệnh "AT+CGAUTH"
bool parse_response_at_cgauth(const char* response) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f000 fb19 	bl	8000bb4 <uart_log>
    return strstr(response, "OK") != NULL; // Dòng xác nhận
 8000582:	4907      	ldr	r1, [pc, #28]	; (80005a0 <parse_response_at_cgauth+0x2c>)
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f012 fa93 	bl	8012ab0 <strstr>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	bf14      	ite	ne
 8000590:	2301      	movne	r3, #1
 8000592:	2300      	moveq	r3, #0
 8000594:	b2db      	uxtb	r3, r3
}
 8000596:	4618      	mov	r0, r3
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	08013358 	.word	0x08013358

080005a4 <parse_response_at_cgact>:

// Hàm phân tích phản hồi cho lệnh "AT+CGACT"
bool parse_response_at_cgact(const char* response) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 fb01 	bl	8000bb4 <uart_log>
    return strstr(response, "OK") != NULL; // Dòng xác nhận
 80005b2:	4907      	ldr	r1, [pc, #28]	; (80005d0 <parse_response_at_cgact+0x2c>)
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f012 fa7b 	bl	8012ab0 <strstr>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	bf14      	ite	ne
 80005c0:	2301      	movne	r3, #1
 80005c2:	2300      	moveq	r3, #0
 80005c4:	b2db      	uxtb	r3, r3
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	08013358 	.word	0x08013358

080005d4 <parse_response_at_cgpaddr>:

// Hàm phân tích phản hồi cho lệnh "AT+CGPADDR"
bool parse_response_at_cgpaddr(const char* response) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 fae9 	bl	8000bb4 <uart_log>
    return strstr(response, "+CGPADDR: 1,") != NULL; // Dòng dữ liệu chính
 80005e2:	4907      	ldr	r1, [pc, #28]	; (8000600 <parse_response_at_cgpaddr+0x2c>)
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f012 fa63 	bl	8012ab0 <strstr>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bf14      	ite	ne
 80005f0:	2301      	movne	r3, #1
 80005f2:	2300      	moveq	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	080133a4 	.word	0x080133a4

08000604 <parse_response_atd99>:
    uart_log(response);
    return strstr(response, "CONNECT") != NULL; // Dòng dữ liệu chính
}

// Hàm phân tích phản hồi cho lệnh "ATD*99#"
bool parse_response_atd99(const char* response) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 fad1 	bl	8000bb4 <uart_log>
    if (strstr(response, "CONNECT") != NULL) {
 8000612:	490b      	ldr	r1, [pc, #44]	; (8000640 <parse_response_atd99+0x3c>)
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f012 fa4b 	bl	8012ab0 <strstr>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d009      	beq.n	8000634 <parse_response_atd99+0x30>
        // Khi nhận được "CONNECT", chuyển sang chế độ PPP
        // Cờ này sẽ được sử dụng trong uart1_poll() để chuyển dữ liệu đến lwIP
        gsm_ppp_mode = true;
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <parse_response_atd99+0x40>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
        uart_log("Switching to PPP mode.");
 8000626:	4808      	ldr	r0, [pc, #32]	; (8000648 <parse_response_atd99+0x44>)
 8000628:	f000 fac4 	bl	8000bb4 <uart_log>
        
        // Xóa bộ đệm DMA và bắt đầu nhận dữ liệu PPP.
        // Điều này đảm bảo rằng không có dữ liệu AT command cũ nào bị xử lý như dữ liệu PPP.
        restart_dma2_stream2(); 
 800062c:	f000 fc4c 	bl	8000ec8 <restart_dma2_stream2>
        
        return true;
 8000630:	2301      	movs	r3, #1
 8000632:	e000      	b.n	8000636 <parse_response_atd99+0x32>
    }
    return false;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	080133b4 	.word	0x080133b4
 8000644:	200006b4 	.word	0x200006b4
 8000648:	080133bc 	.word	0x080133bc

0800064c <check_gsm_response_by_index>:


bool ppp_mode = false;

// Hàm kiểm tra phản hồi dựa trên chỉ số lệnh trong gsm_commands
bool check_gsm_response_by_index(int idx, const char* response) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
    switch (idx) {
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b0a      	cmp	r3, #10
 800065a:	d855      	bhi.n	8000708 <check_gsm_response_by_index+0xbc>
 800065c:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <check_gsm_response_by_index+0x18>)
 800065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000662:	bf00      	nop
 8000664:	08000691 	.word	0x08000691
 8000668:	0800069b 	.word	0x0800069b
 800066c:	080006a5 	.word	0x080006a5
 8000670:	080006af 	.word	0x080006af
 8000674:	080006b9 	.word	0x080006b9
 8000678:	080006c3 	.word	0x080006c3
 800067c:	080006d7 	.word	0x080006d7
 8000680:	080006e1 	.word	0x080006e1
 8000684:	080006eb 	.word	0x080006eb
 8000688:	080006f5 	.word	0x080006f5
 800068c:	080006ff 	.word	0x080006ff
        case 0: // AT
            return parse_response_at(response);
 8000690:	6838      	ldr	r0, [r7, #0]
 8000692:	f7ff fec7 	bl	8000424 <parse_response_at>
 8000696:	4603      	mov	r3, r0
 8000698:	e037      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 1: // ATI
            return parse_response_ati(response);
 800069a:	6838      	ldr	r0, [r7, #0]
 800069c:	f7ff feda 	bl	8000454 <parse_response_ati>
 80006a0:	4603      	mov	r3, r0
 80006a2:	e032      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 2: // AT+CPIN?
            return parse_response_at_cpin(response);
 80006a4:	6838      	ldr	r0, [r7, #0]
 80006a6:	f7ff feed 	bl	8000484 <parse_response_at_cpin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	e02d      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 3: // AT+CSQ
            return parse_response_at_csq(response);
 80006ae:	6838      	ldr	r0, [r7, #0]
 80006b0:	f7ff ff00 	bl	80004b4 <parse_response_at_csq>
 80006b4:	4603      	mov	r3, r0
 80006b6:	e028      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 4: // AT+CEREG?
            return parse_response_at_cereg(response);
 80006b8:	6838      	ldr	r0, [r7, #0]
 80006ba:	f7ff ff13 	bl	80004e4 <parse_response_at_cereg>
 80006be:	4603      	mov	r3, r0
 80006c0:	e023      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 5: // AT+COPS
            return parse_response_at_cops(response);
 80006c2:	6838      	ldr	r0, [r7, #0]
 80006c4:	f7ff ff26 	bl	8000514 <parse_response_at_cops>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	bf14      	ite	ne
 80006ce:	2301      	movne	r3, #1
 80006d0:	2300      	moveq	r3, #0
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	e019      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 6: // AT+CGDCONT
            return parse_response_at_cgdcont(response);
 80006d6:	6838      	ldr	r0, [r7, #0]
 80006d8:	f7ff ff34 	bl	8000544 <parse_response_at_cgdcont>
 80006dc:	4603      	mov	r3, r0
 80006de:	e014      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 7: // AT+CGAUTH
            return parse_response_at_cgauth(response);
 80006e0:	6838      	ldr	r0, [r7, #0]
 80006e2:	f7ff ff47 	bl	8000574 <parse_response_at_cgauth>
 80006e6:	4603      	mov	r3, r0
 80006e8:	e00f      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 8: // AT+CGACT
            return parse_response_at_cgact(response);
 80006ea:	6838      	ldr	r0, [r7, #0]
 80006ec:	f7ff ff5a 	bl	80005a4 <parse_response_at_cgact>
 80006f0:	4603      	mov	r3, r0
 80006f2:	e00a      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 9: // AT+CGPADDR
            return parse_response_at_cgpaddr(response);
 80006f4:	6838      	ldr	r0, [r7, #0]
 80006f6:	f7ff ff6d 	bl	80005d4 <parse_response_at_cgpaddr>
 80006fa:	4603      	mov	r3, r0
 80006fc:	e005      	b.n	800070a <check_gsm_response_by_index+0xbe>
        case 10: // ATD*99#
            return parse_response_atd99(response);
 80006fe:	6838      	ldr	r0, [r7, #0]
 8000700:	f7ff ff80 	bl	8000604 <parse_response_atd99>
 8000704:	4603      	mov	r3, r0
 8000706:	e000      	b.n	800070a <check_gsm_response_by_index+0xbe>
        // case 11: // +++
        //     return parse_response_plus(response);
        // case 12: // ATH
        //     return parse_response_ath(response);
        default:
            return false;
 8000708:	2300      	movs	r3, #0
    }
 800070a:	4618      	mov	r0, r3
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop

08000714 <button_init>:
#include "button.h"

void button_init(void)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
    // Cấu hình input pull-up
    uint8_t pin = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 16; ++i) {
 800071e:	2300      	movs	r3, #0
 8000720:	71bb      	strb	r3, [r7, #6]
 8000722:	e008      	b.n	8000736 <button_init+0x22>
        if (BUTTON_PIN & (1U << i)) { pin = i; break; }
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d102      	bne.n	8000730 <button_init+0x1c>
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	e005      	b.n	800073c <button_init+0x28>
    for (uint8_t i = 0; i < 16; ++i) {
 8000730:	79bb      	ldrb	r3, [r7, #6]
 8000732:	3301      	adds	r3, #1
 8000734:	71bb      	strb	r3, [r7, #6]
 8000736:	79bb      	ldrb	r3, [r7, #6]
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d9f3      	bls.n	8000724 <button_init+0x10>
    }
    BUTTON_PORT->MODER &= ~(3U << (pin * 2));
 800073c:	4912      	ldr	r1, [pc, #72]	; (8000788 <button_init+0x74>)
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <button_init+0x74>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	2003      	movs	r0, #3
 8000748:	fa00 f303 	lsl.w	r3, r0, r3
 800074c:	43db      	mvns	r3, r3
 800074e:	4013      	ands	r3, r2
 8000750:	600b      	str	r3, [r1, #0]
    BUTTON_PORT->PUPDR &= ~(3U << (pin * 2));
 8000752:	490d      	ldr	r1, [pc, #52]	; (8000788 <button_init+0x74>)
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <button_init+0x74>)
 8000756:	68da      	ldr	r2, [r3, #12]
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	2003      	movs	r0, #3
 800075e:	fa00 f303 	lsl.w	r3, r0, r3
 8000762:	43db      	mvns	r3, r3
 8000764:	4013      	ands	r3, r2
 8000766:	60cb      	str	r3, [r1, #12]
    BUTTON_PORT->PUPDR |=  (1U << (pin * 2)); // Pull-up
 8000768:	4907      	ldr	r1, [pc, #28]	; (8000788 <button_init+0x74>)
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <button_init+0x74>)
 800076c:	68da      	ldr	r2, [r3, #12]
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	2001      	movs	r0, #1
 8000774:	fa00 f303 	lsl.w	r3, r0, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	60cb      	str	r3, [r1, #12]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	40020000 	.word	0x40020000

0800078c <hardware_init>:
#include "stm32f4xx.h"
#include "uart_line_queue.h"

#define GSM_POWER_GPIO_PORT GPIOA
#define GSM_POWER_PIN       8
void hardware_init(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000790:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <hardware_init+0x54>)
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <hardware_init+0x54>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f043 0303 	orr.w	r3, r3, #3
 800079a:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN | RCC_APB1ENR_TIM2EN;
 800079c:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <hardware_init+0x54>)
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <hardware_init+0x54>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80007ac:	4a0c      	ldr	r2, [pc, #48]	; (80007e0 <hardware_init+0x54>)
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <hardware_init+0x54>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6453      	str	r3, [r2, #68]	; 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN; 
 80007b8:	4a09      	ldr	r2, [pc, #36]	; (80007e0 <hardware_init+0x54>)
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <hardware_init+0x54>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c2:	6313      	str	r3, [r2, #48]	; 0x30


    timer2_init_1ms();
 80007c4:	f000 f8e2 	bl	800098c <timer2_init_1ms>
    uart_line_queue_init();
 80007c8:	f000 fbae 	bl	8000f28 <uart_line_queue_init>
    uart_init_all();
 80007cc:	f000 f960 	bl	8000a90 <uart_init_all>
    led_init();
 80007d0:	f000 f854 	bl	800087c <led_init>
    button_init();
 80007d4:	f7ff ff9e 	bl	8000714 <button_init>
    gsm_module_power_cycle();
 80007d8:	f000 f804 	bl	80007e4 <gsm_module_power_cycle>
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800

080007e4 <gsm_module_power_cycle>:

uint8_t switch_read(uint8_t index) {
    return 0; 
}

void gsm_module_power_cycle(void) {
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
    // Cấu hình chân GSM_POWER_PIN là output push-pull
    GSM_POWER_GPIO_PORT->MODER &= ~(3U << (GSM_POWER_PIN * 2));
 80007ea:	4a22      	ldr	r2, [pc, #136]	; (8000874 <gsm_module_power_cycle+0x90>)
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <gsm_module_power_cycle+0x90>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80007f4:	6013      	str	r3, [r2, #0]
    GSM_POWER_GPIO_PORT->MODER |=  (1U << (GSM_POWER_PIN * 2));
 80007f6:	4a1f      	ldr	r2, [pc, #124]	; (8000874 <gsm_module_power_cycle+0x90>)
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <gsm_module_power_cycle+0x90>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000800:	6013      	str	r3, [r2, #0]
    GSM_POWER_GPIO_PORT->OTYPER &= ~(1U << GSM_POWER_PIN);
 8000802:	4a1c      	ldr	r2, [pc, #112]	; (8000874 <gsm_module_power_cycle+0x90>)
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <gsm_module_power_cycle+0x90>)
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800080c:	6053      	str	r3, [r2, #4]
    GSM_POWER_GPIO_PORT->OSPEEDR |= (3U << (GSM_POWER_PIN * 2));
 800080e:	4a19      	ldr	r2, [pc, #100]	; (8000874 <gsm_module_power_cycle+0x90>)
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <gsm_module_power_cycle+0x90>)
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000818:	6093      	str	r3, [r2, #8]
    GSM_POWER_GPIO_PORT->PUPDR &= ~(3U << (GSM_POWER_PIN * 2));
 800081a:	4a16      	ldr	r2, [pc, #88]	; (8000874 <gsm_module_power_cycle+0x90>)
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <gsm_module_power_cycle+0x90>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000824:	60d3      	str	r3, [r2, #12]

    // Đưa chân xuống mức thấp (tắt nguồn)
    GSM_POWER_GPIO_PORT->ODR &= ~(1U << GSM_POWER_PIN);
 8000826:	4a13      	ldr	r2, [pc, #76]	; (8000874 <gsm_module_power_cycle+0x90>)
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <gsm_module_power_cycle+0x90>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000830:	6153      	str	r3, [r2, #20]
    for (volatile int i = 0; i < 1000000; i++);
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	e002      	b.n	800083e <gsm_module_power_cycle+0x5a>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3301      	adds	r3, #1
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <gsm_module_power_cycle+0x94>)
 8000842:	4293      	cmp	r3, r2
 8000844:	ddf8      	ble.n	8000838 <gsm_module_power_cycle+0x54>

    // Bật lại nguồn
    GSM_POWER_GPIO_PORT->ODR |= (1U << GSM_POWER_PIN);
 8000846:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <gsm_module_power_cycle+0x90>)
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <gsm_module_power_cycle+0x90>)
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000850:	6153      	str	r3, [r2, #20]
    for (volatile int i = 0; i < 1000000; i++);
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	e002      	b.n	800085e <gsm_module_power_cycle+0x7a>
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	4a05      	ldr	r2, [pc, #20]	; (8000878 <gsm_module_power_cycle+0x94>)
 8000862:	4293      	cmp	r3, r2
 8000864:	ddf8      	ble.n	8000858 <gsm_module_power_cycle+0x74>
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40020000 	.word	0x40020000
 8000878:	000f423f 	.word	0x000f423f

0800087c <led_init>:
#include "stm32f4xx.h"
#include "led.h"

void led_init(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
    // Configure PB9 (LED 4G) as output
    GPIOB->MODER &= ~(3U << (9 * 2));
 8000880:	4a34      	ldr	r2, [pc, #208]	; (8000954 <led_init+0xd8>)
 8000882:	4b34      	ldr	r3, [pc, #208]	; (8000954 <led_init+0xd8>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800088a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (9 * 2));
 800088c:	4a31      	ldr	r2, [pc, #196]	; (8000954 <led_init+0xd8>)
 800088e:	4b31      	ldr	r3, [pc, #196]	; (8000954 <led_init+0xd8>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000896:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 9);
 8000898:	4a2e      	ldr	r2, [pc, #184]	; (8000954 <led_init+0xd8>)
 800089a:	4b2e      	ldr	r3, [pc, #184]	; (8000954 <led_init+0xd8>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008a2:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (9 * 2));
 80008a4:	4a2b      	ldr	r2, [pc, #172]	; (8000954 <led_init+0xd8>)
 80008a6:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <led_init+0xd8>)
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80008ae:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (9 * 2));
 80008b0:	4a28      	ldr	r2, [pc, #160]	; (8000954 <led_init+0xd8>)
 80008b2:	4b28      	ldr	r3, [pc, #160]	; (8000954 <led_init+0xd8>)
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80008ba:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 9);
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <led_init+0xd8>)
 80008be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c2:	835a      	strh	r2, [r3, #26]

    // Configure PB4 (LED GREEN NETWORK) as output
    GPIOB->MODER &= ~(3U << (4 * 2));
 80008c4:	4a23      	ldr	r2, [pc, #140]	; (8000954 <led_init+0xd8>)
 80008c6:	4b23      	ldr	r3, [pc, #140]	; (8000954 <led_init+0xd8>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008ce:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (4 * 2));
 80008d0:	4a20      	ldr	r2, [pc, #128]	; (8000954 <led_init+0xd8>)
 80008d2:	4b20      	ldr	r3, [pc, #128]	; (8000954 <led_init+0xd8>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008da:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 4);
 80008dc:	4a1d      	ldr	r2, [pc, #116]	; (8000954 <led_init+0xd8>)
 80008de:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <led_init+0xd8>)
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f023 0310 	bic.w	r3, r3, #16
 80008e6:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (4 * 2));
 80008e8:	4a1a      	ldr	r2, [pc, #104]	; (8000954 <led_init+0xd8>)
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <led_init+0xd8>)
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80008f2:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (4 * 2));
 80008f4:	4a17      	ldr	r2, [pc, #92]	; (8000954 <led_init+0xd8>)
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <led_init+0xd8>)
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008fe:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 4);
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <led_init+0xd8>)
 8000902:	2210      	movs	r2, #16
 8000904:	835a      	strh	r2, [r3, #26]

    // Configure PB5 (LED BLUE STATEMACHINE) as output
    GPIOB->MODER &= ~(3U << (5 * 2));
 8000906:	4a13      	ldr	r2, [pc, #76]	; (8000954 <led_init+0xd8>)
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <led_init+0xd8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000910:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (5 * 2));
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <led_init+0xd8>)
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <led_init+0xd8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800091c:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 5);
 800091e:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <led_init+0xd8>)
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <led_init+0xd8>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f023 0320 	bic.w	r3, r3, #32
 8000928:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (5 * 2));
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <led_init+0xd8>)
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <led_init+0xd8>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000934:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (5 * 2));
 8000936:	4a07      	ldr	r2, [pc, #28]	; (8000954 <led_init+0xd8>)
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <led_init+0xd8>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000940:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 5);
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <led_init+0xd8>)
 8000944:	2220      	movs	r2, #32
 8000946:	835a      	strh	r2, [r3, #26]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40020400 	.word	0x40020400

08000958 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000962:	4909      	ldr	r1, [pc, #36]	; (8000988 <NVIC_EnableIRQ+0x30>)
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000968:	095b      	lsrs	r3, r3, #5
 800096a:	79fa      	ldrb	r2, [r7, #7]
 800096c:	f002 021f 	and.w	r2, r2, #31
 8000970:	2001      	movs	r0, #1
 8000972:	fa00 f202 	lsl.w	r2, r0, r2
 8000976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000e100 	.word	0xe000e100

0800098c <timer2_init_1ms>:
#include "stm32f4xx.h"

static volatile uint32_t timer2_tick = 0;

void timer2_init_1ms(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
    TIM2->PSC = 15;      // 16MHz / (15+1) = 1MHz
 8000990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000994:	220f      	movs	r2, #15
 8000996:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM2->ARR = 999;     // 1MHz / (999+1) = 1kHz (1ms)
 8000998:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800099c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->EGR = TIM_EGR_UG;
 80009a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009a6:	2201      	movs	r2, #1
 80009a8:	829a      	strh	r2, [r3, #20]
    TIM2->DIER |= TIM_DIER_UIE;
 80009aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009b2:	899b      	ldrh	r3, [r3, #12]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	8193      	strh	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;
 80009be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	8013      	strh	r3, [r2, #0]

    NVIC_EnableIRQ(TIM2_IRQn);
 80009d2:	201c      	movs	r0, #28
 80009d4:	f7ff ffc0 	bl	8000958 <NVIC_EnableIRQ>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) // Update interrupt flag
 80009e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009e4:	8a1b      	ldrh	r3, [r3, #16]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d00e      	beq.n	8000a0e <TIM2_IRQHandler+0x32>
    {
        TIM2->SR &= ~TIM_SR_UIF; // Clear flag
 80009f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009f8:	8a1b      	ldrh	r3, [r3, #16]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	f023 0301 	bic.w	r3, r3, #1
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	8213      	strh	r3, [r2, #16]
        timer2_tick++;
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <TIM2_IRQHandler+0x3c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	4a03      	ldr	r2, [pc, #12]	; (8000a18 <TIM2_IRQHandler+0x3c>)
 8000a0c:	6013      	str	r3, [r2, #0]
    }
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	2000021c 	.word	0x2000021c

08000a1c <timer2_get_tick>:

uint32_t timer2_get_tick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
    return timer2_tick;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <timer2_get_tick+0x14>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	2000021c 	.word	0x2000021c

08000a34 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
    uint32_t start = timer2_get_tick();
 8000a3c:	f7ff ffee 	bl	8000a1c <timer2_get_tick>
 8000a40:	60f8      	str	r0, [r7, #12]
    while ((timer2_get_tick() - start) < ms) {
 8000a42:	bf00      	nop
 8000a44:	f7ff ffea 	bl	8000a1c <timer2_get_tick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	1ad2      	subs	r2, r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d3f7      	bcc.n	8000a44 <delay_ms+0x10>
    }
}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <NVIC_EnableIRQ>:
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000a66:	4909      	ldr	r1, [pc, #36]	; (8000a8c <NVIC_EnableIRQ+0x30>)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	095b      	lsrs	r3, r3, #5
 8000a6e:	79fa      	ldrb	r2, [r7, #7]
 8000a70:	f002 021f 	and.w	r2, r2, #31
 8000a74:	2001      	movs	r0, #1
 8000a76:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <uart_init_all>:
uint8_t m_uart1_rx_buffer[UART1_RX_BUFFER_SIZE];
volatile uint32_t m_old_uart1_dma_rx_pos = 0;
volatile bool rx_line_ready = false;

void uart_init_all(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000a94:	4a3f      	ldr	r2, [pc, #252]	; (8000b94 <uart_init_all+0x104>)
 8000a96:	4b3f      	ldr	r3, [pc, #252]	; (8000b94 <uart_init_all+0x104>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000aa0:	4a3c      	ldr	r2, [pc, #240]	; (8000b94 <uart_init_all+0x104>)
 8000aa2:	4b3c      	ldr	r3, [pc, #240]	; (8000b94 <uart_init_all+0x104>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f043 0310 	orr.w	r3, r3, #16
 8000aaa:	6453      	str	r3, [r2, #68]	; 0x44

    GPIOA->MODER &= ~((3U << (9 * 2)) | (3U << (10 * 2)));
 8000aac:	4a3a      	ldr	r2, [pc, #232]	; (8000b98 <uart_init_all+0x108>)
 8000aae:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <uart_init_all+0x108>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000ab6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2U << (9 * 2)) | (2U << (10 * 2)));
 8000ab8:	4a37      	ldr	r2, [pc, #220]	; (8000b98 <uart_init_all+0x108>)
 8000aba:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <uart_init_all+0x108>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8000ac2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~((0xF << (4 * 1)) | (0xF << (4 * 2)));
 8000ac4:	4a34      	ldr	r2, [pc, #208]	; (8000b98 <uart_init_all+0x108>)
 8000ac6:	4b34      	ldr	r3, [pc, #208]	; (8000b98 <uart_init_all+0x108>)
 8000ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000ace:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= ((7U << (4 * 1)) | (7U << (4 * 2)));
 8000ad0:	4a31      	ldr	r2, [pc, #196]	; (8000b98 <uart_init_all+0x108>)
 8000ad2:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <uart_init_all+0x108>)
 8000ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad6:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000ada:	6253      	str	r3, [r2, #36]	; 0x24

    USART1->BRR = 16000000 / 115200;
 8000adc:	4b2f      	ldr	r3, [pc, #188]	; (8000b9c <uart_init_all+0x10c>)
 8000ade:	228a      	movs	r2, #138	; 0x8a
 8000ae0:	811a      	strh	r2, [r3, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000ae2:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <uart_init_all+0x10c>)
 8000ae4:	f242 020c 	movw	r2, #8204	; 0x200c
 8000ae8:	819a      	strh	r2, [r3, #12]

    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000aea:	4a2a      	ldr	r2, [pc, #168]	; (8000b94 <uart_init_all+0x104>)
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <uart_init_all+0x104>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40

    GPIOA->MODER &= ~((3U << (2 * 2)) | (3U << (3 * 2)));
 8000af6:	4a28      	ldr	r2, [pc, #160]	; (8000b98 <uart_init_all+0x108>)
 8000af8:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <uart_init_all+0x108>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b00:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2U << (2 * 2)) | (2U << (3 * 2)));
 8000b02:	4a25      	ldr	r2, [pc, #148]	; (8000b98 <uart_init_all+0x108>)
 8000b04:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <uart_init_all+0x108>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000b0c:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0xF << (4 * 2)) | (0xF << (4 * 3)));
 8000b0e:	4a22      	ldr	r2, [pc, #136]	; (8000b98 <uart_init_all+0x108>)
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <uart_init_all+0x108>)
 8000b12:	6a1b      	ldr	r3, [r3, #32]
 8000b14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b18:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= ((7U << (4 * 2)) | (7U << (4 * 3)));
 8000b1a:	4a1f      	ldr	r2, [pc, #124]	; (8000b98 <uart_init_all+0x108>)
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <uart_init_all+0x108>)
 8000b1e:	6a1b      	ldr	r3, [r3, #32]
 8000b20:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000b24:	6213      	str	r3, [r2, #32]

    USART2->BRR = 16000000 / 115200;
 8000b26:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <uart_init_all+0x110>)
 8000b28:	228a      	movs	r2, #138	; 0x8a
 8000b2a:	811a      	strh	r2, [r3, #8]
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <uart_init_all+0x110>)
 8000b2e:	f242 020c 	movw	r2, #8204	; 0x200c
 8000b32:	819a      	strh	r2, [r3, #12]

    USART1->CR3 |= USART_CR3_DMAR;
 8000b34:	4a19      	ldr	r2, [pc, #100]	; (8000b9c <uart_init_all+0x10c>)
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <uart_init_all+0x10c>)
 8000b38:	8a9b      	ldrh	r3, [r3, #20]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	8293      	strh	r3, [r2, #20]

    DMA2_Stream2->CR &= ~DMA_SxCR_EN;
 8000b44:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <uart_init_all+0x114>)
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <uart_init_all+0x114>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f023 0301 	bic.w	r3, r3, #1
 8000b4e:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream2->CR & DMA_SxCR_EN);
 8000b50:	bf00      	nop
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <uart_init_all+0x114>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d1f9      	bne.n	8000b52 <uart_init_all+0xc2>

    DMA2_Stream2->PAR  = (uint32_t)&USART1->DR;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <uart_init_all+0x114>)
 8000b60:	4a11      	ldr	r2, [pc, #68]	; (8000ba8 <uart_init_all+0x118>)
 8000b62:	609a      	str	r2, [r3, #8]
    DMA2_Stream2->M0AR = (uint32_t)m_uart1_rx_buffer;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <uart_init_all+0x114>)
 8000b66:	4a11      	ldr	r2, [pc, #68]	; (8000bac <uart_init_all+0x11c>)
 8000b68:	60da      	str	r2, [r3, #12]
    DMA2_Stream2->NDTR = UART1_RX_BUFFER_SIZE;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <uart_init_all+0x114>)
 8000b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b70:	605a      	str	r2, [r3, #4]

    DMA2_Stream2->CR =
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <uart_init_all+0x114>)
 8000b74:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <uart_init_all+0x120>)
 8000b76:	601a      	str	r2, [r3, #0]
        (0 << 6) |
        (0 << 13) |
        (0 << 11) |
        (0 << 16);

    DMA2_Stream2->CR |= DMA_SxCR_EN;
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <uart_init_all+0x114>)
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <uart_init_all+0x114>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	6013      	str	r3, [r2, #0]

    NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b84:	203a      	movs	r0, #58	; 0x3a
 8000b86:	f7ff ff69 	bl	8000a5c <NVIC_EnableIRQ>
    uart_enable_uart1_idle_irq();
 8000b8a:	f000 f98b 	bl	8000ea4 <uart_enable_uart1_idle_irq>
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40011000 	.word	0x40011000
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	40026440 	.word	0x40026440
 8000ba8:	40011004 	.word	0x40011004
 8000bac:	200007a4 	.word	0x200007a4
 8000bb0:	08000500 	.word	0x08000500

08000bb4 <uart_log>:

void uart_log(const char* msg)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
    const char* p = msg;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	60fb      	str	r3, [r7, #12]
    while (*p) {
 8000bc0:	e00e      	b.n	8000be0 <uart_log+0x2c>
        while (!(USART2->SR & USART_SR_TXE));
 8000bc2:	bf00      	nop
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <uart_log+0x6c>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d0f8      	beq.n	8000bc4 <uart_log+0x10>
        USART2->DR = *p++;
 8000bd2:	4913      	ldr	r1, [pc, #76]	; (8000c20 <uart_log+0x6c>)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	60fa      	str	r2, [r7, #12]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	808b      	strh	r3, [r1, #4]
    while (*p) {
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1ec      	bne.n	8000bc2 <uart_log+0xe>
    }
    while (!(USART2->SR & USART_SR_TXE));
 8000be8:	bf00      	nop
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <uart_log+0x6c>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0f8      	beq.n	8000bea <uart_log+0x36>
    USART2->DR = '\r';
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <uart_log+0x6c>)
 8000bfa:	220d      	movs	r2, #13
 8000bfc:	809a      	strh	r2, [r3, #4]
    while (!(USART2->SR & USART_SR_TXE));
 8000bfe:	bf00      	nop
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <uart_log+0x6c>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f8      	beq.n	8000c00 <uart_log+0x4c>
    USART2->DR = '\n';
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <uart_log+0x6c>)
 8000c10:	220a      	movs	r2, #10
 8000c12:	809a      	strh	r2, [r3, #4]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	40004400 	.word	0x40004400

08000c24 <uart1_send_raw>:

void uart1_send_raw(const uint8_t* raw, uint32_t length)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < length; i++) {
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	e011      	b.n	8000c58 <uart1_send_raw+0x34>
        while (!(USART1->SR & USART_SR_TXE));
 8000c34:	bf00      	nop
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <uart1_send_raw+0x58>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d0f8      	beq.n	8000c36 <uart1_send_raw+0x12>
        USART1->DR = raw[i];
 8000c44:	490d      	ldr	r1, [pc, #52]	; (8000c7c <uart1_send_raw+0x58>)
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	808b      	strh	r3, [r1, #4]
    for (uint32_t i = 0; i < length; i++) {
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3301      	adds	r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d3e9      	bcc.n	8000c34 <uart1_send_raw+0x10>
    }
    while (!(USART1->SR & USART_SR_TC));
 8000c60:	bf00      	nop
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <uart1_send_raw+0x58>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d0f8      	beq.n	8000c62 <uart1_send_raw+0x3e>
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	40011000 	.word	0x40011000

08000c80 <gsm_hw_layer_uart_fill_rx>:

void gsm_hw_layer_uart_fill_rx(uint8_t *data, uint32_t length)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
    static uint8_t line_buf[UART_LINE_MAX_LEN];
    static uint16_t line_idx = 0;

    for (uint32_t i = 0; i < length; i++) {
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	e033      	b.n	8000cf8 <gsm_hw_layer_uart_fill_rx+0x78>
        if (line_idx < UART_LINE_MAX_LEN - 1) {
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	2b7e      	cmp	r3, #126	; 0x7e
 8000c96:	d829      	bhi.n	8000cec <gsm_hw_layer_uart_fill_rx+0x6c>
            line_buf[line_idx++] = data[i];
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	1c5a      	adds	r2, r3, #1
 8000c9e:	b291      	uxth	r1, r2
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000ca2:	8011      	strh	r1, [r2, #0]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <gsm_hw_layer_uart_fill_rx+0x8c>)
 8000cb0:	545a      	strb	r2, [r3, r1]
            if (data[i] == '\n' || data[i] == '\r') {
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b0a      	cmp	r3, #10
 8000cbc:	d005      	beq.n	8000cca <gsm_hw_layer_uart_fill_rx+0x4a>
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b0d      	cmp	r3, #13
 8000cc8:	d113      	bne.n	8000cf2 <gsm_hw_layer_uart_fill_rx+0x72>
                if (line_idx > 1) {
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d908      	bls.n	8000ce4 <gsm_hw_layer_uart_fill_rx+0x64>
                    line_buf[line_idx] = 0;
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <gsm_hw_layer_uart_fill_rx+0x8c>)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	5499      	strb	r1, [r3, r2]
                    uart_line_queue_push((char*)line_buf);
 8000cde:	480b      	ldr	r0, [pc, #44]	; (8000d0c <gsm_hw_layer_uart_fill_rx+0x8c>)
 8000ce0:	f000 f938 	bl	8000f54 <uart_line_queue_push>
                }
                line_idx = 0;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	801a      	strh	r2, [r3, #0]
 8000cea:	e002      	b.n	8000cf2 <gsm_hw_layer_uart_fill_rx+0x72>
            }
        } else {
            line_idx = 0; // quá dài, reset dòng
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++) {
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d3c7      	bcc.n	8000c90 <gsm_hw_layer_uart_fill_rx+0x10>
        }
    }
}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000226 	.word	0x20000226
 8000d0c:	20000228 	.word	0x20000228

08000d10 <uart1_poll>:

void uart1_poll(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
    // Thoát sớm nếu không có dữ liệu mới
    if (!rx_line_ready) {
 8000d16:	4b40      	ldr	r3, [pc, #256]	; (8000e18 <uart1_poll+0x108>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f083 0301 	eor.w	r3, r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d172      	bne.n	8000e0c <uart1_poll+0xfc>
        return;
    }
    rx_line_ready = false;
 8000d26:	4b3c      	ldr	r3, [pc, #240]	; (8000e18 <uart1_poll+0x108>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]

    // Lấy vị trí hiện tại của con trỏ ghi DMA
    uint32_t pos = UART1_RX_BUFFER_SIZE - DMA2_Stream2->NDTR;
 8000d2c:	4b3b      	ldr	r3, [pc, #236]	; (8000e1c <uart1_poll+0x10c>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000d34:	607b      	str	r3, [r7, #4]

    // Thoát nếu không có dữ liệu mới được ghi
    if (pos == m_old_uart1_dma_rx_pos) {
 8000d36:	4b3a      	ldr	r3, [pc, #232]	; (8000e20 <uart1_poll+0x110>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d067      	beq.n	8000e10 <uart1_poll+0x100>
        return;
    }

    // Sử dụng biến gsm_ppp_mode thay vì ppp_mode
    if (gsm_ppp_mode && ppp != NULL) {
 8000d40:	4b38      	ldr	r3, [pc, #224]	; (8000e24 <uart1_poll+0x114>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d02e      	beq.n	8000da8 <uart1_poll+0x98>
 8000d4a:	4b37      	ldr	r3, [pc, #220]	; (8000e28 <uart1_poll+0x118>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d02a      	beq.n	8000da8 <uart1_poll+0x98>
        if (pos > m_old_uart1_dma_rx_pos) {
 8000d52:	4b33      	ldr	r3, [pc, #204]	; (8000e20 <uart1_poll+0x110>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d90d      	bls.n	8000d78 <uart1_poll+0x68>
            pppos_input(ppp, &m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], pos - m_old_uart1_dma_rx_pos);
 8000d5c:	4b32      	ldr	r3, [pc, #200]	; (8000e28 <uart1_poll+0x118>)
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <uart1_poll+0x110>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a31      	ldr	r2, [pc, #196]	; (8000e2c <uart1_poll+0x11c>)
 8000d66:	1899      	adds	r1, r3, r2
 8000d68:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <uart1_poll+0x110>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	461a      	mov	r2, r3
 8000d72:	f00f fdf5 	bl	8010960 <pppos_input>
        if (pos > m_old_uart1_dma_rx_pos) {
 8000d76:	e03c      	b.n	8000df2 <uart1_poll+0xe2>
        } else {
            // Xử lý trường hợp buffer bị tràn (wrap-around)
            pppos_input(ppp, &m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], UART1_RX_BUFFER_SIZE - m_old_uart1_dma_rx_pos);
 8000d78:	4b2b      	ldr	r3, [pc, #172]	; (8000e28 <uart1_poll+0x118>)
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <uart1_poll+0x110>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a2a      	ldr	r2, [pc, #168]	; (8000e2c <uart1_poll+0x11c>)
 8000d82:	1899      	adds	r1, r3, r2
 8000d84:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <uart1_poll+0x110>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	f00f fde7 	bl	8010960 <pppos_input>
            if (pos > 0) {
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d02c      	beq.n	8000df2 <uart1_poll+0xe2>
                pppos_input(ppp, &m_uart1_rx_buffer[0], pos);
 8000d98:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <uart1_poll+0x118>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	4923      	ldr	r1, [pc, #140]	; (8000e2c <uart1_poll+0x11c>)
 8000da0:	4618      	mov	r0, r3
 8000da2:	f00f fddd 	bl	8010960 <pppos_input>
        if (pos > m_old_uart1_dma_rx_pos) {
 8000da6:	e024      	b.n	8000df2 <uart1_poll+0xe2>
            }
        }
    } else {
        // Chế độ AT command
        if (pos > m_old_uart1_dma_rx_pos) {
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <uart1_poll+0x110>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d90b      	bls.n	8000dca <uart1_poll+0xba>
            gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], pos - m_old_uart1_dma_rx_pos);
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <uart1_poll+0x110>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a1d      	ldr	r2, [pc, #116]	; (8000e2c <uart1_poll+0x11c>)
 8000db8:	1898      	adds	r0, r3, r2
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <uart1_poll+0x110>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f7ff ff5c 	bl	8000c80 <gsm_hw_layer_uart_fill_rx>
 8000dc8:	e014      	b.n	8000df4 <uart1_poll+0xe4>
        } else {
            // Xử lý trường hợp buffer bị tràn (wrap-around)
            gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], UART1_RX_BUFFER_SIZE - m_old_uart1_dma_rx_pos);
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <uart1_poll+0x110>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <uart1_poll+0x11c>)
 8000dd0:	441a      	add	r2, r3
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <uart1_poll+0x110>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4610      	mov	r0, r2
 8000dde:	f7ff ff4f 	bl	8000c80 <gsm_hw_layer_uart_fill_rx>
            if (pos > 0) {
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d005      	beq.n	8000df4 <uart1_poll+0xe4>
                gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[0], pos);
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	4810      	ldr	r0, [pc, #64]	; (8000e2c <uart1_poll+0x11c>)
 8000dec:	f7ff ff48 	bl	8000c80 <gsm_hw_layer_uart_fill_rx>
 8000df0:	e000      	b.n	8000df4 <uart1_poll+0xe4>
        if (pos > m_old_uart1_dma_rx_pos) {
 8000df2:	bf00      	nop
            }
        }
    }

    // Cập nhật vị trí cũ cho lần kiểm tra tiếp theo
    m_old_uart1_dma_rx_pos = pos;
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <uart1_poll+0x110>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
    if (m_old_uart1_dma_rx_pos == UART1_RX_BUFFER_SIZE)
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <uart1_poll+0x110>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e02:	d106      	bne.n	8000e12 <uart1_poll+0x102>
        m_old_uart1_dma_rx_pos = 0;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <uart1_poll+0x110>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e002      	b.n	8000e12 <uart1_poll+0x102>
        return;
 8000e0c:	bf00      	nop
 8000e0e:	e000      	b.n	8000e12 <uart1_poll+0x102>
        return;
 8000e10:	bf00      	nop
}
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000224 	.word	0x20000224
 8000e1c:	40026440 	.word	0x40026440
 8000e20:	20000220 	.word	0x20000220
 8000e24:	200006b4 	.word	0x200006b4
 8000e28:	200006b0 	.word	0x200006b0
 8000e2c:	200007a4 	.word	0x200007a4

08000e30 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
    if (DMA2->LISR & DMA_LISR_TCIF2) {
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <DMA2_Stream2_IRQHandler+0x2c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d008      	beq.n	8000e52 <DMA2_Stream2_IRQHandler+0x22>
        DMA2->LIFCR |= DMA_LIFCR_CTCIF2;
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <DMA2_Stream2_IRQHandler+0x2c>)
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <DMA2_Stream2_IRQHandler+0x2c>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e4a:	6093      	str	r3, [r2, #8]
        rx_line_ready = true;
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <DMA2_Stream2_IRQHandler+0x30>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]
    }
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	40026400 	.word	0x40026400
 8000e60:	20000224 	.word	0x20000224

08000e64 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_IDLE) {
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <USART1_IRQHandler+0x38>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	f003 0310 	and.w	r3, r3, #16
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00b      	beq.n	8000e90 <USART1_IRQHandler+0x2c>
        volatile uint32_t tmp;
        tmp = USART1->SR;
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <USART1_IRQHandler+0x38>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	607b      	str	r3, [r7, #4]
        tmp = USART1->DR;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <USART1_IRQHandler+0x38>)
 8000e82:	889b      	ldrh	r3, [r3, #4]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	607b      	str	r3, [r7, #4]
        (void)tmp;
 8000e88:	687b      	ldr	r3, [r7, #4]
        rx_line_ready = true;
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <USART1_IRQHandler+0x3c>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]
    }
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	40011000 	.word	0x40011000
 8000ea0:	20000224 	.word	0x20000224

08000ea4 <uart_enable_uart1_idle_irq>:

void uart_enable_uart1_idle_irq(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    USART1->CR1 |= USART_CR1_IDLEIE;
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <uart_enable_uart1_idle_irq+0x20>)
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <uart_enable_uart1_idle_irq+0x20>)
 8000eac:	899b      	ldrh	r3, [r3, #12]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	f043 0310 	orr.w	r3, r3, #16
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	8193      	strh	r3, [r2, #12]
    NVIC_EnableIRQ(USART1_IRQn);
 8000eb8:	2025      	movs	r0, #37	; 0x25
 8000eba:	f7ff fdcf 	bl	8000a5c <NVIC_EnableIRQ>
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40011000 	.word	0x40011000

08000ec8 <restart_dma2_stream2>:
    NVIC_DisableIRQ(USART1_IRQn);
    uart_log("UART1 IRQ disabled");
}

void restart_dma2_stream2(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
    DMA2_Stream2->CR &= ~DMA_SxCR_EN;
 8000ecc:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <restart_dma2_stream2+0x50>)
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <restart_dma2_stream2+0x50>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f023 0301 	bic.w	r3, r3, #1
 8000ed6:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream2->CR & DMA_SxCR_EN);
 8000ed8:	bf00      	nop
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <restart_dma2_stream2+0x50>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f9      	bne.n	8000eda <restart_dma2_stream2+0x12>

    DMA2_Stream2->PAR  = (uint32_t)&USART1->DR;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <restart_dma2_stream2+0x50>)
 8000ee8:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <restart_dma2_stream2+0x54>)
 8000eea:	609a      	str	r2, [r3, #8]
    DMA2_Stream2->M0AR = (uint32_t)m_uart1_rx_buffer;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <restart_dma2_stream2+0x50>)
 8000eee:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <restart_dma2_stream2+0x58>)
 8000ef0:	60da      	str	r2, [r3, #12]
    DMA2_Stream2->NDTR = UART1_RX_BUFFER_SIZE;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <restart_dma2_stream2+0x50>)
 8000ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef8:	605a      	str	r2, [r3, #4]

    DMA2_Stream2->CR =
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <restart_dma2_stream2+0x50>)
 8000efc:	4a09      	ldr	r2, [pc, #36]	; (8000f24 <restart_dma2_stream2+0x5c>)
 8000efe:	601a      	str	r2, [r3, #0]
        (0 << 6) |
        (0 << 13) |
        (0 << 11) |
        (0 << 16);

    DMA2_Stream2->CR |= DMA_SxCR_EN;
 8000f00:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <restart_dma2_stream2+0x50>)
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <restart_dma2_stream2+0x50>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40026440 	.word	0x40026440
 8000f1c:	40011004 	.word	0x40011004
 8000f20:	200007a4 	.word	0x200007a4
 8000f24:	08000500 	.word	0x08000500

08000f28 <uart_line_queue_init>:
static char uart_line_queue[UART_LINE_QUEUE_SIZE][UART_LINE_MAX_LEN];
static volatile uint8_t uart_line_queue_head = 0;
static volatile uint8_t uart_line_queue_tail = 0;
static volatile uint8_t uart_line_queue_count = 0;

void uart_line_queue_init(void) {
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
    uart_line_queue_head = 0;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <uart_line_queue_init+0x20>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
    uart_line_queue_tail = 0;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <uart_line_queue_init+0x24>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count = 0;
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <uart_line_queue_init+0x28>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	200006a8 	.word	0x200006a8
 8000f4c:	200006a9 	.word	0x200006a9
 8000f50:	200006aa 	.word	0x200006aa

08000f54 <uart_line_queue_push>:

// Push a line into the queue, returns true if success, false if full
bool uart_line_queue_push(const char *line) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
    if (uart_line_queue_count >= UART_LINE_QUEUE_SIZE) return false;
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <uart_line_queue_push+0x74>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b07      	cmp	r3, #7
 8000f64:	d901      	bls.n	8000f6a <uart_line_queue_push+0x16>
 8000f66:	2300      	movs	r3, #0
 8000f68:	e029      	b.n	8000fbe <uart_line_queue_push+0x6a>
    strncpy(uart_line_queue[uart_line_queue_head], line, UART_LINE_MAX_LEN - 1);
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <uart_line_queue_push+0x78>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	01db      	lsls	r3, r3, #7
 8000f72:	4a17      	ldr	r2, [pc, #92]	; (8000fd0 <uart_line_queue_push+0x7c>)
 8000f74:	4413      	add	r3, r2
 8000f76:	227f      	movs	r2, #127	; 0x7f
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f011 fd83 	bl	8012a86 <strncpy>
    uart_line_queue[uart_line_queue_head][UART_LINE_MAX_LEN - 1] = '\0';
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <uart_line_queue_push+0x78>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <uart_line_queue_push+0x7c>)
 8000f88:	01db      	lsls	r3, r3, #7
 8000f8a:	4413      	add	r3, r2
 8000f8c:	337f      	adds	r3, #127	; 0x7f
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
    uart_line_queue_head = (uart_line_queue_head + 1) % UART_LINE_QUEUE_SIZE;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <uart_line_queue_push+0x78>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	3301      	adds	r3, #1
 8000f9a:	425a      	negs	r2, r3
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	f002 0207 	and.w	r2, r2, #7
 8000fa4:	bf58      	it	pl
 8000fa6:	4253      	negpl	r3, r2
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <uart_line_queue_push+0x78>)
 8000fac:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count++;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <uart_line_queue_push+0x74>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <uart_line_queue_push+0x74>)
 8000fba:	701a      	strb	r2, [r3, #0]
    return true;
 8000fbc:	2301      	movs	r3, #1
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200006aa 	.word	0x200006aa
 8000fcc:	200006a8 	.word	0x200006a8
 8000fd0:	200002a8 	.word	0x200002a8

08000fd4 <uart_line_queue_pop>:

// Pop a line from the queue, returns true if a line was available
bool uart_line_queue_pop(char *out_line) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
    if (uart_line_queue_count == 0) return false;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <uart_line_queue_pop+0x60>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <uart_line_queue_pop+0x16>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e020      	b.n	800102c <uart_line_queue_pop+0x58>
    strncpy(out_line, uart_line_queue[uart_line_queue_tail], UART_LINE_MAX_LEN);
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <uart_line_queue_pop+0x64>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	01db      	lsls	r3, r3, #7
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <uart_line_queue_pop+0x68>)
 8000ff4:	4413      	add	r3, r2
 8000ff6:	2280      	movs	r2, #128	; 0x80
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f011 fd43 	bl	8012a86 <strncpy>
    uart_line_queue_tail = (uart_line_queue_tail + 1) % UART_LINE_QUEUE_SIZE;
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <uart_line_queue_pop+0x64>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	3301      	adds	r3, #1
 8001008:	425a      	negs	r2, r3
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	f002 0207 	and.w	r2, r2, #7
 8001012:	bf58      	it	pl
 8001014:	4253      	negpl	r3, r2
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <uart_line_queue_pop+0x64>)
 800101a:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count--;
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <uart_line_queue_pop+0x60>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	3b01      	subs	r3, #1
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b03      	ldr	r3, [pc, #12]	; (8001034 <uart_line_queue_pop+0x60>)
 8001028:	701a      	strb	r2, [r3, #0]
    return true;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200006aa 	.word	0x200006aa
 8001038:	200006a9 	.word	0x200006a9
 800103c:	200002a8 	.word	0x200002a8

08001040 <main>:
#include "ppp_net/ppp_connection.h"
#include "lwip/tcpip.h"
#include <stdio.h>

int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
    hardware_init();
 8001044:	f7ff fba2 	bl	800078c <hardware_init>
    uart_log("UART2 log test");
 8001048:	4807      	ldr	r0, [pc, #28]	; (8001068 <main+0x28>)
 800104a:	f7ff fdb3 	bl	8000bb4 <uart_log>
    delay_ms(15000);
 800104e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001052:	f7ff fcef 	bl	8000a34 <delay_ms>
    ppp_connection_init();
 8001056:	f000 f8fb 	bl	8001250 <ppp_connection_init>

    while (1) {
        uart1_poll();
 800105a:	f7ff fe59 	bl	8000d10 <uart1_poll>
        send_all_gsm_commands_with_check();
 800105e:	f7ff f94f 	bl	8000300 <send_all_gsm_commands_with_check>
        ppp_connection_poll();
 8001062:	f000 f929 	bl	80012b8 <ppp_connection_poll>
        uart1_poll();
 8001066:	e7f8      	b.n	800105a <main+0x1a>
 8001068:	080133d4 	.word	0x080133d4

0800106c <sys_init>:
#include "lwip/opt.h"
#include "lwip/sys.h"
#include "lwip/err.h"
#include "arch/sys_arch.h"

void sys_init(void) {}
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <sys_mutex_new>:

err_t sys_mutex_new(sys_mutex_t *mutex) { *mutex = 0; return ERR_OK; }
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	2300      	movs	r3, #0
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex) { (void)mutex; }
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <sys_mutex_unlock>:
void sys_mutex_unlock(sys_mutex_t *mutex) { (void)mutex; }
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <sys_mbox_new>:
err_t sys_sem_new(sys_sem_t *sem, u8_t count) { *sem = 0; (void)count; return ERR_OK; }
void sys_sem_signal(sys_sem_t *sem) { (void)sem; }
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout) { (void)sem; (void)timeout; return 0; }
void sys_sem_free(sys_sem_t *sem) { (void)sem; }

err_t sys_mbox_new(sys_mbox_t *mbox, int size) { *mbox = 0; (void)size; return ERR_OK; }
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	2300      	movs	r3, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <sys_mbox_trypost>:
void sys_mbox_post(sys_mbox_t *mbox, void *msg) { (void)mbox; (void)msg; }
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg) { (void)mbox; (void)msg; return ERR_OK; }
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	2300      	movs	r3, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <sys_arch_mbox_fetch>:
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout) { (void)mbox; (void)msg; (void)timeout; return 0; }
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	2300      	movs	r3, #0
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <sys_thread_new>:
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg) { (void)mbox; (void)msg; return 0; }
void sys_mbox_free(sys_mbox_t *mbox) { (void)mbox; }

sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread, void *arg, int stacksize, int prio) { (void)name; (void)thread; (void)arg; (void)stacksize; (void)prio; return 0; }
 800110e:	b480      	push	{r7}
 8001110:	b085      	sub	sp, #20
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	2300      	movs	r3, #0
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <lwip_win32_platform_diag>:
    (void)msg;
    while (1) { }
}

// Diagnostic output for LwIP (optional)
void lwip_win32_platform_diag(const char *msg) {
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
    // Optionally send to UART or ignore
    (void)msg;
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <sys_now>:
void sys_check_core_locking(void) {
    // No-op for baremetal
}

// Returns system time in ms (replace with your own timer if needed)
uint32_t sys_now(void) {
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
    // TODO: Thay thế bằng hàm trả về thời gian thực tế nếu bạn có timer
    static uint32_t fake_tick = 0;
    return fake_tick++;
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <sys_now+0x18>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	4903      	ldr	r1, [pc, #12]	; (8001158 <sys_now+0x18>)
 800114c:	600a      	str	r2, [r1, #0]
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	200006ac 	.word	0x200006ac

0800115c <sys_jiffies>:

// Returns system time in ticks (can be same as sys_now)
uint32_t sys_jiffies(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
    return sys_now();
 8001160:	f7ff ffee 	bl	8001140 <sys_now>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <lwip_port_rand>:

// Returns a random 32-bit value (replace with your own RNG if needed)
uint32_t lwip_port_rand(void) {
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
    static uint32_t seed = 123456789;
    seed = seed * 1103515245 + 12345;
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <lwip_port_rand+0x28>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a08      	ldr	r2, [pc, #32]	; (8001198 <lwip_port_rand+0x2c>)
 8001176:	fb02 f303 	mul.w	r3, r2, r3
 800117a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800117e:	3339      	adds	r3, #57	; 0x39
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <lwip_port_rand+0x28>)
 8001182:	6013      	str	r3, [r2, #0]
    return seed;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <lwip_port_rand+0x28>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000000 	.word	0x20000000
 8001198:	41c64e6d 	.word	0x41c64e6d

0800119c <sys_arch_protect>:

// --- LwIP baremetal porting functions ---

// sys_arch_protect/sys_arch_unprotect: No real protection needed for single-thread
unsigned long sys_arch_protect(void) {
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
    return 0;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <sys_arch_unprotect>:
void sys_arch_unprotect(unsigned long pval) {
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
    (void)pval;
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <ppp_output_callback>:
 * @param  data: Dữ liệu cần gửi
 * @param  len: Độ dài dữ liệu
 * @param  ctx: Con trỏ ngữ cảnh (không dùng)
 * @retval Luôn trả về độ dài đã gửi.
 */
static u32_t ppp_output_callback(ppp_pcb *pcb, const void *data, u32_t len, void *ctx) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	603b      	str	r3, [r7, #0]
    (void)pcb;
    (void)ctx;
    uart1_send_raw((const uint8_t*)data, len);
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	68b8      	ldr	r0, [r7, #8]
 80011d2:	f7ff fd27 	bl	8000c24 <uart1_send_raw>
    return len;
 80011d6:	687b      	ldr	r3, [r7, #4]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <ppp_status_cb>:

static void ppp_status_cb(ppp_pcb *pcb, int err_code, void *ctx) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
    (void)pcb;
    (void)ctx;
    switch (err_code) {
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <ppp_status_cb+0x18>
 80011f2:	2b05      	cmp	r3, #5
 80011f4:	d00a      	beq.n	800120c <ppp_status_cb+0x2c>
 80011f6:	e013      	b.n	8001220 <ppp_status_cb+0x40>
        case PPPERR_NONE:
            uart_log("PPP connected");
 80011f8:	4810      	ldr	r0, [pc, #64]	; (800123c <ppp_status_cb+0x5c>)
 80011fa:	f7ff fcdb 	bl	8000bb4 <uart_log>
            ppp_connected = true;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <ppp_status_cb+0x60>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
            // Khi kết nối thành công, chuyển sang chế độ PPP
            gsm_ppp_mode = true;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <ppp_status_cb+0x64>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
            break;
 800120a:	e013      	b.n	8001234 <ppp_status_cb+0x54>
        case PPPERR_USER:
            uart_log("PPP connection terminated by user");
 800120c:	480e      	ldr	r0, [pc, #56]	; (8001248 <ppp_status_cb+0x68>)
 800120e:	f7ff fcd1 	bl	8000bb4 <uart_log>
            ppp_connected = false;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <ppp_status_cb+0x60>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
            gsm_ppp_mode = false;
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <ppp_status_cb+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
            break;
 800121e:	e009      	b.n	8001234 <ppp_status_cb+0x54>
        default:
            uart_log("PPP connection error");
 8001220:	480a      	ldr	r0, [pc, #40]	; (800124c <ppp_status_cb+0x6c>)
 8001222:	f7ff fcc7 	bl	8000bb4 <uart_log>
            ppp_connected = false;
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <ppp_status_cb+0x60>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
            gsm_ppp_mode = false;
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <ppp_status_cb+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
            break;
 8001232:	bf00      	nop
    }
}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	080133e4 	.word	0x080133e4
 8001240:	200006e8 	.word	0x200006e8
 8001244:	200006b4 	.word	0x200006b4
 8001248:	080133f4 	.word	0x080133f4
 800124c:	08013418 	.word	0x08013418

08001250 <ppp_connection_init>:

void ppp_connection_init(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
    uart_log("Initializing PPP connection...");
 8001254:	4812      	ldr	r0, [pc, #72]	; (80012a0 <ppp_connection_init+0x50>)
 8001256:	f7ff fcad 	bl	8000bb4 <uart_log>

    tcpip_init(NULL, NULL);
 800125a:	2100      	movs	r1, #0
 800125c:	2000      	movs	r0, #0
 800125e:	f000 f915 	bl	800148c <tcpip_init>

    // Sử dụng hàm wrapper ppp_output_callback
    ppp = pppos_create(&ppp_netif, ppp_output_callback, ppp_status_cb, NULL);
 8001262:	2300      	movs	r3, #0
 8001264:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <ppp_connection_init+0x54>)
 8001266:	4910      	ldr	r1, [pc, #64]	; (80012a8 <ppp_connection_init+0x58>)
 8001268:	4810      	ldr	r0, [pc, #64]	; (80012ac <ppp_connection_init+0x5c>)
 800126a:	f00f f9bf 	bl	80105ec <pppos_create>
 800126e:	4602      	mov	r2, r0
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <ppp_connection_init+0x60>)
 8001272:	601a      	str	r2, [r3, #0]
    if (ppp == NULL) {
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <ppp_connection_init+0x60>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d103      	bne.n	8001284 <ppp_connection_init+0x34>
        uart_log("Failed to create PPP control block");
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <ppp_connection_init+0x64>)
 800127e:	f7ff fc99 	bl	8000bb4 <uart_log>
        return;
 8001282:	e00b      	b.n	800129c <ppp_connection_init+0x4c>
    }

    ppp_set_default(ppp);
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <ppp_connection_init+0x60>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128a:	4618      	mov	r0, r3
 800128c:	f001 fed2 	bl	8003034 <netif_set_default>
    // Đặt mật khẩu nếu cần
    // ppp_set_auth(ppp, PPPAUTHTYPE_PAP, "user", "password");
    ppp_connect(ppp, 0);
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <ppp_connection_init+0x60>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f00e fe8c 	bl	800ffb4 <ppp_connect>
}
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	08013430 	.word	0x08013430
 80012a4:	080011e1 	.word	0x080011e1
 80012a8:	080011c1 	.word	0x080011c1
 80012ac:	200006b8 	.word	0x200006b8
 80012b0:	200006b0 	.word	0x200006b0
 80012b4:	08013450 	.word	0x08013450

080012b8 <ppp_connection_poll>:

void ppp_connection_poll(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
    // Hàm này nên được gọi thường xuyên từ vòng lặp chính
    sys_check_timeouts();
 80012bc:	f008 fb6a 	bl	8009994 <sys_check_timeouts>
        // Có thể thêm log ở đây nếu cần, nhưng hạn chế để tránh spam
        // uart_log("PPP connection is active");
    } else {
        // uart_log("PPP connection is not active");
    }
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <tcpip_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80012ce:	f008 fb97 	bl	8009a00 <sys_timeouts_sleeptime>
 80012d2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012da:	d10b      	bne.n	80012f4 <tcpip_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80012dc:	4813      	ldr	r0, [pc, #76]	; (800132c <tcpip_mbox_fetch+0x68>)
 80012de:	f7ff fee4 	bl	80010aa <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	6839      	ldr	r1, [r7, #0]
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ff04 	bl	80010f4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80012ec:	480f      	ldr	r0, [pc, #60]	; (800132c <tcpip_mbox_fetch+0x68>)
 80012ee:	f7ff fed2 	bl	8001096 <sys_mutex_lock>
    return;
 80012f2:	e018      	b.n	8001326 <tcpip_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <tcpip_mbox_fetch+0x3c>
    sys_check_timeouts();
 80012fa:	f008 fb4b 	bl	8009994 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80012fe:	e7e6      	b.n	80012ce <tcpip_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8001300:	480a      	ldr	r0, [pc, #40]	; (800132c <tcpip_mbox_fetch+0x68>)
 8001302:	f7ff fed2 	bl	80010aa <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	6839      	ldr	r1, [r7, #0]
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fef2 	bl	80010f4 <sys_arch_mbox_fetch>
 8001310:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8001312:	4806      	ldr	r0, [pc, #24]	; (800132c <tcpip_mbox_fetch+0x68>)
 8001314:	f7ff febf 	bl	8001096 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131e:	d102      	bne.n	8001326 <tcpip_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8001320:	f008 fb38 	bl	8009994 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8001324:	e7d3      	b.n	80012ce <tcpip_mbox_fetch+0xa>
  }
}
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200008a4 	.word	0x200008a4

08001330 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8001338:	4812      	ldr	r0, [pc, #72]	; (8001384 <tcpip_thread+0x54>)
 800133a:	f7ff feac 	bl	8001096 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <tcpip_thread+0x58>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <tcpip_thread+0x58>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <tcpip_thread+0x5c>)
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	4610      	mov	r0, r2
 8001350:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    tcpip_mbox_fetch(&tcpip_mbox, (void **)&msg);
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4619      	mov	r1, r3
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <tcpip_thread+0x60>)
 800135a:	f7ff ffb3 	bl	80012c4 <tcpip_mbox_fetch>
    if (msg == NULL) {
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10a      	bne.n	800137a <tcpip_thread+0x4a>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <tcpip_thread+0x64>)
 8001366:	229a      	movs	r2, #154	; 0x9a
 8001368:	490b      	ldr	r1, [pc, #44]	; (8001398 <tcpip_thread+0x68>)
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <tcpip_thread+0x6c>)
 800136c:	f010 ffc4 	bl	80122f8 <iprintf>
 8001370:	2000      	movs	r0, #0
 8001372:	f011 f8c3 	bl	80124fc <fflush>
 8001376:	f011 f808 	bl	801238a <abort>
      continue;
    }
    tcpip_thread_handle_msg(msg);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f80f 	bl	80013a0 <tcpip_thread_handle_msg>
    tcpip_mbox_fetch(&tcpip_mbox, (void **)&msg);
 8001382:	e7e6      	b.n	8001352 <tcpip_thread+0x22>
 8001384:	200008a4 	.word	0x200008a4
 8001388:	200006ec 	.word	0x200006ec
 800138c:	200006f0 	.word	0x200006f0
 8001390:	200006f4 	.word	0x200006f4
 8001394:	08013474 	.word	0x08013474
 8001398:	08013494 	.word	0x08013494
 800139c:	080134b4 	.word	0x080134b4

080013a0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d018      	beq.n	80013e2 <tcpip_thread_handle_msg+0x42>
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d021      	beq.n	80013f8 <tcpip_thread_handle_msg+0x58>
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d126      	bne.n	8001406 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6850      	ldr	r0, [r2, #4]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6892      	ldr	r2, [r2, #8]
 80013c4:	4611      	mov	r1, r2
 80013c6:	4798      	blx	r3
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d004      	beq.n	80013d8 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 fa46 	bl	8003864 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	2006      	movs	r0, #6
 80013dc:	f001 fc38 	bl	8002c50 <memp_free>
      break;
 80013e0:	e01c      	b.n	800141c <tcpip_thread_handle_msg+0x7c>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6892      	ldr	r2, [r2, #8]
 80013ea:	4610      	mov	r0, r2
 80013ec:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	2005      	movs	r0, #5
 80013f2:	f001 fc2d 	bl	8002c50 <memp_free>
      break;
 80013f6:	e011      	b.n	800141c <tcpip_thread_handle_msg+0x7c>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6892      	ldr	r2, [r2, #8]
 8001400:	4610      	mov	r0, r2
 8001402:	4798      	blx	r3
      break;
 8001404:	e00a      	b.n	800141c <tcpip_thread_handle_msg+0x7c>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <tcpip_thread_handle_msg+0x84>)
 8001408:	22dd      	movs	r2, #221	; 0xdd
 800140a:	4907      	ldr	r1, [pc, #28]	; (8001428 <tcpip_thread_handle_msg+0x88>)
 800140c:	4807      	ldr	r0, [pc, #28]	; (800142c <tcpip_thread_handle_msg+0x8c>)
 800140e:	f010 ff73 	bl	80122f8 <iprintf>
 8001412:	2000      	movs	r0, #0
 8001414:	f011 f872 	bl	80124fc <fflush>
 8001418:	f010 ffb7 	bl	801238a <abort>
      break;
  }
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	08013474 	.word	0x08013474
 8001428:	08013494 	.word	0x08013494
 800142c:	080134b4 	.word	0x080134b4

08001430 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800143a:	2005      	movs	r0, #5
 800143c:	f001 fb9e 	bl	8002b7c <memp_malloc>
 8001440:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d102      	bne.n	800144e <tcpip_try_callback+0x1e>
    return ERR_MEM;
 8001448:	f04f 33ff 	mov.w	r3, #4294967295
 800144c:	e017      	b.n	800147e <tcpip_try_callback+0x4e>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8001460:	68f9      	ldr	r1, [r7, #12]
 8001462:	4809      	ldr	r0, [pc, #36]	; (8001488 <tcpip_try_callback+0x58>)
 8001464:	f7ff fe3a 	bl	80010dc <sys_mbox_trypost>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <tcpip_try_callback+0x4c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800146e:	68f9      	ldr	r1, [r7, #12]
 8001470:	2005      	movs	r0, #5
 8001472:	f001 fbed 	bl	8002c50 <memp_free>
    return ERR_MEM;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	e000      	b.n	800147e <tcpip_try_callback+0x4e>
  }
  return ERR_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200006f4 	.word	0x200006f4

0800148c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af02      	add	r7, sp, #8
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  lwip_init();
 8001496:	f000 f9f2 	bl	800187e <lwip_init>

  tcpip_init_done = initfunc;
 800149a:	4a1b      	ldr	r2, [pc, #108]	; (8001508 <tcpip_init+0x7c>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80014a0:	4a1a      	ldr	r2, [pc, #104]	; (800150c <tcpip_init+0x80>)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80014a6:	2100      	movs	r1, #0
 80014a8:	4819      	ldr	r0, [pc, #100]	; (8001510 <tcpip_init+0x84>)
 80014aa:	f7ff fe08 	bl	80010be <sys_mbox_new>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00b      	beq.n	80014cc <tcpip_init+0x40>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <tcpip_init+0x88>)
 80014b6:	f240 229a 	movw	r2, #666	; 0x29a
 80014ba:	4917      	ldr	r1, [pc, #92]	; (8001518 <tcpip_init+0x8c>)
 80014bc:	4817      	ldr	r0, [pc, #92]	; (800151c <tcpip_init+0x90>)
 80014be:	f010 ff1b 	bl	80122f8 <iprintf>
 80014c2:	2000      	movs	r0, #0
 80014c4:	f011 f81a 	bl	80124fc <fflush>
 80014c8:	f010 ff5f 	bl	801238a <abort>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80014cc:	4814      	ldr	r0, [pc, #80]	; (8001520 <tcpip_init+0x94>)
 80014ce:	f7ff fdd4 	bl	800107a <sys_mutex_new>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00b      	beq.n	80014f0 <tcpip_init+0x64>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <tcpip_init+0x88>)
 80014da:	f240 229e 	movw	r2, #670	; 0x29e
 80014de:	4911      	ldr	r1, [pc, #68]	; (8001524 <tcpip_init+0x98>)
 80014e0:	480e      	ldr	r0, [pc, #56]	; (800151c <tcpip_init+0x90>)
 80014e2:	f010 ff09 	bl	80122f8 <iprintf>
 80014e6:	2000      	movs	r0, #0
 80014e8:	f011 f808 	bl	80124fc <fflush>
 80014ec:	f010 ff4d 	bl	801238a <abort>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80014f0:	2301      	movs	r3, #1
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2300      	movs	r3, #0
 80014f6:	2200      	movs	r2, #0
 80014f8:	490b      	ldr	r1, [pc, #44]	; (8001528 <tcpip_init+0x9c>)
 80014fa:	480c      	ldr	r0, [pc, #48]	; (800152c <tcpip_init+0xa0>)
 80014fc:	f7ff fe07 	bl	800110e <sys_thread_new>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200006ec 	.word	0x200006ec
 800150c:	200006f0 	.word	0x200006f0
 8001510:	200006f4 	.word	0x200006f4
 8001514:	08013474 	.word	0x08013474
 8001518:	080134dc 	.word	0x080134dc
 800151c:	080134b4 	.word	0x080134b4
 8001520:	200008a4 	.word	0x200008a4
 8001524:	08013500 	.word	0x08013500
 8001528:	08001331 	.word	0x08001331
 800152c:	08013524 	.word	0x08013524

08001530 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	b21a      	sxth	r2, r3
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	b29b      	uxth	r3, r3
 8001546:	b21b      	sxth	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b21b      	sxth	r3, r3
 800154c:	b29b      	uxth	r3, r3
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	061a      	lsls	r2, r3, #24
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	0e1b      	lsrs	r3, r3, #24
 800157e:	4313      	orrs	r3, r2
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00d      	beq.n	80015cc <lwip_standard_chksum+0x40>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	dd0a      	ble.n	80015cc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80015b6:	f107 030e 	add.w	r3, r7, #14
 80015ba:	3301      	adds	r3, #1
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	1c51      	adds	r1, r2, #1
 80015c0:	61f9      	str	r1, [r7, #28]
 80015c2:	7812      	ldrb	r2, [r2, #0]
 80015c4:	701a      	strb	r2, [r3, #0]
    len--;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80015d0:	e00a      	b.n	80015e8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	1c9a      	adds	r2, r3, #2
 80015d6:	61ba      	str	r2, [r7, #24]
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	4413      	add	r3, r2
 80015e0:	617b      	str	r3, [r7, #20]
    len -= 2;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	3b02      	subs	r3, #2
 80015e6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	dcf1      	bgt.n	80015d2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	dd04      	ble.n	80015fe <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80015f4:	f107 030e 	add.w	r3, r7, #14
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	7812      	ldrb	r2, [r2, #0]
 80015fc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80015fe:	89fb      	ldrh	r3, [r7, #14]
 8001600:	461a      	mov	r2, r3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	4413      	add	r3, r2
 8001606:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	0c1a      	lsrs	r2, r3, #16
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	b29b      	uxth	r3, r3
 8001610:	4413      	add	r3, r2
 8001612:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	0c1a      	lsrs	r2, r3, #16
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	b29b      	uxth	r3, r3
 800161c:	4413      	add	r3, r2
 800161e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d007      	beq.n	8001636 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	b29a      	uxth	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	b2db      	uxtb	r3, r3
 8001632:	4313      	orrs	r3, r2
 8001634:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	b29b      	uxth	r3, r3
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	; 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b086      	sub	sp, #24
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	72fb      	strb	r3, [r7, #11]
 8001654:	4613      	mov	r3, r2
 8001656:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e02b      	b.n	80016ba <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	895b      	ldrh	r3, [r3, #10]
 800166a:	4619      	mov	r1, r3
 800166c:	4610      	mov	r0, r2
 800166e:	f7ff ff8d 	bl	800158c <lwip_standard_chksum>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	0c1a      	lsrs	r2, r3, #16
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	b29b      	uxth	r3, r3
 8001684:	4413      	add	r3, r2
 8001686:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	895b      	ldrh	r3, [r3, #10]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	b29b      	uxth	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00e      	beq.n	80016b4 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	2b00      	cmp	r3, #0
 800169a:	bf0c      	ite	eq
 800169c:	2301      	moveq	r3, #1
 800169e:	2300      	movne	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1d0      	bne.n	8001662 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d007      	beq.n	80016d6 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	0a1b      	lsrs	r3, r3, #8
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4313      	orrs	r3, r2
 80016d4:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 80016d6:	7afb      	ldrb	r3, [r7, #11]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff28 	bl	8001530 <lwip_htons>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 80016ea:	893b      	ldrh	r3, [r7, #8]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff1f 	bl	8001530 <lwip_htons>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461a      	mov	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	0c1a      	lsrs	r2, r3, #16
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	b29b      	uxth	r3, r3
 8001704:	4413      	add	r3, r2
 8001706:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	0c1a      	lsrs	r2, r3, #16
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	b29b      	uxth	r3, r3
 8001710:	4413      	add	r3, r2
 8001712:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	b29b      	uxth	r3, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	b29b      	uxth	r3, r3
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	460b      	mov	r3, r1
 8001730:	72fb      	strb	r3, [r7, #11]
 8001732:	4613      	mov	r3, r2
 8001734:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	b29b      	uxth	r3, r3
 8001740:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	0c1b      	lsrs	r3, r3, #16
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4413      	add	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	b29b      	uxth	r3, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4413      	add	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	0c1b      	lsrs	r3, r3, #16
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4413      	add	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	0c1a      	lsrs	r2, r3, #16
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	b29b      	uxth	r3, r3
 800176e:	4413      	add	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	0c1a      	lsrs	r2, r3, #16
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	b29b      	uxth	r3, r3
 800177a:	4413      	add	r3, r2
 800177c:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800177e:	893a      	ldrh	r2, [r7, #8]
 8001780:	7af9      	ldrb	r1, [r7, #11]
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f7ff ff5e 	bl	8001646 <inet_cksum_pseudo_base>
 800178a:	4603      	mov	r3, r0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af02      	add	r7, sp, #8
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	460b      	mov	r3, r1
 80017a0:	72fb      	strb	r3, [r7, #11]
 80017a2:	4613      	mov	r3, r2
 80017a4:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 80017a6:	893a      	ldrh	r2, [r7, #8]
 80017a8:	7af9      	ldrb	r1, [r7, #11]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f7ff ffb7 	bl	8001724 <inet_chksum_pseudo>
 80017b6:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80017cc:	887b      	ldrh	r3, [r7, #2]
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff fedb 	bl	800158c <lwip_standard_chksum>
 80017d6:	4603      	mov	r3, r0
 80017d8:	43db      	mvns	r3, r3
 80017da:	b29b      	uxth	r3, r3
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	e02b      	b.n	8001852 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	895b      	ldrh	r3, [r3, #10]
 8001802:	4619      	mov	r1, r3
 8001804:	4610      	mov	r0, r2
 8001806:	f7ff fec1 	bl	800158c <lwip_standard_chksum>
 800180a:	4603      	mov	r3, r0
 800180c:	461a      	mov	r2, r3
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	4413      	add	r3, r2
 8001812:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	0c1a      	lsrs	r2, r3, #16
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	b29b      	uxth	r3, r3
 800181c:	4413      	add	r3, r2
 800181e:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	895b      	ldrh	r3, [r3, #10]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	b29b      	uxth	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00e      	beq.n	800184c <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf0c      	ite	eq
 8001834:	2301      	moveq	r3, #1
 8001836:	2300      	movne	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	b29a      	uxth	r2, r3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	b2db      	uxtb	r3, r3
 8001848:	4313      	orrs	r3, r2
 800184a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1d0      	bne.n	80017fa <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d007      	beq.n	800186e <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	021b      	lsls	r3, r3, #8
 8001862:	b29a      	uxth	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	0a1b      	lsrs	r3, r3, #8
 8001868:	b2db      	uxtb	r3, r3
 800186a:	4313      	orrs	r3, r2
 800186c:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	b29b      	uxth	r3, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	b29b      	uxth	r3, r3
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8001888:	f7ff fbf0 	bl	800106c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800188c:	f000 fde0 	bl	8002450 <mem_init>
  memp_init();
 8001890:	f001 f914 	bl	8002abc <memp_init>
  pbuf_init();
  netif_init();
 8001894:	f001 fa06 	bl	8002ca4 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8001898:	f002 fb1e 	bl	8003ed8 <tcp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */
#if PPP_SUPPORT
  ppp_init();
 800189c:	f00e fc44 	bl	8010128 <ppp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80018a0:	f007 fff2 	bl	8009888 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08e      	sub	sp, #56	; 0x38
 80018b0:	af04      	add	r7, sp, #16
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80018b6:	4b92      	ldr	r3, [pc, #584]	; (8001b00 <icmp_input+0x254>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80018cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018ce:	2b13      	cmp	r3, #19
 80018d0:	f240 80fe 	bls.w	8001ad0 <icmp_input+0x224>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	895b      	ldrh	r3, [r3, #10]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	f240 80fb 	bls.w	8001ad4 <icmp_input+0x228>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	785b      	ldrb	r3, [r3, #1]
 80018ee:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80018f2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80e3 	beq.w	8001ac2 <icmp_input+0x216>
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	f040 80e3 	bne.w	8001ac8 <icmp_input+0x21c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8001902:	4b80      	ldr	r3, [pc, #512]	; (8001b04 <icmp_input+0x258>)
 8001904:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8001906:	4b7e      	ldr	r3, [pc, #504]	; (8001b00 <icmp_input+0x254>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800190e:	2be0      	cmp	r3, #224	; 0xe0
 8001910:	f000 80e7 	beq.w	8001ae2 <icmp_input+0x236>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8001914:	4b7a      	ldr	r3, [pc, #488]	; (8001b00 <icmp_input+0x254>)
 8001916:	695a      	ldr	r2, [r3, #20]
 8001918:	4b79      	ldr	r3, [pc, #484]	; (8001b00 <icmp_input+0x254>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f000 fc7a 	bl	8002218 <ip4_addr_isbroadcast_u32>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 80dd 	bne.w	8001ae6 <icmp_input+0x23a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	891b      	ldrh	r3, [r3, #8]
 8001930:	2b07      	cmp	r3, #7
 8001932:	f240 80d1 	bls.w	8001ad8 <icmp_input+0x22c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ff54 	bl	80017e4 <inet_chksum_pbuf>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f001 ff8e 	bl	8003864 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8001948:	e0d6      	b.n	8001af8 <icmp_input+0x24c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800194a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800194c:	330e      	adds	r3, #14
 800194e:	4619      	mov	r1, r3
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f001 feed 	bl	8003730 <pbuf_add_header>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d04c      	beq.n	80019f6 <icmp_input+0x14a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	891a      	ldrh	r2, [r3, #8]
 8001960:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001962:	4413      	add	r3, r2
 8001964:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	891b      	ldrh	r3, [r3, #8]
 800196a:	8b7a      	ldrh	r2, [r7, #26]
 800196c:	429a      	cmp	r2, r3
 800196e:	f0c0 80bc 	bcc.w	8001aea <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8001972:	8b7b      	ldrh	r3, [r7, #26]
 8001974:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001978:	4619      	mov	r1, r3
 800197a:	200e      	movs	r0, #14
 800197c:	f001 fcd4 	bl	8003328 <pbuf_alloc>
 8001980:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80b2 	beq.w	8001aee <icmp_input+0x242>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	895b      	ldrh	r3, [r3, #10]
 800198e:	461a      	mov	r2, r3
 8001990:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001992:	3308      	adds	r3, #8
 8001994:	429a      	cmp	r2, r3
 8001996:	d203      	bcs.n	80019a0 <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header\n"));
          pbuf_free(r);
 8001998:	6978      	ldr	r0, [r7, #20]
 800199a:	f001 ff63 	bl	8003864 <pbuf_free>
          goto icmperr;
 800199e:	e0a7      	b.n	8001af0 <icmp_input+0x244>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80019a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019a8:	4618      	mov	r0, r3
 80019aa:	f010 fec7 	bl	801273c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80019ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019b0:	4619      	mov	r1, r3
 80019b2:	6978      	ldr	r0, [r7, #20]
 80019b4:	f001 fecc 	bl	8003750 <pbuf_remove_header>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00a      	beq.n	80019d4 <icmp_input+0x128>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed", 0);
 80019be:	4b52      	ldr	r3, [pc, #328]	; (8001b08 <icmp_input+0x25c>)
 80019c0:	22b6      	movs	r2, #182	; 0xb6
 80019c2:	4952      	ldr	r1, [pc, #328]	; (8001b0c <icmp_input+0x260>)
 80019c4:	4852      	ldr	r0, [pc, #328]	; (8001b10 <icmp_input+0x264>)
 80019c6:	f010 fc97 	bl	80122f8 <iprintf>
 80019ca:	2000      	movs	r0, #0
 80019cc:	f010 fd96 	bl	80124fc <fflush>
 80019d0:	f010 fcdb 	bl	801238a <abort>
          pbuf_free(r);
          goto icmperr;
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	6978      	ldr	r0, [r7, #20]
 80019d8:	f002 f87e 	bl	8003ad8 <pbuf_copy>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <icmp_input+0x13e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed\n"));
          pbuf_free(r);
 80019e2:	6978      	ldr	r0, [r7, #20]
 80019e4:	f001 ff3e 	bl	8003864 <pbuf_free>
          goto icmperr;
 80019e8:	e082      	b.n	8001af0 <icmp_input+0x244>
        }
        /* free the original p */
        pbuf_free(p);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f001 ff3a 	bl	8003864 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	e013      	b.n	8001a1e <icmp_input+0x172>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80019f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019f8:	330e      	adds	r3, #14
 80019fa:	4619      	mov	r1, r3
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f001 fea7 	bl	8003750 <pbuf_remove_header>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00a      	beq.n	8001a1e <icmp_input+0x172>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed", 0);
 8001a08:	4b3f      	ldr	r3, [pc, #252]	; (8001b08 <icmp_input+0x25c>)
 8001a0a:	22c7      	movs	r2, #199	; 0xc7
 8001a0c:	4941      	ldr	r1, [pc, #260]	; (8001b14 <icmp_input+0x268>)
 8001a0e:	4840      	ldr	r0, [pc, #256]	; (8001b10 <icmp_input+0x264>)
 8001a10:	f010 fc72 	bl	80122f8 <iprintf>
 8001a14:	2000      	movs	r0, #0
 8001a16:	f010 fd71 	bl	80124fc <fflush>
 8001a1a:	f010 fcb6 	bl	801238a <abort>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8001a24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a26:	4619      	mov	r1, r3
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f001 fe81 	bl	8003730 <pbuf_add_header>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d148      	bne.n	8001ac6 <icmp_input+0x21a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet\n"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8001a42:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <icmp_input+0x254>)
 8001a44:	691a      	ldr	r2, [r3, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
        p->if_idx = NETIF_NO_INDEX; /* we're reusing this pbuf, so reset its if_idx */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	73da      	strb	r2, [r3, #15]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	885b      	ldrh	r3, [r3, #2]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d907      	bls.n	8001a74 <icmp_input+0x1c8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	885b      	ldrh	r3, [r3, #2]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3309      	adds	r3, #9
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	805a      	strh	r2, [r3, #2]
 8001a72:	e006      	b.n	8001a82 <icmp_input+0x1d6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	885b      	ldrh	r3, [r3, #2]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	3308      	adds	r3, #8
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	22ff      	movs	r2, #255	; 0xff
 8001a86:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	729a      	strb	r2, [r3, #10]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8001a92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a94:	4619      	mov	r1, r3
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f7ff fe92 	bl	80017c0 <inet_chksum>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	9302      	str	r3, [sp, #8]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	2300      	movs	r3, #0
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	23ff      	movs	r3, #255	; 0xff
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	69f9      	ldr	r1, [r7, #28]
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 fa76 	bl	8001fa8 <ip4_output_if>
 8001abc:	4603      	mov	r3, r0
 8001abe:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8001ac0:	e001      	b.n	8001ac6 <icmp_input+0x21a>
      break;
 8001ac2:	bf00      	nop
 8001ac4:	e000      	b.n	8001ac8 <icmp_input+0x21c>
      break;
 8001ac6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f001 fecb 	bl	8003864 <pbuf_free>
  return;
 8001ace:	e013      	b.n	8001af8 <icmp_input+0x24c>
    goto lenerr;
 8001ad0:	bf00      	nop
 8001ad2:	e002      	b.n	8001ada <icmp_input+0x22e>
    goto lenerr;
 8001ad4:	bf00      	nop
 8001ad6:	e000      	b.n	8001ada <icmp_input+0x22e>
        goto lenerr;
 8001ad8:	bf00      	nop
lenerr:
  pbuf_free(p);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f001 fec2 	bl	8003864 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8001ae0:	e00a      	b.n	8001af8 <icmp_input+0x24c>
        goto icmperr;
 8001ae2:	bf00      	nop
 8001ae4:	e004      	b.n	8001af0 <icmp_input+0x244>
        goto icmperr;
 8001ae6:	bf00      	nop
 8001ae8:	e002      	b.n	8001af0 <icmp_input+0x244>
          goto icmperr;
 8001aea:	bf00      	nop
 8001aec:	e000      	b.n	8001af0 <icmp_input+0x244>
          goto icmperr;
 8001aee:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f001 feb7 	bl	8003864 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8001af6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8001af8:	3728      	adds	r7, #40	; 0x28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200008a8 	.word	0x200008a8
 8001b04:	200008bc 	.word	0x200008bc
 8001b08:	08013534 	.word	0x08013534
 8001b0c:	08013558 	.word	0x08013558
 8001b10:	0801358c 	.word	0x0801358c
 8001b14:	080135b4 	.word	0x080135b4

08001b18 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	461a      	mov	r2, r3
 8001b28:	2103      	movs	r1, #3
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f804 	bl	8001b38 <icmp_send_response>
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08c      	sub	sp, #48	; 0x30
 8001b3c:	af04      	add	r7, sp, #16
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	70fb      	strb	r3, [r7, #3]
 8001b44:	4613      	mov	r3, r2
 8001b46:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* Keep IP header + up to 8 bytes */
  response_pkt_len = IP_HLEN + ICMP_DEST_UNREACH_DATASIZE;
 8001b48:	231c      	movs	r3, #28
 8001b4a:	83fb      	strh	r3, [r7, #30]
  if (p->tot_len < response_pkt_len) {
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	891b      	ldrh	r3, [r3, #8]
 8001b50:	8bfa      	ldrh	r2, [r7, #30]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d902      	bls.n	8001b5c <icmp_send_response+0x24>
    response_pkt_len = p->tot_len;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	891b      	ldrh	r3, [r3, #8]
 8001b5a:	83fb      	strh	r3, [r7, #30]
  }

  /* ICMP header + part of original packet */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_hdr) + response_pkt_len, PBUF_RAM);
 8001b5c:	8bfb      	ldrh	r3, [r7, #30]
 8001b5e:	3308      	adds	r3, #8
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001b66:	4619      	mov	r1, r3
 8001b68:	2022      	movs	r0, #34	; 0x22
 8001b6a:	f001 fbdd 	bl	8003328 <pbuf_alloc>
 8001b6e:	61b8      	str	r0, [r7, #24]
  if (q == NULL) {
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d059      	beq.n	8001c2a <icmp_send_response+0xf2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_send_response: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	895b      	ldrh	r3, [r3, #10]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	8bfb      	ldrh	r3, [r7, #30]
 8001b7e:	3308      	adds	r3, #8
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d20b      	bcs.n	8001b9c <icmp_send_response+0x64>
 8001b84:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <icmp_send_response+0xfc>)
 8001b86:	f240 126f 	movw	r2, #367	; 0x16f
 8001b8a:	492b      	ldr	r1, [pc, #172]	; (8001c38 <icmp_send_response+0x100>)
 8001b8c:	482b      	ldr	r0, [pc, #172]	; (8001c3c <icmp_send_response+0x104>)
 8001b8e:	f010 fbb3 	bl	80122f8 <iprintf>
 8001b92:	2000      	movs	r0, #0
 8001b94:	f010 fcb2 	bl	80124fc <fflush>
 8001b98:	f010 fbf7 	bl	801238a <abort>
              (q->len >= (sizeof(struct icmp_hdr) + response_pkt_len)));

  iphdr = (struct ip_hdr *)p->payload;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_hdr *)q->payload;
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	78fa      	ldrb	r2, [r7, #3]
 8001bac:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	78ba      	ldrb	r2, [r7, #2]
 8001bb2:	705a      	strb	r2, [r3, #1]
  icmphdr->data = 0;
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	711a      	strb	r2, [r3, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	715a      	strb	r2, [r3, #5]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	719a      	strb	r2, [r3, #6]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  pbuf_copy_partial_pbuf(q, p, response_pkt_len, sizeof(struct icmp_hdr));
 8001bc6:	8bfa      	ldrh	r2, [r7, #30]
 8001bc8:	2308      	movs	r3, #8
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	69b8      	ldr	r0, [r7, #24]
 8001bce:	f001 ffa7 	bl	8003b20 <pbuf_copy_partial_pbuf>

  ip4_addr_copy(iphdr_src, iphdr->src);
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	60bb      	str	r3, [r7, #8]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8001bd8:	f107 0308 	add.w	r3, r7, #8
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 f82f 	bl	8001c40 <ip4_route>
 8001be2:	60f8      	str	r0, [r7, #12]
#endif
  if (netif != NULL) {
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d01b      	beq.n	8001c22 <icmp_send_response+0xea>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	2200      	movs	r2, #0
 8001bee:	709a      	strb	r2, [r3, #2]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	895b      	ldrh	r3, [r3, #10]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	6938      	ldr	r0, [r7, #16]
 8001bfc:	f7ff fde0 	bl	80017c0 <inet_chksum>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8001c08:	f107 0208 	add.w	r2, r7, #8
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	9302      	str	r3, [sp, #8]
 8001c10:	2301      	movs	r3, #1
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	2300      	movs	r3, #0
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	23ff      	movs	r3, #255	; 0xff
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	69b8      	ldr	r0, [r7, #24]
 8001c1e:	f000 f9c3 	bl	8001fa8 <ip4_output_if>
  }
  pbuf_free(q);
 8001c22:	69b8      	ldr	r0, [r7, #24]
 8001c24:	f001 fe1e 	bl	8003864 <pbuf_free>
 8001c28:	e000      	b.n	8001c2c <icmp_send_response+0xf4>
    return;
 8001c2a:	bf00      	nop
}
 8001c2c:	3720      	adds	r7, #32
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	08013534 	.word	0x08013534
 8001c38:	080135e8 	.word	0x080135e8
 8001c3c:	0801358c 	.word	0x0801358c

08001c40 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8001c48:	4b31      	ldr	r3, [pc, #196]	; (8001d10 <ip4_route+0xd0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	e033      	b.n	8001cb8 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d029      	beq.n	8001cb2 <ip4_route+0x72>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d022      	beq.n	8001cb2 <ip4_route+0x72>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d01d      	beq.n	8001cb2 <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_net_eq(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	405a      	eors	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	3308      	adds	r3, #8
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	e038      	b.n	8001d04 <ip4_route+0xc4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_eq(dest, netif_ip4_gw(netif))) {
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d108      	bne.n	8001cb2 <ip4_route+0x72>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	330c      	adds	r3, #12
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d101      	bne.n	8001cb2 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	e028      	b.n	8001d04 <ip4_route+0xc4>
  NETIF_FOREACH(netif) {
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1c8      	bne.n	8001c50 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <ip4_route+0xd4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d01a      	beq.n	8001cfc <ip4_route+0xbc>
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <ip4_route+0xd4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d012      	beq.n	8001cfc <ip4_route+0xbc>
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <ip4_route+0xd4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00a      	beq.n	8001cfc <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <ip4_route+0xd4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	3304      	adds	r3, #4
 8001cec:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d004      	beq.n	8001cfc <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8001cfa:	d101      	bne.n	8001d00 <ip4_route+0xc0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	e001      	b.n	8001d04 <ip4_route+0xc4>
  }

  return netif_default;
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <ip4_route+0xd4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	200018d4 	.word	0x200018d4
 8001d14:	200018d8 	.word	0x200018d8

08001d18 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d016      	beq.n	8001d5c <ip4_input_accept+0x44>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3304      	adds	r3, #4
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d011      	beq.n	8001d5c <ip4_input_accept+0x44>
    /* unicast to this interface address? */
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <ip4_input_accept+0x50>)
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3304      	adds	r3, #4
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d008      	beq.n	8001d58 <ip4_input_accept+0x40>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <ip4_input_accept+0x50>)
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 fa63 	bl	8002218 <ip4_addr_isbroadcast_u32>
 8001d52:	4603      	mov	r3, r0
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <ip4_input_accept+0x44>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <ip4_input_accept+0x46>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200008a8 	.word	0x200008a8

08001d6c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d004      	beq.n	8001d92 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f001 fd6b 	bl	8003864 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e102      	b.n	8001f98 <ip4_input+0x22c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	885b      	ldrh	r3, [r3, #2]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fbc1 	bl	8001530 <lwip_htons>
 8001dae:	4603      	mov	r3, r0
 8001db0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	891b      	ldrh	r3, [r3, #8]
 8001db6:	89ba      	ldrh	r2, [r7, #12]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d204      	bcs.n	8001dc6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8001dbc:	89bb      	ldrh	r3, [r7, #12]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f001 fba3 	bl	800350c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	895b      	ldrh	r3, [r3, #10]
 8001dca:	89fa      	ldrh	r2, [r7, #14]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d807      	bhi.n	8001de0 <ip4_input+0x74>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	891b      	ldrh	r3, [r3, #8]
 8001dd4:	89ba      	ldrh	r2, [r7, #12]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d802      	bhi.n	8001de0 <ip4_input+0x74>
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	2b13      	cmp	r3, #19
 8001dde:	d804      	bhi.n	8001dea <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f001 fd3f 	bl	8003864 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e0d6      	b.n	8001f98 <ip4_input+0x22c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8001dea:	89fb      	ldrh	r3, [r7, #14]
 8001dec:	4619      	mov	r1, r3
 8001dee:	6938      	ldr	r0, [r7, #16]
 8001df0:	f7ff fce6 	bl	80017c0 <inet_chksum>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d004      	beq.n	8001e04 <ip4_input+0x98>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f001 fd32 	bl	8003864 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	e0c9      	b.n	8001f98 <ip4_input+0x22c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	4a65      	ldr	r2, [pc, #404]	; (8001fa0 <ip4_input+0x234>)
 8001e0a:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4a63      	ldr	r2, [pc, #396]	; (8001fa0 <ip4_input+0x234>)
 8001e12:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8001e14:	4b62      	ldr	r3, [pc, #392]	; (8001fa0 <ip4_input+0x234>)
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e1c:	2be0      	cmp	r3, #224	; 0xe0
 8001e1e:	d111      	bne.n	8001e44 <ip4_input+0xd8>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <ip4_input+0xd2>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	3304      	adds	r3, #4
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <ip4_input+0xd2>
      netif = inp;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	e02a      	b.n	8001e94 <ip4_input+0x128>
    } else {
      netif = NULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e027      	b.n	8001e94 <ip4_input+0x128>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8001e44:	6838      	ldr	r0, [r7, #0]
 8001e46:	f7ff ff67 	bl	8001d18 <ip4_input_accept>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <ip4_input+0xea>
      netif = inp;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	e01e      	b.n	8001e94 <ip4_input+0x128>
    } else {
      netif = NULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8001e5a:	4b51      	ldr	r3, [pc, #324]	; (8001fa0 <ip4_input+0x234>)
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b7f      	cmp	r3, #127	; 0x7f
 8001e62:	d017      	beq.n	8001e94 <ip4_input+0x128>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8001e64:	4b4f      	ldr	r3, [pc, #316]	; (8001fa4 <ip4_input+0x238>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	e00e      	b.n	8001e8a <ip4_input+0x11e>
          if (netif == inp) {
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d006      	beq.n	8001e82 <ip4_input+0x116>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8001e74:	6978      	ldr	r0, [r7, #20]
 8001e76:	f7ff ff4f 	bl	8001d18 <ip4_input_accept>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d108      	bne.n	8001e92 <ip4_input+0x126>
 8001e80:	e000      	b.n	8001e84 <ip4_input+0x118>
            continue;
 8001e82:	bf00      	nop
        NETIF_FOREACH(netif) {
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1ed      	bne.n	8001e6c <ip4_input+0x100>
 8001e90:	e000      	b.n	8001e94 <ip4_input+0x128>
            break;
 8001e92:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8001e94:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <ip4_input+0x234>)
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	6839      	ldr	r1, [r7, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f9bc 	bl	8002218 <ip4_addr_isbroadcast_u32>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d105      	bne.n	8001eb2 <ip4_input+0x146>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8001ea6:	4b3e      	ldr	r3, [pc, #248]	; (8001fa0 <ip4_input+0x234>)
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8001eae:	2be0      	cmp	r3, #224	; 0xe0
 8001eb0:	d104      	bne.n	8001ebc <ip4_input+0x150>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f001 fcd6 	bl	8003864 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e06d      	b.n	8001f98 <ip4_input+0x22c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d104      	bne.n	8001ecc <ip4_input+0x160>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f001 fcce 	bl	8003864 <pbuf_free>
    return ERR_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	e065      	b.n	8001f98 <ip4_input+0x22c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	88db      	ldrh	r3, [r3, #6]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d004      	beq.n	8001ee8 <ip4_input+0x17c>
    if (p == NULL) {
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
#else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
    pbuf_free(p);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f001 fcc0 	bl	8003864 <pbuf_free>
                lwip_ntohs(IPH_OFFSET(iphdr))));
    IP_STATS_INC(ip.opterr);
    IP_STATS_INC(ip.drop);
    /* unsupported protocol feature */
    MIB2_STATS_INC(mib2.ipinunknownprotos);
    return ERR_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e057      	b.n	8001f98 <ip4_input+0x22c>
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8001ee8:	4a2d      	ldr	r2, [pc, #180]	; (8001fa0 <ip4_input+0x234>)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8001eee:	4a2c      	ldr	r2, [pc, #176]	; (8001fa0 <ip4_input+0x234>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8001ef4:	4a2a      	ldr	r2, [pc, #168]	; (8001fa0 <ip4_input+0x234>)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <ip4_input+0x234>)
 8001f0c:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8001f0e:	89fb      	ldrh	r3, [r7, #14]
 8001f10:	4619      	mov	r1, r3
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f001 fc1c 	bl	8003750 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	7a5b      	ldrb	r3, [r3, #9]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d006      	beq.n	8001f2e <ip4_input+0x1c2>
 8001f20:	2b06      	cmp	r3, #6
 8001f22:	d109      	bne.n	8001f38 <ip4_input+0x1cc>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8001f24:	6839      	ldr	r1, [r7, #0]
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f003 fc08 	bl	800573c <tcp_input>
        break;
 8001f2c:	e021      	b.n	8001f72 <ip4_input+0x206>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8001f2e:	6839      	ldr	r1, [r7, #0]
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff fcbb 	bl	80018ac <icmp_input>
        break;
 8001f36:	e01c      	b.n	8001f72 <ip4_input+0x206>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <ip4_input+0x234>)
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	6979      	ldr	r1, [r7, #20]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f96a 	bl	8002218 <ip4_addr_isbroadcast_u32>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10f      	bne.n	8001f6a <ip4_input+0x1fe>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <ip4_input+0x234>)
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8001f52:	2be0      	cmp	r3, #224	; 0xe0
 8001f54:	d009      	beq.n	8001f6a <ip4_input+0x1fe>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8001f56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f001 fc6e 	bl	800383e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8001f62:	2102      	movs	r1, #2
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff fdd7 	bl	8001b18 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f001 fc7a 	bl	8003864 <pbuf_free>
        break;
 8001f70:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <ip4_input+0x234>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <ip4_input+0x234>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <ip4_input+0x234>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <ip4_input+0x234>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <ip4_input+0x234>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <ip4_input+0x234>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	200008a8 	.word	0x200008a8
 8001fa4:	200018d4 	.word	0x200018d4

08001fa8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af04      	add	r7, sp, #16
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d009      	beq.n	8001fd4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <ip4_output_if+0x26>
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d102      	bne.n	8001fd4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8001fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8001fd4:	78fa      	ldrb	r2, [r7, #3]
 8001fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd8:	9302      	str	r3, [sp, #8]
 8001fda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fde:	9301      	str	r3, [sp, #4]
 8001fe0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6979      	ldr	r1, [r7, #20]
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 f805 	bl	8001ffc <ip4_output_if_src>
 8001ff2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	7b9b      	ldrb	r3, [r3, #14]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d00b      	beq.n	800202e <ip4_output_if_src+0x32>
 8002016:	4b7a      	ldr	r3, [pc, #488]	; (8002200 <ip4_output_if_src+0x204>)
 8002018:	f240 326b 	movw	r2, #875	; 0x36b
 800201c:	4979      	ldr	r1, [pc, #484]	; (8002204 <ip4_output_if_src+0x208>)
 800201e:	487a      	ldr	r0, [pc, #488]	; (8002208 <ip4_output_if_src+0x20c>)
 8002020:	f010 f96a 	bl	80122f8 <iprintf>
 8002024:	2000      	movs	r0, #0
 8002026:	f010 fa69 	bl	80124fc <fflush>
 800202a:	f010 f9ae 	bl	801238a <abort>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80c9 	beq.w	80021c8 <ip4_output_if_src+0x1cc>
    u16_t ip_hlen = IP_HLEN;
 8002036:	2314      	movs	r3, #20
 8002038:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800203a:	2114      	movs	r1, #20
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f001 fb77 	bl	8003730 <pbuf_add_header>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8002048:	f06f 0301 	mvn.w	r3, #1
 800204c:	e0d3      	b.n	80021f6 <ip4_output_if_src+0x1fa>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	895b      	ldrh	r3, [r3, #10]
 8002058:	2b13      	cmp	r3, #19
 800205a:	d80b      	bhi.n	8002074 <ip4_output_if_src+0x78>
 800205c:	4b68      	ldr	r3, [pc, #416]	; (8002200 <ip4_output_if_src+0x204>)
 800205e:	f44f 7268 	mov.w	r2, #928	; 0x3a0
 8002062:	496a      	ldr	r1, [pc, #424]	; (800220c <ip4_output_if_src+0x210>)
 8002064:	4868      	ldr	r0, [pc, #416]	; (8002208 <ip4_output_if_src+0x20c>)
 8002066:	f010 f947 	bl	80122f8 <iprintf>
 800206a:	2000      	movs	r0, #0
 800206c:	f010 fa46 	bl	80124fc <fflush>
 8002070:	f010 f98b 	bl	801238a <abort>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	78fa      	ldrb	r2, [r7, #3]
 8002078:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002080:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8002082:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	4313      	orrs	r3, r2
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	b21a      	sxth	r2, r3
 8002090:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	430b      	orrs	r3, r1
 800209a:	121b      	asrs	r3, r3, #8
 800209c:	b21b      	sxth	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	4313      	orrs	r3, r2
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	4413      	add	r3, r2
 80020ae:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	4413      	add	r3, r2
 80020c2:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	0c1b      	lsrs	r3, r3, #16
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	4413      	add	r3, r2
 80020ce:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80020d0:	8b7b      	ldrh	r3, [r7, #26]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80020e8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 80020ea:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	4313      	orrs	r3, r2
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	b21a      	sxth	r2, r3
 80020fa:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	430b      	orrs	r3, r1
 8002106:	121b      	asrs	r3, r3, #8
 8002108:	b21b      	sxth	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	b21b      	sxth	r3, r3
 800210e:	4313      	orrs	r3, r2
 8002110:	b21b      	sxth	r3, r3
 8002112:	b29b      	uxth	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	4413      	add	r3, r2
 800211a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	891b      	ldrh	r3, [r3, #8]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fa05 	bl	8001530 <lwip_htons>
 8002126:	4603      	mov	r3, r0
 8002128:	461a      	mov	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	885b      	ldrh	r3, [r3, #2]
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	4413      	add	r3, r2
 800213a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2200      	movs	r2, #0
 8002140:	719a      	strb	r2, [r3, #6]
 8002142:	2200      	movs	r2, #0
 8002144:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8002146:	4b32      	ldr	r3, [pc, #200]	; (8002210 <ip4_output_if_src+0x214>)
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff f9f0 	bl	8001530 <lwip_htons>
 8002150:	4603      	mov	r3, r0
 8002152:	461a      	mov	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	889b      	ldrh	r3, [r3, #4]
 800215c:	b29b      	uxth	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	4413      	add	r3, r2
 8002164:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8002166:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <ip4_output_if_src+0x214>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	3301      	adds	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	4b28      	ldr	r3, [pc, #160]	; (8002210 <ip4_output_if_src+0x214>)
 8002170:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d104      	bne.n	8002182 <ip4_output_if_src+0x186>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8002178:	4b26      	ldr	r3, [pc, #152]	; (8002214 <ip4_output_if_src+0x218>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	60da      	str	r2, [r3, #12]
 8002180:	e003      	b.n	800218a <ip4_output_if_src+0x18e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	b29b      	uxth	r3, r3
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	4413      	add	r3, r2
 8002194:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	0c1b      	lsrs	r3, r3, #16
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	4413      	add	r3, r2
 80021a0:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	0c1a      	lsrs	r2, r3, #16
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	0c1b      	lsrs	r3, r3, #16
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	4413      	add	r3, r2
 80021b6:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	815a      	strh	r2, [r3, #10]
 80021c6:	e00f      	b.n	80021e8 <ip4_output_if_src+0x1ec>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	895b      	ldrh	r3, [r3, #10]
 80021cc:	2b13      	cmp	r3, #19
 80021ce:	d802      	bhi.n	80021d6 <ip4_output_if_src+0x1da>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80021d0:	f06f 0301 	mvn.w	r3, #1
 80021d4:	e00f      	b.n	80021f6 <ip4_output_if_src+0x1fa>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	617b      	str	r3, [r7, #20]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 80021e2:	f107 0310 	add.w	r3, r7, #16
 80021e6:	607b      	str	r3, [r7, #4]
    return ERR_BUF;
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80021e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68f9      	ldr	r1, [r7, #12]
 80021f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021f2:	4798      	blx	r3
 80021f4:	4603      	mov	r3, r0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	08013614 	.word	0x08013614
 8002204:	08013638 	.word	0x08013638
 8002208:	08013644 	.word	0x08013644
 800220c:	0801366c 	.word	0x0801366c
 8002210:	200006f6 	.word	0x200006f6
 8002214:	08015a1c 	.word	0x08015a1c

08002218 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d002      	beq.n	8002234 <ip4_addr_isbroadcast_u32+0x1c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8002234:	2301      	movs	r3, #1
 8002236:	e02a      	b.n	800228e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8002246:	2300      	movs	r3, #0
 8002248:	e021      	b.n	800228e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	3304      	adds	r3, #4
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	429a      	cmp	r2, r3
 8002254:	d101      	bne.n	800225a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8002256:	2300      	movs	r3, #0
 8002258:	e019      	b.n	800228e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_net_eq(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	3304      	adds	r3, #4
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	405a      	eors	r2, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	3308      	adds	r3, #8
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10d      	bne.n	800228c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	3308      	adds	r3, #8
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	43da      	mvns	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	3308      	adds	r3, #8
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8002284:	429a      	cmp	r2, r3
 8002286:	d101      	bne.n	800228c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800228c:	2300      	movs	r3, #0
  }
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <ptr_to_mem+0x20>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	4413      	add	r3, r2
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	200006f8 	.word	0x200006f8

080022c0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <mem_to_ptr+0x20>)
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	b29b      	uxth	r3, r3
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	200006f8 	.word	0x200006f8

080022e4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80022ec:	4b4f      	ldr	r3, [pc, #316]	; (800242c <plug_holes+0x148>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d20b      	bcs.n	800230e <plug_holes+0x2a>
 80022f6:	4b4e      	ldr	r3, [pc, #312]	; (8002430 <plug_holes+0x14c>)
 80022f8:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 80022fc:	494d      	ldr	r1, [pc, #308]	; (8002434 <plug_holes+0x150>)
 80022fe:	484e      	ldr	r0, [pc, #312]	; (8002438 <plug_holes+0x154>)
 8002300:	f00f fffa 	bl	80122f8 <iprintf>
 8002304:	2000      	movs	r0, #0
 8002306:	f010 f8f9 	bl	80124fc <fflush>
 800230a:	f010 f83e 	bl	801238a <abort>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800230e:	4b4b      	ldr	r3, [pc, #300]	; (800243c <plug_holes+0x158>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	429a      	cmp	r2, r3
 8002316:	d30b      	bcc.n	8002330 <plug_holes+0x4c>
 8002318:	4b45      	ldr	r3, [pc, #276]	; (8002430 <plug_holes+0x14c>)
 800231a:	f240 12d3 	movw	r2, #467	; 0x1d3
 800231e:	4948      	ldr	r1, [pc, #288]	; (8002440 <plug_holes+0x15c>)
 8002320:	4845      	ldr	r0, [pc, #276]	; (8002438 <plug_holes+0x154>)
 8002322:	f00f ffe9 	bl	80122f8 <iprintf>
 8002326:	2000      	movs	r0, #0
 8002328:	f010 f8e8 	bl	80124fc <fflush>
 800232c:	f010 f82d 	bl	801238a <abort>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	791b      	ldrb	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00b      	beq.n	8002350 <plug_holes+0x6c>
 8002338:	4b3d      	ldr	r3, [pc, #244]	; (8002430 <plug_holes+0x14c>)
 800233a:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800233e:	4941      	ldr	r1, [pc, #260]	; (8002444 <plug_holes+0x160>)
 8002340:	483d      	ldr	r0, [pc, #244]	; (8002438 <plug_holes+0x154>)
 8002342:	f00f ffd9 	bl	80122f8 <iprintf>
 8002346:	2000      	movs	r0, #0
 8002348:	f010 f8d8 	bl	80124fc <fflush>
 800234c:	f010 f81d 	bl	801238a <abort>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002358:	d90b      	bls.n	8002372 <plug_holes+0x8e>
 800235a:	4b35      	ldr	r3, [pc, #212]	; (8002430 <plug_holes+0x14c>)
 800235c:	f240 12d7 	movw	r2, #471	; 0x1d7
 8002360:	4939      	ldr	r1, [pc, #228]	; (8002448 <plug_holes+0x164>)
 8002362:	4835      	ldr	r0, [pc, #212]	; (8002438 <plug_holes+0x154>)
 8002364:	f00f ffc8 	bl	80122f8 <iprintf>
 8002368:	2000      	movs	r0, #0
 800236a:	f010 f8c7 	bl	80124fc <fflush>
 800236e:	f010 f80c 	bl	801238a <abort>

  nmem = ptr_to_mem(mem->next);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ff90 	bl	800229c <ptr_to_mem>
 800237c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	429a      	cmp	r2, r3
 8002384:	d024      	beq.n	80023d0 <plug_holes+0xec>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	791b      	ldrb	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d120      	bne.n	80023d0 <plug_holes+0xec>
 800238e:	4b2b      	ldr	r3, [pc, #172]	; (800243c <plug_holes+0x158>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	429a      	cmp	r2, r3
 8002396:	d01b      	beq.n	80023d0 <plug_holes+0xec>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8002398:	4b2c      	ldr	r3, [pc, #176]	; (800244c <plug_holes+0x168>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d102      	bne.n	80023a8 <plug_holes+0xc4>
      lfree = mem;
 80023a2:	4a2a      	ldr	r2, [pc, #168]	; (800244c <plug_holes+0x168>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	881a      	ldrh	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80023b8:	d00a      	beq.n	80023d0 <plug_holes+0xec>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ff6c 	bl	800229c <ptr_to_mem>
 80023c4:	4604      	mov	r4, r0
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ff7a 	bl	80022c0 <mem_to_ptr>
 80023cc:	4603      	mov	r3, r0
 80023ce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	885b      	ldrh	r3, [r3, #2]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff61 	bl	800229c <ptr_to_mem>
 80023da:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d01f      	beq.n	8002424 <plug_holes+0x140>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	791b      	ldrb	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d11b      	bne.n	8002424 <plug_holes+0x140>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <plug_holes+0x168>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d102      	bne.n	80023fc <plug_holes+0x118>
      lfree = pmem;
 80023f6:	4a15      	ldr	r2, [pc, #84]	; (800244c <plug_holes+0x168>)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	881a      	ldrh	r2, [r3, #0]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800240c:	d00a      	beq.n	8002424 <plug_holes+0x140>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ff42 	bl	800229c <ptr_to_mem>
 8002418:	4604      	mov	r4, r0
 800241a:	68b8      	ldr	r0, [r7, #8]
 800241c:	f7ff ff50 	bl	80022c0 <mem_to_ptr>
 8002420:	4603      	mov	r3, r0
 8002422:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	bd90      	pop	{r4, r7, pc}
 800242c:	200006f8 	.word	0x200006f8
 8002430:	0801369c 	.word	0x0801369c
 8002434:	080136bc 	.word	0x080136bc
 8002438:	080136d4 	.word	0x080136d4
 800243c:	200006fc 	.word	0x200006fc
 8002440:	080136fc 	.word	0x080136fc
 8002444:	08013718 	.word	0x08013718
 8002448:	08013734 	.word	0x08013734
 800244c:	20000704 	.word	0x20000704

08002450 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8002456:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <mem_init+0x84>)
 8002458:	4a1f      	ldr	r2, [pc, #124]	; (80024d8 <mem_init+0x88>)
 800245a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800245c:	4b1d      	ldr	r3, [pc, #116]	; (80024d4 <mem_init+0x84>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002468:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8002476:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800247a:	f7ff ff0f 	bl	800229c <ptr_to_mem>
 800247e:	4602      	mov	r2, r0
 8002480:	4b16      	ldr	r3, [pc, #88]	; (80024dc <mem_init+0x8c>)
 8002482:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8002484:	4b15      	ldr	r3, [pc, #84]	; (80024dc <mem_init+0x8c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2201      	movs	r2, #1
 800248a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800248c:	4b13      	ldr	r3, [pc, #76]	; (80024dc <mem_init+0x8c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002494:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <mem_init+0x8c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800249e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <mem_init+0x84>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <mem_init+0x90>)
 80024a6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80024a8:	480e      	ldr	r0, [pc, #56]	; (80024e4 <mem_init+0x94>)
 80024aa:	f7fe fde6 	bl	800107a <sys_mutex_new>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00b      	beq.n	80024cc <mem_init+0x7c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <mem_init+0x98>)
 80024b6:	f240 2212 	movw	r2, #530	; 0x212
 80024ba:	490c      	ldr	r1, [pc, #48]	; (80024ec <mem_init+0x9c>)
 80024bc:	480c      	ldr	r0, [pc, #48]	; (80024f0 <mem_init+0xa0>)
 80024be:	f00f ff1b 	bl	80122f8 <iprintf>
 80024c2:	2000      	movs	r0, #0
 80024c4:	f010 f81a 	bl	80124fc <fflush>
 80024c8:	f00f ff5f 	bl	801238a <abort>
  }
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	200006f8 	.word	0x200006f8
 80024d8:	200008c0 	.word	0x200008c0
 80024dc:	200006fc 	.word	0x200006fc
 80024e0:	20000704 	.word	0x20000704
 80024e4:	20000700 	.word	0x20000700
 80024e8:	0801369c 	.word	0x0801369c
 80024ec:	08013760 	.word	0x08013760
 80024f0:	080136d4 	.word	0x080136d4

080024f4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff fedf 	bl	80022c0 <mem_to_ptr>
 8002502:	4603      	mov	r3, r0
 8002504:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fec6 	bl	800229c <ptr_to_mem>
 8002510:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	885b      	ldrh	r3, [r3, #2]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fec0 	bl	800229c <ptr_to_mem>
 800251c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002526:	d818      	bhi.n	800255a <mem_link_valid+0x66>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	885b      	ldrh	r3, [r3, #2]
 800252c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002530:	d813      	bhi.n	800255a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8002536:	8afa      	ldrh	r2, [r7, #22]
 8002538:	429a      	cmp	r2, r3
 800253a:	d004      	beq.n	8002546 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	8afa      	ldrh	r2, [r7, #22]
 8002542:	429a      	cmp	r2, r3
 8002544:	d109      	bne.n	800255a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <mem_link_valid+0x74>)
 8002548:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	429a      	cmp	r2, r3
 800254e:	d006      	beq.n	800255e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	885b      	ldrh	r3, [r3, #2]
 8002554:	8afa      	ldrh	r2, [r7, #22]
 8002556:	429a      	cmp	r2, r3
 8002558:	d001      	beq.n	800255e <mem_link_valid+0x6a>
    return 0;
 800255a:	2300      	movs	r3, #0
 800255c:	e000      	b.n	8002560 <mem_link_valid+0x6c>
  }
  return 1;
 800255e:	2301      	movs	r3, #1
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	200006fc 	.word	0x200006fc

0800256c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d051      	beq.n	800261e <mem_free+0xb2>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3b06      	subs	r3, #6
 800257e:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8002580:	4b29      	ldr	r3, [pc, #164]	; (8002628 <mem_free+0xbc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	429a      	cmp	r2, r3
 8002588:	d306      	bcc.n	8002598 <mem_free+0x2c>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f103 020c 	add.w	r2, r3, #12
 8002590:	4b26      	ldr	r3, [pc, #152]	; (800262c <mem_free+0xc0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d90b      	bls.n	80025b0 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <mem_free+0xc4>)
 800259a:	f240 2272 	movw	r2, #626	; 0x272
 800259e:	4925      	ldr	r1, [pc, #148]	; (8002634 <mem_free+0xc8>)
 80025a0:	4825      	ldr	r0, [pc, #148]	; (8002638 <mem_free+0xcc>)
 80025a2:	f00f fea9 	bl	80122f8 <iprintf>
 80025a6:	2000      	movs	r0, #0
 80025a8:	f00f ffa8 	bl	80124fc <fflush>
 80025ac:	f00f feed 	bl	801238a <abort>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80025b0:	4822      	ldr	r0, [pc, #136]	; (800263c <mem_free+0xd0>)
 80025b2:	f7fe fd70 	bl	8001096 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	791b      	ldrb	r3, [r3, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10b      	bne.n	80025d6 <mem_free+0x6a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80025be:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <mem_free+0xc4>)
 80025c0:	f240 227f 	movw	r2, #639	; 0x27f
 80025c4:	491e      	ldr	r1, [pc, #120]	; (8002640 <mem_free+0xd4>)
 80025c6:	481c      	ldr	r0, [pc, #112]	; (8002638 <mem_free+0xcc>)
 80025c8:	f00f fe96 	bl	80122f8 <iprintf>
 80025cc:	2000      	movs	r0, #0
 80025ce:	f00f ff95 	bl	80124fc <fflush>
 80025d2:	f00f feda 	bl	801238a <abort>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f7ff ff8c 	bl	80024f4 <mem_link_valid>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10b      	bne.n	80025fa <mem_free+0x8e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80025e2:	4b13      	ldr	r3, [pc, #76]	; (8002630 <mem_free+0xc4>)
 80025e4:	f44f 7222 	mov.w	r2, #648	; 0x288
 80025e8:	4916      	ldr	r1, [pc, #88]	; (8002644 <mem_free+0xd8>)
 80025ea:	4813      	ldr	r0, [pc, #76]	; (8002638 <mem_free+0xcc>)
 80025ec:	f00f fe84 	bl	80122f8 <iprintf>
 80025f0:	2000      	movs	r0, #0
 80025f2:	f00f ff83 	bl	80124fc <fflush>
 80025f6:	f00f fec8 	bl	801238a <abort>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <mem_free+0xdc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	429a      	cmp	r2, r3
 8002608:	d202      	bcs.n	8002610 <mem_free+0xa4>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800260a:	4a0f      	ldr	r2, [pc, #60]	; (8002648 <mem_free+0xdc>)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7ff fe67 	bl	80022e4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8002616:	4809      	ldr	r0, [pc, #36]	; (800263c <mem_free+0xd0>)
 8002618:	f7fe fd47 	bl	80010aa <sys_mutex_unlock>
 800261c:	e000      	b.n	8002620 <mem_free+0xb4>
    return;
 800261e:	bf00      	nop
}
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200006f8 	.word	0x200006f8
 800262c:	200006fc 	.word	0x200006fc
 8002630:	0801369c 	.word	0x0801369c
 8002634:	0801377c 	.word	0x0801377c
 8002638:	080136d4 	.word	0x080136d4
 800263c:	20000700 	.word	0x20000700
 8002640:	08013798 	.word	0x08013798
 8002644:	080137c0 	.word	0x080137c0
 8002648:	20000704 	.word	0x20000704

0800264c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8002658:	887b      	ldrh	r3, [r7, #2]
 800265a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800265c:	8bfb      	ldrh	r3, [r7, #30]
 800265e:	2b0b      	cmp	r3, #11
 8002660:	d801      	bhi.n	8002666 <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8002662:	230c      	movs	r3, #12
 8002664:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8002666:	8bfb      	ldrh	r3, [r7, #30]
 8002668:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800266c:	d803      	bhi.n	8002676 <mem_trim+0x2a>
 800266e:	8bfa      	ldrh	r2, [r7, #30]
 8002670:	887b      	ldrh	r3, [r7, #2]
 8002672:	429a      	cmp	r2, r3
 8002674:	d201      	bcs.n	800267a <mem_trim+0x2e>
    return NULL;
 8002676:	2300      	movs	r3, #0
 8002678:	e0ec      	b.n	8002854 <mem_trim+0x208>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800267a:	4b78      	ldr	r3, [pc, #480]	; (800285c <mem_trim+0x210>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	d304      	bcc.n	800268e <mem_trim+0x42>
 8002684:	4b76      	ldr	r3, [pc, #472]	; (8002860 <mem_trim+0x214>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	429a      	cmp	r2, r3
 800268c:	d30b      	bcc.n	80026a6 <mem_trim+0x5a>
 800268e:	4b75      	ldr	r3, [pc, #468]	; (8002864 <mem_trim+0x218>)
 8002690:	f240 22c5 	movw	r2, #709	; 0x2c5
 8002694:	4974      	ldr	r1, [pc, #464]	; (8002868 <mem_trim+0x21c>)
 8002696:	4875      	ldr	r0, [pc, #468]	; (800286c <mem_trim+0x220>)
 8002698:	f00f fe2e 	bl	80122f8 <iprintf>
 800269c:	2000      	movs	r0, #0
 800269e:	f00f ff2d 	bl	80124fc <fflush>
 80026a2:	f00f fe72 	bl	801238a <abort>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80026a6:	4b6d      	ldr	r3, [pc, #436]	; (800285c <mem_trim+0x210>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d304      	bcc.n	80026ba <mem_trim+0x6e>
 80026b0:	4b6b      	ldr	r3, [pc, #428]	; (8002860 <mem_trim+0x214>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d307      	bcc.n	80026ca <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80026ba:	f7fe fd6f 	bl	800119c <sys_arch_protect>
 80026be:	60b8      	str	r0, [r7, #8]
 80026c0:	68b8      	ldr	r0, [r7, #8]
 80026c2:	f7fe fd73 	bl	80011ac <sys_arch_unprotect>
    return rmem;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	e0c4      	b.n	8002854 <mem_trim+0x208>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3b06      	subs	r3, #6
 80026ce:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80026d0:	69b8      	ldr	r0, [r7, #24]
 80026d2:	f7ff fdf5 	bl	80022c0 <mem_to_ptr>
 80026d6:	4603      	mov	r3, r0
 80026d8:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	881a      	ldrh	r2, [r3, #0]
 80026de:	8afb      	ldrh	r3, [r7, #22]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b06      	subs	r3, #6
 80026e6:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80026e8:	8bfa      	ldrh	r2, [r7, #30]
 80026ea:	8abb      	ldrh	r3, [r7, #20]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d90b      	bls.n	8002708 <mem_trim+0xbc>
 80026f0:	4b5c      	ldr	r3, [pc, #368]	; (8002864 <mem_trim+0x218>)
 80026f2:	f240 22d7 	movw	r2, #727	; 0x2d7
 80026f6:	495e      	ldr	r1, [pc, #376]	; (8002870 <mem_trim+0x224>)
 80026f8:	485c      	ldr	r0, [pc, #368]	; (800286c <mem_trim+0x220>)
 80026fa:	f00f fdfd 	bl	80122f8 <iprintf>
 80026fe:	2000      	movs	r0, #0
 8002700:	f00f fefc 	bl	80124fc <fflush>
 8002704:	f00f fe41 	bl	801238a <abort>
  if (newsize > size) {
 8002708:	8bfa      	ldrh	r2, [r7, #30]
 800270a:	8abb      	ldrh	r3, [r7, #20]
 800270c:	429a      	cmp	r2, r3
 800270e:	d901      	bls.n	8002714 <mem_trim+0xc8>
    /* not supported */
    return NULL;
 8002710:	2300      	movs	r3, #0
 8002712:	e09f      	b.n	8002854 <mem_trim+0x208>
  }
  if (newsize == size) {
 8002714:	8bfa      	ldrh	r2, [r7, #30]
 8002716:	8abb      	ldrh	r3, [r7, #20]
 8002718:	429a      	cmp	r2, r3
 800271a:	d101      	bne.n	8002720 <mem_trim+0xd4>
    /* No change in size, simply return */
    return rmem;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	e099      	b.n	8002854 <mem_trim+0x208>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8002720:	4854      	ldr	r0, [pc, #336]	; (8002874 <mem_trim+0x228>)
 8002722:	f7fe fcb8 	bl	8001096 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fdb6 	bl	800229c <ptr_to_mem>
 8002730:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	791b      	ldrb	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d144      	bne.n	80027c4 <mem_trim+0x178>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002742:	d10b      	bne.n	800275c <mem_trim+0x110>
 8002744:	4b47      	ldr	r3, [pc, #284]	; (8002864 <mem_trim+0x218>)
 8002746:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800274a:	494b      	ldr	r1, [pc, #300]	; (8002878 <mem_trim+0x22c>)
 800274c:	4847      	ldr	r0, [pc, #284]	; (800286c <mem_trim+0x220>)
 800274e:	f00f fdd3 	bl	80122f8 <iprintf>
 8002752:	2000      	movs	r0, #0
 8002754:	f00f fed2 	bl	80124fc <fflush>
 8002758:	f00f fe17 	bl	801238a <abort>
    /* remember the old next pointer */
    next = mem2->next;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	81fb      	strh	r3, [r7, #14]
    /* create new struct mem which is moved directly after the shrunk mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8002762:	8afa      	ldrh	r2, [r7, #22]
 8002764:	8bfb      	ldrh	r3, [r7, #30]
 8002766:	4413      	add	r3, r2
 8002768:	b29b      	uxth	r3, r3
 800276a:	3306      	adds	r3, #6
 800276c:	81bb      	strh	r3, [r7, #12]
    if (lfree == mem2) {
 800276e:	4b43      	ldr	r3, [pc, #268]	; (800287c <mem_trim+0x230>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	429a      	cmp	r2, r3
 8002776:	d106      	bne.n	8002786 <mem_trim+0x13a>
      lfree = ptr_to_mem(ptr2);
 8002778:	89bb      	ldrh	r3, [r7, #12]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fd8e 	bl	800229c <ptr_to_mem>
 8002780:	4602      	mov	r2, r0
 8002782:	4b3e      	ldr	r3, [pc, #248]	; (800287c <mem_trim+0x230>)
 8002784:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8002786:	89bb      	ldrh	r3, [r7, #12]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fd87 	bl	800229c <ptr_to_mem>
 800278e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	2200      	movs	r2, #0
 8002794:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	89fa      	ldrh	r2, [r7, #14]
 800279a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	8afa      	ldrh	r2, [r7, #22]
 80027a0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	89ba      	ldrh	r2, [r7, #12]
 80027a6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80027b0:	d04c      	beq.n	800284c <mem_trim+0x200>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fd70 	bl	800229c <ptr_to_mem>
 80027bc:	4602      	mov	r2, r0
 80027be:	89bb      	ldrh	r3, [r7, #12]
 80027c0:	8053      	strh	r3, [r2, #2]
 80027c2:	e043      	b.n	800284c <mem_trim+0x200>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80027c4:	8bfb      	ldrh	r3, [r7, #30]
 80027c6:	f103 0212 	add.w	r2, r3, #18
 80027ca:	8abb      	ldrh	r3, [r7, #20]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d83d      	bhi.n	800284c <mem_trim+0x200>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80027d0:	8afa      	ldrh	r2, [r7, #22]
 80027d2:	8bfb      	ldrh	r3, [r7, #30]
 80027d4:	4413      	add	r3, r2
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3306      	adds	r3, #6
 80027da:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80027e4:	d10b      	bne.n	80027fe <mem_trim+0x1b2>
 80027e6:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <mem_trim+0x218>)
 80027e8:	f240 3209 	movw	r2, #777	; 0x309
 80027ec:	4922      	ldr	r1, [pc, #136]	; (8002878 <mem_trim+0x22c>)
 80027ee:	481f      	ldr	r0, [pc, #124]	; (800286c <mem_trim+0x220>)
 80027f0:	f00f fd82 	bl	80122f8 <iprintf>
 80027f4:	2000      	movs	r0, #0
 80027f6:	f00f fe81 	bl	80124fc <fflush>
 80027fa:	f00f fdc6 	bl	801238a <abort>
    mem2 = ptr_to_mem(ptr2);
 80027fe:	89bb      	ldrh	r3, [r7, #12]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fd4b 	bl	800229c <ptr_to_mem>
 8002806:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8002808:	4b1c      	ldr	r3, [pc, #112]	; (800287c <mem_trim+0x230>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	429a      	cmp	r2, r3
 8002810:	d202      	bcs.n	8002818 <mem_trim+0x1cc>
      lfree = mem2;
 8002812:	4a1a      	ldr	r2, [pc, #104]	; (800287c <mem_trim+0x230>)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2200      	movs	r2, #0
 800281c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	881a      	ldrh	r2, [r3, #0]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	8afa      	ldrh	r2, [r7, #22]
 800282a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	89ba      	ldrh	r2, [r7, #12]
 8002830:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800283a:	d007      	beq.n	800284c <mem_trim+0x200>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fd2b 	bl	800229c <ptr_to_mem>
 8002846:	4602      	mov	r2, r0
 8002848:	89bb      	ldrh	r3, [r7, #12]
 800284a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800284c:	4809      	ldr	r0, [pc, #36]	; (8002874 <mem_trim+0x228>)
 800284e:	f7fe fc2c 	bl	80010aa <sys_mutex_unlock>
  return rmem;
 8002852:	687b      	ldr	r3, [r7, #4]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	200006f8 	.word	0x200006f8
 8002860:	200006fc 	.word	0x200006fc
 8002864:	0801369c 	.word	0x0801369c
 8002868:	080137f4 	.word	0x080137f4
 800286c:	080136d4 	.word	0x080136d4
 8002870:	0801380c 	.word	0x0801380c
 8002874:	20000700 	.word	0x20000700
 8002878:	0801382c 	.word	0x0801382c
 800287c:	20000704 	.word	0x20000704

08002880 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <mem_malloc+0x14>
    return NULL;
 8002890:	2300      	movs	r3, #0
 8002892:	e0d3      	b.n	8002a3c <mem_malloc+0x1bc>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8002898:	8bbb      	ldrh	r3, [r7, #28]
 800289a:	2b0b      	cmp	r3, #11
 800289c:	d801      	bhi.n	80028a2 <mem_malloc+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800289e:	230c      	movs	r3, #12
 80028a0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80028a2:	8bbb      	ldrh	r3, [r7, #28]
 80028a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80028a8:	d803      	bhi.n	80028b2 <mem_malloc+0x32>
 80028aa:	8bba      	ldrh	r2, [r7, #28]
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d201      	bcs.n	80028b6 <mem_malloc+0x36>
    return NULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e0c2      	b.n	8002a3c <mem_malloc+0x1bc>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80028b6:	4863      	ldr	r0, [pc, #396]	; (8002a44 <mem_malloc+0x1c4>)
 80028b8:	f7fe fbed 	bl	8001096 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80028bc:	4b62      	ldr	r3, [pc, #392]	; (8002a48 <mem_malloc+0x1c8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fcfd 	bl	80022c0 <mem_to_ptr>
 80028c6:	4603      	mov	r3, r0
 80028c8:	83fb      	strh	r3, [r7, #30]
 80028ca:	e0ac      	b.n	8002a26 <mem_malloc+0x1a6>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80028cc:	8bfb      	ldrh	r3, [r7, #30]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fce4 	bl	800229c <ptr_to_mem>
 80028d4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	791b      	ldrb	r3, [r3, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 809c 	bne.w	8002a18 <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	8bfb      	ldrh	r3, [r7, #30]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	1f9a      	subs	r2, r3, #6
 80028ec:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80028ee:	429a      	cmp	r2, r3
 80028f0:	f0c0 8092 	bcc.w	8002a18 <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	8bfb      	ldrh	r3, [r7, #30]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	1f9a      	subs	r2, r3, #6
 8002900:	8bbb      	ldrh	r3, [r7, #28]
 8002902:	3312      	adds	r3, #18
 8002904:	429a      	cmp	r2, r3
 8002906:	d338      	bcc.n	800297a <mem_malloc+0xfa>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8002908:	8bfa      	ldrh	r2, [r7, #30]
 800290a:	8bbb      	ldrh	r3, [r7, #28]
 800290c:	4413      	add	r3, r2
 800290e:	b29b      	uxth	r3, r3
 8002910:	3306      	adds	r3, #6
 8002912:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8002914:	8a7b      	ldrh	r3, [r7, #18]
 8002916:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800291a:	d10b      	bne.n	8002934 <mem_malloc+0xb4>
 800291c:	4b4b      	ldr	r3, [pc, #300]	; (8002a4c <mem_malloc+0x1cc>)
 800291e:	f240 327a 	movw	r2, #890	; 0x37a
 8002922:	494b      	ldr	r1, [pc, #300]	; (8002a50 <mem_malloc+0x1d0>)
 8002924:	484b      	ldr	r0, [pc, #300]	; (8002a54 <mem_malloc+0x1d4>)
 8002926:	f00f fce7 	bl	80122f8 <iprintf>
 800292a:	2000      	movs	r0, #0
 800292c:	f00f fde6 	bl	80124fc <fflush>
 8002930:	f00f fd2b 	bl	801238a <abort>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8002934:	8a7b      	ldrh	r3, [r7, #18]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fcb0 	bl	800229c <ptr_to_mem>
 800293c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	881a      	ldrh	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8bfa      	ldrh	r2, [r7, #30]
 8002950:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	8a7a      	ldrh	r2, [r7, #18]
 8002956:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2201      	movs	r2, #1
 800295c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002966:	d00b      	beq.n	8002980 <mem_malloc+0x100>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fc95 	bl	800229c <ptr_to_mem>
 8002972:	4602      	mov	r2, r0
 8002974:	8a7b      	ldrh	r3, [r7, #18]
 8002976:	8053      	strh	r3, [r2, #2]
 8002978:	e002      	b.n	8002980 <mem_malloc+0x100>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2201      	movs	r2, #1
 800297e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8002980:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <mem_malloc+0x1c8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	429a      	cmp	r2, r3
 8002988:	d12c      	bne.n	80029e4 <mem_malloc+0x164>
          struct mem *cur = lfree;
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <mem_malloc+0x1c8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8002990:	e005      	b.n	800299e <mem_malloc+0x11e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fc80 	bl	800229c <ptr_to_mem>
 800299c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	791b      	ldrb	r3, [r3, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d004      	beq.n	80029b0 <mem_malloc+0x130>
 80029a6:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <mem_malloc+0x1d8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d1f0      	bne.n	8002992 <mem_malloc+0x112>
          }
          lfree = cur;
 80029b0:	4a25      	ldr	r2, [pc, #148]	; (8002a48 <mem_malloc+0x1c8>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80029b6:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <mem_malloc+0x1c8>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b27      	ldr	r3, [pc, #156]	; (8002a58 <mem_malloc+0x1d8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d010      	beq.n	80029e4 <mem_malloc+0x164>
 80029c2:	4b21      	ldr	r3, [pc, #132]	; (8002a48 <mem_malloc+0x1c8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	791b      	ldrb	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00b      	beq.n	80029e4 <mem_malloc+0x164>
 80029cc:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <mem_malloc+0x1cc>)
 80029ce:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80029d2:	4922      	ldr	r1, [pc, #136]	; (8002a5c <mem_malloc+0x1dc>)
 80029d4:	481f      	ldr	r0, [pc, #124]	; (8002a54 <mem_malloc+0x1d4>)
 80029d6:	f00f fc8f 	bl	80122f8 <iprintf>
 80029da:	2000      	movs	r0, #0
 80029dc:	f00f fd8e 	bl	80124fc <fflush>
 80029e0:	f00f fcd3 	bl	801238a <abort>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80029e4:	4817      	ldr	r0, [pc, #92]	; (8002a44 <mem_malloc+0x1c4>)
 80029e6:	f7fe fb60 	bl	80010aa <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80029ea:	8bba      	ldrh	r2, [r7, #28]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	4413      	add	r3, r2
 80029f0:	3306      	adds	r3, #6
 80029f2:	4a19      	ldr	r2, [pc, #100]	; (8002a58 <mem_malloc+0x1d8>)
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d90b      	bls.n	8002a12 <mem_malloc+0x192>
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <mem_malloc+0x1cc>)
 80029fc:	f240 32ad 	movw	r2, #941	; 0x3ad
 8002a00:	4917      	ldr	r1, [pc, #92]	; (8002a60 <mem_malloc+0x1e0>)
 8002a02:	4814      	ldr	r0, [pc, #80]	; (8002a54 <mem_malloc+0x1d4>)
 8002a04:	f00f fc78 	bl	80122f8 <iprintf>
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f00f fd77 	bl	80124fc <fflush>
 8002a0e:	f00f fcbc 	bl	801238a <abort>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3306      	adds	r3, #6
 8002a16:	e011      	b.n	8002a3c <mem_malloc+0x1bc>
         ptr = ptr_to_mem(ptr)->next) {
 8002a18:	8bfb      	ldrh	r3, [r7, #30]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fc3e 	bl	800229c <ptr_to_mem>
 8002a20:	4603      	mov	r3, r0
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8002a26:	8bfa      	ldrh	r2, [r7, #30]
 8002a28:	8bbb      	ldrh	r3, [r7, #28]
 8002a2a:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	f4ff af4c 	bcc.w	80028cc <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8002a34:	4803      	ldr	r0, [pc, #12]	; (8002a44 <mem_malloc+0x1c4>)
 8002a36:	f7fe fb38 	bl	80010aa <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000700 	.word	0x20000700
 8002a48:	20000704 	.word	0x20000704
 8002a4c:	0801369c 	.word	0x0801369c
 8002a50:	0801382c 	.word	0x0801382c
 8002a54:	080136d4 	.word	0x080136d4
 8002a58:	200006fc 	.word	0x200006fc
 8002a5c:	08013840 	.word	0x08013840
 8002a60:	0801385c 	.word	0x0801385c

08002a64 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	e011      	b.n	8002aa4 <memp_init_pool+0x40>
    memp->next = *desc->tab;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	889b      	ldrh	r3, [r3, #4]
 8002a96:	461a      	mov	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	88db      	ldrh	r3, [r3, #6]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	dce7      	bgt.n	8002a80 <memp_init_pool+0x1c>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	80fb      	strh	r3, [r7, #6]
 8002ac6:	e009      	b.n	8002adc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	4a08      	ldr	r2, [pc, #32]	; (8002aec <memp_init+0x30>)
 8002acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ffc7 	bl	8002a64 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	80fb      	strh	r3, [r7, #6]
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	2b09      	cmp	r3, #9
 8002ae0:	d9f2      	bls.n	8002ac8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	08015ac4 	.word	0x08015ac4

08002af0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8002af8:	f7fe fb50 	bl	800119c <sys_arch_protect>
 8002afc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d009      	beq.n	8002b20 <do_memp_malloc_pool+0x30>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	601a      	str	r2, [r3, #0]
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f7fe fb48 	bl	80011ac <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	e003      	b.n	8002b28 <do_memp_malloc_pool+0x38>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f7fe fb43 	bl	80011ac <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10b      	bne.n	8002b56 <memp_malloc_pool+0x26>
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <memp_malloc_pool+0x40>)
 8002b40:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8002b44:	490b      	ldr	r1, [pc, #44]	; (8002b74 <memp_malloc_pool+0x44>)
 8002b46:	480c      	ldr	r0, [pc, #48]	; (8002b78 <memp_malloc_pool+0x48>)
 8002b48:	f00f fbd6 	bl	80122f8 <iprintf>
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f00f fcd5 	bl	80124fc <fflush>
 8002b52:	f00f fc1a 	bl	801238a <abort>
  if (desc == NULL) {
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <memp_malloc_pool+0x30>
    return NULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e003      	b.n	8002b68 <memp_malloc_pool+0x38>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff ffc5 	bl	8002af0 <do_memp_malloc_pool>
 8002b66:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	08013904 	.word	0x08013904
 8002b74:	08013924 	.word	0x08013924
 8002b78:	08013938 	.word	0x08013938

08002b7c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	2b09      	cmp	r3, #9
 8002b8a:	d908      	bls.n	8002b9e <memp_malloc+0x22>
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <memp_malloc+0x3c>)
 8002b8e:	f240 1257 	movw	r2, #343	; 0x157
 8002b92:	490a      	ldr	r1, [pc, #40]	; (8002bbc <memp_malloc+0x40>)
 8002b94:	480a      	ldr	r0, [pc, #40]	; (8002bc0 <memp_malloc+0x44>)
 8002b96:	f7fe fac8 	bl	800112a <lwip_win32_platform_diag>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e008      	b.n	8002bb0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	4a08      	ldr	r2, [pc, #32]	; (8002bc4 <memp_malloc+0x48>)
 8002ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff ffa2 	bl	8002af0 <do_memp_malloc_pool>
 8002bac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8002bae:	68fb      	ldr	r3, [r7, #12]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	08013904 	.word	0x08013904
 8002bbc:	08013960 	.word	0x08013960
 8002bc0:	08013938 	.word	0x08013938
 8002bc4:	08015ac4 	.word	0x08015ac4

08002bc8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8002bd6:	f7fe fae1 	bl	800119c <sys_arch_protect>
 8002bda:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8002bee:	68b8      	ldr	r0, [r7, #8]
 8002bf0:	f7fe fadc 	bl	80011ac <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8002bf4:	bf00      	nop
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10b      	bne.n	8002c24 <memp_free_pool+0x28>
 8002c0c:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <memp_free_pool+0x48>)
 8002c0e:	f240 1295 	movw	r2, #405	; 0x195
 8002c12:	490d      	ldr	r1, [pc, #52]	; (8002c48 <memp_free_pool+0x4c>)
 8002c14:	480d      	ldr	r0, [pc, #52]	; (8002c4c <memp_free_pool+0x50>)
 8002c16:	f00f fb6f 	bl	80122f8 <iprintf>
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f00f fc6e 	bl	80124fc <fflush>
 8002c20:	f00f fbb3 	bl	801238a <abort>
  if ((desc == NULL) || (mem == NULL)) {
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d007      	beq.n	8002c3a <memp_free_pool+0x3e>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d004      	beq.n	8002c3a <memp_free_pool+0x3e>
    return;
  }

  do_memp_free_pool(desc, mem);
 8002c30:	6839      	ldr	r1, [r7, #0]
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ffc8 	bl	8002bc8 <do_memp_free_pool>
 8002c38:	e000      	b.n	8002c3c <memp_free_pool+0x40>
    return;
 8002c3a:	bf00      	nop
}
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	08013904 	.word	0x08013904
 8002c48:	08013924 	.word	0x08013924
 8002c4c:	08013938 	.word	0x08013938

08002c50 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	2b09      	cmp	r3, #9
 8002c60:	d907      	bls.n	8002c72 <memp_free+0x22>
 8002c62:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <memp_free+0x44>)
 8002c64:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8002c68:	490b      	ldr	r1, [pc, #44]	; (8002c98 <memp_free+0x48>)
 8002c6a:	480c      	ldr	r0, [pc, #48]	; (8002c9c <memp_free+0x4c>)
 8002c6c:	f7fe fa5d 	bl	800112a <lwip_win32_platform_diag>
 8002c70:	e00c      	b.n	8002c8c <memp_free+0x3c>

  if (mem == NULL) {
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <memp_free+0x50>)
 8002c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c80:	6839      	ldr	r1, [r7, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff ffa0 	bl	8002bc8 <do_memp_free_pool>
 8002c88:	e000      	b.n	8002c8c <memp_free+0x3c>
    return;
 8002c8a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	08013904 	.word	0x08013904
 8002c98:	08013980 	.word	0x08013980
 8002c9c:	08013938 	.word	0x08013938
 8002ca0:	08015ac4 	.word	0x08015ac4

08002ca4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d108      	bne.n	8002cda <netif_add+0x26>
 8002cc8:	4b5b      	ldr	r3, [pc, #364]	; (8002e38 <netif_add+0x184>)
 8002cca:	f44f 7299 	mov.w	r2, #306	; 0x132
 8002cce:	495b      	ldr	r1, [pc, #364]	; (8002e3c <netif_add+0x188>)
 8002cd0:	485b      	ldr	r0, [pc, #364]	; (8002e40 <netif_add+0x18c>)
 8002cd2:	f7fe fa2a 	bl	800112a <lwip_win32_platform_diag>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e0a9      	b.n	8002e2e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d108      	bne.n	8002cf2 <netif_add+0x3e>
 8002ce0:	4b55      	ldr	r3, [pc, #340]	; (8002e38 <netif_add+0x184>)
 8002ce2:	f240 1233 	movw	r2, #307	; 0x133
 8002ce6:	4957      	ldr	r1, [pc, #348]	; (8002e44 <netif_add+0x190>)
 8002ce8:	4855      	ldr	r0, [pc, #340]	; (8002e40 <netif_add+0x18c>)
 8002cea:	f7fe fa1e 	bl	800112a <lwip_win32_platform_diag>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e09d      	b.n	8002e2e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8002cf8:	4b53      	ldr	r3, [pc, #332]	; (8002e48 <netif_add+0x194>)
 8002cfa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8002d02:	4b51      	ldr	r3, [pc, #324]	; (8002e48 <netif_add+0x194>)
 8002d04:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8002d0c:	4b4e      	ldr	r3, [pc, #312]	; (8002e48 <netif_add+0x194>)
 8002d0e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4a49      	ldr	r2, [pc, #292]	; (8002e4c <netif_add+0x198>)
 8002d26:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */

  /* remember netif specific state information data */
  netif->state = state;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a3a      	ldr	r2, [r7, #32]
 8002d3a:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8002d3c:	4b44      	ldr	r3, [pc, #272]	; (8002e50 <netif_add+0x19c>)
 8002d3e:	781a      	ldrb	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d4a:	611a      	str	r2, [r3, #16]
  netif->reschedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
#endif /* ENABLE_LOOPBACK */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f924 	bl	8002fa0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	4798      	blx	r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <netif_add+0xb4>
    return NULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	e062      	b.n	8002e2e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002d6e:	2bff      	cmp	r3, #255	; 0xff
 8002d70:	d103      	bne.n	8002d7a <netif_add+0xc6>
        netif->num = 0;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8002d7e:	4b35      	ldr	r3, [pc, #212]	; (8002e54 <netif_add+0x1a0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	e035      	b.n	8002df2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d10b      	bne.n	8002da6 <netif_add+0xf2>
 8002d8e:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <netif_add+0x184>)
 8002d90:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8002d94:	4930      	ldr	r1, [pc, #192]	; (8002e58 <netif_add+0x1a4>)
 8002d96:	482a      	ldr	r0, [pc, #168]	; (8002e40 <netif_add+0x18c>)
 8002d98:	f00f faae 	bl	80122f8 <iprintf>
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f00f fbad 	bl	80124fc <fflush>
 8002da2:	f00f faf2 	bl	801238a <abort>
        num_netifs++;
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	3301      	adds	r3, #1
 8002daa:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2bff      	cmp	r3, #255	; 0xff
 8002db0:	dd0b      	ble.n	8002dca <netif_add+0x116>
 8002db2:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <netif_add+0x184>)
 8002db4:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8002db8:	4928      	ldr	r1, [pc, #160]	; (8002e5c <netif_add+0x1a8>)
 8002dba:	4821      	ldr	r0, [pc, #132]	; (8002e40 <netif_add+0x18c>)
 8002dbc:	f00f fa9c 	bl	80122f8 <iprintf>
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f00f fb9b 	bl	80124fc <fflush>
 8002dc6:	f00f fae0 	bl	801238a <abort>
        if (netif2->num == netif->num) {
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d108      	bne.n	8002dec <netif_add+0x138>
          netif->num++;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002de0:	3301      	adds	r3, #1
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 8002dea:	e005      	b.n	8002df8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1c6      	bne.n	8002d86 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1b4      	bne.n	8002d68 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002e04:	2bfe      	cmp	r3, #254	; 0xfe
 8002e06:	d103      	bne.n	8002e10 <netif_add+0x15c>
    netif_num = 0;
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <netif_add+0x19c>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e006      	b.n	8002e1e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002e16:	3301      	adds	r3, #1
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <netif_add+0x19c>)
 8002e1c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <netif_add+0x1a0>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8002e26:	4a0b      	ldr	r2, [pc, #44]	; (8002e54 <netif_add+0x1a0>)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	0801399c 	.word	0x0801399c
 8002e3c:	08013a1c 	.word	0x08013a1c
 8002e40:	080139d8 	.word	0x080139d8
 8002e44:	08013a38 	.word	0x08013a38
 8002e48:	08015a1c 	.word	0x08015a1c
 8002e4c:	080031b9 	.word	0x080031b9
 8002e50:	20000730 	.word	0x20000730
 8002e54:	200018d4 	.word	0x200018d4
 8002e58:	08013a5c 	.word	0x08013a5c
 8002e5c:	08013a70 	.word	0x08013a70

08002e60 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8002e6a:	6839      	ldr	r1, [r7, #0]
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f002 fc13 	bl	8005698 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10b      	bne.n	8002ea6 <netif_do_set_ipaddr+0x2a>
 8002e8e:	4b22      	ldr	r3, [pc, #136]	; (8002f18 <netif_do_set_ipaddr+0x9c>)
 8002e90:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002e94:	4921      	ldr	r1, [pc, #132]	; (8002f1c <netif_do_set_ipaddr+0xa0>)
 8002e96:	4822      	ldr	r0, [pc, #136]	; (8002f20 <netif_do_set_ipaddr+0xa4>)
 8002e98:	f00f fa2e 	bl	80122f8 <iprintf>
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f00f fb2d 	bl	80124fc <fflush>
 8002ea2:	f00f fa72 	bl	801238a <abort>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10b      	bne.n	8002ec4 <netif_do_set_ipaddr+0x48>
 8002eac:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <netif_do_set_ipaddr+0x9c>)
 8002eae:	f240 12dd 	movw	r2, #477	; 0x1dd
 8002eb2:	491a      	ldr	r1, [pc, #104]	; (8002f1c <netif_do_set_ipaddr+0xa0>)
 8002eb4:	481a      	ldr	r0, [pc, #104]	; (8002f20 <netif_do_set_ipaddr+0xa4>)
 8002eb6:	f00f fa1f 	bl	80122f8 <iprintf>
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f00f fb1e 	bl	80124fc <fflush>
 8002ec0:	f00f fa63 	bl	801238a <abort>

  /* address is actually being changed? */
  if (ip4_addr_eq(ipaddr, netif_ip4_addr(netif)) == 0) {
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d01c      	beq.n	8002f0c <netif_do_set_ipaddr+0x90>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3304      	adds	r3, #4
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8002ee2:	f107 0314 	add.w	r3, r7, #20
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff ffb9 	bl	8002e60 <netif_do_ip_addr_changed>
#endif /* LWIP_ACD */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <netif_do_set_ipaddr+0x7e>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	e000      	b.n	8002efc <netif_do_set_ipaddr+0x80>
 8002efa:	2300      	movs	r3, #0
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8002f00:	2101      	movs	r1, #1
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f8d2 	bl	80030ac <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <netif_do_set_ipaddr+0x92>
  }
  return 0; /* address unchanged */
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	0801399c 	.word	0x0801399c
 8002f1c:	08013aa0 	.word	0x08013aa0
 8002f20:	080139d8 	.word	0x080139d8

08002f24 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(netmask, netif_ip4_netmask(netif)) == 0) {
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	3308      	adds	r3, #8
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d00a      	beq.n	8002f54 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <netif_do_set_netmask+0x26>
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	e000      	b.n	8002f4c <netif_do_set_netmask+0x28>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b085      	sub	sp, #20
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(gw, netif_ip4_gw(netif)) == 0) {
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	330c      	adds	r3, #12
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d00a      	beq.n	8002f92 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <netif_do_set_gw+0x26>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	e000      	b.n	8002f8a <netif_do_set_gw+0x28>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8002fbc:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <netif_set_addr+0x90>)
 8002fbe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8002fc6:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <netif_set_addr+0x90>)
 8002fc8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8002fd0:	4b17      	ldr	r3, [pc, #92]	; (8003030 <netif_set_addr+0x90>)
 8002fd2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <netif_set_addr+0x42>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <netif_set_addr+0x46>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <netif_set_addr+0x48>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d006      	beq.n	8002ffe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8002ff0:	f107 0310 	add.w	r3, r7, #16
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7ff ff3f 	bl	8002e7c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f7ff ff8e 	bl	8002f24 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	6839      	ldr	r1, [r7, #0]
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f7ff ffa8 	bl	8002f62 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d106      	bne.n	8003026 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8003018:	f107 0310 	add.w	r3, r7, #16
 800301c:	461a      	mov	r2, r3
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7ff ff2b 	bl	8002e7c <netif_do_set_ipaddr>
  }
  if (change_reason != LWIP_NSC_NONE) {
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8003026:	bf00      	nop
 8003028:	3720      	adds	r7, #32
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	08015a1c 	.word	0x08015a1c

08003034 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800303c:	4a04      	ldr	r2, [pc, #16]	; (8003050 <netif_set_default+0x1c>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	200018d8 	.word	0x200018d8

08003054 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d107      	bne.n	8003072 <netif_set_up+0x1e>
 8003062:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <netif_set_up+0x4c>)
 8003064:	f240 326b 	movw	r2, #875	; 0x36b
 8003068:	490e      	ldr	r1, [pc, #56]	; (80030a4 <netif_set_up+0x50>)
 800306a:	480f      	ldr	r0, [pc, #60]	; (80030a8 <netif_set_up+0x54>)
 800306c:	f7fe f85d 	bl	800112a <lwip_win32_platform_diag>
 8003070:	e013      	b.n	800309a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10c      	bne.n	800309a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	b2da      	uxtb	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8003092:	2103      	movs	r1, #3
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f809 	bl	80030ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	0801399c 	.word	0x0801399c
 80030a4:	08013b10 	.word	0x08013b10
 80030a8:	080139d8 	.word	0x080139d8

080030ac <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <netif_issue_reports+0x2a>
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <netif_issue_reports+0x58>)
 80030c0:	f44f 7262 	mov.w	r2, #904	; 0x388
 80030c4:	4910      	ldr	r1, [pc, #64]	; (8003108 <netif_issue_reports+0x5c>)
 80030c6:	4811      	ldr	r0, [pc, #68]	; (800310c <netif_issue_reports+0x60>)
 80030c8:	f00f f916 	bl	80122f8 <iprintf>
 80030cc:	2000      	movs	r0, #0
 80030ce:	f00f fa15 	bl	80124fc <fflush>
 80030d2:	f00f f95a 	bl	801238a <abort>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00b      	beq.n	80030fc <netif_issue_reports+0x50>
      !(netif->flags & NETIF_FLAG_UP)) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80030ea:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d004      	beq.n	80030fc <netif_issue_reports+0x50>
    return;
  }
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	e000      	b.n	80030fe <netif_issue_reports+0x52>
    return;
 80030fc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	0801399c 	.word	0x0801399c
 8003108:	08013b2c 	.word	0x08013b2c
 800310c:	080139d8 	.word	0x080139d8

08003110 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d107      	bne.n	800312e <netif_set_link_up+0x1e>
 800311e:	4b0f      	ldr	r3, [pc, #60]	; (800315c <netif_set_link_up+0x4c>)
 8003120:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8003124:	490e      	ldr	r1, [pc, #56]	; (8003160 <netif_set_link_up+0x50>)
 8003126:	480f      	ldr	r0, [pc, #60]	; (8003164 <netif_set_link_up+0x54>)
 8003128:	f7fd ffff 	bl	800112a <lwip_win32_platform_diag>
 800312c:	e013      	b.n	8003156 <netif_set_link_up+0x46>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10c      	bne.n	8003156 <netif_set_link_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003142:	f043 0304 	orr.w	r3, r3, #4
 8003146:	b2da      	uxtb	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

#if LWIP_AUTOIP
    autoip_network_changed_link_up(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800314e:	2103      	movs	r1, #3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ffab 	bl	80030ac <netif_issue_reports>
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	0801399c 	.word	0x0801399c
 8003160:	08013b70 	.word	0x08013b70
 8003164:	080139d8 	.word	0x080139d8

08003168 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d107      	bne.n	8003186 <netif_set_link_down+0x1e>
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <netif_set_link_down+0x44>)
 8003178:	f240 4223 	movw	r2, #1059	; 0x423
 800317c:	490c      	ldr	r1, [pc, #48]	; (80031b0 <netif_set_link_down+0x48>)
 800317e:	480d      	ldr	r0, [pc, #52]	; (80031b4 <netif_set_link_down+0x4c>)
 8003180:	f7fd ffd3 	bl	800112a <lwip_win32_platform_diag>
 8003184:	e00f      	b.n	80031a6 <netif_set_link_down+0x3e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <netif_set_link_down+0x3e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800319a:	f023 0304 	bic.w	r3, r3, #4
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	0801399c 	.word	0x0801399c
 80031b0:	08013b94 	.word	0x08013b94
 80031b4:	080139d8 	.word	0x080139d8

080031b8 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80031c4:	f06f 030b 	mvn.w	r3, #11
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80031e4:	4b0d      	ldr	r3, [pc, #52]	; (800321c <netif_get_by_index+0x48>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	e00c      	b.n	8003206 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80031f2:	3301      	adds	r3, #1
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	79fa      	ldrb	r2, [r7, #7]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d101      	bne.n	8003200 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	e006      	b.n	800320e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1ef      	bne.n	80031ec <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	200018d4 	.word	0x200018d4

08003220 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8003226:	f7fd ffb9 	bl	800119c <sys_arch_protect>
 800322a:	6038      	str	r0, [r7, #0]
 800322c:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <pbuf_free_ooseq+0x44>)
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	6838      	ldr	r0, [r7, #0]
 8003234:	f7fd ffba 	bl	80011ac <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <pbuf_free_ooseq+0x48>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	607b      	str	r3, [r7, #4]
 800323e:	e00a      	b.n	8003256 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f002 fa63 	bl	8005714 <tcp_free_ooseq>
      return;
 800324e:	e005      	b.n	800325c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	607b      	str	r3, [r7, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f1      	bne.n	8003240 <pbuf_free_ooseq+0x20>
    }
  }
}
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	200018dc 	.word	0x200018dc
 8003268:	200018e4 	.word	0x200018e4

0800326c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8003274:	f7ff ffd4 	bl	8003220 <pbuf_free_ooseq>
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8003286:	f7fd ff89 	bl	800119c <sys_arch_protect>
 800328a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800328c:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <pbuf_pool_is_empty+0x4c>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <pbuf_pool_is_empty+0x4c>)
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7fd ff87 	bl	80011ac <sys_arch_unprotect>

  if (!queued) {
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10f      	bne.n	80032c4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80032a4:	2100      	movs	r1, #0
 80032a6:	480a      	ldr	r0, [pc, #40]	; (80032d0 <pbuf_pool_is_empty+0x50>)
 80032a8:	f7fe f8c2 	bl	8001430 <tcpip_try_callback>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <pbuf_pool_is_empty+0x44>
 80032b2:	f7fd ff73 	bl	800119c <sys_arch_protect>
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	4b04      	ldr	r3, [pc, #16]	; (80032cc <pbuf_pool_is_empty+0x4c>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fd ff74 	bl	80011ac <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	200018dc 	.word	0x200018dc
 80032d0:	0800326d 	.word	0x0800326d

080032d4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	4611      	mov	r1, r2
 80032e0:	461a      	mov	r2, r3
 80032e2:	460b      	mov	r3, r1
 80032e4:	80fb      	strh	r3, [r7, #6]
 80032e6:	4613      	mov	r3, r2
 80032e8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	88fa      	ldrh	r2, [r7, #6]
 80032fa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	88ba      	ldrh	r2, [r7, #4]
 8003300:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8003302:	8b3b      	ldrh	r3, [r7, #24]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	7f3a      	ldrb	r2, [r7, #28]
 800330e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2201      	movs	r2, #1
 8003314:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	73da      	strb	r2, [r3, #15]

  LWIP_PBUF_CUSTOM_DATA_INIT(p);
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08c      	sub	sp, #48	; 0x30
 800332c:	af02      	add	r7, sp, #8
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
 8003332:	460b      	mov	r3, r1
 8003334:	80bb      	strh	r3, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800333e:	887b      	ldrh	r3, [r7, #2]
 8003340:	2b41      	cmp	r3, #65	; 0x41
 8003342:	d00b      	beq.n	800335c <pbuf_alloc+0x34>
 8003344:	2b41      	cmp	r3, #65	; 0x41
 8003346:	dc02      	bgt.n	800334e <pbuf_alloc+0x26>
 8003348:	2b01      	cmp	r3, #1
 800334a:	d007      	beq.n	800335c <pbuf_alloc+0x34>
 800334c:	e08b      	b.n	8003466 <pbuf_alloc+0x13e>
 800334e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8003352:	d00b      	beq.n	800336c <pbuf_alloc+0x44>
 8003354:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8003358:	d05b      	beq.n	8003412 <pbuf_alloc+0xea>
 800335a:	e084      	b.n	8003466 <pbuf_alloc+0x13e>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800335c:	887a      	ldrh	r2, [r7, #2]
 800335e:	88bb      	ldrh	r3, [r7, #4]
 8003360:	4619      	mov	r1, r3
 8003362:	2000      	movs	r0, #0
 8003364:	f000 f898 	bl	8003498 <pbuf_alloc_reference>
 8003368:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800336a:	e088      	b.n	800347e <pbuf_alloc+0x156>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800336c:	2300      	movs	r3, #0
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8003370:	2300      	movs	r3, #0
 8003372:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8003374:	88bb      	ldrh	r3, [r7, #4]
 8003376:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8003378:	2009      	movs	r0, #9
 800337a:	f7ff fbff 	bl	8002b7c <memp_malloc>
 800337e:	6178      	str	r0, [r7, #20]
        if (q == NULL) {
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8003386:	f7ff ff7b 	bl	8003280 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <pbuf_alloc+0x6e>
            pbuf_free(p);
 8003390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003392:	f000 fa67 	bl	8003864 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	e072      	b.n	8003480 <pbuf_alloc+0x158>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800339a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800339c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	8b7b      	ldrh	r3, [r7, #26]
 80033a4:	4293      	cmp	r3, r2
 80033a6:	bf28      	it	cs
 80033a8:	4613      	movcs	r3, r2
 80033aa:	827b      	strh	r3, [r7, #18]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80033ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033ae:	3310      	adds	r3, #16
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	18d1      	adds	r1, r2, r3
 80033b4:	8a78      	ldrh	r0, [r7, #18]
 80033b6:	8b7a      	ldrh	r2, [r7, #26]
 80033b8:	2300      	movs	r3, #0
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	887b      	ldrh	r3, [r7, #2]
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	4603      	mov	r3, r0
 80033c2:	6978      	ldr	r0, [r7, #20]
 80033c4:	f7ff ff86 	bl	80032d4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80033c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ce:	d10b      	bne.n	80033e8 <pbuf_alloc+0xc0>
 80033d0:	4b2d      	ldr	r3, [pc, #180]	; (8003488 <pbuf_alloc+0x160>)
 80033d2:	f240 1205 	movw	r2, #261	; 0x105
 80033d6:	492d      	ldr	r1, [pc, #180]	; (800348c <pbuf_alloc+0x164>)
 80033d8:	482d      	ldr	r0, [pc, #180]	; (8003490 <pbuf_alloc+0x168>)
 80033da:	f00e ff8d 	bl	80122f8 <iprintf>
 80033de:	2000      	movs	r0, #0
 80033e0:	f00f f88c 	bl	80124fc <fflush>
 80033e4:	f00e ffd1 	bl	801238a <abort>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <pbuf_alloc+0xcc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
 80033f2:	e002      	b.n	80033fa <pbuf_alloc+0xd2>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80033fe:	8b7a      	ldrh	r2, [r7, #26]
 8003400:	8a7b      	ldrh	r3, [r7, #18]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800340a:	8b7b      	ldrh	r3, [r7, #26]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1b3      	bne.n	8003378 <pbuf_alloc+0x50>
      break;
 8003410:	e035      	b.n	800347e <pbuf_alloc+0x156>
    }
    case PBUF_RAM: {
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8003412:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003414:	88bb      	ldrh	r3, [r7, #4]
 8003416:	4413      	add	r3, r2
 8003418:	823b      	strh	r3, [r7, #16]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800341a:	8a3b      	ldrh	r3, [r7, #16]
 800341c:	3310      	adds	r3, #16
 800341e:	81fb      	strh	r3, [r7, #14]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8003420:	8a3a      	ldrh	r2, [r7, #16]
 8003422:	88bb      	ldrh	r3, [r7, #4]
 8003424:	429a      	cmp	r2, r3
 8003426:	d303      	bcc.n	8003430 <pbuf_alloc+0x108>
 8003428:	89fa      	ldrh	r2, [r7, #14]
 800342a:	88bb      	ldrh	r3, [r7, #4]
 800342c:	429a      	cmp	r2, r3
 800342e:	d201      	bcs.n	8003434 <pbuf_alloc+0x10c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
        return NULL;
 8003430:	2300      	movs	r3, #0
 8003432:	e025      	b.n	8003480 <pbuf_alloc+0x158>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8003434:	89fb      	ldrh	r3, [r7, #14]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff fa22 	bl	8002880 <mem_malloc>
 800343c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <pbuf_alloc+0x120>
        return NULL;
 8003444:	2300      	movs	r3, #0
 8003446:	e01b      	b.n	8003480 <pbuf_alloc+0x158>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8003448:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800344a:	3310      	adds	r3, #16
 800344c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344e:	18d1      	adds	r1, r2, r3
 8003450:	88b8      	ldrh	r0, [r7, #4]
 8003452:	88ba      	ldrh	r2, [r7, #4]
 8003454:	2300      	movs	r3, #0
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	887b      	ldrh	r3, [r7, #2]
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	4603      	mov	r3, r0
 800345e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003460:	f7ff ff38 	bl	80032d4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8003464:	e00b      	b.n	800347e <pbuf_alloc+0x156>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <pbuf_alloc+0x160>)
 8003468:	f240 1229 	movw	r2, #297	; 0x129
 800346c:	4909      	ldr	r1, [pc, #36]	; (8003494 <pbuf_alloc+0x16c>)
 800346e:	4808      	ldr	r0, [pc, #32]	; (8003490 <pbuf_alloc+0x168>)
 8003470:	f00e ff42 	bl	80122f8 <iprintf>
 8003474:	2000      	movs	r0, #0
 8003476:	f00f f841 	bl	80124fc <fflush>
 800347a:	f00e ff86 	bl	801238a <abort>
      return NULL;
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003480:	4618      	mov	r0, r3
 8003482:	3728      	adds	r7, #40	; 0x28
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	08013bb8 	.word	0x08013bb8
 800348c:	08013bd8 	.word	0x08013bd8
 8003490:	08013c0c 	.word	0x08013c0c
 8003494:	08013c34 	.word	0x08013c34

08003498 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af02      	add	r7, sp, #8
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]
 80034a4:	4613      	mov	r3, r2
 80034a6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80034a8:	883b      	ldrh	r3, [r7, #0]
 80034aa:	2b41      	cmp	r3, #65	; 0x41
 80034ac:	d00e      	beq.n	80034cc <pbuf_alloc_reference+0x34>
 80034ae:	883b      	ldrh	r3, [r7, #0]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d00b      	beq.n	80034cc <pbuf_alloc_reference+0x34>
 80034b4:	4b12      	ldr	r3, [pc, #72]	; (8003500 <pbuf_alloc_reference+0x68>)
 80034b6:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80034ba:	4912      	ldr	r1, [pc, #72]	; (8003504 <pbuf_alloc_reference+0x6c>)
 80034bc:	4812      	ldr	r0, [pc, #72]	; (8003508 <pbuf_alloc_reference+0x70>)
 80034be:	f00e ff1b 	bl	80122f8 <iprintf>
 80034c2:	2000      	movs	r0, #0
 80034c4:	f00f f81a 	bl	80124fc <fflush>
 80034c8:	f00e ff5f 	bl	801238a <abort>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80034cc:	2008      	movs	r0, #8
 80034ce:	f7ff fb55 	bl	8002b7c <memp_malloc>
 80034d2:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <pbuf_alloc_reference+0x46>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	e00b      	b.n	80034f6 <pbuf_alloc_reference+0x5e>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80034de:	8879      	ldrh	r1, [r7, #2]
 80034e0:	887a      	ldrh	r2, [r7, #2]
 80034e2:	2300      	movs	r3, #0
 80034e4:	9301      	str	r3, [sp, #4]
 80034e6:	883b      	ldrh	r3, [r7, #0]
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	460b      	mov	r3, r1
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f7ff fef0 	bl	80032d4 <pbuf_init_alloced_pbuf>
  return p;
 80034f4:	68fb      	ldr	r3, [r7, #12]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	08013bb8 	.word	0x08013bb8
 8003504:	08013c50 	.word	0x08013c50
 8003508:	08013c0c 	.word	0x08013c0c

0800350c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10b      	bne.n	8003536 <pbuf_realloc+0x2a>
 800351e:	4b47      	ldr	r3, [pc, #284]	; (800363c <pbuf_realloc+0x130>)
 8003520:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8003524:	4946      	ldr	r1, [pc, #280]	; (8003640 <pbuf_realloc+0x134>)
 8003526:	4847      	ldr	r0, [pc, #284]	; (8003644 <pbuf_realloc+0x138>)
 8003528:	f00e fee6 	bl	80122f8 <iprintf>
 800352c:	2000      	movs	r0, #0
 800352e:	f00e ffe5 	bl	80124fc <fflush>
 8003532:	f00e ff2a 	bl	801238a <abort>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	891b      	ldrh	r3, [r3, #8]
 800353a:	887a      	ldrh	r2, [r7, #2]
 800353c:	429a      	cmp	r2, r3
 800353e:	d278      	bcs.n	8003632 <pbuf_realloc+0x126>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	891a      	ldrh	r2, [r3, #8]
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	823b      	strh	r3, [r7, #16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800354a:	887b      	ldrh	r3, [r7, #2]
 800354c:	827b      	strh	r3, [r7, #18]
  q = p;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8003552:	e01d      	b.n	8003590 <pbuf_realloc+0x84>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	895b      	ldrh	r3, [r3, #10]
 8003558:	8a7a      	ldrh	r2, [r7, #18]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	891a      	ldrh	r2, [r3, #8]
 8003562:	8a3b      	ldrh	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	b29a      	uxth	r2, r3
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <pbuf_realloc+0x84>
 8003578:	4b30      	ldr	r3, [pc, #192]	; (800363c <pbuf_realloc+0x130>)
 800357a:	f240 12b1 	movw	r2, #433	; 0x1b1
 800357e:	4932      	ldr	r1, [pc, #200]	; (8003648 <pbuf_realloc+0x13c>)
 8003580:	4830      	ldr	r0, [pc, #192]	; (8003644 <pbuf_realloc+0x138>)
 8003582:	f00e feb9 	bl	80122f8 <iprintf>
 8003586:	2000      	movs	r0, #0
 8003588:	f00e ffb8 	bl	80124fc <fflush>
 800358c:	f00e fefd 	bl	801238a <abort>
  while (rem_len > q->len) {
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	895b      	ldrh	r3, [r3, #10]
 8003594:	8a7a      	ldrh	r2, [r7, #18]
 8003596:	429a      	cmp	r2, r3
 8003598:	d8dc      	bhi.n	8003554 <pbuf_realloc+0x48>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	7b1b      	ldrb	r3, [r3, #12]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d131      	bne.n	800360a <pbuf_realloc+0xfe>
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	895b      	ldrh	r3, [r3, #10]
 80035aa:	8a7a      	ldrh	r2, [r7, #18]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d02c      	beq.n	800360a <pbuf_realloc+0xfe>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    struct pbuf *r = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	461a      	mov	r2, r3
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	8a7b      	ldrh	r3, [r7, #18]
 80035be:	4413      	add	r3, r2
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	4619      	mov	r1, r3
 80035c4:	6978      	ldr	r0, [r7, #20]
 80035c6:	f7ff f841 	bl	800264c <mem_trim>
 80035ca:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned r == NULL", r != NULL);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10b      	bne.n	80035ea <pbuf_realloc+0xde>
 80035d2:	4b1a      	ldr	r3, [pc, #104]	; (800363c <pbuf_realloc+0x130>)
 80035d4:	f240 12bf 	movw	r2, #447	; 0x1bf
 80035d8:	491c      	ldr	r1, [pc, #112]	; (800364c <pbuf_realloc+0x140>)
 80035da:	481a      	ldr	r0, [pc, #104]	; (8003644 <pbuf_realloc+0x138>)
 80035dc:	f00e fe8c 	bl	80122f8 <iprintf>
 80035e0:	2000      	movs	r0, #0
 80035e2:	f00e ff8b 	bl	80124fc <fflush>
 80035e6:	f00e fed0 	bl	801238a <abort>
    /* help to detect faulty overridden implementation of mem_trim */
    LWIP_ASSERT("mem_trim returned r != q", r == q);
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d00b      	beq.n	800360a <pbuf_realloc+0xfe>
 80035f2:	4b12      	ldr	r3, [pc, #72]	; (800363c <pbuf_realloc+0x130>)
 80035f4:	f240 12c1 	movw	r2, #449	; 0x1c1
 80035f8:	4915      	ldr	r1, [pc, #84]	; (8003650 <pbuf_realloc+0x144>)
 80035fa:	4812      	ldr	r0, [pc, #72]	; (8003644 <pbuf_realloc+0x138>)
 80035fc:	f00e fe7c 	bl	80122f8 <iprintf>
 8003600:	2000      	movs	r0, #0
 8003602:	f00e ff7b 	bl	80124fc <fflush>
 8003606:	f00e fec0 	bl	801238a <abort>
    LWIP_UNUSED_ARG(r);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	8a7a      	ldrh	r2, [r7, #18]
 800360e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	895a      	ldrh	r2, [r3, #10]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d004      	beq.n	800362a <pbuf_realloc+0x11e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f000 f91d 	bl	8003864 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e000      	b.n	8003634 <pbuf_realloc+0x128>
    return;
 8003632:	bf00      	nop

}
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	08013bb8 	.word	0x08013bb8
 8003640:	08013c64 	.word	0x08013c64
 8003644:	08013c0c 	.word	0x08013c0c
 8003648:	08013c7c 	.word	0x08013c7c
 800364c:	08013c94 	.word	0x08013c94
 8003650:	08013cb0 	.word	0x08013cb0

08003654 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	4613      	mov	r3, r2
 8003660:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <pbuf_add_header_impl+0x2c>
 8003668:	4b2e      	ldr	r3, [pc, #184]	; (8003724 <pbuf_add_header_impl+0xd0>)
 800366a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800366e:	492e      	ldr	r1, [pc, #184]	; (8003728 <pbuf_add_header_impl+0xd4>)
 8003670:	482e      	ldr	r0, [pc, #184]	; (800372c <pbuf_add_header_impl+0xd8>)
 8003672:	f00e fe41 	bl	80122f8 <iprintf>
 8003676:	2000      	movs	r0, #0
 8003678:	f00e ff40 	bl	80124fc <fflush>
 800367c:	f00e fe85 	bl	801238a <abort>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <pbuf_add_header_impl+0x3a>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368c:	d301      	bcc.n	8003692 <pbuf_add_header_impl+0x3e>
    return 1;
 800368e:	2301      	movs	r3, #1
 8003690:	e044      	b.n	800371c <pbuf_add_header_impl+0xc8>
  }
  if (header_size_increment == 0) {
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <pbuf_add_header_impl+0x48>
    return 0;
 8003698:	2300      	movs	r3, #0
 800369a:	e03f      	b.n	800371c <pbuf_add_header_impl+0xc8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	891a      	ldrh	r2, [r3, #8]
 80036a4:	8a7b      	ldrh	r3, [r7, #18]
 80036a6:	4413      	add	r3, r2
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	8a7a      	ldrh	r2, [r7, #18]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d901      	bls.n	80036b4 <pbuf_add_header_impl+0x60>
    return 1;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e033      	b.n	800371c <pbuf_add_header_impl+0xc8>
  }

  type_internal = p->type_internal;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	7b1b      	ldrb	r3, [r3, #12]
 80036b8:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80036ba:	8a3b      	ldrh	r3, [r7, #16]
 80036bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00d      	beq.n	80036e0 <pbuf_add_header_impl+0x8c>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	425b      	negs	r3, r3
 80036cc:	4413      	add	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f103 0210 	add.w	r2, r3, #16
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d90d      	bls.n	80036f8 <pbuf_add_header_impl+0xa4>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80036dc:	2301      	movs	r3, #1
 80036de:	e01d      	b.n	800371c <pbuf_add_header_impl+0xc8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d006      	beq.n	80036f4 <pbuf_add_header_impl+0xa0>
      payload = (u8_t *)p->payload - header_size_increment;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	425b      	negs	r3, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e001      	b.n	80036f8 <pbuf_add_header_impl+0xa4>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e011      	b.n	800371c <pbuf_add_header_impl+0xc8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	895a      	ldrh	r2, [r3, #10]
 8003702:	8a7b      	ldrh	r3, [r7, #18]
 8003704:	4413      	add	r3, r2
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	891a      	ldrh	r2, [r3, #8]
 8003710:	8a7b      	ldrh	r3, [r7, #18]
 8003712:	4413      	add	r3, r2
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	811a      	strh	r2, [r3, #8]


  return 0;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	08013bb8 	.word	0x08013bb8
 8003728:	08013ccc 	.word	0x08013ccc
 800372c:	08013c0c 	.word	0x08013c0c

08003730 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800373a:	2200      	movs	r2, #0
 800373c:	6839      	ldr	r1, [r7, #0]
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff ff88 	bl	8003654 <pbuf_add_header_impl>
 8003744:	4603      	mov	r3, r0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10b      	bne.n	8003778 <pbuf_remove_header+0x28>
 8003760:	4b22      	ldr	r3, [pc, #136]	; (80037ec <pbuf_remove_header+0x9c>)
 8003762:	f44f 7214 	mov.w	r2, #592	; 0x250
 8003766:	4922      	ldr	r1, [pc, #136]	; (80037f0 <pbuf_remove_header+0xa0>)
 8003768:	4822      	ldr	r0, [pc, #136]	; (80037f4 <pbuf_remove_header+0xa4>)
 800376a:	f00e fdc5 	bl	80122f8 <iprintf>
 800376e:	2000      	movs	r0, #0
 8003770:	f00e fec4 	bl	80124fc <fflush>
 8003774:	f00e fe09 	bl	801238a <abort>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <pbuf_remove_header+0x36>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003784:	d301      	bcc.n	800378a <pbuf_remove_header+0x3a>
    return 1;
 8003786:	2301      	movs	r3, #1
 8003788:	e02c      	b.n	80037e4 <pbuf_remove_header+0x94>
  }
  if (header_size_decrement == 0) {
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <pbuf_remove_header+0x44>
    return 0;
 8003790:	2300      	movs	r3, #0
 8003792:	e027      	b.n	80037e4 <pbuf_remove_header+0x94>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	895b      	ldrh	r3, [r3, #10]
 800379c:	89fa      	ldrh	r2, [r7, #14]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d908      	bls.n	80037b4 <pbuf_remove_header+0x64>
 80037a2:	4b12      	ldr	r3, [pc, #72]	; (80037ec <pbuf_remove_header+0x9c>)
 80037a4:	f240 225a 	movw	r2, #602	; 0x25a
 80037a8:	4913      	ldr	r1, [pc, #76]	; (80037f8 <pbuf_remove_header+0xa8>)
 80037aa:	4812      	ldr	r0, [pc, #72]	; (80037f4 <pbuf_remove_header+0xa4>)
 80037ac:	f7fd fcbd 	bl	800112a <lwip_win32_platform_diag>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e017      	b.n	80037e4 <pbuf_remove_header+0x94>

  /* remember current payload pointer */
  payload = p->payload;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	441a      	add	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	895a      	ldrh	r2, [r3, #10]
 80037ca:	89fb      	ldrh	r3, [r7, #14]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	891a      	ldrh	r2, [r3, #8]
 80037d8:	89fb      	ldrh	r3, [r7, #14]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	b29a      	uxth	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	08013bb8 	.word	0x08013bb8
 80037f0:	08013ccc 	.word	0x08013ccc
 80037f4:	08013c0c 	.word	0x08013c0c
 80037f8:	08013cd8 	.word	0x08013cd8

080037fc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	807b      	strh	r3, [r7, #2]
 8003808:	4613      	mov	r3, r2
 800380a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800380c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003810:	2b00      	cmp	r3, #0
 8003812:	da08      	bge.n	8003826 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8003814:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003818:	425b      	negs	r3, r3
 800381a:	4619      	mov	r1, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff ff97 	bl	8003750 <pbuf_remove_header>
 8003822:	4603      	mov	r3, r0
 8003824:	e007      	b.n	8003836 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8003826:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800382a:	787a      	ldrb	r2, [r7, #1]
 800382c:	4619      	mov	r1, r3
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff ff10 	bl	8003654 <pbuf_add_header_impl>
 8003834:	4603      	mov	r3, r0
  }
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	460b      	mov	r3, r1
 8003848:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800384a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800384e:	2201      	movs	r2, #1
 8003850:	4619      	mov	r1, r3
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff ffd2 	bl	80037fc <pbuf_header_impl>
 8003858:	4603      	mov	r3, r0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d110      	bne.n	8003894 <pbuf_free+0x30>
    LWIP_ASSERT("p != NULL", p != NULL);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10b      	bne.n	8003890 <pbuf_free+0x2c>
 8003878:	4b36      	ldr	r3, [pc, #216]	; (8003954 <pbuf_free+0xf0>)
 800387a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800387e:	4936      	ldr	r1, [pc, #216]	; (8003958 <pbuf_free+0xf4>)
 8003880:	4836      	ldr	r0, [pc, #216]	; (800395c <pbuf_free+0xf8>)
 8003882:	f00e fd39 	bl	80122f8 <iprintf>
 8003886:	2000      	movs	r0, #0
 8003888:	f00e fe38 	bl	80124fc <fflush>
 800388c:	f00e fd7d 	bl	801238a <abort>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8003890:	2300      	movs	r3, #0
 8003892:	e05b      	b.n	800394c <pbuf_free+0xe8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8003898:	e054      	b.n	8003944 <pbuf_free+0xe0>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800389a:	f7fd fc7f 	bl	800119c <sys_arch_protect>
 800389e:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	7b9b      	ldrb	r3, [r3, #14]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <pbuf_free+0x5c>
 80038a8:	4b2a      	ldr	r3, [pc, #168]	; (8003954 <pbuf_free+0xf0>)
 80038aa:	f240 22f5 	movw	r2, #757	; 0x2f5
 80038ae:	492c      	ldr	r1, [pc, #176]	; (8003960 <pbuf_free+0xfc>)
 80038b0:	482a      	ldr	r0, [pc, #168]	; (800395c <pbuf_free+0xf8>)
 80038b2:	f00e fd21 	bl	80122f8 <iprintf>
 80038b6:	2000      	movs	r0, #0
 80038b8:	f00e fe20 	bl	80124fc <fflush>
 80038bc:	f00e fd65 	bl	801238a <abort>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	7b9b      	ldrb	r3, [r3, #14]
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	739a      	strb	r2, [r3, #14]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	7b9b      	ldrb	r3, [r3, #14]
 80038d0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80038d2:	69b8      	ldr	r0, [r7, #24]
 80038d4:	f7fd fc6a 	bl	80011ac <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d130      	bne.n	8003940 <pbuf_free+0xdc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	7b1b      	ldrb	r3, [r3, #12]
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	73fb      	strb	r3, [r7, #15]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d104      	bne.n	80038fe <pbuf_free+0x9a>
          memp_free(MEMP_PBUF_POOL, p);
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	2009      	movs	r0, #9
 80038f8:	f7ff f9aa 	bl	8002c50 <memp_free>
 80038fc:	e01a      	b.n	8003934 <pbuf_free+0xd0>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d104      	bne.n	800390e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF, p);
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	2008      	movs	r0, #8
 8003908:	f7ff f9a2 	bl	8002c50 <memp_free>
 800390c:	e012      	b.n	8003934 <pbuf_free+0xd0>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d103      	bne.n	800391c <pbuf_free+0xb8>
          mem_free(p);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7fe fe29 	bl	800256c <mem_free>
 800391a:	e00b      	b.n	8003934 <pbuf_free+0xd0>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800391c:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <pbuf_free+0xf0>)
 800391e:	f240 3213 	movw	r2, #787	; 0x313
 8003922:	4910      	ldr	r1, [pc, #64]	; (8003964 <pbuf_free+0x100>)
 8003924:	480d      	ldr	r0, [pc, #52]	; (800395c <pbuf_free+0xf8>)
 8003926:	f00e fce7 	bl	80122f8 <iprintf>
 800392a:	2000      	movs	r0, #0
 800392c:	f00e fde6 	bl	80124fc <fflush>
 8003930:	f00e fd2b 	bl	801238a <abort>
        }
      }
      count++;
 8003934:	7ffb      	ldrb	r3, [r7, #31]
 8003936:	3301      	adds	r3, #1
 8003938:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	607b      	str	r3, [r7, #4]
 800393e:	e001      	b.n	8003944 <pbuf_free+0xe0>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8003940:	2300      	movs	r3, #0
 8003942:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1a7      	bne.n	800389a <pbuf_free+0x36>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800394a:	7ffb      	ldrb	r3, [r7, #31]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3720      	adds	r7, #32
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	08013bb8 	.word	0x08013bb8
 8003958:	08013ccc 	.word	0x08013ccc
 800395c:	08013c0c 	.word	0x08013c0c
 8003960:	08013cf8 	.word	0x08013cf8
 8003964:	08013d10 	.word	0x08013d10

08003968 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8003974:	e005      	b.n	8003982 <pbuf_clen+0x1a>
    ++len;
 8003976:	89fb      	ldrh	r3, [r7, #14]
 8003978:	3301      	adds	r3, #1
 800397a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f6      	bne.n	8003976 <pbuf_clen+0xe>
  }
  return len;
 8003988:	89fb      	ldrh	r3, [r7, #14]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01b      	beq.n	80039de <pbuf_ref+0x46>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80039a6:	f7fd fbf9 	bl	800119c <sys_arch_protect>
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	7b9b      	ldrb	r3, [r3, #14]
 80039b0:	3301      	adds	r3, #1
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	739a      	strb	r2, [r3, #14]
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7fd fbf7 	bl	80011ac <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	7b9b      	ldrb	r3, [r3, #14]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10b      	bne.n	80039de <pbuf_ref+0x46>
 80039c6:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <pbuf_ref+0x50>)
 80039c8:	f240 3246 	movw	r2, #838	; 0x346
 80039cc:	4907      	ldr	r1, [pc, #28]	; (80039ec <pbuf_ref+0x54>)
 80039ce:	4808      	ldr	r0, [pc, #32]	; (80039f0 <pbuf_ref+0x58>)
 80039d0:	f00e fc92 	bl	80122f8 <iprintf>
 80039d4:	2000      	movs	r0, #0
 80039d6:	f00e fd91 	bl	80124fc <fflush>
 80039da:	f00e fcd6 	bl	801238a <abort>
  }
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	08013bb8 	.word	0x08013bb8
 80039ec:	08013d24 	.word	0x08013d24
 80039f0:	08013c0c 	.word	0x08013c0c

080039f4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <pbuf_cat+0x16>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d107      	bne.n	8003a1a <pbuf_cat+0x26>
 8003a0a:	4b2d      	ldr	r3, [pc, #180]	; (8003ac0 <pbuf_cat+0xcc>)
 8003a0c:	f240 325e 	movw	r2, #862	; 0x35e
 8003a10:	492c      	ldr	r1, [pc, #176]	; (8003ac4 <pbuf_cat+0xd0>)
 8003a12:	482d      	ldr	r0, [pc, #180]	; (8003ac8 <pbuf_cat+0xd4>)
 8003a14:	f7fd fb89 	bl	800112a <lwip_win32_platform_diag>
 8003a18:	e04e      	b.n	8003ab8 <pbuf_cat+0xc4>
             ((h != NULL) && (t != NULL)), return;);
  LWIP_ASSERT("Creating an infinite loop", h != t);
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d10b      	bne.n	8003a3a <pbuf_cat+0x46>
 8003a22:	4b27      	ldr	r3, [pc, #156]	; (8003ac0 <pbuf_cat+0xcc>)
 8003a24:	f240 325f 	movw	r2, #863	; 0x35f
 8003a28:	4928      	ldr	r1, [pc, #160]	; (8003acc <pbuf_cat+0xd8>)
 8003a2a:	4827      	ldr	r0, [pc, #156]	; (8003ac8 <pbuf_cat+0xd4>)
 8003a2c:	f00e fc64 	bl	80122f8 <iprintf>
 8003a30:	2000      	movs	r0, #0
 8003a32:	f00e fd63 	bl	80124fc <fflush>
 8003a36:	f00e fca8 	bl	801238a <abort>

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	e00a      	b.n	8003a56 <pbuf_cat+0x62>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	891a      	ldrh	r2, [r3, #8]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	891b      	ldrh	r3, [r3, #8]
 8003a48:	4413      	add	r3, r2
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <pbuf_cat+0x4c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	891a      	ldrh	r2, [r3, #8]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	895b      	ldrh	r3, [r3, #10]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d00b      	beq.n	8003a82 <pbuf_cat+0x8e>
 8003a6a:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <pbuf_cat+0xcc>)
 8003a6c:	f240 3267 	movw	r2, #871	; 0x367
 8003a70:	4917      	ldr	r1, [pc, #92]	; (8003ad0 <pbuf_cat+0xdc>)
 8003a72:	4815      	ldr	r0, [pc, #84]	; (8003ac8 <pbuf_cat+0xd4>)
 8003a74:	f00e fc40 	bl	80122f8 <iprintf>
 8003a78:	2000      	movs	r0, #0
 8003a7a:	f00e fd3f 	bl	80124fc <fflush>
 8003a7e:	f00e fc84 	bl	801238a <abort>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <pbuf_cat+0xae>
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <pbuf_cat+0xcc>)
 8003a8c:	f44f 725a 	mov.w	r2, #872	; 0x368
 8003a90:	4910      	ldr	r1, [pc, #64]	; (8003ad4 <pbuf_cat+0xe0>)
 8003a92:	480d      	ldr	r0, [pc, #52]	; (8003ac8 <pbuf_cat+0xd4>)
 8003a94:	f00e fc30 	bl	80122f8 <iprintf>
 8003a98:	2000      	movs	r0, #0
 8003a9a:	f00e fd2f 	bl	80124fc <fflush>
 8003a9e:	f00e fc74 	bl	801238a <abort>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	891a      	ldrh	r2, [r3, #8]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	891b      	ldrh	r3, [r3, #8]
 8003aaa:	4413      	add	r3, r2
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	08013bb8 	.word	0x08013bb8
 8003ac4:	08013d38 	.word	0x08013d38
 8003ac8:	08013c0c 	.word	0x08013c0c
 8003acc:	08013d70 	.word	0x08013d70
 8003ad0:	08013d8c 	.word	0x08013d8c
 8003ad4:	08013dbc 	.word	0x08013dbc

08003ad8 <pbuf_copy>:
 *                 enough to hold p_from
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d109      	bne.n	8003afc <pbuf_copy+0x24>
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <pbuf_copy+0x3c>)
 8003aea:	f240 32c7 	movw	r2, #967	; 0x3c7
 8003aee:	490a      	ldr	r1, [pc, #40]	; (8003b18 <pbuf_copy+0x40>)
 8003af0:	480a      	ldr	r0, [pc, #40]	; (8003b1c <pbuf_copy+0x44>)
 8003af2:	f7fd fb1a 	bl	800112a <lwip_win32_platform_diag>
 8003af6:	f06f 030f 	mvn.w	r3, #15
 8003afa:	e007      	b.n	8003b0c <pbuf_copy+0x34>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	891a      	ldrh	r2, [r3, #8]
 8003b00:	2300      	movs	r3, #0
 8003b02:	6839      	ldr	r1, [r7, #0]
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f80b 	bl	8003b20 <pbuf_copy_partial_pbuf>
 8003b0a:	4603      	mov	r3, r0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	08013bb8 	.word	0x08013bb8
 8003b18:	08013e08 	.word	0x08013e08
 8003b1c:	08013c0c 	.word	0x08013c0c

08003b20 <pbuf_copy_partial_pbuf>:
 *                 or p_to is not big enough to hold copy_len at offset
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy_partial_pbuf(struct pbuf *p_to, const struct pbuf *p_from, u16_t copy_len, u16_t offset)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	460b      	mov	r3, r1
 8003b30:	80fb      	strh	r3, [r7, #6]
 8003b32:	4613      	mov	r3, r2
 8003b34:	80bb      	strh	r3, [r7, #4]
  size_t offset_to = offset, offset_from = 0, len;
 8003b36:	88bb      	ldrh	r3, [r7, #4]
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61bb      	str	r3, [r7, #24]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf(%p, %p, %"U16_F", %"U16_F")\n",
              (const void *)p_to, (const void *)p_from, copy_len, offset));

  /* is the copy_len in range? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d004      	beq.n	8003b4e <pbuf_copy_partial_pbuf+0x2e>
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	891b      	ldrh	r3, [r3, #8]
 8003b48:	88fa      	ldrh	r2, [r7, #6]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d909      	bls.n	8003b62 <pbuf_copy_partial_pbuf+0x42>
 8003b4e:	4b74      	ldr	r3, [pc, #464]	; (8003d20 <pbuf_copy_partial_pbuf+0x200>)
 8003b50:	f240 32e6 	movw	r2, #998	; 0x3e6
 8003b54:	4973      	ldr	r1, [pc, #460]	; (8003d24 <pbuf_copy_partial_pbuf+0x204>)
 8003b56:	4874      	ldr	r0, [pc, #464]	; (8003d28 <pbuf_copy_partial_pbuf+0x208>)
 8003b58:	f7fd fae7 	bl	800112a <lwip_win32_platform_diag>
 8003b5c:	f06f 030f 	mvn.w	r3, #15
 8003b60:	e0d9      	b.n	8003d16 <pbuf_copy_partial_pbuf+0x1f6>
             (p_from->tot_len >= copy_len)), return ERR_ARG;);
  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d007      	beq.n	8003b78 <pbuf_copy_partial_pbuf+0x58>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	891b      	ldrh	r3, [r3, #8]
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	88ba      	ldrh	r2, [r7, #4]
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	4413      	add	r3, r2
 8003b74:	4299      	cmp	r1, r3
 8003b76:	da09      	bge.n	8003b8c <pbuf_copy_partial_pbuf+0x6c>
 8003b78:	4b69      	ldr	r3, [pc, #420]	; (8003d20 <pbuf_copy_partial_pbuf+0x200>)
 8003b7a:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8003b7e:	496b      	ldr	r1, [pc, #428]	; (8003d2c <pbuf_copy_partial_pbuf+0x20c>)
 8003b80:	4869      	ldr	r0, [pc, #420]	; (8003d28 <pbuf_copy_partial_pbuf+0x208>)
 8003b82:	f7fd fad2 	bl	800112a <lwip_win32_platform_diag>
 8003b86:	f06f 030f 	mvn.w	r3, #15
 8003b8a:	e0c4      	b.n	8003d16 <pbuf_copy_partial_pbuf+0x1f6>
             (p_to->tot_len >= (offset + copy_len))), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	895b      	ldrh	r3, [r3, #10]
 8003b90:	461a      	mov	r2, r3
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	1ad2      	subs	r2, r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	895b      	ldrh	r3, [r3, #10]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	1acb      	subs	r3, r1, r3
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d306      	bcc.n	8003bb2 <pbuf_copy_partial_pbuf+0x92>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	895b      	ldrh	r3, [r3, #10]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	e005      	b.n	8003bbe <pbuf_copy_partial_pbuf+0x9e>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	895b      	ldrh	r3, [r3, #10]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	617b      	str	r3, [r7, #20]
    }
    len = LWIP_MIN(copy_len, len);
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	bf28      	it	cs
 8003bc6:	4613      	movcs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	18d0      	adds	r0, r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	4413      	add	r3, r2
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f00e fdad 	bl	801273c <memcpy>
    offset_to += len;
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	4413      	add	r3, r2
 8003be8:	61fb      	str	r3, [r7, #28]
    offset_from += len;
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	4413      	add	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
    copy_len = (u16_t)(copy_len - len);
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	88fa      	ldrh	r2, [r7, #6]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	80fb      	strh	r3, [r7, #6]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	895b      	ldrh	r3, [r3, #10]
 8003c00:	461a      	mov	r2, r3
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d20b      	bcs.n	8003c20 <pbuf_copy_partial_pbuf+0x100>
 8003c08:	4b45      	ldr	r3, [pc, #276]	; (8003d20 <pbuf_copy_partial_pbuf+0x200>)
 8003c0a:	f240 32fa 	movw	r2, #1018	; 0x3fa
 8003c0e:	4948      	ldr	r1, [pc, #288]	; (8003d30 <pbuf_copy_partial_pbuf+0x210>)
 8003c10:	4845      	ldr	r0, [pc, #276]	; (8003d28 <pbuf_copy_partial_pbuf+0x208>)
 8003c12:	f00e fb71 	bl	80122f8 <iprintf>
 8003c16:	2000      	movs	r0, #0
 8003c18:	f00e fc70 	bl	80124fc <fflush>
 8003c1c:	f00e fbb5 	bl	801238a <abort>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	895b      	ldrh	r3, [r3, #10]
 8003c24:	461a      	mov	r2, r3
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d20b      	bcs.n	8003c44 <pbuf_copy_partial_pbuf+0x124>
 8003c2c:	4b3c      	ldr	r3, [pc, #240]	; (8003d20 <pbuf_copy_partial_pbuf+0x200>)
 8003c2e:	f240 32fb 	movw	r2, #1019	; 0x3fb
 8003c32:	4940      	ldr	r1, [pc, #256]	; (8003d34 <pbuf_copy_partial_pbuf+0x214>)
 8003c34:	483c      	ldr	r0, [pc, #240]	; (8003d28 <pbuf_copy_partial_pbuf+0x208>)
 8003c36:	f00e fb5f 	bl	80122f8 <iprintf>
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f00e fc5e 	bl	80124fc <fflush>
 8003c40:	f00e fba3 	bl	801238a <abort>
    if (offset_from >= p_from->len) {
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	895b      	ldrh	r3, [r3, #10]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d814      	bhi.n	8003c7a <pbuf_copy_partial_pbuf+0x15a>
      /* on to next p_from (if any) */
      offset_from = 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61bb      	str	r3, [r7, #24]
      p_from = p_from->next;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60bb      	str	r3, [r7, #8]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10c      	bne.n	8003c7a <pbuf_copy_partial_pbuf+0x15a>
 8003c60:	88fb      	ldrh	r3, [r7, #6]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <pbuf_copy_partial_pbuf+0x15a>
 8003c66:	4b2e      	ldr	r3, [pc, #184]	; (8003d20 <pbuf_copy_partial_pbuf+0x200>)
 8003c68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c6c:	4932      	ldr	r1, [pc, #200]	; (8003d38 <pbuf_copy_partial_pbuf+0x218>)
 8003c6e:	482e      	ldr	r0, [pc, #184]	; (8003d28 <pbuf_copy_partial_pbuf+0x208>)
 8003c70:	f7fd fa5b 	bl	800112a <lwip_win32_platform_diag>
 8003c74:	f06f 030f 	mvn.w	r3, #15
 8003c78:	e04d      	b.n	8003d16 <pbuf_copy_partial_pbuf+0x1f6>
    }
    if (offset_to == p_to->len) {
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	895b      	ldrh	r3, [r3, #10]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d114      	bne.n	8003cb0 <pbuf_copy_partial_pbuf+0x190>
      /* on to next p_to (if any) */
      offset_to = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
      p_to = p_to->next;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10c      	bne.n	8003cb0 <pbuf_copy_partial_pbuf+0x190>
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d009      	beq.n	8003cb0 <pbuf_copy_partial_pbuf+0x190>
 8003c9c:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <pbuf_copy_partial_pbuf+0x200>)
 8003c9e:	f240 4206 	movw	r2, #1030	; 0x406
 8003ca2:	4926      	ldr	r1, [pc, #152]	; (8003d3c <pbuf_copy_partial_pbuf+0x21c>)
 8003ca4:	4820      	ldr	r0, [pc, #128]	; (8003d28 <pbuf_copy_partial_pbuf+0x208>)
 8003ca6:	f7fd fa40 	bl	800112a <lwip_win32_platform_diag>
 8003caa:	f06f 030f 	mvn.w	r3, #15
 8003cae:	e032      	b.n	8003d16 <pbuf_copy_partial_pbuf+0x1f6>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d013      	beq.n	8003cde <pbuf_copy_partial_pbuf+0x1be>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	895a      	ldrh	r2, [r3, #10]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	891b      	ldrh	r3, [r3, #8]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d10d      	bne.n	8003cde <pbuf_copy_partial_pbuf+0x1be>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <pbuf_copy_partial_pbuf+0x1be>
 8003cca:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <pbuf_copy_partial_pbuf+0x200>)
 8003ccc:	f240 420c 	movw	r2, #1036	; 0x40c
 8003cd0:	491b      	ldr	r1, [pc, #108]	; (8003d40 <pbuf_copy_partial_pbuf+0x220>)
 8003cd2:	4815      	ldr	r0, [pc, #84]	; (8003d28 <pbuf_copy_partial_pbuf+0x208>)
 8003cd4:	f7fd fa29 	bl	800112a <lwip_win32_platform_diag>
 8003cd8:	f06f 0305 	mvn.w	r3, #5
 8003cdc:	e01b      	b.n	8003d16 <pbuf_copy_partial_pbuf+0x1f6>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d013      	beq.n	8003d0c <pbuf_copy_partial_pbuf+0x1ec>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	895a      	ldrh	r2, [r3, #10]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	891b      	ldrh	r3, [r3, #8]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d10d      	bne.n	8003d0c <pbuf_copy_partial_pbuf+0x1ec>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d009      	beq.n	8003d0c <pbuf_copy_partial_pbuf+0x1ec>
 8003cf8:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <pbuf_copy_partial_pbuf+0x200>)
 8003cfa:	f240 4211 	movw	r2, #1041	; 0x411
 8003cfe:	4910      	ldr	r1, [pc, #64]	; (8003d40 <pbuf_copy_partial_pbuf+0x220>)
 8003d00:	4809      	ldr	r0, [pc, #36]	; (8003d28 <pbuf_copy_partial_pbuf+0x208>)
 8003d02:	f7fd fa12 	bl	800112a <lwip_win32_platform_diag>
 8003d06:	f06f 0305 	mvn.w	r3, #5
 8003d0a:	e004      	b.n	8003d16 <pbuf_copy_partial_pbuf+0x1f6>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (copy_len);
 8003d0c:	88fb      	ldrh	r3, [r7, #6]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f47f af3c 	bne.w	8003b8c <pbuf_copy_partial_pbuf+0x6c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf: copy complete.\n"));
  return ERR_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3720      	adds	r7, #32
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	08013bb8 	.word	0x08013bb8
 8003d24:	08013e24 	.word	0x08013e24
 8003d28:	08013c0c 	.word	0x08013c0c
 8003d2c:	08013e58 	.word	0x08013e58
 8003d30:	08013e88 	.word	0x08013e88
 8003d34:	08013ea0 	.word	0x08013ea0
 8003d38:	08013ebc 	.word	0x08013ebc
 8003d3c:	08013ecc 	.word	0x08013ecc
 8003d40:	08013edc 	.word	0x08013edc

08003d44 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	4611      	mov	r1, r2
 8003d50:	461a      	mov	r2, r3
 8003d52:	460b      	mov	r3, r1
 8003d54:	80fb      	strh	r3, [r7, #6]
 8003d56:	4613      	mov	r3, r2
 8003d58:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d108      	bne.n	8003d7a <pbuf_copy_partial+0x36>
 8003d68:	4b2b      	ldr	r3, [pc, #172]	; (8003e18 <pbuf_copy_partial+0xd4>)
 8003d6a:	f240 422c 	movw	r2, #1068	; 0x42c
 8003d6e:	492b      	ldr	r1, [pc, #172]	; (8003e1c <pbuf_copy_partial+0xd8>)
 8003d70:	482b      	ldr	r0, [pc, #172]	; (8003e20 <pbuf_copy_partial+0xdc>)
 8003d72:	f7fd f9da 	bl	800112a <lwip_win32_platform_diag>
 8003d76:	2300      	movs	r3, #0
 8003d78:	e04a      	b.n	8003e10 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d108      	bne.n	8003d92 <pbuf_copy_partial+0x4e>
 8003d80:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <pbuf_copy_partial+0xd4>)
 8003d82:	f240 422d 	movw	r2, #1069	; 0x42d
 8003d86:	4927      	ldr	r1, [pc, #156]	; (8003e24 <pbuf_copy_partial+0xe0>)
 8003d88:	4825      	ldr	r0, [pc, #148]	; (8003e20 <pbuf_copy_partial+0xdc>)
 8003d8a:	f7fd f9ce 	bl	800112a <lwip_win32_platform_diag>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e03e      	b.n	8003e10 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	e034      	b.n	8003e02 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8003d98:	88bb      	ldrh	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <pbuf_copy_partial+0x70>
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	895b      	ldrh	r3, [r3, #10]
 8003da2:	88ba      	ldrh	r2, [r7, #4]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d305      	bcc.n	8003db4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	895b      	ldrh	r3, [r3, #10]
 8003dac:	88ba      	ldrh	r2, [r7, #4]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	80bb      	strh	r3, [r7, #4]
 8003db2:	e023      	b.n	8003dfc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	895a      	ldrh	r2, [r3, #10]
 8003db8:	88bb      	ldrh	r3, [r7, #4]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8003dbe:	8b3a      	ldrh	r2, [r7, #24]
 8003dc0:	88fb      	ldrh	r3, [r7, #6]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d901      	bls.n	8003dca <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8003dca:	8b7b      	ldrh	r3, [r7, #26]
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	18d0      	adds	r0, r2, r3
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	88bb      	ldrh	r3, [r7, #4]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	8b3a      	ldrh	r2, [r7, #24]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	f00e fcae 	bl	801273c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8003de0:	8afa      	ldrh	r2, [r7, #22]
 8003de2:	8b3b      	ldrh	r3, [r7, #24]
 8003de4:	4413      	add	r3, r2
 8003de6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8003de8:	8b7a      	ldrh	r2, [r7, #26]
 8003dea:	8b3b      	ldrh	r3, [r7, #24]
 8003dec:	4413      	add	r3, r2
 8003dee:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8003df0:	88fa      	ldrh	r2, [r7, #6]
 8003df2:	8b3b      	ldrh	r3, [r7, #24]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <pbuf_copy_partial+0xca>
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1c4      	bne.n	8003d98 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8003e0e:	8afb      	ldrh	r3, [r7, #22]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3720      	adds	r7, #32
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	08013bb8 	.word	0x08013bb8
 8003e1c:	08013f14 	.word	0x08013f14
 8003e20:	08013c0c 	.word	0x08013c0c
 8003e24:	08013f34 	.word	0x08013f34

08003e28 <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf *
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	70fb      	strb	r3, [r7, #3]
  struct pbuf *q;
  if (p->next == NULL) {
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <pbuf_coalesce+0x18>
    return p;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	e010      	b.n	8003e62 <pbuf_coalesce+0x3a>
  }
  q = pbuf_clone(layer, PBUF_RAM, p);
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	f44f 7120 	mov.w	r1, #640	; 0x280
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 f80f 	bl	8003e6c <pbuf_clone>
 8003e4e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <pbuf_coalesce+0x32>
    /* @todo: what do we do now? */
    return p;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	e003      	b.n	8003e62 <pbuf_coalesce+0x3a>
  }
  pbuf_free(p);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff fd02 	bl	8003864 <pbuf_free>
  return q;
 8003e60:	68fb      	ldr	r3, [r7, #12]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	603a      	str	r2, [r7, #0]
 8003e76:	71fb      	strb	r3, [r7, #7]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	8919      	ldrh	r1, [r3, #8]
 8003e80:	88ba      	ldrh	r2, [r7, #4]
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff fa4f 	bl	8003328 <pbuf_alloc>
 8003e8a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <pbuf_clone+0x2a>
    return NULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e016      	b.n	8003ec4 <pbuf_clone+0x58>
  }
  err = pbuf_copy(q, p);
 8003e96:	6839      	ldr	r1, [r7, #0]
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f7ff fe1d 	bl	8003ad8 <pbuf_copy>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8003ea2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <pbuf_clone+0x56>
 8003eaa:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <pbuf_clone+0x60>)
 8003eac:	f240 524c 	movw	r2, #1356	; 0x54c
 8003eb0:	4907      	ldr	r1, [pc, #28]	; (8003ed0 <pbuf_clone+0x64>)
 8003eb2:	4808      	ldr	r0, [pc, #32]	; (8003ed4 <pbuf_clone+0x68>)
 8003eb4:	f00e fa20 	bl	80122f8 <iprintf>
 8003eb8:	2000      	movs	r0, #0
 8003eba:	f00e fb1f 	bl	80124fc <fflush>
 8003ebe:	f00e fa64 	bl	801238a <abort>
  return q;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	08013bb8 	.word	0x08013bb8
 8003ed0:	08014040 	.word	0x08014040
 8003ed4:	08013c0c 	.word	0x08013c0c

08003ed8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8003edc:	f7fd f946 	bl	800116c <lwip_port_rand>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	4b01      	ldr	r3, [pc, #4]	; (8003ef8 <tcp_init+0x20>)
 8003ef2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20000004 	.word	0x20000004

08003efc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	7d1b      	ldrb	r3, [r3, #20]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d10a      	bne.n	8003f22 <tcp_free+0x26>
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <tcp_free+0x38>)
 8003f0e:	22d4      	movs	r2, #212	; 0xd4
 8003f10:	4909      	ldr	r1, [pc, #36]	; (8003f38 <tcp_free+0x3c>)
 8003f12:	480a      	ldr	r0, [pc, #40]	; (8003f3c <tcp_free+0x40>)
 8003f14:	f00e f9f0 	bl	80122f8 <iprintf>
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f00e faef 	bl	80124fc <fflush>
 8003f1e:	f00e fa34 	bl	801238a <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	2000      	movs	r0, #0
 8003f26:	f7fe fe93 	bl	8002c50 <memp_free>
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	080140cc 	.word	0x080140cc
 8003f38:	080140ec 	.word	0x080140ec
 8003f3c:	08014100 	.word	0x08014100

08003f40 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	7d1b      	ldrb	r3, [r3, #20]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d10a      	bne.n	8003f66 <tcp_free_listen+0x26>
 8003f50:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <tcp_free_listen+0x38>)
 8003f52:	22df      	movs	r2, #223	; 0xdf
 8003f54:	4909      	ldr	r1, [pc, #36]	; (8003f7c <tcp_free_listen+0x3c>)
 8003f56:	480a      	ldr	r0, [pc, #40]	; (8003f80 <tcp_free_listen+0x40>)
 8003f58:	f00e f9ce 	bl	80122f8 <iprintf>
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	f00e facd 	bl	80124fc <fflush>
 8003f62:	f00e fa12 	bl	801238a <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	2001      	movs	r0, #1
 8003f6a:	f7fe fe71 	bl	8002c50 <memp_free>
}
 8003f6e:	bf00      	nop
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	080140cc 	.word	0x080140cc
 8003f7c:	08014128 	.word	0x08014128
 8003f80:	08014100 	.word	0x08014100

08003f84 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8003f88:	f000 fefe 	bl	8004d88 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8003f8c:	4b07      	ldr	r3, [pc, #28]	; (8003fac <tcp_tmr+0x28>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	3301      	adds	r3, #1
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <tcp_tmr+0x28>)
 8003f96:	701a      	strb	r2, [r3, #0]
 8003f98:	4b04      	ldr	r3, [pc, #16]	; (8003fac <tcp_tmr+0x28>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8003fa4:	f000 fb7e 	bl	80046a4 <tcp_slowtmr>
  }
}
 8003fa8:	bf00      	nop
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	20000731 	.word	0x20000731

08003fb0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <tcp_remove_listener+0x26>
 8003fc0:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <tcp_remove_listener+0x50>)
 8003fc2:	22ff      	movs	r2, #255	; 0xff
 8003fc4:	490f      	ldr	r1, [pc, #60]	; (8004004 <tcp_remove_listener+0x54>)
 8003fc6:	4810      	ldr	r0, [pc, #64]	; (8004008 <tcp_remove_listener+0x58>)
 8003fc8:	f00e f996 	bl	80122f8 <iprintf>
 8003fcc:	2000      	movs	r0, #0
 8003fce:	f00e fa95 	bl	80124fc <fflush>
 8003fd2:	f00e f9da 	bl	801238a <abort>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	e00a      	b.n	8003ff2 <tcp_remove_listener+0x42>
    if (pcb->listener == lpcb) {
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d102      	bne.n	8003fec <tcp_remove_listener+0x3c>
      pcb->listener = NULL;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f1      	bne.n	8003fdc <tcp_remove_listener+0x2c>
    }
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	080140cc 	.word	0x080140cc
 8004004:	08014144 	.word	0x08014144
 8004008:	08014100 	.word	0x08014100

0800400c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10b      	bne.n	8004032 <tcp_listen_closed+0x26>
 800401a:	4b19      	ldr	r3, [pc, #100]	; (8004080 <tcp_listen_closed+0x74>)
 800401c:	f240 1211 	movw	r2, #273	; 0x111
 8004020:	4918      	ldr	r1, [pc, #96]	; (8004084 <tcp_listen_closed+0x78>)
 8004022:	4819      	ldr	r0, [pc, #100]	; (8004088 <tcp_listen_closed+0x7c>)
 8004024:	f00e f968 	bl	80122f8 <iprintf>
 8004028:	2000      	movs	r0, #0
 800402a:	f00e fa67 	bl	80124fc <fflush>
 800402e:	f00e f9ac 	bl	801238a <abort>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	7d1b      	ldrb	r3, [r3, #20]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d00b      	beq.n	8004052 <tcp_listen_closed+0x46>
 800403a:	4b11      	ldr	r3, [pc, #68]	; (8004080 <tcp_listen_closed+0x74>)
 800403c:	f44f 7289 	mov.w	r2, #274	; 0x112
 8004040:	4912      	ldr	r1, [pc, #72]	; (800408c <tcp_listen_closed+0x80>)
 8004042:	4811      	ldr	r0, [pc, #68]	; (8004088 <tcp_listen_closed+0x7c>)
 8004044:	f00e f958 	bl	80122f8 <iprintf>
 8004048:	2000      	movs	r0, #0
 800404a:	f00e fa57 	bl	80124fc <fflush>
 800404e:	f00e f99c 	bl	801238a <abort>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004052:	2301      	movs	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	e00b      	b.n	8004070 <tcp_listen_closed+0x64>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8004058:	4a0d      	ldr	r2, [pc, #52]	; (8004090 <tcp_listen_closed+0x84>)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff ffa3 	bl	8003fb0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3301      	adds	r3, #1
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b03      	cmp	r3, #3
 8004074:	d9f0      	bls.n	8004058 <tcp_listen_closed+0x4c>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8004076:	bf00      	nop
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	080140cc 	.word	0x080140cc
 8004084:	0801416c 	.word	0x0801416c
 8004088:	08014100 	.word	0x08014100
 800408c:	08014178 	.word	0x08014178
 8004090:	08015b04 	.word	0x08015b04

08004094 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8004094:	b5b0      	push	{r4, r5, r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af04      	add	r7, sp, #16
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10b      	bne.n	80040be <tcp_close_shutdown+0x2a>
 80040a6:	4b66      	ldr	r3, [pc, #408]	; (8004240 <tcp_close_shutdown+0x1ac>)
 80040a8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80040ac:	4965      	ldr	r1, [pc, #404]	; (8004244 <tcp_close_shutdown+0x1b0>)
 80040ae:	4866      	ldr	r0, [pc, #408]	; (8004248 <tcp_close_shutdown+0x1b4>)
 80040b0:	f00e f922 	bl	80122f8 <iprintf>
 80040b4:	2000      	movs	r0, #0
 80040b6:	f00e fa21 	bl	80124fc <fflush>
 80040ba:	f00e f966 	bl	801238a <abort>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d06b      	beq.n	800419c <tcp_close_shutdown+0x108>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	7d1b      	ldrb	r3, [r3, #20]
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d003      	beq.n	80040d4 <tcp_close_shutdown+0x40>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	7d1b      	ldrb	r3, [r3, #20]
 80040d0:	2b07      	cmp	r3, #7
 80040d2:	d163      	bne.n	800419c <tcp_close_shutdown+0x108>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d104      	bne.n	80040e6 <tcp_close_shutdown+0x52>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80040e4:	d05a      	beq.n	800419c <tcp_close_shutdown+0x108>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	8b5b      	ldrh	r3, [r3, #26]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10b      	bne.n	800410a <tcp_close_shutdown+0x76>
 80040f2:	4b53      	ldr	r3, [pc, #332]	; (8004240 <tcp_close_shutdown+0x1ac>)
 80040f4:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80040f8:	4954      	ldr	r1, [pc, #336]	; (800424c <tcp_close_shutdown+0x1b8>)
 80040fa:	4853      	ldr	r0, [pc, #332]	; (8004248 <tcp_close_shutdown+0x1b4>)
 80040fc:	f00e f8fc 	bl	80122f8 <iprintf>
 8004100:	2000      	movs	r0, #0
 8004102:	f00e f9fb 	bl	80124fc <fflush>
 8004106:	f00e f940 	bl	801238a <abort>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004112:	687d      	ldr	r5, [r7, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3304      	adds	r3, #4
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	8ad2      	ldrh	r2, [r2, #22]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	8b09      	ldrh	r1, [r1, #24]
 8004120:	9102      	str	r1, [sp, #8]
 8004122:	9201      	str	r2, [sp, #4]
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	462b      	mov	r3, r5
 8004128:	4622      	mov	r2, r4
 800412a:	4601      	mov	r1, r0
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f005 f929 	bl	8009384 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f001 f914 	bl	8005360 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8004138:	4b45      	ldr	r3, [pc, #276]	; (8004250 <tcp_close_shutdown+0x1bc>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	429a      	cmp	r2, r3
 8004140:	d105      	bne.n	800414e <tcp_close_shutdown+0xba>
 8004142:	4b43      	ldr	r3, [pc, #268]	; (8004250 <tcp_close_shutdown+0x1bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4a41      	ldr	r2, [pc, #260]	; (8004250 <tcp_close_shutdown+0x1bc>)
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	e013      	b.n	8004176 <tcp_close_shutdown+0xe2>
 800414e:	4b40      	ldr	r3, [pc, #256]	; (8004250 <tcp_close_shutdown+0x1bc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e00c      	b.n	8004170 <tcp_close_shutdown+0xdc>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	429a      	cmp	r2, r3
 800415e:	d104      	bne.n	800416a <tcp_close_shutdown+0xd6>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	60da      	str	r2, [r3, #12]
 8004168:	e005      	b.n	8004176 <tcp_close_shutdown+0xe2>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1ef      	bne.n	8004156 <tcp_close_shutdown+0xc2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	60da      	str	r2, [r3, #12]
 800417c:	4b35      	ldr	r3, [pc, #212]	; (8004254 <tcp_close_shutdown+0x1c0>)
 800417e:	2201      	movs	r2, #1
 8004180:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8004182:	4b35      	ldr	r3, [pc, #212]	; (8004258 <tcp_close_shutdown+0x1c4>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	429a      	cmp	r2, r3
 800418a:	d102      	bne.n	8004192 <tcp_close_shutdown+0xfe>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800418c:	f003 fe96 	bl	8007ebc <tcp_trigger_input_pcb_close>
 8004190:	e002      	b.n	8004198 <tcp_close_shutdown+0x104>
      } else {
        tcp_free(pcb);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff feb2 	bl	8003efc <tcp_free>
      }
      return ERR_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	e04d      	b.n	8004238 <tcp_close_shutdown+0x1a4>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	7d1b      	ldrb	r3, [r3, #20]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d02d      	beq.n	8004200 <tcp_close_shutdown+0x16c>
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d036      	beq.n	8004216 <tcp_close_shutdown+0x182>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d13f      	bne.n	800422c <tcp_close_shutdown+0x198>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	8adb      	ldrh	r3, [r3, #22]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d021      	beq.n	80041f8 <tcp_close_shutdown+0x164>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80041b4:	4b29      	ldr	r3, [pc, #164]	; (800425c <tcp_close_shutdown+0x1c8>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d105      	bne.n	80041ca <tcp_close_shutdown+0x136>
 80041be:	4b27      	ldr	r3, [pc, #156]	; (800425c <tcp_close_shutdown+0x1c8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4a25      	ldr	r2, [pc, #148]	; (800425c <tcp_close_shutdown+0x1c8>)
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	e013      	b.n	80041f2 <tcp_close_shutdown+0x15e>
 80041ca:	4b24      	ldr	r3, [pc, #144]	; (800425c <tcp_close_shutdown+0x1c8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60bb      	str	r3, [r7, #8]
 80041d0:	e00c      	b.n	80041ec <tcp_close_shutdown+0x158>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d104      	bne.n	80041e6 <tcp_close_shutdown+0x152>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	60da      	str	r2, [r3, #12]
 80041e4:	e005      	b.n	80041f2 <tcp_close_shutdown+0x15e>
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	60bb      	str	r3, [r7, #8]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1ef      	bne.n	80041d2 <tcp_close_shutdown+0x13e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff fe7f 	bl	8003efc <tcp_free>
      break;
 80041fe:	e01a      	b.n	8004236 <tcp_close_shutdown+0x1a2>
    case LISTEN:
      tcp_listen_closed(pcb);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff ff03 	bl	800400c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4815      	ldr	r0, [pc, #84]	; (8004260 <tcp_close_shutdown+0x1cc>)
 800420a:	f001 f8f9 	bl	8005400 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff fe96 	bl	8003f40 <tcp_free_listen>
      break;
 8004214:	e00f      	b.n	8004236 <tcp_close_shutdown+0x1a2>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	480d      	ldr	r0, [pc, #52]	; (8004250 <tcp_close_shutdown+0x1bc>)
 800421a:	f001 f8f1 	bl	8005400 <tcp_pcb_remove>
 800421e:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <tcp_close_shutdown+0x1c0>)
 8004220:	2201      	movs	r2, #1
 8004222:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff fe69 	bl	8003efc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800422a:	e004      	b.n	8004236 <tcp_close_shutdown+0x1a2>
    default:
      return tcp_close_shutdown_fin(pcb);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f819 	bl	8004264 <tcp_close_shutdown_fin>
 8004232:	4603      	mov	r3, r0
 8004234:	e000      	b.n	8004238 <tcp_close_shutdown+0x1a4>
  }
  return ERR_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bdb0      	pop	{r4, r5, r7, pc}
 8004240:	080140cc 	.word	0x080140cc
 8004244:	08014190 	.word	0x08014190
 8004248:	08014100 	.word	0x08014100
 800424c:	080141b0 	.word	0x080141b0
 8004250:	200018e4 	.word	0x200018e4
 8004254:	200018e0 	.word	0x200018e0
 8004258:	200018f8 	.word	0x200018f8
 800425c:	200018f0 	.word	0x200018f0
 8004260:	200018ec 	.word	0x200018ec

08004264 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10b      	bne.n	800428a <tcp_close_shutdown_fin+0x26>
 8004272:	4b2f      	ldr	r3, [pc, #188]	; (8004330 <tcp_close_shutdown_fin+0xcc>)
 8004274:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8004278:	492e      	ldr	r1, [pc, #184]	; (8004334 <tcp_close_shutdown_fin+0xd0>)
 800427a:	482f      	ldr	r0, [pc, #188]	; (8004338 <tcp_close_shutdown_fin+0xd4>)
 800427c:	f00e f83c 	bl	80122f8 <iprintf>
 8004280:	2000      	movs	r0, #0
 8004282:	f00e f93b 	bl	80124fc <fflush>
 8004286:	f00e f880 	bl	801238a <abort>

  switch (pcb->state) {
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	7d1b      	ldrb	r3, [r3, #20]
 800428e:	2b04      	cmp	r3, #4
 8004290:	d010      	beq.n	80042b4 <tcp_close_shutdown_fin+0x50>
 8004292:	2b07      	cmp	r3, #7
 8004294:	d01b      	beq.n	80042ce <tcp_close_shutdown_fin+0x6a>
 8004296:	2b03      	cmp	r3, #3
 8004298:	d126      	bne.n	80042e8 <tcp_close_shutdown_fin+0x84>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f004 f850 	bl	8008340 <tcp_send_fin>
 80042a0:	4603      	mov	r3, r0
 80042a2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80042a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d11f      	bne.n	80042ec <tcp_close_shutdown_fin+0x88>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2205      	movs	r2, #5
 80042b0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80042b2:	e01b      	b.n	80042ec <tcp_close_shutdown_fin+0x88>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f004 f843 	bl	8008340 <tcp_send_fin>
 80042ba:	4603      	mov	r3, r0
 80042bc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80042be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d114      	bne.n	80042f0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2205      	movs	r2, #5
 80042ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 80042cc:	e010      	b.n	80042f0 <tcp_close_shutdown_fin+0x8c>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f004 f836 	bl	8008340 <tcp_send_fin>
 80042d4:	4603      	mov	r3, r0
 80042d6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80042d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <tcp_close_shutdown_fin+0x90>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2209      	movs	r2, #9
 80042e4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80042e6:	e005      	b.n	80042f4 <tcp_close_shutdown_fin+0x90>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	e01c      	b.n	8004326 <tcp_close_shutdown_fin+0xc2>
      break;
 80042ec:	bf00      	nop
 80042ee:	e002      	b.n	80042f6 <tcp_close_shutdown_fin+0x92>
      break;
 80042f0:	bf00      	nop
 80042f2:	e000      	b.n	80042f6 <tcp_close_shutdown_fin+0x92>
      break;
 80042f4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80042f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d103      	bne.n	8004306 <tcp_close_shutdown_fin+0xa2>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f004 f96c 	bl	80085dc <tcp_output>
 8004304:	e00d      	b.n	8004322 <tcp_close_shutdown_fin+0xbe>
  } else if (err == ERR_MEM) {
 8004306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430e:	d108      	bne.n	8004322 <tcp_close_shutdown_fin+0xbe>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8b5b      	ldrh	r3, [r3, #26]
 8004314:	f043 0308 	orr.w	r3, r3, #8
 8004318:	b29a      	uxth	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e001      	b.n	8004326 <tcp_close_shutdown_fin+0xc2>
  }
  return err;
 8004322:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	080140cc 	.word	0x080140cc
 8004334:	0801416c 	.word	0x0801416c
 8004338:	08014100 	.word	0x08014100

0800433c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d109      	bne.n	800435e <tcp_close+0x22>
 800434a:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <tcp_close+0x4c>)
 800434c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8004350:	490e      	ldr	r1, [pc, #56]	; (800438c <tcp_close+0x50>)
 8004352:	480f      	ldr	r0, [pc, #60]	; (8004390 <tcp_close+0x54>)
 8004354:	f7fc fee9 	bl	800112a <lwip_win32_platform_diag>
 8004358:	f06f 030f 	mvn.w	r3, #15
 800435c:	e00f      	b.n	800437e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	7d1b      	ldrb	r3, [r3, #20]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d006      	beq.n	8004374 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8b5b      	ldrh	r3, [r3, #26]
 800436a:	f043 0310 	orr.w	r3, r3, #16
 800436e:	b29a      	uxth	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8004374:	2101      	movs	r1, #1
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff fe8c 	bl	8004094 <tcp_close_shutdown>
 800437c:	4603      	mov	r3, r0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	080140cc 	.word	0x080140cc
 800438c:	080141cc 	.word	0x080141cc
 8004390:	08014100 	.word	0x08014100

08004394 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08e      	sub	sp, #56	; 0x38
 8004398:	af04      	add	r7, sp, #16
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d107      	bne.n	80043b4 <tcp_abandon+0x20>
 80043a4:	4b54      	ldr	r3, [pc, #336]	; (80044f8 <tcp_abandon+0x164>)
 80043a6:	f240 223d 	movw	r2, #573	; 0x23d
 80043aa:	4954      	ldr	r1, [pc, #336]	; (80044fc <tcp_abandon+0x168>)
 80043ac:	4854      	ldr	r0, [pc, #336]	; (8004500 <tcp_abandon+0x16c>)
 80043ae:	f7fc febc 	bl	800112a <lwip_win32_platform_diag>
 80043b2:	e09e      	b.n	80044f2 <tcp_abandon+0x15e>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	7d1b      	ldrb	r3, [r3, #20]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d10b      	bne.n	80043d4 <tcp_abandon+0x40>
 80043bc:	4b4e      	ldr	r3, [pc, #312]	; (80044f8 <tcp_abandon+0x164>)
 80043be:	f240 2241 	movw	r2, #577	; 0x241
 80043c2:	4950      	ldr	r1, [pc, #320]	; (8004504 <tcp_abandon+0x170>)
 80043c4:	484e      	ldr	r0, [pc, #312]	; (8004500 <tcp_abandon+0x16c>)
 80043c6:	f00d ff97 	bl	80122f8 <iprintf>
 80043ca:	2000      	movs	r0, #0
 80043cc:	f00e f896 	bl	80124fc <fflush>
 80043d0:	f00d ffdb 	bl	801238a <abort>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	7d1b      	ldrb	r3, [r3, #20]
 80043d8:	2b0a      	cmp	r3, #10
 80043da:	d107      	bne.n	80043ec <tcp_abandon+0x58>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	484a      	ldr	r0, [pc, #296]	; (8004508 <tcp_abandon+0x174>)
 80043e0:	f001 f80e 	bl	8005400 <tcp_pcb_remove>
    tcp_free(pcb);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff fd89 	bl	8003efc <tcp_free>
 80043ea:	e082      	b.n	80044f2 <tcp_abandon+0x15e>
  } else {
    int send_rst = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f8:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	7d1b      	ldrb	r3, [r3, #20]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d126      	bne.n	8004464 <tcp_abandon+0xd0>
      if (pcb->local_port != 0) {
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8adb      	ldrh	r3, [r3, #22]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d02e      	beq.n	800447c <tcp_abandon+0xe8>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800441e:	4b3b      	ldr	r3, [pc, #236]	; (800450c <tcp_abandon+0x178>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	429a      	cmp	r2, r3
 8004426:	d105      	bne.n	8004434 <tcp_abandon+0xa0>
 8004428:	4b38      	ldr	r3, [pc, #224]	; (800450c <tcp_abandon+0x178>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	4a37      	ldr	r2, [pc, #220]	; (800450c <tcp_abandon+0x178>)
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e013      	b.n	800445c <tcp_abandon+0xc8>
 8004434:	4b35      	ldr	r3, [pc, #212]	; (800450c <tcp_abandon+0x178>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	61fb      	str	r3, [r7, #28]
 800443a:	e00c      	b.n	8004456 <tcp_abandon+0xc2>
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	429a      	cmp	r2, r3
 8004444:	d104      	bne.n	8004450 <tcp_abandon+0xbc>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	60da      	str	r2, [r3, #12]
 800444e:	e005      	b.n	800445c <tcp_abandon+0xc8>
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	61fb      	str	r3, [r7, #28]
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1ef      	bne.n	800443c <tcp_abandon+0xa8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	60da      	str	r2, [r3, #12]
 8004462:	e00b      	b.n	800447c <tcp_abandon+0xe8>
      }
    } else {
      send_rst = reset;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	8adb      	ldrh	r3, [r3, #22]
 800446c:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4827      	ldr	r0, [pc, #156]	; (8004510 <tcp_abandon+0x17c>)
 8004472:	f000 ffc5 	bl	8005400 <tcp_pcb_remove>
 8004476:	4b27      	ldr	r3, [pc, #156]	; (8004514 <tcp_abandon+0x180>)
 8004478:	2201      	movs	r2, #1
 800447a:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <tcp_abandon+0xfa>
      tcp_segs_free(pcb->unacked);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fd5d 	bl	8004f48 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004492:	2b00      	cmp	r3, #0
 8004494:	d004      	beq.n	80044a0 <tcp_abandon+0x10c>
      tcp_segs_free(pcb->unsent);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fd54 	bl	8004f48 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d004      	beq.n	80044b2 <tcp_abandon+0x11e>
      tcp_segs_free(pcb->ooseq);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fd4b 	bl	8004f48 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00e      	beq.n	80044d6 <tcp_abandon+0x142>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3304      	adds	r3, #4
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	8b12      	ldrh	r2, [r2, #24]
 80044c2:	9202      	str	r2, [sp, #8]
 80044c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80044c6:	9201      	str	r2, [sp, #4]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	460b      	mov	r3, r1
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	69b9      	ldr	r1, [r7, #24]
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f004 ff57 	bl	8009384 <tcp_rst>
    }
    last_state = pcb->state;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	7d1b      	ldrb	r3, [r3, #20]
 80044da:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff fd0d 	bl	8003efc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <tcp_abandon+0x15e>
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f06f 010c 	mvn.w	r1, #12
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	4798      	blx	r3
  }
}
 80044f2:	3728      	adds	r7, #40	; 0x28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	080140cc 	.word	0x080140cc
 80044fc:	08014200 	.word	0x08014200
 8004500:	08014100 	.word	0x08014100
 8004504:	0801421c 	.word	0x0801421c
 8004508:	200018f4 	.word	0x200018f4
 800450c:	200018f0 	.word	0x200018f0
 8004510:	200018e4 	.word	0x200018e4
 8004514:	200018e0 	.word	0x200018e0

08004518 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8004520:	2101      	movs	r1, #1
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff ff36 	bl	8004394 <tcp_abandon>
}
 8004528:	bf00      	nop
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10b      	bne.n	8004556 <tcp_update_rcv_ann_wnd+0x26>
 800453e:	4b2b      	ldr	r3, [pc, #172]	; (80045ec <tcp_update_rcv_ann_wnd+0xbc>)
 8004540:	f240 32aa 	movw	r2, #938	; 0x3aa
 8004544:	492a      	ldr	r1, [pc, #168]	; (80045f0 <tcp_update_rcv_ann_wnd+0xc0>)
 8004546:	482b      	ldr	r0, [pc, #172]	; (80045f4 <tcp_update_rcv_ann_wnd+0xc4>)
 8004548:	f00d fed6 	bl	80122f8 <iprintf>
 800454c:	2000      	movs	r0, #0
 800454e:	f00d ffd5 	bl	80124fc <fflush>
 8004552:	f00d ff1a 	bl	801238a <abort>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800455e:	4413      	add	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800456a:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 800456e:	d802      	bhi.n	8004576 <tcp_update_rcv_ann_wnd+0x46>
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8004574:	e001      	b.n	800457a <tcp_update_rcv_ann_wnd+0x4a>
 8004576:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800457a:	4413      	add	r3, r2
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	db08      	blt.n	8004596 <tcp_update_rcv_ann_wnd+0x66>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	e025      	b.n	80045e2 <tcp_update_rcv_ann_wnd+0xb2>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	da03      	bge.n	80045ac <tcp_update_rcv_ann_wnd+0x7c>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045aa:	e019      	b.n	80045e0 <tcp_update_rcv_ann_wnd+0xb0>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045be:	d30b      	bcc.n	80045d8 <tcp_update_rcv_ann_wnd+0xa8>
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <tcp_update_rcv_ann_wnd+0xbc>)
 80045c2:	f240 32ba 	movw	r2, #954	; 0x3ba
 80045c6:	490c      	ldr	r1, [pc, #48]	; (80045f8 <tcp_update_rcv_ann_wnd+0xc8>)
 80045c8:	480a      	ldr	r0, [pc, #40]	; (80045f4 <tcp_update_rcv_ann_wnd+0xc4>)
 80045ca:	f00d fe95 	bl	80122f8 <iprintf>
 80045ce:	2000      	movs	r0, #0
 80045d0:	f00d ff94 	bl	80124fc <fflush>
 80045d4:	f00d fed9 	bl	801238a <abort>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	b29a      	uxth	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80045e0:	2300      	movs	r3, #0
  }
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	080140cc 	.word	0x080140cc
 80045f0:	08014318 	.word	0x08014318
 80045f4:	08014100 	.word	0x08014100
 80045f8:	0801433c 	.word	0x0801433c

080045fc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d107      	bne.n	800461e <tcp_recved+0x22>
 800460e:	4b21      	ldr	r3, [pc, #132]	; (8004694 <tcp_recved+0x98>)
 8004610:	f240 32d3 	movw	r2, #979	; 0x3d3
 8004614:	4920      	ldr	r1, [pc, #128]	; (8004698 <tcp_recved+0x9c>)
 8004616:	4821      	ldr	r0, [pc, #132]	; (800469c <tcp_recved+0xa0>)
 8004618:	f7fc fd87 	bl	800112a <lwip_win32_platform_diag>
 800461c:	e036      	b.n	800468c <tcp_recved+0x90>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	7d1b      	ldrb	r3, [r3, #20]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d10b      	bne.n	800463e <tcp_recved+0x42>
 8004626:	4b1b      	ldr	r3, [pc, #108]	; (8004694 <tcp_recved+0x98>)
 8004628:	f240 32d7 	movw	r2, #983	; 0x3d7
 800462c:	491c      	ldr	r1, [pc, #112]	; (80046a0 <tcp_recved+0xa4>)
 800462e:	481b      	ldr	r0, [pc, #108]	; (800469c <tcp_recved+0xa0>)
 8004630:	f00d fe62 	bl	80122f8 <iprintf>
 8004634:	2000      	movs	r0, #0
 8004636:	f00d ff61 	bl	80124fc <fflush>
 800463a:	f00d fea6 	bl	801238a <abort>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8004642:	887b      	ldrh	r3, [r7, #2]
 8004644:	4413      	add	r3, r2
 8004646:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8004648:	89fb      	ldrh	r3, [r7, #14]
 800464a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800464e:	d804      	bhi.n	800465a <tcp_recved+0x5e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004654:	89fa      	ldrh	r2, [r7, #14]
 8004656:	429a      	cmp	r2, r3
 8004658:	d204      	bcs.n	8004664 <tcp_recved+0x68>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004660:	851a      	strh	r2, [r3, #40]	; 0x28
 8004662:	e002      	b.n	800466a <tcp_recved+0x6e>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	89fa      	ldrh	r2, [r7, #14]
 8004668:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7ff ff60 	bl	8004530 <tcp_update_rcv_ann_wnd>
 8004670:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2bc7      	cmp	r3, #199	; 0xc7
 8004676:	d909      	bls.n	800468c <tcp_recved+0x90>
    tcp_ack_now(pcb);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8b5b      	ldrh	r3, [r3, #26]
 800467c:	f043 0302 	orr.w	r3, r3, #2
 8004680:	b29a      	uxth	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f003 ffa8 	bl	80085dc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	080140cc 	.word	0x080140cc
 8004698:	08014358 	.word	0x08014358
 800469c:	08014100 	.word	0x08014100
 80046a0:	08014370 	.word	0x08014370

080046a4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80046a4:	b5b0      	push	{r4, r5, r7, lr}
 80046a6:	b090      	sub	sp, #64	; 0x40
 80046a8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80046b0:	4ba1      	ldr	r3, [pc, #644]	; (8004938 <tcp_slowtmr+0x294>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3301      	adds	r3, #1
 80046b6:	4aa0      	ldr	r2, [pc, #640]	; (8004938 <tcp_slowtmr+0x294>)
 80046b8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80046ba:	4ba0      	ldr	r3, [pc, #640]	; (800493c <tcp_slowtmr+0x298>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	3301      	adds	r3, #1
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4b9e      	ldr	r3, [pc, #632]	; (800493c <tcp_slowtmr+0x298>)
 80046c4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80046ca:	4b9d      	ldr	r3, [pc, #628]	; (8004940 <tcp_slowtmr+0x29c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80046d0:	e2c3      	b.n	8004c5a <tcp_slowtmr+0x5b6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED", pcb->state != CLOSED);
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	7d1b      	ldrb	r3, [r3, #20]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10b      	bne.n	80046f2 <tcp_slowtmr+0x4e>
 80046da:	4b9a      	ldr	r3, [pc, #616]	; (8004944 <tcp_slowtmr+0x2a0>)
 80046dc:	f240 42c2 	movw	r2, #1218	; 0x4c2
 80046e0:	4999      	ldr	r1, [pc, #612]	; (8004948 <tcp_slowtmr+0x2a4>)
 80046e2:	489a      	ldr	r0, [pc, #616]	; (800494c <tcp_slowtmr+0x2a8>)
 80046e4:	f00d fe08 	bl	80122f8 <iprintf>
 80046e8:	2000      	movs	r0, #0
 80046ea:	f00d ff07 	bl	80124fc <fflush>
 80046ee:	f00d fe4c 	bl	801238a <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN", pcb->state != LISTEN);
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	7d1b      	ldrb	r3, [r3, #20]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d10b      	bne.n	8004712 <tcp_slowtmr+0x6e>
 80046fa:	4b92      	ldr	r3, [pc, #584]	; (8004944 <tcp_slowtmr+0x2a0>)
 80046fc:	f240 42c3 	movw	r2, #1219	; 0x4c3
 8004700:	4993      	ldr	r1, [pc, #588]	; (8004950 <tcp_slowtmr+0x2ac>)
 8004702:	4892      	ldr	r0, [pc, #584]	; (800494c <tcp_slowtmr+0x2a8>)
 8004704:	f00d fdf8 	bl	80122f8 <iprintf>
 8004708:	2000      	movs	r0, #0
 800470a:	f00d fef7 	bl	80124fc <fflush>
 800470e:	f00d fe3c 	bl	801238a <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8004712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004714:	7d1b      	ldrb	r3, [r3, #20]
 8004716:	2b0a      	cmp	r3, #10
 8004718:	d10b      	bne.n	8004732 <tcp_slowtmr+0x8e>
 800471a:	4b8a      	ldr	r3, [pc, #552]	; (8004944 <tcp_slowtmr+0x2a0>)
 800471c:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8004720:	498c      	ldr	r1, [pc, #560]	; (8004954 <tcp_slowtmr+0x2b0>)
 8004722:	488a      	ldr	r0, [pc, #552]	; (800494c <tcp_slowtmr+0x2a8>)
 8004724:	f00d fde8 	bl	80122f8 <iprintf>
 8004728:	2000      	movs	r0, #0
 800472a:	f00d fee7 	bl	80124fc <fflush>
 800472e:	f00d fe2c 	bl	801238a <abort>
    if (pcb->last_timer == tcp_timer_ctr) {
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	7f9a      	ldrb	r2, [r3, #30]
 8004736:	4b81      	ldr	r3, [pc, #516]	; (800493c <tcp_slowtmr+0x298>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d105      	bne.n	800474a <tcp_slowtmr+0xa6>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8004742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8004748:	e287      	b.n	8004c5a <tcp_slowtmr+0x5b6>
    }
    pcb->last_timer = tcp_timer_ctr;
 800474a:	4b7c      	ldr	r3, [pc, #496]	; (800493c <tcp_slowtmr+0x298>)
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8004752:	2300      	movs	r3, #0
 8004754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004760:	7d1b      	ldrb	r3, [r3, #20]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d10a      	bne.n	800477c <tcp_slowtmr+0xd8>
 8004766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004768:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800476c:	2b05      	cmp	r3, #5
 800476e:	d905      	bls.n	800477c <tcp_slowtmr+0xd8>
      ++pcb_remove;
 8004770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004774:	3301      	adds	r3, #1
 8004776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800477a:	e129      	b.n	80049d0 <tcp_slowtmr+0x32c>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004782:	2b0b      	cmp	r3, #11
 8004784:	d905      	bls.n	8004792 <tcp_slowtmr+0xee>
      ++pcb_remove;
 8004786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800478a:	3301      	adds	r3, #1
 800478c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004790:	e11e      	b.n	80049d0 <tcp_slowtmr+0x32c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8004792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004794:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8004798:	2b00      	cmp	r3, #0
 800479a:	d07f      	beq.n	800489c <tcp_slowtmr+0x1f8>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800479c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00b      	beq.n	80047bc <tcp_slowtmr+0x118>
 80047a4:	4b67      	ldr	r3, [pc, #412]	; (8004944 <tcp_slowtmr+0x2a0>)
 80047a6:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 80047aa:	496b      	ldr	r1, [pc, #428]	; (8004958 <tcp_slowtmr+0x2b4>)
 80047ac:	4867      	ldr	r0, [pc, #412]	; (800494c <tcp_slowtmr+0x2a8>)
 80047ae:	f00d fda3 	bl	80122f8 <iprintf>
 80047b2:	2000      	movs	r0, #0
 80047b4:	f00d fea2 	bl	80124fc <fflush>
 80047b8:	f00d fde7 	bl	801238a <abort>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10b      	bne.n	80047dc <tcp_slowtmr+0x138>
 80047c4:	4b5f      	ldr	r3, [pc, #380]	; (8004944 <tcp_slowtmr+0x2a0>)
 80047c6:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80047ca:	4964      	ldr	r1, [pc, #400]	; (800495c <tcp_slowtmr+0x2b8>)
 80047cc:	485f      	ldr	r0, [pc, #380]	; (800494c <tcp_slowtmr+0x2a8>)
 80047ce:	f00d fd93 	bl	80122f8 <iprintf>
 80047d2:	2000      	movs	r0, #0
 80047d4:	f00d fe92 	bl	80124fc <fflush>
 80047d8:	f00d fdd7 	bl	801238a <abort>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047de:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80047e2:	2b0b      	cmp	r3, #11
 80047e4:	d905      	bls.n	80047f2 <tcp_slowtmr+0x14e>
          ++pcb_remove; /* max probes reached */
 80047e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047ea:	3301      	adds	r3, #1
 80047ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80047f0:	e0ee      	b.n	80049d0 <tcp_slowtmr+0x32c>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80047f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80047f8:	3b01      	subs	r3, #1
 80047fa:	4a59      	ldr	r2, [pc, #356]	; (8004960 <tcp_slowtmr+0x2bc>)
 80047fc:	5cd3      	ldrb	r3, [r2, r3]
 80047fe:	77fb      	strb	r3, [r7, #31]
          if (pcb->persist_cnt < backoff_cnt) {
 8004800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004802:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004806:	7ffa      	ldrb	r2, [r7, #31]
 8004808:	429a      	cmp	r2, r3
 800480a:	d907      	bls.n	800481c <tcp_slowtmr+0x178>
            pcb->persist_cnt++;
 800480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004812:	3301      	adds	r3, #1
 8004814:	b2da      	uxtb	r2, r3
 8004816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004818:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800481c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004822:	7ffa      	ldrb	r2, [r7, #31]
 8004824:	429a      	cmp	r2, r3
 8004826:	f200 80d3 	bhi.w	80049d0 <tcp_slowtmr+0x32c>
            int next_slot = 1; /* increment timer to next slot */
 800482a:	2301      	movs	r3, #1
 800482c:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004834:	2b00      	cmp	r3, #0
 8004836:	d108      	bne.n	800484a <tcp_slowtmr+0x1a6>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8004838:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800483a:	f004 fe9b 	bl	8009574 <tcp_zero_window_probe>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d014      	beq.n	800486e <tcp_slowtmr+0x1ca>
                next_slot = 0; /* try probe again with current slot */
 8004844:	2300      	movs	r3, #0
 8004846:	623b      	str	r3, [r7, #32]
 8004848:	e011      	b.n	800486e <tcp_slowtmr+0x1ca>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004850:	4619      	mov	r1, r3
 8004852:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004854:	f003 fc10 	bl	8008078 <tcp_split_unsent_seg>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d107      	bne.n	800486e <tcp_slowtmr+0x1ca>
                if (tcp_output(pcb) == ERR_OK) {
 800485e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004860:	f003 febc 	bl	80085dc <tcp_output>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <tcp_slowtmr+0x1ca>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800486a:	2300      	movs	r3, #0
 800486c:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80ad 	beq.w	80049d0 <tcp_slowtmr+0x32c>
              pcb->persist_cnt = 0;
 8004876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004880:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8004884:	2b06      	cmp	r3, #6
 8004886:	f200 80a3 	bhi.w	80049d0 <tcp_slowtmr+0x32c>
                pcb->persist_backoff++;
 800488a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8004890:	3301      	adds	r3, #1
 8004892:	b2da      	uxtb	r2, r3
 8004894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004896:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800489a:	e099      	b.n	80049d0 <tcp_slowtmr+0x32c>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	db0f      	blt.n	80048c6 <tcp_slowtmr+0x222>
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80048ac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d008      	beq.n	80048c6 <tcp_slowtmr+0x222>
          ++pcb->rtime;
 80048b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3301      	adds	r3, #1
 80048be:	b29b      	uxth	r3, r3
 80048c0:	b21a      	sxth	r2, r3
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80048c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c8:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80048cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80048d2:	429a      	cmp	r2, r3
 80048d4:	db7c      	blt.n	80049d0 <tcp_slowtmr+0x32c>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80048d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048d8:	f004 f9b6 	bl	8008c48 <tcp_rexmit_rto_prepare>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <tcp_slowtmr+0x24e>
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d172      	bne.n	80049d0 <tcp_slowtmr+0x32c>
 80048ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d06e      	beq.n	80049d0 <tcp_slowtmr+0x32c>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80048f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f4:	7d1b      	ldrb	r3, [r3, #20]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d03b      	beq.n	8004972 <tcp_slowtmr+0x2ce>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004900:	2b0c      	cmp	r3, #12
 8004902:	bf28      	it	cs
 8004904:	230c      	movcs	r3, #12
 8004906:	77bb      	strb	r3, [r7, #30]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8004908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800490e:	10db      	asrs	r3, r3, #3
 8004910:	b21b      	sxth	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800491a:	4413      	add	r3, r2
 800491c:	7fba      	ldrb	r2, [r7, #30]
 800491e:	4911      	ldr	r1, [pc, #68]	; (8004964 <tcp_slowtmr+0x2c0>)
 8004920:	5c8a      	ldrb	r2, [r1, r2]
 8004922:	4093      	lsls	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800492c:	4293      	cmp	r3, r2
 800492e:	dc1b      	bgt.n	8004968 <tcp_slowtmr+0x2c4>
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	b21a      	sxth	r2, r3
 8004934:	e01a      	b.n	800496c <tcp_slowtmr+0x2c8>
 8004936:	bf00      	nop
 8004938:	200018e8 	.word	0x200018e8
 800493c:	20000732 	.word	0x20000732
 8004940:	200018e4 	.word	0x200018e4
 8004944:	080140cc 	.word	0x080140cc
 8004948:	08014400 	.word	0x08014400
 800494c:	08014100 	.word	0x08014100
 8004950:	0801442c 	.word	0x0801442c
 8004954:	08014458 	.word	0x08014458
 8004958:	08014484 	.word	0x08014484
 800495c:	080144b8 	.word	0x080144b8
 8004960:	08015afc 	.word	0x08015afc
 8004964:	08015aec 	.word	0x08015aec
 8004968:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800496c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8004972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004974:	2200      	movs	r2, #0
 8004976:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004980:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004984:	4293      	cmp	r3, r2
 8004986:	bf28      	it	cs
 8004988:	4613      	movcs	r3, r2
 800498a:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 800498c:	8afb      	ldrh	r3, [r7, #22]
 800498e:	085b      	lsrs	r3, r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8004998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800499e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d206      	bcs.n	80049b8 <tcp_slowtmr+0x314>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80049b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ba:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80049bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	2200      	movs	r2, #0
 80049c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80049ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049cc:	f004 f9ba 	bl	8008d44 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80049d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d2:	7d1b      	ldrb	r3, [r3, #20]
 80049d4:	2b06      	cmp	r3, #6
 80049d6:	d111      	bne.n	80049fc <tcp_slowtmr+0x358>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80049d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049da:	8b5b      	ldrh	r3, [r3, #26]
 80049dc:	f003 0310 	and.w	r3, r3, #16
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00b      	beq.n	80049fc <tcp_slowtmr+0x358>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80049e4:	4ba2      	ldr	r3, [pc, #648]	; (8004c70 <tcp_slowtmr+0x5cc>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b28      	cmp	r3, #40	; 0x28
 80049f0:	d904      	bls.n	80049fc <tcp_slowtmr+0x358>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80049f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049f6:	3301      	adds	r3, #1
 80049f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80049fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fe:	7a5b      	ldrb	r3, [r3, #9]
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d04c      	beq.n	8004aa2 <tcp_slowtmr+0x3fe>
        ((pcb->state == ESTABLISHED) ||
 8004a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d003      	beq.n	8004a18 <tcp_slowtmr+0x374>
         (pcb->state == CLOSE_WAIT))) {
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8004a14:	2b07      	cmp	r3, #7
 8004a16:	d144      	bne.n	8004aa2 <tcp_slowtmr+0x3fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004a18:	4b95      	ldr	r3, [pc, #596]	; (8004c70 <tcp_slowtmr+0x5cc>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8004a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a28:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8004a2c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8004a30:	4990      	ldr	r1, [pc, #576]	; (8004c74 <tcp_slowtmr+0x5d0>)
 8004a32:	fba1 1303 	umull	r1, r3, r1, r3
 8004a36:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d90a      	bls.n	8004a52 <tcp_slowtmr+0x3ae>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8004a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a40:	3301      	adds	r3, #1
 8004a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8004a46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004a50:	e027      	b.n	8004aa2 <tcp_slowtmr+0x3fe>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004a52:	4b87      	ldr	r3, [pc, #540]	; (8004c70 <tcp_slowtmr+0x5cc>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8004a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8004a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a64:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8004a68:	4618      	mov	r0, r3
 8004a6a:	4b83      	ldr	r3, [pc, #524]	; (8004c78 <tcp_slowtmr+0x5d4>)
 8004a6c:	fb03 f300 	mul.w	r3, r3, r0
 8004a70:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8004a72:	4980      	ldr	r1, [pc, #512]	; (8004c74 <tcp_slowtmr+0x5d0>)
 8004a74:	fba1 1303 	umull	r1, r3, r1, r3
 8004a78:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d911      	bls.n	8004aa2 <tcp_slowtmr+0x3fe>
        err = tcp_keepalive(pcb);
 8004a7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a80:	f004 fd32 	bl	80094e8 <tcp_keepalive>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8004a8a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d107      	bne.n	8004aa2 <tcp_slowtmr+0x3fe>
          pcb->keep_cnt_sent++;
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a94:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8004a98:	3301      	adds	r3, #1
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d011      	beq.n	8004ace <tcp_slowtmr+0x42a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8004aaa:	4b71      	ldr	r3, [pc, #452]	; (8004c70 <tcp_slowtmr+0x5cc>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	1ad2      	subs	r2, r2, r3
 8004ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8004aba:	4619      	mov	r1, r3
 8004abc:	460b      	mov	r3, r1
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	440b      	add	r3, r1
 8004ac2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d302      	bcc.n	8004ace <tcp_slowtmr+0x42a>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8004ac8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004aca:	f000 fe23 	bl	8005714 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8004ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad0:	7d1b      	ldrb	r3, [r3, #20]
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d10b      	bne.n	8004aee <tcp_slowtmr+0x44a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004ad6:	4b66      	ldr	r3, [pc, #408]	; (8004c70 <tcp_slowtmr+0x5cc>)
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b28      	cmp	r3, #40	; 0x28
 8004ae2:	d904      	bls.n	8004aee <tcp_slowtmr+0x44a>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8004ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ae8:	3301      	adds	r3, #1
 8004aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8004aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af0:	7d1b      	ldrb	r3, [r3, #20]
 8004af2:	2b09      	cmp	r3, #9
 8004af4:	d10b      	bne.n	8004b0e <tcp_slowtmr+0x46a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8004af6:	4b5e      	ldr	r3, [pc, #376]	; (8004c70 <tcp_slowtmr+0x5cc>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2bf0      	cmp	r3, #240	; 0xf0
 8004b02:	d904      	bls.n	8004b0e <tcp_slowtmr+0x46a>
        ++pcb_remove;
 8004b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b08:	3301      	adds	r3, #1
 8004b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8004b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d06a      	beq.n	8004bec <tcp_slowtmr+0x548>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8004b1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b20:	f000 fc1e 	bl	8005360 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d015      	beq.n	8004b56 <tcp_slowtmr+0x4b2>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8004b2a:	4b54      	ldr	r3, [pc, #336]	; (8004c7c <tcp_slowtmr+0x5d8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d10b      	bne.n	8004b4c <tcp_slowtmr+0x4a8>
 8004b34:	4b52      	ldr	r3, [pc, #328]	; (8004c80 <tcp_slowtmr+0x5dc>)
 8004b36:	f240 5271 	movw	r2, #1393	; 0x571
 8004b3a:	4952      	ldr	r1, [pc, #328]	; (8004c84 <tcp_slowtmr+0x5e0>)
 8004b3c:	4852      	ldr	r0, [pc, #328]	; (8004c88 <tcp_slowtmr+0x5e4>)
 8004b3e:	f00d fbdb 	bl	80122f8 <iprintf>
 8004b42:	2000      	movs	r0, #0
 8004b44:	f00d fcda 	bl	80124fc <fflush>
 8004b48:	f00d fc1f 	bl	801238a <abort>
        prev->next = pcb->next;
 8004b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b52:	60da      	str	r2, [r3, #12]
 8004b54:	e014      	b.n	8004b80 <tcp_slowtmr+0x4dc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8004b56:	4b49      	ldr	r3, [pc, #292]	; (8004c7c <tcp_slowtmr+0x5d8>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d00b      	beq.n	8004b78 <tcp_slowtmr+0x4d4>
 8004b60:	4b47      	ldr	r3, [pc, #284]	; (8004c80 <tcp_slowtmr+0x5dc>)
 8004b62:	f240 5275 	movw	r2, #1397	; 0x575
 8004b66:	4949      	ldr	r1, [pc, #292]	; (8004c8c <tcp_slowtmr+0x5e8>)
 8004b68:	4847      	ldr	r0, [pc, #284]	; (8004c88 <tcp_slowtmr+0x5e4>)
 8004b6a:	f00d fbc5 	bl	80122f8 <iprintf>
 8004b6e:	2000      	movs	r0, #0
 8004b70:	f00d fcc4 	bl	80124fc <fflush>
 8004b74:	f00d fc09 	bl	801238a <abort>
        tcp_active_pcbs = pcb->next;
 8004b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	4a3f      	ldr	r2, [pc, #252]	; (8004c7c <tcp_slowtmr+0x5d8>)
 8004b7e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8004b80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d013      	beq.n	8004bb0 <tcp_slowtmr+0x50c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004b90:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8004b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b94:	3304      	adds	r3, #4
 8004b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b98:	8ad2      	ldrh	r2, [r2, #22]
 8004b9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b9c:	8b09      	ldrh	r1, [r1, #24]
 8004b9e:	9102      	str	r1, [sp, #8]
 8004ba0:	9201      	str	r2, [sp, #4]
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	462b      	mov	r3, r5
 8004ba6:	4622      	mov	r2, r4
 8004ba8:	4601      	mov	r1, r0
 8004baa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bac:	f004 fbea 	bl	8009384 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8004bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	7d1b      	ldrb	r3, [r3, #20]
 8004bba:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 8004bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbe:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7ff f998 	bl	8003efc <tcp_free>

      tcp_active_pcbs_changed = 0;
 8004bcc:	4b30      	ldr	r3, [pc, #192]	; (8004c90 <tcp_slowtmr+0x5ec>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d004      	beq.n	8004be2 <tcp_slowtmr+0x53e>
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f06f 010c 	mvn.w	r1, #12
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8004be2:	4b2b      	ldr	r3, [pc, #172]	; (8004c90 <tcp_slowtmr+0x5ec>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d037      	beq.n	8004c5a <tcp_slowtmr+0x5b6>
        goto tcp_slowtmr_start;
 8004bea:	e56c      	b.n	80046c6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8004bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8004bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	7f1b      	ldrb	r3, [r3, #28]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8004c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c04:	7f1a      	ldrb	r2, [r3, #28]
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	7f5b      	ldrb	r3, [r3, #29]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d325      	bcc.n	8004c5a <tcp_slowtmr+0x5b6>
        prev->polltmr = 0;
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8004c14:	4b1e      	ldr	r3, [pc, #120]	; (8004c90 <tcp_slowtmr+0x5ec>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00b      	beq.n	8004c3c <tcp_slowtmr+0x598>
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c2c:	6912      	ldr	r2, [r2, #16]
 8004c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c30:	4610      	mov	r0, r2
 8004c32:	4798      	blx	r3
 8004c34:	4603      	mov	r3, r0
 8004c36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004c3a:	e002      	b.n	8004c42 <tcp_slowtmr+0x59e>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8004c42:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <tcp_slowtmr+0x5ec>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d000      	beq.n	8004c4c <tcp_slowtmr+0x5a8>
          goto tcp_slowtmr_start;
 8004c4a:	e53c      	b.n	80046c6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8004c4c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <tcp_slowtmr+0x5b6>
          tcp_output(prev);
 8004c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c56:	f003 fcc1 	bl	80085dc <tcp_output>
  while (pcb != NULL) {
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f47f ad38 	bne.w	80046d2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8004c66:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <tcp_slowtmr+0x5f0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8004c6c:	e076      	b.n	8004d5c <tcp_slowtmr+0x6b8>
 8004c6e:	bf00      	nop
 8004c70:	200018e8 	.word	0x200018e8
 8004c74:	10624dd3 	.word	0x10624dd3
 8004c78:	000124f8 	.word	0x000124f8
 8004c7c:	200018e4 	.word	0x200018e4
 8004c80:	080140cc 	.word	0x080140cc
 8004c84:	080144f0 	.word	0x080144f0
 8004c88:	08014100 	.word	0x08014100
 8004c8c:	0801451c 	.word	0x0801451c
 8004c90:	200018e0 	.word	0x200018e0
 8004c94:	200018f4 	.word	0x200018f4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	7d1b      	ldrb	r3, [r3, #20]
 8004c9c:	2b0a      	cmp	r3, #10
 8004c9e:	d00b      	beq.n	8004cb8 <tcp_slowtmr+0x614>
 8004ca0:	4b32      	ldr	r3, [pc, #200]	; (8004d6c <tcp_slowtmr+0x6c8>)
 8004ca2:	f240 52a5 	movw	r2, #1445	; 0x5a5
 8004ca6:	4932      	ldr	r1, [pc, #200]	; (8004d70 <tcp_slowtmr+0x6cc>)
 8004ca8:	4832      	ldr	r0, [pc, #200]	; (8004d74 <tcp_slowtmr+0x6d0>)
 8004caa:	f00d fb25 	bl	80122f8 <iprintf>
 8004cae:	2000      	movs	r0, #0
 8004cb0:	f00d fc24 	bl	80124fc <fflush>
 8004cb4:	f00d fb69 	bl	801238a <abort>
    pcb_remove = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8004cbe:	4b2e      	ldr	r3, [pc, #184]	; (8004d78 <tcp_slowtmr+0x6d4>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2bf0      	cmp	r3, #240	; 0xf0
 8004cca:	d904      	bls.n	8004cd6 <tcp_slowtmr+0x632>
      ++pcb_remove;
 8004ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8004cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d039      	beq.n	8004d52 <tcp_slowtmr+0x6ae>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8004cde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ce0:	f000 fb3e 	bl	8005360 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d015      	beq.n	8004d16 <tcp_slowtmr+0x672>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8004cea:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <tcp_slowtmr+0x6d8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d10b      	bne.n	8004d0c <tcp_slowtmr+0x668>
 8004cf4:	4b1d      	ldr	r3, [pc, #116]	; (8004d6c <tcp_slowtmr+0x6c8>)
 8004cf6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8004cfa:	4921      	ldr	r1, [pc, #132]	; (8004d80 <tcp_slowtmr+0x6dc>)
 8004cfc:	481d      	ldr	r0, [pc, #116]	; (8004d74 <tcp_slowtmr+0x6d0>)
 8004cfe:	f00d fafb 	bl	80122f8 <iprintf>
 8004d02:	2000      	movs	r0, #0
 8004d04:	f00d fbfa 	bl	80124fc <fflush>
 8004d08:	f00d fb3f 	bl	801238a <abort>
        prev->next = pcb->next;
 8004d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	60da      	str	r2, [r3, #12]
 8004d14:	e014      	b.n	8004d40 <tcp_slowtmr+0x69c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8004d16:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <tcp_slowtmr+0x6d8>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d00b      	beq.n	8004d38 <tcp_slowtmr+0x694>
 8004d20:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <tcp_slowtmr+0x6c8>)
 8004d22:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8004d26:	4917      	ldr	r1, [pc, #92]	; (8004d84 <tcp_slowtmr+0x6e0>)
 8004d28:	4812      	ldr	r0, [pc, #72]	; (8004d74 <tcp_slowtmr+0x6d0>)
 8004d2a:	f00d fae5 	bl	80122f8 <iprintf>
 8004d2e:	2000      	movs	r0, #0
 8004d30:	f00d fbe4 	bl	80124fc <fflush>
 8004d34:	f00d fb29 	bl	801238a <abort>
        tcp_tw_pcbs = pcb->next;
 8004d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4a0f      	ldr	r2, [pc, #60]	; (8004d7c <tcp_slowtmr+0x6d8>)
 8004d3e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8004d4a:	6838      	ldr	r0, [r7, #0]
 8004d4c:	f7ff f8d6 	bl	8003efc <tcp_free>
 8004d50:	e004      	b.n	8004d5c <tcp_slowtmr+0x6b8>
    } else {
      prev = pcb;
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8004d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d19a      	bne.n	8004c98 <tcp_slowtmr+0x5f4>
    }
  }
}
 8004d62:	bf00      	nop
 8004d64:	3730      	adds	r7, #48	; 0x30
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bdb0      	pop	{r4, r5, r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	080140cc 	.word	0x080140cc
 8004d70:	08014548 	.word	0x08014548
 8004d74:	08014100 	.word	0x08014100
 8004d78:	200018e8 	.word	0x200018e8
 8004d7c:	200018f4 	.word	0x200018f4
 8004d80:	08014578 	.word	0x08014578
 8004d84:	080145a0 	.word	0x080145a0

08004d88 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8004d8e:	4b2d      	ldr	r3, [pc, #180]	; (8004e44 <tcp_fasttmr+0xbc>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	3301      	adds	r3, #1
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	4b2b      	ldr	r3, [pc, #172]	; (8004e44 <tcp_fasttmr+0xbc>)
 8004d98:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8004d9a:	4b2b      	ldr	r3, [pc, #172]	; (8004e48 <tcp_fasttmr+0xc0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8004da0:	e048      	b.n	8004e34 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	7f9a      	ldrb	r2, [r3, #30]
 8004da6:	4b27      	ldr	r3, [pc, #156]	; (8004e44 <tcp_fasttmr+0xbc>)
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d03f      	beq.n	8004e2e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8004dae:	4b25      	ldr	r3, [pc, #148]	; (8004e44 <tcp_fasttmr+0xbc>)
 8004db0:	781a      	ldrb	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	8b5b      	ldrh	r3, [r3, #26]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d010      	beq.n	8004de4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	8b5b      	ldrh	r3, [r3, #26]
 8004dc6:	f043 0302 	orr.w	r3, r3, #2
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f003 fc03 	bl	80085dc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	8b5b      	ldrh	r3, [r3, #26]
 8004dda:	f023 0303 	bic.w	r3, r3, #3
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8b5b      	ldrh	r3, [r3, #26]
 8004de8:	f003 0308 	and.w	r3, r3, #8
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d009      	beq.n	8004e04 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	8b5b      	ldrh	r3, [r3, #26]
 8004df4:	f023 0308 	bic.w	r3, r3, #8
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7ff fa30 	bl	8004264 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8004e12:	4b0e      	ldr	r3, [pc, #56]	; (8004e4c <tcp_fasttmr+0xc4>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f819 	bl	8004e50 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <tcp_fasttmr+0xc4>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d000      	beq.n	8004e28 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8004e26:	e7b8      	b.n	8004d9a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	607b      	str	r3, [r7, #4]
 8004e2c:	e002      	b.n	8004e34 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1b3      	bne.n	8004da2 <tcp_fasttmr+0x1a>
    }
  }
}
 8004e3a:	bf00      	nop
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000732 	.word	0x20000732
 8004e48:	200018e4 	.word	0x200018e4
 8004e4c:	200018e0 	.word	0x200018e0

08004e50 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8004e50:	b590      	push	{r4, r7, lr}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d109      	bne.n	8004e72 <tcp_process_refused_data+0x22>
 8004e5e:	4b37      	ldr	r3, [pc, #220]	; (8004f3c <tcp_process_refused_data+0xec>)
 8004e60:	f240 620d 	movw	r2, #1549	; 0x60d
 8004e64:	4936      	ldr	r1, [pc, #216]	; (8004f40 <tcp_process_refused_data+0xf0>)
 8004e66:	4837      	ldr	r0, [pc, #220]	; (8004f44 <tcp_process_refused_data+0xf4>)
 8004e68:	f7fc f95f 	bl	800112a <lwip_win32_platform_diag>
 8004e6c:	f06f 030f 	mvn.w	r3, #15
 8004e70:	e060      	b.n	8004f34 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e76:	7b5b      	ldrb	r3, [r3, #13]
 8004e78:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e7e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00b      	beq.n	8004ea8 <tcp_process_refused_data+0x58>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6918      	ldr	r0, [r3, #16]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	47a0      	blx	r4
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	73fb      	strb	r3, [r7, #15]
 8004ea6:	e007      	b.n	8004eb8 <tcp_process_refused_data+0x68>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	2000      	movs	r0, #0
 8004eb0:	f000 f8a8 	bl	8005004 <tcp_recv_null>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8004eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d12a      	bne.n	8004f16 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8004ec0:	7bbb      	ldrb	r3, [r7, #14]
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d033      	beq.n	8004f32 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ece:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004ed2:	d005      	beq.n	8004ee0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed8:	3301      	adds	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00b      	beq.n	8004f02 <tcp_process_refused_data+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6918      	ldr	r0, [r3, #16]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	47a0      	blx	r4
 8004efc:	4603      	mov	r3, r0
 8004efe:	73fb      	strb	r3, [r7, #15]
 8004f00:	e001      	b.n	8004f06 <tcp_process_refused_data+0xb6>
 8004f02:	2300      	movs	r3, #0
 8004f04:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8004f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f0a:	f113 0f0d 	cmn.w	r3, #13
 8004f0e:	d110      	bne.n	8004f32 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8004f10:	f06f 030c 	mvn.w	r3, #12
 8004f14:	e00e      	b.n	8004f34 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8004f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f1a:	f113 0f0d 	cmn.w	r3, #13
 8004f1e:	d102      	bne.n	8004f26 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8004f20:	f06f 030c 	mvn.w	r3, #12
 8004f24:	e006      	b.n	8004f34 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8004f2c:	f06f 0304 	mvn.w	r3, #4
 8004f30:	e000      	b.n	8004f34 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd90      	pop	{r4, r7, pc}
 8004f3c:	080140cc 	.word	0x080140cc
 8004f40:	080145c8 	.word	0x080145c8
 8004f44:	08014100 	.word	0x08014100

08004f48 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8004f50:	e007      	b.n	8004f62 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f809 	bl	8004f70 <tcp_seg_free>
    seg = next;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f4      	bne.n	8004f52 <tcp_segs_free+0xa>
  }
}
 8004f68:	bf00      	nop
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00c      	beq.n	8004f98 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d004      	beq.n	8004f90 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fe fc6a 	bl	8003864 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	2002      	movs	r0, #2
 8004f94:	f7fd fe5c 	bl	8002c50 <memp_free>
  }
}
 8004f98:	bf00      	nop
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10b      	bne.n	8004fc6 <tcp_seg_copy+0x26>
 8004fae:	4b12      	ldr	r3, [pc, #72]	; (8004ff8 <tcp_seg_copy+0x58>)
 8004fb0:	f240 6286 	movw	r2, #1670	; 0x686
 8004fb4:	4911      	ldr	r1, [pc, #68]	; (8004ffc <tcp_seg_copy+0x5c>)
 8004fb6:	4812      	ldr	r0, [pc, #72]	; (8005000 <tcp_seg_copy+0x60>)
 8004fb8:	f00d f99e 	bl	80122f8 <iprintf>
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	f00d fa9d 	bl	80124fc <fflush>
 8004fc2:	f00d f9e2 	bl	801238a <abort>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8004fc6:	2002      	movs	r0, #2
 8004fc8:	f7fd fdd8 	bl	8002b7c <memp_malloc>
 8004fcc:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <tcp_seg_copy+0x38>
    return NULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e00a      	b.n	8004fee <tcp_seg_copy+0x4e>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8004fd8:	2214      	movs	r2, #20
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f00d fbad 	bl	801273c <memcpy>
  pbuf_ref(cseg->p);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe fcd6 	bl	8003998 <pbuf_ref>
  return cseg;
 8004fec:	68fb      	ldr	r3, [r7, #12]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	080140cc 	.word	0x080140cc
 8004ffc:	0801460c 	.word	0x0801460c
 8005000:	08014100 	.word	0x08014100

08005004 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d109      	bne.n	800502c <tcp_recv_null+0x28>
 8005018:	4b12      	ldr	r3, [pc, #72]	; (8005064 <tcp_recv_null+0x60>)
 800501a:	f240 629c 	movw	r2, #1692	; 0x69c
 800501e:	4912      	ldr	r1, [pc, #72]	; (8005068 <tcp_recv_null+0x64>)
 8005020:	4812      	ldr	r0, [pc, #72]	; (800506c <tcp_recv_null+0x68>)
 8005022:	f7fc f882 	bl	800112a <lwip_win32_platform_diag>
 8005026:	f06f 030f 	mvn.w	r3, #15
 800502a:	e016      	b.n	800505a <tcp_recv_null+0x56>

  if (p != NULL) {
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	891b      	ldrh	r3, [r3, #8]
 8005036:	4619      	mov	r1, r3
 8005038:	68b8      	ldr	r0, [r7, #8]
 800503a:	f7ff fadf 	bl	80045fc <tcp_recved>
    pbuf_free(p);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7fe fc10 	bl	8003864 <pbuf_free>
 8005044:	e008      	b.n	8005058 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8005046:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d104      	bne.n	8005058 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800504e:	68b8      	ldr	r0, [r7, #8]
 8005050:	f7ff f974 	bl	800433c <tcp_close>
 8005054:	4603      	mov	r3, r0
 8005056:	e000      	b.n	800505a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	080140cc 	.word	0x080140cc
 8005068:	08014628 	.word	0x08014628
 800506c:	08014100 	.word	0x08014100

08005070 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800507a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507e:	2b00      	cmp	r3, #0
 8005080:	db01      	blt.n	8005086 <tcp_kill_prio+0x16>
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	e000      	b.n	8005088 <tcp_kill_prio+0x18>
 8005086:	237f      	movs	r3, #127	; 0x7f
 8005088:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800508a:	7afb      	ldrb	r3, [r7, #11]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d034      	beq.n	80050fa <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8005090:	7afb      	ldrb	r3, [r7, #11]
 8005092:	3b01      	subs	r3, #1
 8005094:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800509a:	2300      	movs	r3, #0
 800509c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800509e:	4b19      	ldr	r3, [pc, #100]	; (8005104 <tcp_kill_prio+0x94>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	e01f      	b.n	80050e6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	7d5b      	ldrb	r3, [r3, #21]
 80050aa:	7afa      	ldrb	r2, [r7, #11]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d80c      	bhi.n	80050ca <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80050b4:	7afa      	ldrb	r2, [r7, #11]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d112      	bne.n	80050e0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80050ba:	4b13      	ldr	r3, [pc, #76]	; (8005108 <tcp_kill_prio+0x98>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	1ad2      	subs	r2, r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d30a      	bcc.n	80050e0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80050ca:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <tcp_kill_prio+0x98>)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	7d5b      	ldrb	r3, [r3, #21]
 80050de:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1dc      	bne.n	80050a6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d004      	beq.n	80050fc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80050f2:	6938      	ldr	r0, [r7, #16]
 80050f4:	f7ff fa10 	bl	8004518 <tcp_abort>
 80050f8:	e000      	b.n	80050fc <tcp_kill_prio+0x8c>
    return;
 80050fa:	bf00      	nop
  }
}
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	200018e4 	.word	0x200018e4
 8005108:	200018e8 	.word	0x200018e8

0800510c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	2b08      	cmp	r3, #8
 800511a:	d00e      	beq.n	800513a <tcp_kill_state+0x2e>
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	2b09      	cmp	r3, #9
 8005120:	d00b      	beq.n	800513a <tcp_kill_state+0x2e>
 8005122:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <tcp_kill_state+0x8c>)
 8005124:	f240 62e1 	movw	r2, #1761	; 0x6e1
 8005128:	491c      	ldr	r1, [pc, #112]	; (800519c <tcp_kill_state+0x90>)
 800512a:	481d      	ldr	r0, [pc, #116]	; (80051a0 <tcp_kill_state+0x94>)
 800512c:	f00d f8e4 	bl	80122f8 <iprintf>
 8005130:	2000      	movs	r0, #0
 8005132:	f00d f9e3 	bl	80124fc <fflush>
 8005136:	f00d f928 	bl	801238a <abort>

  inactivity = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800513e:	2300      	movs	r3, #0
 8005140:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005142:	4b18      	ldr	r3, [pc, #96]	; (80051a4 <tcp_kill_state+0x98>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	e017      	b.n	800517a <tcp_kill_state+0x6e>
    if (pcb->state == state) {
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	7d1b      	ldrb	r3, [r3, #20]
 800514e:	79fa      	ldrb	r2, [r7, #7]
 8005150:	429a      	cmp	r2, r3
 8005152:	d10f      	bne.n	8005174 <tcp_kill_state+0x68>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005154:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <tcp_kill_state+0x9c>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	1ad2      	subs	r2, r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	429a      	cmp	r2, r3
 8005162:	d307      	bcc.n	8005174 <tcp_kill_state+0x68>
        inactivity = tcp_ticks - pcb->tmr;
 8005164:	4b10      	ldr	r3, [pc, #64]	; (80051a8 <tcp_kill_state+0x9c>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e4      	bne.n	800514a <tcp_kill_state+0x3e>
      }
    }
  }
  if (inactive != NULL) {
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <tcp_kill_state+0x82>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8005186:	2100      	movs	r1, #0
 8005188:	6938      	ldr	r0, [r7, #16]
 800518a:	f7ff f903 	bl	8004394 <tcp_abandon>
  }
}
 800518e:	bf00      	nop
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	080140cc 	.word	0x080140cc
 800519c:	08014644 	.word	0x08014644
 80051a0:	08014100 	.word	0x08014100
 80051a4:	200018e4 	.word	0x200018e4
 80051a8:	200018e8 	.word	0x200018e8

080051ac <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80051b2:	2300      	movs	r3, #0
 80051b4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80051ba:	4b12      	ldr	r3, [pc, #72]	; (8005204 <tcp_kill_timewait+0x58>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	e012      	b.n	80051e8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80051c2:	4b11      	ldr	r3, [pc, #68]	; (8005208 <tcp_kill_timewait+0x5c>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	1ad2      	subs	r2, r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d307      	bcc.n	80051e2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80051d2:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <tcp_kill_timewait+0x5c>)
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1e9      	bne.n	80051c2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80051f4:	68b8      	ldr	r0, [r7, #8]
 80051f6:	f7ff f98f 	bl	8004518 <tcp_abort>
  }
}
 80051fa:	bf00      	nop
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	200018f4 	.word	0x200018f4
 8005208:	200018e8 	.word	0x200018e8

0800520c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8005212:	4b10      	ldr	r3, [pc, #64]	; (8005254 <tcp_handle_closepend+0x48>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8005218:	e014      	b.n	8005244 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8b5b      	ldrh	r3, [r3, #26]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b00      	cmp	r3, #0
 800522a:	d009      	beq.n	8005240 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8b5b      	ldrh	r3, [r3, #26]
 8005230:	f023 0308 	bic.w	r3, r3, #8
 8005234:	b29a      	uxth	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff f812 	bl	8004264 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e7      	bne.n	800521a <tcp_handle_closepend+0xe>
  }
}
 800524a:	bf00      	nop
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	200018e4 	.word	0x200018e4

08005258 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	4603      	mov	r3, r0
 8005260:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005262:	2000      	movs	r0, #0
 8005264:	f7fd fc8a 	bl	8002b7c <memp_malloc>
 8005268:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d126      	bne.n	80052be <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8005270:	f7ff ffcc 	bl	800520c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8005274:	f7ff ff9a 	bl	80051ac <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005278:	2000      	movs	r0, #0
 800527a:	f7fd fc7f 	bl	8002b7c <memp_malloc>
 800527e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d11b      	bne.n	80052be <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8005286:	2009      	movs	r0, #9
 8005288:	f7ff ff40 	bl	800510c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800528c:	2000      	movs	r0, #0
 800528e:	f7fd fc75 	bl	8002b7c <memp_malloc>
 8005292:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d111      	bne.n	80052be <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800529a:	2008      	movs	r0, #8
 800529c:	f7ff ff36 	bl	800510c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80052a0:	2000      	movs	r0, #0
 80052a2:	f7fd fc6b 	bl	8002b7c <memp_malloc>
 80052a6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d107      	bne.n	80052be <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff fedd 	bl	8005070 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80052b6:	2000      	movs	r0, #0
 80052b8:	f7fd fc60 	bl	8002b7c <memp_malloc>
 80052bc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d03f      	beq.n	8005344 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80052c4:	229c      	movs	r2, #156	; 0x9c
 80052c6:	2100      	movs	r1, #0
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f00d fa5c 	bl	8012786 <memset>
    pcb->prio = prio;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	79fa      	ldrb	r2, [r7, #7]
 80052d2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80052da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80052e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	22ff      	movs	r2, #255	; 0xff
 80052f2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80052fa:	865a      	strh	r2, [r3, #50]	; 0x32
    /* Set initial TCP's retransmission timeout to 3000 ms by default.
       This value could be configured in lwipopts */
    pcb->rto = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2206      	movs	r2, #6
 8005300:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2206      	movs	r2, #6
 8005308:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005310:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800531a:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <tcp_alloc+0xf8>)
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8005322:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <tcp_alloc+0xfc>)
 8005324:	781a      	ldrb	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8005330:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4a08      	ldr	r2, [pc, #32]	; (8005358 <tcp_alloc+0x100>)
 8005338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4a07      	ldr	r2, [pc, #28]	; (800535c <tcp_alloc+0x104>)
 8005340:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
    pcb_tci_init(pcb);
  }
  return pcb;
 8005344:	68fb      	ldr	r3, [r7, #12]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	200018e8 	.word	0x200018e8
 8005354:	20000732 	.word	0x20000732
 8005358:	08005005 	.word	0x08005005
 800535c:	006ddd00 	.word	0x006ddd00

08005360 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d107      	bne.n	800537e <tcp_pcb_purge+0x1e>
 800536e:	4b21      	ldr	r3, [pc, #132]	; (80053f4 <tcp_pcb_purge+0x94>)
 8005370:	f640 025b 	movw	r2, #2139	; 0x85b
 8005374:	4920      	ldr	r1, [pc, #128]	; (80053f8 <tcp_pcb_purge+0x98>)
 8005376:	4821      	ldr	r0, [pc, #132]	; (80053fc <tcp_pcb_purge+0x9c>)
 8005378:	f7fb fed7 	bl	800112a <lwip_win32_platform_diag>
 800537c:	e037      	b.n	80053ee <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	7d1b      	ldrb	r3, [r3, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d033      	beq.n	80053ee <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800538a:	2b0a      	cmp	r3, #10
 800538c:	d02f      	beq.n	80053ee <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8005392:	2b01      	cmp	r3, #1
 8005394:	d02b      	beq.n	80053ee <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800539a:	2b00      	cmp	r3, #0
 800539c:	d007      	beq.n	80053ae <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fe fa5e 	bl	8003864 <pbuf_free>
      pcb->refused_data = NULL;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f9ac 	bl	8005714 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053c2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff fdbd 	bl	8004f48 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff fdb8 	bl	8004f48 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	66da      	str	r2, [r3, #108]	; 0x6c
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	080140cc 	.word	0x080140cc
 80053f8:	08014704 	.word	0x08014704
 80053fc:	08014100 	.word	0x08014100

08005400 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10b      	bne.n	8005428 <tcp_pcb_remove+0x28>
 8005410:	4b4a      	ldr	r3, [pc, #296]	; (800553c <tcp_pcb_remove+0x13c>)
 8005412:	f640 028d 	movw	r2, #2189	; 0x88d
 8005416:	494a      	ldr	r1, [pc, #296]	; (8005540 <tcp_pcb_remove+0x140>)
 8005418:	484a      	ldr	r0, [pc, #296]	; (8005544 <tcp_pcb_remove+0x144>)
 800541a:	f00c ff6d 	bl	80122f8 <iprintf>
 800541e:	2000      	movs	r0, #0
 8005420:	f00d f86c 	bl	80124fc <fflush>
 8005424:	f00c ffb1 	bl	801238a <abort>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10b      	bne.n	8005446 <tcp_pcb_remove+0x46>
 800542e:	4b43      	ldr	r3, [pc, #268]	; (800553c <tcp_pcb_remove+0x13c>)
 8005430:	f640 028e 	movw	r2, #2190	; 0x88e
 8005434:	4944      	ldr	r1, [pc, #272]	; (8005548 <tcp_pcb_remove+0x148>)
 8005436:	4843      	ldr	r0, [pc, #268]	; (8005544 <tcp_pcb_remove+0x144>)
 8005438:	f00c ff5e 	bl	80122f8 <iprintf>
 800543c:	2000      	movs	r0, #0
 800543e:	f00d f85d 	bl	80124fc <fflush>
 8005442:	f00c ffa2 	bl	801238a <abort>

  TCP_RMV(pcblist, pcb);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d105      	bne.n	800545c <tcp_pcb_remove+0x5c>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	e013      	b.n	8005484 <tcp_pcb_remove+0x84>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	e00c      	b.n	800547e <tcp_pcb_remove+0x7e>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d104      	bne.n	8005478 <tcp_pcb_remove+0x78>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	60da      	str	r2, [r3, #12]
 8005476:	e005      	b.n	8005484 <tcp_pcb_remove+0x84>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1ef      	bne.n	8005464 <tcp_pcb_remove+0x64>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2200      	movs	r2, #0
 8005488:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800548a:	6838      	ldr	r0, [r7, #0]
 800548c:	f7ff ff68 	bl	8005360 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	7d1b      	ldrb	r3, [r3, #20]
 8005494:	2b0a      	cmp	r3, #10
 8005496:	d013      	beq.n	80054c0 <tcp_pcb_remove+0xc0>
      (pcb->state != LISTEN) &&
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800549c:	2b01      	cmp	r3, #1
 800549e:	d00f      	beq.n	80054c0 <tcp_pcb_remove+0xc0>
      (pcb->flags & TF_ACK_DELAY)) {
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	8b5b      	ldrh	r3, [r3, #26]
 80054a4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d009      	beq.n	80054c0 <tcp_pcb_remove+0xc0>
    tcp_ack_now(pcb);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	8b5b      	ldrh	r3, [r3, #26]
 80054b0:	f043 0302 	orr.w	r3, r3, #2
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80054ba:	6838      	ldr	r0, [r7, #0]
 80054bc:	f003 f88e 	bl	80085dc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	7d1b      	ldrb	r3, [r3, #20]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d02f      	beq.n	8005528 <tcp_pcb_remove+0x128>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00b      	beq.n	80054e8 <tcp_pcb_remove+0xe8>
 80054d0:	4b1a      	ldr	r3, [pc, #104]	; (800553c <tcp_pcb_remove+0x13c>)
 80054d2:	f640 029d 	movw	r2, #2205	; 0x89d
 80054d6:	491d      	ldr	r1, [pc, #116]	; (800554c <tcp_pcb_remove+0x14c>)
 80054d8:	481a      	ldr	r0, [pc, #104]	; (8005544 <tcp_pcb_remove+0x144>)
 80054da:	f00c ff0d 	bl	80122f8 <iprintf>
 80054de:	2000      	movs	r0, #0
 80054e0:	f00d f80c 	bl	80124fc <fflush>
 80054e4:	f00c ff51 	bl	801238a <abort>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00b      	beq.n	8005508 <tcp_pcb_remove+0x108>
 80054f0:	4b12      	ldr	r3, [pc, #72]	; (800553c <tcp_pcb_remove+0x13c>)
 80054f2:	f640 029e 	movw	r2, #2206	; 0x89e
 80054f6:	4916      	ldr	r1, [pc, #88]	; (8005550 <tcp_pcb_remove+0x150>)
 80054f8:	4812      	ldr	r0, [pc, #72]	; (8005544 <tcp_pcb_remove+0x144>)
 80054fa:	f00c fefd 	bl	80122f8 <iprintf>
 80054fe:	2000      	movs	r0, #0
 8005500:	f00c fffc 	bl	80124fc <fflush>
 8005504:	f00c ff41 	bl	801238a <abort>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00b      	beq.n	8005528 <tcp_pcb_remove+0x128>
 8005510:	4b0a      	ldr	r3, [pc, #40]	; (800553c <tcp_pcb_remove+0x13c>)
 8005512:	f44f 620a 	mov.w	r2, #2208	; 0x8a0
 8005516:	490f      	ldr	r1, [pc, #60]	; (8005554 <tcp_pcb_remove+0x154>)
 8005518:	480a      	ldr	r0, [pc, #40]	; (8005544 <tcp_pcb_remove+0x144>)
 800551a:	f00c feed 	bl	80122f8 <iprintf>
 800551e:	2000      	movs	r0, #0
 8005520:	f00c ffec 	bl	80124fc <fflush>
 8005524:	f00c ff31 	bl	801238a <abort>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2200      	movs	r2, #0
 8005532:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8005534:	bf00      	nop
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	080140cc 	.word	0x080140cc
 8005540:	08014720 	.word	0x08014720
 8005544:	08014100 	.word	0x08014100
 8005548:	0801473c 	.word	0x0801473c
 800554c:	0801475c 	.word	0x0801475c
 8005550:	08014774 	.word	0x08014774
 8005554:	08014790 	.word	0x08014790

08005558 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10b      	bne.n	800557e <tcp_next_iss+0x26>
 8005566:	4b0c      	ldr	r3, [pc, #48]	; (8005598 <tcp_next_iss+0x40>)
 8005568:	f640 02b9 	movw	r2, #2233	; 0x8b9
 800556c:	490b      	ldr	r1, [pc, #44]	; (800559c <tcp_next_iss+0x44>)
 800556e:	480c      	ldr	r0, [pc, #48]	; (80055a0 <tcp_next_iss+0x48>)
 8005570:	f00c fec2 	bl	80122f8 <iprintf>
 8005574:	2000      	movs	r0, #0
 8005576:	f00c ffc1 	bl	80124fc <fflush>
 800557a:	f00c ff06 	bl	801238a <abort>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800557e:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <tcp_next_iss+0x4c>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <tcp_next_iss+0x50>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4413      	add	r3, r2
 8005588:	4a06      	ldr	r2, [pc, #24]	; (80055a4 <tcp_next_iss+0x4c>)
 800558a:	6013      	str	r3, [r2, #0]
  return iss;
 800558c:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <tcp_next_iss+0x4c>)
 800558e:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	080140cc 	.word	0x080140cc
 800559c:	080147a8 	.word	0x080147a8
 80055a0:	08014100 	.word	0x08014100
 80055a4:	20000008 	.word	0x20000008
 80055a8:	200018e8 	.word	0x200018e8

080055ac <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10b      	bne.n	80055d8 <tcp_eff_send_mss_netif+0x2c>
 80055c0:	4b17      	ldr	r3, [pc, #92]	; (8005620 <tcp_eff_send_mss_netif+0x74>)
 80055c2:	f640 02cf 	movw	r2, #2255	; 0x8cf
 80055c6:	4917      	ldr	r1, [pc, #92]	; (8005624 <tcp_eff_send_mss_netif+0x78>)
 80055c8:	4817      	ldr	r0, [pc, #92]	; (8005628 <tcp_eff_send_mss_netif+0x7c>)
 80055ca:	f00c fe95 	bl	80122f8 <iprintf>
 80055ce:	2000      	movs	r0, #0
 80055d0:	f00c ff94 	bl	80124fc <fflush>
 80055d4:	f00c fed9 	bl	801238a <abort>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <tcp_eff_send_mss_netif+0x36>
      return sendmss;
 80055de:	89fb      	ldrh	r3, [r7, #14]
 80055e0:	e019      	b.n	8005616 <tcp_eff_send_mss_netif+0x6a>
    }
    mtu = outif->mtu;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	8c1b      	ldrh	r3, [r3, #32]
 80055e6:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80055e8:	8afb      	ldrh	r3, [r7, #22]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d012      	beq.n	8005614 <tcp_eff_send_mss_netif+0x68>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80055ee:	2328      	movs	r3, #40	; 0x28
 80055f0:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80055f2:	8afa      	ldrh	r2, [r7, #22]
 80055f4:	8abb      	ldrh	r3, [r7, #20]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d904      	bls.n	8005604 <tcp_eff_send_mss_netif+0x58>
 80055fa:	8afa      	ldrh	r2, [r7, #22]
 80055fc:	8abb      	ldrh	r3, [r7, #20]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	b29b      	uxth	r3, r3
 8005602:	e000      	b.n	8005606 <tcp_eff_send_mss_netif+0x5a>
 8005604:	2300      	movs	r3, #0
 8005606:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8005608:	8a7a      	ldrh	r2, [r7, #18]
 800560a:	89fb      	ldrh	r3, [r7, #14]
 800560c:	4293      	cmp	r3, r2
 800560e:	bf28      	it	cs
 8005610:	4613      	movcs	r3, r2
 8005612:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8005614:	89fb      	ldrh	r3, [r7, #14]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	080140cc 	.word	0x080140cc
 8005624:	080147c4 	.word	0x080147c4
 8005628:	08014100 	.word	0x08014100

0800562c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d11d      	bne.n	800567c <tcp_netif_ip_addr_changed_pcblist+0x50>
 8005640:	4b12      	ldr	r3, [pc, #72]	; (800568c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8005642:	f640 120a 	movw	r2, #2314	; 0x90a
 8005646:	4912      	ldr	r1, [pc, #72]	; (8005690 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8005648:	4812      	ldr	r0, [pc, #72]	; (8005694 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 800564a:	f00c fe55 	bl	80122f8 <iprintf>
 800564e:	2000      	movs	r0, #0
 8005650:	f00c ff54 	bl	80124fc <fflush>
 8005654:	f00c fe99 	bl	801238a <abort>

  while (pcb != NULL) {
    /* PCB bound to current local interface address? */
    if (ip_addr_eq(&pcb->local_ip, old_addr)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d108      	bne.n	8005676 <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f7fe ff54 	bl	8004518 <tcp_abort>
      pcb = next;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	e002      	b.n	800567c <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1ea      	bne.n	8005658 <tcp_netif_ip_addr_changed_pcblist+0x2c>
    }
  }
}
 8005682:	bf00      	nop
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	080140cc 	.word	0x080140cc
 8005690:	080147ec 	.word	0x080147ec
 8005694:	08014100 	.word	0x08014100

08005698 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d02a      	beq.n	80056fe <tcp_netif_ip_addr_changed+0x66>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d026      	beq.n	80056fe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80056b0:	4b15      	ldr	r3, [pc, #84]	; (8005708 <tcp_netif_ip_addr_changed+0x70>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7ff ffb8 	bl	800562c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80056bc:	4b13      	ldr	r3, [pc, #76]	; (800570c <tcp_netif_ip_addr_changed+0x74>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4619      	mov	r1, r3
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7ff ffb2 	bl	800562c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d017      	beq.n	80056fe <tcp_netif_ip_addr_changed+0x66>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d013      	beq.n	80056fe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80056d6:	4b0e      	ldr	r3, [pc, #56]	; (8005710 <tcp_netif_ip_addr_changed+0x78>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e00c      	b.n	80056f8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_eq(&lpcb->local_ip, old_addr)) {
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d103      	bne.n	80056f2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1ef      	bne.n	80056de <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80056fe:	bf00      	nop
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	200018e4 	.word	0x200018e4
 800570c:	200018f0 	.word	0x200018f0
 8005710:	200018ec 	.word	0x200018ec

08005714 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005720:	2b00      	cmp	r3, #0
 8005722:	d007      	beq.n	8005734 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff fc0d 	bl	8004f48 <tcp_segs_free>
    pcb->ooseq = NULL;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8005734:	bf00      	nop
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800573c:	b590      	push	{r4, r7, lr}
 800573e:	b08d      	sub	sp, #52	; 0x34
 8005740:	af04      	add	r7, sp, #16
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10a      	bne.n	8005762 <tcp_input+0x26>
 800574c:	4ba4      	ldr	r3, [pc, #656]	; (80059e0 <tcp_input+0x2a4>)
 800574e:	2283      	movs	r2, #131	; 0x83
 8005750:	49a4      	ldr	r1, [pc, #656]	; (80059e4 <tcp_input+0x2a8>)
 8005752:	48a5      	ldr	r0, [pc, #660]	; (80059e8 <tcp_input+0x2ac>)
 8005754:	f00c fdd0 	bl	80122f8 <iprintf>
 8005758:	2000      	movs	r0, #0
 800575a:	f00c fecf 	bl	80124fc <fflush>
 800575e:	f00c fe14 	bl	801238a <abort>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	4aa1      	ldr	r2, [pc, #644]	; (80059ec <tcp_input+0x2b0>)
 8005768:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	895b      	ldrh	r3, [r3, #10]
 800576e:	2b13      	cmp	r3, #19
 8005770:	f240 8413 	bls.w	8005f9a <tcp_input+0x85e>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005774:	4b9e      	ldr	r3, [pc, #632]	; (80059f0 <tcp_input+0x2b4>)
 8005776:	695a      	ldr	r2, [r3, #20]
 8005778:	4b9d      	ldr	r3, [pc, #628]	; (80059f0 <tcp_input+0x2b4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4619      	mov	r1, r3
 800577e:	4610      	mov	r0, r2
 8005780:	f7fc fd4a 	bl	8002218 <ip4_addr_isbroadcast_u32>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	f040 8410 	bne.w	8005fac <tcp_input+0x870>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800578c:	4b98      	ldr	r3, [pc, #608]	; (80059f0 <tcp_input+0x2b4>)
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005794:	2be0      	cmp	r3, #224	; 0xe0
 8005796:	f000 8409 	beq.w	8005fac <tcp_input+0x870>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	891a      	ldrh	r2, [r3, #8]
 800579e:	4b95      	ldr	r3, [pc, #596]	; (80059f4 <tcp_input+0x2b8>)
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	4b95      	ldr	r3, [pc, #596]	; (80059f8 <tcp_input+0x2bc>)
 80057a4:	2106      	movs	r1, #6
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fb fff4 	bl	8001794 <ip_chksum_pseudo>
 80057ac:	4603      	mov	r3, r0
 80057ae:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 80057b0:	8a3b      	ldrh	r3, [r7, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f040 83f3 	bne.w	8005f9e <tcp_input+0x862>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80057b8:	4b8c      	ldr	r3, [pc, #560]	; (80059ec <tcp_input+0x2b0>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	899b      	ldrh	r3, [r3, #12]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fb feb5 	bl	8001530 <lwip_htons>
 80057c6:	4603      	mov	r3, r0
 80057c8:	0b1b      	lsrs	r3, r3, #12
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	2b13      	cmp	r3, #19
 80057d6:	f240 83e4 	bls.w	8005fa2 <tcp_input+0x866>
 80057da:	7bfb      	ldrb	r3, [r7, #15]
 80057dc:	b29a      	uxth	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	891b      	ldrh	r3, [r3, #8]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	f200 83dd 	bhi.w	8005fa2 <tcp_input+0x866>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b14      	subs	r3, #20
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	4b82      	ldr	r3, [pc, #520]	; (80059fc <tcp_input+0x2c0>)
 80057f2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80057f4:	4b82      	ldr	r3, [pc, #520]	; (8005a00 <tcp_input+0x2c4>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	895a      	ldrh	r2, [r3, #10]
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	b29b      	uxth	r3, r3
 8005802:	429a      	cmp	r2, r3
 8005804:	d309      	bcc.n	800581a <tcp_input+0xde>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8005806:	4b7d      	ldr	r3, [pc, #500]	; (80059fc <tcp_input+0x2c0>)
 8005808:	881a      	ldrh	r2, [r3, #0]
 800580a:	4b7e      	ldr	r3, [pc, #504]	; (8005a04 <tcp_input+0x2c8>)
 800580c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800580e:	7bfb      	ldrb	r3, [r7, #15]
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fd ff9c 	bl	8003750 <pbuf_remove_header>
 8005818:	e05d      	b.n	80058d6 <tcp_input+0x19a>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <tcp_input+0xfc>
 8005822:	4b6f      	ldr	r3, [pc, #444]	; (80059e0 <tcp_input+0x2a4>)
 8005824:	22c2      	movs	r2, #194	; 0xc2
 8005826:	4978      	ldr	r1, [pc, #480]	; (8005a08 <tcp_input+0x2cc>)
 8005828:	486f      	ldr	r0, [pc, #444]	; (80059e8 <tcp_input+0x2ac>)
 800582a:	f00c fd65 	bl	80122f8 <iprintf>
 800582e:	2000      	movs	r0, #0
 8005830:	f00c fe64 	bl	80124fc <fflush>
 8005834:	f00c fda9 	bl	801238a <abort>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8005838:	2114      	movs	r1, #20
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fd ff88 	bl	8003750 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	895a      	ldrh	r2, [r3, #10]
 8005844:	4b6f      	ldr	r3, [pc, #444]	; (8005a04 <tcp_input+0x2c8>)
 8005846:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8005848:	4b6c      	ldr	r3, [pc, #432]	; (80059fc <tcp_input+0x2c0>)
 800584a:	881a      	ldrh	r2, [r3, #0]
 800584c:	4b6d      	ldr	r3, [pc, #436]	; (8005a04 <tcp_input+0x2c8>)
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8005854:	4b6b      	ldr	r3, [pc, #428]	; (8005a04 <tcp_input+0x2c8>)
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fd ff78 	bl	8003750 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	895b      	ldrh	r3, [r3, #10]
 8005866:	89ba      	ldrh	r2, [r7, #12]
 8005868:	429a      	cmp	r2, r3
 800586a:	f200 839c 	bhi.w	8005fa6 <tcp_input+0x86a>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	4a62      	ldr	r2, [pc, #392]	; (8005a00 <tcp_input+0x2c4>)
 8005876:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	89ba      	ldrh	r2, [r7, #12]
 800587e:	4611      	mov	r1, r2
 8005880:	4618      	mov	r0, r3
 8005882:	f7fd ff65 	bl	8003750 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	891a      	ldrh	r2, [r3, #8]
 800588a:	89bb      	ldrh	r3, [r7, #12]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	b29a      	uxth	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	895b      	ldrh	r3, [r3, #10]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00a      	beq.n	80058b2 <tcp_input+0x176>
 800589c:	4b50      	ldr	r3, [pc, #320]	; (80059e0 <tcp_input+0x2a4>)
 800589e:	22df      	movs	r2, #223	; 0xdf
 80058a0:	495a      	ldr	r1, [pc, #360]	; (8005a0c <tcp_input+0x2d0>)
 80058a2:	4851      	ldr	r0, [pc, #324]	; (80059e8 <tcp_input+0x2ac>)
 80058a4:	f00c fd28 	bl	80122f8 <iprintf>
 80058a8:	2000      	movs	r0, #0
 80058aa:	f00c fe27 	bl	80124fc <fflush>
 80058ae:	f00c fd6c 	bl	801238a <abort>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	891a      	ldrh	r2, [r3, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	891b      	ldrh	r3, [r3, #8]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d00a      	beq.n	80058d6 <tcp_input+0x19a>
 80058c0:	4b47      	ldr	r3, [pc, #284]	; (80059e0 <tcp_input+0x2a4>)
 80058c2:	22e0      	movs	r2, #224	; 0xe0
 80058c4:	4952      	ldr	r1, [pc, #328]	; (8005a10 <tcp_input+0x2d4>)
 80058c6:	4848      	ldr	r0, [pc, #288]	; (80059e8 <tcp_input+0x2ac>)
 80058c8:	f00c fd16 	bl	80122f8 <iprintf>
 80058cc:	2000      	movs	r0, #0
 80058ce:	f00c fe15 	bl	80124fc <fflush>
 80058d2:	f00c fd5a 	bl	801238a <abort>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80058d6:	4b45      	ldr	r3, [pc, #276]	; (80059ec <tcp_input+0x2b0>)
 80058d8:	681c      	ldr	r4, [r3, #0]
 80058da:	4b44      	ldr	r3, [pc, #272]	; (80059ec <tcp_input+0x2b0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fb fe24 	bl	8001530 <lwip_htons>
 80058e8:	4603      	mov	r3, r0
 80058ea:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80058ec:	4b3f      	ldr	r3, [pc, #252]	; (80059ec <tcp_input+0x2b0>)
 80058ee:	681c      	ldr	r4, [r3, #0]
 80058f0:	4b3e      	ldr	r3, [pc, #248]	; (80059ec <tcp_input+0x2b0>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	885b      	ldrh	r3, [r3, #2]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fb fe19 	bl	8001530 <lwip_htons>
 80058fe:	4603      	mov	r3, r0
 8005900:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8005902:	4b3a      	ldr	r3, [pc, #232]	; (80059ec <tcp_input+0x2b0>)
 8005904:	681c      	ldr	r4, [r3, #0]
 8005906:	4b39      	ldr	r3, [pc, #228]	; (80059ec <tcp_input+0x2b0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	4618      	mov	r0, r3
 800590e:	f7fb fe24 	bl	800155a <lwip_htonl>
 8005912:	4603      	mov	r3, r0
 8005914:	6063      	str	r3, [r4, #4]
 8005916:	6863      	ldr	r3, [r4, #4]
 8005918:	4a3e      	ldr	r2, [pc, #248]	; (8005a14 <tcp_input+0x2d8>)
 800591a:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800591c:	4b33      	ldr	r3, [pc, #204]	; (80059ec <tcp_input+0x2b0>)
 800591e:	681c      	ldr	r4, [r3, #0]
 8005920:	4b32      	ldr	r3, [pc, #200]	; (80059ec <tcp_input+0x2b0>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	4618      	mov	r0, r3
 8005928:	f7fb fe17 	bl	800155a <lwip_htonl>
 800592c:	4603      	mov	r3, r0
 800592e:	60a3      	str	r3, [r4, #8]
 8005930:	68a3      	ldr	r3, [r4, #8]
 8005932:	4a39      	ldr	r2, [pc, #228]	; (8005a18 <tcp_input+0x2dc>)
 8005934:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8005936:	4b2d      	ldr	r3, [pc, #180]	; (80059ec <tcp_input+0x2b0>)
 8005938:	681c      	ldr	r4, [r3, #0]
 800593a:	4b2c      	ldr	r3, [pc, #176]	; (80059ec <tcp_input+0x2b0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	89db      	ldrh	r3, [r3, #14]
 8005940:	b29b      	uxth	r3, r3
 8005942:	4618      	mov	r0, r3
 8005944:	f7fb fdf4 	bl	8001530 <lwip_htons>
 8005948:	4603      	mov	r3, r0
 800594a:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800594c:	4b27      	ldr	r3, [pc, #156]	; (80059ec <tcp_input+0x2b0>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	899b      	ldrh	r3, [r3, #12]
 8005952:	b29b      	uxth	r3, r3
 8005954:	4618      	mov	r0, r3
 8005956:	f7fb fdeb 	bl	8001530 <lwip_htons>
 800595a:	4603      	mov	r3, r0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005962:	b2da      	uxtb	r2, r3
 8005964:	4b2d      	ldr	r3, [pc, #180]	; (8005a1c <tcp_input+0x2e0>)
 8005966:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	891a      	ldrh	r2, [r3, #8]
 800596c:	4b2c      	ldr	r3, [pc, #176]	; (8005a20 <tcp_input+0x2e4>)
 800596e:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8005970:	4b2a      	ldr	r3, [pc, #168]	; (8005a1c <tcp_input+0x2e0>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00c      	beq.n	8005996 <tcp_input+0x25a>
    tcplen++;
 800597c:	4b28      	ldr	r3, [pc, #160]	; (8005a20 <tcp_input+0x2e4>)
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	3301      	adds	r3, #1
 8005982:	b29a      	uxth	r2, r3
 8005984:	4b26      	ldr	r3, [pc, #152]	; (8005a20 <tcp_input+0x2e4>)
 8005986:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	891a      	ldrh	r2, [r3, #8]
 800598c:	4b24      	ldr	r3, [pc, #144]	; (8005a20 <tcp_input+0x2e4>)
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	f200 830a 	bhi.w	8005faa <tcp_input+0x86e>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8005996:	2300      	movs	r3, #0
 8005998:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800599a:	4b22      	ldr	r3, [pc, #136]	; (8005a24 <tcp_input+0x2e8>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	61fb      	str	r3, [r7, #28]
 80059a0:	e0b7      	b.n	8005b12 <tcp_input+0x3d6>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	7d1b      	ldrb	r3, [r3, #20]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10a      	bne.n	80059c0 <tcp_input+0x284>
 80059aa:	4b0d      	ldr	r3, [pc, #52]	; (80059e0 <tcp_input+0x2a4>)
 80059ac:	22fb      	movs	r2, #251	; 0xfb
 80059ae:	491e      	ldr	r1, [pc, #120]	; (8005a28 <tcp_input+0x2ec>)
 80059b0:	480d      	ldr	r0, [pc, #52]	; (80059e8 <tcp_input+0x2ac>)
 80059b2:	f00c fca1 	bl	80122f8 <iprintf>
 80059b6:	2000      	movs	r0, #0
 80059b8:	f00c fda0 	bl	80124fc <fflush>
 80059bc:	f00c fce5 	bl	801238a <abort>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	7d1b      	ldrb	r3, [r3, #20]
 80059c4:	2b0a      	cmp	r3, #10
 80059c6:	d133      	bne.n	8005a30 <tcp_input+0x2f4>
 80059c8:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <tcp_input+0x2a4>)
 80059ca:	22fc      	movs	r2, #252	; 0xfc
 80059cc:	4917      	ldr	r1, [pc, #92]	; (8005a2c <tcp_input+0x2f0>)
 80059ce:	4806      	ldr	r0, [pc, #24]	; (80059e8 <tcp_input+0x2ac>)
 80059d0:	f00c fc92 	bl	80122f8 <iprintf>
 80059d4:	2000      	movs	r0, #0
 80059d6:	f00c fd91 	bl	80124fc <fflush>
 80059da:	f00c fcd6 	bl	801238a <abort>
 80059de:	bf00      	nop
 80059e0:	08014820 	.word	0x08014820
 80059e4:	08014844 	.word	0x08014844
 80059e8:	0801485c 	.word	0x0801485c
 80059ec:	20000748 	.word	0x20000748
 80059f0:	200008a8 	.word	0x200008a8
 80059f4:	200008bc 	.word	0x200008bc
 80059f8:	200008b8 	.word	0x200008b8
 80059fc:	2000074c 	.word	0x2000074c
 8005a00:	20000750 	.word	0x20000750
 8005a04:	2000074e 	.word	0x2000074e
 8005a08:	08014884 	.word	0x08014884
 8005a0c:	08014894 	.word	0x08014894
 8005a10:	080148a0 	.word	0x080148a0
 8005a14:	20000758 	.word	0x20000758
 8005a18:	2000075c 	.word	0x2000075c
 8005a1c:	20000764 	.word	0x20000764
 8005a20:	20000762 	.word	0x20000762
 8005a24:	200018e4 	.word	0x200018e4
 8005a28:	080148c0 	.word	0x080148c0
 8005a2c:	080148e8 	.word	0x080148e8
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	7d1b      	ldrb	r3, [r3, #20]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d10a      	bne.n	8005a4e <tcp_input+0x312>
 8005a38:	4b88      	ldr	r3, [pc, #544]	; (8005c5c <tcp_input+0x520>)
 8005a3a:	22fd      	movs	r2, #253	; 0xfd
 8005a3c:	4988      	ldr	r1, [pc, #544]	; (8005c60 <tcp_input+0x524>)
 8005a3e:	4889      	ldr	r0, [pc, #548]	; (8005c64 <tcp_input+0x528>)
 8005a40:	f00c fc5a 	bl	80122f8 <iprintf>
 8005a44:	2000      	movs	r0, #0
 8005a46:	f00c fd59 	bl	80124fc <fflush>
 8005a4a:	f00c fc9e 	bl	801238a <abort>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	7a1b      	ldrb	r3, [r3, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00c      	beq.n	8005a70 <tcp_input+0x334>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	7a1a      	ldrb	r2, [r3, #8]
 8005a5a:	4b83      	ldr	r3, [pc, #524]	; (8005c68 <tcp_input+0x52c>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a62:	3301      	adds	r3, #1
 8005a64:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d002      	beq.n	8005a70 <tcp_input+0x334>
      prev = pcb;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	61bb      	str	r3, [r7, #24]
      continue;
 8005a6e:	e04d      	b.n	8005b0c <tcp_input+0x3d0>
    }

    if (pcb->remote_port == tcphdr->src &&
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	8b1a      	ldrh	r2, [r3, #24]
 8005a74:	4b7d      	ldr	r3, [pc, #500]	; (8005c6c <tcp_input+0x530>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d143      	bne.n	8005b08 <tcp_input+0x3cc>
        pcb->local_port == tcphdr->dest &&
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	8ada      	ldrh	r2, [r3, #22]
 8005a84:	4b79      	ldr	r3, [pc, #484]	; (8005c6c <tcp_input+0x530>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	885b      	ldrh	r3, [r3, #2]
 8005a8a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d13b      	bne.n	8005b08 <tcp_input+0x3cc>
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	4b74      	ldr	r3, [pc, #464]	; (8005c68 <tcp_input+0x52c>)
 8005a96:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d135      	bne.n	8005b08 <tcp_input+0x3cc>
        ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	4b71      	ldr	r3, [pc, #452]	; (8005c68 <tcp_input+0x52c>)
 8005aa2:	695b      	ldr	r3, [r3, #20]
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d12f      	bne.n	8005b08 <tcp_input+0x3cc>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d10b      	bne.n	8005aca <tcp_input+0x38e>
 8005ab2:	4b6a      	ldr	r3, [pc, #424]	; (8005c5c <tcp_input+0x520>)
 8005ab4:	f240 120d 	movw	r2, #269	; 0x10d
 8005ab8:	496d      	ldr	r1, [pc, #436]	; (8005c70 <tcp_input+0x534>)
 8005aba:	486a      	ldr	r0, [pc, #424]	; (8005c64 <tcp_input+0x528>)
 8005abc:	f00c fc1c 	bl	80122f8 <iprintf>
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	f00c fd1b 	bl	80124fc <fflush>
 8005ac6:	f00c fc60 	bl	801238a <abort>
      if (prev != NULL) {
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <tcp_input+0x3aa>
        prev->next = pcb->next;
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	68da      	ldr	r2, [r3, #12]
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8005ad8:	4b66      	ldr	r3, [pc, #408]	; (8005c74 <tcp_input+0x538>)
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8005ae0:	4a64      	ldr	r2, [pc, #400]	; (8005c74 <tcp_input+0x538>)
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d115      	bne.n	8005b1c <tcp_input+0x3e0>
 8005af0:	4b5a      	ldr	r3, [pc, #360]	; (8005c5c <tcp_input+0x520>)
 8005af2:	f240 1215 	movw	r2, #277	; 0x115
 8005af6:	4960      	ldr	r1, [pc, #384]	; (8005c78 <tcp_input+0x53c>)
 8005af8:	485a      	ldr	r0, [pc, #360]	; (8005c64 <tcp_input+0x528>)
 8005afa:	f00c fbfd 	bl	80122f8 <iprintf>
 8005afe:	2000      	movs	r0, #0
 8005b00:	f00c fcfc 	bl	80124fc <fflush>
 8005b04:	f00c fc41 	bl	801238a <abort>
      break;
    }
    prev = pcb;
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	61fb      	str	r3, [r7, #28]
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f47f af44 	bne.w	80059a2 <tcp_input+0x266>
 8005b1a:	e000      	b.n	8005b1e <tcp_input+0x3e2>
      break;
 8005b1c:	bf00      	nop
  }

  if (pcb == NULL) {
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f040 80b1 	bne.w	8005c88 <tcp_input+0x54c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005b26:	4b55      	ldr	r3, [pc, #340]	; (8005c7c <tcp_input+0x540>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	61fb      	str	r3, [r7, #28]
 8005b2c:	e044      	b.n	8005bb8 <tcp_input+0x47c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	7d1b      	ldrb	r3, [r3, #20]
 8005b32:	2b0a      	cmp	r3, #10
 8005b34:	d00b      	beq.n	8005b4e <tcp_input+0x412>
 8005b36:	4b49      	ldr	r3, [pc, #292]	; (8005c5c <tcp_input+0x520>)
 8005b38:	f240 121f 	movw	r2, #287	; 0x11f
 8005b3c:	4950      	ldr	r1, [pc, #320]	; (8005c80 <tcp_input+0x544>)
 8005b3e:	4849      	ldr	r0, [pc, #292]	; (8005c64 <tcp_input+0x528>)
 8005b40:	f00c fbda 	bl	80122f8 <iprintf>
 8005b44:	2000      	movs	r0, #0
 8005b46:	f00c fcd9 	bl	80124fc <fflush>
 8005b4a:	f00c fc1e 	bl	801238a <abort>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	7a1b      	ldrb	r3, [r3, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d009      	beq.n	8005b6a <tcp_input+0x42e>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	7a1a      	ldrb	r2, [r3, #8]
 8005b5a:	4b43      	ldr	r3, [pc, #268]	; (8005c68 <tcp_input+0x52c>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005b62:	3301      	adds	r3, #1
 8005b64:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d122      	bne.n	8005bb0 <tcp_input+0x474>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	8b1a      	ldrh	r2, [r3, #24]
 8005b6e:	4b3f      	ldr	r3, [pc, #252]	; (8005c6c <tcp_input+0x530>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d11b      	bne.n	8005bb2 <tcp_input+0x476>
          pcb->local_port == tcphdr->dest &&
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	8ada      	ldrh	r2, [r3, #22]
 8005b7e:	4b3b      	ldr	r3, [pc, #236]	; (8005c6c <tcp_input+0x530>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	885b      	ldrh	r3, [r3, #2]
 8005b84:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d113      	bne.n	8005bb2 <tcp_input+0x476>
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	4b36      	ldr	r3, [pc, #216]	; (8005c68 <tcp_input+0x52c>)
 8005b90:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d10d      	bne.n	8005bb2 <tcp_input+0x476>
          ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4b33      	ldr	r3, [pc, #204]	; (8005c68 <tcp_input+0x52c>)
 8005b9c:	695b      	ldr	r3, [r3, #20]
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d107      	bne.n	8005bb2 <tcp_input+0x476>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8005ba2:	69f8      	ldr	r0, [r7, #28]
 8005ba4:	f000 fb62 	bl	800626c <tcp_timewait_input>
        }
        pbuf_free(p);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7fd fe5b 	bl	8003864 <pbuf_free>
        return;
 8005bae:	e202      	b.n	8005fb6 <tcp_input+0x87a>
        continue;
 8005bb0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1b7      	bne.n	8005b2e <tcp_input+0x3f2>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005bc2:	4b30      	ldr	r3, [pc, #192]	; (8005c84 <tcp_input+0x548>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	e02a      	b.n	8005c20 <tcp_input+0x4e4>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	7a1b      	ldrb	r3, [r3, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00c      	beq.n	8005bec <tcp_input+0x4b0>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	7a1a      	ldrb	r2, [r3, #8]
 8005bd6:	4b24      	ldr	r3, [pc, #144]	; (8005c68 <tcp_input+0x52c>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005bde:	3301      	adds	r3, #1
 8005be0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d002      	beq.n	8005bec <tcp_input+0x4b0>
        prev = (struct tcp_pcb *)lpcb;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	61bb      	str	r3, [r7, #24]
        continue;
 8005bea:	e016      	b.n	8005c1a <tcp_input+0x4de>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	8ada      	ldrh	r2, [r3, #22]
 8005bf0:	4b1e      	ldr	r3, [pc, #120]	; (8005c6c <tcp_input+0x530>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	885b      	ldrh	r3, [r3, #2]
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d10c      	bne.n	8005c16 <tcp_input+0x4da>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_eq(&lpcb->local_ip, ip_current_dest_addr())) {
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	4b19      	ldr	r3, [pc, #100]	; (8005c68 <tcp_input+0x52c>)
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d00f      	beq.n	8005c28 <tcp_input+0x4ec>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00d      	beq.n	8005c2a <tcp_input+0x4ee>
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d009      	beq.n	8005c2a <tcp_input+0x4ee>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1d1      	bne.n	8005bca <tcp_input+0x48e>
 8005c26:	e000      	b.n	8005c2a <tcp_input+0x4ee>
            break;
 8005c28:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d02b      	beq.n	8005c88 <tcp_input+0x54c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <tcp_input+0x510>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8005c3e:	4b11      	ldr	r3, [pc, #68]	; (8005c84 <tcp_input+0x548>)
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8005c46:	4a0f      	ldr	r2, [pc, #60]	; (8005c84 <tcp_input+0x548>)
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8005c4c:	6978      	ldr	r0, [r7, #20]
 8005c4e:	f000 fa09 	bl	8006064 <tcp_listen_input>
      }
      pbuf_free(p);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fd fe06 	bl	8003864 <pbuf_free>
      return;
 8005c58:	e1ad      	b.n	8005fb6 <tcp_input+0x87a>
 8005c5a:	bf00      	nop
 8005c5c:	08014820 	.word	0x08014820
 8005c60:	08014914 	.word	0x08014914
 8005c64:	0801485c 	.word	0x0801485c
 8005c68:	200008a8 	.word	0x200008a8
 8005c6c:	20000748 	.word	0x20000748
 8005c70:	0801493c 	.word	0x0801493c
 8005c74:	200018e4 	.word	0x200018e4
 8005c78:	08014968 	.word	0x08014968
 8005c7c:	200018f4 	.word	0x200018f4
 8005c80:	08014994 	.word	0x08014994
 8005c84:	200018ec 	.word	0x200018ec
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 815a 	beq.w	8005f44 <tcp_input+0x808>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8005c90:	4ba0      	ldr	r3, [pc, #640]	; (8005f14 <tcp_input+0x7d8>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	891a      	ldrh	r2, [r3, #8]
 8005c9a:	4b9e      	ldr	r3, [pc, #632]	; (8005f14 <tcp_input+0x7d8>)
 8005c9c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8005c9e:	4a9d      	ldr	r2, [pc, #628]	; (8005f14 <tcp_input+0x7d8>)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8005ca4:	4b9c      	ldr	r3, [pc, #624]	; (8005f18 <tcp_input+0x7dc>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a9a      	ldr	r2, [pc, #616]	; (8005f14 <tcp_input+0x7d8>)
 8005caa:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8005cac:	4b9b      	ldr	r3, [pc, #620]	; (8005f1c <tcp_input+0x7e0>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8005cb2:	4b9b      	ldr	r3, [pc, #620]	; (8005f20 <tcp_input+0x7e4>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8005cb8:	4b9a      	ldr	r3, [pc, #616]	; (8005f24 <tcp_input+0x7e8>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8005cbe:	4b9a      	ldr	r3, [pc, #616]	; (8005f28 <tcp_input+0x7ec>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	f003 0308 	and.w	r3, r3, #8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d006      	beq.n	8005cd8 <tcp_input+0x59c>
      p->flags |= PBUF_FLAG_PUSH;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	7b5b      	ldrb	r3, [r3, #13]
 8005cce:	f043 0301 	orr.w	r3, r3, #1
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d017      	beq.n	8005d10 <tcp_input+0x5d4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8005ce0:	69f8      	ldr	r0, [r7, #28]
 8005ce2:	f7ff f8b5 	bl	8004e50 <tcp_process_refused_data>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	f113 0f0d 	cmn.w	r3, #13
 8005cec:	d007      	beq.n	8005cfe <tcp_input+0x5c2>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00c      	beq.n	8005d10 <tcp_input+0x5d4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8005cf6:	4b8d      	ldr	r3, [pc, #564]	; (8005f2c <tcp_input+0x7f0>)
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d008      	beq.n	8005d10 <tcp_input+0x5d4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f040 80e8 	bne.w	8005ed8 <tcp_input+0x79c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8005d08:	69f8      	ldr	r0, [r7, #28]
 8005d0a:	f003 fb83 	bl	8009414 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8005d0e:	e0e3      	b.n	8005ed8 <tcp_input+0x79c>
      }
    }
    tcp_input_pcb = pcb;
 8005d10:	4a87      	ldr	r2, [pc, #540]	; (8005f30 <tcp_input+0x7f4>)
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8005d16:	69f8      	ldr	r0, [r7, #28]
 8005d18:	f000 fb28 	bl	800636c <tcp_process>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8005d20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005d24:	f113 0f0d 	cmn.w	r3, #13
 8005d28:	f000 80e1 	beq.w	8005eee <tcp_input+0x7b2>
      if (recv_flags & TF_RESET) {
 8005d2c:	4b7c      	ldr	r3, [pc, #496]	; (8005f20 <tcp_input+0x7e4>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d015      	beq.n	8005d64 <tcp_input+0x628>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d008      	beq.n	8005d54 <tcp_input+0x618>
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	6912      	ldr	r2, [r2, #16]
 8005d4c:	f06f 010d 	mvn.w	r1, #13
 8005d50:	4610      	mov	r0, r2
 8005d52:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8005d54:	69f9      	ldr	r1, [r7, #28]
 8005d56:	4877      	ldr	r0, [pc, #476]	; (8005f34 <tcp_input+0x7f8>)
 8005d58:	f7ff fb52 	bl	8005400 <tcp_pcb_remove>
        tcp_free(pcb);
 8005d5c:	69f8      	ldr	r0, [r7, #28]
 8005d5e:	f7fe f8cd 	bl	8003efc <tcp_free>
 8005d62:	e0c4      	b.n	8005eee <tcp_input+0x7b2>
      } else {
        err = ERR_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8005d68:	4b6e      	ldr	r3, [pc, #440]	; (8005f24 <tcp_input+0x7e8>)
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01d      	beq.n	8005dac <tcp_input+0x670>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8005d70:	4b6c      	ldr	r3, [pc, #432]	; (8005f24 <tcp_input+0x7e8>)
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00a      	beq.n	8005d96 <tcp_input+0x65a>
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d86:	69fa      	ldr	r2, [r7, #28]
 8005d88:	6910      	ldr	r0, [r2, #16]
 8005d8a:	897a      	ldrh	r2, [r7, #10]
 8005d8c:	69f9      	ldr	r1, [r7, #28]
 8005d8e:	4798      	blx	r3
 8005d90:	4603      	mov	r3, r0
 8005d92:	74fb      	strb	r3, [r7, #19]
 8005d94:	e001      	b.n	8005d9a <tcp_input+0x65e>
 8005d96:	2300      	movs	r3, #0
 8005d98:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8005d9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005d9e:	f113 0f0d 	cmn.w	r3, #13
 8005da2:	f000 809b 	beq.w	8005edc <tcp_input+0x7a0>
              goto aborted;
            }
          }
          recv_acked = 0;
 8005da6:	4b5f      	ldr	r3, [pc, #380]	; (8005f24 <tcp_input+0x7e8>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8005dac:	69f8      	ldr	r0, [r7, #28]
 8005dae:	f000 f913 	bl	8005fd8 <tcp_input_delayed_close>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f040 8093 	bne.w	8005ee0 <tcp_input+0x7a4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8005dba:	4b58      	ldr	r3, [pc, #352]	; (8005f1c <tcp_input+0x7e0>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d046      	beq.n	8005e50 <tcp_input+0x714>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00b      	beq.n	8005de2 <tcp_input+0x6a6>
 8005dca:	4b5b      	ldr	r3, [pc, #364]	; (8005f38 <tcp_input+0x7fc>)
 8005dcc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8005dd0:	495a      	ldr	r1, [pc, #360]	; (8005f3c <tcp_input+0x800>)
 8005dd2:	485b      	ldr	r0, [pc, #364]	; (8005f40 <tcp_input+0x804>)
 8005dd4:	f00c fa90 	bl	80122f8 <iprintf>
 8005dd8:	2000      	movs	r0, #0
 8005dda:	f00c fb8f 	bl	80124fc <fflush>
 8005dde:	f00c fad4 	bl	801238a <abort>
          if (pcb->flags & TF_RXCLOSED) {
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	8b5b      	ldrh	r3, [r3, #26]
 8005de6:	f003 0310 	and.w	r3, r3, #16
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d008      	beq.n	8005e00 <tcp_input+0x6c4>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8005dee:	4b4b      	ldr	r3, [pc, #300]	; (8005f1c <tcp_input+0x7e0>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fd fd36 	bl	8003864 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8005df8:	69f8      	ldr	r0, [r7, #28]
 8005dfa:	f7fe fb8d 	bl	8004518 <tcp_abort>
            goto aborted;
 8005dfe:	e076      	b.n	8005eee <tcp_input+0x7b2>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00c      	beq.n	8005e24 <tcp_input+0x6e8>
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	6918      	ldr	r0, [r3, #16]
 8005e14:	4b41      	ldr	r3, [pc, #260]	; (8005f1c <tcp_input+0x7e0>)
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	69f9      	ldr	r1, [r7, #28]
 8005e1c:	47a0      	blx	r4
 8005e1e:	4603      	mov	r3, r0
 8005e20:	74fb      	strb	r3, [r7, #19]
 8005e22:	e008      	b.n	8005e36 <tcp_input+0x6fa>
 8005e24:	4b3d      	ldr	r3, [pc, #244]	; (8005f1c <tcp_input+0x7e0>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	69f9      	ldr	r1, [r7, #28]
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	f7ff f8e9 	bl	8005004 <tcp_recv_null>
 8005e32:	4603      	mov	r3, r0
 8005e34:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8005e36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005e3a:	f113 0f0d 	cmn.w	r3, #13
 8005e3e:	d051      	beq.n	8005ee4 <tcp_input+0x7a8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8005e40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <tcp_input+0x714>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8005e48:	4b34      	ldr	r3, [pc, #208]	; (8005f1c <tcp_input+0x7e0>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8005e50:	4b33      	ldr	r3, [pc, #204]	; (8005f20 <tcp_input+0x7e4>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	f003 0320 	and.w	r3, r3, #32
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d030      	beq.n	8005ebe <tcp_input+0x782>
          if (pcb->refused_data != NULL) {
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d009      	beq.n	8005e78 <tcp_input+0x73c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e68:	69fa      	ldr	r2, [r7, #28]
 8005e6a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005e6c:	7b52      	ldrb	r2, [r2, #13]
 8005e6e:	f042 0220 	orr.w	r2, r2, #32
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	735a      	strb	r2, [r3, #13]
 8005e76:	e022      	b.n	8005ebe <tcp_input+0x782>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005e80:	d005      	beq.n	8005e8e <tcp_input+0x752>
              pcb->rcv_wnd++;
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e86:	3301      	adds	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00b      	beq.n	8005eb0 <tcp_input+0x774>
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	6918      	ldr	r0, [r3, #16]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	69f9      	ldr	r1, [r7, #28]
 8005ea8:	47a0      	blx	r4
 8005eaa:	4603      	mov	r3, r0
 8005eac:	74fb      	strb	r3, [r7, #19]
 8005eae:	e001      	b.n	8005eb4 <tcp_input+0x778>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8005eb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005eb8:	f113 0f0d 	cmn.w	r3, #13
 8005ebc:	d014      	beq.n	8005ee8 <tcp_input+0x7ac>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8005ebe:	4b1c      	ldr	r3, [pc, #112]	; (8005f30 <tcp_input+0x7f4>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8005ec4:	69f8      	ldr	r0, [r7, #28]
 8005ec6:	f000 f887 	bl	8005fd8 <tcp_input_delayed_close>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10d      	bne.n	8005eec <tcp_input+0x7b0>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8005ed0:	69f8      	ldr	r0, [r7, #28]
 8005ed2:	f002 fb83 	bl	80085dc <tcp_output>
 8005ed6:	e00a      	b.n	8005eee <tcp_input+0x7b2>
        goto aborted;
 8005ed8:	bf00      	nop
 8005eda:	e008      	b.n	8005eee <tcp_input+0x7b2>
              goto aborted;
 8005edc:	bf00      	nop
 8005ede:	e006      	b.n	8005eee <tcp_input+0x7b2>
          goto aborted;
 8005ee0:	bf00      	nop
 8005ee2:	e004      	b.n	8005eee <tcp_input+0x7b2>
            goto aborted;
 8005ee4:	bf00      	nop
 8005ee6:	e002      	b.n	8005eee <tcp_input+0x7b2>
              goto aborted;
 8005ee8:	bf00      	nop
 8005eea:	e000      	b.n	8005eee <tcp_input+0x7b2>
          goto aborted;
 8005eec:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 8005eee:	4b10      	ldr	r3, [pc, #64]	; (8005f30 <tcp_input+0x7f4>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8005ef4:	4b09      	ldr	r3, [pc, #36]	; (8005f1c <tcp_input+0x7e0>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8005efa:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <tcp_input+0x7d8>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d058      	beq.n	8005fb4 <tcp_input+0x878>
      pbuf_free(inseg.p);
 8005f02:	4b04      	ldr	r3, [pc, #16]	; (8005f14 <tcp_input+0x7d8>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fd fcac 	bl	8003864 <pbuf_free>
      inseg.p = NULL;
 8005f0c:	4b01      	ldr	r3, [pc, #4]	; (8005f14 <tcp_input+0x7d8>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8005f12:	e04f      	b.n	8005fb4 <tcp_input+0x878>
 8005f14:	20000734 	.word	0x20000734
 8005f18:	20000748 	.word	0x20000748
 8005f1c:	20000768 	.word	0x20000768
 8005f20:	20000765 	.word	0x20000765
 8005f24:	20000760 	.word	0x20000760
 8005f28:	20000764 	.word	0x20000764
 8005f2c:	20000762 	.word	0x20000762
 8005f30:	200018f8 	.word	0x200018f8
 8005f34:	200018e4 	.word	0x200018e4
 8005f38:	08014820 	.word	0x08014820
 8005f3c:	080149c4 	.word	0x080149c4
 8005f40:	0801485c 	.word	0x0801485c
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8005f44:	4b1d      	ldr	r3, [pc, #116]	; (8005fbc <tcp_input+0x880>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	899b      	ldrh	r3, [r3, #12]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fb faef 	bl	8001530 <lwip_htons>
 8005f52:	4603      	mov	r3, r0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	f003 0304 	and.w	r3, r3, #4
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d119      	bne.n	8005f92 <tcp_input+0x856>
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005f5e:	4b18      	ldr	r3, [pc, #96]	; (8005fc0 <tcp_input+0x884>)
 8005f60:	6858      	ldr	r0, [r3, #4]
 8005f62:	4b18      	ldr	r3, [pc, #96]	; (8005fc4 <tcp_input+0x888>)
 8005f64:	6819      	ldr	r1, [r3, #0]
 8005f66:	4b18      	ldr	r3, [pc, #96]	; (8005fc8 <tcp_input+0x88c>)
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	4b17      	ldr	r3, [pc, #92]	; (8005fcc <tcp_input+0x890>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	18d4      	adds	r4, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005f72:	4b12      	ldr	r3, [pc, #72]	; (8005fbc <tcp_input+0x880>)
 8005f74:	681b      	ldr	r3, [r3, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005f76:	885b      	ldrh	r3, [r3, #2]
 8005f78:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005f7a:	4a10      	ldr	r2, [pc, #64]	; (8005fbc <tcp_input+0x880>)
 8005f7c:	6812      	ldr	r2, [r2, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005f7e:	8812      	ldrh	r2, [r2, #0]
 8005f80:	b292      	uxth	r2, r2
 8005f82:	9202      	str	r2, [sp, #8]
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	4b12      	ldr	r3, [pc, #72]	; (8005fd0 <tcp_input+0x894>)
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <tcp_input+0x898>)
 8005f8c:	4622      	mov	r2, r4
 8005f8e:	f003 fa1a 	bl	80093c6 <tcp_rst_netif>
    pbuf_free(p);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fd fc66 	bl	8003864 <pbuf_free>
  return;
 8005f98:	e00c      	b.n	8005fb4 <tcp_input+0x878>
    goto dropped;
 8005f9a:	bf00      	nop
 8005f9c:	e006      	b.n	8005fac <tcp_input+0x870>
      goto dropped;
 8005f9e:	bf00      	nop
 8005fa0:	e004      	b.n	8005fac <tcp_input+0x870>
    goto dropped;
 8005fa2:	bf00      	nop
 8005fa4:	e002      	b.n	8005fac <tcp_input+0x870>
      goto dropped;
 8005fa6:	bf00      	nop
 8005fa8:	e000      	b.n	8005fac <tcp_input+0x870>
      goto dropped;
 8005faa:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7fd fc59 	bl	8003864 <pbuf_free>
 8005fb2:	e000      	b.n	8005fb6 <tcp_input+0x87a>
  return;
 8005fb4:	bf00      	nop
}
 8005fb6:	3724      	adds	r7, #36	; 0x24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd90      	pop	{r4, r7, pc}
 8005fbc:	20000748 	.word	0x20000748
 8005fc0:	200008a8 	.word	0x200008a8
 8005fc4:	2000075c 	.word	0x2000075c
 8005fc8:	20000762 	.word	0x20000762
 8005fcc:	20000758 	.word	0x20000758
 8005fd0:	200008b8 	.word	0x200008b8
 8005fd4:	200008bc 	.word	0x200008bc

08005fd8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10b      	bne.n	8005ffe <tcp_input_delayed_close+0x26>
 8005fe6:	4b1a      	ldr	r3, [pc, #104]	; (8006050 <tcp_input_delayed_close+0x78>)
 8005fe8:	f240 225a 	movw	r2, #602	; 0x25a
 8005fec:	4919      	ldr	r1, [pc, #100]	; (8006054 <tcp_input_delayed_close+0x7c>)
 8005fee:	481a      	ldr	r0, [pc, #104]	; (8006058 <tcp_input_delayed_close+0x80>)
 8005ff0:	f00c f982 	bl	80122f8 <iprintf>
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	f00c fa81 	bl	80124fc <fflush>
 8005ffa:	f00c f9c6 	bl	801238a <abort>

  if (recv_flags & TF_CLOSED) {
 8005ffe:	4b17      	ldr	r3, [pc, #92]	; (800605c <tcp_input_delayed_close+0x84>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	f003 0310 	and.w	r3, r3, #16
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01c      	beq.n	8006044 <tcp_input_delayed_close+0x6c>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	8b5b      	ldrh	r3, [r3, #26]
 800600e:	f003 0310 	and.w	r3, r3, #16
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10d      	bne.n	8006032 <tcp_input_delayed_close+0x5a>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601c:	2b00      	cmp	r3, #0
 800601e:	d008      	beq.n	8006032 <tcp_input_delayed_close+0x5a>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6912      	ldr	r2, [r2, #16]
 800602a:	f06f 010e 	mvn.w	r1, #14
 800602e:	4610      	mov	r0, r2
 8006030:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	480a      	ldr	r0, [pc, #40]	; (8006060 <tcp_input_delayed_close+0x88>)
 8006036:	f7ff f9e3 	bl	8005400 <tcp_pcb_remove>
    tcp_free(pcb);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fd ff5e 	bl	8003efc <tcp_free>
    return 1;
 8006040:	2301      	movs	r3, #1
 8006042:	e000      	b.n	8006046 <tcp_input_delayed_close+0x6e>
  }
  return 0;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	08014820 	.word	0x08014820
 8006054:	080149e0 	.word	0x080149e0
 8006058:	0801485c 	.word	0x0801485c
 800605c:	20000765 	.word	0x20000765
 8006060:	200018e4 	.word	0x200018e4

08006064 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8006064:	b590      	push	{r4, r7, lr}
 8006066:	b08b      	sub	sp, #44	; 0x2c
 8006068:	af04      	add	r7, sp, #16
 800606a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800606c:	4b72      	ldr	r3, [pc, #456]	; (8006238 <tcp_listen_input+0x1d4>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	f003 0304 	and.w	r3, r3, #4
 8006074:	2b00      	cmp	r3, #0
 8006076:	f040 80d9 	bne.w	800622c <tcp_listen_input+0x1c8>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10b      	bne.n	8006098 <tcp_listen_input+0x34>
 8006080:	4b6e      	ldr	r3, [pc, #440]	; (800623c <tcp_listen_input+0x1d8>)
 8006082:	f240 2281 	movw	r2, #641	; 0x281
 8006086:	496e      	ldr	r1, [pc, #440]	; (8006240 <tcp_listen_input+0x1dc>)
 8006088:	486e      	ldr	r0, [pc, #440]	; (8006244 <tcp_listen_input+0x1e0>)
 800608a:	f00c f935 	bl	80122f8 <iprintf>
 800608e:	2000      	movs	r0, #0
 8006090:	f00c fa34 	bl	80124fc <fflush>
 8006094:	f00c f979 	bl	801238a <abort>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8006098:	4b67      	ldr	r3, [pc, #412]	; (8006238 <tcp_listen_input+0x1d4>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	f003 0310 	and.w	r3, r3, #16
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d01a      	beq.n	80060da <tcp_listen_input+0x76>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80060a4:	4b68      	ldr	r3, [pc, #416]	; (8006248 <tcp_listen_input+0x1e4>)
 80060a6:	6858      	ldr	r0, [r3, #4]
 80060a8:	4b68      	ldr	r3, [pc, #416]	; (800624c <tcp_listen_input+0x1e8>)
 80060aa:	6819      	ldr	r1, [r3, #0]
 80060ac:	4b68      	ldr	r3, [pc, #416]	; (8006250 <tcp_listen_input+0x1ec>)
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	4b68      	ldr	r3, [pc, #416]	; (8006254 <tcp_listen_input+0x1f0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	18d4      	adds	r4, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80060b8:	4b67      	ldr	r3, [pc, #412]	; (8006258 <tcp_listen_input+0x1f4>)
 80060ba:	681b      	ldr	r3, [r3, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80060bc:	885b      	ldrh	r3, [r3, #2]
 80060be:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80060c0:	4a65      	ldr	r2, [pc, #404]	; (8006258 <tcp_listen_input+0x1f4>)
 80060c2:	6812      	ldr	r2, [r2, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80060c4:	8812      	ldrh	r2, [r2, #0]
 80060c6:	b292      	uxth	r2, r2
 80060c8:	9202      	str	r2, [sp, #8]
 80060ca:	9301      	str	r3, [sp, #4]
 80060cc:	4b63      	ldr	r3, [pc, #396]	; (800625c <tcp_listen_input+0x1f8>)
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	4b63      	ldr	r3, [pc, #396]	; (8006260 <tcp_listen_input+0x1fc>)
 80060d2:	4622      	mov	r2, r4
 80060d4:	f003 f977 	bl	80093c6 <tcp_rst_netif>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80060d8:	e0aa      	b.n	8006230 <tcp_listen_input+0x1cc>
  } else if (flags & TCP_SYN) {
 80060da:	4b57      	ldr	r3, [pc, #348]	; (8006238 <tcp_listen_input+0x1d4>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 80a4 	beq.w	8006230 <tcp_listen_input+0x1cc>
    npcb = tcp_alloc(pcb->prio);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	7d5b      	ldrb	r3, [r3, #21]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7ff f8b3 	bl	8005258 <tcp_alloc>
 80060f2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d111      	bne.n	800611e <tcp_listen_input+0xba>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <tcp_listen_input+0xb4>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6910      	ldr	r0, [r2, #16]
 800610a:	f04f 32ff 	mov.w	r2, #4294967295
 800610e:	2100      	movs	r1, #0
 8006110:	4798      	blx	r3
 8006112:	4603      	mov	r3, r0
 8006114:	74fb      	strb	r3, [r7, #19]
      return;
 8006116:	e08c      	b.n	8006232 <tcp_listen_input+0x1ce>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006118:	23f0      	movs	r3, #240	; 0xf0
 800611a:	74fb      	strb	r3, [r7, #19]
      return;
 800611c:	e089      	b.n	8006232 <tcp_listen_input+0x1ce>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800611e:	4b4a      	ldr	r3, [pc, #296]	; (8006248 <tcp_listen_input+0x1e4>)
 8006120:	695a      	ldr	r2, [r3, #20]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8006126:	4b48      	ldr	r3, [pc, #288]	; (8006248 <tcp_listen_input+0x1e4>)
 8006128:	691a      	ldr	r2, [r3, #16]
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	8ada      	ldrh	r2, [r3, #22]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8006136:	4b48      	ldr	r3, [pc, #288]	; (8006258 <tcp_listen_input+0x1f4>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29a      	uxth	r2, r3
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2203      	movs	r2, #3
 8006146:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8006148:	4b42      	ldr	r3, [pc, #264]	; (8006254 <tcp_listen_input+0x1f0>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800615a:	6978      	ldr	r0, [r7, #20]
 800615c:	f7ff f9fc 	bl	8005558 <tcp_next_iss>
 8006160:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800617a:	4b36      	ldr	r3, [pc, #216]	; (8006254 <tcp_listen_input+0x1f0>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	1e5a      	subs	r2, r3, #1
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	7a5b      	ldrb	r3, [r3, #9]
 8006196:	f003 030c 	and.w	r3, r3, #12
 800619a:	b2da      	uxtb	r2, r3
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	7a1a      	ldrb	r2, [r3, #8]
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80061a8:	4b2e      	ldr	r3, [pc, #184]	; (8006264 <tcp_listen_input+0x200>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	60da      	str	r2, [r3, #12]
 80061b0:	4a2c      	ldr	r2, [pc, #176]	; (8006264 <tcp_listen_input+0x200>)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	f003 faaf 	bl	8009718 <tcp_timer_needed>
 80061ba:	4b2b      	ldr	r3, [pc, #172]	; (8006268 <tcp_listen_input+0x204>)
 80061bc:	2201      	movs	r2, #1
 80061be:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80061c0:	6978      	ldr	r0, [r7, #20]
 80061c2:	f001 fe03 	bl	8007dcc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80061c6:	4b24      	ldr	r3, [pc, #144]	; (8006258 <tcp_listen_input+0x1f4>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	89db      	ldrh	r3, [r3, #14]
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	3304      	adds	r3, #4
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fb fd29 	bl	8001c40 <ip4_route>
 80061ee:	4601      	mov	r1, r0
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	3304      	adds	r3, #4
 80061f4:	461a      	mov	r2, r3
 80061f6:	4620      	mov	r0, r4
 80061f8:	f7ff f9d8 	bl	80055ac <tcp_eff_send_mss_netif>
 80061fc:	4603      	mov	r3, r0
 80061fe:	461a      	mov	r2, r3
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8006204:	2112      	movs	r1, #18
 8006206:	6978      	ldr	r0, [r7, #20]
 8006208:	f002 f8ee 	bl	80083e8 <tcp_enqueue_flags>
 800620c:	4603      	mov	r3, r0
 800620e:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 8006210:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d004      	beq.n	8006222 <tcp_listen_input+0x1be>
      tcp_abandon(npcb, 0);
 8006218:	2100      	movs	r1, #0
 800621a:	6978      	ldr	r0, [r7, #20]
 800621c:	f7fe f8ba 	bl	8004394 <tcp_abandon>
      return;
 8006220:	e007      	b.n	8006232 <tcp_listen_input+0x1ce>
    tcp_output(npcb);
 8006222:	6978      	ldr	r0, [r7, #20]
 8006224:	f002 f9da 	bl	80085dc <tcp_output>
  return;
 8006228:	bf00      	nop
 800622a:	e001      	b.n	8006230 <tcp_listen_input+0x1cc>
    return;
 800622c:	bf00      	nop
 800622e:	e000      	b.n	8006232 <tcp_listen_input+0x1ce>
  return;
 8006230:	bf00      	nop
}
 8006232:	371c      	adds	r7, #28
 8006234:	46bd      	mov	sp, r7
 8006236:	bd90      	pop	{r4, r7, pc}
 8006238:	20000764 	.word	0x20000764
 800623c:	08014820 	.word	0x08014820
 8006240:	08014a08 	.word	0x08014a08
 8006244:	0801485c 	.word	0x0801485c
 8006248:	200008a8 	.word	0x200008a8
 800624c:	2000075c 	.word	0x2000075c
 8006250:	20000762 	.word	0x20000762
 8006254:	20000758 	.word	0x20000758
 8006258:	20000748 	.word	0x20000748
 800625c:	200008b8 	.word	0x200008b8
 8006260:	200008bc 	.word	0x200008bc
 8006264:	200018e4 	.word	0x200018e4
 8006268:	200018e0 	.word	0x200018e0

0800626c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af04      	add	r7, sp, #16
 8006272:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8006274:	4b32      	ldr	r3, [pc, #200]	; (8006340 <tcp_timewait_input+0xd4>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	d159      	bne.n	8006334 <tcp_timewait_input+0xc8>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10b      	bne.n	800629e <tcp_timewait_input+0x32>
 8006286:	4b2f      	ldr	r3, [pc, #188]	; (8006344 <tcp_timewait_input+0xd8>)
 8006288:	f240 22f1 	movw	r2, #753	; 0x2f1
 800628c:	492e      	ldr	r1, [pc, #184]	; (8006348 <tcp_timewait_input+0xdc>)
 800628e:	482f      	ldr	r0, [pc, #188]	; (800634c <tcp_timewait_input+0xe0>)
 8006290:	f00c f832 	bl	80122f8 <iprintf>
 8006294:	2000      	movs	r0, #0
 8006296:	f00c f931 	bl	80124fc <fflush>
 800629a:	f00c f876 	bl	801238a <abort>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800629e:	4b28      	ldr	r3, [pc, #160]	; (8006340 <tcp_timewait_input+0xd4>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d02a      	beq.n	8006300 <tcp_timewait_input+0x94>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80062aa:	4b29      	ldr	r3, [pc, #164]	; (8006350 <tcp_timewait_input+0xe4>)
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	db2d      	blt.n	8006314 <tcp_timewait_input+0xa8>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80062c0:	441a      	add	r2, r3
 80062c2:	4b23      	ldr	r3, [pc, #140]	; (8006350 <tcp_timewait_input+0xe4>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	db23      	blt.n	8006314 <tcp_timewait_input+0xa8>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80062cc:	4b21      	ldr	r3, [pc, #132]	; (8006354 <tcp_timewait_input+0xe8>)
 80062ce:	6819      	ldr	r1, [r3, #0]
 80062d0:	4b21      	ldr	r3, [pc, #132]	; (8006358 <tcp_timewait_input+0xec>)
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	4b1e      	ldr	r3, [pc, #120]	; (8006350 <tcp_timewait_input+0xe4>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80062dc:	4b1f      	ldr	r3, [pc, #124]	; (800635c <tcp_timewait_input+0xf0>)
 80062de:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80062e0:	885b      	ldrh	r3, [r3, #2]
 80062e2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80062e4:	4a1d      	ldr	r2, [pc, #116]	; (800635c <tcp_timewait_input+0xf0>)
 80062e6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80062e8:	8812      	ldrh	r2, [r2, #0]
 80062ea:	b292      	uxth	r2, r2
 80062ec:	9202      	str	r2, [sp, #8]
 80062ee:	9301      	str	r3, [sp, #4]
 80062f0:	4b1b      	ldr	r3, [pc, #108]	; (8006360 <tcp_timewait_input+0xf4>)
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	4b1b      	ldr	r3, [pc, #108]	; (8006364 <tcp_timewait_input+0xf8>)
 80062f6:	4602      	mov	r2, r0
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f003 f843 	bl	8009384 <tcp_rst>
      return;
 80062fe:	e01c      	b.n	800633a <tcp_timewait_input+0xce>
    }
  } else if (flags & TCP_FIN) {
 8006300:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <tcp_timewait_input+0xd4>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <tcp_timewait_input+0xa8>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800630c:	4b16      	ldr	r3, [pc, #88]	; (8006368 <tcp_timewait_input+0xfc>)
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8006314:	4b10      	ldr	r3, [pc, #64]	; (8006358 <tcp_timewait_input+0xec>)
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00d      	beq.n	8006338 <tcp_timewait_input+0xcc>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	8b5b      	ldrh	r3, [r3, #26]
 8006320:	f043 0302 	orr.w	r3, r3, #2
 8006324:	b29a      	uxth	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f002 f956 	bl	80085dc <tcp_output>
  }
  return;
 8006330:	bf00      	nop
 8006332:	e001      	b.n	8006338 <tcp_timewait_input+0xcc>
    return;
 8006334:	bf00      	nop
 8006336:	e000      	b.n	800633a <tcp_timewait_input+0xce>
  return;
 8006338:	bf00      	nop
}
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20000764 	.word	0x20000764
 8006344:	08014820 	.word	0x08014820
 8006348:	08014a28 	.word	0x08014a28
 800634c:	0801485c 	.word	0x0801485c
 8006350:	20000758 	.word	0x20000758
 8006354:	2000075c 	.word	0x2000075c
 8006358:	20000762 	.word	0x20000762
 800635c:	20000748 	.word	0x20000748
 8006360:	200008b8 	.word	0x200008b8
 8006364:	200008bc 	.word	0x200008bc
 8006368:	200018e8 	.word	0x200018e8

0800636c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800636c:	b590      	push	{r4, r7, lr}
 800636e:	b08d      	sub	sp, #52	; 0x34
 8006370:	af04      	add	r7, sp, #16
 8006372:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8006374:	2300      	movs	r3, #0
 8006376:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10b      	bne.n	800639a <tcp_process+0x2e>
 8006382:	4b9c      	ldr	r3, [pc, #624]	; (80065f4 <tcp_process+0x288>)
 8006384:	f240 321f 	movw	r2, #799	; 0x31f
 8006388:	499b      	ldr	r1, [pc, #620]	; (80065f8 <tcp_process+0x28c>)
 800638a:	489c      	ldr	r0, [pc, #624]	; (80065fc <tcp_process+0x290>)
 800638c:	f00b ffb4 	bl	80122f8 <iprintf>
 8006390:	2000      	movs	r0, #0
 8006392:	f00c f8b3 	bl	80124fc <fflush>
 8006396:	f00b fff8 	bl	801238a <abort>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800639a:	4b99      	ldr	r3, [pc, #612]	; (8006600 <tcp_process+0x294>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	f003 0304 	and.w	r3, r3, #4
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d053      	beq.n	800644e <tcp_process+0xe2>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	7d1b      	ldrb	r3, [r3, #20]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d108      	bne.n	80063c0 <tcp_process+0x54>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063b2:	4b94      	ldr	r3, [pc, #592]	; (8006604 <tcp_process+0x298>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d123      	bne.n	8006402 <tcp_process+0x96>
        acceptable = 1;
 80063ba:	2301      	movs	r3, #1
 80063bc:	76fb      	strb	r3, [r7, #27]
 80063be:	e020      	b.n	8006402 <tcp_process+0x96>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063c4:	4b90      	ldr	r3, [pc, #576]	; (8006608 <tcp_process+0x29c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d102      	bne.n	80063d2 <tcp_process+0x66>
        acceptable = 1;
 80063cc:	2301      	movs	r3, #1
 80063ce:	76fb      	strb	r3, [r7, #27]
 80063d0:	e017      	b.n	8006402 <tcp_process+0x96>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80063d2:	4b8d      	ldr	r3, [pc, #564]	; (8006608 <tcp_process+0x29c>)
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	db10      	blt.n	8006402 <tcp_process+0x96>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80063e8:	441a      	add	r2, r3
 80063ea:	4b87      	ldr	r3, [pc, #540]	; (8006608 <tcp_process+0x29c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	db06      	blt.n	8006402 <tcp_process+0x96>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	8b5b      	ldrh	r3, [r3, #26]
 80063f8:	f043 0302 	orr.w	r3, r3, #2
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8006402:	7efb      	ldrb	r3, [r7, #27]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d020      	beq.n	800644a <tcp_process+0xde>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	7d1b      	ldrb	r3, [r3, #20]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10b      	bne.n	8006428 <tcp_process+0xbc>
 8006410:	4b78      	ldr	r3, [pc, #480]	; (80065f4 <tcp_process+0x288>)
 8006412:	f240 323b 	movw	r2, #827	; 0x33b
 8006416:	497d      	ldr	r1, [pc, #500]	; (800660c <tcp_process+0x2a0>)
 8006418:	4878      	ldr	r0, [pc, #480]	; (80065fc <tcp_process+0x290>)
 800641a:	f00b ff6d 	bl	80122f8 <iprintf>
 800641e:	2000      	movs	r0, #0
 8006420:	f00c f86c 	bl	80124fc <fflush>
 8006424:	f00b ffb1 	bl	801238a <abort>
      recv_flags |= TF_RESET;
 8006428:	4b79      	ldr	r3, [pc, #484]	; (8006610 <tcp_process+0x2a4>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	f043 0308 	orr.w	r3, r3, #8
 8006430:	b2da      	uxtb	r2, r3
 8006432:	4b77      	ldr	r3, [pc, #476]	; (8006610 <tcp_process+0x2a4>)
 8006434:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	8b5b      	ldrh	r3, [r3, #26]
 800643a:	f023 0301 	bic.w	r3, r3, #1
 800643e:	b29a      	uxth	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8006444:	f06f 030d 	mvn.w	r3, #13
 8006448:	e3a1      	b.n	8006b8e <tcp_process+0x822>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	e39f      	b.n	8006b8e <tcp_process+0x822>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800644e:	4b6c      	ldr	r3, [pc, #432]	; (8006600 <tcp_process+0x294>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d010      	beq.n	800647c <tcp_process+0x110>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	7d1b      	ldrb	r3, [r3, #20]
 800645e:	2b02      	cmp	r3, #2
 8006460:	d00c      	beq.n	800647c <tcp_process+0x110>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	7d1b      	ldrb	r3, [r3, #20]
 8006466:	2b03      	cmp	r3, #3
 8006468:	d008      	beq.n	800647c <tcp_process+0x110>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	8b5b      	ldrh	r3, [r3, #26]
 800646e:	f043 0302 	orr.w	r3, r3, #2
 8006472:	b29a      	uxth	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	e388      	b.n	8006b8e <tcp_process+0x822>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	8b5b      	ldrh	r3, [r3, #26]
 8006480:	f003 0310 	and.w	r3, r3, #16
 8006484:	2b00      	cmp	r3, #0
 8006486:	d103      	bne.n	8006490 <tcp_process+0x124>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8006488:	4b62      	ldr	r3, [pc, #392]	; (8006614 <tcp_process+0x2a8>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f001 fc93 	bl	8007dcc <tcp_parseopt>

  if (flags & TCP_SYN) {
 80064a6:	4b56      	ldr	r3, [pc, #344]	; (8006600 <tcp_process+0x294>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <tcp_process+0x15a>
    /* accept SYN only in 2 states: */
    if ((pcb->state != SYN_SENT) && (pcb->state != SYN_RCVD)) {
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	7d1b      	ldrb	r3, [r3, #20]
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d005      	beq.n	80064c6 <tcp_process+0x15a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	7d1b      	ldrb	r3, [r3, #20]
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d001      	beq.n	80064c6 <tcp_process+0x15a>
      return ERR_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	e363      	b.n	8006b8e <tcp_process+0x822>
    }
  }

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	7d1b      	ldrb	r3, [r3, #20]
 80064ca:	3b02      	subs	r3, #2
 80064cc:	2b07      	cmp	r3, #7
 80064ce:	f200 834e 	bhi.w	8006b6e <tcp_process+0x802>
 80064d2:	a201      	add	r2, pc, #4	; (adr r2, 80064d8 <tcp_process+0x16c>)
 80064d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d8:	080064f9 	.word	0x080064f9
 80064dc:	08006737 	.word	0x08006737
 80064e0:	080068ed 	.word	0x080068ed
 80064e4:	08006917 	.word	0x08006917
 80064e8:	08006a05 	.word	0x08006a05
 80064ec:	080068ed 	.word	0x080068ed
 80064f0:	08006a91 	.word	0x08006a91
 80064f4:	08006b39 	.word	0x08006b39
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %s %"U32_F"\n",
                                    ackno, pcb->snd_nxt, pcb->unacked ? "" : " empty:",
                                    pcb->unacked ? lwip_ntohl(pcb->unacked->tcphdr->seqno) : 0));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80064f8:	4b41      	ldr	r3, [pc, #260]	; (8006600 <tcp_process+0x294>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	f003 0310 	and.w	r3, r3, #16
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 80eb 	beq.w	80066dc <tcp_process+0x370>
 8006506:	4b3e      	ldr	r3, [pc, #248]	; (8006600 <tcp_process+0x294>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 80e4 	beq.w	80066dc <tcp_process+0x370>
          && (ackno == pcb->lastack + 1)) {
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	4b3a      	ldr	r3, [pc, #232]	; (8006604 <tcp_process+0x298>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	f040 80dc 	bne.w	80066dc <tcp_process+0x370>
        pcb->rcv_nxt = seqno + 1;
 8006524:	4b38      	ldr	r3, [pc, #224]	; (8006608 <tcp_process+0x29c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8006536:	4b33      	ldr	r3, [pc, #204]	; (8006604 <tcp_process+0x298>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800653e:	4b36      	ldr	r3, [pc, #216]	; (8006618 <tcp_process+0x2ac>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	89db      	ldrh	r3, [r3, #14]
 8006544:	b29a      	uxth	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8006558:	4b2b      	ldr	r3, [pc, #172]	; (8006608 <tcp_process+0x29c>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	1e5a      	subs	r2, r3, #1
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2204      	movs	r2, #4
 8006566:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3304      	adds	r3, #4
 8006570:	4618      	mov	r0, r3
 8006572:	f7fb fb65 	bl	8001c40 <ip4_route>
 8006576:	4601      	mov	r1, r0
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3304      	adds	r3, #4
 800657c:	461a      	mov	r2, r3
 800657e:	4620      	mov	r0, r4
 8006580:	f7ff f814 	bl	80055ac <tcp_eff_send_mss_netif>
 8006584:	4603      	mov	r3, r0
 8006586:	461a      	mov	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006590:	009a      	lsls	r2, r3, #2
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006596:	005b      	lsls	r3, r3, #1
 8006598:	f241 111c 	movw	r1, #4380	; 0x111c
 800659c:	428b      	cmp	r3, r1
 800659e:	bf38      	it	cc
 80065a0:	460b      	movcc	r3, r1
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d204      	bcs.n	80065b0 <tcp_process+0x244>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	e00d      	b.n	80065cc <tcp_process+0x260>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	f241 121c 	movw	r2, #4380	; 0x111c
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d904      	bls.n	80065c8 <tcp_process+0x25c>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	e001      	b.n	80065cc <tcp_process+0x260>
 80065c8:	f241 131c 	movw	r3, #4380	; 0x111c
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d121      	bne.n	8006620 <tcp_process+0x2b4>
 80065dc:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <tcp_process+0x288>)
 80065de:	f240 3277 	movw	r2, #887	; 0x377
 80065e2:	490e      	ldr	r1, [pc, #56]	; (800661c <tcp_process+0x2b0>)
 80065e4:	4805      	ldr	r0, [pc, #20]	; (80065fc <tcp_process+0x290>)
 80065e6:	f00b fe87 	bl	80122f8 <iprintf>
 80065ea:	2000      	movs	r0, #0
 80065ec:	f00b ff86 	bl	80124fc <fflush>
 80065f0:	f00b fecb 	bl	801238a <abort>
 80065f4:	08014820 	.word	0x08014820
 80065f8:	08014a48 	.word	0x08014a48
 80065fc:	0801485c 	.word	0x0801485c
 8006600:	20000764 	.word	0x20000764
 8006604:	2000075c 	.word	0x2000075c
 8006608:	20000758 	.word	0x20000758
 800660c:	08014a64 	.word	0x08014a64
 8006610:	20000765 	.word	0x20000765
 8006614:	200018e8 	.word	0x200018e8
 8006618:	20000748 	.word	0x20000748
 800661c:	08014a84 	.word	0x08014a84
        --pcb->snd_queuelen;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006626:	3b01      	subs	r3, #1
 8006628:	b29a      	uxth	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006634:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d116      	bne.n	800666a <tcp_process+0x2fe>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006640:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10b      	bne.n	8006660 <tcp_process+0x2f4>
 8006648:	4b9b      	ldr	r3, [pc, #620]	; (80068b8 <tcp_process+0x54c>)
 800664a:	f240 327f 	movw	r2, #895	; 0x37f
 800664e:	499b      	ldr	r1, [pc, #620]	; (80068bc <tcp_process+0x550>)
 8006650:	489b      	ldr	r0, [pc, #620]	; (80068c0 <tcp_process+0x554>)
 8006652:	f00b fe51 	bl	80122f8 <iprintf>
 8006656:	2000      	movs	r0, #0
 8006658:	f00b ff50 	bl	80124fc <fflush>
 800665c:	f00b fe95 	bl	801238a <abort>
          pcb->unsent = rseg->next;
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	66da      	str	r2, [r3, #108]	; 0x6c
 8006668:	e003      	b.n	8006672 <tcp_process+0x306>
        } else {
          pcb->unacked = rseg->next;
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8006672:	69f8      	ldr	r0, [r7, #28]
 8006674:	f7fe fc7c 	bl	8004f70 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667c:	2b00      	cmp	r3, #0
 800667e:	d104      	bne.n	800668a <tcp_process+0x31e>
          pcb->rtime = -1;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006686:	861a      	strh	r2, [r3, #48]	; 0x30
 8006688:	e006      	b.n	8006698 <tcp_process+0x32c>
        } else {
          pcb->rtime = 0;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00a      	beq.n	80066b8 <tcp_process+0x34c>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6910      	ldr	r0, [r2, #16]
 80066ac:	2200      	movs	r2, #0
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	4798      	blx	r3
 80066b2:	4603      	mov	r3, r0
 80066b4:	76bb      	strb	r3, [r7, #26]
 80066b6:	e001      	b.n	80066bc <tcp_process+0x350>
 80066b8:	2300      	movs	r3, #0
 80066ba:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80066bc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80066c0:	f113 0f0d 	cmn.w	r3, #13
 80066c4:	d102      	bne.n	80066cc <tcp_process+0x360>
          return ERR_ABRT;
 80066c6:	f06f 030c 	mvn.w	r3, #12
 80066ca:	e260      	b.n	8006b8e <tcp_process+0x822>
        }
        tcp_ack_now(pcb);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	8b5b      	ldrh	r3, [r3, #26]
 80066d0:	f043 0302 	orr.w	r3, r3, #2
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80066da:	e24a      	b.n	8006b72 <tcp_process+0x806>
      else if (flags & TCP_ACK) {
 80066dc:	4b79      	ldr	r3, [pc, #484]	; (80068c4 <tcp_process+0x558>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	f003 0310 	and.w	r3, r3, #16
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 8244 	beq.w	8006b72 <tcp_process+0x806>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80066ea:	4b77      	ldr	r3, [pc, #476]	; (80068c8 <tcp_process+0x55c>)
 80066ec:	6819      	ldr	r1, [r3, #0]
 80066ee:	4b77      	ldr	r3, [pc, #476]	; (80068cc <tcp_process+0x560>)
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	4b76      	ldr	r3, [pc, #472]	; (80068d0 <tcp_process+0x564>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80066fa:	4b76      	ldr	r3, [pc, #472]	; (80068d4 <tcp_process+0x568>)
 80066fc:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80066fe:	885b      	ldrh	r3, [r3, #2]
 8006700:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006702:	4a74      	ldr	r2, [pc, #464]	; (80068d4 <tcp_process+0x568>)
 8006704:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006706:	8812      	ldrh	r2, [r2, #0]
 8006708:	b292      	uxth	r2, r2
 800670a:	9202      	str	r2, [sp, #8]
 800670c:	9301      	str	r3, [sp, #4]
 800670e:	4b72      	ldr	r3, [pc, #456]	; (80068d8 <tcp_process+0x56c>)
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	4b72      	ldr	r3, [pc, #456]	; (80068dc <tcp_process+0x570>)
 8006714:	4602      	mov	r2, r0
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f002 fe34 	bl	8009384 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006722:	2b05      	cmp	r3, #5
 8006724:	f200 8225 	bhi.w	8006b72 <tcp_process+0x806>
          pcb->rtime = 0;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f002 fb36 	bl	8008da0 <tcp_rexmit_rto>
      break;
 8006734:	e21d      	b.n	8006b72 <tcp_process+0x806>
    case SYN_RCVD:
      if (flags & TCP_SYN) {
 8006736:	4b63      	ldr	r3, [pc, #396]	; (80068c4 <tcp_process+0x558>)
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00b      	beq.n	800675a <tcp_process+0x3ee>
        if (seqno == pcb->rcv_nxt - 1) {
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	1e5a      	subs	r2, r3, #1
 8006748:	4b61      	ldr	r3, [pc, #388]	; (80068d0 <tcp_process+0x564>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	429a      	cmp	r2, r3
 800674e:	f040 8212 	bne.w	8006b76 <tcp_process+0x80a>
          /* Looks like another copy of the SYN - retransmit our SYN-ACK */
          tcp_rexmit(pcb);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f002 fb4a 	bl	8008dec <tcp_rexmit>
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
        }
      }
      break;
 8006758:	e20d      	b.n	8006b76 <tcp_process+0x80a>
      } else if (flags & TCP_ACK) {
 800675a:	4b5a      	ldr	r3, [pc, #360]	; (80068c4 <tcp_process+0x558>)
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	f003 0310 	and.w	r3, r3, #16
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 8207 	beq.w	8006b76 <tcp_process+0x80a>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8006768:	4b57      	ldr	r3, [pc, #348]	; (80068c8 <tcp_process+0x55c>)
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	3b01      	subs	r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	f2c0 8084 	blt.w	8006882 <tcp_process+0x516>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800677e:	4b52      	ldr	r3, [pc, #328]	; (80068c8 <tcp_process+0x55c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	db7c      	blt.n	8006882 <tcp_process+0x516>
          pcb->state = ESTABLISHED;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2204      	movs	r2, #4
 800678c:	751a      	strb	r2, [r3, #20]
          if (pcb->listener == NULL) {
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d102      	bne.n	800679c <tcp_process+0x430>
            err = ERR_VAL;
 8006796:	23fa      	movs	r3, #250	; 0xfa
 8006798:	76bb      	strb	r3, [r7, #26]
 800679a:	e022      	b.n	80067e2 <tcp_process+0x476>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10b      	bne.n	80067be <tcp_process+0x452>
 80067a6:	4b44      	ldr	r3, [pc, #272]	; (80068b8 <tcp_process+0x54c>)
 80067a8:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 80067ac:	494c      	ldr	r1, [pc, #304]	; (80068e0 <tcp_process+0x574>)
 80067ae:	4844      	ldr	r0, [pc, #272]	; (80068c0 <tcp_process+0x554>)
 80067b0:	f00b fda2 	bl	80122f8 <iprintf>
 80067b4:	2000      	movs	r0, #0
 80067b6:	f00b fea1 	bl	80124fc <fflush>
 80067ba:	f00b fde6 	bl	801238a <abort>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00a      	beq.n	80067de <tcp_process+0x472>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6910      	ldr	r0, [r2, #16]
 80067d2:	2200      	movs	r2, #0
 80067d4:	6879      	ldr	r1, [r7, #4]
 80067d6:	4798      	blx	r3
 80067d8:	4603      	mov	r3, r0
 80067da:	76bb      	strb	r3, [r7, #26]
 80067dc:	e001      	b.n	80067e2 <tcp_process+0x476>
 80067de:	23f0      	movs	r3, #240	; 0xf0
 80067e0:	76bb      	strb	r3, [r7, #26]
          if (err != ERR_OK) {
 80067e2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <tcp_process+0x494>
            if (err != ERR_ABRT) {
 80067ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80067ee:	f113 0f0d 	cmn.w	r3, #13
 80067f2:	d002      	beq.n	80067fa <tcp_process+0x48e>
              tcp_abort(pcb);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7fd fe8f 	bl	8004518 <tcp_abort>
            return ERR_ABRT;
 80067fa:	f06f 030c 	mvn.w	r3, #12
 80067fe:	e1c6      	b.n	8006b8e <tcp_process+0x822>
          tcp_receive(pcb);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fae1 	bl	8006dc8 <tcp_receive>
          if (recv_acked != 0) {
 8006806:	4b37      	ldr	r3, [pc, #220]	; (80068e4 <tcp_process+0x578>)
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d005      	beq.n	800681a <tcp_process+0x4ae>
            recv_acked--;
 800680e:	4b35      	ldr	r3, [pc, #212]	; (80068e4 <tcp_process+0x578>)
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	4b33      	ldr	r3, [pc, #204]	; (80068e4 <tcp_process+0x578>)
 8006818:	801a      	strh	r2, [r3, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800681e:	009a      	lsls	r2, r3, #2
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006824:	005b      	lsls	r3, r3, #1
 8006826:	f241 111c 	movw	r1, #4380	; 0x111c
 800682a:	428b      	cmp	r3, r1
 800682c:	bf38      	it	cc
 800682e:	460b      	movcc	r3, r1
 8006830:	429a      	cmp	r2, r3
 8006832:	d204      	bcs.n	800683e <tcp_process+0x4d2>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	b29b      	uxth	r3, r3
 800683c:	e00d      	b.n	800685a <tcp_process+0x4ee>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	f241 121c 	movw	r2, #4380	; 0x111c
 8006848:	4293      	cmp	r3, r2
 800684a:	d904      	bls.n	8006856 <tcp_process+0x4ea>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	b29b      	uxth	r3, r3
 8006854:	e001      	b.n	800685a <tcp_process+0x4ee>
 8006856:	f241 131c 	movw	r3, #4380	; 0x111c
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 8006860:	4b21      	ldr	r3, [pc, #132]	; (80068e8 <tcp_process+0x57c>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	f003 0320 	and.w	r3, r3, #32
 8006868:	2b00      	cmp	r3, #0
 800686a:	d024      	beq.n	80068b6 <tcp_process+0x54a>
            tcp_ack_now(pcb);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	8b5b      	ldrh	r3, [r3, #26]
 8006870:	f043 0302 	orr.w	r3, r3, #2
 8006874:	b29a      	uxth	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2207      	movs	r2, #7
 800687e:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8006880:	e019      	b.n	80068b6 <tcp_process+0x54a>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006882:	4b11      	ldr	r3, [pc, #68]	; (80068c8 <tcp_process+0x55c>)
 8006884:	6819      	ldr	r1, [r3, #0]
 8006886:	4b11      	ldr	r3, [pc, #68]	; (80068cc <tcp_process+0x560>)
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	4b10      	ldr	r3, [pc, #64]	; (80068d0 <tcp_process+0x564>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006892:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <tcp_process+0x568>)
 8006894:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006896:	885b      	ldrh	r3, [r3, #2]
 8006898:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800689a:	4a0e      	ldr	r2, [pc, #56]	; (80068d4 <tcp_process+0x568>)
 800689c:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800689e:	8812      	ldrh	r2, [r2, #0]
 80068a0:	b292      	uxth	r2, r2
 80068a2:	9202      	str	r2, [sp, #8]
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <tcp_process+0x56c>)
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	4b0c      	ldr	r3, [pc, #48]	; (80068dc <tcp_process+0x570>)
 80068ac:	4602      	mov	r2, r0
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f002 fd68 	bl	8009384 <tcp_rst>
      break;
 80068b4:	e15f      	b.n	8006b76 <tcp_process+0x80a>
 80068b6:	e15e      	b.n	8006b76 <tcp_process+0x80a>
 80068b8:	08014820 	.word	0x08014820
 80068bc:	08014a9c 	.word	0x08014a9c
 80068c0:	0801485c 	.word	0x0801485c
 80068c4:	20000764 	.word	0x20000764
 80068c8:	2000075c 	.word	0x2000075c
 80068cc:	20000762 	.word	0x20000762
 80068d0:	20000758 	.word	0x20000758
 80068d4:	20000748 	.word	0x20000748
 80068d8:	200008b8 	.word	0x200008b8
 80068dc:	200008bc 	.word	0x200008bc
 80068e0:	08014ab0 	.word	0x08014ab0
 80068e4:	20000760 	.word	0x20000760
 80068e8:	20000765 	.word	0x20000765
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fa6b 	bl	8006dc8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80068f2:	4b8b      	ldr	r3, [pc, #556]	; (8006b20 <tcp_process+0x7b4>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 813d 	beq.w	8006b7a <tcp_process+0x80e>
        tcp_ack_now(pcb);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	8b5b      	ldrh	r3, [r3, #26]
 8006904:	f043 0302 	orr.w	r3, r3, #2
 8006908:	b29a      	uxth	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2207      	movs	r2, #7
 8006912:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006914:	e131      	b.n	8006b7a <tcp_process+0x80e>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fa56 	bl	8006dc8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800691c:	4b80      	ldr	r3, [pc, #512]	; (8006b20 <tcp_process+0x7b4>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	f003 0320 	and.w	r3, r3, #32
 8006924:	2b00      	cmp	r3, #0
 8006926:	d056      	beq.n	80069d6 <tcp_process+0x66a>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006928:	4b7e      	ldr	r3, [pc, #504]	; (8006b24 <tcp_process+0x7b8>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	f003 0310 	and.w	r3, r3, #16
 8006930:	2b00      	cmp	r3, #0
 8006932:	d045      	beq.n	80069c0 <tcp_process+0x654>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006938:	4b7b      	ldr	r3, [pc, #492]	; (8006b28 <tcp_process+0x7bc>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	429a      	cmp	r2, r3
 800693e:	d13f      	bne.n	80069c0 <tcp_process+0x654>
            pcb->unsent == NULL) {
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006944:	2b00      	cmp	r3, #0
 8006946:	d13b      	bne.n	80069c0 <tcp_process+0x654>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	8b5b      	ldrh	r3, [r3, #26]
 800694c:	f043 0302 	orr.w	r3, r3, #2
 8006950:	b29a      	uxth	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fe fd02 	bl	8005360 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800695c:	4b73      	ldr	r3, [pc, #460]	; (8006b2c <tcp_process+0x7c0>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	429a      	cmp	r2, r3
 8006964:	d105      	bne.n	8006972 <tcp_process+0x606>
 8006966:	4b71      	ldr	r3, [pc, #452]	; (8006b2c <tcp_process+0x7c0>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	4a6f      	ldr	r2, [pc, #444]	; (8006b2c <tcp_process+0x7c0>)
 800696e:	6013      	str	r3, [r2, #0]
 8006970:	e013      	b.n	800699a <tcp_process+0x62e>
 8006972:	4b6e      	ldr	r3, [pc, #440]	; (8006b2c <tcp_process+0x7c0>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	e00c      	b.n	8006994 <tcp_process+0x628>
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	68da      	ldr	r2, [r3, #12]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	429a      	cmp	r2, r3
 8006982:	d104      	bne.n	800698e <tcp_process+0x622>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68da      	ldr	r2, [r3, #12]
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	60da      	str	r2, [r3, #12]
 800698c:	e005      	b.n	800699a <tcp_process+0x62e>
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1ef      	bne.n	800697a <tcp_process+0x60e>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	60da      	str	r2, [r3, #12]
 80069a0:	4b63      	ldr	r3, [pc, #396]	; (8006b30 <tcp_process+0x7c4>)
 80069a2:	2201      	movs	r2, #1
 80069a4:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	220a      	movs	r2, #10
 80069aa:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80069ac:	4b61      	ldr	r3, [pc, #388]	; (8006b34 <tcp_process+0x7c8>)
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	60da      	str	r2, [r3, #12]
 80069b4:	4a5f      	ldr	r2, [pc, #380]	; (8006b34 <tcp_process+0x7c8>)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6013      	str	r3, [r2, #0]
 80069ba:	f002 fead 	bl	8009718 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80069be:	e0de      	b.n	8006b7e <tcp_process+0x812>
          tcp_ack_now(pcb);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	8b5b      	ldrh	r3, [r3, #26]
 80069c4:	f043 0302 	orr.w	r3, r3, #2
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2208      	movs	r2, #8
 80069d2:	751a      	strb	r2, [r3, #20]
      break;
 80069d4:	e0d3      	b.n	8006b7e <tcp_process+0x812>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80069d6:	4b53      	ldr	r3, [pc, #332]	; (8006b24 <tcp_process+0x7b8>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	f003 0310 	and.w	r3, r3, #16
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f000 80cd 	beq.w	8006b7e <tcp_process+0x812>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069e8:	4b4f      	ldr	r3, [pc, #316]	; (8006b28 <tcp_process+0x7bc>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	f040 80c6 	bne.w	8006b7e <tcp_process+0x812>
                 pcb->unsent == NULL) {
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f040 80c1 	bne.w	8006b7e <tcp_process+0x812>
        pcb->state = FIN_WAIT_2;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2206      	movs	r2, #6
 8006a00:	751a      	strb	r2, [r3, #20]
      break;
 8006a02:	e0bc      	b.n	8006b7e <tcp_process+0x812>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f9df 	bl	8006dc8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8006a0a:	4b45      	ldr	r3, [pc, #276]	; (8006b20 <tcp_process+0x7b4>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 80b5 	beq.w	8006b82 <tcp_process+0x816>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	8b5b      	ldrh	r3, [r3, #26]
 8006a1c:	f043 0302 	orr.w	r3, r3, #2
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7fe fc9a 	bl	8005360 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8006a2c:	4b3f      	ldr	r3, [pc, #252]	; (8006b2c <tcp_process+0x7c0>)
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d105      	bne.n	8006a42 <tcp_process+0x6d6>
 8006a36:	4b3d      	ldr	r3, [pc, #244]	; (8006b2c <tcp_process+0x7c0>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	4a3b      	ldr	r2, [pc, #236]	; (8006b2c <tcp_process+0x7c0>)
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	e013      	b.n	8006a6a <tcp_process+0x6fe>
 8006a42:	4b3a      	ldr	r3, [pc, #232]	; (8006b2c <tcp_process+0x7c0>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	613b      	str	r3, [r7, #16]
 8006a48:	e00c      	b.n	8006a64 <tcp_process+0x6f8>
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d104      	bne.n	8006a5e <tcp_process+0x6f2>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68da      	ldr	r2, [r3, #12]
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	60da      	str	r2, [r3, #12]
 8006a5c:	e005      	b.n	8006a6a <tcp_process+0x6fe>
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1ef      	bne.n	8006a4a <tcp_process+0x6de>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	60da      	str	r2, [r3, #12]
 8006a70:	4b2f      	ldr	r3, [pc, #188]	; (8006b30 <tcp_process+0x7c4>)
 8006a72:	2201      	movs	r2, #1
 8006a74:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	220a      	movs	r2, #10
 8006a7a:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006a7c:	4b2d      	ldr	r3, [pc, #180]	; (8006b34 <tcp_process+0x7c8>)
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	60da      	str	r2, [r3, #12]
 8006a84:	4a2b      	ldr	r2, [pc, #172]	; (8006b34 <tcp_process+0x7c8>)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	f002 fe45 	bl	8009718 <tcp_timer_needed>
      }
      break;
 8006a8e:	e078      	b.n	8006b82 <tcp_process+0x816>
    case CLOSING:
      tcp_receive(pcb);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f999 	bl	8006dc8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8006a96:	4b23      	ldr	r3, [pc, #140]	; (8006b24 <tcp_process+0x7b8>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	f003 0310 	and.w	r3, r3, #16
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d071      	beq.n	8006b86 <tcp_process+0x81a>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006aa6:	4b20      	ldr	r3, [pc, #128]	; (8006b28 <tcp_process+0x7bc>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d16b      	bne.n	8006b86 <tcp_process+0x81a>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d167      	bne.n	8006b86 <tcp_process+0x81a>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7fe fc52 	bl	8005360 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8006abc:	4b1b      	ldr	r3, [pc, #108]	; (8006b2c <tcp_process+0x7c0>)
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d105      	bne.n	8006ad2 <tcp_process+0x766>
 8006ac6:	4b19      	ldr	r3, [pc, #100]	; (8006b2c <tcp_process+0x7c0>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	4a17      	ldr	r2, [pc, #92]	; (8006b2c <tcp_process+0x7c0>)
 8006ace:	6013      	str	r3, [r2, #0]
 8006ad0:	e013      	b.n	8006afa <tcp_process+0x78e>
 8006ad2:	4b16      	ldr	r3, [pc, #88]	; (8006b2c <tcp_process+0x7c0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	e00c      	b.n	8006af4 <tcp_process+0x788>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	68da      	ldr	r2, [r3, #12]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d104      	bne.n	8006aee <tcp_process+0x782>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68da      	ldr	r2, [r3, #12]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	60da      	str	r2, [r3, #12]
 8006aec:	e005      	b.n	8006afa <tcp_process+0x78e>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1ef      	bne.n	8006ada <tcp_process+0x76e>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	60da      	str	r2, [r3, #12]
 8006b00:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <tcp_process+0x7c4>)
 8006b02:	2201      	movs	r2, #1
 8006b04:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	220a      	movs	r2, #10
 8006b0a:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006b0c:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <tcp_process+0x7c8>)
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	60da      	str	r2, [r3, #12]
 8006b14:	4a07      	ldr	r2, [pc, #28]	; (8006b34 <tcp_process+0x7c8>)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	f002 fdfd 	bl	8009718 <tcp_timer_needed>
      }
      break;
 8006b1e:	e032      	b.n	8006b86 <tcp_process+0x81a>
 8006b20:	20000765 	.word	0x20000765
 8006b24:	20000764 	.word	0x20000764
 8006b28:	2000075c 	.word	0x2000075c
 8006b2c:	200018e4 	.word	0x200018e4
 8006b30:	200018e0 	.word	0x200018e0
 8006b34:	200018f4 	.word	0x200018f4
    case LAST_ACK:
      tcp_receive(pcb);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f945 	bl	8006dc8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8006b3e:	4b16      	ldr	r3, [pc, #88]	; (8006b98 <tcp_process+0x82c>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	f003 0310 	and.w	r3, r3, #16
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01f      	beq.n	8006b8a <tcp_process+0x81e>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b4e:	4b13      	ldr	r3, [pc, #76]	; (8006b9c <tcp_process+0x830>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d119      	bne.n	8006b8a <tcp_process+0x81e>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d115      	bne.n	8006b8a <tcp_process+0x81e>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8006b5e:	4b10      	ldr	r3, [pc, #64]	; (8006ba0 <tcp_process+0x834>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	f043 0310 	orr.w	r3, r3, #16
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	4b0d      	ldr	r3, [pc, #52]	; (8006ba0 <tcp_process+0x834>)
 8006b6a:	701a      	strb	r2, [r3, #0]
      }
      break;
 8006b6c:	e00d      	b.n	8006b8a <tcp_process+0x81e>
    default:
      break;
 8006b6e:	bf00      	nop
 8006b70:	e00c      	b.n	8006b8c <tcp_process+0x820>
      break;
 8006b72:	bf00      	nop
 8006b74:	e00a      	b.n	8006b8c <tcp_process+0x820>
      break;
 8006b76:	bf00      	nop
 8006b78:	e008      	b.n	8006b8c <tcp_process+0x820>
      break;
 8006b7a:	bf00      	nop
 8006b7c:	e006      	b.n	8006b8c <tcp_process+0x820>
      break;
 8006b7e:	bf00      	nop
 8006b80:	e004      	b.n	8006b8c <tcp_process+0x820>
      break;
 8006b82:	bf00      	nop
 8006b84:	e002      	b.n	8006b8c <tcp_process+0x820>
      break;
 8006b86:	bf00      	nop
 8006b88:	e000      	b.n	8006b8c <tcp_process+0x820>
      break;
 8006b8a:	bf00      	nop
  }
  return ERR_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3724      	adds	r7, #36	; 0x24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd90      	pop	{r4, r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20000764 	.word	0x20000764
 8006b9c:	2000075c 	.word	0x2000075c
 8006ba0:	20000765 	.word	0x20000765

08006ba4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8006ba4:	b5b0      	push	{r4, r5, r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10b      	bne.n	8006bcc <tcp_oos_insert_segment+0x28>
 8006bb4:	4b3d      	ldr	r3, [pc, #244]	; (8006cac <tcp_oos_insert_segment+0x108>)
 8006bb6:	f240 422c 	movw	r2, #1068	; 0x42c
 8006bba:	493d      	ldr	r1, [pc, #244]	; (8006cb0 <tcp_oos_insert_segment+0x10c>)
 8006bbc:	483d      	ldr	r0, [pc, #244]	; (8006cb4 <tcp_oos_insert_segment+0x110>)
 8006bbe:	f00b fb9b 	bl	80122f8 <iprintf>
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	f00b fc9a 	bl	80124fc <fflush>
 8006bc8:	f00b fbdf 	bl	801238a <abort>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	899b      	ldrh	r3, [r3, #12]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7fa fcab 	bl	8001530 <lwip_htons>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d027      	beq.n	8006c36 <tcp_oos_insert_segment+0x92>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8006be6:	6838      	ldr	r0, [r7, #0]
 8006be8:	f7fe f9ae 	bl	8004f48 <tcp_segs_free>
    next = NULL;
 8006bec:	2300      	movs	r3, #0
 8006bee:	603b      	str	r3, [r7, #0]
 8006bf0:	e055      	b.n	8006c9e <tcp_oos_insert_segment+0xfa>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	899b      	ldrh	r3, [r3, #12]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fa fc98 	bl	8001530 <lwip_htons>
 8006c00:	4603      	mov	r3, r0
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00c      	beq.n	8006c26 <tcp_oos_insert_segment+0x82>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691c      	ldr	r4, [r3, #16]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	899b      	ldrh	r3, [r3, #12]
 8006c16:	b29d      	uxth	r5, r3
 8006c18:	2001      	movs	r0, #1
 8006c1a:	f7fa fc89 	bl	8001530 <lwip_htons>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	432b      	orrs	r3, r5
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f7fe f99d 	bl	8004f70 <tcp_seg_free>
    while (next &&
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00e      	beq.n	8006c5a <tcp_oos_insert_segment+0xb6>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	891b      	ldrh	r3, [r3, #8]
 8006c40:	461a      	mov	r2, r3
 8006c42:	4b1d      	ldr	r3, [pc, #116]	; (8006cb8 <tcp_oos_insert_segment+0x114>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	441a      	add	r2, r3
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	8909      	ldrh	r1, [r1, #8]
 8006c52:	440b      	add	r3, r1
 8006c54:	1ad3      	subs	r3, r2, r3
    while (next &&
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	dacb      	bge.n	8006bf2 <tcp_oos_insert_segment+0x4e>
    }
    if (next &&
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01e      	beq.n	8006c9e <tcp_oos_insert_segment+0xfa>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	891b      	ldrh	r3, [r3, #8]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4b12      	ldr	r3, [pc, #72]	; (8006cb8 <tcp_oos_insert_segment+0x114>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	440b      	add	r3, r1
 8006c72:	1ad3      	subs	r3, r2, r3
    if (next &&
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	da12      	bge.n	8006c9e <tcp_oos_insert_segment+0xfa>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	4b0d      	ldr	r3, [pc, #52]	; (8006cb8 <tcp_oos_insert_segment+0x114>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	891b      	ldrh	r3, [r3, #8]
 8006c96:	4619      	mov	r1, r3
 8006c98:	4610      	mov	r0, r2
 8006c9a:	f7fc fc37 	bl	800350c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	601a      	str	r2, [r3, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bdb0      	pop	{r4, r5, r7, pc}
 8006cac:	08014820 	.word	0x08014820
 8006cb0:	08014ad0 	.word	0x08014ad0
 8006cb4:	0801485c 	.word	0x0801485c
 8006cb8:	20000758 	.word	0x20000758

08006cbc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8006cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8006cca:	e048      	b.n	8006d5e <tcp_free_acked_segments+0xa2>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fc fe44 	bl	8003968 <pbuf_clen>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006cea:	8a7a      	ldrh	r2, [r7, #18]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d90b      	bls.n	8006d08 <tcp_free_acked_segments+0x4c>
 8006cf0:	4b2f      	ldr	r3, [pc, #188]	; (8006db0 <tcp_free_acked_segments+0xf4>)
 8006cf2:	f240 4264 	movw	r2, #1124	; 0x464
 8006cf6:	492f      	ldr	r1, [pc, #188]	; (8006db4 <tcp_free_acked_segments+0xf8>)
 8006cf8:	482f      	ldr	r0, [pc, #188]	; (8006db8 <tcp_free_acked_segments+0xfc>)
 8006cfa:	f00b fafd 	bl	80122f8 <iprintf>
 8006cfe:	2000      	movs	r0, #0
 8006d00:	f00b fbfc 	bl	80124fc <fflush>
 8006d04:	f00b fb41 	bl	801238a <abort>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8006d0e:	8a7b      	ldrh	r3, [r7, #18]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	891a      	ldrh	r2, [r3, #8]
 8006d1e:	4b27      	ldr	r3, [pc, #156]	; (8006dbc <tcp_free_acked_segments+0x100>)
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	4413      	add	r3, r2
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	4b25      	ldr	r3, [pc, #148]	; (8006dbc <tcp_free_acked_segments+0x100>)
 8006d28:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8006d2a:	6978      	ldr	r0, [r7, #20]
 8006d2c:	f7fe f920 	bl	8004f70 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d011      	beq.n	8006d5e <tcp_free_acked_segments+0xa2>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10e      	bne.n	8006d5e <tcp_free_acked_segments+0xa2>
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10b      	bne.n	8006d5e <tcp_free_acked_segments+0xa2>
 8006d46:	4b1a      	ldr	r3, [pc, #104]	; (8006db0 <tcp_free_acked_segments+0xf4>)
 8006d48:	f240 426f 	movw	r2, #1135	; 0x46f
 8006d4c:	491c      	ldr	r1, [pc, #112]	; (8006dc0 <tcp_free_acked_segments+0x104>)
 8006d4e:	481a      	ldr	r0, [pc, #104]	; (8006db8 <tcp_free_acked_segments+0xfc>)
 8006d50:	f00b fad2 	bl	80122f8 <iprintf>
 8006d54:	2000      	movs	r0, #0
 8006d56:	f00b fbd1 	bl	80124fc <fflush>
 8006d5a:	f00b fb16 	bl	801238a <abort>
  while (seg_list != NULL &&
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d020      	beq.n	8006da6 <tcp_free_acked_segments+0xea>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8006d64:	4b17      	ldr	r3, [pc, #92]	; (8006dc4 <tcp_free_acked_segments+0x108>)
 8006d66:	681c      	ldr	r4, [r3, #0]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fa fbf3 	bl	800155a <lwip_htonl>
 8006d74:	4605      	mov	r5, r0
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	891b      	ldrh	r3, [r3, #8]
 8006d7a:	461e      	mov	r6, r3
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	899b      	ldrh	r3, [r3, #12]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fa fbd3 	bl	8001530 <lwip_htons>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <tcp_free_acked_segments+0xde>
 8006d96:	2301      	movs	r3, #1
 8006d98:	e000      	b.n	8006d9c <tcp_free_acked_segments+0xe0>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	4433      	add	r3, r6
 8006d9e:	442b      	add	r3, r5
 8006da0:	1ae3      	subs	r3, r4, r3
  while (seg_list != NULL &&
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	da92      	bge.n	8006ccc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8006da6:	68bb      	ldr	r3, [r7, #8]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	371c      	adds	r7, #28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006db0:	08014820 	.word	0x08014820
 8006db4:	08014af8 	.word	0x08014af8
 8006db8:	0801485c 	.word	0x0801485c
 8006dbc:	20000760 	.word	0x20000760
 8006dc0:	08014b20 	.word	0x08014b20
 8006dc4:	2000075c 	.word	0x2000075c

08006dc8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8006dc8:	b5b0      	push	{r4, r5, r7, lr}
 8006dca:	b094      	sub	sp, #80	; 0x50
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10b      	bne.n	8006dee <tcp_receive+0x26>
 8006dd6:	4bab      	ldr	r3, [pc, #684]	; (8007084 <tcp_receive+0x2bc>)
 8006dd8:	f240 4287 	movw	r2, #1159	; 0x487
 8006ddc:	49aa      	ldr	r1, [pc, #680]	; (8007088 <tcp_receive+0x2c0>)
 8006dde:	48ab      	ldr	r0, [pc, #684]	; (800708c <tcp_receive+0x2c4>)
 8006de0:	f00b fa8a 	bl	80122f8 <iprintf>
 8006de4:	2000      	movs	r0, #0
 8006de6:	f00b fb89 	bl	80124fc <fflush>
 8006dea:	f00b face 	bl	801238a <abort>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	7d1b      	ldrb	r3, [r3, #20]
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d80b      	bhi.n	8006e0e <tcp_receive+0x46>
 8006df6:	4ba3      	ldr	r3, [pc, #652]	; (8007084 <tcp_receive+0x2bc>)
 8006df8:	f44f 6291 	mov.w	r2, #1160	; 0x488
 8006dfc:	49a4      	ldr	r1, [pc, #656]	; (8007090 <tcp_receive+0x2c8>)
 8006dfe:	48a3      	ldr	r0, [pc, #652]	; (800708c <tcp_receive+0x2c4>)
 8006e00:	f00b fa7a 	bl	80122f8 <iprintf>
 8006e04:	2000      	movs	r0, #0
 8006e06:	f00b fb79 	bl	80124fc <fflush>
 8006e0a:	f00b fabe 	bl	801238a <abort>

  if (flags & TCP_ACK) {
 8006e0e:	4ba1      	ldr	r3, [pc, #644]	; (8007094 <tcp_receive+0x2cc>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	f003 0310 	and.w	r3, r3, #16
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 8263 	beq.w	80072e2 <tcp_receive+0x51a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e22:	461a      	mov	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e28:	4413      	add	r3, r2
 8006e2a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e30:	4b99      	ldr	r3, [pc, #612]	; (8007098 <tcp_receive+0x2d0>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	db1b      	blt.n	8006e72 <tcp_receive+0xaa>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e3e:	4b96      	ldr	r3, [pc, #600]	; (8007098 <tcp_receive+0x2d0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d106      	bne.n	8006e54 <tcp_receive+0x8c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006e4a:	4b94      	ldr	r3, [pc, #592]	; (800709c <tcp_receive+0x2d4>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	db0e      	blt.n	8006e72 <tcp_receive+0xaa>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006e58:	4b90      	ldr	r3, [pc, #576]	; (800709c <tcp_receive+0x2d4>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d125      	bne.n	8006eac <tcp_receive+0xe4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8006e60:	4b8f      	ldr	r3, [pc, #572]	; (80070a0 <tcp_receive+0x2d8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	89db      	ldrh	r3, [r3, #14]
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d91c      	bls.n	8006eac <tcp_receive+0xe4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8006e72:	4b8b      	ldr	r3, [pc, #556]	; (80070a0 <tcp_receive+0x2d8>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	89db      	ldrh	r3, [r3, #14]
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d205      	bcs.n	8006e9c <tcp_receive+0xd4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8006e9c:	4b7e      	ldr	r3, [pc, #504]	; (8007098 <tcp_receive+0x2d0>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8006ea4:	4b7d      	ldr	r3, [pc, #500]	; (800709c <tcp_receive+0x2d4>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eb0:	4b7a      	ldr	r3, [pc, #488]	; (800709c <tcp_receive+0x2d4>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	db58      	blt.n	8006f6c <tcp_receive+0x1a4>
      /* Clause 2 */
      if (tcplen == 0) {
 8006eba:	4b7a      	ldr	r3, [pc, #488]	; (80070a4 <tcp_receive+0x2dc>)
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f040 81af 	bne.w	8007222 <tcp_receive+0x45a>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8006ece:	441a      	add	r2, r3
 8006ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	f040 81a5 	bne.w	8007222 <tcp_receive+0x45a>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f2c0 819f 	blt.w	8007222 <tcp_receive+0x45a>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ee8:	4b6c      	ldr	r3, [pc, #432]	; (800709c <tcp_receive+0x2d4>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	f040 8198 	bne.w	8007222 <tcp_receive+0x45a>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006ef8:	3301      	adds	r3, #1
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d907      	bls.n	8006f16 <tcp_receive+0x14e>
                ++pcb->dupacks;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d91b      	bls.n	8006f58 <tcp_receive+0x190>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f2a:	4413      	add	r3, r2
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d30a      	bcc.n	8006f4e <tcp_receive+0x186>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f42:	4413      	add	r3, r2
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8006f4c:	e004      	b.n	8006f58 <tcp_receive+0x190>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	f240 815f 	bls.w	8007222 <tcp_receive+0x45a>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 ffb3 	bl	8008ed0 <tcp_rexmit_fast>
 8006f6a:	e15a      	b.n	8007222 <tcp_receive+0x45a>
              }
            }
          }
        }
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8006f6c:	4b4b      	ldr	r3, [pc, #300]	; (800709c <tcp_receive+0x2d4>)
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	3b01      	subs	r3, #1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f2c0 814d 	blt.w	8007218 <tcp_receive+0x450>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f82:	4b46      	ldr	r3, [pc, #280]	; (800709c <tcp_receive+0x2d4>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f2c0 8145 	blt.w	8007218 <tcp_receive+0x450>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	8b5b      	ldrh	r3, [r3, #26]
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d010      	beq.n	8006fbc <tcp_receive+0x1f4>
        tcp_clear_flags(pcb, TF_INFR);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	8b5b      	ldrh	r3, [r3, #26]
 8006f9e:	f023 0304 	bic.w	r3, r3, #4
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006fca:	10db      	asrs	r3, r3, #3
 8006fcc:	b21b      	sxth	r3, r3
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	4413      	add	r3, r2
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	b21a      	sxth	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8006fe4:	4b2d      	ldr	r3, [pc, #180]	; (800709c <tcp_receive+0x2d4>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	867b      	strh	r3, [r7, #50]	; 0x32

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8006ffc:	4b27      	ldr	r3, [pc, #156]	; (800709c <tcp_receive+0x2d4>)
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	7d1b      	ldrb	r3, [r3, #20]
 8007008:	2b03      	cmp	r3, #3
 800700a:	f240 8096 	bls.w	800713a <tcp_receive+0x372>
        if (pcb->cwnd < pcb->ssthresh) {
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800701a:	429a      	cmp	r2, r3
 800701c:	d244      	bcs.n	80070a8 <tcp_receive+0x2e0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	8b5b      	ldrh	r3, [r3, #26]
 8007022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <tcp_receive+0x266>
 800702a:	2301      	movs	r3, #1
 800702c:	e000      	b.n	8007030 <tcp_receive+0x268>
 800702e:	2302      	movs	r3, #2
 8007030:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8007034:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007038:	b29a      	uxth	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800703e:	fb12 f303 	smulbb	r3, r2, r3
 8007042:	b29a      	uxth	r2, r3
 8007044:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007046:	4293      	cmp	r3, r2
 8007048:	bf28      	it	cs
 800704a:	4613      	movcs	r3, r2
 800704c:	85fb      	strh	r3, [r7, #46]	; 0x2e
          TCP_WND_INC(pcb->cwnd, increase);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007054:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007056:	4413      	add	r3, r2
 8007058:	b29a      	uxth	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007060:	429a      	cmp	r2, r3
 8007062:	d309      	bcc.n	8007078 <tcp_receive+0x2b0>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800706a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800706c:	4413      	add	r3, r2
 800706e:	b29a      	uxth	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007076:	e060      	b.n	800713a <tcp_receive+0x372>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800707e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007082:	e05a      	b.n	800713a <tcp_receive+0x372>
 8007084:	08014820 	.word	0x08014820
 8007088:	08014b40 	.word	0x08014b40
 800708c:	0801485c 	.word	0x0801485c
 8007090:	08014b5c 	.word	0x08014b5c
 8007094:	20000764 	.word	0x20000764
 8007098:	20000758 	.word	0x20000758
 800709c:	2000075c 	.word	0x2000075c
 80070a0:	20000748 	.word	0x20000748
 80070a4:	20000762 	.word	0x20000762
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80070ae:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80070b0:	4413      	add	r3, r2
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d309      	bcc.n	80070d2 <tcp_receive+0x30a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80070c4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80070c6:	4413      	add	r3, r2
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80070d0:	e004      	b.n	80070dc <tcp_receive+0x314>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d326      	bcc.n	800713a <tcp_receive+0x372>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800710c:	4413      	add	r3, r2
 800710e:	b29a      	uxth	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007116:	429a      	cmp	r2, r3
 8007118:	d30a      	bcc.n	8007130 <tcp_receive+0x368>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007124:	4413      	add	r3, r2
 8007126:	b29a      	uxth	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800712e:	e004      	b.n	800713a <tcp_receive+0x372>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007136:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007142:	4aa0      	ldr	r2, [pc, #640]	; (80073c4 <tcp_receive+0x5fc>)
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7ff fdb9 	bl	8006cbc <tcp_free_acked_segments>
 800714a:	4602      	mov	r2, r0
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007158:	4a9b      	ldr	r2, [pc, #620]	; (80073c8 <tcp_receive+0x600>)
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7ff fdae 	bl	8006cbc <tcp_free_acked_segments>
 8007160:	4602      	mov	r2, r0
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716a:	2b00      	cmp	r3, #0
 800716c:	d104      	bne.n	8007178 <tcp_receive+0x3b0>
        pcb->rtime = -1;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007174:	861a      	strh	r2, [r3, #48]	; 0x30
 8007176:	e002      	b.n	800717e <tcp_receive+0x3b6>
      } else {
        pcb->rtime = 0;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007188:	2b00      	cmp	r3, #0
 800718a:	d103      	bne.n	8007194 <tcp_receive+0x3cc>
        pcb->unsent_oversize = 0;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800719a:	4b8c      	ldr	r3, [pc, #560]	; (80073cc <tcp_receive+0x604>)
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	4413      	add	r3, r2
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	8b5b      	ldrh	r3, [r3, #26]
 80071ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d035      	beq.n	8007220 <tcp_receive+0x458>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d118      	bne.n	80071ee <tcp_receive+0x426>
          if ((pcb->unsent == NULL) ||
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00c      	beq.n	80071de <tcp_receive+0x416>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fa f9c4 	bl	800155a <lwip_htonl>
 80071d2:	4602      	mov	r2, r0
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d8:	1ad3      	subs	r3, r2, r3
          if ((pcb->unsent == NULL) ||
 80071da:	2b00      	cmp	r3, #0
 80071dc:	db20      	blt.n	8007220 <tcp_receive+0x458>
            tcp_clear_flags(pcb, TF_RTO);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	8b5b      	ldrh	r3, [r3, #26]
 80071e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80071ec:	e018      	b.n	8007220 <tcp_receive+0x458>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fa f9af 	bl	800155a <lwip_htonl>
 80071fc:	4602      	mov	r2, r0
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	db0b      	blt.n	8007220 <tcp_receive+0x458>
          tcp_clear_flags(pcb, TF_RTO);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	8b5b      	ldrh	r3, [r3, #26]
 800720c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007210:	b29a      	uxth	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007216:	e003      	b.n	8007220 <tcp_receive+0x458>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f002 f8fb 	bl	8009414 <tcp_send_empty_ack>
 800721e:	e000      	b.n	8007222 <tcp_receive+0x45a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007220:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007226:	2b00      	cmp	r3, #0
 8007228:	d05b      	beq.n	80072e2 <tcp_receive+0x51a>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800722e:	4b68      	ldr	r3, [pc, #416]	; (80073d0 <tcp_receive+0x608>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b00      	cmp	r3, #0
 8007236:	da54      	bge.n	80072e2 <tcp_receive+0x51a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8007238:	4b66      	ldr	r3, [pc, #408]	; (80073d4 <tcp_receive+0x60c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	b29a      	uxth	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007242:	b29b      	uxth	r3, r3
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	b29b      	uxth	r3, r3
 8007248:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800724c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007256:	10db      	asrs	r3, r3, #3
 8007258:	b21b      	sxth	r3, r3
 800725a:	b29b      	uxth	r3, r3
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	b29b      	uxth	r3, r3
 8007260:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800726a:	b29a      	uxth	r2, r3
 800726c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007270:	4413      	add	r3, r2
 8007272:	b29b      	uxth	r3, r3
 8007274:	b21a      	sxth	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800727a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800727e:	2b00      	cmp	r3, #0
 8007280:	da05      	bge.n	800728e <tcp_receive+0x4c6>
        m = (s16_t) - m;
 8007282:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007286:	425b      	negs	r3, r3
 8007288:	b29b      	uxth	r3, r3
 800728a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800728e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007298:	109b      	asrs	r3, r3, #2
 800729a:	b21b      	sxth	r3, r3
 800729c:	b29b      	uxth	r3, r3
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072b2:	4413      	add	r3, r2
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	b21a      	sxth	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80072c2:	10db      	asrs	r3, r3, #3
 80072c4:	b21b      	sxth	r3, r3
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	4413      	add	r3, r2
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	b21a      	sxth	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80072e2:	4b3d      	ldr	r3, [pc, #244]	; (80073d8 <tcp_receive+0x610>)
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 850f 	beq.w	8007d0a <tcp_receive+0xf42>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	7d1b      	ldrb	r3, [r3, #20]
 80072f0:	2b06      	cmp	r3, #6
 80072f2:	f200 850a 	bhi.w	8007d0a <tcp_receive+0xf42>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072fa:	4b38      	ldr	r3, [pc, #224]	; (80073dc <tcp_receive+0x614>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	3b01      	subs	r3, #1
 8007302:	2b00      	cmp	r3, #0
 8007304:	f2c0 809e 	blt.w	8007444 <tcp_receive+0x67c>
 8007308:	4b33      	ldr	r3, [pc, #204]	; (80073d8 <tcp_receive+0x610>)
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	461a      	mov	r2, r3
 800730e:	4b33      	ldr	r3, [pc, #204]	; (80073dc <tcp_receive+0x614>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	441a      	add	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	425b      	negs	r3, r3
 800731a:	4413      	add	r3, r2
 800731c:	3b01      	subs	r3, #1
 800731e:	2b00      	cmp	r3, #0
 8007320:	f2c0 8090 	blt.w	8007444 <tcp_receive+0x67c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8007324:	4b2e      	ldr	r3, [pc, #184]	; (80073e0 <tcp_receive+0x618>)
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	64bb      	str	r3, [r7, #72]	; 0x48
      u32_t off32 = pcb->rcv_nxt - seqno;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800732e:	4b2b      	ldr	r3, [pc, #172]	; (80073dc <tcp_receive+0x614>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	62bb      	str	r3, [r7, #40]	; 0x28
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8007336:	4b2a      	ldr	r3, [pc, #168]	; (80073e0 <tcp_receive+0x618>)
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10b      	bne.n	8007356 <tcp_receive+0x58e>
 800733e:	4b29      	ldr	r3, [pc, #164]	; (80073e4 <tcp_receive+0x61c>)
 8007340:	f240 529a 	movw	r2, #1434	; 0x59a
 8007344:	4928      	ldr	r1, [pc, #160]	; (80073e8 <tcp_receive+0x620>)
 8007346:	4829      	ldr	r0, [pc, #164]	; (80073ec <tcp_receive+0x624>)
 8007348:	f00a ffd6 	bl	80122f8 <iprintf>
 800734c:	2000      	movs	r0, #0
 800734e:	f00b f8d5 	bl	80124fc <fflush>
 8007352:	f00b f81a 	bl	801238a <abort>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8007356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007358:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800735c:	4293      	cmp	r3, r2
 800735e:	d90b      	bls.n	8007378 <tcp_receive+0x5b0>
 8007360:	4b20      	ldr	r3, [pc, #128]	; (80073e4 <tcp_receive+0x61c>)
 8007362:	f240 529b 	movw	r2, #1435	; 0x59b
 8007366:	4922      	ldr	r1, [pc, #136]	; (80073f0 <tcp_receive+0x628>)
 8007368:	4820      	ldr	r0, [pc, #128]	; (80073ec <tcp_receive+0x624>)
 800736a:	f00a ffc5 	bl	80122f8 <iprintf>
 800736e:	2000      	movs	r0, #0
 8007370:	f00b f8c4 	bl	80124fc <fflush>
 8007374:	f00b f809 	bl	801238a <abort>
      off = (u16_t)off32;
 8007378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800737e:	4b18      	ldr	r3, [pc, #96]	; (80073e0 <tcp_receive+0x618>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	891b      	ldrh	r3, [r3, #8]
 8007384:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007388:	429a      	cmp	r2, r3
 800738a:	d90b      	bls.n	80073a4 <tcp_receive+0x5dc>
 800738c:	4b15      	ldr	r3, [pc, #84]	; (80073e4 <tcp_receive+0x61c>)
 800738e:	f240 529d 	movw	r2, #1437	; 0x59d
 8007392:	4918      	ldr	r1, [pc, #96]	; (80073f4 <tcp_receive+0x62c>)
 8007394:	4815      	ldr	r0, [pc, #84]	; (80073ec <tcp_receive+0x624>)
 8007396:	f00a ffaf 	bl	80122f8 <iprintf>
 800739a:	2000      	movs	r0, #0
 800739c:	f00b f8ae 	bl	80124fc <fflush>
 80073a0:	f00a fff3 	bl	801238a <abort>
      inseg.len -= off;
 80073a4:	4b0e      	ldr	r3, [pc, #56]	; (80073e0 <tcp_receive+0x618>)
 80073a6:	891a      	ldrh	r2, [r3, #8]
 80073a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	4b0b      	ldr	r3, [pc, #44]	; (80073e0 <tcp_receive+0x618>)
 80073b2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80073b4:	4b0a      	ldr	r3, [pc, #40]	; (80073e0 <tcp_receive+0x618>)
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	891a      	ldrh	r2, [r3, #8]
 80073ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	84fb      	strh	r3, [r7, #38]	; 0x26
      while (p->len < off) {
 80073c2:	e029      	b.n	8007418 <tcp_receive+0x650>
 80073c4:	08014b78 	.word	0x08014b78
 80073c8:	08014b80 	.word	0x08014b80
 80073cc:	20000760 	.word	0x20000760
 80073d0:	2000075c 	.word	0x2000075c
 80073d4:	200018e8 	.word	0x200018e8
 80073d8:	20000762 	.word	0x20000762
 80073dc:	20000758 	.word	0x20000758
 80073e0:	20000734 	.word	0x20000734
 80073e4:	08014820 	.word	0x08014820
 80073e8:	08014b88 	.word	0x08014b88
 80073ec:	0801485c 	.word	0x0801485c
 80073f0:	08014b98 	.word	0x08014b98
 80073f4:	08014ba8 	.word	0x08014ba8
        off -= p->len;
 80073f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073fa:	895b      	ldrh	r3, [r3, #10]
 80073fc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8007406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007408:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800740a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800740c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800740e:	2200      	movs	r2, #0
 8007410:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8007412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	64bb      	str	r3, [r7, #72]	; 0x48
      while (p->len < off) {
 8007418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800741a:	895b      	ldrh	r3, [r3, #10]
 800741c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007420:	429a      	cmp	r2, r3
 8007422:	d8e9      	bhi.n	80073f8 <tcp_receive+0x630>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8007424:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007428:	4619      	mov	r1, r3
 800742a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800742c:	f7fc f990 	bl	8003750 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8007430:	4b94      	ldr	r3, [pc, #592]	; (8007684 <tcp_receive+0x8bc>)
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007438:	4993      	ldr	r1, [pc, #588]	; (8007688 <tcp_receive+0x8c0>)
 800743a:	600a      	str	r2, [r1, #0]
 800743c:	4a92      	ldr	r2, [pc, #584]	; (8007688 <tcp_receive+0x8c0>)
 800743e:	6812      	ldr	r2, [r2, #0]
 8007440:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007442:	e00d      	b.n	8007460 <tcp_receive+0x698>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8007444:	4b90      	ldr	r3, [pc, #576]	; (8007688 <tcp_receive+0x8c0>)
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	da06      	bge.n	8007460 <tcp_receive+0x698>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	8b5b      	ldrh	r3, [r3, #26]
 8007456:	f043 0302 	orr.w	r3, r3, #2
 800745a:	b29a      	uxth	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007460:	4b89      	ldr	r3, [pc, #548]	; (8007688 <tcp_receive+0x8c0>)
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	f2c0 8448 	blt.w	8007d00 <tcp_receive+0xf38>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007478:	441a      	add	r2, r3
 800747a:	4b83      	ldr	r3, [pc, #524]	; (8007688 <tcp_receive+0x8c0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	425b      	negs	r3, r3
 8007480:	4413      	add	r3, r2
 8007482:	3b01      	subs	r3, #1
 8007484:	2b00      	cmp	r3, #0
 8007486:	f2c0 843b 	blt.w	8007d00 <tcp_receive+0xf38>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800748e:	4b7e      	ldr	r3, [pc, #504]	; (8007688 <tcp_receive+0x8c0>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	429a      	cmp	r2, r3
 8007494:	f040 82ab 	bne.w	80079ee <tcp_receive+0xc26>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8007498:	4b7a      	ldr	r3, [pc, #488]	; (8007684 <tcp_receive+0x8bc>)
 800749a:	891c      	ldrh	r4, [r3, #8]
 800749c:	4b79      	ldr	r3, [pc, #484]	; (8007684 <tcp_receive+0x8bc>)
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	899b      	ldrh	r3, [r3, #12]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fa f843 	bl	8001530 <lwip_htons>
 80074aa:	4603      	mov	r3, r0
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <tcp_receive+0x6f2>
 80074b6:	2301      	movs	r3, #1
 80074b8:	e000      	b.n	80074bc <tcp_receive+0x6f4>
 80074ba:	2300      	movs	r3, #0
 80074bc:	4423      	add	r3, r4
 80074be:	b29a      	uxth	r2, r3
 80074c0:	4b72      	ldr	r3, [pc, #456]	; (800768c <tcp_receive+0x8c4>)
 80074c2:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80074c8:	4b70      	ldr	r3, [pc, #448]	; (800768c <tcp_receive+0x8c4>)
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d27a      	bcs.n	80075c6 <tcp_receive+0x7fe>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80074d0:	4b6c      	ldr	r3, [pc, #432]	; (8007684 <tcp_receive+0x8bc>)
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	899b      	ldrh	r3, [r3, #12]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fa f829 	bl	8001530 <lwip_htons>
 80074de:	4603      	mov	r3, r0
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d01f      	beq.n	800752a <tcp_receive+0x762>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80074ea:	4b66      	ldr	r3, [pc, #408]	; (8007684 <tcp_receive+0x8bc>)
 80074ec:	691c      	ldr	r4, [r3, #16]
 80074ee:	4b65      	ldr	r3, [pc, #404]	; (8007684 <tcp_receive+0x8bc>)
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	899b      	ldrh	r3, [r3, #12]
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	b21b      	sxth	r3, r3
 80074f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80074fc:	b21d      	sxth	r5, r3
 80074fe:	4b61      	ldr	r3, [pc, #388]	; (8007684 <tcp_receive+0x8bc>)
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	899b      	ldrh	r3, [r3, #12]
 8007504:	b29b      	uxth	r3, r3
 8007506:	4618      	mov	r0, r3
 8007508:	f7fa f812 	bl	8001530 <lwip_htons>
 800750c:	4603      	mov	r3, r0
 800750e:	b2db      	uxtb	r3, r3
 8007510:	b29b      	uxth	r3, r3
 8007512:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007516:	b29b      	uxth	r3, r3
 8007518:	4618      	mov	r0, r3
 800751a:	f7fa f809 	bl	8001530 <lwip_htons>
 800751e:	4603      	mov	r3, r0
 8007520:	b21b      	sxth	r3, r3
 8007522:	432b      	orrs	r3, r5
 8007524:	b21b      	sxth	r3, r3
 8007526:	b29b      	uxth	r3, r3
 8007528:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800752e:	4b55      	ldr	r3, [pc, #340]	; (8007684 <tcp_receive+0x8bc>)
 8007530:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007532:	4b54      	ldr	r3, [pc, #336]	; (8007684 <tcp_receive+0x8bc>)
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	899b      	ldrh	r3, [r3, #12]
 8007538:	b29b      	uxth	r3, r3
 800753a:	4618      	mov	r0, r3
 800753c:	f7f9 fff8 	bl	8001530 <lwip_htons>
 8007540:	4603      	mov	r3, r0
 8007542:	b2db      	uxtb	r3, r3
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d005      	beq.n	8007558 <tcp_receive+0x790>
            inseg.len -= 1;
 800754c:	4b4d      	ldr	r3, [pc, #308]	; (8007684 <tcp_receive+0x8bc>)
 800754e:	891b      	ldrh	r3, [r3, #8]
 8007550:	3b01      	subs	r3, #1
 8007552:	b29a      	uxth	r2, r3
 8007554:	4b4b      	ldr	r3, [pc, #300]	; (8007684 <tcp_receive+0x8bc>)
 8007556:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8007558:	4b4a      	ldr	r3, [pc, #296]	; (8007684 <tcp_receive+0x8bc>)
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	4b49      	ldr	r3, [pc, #292]	; (8007684 <tcp_receive+0x8bc>)
 800755e:	891b      	ldrh	r3, [r3, #8]
 8007560:	4619      	mov	r1, r3
 8007562:	4610      	mov	r0, r2
 8007564:	f7fb ffd2 	bl	800350c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8007568:	4b46      	ldr	r3, [pc, #280]	; (8007684 <tcp_receive+0x8bc>)
 800756a:	891c      	ldrh	r4, [r3, #8]
 800756c:	4b45      	ldr	r3, [pc, #276]	; (8007684 <tcp_receive+0x8bc>)
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	899b      	ldrh	r3, [r3, #12]
 8007572:	b29b      	uxth	r3, r3
 8007574:	4618      	mov	r0, r3
 8007576:	f7f9 ffdb 	bl	8001530 <lwip_htons>
 800757a:	4603      	mov	r3, r0
 800757c:	b2db      	uxtb	r3, r3
 800757e:	f003 0303 	and.w	r3, r3, #3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <tcp_receive+0x7c2>
 8007586:	2301      	movs	r3, #1
 8007588:	e000      	b.n	800758c <tcp_receive+0x7c4>
 800758a:	2300      	movs	r3, #0
 800758c:	4423      	add	r3, r4
 800758e:	b29a      	uxth	r2, r3
 8007590:	4b3e      	ldr	r3, [pc, #248]	; (800768c <tcp_receive+0x8c4>)
 8007592:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 8007594:	4b3d      	ldr	r3, [pc, #244]	; (800768c <tcp_receive+0x8c4>)
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	4b3b      	ldr	r3, [pc, #236]	; (8007688 <tcp_receive+0x8c0>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	441a      	add	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	6879      	ldr	r1, [r7, #4]
 80075a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80075a8:	440b      	add	r3, r1
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d00b      	beq.n	80075c6 <tcp_receive+0x7fe>
 80075ae:	4b38      	ldr	r3, [pc, #224]	; (8007690 <tcp_receive+0x8c8>)
 80075b0:	f240 52d2 	movw	r2, #1490	; 0x5d2
 80075b4:	4937      	ldr	r1, [pc, #220]	; (8007694 <tcp_receive+0x8cc>)
 80075b6:	4838      	ldr	r0, [pc, #224]	; (8007698 <tcp_receive+0x8d0>)
 80075b8:	f00a fe9e 	bl	80122f8 <iprintf>
 80075bc:	2000      	movs	r0, #0
 80075be:	f00a ff9d 	bl	80124fc <fflush>
 80075c2:	f00a fee2 	bl	801238a <abort>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 80ea 	beq.w	80077a4 <tcp_receive+0x9dc>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80075d0:	4b2c      	ldr	r3, [pc, #176]	; (8007684 <tcp_receive+0x8bc>)
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	899b      	ldrh	r3, [r3, #12]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	4618      	mov	r0, r3
 80075da:	f7f9 ffa9 	bl	8001530 <lwip_htons>
 80075de:	4603      	mov	r3, r0
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d010      	beq.n	800760c <tcp_receive+0x844>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80075ea:	e00a      	b.n	8007602 <tcp_receive+0x83a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075f0:	623b      	str	r3, [r7, #32]
              pcb->ooseq = pcb->ooseq->next;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80075fc:	6a38      	ldr	r0, [r7, #32]
 80075fe:	f7fd fcb7 	bl	8004f70 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1f0      	bne.n	80075ec <tcp_receive+0x824>
 800760a:	e0cb      	b.n	80077a4 <tcp_receive+0x9dc>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007610:	643b      	str	r3, [r7, #64]	; 0x40
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8007612:	e050      	b.n	80076b6 <tcp_receive+0x8ee>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8007614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	899b      	ldrh	r3, [r3, #12]
 800761a:	b29b      	uxth	r3, r3
 800761c:	4618      	mov	r0, r3
 800761e:	f7f9 ff87 	bl	8001530 <lwip_htons>
 8007622:	4603      	mov	r3, r0
 8007624:	b2db      	uxtb	r3, r3
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	d03b      	beq.n	80076a6 <tcp_receive+0x8de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800762e:	4b15      	ldr	r3, [pc, #84]	; (8007684 <tcp_receive+0x8bc>)
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	899b      	ldrh	r3, [r3, #12]
 8007634:	b29b      	uxth	r3, r3
 8007636:	4618      	mov	r0, r3
 8007638:	f7f9 ff7a 	bl	8001530 <lwip_htons>
 800763c:	4603      	mov	r3, r0
 800763e:	b2db      	uxtb	r3, r3
 8007640:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8007644:	2b00      	cmp	r3, #0
 8007646:	d12e      	bne.n	80076a6 <tcp_receive+0x8de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8007648:	4b0e      	ldr	r3, [pc, #56]	; (8007684 <tcp_receive+0x8bc>)
 800764a:	691c      	ldr	r4, [r3, #16]
 800764c:	4b0d      	ldr	r3, [pc, #52]	; (8007684 <tcp_receive+0x8bc>)
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	899b      	ldrh	r3, [r3, #12]
 8007652:	b29d      	uxth	r5, r3
 8007654:	2001      	movs	r0, #1
 8007656:	f7f9 ff6b 	bl	8001530 <lwip_htons>
 800765a:	4603      	mov	r3, r0
 800765c:	432b      	orrs	r3, r5
 800765e:	b29b      	uxth	r3, r3
 8007660:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8007662:	4b08      	ldr	r3, [pc, #32]	; (8007684 <tcp_receive+0x8bc>)
 8007664:	891c      	ldrh	r4, [r3, #8]
 8007666:	4b07      	ldr	r3, [pc, #28]	; (8007684 <tcp_receive+0x8bc>)
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	899b      	ldrh	r3, [r3, #12]
 800766c:	b29b      	uxth	r3, r3
 800766e:	4618      	mov	r0, r3
 8007670:	f7f9 ff5e 	bl	8001530 <lwip_htons>
 8007674:	4603      	mov	r3, r0
 8007676:	b2db      	uxtb	r3, r3
 8007678:	f003 0303 	and.w	r3, r3, #3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00d      	beq.n	800769c <tcp_receive+0x8d4>
 8007680:	2301      	movs	r3, #1
 8007682:	e00c      	b.n	800769e <tcp_receive+0x8d6>
 8007684:	20000734 	.word	0x20000734
 8007688:	20000758 	.word	0x20000758
 800768c:	20000762 	.word	0x20000762
 8007690:	08014820 	.word	0x08014820
 8007694:	08014bb8 	.word	0x08014bb8
 8007698:	0801485c 	.word	0x0801485c
 800769c:	2300      	movs	r3, #0
 800769e:	4423      	add	r3, r4
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	4b9f      	ldr	r3, [pc, #636]	; (8007920 <tcp_receive+0xb58>)
 80076a4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80076a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a8:	61fb      	str	r3, [r7, #28]
              next = next->next;
 80076aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	643b      	str	r3, [r7, #64]	; 0x40
              tcp_seg_free(tmp);
 80076b0:	69f8      	ldr	r0, [r7, #28]
 80076b2:	f7fd fc5d 	bl	8004f70 <tcp_seg_free>
            while (next &&
 80076b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00e      	beq.n	80076da <tcp_receive+0x912>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80076bc:	4b98      	ldr	r3, [pc, #608]	; (8007920 <tcp_receive+0xb58>)
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	4b98      	ldr	r3, [pc, #608]	; (8007924 <tcp_receive+0xb5c>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	441a      	add	r2, r3
 80076c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076d0:	8909      	ldrh	r1, [r1, #8]
 80076d2:	440b      	add	r3, r1
 80076d4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	da9c      	bge.n	8007614 <tcp_receive+0x84c>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80076da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d05e      	beq.n	800779e <tcp_receive+0x9d6>
                TCP_SEQ_GT(seqno + tcplen,
 80076e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	4b8e      	ldr	r3, [pc, #568]	; (8007920 <tcp_receive+0xb58>)
 80076e8:	881b      	ldrh	r3, [r3, #0]
 80076ea:	4619      	mov	r1, r3
 80076ec:	4b8d      	ldr	r3, [pc, #564]	; (8007924 <tcp_receive+0xb5c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	440b      	add	r3, r1
 80076f2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	da52      	bge.n	800779e <tcp_receive+0x9d6>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80076f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	b29a      	uxth	r2, r3
 8007700:	4b88      	ldr	r3, [pc, #544]	; (8007924 <tcp_receive+0xb5c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	b29b      	uxth	r3, r3
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	b29a      	uxth	r2, r3
 800770a:	4b87      	ldr	r3, [pc, #540]	; (8007928 <tcp_receive+0xb60>)
 800770c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800770e:	4b86      	ldr	r3, [pc, #536]	; (8007928 <tcp_receive+0xb60>)
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	899b      	ldrh	r3, [r3, #12]
 8007714:	b29b      	uxth	r3, r3
 8007716:	4618      	mov	r0, r3
 8007718:	f7f9 ff0a 	bl	8001530 <lwip_htons>
 800771c:	4603      	mov	r3, r0
 800771e:	b2db      	uxtb	r3, r3
 8007720:	f003 0302 	and.w	r3, r3, #2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d005      	beq.n	8007734 <tcp_receive+0x96c>
                inseg.len -= 1;
 8007728:	4b7f      	ldr	r3, [pc, #508]	; (8007928 <tcp_receive+0xb60>)
 800772a:	891b      	ldrh	r3, [r3, #8]
 800772c:	3b01      	subs	r3, #1
 800772e:	b29a      	uxth	r2, r3
 8007730:	4b7d      	ldr	r3, [pc, #500]	; (8007928 <tcp_receive+0xb60>)
 8007732:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8007734:	4b7c      	ldr	r3, [pc, #496]	; (8007928 <tcp_receive+0xb60>)
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	4b7b      	ldr	r3, [pc, #492]	; (8007928 <tcp_receive+0xb60>)
 800773a:	891b      	ldrh	r3, [r3, #8]
 800773c:	4619      	mov	r1, r3
 800773e:	4610      	mov	r0, r2
 8007740:	f7fb fee4 	bl	800350c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8007744:	4b78      	ldr	r3, [pc, #480]	; (8007928 <tcp_receive+0xb60>)
 8007746:	891c      	ldrh	r4, [r3, #8]
 8007748:	4b77      	ldr	r3, [pc, #476]	; (8007928 <tcp_receive+0xb60>)
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	899b      	ldrh	r3, [r3, #12]
 800774e:	b29b      	uxth	r3, r3
 8007750:	4618      	mov	r0, r3
 8007752:	f7f9 feed 	bl	8001530 <lwip_htons>
 8007756:	4603      	mov	r3, r0
 8007758:	b2db      	uxtb	r3, r3
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <tcp_receive+0x99e>
 8007762:	2301      	movs	r3, #1
 8007764:	e000      	b.n	8007768 <tcp_receive+0x9a0>
 8007766:	2300      	movs	r3, #0
 8007768:	4423      	add	r3, r4
 800776a:	b29a      	uxth	r2, r3
 800776c:	4b6c      	ldr	r3, [pc, #432]	; (8007920 <tcp_receive+0xb58>)
 800776e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue",
 8007770:	4b6b      	ldr	r3, [pc, #428]	; (8007920 <tcp_receive+0xb58>)
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	4b6b      	ldr	r3, [pc, #428]	; (8007924 <tcp_receive+0xb5c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	441a      	add	r2, r3
 800777c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	429a      	cmp	r2, r3
 8007784:	d00b      	beq.n	800779e <tcp_receive+0x9d6>
 8007786:	4b69      	ldr	r3, [pc, #420]	; (800792c <tcp_receive+0xb64>)
 8007788:	f240 6203 	movw	r2, #1539	; 0x603
 800778c:	4968      	ldr	r1, [pc, #416]	; (8007930 <tcp_receive+0xb68>)
 800778e:	4869      	ldr	r0, [pc, #420]	; (8007934 <tcp_receive+0xb6c>)
 8007790:	f00a fdb2 	bl	80122f8 <iprintf>
 8007794:	2000      	movs	r0, #0
 8007796:	f00a feb1 	bl	80124fc <fflush>
 800779a:	f00a fdf6 	bl	801238a <abort>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077a2:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80077a4:	4b5e      	ldr	r3, [pc, #376]	; (8007920 <tcp_receive+0xb58>)
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	461a      	mov	r2, r3
 80077aa:	4b5e      	ldr	r3, [pc, #376]	; (8007924 <tcp_receive+0xb5c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	441a      	add	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd", pcb->rcv_wnd >= tcplen);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80077b8:	4b59      	ldr	r3, [pc, #356]	; (8007920 <tcp_receive+0xb58>)
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d20b      	bcs.n	80077d8 <tcp_receive+0xa10>
 80077c0:	4b5a      	ldr	r3, [pc, #360]	; (800792c <tcp_receive+0xb64>)
 80077c2:	f240 620d 	movw	r2, #1549	; 0x60d
 80077c6:	495c      	ldr	r1, [pc, #368]	; (8007938 <tcp_receive+0xb70>)
 80077c8:	485a      	ldr	r0, [pc, #360]	; (8007934 <tcp_receive+0xb6c>)
 80077ca:	f00a fd95 	bl	80122f8 <iprintf>
 80077ce:	2000      	movs	r0, #0
 80077d0:	f00a fe94 	bl	80124fc <fflush>
 80077d4:	f00a fdd9 	bl	801238a <abort>
        pcb->rcv_wnd -= tcplen;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80077dc:	4b50      	ldr	r3, [pc, #320]	; (8007920 <tcp_receive+0xb58>)
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7fc fea1 	bl	8004530 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80077ee:	4b4e      	ldr	r3, [pc, #312]	; (8007928 <tcp_receive+0xb60>)
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	891b      	ldrh	r3, [r3, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d006      	beq.n	8007806 <tcp_receive+0xa3e>
          recv_data = inseg.p;
 80077f8:	4b4b      	ldr	r3, [pc, #300]	; (8007928 <tcp_receive+0xb60>)
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	4a4f      	ldr	r2, [pc, #316]	; (800793c <tcp_receive+0xb74>)
 80077fe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakenly) deallocate it. */
          inseg.p = NULL;
 8007800:	4b49      	ldr	r3, [pc, #292]	; (8007928 <tcp_receive+0xb60>)
 8007802:	2200      	movs	r2, #0
 8007804:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007806:	4b48      	ldr	r3, [pc, #288]	; (8007928 <tcp_receive+0xb60>)
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	899b      	ldrh	r3, [r3, #12]
 800780c:	b29b      	uxth	r3, r3
 800780e:	4618      	mov	r0, r3
 8007810:	f7f9 fe8e 	bl	8001530 <lwip_htons>
 8007814:	4603      	mov	r3, r0
 8007816:	b2db      	uxtb	r3, r3
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 80bc 	beq.w	800799a <tcp_receive+0xbd2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8007822:	4b47      	ldr	r3, [pc, #284]	; (8007940 <tcp_receive+0xb78>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	f043 0320 	orr.w	r3, r3, #32
 800782a:	b2da      	uxtb	r2, r3
 800782c:	4b44      	ldr	r3, [pc, #272]	; (8007940 <tcp_receive+0xb78>)
 800782e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8007830:	e0b3      	b.n	800799a <tcp_receive+0xbd2>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007836:	61bb      	str	r3, [r7, #24]
          seqno = pcb->ooseq->tcphdr->seqno;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	4a38      	ldr	r2, [pc, #224]	; (8007924 <tcp_receive+0xb5c>)
 8007842:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	891b      	ldrh	r3, [r3, #8]
 8007848:	461c      	mov	r4, r3
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	899b      	ldrh	r3, [r3, #12]
 8007850:	b29b      	uxth	r3, r3
 8007852:	4618      	mov	r0, r3
 8007854:	f7f9 fe6c 	bl	8001530 <lwip_htons>
 8007858:	4603      	mov	r3, r0
 800785a:	b2db      	uxtb	r3, r3
 800785c:	f003 0303 	and.w	r3, r3, #3
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <tcp_receive+0xaa0>
 8007864:	2301      	movs	r3, #1
 8007866:	e000      	b.n	800786a <tcp_receive+0xaa2>
 8007868:	2300      	movs	r3, #0
 800786a:	4423      	add	r3, r4
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007870:	441a      	add	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd",
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800787a:	461c      	mov	r4, r3
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	891b      	ldrh	r3, [r3, #8]
 8007880:	461d      	mov	r5, r3
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	899b      	ldrh	r3, [r3, #12]
 8007888:	b29b      	uxth	r3, r3
 800788a:	4618      	mov	r0, r3
 800788c:	f7f9 fe50 	bl	8001530 <lwip_htons>
 8007890:	4603      	mov	r3, r0
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 0303 	and.w	r3, r3, #3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <tcp_receive+0xad8>
 800789c:	2301      	movs	r3, #1
 800789e:	e000      	b.n	80078a2 <tcp_receive+0xada>
 80078a0:	2300      	movs	r3, #0
 80078a2:	442b      	add	r3, r5
 80078a4:	429c      	cmp	r4, r3
 80078a6:	d20b      	bcs.n	80078c0 <tcp_receive+0xaf8>
 80078a8:	4b20      	ldr	r3, [pc, #128]	; (800792c <tcp_receive+0xb64>)
 80078aa:	f240 6232 	movw	r2, #1586	; 0x632
 80078ae:	4925      	ldr	r1, [pc, #148]	; (8007944 <tcp_receive+0xb7c>)
 80078b0:	4820      	ldr	r0, [pc, #128]	; (8007934 <tcp_receive+0xb6c>)
 80078b2:	f00a fd21 	bl	80122f8 <iprintf>
 80078b6:	2000      	movs	r0, #0
 80078b8:	f00a fe20 	bl	80124fc <fflush>
 80078bc:	f00a fd65 	bl	801238a <abort>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	891b      	ldrh	r3, [r3, #8]
 80078c4:	461c      	mov	r4, r3
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	899b      	ldrh	r3, [r3, #12]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7f9 fe2e 	bl	8001530 <lwip_htons>
 80078d4:	4603      	mov	r3, r0
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	f003 0303 	and.w	r3, r3, #3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <tcp_receive+0xb1c>
 80078e0:	2301      	movs	r3, #1
 80078e2:	e000      	b.n	80078e6 <tcp_receive+0xb1e>
 80078e4:	2300      	movs	r3, #0
 80078e6:	18e1      	adds	r1, r4, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80078ec:	b28b      	uxth	r3, r1
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7fc fe1a 	bl	8004530 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	891b      	ldrh	r3, [r3, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d027      	beq.n	8007956 <tcp_receive+0xb8e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8007906:	4b0d      	ldr	r3, [pc, #52]	; (800793c <tcp_receive+0xb74>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d01c      	beq.n	8007948 <tcp_receive+0xb80>
              pbuf_cat(recv_data, cseg->p);
 800790e:	4b0b      	ldr	r3, [pc, #44]	; (800793c <tcp_receive+0xb74>)
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	4619      	mov	r1, r3
 8007918:	4610      	mov	r0, r2
 800791a:	f7fc f86b 	bl	80039f4 <pbuf_cat>
 800791e:	e017      	b.n	8007950 <tcp_receive+0xb88>
 8007920:	20000762 	.word	0x20000762
 8007924:	20000758 	.word	0x20000758
 8007928:	20000734 	.word	0x20000734
 800792c:	08014820 	.word	0x08014820
 8007930:	08014bf0 	.word	0x08014bf0
 8007934:	0801485c 	.word	0x0801485c
 8007938:	08014c2c 	.word	0x08014c2c
 800793c:	20000768 	.word	0x20000768
 8007940:	20000765 	.word	0x20000765
 8007944:	08014c4c 	.word	0x08014c4c
            } else {
              recv_data = cseg->p;
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	4a73      	ldr	r2, [pc, #460]	; (8007b1c <tcp_receive+0xd54>)
 800794e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	2200      	movs	r2, #0
 8007954:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	899b      	ldrh	r3, [r3, #12]
 800795c:	b29b      	uxth	r3, r3
 800795e:	4618      	mov	r0, r3
 8007960:	f7f9 fde6 	bl	8001530 <lwip_htons>
 8007964:	4603      	mov	r3, r0
 8007966:	b2db      	uxtb	r3, r3
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00d      	beq.n	800798c <tcp_receive+0xbc4>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8007970:	4b6b      	ldr	r3, [pc, #428]	; (8007b20 <tcp_receive+0xd58>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	f043 0320 	orr.w	r3, r3, #32
 8007978:	b2da      	uxtb	r2, r3
 800797a:	4b69      	ldr	r3, [pc, #420]	; (8007b20 <tcp_receive+0xd58>)
 800797c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	7d1b      	ldrb	r3, [r3, #20]
 8007982:	2b04      	cmp	r3, #4
 8007984:	d102      	bne.n	800798c <tcp_receive+0xbc4>
              pcb->state = CLOSE_WAIT;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2207      	movs	r2, #7
 800798a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8007994:	69b8      	ldr	r0, [r7, #24]
 8007996:	f7fd faeb 	bl	8004f70 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d008      	beq.n	80079b4 <tcp_receive+0xbec>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80079ae:	429a      	cmp	r2, r3
 80079b0:	f43f af3f 	beq.w	8007832 <tcp_receive+0xa6a>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	8b5b      	ldrh	r3, [r3, #26]
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00e      	beq.n	80079de <tcp_receive+0xc16>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	8b5b      	ldrh	r3, [r3, #26]
 80079c4:	f023 0301 	bic.w	r3, r3, #1
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	835a      	strh	r2, [r3, #26]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	8b5b      	ldrh	r3, [r3, #26]
 80079d2:	f043 0302 	orr.w	r3, r3, #2
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80079dc:	e194      	b.n	8007d08 <tcp_receive+0xf40>
        tcp_ack(pcb);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	8b5b      	ldrh	r3, [r3, #26]
 80079e2:	f043 0301 	orr.w	r3, r3, #1
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80079ec:	e18c      	b.n	8007d08 <tcp_receive+0xf40>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d106      	bne.n	8007a04 <tcp_receive+0xc3c>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80079f6:	484b      	ldr	r0, [pc, #300]	; (8007b24 <tcp_receive+0xd5c>)
 80079f8:	f7fd fad2 	bl	8004fa0 <tcp_seg_copy>
 80079fc:	4602      	mov	r2, r0
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	675a      	str	r2, [r3, #116]	; 0x74
 8007a02:	e179      	b.n	8007cf8 <tcp_receive+0xf30>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8007a04:	2300      	movs	r3, #0
 8007a06:	63bb      	str	r3, [r7, #56]	; 0x38
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a0e:	e161      	b.n	8007cd4 <tcp_receive+0xf0c>
            if (seqno == next->tcphdr->seqno) {
 8007a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	4b44      	ldr	r3, [pc, #272]	; (8007b28 <tcp_receive+0xd60>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d122      	bne.n	8007a64 <tcp_receive+0xc9c>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8007a1e:	4b41      	ldr	r3, [pc, #260]	; (8007b24 <tcp_receive+0xd5c>)
 8007a20:	891a      	ldrh	r2, [r3, #8]
 8007a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a24:	891b      	ldrh	r3, [r3, #8]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	f240 8159 	bls.w	8007cde <tcp_receive+0xf16>

                /* If next segment is the last segment in ooseq
                   and smaller than inseg, that means it has been
                   trimmed before to fit our window, so we just
                   break here. */
                if (next->next == NULL) {
 8007a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 8156 	beq.w	8007ce2 <tcp_receive+0xf1a>
                }

                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8007a36:	483b      	ldr	r0, [pc, #236]	; (8007b24 <tcp_receive+0xd5c>)
 8007a38:	f7fd fab2 	bl	8004fa0 <tcp_seg_copy>
 8007a3c:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 8150 	beq.w	8007ce6 <tcp_receive+0xf1e>
                  if (prev != NULL) {
 8007a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <tcp_receive+0xc8c>
                    prev->next = cseg;
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	e002      	b.n	8007a5a <tcp_receive+0xc92>
                  } else {
                    pcb->ooseq = cseg;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8007a5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f7ff f8a1 	bl	8006ba4 <tcp_oos_insert_segment>
                }
                break;
 8007a62:	e140      	b.n	8007ce6 <tcp_receive+0xf1e>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8007a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d117      	bne.n	8007a9a <tcp_receive+0xcd2>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8007a6a:	4b2f      	ldr	r3, [pc, #188]	; (8007b28 <tcp_receive+0xd60>)
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	da58      	bge.n	8007b2c <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8007a7a:	482a      	ldr	r0, [pc, #168]	; (8007b24 <tcp_receive+0xd5c>)
 8007a7c:	f7fd fa90 	bl	8004fa0 <tcp_seg_copy>
 8007a80:	6178      	str	r0, [r7, #20]
                  if (cseg != NULL) {
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 8130 	beq.w	8007cea <tcp_receive+0xf22>
                    pcb->ooseq = cseg;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8007a90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a92:	6978      	ldr	r0, [r7, #20]
 8007a94:	f7ff f886 	bl	8006ba4 <tcp_oos_insert_segment>
                  }
                  break;
 8007a98:	e127      	b.n	8007cea <tcp_receive+0xf22>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8007a9a:	4b23      	ldr	r3, [pc, #140]	; (8007b28 <tcp_receive+0xd60>)
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	db3f      	blt.n	8007b2c <tcp_receive+0xd64>
 8007aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	4b1d      	ldr	r3, [pc, #116]	; (8007b28 <tcp_receive+0xd60>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	db36      	blt.n	8007b2c <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8007abe:	4819      	ldr	r0, [pc, #100]	; (8007b24 <tcp_receive+0xd5c>)
 8007ac0:	f7fd fa6e 	bl	8004fa0 <tcp_seg_copy>
 8007ac4:	6138      	str	r0, [r7, #16]
                  if (cseg != NULL) {
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 8110 	beq.w	8007cee <tcp_receive+0xf26>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8007ace:	4b16      	ldr	r3, [pc, #88]	; (8007b28 <tcp_receive+0xd60>)
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ada:	8909      	ldrh	r1, [r1, #8]
 8007adc:	440b      	add	r3, r1
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	da12      	bge.n	8007b0a <tcp_receive+0xd42>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8007ae4:	4b10      	ldr	r3, [pc, #64]	; (8007b28 <tcp_receive+0xd60>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af8:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8007afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b00:	891b      	ldrh	r3, [r3, #8]
 8007b02:	4619      	mov	r1, r3
 8007b04:	4610      	mov	r0, r2
 8007b06:	f7fb fd01 	bl	800350c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8007b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8007b10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b12:	6938      	ldr	r0, [r7, #16]
 8007b14:	f7ff f846 	bl	8006ba4 <tcp_oos_insert_segment>
                  }
                  break;
 8007b18:	e0e9      	b.n	8007cee <tcp_receive+0xf26>
 8007b1a:	bf00      	nop
 8007b1c:	20000768 	.word	0x20000768
 8007b20:	20000765 	.word	0x20000765
 8007b24:	20000734 	.word	0x20000734
 8007b28:	20000758 	.word	0x20000758
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8007b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b2e:	63bb      	str	r3, [r7, #56]	; 0x38

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8007b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f040 80ca 	bne.w	8007cce <tcp_receive+0xf06>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8007b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	4b81      	ldr	r3, [pc, #516]	; (8007d48 <tcp_receive+0xf80>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f280 80c1 	bge.w	8007cce <tcp_receive+0xf06>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	899b      	ldrh	r3, [r3, #12]
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7f9 fceb 	bl	8001530 <lwip_htons>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f040 80c5 	bne.w	8007cf2 <tcp_receive+0xf2a>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8007b68:	4878      	ldr	r0, [pc, #480]	; (8007d4c <tcp_receive+0xf84>)
 8007b6a:	f7fd fa19 	bl	8004fa0 <tcp_seg_copy>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b72:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8007b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 80bc 	beq.w	8007cf6 <tcp_receive+0xf2e>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8007b7e:	4b72      	ldr	r3, [pc, #456]	; (8007d48 <tcp_receive+0xf80>)
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b8a:	8909      	ldrh	r1, [r1, #8]
 8007b8c:	440b      	add	r3, r1
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	da12      	bge.n	8007bba <tcp_receive+0xdf2>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8007b94:	4b6c      	ldr	r3, [pc, #432]	; (8007d48 <tcp_receive+0xf80>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8007baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb0:	891b      	ldrh	r3, [r3, #8]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	f7fb fca9 	bl	800350c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007bc2:	441a      	add	r2, r3
 8007bc4:	4b62      	ldr	r3, [pc, #392]	; (8007d50 <tcp_receive+0xf88>)
 8007bc6:	881b      	ldrh	r3, [r3, #0]
 8007bc8:	4619      	mov	r1, r3
 8007bca:	4b5f      	ldr	r3, [pc, #380]	; (8007d48 <tcp_receive+0xf80>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	440b      	add	r3, r1
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f280 808f 	bge.w	8007cf6 <tcp_receive+0xf2e>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8007bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	899b      	ldrh	r3, [r3, #12]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7f9 fca4 	bl	8001530 <lwip_htons>
 8007be8:	4603      	mov	r3, r0
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d022      	beq.n	8007c3a <tcp_receive+0xe72>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8007bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	691c      	ldr	r4, [r3, #16]
 8007bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	899b      	ldrh	r3, [r3, #12]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	b21b      	sxth	r3, r3
 8007c06:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007c0a:	b21d      	sxth	r5, r3
 8007c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	899b      	ldrh	r3, [r3, #12]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7f9 fc8a 	bl	8001530 <lwip_htons>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7f9 fc81 	bl	8001530 <lwip_htons>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	b21b      	sxth	r3, r3
 8007c32:	432b      	orrs	r3, r5
 8007c34:	b21b      	sxth	r3, r3
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8007c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c42:	b291      	uxth	r1, r2
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007c48:	440a      	add	r2, r1
 8007c4a:	b291      	uxth	r1, r2
 8007c4c:	4a3e      	ldr	r2, [pc, #248]	; (8007d48 <tcp_receive+0xf80>)
 8007c4e:	6812      	ldr	r2, [r2, #0]
 8007c50:	b292      	uxth	r2, r2
 8007c52:	1a8a      	subs	r2, r1, r2
 8007c54:	b292      	uxth	r2, r2
 8007c56:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8007c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	891b      	ldrh	r3, [r3, #8]
 8007c64:	4619      	mov	r1, r3
 8007c66:	4610      	mov	r0, r2
 8007c68:	f7fb fc50 	bl	800350c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8007c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	891c      	ldrh	r4, [r3, #8]
 8007c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	899b      	ldrh	r3, [r3, #12]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7f9 fc57 	bl	8001530 <lwip_htons>
 8007c82:	4603      	mov	r3, r0
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <tcp_receive+0xeca>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e000      	b.n	8007c94 <tcp_receive+0xecc>
 8007c92:	2300      	movs	r3, #0
 8007c94:	4423      	add	r3, r4
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	4b2d      	ldr	r3, [pc, #180]	; (8007d50 <tcp_receive+0xf88>)
 8007c9a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 8007c9c:	4b2c      	ldr	r3, [pc, #176]	; (8007d50 <tcp_receive+0xf88>)
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	4b29      	ldr	r3, [pc, #164]	; (8007d48 <tcp_receive+0xf80>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	441a      	add	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cac:	6879      	ldr	r1, [r7, #4]
 8007cae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007cb0:	440b      	add	r3, r1
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d01f      	beq.n	8007cf6 <tcp_receive+0xf2e>
 8007cb6:	4b27      	ldr	r3, [pc, #156]	; (8007d54 <tcp_receive+0xf8c>)
 8007cb8:	f240 7209 	movw	r2, #1801	; 0x709
 8007cbc:	4926      	ldr	r1, [pc, #152]	; (8007d58 <tcp_receive+0xf90>)
 8007cbe:	4827      	ldr	r0, [pc, #156]	; (8007d5c <tcp_receive+0xf94>)
 8007cc0:	f00a fb1a 	bl	80122f8 <iprintf>
 8007cc4:	2000      	movs	r0, #0
 8007cc6:	f00a fc19 	bl	80124fc <fflush>
 8007cca:	f00a fb5e 	bl	801238a <abort>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8007cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f47f ae9a 	bne.w	8007a10 <tcp_receive+0xc48>
 8007cdc:	e00c      	b.n	8007cf8 <tcp_receive+0xf30>
                break;
 8007cde:	bf00      	nop
 8007ce0:	e00a      	b.n	8007cf8 <tcp_receive+0xf30>
                  break;
 8007ce2:	bf00      	nop
 8007ce4:	e008      	b.n	8007cf8 <tcp_receive+0xf30>
                break;
 8007ce6:	bf00      	nop
 8007ce8:	e006      	b.n	8007cf8 <tcp_receive+0xf30>
                  break;
 8007cea:	bf00      	nop
 8007cec:	e004      	b.n	8007cf8 <tcp_receive+0xf30>
                  break;
 8007cee:	bf00      	nop
 8007cf0:	e002      	b.n	8007cf8 <tcp_receive+0xf30>
                  break;
 8007cf2:	bf00      	nop
 8007cf4:	e000      	b.n	8007cf8 <tcp_receive+0xf30>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8007cf6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f001 fb8b 	bl	8009414 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8007cfe:	e003      	b.n	8007d08 <tcp_receive+0xf40>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f001 fb87 	bl	8009414 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007d06:	e01b      	b.n	8007d40 <tcp_receive+0xf78>
 8007d08:	e01a      	b.n	8007d40 <tcp_receive+0xf78>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8007d0a:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <tcp_receive+0xf80>)
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	db0b      	blt.n	8007d30 <tcp_receive+0xf68>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007d20:	441a      	add	r2, r3
 8007d22:	4b09      	ldr	r3, [pc, #36]	; (8007d48 <tcp_receive+0xf80>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	425b      	negs	r3, r3
 8007d28:	4413      	add	r3, r2
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	da07      	bge.n	8007d40 <tcp_receive+0xf78>
      tcp_ack_now(pcb);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	8b5b      	ldrh	r3, [r3, #26]
 8007d34:	f043 0302 	orr.w	r3, r3, #2
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8007d3e:	e7ff      	b.n	8007d40 <tcp_receive+0xf78>
 8007d40:	bf00      	nop
 8007d42:	3750      	adds	r7, #80	; 0x50
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bdb0      	pop	{r4, r5, r7, pc}
 8007d48:	20000758 	.word	0x20000758
 8007d4c:	20000734 	.word	0x20000734
 8007d50:	20000762 	.word	0x20000762
 8007d54:	08014820 	.word	0x08014820
 8007d58:	08014bb8 	.word	0x08014bb8
 8007d5c:	0801485c 	.word	0x0801485c

08007d60 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8007d66:	4b15      	ldr	r3, [pc, #84]	; (8007dbc <tcp_get_next_optbyte+0x5c>)
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	b291      	uxth	r1, r2
 8007d6e:	4a13      	ldr	r2, [pc, #76]	; (8007dbc <tcp_get_next_optbyte+0x5c>)
 8007d70:	8011      	strh	r1, [r2, #0]
 8007d72:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8007d74:	4b12      	ldr	r3, [pc, #72]	; (8007dc0 <tcp_get_next_optbyte+0x60>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d004      	beq.n	8007d86 <tcp_get_next_optbyte+0x26>
 8007d7c:	4b11      	ldr	r3, [pc, #68]	; (8007dc4 <tcp_get_next_optbyte+0x64>)
 8007d7e:	881b      	ldrh	r3, [r3, #0]
 8007d80:	88fa      	ldrh	r2, [r7, #6]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d208      	bcs.n	8007d98 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8007d86:	4b10      	ldr	r3, [pc, #64]	; (8007dc8 <tcp_get_next_optbyte+0x68>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3314      	adds	r3, #20
 8007d8c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8007d8e:	88fb      	ldrh	r3, [r7, #6]
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	4413      	add	r3, r2
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	e00b      	b.n	8007db0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8007d98:	88fb      	ldrh	r3, [r7, #6]
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	4b09      	ldr	r3, [pc, #36]	; (8007dc4 <tcp_get_next_optbyte+0x64>)
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8007da6:	4b06      	ldr	r3, [pc, #24]	; (8007dc0 <tcp_get_next_optbyte+0x60>)
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	797b      	ldrb	r3, [r7, #5]
 8007dac:	4413      	add	r3, r2
 8007dae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	20000754 	.word	0x20000754
 8007dc0:	20000750 	.word	0x20000750
 8007dc4:	2000074e 	.word	0x2000074e
 8007dc8:	20000748 	.word	0x20000748

08007dcc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10b      	bne.n	8007df2 <tcp_parseopt+0x26>
 8007dda:	4b33      	ldr	r3, [pc, #204]	; (8007ea8 <tcp_parseopt+0xdc>)
 8007ddc:	f240 728d 	movw	r2, #1933	; 0x78d
 8007de0:	4932      	ldr	r1, [pc, #200]	; (8007eac <tcp_parseopt+0xe0>)
 8007de2:	4833      	ldr	r0, [pc, #204]	; (8007eb0 <tcp_parseopt+0xe4>)
 8007de4:	f00a fa88 	bl	80122f8 <iprintf>
 8007de8:	2000      	movs	r0, #0
 8007dea:	f00a fb87 	bl	80124fc <fflush>
 8007dee:	f00a facc 	bl	801238a <abort>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8007df2:	4b30      	ldr	r3, [pc, #192]	; (8007eb4 <tcp_parseopt+0xe8>)
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d053      	beq.n	8007ea2 <tcp_parseopt+0xd6>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007dfa:	4b2f      	ldr	r3, [pc, #188]	; (8007eb8 <tcp_parseopt+0xec>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	801a      	strh	r2, [r3, #0]
 8007e00:	e043      	b.n	8007e8a <tcp_parseopt+0xbe>
      u8_t opt = tcp_get_next_optbyte();
 8007e02:	f7ff ffad 	bl	8007d60 <tcp_get_next_optbyte>
 8007e06:	4603      	mov	r3, r0
 8007e08:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d03c      	beq.n	8007e8a <tcp_parseopt+0xbe>
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d002      	beq.n	8007e1a <tcp_parseopt+0x4e>
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d03f      	beq.n	8007e98 <tcp_parseopt+0xcc>
 8007e18:	e026      	b.n	8007e68 <tcp_parseopt+0x9c>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8007e1a:	f7ff ffa1 	bl	8007d60 <tcp_get_next_optbyte>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	d13b      	bne.n	8007e9c <tcp_parseopt+0xd0>
 8007e24:	4b24      	ldr	r3, [pc, #144]	; (8007eb8 <tcp_parseopt+0xec>)
 8007e26:	881b      	ldrh	r3, [r3, #0]
 8007e28:	3302      	adds	r3, #2
 8007e2a:	4a22      	ldr	r2, [pc, #136]	; (8007eb4 <tcp_parseopt+0xe8>)
 8007e2c:	8812      	ldrh	r2, [r2, #0]
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	dc34      	bgt.n	8007e9c <tcp_parseopt+0xd0>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8007e32:	f7ff ff95 	bl	8007d60 <tcp_get_next_optbyte>
 8007e36:	4603      	mov	r3, r0
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	021b      	lsls	r3, r3, #8
 8007e3c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8007e3e:	f7ff ff8f 	bl	8007d60 <tcp_get_next_optbyte>
 8007e42:	4603      	mov	r3, r0
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	89bb      	ldrh	r3, [r7, #12]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8007e4c:	89bb      	ldrh	r3, [r7, #12]
 8007e4e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007e52:	d804      	bhi.n	8007e5e <tcp_parseopt+0x92>
 8007e54:	89bb      	ldrh	r3, [r7, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <tcp_parseopt+0x92>
 8007e5a:	89ba      	ldrh	r2, [r7, #12]
 8007e5c:	e001      	b.n	8007e62 <tcp_parseopt+0x96>
 8007e5e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8007e66:	e010      	b.n	8007e8a <tcp_parseopt+0xbe>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8007e68:	f7ff ff7a 	bl	8007d60 <tcp_get_next_optbyte>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8007e70:	7afb      	ldrb	r3, [r7, #11]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d914      	bls.n	8007ea0 <tcp_parseopt+0xd4>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8007e76:	7afb      	ldrb	r3, [r7, #11]
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	4b0f      	ldr	r3, [pc, #60]	; (8007eb8 <tcp_parseopt+0xec>)
 8007e7c:	881b      	ldrh	r3, [r3, #0]
 8007e7e:	4413      	add	r3, r2
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	3b02      	subs	r3, #2
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	4b0c      	ldr	r3, [pc, #48]	; (8007eb8 <tcp_parseopt+0xec>)
 8007e88:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007e8a:	4b0b      	ldr	r3, [pc, #44]	; (8007eb8 <tcp_parseopt+0xec>)
 8007e8c:	881a      	ldrh	r2, [r3, #0]
 8007e8e:	4b09      	ldr	r3, [pc, #36]	; (8007eb4 <tcp_parseopt+0xe8>)
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d3b5      	bcc.n	8007e02 <tcp_parseopt+0x36>
 8007e96:	e004      	b.n	8007ea2 <tcp_parseopt+0xd6>
          return;
 8007e98:	bf00      	nop
 8007e9a:	e002      	b.n	8007ea2 <tcp_parseopt+0xd6>
            return;
 8007e9c:	bf00      	nop
 8007e9e:	e000      	b.n	8007ea2 <tcp_parseopt+0xd6>
            return;
 8007ea0:	bf00      	nop
      }
    }
  }
}
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	08014820 	.word	0x08014820
 8007eac:	08014c70 	.word	0x08014c70
 8007eb0:	0801485c 	.word	0x0801485c
 8007eb4:	2000074c 	.word	0x2000074c
 8007eb8:	20000754 	.word	0x20000754

08007ebc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8007ec0:	4b05      	ldr	r3, [pc, #20]	; (8007ed8 <tcp_trigger_input_pcb_close+0x1c>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	f043 0310 	orr.w	r3, r3, #16
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	4b03      	ldr	r3, [pc, #12]	; (8007ed8 <tcp_trigger_input_pcb_close+0x1c>)
 8007ecc:	701a      	strb	r2, [r3, #0]
}
 8007ece:	bf00      	nop
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	20000765 	.word	0x20000765

08007edc <tcp_route>:
                                              struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00a      	beq.n	8007f04 <tcp_route+0x28>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	7a1b      	ldrb	r3, [r3, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d006      	beq.n	8007f04 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	7a1b      	ldrb	r3, [r3, #8]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fb f96a 	bl	80031d4 <netif_get_by_index>
 8007f00:	4603      	mov	r3, r0
 8007f02:	e003      	b.n	8007f0c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7f9 fe9b 	bl	8001c40 <ip4_route>
 8007f0a:	4603      	mov	r3, r0
  }
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8007f14:	b590      	push	{r4, r7, lr}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	603b      	str	r3, [r7, #0]
 8007f20:	4613      	mov	r3, r2
 8007f22:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10a      	bne.n	8007f40 <tcp_create_segment+0x2c>
 8007f2a:	4b4e      	ldr	r3, [pc, #312]	; (8008064 <tcp_create_segment+0x150>)
 8007f2c:	22a6      	movs	r2, #166	; 0xa6
 8007f2e:	494e      	ldr	r1, [pc, #312]	; (8008068 <tcp_create_segment+0x154>)
 8007f30:	484e      	ldr	r0, [pc, #312]	; (800806c <tcp_create_segment+0x158>)
 8007f32:	f00a f9e1 	bl	80122f8 <iprintf>
 8007f36:	2000      	movs	r0, #0
 8007f38:	f00a fae0 	bl	80124fc <fflush>
 8007f3c:	f00a fa25 	bl	801238a <abort>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10a      	bne.n	8007f5c <tcp_create_segment+0x48>
 8007f46:	4b47      	ldr	r3, [pc, #284]	; (8008064 <tcp_create_segment+0x150>)
 8007f48:	22a7      	movs	r2, #167	; 0xa7
 8007f4a:	4949      	ldr	r1, [pc, #292]	; (8008070 <tcp_create_segment+0x15c>)
 8007f4c:	4847      	ldr	r0, [pc, #284]	; (800806c <tcp_create_segment+0x158>)
 8007f4e:	f00a f9d3 	bl	80122f8 <iprintf>
 8007f52:	2000      	movs	r0, #0
 8007f54:	f00a fad2 	bl	80124fc <fflush>
 8007f58:	f00a fa17 	bl	801238a <abort>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8007f5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <tcp_create_segment+0x58>
 8007f68:	2304      	movs	r3, #4
 8007f6a:	e000      	b.n	8007f6e <tcp_create_segment+0x5a>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8007f70:	2002      	movs	r0, #2
 8007f72:	f7fa fe03 	bl	8002b7c <memp_malloc>
 8007f76:	6138      	str	r0, [r7, #16]
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d104      	bne.n	8007f88 <tcp_create_segment+0x74>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8007f7e:	68b8      	ldr	r0, [r7, #8]
 8007f80:	f7fb fc70 	bl	8003864 <pbuf_free>
    return NULL;
 8007f84:	2300      	movs	r3, #0
 8007f86:	e069      	b.n	800805c <tcp_create_segment+0x148>
  }
  seg->flags = optflags;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8007f8e:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	891a      	ldrh	r2, [r3, #8]
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d20a      	bcs.n	8007fbe <tcp_create_segment+0xaa>
 8007fa8:	4b2e      	ldr	r3, [pc, #184]	; (8008064 <tcp_create_segment+0x150>)
 8007faa:	22b3      	movs	r2, #179	; 0xb3
 8007fac:	4931      	ldr	r1, [pc, #196]	; (8008074 <tcp_create_segment+0x160>)
 8007fae:	482f      	ldr	r0, [pc, #188]	; (800806c <tcp_create_segment+0x158>)
 8007fb0:	f00a f9a2 	bl	80122f8 <iprintf>
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	f00a faa1 	bl	80124fc <fflush>
 8007fba:	f00a f9e6 	bl	801238a <abort>
  seg->len = p->tot_len - optlen;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	891a      	ldrh	r2, [r3, #8]
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8007fd4:	2114      	movs	r1, #20
 8007fd6:	68b8      	ldr	r0, [r7, #8]
 8007fd8:	f7fb fbaa 	bl	8003730 <pbuf_add_header>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d004      	beq.n	8007fec <tcp_create_segment+0xd8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8007fe2:	6938      	ldr	r0, [r7, #16]
 8007fe4:	f7fc ffc4 	bl	8004f70 <tcp_seg_free>
    return NULL;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	e037      	b.n	800805c <tcp_create_segment+0x148>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	685a      	ldr	r2, [r3, #4]
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	691c      	ldr	r4, [r3, #16]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	8adb      	ldrh	r3, [r3, #22]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7f9 fa96 	bl	8001530 <lwip_htons>
 8008004:	4603      	mov	r3, r0
 8008006:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	691c      	ldr	r4, [r3, #16]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	8b1b      	ldrh	r3, [r3, #24]
 8008010:	4618      	mov	r0, r3
 8008012:	f7f9 fa8d 	bl	8001530 <lwip_htons>
 8008016:	4603      	mov	r3, r0
 8008018:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	691c      	ldr	r4, [r3, #16]
 800801e:	6838      	ldr	r0, [r7, #0]
 8008020:	f7f9 fa9b 	bl	800155a <lwip_htonl>
 8008024:	4603      	mov	r3, r0
 8008026:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	691c      	ldr	r4, [r3, #16]
 800802c:	7dfb      	ldrb	r3, [r7, #23]
 800802e:	089b      	lsrs	r3, r3, #2
 8008030:	b2db      	uxtb	r3, r3
 8008032:	b29b      	uxth	r3, r3
 8008034:	3305      	adds	r3, #5
 8008036:	b29b      	uxth	r3, r3
 8008038:	031b      	lsls	r3, r3, #12
 800803a:	b29a      	uxth	r2, r3
 800803c:	79fb      	ldrb	r3, [r7, #7]
 800803e:	b29b      	uxth	r3, r3
 8008040:	4313      	orrs	r3, r2
 8008042:	b29b      	uxth	r3, r3
 8008044:	4618      	mov	r0, r3
 8008046:	f7f9 fa73 	bl	8001530 <lwip_htons>
 800804a:	4603      	mov	r3, r0
 800804c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	2200      	movs	r2, #0
 8008054:	749a      	strb	r2, [r3, #18]
 8008056:	2200      	movs	r2, #0
 8008058:	74da      	strb	r2, [r3, #19]
  return seg;
 800805a:	693b      	ldr	r3, [r7, #16]
}
 800805c:	4618      	mov	r0, r3
 800805e:	371c      	adds	r7, #28
 8008060:	46bd      	mov	sp, r7
 8008062:	bd90      	pop	{r4, r7, pc}
 8008064:	08014c8c 	.word	0x08014c8c
 8008068:	08014cb0 	.word	0x08014cb0
 800806c:	08014cd0 	.word	0x08014cd0
 8008070:	08014cf8 	.word	0x08014cf8
 8008074:	08014d1c 	.word	0x08014d1c

08008078 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8008078:	b5b0      	push	{r4, r5, r7, lr}
 800807a:	b08a      	sub	sp, #40	; 0x28
 800807c:	af02      	add	r7, sp, #8
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	460b      	mov	r3, r1
 8008082:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8008084:	2300      	movs	r3, #0
 8008086:	61fb      	str	r3, [r7, #28]
 8008088:	2300      	movs	r3, #0
 800808a:	613b      	str	r3, [r7, #16]
  struct pbuf *p = NULL;
 800808c:	2300      	movs	r3, #0
 800808e:	61bb      	str	r3, [r7, #24]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10b      	bne.n	80080ae <tcp_split_unsent_seg+0x36>
 8008096:	4ba3      	ldr	r3, [pc, #652]	; (8008324 <tcp_split_unsent_seg+0x2ac>)
 8008098:	f240 324e 	movw	r2, #846	; 0x34e
 800809c:	49a2      	ldr	r1, [pc, #648]	; (8008328 <tcp_split_unsent_seg+0x2b0>)
 800809e:	48a3      	ldr	r0, [pc, #652]	; (800832c <tcp_split_unsent_seg+0x2b4>)
 80080a0:	f00a f92a 	bl	80122f8 <iprintf>
 80080a4:	2000      	movs	r0, #0
 80080a6:	f00a fa29 	bl	80124fc <fflush>
 80080aa:	f00a f96e 	bl	801238a <abort>

  useg = pcb->unsent;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b2:	613b      	str	r3, [r7, #16]
  if (useg == NULL) {
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d102      	bne.n	80080c0 <tcp_split_unsent_seg+0x48>
    return ERR_MEM;
 80080ba:	f04f 33ff 	mov.w	r3, #4294967295
 80080be:	e12d      	b.n	800831c <tcp_split_unsent_seg+0x2a4>
  }

  if (split == 0) {
 80080c0:	887b      	ldrh	r3, [r7, #2]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10b      	bne.n	80080de <tcp_split_unsent_seg+0x66>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80080c6:	4b97      	ldr	r3, [pc, #604]	; (8008324 <tcp_split_unsent_seg+0x2ac>)
 80080c8:	f240 3256 	movw	r2, #854	; 0x356
 80080cc:	4998      	ldr	r1, [pc, #608]	; (8008330 <tcp_split_unsent_seg+0x2b8>)
 80080ce:	4897      	ldr	r0, [pc, #604]	; (800832c <tcp_split_unsent_seg+0x2b4>)
 80080d0:	f00a f912 	bl	80122f8 <iprintf>
 80080d4:	2000      	movs	r0, #0
 80080d6:	f00a fa11 	bl	80124fc <fflush>
 80080da:	f00a f956 	bl	801238a <abort>
    return ERR_VAL;
  }

  if (useg->len <= split) {
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	891b      	ldrh	r3, [r3, #8]
 80080e2:	887a      	ldrh	r2, [r7, #2]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d301      	bcc.n	80080ec <tcp_split_unsent_seg+0x74>
    return ERR_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	e117      	b.n	800831c <tcp_split_unsent_seg+0x2a4>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080f0:	887a      	ldrh	r2, [r7, #2]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d90b      	bls.n	800810e <tcp_split_unsent_seg+0x96>
 80080f6:	4b8b      	ldr	r3, [pc, #556]	; (8008324 <tcp_split_unsent_seg+0x2ac>)
 80080f8:	f240 325e 	movw	r2, #862	; 0x35e
 80080fc:	498d      	ldr	r1, [pc, #564]	; (8008334 <tcp_split_unsent_seg+0x2bc>)
 80080fe:	488b      	ldr	r0, [pc, #556]	; (800832c <tcp_split_unsent_seg+0x2b4>)
 8008100:	f00a f8fa 	bl	80122f8 <iprintf>
 8008104:	2000      	movs	r0, #0
 8008106:	f00a f9f9 	bl	80124fc <fflush>
 800810a:	f00a f93e 	bl	801238a <abort>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	891b      	ldrh	r3, [r3, #8]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10b      	bne.n	800812e <tcp_split_unsent_seg+0xb6>
 8008116:	4b83      	ldr	r3, [pc, #524]	; (8008324 <tcp_split_unsent_seg+0x2ac>)
 8008118:	f240 325f 	movw	r2, #863	; 0x35f
 800811c:	4986      	ldr	r1, [pc, #536]	; (8008338 <tcp_split_unsent_seg+0x2c0>)
 800811e:	4883      	ldr	r0, [pc, #524]	; (800832c <tcp_split_unsent_seg+0x2b4>)
 8008120:	f00a f8ea 	bl	80122f8 <iprintf>
 8008124:	2000      	movs	r0, #0
 8008126:	f00a f9e9 	bl	80124fc <fflush>
 800812a:	f00a f92e 	bl	801238a <abort>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	7b1b      	ldrb	r3, [r3, #12]
 8008132:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008134:	7bfb      	ldrb	r3, [r7, #15]
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <tcp_split_unsent_seg+0xca>
 800813e:	2304      	movs	r3, #4
 8008140:	e000      	b.n	8008144 <tcp_split_unsent_seg+0xcc>
 8008142:	2300      	movs	r3, #0
 8008144:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	891a      	ldrh	r2, [r3, #8]
 800814a:	887b      	ldrh	r3, [r7, #2]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	b29a      	uxth	r2, r3
 8008154:	89bb      	ldrh	r3, [r7, #12]
 8008156:	4413      	add	r3, r2
 8008158:	b29b      	uxth	r3, r3
 800815a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800815e:	4619      	mov	r1, r3
 8008160:	2036      	movs	r0, #54	; 0x36
 8008162:	f7fb f8e1 	bl	8003328 <pbuf_alloc>
 8008166:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	2b00      	cmp	r3, #0
 800816c:	f000 80bc 	beq.w	80082e8 <tcp_split_unsent_seg+0x270>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	891a      	ldrh	r2, [r3, #8]
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	891b      	ldrh	r3, [r3, #8]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	b29a      	uxth	r2, r3
 800817e:	887b      	ldrh	r3, [r7, #2]
 8008180:	4413      	add	r3, r2
 8008182:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	6858      	ldr	r0, [r3, #4]
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	7bbb      	ldrb	r3, [r7, #14]
 800818e:	18d1      	adds	r1, r2, r3
 8008190:	897b      	ldrh	r3, [r7, #10]
 8008192:	89ba      	ldrh	r2, [r7, #12]
 8008194:	f7fb fdd6 	bl	8003d44 <pbuf_copy_partial>
 8008198:	4603      	mov	r3, r0
 800819a:	461a      	mov	r2, r3
 800819c:	89bb      	ldrh	r3, [r7, #12]
 800819e:	4293      	cmp	r3, r2
 80081a0:	f040 80a4 	bne.w	80082ec <tcp_split_unsent_seg+0x274>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	899b      	ldrh	r3, [r3, #12]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7f9 f9bf 	bl	8001530 <lwip_htons>
 80081b2:	4603      	mov	r3, r0
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081ba:	75fb      	strb	r3, [r7, #23]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80081bc:	2300      	movs	r3, #0
 80081be:	75bb      	strb	r3, [r7, #22]

  if (split_flags & TCP_PSH) {
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
 80081c2:	f003 0308 	and.w	r3, r3, #8
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d007      	beq.n	80081da <tcp_split_unsent_seg+0x162>
    split_flags &= ~TCP_PSH;
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
 80081cc:	f023 0308 	bic.w	r3, r3, #8
 80081d0:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_PSH;
 80081d2:	7dbb      	ldrb	r3, [r7, #22]
 80081d4:	f043 0308 	orr.w	r3, r3, #8
 80081d8:	75bb      	strb	r3, [r7, #22]
  }
  if (split_flags & TCP_FIN) {
 80081da:	7dfb      	ldrb	r3, [r7, #23]
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d007      	beq.n	80081f4 <tcp_split_unsent_seg+0x17c>
    split_flags &= ~TCP_FIN;
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	f023 0301 	bic.w	r3, r3, #1
 80081ea:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_FIN;
 80081ec:	7dbb      	ldrb	r3, [r7, #22]
 80081ee:	f043 0301 	orr.w	r3, r3, #1
 80081f2:	75bb      	strb	r3, [r7, #22]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7f9 f9ad 	bl	800155a <lwip_htonl>
 8008200:	4602      	mov	r2, r0
 8008202:	887b      	ldrh	r3, [r7, #2]
 8008204:	18d1      	adds	r1, r2, r3
 8008206:	7dba      	ldrb	r2, [r7, #22]
 8008208:	7bfb      	ldrb	r3, [r7, #15]
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	460b      	mov	r3, r1
 800820e:	69b9      	ldr	r1, [r7, #24]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff fe7f 	bl	8007f14 <tcp_create_segment>
 8008216:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d102      	bne.n	8008224 <tcp_split_unsent_seg+0x1ac>
    p = NULL; /* Freed by tcp_create_segment */
 800821e:	2300      	movs	r3, #0
 8008220:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
 8008222:	e064      	b.n	80082ee <tcp_split_unsent_seg+0x276>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	4618      	mov	r0, r3
 800822a:	f7fb fb9d 	bl	8003968 <pbuf_clen>
 800822e:	4603      	mov	r3, r0
 8008230:	461a      	mov	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008238:	1a9b      	subs	r3, r3, r2
 800823a:	b29a      	uxth	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	6858      	ldr	r0, [r3, #4]
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	891a      	ldrh	r2, [r3, #8]
 800824c:	89bb      	ldrh	r3, [r7, #12]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	b29b      	uxth	r3, r3
 8008252:	4619      	mov	r1, r3
 8008254:	f7fb f95a 	bl	800350c <pbuf_realloc>
  useg->len -= remainder;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	891a      	ldrh	r2, [r3, #8]
 800825c:	89bb      	ldrh	r3, [r7, #12]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	b29a      	uxth	r2, r3
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	691c      	ldr	r4, [r3, #16]
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	899b      	ldrh	r3, [r3, #12]
 8008270:	b29d      	uxth	r5, r3
 8008272:	7dfb      	ldrb	r3, [r7, #23]
 8008274:	b29b      	uxth	r3, r3
 8008276:	4618      	mov	r0, r3
 8008278:	f7f9 f95a 	bl	8001530 <lwip_htons>
 800827c:	4603      	mov	r3, r0
 800827e:	432b      	orrs	r3, r5
 8008280:	b29b      	uxth	r3, r3
 8008282:	81a3      	strh	r3, [r4, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	2200      	movs	r2, #0
 8008288:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	4618      	mov	r0, r3
 8008290:	f7fb fb6a 	bl	8003968 <pbuf_clen>
 8008294:	4603      	mov	r3, r0
 8008296:	461a      	mov	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800829e:	4413      	add	r3, r2
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fb fb5b 	bl	8003968 <pbuf_clen>
 80082b2:	4603      	mov	r3, r0
 80082b4:	461a      	mov	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80082bc:	4413      	add	r3, r2
 80082be:	b29a      	uxth	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	69fa      	ldr	r2, [r7, #28]
 80082d2:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d103      	bne.n	80082e4 <tcp_split_unsent_seg+0x26c>
    pcb->unsent_oversize = 0;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	e019      	b.n	800831c <tcp_split_unsent_seg+0x2a4>
    goto memerr;
 80082e8:	bf00      	nop
 80082ea:	e000      	b.n	80082ee <tcp_split_unsent_seg+0x276>
    goto memerr;
 80082ec:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00b      	beq.n	800830c <tcp_split_unsent_seg+0x294>
 80082f4:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <tcp_split_unsent_seg+0x2ac>)
 80082f6:	f44f 7277 	mov.w	r2, #988	; 0x3dc
 80082fa:	4910      	ldr	r1, [pc, #64]	; (800833c <tcp_split_unsent_seg+0x2c4>)
 80082fc:	480b      	ldr	r0, [pc, #44]	; (800832c <tcp_split_unsent_seg+0x2b4>)
 80082fe:	f009 fffb 	bl	80122f8 <iprintf>
 8008302:	2000      	movs	r0, #0
 8008304:	f00a f8fa 	bl	80124fc <fflush>
 8008308:	f00a f83f 	bl	801238a <abort>
  if (p != NULL) {
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d002      	beq.n	8008318 <tcp_split_unsent_seg+0x2a0>
    pbuf_free(p);
 8008312:	69b8      	ldr	r0, [r7, #24]
 8008314:	f7fb faa6 	bl	8003864 <pbuf_free>
  }

  return ERR_MEM;
 8008318:	f04f 33ff 	mov.w	r3, #4294967295
}
 800831c:	4618      	mov	r0, r3
 800831e:	3720      	adds	r7, #32
 8008320:	46bd      	mov	sp, r7
 8008322:	bdb0      	pop	{r4, r5, r7, pc}
 8008324:	08014c8c 	.word	0x08014c8c
 8008328:	0801506c 	.word	0x0801506c
 800832c:	08014cd0 	.word	0x08014cd0
 8008330:	08015090 	.word	0x08015090
 8008334:	080150b4 	.word	0x080150b4
 8008338:	080150c4 	.word	0x080150c4
 800833c:	080150d4 	.word	0x080150d4

08008340 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8008340:	b5b0      	push	{r4, r5, r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10b      	bne.n	8008366 <tcp_send_fin+0x26>
 800834e:	4b23      	ldr	r3, [pc, #140]	; (80083dc <tcp_send_fin+0x9c>)
 8008350:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008354:	4922      	ldr	r1, [pc, #136]	; (80083e0 <tcp_send_fin+0xa0>)
 8008356:	4823      	ldr	r0, [pc, #140]	; (80083e4 <tcp_send_fin+0xa4>)
 8008358:	f009 ffce 	bl	80122f8 <iprintf>
 800835c:	2000      	movs	r0, #0
 800835e:	f00a f8cd 	bl	80124fc <fflush>
 8008362:	f00a f812 	bl	801238a <abort>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800836a:	2b00      	cmp	r3, #0
 800836c:	d02d      	beq.n	80083ca <tcp_send_fin+0x8a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008372:	60fb      	str	r3, [r7, #12]
 8008374:	e002      	b.n	800837c <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1f8      	bne.n	8008376 <tcp_send_fin+0x36>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	899b      	ldrh	r3, [r3, #12]
 800838a:	b29b      	uxth	r3, r3
 800838c:	4618      	mov	r0, r3
 800838e:	f7f9 f8cf 	bl	8001530 <lwip_htons>
 8008392:	4603      	mov	r3, r0
 8008394:	b2db      	uxtb	r3, r3
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	2b00      	cmp	r3, #0
 800839c:	d115      	bne.n	80083ca <tcp_send_fin+0x8a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	691c      	ldr	r4, [r3, #16]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	899b      	ldrh	r3, [r3, #12]
 80083a8:	b29d      	uxth	r5, r3
 80083aa:	2001      	movs	r0, #1
 80083ac:	f7f9 f8c0 	bl	8001530 <lwip_htons>
 80083b0:	4603      	mov	r3, r0
 80083b2:	432b      	orrs	r3, r5
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	81a3      	strh	r3, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	8b5b      	ldrh	r3, [r3, #26]
 80083bc:	f043 0320 	orr.w	r3, r3, #32
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	e004      	b.n	80083d4 <tcp_send_fin+0x94>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80083ca:	2101      	movs	r1, #1
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f80b 	bl	80083e8 <tcp_enqueue_flags>
 80083d2:	4603      	mov	r3, r0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bdb0      	pop	{r4, r5, r7, pc}
 80083dc:	08014c8c 	.word	0x08014c8c
 80083e0:	080150e0 	.word	0x080150e0
 80083e4:	08014cd0 	.word	0x08014cd0

080083e8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08a      	sub	sp, #40	; 0x28
 80083ec:	af02      	add	r7, sp, #8
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	460b      	mov	r3, r1
 80083f2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80083fc:	78fb      	ldrb	r3, [r7, #3]
 80083fe:	f003 0303 	and.w	r3, r3, #3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10b      	bne.n	800841e <tcp_enqueue_flags+0x36>
 8008406:	4b6e      	ldr	r3, [pc, #440]	; (80085c0 <tcp_enqueue_flags+0x1d8>)
 8008408:	f240 4214 	movw	r2, #1044	; 0x414
 800840c:	496d      	ldr	r1, [pc, #436]	; (80085c4 <tcp_enqueue_flags+0x1dc>)
 800840e:	486e      	ldr	r0, [pc, #440]	; (80085c8 <tcp_enqueue_flags+0x1e0>)
 8008410:	f009 ff72 	bl	80122f8 <iprintf>
 8008414:	2000      	movs	r0, #0
 8008416:	f00a f871 	bl	80124fc <fflush>
 800841a:	f009 ffb6 	bl	801238a <abort>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10b      	bne.n	800843c <tcp_enqueue_flags+0x54>
 8008424:	4b66      	ldr	r3, [pc, #408]	; (80085c0 <tcp_enqueue_flags+0x1d8>)
 8008426:	f240 4215 	movw	r2, #1045	; 0x415
 800842a:	4968      	ldr	r1, [pc, #416]	; (80085cc <tcp_enqueue_flags+0x1e4>)
 800842c:	4866      	ldr	r0, [pc, #408]	; (80085c8 <tcp_enqueue_flags+0x1e0>)
 800842e:	f009 ff63 	bl	80122f8 <iprintf>
 8008432:	2000      	movs	r0, #0
 8008434:	f00a f862 	bl	80124fc <fflush>
 8008438:	f009 ffa7 	bl	801238a <abort>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800843c:	78fb      	ldrb	r3, [r7, #3]
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b00      	cmp	r3, #0
 8008444:	d001      	beq.n	800844a <tcp_enqueue_flags+0x62>
    optflags = TF_SEG_OPTS_MSS;
 8008446:	2301      	movs	r3, #1
 8008448:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800844a:	7ffb      	ldrb	r3, [r7, #31]
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b00      	cmp	r3, #0
 8008452:	d001      	beq.n	8008458 <tcp_enqueue_flags+0x70>
 8008454:	2304      	movs	r3, #4
 8008456:	e000      	b.n	800845a <tcp_enqueue_flags+0x72>
 8008458:	2300      	movs	r3, #0
 800845a:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800845c:	7dfb      	ldrb	r3, [r7, #23]
 800845e:	b29b      	uxth	r3, r3
 8008460:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008464:	4619      	mov	r1, r3
 8008466:	2036      	movs	r0, #54	; 0x36
 8008468:	f7fa ff5e 	bl	8003328 <pbuf_alloc>
 800846c:	6138      	str	r0, [r7, #16]
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d109      	bne.n	8008488 <tcp_enqueue_flags+0xa0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	8b5b      	ldrh	r3, [r3, #26]
 8008478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800847c:	b29a      	uxth	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008482:	f04f 33ff 	mov.w	r3, #4294967295
 8008486:	e097      	b.n	80085b8 <tcp_enqueue_flags+0x1d0>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	895a      	ldrh	r2, [r3, #10]
 800848c:	7dfb      	ldrb	r3, [r7, #23]
 800848e:	b29b      	uxth	r3, r3
 8008490:	429a      	cmp	r2, r3
 8008492:	d20b      	bcs.n	80084ac <tcp_enqueue_flags+0xc4>
 8008494:	4b4a      	ldr	r3, [pc, #296]	; (80085c0 <tcp_enqueue_flags+0x1d8>)
 8008496:	f240 423e 	movw	r2, #1086	; 0x43e
 800849a:	494d      	ldr	r1, [pc, #308]	; (80085d0 <tcp_enqueue_flags+0x1e8>)
 800849c:	484a      	ldr	r0, [pc, #296]	; (80085c8 <tcp_enqueue_flags+0x1e0>)
 800849e:	f009 ff2b 	bl	80122f8 <iprintf>
 80084a2:	2000      	movs	r0, #0
 80084a4:	f00a f82a 	bl	80124fc <fflush>
 80084a8:	f009 ff6f 	bl	801238a <abort>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80084b0:	78fa      	ldrb	r2, [r7, #3]
 80084b2:	7ffb      	ldrb	r3, [r7, #31]
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	460b      	mov	r3, r1
 80084b8:	6939      	ldr	r1, [r7, #16]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7ff fd2a 	bl	8007f14 <tcp_create_segment>
 80084c0:	60f8      	str	r0, [r7, #12]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d109      	bne.n	80084dc <tcp_enqueue_flags+0xf4>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	8b5b      	ldrh	r3, [r3, #26]
 80084cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80084d6:	f04f 33ff 	mov.w	r3, #4294967295
 80084da:	e06d      	b.n	80085b8 <tcp_enqueue_flags+0x1d0>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	891b      	ldrh	r3, [r3, #8]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00b      	beq.n	80084fc <tcp_enqueue_flags+0x114>
 80084e4:	4b36      	ldr	r3, [pc, #216]	; (80085c0 <tcp_enqueue_flags+0x1d8>)
 80084e6:	f240 4247 	movw	r2, #1095	; 0x447
 80084ea:	493a      	ldr	r1, [pc, #232]	; (80085d4 <tcp_enqueue_flags+0x1ec>)
 80084ec:	4836      	ldr	r0, [pc, #216]	; (80085c8 <tcp_enqueue_flags+0x1e0>)
 80084ee:	f009 ff03 	bl	80122f8 <iprintf>
 80084f2:	2000      	movs	r0, #0
 80084f4:	f00a f802 	bl	80124fc <fflush>
 80084f8:	f009 ff47 	bl	801238a <abort>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008500:	2b00      	cmp	r3, #0
 8008502:	d103      	bne.n	800850c <tcp_enqueue_flags+0x124>
    pcb->unsent = seg;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	66da      	str	r2, [r3, #108]	; 0x6c
 800850a:	e00d      	b.n	8008528 <tcp_enqueue_flags+0x140>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008510:	61bb      	str	r3, [r7, #24]
 8008512:	e002      	b.n	800851a <tcp_enqueue_flags+0x132>
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	61bb      	str	r3, [r7, #24]
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1f8      	bne.n	8008514 <tcp_enqueue_flags+0x12c>
    useg->next = seg;
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8008530:	78fb      	ldrb	r3, [r7, #3]
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b00      	cmp	r3, #0
 8008538:	d104      	bne.n	8008544 <tcp_enqueue_flags+0x15c>
 800853a:	78fb      	ldrb	r3, [r7, #3]
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b00      	cmp	r3, #0
 8008542:	d004      	beq.n	800854e <tcp_enqueue_flags+0x166>
    pcb->snd_lbb++;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800854e:	78fb      	ldrb	r3, [r7, #3]
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	2b00      	cmp	r3, #0
 8008556:	d006      	beq.n	8008566 <tcp_enqueue_flags+0x17e>
    tcp_set_flags(pcb, TF_FIN);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	8b5b      	ldrh	r3, [r3, #26]
 800855c:	f043 0320 	orr.w	r3, r3, #32
 8008560:	b29a      	uxth	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	4618      	mov	r0, r3
 800856c:	f7fb f9fc 	bl	8003968 <pbuf_clen>
 8008570:	4603      	mov	r3, r0
 8008572:	461a      	mov	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800857a:	4413      	add	r3, r2
 800857c:	b29a      	uxth	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800858a:	2b00      	cmp	r3, #0
 800858c:	d013      	beq.n	80085b6 <tcp_enqueue_flags+0x1ce>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10f      	bne.n	80085b6 <tcp_enqueue_flags+0x1ce>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10b      	bne.n	80085b6 <tcp_enqueue_flags+0x1ce>
 800859e:	4b08      	ldr	r3, [pc, #32]	; (80085c0 <tcp_enqueue_flags+0x1d8>)
 80085a0:	f240 426a 	movw	r2, #1130	; 0x46a
 80085a4:	490c      	ldr	r1, [pc, #48]	; (80085d8 <tcp_enqueue_flags+0x1f0>)
 80085a6:	4808      	ldr	r0, [pc, #32]	; (80085c8 <tcp_enqueue_flags+0x1e0>)
 80085a8:	f009 fea6 	bl	80122f8 <iprintf>
 80085ac:	2000      	movs	r0, #0
 80085ae:	f009 ffa5 	bl	80124fc <fflush>
 80085b2:	f009 feea 	bl	801238a <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3720      	adds	r7, #32
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	08014c8c 	.word	0x08014c8c
 80085c4:	080150fc 	.word	0x080150fc
 80085c8:	08014cd0 	.word	0x08014cd0
 80085cc:	08015154 	.word	0x08015154
 80085d0:	08015174 	.word	0x08015174
 80085d4:	080151b0 	.word	0x080151b0
 80085d8:	080151dc 	.word	0x080151dc

080085dc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80085dc:	b5b0      	push	{r4, r5, r7, lr}
 80085de:	b08a      	sub	sp, #40	; 0x28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10b      	bne.n	8008602 <tcp_output+0x26>
 80085ea:	4ba9      	ldr	r3, [pc, #676]	; (8008890 <tcp_output+0x2b4>)
 80085ec:	f240 42e5 	movw	r2, #1253	; 0x4e5
 80085f0:	49a8      	ldr	r1, [pc, #672]	; (8008894 <tcp_output+0x2b8>)
 80085f2:	48a9      	ldr	r0, [pc, #676]	; (8008898 <tcp_output+0x2bc>)
 80085f4:	f009 fe80 	bl	80122f8 <iprintf>
 80085f8:	2000      	movs	r0, #0
 80085fa:	f009 ff7f 	bl	80124fc <fflush>
 80085fe:	f009 fec4 	bl	801238a <abort>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	7d1b      	ldrb	r3, [r3, #20]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d10b      	bne.n	8008622 <tcp_output+0x46>
 800860a:	4ba1      	ldr	r3, [pc, #644]	; (8008890 <tcp_output+0x2b4>)
 800860c:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
 8008610:	49a2      	ldr	r1, [pc, #648]	; (800889c <tcp_output+0x2c0>)
 8008612:	48a1      	ldr	r0, [pc, #644]	; (8008898 <tcp_output+0x2bc>)
 8008614:	f009 fe70 	bl	80122f8 <iprintf>
 8008618:	2000      	movs	r0, #0
 800861a:	f009 ff6f 	bl	80124fc <fflush>
 800861e:	f009 feb4 	bl	801238a <abort>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8008622:	4b9f      	ldr	r3, [pc, #636]	; (80088a0 <tcp_output+0x2c4>)
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	429a      	cmp	r2, r3
 800862a:	d101      	bne.n	8008630 <tcp_output+0x54>
    return ERR_OK;
 800862c:	2300      	movs	r3, #0
 800862e:	e1d8      	b.n	80089e2 <tcp_output+0x406>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800863c:	429a      	cmp	r2, r3
 800863e:	d203      	bcs.n	8008648 <tcp_output+0x6c>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008646:	e002      	b.n	800864e <tcp_output+0x72>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800864e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008654:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10b      	bne.n	8008674 <tcp_output+0x98>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	8b5b      	ldrh	r3, [r3, #26]
 8008660:	f003 0302 	and.w	r3, r3, #2
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 81b1 	beq.w	80089cc <tcp_output+0x3f0>
      return tcp_send_empty_ack(pcb);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fed2 	bl	8009414 <tcp_send_empty_ack>
 8008670:	4603      	mov	r3, r0
 8008672:	e1b6      	b.n	80089e2 <tcp_output+0x406>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8008674:	6879      	ldr	r1, [r7, #4]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	3304      	adds	r3, #4
 800867a:	461a      	mov	r2, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f7ff fc2d 	bl	8007edc <tcp_route>
 8008682:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d102      	bne.n	8008690 <tcp_output+0xb4>
    return ERR_RTE;
 800868a:	f06f 0303 	mvn.w	r3, #3
 800868e:	e1a8      	b.n	80089e2 <tcp_output+0x406>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <tcp_output+0xc2>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d111      	bne.n	80086c2 <tcp_output+0xe6>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <tcp_output+0xce>
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	3304      	adds	r3, #4
 80086a8:	e000      	b.n	80086ac <tcp_output+0xd0>
 80086aa:	2300      	movs	r3, #0
 80086ac:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d102      	bne.n	80086ba <tcp_output+0xde>
      return ERR_RTE;
 80086b4:	f06f 0303 	mvn.w	r3, #3
 80086b8:	e193      	b.n	80089e2 <tcp_output+0x406>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7f8 ff46 	bl	800155a <lwip_htonl>
 80086ce:	4602      	mov	r2, r0
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d8:	8912      	ldrh	r2, [r2, #8]
 80086da:	441a      	add	r2, r3
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d927      	bls.n	8008732 <tcp_output+0x156>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086e8:	461a      	mov	r2, r3
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d114      	bne.n	800871a <tcp_output+0x13e>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d110      	bne.n	800871a <tcp_output+0x13e>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10b      	bne.n	800871a <tcp_output+0x13e>
      pcb->persist_cnt = 0;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	8b5b      	ldrh	r3, [r3, #26]
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	2b00      	cmp	r3, #0
 8008724:	f000 8154 	beq.w	80089d0 <tcp_output+0x3f4>
      return tcp_send_empty_ack(pcb);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fe73 	bl	8009414 <tcp_send_empty_ack>
 800872e:	4603      	mov	r3, r0
 8008730:	e157      	b.n	80089e2 <tcp_output+0x406>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800873e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 8123 	beq.w	800898e <tcp_output+0x3b2>
    for (; useg->next != NULL; useg = useg->next);
 8008748:	e002      	b.n	8008750 <tcp_output+0x174>
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	623b      	str	r3, [r7, #32]
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1f8      	bne.n	800874a <tcp_output+0x16e>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8008758:	e119      	b.n	800898e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	899b      	ldrh	r3, [r3, #12]
 8008760:	b29b      	uxth	r3, r3
 8008762:	4618      	mov	r0, r3
 8008764:	f7f8 fee4 	bl	8001530 <lwip_htons>
 8008768:	4603      	mov	r3, r0
 800876a:	b2db      	uxtb	r3, r3
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00b      	beq.n	800878c <tcp_output+0x1b0>
 8008774:	4b46      	ldr	r3, [pc, #280]	; (8008890 <tcp_output+0x2b4>)
 8008776:	f240 523b 	movw	r2, #1339	; 0x53b
 800877a:	494a      	ldr	r1, [pc, #296]	; (80088a4 <tcp_output+0x2c8>)
 800877c:	4846      	ldr	r0, [pc, #280]	; (8008898 <tcp_output+0x2bc>)
 800877e:	f009 fdbb 	bl	80122f8 <iprintf>
 8008782:	2000      	movs	r0, #0
 8008784:	f009 feba 	bl	80124fc <fflush>
 8008788:	f009 fdff 	bl	801238a <abort>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008790:	2b00      	cmp	r3, #0
 8008792:	d01f      	beq.n	80087d4 <tcp_output+0x1f8>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	8b5b      	ldrh	r3, [r3, #26]
 8008798:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800879c:	2b00      	cmp	r3, #0
 800879e:	d119      	bne.n	80087d4 <tcp_output+0x1f8>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00b      	beq.n	80087c0 <tcp_output+0x1e4>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d110      	bne.n	80087d4 <tcp_output+0x1f8>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b6:	891a      	ldrh	r2, [r3, #8]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087bc:	429a      	cmp	r2, r3
 80087be:	d209      	bcs.n	80087d4 <tcp_output+0x1f8>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d004      	beq.n	80087d4 <tcp_output+0x1f8>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d901      	bls.n	80087d8 <tcp_output+0x1fc>
 80087d4:	2301      	movs	r3, #1
 80087d6:	e000      	b.n	80087da <tcp_output+0x1fe>
 80087d8:	2300      	movs	r3, #0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d106      	bne.n	80087ec <tcp_output+0x210>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	8b5b      	ldrh	r3, [r3, #26]
 80087e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f000 80e6 	beq.w	80089b8 <tcp_output+0x3dc>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	7d1b      	ldrb	r3, [r3, #20]
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d00c      	beq.n	800880e <tcp_output+0x232>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	691c      	ldr	r4, [r3, #16]
 80087f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	899b      	ldrh	r3, [r3, #12]
 80087fe:	b29d      	uxth	r5, r3
 8008800:	2010      	movs	r0, #16
 8008802:	f7f8 fe95 	bl	8001530 <lwip_htons>
 8008806:	4603      	mov	r3, r0
 8008808:	432b      	orrs	r3, r5
 800880a:	b29b      	uxth	r3, r3
 800880c:	81a3      	strh	r3, [r4, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008814:	f000 f910 	bl	8008a38 <tcp_output_segment>
 8008818:	4603      	mov	r3, r0
 800881a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800881c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d009      	beq.n	8008838 <tcp_output+0x25c>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	8b5b      	ldrh	r3, [r3, #26]
 8008828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800882c:	b29a      	uxth	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	835a      	strh	r2, [r3, #26]
      return err;
 8008832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008836:	e0d4      	b.n	80089e2 <tcp_output+0x406>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	2200      	movs	r2, #0
 800883c:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	7d1b      	ldrb	r3, [r3, #20]
 800884a:	2b02      	cmp	r3, #2
 800884c:	d006      	beq.n	800885c <tcp_output+0x280>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	8b5b      	ldrh	r3, [r3, #26]
 8008852:	f023 0303 	bic.w	r3, r3, #3
 8008856:	b29a      	uxth	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	4618      	mov	r0, r3
 8008864:	f7f8 fe79 	bl	800155a <lwip_htonl>
 8008868:	4604      	mov	r4, r0
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	891b      	ldrh	r3, [r3, #8]
 800886e:	461d      	mov	r5, r3
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	899b      	ldrh	r3, [r3, #12]
 8008876:	b29b      	uxth	r3, r3
 8008878:	4618      	mov	r0, r3
 800887a:	f7f8 fe59 	bl	8001530 <lwip_htons>
 800887e:	4603      	mov	r3, r0
 8008880:	b2db      	uxtb	r3, r3
 8008882:	f003 0303 	and.w	r3, r3, #3
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00e      	beq.n	80088a8 <tcp_output+0x2cc>
 800888a:	2301      	movs	r3, #1
 800888c:	e00d      	b.n	80088aa <tcp_output+0x2ce>
 800888e:	bf00      	nop
 8008890:	08014c8c 	.word	0x08014c8c
 8008894:	08015204 	.word	0x08015204
 8008898:	08014cd0 	.word	0x08014cd0
 800889c:	0801521c 	.word	0x0801521c
 80088a0:	200018f8 	.word	0x200018f8
 80088a4:	08015244 	.word	0x08015244
 80088a8:	2300      	movs	r3, #0
 80088aa:	442b      	add	r3, r5
 80088ac:	4423      	add	r3, r4
 80088ae:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	da02      	bge.n	80088c2 <tcp_output+0x2e6>
      pcb->snd_nxt = snd_nxt;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	891b      	ldrh	r3, [r3, #8]
 80088c6:	461c      	mov	r4, r3
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	899b      	ldrh	r3, [r3, #12]
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7f8 fe2d 	bl	8001530 <lwip_htons>
 80088d6:	4603      	mov	r3, r0
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	f003 0303 	and.w	r3, r3, #3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d001      	beq.n	80088e6 <tcp_output+0x30a>
 80088e2:	2301      	movs	r3, #1
 80088e4:	e000      	b.n	80088e8 <tcp_output+0x30c>
 80088e6:	2300      	movs	r3, #0
 80088e8:	4423      	add	r3, r4
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d049      	beq.n	8008982 <tcp_output+0x3a6>
      seg->next = NULL;
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	2200      	movs	r2, #0
 80088f2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d105      	bne.n	8008908 <tcp_output+0x32c>
        pcb->unacked = seg;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008900:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	623b      	str	r3, [r7, #32]
 8008906:	e03f      	b.n	8008988 <tcp_output+0x3ac>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	4618      	mov	r0, r3
 8008910:	f7f8 fe23 	bl	800155a <lwip_htonl>
 8008914:	4604      	mov	r4, r0
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	4618      	mov	r0, r3
 800891e:	f7f8 fe1c 	bl	800155a <lwip_htonl>
 8008922:	4603      	mov	r3, r0
 8008924:	1ae3      	subs	r3, r4, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	da24      	bge.n	8008974 <tcp_output+0x398>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	3370      	adds	r3, #112	; 0x70
 800892e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8008930:	e002      	b.n	8008938 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d011      	beq.n	8008964 <tcp_output+0x388>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	4618      	mov	r0, r3
 800894a:	f7f8 fe06 	bl	800155a <lwip_htonl>
 800894e:	4604      	mov	r4, r0
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	4618      	mov	r0, r3
 8008958:	f7f8 fdff 	bl	800155a <lwip_htonl>
 800895c:	4603      	mov	r3, r0
 800895e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8008960:	2b00      	cmp	r3, #0
 8008962:	dbe6      	blt.n	8008932 <tcp_output+0x356>
          }
          seg->next = (*cur_seg);
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	e009      	b.n	8008988 <tcp_output+0x3ac>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008978:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800897a:	6a3b      	ldr	r3, [r7, #32]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	623b      	str	r3, [r7, #32]
 8008980:	e002      	b.n	8008988 <tcp_output+0x3ac>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8008982:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008984:	f7fc faf4 	bl	8004f70 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800898c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008990:	2b00      	cmp	r3, #0
 8008992:	d012      	beq.n	80089ba <tcp_output+0x3de>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	4618      	mov	r0, r3
 800899c:	f7f8 fddd 	bl	800155a <lwip_htonl>
 80089a0:	4602      	mov	r2, r0
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089aa:	8912      	ldrh	r2, [r2, #8]
 80089ac:	441a      	add	r2, r3
  while (seg != NULL &&
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	f67f aed2 	bls.w	800875a <tcp_output+0x17e>
 80089b6:	e000      	b.n	80089ba <tcp_output+0x3de>
      break;
 80089b8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d107      	bne.n	80089d2 <tcp_output+0x3f6>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80089ca:	e002      	b.n	80089d2 <tcp_output+0x3f6>
    goto output_done;
 80089cc:	bf00      	nop
 80089ce:	e000      	b.n	80089d2 <tcp_output+0x3f6>
    goto output_done;
 80089d0:	bf00      	nop
  }
#endif /* TCP_OVERSIZE */

output_done:
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	8b5b      	ldrh	r3, [r3, #26]
 80089d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089da:	b29a      	uxth	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3728      	adds	r7, #40	; 0x28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bdb0      	pop	{r4, r5, r7, pc}
 80089ea:	bf00      	nop

080089ec <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10b      	bne.n	8008a12 <tcp_output_segment_busy+0x26>
 80089fa:	4b0c      	ldr	r3, [pc, #48]	; (8008a2c <tcp_output_segment_busy+0x40>)
 80089fc:	f240 529e 	movw	r2, #1438	; 0x59e
 8008a00:	490b      	ldr	r1, [pc, #44]	; (8008a30 <tcp_output_segment_busy+0x44>)
 8008a02:	480c      	ldr	r0, [pc, #48]	; (8008a34 <tcp_output_segment_busy+0x48>)
 8008a04:	f009 fc78 	bl	80122f8 <iprintf>
 8008a08:	2000      	movs	r0, #0
 8008a0a:	f009 fd77 	bl	80124fc <fflush>
 8008a0e:	f009 fcbc 	bl	801238a <abort>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	7b9b      	ldrb	r3, [r3, #14]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d001      	beq.n	8008a20 <tcp_output_segment_busy+0x34>
    /* other reference found */
    return 1;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e000      	b.n	8008a22 <tcp_output_segment_busy+0x36>
  }
  /* no other references found */
  return 0;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	08014c8c 	.word	0x08014c8c
 8008a30:	0801525c 	.word	0x0801525c
 8008a34:	08014cd0 	.word	0x08014cd0

08008a38 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8008a38:	b5b0      	push	{r4, r5, r7, lr}
 8008a3a:	b08c      	sub	sp, #48	; 0x30
 8008a3c:	af04      	add	r7, sp, #16
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10b      	bne.n	8008a62 <tcp_output_segment+0x2a>
 8008a4a:	4b78      	ldr	r3, [pc, #480]	; (8008c2c <tcp_output_segment+0x1f4>)
 8008a4c:	f240 52bc 	movw	r2, #1468	; 0x5bc
 8008a50:	4977      	ldr	r1, [pc, #476]	; (8008c30 <tcp_output_segment+0x1f8>)
 8008a52:	4878      	ldr	r0, [pc, #480]	; (8008c34 <tcp_output_segment+0x1fc>)
 8008a54:	f009 fc50 	bl	80122f8 <iprintf>
 8008a58:	2000      	movs	r0, #0
 8008a5a:	f009 fd4f 	bl	80124fc <fflush>
 8008a5e:	f009 fc94 	bl	801238a <abort>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10b      	bne.n	8008a80 <tcp_output_segment+0x48>
 8008a68:	4b70      	ldr	r3, [pc, #448]	; (8008c2c <tcp_output_segment+0x1f4>)
 8008a6a:	f240 52bd 	movw	r2, #1469	; 0x5bd
 8008a6e:	4972      	ldr	r1, [pc, #456]	; (8008c38 <tcp_output_segment+0x200>)
 8008a70:	4870      	ldr	r0, [pc, #448]	; (8008c34 <tcp_output_segment+0x1fc>)
 8008a72:	f009 fc41 	bl	80122f8 <iprintf>
 8008a76:	2000      	movs	r0, #0
 8008a78:	f009 fd40 	bl	80124fc <fflush>
 8008a7c:	f009 fc85 	bl	801238a <abort>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10b      	bne.n	8008a9e <tcp_output_segment+0x66>
 8008a86:	4b69      	ldr	r3, [pc, #420]	; (8008c2c <tcp_output_segment+0x1f4>)
 8008a88:	f240 52be 	movw	r2, #1470	; 0x5be
 8008a8c:	496b      	ldr	r1, [pc, #428]	; (8008c3c <tcp_output_segment+0x204>)
 8008a8e:	4869      	ldr	r0, [pc, #420]	; (8008c34 <tcp_output_segment+0x1fc>)
 8008a90:	f009 fc32 	bl	80122f8 <iprintf>
 8008a94:	2000      	movs	r0, #0
 8008a96:	f009 fd31 	bl	80124fc <fflush>
 8008a9a:	f009 fc76 	bl	801238a <abort>

  if (tcp_output_segment_busy(seg)) {
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f7ff ffa4 	bl	80089ec <tcp_output_segment_busy>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d001      	beq.n	8008aae <tcp_output_segment+0x76>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	e0ba      	b.n	8008c24 <tcp_output_segment+0x1ec>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	691c      	ldr	r4, [r3, #16]
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7f8 fd4f 	bl	800155a <lwip_htonl>
 8008abc:	4603      	mov	r3, r0
 8008abe:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	691c      	ldr	r4, [r3, #16]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7f8 fd31 	bl	8001530 <lwip_htons>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8008ada:	441a      	add	r2, r3
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	3314      	adds	r3, #20
 8008ae6:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	7b1b      	ldrb	r3, [r3, #12]
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d015      	beq.n	8008b20 <tcp_output_segment+0xe8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	3304      	adds	r3, #4
 8008af8:	461a      	mov	r2, r3
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	f44f 7006 	mov.w	r0, #536	; 0x218
 8008b00:	f7fc fd54 	bl	80055ac <tcp_eff_send_mss_netif>
 8008b04:	4603      	mov	r3, r0
 8008b06:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8008b08:	8b7b      	ldrh	r3, [r7, #26]
 8008b0a:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7f8 fd23 	bl	800155a <lwip_htonl>
 8008b14:	4602      	mov	r2, r0
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	601a      	str	r2, [r3, #0]
    opts += 1;
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	da02      	bge.n	8008b30 <tcp_output_segment+0xf8>
    pcb->rtime = 0;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10c      	bne.n	8008b52 <tcp_output_segment+0x11a>
    pcb->rttest = tcp_ticks;
 8008b38:	4b41      	ldr	r3, [pc, #260]	; (8008c40 <tcp_output_segment+0x208>)
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7f8 fd07 	bl	800155a <lwip_htonl>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	461a      	mov	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	6852      	ldr	r2, [r2, #4]
 8008b6a:	8951      	ldrh	r1, [r2, #10]
 8008b6c:	8b3a      	ldrh	r2, [r7, #24]
 8008b6e:	1a8a      	subs	r2, r1, r2
 8008b70:	b292      	uxth	r2, r2
 8008b72:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	6852      	ldr	r2, [r2, #4]
 8008b7c:	8911      	ldrh	r1, [r2, #8]
 8008b7e:	8b3a      	ldrh	r2, [r7, #24]
 8008b80:	1a8a      	subs	r2, r1, r2
 8008b82:	b292      	uxth	r2, r2
 8008b84:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	6912      	ldr	r2, [r2, #16]
 8008b8e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	2200      	movs	r2, #0
 8008b96:	741a      	strb	r2, [r3, #16]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	f103 0214 	add.w	r2, r3, #20
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	7b1b      	ldrb	r3, [r3, #12]
 8008ba8:	f003 0301 	and.w	r3, r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <tcp_output_segment+0x17c>
 8008bb0:	2304      	movs	r3, #4
 8008bb2:	e000      	b.n	8008bb6 <tcp_output_segment+0x17e>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	441a      	add	r2, r3
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d00b      	beq.n	8008bd6 <tcp_output_segment+0x19e>
 8008bbe:	4b1b      	ldr	r3, [pc, #108]	; (8008c2c <tcp_output_segment+0x1f4>)
 8008bc0:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 8008bc4:	491f      	ldr	r1, [pc, #124]	; (8008c44 <tcp_output_segment+0x20c>)
 8008bc6:	481b      	ldr	r0, [pc, #108]	; (8008c34 <tcp_output_segment+0x1fc>)
 8008bc8:	f009 fb96 	bl	80122f8 <iprintf>
 8008bcc:	2000      	movs	r0, #0
 8008bce:	f009 fc95 	bl	80124fc <fflush>
 8008bd2:	f009 fbda 	bl	801238a <abort>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	691c      	ldr	r4, [r3, #16]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8008be2:	891a      	ldrh	r2, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8008be4:	68b9      	ldr	r1, [r7, #8]
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	460b      	mov	r3, r1
 8008bee:	2106      	movs	r1, #6
 8008bf0:	f7f8 fdd0 	bl	8001794 <ip_chksum_pseudo>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6858      	ldr	r0, [r3, #4]
 8008bfc:	68b9      	ldr	r1, [r7, #8]
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	1d1c      	adds	r4, r3, #4
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	7add      	ldrb	r5, [r3, #11]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	7a9b      	ldrb	r3, [r3, #10]
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	9202      	str	r2, [sp, #8]
 8008c0e:	2206      	movs	r2, #6
 8008c10:	9201      	str	r2, [sp, #4]
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	462b      	mov	r3, r5
 8008c16:	4622      	mov	r2, r4
 8008c18:	f7f9 f9c6 	bl	8001fa8 <ip4_output_if>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8008c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3720      	adds	r7, #32
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8008c2c:	08014c8c 	.word	0x08014c8c
 8008c30:	08015284 	.word	0x08015284
 8008c34:	08014cd0 	.word	0x08014cd0
 8008c38:	080152a4 	.word	0x080152a4
 8008c3c:	080152c4 	.word	0x080152c4
 8008c40:	200018e8 	.word	0x200018e8
 8008c44:	080152e8 	.word	0x080152e8

08008c48 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8008c48:	b5b0      	push	{r4, r5, r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10b      	bne.n	8008c6e <tcp_rexmit_rto_prepare+0x26>
 8008c56:	4b38      	ldr	r3, [pc, #224]	; (8008d38 <tcp_rexmit_rto_prepare+0xf0>)
 8008c58:	f240 6267 	movw	r2, #1639	; 0x667
 8008c5c:	4937      	ldr	r1, [pc, #220]	; (8008d3c <tcp_rexmit_rto_prepare+0xf4>)
 8008c5e:	4838      	ldr	r0, [pc, #224]	; (8008d40 <tcp_rexmit_rto_prepare+0xf8>)
 8008c60:	f009 fb4a 	bl	80122f8 <iprintf>
 8008c64:	2000      	movs	r0, #0
 8008c66:	f009 fc49 	bl	80124fc <fflush>
 8008c6a:	f009 fb8e 	bl	801238a <abort>

  if (pcb->unacked == NULL) {
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d102      	bne.n	8008c7c <tcp_rexmit_rto_prepare+0x34>
    return ERR_VAL;
 8008c76:	f06f 0305 	mvn.w	r3, #5
 8008c7a:	e059      	b.n	8008d30 <tcp_rexmit_rto_prepare+0xe8>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c80:	60fb      	str	r3, [r7, #12]
 8008c82:	e00b      	b.n	8008c9c <tcp_rexmit_rto_prepare+0x54>
    if (tcp_output_segment_busy(seg)) {
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f7ff feb1 	bl	80089ec <tcp_output_segment_busy>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d002      	beq.n	8008c96 <tcp_rexmit_rto_prepare+0x4e>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8008c90:	f06f 0305 	mvn.w	r3, #5
 8008c94:	e04c      	b.n	8008d30 <tcp_rexmit_rto_prepare+0xe8>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	60fb      	str	r3, [r7, #12]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1ef      	bne.n	8008c84 <tcp_rexmit_rto_prepare+0x3c>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f7ff fea1 	bl	80089ec <tcp_output_segment_busy>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <tcp_rexmit_rto_prepare+0x6e>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8008cb0:	f06f 0305 	mvn.w	r3, #5
 8008cb4:	e03c      	b.n	8008d30 <tcp_rexmit_rto_prepare+0xe8>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d104      	bne.n	8008cd0 <tcp_rexmit_rto_prepare+0x88>
    pcb->unsent_oversize = seg->oversize_left;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	895a      	ldrh	r2, [r3, #10]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	8b5b      	ldrh	r3, [r3, #26]
 8008ce2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7f8 fc31 	bl	800155a <lwip_htonl>
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	891b      	ldrh	r3, [r3, #8]
 8008cfe:	461d      	mov	r5, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	899b      	ldrh	r3, [r3, #12]
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7f8 fc11 	bl	8001530 <lwip_htons>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	f003 0303 	and.w	r3, r3, #3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <tcp_rexmit_rto_prepare+0xd6>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e000      	b.n	8008d20 <tcp_rexmit_rto_prepare+0xd8>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	442b      	add	r3, r5
 8008d22:	18e2      	adds	r2, r4, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bdb0      	pop	{r4, r5, r7, pc}
 8008d38:	08014c8c 	.word	0x08014c8c
 8008d3c:	080152fc 	.word	0x080152fc
 8008d40:	08014cd0 	.word	0x08014cd0

08008d44 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10b      	bne.n	8008d6a <tcp_rexmit_rto_commit+0x26>
 8008d52:	4b10      	ldr	r3, [pc, #64]	; (8008d94 <tcp_rexmit_rto_commit+0x50>)
 8008d54:	f240 629c 	movw	r2, #1692	; 0x69c
 8008d58:	490f      	ldr	r1, [pc, #60]	; (8008d98 <tcp_rexmit_rto_commit+0x54>)
 8008d5a:	4810      	ldr	r0, [pc, #64]	; (8008d9c <tcp_rexmit_rto_commit+0x58>)
 8008d5c:	f009 facc 	bl	80122f8 <iprintf>
 8008d60:	2000      	movs	r0, #0
 8008d62:	f009 fbcb 	bl	80124fc <fflush>
 8008d66:	f009 fb10 	bl	801238a <abort>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d70:	2bff      	cmp	r3, #255	; 0xff
 8008d72:	d007      	beq.n	8008d84 <tcp_rexmit_rto_commit+0x40>
    ++pcb->nrtx;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7ff fc29 	bl	80085dc <tcp_output>
}
 8008d8a:	bf00      	nop
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	08014c8c 	.word	0x08014c8c
 8008d98:	08015320 	.word	0x08015320
 8008d9c:	08014cd0 	.word	0x08014cd0

08008da0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10b      	bne.n	8008dc6 <tcp_rexmit_rto+0x26>
 8008dae:	4b0c      	ldr	r3, [pc, #48]	; (8008de0 <tcp_rexmit_rto+0x40>)
 8008db0:	f240 62b1 	movw	r2, #1713	; 0x6b1
 8008db4:	490b      	ldr	r1, [pc, #44]	; (8008de4 <tcp_rexmit_rto+0x44>)
 8008db6:	480c      	ldr	r0, [pc, #48]	; (8008de8 <tcp_rexmit_rto+0x48>)
 8008db8:	f009 fa9e 	bl	80122f8 <iprintf>
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	f009 fb9d 	bl	80124fc <fflush>
 8008dc2:	f009 fae2 	bl	801238a <abort>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff ff3e 	bl	8008c48 <tcp_rexmit_rto_prepare>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d102      	bne.n	8008dd8 <tcp_rexmit_rto+0x38>
    tcp_rexmit_rto_commit(pcb);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff ffb6 	bl	8008d44 <tcp_rexmit_rto_commit>
  }
}
 8008dd8:	bf00      	nop
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	08014c8c 	.word	0x08014c8c
 8008de4:	08015344 	.word	0x08015344
 8008de8:	08014cd0 	.word	0x08014cd0

08008dec <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8008dec:	b590      	push	{r4, r7, lr}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10b      	bne.n	8008e12 <tcp_rexmit+0x26>
 8008dfa:	4b32      	ldr	r3, [pc, #200]	; (8008ec4 <tcp_rexmit+0xd8>)
 8008dfc:	f240 62c5 	movw	r2, #1733	; 0x6c5
 8008e00:	4931      	ldr	r1, [pc, #196]	; (8008ec8 <tcp_rexmit+0xdc>)
 8008e02:	4832      	ldr	r0, [pc, #200]	; (8008ecc <tcp_rexmit+0xe0>)
 8008e04:	f009 fa78 	bl	80122f8 <iprintf>
 8008e08:	2000      	movs	r0, #0
 8008e0a:	f009 fb77 	bl	80124fc <fflush>
 8008e0e:	f009 fabc 	bl	801238a <abort>

  if (pcb->unacked == NULL) {
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d102      	bne.n	8008e20 <tcp_rexmit+0x34>
    return ERR_VAL;
 8008e1a:	f06f 0305 	mvn.w	r3, #5
 8008e1e:	e04c      	b.n	8008eba <tcp_rexmit+0xce>
  }

  seg = pcb->unacked;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e24:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8008e26:	68b8      	ldr	r0, [r7, #8]
 8008e28:	f7ff fde0 	bl	80089ec <tcp_output_segment_busy>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d002      	beq.n	8008e38 <tcp_rexmit+0x4c>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8008e32:	f06f 0305 	mvn.w	r3, #5
 8008e36:	e040      	b.n	8008eba <tcp_rexmit+0xce>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	336c      	adds	r3, #108	; 0x6c
 8008e44:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8008e46:	e002      	b.n	8008e4e <tcp_rexmit+0x62>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d011      	beq.n	8008e7a <tcp_rexmit+0x8e>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7f8 fb7b 	bl	800155a <lwip_htonl>
 8008e64:	4604      	mov	r4, r0
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7f8 fb74 	bl	800155a <lwip_htonl>
 8008e72:	4603      	mov	r3, r0
 8008e74:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	dbe6      	blt.n	8008e48 <tcp_rexmit+0x5c>
  }
  seg->next = *cur_seg;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d103      	bne.n	8008e98 <tcp_rexmit+0xac>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e9e:	2bff      	cmp	r3, #255	; 0xff
 8008ea0:	d007      	beq.n	8008eb2 <tcp_rexmit+0xc6>
    ++pcb->nrtx;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	b2da      	uxtb	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd90      	pop	{r4, r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	08014c8c 	.word	0x08014c8c
 8008ec8:	08015360 	.word	0x08015360
 8008ecc:	08014cd0 	.word	0x08014cd0

08008ed0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d10b      	bne.n	8008ef6 <tcp_rexmit_fast+0x26>
 8008ede:	4b31      	ldr	r3, [pc, #196]	; (8008fa4 <tcp_rexmit_fast+0xd4>)
 8008ee0:	f240 62fd 	movw	r2, #1789	; 0x6fd
 8008ee4:	4930      	ldr	r1, [pc, #192]	; (8008fa8 <tcp_rexmit_fast+0xd8>)
 8008ee6:	4831      	ldr	r0, [pc, #196]	; (8008fac <tcp_rexmit_fast+0xdc>)
 8008ee8:	f009 fa06 	bl	80122f8 <iprintf>
 8008eec:	2000      	movs	r0, #0
 8008eee:	f009 fb05 	bl	80124fc <fflush>
 8008ef2:	f009 fa4a 	bl	801238a <abort>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d04d      	beq.n	8008f9a <tcp_rexmit_fast+0xca>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	8b5b      	ldrh	r3, [r3, #26]
 8008f02:	f003 0304 	and.w	r3, r3, #4
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d147      	bne.n	8008f9a <tcp_rexmit_fast+0xca>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7ff ff6e 	bl	8008dec <tcp_rexmit>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d141      	bne.n	8008f9a <tcp_rexmit_fast+0xca>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d207      	bcs.n	8008f36 <tcp_rexmit_fast+0x66>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008f2c:	0fda      	lsrs	r2, r3, #31
 8008f2e:	4413      	add	r3, r2
 8008f30:	105b      	asrs	r3, r3, #1
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	e006      	b.n	8008f44 <tcp_rexmit_fast+0x74>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f3c:	0fda      	lsrs	r2, r3, #31
 8008f3e:	4413      	add	r3, r2
 8008f40:	105b      	asrs	r3, r3, #1
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008f50:	461a      	mov	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f56:	005b      	lsls	r3, r3, #1
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d206      	bcs.n	8008f6a <tcp_rexmit_fast+0x9a>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f74:	4619      	mov	r1, r3
 8008f76:	0049      	lsls	r1, r1, #1
 8008f78:	440b      	add	r3, r1
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	4413      	add	r3, r2
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	8b5b      	ldrh	r3, [r3, #26]
 8008f8a:	f043 0304 	orr.w	r3, r3, #4
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8008f9a:	bf00      	nop
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	08014c8c 	.word	0x08014c8c
 8008fa8:	08015378 	.word	0x08015378
 8008fac:	08014cd0 	.word	0x08014cd0

08008fb0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	607b      	str	r3, [r7, #4]
 8008fba:	460b      	mov	r3, r1
 8008fbc:	817b      	strh	r3, [r7, #10]
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008fc2:	897a      	ldrh	r2, [r7, #10]
 8008fc4:	893b      	ldrh	r3, [r7, #8]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	3314      	adds	r3, #20
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	2022      	movs	r0, #34	; 0x22
 8008fd6:	f7fa f9a7 	bl	8003328 <pbuf_alloc>
 8008fda:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d053      	beq.n	800908a <tcp_output_alloc_header_common+0xda>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	895b      	ldrh	r3, [r3, #10]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	897b      	ldrh	r3, [r7, #10]
 8008fea:	3314      	adds	r3, #20
 8008fec:	429a      	cmp	r2, r3
 8008fee:	da0b      	bge.n	8009008 <tcp_output_alloc_header_common+0x58>
 8008ff0:	4b28      	ldr	r3, [pc, #160]	; (8009094 <tcp_output_alloc_header_common+0xe4>)
 8008ff2:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8008ff6:	4928      	ldr	r1, [pc, #160]	; (8009098 <tcp_output_alloc_header_common+0xe8>)
 8008ff8:	4828      	ldr	r0, [pc, #160]	; (800909c <tcp_output_alloc_header_common+0xec>)
 8008ffa:	f009 f97d 	bl	80122f8 <iprintf>
 8008ffe:	2000      	movs	r0, #0
 8009000:	f009 fa7c 	bl	80124fc <fflush>
 8009004:	f009 f9c1 	bl	801238a <abort>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800900e:	8c3b      	ldrh	r3, [r7, #32]
 8009010:	4618      	mov	r0, r3
 8009012:	f7f8 fa8d 	bl	8001530 <lwip_htons>
 8009016:	4603      	mov	r3, r0
 8009018:	461a      	mov	r2, r3
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800901e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009020:	4618      	mov	r0, r3
 8009022:	f7f8 fa85 	bl	8001530 <lwip_htons>
 8009026:	4603      	mov	r3, r0
 8009028:	461a      	mov	r2, r3
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f7f8 fa90 	bl	800155a <lwip_htonl>
 800903a:	4602      	mov	r2, r0
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8009040:	897b      	ldrh	r3, [r7, #10]
 8009042:	089b      	lsrs	r3, r3, #2
 8009044:	b29b      	uxth	r3, r3
 8009046:	3305      	adds	r3, #5
 8009048:	b29b      	uxth	r3, r3
 800904a:	031b      	lsls	r3, r3, #12
 800904c:	b29a      	uxth	r2, r3
 800904e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009052:	b29b      	uxth	r3, r3
 8009054:	4313      	orrs	r3, r2
 8009056:	b29b      	uxth	r3, r3
 8009058:	4618      	mov	r0, r3
 800905a:	f7f8 fa69 	bl	8001530 <lwip_htons>
 800905e:	4603      	mov	r3, r0
 8009060:	461a      	mov	r2, r3
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8009066:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009068:	4618      	mov	r0, r3
 800906a:	f7f8 fa61 	bl	8001530 <lwip_htons>
 800906e:	4603      	mov	r3, r0
 8009070:	461a      	mov	r2, r3
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	2200      	movs	r2, #0
 800907a:	741a      	strb	r2, [r3, #16]
 800907c:	2200      	movs	r2, #0
 800907e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	2200      	movs	r2, #0
 8009084:	749a      	strb	r2, [r3, #18]
 8009086:	2200      	movs	r2, #0
 8009088:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800908a:	697b      	ldr	r3, [r7, #20]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3718      	adds	r7, #24
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	08014c8c 	.word	0x08014c8c
 8009098:	08015398 	.word	0x08015398
 800909c:	08014cd0 	.word	0x08014cd0

080090a0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80090a0:	b5b0      	push	{r4, r5, r7, lr}
 80090a2:	b08a      	sub	sp, #40	; 0x28
 80090a4:	af04      	add	r7, sp, #16
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	607b      	str	r3, [r7, #4]
 80090aa:	460b      	mov	r3, r1
 80090ac:	817b      	strh	r3, [r7, #10]
 80090ae:	4613      	mov	r3, r2
 80090b0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10b      	bne.n	80090d0 <tcp_output_alloc_header+0x30>
 80090b8:	4b17      	ldr	r3, [pc, #92]	; (8009118 <tcp_output_alloc_header+0x78>)
 80090ba:	f240 7246 	movw	r2, #1862	; 0x746
 80090be:	4917      	ldr	r1, [pc, #92]	; (800911c <tcp_output_alloc_header+0x7c>)
 80090c0:	4817      	ldr	r0, [pc, #92]	; (8009120 <tcp_output_alloc_header+0x80>)
 80090c2:	f009 f919 	bl	80122f8 <iprintf>
 80090c6:	2000      	movs	r0, #0
 80090c8:	f009 fa18 	bl	80124fc <fflush>
 80090cc:	f009 f95d 	bl	801238a <abort>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	8adb      	ldrh	r3, [r3, #22]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	8b12      	ldrh	r2, [r2, #24]
 80090dc:	68f9      	ldr	r1, [r7, #12]
 80090de:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80090e0:	893d      	ldrh	r5, [r7, #8]
 80090e2:	897c      	ldrh	r4, [r7, #10]
 80090e4:	9103      	str	r1, [sp, #12]
 80090e6:	2110      	movs	r1, #16
 80090e8:	9102      	str	r1, [sp, #8]
 80090ea:	9201      	str	r2, [sp, #4]
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	462a      	mov	r2, r5
 80090f2:	4621      	mov	r1, r4
 80090f4:	f7ff ff5c 	bl	8008fb0 <tcp_output_alloc_header_common>
 80090f8:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d006      	beq.n	800910e <tcp_output_alloc_header+0x6e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009108:	441a      	add	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800910e:	697b      	ldr	r3, [r7, #20]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3718      	adds	r7, #24
 8009114:	46bd      	mov	sp, r7
 8009116:	bdb0      	pop	{r4, r5, r7, pc}
 8009118:	08014c8c 	.word	0x08014c8c
 800911c:	080153c8 	.word	0x080153c8
 8009120:	08014cd0 	.word	0x08014cd0

08009124 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b088      	sub	sp, #32
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	4611      	mov	r1, r2
 8009130:	461a      	mov	r2, r3
 8009132:	460b      	mov	r3, r1
 8009134:	71fb      	strb	r3, [r7, #7]
 8009136:	4613      	mov	r3, r2
 8009138:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800913a:	2300      	movs	r3, #0
 800913c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10b      	bne.n	800915c <tcp_output_fill_options+0x38>
 8009144:	4b1a      	ldr	r3, [pc, #104]	; (80091b0 <tcp_output_fill_options+0x8c>)
 8009146:	f240 725a 	movw	r2, #1882	; 0x75a
 800914a:	491a      	ldr	r1, [pc, #104]	; (80091b4 <tcp_output_fill_options+0x90>)
 800914c:	481a      	ldr	r0, [pc, #104]	; (80091b8 <tcp_output_fill_options+0x94>)
 800914e:	f009 f8d3 	bl	80122f8 <iprintf>
 8009152:	2000      	movs	r0, #0
 8009154:	f009 f9d2 	bl	80124fc <fflush>
 8009158:	f009 f917 	bl	801238a <abort>

  tcphdr = (struct tcp_hdr *)p->payload;
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	3314      	adds	r3, #20
 8009166:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	f103 0214 	add.w	r2, r3, #20
 800916e:	8bfb      	ldrh	r3, [r7, #30]
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4619      	mov	r1, r3
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	f003 0301 	and.w	r3, r3, #1
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <tcp_output_fill_options+0x5e>
 800917e:	2304      	movs	r3, #4
 8009180:	e000      	b.n	8009184 <tcp_output_fill_options+0x60>
 8009182:	2300      	movs	r3, #0
 8009184:	440b      	add	r3, r1
 8009186:	441a      	add	r2, r3
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	429a      	cmp	r2, r3
 800918c:	d00b      	beq.n	80091a6 <tcp_output_fill_options+0x82>
 800918e:	4b08      	ldr	r3, [pc, #32]	; (80091b0 <tcp_output_fill_options+0x8c>)
 8009190:	f240 7279 	movw	r2, #1913	; 0x779
 8009194:	4909      	ldr	r1, [pc, #36]	; (80091bc <tcp_output_fill_options+0x98>)
 8009196:	4808      	ldr	r0, [pc, #32]	; (80091b8 <tcp_output_fill_options+0x94>)
 8009198:	f009 f8ae 	bl	80122f8 <iprintf>
 800919c:	2000      	movs	r0, #0
 800919e:	f009 f9ad 	bl	80124fc <fflush>
 80091a2:	f009 f8f2 	bl	801238a <abort>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80091a6:	bf00      	nop
 80091a8:	3720      	adds	r7, #32
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	08014c8c 	.word	0x08014c8c
 80091b4:	080153f0 	.word	0x080153f0
 80091b8:	08014cd0 	.word	0x08014cd0
 80091bc:	080152e8 	.word	0x080152e8

080091c0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b088      	sub	sp, #32
 80091c4:	af02      	add	r7, sp, #8
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
 80091cc:	603b      	str	r3, [r7, #0]
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10b      	bne.n	80091ec <tcp_output_control_segment+0x2c>
 80091d4:	4b13      	ldr	r3, [pc, #76]	; (8009224 <tcp_output_control_segment+0x64>)
 80091d6:	f240 728a 	movw	r2, #1930	; 0x78a
 80091da:	4913      	ldr	r1, [pc, #76]	; (8009228 <tcp_output_control_segment+0x68>)
 80091dc:	4813      	ldr	r0, [pc, #76]	; (800922c <tcp_output_control_segment+0x6c>)
 80091de:	f009 f88b 	bl	80122f8 <iprintf>
 80091e2:	2000      	movs	r0, #0
 80091e4:	f009 f98a 	bl	80124fc <fflush>
 80091e8:	f009 f8cf 	bl	801238a <abort>

  netif = tcp_route(pcb, src, dst);
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f7fe fe73 	bl	8007edc <tcp_route>
 80091f6:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d105      	bne.n	800920a <tcp_output_control_segment+0x4a>
    pbuf_free(p);
 80091fe:	68b8      	ldr	r0, [r7, #8]
 8009200:	f7fa fb30 	bl	8003864 <pbuf_free>
    return ERR_RTE;
 8009204:	f06f 0303 	mvn.w	r3, #3
 8009208:	e008      	b.n	800921c <tcp_output_control_segment+0x5c>
  }
  return tcp_output_control_segment_netif(pcb, p, src, dst, netif);
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	68b9      	ldr	r1, [r7, #8]
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f000 f80b 	bl	8009230 <tcp_output_control_segment_netif>
 800921a:	4603      	mov	r3, r0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3718      	adds	r7, #24
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	08014c8c 	.word	0x08014c8c
 8009228:	08015418 	.word	0x08015418
 800922c:	08014cd0 	.word	0x08014cd0

08009230 <tcp_output_control_segment_netif>:
 */
static err_t
tcp_output_control_segment_netif(const struct tcp_pcb *pcb, struct pbuf *p,
                                 const ip_addr_t *src, const ip_addr_t *dst,
                                 struct netif *netif)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b08c      	sub	sp, #48	; 0x30
 8009234:	af04      	add	r7, sp, #16
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
 800923c:	603b      	str	r3, [r7, #0]
  err_t err;
  u8_t ttl, tos;

  LWIP_ASSERT("tcp_output_control_segment_netif: no netif given", netif != NULL);
 800923e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10b      	bne.n	800925c <tcp_output_control_segment_netif+0x2c>
 8009244:	4b20      	ldr	r3, [pc, #128]	; (80092c8 <tcp_output_control_segment_netif+0x98>)
 8009246:	f240 72a1 	movw	r2, #1953	; 0x7a1
 800924a:	4920      	ldr	r1, [pc, #128]	; (80092cc <tcp_output_control_segment_netif+0x9c>)
 800924c:	4820      	ldr	r0, [pc, #128]	; (80092d0 <tcp_output_control_segment_netif+0xa0>)
 800924e:	f009 f853 	bl	80122f8 <iprintf>
 8009252:	2000      	movs	r0, #0
 8009254:	f009 f952 	bl	80124fc <fflush>
 8009258:	f009 f897 	bl	801238a <abort>

#if CHECKSUM_GEN_TCP
  IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
    struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	61bb      	str	r3, [r7, #24]
    tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	891a      	ldrh	r2, [r3, #8]
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2106      	movs	r1, #6
 800926e:	68b8      	ldr	r0, [r7, #8]
 8009270:	f7f8 fa90 	bl	8001794 <ip_chksum_pseudo>
 8009274:	4603      	mov	r3, r0
 8009276:	461a      	mov	r2, r3
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	821a      	strh	r2, [r3, #16]
                                      src, dst);
  }
#endif
  if (pcb != NULL) {
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d006      	beq.n	8009290 <tcp_output_control_segment_netif+0x60>
    NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
    ttl = pcb->ttl;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	7adb      	ldrb	r3, [r3, #11]
 8009286:	77fb      	strb	r3, [r7, #31]
    tos = pcb->tos;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	7a9b      	ldrb	r3, [r3, #10]
 800928c:	77bb      	strb	r3, [r7, #30]
 800928e:	e003      	b.n	8009298 <tcp_output_control_segment_netif+0x68>
  } else {
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ttl = TCP_TTL;
 8009290:	23ff      	movs	r3, #255	; 0xff
 8009292:	77fb      	strb	r3, [r7, #31]
    tos = 0;
 8009294:	2300      	movs	r3, #0
 8009296:	77bb      	strb	r3, [r7, #30]
  }
  TCP_STATS_INC(tcp.xmit);
  err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8009298:	7ffa      	ldrb	r2, [r7, #31]
 800929a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929c:	9302      	str	r3, [sp, #8]
 800929e:	2306      	movs	r3, #6
 80092a0:	9301      	str	r3, [sp, #4]
 80092a2:	7fbb      	ldrb	r3, [r7, #30]
 80092a4:	9300      	str	r3, [sp, #0]
 80092a6:	4613      	mov	r3, r2
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	6879      	ldr	r1, [r7, #4]
 80092ac:	68b8      	ldr	r0, [r7, #8]
 80092ae:	f7f8 fe7b 	bl	8001fa8 <ip4_output_if>
 80092b2:	4603      	mov	r3, r0
 80092b4:	75fb      	strb	r3, [r7, #23]
  NETIF_RESET_HINTS(netif);

  pbuf_free(p);
 80092b6:	68b8      	ldr	r0, [r7, #8]
 80092b8:	f7fa fad4 	bl	8003864 <pbuf_free>
  return err;
 80092bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3720      	adds	r7, #32
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	08014c8c 	.word	0x08014c8c
 80092cc:	08015444 	.word	0x08015444
 80092d0:	08014cd0 	.word	0x08014cd0

080092d4 <tcp_rst_common>:

static struct pbuf *
tcp_rst_common(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
               const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
               u16_t local_port, u16_t remote_port)
{
 80092d4:	b590      	push	{r4, r7, lr}
 80092d6:	b08b      	sub	sp, #44	; 0x2c
 80092d8:	af04      	add	r7, sp, #16
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
 80092e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10b      	bne.n	8009300 <tcp_rst_common+0x2c>
 80092e8:	4b22      	ldr	r3, [pc, #136]	; (8009374 <tcp_rst_common+0xa0>)
 80092ea:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80092ee:	4922      	ldr	r1, [pc, #136]	; (8009378 <tcp_rst_common+0xa4>)
 80092f0:	4822      	ldr	r0, [pc, #136]	; (800937c <tcp_rst_common+0xa8>)
 80092f2:	f009 f801 	bl	80122f8 <iprintf>
 80092f6:	2000      	movs	r0, #0
 80092f8:	f009 f900 	bl	80124fc <fflush>
 80092fc:	f009 f845 	bl	801238a <abort>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10b      	bne.n	800931e <tcp_rst_common+0x4a>
 8009306:	4b1b      	ldr	r3, [pc, #108]	; (8009374 <tcp_rst_common+0xa0>)
 8009308:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800930c:	491c      	ldr	r1, [pc, #112]	; (8009380 <tcp_rst_common+0xac>)
 800930e:	481b      	ldr	r0, [pc, #108]	; (800937c <tcp_rst_common+0xa8>)
 8009310:	f008 fff2 	bl	80122f8 <iprintf>
 8009314:	2000      	movs	r0, #0
 8009316:	f009 f8f1 	bl	80124fc <fflush>
 800931a:	f009 f836 	bl	801238a <abort>
  /* these two are passed only for checks, disable warnings without asserts */
  LWIP_UNUSED_ARG(local_ip);
  LWIP_UNUSED_ARG(remote_ip);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800931e:	2300      	movs	r3, #0
 8009320:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8009322:	f242 0303 	movw	r3, #8195	; 0x2003
 8009326:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8009328:	7dfb      	ldrb	r3, [r7, #23]
 800932a:	b29c      	uxth	r4, r3
 800932c:	68b8      	ldr	r0, [r7, #8]
 800932e:	f7f8 f914 	bl	800155a <lwip_htonl>
 8009332:	4602      	mov	r2, r0
 8009334:	8abb      	ldrh	r3, [r7, #20]
 8009336:	9303      	str	r3, [sp, #12]
 8009338:	2314      	movs	r3, #20
 800933a:	9302      	str	r3, [sp, #8]
 800933c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800933e:	9301      	str	r3, [sp, #4]
 8009340:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	4613      	mov	r3, r2
 8009346:	2200      	movs	r2, #0
 8009348:	4621      	mov	r1, r4
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7ff fe30 	bl	8008fb0 <tcp_output_alloc_header_common>
 8009350:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d101      	bne.n	800935c <tcp_rst_common+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return NULL;
 8009358:	2300      	movs	r3, #0
 800935a:	e006      	b.n	800936a <tcp_rst_common+0x96>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800935c:	2300      	movs	r3, #0
 800935e:	2200      	movs	r2, #0
 8009360:	6939      	ldr	r1, [r7, #16]
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f7ff fede 	bl	8009124 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
  return p;
 8009368:	693b      	ldr	r3, [r7, #16]
}
 800936a:	4618      	mov	r0, r3
 800936c:	371c      	adds	r7, #28
 800936e:	46bd      	mov	sp, r7
 8009370:	bd90      	pop	{r4, r7, pc}
 8009372:	bf00      	nop
 8009374:	08014c8c 	.word	0x08014c8c
 8009378:	08015478 	.word	0x08015478
 800937c:	08014cd0 	.word	0x08014cd0
 8009380:	08015494 	.word	0x08015494

08009384 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b08a      	sub	sp, #40	; 0x28
 8009388:	af04      	add	r7, sp, #16
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
 8009390:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  
  p = tcp_rst_common(pcb, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 8009392:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009394:	9302      	str	r3, [sp, #8]
 8009396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009398:	9301      	str	r3, [sp, #4]
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	68b9      	ldr	r1, [r7, #8]
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f7ff ff95 	bl	80092d4 <tcp_rst_common>
 80093aa:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d005      	beq.n	80093be <tcp_rst+0x3a>
    tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	683a      	ldr	r2, [r7, #0]
 80093b6:	6979      	ldr	r1, [r7, #20]
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f7ff ff01 	bl	80091c0 <tcp_output_control_segment>
  }
}
 80093be:	bf00      	nop
 80093c0:	3718      	adds	r7, #24
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <tcp_rst_netif>:
 */
void
tcp_rst_netif(struct netif *netif, u32_t seqno, u32_t ackno,
              const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
              u16_t local_port, u16_t remote_port)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b08a      	sub	sp, #40	; 0x28
 80093ca:	af04      	add	r7, sp, #16
 80093cc:	60f8      	str	r0, [r7, #12]
 80093ce:	60b9      	str	r1, [r7, #8]
 80093d0:	607a      	str	r2, [r7, #4]
 80093d2:	603b      	str	r3, [r7, #0]
  if (netif) {
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d017      	beq.n	800940a <tcp_rst_netif+0x44>
    struct pbuf *p = tcp_rst_common(NULL, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 80093da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80093dc:	9302      	str	r3, [sp, #8]
 80093de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093e0:	9301      	str	r3, [sp, #4]
 80093e2:	6a3b      	ldr	r3, [r7, #32]
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	2000      	movs	r0, #0
 80093ee:	f7ff ff71 	bl	80092d4 <tcp_rst_common>
 80093f2:	6178      	str	r0, [r7, #20]
    if (p != NULL) {
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d007      	beq.n	800940a <tcp_rst_netif+0x44>
      tcp_output_control_segment_netif(NULL, p, local_ip, remote_ip, netif);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	683a      	ldr	r2, [r7, #0]
 8009402:	6979      	ldr	r1, [r7, #20]
 8009404:	2000      	movs	r0, #0
 8009406:	f7ff ff13 	bl	8009230 <tcp_output_control_segment_netif>
    }
  } else {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_rst_netif: no netif given\n"));
  }
}
 800940a:	bf00      	nop
 800940c:	3718      	adds	r7, #24
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009414:	b590      	push	{r4, r7, lr}
 8009416:	b087      	sub	sp, #28
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800941c:	2300      	movs	r3, #0
 800941e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8009420:	2300      	movs	r3, #0
 8009422:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10b      	bne.n	8009442 <tcp_send_empty_ack+0x2e>
 800942a:	4b2c      	ldr	r3, [pc, #176]	; (80094dc <tcp_send_empty_ack+0xc8>)
 800942c:	f44f 6203 	mov.w	r2, #2096	; 0x830
 8009430:	492b      	ldr	r1, [pc, #172]	; (80094e0 <tcp_send_empty_ack+0xcc>)
 8009432:	482c      	ldr	r0, [pc, #176]	; (80094e4 <tcp_send_empty_ack+0xd0>)
 8009434:	f008 ff60 	bl	80122f8 <iprintf>
 8009438:	2000      	movs	r0, #0
 800943a:	f009 f85f 	bl	80124fc <fflush>
 800943e:	f008 ffa4 	bl	801238a <abort>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009442:	7dfb      	ldrb	r3, [r7, #23]
 8009444:	f003 0301 	and.w	r3, r3, #1
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <tcp_send_empty_ack+0x3c>
 800944c:	2304      	movs	r3, #4
 800944e:	e000      	b.n	8009452 <tcp_send_empty_ack+0x3e>
 8009450:	2300      	movs	r3, #0
 8009452:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8009454:	7d7b      	ldrb	r3, [r7, #21]
 8009456:	b29c      	uxth	r4, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800945c:	4618      	mov	r0, r3
 800945e:	f7f8 f87c 	bl	800155a <lwip_htonl>
 8009462:	4603      	mov	r3, r0
 8009464:	2200      	movs	r2, #0
 8009466:	4621      	mov	r1, r4
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f7ff fe19 	bl	80090a0 <tcp_output_alloc_header>
 800946e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d109      	bne.n	800948a <tcp_send_empty_ack+0x76>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	8b5b      	ldrh	r3, [r3, #26]
 800947a:	f043 0303 	orr.w	r3, r3, #3
 800947e:	b29a      	uxth	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8009484:	f06f 0301 	mvn.w	r3, #1
 8009488:	e023      	b.n	80094d2 <tcp_send_empty_ack+0xbe>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800948a:	7dbb      	ldrb	r3, [r7, #22]
 800948c:	7dfa      	ldrb	r2, [r7, #23]
 800948e:	6939      	ldr	r1, [r7, #16]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7ff fe47 	bl	8009124 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3304      	adds	r3, #4
 800949c:	6939      	ldr	r1, [r7, #16]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7ff fe8e 	bl	80091c0 <tcp_output_control_segment>
 80094a4:	4603      	mov	r3, r0
 80094a6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80094a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d007      	beq.n	80094c0 <tcp_send_empty_ack+0xac>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	8b5b      	ldrh	r3, [r3, #26]
 80094b4:	f043 0303 	orr.w	r3, r3, #3
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	835a      	strh	r2, [r3, #26]
 80094be:	e006      	b.n	80094ce <tcp_send_empty_ack+0xba>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	8b5b      	ldrh	r3, [r3, #26]
 80094c4:	f023 0303 	bic.w	r3, r3, #3
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80094ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	371c      	adds	r7, #28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd90      	pop	{r4, r7, pc}
 80094da:	bf00      	nop
 80094dc:	08014c8c 	.word	0x08014c8c
 80094e0:	080154b0 	.word	0x080154b0
 80094e4:	08014cd0 	.word	0x08014cd0

080094e8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80094e8:	b590      	push	{r4, r7, lr}
 80094ea:	b087      	sub	sp, #28
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80094f0:	2300      	movs	r3, #0
 80094f2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10b      	bne.n	8009512 <tcp_keepalive+0x2a>
 80094fa:	4b1b      	ldr	r3, [pc, #108]	; (8009568 <tcp_keepalive+0x80>)
 80094fc:	f640 026a 	movw	r2, #2154	; 0x86a
 8009500:	491a      	ldr	r1, [pc, #104]	; (800956c <tcp_keepalive+0x84>)
 8009502:	481b      	ldr	r0, [pc, #108]	; (8009570 <tcp_keepalive+0x88>)
 8009504:	f008 fef8 	bl	80122f8 <iprintf>
 8009508:	2000      	movs	r0, #0
 800950a:	f008 fff7 	bl	80124fc <fflush>
 800950e:	f008 ff3c 	bl	801238a <abort>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8009512:	7dfb      	ldrb	r3, [r7, #23]
 8009514:	b29c      	uxth	r4, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800951a:	3b01      	subs	r3, #1
 800951c:	4618      	mov	r0, r3
 800951e:	f7f8 f81c 	bl	800155a <lwip_htonl>
 8009522:	4603      	mov	r3, r0
 8009524:	2200      	movs	r2, #0
 8009526:	4621      	mov	r1, r4
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7ff fdb9 	bl	80090a0 <tcp_output_alloc_header>
 800952e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d102      	bne.n	800953c <tcp_keepalive+0x54>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8009536:	f04f 33ff 	mov.w	r3, #4294967295
 800953a:	e010      	b.n	800955e <tcp_keepalive+0x76>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800953c:	2300      	movs	r3, #0
 800953e:	2200      	movs	r2, #0
 8009540:	6939      	ldr	r1, [r7, #16]
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7ff fdee 	bl	8009124 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	3304      	adds	r3, #4
 800954e:	6939      	ldr	r1, [r7, #16]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7ff fe35 	bl	80091c0 <tcp_output_control_segment>
 8009556:	4603      	mov	r3, r0
 8009558:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800955a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800955e:	4618      	mov	r0, r3
 8009560:	371c      	adds	r7, #28
 8009562:	46bd      	mov	sp, r7
 8009564:	bd90      	pop	{r4, r7, pc}
 8009566:	bf00      	nop
 8009568:	08014c8c 	.word	0x08014c8c
 800956c:	080154d0 	.word	0x080154d0
 8009570:	08014cd0 	.word	0x08014cd0

08009574 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8009574:	b590      	push	{r4, r7, lr}
 8009576:	b08b      	sub	sp, #44	; 0x2c
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800957c:	2300      	movs	r3, #0
 800957e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10b      	bne.n	80095a0 <tcp_zero_window_probe+0x2c>
 8009588:	4b4e      	ldr	r3, [pc, #312]	; (80096c4 <tcp_zero_window_probe+0x150>)
 800958a:	f640 0295 	movw	r2, #2197	; 0x895
 800958e:	494e      	ldr	r1, [pc, #312]	; (80096c8 <tcp_zero_window_probe+0x154>)
 8009590:	484e      	ldr	r0, [pc, #312]	; (80096cc <tcp_zero_window_probe+0x158>)
 8009592:	f008 feb1 	bl	80122f8 <iprintf>
 8009596:	2000      	movs	r0, #0
 8009598:	f008 ffb0 	bl	80124fc <fflush>
 800959c:	f008 fef5 	bl	801238a <abort>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095a4:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80095a6:	6a3b      	ldr	r3, [r7, #32]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d101      	bne.n	80095b0 <tcp_zero_window_probe+0x3c>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80095ac:	2300      	movs	r3, #0
 80095ae:	e085      	b.n	80096bc <tcp_zero_window_probe+0x148>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80095b6:	2bff      	cmp	r3, #255	; 0xff
 80095b8:	d007      	beq.n	80095ca <tcp_zero_window_probe+0x56>
    ++pcb->persist_probe;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80095c0:	3301      	adds	r3, #1
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80095ca:	6a3b      	ldr	r3, [r7, #32]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	899b      	ldrh	r3, [r3, #12]
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7f7 ffac 	bl	8001530 <lwip_htons>
 80095d8:	4603      	mov	r3, r0
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	f003 0301 	and.w	r3, r3, #1
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d005      	beq.n	80095f0 <tcp_zero_window_probe+0x7c>
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	891b      	ldrh	r3, [r3, #8]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <tcp_zero_window_probe+0x7c>
 80095ec:	2301      	movs	r3, #1
 80095ee:	e000      	b.n	80095f2 <tcp_zero_window_probe+0x7e>
 80095f0:	2300      	movs	r3, #0
 80095f2:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80095f4:	7ffb      	ldrb	r3, [r7, #31]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	bf0c      	ite	eq
 80095fa:	2301      	moveq	r3, #1
 80095fc:	2300      	movne	r3, #0
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8009602:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009606:	b299      	uxth	r1, r3
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	8bba      	ldrh	r2, [r7, #28]
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7ff fd45 	bl	80090a0 <tcp_output_alloc_header>
 8009616:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d102      	bne.n	8009624 <tcp_zero_window_probe+0xb0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800961e:	f04f 33ff 	mov.w	r3, #4294967295
 8009622:	e04b      	b.n	80096bc <tcp_zero_window_probe+0x148>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800962a:	7ffb      	ldrb	r3, [r7, #31]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d011      	beq.n	8009654 <tcp_zero_window_probe+0xe0>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	899b      	ldrh	r3, [r3, #12]
 8009634:	b29b      	uxth	r3, r3
 8009636:	b21b      	sxth	r3, r3
 8009638:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800963c:	b21c      	sxth	r4, r3
 800963e:	2011      	movs	r0, #17
 8009640:	f7f7 ff76 	bl	8001530 <lwip_htons>
 8009644:	4603      	mov	r3, r0
 8009646:	b21b      	sxth	r3, r3
 8009648:	4323      	orrs	r3, r4
 800964a:	b21b      	sxth	r3, r3
 800964c:	b29a      	uxth	r2, r3
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	819a      	strh	r2, [r3, #12]
 8009652:	e010      	b.n	8009676 <tcp_zero_window_probe+0x102>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	3314      	adds	r3, #20
 800965a:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800965c:	6a3b      	ldr	r3, [r7, #32]
 800965e:	6858      	ldr	r0, [r3, #4]
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	891a      	ldrh	r2, [r3, #8]
 8009666:	6a3b      	ldr	r3, [r7, #32]
 8009668:	891b      	ldrh	r3, [r3, #8]
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	b29b      	uxth	r3, r3
 800966e:	2201      	movs	r2, #1
 8009670:	6939      	ldr	r1, [r7, #16]
 8009672:	f7fa fb67 	bl	8003d44 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8009676:	6a3b      	ldr	r3, [r7, #32]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	4618      	mov	r0, r3
 800967e:	f7f7 ff6c 	bl	800155a <lwip_htonl>
 8009682:	4603      	mov	r3, r0
 8009684:	3301      	adds	r3, #1
 8009686:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	2b00      	cmp	r3, #0
 8009692:	da02      	bge.n	800969a <tcp_zero_window_probe+0x126>
    pcb->snd_nxt = snd_nxt;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800969a:	2300      	movs	r3, #0
 800969c:	2200      	movs	r2, #0
 800969e:	69b9      	ldr	r1, [r7, #24]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7ff fd3f 	bl	8009124 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	3304      	adds	r3, #4
 80096ac:	69b9      	ldr	r1, [r7, #24]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7ff fd86 	bl	80091c0 <tcp_output_control_segment>
 80096b4:	4603      	mov	r3, r0
 80096b6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80096b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	372c      	adds	r7, #44	; 0x2c
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd90      	pop	{r4, r7, pc}
 80096c4:	08014c8c 	.word	0x08014c8c
 80096c8:	080154ec 	.word	0x080154ec
 80096cc:	08014cd0 	.word	0x08014cd0

080096d0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80096d8:	f7fa fc54 	bl	8003f84 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80096dc:	4b0a      	ldr	r3, [pc, #40]	; (8009708 <tcpip_tcp_timer+0x38>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d103      	bne.n	80096ec <tcpip_tcp_timer+0x1c>
 80096e4:	4b09      	ldr	r3, [pc, #36]	; (800970c <tcpip_tcp_timer+0x3c>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d005      	beq.n	80096f8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80096ec:	2200      	movs	r2, #0
 80096ee:	4908      	ldr	r1, [pc, #32]	; (8009710 <tcpip_tcp_timer+0x40>)
 80096f0:	20fa      	movs	r0, #250	; 0xfa
 80096f2:	f000 f8e9 	bl	80098c8 <sys_timeout>
 80096f6:	e002      	b.n	80096fe <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80096f8:	4b06      	ldr	r3, [pc, #24]	; (8009714 <tcpip_tcp_timer+0x44>)
 80096fa:	2200      	movs	r2, #0
 80096fc:	601a      	str	r2, [r3, #0]
  }
}
 80096fe:	bf00      	nop
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	200018e4 	.word	0x200018e4
 800970c:	200018f4 	.word	0x200018f4
 8009710:	080096d1 	.word	0x080096d1
 8009714:	20000774 	.word	0x20000774

08009718 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800971c:	4b0a      	ldr	r3, [pc, #40]	; (8009748 <tcp_timer_needed+0x30>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10f      	bne.n	8009744 <tcp_timer_needed+0x2c>
 8009724:	4b09      	ldr	r3, [pc, #36]	; (800974c <tcp_timer_needed+0x34>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d103      	bne.n	8009734 <tcp_timer_needed+0x1c>
 800972c:	4b08      	ldr	r3, [pc, #32]	; (8009750 <tcp_timer_needed+0x38>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d007      	beq.n	8009744 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8009734:	4b04      	ldr	r3, [pc, #16]	; (8009748 <tcp_timer_needed+0x30>)
 8009736:	2201      	movs	r2, #1
 8009738:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800973a:	2200      	movs	r2, #0
 800973c:	4905      	ldr	r1, [pc, #20]	; (8009754 <tcp_timer_needed+0x3c>)
 800973e:	20fa      	movs	r0, #250	; 0xfa
 8009740:	f000 f8c2 	bl	80098c8 <sys_timeout>
  }
}
 8009744:	bf00      	nop
 8009746:	bd80      	pop	{r7, pc}
 8009748:	20000774 	.word	0x20000774
 800974c:	200018e4 	.word	0x200018e4
 8009750:	200018f4 	.word	0x200018f4
 8009754:	080096d1 	.word	0x080096d1

08009758 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8009764:	2007      	movs	r0, #7
 8009766:	f7f9 fa09 	bl	8002b7c <memp_malloc>
 800976a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10d      	bne.n	800978e <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d14d      	bne.n	8009814 <sys_timeout_abs+0xbc>
 8009778:	4b28      	ldr	r3, [pc, #160]	; (800981c <sys_timeout_abs+0xc4>)
 800977a:	22be      	movs	r2, #190	; 0xbe
 800977c:	4928      	ldr	r1, [pc, #160]	; (8009820 <sys_timeout_abs+0xc8>)
 800977e:	4829      	ldr	r0, [pc, #164]	; (8009824 <sys_timeout_abs+0xcc>)
 8009780:	f008 fdba 	bl	80122f8 <iprintf>
 8009784:	2000      	movs	r0, #0
 8009786:	f008 feb9 	bl	80124fc <fflush>
 800978a:	f008 fdfe 	bl	801238a <abort>
    return;
  }

  timeout->next = NULL;
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	2200      	movs	r2, #0
 8009792:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80097a6:	4b20      	ldr	r3, [pc, #128]	; (8009828 <sys_timeout_abs+0xd0>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d103      	bne.n	80097b6 <sys_timeout_abs+0x5e>
    next_timeout = timeout;
 80097ae:	4a1e      	ldr	r2, [pc, #120]	; (8009828 <sys_timeout_abs+0xd0>)
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	6013      	str	r3, [r2, #0]
    return;
 80097b4:	e02f      	b.n	8009816 <sys_timeout_abs+0xbe>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	4b1b      	ldr	r3, [pc, #108]	; (8009828 <sys_timeout_abs+0xd0>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	da07      	bge.n	80097d6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80097c6:	4b18      	ldr	r3, [pc, #96]	; (8009828 <sys_timeout_abs+0xd0>)
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80097ce:	4a16      	ldr	r2, [pc, #88]	; (8009828 <sys_timeout_abs+0xd0>)
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	6013      	str	r3, [r2, #0]
 80097d4:	e01f      	b.n	8009816 <sys_timeout_abs+0xbe>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80097d6:	4b14      	ldr	r3, [pc, #80]	; (8009828 <sys_timeout_abs+0xd0>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	617b      	str	r3, [r7, #20]
 80097dc:	e016      	b.n	800980c <sys_timeout_abs+0xb4>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d007      	beq.n	80097f6 <sys_timeout_abs+0x9e>
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	685a      	ldr	r2, [r3, #4]
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	da07      	bge.n	8009806 <sys_timeout_abs+0xae>
        timeout->next = t->next;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	601a      	str	r2, [r3, #0]
        break;
 8009804:	e007      	b.n	8009816 <sys_timeout_abs+0xbe>
    for (t = next_timeout; t != NULL; t = t->next) {
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	617b      	str	r3, [r7, #20]
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1e5      	bne.n	80097de <sys_timeout_abs+0x86>
 8009812:	e000      	b.n	8009816 <sys_timeout_abs+0xbe>
    return;
 8009814:	bf00      	nop
      }
    }
  }
}
 8009816:	3718      	adds	r7, #24
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	08015510 	.word	0x08015510
 8009820:	08015534 	.word	0x08015534
 8009824:	08015574 	.word	0x08015574
 8009828:	2000076c 	.word	0x2000076c

0800982c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	4798      	blx	r3

  now = sys_now();
 800983e:	f7f7 fc7f 	bl	8001140 <sys_now>
 8009842:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	4b0d      	ldr	r3, [pc, #52]	; (8009880 <lwip_cyclic_timer+0x54>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4413      	add	r3, r2
 800984e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	2b00      	cmp	r3, #0
 8009858:	da09      	bge.n	800986e <lwip_cyclic_timer+0x42>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	4413      	add	r3, r2
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	4907      	ldr	r1, [pc, #28]	; (8009884 <lwip_cyclic_timer+0x58>)
 8009866:	4618      	mov	r0, r3
 8009868:	f7ff ff76 	bl	8009758 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800986c:	e004      	b.n	8009878 <lwip_cyclic_timer+0x4c>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	4904      	ldr	r1, [pc, #16]	; (8009884 <lwip_cyclic_timer+0x58>)
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f7ff ff70 	bl	8009758 <sys_timeout_abs>
}
 8009878:	bf00      	nop
 800987a:	3718      	adds	r7, #24
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	20000770 	.word	0x20000770
 8009884:	0800982d 	.word	0x0800982d

08009888 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800988e:	2301      	movs	r3, #1
 8009890:	607b      	str	r3, [r7, #4]
 8009892:	e00e      	b.n	80098b2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8009894:	4a0a      	ldr	r2, [pc, #40]	; (80098c0 <sys_timeouts_init+0x38>)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	00db      	lsls	r3, r3, #3
 80098a0:	4a07      	ldr	r2, [pc, #28]	; (80098c0 <sys_timeouts_init+0x38>)
 80098a2:	4413      	add	r3, r2
 80098a4:	461a      	mov	r2, r3
 80098a6:	4907      	ldr	r1, [pc, #28]	; (80098c4 <sys_timeouts_init+0x3c>)
 80098a8:	f000 f80e 	bl	80098c8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	3301      	adds	r3, #1
 80098b0:	607b      	str	r3, [r7, #4]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d0ed      	beq.n	8009894 <sys_timeouts_init+0xc>
  }
}
 80098b8:	bf00      	nop
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	08015b14 	.word	0x08015b14
 80098c4:	0800982d 	.word	0x0800982d

080098c8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098da:	d30b      	bcc.n	80098f4 <sys_timeout+0x2c>
 80098dc:	4b0d      	ldr	r3, [pc, #52]	; (8009914 <sys_timeout+0x4c>)
 80098de:	f240 1229 	movw	r2, #297	; 0x129
 80098e2:	490d      	ldr	r1, [pc, #52]	; (8009918 <sys_timeout+0x50>)
 80098e4:	480d      	ldr	r0, [pc, #52]	; (800991c <sys_timeout+0x54>)
 80098e6:	f008 fd07 	bl	80122f8 <iprintf>
 80098ea:	2000      	movs	r0, #0
 80098ec:	f008 fe06 	bl	80124fc <fflush>
 80098f0:	f008 fd4b 	bl	801238a <abort>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */
 80098f4:	f7f7 fc24 	bl	8001140 <sys_now>
 80098f8:	4602      	mov	r2, r0
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	4413      	add	r3, r2
 80098fe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	68b9      	ldr	r1, [r7, #8]
 8009904:	6978      	ldr	r0, [r7, #20]
 8009906:	f7ff ff27 	bl	8009758 <sys_timeout_abs>
#endif
}
 800990a:	bf00      	nop
 800990c:	3718      	adds	r7, #24
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	08015510 	.word	0x08015510
 8009918:	0801559c 	.word	0x0801559c
 800991c:	08015574 	.word	0x08015574

08009920 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800992a:	4b19      	ldr	r3, [pc, #100]	; (8009990 <sys_untimeout+0x70>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d02a      	beq.n	8009988 <sys_untimeout+0x68>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8009932:	4b17      	ldr	r3, [pc, #92]	; (8009990 <sys_untimeout+0x70>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	60bb      	str	r3, [r7, #8]
 8009938:	2300      	movs	r3, #0
 800993a:	60fb      	str	r3, [r7, #12]
 800993c:	e01f      	b.n	800997e <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	689a      	ldr	r2, [r3, #8]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	429a      	cmp	r2, r3
 8009946:	d115      	bne.n	8009974 <sys_untimeout+0x54>
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	68da      	ldr	r2, [r3, #12]
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	429a      	cmp	r2, r3
 8009950:	d110      	bne.n	8009974 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d104      	bne.n	8009962 <sys_untimeout+0x42>
        next_timeout = t->next;
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a0c      	ldr	r2, [pc, #48]	; (8009990 <sys_untimeout+0x70>)
 800995e:	6013      	str	r3, [r2, #0]
 8009960:	e003      	b.n	800996a <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 800996a:	68b9      	ldr	r1, [r7, #8]
 800996c:	2007      	movs	r0, #7
 800996e:	f7f9 f96f 	bl	8002c50 <memp_free>
      return;
 8009972:	e00a      	b.n	800998a <sys_untimeout+0x6a>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	60fb      	str	r3, [r7, #12]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	60bb      	str	r3, [r7, #8]
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1dc      	bne.n	800993e <sys_untimeout+0x1e>
    }
  }
  return;
 8009984:	bf00      	nop
 8009986:	e000      	b.n	800998a <sys_untimeout+0x6a>
    return;
 8009988:	bf00      	nop
}
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	2000076c 	.word	0x2000076c

08009994 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800999a:	f7f7 fbd1 	bl	8001140 <sys_now>
 800999e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80099a0:	4b15      	ldr	r3, [pc, #84]	; (80099f8 <sys_check_timeouts+0x64>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d01e      	beq.n	80099ea <sys_check_timeouts+0x56>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	db1a      	blt.n	80099ee <sys_check_timeouts+0x5a>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a0e      	ldr	r2, [pc, #56]	; (80099f8 <sys_check_timeouts+0x64>)
 80099be:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	4a0a      	ldr	r2, [pc, #40]	; (80099fc <sys_check_timeouts+0x68>)
 80099d2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80099d4:	68b9      	ldr	r1, [r7, #8]
 80099d6:	2007      	movs	r0, #7
 80099d8:	f7f9 f93a 	bl	8002c50 <memp_free>
    if (handler != NULL) {
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d0de      	beq.n	80099a0 <sys_check_timeouts+0xc>
      handler(arg);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6838      	ldr	r0, [r7, #0]
 80099e6:	4798      	blx	r3
  do {
 80099e8:	e7da      	b.n	80099a0 <sys_check_timeouts+0xc>
      return;
 80099ea:	bf00      	nop
 80099ec:	e000      	b.n	80099f0 <sys_check_timeouts+0x5c>
      return;
 80099ee:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	2000076c 	.word	0x2000076c
 80099fc:	20000770 	.word	0x20000770

08009a00 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8009a06:	4b16      	ldr	r3, [pc, #88]	; (8009a60 <sys_timeouts_sleeptime+0x60>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d102      	bne.n	8009a14 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8009a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a12:	e021      	b.n	8009a58 <sys_timeouts_sleeptime+0x58>
  }
  now = sys_now();
 8009a14:	f7f7 fb94 	bl	8001140 <sys_now>
 8009a18:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8009a1a:	4b11      	ldr	r3, [pc, #68]	; (8009a60 <sys_timeouts_sleeptime+0x60>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	da01      	bge.n	8009a2c <sys_timeouts_sleeptime+0x2c>
    return 0;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	e015      	b.n	8009a58 <sys_timeouts_sleeptime+0x58>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8009a2c:	4b0c      	ldr	r3, [pc, #48]	; (8009a60 <sys_timeouts_sleeptime+0x60>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	685a      	ldr	r2, [r3, #4]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	da0b      	bge.n	8009a56 <sys_timeouts_sleeptime+0x56>
 8009a3e:	4b09      	ldr	r3, [pc, #36]	; (8009a64 <sys_timeouts_sleeptime+0x64>)
 8009a40:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009a44:	4908      	ldr	r1, [pc, #32]	; (8009a68 <sys_timeouts_sleeptime+0x68>)
 8009a46:	4809      	ldr	r0, [pc, #36]	; (8009a6c <sys_timeouts_sleeptime+0x6c>)
 8009a48:	f008 fc56 	bl	80122f8 <iprintf>
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	f008 fd55 	bl	80124fc <fflush>
 8009a52:	f008 fc9a 	bl	801238a <abort>
    return ret;
 8009a56:	683b      	ldr	r3, [r7, #0]
  }
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	2000076c 	.word	0x2000076c
 8009a64:	08015510 	.word	0x08015510
 8009a68:	080155d4 	.word	0x080155d4
 8009a6c:	08015574 	.word	0x08015574

08009a70 <link_required>:
#endif

/*
 * An Open on LCP has requested a change from Dead to Establish phase.
 */
void link_required(ppp_pcb *pcb) {
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
    LWIP_UNUSED_ARG(pcb);
}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <link_terminated>:

/*
 * LCP has terminated the link; go to the Dead phase and take the
 * physical layer down.
 */
void link_terminated(ppp_pcb *pcb) {
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
    if (pcb->phase == PPP_PHASE_DEAD
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00a      	beq.n	8009aac <link_terminated+0x28>
#ifdef HAVE_MULTILINK
    || pcb->phase == PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	return;
    new_phase(pcb, PPP_PHASE_DISCONNECT);
 8009a96:	210c      	movs	r1, #12
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f006 fcd9 	bl	8010450 <new_phase>
	print_link_stats();
#endif /* PPP_STATS_SUPPORT */
    } else
	ppp_notice(("Link terminated."));

    lcp_lowerdown(pcb);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f002 ff4c 	bl	800c93c <lcp_lowerdown>

    ppp_link_terminated(pcb);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f006 fcc3 	bl	8010430 <ppp_link_terminated>
 8009aaa:	e000      	b.n	8009aae <link_terminated+0x2a>
	return;
 8009aac:	bf00      	nop
	else
	    mp_bundle_terminated();
    } else
	new_phase(pcb, PPP_PHASE_DEAD);
#endif
}
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <link_down>:

/*
 * LCP has gone down; it will either die or try to re-establish.
 */
void link_down(ppp_pcb *pcb) {
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
#if PPP_NOTIFY
    notify(link_down_notifier, 0);
#endif /* PPP_NOTIFY */

    if (!doing_multilink) {
	upper_layers_down(pcb);
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f80d 	bl	8009adc <upper_layers_down>
	if (pcb->phase != PPP_PHASE_DEAD
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <link_down+0x20>
#ifdef HAVE_MULTILINK
	&& pcb->phase != PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
	)
	    new_phase(pcb, PPP_PHASE_ESTABLISH);
 8009acc:	2106      	movs	r1, #6
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f006 fcbe 	bl	8010450 <new_phase>
    }
    /* XXX if doing_multilink, should do something to stop
       network-layer traffic on the link */
}
 8009ad4:	bf00      	nop
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <upper_layers_down>:

void upper_layers_down(ppp_pcb *pcb) {
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
    int i;
    const struct protent *protp;

    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	60fb      	str	r3, [r7, #12]
 8009ae8:	e01e      	b.n	8009b28 <upper_layers_down+0x4c>
        if (protp->protocol != PPP_LCP && protp->lowerdown != NULL)
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	f24c 0221 	movw	r2, #49185	; 0xc021
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d007      	beq.n	8009b06 <upper_layers_down+0x2a>
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	695b      	ldr	r3, [r3, #20]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <upper_layers_down+0x2a>
	    (*protp->lowerdown)(pcb);
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	4798      	blx	r3
        if (protp->protocol < 0xC000 && protp->close != NULL)
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009b0e:	d208      	bcs.n	8009b22 <upper_layers_down+0x46>
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	69db      	ldr	r3, [r3, #28]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d004      	beq.n	8009b22 <upper_layers_down+0x46>
	    (*protp->close)(pcb, "LCP down");
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	69db      	ldr	r3, [r3, #28]
 8009b1c:	490c      	ldr	r1, [pc, #48]	; (8009b50 <upper_layers_down+0x74>)
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	4798      	blx	r3
    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	3301      	adds	r3, #1
 8009b26:	60fb      	str	r3, [r7, #12]
 8009b28:	4a0a      	ldr	r2, [pc, #40]	; (8009b54 <upper_layers_down+0x78>)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b30:	60bb      	str	r3, [r7, #8]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d1d8      	bne.n	8009aea <upper_layers_down+0xe>
    }
    pcb->num_np_open = 0;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
    pcb->num_np_up = 0;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
}
 8009b48:	bf00      	nop
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	080155e8 	.word	0x080155e8
 8009b54:	08015c5c 	.word	0x08015c5c

08009b58 <link_established>:

/*
 * The link is established.
 * Proceed to the Dead, Authenticate or Network phase as appropriate.
 */
void link_established(ppp_pcb *pcb) {
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
#if PAP_SUPPORT
    lcp_options *wo = &pcb->lcp_wantoptions;
#endif /* PAP_SUPPORT */
    lcp_options *go = &pcb->lcp_gotoptions;
#endif /* PPP_SERVER */
    lcp_options *ho = &pcb->lcp_hisoptions;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009b66:	60fb      	str	r3, [r7, #12]

    /*
     * Tell higher-level protocols that LCP is up.
     */
    if (!doing_multilink) {
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 8009b68:	2300      	movs	r3, #0
 8009b6a:	613b      	str	r3, [r7, #16]
 8009b6c:	e010      	b.n	8009b90 <link_established+0x38>
	    if (protp->protocol != PPP_LCP
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	881b      	ldrh	r3, [r3, #0]
 8009b72:	f24c 0221 	movw	r2, #49185	; 0xc021
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d007      	beq.n	8009b8a <link_established+0x32>
		&& protp->lowerup != NULL)
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <link_established+0x32>
		(*protp->lowerup)(pcb);
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	4798      	blx	r3
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	613b      	str	r3, [r7, #16]
 8009b90:	4a26      	ldr	r2, [pc, #152]	; (8009c2c <link_established+0xd4>)
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b98:	60bb      	str	r3, [r7, #8]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1e6      	bne.n	8009b6e <link_established+0x16>
	    return;
	}
    }
#endif /* PPP_SERVER */

    new_phase(pcb, PPP_PHASE_AUTHENTICATE);
 8009ba0:	2107      	movs	r1, #7
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f006 fc54 	bl	8010450 <new_phase>
    auth = 0;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	617b      	str	r3, [r7, #20]
	eap_authwithpeer(pcb, pcb->settings.user);
	auth |= EAP_WITHPEER;
    } else
#endif /* EAP_SUPPORT */
#if CHAP_SUPPORT
    if (ho->neg_chap) {
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	f003 0320 	and.w	r3, r3, #32
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d013      	beq.n	8009be2 <link_established+0x8a>
	chap_auth_with_peer(pcb, pcb->settings.user, CHAP_DIGEST(ho->chap_mdtype));
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6859      	ldr	r1, [r3, #4]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	791b      	ldrb	r3, [r3, #4]
 8009bc2:	f003 0304 	and.w	r3, r3, #4
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <link_established+0x76>
 8009bca:	2305      	movs	r3, #5
 8009bcc:	e000      	b.n	8009bd0 <link_established+0x78>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f9d2 	bl	8009f7c <chap_auth_with_peer>
	auth |= CHAP_WITHPEER;
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	f043 0304 	orr.w	r3, r3, #4
 8009bde:	617b      	str	r3, [r7, #20]
 8009be0:	e012      	b.n	8009c08 <link_established+0xb0>
    } else
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    if (ho->neg_upap) {
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	f003 0310 	and.w	r3, r3, #16
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00b      	beq.n	8009c08 <link_established+0xb0>
	upap_authwithpeer(pcb, pcb->settings.user, pcb->settings.passwd);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6859      	ldr	r1, [r3, #4]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f007 fa2a 	bl	8011054 <upap_authwithpeer>
	auth |= PAP_WITHPEER;
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	f043 0301 	orr.w	r3, r3, #1
 8009c06:	617b      	str	r3, [r7, #20]
    } else
#endif /* PAP_SUPPORT */
    {}

    pcb->auth_pending = auth;
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->auth_done = 0;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	865a      	strh	r2, [r3, #50]	; 0x32

    if (!auth)
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d102      	bne.n	8009c22 <link_established+0xca>
#endif /* PPP_AUTH_SUPPORT */
	network_phase(pcb);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f807 	bl	8009c30 <network_phase>
}
 8009c22:	bf00      	nop
 8009c24:	3718      	adds	r7, #24
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	08015c5c 	.word	0x08015c5c

08009c30 <network_phase>:

/*
 * Proceed to the network phase.
 */
static void network_phase(ppp_pcb *pcb) {
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
	options_from_list(extra_options, 1);
	free_wordlist(extra_options);
	extra_options = 0;
    }
#endif /* PPP_OPTIONS */
    start_networks(pcb);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 f804 	bl	8009c46 <start_networks>
}
 8009c3e:	bf00      	nop
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <start_networks>:

void start_networks(ppp_pcb *pcb) {
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b082      	sub	sp, #8
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
#if CCP_SUPPORT || ECP_SUPPORT
    int i;
    const struct protent *protp;
#endif /* CCP_SUPPORT || ECP_SUPPORT */

    new_phase(pcb, PPP_PHASE_NETWORK);
 8009c4e:	2109      	movs	r1, #9
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f006 fbfd 	bl	8010450 <new_phase>
#endif /* ECP_SUPPORT */
#if MPPE_SUPPORT
        && !pcb->ccp_gotoptions.mppe
#endif /* MPPE_SUPPORT */
        )
	continue_networks(pcb);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f804 	bl	8009c64 <continue_networks>
}
 8009c5c:	bf00      	nop
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <continue_networks>:

void continue_networks(ppp_pcb *pcb) {
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
    const struct protent *protp;

    /*
     * Start the "real" network protocols.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	e017      	b.n	8009ca2 <continue_networks+0x3e>
	if (protp->protocol < 0xC000
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	881b      	ldrh	r3, [r3, #0]
 8009c76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009c7a:	d20f      	bcs.n	8009c9c <continue_networks+0x38>
	    && protp->protocol != PPP_CCP
#endif /* CCP_SUPPORT */
#if ECP_SUPPORT
	    && protp->protocol != PPP_ECP
#endif /* ECP_SUPPORT */
	    && protp->open != NULL) {
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00b      	beq.n	8009c9c <continue_networks+0x38>
	    (*protp->open)(pcb);
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	699b      	ldr	r3, [r3, #24]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	4798      	blx	r3
	    ++pcb->num_np_open;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8009c92:	3301      	adds	r3, #1
 8009c94:	b2da      	uxtb	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	60fb      	str	r3, [r7, #12]
 8009ca2:	4a0a      	ldr	r2, [pc, #40]	; (8009ccc <continue_networks+0x68>)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009caa:	60bb      	str	r3, [r7, #8]
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1df      	bne.n	8009c72 <continue_networks+0xe>
	}

    if (pcb->num_np_open == 0)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d103      	bne.n	8009cc4 <continue_networks+0x60>
	/* nothing to do */
	lcp_close(pcb, "No network protocols running");
 8009cbc:	4904      	ldr	r1, [pc, #16]	; (8009cd0 <continue_networks+0x6c>)
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f002 fda0 	bl	800c804 <lcp_close>
}
 8009cc4:	bf00      	nop
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	08015c5c 	.word	0x08015c5c
 8009cd0:	080155f4 	.word	0x080155f4

08009cd4 <auth_withpeer_fail>:
#endif /* PPP_SERVER */

/*
 * We have failed to authenticate ourselves to the peer using `protocol'.
 */
void auth_withpeer_fail(ppp_pcb *pcb, int protocol) {
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
     * authentication secrets.
     *
     * He'll probably take the link down, and there's not much
     * we can do except wait for that.
     */
    pcb->err_code = PPPERR_AUTHFAIL;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2207      	movs	r2, #7
 8009ce2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    lcp_close(pcb, "Failed to authenticate ourselves to peer");
 8009ce6:	4904      	ldr	r1, [pc, #16]	; (8009cf8 <auth_withpeer_fail+0x24>)
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f002 fd8b 	bl	800c804 <lcp_close>
}
 8009cee:	bf00      	nop
 8009cf0:	3708      	adds	r7, #8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	08015614 	.word	0x08015614

08009cfc <auth_withpeer_success>:

/*
 * We have successfully authenticated ourselves with the peer using `protocol'.
 */
void auth_withpeer_success(ppp_pcb *pcb, int protocol, int prot_flavor) {
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
    int bit;
    const char *prot = "";
 8009d08:	4b20      	ldr	r3, [pc, #128]	; (8009d8c <auth_withpeer_success+0x90>)
 8009d0a:	613b      	str	r3, [r7, #16]
    LWIP_UNUSED_ARG(prot_flavor); /* if CHAP_SUPPORT is disabled */

    switch (protocol) {
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	f24c 0223 	movw	r2, #49187	; 0xc023
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d011      	beq.n	8009d3a <auth_withpeer_success+0x3e>
 8009d16:	f24c 2223 	movw	r2, #49699	; 0xc223
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d112      	bne.n	8009d44 <auth_withpeer_success+0x48>
#if CHAP_SUPPORT
    case PPP_CHAP:
	bit = CHAP_WITHPEER;
 8009d1e:	2304      	movs	r3, #4
 8009d20:	617b      	str	r3, [r7, #20]
	prot = "CHAP";
 8009d22:	4b1b      	ldr	r3, [pc, #108]	; (8009d90 <auth_withpeer_success+0x94>)
 8009d24:	613b      	str	r3, [r7, #16]
	switch (prot_flavor) {
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2b05      	cmp	r3, #5
 8009d2a:	d000      	beq.n	8009d2e <auth_withpeer_success+0x32>
	case CHAP_MICROSOFT_V2:
	    bit |= CHAP_MS2_WITHPEER;
	    break;
#endif /* MSCHAP_SUPPORT */
	default:
	    break;
 8009d2c:	e004      	b.n	8009d38 <auth_withpeer_success+0x3c>
	    bit |= CHAP_MD5_WITHPEER;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d34:	617b      	str	r3, [r7, #20]
	    break;
 8009d36:	bf00      	nop
	}
	break;
 8009d38:	e006      	b.n	8009d48 <auth_withpeer_success+0x4c>
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    case PPP_PAP:
	bit = PAP_WITHPEER;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	617b      	str	r3, [r7, #20]
	prot = "PAP";
 8009d3e:	4b15      	ldr	r3, [pc, #84]	; (8009d94 <auth_withpeer_success+0x98>)
 8009d40:	613b      	str	r3, [r7, #16]
	break;
 8009d42:	e001      	b.n	8009d48 <auth_withpeer_success+0x4c>
	prot = "EAP";
	break;
#endif /* EAP_SUPPORT */
    default:
	ppp_warn(("auth_withpeer_success: unknown protocol %x", protocol));
	bit = 0;
 8009d44:	2300      	movs	r3, #0
 8009d46:	617b      	str	r3, [r7, #20]
    }

    ppp_notice(("%s authentication succeeded", prot));

    /* Save the authentication method for later. */
    pcb->auth_done |= bit;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d4c:	b21a      	sxth	r2, r3
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	b21b      	sxth	r3, r3
 8009d52:	4313      	orrs	r3, r2
 8009d54:	b21b      	sxth	r3, r3
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	865a      	strh	r2, [r3, #50]	; 0x32

    /*
     * If there is no more authentication still being done,
     * proceed to the network (or callback) phase.
     */
    if ((pcb->auth_pending &= ~bit) == 0)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009d60:	b21a      	sxth	r2, r3
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	b21b      	sxth	r3, r3
 8009d66:	43db      	mvns	r3, r3
 8009d68:	b21b      	sxth	r3, r3
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	b21b      	sxth	r3, r3
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	861a      	strh	r2, [r3, #48]	; 0x30
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d102      	bne.n	8009d82 <auth_withpeer_success+0x86>
	network_phase(pcb);
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f7ff ff57 	bl	8009c30 <network_phase>
}
 8009d82:	bf00      	nop
 8009d84:	3718      	adds	r7, #24
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	08015640 	.word	0x08015640
 8009d90:	08015644 	.word	0x08015644
 8009d94:	0801564c 	.word	0x0801564c

08009d98 <np_up>:


/*
 * np_up - a network protocol has come up.
 */
void np_up(ppp_pcb *pcb, int proto) {
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
#if PPP_IDLETIMELIMIT
    int tlim;
#endif /* PPP_IDLETIMELIMIT */
    LWIP_UNUSED_ARG(proto);

    if (pcb->num_np_up == 0) {
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d103      	bne.n	8009db4 <np_up+0x1c>
	/*
	 * At this point we consider that the link has come up successfully.
	 */
	new_phase(pcb, PPP_PHASE_RUNNING);
 8009dac:	210a      	movs	r1, #10
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f006 fb4e 	bl	8010450 <new_phase>
	 */
	if (updetach && !nodetach)
	    detach();
#endif /* Unused */
    }
    ++pcb->num_np_up;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 8009dba:	3301      	adds	r3, #1
 8009dbc:	b2da      	uxtb	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
}
 8009dc4:	bf00      	nop
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <np_down>:

/*
 * np_down - a network protocol has gone down.
 */
void np_down(ppp_pcb *pcb, int proto) {
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_up == 0) {
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d103      	bne.n	8009df8 <np_down+0x2c>
	UNTIMEOUT(connect_time_expired, NULL);
#endif /* PPP_MAXCONNECT */
#ifdef MAXOCTETS
	UNTIMEOUT(check_maxoctets, NULL);
#endif
	new_phase(pcb, PPP_PHASE_NETWORK);
 8009df0:	2109      	movs	r1, #9
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f006 fb2c 	bl	8010450 <new_phase>
    }
}
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <np_finished>:

/*
 * np_finished - a network protocol has finished using the link.
 */
void np_finished(ppp_pcb *pcb, int proto) {
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_open <= 0) {
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8009e10:	3b01      	subs	r3, #1
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d103      	bne.n	8009e2c <np_finished+0x2c>
	/* no further use for the link: shut up shop. */
	lcp_close(pcb, "No network protocols running");
 8009e24:	4903      	ldr	r1, [pc, #12]	; (8009e34 <np_finished+0x34>)
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f002 fcec 	bl	800c804 <lcp_close>
    }
}
 8009e2c:	bf00      	nop
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	080155f4 	.word	0x080155f4

08009e38 <get_secret>:
/*
 * get_secret - open the CHAP secret file and return the secret
 * for authenticating the given client on the given server.
 * (We could be either client or server).
 */
int get_secret(ppp_pcb *pcb, const char *client, const char *server, char *secret, int *secret_len, int am_server) {
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
 8009e44:	603b      	str	r3, [r7, #0]
  size_t len;
  LWIP_UNUSED_ARG(server);
  LWIP_UNUSED_ARG(am_server);

  if (!client || !client[0] || !pcb->settings.user || !pcb->settings.passwd || strcmp(client, pcb->settings.user)) {
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d014      	beq.n	8009e76 <get_secret+0x3e>
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d010      	beq.n	8009e76 <get_secret+0x3e>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00c      	beq.n	8009e76 <get_secret+0x3e>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d008      	beq.n	8009e76 <get_secret+0x3e>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	4619      	mov	r1, r3
 8009e6a:	68b8      	ldr	r0, [r7, #8]
 8009e6c:	f7f6 f9b0 	bl	80001d0 <strcmp>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d001      	beq.n	8009e7a <get_secret+0x42>
    return 0;
 8009e76:	2300      	movs	r3, #0
 8009e78:	e017      	b.n	8009eaa <get_secret+0x72>
  }

  len = strlen(pcb->settings.passwd);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7f6 f9b0 	bl	80001e4 <strlen>
 8009e84:	6178      	str	r0, [r7, #20]
  if (len > MAXSECRETLEN) {
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e8c:	d902      	bls.n	8009e94 <get_secret+0x5c>
    ppp_error(("Secret for %s on %s is too long", client, server));
    len = MAXSECRETLEN;
 8009e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e92:	617b      	str	r3, [r7, #20]
  }

  MEMCPY(secret, pcb->settings.passwd, len);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	697a      	ldr	r2, [r7, #20]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6838      	ldr	r0, [r7, #0]
 8009e9e:	f008 fc4d 	bl	801273c <memcpy>
  *secret_len = len;
 8009ea2:	697a      	ldr	r2, [r7, #20]
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	601a      	str	r2, [r3, #0]
  return 1;
 8009ea8:	2301      	movs	r3, #1
    BZERO(secbuf, sizeof(secbuf));
    *secret_len = len;

    return 1;
#endif /* UNUSED */
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3718      	adds	r7, #24
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <chap_md5_make_response>:
}
#endif /* PPP_SERVER */

static void chap_md5_make_response(ppp_pcb *pcb, unsigned char *response, int id, const char *our_name,
		       const unsigned char *challenge, const char *secret, int secret_len,
		       unsigned char *private_) {
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b09c      	sub	sp, #112	; 0x70
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	60f8      	str	r0, [r7, #12]
 8009eba:	60b9      	str	r1, [r7, #8]
 8009ebc:	607a      	str	r2, [r7, #4]
 8009ebe:	603b      	str	r3, [r7, #0]
	lwip_md5_context ctx;
	unsigned char idbyte = id;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	74fb      	strb	r3, [r7, #19]
	int challenge_len = *challenge++;
 8009ec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ec8:	1c5a      	adds	r2, r3, #1
 8009eca:	67ba      	str	r2, [r7, #120]	; 0x78
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	66fb      	str	r3, [r7, #108]	; 0x6c
	LWIP_UNUSED_ARG(our_name);
	LWIP_UNUSED_ARG(private_);
	LWIP_UNUSED_ARG(pcb);

	lwip_md5_init(&ctx);
	lwip_md5_starts(&ctx);
 8009ed0:	f107 0314 	add.w	r3, r7, #20
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f005 f85f 	bl	800ef98 <md5_starts>
	lwip_md5_update(&ctx, &idbyte, 1);
 8009eda:	f107 0113 	add.w	r1, r7, #19
 8009ede:	f107 0314 	add.w	r3, r7, #20
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f005 ff3f 	bl	800fd68 <md5_update>
	lwip_md5_update(&ctx, (const u_char *)secret, secret_len);
 8009eea:	f107 0314 	add.w	r3, r7, #20
 8009eee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009ef2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f005 ff37 	bl	800fd68 <md5_update>
	lwip_md5_update(&ctx, challenge, challenge_len);
 8009efa:	f107 0314 	add.w	r3, r7, #20
 8009efe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009f00:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009f02:	4618      	mov	r0, r3
 8009f04:	f005 ff30 	bl	800fd68 <md5_update>
	lwip_md5_finish(&ctx, &response[1]);
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	1c5a      	adds	r2, r3, #1
 8009f0c:	f107 0314 	add.w	r3, r7, #20
 8009f10:	4611      	mov	r1, r2
 8009f12:	4618      	mov	r0, r3
 8009f14:	f005 ff90 	bl	800fe38 <md5_finish>
	lwip_md5_free(&ctx);
	response[0] = MD5_HASH_SIZE;
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	2210      	movs	r2, #16
 8009f1c:	701a      	strb	r2, [r3, #0]
}
 8009f1e:	bf00      	nop
 8009f20:	3770      	adds	r7, #112	; 0x70
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <chap_init>:
};

/*
 * chap_init - reset to initial state.
 */
static void chap_init(ppp_pcb *pcb) {
 8009f26:	b480      	push	{r7}
 8009f28:	b083      	sub	sp, #12
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
	memset(&pcb->chap_client, 0, sizeof(chap_client_state));
#if PPP_SERVER
	memset(&pcb->chap_server, 0, sizeof(chap_server_state));
#endif /* PPP_SERVER */
#endif /* 0 */
}
 8009f2e:	bf00      	nop
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <chap_lowerup>:

/*
 * chap_lowerup - we can start doing stuff now.
 */
static void chap_lowerup(ppp_pcb *pcb) {
 8009f3a:	b480      	push	{r7}
 8009f3c:	b083      	sub	sp, #12
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]

	pcb->chap_client.flags |= LOWERUP;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f48:	f043 0301 	orr.w	r3, r3, #1
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#if PPP_SERVER
	pcb->chap_server.flags |= LOWERUP;
	if (pcb->chap_server.flags & AUTH_STARTED)
		chap_timeout(pcb);
#endif /* PPP_SERVER */
}
 8009f54:	bf00      	nop
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <chap_lowerdown>:

static void chap_lowerdown(ppp_pcb *pcb) {
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]

	pcb->chap_client.flags = 0;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#if PPP_SERVER
	if (pcb->chap_server.flags & TIMEOUT_PENDING)
		UNTIMEOUT(chap_timeout, pcb);
	pcb->chap_server.flags = 0;
#endif /* PPP_SERVER */
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <chap_auth_with_peer>:

/*
 * chap_auth_with_peer - Prepare to authenticate ourselves to the peer.
 * There isn't much to do until we receive a challenge.
 */
void chap_auth_with_peer(ppp_pcb *pcb, const char *our_name, int digest_code) {
 8009f7c:	b480      	push	{r7}
 8009f7e:	b087      	sub	sp, #28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
	const struct chap_digest_type *dp;
	int i;

	if(NULL == our_name)
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d02b      	beq.n	8009fe6 <chap_auth_with_peer+0x6a>
		return;

	if (pcb->chap_client.flags & AUTH_STARTED) {
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f94:	f003 0302 	and.w	r3, r3, #2
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d126      	bne.n	8009fea <chap_auth_with_peer+0x6e>
		ppp_error(("CHAP: authentication with peer already started!"));
		return;
	}
	for (i = 0; (dp = chap_digests[i]) != NULL; ++i)
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	617b      	str	r3, [r7, #20]
 8009fa0:	e007      	b.n	8009fb2 <chap_auth_with_peer+0x36>
		if (dp->code == digest_code)
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d00b      	beq.n	8009fc4 <chap_auth_with_peer+0x48>
	for (i = 0; (dp = chap_digests[i]) != NULL; ++i)
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	617b      	str	r3, [r7, #20]
 8009fb2:	4a11      	ldr	r2, [pc, #68]	; (8009ff8 <chap_auth_with_peer+0x7c>)
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fba:	613b      	str	r3, [r7, #16]
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1ef      	bne.n	8009fa2 <chap_auth_with_peer+0x26>
 8009fc2:	e000      	b.n	8009fc6 <chap_auth_with_peer+0x4a>
			break;
 8009fc4:	bf00      	nop

	if (dp == NULL)
		ppp_fatal(("CHAP digest 0x%x requested but not available",
		      digest_code));

	pcb->chap_client.digest = dp;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	64da      	str	r2, [r3, #76]	; 0x4c
	pcb->chap_client.name = our_name;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	649a      	str	r2, [r3, #72]	; 0x48
	pcb->chap_client.flags |= AUTH_STARTED;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fd8:	f043 0302 	orr.w	r3, r3, #2
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fe4:	e002      	b.n	8009fec <chap_auth_with_peer+0x70>
		return;
 8009fe6:	bf00      	nop
 8009fe8:	e000      	b.n	8009fec <chap_auth_with_peer+0x70>
		return;
 8009fea:	bf00      	nop
}
 8009fec:	371c      	adds	r7, #28
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	08015b2c 	.word	0x08015b2c

08009ffc <chap_respond>:

/*
 * chap_respond - Generate and send a response to a challenge.
 */
static void chap_respond(ppp_pcb *pcb, int id,
	     unsigned char *pkt, int len) {
 8009ffc:	b5b0      	push	{r4, r5, r7, lr}
 8009ffe:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 800a002:	af04      	add	r7, sp, #16
 800a004:	f107 040c 	add.w	r4, r7, #12
 800a008:	6020      	str	r0, [r4, #0]
 800a00a:	f107 0008 	add.w	r0, r7, #8
 800a00e:	6001      	str	r1, [r0, #0]
 800a010:	1d39      	adds	r1, r7, #4
 800a012:	600a      	str	r2, [r1, #0]
 800a014:	463a      	mov	r2, r7
 800a016:	6013      	str	r3, [r2, #0]
	struct pbuf *p;
	u_char *outp;
	char rname[MAXNAMELEN+1];
	char secret[MAXSECRETLEN+1];

	p = pbuf_alloc(PBUF_RAW, (u16_t)(RESP_MAX_PKTLEN), PBUF_RAM);
 800a018:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a01c:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800a020:	2000      	movs	r0, #0
 800a022:	f7f9 f981 	bl	8003328 <pbuf_alloc>
 800a026:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
	if(NULL == p)
 800a02a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f000 8105 	beq.w	800a23e <chap_respond+0x242>
		return;
	if(p->tot_len != p->len) {
 800a034:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800a038:	891a      	ldrh	r2, [r3, #8]
 800a03a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800a03e:	895b      	ldrh	r3, [r3, #10]
 800a040:	429a      	cmp	r2, r3
 800a042:	d004      	beq.n	800a04e <chap_respond+0x52>
		pbuf_free(p);
 800a044:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 800a048:	f7f9 fc0c 	bl	8003864 <pbuf_free>
		return;
 800a04c:	e0fc      	b.n	800a248 <chap_respond+0x24c>
	}

	if ((pcb->chap_client.flags & (LOWERUP | AUTH_STARTED)) != (LOWERUP | AUTH_STARTED))
 800a04e:	f107 030c 	add.w	r3, r7, #12
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a058:	f003 0303 	and.w	r3, r3, #3
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	f040 80f0 	bne.w	800a242 <chap_respond+0x246>
		return;		/* not ready */
	if (len < 2 || len < pkt[0] + 1)
 800a062:	463b      	mov	r3, r7
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b01      	cmp	r3, #1
 800a068:	f340 80ed 	ble.w	800a246 <chap_respond+0x24a>
 800a06c:	1d3b      	adds	r3, r7, #4
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	1c5a      	adds	r2, r3, #1
 800a074:	463b      	mov	r3, r7
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	429a      	cmp	r2, r3
 800a07a:	f300 80e4 	bgt.w	800a246 <chap_respond+0x24a>
		return;		/* too short */
	clen = pkt[0];
 800a07e:	1d3b      	adds	r3, r7, #4
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	nlen = len - (clen + 1);
 800a088:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800a08c:	3301      	adds	r3, #1
 800a08e:	463a      	mov	r2, r7
 800a090:	6812      	ldr	r2, [r2, #0]
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

	/* Null terminate and clean remote name. */
	ppp_slprintf(rname, sizeof(rname), "%.*v", nlen, pkt + clen + 1);
 800a098:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800a09c:	3301      	adds	r3, #1
 800a09e:	1d3a      	adds	r2, r7, #4
 800a0a0:	6812      	ldr	r2, [r2, #0]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800a0ae:	4a68      	ldr	r2, [pc, #416]	; (800a250 <chap_respond+0x254>)
 800a0b0:	f240 1101 	movw	r1, #257	; 0x101
 800a0b4:	f007 f9f0 	bl	8011498 <ppp_slprintf>
	if (pcb->settings.explicit_remote || (pcb->settings.remote_name[0] != 0 && rname[0] == 0))
		strlcpy(rname, pcb->settings.remote_name, sizeof(rname));
#endif /* PPP_REMOTENAME */

	/* get secret for authenticating ourselves with the specified host */
	if (!get_secret(pcb, pcb->chap_client.name, rname, secret, &secret_len, 0)) {
 800a0b8:	f107 030c 	add.w	r3, r7, #12
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800a0c0:	f107 0414 	add.w	r4, r7, #20
 800a0c4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800a0c8:	f107 000c 	add.w	r0, r7, #12
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	9301      	str	r3, [sp, #4]
 800a0d0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	4623      	mov	r3, r4
 800a0d8:	6800      	ldr	r0, [r0, #0]
 800a0da:	f7ff fead 	bl	8009e38 <get_secret>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d102      	bne.n	800a0ea <chap_respond+0xee>
		secret_len = 0;	/* assume null secret if can't find one */
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
		ppp_warn(("No CHAP secret found for authenticating us to %q", rname));
	}

	outp = (u_char*)p->payload;
 800a0ea:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	MAKEHEADER(outp, PPP_CHAP);
 800a0f4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a0f8:	1c5a      	adds	r2, r3, #1
 800a0fa:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 800a0fe:	22ff      	movs	r2, #255	; 0xff
 800a100:	701a      	strb	r2, [r3, #0]
 800a102:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a106:	1c5a      	adds	r2, r3, #1
 800a108:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 800a10c:	2203      	movs	r2, #3
 800a10e:	701a      	strb	r2, [r3, #0]
 800a110:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a114:	1c5a      	adds	r2, r3, #1
 800a116:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 800a11a:	22c2      	movs	r2, #194	; 0xc2
 800a11c:	701a      	strb	r2, [r3, #0]
 800a11e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a122:	1c5a      	adds	r2, r3, #1
 800a124:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 800a128:	2223      	movs	r2, #35	; 0x23
 800a12a:	701a      	strb	r2, [r3, #0]
	outp += CHAP_HDRLEN;
 800a12c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a130:	3304      	adds	r3, #4
 800a132:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220

	pcb->chap_client.digest->make_response(pcb, outp, id, pcb->chap_client.name, pkt,
 800a136:	f107 030c 	add.w	r3, r7, #12
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a13e:	685c      	ldr	r4, [r3, #4]
 800a140:	f107 030c 	add.w	r3, r7, #12
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800a148:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
				  secret, secret_len, pcb->chap_client.priv);
 800a14c:	f107 020c 	add.w	r2, r7, #12
 800a150:	6812      	ldr	r2, [r2, #0]
 800a152:	f102 0150 	add.w	r1, r2, #80	; 0x50
	pcb->chap_client.digest->make_response(pcb, outp, id, pcb->chap_client.name, pkt,
 800a156:	f107 0208 	add.w	r2, r7, #8
 800a15a:	f107 000c 	add.w	r0, r7, #12
 800a15e:	9103      	str	r1, [sp, #12]
 800a160:	9302      	str	r3, [sp, #8]
 800a162:	f107 0314 	add.w	r3, r7, #20
 800a166:	9301      	str	r3, [sp, #4]
 800a168:	1d3b      	adds	r3, r7, #4
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	462b      	mov	r3, r5
 800a170:	6812      	ldr	r2, [r2, #0]
 800a172:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 800a176:	6800      	ldr	r0, [r0, #0]
 800a178:	47a0      	blx	r4
	memset(secret, 0, secret_len);
 800a17a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800a17e:	461a      	mov	r2, r3
 800a180:	f107 0314 	add.w	r3, r7, #20
 800a184:	2100      	movs	r1, #0
 800a186:	4618      	mov	r0, r3
 800a188:	f008 fafd 	bl	8012786 <memset>

	clen = *outp;
 800a18c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	nlen = strlen(pcb->chap_client.name);
 800a196:	f107 030c 	add.w	r3, r7, #12
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7f6 f820 	bl	80001e4 <strlen>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	memcpy(outp + clen + 1, pcb->chap_client.name, nlen);
 800a1aa:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800a1b4:	18d0      	adds	r0, r2, r3
 800a1b6:	f107 030c 	add.w	r3, r7, #12
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1be:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	f008 faba 	bl	801273c <memcpy>

	outp = (u_char*)p->payload + PPP_HDRLEN;
 800a1c8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	len = CHAP_HDRLEN + clen + 1 + nlen;
 800a1d4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800a1d8:	1d59      	adds	r1, r3, #5
 800a1da:	463b      	mov	r3, r7
 800a1dc:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800a1e0:	440a      	add	r2, r1
 800a1e2:	601a      	str	r2, [r3, #0]
	outp[0] = CHAP_RESPONSE;
 800a1e4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a1e8:	2202      	movs	r2, #2
 800a1ea:	701a      	strb	r2, [r3, #0]
	outp[1] = id;
 800a1ec:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	f107 0208 	add.w	r2, r7, #8
 800a1f6:	6812      	ldr	r2, [r2, #0]
 800a1f8:	b2d2      	uxtb	r2, r2
 800a1fa:	701a      	strb	r2, [r3, #0]
	outp[2] = len >> 8;
 800a1fc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a200:	3302      	adds	r3, #2
 800a202:	463a      	mov	r2, r7
 800a204:	6812      	ldr	r2, [r2, #0]
 800a206:	1212      	asrs	r2, r2, #8
 800a208:	b2d2      	uxtb	r2, r2
 800a20a:	701a      	strb	r2, [r3, #0]
	outp[3] = len;
 800a20c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a210:	3303      	adds	r3, #3
 800a212:	463a      	mov	r2, r7
 800a214:	6812      	ldr	r2, [r2, #0]
 800a216:	b2d2      	uxtb	r2, r2
 800a218:	701a      	strb	r2, [r3, #0]

	pbuf_realloc(p, PPP_HDRLEN + len);
 800a21a:	463b      	mov	r3, r7
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	3304      	adds	r3, #4
 800a222:	b29b      	uxth	r3, r3
 800a224:	4619      	mov	r1, r3
 800a226:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 800a22a:	f7f9 f96f 	bl	800350c <pbuf_realloc>
	ppp_write(pcb, p);
 800a22e:	f107 030c 	add.w	r3, r7, #12
 800a232:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 800a236:	6818      	ldr	r0, [r3, #0]
 800a238:	f006 f8e8 	bl	801040c <ppp_write>
 800a23c:	e004      	b.n	800a248 <chap_respond+0x24c>
		return;
 800a23e:	bf00      	nop
 800a240:	e002      	b.n	800a248 <chap_respond+0x24c>
		return;		/* not ready */
 800a242:	bf00      	nop
 800a244:	e000      	b.n	800a248 <chap_respond+0x24c>
		return;		/* too short */
 800a246:	bf00      	nop
}
 800a248:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bdb0      	pop	{r4, r5, r7, pc}
 800a250:	08015650 	.word	0x08015650

0800a254 <chap_handle_status>:

static void chap_handle_status(ppp_pcb *pcb, int code, int id,
		   unsigned char *pkt, int len) {
 800a254:	b590      	push	{r4, r7, lr}
 800a256:	b087      	sub	sp, #28
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
 800a260:	603b      	str	r3, [r7, #0]
	const char *msg = NULL;
 800a262:	2300      	movs	r3, #0
 800a264:	617b      	str	r3, [r7, #20]
	LWIP_UNUSED_ARG(id);

	if ((pcb->chap_client.flags & (AUTH_DONE|AUTH_STARTED|LOWERUP))
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a26c:	f003 0307 	and.w	r3, r3, #7
 800a270:	2b03      	cmp	r3, #3
 800a272:	d14d      	bne.n	800a310 <chap_handle_status+0xbc>
	    != (AUTH_STARTED|LOWERUP))
		return;
	pcb->chap_client.flags |= AUTH_DONE;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a27a:	f043 0304 	orr.w	r3, r3, #4
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	if (code == CHAP_SUCCESS) {
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d116      	bne.n	800a2ba <chap_handle_status+0x66>
		/* used for MS-CHAP v2 mutual auth, yuck */
		if (pcb->chap_client.digest->check_success != NULL) {
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00e      	beq.n	800a2b4 <chap_handle_status+0x60>
			if (!(*pcb->chap_client.digest->check_success)(pcb, pkt, len, pcb->chap_client.priv))
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a29a:	689c      	ldr	r4, [r3, #8]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	3350      	adds	r3, #80	; 0x50
 800a2a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	47a0      	blx	r4
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d114      	bne.n	800a2d8 <chap_handle_status+0x84>
				code = CHAP_FAILURE;
 800a2ae:	2304      	movs	r3, #4
 800a2b0:	60bb      	str	r3, [r7, #8]
 800a2b2:	e011      	b.n	800a2d8 <chap_handle_status+0x84>
		} else
			msg = "CHAP authentication succeeded";
 800a2b4:	4b18      	ldr	r3, [pc, #96]	; (800a318 <chap_handle_status+0xc4>)
 800a2b6:	617b      	str	r3, [r7, #20]
 800a2b8:	e00e      	b.n	800a2d8 <chap_handle_status+0x84>
	} else {
		if (pcb->chap_client.digest->handle_failure != NULL)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d007      	beq.n	800a2d4 <chap_handle_status+0x80>
			(*pcb->chap_client.digest->handle_failure)(pcb, pkt, len);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	4798      	blx	r3
 800a2d2:	e001      	b.n	800a2d8 <chap_handle_status+0x84>
		else
			msg = "CHAP authentication failed";
 800a2d4:	4b11      	ldr	r3, [pc, #68]	; (800a31c <chap_handle_status+0xc8>)
 800a2d6:	617b      	str	r3, [r7, #20]
		if (len > 0)
			ppp_info(("%s: %.*v", msg, len, pkt));
		else
			ppp_info(("%s", msg));
	}
	if (code == CHAP_SUCCESS)
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	2b03      	cmp	r3, #3
 800a2dc:	d109      	bne.n	800a2f2 <chap_handle_status+0x9e>
		auth_withpeer_success(pcb, PPP_CHAP, pcb->chap_client.digest->code);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	f24c 2123 	movw	r1, #49699	; 0xc223
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f7ff fd06 	bl	8009cfc <auth_withpeer_success>
 800a2f0:	e00f      	b.n	800a312 <chap_handle_status+0xbe>
	else {
		pcb->chap_client.flags |= AUTH_FAILED;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2f8:	f043 0308 	orr.w	r3, r3, #8
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		ppp_error(("CHAP authentication failed"));
		auth_withpeer_fail(pcb, PPP_CHAP);
 800a304:	f24c 2123 	movw	r1, #49699	; 0xc223
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f7ff fce3 	bl	8009cd4 <auth_withpeer_fail>
 800a30e:	e000      	b.n	800a312 <chap_handle_status+0xbe>
		return;
 800a310:	bf00      	nop
	}
}
 800a312:	371c      	adds	r7, #28
 800a314:	46bd      	mov	sp, r7
 800a316:	bd90      	pop	{r4, r7, pc}
 800a318:	08015658 	.word	0x08015658
 800a31c:	08015678 	.word	0x08015678

0800a320 <chap_input>:

static void chap_input(ppp_pcb *pcb, unsigned char *pkt, int pktlen) {
 800a320:	b580      	push	{r7, lr}
 800a322:	b088      	sub	sp, #32
 800a324:	af02      	add	r7, sp, #8
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
	unsigned char code, id;
	int len;

	if (pktlen < CHAP_HDRLEN)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b03      	cmp	r3, #3
 800a330:	dd3a      	ble.n	800a3a8 <chap_input+0x88>
		return;
	GETCHAR(code, pkt);
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	1c5a      	adds	r2, r3, #1
 800a336:	60ba      	str	r2, [r7, #8]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	75fb      	strb	r3, [r7, #23]
	GETCHAR(id, pkt);
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	1c5a      	adds	r2, r3, #1
 800a340:	60ba      	str	r2, [r7, #8]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	75bb      	strb	r3, [r7, #22]
	GETSHORT(len, pkt);
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	60ba      	str	r2, [r7, #8]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	021b      	lsls	r3, r3, #8
 800a350:	613b      	str	r3, [r7, #16]
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	1c5a      	adds	r2, r3, #1
 800a356:	60ba      	str	r2, [r7, #8]
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	461a      	mov	r2, r3
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	4313      	orrs	r3, r2
 800a360:	613b      	str	r3, [r7, #16]
	if (len < CHAP_HDRLEN || len > pktlen)
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	2b03      	cmp	r3, #3
 800a366:	dd21      	ble.n	800a3ac <chap_input+0x8c>
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	dc1d      	bgt.n	800a3ac <chap_input+0x8c>
		return;
	len -= CHAP_HDRLEN;
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	3b04      	subs	r3, #4
 800a374:	613b      	str	r3, [r7, #16]

	switch (code) {
 800a376:	7dfb      	ldrb	r3, [r7, #23]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d005      	beq.n	800a388 <chap_input+0x68>
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	db17      	blt.n	800a3b0 <chap_input+0x90>
 800a380:	3b03      	subs	r3, #3
 800a382:	2b01      	cmp	r3, #1
 800a384:	d814      	bhi.n	800a3b0 <chap_input+0x90>
 800a386:	e006      	b.n	800a396 <chap_input+0x76>
	case CHAP_CHALLENGE:
		chap_respond(pcb, id, pkt, len);
 800a388:	7db9      	ldrb	r1, [r7, #22]
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f7ff fe34 	bl	8009ffc <chap_respond>
		break;
 800a394:	e00d      	b.n	800a3b2 <chap_input+0x92>
		chap_handle_response(pcb, id, pkt, len);
		break;
#endif /* PPP_SERVER */
	case CHAP_FAILURE:
	case CHAP_SUCCESS:
		chap_handle_status(pcb, code, id, pkt, len);
 800a396:	7df9      	ldrb	r1, [r7, #23]
 800a398:	7dba      	ldrb	r2, [r7, #22]
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f7ff ff57 	bl	800a254 <chap_handle_status>
		break;
 800a3a6:	e004      	b.n	800a3b2 <chap_input+0x92>
		return;
 800a3a8:	bf00      	nop
 800a3aa:	e002      	b.n	800a3b2 <chap_input+0x92>
		return;
 800a3ac:	bf00      	nop
 800a3ae:	e000      	b.n	800a3b2 <chap_input+0x92>
	default:
		break;
 800a3b0:	bf00      	nop
	}
}
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <chap_protrej>:

static void chap_protrej(ppp_pcb *pcb) {
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
	if (pcb->chap_server.flags & AUTH_STARTED) {
		pcb->chap_server.flags = 0;
		auth_peer_fail(pcb, PPP_CHAP);
	}
#endif /* PPP_SERVER */
	if ((pcb->chap_client.flags & (AUTH_STARTED|AUTH_DONE)) == AUTH_STARTED) {
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3c6:	f003 0306 	and.w	r3, r3, #6
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d10d      	bne.n	800a3ea <chap_protrej+0x32>
		pcb->chap_client.flags &= ~AUTH_STARTED;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3d4:	f023 0302 	bic.w	r3, r3, #2
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		ppp_error(("CHAP authentication failed due to protocol-reject"));
		auth_withpeer_fail(pcb, PPP_CHAP);
 800a3e0:	f24c 2123 	movw	r1, #49699	; 0xc223
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7ff fc75 	bl	8009cd4 <auth_withpeer_fail>
	}
}
 800a3ea:	bf00      	nop
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <fsm_init>:
/*
 * fsm_init - Initialize fsm.
 *
 * Initialize fsm state.
 */
void fsm_init(fsm *f) {
 800a3f2:	b480      	push	{r7}
 800a3f4:	b085      	sub	sp, #20
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	60fb      	str	r3, [r7, #12]
    f->state = PPP_FSM_INITIAL;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	741a      	strb	r2, [r3, #16]
    f->flags = 0;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	745a      	strb	r2, [r3, #17]
    f->id = 0;				/* XXX Start with random id? */
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	749a      	strb	r2, [r3, #18]
    f->maxnakloops = pcb->settings.fsm_max_nak_loops;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	7c5a      	ldrb	r2, [r3, #17]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	75da      	strb	r2, [r3, #23]
    f->term_reason_len = 0;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	761a      	strb	r2, [r3, #24]
}
 800a420:	bf00      	nop
 800a422:	3714      	adds	r7, #20
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <fsm_lowerup>:


/*
 * fsm_lowerup - The lower layer is up.
 */
void fsm_lowerup(fsm *f) {
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	7c1b      	ldrb	r3, [r3, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d002      	beq.n	800a442 <fsm_lowerup+0x16>
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d004      	beq.n	800a44a <fsm_lowerup+0x1e>

    default:
	FSMDEBUG(("%s: Up event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800a440:	e015      	b.n	800a46e <fsm_lowerup+0x42>
	f->state = PPP_FSM_CLOSED;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2202      	movs	r2, #2
 800a446:	741a      	strb	r2, [r3, #16]
	break;
 800a448:	e011      	b.n	800a46e <fsm_lowerup+0x42>
	if( f->flags & OPT_SILENT )
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	7c5b      	ldrb	r3, [r3, #17]
 800a44e:	f003 0304 	and.w	r3, r3, #4
 800a452:	2b00      	cmp	r3, #0
 800a454:	d003      	beq.n	800a45e <fsm_lowerup+0x32>
	    f->state = PPP_FSM_STOPPED;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2203      	movs	r2, #3
 800a45a:	741a      	strb	r2, [r3, #16]
	break;
 800a45c:	e006      	b.n	800a46c <fsm_lowerup+0x40>
	    fsm_sconfreq(f, 0);
 800a45e:	2100      	movs	r1, #0
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 fdb3 	bl	800afcc <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2206      	movs	r2, #6
 800a46a:	741a      	strb	r2, [r3, #16]
	break;
 800a46c:	bf00      	nop
}
 800a46e:	bf00      	nop
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
	...

0800a478 <fsm_lowerdown>:
/*
 * fsm_lowerdown - The lower layer is down.
 *
 * Cancel all timeouts and inform upper layers.
 */
void fsm_lowerdown(fsm *f) {
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	7c1b      	ldrb	r3, [r3, #16]
 800a484:	3b02      	subs	r3, #2
 800a486:	2b07      	cmp	r3, #7
 800a488:	d843      	bhi.n	800a512 <fsm_lowerdown+0x9a>
 800a48a:	a201      	add	r2, pc, #4	; (adr r2, 800a490 <fsm_lowerdown+0x18>)
 800a48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a490:	0800a4b1 	.word	0x0800a4b1
 800a494:	0800a4b9 	.word	0x0800a4b9
 800a498:	0800a4d5 	.word	0x0800a4d5
 800a49c:	0800a4e5 	.word	0x0800a4e5
 800a4a0:	0800a4e5 	.word	0x0800a4e5
 800a4a4:	0800a4e5 	.word	0x0800a4e5
 800a4a8:	0800a4e5 	.word	0x0800a4e5
 800a4ac:	0800a4f5 	.word	0x0800a4f5
    case PPP_FSM_CLOSED:
	f->state = PPP_FSM_INITIAL;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	741a      	strb	r2, [r3, #16]
	break;
 800a4b6:	e02c      	b.n	800a512 <fsm_lowerdown+0x9a>

    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_STARTING;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->starting )
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d023      	beq.n	800a510 <fsm_lowerdown+0x98>
	    (*f->callbacks->starting)(f);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	4798      	blx	r3
	break;
 800a4d2:	e01d      	b.n	800a510 <fsm_lowerdown+0x98>

    case PPP_FSM_CLOSING:
	f->state = PPP_FSM_INITIAL;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	741a      	strb	r2, [r3, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800a4da:	6879      	ldr	r1, [r7, #4]
 800a4dc:	480f      	ldr	r0, [pc, #60]	; (800a51c <fsm_lowerdown+0xa4>)
 800a4de:	f7ff fa1f 	bl	8009920 <sys_untimeout>
	break;
 800a4e2:	e016      	b.n	800a512 <fsm_lowerdown+0x9a>

    case PPP_FSM_STOPPING:
    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	f->state = PPP_FSM_STARTING;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	741a      	strb	r2, [r3, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800a4ea:	6879      	ldr	r1, [r7, #4]
 800a4ec:	480b      	ldr	r0, [pc, #44]	; (800a51c <fsm_lowerdown+0xa4>)
 800a4ee:	f7ff fa17 	bl	8009920 <sys_untimeout>
	break;
 800a4f2:	e00e      	b.n	800a512 <fsm_lowerdown+0x9a>

    case PPP_FSM_OPENED:
	if( f->callbacks->down )
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d004      	beq.n	800a508 <fsm_lowerdown+0x90>
	    (*f->callbacks->down)(f);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	6a1b      	ldr	r3, [r3, #32]
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	4798      	blx	r3
	f->state = PPP_FSM_STARTING;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	741a      	strb	r2, [r3, #16]
	break;
 800a50e:	e000      	b.n	800a512 <fsm_lowerdown+0x9a>
	break;
 800a510:	bf00      	nop

    default:
	FSMDEBUG(("%s: Down event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800a512:	bf00      	nop
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	0800a749 	.word	0x0800a749

0800a520 <fsm_open>:


/*
 * fsm_open - Link is allowed to come up.
 */
void fsm_open(fsm *f) {
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	7c1b      	ldrb	r3, [r3, #16]
 800a52c:	2b09      	cmp	r3, #9
 800a52e:	d847      	bhi.n	800a5c0 <fsm_open+0xa0>
 800a530:	a201      	add	r2, pc, #4	; (adr r2, 800a538 <fsm_open+0x18>)
 800a532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a536:	bf00      	nop
 800a538:	0800a561 	.word	0x0800a561
 800a53c:	0800a5c1 	.word	0x0800a5c1
 800a540:	0800a57d 	.word	0x0800a57d
 800a544:	0800a5a7 	.word	0x0800a5a7
 800a548:	0800a5a1 	.word	0x0800a5a1
 800a54c:	0800a5c1 	.word	0x0800a5c1
 800a550:	0800a5c1 	.word	0x0800a5c1
 800a554:	0800a5c1 	.word	0x0800a5c1
 800a558:	0800a5c1 	.word	0x0800a5c1
 800a55c:	0800a5a7 	.word	0x0800a5a7
    case PPP_FSM_INITIAL:
	f->state = PPP_FSM_STARTING;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->starting )
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d029      	beq.n	800a5c4 <fsm_open+0xa4>
	    (*f->callbacks->starting)(f);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	4798      	blx	r3
	break;
 800a57a:	e023      	b.n	800a5c4 <fsm_open+0xa4>

    case PPP_FSM_CLOSED:
	if( f->flags & OPT_SILENT )
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	7c5b      	ldrb	r3, [r3, #17]
 800a580:	f003 0304 	and.w	r3, r3, #4
 800a584:	2b00      	cmp	r3, #0
 800a586:	d003      	beq.n	800a590 <fsm_open+0x70>
	    f->state = PPP_FSM_STOPPED;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2203      	movs	r2, #3
 800a58c:	741a      	strb	r2, [r3, #16]
	else {
	    /* Send an initial configure-request */
	    fsm_sconfreq(f, 0);
	    f->state = PPP_FSM_REQSENT;
	}
	break;
 800a58e:	e01c      	b.n	800a5ca <fsm_open+0xaa>
	    fsm_sconfreq(f, 0);
 800a590:	2100      	movs	r1, #0
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 fd1a 	bl	800afcc <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2206      	movs	r2, #6
 800a59c:	741a      	strb	r2, [r3, #16]
	break;
 800a59e:	e014      	b.n	800a5ca <fsm_open+0xaa>

    case PPP_FSM_CLOSING:
	f->state = PPP_FSM_STOPPING;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2205      	movs	r2, #5
 800a5a4:	741a      	strb	r2, [r3, #16]
	/* fall through */
	/* no break */
    case PPP_FSM_STOPPED:
    case PPP_FSM_OPENED:
	if( f->flags & OPT_RESTART ){
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	7c5b      	ldrb	r3, [r3, #17]
 800a5aa:	f003 0302 	and.w	r3, r3, #2
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00a      	beq.n	800a5c8 <fsm_open+0xa8>
	    fsm_lowerdown(f);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f7ff ff60 	bl	800a478 <fsm_lowerdown>
	    fsm_lowerup(f);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f7ff ff37 	bl	800a42c <fsm_lowerup>
	}
	break;
 800a5be:	e003      	b.n	800a5c8 <fsm_open+0xa8>
    default:
	break;
 800a5c0:	bf00      	nop
 800a5c2:	e002      	b.n	800a5ca <fsm_open+0xaa>
	break;
 800a5c4:	bf00      	nop
 800a5c6:	e000      	b.n	800a5ca <fsm_open+0xaa>
	break;
 800a5c8:	bf00      	nop
    }
}
 800a5ca:	bf00      	nop
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop

0800a5d4 <terminate_layer>:
 * terminate_layer - Start process of shutting down the FSM
 *
 * Cancel any timeout running, notify upper layers we're done, and
 * send a terminate-request message as configured.
 */
static void terminate_layer(fsm *f, int nextstate) {
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af02      	add	r7, sp, #8
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	60fb      	str	r3, [r7, #12]

    if( f->state != PPP_FSM_OPENED )
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	7c1b      	ldrb	r3, [r3, #16]
 800a5e8:	2b09      	cmp	r3, #9
 800a5ea:	d004      	beq.n	800a5f6 <terminate_layer+0x22>
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800a5ec:	6879      	ldr	r1, [r7, #4]
 800a5ee:	482f      	ldr	r0, [pc, #188]	; (800a6ac <terminate_layer+0xd8>)
 800a5f0:	f7ff f996 	bl	8009920 <sys_untimeout>
 800a5f4:	e009      	b.n	800a60a <terminate_layer+0x36>
    else if( f->callbacks->down )
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	6a1b      	ldr	r3, [r3, #32]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d004      	beq.n	800a60a <terminate_layer+0x36>
	(*f->callbacks->down)(f);	/* Inform upper layers we're down */
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	4798      	blx	r3

    /* Init restart counter and send Terminate-Request */
    f->retransmits = pcb->settings.fsm_max_term_transmits;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	7c1a      	ldrb	r2, [r3, #16]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	751a      	strb	r2, [r3, #20]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	7c9b      	ldrb	r3, [r3, #18]
 800a616:	3301      	adds	r3, #1
 800a618:	b2da      	uxtb	r2, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	749a      	strb	r2, [r3, #18]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	7c9a      	ldrb	r2, [r3, #18]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	74da      	strb	r2, [r3, #19]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	7cda      	ldrb	r2, [r3, #19]
	      (const u_char *) f->term_reason, f->term_reason_len);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6899      	ldr	r1, [r3, #8]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	7e1b      	ldrb	r3, [r3, #24]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	460b      	mov	r3, r1
 800a636:	2105      	movs	r1, #5
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 fdb5 	bl	800b1a8 <fsm_sdata>

    if (f->retransmits == 0) {
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	7d1b      	ldrb	r3, [r3, #20]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d112      	bne.n	800a66c <terminate_layer+0x98>
	/*
	 * User asked for no terminate requests at all; just close it.
	 * We've already fired off one Terminate-Request just to be nice
	 * to the peer, but we're not going to wait for a reply.
	 */
	f->state = nextstate == PPP_FSM_CLOSING ? PPP_FSM_CLOSED : PPP_FSM_STOPPED;
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	2b04      	cmp	r3, #4
 800a64a:	d101      	bne.n	800a650 <terminate_layer+0x7c>
 800a64c:	2202      	movs	r2, #2
 800a64e:	e000      	b.n	800a652 <terminate_layer+0x7e>
 800a650:	2203      	movs	r2, #3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d020      	beq.n	800a6a2 <terminate_layer+0xce>
	    (*f->callbacks->finished)(f);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	4798      	blx	r3
	return;
 800a66a:	e01a      	b.n	800a6a2 <terminate_layer+0xce>
    }

    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800a66c:	6879      	ldr	r1, [r7, #4]
 800a66e:	480f      	ldr	r0, [pc, #60]	; (800a6ac <terminate_layer+0xd8>)
 800a670:	f7ff f956 	bl	8009920 <sys_untimeout>
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	7b9b      	ldrb	r3, [r3, #14]
 800a678:	461a      	mov	r2, r3
 800a67a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a67e:	fb03 f302 	mul.w	r3, r3, r2
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	4909      	ldr	r1, [pc, #36]	; (800a6ac <terminate_layer+0xd8>)
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff f91e 	bl	80098c8 <sys_timeout>
    --f->retransmits;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	7d1b      	ldrb	r3, [r3, #20]
 800a690:	3b01      	subs	r3, #1
 800a692:	b2da      	uxtb	r2, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	751a      	strb	r2, [r3, #20]

    f->state = nextstate;
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	b2da      	uxtb	r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	741a      	strb	r2, [r3, #16]
 800a6a0:	e000      	b.n	800a6a4 <terminate_layer+0xd0>
	return;
 800a6a2:	bf00      	nop
}
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	0800a749 	.word	0x0800a749

0800a6b0 <fsm_close>:
 * fsm_close - Start closing connection.
 *
 * Cancel timeouts and either initiate close or possibly go directly to
 * the PPP_FSM_CLOSED state.
 */
void fsm_close(fsm *f, const char *reason) {
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
    f->term_reason = reason;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	609a      	str	r2, [r3, #8]
    f->term_reason_len = (reason == NULL? 0: (u8_t)LWIP_MIN(strlen(reason), 0xFF) );
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00d      	beq.n	800a6e2 <fsm_close+0x32>
 800a6c6:	6838      	ldr	r0, [r7, #0]
 800a6c8:	f7f5 fd8c 	bl	80001e4 <strlen>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2bfe      	cmp	r3, #254	; 0xfe
 800a6d0:	d805      	bhi.n	800a6de <fsm_close+0x2e>
 800a6d2:	6838      	ldr	r0, [r7, #0]
 800a6d4:	f7f5 fd86 	bl	80001e4 <strlen>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	e002      	b.n	800a6e4 <fsm_close+0x34>
 800a6de:	23ff      	movs	r3, #255	; 0xff
 800a6e0:	e000      	b.n	800a6e4 <fsm_close+0x34>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	7613      	strb	r3, [r2, #24]
    switch( f->state ){
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	7c1b      	ldrb	r3, [r3, #16]
 800a6ec:	3b01      	subs	r3, #1
 800a6ee:	2b08      	cmp	r3, #8
 800a6f0:	d825      	bhi.n	800a73e <fsm_close+0x8e>
 800a6f2:	a201      	add	r2, pc, #4	; (adr r2, 800a6f8 <fsm_close+0x48>)
 800a6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f8:	0800a71d 	.word	0x0800a71d
 800a6fc:	0800a73f 	.word	0x0800a73f
 800a700:	0800a725 	.word	0x0800a725
 800a704:	0800a73f 	.word	0x0800a73f
 800a708:	0800a72d 	.word	0x0800a72d
 800a70c:	0800a735 	.word	0x0800a735
 800a710:	0800a735 	.word	0x0800a735
 800a714:	0800a735 	.word	0x0800a735
 800a718:	0800a735 	.word	0x0800a735
    case PPP_FSM_STARTING:
	f->state = PPP_FSM_INITIAL;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	741a      	strb	r2, [r3, #16]
	break;
 800a722:	e00d      	b.n	800a740 <fsm_close+0x90>
    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_CLOSED;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2202      	movs	r2, #2
 800a728:	741a      	strb	r2, [r3, #16]
	break;
 800a72a:	e009      	b.n	800a740 <fsm_close+0x90>
    case PPP_FSM_STOPPING:
	f->state = PPP_FSM_CLOSING;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2204      	movs	r2, #4
 800a730:	741a      	strb	r2, [r3, #16]
	break;
 800a732:	e005      	b.n	800a740 <fsm_close+0x90>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
    case PPP_FSM_OPENED:
	terminate_layer(f, PPP_FSM_CLOSING);
 800a734:	2104      	movs	r1, #4
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f7ff ff4c 	bl	800a5d4 <terminate_layer>
	break;
 800a73c:	e000      	b.n	800a740 <fsm_close+0x90>
    default:
	break;
 800a73e:	bf00      	nop
    }
}
 800a740:	bf00      	nop
 800a742:	3708      	adds	r7, #8
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <fsm_timeout>:


/*
 * fsm_timeout - Timeout expired.
 */
static void fsm_timeout(void *arg) {
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af02      	add	r7, sp, #8
 800a74e:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm *) arg;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	60fb      	str	r3, [r7, #12]
    ppp_pcb *pcb = f->pcb;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	60bb      	str	r3, [r7, #8]

    switch (f->state) {
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	7c1b      	ldrb	r3, [r3, #16]
 800a75e:	3b04      	subs	r3, #4
 800a760:	2b04      	cmp	r3, #4
 800a762:	f200 8083 	bhi.w	800a86c <fsm_timeout+0x124>
 800a766:	a201      	add	r2, pc, #4	; (adr r2, 800a76c <fsm_timeout+0x24>)
 800a768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a76c:	0800a781 	.word	0x0800a781
 800a770:	0800a781 	.word	0x0800a781
 800a774:	0800a80b 	.word	0x0800a80b
 800a778:	0800a80b 	.word	0x0800a80b
 800a77c:	0800a80b 	.word	0x0800a80b
    case PPP_FSM_CLOSING:
    case PPP_FSM_STOPPING:
	if( f->retransmits <= 0 ){
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	7d1b      	ldrb	r3, [r3, #20]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d113      	bne.n	800a7b0 <fsm_timeout+0x68>
	    /*
	     * We've waited for an ack long enough.  Peer probably heard us.
	     */
	    f->state = (f->state == PPP_FSM_CLOSING)? PPP_FSM_CLOSED: PPP_FSM_STOPPED;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	7c1b      	ldrb	r3, [r3, #16]
 800a78c:	2b04      	cmp	r3, #4
 800a78e:	d101      	bne.n	800a794 <fsm_timeout+0x4c>
 800a790:	2202      	movs	r2, #2
 800a792:	e000      	b.n	800a796 <fsm_timeout+0x4e>
 800a794:	2203      	movs	r2, #3
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	741a      	strb	r2, [r3, #16]
	    if( f->callbacks->finished )
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d060      	beq.n	800a866 <fsm_timeout+0x11e>
		(*f->callbacks->finished)(f);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	4798      	blx	r3
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
		      (const u_char *) f->term_reason, f->term_reason_len);
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
	    --f->retransmits;
	}
	break;
 800a7ae:	e05a      	b.n	800a866 <fsm_timeout+0x11e>
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	7c9b      	ldrb	r3, [r3, #18]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	749a      	strb	r2, [r3, #18]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	7c9a      	ldrb	r2, [r3, #18]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	74da      	strb	r2, [r3, #19]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	7cda      	ldrb	r2, [r3, #19]
		      (const u_char *) f->term_reason, f->term_reason_len);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6899      	ldr	r1, [r3, #8]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	7e1b      	ldrb	r3, [r3, #24]
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	2105      	movs	r1, #5
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	f000 fce6 	bl	800b1a8 <fsm_sdata>
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800a7dc:	68f9      	ldr	r1, [r7, #12]
 800a7de:	4825      	ldr	r0, [pc, #148]	; (800a874 <fsm_timeout+0x12c>)
 800a7e0:	f7ff f89e 	bl	8009920 <sys_untimeout>
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	7b9b      	ldrb	r3, [r3, #14]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a7ee:	fb03 f302 	mul.w	r3, r3, r2
 800a7f2:	68fa      	ldr	r2, [r7, #12]
 800a7f4:	491f      	ldr	r1, [pc, #124]	; (800a874 <fsm_timeout+0x12c>)
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7ff f866 	bl	80098c8 <sys_timeout>
	    --f->retransmits;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	7d1b      	ldrb	r3, [r3, #20]
 800a800:	3b01      	subs	r3, #1
 800a802:	b2da      	uxtb	r2, r3
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	751a      	strb	r2, [r3, #20]
	break;
 800a808:	e02d      	b.n	800a866 <fsm_timeout+0x11e>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	if (f->retransmits <= 0) {
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	7d1b      	ldrb	r3, [r3, #20]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d113      	bne.n	800a83a <fsm_timeout+0xf2>
	    ppp_warn(("%s: timeout sending Config-Requests", PROTO_NAME(f)));
	    f->state = PPP_FSM_STOPPED;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2203      	movs	r2, #3
 800a816:	741a      	strb	r2, [r3, #16]
	    if( (f->flags & OPT_PASSIVE) == 0 && f->callbacks->finished )
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	7c5b      	ldrb	r3, [r3, #17]
 800a81c:	f003 0301 	and.w	r3, r3, #1
 800a820:	2b00      	cmp	r3, #0
 800a822:	d122      	bne.n	800a86a <fsm_timeout+0x122>
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d01d      	beq.n	800a86a <fsm_timeout+0x122>
		(*f->callbacks->finished)(f);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	4798      	blx	r3
		(*f->callbacks->retransmit)(f);
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
	    if( f->state == PPP_FSM_ACKRCVD )
		f->state = PPP_FSM_REQSENT;
	}
	break;
 800a838:	e017      	b.n	800a86a <fsm_timeout+0x122>
	    if (f->callbacks->retransmit)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a840:	2b00      	cmp	r3, #0
 800a842:	d004      	beq.n	800a84e <fsm_timeout+0x106>
		(*f->callbacks->retransmit)(f);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	4798      	blx	r3
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
 800a84e:	2101      	movs	r1, #1
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f000 fbbb 	bl	800afcc <fsm_sconfreq>
	    if( f->state == PPP_FSM_ACKRCVD )
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	7c1b      	ldrb	r3, [r3, #16]
 800a85a:	2b07      	cmp	r3, #7
 800a85c:	d105      	bne.n	800a86a <fsm_timeout+0x122>
		f->state = PPP_FSM_REQSENT;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2206      	movs	r2, #6
 800a862:	741a      	strb	r2, [r3, #16]
	break;
 800a864:	e001      	b.n	800a86a <fsm_timeout+0x122>
	break;
 800a866:	bf00      	nop
 800a868:	e000      	b.n	800a86c <fsm_timeout+0x124>
	break;
 800a86a:	bf00      	nop

    default:
	FSMDEBUG(("%s: Timeout event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800a86c:	bf00      	nop
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	0800a749 	.word	0x0800a749

0800a878 <fsm_input>:


/*
 * fsm_input - Input packet.
 */
void fsm_input(fsm *f, u_char *inpacket, int l) {
 800a878:	b590      	push	{r4, r7, lr}
 800a87a:	b08b      	sub	sp, #44	; 0x2c
 800a87c:	af02      	add	r7, sp, #8
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]

    /*
     * Parse header (code, id and length).
     * If packet too short, drop it.
     */
    inp = inpacket;
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	61fb      	str	r3, [r7, #28]
    if (l < HEADERLEN) {
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2b03      	cmp	r3, #3
 800a88c:	f340 808c 	ble.w	800a9a8 <fsm_input+0x130>
	FSMDEBUG(("fsm_input(%x): Rcvd short header.", f->protocol));
	return;
    }
    GETCHAR(code, inp);
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	1c5a      	adds	r2, r3, #1
 800a894:	61fa      	str	r2, [r7, #28]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	76fb      	strb	r3, [r7, #27]
    GETCHAR(id, inp);
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	1c5a      	adds	r2, r3, #1
 800a89e:	61fa      	str	r2, [r7, #28]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	76bb      	strb	r3, [r7, #26]
    GETSHORT(len, inp);
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	61fa      	str	r2, [r7, #28]
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	021b      	lsls	r3, r3, #8
 800a8ae:	617b      	str	r3, [r7, #20]
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	1c5a      	adds	r2, r3, #1
 800a8b4:	61fa      	str	r2, [r7, #28]
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	617b      	str	r3, [r7, #20]
    if (len < HEADERLEN) {
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	2b03      	cmp	r3, #3
 800a8c4:	dd72      	ble.n	800a9ac <fsm_input+0x134>
	FSMDEBUG(("fsm_input(%x): Rcvd illegal length.", f->protocol));
	return;
    }
    if (len > l) {
 800a8c6:	697a      	ldr	r2, [r7, #20]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	dc70      	bgt.n	800a9b0 <fsm_input+0x138>
	FSMDEBUG(("fsm_input(%x): Rcvd short packet.", f->protocol));
	return;
    }
    len -= HEADERLEN;		/* subtract header length */
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	3b04      	subs	r3, #4
 800a8d2:	617b      	str	r3, [r7, #20]

    if( f->state == PPP_FSM_INITIAL || f->state == PPP_FSM_STARTING ){
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	7c1b      	ldrb	r3, [r3, #16]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d06b      	beq.n	800a9b4 <fsm_input+0x13c>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	7c1b      	ldrb	r3, [r3, #16]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d067      	beq.n	800a9b4 <fsm_input+0x13c>
    }

    /*
     * Action depends on code.
     */
    switch (code) {
 800a8e4:	7efb      	ldrb	r3, [r7, #27]
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	2b06      	cmp	r3, #6
 800a8ea:	d839      	bhi.n	800a960 <fsm_input+0xe8>
 800a8ec:	a201      	add	r2, pc, #4	; (adr r2, 800a8f4 <fsm_input+0x7c>)
 800a8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f2:	bf00      	nop
 800a8f4:	0800a911 	.word	0x0800a911
 800a8f8:	0800a91f 	.word	0x0800a91f
 800a8fc:	0800a92d 	.word	0x0800a92d
 800a900:	0800a92d 	.word	0x0800a92d
 800a904:	0800a93f 	.word	0x0800a93f
 800a908:	0800a94d 	.word	0x0800a94d
 800a90c:	0800a955 	.word	0x0800a955
    case CONFREQ:
	fsm_rconfreq(f, id, inp, len);
 800a910:	7eb9      	ldrb	r1, [r7, #26]
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	69fa      	ldr	r2, [r7, #28]
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f000 f852 	bl	800a9c0 <fsm_rconfreq>
	break;
 800a91c:	e04d      	b.n	800a9ba <fsm_input+0x142>
    
    case CONFACK:
	fsm_rconfack(f, id, inp, len);
 800a91e:	7eb9      	ldrb	r1, [r7, #26]
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	69fa      	ldr	r2, [r7, #28]
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f000 f8f1 	bl	800ab0c <fsm_rconfack>
	break;
 800a92a:	e046      	b.n	800a9ba <fsm_input+0x142>
    
    case CONFNAK:
    case CONFREJ:
	fsm_rconfnakrej(f, code, id, inp, len);
 800a92c:	7ef9      	ldrb	r1, [r7, #27]
 800a92e:	7eba      	ldrb	r2, [r7, #26]
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f000 f988 	bl	800ac4c <fsm_rconfnakrej>
	break;
 800a93c:	e03d      	b.n	800a9ba <fsm_input+0x142>
    
    case TERMREQ:
	fsm_rtermreq(f, id, inp, len);
 800a93e:	7eb9      	ldrb	r1, [r7, #26]
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	69fa      	ldr	r2, [r7, #28]
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f000 fa2b 	bl	800ada0 <fsm_rtermreq>
	break;
 800a94a:	e036      	b.n	800a9ba <fsm_input+0x142>
    
    case TERMACK:
	fsm_rtermack(f);
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f000 fa6f 	bl	800ae30 <fsm_rtermack>
	break;
 800a952:	e032      	b.n	800a9ba <fsm_input+0x142>
    
    case CODEREJ:
	fsm_rcoderej(f, inp, len);
 800a954:	697a      	ldr	r2, [r7, #20]
 800a956:	69f9      	ldr	r1, [r7, #28]
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f000 fac7 	bl	800aeec <fsm_rcoderej>
	break;
 800a95e:	e02c      	b.n	800a9ba <fsm_input+0x142>
    
    default:
	if( !f->callbacks->extcode
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00c      	beq.n	800a984 <fsm_input+0x10c>
	   || !(*f->callbacks->extcode)(f, code, id, inp, len) )
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800a970:	7ef9      	ldrb	r1, [r7, #27]
 800a972:	7eba      	ldrb	r2, [r7, #26]
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	47a0      	blx	r4
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d119      	bne.n	800a9b8 <fsm_input+0x140>
	    fsm_sdata(f, CODEREJ, ++f->id, inpacket, len + HEADERLEN);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	7c9b      	ldrb	r3, [r3, #18]
 800a988:	3301      	adds	r3, #1
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	749a      	strb	r2, [r3, #18]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	7c9a      	ldrb	r2, [r3, #18]
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	3304      	adds	r3, #4
 800a998:	9300      	str	r3, [sp, #0]
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2107      	movs	r1, #7
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f000 fc02 	bl	800b1a8 <fsm_sdata>
	break;
 800a9a4:	bf00      	nop
 800a9a6:	e007      	b.n	800a9b8 <fsm_input+0x140>
	return;
 800a9a8:	bf00      	nop
 800a9aa:	e006      	b.n	800a9ba <fsm_input+0x142>
	return;
 800a9ac:	bf00      	nop
 800a9ae:	e004      	b.n	800a9ba <fsm_input+0x142>
	return;
 800a9b0:	bf00      	nop
 800a9b2:	e002      	b.n	800a9ba <fsm_input+0x142>
	return;
 800a9b4:	bf00      	nop
 800a9b6:	e000      	b.n	800a9ba <fsm_input+0x142>
	break;
 800a9b8:	bf00      	nop
    }
}
 800a9ba:	3724      	adds	r7, #36	; 0x24
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd90      	pop	{r4, r7, pc}

0800a9c0 <fsm_rconfreq>:


/*
 * fsm_rconfreq - Receive Configure-Request.
 */
static void fsm_rconfreq(fsm *f, u_char id, u_char *inp, int len) {
 800a9c0:	b590      	push	{r4, r7, lr}
 800a9c2:	b089      	sub	sp, #36	; 0x24
 800a9c4:	af02      	add	r7, sp, #8
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	607a      	str	r2, [r7, #4]
 800a9ca:	603b      	str	r3, [r7, #0]
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	72fb      	strb	r3, [r7, #11]
    int code, reject_if_disagree;

    switch( f->state ){
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	7c1b      	ldrb	r3, [r3, #16]
 800a9d4:	3b02      	subs	r3, #2
 800a9d6:	2b07      	cmp	r3, #7
 800a9d8:	d835      	bhi.n	800aa46 <fsm_rconfreq+0x86>
 800a9da:	a201      	add	r2, pc, #4	; (adr r2, 800a9e0 <fsm_rconfreq+0x20>)
 800a9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e0:	0800aa01 	.word	0x0800aa01
 800a9e4:	0800aa37 	.word	0x0800aa37
 800a9e8:	0800aaff 	.word	0x0800aaff
 800a9ec:	0800aaff 	.word	0x0800aaff
 800a9f0:	0800aa47 	.word	0x0800aa47
 800a9f4:	0800aa47 	.word	0x0800aa47
 800a9f8:	0800aa47 	.word	0x0800aa47
 800a9fc:	0800aa13 	.word	0x0800aa13
    case PPP_FSM_CLOSED:
	/* Go away, we're closed */
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800aa00:	7afa      	ldrb	r2, [r7, #11]
 800aa02:	2300      	movs	r3, #0
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	2300      	movs	r3, #0
 800aa08:	2106      	movs	r1, #6
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f000 fbcc 	bl	800b1a8 <fsm_sdata>
	return;
 800aa10:	e076      	b.n	800ab00 <fsm_rconfreq+0x140>
    case PPP_FSM_STOPPING:
	return;

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if( f->callbacks->down )
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	6a1b      	ldr	r3, [r3, #32]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d004      	beq.n	800aa26 <fsm_rconfreq+0x66>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800aa26:	2100      	movs	r1, #0
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f000 facf 	bl	800afcc <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2206      	movs	r2, #6
 800aa32:	741a      	strb	r2, [r3, #16]
	break;
 800aa34:	e008      	b.n	800aa48 <fsm_rconfreq+0x88>

    case PPP_FSM_STOPPED:
	/* Negotiation started by our peer */
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800aa36:	2100      	movs	r1, #0
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f000 fac7 	bl	800afcc <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2206      	movs	r2, #6
 800aa42:	741a      	strb	r2, [r3, #16]
	break;
 800aa44:	e000      	b.n	800aa48 <fsm_rconfreq+0x88>
    default:
	break;
 800aa46:	bf00      	nop

    /*
     * Pass the requested configuration options
     * to protocol-specific code for checking.
     */
    if (f->callbacks->reqci){		/* Check CI */
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	699b      	ldr	r3, [r3, #24]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d013      	beq.n	800aa7a <fsm_rconfreq+0xba>
	reject_if_disagree = (f->nakloops >= f->maxnakloops);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	7d5a      	ldrb	r2, [r3, #21]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	7ddb      	ldrb	r3, [r3, #23]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	bf2c      	ite	cs
 800aa5e:	2301      	movcs	r3, #1
 800aa60:	2300      	movcc	r3, #0
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	613b      	str	r3, [r7, #16]
	code = (*f->callbacks->reqci)(f, inp, &len, reject_if_disagree);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	699c      	ldr	r4, [r3, #24]
 800aa6c:	463a      	mov	r2, r7
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	6879      	ldr	r1, [r7, #4]
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	47a0      	blx	r4
 800aa76:	6178      	str	r0, [r7, #20]
 800aa78:	e007      	b.n	800aa8a <fsm_rconfreq+0xca>
    } else if (len)
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d002      	beq.n	800aa86 <fsm_rconfreq+0xc6>
	code = CONFREJ;			/* Reject all CI */
 800aa80:	2304      	movs	r3, #4
 800aa82:	617b      	str	r3, [r7, #20]
 800aa84:	e001      	b.n	800aa8a <fsm_rconfreq+0xca>
    else
	code = CONFACK;
 800aa86:	2302      	movs	r3, #2
 800aa88:	617b      	str	r3, [r7, #20]

    /* send the Ack, Nak or Rej to the peer */
    fsm_sdata(f, code, id, inp, len);
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	b2d9      	uxtb	r1, r3
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	7afa      	ldrb	r2, [r7, #11]
 800aa92:	9300      	str	r3, [sp, #0]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f000 fb86 	bl	800b1a8 <fsm_sdata>

    if (code == CONFACK) {
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d11c      	bne.n	800aadc <fsm_rconfreq+0x11c>
	if (f->state == PPP_FSM_ACKRCVD) {
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	7c1b      	ldrb	r3, [r3, #16]
 800aaa6:	2b07      	cmp	r3, #7
 800aaa8:	d111      	bne.n	800aace <fsm_rconfreq+0x10e>
	    UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800aaaa:	68f9      	ldr	r1, [r7, #12]
 800aaac:	4816      	ldr	r0, [pc, #88]	; (800ab08 <fsm_rconfreq+0x148>)
 800aaae:	f7fe ff37 	bl	8009920 <sys_untimeout>
	    f->state = PPP_FSM_OPENED;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2209      	movs	r2, #9
 800aab6:	741a      	strb	r2, [r3, #16]
	    if (f->callbacks->up)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	69db      	ldr	r3, [r3, #28]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d008      	beq.n	800aad4 <fsm_rconfreq+0x114>
		(*f->callbacks->up)(f);	/* Inform upper layers */
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	69db      	ldr	r3, [r3, #28]
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	4798      	blx	r3
 800aacc:	e002      	b.n	800aad4 <fsm_rconfreq+0x114>
	} else
	    f->state = PPP_FSM_ACKSENT;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2208      	movs	r2, #8
 800aad2:	741a      	strb	r2, [r3, #16]
	f->nakloops = 0;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2200      	movs	r2, #0
 800aad8:	755a      	strb	r2, [r3, #21]
 800aada:	e011      	b.n	800ab00 <fsm_rconfreq+0x140>

    } else {
	/* we sent CONFACK or CONFREJ */
	if (f->state != PPP_FSM_ACKRCVD)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	7c1b      	ldrb	r3, [r3, #16]
 800aae0:	2b07      	cmp	r3, #7
 800aae2:	d002      	beq.n	800aaea <fsm_rconfreq+0x12a>
	    f->state = PPP_FSM_REQSENT;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2206      	movs	r2, #6
 800aae8:	741a      	strb	r2, [r3, #16]
	if( code == CONFNAK )
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	2b03      	cmp	r3, #3
 800aaee:	d107      	bne.n	800ab00 <fsm_rconfreq+0x140>
	    ++f->nakloops;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	7d5b      	ldrb	r3, [r3, #21]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	755a      	strb	r2, [r3, #21]
 800aafc:	e000      	b.n	800ab00 <fsm_rconfreq+0x140>
	return;
 800aafe:	bf00      	nop
    }
}
 800ab00:	371c      	adds	r7, #28
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd90      	pop	{r4, r7, pc}
 800ab06:	bf00      	nop
 800ab08:	0800a749 	.word	0x0800a749

0800ab0c <fsm_rconfack>:


/*
 * fsm_rconfack - Receive Configure-Ack.
 */
static void fsm_rconfack(fsm *f, int id, u_char *inp, int len) {
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b088      	sub	sp, #32
 800ab10:	af02      	add	r7, sp, #8
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
 800ab18:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	617b      	str	r3, [r7, #20]

    if (id != f->reqid || f->seen_ack)		/* Expected id? */
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	7cdb      	ldrb	r3, [r3, #19]
 800ab24:	461a      	mov	r2, r3
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	f040 8083 	bne.w	800ac34 <fsm_rconfack+0x128>
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	7b1b      	ldrb	r3, [r3, #12]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d17e      	bne.n	800ac34 <fsm_rconfack+0x128>
	return;					/* Nope, toss... */
    if( !(f->callbacks->ackci? (*f->callbacks->ackci)(f, inp, len):
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00d      	beq.n	800ab5c <fsm_rconfack+0x50>
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	6879      	ldr	r1, [r7, #4]
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	4798      	blx	r3
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	bf0c      	ite	eq
 800ab54:	2301      	moveq	r3, #1
 800ab56:	2300      	movne	r3, #0
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	e005      	b.n	800ab68 <fsm_rconfack+0x5c>
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	bf14      	ite	ne
 800ab62:	2301      	movne	r3, #1
 800ab64:	2300      	moveq	r3, #0
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d165      	bne.n	800ac38 <fsm_rconfack+0x12c>
	  (len == 0)) ){
	/* Ack is bad - ignore it */
	ppp_error(("Received bad configure-ack: %P", inp, len));
	return;
    }
    f->seen_ack = 1;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	731a      	strb	r2, [r3, #12]
    f->rnakloops = 0;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2200      	movs	r2, #0
 800ab76:	759a      	strb	r2, [r3, #22]

    switch (f->state) {
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	7c1b      	ldrb	r3, [r3, #16]
 800ab7c:	3b02      	subs	r3, #2
 800ab7e:	2b07      	cmp	r3, #7
 800ab80:	d85c      	bhi.n	800ac3c <fsm_rconfack+0x130>
 800ab82:	a201      	add	r2, pc, #4	; (adr r2, 800ab88 <fsm_rconfack+0x7c>)
 800ab84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab88:	0800aba9 	.word	0x0800aba9
 800ab8c:	0800aba9 	.word	0x0800aba9
 800ab90:	0800ac3d 	.word	0x0800ac3d
 800ab94:	0800ac3d 	.word	0x0800ac3d
 800ab98:	0800abbd 	.word	0x0800abbd
 800ab9c:	0800abcd 	.word	0x0800abcd
 800aba0:	0800abe5 	.word	0x0800abe5
 800aba4:	0800ac11 	.word	0x0800ac11
    case PPP_FSM_CLOSED:
    case PPP_FSM_STOPPED:
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	2300      	movs	r3, #0
 800abae:	9300      	str	r3, [sp, #0]
 800abb0:	2300      	movs	r3, #0
 800abb2:	2106      	movs	r1, #6
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f000 faf7 	bl	800b1a8 <fsm_sdata>
	break;
 800abba:	e042      	b.n	800ac42 <fsm_rconfack+0x136>

    case PPP_FSM_REQSENT:
	f->state = PPP_FSM_ACKRCVD;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2207      	movs	r2, #7
 800abc0:	741a      	strb	r2, [r3, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	7bda      	ldrb	r2, [r3, #15]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	751a      	strb	r2, [r3, #20]
	break;
 800abca:	e03a      	b.n	800ac42 <fsm_rconfack+0x136>

    case PPP_FSM_ACKRCVD:
	/* Huh? an extra valid Ack? oh well... */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800abcc:	68f9      	ldr	r1, [r7, #12]
 800abce:	481e      	ldr	r0, [pc, #120]	; (800ac48 <fsm_rconfack+0x13c>)
 800abd0:	f7fe fea6 	bl	8009920 <sys_untimeout>
	fsm_sconfreq(f, 0);
 800abd4:	2100      	movs	r1, #0
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f000 f9f8 	bl	800afcc <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2206      	movs	r2, #6
 800abe0:	741a      	strb	r2, [r3, #16]
	break;
 800abe2:	e02e      	b.n	800ac42 <fsm_rconfack+0x136>

    case PPP_FSM_ACKSENT:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800abe4:	68f9      	ldr	r1, [r7, #12]
 800abe6:	4818      	ldr	r0, [pc, #96]	; (800ac48 <fsm_rconfack+0x13c>)
 800abe8:	f7fe fe9a 	bl	8009920 <sys_untimeout>
	f->state = PPP_FSM_OPENED;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2209      	movs	r2, #9
 800abf0:	741a      	strb	r2, [r3, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	7bda      	ldrb	r2, [r3, #15]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	751a      	strb	r2, [r3, #20]
	if (f->callbacks->up)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	69db      	ldr	r3, [r3, #28]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d01d      	beq.n	800ac40 <fsm_rconfack+0x134>
	    (*f->callbacks->up)(f);	/* Inform upper layers */
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	69db      	ldr	r3, [r3, #28]
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	4798      	blx	r3
	break;
 800ac0e:	e017      	b.n	800ac40 <fsm_rconfack+0x134>

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if (f->callbacks->down)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d004      	beq.n	800ac24 <fsm_rconfack+0x118>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	6a1b      	ldr	r3, [r3, #32]
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800ac24:	2100      	movs	r1, #0
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f000 f9d0 	bl	800afcc <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2206      	movs	r2, #6
 800ac30:	741a      	strb	r2, [r3, #16]
	break;
 800ac32:	e006      	b.n	800ac42 <fsm_rconfack+0x136>
	return;					/* Nope, toss... */
 800ac34:	bf00      	nop
 800ac36:	e004      	b.n	800ac42 <fsm_rconfack+0x136>
	return;
 800ac38:	bf00      	nop
 800ac3a:	e002      	b.n	800ac42 <fsm_rconfack+0x136>
    default:
	break;
 800ac3c:	bf00      	nop
 800ac3e:	e000      	b.n	800ac42 <fsm_rconfack+0x136>
	break;
 800ac40:	bf00      	nop
    }
}
 800ac42:	3718      	adds	r7, #24
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	0800a749 	.word	0x0800a749

0800ac4c <fsm_rconfnakrej>:


/*
 * fsm_rconfnakrej - Receive Configure-Nak or Configure-Reject.
 */
static void fsm_rconfnakrej(fsm *f, int code, int id, u_char *inp, int len) {
 800ac4c:	b590      	push	{r4, r7, lr}
 800ac4e:	b089      	sub	sp, #36	; 0x24
 800ac50:	af02      	add	r7, sp, #8
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
 800ac58:	603b      	str	r3, [r7, #0]
    int ret;
    int treat_as_reject;

    if (id != f->reqid || f->seen_ack)	/* Expected id? */
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	7cdb      	ldrb	r3, [r3, #19]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	f040 8090 	bne.w	800ad88 <fsm_rconfnakrej+0x13c>
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	7b1b      	ldrb	r3, [r3, #12]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f040 808b 	bne.w	800ad88 <fsm_rconfnakrej+0x13c>
	return;				/* Nope, toss... */

    if (code == CONFNAK) {
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	2b03      	cmp	r3, #3
 800ac76:	d121      	bne.n	800acbc <fsm_rconfnakrej+0x70>
	++f->rnakloops;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	7d9b      	ldrb	r3, [r3, #22]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	b2da      	uxtb	r2, r3
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	759a      	strb	r2, [r3, #22]
	treat_as_reject = (f->rnakloops >= f->maxnakloops);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	7d9a      	ldrb	r2, [r3, #22]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	7ddb      	ldrb	r3, [r3, #23]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	bf2c      	ite	cs
 800ac90:	2301      	movcs	r3, #1
 800ac92:	2300      	movcc	r3, #0
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	613b      	str	r3, [r7, #16]
	if (f->callbacks->nakci == NULL
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d074      	beq.n	800ad8c <fsm_rconfnakrej+0x140>
	    || !(ret = f->callbacks->nakci(f, inp, len, treat_as_reject))) {
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	691c      	ldr	r4, [r3, #16]
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acac:	6839      	ldr	r1, [r7, #0]
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	47a0      	blx	r4
 800acb2:	6178      	str	r0, [r7, #20]
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d113      	bne.n	800ace2 <fsm_rconfnakrej+0x96>
	    ppp_error(("Received bad configure-nak: %P", inp, len));
	    return;
 800acba:	e067      	b.n	800ad8c <fsm_rconfnakrej+0x140>
	}
    } else {
	f->rnakloops = 0;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	759a      	strb	r2, [r3, #22]
	if (f->callbacks->rejci == NULL
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	695b      	ldr	r3, [r3, #20]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d061      	beq.n	800ad90 <fsm_rconfnakrej+0x144>
	    || !(ret = f->callbacks->rejci(f, inp, len))) {
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	695b      	ldr	r3, [r3, #20]
 800acd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acd4:	6839      	ldr	r1, [r7, #0]
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	4798      	blx	r3
 800acda:	6178      	str	r0, [r7, #20]
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d056      	beq.n	800ad90 <fsm_rconfnakrej+0x144>
	    ppp_error(("Received bad configure-rej: %P", inp, len));
	    return;
	}
    }

    f->seen_ack = 1;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2201      	movs	r2, #1
 800ace6:	731a      	strb	r2, [r3, #12]

    switch (f->state) {
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	7c1b      	ldrb	r3, [r3, #16]
 800acec:	3b02      	subs	r3, #2
 800acee:	2b07      	cmp	r3, #7
 800acf0:	d850      	bhi.n	800ad94 <fsm_rconfnakrej+0x148>
 800acf2:	a201      	add	r2, pc, #4	; (adr r2, 800acf8 <fsm_rconfnakrej+0xac>)
 800acf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf8:	0800ad19 	.word	0x0800ad19
 800acfc:	0800ad19 	.word	0x0800ad19
 800ad00:	0800ad95 	.word	0x0800ad95
 800ad04:	0800ad95 	.word	0x0800ad95
 800ad08:	0800ad2d 	.word	0x0800ad2d
 800ad0c:	0800ad4d 	.word	0x0800ad4d
 800ad10:	0800ad2d 	.word	0x0800ad2d
 800ad14:	0800ad65 	.word	0x0800ad65
    case PPP_FSM_CLOSED:
    case PPP_FSM_STOPPED:
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	b2da      	uxtb	r2, r3
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	2300      	movs	r3, #0
 800ad22:	2106      	movs	r1, #6
 800ad24:	68f8      	ldr	r0, [r7, #12]
 800ad26:	f000 fa3f 	bl	800b1a8 <fsm_sdata>
	break;
 800ad2a:	e034      	b.n	800ad96 <fsm_rconfnakrej+0x14a>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKSENT:
	/* They didn't agree to what we wanted - try another request */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800ad2c:	68f9      	ldr	r1, [r7, #12]
 800ad2e:	481b      	ldr	r0, [pc, #108]	; (800ad9c <fsm_rconfnakrej+0x150>)
 800ad30:	f7fe fdf6 	bl	8009920 <sys_untimeout>
	if (ret < 0)
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	da03      	bge.n	800ad42 <fsm_rconfnakrej+0xf6>
	    f->state = PPP_FSM_STOPPED;		/* kludge for stopping CCP */
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2203      	movs	r2, #3
 800ad3e:	741a      	strb	r2, [r3, #16]
	else
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
	break;
 800ad40:	e029      	b.n	800ad96 <fsm_rconfnakrej+0x14a>
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
 800ad42:	2100      	movs	r1, #0
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f000 f941 	bl	800afcc <fsm_sconfreq>
	break;
 800ad4a:	e024      	b.n	800ad96 <fsm_rconfnakrej+0x14a>

    case PPP_FSM_ACKRCVD:
	/* Got a Nak/reject when we had already had an Ack?? oh well... */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800ad4c:	68f9      	ldr	r1, [r7, #12]
 800ad4e:	4813      	ldr	r0, [pc, #76]	; (800ad9c <fsm_rconfnakrej+0x150>)
 800ad50:	f7fe fde6 	bl	8009920 <sys_untimeout>
	fsm_sconfreq(f, 0);
 800ad54:	2100      	movs	r1, #0
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	f000 f938 	bl	800afcc <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2206      	movs	r2, #6
 800ad60:	741a      	strb	r2, [r3, #16]
	break;
 800ad62:	e018      	b.n	800ad96 <fsm_rconfnakrej+0x14a>

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if (f->callbacks->down)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d004      	beq.n	800ad78 <fsm_rconfnakrej+0x12c>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800ad78:	2100      	movs	r1, #0
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f000 f926 	bl	800afcc <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2206      	movs	r2, #6
 800ad84:	741a      	strb	r2, [r3, #16]
	break;
 800ad86:	e006      	b.n	800ad96 <fsm_rconfnakrej+0x14a>
	return;				/* Nope, toss... */
 800ad88:	bf00      	nop
 800ad8a:	e004      	b.n	800ad96 <fsm_rconfnakrej+0x14a>
	    return;
 800ad8c:	bf00      	nop
 800ad8e:	e002      	b.n	800ad96 <fsm_rconfnakrej+0x14a>
	    return;
 800ad90:	bf00      	nop
 800ad92:	e000      	b.n	800ad96 <fsm_rconfnakrej+0x14a>
    default:
	break;
 800ad94:	bf00      	nop
    }
}
 800ad96:	371c      	adds	r7, #28
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd90      	pop	{r4, r7, pc}
 800ad9c:	0800a749 	.word	0x0800a749

0800ada0 <fsm_rtermreq>:


/*
 * fsm_rtermreq - Receive Terminate-Req.
 */
static void fsm_rtermreq(fsm *f, int id, u_char *p, int len) {
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b088      	sub	sp, #32
 800ada4:	af02      	add	r7, sp, #8
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
 800adac:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	617b      	str	r3, [r7, #20]

    switch (f->state) {
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	7c1b      	ldrb	r3, [r3, #16]
 800adb8:	2b07      	cmp	r3, #7
 800adba:	db29      	blt.n	800ae10 <fsm_rtermreq+0x70>
 800adbc:	2b08      	cmp	r3, #8
 800adbe:	dd02      	ble.n	800adc6 <fsm_rtermreq+0x26>
 800adc0:	2b09      	cmp	r3, #9
 800adc2:	d004      	beq.n	800adce <fsm_rtermreq+0x2e>
	if (f->callbacks->down)
	    (*f->callbacks->down)(f);	/* Inform upper layers */
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
	break;
    default:
	break;
 800adc4:	e024      	b.n	800ae10 <fsm_rtermreq+0x70>
	f->state = PPP_FSM_REQSENT;		/* Start over but keep trying */
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2206      	movs	r2, #6
 800adca:	741a      	strb	r2, [r3, #16]
	break;
 800adcc:	e021      	b.n	800ae12 <fsm_rtermreq+0x72>
	f->retransmits = 0;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	751a      	strb	r2, [r3, #20]
	f->state = PPP_FSM_STOPPING;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2205      	movs	r2, #5
 800add8:	741a      	strb	r2, [r3, #16]
	if (f->callbacks->down)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	6a1b      	ldr	r3, [r3, #32]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d004      	beq.n	800adee <fsm_rtermreq+0x4e>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	6a1b      	ldr	r3, [r3, #32]
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	4798      	blx	r3
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800adee:	68f9      	ldr	r1, [r7, #12]
 800adf0:	480e      	ldr	r0, [pc, #56]	; (800ae2c <fsm_rtermreq+0x8c>)
 800adf2:	f7fe fd95 	bl	8009920 <sys_untimeout>
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	7b9b      	ldrb	r3, [r3, #14]
 800adfa:	461a      	mov	r2, r3
 800adfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ae00:	fb03 f302 	mul.w	r3, r3, r2
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	4909      	ldr	r1, [pc, #36]	; (800ae2c <fsm_rtermreq+0x8c>)
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7fe fd5d 	bl	80098c8 <sys_timeout>
	break;
 800ae0e:	e000      	b.n	800ae12 <fsm_rtermreq+0x72>
	break;
 800ae10:	bf00      	nop
    }

    fsm_sdata(f, TERMACK, id, NULL, 0);
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	b2da      	uxtb	r2, r3
 800ae16:	2300      	movs	r3, #0
 800ae18:	9300      	str	r3, [sp, #0]
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	2106      	movs	r1, #6
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f000 f9c2 	bl	800b1a8 <fsm_sdata>
}
 800ae24:	bf00      	nop
 800ae26:	3718      	adds	r7, #24
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	0800a749 	.word	0x0800a749

0800ae30 <fsm_rtermack>:


/*
 * fsm_rtermack - Receive Terminate-Ack.
 */
static void fsm_rtermack(fsm *f) {
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
    switch (f->state) {
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	7c1b      	ldrb	r3, [r3, #16]
 800ae3c:	3b04      	subs	r3, #4
 800ae3e:	2b05      	cmp	r3, #5
 800ae40:	d848      	bhi.n	800aed4 <fsm_rtermack+0xa4>
 800ae42:	a201      	add	r2, pc, #4	; (adr r2, 800ae48 <fsm_rtermack+0x18>)
 800ae44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae48:	0800ae61 	.word	0x0800ae61
 800ae4c:	0800ae85 	.word	0x0800ae85
 800ae50:	0800aed5 	.word	0x0800aed5
 800ae54:	0800aea9 	.word	0x0800aea9
 800ae58:	0800aed5 	.word	0x0800aed5
 800ae5c:	0800aeb1 	.word	0x0800aeb1
    case PPP_FSM_CLOSING:
	UNTIMEOUT(fsm_timeout, f);
 800ae60:	6879      	ldr	r1, [r7, #4]
 800ae62:	4821      	ldr	r0, [pc, #132]	; (800aee8 <fsm_rtermack+0xb8>)
 800ae64:	f7fe fd5c 	bl	8009920 <sys_untimeout>
	f->state = PPP_FSM_CLOSED;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2202      	movs	r2, #2
 800ae6c:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d02f      	beq.n	800aed8 <fsm_rtermack+0xa8>
	    (*f->callbacks->finished)(f);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	4798      	blx	r3
	break;
 800ae82:	e029      	b.n	800aed8 <fsm_rtermack+0xa8>
    case PPP_FSM_STOPPING:
	UNTIMEOUT(fsm_timeout, f);
 800ae84:	6879      	ldr	r1, [r7, #4]
 800ae86:	4818      	ldr	r0, [pc, #96]	; (800aee8 <fsm_rtermack+0xb8>)
 800ae88:	f7fe fd4a 	bl	8009920 <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2203      	movs	r2, #3
 800ae90:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d01f      	beq.n	800aedc <fsm_rtermack+0xac>
	    (*f->callbacks->finished)(f);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	4798      	blx	r3
	break;
 800aea6:	e019      	b.n	800aedc <fsm_rtermack+0xac>

    case PPP_FSM_ACKRCVD:
	f->state = PPP_FSM_REQSENT;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2206      	movs	r2, #6
 800aeac:	741a      	strb	r2, [r3, #16]
	break;
 800aeae:	e016      	b.n	800aede <fsm_rtermack+0xae>

    case PPP_FSM_OPENED:
	if (f->callbacks->down)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d004      	beq.n	800aec4 <fsm_rtermack+0x94>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	6a1b      	ldr	r3, [r3, #32]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	4798      	blx	r3
	fsm_sconfreq(f, 0);
 800aec4:	2100      	movs	r1, #0
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f880 	bl	800afcc <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2206      	movs	r2, #6
 800aed0:	741a      	strb	r2, [r3, #16]
	break;
 800aed2:	e004      	b.n	800aede <fsm_rtermack+0xae>
    default:
	break;
 800aed4:	bf00      	nop
 800aed6:	e002      	b.n	800aede <fsm_rtermack+0xae>
	break;
 800aed8:	bf00      	nop
 800aeda:	e000      	b.n	800aede <fsm_rtermack+0xae>
	break;
 800aedc:	bf00      	nop
    }
}
 800aede:	bf00      	nop
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	0800a749 	.word	0x0800a749

0800aeec <fsm_rcoderej>:


/*
 * fsm_rcoderej - Receive an Code-Reject.
 */
static void fsm_rcoderej(fsm *f, u_char *inp, int len) {
 800aeec:	b480      	push	{r7}
 800aeee:	b087      	sub	sp, #28
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
    u_char code, id;

    if (len < HEADERLEN) {
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2b03      	cmp	r3, #3
 800aefc:	dd11      	ble.n	800af22 <fsm_rcoderej+0x36>
	FSMDEBUG(("fsm_rcoderej: Rcvd short Code-Reject packet!"));
	return;
    }
    GETCHAR(code, inp);
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	1c5a      	adds	r2, r3, #1
 800af02:	60ba      	str	r2, [r7, #8]
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	75fb      	strb	r3, [r7, #23]
    GETCHAR(id, inp);
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	1c5a      	adds	r2, r3, #1
 800af0c:	60ba      	str	r2, [r7, #8]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	75bb      	strb	r3, [r7, #22]
    ppp_warn(("%s: Rcvd Code-Reject for code %d, id %d", PROTO_NAME(f), code, id));

    if( f->state == PPP_FSM_ACKRCVD )
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	7c1b      	ldrb	r3, [r3, #16]
 800af16:	2b07      	cmp	r3, #7
 800af18:	d104      	bne.n	800af24 <fsm_rcoderej+0x38>
	f->state = PPP_FSM_REQSENT;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2206      	movs	r2, #6
 800af1e:	741a      	strb	r2, [r3, #16]
 800af20:	e000      	b.n	800af24 <fsm_rcoderej+0x38>
	return;
 800af22:	bf00      	nop
}
 800af24:	371c      	adds	r7, #28
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
	...

0800af30 <fsm_protreject>:
/*
 * fsm_protreject - Peer doesn't speak this protocol.
 *
 * Treat this as a catastrophic error (RXJ-).
 */
void fsm_protreject(fsm *f) {
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	7c1b      	ldrb	r3, [r3, #16]
 800af3c:	3b02      	subs	r3, #2
 800af3e:	2b07      	cmp	r3, #7
 800af40:	d83e      	bhi.n	800afc0 <fsm_protreject+0x90>
 800af42:	a201      	add	r2, pc, #4	; (adr r2, 800af48 <fsm_protreject+0x18>)
 800af44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af48:	0800af71 	.word	0x0800af71
 800af4c:	0800af95 	.word	0x0800af95
 800af50:	0800af69 	.word	0x0800af69
 800af54:	0800af8d 	.word	0x0800af8d
 800af58:	0800af8d 	.word	0x0800af8d
 800af5c:	0800af8d 	.word	0x0800af8d
 800af60:	0800af8d 	.word	0x0800af8d
 800af64:	0800afb1 	.word	0x0800afb1
    case PPP_FSM_CLOSING:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800af68:	6879      	ldr	r1, [r7, #4]
 800af6a:	4817      	ldr	r0, [pc, #92]	; (800afc8 <fsm_protreject+0x98>)
 800af6c:	f7fe fcd8 	bl	8009920 <sys_untimeout>
	/* fall through */
	/* no break */
    case PPP_FSM_CLOSED:
	f->state = PPP_FSM_CLOSED;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2202      	movs	r2, #2
 800af74:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d01c      	beq.n	800afba <fsm_protreject+0x8a>
	    (*f->callbacks->finished)(f);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	4798      	blx	r3
	break;
 800af8a:	e016      	b.n	800afba <fsm_protreject+0x8a>

    case PPP_FSM_STOPPING:
    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800af8c:	6879      	ldr	r1, [r7, #4]
 800af8e:	480e      	ldr	r0, [pc, #56]	; (800afc8 <fsm_protreject+0x98>)
 800af90:	f7fe fcc6 	bl	8009920 <sys_untimeout>
	/* fall through */
	/* no break */
    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_STOPPED;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2203      	movs	r2, #3
 800af98:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d00c      	beq.n	800afbe <fsm_protreject+0x8e>
	    (*f->callbacks->finished)(f);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	4798      	blx	r3
	break;
 800afae:	e006      	b.n	800afbe <fsm_protreject+0x8e>

    case PPP_FSM_OPENED:
	terminate_layer(f, PPP_FSM_STOPPING);
 800afb0:	2105      	movs	r1, #5
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f7ff fb0e 	bl	800a5d4 <terminate_layer>
	break;
 800afb8:	e002      	b.n	800afc0 <fsm_protreject+0x90>
	break;
 800afba:	bf00      	nop
 800afbc:	e000      	b.n	800afc0 <fsm_protreject+0x90>
	break;
 800afbe:	bf00      	nop
    default:
	FSMDEBUG(("%s: Protocol-reject event in state %d!",
		  PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800afc0:	bf00      	nop
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	0800a749 	.word	0x0800a749

0800afcc <fsm_sconfreq>:


/*
 * fsm_sconfreq - Send a Configure-Request.
 */
static void fsm_sconfreq(fsm *f, int retransmit) {
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	617b      	str	r3, [r7, #20]
    struct pbuf *p;
    u_char *outp;
    int cilen;

    if( f->state != PPP_FSM_REQSENT && f->state != PPP_FSM_ACKRCVD && f->state != PPP_FSM_ACKSENT ){
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	7c1b      	ldrb	r3, [r3, #16]
 800afe0:	2b06      	cmp	r3, #6
 800afe2:	d017      	beq.n	800b014 <fsm_sconfreq+0x48>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	7c1b      	ldrb	r3, [r3, #16]
 800afe8:	2b07      	cmp	r3, #7
 800afea:	d013      	beq.n	800b014 <fsm_sconfreq+0x48>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	7c1b      	ldrb	r3, [r3, #16]
 800aff0:	2b08      	cmp	r3, #8
 800aff2:	d00f      	beq.n	800b014 <fsm_sconfreq+0x48>
	/* Not currently negotiating - reset options */
	if( f->callbacks->resetci )
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d004      	beq.n	800b008 <fsm_sconfreq+0x3c>
	    (*f->callbacks->resetci)(f);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	4798      	blx	r3
	f->nakloops = 0;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	755a      	strb	r2, [r3, #21]
	f->rnakloops = 0;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	759a      	strb	r2, [r3, #22]
    }

    if( !retransmit ){
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10d      	bne.n	800b036 <fsm_sconfreq+0x6a>
	/* New request - reset retransmission counter, use new ID */
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	7bda      	ldrb	r2, [r3, #15]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	751a      	strb	r2, [r3, #20]
	f->reqid = ++f->id;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	7c9b      	ldrb	r3, [r3, #18]
 800b026:	3301      	adds	r3, #1
 800b028:	b2da      	uxtb	r2, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	749a      	strb	r2, [r3, #18]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	7c9a      	ldrb	r2, [r3, #18]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	74da      	strb	r2, [r3, #19]
    }

    f->seen_ack = 0;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	731a      	strb	r2, [r3, #12]

    /*
     * Make up the request packet
     */
    if( f->callbacks->cilen && f->callbacks->addci ){
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d018      	beq.n	800b078 <fsm_sconfreq+0xac>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d013      	beq.n	800b078 <fsm_sconfreq+0xac>
	cilen = (*f->callbacks->cilen)(f);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	4798      	blx	r3
 800b05a:	4603      	mov	r3, r0
 800b05c:	60bb      	str	r3, [r7, #8]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800b064:	1f1a      	subs	r2, r3, #4
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	429a      	cmp	r2, r3
 800b06a:	da07      	bge.n	800b07c <fsm_sconfreq+0xb0>
	    cilen = pcb->peer_mru - HEADERLEN;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800b072:	3b04      	subs	r3, #4
 800b074:	60bb      	str	r3, [r7, #8]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800b076:	e001      	b.n	800b07c <fsm_sconfreq+0xb0>
    } else
	cilen = 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	60bb      	str	r3, [r7, #8]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(cilen + HEADERLEN + PPP_HDRLEN), PBUF_RAM);
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	b29b      	uxth	r3, r3
 800b080:	3308      	adds	r3, #8
 800b082:	b29b      	uxth	r3, r3
 800b084:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b088:	4619      	mov	r1, r3
 800b08a:	2000      	movs	r0, #0
 800b08c:	f7f8 f94c 	bl	8003328 <pbuf_alloc>
 800b090:	6138      	str	r0, [r7, #16]
    if(NULL == p)
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d07a      	beq.n	800b18e <fsm_sconfreq+0x1c2>
        return;
    if(p->tot_len != p->len) {
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	891a      	ldrh	r2, [r3, #8]
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	895b      	ldrh	r3, [r3, #10]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d003      	beq.n	800b0ac <fsm_sconfreq+0xe0>
        pbuf_free(p);
 800b0a4:	6938      	ldr	r0, [r7, #16]
 800b0a6:	f7f8 fbdd 	bl	8003864 <pbuf_free>
        return;
 800b0aa:	e071      	b.n	800b190 <fsm_sconfreq+0x1c4>
    }

    /* send the request to our peer */
    outp = (u_char*)p->payload;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	60fb      	str	r3, [r7, #12]
    MAKEHEADER(outp, f->protocol);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	1c5a      	adds	r2, r3, #1
 800b0b6:	60fa      	str	r2, [r7, #12]
 800b0b8:	22ff      	movs	r2, #255	; 0xff
 800b0ba:	701a      	strb	r2, [r3, #0]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	1c5a      	adds	r2, r3, #1
 800b0c0:	60fa      	str	r2, [r7, #12]
 800b0c2:	2203      	movs	r2, #3
 800b0c4:	701a      	strb	r2, [r3, #0]
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	1c5a      	adds	r2, r3, #1
 800b0ca:	60fa      	str	r2, [r7, #12]
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	89d2      	ldrh	r2, [r2, #14]
 800b0d0:	0a12      	lsrs	r2, r2, #8
 800b0d2:	b292      	uxth	r2, r2
 800b0d4:	b2d2      	uxtb	r2, r2
 800b0d6:	701a      	strb	r2, [r3, #0]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	1c5a      	adds	r2, r3, #1
 800b0dc:	60fa      	str	r2, [r7, #12]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	89d2      	ldrh	r2, [r2, #14]
 800b0e2:	b2d2      	uxtb	r2, r2
 800b0e4:	701a      	strb	r2, [r3, #0]
    PUTCHAR(CONFREQ, outp);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	1c5a      	adds	r2, r3, #1
 800b0ea:	60fa      	str	r2, [r7, #12]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	701a      	strb	r2, [r3, #0]
    PUTCHAR(f->reqid, outp);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	1c5a      	adds	r2, r3, #1
 800b0f4:	60fa      	str	r2, [r7, #12]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	7cd2      	ldrb	r2, [r2, #19]
 800b0fa:	701a      	strb	r2, [r3, #0]
    PUTSHORT(cilen + HEADERLEN, outp);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	1c5a      	adds	r2, r3, #1
 800b100:	60fa      	str	r2, [r7, #12]
 800b102:	68ba      	ldr	r2, [r7, #8]
 800b104:	3204      	adds	r2, #4
 800b106:	1212      	asrs	r2, r2, #8
 800b108:	b2d2      	uxtb	r2, r2
 800b10a:	701a      	strb	r2, [r3, #0]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	1c5a      	adds	r2, r3, #1
 800b110:	60fa      	str	r2, [r7, #12]
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	b2d2      	uxtb	r2, r2
 800b116:	3204      	adds	r2, #4
 800b118:	b2d2      	uxtb	r2, r2
 800b11a:	701a      	strb	r2, [r3, #0]
    if (cilen != 0) {
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d01a      	beq.n	800b158 <fsm_sconfreq+0x18c>
	(*f->callbacks->addci)(f, outp, &cilen);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	f107 0208 	add.w	r2, r7, #8
 800b12c:	68f9      	ldr	r1, [r7, #12]
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	4798      	blx	r3
	LWIP_ASSERT("cilen == p->len - HEADERLEN - PPP_HDRLEN", cilen == p->len - HEADERLEN - PPP_HDRLEN);
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	895b      	ldrh	r3, [r3, #10]
 800b136:	f1a3 0208 	sub.w	r2, r3, #8
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d00b      	beq.n	800b158 <fsm_sconfreq+0x18c>
 800b140:	4b15      	ldr	r3, [pc, #84]	; (800b198 <fsm_sconfreq+0x1cc>)
 800b142:	f240 22f2 	movw	r2, #754	; 0x2f2
 800b146:	4915      	ldr	r1, [pc, #84]	; (800b19c <fsm_sconfreq+0x1d0>)
 800b148:	4815      	ldr	r0, [pc, #84]	; (800b1a0 <fsm_sconfreq+0x1d4>)
 800b14a:	f007 f8d5 	bl	80122f8 <iprintf>
 800b14e:	2000      	movs	r0, #0
 800b150:	f007 f9d4 	bl	80124fc <fflush>
 800b154:	f007 f919 	bl	801238a <abort>
    }

    ppp_write(pcb, p);
 800b158:	6939      	ldr	r1, [r7, #16]
 800b15a:	6978      	ldr	r0, [r7, #20]
 800b15c:	f005 f956 	bl	801040c <ppp_write>

    /* start the retransmit timer */
    --f->retransmits;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	7d1b      	ldrb	r3, [r3, #20]
 800b164:	3b01      	subs	r3, #1
 800b166:	b2da      	uxtb	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	751a      	strb	r2, [r3, #20]
    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800b16c:	6879      	ldr	r1, [r7, #4]
 800b16e:	480d      	ldr	r0, [pc, #52]	; (800b1a4 <fsm_sconfreq+0x1d8>)
 800b170:	f7fe fbd6 	bl	8009920 <sys_untimeout>
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	7b9b      	ldrb	r3, [r3, #14]
 800b178:	461a      	mov	r2, r3
 800b17a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b17e:	fb03 f302 	mul.w	r3, r3, r2
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	4907      	ldr	r1, [pc, #28]	; (800b1a4 <fsm_sconfreq+0x1d8>)
 800b186:	4618      	mov	r0, r3
 800b188:	f7fe fb9e 	bl	80098c8 <sys_timeout>
 800b18c:	e000      	b.n	800b190 <fsm_sconfreq+0x1c4>
        return;
 800b18e:	bf00      	nop
}
 800b190:	3718      	adds	r7, #24
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	08015694 	.word	0x08015694
 800b19c:	080156b8 	.word	0x080156b8
 800b1a0:	080156e4 	.word	0x080156e4
 800b1a4:	0800a749 	.word	0x0800a749

0800b1a8 <fsm_sdata>:
/*
 * fsm_sdata - Send some data.
 *
 * Used for all packets sent to our peer by this module.
 */
void fsm_sdata(fsm *f, u_char code, u_char id, const u_char *data, int datalen) {
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b088      	sub	sp, #32
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	607b      	str	r3, [r7, #4]
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	72fb      	strb	r3, [r7, #11]
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	72bb      	strb	r3, [r7, #10]
    ppp_pcb *pcb = f->pcb;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	61fb      	str	r3, [r7, #28]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    /* Adjust length to be smaller than MTU */
    if (datalen > pcb->peer_mru - HEADERLEN)
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800b1c6:	1f1a      	subs	r2, r3, #4
 800b1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	da04      	bge.n	800b1d8 <fsm_sdata+0x30>
	datalen = pcb->peer_mru - HEADERLEN;
 800b1ce:	69fb      	ldr	r3, [r7, #28]
 800b1d0:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800b1d4:	3b04      	subs	r3, #4
 800b1d6:	62bb      	str	r3, [r7, #40]	; 0x28
    outlen = datalen + HEADERLEN;
 800b1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1da:	3304      	adds	r3, #4
 800b1dc:	61bb      	str	r3, [r7, #24]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(outlen + PPP_HDRLEN), PBUF_RAM);
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	3304      	adds	r3, #4
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	2000      	movs	r0, #0
 800b1ee:	f7f8 f89b 	bl	8003328 <pbuf_alloc>
 800b1f2:	6178      	str	r0, [r7, #20]
    if(NULL == p)
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d04f      	beq.n	800b29a <fsm_sdata+0xf2>
        return;
    if(p->tot_len != p->len) {
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	891a      	ldrh	r2, [r3, #8]
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	895b      	ldrh	r3, [r3, #10]
 800b202:	429a      	cmp	r2, r3
 800b204:	d003      	beq.n	800b20e <fsm_sdata+0x66>
        pbuf_free(p);
 800b206:	6978      	ldr	r0, [r7, #20]
 800b208:	f7f8 fb2c 	bl	8003864 <pbuf_free>
        return;
 800b20c:	e046      	b.n	800b29c <fsm_sdata+0xf4>
    }

    outp = (u_char*)p->payload;
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	613b      	str	r3, [r7, #16]
    if (datalen && data != NULL) { /* && data != outp + PPP_HDRLEN + HEADERLEN)  -- was only for fsm_sconfreq() */
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	2b00      	cmp	r3, #0
 800b218:	d009      	beq.n	800b22e <fsm_sdata+0x86>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d006      	beq.n	800b22e <fsm_sdata+0x86>
      MEMCPY(outp + PPP_HDRLEN + HEADERLEN, data, datalen);
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	3308      	adds	r3, #8
 800b224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b226:	6879      	ldr	r1, [r7, #4]
 800b228:	4618      	mov	r0, r3
 800b22a:	f007 fa87 	bl	801273c <memcpy>
    }
    MAKEHEADER(outp, f->protocol);
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	1c5a      	adds	r2, r3, #1
 800b232:	613a      	str	r2, [r7, #16]
 800b234:	22ff      	movs	r2, #255	; 0xff
 800b236:	701a      	strb	r2, [r3, #0]
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	1c5a      	adds	r2, r3, #1
 800b23c:	613a      	str	r2, [r7, #16]
 800b23e:	2203      	movs	r2, #3
 800b240:	701a      	strb	r2, [r3, #0]
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	1c5a      	adds	r2, r3, #1
 800b246:	613a      	str	r2, [r7, #16]
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	89d2      	ldrh	r2, [r2, #14]
 800b24c:	0a12      	lsrs	r2, r2, #8
 800b24e:	b292      	uxth	r2, r2
 800b250:	b2d2      	uxtb	r2, r2
 800b252:	701a      	strb	r2, [r3, #0]
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	1c5a      	adds	r2, r3, #1
 800b258:	613a      	str	r2, [r7, #16]
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	89d2      	ldrh	r2, [r2, #14]
 800b25e:	b2d2      	uxtb	r2, r2
 800b260:	701a      	strb	r2, [r3, #0]
    PUTCHAR(code, outp);
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	1c5a      	adds	r2, r3, #1
 800b266:	613a      	str	r2, [r7, #16]
 800b268:	7afa      	ldrb	r2, [r7, #11]
 800b26a:	701a      	strb	r2, [r3, #0]
    PUTCHAR(id, outp);
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	1c5a      	adds	r2, r3, #1
 800b270:	613a      	str	r2, [r7, #16]
 800b272:	7aba      	ldrb	r2, [r7, #10]
 800b274:	701a      	strb	r2, [r3, #0]
    PUTSHORT(outlen, outp);
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	1c5a      	adds	r2, r3, #1
 800b27a:	613a      	str	r2, [r7, #16]
 800b27c:	69ba      	ldr	r2, [r7, #24]
 800b27e:	1212      	asrs	r2, r2, #8
 800b280:	b2d2      	uxtb	r2, r2
 800b282:	701a      	strb	r2, [r3, #0]
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	1c5a      	adds	r2, r3, #1
 800b288:	613a      	str	r2, [r7, #16]
 800b28a:	69ba      	ldr	r2, [r7, #24]
 800b28c:	b2d2      	uxtb	r2, r2
 800b28e:	701a      	strb	r2, [r3, #0]
    ppp_write(pcb, p);
 800b290:	6979      	ldr	r1, [r7, #20]
 800b292:	69f8      	ldr	r0, [r7, #28]
 800b294:	f005 f8ba 	bl	801040c <ppp_write>
 800b298:	e000      	b.n	800b29c <fsm_sdata+0xf4>
        return;
 800b29a:	bf00      	nop
}
 800b29c:	3720      	adds	r7, #32
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
	...

0800b2a4 <ipcp_init>:
#endif /* PPP_OPTIONS */

/*
 * ipcp_init - Initialize IPCP.
 */
static void ipcp_init(ppp_pcb *pcb) {
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b086      	sub	sp, #24
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b2b2:	617b      	str	r3, [r7, #20]

    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800b2ba:	613b      	str	r3, [r7, #16]
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800b2c2:	60fb      	str	r3, [r7, #12]

    f->pcb = pcb;
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	601a      	str	r2, [r3, #0]
    f->protocol = PPP_IPCP;
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	f248 0221 	movw	r2, #32801	; 0x8021
 800b2d0:	81da      	strh	r2, [r3, #14]
    f->callbacks = &ipcp_callbacks;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	4a14      	ldr	r2, [pc, #80]	; (800b328 <ipcp_init+0x84>)
 800b2d6:	605a      	str	r2, [r3, #4]
    fsm_init(f);
 800b2d8:	6978      	ldr	r0, [r7, #20]
 800b2da:	f7ff f88a 	bl	800a3f2 <fsm_init>
     * Some 3G modems use repeated IPCP NAKs as a way of stalling
     * until they can contact a server on the network, so we increase
     * the default number of NAKs we accept before we start treating
     * them as rejects.
     */
    f->maxnakloops = 100;
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	2264      	movs	r2, #100	; 0x64
 800b2e2:	75da      	strb	r2, [r3, #23]
#if 0 /* Not necessary, everything is cleared in ppp_new() */
    memset(wo, 0, sizeof(*wo));
    memset(ao, 0, sizeof(*ao));
#endif /* 0 */

    wo->neg_addr = wo->old_addrs = 1;
 800b2e4:	693a      	ldr	r2, [r7, #16]
 800b2e6:	7813      	ldrb	r3, [r2, #0]
 800b2e8:	f043 0302 	orr.w	r3, r3, #2
 800b2ec:	7013      	strb	r3, [r2, #0]
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b2f6:	b2d9      	uxtb	r1, r3
 800b2f8:	693a      	ldr	r2, [r7, #16]
 800b2fa:	7813      	ldrb	r3, [r2, #0]
 800b2fc:	f361 0300 	bfi	r3, r1, #0, #1
 800b300:	7013      	strb	r3, [r2, #0]
#if 0 /* UNUSED */
    /* wanting default route by default */
    wo->default_route = 1;
#endif /* UNUSED */

    ao->neg_addr = ao->old_addrs = 1;
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	7813      	ldrb	r3, [r2, #0]
 800b306:	f043 0302 	orr.w	r3, r3, #2
 800b30a:	7013      	strb	r3, [r2, #0]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b314:	b2d9      	uxtb	r1, r3
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	7813      	ldrb	r3, [r2, #0]
 800b31a:	f361 0300 	bfi	r3, r1, #0, #1
 800b31e:	7013      	strb	r3, [r2, #0]
     * and defaultroute options.
     */
    ao->proxy_arp = 1;
    ao->default_route = 1;
#endif /* UNUSED */
}
 800b320:	bf00      	nop
 800b322:	3718      	adds	r7, #24
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	08015b54 	.word	0x08015b54

0800b32c <ipcp_open>:


/*
 * ipcp_open - IPCP is allowed to come up.
 */
static void ipcp_open(ppp_pcb *pcb) {
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b33a:	60fb      	str	r3, [r7, #12]
    fsm_open(f);
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f7ff f8ef 	bl	800a520 <fsm_open>
    pcb->ipcp_is_open = 1;
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800b348:	f043 0302 	orr.w	r3, r3, #2
 800b34c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
}
 800b350:	bf00      	nop
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <ipcp_close>:


/*
 * ipcp_close - Take IPCP down.
 */
static void ipcp_close(ppp_pcb *pcb, const char *reason) {
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
    fsm *f = &pcb->ipcp_fsm;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b368:	60fb      	str	r3, [r7, #12]
    fsm_close(f, reason);
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f7ff f99f 	bl	800a6b0 <fsm_close>
}
 800b372:	bf00      	nop
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <ipcp_lowerup>:


/*
 * ipcp_lowerup - The lower layer is up.
 */
static void ipcp_lowerup(ppp_pcb *pcb) {
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b084      	sub	sp, #16
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b388:	60fb      	str	r3, [r7, #12]
    fsm_lowerup(f);
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f7ff f84e 	bl	800a42c <fsm_lowerup>
}
 800b390:	bf00      	nop
 800b392:	3710      	adds	r7, #16
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <ipcp_lowerdown>:


/*
 * ipcp_lowerdown - The lower layer is down.
 */
static void ipcp_lowerdown(ppp_pcb *pcb) {
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b3a6:	60fb      	str	r3, [r7, #12]
    fsm_lowerdown(f);
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f7ff f865 	bl	800a478 <fsm_lowerdown>
}
 800b3ae:	bf00      	nop
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <ipcp_input>:


/*
 * ipcp_input - Input IPCP packet.
 */
static void ipcp_input(ppp_pcb *pcb, u_char *p, int len) {
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b086      	sub	sp, #24
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	60f8      	str	r0, [r7, #12]
 800b3be:	60b9      	str	r1, [r7, #8]
 800b3c0:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b3c8:	617b      	str	r3, [r7, #20]
    fsm_input(f, p, len);
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	68b9      	ldr	r1, [r7, #8]
 800b3ce:	6978      	ldr	r0, [r7, #20]
 800b3d0:	f7ff fa52 	bl	800a878 <fsm_input>
}
 800b3d4:	bf00      	nop
 800b3d6:	3718      	adds	r7, #24
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <ipcp_protrej>:
/*
 * ipcp_protrej - A Protocol-Reject was received for IPCP.
 *
 * Pretend the lower layer went down, so we shut up.
 */
static void ipcp_protrej(ppp_pcb *pcb) {
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b3ea:	60fb      	str	r3, [r7, #12]
    fsm_lowerdown(f);
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f7ff f843 	bl	800a478 <fsm_lowerdown>
}
 800b3f2:	bf00      	nop
 800b3f4:	3710      	adds	r7, #16
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <ipcp_resetci>:

/*
 * ipcp_resetci - Reset our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static void ipcp_resetci(fsm *f) {
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b086      	sub	sp, #24
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	617b      	str	r3, [r7, #20]
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800b40e:	613b      	str	r3, [r7, #16]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b416:	60fb      	str	r3, [r7, #12]
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800b41e:	60bb      	str	r3, [r7, #8]

    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	f003 0301 	and.w	r3, r3, #1
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d106      	bne.n	800b43c <ipcp_resetci+0x42>
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	f003 0302 	and.w	r3, r3, #2
 800b436:	b2db      	uxtb	r3, r3
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00f      	beq.n	800b45c <ipcp_resetci+0x62>
	(ao->neg_addr || ao->old_addrs);
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	f003 0301 	and.w	r3, r3, #1
 800b444:	b2db      	uxtb	r3, r3
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800b446:	2b00      	cmp	r3, #0
 800b448:	d106      	bne.n	800b458 <ipcp_resetci+0x5e>
	(ao->neg_addr || ao->old_addrs);
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	f003 0302 	and.w	r3, r3, #2
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2b00      	cmp	r3, #0
 800b456:	d001      	beq.n	800b45c <ipcp_resetci+0x62>
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800b458:	2301      	movs	r3, #1
 800b45a:	e000      	b.n	800b45e <ipcp_resetci+0x64>
 800b45c:	2300      	movs	r3, #0
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	f003 0301 	and.w	r3, r3, #1
 800b464:	b2d9      	uxtb	r1, r3
 800b466:	693a      	ldr	r2, [r7, #16]
 800b468:	7813      	ldrb	r3, [r2, #0]
 800b46a:	f361 0382 	bfi	r3, r1, #2, #1
 800b46e:	7013      	strb	r3, [r2, #0]
    if (wo->ouraddr == 0)
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d104      	bne.n	800b482 <ipcp_resetci+0x88>
	wo->accept_local = 1;
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	7813      	ldrb	r3, [r2, #0]
 800b47c:	f043 0308 	orr.w	r3, r3, #8
 800b480:	7013      	strb	r3, [r2, #0]
    if (wo->hisaddr == 0)
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d104      	bne.n	800b494 <ipcp_resetci+0x9a>
	wo->accept_remote = 1;
 800b48a:	693a      	ldr	r2, [r7, #16]
 800b48c:	7813      	ldrb	r3, [r2, #0]
 800b48e:	f043 0310 	orr.w	r3, r3, #16
 800b492:	7013      	strb	r3, [r2, #0]
#if LWIP_DNS
    wo->req_dns1 = wo->req_dns2 = pcb->settings.usepeerdns;	/* Request DNS addresses from the peer */
#endif /* LWIP_DNS */
    *go = *wo;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	693a      	ldr	r2, [r7, #16]
 800b498:	ca07      	ldmia	r2, {r0, r1, r2}
 800b49a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (!pcb->ask_for_local)
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b4a4:	f003 0301 	and.w	r3, r3, #1
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d102      	bne.n	800b4b4 <ipcp_resetci+0xba>
	go->ouraddr = 0;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	605a      	str	r2, [r3, #4]
	if (wo->hisaddr) {
	    wo->accept_remote = 0;
	}
    }
#endif /* UNUSED */
    BZERO(&pcb->ipcp_hisoptions, sizeof(ipcp_options));
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800b4ba:	220c      	movs	r2, #12
 800b4bc:	2100      	movs	r1, #0
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f007 f961 	bl	8012786 <memset>
}
 800b4c4:	bf00      	nop
 800b4c6:	3718      	adds	r7, #24
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <ipcp_cilen>:

/*
 * ipcp_cilen - Return length of our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static int ipcp_cilen(fsm *f) {
 800b4cc:	b480      	push	{r7}
 800b4ce:	b087      	sub	sp, #28
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	617b      	str	r3, [r7, #20]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b4e0:	613b      	str	r3, [r7, #16]
#if VJ_SUPPORT
    ipcp_options *wo = &pcb->ipcp_wantoptions;
#endif /* VJ_SUPPORT */
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800b4e8:	60fb      	str	r3, [r7, #12]

    /*
     * First see if we want to change our options to the old
     * forms because we have received old forms from the peer.
     */
    if (go->neg_addr && go->old_addrs && !ho->neg_addr && ho->old_addrs)
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	f003 0301 	and.w	r3, r3, #1
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d019      	beq.n	800b52c <ipcp_cilen+0x60>
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	f003 0302 	and.w	r3, r3, #2
 800b500:	b2db      	uxtb	r3, r3
 800b502:	2b00      	cmp	r3, #0
 800b504:	d012      	beq.n	800b52c <ipcp_cilen+0x60>
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	2b00      	cmp	r3, #0
 800b512:	d10b      	bne.n	800b52c <ipcp_cilen+0x60>
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	f003 0302 	and.w	r3, r3, #2
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d004      	beq.n	800b52c <ipcp_cilen+0x60>
	go->neg_addr = 0;
 800b522:	693a      	ldr	r2, [r7, #16]
 800b524:	7813      	ldrb	r3, [r2, #0]
 800b526:	f36f 0300 	bfc	r3, #0, #1
 800b52a:	7013      	strb	r3, [r2, #0]
	    go->vj_protocol = ho->vj_protocol;
	}
    }
#endif /* VJ_SUPPORT */

    return (LENCIADDRS(!go->neg_addr && go->old_addrs) +
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	f003 0301 	and.w	r3, r3, #1
 800b534:	b2db      	uxtb	r3, r3
 800b536:	2b00      	cmp	r3, #0
 800b538:	d108      	bne.n	800b54c <ipcp_cilen+0x80>
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	f003 0302 	and.w	r3, r3, #2
 800b542:	b2db      	uxtb	r3, r3
 800b544:	2b00      	cmp	r3, #0
 800b546:	d001      	beq.n	800b54c <ipcp_cilen+0x80>
 800b548:	220a      	movs	r2, #10
 800b54a:	e000      	b.n	800b54e <ipcp_cilen+0x82>
 800b54c:	2200      	movs	r2, #0
#if VJ_SUPPORT
	    LENCIVJ(go->neg_vj, go->old_vj) +
#endif /* VJ_SUPPORT */
	    LENCIADDR(go->neg_addr) +
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	f003 0301 	and.w	r3, r3, #1
 800b556:	b2db      	uxtb	r3, r3
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d001      	beq.n	800b560 <ipcp_cilen+0x94>
 800b55c:	2306      	movs	r3, #6
 800b55e:	e000      	b.n	800b562 <ipcp_cilen+0x96>
 800b560:	2300      	movs	r3, #0
 800b562:	4413      	add	r3, r2
#if 0 /* UNUSED - WINS */
	    LENCIWINS(go->winsaddr[0]) +
	    LENCIWINS(go->winsaddr[1]) +
#endif /* UNUSED - WINS */
	    0);
}
 800b564:	4618      	mov	r0, r3
 800b566:	371c      	adds	r7, #28
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <ipcp_addci>:

/*
 * ipcp_addci - Add our desired CIs to a packet.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static void ipcp_addci(fsm *f, u_char *ucp, int *lenp) {
 800b570:	b580      	push	{r7, lr}
 800b572:	b08a      	sub	sp, #40	; 0x28
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	623b      	str	r3, [r7, #32]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800b582:	6a3b      	ldr	r3, [r7, #32]
 800b584:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b588:	61fb      	str	r3, [r7, #28]
    int len = *lenp;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	627b      	str	r3, [r7, #36]	; 0x24
	} else \
	    addr = 0; \
    }
#endif /* UNUSED - WINS */

    ADDCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	f003 0301 	and.w	r3, r3, #1
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d15e      	bne.n	800b65c <ipcp_addci+0xec>
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	f003 0302 	and.w	r3, r3, #2
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d057      	beq.n	800b65c <ipcp_addci+0xec>
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ae:	2b09      	cmp	r3, #9
 800b5b0:	dd4f      	ble.n	800b652 <ipcp_addci+0xe2>
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	1c5a      	adds	r2, r3, #1
 800b5b6:	60ba      	str	r2, [r7, #8]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	701a      	strb	r2, [r3, #0]
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	1c5a      	adds	r2, r3, #1
 800b5c0:	60ba      	str	r2, [r7, #8]
 800b5c2:	220a      	movs	r2, #10
 800b5c4:	701a      	strb	r2, [r3, #0]
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7f5 ffc5 	bl	800155a <lwip_htonl>
 800b5d0:	61b8      	str	r0, [r7, #24]
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	1c5a      	adds	r2, r3, #1
 800b5d6:	60ba      	str	r2, [r7, #8]
 800b5d8:	69ba      	ldr	r2, [r7, #24]
 800b5da:	0e12      	lsrs	r2, r2, #24
 800b5dc:	b2d2      	uxtb	r2, r2
 800b5de:	701a      	strb	r2, [r3, #0]
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	1c5a      	adds	r2, r3, #1
 800b5e4:	60ba      	str	r2, [r7, #8]
 800b5e6:	69ba      	ldr	r2, [r7, #24]
 800b5e8:	0c12      	lsrs	r2, r2, #16
 800b5ea:	b2d2      	uxtb	r2, r2
 800b5ec:	701a      	strb	r2, [r3, #0]
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	1c5a      	adds	r2, r3, #1
 800b5f2:	60ba      	str	r2, [r7, #8]
 800b5f4:	69ba      	ldr	r2, [r7, #24]
 800b5f6:	0a12      	lsrs	r2, r2, #8
 800b5f8:	b2d2      	uxtb	r2, r2
 800b5fa:	701a      	strb	r2, [r3, #0]
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	1c5a      	adds	r2, r3, #1
 800b600:	60ba      	str	r2, [r7, #8]
 800b602:	69ba      	ldr	r2, [r7, #24]
 800b604:	b2d2      	uxtb	r2, r2
 800b606:	701a      	strb	r2, [r3, #0]
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7f5 ffa4 	bl	800155a <lwip_htonl>
 800b612:	61b8      	str	r0, [r7, #24]
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	1c5a      	adds	r2, r3, #1
 800b618:	60ba      	str	r2, [r7, #8]
 800b61a:	69ba      	ldr	r2, [r7, #24]
 800b61c:	0e12      	lsrs	r2, r2, #24
 800b61e:	b2d2      	uxtb	r2, r2
 800b620:	701a      	strb	r2, [r3, #0]
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	1c5a      	adds	r2, r3, #1
 800b626:	60ba      	str	r2, [r7, #8]
 800b628:	69ba      	ldr	r2, [r7, #24]
 800b62a:	0c12      	lsrs	r2, r2, #16
 800b62c:	b2d2      	uxtb	r2, r2
 800b62e:	701a      	strb	r2, [r3, #0]
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	1c5a      	adds	r2, r3, #1
 800b634:	60ba      	str	r2, [r7, #8]
 800b636:	69ba      	ldr	r2, [r7, #24]
 800b638:	0a12      	lsrs	r2, r2, #8
 800b63a:	b2d2      	uxtb	r2, r2
 800b63c:	701a      	strb	r2, [r3, #0]
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	1c5a      	adds	r2, r3, #1
 800b642:	60ba      	str	r2, [r7, #8]
 800b644:	69ba      	ldr	r2, [r7, #24]
 800b646:	b2d2      	uxtb	r2, r2
 800b648:	701a      	strb	r2, [r3, #0]
 800b64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64c:	3b0a      	subs	r3, #10
 800b64e:	627b      	str	r3, [r7, #36]	; 0x24
 800b650:	e004      	b.n	800b65c <ipcp_addci+0xec>
 800b652:	69fa      	ldr	r2, [r7, #28]
 800b654:	7813      	ldrb	r3, [r2, #0]
 800b656:	f36f 0341 	bfc	r3, #1, #1
 800b65a:	7013      	strb	r3, [r2, #0]
#if VJ_SUPPORT
    ADDCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    ADDCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	f003 0301 	and.w	r3, r3, #1
 800b664:	b2db      	uxtb	r3, r3
 800b666:	2b00      	cmp	r3, #0
 800b668:	d036      	beq.n	800b6d8 <ipcp_addci+0x168>
 800b66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66c:	2b05      	cmp	r3, #5
 800b66e:	dd2e      	ble.n	800b6ce <ipcp_addci+0x15e>
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	1c5a      	adds	r2, r3, #1
 800b674:	60ba      	str	r2, [r7, #8]
 800b676:	2203      	movs	r2, #3
 800b678:	701a      	strb	r2, [r3, #0]
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	1c5a      	adds	r2, r3, #1
 800b67e:	60ba      	str	r2, [r7, #8]
 800b680:	2206      	movs	r2, #6
 800b682:	701a      	strb	r2, [r3, #0]
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	4618      	mov	r0, r3
 800b68a:	f7f5 ff66 	bl	800155a <lwip_htonl>
 800b68e:	6178      	str	r0, [r7, #20]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	1c5a      	adds	r2, r3, #1
 800b694:	60ba      	str	r2, [r7, #8]
 800b696:	697a      	ldr	r2, [r7, #20]
 800b698:	0e12      	lsrs	r2, r2, #24
 800b69a:	b2d2      	uxtb	r2, r2
 800b69c:	701a      	strb	r2, [r3, #0]
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	1c5a      	adds	r2, r3, #1
 800b6a2:	60ba      	str	r2, [r7, #8]
 800b6a4:	697a      	ldr	r2, [r7, #20]
 800b6a6:	0c12      	lsrs	r2, r2, #16
 800b6a8:	b2d2      	uxtb	r2, r2
 800b6aa:	701a      	strb	r2, [r3, #0]
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	1c5a      	adds	r2, r3, #1
 800b6b0:	60ba      	str	r2, [r7, #8]
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	0a12      	lsrs	r2, r2, #8
 800b6b6:	b2d2      	uxtb	r2, r2
 800b6b8:	701a      	strb	r2, [r3, #0]
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	1c5a      	adds	r2, r3, #1
 800b6be:	60ba      	str	r2, [r7, #8]
 800b6c0:	697a      	ldr	r2, [r7, #20]
 800b6c2:	b2d2      	uxtb	r2, r2
 800b6c4:	701a      	strb	r2, [r3, #0]
 800b6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c8:	3b06      	subs	r3, #6
 800b6ca:	627b      	str	r3, [r7, #36]	; 0x24
 800b6cc:	e004      	b.n	800b6d8 <ipcp_addci+0x168>
 800b6ce:	69fa      	ldr	r2, [r7, #28]
 800b6d0:	7813      	ldrb	r3, [r2, #0]
 800b6d2:	f36f 0300 	bfc	r3, #0, #1
 800b6d6:	7013      	strb	r3, [r2, #0]
    ADDCIWINS(CI_MS_WINS1, go->winsaddr[0]);

    ADDCIWINS(CI_MS_WINS2, go->winsaddr[1]);
#endif /* UNUSED - WINS */
    
    *lenp -= len;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6de:	1ad2      	subs	r2, r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	601a      	str	r2, [r3, #0]
}
 800b6e4:	bf00      	nop
 800b6e6:	3728      	adds	r7, #40	; 0x28
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <ipcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int ipcp_ackci(fsm *f, u_char *p, int len) {
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b08a      	sub	sp, #40	; 0x28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	627b      	str	r3, [r7, #36]	; 0x24
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800b6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b700:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b704:	623b      	str	r3, [r7, #32]
	if (addr != cilong) \
	    goto bad; \
    }
#endif /* UNUSED - WINS */

    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800b706:	6a3b      	ldr	r3, [r7, #32]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	f003 0301 	and.w	r3, r3, #1
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	2b00      	cmp	r3, #0
 800b712:	d179      	bne.n	800b808 <ipcp_ackci+0x11c>
 800b714:	6a3b      	ldr	r3, [r7, #32]
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	f003 0302 	and.w	r3, r3, #2
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d072      	beq.n	800b808 <ipcp_ackci+0x11c>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	3b0a      	subs	r3, #10
 800b726:	607b      	str	r3, [r7, #4]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f2c0 80bb 	blt.w	800b8a6 <ipcp_ackci+0x1ba>
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	1c5a      	adds	r2, r3, #1
 800b734:	60ba      	str	r2, [r7, #8]
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	83fb      	strh	r3, [r7, #30]
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	1c5a      	adds	r2, r3, #1
 800b73e:	60ba      	str	r2, [r7, #8]
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	83bb      	strh	r3, [r7, #28]
 800b744:	8bbb      	ldrh	r3, [r7, #28]
 800b746:	2b0a      	cmp	r3, #10
 800b748:	f040 80b8 	bne.w	800b8bc <ipcp_ackci+0x1d0>
 800b74c:	8bfb      	ldrh	r3, [r7, #30]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	f040 80b4 	bne.w	800b8bc <ipcp_ackci+0x1d0>
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	60ba      	str	r2, [r7, #8]
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	021b      	lsls	r3, r3, #8
 800b75e:	61bb      	str	r3, [r7, #24]
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	1c5a      	adds	r2, r3, #1
 800b764:	60ba      	str	r2, [r7, #8]
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	461a      	mov	r2, r3
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	4313      	orrs	r3, r2
 800b76e:	61bb      	str	r3, [r7, #24]
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	021b      	lsls	r3, r3, #8
 800b774:	61bb      	str	r3, [r7, #24]
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	1c5a      	adds	r2, r3, #1
 800b77a:	60ba      	str	r2, [r7, #8]
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	461a      	mov	r2, r3
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	4313      	orrs	r3, r2
 800b784:	61bb      	str	r3, [r7, #24]
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	021b      	lsls	r3, r3, #8
 800b78a:	61bb      	str	r3, [r7, #24]
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	1c5a      	adds	r2, r3, #1
 800b790:	60ba      	str	r2, [r7, #8]
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	461a      	mov	r2, r3
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	4313      	orrs	r3, r2
 800b79a:	61bb      	str	r3, [r7, #24]
 800b79c:	69b8      	ldr	r0, [r7, #24]
 800b79e:	f7f5 fedc 	bl	800155a <lwip_htonl>
 800b7a2:	6178      	str	r0, [r7, #20]
 800b7a4:	6a3b      	ldr	r3, [r7, #32]
 800b7a6:	685a      	ldr	r2, [r3, #4]
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d17d      	bne.n	800b8aa <ipcp_ackci+0x1be>
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	1c5a      	adds	r2, r3, #1
 800b7b2:	60ba      	str	r2, [r7, #8]
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	021b      	lsls	r3, r3, #8
 800b7b8:	61bb      	str	r3, [r7, #24]
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	1c5a      	adds	r2, r3, #1
 800b7be:	60ba      	str	r2, [r7, #8]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	69bb      	ldr	r3, [r7, #24]
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	61bb      	str	r3, [r7, #24]
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	021b      	lsls	r3, r3, #8
 800b7ce:	61bb      	str	r3, [r7, #24]
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	1c5a      	adds	r2, r3, #1
 800b7d4:	60ba      	str	r2, [r7, #8]
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	461a      	mov	r2, r3
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	61bb      	str	r3, [r7, #24]
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	021b      	lsls	r3, r3, #8
 800b7e4:	61bb      	str	r3, [r7, #24]
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	1c5a      	adds	r2, r3, #1
 800b7ea:	60ba      	str	r2, [r7, #8]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	61bb      	str	r3, [r7, #24]
 800b7f6:	69b8      	ldr	r0, [r7, #24]
 800b7f8:	f7f5 feaf 	bl	800155a <lwip_htonl>
 800b7fc:	6178      	str	r0, [r7, #20]
 800b7fe:	6a3b      	ldr	r3, [r7, #32]
 800b800:	689a      	ldr	r2, [r3, #8]
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	429a      	cmp	r2, r3
 800b806:	d152      	bne.n	800b8ae <ipcp_ackci+0x1c2>
#if VJ_SUPPORT
    ACKCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800b808:	6a3b      	ldr	r3, [r7, #32]
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	f003 0301 	and.w	r3, r3, #1
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b00      	cmp	r3, #0
 800b814:	d042      	beq.n	800b89c <ipcp_ackci+0x1b0>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	3b06      	subs	r3, #6
 800b81a:	607b      	str	r3, [r7, #4]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	db47      	blt.n	800b8b2 <ipcp_ackci+0x1c6>
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	1c5a      	adds	r2, r3, #1
 800b826:	60ba      	str	r2, [r7, #8]
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	83fb      	strh	r3, [r7, #30]
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	1c5a      	adds	r2, r3, #1
 800b830:	60ba      	str	r2, [r7, #8]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	83bb      	strh	r3, [r7, #28]
 800b836:	8bbb      	ldrh	r3, [r7, #28]
 800b838:	2b06      	cmp	r3, #6
 800b83a:	d13f      	bne.n	800b8bc <ipcp_ackci+0x1d0>
 800b83c:	8bfb      	ldrh	r3, [r7, #30]
 800b83e:	2b03      	cmp	r3, #3
 800b840:	d13c      	bne.n	800b8bc <ipcp_ackci+0x1d0>
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	1c5a      	adds	r2, r3, #1
 800b846:	60ba      	str	r2, [r7, #8]
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	021b      	lsls	r3, r3, #8
 800b84c:	613b      	str	r3, [r7, #16]
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	1c5a      	adds	r2, r3, #1
 800b852:	60ba      	str	r2, [r7, #8]
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	461a      	mov	r2, r3
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	613b      	str	r3, [r7, #16]
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	021b      	lsls	r3, r3, #8
 800b862:	613b      	str	r3, [r7, #16]
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	1c5a      	adds	r2, r3, #1
 800b868:	60ba      	str	r2, [r7, #8]
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	461a      	mov	r2, r3
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	4313      	orrs	r3, r2
 800b872:	613b      	str	r3, [r7, #16]
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	021b      	lsls	r3, r3, #8
 800b878:	613b      	str	r3, [r7, #16]
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	1c5a      	adds	r2, r3, #1
 800b87e:	60ba      	str	r2, [r7, #8]
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	461a      	mov	r2, r3
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	4313      	orrs	r3, r2
 800b888:	613b      	str	r3, [r7, #16]
 800b88a:	6938      	ldr	r0, [r7, #16]
 800b88c:	f7f5 fe65 	bl	800155a <lwip_htonl>
 800b890:	6178      	str	r0, [r7, #20]
 800b892:	6a3b      	ldr	r3, [r7, #32]
 800b894:	685a      	ldr	r2, [r3, #4]
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d10c      	bne.n	800b8b6 <ipcp_ackci+0x1ca>
#endif /* UNUSED - WINS */

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d10b      	bne.n	800b8ba <ipcp_ackci+0x1ce>
	goto bad;
    return (1);
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e00b      	b.n	800b8be <ipcp_ackci+0x1d2>
    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800b8a6:	bf00      	nop
 800b8a8:	e008      	b.n	800b8bc <ipcp_ackci+0x1d0>
 800b8aa:	bf00      	nop
 800b8ac:	e006      	b.n	800b8bc <ipcp_ackci+0x1d0>
 800b8ae:	bf00      	nop
 800b8b0:	e004      	b.n	800b8bc <ipcp_ackci+0x1d0>
    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800b8b2:	bf00      	nop
 800b8b4:	e002      	b.n	800b8bc <ipcp_ackci+0x1d0>
 800b8b6:	bf00      	nop
 800b8b8:	e000      	b.n	800b8bc <ipcp_ackci+0x1d0>
	goto bad;
 800b8ba:	bf00      	nop

bad:
    IPCPDEBUG(("ipcp_ackci: received bad Ack!"));
    return (0);
 800b8bc:	2300      	movs	r3, #0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3728      	adds	r7, #40	; 0x28
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <ipcp_nakci>:
 *
 * Returns:
 *	0 - Nak was bad.
 *	1 - Nak was good.
 */
static int ipcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 800b8c6:	b590      	push	{r4, r7, lr}
 800b8c8:	b093      	sub	sp, #76	; 0x4c
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	60f8      	str	r0, [r7, #12]
 800b8ce:	60b9      	str	r1, [r7, #8]
 800b8d0:	607a      	str	r2, [r7, #4]
 800b8d2:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	647b      	str	r3, [r7, #68]	; 0x44
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800b8da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b8e0:	643b      	str	r3, [r7, #64]	; 0x40
    u32_t cidnsaddr;
#endif /* LWIP_DNS */
    ipcp_options no;		/* options we've seen Naks for */
    ipcp_options try_;		/* options to request next time */

    BZERO(&no, sizeof(no));
 800b8e2:	f107 031c 	add.w	r3, r7, #28
 800b8e6:	220c      	movs	r2, #12
 800b8e8:	2100      	movs	r1, #0
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f006 ff4b 	bl	8012786 <memset>
    try_ = *go;
 800b8f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8f2:	f107 0310 	add.w	r3, r7, #16
 800b8f6:	ca07      	ldmia	r2, {r0, r1, r2}
 800b8f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /*
     * Accept the peer's idea of {our,his} address, if different
     * from our idea, only if the accept_{local,remote} flag is set.
     */
    NAKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800b8fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	f003 0301 	and.w	r3, r3, #1
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2b00      	cmp	r3, #0
 800b908:	f040 8096 	bne.w	800ba38 <ipcp_nakci+0x172>
 800b90c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	f003 0302 	and.w	r3, r3, #2
 800b914:	b2db      	uxtb	r3, r3
 800b916:	2b00      	cmp	r3, #0
 800b918:	f000 808e 	beq.w	800ba38 <ipcp_nakci+0x172>
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	785b      	ldrb	r3, [r3, #1]
 800b920:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b924:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b928:	2b0a      	cmp	r3, #10
 800b92a:	f040 8085 	bne.w	800ba38 <ipcp_nakci+0x172>
 800b92e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	429a      	cmp	r2, r3
 800b936:	dc7f      	bgt.n	800ba38 <ipcp_nakci+0x172>
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d17b      	bne.n	800ba38 <ipcp_nakci+0x172>
 800b940:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	1ad3      	subs	r3, r2, r3
 800b948:	607b      	str	r3, [r7, #4]
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	3302      	adds	r3, #2
 800b94e:	60bb      	str	r3, [r7, #8]
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	1c5a      	adds	r2, r3, #1
 800b954:	60ba      	str	r2, [r7, #8]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	021b      	lsls	r3, r3, #8
 800b95a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	1c5a      	adds	r2, r3, #1
 800b960:	60ba      	str	r2, [r7, #8]
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	461a      	mov	r2, r3
 800b966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b968:	4313      	orrs	r3, r2
 800b96a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96e:	021b      	lsls	r3, r3, #8
 800b970:	63bb      	str	r3, [r7, #56]	; 0x38
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	1c5a      	adds	r2, r3, #1
 800b976:	60ba      	str	r2, [r7, #8]
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	461a      	mov	r2, r3
 800b97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97e:	4313      	orrs	r3, r2
 800b980:	63bb      	str	r3, [r7, #56]	; 0x38
 800b982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b984:	021b      	lsls	r3, r3, #8
 800b986:	63bb      	str	r3, [r7, #56]	; 0x38
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	1c5a      	adds	r2, r3, #1
 800b98c:	60ba      	str	r2, [r7, #8]
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	461a      	mov	r2, r3
 800b992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b994:	4313      	orrs	r3, r2
 800b996:	63bb      	str	r3, [r7, #56]	; 0x38
 800b998:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b99a:	f7f5 fdde 	bl	800155a <lwip_htonl>
 800b99e:	6378      	str	r0, [r7, #52]	; 0x34
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	1c5a      	adds	r2, r3, #1
 800b9a4:	60ba      	str	r2, [r7, #8]
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	021b      	lsls	r3, r3, #8
 800b9aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	1c5a      	adds	r2, r3, #1
 800b9b0:	60ba      	str	r2, [r7, #8]
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9be:	021b      	lsls	r3, r3, #8
 800b9c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	1c5a      	adds	r2, r3, #1
 800b9c6:	60ba      	str	r2, [r7, #8]
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d4:	021b      	lsls	r3, r3, #8
 800b9d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	1c5a      	adds	r2, r3, #1
 800b9dc:	60ba      	str	r2, [r7, #8]
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b9ea:	f7f5 fdb6 	bl	800155a <lwip_htonl>
 800b9ee:	6338      	str	r0, [r7, #48]	; 0x30
 800b9f0:	7f3b      	ldrb	r3, [r7, #28]
 800b9f2:	f043 0302 	orr.w	r3, r3, #2
 800b9f6:	773b      	strb	r3, [r7, #28]
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d004      	beq.n	800ba08 <ipcp_nakci+0x142>
 800b9fe:	7c3b      	ldrb	r3, [r7, #16]
 800ba00:	f36f 0341 	bfc	r3, #1, #1
 800ba04:	743b      	strb	r3, [r7, #16]
 800ba06:	e017      	b.n	800ba38 <ipcp_nakci+0x172>
 800ba08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	f003 0308 	and.w	r3, r3, #8
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d004      	beq.n	800ba20 <ipcp_nakci+0x15a>
 800ba16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d001      	beq.n	800ba20 <ipcp_nakci+0x15a>
 800ba1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba1e:	617b      	str	r3, [r7, #20]
 800ba20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	f003 0310 	and.w	r3, r3, #16
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d004      	beq.n	800ba38 <ipcp_nakci+0x172>
 800ba2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d001      	beq.n	800ba38 <ipcp_nakci+0x172>
 800ba34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba36:	61bb      	str	r3, [r7, #24]
		}
	    }
	    );
#endif /* VJ_SUPPORT */

    NAKCIADDR(CI_ADDR, neg_addr,
 800ba38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	f003 0301 	and.w	r3, r3, #1
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f000 816e 	beq.w	800bd24 <ipcp_nakci+0x45e>
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	785b      	ldrb	r3, [r3, #1]
 800ba4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ba50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ba54:	2b06      	cmp	r3, #6
 800ba56:	f040 8165 	bne.w	800bd24 <ipcp_nakci+0x45e>
 800ba5a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	f300 815f 	bgt.w	800bd24 <ipcp_nakci+0x45e>
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	2b03      	cmp	r3, #3
 800ba6c:	f040 815a 	bne.w	800bd24 <ipcp_nakci+0x45e>
 800ba70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	607b      	str	r3, [r7, #4]
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	3302      	adds	r3, #2
 800ba7e:	60bb      	str	r3, [r7, #8]
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	1c5a      	adds	r2, r3, #1
 800ba84:	60ba      	str	r2, [r7, #8]
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	021b      	lsls	r3, r3, #8
 800ba8a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	1c5a      	adds	r2, r3, #1
 800ba90:	60ba      	str	r2, [r7, #8]
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	461a      	mov	r2, r3
 800ba96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9e:	021b      	lsls	r3, r3, #8
 800baa0:	63bb      	str	r3, [r7, #56]	; 0x38
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	1c5a      	adds	r2, r3, #1
 800baa6:	60ba      	str	r2, [r7, #8]
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baae:	4313      	orrs	r3, r2
 800bab0:	63bb      	str	r3, [r7, #56]	; 0x38
 800bab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab4:	021b      	lsls	r3, r3, #8
 800bab6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	1c5a      	adds	r2, r3, #1
 800babc:	60ba      	str	r2, [r7, #8]
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	461a      	mov	r2, r3
 800bac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac4:	4313      	orrs	r3, r2
 800bac6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bac8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800baca:	f7f5 fd46 	bl	800155a <lwip_htonl>
 800bace:	6378      	str	r0, [r7, #52]	; 0x34
 800bad0:	7f3b      	ldrb	r3, [r7, #28]
 800bad2:	f043 0301 	orr.w	r3, r3, #1
 800bad6:	773b      	strb	r3, [r7, #28]
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d008      	beq.n	800baf0 <ipcp_nakci+0x22a>
 800bade:	7c3b      	ldrb	r3, [r7, #16]
 800bae0:	f36f 0300 	bfc	r3, #0, #1
 800bae4:	743b      	strb	r3, [r7, #16]
 800bae6:	7c3b      	ldrb	r3, [r7, #16]
 800bae8:	f36f 0341 	bfc	r3, #1, #1
 800baec:	743b      	strb	r3, [r7, #16]
 800baee:	e119      	b.n	800bd24 <ipcp_nakci+0x45e>
 800baf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	f003 0308 	and.w	r3, r3, #8
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	f000 8112 	beq.w	800bd24 <ipcp_nakci+0x45e>
 800bb00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	f000 810e 	beq.w	800bd24 <ipcp_nakci+0x45e>
 800bb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb0a:	617b      	str	r3, [r7, #20]
     * If they want to negotiate about IP addresses, we comply.
     * If they want us to ask for compression, we refuse.
     * If they want us to ask for ms-dns, we do that, since some
     * peers get huffy if we don't.
     */
    while (len >= CILEN_VOID) {
 800bb0c:	e10a      	b.n	800bd24 <ipcp_nakci+0x45e>
	GETCHAR(citype, p);
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	1c5a      	adds	r2, r3, #1
 800bb12:	60ba      	str	r2, [r7, #8]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GETCHAR(cilen, p);
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	1c5a      	adds	r2, r3, #1
 800bb1e:	60ba      	str	r2, [r7, #8]
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if ( cilen < CILEN_VOID || (len -= cilen) < 0 )
 800bb26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	f240 810c 	bls.w	800bd48 <ipcp_nakci+0x482>
 800bb30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	607b      	str	r3, [r7, #4]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f2c0 8103 	blt.w	800bd48 <ipcp_nakci+0x482>
	    goto bad;
	next = p + cilen - 2;
 800bb42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bb46:	3b02      	subs	r3, #2
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	62bb      	str	r3, [r7, #40]	; 0x28

	switch (citype) {
 800bb4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d003      	beq.n	800bb5e <ipcp_nakci+0x298>
 800bb56:	2b03      	cmp	r3, #3
 800bb58:	f000 808d 	beq.w	800bc76 <ipcp_nakci+0x3b0>
	    if (ciaddr1)
		try_.winsaddr[citype == CI_MS_WINS2] = ciaddr1;
	    break;
#endif /* UNUSED - WINS */
	default:
	    break;
 800bb5c:	e0e0      	b.n	800bd20 <ipcp_nakci+0x45a>
	    if ((!go->neg_addr && go->old_addrs) || no.old_addrs
 800bb5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	f003 0301 	and.w	r3, r3, #1
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d107      	bne.n	800bb7c <ipcp_nakci+0x2b6>
 800bb6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	f003 0302 	and.w	r3, r3, #2
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	f040 80e6 	bne.w	800bd48 <ipcp_nakci+0x482>
 800bb7c:	7f3b      	ldrb	r3, [r7, #28]
 800bb7e:	f003 0302 	and.w	r3, r3, #2
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f040 80df 	bne.w	800bd48 <ipcp_nakci+0x482>
		|| cilen != CILEN_ADDRS)
 800bb8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bb8e:	2b0a      	cmp	r3, #10
 800bb90:	f040 80da 	bne.w	800bd48 <ipcp_nakci+0x482>
	    try_.neg_addr = 0;
 800bb94:	7c3b      	ldrb	r3, [r7, #16]
 800bb96:	f36f 0300 	bfc	r3, #0, #1
 800bb9a:	743b      	strb	r3, [r7, #16]
	    GETLONG(l, p);
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	1c5a      	adds	r2, r3, #1
 800bba0:	60ba      	str	r2, [r7, #8]
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	021b      	lsls	r3, r3, #8
 800bba6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	1c5a      	adds	r2, r3, #1
 800bbac:	60ba      	str	r2, [r7, #8]
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbba:	021b      	lsls	r3, r3, #8
 800bbbc:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	1c5a      	adds	r2, r3, #1
 800bbc2:	60ba      	str	r2, [r7, #8]
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd0:	021b      	lsls	r3, r3, #8
 800bbd2:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	1c5a      	adds	r2, r3, #1
 800bbd8:	60ba      	str	r2, [r7, #8]
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	461a      	mov	r2, r3
 800bbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr1 = lwip_htonl(l);
 800bbe4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bbe6:	f7f5 fcb8 	bl	800155a <lwip_htonl>
 800bbea:	6378      	str	r0, [r7, #52]	; 0x34
	    if (ciaddr1 && go->accept_local)
 800bbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d008      	beq.n	800bc04 <ipcp_nakci+0x33e>
 800bbf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	f003 0308 	and.w	r3, r3, #8
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d001      	beq.n	800bc04 <ipcp_nakci+0x33e>
		try_.ouraddr = ciaddr1;
 800bc00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc02:	617b      	str	r3, [r7, #20]
	    GETLONG(l, p);
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	1c5a      	adds	r2, r3, #1
 800bc08:	60ba      	str	r2, [r7, #8]
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	021b      	lsls	r3, r3, #8
 800bc0e:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	1c5a      	adds	r2, r3, #1
 800bc14:	60ba      	str	r2, [r7, #8]
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	461a      	mov	r2, r3
 800bc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc22:	021b      	lsls	r3, r3, #8
 800bc24:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	1c5a      	adds	r2, r3, #1
 800bc2a:	60ba      	str	r2, [r7, #8]
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	461a      	mov	r2, r3
 800bc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc32:	4313      	orrs	r3, r2
 800bc34:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc38:	021b      	lsls	r3, r3, #8
 800bc3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	1c5a      	adds	r2, r3, #1
 800bc40:	60ba      	str	r2, [r7, #8]
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	461a      	mov	r2, r3
 800bc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr2 = lwip_htonl(l);
 800bc4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc4e:	f7f5 fc84 	bl	800155a <lwip_htonl>
 800bc52:	6338      	str	r0, [r7, #48]	; 0x30
	    if (ciaddr2 && go->accept_remote)
 800bc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d008      	beq.n	800bc6c <ipcp_nakci+0x3a6>
 800bc5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	f003 0310 	and.w	r3, r3, #16
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d001      	beq.n	800bc6c <ipcp_nakci+0x3a6>
		try_.hisaddr = ciaddr2;
 800bc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6a:	61bb      	str	r3, [r7, #24]
	    no.old_addrs = 1;
 800bc6c:	7f3b      	ldrb	r3, [r7, #28]
 800bc6e:	f043 0302 	orr.w	r3, r3, #2
 800bc72:	773b      	strb	r3, [r7, #28]
	    break;
 800bc74:	e054      	b.n	800bd20 <ipcp_nakci+0x45a>
	    if (go->neg_addr || no.neg_addr || cilen != CILEN_ADDR)
 800bc76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	f003 0301 	and.w	r3, r3, #1
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d161      	bne.n	800bd48 <ipcp_nakci+0x482>
 800bc84:	7f3b      	ldrb	r3, [r7, #28]
 800bc86:	f003 0301 	and.w	r3, r3, #1
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d15b      	bne.n	800bd48 <ipcp_nakci+0x482>
 800bc90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bc94:	2b06      	cmp	r3, #6
 800bc96:	d157      	bne.n	800bd48 <ipcp_nakci+0x482>
	    try_.old_addrs = 0;
 800bc98:	7c3b      	ldrb	r3, [r7, #16]
 800bc9a:	f36f 0341 	bfc	r3, #1, #1
 800bc9e:	743b      	strb	r3, [r7, #16]
	    GETLONG(l, p);
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	1c5a      	adds	r2, r3, #1
 800bca4:	60ba      	str	r2, [r7, #8]
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	021b      	lsls	r3, r3, #8
 800bcaa:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	1c5a      	adds	r2, r3, #1
 800bcb0:	60ba      	str	r2, [r7, #8]
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcbe:	021b      	lsls	r3, r3, #8
 800bcc0:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	1c5a      	adds	r2, r3, #1
 800bcc6:	60ba      	str	r2, [r7, #8]
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	461a      	mov	r2, r3
 800bccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd4:	021b      	lsls	r3, r3, #8
 800bcd6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	1c5a      	adds	r2, r3, #1
 800bcdc:	60ba      	str	r2, [r7, #8]
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	461a      	mov	r2, r3
 800bce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce4:	4313      	orrs	r3, r2
 800bce6:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr1 = lwip_htonl(l);
 800bce8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bcea:	f7f5 fc36 	bl	800155a <lwip_htonl>
 800bcee:	6378      	str	r0, [r7, #52]	; 0x34
	    if (ciaddr1 && go->accept_local)
 800bcf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d008      	beq.n	800bd08 <ipcp_nakci+0x442>
 800bcf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	f003 0308 	and.w	r3, r3, #8
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <ipcp_nakci+0x442>
		try_.ouraddr = ciaddr1;
 800bd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd06:	617b      	str	r3, [r7, #20]
	    if (try_.ouraddr != 0)
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d003      	beq.n	800bd16 <ipcp_nakci+0x450>
		try_.neg_addr = 1;
 800bd0e:	7c3b      	ldrb	r3, [r7, #16]
 800bd10:	f043 0301 	orr.w	r3, r3, #1
 800bd14:	743b      	strb	r3, [r7, #16]
	    no.neg_addr = 1;
 800bd16:	7f3b      	ldrb	r3, [r7, #28]
 800bd18:	f043 0301 	orr.w	r3, r3, #1
 800bd1c:	773b      	strb	r3, [r7, #28]
	    break;
 800bd1e:	bf00      	nop
	}
	p = next;
 800bd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd22:	60bb      	str	r3, [r7, #8]
    while (len >= CILEN_VOID) {
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	f73f aef1 	bgt.w	800bb0e <ipcp_nakci+0x248>

    /*
     * OK, the Nak is good.  Now we can update state.
     * If there are any remaining options, we ignore them.
     */
    if (f->state != PPP_FSM_OPENED)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	7c1b      	ldrb	r3, [r3, #16]
 800bd30:	2b09      	cmp	r3, #9
 800bd32:	d007      	beq.n	800bd44 <ipcp_nakci+0x47e>
	*go = try_;
 800bd34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd36:	461c      	mov	r4, r3
 800bd38:	f107 0310 	add.w	r3, r7, #16
 800bd3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd40:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    return 1;
 800bd44:	2301      	movs	r3, #1
 800bd46:	e000      	b.n	800bd4a <ipcp_nakci+0x484>

bad:
    IPCPDEBUG(("ipcp_nakci: received bad Nak!"));
    return 0;
 800bd48:	2300      	movs	r3, #0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	374c      	adds	r7, #76	; 0x4c
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd90      	pop	{r4, r7, pc}

0800bd52 <ipcp_rejci>:

/*
 * ipcp_rejci - Reject some of our CIs.
 * Callback from fsm_rconfnakrej.
 */
static int ipcp_rejci(fsm *f, u_char *p, int len) {
 800bd52:	b590      	push	{r4, r7, lr}
 800bd54:	b08f      	sub	sp, #60	; 0x3c
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	60f8      	str	r0, [r7, #12]
 800bd5a:	60b9      	str	r1, [r7, #8]
 800bd5c:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	637b      	str	r3, [r7, #52]	; 0x34
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800bd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd66:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bd6a:	633b      	str	r3, [r7, #48]	; 0x30
    u_short cishort;
#endif /* VJ_SUPPORT */
    u32_t cilong;
    ipcp_options try_;		/* options to request next time */

    try_ = *go;
 800bd6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd6e:	f107 0314 	add.w	r3, r7, #20
 800bd72:	ca07      	ldmia	r2, {r0, r1, r2}
 800bd74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    goto bad; \
	try_.winsaddr[opt == CI_MS_WINS2] = 0; \
    }
#endif /* UNUSED - WINS */

    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800bd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	f003 0301 	and.w	r3, r3, #1
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d17e      	bne.n	800be84 <ipcp_rejci+0x132>
 800bd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	f003 0302 	and.w	r3, r3, #2
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d077      	beq.n	800be84 <ipcp_rejci+0x132>
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	785b      	ldrb	r3, [r3, #1]
 800bd98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bd9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bda0:	2b0a      	cmp	r3, #10
 800bda2:	d16f      	bne.n	800be84 <ipcp_rejci+0x132>
 800bda4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	dc6a      	bgt.n	800be84 <ipcp_rejci+0x132>
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d166      	bne.n	800be84 <ipcp_rejci+0x132>
 800bdb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	607b      	str	r3, [r7, #4]
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	3302      	adds	r3, #2
 800bdc4:	60bb      	str	r3, [r7, #8]
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	1c5a      	adds	r2, r3, #1
 800bdca:	60ba      	str	r2, [r7, #8]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	021b      	lsls	r3, r3, #8
 800bdd0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	1c5a      	adds	r2, r3, #1
 800bdd6:	60ba      	str	r2, [r7, #8]
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	461a      	mov	r2, r3
 800bddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdde:	4313      	orrs	r3, r2
 800bde0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde4:	021b      	lsls	r3, r3, #8
 800bde6:	62bb      	str	r3, [r7, #40]	; 0x28
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	1c5a      	adds	r2, r3, #1
 800bdec:	60ba      	str	r2, [r7, #8]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfa:	021b      	lsls	r3, r3, #8
 800bdfc:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	1c5a      	adds	r2, r3, #1
 800be02:	60ba      	str	r2, [r7, #8]
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	461a      	mov	r2, r3
 800be08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0a:	4313      	orrs	r3, r2
 800be0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800be0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be10:	f7f5 fba3 	bl	800155a <lwip_htonl>
 800be14:	6278      	str	r0, [r7, #36]	; 0x24
 800be16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be18:	685a      	ldr	r2, [r3, #4]
 800be1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1c:	429a      	cmp	r2, r3
 800be1e:	f040 8093 	bne.w	800bf48 <ipcp_rejci+0x1f6>
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	1c5a      	adds	r2, r3, #1
 800be26:	60ba      	str	r2, [r7, #8]
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	021b      	lsls	r3, r3, #8
 800be2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	1c5a      	adds	r2, r3, #1
 800be32:	60ba      	str	r2, [r7, #8]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	461a      	mov	r2, r3
 800be38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3a:	4313      	orrs	r3, r2
 800be3c:	62bb      	str	r3, [r7, #40]	; 0x28
 800be3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be40:	021b      	lsls	r3, r3, #8
 800be42:	62bb      	str	r3, [r7, #40]	; 0x28
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	1c5a      	adds	r2, r3, #1
 800be48:	60ba      	str	r2, [r7, #8]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	461a      	mov	r2, r3
 800be4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be50:	4313      	orrs	r3, r2
 800be52:	62bb      	str	r3, [r7, #40]	; 0x28
 800be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be56:	021b      	lsls	r3, r3, #8
 800be58:	62bb      	str	r3, [r7, #40]	; 0x28
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	1c5a      	adds	r2, r3, #1
 800be5e:	60ba      	str	r2, [r7, #8]
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	461a      	mov	r2, r3
 800be64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be66:	4313      	orrs	r3, r2
 800be68:	62bb      	str	r3, [r7, #40]	; 0x28
 800be6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be6c:	f7f5 fb75 	bl	800155a <lwip_htonl>
 800be70:	6278      	str	r0, [r7, #36]	; 0x24
 800be72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be74:	689a      	ldr	r2, [r3, #8]
 800be76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be78:	429a      	cmp	r2, r3
 800be7a:	d167      	bne.n	800bf4c <ipcp_rejci+0x1fa>
 800be7c:	7d3b      	ldrb	r3, [r7, #20]
 800be7e:	f36f 0341 	bfc	r3, #1, #1
 800be82:	753b      	strb	r3, [r7, #20]
#if VJ_SUPPORT
    REJCIVJ(CI_COMPRESSTYPE, neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800be84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	f003 0301 	and.w	r3, r3, #1
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d049      	beq.n	800bf26 <ipcp_rejci+0x1d4>
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	785b      	ldrb	r3, [r3, #1]
 800be96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800be9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be9e:	2b06      	cmp	r3, #6
 800bea0:	d141      	bne.n	800bf26 <ipcp_rejci+0x1d4>
 800bea2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	dc3c      	bgt.n	800bf26 <ipcp_rejci+0x1d4>
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	2b03      	cmp	r3, #3
 800beb2:	d138      	bne.n	800bf26 <ipcp_rejci+0x1d4>
 800beb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	1ad3      	subs	r3, r2, r3
 800bebc:	607b      	str	r3, [r7, #4]
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	3302      	adds	r3, #2
 800bec2:	60bb      	str	r3, [r7, #8]
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	1c5a      	adds	r2, r3, #1
 800bec8:	60ba      	str	r2, [r7, #8]
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	021b      	lsls	r3, r3, #8
 800bece:	623b      	str	r3, [r7, #32]
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	1c5a      	adds	r2, r3, #1
 800bed4:	60ba      	str	r2, [r7, #8]
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	461a      	mov	r2, r3
 800beda:	6a3b      	ldr	r3, [r7, #32]
 800bedc:	4313      	orrs	r3, r2
 800bede:	623b      	str	r3, [r7, #32]
 800bee0:	6a3b      	ldr	r3, [r7, #32]
 800bee2:	021b      	lsls	r3, r3, #8
 800bee4:	623b      	str	r3, [r7, #32]
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	1c5a      	adds	r2, r3, #1
 800beea:	60ba      	str	r2, [r7, #8]
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	461a      	mov	r2, r3
 800bef0:	6a3b      	ldr	r3, [r7, #32]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	623b      	str	r3, [r7, #32]
 800bef6:	6a3b      	ldr	r3, [r7, #32]
 800bef8:	021b      	lsls	r3, r3, #8
 800befa:	623b      	str	r3, [r7, #32]
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	1c5a      	adds	r2, r3, #1
 800bf00:	60ba      	str	r2, [r7, #8]
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	461a      	mov	r2, r3
 800bf06:	6a3b      	ldr	r3, [r7, #32]
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	623b      	str	r3, [r7, #32]
 800bf0c:	6a38      	ldr	r0, [r7, #32]
 800bf0e:	f7f5 fb24 	bl	800155a <lwip_htonl>
 800bf12:	6278      	str	r0, [r7, #36]	; 0x24
 800bf14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf16:	685a      	ldr	r2, [r3, #4]
 800bf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d118      	bne.n	800bf50 <ipcp_rejci+0x1fe>
 800bf1e:	7d3b      	ldrb	r3, [r7, #20]
 800bf20:	f36f 0300 	bfc	r3, #0, #1
 800bf24:	753b      	strb	r3, [r7, #20]
#endif /* UNUSED - WINS */

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d113      	bne.n	800bf54 <ipcp_rejci+0x202>
	goto bad;
    /*
     * Now we can update state.
     */
    if (f->state != PPP_FSM_OPENED)
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	7c1b      	ldrb	r3, [r3, #16]
 800bf30:	2b09      	cmp	r3, #9
 800bf32:	d007      	beq.n	800bf44 <ipcp_rejci+0x1f2>
	*go = try_;
 800bf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf36:	461c      	mov	r4, r3
 800bf38:	f107 0314 	add.w	r3, r7, #20
 800bf3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bf40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return 1;
 800bf44:	2301      	movs	r3, #1
 800bf46:	e007      	b.n	800bf58 <ipcp_rejci+0x206>
    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800bf48:	bf00      	nop
 800bf4a:	e004      	b.n	800bf56 <ipcp_rejci+0x204>
 800bf4c:	bf00      	nop
 800bf4e:	e002      	b.n	800bf56 <ipcp_rejci+0x204>
    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800bf50:	bf00      	nop
 800bf52:	e000      	b.n	800bf56 <ipcp_rejci+0x204>
	goto bad;
 800bf54:	bf00      	nop

bad:
    IPCPDEBUG(("ipcp_rejci: received bad Reject!"));
    return 0;
 800bf56:	2300      	movs	r3, #0
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	373c      	adds	r7, #60	; 0x3c
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd90      	pop	{r4, r7, pc}

0800bf60 <ipcp_reqci>:
 * CONFNAK; returns CONFREJ if it can't return CONFACK.
 *
 * inp = Requested CIs
 * len = Length of requested CIs
 */
static int ipcp_reqci(fsm *f, u_char *inp, int *len, int reject_if_disagree) {
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b094      	sub	sp, #80	; 0x50
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
 800bf6c:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	633b      	str	r3, [r7, #48]	; 0x30
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800bf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf76:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800bf7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7e:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800bf82:	62bb      	str	r3, [r7, #40]	; 0x28
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800bf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf86:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800bf8a:	627b      	str	r3, [r7, #36]	; 0x24
    u_short cilen, citype;	/* Parsed len, type */
#if VJ_SUPPORT
    u_short cishort;		/* Parsed short value */
#endif /* VJ_SUPPORT */
    u32_t tl, ciaddr1, ciaddr2;/* Parsed address values */
    int rc = CONFACK;		/* Final packet return code */
 800bf8c:	2302      	movs	r3, #2
 800bf8e:	647b      	str	r3, [r7, #68]	; 0x44
    int orc;			/* Individual option return code */
    u_char *p;			/* Pointer to next char to parse */
    u_char *ucp = inp;		/* Pointer to current output char */
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	63bb      	str	r3, [r7, #56]	; 0x38
    int l = *len;		/* Length left */
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_DNS */

    /*
     * Reset all his options.
     */
    BZERO(ho, sizeof(*ho));
 800bf9a:	220c      	movs	r2, #12
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfa0:	f006 fbf1 	bl	8012786 <memset>
    
    /*
     * Process all his options.
     */
    next = inp;
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	64fb      	str	r3, [r7, #76]	; 0x4c
    while (l) {
 800bfa8:	e1f3      	b.n	800c392 <ipcp_reqci+0x432>
	orc = CONFACK;			/* Assume success */
 800bfaa:	2302      	movs	r3, #2
 800bfac:	643b      	str	r3, [r7, #64]	; 0x40
	cip = p = next;			/* Remember beginning of CI */
 800bfae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb4:	623b      	str	r3, [r7, #32]
	if (l < 2 ||			/* Not enough data for CI header or */
 800bfb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	dd0b      	ble.n	800bfd4 <ipcp_reqci+0x74>
	    p[1] < 2 ||			/*  CI length too small or */
 800bfbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	781b      	ldrb	r3, [r3, #0]
	if (l < 2 ||			/* Not enough data for CI header or */
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	d906      	bls.n	800bfd4 <ipcp_reqci+0x74>
	    p[1] > l) {			/*  CI length too big? */
 800bfc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc8:	3301      	adds	r3, #1
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	461a      	mov	r2, r3
	    p[1] < 2 ||			/*  CI length too small or */
 800bfce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	dd07      	ble.n	800bfe4 <ipcp_reqci+0x84>
	    IPCPDEBUG(("ipcp_reqci: bad CI length!"));
	    orc = CONFREJ;		/* Reject bad CI */
 800bfd4:	2304      	movs	r3, #4
 800bfd6:	643b      	str	r3, [r7, #64]	; 0x40
	    cilen = l;			/* Reject till end of packet */
 800bfd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfda:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	    l = 0;			/* Don't loop again */
 800bfde:	2300      	movs	r3, #0
 800bfe0:	637b      	str	r3, [r7, #52]	; 0x34
	    goto endswitch;
 800bfe2:	e1a1      	b.n	800c328 <ipcp_reqci+0x3c8>
	}
	GETCHAR(citype, p);		/* Parse CI type */
 800bfe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfe6:	1c5a      	adds	r2, r3, #1
 800bfe8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	83fb      	strh	r3, [r7, #30]
	GETCHAR(cilen, p);		/* Parse CI length */
 800bfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bff0:	1c5a      	adds	r2, r3, #1
 800bff2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	l -= cilen;			/* Adjust remaining length */
 800bffa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c000:	1ad3      	subs	r3, r2, r3
 800c002:	637b      	str	r3, [r7, #52]	; 0x34
	next += cilen;			/* Step to next CI */
 800c004:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c008:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c00a:	4413      	add	r3, r2
 800c00c:	64fb      	str	r3, [r7, #76]	; 0x4c

	switch (citype) {		/* Check CI type */
 800c00e:	8bfb      	ldrh	r3, [r7, #30]
 800c010:	2b01      	cmp	r3, #1
 800c012:	d003      	beq.n	800c01c <ipcp_reqci+0xbc>
 800c014:	2b03      	cmp	r3, #3
 800c016:	f000 80f6 	beq.w	800c206 <ipcp_reqci+0x2a6>
 800c01a:	e182      	b.n	800c322 <ipcp_reqci+0x3c2>
	case CI_ADDRS:
	    if (!ao->old_addrs || ho->neg_addr ||
 800c01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	f003 0302 	and.w	r3, r3, #2
 800c024:	b2db      	uxtb	r3, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00a      	beq.n	800c040 <ipcp_reqci+0xe0>
 800c02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	f003 0301 	and.w	r3, r3, #1
 800c032:	b2db      	uxtb	r3, r3
 800c034:	2b00      	cmp	r3, #0
 800c036:	d103      	bne.n	800c040 <ipcp_reqci+0xe0>
 800c038:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c03c:	2b0a      	cmp	r3, #10
 800c03e:	d002      	beq.n	800c046 <ipcp_reqci+0xe6>
		cilen != CILEN_ADDRS) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800c040:	2304      	movs	r3, #4
 800c042:	643b      	str	r3, [r7, #64]	; 0x40
		break;
 800c044:	e170      	b.n	800c328 <ipcp_reqci+0x3c8>
	     * If he has no address, or if we both have his address but
	     * disagree about it, then NAK it with our idea.
	     * In particular, if we don't know his address, but he does,
	     * then accept it.
	     */
	    GETLONG(tl, p);		/* Parse source address (his) */
 800c046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c048:	1c5a      	adds	r2, r3, #1
 800c04a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	021b      	lsls	r3, r3, #8
 800c050:	61bb      	str	r3, [r7, #24]
 800c052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c054:	1c5a      	adds	r2, r3, #1
 800c056:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	461a      	mov	r2, r3
 800c05c:	69bb      	ldr	r3, [r7, #24]
 800c05e:	4313      	orrs	r3, r2
 800c060:	61bb      	str	r3, [r7, #24]
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	021b      	lsls	r3, r3, #8
 800c066:	61bb      	str	r3, [r7, #24]
 800c068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c06a:	1c5a      	adds	r2, r3, #1
 800c06c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	461a      	mov	r2, r3
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	4313      	orrs	r3, r2
 800c076:	61bb      	str	r3, [r7, #24]
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	021b      	lsls	r3, r3, #8
 800c07c:	61bb      	str	r3, [r7, #24]
 800c07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c080:	1c5a      	adds	r2, r3, #1
 800c082:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	461a      	mov	r2, r3
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	61bb      	str	r3, [r7, #24]
	    ciaddr1 = lwip_htonl(tl);
 800c08e:	69b8      	ldr	r0, [r7, #24]
 800c090:	f7f5 fa63 	bl	800155a <lwip_htonl>
 800c094:	6178      	str	r0, [r7, #20]
	    if (ciaddr1 != wo->hisaddr
 800c096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c098:	689a      	ldr	r2, [r3, #8]
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d033      	beq.n	800c108 <ipcp_reqci+0x1a8>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d006      	beq.n	800c0b4 <ipcp_reqci+0x154>
 800c0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	f003 0310 	and.w	r3, r3, #16
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d129      	bne.n	800c108 <ipcp_reqci+0x1a8>
		orc = CONFNAK;
 800c0b4:	2303      	movs	r3, #3
 800c0b6:	643b      	str	r3, [r7, #64]	; 0x40
		if (!reject_if_disagree) {
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d133      	bne.n	800c126 <ipcp_reqci+0x1c6>
		    DECPTR(sizeof(u32_t), p);
 800c0be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0c0:	3b04      	subs	r3, #4
 800c0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
		    tl = lwip_ntohl(wo->hisaddr);
 800c0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7f5 fa46 	bl	800155a <lwip_htonl>
 800c0ce:	61b8      	str	r0, [r7, #24]
		    PUTLONG(tl, p);
 800c0d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0d2:	1c5a      	adds	r2, r3, #1
 800c0d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c0d6:	69ba      	ldr	r2, [r7, #24]
 800c0d8:	0e12      	lsrs	r2, r2, #24
 800c0da:	b2d2      	uxtb	r2, r2
 800c0dc:	701a      	strb	r2, [r3, #0]
 800c0de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e0:	1c5a      	adds	r2, r3, #1
 800c0e2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c0e4:	69ba      	ldr	r2, [r7, #24]
 800c0e6:	0c12      	lsrs	r2, r2, #16
 800c0e8:	b2d2      	uxtb	r2, r2
 800c0ea:	701a      	strb	r2, [r3, #0]
 800c0ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ee:	1c5a      	adds	r2, r3, #1
 800c0f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c0f2:	69ba      	ldr	r2, [r7, #24]
 800c0f4:	0a12      	lsrs	r2, r2, #8
 800c0f6:	b2d2      	uxtb	r2, r2
 800c0f8:	701a      	strb	r2, [r3, #0]
 800c0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0fc:	1c5a      	adds	r2, r3, #1
 800c0fe:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c100:	69ba      	ldr	r2, [r7, #24]
 800c102:	b2d2      	uxtb	r2, r2
 800c104:	701a      	strb	r2, [r3, #0]
		if (!reject_if_disagree) {
 800c106:	e00e      	b.n	800c126 <ipcp_reqci+0x1c6>
		}
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d10b      	bne.n	800c126 <ipcp_reqci+0x1c6>
 800c10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d107      	bne.n	800c126 <ipcp_reqci+0x1c6>
		/*
		 * If neither we nor he knows his address, reject the option.
		 */
		orc = CONFREJ;
 800c116:	2304      	movs	r3, #4
 800c118:	643b      	str	r3, [r7, #64]	; 0x40
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 800c11a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c11c:	7813      	ldrb	r3, [r2, #0]
 800c11e:	f36f 0382 	bfc	r3, #2, #1
 800c122:	7013      	strb	r3, [r2, #0]
		break;
 800c124:	e100      	b.n	800c328 <ipcp_reqci+0x3c8>

	    /*
	     * If he doesn't know our address, or if we both have our address
	     * but disagree about it, then NAK it with our idea.
	     */
	    GETLONG(tl, p);		/* Parse destination address (ours) */
 800c126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c128:	1c5a      	adds	r2, r3, #1
 800c12a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	021b      	lsls	r3, r3, #8
 800c130:	61bb      	str	r3, [r7, #24]
 800c132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c134:	1c5a      	adds	r2, r3, #1
 800c136:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	461a      	mov	r2, r3
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	4313      	orrs	r3, r2
 800c140:	61bb      	str	r3, [r7, #24]
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	021b      	lsls	r3, r3, #8
 800c146:	61bb      	str	r3, [r7, #24]
 800c148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c14a:	1c5a      	adds	r2, r3, #1
 800c14c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	461a      	mov	r2, r3
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	4313      	orrs	r3, r2
 800c156:	61bb      	str	r3, [r7, #24]
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	021b      	lsls	r3, r3, #8
 800c15c:	61bb      	str	r3, [r7, #24]
 800c15e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c160:	1c5a      	adds	r2, r3, #1
 800c162:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	461a      	mov	r2, r3
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	61bb      	str	r3, [r7, #24]
	    ciaddr2 = lwip_htonl(tl);
 800c16e:	69b8      	ldr	r0, [r7, #24]
 800c170:	f7f5 f9f3 	bl	800155a <lwip_htonl>
 800c174:	6138      	str	r0, [r7, #16]
	    if (ciaddr2 != wo->ouraddr) {
 800c176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c178:	685a      	ldr	r2, [r3, #4]
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d036      	beq.n	800c1ee <ipcp_reqci+0x28e>
		if (ciaddr2 == 0 || !wo->accept_local) {
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d006      	beq.n	800c194 <ipcp_reqci+0x234>
 800c186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	f003 0308 	and.w	r3, r3, #8
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	2b00      	cmp	r3, #0
 800c192:	d129      	bne.n	800c1e8 <ipcp_reqci+0x288>
		    orc = CONFNAK;
 800c194:	2303      	movs	r3, #3
 800c196:	643b      	str	r3, [r7, #64]	; 0x40
		    if (!reject_if_disagree) {
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d127      	bne.n	800c1ee <ipcp_reqci+0x28e>
			DECPTR(sizeof(u32_t), p);
 800c19e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1a0:	3b04      	subs	r3, #4
 800c1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
			tl = lwip_ntohl(wo->ouraddr);
 800c1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7f5 f9d6 	bl	800155a <lwip_htonl>
 800c1ae:	61b8      	str	r0, [r7, #24]
			PUTLONG(tl, p);
 800c1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1b2:	1c5a      	adds	r2, r3, #1
 800c1b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c1b6:	69ba      	ldr	r2, [r7, #24]
 800c1b8:	0e12      	lsrs	r2, r2, #24
 800c1ba:	b2d2      	uxtb	r2, r2
 800c1bc:	701a      	strb	r2, [r3, #0]
 800c1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1c0:	1c5a      	adds	r2, r3, #1
 800c1c2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c1c4:	69ba      	ldr	r2, [r7, #24]
 800c1c6:	0c12      	lsrs	r2, r2, #16
 800c1c8:	b2d2      	uxtb	r2, r2
 800c1ca:	701a      	strb	r2, [r3, #0]
 800c1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ce:	1c5a      	adds	r2, r3, #1
 800c1d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c1d2:	69ba      	ldr	r2, [r7, #24]
 800c1d4:	0a12      	lsrs	r2, r2, #8
 800c1d6:	b2d2      	uxtb	r2, r2
 800c1d8:	701a      	strb	r2, [r3, #0]
 800c1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1dc:	1c5a      	adds	r2, r3, #1
 800c1de:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c1e0:	69ba      	ldr	r2, [r7, #24]
 800c1e2:	b2d2      	uxtb	r2, r2
 800c1e4:	701a      	strb	r2, [r3, #0]
		    if (!reject_if_disagree) {
 800c1e6:	e002      	b.n	800c1ee <ipcp_reqci+0x28e>
		    }
		} else {
		    wo->ouraddr = ciaddr2;	/* accept peer's idea */
 800c1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ea:	693a      	ldr	r2, [r7, #16]
 800c1ec:	605a      	str	r2, [r3, #4]
		}
	    }

	    ho->old_addrs = 1;
 800c1ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1f0:	7813      	ldrb	r3, [r2, #0]
 800c1f2:	f043 0302 	orr.w	r3, r3, #2
 800c1f6:	7013      	strb	r3, [r2, #0]
	    ho->hisaddr = ciaddr1;
 800c1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fa:	697a      	ldr	r2, [r7, #20]
 800c1fc:	609a      	str	r2, [r3, #8]
	    ho->ouraddr = ciaddr2;
 800c1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c200:	693a      	ldr	r2, [r7, #16]
 800c202:	605a      	str	r2, [r3, #4]
	    break;
 800c204:	e090      	b.n	800c328 <ipcp_reqci+0x3c8>

	case CI_ADDR:
	    if (!ao->neg_addr || ho->old_addrs ||
 800c206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	f003 0301 	and.w	r3, r3, #1
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00a      	beq.n	800c22a <ipcp_reqci+0x2ca>
 800c214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	f003 0302 	and.w	r3, r3, #2
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d103      	bne.n	800c22a <ipcp_reqci+0x2ca>
 800c222:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c226:	2b06      	cmp	r3, #6
 800c228:	d002      	beq.n	800c230 <ipcp_reqci+0x2d0>
		cilen != CILEN_ADDR) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800c22a:	2304      	movs	r3, #4
 800c22c:	643b      	str	r3, [r7, #64]	; 0x40
		break;
 800c22e:	e07b      	b.n	800c328 <ipcp_reqci+0x3c8>
	     * If he has no address, or if we both have his address but
	     * disagree about it, then NAK it with our idea.
	     * In particular, if we don't know his address, but he does,
	     * then accept it.
	     */
	    GETLONG(tl, p);	/* Parse source address (his) */
 800c230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c232:	1c5a      	adds	r2, r3, #1
 800c234:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	021b      	lsls	r3, r3, #8
 800c23a:	61bb      	str	r3, [r7, #24]
 800c23c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c23e:	1c5a      	adds	r2, r3, #1
 800c240:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	461a      	mov	r2, r3
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	4313      	orrs	r3, r2
 800c24a:	61bb      	str	r3, [r7, #24]
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	021b      	lsls	r3, r3, #8
 800c250:	61bb      	str	r3, [r7, #24]
 800c252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c254:	1c5a      	adds	r2, r3, #1
 800c256:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	461a      	mov	r2, r3
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	4313      	orrs	r3, r2
 800c260:	61bb      	str	r3, [r7, #24]
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	021b      	lsls	r3, r3, #8
 800c266:	61bb      	str	r3, [r7, #24]
 800c268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c26a:	1c5a      	adds	r2, r3, #1
 800c26c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	461a      	mov	r2, r3
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	4313      	orrs	r3, r2
 800c276:	61bb      	str	r3, [r7, #24]
	    ciaddr1 = lwip_htonl(tl);
 800c278:	69b8      	ldr	r0, [r7, #24]
 800c27a:	f7f5 f96e 	bl	800155a <lwip_htonl>
 800c27e:	6178      	str	r0, [r7, #20]
	    if (ciaddr1 != wo->hisaddr
 800c280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c282:	689a      	ldr	r2, [r3, #8]
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	429a      	cmp	r2, r3
 800c288:	d033      	beq.n	800c2f2 <ipcp_reqci+0x392>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d006      	beq.n	800c29e <ipcp_reqci+0x33e>
 800c290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	f003 0310 	and.w	r3, r3, #16
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d129      	bne.n	800c2f2 <ipcp_reqci+0x392>
		orc = CONFNAK;
 800c29e:	2303      	movs	r3, #3
 800c2a0:	643b      	str	r3, [r7, #64]	; 0x40
		if (!reject_if_disagree) {
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d133      	bne.n	800c310 <ipcp_reqci+0x3b0>
		    DECPTR(sizeof(u32_t), p);
 800c2a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2aa:	3b04      	subs	r3, #4
 800c2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		    tl = lwip_ntohl(wo->hisaddr);
 800c2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b0:	689b      	ldr	r3, [r3, #8]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7f5 f951 	bl	800155a <lwip_htonl>
 800c2b8:	61b8      	str	r0, [r7, #24]
		    PUTLONG(tl, p);
 800c2ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2bc:	1c5a      	adds	r2, r3, #1
 800c2be:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c2c0:	69ba      	ldr	r2, [r7, #24]
 800c2c2:	0e12      	lsrs	r2, r2, #24
 800c2c4:	b2d2      	uxtb	r2, r2
 800c2c6:	701a      	strb	r2, [r3, #0]
 800c2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ca:	1c5a      	adds	r2, r3, #1
 800c2cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c2ce:	69ba      	ldr	r2, [r7, #24]
 800c2d0:	0c12      	lsrs	r2, r2, #16
 800c2d2:	b2d2      	uxtb	r2, r2
 800c2d4:	701a      	strb	r2, [r3, #0]
 800c2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2d8:	1c5a      	adds	r2, r3, #1
 800c2da:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c2dc:	69ba      	ldr	r2, [r7, #24]
 800c2de:	0a12      	lsrs	r2, r2, #8
 800c2e0:	b2d2      	uxtb	r2, r2
 800c2e2:	701a      	strb	r2, [r3, #0]
 800c2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2e6:	1c5a      	adds	r2, r3, #1
 800c2e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c2ea:	69ba      	ldr	r2, [r7, #24]
 800c2ec:	b2d2      	uxtb	r2, r2
 800c2ee:	701a      	strb	r2, [r3, #0]
		if (!reject_if_disagree) {
 800c2f0:	e00e      	b.n	800c310 <ipcp_reqci+0x3b0>
		}
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d10b      	bne.n	800c310 <ipcp_reqci+0x3b0>
 800c2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d107      	bne.n	800c310 <ipcp_reqci+0x3b0>
		/*
		 * Don't ACK an address of 0.0.0.0 - reject it instead.
		 */
		orc = CONFREJ;
 800c300:	2304      	movs	r3, #4
 800c302:	643b      	str	r3, [r7, #64]	; 0x40
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 800c304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c306:	7813      	ldrb	r3, [r2, #0]
 800c308:	f36f 0382 	bfc	r3, #2, #1
 800c30c:	7013      	strb	r3, [r2, #0]
		break;
 800c30e:	e00b      	b.n	800c328 <ipcp_reqci+0x3c8>
	    }
	
	    ho->neg_addr = 1;
 800c310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c312:	7813      	ldrb	r3, [r2, #0]
 800c314:	f043 0301 	orr.w	r3, r3, #1
 800c318:	7013      	strb	r3, [r2, #0]
	    ho->hisaddr = ciaddr1;
 800c31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31c:	697a      	ldr	r2, [r7, #20]
 800c31e:	609a      	str	r2, [r3, #8]
	    break;
 800c320:	e002      	b.n	800c328 <ipcp_reqci+0x3c8>
	    }
	    break;
#endif /* VJ_SUPPORT */

	default:
	    orc = CONFREJ;
 800c322:	2304      	movs	r3, #4
 800c324:	643b      	str	r3, [r7, #64]	; 0x40
	    break;
 800c326:	bf00      	nop
	}
endswitch:
	if (orc == CONFACK &&		/* Good CI */
 800c328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d103      	bne.n	800c336 <ipcp_reqci+0x3d6>
 800c32e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c330:	2b02      	cmp	r3, #2
 800c332:	d000      	beq.n	800c336 <ipcp_reqci+0x3d6>
	    rc != CONFACK)		/*  but prior CI wasn't? */
	    continue;			/* Don't send this one */
 800c334:	e02d      	b.n	800c392 <ipcp_reqci+0x432>

	if (orc == CONFNAK) {		/* Nak this CI? */
 800c336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c338:	2b03      	cmp	r3, #3
 800c33a:	d110      	bne.n	800c35e <ipcp_reqci+0x3fe>
	    if (reject_if_disagree)	/* Getting fed up with sending NAKs? */
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d002      	beq.n	800c348 <ipcp_reqci+0x3e8>
		orc = CONFREJ;		/* Get tough if so */
 800c342:	2304      	movs	r3, #4
 800c344:	643b      	str	r3, [r7, #64]	; 0x40
 800c346:	e00a      	b.n	800c35e <ipcp_reqci+0x3fe>
	    else {
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 800c348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c34a:	2b04      	cmp	r3, #4
 800c34c:	d100      	bne.n	800c350 <ipcp_reqci+0x3f0>
		    continue;		/* Don't send this one */
 800c34e:	e020      	b.n	800c392 <ipcp_reqci+0x432>
		if (rc == CONFACK) {	/* Ack'd all prior CIs? */
 800c350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c352:	2b02      	cmp	r3, #2
 800c354:	d103      	bne.n	800c35e <ipcp_reqci+0x3fe>
		    rc = CONFNAK;	/* Not anymore... */
 800c356:	2303      	movs	r3, #3
 800c358:	647b      	str	r3, [r7, #68]	; 0x44
		    ucp = inp;		/* Backup */
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	    }
	}

	if (orc == CONFREJ &&		/* Reject this CI */
 800c35e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c360:	2b04      	cmp	r3, #4
 800c362:	d106      	bne.n	800c372 <ipcp_reqci+0x412>
 800c364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c366:	2b04      	cmp	r3, #4
 800c368:	d003      	beq.n	800c372 <ipcp_reqci+0x412>
	    rc != CONFREJ) {		/*  but no prior ones? */
	    rc = CONFREJ;
 800c36a:	2304      	movs	r3, #4
 800c36c:	647b      	str	r3, [r7, #68]	; 0x44
	    ucp = inp;			/* Backup */
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	/* Need to move CI? */
	if (ucp != cip)
 800c372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c374:	6a3b      	ldr	r3, [r7, #32]
 800c376:	429a      	cmp	r2, r3
 800c378:	d006      	beq.n	800c388 <ipcp_reqci+0x428>
	    MEMCPY(ucp, cip, cilen);	/* Move it */
 800c37a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c37e:	461a      	mov	r2, r3
 800c380:	6a39      	ldr	r1, [r7, #32]
 800c382:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c384:	f006 f9da 	bl	801273c <memcpy>

	/* Update output pointer */
	INCPTR(cilen, ucp);
 800c388:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c38c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c38e:	4413      	add	r3, r2
 800c390:	63bb      	str	r3, [r7, #56]	; 0x38
    while (l) {
 800c392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c394:	2b00      	cmp	r3, #0
 800c396:	f47f ae08 	bne.w	800bfaa <ipcp_reqci+0x4a>
     * their address, and they didn't send their address, then we
     * send a NAK with a CI_ADDR option appended.  We assume the
     * input buffer is long enough that we can append the extra
     * option safely.
     */
    if (rc != CONFREJ && !ho->neg_addr && !ho->old_addrs &&
 800c39a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c39c:	2b04      	cmp	r3, #4
 800c39e:	d055      	beq.n	800c44c <ipcp_reqci+0x4ec>
 800c3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	f003 0301 	and.w	r3, r3, #1
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d14e      	bne.n	800c44c <ipcp_reqci+0x4ec>
 800c3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	f003 0302 	and.w	r3, r3, #2
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d147      	bne.n	800c44c <ipcp_reqci+0x4ec>
 800c3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	f003 0304 	and.w	r3, r3, #4
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d040      	beq.n	800c44c <ipcp_reqci+0x4ec>
	wo->req_addr && !reject_if_disagree && !pcb->settings.noremoteip) {
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d13d      	bne.n	800c44c <ipcp_reqci+0x4ec>
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	f003 0308 	and.w	r3, r3, #8
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d136      	bne.n	800c44c <ipcp_reqci+0x4ec>
	if (rc == CONFACK) {
 800c3de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d108      	bne.n	800c3f6 <ipcp_reqci+0x496>
	    rc = CONFNAK;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	647b      	str	r3, [r7, #68]	; 0x44
	    ucp = inp;			/* reset pointer */
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	63bb      	str	r3, [r7, #56]	; 0x38
	    wo->req_addr = 0;		/* don't ask again */
 800c3ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3ee:	7813      	ldrb	r3, [r2, #0]
 800c3f0:	f36f 0382 	bfc	r3, #2, #1
 800c3f4:	7013      	strb	r3, [r2, #0]
	}
	PUTCHAR(CI_ADDR, ucp);
 800c3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f8:	1c5a      	adds	r2, r3, #1
 800c3fa:	63ba      	str	r2, [r7, #56]	; 0x38
 800c3fc:	2203      	movs	r2, #3
 800c3fe:	701a      	strb	r2, [r3, #0]
	PUTCHAR(CILEN_ADDR, ucp);
 800c400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c402:	1c5a      	adds	r2, r3, #1
 800c404:	63ba      	str	r2, [r7, #56]	; 0x38
 800c406:	2206      	movs	r2, #6
 800c408:	701a      	strb	r2, [r3, #0]
	tl = lwip_ntohl(wo->hisaddr);
 800c40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40c:	689b      	ldr	r3, [r3, #8]
 800c40e:	4618      	mov	r0, r3
 800c410:	f7f5 f8a3 	bl	800155a <lwip_htonl>
 800c414:	61b8      	str	r0, [r7, #24]
	PUTLONG(tl, ucp);
 800c416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c418:	1c5a      	adds	r2, r3, #1
 800c41a:	63ba      	str	r2, [r7, #56]	; 0x38
 800c41c:	69ba      	ldr	r2, [r7, #24]
 800c41e:	0e12      	lsrs	r2, r2, #24
 800c420:	b2d2      	uxtb	r2, r2
 800c422:	701a      	strb	r2, [r3, #0]
 800c424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c426:	1c5a      	adds	r2, r3, #1
 800c428:	63ba      	str	r2, [r7, #56]	; 0x38
 800c42a:	69ba      	ldr	r2, [r7, #24]
 800c42c:	0c12      	lsrs	r2, r2, #16
 800c42e:	b2d2      	uxtb	r2, r2
 800c430:	701a      	strb	r2, [r3, #0]
 800c432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c434:	1c5a      	adds	r2, r3, #1
 800c436:	63ba      	str	r2, [r7, #56]	; 0x38
 800c438:	69ba      	ldr	r2, [r7, #24]
 800c43a:	0a12      	lsrs	r2, r2, #8
 800c43c:	b2d2      	uxtb	r2, r2
 800c43e:	701a      	strb	r2, [r3, #0]
 800c440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c442:	1c5a      	adds	r2, r3, #1
 800c444:	63ba      	str	r2, [r7, #56]	; 0x38
 800c446:	69ba      	ldr	r2, [r7, #24]
 800c448:	b2d2      	uxtb	r2, r2
 800c44a:	701a      	strb	r2, [r3, #0]
    }

    *len = ucp - inp;			/* Compute output length */
 800c44c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	1ad2      	subs	r2, r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	601a      	str	r2, [r3, #0]
    IPCPDEBUG(("ipcp: returning Configure-%s", CODENAME(rc)));
    return (rc);			/* Return final code */
 800c456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3750      	adds	r7, #80	; 0x50
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <ipcp_up>:
/*
 * ipcp_up - IPCP has come UP.
 *
 * Configure the IP network interface appropriately and bring it up.
 */
static void ipcp_up(fsm *f) {
 800c460:	b580      	push	{r7, lr}
 800c462:	b088      	sub	sp, #32
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	61fb      	str	r3, [r7, #28]
    u32_t mask;
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800c474:	61bb      	str	r3, [r7, #24]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c47c:	617b      	str	r3, [r7, #20]
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800c484:	613b      	str	r3, [r7, #16]
    IPCPDEBUG(("ipcp: up"));

    /*
     * We must have a non-zero IP address for both ends of the link.
     */
    if (!ho->neg_addr && !ho->old_addrs)
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	f003 0301 	and.w	r3, r3, #1
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10a      	bne.n	800c4aa <ipcp_up+0x4a>
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	f003 0302 	and.w	r3, r3, #2
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d103      	bne.n	800c4aa <ipcp_up+0x4a>
	ho->hisaddr = wo->hisaddr;
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	689a      	ldr	r2, [r3, #8]
 800c4a6:	69bb      	ldr	r3, [r7, #24]
 800c4a8:	609a      	str	r2, [r3, #8]

    if (!(go->neg_addr || go->old_addrs) && (wo->neg_addr || wo->old_addrs)
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	f003 0301 	and.w	r3, r3, #1
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d11f      	bne.n	800c4f8 <ipcp_up+0x98>
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	f003 0302 	and.w	r3, r3, #2
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d118      	bne.n	800c4f8 <ipcp_up+0x98>
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	f003 0301 	and.w	r3, r3, #1
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d106      	bne.n	800c4e2 <ipcp_up+0x82>
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	f003 0302 	and.w	r3, r3, #2
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00a      	beq.n	800c4f8 <ipcp_up+0x98>
	&& wo->ouraddr != 0) {
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d006      	beq.n	800c4f8 <ipcp_up+0x98>
	ppp_error(("Peer refused to agree to our IP address"));
	ipcp_close(f->pcb, "Refused our IP address");
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	493b      	ldr	r1, [pc, #236]	; (800c5dc <ipcp_up+0x17c>)
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7fe ff31 	bl	800b358 <ipcp_close>
	return;
 800c4f6:	e06e      	b.n	800c5d6 <ipcp_up+0x176>
    }
    if (go->ouraddr == 0) {
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d106      	bne.n	800c50e <ipcp_up+0xae>
	ppp_error(("Could not determine local IP address"));
	ipcp_close(f->pcb, "Could not determine local IP address");
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4936      	ldr	r1, [pc, #216]	; (800c5e0 <ipcp_up+0x180>)
 800c506:	4618      	mov	r0, r3
 800c508:	f7fe ff26 	bl	800b358 <ipcp_close>
	return;
 800c50c:	e063      	b.n	800c5d6 <ipcp_up+0x176>
    }
    if (ho->hisaddr == 0 && !pcb->settings.noremoteip) {
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d10c      	bne.n	800c530 <ipcp_up+0xd0>
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	f003 0308 	and.w	r3, r3, #8
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	2b00      	cmp	r3, #0
 800c522:	d105      	bne.n	800c530 <ipcp_up+0xd0>
	ho->hisaddr = lwip_htonl(0x0a404040);
 800c524:	482f      	ldr	r0, [pc, #188]	; (800c5e4 <ipcp_up+0x184>)
 800c526:	f7f5 f818 	bl	800155a <lwip_htonl>
 800c52a:	4602      	mov	r2, r0
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	609a      	str	r2, [r3, #8]
#endif /* LWIP_DNS */

    /*
     * Check that the peer is allowed to use the IP address it wants.
     */
    if (ho->hisaddr != 0) {
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d01a      	beq.n	800c56e <ipcp_up+0x10e>
	u32_t addr = lwip_ntohl(ho->hisaddr);
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7f5 f80c 	bl	800155a <lwip_htonl>
 800c542:	60f8      	str	r0, [r7, #12]
	if ((addr >> IP_CLASSA_NSHIFT) == IP_LOOPBACKNET
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	0e1b      	lsrs	r3, r3, #24
 800c548:	2b7f      	cmp	r3, #127	; 0x7f
 800c54a:	d00b      	beq.n	800c564 <ipcp_up+0x104>
	    || IP_MULTICAST(addr) || IP_BADCLASS(addr)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c552:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800c556:	d005      	beq.n	800c564 <ipcp_up+0x104>
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c55e:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 800c562:	d104      	bne.n	800c56e <ipcp_up+0x10e>
#if PPP_SERVER && PPP_AUTH_SUPPORT
	    || (pcb->settings.auth_required && wo->hisaddr != ho->hisaddr)
#endif /* PPP_SERVER && PPP_AUTH_SUPPORT */
	    ) {
		ppp_error(("Peer is not authorized to use remote address %I", ho->hisaddr));
		ipcp_close(pcb, "Unauthorized remote IP address");
 800c564:	4920      	ldr	r1, [pc, #128]	; (800c5e8 <ipcp_up+0x188>)
 800c566:	69f8      	ldr	r0, [r7, #28]
 800c568:	f7fe fef6 	bl	800b358 <ipcp_close>
		return;
 800c56c:	e033      	b.n	800c5d6 <ipcp_up+0x176>
#endif /* DEMAND_SUPPORT */
    {
	/*
	 * Set IP addresses and (if specified) netmask.
	 */
	mask = get_mask(go->ouraddr);
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	4618      	mov	r0, r3
 800c574:	f004 f81e 	bl	80105b4 <get_mask>
 800c578:	60b8      	str	r0, [r7, #8]

#if !(defined(SVR4) && (defined(SNI) || defined(__USLC__)))
	if (!sifaddr(pcb, go->ouraddr, ho->hisaddr, mask)) {
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	6859      	ldr	r1, [r3, #4]
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	689a      	ldr	r2, [r3, #8]
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	69f8      	ldr	r0, [r7, #28]
 800c586:	f003 ffab 	bl	80104e0 <sifaddr>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d106      	bne.n	800c59e <ipcp_up+0x13e>
#if PPP_DEBUG
	    ppp_warn(("Interface configuration failed"));
#endif /* PPP_DEBUG */
	    ipcp_close(f->pcb, "Interface configuration failed");
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4915      	ldr	r1, [pc, #84]	; (800c5ec <ipcp_up+0x18c>)
 800c596:	4618      	mov	r0, r3
 800c598:	f7fe fede 	bl	800b358 <ipcp_close>
	    return;
 800c59c:	e01b      	b.n	800c5d6 <ipcp_up+0x176>
	}
#endif

	/* bring the interface up for IP */
	if (!sifup(pcb)) {
 800c59e:	69f8      	ldr	r0, [r7, #28]
 800c5a0:	f003 ffd0 	bl	8010544 <sifup>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d106      	bne.n	800c5b8 <ipcp_up+0x158>
#if PPP_DEBUG
	    ppp_warn(("Interface failed to come up"));
#endif /* PPP_DEBUG */
	    ipcp_close(f->pcb, "Interface configuration failed");
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	490f      	ldr	r1, [pc, #60]	; (800c5ec <ipcp_up+0x18c>)
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7fe fed1 	bl	800b358 <ipcp_close>
	    return;
 800c5b6:	e00e      	b.n	800c5d6 <ipcp_up+0x176>
	if (ho->hisaddr != 0 && wo->proxy_arp)
	    if (sifproxyarp(pcb, ho->hisaddr))
		pcb->proxy_arp_set = 1;
#endif /* UNUSED - PROXY ARP */

	wo->ouraddr = go->ouraddr;
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	685a      	ldr	r2, [r3, #4]
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	605a      	str	r2, [r3, #4]

#if PPP_STATS_SUPPORT
    reset_link_stats(f->unit);
#endif /* PPP_STATS_SUPPORT */

    np_up(pcb, PPP_IP);
 800c5c0:	2121      	movs	r1, #33	; 0x21
 800c5c2:	69f8      	ldr	r0, [r7, #28]
 800c5c4:	f7fd fbe8 	bl	8009d98 <np_up>
    pcb->ipcp_is_up = 1;
 800c5c8:	69fa      	ldr	r2, [r7, #28]
 800c5ca:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800c5ce:	f043 0304 	orr.w	r3, r3, #4
 800c5d2:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
#endif /* PPP_NOTIFY */
#if 0 /* UNUSED */
    if (ip_up_hook)
	ip_up_hook();
#endif /* UNUSED */
}
 800c5d6:	3720      	adds	r7, #32
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	08015714 	.word	0x08015714
 800c5e0:	0801572c 	.word	0x0801572c
 800c5e4:	0a404040 	.word	0x0a404040
 800c5e8:	08015754 	.word	0x08015754
 800c5ec:	08015774 	.word	0x08015774

0800c5f0 <ipcp_down>:
 * ipcp_down - IPCP has gone DOWN.
 *
 * Take the IP network interface down, clear its addresses
 * and delete routes through it.
 */
static void ipcp_down(fsm *f) {
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b086      	sub	sp, #24
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	617b      	str	r3, [r7, #20]
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800c604:	613b      	str	r3, [r7, #16]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c60c:	60fb      	str	r3, [r7, #12]
#endif /* PPP_NOTIFY */
#if 0 /* UNUSED */
    if (ip_down_hook)
	ip_down_hook();
#endif /* UNUSED */
    if (pcb->ipcp_is_up) {
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c614:	f003 0304 	and.w	r3, r3, #4
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00a      	beq.n	800c634 <ipcp_down+0x44>
	pcb->ipcp_is_up = 0;
 800c61e:	697a      	ldr	r2, [r7, #20]
 800c620:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800c624:	f36f 0382 	bfc	r3, #2, #1
 800c628:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	np_down(pcb, PPP_IP);
 800c62c:	2121      	movs	r1, #33	; 0x21
 800c62e:	6978      	ldr	r0, [r7, #20]
 800c630:	f7fd fbcc 	bl	8009dcc <np_down>
#endif /* DEMAND_SUPPORT */
    {
#if DEMAND_SUPPORT
	sifnpmode(pcb, PPP_IP, NPMODE_DROP);
#endif /* DEMAND_SUPPORT */
	sifdown(pcb);
 800c634:	6978      	ldr	r0, [r7, #20]
 800c636:	f003 ffa8 	bl	801058a <sifdown>
	ipcp_clear_addrs(pcb, go->ouraddr,
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	6859      	ldr	r1, [r3, #4]
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	689a      	ldr	r2, [r3, #8]
 800c642:	2300      	movs	r3, #0
 800c644:	6978      	ldr	r0, [r7, #20]
 800c646:	f000 f804 	bl	800c652 <ipcp_clear_addrs>
			 ho->hisaddr, 0);
#if LWIP_DNS
	cdns(pcb, go->dnsaddr[0], go->dnsaddr[1]);
#endif /* LWIP_DNS */
    }
}
 800c64a:	bf00      	nop
 800c64c:	3718      	adds	r7, #24
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}

0800c652 <ipcp_clear_addrs>:

/*
 * ipcp_clear_addrs() - clear the interface addresses, routes,
 * proxy arp entries, etc.
 */
static void ipcp_clear_addrs(ppp_pcb *pcb, u32_t ouraddr, u32_t hisaddr, u8_t replacedefaultroute) {
 800c652:	b580      	push	{r7, lr}
 800c654:	b084      	sub	sp, #16
 800c656:	af00      	add	r7, sp, #0
 800c658:	60f8      	str	r0, [r7, #12]
 800c65a:	60b9      	str	r1, [r7, #8]
 800c65c:	607a      	str	r2, [r7, #4]
 800c65e:	70fb      	strb	r3, [r7, #3]
    if (!replacedefaultroute && pcb->default_route_set) {
	cifdefaultroute(pcb, ouraddr, hisaddr);
	pcb->default_route_set = 0;
    }
#endif /* UNUSED */
    cifaddr(pcb, ouraddr, hisaddr);
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	68b9      	ldr	r1, [r7, #8]
 800c664:	68f8      	ldr	r0, [r7, #12]
 800c666:	f003 ff57 	bl	8010518 <cifaddr>
}
 800c66a:	bf00      	nop
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <ipcp_finished>:


/*
 * ipcp_finished - possibly shut down the lower layers.
 */
static void ipcp_finished(fsm *f) {
 800c672:	b580      	push	{r7, lr}
 800c674:	b084      	sub	sp, #16
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
	ppp_pcb *pcb = f->pcb;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	60fb      	str	r3, [r7, #12]
	if (pcb->ipcp_is_open) {
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c686:	f003 0302 	and.w	r3, r3, #2
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d00a      	beq.n	800c6a6 <ipcp_finished+0x34>
		pcb->ipcp_is_open = 0;
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800c696:	f36f 0341 	bfc	r3, #1, #1
 800c69a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		np_finished(pcb, PPP_IP);
 800c69e:	2121      	movs	r1, #33	; 0x21
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f7fd fbad 	bl	8009e00 <np_finished>
	}
}
 800c6a6:	bf00      	nop
 800c6a8:	3710      	adds	r7, #16
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
	...

0800c6b0 <lcp_init>:
#endif /* HAVE_MULTILINK */

/*
 * lcp_init - Initialize LCP.
 */
static void lcp_init(ppp_pcb *pcb) {
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b086      	sub	sp, #24
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	3390      	adds	r3, #144	; 0x90
 800c6bc:	617b      	str	r3, [r7, #20]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	33ac      	adds	r3, #172	; 0xac
 800c6c2:	613b      	str	r3, [r7, #16]
    lcp_options *ao = &pcb->lcp_allowoptions;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	33fc      	adds	r3, #252	; 0xfc
 800c6c8:	60fb      	str	r3, [r7, #12]

    f->pcb = pcb;
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	601a      	str	r2, [r3, #0]
    f->protocol = PPP_LCP;
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	f24c 0221 	movw	r2, #49185	; 0xc021
 800c6d6:	81da      	strh	r2, [r3, #14]
    f->callbacks = &lcp_callbacks;
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	4a2f      	ldr	r2, [pc, #188]	; (800c798 <lcp_init+0xe8>)
 800c6dc:	605a      	str	r2, [r3, #4]

    fsm_init(f);
 800c6de:	6978      	ldr	r0, [r7, #20]
 800c6e0:	f7fd fe87 	bl	800a3f2 <fsm_init>

    BZERO(wo, sizeof(*wo));
 800c6e4:	2228      	movs	r2, #40	; 0x28
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	6938      	ldr	r0, [r7, #16]
 800c6ea:	f006 f84c 	bl	8012786 <memset>
    wo->neg_mru = 1;
 800c6ee:	693a      	ldr	r2, [r7, #16]
 800c6f0:	7813      	ldrb	r3, [r2, #0]
 800c6f2:	f043 0304 	orr.w	r3, r3, #4
 800c6f6:	7013      	strb	r3, [r2, #0]
    wo->mru = PPP_MRU;
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c6fe:	805a      	strh	r2, [r3, #2]
    wo->neg_asyncmap = 1;
 800c700:	693a      	ldr	r2, [r7, #16]
 800c702:	7813      	ldrb	r3, [r2, #0]
 800c704:	f043 0308 	orr.w	r3, r3, #8
 800c708:	7013      	strb	r3, [r2, #0]
    wo->neg_magicnumber = 1;
 800c70a:	693a      	ldr	r2, [r7, #16]
 800c70c:	7813      	ldrb	r3, [r2, #0]
 800c70e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c712:	7013      	strb	r3, [r2, #0]
    wo->neg_pcompression = 1;
 800c714:	693a      	ldr	r2, [r7, #16]
 800c716:	7813      	ldrb	r3, [r2, #0]
 800c718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c71c:	7013      	strb	r3, [r2, #0]
    wo->neg_accompression = 1;
 800c71e:	693a      	ldr	r2, [r7, #16]
 800c720:	7853      	ldrb	r3, [r2, #1]
 800c722:	f043 0301 	orr.w	r3, r3, #1
 800c726:	7053      	strb	r3, [r2, #1]

    BZERO(ao, sizeof(*ao));
 800c728:	2228      	movs	r2, #40	; 0x28
 800c72a:	2100      	movs	r1, #0
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	f006 f82a 	bl	8012786 <memset>
    ao->neg_mru = 1;
 800c732:	68fa      	ldr	r2, [r7, #12]
 800c734:	7813      	ldrb	r3, [r2, #0]
 800c736:	f043 0304 	orr.w	r3, r3, #4
 800c73a:	7013      	strb	r3, [r2, #0]
    ao->mru = PPP_MAXMRU;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c742:	805a      	strh	r2, [r3, #2]
    ao->neg_asyncmap = 1;
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	7813      	ldrb	r3, [r2, #0]
 800c748:	f043 0308 	orr.w	r3, r3, #8
 800c74c:	7013      	strb	r3, [r2, #0]
#if CHAP_SUPPORT
    ao->neg_chap = 1;
 800c74e:	68fa      	ldr	r2, [r7, #12]
 800c750:	7813      	ldrb	r3, [r2, #0]
 800c752:	f043 0320 	orr.w	r3, r3, #32
 800c756:	7013      	strb	r3, [r2, #0]
    ao->chap_mdtype = CHAP_MDTYPE_SUPPORTED;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2204      	movs	r2, #4
 800c75c:	711a      	strb	r2, [r3, #4]
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    ao->neg_upap = 1;
 800c75e:	68fa      	ldr	r2, [r7, #12]
 800c760:	7813      	ldrb	r3, [r2, #0]
 800c762:	f043 0310 	orr.w	r3, r3, #16
 800c766:	7013      	strb	r3, [r2, #0]
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
    ao->neg_eap = 1;
#endif /* EAP_SUPPORT */
    ao->neg_magicnumber = 1;
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	7813      	ldrb	r3, [r2, #0]
 800c76c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c770:	7013      	strb	r3, [r2, #0]
    ao->neg_pcompression = 1;
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	7813      	ldrb	r3, [r2, #0]
 800c776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c77a:	7013      	strb	r3, [r2, #0]
    ao->neg_accompression = 1;
 800c77c:	68fa      	ldr	r2, [r7, #12]
 800c77e:	7853      	ldrb	r3, [r2, #1]
 800c780:	f043 0301 	orr.w	r3, r3, #1
 800c784:	7053      	strb	r3, [r2, #1]
    ao->neg_endpoint = 1;
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	7853      	ldrb	r3, [r2, #1]
 800c78a:	f043 0308 	orr.w	r3, r3, #8
 800c78e:	7053      	strb	r3, [r2, #1]
}
 800c790:	bf00      	nop
 800c792:	3718      	adds	r7, #24
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	08015bb0 	.word	0x08015bb0

0800c79c <lcp_open>:


/*
 * lcp_open - LCP is allowed to come up.
 */
void lcp_open(ppp_pcb *pcb) {
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	3390      	adds	r3, #144	; 0x90
 800c7a8:	60fb      	str	r3, [r7, #12]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	33ac      	adds	r3, #172	; 0xac
 800c7ae:	60bb      	str	r3, [r7, #8]

    f->flags &= ~(OPT_PASSIVE | OPT_SILENT);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	7c5b      	ldrb	r3, [r3, #17]
 800c7b4:	f023 0305 	bic.w	r3, r3, #5
 800c7b8:	b2da      	uxtb	r2, r3
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	745a      	strb	r2, [r3, #17]
    if (wo->passive)
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	f003 0301 	and.w	r3, r3, #1
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d006      	beq.n	800c7da <lcp_open+0x3e>
	f->flags |= OPT_PASSIVE;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	7c5b      	ldrb	r3, [r3, #17]
 800c7d0:	f043 0301 	orr.w	r3, r3, #1
 800c7d4:	b2da      	uxtb	r2, r3
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	745a      	strb	r2, [r3, #17]
    if (wo->silent)
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	f003 0302 	and.w	r3, r3, #2
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d006      	beq.n	800c7f6 <lcp_open+0x5a>
	f->flags |= OPT_SILENT;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	7c5b      	ldrb	r3, [r3, #17]
 800c7ec:	f043 0304 	orr.w	r3, r3, #4
 800c7f0:	b2da      	uxtb	r2, r3
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	745a      	strb	r2, [r3, #17]
    fsm_open(f);
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f7fd fe92 	bl	800a520 <fsm_open>
}
 800c7fc:	bf00      	nop
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <lcp_close>:


/*
 * lcp_close - Take LCP down.
 */
void lcp_close(ppp_pcb *pcb, const char *reason) {
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
    fsm *f = &pcb->lcp_fsm;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	3390      	adds	r3, #144	; 0x90
 800c812:	60fb      	str	r3, [r7, #12]
    int oldstate;

    if (pcb->phase != PPP_PHASE_DEAD
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d003      	beq.n	800c826 <lcp_close+0x22>
#ifdef HAVE_MULTILINK
    && pcb->phase != PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	new_phase(pcb, PPP_PHASE_TERMINATE);
 800c81e:	210b      	movs	r1, #11
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f003 fe15 	bl	8010450 <new_phase>

    if (f->flags & DELAYED_UP) {
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	7c5b      	ldrb	r3, [r3, #17]
 800c82a:	b25b      	sxtb	r3, r3
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	da06      	bge.n	800c83e <lcp_close+0x3a>
	UNTIMEOUT(lcp_delayed_up, f);
 800c830:	68f9      	ldr	r1, [r7, #12]
 800c832:	4812      	ldr	r0, [pc, #72]	; (800c87c <lcp_close+0x78>)
 800c834:	f7fd f874 	bl	8009920 <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2203      	movs	r2, #3
 800c83c:	741a      	strb	r2, [r3, #16]
    }
    oldstate = f->state;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	7c1b      	ldrb	r3, [r3, #16]
 800c842:	60bb      	str	r3, [r7, #8]

    fsm_close(f, reason);
 800c844:	6839      	ldr	r1, [r7, #0]
 800c846:	68f8      	ldr	r0, [r7, #12]
 800c848:	f7fd ff32 	bl	800a6b0 <fsm_close>
    if (oldstate == PPP_FSM_STOPPED && (f->flags & (OPT_PASSIVE|OPT_SILENT|DELAYED_UP))) {
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	2b03      	cmp	r3, #3
 800c850:	d10f      	bne.n	800c872 <lcp_close+0x6e>
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	7c5b      	ldrb	r3, [r3, #17]
 800c856:	f003 0385 	and.w	r3, r3, #133	; 0x85
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d009      	beq.n	800c872 <lcp_close+0x6e>
	 * but it does mean that the program terminates if you do a
	 * lcp_close() when a connection hasn't been established
	 * because we are in passive/silent mode or because we have
	 * delayed the fsm_lowerup() call and it hasn't happened yet.
	 */
	f->flags &= ~DELAYED_UP;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	7c5b      	ldrb	r3, [r3, #17]
 800c862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c866:	b2da      	uxtb	r2, r3
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	745a      	strb	r2, [r3, #17]
	lcp_finished(f);
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	f002 f98b 	bl	800eb88 <lcp_finished>
    }
}
 800c872:	bf00      	nop
 800c874:	3710      	adds	r7, #16
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
 800c87a:	bf00      	nop
 800c87c:	0800c981 	.word	0x0800c981

0800c880 <lcp_lowerup>:


/*
 * lcp_lowerup - The lower layer is up.
 */
void lcp_lowerup(ppp_pcb *pcb) {
 800c880:	b580      	push	{r7, lr}
 800c882:	b086      	sub	sp, #24
 800c884:	af02      	add	r7, sp, #8
 800c886:	6078      	str	r0, [r7, #4]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	33ac      	adds	r3, #172	; 0xac
 800c88c:	60fb      	str	r3, [r7, #12]
    fsm *f = &pcb->lcp_fsm;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	3390      	adds	r3, #144	; 0x90
 800c892:	60bb      	str	r3, [r7, #8]
    /*
     * Don't use A/C or protocol compression on transmission,
     * but accept A/C and protocol compressed packets
     * if we are going to ask for A/C and protocol compression.
     */
    if (ppp_send_config(pcb, PPP_DEFMRU, 0xffffffff, 0, 0) < 0
 800c894:	2300      	movs	r3, #0
 800c896:	9300      	str	r3, [sp, #0]
 800c898:	2300      	movs	r3, #0
 800c89a:	f04f 32ff 	mov.w	r2, #4294967295
 800c89e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f003 fde4 	bl	8010470 <ppp_send_config>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	db3f      	blt.n	800c92e <lcp_lowerup+0xae>
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	f003 0310 	and.w	r3, r3, #16
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d001      	beq.n	800c8c0 <lcp_lowerup+0x40>
 800c8bc:	2200      	movs	r2, #0
 800c8be:	e001      	b.n	800c8c4 <lcp_lowerup+0x44>
 800c8c0:	f04f 32ff 	mov.w	r2, #4294967295
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c8cc:	b2db      	uxtb	r3, r3
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800c8ce:	4619      	mov	r1, r3
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	785b      	ldrb	r3, [r3, #1]
 800c8d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c8d8:	b2db      	uxtb	r3, r3
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	460b      	mov	r3, r1
 800c8de:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f003 fde0 	bl	80104a8 <ppp_recv_config>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	db1f      	blt.n	800c92e <lcp_lowerup+0xae>
	    return;
    pcb->peer_mru = PPP_DEFMRU;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c8f4:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c

    if (pcb->settings.listen_time != 0) {
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	885b      	ldrh	r3, [r3, #2]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d012      	beq.n	800c926 <lcp_lowerup+0xa6>
	f->flags |= DELAYED_UP;
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	7c5b      	ldrb	r3, [r3, #17]
 800c904:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c908:	b2da      	uxtb	r2, r3
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	745a      	strb	r2, [r3, #17]
	TIMEOUTMS(lcp_delayed_up, f, pcb->settings.listen_time);
 800c90e:	68b9      	ldr	r1, [r7, #8]
 800c910:	4809      	ldr	r0, [pc, #36]	; (800c938 <lcp_lowerup+0xb8>)
 800c912:	f7fd f805 	bl	8009920 <sys_untimeout>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	885b      	ldrh	r3, [r3, #2]
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	4906      	ldr	r1, [pc, #24]	; (800c938 <lcp_lowerup+0xb8>)
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fc ffd2 	bl	80098c8 <sys_timeout>
 800c924:	e004      	b.n	800c930 <lcp_lowerup+0xb0>
    } else
	fsm_lowerup(f);
 800c926:	68b8      	ldr	r0, [r7, #8]
 800c928:	f7fd fd80 	bl	800a42c <fsm_lowerup>
 800c92c:	e000      	b.n	800c930 <lcp_lowerup+0xb0>
	    return;
 800c92e:	bf00      	nop
}
 800c930:	3710      	adds	r7, #16
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop
 800c938:	0800c981 	.word	0x0800c981

0800c93c <lcp_lowerdown>:


/*
 * lcp_lowerdown - The lower layer is down.
 */
void lcp_lowerdown(ppp_pcb *pcb) {
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	3390      	adds	r3, #144	; 0x90
 800c948:	60fb      	str	r3, [r7, #12]

    if (f->flags & DELAYED_UP) {
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	7c5b      	ldrb	r3, [r3, #17]
 800c94e:	b25b      	sxtb	r3, r3
 800c950:	2b00      	cmp	r3, #0
 800c952:	da0b      	bge.n	800c96c <lcp_lowerdown+0x30>
	f->flags &= ~DELAYED_UP;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	7c5b      	ldrb	r3, [r3, #17]
 800c958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	745a      	strb	r2, [r3, #17]
	UNTIMEOUT(lcp_delayed_up, f);
 800c962:	68f9      	ldr	r1, [r7, #12]
 800c964:	4805      	ldr	r0, [pc, #20]	; (800c97c <lcp_lowerdown+0x40>)
 800c966:	f7fc ffdb 	bl	8009920 <sys_untimeout>
    } else
	fsm_lowerdown(f);
}
 800c96a:	e002      	b.n	800c972 <lcp_lowerdown+0x36>
	fsm_lowerdown(f);
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f7fd fd83 	bl	800a478 <fsm_lowerdown>
}
 800c972:	bf00      	nop
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	0800c981 	.word	0x0800c981

0800c980 <lcp_delayed_up>:


/*
 * lcp_delayed_up - Bring the lower layer up now.
 */
static void lcp_delayed_up(void *arg) {
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm*)arg;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	60fb      	str	r3, [r7, #12]

    if (f->flags & DELAYED_UP) {
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	7c5b      	ldrb	r3, [r3, #17]
 800c990:	b25b      	sxtb	r3, r3
 800c992:	2b00      	cmp	r3, #0
 800c994:	da09      	bge.n	800c9aa <lcp_delayed_up+0x2a>
	f->flags &= ~DELAYED_UP;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	7c5b      	ldrb	r3, [r3, #17]
 800c99a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	745a      	strb	r2, [r3, #17]
	fsm_lowerup(f);
 800c9a4:	68f8      	ldr	r0, [r7, #12]
 800c9a6:	f7fd fd41 	bl	800a42c <fsm_lowerup>
    }
}
 800c9aa:	bf00      	nop
 800c9ac:	3710      	adds	r7, #16
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
	...

0800c9b4 <lcp_input>:


/*
 * lcp_input - Input LCP packet.
 */
static void lcp_input(ppp_pcb *pcb, u_char *p, int len) {
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b086      	sub	sp, #24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	3390      	adds	r3, #144	; 0x90
 800c9c4:	617b      	str	r3, [r7, #20]

    if (f->flags & DELAYED_UP) {
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	7c5b      	ldrb	r3, [r3, #17]
 800c9ca:	b25b      	sxtb	r3, r3
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	da0d      	bge.n	800c9ec <lcp_input+0x38>
	f->flags &= ~DELAYED_UP;
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	7c5b      	ldrb	r3, [r3, #17]
 800c9d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9d8:	b2da      	uxtb	r2, r3
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	745a      	strb	r2, [r3, #17]
	UNTIMEOUT(lcp_delayed_up, f);
 800c9de:	6979      	ldr	r1, [r7, #20]
 800c9e0:	4807      	ldr	r0, [pc, #28]	; (800ca00 <lcp_input+0x4c>)
 800c9e2:	f7fc ff9d 	bl	8009920 <sys_untimeout>
	fsm_lowerup(f);
 800c9e6:	6978      	ldr	r0, [r7, #20]
 800c9e8:	f7fd fd20 	bl	800a42c <fsm_lowerup>
    }
    fsm_input(f, p, len);
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	68b9      	ldr	r1, [r7, #8]
 800c9f0:	6978      	ldr	r0, [r7, #20]
 800c9f2:	f7fd ff41 	bl	800a878 <fsm_input>
}
 800c9f6:	bf00      	nop
 800c9f8:	3718      	adds	r7, #24
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	0800c981 	.word	0x0800c981

0800ca04 <lcp_extcode>:

/*
 * lcp_extcode - Handle a LCP-specific code.
 */
static int lcp_extcode(fsm *f, int code, int id, u_char *inp, int len) {
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b08a      	sub	sp, #40	; 0x28
 800ca08:	af02      	add	r7, sp, #8
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	607a      	str	r2, [r7, #4]
 800ca10:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	33d4      	adds	r3, #212	; 0xd4
 800ca1c:	61bb      	str	r3, [r7, #24]
    u_char *magp;

    switch( code ){
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	3b08      	subs	r3, #8
 800ca22:	2b05      	cmp	r3, #5
 800ca24:	d84a      	bhi.n	800cabc <lcp_extcode+0xb8>
 800ca26:	a201      	add	r2, pc, #4	; (adr r2, 800ca2c <lcp_extcode+0x28>)
 800ca28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca2c:	0800ca45 	.word	0x0800ca45
 800ca30:	0800ca51 	.word	0x0800ca51
 800ca34:	0800caaf 	.word	0x0800caaf
 800ca38:	0800cac1 	.word	0x0800cac1
 800ca3c:	0800cac1 	.word	0x0800cac1
 800ca40:	0800cac1 	.word	0x0800cac1
    case PROTREJ:
	lcp_rprotrej(f, inp, len);
 800ca44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca46:	6839      	ldr	r1, [r7, #0]
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f000 f841 	bl	800cad0 <lcp_rprotrej>
	break;
 800ca4e:	e03a      	b.n	800cac6 <lcp_extcode+0xc2>
    
    case ECHOREQ:
	if (f->state != PPP_FSM_OPENED)
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	7c1b      	ldrb	r3, [r3, #16]
 800ca54:	2b09      	cmp	r3, #9
 800ca56:	d135      	bne.n	800cac4 <lcp_extcode+0xc0>
	    break;
	magp = inp;
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	617b      	str	r3, [r7, #20]
	PUTLONG(go->magicnumber, magp);
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	1c5a      	adds	r2, r3, #1
 800ca60:	617a      	str	r2, [r7, #20]
 800ca62:	69ba      	ldr	r2, [r7, #24]
 800ca64:	68d2      	ldr	r2, [r2, #12]
 800ca66:	0e12      	lsrs	r2, r2, #24
 800ca68:	b2d2      	uxtb	r2, r2
 800ca6a:	701a      	strb	r2, [r3, #0]
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	1c5a      	adds	r2, r3, #1
 800ca70:	617a      	str	r2, [r7, #20]
 800ca72:	69ba      	ldr	r2, [r7, #24]
 800ca74:	68d2      	ldr	r2, [r2, #12]
 800ca76:	0c12      	lsrs	r2, r2, #16
 800ca78:	b2d2      	uxtb	r2, r2
 800ca7a:	701a      	strb	r2, [r3, #0]
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	1c5a      	adds	r2, r3, #1
 800ca80:	617a      	str	r2, [r7, #20]
 800ca82:	69ba      	ldr	r2, [r7, #24]
 800ca84:	68d2      	ldr	r2, [r2, #12]
 800ca86:	0a12      	lsrs	r2, r2, #8
 800ca88:	b2d2      	uxtb	r2, r2
 800ca8a:	701a      	strb	r2, [r3, #0]
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	1c5a      	adds	r2, r3, #1
 800ca90:	617a      	str	r2, [r7, #20]
 800ca92:	69ba      	ldr	r2, [r7, #24]
 800ca94:	68d2      	ldr	r2, [r2, #12]
 800ca96:	b2d2      	uxtb	r2, r2
 800ca98:	701a      	strb	r2, [r3, #0]
	fsm_sdata(f, ECHOREP, id, inp, len);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	b2da      	uxtb	r2, r3
 800ca9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa0:	9300      	str	r3, [sp, #0]
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	210a      	movs	r1, #10
 800caa6:	68f8      	ldr	r0, [r7, #12]
 800caa8:	f7fe fb7e 	bl	800b1a8 <fsm_sdata>
	break;
 800caac:	e00b      	b.n	800cac6 <lcp_extcode+0xc2>
    
    case ECHOREP:
	lcp_received_echo_reply(f, id, inp, len);
 800caae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab0:	683a      	ldr	r2, [r7, #0]
 800cab2:	6879      	ldr	r1, [r7, #4]
 800cab4:	68f8      	ldr	r0, [r7, #12]
 800cab6:	f002 f8da 	bl	800ec6e <lcp_received_echo_reply>
	break;
 800caba:	e004      	b.n	800cac6 <lcp_extcode+0xc2>
    case IDENTIF:
    case TIMEREM:
	break;

    default:
	return 0;
 800cabc:	2300      	movs	r3, #0
 800cabe:	e003      	b.n	800cac8 <lcp_extcode+0xc4>
	break;
 800cac0:	bf00      	nop
 800cac2:	e000      	b.n	800cac6 <lcp_extcode+0xc2>
	    break;
 800cac4:	bf00      	nop
    }
    return 1;
 800cac6:	2301      	movs	r3, #1
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3720      	adds	r7, #32
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <lcp_rprotrej>:
/*
 * lcp_rprotrej - Receive an Protocol-Reject.
 *
 * Figure out which protocol is rejected and inform it.
 */
static void lcp_rprotrej(fsm *f, u_char *inp, int len) {
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b088      	sub	sp, #32
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	607a      	str	r2, [r7, #4]
    u_short prot;
#if PPP_PROTOCOLNAME
    const char *pname;
#endif /* PPP_PROTOCOLNAME */

    if (len < 2) {
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b01      	cmp	r3, #1
 800cae0:	dd2d      	ble.n	800cb3e <lcp_rprotrej+0x6e>
	LCPDEBUG(("lcp_rprotrej: Rcvd short Protocol-Reject packet!"));
	return;
    }

    GETSHORT(prot, inp);
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	1c5a      	adds	r2, r3, #1
 800cae6:	60ba      	str	r2, [r7, #8]
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	b29b      	uxth	r3, r3
 800caec:	021b      	lsls	r3, r3, #8
 800caee:	837b      	strh	r3, [r7, #26]
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	1c5a      	adds	r2, r3, #1
 800caf4:	60ba      	str	r2, [r7, #8]
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	b29a      	uxth	r2, r3
 800cafa:	8b7b      	ldrh	r3, [r7, #26]
 800cafc:	4313      	orrs	r3, r2
 800cafe:	837b      	strh	r3, [r7, #26]

    /*
     * Protocol-Reject packets received in any state other than the LCP
     * OPENED state SHOULD be silently discarded.
     */
    if( f->state != PPP_FSM_OPENED ){
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	7c1b      	ldrb	r3, [r3, #16]
 800cb04:	2b09      	cmp	r3, #9
 800cb06:	d11c      	bne.n	800cb42 <lcp_rprotrej+0x72>
#endif /* PPP_PROTOCOLNAME */

    /*
     * Upcall the proper Protocol-Reject routine.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800cb08:	2300      	movs	r3, #0
 800cb0a:	61fb      	str	r3, [r7, #28]
 800cb0c:	e00e      	b.n	800cb2c <lcp_rprotrej+0x5c>
	if (protp->protocol == prot) {
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	881b      	ldrh	r3, [r3, #0]
 800cb12:	8b7a      	ldrh	r2, [r7, #26]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d106      	bne.n	800cb26 <lcp_rprotrej+0x56>
		ppp_dbglog(("Protocol-Reject for '%s' (0x%x) received", pname,
		       prot));
	    else
#endif /* PPP_PROTOCOLNAME */
		ppp_dbglog(("Protocol-Reject for 0x%x received", prot));
	    (*protp->protrej)(f->pcb);
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	68db      	ldr	r3, [r3, #12]
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	6812      	ldr	r2, [r2, #0]
 800cb20:	4610      	mov	r0, r2
 800cb22:	4798      	blx	r3
	    return;
 800cb24:	e00e      	b.n	800cb44 <lcp_rprotrej+0x74>
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	61fb      	str	r3, [r7, #28]
 800cb2c:	4a07      	ldr	r2, [pc, #28]	; (800cb4c <lcp_rprotrej+0x7c>)
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb34:	617b      	str	r3, [r7, #20]
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d1e8      	bne.n	800cb0e <lcp_rprotrej+0x3e>
 800cb3c:	e002      	b.n	800cb44 <lcp_rprotrej+0x74>
	return;
 800cb3e:	bf00      	nop
 800cb40:	e000      	b.n	800cb44 <lcp_rprotrej+0x74>
	return;
 800cb42:	bf00      	nop
	ppp_warn(("Protocol-Reject for unsupported protocol '%s' (0x%x)", pname,
	     prot));
    else
#endif /* #if PPP_PROTOCOLNAME */
	ppp_warn(("Protocol-Reject for unsupported protocol 0x%x", prot));
}
 800cb44:	3720      	adds	r7, #32
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	08015c5c 	.word	0x08015c5c

0800cb50 <lcp_protrej>:

/*
 * lcp_protrej - A Protocol-Reject was received.
 */
/*ARGSUSED*/
static void lcp_protrej(ppp_pcb *pcb) {
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
    /*
     * Can't reject LCP!
     */
    ppp_error(("Received Protocol-Reject for LCP!"));
    fsm_protreject(&pcb->lcp_fsm);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	3390      	adds	r3, #144	; 0x90
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7fe f9e7 	bl	800af30 <fsm_protreject>
}
 800cb62:	bf00      	nop
 800cb64:	3708      	adds	r7, #8
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <lcp_sprotrej>:


/*
 * lcp_sprotrej - Send a Protocol-Reject for some protocol.
 */
void lcp_sprotrej(ppp_pcb *pcb, u_char *p, int len) {
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b088      	sub	sp, #32
 800cb6e:	af02      	add	r7, sp, #8
 800cb70:	60f8      	str	r0, [r7, #12]
 800cb72:	60b9      	str	r1, [r7, #8]
 800cb74:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	3390      	adds	r3, #144	; 0x90
 800cb7a:	617b      	str	r3, [r7, #20]
#if 0
    p += 2;
    len -= 2;
#endif

    fsm_sdata(f, PROTREJ, ++f->id,
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	7c9b      	ldrb	r3, [r3, #18]
 800cb80:	3301      	adds	r3, #1
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	749a      	strb	r2, [r3, #18]
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	7c9a      	ldrb	r2, [r3, #18]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	2108      	movs	r1, #8
 800cb94:	6978      	ldr	r0, [r7, #20]
 800cb96:	f7fe fb07 	bl	800b1a8 <fsm_sdata>
	      p, len);
}
 800cb9a:	bf00      	nop
 800cb9c:	3718      	adds	r7, #24
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <lcp_resetci>:


/*
 * lcp_resetci - Reset our CI.
 */
static void lcp_resetci(fsm *f) {
 800cba2:	b5b0      	push	{r4, r5, r7, lr}
 800cba4:	b086      	sub	sp, #24
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	617b      	str	r3, [r7, #20]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	33ac      	adds	r3, #172	; 0xac
 800cbb4:	613b      	str	r3, [r7, #16]
    lcp_options *go = &pcb->lcp_gotoptions;
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	33d4      	adds	r3, #212	; 0xd4
 800cbba:	60fb      	str	r3, [r7, #12]
    lcp_options *ao = &pcb->lcp_allowoptions;
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	33fc      	adds	r3, #252	; 0xfc
 800cbc0:	60bb      	str	r3, [r7, #8]

#if PPP_AUTH_SUPPORT

    /* note: default value is true for allow options */
    if (pcb->settings.user && pcb->settings.passwd) {
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d02a      	beq.n	800cc20 <lcp_resetci+0x7e>
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d026      	beq.n	800cc20 <lcp_resetci+0x7e>
#if PAP_SUPPORT
      if (pcb->settings.refuse_pap) {
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	f003 0301 	and.w	r3, r3, #1
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d004      	beq.n	800cbea <lcp_resetci+0x48>
        ao->neg_upap = 0;
 800cbe0:	68ba      	ldr	r2, [r7, #8]
 800cbe2:	7813      	ldrb	r3, [r2, #0]
 800cbe4:	f36f 1304 	bfc	r3, #4, #1
 800cbe8:	7013      	strb	r3, [r2, #0]
      }
#endif /* PAP_SUPPORT */
#if CHAP_SUPPORT
      if (pcb->settings.refuse_chap) {
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	f003 0302 	and.w	r3, r3, #2
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d006      	beq.n	800cc06 <lcp_resetci+0x64>
        ao->chap_mdtype &= ~MDTYPE_MD5;
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	791b      	ldrb	r3, [r3, #4]
 800cbfc:	f023 0304 	bic.w	r3, r3, #4
 800cc00:	b2da      	uxtb	r2, r3
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	711a      	strb	r2, [r3, #4]
      }
      if (pcb->settings.refuse_mschap_v2) {
        ao->chap_mdtype &= ~MDTYPE_MICROSOFT_V2;
      }
#endif /* MSCHAP_SUPPORT */
      ao->neg_chap = (ao->chap_mdtype != MDTYPE_NONE);
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	791b      	ldrb	r3, [r3, #4]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	bf14      	ite	ne
 800cc0e:	2301      	movne	r3, #1
 800cc10:	2300      	moveq	r3, #0
 800cc12:	b2d9      	uxtb	r1, r3
 800cc14:	68ba      	ldr	r2, [r7, #8]
 800cc16:	7813      	ldrb	r3, [r2, #0]
 800cc18:	f361 1345 	bfi	r3, r1, #5, #1
 800cc1c:	7013      	strb	r3, [r2, #0]
 800cc1e:	e00c      	b.n	800cc3a <lcp_resetci+0x98>
      }
#endif /* PPP_SERVER */

    } else {
#if PAP_SUPPORT
      ao->neg_upap = 0;
 800cc20:	68ba      	ldr	r2, [r7, #8]
 800cc22:	7813      	ldrb	r3, [r2, #0]
 800cc24:	f36f 1304 	bfc	r3, #4, #1
 800cc28:	7013      	strb	r3, [r2, #0]
#endif /* PAP_SUPPORT */
#if CHAP_SUPPORT
      ao->neg_chap = 0;
 800cc2a:	68ba      	ldr	r2, [r7, #8]
 800cc2c:	7813      	ldrb	r3, [r2, #0]
 800cc2e:	f36f 1345 	bfc	r3, #5, #1
 800cc32:	7013      	strb	r3, [r2, #0]
      ao->chap_mdtype = MDTYPE_NONE;
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	2200      	movs	r2, #0
 800cc38:	711a      	strb	r2, [r3, #4]
#endif /* EAP_SUPPORT */
    PPPDEBUG(LOG_DEBUG, ("\n"));

#endif /* PPP_AUTH_SUPPORT */

    wo->magicnumber = magic();
 800cc3a:	f002 f99f 	bl	800ef7c <magic>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	60da      	str	r2, [r3, #12]
    wo->numloops = 0;
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	2200      	movs	r2, #0
 800cc48:	741a      	strb	r2, [r3, #16]
    *go = *wo;
 800cc4a:	68fa      	ldr	r2, [r7, #12]
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	4614      	mov	r4, r2
 800cc50:	461d      	mov	r5, r3
 800cc52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cc56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cc5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cc5e:	e884 0003 	stmia.w	r4, {r0, r1}
#ifdef HAVE_MULTILINK
    if (!multilink) {
	go->neg_mrru = 0;
#endif /* HAVE_MULTILINK */
	go->neg_ssnhf = 0;
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	7853      	ldrb	r3, [r2, #1]
 800cc66:	f36f 0382 	bfc	r3, #2, #1
 800cc6a:	7053      	strb	r3, [r2, #1]
	go->neg_endpoint = 0;
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	7853      	ldrb	r3, [r2, #1]
 800cc70:	f36f 03c3 	bfc	r3, #3, #1
 800cc74:	7053      	strb	r3, [r2, #1]
#ifdef HAVE_MULTILINK
    }
#endif /* HAVE_MULTILINK */
    if (pcb->settings.noendpoint)
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	f003 0320 	and.w	r3, r3, #32
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d004      	beq.n	800cc8e <lcp_resetci+0xec>
	ao->neg_endpoint = 0;
 800cc84:	68ba      	ldr	r2, [r7, #8]
 800cc86:	7853      	ldrb	r3, [r2, #1]
 800cc88:	f36f 03c3 	bfc	r3, #3, #1
 800cc8c:	7053      	strb	r3, [r2, #1]
    pcb->peer_mru = PPP_DEFMRU;
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cc94:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
#if 0 /* UNUSED */
    auth_reset(pcb);
#endif /* UNUSED */
}
 800cc98:	bf00      	nop
 800cc9a:	3718      	adds	r7, #24
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bdb0      	pop	{r4, r5, r7, pc}

0800cca0 <lcp_cilen>:


/*
 * lcp_cilen - Return length of our CI.
 */
static int lcp_cilen(fsm *f) {
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	60fb      	str	r3, [r7, #12]
    lcp_options *go = &pcb->lcp_gotoptions;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	33d4      	adds	r3, #212	; 0xd4
 800ccb2:	60bb      	str	r3, [r7, #8]
    /*
     * NB: we only ask for one of CHAP, UPAP, or EAP, even if we will
     * accept more than one.  We prefer EAP first, then CHAP, then
     * PAP.
     */
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	f003 0304 	and.w	r3, r3, #4
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d007      	beq.n	800ccd2 <lcp_cilen+0x32>
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	885b      	ldrh	r3, [r3, #2]
 800ccc6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d001      	beq.n	800ccd2 <lcp_cilen+0x32>
 800ccce:	2204      	movs	r2, #4
 800ccd0:	e000      	b.n	800ccd4 <lcp_cilen+0x34>
 800ccd2:	2200      	movs	r2, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	f003 0308 	and.w	r3, r3, #8
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d006      	beq.n	800ccf0 <lcp_cilen+0x50>
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccea:	d001      	beq.n	800ccf0 <lcp_cilen+0x50>
 800ccec:	2306      	movs	r3, #6
 800ccee:	e000      	b.n	800ccf2 <lcp_cilen+0x52>
 800ccf0:	2300      	movs	r3, #0
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 800ccf2:	441a      	add	r2, r3
#if CHAP_SUPPORT /* cannot be improved, embedding a directive within macro arguments is not portable */
#if EAP_SUPPORT
	    LENCICHAP(!go->neg_eap && go->neg_chap) +
#endif /* EAP_SUPPORT */
#if !EAP_SUPPORT
	    LENCICHAP(go->neg_chap) +
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	f003 0320 	and.w	r3, r3, #32
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d001      	beq.n	800cd06 <lcp_cilen+0x66>
 800cd02:	2305      	movs	r3, #5
 800cd04:	e000      	b.n	800cd08 <lcp_cilen+0x68>
 800cd06:	2300      	movs	r3, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 800cd08:	441a      	add	r2, r3
#endif /* EAP_SUPPORT && CHAP_SUPPORT */
#if EAP_SUPPORT && !CHAP_SUPPORT
	    LENCISHORT(!go->neg_eap && go->neg_upap) +
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
	    LENCISHORT(!go->neg_chap && go->neg_upap) +
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	f003 0320 	and.w	r3, r3, #32
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d108      	bne.n	800cd2a <lcp_cilen+0x8a>
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	f003 0310 	and.w	r3, r3, #16
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d001      	beq.n	800cd2a <lcp_cilen+0x8a>
 800cd26:	2304      	movs	r3, #4
 800cd28:	e000      	b.n	800cd2c <lcp_cilen+0x8c>
 800cd2a:	2300      	movs	r3, #0
	    LENCICHAP(go->neg_chap) +
 800cd2c:	441a      	add	r2, r3
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
	    LENCILQR(go->neg_lqr) +
#endif /* LQR_SUPPORT */
	    LENCICBCP(go->neg_cbcp) +
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	785b      	ldrb	r3, [r3, #1]
 800cd32:	f003 0302 	and.w	r3, r3, #2
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d001      	beq.n	800cd40 <lcp_cilen+0xa0>
 800cd3c:	2303      	movs	r3, #3
 800cd3e:	e000      	b.n	800cd42 <lcp_cilen+0xa2>
 800cd40:	2300      	movs	r3, #0
	    LENCISHORT(!go->neg_chap && go->neg_upap) +
 800cd42:	441a      	add	r2, r3
	    LENCILONG(go->neg_magicnumber) +
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d001      	beq.n	800cd56 <lcp_cilen+0xb6>
 800cd52:	2306      	movs	r3, #6
 800cd54:	e000      	b.n	800cd58 <lcp_cilen+0xb8>
 800cd56:	2300      	movs	r3, #0
	    LENCICBCP(go->neg_cbcp) +
 800cd58:	441a      	add	r2, r3
	    LENCIVOID(go->neg_pcompression) +
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d001      	beq.n	800cd6c <lcp_cilen+0xcc>
 800cd68:	2302      	movs	r3, #2
 800cd6a:	e000      	b.n	800cd6e <lcp_cilen+0xce>
 800cd6c:	2300      	movs	r3, #0
	    LENCILONG(go->neg_magicnumber) +
 800cd6e:	441a      	add	r2, r3
	    LENCIVOID(go->neg_accompression) +
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	785b      	ldrb	r3, [r3, #1]
 800cd74:	f003 0301 	and.w	r3, r3, #1
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d001      	beq.n	800cd82 <lcp_cilen+0xe2>
 800cd7e:	2302      	movs	r3, #2
 800cd80:	e000      	b.n	800cd84 <lcp_cilen+0xe4>
 800cd82:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_pcompression) +
 800cd84:	441a      	add	r2, r3
#ifdef HAVE_MULTILINK
	    LENCISHORT(go->neg_mrru) +
#endif /* HAVE_MULTILINK */
	    LENCIVOID(go->neg_ssnhf) +
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	785b      	ldrb	r3, [r3, #1]
 800cd8a:	f003 0304 	and.w	r3, r3, #4
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d001      	beq.n	800cd98 <lcp_cilen+0xf8>
 800cd94:	2302      	movs	r3, #2
 800cd96:	e000      	b.n	800cd9a <lcp_cilen+0xfa>
 800cd98:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_accompression) +
 800cd9a:	441a      	add	r2, r3
	    (go->neg_endpoint? CILEN_CHAR + go->endpoint.length: 0));
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	785b      	ldrb	r3, [r3, #1]
 800cda0:	f003 0308 	and.w	r3, r3, #8
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d003      	beq.n	800cdb2 <lcp_cilen+0x112>
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	7c9b      	ldrb	r3, [r3, #18]
 800cdae:	3303      	adds	r3, #3
 800cdb0:	e000      	b.n	800cdb4 <lcp_cilen+0x114>
 800cdb2:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_ssnhf) +
 800cdb4:	4413      	add	r3, r2
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3714      	adds	r7, #20
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr

0800cdc2 <lcp_addci>:


/*
 * lcp_addci - Add our desired CIs to a packet.
 */
static void lcp_addci(fsm *f, u_char *ucp, int *lenp) {
 800cdc2:	b480      	push	{r7}
 800cdc4:	b089      	sub	sp, #36	; 0x24
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	60f8      	str	r0, [r7, #12]
 800cdca:	60b9      	str	r1, [r7, #8]
 800cdcc:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	61bb      	str	r3, [r7, #24]
    lcp_options *go = &pcb->lcp_gotoptions;
 800cdd4:	69bb      	ldr	r3, [r7, #24]
 800cdd6:	33d4      	adds	r3, #212	; 0xd4
 800cdd8:	617b      	str	r3, [r7, #20]
    u_char *start_ucp = ucp;
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	613b      	str	r3, [r7, #16]
	PUTCHAR(class, ucp); \
	for (i = 0; i < len; ++i) \
	    PUTCHAR(val[i], ucp); \
    }

    ADDCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	f003 0304 	and.w	r3, r3, #4
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d01f      	beq.n	800ce2c <lcp_addci+0x6a>
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	885b      	ldrh	r3, [r3, #2]
 800cdf0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d019      	beq.n	800ce2c <lcp_addci+0x6a>
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	1c5a      	adds	r2, r3, #1
 800cdfc:	60ba      	str	r2, [r7, #8]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	701a      	strb	r2, [r3, #0]
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	1c5a      	adds	r2, r3, #1
 800ce06:	60ba      	str	r2, [r7, #8]
 800ce08:	2204      	movs	r2, #4
 800ce0a:	701a      	strb	r2, [r3, #0]
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	1c5a      	adds	r2, r3, #1
 800ce10:	60ba      	str	r2, [r7, #8]
 800ce12:	697a      	ldr	r2, [r7, #20]
 800ce14:	8852      	ldrh	r2, [r2, #2]
 800ce16:	0a12      	lsrs	r2, r2, #8
 800ce18:	b292      	uxth	r2, r2
 800ce1a:	b2d2      	uxtb	r2, r2
 800ce1c:	701a      	strb	r2, [r3, #0]
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	1c5a      	adds	r2, r3, #1
 800ce22:	60ba      	str	r2, [r7, #8]
 800ce24:	697a      	ldr	r2, [r7, #20]
 800ce26:	8852      	ldrh	r2, [r2, #2]
 800ce28:	b2d2      	uxtb	r2, r2
 800ce2a:	701a      	strb	r2, [r3, #0]
    ADDCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	f003 0308 	and.w	r3, r3, #8
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d02d      	beq.n	800ce96 <lcp_addci+0xd4>
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce42:	d028      	beq.n	800ce96 <lcp_addci+0xd4>
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	1c5a      	adds	r2, r3, #1
 800ce48:	60ba      	str	r2, [r7, #8]
 800ce4a:	2202      	movs	r2, #2
 800ce4c:	701a      	strb	r2, [r3, #0]
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	1c5a      	adds	r2, r3, #1
 800ce52:	60ba      	str	r2, [r7, #8]
 800ce54:	2206      	movs	r2, #6
 800ce56:	701a      	strb	r2, [r3, #0]
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	1c5a      	adds	r2, r3, #1
 800ce5c:	60ba      	str	r2, [r7, #8]
 800ce5e:	697a      	ldr	r2, [r7, #20]
 800ce60:	6892      	ldr	r2, [r2, #8]
 800ce62:	0e12      	lsrs	r2, r2, #24
 800ce64:	b2d2      	uxtb	r2, r2
 800ce66:	701a      	strb	r2, [r3, #0]
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	1c5a      	adds	r2, r3, #1
 800ce6c:	60ba      	str	r2, [r7, #8]
 800ce6e:	697a      	ldr	r2, [r7, #20]
 800ce70:	6892      	ldr	r2, [r2, #8]
 800ce72:	0c12      	lsrs	r2, r2, #16
 800ce74:	b2d2      	uxtb	r2, r2
 800ce76:	701a      	strb	r2, [r3, #0]
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	1c5a      	adds	r2, r3, #1
 800ce7c:	60ba      	str	r2, [r7, #8]
 800ce7e:	697a      	ldr	r2, [r7, #20]
 800ce80:	6892      	ldr	r2, [r2, #8]
 800ce82:	0a12      	lsrs	r2, r2, #8
 800ce84:	b2d2      	uxtb	r2, r2
 800ce86:	701a      	strb	r2, [r3, #0]
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	1c5a      	adds	r2, r3, #1
 800ce8c:	60ba      	str	r2, [r7, #8]
 800ce8e:	697a      	ldr	r2, [r7, #20]
 800ce90:	6892      	ldr	r2, [r2, #8]
 800ce92:	b2d2      	uxtb	r2, r2
 800ce94:	701a      	strb	r2, [r3, #0]
#if CHAP_SUPPORT /* cannot be improved, embedding a directive within macro arguments is not portable */
#if EAP_SUPPORT
    ADDCICHAP(CI_AUTHTYPE, !go->neg_eap && go->neg_chap, go->chap_mdtype);
#endif /* EAP_SUPPORT */
#if !EAP_SUPPORT
    ADDCICHAP(CI_AUTHTYPE, go->neg_chap, go->chap_mdtype);
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	f003 0320 	and.w	r3, r3, #32
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d020      	beq.n	800cee6 <lcp_addci+0x124>
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	1c5a      	adds	r2, r3, #1
 800cea8:	60ba      	str	r2, [r7, #8]
 800ceaa:	2203      	movs	r2, #3
 800ceac:	701a      	strb	r2, [r3, #0]
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	1c5a      	adds	r2, r3, #1
 800ceb2:	60ba      	str	r2, [r7, #8]
 800ceb4:	2205      	movs	r2, #5
 800ceb6:	701a      	strb	r2, [r3, #0]
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	1c5a      	adds	r2, r3, #1
 800cebc:	60ba      	str	r2, [r7, #8]
 800cebe:	22c2      	movs	r2, #194	; 0xc2
 800cec0:	701a      	strb	r2, [r3, #0]
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	1c5a      	adds	r2, r3, #1
 800cec6:	60ba      	str	r2, [r7, #8]
 800cec8:	2223      	movs	r2, #35	; 0x23
 800ceca:	701a      	strb	r2, [r3, #0]
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	1c5a      	adds	r2, r3, #1
 800ced0:	60ba      	str	r2, [r7, #8]
 800ced2:	697a      	ldr	r2, [r7, #20]
 800ced4:	7912      	ldrb	r2, [r2, #4]
 800ced6:	f002 0204 	and.w	r2, r2, #4
 800ceda:	2a00      	cmp	r2, #0
 800cedc:	d001      	beq.n	800cee2 <lcp_addci+0x120>
 800cede:	2205      	movs	r2, #5
 800cee0:	e000      	b.n	800cee4 <lcp_addci+0x122>
 800cee2:	2200      	movs	r2, #0
 800cee4:	701a      	strb	r2, [r3, #0]
#endif /* EAP_SUPPORT && CHAP_SUPPORT */
#if EAP_SUPPORT && !CHAP_SUPPORT
    ADDCISHORT(CI_AUTHTYPE, !go->neg_eap && go->neg_upap, PPP_PAP);
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
    ADDCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	f003 0320 	and.w	r3, r3, #32
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d11a      	bne.n	800cf2a <lcp_addci+0x168>
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	f003 0310 	and.w	r3, r3, #16
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d013      	beq.n	800cf2a <lcp_addci+0x168>
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	1c5a      	adds	r2, r3, #1
 800cf06:	60ba      	str	r2, [r7, #8]
 800cf08:	2203      	movs	r2, #3
 800cf0a:	701a      	strb	r2, [r3, #0]
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	1c5a      	adds	r2, r3, #1
 800cf10:	60ba      	str	r2, [r7, #8]
 800cf12:	2204      	movs	r2, #4
 800cf14:	701a      	strb	r2, [r3, #0]
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	1c5a      	adds	r2, r3, #1
 800cf1a:	60ba      	str	r2, [r7, #8]
 800cf1c:	22c0      	movs	r2, #192	; 0xc0
 800cf1e:	701a      	strb	r2, [r3, #0]
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	1c5a      	adds	r2, r3, #1
 800cf24:	60ba      	str	r2, [r7, #8]
 800cf26:	2223      	movs	r2, #35	; 0x23
 800cf28:	701a      	strb	r2, [r3, #0]
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ADDCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ADDCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	785b      	ldrb	r3, [r3, #1]
 800cf2e:	f003 0302 	and.w	r3, r3, #2
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d00e      	beq.n	800cf56 <lcp_addci+0x194>
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	1c5a      	adds	r2, r3, #1
 800cf3c:	60ba      	str	r2, [r7, #8]
 800cf3e:	220d      	movs	r2, #13
 800cf40:	701a      	strb	r2, [r3, #0]
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	1c5a      	adds	r2, r3, #1
 800cf46:	60ba      	str	r2, [r7, #8]
 800cf48:	2203      	movs	r2, #3
 800cf4a:	701a      	strb	r2, [r3, #0]
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	1c5a      	adds	r2, r3, #1
 800cf50:	60ba      	str	r2, [r7, #8]
 800cf52:	2206      	movs	r2, #6
 800cf54:	701a      	strb	r2, [r3, #0]
    ADDCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d028      	beq.n	800cfb6 <lcp_addci+0x1f4>
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	1c5a      	adds	r2, r3, #1
 800cf68:	60ba      	str	r2, [r7, #8]
 800cf6a:	2205      	movs	r2, #5
 800cf6c:	701a      	strb	r2, [r3, #0]
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	1c5a      	adds	r2, r3, #1
 800cf72:	60ba      	str	r2, [r7, #8]
 800cf74:	2206      	movs	r2, #6
 800cf76:	701a      	strb	r2, [r3, #0]
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	1c5a      	adds	r2, r3, #1
 800cf7c:	60ba      	str	r2, [r7, #8]
 800cf7e:	697a      	ldr	r2, [r7, #20]
 800cf80:	68d2      	ldr	r2, [r2, #12]
 800cf82:	0e12      	lsrs	r2, r2, #24
 800cf84:	b2d2      	uxtb	r2, r2
 800cf86:	701a      	strb	r2, [r3, #0]
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	1c5a      	adds	r2, r3, #1
 800cf8c:	60ba      	str	r2, [r7, #8]
 800cf8e:	697a      	ldr	r2, [r7, #20]
 800cf90:	68d2      	ldr	r2, [r2, #12]
 800cf92:	0c12      	lsrs	r2, r2, #16
 800cf94:	b2d2      	uxtb	r2, r2
 800cf96:	701a      	strb	r2, [r3, #0]
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	1c5a      	adds	r2, r3, #1
 800cf9c:	60ba      	str	r2, [r7, #8]
 800cf9e:	697a      	ldr	r2, [r7, #20]
 800cfa0:	68d2      	ldr	r2, [r2, #12]
 800cfa2:	0a12      	lsrs	r2, r2, #8
 800cfa4:	b2d2      	uxtb	r2, r2
 800cfa6:	701a      	strb	r2, [r3, #0]
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	1c5a      	adds	r2, r3, #1
 800cfac:	60ba      	str	r2, [r7, #8]
 800cfae:	697a      	ldr	r2, [r7, #20]
 800cfb0:	68d2      	ldr	r2, [r2, #12]
 800cfb2:	b2d2      	uxtb	r2, r2
 800cfb4:	701a      	strb	r2, [r3, #0]
    ADDCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d009      	beq.n	800cfd8 <lcp_addci+0x216>
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	1c5a      	adds	r2, r3, #1
 800cfc8:	60ba      	str	r2, [r7, #8]
 800cfca:	2207      	movs	r2, #7
 800cfcc:	701a      	strb	r2, [r3, #0]
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	1c5a      	adds	r2, r3, #1
 800cfd2:	60ba      	str	r2, [r7, #8]
 800cfd4:	2202      	movs	r2, #2
 800cfd6:	701a      	strb	r2, [r3, #0]
    ADDCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	785b      	ldrb	r3, [r3, #1]
 800cfdc:	f003 0301 	and.w	r3, r3, #1
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d009      	beq.n	800cffa <lcp_addci+0x238>
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	1c5a      	adds	r2, r3, #1
 800cfea:	60ba      	str	r2, [r7, #8]
 800cfec:	2208      	movs	r2, #8
 800cfee:	701a      	strb	r2, [r3, #0]
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	1c5a      	adds	r2, r3, #1
 800cff4:	60ba      	str	r2, [r7, #8]
 800cff6:	2202      	movs	r2, #2
 800cff8:	701a      	strb	r2, [r3, #0]
#ifdef HAVE_MULTILINK
    ADDCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif
    ADDCIVOID(CI_SSNHF, go->neg_ssnhf);
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	785b      	ldrb	r3, [r3, #1]
 800cffe:	f003 0304 	and.w	r3, r3, #4
 800d002:	b2db      	uxtb	r3, r3
 800d004:	2b00      	cmp	r3, #0
 800d006:	d009      	beq.n	800d01c <lcp_addci+0x25a>
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	1c5a      	adds	r2, r3, #1
 800d00c:	60ba      	str	r2, [r7, #8]
 800d00e:	2212      	movs	r2, #18
 800d010:	701a      	strb	r2, [r3, #0]
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	1c5a      	adds	r2, r3, #1
 800d016:	60ba      	str	r2, [r7, #8]
 800d018:	2202      	movs	r2, #2
 800d01a:	701a      	strb	r2, [r3, #0]
    ADDCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	785b      	ldrb	r3, [r3, #1]
 800d020:	f003 0308 	and.w	r3, r3, #8
 800d024:	b2db      	uxtb	r3, r3
 800d026:	2b00      	cmp	r3, #0
 800d028:	d027      	beq.n	800d07a <lcp_addci+0x2b8>
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	1c5a      	adds	r2, r3, #1
 800d02e:	60ba      	str	r2, [r7, #8]
 800d030:	2213      	movs	r2, #19
 800d032:	701a      	strb	r2, [r3, #0]
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	1c5a      	adds	r2, r3, #1
 800d038:	60ba      	str	r2, [r7, #8]
 800d03a:	697a      	ldr	r2, [r7, #20]
 800d03c:	7c92      	ldrb	r2, [r2, #18]
 800d03e:	3203      	adds	r2, #3
 800d040:	b2d2      	uxtb	r2, r2
 800d042:	701a      	strb	r2, [r3, #0]
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	1c5a      	adds	r2, r3, #1
 800d048:	60ba      	str	r2, [r7, #8]
 800d04a:	697a      	ldr	r2, [r7, #20]
 800d04c:	7c52      	ldrb	r2, [r2, #17]
 800d04e:	701a      	strb	r2, [r3, #0]
 800d050:	2300      	movs	r3, #0
 800d052:	61fb      	str	r3, [r7, #28]
 800d054:	e00b      	b.n	800d06e <lcp_addci+0x2ac>
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	1c5a      	adds	r2, r3, #1
 800d05a:	60ba      	str	r2, [r7, #8]
 800d05c:	6979      	ldr	r1, [r7, #20]
 800d05e:	69fa      	ldr	r2, [r7, #28]
 800d060:	440a      	add	r2, r1
 800d062:	3213      	adds	r2, #19
 800d064:	7812      	ldrb	r2, [r2, #0]
 800d066:	701a      	strb	r2, [r3, #0]
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	3301      	adds	r3, #1
 800d06c:	61fb      	str	r3, [r7, #28]
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	7c9b      	ldrb	r3, [r3, #18]
 800d072:	461a      	mov	r2, r3
 800d074:	69fb      	ldr	r3, [r7, #28]
 800d076:	429a      	cmp	r2, r3
 800d078:	dced      	bgt.n	800d056 <lcp_addci+0x294>

    if (ucp - start_ucp != *lenp) {
	/* this should never happen, because peer_mtu should be 1500 */
	ppp_error(("Bug in lcp_addci: wrong length"));
    }
}
 800d07a:	bf00      	nop
 800d07c:	3724      	adds	r7, #36	; 0x24
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <lcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int lcp_ackci(fsm *f, u_char *p, int len) {
 800d086:	b480      	push	{r7}
 800d088:	b08b      	sub	sp, #44	; 0x2c
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	60f8      	str	r0, [r7, #12]
 800d08e:	60b9      	str	r1, [r7, #8]
 800d090:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	623b      	str	r3, [r7, #32]
    lcp_options *go = &pcb->lcp_gotoptions;
 800d098:	6a3b      	ldr	r3, [r7, #32]
 800d09a:	33d4      	adds	r3, #212	; 0xd4
 800d09c:	61fb      	str	r3, [r7, #28]
	    if (cichar != val[i]) \
		goto bad; \
	} \
    }

    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 800d09e:	69fb      	ldr	r3, [r7, #28]
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	f003 0304 	and.w	r3, r3, #4
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d033      	beq.n	800d114 <lcp_ackci+0x8e>
 800d0ac:	69fb      	ldr	r3, [r7, #28]
 800d0ae:	885b      	ldrh	r3, [r3, #2]
 800d0b0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d02d      	beq.n	800d114 <lcp_ackci+0x8e>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	3b04      	subs	r3, #4
 800d0bc:	607b      	str	r3, [r7, #4]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	f2c0 8214 	blt.w	800d4ee <lcp_ackci+0x468>
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	1c5a      	adds	r2, r3, #1
 800d0ca:	60ba      	str	r2, [r7, #8]
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	76fb      	strb	r3, [r7, #27]
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	1c5a      	adds	r2, r3, #1
 800d0d4:	60ba      	str	r2, [r7, #8]
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	76bb      	strb	r3, [r7, #26]
 800d0da:	7ebb      	ldrb	r3, [r7, #26]
 800d0dc:	2b04      	cmp	r3, #4
 800d0de:	f040 822d 	bne.w	800d53c <lcp_ackci+0x4b6>
 800d0e2:	7efb      	ldrb	r3, [r7, #27]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	f040 8229 	bne.w	800d53c <lcp_ackci+0x4b6>
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	1c5a      	adds	r2, r3, #1
 800d0ee:	60ba      	str	r2, [r7, #8]
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	021b      	lsls	r3, r3, #8
 800d0f6:	833b      	strh	r3, [r7, #24]
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	1c5a      	adds	r2, r3, #1
 800d0fc:	60ba      	str	r2, [r7, #8]
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	b29a      	uxth	r2, r3
 800d102:	8b3b      	ldrh	r3, [r7, #24]
 800d104:	4313      	orrs	r3, r2
 800d106:	833b      	strh	r3, [r7, #24]
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	885b      	ldrh	r3, [r3, #2]
 800d10c:	8b3a      	ldrh	r2, [r7, #24]
 800d10e:	429a      	cmp	r2, r3
 800d110:	f040 81ef 	bne.w	800d4f2 <lcp_ackci+0x46c>
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 800d114:	69fb      	ldr	r3, [r7, #28]
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	f003 0308 	and.w	r3, r3, #8
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d047      	beq.n	800d1b2 <lcp_ackci+0x12c>
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	689b      	ldr	r3, [r3, #8]
 800d126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d12a:	d042      	beq.n	800d1b2 <lcp_ackci+0x12c>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	3b06      	subs	r3, #6
 800d130:	607b      	str	r3, [r7, #4]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2b00      	cmp	r3, #0
 800d136:	f2c0 81de 	blt.w	800d4f6 <lcp_ackci+0x470>
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	1c5a      	adds	r2, r3, #1
 800d13e:	60ba      	str	r2, [r7, #8]
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	76fb      	strb	r3, [r7, #27]
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	1c5a      	adds	r2, r3, #1
 800d148:	60ba      	str	r2, [r7, #8]
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	76bb      	strb	r3, [r7, #26]
 800d14e:	7ebb      	ldrb	r3, [r7, #26]
 800d150:	2b06      	cmp	r3, #6
 800d152:	f040 81f3 	bne.w	800d53c <lcp_ackci+0x4b6>
 800d156:	7efb      	ldrb	r3, [r7, #27]
 800d158:	2b02      	cmp	r3, #2
 800d15a:	f040 81ef 	bne.w	800d53c <lcp_ackci+0x4b6>
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	1c5a      	adds	r2, r3, #1
 800d162:	60ba      	str	r2, [r7, #8]
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	021b      	lsls	r3, r3, #8
 800d168:	617b      	str	r3, [r7, #20]
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	1c5a      	adds	r2, r3, #1
 800d16e:	60ba      	str	r2, [r7, #8]
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	461a      	mov	r2, r3
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	4313      	orrs	r3, r2
 800d178:	617b      	str	r3, [r7, #20]
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	021b      	lsls	r3, r3, #8
 800d17e:	617b      	str	r3, [r7, #20]
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	1c5a      	adds	r2, r3, #1
 800d184:	60ba      	str	r2, [r7, #8]
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	461a      	mov	r2, r3
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	4313      	orrs	r3, r2
 800d18e:	617b      	str	r3, [r7, #20]
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	021b      	lsls	r3, r3, #8
 800d194:	617b      	str	r3, [r7, #20]
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	1c5a      	adds	r2, r3, #1
 800d19a:	60ba      	str	r2, [r7, #8]
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	461a      	mov	r2, r3
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	617b      	str	r3, [r7, #20]
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	689a      	ldr	r2, [r3, #8]
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	f040 81a4 	bne.w	800d4fa <lcp_ackci+0x474>
#if CHAP_SUPPORT /* cannot be improved, embedding a directive within macro arguments is not portable */
#if EAP_SUPPORT
    ACKCICHAP(CI_AUTHTYPE, !go->neg_eap && go->neg_chap, go->chap_mdtype);
#endif /* EAP_SUPPORT */
#if !EAP_SUPPORT
    ACKCICHAP(CI_AUTHTYPE, go->neg_chap, go->chap_mdtype);
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	f003 0320 	and.w	r3, r3, #32
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d03f      	beq.n	800d240 <lcp_ackci+0x1ba>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	3b05      	subs	r3, #5
 800d1c4:	607b      	str	r3, [r7, #4]
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	f2c0 8198 	blt.w	800d4fe <lcp_ackci+0x478>
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	1c5a      	adds	r2, r3, #1
 800d1d2:	60ba      	str	r2, [r7, #8]
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	76fb      	strb	r3, [r7, #27]
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	1c5a      	adds	r2, r3, #1
 800d1dc:	60ba      	str	r2, [r7, #8]
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	76bb      	strb	r3, [r7, #26]
 800d1e2:	7ebb      	ldrb	r3, [r7, #26]
 800d1e4:	2b05      	cmp	r3, #5
 800d1e6:	f040 81a9 	bne.w	800d53c <lcp_ackci+0x4b6>
 800d1ea:	7efb      	ldrb	r3, [r7, #27]
 800d1ec:	2b03      	cmp	r3, #3
 800d1ee:	f040 81a5 	bne.w	800d53c <lcp_ackci+0x4b6>
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	1c5a      	adds	r2, r3, #1
 800d1f6:	60ba      	str	r2, [r7, #8]
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	021b      	lsls	r3, r3, #8
 800d1fe:	833b      	strh	r3, [r7, #24]
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	1c5a      	adds	r2, r3, #1
 800d204:	60ba      	str	r2, [r7, #8]
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	b29a      	uxth	r2, r3
 800d20a:	8b3b      	ldrh	r3, [r7, #24]
 800d20c:	4313      	orrs	r3, r2
 800d20e:	833b      	strh	r3, [r7, #24]
 800d210:	8b3b      	ldrh	r3, [r7, #24]
 800d212:	f24c 2223 	movw	r2, #49699	; 0xc223
 800d216:	4293      	cmp	r3, r2
 800d218:	f040 8173 	bne.w	800d502 <lcp_ackci+0x47c>
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	1c5a      	adds	r2, r3, #1
 800d220:	60ba      	str	r2, [r7, #8]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	74fb      	strb	r3, [r7, #19]
 800d226:	7cfa      	ldrb	r2, [r7, #19]
 800d228:	69fb      	ldr	r3, [r7, #28]
 800d22a:	791b      	ldrb	r3, [r3, #4]
 800d22c:	f003 0304 	and.w	r3, r3, #4
 800d230:	2b00      	cmp	r3, #0
 800d232:	d001      	beq.n	800d238 <lcp_ackci+0x1b2>
 800d234:	2305      	movs	r3, #5
 800d236:	e000      	b.n	800d23a <lcp_ackci+0x1b4>
 800d238:	2300      	movs	r3, #0
 800d23a:	429a      	cmp	r2, r3
 800d23c:	f040 8163 	bne.w	800d506 <lcp_ackci+0x480>
#endif /* EAP_SUPPORT && CHAP_SUPPORT */
#if EAP_SUPPORT && !CHAP_SUPPORT
    ACKCISHORT(CI_AUTHTYPE, !go->neg_eap && go->neg_upap, PPP_PAP);
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
    ACKCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	f003 0320 	and.w	r3, r3, #32
 800d248:	b2db      	uxtb	r3, r3
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d134      	bne.n	800d2b8 <lcp_ackci+0x232>
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	f003 0310 	and.w	r3, r3, #16
 800d256:	b2db      	uxtb	r3, r3
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d02d      	beq.n	800d2b8 <lcp_ackci+0x232>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	3b04      	subs	r3, #4
 800d260:	607b      	str	r3, [r7, #4]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2b00      	cmp	r3, #0
 800d266:	f2c0 8150 	blt.w	800d50a <lcp_ackci+0x484>
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	1c5a      	adds	r2, r3, #1
 800d26e:	60ba      	str	r2, [r7, #8]
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	76fb      	strb	r3, [r7, #27]
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	1c5a      	adds	r2, r3, #1
 800d278:	60ba      	str	r2, [r7, #8]
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	76bb      	strb	r3, [r7, #26]
 800d27e:	7ebb      	ldrb	r3, [r7, #26]
 800d280:	2b04      	cmp	r3, #4
 800d282:	f040 815b 	bne.w	800d53c <lcp_ackci+0x4b6>
 800d286:	7efb      	ldrb	r3, [r7, #27]
 800d288:	2b03      	cmp	r3, #3
 800d28a:	f040 8157 	bne.w	800d53c <lcp_ackci+0x4b6>
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	1c5a      	adds	r2, r3, #1
 800d292:	60ba      	str	r2, [r7, #8]
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	b29b      	uxth	r3, r3
 800d298:	021b      	lsls	r3, r3, #8
 800d29a:	833b      	strh	r3, [r7, #24]
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	1c5a      	adds	r2, r3, #1
 800d2a0:	60ba      	str	r2, [r7, #8]
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	8b3b      	ldrh	r3, [r7, #24]
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	833b      	strh	r3, [r7, #24]
 800d2ac:	8b3b      	ldrh	r3, [r7, #24]
 800d2ae:	f24c 0223 	movw	r2, #49187	; 0xc023
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	f040 812b 	bne.w	800d50e <lcp_ackci+0x488>
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ACKCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	785b      	ldrb	r3, [r3, #1]
 800d2bc:	f003 0302 	and.w	r3, r3, #2
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d021      	beq.n	800d30a <lcp_ackci+0x284>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	3b03      	subs	r3, #3
 800d2ca:	607b      	str	r3, [r7, #4]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	f2c0 811f 	blt.w	800d512 <lcp_ackci+0x48c>
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	1c5a      	adds	r2, r3, #1
 800d2d8:	60ba      	str	r2, [r7, #8]
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	76fb      	strb	r3, [r7, #27]
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	1c5a      	adds	r2, r3, #1
 800d2e2:	60ba      	str	r2, [r7, #8]
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	76bb      	strb	r3, [r7, #26]
 800d2e8:	7ebb      	ldrb	r3, [r7, #26]
 800d2ea:	2b03      	cmp	r3, #3
 800d2ec:	f040 8126 	bne.w	800d53c <lcp_ackci+0x4b6>
 800d2f0:	7efb      	ldrb	r3, [r7, #27]
 800d2f2:	2b0d      	cmp	r3, #13
 800d2f4:	f040 8122 	bne.w	800d53c <lcp_ackci+0x4b6>
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	1c5a      	adds	r2, r3, #1
 800d2fc:	60ba      	str	r2, [r7, #8]
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	74fb      	strb	r3, [r7, #19]
 800d302:	7cfb      	ldrb	r3, [r7, #19]
 800d304:	2b06      	cmp	r3, #6
 800d306:	f040 8106 	bne.w	800d516 <lcp_ackci+0x490>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 800d30a:	69fb      	ldr	r3, [r7, #28]
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d312:	b2db      	uxtb	r3, r3
 800d314:	2b00      	cmp	r3, #0
 800d316:	d042      	beq.n	800d39e <lcp_ackci+0x318>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	3b06      	subs	r3, #6
 800d31c:	607b      	str	r3, [r7, #4]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2b00      	cmp	r3, #0
 800d322:	f2c0 80fa 	blt.w	800d51a <lcp_ackci+0x494>
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	1c5a      	adds	r2, r3, #1
 800d32a:	60ba      	str	r2, [r7, #8]
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	76fb      	strb	r3, [r7, #27]
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	1c5a      	adds	r2, r3, #1
 800d334:	60ba      	str	r2, [r7, #8]
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	76bb      	strb	r3, [r7, #26]
 800d33a:	7ebb      	ldrb	r3, [r7, #26]
 800d33c:	2b06      	cmp	r3, #6
 800d33e:	f040 80fd 	bne.w	800d53c <lcp_ackci+0x4b6>
 800d342:	7efb      	ldrb	r3, [r7, #27]
 800d344:	2b05      	cmp	r3, #5
 800d346:	f040 80f9 	bne.w	800d53c <lcp_ackci+0x4b6>
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	1c5a      	adds	r2, r3, #1
 800d34e:	60ba      	str	r2, [r7, #8]
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	021b      	lsls	r3, r3, #8
 800d354:	617b      	str	r3, [r7, #20]
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	1c5a      	adds	r2, r3, #1
 800d35a:	60ba      	str	r2, [r7, #8]
 800d35c:	781b      	ldrb	r3, [r3, #0]
 800d35e:	461a      	mov	r2, r3
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	4313      	orrs	r3, r2
 800d364:	617b      	str	r3, [r7, #20]
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	021b      	lsls	r3, r3, #8
 800d36a:	617b      	str	r3, [r7, #20]
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	1c5a      	adds	r2, r3, #1
 800d370:	60ba      	str	r2, [r7, #8]
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	461a      	mov	r2, r3
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	4313      	orrs	r3, r2
 800d37a:	617b      	str	r3, [r7, #20]
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	021b      	lsls	r3, r3, #8
 800d380:	617b      	str	r3, [r7, #20]
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	1c5a      	adds	r2, r3, #1
 800d386:	60ba      	str	r2, [r7, #8]
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	461a      	mov	r2, r3
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	4313      	orrs	r3, r2
 800d390:	617b      	str	r3, [r7, #20]
 800d392:	69fb      	ldr	r3, [r7, #28]
 800d394:	68da      	ldr	r2, [r3, #12]
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	429a      	cmp	r2, r3
 800d39a:	f040 80c0 	bne.w	800d51e <lcp_ackci+0x498>
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d018      	beq.n	800d3de <lcp_ackci+0x358>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	3b02      	subs	r3, #2
 800d3b0:	607b      	str	r3, [r7, #4]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	f2c0 80b4 	blt.w	800d522 <lcp_ackci+0x49c>
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	1c5a      	adds	r2, r3, #1
 800d3be:	60ba      	str	r2, [r7, #8]
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	76fb      	strb	r3, [r7, #27]
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	1c5a      	adds	r2, r3, #1
 800d3c8:	60ba      	str	r2, [r7, #8]
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	76bb      	strb	r3, [r7, #26]
 800d3ce:	7ebb      	ldrb	r3, [r7, #26]
 800d3d0:	2b02      	cmp	r3, #2
 800d3d2:	f040 80b3 	bne.w	800d53c <lcp_ackci+0x4b6>
 800d3d6:	7efb      	ldrb	r3, [r7, #27]
 800d3d8:	2b07      	cmp	r3, #7
 800d3da:	f040 80af 	bne.w	800d53c <lcp_ackci+0x4b6>
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	785b      	ldrb	r3, [r3, #1]
 800d3e2:	f003 0301 	and.w	r3, r3, #1
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d018      	beq.n	800d41e <lcp_ackci+0x398>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	3b02      	subs	r3, #2
 800d3f0:	607b      	str	r3, [r7, #4]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f2c0 8096 	blt.w	800d526 <lcp_ackci+0x4a0>
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	1c5a      	adds	r2, r3, #1
 800d3fe:	60ba      	str	r2, [r7, #8]
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	76fb      	strb	r3, [r7, #27]
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	1c5a      	adds	r2, r3, #1
 800d408:	60ba      	str	r2, [r7, #8]
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	76bb      	strb	r3, [r7, #26]
 800d40e:	7ebb      	ldrb	r3, [r7, #26]
 800d410:	2b02      	cmp	r3, #2
 800d412:	f040 8093 	bne.w	800d53c <lcp_ackci+0x4b6>
 800d416:	7efb      	ldrb	r3, [r7, #27]
 800d418:	2b08      	cmp	r3, #8
 800d41a:	f040 808f 	bne.w	800d53c <lcp_ackci+0x4b6>
#ifdef HAVE_MULTILINK
    ACKCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 800d41e:	69fb      	ldr	r3, [r7, #28]
 800d420:	785b      	ldrb	r3, [r3, #1]
 800d422:	f003 0304 	and.w	r3, r3, #4
 800d426:	b2db      	uxtb	r3, r3
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d015      	beq.n	800d458 <lcp_ackci+0x3d2>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	3b02      	subs	r3, #2
 800d430:	607b      	str	r3, [r7, #4]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2b00      	cmp	r3, #0
 800d436:	db78      	blt.n	800d52a <lcp_ackci+0x4a4>
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	1c5a      	adds	r2, r3, #1
 800d43c:	60ba      	str	r2, [r7, #8]
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	76fb      	strb	r3, [r7, #27]
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	1c5a      	adds	r2, r3, #1
 800d446:	60ba      	str	r2, [r7, #8]
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	76bb      	strb	r3, [r7, #26]
 800d44c:	7ebb      	ldrb	r3, [r7, #26]
 800d44e:	2b02      	cmp	r3, #2
 800d450:	d174      	bne.n	800d53c <lcp_ackci+0x4b6>
 800d452:	7efb      	ldrb	r3, [r7, #27]
 800d454:	2b12      	cmp	r3, #18
 800d456:	d171      	bne.n	800d53c <lcp_ackci+0x4b6>
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 800d458:	69fb      	ldr	r3, [r7, #28]
 800d45a:	785b      	ldrb	r3, [r3, #1]
 800d45c:	f003 0308 	and.w	r3, r3, #8
 800d460:	b2db      	uxtb	r3, r3
 800d462:	2b00      	cmp	r3, #0
 800d464:	d03e      	beq.n	800d4e4 <lcp_ackci+0x45e>
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	7c9b      	ldrb	r3, [r3, #18]
 800d46a:	3303      	adds	r3, #3
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	1ad3      	subs	r3, r2, r3
 800d470:	607b      	str	r3, [r7, #4]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2b00      	cmp	r3, #0
 800d476:	db5a      	blt.n	800d52e <lcp_ackci+0x4a8>
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	1c5a      	adds	r2, r3, #1
 800d47c:	60ba      	str	r2, [r7, #8]
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	76fb      	strb	r3, [r7, #27]
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	1c5a      	adds	r2, r3, #1
 800d486:	60ba      	str	r2, [r7, #8]
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	76bb      	strb	r3, [r7, #26]
 800d48c:	7eba      	ldrb	r2, [r7, #26]
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	7c9b      	ldrb	r3, [r3, #18]
 800d492:	3303      	adds	r3, #3
 800d494:	429a      	cmp	r2, r3
 800d496:	d151      	bne.n	800d53c <lcp_ackci+0x4b6>
 800d498:	7efb      	ldrb	r3, [r7, #27]
 800d49a:	2b13      	cmp	r3, #19
 800d49c:	d14e      	bne.n	800d53c <lcp_ackci+0x4b6>
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	1c5a      	adds	r2, r3, #1
 800d4a2:	60ba      	str	r2, [r7, #8]
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	74fb      	strb	r3, [r7, #19]
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	7c5b      	ldrb	r3, [r3, #17]
 800d4ac:	7cfa      	ldrb	r2, [r7, #19]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d13f      	bne.n	800d532 <lcp_ackci+0x4ac>
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	627b      	str	r3, [r7, #36]	; 0x24
 800d4b6:	e00f      	b.n	800d4d8 <lcp_ackci+0x452>
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	1c5a      	adds	r2, r3, #1
 800d4bc:	60ba      	str	r2, [r7, #8]
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	74fb      	strb	r3, [r7, #19]
 800d4c2:	69fa      	ldr	r2, [r7, #28]
 800d4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c6:	4413      	add	r3, r2
 800d4c8:	3313      	adds	r3, #19
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	7cfa      	ldrb	r2, [r7, #19]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d131      	bne.n	800d536 <lcp_ackci+0x4b0>
 800d4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	627b      	str	r3, [r7, #36]	; 0x24
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	7c9b      	ldrb	r3, [r3, #18]
 800d4dc:	461a      	mov	r2, r3
 800d4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	dce9      	bgt.n	800d4b8 <lcp_ackci+0x432>
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d127      	bne.n	800d53a <lcp_ackci+0x4b4>
	goto bad;
    return (1);
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e027      	b.n	800d53e <lcp_ackci+0x4b8>
    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 800d4ee:	bf00      	nop
 800d4f0:	e024      	b.n	800d53c <lcp_ackci+0x4b6>
 800d4f2:	bf00      	nop
 800d4f4:	e022      	b.n	800d53c <lcp_ackci+0x4b6>
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 800d4f6:	bf00      	nop
 800d4f8:	e020      	b.n	800d53c <lcp_ackci+0x4b6>
 800d4fa:	bf00      	nop
 800d4fc:	e01e      	b.n	800d53c <lcp_ackci+0x4b6>
    ACKCICHAP(CI_AUTHTYPE, go->neg_chap, go->chap_mdtype);
 800d4fe:	bf00      	nop
 800d500:	e01c      	b.n	800d53c <lcp_ackci+0x4b6>
 800d502:	bf00      	nop
 800d504:	e01a      	b.n	800d53c <lcp_ackci+0x4b6>
 800d506:	bf00      	nop
 800d508:	e018      	b.n	800d53c <lcp_ackci+0x4b6>
    ACKCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
 800d50a:	bf00      	nop
 800d50c:	e016      	b.n	800d53c <lcp_ackci+0x4b6>
 800d50e:	bf00      	nop
 800d510:	e014      	b.n	800d53c <lcp_ackci+0x4b6>
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 800d512:	bf00      	nop
 800d514:	e012      	b.n	800d53c <lcp_ackci+0x4b6>
 800d516:	bf00      	nop
 800d518:	e010      	b.n	800d53c <lcp_ackci+0x4b6>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 800d51a:	bf00      	nop
 800d51c:	e00e      	b.n	800d53c <lcp_ackci+0x4b6>
 800d51e:	bf00      	nop
 800d520:	e00c      	b.n	800d53c <lcp_ackci+0x4b6>
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 800d522:	bf00      	nop
 800d524:	e00a      	b.n	800d53c <lcp_ackci+0x4b6>
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 800d526:	bf00      	nop
 800d528:	e008      	b.n	800d53c <lcp_ackci+0x4b6>
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 800d52a:	bf00      	nop
 800d52c:	e006      	b.n	800d53c <lcp_ackci+0x4b6>
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 800d52e:	bf00      	nop
 800d530:	e004      	b.n	800d53c <lcp_ackci+0x4b6>
 800d532:	bf00      	nop
 800d534:	e002      	b.n	800d53c <lcp_ackci+0x4b6>
 800d536:	bf00      	nop
 800d538:	e000      	b.n	800d53c <lcp_ackci+0x4b6>
	goto bad;
 800d53a:	bf00      	nop
bad:
    LCPDEBUG(("lcp_acki: received bad Ack!"));
    return (0);
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	372c      	adds	r7, #44	; 0x2c
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr
	...

0800d54c <lcp_nakci>:
 *
 * Returns:
 *	0 - Nak was bad.
 *	1 - Nak was good.
 */
static int lcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 800d54c:	b5b0      	push	{r4, r5, r7, lr}
 800d54e:	b0a2      	sub	sp, #136	; 0x88
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	607a      	str	r2, [r7, #4]
 800d558:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    lcp_options *go = &pcb->lcp_gotoptions;
 800d562:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d566:	33d4      	adds	r3, #212	; 0xd4
 800d568:	67fb      	str	r3, [r7, #124]	; 0x7c
    lcp_options *wo = &pcb->lcp_wantoptions;
 800d56a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d56e:	33ac      	adds	r3, #172	; 0xac
 800d570:	67bb      	str	r3, [r7, #120]	; 0x78
    u_char citype, cichar, *next;
    u_short cishort;
    u32_t cilong;
    lcp_options no;		/* options we've seen Naks for */
    lcp_options try_;		/* options to request next time */
    int looped_back = 0;
 800d572:	2300      	movs	r3, #0
 800d574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    int cilen;

    BZERO(&no, sizeof(no));
 800d578:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d57c:	2228      	movs	r2, #40	; 0x28
 800d57e:	2100      	movs	r1, #0
 800d580:	4618      	mov	r0, r3
 800d582:	f005 f900 	bl	8012786 <memset>
    try_ = *go;
 800d586:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d588:	f107 0414 	add.w	r4, r7, #20
 800d58c:	461d      	mov	r5, r3
 800d58e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d596:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d59a:	e884 0003 	stmia.w	r4, {r0, r1}
     * we want.  Therefore, accept any MRU less than what we asked for,
     * but then ignore the new value when setting the MRU in the kernel.
     * If they send us a bigger MRU than what we asked, accept it, up to
     * the limit of the default MRU we'd get if we didn't negotiate.
     */
    if (go->neg_mru && go->mru != PPP_DEFMRU) {
 800d59e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	f003 0304 	and.w	r3, r3, #4
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d045      	beq.n	800d638 <lcp_nakci+0xec>
 800d5ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5ae:	885b      	ldrh	r3, [r3, #2]
 800d5b0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d03f      	beq.n	800d638 <lcp_nakci+0xec>
	NAKCISHORT(CI_MRU, neg_mru,
 800d5b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	f003 0304 	and.w	r3, r3, #4
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d038      	beq.n	800d638 <lcp_nakci+0xec>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2b03      	cmp	r3, #3
 800d5ca:	dd35      	ble.n	800d638 <lcp_nakci+0xec>
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	2b04      	cmp	r3, #4
 800d5d4:	d130      	bne.n	800d638 <lcp_nakci+0xec>
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d12c      	bne.n	800d638 <lcp_nakci+0xec>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	3b04      	subs	r3, #4
 800d5e2:	607b      	str	r3, [r7, #4]
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	3302      	adds	r3, #2
 800d5e8:	60bb      	str	r3, [r7, #8]
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	1c5a      	adds	r2, r3, #1
 800d5ee:	60ba      	str	r2, [r7, #8]
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	b29b      	uxth	r3, r3
 800d5f4:	021b      	lsls	r3, r3, #8
 800d5f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	1c5a      	adds	r2, r3, #1
 800d5fe:	60ba      	str	r2, [r7, #8]
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	b29a      	uxth	r2, r3
 800d604:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800d608:	4313      	orrs	r3, r2
 800d60a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800d60e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d612:	f043 0304 	orr.w	r3, r3, #4
 800d616:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800d61a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d61c:	885b      	ldrh	r3, [r3, #2]
 800d61e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d622:	429a      	cmp	r2, r3
 800d624:	d905      	bls.n	800d632 <lcp_nakci+0xe6>
 800d626:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800d62a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d62e:	4293      	cmp	r3, r2
 800d630:	d802      	bhi.n	800d638 <lcp_nakci+0xec>
 800d632:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800d636:	82fb      	strh	r3, [r7, #22]
    }

    /*
     * Add any characters they want to our (receive-side) asyncmap.
     */
    if (go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) {
 800d638:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	f003 0308 	and.w	r3, r3, #8
 800d640:	b2db      	uxtb	r3, r3
 800d642:	2b00      	cmp	r3, #0
 800d644:	d04c      	beq.n	800d6e0 <lcp_nakci+0x194>
 800d646:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d648:	689b      	ldr	r3, [r3, #8]
 800d64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d64e:	d047      	beq.n	800d6e0 <lcp_nakci+0x194>
	NAKCILONG(CI_ASYNCMAP, neg_asyncmap,
 800d650:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	f003 0308 	and.w	r3, r3, #8
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d040      	beq.n	800d6e0 <lcp_nakci+0x194>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2b05      	cmp	r3, #5
 800d662:	dd3d      	ble.n	800d6e0 <lcp_nakci+0x194>
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	3301      	adds	r3, #1
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	2b06      	cmp	r3, #6
 800d66c:	d138      	bne.n	800d6e0 <lcp_nakci+0x194>
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	2b02      	cmp	r3, #2
 800d674:	d134      	bne.n	800d6e0 <lcp_nakci+0x194>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	3b06      	subs	r3, #6
 800d67a:	607b      	str	r3, [r7, #4]
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	3302      	adds	r3, #2
 800d680:	60bb      	str	r3, [r7, #8]
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	1c5a      	adds	r2, r3, #1
 800d686:	60ba      	str	r2, [r7, #8]
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	021b      	lsls	r3, r3, #8
 800d68c:	673b      	str	r3, [r7, #112]	; 0x70
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	1c5a      	adds	r2, r3, #1
 800d692:	60ba      	str	r2, [r7, #8]
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	461a      	mov	r2, r3
 800d698:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d69a:	4313      	orrs	r3, r2
 800d69c:	673b      	str	r3, [r7, #112]	; 0x70
 800d69e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d6a0:	021b      	lsls	r3, r3, #8
 800d6a2:	673b      	str	r3, [r7, #112]	; 0x70
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	1c5a      	adds	r2, r3, #1
 800d6a8:	60ba      	str	r2, [r7, #8]
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	461a      	mov	r2, r3
 800d6ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	673b      	str	r3, [r7, #112]	; 0x70
 800d6b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d6b6:	021b      	lsls	r3, r3, #8
 800d6b8:	673b      	str	r3, [r7, #112]	; 0x70
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	1c5a      	adds	r2, r3, #1
 800d6be:	60ba      	str	r2, [r7, #8]
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	673b      	str	r3, [r7, #112]	; 0x70
 800d6ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d6ce:	f043 0308 	orr.w	r3, r3, #8
 800d6d2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800d6d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d6d8:	689a      	ldr	r2, [r3, #8]
 800d6da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	61fb      	str	r3, [r7, #28]
     * they are proposing a different protocol, or a different
     * hash algorithm for CHAP.
     */
    if ((0
#if CHAP_SUPPORT
        || go->neg_chap
 800d6e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	f003 0320 	and.w	r3, r3, #32
 800d6e8:	b2db      	uxtb	r3, r3
    if ((0
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d107      	bne.n	800d6fe <lcp_nakci+0x1b2>
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
        || go->neg_upap
 800d6ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	f003 0310 	and.w	r3, r3, #16
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	f000 80c0 	beq.w	800d87e <lcp_nakci+0x332>
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
        || go->neg_eap
#endif /* EAP_SUPPORT */
        )
	&& len >= CILEN_SHORT
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2b03      	cmp	r3, #3
 800d702:	f340 80bc 	ble.w	800d87e <lcp_nakci+0x332>
	&& p[0] == CI_AUTHTYPE && p[1] >= CILEN_SHORT && p[1] <= len) {
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	2b03      	cmp	r3, #3
 800d70c:	f040 80b7 	bne.w	800d87e <lcp_nakci+0x332>
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	3301      	adds	r3, #1
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	2b03      	cmp	r3, #3
 800d718:	f240 80b1 	bls.w	800d87e <lcp_nakci+0x332>
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	3301      	adds	r3, #1
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	461a      	mov	r2, r3
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	429a      	cmp	r2, r3
 800d728:	f300 80a9 	bgt.w	800d87e <lcp_nakci+0x332>
	cilen = p[1];
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	3301      	adds	r3, #1
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= cilen;
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	607b      	str	r3, [r7, #4]
#if CHAP_SUPPORT
	no.neg_chap = go->neg_chap;
 800d73c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d744:	b2da      	uxtb	r2, r3
 800d746:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d74a:	f362 1345 	bfi	r3, r2, #5, #1
 800d74e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	no.neg_upap = go->neg_upap;
 800d752:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d75a:	b2da      	uxtb	r2, r3
 800d75c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d760:	f362 1304 	bfi	r3, r2, #4, #1
 800d764:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
	no.neg_eap = go->neg_eap;
#endif /* EAP_SUPPORT */
	INCPTR(2, p);
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	3302      	adds	r3, #2
 800d76c:	60bb      	str	r3, [r7, #8]
	GETSHORT(cishort, p);
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	1c5a      	adds	r2, r3, #1
 800d772:	60ba      	str	r2, [r7, #8]
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	b29b      	uxth	r3, r3
 800d778:	021b      	lsls	r3, r3, #8
 800d77a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	1c5a      	adds	r2, r3, #1
 800d782:	60ba      	str	r2, [r7, #8]
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	b29a      	uxth	r2, r3
 800d788:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800d78c:	4313      	orrs	r3, r2
 800d78e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

#if PAP_SUPPORT
	if (cishort == PPP_PAP && cilen == CILEN_SHORT) {
 800d792:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800d796:	f24c 0223 	movw	r2, #49187	; 0xc023
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d10f      	bne.n	800d7be <lcp_nakci+0x272>
 800d79e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7a0:	2b04      	cmp	r3, #4
 800d7a2:	d10c      	bne.n	800d7be <lcp_nakci+0x272>
	    else
#endif /* EAP_SUPPORT */

#if CHAP_SUPPORT
	    /* If we were asking for CHAP, then we need to stop that. */
	    if (go->neg_chap)
 800d7a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	f003 0320 	and.w	r3, r3, #32
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	f000 82d7 	beq.w	800dd62 <lcp_nakci+0x816>
		try_.neg_chap = 0;
 800d7b4:	7d3b      	ldrb	r3, [r7, #20]
 800d7b6:	f36f 1345 	bfc	r3, #5, #1
 800d7ba:	753b      	strb	r3, [r7, #20]
	    if (go->neg_chap)
 800d7bc:	e05f      	b.n	800d87e <lcp_nakci+0x332>
		goto bad;
	} else
#endif /* PAP_SUPPORT */

#if CHAP_SUPPORT
	if (cishort == PPP_CHAP && cilen == CILEN_CHAP) {
 800d7be:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800d7c2:	f24c 2223 	movw	r2, #49699	; 0xc223
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d142      	bne.n	800d850 <lcp_nakci+0x304>
 800d7ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7cc:	2b05      	cmp	r3, #5
 800d7ce:	d13f      	bne.n	800d850 <lcp_nakci+0x304>
	    GETCHAR(cichar, p);
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	1c5a      	adds	r2, r3, #1
 800d7d4:	60ba      	str	r2, [r7, #8]
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		/* Try to set up to use their suggestion, if possible */
		if (CHAP_CANDIGEST(go->chap_mdtype, cichar))
		    try_.chap_mdtype = CHAP_MDTYPE_D(cichar);
	    } else
#endif /* EAP_SUPPORT */
	    if (go->neg_chap) {
 800d7dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	f003 0320 	and.w	r3, r3, #32
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d02d      	beq.n	800d846 <lcp_nakci+0x2fa>
		/*
		 * We were asking for our preferred algorithm, they must
		 * want something different.
		 */
		if (cichar != CHAP_DIGEST(go->chap_mdtype)) {
 800d7ea:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 800d7ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d7f0:	791b      	ldrb	r3, [r3, #4]
 800d7f2:	f003 0304 	and.w	r3, r3, #4
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	f000 82b5 	beq.w	800dd66 <lcp_nakci+0x81a>
		    if (CHAP_CANDIGEST(go->chap_mdtype, cichar)) {
 800d7fc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800d800:	2b05      	cmp	r3, #5
 800d802:	d10e      	bne.n	800d822 <lcp_nakci+0x2d6>
 800d804:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d806:	791b      	ldrb	r3, [r3, #4]
 800d808:	f003 0304 	and.w	r3, r3, #4
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d008      	beq.n	800d822 <lcp_nakci+0x2d6>
			/* Use their suggestion if we support it ... */
			try_.chap_mdtype = CHAP_MDTYPE_D(cichar);
 800d810:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800d814:	2b05      	cmp	r3, #5
 800d816:	d101      	bne.n	800d81c <lcp_nakci+0x2d0>
 800d818:	2304      	movs	r3, #4
 800d81a:	e000      	b.n	800d81e <lcp_nakci+0x2d2>
 800d81c:	2300      	movs	r3, #0
 800d81e:	763b      	strb	r3, [r7, #24]
	    if (go->neg_chap) {
 800d820:	e02c      	b.n	800d87c <lcp_nakci+0x330>
		    } else {
			/* ... otherwise, try our next-preferred algorithm. */
			try_.chap_mdtype &= ~(CHAP_MDTYPE(try_.chap_mdtype));
 800d822:	7e3b      	ldrb	r3, [r7, #24]
 800d824:	b25a      	sxtb	r2, r3
 800d826:	7e3b      	ldrb	r3, [r7, #24]
 800d828:	3b01      	subs	r3, #1
 800d82a:	b2db      	uxtb	r3, r3
 800d82c:	b25b      	sxtb	r3, r3
 800d82e:	4013      	ands	r3, r2
 800d830:	b25b      	sxtb	r3, r3
 800d832:	b2db      	uxtb	r3, r3
 800d834:	763b      	strb	r3, [r7, #24]
			if (try_.chap_mdtype == MDTYPE_NONE) /* out of algos */
 800d836:	7e3b      	ldrb	r3, [r7, #24]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d11f      	bne.n	800d87c <lcp_nakci+0x330>
			    try_.neg_chap = 0;
 800d83c:	7d3b      	ldrb	r3, [r7, #20]
 800d83e:	f36f 1345 	bfc	r3, #5, #1
 800d842:	753b      	strb	r3, [r7, #20]
	    if (go->neg_chap) {
 800d844:	e01a      	b.n	800d87c <lcp_nakci+0x330>
	    } else {
		/*
		 * Stop asking for PAP if we were asking for it.
		 */
#if PAP_SUPPORT
		try_.neg_upap = 0;
 800d846:	7d3b      	ldrb	r3, [r7, #20]
 800d848:	f36f 1304 	bfc	r3, #4, #1
 800d84c:	753b      	strb	r3, [r7, #20]
	    if (go->neg_chap) {
 800d84e:	e015      	b.n	800d87c <lcp_nakci+0x330>
		try_.neg_eap = 0;
	    else
#endif /* EAP_SUPPORT */

#if CHAP_SUPPORT
	    if (go->neg_chap)
 800d850:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	f003 0320 	and.w	r3, r3, #32
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d004      	beq.n	800d868 <lcp_nakci+0x31c>
		try_.neg_chap = 0;
 800d85e:	7d3b      	ldrb	r3, [r7, #20]
 800d860:	f36f 1345 	bfc	r3, #5, #1
 800d864:	753b      	strb	r3, [r7, #20]
 800d866:	e003      	b.n	800d870 <lcp_nakci+0x324>
	    else
#endif /* CHAP_SUPPORT */

#if PAP_SUPPORT
	    if(1)
		try_.neg_upap = 0;
 800d868:	7d3b      	ldrb	r3, [r7, #20]
 800d86a:	f36f 1304 	bfc	r3, #4, #1
 800d86e:	753b      	strb	r3, [r7, #20]
	    else
#endif /* PAP_SUPPORT */
	    {}

	    p += cilen - CILEN_SHORT;
 800d870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d872:	3b04      	subs	r3, #4
 800d874:	68ba      	ldr	r2, [r7, #8]
 800d876:	4413      	add	r3, r2
 800d878:	60bb      	str	r3, [r7, #8]
 800d87a:	e000      	b.n	800d87e <lcp_nakci+0x332>
	    if (go->neg_chap) {
 800d87c:	bf00      	nop
#endif /* LQR_SUPPORT */

    /*
     * Only implementing CBCP...not the rest of the callback options
     */
    NAKCICHAR(CI_CALLBACK, neg_cbcp,
 800d87e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d880:	785b      	ldrb	r3, [r3, #1]
 800d882:	f003 0302 	and.w	r3, r3, #2
 800d886:	b2db      	uxtb	r3, r3
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d021      	beq.n	800d8d0 <lcp_nakci+0x384>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2b02      	cmp	r3, #2
 800d890:	dd1e      	ble.n	800d8d0 <lcp_nakci+0x384>
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	3301      	adds	r3, #1
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	2b03      	cmp	r3, #3
 800d89a:	d119      	bne.n	800d8d0 <lcp_nakci+0x384>
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	2b0d      	cmp	r3, #13
 800d8a2:	d115      	bne.n	800d8d0 <lcp_nakci+0x384>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	3b03      	subs	r3, #3
 800d8a8:	607b      	str	r3, [r7, #4]
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	3302      	adds	r3, #2
 800d8ae:	60bb      	str	r3, [r7, #8]
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	1c5a      	adds	r2, r3, #1
 800d8b4:	60ba      	str	r2, [r7, #8]
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d8bc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d8c0:	f043 0302 	orr.w	r3, r3, #2
 800d8c4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800d8c8:	7d7b      	ldrb	r3, [r7, #21]
 800d8ca:	f36f 0341 	bfc	r3, #1, #1
 800d8ce:	757b      	strb	r3, [r7, #21]
              );

    /*
     * Check for a looped-back line.
     */
    NAKCILONG(CI_MAGICNUMBER, neg_magicnumber,
 800d8d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d042      	beq.n	800d964 <lcp_nakci+0x418>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2b05      	cmp	r3, #5
 800d8e2:	dd3f      	ble.n	800d964 <lcp_nakci+0x418>
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	781b      	ldrb	r3, [r3, #0]
 800d8ea:	2b06      	cmp	r3, #6
 800d8ec:	d13a      	bne.n	800d964 <lcp_nakci+0x418>
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	2b05      	cmp	r3, #5
 800d8f4:	d136      	bne.n	800d964 <lcp_nakci+0x418>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	3b06      	subs	r3, #6
 800d8fa:	607b      	str	r3, [r7, #4]
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	3302      	adds	r3, #2
 800d900:	60bb      	str	r3, [r7, #8]
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	1c5a      	adds	r2, r3, #1
 800d906:	60ba      	str	r2, [r7, #8]
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	021b      	lsls	r3, r3, #8
 800d90c:	673b      	str	r3, [r7, #112]	; 0x70
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	1c5a      	adds	r2, r3, #1
 800d912:	60ba      	str	r2, [r7, #8]
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	461a      	mov	r2, r3
 800d918:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d91a:	4313      	orrs	r3, r2
 800d91c:	673b      	str	r3, [r7, #112]	; 0x70
 800d91e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d920:	021b      	lsls	r3, r3, #8
 800d922:	673b      	str	r3, [r7, #112]	; 0x70
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	1c5a      	adds	r2, r3, #1
 800d928:	60ba      	str	r2, [r7, #8]
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	461a      	mov	r2, r3
 800d92e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d930:	4313      	orrs	r3, r2
 800d932:	673b      	str	r3, [r7, #112]	; 0x70
 800d934:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d936:	021b      	lsls	r3, r3, #8
 800d938:	673b      	str	r3, [r7, #112]	; 0x70
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	1c5a      	adds	r2, r3, #1
 800d93e:	60ba      	str	r2, [r7, #8]
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	461a      	mov	r2, r3
 800d944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d946:	4313      	orrs	r3, r2
 800d948:	673b      	str	r3, [r7, #112]	; 0x70
 800d94a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d94e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d952:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800d956:	f001 fb11 	bl	800ef7c <magic>
 800d95a:	4603      	mov	r3, r0
 800d95c:	623b      	str	r3, [r7, #32]
 800d95e:	2301      	movs	r3, #1
 800d960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    /*
     * Peer shouldn't send Nak for protocol compression or
     * address/control compression requests; they should send
     * a Reject instead.  If they send a Nak, treat it as a Reject.
     */
    NAKCIVOID(CI_PCOMPRESSION, neg_pcompression);
 800d964:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d01b      	beq.n	800d9aa <lcp_nakci+0x45e>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2b01      	cmp	r3, #1
 800d976:	dd18      	ble.n	800d9aa <lcp_nakci+0x45e>
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	3301      	adds	r3, #1
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	2b02      	cmp	r3, #2
 800d980:	d113      	bne.n	800d9aa <lcp_nakci+0x45e>
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	2b07      	cmp	r3, #7
 800d988:	d10f      	bne.n	800d9aa <lcp_nakci+0x45e>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	3b02      	subs	r3, #2
 800d98e:	607b      	str	r3, [r7, #4]
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	3302      	adds	r3, #2
 800d994:	60bb      	str	r3, [r7, #8]
 800d996:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d99a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d99e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800d9a2:	7d3b      	ldrb	r3, [r7, #20]
 800d9a4:	f36f 13c7 	bfc	r3, #7, #1
 800d9a8:	753b      	strb	r3, [r7, #20]
    NAKCIVOID(CI_ACCOMPRESSION, neg_accompression);
 800d9aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d9ac:	785b      	ldrb	r3, [r3, #1]
 800d9ae:	f003 0301 	and.w	r3, r3, #1
 800d9b2:	b2db      	uxtb	r3, r3
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d01b      	beq.n	800d9f0 <lcp_nakci+0x4a4>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	dd18      	ble.n	800d9f0 <lcp_nakci+0x4a4>
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	2b02      	cmp	r3, #2
 800d9c6:	d113      	bne.n	800d9f0 <lcp_nakci+0x4a4>
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	2b08      	cmp	r3, #8
 800d9ce:	d10f      	bne.n	800d9f0 <lcp_nakci+0x4a4>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	3b02      	subs	r3, #2
 800d9d4:	607b      	str	r3, [r7, #4]
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	3302      	adds	r3, #2
 800d9da:	60bb      	str	r3, [r7, #8]
 800d9dc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d9e0:	f043 0301 	orr.w	r3, r3, #1
 800d9e4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800d9e8:	7d7b      	ldrb	r3, [r7, #21]
 800d9ea:	f36f 0300 	bfc	r3, #0, #1
 800d9ee:	757b      	strb	r3, [r7, #21]

    /*
     * Nak for short sequence numbers shouldn't be sent, treat it
     * like a reject.
     */
    NAKCIVOID(CI_SSNHF, neg_ssnhf);
 800d9f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d9f2:	785b      	ldrb	r3, [r3, #1]
 800d9f4:	f003 0304 	and.w	r3, r3, #4
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d01b      	beq.n	800da36 <lcp_nakci+0x4ea>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2b01      	cmp	r3, #1
 800da02:	dd18      	ble.n	800da36 <lcp_nakci+0x4ea>
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	3301      	adds	r3, #1
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	2b02      	cmp	r3, #2
 800da0c:	d113      	bne.n	800da36 <lcp_nakci+0x4ea>
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	2b12      	cmp	r3, #18
 800da14:	d10f      	bne.n	800da36 <lcp_nakci+0x4ea>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	3b02      	subs	r3, #2
 800da1a:	607b      	str	r3, [r7, #4]
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	3302      	adds	r3, #2
 800da20:	60bb      	str	r3, [r7, #8]
 800da22:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800da26:	f043 0304 	orr.w	r3, r3, #4
 800da2a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800da2e:	7d7b      	ldrb	r3, [r7, #21]
 800da30:	f36f 0382 	bfc	r3, #2, #1
 800da34:	757b      	strb	r3, [r7, #21]

    /*
     * Nak of the endpoint discriminator option is not permitted,
     * treat it like a reject.
     */
    NAKCIENDP(CI_EPDISC, neg_endpoint);
 800da36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da38:	785b      	ldrb	r3, [r3, #1]
 800da3a:	f003 0308 	and.w	r3, r3, #8
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	2b00      	cmp	r3, #0
 800da42:	f000 8158 	beq.w	800dcf6 <lcp_nakci+0x7aa>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2b02      	cmp	r3, #2
 800da4a:	f340 8154 	ble.w	800dcf6 <lcp_nakci+0x7aa>
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	2b13      	cmp	r3, #19
 800da54:	f040 814f 	bne.w	800dcf6 <lcp_nakci+0x7aa>
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	3301      	adds	r3, #1
 800da5c:	781b      	ldrb	r3, [r3, #0]
 800da5e:	2b02      	cmp	r3, #2
 800da60:	f240 8149 	bls.w	800dcf6 <lcp_nakci+0x7aa>
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	3301      	adds	r3, #1
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	461a      	mov	r2, r3
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	429a      	cmp	r2, r3
 800da70:	f300 8141 	bgt.w	800dcf6 <lcp_nakci+0x7aa>
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	3301      	adds	r3, #1
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	461a      	mov	r2, r3
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	1a9b      	subs	r3, r3, r2
 800da80:	607b      	str	r3, [r7, #4]
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	3301      	adds	r3, #1
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	461a      	mov	r2, r3
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	4413      	add	r3, r2
 800da8e:	60bb      	str	r3, [r7, #8]
 800da90:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800da94:	f043 0308 	orr.w	r3, r3, #8
 800da98:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800da9c:	7d7b      	ldrb	r3, [r7, #21]
 800da9e:	f36f 03c3 	bfc	r3, #3, #1
 800daa2:	757b      	strb	r3, [r7, #21]
     * For the quality protocol, the Nak means `ask me to send you quality
     * reports', but if we didn't ask for them, we don't want them.
     * An option we don't recognize represents the peer asking to
     * negotiate some option we don't support, so ignore it.
     */
    while (len >= CILEN_VOID) {
 800daa4:	e127      	b.n	800dcf6 <lcp_nakci+0x7aa>
	GETCHAR(citype, p);
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	1c5a      	adds	r2, r3, #1
 800daaa:	60ba      	str	r2, [r7, #8]
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	GETCHAR(cilen, p);
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	1c5a      	adds	r2, r3, #1
 800dab6:	60ba      	str	r2, [r7, #8]
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (cilen < CILEN_VOID || (len -= cilen) < 0)
 800dabc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	f340 8152 	ble.w	800dd68 <lcp_nakci+0x81c>
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dac8:	1ad3      	subs	r3, r2, r3
 800daca:	607b      	str	r3, [r7, #4]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	f2c0 814a 	blt.w	800dd68 <lcp_nakci+0x81c>
	    goto bad;
	next = p + cilen - 2;
 800dad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dad6:	3b02      	subs	r3, #2
 800dad8:	68ba      	ldr	r2, [r7, #8]
 800dada:	4413      	add	r3, r2
 800dadc:	667b      	str	r3, [r7, #100]	; 0x64

	switch (citype) {
 800dade:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800dae2:	3b01      	subs	r3, #1
 800dae4:	2b12      	cmp	r3, #18
 800dae6:	f200 8101 	bhi.w	800dcec <lcp_nakci+0x7a0>
 800daea:	a201      	add	r2, pc, #4	; (adr r2, 800daf0 <lcp_nakci+0x5a4>)
 800daec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf0:	0800db3d 	.word	0x0800db3d
 800daf4:	0800dbb3 	.word	0x0800dbb3
 800daf8:	0800dbe7 	.word	0x0800dbe7
 800dafc:	0800dced 	.word	0x0800dced
 800db00:	0800dc29 	.word	0x0800dc29
 800db04:	0800dced 	.word	0x0800dced
 800db08:	0800dc53 	.word	0x0800dc53
 800db0c:	0800dc79 	.word	0x0800dc79
 800db10:	0800dced 	.word	0x0800dced
 800db14:	0800dced 	.word	0x0800dced
 800db18:	0800dced 	.word	0x0800dced
 800db1c:	0800dced 	.word	0x0800dced
 800db20:	0800dced 	.word	0x0800dced
 800db24:	0800dced 	.word	0x0800dced
 800db28:	0800dced 	.word	0x0800dced
 800db2c:	0800dced 	.word	0x0800dced
 800db30:	0800dced 	.word	0x0800dced
 800db34:	0800dc9d 	.word	0x0800dc9d
 800db38:	0800dcc9 	.word	0x0800dcc9
	case CI_MRU:
	    if ((go->neg_mru && go->mru != PPP_DEFMRU)
 800db3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	f003 0304 	and.w	r3, r3, #4
 800db44:	b2db      	uxtb	r3, r3
 800db46:	2b00      	cmp	r3, #0
 800db48:	d006      	beq.n	800db58 <lcp_nakci+0x60c>
 800db4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db4c:	885b      	ldrh	r3, [r3, #2]
 800db4e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800db52:	4293      	cmp	r3, r2
 800db54:	f040 8108 	bne.w	800dd68 <lcp_nakci+0x81c>
		|| no.neg_mru || cilen != CILEN_SHORT)
 800db58:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800db5c:	f003 0304 	and.w	r3, r3, #4
 800db60:	b2db      	uxtb	r3, r3
 800db62:	2b00      	cmp	r3, #0
 800db64:	f040 8100 	bne.w	800dd68 <lcp_nakci+0x81c>
 800db68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db6a:	2b04      	cmp	r3, #4
 800db6c:	f040 80fc 	bne.w	800dd68 <lcp_nakci+0x81c>
		goto bad;
	    GETSHORT(cishort, p);
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	1c5a      	adds	r2, r3, #1
 800db74:	60ba      	str	r2, [r7, #8]
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	b29b      	uxth	r3, r3
 800db7a:	021b      	lsls	r3, r3, #8
 800db7c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	1c5a      	adds	r2, r3, #1
 800db84:	60ba      	str	r2, [r7, #8]
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	b29a      	uxth	r2, r3
 800db8a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800db8e:	4313      	orrs	r3, r2
 800db90:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	    if (cishort < PPP_DEFMRU) {
 800db94:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800db98:	f240 52db 	movw	r2, #1499	; 0x5db
 800db9c:	4293      	cmp	r3, r2
 800db9e:	f200 80a7 	bhi.w	800dcf0 <lcp_nakci+0x7a4>
		try_.neg_mru = 1;
 800dba2:	7d3b      	ldrb	r3, [r7, #20]
 800dba4:	f043 0304 	orr.w	r3, r3, #4
 800dba8:	753b      	strb	r3, [r7, #20]
		try_.mru = cishort;
 800dbaa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800dbae:	82fb      	strh	r3, [r7, #22]
	    }
	    break;
 800dbb0:	e09e      	b.n	800dcf0 <lcp_nakci+0x7a4>
	case CI_ASYNCMAP:
	    if ((go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF)
 800dbb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dbb4:	781b      	ldrb	r3, [r3, #0]
 800dbb6:	f003 0308 	and.w	r3, r3, #8
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d005      	beq.n	800dbcc <lcp_nakci+0x680>
 800dbc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbc8:	f040 80ce 	bne.w	800dd68 <lcp_nakci+0x81c>
		|| no.neg_asyncmap || cilen != CILEN_LONG)
 800dbcc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dbd0:	f003 0308 	and.w	r3, r3, #8
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	f040 80c6 	bne.w	800dd68 <lcp_nakci+0x81c>
 800dbdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbde:	2b06      	cmp	r3, #6
 800dbe0:	f040 80c2 	bne.w	800dd68 <lcp_nakci+0x81c>
		goto bad;
	    break;
 800dbe4:	e085      	b.n	800dcf2 <lcp_nakci+0x7a6>
		 * Thus the double parentheses to mark the code explicitly
		 * disabled when building with clang
		 */
	    if ((0
#if CHAP_SUPPORT
                || go->neg_chap || no.neg_chap
 800dbe6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	f003 0320 	and.w	r3, r3, #32
 800dbee:	b2db      	uxtb	r3, r3
	    if ((0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	f040 80b9 	bne.w	800dd68 <lcp_nakci+0x81c>
                || go->neg_chap || no.neg_chap
 800dbf6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dbfa:	f003 0320 	and.w	r3, r3, #32
 800dbfe:	b2db      	uxtb	r3, r3
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	f040 80b1 	bne.w	800dd68 <lcp_nakci+0x81c>
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
                || go->neg_upap || no.neg_upap
 800dc06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	f003 0310 	and.w	r3, r3, #16
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	f040 80a9 	bne.w	800dd68 <lcp_nakci+0x81c>
 800dc16:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dc1a:	f003 0310 	and.w	r3, r3, #16
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	f040 80a1 	bne.w	800dd68 <lcp_nakci+0x81c>
#if EAP_SUPPORT
		|| go->neg_eap || no.neg_eap
#endif /* EAP_SUPPORT */
		))
		goto bad;
	    break;
 800dc26:	e064      	b.n	800dcf2 <lcp_nakci+0x7a6>
	case CI_MAGICNUMBER:
	    if (go->neg_magicnumber || no.neg_magicnumber ||
 800dc28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	f040 8098 	bne.w	800dd68 <lcp_nakci+0x81c>
 800dc38:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dc3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc40:	b2db      	uxtb	r3, r3
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	f040 8090 	bne.w	800dd68 <lcp_nakci+0x81c>
 800dc48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc4a:	2b06      	cmp	r3, #6
 800dc4c:	f040 808c 	bne.w	800dd68 <lcp_nakci+0x81c>
		cilen != CILEN_LONG)
		goto bad;
	    break;
 800dc50:	e04f      	b.n	800dcf2 <lcp_nakci+0x7a6>
	case CI_PCOMPRESSION:
	    if (go->neg_pcompression || no.neg_pcompression
 800dc52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	f040 8083 	bne.w	800dd68 <lcp_nakci+0x81c>
 800dc62:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dc66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d17b      	bne.n	800dd68 <lcp_nakci+0x81c>
		|| cilen != CILEN_VOID)
 800dc70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc72:	2b02      	cmp	r3, #2
 800dc74:	d178      	bne.n	800dd68 <lcp_nakci+0x81c>
		goto bad;
	    break;
 800dc76:	e03c      	b.n	800dcf2 <lcp_nakci+0x7a6>
	case CI_ACCOMPRESSION:
	    if (go->neg_accompression || no.neg_accompression
 800dc78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc7a:	785b      	ldrb	r3, [r3, #1]
 800dc7c:	f003 0301 	and.w	r3, r3, #1
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d170      	bne.n	800dd68 <lcp_nakci+0x81c>
 800dc86:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dc8a:	f003 0301 	and.w	r3, r3, #1
 800dc8e:	b2db      	uxtb	r3, r3
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d169      	bne.n	800dd68 <lcp_nakci+0x81c>
		|| cilen != CILEN_VOID)
 800dc94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc96:	2b02      	cmp	r3, #2
 800dc98:	d166      	bne.n	800dd68 <lcp_nakci+0x81c>
		goto bad;
	    break;
 800dc9a:	e02a      	b.n	800dcf2 <lcp_nakci+0x7a6>
	    if (go->neg_mrru || no.neg_mrru || cilen != CILEN_SHORT)
		goto bad;
	    break;
#endif /* HAVE_MULTILINK */
	case CI_SSNHF:
	    if (go->neg_ssnhf || no.neg_ssnhf || cilen != CILEN_VOID)
 800dc9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc9e:	785b      	ldrb	r3, [r3, #1]
 800dca0:	f003 0304 	and.w	r3, r3, #4
 800dca4:	b2db      	uxtb	r3, r3
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d15e      	bne.n	800dd68 <lcp_nakci+0x81c>
 800dcaa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dcae:	f003 0304 	and.w	r3, r3, #4
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d157      	bne.n	800dd68 <lcp_nakci+0x81c>
 800dcb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcba:	2b02      	cmp	r3, #2
 800dcbc:	d154      	bne.n	800dd68 <lcp_nakci+0x81c>
		goto bad;
	    try_.neg_ssnhf = 1;
 800dcbe:	7d7b      	ldrb	r3, [r7, #21]
 800dcc0:	f043 0304 	orr.w	r3, r3, #4
 800dcc4:	757b      	strb	r3, [r7, #21]
	    break;
 800dcc6:	e014      	b.n	800dcf2 <lcp_nakci+0x7a6>
	case CI_EPDISC:
	    if (go->neg_endpoint || no.neg_endpoint || cilen < CILEN_CHAR)
 800dcc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dcca:	785b      	ldrb	r3, [r3, #1]
 800dccc:	f003 0308 	and.w	r3, r3, #8
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d148      	bne.n	800dd68 <lcp_nakci+0x81c>
 800dcd6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dcda:	f003 0308 	and.w	r3, r3, #8
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d141      	bne.n	800dd68 <lcp_nakci+0x81c>
 800dce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dce6:	2b02      	cmp	r3, #2
 800dce8:	dd3e      	ble.n	800dd68 <lcp_nakci+0x81c>
		goto bad;
	    break;
 800dcea:	e002      	b.n	800dcf2 <lcp_nakci+0x7a6>
	default:
	    break;
 800dcec:	bf00      	nop
 800dcee:	e000      	b.n	800dcf2 <lcp_nakci+0x7a6>
	    break;
 800dcf0:	bf00      	nop
	}
	p = next;
 800dcf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dcf4:	60bb      	str	r3, [r7, #8]
    while (len >= CILEN_VOID) {
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	f73f aed4 	bgt.w	800daa6 <lcp_nakci+0x55a>

    /*
     * OK, the Nak is good.  Now we can update state.
     * If there are any options left we ignore them.
     */
    if (f->state != PPP_FSM_OPENED) {
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	7c1b      	ldrb	r3, [r3, #16]
 800dd02:	2b09      	cmp	r3, #9
 800dd04:	d02b      	beq.n	800dd5e <lcp_nakci+0x812>
	if (looped_back) {
 800dd06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d018      	beq.n	800dd40 <lcp_nakci+0x7f4>
	    if (++try_.numloops >= pcb->settings.lcp_loopbackfail) {
 800dd0e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dd12:	3301      	adds	r3, #1
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800dd1a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800dd1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd22:	7c9b      	ldrb	r3, [r3, #18]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d30e      	bcc.n	800dd46 <lcp_nakci+0x7fa>
		ppp_notice(("Serial line is looped back."));
		pcb->err_code = PPPERR_LOOPBACK;
 800dd28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd2c:	220c      	movs	r2, #12
 800dd2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		lcp_close(f->pcb, "Loopback detected");
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	490f      	ldr	r1, [pc, #60]	; (800dd74 <lcp_nakci+0x828>)
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7fe fd63 	bl	800c804 <lcp_close>
 800dd3e:	e002      	b.n	800dd46 <lcp_nakci+0x7fa>
	    }
	} else
	    try_.numloops = 0;
 800dd40:	2300      	movs	r3, #0
 800dd42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	*go = try_;
 800dd46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd48:	461d      	mov	r5, r3
 800dd4a:	f107 0414 	add.w	r4, r7, #20
 800dd4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd56:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dd5a:	e885 0003 	stmia.w	r5, {r0, r1}
    }

    return 1;
 800dd5e:	2301      	movs	r3, #1
 800dd60:	e003      	b.n	800dd6a <lcp_nakci+0x81e>
		goto bad;
 800dd62:	bf00      	nop
 800dd64:	e000      	b.n	800dd68 <lcp_nakci+0x81c>
		    goto bad;
 800dd66:	bf00      	nop

bad:
    LCPDEBUG(("lcp_nakci: received bad Nak!"));
    return 0;
 800dd68:	2300      	movs	r3, #0
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3788      	adds	r7, #136	; 0x88
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bdb0      	pop	{r4, r5, r7, pc}
 800dd72:	bf00      	nop
 800dd74:	08015798 	.word	0x08015798

0800dd78 <lcp_rejci>:
 *
 * Returns:
 *	0 - Reject was bad.
 *	1 - Reject was good.
 */
static int lcp_rejci(fsm *f, u_char *p, int len) {
 800dd78:	b4b0      	push	{r4, r5, r7}
 800dd7a:	b095      	sub	sp, #84	; 0x54
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	64bb      	str	r3, [r7, #72]	; 0x48
    lcp_options *go = &pcb->lcp_gotoptions;
 800dd8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd8c:	33d4      	adds	r3, #212	; 0xd4
 800dd8e:	647b      	str	r3, [r7, #68]	; 0x44
    u_char cichar;
    u_short cishort;
    u32_t cilong;
    lcp_options try_;		/* options to request next time */

    try_ = *go;
 800dd90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd92:	f107 0410 	add.w	r4, r7, #16
 800dd96:	461d      	mov	r5, r3
 800dd98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dda0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dda4:	e884 0003 	stmia.w	r4, {r0, r1}
		goto bad; \
	} \
	try_.neg = 0; \
    }

    REJCISHORT(CI_MRU, neg_mru, go->mru);
 800dda8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	f003 0304 	and.w	r3, r3, #4
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d02e      	beq.n	800de14 <lcp_rejci+0x9c>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2b03      	cmp	r3, #3
 800ddba:	dd2b      	ble.n	800de14 <lcp_rejci+0x9c>
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	2b04      	cmp	r3, #4
 800ddc4:	d126      	bne.n	800de14 <lcp_rejci+0x9c>
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d122      	bne.n	800de14 <lcp_rejci+0x9c>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	3b04      	subs	r3, #4
 800ddd2:	607b      	str	r3, [r7, #4]
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	3302      	adds	r3, #2
 800ddd8:	60bb      	str	r3, [r7, #8]
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	1c5a      	adds	r2, r3, #1
 800ddde:	60ba      	str	r2, [r7, #8]
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	021b      	lsls	r3, r3, #8
 800dde6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	1c5a      	adds	r2, r3, #1
 800ddee:	60ba      	str	r2, [r7, #8]
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ddfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de00:	885b      	ldrh	r3, [r3, #2]
 800de02:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800de06:	429a      	cmp	r2, r3
 800de08:	f040 81ff 	bne.w	800e20a <lcp_rejci+0x492>
 800de0c:	7c3b      	ldrb	r3, [r7, #16]
 800de0e:	f36f 0382 	bfc	r3, #2, #1
 800de12:	743b      	strb	r3, [r7, #16]
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 800de14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	f003 0308 	and.w	r3, r3, #8
 800de1c:	b2db      	uxtb	r3, r3
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d03f      	beq.n	800dea2 <lcp_rejci+0x12a>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2b05      	cmp	r3, #5
 800de26:	dd3c      	ble.n	800dea2 <lcp_rejci+0x12a>
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	3301      	adds	r3, #1
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	2b06      	cmp	r3, #6
 800de30:	d137      	bne.n	800dea2 <lcp_rejci+0x12a>
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	2b02      	cmp	r3, #2
 800de38:	d133      	bne.n	800dea2 <lcp_rejci+0x12a>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	3b06      	subs	r3, #6
 800de3e:	607b      	str	r3, [r7, #4]
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	3302      	adds	r3, #2
 800de44:	60bb      	str	r3, [r7, #8]
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	1c5a      	adds	r2, r3, #1
 800de4a:	60ba      	str	r2, [r7, #8]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	021b      	lsls	r3, r3, #8
 800de50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	1c5a      	adds	r2, r3, #1
 800de56:	60ba      	str	r2, [r7, #8]
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	461a      	mov	r2, r3
 800de5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de5e:	4313      	orrs	r3, r2
 800de60:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de64:	021b      	lsls	r3, r3, #8
 800de66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	1c5a      	adds	r2, r3, #1
 800de6c:	60ba      	str	r2, [r7, #8]
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	461a      	mov	r2, r3
 800de72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de74:	4313      	orrs	r3, r2
 800de76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de7a:	021b      	lsls	r3, r3, #8
 800de7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	1c5a      	adds	r2, r3, #1
 800de82:	60ba      	str	r2, [r7, #8]
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	461a      	mov	r2, r3
 800de88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de8a:	4313      	orrs	r3, r2
 800de8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de90:	689a      	ldr	r2, [r3, #8]
 800de92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de94:	429a      	cmp	r2, r3
 800de96:	f040 81ba 	bne.w	800e20e <lcp_rejci+0x496>
 800de9a:	7c3b      	ldrb	r3, [r7, #16]
 800de9c:	f36f 03c3 	bfc	r3, #3, #1
 800dea0:	743b      	strb	r3, [r7, #16]
#if EAP_SUPPORT
    REJCISHORT(CI_AUTHTYPE, neg_eap, PPP_EAP);
    if (!go->neg_eap) {
#endif /* EAP_SUPPORT */
#if CHAP_SUPPORT
	REJCICHAP(CI_AUTHTYPE, neg_chap, go->chap_mdtype);
 800dea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	f003 0320 	and.w	r3, r3, #32
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	2b00      	cmp	r3, #0
 800deae:	d046      	beq.n	800df3e <lcp_rejci+0x1c6>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2b04      	cmp	r3, #4
 800deb4:	dd43      	ble.n	800df3e <lcp_rejci+0x1c6>
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	3301      	adds	r3, #1
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	2b05      	cmp	r3, #5
 800debe:	d13e      	bne.n	800df3e <lcp_rejci+0x1c6>
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	2b03      	cmp	r3, #3
 800dec6:	d13a      	bne.n	800df3e <lcp_rejci+0x1c6>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	3b05      	subs	r3, #5
 800decc:	607b      	str	r3, [r7, #4]
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	3302      	adds	r3, #2
 800ded2:	60bb      	str	r3, [r7, #8]
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	1c5a      	adds	r2, r3, #1
 800ded8:	60ba      	str	r2, [r7, #8]
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	b29b      	uxth	r3, r3
 800dede:	021b      	lsls	r3, r3, #8
 800dee0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	1c5a      	adds	r2, r3, #1
 800dee8:	60ba      	str	r2, [r7, #8]
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	b29a      	uxth	r2, r3
 800deee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800def2:	4313      	orrs	r3, r2
 800def4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	1c5a      	adds	r2, r3, #1
 800defc:	60ba      	str	r2, [r7, #8]
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800df04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df08:	f24c 2223 	movw	r2, #49699	; 0xc223
 800df0c:	4293      	cmp	r3, r2
 800df0e:	f040 818b 	bne.w	800e228 <lcp_rejci+0x4b0>
 800df12:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800df16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df18:	791b      	ldrb	r3, [r3, #4]
 800df1a:	f003 0304 	and.w	r3, r3, #4
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d001      	beq.n	800df26 <lcp_rejci+0x1ae>
 800df22:	2305      	movs	r3, #5
 800df24:	e000      	b.n	800df28 <lcp_rejci+0x1b0>
 800df26:	2300      	movs	r3, #0
 800df28:	429a      	cmp	r2, r3
 800df2a:	f040 817d 	bne.w	800e228 <lcp_rejci+0x4b0>
 800df2e:	7c3b      	ldrb	r3, [r7, #16]
 800df30:	f36f 1345 	bfc	r3, #5, #1
 800df34:	743b      	strb	r3, [r7, #16]
 800df36:	7c3b      	ldrb	r3, [r7, #16]
 800df38:	f36f 1304 	bfc	r3, #4, #1
 800df3c:	743b      	strb	r3, [r7, #16]
	if (!go->neg_chap) {
 800df3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	f003 0320 	and.w	r3, r3, #32
 800df46:	b2db      	uxtb	r3, r3
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d135      	bne.n	800dfb8 <lcp_rejci+0x240>
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
 800df4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	f003 0310 	and.w	r3, r3, #16
 800df54:	b2db      	uxtb	r3, r3
 800df56:	2b00      	cmp	r3, #0
 800df58:	d02e      	beq.n	800dfb8 <lcp_rejci+0x240>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2b03      	cmp	r3, #3
 800df5e:	dd2b      	ble.n	800dfb8 <lcp_rejci+0x240>
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	3301      	adds	r3, #1
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	2b04      	cmp	r3, #4
 800df68:	d126      	bne.n	800dfb8 <lcp_rejci+0x240>
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	2b03      	cmp	r3, #3
 800df70:	d122      	bne.n	800dfb8 <lcp_rejci+0x240>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	3b04      	subs	r3, #4
 800df76:	607b      	str	r3, [r7, #4]
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	3302      	adds	r3, #2
 800df7c:	60bb      	str	r3, [r7, #8]
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	1c5a      	adds	r2, r3, #1
 800df82:	60ba      	str	r2, [r7, #8]
 800df84:	781b      	ldrb	r3, [r3, #0]
 800df86:	b29b      	uxth	r3, r3
 800df88:	021b      	lsls	r3, r3, #8
 800df8a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	1c5a      	adds	r2, r3, #1
 800df92:	60ba      	str	r2, [r7, #8]
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	b29a      	uxth	r2, r3
 800df98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df9c:	4313      	orrs	r3, r2
 800df9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800dfa2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dfa6:	f24c 0223 	movw	r2, #49187	; 0xc023
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	f040 8131 	bne.w	800e212 <lcp_rejci+0x49a>
 800dfb0:	7c3b      	ldrb	r3, [r7, #16]
 800dfb2:	f36f 1304 	bfc	r3, #4, #1
 800dfb6:	743b      	strb	r3, [r7, #16]
    }
#endif /* EAP_SUPPORT */
#if LQR_SUPPORT
    REJCILQR(CI_QUALITY, neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 800dfb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfba:	785b      	ldrb	r3, [r3, #1]
 800dfbc:	f003 0302 	and.w	r3, r3, #2
 800dfc0:	b2db      	uxtb	r3, r3
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d020      	beq.n	800e008 <lcp_rejci+0x290>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2b02      	cmp	r3, #2
 800dfca:	dd1d      	ble.n	800e008 <lcp_rejci+0x290>
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	3301      	adds	r3, #1
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	2b03      	cmp	r3, #3
 800dfd4:	d118      	bne.n	800e008 <lcp_rejci+0x290>
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	2b0d      	cmp	r3, #13
 800dfdc:	d114      	bne.n	800e008 <lcp_rejci+0x290>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	3b03      	subs	r3, #3
 800dfe2:	607b      	str	r3, [r7, #4]
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	3302      	adds	r3, #2
 800dfe8:	60bb      	str	r3, [r7, #8]
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	1c5a      	adds	r2, r3, #1
 800dfee:	60ba      	str	r2, [r7, #8]
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dff6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800dffa:	2b06      	cmp	r3, #6
 800dffc:	f040 810b 	bne.w	800e216 <lcp_rejci+0x49e>
 800e000:	7c7b      	ldrb	r3, [r7, #17]
 800e002:	f36f 0341 	bfc	r3, #1, #1
 800e006:	747b      	strb	r3, [r7, #17]
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 800e008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e010:	b2db      	uxtb	r3, r3
 800e012:	2b00      	cmp	r3, #0
 800e014:	d03f      	beq.n	800e096 <lcp_rejci+0x31e>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2b05      	cmp	r3, #5
 800e01a:	dd3c      	ble.n	800e096 <lcp_rejci+0x31e>
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	3301      	adds	r3, #1
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	2b06      	cmp	r3, #6
 800e024:	d137      	bne.n	800e096 <lcp_rejci+0x31e>
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	2b05      	cmp	r3, #5
 800e02c:	d133      	bne.n	800e096 <lcp_rejci+0x31e>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	3b06      	subs	r3, #6
 800e032:	607b      	str	r3, [r7, #4]
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	3302      	adds	r3, #2
 800e038:	60bb      	str	r3, [r7, #8]
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	1c5a      	adds	r2, r3, #1
 800e03e:	60ba      	str	r2, [r7, #8]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	021b      	lsls	r3, r3, #8
 800e044:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	1c5a      	adds	r2, r3, #1
 800e04a:	60ba      	str	r2, [r7, #8]
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	461a      	mov	r2, r3
 800e050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e052:	4313      	orrs	r3, r2
 800e054:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e058:	021b      	lsls	r3, r3, #8
 800e05a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	1c5a      	adds	r2, r3, #1
 800e060:	60ba      	str	r2, [r7, #8]
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	461a      	mov	r2, r3
 800e066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e068:	4313      	orrs	r3, r2
 800e06a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e06e:	021b      	lsls	r3, r3, #8
 800e070:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	1c5a      	adds	r2, r3, #1
 800e076:	60ba      	str	r2, [r7, #8]
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	461a      	mov	r2, r3
 800e07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e07e:	4313      	orrs	r3, r2
 800e080:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e084:	68da      	ldr	r2, [r3, #12]
 800e086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e088:	429a      	cmp	r2, r3
 800e08a:	f040 80c6 	bne.w	800e21a <lcp_rejci+0x4a2>
 800e08e:	7c3b      	ldrb	r3, [r7, #16]
 800e090:	f36f 1386 	bfc	r3, #6, #1
 800e094:	743b      	strb	r3, [r7, #16]
    REJCIVOID(CI_PCOMPRESSION, neg_pcompression);
 800e096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e09e:	b2db      	uxtb	r3, r3
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d015      	beq.n	800e0d0 <lcp_rejci+0x358>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	dd12      	ble.n	800e0d0 <lcp_rejci+0x358>
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	2b02      	cmp	r3, #2
 800e0b2:	d10d      	bne.n	800e0d0 <lcp_rejci+0x358>
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	2b07      	cmp	r3, #7
 800e0ba:	d109      	bne.n	800e0d0 <lcp_rejci+0x358>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	3b02      	subs	r3, #2
 800e0c0:	607b      	str	r3, [r7, #4]
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	3302      	adds	r3, #2
 800e0c6:	60bb      	str	r3, [r7, #8]
 800e0c8:	7c3b      	ldrb	r3, [r7, #16]
 800e0ca:	f36f 13c7 	bfc	r3, #7, #1
 800e0ce:	743b      	strb	r3, [r7, #16]
    REJCIVOID(CI_ACCOMPRESSION, neg_accompression);
 800e0d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0d2:	785b      	ldrb	r3, [r3, #1]
 800e0d4:	f003 0301 	and.w	r3, r3, #1
 800e0d8:	b2db      	uxtb	r3, r3
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d015      	beq.n	800e10a <lcp_rejci+0x392>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	dd12      	ble.n	800e10a <lcp_rejci+0x392>
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	2b02      	cmp	r3, #2
 800e0ec:	d10d      	bne.n	800e10a <lcp_rejci+0x392>
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	2b08      	cmp	r3, #8
 800e0f4:	d109      	bne.n	800e10a <lcp_rejci+0x392>
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	3b02      	subs	r3, #2
 800e0fa:	607b      	str	r3, [r7, #4]
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	3302      	adds	r3, #2
 800e100:	60bb      	str	r3, [r7, #8]
 800e102:	7c7b      	ldrb	r3, [r7, #17]
 800e104:	f36f 0300 	bfc	r3, #0, #1
 800e108:	747b      	strb	r3, [r7, #17]
#ifdef HAVE_MULTILINK
    REJCISHORT(CI_MRRU, neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    REJCIVOID(CI_SSNHF, neg_ssnhf);
 800e10a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e10c:	785b      	ldrb	r3, [r3, #1]
 800e10e:	f003 0304 	and.w	r3, r3, #4
 800e112:	b2db      	uxtb	r3, r3
 800e114:	2b00      	cmp	r3, #0
 800e116:	d015      	beq.n	800e144 <lcp_rejci+0x3cc>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2b01      	cmp	r3, #1
 800e11c:	dd12      	ble.n	800e144 <lcp_rejci+0x3cc>
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	3301      	adds	r3, #1
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	2b02      	cmp	r3, #2
 800e126:	d10d      	bne.n	800e144 <lcp_rejci+0x3cc>
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	2b12      	cmp	r3, #18
 800e12e:	d109      	bne.n	800e144 <lcp_rejci+0x3cc>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	3b02      	subs	r3, #2
 800e134:	607b      	str	r3, [r7, #4]
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	3302      	adds	r3, #2
 800e13a:	60bb      	str	r3, [r7, #8]
 800e13c:	7c7b      	ldrb	r3, [r7, #17]
 800e13e:	f36f 0382 	bfc	r3, #2, #1
 800e142:	747b      	strb	r3, [r7, #17]
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 800e144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e146:	785b      	ldrb	r3, [r3, #1]
 800e148:	f003 0308 	and.w	r3, r3, #8
 800e14c:	b2db      	uxtb	r3, r3
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d046      	beq.n	800e1e0 <lcp_rejci+0x468>
 800e152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e154:	7c9b      	ldrb	r3, [r3, #18]
 800e156:	1cda      	adds	r2, r3, #3
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	dc40      	bgt.n	800e1e0 <lcp_rejci+0x468>
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	2b13      	cmp	r3, #19
 800e164:	d13c      	bne.n	800e1e0 <lcp_rejci+0x468>
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	3301      	adds	r3, #1
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	461a      	mov	r2, r3
 800e16e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e170:	7c9b      	ldrb	r3, [r3, #18]
 800e172:	3303      	adds	r3, #3
 800e174:	429a      	cmp	r2, r3
 800e176:	d133      	bne.n	800e1e0 <lcp_rejci+0x468>
 800e178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e17a:	7c9b      	ldrb	r3, [r3, #18]
 800e17c:	3303      	adds	r3, #3
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	1ad3      	subs	r3, r2, r3
 800e182:	607b      	str	r3, [r7, #4]
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	3302      	adds	r3, #2
 800e188:	60bb      	str	r3, [r7, #8]
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	1c5a      	adds	r2, r3, #1
 800e18e:	60ba      	str	r2, [r7, #8]
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e198:	7c5b      	ldrb	r3, [r3, #17]
 800e19a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d13d      	bne.n	800e21e <lcp_rejci+0x4a6>
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1a6:	e011      	b.n	800e1cc <lcp_rejci+0x454>
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	1c5a      	adds	r2, r3, #1
 800e1ac:	60ba      	str	r2, [r7, #8]
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e1b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1b8:	4413      	add	r3, r2
 800e1ba:	3313      	adds	r3, #19
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d12d      	bne.n	800e222 <lcp_rejci+0x4aa>
 800e1c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1ce:	7c9b      	ldrb	r3, [r3, #18]
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	dce7      	bgt.n	800e1a8 <lcp_rejci+0x430>
 800e1d8:	7c7b      	ldrb	r3, [r7, #17]
 800e1da:	f36f 03c3 	bfc	r3, #3, #1
 800e1de:	747b      	strb	r3, [r7, #17]
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d11f      	bne.n	800e226 <lcp_rejci+0x4ae>
	goto bad;
    /*
     * Now we can update state.
     */
    if (f->state != PPP_FSM_OPENED)
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	7c1b      	ldrb	r3, [r3, #16]
 800e1ea:	2b09      	cmp	r3, #9
 800e1ec:	d00b      	beq.n	800e206 <lcp_rejci+0x48e>
	*go = try_;
 800e1ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1f0:	461d      	mov	r5, r3
 800e1f2:	f107 0410 	add.w	r4, r7, #16
 800e1f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e1f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e1fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e1fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e1fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e202:	e885 0003 	stmia.w	r5, {r0, r1}
    return 1;
 800e206:	2301      	movs	r3, #1
 800e208:	e00f      	b.n	800e22a <lcp_rejci+0x4b2>
    REJCISHORT(CI_MRU, neg_mru, go->mru);
 800e20a:	bf00      	nop
 800e20c:	e00c      	b.n	800e228 <lcp_rejci+0x4b0>
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 800e20e:	bf00      	nop
 800e210:	e00a      	b.n	800e228 <lcp_rejci+0x4b0>
	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
 800e212:	bf00      	nop
 800e214:	e008      	b.n	800e228 <lcp_rejci+0x4b0>
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 800e216:	bf00      	nop
 800e218:	e006      	b.n	800e228 <lcp_rejci+0x4b0>
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 800e21a:	bf00      	nop
 800e21c:	e004      	b.n	800e228 <lcp_rejci+0x4b0>
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 800e21e:	bf00      	nop
 800e220:	e002      	b.n	800e228 <lcp_rejci+0x4b0>
 800e222:	bf00      	nop
 800e224:	e000      	b.n	800e228 <lcp_rejci+0x4b0>
	goto bad;
 800e226:	bf00      	nop

bad:
    LCPDEBUG(("lcp_rejci: received bad Reject!"));
    return 0;
 800e228:	2300      	movs	r3, #0
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3754      	adds	r7, #84	; 0x54
 800e22e:	46bd      	mov	sp, r7
 800e230:	bcb0      	pop	{r4, r5, r7}
 800e232:	4770      	bx	lr

0800e234 <lcp_reqci>:
 * CONFNAK; returns CONFREJ if it can't return CONFACK.
 *
 * inp = Requested CIs
 * lenp = Length of requested CIs
 */
static int lcp_reqci(fsm *f, u_char *inp, int *lenp, int reject_if_disagree) {
 800e234:	b580      	push	{r7, lr}
 800e236:	b096      	sub	sp, #88	; 0x58
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	607a      	str	r2, [r7, #4]
 800e240:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	637b      	str	r3, [r7, #52]	; 0x34
    lcp_options *go = &pcb->lcp_gotoptions;
 800e248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e24a:	33d4      	adds	r3, #212	; 0xd4
 800e24c:	633b      	str	r3, [r7, #48]	; 0x30
    lcp_options *ho = &pcb->lcp_hisoptions;
 800e24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e250:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800e254:	62fb      	str	r3, [r7, #44]	; 0x2c
    lcp_options *ao = &pcb->lcp_allowoptions;
 800e256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e258:	33fc      	adds	r3, #252	; 0xfc
 800e25a:	62bb      	str	r3, [r7, #40]	; 0x28
    u_char *cip, *next;		/* Pointer to current and next CIs */
    int cilen, citype, cichar;	/* Parsed len, type, char value */
    u_short cishort;		/* Parsed short value */
    u32_t cilong;		/* Parse long value */
    int rc = CONFACK;		/* Final packet return code */
 800e25c:	2302      	movs	r3, #2
 800e25e:	64bb      	str	r3, [r7, #72]	; 0x48
    int orc;			/* Individual option return code */
    u_char *p;			/* Pointer to next char to parse */
    u_char *rejp;		/* Pointer to next char in reject frame */
    struct pbuf *nakp;          /* Nak buffer */
    u_char *nakoutp;		/* Pointer to next char in Nak frame */
    int l = *lenp;		/* Length left */
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	63bb      	str	r3, [r7, #56]	; 0x38

    /*
     * Reset all his options.
     */
    BZERO(ho, sizeof(*ho));
 800e266:	2228      	movs	r2, #40	; 0x28
 800e268:	2100      	movs	r1, #0
 800e26a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e26c:	f004 fa8b 	bl	8012786 <memset>

    /*
     * Process all his options.
     */
    next = inp;
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	657b      	str	r3, [r7, #84]	; 0x54
    nakp = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_CTRL_PBUF_UNKNOWN_SIZE), PBUF_RAM);
 800e274:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e27c:	2000      	movs	r0, #0
 800e27e:	f7f5 f853 	bl	8003328 <pbuf_alloc>
 800e282:	6278      	str	r0, [r7, #36]	; 0x24
    if(NULL == nakp)
 800e284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e286:	2b00      	cmp	r3, #0
 800e288:	d101      	bne.n	800e28e <lcp_reqci+0x5a>
        return 0;
 800e28a:	2300      	movs	r3, #0
 800e28c:	e371      	b.n	800e972 <lcp_reqci+0x73e>
    if(nakp->tot_len != nakp->len) {
 800e28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e290:	891a      	ldrh	r2, [r3, #8]
 800e292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e294:	895b      	ldrh	r3, [r3, #10]
 800e296:	429a      	cmp	r2, r3
 800e298:	d004      	beq.n	800e2a4 <lcp_reqci+0x70>
        pbuf_free(nakp);
 800e29a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e29c:	f7f5 fae2 	bl	8003864 <pbuf_free>
        return 0;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	e366      	b.n	800e972 <lcp_reqci+0x73e>
    }

    nakoutp = (u_char*)nakp->payload;
 800e2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    rejp = inp;
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 800e2ae:	e335      	b.n	800e91c <lcp_reqci+0x6e8>
	orc = CONFACK;			/* Assume success */
 800e2b0:	2302      	movs	r3, #2
 800e2b2:	647b      	str	r3, [r7, #68]	; 0x44
	cip = p = next;			/* Remember beginning of CI */
 800e2b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2b6:	623b      	str	r3, [r7, #32]
 800e2b8:	6a3b      	ldr	r3, [r7, #32]
 800e2ba:	61fb      	str	r3, [r7, #28]
	if (l < 2 ||			/* Not enough data for CI header or */
 800e2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	dd0b      	ble.n	800e2da <lcp_reqci+0xa6>
	    p[1] < 2 ||			/*  CI length too small or */
 800e2c2:	6a3b      	ldr	r3, [r7, #32]
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	781b      	ldrb	r3, [r3, #0]
	if (l < 2 ||			/* Not enough data for CI header or */
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d906      	bls.n	800e2da <lcp_reqci+0xa6>
	    p[1] > l) {			/*  CI length too big? */
 800e2cc:	6a3b      	ldr	r3, [r7, #32]
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	781b      	ldrb	r3, [r3, #0]
 800e2d2:	461a      	mov	r2, r3
	    p[1] < 2 ||			/*  CI length too small or */
 800e2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	dd08      	ble.n	800e2ec <lcp_reqci+0xb8>
	    LCPDEBUG(("lcp_reqci: bad CI length!"));
	    orc = CONFREJ;		/* Reject bad CI */
 800e2da:	2304      	movs	r3, #4
 800e2dc:	647b      	str	r3, [r7, #68]	; 0x44
	    cilen = l;			/* Reject till end of packet */
 800e2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e0:	653b      	str	r3, [r7, #80]	; 0x50
	    l = 0;			/* Don't loop again */
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	63bb      	str	r3, [r7, #56]	; 0x38
	    citype = 0;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	64fb      	str	r3, [r7, #76]	; 0x4c
	    goto endswitch;
 800e2ea:	e2eb      	b.n	800e8c4 <lcp_reqci+0x690>
	}
	GETCHAR(citype, p);		/* Parse CI type */
 800e2ec:	6a3b      	ldr	r3, [r7, #32]
 800e2ee:	1c5a      	adds	r2, r3, #1
 800e2f0:	623a      	str	r2, [r7, #32]
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	GETCHAR(cilen, p);		/* Parse CI length */
 800e2f6:	6a3b      	ldr	r3, [r7, #32]
 800e2f8:	1c5a      	adds	r2, r3, #1
 800e2fa:	623a      	str	r2, [r7, #32]
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	653b      	str	r3, [r7, #80]	; 0x50
	l -= cilen;			/* Adjust remaining length */
 800e300:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e304:	1ad3      	subs	r3, r2, r3
 800e306:	63bb      	str	r3, [r7, #56]	; 0x38
	next += cilen;			/* Step to next CI */
 800e308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e30a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e30c:	4413      	add	r3, r2
 800e30e:	657b      	str	r3, [r7, #84]	; 0x54

	switch (citype) {		/* Check CI type */
 800e310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e312:	3b01      	subs	r3, #1
 800e314:	2b12      	cmp	r3, #18
 800e316:	f200 82d2 	bhi.w	800e8be <lcp_reqci+0x68a>
 800e31a:	a201      	add	r2, pc, #4	; (adr r2, 800e320 <lcp_reqci+0xec>)
 800e31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e320:	0800e36d 	.word	0x0800e36d
 800e324:	0800e3eb 	.word	0x0800e3eb
 800e328:	0800e4d9 	.word	0x0800e4d9
 800e32c:	0800e8bf 	.word	0x0800e8bf
 800e330:	0800e6fb 	.word	0x0800e6fb
 800e334:	0800e8bf 	.word	0x0800e8bf
 800e338:	0800e7eb 	.word	0x0800e7eb
 800e33c:	0800e811 	.word	0x0800e811
 800e340:	0800e8bf 	.word	0x0800e8bf
 800e344:	0800e8bf 	.word	0x0800e8bf
 800e348:	0800e8bf 	.word	0x0800e8bf
 800e34c:	0800e8bf 	.word	0x0800e8bf
 800e350:	0800e8bf 	.word	0x0800e8bf
 800e354:	0800e8bf 	.word	0x0800e8bf
 800e358:	0800e8bf 	.word	0x0800e8bf
 800e35c:	0800e8bf 	.word	0x0800e8bf
 800e360:	0800e8bf 	.word	0x0800e8bf
 800e364:	0800e837 	.word	0x0800e837
 800e368:	0800e85d 	.word	0x0800e85d
	case CI_MRU:
	    if (!ao->neg_mru ||		/* Allow option? */
 800e36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	f003 0304 	and.w	r3, r3, #4
 800e374:	b2db      	uxtb	r3, r3
 800e376:	2b00      	cmp	r3, #0
 800e378:	d002      	beq.n	800e380 <lcp_reqci+0x14c>
 800e37a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e37c:	2b04      	cmp	r3, #4
 800e37e:	d002      	beq.n	800e386 <lcp_reqci+0x152>
		cilen != CILEN_SHORT) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800e380:	2304      	movs	r3, #4
 800e382:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800e384:	e29e      	b.n	800e8c4 <lcp_reqci+0x690>
	    }
	    GETSHORT(cishort, p);	/* Parse MRU */
 800e386:	6a3b      	ldr	r3, [r7, #32]
 800e388:	1c5a      	adds	r2, r3, #1
 800e38a:	623a      	str	r2, [r7, #32]
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	b29b      	uxth	r3, r3
 800e390:	021b      	lsls	r3, r3, #8
 800e392:	837b      	strh	r3, [r7, #26]
 800e394:	6a3b      	ldr	r3, [r7, #32]
 800e396:	1c5a      	adds	r2, r3, #1
 800e398:	623a      	str	r2, [r7, #32]
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	b29a      	uxth	r2, r3
 800e39e:	8b7b      	ldrh	r3, [r7, #26]
 800e3a0:	4313      	orrs	r3, r2
 800e3a2:	837b      	strh	r3, [r7, #26]
	    /*
	     * He must be able to receive at least our minimum.
	     * No need to check a maximum.  If he sends a large number,
	     * we'll just ignore it.
	     */
	    if (cishort < PPP_MINMRU) {
 800e3a4:	8b7b      	ldrh	r3, [r7, #26]
 800e3a6:	2b7f      	cmp	r3, #127	; 0x7f
 800e3a8:	d816      	bhi.n	800e3d8 <lcp_reqci+0x1a4>
		orc = CONFNAK;		/* Nak CI */
 800e3aa:	2303      	movs	r3, #3
 800e3ac:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_MRU, nakoutp);
 800e3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3b0:	1c5a      	adds	r2, r3, #1
 800e3b2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_SHORT, nakoutp);
 800e3b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ba:	1c5a      	adds	r2, r3, #1
 800e3bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e3be:	2204      	movs	r2, #4
 800e3c0:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_MINMRU, nakoutp);	/* Give him a hint */
 800e3c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3c4:	1c5a      	adds	r2, r3, #1
 800e3c6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	701a      	strb	r2, [r3, #0]
 800e3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ce:	1c5a      	adds	r2, r3, #1
 800e3d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e3d2:	2280      	movs	r2, #128	; 0x80
 800e3d4:	701a      	strb	r2, [r3, #0]
		break;
 800e3d6:	e275      	b.n	800e8c4 <lcp_reqci+0x690>
	    }
	    ho->neg_mru = 1;		/* Remember he sent MRU */
 800e3d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3da:	7813      	ldrb	r3, [r2, #0]
 800e3dc:	f043 0304 	orr.w	r3, r3, #4
 800e3e0:	7013      	strb	r3, [r2, #0]
	    ho->mru = cishort;		/* And remember value */
 800e3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e4:	8b7a      	ldrh	r2, [r7, #26]
 800e3e6:	805a      	strh	r2, [r3, #2]
	    break;
 800e3e8:	e26c      	b.n	800e8c4 <lcp_reqci+0x690>

	case CI_ASYNCMAP:
	    if (!ao->neg_asyncmap ||
 800e3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	f003 0308 	and.w	r3, r3, #8
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d002      	beq.n	800e3fe <lcp_reqci+0x1ca>
 800e3f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3fa:	2b06      	cmp	r3, #6
 800e3fc:	d002      	beq.n	800e404 <lcp_reqci+0x1d0>
		cilen != CILEN_LONG) {
		orc = CONFREJ;
 800e3fe:	2304      	movs	r3, #4
 800e400:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800e402:	e25f      	b.n	800e8c4 <lcp_reqci+0x690>
	    }
	    GETLONG(cilong, p);
 800e404:	6a3b      	ldr	r3, [r7, #32]
 800e406:	1c5a      	adds	r2, r3, #1
 800e408:	623a      	str	r2, [r7, #32]
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	021b      	lsls	r3, r3, #8
 800e40e:	617b      	str	r3, [r7, #20]
 800e410:	6a3b      	ldr	r3, [r7, #32]
 800e412:	1c5a      	adds	r2, r3, #1
 800e414:	623a      	str	r2, [r7, #32]
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	461a      	mov	r2, r3
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	4313      	orrs	r3, r2
 800e41e:	617b      	str	r3, [r7, #20]
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	021b      	lsls	r3, r3, #8
 800e424:	617b      	str	r3, [r7, #20]
 800e426:	6a3b      	ldr	r3, [r7, #32]
 800e428:	1c5a      	adds	r2, r3, #1
 800e42a:	623a      	str	r2, [r7, #32]
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	461a      	mov	r2, r3
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	4313      	orrs	r3, r2
 800e434:	617b      	str	r3, [r7, #20]
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	021b      	lsls	r3, r3, #8
 800e43a:	617b      	str	r3, [r7, #20]
 800e43c:	6a3b      	ldr	r3, [r7, #32]
 800e43e:	1c5a      	adds	r2, r3, #1
 800e440:	623a      	str	r2, [r7, #32]
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	461a      	mov	r2, r3
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	4313      	orrs	r3, r2
 800e44a:	617b      	str	r3, [r7, #20]

	    /*
	     * Asyncmap must have set at least the bits
	     * which are set in lcp_allowoptions[unit].asyncmap.
	     */
	    if ((ao->asyncmap & ~cilong) != 0) {
 800e44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e44e:	689a      	ldr	r2, [r3, #8]
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	43db      	mvns	r3, r3
 800e454:	4013      	ands	r3, r2
 800e456:	2b00      	cmp	r3, #0
 800e458:	d035      	beq.n	800e4c6 <lcp_reqci+0x292>
		orc = CONFNAK;
 800e45a:	2303      	movs	r3, #3
 800e45c:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_ASYNCMAP, nakoutp);
 800e45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e460:	1c5a      	adds	r2, r3, #1
 800e462:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e464:	2202      	movs	r2, #2
 800e466:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 800e468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e46a:	1c5a      	adds	r2, r3, #1
 800e46c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e46e:	2206      	movs	r2, #6
 800e470:	701a      	strb	r2, [r3, #0]
		PUTLONG(ao->asyncmap | cilong, nakoutp);
 800e472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e474:	1c5a      	adds	r2, r3, #1
 800e476:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e47a:	6891      	ldr	r1, [r2, #8]
 800e47c:	697a      	ldr	r2, [r7, #20]
 800e47e:	430a      	orrs	r2, r1
 800e480:	0e12      	lsrs	r2, r2, #24
 800e482:	b2d2      	uxtb	r2, r2
 800e484:	701a      	strb	r2, [r3, #0]
 800e486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e488:	1c5a      	adds	r2, r3, #1
 800e48a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e48c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e48e:	6891      	ldr	r1, [r2, #8]
 800e490:	697a      	ldr	r2, [r7, #20]
 800e492:	430a      	orrs	r2, r1
 800e494:	0c12      	lsrs	r2, r2, #16
 800e496:	b2d2      	uxtb	r2, r2
 800e498:	701a      	strb	r2, [r3, #0]
 800e49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e49c:	1c5a      	adds	r2, r3, #1
 800e49e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e4a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4a2:	6891      	ldr	r1, [r2, #8]
 800e4a4:	697a      	ldr	r2, [r7, #20]
 800e4a6:	430a      	orrs	r2, r1
 800e4a8:	0a12      	lsrs	r2, r2, #8
 800e4aa:	b2d2      	uxtb	r2, r2
 800e4ac:	701a      	strb	r2, [r3, #0]
 800e4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4b0:	1c5a      	adds	r2, r3, #1
 800e4b2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e4b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4b6:	6892      	ldr	r2, [r2, #8]
 800e4b8:	b2d1      	uxtb	r1, r2
 800e4ba:	697a      	ldr	r2, [r7, #20]
 800e4bc:	b2d2      	uxtb	r2, r2
 800e4be:	430a      	orrs	r2, r1
 800e4c0:	b2d2      	uxtb	r2, r2
 800e4c2:	701a      	strb	r2, [r3, #0]
		break;
 800e4c4:	e1fe      	b.n	800e8c4 <lcp_reqci+0x690>
	    }
	    ho->neg_asyncmap = 1;
 800e4c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4c8:	7813      	ldrb	r3, [r2, #0]
 800e4ca:	f043 0308 	orr.w	r3, r3, #8
 800e4ce:	7013      	strb	r3, [r2, #0]
	    ho->asyncmap = cilong;
 800e4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d2:	697a      	ldr	r2, [r7, #20]
 800e4d4:	609a      	str	r2, [r3, #8]
	    break;
 800e4d6:	e1f5      	b.n	800e8c4 <lcp_reqci+0x690>

	case CI_AUTHTYPE:
	    if (cilen < CILEN_SHORT ||
 800e4d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4da:	2b03      	cmp	r3, #3
 800e4dc:	dd0d      	ble.n	800e4fa <lcp_reqci+0x2c6>
		!(0
#if PAP_SUPPORT
		|| ao->neg_upap
 800e4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	f003 0310 	and.w	r3, r3, #16
 800e4e6:	b2db      	uxtb	r3, r3
	    if (cilen < CILEN_SHORT ||
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d109      	bne.n	800e500 <lcp_reqci+0x2cc>
#endif /* PAP_SUPPORT */
#if CHAP_SUPPORT
		|| ao->neg_chap
 800e4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	f003 0320 	and.w	r3, r3, #32
 800e4f4:	b2db      	uxtb	r3, r3
		!(0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d102      	bne.n	800e500 <lcp_reqci+0x2cc>
		)) {
		/*
		 * Reject the option if we're not willing to authenticate.
		 */
		ppp_dbglog(("No auth is possible"));
		orc = CONFREJ;
 800e4fa:	2304      	movs	r3, #4
 800e4fc:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800e4fe:	e1e1      	b.n	800e8c4 <lcp_reqci+0x690>
	    }
	    GETSHORT(cishort, p);
 800e500:	6a3b      	ldr	r3, [r7, #32]
 800e502:	1c5a      	adds	r2, r3, #1
 800e504:	623a      	str	r2, [r7, #32]
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	b29b      	uxth	r3, r3
 800e50a:	021b      	lsls	r3, r3, #8
 800e50c:	837b      	strh	r3, [r7, #26]
 800e50e:	6a3b      	ldr	r3, [r7, #32]
 800e510:	1c5a      	adds	r2, r3, #1
 800e512:	623a      	str	r2, [r7, #32]
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	b29a      	uxth	r2, r3
 800e518:	8b7b      	ldrh	r3, [r7, #26]
 800e51a:	4313      	orrs	r3, r2
 800e51c:	837b      	strh	r3, [r7, #26]
	     * Whether we end up doing CHAP, UPAP, or EAP depends then on
	     * the ordering of the CIs in the peer's Configure-Request.
             */

#if PAP_SUPPORT
	    if (cishort == PPP_PAP) {
 800e51e:	8b7b      	ldrh	r3, [r7, #26]
 800e520:	f24c 0223 	movw	r2, #49187	; 0xc023
 800e524:	4293      	cmp	r3, r2
 800e526:	d13d      	bne.n	800e5a4 <lcp_reqci+0x370>
		/* we've already accepted CHAP or EAP */
		if (0
#if CHAP_SUPPORT
		    || ho->neg_chap
 800e528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	f003 0320 	and.w	r3, r3, #32
 800e530:	b2db      	uxtb	r3, r3
		if (0
 800e532:	2b00      	cmp	r3, #0
 800e534:	d102      	bne.n	800e53c <lcp_reqci+0x308>
#endif /* CHAP_SUPPORT */
#if EAP_SUPPORT
		    || ho->neg_eap
#endif /* EAP_SUPPORT */
		    || cilen != CILEN_SHORT) {
 800e536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e538:	2b04      	cmp	r3, #4
 800e53a:	d002      	beq.n	800e542 <lcp_reqci+0x30e>
		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE PAP, rejecting..."));
		    orc = CONFREJ;
 800e53c:	2304      	movs	r3, #4
 800e53e:	647b      	str	r3, [r7, #68]	; 0x44
		    break;
 800e540:	e1c0      	b.n	800e8c4 <lcp_reqci+0x690>
		}
		if (!ao->neg_upap) {	/* we don't want to do PAP */
 800e542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	f003 0310 	and.w	r3, r3, #16
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d123      	bne.n	800e598 <lcp_reqci+0x364>
		    orc = CONFNAK;	/* NAK it and suggest CHAP or EAP */
 800e550:	2303      	movs	r3, #3
 800e552:	647b      	str	r3, [r7, #68]	; 0x44
		    PUTCHAR(CI_AUTHTYPE, nakoutp);
 800e554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e556:	1c5a      	adds	r2, r3, #1
 800e558:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e55a:	2203      	movs	r2, #3
 800e55c:	701a      	strb	r2, [r3, #0]
			PUTCHAR(CILEN_SHORT, nakoutp);
			PUTSHORT(PPP_EAP, nakoutp);
		    } else {
#endif /* EAP_SUPPORT */
#if CHAP_SUPPORT
			PUTCHAR(CILEN_CHAP, nakoutp);
 800e55e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e560:	1c5a      	adds	r2, r3, #1
 800e562:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e564:	2205      	movs	r2, #5
 800e566:	701a      	strb	r2, [r3, #0]
			PUTSHORT(PPP_CHAP, nakoutp);
 800e568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e56a:	1c5a      	adds	r2, r3, #1
 800e56c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e56e:	22c2      	movs	r2, #194	; 0xc2
 800e570:	701a      	strb	r2, [r3, #0]
 800e572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e574:	1c5a      	adds	r2, r3, #1
 800e576:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e578:	2223      	movs	r2, #35	; 0x23
 800e57a:	701a      	strb	r2, [r3, #0]
			PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
 800e57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e57e:	1c5a      	adds	r2, r3, #1
 800e580:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e584:	7912      	ldrb	r2, [r2, #4]
 800e586:	f002 0204 	and.w	r2, r2, #4
 800e58a:	2a00      	cmp	r2, #0
 800e58c:	d001      	beq.n	800e592 <lcp_reqci+0x35e>
 800e58e:	2205      	movs	r2, #5
 800e590:	e000      	b.n	800e594 <lcp_reqci+0x360>
 800e592:	2200      	movs	r2, #0
 800e594:	701a      	strb	r2, [r3, #0]
#endif /* CHAP_SUPPORT */
#if EAP_SUPPORT
		    }
#endif /* EAP_SUPPORT */
		    break;
 800e596:	e195      	b.n	800e8c4 <lcp_reqci+0x690>
		}
		ho->neg_upap = 1;
 800e598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e59a:	7813      	ldrb	r3, [r2, #0]
 800e59c:	f043 0310 	orr.w	r3, r3, #16
 800e5a0:	7013      	strb	r3, [r2, #0]
		break;
 800e5a2:	e18f      	b.n	800e8c4 <lcp_reqci+0x690>
	    }
#endif /* PAP_SUPPORT */
#if CHAP_SUPPORT
	    if (cishort == PPP_CHAP) {
 800e5a4:	8b7b      	ldrh	r3, [r7, #26]
 800e5a6:	f24c 2223 	movw	r2, #49699	; 0xc223
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d16a      	bne.n	800e684 <lcp_reqci+0x450>
		/* we've already accepted PAP or EAP */
		if (
#if PAP_SUPPORT
		    ho->neg_upap ||
 800e5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	f003 0310 	and.w	r3, r3, #16
 800e5b6:	b2db      	uxtb	r3, r3
		if (
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d102      	bne.n	800e5c2 <lcp_reqci+0x38e>
		    ho->neg_upap ||
 800e5bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5be:	2b05      	cmp	r3, #5
 800e5c0:	d002      	beq.n	800e5c8 <lcp_reqci+0x394>
#if EAP_SUPPORT
		    ho->neg_eap ||
#endif /* EAP_SUPPORT */
		    cilen != CILEN_CHAP) {
		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE CHAP, rejecting..."));
		    orc = CONFREJ;
 800e5c2:	2304      	movs	r3, #4
 800e5c4:	647b      	str	r3, [r7, #68]	; 0x44
		    break;
 800e5c6:	e17d      	b.n	800e8c4 <lcp_reqci+0x690>
		}
		if (!ao->neg_chap) {	/* we don't want to do CHAP */
 800e5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	f003 0320 	and.w	r3, r3, #32
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d116      	bne.n	800e604 <lcp_reqci+0x3d0>
		    orc = CONFNAK;	/* NAK it and suggest EAP or PAP */
 800e5d6:	2303      	movs	r3, #3
 800e5d8:	647b      	str	r3, [r7, #68]	; 0x44
		    PUTCHAR(CI_AUTHTYPE, nakoutp);
 800e5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5dc:	1c5a      	adds	r2, r3, #1
 800e5de:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e5e0:	2203      	movs	r2, #3
 800e5e2:	701a      	strb	r2, [r3, #0]
		    PUTCHAR(CILEN_SHORT, nakoutp);
 800e5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e6:	1c5a      	adds	r2, r3, #1
 800e5e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e5ea:	2204      	movs	r2, #4
 800e5ec:	701a      	strb	r2, [r3, #0]
			PUTSHORT(PPP_EAP, nakoutp);
		    } else
#endif /* EAP_SUPPORT */
#if PAP_SUPPORT
		    if(1) {
			PUTSHORT(PPP_PAP, nakoutp);
 800e5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5f0:	1c5a      	adds	r2, r3, #1
 800e5f2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e5f4:	22c0      	movs	r2, #192	; 0xc0
 800e5f6:	701a      	strb	r2, [r3, #0]
 800e5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5fa:	1c5a      	adds	r2, r3, #1
 800e5fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e5fe:	2223      	movs	r2, #35	; 0x23
 800e600:	701a      	strb	r2, [r3, #0]
		    }
		    else
#endif /* PAP_SUPPORT */
		    {}
		    break;
 800e602:	e15f      	b.n	800e8c4 <lcp_reqci+0x690>
		}
		GETCHAR(cichar, p);	/* get digest type */
 800e604:	6a3b      	ldr	r3, [r7, #32]
 800e606:	1c5a      	adds	r2, r3, #1
 800e608:	623a      	str	r2, [r7, #32]
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	613b      	str	r3, [r7, #16]
		if (!(CHAP_CANDIGEST(ao->chap_mdtype, cichar))) {
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	2b05      	cmp	r3, #5
 800e612:	d105      	bne.n	800e620 <lcp_reqci+0x3ec>
 800e614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e616:	791b      	ldrb	r3, [r3, #4]
 800e618:	f003 0304 	and.w	r3, r3, #4
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d123      	bne.n	800e668 <lcp_reqci+0x434>
		    /*
		     * We can't/won't do the requested type,
		     * suggest something else.
		     */
		    orc = CONFNAK;
 800e620:	2303      	movs	r3, #3
 800e622:	647b      	str	r3, [r7, #68]	; 0x44
		    PUTCHAR(CI_AUTHTYPE, nakoutp);
 800e624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e626:	1c5a      	adds	r2, r3, #1
 800e628:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e62a:	2203      	movs	r2, #3
 800e62c:	701a      	strb	r2, [r3, #0]
		    PUTCHAR(CILEN_CHAP, nakoutp);
 800e62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e630:	1c5a      	adds	r2, r3, #1
 800e632:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e634:	2205      	movs	r2, #5
 800e636:	701a      	strb	r2, [r3, #0]
		    PUTSHORT(PPP_CHAP, nakoutp);
 800e638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e63a:	1c5a      	adds	r2, r3, #1
 800e63c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e63e:	22c2      	movs	r2, #194	; 0xc2
 800e640:	701a      	strb	r2, [r3, #0]
 800e642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e644:	1c5a      	adds	r2, r3, #1
 800e646:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e648:	2223      	movs	r2, #35	; 0x23
 800e64a:	701a      	strb	r2, [r3, #0]
		    PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
 800e64c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e64e:	1c5a      	adds	r2, r3, #1
 800e650:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e654:	7912      	ldrb	r2, [r2, #4]
 800e656:	f002 0204 	and.w	r2, r2, #4
 800e65a:	2a00      	cmp	r2, #0
 800e65c:	d001      	beq.n	800e662 <lcp_reqci+0x42e>
 800e65e:	2205      	movs	r2, #5
 800e660:	e000      	b.n	800e664 <lcp_reqci+0x430>
 800e662:	2200      	movs	r2, #0
 800e664:	701a      	strb	r2, [r3, #0]
		    break;
 800e666:	e12d      	b.n	800e8c4 <lcp_reqci+0x690>
		}
		ho->chap_mdtype = CHAP_MDTYPE_D(cichar); /* save md type */
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	2b05      	cmp	r3, #5
 800e66c:	d101      	bne.n	800e672 <lcp_reqci+0x43e>
 800e66e:	2204      	movs	r2, #4
 800e670:	e000      	b.n	800e674 <lcp_reqci+0x440>
 800e672:	2200      	movs	r2, #0
 800e674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e676:	711a      	strb	r2, [r3, #4]
		ho->neg_chap = 1;
 800e678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e67a:	7813      	ldrb	r3, [r2, #0]
 800e67c:	f043 0320 	orr.w	r3, r3, #32
 800e680:	7013      	strb	r3, [r2, #0]
		break;
 800e682:	e11f      	b.n	800e8c4 <lcp_reqci+0x690>
	     * We don't recognize the protocol they're asking for.
	     * Nak it with something we're willing to do.
	     * (At this point we know ao->neg_upap || ao->neg_chap ||
	     * ao->neg_eap.)
	     */
	    orc = CONFNAK;
 800e684:	2303      	movs	r3, #3
 800e686:	647b      	str	r3, [r7, #68]	; 0x44
	    PUTCHAR(CI_AUTHTYPE, nakoutp);
 800e688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e68a:	1c5a      	adds	r2, r3, #1
 800e68c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e68e:	2203      	movs	r2, #3
 800e690:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_SHORT, nakoutp);
		PUTSHORT(PPP_EAP, nakoutp);
	    } else
#endif /* EAP_SUPPORT */
#if CHAP_SUPPORT
	    if (ao->neg_chap) {
 800e692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	f003 0320 	and.w	r3, r3, #32
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d01c      	beq.n	800e6da <lcp_reqci+0x4a6>
		PUTCHAR(CILEN_CHAP, nakoutp);
 800e6a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6a2:	1c5a      	adds	r2, r3, #1
 800e6a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e6a6:	2205      	movs	r2, #5
 800e6a8:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_CHAP, nakoutp);
 800e6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6ac:	1c5a      	adds	r2, r3, #1
 800e6ae:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e6b0:	22c2      	movs	r2, #194	; 0xc2
 800e6b2:	701a      	strb	r2, [r3, #0]
 800e6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6b6:	1c5a      	adds	r2, r3, #1
 800e6b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e6ba:	2223      	movs	r2, #35	; 0x23
 800e6bc:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
 800e6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6c0:	1c5a      	adds	r2, r3, #1
 800e6c2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e6c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6c6:	7912      	ldrb	r2, [r2, #4]
 800e6c8:	f002 0204 	and.w	r2, r2, #4
 800e6cc:	2a00      	cmp	r2, #0
 800e6ce:	d001      	beq.n	800e6d4 <lcp_reqci+0x4a0>
 800e6d0:	2205      	movs	r2, #5
 800e6d2:	e000      	b.n	800e6d6 <lcp_reqci+0x4a2>
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_SHORT, nakoutp);
		PUTSHORT(PPP_PAP, nakoutp);
	    } else
#endif /* PAP_SUPPORT */
	    {}
	    break;
 800e6d8:	e0f4      	b.n	800e8c4 <lcp_reqci+0x690>
		PUTCHAR(CILEN_SHORT, nakoutp);
 800e6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6dc:	1c5a      	adds	r2, r3, #1
 800e6de:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e6e0:	2204      	movs	r2, #4
 800e6e2:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_PAP, nakoutp);
 800e6e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6e6:	1c5a      	adds	r2, r3, #1
 800e6e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e6ea:	22c0      	movs	r2, #192	; 0xc0
 800e6ec:	701a      	strb	r2, [r3, #0]
 800e6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6f0:	1c5a      	adds	r2, r3, #1
 800e6f2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e6f4:	2223      	movs	r2, #35	; 0x23
 800e6f6:	701a      	strb	r2, [r3, #0]
	    break;
 800e6f8:	e0e4      	b.n	800e8c4 <lcp_reqci+0x690>
	    }
	    break;
#endif /* LQR_SUPPORT */

	case CI_MAGICNUMBER:
	    if (!(ao->neg_magicnumber || go->neg_magicnumber) ||
 800e6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e702:	b2db      	uxtb	r3, r3
 800e704:	2b00      	cmp	r3, #0
 800e706:	d106      	bne.n	800e716 <lcp_reqci+0x4e2>
 800e708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e710:	b2db      	uxtb	r3, r3
 800e712:	2b00      	cmp	r3, #0
 800e714:	d002      	beq.n	800e71c <lcp_reqci+0x4e8>
 800e716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e718:	2b06      	cmp	r3, #6
 800e71a:	d002      	beq.n	800e722 <lcp_reqci+0x4ee>
		cilen != CILEN_LONG) {
		orc = CONFREJ;
 800e71c:	2304      	movs	r3, #4
 800e71e:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800e720:	e0d0      	b.n	800e8c4 <lcp_reqci+0x690>
	    }
	    GETLONG(cilong, p);
 800e722:	6a3b      	ldr	r3, [r7, #32]
 800e724:	1c5a      	adds	r2, r3, #1
 800e726:	623a      	str	r2, [r7, #32]
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	021b      	lsls	r3, r3, #8
 800e72c:	617b      	str	r3, [r7, #20]
 800e72e:	6a3b      	ldr	r3, [r7, #32]
 800e730:	1c5a      	adds	r2, r3, #1
 800e732:	623a      	str	r2, [r7, #32]
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	461a      	mov	r2, r3
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	4313      	orrs	r3, r2
 800e73c:	617b      	str	r3, [r7, #20]
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	021b      	lsls	r3, r3, #8
 800e742:	617b      	str	r3, [r7, #20]
 800e744:	6a3b      	ldr	r3, [r7, #32]
 800e746:	1c5a      	adds	r2, r3, #1
 800e748:	623a      	str	r2, [r7, #32]
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	461a      	mov	r2, r3
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	4313      	orrs	r3, r2
 800e752:	617b      	str	r3, [r7, #20]
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	021b      	lsls	r3, r3, #8
 800e758:	617b      	str	r3, [r7, #20]
 800e75a:	6a3b      	ldr	r3, [r7, #32]
 800e75c:	1c5a      	adds	r2, r3, #1
 800e75e:	623a      	str	r2, [r7, #32]
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	461a      	mov	r2, r3
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	4313      	orrs	r3, r2
 800e768:	617b      	str	r3, [r7, #20]

	    /*
	     * He must have a different magic number.
	     */
	    if (go->neg_magicnumber &&
 800e76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e772:	b2db      	uxtb	r3, r3
 800e774:	2b00      	cmp	r3, #0
 800e776:	d02f      	beq.n	800e7d8 <lcp_reqci+0x5a4>
		cilong == go->magicnumber) {
 800e778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e77a:	68da      	ldr	r2, [r3, #12]
	    if (go->neg_magicnumber &&
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	429a      	cmp	r2, r3
 800e780:	d12a      	bne.n	800e7d8 <lcp_reqci+0x5a4>
		cilong = magic();	/* Don't put magic() inside macro! */
 800e782:	f000 fbfb 	bl	800ef7c <magic>
 800e786:	6178      	str	r0, [r7, #20]
		orc = CONFNAK;
 800e788:	2303      	movs	r3, #3
 800e78a:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_MAGICNUMBER, nakoutp);
 800e78c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e78e:	1c5a      	adds	r2, r3, #1
 800e790:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e792:	2205      	movs	r2, #5
 800e794:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 800e796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e798:	1c5a      	adds	r2, r3, #1
 800e79a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e79c:	2206      	movs	r2, #6
 800e79e:	701a      	strb	r2, [r3, #0]
		PUTLONG(cilong, nakoutp);
 800e7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7a2:	1c5a      	adds	r2, r3, #1
 800e7a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e7a6:	697a      	ldr	r2, [r7, #20]
 800e7a8:	0e12      	lsrs	r2, r2, #24
 800e7aa:	b2d2      	uxtb	r2, r2
 800e7ac:	701a      	strb	r2, [r3, #0]
 800e7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7b0:	1c5a      	adds	r2, r3, #1
 800e7b2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e7b4:	697a      	ldr	r2, [r7, #20]
 800e7b6:	0c12      	lsrs	r2, r2, #16
 800e7b8:	b2d2      	uxtb	r2, r2
 800e7ba:	701a      	strb	r2, [r3, #0]
 800e7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7be:	1c5a      	adds	r2, r3, #1
 800e7c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e7c2:	697a      	ldr	r2, [r7, #20]
 800e7c4:	0a12      	lsrs	r2, r2, #8
 800e7c6:	b2d2      	uxtb	r2, r2
 800e7c8:	701a      	strb	r2, [r3, #0]
 800e7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7cc:	1c5a      	adds	r2, r3, #1
 800e7ce:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e7d0:	697a      	ldr	r2, [r7, #20]
 800e7d2:	b2d2      	uxtb	r2, r2
 800e7d4:	701a      	strb	r2, [r3, #0]
		break;
 800e7d6:	e075      	b.n	800e8c4 <lcp_reqci+0x690>
	    }
	    ho->neg_magicnumber = 1;
 800e7d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7da:	7813      	ldrb	r3, [r2, #0]
 800e7dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7e0:	7013      	strb	r3, [r2, #0]
	    ho->magicnumber = cilong;
 800e7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e4:	697a      	ldr	r2, [r7, #20]
 800e7e6:	60da      	str	r2, [r3, #12]
	    break;
 800e7e8:	e06c      	b.n	800e8c4 <lcp_reqci+0x690>


	case CI_PCOMPRESSION:
	    if (!ao->neg_pcompression ||
 800e7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e7f2:	b2db      	uxtb	r3, r3
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d002      	beq.n	800e7fe <lcp_reqci+0x5ca>
 800e7f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7fa:	2b02      	cmp	r3, #2
 800e7fc:	d002      	beq.n	800e804 <lcp_reqci+0x5d0>
		cilen != CILEN_VOID) {
		orc = CONFREJ;
 800e7fe:	2304      	movs	r3, #4
 800e800:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800e802:	e05f      	b.n	800e8c4 <lcp_reqci+0x690>
	    }
	    ho->neg_pcompression = 1;
 800e804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e806:	7813      	ldrb	r3, [r2, #0]
 800e808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e80c:	7013      	strb	r3, [r2, #0]
	    break;
 800e80e:	e059      	b.n	800e8c4 <lcp_reqci+0x690>

	case CI_ACCOMPRESSION:
	    if (!ao->neg_accompression ||
 800e810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e812:	785b      	ldrb	r3, [r3, #1]
 800e814:	f003 0301 	and.w	r3, r3, #1
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d002      	beq.n	800e824 <lcp_reqci+0x5f0>
 800e81e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e820:	2b02      	cmp	r3, #2
 800e822:	d002      	beq.n	800e82a <lcp_reqci+0x5f6>
		cilen != CILEN_VOID) {
		orc = CONFREJ;
 800e824:	2304      	movs	r3, #4
 800e826:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800e828:	e04c      	b.n	800e8c4 <lcp_reqci+0x690>
	    }
	    ho->neg_accompression = 1;
 800e82a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e82c:	7853      	ldrb	r3, [r2, #1]
 800e82e:	f043 0301 	orr.w	r3, r3, #1
 800e832:	7053      	strb	r3, [r2, #1]
	    break;
 800e834:	e046      	b.n	800e8c4 <lcp_reqci+0x690>
	    ho->mrru = cishort;
	    break;
#endif /* HAVE_MULTILINK */

	case CI_SSNHF:
	    if (!ao->neg_ssnhf
 800e836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e838:	785b      	ldrb	r3, [r3, #1]
 800e83a:	f003 0304 	and.w	r3, r3, #4
 800e83e:	b2db      	uxtb	r3, r3
 800e840:	2b00      	cmp	r3, #0
 800e842:	d002      	beq.n	800e84a <lcp_reqci+0x616>
#ifdef HAVE_MULTILINK
		|| !multilink
#endif /* HAVE_MULTILINK */
		|| cilen != CILEN_VOID) {
 800e844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e846:	2b02      	cmp	r3, #2
 800e848:	d002      	beq.n	800e850 <lcp_reqci+0x61c>
		orc = CONFREJ;
 800e84a:	2304      	movs	r3, #4
 800e84c:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800e84e:	e039      	b.n	800e8c4 <lcp_reqci+0x690>
	    }
	    ho->neg_ssnhf = 1;
 800e850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e852:	7853      	ldrb	r3, [r2, #1]
 800e854:	f043 0304 	orr.w	r3, r3, #4
 800e858:	7053      	strb	r3, [r2, #1]
	    break;
 800e85a:	e033      	b.n	800e8c4 <lcp_reqci+0x690>

	case CI_EPDISC:
	    if (!ao->neg_endpoint ||
 800e85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85e:	785b      	ldrb	r3, [r3, #1]
 800e860:	f003 0308 	and.w	r3, r3, #8
 800e864:	b2db      	uxtb	r3, r3
 800e866:	2b00      	cmp	r3, #0
 800e868:	d005      	beq.n	800e876 <lcp_reqci+0x642>
 800e86a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e86c:	2b02      	cmp	r3, #2
 800e86e:	dd02      	ble.n	800e876 <lcp_reqci+0x642>
		cilen < CILEN_CHAR ||
 800e870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e872:	2b17      	cmp	r3, #23
 800e874:	dd02      	ble.n	800e87c <lcp_reqci+0x648>
		cilen > CILEN_CHAR + MAX_ENDP_LEN) {
		orc = CONFREJ;
 800e876:	2304      	movs	r3, #4
 800e878:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800e87a:	e023      	b.n	800e8c4 <lcp_reqci+0x690>
	    }
	    GETCHAR(cichar, p);
 800e87c:	6a3b      	ldr	r3, [r7, #32]
 800e87e:	1c5a      	adds	r2, r3, #1
 800e880:	623a      	str	r2, [r7, #32]
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	613b      	str	r3, [r7, #16]
	    cilen -= CILEN_CHAR;
 800e886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e888:	3b03      	subs	r3, #3
 800e88a:	653b      	str	r3, [r7, #80]	; 0x50
	    ho->neg_endpoint = 1;
 800e88c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e88e:	7853      	ldrb	r3, [r2, #1]
 800e890:	f043 0308 	orr.w	r3, r3, #8
 800e894:	7053      	strb	r3, [r2, #1]
	    ho->endpoint.class_ = cichar;
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	b2da      	uxtb	r2, r3
 800e89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89c:	745a      	strb	r2, [r3, #17]
	    ho->endpoint.length = cilen;
 800e89e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8a0:	b2da      	uxtb	r2, r3
 800e8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a4:	749a      	strb	r2, [r3, #18]
	    MEMCPY(ho->endpoint.value, p, cilen);
 800e8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a8:	3313      	adds	r3, #19
 800e8aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e8ac:	6a39      	ldr	r1, [r7, #32]
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f003 ff44 	bl	801273c <memcpy>
	    INCPTR(cilen, p);
 800e8b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8b6:	6a3a      	ldr	r2, [r7, #32]
 800e8b8:	4413      	add	r3, r2
 800e8ba:	623b      	str	r3, [r7, #32]
	    break;
 800e8bc:	e002      	b.n	800e8c4 <lcp_reqci+0x690>

	default:
	    LCPDEBUG(("lcp_reqci: rcvd unknown option %d", citype));
	    orc = CONFREJ;
 800e8be:	2304      	movs	r3, #4
 800e8c0:	647b      	str	r3, [r7, #68]	; 0x44
	    break;
 800e8c2:	bf00      	nop
	}

endswitch:
	if (orc == CONFACK &&		/* Good CI */
 800e8c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8c6:	2b02      	cmp	r3, #2
 800e8c8:	d103      	bne.n	800e8d2 <lcp_reqci+0x69e>
 800e8ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8cc:	2b02      	cmp	r3, #2
 800e8ce:	d000      	beq.n	800e8d2 <lcp_reqci+0x69e>
	    rc != CONFACK)		/*  but prior CI wasn't? */
	    continue;			/* Don't send this one */
 800e8d0:	e024      	b.n	800e91c <lcp_reqci+0x6e8>

	if (orc == CONFNAK) {		/* Nak this CI? */
 800e8d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8d4:	2b03      	cmp	r3, #3
 800e8d6:	d10e      	bne.n	800e8f6 <lcp_reqci+0x6c2>
	    if (reject_if_disagree	/* Getting fed up with sending NAKs? */
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d005      	beq.n	800e8ea <lcp_reqci+0x6b6>
		&& citype != CI_MAGICNUMBER) {
 800e8de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8e0:	2b05      	cmp	r3, #5
 800e8e2:	d002      	beq.n	800e8ea <lcp_reqci+0x6b6>
		orc = CONFREJ;		/* Get tough if so */
 800e8e4:	2304      	movs	r3, #4
 800e8e6:	647b      	str	r3, [r7, #68]	; 0x44
 800e8e8:	e005      	b.n	800e8f6 <lcp_reqci+0x6c2>
	    } else {
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 800e8ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8ec:	2b04      	cmp	r3, #4
 800e8ee:	d100      	bne.n	800e8f2 <lcp_reqci+0x6be>
		    continue;		/* Don't send this one */
 800e8f0:	e014      	b.n	800e91c <lcp_reqci+0x6e8>
		rc = CONFNAK;
 800e8f2:	2303      	movs	r3, #3
 800e8f4:	64bb      	str	r3, [r7, #72]	; 0x48
	    }
	}
	if (orc == CONFREJ) {		/* Reject this CI */
 800e8f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8f8:	2b04      	cmp	r3, #4
 800e8fa:	d10f      	bne.n	800e91c <lcp_reqci+0x6e8>
	    rc = CONFREJ;
 800e8fc:	2304      	movs	r3, #4
 800e8fe:	64bb      	str	r3, [r7, #72]	; 0x48
	    if (cip != rejp)		/* Need to move rejected CI? */
 800e900:	69fa      	ldr	r2, [r7, #28]
 800e902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e904:	429a      	cmp	r2, r3
 800e906:	d005      	beq.n	800e914 <lcp_reqci+0x6e0>
		MEMCPY(rejp, cip, cilen); /* Move it */
 800e908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e90a:	461a      	mov	r2, r3
 800e90c:	69f9      	ldr	r1, [r7, #28]
 800e90e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e910:	f003 ff14 	bl	801273c <memcpy>
	    INCPTR(cilen, rejp);	/* Update output pointer */
 800e914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e916:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e918:	4413      	add	r3, r2
 800e91a:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 800e91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e91e:	2b00      	cmp	r3, #0
 800e920:	f47f acc6 	bne.w	800e2b0 <lcp_reqci+0x7c>
     * code would go here.  The extra NAKs would go at *nakoutp.
     * At present there are no cases where we want to ask the
     * peer to negotiate an option.
     */

    switch (rc) {
 800e924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e926:	2b03      	cmp	r3, #3
 800e928:	d00a      	beq.n	800e940 <lcp_reqci+0x70c>
 800e92a:	2b04      	cmp	r3, #4
 800e92c:	d017      	beq.n	800e95e <lcp_reqci+0x72a>
 800e92e:	2b02      	cmp	r3, #2
 800e930:	d000      	beq.n	800e934 <lcp_reqci+0x700>
	break;
    case CONFREJ:
	*lenp = rejp - inp;
	break;
    default:
	break;
 800e932:	e01a      	b.n	800e96a <lcp_reqci+0x736>
	*lenp = next - inp;
 800e934:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	1ad2      	subs	r2, r2, r3
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	601a      	str	r2, [r3, #0]
	break;
 800e93e:	e014      	b.n	800e96a <lcp_reqci+0x736>
	*lenp = nakoutp - (u_char*)nakp->payload;
 800e940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e944:	6852      	ldr	r2, [r2, #4]
 800e946:	1a9a      	subs	r2, r3, r2
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	601a      	str	r2, [r3, #0]
	MEMCPY(inp, nakp->payload, *lenp);
 800e94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94e:	6859      	ldr	r1, [r3, #4]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	461a      	mov	r2, r3
 800e956:	68b8      	ldr	r0, [r7, #8]
 800e958:	f003 fef0 	bl	801273c <memcpy>
	break;
 800e95c:	e005      	b.n	800e96a <lcp_reqci+0x736>
	*lenp = rejp - inp;
 800e95e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	1ad2      	subs	r2, r2, r3
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	601a      	str	r2, [r3, #0]
	break;
 800e968:	bf00      	nop
    }

    pbuf_free(nakp);
 800e96a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e96c:	f7f4 ff7a 	bl	8003864 <pbuf_free>
    LCPDEBUG(("lcp_reqci: returning CONF%s.", CODENAME(rc)));
    return (rc);			/* Return final code */
 800e970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800e972:	4618      	mov	r0, r3
 800e974:	3758      	adds	r7, #88	; 0x58
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop

0800e97c <lcp_up>:


/*
 * lcp_up - LCP has come UP.
 */
static void lcp_up(fsm *f) {
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b08c      	sub	sp, #48	; 0x30
 800e980:	af02      	add	r7, sp, #8
 800e982:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	627b      	str	r3, [r7, #36]	; 0x24
    lcp_options *wo = &pcb->lcp_wantoptions;
 800e98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98c:	33ac      	adds	r3, #172	; 0xac
 800e98e:	623b      	str	r3, [r7, #32]
    lcp_options *ho = &pcb->lcp_hisoptions;
 800e990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e992:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800e996:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800e998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99a:	33d4      	adds	r3, #212	; 0xd4
 800e99c:	61bb      	str	r3, [r7, #24]
    lcp_options *ao = &pcb->lcp_allowoptions;
 800e99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a0:	33fc      	adds	r3, #252	; 0xfc
 800e9a2:	617b      	str	r3, [r7, #20]
    int mtu, mru;

    if (!go->neg_magicnumber)
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9ac:	b2db      	uxtb	r3, r3
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d102      	bne.n	800e9b8 <lcp_up+0x3c>
	go->magicnumber = 0;
 800e9b2:	69bb      	ldr	r3, [r7, #24]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	60da      	str	r2, [r3, #12]
    if (!ho->neg_magicnumber)
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9c0:	b2db      	uxtb	r3, r3
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d102      	bne.n	800e9cc <lcp_up+0x50>
	ho->magicnumber = 0;
 800e9c6:	69fb      	ldr	r3, [r7, #28]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	60da      	str	r2, [r3, #12]
     * the value we got in the negotiation.
     * Note on the MTU: the link MTU can be the MRU the peer wanted,
     * the interface MTU is set to the lowest of that, the
     * MTU we want to use, and our link MRU.
     */
    mtu = ho->neg_mru? ho->mru: PPP_DEFMRU;
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	f003 0304 	and.w	r3, r3, #4
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d002      	beq.n	800e9e0 <lcp_up+0x64>
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	885b      	ldrh	r3, [r3, #2]
 800e9de:	e001      	b.n	800e9e4 <lcp_up+0x68>
 800e9e0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e9e4:	613b      	str	r3, [r7, #16]
    mru = go->neg_mru? LWIP_MAX(wo->mru, go->mru): PPP_DEFMRU;
 800e9e6:	69bb      	ldr	r3, [r7, #24]
 800e9e8:	781b      	ldrb	r3, [r3, #0]
 800e9ea:	f003 0304 	and.w	r3, r3, #4
 800e9ee:	b2db      	uxtb	r3, r3
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d00b      	beq.n	800ea0c <lcp_up+0x90>
 800e9f4:	6a3b      	ldr	r3, [r7, #32]
 800e9f6:	885a      	ldrh	r2, [r3, #2]
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	885b      	ldrh	r3, [r3, #2]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d902      	bls.n	800ea06 <lcp_up+0x8a>
 800ea00:	6a3b      	ldr	r3, [r7, #32]
 800ea02:	885b      	ldrh	r3, [r3, #2]
 800ea04:	e004      	b.n	800ea10 <lcp_up+0x94>
 800ea06:	69bb      	ldr	r3, [r7, #24]
 800ea08:	885b      	ldrh	r3, [r3, #2]
 800ea0a:	e001      	b.n	800ea10 <lcp_up+0x94>
 800ea0c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800ea10:	60fb      	str	r3, [r7, #12]
#ifdef HAVE_MULTILINK
    if (!(multilink && go->neg_mrru && ho->neg_mrru))
#endif /* HAVE_MULTILINK */
	ppp_netif_set_mtu(pcb, LWIP_MIN(LWIP_MIN(mtu, mru), ao->mru));
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	885b      	ldrh	r3, [r3, #2]
 800ea16:	4619      	mov	r1, r3
 800ea18:	68fa      	ldr	r2, [r7, #12]
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	bfa8      	it	ge
 800ea20:	4613      	movge	r3, r2
 800ea22:	428b      	cmp	r3, r1
 800ea24:	bfa8      	it	ge
 800ea26:	460b      	movge	r3, r1
 800ea28:	4619      	mov	r1, r3
 800ea2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea2c:	f001 fdce 	bl	80105cc <ppp_netif_set_mtu>
    ppp_send_config(pcb, mtu,
		    (ho->neg_asyncmap? ho->asyncmap: 0xffffffff),
 800ea30:	69fb      	ldr	r3, [r7, #28]
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	f003 0308 	and.w	r3, r3, #8
 800ea38:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d002      	beq.n	800ea44 <lcp_up+0xc8>
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	689a      	ldr	r2, [r3, #8]
 800ea42:	e001      	b.n	800ea48 <lcp_up+0xcc>
 800ea44:	f04f 32ff 	mov.w	r2, #4294967295
		    ho->neg_pcompression, ho->neg_accompression);
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ea50:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 800ea52:	4619      	mov	r1, r3
		    ho->neg_pcompression, ho->neg_accompression);
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	785b      	ldrb	r3, [r3, #1]
 800ea58:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ea5c:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 800ea5e:	9300      	str	r3, [sp, #0]
 800ea60:	460b      	mov	r3, r1
 800ea62:	6939      	ldr	r1, [r7, #16]
 800ea64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea66:	f001 fd03 	bl	8010470 <ppp_send_config>
    ppp_recv_config(pcb, mru,
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 800ea6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6c:	781b      	ldrb	r3, [r3, #0]
 800ea6e:	f003 0310 	and.w	r3, r3, #16
 800ea72:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d10c      	bne.n	800ea92 <lcp_up+0x116>
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 800ea78:	69bb      	ldr	r3, [r7, #24]
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	f003 0308 	and.w	r3, r3, #8
 800ea80:	b2db      	uxtb	r3, r3
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d002      	beq.n	800ea8c <lcp_up+0x110>
 800ea86:	69bb      	ldr	r3, [r7, #24]
 800ea88:	689a      	ldr	r2, [r3, #8]
 800ea8a:	e003      	b.n	800ea94 <lcp_up+0x118>
 800ea8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea90:	e000      	b.n	800ea94 <lcp_up+0x118>
    ppp_recv_config(pcb, mru,
 800ea92:	2200      	movs	r2, #0
		    go->neg_pcompression, go->neg_accompression);
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ea9c:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 800ea9e:	4619      	mov	r1, r3
		    go->neg_pcompression, go->neg_accompression);
 800eaa0:	69bb      	ldr	r3, [r7, #24]
 800eaa2:	785b      	ldrb	r3, [r3, #1]
 800eaa4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800eaa8:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 800eaaa:	9300      	str	r3, [sp, #0]
 800eaac:	460b      	mov	r3, r1
 800eaae:	68f9      	ldr	r1, [r7, #12]
 800eab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eab2:	f001 fcf9 	bl	80104a8 <ppp_recv_config>

    if (ho->neg_mru)
 800eab6:	69fb      	ldr	r3, [r7, #28]
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	f003 0304 	and.w	r3, r3, #4
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d004      	beq.n	800eace <lcp_up+0x152>
	pcb->peer_mru = ho->mru;
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	885a      	ldrh	r2, [r3, #2]
 800eac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaca:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c

    lcp_echo_lowerup(f->pcb);  /* Enable echo messages */
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	4618      	mov	r0, r3
 800ead4:	f000 f979 	bl	800edca <lcp_echo_lowerup>

    link_established(pcb);
 800ead8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eada:	f7fb f83d 	bl	8009b58 <link_established>
}
 800eade:	bf00      	nop
 800eae0:	3728      	adds	r7, #40	; 0x28
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}

0800eae6 <lcp_down>:
/*
 * lcp_down - LCP has gone DOWN.
 *
 * Alert other protocols.
 */
static void lcp_down(fsm *f) {
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b086      	sub	sp, #24
 800eaea:	af02      	add	r7, sp, #8
 800eaec:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	60fb      	str	r3, [r7, #12]
    lcp_options *go = &pcb->lcp_gotoptions;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	33d4      	adds	r3, #212	; 0xd4
 800eaf8:	60bb      	str	r3, [r7, #8]

    lcp_echo_lowerdown(f->pcb);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	4618      	mov	r0, r3
 800eb00:	f000 f984 	bl	800ee0c <lcp_echo_lowerdown>

    link_down(pcb);
 800eb04:	68f8      	ldr	r0, [r7, #12]
 800eb06:	f7fa ffd5 	bl	8009ab4 <link_down>

    ppp_send_config(pcb, PPP_DEFMRU, 0xffffffff, 0, 0);
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	9300      	str	r3, [sp, #0]
 800eb0e:	2300      	movs	r3, #0
 800eb10:	f04f 32ff 	mov.w	r2, #4294967295
 800eb14:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800eb18:	68f8      	ldr	r0, [r7, #12]
 800eb1a:	f001 fca9 	bl	8010470 <ppp_send_config>
    ppp_recv_config(pcb, PPP_DEFMRU,
		    (go->neg_asyncmap? go->asyncmap: 0xffffffff),
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	f003 0308 	and.w	r3, r3, #8
 800eb26:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d002      	beq.n	800eb32 <lcp_down+0x4c>
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	689a      	ldr	r2, [r3, #8]
 800eb30:	e001      	b.n	800eb36 <lcp_down+0x50>
 800eb32:	f04f 32ff 	mov.w	r2, #4294967295
		    go->neg_pcompression, go->neg_accompression);
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800eb3e:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 800eb40:	4619      	mov	r1, r3
		    go->neg_pcompression, go->neg_accompression);
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	785b      	ldrb	r3, [r3, #1]
 800eb46:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800eb4a:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 800eb4c:	9300      	str	r3, [sp, #0]
 800eb4e:	460b      	mov	r3, r1
 800eb50:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800eb54:	68f8      	ldr	r0, [r7, #12]
 800eb56:	f001 fca7 	bl	80104a8 <ppp_recv_config>
    pcb->peer_mru = PPP_DEFMRU;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800eb60:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
}
 800eb64:	bf00      	nop
 800eb66:	3710      	adds	r7, #16
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}

0800eb6c <lcp_starting>:


/*
 * lcp_starting - LCP needs the lower layer up.
 */
static void lcp_starting(fsm *f) {
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b084      	sub	sp, #16
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	60fb      	str	r3, [r7, #12]
    link_required(pcb);
 800eb7a:	68f8      	ldr	r0, [r7, #12]
 800eb7c:	f7fa ff78 	bl	8009a70 <link_required>
}
 800eb80:	bf00      	nop
 800eb82:	3710      	adds	r7, #16
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <lcp_finished>:


/*
 * lcp_finished - LCP has finished with the lower layer.
 */
static void lcp_finished(fsm *f) {
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b084      	sub	sp, #16
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	60fb      	str	r3, [r7, #12]
    link_terminated(pcb);
 800eb96:	68f8      	ldr	r0, [r7, #12]
 800eb98:	f7fa ff74 	bl	8009a84 <link_terminated>
}
 800eb9c:	bf00      	nop
 800eb9e:	3710      	adds	r7, #16
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <LcpLinkFailure>:

/*
 * Time to shut down the link because there is nothing out there.
 */

static void LcpLinkFailure(fsm *f) {
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b084      	sub	sp, #16
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	60fb      	str	r3, [r7, #12]
    if (f->state == PPP_FSM_OPENED) {
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	7c1b      	ldrb	r3, [r3, #16]
 800ebb6:	2b09      	cmp	r3, #9
 800ebb8:	d107      	bne.n	800ebca <LcpLinkFailure+0x26>
	ppp_info(("No response to %d echo-requests", pcb->lcp_echos_pending));
        ppp_notice(("Serial link appears to be disconnected."));
	pcb->err_code = PPPERR_PEERDEAD;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2209      	movs	r2, #9
 800ebbe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	lcp_close(pcb, "Peer not responding");
 800ebc2:	4904      	ldr	r1, [pc, #16]	; (800ebd4 <LcpLinkFailure+0x30>)
 800ebc4:	68f8      	ldr	r0, [r7, #12]
 800ebc6:	f7fd fe1d 	bl	800c804 <lcp_close>
    }
}
 800ebca:	bf00      	nop
 800ebcc:	3710      	adds	r7, #16
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
 800ebd2:	bf00      	nop
 800ebd4:	080157ac 	.word	0x080157ac

0800ebd8 <LcpEchoCheck>:

/*
 * Timer expired for the LCP echo requests from this process.
 */

static void LcpEchoCheck(fsm *f) {
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	60fb      	str	r3, [r7, #12]

    LcpSendEchoRequest (f);
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 f88e 	bl	800ed08 <LcpSendEchoRequest>
    if (f->state != PPP_FSM_OPENED)
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	7c1b      	ldrb	r3, [r3, #16]
 800ebf0:	2b09      	cmp	r3, #9
 800ebf2:	d117      	bne.n	800ec24 <LcpEchoCheck+0x4c>
    /*
     * Start the timer for the next interval.
     */
    if (pcb->lcp_echo_timer_running)
	ppp_warn(("assertion lcp_echo_timer_running==0 failed"));
    TIMEOUT (LcpEchoTimeout, f, pcb->settings.lcp_echo_interval);
 800ebf4:	6879      	ldr	r1, [r7, #4]
 800ebf6:	480d      	ldr	r0, [pc, #52]	; (800ec2c <LcpEchoCheck+0x54>)
 800ebf8:	f7fa fe92 	bl	8009920 <sys_untimeout>
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	7cdb      	ldrb	r3, [r3, #19]
 800ec00:	461a      	mov	r2, r3
 800ec02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ec06:	fb03 f302 	mul.w	r3, r3, r2
 800ec0a:	687a      	ldr	r2, [r7, #4]
 800ec0c:	4907      	ldr	r1, [pc, #28]	; (800ec2c <LcpEchoCheck+0x54>)
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fa fe5a 	bl	80098c8 <sys_timeout>
    pcb->lcp_echo_timer_running = 1;
 800ec14:	68fa      	ldr	r2, [r7, #12]
 800ec16:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800ec1a:	f043 0310 	orr.w	r3, r3, #16
 800ec1e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 800ec22:	e000      	b.n	800ec26 <LcpEchoCheck+0x4e>
	return;
 800ec24:	bf00      	nop
}
 800ec26:	3710      	adds	r7, #16
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}
 800ec2c:	0800ec31 	.word	0x0800ec31

0800ec30 <LcpEchoTimeout>:

/*
 * LcpEchoTimeout - Timer expired on the LCP echo
 */

static void LcpEchoTimeout(void *arg) {
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b084      	sub	sp, #16
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm*)arg;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	60fb      	str	r3, [r7, #12]
    ppp_pcb *pcb = f->pcb;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	60bb      	str	r3, [r7, #8]
    if (pcb->lcp_echo_timer_running != 0) {
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ec48:	f003 0310 	and.w	r3, r3, #16
 800ec4c:	b2db      	uxtb	r3, r3
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d009      	beq.n	800ec66 <LcpEchoTimeout+0x36>
        pcb->lcp_echo_timer_running = 0;
 800ec52:	68ba      	ldr	r2, [r7, #8]
 800ec54:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800ec58:	f36f 1304 	bfc	r3, #4, #1
 800ec5c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
        LcpEchoCheck ((fsm *) arg);
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7ff ffb9 	bl	800ebd8 <LcpEchoCheck>
    }
}
 800ec66:	bf00      	nop
 800ec68:	3710      	adds	r7, #16
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}

0800ec6e <lcp_received_echo_reply>:

/*
 * LcpEchoReply - LCP has received a reply to the echo
 */

static void lcp_received_echo_reply(fsm *f, int id, u_char *inp, int len) {
 800ec6e:	b480      	push	{r7}
 800ec70:	b089      	sub	sp, #36	; 0x24
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	60f8      	str	r0, [r7, #12]
 800ec76:	60b9      	str	r1, [r7, #8]
 800ec78:	607a      	str	r2, [r7, #4]
 800ec7a:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800ec82:	69fb      	ldr	r3, [r7, #28]
 800ec84:	33d4      	adds	r3, #212	; 0xd4
 800ec86:	61bb      	str	r3, [r7, #24]
    u32_t magic_val;
    LWIP_UNUSED_ARG(id);

    /* Check the magic number - don't count replies from ourselves. */
    if (len < 4) {
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	2b03      	cmp	r3, #3
 800ec8c:	dd34      	ble.n	800ecf8 <lcp_received_echo_reply+0x8a>
	ppp_dbglog(("lcp: received short Echo-Reply, length %d", len));
	return;
    }
    GETLONG(magic_val, inp);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	1c5a      	adds	r2, r3, #1
 800ec92:	607a      	str	r2, [r7, #4]
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	021b      	lsls	r3, r3, #8
 800ec98:	617b      	str	r3, [r7, #20]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	1c5a      	adds	r2, r3, #1
 800ec9e:	607a      	str	r2, [r7, #4]
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	461a      	mov	r2, r3
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	4313      	orrs	r3, r2
 800eca8:	617b      	str	r3, [r7, #20]
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	021b      	lsls	r3, r3, #8
 800ecae:	617b      	str	r3, [r7, #20]
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	1c5a      	adds	r2, r3, #1
 800ecb4:	607a      	str	r2, [r7, #4]
 800ecb6:	781b      	ldrb	r3, [r3, #0]
 800ecb8:	461a      	mov	r2, r3
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	4313      	orrs	r3, r2
 800ecbe:	617b      	str	r3, [r7, #20]
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	021b      	lsls	r3, r3, #8
 800ecc4:	617b      	str	r3, [r7, #20]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	1c5a      	adds	r2, r3, #1
 800ecca:	607a      	str	r2, [r7, #4]
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	461a      	mov	r2, r3
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	617b      	str	r3, [r7, #20]
    if (go->neg_magicnumber
 800ecd6:	69bb      	ldr	r3, [r7, #24]
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecde:	b2db      	uxtb	r3, r3
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d004      	beq.n	800ecee <lcp_received_echo_reply+0x80>
	&& magic_val == go->magicnumber) {
 800ece4:	69bb      	ldr	r3, [r7, #24]
 800ece6:	68da      	ldr	r2, [r3, #12]
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	429a      	cmp	r2, r3
 800ecec:	d006      	beq.n	800ecfc <lcp_received_echo_reply+0x8e>
	ppp_warn(("appear to have received our own echo-reply!"));
	return;
    }

    /* Reset the number of outstanding echo frames */
    pcb->lcp_echos_pending = 0;
 800ecee:	69fb      	ldr	r3, [r7, #28]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
 800ecf6:	e002      	b.n	800ecfe <lcp_received_echo_reply+0x90>
	return;
 800ecf8:	bf00      	nop
 800ecfa:	e000      	b.n	800ecfe <lcp_received_echo_reply+0x90>
	return;
 800ecfc:	bf00      	nop
}
 800ecfe:	3724      	adds	r7, #36	; 0x24
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <LcpSendEchoRequest>:

/*
 * LcpSendEchoRequest - Send an echo request frame to the peer
 */

static void LcpSendEchoRequest(fsm *f) {
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b08a      	sub	sp, #40	; 0x28
 800ed0c:	af02      	add	r7, sp, #8
 800ed0e:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800ed16:	69fb      	ldr	r3, [r7, #28]
 800ed18:	33d4      	adds	r3, #212	; 0xd4
 800ed1a:	61bb      	str	r3, [r7, #24]
    u_char pkt[4], *pktp;

    /*
     * Detect the failure of the peer at this point.
     */
    if (pcb->settings.lcp_echo_fails != 0) {
 800ed1c:	69fb      	ldr	r3, [r7, #28]
 800ed1e:	7d1b      	ldrb	r3, [r3, #20]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d00d      	beq.n	800ed40 <LcpSendEchoRequest+0x38>
        if (pcb->lcp_echos_pending >= pcb->settings.lcp_echo_fails) {
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
 800ed2a:	69fb      	ldr	r3, [r7, #28]
 800ed2c:	7d1b      	ldrb	r3, [r3, #20]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d306      	bcc.n	800ed40 <LcpSendEchoRequest+0x38>
            LcpLinkFailure(f);
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f7ff ff36 	bl	800eba4 <LcpLinkFailure>
            pcb->lcp_echos_pending = 0;
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
#endif

    /*
     * Make and send the echo request frame.
     */
    if (f->state == PPP_FSM_OPENED) {
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	7c1b      	ldrb	r3, [r3, #16]
 800ed44:	2b09      	cmp	r3, #9
 800ed46:	d13c      	bne.n	800edc2 <LcpSendEchoRequest+0xba>
        lcp_magic = go->magicnumber;
 800ed48:	69bb      	ldr	r3, [r7, #24]
 800ed4a:	68db      	ldr	r3, [r3, #12]
 800ed4c:	617b      	str	r3, [r7, #20]
	pktp = pkt;
 800ed4e:	f107 030c 	add.w	r3, r7, #12
 800ed52:	613b      	str	r3, [r7, #16]
	PUTLONG(lcp_magic, pktp);
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	1c5a      	adds	r2, r3, #1
 800ed58:	613a      	str	r2, [r7, #16]
 800ed5a:	697a      	ldr	r2, [r7, #20]
 800ed5c:	0e12      	lsrs	r2, r2, #24
 800ed5e:	b2d2      	uxtb	r2, r2
 800ed60:	701a      	strb	r2, [r3, #0]
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	1c5a      	adds	r2, r3, #1
 800ed66:	613a      	str	r2, [r7, #16]
 800ed68:	697a      	ldr	r2, [r7, #20]
 800ed6a:	0c12      	lsrs	r2, r2, #16
 800ed6c:	b2d2      	uxtb	r2, r2
 800ed6e:	701a      	strb	r2, [r3, #0]
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	1c5a      	adds	r2, r3, #1
 800ed74:	613a      	str	r2, [r7, #16]
 800ed76:	697a      	ldr	r2, [r7, #20]
 800ed78:	0a12      	lsrs	r2, r2, #8
 800ed7a:	b2d2      	uxtb	r2, r2
 800ed7c:	701a      	strb	r2, [r3, #0]
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	1c5a      	adds	r2, r3, #1
 800ed82:	613a      	str	r2, [r7, #16]
 800ed84:	697a      	ldr	r2, [r7, #20]
 800ed86:	b2d2      	uxtb	r2, r2
 800ed88:	701a      	strb	r2, [r3, #0]
        fsm_sdata(f, ECHOREQ, pcb->lcp_echo_number++, pkt, pktp - pkt);
 800ed8a:	69fb      	ldr	r3, [r7, #28]
 800ed8c:	f893 214f 	ldrb.w	r2, [r3, #335]	; 0x14f
 800ed90:	1c53      	adds	r3, r2, #1
 800ed92:	b2d9      	uxtb	r1, r3
 800ed94:	69fb      	ldr	r3, [r7, #28]
 800ed96:	f883 114f 	strb.w	r1, [r3, #335]	; 0x14f
 800ed9a:	6939      	ldr	r1, [r7, #16]
 800ed9c:	f107 030c 	add.w	r3, r7, #12
 800eda0:	1acb      	subs	r3, r1, r3
 800eda2:	f107 010c 	add.w	r1, r7, #12
 800eda6:	9300      	str	r3, [sp, #0]
 800eda8:	460b      	mov	r3, r1
 800edaa:	2109      	movs	r1, #9
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f7fc f9fb 	bl	800b1a8 <fsm_sdata>
	++pcb->lcp_echos_pending;
 800edb2:	69fb      	ldr	r3, [r7, #28]
 800edb4:	f893 314e 	ldrb.w	r3, [r3, #334]	; 0x14e
 800edb8:	3301      	adds	r3, #1
 800edba:	b2da      	uxtb	r2, r3
 800edbc:	69fb      	ldr	r3, [r7, #28]
 800edbe:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
    }
}
 800edc2:	bf00      	nop
 800edc4:	3720      	adds	r7, #32
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}

0800edca <lcp_echo_lowerup>:

/*
 * lcp_echo_lowerup - Start the timer for the LCP frame
 */

static void lcp_echo_lowerup(ppp_pcb *pcb) {
 800edca:	b580      	push	{r7, lr}
 800edcc:	b084      	sub	sp, #16
 800edce:	af00      	add	r7, sp, #0
 800edd0:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	3390      	adds	r3, #144	; 0x90
 800edd6:	60fb      	str	r3, [r7, #12]

    /* Clear the parameters for generating echo frames */
    pcb->lcp_echos_pending      = 0;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2200      	movs	r2, #0
 800eddc:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
    pcb->lcp_echo_number        = 0;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2200      	movs	r2, #0
 800ede4:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
    pcb->lcp_echo_timer_running = 0;
 800ede8:	687a      	ldr	r2, [r7, #4]
 800edea:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800edee:	f36f 1304 	bfc	r3, #4, #1
 800edf2:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  
    /* If a timeout interval is specified then start the timer */
    if (pcb->settings.lcp_echo_interval != 0)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	7cdb      	ldrb	r3, [r3, #19]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d002      	beq.n	800ee04 <lcp_echo_lowerup+0x3a>
        LcpEchoCheck (f);
 800edfe:	68f8      	ldr	r0, [r7, #12]
 800ee00:	f7ff feea 	bl	800ebd8 <LcpEchoCheck>
}
 800ee04:	bf00      	nop
 800ee06:	3710      	adds	r7, #16
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <lcp_echo_lowerdown>:

/*
 * lcp_echo_lowerdown - Stop the timer for the LCP frame
 */

static void lcp_echo_lowerdown(ppp_pcb *pcb) {
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	3390      	adds	r3, #144	; 0x90
 800ee18:	60fb      	str	r3, [r7, #12]

    if (pcb->lcp_echo_timer_running != 0) {
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ee20:	f003 0310 	and.w	r3, r3, #16
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d00a      	beq.n	800ee40 <lcp_echo_lowerdown+0x34>
        UNTIMEOUT (LcpEchoTimeout, f);
 800ee2a:	68f9      	ldr	r1, [r7, #12]
 800ee2c:	4806      	ldr	r0, [pc, #24]	; (800ee48 <lcp_echo_lowerdown+0x3c>)
 800ee2e:	f7fa fd77 	bl	8009920 <sys_untimeout>
        pcb->lcp_echo_timer_running = 0;
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800ee38:	f36f 1304 	bfc	r3, #4, #1
 800ee3c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    }
}
 800ee40:	bf00      	nop
 800ee42:	3710      	adds	r7, #16
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}
 800ee48:	0800ec31 	.word	0x0800ec31

0800ee4c <magic_churnrand>:
 *  If new random data is available, pass a pointer to that and it will be
 *  included.
 *
 * Ref: Applied Cryptography 2nd Ed. by Bruce Schneier p. 427
 */
static void magic_churnrand(char *rand_data, u32_t rand_len) {
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b09a      	sub	sp, #104	; 0x68
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
  lwip_md5_context md5_ctx;

  /* LWIP_DEBUGF(LOG_INFO, ("magic_churnrand: %u@%P\n", rand_len, rand_data)); */
  lwip_md5_init(&md5_ctx);
  lwip_md5_starts(&md5_ctx);
 800ee56:	f107 0310 	add.w	r3, r7, #16
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f000 f89c 	bl	800ef98 <md5_starts>
  lwip_md5_update(&md5_ctx, (u_char *)magic_randpool, sizeof(magic_randpool));
 800ee60:	f107 0310 	add.w	r3, r7, #16
 800ee64:	2210      	movs	r2, #16
 800ee66:	4918      	ldr	r1, [pc, #96]	; (800eec8 <magic_churnrand+0x7c>)
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f000 ff7d 	bl	800fd68 <md5_update>
  if (rand_data) {
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d007      	beq.n	800ee84 <magic_churnrand+0x38>
    lwip_md5_update(&md5_ctx, (u_char *)rand_data, rand_len);
 800ee74:	683a      	ldr	r2, [r7, #0]
 800ee76:	f107 0310 	add.w	r3, r7, #16
 800ee7a:	6879      	ldr	r1, [r7, #4]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f000 ff73 	bl	800fd68 <md5_update>
 800ee82:	e016      	b.n	800eeb2 <magic_churnrand+0x66>
#ifdef LWIP_RAND
      u32_t rand;
#endif /* LWIP_RAND */
    } sys_data;
    /* Load sys_data fields here. */
    magic_randomseed += sys_jiffies();
 800ee84:	f7f2 f96a 	bl	800115c <sys_jiffies>
 800ee88:	4602      	mov	r2, r0
 800ee8a:	4b10      	ldr	r3, [pc, #64]	; (800eecc <magic_churnrand+0x80>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	4413      	add	r3, r2
 800ee90:	4a0e      	ldr	r2, [pc, #56]	; (800eecc <magic_churnrand+0x80>)
 800ee92:	6013      	str	r3, [r2, #0]
    sys_data.jiffies = magic_randomseed;
 800ee94:	4b0d      	ldr	r3, [pc, #52]	; (800eecc <magic_churnrand+0x80>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	60bb      	str	r3, [r7, #8]
#ifdef LWIP_RAND
    sys_data.rand = LWIP_RAND();
 800ee9a:	f7f2 f967 	bl	800116c <lwip_port_rand>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_RAND */
    lwip_md5_update(&md5_ctx, (u_char *)&sys_data, sizeof(sys_data));
 800eea2:	f107 0108 	add.w	r1, r7, #8
 800eea6:	f107 0310 	add.w	r3, r7, #16
 800eeaa:	2208      	movs	r2, #8
 800eeac:	4618      	mov	r0, r3
 800eeae:	f000 ff5b 	bl	800fd68 <md5_update>
  }
  lwip_md5_finish(&md5_ctx, (u_char *)magic_randpool);
 800eeb2:	f107 0310 	add.w	r3, r7, #16
 800eeb6:	4904      	ldr	r1, [pc, #16]	; (800eec8 <magic_churnrand+0x7c>)
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f000 ffbd 	bl	800fe38 <md5_finish>
  lwip_md5_free(&md5_ctx);
/*  LWIP_DEBUGF(LOG_INFO, ("magic_churnrand: -> 0\n")); */
}
 800eebe:	bf00      	nop
 800eec0:	3768      	adds	r7, #104	; 0x68
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop
 800eec8:	20000778 	.word	0x20000778
 800eecc:	2000078c 	.word	0x2000078c

0800eed0 <magic_init>:

/*
 * Initialize the random number generator.
 */
void magic_init(void) {
 800eed0:	b580      	push	{r7, lr}
 800eed2:	af00      	add	r7, sp, #0
  magic_churnrand(NULL, 0);
 800eed4:	2100      	movs	r1, #0
 800eed6:	2000      	movs	r0, #0
 800eed8:	f7ff ffb8 	bl	800ee4c <magic_churnrand>
}
 800eedc:	bf00      	nop
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <magic_randomize>:

/*
 * Randomize our random seed value.
 */
void magic_randomize(void) {
 800eee0:	b580      	push	{r7, lr}
 800eee2:	af00      	add	r7, sp, #0
  magic_churnrand(NULL, 0);
 800eee4:	2100      	movs	r1, #0
 800eee6:	2000      	movs	r0, #0
 800eee8:	f7ff ffb0 	bl	800ee4c <magic_churnrand>
}
 800eeec:	bf00      	nop
 800eeee:	bd80      	pop	{r7, pc}

0800eef0 <magic_random_bytes>:
 *  predict future values.
 * XXX Why don't we preserve md5 between blocks and just update it with
 *  magic_randcount each time?  Probably there is a weakness but I wish that
 *  it was documented.
 */
void magic_random_bytes(unsigned char *buf, u32_t buf_len) {
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b09e      	sub	sp, #120	; 0x78
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	6039      	str	r1, [r7, #0]
  lwip_md5_context md5_ctx;
  u_char tmp[MD5_HASH_SIZE];
  u32_t n;

  while (buf_len > 0) {
 800eefa:	e033      	b.n	800ef64 <magic_random_bytes+0x74>
    lwip_md5_init(&md5_ctx);
    lwip_md5_starts(&md5_ctx);
 800eefc:	f107 031c 	add.w	r3, r7, #28
 800ef00:	4618      	mov	r0, r3
 800ef02:	f000 f849 	bl	800ef98 <md5_starts>
    lwip_md5_update(&md5_ctx, (u_char *)magic_randpool, sizeof(magic_randpool));
 800ef06:	f107 031c 	add.w	r3, r7, #28
 800ef0a:	2210      	movs	r2, #16
 800ef0c:	4919      	ldr	r1, [pc, #100]	; (800ef74 <magic_random_bytes+0x84>)
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f000 ff2a 	bl	800fd68 <md5_update>
    lwip_md5_update(&md5_ctx, (u_char *)&magic_randcount, sizeof(magic_randcount));
 800ef14:	f107 031c 	add.w	r3, r7, #28
 800ef18:	2204      	movs	r2, #4
 800ef1a:	4917      	ldr	r1, [pc, #92]	; (800ef78 <magic_random_bytes+0x88>)
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f000 ff23 	bl	800fd68 <md5_update>
    lwip_md5_finish(&md5_ctx, tmp);
 800ef22:	f107 020c 	add.w	r2, r7, #12
 800ef26:	f107 031c 	add.w	r3, r7, #28
 800ef2a:	4611      	mov	r1, r2
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f000 ff83 	bl	800fe38 <md5_finish>
    lwip_md5_free(&md5_ctx);
    magic_randcount++;
 800ef32:	4b11      	ldr	r3, [pc, #68]	; (800ef78 <magic_random_bytes+0x88>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	3301      	adds	r3, #1
 800ef38:	4a0f      	ldr	r2, [pc, #60]	; (800ef78 <magic_random_bytes+0x88>)
 800ef3a:	6013      	str	r3, [r2, #0]
    n = LWIP_MIN(buf_len, MD5_HASH_SIZE);
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	2b10      	cmp	r3, #16
 800ef40:	bf28      	it	cs
 800ef42:	2310      	movcs	r3, #16
 800ef44:	677b      	str	r3, [r7, #116]	; 0x74
    MEMCPY(buf, tmp, n);
 800ef46:	f107 030c 	add.w	r3, r7, #12
 800ef4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f003 fbf4 	bl	801273c <memcpy>
    buf += n;
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef58:	4413      	add	r3, r2
 800ef5a:	607b      	str	r3, [r7, #4]
    buf_len -= n;
 800ef5c:	683a      	ldr	r2, [r7, #0]
 800ef5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef60:	1ad3      	subs	r3, r2, r3
 800ef62:	603b      	str	r3, [r7, #0]
  while (buf_len > 0) {
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d1c8      	bne.n	800eefc <magic_random_bytes+0xc>
  }
}
 800ef6a:	bf00      	nop
 800ef6c:	3778      	adds	r7, #120	; 0x78
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}
 800ef72:	bf00      	nop
 800ef74:	20000778 	.word	0x20000778
 800ef78:	20000788 	.word	0x20000788

0800ef7c <magic>:

/*
 * Return a new 32-bit random number.
 */
u32_t magic(void) {
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b082      	sub	sp, #8
 800ef80:	af00      	add	r7, sp, #0
  u32_t new_rand;

  magic_random_bytes((unsigned char *)&new_rand, sizeof(new_rand));
 800ef82:	1d3b      	adds	r3, r7, #4
 800ef84:	2104      	movs	r1, #4
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7ff ffb2 	bl	800eef0 <magic_random_bytes>
  return new_rand;
 800ef8c:	687b      	ldr	r3, [r7, #4]
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3708      	adds	r7, #8
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
	...

0800ef98 <md5_starts>:

/*
 * MD5 context setup
 */
void md5_starts( md5_context *ctx )
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2200      	movs	r2, #0
 800efa4:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2200      	movs	r2, #0
 800efaa:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x67452301;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	4a08      	ldr	r2, [pc, #32]	; (800efd0 <md5_starts+0x38>)
 800efb0:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	4a07      	ldr	r2, [pc, #28]	; (800efd4 <md5_starts+0x3c>)
 800efb6:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	4a07      	ldr	r2, [pc, #28]	; (800efd8 <md5_starts+0x40>)
 800efbc:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	4a06      	ldr	r2, [pc, #24]	; (800efdc <md5_starts+0x44>)
 800efc2:	615a      	str	r2, [r3, #20]
}
 800efc4:	bf00      	nop
 800efc6:	370c      	adds	r7, #12
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr
 800efd0:	67452301 	.word	0x67452301
 800efd4:	efcdab89 	.word	0xefcdab89
 800efd8:	98badcfe 	.word	0x98badcfe
 800efdc:	10325476 	.word	0x10325476

0800efe0 <md5_process>:

static void md5_process( md5_context *ctx, const unsigned char data[64] )
{
 800efe0:	b480      	push	{r7}
 800efe2:	b097      	sub	sp, #92	; 0x5c
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
    unsigned long X[16], A, B, C, D;

    GET_ULONG_LE( X[ 0], data,  0 );
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	781b      	ldrb	r3, [r3, #0]
 800efee:	461a      	mov	r2, r3
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	3301      	adds	r3, #1
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	021b      	lsls	r3, r3, #8
 800eff8:	431a      	orrs	r2, r3
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	3302      	adds	r3, #2
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	041b      	lsls	r3, r3, #16
 800f002:	431a      	orrs	r2, r3
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	3303      	adds	r3, #3
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	061b      	lsls	r3, r3, #24
 800f00c:	4313      	orrs	r3, r2
 800f00e:	60bb      	str	r3, [r7, #8]
    GET_ULONG_LE( X[ 1], data,  4 );
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	3304      	adds	r3, #4
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	461a      	mov	r2, r3
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	3305      	adds	r3, #5
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	021b      	lsls	r3, r3, #8
 800f020:	431a      	orrs	r2, r3
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	3306      	adds	r3, #6
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	041b      	lsls	r3, r3, #16
 800f02a:	431a      	orrs	r2, r3
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	3307      	adds	r3, #7
 800f030:	781b      	ldrb	r3, [r3, #0]
 800f032:	061b      	lsls	r3, r3, #24
 800f034:	4313      	orrs	r3, r2
 800f036:	60fb      	str	r3, [r7, #12]
    GET_ULONG_LE( X[ 2], data,  8 );
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	3308      	adds	r3, #8
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	461a      	mov	r2, r3
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	3309      	adds	r3, #9
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	021b      	lsls	r3, r3, #8
 800f048:	431a      	orrs	r2, r3
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	330a      	adds	r3, #10
 800f04e:	781b      	ldrb	r3, [r3, #0]
 800f050:	041b      	lsls	r3, r3, #16
 800f052:	431a      	orrs	r2, r3
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	330b      	adds	r3, #11
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	061b      	lsls	r3, r3, #24
 800f05c:	4313      	orrs	r3, r2
 800f05e:	613b      	str	r3, [r7, #16]
    GET_ULONG_LE( X[ 3], data, 12 );
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	330c      	adds	r3, #12
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	461a      	mov	r2, r3
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	330d      	adds	r3, #13
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	021b      	lsls	r3, r3, #8
 800f070:	431a      	orrs	r2, r3
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	330e      	adds	r3, #14
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	041b      	lsls	r3, r3, #16
 800f07a:	431a      	orrs	r2, r3
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	330f      	adds	r3, #15
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	061b      	lsls	r3, r3, #24
 800f084:	4313      	orrs	r3, r2
 800f086:	617b      	str	r3, [r7, #20]
    GET_ULONG_LE( X[ 4], data, 16 );
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	3310      	adds	r3, #16
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	461a      	mov	r2, r3
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	3311      	adds	r3, #17
 800f094:	781b      	ldrb	r3, [r3, #0]
 800f096:	021b      	lsls	r3, r3, #8
 800f098:	431a      	orrs	r2, r3
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	3312      	adds	r3, #18
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	041b      	lsls	r3, r3, #16
 800f0a2:	431a      	orrs	r2, r3
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	3313      	adds	r3, #19
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	061b      	lsls	r3, r3, #24
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	61bb      	str	r3, [r7, #24]
    GET_ULONG_LE( X[ 5], data, 20 );
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	3314      	adds	r3, #20
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	3315      	adds	r3, #21
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	021b      	lsls	r3, r3, #8
 800f0c0:	431a      	orrs	r2, r3
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	3316      	adds	r3, #22
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	041b      	lsls	r3, r3, #16
 800f0ca:	431a      	orrs	r2, r3
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	3317      	adds	r3, #23
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	061b      	lsls	r3, r3, #24
 800f0d4:	4313      	orrs	r3, r2
 800f0d6:	61fb      	str	r3, [r7, #28]
    GET_ULONG_LE( X[ 6], data, 24 );
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	3318      	adds	r3, #24
 800f0dc:	781b      	ldrb	r3, [r3, #0]
 800f0de:	461a      	mov	r2, r3
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	3319      	adds	r3, #25
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	021b      	lsls	r3, r3, #8
 800f0e8:	431a      	orrs	r2, r3
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	331a      	adds	r3, #26
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	041b      	lsls	r3, r3, #16
 800f0f2:	431a      	orrs	r2, r3
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	331b      	adds	r3, #27
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	061b      	lsls	r3, r3, #24
 800f0fc:	4313      	orrs	r3, r2
 800f0fe:	623b      	str	r3, [r7, #32]
    GET_ULONG_LE( X[ 7], data, 28 );
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	331c      	adds	r3, #28
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	461a      	mov	r2, r3
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	331d      	adds	r3, #29
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	021b      	lsls	r3, r3, #8
 800f110:	431a      	orrs	r2, r3
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	331e      	adds	r3, #30
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	041b      	lsls	r3, r3, #16
 800f11a:	431a      	orrs	r2, r3
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	331f      	adds	r3, #31
 800f120:	781b      	ldrb	r3, [r3, #0]
 800f122:	061b      	lsls	r3, r3, #24
 800f124:	4313      	orrs	r3, r2
 800f126:	627b      	str	r3, [r7, #36]	; 0x24
    GET_ULONG_LE( X[ 8], data, 32 );
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	3320      	adds	r3, #32
 800f12c:	781b      	ldrb	r3, [r3, #0]
 800f12e:	461a      	mov	r2, r3
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	3321      	adds	r3, #33	; 0x21
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	021b      	lsls	r3, r3, #8
 800f138:	431a      	orrs	r2, r3
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	3322      	adds	r3, #34	; 0x22
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	041b      	lsls	r3, r3, #16
 800f142:	431a      	orrs	r2, r3
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	3323      	adds	r3, #35	; 0x23
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	061b      	lsls	r3, r3, #24
 800f14c:	4313      	orrs	r3, r2
 800f14e:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_ULONG_LE( X[ 9], data, 36 );
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	3324      	adds	r3, #36	; 0x24
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	461a      	mov	r2, r3
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	3325      	adds	r3, #37	; 0x25
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	021b      	lsls	r3, r3, #8
 800f160:	431a      	orrs	r2, r3
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	3326      	adds	r3, #38	; 0x26
 800f166:	781b      	ldrb	r3, [r3, #0]
 800f168:	041b      	lsls	r3, r3, #16
 800f16a:	431a      	orrs	r2, r3
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	3327      	adds	r3, #39	; 0x27
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	061b      	lsls	r3, r3, #24
 800f174:	4313      	orrs	r3, r2
 800f176:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_ULONG_LE( X[10], data, 40 );
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	3328      	adds	r3, #40	; 0x28
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	461a      	mov	r2, r3
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	3329      	adds	r3, #41	; 0x29
 800f184:	781b      	ldrb	r3, [r3, #0]
 800f186:	021b      	lsls	r3, r3, #8
 800f188:	431a      	orrs	r2, r3
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	332a      	adds	r3, #42	; 0x2a
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	041b      	lsls	r3, r3, #16
 800f192:	431a      	orrs	r2, r3
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	332b      	adds	r3, #43	; 0x2b
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	061b      	lsls	r3, r3, #24
 800f19c:	4313      	orrs	r3, r2
 800f19e:	633b      	str	r3, [r7, #48]	; 0x30
    GET_ULONG_LE( X[11], data, 44 );
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	332c      	adds	r3, #44	; 0x2c
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	332d      	adds	r3, #45	; 0x2d
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	021b      	lsls	r3, r3, #8
 800f1b0:	431a      	orrs	r2, r3
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	332e      	adds	r3, #46	; 0x2e
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	041b      	lsls	r3, r3, #16
 800f1ba:	431a      	orrs	r2, r3
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	332f      	adds	r3, #47	; 0x2f
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	061b      	lsls	r3, r3, #24
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	637b      	str	r3, [r7, #52]	; 0x34
    GET_ULONG_LE( X[12], data, 48 );
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	3330      	adds	r3, #48	; 0x30
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	3331      	adds	r3, #49	; 0x31
 800f1d4:	781b      	ldrb	r3, [r3, #0]
 800f1d6:	021b      	lsls	r3, r3, #8
 800f1d8:	431a      	orrs	r2, r3
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	3332      	adds	r3, #50	; 0x32
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	041b      	lsls	r3, r3, #16
 800f1e2:	431a      	orrs	r2, r3
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	3333      	adds	r3, #51	; 0x33
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	061b      	lsls	r3, r3, #24
 800f1ec:	4313      	orrs	r3, r2
 800f1ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GET_ULONG_LE( X[13], data, 52 );
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	3334      	adds	r3, #52	; 0x34
 800f1f4:	781b      	ldrb	r3, [r3, #0]
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	3335      	adds	r3, #53	; 0x35
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	021b      	lsls	r3, r3, #8
 800f200:	431a      	orrs	r2, r3
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	3336      	adds	r3, #54	; 0x36
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	041b      	lsls	r3, r3, #16
 800f20a:	431a      	orrs	r2, r3
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	3337      	adds	r3, #55	; 0x37
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	061b      	lsls	r3, r3, #24
 800f214:	4313      	orrs	r3, r2
 800f216:	63fb      	str	r3, [r7, #60]	; 0x3c
    GET_ULONG_LE( X[14], data, 56 );
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	3338      	adds	r3, #56	; 0x38
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	461a      	mov	r2, r3
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	3339      	adds	r3, #57	; 0x39
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	021b      	lsls	r3, r3, #8
 800f228:	431a      	orrs	r2, r3
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	333a      	adds	r3, #58	; 0x3a
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	041b      	lsls	r3, r3, #16
 800f232:	431a      	orrs	r2, r3
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	333b      	adds	r3, #59	; 0x3b
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	061b      	lsls	r3, r3, #24
 800f23c:	4313      	orrs	r3, r2
 800f23e:	643b      	str	r3, [r7, #64]	; 0x40
    GET_ULONG_LE( X[15], data, 60 );
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	333c      	adds	r3, #60	; 0x3c
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	461a      	mov	r2, r3
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	333d      	adds	r3, #61	; 0x3d
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	021b      	lsls	r3, r3, #8
 800f250:	431a      	orrs	r2, r3
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	333e      	adds	r3, #62	; 0x3e
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	041b      	lsls	r3, r3, #16
 800f25a:	431a      	orrs	r2, r3
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	333f      	adds	r3, #63	; 0x3f
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	061b      	lsls	r3, r3, #24
 800f264:	4313      	orrs	r3, r2
 800f266:	647b      	str	r3, [r7, #68]	; 0x44
#define P(a,b,c,d,k,s,t)                                \
{                                                       \
    a += F(b,c,d) + X[k] + t; a = S(a,s) + b;           \
}

    A = ctx->state[0];
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	689b      	ldr	r3, [r3, #8]
 800f26c:	657b      	str	r3, [r7, #84]	; 0x54
    B = ctx->state[1];
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	68db      	ldr	r3, [r3, #12]
 800f272:	653b      	str	r3, [r7, #80]	; 0x50
    C = ctx->state[2];
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	691b      	ldr	r3, [r3, #16]
 800f278:	64fb      	str	r3, [r7, #76]	; 0x4c
    D = ctx->state[3];
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	695b      	ldr	r3, [r3, #20]
 800f27e:	64bb      	str	r3, [r7, #72]	; 0x48

#define F(x,y,z) (z ^ (x & (y ^ z)))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
 800f280:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f284:	405a      	eors	r2, r3
 800f286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f288:	401a      	ands	r2, r3
 800f28a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f28c:	405a      	eors	r2, r3
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	441a      	add	r2, r3
 800f292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f294:	441a      	add	r2, r3
 800f296:	4ba5      	ldr	r3, [pc, #660]	; (800f52c <md5_process+0x54c>)
 800f298:	4413      	add	r3, r2
 800f29a:	657b      	str	r3, [r7, #84]	; 0x54
 800f29c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f29e:	ea4f 6273 	mov.w	r2, r3, ror #25
 800f2a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2a4:	4413      	add	r3, r2
 800f2a6:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 800f2a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f2aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2ac:	405a      	eors	r2, r3
 800f2ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2b0:	401a      	ands	r2, r3
 800f2b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2b4:	405a      	eors	r2, r3
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	441a      	add	r2, r3
 800f2ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2bc:	441a      	add	r2, r3
 800f2be:	4b9c      	ldr	r3, [pc, #624]	; (800f530 <md5_process+0x550>)
 800f2c0:	4413      	add	r3, r2
 800f2c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800f2c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2c6:	ea4f 5233 	mov.w	r2, r3, ror #20
 800f2ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2cc:	4413      	add	r3, r2
 800f2ce:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 17, 0x242070DB );
 800f2d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f2d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2d4:	405a      	eors	r2, r3
 800f2d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2d8:	401a      	ands	r2, r3
 800f2da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2dc:	405a      	eors	r2, r3
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	441a      	add	r2, r3
 800f2e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2e4:	441a      	add	r2, r3
 800f2e6:	4b93      	ldr	r3, [pc, #588]	; (800f534 <md5_process+0x554>)
 800f2e8:	4413      	add	r3, r2
 800f2ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f2ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2ee:	ea4f 32f3 	mov.w	r2, r3, ror #15
 800f2f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2f4:	4413      	add	r3, r2
 800f2f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 800f2f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f2fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2fc:	405a      	eors	r2, r3
 800f2fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f300:	401a      	ands	r2, r3
 800f302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f304:	405a      	eors	r2, r3
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	441a      	add	r2, r3
 800f30a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f30c:	441a      	add	r2, r3
 800f30e:	4b8a      	ldr	r3, [pc, #552]	; (800f538 <md5_process+0x558>)
 800f310:	4413      	add	r3, r2
 800f312:	653b      	str	r3, [r7, #80]	; 0x50
 800f314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f316:	ea4f 22b3 	mov.w	r2, r3, ror #10
 800f31a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f31c:	4413      	add	r3, r2
 800f31e:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 800f320:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f324:	405a      	eors	r2, r3
 800f326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f328:	401a      	ands	r2, r3
 800f32a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f32c:	405a      	eors	r2, r3
 800f32e:	69bb      	ldr	r3, [r7, #24]
 800f330:	441a      	add	r2, r3
 800f332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f334:	441a      	add	r2, r3
 800f336:	4b81      	ldr	r3, [pc, #516]	; (800f53c <md5_process+0x55c>)
 800f338:	4413      	add	r3, r2
 800f33a:	657b      	str	r3, [r7, #84]	; 0x54
 800f33c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f33e:	ea4f 6273 	mov.w	r2, r3, ror #25
 800f342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f344:	4413      	add	r3, r2
 800f346:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  5, 12, 0x4787C62A );
 800f348:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f34a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f34c:	405a      	eors	r2, r3
 800f34e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f350:	401a      	ands	r2, r3
 800f352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f354:	405a      	eors	r2, r3
 800f356:	69fb      	ldr	r3, [r7, #28]
 800f358:	441a      	add	r2, r3
 800f35a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f35c:	441a      	add	r2, r3
 800f35e:	4b78      	ldr	r3, [pc, #480]	; (800f540 <md5_process+0x560>)
 800f360:	4413      	add	r3, r2
 800f362:	64bb      	str	r3, [r7, #72]	; 0x48
 800f364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f366:	ea4f 5233 	mov.w	r2, r3, ror #20
 800f36a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f36c:	4413      	add	r3, r2
 800f36e:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 17, 0xA8304613 );
 800f370:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f374:	405a      	eors	r2, r3
 800f376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f378:	401a      	ands	r2, r3
 800f37a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f37c:	405a      	eors	r2, r3
 800f37e:	6a3b      	ldr	r3, [r7, #32]
 800f380:	441a      	add	r2, r3
 800f382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f384:	441a      	add	r2, r3
 800f386:	4b6f      	ldr	r3, [pc, #444]	; (800f544 <md5_process+0x564>)
 800f388:	4413      	add	r3, r2
 800f38a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f38c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f38e:	ea4f 32f3 	mov.w	r2, r3, ror #15
 800f392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f394:	4413      	add	r3, r2
 800f396:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  7, 22, 0xFD469501 );
 800f398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f39a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f39c:	405a      	eors	r2, r3
 800f39e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3a0:	401a      	ands	r2, r3
 800f3a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3a4:	405a      	eors	r2, r3
 800f3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a8:	441a      	add	r2, r3
 800f3aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3ac:	441a      	add	r2, r3
 800f3ae:	4b66      	ldr	r3, [pc, #408]	; (800f548 <md5_process+0x568>)
 800f3b0:	4413      	add	r3, r2
 800f3b2:	653b      	str	r3, [r7, #80]	; 0x50
 800f3b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3b6:	ea4f 22b3 	mov.w	r2, r3, ror #10
 800f3ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3bc:	4413      	add	r3, r2
 800f3be:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  7, 0x698098D8 );
 800f3c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f3c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3c4:	405a      	eors	r2, r3
 800f3c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3c8:	401a      	ands	r2, r3
 800f3ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3cc:	405a      	eors	r2, r3
 800f3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d0:	441a      	add	r2, r3
 800f3d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3d4:	441a      	add	r2, r3
 800f3d6:	4b5d      	ldr	r3, [pc, #372]	; (800f54c <md5_process+0x56c>)
 800f3d8:	4413      	add	r3, r2
 800f3da:	657b      	str	r3, [r7, #84]	; 0x54
 800f3dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3de:	ea4f 6273 	mov.w	r2, r3, ror #25
 800f3e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3e4:	4413      	add	r3, r2
 800f3e6:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 800f3e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f3ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3ec:	405a      	eors	r2, r3
 800f3ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3f0:	401a      	ands	r2, r3
 800f3f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3f4:	405a      	eors	r2, r3
 800f3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f8:	441a      	add	r2, r3
 800f3fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3fc:	441a      	add	r2, r3
 800f3fe:	4b54      	ldr	r3, [pc, #336]	; (800f550 <md5_process+0x570>)
 800f400:	4413      	add	r3, r2
 800f402:	64bb      	str	r3, [r7, #72]	; 0x48
 800f404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f406:	ea4f 5233 	mov.w	r2, r3, ror #20
 800f40a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f40c:	4413      	add	r3, r2
 800f40e:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 800f410:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f414:	405a      	eors	r2, r3
 800f416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f418:	401a      	ands	r2, r3
 800f41a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f41c:	405a      	eors	r2, r3
 800f41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f420:	441a      	add	r2, r3
 800f422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f424:	4413      	add	r3, r2
 800f426:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
 800f42a:	3b4f      	subs	r3, #79	; 0x4f
 800f42c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f42e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f430:	ea4f 32f3 	mov.w	r2, r3, ror #15
 800f434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f436:	4413      	add	r3, r2
 800f438:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 800f43a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f43c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f43e:	405a      	eors	r2, r3
 800f440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f442:	401a      	ands	r2, r3
 800f444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f446:	405a      	eors	r2, r3
 800f448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f44a:	441a      	add	r2, r3
 800f44c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f44e:	441a      	add	r2, r3
 800f450:	4b40      	ldr	r3, [pc, #256]	; (800f554 <md5_process+0x574>)
 800f452:	4413      	add	r3, r2
 800f454:	653b      	str	r3, [r7, #80]	; 0x50
 800f456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f458:	ea4f 22b3 	mov.w	r2, r3, ror #10
 800f45c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f45e:	4413      	add	r3, r2
 800f460:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  7, 0x6B901122 );
 800f462:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f466:	405a      	eors	r2, r3
 800f468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f46a:	401a      	ands	r2, r3
 800f46c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f46e:	405a      	eors	r2, r3
 800f470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f472:	441a      	add	r2, r3
 800f474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f476:	441a      	add	r2, r3
 800f478:	4b37      	ldr	r3, [pc, #220]	; (800f558 <md5_process+0x578>)
 800f47a:	4413      	add	r3, r2
 800f47c:	657b      	str	r3, [r7, #84]	; 0x54
 800f47e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f480:	ea4f 6273 	mov.w	r2, r3, ror #25
 800f484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f486:	4413      	add	r3, r2
 800f488:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 13, 12, 0xFD987193 );
 800f48a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f48c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f48e:	405a      	eors	r2, r3
 800f490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f492:	401a      	ands	r2, r3
 800f494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f496:	405a      	eors	r2, r3
 800f498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f49a:	441a      	add	r2, r3
 800f49c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f49e:	441a      	add	r2, r3
 800f4a0:	4b2e      	ldr	r3, [pc, #184]	; (800f55c <md5_process+0x57c>)
 800f4a2:	4413      	add	r3, r2
 800f4a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f4a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4a8:	ea4f 5233 	mov.w	r2, r3, ror #20
 800f4ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4ae:	4413      	add	r3, r2
 800f4b0:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 17, 0xA679438E );
 800f4b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f4b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4b6:	405a      	eors	r2, r3
 800f4b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4ba:	401a      	ands	r2, r3
 800f4bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4be:	405a      	eors	r2, r3
 800f4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4c2:	441a      	add	r2, r3
 800f4c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4c6:	441a      	add	r2, r3
 800f4c8:	4b25      	ldr	r3, [pc, #148]	; (800f560 <md5_process+0x580>)
 800f4ca:	4413      	add	r3, r2
 800f4cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f4ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4d0:	ea4f 32f3 	mov.w	r2, r3, ror #15
 800f4d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4d6:	4413      	add	r3, r2
 800f4d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 15, 22, 0x49B40821 );
 800f4da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4de:	405a      	eors	r2, r3
 800f4e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4e2:	401a      	ands	r2, r3
 800f4e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4e6:	405a      	eors	r2, r3
 800f4e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4ea:	441a      	add	r2, r3
 800f4ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4ee:	441a      	add	r2, r3
 800f4f0:	4b1c      	ldr	r3, [pc, #112]	; (800f564 <md5_process+0x584>)
 800f4f2:	4413      	add	r3, r2
 800f4f4:	653b      	str	r3, [r7, #80]	; 0x50
 800f4f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4f8:	ea4f 22b3 	mov.w	r2, r3, ror #10
 800f4fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4fe:	4413      	add	r3, r2
 800f500:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) (y ^ (z & (x ^ y)))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
 800f502:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f506:	405a      	eors	r2, r3
 800f508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f50a:	401a      	ands	r2, r3
 800f50c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f50e:	405a      	eors	r2, r3
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	441a      	add	r2, r3
 800f514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f516:	441a      	add	r2, r3
 800f518:	4b13      	ldr	r3, [pc, #76]	; (800f568 <md5_process+0x588>)
 800f51a:	4413      	add	r3, r2
 800f51c:	657b      	str	r3, [r7, #84]	; 0x54
 800f51e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f520:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800f524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f526:	4413      	add	r3, r2
 800f528:	e020      	b.n	800f56c <md5_process+0x58c>
 800f52a:	bf00      	nop
 800f52c:	d76aa478 	.word	0xd76aa478
 800f530:	e8c7b756 	.word	0xe8c7b756
 800f534:	242070db 	.word	0x242070db
 800f538:	c1bdceee 	.word	0xc1bdceee
 800f53c:	f57c0faf 	.word	0xf57c0faf
 800f540:	4787c62a 	.word	0x4787c62a
 800f544:	a8304613 	.word	0xa8304613
 800f548:	fd469501 	.word	0xfd469501
 800f54c:	698098d8 	.word	0x698098d8
 800f550:	8b44f7af 	.word	0x8b44f7af
 800f554:	895cd7be 	.word	0x895cd7be
 800f558:	6b901122 	.word	0x6b901122
 800f55c:	fd987193 	.word	0xfd987193
 800f560:	a679438e 	.word	0xa679438e
 800f564:	49b40821 	.word	0x49b40821
 800f568:	f61e2562 	.word	0xf61e2562
 800f56c:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  6,  9, 0xC040B340 );
 800f56e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f572:	405a      	eors	r2, r3
 800f574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f576:	401a      	ands	r2, r3
 800f578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f57a:	405a      	eors	r2, r3
 800f57c:	6a3b      	ldr	r3, [r7, #32]
 800f57e:	441a      	add	r2, r3
 800f580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f582:	441a      	add	r2, r3
 800f584:	4ba4      	ldr	r3, [pc, #656]	; (800f818 <md5_process+0x838>)
 800f586:	4413      	add	r3, r2
 800f588:	64bb      	str	r3, [r7, #72]	; 0x48
 800f58a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f58c:	ea4f 52f3 	mov.w	r2, r3, ror #23
 800f590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f592:	4413      	add	r3, r2
 800f594:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 14, 0x265E5A51 );
 800f596:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f59a:	405a      	eors	r2, r3
 800f59c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f59e:	401a      	ands	r2, r3
 800f5a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5a2:	405a      	eors	r2, r3
 800f5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5a6:	441a      	add	r2, r3
 800f5a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5aa:	441a      	add	r2, r3
 800f5ac:	4b9b      	ldr	r3, [pc, #620]	; (800f81c <md5_process+0x83c>)
 800f5ae:	4413      	add	r3, r2
 800f5b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f5b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5b4:	ea4f 42b3 	mov.w	r2, r3, ror #18
 800f5b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5ba:	4413      	add	r3, r2
 800f5bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
 800f5be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f5c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5c2:	405a      	eors	r2, r3
 800f5c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5c6:	401a      	ands	r2, r3
 800f5c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5ca:	405a      	eors	r2, r3
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	441a      	add	r2, r3
 800f5d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5d2:	441a      	add	r2, r3
 800f5d4:	4b92      	ldr	r3, [pc, #584]	; (800f820 <md5_process+0x840>)
 800f5d6:	4413      	add	r3, r2
 800f5d8:	653b      	str	r3, [r7, #80]	; 0x50
 800f5da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5dc:	ea4f 3233 	mov.w	r2, r3, ror #12
 800f5e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5e2:	4413      	add	r3, r2
 800f5e4:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  5,  5, 0xD62F105D );
 800f5e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f5e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5ea:	405a      	eors	r2, r3
 800f5ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5ee:	401a      	ands	r2, r3
 800f5f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5f2:	405a      	eors	r2, r3
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	441a      	add	r2, r3
 800f5f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5fa:	441a      	add	r2, r3
 800f5fc:	4b89      	ldr	r3, [pc, #548]	; (800f824 <md5_process+0x844>)
 800f5fe:	4413      	add	r3, r2
 800f600:	657b      	str	r3, [r7, #84]	; 0x54
 800f602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f604:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800f608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f60a:	4413      	add	r3, r2
 800f60c:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 10,  9, 0x02441453 );
 800f60e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f612:	405a      	eors	r2, r3
 800f614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f616:	401a      	ands	r2, r3
 800f618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f61a:	405a      	eors	r2, r3
 800f61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f61e:	441a      	add	r2, r3
 800f620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f622:	441a      	add	r2, r3
 800f624:	4b80      	ldr	r3, [pc, #512]	; (800f828 <md5_process+0x848>)
 800f626:	4413      	add	r3, r2
 800f628:	64bb      	str	r3, [r7, #72]	; 0x48
 800f62a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f62c:	ea4f 52f3 	mov.w	r2, r3, ror #23
 800f630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f632:	4413      	add	r3, r2
 800f634:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
 800f636:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f63a:	405a      	eors	r2, r3
 800f63c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f63e:	401a      	ands	r2, r3
 800f640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f642:	405a      	eors	r2, r3
 800f644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f646:	441a      	add	r2, r3
 800f648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f64a:	441a      	add	r2, r3
 800f64c:	4b77      	ldr	r3, [pc, #476]	; (800f82c <md5_process+0x84c>)
 800f64e:	4413      	add	r3, r2
 800f650:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f654:	ea4f 42b3 	mov.w	r2, r3, ror #18
 800f658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f65a:	4413      	add	r3, r2
 800f65c:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
 800f65e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f662:	405a      	eors	r2, r3
 800f664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f666:	401a      	ands	r2, r3
 800f668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f66a:	405a      	eors	r2, r3
 800f66c:	69bb      	ldr	r3, [r7, #24]
 800f66e:	441a      	add	r2, r3
 800f670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f672:	441a      	add	r2, r3
 800f674:	4b6e      	ldr	r3, [pc, #440]	; (800f830 <md5_process+0x850>)
 800f676:	4413      	add	r3, r2
 800f678:	653b      	str	r3, [r7, #80]	; 0x50
 800f67a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f67c:	ea4f 3233 	mov.w	r2, r3, ror #12
 800f680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f682:	4413      	add	r3, r2
 800f684:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
 800f686:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f68a:	405a      	eors	r2, r3
 800f68c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f68e:	401a      	ands	r2, r3
 800f690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f692:	405a      	eors	r2, r3
 800f694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f696:	441a      	add	r2, r3
 800f698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f69a:	441a      	add	r2, r3
 800f69c:	4b65      	ldr	r3, [pc, #404]	; (800f834 <md5_process+0x854>)
 800f69e:	4413      	add	r3, r2
 800f6a0:	657b      	str	r3, [r7, #84]	; 0x54
 800f6a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6a4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800f6a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6aa:	4413      	add	r3, r2
 800f6ac:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 14,  9, 0xC33707D6 );
 800f6ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f6b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6b2:	405a      	eors	r2, r3
 800f6b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6b6:	401a      	ands	r2, r3
 800f6b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6ba:	405a      	eors	r2, r3
 800f6bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6be:	441a      	add	r2, r3
 800f6c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6c2:	441a      	add	r2, r3
 800f6c4:	4b5c      	ldr	r3, [pc, #368]	; (800f838 <md5_process+0x858>)
 800f6c6:	4413      	add	r3, r2
 800f6c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f6ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6cc:	ea4f 52f3 	mov.w	r2, r3, ror #23
 800f6d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6d2:	4413      	add	r3, r2
 800f6d4:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
 800f6d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f6d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6da:	405a      	eors	r2, r3
 800f6dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6de:	401a      	ands	r2, r3
 800f6e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6e2:	405a      	eors	r2, r3
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	441a      	add	r2, r3
 800f6e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6ea:	441a      	add	r2, r3
 800f6ec:	4b53      	ldr	r3, [pc, #332]	; (800f83c <md5_process+0x85c>)
 800f6ee:	4413      	add	r3, r2
 800f6f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f6f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6f4:	ea4f 42b3 	mov.w	r2, r3, ror #18
 800f6f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6fa:	4413      	add	r3, r2
 800f6fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  8, 20, 0x455A14ED );
 800f6fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f702:	405a      	eors	r2, r3
 800f704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f706:	401a      	ands	r2, r3
 800f708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f70a:	405a      	eors	r2, r3
 800f70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f70e:	441a      	add	r2, r3
 800f710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f712:	441a      	add	r2, r3
 800f714:	4b4a      	ldr	r3, [pc, #296]	; (800f840 <md5_process+0x860>)
 800f716:	4413      	add	r3, r2
 800f718:	653b      	str	r3, [r7, #80]	; 0x50
 800f71a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f71c:	ea4f 3233 	mov.w	r2, r3, ror #12
 800f720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f722:	4413      	add	r3, r2
 800f724:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
 800f726:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f72a:	405a      	eors	r2, r3
 800f72c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f72e:	401a      	ands	r2, r3
 800f730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f732:	405a      	eors	r2, r3
 800f734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f736:	441a      	add	r2, r3
 800f738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f73a:	441a      	add	r2, r3
 800f73c:	4b41      	ldr	r3, [pc, #260]	; (800f844 <md5_process+0x864>)
 800f73e:	4413      	add	r3, r2
 800f740:	657b      	str	r3, [r7, #84]	; 0x54
 800f742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f744:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800f748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f74a:	4413      	add	r3, r2
 800f74c:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
 800f74e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f752:	405a      	eors	r2, r3
 800f754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f756:	401a      	ands	r2, r3
 800f758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f75a:	405a      	eors	r2, r3
 800f75c:	693b      	ldr	r3, [r7, #16]
 800f75e:	441a      	add	r2, r3
 800f760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f762:	441a      	add	r2, r3
 800f764:	4b38      	ldr	r3, [pc, #224]	; (800f848 <md5_process+0x868>)
 800f766:	4413      	add	r3, r2
 800f768:	64bb      	str	r3, [r7, #72]	; 0x48
 800f76a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f76c:	ea4f 52f3 	mov.w	r2, r3, ror #23
 800f770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f772:	4413      	add	r3, r2
 800f774:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 14, 0x676F02D9 );
 800f776:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f77a:	405a      	eors	r2, r3
 800f77c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f77e:	401a      	ands	r2, r3
 800f780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f782:	405a      	eors	r2, r3
 800f784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f786:	441a      	add	r2, r3
 800f788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f78a:	441a      	add	r2, r3
 800f78c:	4b2f      	ldr	r3, [pc, #188]	; (800f84c <md5_process+0x86c>)
 800f78e:	4413      	add	r3, r2
 800f790:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f794:	ea4f 42b3 	mov.w	r2, r3, ror #18
 800f798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f79a:	4413      	add	r3, r2
 800f79c:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );
 800f79e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f7a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7a2:	405a      	eors	r2, r3
 800f7a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7a6:	401a      	ands	r2, r3
 800f7a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7aa:	405a      	eors	r2, r3
 800f7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ae:	441a      	add	r2, r3
 800f7b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7b2:	441a      	add	r2, r3
 800f7b4:	4b26      	ldr	r3, [pc, #152]	; (800f850 <md5_process+0x870>)
 800f7b6:	4413      	add	r3, r2
 800f7b8:	653b      	str	r3, [r7, #80]	; 0x50
 800f7ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7bc:	ea4f 3233 	mov.w	r2, r3, ror #12
 800f7c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7c2:	4413      	add	r3, r2
 800f7c4:	653b      	str	r3, [r7, #80]	; 0x50

#undef F
    
#define F(x,y,z) (x ^ y ^ z)

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
 800f7c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f7c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7ca:	405a      	eors	r2, r3
 800f7cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7ce:	405a      	eors	r2, r3
 800f7d0:	69fb      	ldr	r3, [r7, #28]
 800f7d2:	441a      	add	r2, r3
 800f7d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7d6:	4413      	add	r3, r2
 800f7d8:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
 800f7dc:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
 800f7e0:	657b      	str	r3, [r7, #84]	; 0x54
 800f7e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7e4:	ea4f 7233 	mov.w	r2, r3, ror #28
 800f7e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7ea:	4413      	add	r3, r2
 800f7ec:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  8, 11, 0x8771F681 );
 800f7ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f7f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7f2:	405a      	eors	r2, r3
 800f7f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7f6:	405a      	eors	r2, r3
 800f7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7fa:	441a      	add	r2, r3
 800f7fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7fe:	441a      	add	r2, r3
 800f800:	4b14      	ldr	r3, [pc, #80]	; (800f854 <md5_process+0x874>)
 800f802:	4413      	add	r3, r2
 800f804:	64bb      	str	r3, [r7, #72]	; 0x48
 800f806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f808:	ea4f 5273 	mov.w	r2, r3, ror #21
 800f80c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f80e:	4413      	add	r3, r2
 800f810:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
 800f812:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f814:	e020      	b.n	800f858 <md5_process+0x878>
 800f816:	bf00      	nop
 800f818:	c040b340 	.word	0xc040b340
 800f81c:	265e5a51 	.word	0x265e5a51
 800f820:	e9b6c7aa 	.word	0xe9b6c7aa
 800f824:	d62f105d 	.word	0xd62f105d
 800f828:	02441453 	.word	0x02441453
 800f82c:	d8a1e681 	.word	0xd8a1e681
 800f830:	e7d3fbc8 	.word	0xe7d3fbc8
 800f834:	21e1cde6 	.word	0x21e1cde6
 800f838:	c33707d6 	.word	0xc33707d6
 800f83c:	f4d50d87 	.word	0xf4d50d87
 800f840:	455a14ed 	.word	0x455a14ed
 800f844:	a9e3e905 	.word	0xa9e3e905
 800f848:	fcefa3f8 	.word	0xfcefa3f8
 800f84c:	676f02d9 	.word	0x676f02d9
 800f850:	8d2a4c8a 	.word	0x8d2a4c8a
 800f854:	8771f681 	.word	0x8771f681
 800f858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f85a:	405a      	eors	r2, r3
 800f85c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f85e:	405a      	eors	r2, r3
 800f860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f862:	441a      	add	r2, r3
 800f864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f866:	441a      	add	r2, r3
 800f868:	4ba4      	ldr	r3, [pc, #656]	; (800fafc <md5_process+0xb1c>)
 800f86a:	4413      	add	r3, r2
 800f86c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f86e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f870:	ea4f 4233 	mov.w	r2, r3, ror #16
 800f874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f876:	4413      	add	r3, r2
 800f878:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 14, 23, 0xFDE5380C );
 800f87a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f87c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f87e:	405a      	eors	r2, r3
 800f880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f882:	405a      	eors	r2, r3
 800f884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f886:	441a      	add	r2, r3
 800f888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f88a:	441a      	add	r2, r3
 800f88c:	4b9c      	ldr	r3, [pc, #624]	; (800fb00 <md5_process+0xb20>)
 800f88e:	4413      	add	r3, r2
 800f890:	653b      	str	r3, [r7, #80]	; 0x50
 800f892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f894:	ea4f 2273 	mov.w	r2, r3, ror #9
 800f898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f89a:	4413      	add	r3, r2
 800f89c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
 800f89e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f8a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8a2:	405a      	eors	r2, r3
 800f8a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8a6:	405a      	eors	r2, r3
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	441a      	add	r2, r3
 800f8ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8ae:	441a      	add	r2, r3
 800f8b0:	4b94      	ldr	r3, [pc, #592]	; (800fb04 <md5_process+0xb24>)
 800f8b2:	4413      	add	r3, r2
 800f8b4:	657b      	str	r3, [r7, #84]	; 0x54
 800f8b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8b8:	ea4f 7233 	mov.w	r2, r3, ror #28
 800f8bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8be:	4413      	add	r3, r2
 800f8c0:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
 800f8c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f8c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8c6:	405a      	eors	r2, r3
 800f8c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8ca:	405a      	eors	r2, r3
 800f8cc:	69bb      	ldr	r3, [r7, #24]
 800f8ce:	441a      	add	r2, r3
 800f8d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8d2:	441a      	add	r2, r3
 800f8d4:	4b8c      	ldr	r3, [pc, #560]	; (800fb08 <md5_process+0xb28>)
 800f8d6:	4413      	add	r3, r2
 800f8d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f8da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8dc:	ea4f 5273 	mov.w	r2, r3, ror #21
 800f8e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8e2:	4413      	add	r3, r2
 800f8e4:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
 800f8e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8ea:	405a      	eors	r2, r3
 800f8ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8ee:	405a      	eors	r2, r3
 800f8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f2:	441a      	add	r2, r3
 800f8f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8f6:	441a      	add	r2, r3
 800f8f8:	4b84      	ldr	r3, [pc, #528]	; (800fb0c <md5_process+0xb2c>)
 800f8fa:	4413      	add	r3, r2
 800f8fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f8fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f900:	ea4f 4233 	mov.w	r2, r3, ror #16
 800f904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f906:	4413      	add	r3, r2
 800f908:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
 800f90a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f90c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f90e:	405a      	eors	r2, r3
 800f910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f912:	405a      	eors	r2, r3
 800f914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f916:	441a      	add	r2, r3
 800f918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f91a:	441a      	add	r2, r3
 800f91c:	4b7c      	ldr	r3, [pc, #496]	; (800fb10 <md5_process+0xb30>)
 800f91e:	4413      	add	r3, r2
 800f920:	653b      	str	r3, [r7, #80]	; 0x50
 800f922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f924:	ea4f 2273 	mov.w	r2, r3, ror #9
 800f928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f92a:	4413      	add	r3, r2
 800f92c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
 800f92e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f932:	405a      	eors	r2, r3
 800f934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f936:	405a      	eors	r2, r3
 800f938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f93a:	441a      	add	r2, r3
 800f93c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f93e:	441a      	add	r2, r3
 800f940:	4b74      	ldr	r3, [pc, #464]	; (800fb14 <md5_process+0xb34>)
 800f942:	4413      	add	r3, r2
 800f944:	657b      	str	r3, [r7, #84]	; 0x54
 800f946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f948:	ea4f 7233 	mov.w	r2, r3, ror #28
 800f94c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f94e:	4413      	add	r3, r2
 800f950:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  0, 11, 0xEAA127FA );
 800f952:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f956:	405a      	eors	r2, r3
 800f958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f95a:	405a      	eors	r2, r3
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	441a      	add	r2, r3
 800f960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f962:	441a      	add	r2, r3
 800f964:	4b6c      	ldr	r3, [pc, #432]	; (800fb18 <md5_process+0xb38>)
 800f966:	4413      	add	r3, r2
 800f968:	64bb      	str	r3, [r7, #72]	; 0x48
 800f96a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f96c:	ea4f 5273 	mov.w	r2, r3, ror #21
 800f970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f972:	4413      	add	r3, r2
 800f974:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
 800f976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f97a:	405a      	eors	r2, r3
 800f97c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f97e:	405a      	eors	r2, r3
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	441a      	add	r2, r3
 800f984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f986:	441a      	add	r2, r3
 800f988:	4b64      	ldr	r3, [pc, #400]	; (800fb1c <md5_process+0xb3c>)
 800f98a:	4413      	add	r3, r2
 800f98c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f98e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f990:	ea4f 4233 	mov.w	r2, r3, ror #16
 800f994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f996:	4413      	add	r3, r2
 800f998:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  6, 23, 0x04881D05 );
 800f99a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f99c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f99e:	405a      	eors	r2, r3
 800f9a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9a2:	405a      	eors	r2, r3
 800f9a4:	6a3b      	ldr	r3, [r7, #32]
 800f9a6:	441a      	add	r2, r3
 800f9a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9aa:	441a      	add	r2, r3
 800f9ac:	4b5c      	ldr	r3, [pc, #368]	; (800fb20 <md5_process+0xb40>)
 800f9ae:	4413      	add	r3, r2
 800f9b0:	653b      	str	r3, [r7, #80]	; 0x50
 800f9b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9b4:	ea4f 2273 	mov.w	r2, r3, ror #9
 800f9b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9ba:	4413      	add	r3, r2
 800f9bc:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
 800f9be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f9c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9c2:	405a      	eors	r2, r3
 800f9c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9c6:	405a      	eors	r2, r3
 800f9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ca:	441a      	add	r2, r3
 800f9cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9ce:	441a      	add	r2, r3
 800f9d0:	4b54      	ldr	r3, [pc, #336]	; (800fb24 <md5_process+0xb44>)
 800f9d2:	4413      	add	r3, r2
 800f9d4:	657b      	str	r3, [r7, #84]	; 0x54
 800f9d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9d8:	ea4f 7233 	mov.w	r2, r3, ror #28
 800f9dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9de:	4413      	add	r3, r2
 800f9e0:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
 800f9e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f9e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9e6:	405a      	eors	r2, r3
 800f9e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9ea:	405a      	eors	r2, r3
 800f9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ee:	441a      	add	r2, r3
 800f9f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9f2:	441a      	add	r2, r3
 800f9f4:	4b4c      	ldr	r3, [pc, #304]	; (800fb28 <md5_process+0xb48>)
 800f9f6:	4413      	add	r3, r2
 800f9f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9fc:	ea4f 5273 	mov.w	r2, r3, ror #21
 800fa00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa02:	4413      	add	r3, r2
 800fa04:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
 800fa06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa0a:	405a      	eors	r2, r3
 800fa0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa0e:	405a      	eors	r2, r3
 800fa10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa12:	441a      	add	r2, r3
 800fa14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa16:	441a      	add	r2, r3
 800fa18:	4b44      	ldr	r3, [pc, #272]	; (800fb2c <md5_process+0xb4c>)
 800fa1a:	4413      	add	r3, r2
 800fa1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fa1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa20:	ea4f 4233 	mov.w	r2, r3, ror #16
 800fa24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa26:	4413      	add	r3, r2
 800fa28:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  2, 23, 0xC4AC5665 );
 800fa2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fa2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa2e:	405a      	eors	r2, r3
 800fa30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa32:	405a      	eors	r2, r3
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	441a      	add	r2, r3
 800fa38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa3a:	441a      	add	r2, r3
 800fa3c:	4b3c      	ldr	r3, [pc, #240]	; (800fb30 <md5_process+0xb50>)
 800fa3e:	4413      	add	r3, r2
 800fa40:	653b      	str	r3, [r7, #80]	; 0x50
 800fa42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa44:	ea4f 2273 	mov.w	r2, r3, ror #9
 800fa48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa4a:	4413      	add	r3, r2
 800fa4c:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) (y ^ (x | ~z))

    P( A, B, C, D,  0,  6, 0xF4292244 );
 800fa4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa50:	43da      	mvns	r2, r3
 800fa52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa54:	431a      	orrs	r2, r3
 800fa56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa58:	405a      	eors	r2, r3
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	441a      	add	r2, r3
 800fa5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa60:	441a      	add	r2, r3
 800fa62:	4b34      	ldr	r3, [pc, #208]	; (800fb34 <md5_process+0xb54>)
 800fa64:	4413      	add	r3, r2
 800fa66:	657b      	str	r3, [r7, #84]	; 0x54
 800fa68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa6a:	ea4f 62b3 	mov.w	r2, r3, ror #26
 800fa6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa70:	4413      	add	r3, r2
 800fa72:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  7, 10, 0x432AFF97 );
 800fa74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa76:	43da      	mvns	r2, r3
 800fa78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa7a:	431a      	orrs	r2, r3
 800fa7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa7e:	405a      	eors	r2, r3
 800fa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa82:	441a      	add	r2, r3
 800fa84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa86:	441a      	add	r2, r3
 800fa88:	4b2b      	ldr	r3, [pc, #172]	; (800fb38 <md5_process+0xb58>)
 800fa8a:	4413      	add	r3, r2
 800fa8c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa90:	ea4f 52b3 	mov.w	r2, r3, ror #22
 800fa94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa96:	4413      	add	r3, r2
 800fa98:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
 800fa9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa9c:	43da      	mvns	r2, r3
 800fa9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faa0:	431a      	orrs	r2, r3
 800faa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800faa4:	405a      	eors	r2, r3
 800faa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faa8:	441a      	add	r2, r3
 800faaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800faac:	441a      	add	r2, r3
 800faae:	4b23      	ldr	r3, [pc, #140]	; (800fb3c <md5_process+0xb5c>)
 800fab0:	4413      	add	r3, r2
 800fab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fab6:	ea4f 4273 	mov.w	r2, r3, ror #17
 800faba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fabc:	4413      	add	r3, r2
 800fabe:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  5, 21, 0xFC93A039 );
 800fac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fac2:	43da      	mvns	r2, r3
 800fac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fac6:	431a      	orrs	r2, r3
 800fac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faca:	405a      	eors	r2, r3
 800facc:	69fb      	ldr	r3, [r7, #28]
 800face:	441a      	add	r2, r3
 800fad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fad2:	441a      	add	r2, r3
 800fad4:	4b1a      	ldr	r3, [pc, #104]	; (800fb40 <md5_process+0xb60>)
 800fad6:	4413      	add	r3, r2
 800fad8:	653b      	str	r3, [r7, #80]	; 0x50
 800fada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fadc:	ea4f 22f3 	mov.w	r2, r3, ror #11
 800fae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fae2:	4413      	add	r3, r2
 800fae4:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  6, 0x655B59C3 );
 800fae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fae8:	43da      	mvns	r2, r3
 800faea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800faec:	431a      	orrs	r2, r3
 800faee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800faf0:	405a      	eors	r2, r3
 800faf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf4:	441a      	add	r2, r3
 800faf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800faf8:	e024      	b.n	800fb44 <md5_process+0xb64>
 800fafa:	bf00      	nop
 800fafc:	6d9d6122 	.word	0x6d9d6122
 800fb00:	fde5380c 	.word	0xfde5380c
 800fb04:	a4beea44 	.word	0xa4beea44
 800fb08:	4bdecfa9 	.word	0x4bdecfa9
 800fb0c:	f6bb4b60 	.word	0xf6bb4b60
 800fb10:	bebfbc70 	.word	0xbebfbc70
 800fb14:	289b7ec6 	.word	0x289b7ec6
 800fb18:	eaa127fa 	.word	0xeaa127fa
 800fb1c:	d4ef3085 	.word	0xd4ef3085
 800fb20:	04881d05 	.word	0x04881d05
 800fb24:	d9d4d039 	.word	0xd9d4d039
 800fb28:	e6db99e5 	.word	0xe6db99e5
 800fb2c:	1fa27cf8 	.word	0x1fa27cf8
 800fb30:	c4ac5665 	.word	0xc4ac5665
 800fb34:	f4292244 	.word	0xf4292244
 800fb38:	432aff97 	.word	0x432aff97
 800fb3c:	ab9423a7 	.word	0xab9423a7
 800fb40:	fc93a039 	.word	0xfc93a039
 800fb44:	441a      	add	r2, r3
 800fb46:	4b7d      	ldr	r3, [pc, #500]	; (800fd3c <md5_process+0xd5c>)
 800fb48:	4413      	add	r3, r2
 800fb4a:	657b      	str	r3, [r7, #84]	; 0x54
 800fb4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb4e:	ea4f 62b3 	mov.w	r2, r3, ror #26
 800fb52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb54:	4413      	add	r3, r2
 800fb56:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
 800fb58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb5a:	43da      	mvns	r2, r3
 800fb5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb5e:	431a      	orrs	r2, r3
 800fb60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb62:	405a      	eors	r2, r3
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	441a      	add	r2, r3
 800fb68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb6a:	441a      	add	r2, r3
 800fb6c:	4b74      	ldr	r3, [pc, #464]	; (800fd40 <md5_process+0xd60>)
 800fb6e:	4413      	add	r3, r2
 800fb70:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb74:	ea4f 52b3 	mov.w	r2, r3, ror #22
 800fb78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb7a:	4413      	add	r3, r2
 800fb7c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
 800fb7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb80:	43da      	mvns	r2, r3
 800fb82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb84:	431a      	orrs	r2, r3
 800fb86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb88:	405a      	eors	r2, r3
 800fb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb8c:	441a      	add	r2, r3
 800fb8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb90:	4413      	add	r3, r2
 800fb92:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fb96:	f6a3 3383 	subw	r3, r3, #2947	; 0xb83
 800fb9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb9e:	ea4f 4273 	mov.w	r2, r3, ror #17
 800fba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fba4:	4413      	add	r3, r2
 800fba6:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  1, 21, 0x85845DD1 );
 800fba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbaa:	43da      	mvns	r2, r3
 800fbac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbae:	431a      	orrs	r2, r3
 800fbb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbb2:	405a      	eors	r2, r3
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	441a      	add	r2, r3
 800fbb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbba:	441a      	add	r2, r3
 800fbbc:	4b61      	ldr	r3, [pc, #388]	; (800fd44 <md5_process+0xd64>)
 800fbbe:	4413      	add	r3, r2
 800fbc0:	653b      	str	r3, [r7, #80]	; 0x50
 800fbc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbc4:	ea4f 22f3 	mov.w	r2, r3, ror #11
 800fbc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbca:	4413      	add	r3, r2
 800fbcc:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
 800fbce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbd0:	43da      	mvns	r2, r3
 800fbd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbd4:	431a      	orrs	r2, r3
 800fbd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbd8:	405a      	eors	r2, r3
 800fbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbdc:	441a      	add	r2, r3
 800fbde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbe0:	441a      	add	r2, r3
 800fbe2:	4b59      	ldr	r3, [pc, #356]	; (800fd48 <md5_process+0xd68>)
 800fbe4:	4413      	add	r3, r2
 800fbe6:	657b      	str	r3, [r7, #84]	; 0x54
 800fbe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbea:	ea4f 62b3 	mov.w	r2, r3, ror #26
 800fbee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbf0:	4413      	add	r3, r2
 800fbf2:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
 800fbf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbf6:	43da      	mvns	r2, r3
 800fbf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbfa:	431a      	orrs	r2, r3
 800fbfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbfe:	405a      	eors	r2, r3
 800fc00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc02:	441a      	add	r2, r3
 800fc04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc06:	441a      	add	r2, r3
 800fc08:	4b50      	ldr	r3, [pc, #320]	; (800fd4c <md5_process+0xd6c>)
 800fc0a:	4413      	add	r3, r2
 800fc0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc10:	ea4f 52b3 	mov.w	r2, r3, ror #22
 800fc14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc16:	4413      	add	r3, r2
 800fc18:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 15, 0xA3014314 );
 800fc1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc1c:	43da      	mvns	r2, r3
 800fc1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc20:	431a      	orrs	r2, r3
 800fc22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc24:	405a      	eors	r2, r3
 800fc26:	6a3b      	ldr	r3, [r7, #32]
 800fc28:	441a      	add	r2, r3
 800fc2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc2c:	441a      	add	r2, r3
 800fc2e:	4b48      	ldr	r3, [pc, #288]	; (800fd50 <md5_process+0xd70>)
 800fc30:	4413      	add	r3, r2
 800fc32:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc36:	ea4f 4273 	mov.w	r2, r3, ror #17
 800fc3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc3c:	4413      	add	r3, r2
 800fc3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
 800fc40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc42:	43da      	mvns	r2, r3
 800fc44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc46:	431a      	orrs	r2, r3
 800fc48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc4a:	405a      	eors	r2, r3
 800fc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc4e:	441a      	add	r2, r3
 800fc50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc52:	441a      	add	r2, r3
 800fc54:	4b3f      	ldr	r3, [pc, #252]	; (800fd54 <md5_process+0xd74>)
 800fc56:	4413      	add	r3, r2
 800fc58:	653b      	str	r3, [r7, #80]	; 0x50
 800fc5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc5c:	ea4f 22f3 	mov.w	r2, r3, ror #11
 800fc60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc62:	4413      	add	r3, r2
 800fc64:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  6, 0xF7537E82 );
 800fc66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc68:	43da      	mvns	r2, r3
 800fc6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc6c:	431a      	orrs	r2, r3
 800fc6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc70:	405a      	eors	r2, r3
 800fc72:	69bb      	ldr	r3, [r7, #24]
 800fc74:	441a      	add	r2, r3
 800fc76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc78:	441a      	add	r2, r3
 800fc7a:	4b37      	ldr	r3, [pc, #220]	; (800fd58 <md5_process+0xd78>)
 800fc7c:	4413      	add	r3, r2
 800fc7e:	657b      	str	r3, [r7, #84]	; 0x54
 800fc80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc82:	ea4f 62b3 	mov.w	r2, r3, ror #26
 800fc86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc88:	4413      	add	r3, r2
 800fc8a:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
 800fc8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc8e:	43da      	mvns	r2, r3
 800fc90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc92:	431a      	orrs	r2, r3
 800fc94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc96:	405a      	eors	r2, r3
 800fc98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc9a:	441a      	add	r2, r3
 800fc9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc9e:	441a      	add	r2, r3
 800fca0:	4b2e      	ldr	r3, [pc, #184]	; (800fd5c <md5_process+0xd7c>)
 800fca2:	4413      	add	r3, r2
 800fca4:	64bb      	str	r3, [r7, #72]	; 0x48
 800fca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fca8:	ea4f 52b3 	mov.w	r2, r3, ror #22
 800fcac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcae:	4413      	add	r3, r2
 800fcb0:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 800fcb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcb4:	43da      	mvns	r2, r3
 800fcb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcb8:	431a      	orrs	r2, r3
 800fcba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcbc:	405a      	eors	r2, r3
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	441a      	add	r2, r3
 800fcc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcc4:	441a      	add	r2, r3
 800fcc6:	4b26      	ldr	r3, [pc, #152]	; (800fd60 <md5_process+0xd80>)
 800fcc8:	4413      	add	r3, r2
 800fcca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcce:	ea4f 4273 	mov.w	r2, r3, ror #17
 800fcd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcd4:	4413      	add	r3, r2
 800fcd6:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 800fcd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcda:	43da      	mvns	r2, r3
 800fcdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcde:	431a      	orrs	r2, r3
 800fce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fce2:	405a      	eors	r2, r3
 800fce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce6:	441a      	add	r2, r3
 800fce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcea:	441a      	add	r2, r3
 800fcec:	4b1d      	ldr	r3, [pc, #116]	; (800fd64 <md5_process+0xd84>)
 800fcee:	4413      	add	r3, r2
 800fcf0:	653b      	str	r3, [r7, #80]	; 0x50
 800fcf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcf4:	ea4f 22f3 	mov.w	r2, r3, ror #11
 800fcf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcfa:	4413      	add	r3, r2
 800fcfc:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

    ctx->state[0] += A;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	689a      	ldr	r2, [r3, #8]
 800fd02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd04:	441a      	add	r2, r3
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	609a      	str	r2, [r3, #8]
    ctx->state[1] += B;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	68da      	ldr	r2, [r3, #12]
 800fd0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd10:	441a      	add	r2, r3
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	60da      	str	r2, [r3, #12]
    ctx->state[2] += C;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	691a      	ldr	r2, [r3, #16]
 800fd1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd1c:	441a      	add	r2, r3
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	611a      	str	r2, [r3, #16]
    ctx->state[3] += D;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	695a      	ldr	r2, [r3, #20]
 800fd26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd28:	441a      	add	r2, r3
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	615a      	str	r2, [r3, #20]
}
 800fd2e:	bf00      	nop
 800fd30:	375c      	adds	r7, #92	; 0x5c
 800fd32:	46bd      	mov	sp, r7
 800fd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd38:	4770      	bx	lr
 800fd3a:	bf00      	nop
 800fd3c:	655b59c3 	.word	0x655b59c3
 800fd40:	8f0ccc92 	.word	0x8f0ccc92
 800fd44:	85845dd1 	.word	0x85845dd1
 800fd48:	6fa87e4f 	.word	0x6fa87e4f
 800fd4c:	fe2ce6e0 	.word	0xfe2ce6e0
 800fd50:	a3014314 	.word	0xa3014314
 800fd54:	4e0811a1 	.word	0x4e0811a1
 800fd58:	f7537e82 	.word	0xf7537e82
 800fd5c:	bd3af235 	.word	0xbd3af235
 800fd60:	2ad7d2bb 	.word	0x2ad7d2bb
 800fd64:	eb86d391 	.word	0xeb86d391

0800fd68 <md5_update>:

/*
 * MD5 process buffer
 */
void md5_update( md5_context *ctx, const unsigned char *input, int ilen )
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b086      	sub	sp, #24
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	60f8      	str	r0, [r7, #12]
 800fd70:	60b9      	str	r1, [r7, #8]
 800fd72:	607a      	str	r2, [r7, #4]
    int fill;
    unsigned long left;

    if( ilen <= 0 )
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	dd59      	ble.n	800fe2e <md5_update+0xc6>
        return;

    left = ctx->total[0] & 0x3F;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd82:	617b      	str	r3, [r7, #20]
    fill = 64 - left;
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800fd8a:	613b      	str	r3, [r7, #16]

    ctx->total[0] += ilen;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	681a      	ldr	r2, [r3, #0]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	441a      	add	r2, r3
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (unsigned long) ilen )
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681a      	ldr	r2, [r3, #0]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d204      	bcs.n	800fdb4 <md5_update+0x4c>
        ctx->total[1]++;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	685b      	ldr	r3, [r3, #4]
 800fdae:	1c5a      	adds	r2, r3, #1
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d028      	beq.n	800fe0c <md5_update+0xa4>
 800fdba:	687a      	ldr	r2, [r7, #4]
 800fdbc:	693b      	ldr	r3, [r7, #16]
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	db24      	blt.n	800fe0c <md5_update+0xa4>
    {
        MEMCPY( (void *) (ctx->buffer + left),
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	f103 0218 	add.w	r2, r3, #24
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	4413      	add	r3, r2
 800fdcc:	693a      	ldr	r2, [r7, #16]
 800fdce:	68b9      	ldr	r1, [r7, #8]
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f002 fcb3 	bl	801273c <memcpy>
                input, fill );
        md5_process( ctx, ctx->buffer );
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	3318      	adds	r3, #24
 800fdda:	4619      	mov	r1, r3
 800fddc:	68f8      	ldr	r0, [r7, #12]
 800fdde:	f7ff f8ff 	bl	800efe0 <md5_process>
        input += fill;
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	68ba      	ldr	r2, [r7, #8]
 800fde6:	4413      	add	r3, r2
 800fde8:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	1ad3      	subs	r3, r2, r3
 800fdf0:	607b      	str	r3, [r7, #4]
        left = 0;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	617b      	str	r3, [r7, #20]
    }

    while( ilen >= 64 )
 800fdf6:	e009      	b.n	800fe0c <md5_update+0xa4>
    {
        md5_process( ctx, input );
 800fdf8:	68b9      	ldr	r1, [r7, #8]
 800fdfa:	68f8      	ldr	r0, [r7, #12]
 800fdfc:	f7ff f8f0 	bl	800efe0 <md5_process>
        input += 64;
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	3340      	adds	r3, #64	; 0x40
 800fe04:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	3b40      	subs	r3, #64	; 0x40
 800fe0a:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2b3f      	cmp	r3, #63	; 0x3f
 800fe10:	dcf2      	bgt.n	800fdf8 <md5_update+0x90>
    }

    if( ilen > 0 )
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	dd0b      	ble.n	800fe30 <md5_update+0xc8>
    {
        MEMCPY( (void *) (ctx->buffer + left),
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f103 0218 	add.w	r2, r3, #24
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	4413      	add	r3, r2
 800fe22:	687a      	ldr	r2, [r7, #4]
 800fe24:	68b9      	ldr	r1, [r7, #8]
 800fe26:	4618      	mov	r0, r3
 800fe28:	f002 fc88 	bl	801273c <memcpy>
 800fe2c:	e000      	b.n	800fe30 <md5_update+0xc8>
        return;
 800fe2e:	bf00      	nop
                input, ilen );
    }
}
 800fe30:	3718      	adds	r7, #24
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}
	...

0800fe38 <md5_finish>:

/*
 * MD5 final digest
 */
void md5_finish( md5_context *ctx, unsigned char output[16] )
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b088      	sub	sp, #32
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	6039      	str	r1, [r7, #0]
    unsigned long last, padn;
    unsigned long high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	61fb      	str	r3, [r7, #28]
    low  = ( ctx->total[0] <<  3 );
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	00db      	lsls	r3, r3, #3
 800fe58:	61bb      	str	r3, [r7, #24]

    PUT_ULONG_LE( low,  msglen, 0 );
 800fe5a:	69bb      	ldr	r3, [r7, #24]
 800fe5c:	b2db      	uxtb	r3, r3
 800fe5e:	723b      	strb	r3, [r7, #8]
 800fe60:	69bb      	ldr	r3, [r7, #24]
 800fe62:	0a1b      	lsrs	r3, r3, #8
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	727b      	strb	r3, [r7, #9]
 800fe68:	69bb      	ldr	r3, [r7, #24]
 800fe6a:	0c1b      	lsrs	r3, r3, #16
 800fe6c:	b2db      	uxtb	r3, r3
 800fe6e:	72bb      	strb	r3, [r7, #10]
 800fe70:	69bb      	ldr	r3, [r7, #24]
 800fe72:	0e1b      	lsrs	r3, r3, #24
 800fe74:	b2db      	uxtb	r3, r3
 800fe76:	72fb      	strb	r3, [r7, #11]
    PUT_ULONG_LE( high, msglen, 4 );
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	b2db      	uxtb	r3, r3
 800fe7c:	733b      	strb	r3, [r7, #12]
 800fe7e:	69fb      	ldr	r3, [r7, #28]
 800fe80:	0a1b      	lsrs	r3, r3, #8
 800fe82:	b2db      	uxtb	r3, r3
 800fe84:	737b      	strb	r3, [r7, #13]
 800fe86:	69fb      	ldr	r3, [r7, #28]
 800fe88:	0c1b      	lsrs	r3, r3, #16
 800fe8a:	b2db      	uxtb	r3, r3
 800fe8c:	73bb      	strb	r3, [r7, #14]
 800fe8e:	69fb      	ldr	r3, [r7, #28]
 800fe90:	0e1b      	lsrs	r3, r3, #24
 800fe92:	b2db      	uxtb	r3, r3
 800fe94:	73fb      	strb	r3, [r7, #15]

    last = ctx->total[0] & 0x3F;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe9e:	617b      	str	r3, [r7, #20]
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	2b37      	cmp	r3, #55	; 0x37
 800fea4:	d803      	bhi.n	800feae <md5_finish+0x76>
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800feac:	e002      	b.n	800feb4 <md5_finish+0x7c>
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 800feb4:	613b      	str	r3, [r7, #16]

    md5_update( ctx, md5_padding, padn );
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	461a      	mov	r2, r3
 800feba:	493d      	ldr	r1, [pc, #244]	; (800ffb0 <md5_finish+0x178>)
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f7ff ff53 	bl	800fd68 <md5_update>
    md5_update( ctx, msglen, 8 );
 800fec2:	f107 0308 	add.w	r3, r7, #8
 800fec6:	2208      	movs	r2, #8
 800fec8:	4619      	mov	r1, r3
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f7ff ff4c 	bl	800fd68 <md5_update>

    PUT_ULONG_LE( ctx->state[0], output,  0 );
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	689b      	ldr	r3, [r3, #8]
 800fed4:	b2da      	uxtb	r2, r3
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	701a      	strb	r2, [r3, #0]
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	3301      	adds	r3, #1
 800fede:	687a      	ldr	r2, [r7, #4]
 800fee0:	6892      	ldr	r2, [r2, #8]
 800fee2:	0a12      	lsrs	r2, r2, #8
 800fee4:	b2d2      	uxtb	r2, r2
 800fee6:	701a      	strb	r2, [r3, #0]
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	3302      	adds	r3, #2
 800feec:	687a      	ldr	r2, [r7, #4]
 800feee:	6892      	ldr	r2, [r2, #8]
 800fef0:	0c12      	lsrs	r2, r2, #16
 800fef2:	b2d2      	uxtb	r2, r2
 800fef4:	701a      	strb	r2, [r3, #0]
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	3303      	adds	r3, #3
 800fefa:	687a      	ldr	r2, [r7, #4]
 800fefc:	6892      	ldr	r2, [r2, #8]
 800fefe:	0e12      	lsrs	r2, r2, #24
 800ff00:	b2d2      	uxtb	r2, r2
 800ff02:	701a      	strb	r2, [r3, #0]
    PUT_ULONG_LE( ctx->state[1], output,  4 );
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	3304      	adds	r3, #4
 800ff08:	687a      	ldr	r2, [r7, #4]
 800ff0a:	68d2      	ldr	r2, [r2, #12]
 800ff0c:	b2d2      	uxtb	r2, r2
 800ff0e:	701a      	strb	r2, [r3, #0]
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	3305      	adds	r3, #5
 800ff14:	687a      	ldr	r2, [r7, #4]
 800ff16:	68d2      	ldr	r2, [r2, #12]
 800ff18:	0a12      	lsrs	r2, r2, #8
 800ff1a:	b2d2      	uxtb	r2, r2
 800ff1c:	701a      	strb	r2, [r3, #0]
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	3306      	adds	r3, #6
 800ff22:	687a      	ldr	r2, [r7, #4]
 800ff24:	68d2      	ldr	r2, [r2, #12]
 800ff26:	0c12      	lsrs	r2, r2, #16
 800ff28:	b2d2      	uxtb	r2, r2
 800ff2a:	701a      	strb	r2, [r3, #0]
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	3307      	adds	r3, #7
 800ff30:	687a      	ldr	r2, [r7, #4]
 800ff32:	68d2      	ldr	r2, [r2, #12]
 800ff34:	0e12      	lsrs	r2, r2, #24
 800ff36:	b2d2      	uxtb	r2, r2
 800ff38:	701a      	strb	r2, [r3, #0]
    PUT_ULONG_LE( ctx->state[2], output,  8 );
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	3308      	adds	r3, #8
 800ff3e:	687a      	ldr	r2, [r7, #4]
 800ff40:	6912      	ldr	r2, [r2, #16]
 800ff42:	b2d2      	uxtb	r2, r2
 800ff44:	701a      	strb	r2, [r3, #0]
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	3309      	adds	r3, #9
 800ff4a:	687a      	ldr	r2, [r7, #4]
 800ff4c:	6912      	ldr	r2, [r2, #16]
 800ff4e:	0a12      	lsrs	r2, r2, #8
 800ff50:	b2d2      	uxtb	r2, r2
 800ff52:	701a      	strb	r2, [r3, #0]
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	330a      	adds	r3, #10
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	6912      	ldr	r2, [r2, #16]
 800ff5c:	0c12      	lsrs	r2, r2, #16
 800ff5e:	b2d2      	uxtb	r2, r2
 800ff60:	701a      	strb	r2, [r3, #0]
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	330b      	adds	r3, #11
 800ff66:	687a      	ldr	r2, [r7, #4]
 800ff68:	6912      	ldr	r2, [r2, #16]
 800ff6a:	0e12      	lsrs	r2, r2, #24
 800ff6c:	b2d2      	uxtb	r2, r2
 800ff6e:	701a      	strb	r2, [r3, #0]
    PUT_ULONG_LE( ctx->state[3], output, 12 );
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	330c      	adds	r3, #12
 800ff74:	687a      	ldr	r2, [r7, #4]
 800ff76:	6952      	ldr	r2, [r2, #20]
 800ff78:	b2d2      	uxtb	r2, r2
 800ff7a:	701a      	strb	r2, [r3, #0]
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	330d      	adds	r3, #13
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	6952      	ldr	r2, [r2, #20]
 800ff84:	0a12      	lsrs	r2, r2, #8
 800ff86:	b2d2      	uxtb	r2, r2
 800ff88:	701a      	strb	r2, [r3, #0]
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	330e      	adds	r3, #14
 800ff8e:	687a      	ldr	r2, [r7, #4]
 800ff90:	6952      	ldr	r2, [r2, #20]
 800ff92:	0c12      	lsrs	r2, r2, #16
 800ff94:	b2d2      	uxtb	r2, r2
 800ff96:	701a      	strb	r2, [r3, #0]
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	330f      	adds	r3, #15
 800ff9c:	687a      	ldr	r2, [r7, #4]
 800ff9e:	6952      	ldr	r2, [r2, #20]
 800ffa0:	0e12      	lsrs	r2, r2, #24
 800ffa2:	b2d2      	uxtb	r2, r2
 800ffa4:	701a      	strb	r2, [r3, #0]
}
 800ffa6:	bf00      	nop
 800ffa8:	3720      	adds	r7, #32
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}
 800ffae:	bf00      	nop
 800ffb0:	08015c0c 	.word	0x08015c0c

0800ffb4 <ppp_connect>:
 * the connection.
 *
 * If this port connects to a modem, the modem connection must be
 * established before calling this.
 */
err_t ppp_connect(ppp_pcb *pcb, u16_t holdoff) {
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	460b      	mov	r3, r1
 800ffbe:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb->phase != PPP_PHASE_DEAD) {
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d002      	beq.n	800ffd0 <ppp_connect+0x1c>
    return ERR_ALREADY;
 800ffca:	f06f 0308 	mvn.w	r3, #8
 800ffce:	e018      	b.n	8010002 <ppp_connect+0x4e>
  }

  PPPDEBUG(LOG_DEBUG, ("ppp_connect[%d]: holdoff=%d\n", pcb->netif->num, holdoff));

  magic_randomize();
 800ffd0:	f7fe ff86 	bl	800eee0 <magic_randomize>

  if (holdoff == 0) {
 800ffd4:	887b      	ldrh	r3, [r7, #2]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d104      	bne.n	800ffe4 <ppp_connect+0x30>
    ppp_do_connect(pcb);
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f000 f818 	bl	8010010 <ppp_do_connect>
    return ERR_OK;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	e00e      	b.n	8010002 <ppp_connect+0x4e>
  }

  new_phase(pcb, PPP_PHASE_HOLDOFF);
 800ffe4:	2102      	movs	r1, #2
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f000 fa32 	bl	8010450 <new_phase>
  sys_timeout((u32_t)(holdoff*1000), ppp_do_connect, pcb);
 800ffec:	887b      	ldrh	r3, [r7, #2]
 800ffee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fff2:	fb02 f303 	mul.w	r3, r2, r3
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	4904      	ldr	r1, [pc, #16]	; (801000c <ppp_connect+0x58>)
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7f9 fc64 	bl	80098c8 <sys_timeout>
  return ERR_OK;
 8010000:	2300      	movs	r3, #0
}
 8010002:	4618      	mov	r0, r3
 8010004:	3708      	adds	r7, #8
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
 801000a:	bf00      	nop
 801000c:	08010011 	.word	0x08010011

08010010 <ppp_do_connect>:

/**********************************/
/*** LOCAL FUNCTION DEFINITIONS ***/
/**********************************/

static void ppp_do_connect(void *arg) {
 8010010:	b580      	push	{r7, lr}
 8010012:	b084      	sub	sp, #16
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  ppp_pcb *pcb = (ppp_pcb*)arg;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("pcb->phase == PPP_PHASE_DEAD || pcb->phase == PPP_PHASE_HOLDOFF", pcb->phase == PPP_PHASE_DEAD || pcb->phase == PPP_PHASE_HOLDOFF);
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010022:	2b00      	cmp	r3, #0
 8010024:	d010      	beq.n	8010048 <ppp_do_connect+0x38>
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801002c:	2b02      	cmp	r3, #2
 801002e:	d00b      	beq.n	8010048 <ppp_do_connect+0x38>
 8010030:	4b0d      	ldr	r3, [pc, #52]	; (8010068 <ppp_do_connect+0x58>)
 8010032:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8010036:	490d      	ldr	r1, [pc, #52]	; (801006c <ppp_do_connect+0x5c>)
 8010038:	480d      	ldr	r0, [pc, #52]	; (8010070 <ppp_do_connect+0x60>)
 801003a:	f002 f95d 	bl	80122f8 <iprintf>
 801003e:	2000      	movs	r0, #0
 8010040:	f002 fa5c 	bl	80124fc <fflush>
 8010044:	f002 f9a1 	bl	801238a <abort>

  new_phase(pcb, PPP_PHASE_INITIALIZE);
 8010048:	2103      	movs	r1, #3
 801004a:	68f8      	ldr	r0, [r7, #12]
 801004c:	f000 fa00 	bl	8010450 <new_phase>
  pcb->link_cb->connect(pcb, pcb->link_ctx_cb);
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	699b      	ldr	r3, [r3, #24]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	68fa      	ldr	r2, [r7, #12]
 8010058:	69d2      	ldr	r2, [r2, #28]
 801005a:	4611      	mov	r1, r2
 801005c:	68f8      	ldr	r0, [r7, #12]
 801005e:	4798      	blx	r3
}
 8010060:	bf00      	nop
 8010062:	3710      	adds	r7, #16
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}
 8010068:	080157c8 	.word	0x080157c8
 801006c:	08015844 	.word	0x08015844
 8010070:	0801580c 	.word	0x0801580c

08010074 <ppp_netif_init_cb>:

/*
 * ppp_netif_init_cb - netif init callback
 */
static err_t ppp_netif_init_cb(struct netif *netif) {
 8010074:	b480      	push	{r7}
 8010076:	b083      	sub	sp, #12
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  netif->name[0] = 'p';
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2270      	movs	r2, #112	; 0x70
 8010080:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = 'p';
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2270      	movs	r2, #112	; 0x70
 8010088:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if PPP_IPV4_SUPPORT
  netif->output = ppp_netif_output_ip4;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	4a04      	ldr	r2, [pc, #16]	; (80100a0 <ppp_netif_init_cb+0x2c>)
 8010090:	615a      	str	r2, [r3, #20]
#endif /* PPP_IPV6_SUPPORT */
#if LWIP_NETIF_HOSTNAME
  /* @todo: Initialize interface hostname */
  /* netif_set_hostname(netif, "lwip"); */
#endif /* LWIP_NETIF_HOSTNAME */
  return ERR_OK;
 8010092:	2300      	movs	r3, #0
}
 8010094:	4618      	mov	r0, r3
 8010096:	370c      	adds	r7, #12
 8010098:	46bd      	mov	sp, r7
 801009a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009e:	4770      	bx	lr
 80100a0:	080100a5 	.word	0x080100a5

080100a4 <ppp_netif_output_ip4>:

#if PPP_IPV4_SUPPORT
/*
 * Send an IPv4 packet on the given connection.
 */
static err_t ppp_netif_output_ip4(struct netif *netif, struct pbuf *pb, const ip4_addr_t *ipaddr) {
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b084      	sub	sp, #16
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	60f8      	str	r0, [r7, #12]
 80100ac:	60b9      	str	r1, [r7, #8]
 80100ae:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(ipaddr);
  return ppp_netif_output(netif, pb, PPP_IP);
 80100b0:	2221      	movs	r2, #33	; 0x21
 80100b2:	68b9      	ldr	r1, [r7, #8]
 80100b4:	68f8      	ldr	r0, [r7, #12]
 80100b6:	f000 f805 	bl	80100c4 <ppp_netif_output>
 80100ba:	4603      	mov	r3, r0
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3710      	adds	r7, #16
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <ppp_netif_output>:
  LWIP_UNUSED_ARG(ipaddr);
  return ppp_netif_output(netif, pb, PPP_IPV6);
}
#endif /* PPP_IPV6_SUPPORT */

static err_t ppp_netif_output(struct netif *netif, struct pbuf *pb, u16_t protocol) {
 80100c4:	b590      	push	{r4, r7, lr}
 80100c6:	b089      	sub	sp, #36	; 0x24
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	60f8      	str	r0, [r7, #12]
 80100cc:	60b9      	str	r1, [r7, #8]
 80100ce:	4613      	mov	r3, r2
 80100d0:	80fb      	strh	r3, [r7, #6]
  ppp_pcb *pcb = (ppp_pcb*)netif->state;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	69db      	ldr	r3, [r3, #28]
 80100d6:	61bb      	str	r3, [r7, #24]
  err_t err;
  struct pbuf *fpb = NULL;
 80100d8:	2300      	movs	r3, #0
 80100da:	617b      	str	r3, [r7, #20]

  /* Check that the link is up. */
  if (0
 80100dc:	88fb      	ldrh	r3, [r7, #6]
 80100de:	2b21      	cmp	r3, #33	; 0x21
 80100e0:	d107      	bne.n	80100f2 <ppp_netif_output+0x2e>
#if PPP_IPV4_SUPPORT
      || (protocol == PPP_IP && !pcb->if4_up)
 80100e2:	69bb      	ldr	r3, [r7, #24]
 80100e4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80100e8:	f003 0308 	and.w	r3, r3, #8
 80100ec:	b2db      	uxtb	r3, r3
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d00b      	beq.n	801010a <ppp_netif_output+0x46>
    PPPDEBUG(LOG_ERR, ("ppp_netif_output[%d]: bad CCP transmit method\n", pcb->netif->num));
    goto err_rte_drop; /* Cannot really happen, we only negotiate what we are able to do */
  }
#endif /* CCP_SUPPORT */

  err = pcb->link_cb->netif_output(pcb, pcb->link_ctx_cb, pb, protocol);
 80100f2:	69bb      	ldr	r3, [r7, #24]
 80100f4:	699b      	ldr	r3, [r3, #24]
 80100f6:	691c      	ldr	r4, [r3, #16]
 80100f8:	69bb      	ldr	r3, [r7, #24]
 80100fa:	69d9      	ldr	r1, [r3, #28]
 80100fc:	88fb      	ldrh	r3, [r7, #6]
 80100fe:	68ba      	ldr	r2, [r7, #8]
 8010100:	69b8      	ldr	r0, [r7, #24]
 8010102:	47a0      	blx	r4
 8010104:	4603      	mov	r3, r0
 8010106:	77fb      	strb	r3, [r7, #31]
  goto err;
 8010108:	e002      	b.n	8010110 <ppp_netif_output+0x4c>
    goto err_rte_drop;
 801010a:	bf00      	nop

err_rte_drop:
  err = ERR_RTE;
 801010c:	23fc      	movs	r3, #252	; 0xfc
 801010e:	77fb      	strb	r3, [r7, #31]
  LINK_STATS_INC(link.rterr);
  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
err:
  if (fpb) {
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d002      	beq.n	801011c <ppp_netif_output+0x58>
    pbuf_free(fpb);
 8010116:	6978      	ldr	r0, [r7, #20]
 8010118:	f7f3 fba4 	bl	8003864 <pbuf_free>
  }
  return err;
 801011c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010120:	4618      	mov	r0, r3
 8010122:	3724      	adds	r7, #36	; 0x24
 8010124:	46bd      	mov	sp, r7
 8010126:	bd90      	pop	{r4, r7, pc}

08010128 <ppp_init>:
/*** PRIVATE FUNCTION DEFINITIONS ***/
/************************************/

/* Initialize the PPP subsystem. */
int ppp_init(void)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	af00      	add	r7, sp, #0
#if PPPOS_SUPPORT
  LWIP_MEMPOOL_INIT(PPPOS_PCB);
 801012c:	4805      	ldr	r0, [pc, #20]	; (8010144 <ppp_init+0x1c>)
 801012e:	f7f2 fc99 	bl	8002a64 <memp_init_pool>
#endif
#if LWIP_PPP_API && LWIP_MPU_COMPATIBLE
  LWIP_MEMPOOL_INIT(PPPAPI_MSG);
#endif

  LWIP_MEMPOOL_INIT(PPP_PCB);
 8010132:	4805      	ldr	r0, [pc, #20]	; (8010148 <ppp_init+0x20>)
 8010134:	f7f2 fc96 	bl	8002a64 <memp_init_pool>

  /*
   * Initialize magic number generator now so that protocols may
   * use magic numbers in initialization.
   */
  magic_init();
 8010138:	f7fe feca 	bl	800eed0 <magic_init>

  return 0;
 801013c:	2300      	movs	r3, #0
}
 801013e:	4618      	mov	r0, r3
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	08015c70 	.word	0x08015c70
 8010148:	08015c4c 	.word	0x08015c4c

0801014c <ppp_new>:
 * attempt to negotiate the LCP session.
 *
 * Return a new PPP connection control block pointer
 * on success or a null pointer on failure.
 */
ppp_pcb *ppp_new(struct netif *pppif, const struct link_callbacks *callbacks, void *link_ctx_cb, ppp_link_status_cb_fn link_status_cb, void *ctx_cb) {
 801014c:	b580      	push	{r7, lr}
 801014e:	b08c      	sub	sp, #48	; 0x30
 8010150:	af04      	add	r7, sp, #16
 8010152:	60f8      	str	r0, [r7, #12]
 8010154:	60b9      	str	r1, [r7, #8]
 8010156:	607a      	str	r2, [r7, #4]
 8010158:	603b      	str	r3, [r7, #0]
  const struct protent *protp;
  int i;

  /* PPP is single-threaded: without a callback,
   * there is no way to know when the link is up. */
  if (link_status_cb == NULL) {
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d101      	bne.n	8010164 <ppp_new+0x18>
    return NULL;
 8010160:	2300      	movs	r3, #0
 8010162:	e06a      	b.n	801023a <ppp_new+0xee>
  }

  pcb = (ppp_pcb*)LWIP_MEMPOOL_ALLOC(PPP_PCB);
 8010164:	4837      	ldr	r0, [pc, #220]	; (8010244 <ppp_new+0xf8>)
 8010166:	f7f2 fce3 	bl	8002b30 <memp_malloc_pool>
 801016a:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 801016c:	69bb      	ldr	r3, [r7, #24]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d101      	bne.n	8010176 <ppp_new+0x2a>
    return NULL;
 8010172:	2300      	movs	r3, #0
 8010174:	e061      	b.n	801023a <ppp_new+0xee>
  }

  memset(pcb, 0, sizeof(ppp_pcb));
 8010176:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 801017a:	2100      	movs	r1, #0
 801017c:	69b8      	ldr	r0, [r7, #24]
 801017e:	f002 fb02 	bl	8012786 <memset>

  /* default configuration */
#if PAP_SUPPORT
  pcb->settings.pap_timeout_time = UPAP_DEFTIMEOUT;
 8010182:	69bb      	ldr	r3, [r7, #24]
 8010184:	2206      	movs	r2, #6
 8010186:	731a      	strb	r2, [r3, #12]
  pcb->settings.pap_max_transmits = UPAP_DEFTRANSMITS;
 8010188:	69bb      	ldr	r3, [r7, #24]
 801018a:	220a      	movs	r2, #10
 801018c:	735a      	strb	r2, [r3, #13]
  pcb->settings.eap_timeout_time = EAP_DEFTIMEOUT;
  pcb->settings.eap_max_transmits = EAP_DEFTRANSMITS;
#endif /* PPP_SERVER */
#endif /* EAP_SUPPORT */

  pcb->settings.lcp_loopbackfail = LCP_DEFLOOPBACKFAIL;
 801018e:	69bb      	ldr	r3, [r7, #24]
 8010190:	220a      	movs	r2, #10
 8010192:	749a      	strb	r2, [r3, #18]
  pcb->settings.lcp_echo_interval = LCP_ECHOINTERVAL;
 8010194:	69bb      	ldr	r3, [r7, #24]
 8010196:	2200      	movs	r2, #0
 8010198:	74da      	strb	r2, [r3, #19]
  pcb->settings.lcp_echo_fails = LCP_MAXECHOFAILS;
 801019a:	69bb      	ldr	r3, [r7, #24]
 801019c:	2203      	movs	r2, #3
 801019e:	751a      	strb	r2, [r3, #20]

  pcb->settings.fsm_timeout_time = FSM_DEFTIMEOUT;
 80101a0:	69bb      	ldr	r3, [r7, #24]
 80101a2:	2206      	movs	r2, #6
 80101a4:	739a      	strb	r2, [r3, #14]
  pcb->settings.fsm_max_conf_req_transmits = FSM_DEFMAXCONFREQS;
 80101a6:	69bb      	ldr	r3, [r7, #24]
 80101a8:	220a      	movs	r2, #10
 80101aa:	73da      	strb	r2, [r3, #15]
  pcb->settings.fsm_max_term_transmits = FSM_DEFMAXTERMREQS;
 80101ac:	69bb      	ldr	r3, [r7, #24]
 80101ae:	2202      	movs	r2, #2
 80101b0:	741a      	strb	r2, [r3, #16]
  pcb->settings.fsm_max_nak_loops = FSM_DEFMAXNAKLOOPS;
 80101b2:	69bb      	ldr	r3, [r7, #24]
 80101b4:	2205      	movs	r2, #5
 80101b6:	745a      	strb	r2, [r3, #17]

  pcb->netif = pppif;
 80101b8:	69bb      	ldr	r3, [r7, #24]
 80101ba:	68fa      	ldr	r2, [r7, #12]
 80101bc:	629a      	str	r2, [r3, #40]	; 0x28
  MIB2_INIT_NETIF(pppif, snmp_ifType_ppp, 0);
  if (!netif_add(pcb->netif,
 80101be:	69bb      	ldr	r3, [r7, #24]
 80101c0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80101c2:	2300      	movs	r3, #0
 80101c4:	9302      	str	r3, [sp, #8]
 80101c6:	4b20      	ldr	r3, [pc, #128]	; (8010248 <ppp_new+0xfc>)
 80101c8:	9301      	str	r3, [sp, #4]
 80101ca:	69bb      	ldr	r3, [r7, #24]
 80101cc:	9300      	str	r3, [sp, #0]
 80101ce:	4b1f      	ldr	r3, [pc, #124]	; (801024c <ppp_new+0x100>)
 80101d0:	4a1f      	ldr	r2, [pc, #124]	; (8010250 <ppp_new+0x104>)
 80101d2:	491e      	ldr	r1, [pc, #120]	; (801024c <ppp_new+0x100>)
 80101d4:	f7f2 fd6e 	bl	8002cb4 <netif_add>
 80101d8:	4603      	mov	r3, r0
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d105      	bne.n	80101ea <ppp_new+0x9e>
#if LWIP_IPV4
                 IP4_ADDR_ANY4, IP4_ADDR_BROADCAST, IP4_ADDR_ANY4,
#endif /* LWIP_IPV4 */
                 (void *)pcb, ppp_netif_init_cb, NULL)) {
    LWIP_MEMPOOL_FREE(PPP_PCB, pcb);
 80101de:	69b9      	ldr	r1, [r7, #24]
 80101e0:	4818      	ldr	r0, [pc, #96]	; (8010244 <ppp_new+0xf8>)
 80101e2:	f7f2 fd0b 	bl	8002bfc <memp_free_pool>
    PPPDEBUG(LOG_ERR, ("ppp_new: netif_add failed\n"));
    return NULL;
 80101e6:	2300      	movs	r3, #0
 80101e8:	e027      	b.n	801023a <ppp_new+0xee>
  }
  /* FIXME: user application should be responsible to call netif_set_up(),
   * remove it for next release with allowed behavior break */
  netif_set_up(pcb->netif);
 80101ea:	69bb      	ldr	r3, [r7, #24]
 80101ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7f2 ff30 	bl	8003054 <netif_set_up>

  pcb->link_cb = callbacks;
 80101f4:	69bb      	ldr	r3, [r7, #24]
 80101f6:	68ba      	ldr	r2, [r7, #8]
 80101f8:	619a      	str	r2, [r3, #24]
  pcb->link_ctx_cb = link_ctx_cb;
 80101fa:	69bb      	ldr	r3, [r7, #24]
 80101fc:	687a      	ldr	r2, [r7, #4]
 80101fe:	61da      	str	r2, [r3, #28]
  pcb->link_status_cb = link_status_cb;
 8010200:	69bb      	ldr	r3, [r7, #24]
 8010202:	683a      	ldr	r2, [r7, #0]
 8010204:	621a      	str	r2, [r3, #32]
  pcb->ctx_cb = ctx_cb;
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801020a:	625a      	str	r2, [r3, #36]	; 0x24

  /*
   * Initialize each protocol.
   */
  for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 801020c:	2300      	movs	r3, #0
 801020e:	61fb      	str	r3, [r7, #28]
 8010210:	e006      	b.n	8010220 <ppp_new+0xd4>
      (*protp->init)(pcb);
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	685b      	ldr	r3, [r3, #4]
 8010216:	69b8      	ldr	r0, [r7, #24]
 8010218:	4798      	blx	r3
  for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 801021a:	69fb      	ldr	r3, [r7, #28]
 801021c:	3301      	adds	r3, #1
 801021e:	61fb      	str	r3, [r7, #28]
 8010220:	4a0c      	ldr	r2, [pc, #48]	; (8010254 <ppp_new+0x108>)
 8010222:	69fb      	ldr	r3, [r7, #28]
 8010224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010228:	617b      	str	r3, [r7, #20]
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d1f0      	bne.n	8010212 <ppp_new+0xc6>
  }

  new_phase(pcb, PPP_PHASE_DEAD);
 8010230:	2100      	movs	r1, #0
 8010232:	69b8      	ldr	r0, [r7, #24]
 8010234:	f000 f90c 	bl	8010450 <new_phase>
  return pcb;
 8010238:	69bb      	ldr	r3, [r7, #24]
}
 801023a:	4618      	mov	r0, r3
 801023c:	3720      	adds	r7, #32
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}
 8010242:	bf00      	nop
 8010244:	08015c4c 	.word	0x08015c4c
 8010248:	08010075 	.word	0x08010075
 801024c:	08015a1c 	.word	0x08015a1c
 8010250:	08015a20 	.word	0x08015a20
 8010254:	08015c5c 	.word	0x08015c5c

08010258 <ppp_start>:

/** Initiate LCP open request */
void ppp_start(ppp_pcb *pcb) {
 8010258:	b580      	push	{r7, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
#if VJ_SUPPORT
  vj_compress_init(&pcb->vj_comp);
#endif /* VJ_SUPPORT */

  /* Start protocol */
  new_phase(pcb, PPP_PHASE_ESTABLISH);
 8010260:	2106      	movs	r1, #6
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f000 f8f4 	bl	8010450 <new_phase>
  lcp_open(pcb);
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f7fc fa97 	bl	800c79c <lcp_open>
  lcp_lowerup(pcb);
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f7fc fb06 	bl	800c880 <lcp_lowerup>
  PPPDEBUG(LOG_DEBUG, ("ppp_start[%d]: finished\n", pcb->netif->num));
}
 8010274:	bf00      	nop
 8010276:	3708      	adds	r7, #8
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}

0801027c <ppp_link_end>:
  pcb->err_code = PPPERR_OPEN;
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
}

/** Called when link is normally down (i.e. it was asked to end) */
void ppp_link_end(ppp_pcb *pcb) {
 801027c:	b580      	push	{r7, lr}
 801027e:	b082      	sub	sp, #8
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  PPPDEBUG(LOG_DEBUG, ("ppp_link_end[%d]\n", pcb->netif->num));
  new_phase(pcb, PPP_PHASE_DEAD);
 8010284:	2100      	movs	r1, #0
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f000 f8e2 	bl	8010450 <new_phase>
  if (pcb->err_code == PPPERR_NONE) {
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010292:	2b00      	cmp	r3, #0
 8010294:	d103      	bne.n	801029e <ppp_link_end+0x22>
    pcb->err_code = PPPERR_CONNECT;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2206      	movs	r2, #6
 801029a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6a1b      	ldr	r3, [r3, #32]
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80102a8:	4611      	mov	r1, r2
 80102aa:	687a      	ldr	r2, [r7, #4]
 80102ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	4798      	blx	r3
}
 80102b2:	bf00      	nop
 80102b4:	3708      	adds	r7, #8
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}
	...

080102bc <ppp_input>:

/*
 * Pass the processed input packet to the appropriate handler.
 * This function and all handlers run in the context of the tcpip_thread
 */
void ppp_input(ppp_pcb *pcb, struct pbuf *pb) {
 80102bc:	b580      	push	{r7, lr}
 80102be:	b086      	sub	sp, #24
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
  u16_t protocol;
#if PPP_DEBUG && PPP_PROTOCOLNAME
  const char *pname;
#endif /* PPP_DEBUG && PPP_PROTOCOLNAME */
  LWIP_ASSERT("pcb->phase >= PPP_PHASE_ESTABLISH && pcb->phase <= PPP_PHASE_TERMINATE",
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80102cc:	2b05      	cmp	r3, #5
 80102ce:	d904      	bls.n	80102da <ppp_input+0x1e>
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80102d6:	2b0b      	cmp	r3, #11
 80102d8:	d90b      	bls.n	80102f2 <ppp_input+0x36>
 80102da:	4b48      	ldr	r3, [pc, #288]	; (80103fc <ppp_input+0x140>)
 80102dc:	f240 3211 	movw	r2, #785	; 0x311
 80102e0:	4947      	ldr	r1, [pc, #284]	; (8010400 <ppp_input+0x144>)
 80102e2:	4848      	ldr	r0, [pc, #288]	; (8010404 <ppp_input+0x148>)
 80102e4:	f002 f808 	bl	80122f8 <iprintf>
 80102e8:	2000      	movs	r0, #0
 80102ea:	f002 f907 	bl	80124fc <fflush>
 80102ee:	f002 f84c 	bl	801238a <abort>
    pcb->phase >= PPP_PHASE_ESTABLISH && pcb->phase <= PPP_PHASE_TERMINATE);

  magic_randomize();
 80102f2:	f7fe fdf5 	bl	800eee0 <magic_randomize>

  if (pb->len < 2) {
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	895b      	ldrh	r3, [r3, #10]
 80102fa:	2b01      	cmp	r3, #1
 80102fc:	d96e      	bls.n	80103dc <ppp_input+0x120>
    PPPDEBUG(LOG_ERR, ("ppp_input[%d]: packet too short\n", pcb->netif->num));
    goto drop;
  }
  protocol = (((u8_t *)pb->payload)[0] << 8) | ((u8_t*)pb->payload)[1];
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	685b      	ldr	r3, [r3, #4]
 8010302:	781b      	ldrb	r3, [r3, #0]
 8010304:	021b      	lsls	r3, r3, #8
 8010306:	b21a      	sxth	r2, r3
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	3301      	adds	r3, #1
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	b21b      	sxth	r3, r3
 8010312:	4313      	orrs	r3, r2
 8010314:	b21b      	sxth	r3, r3
 8010316:	827b      	strh	r3, [r7, #18]

#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "rcvd", (unsigned char *)pb->payload, pb->len);
#endif /* PRINTPKT_SUPPORT */

  pbuf_remove_header(pb, sizeof(protocol));
 8010318:	2102      	movs	r1, #2
 801031a:	6838      	ldr	r0, [r7, #0]
 801031c:	f7f3 fa18 	bl	8003750 <pbuf_remove_header>
  MIB2_STATS_NETIF_ADD(pcb->netif, ifinoctets, pb->tot_len);

  /*
   * Toss all non-LCP packets unless LCP is OPEN.
   */
  if (protocol != PPP_LCP && pcb->lcp_fsm.state != PPP_FSM_OPENED) {
 8010320:	8a7b      	ldrh	r3, [r7, #18]
 8010322:	f24c 0221 	movw	r2, #49185	; 0xc021
 8010326:	4293      	cmp	r3, r2
 8010328:	d004      	beq.n	8010334 <ppp_input+0x78>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8010330:	2b09      	cmp	r3, #9
 8010332:	d155      	bne.n	80103e0 <ppp_input+0x124>

  /*
   * Until we get past the authentication phase, toss all packets
   * except LCP, LQR and authentication packets.
   */
  if (pcb->phase <= PPP_PHASE_AUTHENTICATE
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801033a:	2b07      	cmp	r3, #7
 801033c:	d80e      	bhi.n	801035c <ppp_input+0xa0>
   && !(protocol == PPP_LCP
 801033e:	8a7b      	ldrh	r3, [r7, #18]
 8010340:	f24c 0221 	movw	r2, #49185	; 0xc021
 8010344:	4293      	cmp	r3, r2
 8010346:	d009      	beq.n	801035c <ppp_input+0xa0>
#if LQR_SUPPORT
   || protocol == PPP_LQR
#endif /* LQR_SUPPORT */
#if PAP_SUPPORT
   || protocol == PPP_PAP
 8010348:	8a7b      	ldrh	r3, [r7, #18]
 801034a:	f24c 0223 	movw	r2, #49187	; 0xc023
 801034e:	4293      	cmp	r3, r2
 8010350:	d004      	beq.n	801035c <ppp_input+0xa0>
   && !(protocol == PPP_LCP
 8010352:	8a7b      	ldrh	r3, [r7, #18]
 8010354:	f24c 2223 	movw	r2, #49699	; 0xc223
 8010358:	4293      	cmp	r3, r2
 801035a:	d143      	bne.n	80103e4 <ppp_input+0x128>
      pbuf_remove_header(pb, 2);
    }
  }
#endif /* CCP_SUPPORT */

  switch (protocol) {
 801035c:	8a7b      	ldrh	r3, [r7, #18]
 801035e:	2b21      	cmp	r3, #33	; 0x21
 8010360:	d106      	bne.n	8010370 <ppp_input+0xb4>

#if PPP_IPV4_SUPPORT
    case PPP_IP:            /* Internet Protocol */
      PPPDEBUG(LOG_INFO, ("ppp_input[%d]: ip in pbuf len=%d\n", pcb->netif->num, pb->tot_len));
      ip4_input(pb, pcb->netif);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010366:	4619      	mov	r1, r3
 8010368:	6838      	ldr	r0, [r7, #0]
 801036a:	f7f1 fcff 	bl	8001d6c <ip4_input>
      return;
 801036e:	e041      	b.n	80103f4 <ppp_input+0x138>
      const struct protent *protp;

      /*
       * Upcall the proper protocol input routine.
       */
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 8010370:	2300      	movs	r3, #0
 8010372:	617b      	str	r3, [r7, #20]
 8010374:	e019      	b.n	80103aa <ppp_input+0xee>
        if (protp->protocol == protocol) {
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	881b      	ldrh	r3, [r3, #0]
 801037a:	8a7a      	ldrh	r2, [r7, #18]
 801037c:	429a      	cmp	r2, r3
 801037e:	d111      	bne.n	80103a4 <ppp_input+0xe8>
          pb = pbuf_coalesce(pb, PBUF_RAW);
 8010380:	2100      	movs	r1, #0
 8010382:	6838      	ldr	r0, [r7, #0]
 8010384:	f7f3 fd50 	bl	8003e28 <pbuf_coalesce>
 8010388:	6038      	str	r0, [r7, #0]
          if (pb->next != NULL) {
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d12a      	bne.n	80103e8 <ppp_input+0x12c>
            PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_coalesce failed), len=%d\n", pcb->netif->num, pb->tot_len));
            goto drop;
          }
          (*protp->input)(pcb, (u8_t*)pb->payload, pb->len);
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	689b      	ldr	r3, [r3, #8]
 8010396:	683a      	ldr	r2, [r7, #0]
 8010398:	6851      	ldr	r1, [r2, #4]
 801039a:	683a      	ldr	r2, [r7, #0]
 801039c:	8952      	ldrh	r2, [r2, #10]
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	4798      	blx	r3
          goto out;
 80103a2:	e024      	b.n	80103ee <ppp_input+0x132>
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	3301      	adds	r3, #1
 80103a8:	617b      	str	r3, [r7, #20]
 80103aa:	4a17      	ldr	r2, [pc, #92]	; (8010408 <ppp_input+0x14c>)
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103b2:	60fb      	str	r3, [r7, #12]
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d1dd      	bne.n	8010376 <ppp_input+0xba>
      } else
#endif /* PPP_PROTOCOLNAME */
        ppp_warn(("Unsupported protocol 0x%x received", protocol));
#endif /* PPP_DEBUG */

      if (pbuf_add_header(pb, sizeof(protocol))) {
 80103ba:	2102      	movs	r1, #2
 80103bc:	6838      	ldr	r0, [r7, #0]
 80103be:	f7f3 f9b7 	bl	8003730 <pbuf_add_header>
 80103c2:	4603      	mov	r3, r0
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d111      	bne.n	80103ec <ppp_input+0x130>
        PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_add_header failed)\n", pcb->netif->num));
        goto drop;
      }
      lcp_sprotrej(pcb, (u8_t*)pb->payload, pb->len);
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	6859      	ldr	r1, [r3, #4]
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	895b      	ldrh	r3, [r3, #10]
 80103d0:	461a      	mov	r2, r3
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f7fc fbc9 	bl	800cb6a <lcp_sprotrej>
    }
    break;
 80103d8:	bf00      	nop
 80103da:	e008      	b.n	80103ee <ppp_input+0x132>
    goto drop;
 80103dc:	bf00      	nop
 80103de:	e006      	b.n	80103ee <ppp_input+0x132>
    goto drop;
 80103e0:	bf00      	nop
 80103e2:	e004      	b.n	80103ee <ppp_input+0x132>
    goto drop;
 80103e4:	bf00      	nop
 80103e6:	e002      	b.n	80103ee <ppp_input+0x132>
            goto drop;
 80103e8:	bf00      	nop
 80103ea:	e000      	b.n	80103ee <ppp_input+0x132>
        goto drop;
 80103ec:	bf00      	nop
drop:
  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(pcb->netif, ifindiscards);

out:
  pbuf_free(pb);
 80103ee:	6838      	ldr	r0, [r7, #0]
 80103f0:	f7f3 fa38 	bl	8003864 <pbuf_free>
}
 80103f4:	3718      	adds	r7, #24
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}
 80103fa:	bf00      	nop
 80103fc:	080157c8 	.word	0x080157c8
 8010400:	08015884 	.word	0x08015884
 8010404:	0801580c 	.word	0x0801580c
 8010408:	08015c5c 	.word	0x08015c5c

0801040c <ppp_write>:
 *
 * IPv4 and IPv6 packets from lwIP are sent, respectively,
 * with ppp_netif_output_ip4() and ppp_netif_output_ip6()
 * functions (which are callbacks of the netif PPP interface).
 */
err_t ppp_write(ppp_pcb *pcb, struct pbuf *p) {
 801040c:	b580      	push	{r7, lr}
 801040e:	b082      	sub	sp, #8
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	6039      	str	r1, [r7, #0]
#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "sent", (unsigned char *)p->payload+2, p->len-2);
#endif /* PRINTPKT_SUPPORT */
  return pcb->link_cb->write(pcb, pcb->link_ctx_cb, p);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	699b      	ldr	r3, [r3, #24]
 801041a:	68db      	ldr	r3, [r3, #12]
 801041c:	687a      	ldr	r2, [r7, #4]
 801041e:	69d1      	ldr	r1, [r2, #28]
 8010420:	683a      	ldr	r2, [r7, #0]
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	4798      	blx	r3
 8010426:	4603      	mov	r3, r0
}
 8010428:	4618      	mov	r0, r3
 801042a:	3708      	adds	r7, #8
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}

08010430 <ppp_link_terminated>:

void ppp_link_terminated(ppp_pcb *pcb) {
 8010430:	b580      	push	{r7, lr}
 8010432:	b082      	sub	sp, #8
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]\n", pcb->netif->num));
  pcb->link_cb->disconnect(pcb, pcb->link_ctx_cb);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	699b      	ldr	r3, [r3, #24]
 801043c:	685b      	ldr	r3, [r3, #4]
 801043e:	687a      	ldr	r2, [r7, #4]
 8010440:	69d2      	ldr	r2, [r2, #28]
 8010442:	4611      	mov	r1, r2
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	4798      	blx	r3
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]: finished.\n", pcb->netif->num));
}
 8010448:	bf00      	nop
 801044a:	3708      	adds	r7, #8
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}

08010450 <new_phase>:
 */

/*
 * new_phase - signal the start of a new phase of pppd's operation.
 */
void new_phase(ppp_pcb *pcb, int p) {
 8010450:	b480      	push	{r7}
 8010452:	b083      	sub	sp, #12
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
 8010458:	6039      	str	r1, [r7, #0]
  pcb->phase = p;
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	b2da      	uxtb	r2, r3
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#if PPP_NOTIFY_PHASE
  if (pcb->notify_phase_cb != NULL) {
    pcb->notify_phase_cb(pcb, p, pcb->ctx_cb);
  }
#endif /* PPP_NOTIFY_PHASE */
}
 8010464:	bf00      	nop
 8010466:	370c      	adds	r7, #12
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr

08010470 <ppp_send_config>:

/*
 * ppp_send_config - configure the transmit-side characteristics of
 * the ppp interface.
 */
int ppp_send_config(ppp_pcb *pcb, int mtu, u32_t accm, int pcomp, int accomp) {
 8010470:	b590      	push	{r4, r7, lr}
 8010472:	b087      	sub	sp, #28
 8010474:	af02      	add	r7, sp, #8
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	60b9      	str	r1, [r7, #8]
 801047a:	607a      	str	r2, [r7, #4]
 801047c:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(mtu);

  PPPDEBUG(LOG_INFO, ("ppp_send_config[%d]\n", pcb->netif->num));

  if (pcb->link_cb->send_config) {
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	699b      	ldr	r3, [r3, #24]
 8010482:	695b      	ldr	r3, [r3, #20]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d00a      	beq.n	801049e <ppp_send_config+0x2e>
    pcb->link_cb->send_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	699b      	ldr	r3, [r3, #24]
 801048c:	695c      	ldr	r4, [r3, #20]
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	69d9      	ldr	r1, [r3, #28]
 8010492:	6a3b      	ldr	r3, [r7, #32]
 8010494:	9300      	str	r3, [sp, #0]
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	687a      	ldr	r2, [r7, #4]
 801049a:	68f8      	ldr	r0, [r7, #12]
 801049c:	47a0      	blx	r4
  }

  return 0;
 801049e:	2300      	movs	r3, #0
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	3714      	adds	r7, #20
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd90      	pop	{r4, r7, pc}

080104a8 <ppp_recv_config>:

/*
 * ppp_recv_config - configure the receive-side characteristics of
 * the ppp interface.
 */
int ppp_recv_config(ppp_pcb *pcb, int mru, u32_t accm, int pcomp, int accomp) {
 80104a8:	b590      	push	{r4, r7, lr}
 80104aa:	b087      	sub	sp, #28
 80104ac:	af02      	add	r7, sp, #8
 80104ae:	60f8      	str	r0, [r7, #12]
 80104b0:	60b9      	str	r1, [r7, #8]
 80104b2:	607a      	str	r2, [r7, #4]
 80104b4:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(mru);

  PPPDEBUG(LOG_INFO, ("ppp_recv_config[%d]\n", pcb->netif->num));

  if (pcb->link_cb->recv_config) {
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	699b      	ldr	r3, [r3, #24]
 80104ba:	699b      	ldr	r3, [r3, #24]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d00a      	beq.n	80104d6 <ppp_recv_config+0x2e>
    pcb->link_cb->recv_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	699b      	ldr	r3, [r3, #24]
 80104c4:	699c      	ldr	r4, [r3, #24]
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	69d9      	ldr	r1, [r3, #28]
 80104ca:	6a3b      	ldr	r3, [r7, #32]
 80104cc:	9300      	str	r3, [sp, #0]
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	687a      	ldr	r2, [r7, #4]
 80104d2:	68f8      	ldr	r0, [r7, #12]
 80104d4:	47a0      	blx	r4
  }

  return 0;
 80104d6:	2300      	movs	r3, #0
}
 80104d8:	4618      	mov	r0, r3
 80104da:	3714      	adds	r7, #20
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd90      	pop	{r4, r7, pc}

080104e0 <sifaddr>:

#if PPP_IPV4_SUPPORT
/*
 * sifaddr - Config the interface IP addresses and netmask.
 */
int sifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr, u32_t netmask) {
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b088      	sub	sp, #32
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	60f8      	str	r0, [r7, #12]
 80104e8:	60b9      	str	r1, [r7, #8]
 80104ea:	607a      	str	r2, [r7, #4]
 80104ec:	603b      	str	r3, [r7, #0]
  ip4_addr_t ip, nm, gw;

  ip4_addr_set_u32(&ip, our_adr);
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	61fb      	str	r3, [r7, #28]
  ip4_addr_set_u32(&nm, netmask);
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	61bb      	str	r3, [r7, #24]
  ip4_addr_set_u32(&gw, his_adr);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	617b      	str	r3, [r7, #20]
  netif_set_addr(pcb->netif, &ip, &nm, &gw);
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80104fe:	f107 0314 	add.w	r3, r7, #20
 8010502:	f107 0218 	add.w	r2, r7, #24
 8010506:	f107 011c 	add.w	r1, r7, #28
 801050a:	f7f2 fd49 	bl	8002fa0 <netif_set_addr>
  return 1;
 801050e:	2301      	movs	r3, #1
}
 8010510:	4618      	mov	r0, r3
 8010512:	3720      	adds	r7, #32
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <cifaddr>:
/********************************************************************
 *
 * cifaddr - Clear the interface IP addresses, and delete routes
 * through the interface if possible.
 */
int cifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr) {
 8010518:	b580      	push	{r7, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	af00      	add	r7, sp, #0
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	60b9      	str	r1, [r7, #8]
 8010522:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(our_adr);
  LWIP_UNUSED_ARG(his_adr);

  netif_set_addr(pcb->netif, IP4_ADDR_ANY4, IP4_ADDR_BROADCAST, IP4_ADDR_ANY4);
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010528:	4b04      	ldr	r3, [pc, #16]	; (801053c <cifaddr+0x24>)
 801052a:	4a05      	ldr	r2, [pc, #20]	; (8010540 <cifaddr+0x28>)
 801052c:	4903      	ldr	r1, [pc, #12]	; (801053c <cifaddr+0x24>)
 801052e:	f7f2 fd37 	bl	8002fa0 <netif_set_addr>
  return 1;
 8010532:	2301      	movs	r3, #1
}
 8010534:	4618      	mov	r0, r3
 8010536:	3710      	adds	r7, #16
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}
 801053c:	08015a1c 	.word	0x08015a1c
 8010540:	08015a20 	.word	0x08015a20

08010544 <sifup>:
#endif /* VJ_SUPPORT */

/*
 * sifup - Config the interface up and enable IP packets to pass.
 */
int sifup(ppp_pcb *pcb) {
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
  pcb->if4_up = 1;
 801054c:	687a      	ldr	r2, [r7, #4]
 801054e:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8010552:	f043 0308 	orr.w	r3, r3, #8
 8010556:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  pcb->err_code = PPPERR_NONE;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2200      	movs	r2, #0
 801055e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif_set_link_up(pcb->netif);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010566:	4618      	mov	r0, r3
 8010568:	f7f2 fdd2 	bl	8003110 <netif_set_link_up>

  PPPDEBUG(LOG_DEBUG, ("sifup[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6a1b      	ldr	r3, [r3, #32]
 8010570:	687a      	ldr	r2, [r7, #4]
 8010572:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8010576:	4611      	mov	r1, r2
 8010578:	687a      	ldr	r2, [r7, #4]
 801057a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	4798      	blx	r3
  return 1;
 8010580:	2301      	movs	r3, #1
}
 8010582:	4618      	mov	r0, r3
 8010584:	3708      	adds	r7, #8
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}

0801058a <sifdown>:
/********************************************************************
 *
 * sifdown - Disable the indicated protocol and config the interface
 *           down if there are no remaining protocols.
 */
int sifdown(ppp_pcb *pcb) {
 801058a:	b580      	push	{r7, lr}
 801058c:	b082      	sub	sp, #8
 801058e:	af00      	add	r7, sp, #0
 8010590:	6078      	str	r0, [r7, #4]

  pcb->if4_up = 0;
 8010592:	687a      	ldr	r2, [r7, #4]
 8010594:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8010598:	f36f 03c3 	bfc	r3, #3, #1
 801059c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   /* set the interface down if IPv6 is down as well */
   && !pcb->if6_up
#endif /* PPP_IPV6_SUPPORT */
  ) {
    /* make sure the netif link callback is called */
    netif_set_link_down(pcb->netif);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7f2 fddf 	bl	8003168 <netif_set_link_down>
  }
  PPPDEBUG(LOG_DEBUG, ("sifdown[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
  return 1;
 80105aa:	2301      	movs	r3, #1
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3708      	adds	r7, #8
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <get_mask>:
 * Here we scan through the system's list of interfaces, looking for
 * any non-point-to-point interfaces which might appear to be on the same
 * network as `addr'.  If we find any, we OR in their netmask to the
 * user-specified netmask.
 */
u32_t get_mask(u32_t addr) {
 80105b4:	b480      	push	{r7}
 80105b6:	b083      	sub	sp, #12
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
   */
  /* return mask; */
  return mask;
#endif /* 0 */
  LWIP_UNUSED_ARG(addr);
  return IPADDR_BROADCAST;
 80105bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	370c      	adds	r7, #12
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr

080105cc <ppp_netif_set_mtu>:
#endif /* DEMAND_SUPPORT */

/*
 * ppp_netif_set_mtu - set the MTU on the PPP network interface.
 */
void ppp_netif_set_mtu(ppp_pcb *pcb, int mtu) {
 80105cc:	b480      	push	{r7}
 80105ce:	b083      	sub	sp, #12
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]

  pcb->netif->mtu = mtu;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105da:	683a      	ldr	r2, [r7, #0]
 80105dc:	b292      	uxth	r2, r2
 80105de:	841a      	strh	r2, [r3, #32]
#if PPP_IPV6_SUPPORT && LWIP_ND6_ALLOW_RA_UPDATES
  pcb->netif->mtu6 = mtu;
#endif /* PPP_IPV6_SUPPORT && LWIP_ND6_ALLOW_RA_UPDATES */
  PPPDEBUG(LOG_INFO, ("ppp_netif_set_mtu[%d]: mtu=%d\n", pcb->netif->num, mtu));
}
 80105e0:	bf00      	nop
 80105e2:	370c      	adds	r7, #12
 80105e4:	46bd      	mov	sp, r7
 80105e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ea:	4770      	bx	lr

080105ec <pppos_create>:
 *
 * Return 0 on success, an error code on failure.
 */
ppp_pcb *pppos_create(struct netif *pppif, pppos_output_cb_fn output_cb,
       ppp_link_status_cb_fn link_status_cb, void *ctx_cb)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b088      	sub	sp, #32
 80105f0:	af02      	add	r7, sp, #8
 80105f2:	60f8      	str	r0, [r7, #12]
 80105f4:	60b9      	str	r1, [r7, #8]
 80105f6:	607a      	str	r2, [r7, #4]
 80105f8:	603b      	str	r3, [r7, #0]
  pppos_pcb *pppos;
  ppp_pcb *ppp;
  LWIP_ASSERT_CORE_LOCKED();

  pppos = (pppos_pcb *)LWIP_MEMPOOL_ALLOC(PPPOS_PCB);
 80105fa:	4815      	ldr	r0, [pc, #84]	; (8010650 <pppos_create+0x64>)
 80105fc:	f7f2 fa98 	bl	8002b30 <memp_malloc_pool>
 8010600:	6178      	str	r0, [r7, #20]
  if (pppos == NULL) {
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d101      	bne.n	801060c <pppos_create+0x20>
    return NULL;
 8010608:	2300      	movs	r3, #0
 801060a:	e01d      	b.n	8010648 <pppos_create+0x5c>
  }

  ppp = ppp_new(pppif, &pppos_callbacks, pppos, link_status_cb, ctx_cb);
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	9300      	str	r3, [sp, #0]
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	697a      	ldr	r2, [r7, #20]
 8010614:	490f      	ldr	r1, [pc, #60]	; (8010654 <pppos_create+0x68>)
 8010616:	68f8      	ldr	r0, [r7, #12]
 8010618:	f7ff fd98 	bl	801014c <ppp_new>
 801061c:	6138      	str	r0, [r7, #16]
  if (ppp == NULL) {
 801061e:	693b      	ldr	r3, [r7, #16]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d105      	bne.n	8010630 <pppos_create+0x44>
    LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
 8010624:	6979      	ldr	r1, [r7, #20]
 8010626:	480a      	ldr	r0, [pc, #40]	; (8010650 <pppos_create+0x64>)
 8010628:	f7f2 fae8 	bl	8002bfc <memp_free_pool>
    return NULL;
 801062c:	2300      	movs	r3, #0
 801062e:	e00b      	b.n	8010648 <pppos_create+0x5c>
  }

  memset(pppos, 0, sizeof(pppos_pcb));
 8010630:	2260      	movs	r2, #96	; 0x60
 8010632:	2100      	movs	r1, #0
 8010634:	6978      	ldr	r0, [r7, #20]
 8010636:	f002 f8a6 	bl	8012786 <memset>
  pppos->ppp = ppp;
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	693a      	ldr	r2, [r7, #16]
 801063e:	601a      	str	r2, [r3, #0]
  pppos->output_cb = output_cb;
 8010640:	697b      	ldr	r3, [r7, #20]
 8010642:	68ba      	ldr	r2, [r7, #8]
 8010644:	605a      	str	r2, [r3, #4]
  return ppp;
 8010646:	693b      	ldr	r3, [r7, #16]
}
 8010648:	4618      	mov	r0, r3
 801064a:	3718      	adds	r7, #24
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}
 8010650:	08015c70 	.word	0x08015c70
 8010654:	08015c80 	.word	0x08015c80

08010658 <pppos_write>:

/* Called by PPP core */
static err_t
pppos_write(ppp_pcb *ppp, void *ctx, struct pbuf *p)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b08c      	sub	sp, #48	; 0x30
 801065c:	af02      	add	r7, sp, #8
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	607a      	str	r2, [r7, #4]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	61fb      	str	r3, [r7, #28]
  err_t err;
  LWIP_UNUSED_ARG(ppp);

  /* Grab an output buffer. Assume PBUF_POOL_BUFSIZE is an acceptable
   * chunk size for Tx as well. */
  nb = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_RAM);
 8010668:	f44f 7220 	mov.w	r2, #640	; 0x280
 801066c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010670:	2000      	movs	r0, #0
 8010672:	f7f2 fe59 	bl	8003328 <pbuf_alloc>
 8010676:	61b8      	str	r0, [r7, #24]
  if (nb == NULL) {
 8010678:	69bb      	ldr	r3, [r7, #24]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d105      	bne.n	801068a <pppos_write+0x32>
    PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: alloc fail\n", ppp->netif->num));
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
    pbuf_free(p);
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f7f3 f8f0 	bl	8003864 <pbuf_free>
    return ERR_MEM;
 8010684:	f04f 33ff 	mov.w	r3, #4294967295
 8010688:	e051      	b.n	801072e <pppos_write+0xd6>
  }

  /* Empty the buffer */
  nb->len = 0;
 801068a:	69bb      	ldr	r3, [r7, #24]
 801068c:	2200      	movs	r2, #0
 801068e:	815a      	strh	r2, [r3, #10]
  /* Set nb->tot_len to actual payload length */
  nb->tot_len = p->len;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	895a      	ldrh	r2, [r3, #10]
 8010694:	69bb      	ldr	r3, [r7, #24]
 8010696:	811a      	strh	r2, [r3, #8]

  /* If the link has been idle, we'll send a fresh flag character to
   * flush any noise. */
  err = ERR_OK;
 8010698:	2300      	movs	r3, #0
 801069a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
 801069e:	f7f0 fd4f 	bl	8001140 <sys_now>
 80106a2:	4602      	mov	r2, r0
 80106a4:	69fb      	ldr	r3, [r7, #28]
 80106a6:	689b      	ldr	r3, [r3, #8]
 80106a8:	1ad3      	subs	r3, r2, r3
 80106aa:	2b63      	cmp	r3, #99	; 0x63
 80106ac:	d90d      	bls.n	80106ca <pppos_write+0x72>
    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 80106ae:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 80106b2:	2300      	movs	r3, #0
 80106b4:	9301      	str	r3, [sp, #4]
 80106b6:	2300      	movs	r3, #0
 80106b8:	9300      	str	r3, [sp, #0]
 80106ba:	237e      	movs	r3, #126	; 0x7e
 80106bc:	69ba      	ldr	r2, [r7, #24]
 80106be:	69f8      	ldr	r0, [r7, #28]
 80106c0:	f000 fbb2 	bl	8010e28 <pppos_output_append>
 80106c4:	4603      	mov	r3, r0
 80106c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  }

  /* Load output buffer. */
  fcs_out = PPP_INITFCS;
 80106ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80106ce:	82fb      	strh	r3, [r7, #22]
  s = (u8_t*)p->payload;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	685b      	ldr	r3, [r3, #4]
 80106d4:	627b      	str	r3, [r7, #36]	; 0x24
  n = p->len;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	895b      	ldrh	r3, [r3, #10]
 80106da:	847b      	strh	r3, [r7, #34]	; 0x22
  while (n-- > 0) {
 80106dc:	e012      	b.n	8010704 <pppos_write+0xac>
    err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 80106de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e0:	1c5a      	adds	r2, r3, #1
 80106e2:	627a      	str	r2, [r7, #36]	; 0x24
 80106e4:	781a      	ldrb	r2, [r3, #0]
 80106e6:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 80106ea:	f107 0316 	add.w	r3, r7, #22
 80106ee:	9301      	str	r3, [sp, #4]
 80106f0:	2301      	movs	r3, #1
 80106f2:	9300      	str	r3, [sp, #0]
 80106f4:	4613      	mov	r3, r2
 80106f6:	69ba      	ldr	r2, [r7, #24]
 80106f8:	69f8      	ldr	r0, [r7, #28]
 80106fa:	f000 fb95 	bl	8010e28 <pppos_output_append>
 80106fe:	4603      	mov	r3, r0
 8010700:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  while (n-- > 0) {
 8010704:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010706:	1e5a      	subs	r2, r3, #1
 8010708:	847a      	strh	r2, [r7, #34]	; 0x22
 801070a:	2b00      	cmp	r3, #0
 801070c:	d1e7      	bne.n	80106de <pppos_write+0x86>
  }

  err = pppos_output_last(pppos, err, nb, &fcs_out);
 801070e:	f107 0316 	add.w	r3, r7, #22
 8010712:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 8010716:	69ba      	ldr	r2, [r7, #24]
 8010718:	69f8      	ldr	r0, [r7, #28]
 801071a:	f000 fc0b 	bl	8010f34 <pppos_output_last>
 801071e:	4603      	mov	r3, r0
 8010720:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (err == ERR_OK) {
    PPPDEBUG(LOG_INFO, ("pppos_write[%d]: len=%d\n", ppp->netif->num, p->len));
  } else {
    PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: output failed len=%d\n", ppp->netif->num, p->len));
  }
  pbuf_free(p);
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f7f3 f89d 	bl	8003864 <pbuf_free>
  return err;
 801072a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
}
 801072e:	4618      	mov	r0, r3
 8010730:	3728      	adds	r7, #40	; 0x28
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}

08010736 <pppos_netif_output>:

/* Called by PPP core */
static err_t
pppos_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *pb, u16_t protocol)
{
 8010736:	b580      	push	{r7, lr}
 8010738:	b08c      	sub	sp, #48	; 0x30
 801073a:	af02      	add	r7, sp, #8
 801073c:	60f8      	str	r0, [r7, #12]
 801073e:	60b9      	str	r1, [r7, #8]
 8010740:	607a      	str	r2, [r7, #4]
 8010742:	807b      	strh	r3, [r7, #2]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	61bb      	str	r3, [r7, #24]
  err_t err;
  LWIP_UNUSED_ARG(ppp);

  /* Grab an output buffer. Assume PBUF_POOL_BUFSIZE is an acceptable
   * chunk size for Tx as well. */
  nb = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_RAM);
 8010748:	f44f 7220 	mov.w	r2, #640	; 0x280
 801074c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010750:	2000      	movs	r0, #0
 8010752:	f7f2 fde9 	bl	8003328 <pbuf_alloc>
 8010756:	6178      	str	r0, [r7, #20]
  if (nb == NULL) {
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d102      	bne.n	8010764 <pppos_netif_output+0x2e>
    PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: alloc fail\n", ppp->netif->num));
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
    return ERR_MEM;
 801075e:	f04f 33ff 	mov.w	r3, #4294967295
 8010762:	e0ac      	b.n	80108be <pppos_netif_output+0x188>
  }

  /* Empty the buffer */
  nb->len = 0;
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	2200      	movs	r2, #0
 8010768:	815a      	strh	r2, [r3, #10]
  /* Set nb->tot_len to actual payload length */
  nb->tot_len = pb->tot_len;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	891a      	ldrh	r2, [r3, #8]
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	811a      	strh	r2, [r3, #8]

  /* If the link has been idle, we'll send a fresh flag character to
   * flush any noise. */
  err = ERR_OK;
 8010772:	2300      	movs	r3, #0
 8010774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
 8010778:	f7f0 fce2 	bl	8001140 <sys_now>
 801077c:	4602      	mov	r2, r0
 801077e:	69bb      	ldr	r3, [r7, #24]
 8010780:	689b      	ldr	r3, [r3, #8]
 8010782:	1ad3      	subs	r3, r2, r3
 8010784:	2b63      	cmp	r3, #99	; 0x63
 8010786:	d90d      	bls.n	80107a4 <pppos_netif_output+0x6e>
    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 8010788:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 801078c:	2300      	movs	r3, #0
 801078e:	9301      	str	r3, [sp, #4]
 8010790:	2300      	movs	r3, #0
 8010792:	9300      	str	r3, [sp, #0]
 8010794:	237e      	movs	r3, #126	; 0x7e
 8010796:	697a      	ldr	r2, [r7, #20]
 8010798:	69b8      	ldr	r0, [r7, #24]
 801079a:	f000 fb45 	bl	8010e28 <pppos_output_append>
 801079e:	4603      	mov	r3, r0
 80107a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }

  fcs_out = PPP_INITFCS;
 80107a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80107a8:	827b      	strh	r3, [r7, #18]
  if (!pppos->accomp) {
 80107aa:	69bb      	ldr	r3, [r7, #24]
 80107ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80107b0:	f003 0304 	and.w	r3, r3, #4
 80107b4:	b2db      	uxtb	r3, r3
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d11d      	bne.n	80107f6 <pppos_netif_output+0xc0>
    err = pppos_output_append(pppos, err,  nb, PPP_ALLSTATIONS, 1, &fcs_out);
 80107ba:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 80107be:	f107 0312 	add.w	r3, r7, #18
 80107c2:	9301      	str	r3, [sp, #4]
 80107c4:	2301      	movs	r3, #1
 80107c6:	9300      	str	r3, [sp, #0]
 80107c8:	23ff      	movs	r3, #255	; 0xff
 80107ca:	697a      	ldr	r2, [r7, #20]
 80107cc:	69b8      	ldr	r0, [r7, #24]
 80107ce:	f000 fb2b 	bl	8010e28 <pppos_output_append>
 80107d2:	4603      	mov	r3, r0
 80107d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    err = pppos_output_append(pppos, err,  nb, PPP_UI, 1, &fcs_out);
 80107d8:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 80107dc:	f107 0312 	add.w	r3, r7, #18
 80107e0:	9301      	str	r3, [sp, #4]
 80107e2:	2301      	movs	r3, #1
 80107e4:	9300      	str	r3, [sp, #0]
 80107e6:	2303      	movs	r3, #3
 80107e8:	697a      	ldr	r2, [r7, #20]
 80107ea:	69b8      	ldr	r0, [r7, #24]
 80107ec:	f000 fb1c 	bl	8010e28 <pppos_output_append>
 80107f0:	4603      	mov	r3, r0
 80107f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
  if (!pppos->pcomp || protocol > 0xFF) {
 80107f6:	69bb      	ldr	r3, [r7, #24]
 80107f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80107fc:	f003 0302 	and.w	r3, r3, #2
 8010800:	b2db      	uxtb	r3, r3
 8010802:	2b00      	cmp	r3, #0
 8010804:	d002      	beq.n	801080c <pppos_netif_output+0xd6>
 8010806:	887b      	ldrh	r3, [r7, #2]
 8010808:	2bff      	cmp	r3, #255	; 0xff
 801080a:	d912      	bls.n	8010832 <pppos_netif_output+0xfc>
    err = pppos_output_append(pppos, err,  nb, (protocol >> 8) & 0xFF, 1, &fcs_out);
 801080c:	887b      	ldrh	r3, [r7, #2]
 801080e:	0a1b      	lsrs	r3, r3, #8
 8010810:	b29b      	uxth	r3, r3
 8010812:	b2da      	uxtb	r2, r3
 8010814:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8010818:	f107 0312 	add.w	r3, r7, #18
 801081c:	9301      	str	r3, [sp, #4]
 801081e:	2301      	movs	r3, #1
 8010820:	9300      	str	r3, [sp, #0]
 8010822:	4613      	mov	r3, r2
 8010824:	697a      	ldr	r2, [r7, #20]
 8010826:	69b8      	ldr	r0, [r7, #24]
 8010828:	f000 fafe 	bl	8010e28 <pppos_output_append>
 801082c:	4603      	mov	r3, r0
 801082e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
  err = pppos_output_append(pppos, err,  nb, protocol & 0xFF, 1, &fcs_out);
 8010832:	887b      	ldrh	r3, [r7, #2]
 8010834:	b2da      	uxtb	r2, r3
 8010836:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 801083a:	f107 0312 	add.w	r3, r7, #18
 801083e:	9301      	str	r3, [sp, #4]
 8010840:	2301      	movs	r3, #1
 8010842:	9300      	str	r3, [sp, #0]
 8010844:	4613      	mov	r3, r2
 8010846:	697a      	ldr	r2, [r7, #20]
 8010848:	69b8      	ldr	r0, [r7, #24]
 801084a:	f000 faed 	bl	8010e28 <pppos_output_append>
 801084e:	4603      	mov	r3, r0
 8010850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Load packet. */
  for(p = pb; p; p = p->next) {
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	627b      	str	r3, [r7, #36]	; 0x24
 8010858:	e021      	b.n	801089e <pppos_netif_output+0x168>
    u16_t n = p->len;
 801085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801085c:	895b      	ldrh	r3, [r3, #10]
 801085e:	843b      	strh	r3, [r7, #32]
    u8_t *s = (u8_t*)p->payload;
 8010860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010862:	685b      	ldr	r3, [r3, #4]
 8010864:	61fb      	str	r3, [r7, #28]

    while (n-- > 0) {
 8010866:	e012      	b.n	801088e <pppos_netif_output+0x158>
      err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	1c5a      	adds	r2, r3, #1
 801086c:	61fa      	str	r2, [r7, #28]
 801086e:	781a      	ldrb	r2, [r3, #0]
 8010870:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8010874:	f107 0312 	add.w	r3, r7, #18
 8010878:	9301      	str	r3, [sp, #4]
 801087a:	2301      	movs	r3, #1
 801087c:	9300      	str	r3, [sp, #0]
 801087e:	4613      	mov	r3, r2
 8010880:	697a      	ldr	r2, [r7, #20]
 8010882:	69b8      	ldr	r0, [r7, #24]
 8010884:	f000 fad0 	bl	8010e28 <pppos_output_append>
 8010888:	4603      	mov	r3, r0
 801088a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while (n-- > 0) {
 801088e:	8c3b      	ldrh	r3, [r7, #32]
 8010890:	1e5a      	subs	r2, r3, #1
 8010892:	843a      	strh	r2, [r7, #32]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d1e7      	bne.n	8010868 <pppos_netif_output+0x132>
  for(p = pb; p; p = p->next) {
 8010898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	627b      	str	r3, [r7, #36]	; 0x24
 801089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d1da      	bne.n	801085a <pppos_netif_output+0x124>
    }
  }

  err = pppos_output_last(pppos, err, nb, &fcs_out);
 80108a4:	f107 0312 	add.w	r3, r7, #18
 80108a8:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 80108ac:	697a      	ldr	r2, [r7, #20]
 80108ae:	69b8      	ldr	r0, [r7, #24]
 80108b0:	f000 fb40 	bl	8010f34 <pppos_output_last>
 80108b4:	4603      	mov	r3, r0
 80108b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err == ERR_OK) {
    PPPDEBUG(LOG_INFO, ("pppos_netif_output[%d]: proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
  } else {
    PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: output failed proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
  }
  return err;
 80108ba:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3728      	adds	r7, #40	; 0x28
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}

080108c6 <pppos_connect>:

static void
pppos_connect(ppp_pcb *ppp, void *ctx)
{
 80108c6:	b580      	push	{r7, lr}
 80108c8:	b084      	sub	sp, #16
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
 80108ce:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	60fb      	str	r3, [r7, #12]
  /* input pbuf left over from last session? */
  pppos_input_free_current_packet(pppos);
#endif /* PPP_INPROC_IRQ_SAFE */

  /* reset PPPoS control block to its initial state */
  memset(&pppos->last_xmit, 0, sizeof(pppos_pcb) - offsetof(pppos_pcb, last_xmit));
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	3308      	adds	r3, #8
 80108d8:	2258      	movs	r2, #88	; 0x58
 80108da:	2100      	movs	r1, #0
 80108dc:	4618      	mov	r0, r3
 80108de:	f001 ff52 	bl	8012786 <memset>

  /*
   * Default the in and out accm so that escape and flag characters
   * are always escaped.
   */
  pppos->in_accm[15] = 0x60; /* no need to protect since RX is not running */
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2260      	movs	r2, #96	; 0x60
 80108e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  pppos->out_accm[15] = 0x60;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	2260      	movs	r2, #96	; 0x60
 80108ee:	76da      	strb	r2, [r3, #27]
  PPPOS_PROTECT(lev);
  pppos->open = 1;
 80108f0:	68fa      	ldr	r2, [r7, #12]
 80108f2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80108f6:	f043 0301 	orr.w	r3, r3, #1
 80108fa:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

  /*
   * Start the connection and handle incoming events (packet or timeout).
   */
  PPPDEBUG(LOG_INFO, ("pppos_connect: unit %d: connecting\n", ppp->netif->num));
  ppp_start(ppp); /* notify upper layers */
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f7ff fcaa 	bl	8010258 <ppp_start>
}
 8010904:	bf00      	nop
 8010906:	3710      	adds	r7, #16
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}

0801090c <pppos_disconnect>:
}
#endif /* PPP_SERVER */

static void
pppos_disconnect(ppp_pcb *ppp, void *ctx)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b084      	sub	sp, #16
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
 8010914:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	60fb      	str	r3, [r7, #12]
  PPPOS_DECL_PROTECT(lev);

  PPPOS_PROTECT(lev);
  pppos->open = 0;
 801091a:	68fa      	ldr	r2, [r7, #12]
 801091c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8010920:	f36f 0300 	bfc	r3, #0, #1
 8010924:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
   * pppos_input_free_current_packet() here because
   * rx IRQ might still call pppos_input().
   */
#if !PPP_INPROC_IRQ_SAFE
  /* input pbuf left ? */
  pppos_input_free_current_packet(pppos);
 8010928:	68f8      	ldr	r0, [r7, #12]
 801092a:	f000 fa4b 	bl	8010dc4 <pppos_input_free_current_packet>
#endif /* !PPP_INPROC_IRQ_SAFE */

  ppp_link_end(ppp); /* notify upper layers */
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f7ff fca4 	bl	801027c <ppp_link_end>
}
 8010934:	bf00      	nop
 8010936:	3710      	adds	r7, #16
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}

0801093c <pppos_destroy>:

static err_t
pppos_destroy(ppp_pcb *ppp, void *ctx)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b084      	sub	sp, #16
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	60fb      	str	r3, [r7, #12]
#if PPP_INPROC_IRQ_SAFE
  /* input pbuf left ? */
  pppos_input_free_current_packet(pppos);
#endif /* PPP_INPROC_IRQ_SAFE */

  LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
 801094a:	68f9      	ldr	r1, [r7, #12]
 801094c:	4803      	ldr	r0, [pc, #12]	; (801095c <pppos_destroy+0x20>)
 801094e:	f7f2 f955 	bl	8002bfc <memp_free_pool>
  return ERR_OK;
 8010952:	2300      	movs	r3, #0
}
 8010954:	4618      	mov	r0, r3
 8010956:	3710      	adds	r7, #16
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}
 801095c:	08015c70 	.word	0x08015c70

08010960 <pppos_input>:
 * @param s received data
 * @param l length of received data
 */
void
pppos_input(ppp_pcb *ppp, const void *s, int l)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b08c      	sub	sp, #48	; 0x30
 8010964:	af00      	add	r7, sp, #0
 8010966:	60f8      	str	r0, [r7, #12]
 8010968:	60b9      	str	r1, [r7, #8]
 801096a:	607a      	str	r2, [r7, #4]
  pppos_pcb *pppos = (pppos_pcb *)ppp->link_ctx_cb;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	69db      	ldr	r3, [r3, #28]
 8010970:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *next_pbuf;
  const u8_t *s_u8 = (const u8_t *)s;
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Don't even bother parsing data if we are disconnected.
   * Added to that, ppp_input must never be called if the upper layer is down.
   */
  PPPOS_PROTECT(lev);
  if (!pppos->open) {
 8010976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010978:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801097c:	f003 0301 	and.w	r3, r3, #1
 8010980:	b2db      	uxtb	r3, r3
 8010982:	2b00      	cmp	r3, #0
 8010984:	f000 81b6 	beq.w	8010cf4 <pppos_input+0x394>
    return;
  }
  PPPOS_UNPROTECT(lev);

  PPPDEBUG(LOG_DEBUG, ("pppos_input[%d]: got %d bytes\n", ppp->netif->num, l));
  while (l-- > 0) {
 8010988:	e1ad      	b.n	8010ce6 <pppos_input+0x386>
    cur_char = *s_u8++;
 801098a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801098c:	1c5a      	adds	r2, r3, #1
 801098e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010990:	781b      	ldrb	r3, [r3, #0]
 8010992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    PPPOS_PROTECT(lev);
    escaped = ESCAPE_P(pppos->in_accm, cur_char);
 8010996:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801099a:	08db      	lsrs	r3, r3, #3
 801099c:	b2db      	uxtb	r3, r3
 801099e:	461a      	mov	r2, r3
 80109a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a2:	4413      	add	r3, r2
 80109a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80109a8:	b25a      	sxtb	r2, r3
 80109aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80109ae:	f003 0307 	and.w	r3, r3, #7
 80109b2:	2101      	movs	r1, #1
 80109b4:	fa01 f303 	lsl.w	r3, r1, r3
 80109b8:	b25b      	sxtb	r3, r3
 80109ba:	4013      	ands	r3, r2
 80109bc:	b25b      	sxtb	r3, r3
 80109be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    PPPOS_UNPROTECT(lev);

    /* Handle special characters. */
    if (escaped) {
 80109c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	f000 8094 	beq.w	8010af4 <pppos_input+0x194>
      /* Check for escape sequences. */
      /* XXX Note that this does not handle an escaped 0x5d character which
       * would appear as an escape character.  Since this is an ASCII ']'
       * and there is no reason that I know of to escape it, I won't complicate
       * the code to handle this case. GLL */
      if (cur_char == PPP_ESCAPE) {
 80109cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80109d0:	2b7d      	cmp	r3, #125	; 0x7d
 80109d2:	d104      	bne.n	80109de <pppos_input+0x7e>
        pppos->in_escaped = 1;
 80109d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d6:	2201      	movs	r2, #1
 80109d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80109dc:	e183      	b.n	8010ce6 <pppos_input+0x386>
      /* Check for the flag character. */
      } else if (cur_char == PPP_FLAG) {
 80109de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80109e2:	2b7e      	cmp	r3, #126	; 0x7e
 80109e4:	f040 817f 	bne.w	8010ce6 <pppos_input+0x386>
        /* If this is just an extra flag character, ignore it. */
        if (pppos->in_state <= PDADDRESS) {
 80109e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80109ee:	2b01      	cmp	r3, #1
 80109f0:	d972      	bls.n	8010ad8 <pppos_input+0x178>
          /* ignore it */;
        /* If we haven't received the packet header, drop what has come in. */
        } else if (pppos->in_state < PDDATA) {
 80109f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80109f8:	2b04      	cmp	r3, #4
 80109fa:	d803      	bhi.n	8010a04 <pppos_input+0xa4>
          PPPDEBUG(LOG_WARNING,
                   ("pppos_input[%d]: Dropping incomplete packet %d\n",
                    ppp->netif->num, pppos->in_state));
          LINK_STATS_INC(link.lenerr);
          pppos_input_drop(pppos);
 80109fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109fe:	f000 fa07 	bl	8010e10 <pppos_input_drop>
 8010a02:	e069      	b.n	8010ad8 <pppos_input+0x178>
        /* If the fcs is invalid, drop the packet. */
        } else if (pppos->in_fcs != PPP_GOODFCS) {
 8010a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010a0a:	f24f 02b8 	movw	r2, #61624	; 0xf0b8
 8010a0e:	4293      	cmp	r3, r2
 8010a10:	d003      	beq.n	8010a1a <pppos_input+0xba>
          PPPDEBUG(LOG_INFO,
                   ("pppos_input[%d]: Dropping bad fcs 0x%"X16_F" proto=0x%"X16_F"\n",
                    ppp->netif->num, pppos->in_fcs, pppos->in_protocol));
          /* Note: If you get lots of these, check for UART frame errors or try different baud rate */
          LINK_STATS_INC(link.chkerr);
          pppos_input_drop(pppos);
 8010a12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a14:	f000 f9fc 	bl	8010e10 <pppos_input_drop>
 8010a18:	e05e      	b.n	8010ad8 <pppos_input+0x178>
        } else if (!pppos->in_tail) {
 8010a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d103      	bne.n	8010a2a <pppos_input+0xca>
          PPPDEBUG(LOG_INFO,
                   ("pppos_input[%d]: Dropping null in_tail\n",
                    ppp->netif->num));
          LINK_STATS_INC(link.drop);
          pppos_input_drop(pppos);
 8010a22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a24:	f000 f9f4 	bl	8010e10 <pppos_input_drop>
 8010a28:	e056      	b.n	8010ad8 <pppos_input+0x178>
        /* Otherwise it's a good packet so pass it on. */
        } else {
          struct pbuf *inp;
          /* Trim off the checksum. */
          if(pppos->in_tail->len > 2) {
 8010a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a2e:	895b      	ldrh	r3, [r3, #10]
 8010a30:	2b02      	cmp	r3, #2
 8010a32:	d91c      	bls.n	8010a6e <pppos_input+0x10e>
            pppos->in_tail->len -= 2;
 8010a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a3a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8010a3c:	8952      	ldrh	r2, [r2, #10]
 8010a3e:	3a02      	subs	r2, #2
 8010a40:	b292      	uxth	r2, r2
 8010a42:	815a      	strh	r2, [r3, #10]

            pppos->in_tail->tot_len = pppos->in_tail->len;
 8010a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a4a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8010a4c:	8952      	ldrh	r2, [r2, #10]
 8010a4e:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 8010a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a58:	429a      	cmp	r2, r3
 8010a5a:	d027      	beq.n	8010aac <pppos_input+0x14c>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 8010a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a64:	4619      	mov	r1, r3
 8010a66:	4610      	mov	r0, r2
 8010a68:	f7f2 ffc4 	bl	80039f4 <pbuf_cat>
 8010a6c:	e01e      	b.n	8010aac <pppos_input+0x14c>
            }
          } else {
            pppos->in_tail->tot_len = pppos->in_tail->len;
 8010a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a74:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8010a76:	8952      	ldrh	r2, [r2, #10]
 8010a78:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 8010a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d007      	beq.n	8010a96 <pppos_input+0x136>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 8010a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a8e:	4619      	mov	r1, r3
 8010a90:	4610      	mov	r0, r2
 8010a92:	f7f2 ffaf 	bl	80039f4 <pbuf_cat>
            }

            pbuf_realloc(pppos->in_head, pppos->in_head->tot_len - 2);
 8010a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a9e:	891b      	ldrh	r3, [r3, #8]
 8010aa0:	3b02      	subs	r3, #2
 8010aa2:	b29b      	uxth	r3, r3
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	4610      	mov	r0, r2
 8010aa8:	f7f2 fd30 	bl	800350c <pbuf_realloc>
          }

          /* Dispatch the packet thereby consuming it. */
          inp = pppos->in_head;
 8010aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ab0:	613b      	str	r3, [r7, #16]
          /* Packet consumed, release our references. */
          pppos->in_head = NULL;
 8010ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	651a      	str	r2, [r3, #80]	; 0x50
          pppos->in_tail = NULL;
 8010ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aba:	2200      	movs	r2, #0
 8010abc:	655a      	str	r2, [r3, #84]	; 0x54
            pbuf_free(inp);
            LINK_STATS_INC(link.drop);
            MIB2_STATS_NETIF_INC(ppp->netif, ifindiscards);
          }
#else /* PPP_INPROC_IRQ_SAFE */
          ppp_input(ppp, inp);
 8010abe:	6939      	ldr	r1, [r7, #16]
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	f7ff fbfb 	bl	80102bc <ppp_input>
          /* ppp_input can disconnect the interface, we need to abort to prevent a memory
           * leak if there are remaining bytes because pppos_connect and pppos_listen
           * functions expect input buffer to be free. Furthermore there are no real
           * reason to continue reading bytes if we are disconnected.
           */
          if (!pppos->open) {
 8010ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010acc:	f003 0301 	and.w	r3, r3, #1
 8010ad0:	b2db      	uxtb	r3, r3
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	f000 8110 	beq.w	8010cf8 <pppos_input+0x398>
          }
#endif /* PPP_INPROC_IRQ_SAFE */
        }

        /* Prepare for a new packet. */
        pppos->in_fcs = PPP_INITFCS;
 8010ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ade:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
        pppos->in_state = PDADDRESS;
 8010ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae4:	2201      	movs	r2, #1
 8010ae6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        pppos->in_escaped = 0;
 8010aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aec:	2200      	movs	r2, #0
 8010aee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8010af2:	e0f8      	b.n	8010ce6 <pppos_input+0x386>
                 ("pppos_input[%d]: Dropping ACCM char <%d>\n", ppp->netif->num, cur_char));
      }
    /* Process other characters. */
    } else {
      /* Unencode escaped characters. */
      if (pppos->in_escaped) {
 8010af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d009      	beq.n	8010b12 <pppos_input+0x1b2>
        pppos->in_escaped = 0;
 8010afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b00:	2200      	movs	r2, #0
 8010b02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        cur_char ^= PPP_TRANS;
 8010b06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010b0a:	f083 0320 	eor.w	r3, r3, #32
 8010b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      }

      /* Process character relative to current state. */
      switch (pppos->in_state) {
 8010b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8010b18:	2b05      	cmp	r3, #5
 8010b1a:	f200 80ce 	bhi.w	8010cba <pppos_input+0x35a>
 8010b1e:	a201      	add	r2, pc, #4	; (adr r2, 8010b24 <pppos_input+0x1c4>)
 8010b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b24:	08010cbb 	.word	0x08010cbb
 8010b28:	08010b3d 	.word	0x08010b3d
 8010b2c:	08010b4f 	.word	0x08010b4f
 8010b30:	08010b61 	.word	0x08010b61
 8010b34:	08010b9d 	.word	0x08010b9d
 8010b38:	08010bbd 	.word	0x08010bbd
        case PDIDLE:                    /* Idle state - wait for flag character. */
          break;
        case PDADDRESS:                 /* Process address field. */
          if (cur_char == PPP_ALLSTATIONS) {
 8010b3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010b40:	2bff      	cmp	r3, #255	; 0xff
 8010b42:	d104      	bne.n	8010b4e <pppos_input+0x1ee>
            pppos->in_state = PDCONTROL;
 8010b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b46:	2202      	movs	r2, #2
 8010b48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            break;
 8010b4c:	e0b6      	b.n	8010cbc <pppos_input+0x35c>
          }
          /* Else assume compressed address and control fields so
           * fall through to get the protocol... */
          /* Fall through */
        case PDCONTROL:                 /* Process control field. */
          if (cur_char == PPP_UI) {
 8010b4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010b52:	2b03      	cmp	r3, #3
 8010b54:	d104      	bne.n	8010b60 <pppos_input+0x200>
            pppos->in_state = PDPROTOCOL1;
 8010b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b58:	2203      	movs	r2, #3
 8010b5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            break;
 8010b5e:	e0ad      	b.n	8010cbc <pppos_input+0x35c>
          }
          /* Fall through */
        case PDPROTOCOL1:               /* Process protocol field 1. */
          /* If the lower bit is set, this is the end of the protocol
           * field. */
          if (cur_char & 1) {
 8010b60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010b64:	f003 0301 	and.w	r3, r3, #1
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d00a      	beq.n	8010b82 <pppos_input+0x222>
            pppos->in_protocol = cur_char;
 8010b6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010b70:	b29a      	uxth	r2, r3
 8010b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b74:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
            pppos->in_state = PDDATA;
 8010b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b7a:	2205      	movs	r2, #5
 8010b7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          } else {
            pppos->in_protocol = (u16_t)cur_char << 8;
            pppos->in_state = PDPROTOCOL2;
          }
          break;
 8010b80:	e09c      	b.n	8010cbc <pppos_input+0x35c>
            pppos->in_protocol = (u16_t)cur_char << 8;
 8010b82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010b86:	b29b      	uxth	r3, r3
 8010b88:	021b      	lsls	r3, r3, #8
 8010b8a:	b29a      	uxth	r2, r3
 8010b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b8e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
            pppos->in_state = PDPROTOCOL2;
 8010b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b94:	2204      	movs	r2, #4
 8010b96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          break;
 8010b9a:	e08f      	b.n	8010cbc <pppos_input+0x35c>
        case PDPROTOCOL2:               /* Process protocol field 2. */
          pppos->in_protocol |= cur_char;
 8010b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8010ba2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010ba6:	b29b      	uxth	r3, r3
 8010ba8:	4313      	orrs	r3, r2
 8010baa:	b29a      	uxth	r2, r3
 8010bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bae:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          pppos->in_state = PDDATA;
 8010bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb4:	2205      	movs	r2, #5
 8010bb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          break;
 8010bba:	e07f      	b.n	8010cbc <pppos_input+0x35c>
        case PDDATA:                    /* Process data byte. */
          /* Make space to receive processed data. */
          if (pppos->in_tail == NULL || pppos->in_tail->len == PBUF_POOL_BUFSIZE) {
 8010bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d005      	beq.n	8010bd0 <pppos_input+0x270>
 8010bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bc8:	895b      	ldrh	r3, [r3, #10]
 8010bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010bce:	d165      	bne.n	8010c9c <pppos_input+0x33c>
            u16_t pbuf_alloc_len;
            if (pppos->in_tail != NULL) {
 8010bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d027      	beq.n	8010c28 <pppos_input+0x2c8>
              u16_t mru;
              pppos->in_tail->tot_len = pppos->in_tail->len;
 8010bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bde:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8010be0:	8952      	ldrh	r2, [r2, #10]
 8010be2:	811a      	strh	r2, [r3, #8]
              if (pppos->in_tail != pppos->in_head) {
 8010be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010bec:	429a      	cmp	r2, r3
 8010bee:	d00a      	beq.n	8010c06 <pppos_input+0x2a6>
                pbuf_cat(pppos->in_head, pppos->in_tail);
 8010bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bf8:	4619      	mov	r1, r3
 8010bfa:	4610      	mov	r0, r2
 8010bfc:	f7f2 fefa 	bl	80039f4 <pbuf_cat>
                /* give up the in_tail reference now */
                pppos->in_tail = NULL;
 8010c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c02:	2200      	movs	r2, #0
 8010c04:	655a      	str	r2, [r3, #84]	; 0x54
              }
              /* Compute MRU including headers length.  If smaller packets are
               * requested, we must still be able to receive packets of the
               * default MRU for control packets. */
              mru = LWIP_MAX(PPP_MRU, PPP_DEFMRU)
 8010c06:	f240 6374 	movw	r3, #1652	; 0x674
 8010c0a:	843b      	strh	r3, [r7, #32]
#endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
#if PPP_INPROC_IRQ_SAFE
                + sizeof(struct pppos_input_header)
#endif /* PPP_INPROC_IRQ_SAFE */
                + sizeof(pppos->in_protocol);
              if (pppos->in_head->tot_len > mru) {
 8010c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c10:	891b      	ldrh	r3, [r3, #8]
 8010c12:	8c3a      	ldrh	r2, [r7, #32]
 8010c14:	429a      	cmp	r2, r3
 8010c16:	d207      	bcs.n	8010c28 <pppos_input+0x2c8>
                /* Packet too big. Drop the input packet and let the
                 * higher layers deal with it.  Continue processing
                 * received characters in case a new packet starts. */
                PPPDEBUG(LOG_ERR, ("pppos_input[%d]: packet too big, max_len=%d, dropping packet\n", ppp->netif->num, mru));
                LINK_STATS_INC(link.lenerr);
                pppos_input_drop(pppos);
 8010c18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c1a:	f000 f8f9 	bl	8010e10 <pppos_input_drop>
                pppos->in_state = PDIDLE;  /* Wait for flag character. */
 8010c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c20:	2200      	movs	r2, #0
 8010c22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                break;
 8010c26:	e049      	b.n	8010cbc <pppos_input+0x35c>
              }
            }
            /* If we haven't started a packet, we need a packet header. */
            pbuf_alloc_len = 0;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	83fb      	strh	r3, [r7, #30]
#endif /* PPP_IPV6_SUPPORT */
             )) {
              pbuf_alloc_len = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
            }
#endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
            next_pbuf = pbuf_alloc(PBUF_RAW, pbuf_alloc_len, PBUF_POOL);
 8010c2c:	8bfb      	ldrh	r3, [r7, #30]
 8010c2e:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8010c32:	4619      	mov	r1, r3
 8010c34:	2000      	movs	r0, #0
 8010c36:	f7f2 fb77 	bl	8003328 <pbuf_alloc>
 8010c3a:	61b8      	str	r0, [r7, #24]
            if (next_pbuf == NULL) {
 8010c3c:	69bb      	ldr	r3, [r7, #24]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d107      	bne.n	8010c52 <pppos_input+0x2f2>
              /* No free buffers.  Drop the input packet and let the
               * higher layers deal with it.  Continue processing
               * received characters in case a new packet starts. */
              PPPDEBUG(LOG_ERR, ("pppos_input[%d]: NO FREE PBUFS!\n", ppp->netif->num));
              LINK_STATS_INC(link.memerr);
              pppos_input_drop(pppos);
 8010c42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c44:	f000 f8e4 	bl	8010e10 <pppos_input_drop>
              pppos->in_state = PDIDLE;  /* Wait for flag character. */
 8010c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
              break;
 8010c50:	e034      	b.n	8010cbc <pppos_input+0x35c>
            }
            if (pppos->in_head == NULL) {
 8010c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d11d      	bne.n	8010c96 <pppos_input+0x336>
              u8_t *payload = ((u8_t*)next_pbuf->payload) + pbuf_alloc_len;
 8010c5a:	69bb      	ldr	r3, [r7, #24]
 8010c5c:	685a      	ldr	r2, [r3, #4]
 8010c5e:	8bfb      	ldrh	r3, [r7, #30]
 8010c60:	4413      	add	r3, r2
 8010c62:	617b      	str	r3, [r7, #20]
#if PPP_INPROC_IRQ_SAFE
              ((struct pppos_input_header*)payload)->ppp = ppp;
              payload += sizeof(struct pppos_input_header);
              next_pbuf->len += sizeof(struct pppos_input_header);
#endif /* PPP_INPROC_IRQ_SAFE */
              next_pbuf->len += sizeof(pppos->in_protocol);
 8010c64:	69bb      	ldr	r3, [r7, #24]
 8010c66:	895b      	ldrh	r3, [r3, #10]
 8010c68:	3302      	adds	r3, #2
 8010c6a:	b29a      	uxth	r2, r3
 8010c6c:	69bb      	ldr	r3, [r7, #24]
 8010c6e:	815a      	strh	r2, [r3, #10]
              *(payload++) = pppos->in_protocol >> 8;
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	1c5a      	adds	r2, r3, #1
 8010c74:	617a      	str	r2, [r7, #20]
 8010c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c78:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8010c7c:	0a12      	lsrs	r2, r2, #8
 8010c7e:	b292      	uxth	r2, r2
 8010c80:	b2d2      	uxtb	r2, r2
 8010c82:	701a      	strb	r2, [r3, #0]
              *(payload) = pppos->in_protocol & 0xFF;
 8010c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010c8a:	b2da      	uxtb	r2, r3
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	701a      	strb	r2, [r3, #0]
              pppos->in_head = next_pbuf;
 8010c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c92:	69ba      	ldr	r2, [r7, #24]
 8010c94:	651a      	str	r2, [r3, #80]	; 0x50
            }
            pppos->in_tail = next_pbuf;
 8010c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c98:	69ba      	ldr	r2, [r7, #24]
 8010c9a:	655a      	str	r2, [r3, #84]	; 0x54
          }
          /* Load character into buffer. */
          ((u8_t*)pppos->in_tail->payload)[pppos->in_tail->len++] = cur_char;
 8010c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ca0:	6859      	ldr	r1, [r3, #4]
 8010ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ca6:	895a      	ldrh	r2, [r3, #10]
 8010ca8:	1c50      	adds	r0, r2, #1
 8010caa:	b280      	uxth	r0, r0
 8010cac:	8158      	strh	r0, [r3, #10]
 8010cae:	4613      	mov	r3, r2
 8010cb0:	440b      	add	r3, r1
 8010cb2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8010cb6:	701a      	strb	r2, [r3, #0]
          break;
 8010cb8:	e000      	b.n	8010cbc <pppos_input+0x35c>
        default:
          break;
 8010cba:	bf00      	nop
      }

      /* update the frame check sequence number. */
      pppos->in_fcs = PPP_FCS(pppos->in_fcs, cur_char);
 8010cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010cc2:	0a1b      	lsrs	r3, r3, #8
 8010cc4:	b29a      	uxth	r2, r3
 8010cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010ccc:	4619      	mov	r1, r3
 8010cce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010cd2:	404b      	eors	r3, r1
 8010cd4:	b2db      	uxtb	r3, r3
 8010cd6:	490a      	ldr	r1, [pc, #40]	; (8010d00 <pppos_input+0x3a0>)
 8010cd8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010cdc:	4053      	eors	r3, r2
 8010cde:	b29a      	uxth	r2, r3
 8010ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  while (l-- > 0) {
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	1e5a      	subs	r2, r3, #1
 8010cea:	607a      	str	r2, [r7, #4]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	f73f ae4c 	bgt.w	801098a <pppos_input+0x2a>
 8010cf2:	e002      	b.n	8010cfa <pppos_input+0x39a>
    return;
 8010cf4:	bf00      	nop
 8010cf6:	e000      	b.n	8010cfa <pppos_input+0x39a>
            break;
 8010cf8:	bf00      	nop
    }
  } /* while (l-- > 0), all bytes processed */
}
 8010cfa:	3730      	adds	r7, #48	; 0x30
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}
 8010d00:	08015c9c 	.word	0x08015c9c

08010d04 <pppos_send_config>:
}
#endif /* PPP_INPROC_IRQ_SAFE */

static void
pppos_send_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
{
 8010d04:	b480      	push	{r7}
 8010d06:	b087      	sub	sp, #28
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	60f8      	str	r0, [r7, #12]
 8010d0c:	60b9      	str	r1, [r7, #8]
 8010d0e:	607a      	str	r2, [r7, #4]
 8010d10:	603b      	str	r3, [r7, #0]
  int i;
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(ppp);

  pppos->pcomp = pcomp;
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	b2db      	uxtb	r3, r3
 8010d1a:	f003 0301 	and.w	r3, r3, #1
 8010d1e:	b2d9      	uxtb	r1, r3
 8010d20:	693a      	ldr	r2, [r7, #16]
 8010d22:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8010d26:	f361 0341 	bfi	r3, r1, #1, #1
 8010d2a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
  pppos->accomp = accomp;
 8010d2e:	6a3b      	ldr	r3, [r7, #32]
 8010d30:	b2db      	uxtb	r3, r3
 8010d32:	f003 0301 	and.w	r3, r3, #1
 8010d36:	b2d9      	uxtb	r1, r3
 8010d38:	693a      	ldr	r2, [r7, #16]
 8010d3a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8010d3e:	f361 0382 	bfi	r3, r1, #2, #1
 8010d42:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

  /* Load the ACCM bits for the 32 control codes. */
  for (i = 0; i < 32/8; i++) {
 8010d46:	2300      	movs	r3, #0
 8010d48:	617b      	str	r3, [r7, #20]
 8010d4a:	e00e      	b.n	8010d6a <pppos_send_config+0x66>
    pppos->out_accm[i] = (u8_t)((accm >> (8 * i)) & 0xFF);
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	00db      	lsls	r3, r3, #3
 8010d50:	687a      	ldr	r2, [r7, #4]
 8010d52:	fa22 f303 	lsr.w	r3, r2, r3
 8010d56:	b2d9      	uxtb	r1, r3
 8010d58:	693a      	ldr	r2, [r7, #16]
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	4413      	add	r3, r2
 8010d5e:	330c      	adds	r3, #12
 8010d60:	460a      	mov	r2, r1
 8010d62:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 32/8; i++) {
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	3301      	adds	r3, #1
 8010d68:	617b      	str	r3, [r7, #20]
 8010d6a:	697b      	ldr	r3, [r7, #20]
 8010d6c:	2b03      	cmp	r3, #3
 8010d6e:	dded      	ble.n	8010d4c <pppos_send_config+0x48>
  }

  PPPDEBUG(LOG_INFO, ("pppos_send_config[%d]: out_accm=%X %X %X %X\n",
            pppos->ppp->netif->num,
            pppos->out_accm[0], pppos->out_accm[1], pppos->out_accm[2], pppos->out_accm[3]));
}
 8010d70:	bf00      	nop
 8010d72:	371c      	adds	r7, #28
 8010d74:	46bd      	mov	sp, r7
 8010d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7a:	4770      	bx	lr

08010d7c <pppos_recv_config>:

static void
pppos_recv_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b087      	sub	sp, #28
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	60f8      	str	r0, [r7, #12]
 8010d84:	60b9      	str	r1, [r7, #8]
 8010d86:	607a      	str	r2, [r7, #4]
 8010d88:	603b      	str	r3, [r7, #0]
  int i;
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(pcomp);
  LWIP_UNUSED_ARG(accomp);

  /* Load the ACCM bits for the 32 control codes. */
  PPPOS_PROTECT(lev);
  for (i = 0; i < 32 / 8; i++) {
 8010d8e:	2300      	movs	r3, #0
 8010d90:	617b      	str	r3, [r7, #20]
 8010d92:	e00e      	b.n	8010db2 <pppos_recv_config+0x36>
    pppos->in_accm[i] = (u8_t)(accm >> (i * 8));
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	00db      	lsls	r3, r3, #3
 8010d98:	687a      	ldr	r2, [r7, #4]
 8010d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8010d9e:	b2d9      	uxtb	r1, r3
 8010da0:	693a      	ldr	r2, [r7, #16]
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	4413      	add	r3, r2
 8010da6:	332d      	adds	r3, #45	; 0x2d
 8010da8:	460a      	mov	r2, r1
 8010daa:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 32 / 8; i++) {
 8010dac:	697b      	ldr	r3, [r7, #20]
 8010dae:	3301      	adds	r3, #1
 8010db0:	617b      	str	r3, [r7, #20]
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	2b03      	cmp	r3, #3
 8010db6:	dded      	ble.n	8010d94 <pppos_recv_config+0x18>
  PPPOS_UNPROTECT(lev);

  PPPDEBUG(LOG_INFO, ("pppos_recv_config[%d]: in_accm=%X %X %X %X\n",
            pppos->ppp->netif->num,
            pppos->in_accm[0], pppos->in_accm[1], pppos->in_accm[2], pppos->in_accm[3]));
}
 8010db8:	bf00      	nop
 8010dba:	371c      	adds	r7, #28
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc2:	4770      	bx	lr

08010dc4 <pppos_input_free_current_packet>:
/*
 * Drop the input packet.
 */
static void
pppos_input_free_current_packet(pppos_pcb *pppos)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
  if (pppos->in_head != NULL) {
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d016      	beq.n	8010e02 <pppos_input_free_current_packet+0x3e>
    if (pppos->in_tail && (pppos->in_tail != pppos->in_head)) {
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d00a      	beq.n	8010df2 <pppos_input_free_current_packet+0x2e>
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010de4:	429a      	cmp	r2, r3
 8010de6:	d004      	beq.n	8010df2 <pppos_input_free_current_packet+0x2e>
      pbuf_free(pppos->in_tail);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7f2 fd39 	bl	8003864 <pbuf_free>
    }
    pbuf_free(pppos->in_head);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010df6:	4618      	mov	r0, r3
 8010df8:	f7f2 fd34 	bl	8003864 <pbuf_free>
    pppos->in_head = NULL;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	651a      	str	r2, [r3, #80]	; 0x50
  }
  pppos->in_tail = NULL;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2200      	movs	r2, #0
 8010e06:	655a      	str	r2, [r3, #84]	; 0x54
}
 8010e08:	bf00      	nop
 8010e0a:	3708      	adds	r7, #8
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}

08010e10 <pppos_input_drop>:
/*
 * Drop the input packet and increase error counters.
 */
static void
pppos_input_drop(pppos_pcb *pppos)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b082      	sub	sp, #8
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
#if 0
    PPPDEBUG(LOG_INFO, ("pppos_input_drop: %d:%.*H\n", pppos->in_head->len, min(60, pppos->in_head->len * 2), pppos->in_head->payload));
#endif
    PPPDEBUG(LOG_INFO, ("pppos_input_drop: pbuf len=%d, addr %p\n", pppos->in_head->len, (void*)pppos->in_head));
  }
  pppos_input_free_current_packet(pppos);
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f7ff ffd3 	bl	8010dc4 <pppos_input_free_current_packet>
  vj_uncompress_err(&pppos->ppp->vj_comp);
#endif /* VJ_SUPPORT */

  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(pppos->ppp->netif, ifindiscards);
}
 8010e1e:	bf00      	nop
 8010e20:	3708      	adds	r7, #8
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}
	...

08010e28 <pppos_output_append>:
 * If pbuf is full, send the pbuf and reuse it.
 * Return the current pbuf.
 */
static err_t
pppos_output_append(pppos_pcb *pppos, err_t err, struct pbuf *nb, u8_t c, u8_t accm, u16_t *fcs)
{
 8010e28:	b590      	push	{r4, r7, lr}
 8010e2a:	b087      	sub	sp, #28
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	60f8      	str	r0, [r7, #12]
 8010e30:	607a      	str	r2, [r7, #4]
 8010e32:	461a      	mov	r2, r3
 8010e34:	460b      	mov	r3, r1
 8010e36:	72fb      	strb	r3, [r7, #11]
 8010e38:	4613      	mov	r3, r2
 8010e3a:	72bb      	strb	r3, [r7, #10]
  if (err != ERR_OK) {
 8010e3c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d002      	beq.n	8010e4a <pppos_output_append+0x22>
    return err;
 8010e44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010e48:	e06e      	b.n	8010f28 <pppos_output_append+0x100>
  }

  /* Make sure there is room for the character and an escape code.
   * Sure we don't quite fill the buffer if the character doesn't
   * get escaped but is one character worth complicating this? */
  if ((PBUF_POOL_BUFSIZE - nb->len) < 2) {
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	895b      	ldrh	r3, [r3, #10]
 8010e4e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8010e52:	2b01      	cmp	r3, #1
 8010e54:	dc19      	bgt.n	8010e8a <pppos_output_append+0x62>
    u32_t l = pppos->output_cb(pppos->ppp, nb->payload, nb->len, pppos->ppp->ctx_cb);
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	685c      	ldr	r4, [r3, #4]
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	6818      	ldr	r0, [r3, #0]
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	6859      	ldr	r1, [r3, #4]
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	895b      	ldrh	r3, [r3, #10]
 8010e66:	461a      	mov	r2, r3
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e6e:	47a0      	blx	r4
 8010e70:	6178      	str	r0, [r7, #20]
    if (l != nb->len) {
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	895b      	ldrh	r3, [r3, #10]
 8010e76:	461a      	mov	r2, r3
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	429a      	cmp	r2, r3
 8010e7c:	d002      	beq.n	8010e84 <pppos_output_append+0x5c>
      return ERR_IF;
 8010e7e:	f06f 030b 	mvn.w	r3, #11
 8010e82:	e051      	b.n	8010f28 <pppos_output_append+0x100>
    }
    nb->len = 0;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2200      	movs	r2, #0
 8010e88:	815a      	strh	r2, [r3, #10]
  }

  /* Update FCS before checking for special characters. */
  if (fcs) {
 8010e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d010      	beq.n	8010eb2 <pppos_output_append+0x8a>
    *fcs = PPP_FCS(*fcs, c);
 8010e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e92:	881b      	ldrh	r3, [r3, #0]
 8010e94:	0a1b      	lsrs	r3, r3, #8
 8010e96:	b29a      	uxth	r2, r3
 8010e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e9a:	881b      	ldrh	r3, [r3, #0]
 8010e9c:	4619      	mov	r1, r3
 8010e9e:	7abb      	ldrb	r3, [r7, #10]
 8010ea0:	404b      	eors	r3, r1
 8010ea2:	b2db      	uxtb	r3, r3
 8010ea4:	4922      	ldr	r1, [pc, #136]	; (8010f30 <pppos_output_append+0x108>)
 8010ea6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010eaa:	4053      	eors	r3, r2
 8010eac:	b29a      	uxth	r2, r3
 8010eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb0:	801a      	strh	r2, [r3, #0]
  }

  /* Copy to output buffer escaping special characters. */
  if (accm && ESCAPE_P(pppos->out_accm, c)) {
 8010eb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d02a      	beq.n	8010f10 <pppos_output_append+0xe8>
 8010eba:	7abb      	ldrb	r3, [r7, #10]
 8010ebc:	08db      	lsrs	r3, r3, #3
 8010ebe:	b2db      	uxtb	r3, r3
 8010ec0:	461a      	mov	r2, r3
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	4413      	add	r3, r2
 8010ec6:	7b1b      	ldrb	r3, [r3, #12]
 8010ec8:	461a      	mov	r2, r3
 8010eca:	7abb      	ldrb	r3, [r7, #10]
 8010ecc:	f003 0307 	and.w	r3, r3, #7
 8010ed0:	fa42 f303 	asr.w	r3, r2, r3
 8010ed4:	f003 0301 	and.w	r3, r3, #1
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d019      	beq.n	8010f10 <pppos_output_append+0xe8>
    *((u8_t*)nb->payload + nb->len++) = PPP_ESCAPE;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	685a      	ldr	r2, [r3, #4]
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	895b      	ldrh	r3, [r3, #10]
 8010ee4:	1c59      	adds	r1, r3, #1
 8010ee6:	b288      	uxth	r0, r1
 8010ee8:	6879      	ldr	r1, [r7, #4]
 8010eea:	8148      	strh	r0, [r1, #10]
 8010eec:	4413      	add	r3, r2
 8010eee:	227d      	movs	r2, #125	; 0x7d
 8010ef0:	701a      	strb	r2, [r3, #0]
    *((u8_t*)nb->payload + nb->len++) = c ^ PPP_TRANS;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	685a      	ldr	r2, [r3, #4]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	895b      	ldrh	r3, [r3, #10]
 8010efa:	1c59      	adds	r1, r3, #1
 8010efc:	b288      	uxth	r0, r1
 8010efe:	6879      	ldr	r1, [r7, #4]
 8010f00:	8148      	strh	r0, [r1, #10]
 8010f02:	4413      	add	r3, r2
 8010f04:	7aba      	ldrb	r2, [r7, #10]
 8010f06:	f082 0220 	eor.w	r2, r2, #32
 8010f0a:	b2d2      	uxtb	r2, r2
 8010f0c:	701a      	strb	r2, [r3, #0]
 8010f0e:	e00a      	b.n	8010f26 <pppos_output_append+0xfe>
  } else {
    *((u8_t*)nb->payload + nb->len++) = c;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	685a      	ldr	r2, [r3, #4]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	895b      	ldrh	r3, [r3, #10]
 8010f18:	1c59      	adds	r1, r3, #1
 8010f1a:	b288      	uxth	r0, r1
 8010f1c:	6879      	ldr	r1, [r7, #4]
 8010f1e:	8148      	strh	r0, [r1, #10]
 8010f20:	4413      	add	r3, r2
 8010f22:	7aba      	ldrb	r2, [r7, #10]
 8010f24:	701a      	strb	r2, [r3, #0]
  }

  return ERR_OK;
 8010f26:	2300      	movs	r3, #0
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	371c      	adds	r7, #28
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd90      	pop	{r4, r7, pc}
 8010f30:	08015c9c 	.word	0x08015c9c

08010f34 <pppos_output_last>:

static err_t
pppos_output_last(pppos_pcb *pppos, err_t err, struct pbuf *nb, u16_t *fcs)
{
 8010f34:	b590      	push	{r4, r7, lr}
 8010f36:	b089      	sub	sp, #36	; 0x24
 8010f38:	af02      	add	r7, sp, #8
 8010f3a:	60f8      	str	r0, [r7, #12]
 8010f3c:	607a      	str	r2, [r7, #4]
 8010f3e:	603b      	str	r3, [r7, #0]
 8010f40:	460b      	mov	r3, r1
 8010f42:	72fb      	strb	r3, [r7, #11]
  ppp_pcb *ppp = pppos->ppp;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	617b      	str	r3, [r7, #20]

  /* Add FCS and trailing flag. */
  err = pppos_output_append(pppos, err,  nb, ~(*fcs) & 0xFF, 1, NULL);
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	881b      	ldrh	r3, [r3, #0]
 8010f4e:	b2db      	uxtb	r3, r3
 8010f50:	43db      	mvns	r3, r3
 8010f52:	b2da      	uxtb	r2, r3
 8010f54:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8010f58:	2300      	movs	r3, #0
 8010f5a:	9301      	str	r3, [sp, #4]
 8010f5c:	2301      	movs	r3, #1
 8010f5e:	9300      	str	r3, [sp, #0]
 8010f60:	4613      	mov	r3, r2
 8010f62:	687a      	ldr	r2, [r7, #4]
 8010f64:	68f8      	ldr	r0, [r7, #12]
 8010f66:	f7ff ff5f 	bl	8010e28 <pppos_output_append>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	72fb      	strb	r3, [r7, #11]
  err = pppos_output_append(pppos, err,  nb, (~(*fcs) >> 8) & 0xFF, 1, NULL);
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	881b      	ldrh	r3, [r3, #0]
 8010f72:	43db      	mvns	r3, r3
 8010f74:	121b      	asrs	r3, r3, #8
 8010f76:	b2da      	uxtb	r2, r3
 8010f78:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	9301      	str	r3, [sp, #4]
 8010f80:	2301      	movs	r3, #1
 8010f82:	9300      	str	r3, [sp, #0]
 8010f84:	4613      	mov	r3, r2
 8010f86:	687a      	ldr	r2, [r7, #4]
 8010f88:	68f8      	ldr	r0, [r7, #12]
 8010f8a:	f7ff ff4d 	bl	8010e28 <pppos_output_append>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	72fb      	strb	r3, [r7, #11]
  err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 8010f92:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8010f96:	2300      	movs	r3, #0
 8010f98:	9301      	str	r3, [sp, #4]
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	9300      	str	r3, [sp, #0]
 8010f9e:	237e      	movs	r3, #126	; 0x7e
 8010fa0:	687a      	ldr	r2, [r7, #4]
 8010fa2:	68f8      	ldr	r0, [r7, #12]
 8010fa4:	f7ff ff40 	bl	8010e28 <pppos_output_append>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK) {
 8010fac:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d122      	bne.n	8010ffa <pppos_output_last+0xc6>
    goto failed;
  }

  /* Send remaining buffer if not empty */
  if (nb->len > 0) {
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	895b      	ldrh	r3, [r3, #10]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d014      	beq.n	8010fe6 <pppos_output_last+0xb2>
    u32_t l = pppos->output_cb(ppp, nb->payload, nb->len, ppp->ctx_cb);
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	685c      	ldr	r4, [r3, #4]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6859      	ldr	r1, [r3, #4]
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	895b      	ldrh	r3, [r3, #10]
 8010fc8:	461a      	mov	r2, r3
 8010fca:	697b      	ldr	r3, [r7, #20]
 8010fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fce:	6978      	ldr	r0, [r7, #20]
 8010fd0:	47a0      	blx	r4
 8010fd2:	6138      	str	r0, [r7, #16]
    if (l != nb->len) {
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	895b      	ldrh	r3, [r3, #10]
 8010fd8:	461a      	mov	r2, r3
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	d002      	beq.n	8010fe6 <pppos_output_last+0xb2>
      err = ERR_IF;
 8010fe0:	23f4      	movs	r3, #244	; 0xf4
 8010fe2:	72fb      	strb	r3, [r7, #11]
      goto failed;
 8010fe4:	e00a      	b.n	8010ffc <pppos_output_last+0xc8>
    }
  }

  pppos->last_xmit = sys_now();
 8010fe6:	f7f0 f8ab 	bl	8001140 <sys_now>
 8010fea:	4602      	mov	r2, r0
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	609a      	str	r2, [r3, #8]
  MIB2_STATS_NETIF_ADD(ppp->netif, ifoutoctets, nb->tot_len);
  MIB2_STATS_NETIF_INC(ppp->netif, ifoutucastpkts);
  LINK_STATS_INC(link.xmit);
  pbuf_free(nb);
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f7f2 fc37 	bl	8003864 <pbuf_free>
  return ERR_OK;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	e008      	b.n	801100c <pppos_output_last+0xd8>
    goto failed;
 8010ffa:	bf00      	nop

failed:
  pppos->last_xmit = 0; /* prepend PPP_FLAG to next packet */
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	2200      	movs	r2, #0
 8011000:	609a      	str	r2, [r3, #8]
  LINK_STATS_INC(link.err);
  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
  pbuf_free(nb);
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f7f2 fc2e 	bl	8003864 <pbuf_free>
  return err;
 8011008:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801100c:	4618      	mov	r0, r3
 801100e:	371c      	adds	r7, #28
 8011010:	46bd      	mov	sp, r7
 8011012:	bd90      	pop	{r4, r7, pc}

08011014 <upap_init>:


/*
 * upap_init - Initialize a UPAP unit.
 */
static void upap_init(ppp_pcb *pcb) {
 8011014:	b480      	push	{r7}
 8011016:	b083      	sub	sp, #12
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
    pcb->upap.us_user = NULL;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2200      	movs	r2, #0
 8011020:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->upap.us_userlen = 0;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2200      	movs	r2, #0
 8011026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pcb->upap.us_passwd = NULL;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2200      	movs	r2, #0
 801102e:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->upap.us_passwdlen = 0;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	2200      	movs	r2, #0
 8011034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pcb->upap.us_clientstate = UPAPCS_INITIAL;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2200      	movs	r2, #0
 801103c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if PPP_SERVER
    pcb->upap.us_serverstate = UPAPSS_INITIAL;
#endif /* PPP_SERVER */
    pcb->upap.us_id = 0;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2200      	movs	r2, #0
 8011044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 8011048:	bf00      	nop
 801104a:	370c      	adds	r7, #12
 801104c:	46bd      	mov	sp, r7
 801104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011052:	4770      	bx	lr

08011054 <upap_authwithpeer>:
/*
 * upap_authwithpeer - Authenticate us with our peer (start client).
 *
 * Set new state and send authenticate's.
 */
void upap_authwithpeer(ppp_pcb *pcb, const char *user, const char *password) {
 8011054:	b580      	push	{r7, lr}
 8011056:	b084      	sub	sp, #16
 8011058:	af00      	add	r7, sp, #0
 801105a:	60f8      	str	r0, [r7, #12]
 801105c:	60b9      	str	r1, [r7, #8]
 801105e:	607a      	str	r2, [r7, #4]

    if(!user || !password)
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d03f      	beq.n	80110e6 <upap_authwithpeer+0x92>
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d03c      	beq.n	80110e6 <upap_authwithpeer+0x92>
        return;

    /* Save the username and password we're given */
    pcb->upap.us_user = user;
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	68ba      	ldr	r2, [r7, #8]
 8011070:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->upap.us_userlen = (u8_t)LWIP_MIN(strlen(user), 0xff);
 8011072:	68b8      	ldr	r0, [r7, #8]
 8011074:	f7ef f8b6 	bl	80001e4 <strlen>
 8011078:	4603      	mov	r3, r0
 801107a:	2bfe      	cmp	r3, #254	; 0xfe
 801107c:	d805      	bhi.n	801108a <upap_authwithpeer+0x36>
 801107e:	68b8      	ldr	r0, [r7, #8]
 8011080:	f7ef f8b0 	bl	80001e4 <strlen>
 8011084:	4603      	mov	r3, r0
 8011086:	b2da      	uxtb	r2, r3
 8011088:	e000      	b.n	801108c <upap_authwithpeer+0x38>
 801108a:	22ff      	movs	r2, #255	; 0xff
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pcb->upap.us_passwd = password;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	687a      	ldr	r2, [r7, #4]
 8011096:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->upap.us_passwdlen = (u8_t)LWIP_MIN(strlen(password), 0xff);
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f7ef f8a3 	bl	80001e4 <strlen>
 801109e:	4603      	mov	r3, r0
 80110a0:	2bfe      	cmp	r3, #254	; 0xfe
 80110a2:	d805      	bhi.n	80110b0 <upap_authwithpeer+0x5c>
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	f7ef f89d 	bl	80001e4 <strlen>
 80110aa:	4603      	mov	r3, r0
 80110ac:	b2da      	uxtb	r2, r3
 80110ae:	e000      	b.n	80110b2 <upap_authwithpeer+0x5e>
 80110b0:	22ff      	movs	r2, #255	; 0xff
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pcb->upap.us_transmits = 0;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	2200      	movs	r2, #0
 80110bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    /* Lower layer up yet? */
    if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d004      	beq.n	80110d4 <upap_authwithpeer+0x80>
	pcb->upap.us_clientstate == UPAPCS_PENDING) {
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
 80110d0:	2b02      	cmp	r3, #2
 80110d2:	d104      	bne.n	80110de <upap_authwithpeer+0x8a>
	pcb->upap.us_clientstate = UPAPCS_PENDING;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	2202      	movs	r2, #2
 80110d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	return;
 80110dc:	e004      	b.n	80110e8 <upap_authwithpeer+0x94>
    }

    upap_sauthreq(pcb);		/* Start protocol */
 80110de:	68f8      	ldr	r0, [r7, #12]
 80110e0:	f000 f92c 	bl	801133c <upap_sauthreq>
 80110e4:	e000      	b.n	80110e8 <upap_authwithpeer+0x94>
        return;
 80110e6:	bf00      	nop
}
 80110e8:	3710      	adds	r7, #16
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}

080110ee <upap_timeout>:
#endif /* PPP_SERVER */

/*
 * upap_timeout - Retransmission timer for sending auth-reqs expired.
 */
static void upap_timeout(void *arg) {
 80110ee:	b580      	push	{r7, lr}
 80110f0:	b084      	sub	sp, #16
 80110f2:	af00      	add	r7, sp, #0
 80110f4:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = (ppp_pcb*)arg;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	60fb      	str	r3, [r7, #12]

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ)
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011100:	2b03      	cmp	r3, #3
 8011102:	d114      	bne.n	801112e <upap_timeout+0x40>
	return;

    if (pcb->upap.us_transmits >= pcb->settings.pap_max_transmits) {
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	7b5b      	ldrb	r3, [r3, #13]
 801110e:	429a      	cmp	r2, r3
 8011110:	d309      	bcc.n	8011126 <upap_timeout+0x38>
	/* give up in disgust */
	ppp_error(("No response to PAP authenticate-requests"));
	pcb->upap.us_clientstate = UPAPCS_BADAUTH;
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	2205      	movs	r2, #5
 8011116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	auth_withpeer_fail(pcb, PPP_PAP);
 801111a:	f24c 0123 	movw	r1, #49187	; 0xc023
 801111e:	68f8      	ldr	r0, [r7, #12]
 8011120:	f7f8 fdd8 	bl	8009cd4 <auth_withpeer_fail>
	return;
 8011124:	e004      	b.n	8011130 <upap_timeout+0x42>
    }

    upap_sauthreq(pcb);		/* Send Authenticate-Request */
 8011126:	68f8      	ldr	r0, [r7, #12]
 8011128:	f000 f908 	bl	801133c <upap_sauthreq>
 801112c:	e000      	b.n	8011130 <upap_timeout+0x42>
	return;
 801112e:	bf00      	nop
}
 8011130:	3710      	adds	r7, #16
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}

08011136 <upap_lowerup>:
/*
 * upap_lowerup - The lower layer is up.
 *
 * Start authenticating if pending.
 */
static void upap_lowerup(ppp_pcb *pcb) {
 8011136:	b580      	push	{r7, lr}
 8011138:	b082      	sub	sp, #8
 801113a:	af00      	add	r7, sp, #0
 801113c:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_INITIAL)
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011144:	2b00      	cmp	r3, #0
 8011146:	d104      	bne.n	8011152 <upap_lowerup+0x1c>
	pcb->upap.us_clientstate = UPAPCS_CLOSED;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2201      	movs	r2, #1
 801114c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	pcb->upap.us_serverstate = UPAPSS_LISTEN;
	if (pcb->settings.pap_req_timeout > 0)
	    TIMEOUT(upap_reqtimeout, pcb, pcb->settings.pap_req_timeout);
    }
#endif /* PPP_SERVER */
}
 8011150:	e007      	b.n	8011162 <upap_lowerup+0x2c>
    else if (pcb->upap.us_clientstate == UPAPCS_PENDING) {
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011158:	2b02      	cmp	r3, #2
 801115a:	d102      	bne.n	8011162 <upap_lowerup+0x2c>
	upap_sauthreq(pcb);	/* send an auth-request */
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f000 f8ed 	bl	801133c <upap_sauthreq>
}
 8011162:	bf00      	nop
 8011164:	3708      	adds	r7, #8
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}
	...

0801116c <upap_lowerdown>:
/*
 * upap_lowerdown - The lower layer is down.
 *
 * Cancel all timeouts.
 */
static void upap_lowerdown(ppp_pcb *pcb) {
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ)	/* Timeout pending? */
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801117a:	2b03      	cmp	r3, #3
 801117c:	d103      	bne.n	8011186 <upap_lowerdown+0x1a>
	UNTIMEOUT(upap_timeout, pcb);		/* Cancel timeout */
 801117e:	6879      	ldr	r1, [r7, #4]
 8011180:	4805      	ldr	r0, [pc, #20]	; (8011198 <upap_lowerdown+0x2c>)
 8011182:	f7f8 fbcd 	bl	8009920 <sys_untimeout>
#if PPP_SERVER
    if (pcb->upap.us_serverstate == UPAPSS_LISTEN && pcb->settings.pap_req_timeout > 0)
	UNTIMEOUT(upap_reqtimeout, pcb);
#endif /* PPP_SERVER */

    pcb->upap.us_clientstate = UPAPCS_INITIAL;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2200      	movs	r2, #0
 801118a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if PPP_SERVER
    pcb->upap.us_serverstate = UPAPSS_INITIAL;
#endif /* PPP_SERVER */
}
 801118e:	bf00      	nop
 8011190:	3708      	adds	r7, #8
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
 8011196:	bf00      	nop
 8011198:	080110ef 	.word	0x080110ef

0801119c <upap_protrej>:
/*
 * upap_protrej - Peer doesn't speak this protocol.
 *
 * This shouldn't happen.  In any case, pretend lower layer went down.
 */
static void upap_protrej(ppp_pcb *pcb) {
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ) {
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80111aa:	2b03      	cmp	r3, #3
 80111ac:	d104      	bne.n	80111b8 <upap_protrej+0x1c>
	ppp_error(("PAP authentication failed due to protocol-reject"));
	auth_withpeer_fail(pcb, PPP_PAP);
 80111ae:	f24c 0123 	movw	r1, #49187	; 0xc023
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	f7f8 fd8e 	bl	8009cd4 <auth_withpeer_fail>
    if (pcb->upap.us_serverstate == UPAPSS_LISTEN) {
	ppp_error(("PAP authentication of peer failed (protocol-reject)"));
	auth_peer_fail(pcb, PPP_PAP);
    }
#endif /* PPP_SERVER */
    upap_lowerdown(pcb);
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f7ff ffd7 	bl	801116c <upap_lowerdown>
}
 80111be:	bf00      	nop
 80111c0:	3708      	adds	r7, #8
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}

080111c6 <upap_input>:


/*
 * upap_input - Input UPAP packet.
 */
static void upap_input(ppp_pcb *pcb, u_char *inpacket, int l) {
 80111c6:	b580      	push	{r7, lr}
 80111c8:	b088      	sub	sp, #32
 80111ca:	af00      	add	r7, sp, #0
 80111cc:	60f8      	str	r0, [r7, #12]
 80111ce:	60b9      	str	r1, [r7, #8]
 80111d0:	607a      	str	r2, [r7, #4]

    /*
     * Parse header (code, id and length).
     * If packet too short, drop it.
     */
    inp = inpacket;
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	61fb      	str	r3, [r7, #28]
    if (l < UPAP_HEADERLEN) {
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	2b03      	cmp	r3, #3
 80111da:	dd37      	ble.n	801124c <upap_input+0x86>
	UPAPDEBUG(("pap_input: rcvd short header."));
	return;
    }
    GETCHAR(code, inp);
 80111dc:	69fb      	ldr	r3, [r7, #28]
 80111de:	1c5a      	adds	r2, r3, #1
 80111e0:	61fa      	str	r2, [r7, #28]
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	76fb      	strb	r3, [r7, #27]
    GETCHAR(id, inp);
 80111e6:	69fb      	ldr	r3, [r7, #28]
 80111e8:	1c5a      	adds	r2, r3, #1
 80111ea:	61fa      	str	r2, [r7, #28]
 80111ec:	781b      	ldrb	r3, [r3, #0]
 80111ee:	76bb      	strb	r3, [r7, #26]
    GETSHORT(len, inp);
 80111f0:	69fb      	ldr	r3, [r7, #28]
 80111f2:	1c5a      	adds	r2, r3, #1
 80111f4:	61fa      	str	r2, [r7, #28]
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	021b      	lsls	r3, r3, #8
 80111fa:	617b      	str	r3, [r7, #20]
 80111fc:	69fb      	ldr	r3, [r7, #28]
 80111fe:	1c5a      	adds	r2, r3, #1
 8011200:	61fa      	str	r2, [r7, #28]
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	461a      	mov	r2, r3
 8011206:	697b      	ldr	r3, [r7, #20]
 8011208:	4313      	orrs	r3, r2
 801120a:	617b      	str	r3, [r7, #20]
    if (len < UPAP_HEADERLEN) {
 801120c:	697b      	ldr	r3, [r7, #20]
 801120e:	2b03      	cmp	r3, #3
 8011210:	dd1e      	ble.n	8011250 <upap_input+0x8a>
	UPAPDEBUG(("pap_input: rcvd illegal length."));
	return;
    }
    if (len > l) {
 8011212:	697a      	ldr	r2, [r7, #20]
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	429a      	cmp	r2, r3
 8011218:	dc1c      	bgt.n	8011254 <upap_input+0x8e>
	UPAPDEBUG(("pap_input: rcvd short packet."));
	return;
    }
    len -= UPAP_HEADERLEN;
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	3b04      	subs	r3, #4
 801121e:	617b      	str	r3, [r7, #20]

    /*
     * Action depends on code.
     */
    switch (code) {
 8011220:	7efb      	ldrb	r3, [r7, #27]
 8011222:	2b02      	cmp	r3, #2
 8011224:	d004      	beq.n	8011230 <upap_input+0x6a>
 8011226:	2b03      	cmp	r3, #3
 8011228:	d009      	beq.n	801123e <upap_input+0x78>
 801122a:	2b01      	cmp	r3, #1
 801122c:	d014      	beq.n	8011258 <upap_input+0x92>
    case UPAP_AUTHNAK:
	upap_rauthnak(pcb, inp, id, len);
	break;

    default:				/* XXX Need code reject */
	break;
 801122e:	e014      	b.n	801125a <upap_input+0x94>
	upap_rauthack(pcb, inp, id, len);
 8011230:	7eba      	ldrb	r2, [r7, #26]
 8011232:	697b      	ldr	r3, [r7, #20]
 8011234:	69f9      	ldr	r1, [r7, #28]
 8011236:	68f8      	ldr	r0, [r7, #12]
 8011238:	f000 f812 	bl	8011260 <upap_rauthack>
	break;
 801123c:	e00d      	b.n	801125a <upap_input+0x94>
	upap_rauthnak(pcb, inp, id, len);
 801123e:	7eba      	ldrb	r2, [r7, #26]
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	69f9      	ldr	r1, [r7, #28]
 8011244:	68f8      	ldr	r0, [r7, #12]
 8011246:	f000 f843 	bl	80112d0 <upap_rauthnak>
	break;
 801124a:	e006      	b.n	801125a <upap_input+0x94>
	return;
 801124c:	bf00      	nop
 801124e:	e004      	b.n	801125a <upap_input+0x94>
	return;
 8011250:	bf00      	nop
 8011252:	e002      	b.n	801125a <upap_input+0x94>
	return;
 8011254:	bf00      	nop
 8011256:	e000      	b.n	801125a <upap_input+0x94>
	break;
 8011258:	bf00      	nop
    }
}
 801125a:	3720      	adds	r7, #32
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}

08011260 <upap_rauthack>:
#endif /* PPP_SERVER */

/*
 * upap_rauthack - Receive Authenticate-Ack.
 */
static void upap_rauthack(ppp_pcb *pcb, u_char *inp, int id, int len) {
 8011260:	b580      	push	{r7, lr}
 8011262:	b086      	sub	sp, #24
 8011264:	af00      	add	r7, sp, #0
 8011266:	60f8      	str	r0, [r7, #12]
 8011268:	60b9      	str	r1, [r7, #8]
 801126a:	607a      	str	r2, [r7, #4]
 801126c:	603b      	str	r3, [r7, #0]
    u_char msglen;
    char *msg;
    LWIP_UNUSED_ARG(id);

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011274:	2b03      	cmp	r3, #3
 8011276:	d122      	bne.n	80112be <upap_rauthack+0x5e>
	return;

    /*
     * Parse message.
     */
    if (len < 1) {
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	2b00      	cmp	r3, #0
 801127c:	dd10      	ble.n	80112a0 <upap_rauthack+0x40>
	UPAPDEBUG(("pap_rauthack: ignoring missing msg-length."));
    } else {
	GETCHAR(msglen, inp);
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	1c5a      	adds	r2, r3, #1
 8011282:	60ba      	str	r2, [r7, #8]
 8011284:	781b      	ldrb	r3, [r3, #0]
 8011286:	75fb      	strb	r3, [r7, #23]
	if (msglen > 0) {
 8011288:	7dfb      	ldrb	r3, [r7, #23]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d008      	beq.n	80112a0 <upap_rauthack+0x40>
	    len -= sizeof (u_char);
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	3b01      	subs	r3, #1
 8011292:	603b      	str	r3, [r7, #0]
	    if (len < msglen) {
 8011294:	7dfa      	ldrb	r2, [r7, #23]
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	429a      	cmp	r2, r3
 801129a:	dc12      	bgt.n	80112c2 <upap_rauthack+0x62>
		UPAPDEBUG(("pap_rauthack: rcvd short packet."));
		return;
	    }
	    msg = (char *) inp;
 801129c:	68bb      	ldr	r3, [r7, #8]
 801129e:	613b      	str	r3, [r7, #16]
	    PRINTMSG(msg, msglen);
	}
    }

    UNTIMEOUT(upap_timeout, pcb);
 80112a0:	68f9      	ldr	r1, [r7, #12]
 80112a2:	480a      	ldr	r0, [pc, #40]	; (80112cc <upap_rauthack+0x6c>)
 80112a4:	f7f8 fb3c 	bl	8009920 <sys_untimeout>
    pcb->upap.us_clientstate = UPAPCS_OPEN;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	2204      	movs	r2, #4
 80112ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    auth_withpeer_success(pcb, PPP_PAP, 0);
 80112b0:	2200      	movs	r2, #0
 80112b2:	f24c 0123 	movw	r1, #49187	; 0xc023
 80112b6:	68f8      	ldr	r0, [r7, #12]
 80112b8:	f7f8 fd20 	bl	8009cfc <auth_withpeer_success>
 80112bc:	e002      	b.n	80112c4 <upap_rauthack+0x64>
	return;
 80112be:	bf00      	nop
 80112c0:	e000      	b.n	80112c4 <upap_rauthack+0x64>
		return;
 80112c2:	bf00      	nop
}
 80112c4:	3718      	adds	r7, #24
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}
 80112ca:	bf00      	nop
 80112cc:	080110ef 	.word	0x080110ef

080112d0 <upap_rauthnak>:


/*
 * upap_rauthnak - Receive Authenticate-Nak.
 */
static void upap_rauthnak(ppp_pcb *pcb, u_char *inp, int id, int len) {
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b086      	sub	sp, #24
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	60f8      	str	r0, [r7, #12]
 80112d8:	60b9      	str	r1, [r7, #8]
 80112da:	607a      	str	r2, [r7, #4]
 80112dc:	603b      	str	r3, [r7, #0]
    u_char msglen;
    char *msg;
    LWIP_UNUSED_ARG(id);

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80112e4:	2b03      	cmp	r3, #3
 80112e6:	d121      	bne.n	801132c <upap_rauthnak+0x5c>
	return;

    /*
     * Parse message.
     */
    if (len < 1) {
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	dd10      	ble.n	8011310 <upap_rauthnak+0x40>
	UPAPDEBUG(("pap_rauthnak: ignoring missing msg-length."));
    } else {
	GETCHAR(msglen, inp);
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	1c5a      	adds	r2, r3, #1
 80112f2:	60ba      	str	r2, [r7, #8]
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	75fb      	strb	r3, [r7, #23]
	if (msglen > 0) {
 80112f8:	7dfb      	ldrb	r3, [r7, #23]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d008      	beq.n	8011310 <upap_rauthnak+0x40>
	    len -= sizeof (u_char);
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	3b01      	subs	r3, #1
 8011302:	603b      	str	r3, [r7, #0]
	    if (len < msglen) {
 8011304:	7dfa      	ldrb	r2, [r7, #23]
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	429a      	cmp	r2, r3
 801130a:	dc11      	bgt.n	8011330 <upap_rauthnak+0x60>
		UPAPDEBUG(("pap_rauthnak: rcvd short packet."));
		return;
	    }
	    msg = (char *) inp;
 801130c:	68bb      	ldr	r3, [r7, #8]
 801130e:	613b      	str	r3, [r7, #16]
	    PRINTMSG(msg, msglen);
	}
    }

    UNTIMEOUT(upap_timeout, pcb);
 8011310:	68f9      	ldr	r1, [r7, #12]
 8011312:	4809      	ldr	r0, [pc, #36]	; (8011338 <upap_rauthnak+0x68>)
 8011314:	f7f8 fb04 	bl	8009920 <sys_untimeout>
    pcb->upap.us_clientstate = UPAPCS_BADAUTH;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2205      	movs	r2, #5
 801131c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    ppp_error(("PAP authentication failed"));
    auth_withpeer_fail(pcb, PPP_PAP);
 8011320:	f24c 0123 	movw	r1, #49187	; 0xc023
 8011324:	68f8      	ldr	r0, [r7, #12]
 8011326:	f7f8 fcd5 	bl	8009cd4 <auth_withpeer_fail>
 801132a:	e002      	b.n	8011332 <upap_rauthnak+0x62>
	return;
 801132c:	bf00      	nop
 801132e:	e000      	b.n	8011332 <upap_rauthnak+0x62>
		return;
 8011330:	bf00      	nop
}
 8011332:	3718      	adds	r7, #24
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}
 8011338:	080110ef 	.word	0x080110ef

0801133c <upap_sauthreq>:


/*
 * upap_sauthreq - Send an Authenticate-Request.
 */
static void upap_sauthreq(ppp_pcb *pcb) {
 801133c:	b580      	push	{r7, lr}
 801133e:	b086      	sub	sp, #24
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
	pcb->upap.us_userlen + pcb->upap.us_passwdlen;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801134a:	461a      	mov	r2, r3
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011352:	4413      	add	r3, r2
 8011354:	3306      	adds	r3, #6
    outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
 8011356:	617b      	str	r3, [r7, #20]
    p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN +outlen), PBUF_RAM);
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	b29b      	uxth	r3, r3
 801135c:	3304      	adds	r3, #4
 801135e:	b29b      	uxth	r3, r3
 8011360:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011364:	4619      	mov	r1, r3
 8011366:	2000      	movs	r0, #0
 8011368:	f7f1 ffde 	bl	8003328 <pbuf_alloc>
 801136c:	6138      	str	r0, [r7, #16]
    if(NULL == p)
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	2b00      	cmp	r3, #0
 8011372:	f000 808a 	beq.w	801148a <upap_sauthreq+0x14e>
        return;
    if(p->tot_len != p->len) {
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	891a      	ldrh	r2, [r3, #8]
 801137a:	693b      	ldr	r3, [r7, #16]
 801137c:	895b      	ldrh	r3, [r3, #10]
 801137e:	429a      	cmp	r2, r3
 8011380:	d003      	beq.n	801138a <upap_sauthreq+0x4e>
        pbuf_free(p);
 8011382:	6938      	ldr	r0, [r7, #16]
 8011384:	f7f2 fa6e 	bl	8003864 <pbuf_free>
        return;
 8011388:	e080      	b.n	801148c <upap_sauthreq+0x150>
    }

    outp = (u_char*)p->payload;
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	685b      	ldr	r3, [r3, #4]
 801138e:	60fb      	str	r3, [r7, #12]
    MAKEHEADER(outp, PPP_PAP);
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	1c5a      	adds	r2, r3, #1
 8011394:	60fa      	str	r2, [r7, #12]
 8011396:	22ff      	movs	r2, #255	; 0xff
 8011398:	701a      	strb	r2, [r3, #0]
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	1c5a      	adds	r2, r3, #1
 801139e:	60fa      	str	r2, [r7, #12]
 80113a0:	2203      	movs	r2, #3
 80113a2:	701a      	strb	r2, [r3, #0]
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	1c5a      	adds	r2, r3, #1
 80113a8:	60fa      	str	r2, [r7, #12]
 80113aa:	22c0      	movs	r2, #192	; 0xc0
 80113ac:	701a      	strb	r2, [r3, #0]
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	1c5a      	adds	r2, r3, #1
 80113b2:	60fa      	str	r2, [r7, #12]
 80113b4:	2223      	movs	r2, #35	; 0x23
 80113b6:	701a      	strb	r2, [r3, #0]

    PUTCHAR(UPAP_AUTHREQ, outp);
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	1c5a      	adds	r2, r3, #1
 80113bc:	60fa      	str	r2, [r7, #12]
 80113be:	2201      	movs	r2, #1
 80113c0:	701a      	strb	r2, [r3, #0]
    PUTCHAR(++pcb->upap.us_id, outp);
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	1c5a      	adds	r2, r3, #1
 80113c6:	60fa      	str	r2, [r7, #12]
 80113c8:	687a      	ldr	r2, [r7, #4]
 80113ca:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 80113ce:	3201      	adds	r2, #1
 80113d0:	b2d1      	uxtb	r1, r2
 80113d2:	687a      	ldr	r2, [r7, #4]
 80113d4:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
 80113d8:	687a      	ldr	r2, [r7, #4]
 80113da:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 80113de:	701a      	strb	r2, [r3, #0]
    PUTSHORT(outlen, outp);
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	1c5a      	adds	r2, r3, #1
 80113e4:	60fa      	str	r2, [r7, #12]
 80113e6:	697a      	ldr	r2, [r7, #20]
 80113e8:	1212      	asrs	r2, r2, #8
 80113ea:	b2d2      	uxtb	r2, r2
 80113ec:	701a      	strb	r2, [r3, #0]
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	1c5a      	adds	r2, r3, #1
 80113f2:	60fa      	str	r2, [r7, #12]
 80113f4:	697a      	ldr	r2, [r7, #20]
 80113f6:	b2d2      	uxtb	r2, r2
 80113f8:	701a      	strb	r2, [r3, #0]
    PUTCHAR(pcb->upap.us_userlen, outp);
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	1c5a      	adds	r2, r3, #1
 80113fe:	60fa      	str	r2, [r7, #12]
 8011400:	687a      	ldr	r2, [r7, #4]
 8011402:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8011406:	701a      	strb	r2, [r3, #0]
    MEMCPY(outp, pcb->upap.us_user, pcb->upap.us_userlen);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011412:	461a      	mov	r2, r3
 8011414:	68f8      	ldr	r0, [r7, #12]
 8011416:	f001 f991 	bl	801273c <memcpy>
    INCPTR(pcb->upap.us_userlen, outp);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011420:	461a      	mov	r2, r3
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	4413      	add	r3, r2
 8011426:	60fb      	str	r3, [r7, #12]
    PUTCHAR(pcb->upap.us_passwdlen, outp);
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	1c5a      	adds	r2, r3, #1
 801142c:	60fa      	str	r2, [r7, #12]
 801142e:	687a      	ldr	r2, [r7, #4]
 8011430:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8011434:	701a      	strb	r2, [r3, #0]
    MEMCPY(outp, pcb->upap.us_passwd, pcb->upap.us_passwdlen);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011440:	461a      	mov	r2, r3
 8011442:	68f8      	ldr	r0, [r7, #12]
 8011444:	f001 f97a 	bl	801273c <memcpy>

    ppp_write(pcb, p);
 8011448:	6939      	ldr	r1, [r7, #16]
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	f7fe ffde 	bl	801040c <ppp_write>

    TIMEOUT(upap_timeout, pcb, pcb->settings.pap_timeout_time);
 8011450:	6879      	ldr	r1, [r7, #4]
 8011452:	4810      	ldr	r0, [pc, #64]	; (8011494 <upap_sauthreq+0x158>)
 8011454:	f7f8 fa64 	bl	8009920 <sys_untimeout>
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	7b1b      	ldrb	r3, [r3, #12]
 801145c:	461a      	mov	r2, r3
 801145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011462:	fb03 f302 	mul.w	r3, r3, r2
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	490a      	ldr	r1, [pc, #40]	; (8011494 <upap_sauthreq+0x158>)
 801146a:	4618      	mov	r0, r3
 801146c:	f7f8 fa2c 	bl	80098c8 <sys_timeout>
    ++pcb->upap.us_transmits;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011476:	3301      	adds	r3, #1
 8011478:	b2da      	uxtb	r2, r3
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    pcb->upap.us_clientstate = UPAPCS_AUTHREQ;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2203      	movs	r2, #3
 8011484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011488:	e000      	b.n	801148c <upap_sauthreq+0x150>
        return;
 801148a:	bf00      	nop
}
 801148c:	3718      	adds	r7, #24
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}
 8011492:	bf00      	nop
 8011494:	080110ef 	.word	0x080110ef

08011498 <ppp_slprintf>:
 * %m (error message), %v (visible string),
 * %q (quoted string), %t (current time) and %I (IP address) formats.
 * Doesn't do floating-point formats.
 * Returns the number of chars put into buf.
 */
int ppp_slprintf(char *buf, int buflen, const char *fmt, ...) {
 8011498:	b40c      	push	{r2, r3}
 801149a:	b580      	push	{r7, lr}
 801149c:	b084      	sub	sp, #16
 801149e:	af00      	add	r7, sp, #0
 80114a0:	6078      	str	r0, [r7, #4]
 80114a2:	6039      	str	r1, [r7, #0]
    va_list args;
    int n;

    va_start(args, fmt);
 80114a4:	f107 031c 	add.w	r3, r7, #28
 80114a8:	60bb      	str	r3, [r7, #8]
    n = ppp_vslprintf(buf, buflen, fmt, args);
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	69ba      	ldr	r2, [r7, #24]
 80114ae:	6839      	ldr	r1, [r7, #0]
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f000 f809 	bl	80114c8 <ppp_vslprintf>
 80114b6:	60f8      	str	r0, [r7, #12]
    va_end(args);
    return n;
 80114b8:	68fb      	ldr	r3, [r7, #12]
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3710      	adds	r7, #16
 80114be:	46bd      	mov	sp, r7
 80114c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80114c4:	b002      	add	sp, #8
 80114c6:	4770      	bx	lr

080114c8 <ppp_vslprintf>:
/*
 * ppp_vslprintf - like ppp_slprintf, takes a va_list instead of a list of args.
 */
#define OUTCHAR(c)	(buflen > 0? (--buflen, *buf++ = (c)): 0)

int ppp_vslprintf(char *buf, int buflen, const char *fmt, va_list args) {
 80114c8:	b590      	push	{r4, r7, lr}
 80114ca:	b0a1      	sub	sp, #132	; 0x84
 80114cc:	af04      	add	r7, sp, #16
 80114ce:	60f8      	str	r0, [r7, #12]
 80114d0:	60b9      	str	r1, [r7, #8]
 80114d2:	607a      	str	r2, [r7, #4]
 80114d4:	603b      	str	r3, [r7, #0]
    int c, i, n;
    int width, prec, fillch;
    int base, len, neg, quoted;
    unsigned long val = 0;
 80114d6:	2300      	movs	r3, #0
 80114d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    static char hexchars[] = "0123456789abcdef";
#if PRINTPKT_SUPPORT
    struct buffer_info bufinfo;
#endif /* PRINTPKT_SUPPORT */

    buf0 = buf;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    --buflen;
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	3b01      	subs	r3, #1
 80114e2:	60bb      	str	r3, [r7, #8]
    while (buflen > 0) {
 80114e4:	e3e8      	b.n	8011cb8 <ppp_vslprintf+0x7f0>
	for (f = fmt; *f != '%' && *f != 0; ++f)
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80114ea:	e002      	b.n	80114f2 <ppp_vslprintf+0x2a>
 80114ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114ee:	3301      	adds	r3, #1
 80114f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80114f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	2b25      	cmp	r3, #37	; 0x25
 80114f8:	d003      	beq.n	8011502 <ppp_vslprintf+0x3a>
 80114fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114fc:	781b      	ldrb	r3, [r3, #0]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d1f4      	bne.n	80114ec <ppp_vslprintf+0x24>
	    ;
	if (f > fmt) {
 8011502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	429a      	cmp	r2, r3
 8011508:	d919      	bls.n	801153e <ppp_vslprintf+0x76>
	    len = f - fmt;
 801150a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	1ad3      	subs	r3, r2, r3
 8011510:	657b      	str	r3, [r7, #84]	; 0x54
	    if (len > buflen)
 8011512:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	429a      	cmp	r2, r3
 8011518:	dd01      	ble.n	801151e <ppp_vslprintf+0x56>
		len = buflen;
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	657b      	str	r3, [r7, #84]	; 0x54
	    memcpy(buf, fmt, len);
 801151e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011520:	461a      	mov	r2, r3
 8011522:	6879      	ldr	r1, [r7, #4]
 8011524:	68f8      	ldr	r0, [r7, #12]
 8011526:	f001 f909 	bl	801273c <memcpy>
	    buf += len;
 801152a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801152c:	68fa      	ldr	r2, [r7, #12]
 801152e:	4413      	add	r3, r2
 8011530:	60fb      	str	r3, [r7, #12]
	    buflen -= len;
 8011532:	68ba      	ldr	r2, [r7, #8]
 8011534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011536:	1ad3      	subs	r3, r2, r3
 8011538:	60bb      	str	r3, [r7, #8]
	    fmt = f;
 801153a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801153c:	607b      	str	r3, [r7, #4]
	}
	if (*fmt == 0)
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	781b      	ldrb	r3, [r3, #0]
 8011542:	2b00      	cmp	r3, #0
 8011544:	f000 83bd 	beq.w	8011cc2 <ppp_vslprintf+0x7fa>
	    break;
	c = *++fmt;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	3301      	adds	r3, #1
 801154c:	607b      	str	r3, [r7, #4]
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	781b      	ldrb	r3, [r3, #0]
 8011552:	66fb      	str	r3, [r7, #108]	; 0x6c
	width = 0;
 8011554:	2300      	movs	r3, #0
 8011556:	667b      	str	r3, [r7, #100]	; 0x64
	prec = -1;
 8011558:	f04f 33ff 	mov.w	r3, #4294967295
 801155c:	663b      	str	r3, [r7, #96]	; 0x60
	fillch = ' ';
 801155e:	2320      	movs	r3, #32
 8011560:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (c == '0') {
 8011562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011564:	2b30      	cmp	r3, #48	; 0x30
 8011566:	d107      	bne.n	8011578 <ppp_vslprintf+0xb0>
	    fillch = '0';
 8011568:	2330      	movs	r3, #48	; 0x30
 801156a:	65fb      	str	r3, [r7, #92]	; 0x5c
	    c = *++fmt;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	3301      	adds	r3, #1
 8011570:	607b      	str	r3, [r7, #4]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	781b      	ldrb	r3, [r3, #0]
 8011576:	66fb      	str	r3, [r7, #108]	; 0x6c
	}
	if (c == '*') {
 8011578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801157a:	2b2a      	cmp	r3, #42	; 0x2a
 801157c:	d11b      	bne.n	80115b6 <ppp_vslprintf+0xee>
	    width = va_arg(args, int);
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	1d1a      	adds	r2, r3, #4
 8011582:	603a      	str	r2, [r7, #0]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	667b      	str	r3, [r7, #100]	; 0x64
	    c = *++fmt;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	3301      	adds	r3, #1
 801158c:	607b      	str	r3, [r7, #4]
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	781b      	ldrb	r3, [r3, #0]
 8011592:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011594:	e01b      	b.n	80115ce <ppp_vslprintf+0x106>
	} else {
	    while (lwip_isdigit(c)) {
		width = width * 10 + c - '0';
 8011596:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011598:	4613      	mov	r3, r2
 801159a:	009b      	lsls	r3, r3, #2
 801159c:	4413      	add	r3, r2
 801159e:	005b      	lsls	r3, r3, #1
 80115a0:	461a      	mov	r2, r3
 80115a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115a4:	4413      	add	r3, r2
 80115a6:	3b30      	subs	r3, #48	; 0x30
 80115a8:	667b      	str	r3, [r7, #100]	; 0x64
		c = *++fmt;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	3301      	adds	r3, #1
 80115ae:	607b      	str	r3, [r7, #4]
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	781b      	ldrb	r3, [r3, #0]
 80115b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	    while (lwip_isdigit(c)) {
 80115b6:	f001 f8a1 	bl	80126fc <__locale_ctype_ptr>
 80115ba:	4602      	mov	r2, r0
 80115bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115be:	b2db      	uxtb	r3, r3
 80115c0:	3301      	adds	r3, #1
 80115c2:	4413      	add	r3, r2
 80115c4:	781b      	ldrb	r3, [r3, #0]
 80115c6:	f003 0304 	and.w	r3, r3, #4
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d1e3      	bne.n	8011596 <ppp_vslprintf+0xce>
	    }
	}
	if (c == '.') {
 80115ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115d0:	2b2e      	cmp	r3, #46	; 0x2e
 80115d2:	d133      	bne.n	801163c <ppp_vslprintf+0x174>
	    c = *++fmt;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	3301      	adds	r3, #1
 80115d8:	607b      	str	r3, [r7, #4]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	781b      	ldrb	r3, [r3, #0]
 80115de:	66fb      	str	r3, [r7, #108]	; 0x6c
	    if (c == '*') {
 80115e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115e2:	2b2a      	cmp	r3, #42	; 0x2a
 80115e4:	d10b      	bne.n	80115fe <ppp_vslprintf+0x136>
		prec = va_arg(args, int);
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	1d1a      	adds	r2, r3, #4
 80115ea:	603a      	str	r2, [r7, #0]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	663b      	str	r3, [r7, #96]	; 0x60
		c = *++fmt;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	3301      	adds	r3, #1
 80115f4:	607b      	str	r3, [r7, #4]
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80115fc:	e01e      	b.n	801163c <ppp_vslprintf+0x174>
	    } else {
		prec = 0;
 80115fe:	2300      	movs	r3, #0
 8011600:	663b      	str	r3, [r7, #96]	; 0x60
		while (lwip_isdigit(c)) {
 8011602:	e00f      	b.n	8011624 <ppp_vslprintf+0x15c>
		    prec = prec * 10 + c - '0';
 8011604:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011606:	4613      	mov	r3, r2
 8011608:	009b      	lsls	r3, r3, #2
 801160a:	4413      	add	r3, r2
 801160c:	005b      	lsls	r3, r3, #1
 801160e:	461a      	mov	r2, r3
 8011610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011612:	4413      	add	r3, r2
 8011614:	3b30      	subs	r3, #48	; 0x30
 8011616:	663b      	str	r3, [r7, #96]	; 0x60
		    c = *++fmt;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	3301      	adds	r3, #1
 801161c:	607b      	str	r3, [r7, #4]
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	66fb      	str	r3, [r7, #108]	; 0x6c
		while (lwip_isdigit(c)) {
 8011624:	f001 f86a 	bl	80126fc <__locale_ctype_ptr>
 8011628:	4602      	mov	r2, r0
 801162a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801162c:	b2db      	uxtb	r3, r3
 801162e:	3301      	adds	r3, #1
 8011630:	4413      	add	r3, r2
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	f003 0304 	and.w	r3, r3, #4
 8011638:	2b00      	cmp	r3, #0
 801163a:	d1e3      	bne.n	8011604 <ppp_vslprintf+0x13c>
		}
	    }
	}
	str = 0;
 801163c:	2300      	movs	r3, #0
 801163e:	647b      	str	r3, [r7, #68]	; 0x44
	base = 0;
 8011640:	2300      	movs	r3, #0
 8011642:	65bb      	str	r3, [r7, #88]	; 0x58
	neg = 0;
 8011644:	2300      	movs	r3, #0
 8011646:	653b      	str	r3, [r7, #80]	; 0x50
	++fmt;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	3301      	adds	r3, #1
 801164c:	607b      	str	r3, [r7, #4]
	switch (c) {
 801164e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011650:	3b42      	subs	r3, #66	; 0x42
 8011652:	2b36      	cmp	r3, #54	; 0x36
 8011654:	f200 8289 	bhi.w	8011b6a <ppp_vslprintf+0x6a2>
 8011658:	a201      	add	r2, pc, #4	; (adr r2, 8011660 <ppp_vslprintf+0x198>)
 801165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801165e:	bf00      	nop
 8011660:	08011ae9 	.word	0x08011ae9
 8011664:	08011b6b 	.word	0x08011b6b
 8011668:	08011b6b 	.word	0x08011b6b
 801166c:	08011b6b 	.word	0x08011b6b
 8011670:	08011b6b 	.word	0x08011b6b
 8011674:	08011b6b 	.word	0x08011b6b
 8011678:	08011b6b 	.word	0x08011b6b
 801167c:	08011833 	.word	0x08011833
 8011680:	08011b6b 	.word	0x08011b6b
 8011684:	08011b6b 	.word	0x08011b6b
 8011688:	08011b6b 	.word	0x08011b6b
 801168c:	08011b6b 	.word	0x08011b6b
 8011690:	08011b6b 	.word	0x08011b6b
 8011694:	08011b6b 	.word	0x08011b6b
 8011698:	08011b6b 	.word	0x08011b6b
 801169c:	08011b6b 	.word	0x08011b6b
 80116a0:	08011b6b 	.word	0x08011b6b
 80116a4:	08011b6b 	.word	0x08011b6b
 80116a8:	08011b6b 	.word	0x08011b6b
 80116ac:	08011b6b 	.word	0x08011b6b
 80116b0:	08011b6b 	.word	0x08011b6b
 80116b4:	08011b6b 	.word	0x08011b6b
 80116b8:	080117ff 	.word	0x080117ff
 80116bc:	08011b6b 	.word	0x08011b6b
 80116c0:	08011b6b 	.word	0x08011b6b
 80116c4:	08011b6b 	.word	0x08011b6b
 80116c8:	08011b6b 	.word	0x08011b6b
 80116cc:	08011b6b 	.word	0x08011b6b
 80116d0:	08011b6b 	.word	0x08011b6b
 80116d4:	08011b6b 	.word	0x08011b6b
 80116d8:	08011b6b 	.word	0x08011b6b
 80116dc:	08011b6b 	.word	0x08011b6b
 80116e0:	08011b6b 	.word	0x08011b6b
 80116e4:	0801181b 	.word	0x0801181b
 80116e8:	080117b9 	.word	0x080117b9
 80116ec:	08011b6b 	.word	0x08011b6b
 80116f0:	08011b6b 	.word	0x08011b6b
 80116f4:	08011b6b 	.word	0x08011b6b
 80116f8:	08011b6b 	.word	0x08011b6b
 80116fc:	08011b6b 	.word	0x08011b6b
 8011700:	08011b6b 	.word	0x08011b6b
 8011704:	08011b6b 	.word	0x08011b6b
 8011708:	0801173d 	.word	0x0801173d
 801170c:	08011b6b 	.word	0x08011b6b
 8011710:	08011b6b 	.word	0x08011b6b
 8011714:	080117ef 	.word	0x080117ef
 8011718:	08011b6b 	.word	0x08011b6b
 801171c:	08011875 	.word	0x08011875
 8011720:	08011b6b 	.word	0x08011b6b
 8011724:	0801180f 	.word	0x0801180f
 8011728:	08011b6b 	.word	0x08011b6b
 801172c:	080117df 	.word	0x080117df
 8011730:	08011875 	.word	0x08011875
 8011734:	08011b6b 	.word	0x08011b6b
 8011738:	080117ff 	.word	0x080117ff
	case 'l':
	    c = *fmt++;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	1c5a      	adds	r2, r3, #1
 8011740:	607a      	str	r2, [r7, #4]
 8011742:	781b      	ldrb	r3, [r3, #0]
 8011744:	66fb      	str	r3, [r7, #108]	; 0x6c
	    switch (c) {
 8011746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011748:	2b64      	cmp	r3, #100	; 0x64
 801174a:	d002      	beq.n	8011752 <ppp_vslprintf+0x28a>
 801174c:	2b75      	cmp	r3, #117	; 0x75
 801174e:	d010      	beq.n	8011772 <ppp_vslprintf+0x2aa>
 8011750:	e017      	b.n	8011782 <ppp_vslprintf+0x2ba>
	    case 'd':
		val = va_arg(args, long);
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	1d1a      	adds	r2, r3, #4
 8011756:	603a      	str	r2, [r7, #0]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if ((long)val < 0) {
 801175c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801175e:	2b00      	cmp	r3, #0
 8011760:	da04      	bge.n	801176c <ppp_vslprintf+0x2a4>
		    neg = 1;
 8011762:	2301      	movs	r3, #1
 8011764:	653b      	str	r3, [r7, #80]	; 0x50
		    val = (unsigned long)-(long)val;
 8011766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011768:	425b      	negs	r3, r3
 801176a:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		base = 10;
 801176c:	230a      	movs	r3, #10
 801176e:	65bb      	str	r3, [r7, #88]	; 0x58
		break;
 8011770:	e021      	b.n	80117b6 <ppp_vslprintf+0x2ee>
	    case 'u':
		val = va_arg(args, unsigned long);
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	1d1a      	adds	r2, r3, #4
 8011776:	603a      	str	r2, [r7, #0]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	64fb      	str	r3, [r7, #76]	; 0x4c
		base = 10;
 801177c:	230a      	movs	r3, #10
 801177e:	65bb      	str	r3, [r7, #88]	; 0x58
		break;
 8011780:	e019      	b.n	80117b6 <ppp_vslprintf+0x2ee>
	    default:
		OUTCHAR('%');
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	2b00      	cmp	r3, #0
 8011786:	dd07      	ble.n	8011798 <ppp_vslprintf+0x2d0>
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	3b01      	subs	r3, #1
 801178c:	60bb      	str	r3, [r7, #8]
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	1c5a      	adds	r2, r3, #1
 8011792:	60fa      	str	r2, [r7, #12]
 8011794:	2225      	movs	r2, #37	; 0x25
 8011796:	701a      	strb	r2, [r3, #0]
		OUTCHAR('l');
 8011798:	68bb      	ldr	r3, [r7, #8]
 801179a:	2b00      	cmp	r3, #0
 801179c:	dd07      	ble.n	80117ae <ppp_vslprintf+0x2e6>
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	3b01      	subs	r3, #1
 80117a2:	60bb      	str	r3, [r7, #8]
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	1c5a      	adds	r2, r3, #1
 80117a8:	60fa      	str	r2, [r7, #12]
 80117aa:	226c      	movs	r2, #108	; 0x6c
 80117ac:	701a      	strb	r2, [r3, #0]
		--fmt;		/* so %lz outputs %lz etc. */
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	3b01      	subs	r3, #1
 80117b2:	607b      	str	r3, [r7, #4]
		continue;
 80117b4:	e280      	b.n	8011cb8 <ppp_vslprintf+0x7f0>
	    }
	    break;
 80117b6:	e1e7      	b.n	8011b88 <ppp_vslprintf+0x6c0>
	case 'd':
	    i = va_arg(args, int);
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	1d1a      	adds	r2, r3, #4
 80117bc:	603a      	str	r2, [r7, #0]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	637b      	str	r3, [r7, #52]	; 0x34
	    if (i < 0) {
 80117c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	da05      	bge.n	80117d4 <ppp_vslprintf+0x30c>
		neg = 1;
 80117c8:	2301      	movs	r3, #1
 80117ca:	653b      	str	r3, [r7, #80]	; 0x50
		val = -i;
 80117cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117ce:	425b      	negs	r3, r3
 80117d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117d2:	e001      	b.n	80117d8 <ppp_vslprintf+0x310>
	    } else
		val = i;
 80117d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	    base = 10;
 80117d8:	230a      	movs	r3, #10
 80117da:	65bb      	str	r3, [r7, #88]	; 0x58
	    break;
 80117dc:	e1d4      	b.n	8011b88 <ppp_vslprintf+0x6c0>
	case 'u':
	    val = va_arg(args, unsigned int);
 80117de:	683b      	ldr	r3, [r7, #0]
 80117e0:	1d1a      	adds	r2, r3, #4
 80117e2:	603a      	str	r2, [r7, #0]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	    base = 10;
 80117e8:	230a      	movs	r3, #10
 80117ea:	65bb      	str	r3, [r7, #88]	; 0x58
	    break;
 80117ec:	e1cc      	b.n	8011b88 <ppp_vslprintf+0x6c0>
	case 'o':
	    val = va_arg(args, unsigned int);
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	1d1a      	adds	r2, r3, #4
 80117f2:	603a      	str	r2, [r7, #0]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	    base = 8;
 80117f8:	2308      	movs	r3, #8
 80117fa:	65bb      	str	r3, [r7, #88]	; 0x58
	    break;
 80117fc:	e1c4      	b.n	8011b88 <ppp_vslprintf+0x6c0>
	case 'x':
	case 'X':
	    val = va_arg(args, unsigned int);
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	1d1a      	adds	r2, r3, #4
 8011802:	603a      	str	r2, [r7, #0]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	64fb      	str	r3, [r7, #76]	; 0x4c
	    base = 16;
 8011808:	2310      	movs	r3, #16
 801180a:	65bb      	str	r3, [r7, #88]	; 0x58
	    break;
 801180c:	e1bc      	b.n	8011b88 <ppp_vslprintf+0x6c0>
	    base = 16;
	    neg = 2;
	    break;
#endif /* unused (and wrong on LLP64 systems) */
	case 's':
	    str = va_arg(args, char *);
 801180e:	683b      	ldr	r3, [r7, #0]
 8011810:	1d1a      	adds	r2, r3, #4
 8011812:	603a      	str	r2, [r7, #0]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	647b      	str	r3, [r7, #68]	; 0x44
	    break;
 8011818:	e1b6      	b.n	8011b88 <ppp_vslprintf+0x6c0>
	case 'c':
	    num[0] = va_arg(args, int);
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	1d1a      	adds	r2, r3, #4
 801181e:	603a      	str	r2, [r7, #0]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	b2db      	uxtb	r3, r3
 8011824:	743b      	strb	r3, [r7, #16]
	    num[1] = 0;
 8011826:	2300      	movs	r3, #0
 8011828:	747b      	strb	r3, [r7, #17]
	    str = num;
 801182a:	f107 0310 	add.w	r3, r7, #16
 801182e:	647b      	str	r3, [r7, #68]	; 0x44
	    break;
 8011830:	e1aa      	b.n	8011b88 <ppp_vslprintf+0x6c0>
	case 'm':
	    str = strerror(errno);
	    break;
#endif /* do we always have strerror() in embedded ? */
	case 'I':
	    ip = va_arg(args, u32_t);
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	1d1a      	adds	r2, r3, #4
 8011836:	603a      	str	r2, [r7, #0]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	633b      	str	r3, [r7, #48]	; 0x30
	    ip = lwip_ntohl(ip);
 801183c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801183e:	f7ef fe8c 	bl	800155a <lwip_htonl>
 8011842:	6338      	str	r0, [r7, #48]	; 0x30
	    ppp_slprintf(num, sizeof(num), "%d.%d.%d.%d", (ip >> 24) & 0xff,
 8011844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011846:	0e1c      	lsrs	r4, r3, #24
		     (ip >> 16) & 0xff, (ip >> 8) & 0xff, ip & 0xff);
 8011848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801184a:	0c1b      	lsrs	r3, r3, #16
	    ppp_slprintf(num, sizeof(num), "%d.%d.%d.%d", (ip >> 24) & 0xff,
 801184c:	b2db      	uxtb	r3, r3
		     (ip >> 16) & 0xff, (ip >> 8) & 0xff, ip & 0xff);
 801184e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011850:	0a12      	lsrs	r2, r2, #8
	    ppp_slprintf(num, sizeof(num), "%d.%d.%d.%d", (ip >> 24) & 0xff,
 8011852:	b2d2      	uxtb	r2, r2
 8011854:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011856:	b2c9      	uxtb	r1, r1
 8011858:	f107 0010 	add.w	r0, r7, #16
 801185c:	9102      	str	r1, [sp, #8]
 801185e:	9201      	str	r2, [sp, #4]
 8011860:	9300      	str	r3, [sp, #0]
 8011862:	4623      	mov	r3, r4
 8011864:	4a9d      	ldr	r2, [pc, #628]	; (8011adc <ppp_vslprintf+0x614>)
 8011866:	2120      	movs	r1, #32
 8011868:	f7ff fe16 	bl	8011498 <ppp_slprintf>
	    str = num;
 801186c:	f107 0310 	add.w	r3, r7, #16
 8011870:	647b      	str	r3, [r7, #68]	; 0x44
	    break;
 8011872:	e189      	b.n	8011b88 <ppp_vslprintf+0x6c0>
	    str[15] = 0;	/* chop off year and newline */
	    break;
#endif /* need port */
	case 'v':		/* "visible" string */
	case 'q':		/* quoted string */
	    quoted = c == 'q';
 8011874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011876:	2b71      	cmp	r3, #113	; 0x71
 8011878:	bf0c      	ite	eq
 801187a:	2301      	moveq	r3, #1
 801187c:	2300      	movne	r3, #0
 801187e:	b2db      	uxtb	r3, r3
 8011880:	63bb      	str	r3, [r7, #56]	; 0x38
	    p = va_arg(args, unsigned char *);
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	1d1a      	adds	r2, r3, #4
 8011886:	603a      	str	r2, [r7, #0]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	643b      	str	r3, [r7, #64]	; 0x40
	    if (p == NULL)
 801188c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801188e:	2b00      	cmp	r3, #0
 8011890:	d101      	bne.n	8011896 <ppp_vslprintf+0x3ce>
		p = (const unsigned char *)"<NULL>";
 8011892:	4b93      	ldr	r3, [pc, #588]	; (8011ae0 <ppp_vslprintf+0x618>)
 8011894:	643b      	str	r3, [r7, #64]	; 0x40
	    if (fillch == '0' && prec >= 0) {
 8011896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011898:	2b30      	cmp	r3, #48	; 0x30
 801189a:	d105      	bne.n	80118a8 <ppp_vslprintf+0x3e0>
 801189c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801189e:	2b00      	cmp	r3, #0
 80118a0:	db02      	blt.n	80118a8 <ppp_vslprintf+0x3e0>
		n = prec;
 80118a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80118a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80118a6:	e00f      	b.n	80118c8 <ppp_vslprintf+0x400>
	    } else {
		n = strlen((const char *)p);
 80118a8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80118aa:	f7ee fc9b 	bl	80001e4 <strlen>
 80118ae:	4603      	mov	r3, r0
 80118b0:	66bb      	str	r3, [r7, #104]	; 0x68
		if (prec >= 0 && n > prec)
 80118b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	f2c0 8107 	blt.w	8011ac8 <ppp_vslprintf+0x600>
 80118ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80118bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80118be:	429a      	cmp	r2, r3
 80118c0:	f340 8102 	ble.w	8011ac8 <ppp_vslprintf+0x600>
		    n = prec;
 80118c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80118c6:	66bb      	str	r3, [r7, #104]	; 0x68
	    }
	    while (n > 0 && buflen > 0) {
 80118c8:	e0fe      	b.n	8011ac8 <ppp_vslprintf+0x600>
		c = *p++;
 80118ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118cc:	1c5a      	adds	r2, r3, #1
 80118ce:	643a      	str	r2, [r7, #64]	; 0x40
 80118d0:	781b      	ldrb	r3, [r3, #0]
 80118d2:	66fb      	str	r3, [r7, #108]	; 0x6c
		--n;
 80118d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80118d6:	3b01      	subs	r3, #1
 80118d8:	66bb      	str	r3, [r7, #104]	; 0x68
		if (!quoted && c >= 0x80) {
 80118da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d11b      	bne.n	8011918 <ppp_vslprintf+0x450>
 80118e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80118e2:	2b7f      	cmp	r3, #127	; 0x7f
 80118e4:	dd18      	ble.n	8011918 <ppp_vslprintf+0x450>
		    OUTCHAR('M');
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	dd07      	ble.n	80118fc <ppp_vslprintf+0x434>
 80118ec:	68bb      	ldr	r3, [r7, #8]
 80118ee:	3b01      	subs	r3, #1
 80118f0:	60bb      	str	r3, [r7, #8]
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	1c5a      	adds	r2, r3, #1
 80118f6:	60fa      	str	r2, [r7, #12]
 80118f8:	224d      	movs	r2, #77	; 0x4d
 80118fa:	701a      	strb	r2, [r3, #0]
		    OUTCHAR('-');
 80118fc:	68bb      	ldr	r3, [r7, #8]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	dd07      	ble.n	8011912 <ppp_vslprintf+0x44a>
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	3b01      	subs	r3, #1
 8011906:	60bb      	str	r3, [r7, #8]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	1c5a      	adds	r2, r3, #1
 801190c:	60fa      	str	r2, [r7, #12]
 801190e:	222d      	movs	r2, #45	; 0x2d
 8011910:	701a      	strb	r2, [r3, #0]
		    c -= 0x80;
 8011912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011914:	3b80      	subs	r3, #128	; 0x80
 8011916:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		if (quoted && (c == '"' || c == '\\'))
 8011918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801191a:	2b00      	cmp	r3, #0
 801191c:	d010      	beq.n	8011940 <ppp_vslprintf+0x478>
 801191e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011920:	2b22      	cmp	r3, #34	; 0x22
 8011922:	d002      	beq.n	801192a <ppp_vslprintf+0x462>
 8011924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011926:	2b5c      	cmp	r3, #92	; 0x5c
 8011928:	d10a      	bne.n	8011940 <ppp_vslprintf+0x478>
		    OUTCHAR('\\');
 801192a:	68bb      	ldr	r3, [r7, #8]
 801192c:	2b00      	cmp	r3, #0
 801192e:	dd07      	ble.n	8011940 <ppp_vslprintf+0x478>
 8011930:	68bb      	ldr	r3, [r7, #8]
 8011932:	3b01      	subs	r3, #1
 8011934:	60bb      	str	r3, [r7, #8]
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	1c5a      	adds	r2, r3, #1
 801193a:	60fa      	str	r2, [r7, #12]
 801193c:	225c      	movs	r2, #92	; 0x5c
 801193e:	701a      	strb	r2, [r3, #0]
		if (c < 0x20 || (0x7f <= c && c < 0xa0)) {
 8011940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011942:	2b1f      	cmp	r3, #31
 8011944:	dd07      	ble.n	8011956 <ppp_vslprintf+0x48e>
 8011946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011948:	2b7e      	cmp	r3, #126	; 0x7e
 801194a:	f340 80b1 	ble.w	8011ab0 <ppp_vslprintf+0x5e8>
 801194e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011950:	2b9f      	cmp	r3, #159	; 0x9f
 8011952:	f300 80ad 	bgt.w	8011ab0 <ppp_vslprintf+0x5e8>
		    if (quoted) {
 8011956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011958:	2b00      	cmp	r3, #0
 801195a:	d075      	beq.n	8011a48 <ppp_vslprintf+0x580>
			OUTCHAR('\\');
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	2b00      	cmp	r3, #0
 8011960:	dd07      	ble.n	8011972 <ppp_vslprintf+0x4aa>
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	3b01      	subs	r3, #1
 8011966:	60bb      	str	r3, [r7, #8]
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	1c5a      	adds	r2, r3, #1
 801196c:	60fa      	str	r2, [r7, #12]
 801196e:	225c      	movs	r2, #92	; 0x5c
 8011970:	701a      	strb	r2, [r3, #0]
			switch (c) {
 8011972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011974:	3b08      	subs	r3, #8
 8011976:	2b04      	cmp	r3, #4
 8011978:	d83d      	bhi.n	80119f6 <ppp_vslprintf+0x52e>
 801197a:	a201      	add	r2, pc, #4	; (adr r2, 8011980 <ppp_vslprintf+0x4b8>)
 801197c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011980:	080119c7 	.word	0x080119c7
 8011984:	08011995 	.word	0x08011995
 8011988:	080119af 	.word	0x080119af
 801198c:	080119f7 	.word	0x080119f7
 8011990:	080119df 	.word	0x080119df
			case '\t':	OUTCHAR('t');	break;
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	2b00      	cmp	r3, #0
 8011998:	f340 8082 	ble.w	8011aa0 <ppp_vslprintf+0x5d8>
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	3b01      	subs	r3, #1
 80119a0:	60bb      	str	r3, [r7, #8]
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	1c5a      	adds	r2, r3, #1
 80119a6:	60fa      	str	r2, [r7, #12]
 80119a8:	2274      	movs	r2, #116	; 0x74
 80119aa:	701a      	strb	r2, [r3, #0]
 80119ac:	e078      	b.n	8011aa0 <ppp_vslprintf+0x5d8>
			case '\n':	OUTCHAR('n');	break;
 80119ae:	68bb      	ldr	r3, [r7, #8]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	dd77      	ble.n	8011aa4 <ppp_vslprintf+0x5dc>
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	3b01      	subs	r3, #1
 80119b8:	60bb      	str	r3, [r7, #8]
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	1c5a      	adds	r2, r3, #1
 80119be:	60fa      	str	r2, [r7, #12]
 80119c0:	226e      	movs	r2, #110	; 0x6e
 80119c2:	701a      	strb	r2, [r3, #0]
 80119c4:	e06e      	b.n	8011aa4 <ppp_vslprintf+0x5dc>
			case '\b':	OUTCHAR('b');	break;
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	dd6d      	ble.n	8011aa8 <ppp_vslprintf+0x5e0>
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	3b01      	subs	r3, #1
 80119d0:	60bb      	str	r3, [r7, #8]
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	1c5a      	adds	r2, r3, #1
 80119d6:	60fa      	str	r2, [r7, #12]
 80119d8:	2262      	movs	r2, #98	; 0x62
 80119da:	701a      	strb	r2, [r3, #0]
 80119dc:	e064      	b.n	8011aa8 <ppp_vslprintf+0x5e0>
			case '\f':	OUTCHAR('f');	break;
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	dd63      	ble.n	8011aac <ppp_vslprintf+0x5e4>
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	3b01      	subs	r3, #1
 80119e8:	60bb      	str	r3, [r7, #8]
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	1c5a      	adds	r2, r3, #1
 80119ee:	60fa      	str	r2, [r7, #12]
 80119f0:	2266      	movs	r2, #102	; 0x66
 80119f2:	701a      	strb	r2, [r3, #0]
 80119f4:	e05a      	b.n	8011aac <ppp_vslprintf+0x5e4>
			default:
			    OUTCHAR('x');
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	dd07      	ble.n	8011a0c <ppp_vslprintf+0x544>
 80119fc:	68bb      	ldr	r3, [r7, #8]
 80119fe:	3b01      	subs	r3, #1
 8011a00:	60bb      	str	r3, [r7, #8]
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	1c5a      	adds	r2, r3, #1
 8011a06:	60fa      	str	r2, [r7, #12]
 8011a08:	2278      	movs	r2, #120	; 0x78
 8011a0a:	701a      	strb	r2, [r3, #0]
			    OUTCHAR(hexchars[c >> 4]);
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	dd0a      	ble.n	8011a28 <ppp_vslprintf+0x560>
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	3b01      	subs	r3, #1
 8011a16:	60bb      	str	r3, [r7, #8]
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	1c5a      	adds	r2, r3, #1
 8011a1c:	60fa      	str	r2, [r7, #12]
 8011a1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011a20:	1112      	asrs	r2, r2, #4
 8011a22:	4930      	ldr	r1, [pc, #192]	; (8011ae4 <ppp_vslprintf+0x61c>)
 8011a24:	5c8a      	ldrb	r2, [r1, r2]
 8011a26:	701a      	strb	r2, [r3, #0]
			    OUTCHAR(hexchars[c & 0xf]);
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	dd4c      	ble.n	8011ac8 <ppp_vslprintf+0x600>
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	3b01      	subs	r3, #1
 8011a32:	60bb      	str	r3, [r7, #8]
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	1c5a      	adds	r2, r3, #1
 8011a38:	60fa      	str	r2, [r7, #12]
 8011a3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011a3c:	f002 020f 	and.w	r2, r2, #15
 8011a40:	4928      	ldr	r1, [pc, #160]	; (8011ae4 <ppp_vslprintf+0x61c>)
 8011a42:	5c8a      	ldrb	r2, [r1, r2]
 8011a44:	701a      	strb	r2, [r3, #0]
 8011a46:	e03f      	b.n	8011ac8 <ppp_vslprintf+0x600>
			}
		    } else {
			if (c == '\t')
 8011a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a4a:	2b09      	cmp	r3, #9
 8011a4c:	d10c      	bne.n	8011a68 <ppp_vslprintf+0x5a0>
			    OUTCHAR(c);
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	dd39      	ble.n	8011ac8 <ppp_vslprintf+0x600>
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	3b01      	subs	r3, #1
 8011a58:	60bb      	str	r3, [r7, #8]
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	1c5a      	adds	r2, r3, #1
 8011a5e:	60fa      	str	r2, [r7, #12]
 8011a60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011a62:	b2d2      	uxtb	r2, r2
 8011a64:	701a      	strb	r2, [r3, #0]
 8011a66:	e02f      	b.n	8011ac8 <ppp_vslprintf+0x600>
			else {
			    OUTCHAR('^');
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	dd07      	ble.n	8011a7e <ppp_vslprintf+0x5b6>
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	3b01      	subs	r3, #1
 8011a72:	60bb      	str	r3, [r7, #8]
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	1c5a      	adds	r2, r3, #1
 8011a78:	60fa      	str	r2, [r7, #12]
 8011a7a:	225e      	movs	r2, #94	; 0x5e
 8011a7c:	701a      	strb	r2, [r3, #0]
			    OUTCHAR(c ^ 0x40);
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	dd21      	ble.n	8011ac8 <ppp_vslprintf+0x600>
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	3b01      	subs	r3, #1
 8011a88:	60bb      	str	r3, [r7, #8]
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	1c5a      	adds	r2, r3, #1
 8011a8e:	60fa      	str	r2, [r7, #12]
 8011a90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011a92:	b252      	sxtb	r2, r2
 8011a94:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 8011a98:	b252      	sxtb	r2, r2
 8011a9a:	b2d2      	uxtb	r2, r2
 8011a9c:	701a      	strb	r2, [r3, #0]
 8011a9e:	e013      	b.n	8011ac8 <ppp_vslprintf+0x600>
			case '\t':	OUTCHAR('t');	break;
 8011aa0:	bf00      	nop
 8011aa2:	e011      	b.n	8011ac8 <ppp_vslprintf+0x600>
			case '\n':	OUTCHAR('n');	break;
 8011aa4:	bf00      	nop
 8011aa6:	e00f      	b.n	8011ac8 <ppp_vslprintf+0x600>
			case '\b':	OUTCHAR('b');	break;
 8011aa8:	bf00      	nop
 8011aaa:	e00d      	b.n	8011ac8 <ppp_vslprintf+0x600>
			case '\f':	OUTCHAR('f');	break;
 8011aac:	bf00      	nop
		    if (quoted) {
 8011aae:	e00b      	b.n	8011ac8 <ppp_vslprintf+0x600>
			}
		    }
		} else
		    OUTCHAR(c);
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	dd08      	ble.n	8011ac8 <ppp_vslprintf+0x600>
 8011ab6:	68bb      	ldr	r3, [r7, #8]
 8011ab8:	3b01      	subs	r3, #1
 8011aba:	60bb      	str	r3, [r7, #8]
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	1c5a      	adds	r2, r3, #1
 8011ac0:	60fa      	str	r2, [r7, #12]
 8011ac2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011ac4:	b2d2      	uxtb	r2, r2
 8011ac6:	701a      	strb	r2, [r3, #0]
	    while (n > 0 && buflen > 0) {
 8011ac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	f340 80f4 	ble.w	8011cb8 <ppp_vslprintf+0x7f0>
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	f73f aef9 	bgt.w	80118ca <ppp_vslprintf+0x402>
	    }
	    continue;
 8011ad8:	e0ee      	b.n	8011cb8 <ppp_vslprintf+0x7f0>
 8011ada:	bf00      	nop
 8011adc:	080158d8 	.word	0x080158d8
 8011ae0:	080158e4 	.word	0x080158e4
 8011ae4:	2000000c 	.word	0x2000000c
	    buf = bufinfo.ptr;
	    buflen = bufinfo.len - 1;
	    continue;
#endif /* PRINTPKT_SUPPORT */
	case 'B':
	    p = va_arg(args, unsigned char *);
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	1d1a      	adds	r2, r3, #4
 8011aec:	603a      	str	r2, [r7, #0]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	643b      	str	r3, [r7, #64]	; 0x40
	    for (n = prec; n > 0; --n) {
 8011af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011af4:	66bb      	str	r3, [r7, #104]	; 0x68
 8011af6:	e034      	b.n	8011b62 <ppp_vslprintf+0x69a>
		c = *p++;
 8011af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011afa:	1c5a      	adds	r2, r3, #1
 8011afc:	643a      	str	r2, [r7, #64]	; 0x40
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	66fb      	str	r3, [r7, #108]	; 0x6c
		if (fillch == ' ')
 8011b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b04:	2b20      	cmp	r3, #32
 8011b06:	d10a      	bne.n	8011b1e <ppp_vslprintf+0x656>
		    OUTCHAR(' ');
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	dd07      	ble.n	8011b1e <ppp_vslprintf+0x656>
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	3b01      	subs	r3, #1
 8011b12:	60bb      	str	r3, [r7, #8]
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	1c5a      	adds	r2, r3, #1
 8011b18:	60fa      	str	r2, [r7, #12]
 8011b1a:	2220      	movs	r2, #32
 8011b1c:	701a      	strb	r2, [r3, #0]
		OUTCHAR(hexchars[(c >> 4) & 0xf]);
 8011b1e:	68bb      	ldr	r3, [r7, #8]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	dd0c      	ble.n	8011b3e <ppp_vslprintf+0x676>
 8011b24:	68bb      	ldr	r3, [r7, #8]
 8011b26:	3b01      	subs	r3, #1
 8011b28:	60bb      	str	r3, [r7, #8]
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	1c5a      	adds	r2, r3, #1
 8011b2e:	60fa      	str	r2, [r7, #12]
 8011b30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011b32:	1112      	asrs	r2, r2, #4
 8011b34:	f002 020f 	and.w	r2, r2, #15
 8011b38:	4967      	ldr	r1, [pc, #412]	; (8011cd8 <ppp_vslprintf+0x810>)
 8011b3a:	5c8a      	ldrb	r2, [r1, r2]
 8011b3c:	701a      	strb	r2, [r3, #0]
		OUTCHAR(hexchars[c & 0xf]);
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	dd0b      	ble.n	8011b5c <ppp_vslprintf+0x694>
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	3b01      	subs	r3, #1
 8011b48:	60bb      	str	r3, [r7, #8]
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	1c5a      	adds	r2, r3, #1
 8011b4e:	60fa      	str	r2, [r7, #12]
 8011b50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011b52:	f002 020f 	and.w	r2, r2, #15
 8011b56:	4960      	ldr	r1, [pc, #384]	; (8011cd8 <ppp_vslprintf+0x810>)
 8011b58:	5c8a      	ldrb	r2, [r1, r2]
 8011b5a:	701a      	strb	r2, [r3, #0]
	    for (n = prec; n > 0; --n) {
 8011b5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b5e:	3b01      	subs	r3, #1
 8011b60:	66bb      	str	r3, [r7, #104]	; 0x68
 8011b62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	dcc7      	bgt.n	8011af8 <ppp_vslprintf+0x630>
	    }
	    continue;
 8011b68:	e0a6      	b.n	8011cb8 <ppp_vslprintf+0x7f0>
	default:
	    *buf++ = '%';
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	1c5a      	adds	r2, r3, #1
 8011b6e:	60fa      	str	r2, [r7, #12]
 8011b70:	2225      	movs	r2, #37	; 0x25
 8011b72:	701a      	strb	r2, [r3, #0]
	    if (c != '%')
 8011b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011b76:	2b25      	cmp	r3, #37	; 0x25
 8011b78:	d002      	beq.n	8011b80 <ppp_vslprintf+0x6b8>
		--fmt;		/* so %z outputs %z etc. */
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	3b01      	subs	r3, #1
 8011b7e:	607b      	str	r3, [r7, #4]
	    --buflen;
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	3b01      	subs	r3, #1
 8011b84:	60bb      	str	r3, [r7, #8]
	    continue;
 8011b86:	e097      	b.n	8011cb8 <ppp_vslprintf+0x7f0>
	}
	if (base != 0) {
 8011b88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d051      	beq.n	8011c32 <ppp_vslprintf+0x76a>
	    str = num + sizeof(num);
 8011b8e:	f107 0310 	add.w	r3, r7, #16
 8011b92:	3320      	adds	r3, #32
 8011b94:	647b      	str	r3, [r7, #68]	; 0x44
	    *--str = 0;
 8011b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b98:	3b01      	subs	r3, #1
 8011b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8011b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	701a      	strb	r2, [r3, #0]
	    while (str > num + neg) {
 8011ba2:	e01b      	b.n	8011bdc <ppp_vslprintf+0x714>
		*--str = hexchars[val % base];
 8011ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ba6:	3b01      	subs	r3, #1
 8011ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8011baa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bae:	fbb3 f1f2 	udiv	r1, r3, r2
 8011bb2:	fb02 f201 	mul.w	r2, r2, r1
 8011bb6:	1a9b      	subs	r3, r3, r2
 8011bb8:	4a47      	ldr	r2, [pc, #284]	; (8011cd8 <ppp_vslprintf+0x810>)
 8011bba:	5cd2      	ldrb	r2, [r2, r3]
 8011bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bbe:	701a      	strb	r2, [r3, #0]
		val = val / base;
 8011bc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011bc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8011bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (--prec <= 0 && val == 0)
 8011bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011bcc:	3b01      	subs	r3, #1
 8011bce:	663b      	str	r3, [r7, #96]	; 0x60
 8011bd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	dc02      	bgt.n	8011bdc <ppp_vslprintf+0x714>
 8011bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d007      	beq.n	8011bec <ppp_vslprintf+0x724>
	    while (str > num + neg) {
 8011bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011bde:	f107 0210 	add.w	r2, r7, #16
 8011be2:	441a      	add	r2, r3
 8011be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d3dc      	bcc.n	8011ba4 <ppp_vslprintf+0x6dc>
 8011bea:	e000      	b.n	8011bee <ppp_vslprintf+0x726>
		    break;
 8011bec:	bf00      	nop
	    }
	    switch (neg) {
 8011bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011bf0:	2b01      	cmp	r3, #1
 8011bf2:	d002      	beq.n	8011bfa <ppp_vslprintf+0x732>
 8011bf4:	2b02      	cmp	r3, #2
 8011bf6:	d007      	beq.n	8011c08 <ppp_vslprintf+0x740>
	    case 2:
		*--str = 'x';
		*--str = '0';
		break;
	    default:
		break;
 8011bf8:	e013      	b.n	8011c22 <ppp_vslprintf+0x75a>
		*--str = '-';
 8011bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bfc:	3b01      	subs	r3, #1
 8011bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8011c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c02:	222d      	movs	r2, #45	; 0x2d
 8011c04:	701a      	strb	r2, [r3, #0]
		break;
 8011c06:	e00c      	b.n	8011c22 <ppp_vslprintf+0x75a>
		*--str = 'x';
 8011c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c0a:	3b01      	subs	r3, #1
 8011c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8011c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c10:	2278      	movs	r2, #120	; 0x78
 8011c12:	701a      	strb	r2, [r3, #0]
		*--str = '0';
 8011c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c16:	3b01      	subs	r3, #1
 8011c18:	647b      	str	r3, [r7, #68]	; 0x44
 8011c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c1c:	2230      	movs	r2, #48	; 0x30
 8011c1e:	701a      	strb	r2, [r3, #0]
		break;
 8011c20:	bf00      	nop
	    }
	    len = num + sizeof(num) - 1 - str;
 8011c22:	f107 0310 	add.w	r3, r7, #16
 8011c26:	331f      	adds	r3, #31
 8011c28:	461a      	mov	r2, r3
 8011c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c2c:	1ad3      	subs	r3, r2, r3
 8011c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8011c30:	e00d      	b.n	8011c4e <ppp_vslprintf+0x786>
	} else {
	    len = strlen(str);
 8011c32:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011c34:	f7ee fad6 	bl	80001e4 <strlen>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	657b      	str	r3, [r7, #84]	; 0x54
	    if (prec >= 0 && len > prec)
 8011c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	db05      	blt.n	8011c4e <ppp_vslprintf+0x786>
 8011c42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c46:	429a      	cmp	r2, r3
 8011c48:	dd01      	ble.n	8011c4e <ppp_vslprintf+0x786>
		len = prec;
 8011c4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c4c:	657b      	str	r3, [r7, #84]	; 0x54
	}
	if (width > 0) {
 8011c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	dd1d      	ble.n	8011c90 <ppp_vslprintf+0x7c8>
	    if (width > buflen)
 8011c54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	dd01      	ble.n	8011c60 <ppp_vslprintf+0x798>
		width = buflen;
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	667b      	str	r3, [r7, #100]	; 0x64
	    if ((n = width - len) > 0) {
 8011c60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c64:	1ad3      	subs	r3, r2, r3
 8011c66:	66bb      	str	r3, [r7, #104]	; 0x68
 8011c68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	dd10      	ble.n	8011c90 <ppp_vslprintf+0x7c8>
		buflen -= n;
 8011c6e:	68ba      	ldr	r2, [r7, #8]
 8011c70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c72:	1ad3      	subs	r3, r2, r3
 8011c74:	60bb      	str	r3, [r7, #8]
		for (; n > 0; --n)
 8011c76:	e008      	b.n	8011c8a <ppp_vslprintf+0x7c2>
		    *buf++ = fillch;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	1c5a      	adds	r2, r3, #1
 8011c7c:	60fa      	str	r2, [r7, #12]
 8011c7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011c80:	b2d2      	uxtb	r2, r2
 8011c82:	701a      	strb	r2, [r3, #0]
		for (; n > 0; --n)
 8011c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c86:	3b01      	subs	r3, #1
 8011c88:	66bb      	str	r3, [r7, #104]	; 0x68
 8011c8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	dcf3      	bgt.n	8011c78 <ppp_vslprintf+0x7b0>
	    }
	}
	if (len > buflen)
 8011c90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	dd01      	ble.n	8011c9c <ppp_vslprintf+0x7d4>
	    len = buflen;
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	657b      	str	r3, [r7, #84]	; 0x54
	memcpy(buf, str, len);
 8011c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c9e:	461a      	mov	r2, r3
 8011ca0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011ca2:	68f8      	ldr	r0, [r7, #12]
 8011ca4:	f000 fd4a 	bl	801273c <memcpy>
	buf += len;
 8011ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011caa:	68fa      	ldr	r2, [r7, #12]
 8011cac:	4413      	add	r3, r2
 8011cae:	60fb      	str	r3, [r7, #12]
	buflen -= len;
 8011cb0:	68ba      	ldr	r2, [r7, #8]
 8011cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cb4:	1ad3      	subs	r3, r2, r3
 8011cb6:	60bb      	str	r3, [r7, #8]
    while (buflen > 0) {
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	f73f ac13 	bgt.w	80114e6 <ppp_vslprintf+0x1e>
 8011cc0:	e000      	b.n	8011cc4 <ppp_vslprintf+0x7fc>
	    break;
 8011cc2:	bf00      	nop
    }
    *buf = 0;
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	701a      	strb	r2, [r3, #0]
    return buf - buf0;
 8011cca:	68fa      	ldr	r2, [r7, #12]
 8011ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cce:	1ad3      	subs	r3, r2, r3
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	3774      	adds	r7, #116	; 0x74
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd90      	pop	{r4, r7, pc}
 8011cd8:	2000000c 	.word	0x2000000c

08011cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8011cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011d14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011ce0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011ce2:	e003      	b.n	8011cec <LoopCopyDataInit>

08011ce4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011ce4:	4b0c      	ldr	r3, [pc, #48]	; (8011d18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8011ce6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011ce8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8011cea:	3104      	adds	r1, #4

08011cec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011cec:	480b      	ldr	r0, [pc, #44]	; (8011d1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011cee:	4b0c      	ldr	r3, [pc, #48]	; (8011d20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011cf0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011cf2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011cf4:	d3f6      	bcc.n	8011ce4 <CopyDataInit>
  ldr  r2, =_sbss
 8011cf6:	4a0b      	ldr	r2, [pc, #44]	; (8011d24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8011cf8:	e002      	b.n	8011d00 <LoopFillZerobss>

08011cfa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8011cfa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011cfc:	f842 3b04 	str.w	r3, [r2], #4

08011d00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011d00:	4b09      	ldr	r3, [pc, #36]	; (8011d28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011d02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011d04:	d3f9      	bcc.n	8011cfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8011d06:	f000 f8d5 	bl	8011eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011d0a:	f000 fcd3 	bl	80126b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011d0e:	f7ef f997 	bl	8001040 <main>
  bx  lr    
 8011d12:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8011d14:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8011d18:	08016068 	.word	0x08016068
  ldr  r0, =_sdata
 8011d1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8011d20:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8011d24:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8011d28:	20001b00 	.word	0x20001b00

08011d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011d2c:	e7fe      	b.n	8011d2c <ADC_IRQHandler>

08011d2e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8011d2e:	b480      	push	{r7}
 8011d30:	af00      	add	r7, sp, #0
}
 8011d32:	bf00      	nop
 8011d34:	46bd      	mov	sp, r7
 8011d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3a:	4770      	bx	lr

08011d3c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8011d40:	e7fe      	b.n	8011d40 <HardFault_Handler+0x4>

08011d42 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8011d42:	b480      	push	{r7}
 8011d44:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8011d46:	e7fe      	b.n	8011d46 <MemManage_Handler+0x4>

08011d48 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8011d48:	b480      	push	{r7}
 8011d4a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8011d4c:	e7fe      	b.n	8011d4c <BusFault_Handler+0x4>

08011d4e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8011d4e:	b480      	push	{r7}
 8011d50:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8011d52:	e7fe      	b.n	8011d52 <UsageFault_Handler+0x4>

08011d54 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8011d54:	b480      	push	{r7}
 8011d56:	af00      	add	r7, sp, #0
}
 8011d58:	bf00      	nop
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d60:	4770      	bx	lr

08011d62 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8011d62:	b480      	push	{r7}
 8011d64:	af00      	add	r7, sp, #0
}
 8011d66:	bf00      	nop
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6e:	4770      	bx	lr

08011d70 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8011d70:	b480      	push	{r7}
 8011d72:	af00      	add	r7, sp, #0
}
 8011d74:	bf00      	nop
 8011d76:	46bd      	mov	sp, r7
 8011d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7c:	4770      	bx	lr

08011d7e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8011d7e:	b480      	push	{r7}
 8011d80:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8011d82:	bf00      	nop
 8011d84:	46bd      	mov	sp, r7
 8011d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8a:	4770      	bx	lr

08011d8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8011d8c:	b480      	push	{r7}
 8011d8e:	af00      	add	r7, sp, #0
	errno = ENOSYS;
 8011d90:	4b04      	ldr	r3, [pc, #16]	; (8011da4 <_getpid+0x18>)
 8011d92:	2226      	movs	r2, #38	; 0x26
 8011d94:	601a      	str	r2, [r3, #0]
	return -1;
 8011d96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da2:	4770      	bx	lr
 8011da4:	20001afc 	.word	0x20001afc

08011da8 <_kill>:
  errno = ENOSYS;
  return -1;
}

int _kill(int32_t pid, int32_t sig)
{
 8011da8:	b480      	push	{r7}
 8011daa:	b083      	sub	sp, #12
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
 8011db0:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8011db2:	4b05      	ldr	r3, [pc, #20]	; (8011dc8 <_kill+0x20>)
 8011db4:	2226      	movs	r2, #38	; 0x26
 8011db6:	601a      	str	r2, [r3, #0]
	return -1;
 8011db8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	370c      	adds	r7, #12
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc6:	4770      	bx	lr
 8011dc8:	20001afc 	.word	0x20001afc

08011dcc <_exit>:

void _exit(int32_t status)
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b083      	sub	sp, #12
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
	while (1) {}		/* Make sure we hang here */
 8011dd4:	e7fe      	b.n	8011dd4 <_exit+0x8>
	...

08011dd8 <_write>:
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b085      	sub	sp, #20
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	60f8      	str	r0, [r7, #12]
 8011de0:	60b9      	str	r1, [r7, #8]
 8011de2:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	
	errno = ENOSYS;
 8011de4:	4b05      	ldr	r3, [pc, #20]	; (8011dfc <_write+0x24>)
 8011de6:	2226      	movs	r2, #38	; 0x26
 8011de8:	601a      	str	r2, [r3, #0]
	return -1;
 8011dea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3714      	adds	r7, #20
 8011df2:	46bd      	mov	sp, r7
 8011df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df8:	4770      	bx	lr
 8011dfa:	bf00      	nop
 8011dfc:	20001afc 	.word	0x20001afc

08011e00 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8011e00:	b480      	push	{r7}
 8011e02:	b085      	sub	sp, #20
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8011e08:	4b0b      	ldr	r3, [pc, #44]	; (8011e38 <_sbrk+0x38>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d102      	bne.n	8011e16 <_sbrk+0x16>
		heap_end = & end;
 8011e10:	4b09      	ldr	r3, [pc, #36]	; (8011e38 <_sbrk+0x38>)
 8011e12:	4a0a      	ldr	r2, [pc, #40]	; (8011e3c <_sbrk+0x3c>)
 8011e14:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8011e16:	4b08      	ldr	r3, [pc, #32]	; (8011e38 <_sbrk+0x38>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8011e1c:	4b06      	ldr	r3, [pc, #24]	; (8011e38 <_sbrk+0x38>)
 8011e1e:	681a      	ldr	r2, [r3, #0]
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	4413      	add	r3, r2
 8011e24:	4a04      	ldr	r2, [pc, #16]	; (8011e38 <_sbrk+0x38>)
 8011e26:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8011e28:	68fb      	ldr	r3, [r7, #12]
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3714      	adds	r7, #20
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e34:	4770      	bx	lr
 8011e36:	bf00      	nop
 8011e38:	20000798 	.word	0x20000798
 8011e3c:	20001b00 	.word	0x20001b00

08011e40 <_close>:

int _close(int32_t file)
{
 8011e40:	b480      	push	{r7}
 8011e42:	b083      	sub	sp, #12
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8011e48:	4b05      	ldr	r3, [pc, #20]	; (8011e60 <_close+0x20>)
 8011e4a:	2226      	movs	r2, #38	; 0x26
 8011e4c:	601a      	str	r2, [r3, #0]
	return -1;
 8011e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011e52:	4618      	mov	r0, r3
 8011e54:	370c      	adds	r7, #12
 8011e56:	46bd      	mov	sp, r7
 8011e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5c:	4770      	bx	lr
 8011e5e:	bf00      	nop
 8011e60:	20001afc 	.word	0x20001afc

08011e64 <_lseek>:
	errno = ENOSYS;
	return 0;
}

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8011e64:	b480      	push	{r7}
 8011e66:	b085      	sub	sp, #20
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	60f8      	str	r0, [r7, #12]
 8011e6c:	60b9      	str	r1, [r7, #8]
 8011e6e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8011e70:	4b05      	ldr	r3, [pc, #20]	; (8011e88 <_lseek+0x24>)
 8011e72:	2226      	movs	r2, #38	; 0x26
 8011e74:	601a      	str	r2, [r3, #0]
	return -1;
 8011e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	3714      	adds	r7, #20
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e84:	4770      	bx	lr
 8011e86:	bf00      	nop
 8011e88:	20001afc 	.word	0x20001afc

08011e8c <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b085      	sub	sp, #20
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	60f8      	str	r0, [r7, #12]
 8011e94:	60b9      	str	r1, [r7, #8]
 8011e96:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8011e98:	4b05      	ldr	r3, [pc, #20]	; (8011eb0 <_read+0x24>)
 8011e9a:	2226      	movs	r2, #38	; 0x26
 8011e9c:	601a      	str	r2, [r3, #0]
	return -1;
 8011e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	3714      	adds	r7, #20
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eac:	4770      	bx	lr
 8011eae:	bf00      	nop
 8011eb0:	20001afc 	.word	0x20001afc

08011eb4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011eb8:	4a16      	ldr	r2, [pc, #88]	; (8011f14 <SystemInit+0x60>)
 8011eba:	4b16      	ldr	r3, [pc, #88]	; (8011f14 <SystemInit+0x60>)
 8011ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8011ec8:	4a13      	ldr	r2, [pc, #76]	; (8011f18 <SystemInit+0x64>)
 8011eca:	4b13      	ldr	r3, [pc, #76]	; (8011f18 <SystemInit+0x64>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	f043 0301 	orr.w	r3, r3, #1
 8011ed2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011ed4:	4b10      	ldr	r3, [pc, #64]	; (8011f18 <SystemInit+0x64>)
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8011eda:	4a0f      	ldr	r2, [pc, #60]	; (8011f18 <SystemInit+0x64>)
 8011edc:	4b0e      	ldr	r3, [pc, #56]	; (8011f18 <SystemInit+0x64>)
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8011ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011ee8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8011eea:	4b0b      	ldr	r3, [pc, #44]	; (8011f18 <SystemInit+0x64>)
 8011eec:	4a0b      	ldr	r2, [pc, #44]	; (8011f1c <SystemInit+0x68>)
 8011eee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8011ef0:	4a09      	ldr	r2, [pc, #36]	; (8011f18 <SystemInit+0x64>)
 8011ef2:	4b09      	ldr	r3, [pc, #36]	; (8011f18 <SystemInit+0x64>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011efa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8011efc:	4b06      	ldr	r3, [pc, #24]	; (8011f18 <SystemInit+0x64>)
 8011efe:	2200      	movs	r2, #0
 8011f00:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8011f02:	f000 f80d 	bl	8011f20 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011f06:	4b03      	ldr	r3, [pc, #12]	; (8011f14 <SystemInit+0x60>)
 8011f08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011f0c:	609a      	str	r2, [r3, #8]
#endif
}
 8011f0e:	bf00      	nop
 8011f10:	bd80      	pop	{r7, pc}
 8011f12:	bf00      	nop
 8011f14:	e000ed00 	.word	0xe000ed00
 8011f18:	40023800 	.word	0x40023800
 8011f1c:	24003010 	.word	0x24003010

08011f20 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8011f20:	b480      	push	{r7}
 8011f22:	b083      	sub	sp, #12
 8011f24:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8011f26:	2300      	movs	r3, #0
 8011f28:	607b      	str	r3, [r7, #4]
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	603b      	str	r3, [r7, #0]
  //RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8011f2e:	4b33      	ldr	r3, [pc, #204]	; (8011ffc <SetSysClock+0xdc>)
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f36:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	3301      	adds	r3, #1
 8011f3c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d103      	bne.n	8011f4c <SetSysClock+0x2c>
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8011f4a:	d1f0      	bne.n	8011f2e <SetSysClock+0xe>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8011f4c:	4b2b      	ldr	r3, [pc, #172]	; (8011ffc <SetSysClock+0xdc>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d002      	beq.n	8011f5e <SetSysClock+0x3e>
  {
    HSEStatus = (uint32_t)0x01;
 8011f58:	2301      	movs	r3, #1
 8011f5a:	603b      	str	r3, [r7, #0]
 8011f5c:	e001      	b.n	8011f62 <SetSysClock+0x42>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	2b01      	cmp	r3, #1
 8011f66:	d142      	bne.n	8011fee <SetSysClock+0xce>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8011f68:	4a24      	ldr	r2, [pc, #144]	; (8011ffc <SetSysClock+0xdc>)
 8011f6a:	4b24      	ldr	r3, [pc, #144]	; (8011ffc <SetSysClock+0xdc>)
 8011f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f72:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8011f74:	4a22      	ldr	r2, [pc, #136]	; (8012000 <SetSysClock+0xe0>)
 8011f76:	4b22      	ldr	r3, [pc, #136]	; (8012000 <SetSysClock+0xe0>)
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011f7e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8011f80:	4a1e      	ldr	r2, [pc, #120]	; (8011ffc <SetSysClock+0xdc>)
 8011f82:	4b1e      	ldr	r3, [pc, #120]	; (8011ffc <SetSysClock+0xdc>)
 8011f84:	689b      	ldr	r3, [r3, #8]
 8011f86:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8011f88:	4a1c      	ldr	r2, [pc, #112]	; (8011ffc <SetSysClock+0xdc>)
 8011f8a:	4b1c      	ldr	r3, [pc, #112]	; (8011ffc <SetSysClock+0xdc>)
 8011f8c:	689b      	ldr	r3, [r3, #8]
 8011f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011f92:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8011f94:	4a19      	ldr	r2, [pc, #100]	; (8011ffc <SetSysClock+0xdc>)
 8011f96:	4b19      	ldr	r3, [pc, #100]	; (8011ffc <SetSysClock+0xdc>)
 8011f98:	689b      	ldr	r3, [r3, #8]
 8011f9a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8011f9e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8011fa0:	4b16      	ldr	r3, [pc, #88]	; (8011ffc <SetSysClock+0xdc>)
 8011fa2:	4a18      	ldr	r2, [pc, #96]	; (8012004 <SetSysClock+0xe4>)
 8011fa4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8011fa6:	4a15      	ldr	r2, [pc, #84]	; (8011ffc <SetSysClock+0xdc>)
 8011fa8:	4b14      	ldr	r3, [pc, #80]	; (8011ffc <SetSysClock+0xdc>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011fb0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8011fb2:	bf00      	nop
 8011fb4:	4b11      	ldr	r3, [pc, #68]	; (8011ffc <SetSysClock+0xdc>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d0f9      	beq.n	8011fb4 <SetSysClock+0x94>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8011fc0:	4b11      	ldr	r3, [pc, #68]	; (8012008 <SetSysClock+0xe8>)
 8011fc2:	f240 7205 	movw	r2, #1797	; 0x705
 8011fc6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8011fc8:	4a0c      	ldr	r2, [pc, #48]	; (8011ffc <SetSysClock+0xdc>)
 8011fca:	4b0c      	ldr	r3, [pc, #48]	; (8011ffc <SetSysClock+0xdc>)
 8011fcc:	689b      	ldr	r3, [r3, #8]
 8011fce:	f023 0303 	bic.w	r3, r3, #3
 8011fd2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8011fd4:	4a09      	ldr	r2, [pc, #36]	; (8011ffc <SetSysClock+0xdc>)
 8011fd6:	4b09      	ldr	r3, [pc, #36]	; (8011ffc <SetSysClock+0xdc>)
 8011fd8:	689b      	ldr	r3, [r3, #8]
 8011fda:	f043 0302 	orr.w	r3, r3, #2
 8011fde:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8011fe0:	bf00      	nop
 8011fe2:	4b06      	ldr	r3, [pc, #24]	; (8011ffc <SetSysClock+0xdc>)
 8011fe4:	689b      	ldr	r3, [r3, #8]
 8011fe6:	f003 030c 	and.w	r3, r3, #12
 8011fea:	2b08      	cmp	r3, #8
 8011fec:	d1f9      	bne.n	8011fe2 <SetSysClock+0xc2>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8011fee:	bf00      	nop
 8011ff0:	370c      	adds	r7, #12
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff8:	4770      	bx	lr
 8011ffa:	bf00      	nop
 8011ffc:	40023800 	.word	0x40023800
 8012000:	40007000 	.word	0x40007000
 8012004:	07405419 	.word	0x07405419
 8012008:	40023c00 	.word	0x40023c00

0801200c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 801200c:	b480      	push	{r7}
 801200e:	b087      	sub	sp, #28
 8012010:	af00      	add	r7, sp, #0
 8012012:	60f8      	str	r0, [r7, #12]
 8012014:	60b9      	str	r1, [r7, #8]
 8012016:	607a      	str	r2, [r7, #4]
	int div = 1;
 8012018:	2301      	movs	r3, #1
 801201a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 801201c:	e004      	b.n	8012028 <ts_itoa+0x1c>
		div *= base;
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	687a      	ldr	r2, [r7, #4]
 8012022:	fb02 f303 	mul.w	r3, r2, r3
 8012026:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	68ba      	ldr	r2, [r7, #8]
 801202c:	fbb2 f2f3 	udiv	r2, r2, r3
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	429a      	cmp	r2, r3
 8012034:	d2f3      	bcs.n	801201e <ts_itoa+0x12>

	while (div != 0)
 8012036:	e029      	b.n	801208c <ts_itoa+0x80>
	{
		int num = d/div;
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	68ba      	ldr	r2, [r7, #8]
 801203c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012040:	613b      	str	r3, [r7, #16]
		d = d%div;
 8012042:	697a      	ldr	r2, [r7, #20]
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	fbb3 f1f2 	udiv	r1, r3, r2
 801204a:	fb02 f201 	mul.w	r2, r2, r1
 801204e:	1a9b      	subs	r3, r3, r2
 8012050:	60bb      	str	r3, [r7, #8]
		div /= base;
 8012052:	697a      	ldr	r2, [r7, #20]
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	fb92 f3f3 	sdiv	r3, r2, r3
 801205a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 801205c:	693b      	ldr	r3, [r7, #16]
 801205e:	2b09      	cmp	r3, #9
 8012060:	dd0a      	ble.n	8012078 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	1c59      	adds	r1, r3, #1
 8012068:	68fa      	ldr	r2, [r7, #12]
 801206a:	6011      	str	r1, [r2, #0]
 801206c:	693a      	ldr	r2, [r7, #16]
 801206e:	b2d2      	uxtb	r2, r2
 8012070:	3237      	adds	r2, #55	; 0x37
 8012072:	b2d2      	uxtb	r2, r2
 8012074:	701a      	strb	r2, [r3, #0]
 8012076:	e009      	b.n	801208c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	1c59      	adds	r1, r3, #1
 801207e:	68fa      	ldr	r2, [r7, #12]
 8012080:	6011      	str	r1, [r2, #0]
 8012082:	693a      	ldr	r2, [r7, #16]
 8012084:	b2d2      	uxtb	r2, r2
 8012086:	3230      	adds	r2, #48	; 0x30
 8012088:	b2d2      	uxtb	r2, r2
 801208a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 801208c:	697b      	ldr	r3, [r7, #20]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d1d2      	bne.n	8012038 <ts_itoa+0x2c>
	}
}
 8012092:	bf00      	nop
 8012094:	371c      	adds	r7, #28
 8012096:	46bd      	mov	sp, r7
 8012098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209c:	4770      	bx	lr

0801209e <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 801209e:	b580      	push	{r7, lr}
 80120a0:	b088      	sub	sp, #32
 80120a2:	af00      	add	r7, sp, #0
 80120a4:	60f8      	str	r0, [r7, #12]
 80120a6:	60b9      	str	r1, [r7, #8]
 80120a8:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80120ae:	e07d      	b.n	80121ac <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	781b      	ldrb	r3, [r3, #0]
 80120b4:	2b25      	cmp	r3, #37	; 0x25
 80120b6:	d171      	bne.n	801219c <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80120b8:	68bb      	ldr	r3, [r7, #8]
 80120ba:	3301      	adds	r3, #1
 80120bc:	60bb      	str	r3, [r7, #8]
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	781b      	ldrb	r3, [r3, #0]
 80120c2:	2b64      	cmp	r3, #100	; 0x64
 80120c4:	d01e      	beq.n	8012104 <ts_formatstring+0x66>
 80120c6:	2b64      	cmp	r3, #100	; 0x64
 80120c8:	dc06      	bgt.n	80120d8 <ts_formatstring+0x3a>
 80120ca:	2b58      	cmp	r3, #88	; 0x58
 80120cc:	d050      	beq.n	8012170 <ts_formatstring+0xd2>
 80120ce:	2b63      	cmp	r3, #99	; 0x63
 80120d0:	d00e      	beq.n	80120f0 <ts_formatstring+0x52>
 80120d2:	2b25      	cmp	r3, #37	; 0x25
 80120d4:	d058      	beq.n	8012188 <ts_formatstring+0xea>
 80120d6:	e05d      	b.n	8012194 <ts_formatstring+0xf6>
 80120d8:	2b73      	cmp	r3, #115	; 0x73
 80120da:	d02b      	beq.n	8012134 <ts_formatstring+0x96>
 80120dc:	2b73      	cmp	r3, #115	; 0x73
 80120de:	dc02      	bgt.n	80120e6 <ts_formatstring+0x48>
 80120e0:	2b69      	cmp	r3, #105	; 0x69
 80120e2:	d00f      	beq.n	8012104 <ts_formatstring+0x66>
 80120e4:	e056      	b.n	8012194 <ts_formatstring+0xf6>
 80120e6:	2b75      	cmp	r3, #117	; 0x75
 80120e8:	d037      	beq.n	801215a <ts_formatstring+0xbc>
 80120ea:	2b78      	cmp	r3, #120	; 0x78
 80120ec:	d040      	beq.n	8012170 <ts_formatstring+0xd2>
 80120ee:	e051      	b.n	8012194 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	1c5a      	adds	r2, r3, #1
 80120f4:	60fa      	str	r2, [r7, #12]
 80120f6:	687a      	ldr	r2, [r7, #4]
 80120f8:	1d11      	adds	r1, r2, #4
 80120fa:	6079      	str	r1, [r7, #4]
 80120fc:	6812      	ldr	r2, [r2, #0]
 80120fe:	b2d2      	uxtb	r2, r2
 8012100:	701a      	strb	r2, [r3, #0]
				break;
 8012102:	e047      	b.n	8012194 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	1d1a      	adds	r2, r3, #4
 8012108:	607a      	str	r2, [r7, #4]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 801210e:	69fb      	ldr	r3, [r7, #28]
 8012110:	2b00      	cmp	r3, #0
 8012112:	da07      	bge.n	8012124 <ts_formatstring+0x86>
					{
						val *= -1;
 8012114:	69fb      	ldr	r3, [r7, #28]
 8012116:	425b      	negs	r3, r3
 8012118:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	1c5a      	adds	r2, r3, #1
 801211e:	60fa      	str	r2, [r7, #12]
 8012120:	222d      	movs	r2, #45	; 0x2d
 8012122:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8012124:	69f9      	ldr	r1, [r7, #28]
 8012126:	f107 030c 	add.w	r3, r7, #12
 801212a:	220a      	movs	r2, #10
 801212c:	4618      	mov	r0, r3
 801212e:	f7ff ff6d 	bl	801200c <ts_itoa>
				}
				break;
 8012132:	e02f      	b.n	8012194 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	1d1a      	adds	r2, r3, #4
 8012138:	607a      	str	r2, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	61bb      	str	r3, [r7, #24]
					while (*arg)
 801213e:	e007      	b.n	8012150 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	1c5a      	adds	r2, r3, #1
 8012144:	60fa      	str	r2, [r7, #12]
 8012146:	69ba      	ldr	r2, [r7, #24]
 8012148:	1c51      	adds	r1, r2, #1
 801214a:	61b9      	str	r1, [r7, #24]
 801214c:	7812      	ldrb	r2, [r2, #0]
 801214e:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8012150:	69bb      	ldr	r3, [r7, #24]
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d1f3      	bne.n	8012140 <ts_formatstring+0xa2>
					}
				}
				break;
 8012158:	e01c      	b.n	8012194 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	1d1a      	adds	r2, r3, #4
 801215e:	607a      	str	r2, [r7, #4]
 8012160:	6819      	ldr	r1, [r3, #0]
 8012162:	f107 030c 	add.w	r3, r7, #12
 8012166:	220a      	movs	r2, #10
 8012168:	4618      	mov	r0, r3
 801216a:	f7ff ff4f 	bl	801200c <ts_itoa>
				break;
 801216e:	e011      	b.n	8012194 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	1d1a      	adds	r2, r3, #4
 8012174:	607a      	str	r2, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	4619      	mov	r1, r3
 801217a:	f107 030c 	add.w	r3, r7, #12
 801217e:	2210      	movs	r2, #16
 8012180:	4618      	mov	r0, r3
 8012182:	f7ff ff43 	bl	801200c <ts_itoa>
				break;
 8012186:	e005      	b.n	8012194 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	1c5a      	adds	r2, r3, #1
 801218c:	60fa      	str	r2, [r7, #12]
 801218e:	2225      	movs	r2, #37	; 0x25
 8012190:	701a      	strb	r2, [r3, #0]
				  break;
 8012192:	bf00      	nop
			}
			fmt++;
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	3301      	adds	r3, #1
 8012198:	60bb      	str	r3, [r7, #8]
 801219a:	e007      	b.n	80121ac <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	1c5a      	adds	r2, r3, #1
 80121a0:	60fa      	str	r2, [r7, #12]
 80121a2:	68ba      	ldr	r2, [r7, #8]
 80121a4:	1c51      	adds	r1, r2, #1
 80121a6:	60b9      	str	r1, [r7, #8]
 80121a8:	7812      	ldrb	r2, [r2, #0]
 80121aa:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	f47f af7d 	bne.w	80120b0 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	2200      	movs	r2, #0
 80121ba:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	461a      	mov	r2, r3
 80121c0:	697b      	ldr	r3, [r7, #20]
 80121c2:	1ad3      	subs	r3, r2, r3
}
 80121c4:	4618      	mov	r0, r3
 80121c6:	3720      	adds	r7, #32
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}

080121cc <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80121cc:	b480      	push	{r7}
 80121ce:	b085      	sub	sp, #20
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
 80121d4:	6039      	str	r1, [r7, #0]
	int length = 0;
 80121d6:	2300      	movs	r3, #0
 80121d8:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 80121da:	e081      	b.n	80122e0 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	781b      	ldrb	r3, [r3, #0]
 80121e0:	2b25      	cmp	r3, #37	; 0x25
 80121e2:	d177      	bne.n	80122d4 <ts_formatlength+0x108>
		{
			++fmt;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	3301      	adds	r3, #1
 80121e8:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	781b      	ldrb	r3, [r3, #0]
 80121ee:	3b58      	subs	r3, #88	; 0x58
 80121f0:	2b20      	cmp	r3, #32
 80121f2:	d86a      	bhi.n	80122ca <ts_formatlength+0xfe>
 80121f4:	a201      	add	r2, pc, #4	; (adr r2, 80121fc <ts_formatlength+0x30>)
 80121f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121fa:	bf00      	nop
 80121fc:	080122bd 	.word	0x080122bd
 8012200:	080122cb 	.word	0x080122cb
 8012204:	080122cb 	.word	0x080122cb
 8012208:	080122cb 	.word	0x080122cb
 801220c:	080122cb 	.word	0x080122cb
 8012210:	080122cb 	.word	0x080122cb
 8012214:	080122cb 	.word	0x080122cb
 8012218:	080122cb 	.word	0x080122cb
 801221c:	080122cb 	.word	0x080122cb
 8012220:	080122cb 	.word	0x080122cb
 8012224:	080122cb 	.word	0x080122cb
 8012228:	08012281 	.word	0x08012281
 801222c:	0801228f 	.word	0x0801228f
 8012230:	080122cb 	.word	0x080122cb
 8012234:	080122cb 	.word	0x080122cb
 8012238:	080122cb 	.word	0x080122cb
 801223c:	080122cb 	.word	0x080122cb
 8012240:	0801228f 	.word	0x0801228f
 8012244:	080122cb 	.word	0x080122cb
 8012248:	080122cb 	.word	0x080122cb
 801224c:	080122cb 	.word	0x080122cb
 8012250:	080122cb 	.word	0x080122cb
 8012254:	080122cb 	.word	0x080122cb
 8012258:	080122cb 	.word	0x080122cb
 801225c:	080122cb 	.word	0x080122cb
 8012260:	080122cb 	.word	0x080122cb
 8012264:	080122cb 	.word	0x080122cb
 8012268:	0801229d 	.word	0x0801229d
 801226c:	080122cb 	.word	0x080122cb
 8012270:	0801228f 	.word	0x0801228f
 8012274:	080122cb 	.word	0x080122cb
 8012278:	080122cb 	.word	0x080122cb
 801227c:	080122bd 	.word	0x080122bd
			{
			  case 'c':
		  		  va_arg(va, int);
 8012280:	683b      	ldr	r3, [r7, #0]
 8012282:	3304      	adds	r3, #4
 8012284:	603b      	str	r3, [r7, #0]
				  ++length;
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	3301      	adds	r3, #1
 801228a:	60fb      	str	r3, [r7, #12]
				  break;
 801228c:	e025      	b.n	80122da <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	330b      	adds	r3, #11
 8012292:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	3304      	adds	r3, #4
 8012298:	603b      	str	r3, [r7, #0]
				  break;
 801229a:	e01e      	b.n	80122da <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	1d1a      	adds	r2, r3, #4
 80122a0:	603a      	str	r2, [r7, #0]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80122a6:	e002      	b.n	80122ae <ts_formatlength+0xe2>
			  			  ++length;
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	3301      	adds	r3, #1
 80122ac:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	1c5a      	adds	r2, r3, #1
 80122b2:	60ba      	str	r2, [r7, #8]
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d1f6      	bne.n	80122a8 <ts_formatlength+0xdc>
			  	  }
				  break;
 80122ba:	e00e      	b.n	80122da <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	3308      	adds	r3, #8
 80122c0:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 80122c2:	683b      	ldr	r3, [r7, #0]
 80122c4:	3304      	adds	r3, #4
 80122c6:	603b      	str	r3, [r7, #0]
				  break;
 80122c8:	e007      	b.n	80122da <ts_formatlength+0x10e>
			  default:
				  ++length;
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	3301      	adds	r3, #1
 80122ce:	60fb      	str	r3, [r7, #12]
				  break;
 80122d0:	bf00      	nop
 80122d2:	e002      	b.n	80122da <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	3301      	adds	r3, #1
 80122d8:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	3301      	adds	r3, #1
 80122de:	607b      	str	r3, [r7, #4]
	while (*fmt)
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	781b      	ldrb	r3, [r3, #0]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	f47f af79 	bne.w	80121dc <ts_formatlength+0x10>
	}
	return length;
 80122ea:	68fb      	ldr	r3, [r7, #12]
}
 80122ec:	4618      	mov	r0, r3
 80122ee:	3714      	adds	r7, #20
 80122f0:	46bd      	mov	sp, r7
 80122f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f6:	4770      	bx	lr

080122f8 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 80122f8:	b40f      	push	{r0, r1, r2, r3}
 80122fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80122fe:	b085      	sub	sp, #20
 8012300:	af00      	add	r7, sp, #0
	int length = 0;
 8012302:	2300      	movs	r3, #0
 8012304:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8012306:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801230a:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 801230c:	6839      	ldr	r1, [r7, #0]
 801230e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012310:	f7ff ff5c 	bl	80121cc <ts_formatlength>
 8012314:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8012316:	466b      	mov	r3, sp
 8012318:	461e      	mov	r6, r3
		char buf[length];
 801231a:	68f9      	ldr	r1, [r7, #12]
 801231c:	1e4b      	subs	r3, r1, #1
 801231e:	60bb      	str	r3, [r7, #8]
 8012320:	460b      	mov	r3, r1
 8012322:	461a      	mov	r2, r3
 8012324:	f04f 0300 	mov.w	r3, #0
 8012328:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 801232c:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8012330:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8012334:	460b      	mov	r3, r1
 8012336:	461a      	mov	r2, r3
 8012338:	f04f 0300 	mov.w	r3, #0
 801233c:	00dd      	lsls	r5, r3, #3
 801233e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8012342:	00d4      	lsls	r4, r2, #3
 8012344:	460b      	mov	r3, r1
 8012346:	3307      	adds	r3, #7
 8012348:	08db      	lsrs	r3, r3, #3
 801234a:	00db      	lsls	r3, r3, #3
 801234c:	ebad 0d03 	sub.w	sp, sp, r3
 8012350:	466b      	mov	r3, sp
 8012352:	3300      	adds	r3, #0
 8012354:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8012356:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801235a:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	683a      	ldr	r2, [r7, #0]
 8012360:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012362:	4618      	mov	r0, r3
 8012364:	f7ff fe9b 	bl	801209e <ts_formatstring>
 8012368:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	68fa      	ldr	r2, [r7, #12]
 801236e:	4619      	mov	r1, r3
 8012370:	2001      	movs	r0, #1
 8012372:	f7ff fd31 	bl	8011dd8 <_write>
 8012376:	60f8      	str	r0, [r7, #12]
 8012378:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 801237a:	68fb      	ldr	r3, [r7, #12]
}
 801237c:	4618      	mov	r0, r3
 801237e:	3714      	adds	r7, #20
 8012380:	46bd      	mov	sp, r7
 8012382:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012386:	b004      	add	sp, #16
 8012388:	4770      	bx	lr

0801238a <abort>:
 801238a:	b508      	push	{r3, lr}
 801238c:	2006      	movs	r0, #6
 801238e:	f000 fae7 	bl	8012960 <raise>
 8012392:	2001      	movs	r0, #1
 8012394:	f7ff fd1a 	bl	8011dcc <_exit>

08012398 <__sflush_r>:
 8012398:	898a      	ldrh	r2, [r1, #12]
 801239a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801239e:	4605      	mov	r5, r0
 80123a0:	0710      	lsls	r0, r2, #28
 80123a2:	460c      	mov	r4, r1
 80123a4:	d45a      	bmi.n	801245c <__sflush_r+0xc4>
 80123a6:	684b      	ldr	r3, [r1, #4]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	dc05      	bgt.n	80123b8 <__sflush_r+0x20>
 80123ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	dc02      	bgt.n	80123b8 <__sflush_r+0x20>
 80123b2:	2000      	movs	r0, #0
 80123b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123ba:	2e00      	cmp	r6, #0
 80123bc:	d0f9      	beq.n	80123b2 <__sflush_r+0x1a>
 80123be:	2300      	movs	r3, #0
 80123c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80123c4:	682f      	ldr	r7, [r5, #0]
 80123c6:	602b      	str	r3, [r5, #0]
 80123c8:	d033      	beq.n	8012432 <__sflush_r+0x9a>
 80123ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80123cc:	89a3      	ldrh	r3, [r4, #12]
 80123ce:	075a      	lsls	r2, r3, #29
 80123d0:	d505      	bpl.n	80123de <__sflush_r+0x46>
 80123d2:	6863      	ldr	r3, [r4, #4]
 80123d4:	1ac0      	subs	r0, r0, r3
 80123d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80123d8:	b10b      	cbz	r3, 80123de <__sflush_r+0x46>
 80123da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80123dc:	1ac0      	subs	r0, r0, r3
 80123de:	2300      	movs	r3, #0
 80123e0:	4602      	mov	r2, r0
 80123e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123e4:	6a21      	ldr	r1, [r4, #32]
 80123e6:	4628      	mov	r0, r5
 80123e8:	47b0      	blx	r6
 80123ea:	1c43      	adds	r3, r0, #1
 80123ec:	89a3      	ldrh	r3, [r4, #12]
 80123ee:	d106      	bne.n	80123fe <__sflush_r+0x66>
 80123f0:	6829      	ldr	r1, [r5, #0]
 80123f2:	291d      	cmp	r1, #29
 80123f4:	d84b      	bhi.n	801248e <__sflush_r+0xf6>
 80123f6:	4a2b      	ldr	r2, [pc, #172]	; (80124a4 <__sflush_r+0x10c>)
 80123f8:	40ca      	lsrs	r2, r1
 80123fa:	07d6      	lsls	r6, r2, #31
 80123fc:	d547      	bpl.n	801248e <__sflush_r+0xf6>
 80123fe:	2200      	movs	r2, #0
 8012400:	6062      	str	r2, [r4, #4]
 8012402:	04d9      	lsls	r1, r3, #19
 8012404:	6922      	ldr	r2, [r4, #16]
 8012406:	6022      	str	r2, [r4, #0]
 8012408:	d504      	bpl.n	8012414 <__sflush_r+0x7c>
 801240a:	1c42      	adds	r2, r0, #1
 801240c:	d101      	bne.n	8012412 <__sflush_r+0x7a>
 801240e:	682b      	ldr	r3, [r5, #0]
 8012410:	b903      	cbnz	r3, 8012414 <__sflush_r+0x7c>
 8012412:	6560      	str	r0, [r4, #84]	; 0x54
 8012414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012416:	602f      	str	r7, [r5, #0]
 8012418:	2900      	cmp	r1, #0
 801241a:	d0ca      	beq.n	80123b2 <__sflush_r+0x1a>
 801241c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012420:	4299      	cmp	r1, r3
 8012422:	d002      	beq.n	801242a <__sflush_r+0x92>
 8012424:	4628      	mov	r0, r5
 8012426:	f000 f9b7 	bl	8012798 <_free_r>
 801242a:	2000      	movs	r0, #0
 801242c:	6360      	str	r0, [r4, #52]	; 0x34
 801242e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012432:	6a21      	ldr	r1, [r4, #32]
 8012434:	2301      	movs	r3, #1
 8012436:	4628      	mov	r0, r5
 8012438:	47b0      	blx	r6
 801243a:	1c41      	adds	r1, r0, #1
 801243c:	d1c6      	bne.n	80123cc <__sflush_r+0x34>
 801243e:	682b      	ldr	r3, [r5, #0]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d0c3      	beq.n	80123cc <__sflush_r+0x34>
 8012444:	2b1d      	cmp	r3, #29
 8012446:	d001      	beq.n	801244c <__sflush_r+0xb4>
 8012448:	2b16      	cmp	r3, #22
 801244a:	d101      	bne.n	8012450 <__sflush_r+0xb8>
 801244c:	602f      	str	r7, [r5, #0]
 801244e:	e7b0      	b.n	80123b2 <__sflush_r+0x1a>
 8012450:	89a3      	ldrh	r3, [r4, #12]
 8012452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012456:	81a3      	strh	r3, [r4, #12]
 8012458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801245c:	690f      	ldr	r7, [r1, #16]
 801245e:	2f00      	cmp	r7, #0
 8012460:	d0a7      	beq.n	80123b2 <__sflush_r+0x1a>
 8012462:	0793      	lsls	r3, r2, #30
 8012464:	680e      	ldr	r6, [r1, #0]
 8012466:	bf08      	it	eq
 8012468:	694b      	ldreq	r3, [r1, #20]
 801246a:	600f      	str	r7, [r1, #0]
 801246c:	bf18      	it	ne
 801246e:	2300      	movne	r3, #0
 8012470:	eba6 0807 	sub.w	r8, r6, r7
 8012474:	608b      	str	r3, [r1, #8]
 8012476:	f1b8 0f00 	cmp.w	r8, #0
 801247a:	dd9a      	ble.n	80123b2 <__sflush_r+0x1a>
 801247c:	4643      	mov	r3, r8
 801247e:	463a      	mov	r2, r7
 8012480:	6a21      	ldr	r1, [r4, #32]
 8012482:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012484:	4628      	mov	r0, r5
 8012486:	47b0      	blx	r6
 8012488:	2800      	cmp	r0, #0
 801248a:	dc07      	bgt.n	801249c <__sflush_r+0x104>
 801248c:	89a3      	ldrh	r3, [r4, #12]
 801248e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012492:	81a3      	strh	r3, [r4, #12]
 8012494:	f04f 30ff 	mov.w	r0, #4294967295
 8012498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801249c:	4407      	add	r7, r0
 801249e:	eba8 0800 	sub.w	r8, r8, r0
 80124a2:	e7e8      	b.n	8012476 <__sflush_r+0xde>
 80124a4:	20400001 	.word	0x20400001

080124a8 <_fflush_r>:
 80124a8:	b538      	push	{r3, r4, r5, lr}
 80124aa:	690b      	ldr	r3, [r1, #16]
 80124ac:	4605      	mov	r5, r0
 80124ae:	460c      	mov	r4, r1
 80124b0:	b1db      	cbz	r3, 80124ea <_fflush_r+0x42>
 80124b2:	b118      	cbz	r0, 80124bc <_fflush_r+0x14>
 80124b4:	6983      	ldr	r3, [r0, #24]
 80124b6:	b90b      	cbnz	r3, 80124bc <_fflush_r+0x14>
 80124b8:	f000 f872 	bl	80125a0 <__sinit>
 80124bc:	4b0c      	ldr	r3, [pc, #48]	; (80124f0 <_fflush_r+0x48>)
 80124be:	429c      	cmp	r4, r3
 80124c0:	d109      	bne.n	80124d6 <_fflush_r+0x2e>
 80124c2:	686c      	ldr	r4, [r5, #4]
 80124c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124c8:	b17b      	cbz	r3, 80124ea <_fflush_r+0x42>
 80124ca:	4621      	mov	r1, r4
 80124cc:	4628      	mov	r0, r5
 80124ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124d2:	f7ff bf61 	b.w	8012398 <__sflush_r>
 80124d6:	4b07      	ldr	r3, [pc, #28]	; (80124f4 <_fflush_r+0x4c>)
 80124d8:	429c      	cmp	r4, r3
 80124da:	d101      	bne.n	80124e0 <_fflush_r+0x38>
 80124dc:	68ac      	ldr	r4, [r5, #8]
 80124de:	e7f1      	b.n	80124c4 <_fflush_r+0x1c>
 80124e0:	4b05      	ldr	r3, [pc, #20]	; (80124f8 <_fflush_r+0x50>)
 80124e2:	429c      	cmp	r4, r3
 80124e4:	bf08      	it	eq
 80124e6:	68ec      	ldreq	r4, [r5, #12]
 80124e8:	e7ec      	b.n	80124c4 <_fflush_r+0x1c>
 80124ea:	2000      	movs	r0, #0
 80124ec:	bd38      	pop	{r3, r4, r5, pc}
 80124ee:	bf00      	nop
 80124f0:	08015edc 	.word	0x08015edc
 80124f4:	08015efc 	.word	0x08015efc
 80124f8:	08015ebc 	.word	0x08015ebc

080124fc <fflush>:
 80124fc:	4601      	mov	r1, r0
 80124fe:	b920      	cbnz	r0, 801250a <fflush+0xe>
 8012500:	4b04      	ldr	r3, [pc, #16]	; (8012514 <fflush+0x18>)
 8012502:	4905      	ldr	r1, [pc, #20]	; (8012518 <fflush+0x1c>)
 8012504:	6818      	ldr	r0, [r3, #0]
 8012506:	f000 b8b7 	b.w	8012678 <_fwalk_reent>
 801250a:	4b04      	ldr	r3, [pc, #16]	; (801251c <fflush+0x20>)
 801250c:	6818      	ldr	r0, [r3, #0]
 801250e:	f7ff bfcb 	b.w	80124a8 <_fflush_r>
 8012512:	bf00      	nop
 8012514:	08015f1c 	.word	0x08015f1c
 8012518:	080124a9 	.word	0x080124a9
 801251c:	20000020 	.word	0x20000020

08012520 <_cleanup_r>:
 8012520:	4901      	ldr	r1, [pc, #4]	; (8012528 <_cleanup_r+0x8>)
 8012522:	f000 b8a9 	b.w	8012678 <_fwalk_reent>
 8012526:	bf00      	nop
 8012528:	080124a9 	.word	0x080124a9

0801252c <std.isra.0>:
 801252c:	2300      	movs	r3, #0
 801252e:	b510      	push	{r4, lr}
 8012530:	4604      	mov	r4, r0
 8012532:	6003      	str	r3, [r0, #0]
 8012534:	6043      	str	r3, [r0, #4]
 8012536:	6083      	str	r3, [r0, #8]
 8012538:	8181      	strh	r1, [r0, #12]
 801253a:	6643      	str	r3, [r0, #100]	; 0x64
 801253c:	81c2      	strh	r2, [r0, #14]
 801253e:	6103      	str	r3, [r0, #16]
 8012540:	6143      	str	r3, [r0, #20]
 8012542:	6183      	str	r3, [r0, #24]
 8012544:	4619      	mov	r1, r3
 8012546:	2208      	movs	r2, #8
 8012548:	305c      	adds	r0, #92	; 0x5c
 801254a:	f000 f91c 	bl	8012786 <memset>
 801254e:	4b05      	ldr	r3, [pc, #20]	; (8012564 <std.isra.0+0x38>)
 8012550:	6263      	str	r3, [r4, #36]	; 0x24
 8012552:	4b05      	ldr	r3, [pc, #20]	; (8012568 <std.isra.0+0x3c>)
 8012554:	62a3      	str	r3, [r4, #40]	; 0x28
 8012556:	4b05      	ldr	r3, [pc, #20]	; (801256c <std.isra.0+0x40>)
 8012558:	62e3      	str	r3, [r4, #44]	; 0x2c
 801255a:	4b05      	ldr	r3, [pc, #20]	; (8012570 <std.isra.0+0x44>)
 801255c:	6224      	str	r4, [r4, #32]
 801255e:	6323      	str	r3, [r4, #48]	; 0x30
 8012560:	bd10      	pop	{r4, pc}
 8012562:	bf00      	nop
 8012564:	08012a01 	.word	0x08012a01
 8012568:	08012a23 	.word	0x08012a23
 801256c:	08012a5b 	.word	0x08012a5b
 8012570:	08012a7f 	.word	0x08012a7f

08012574 <__sfmoreglue>:
 8012574:	b570      	push	{r4, r5, r6, lr}
 8012576:	1e4a      	subs	r2, r1, #1
 8012578:	2568      	movs	r5, #104	; 0x68
 801257a:	4355      	muls	r5, r2
 801257c:	460e      	mov	r6, r1
 801257e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012582:	f000 f957 	bl	8012834 <_malloc_r>
 8012586:	4604      	mov	r4, r0
 8012588:	b140      	cbz	r0, 801259c <__sfmoreglue+0x28>
 801258a:	2100      	movs	r1, #0
 801258c:	e880 0042 	stmia.w	r0, {r1, r6}
 8012590:	300c      	adds	r0, #12
 8012592:	60a0      	str	r0, [r4, #8]
 8012594:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012598:	f000 f8f5 	bl	8012786 <memset>
 801259c:	4620      	mov	r0, r4
 801259e:	bd70      	pop	{r4, r5, r6, pc}

080125a0 <__sinit>:
 80125a0:	6983      	ldr	r3, [r0, #24]
 80125a2:	b510      	push	{r4, lr}
 80125a4:	4604      	mov	r4, r0
 80125a6:	bb33      	cbnz	r3, 80125f6 <__sinit+0x56>
 80125a8:	6483      	str	r3, [r0, #72]	; 0x48
 80125aa:	64c3      	str	r3, [r0, #76]	; 0x4c
 80125ac:	6503      	str	r3, [r0, #80]	; 0x50
 80125ae:	4b12      	ldr	r3, [pc, #72]	; (80125f8 <__sinit+0x58>)
 80125b0:	4a12      	ldr	r2, [pc, #72]	; (80125fc <__sinit+0x5c>)
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	6282      	str	r2, [r0, #40]	; 0x28
 80125b6:	4298      	cmp	r0, r3
 80125b8:	bf04      	itt	eq
 80125ba:	2301      	moveq	r3, #1
 80125bc:	6183      	streq	r3, [r0, #24]
 80125be:	f000 f81f 	bl	8012600 <__sfp>
 80125c2:	6060      	str	r0, [r4, #4]
 80125c4:	4620      	mov	r0, r4
 80125c6:	f000 f81b 	bl	8012600 <__sfp>
 80125ca:	60a0      	str	r0, [r4, #8]
 80125cc:	4620      	mov	r0, r4
 80125ce:	f000 f817 	bl	8012600 <__sfp>
 80125d2:	2200      	movs	r2, #0
 80125d4:	60e0      	str	r0, [r4, #12]
 80125d6:	2104      	movs	r1, #4
 80125d8:	6860      	ldr	r0, [r4, #4]
 80125da:	f7ff ffa7 	bl	801252c <std.isra.0>
 80125de:	2201      	movs	r2, #1
 80125e0:	2109      	movs	r1, #9
 80125e2:	68a0      	ldr	r0, [r4, #8]
 80125e4:	f7ff ffa2 	bl	801252c <std.isra.0>
 80125e8:	2202      	movs	r2, #2
 80125ea:	2112      	movs	r1, #18
 80125ec:	68e0      	ldr	r0, [r4, #12]
 80125ee:	f7ff ff9d 	bl	801252c <std.isra.0>
 80125f2:	2301      	movs	r3, #1
 80125f4:	61a3      	str	r3, [r4, #24]
 80125f6:	bd10      	pop	{r4, pc}
 80125f8:	08015f1c 	.word	0x08015f1c
 80125fc:	08012521 	.word	0x08012521

08012600 <__sfp>:
 8012600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012602:	4b1c      	ldr	r3, [pc, #112]	; (8012674 <__sfp+0x74>)
 8012604:	681e      	ldr	r6, [r3, #0]
 8012606:	69b3      	ldr	r3, [r6, #24]
 8012608:	4607      	mov	r7, r0
 801260a:	b913      	cbnz	r3, 8012612 <__sfp+0x12>
 801260c:	4630      	mov	r0, r6
 801260e:	f7ff ffc7 	bl	80125a0 <__sinit>
 8012612:	3648      	adds	r6, #72	; 0x48
 8012614:	68b4      	ldr	r4, [r6, #8]
 8012616:	6873      	ldr	r3, [r6, #4]
 8012618:	3b01      	subs	r3, #1
 801261a:	d503      	bpl.n	8012624 <__sfp+0x24>
 801261c:	6833      	ldr	r3, [r6, #0]
 801261e:	b133      	cbz	r3, 801262e <__sfp+0x2e>
 8012620:	6836      	ldr	r6, [r6, #0]
 8012622:	e7f7      	b.n	8012614 <__sfp+0x14>
 8012624:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012628:	b16d      	cbz	r5, 8012646 <__sfp+0x46>
 801262a:	3468      	adds	r4, #104	; 0x68
 801262c:	e7f4      	b.n	8012618 <__sfp+0x18>
 801262e:	2104      	movs	r1, #4
 8012630:	4638      	mov	r0, r7
 8012632:	f7ff ff9f 	bl	8012574 <__sfmoreglue>
 8012636:	6030      	str	r0, [r6, #0]
 8012638:	2800      	cmp	r0, #0
 801263a:	d1f1      	bne.n	8012620 <__sfp+0x20>
 801263c:	230c      	movs	r3, #12
 801263e:	603b      	str	r3, [r7, #0]
 8012640:	4604      	mov	r4, r0
 8012642:	4620      	mov	r0, r4
 8012644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801264a:	81e3      	strh	r3, [r4, #14]
 801264c:	2301      	movs	r3, #1
 801264e:	81a3      	strh	r3, [r4, #12]
 8012650:	6665      	str	r5, [r4, #100]	; 0x64
 8012652:	6025      	str	r5, [r4, #0]
 8012654:	60a5      	str	r5, [r4, #8]
 8012656:	6065      	str	r5, [r4, #4]
 8012658:	6125      	str	r5, [r4, #16]
 801265a:	6165      	str	r5, [r4, #20]
 801265c:	61a5      	str	r5, [r4, #24]
 801265e:	2208      	movs	r2, #8
 8012660:	4629      	mov	r1, r5
 8012662:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012666:	f000 f88e 	bl	8012786 <memset>
 801266a:	6365      	str	r5, [r4, #52]	; 0x34
 801266c:	63a5      	str	r5, [r4, #56]	; 0x38
 801266e:	64a5      	str	r5, [r4, #72]	; 0x48
 8012670:	64e5      	str	r5, [r4, #76]	; 0x4c
 8012672:	e7e6      	b.n	8012642 <__sfp+0x42>
 8012674:	08015f1c 	.word	0x08015f1c

08012678 <_fwalk_reent>:
 8012678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801267c:	4680      	mov	r8, r0
 801267e:	4689      	mov	r9, r1
 8012680:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012684:	2600      	movs	r6, #0
 8012686:	b914      	cbnz	r4, 801268e <_fwalk_reent+0x16>
 8012688:	4630      	mov	r0, r6
 801268a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801268e:	68a5      	ldr	r5, [r4, #8]
 8012690:	6867      	ldr	r7, [r4, #4]
 8012692:	3f01      	subs	r7, #1
 8012694:	d501      	bpl.n	801269a <_fwalk_reent+0x22>
 8012696:	6824      	ldr	r4, [r4, #0]
 8012698:	e7f5      	b.n	8012686 <_fwalk_reent+0xe>
 801269a:	89ab      	ldrh	r3, [r5, #12]
 801269c:	2b01      	cmp	r3, #1
 801269e:	d907      	bls.n	80126b0 <_fwalk_reent+0x38>
 80126a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80126a4:	3301      	adds	r3, #1
 80126a6:	d003      	beq.n	80126b0 <_fwalk_reent+0x38>
 80126a8:	4629      	mov	r1, r5
 80126aa:	4640      	mov	r0, r8
 80126ac:	47c8      	blx	r9
 80126ae:	4306      	orrs	r6, r0
 80126b0:	3568      	adds	r5, #104	; 0x68
 80126b2:	e7ee      	b.n	8012692 <_fwalk_reent+0x1a>

080126b4 <__libc_init_array>:
 80126b4:	b570      	push	{r4, r5, r6, lr}
 80126b6:	4e0d      	ldr	r6, [pc, #52]	; (80126ec <__libc_init_array+0x38>)
 80126b8:	4c0d      	ldr	r4, [pc, #52]	; (80126f0 <__libc_init_array+0x3c>)
 80126ba:	1ba4      	subs	r4, r4, r6
 80126bc:	10a4      	asrs	r4, r4, #2
 80126be:	2500      	movs	r5, #0
 80126c0:	42a5      	cmp	r5, r4
 80126c2:	d109      	bne.n	80126d8 <__libc_init_array+0x24>
 80126c4:	4e0b      	ldr	r6, [pc, #44]	; (80126f4 <__libc_init_array+0x40>)
 80126c6:	4c0c      	ldr	r4, [pc, #48]	; (80126f8 <__libc_init_array+0x44>)
 80126c8:	f000 fd78 	bl	80131bc <_init>
 80126cc:	1ba4      	subs	r4, r4, r6
 80126ce:	10a4      	asrs	r4, r4, #2
 80126d0:	2500      	movs	r5, #0
 80126d2:	42a5      	cmp	r5, r4
 80126d4:	d105      	bne.n	80126e2 <__libc_init_array+0x2e>
 80126d6:	bd70      	pop	{r4, r5, r6, pc}
 80126d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80126dc:	4798      	blx	r3
 80126de:	3501      	adds	r5, #1
 80126e0:	e7ee      	b.n	80126c0 <__libc_init_array+0xc>
 80126e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80126e6:	4798      	blx	r3
 80126e8:	3501      	adds	r5, #1
 80126ea:	e7f2      	b.n	80126d2 <__libc_init_array+0x1e>
 80126ec:	08016060 	.word	0x08016060
 80126f0:	08016060 	.word	0x08016060
 80126f4:	08016060 	.word	0x08016060
 80126f8:	08016064 	.word	0x08016064

080126fc <__locale_ctype_ptr>:
 80126fc:	4b04      	ldr	r3, [pc, #16]	; (8012710 <__locale_ctype_ptr+0x14>)
 80126fe:	4a05      	ldr	r2, [pc, #20]	; (8012714 <__locale_ctype_ptr+0x18>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	6a1b      	ldr	r3, [r3, #32]
 8012704:	2b00      	cmp	r3, #0
 8012706:	bf08      	it	eq
 8012708:	4613      	moveq	r3, r2
 801270a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801270e:	4770      	bx	lr
 8012710:	20000020 	.word	0x20000020
 8012714:	20000084 	.word	0x20000084

08012718 <__ascii_mbtowc>:
 8012718:	b082      	sub	sp, #8
 801271a:	b901      	cbnz	r1, 801271e <__ascii_mbtowc+0x6>
 801271c:	a901      	add	r1, sp, #4
 801271e:	b142      	cbz	r2, 8012732 <__ascii_mbtowc+0x1a>
 8012720:	b14b      	cbz	r3, 8012736 <__ascii_mbtowc+0x1e>
 8012722:	7813      	ldrb	r3, [r2, #0]
 8012724:	600b      	str	r3, [r1, #0]
 8012726:	7812      	ldrb	r2, [r2, #0]
 8012728:	1c10      	adds	r0, r2, #0
 801272a:	bf18      	it	ne
 801272c:	2001      	movne	r0, #1
 801272e:	b002      	add	sp, #8
 8012730:	4770      	bx	lr
 8012732:	4610      	mov	r0, r2
 8012734:	e7fb      	b.n	801272e <__ascii_mbtowc+0x16>
 8012736:	f06f 0001 	mvn.w	r0, #1
 801273a:	e7f8      	b.n	801272e <__ascii_mbtowc+0x16>

0801273c <memcpy>:
 801273c:	b510      	push	{r4, lr}
 801273e:	1e43      	subs	r3, r0, #1
 8012740:	440a      	add	r2, r1
 8012742:	4291      	cmp	r1, r2
 8012744:	d100      	bne.n	8012748 <memcpy+0xc>
 8012746:	bd10      	pop	{r4, pc}
 8012748:	f811 4b01 	ldrb.w	r4, [r1], #1
 801274c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012750:	e7f7      	b.n	8012742 <memcpy+0x6>

08012752 <memmove>:
 8012752:	4288      	cmp	r0, r1
 8012754:	b510      	push	{r4, lr}
 8012756:	eb01 0302 	add.w	r3, r1, r2
 801275a:	d803      	bhi.n	8012764 <memmove+0x12>
 801275c:	1e42      	subs	r2, r0, #1
 801275e:	4299      	cmp	r1, r3
 8012760:	d10c      	bne.n	801277c <memmove+0x2a>
 8012762:	bd10      	pop	{r4, pc}
 8012764:	4298      	cmp	r0, r3
 8012766:	d2f9      	bcs.n	801275c <memmove+0xa>
 8012768:	1881      	adds	r1, r0, r2
 801276a:	1ad2      	subs	r2, r2, r3
 801276c:	42d3      	cmn	r3, r2
 801276e:	d100      	bne.n	8012772 <memmove+0x20>
 8012770:	bd10      	pop	{r4, pc}
 8012772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012776:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801277a:	e7f7      	b.n	801276c <memmove+0x1a>
 801277c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012780:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012784:	e7eb      	b.n	801275e <memmove+0xc>

08012786 <memset>:
 8012786:	4402      	add	r2, r0
 8012788:	4603      	mov	r3, r0
 801278a:	4293      	cmp	r3, r2
 801278c:	d100      	bne.n	8012790 <memset+0xa>
 801278e:	4770      	bx	lr
 8012790:	f803 1b01 	strb.w	r1, [r3], #1
 8012794:	e7f9      	b.n	801278a <memset+0x4>
	...

08012798 <_free_r>:
 8012798:	b538      	push	{r3, r4, r5, lr}
 801279a:	4605      	mov	r5, r0
 801279c:	2900      	cmp	r1, #0
 801279e:	d045      	beq.n	801282c <_free_r+0x94>
 80127a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127a4:	1f0c      	subs	r4, r1, #4
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	bfb8      	it	lt
 80127aa:	18e4      	addlt	r4, r4, r3
 80127ac:	f000 f9dc 	bl	8012b68 <__malloc_lock>
 80127b0:	4a1f      	ldr	r2, [pc, #124]	; (8012830 <_free_r+0x98>)
 80127b2:	6813      	ldr	r3, [r2, #0]
 80127b4:	4610      	mov	r0, r2
 80127b6:	b933      	cbnz	r3, 80127c6 <_free_r+0x2e>
 80127b8:	6063      	str	r3, [r4, #4]
 80127ba:	6014      	str	r4, [r2, #0]
 80127bc:	4628      	mov	r0, r5
 80127be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127c2:	f000 b9d2 	b.w	8012b6a <__malloc_unlock>
 80127c6:	42a3      	cmp	r3, r4
 80127c8:	d90c      	bls.n	80127e4 <_free_r+0x4c>
 80127ca:	6821      	ldr	r1, [r4, #0]
 80127cc:	1862      	adds	r2, r4, r1
 80127ce:	4293      	cmp	r3, r2
 80127d0:	bf04      	itt	eq
 80127d2:	681a      	ldreq	r2, [r3, #0]
 80127d4:	685b      	ldreq	r3, [r3, #4]
 80127d6:	6063      	str	r3, [r4, #4]
 80127d8:	bf04      	itt	eq
 80127da:	1852      	addeq	r2, r2, r1
 80127dc:	6022      	streq	r2, [r4, #0]
 80127de:	6004      	str	r4, [r0, #0]
 80127e0:	e7ec      	b.n	80127bc <_free_r+0x24>
 80127e2:	4613      	mov	r3, r2
 80127e4:	685a      	ldr	r2, [r3, #4]
 80127e6:	b10a      	cbz	r2, 80127ec <_free_r+0x54>
 80127e8:	42a2      	cmp	r2, r4
 80127ea:	d9fa      	bls.n	80127e2 <_free_r+0x4a>
 80127ec:	6819      	ldr	r1, [r3, #0]
 80127ee:	1858      	adds	r0, r3, r1
 80127f0:	42a0      	cmp	r0, r4
 80127f2:	d10b      	bne.n	801280c <_free_r+0x74>
 80127f4:	6820      	ldr	r0, [r4, #0]
 80127f6:	4401      	add	r1, r0
 80127f8:	1858      	adds	r0, r3, r1
 80127fa:	4282      	cmp	r2, r0
 80127fc:	6019      	str	r1, [r3, #0]
 80127fe:	d1dd      	bne.n	80127bc <_free_r+0x24>
 8012800:	6810      	ldr	r0, [r2, #0]
 8012802:	6852      	ldr	r2, [r2, #4]
 8012804:	605a      	str	r2, [r3, #4]
 8012806:	4401      	add	r1, r0
 8012808:	6019      	str	r1, [r3, #0]
 801280a:	e7d7      	b.n	80127bc <_free_r+0x24>
 801280c:	d902      	bls.n	8012814 <_free_r+0x7c>
 801280e:	230c      	movs	r3, #12
 8012810:	602b      	str	r3, [r5, #0]
 8012812:	e7d3      	b.n	80127bc <_free_r+0x24>
 8012814:	6820      	ldr	r0, [r4, #0]
 8012816:	1821      	adds	r1, r4, r0
 8012818:	428a      	cmp	r2, r1
 801281a:	bf04      	itt	eq
 801281c:	6811      	ldreq	r1, [r2, #0]
 801281e:	6852      	ldreq	r2, [r2, #4]
 8012820:	6062      	str	r2, [r4, #4]
 8012822:	bf04      	itt	eq
 8012824:	1809      	addeq	r1, r1, r0
 8012826:	6021      	streq	r1, [r4, #0]
 8012828:	605c      	str	r4, [r3, #4]
 801282a:	e7c7      	b.n	80127bc <_free_r+0x24>
 801282c:	bd38      	pop	{r3, r4, r5, pc}
 801282e:	bf00      	nop
 8012830:	2000079c 	.word	0x2000079c

08012834 <_malloc_r>:
 8012834:	b570      	push	{r4, r5, r6, lr}
 8012836:	1ccd      	adds	r5, r1, #3
 8012838:	f025 0503 	bic.w	r5, r5, #3
 801283c:	3508      	adds	r5, #8
 801283e:	2d0c      	cmp	r5, #12
 8012840:	bf38      	it	cc
 8012842:	250c      	movcc	r5, #12
 8012844:	2d00      	cmp	r5, #0
 8012846:	4606      	mov	r6, r0
 8012848:	db01      	blt.n	801284e <_malloc_r+0x1a>
 801284a:	42a9      	cmp	r1, r5
 801284c:	d903      	bls.n	8012856 <_malloc_r+0x22>
 801284e:	230c      	movs	r3, #12
 8012850:	6033      	str	r3, [r6, #0]
 8012852:	2000      	movs	r0, #0
 8012854:	bd70      	pop	{r4, r5, r6, pc}
 8012856:	f000 f987 	bl	8012b68 <__malloc_lock>
 801285a:	4a23      	ldr	r2, [pc, #140]	; (80128e8 <_malloc_r+0xb4>)
 801285c:	6814      	ldr	r4, [r2, #0]
 801285e:	4621      	mov	r1, r4
 8012860:	b991      	cbnz	r1, 8012888 <_malloc_r+0x54>
 8012862:	4c22      	ldr	r4, [pc, #136]	; (80128ec <_malloc_r+0xb8>)
 8012864:	6823      	ldr	r3, [r4, #0]
 8012866:	b91b      	cbnz	r3, 8012870 <_malloc_r+0x3c>
 8012868:	4630      	mov	r0, r6
 801286a:	f000 f841 	bl	80128f0 <_sbrk_r>
 801286e:	6020      	str	r0, [r4, #0]
 8012870:	4629      	mov	r1, r5
 8012872:	4630      	mov	r0, r6
 8012874:	f000 f83c 	bl	80128f0 <_sbrk_r>
 8012878:	1c43      	adds	r3, r0, #1
 801287a:	d126      	bne.n	80128ca <_malloc_r+0x96>
 801287c:	230c      	movs	r3, #12
 801287e:	6033      	str	r3, [r6, #0]
 8012880:	4630      	mov	r0, r6
 8012882:	f000 f972 	bl	8012b6a <__malloc_unlock>
 8012886:	e7e4      	b.n	8012852 <_malloc_r+0x1e>
 8012888:	680b      	ldr	r3, [r1, #0]
 801288a:	1b5b      	subs	r3, r3, r5
 801288c:	d41a      	bmi.n	80128c4 <_malloc_r+0x90>
 801288e:	2b0b      	cmp	r3, #11
 8012890:	d90f      	bls.n	80128b2 <_malloc_r+0x7e>
 8012892:	600b      	str	r3, [r1, #0]
 8012894:	50cd      	str	r5, [r1, r3]
 8012896:	18cc      	adds	r4, r1, r3
 8012898:	4630      	mov	r0, r6
 801289a:	f000 f966 	bl	8012b6a <__malloc_unlock>
 801289e:	f104 000b 	add.w	r0, r4, #11
 80128a2:	1d23      	adds	r3, r4, #4
 80128a4:	f020 0007 	bic.w	r0, r0, #7
 80128a8:	1ac3      	subs	r3, r0, r3
 80128aa:	d01b      	beq.n	80128e4 <_malloc_r+0xb0>
 80128ac:	425a      	negs	r2, r3
 80128ae:	50e2      	str	r2, [r4, r3]
 80128b0:	bd70      	pop	{r4, r5, r6, pc}
 80128b2:	428c      	cmp	r4, r1
 80128b4:	bf0d      	iteet	eq
 80128b6:	6863      	ldreq	r3, [r4, #4]
 80128b8:	684b      	ldrne	r3, [r1, #4]
 80128ba:	6063      	strne	r3, [r4, #4]
 80128bc:	6013      	streq	r3, [r2, #0]
 80128be:	bf18      	it	ne
 80128c0:	460c      	movne	r4, r1
 80128c2:	e7e9      	b.n	8012898 <_malloc_r+0x64>
 80128c4:	460c      	mov	r4, r1
 80128c6:	6849      	ldr	r1, [r1, #4]
 80128c8:	e7ca      	b.n	8012860 <_malloc_r+0x2c>
 80128ca:	1cc4      	adds	r4, r0, #3
 80128cc:	f024 0403 	bic.w	r4, r4, #3
 80128d0:	42a0      	cmp	r0, r4
 80128d2:	d005      	beq.n	80128e0 <_malloc_r+0xac>
 80128d4:	1a21      	subs	r1, r4, r0
 80128d6:	4630      	mov	r0, r6
 80128d8:	f000 f80a 	bl	80128f0 <_sbrk_r>
 80128dc:	3001      	adds	r0, #1
 80128de:	d0cd      	beq.n	801287c <_malloc_r+0x48>
 80128e0:	6025      	str	r5, [r4, #0]
 80128e2:	e7d9      	b.n	8012898 <_malloc_r+0x64>
 80128e4:	bd70      	pop	{r4, r5, r6, pc}
 80128e6:	bf00      	nop
 80128e8:	2000079c 	.word	0x2000079c
 80128ec:	200007a0 	.word	0x200007a0

080128f0 <_sbrk_r>:
 80128f0:	b538      	push	{r3, r4, r5, lr}
 80128f2:	4c06      	ldr	r4, [pc, #24]	; (801290c <_sbrk_r+0x1c>)
 80128f4:	2300      	movs	r3, #0
 80128f6:	4605      	mov	r5, r0
 80128f8:	4608      	mov	r0, r1
 80128fa:	6023      	str	r3, [r4, #0]
 80128fc:	f7ff fa80 	bl	8011e00 <_sbrk>
 8012900:	1c43      	adds	r3, r0, #1
 8012902:	d102      	bne.n	801290a <_sbrk_r+0x1a>
 8012904:	6823      	ldr	r3, [r4, #0]
 8012906:	b103      	cbz	r3, 801290a <_sbrk_r+0x1a>
 8012908:	602b      	str	r3, [r5, #0]
 801290a:	bd38      	pop	{r3, r4, r5, pc}
 801290c:	20001afc 	.word	0x20001afc

08012910 <_raise_r>:
 8012910:	291f      	cmp	r1, #31
 8012912:	b538      	push	{r3, r4, r5, lr}
 8012914:	4604      	mov	r4, r0
 8012916:	460d      	mov	r5, r1
 8012918:	d904      	bls.n	8012924 <_raise_r+0x14>
 801291a:	2316      	movs	r3, #22
 801291c:	6003      	str	r3, [r0, #0]
 801291e:	f04f 30ff 	mov.w	r0, #4294967295
 8012922:	bd38      	pop	{r3, r4, r5, pc}
 8012924:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012926:	b112      	cbz	r2, 801292e <_raise_r+0x1e>
 8012928:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801292c:	b94b      	cbnz	r3, 8012942 <_raise_r+0x32>
 801292e:	4620      	mov	r0, r4
 8012930:	f000 f830 	bl	8012994 <_getpid_r>
 8012934:	462a      	mov	r2, r5
 8012936:	4601      	mov	r1, r0
 8012938:	4620      	mov	r0, r4
 801293a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801293e:	f000 b817 	b.w	8012970 <_kill_r>
 8012942:	2b01      	cmp	r3, #1
 8012944:	d00a      	beq.n	801295c <_raise_r+0x4c>
 8012946:	1c59      	adds	r1, r3, #1
 8012948:	d103      	bne.n	8012952 <_raise_r+0x42>
 801294a:	2316      	movs	r3, #22
 801294c:	6003      	str	r3, [r0, #0]
 801294e:	2001      	movs	r0, #1
 8012950:	bd38      	pop	{r3, r4, r5, pc}
 8012952:	2400      	movs	r4, #0
 8012954:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012958:	4628      	mov	r0, r5
 801295a:	4798      	blx	r3
 801295c:	2000      	movs	r0, #0
 801295e:	bd38      	pop	{r3, r4, r5, pc}

08012960 <raise>:
 8012960:	4b02      	ldr	r3, [pc, #8]	; (801296c <raise+0xc>)
 8012962:	4601      	mov	r1, r0
 8012964:	6818      	ldr	r0, [r3, #0]
 8012966:	f7ff bfd3 	b.w	8012910 <_raise_r>
 801296a:	bf00      	nop
 801296c:	20000020 	.word	0x20000020

08012970 <_kill_r>:
 8012970:	b538      	push	{r3, r4, r5, lr}
 8012972:	4c07      	ldr	r4, [pc, #28]	; (8012990 <_kill_r+0x20>)
 8012974:	2300      	movs	r3, #0
 8012976:	4605      	mov	r5, r0
 8012978:	4608      	mov	r0, r1
 801297a:	4611      	mov	r1, r2
 801297c:	6023      	str	r3, [r4, #0]
 801297e:	f7ff fa13 	bl	8011da8 <_kill>
 8012982:	1c43      	adds	r3, r0, #1
 8012984:	d102      	bne.n	801298c <_kill_r+0x1c>
 8012986:	6823      	ldr	r3, [r4, #0]
 8012988:	b103      	cbz	r3, 801298c <_kill_r+0x1c>
 801298a:	602b      	str	r3, [r5, #0]
 801298c:	bd38      	pop	{r3, r4, r5, pc}
 801298e:	bf00      	nop
 8012990:	20001afc 	.word	0x20001afc

08012994 <_getpid_r>:
 8012994:	f7ff b9fa 	b.w	8011d8c <_getpid>

08012998 <sniprintf>:
 8012998:	b40c      	push	{r2, r3}
 801299a:	b530      	push	{r4, r5, lr}
 801299c:	4b17      	ldr	r3, [pc, #92]	; (80129fc <sniprintf+0x64>)
 801299e:	1e0c      	subs	r4, r1, #0
 80129a0:	b09d      	sub	sp, #116	; 0x74
 80129a2:	681d      	ldr	r5, [r3, #0]
 80129a4:	da08      	bge.n	80129b8 <sniprintf+0x20>
 80129a6:	238b      	movs	r3, #139	; 0x8b
 80129a8:	602b      	str	r3, [r5, #0]
 80129aa:	f04f 30ff 	mov.w	r0, #4294967295
 80129ae:	b01d      	add	sp, #116	; 0x74
 80129b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80129b4:	b002      	add	sp, #8
 80129b6:	4770      	bx	lr
 80129b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80129bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80129c0:	bf14      	ite	ne
 80129c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80129c6:	4623      	moveq	r3, r4
 80129c8:	9304      	str	r3, [sp, #16]
 80129ca:	9307      	str	r3, [sp, #28]
 80129cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80129d0:	9002      	str	r0, [sp, #8]
 80129d2:	9006      	str	r0, [sp, #24]
 80129d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80129d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80129da:	ab21      	add	r3, sp, #132	; 0x84
 80129dc:	a902      	add	r1, sp, #8
 80129de:	4628      	mov	r0, r5
 80129e0:	9301      	str	r3, [sp, #4]
 80129e2:	f000 f91f 	bl	8012c24 <_svfiprintf_r>
 80129e6:	1c43      	adds	r3, r0, #1
 80129e8:	bfbc      	itt	lt
 80129ea:	238b      	movlt	r3, #139	; 0x8b
 80129ec:	602b      	strlt	r3, [r5, #0]
 80129ee:	2c00      	cmp	r4, #0
 80129f0:	d0dd      	beq.n	80129ae <sniprintf+0x16>
 80129f2:	9b02      	ldr	r3, [sp, #8]
 80129f4:	2200      	movs	r2, #0
 80129f6:	701a      	strb	r2, [r3, #0]
 80129f8:	e7d9      	b.n	80129ae <sniprintf+0x16>
 80129fa:	bf00      	nop
 80129fc:	20000020 	.word	0x20000020

08012a00 <__sread>:
 8012a00:	b510      	push	{r4, lr}
 8012a02:	460c      	mov	r4, r1
 8012a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a08:	f000 fb96 	bl	8013138 <_read_r>
 8012a0c:	2800      	cmp	r0, #0
 8012a0e:	bfab      	itete	ge
 8012a10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012a12:	89a3      	ldrhlt	r3, [r4, #12]
 8012a14:	181b      	addge	r3, r3, r0
 8012a16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012a1a:	bfac      	ite	ge
 8012a1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012a1e:	81a3      	strhlt	r3, [r4, #12]
 8012a20:	bd10      	pop	{r4, pc}

08012a22 <__swrite>:
 8012a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a26:	461f      	mov	r7, r3
 8012a28:	898b      	ldrh	r3, [r1, #12]
 8012a2a:	05db      	lsls	r3, r3, #23
 8012a2c:	4605      	mov	r5, r0
 8012a2e:	460c      	mov	r4, r1
 8012a30:	4616      	mov	r6, r2
 8012a32:	d505      	bpl.n	8012a40 <__swrite+0x1e>
 8012a34:	2302      	movs	r3, #2
 8012a36:	2200      	movs	r2, #0
 8012a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a3c:	f000 f882 	bl	8012b44 <_lseek_r>
 8012a40:	89a3      	ldrh	r3, [r4, #12]
 8012a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a4a:	81a3      	strh	r3, [r4, #12]
 8012a4c:	4632      	mov	r2, r6
 8012a4e:	463b      	mov	r3, r7
 8012a50:	4628      	mov	r0, r5
 8012a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a56:	f000 b853 	b.w	8012b00 <_write_r>

08012a5a <__sseek>:
 8012a5a:	b510      	push	{r4, lr}
 8012a5c:	460c      	mov	r4, r1
 8012a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a62:	f000 f86f 	bl	8012b44 <_lseek_r>
 8012a66:	1c43      	adds	r3, r0, #1
 8012a68:	89a3      	ldrh	r3, [r4, #12]
 8012a6a:	bf15      	itete	ne
 8012a6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8012a6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012a72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012a76:	81a3      	strheq	r3, [r4, #12]
 8012a78:	bf18      	it	ne
 8012a7a:	81a3      	strhne	r3, [r4, #12]
 8012a7c:	bd10      	pop	{r4, pc}

08012a7e <__sclose>:
 8012a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a82:	f000 b84f 	b.w	8012b24 <_close_r>

08012a86 <strncpy>:
 8012a86:	b570      	push	{r4, r5, r6, lr}
 8012a88:	4604      	mov	r4, r0
 8012a8a:	b902      	cbnz	r2, 8012a8e <strncpy+0x8>
 8012a8c:	bd70      	pop	{r4, r5, r6, pc}
 8012a8e:	4623      	mov	r3, r4
 8012a90:	f811 5b01 	ldrb.w	r5, [r1], #1
 8012a94:	f803 5b01 	strb.w	r5, [r3], #1
 8012a98:	1e56      	subs	r6, r2, #1
 8012a9a:	b91d      	cbnz	r5, 8012aa4 <strncpy+0x1e>
 8012a9c:	4414      	add	r4, r2
 8012a9e:	42a3      	cmp	r3, r4
 8012aa0:	d103      	bne.n	8012aaa <strncpy+0x24>
 8012aa2:	bd70      	pop	{r4, r5, r6, pc}
 8012aa4:	461c      	mov	r4, r3
 8012aa6:	4632      	mov	r2, r6
 8012aa8:	e7ef      	b.n	8012a8a <strncpy+0x4>
 8012aaa:	f803 5b01 	strb.w	r5, [r3], #1
 8012aae:	e7f6      	b.n	8012a9e <strncpy+0x18>

08012ab0 <strstr>:
 8012ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ab2:	7803      	ldrb	r3, [r0, #0]
 8012ab4:	b133      	cbz	r3, 8012ac4 <strstr+0x14>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	4618      	mov	r0, r3
 8012aba:	1c5e      	adds	r6, r3, #1
 8012abc:	781b      	ldrb	r3, [r3, #0]
 8012abe:	b933      	cbnz	r3, 8012ace <strstr+0x1e>
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ac4:	780b      	ldrb	r3, [r1, #0]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	bf18      	it	ne
 8012aca:	2000      	movne	r0, #0
 8012acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ace:	1e4d      	subs	r5, r1, #1
 8012ad0:	1e44      	subs	r4, r0, #1
 8012ad2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8012ad6:	2a00      	cmp	r2, #0
 8012ad8:	d0f3      	beq.n	8012ac2 <strstr+0x12>
 8012ada:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8012ade:	4297      	cmp	r7, r2
 8012ae0:	4633      	mov	r3, r6
 8012ae2:	d0f6      	beq.n	8012ad2 <strstr+0x22>
 8012ae4:	e7e8      	b.n	8012ab8 <strstr+0x8>

08012ae6 <__ascii_wctomb>:
 8012ae6:	b149      	cbz	r1, 8012afc <__ascii_wctomb+0x16>
 8012ae8:	2aff      	cmp	r2, #255	; 0xff
 8012aea:	bf85      	ittet	hi
 8012aec:	238a      	movhi	r3, #138	; 0x8a
 8012aee:	6003      	strhi	r3, [r0, #0]
 8012af0:	700a      	strbls	r2, [r1, #0]
 8012af2:	f04f 30ff 	movhi.w	r0, #4294967295
 8012af6:	bf98      	it	ls
 8012af8:	2001      	movls	r0, #1
 8012afa:	4770      	bx	lr
 8012afc:	4608      	mov	r0, r1
 8012afe:	4770      	bx	lr

08012b00 <_write_r>:
 8012b00:	b538      	push	{r3, r4, r5, lr}
 8012b02:	4c07      	ldr	r4, [pc, #28]	; (8012b20 <_write_r+0x20>)
 8012b04:	4605      	mov	r5, r0
 8012b06:	4608      	mov	r0, r1
 8012b08:	4611      	mov	r1, r2
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	6022      	str	r2, [r4, #0]
 8012b0e:	461a      	mov	r2, r3
 8012b10:	f7ff f962 	bl	8011dd8 <_write>
 8012b14:	1c43      	adds	r3, r0, #1
 8012b16:	d102      	bne.n	8012b1e <_write_r+0x1e>
 8012b18:	6823      	ldr	r3, [r4, #0]
 8012b1a:	b103      	cbz	r3, 8012b1e <_write_r+0x1e>
 8012b1c:	602b      	str	r3, [r5, #0]
 8012b1e:	bd38      	pop	{r3, r4, r5, pc}
 8012b20:	20001afc 	.word	0x20001afc

08012b24 <_close_r>:
 8012b24:	b538      	push	{r3, r4, r5, lr}
 8012b26:	4c06      	ldr	r4, [pc, #24]	; (8012b40 <_close_r+0x1c>)
 8012b28:	2300      	movs	r3, #0
 8012b2a:	4605      	mov	r5, r0
 8012b2c:	4608      	mov	r0, r1
 8012b2e:	6023      	str	r3, [r4, #0]
 8012b30:	f7ff f986 	bl	8011e40 <_close>
 8012b34:	1c43      	adds	r3, r0, #1
 8012b36:	d102      	bne.n	8012b3e <_close_r+0x1a>
 8012b38:	6823      	ldr	r3, [r4, #0]
 8012b3a:	b103      	cbz	r3, 8012b3e <_close_r+0x1a>
 8012b3c:	602b      	str	r3, [r5, #0]
 8012b3e:	bd38      	pop	{r3, r4, r5, pc}
 8012b40:	20001afc 	.word	0x20001afc

08012b44 <_lseek_r>:
 8012b44:	b538      	push	{r3, r4, r5, lr}
 8012b46:	4c07      	ldr	r4, [pc, #28]	; (8012b64 <_lseek_r+0x20>)
 8012b48:	4605      	mov	r5, r0
 8012b4a:	4608      	mov	r0, r1
 8012b4c:	4611      	mov	r1, r2
 8012b4e:	2200      	movs	r2, #0
 8012b50:	6022      	str	r2, [r4, #0]
 8012b52:	461a      	mov	r2, r3
 8012b54:	f7ff f986 	bl	8011e64 <_lseek>
 8012b58:	1c43      	adds	r3, r0, #1
 8012b5a:	d102      	bne.n	8012b62 <_lseek_r+0x1e>
 8012b5c:	6823      	ldr	r3, [r4, #0]
 8012b5e:	b103      	cbz	r3, 8012b62 <_lseek_r+0x1e>
 8012b60:	602b      	str	r3, [r5, #0]
 8012b62:	bd38      	pop	{r3, r4, r5, pc}
 8012b64:	20001afc 	.word	0x20001afc

08012b68 <__malloc_lock>:
 8012b68:	4770      	bx	lr

08012b6a <__malloc_unlock>:
 8012b6a:	4770      	bx	lr

08012b6c <__ssputs_r>:
 8012b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b70:	688e      	ldr	r6, [r1, #8]
 8012b72:	429e      	cmp	r6, r3
 8012b74:	4682      	mov	sl, r0
 8012b76:	460c      	mov	r4, r1
 8012b78:	4691      	mov	r9, r2
 8012b7a:	4698      	mov	r8, r3
 8012b7c:	d835      	bhi.n	8012bea <__ssputs_r+0x7e>
 8012b7e:	898a      	ldrh	r2, [r1, #12]
 8012b80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012b84:	d031      	beq.n	8012bea <__ssputs_r+0x7e>
 8012b86:	6825      	ldr	r5, [r4, #0]
 8012b88:	6909      	ldr	r1, [r1, #16]
 8012b8a:	1a6f      	subs	r7, r5, r1
 8012b8c:	6965      	ldr	r5, [r4, #20]
 8012b8e:	2302      	movs	r3, #2
 8012b90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b94:	fb95 f5f3 	sdiv	r5, r5, r3
 8012b98:	f108 0301 	add.w	r3, r8, #1
 8012b9c:	443b      	add	r3, r7
 8012b9e:	429d      	cmp	r5, r3
 8012ba0:	bf38      	it	cc
 8012ba2:	461d      	movcc	r5, r3
 8012ba4:	0553      	lsls	r3, r2, #21
 8012ba6:	d531      	bpl.n	8012c0c <__ssputs_r+0xa0>
 8012ba8:	4629      	mov	r1, r5
 8012baa:	f7ff fe43 	bl	8012834 <_malloc_r>
 8012bae:	4606      	mov	r6, r0
 8012bb0:	b950      	cbnz	r0, 8012bc8 <__ssputs_r+0x5c>
 8012bb2:	230c      	movs	r3, #12
 8012bb4:	f8ca 3000 	str.w	r3, [sl]
 8012bb8:	89a3      	ldrh	r3, [r4, #12]
 8012bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012bbe:	81a3      	strh	r3, [r4, #12]
 8012bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8012bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bc8:	463a      	mov	r2, r7
 8012bca:	6921      	ldr	r1, [r4, #16]
 8012bcc:	f7ff fdb6 	bl	801273c <memcpy>
 8012bd0:	89a3      	ldrh	r3, [r4, #12]
 8012bd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bda:	81a3      	strh	r3, [r4, #12]
 8012bdc:	6126      	str	r6, [r4, #16]
 8012bde:	6165      	str	r5, [r4, #20]
 8012be0:	443e      	add	r6, r7
 8012be2:	1bed      	subs	r5, r5, r7
 8012be4:	6026      	str	r6, [r4, #0]
 8012be6:	60a5      	str	r5, [r4, #8]
 8012be8:	4646      	mov	r6, r8
 8012bea:	4546      	cmp	r6, r8
 8012bec:	bf28      	it	cs
 8012bee:	4646      	movcs	r6, r8
 8012bf0:	4632      	mov	r2, r6
 8012bf2:	4649      	mov	r1, r9
 8012bf4:	6820      	ldr	r0, [r4, #0]
 8012bf6:	f7ff fdac 	bl	8012752 <memmove>
 8012bfa:	68a3      	ldr	r3, [r4, #8]
 8012bfc:	1b9b      	subs	r3, r3, r6
 8012bfe:	60a3      	str	r3, [r4, #8]
 8012c00:	6823      	ldr	r3, [r4, #0]
 8012c02:	441e      	add	r6, r3
 8012c04:	6026      	str	r6, [r4, #0]
 8012c06:	2000      	movs	r0, #0
 8012c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c0c:	462a      	mov	r2, r5
 8012c0e:	f000 faa5 	bl	801315c <_realloc_r>
 8012c12:	4606      	mov	r6, r0
 8012c14:	2800      	cmp	r0, #0
 8012c16:	d1e1      	bne.n	8012bdc <__ssputs_r+0x70>
 8012c18:	6921      	ldr	r1, [r4, #16]
 8012c1a:	4650      	mov	r0, sl
 8012c1c:	f7ff fdbc 	bl	8012798 <_free_r>
 8012c20:	e7c7      	b.n	8012bb2 <__ssputs_r+0x46>
	...

08012c24 <_svfiprintf_r>:
 8012c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c28:	b09d      	sub	sp, #116	; 0x74
 8012c2a:	4680      	mov	r8, r0
 8012c2c:	9303      	str	r3, [sp, #12]
 8012c2e:	898b      	ldrh	r3, [r1, #12]
 8012c30:	061c      	lsls	r4, r3, #24
 8012c32:	460d      	mov	r5, r1
 8012c34:	4616      	mov	r6, r2
 8012c36:	d50f      	bpl.n	8012c58 <_svfiprintf_r+0x34>
 8012c38:	690b      	ldr	r3, [r1, #16]
 8012c3a:	b96b      	cbnz	r3, 8012c58 <_svfiprintf_r+0x34>
 8012c3c:	2140      	movs	r1, #64	; 0x40
 8012c3e:	f7ff fdf9 	bl	8012834 <_malloc_r>
 8012c42:	6028      	str	r0, [r5, #0]
 8012c44:	6128      	str	r0, [r5, #16]
 8012c46:	b928      	cbnz	r0, 8012c54 <_svfiprintf_r+0x30>
 8012c48:	230c      	movs	r3, #12
 8012c4a:	f8c8 3000 	str.w	r3, [r8]
 8012c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8012c52:	e0c5      	b.n	8012de0 <_svfiprintf_r+0x1bc>
 8012c54:	2340      	movs	r3, #64	; 0x40
 8012c56:	616b      	str	r3, [r5, #20]
 8012c58:	2300      	movs	r3, #0
 8012c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8012c5c:	2320      	movs	r3, #32
 8012c5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c62:	2330      	movs	r3, #48	; 0x30
 8012c64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c68:	f04f 0b01 	mov.w	fp, #1
 8012c6c:	4637      	mov	r7, r6
 8012c6e:	463c      	mov	r4, r7
 8012c70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d13c      	bne.n	8012cf2 <_svfiprintf_r+0xce>
 8012c78:	ebb7 0a06 	subs.w	sl, r7, r6
 8012c7c:	d00b      	beq.n	8012c96 <_svfiprintf_r+0x72>
 8012c7e:	4653      	mov	r3, sl
 8012c80:	4632      	mov	r2, r6
 8012c82:	4629      	mov	r1, r5
 8012c84:	4640      	mov	r0, r8
 8012c86:	f7ff ff71 	bl	8012b6c <__ssputs_r>
 8012c8a:	3001      	adds	r0, #1
 8012c8c:	f000 80a3 	beq.w	8012dd6 <_svfiprintf_r+0x1b2>
 8012c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c92:	4453      	add	r3, sl
 8012c94:	9309      	str	r3, [sp, #36]	; 0x24
 8012c96:	783b      	ldrb	r3, [r7, #0]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	f000 809c 	beq.w	8012dd6 <_svfiprintf_r+0x1b2>
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ca4:	9304      	str	r3, [sp, #16]
 8012ca6:	9307      	str	r3, [sp, #28]
 8012ca8:	9205      	str	r2, [sp, #20]
 8012caa:	9306      	str	r3, [sp, #24]
 8012cac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012cb0:	931a      	str	r3, [sp, #104]	; 0x68
 8012cb2:	2205      	movs	r2, #5
 8012cb4:	7821      	ldrb	r1, [r4, #0]
 8012cb6:	4850      	ldr	r0, [pc, #320]	; (8012df8 <_svfiprintf_r+0x1d4>)
 8012cb8:	f7ed faa2 	bl	8000200 <memchr>
 8012cbc:	1c67      	adds	r7, r4, #1
 8012cbe:	9b04      	ldr	r3, [sp, #16]
 8012cc0:	b9d8      	cbnz	r0, 8012cfa <_svfiprintf_r+0xd6>
 8012cc2:	06d9      	lsls	r1, r3, #27
 8012cc4:	bf44      	itt	mi
 8012cc6:	2220      	movmi	r2, #32
 8012cc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012ccc:	071a      	lsls	r2, r3, #28
 8012cce:	bf44      	itt	mi
 8012cd0:	222b      	movmi	r2, #43	; 0x2b
 8012cd2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012cd6:	7822      	ldrb	r2, [r4, #0]
 8012cd8:	2a2a      	cmp	r2, #42	; 0x2a
 8012cda:	d016      	beq.n	8012d0a <_svfiprintf_r+0xe6>
 8012cdc:	9a07      	ldr	r2, [sp, #28]
 8012cde:	2100      	movs	r1, #0
 8012ce0:	200a      	movs	r0, #10
 8012ce2:	4627      	mov	r7, r4
 8012ce4:	3401      	adds	r4, #1
 8012ce6:	783b      	ldrb	r3, [r7, #0]
 8012ce8:	3b30      	subs	r3, #48	; 0x30
 8012cea:	2b09      	cmp	r3, #9
 8012cec:	d951      	bls.n	8012d92 <_svfiprintf_r+0x16e>
 8012cee:	b1c9      	cbz	r1, 8012d24 <_svfiprintf_r+0x100>
 8012cf0:	e011      	b.n	8012d16 <_svfiprintf_r+0xf2>
 8012cf2:	2b25      	cmp	r3, #37	; 0x25
 8012cf4:	d0c0      	beq.n	8012c78 <_svfiprintf_r+0x54>
 8012cf6:	4627      	mov	r7, r4
 8012cf8:	e7b9      	b.n	8012c6e <_svfiprintf_r+0x4a>
 8012cfa:	4a3f      	ldr	r2, [pc, #252]	; (8012df8 <_svfiprintf_r+0x1d4>)
 8012cfc:	1a80      	subs	r0, r0, r2
 8012cfe:	fa0b f000 	lsl.w	r0, fp, r0
 8012d02:	4318      	orrs	r0, r3
 8012d04:	9004      	str	r0, [sp, #16]
 8012d06:	463c      	mov	r4, r7
 8012d08:	e7d3      	b.n	8012cb2 <_svfiprintf_r+0x8e>
 8012d0a:	9a03      	ldr	r2, [sp, #12]
 8012d0c:	1d11      	adds	r1, r2, #4
 8012d0e:	6812      	ldr	r2, [r2, #0]
 8012d10:	9103      	str	r1, [sp, #12]
 8012d12:	2a00      	cmp	r2, #0
 8012d14:	db01      	blt.n	8012d1a <_svfiprintf_r+0xf6>
 8012d16:	9207      	str	r2, [sp, #28]
 8012d18:	e004      	b.n	8012d24 <_svfiprintf_r+0x100>
 8012d1a:	4252      	negs	r2, r2
 8012d1c:	f043 0302 	orr.w	r3, r3, #2
 8012d20:	9207      	str	r2, [sp, #28]
 8012d22:	9304      	str	r3, [sp, #16]
 8012d24:	783b      	ldrb	r3, [r7, #0]
 8012d26:	2b2e      	cmp	r3, #46	; 0x2e
 8012d28:	d10e      	bne.n	8012d48 <_svfiprintf_r+0x124>
 8012d2a:	787b      	ldrb	r3, [r7, #1]
 8012d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8012d2e:	f107 0101 	add.w	r1, r7, #1
 8012d32:	d132      	bne.n	8012d9a <_svfiprintf_r+0x176>
 8012d34:	9b03      	ldr	r3, [sp, #12]
 8012d36:	1d1a      	adds	r2, r3, #4
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	9203      	str	r2, [sp, #12]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	bfb8      	it	lt
 8012d40:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d44:	3702      	adds	r7, #2
 8012d46:	9305      	str	r3, [sp, #20]
 8012d48:	4c2c      	ldr	r4, [pc, #176]	; (8012dfc <_svfiprintf_r+0x1d8>)
 8012d4a:	7839      	ldrb	r1, [r7, #0]
 8012d4c:	2203      	movs	r2, #3
 8012d4e:	4620      	mov	r0, r4
 8012d50:	f7ed fa56 	bl	8000200 <memchr>
 8012d54:	b138      	cbz	r0, 8012d66 <_svfiprintf_r+0x142>
 8012d56:	2340      	movs	r3, #64	; 0x40
 8012d58:	1b00      	subs	r0, r0, r4
 8012d5a:	fa03 f000 	lsl.w	r0, r3, r0
 8012d5e:	9b04      	ldr	r3, [sp, #16]
 8012d60:	4303      	orrs	r3, r0
 8012d62:	9304      	str	r3, [sp, #16]
 8012d64:	3701      	adds	r7, #1
 8012d66:	7839      	ldrb	r1, [r7, #0]
 8012d68:	4825      	ldr	r0, [pc, #148]	; (8012e00 <_svfiprintf_r+0x1dc>)
 8012d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d6e:	2206      	movs	r2, #6
 8012d70:	1c7e      	adds	r6, r7, #1
 8012d72:	f7ed fa45 	bl	8000200 <memchr>
 8012d76:	2800      	cmp	r0, #0
 8012d78:	d035      	beq.n	8012de6 <_svfiprintf_r+0x1c2>
 8012d7a:	4b22      	ldr	r3, [pc, #136]	; (8012e04 <_svfiprintf_r+0x1e0>)
 8012d7c:	b9fb      	cbnz	r3, 8012dbe <_svfiprintf_r+0x19a>
 8012d7e:	9b03      	ldr	r3, [sp, #12]
 8012d80:	3307      	adds	r3, #7
 8012d82:	f023 0307 	bic.w	r3, r3, #7
 8012d86:	3308      	adds	r3, #8
 8012d88:	9303      	str	r3, [sp, #12]
 8012d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d8c:	444b      	add	r3, r9
 8012d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8012d90:	e76c      	b.n	8012c6c <_svfiprintf_r+0x48>
 8012d92:	fb00 3202 	mla	r2, r0, r2, r3
 8012d96:	2101      	movs	r1, #1
 8012d98:	e7a3      	b.n	8012ce2 <_svfiprintf_r+0xbe>
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	9305      	str	r3, [sp, #20]
 8012d9e:	4618      	mov	r0, r3
 8012da0:	240a      	movs	r4, #10
 8012da2:	460f      	mov	r7, r1
 8012da4:	3101      	adds	r1, #1
 8012da6:	783a      	ldrb	r2, [r7, #0]
 8012da8:	3a30      	subs	r2, #48	; 0x30
 8012daa:	2a09      	cmp	r2, #9
 8012dac:	d903      	bls.n	8012db6 <_svfiprintf_r+0x192>
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d0ca      	beq.n	8012d48 <_svfiprintf_r+0x124>
 8012db2:	9005      	str	r0, [sp, #20]
 8012db4:	e7c8      	b.n	8012d48 <_svfiprintf_r+0x124>
 8012db6:	fb04 2000 	mla	r0, r4, r0, r2
 8012dba:	2301      	movs	r3, #1
 8012dbc:	e7f1      	b.n	8012da2 <_svfiprintf_r+0x17e>
 8012dbe:	ab03      	add	r3, sp, #12
 8012dc0:	9300      	str	r3, [sp, #0]
 8012dc2:	462a      	mov	r2, r5
 8012dc4:	4b10      	ldr	r3, [pc, #64]	; (8012e08 <_svfiprintf_r+0x1e4>)
 8012dc6:	a904      	add	r1, sp, #16
 8012dc8:	4640      	mov	r0, r8
 8012dca:	f3af 8000 	nop.w
 8012dce:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012dd2:	4681      	mov	r9, r0
 8012dd4:	d1d9      	bne.n	8012d8a <_svfiprintf_r+0x166>
 8012dd6:	89ab      	ldrh	r3, [r5, #12]
 8012dd8:	065b      	lsls	r3, r3, #25
 8012dda:	f53f af38 	bmi.w	8012c4e <_svfiprintf_r+0x2a>
 8012dde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012de0:	b01d      	add	sp, #116	; 0x74
 8012de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012de6:	ab03      	add	r3, sp, #12
 8012de8:	9300      	str	r3, [sp, #0]
 8012dea:	462a      	mov	r2, r5
 8012dec:	4b06      	ldr	r3, [pc, #24]	; (8012e08 <_svfiprintf_r+0x1e4>)
 8012dee:	a904      	add	r1, sp, #16
 8012df0:	4640      	mov	r0, r8
 8012df2:	f000 f881 	bl	8012ef8 <_printf_i>
 8012df6:	e7ea      	b.n	8012dce <_svfiprintf_r+0x1aa>
 8012df8:	0801602b 	.word	0x0801602b
 8012dfc:	08016031 	.word	0x08016031
 8012e00:	08016035 	.word	0x08016035
 8012e04:	00000000 	.word	0x00000000
 8012e08:	08012b6d 	.word	0x08012b6d

08012e0c <_printf_common>:
 8012e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e10:	4691      	mov	r9, r2
 8012e12:	461f      	mov	r7, r3
 8012e14:	688a      	ldr	r2, [r1, #8]
 8012e16:	690b      	ldr	r3, [r1, #16]
 8012e18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012e1c:	4293      	cmp	r3, r2
 8012e1e:	bfb8      	it	lt
 8012e20:	4613      	movlt	r3, r2
 8012e22:	f8c9 3000 	str.w	r3, [r9]
 8012e26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012e2a:	4606      	mov	r6, r0
 8012e2c:	460c      	mov	r4, r1
 8012e2e:	b112      	cbz	r2, 8012e36 <_printf_common+0x2a>
 8012e30:	3301      	adds	r3, #1
 8012e32:	f8c9 3000 	str.w	r3, [r9]
 8012e36:	6823      	ldr	r3, [r4, #0]
 8012e38:	0699      	lsls	r1, r3, #26
 8012e3a:	bf42      	ittt	mi
 8012e3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012e40:	3302      	addmi	r3, #2
 8012e42:	f8c9 3000 	strmi.w	r3, [r9]
 8012e46:	6825      	ldr	r5, [r4, #0]
 8012e48:	f015 0506 	ands.w	r5, r5, #6
 8012e4c:	d107      	bne.n	8012e5e <_printf_common+0x52>
 8012e4e:	f104 0a19 	add.w	sl, r4, #25
 8012e52:	68e3      	ldr	r3, [r4, #12]
 8012e54:	f8d9 2000 	ldr.w	r2, [r9]
 8012e58:	1a9b      	subs	r3, r3, r2
 8012e5a:	429d      	cmp	r5, r3
 8012e5c:	db29      	blt.n	8012eb2 <_printf_common+0xa6>
 8012e5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012e62:	6822      	ldr	r2, [r4, #0]
 8012e64:	3300      	adds	r3, #0
 8012e66:	bf18      	it	ne
 8012e68:	2301      	movne	r3, #1
 8012e6a:	0692      	lsls	r2, r2, #26
 8012e6c:	d42e      	bmi.n	8012ecc <_printf_common+0xc0>
 8012e6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e72:	4639      	mov	r1, r7
 8012e74:	4630      	mov	r0, r6
 8012e76:	47c0      	blx	r8
 8012e78:	3001      	adds	r0, #1
 8012e7a:	d021      	beq.n	8012ec0 <_printf_common+0xb4>
 8012e7c:	6823      	ldr	r3, [r4, #0]
 8012e7e:	68e5      	ldr	r5, [r4, #12]
 8012e80:	f8d9 2000 	ldr.w	r2, [r9]
 8012e84:	f003 0306 	and.w	r3, r3, #6
 8012e88:	2b04      	cmp	r3, #4
 8012e8a:	bf08      	it	eq
 8012e8c:	1aad      	subeq	r5, r5, r2
 8012e8e:	68a3      	ldr	r3, [r4, #8]
 8012e90:	6922      	ldr	r2, [r4, #16]
 8012e92:	bf0c      	ite	eq
 8012e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e98:	2500      	movne	r5, #0
 8012e9a:	4293      	cmp	r3, r2
 8012e9c:	bfc4      	itt	gt
 8012e9e:	1a9b      	subgt	r3, r3, r2
 8012ea0:	18ed      	addgt	r5, r5, r3
 8012ea2:	f04f 0900 	mov.w	r9, #0
 8012ea6:	341a      	adds	r4, #26
 8012ea8:	454d      	cmp	r5, r9
 8012eaa:	d11b      	bne.n	8012ee4 <_printf_common+0xd8>
 8012eac:	2000      	movs	r0, #0
 8012eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012eb2:	2301      	movs	r3, #1
 8012eb4:	4652      	mov	r2, sl
 8012eb6:	4639      	mov	r1, r7
 8012eb8:	4630      	mov	r0, r6
 8012eba:	47c0      	blx	r8
 8012ebc:	3001      	adds	r0, #1
 8012ebe:	d103      	bne.n	8012ec8 <_printf_common+0xbc>
 8012ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ec8:	3501      	adds	r5, #1
 8012eca:	e7c2      	b.n	8012e52 <_printf_common+0x46>
 8012ecc:	18e1      	adds	r1, r4, r3
 8012ece:	1c5a      	adds	r2, r3, #1
 8012ed0:	2030      	movs	r0, #48	; 0x30
 8012ed2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012ed6:	4422      	add	r2, r4
 8012ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012edc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012ee0:	3302      	adds	r3, #2
 8012ee2:	e7c4      	b.n	8012e6e <_printf_common+0x62>
 8012ee4:	2301      	movs	r3, #1
 8012ee6:	4622      	mov	r2, r4
 8012ee8:	4639      	mov	r1, r7
 8012eea:	4630      	mov	r0, r6
 8012eec:	47c0      	blx	r8
 8012eee:	3001      	adds	r0, #1
 8012ef0:	d0e6      	beq.n	8012ec0 <_printf_common+0xb4>
 8012ef2:	f109 0901 	add.w	r9, r9, #1
 8012ef6:	e7d7      	b.n	8012ea8 <_printf_common+0x9c>

08012ef8 <_printf_i>:
 8012ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012efc:	4617      	mov	r7, r2
 8012efe:	7e0a      	ldrb	r2, [r1, #24]
 8012f00:	b085      	sub	sp, #20
 8012f02:	2a6e      	cmp	r2, #110	; 0x6e
 8012f04:	4698      	mov	r8, r3
 8012f06:	4606      	mov	r6, r0
 8012f08:	460c      	mov	r4, r1
 8012f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f0c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8012f10:	f000 80bc 	beq.w	801308c <_printf_i+0x194>
 8012f14:	d81a      	bhi.n	8012f4c <_printf_i+0x54>
 8012f16:	2a63      	cmp	r2, #99	; 0x63
 8012f18:	d02e      	beq.n	8012f78 <_printf_i+0x80>
 8012f1a:	d80a      	bhi.n	8012f32 <_printf_i+0x3a>
 8012f1c:	2a00      	cmp	r2, #0
 8012f1e:	f000 80c8 	beq.w	80130b2 <_printf_i+0x1ba>
 8012f22:	2a58      	cmp	r2, #88	; 0x58
 8012f24:	f000 808a 	beq.w	801303c <_printf_i+0x144>
 8012f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f2c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8012f30:	e02a      	b.n	8012f88 <_printf_i+0x90>
 8012f32:	2a64      	cmp	r2, #100	; 0x64
 8012f34:	d001      	beq.n	8012f3a <_printf_i+0x42>
 8012f36:	2a69      	cmp	r2, #105	; 0x69
 8012f38:	d1f6      	bne.n	8012f28 <_printf_i+0x30>
 8012f3a:	6821      	ldr	r1, [r4, #0]
 8012f3c:	681a      	ldr	r2, [r3, #0]
 8012f3e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8012f42:	d023      	beq.n	8012f8c <_printf_i+0x94>
 8012f44:	1d11      	adds	r1, r2, #4
 8012f46:	6019      	str	r1, [r3, #0]
 8012f48:	6813      	ldr	r3, [r2, #0]
 8012f4a:	e027      	b.n	8012f9c <_printf_i+0xa4>
 8012f4c:	2a73      	cmp	r2, #115	; 0x73
 8012f4e:	f000 80b4 	beq.w	80130ba <_printf_i+0x1c2>
 8012f52:	d808      	bhi.n	8012f66 <_printf_i+0x6e>
 8012f54:	2a6f      	cmp	r2, #111	; 0x6f
 8012f56:	d02a      	beq.n	8012fae <_printf_i+0xb6>
 8012f58:	2a70      	cmp	r2, #112	; 0x70
 8012f5a:	d1e5      	bne.n	8012f28 <_printf_i+0x30>
 8012f5c:	680a      	ldr	r2, [r1, #0]
 8012f5e:	f042 0220 	orr.w	r2, r2, #32
 8012f62:	600a      	str	r2, [r1, #0]
 8012f64:	e003      	b.n	8012f6e <_printf_i+0x76>
 8012f66:	2a75      	cmp	r2, #117	; 0x75
 8012f68:	d021      	beq.n	8012fae <_printf_i+0xb6>
 8012f6a:	2a78      	cmp	r2, #120	; 0x78
 8012f6c:	d1dc      	bne.n	8012f28 <_printf_i+0x30>
 8012f6e:	2278      	movs	r2, #120	; 0x78
 8012f70:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8012f74:	496e      	ldr	r1, [pc, #440]	; (8013130 <_printf_i+0x238>)
 8012f76:	e064      	b.n	8013042 <_printf_i+0x14a>
 8012f78:	681a      	ldr	r2, [r3, #0]
 8012f7a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8012f7e:	1d11      	adds	r1, r2, #4
 8012f80:	6019      	str	r1, [r3, #0]
 8012f82:	6813      	ldr	r3, [r2, #0]
 8012f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f88:	2301      	movs	r3, #1
 8012f8a:	e0a3      	b.n	80130d4 <_printf_i+0x1dc>
 8012f8c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8012f90:	f102 0104 	add.w	r1, r2, #4
 8012f94:	6019      	str	r1, [r3, #0]
 8012f96:	d0d7      	beq.n	8012f48 <_printf_i+0x50>
 8012f98:	f9b2 3000 	ldrsh.w	r3, [r2]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	da03      	bge.n	8012fa8 <_printf_i+0xb0>
 8012fa0:	222d      	movs	r2, #45	; 0x2d
 8012fa2:	425b      	negs	r3, r3
 8012fa4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012fa8:	4962      	ldr	r1, [pc, #392]	; (8013134 <_printf_i+0x23c>)
 8012faa:	220a      	movs	r2, #10
 8012fac:	e017      	b.n	8012fde <_printf_i+0xe6>
 8012fae:	6820      	ldr	r0, [r4, #0]
 8012fb0:	6819      	ldr	r1, [r3, #0]
 8012fb2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012fb6:	d003      	beq.n	8012fc0 <_printf_i+0xc8>
 8012fb8:	1d08      	adds	r0, r1, #4
 8012fba:	6018      	str	r0, [r3, #0]
 8012fbc:	680b      	ldr	r3, [r1, #0]
 8012fbe:	e006      	b.n	8012fce <_printf_i+0xd6>
 8012fc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012fc4:	f101 0004 	add.w	r0, r1, #4
 8012fc8:	6018      	str	r0, [r3, #0]
 8012fca:	d0f7      	beq.n	8012fbc <_printf_i+0xc4>
 8012fcc:	880b      	ldrh	r3, [r1, #0]
 8012fce:	4959      	ldr	r1, [pc, #356]	; (8013134 <_printf_i+0x23c>)
 8012fd0:	2a6f      	cmp	r2, #111	; 0x6f
 8012fd2:	bf14      	ite	ne
 8012fd4:	220a      	movne	r2, #10
 8012fd6:	2208      	moveq	r2, #8
 8012fd8:	2000      	movs	r0, #0
 8012fda:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8012fde:	6865      	ldr	r5, [r4, #4]
 8012fe0:	60a5      	str	r5, [r4, #8]
 8012fe2:	2d00      	cmp	r5, #0
 8012fe4:	f2c0 809c 	blt.w	8013120 <_printf_i+0x228>
 8012fe8:	6820      	ldr	r0, [r4, #0]
 8012fea:	f020 0004 	bic.w	r0, r0, #4
 8012fee:	6020      	str	r0, [r4, #0]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d13f      	bne.n	8013074 <_printf_i+0x17c>
 8012ff4:	2d00      	cmp	r5, #0
 8012ff6:	f040 8095 	bne.w	8013124 <_printf_i+0x22c>
 8012ffa:	4675      	mov	r5, lr
 8012ffc:	2a08      	cmp	r2, #8
 8012ffe:	d10b      	bne.n	8013018 <_printf_i+0x120>
 8013000:	6823      	ldr	r3, [r4, #0]
 8013002:	07da      	lsls	r2, r3, #31
 8013004:	d508      	bpl.n	8013018 <_printf_i+0x120>
 8013006:	6923      	ldr	r3, [r4, #16]
 8013008:	6862      	ldr	r2, [r4, #4]
 801300a:	429a      	cmp	r2, r3
 801300c:	bfde      	ittt	le
 801300e:	2330      	movle	r3, #48	; 0x30
 8013010:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013014:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013018:	ebae 0305 	sub.w	r3, lr, r5
 801301c:	6123      	str	r3, [r4, #16]
 801301e:	f8cd 8000 	str.w	r8, [sp]
 8013022:	463b      	mov	r3, r7
 8013024:	aa03      	add	r2, sp, #12
 8013026:	4621      	mov	r1, r4
 8013028:	4630      	mov	r0, r6
 801302a:	f7ff feef 	bl	8012e0c <_printf_common>
 801302e:	3001      	adds	r0, #1
 8013030:	d155      	bne.n	80130de <_printf_i+0x1e6>
 8013032:	f04f 30ff 	mov.w	r0, #4294967295
 8013036:	b005      	add	sp, #20
 8013038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801303c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8013040:	493c      	ldr	r1, [pc, #240]	; (8013134 <_printf_i+0x23c>)
 8013042:	6822      	ldr	r2, [r4, #0]
 8013044:	6818      	ldr	r0, [r3, #0]
 8013046:	f012 0f80 	tst.w	r2, #128	; 0x80
 801304a:	f100 0504 	add.w	r5, r0, #4
 801304e:	601d      	str	r5, [r3, #0]
 8013050:	d001      	beq.n	8013056 <_printf_i+0x15e>
 8013052:	6803      	ldr	r3, [r0, #0]
 8013054:	e002      	b.n	801305c <_printf_i+0x164>
 8013056:	0655      	lsls	r5, r2, #25
 8013058:	d5fb      	bpl.n	8013052 <_printf_i+0x15a>
 801305a:	8803      	ldrh	r3, [r0, #0]
 801305c:	07d0      	lsls	r0, r2, #31
 801305e:	bf44      	itt	mi
 8013060:	f042 0220 	orrmi.w	r2, r2, #32
 8013064:	6022      	strmi	r2, [r4, #0]
 8013066:	b91b      	cbnz	r3, 8013070 <_printf_i+0x178>
 8013068:	6822      	ldr	r2, [r4, #0]
 801306a:	f022 0220 	bic.w	r2, r2, #32
 801306e:	6022      	str	r2, [r4, #0]
 8013070:	2210      	movs	r2, #16
 8013072:	e7b1      	b.n	8012fd8 <_printf_i+0xe0>
 8013074:	4675      	mov	r5, lr
 8013076:	fbb3 f0f2 	udiv	r0, r3, r2
 801307a:	fb02 3310 	mls	r3, r2, r0, r3
 801307e:	5ccb      	ldrb	r3, [r1, r3]
 8013080:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013084:	4603      	mov	r3, r0
 8013086:	2800      	cmp	r0, #0
 8013088:	d1f5      	bne.n	8013076 <_printf_i+0x17e>
 801308a:	e7b7      	b.n	8012ffc <_printf_i+0x104>
 801308c:	6808      	ldr	r0, [r1, #0]
 801308e:	681a      	ldr	r2, [r3, #0]
 8013090:	6949      	ldr	r1, [r1, #20]
 8013092:	f010 0f80 	tst.w	r0, #128	; 0x80
 8013096:	d004      	beq.n	80130a2 <_printf_i+0x1aa>
 8013098:	1d10      	adds	r0, r2, #4
 801309a:	6018      	str	r0, [r3, #0]
 801309c:	6813      	ldr	r3, [r2, #0]
 801309e:	6019      	str	r1, [r3, #0]
 80130a0:	e007      	b.n	80130b2 <_printf_i+0x1ba>
 80130a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80130a6:	f102 0004 	add.w	r0, r2, #4
 80130aa:	6018      	str	r0, [r3, #0]
 80130ac:	6813      	ldr	r3, [r2, #0]
 80130ae:	d0f6      	beq.n	801309e <_printf_i+0x1a6>
 80130b0:	8019      	strh	r1, [r3, #0]
 80130b2:	2300      	movs	r3, #0
 80130b4:	6123      	str	r3, [r4, #16]
 80130b6:	4675      	mov	r5, lr
 80130b8:	e7b1      	b.n	801301e <_printf_i+0x126>
 80130ba:	681a      	ldr	r2, [r3, #0]
 80130bc:	1d11      	adds	r1, r2, #4
 80130be:	6019      	str	r1, [r3, #0]
 80130c0:	6815      	ldr	r5, [r2, #0]
 80130c2:	6862      	ldr	r2, [r4, #4]
 80130c4:	2100      	movs	r1, #0
 80130c6:	4628      	mov	r0, r5
 80130c8:	f7ed f89a 	bl	8000200 <memchr>
 80130cc:	b108      	cbz	r0, 80130d2 <_printf_i+0x1da>
 80130ce:	1b40      	subs	r0, r0, r5
 80130d0:	6060      	str	r0, [r4, #4]
 80130d2:	6863      	ldr	r3, [r4, #4]
 80130d4:	6123      	str	r3, [r4, #16]
 80130d6:	2300      	movs	r3, #0
 80130d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130dc:	e79f      	b.n	801301e <_printf_i+0x126>
 80130de:	6923      	ldr	r3, [r4, #16]
 80130e0:	462a      	mov	r2, r5
 80130e2:	4639      	mov	r1, r7
 80130e4:	4630      	mov	r0, r6
 80130e6:	47c0      	blx	r8
 80130e8:	3001      	adds	r0, #1
 80130ea:	d0a2      	beq.n	8013032 <_printf_i+0x13a>
 80130ec:	6823      	ldr	r3, [r4, #0]
 80130ee:	079b      	lsls	r3, r3, #30
 80130f0:	d507      	bpl.n	8013102 <_printf_i+0x20a>
 80130f2:	2500      	movs	r5, #0
 80130f4:	f104 0919 	add.w	r9, r4, #25
 80130f8:	68e3      	ldr	r3, [r4, #12]
 80130fa:	9a03      	ldr	r2, [sp, #12]
 80130fc:	1a9b      	subs	r3, r3, r2
 80130fe:	429d      	cmp	r5, r3
 8013100:	db05      	blt.n	801310e <_printf_i+0x216>
 8013102:	68e0      	ldr	r0, [r4, #12]
 8013104:	9b03      	ldr	r3, [sp, #12]
 8013106:	4298      	cmp	r0, r3
 8013108:	bfb8      	it	lt
 801310a:	4618      	movlt	r0, r3
 801310c:	e793      	b.n	8013036 <_printf_i+0x13e>
 801310e:	2301      	movs	r3, #1
 8013110:	464a      	mov	r2, r9
 8013112:	4639      	mov	r1, r7
 8013114:	4630      	mov	r0, r6
 8013116:	47c0      	blx	r8
 8013118:	3001      	adds	r0, #1
 801311a:	d08a      	beq.n	8013032 <_printf_i+0x13a>
 801311c:	3501      	adds	r5, #1
 801311e:	e7eb      	b.n	80130f8 <_printf_i+0x200>
 8013120:	2b00      	cmp	r3, #0
 8013122:	d1a7      	bne.n	8013074 <_printf_i+0x17c>
 8013124:	780b      	ldrb	r3, [r1, #0]
 8013126:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801312a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801312e:	e765      	b.n	8012ffc <_printf_i+0x104>
 8013130:	0801604d 	.word	0x0801604d
 8013134:	0801603c 	.word	0x0801603c

08013138 <_read_r>:
 8013138:	b538      	push	{r3, r4, r5, lr}
 801313a:	4c07      	ldr	r4, [pc, #28]	; (8013158 <_read_r+0x20>)
 801313c:	4605      	mov	r5, r0
 801313e:	4608      	mov	r0, r1
 8013140:	4611      	mov	r1, r2
 8013142:	2200      	movs	r2, #0
 8013144:	6022      	str	r2, [r4, #0]
 8013146:	461a      	mov	r2, r3
 8013148:	f7fe fea0 	bl	8011e8c <_read>
 801314c:	1c43      	adds	r3, r0, #1
 801314e:	d102      	bne.n	8013156 <_read_r+0x1e>
 8013150:	6823      	ldr	r3, [r4, #0]
 8013152:	b103      	cbz	r3, 8013156 <_read_r+0x1e>
 8013154:	602b      	str	r3, [r5, #0]
 8013156:	bd38      	pop	{r3, r4, r5, pc}
 8013158:	20001afc 	.word	0x20001afc

0801315c <_realloc_r>:
 801315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801315e:	4607      	mov	r7, r0
 8013160:	4614      	mov	r4, r2
 8013162:	460e      	mov	r6, r1
 8013164:	b921      	cbnz	r1, 8013170 <_realloc_r+0x14>
 8013166:	4611      	mov	r1, r2
 8013168:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801316c:	f7ff bb62 	b.w	8012834 <_malloc_r>
 8013170:	b922      	cbnz	r2, 801317c <_realloc_r+0x20>
 8013172:	f7ff fb11 	bl	8012798 <_free_r>
 8013176:	4625      	mov	r5, r4
 8013178:	4628      	mov	r0, r5
 801317a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801317c:	f000 f814 	bl	80131a8 <_malloc_usable_size_r>
 8013180:	4284      	cmp	r4, r0
 8013182:	d90f      	bls.n	80131a4 <_realloc_r+0x48>
 8013184:	4621      	mov	r1, r4
 8013186:	4638      	mov	r0, r7
 8013188:	f7ff fb54 	bl	8012834 <_malloc_r>
 801318c:	4605      	mov	r5, r0
 801318e:	2800      	cmp	r0, #0
 8013190:	d0f2      	beq.n	8013178 <_realloc_r+0x1c>
 8013192:	4631      	mov	r1, r6
 8013194:	4622      	mov	r2, r4
 8013196:	f7ff fad1 	bl	801273c <memcpy>
 801319a:	4631      	mov	r1, r6
 801319c:	4638      	mov	r0, r7
 801319e:	f7ff fafb 	bl	8012798 <_free_r>
 80131a2:	e7e9      	b.n	8013178 <_realloc_r+0x1c>
 80131a4:	4635      	mov	r5, r6
 80131a6:	e7e7      	b.n	8013178 <_realloc_r+0x1c>

080131a8 <_malloc_usable_size_r>:
 80131a8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80131ac:	2800      	cmp	r0, #0
 80131ae:	f1a0 0004 	sub.w	r0, r0, #4
 80131b2:	bfbc      	itt	lt
 80131b4:	580b      	ldrlt	r3, [r1, r0]
 80131b6:	18c0      	addlt	r0, r0, r3
 80131b8:	4770      	bx	lr
	...

080131bc <_init>:
 80131bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131be:	bf00      	nop
 80131c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131c2:	bc08      	pop	{r3}
 80131c4:	469e      	mov	lr, r3
 80131c6:	4770      	bx	lr

080131c8 <_fini>:
 80131c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131ca:	bf00      	nop
 80131cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131ce:	bc08      	pop	{r3}
 80131d0:	469e      	mov	lr, r3
 80131d2:	4770      	bx	lr
