
src_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000148e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003898  08014a74  08014a74  00024a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801830c  0801830c  0002830c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08018310  08018310  00028310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08018314  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00030074  2**0
                  CONTENTS
  7 .bss          00002410  20000074  20000074  00030074  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  20002484  20002484  00030074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003d41f  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000073e2  00000000  00000000  0006d4c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001770  00000000  00000000  000748a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001630  00000000  00000000  00076018  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001112c  00000000  00000000  00077648  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006770  00000000  00000000  00088774  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0008eee4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006018  00000000  00000000  0008ef60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014a5c 	.word	0x08014a5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08014a5c 	.word	0x08014a5c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80002a8:	2300      	movs	r3, #0
 80002aa:	73fb      	strb	r3, [r7, #15]
 80002ac:	2300      	movs	r3, #0
 80002ae:	73bb      	strb	r3, [r7, #14]
 80002b0:	230f      	movs	r3, #15
 80002b2:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	78db      	ldrb	r3, [r3, #3]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d039      	beq.n	8000330 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80002bc:	4b27      	ldr	r3, [pc, #156]	; (800035c <NVIC_Init+0xbc>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	43db      	mvns	r3, r3
 80002c2:	0a1b      	lsrs	r3, r3, #8
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	f003 0307 	and.w	r3, r3, #7
 80002ca:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80002cc:	7bfb      	ldrb	r3, [r7, #15]
 80002ce:	f1c3 0304 	rsb	r3, r3, #4
 80002d2:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80002d4:	7b7a      	ldrb	r2, [r7, #13]
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
 80002d8:	fa42 f303 	asr.w	r3, r2, r3
 80002dc:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	785b      	ldrb	r3, [r3, #1]
 80002e2:	461a      	mov	r2, r3
 80002e4:	7bbb      	ldrb	r3, [r7, #14]
 80002e6:	fa02 f303 	lsl.w	r3, r2, r3
 80002ea:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	789a      	ldrb	r2, [r3, #2]
 80002f0:	7b7b      	ldrb	r3, [r7, #13]
 80002f2:	4013      	ands	r3, r2
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	7bfb      	ldrb	r3, [r7, #15]
 80002f8:	4313      	orrs	r3, r2
 80002fa:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80002fc:	7bfb      	ldrb	r3, [r7, #15]
 80002fe:	011b      	lsls	r3, r3, #4
 8000300:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000302:	4a17      	ldr	r2, [pc, #92]	; (8000360 <NVIC_Init+0xc0>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	4413      	add	r3, r2
 800030a:	7bfa      	ldrb	r2, [r7, #15]
 800030c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000310:	4a13      	ldr	r2, [pc, #76]	; (8000360 <NVIC_Init+0xc0>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	095b      	lsrs	r3, r3, #5
 8000318:	b2db      	uxtb	r3, r3
 800031a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	f003 031f 	and.w	r3, r3, #31
 8000324:	2101      	movs	r1, #1
 8000326:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800032a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800032e:	e00f      	b.n	8000350 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000330:	490b      	ldr	r1, [pc, #44]	; (8000360 <NVIC_Init+0xc0>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	095b      	lsrs	r3, r3, #5
 8000338:	b2db      	uxtb	r3, r3
 800033a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	f003 031f 	and.w	r3, r3, #31
 8000344:	2201      	movs	r2, #1
 8000346:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000348:	f100 0320 	add.w	r3, r0, #32
 800034c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000350:	bf00      	nop
 8000352:	3714      	adds	r7, #20
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	e000ed00 	.word	0xe000ed00
 8000360:	e000e100 	.word	0xe000e100

08000364 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000370:	4b34      	ldr	r3, [pc, #208]	; (8000444 <EXTI_Init+0xe0>)
 8000372:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	799b      	ldrb	r3, [r3, #6]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d04f      	beq.n	800041c <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800037c:	4931      	ldr	r1, [pc, #196]	; (8000444 <EXTI_Init+0xe0>)
 800037e:	4b31      	ldr	r3, [pc, #196]	; (8000444 <EXTI_Init+0xe0>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	43db      	mvns	r3, r3
 8000388:	4013      	ands	r3, r2
 800038a:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800038c:	492d      	ldr	r1, [pc, #180]	; (8000444 <EXTI_Init+0xe0>)
 800038e:	4b2d      	ldr	r3, [pc, #180]	; (8000444 <EXTI_Init+0xe0>)
 8000390:	685a      	ldr	r2, [r3, #4]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	43db      	mvns	r3, r3
 8000398:	4013      	ands	r3, r2
 800039a:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	791b      	ldrb	r3, [r3, #4]
 80003a0:	461a      	mov	r2, r3
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	4413      	add	r3, r2
 80003a6:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	6811      	ldr	r1, [r2, #0]
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	6812      	ldr	r2, [r2, #0]
 80003b2:	430a      	orrs	r2, r1
 80003b4:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80003b6:	4923      	ldr	r1, [pc, #140]	; (8000444 <EXTI_Init+0xe0>)
 80003b8:	4b22      	ldr	r3, [pc, #136]	; (8000444 <EXTI_Init+0xe0>)
 80003ba:	689a      	ldr	r2, [r3, #8]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	43db      	mvns	r3, r3
 80003c2:	4013      	ands	r3, r2
 80003c4:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80003c6:	491f      	ldr	r1, [pc, #124]	; (8000444 <EXTI_Init+0xe0>)
 80003c8:	4b1e      	ldr	r3, [pc, #120]	; (8000444 <EXTI_Init+0xe0>)
 80003ca:	68da      	ldr	r2, [r3, #12]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	43db      	mvns	r3, r3
 80003d2:	4013      	ands	r3, r2
 80003d4:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	795b      	ldrb	r3, [r3, #5]
 80003da:	2b10      	cmp	r3, #16
 80003dc:	d10e      	bne.n	80003fc <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80003de:	4919      	ldr	r1, [pc, #100]	; (8000444 <EXTI_Init+0xe0>)
 80003e0:	4b18      	ldr	r3, [pc, #96]	; (8000444 <EXTI_Init+0xe0>)
 80003e2:	689a      	ldr	r2, [r3, #8]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80003ec:	4915      	ldr	r1, [pc, #84]	; (8000444 <EXTI_Init+0xe0>)
 80003ee:	4b15      	ldr	r3, [pc, #84]	; (8000444 <EXTI_Init+0xe0>)
 80003f0:	68da      	ldr	r2, [r3, #12]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4313      	orrs	r3, r2
 80003f8:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80003fa:	e01d      	b.n	8000438 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80003fc:	4b11      	ldr	r3, [pc, #68]	; (8000444 <EXTI_Init+0xe0>)
 80003fe:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	795b      	ldrb	r3, [r3, #5]
 8000404:	461a      	mov	r2, r3
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	4413      	add	r3, r2
 800040a:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	6811      	ldr	r1, [r2, #0]
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	6812      	ldr	r2, [r2, #0]
 8000416:	430a      	orrs	r2, r1
 8000418:	601a      	str	r2, [r3, #0]
}
 800041a:	e00d      	b.n	8000438 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	791b      	ldrb	r3, [r3, #4]
 8000420:	461a      	mov	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	4413      	add	r3, r2
 8000426:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	68fa      	ldr	r2, [r7, #12]
 800042c:	6811      	ldr	r1, [r2, #0]
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	6812      	ldr	r2, [r2, #0]
 8000432:	43d2      	mvns	r2, r2
 8000434:	400a      	ands	r2, r1
 8000436:	601a      	str	r2, [r3, #0]
}
 8000438:	bf00      	nop
 800043a:	3714      	adds	r7, #20
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	40013c00 	.word	0x40013c00

08000448 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000450:	2300      	movs	r3, #0
 8000452:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <EXTI_GetITStatus+0x44>)
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4013      	ands	r3, r2
 8000460:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000462:	4b0a      	ldr	r3, [pc, #40]	; (800048c <EXTI_GetITStatus+0x44>)
 8000464:	695a      	ldr	r2, [r3, #20]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4013      	ands	r3, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	d005      	beq.n	800047a <EXTI_GetITStatus+0x32>
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d002      	beq.n	800047a <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000474:	2301      	movs	r3, #1
 8000476:	73fb      	strb	r3, [r7, #15]
 8000478:	e001      	b.n	800047e <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 800047a:	2300      	movs	r3, #0
 800047c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800047e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000480:	4618      	mov	r0, r3
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	40013c00 	.word	0x40013c00

08000490 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <EXTI_ClearITPendingBit+0x1c>)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	6153      	str	r3, [r2, #20]
}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40013c00 	.word	0x40013c00

080004b0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b087      	sub	sp, #28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
 80004be:	2300      	movs	r3, #0
 80004c0:	613b      	str	r3, [r7, #16]
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]
 80004ca:	e076      	b.n	80005ba <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004cc:	2201      	movs	r2, #1
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d165      	bne.n	80005b4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	2103      	movs	r1, #3
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	43db      	mvns	r3, r3
 80004f8:	401a      	ands	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	4619      	mov	r1, r3
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	fa01 f303 	lsl.w	r3, r1, r3
 8000510:	431a      	orrs	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d003      	beq.n	8000526 <GPIO_Init+0x76>
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	2b02      	cmp	r3, #2
 8000524:	d12e      	bne.n	8000584 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	689a      	ldr	r2, [r3, #8]
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	2103      	movs	r1, #3
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	43db      	mvns	r3, r3
 8000536:	401a      	ands	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	795b      	ldrb	r3, [r3, #5]
 8000544:	4619      	mov	r1, r3
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	431a      	orrs	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	b29b      	uxth	r3, r3
 800055c:	4619      	mov	r1, r3
 800055e:	2301      	movs	r3, #1
 8000560:	408b      	lsls	r3, r1
 8000562:	43db      	mvns	r3, r3
 8000564:	401a      	ands	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	7992      	ldrb	r2, [r2, #6]
 8000572:	4611      	mov	r1, r2
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	b292      	uxth	r2, r2
 8000578:	fa01 f202 	lsl.w	r2, r1, r2
 800057c:	b292      	uxth	r2, r2
 800057e:	431a      	orrs	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	68da      	ldr	r2, [r3, #12]
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	b29b      	uxth	r3, r3
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	2103      	movs	r1, #3
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	401a      	ands	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	79db      	ldrb	r3, [r3, #7]
 80005a4:	4619      	mov	r1, r3
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	431a      	orrs	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	3301      	adds	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2b0f      	cmp	r3, #15
 80005be:	d985      	bls.n	80004cc <GPIO_Init+0x1c>
    }
  }
}
 80005c0:	bf00      	nop
 80005c2:	371c      	adds	r7, #28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80005d8:	2300      	movs	r3, #0
 80005da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	691a      	ldr	r2, [r3, #16]
 80005e0:	887b      	ldrh	r3, [r7, #2]
 80005e2:	4013      	ands	r3, r2
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	e001      	b.n	80005f2 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	887a      	ldrh	r2, [r7, #2]
 8000610:	831a      	strh	r2, [r3, #24]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	460b      	mov	r3, r1
 8000628:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	887a      	ldrh	r2, [r7, #2]
 800062e:	835a      	strh	r2, [r3, #26]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800063c:	b490      	push	{r4, r7}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	460a      	mov	r2, r1
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	4613      	mov	r3, r2
 800064a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	f003 0303 	and.w	r3, r3, #3
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	220f      	movs	r2, #15
 800065a:	fa02 f303 	lsl.w	r3, r2, r3
 800065e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000660:	4916      	ldr	r1, [pc, #88]	; (80006bc <SYSCFG_EXTILineConfig+0x80>)
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	089b      	lsrs	r3, r3, #2
 8000666:	b2db      	uxtb	r3, r3
 8000668:	4618      	mov	r0, r3
 800066a:	4a14      	ldr	r2, [pc, #80]	; (80006bc <SYSCFG_EXTILineConfig+0x80>)
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	089b      	lsrs	r3, r3, #2
 8000670:	b2db      	uxtb	r3, r3
 8000672:	3302      	adds	r3, #2
 8000674:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	43db      	mvns	r3, r3
 800067c:	401a      	ands	r2, r3
 800067e:	1c83      	adds	r3, r0, #2
 8000680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <SYSCFG_EXTILineConfig+0x80>)
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	089b      	lsrs	r3, r3, #2
 800068a:	b2db      	uxtb	r3, r3
 800068c:	461c      	mov	r4, r3
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <SYSCFG_EXTILineConfig+0x80>)
 8000690:	79bb      	ldrb	r3, [r7, #6]
 8000692:	089b      	lsrs	r3, r3, #2
 8000694:	b2db      	uxtb	r3, r3
 8000696:	3302      	adds	r3, #2
 8000698:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800069c:	79f9      	ldrb	r1, [r7, #7]
 800069e:	79bb      	ldrb	r3, [r7, #6]
 80006a0:	f003 0303 	and.w	r3, r3, #3
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	431a      	orrs	r2, r3
 80006ac:	1ca3      	adds	r3, r4, #2
 80006ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc90      	pop	{r4, r7}
 80006ba:	4770      	bx	lr
 80006bc:	40013800 	.word	0x40013800

080006c0 <send_gsm_command_by_index>:
#include <stdbool.h>
#include "uart_line_queue.h"
#include "main.h"
#include "gsm_state.h"

void send_gsm_command_by_index(int idx) {
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    if (idx < 0 || idx >= gsm_commands_count) return;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db1d      	blt.n	800070a <send_gsm_command_by_index+0x4a>
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <send_gsm_command_by_index+0x54>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	da18      	bge.n	800070a <send_gsm_command_by_index+0x4a>
    uart1_send_raw((uint8_t *)gsm_commands[idx].syntax, strlen(gsm_commands[idx].syntax));
 80006d8:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <send_gsm_command_by_index+0x58>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	4413      	add	r3, r2
 80006e0:	3304      	adds	r3, #4
 80006e2:	681c      	ldr	r4, [r3, #0]
 80006e4:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <send_gsm_command_by_index+0x58>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	4413      	add	r3, r2
 80006ec:	3304      	adds	r3, #4
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fd77 	bl	80001e4 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4619      	mov	r1, r3
 80006fa:	4620      	mov	r0, r4
 80006fc:	f000 fc8a 	bl	8001014 <uart1_send_raw>
    uart1_send_raw((uint8_t *)"\r\n", 2);
 8000700:	2102      	movs	r1, #2
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <send_gsm_command_by_index+0x5c>)
 8000704:	f000 fc86 	bl	8001014 <uart1_send_raw>
 8000708:	e000      	b.n	800070c <send_gsm_command_by_index+0x4c>
    if (idx < 0 || idx >= gsm_commands_count) return;
 800070a:	bf00      	nop
}
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bd90      	pop	{r4, r7, pc}
 8000712:	bf00      	nop
 8000714:	08017e30 	.word	0x08017e30
 8000718:	08017d80 	.word	0x08017d80
 800071c:	08014a74 	.word	0x08014a74

08000720 <send_all_gsm_commands_with_check>:

void send_all_gsm_commands_with_check(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b0d4      	sub	sp, #336	; 0x150
 8000724:	af02      	add	r7, sp, #8
    static uint32_t start_tick = 0;
    static uint32_t last_send_tick = 0;
    static bool waiting_for_response = false;
    char response[256];

    if (current_command_index >= gsm_commands_count) {
 8000726:	4b42      	ldr	r3, [pc, #264]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	4b42      	ldr	r3, [pc, #264]	; (8000834 <send_all_gsm_commands_with_check+0x114>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	429a      	cmp	r2, r3
 8000730:	da78      	bge.n	8000824 <send_all_gsm_commands_with_check+0x104>
        return; 
    }

    if (!waiting_for_response) {
 8000732:	4b41      	ldr	r3, [pc, #260]	; (8000838 <send_all_gsm_commands_with_check+0x118>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	f083 0301 	eor.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00e      	beq.n	800075e <send_all_gsm_commands_with_check+0x3e>
        start_tick = timer2_get_tick();
 8000740:	f000 fb64 	bl	8000e0c <timer2_get_tick>
 8000744:	4602      	mov	r2, r0
 8000746:	4b3d      	ldr	r3, [pc, #244]	; (800083c <send_all_gsm_commands_with_check+0x11c>)
 8000748:	601a      	str	r2, [r3, #0]
        last_send_tick = start_tick - 5000;
 800074a:	4b3c      	ldr	r3, [pc, #240]	; (800083c <send_all_gsm_commands_with_check+0x11c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000752:	3b08      	subs	r3, #8
 8000754:	4a3a      	ldr	r2, [pc, #232]	; (8000840 <send_all_gsm_commands_with_check+0x120>)
 8000756:	6013      	str	r3, [r2, #0]
        waiting_for_response = true;
 8000758:	4b37      	ldr	r3, [pc, #220]	; (8000838 <send_all_gsm_commands_with_check+0x118>)
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
    }

    uint32_t wait_time = gsm_commands[current_command_index].max_response_time_ms;
 800075e:	4b34      	ldr	r3, [pc, #208]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a38      	ldr	r2, [pc, #224]	; (8000844 <send_all_gsm_commands_with_check+0x124>)
 8000764:	011b      	lsls	r3, r3, #4
 8000766:	4413      	add	r3, r2
 8000768:	330c      	adds	r3, #12
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    if ((timer2_get_tick() - start_tick) < wait_time) {
 8000770:	f000 fb4c 	bl	8000e0c <timer2_get_tick>
 8000774:	4602      	mov	r2, r0
 8000776:	4b31      	ldr	r3, [pc, #196]	; (800083c <send_all_gsm_commands_with_check+0x11c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	1ad2      	subs	r2, r2, r3
 800077c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000780:	429a      	cmp	r2, r3
 8000782:	d231      	bcs.n	80007e8 <send_all_gsm_commands_with_check+0xc8>
        if ((timer2_get_tick() - last_send_tick) >= 3000) { 
 8000784:	f000 fb42 	bl	8000e0c <timer2_get_tick>
 8000788:	4602      	mov	r2, r0
 800078a:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <send_all_gsm_commands_with_check+0x120>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000794:	4293      	cmp	r3, r2
 8000796:	d91e      	bls.n	80007d6 <send_all_gsm_commands_with_check+0xb6>
            send_gsm_command_by_index(current_command_index);
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff8f 	bl	80006c0 <send_gsm_command_by_index>
            last_send_tick = timer2_get_tick();
 80007a2:	f000 fb33 	bl	8000e0c <timer2_get_tick>
 80007a6:	4602      	mov	r2, r0
 80007a8:	4b25      	ldr	r3, [pc, #148]	; (8000840 <send_all_gsm_commands_with_check+0x120>)
 80007aa:	601a      	str	r2, [r3, #0]
        }
        while (uart_line_queue_pop(response)) {
 80007ac:	e013      	b.n	80007d6 <send_all_gsm_commands_with_check+0xb6>
            if (check_gsm_response_by_index(current_command_index, response)) {
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 f931 	bl	8000a20 <check_gsm_response_by_index>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d008      	beq.n	80007d6 <send_all_gsm_commands_with_check+0xb6>
                waiting_for_response = false;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <send_all_gsm_commands_with_check+0x118>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
                current_command_index++;
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	4a17      	ldr	r2, [pc, #92]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 80007d2:	6013      	str	r3, [r2, #0]
                return; 
 80007d4:	e027      	b.n	8000826 <send_all_gsm_commands_with_check+0x106>
        while (uart_line_queue_pop(response)) {
 80007d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fdf2 	bl	80013c4 <uart_line_queue_pop>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1e3      	bne.n	80007ae <send_all_gsm_commands_with_check+0x8e>
 80007e6:	e01e      	b.n	8000826 <send_all_gsm_commands_with_check+0x106>
            }
        }
    } else {
        current_device_state = DEVICE_STATE_GSM_ERROR;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <send_all_gsm_commands_with_check+0x128>)
 80007ea:	2202      	movs	r2, #2
 80007ec:	701a      	strb	r2, [r3, #0]
        char log_buf[64];
        snprintf(log_buf, sizeof(log_buf), "Loi khi gui lenh case %d: %s", current_command_index, gsm_commands[current_command_index].command);
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 80007f0:	6819      	ldr	r1, [r3, #0]
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a13      	ldr	r2, [pc, #76]	; (8000844 <send_all_gsm_commands_with_check+0x124>)
 80007f8:	011b      	lsls	r3, r3, #4
 80007fa:	4413      	add	r3, r2
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	1d38      	adds	r0, r7, #4
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	460b      	mov	r3, r1
 8000804:	4a11      	ldr	r2, [pc, #68]	; (800084c <send_all_gsm_commands_with_check+0x12c>)
 8000806:	2140      	movs	r1, #64	; 0x40
 8000808:	f013 fd22 	bl	8014250 <sniprintf>
        uart_log(log_buf);
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fbc8 	bl	8000fa4 <uart_log>
        waiting_for_response = false;
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <send_all_gsm_commands_with_check+0x118>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
        current_command_index = gsm_commands_count;
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <send_all_gsm_commands_with_check+0x114>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a04      	ldr	r2, [pc, #16]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	e000      	b.n	8000826 <send_all_gsm_commands_with_check+0x106>
        return; 
 8000824:	bf00      	nop
    }
 8000826:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000090 	.word	0x20000090
 8000834:	08017e30 	.word	0x08017e30
 8000838:	20000094 	.word	0x20000094
 800083c:	20000098 	.word	0x20000098
 8000840:	2000009c 	.word	0x2000009c
 8000844:	08017d80 	.word	0x08017d80
 8000848:	20000537 	.word	0x20000537
 800084c:	08014a78 	.word	0x08014a78

08000850 <parse_response_at>:
#include <stdio.h>
#include "gsm_state.h"
#include "ppp_net/ppp_connection.h"
#include "main.h"

bool parse_response_at(const char* response) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "OK") != NULL;
 8000858:	4906      	ldr	r1, [pc, #24]	; (8000874 <parse_response_at+0x24>)
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f013 fd84 	bl	8014368 <strstr>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	bf14      	ite	ne
 8000866:	2301      	movne	r3, #1
 8000868:	2300      	moveq	r3, #0
 800086a:	b2db      	uxtb	r3, r3
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	08014bf8 	.word	0x08014bf8

08000878 <parse_response_ati>:

bool parse_response_ati(const char* response) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "Manufacturer: INCORPORATED") != NULL;
 8000880:	4906      	ldr	r1, [pc, #24]	; (800089c <parse_response_ati+0x24>)
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f013 fd70 	bl	8014368 <strstr>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	bf14      	ite	ne
 800088e:	2301      	movne	r3, #1
 8000890:	2300      	moveq	r3, #0
 8000892:	b2db      	uxtb	r3, r3
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	08014bfc 	.word	0x08014bfc

080008a0 <parse_response_at_cpin>:

bool parse_response_at_cpin(const char* response) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "+CPIN: READY") != NULL;
 80008a8:	4906      	ldr	r1, [pc, #24]	; (80008c4 <parse_response_at_cpin+0x24>)
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f013 fd5c 	bl	8014368 <strstr>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bf14      	ite	ne
 80008b6:	2301      	movne	r3, #1
 80008b8:	2300      	moveq	r3, #0
 80008ba:	b2db      	uxtb	r3, r3
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	08014c18 	.word	0x08014c18

080008c8 <parse_response_at_csq>:

bool parse_response_at_csq(const char* response) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "+CSQ:") != NULL;
 80008d0:	4906      	ldr	r1, [pc, #24]	; (80008ec <parse_response_at_csq+0x24>)
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f013 fd48 	bl	8014368 <strstr>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	bf14      	ite	ne
 80008de:	2301      	movne	r3, #1
 80008e0:	2300      	moveq	r3, #0
 80008e2:	b2db      	uxtb	r3, r3
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	08014c28 	.word	0x08014c28

080008f0 <parse_response_at_cereg>:

bool parse_response_at_cereg(const char* response) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "+CEREG: 0,1") != NULL;
 80008f8:	4906      	ldr	r1, [pc, #24]	; (8000914 <parse_response_at_cereg+0x24>)
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f013 fd34 	bl	8014368 <strstr>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	bf14      	ite	ne
 8000906:	2301      	movne	r3, #1
 8000908:	2300      	moveq	r3, #0
 800090a:	b2db      	uxtb	r3, r3
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	08014c30 	.word	0x08014c30

08000918 <parse_response_at_cops>:

bool parse_response_at_cops(const char* response) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "+COPS=0") != NULL;
 8000920:	4906      	ldr	r1, [pc, #24]	; (800093c <parse_response_at_cops+0x24>)
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f013 fd20 	bl	8014368 <strstr>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	bf14      	ite	ne
 800092e:	2301      	movne	r3, #1
 8000930:	2300      	moveq	r3, #0
 8000932:	b2db      	uxtb	r3, r3
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	08014c3c 	.word	0x08014c3c

08000940 <parse_response_at_cgdcont>:

bool parse_response_at_cgdcont(const char* response) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
   // uart_log(response);
    return strstr(response, "OK") != NULL;
 8000948:	4906      	ldr	r1, [pc, #24]	; (8000964 <parse_response_at_cgdcont+0x24>)
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f013 fd0c 	bl	8014368 <strstr>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	bf14      	ite	ne
 8000956:	2301      	movne	r3, #1
 8000958:	2300      	moveq	r3, #0
 800095a:	b2db      	uxtb	r3, r3
}
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	08014bf8 	.word	0x08014bf8

08000968 <parse_response_at_cgauth>:

bool parse_response_at_cgauth(const char* response) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "OK") != NULL;
 8000970:	4906      	ldr	r1, [pc, #24]	; (800098c <parse_response_at_cgauth+0x24>)
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f013 fcf8 	bl	8014368 <strstr>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	bf14      	ite	ne
 800097e:	2301      	movne	r3, #1
 8000980:	2300      	moveq	r3, #0
 8000982:	b2db      	uxtb	r3, r3
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	08014bf8 	.word	0x08014bf8

08000990 <parse_response_at_cgact>:

bool parse_response_at_cgact(const char* response) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "OK") != NULL;
 8000998:	4906      	ldr	r1, [pc, #24]	; (80009b4 <parse_response_at_cgact+0x24>)
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f013 fce4 	bl	8014368 <strstr>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bf14      	ite	ne
 80009a6:	2301      	movne	r3, #1
 80009a8:	2300      	moveq	r3, #0
 80009aa:	b2db      	uxtb	r3, r3
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	08014bf8 	.word	0x08014bf8

080009b8 <parse_response_at_cgpaddr>:

bool parse_response_at_cgpaddr(const char* response) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "+CGPADDR: 1,") != NULL;
 80009c0:	4906      	ldr	r1, [pc, #24]	; (80009dc <parse_response_at_cgpaddr+0x24>)
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f013 fcd0 	bl	8014368 <strstr>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	bf14      	ite	ne
 80009ce:	2301      	movne	r3, #1
 80009d0:	2300      	moveq	r3, #0
 80009d2:	b2db      	uxtb	r3, r3
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	08014c44 	.word	0x08014c44

080009e0 <parse_response_atd99>:
bool parse_response_at_cgdata(const char* response) {
    //uart_log(response);
    return strstr(response, "CONNECT") != NULL;
}

bool parse_response_atd99(const char* response) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    if (strstr(response, "CONNECT") != NULL) {
 80009e8:	490a      	ldr	r1, [pc, #40]	; (8000a14 <parse_response_atd99+0x34>)
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f013 fcbc 	bl	8014368 <strstr>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d009      	beq.n	8000a0a <parse_response_atd99+0x2a>
        gsm_ppp_mode = true;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <parse_response_atd99+0x38>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
        //uart_log("Switching to PPP mode.");
        current_device_state = DEVICE_STATE_BOOTING_DEVICE;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <parse_response_atd99+0x3c>)
 80009fe:	2203      	movs	r2, #3
 8000a00:	701a      	strb	r2, [r3, #0]
        restart_dma2_stream2();
 8000a02:	f000 fc59 	bl	80012b8 <restart_dma2_stream2>
        return true;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e000      	b.n	8000a0c <parse_response_atd99+0x2c>
    }
    return false;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	08014c54 	.word	0x08014c54
 8000a18:	200005f8 	.word	0x200005f8
 8000a1c:	20000537 	.word	0x20000537

08000a20 <check_gsm_response_by_index>:
#include "gsm_parser.h"
#include <stdbool.h>
#include <string.h>
#include "gsm_state.h"

bool check_gsm_response_by_index(int idx, const char* response) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
    switch (idx) {
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0a      	cmp	r3, #10
 8000a2e:	d855      	bhi.n	8000adc <check_gsm_response_by_index+0xbc>
 8000a30:	a201      	add	r2, pc, #4	; (adr r2, 8000a38 <check_gsm_response_by_index+0x18>)
 8000a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a36:	bf00      	nop
 8000a38:	08000a65 	.word	0x08000a65
 8000a3c:	08000a6f 	.word	0x08000a6f
 8000a40:	08000a79 	.word	0x08000a79
 8000a44:	08000a83 	.word	0x08000a83
 8000a48:	08000a8d 	.word	0x08000a8d
 8000a4c:	08000a97 	.word	0x08000a97
 8000a50:	08000aab 	.word	0x08000aab
 8000a54:	08000ab5 	.word	0x08000ab5
 8000a58:	08000abf 	.word	0x08000abf
 8000a5c:	08000ac9 	.word	0x08000ac9
 8000a60:	08000ad3 	.word	0x08000ad3
        case 0: // AT
            return parse_response_at(response);
 8000a64:	6838      	ldr	r0, [r7, #0]
 8000a66:	f7ff fef3 	bl	8000850 <parse_response_at>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	e037      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 1: // ATI
            return parse_response_ati(response);
 8000a6e:	6838      	ldr	r0, [r7, #0]
 8000a70:	f7ff ff02 	bl	8000878 <parse_response_ati>
 8000a74:	4603      	mov	r3, r0
 8000a76:	e032      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 2: // AT+CPIN?
            return parse_response_at_cpin(response);
 8000a78:	6838      	ldr	r0, [r7, #0]
 8000a7a:	f7ff ff11 	bl	80008a0 <parse_response_at_cpin>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	e02d      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 3: // AT+CSQ
            return parse_response_at_csq(response);
 8000a82:	6838      	ldr	r0, [r7, #0]
 8000a84:	f7ff ff20 	bl	80008c8 <parse_response_at_csq>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	e028      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 4: // AT+CEREG?
            return parse_response_at_cereg(response);
 8000a8c:	6838      	ldr	r0, [r7, #0]
 8000a8e:	f7ff ff2f 	bl	80008f0 <parse_response_at_cereg>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e023      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 5: // AT+COPS
            return parse_response_at_cops(response);
 8000a96:	6838      	ldr	r0, [r7, #0]
 8000a98:	f7ff ff3e 	bl	8000918 <parse_response_at_cops>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	bf14      	ite	ne
 8000aa2:	2301      	movne	r3, #1
 8000aa4:	2300      	moveq	r3, #0
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	e019      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 6: // AT+CGDCONT
            return parse_response_at_cgdcont(response);
 8000aaa:	6838      	ldr	r0, [r7, #0]
 8000aac:	f7ff ff48 	bl	8000940 <parse_response_at_cgdcont>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	e014      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 7: // AT+CGAUTH
            return parse_response_at_cgauth(response);
 8000ab4:	6838      	ldr	r0, [r7, #0]
 8000ab6:	f7ff ff57 	bl	8000968 <parse_response_at_cgauth>
 8000aba:	4603      	mov	r3, r0
 8000abc:	e00f      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 8: // AT+CGACT
            return parse_response_at_cgact(response);
 8000abe:	6838      	ldr	r0, [r7, #0]
 8000ac0:	f7ff ff66 	bl	8000990 <parse_response_at_cgact>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	e00a      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 9: // AT+CGPADDR
            return parse_response_at_cgpaddr(response);
 8000ac8:	6838      	ldr	r0, [r7, #0]
 8000aca:	f7ff ff75 	bl	80009b8 <parse_response_at_cgpaddr>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	e005      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 10: // ATD*99#
            return parse_response_atd99(response);
 8000ad2:	6838      	ldr	r0, [r7, #0]
 8000ad4:	f7ff ff84 	bl	80009e0 <parse_response_atd99>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	e000      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        // case 11: // +++
        //     return parse_response_plus(response);
        // case 12: // ATH
        //     return parse_response_ath(response);
        default:
            return false;
 8000adc:	2300      	movs	r3, #0
    }
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop

08000ae8 <button_init>:
volatile uint8_t g_button_pressed_flag = 0;
volatile uint8_t g_button_released_flag = 0;
static uint32_t last_irq_tick = 0;

void button_init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    EXTI_InitTypeDef EXTI_InitStruct;
    NVIC_InitTypeDef NVIC_InitStruct;

    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 8000aee:	2301      	movs	r3, #1
 8000af0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8000af2:	2300      	movs	r3, #0
 8000af4:	753b      	strb	r3, [r7, #20]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8000afa:	2300      	movs	r3, #0
 8000afc:	757b      	strb	r3, [r7, #21]
    GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4619      	mov	r1, r3
 8000b04:	4811      	ldr	r0, [pc, #68]	; (8000b4c <button_init+0x64>)
 8000b06:	f7ff fcd3 	bl	80004b0 <GPIO_Init>

    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f7ff fd95 	bl	800063c <SYSCFG_EXTILineConfig>
    EXTI_InitStruct.EXTI_Line = EXTI_Line0;
 8000b12:	2301      	movs	r3, #1
 8000b14:	60bb      	str	r3, [r7, #8]
    EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8000b16:	2300      	movs	r3, #0
 8000b18:	733b      	strb	r3, [r7, #12]
    EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	737b      	strb	r3, [r7, #13]
    EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStruct);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fc1c 	bl	8000364 <EXTI_Init>

    NVIC_InitStruct.NVIC_IRQChannel = EXTI0_IRQn;
 8000b2c:	2306      	movs	r3, #6
 8000b2e:	713b      	strb	r3, [r7, #4]
    NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x01;
 8000b30:	2301      	movs	r3, #1
 8000b32:	717b      	strb	r3, [r7, #5]
    NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x01;
 8000b34:	2301      	movs	r3, #1
 8000b36:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStruct);
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fbae 	bl	80002a0 <NVIC_Init>
}
 8000b44:	bf00      	nop
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40020000 	.word	0x40020000

08000b50 <EXTI0_IRQHandler>:

// Hàm xử lý ngắt EXTI0 (PA0)
void EXTI0_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
 8000b56:	2001      	movs	r0, #1
 8000b58:	f7ff fc76 	bl	8000448 <EXTI_GetITStatus>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d01c      	beq.n	8000b9c <EXTI0_IRQHandler+0x4c>
        uint32_t now = timer2_get_tick();
 8000b62:	f000 f953 	bl	8000e0c <timer2_get_tick>
 8000b66:	6078      	str	r0, [r7, #4]
        if (now - last_irq_tick > 30) { 
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <EXTI0_IRQHandler+0x54>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	2b1e      	cmp	r3, #30
 8000b72:	d910      	bls.n	8000b96 <EXTI0_IRQHandler+0x46>
            if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0) == Bit_RESET) {
 8000b74:	2101      	movs	r1, #1
 8000b76:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <EXTI0_IRQHandler+0x58>)
 8000b78:	f7ff fd28 	bl	80005cc <GPIO_ReadInputDataBit>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d103      	bne.n	8000b8a <EXTI0_IRQHandler+0x3a>
                g_button_pressed_flag = 1;   
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <EXTI0_IRQHandler+0x5c>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	e002      	b.n	8000b90 <EXTI0_IRQHandler+0x40>
            } else {
                g_button_released_flag = 1;  
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <EXTI0_IRQHandler+0x60>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
            }
            last_irq_tick = now;
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <EXTI0_IRQHandler+0x54>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
        }
        EXTI_ClearITPendingBit(EXTI_Line0);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff fc7a 	bl	8000490 <EXTI_ClearITPendingBit>
    }
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200000a4 	.word	0x200000a4
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	200000a0 	.word	0x200000a0
 8000bb0:	200000a1 	.word	0x200000a1

08000bb4 <hardware_init>:
#include "stm32f4xx.h"
#include "uart_line_queue.h"

#define GSM_POWER_GPIO_PORT GPIOA
#define GSM_POWER_PIN       8
void hardware_init(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <hardware_init+0x58>)
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <hardware_init+0x58>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f043 0303 	orr.w	r3, r3, #3
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN | RCC_APB1ENR_TIM2EN;
 8000bc4:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <hardware_init+0x58>)
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <hardware_init+0x58>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN | RCC_APB2ENR_SYSCFGEN;
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <hardware_init+0x58>)
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <hardware_init+0x58>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	6453      	str	r3, [r2, #68]	; 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000be4:	4a09      	ldr	r2, [pc, #36]	; (8000c0c <hardware_init+0x58>)
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <hardware_init+0x58>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bee:	6313      	str	r3, [r2, #48]	; 0x30

    timer2_init_1ms();
 8000bf0:	f000 f8c4 	bl	8000d7c <timer2_init_1ms>
    uart_line_queue_init();
 8000bf4:	f000 fb90 	bl	8001318 <uart_line_queue_init>
    uart_init_all();
 8000bf8:	f000 f942 	bl	8000e80 <uart_init_all>
    led_init();
 8000bfc:	f000 f83c 	bl	8000c78 <led_init>
    button_init();
 8000c00:	f7ff ff72 	bl	8000ae8 <button_init>
    gsm_module_power_cycle();
 8000c04:	f000 f804 	bl	8000c10 <gsm_module_power_cycle>
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800

08000c10 <gsm_module_power_cycle>:

uint8_t switch_read(uint8_t index) {
    return 0; 
}

void gsm_module_power_cycle(void) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
    GSM_POWER_GPIO_PORT->MODER &= ~(3U << (GSM_POWER_PIN * 2));
 8000c14:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000c1e:	6013      	str	r3, [r2, #0]
    GSM_POWER_GPIO_PORT->MODER |=  (1U << (GSM_POWER_PIN * 2));
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2a:	6013      	str	r3, [r2, #0]
    GSM_POWER_GPIO_PORT->OTYPER &= ~(1U << GSM_POWER_PIN);
 8000c2c:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c36:	6053      	str	r3, [r2, #4]
    GSM_POWER_GPIO_PORT->OSPEEDR |= (3U << (GSM_POWER_PIN * 2));
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000c42:	6093      	str	r3, [r2, #8]
    GSM_POWER_GPIO_PORT->PUPDR &= ~(3U << (GSM_POWER_PIN * 2));
 8000c44:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000c4e:	60d3      	str	r3, [r2, #12]
    GSM_POWER_GPIO_PORT->ODR &= ~(1U << GSM_POWER_PIN);
 8000c50:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c5a:	6153      	str	r3, [r2, #20]
    delay_ms(3000); 
 8000c5c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c60:	f000 f8e0 	bl	8000e24 <delay_ms>
    GSM_POWER_GPIO_PORT->ODR |= (1U << GSM_POWER_PIN); 
 8000c64:	4a03      	ldr	r2, [pc, #12]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c66:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6e:	6153      	str	r3, [r2, #20]
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40020000 	.word	0x40020000

08000c78 <led_init>:
#include "led.h"
#include "hardware.h"
#include "uart.h"

void led_init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
    // Configure LED 4G (Green Network) as output
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.GPIO_Pin = LED_4G_PIN;
 8000c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c82:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000c84:	2301      	movs	r3, #1
 8000c86:	713b      	strb	r3, [r7, #4]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	717b      	strb	r3, [r7, #5]
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(LED_4G_PORT, &GPIO_InitStruct);
 8000c94:	463b      	mov	r3, r7
 8000c96:	4619      	mov	r1, r3
 8000c98:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <led_init+0x4c>)
 8000c9a:	f7ff fc09 	bl	80004b0 <GPIO_Init>
    GPIO_InitStruct.GPIO_Pin = LED_STT_PIN;
 8000c9e:	2310      	movs	r3, #16
 8000ca0:	603b      	str	r3, [r7, #0]
    GPIO_Init(LED_STT_PORT, &GPIO_InitStruct);
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <led_init+0x4c>)
 8000ca8:	f7ff fc02 	bl	80004b0 <GPIO_Init>
    GPIO_InitStruct.GPIO_Pin = LED_STT_SWITCH_PIN;
 8000cac:	2320      	movs	r3, #32
 8000cae:	603b      	str	r3, [r7, #0]
    GPIO_Init(LED_STT_SWITCH_PORT, &GPIO_InitStruct);
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <led_init+0x4c>)
 8000cb6:	f7ff fbfb 	bl	80004b0 <GPIO_Init>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40020400 	.word	0x40020400

08000cc8 <led_4g_on>:

void led_4g_on(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
    GPIO_SetBits(LED_4G_PORT, LED_4G_PIN);
 8000ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <led_4g_on+0x14>)
 8000cd2:	f7ff fc95 	bl	8000600 <GPIO_SetBits>
    //uart_log("LED 4G ON");
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40020400 	.word	0x40020400

08000ce0 <led_4g_off>:

void led_4g_off(void) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
    GPIO_ResetBits(LED_4G_PORT, LED_4G_PIN);
 8000ce4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <led_4g_off+0x14>)
 8000cea:	f7ff fc98 	bl	800061e <GPIO_ResetBits>
    //uart_log("LED 4G OFF");
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40020400 	.word	0x40020400

08000cf8 <led_stt_on>:
        led_4g_off();
}



void led_stt_on(void) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
    GPIO_SetBits(LED_STT_PORT, LED_STT_PIN);
 8000cfc:	2110      	movs	r1, #16
 8000cfe:	4802      	ldr	r0, [pc, #8]	; (8000d08 <led_stt_on+0x10>)
 8000d00:	f7ff fc7e 	bl	8000600 <GPIO_SetBits>
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40020400 	.word	0x40020400

08000d0c <led_stt_off>:

void led_stt_off(void) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
    GPIO_ResetBits(LED_STT_PORT, LED_STT_PIN);
 8000d10:	2110      	movs	r1, #16
 8000d12:	4802      	ldr	r0, [pc, #8]	; (8000d1c <led_stt_off+0x10>)
 8000d14:	f7ff fc83 	bl	800061e <GPIO_ResetBits>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40020400 	.word	0x40020400

08000d20 <led_stt_switch_on>:
        led_stt_on();
    else
        led_stt_off();
}

void led_stt_switch_on(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
    GPIO_SetBits(LED_STT_SWITCH_PORT, LED_STT_SWITCH_PIN);
 8000d24:	2120      	movs	r1, #32
 8000d26:	4802      	ldr	r0, [pc, #8]	; (8000d30 <led_stt_switch_on+0x10>)
 8000d28:	f7ff fc6a 	bl	8000600 <GPIO_SetBits>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40020400 	.word	0x40020400

08000d34 <led_stt_switch_off>:

void led_stt_switch_off(void) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
    GPIO_ResetBits(LED_STT_SWITCH_PORT, LED_STT_SWITCH_PIN);
 8000d38:	2120      	movs	r1, #32
 8000d3a:	4802      	ldr	r0, [pc, #8]	; (8000d44 <led_stt_switch_off+0x10>)
 8000d3c:	f7ff fc6f 	bl	800061e <GPIO_ResetBits>
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40020400 	.word	0x40020400

08000d48 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000d52:	4909      	ldr	r1, [pc, #36]	; (8000d78 <NVIC_EnableIRQ+0x30>)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	095b      	lsrs	r3, r3, #5
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	f002 021f 	and.w	r2, r2, #31
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa00 f202 	lsl.w	r2, r0, r2
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100

08000d7c <timer2_init_1ms>:
#include "stm32f4xx.h"

static volatile uint32_t timer2_tick = 0;

void timer2_init_1ms(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
    TIM2->PSC = 15;      // 16MHz / (15+1) = 1MHz
 8000d80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d84:	220f      	movs	r2, #15
 8000d86:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM2->ARR = 999;     // 1MHz / (999+1) = 1kHz (1ms)
 8000d88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d90:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->EGR = TIM_EGR_UG;
 8000d92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d96:	2201      	movs	r2, #1
 8000d98:	829a      	strh	r2, [r3, #20]
    TIM2->DIER |= TIM_DIER_UIE;
 8000d9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da2:	899b      	ldrh	r3, [r3, #12]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	8193      	strh	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;
 8000dae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	8013      	strh	r3, [r2, #0]

    NVIC_EnableIRQ(TIM2_IRQn);
 8000dc2:	201c      	movs	r0, #28
 8000dc4:	f7ff ffc0 	bl	8000d48 <NVIC_EnableIRQ>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) // Update interrupt flag
 8000dd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dd4:	8a1b      	ldrh	r3, [r3, #16]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d00e      	beq.n	8000dfe <TIM2_IRQHandler+0x32>
    {
        TIM2->SR &= ~TIM_SR_UIF; // Clear flag
 8000de0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de8:	8a1b      	ldrh	r3, [r3, #16]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	f023 0301 	bic.w	r3, r3, #1
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	8213      	strh	r3, [r2, #16]
        timer2_tick++;
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <TIM2_IRQHandler+0x3c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	4a03      	ldr	r2, [pc, #12]	; (8000e08 <TIM2_IRQHandler+0x3c>)
 8000dfc:	6013      	str	r3, [r2, #0]
    }
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	200000a8 	.word	0x200000a8

08000e0c <timer2_get_tick>:

uint32_t timer2_get_tick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
    return timer2_tick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <timer2_get_tick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200000a8 	.word	0x200000a8

08000e24 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    uint32_t start = timer2_get_tick();
 8000e2c:	f7ff ffee 	bl	8000e0c <timer2_get_tick>
 8000e30:	60f8      	str	r0, [r7, #12]
    while ((timer2_get_tick() - start) < ms) {
 8000e32:	bf00      	nop
 8000e34:	f7ff ffea 	bl	8000e0c <timer2_get_tick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	1ad2      	subs	r2, r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d3f7      	bcc.n	8000e34 <delay_ms+0x10>
    }
}
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <NVIC_EnableIRQ>:
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000e56:	4909      	ldr	r1, [pc, #36]	; (8000e7c <NVIC_EnableIRQ+0x30>)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	095b      	lsrs	r3, r3, #5
 8000e5e:	79fa      	ldrb	r2, [r7, #7]
 8000e60:	f002 021f 	and.w	r2, r2, #31
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <uart_init_all>:
uint8_t m_uart1_rx_buffer[UART1_RX_BUFFER_SIZE];
volatile uint32_t m_old_uart1_dma_rx_pos = 0;
volatile bool rx_line_ready = false;

void uart_init_all(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000e84:	4a3f      	ldr	r2, [pc, #252]	; (8000f84 <uart_init_all+0x104>)
 8000e86:	4b3f      	ldr	r3, [pc, #252]	; (8000f84 <uart_init_all+0x104>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000e90:	4a3c      	ldr	r2, [pc, #240]	; (8000f84 <uart_init_all+0x104>)
 8000e92:	4b3c      	ldr	r3, [pc, #240]	; (8000f84 <uart_init_all+0x104>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	6453      	str	r3, [r2, #68]	; 0x44

    GPIOA->MODER &= ~((3U << (9 * 2)) | (3U << (10 * 2)));
 8000e9c:	4a3a      	ldr	r2, [pc, #232]	; (8000f88 <uart_init_all+0x108>)
 8000e9e:	4b3a      	ldr	r3, [pc, #232]	; (8000f88 <uart_init_all+0x108>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000ea6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2U << (9 * 2)) | (2U << (10 * 2)));
 8000ea8:	4a37      	ldr	r2, [pc, #220]	; (8000f88 <uart_init_all+0x108>)
 8000eaa:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <uart_init_all+0x108>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8000eb2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~((0xF << (4 * 1)) | (0xF << (4 * 2)));
 8000eb4:	4a34      	ldr	r2, [pc, #208]	; (8000f88 <uart_init_all+0x108>)
 8000eb6:	4b34      	ldr	r3, [pc, #208]	; (8000f88 <uart_init_all+0x108>)
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000ebe:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= ((7U << (4 * 1)) | (7U << (4 * 2)));
 8000ec0:	4a31      	ldr	r2, [pc, #196]	; (8000f88 <uart_init_all+0x108>)
 8000ec2:	4b31      	ldr	r3, [pc, #196]	; (8000f88 <uart_init_all+0x108>)
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000eca:	6253      	str	r3, [r2, #36]	; 0x24

    USART1->BRR = 16000000 / 115200;
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <uart_init_all+0x10c>)
 8000ece:	228a      	movs	r2, #138	; 0x8a
 8000ed0:	811a      	strh	r2, [r3, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000ed2:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <uart_init_all+0x10c>)
 8000ed4:	f242 020c 	movw	r2, #8204	; 0x200c
 8000ed8:	819a      	strh	r2, [r3, #12]

    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000eda:	4a2a      	ldr	r2, [pc, #168]	; (8000f84 <uart_init_all+0x104>)
 8000edc:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <uart_init_all+0x104>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40

    GPIOA->MODER &= ~((3U << (2 * 2)) | (3U << (3 * 2)));
 8000ee6:	4a28      	ldr	r2, [pc, #160]	; (8000f88 <uart_init_all+0x108>)
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <uart_init_all+0x108>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ef0:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2U << (2 * 2)) | (2U << (3 * 2)));
 8000ef2:	4a25      	ldr	r2, [pc, #148]	; (8000f88 <uart_init_all+0x108>)
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <uart_init_all+0x108>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000efc:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0xF << (4 * 2)) | (0xF << (4 * 3)));
 8000efe:	4a22      	ldr	r2, [pc, #136]	; (8000f88 <uart_init_all+0x108>)
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <uart_init_all+0x108>)
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000f08:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= ((7U << (4 * 2)) | (7U << (4 * 3)));
 8000f0a:	4a1f      	ldr	r2, [pc, #124]	; (8000f88 <uart_init_all+0x108>)
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <uart_init_all+0x108>)
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000f14:	6213      	str	r3, [r2, #32]

    USART2->BRR = 16000000 / 115200;
 8000f16:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <uart_init_all+0x110>)
 8000f18:	228a      	movs	r2, #138	; 0x8a
 8000f1a:	811a      	strh	r2, [r3, #8]
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <uart_init_all+0x110>)
 8000f1e:	f242 020c 	movw	r2, #8204	; 0x200c
 8000f22:	819a      	strh	r2, [r3, #12]

    USART1->CR3 |= USART_CR3_DMAR;
 8000f24:	4a19      	ldr	r2, [pc, #100]	; (8000f8c <uart_init_all+0x10c>)
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <uart_init_all+0x10c>)
 8000f28:	8a9b      	ldrh	r3, [r3, #20]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	8293      	strh	r3, [r2, #20]

    DMA2_Stream2->CR &= ~DMA_SxCR_EN;
 8000f34:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <uart_init_all+0x114>)
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <uart_init_all+0x114>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f023 0301 	bic.w	r3, r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream2->CR & DMA_SxCR_EN);
 8000f40:	bf00      	nop
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <uart_init_all+0x114>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f9      	bne.n	8000f42 <uart_init_all+0xc2>

    DMA2_Stream2->PAR  = (uint32_t)&USART1->DR;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <uart_init_all+0x114>)
 8000f50:	4a11      	ldr	r2, [pc, #68]	; (8000f98 <uart_init_all+0x118>)
 8000f52:	609a      	str	r2, [r3, #8]
    DMA2_Stream2->M0AR = (uint32_t)m_uart1_rx_buffer;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <uart_init_all+0x114>)
 8000f56:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <uart_init_all+0x11c>)
 8000f58:	60da      	str	r2, [r3, #12]
    DMA2_Stream2->NDTR = UART1_RX_BUFFER_SIZE;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <uart_init_all+0x114>)
 8000f5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f60:	605a      	str	r2, [r3, #4]

    DMA2_Stream2->CR =
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <uart_init_all+0x114>)
 8000f64:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <uart_init_all+0x120>)
 8000f66:	601a      	str	r2, [r3, #0]
        (0 << 6) |
        (0 << 13) |
        (0 << 11) |
        (0 << 16);

    DMA2_Stream2->CR |= DMA_SxCR_EN;
 8000f68:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <uart_init_all+0x114>)
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <uart_init_all+0x114>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6013      	str	r3, [r2, #0]

    NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f74:	203a      	movs	r0, #58	; 0x3a
 8000f76:	f7ff ff69 	bl	8000e4c <NVIC_EnableIRQ>
    uart_enable_uart1_idle_irq();
 8000f7a:	f000 f98b 	bl	8001294 <uart_enable_uart1_idle_irq>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40011000 	.word	0x40011000
 8000f90:	40004400 	.word	0x40004400
 8000f94:	40026440 	.word	0x40026440
 8000f98:	40011004 	.word	0x40011004
 8000f9c:	2000077c 	.word	0x2000077c
 8000fa0:	08000500 	.word	0x08000500

08000fa4 <uart_log>:

void uart_log(const char* msg)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
    const char* p = msg;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	60fb      	str	r3, [r7, #12]
    while (*p) {
 8000fb0:	e00e      	b.n	8000fd0 <uart_log+0x2c>
        while (!(USART2->SR & USART_SR_TXE));
 8000fb2:	bf00      	nop
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <uart_log+0x6c>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f8      	beq.n	8000fb4 <uart_log+0x10>
        USART2->DR = *p++;
 8000fc2:	4913      	ldr	r1, [pc, #76]	; (8001010 <uart_log+0x6c>)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	60fa      	str	r2, [r7, #12]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	808b      	strh	r3, [r1, #4]
    while (*p) {
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1ec      	bne.n	8000fb2 <uart_log+0xe>
    }
    while (!(USART2->SR & USART_SR_TXE));
 8000fd8:	bf00      	nop
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <uart_log+0x6c>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0f8      	beq.n	8000fda <uart_log+0x36>
    USART2->DR = '\r';
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <uart_log+0x6c>)
 8000fea:	220d      	movs	r2, #13
 8000fec:	809a      	strh	r2, [r3, #4]
    while (!(USART2->SR & USART_SR_TXE));
 8000fee:	bf00      	nop
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <uart_log+0x6c>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f8      	beq.n	8000ff0 <uart_log+0x4c>
    USART2->DR = '\n';
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <uart_log+0x6c>)
 8001000:	220a      	movs	r2, #10
 8001002:	809a      	strh	r2, [r3, #4]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	40004400 	.word	0x40004400

08001014 <uart1_send_raw>:

void uart1_send_raw(const uint8_t* raw, uint32_t length)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < length; i++) {
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	e011      	b.n	8001048 <uart1_send_raw+0x34>
        while (!(USART1->SR & USART_SR_TXE));
 8001024:	bf00      	nop
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <uart1_send_raw+0x58>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	b29b      	uxth	r3, r3
 800102c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0f8      	beq.n	8001026 <uart1_send_raw+0x12>
        USART1->DR = raw[i];
 8001034:	490d      	ldr	r1, [pc, #52]	; (800106c <uart1_send_raw+0x58>)
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b29b      	uxth	r3, r3
 8001040:	808b      	strh	r3, [r1, #4]
    for (uint32_t i = 0; i < length; i++) {
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3301      	adds	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	d3e9      	bcc.n	8001024 <uart1_send_raw+0x10>
    }
    while (!(USART1->SR & USART_SR_TC));
 8001050:	bf00      	nop
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <uart1_send_raw+0x58>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	b29b      	uxth	r3, r3
 8001058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0f8      	beq.n	8001052 <uart1_send_raw+0x3e>
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	40011000 	.word	0x40011000

08001070 <gsm_hw_layer_uart_fill_rx>:

void gsm_hw_layer_uart_fill_rx(uint8_t *data, uint32_t length)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
    static uint8_t line_buf[UART_LINE_MAX_LEN];
    static uint16_t line_idx = 0;

    for (uint32_t i = 0; i < length; i++) {
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	e033      	b.n	80010e8 <gsm_hw_layer_uart_fill_rx+0x78>
        if (line_idx < UART_LINE_MAX_LEN - 1) {
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <gsm_hw_layer_uart_fill_rx+0x88>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	2b7e      	cmp	r3, #126	; 0x7e
 8001086:	d829      	bhi.n	80010dc <gsm_hw_layer_uart_fill_rx+0x6c>
            line_buf[line_idx++] = data[i];
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <gsm_hw_layer_uart_fill_rx+0x88>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	b291      	uxth	r1, r2
 8001090:	4a19      	ldr	r2, [pc, #100]	; (80010f8 <gsm_hw_layer_uart_fill_rx+0x88>)
 8001092:	8011      	strh	r1, [r2, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	781a      	ldrb	r2, [r3, #0]
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <gsm_hw_layer_uart_fill_rx+0x8c>)
 80010a0:	545a      	strb	r2, [r3, r1]
            if (data[i] == '\n' || data[i] == '\r') {
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b0a      	cmp	r3, #10
 80010ac:	d005      	beq.n	80010ba <gsm_hw_layer_uart_fill_rx+0x4a>
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b0d      	cmp	r3, #13
 80010b8:	d113      	bne.n	80010e2 <gsm_hw_layer_uart_fill_rx+0x72>
                if (line_idx > 1) {
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <gsm_hw_layer_uart_fill_rx+0x88>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d908      	bls.n	80010d4 <gsm_hw_layer_uart_fill_rx+0x64>
                    line_buf[line_idx] = 0;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <gsm_hw_layer_uart_fill_rx+0x88>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <gsm_hw_layer_uart_fill_rx+0x8c>)
 80010ca:	2100      	movs	r1, #0
 80010cc:	5499      	strb	r1, [r3, r2]
                    uart_line_queue_push((char*)line_buf);
 80010ce:	480b      	ldr	r0, [pc, #44]	; (80010fc <gsm_hw_layer_uart_fill_rx+0x8c>)
 80010d0:	f000 f938 	bl	8001344 <uart_line_queue_push>
                }
                line_idx = 0;
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <gsm_hw_layer_uart_fill_rx+0x88>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	801a      	strh	r2, [r3, #0]
 80010da:	e002      	b.n	80010e2 <gsm_hw_layer_uart_fill_rx+0x72>
            }
        } else {
            line_idx = 0;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <gsm_hw_layer_uart_fill_rx+0x88>)
 80010de:	2200      	movs	r2, #0
 80010e0:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++) {
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3301      	adds	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d3c7      	bcc.n	8001080 <gsm_hw_layer_uart_fill_rx+0x10>
        }
    }
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200000b2 	.word	0x200000b2
 80010fc:	200000b4 	.word	0x200000b4

08001100 <uart1_poll>:

void uart1_poll(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
    if (!rx_line_ready) {
 8001106:	4b40      	ldr	r3, [pc, #256]	; (8001208 <uart1_poll+0x108>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f083 0301 	eor.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d172      	bne.n	80011fc <uart1_poll+0xfc>
        return;
    }
    rx_line_ready = false;
 8001116:	4b3c      	ldr	r3, [pc, #240]	; (8001208 <uart1_poll+0x108>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]

    uint32_t pos = UART1_RX_BUFFER_SIZE - DMA2_Stream2->NDTR;
 800111c:	4b3b      	ldr	r3, [pc, #236]	; (800120c <uart1_poll+0x10c>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001124:	607b      	str	r3, [r7, #4]

    if (pos == m_old_uart1_dma_rx_pos) {
 8001126:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <uart1_poll+0x110>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	d067      	beq.n	8001200 <uart1_poll+0x100>
        return;
    }

    if (gsm_ppp_mode && ppp != NULL) {
 8001130:	4b38      	ldr	r3, [pc, #224]	; (8001214 <uart1_poll+0x114>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d02e      	beq.n	8001198 <uart1_poll+0x98>
 800113a:	4b37      	ldr	r3, [pc, #220]	; (8001218 <uart1_poll+0x118>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d02a      	beq.n	8001198 <uart1_poll+0x98>
        if (pos > m_old_uart1_dma_rx_pos) {
 8001142:	4b33      	ldr	r3, [pc, #204]	; (8001210 <uart1_poll+0x110>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	d90d      	bls.n	8001168 <uart1_poll+0x68>
            pppos_input(ppp, &m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], pos - m_old_uart1_dma_rx_pos);
 800114c:	4b32      	ldr	r3, [pc, #200]	; (8001218 <uart1_poll+0x118>)
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <uart1_poll+0x110>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a31      	ldr	r2, [pc, #196]	; (800121c <uart1_poll+0x11c>)
 8001156:	1899      	adds	r1, r3, r2
 8001158:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <uart1_poll+0x110>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	461a      	mov	r2, r3
 8001162:	f011 fc45 	bl	80129f0 <pppos_input>
        if (pos > m_old_uart1_dma_rx_pos) {
 8001166:	e03c      	b.n	80011e2 <uart1_poll+0xe2>
        } else {
            pppos_input(ppp, &m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], UART1_RX_BUFFER_SIZE - m_old_uart1_dma_rx_pos);
 8001168:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <uart1_poll+0x118>)
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	4b28      	ldr	r3, [pc, #160]	; (8001210 <uart1_poll+0x110>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a2a      	ldr	r2, [pc, #168]	; (800121c <uart1_poll+0x11c>)
 8001172:	1899      	adds	r1, r3, r2
 8001174:	4b26      	ldr	r3, [pc, #152]	; (8001210 <uart1_poll+0x110>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800117c:	461a      	mov	r2, r3
 800117e:	f011 fc37 	bl	80129f0 <pppos_input>
            if (pos > 0) {
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d02c      	beq.n	80011e2 <uart1_poll+0xe2>
                pppos_input(ppp, &m_uart1_rx_buffer[0], pos);
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <uart1_poll+0x118>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4923      	ldr	r1, [pc, #140]	; (800121c <uart1_poll+0x11c>)
 8001190:	4618      	mov	r0, r3
 8001192:	f011 fc2d 	bl	80129f0 <pppos_input>
        if (pos > m_old_uart1_dma_rx_pos) {
 8001196:	e024      	b.n	80011e2 <uart1_poll+0xe2>
            }
        }
    } else {
        if (pos > m_old_uart1_dma_rx_pos) {
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <uart1_poll+0x110>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d90b      	bls.n	80011ba <uart1_poll+0xba>
            gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], pos - m_old_uart1_dma_rx_pos);
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <uart1_poll+0x110>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a1d      	ldr	r2, [pc, #116]	; (800121c <uart1_poll+0x11c>)
 80011a8:	1898      	adds	r0, r3, r2
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <uart1_poll+0x110>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff ff5c 	bl	8001070 <gsm_hw_layer_uart_fill_rx>
 80011b8:	e014      	b.n	80011e4 <uart1_poll+0xe4>
        } else {
            gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], UART1_RX_BUFFER_SIZE - m_old_uart1_dma_rx_pos);
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <uart1_poll+0x110>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a17      	ldr	r2, [pc, #92]	; (800121c <uart1_poll+0x11c>)
 80011c0:	441a      	add	r2, r3
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <uart1_poll+0x110>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80011ca:	4619      	mov	r1, r3
 80011cc:	4610      	mov	r0, r2
 80011ce:	f7ff ff4f 	bl	8001070 <gsm_hw_layer_uart_fill_rx>
            if (pos > 0) {
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <uart1_poll+0xe4>
                gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[0], pos);
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	4810      	ldr	r0, [pc, #64]	; (800121c <uart1_poll+0x11c>)
 80011dc:	f7ff ff48 	bl	8001070 <gsm_hw_layer_uart_fill_rx>
 80011e0:	e000      	b.n	80011e4 <uart1_poll+0xe4>
        if (pos > m_old_uart1_dma_rx_pos) {
 80011e2:	bf00      	nop
            }
        }
    }
    m_old_uart1_dma_rx_pos = pos;
 80011e4:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <uart1_poll+0x110>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
    if (m_old_uart1_dma_rx_pos == UART1_RX_BUFFER_SIZE)
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <uart1_poll+0x110>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011f2:	d106      	bne.n	8001202 <uart1_poll+0x102>
        m_old_uart1_dma_rx_pos = 0;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <uart1_poll+0x110>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e002      	b.n	8001202 <uart1_poll+0x102>
        return;
 80011fc:	bf00      	nop
 80011fe:	e000      	b.n	8001202 <uart1_poll+0x102>
        return;
 8001200:	bf00      	nop
}
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200000b0 	.word	0x200000b0
 800120c:	40026440 	.word	0x40026440
 8001210:	200000ac 	.word	0x200000ac
 8001214:	200005f8 	.word	0x200005f8
 8001218:	200005f4 	.word	0x200005f4
 800121c:	2000077c 	.word	0x2000077c

08001220 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
    if (DMA2->LISR & DMA_LISR_TCIF2) {
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <DMA2_Stream2_IRQHandler+0x2c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d008      	beq.n	8001242 <DMA2_Stream2_IRQHandler+0x22>
        DMA2->LIFCR |= DMA_LIFCR_CTCIF2;
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <DMA2_Stream2_IRQHandler+0x2c>)
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <DMA2_Stream2_IRQHandler+0x2c>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800123a:	6093      	str	r3, [r2, #8]
        rx_line_ready = true;
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <DMA2_Stream2_IRQHandler+0x30>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
    }
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	40026400 	.word	0x40026400
 8001250:	200000b0 	.word	0x200000b0

08001254 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_IDLE) {
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <USART1_IRQHandler+0x38>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	b29b      	uxth	r3, r3
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00b      	beq.n	8001280 <USART1_IRQHandler+0x2c>
        volatile uint32_t tmp;
        tmp = USART1->SR;
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <USART1_IRQHandler+0x38>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	b29b      	uxth	r3, r3
 800126e:	607b      	str	r3, [r7, #4]
        tmp = USART1->DR;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <USART1_IRQHandler+0x38>)
 8001272:	889b      	ldrh	r3, [r3, #4]
 8001274:	b29b      	uxth	r3, r3
 8001276:	607b      	str	r3, [r7, #4]
        (void)tmp;
 8001278:	687b      	ldr	r3, [r7, #4]
        rx_line_ready = true;
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <USART1_IRQHandler+0x3c>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
    }
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	40011000 	.word	0x40011000
 8001290:	200000b0 	.word	0x200000b0

08001294 <uart_enable_uart1_idle_irq>:

void uart_enable_uart1_idle_irq(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
    USART1->CR1 |= USART_CR1_IDLEIE;
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <uart_enable_uart1_idle_irq+0x20>)
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <uart_enable_uart1_idle_irq+0x20>)
 800129c:	899b      	ldrh	r3, [r3, #12]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	f043 0310 	orr.w	r3, r3, #16
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	8193      	strh	r3, [r2, #12]
    NVIC_EnableIRQ(USART1_IRQn);
 80012a8:	2025      	movs	r0, #37	; 0x25
 80012aa:	f7ff fdcf 	bl	8000e4c <NVIC_EnableIRQ>
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40011000 	.word	0x40011000

080012b8 <restart_dma2_stream2>:
    NVIC_DisableIRQ(USART1_IRQn);
    uart_log("UART1 IRQ disabled");
}

void restart_dma2_stream2(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
    DMA2_Stream2->CR &= ~DMA_SxCR_EN;
 80012bc:	4a12      	ldr	r2, [pc, #72]	; (8001308 <restart_dma2_stream2+0x50>)
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <restart_dma2_stream2+0x50>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f023 0301 	bic.w	r3, r3, #1
 80012c6:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream2->CR & DMA_SxCR_EN);
 80012c8:	bf00      	nop
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <restart_dma2_stream2+0x50>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f9      	bne.n	80012ca <restart_dma2_stream2+0x12>

    DMA2_Stream2->PAR  = (uint32_t)&USART1->DR;
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <restart_dma2_stream2+0x50>)
 80012d8:	4a0c      	ldr	r2, [pc, #48]	; (800130c <restart_dma2_stream2+0x54>)
 80012da:	609a      	str	r2, [r3, #8]
    DMA2_Stream2->M0AR = (uint32_t)m_uart1_rx_buffer;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <restart_dma2_stream2+0x50>)
 80012de:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <restart_dma2_stream2+0x58>)
 80012e0:	60da      	str	r2, [r3, #12]
    DMA2_Stream2->NDTR = UART1_RX_BUFFER_SIZE;
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <restart_dma2_stream2+0x50>)
 80012e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e8:	605a      	str	r2, [r3, #4]

    DMA2_Stream2->CR =
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <restart_dma2_stream2+0x50>)
 80012ec:	4a09      	ldr	r2, [pc, #36]	; (8001314 <restart_dma2_stream2+0x5c>)
 80012ee:	601a      	str	r2, [r3, #0]
        (0 << 6) |
        (0 << 13) |
        (0 << 11) |
        (0 << 16);

    DMA2_Stream2->CR |= DMA_SxCR_EN;
 80012f0:	4a05      	ldr	r2, [pc, #20]	; (8001308 <restart_dma2_stream2+0x50>)
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <restart_dma2_stream2+0x50>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40026440 	.word	0x40026440
 800130c:	40011004 	.word	0x40011004
 8001310:	2000077c 	.word	0x2000077c
 8001314:	08000500 	.word	0x08000500

08001318 <uart_line_queue_init>:
static char uart_line_queue[UART_LINE_QUEUE_SIZE][UART_LINE_MAX_LEN];
static volatile uint8_t uart_line_queue_head = 0;
static volatile uint8_t uart_line_queue_tail = 0;
static volatile uint8_t uart_line_queue_count = 0;

void uart_line_queue_init(void) {
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
    uart_line_queue_head = 0;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <uart_line_queue_init+0x20>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
    uart_line_queue_tail = 0;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <uart_line_queue_init+0x24>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count = 0;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <uart_line_queue_init+0x28>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	20000534 	.word	0x20000534
 800133c:	20000535 	.word	0x20000535
 8001340:	20000536 	.word	0x20000536

08001344 <uart_line_queue_push>:

// Push a line into the queue, returns true if success, false if full
bool uart_line_queue_push(const char *line) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
    if (uart_line_queue_count >= UART_LINE_QUEUE_SIZE) return false;
 800134c:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <uart_line_queue_push+0x74>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b07      	cmp	r3, #7
 8001354:	d901      	bls.n	800135a <uart_line_queue_push+0x16>
 8001356:	2300      	movs	r3, #0
 8001358:	e029      	b.n	80013ae <uart_line_queue_push+0x6a>
    strncpy(uart_line_queue[uart_line_queue_head], line, UART_LINE_MAX_LEN - 1);
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <uart_line_queue_push+0x78>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	01db      	lsls	r3, r3, #7
 8001362:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <uart_line_queue_push+0x7c>)
 8001364:	4413      	add	r3, r2
 8001366:	227f      	movs	r2, #127	; 0x7f
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	4618      	mov	r0, r3
 800136c:	f012 ffe7 	bl	801433e <strncpy>
    uart_line_queue[uart_line_queue_head][UART_LINE_MAX_LEN - 1] = '\0';
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <uart_line_queue_push+0x78>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <uart_line_queue_push+0x7c>)
 8001378:	01db      	lsls	r3, r3, #7
 800137a:	4413      	add	r3, r2
 800137c:	337f      	adds	r3, #127	; 0x7f
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
    uart_line_queue_head = (uart_line_queue_head + 1) % UART_LINE_QUEUE_SIZE;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <uart_line_queue_push+0x78>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	3301      	adds	r3, #1
 800138a:	425a      	negs	r2, r3
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	f002 0207 	and.w	r2, r2, #7
 8001394:	bf58      	it	pl
 8001396:	4253      	negpl	r3, r2
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <uart_line_queue_push+0x78>)
 800139c:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count++;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <uart_line_queue_push+0x74>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	3301      	adds	r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <uart_line_queue_push+0x74>)
 80013aa:	701a      	strb	r2, [r3, #0]
    return true;
 80013ac:	2301      	movs	r3, #1
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000536 	.word	0x20000536
 80013bc:	20000534 	.word	0x20000534
 80013c0:	20000134 	.word	0x20000134

080013c4 <uart_line_queue_pop>:

// Pop a line from the queue, returns true if a line was available
bool uart_line_queue_pop(char *out_line) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
    if (uart_line_queue_count == 0) return false;
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <uart_line_queue_pop+0x60>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <uart_line_queue_pop+0x16>
 80013d6:	2300      	movs	r3, #0
 80013d8:	e020      	b.n	800141c <uart_line_queue_pop+0x58>
    strncpy(out_line, uart_line_queue[uart_line_queue_tail], UART_LINE_MAX_LEN);
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <uart_line_queue_pop+0x64>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	01db      	lsls	r3, r3, #7
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <uart_line_queue_pop+0x68>)
 80013e4:	4413      	add	r3, r2
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	4619      	mov	r1, r3
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f012 ffa7 	bl	801433e <strncpy>
    uart_line_queue_tail = (uart_line_queue_tail + 1) % UART_LINE_QUEUE_SIZE;
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <uart_line_queue_pop+0x64>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	3301      	adds	r3, #1
 80013f8:	425a      	negs	r2, r3
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	f002 0207 	and.w	r2, r2, #7
 8001402:	bf58      	it	pl
 8001404:	4253      	negpl	r3, r2
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <uart_line_queue_pop+0x64>)
 800140a:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count--;
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <uart_line_queue_pop+0x60>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	3b01      	subs	r3, #1
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4b03      	ldr	r3, [pc, #12]	; (8001424 <uart_line_queue_pop+0x60>)
 8001418:	701a      	strb	r2, [r3, #0]
    return true;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000536 	.word	0x20000536
 8001428:	20000535 	.word	0x20000535
 800142c:	20000134 	.word	0x20000134

08001430 <main>:
#include "hardware/led.h"

device_state_t current_device_state = DEVICE_STATE_BOOTING_GSM;
swich_state_t switch_state = swich_off;
int main(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
    hardware_init();
 8001436:	f7ff fbbd 	bl	8000bb4 <hardware_init>
    uart_log("UART2 log test");
 800143a:	4814      	ldr	r0, [pc, #80]	; (800148c <main+0x5c>)
 800143c:	f7ff fdb2 	bl	8000fa4 <uart_log>
    uint32_t start_tick = timer2_get_tick();
 8001440:	f7ff fce4 	bl	8000e0c <timer2_get_tick>
 8001444:	6078      	str	r0, [r7, #4]
    while (timer2_get_tick() - start_tick < 15000) {
 8001446:	f7ff fce1 	bl	8000e0c <timer2_get_tick>
 800144a:	4602      	mov	r2, r0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001454:	4293      	cmp	r3, r2
 8001456:	bf94      	ite	ls
 8001458:	2301      	movls	r3, #1
 800145a:	2300      	movhi	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <main+0x3e>
        led_update_by_device_state();
 8001462:	f000 f9cb 	bl	80017fc <led_update_by_device_state>
        delay_ms(10);
 8001466:	200a      	movs	r0, #10
 8001468:	f7ff fcdc 	bl	8000e24 <delay_ms>
    while (timer2_get_tick() - start_tick < 15000) {
 800146c:	e7eb      	b.n	8001446 <main+0x16>
    }
    ppp_connection_init();
 800146e:	f000 fe73 	bl	8002158 <ppp_connection_init>
    //led_stt_switch_set_state(1); 
    while (1) {      
        led_update_by_device_state();
 8001472:	f000 f9c3 	bl	80017fc <led_update_by_device_state>
        led_stt_switch_control();
 8001476:	f000 f9ff 	bl	8001878 <led_stt_switch_control>
        button_logic_update();
 800147a:	f000 f81d 	bl	80014b8 <button_logic_update>
        uart1_poll();
 800147e:	f7ff fe3f 	bl	8001100 <uart1_poll>
        send_all_gsm_commands_with_check();
 8001482:	f7ff f94d 	bl	8000720 <send_all_gsm_commands_with_check>
        ppp_connection_poll();
 8001486:	f000 fe95 	bl	80021b4 <ppp_connection_poll>
        led_update_by_device_state();
 800148a:	e7f2      	b.n	8001472 <main+0x42>
 800148c:	08014c5c 	.word	0x08014c5c

08001490 <toggle_switch_state>:
} button_state_t;

static button_state_t button_state = BUTTON_IDLE;
static uint32_t button_press_time = 0;

static void toggle_switch_state(void) {
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
    if (switch_state == swich_on) {
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <toggle_switch_state+0x24>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d103      	bne.n	80014a4 <toggle_switch_state+0x14>
        switch_state = swich_off;
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <toggle_switch_state+0x24>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
    } else {
        switch_state = swich_on;
    }
}
 80014a2:	e002      	b.n	80014aa <toggle_switch_state+0x1a>
        switch_state = swich_on;
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <toggle_switch_state+0x24>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	20000538 	.word	0x20000538

080014b8 <button_logic_update>:

void button_logic_update(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
    uint32_t now = timer2_get_tick();
 80014be:	f7ff fca5 	bl	8000e0c <timer2_get_tick>
 80014c2:	6078      	str	r0, [r7, #4]

    switch (button_state)
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <button_logic_update+0x94>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <button_logic_update+0x1a>
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d00f      	beq.n	80014f0 <button_logic_update+0x38>

                button_state = BUTTON_IDLE;
            }
            break;
    }
}
 80014d0:	e038      	b.n	8001544 <button_logic_update+0x8c>
            if (g_button_pressed_flag)
 80014d2:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <button_logic_update+0x98>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d030      	beq.n	800153e <button_logic_update+0x86>
                g_button_pressed_flag = 0;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <button_logic_update+0x98>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
                button_press_time = now;
 80014e2:	4a1c      	ldr	r2, [pc, #112]	; (8001554 <button_logic_update+0x9c>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6013      	str	r3, [r2, #0]
                button_state = BUTTON_PRESSED_WAIT_RELEASE;
 80014e8:	4b18      	ldr	r3, [pc, #96]	; (800154c <button_logic_update+0x94>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
            break;
 80014ee:	e026      	b.n	800153e <button_logic_update+0x86>
            if (g_button_released_flag)
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <button_logic_update+0xa0>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d023      	beq.n	8001542 <button_logic_update+0x8a>
                g_button_released_flag = 0;
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <button_logic_update+0xa0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
                uint32_t duration = now - button_press_time;
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <button_logic_update+0x9c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	603b      	str	r3, [r7, #0]
                if (duration < 5000) {
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001510:	4293      	cmp	r3, r2
 8001512:	d804      	bhi.n	800151e <button_logic_update+0x66>
                    toggle_switch_state();
 8001514:	f7ff ffbc 	bl	8001490 <toggle_switch_state>
                    mqtt_publish_switch_state();
 8001518:	f000 fb6e 	bl	8001bf8 <mqtt_publish_switch_state>
 800151c:	e00b      	b.n	8001536 <button_logic_update+0x7e>
                else if (duration < 10000) {
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	f242 720f 	movw	r2, #9999	; 0x270f
 8001524:	4293      	cmp	r3, r2
 8001526:	d803      	bhi.n	8001530 <button_logic_update+0x78>
                    uart_log("5<s < 10s");
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <button_logic_update+0xa4>)
 800152a:	f7ff fd3b 	bl	8000fa4 <uart_log>
 800152e:	e002      	b.n	8001536 <button_logic_update+0x7e>
                    uart_log("10s");
 8001530:	480b      	ldr	r0, [pc, #44]	; (8001560 <button_logic_update+0xa8>)
 8001532:	f7ff fd37 	bl	8000fa4 <uart_log>
                button_state = BUTTON_IDLE;
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <button_logic_update+0x94>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
            break;
 800153c:	e001      	b.n	8001542 <button_logic_update+0x8a>
            break;
 800153e:	bf00      	nop
 8001540:	e000      	b.n	8001544 <button_logic_update+0x8c>
            break;
 8001542:	bf00      	nop
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000539 	.word	0x20000539
 8001550:	200000a0 	.word	0x200000a0
 8001554:	2000053c 	.word	0x2000053c
 8001558:	200000a1 	.word	0x200000a1
 800155c:	08014c6c 	.word	0x08014c6c
 8001560:	08014c78 	.word	0x08014c78

08001564 <led_4g_blink_200_200>:
#include "middle/led_logic.h"
#include "hardware/led.h"
#include "hardware/timer.h"
#include "main.h"

void led_4g_blink_200_200(void) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t led_state = 0;
    uint32_t now = timer2_get_tick();
 800156a:	f7ff fc4f 	bl	8000e0c <timer2_get_tick>
 800156e:	6078      	str	r0, [r7, #4]

    if (now < last_tick) last_tick = now;
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <led_4g_blink_200_200+0x68>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	429a      	cmp	r2, r3
 8001578:	d202      	bcs.n	8001580 <led_4g_blink_200_200+0x1c>
 800157a:	4a14      	ldr	r2, [pc, #80]	; (80015cc <led_4g_blink_200_200+0x68>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6013      	str	r3, [r2, #0]

    if (led_state) {
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <led_4g_blink_200_200+0x6c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00e      	beq.n	80015a6 <led_4g_blink_200_200+0x42>
        if (now - last_tick >= 200) {
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <led_4g_blink_200_200+0x68>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2bc7      	cmp	r3, #199	; 0xc7
 8001592:	d916      	bls.n	80015c2 <led_4g_blink_200_200+0x5e>
            led_4g_off();
 8001594:	f7ff fba4 	bl	8000ce0 <led_4g_off>
            led_state = 0;
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <led_4g_blink_200_200+0x6c>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
            last_tick = now;
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <led_4g_blink_200_200+0x68>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6013      	str	r3, [r2, #0]
            led_4g_on();
            led_state = 1;
            last_tick = now;
        }
    }
}
 80015a4:	e00d      	b.n	80015c2 <led_4g_blink_200_200+0x5e>
        if (now - last_tick >= 200) {
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <led_4g_blink_200_200+0x68>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2bc7      	cmp	r3, #199	; 0xc7
 80015b0:	d907      	bls.n	80015c2 <led_4g_blink_200_200+0x5e>
            led_4g_on();
 80015b2:	f7ff fb89 	bl	8000cc8 <led_4g_on>
            led_state = 1;
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <led_4g_blink_200_200+0x6c>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
            last_tick = now;
 80015bc:	4a03      	ldr	r2, [pc, #12]	; (80015cc <led_4g_blink_200_200+0x68>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000540 	.word	0x20000540
 80015d0:	20000544 	.word	0x20000544

080015d4 <led_4g_blink_200_500_200_2000>:

void led_4g_blink_200_500_200_2000(void) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t phase = 0;
    uint32_t now = timer2_get_tick();
 80015da:	f7ff fc17 	bl	8000e0c <timer2_get_tick>
 80015de:	6078      	str	r0, [r7, #4]

    if (now < last_tick) {
 80015e0:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <led_4g_blink_200_500_200_2000+0xd4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d205      	bcs.n	80015f6 <led_4g_blink_200_500_200_2000+0x22>
        last_tick = now;
 80015ea:	4a2f      	ldr	r2, [pc, #188]	; (80016a8 <led_4g_blink_200_500_200_2000+0xd4>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6013      	str	r3, [r2, #0]
        phase = 0;
 80015f0:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <led_4g_blink_200_500_200_2000+0xd8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
    }

    switch (phase) {
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <led_4g_blink_200_500_200_2000+0xd8>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d84f      	bhi.n	800169e <led_4g_blink_200_500_200_2000+0xca>
 80015fe:	a201      	add	r2, pc, #4	; (adr r2, 8001604 <led_4g_blink_200_500_200_2000+0x30>)
 8001600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001604:	08001615 	.word	0x08001615
 8001608:	08001633 	.word	0x08001633
 800160c:	08001653 	.word	0x08001653
 8001610:	08001671 	.word	0x08001671
        case 0:
            led_4g_on();
 8001614:	f7ff fb58 	bl	8000cc8 <led_4g_on>
            if (now - last_tick >= 200) {
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <led_4g_blink_200_500_200_2000+0xd4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2bc7      	cmp	r3, #199	; 0xc7
 8001622:	d935      	bls.n	8001690 <led_4g_blink_200_500_200_2000+0xbc>
                last_tick = now;
 8001624:	4a20      	ldr	r2, [pc, #128]	; (80016a8 <led_4g_blink_200_500_200_2000+0xd4>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
                phase = 1;
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <led_4g_blink_200_500_200_2000+0xd8>)
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001630:	e02e      	b.n	8001690 <led_4g_blink_200_500_200_2000+0xbc>
        case 1:
            led_4g_off();
 8001632:	f7ff fb55 	bl	8000ce0 <led_4g_off>
            if (now - last_tick >= 500) {
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <led_4g_blink_200_500_200_2000+0xd4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001642:	d327      	bcc.n	8001694 <led_4g_blink_200_500_200_2000+0xc0>
                last_tick = now;
 8001644:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <led_4g_blink_200_500_200_2000+0xd4>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6013      	str	r3, [r2, #0]
                phase = 2;
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <led_4g_blink_200_500_200_2000+0xd8>)
 800164c:	2202      	movs	r2, #2
 800164e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001650:	e020      	b.n	8001694 <led_4g_blink_200_500_200_2000+0xc0>
        case 2:
            led_4g_on();
 8001652:	f7ff fb39 	bl	8000cc8 <led_4g_on>
            if (now - last_tick >= 200) {
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <led_4g_blink_200_500_200_2000+0xd4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2bc7      	cmp	r3, #199	; 0xc7
 8001660:	d91a      	bls.n	8001698 <led_4g_blink_200_500_200_2000+0xc4>
                last_tick = now;
 8001662:	4a11      	ldr	r2, [pc, #68]	; (80016a8 <led_4g_blink_200_500_200_2000+0xd4>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6013      	str	r3, [r2, #0]
                phase = 3;
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <led_4g_blink_200_500_200_2000+0xd8>)
 800166a:	2203      	movs	r2, #3
 800166c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800166e:	e013      	b.n	8001698 <led_4g_blink_200_500_200_2000+0xc4>
        case 3:
            led_4g_off();
 8001670:	f7ff fb36 	bl	8000ce0 <led_4g_off>
            if (now - last_tick >= 2000) {
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <led_4g_blink_200_500_200_2000+0xd4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001680:	d30c      	bcc.n	800169c <led_4g_blink_200_500_200_2000+0xc8>
                last_tick = now;
 8001682:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <led_4g_blink_200_500_200_2000+0xd4>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6013      	str	r3, [r2, #0]
                phase = 0;
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <led_4g_blink_200_500_200_2000+0xd8>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800168e:	e005      	b.n	800169c <led_4g_blink_200_500_200_2000+0xc8>
            break;
 8001690:	bf00      	nop
 8001692:	e004      	b.n	800169e <led_4g_blink_200_500_200_2000+0xca>
            break;
 8001694:	bf00      	nop
 8001696:	e002      	b.n	800169e <led_4g_blink_200_500_200_2000+0xca>
            break;
 8001698:	bf00      	nop
 800169a:	e000      	b.n	800169e <led_4g_blink_200_500_200_2000+0xca>
            break;
 800169c:	bf00      	nop
    }
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000548 	.word	0x20000548
 80016ac:	2000054c 	.word	0x2000054c

080016b0 <led_stt_blink_200_200>:

void led_stt_blink_200_200(void) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t led_state = 0;
    uint32_t now = timer2_get_tick();
 80016b6:	f7ff fba9 	bl	8000e0c <timer2_get_tick>
 80016ba:	6078      	str	r0, [r7, #4]

    if (now < last_tick) last_tick = now;
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <led_stt_blink_200_200+0x68>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d202      	bcs.n	80016cc <led_stt_blink_200_200+0x1c>
 80016c6:	4a14      	ldr	r2, [pc, #80]	; (8001718 <led_stt_blink_200_200+0x68>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6013      	str	r3, [r2, #0]

    if (led_state) {
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <led_stt_blink_200_200+0x6c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00e      	beq.n	80016f2 <led_stt_blink_200_200+0x42>
        if (now - last_tick >= 200) {
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <led_stt_blink_200_200+0x68>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2bc7      	cmp	r3, #199	; 0xc7
 80016de:	d916      	bls.n	800170e <led_stt_blink_200_200+0x5e>
            led_stt_off();
 80016e0:	f7ff fb14 	bl	8000d0c <led_stt_off>
            led_state = 0;
 80016e4:	4b0d      	ldr	r3, [pc, #52]	; (800171c <led_stt_blink_200_200+0x6c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
            last_tick = now;
 80016ea:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <led_stt_blink_200_200+0x68>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6013      	str	r3, [r2, #0]
            led_stt_on();
            led_state = 1;
            last_tick = now;
        }
    }
}
 80016f0:	e00d      	b.n	800170e <led_stt_blink_200_200+0x5e>
        if (now - last_tick >= 200) {
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <led_stt_blink_200_200+0x68>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2bc7      	cmp	r3, #199	; 0xc7
 80016fc:	d907      	bls.n	800170e <led_stt_blink_200_200+0x5e>
            led_stt_on();
 80016fe:	f7ff fafb 	bl	8000cf8 <led_stt_on>
            led_state = 1;
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <led_stt_blink_200_200+0x6c>)
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
            last_tick = now;
 8001708:	4a03      	ldr	r2, [pc, #12]	; (8001718 <led_stt_blink_200_200+0x68>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000550 	.word	0x20000550
 800171c:	20000554 	.word	0x20000554

08001720 <led_stt_blink_200_500_200_2000>:

void led_stt_blink_200_500_200_2000(void) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t phase = 0;
    uint32_t now = timer2_get_tick();
 8001726:	f7ff fb71 	bl	8000e0c <timer2_get_tick>
 800172a:	6078      	str	r0, [r7, #4]

    if (now < last_tick) {
 800172c:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <led_stt_blink_200_500_200_2000+0xd4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	429a      	cmp	r2, r3
 8001734:	d205      	bcs.n	8001742 <led_stt_blink_200_500_200_2000+0x22>
        last_tick = now;
 8001736:	4a2f      	ldr	r2, [pc, #188]	; (80017f4 <led_stt_blink_200_500_200_2000+0xd4>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6013      	str	r3, [r2, #0]
        phase = 0;
 800173c:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <led_stt_blink_200_500_200_2000+0xd8>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
    }

    switch (phase) {
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <led_stt_blink_200_500_200_2000+0xd8>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d84f      	bhi.n	80017ea <led_stt_blink_200_500_200_2000+0xca>
 800174a:	a201      	add	r2, pc, #4	; (adr r2, 8001750 <led_stt_blink_200_500_200_2000+0x30>)
 800174c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001750:	08001761 	.word	0x08001761
 8001754:	0800177f 	.word	0x0800177f
 8001758:	0800179f 	.word	0x0800179f
 800175c:	080017bd 	.word	0x080017bd
        case 0:
            led_stt_on();
 8001760:	f7ff faca 	bl	8000cf8 <led_stt_on>
            if (now - last_tick >= 200) {
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <led_stt_blink_200_500_200_2000+0xd4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2bc7      	cmp	r3, #199	; 0xc7
 800176e:	d935      	bls.n	80017dc <led_stt_blink_200_500_200_2000+0xbc>
                last_tick = now;
 8001770:	4a20      	ldr	r2, [pc, #128]	; (80017f4 <led_stt_blink_200_500_200_2000+0xd4>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
                phase = 1;
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <led_stt_blink_200_500_200_2000+0xd8>)
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800177c:	e02e      	b.n	80017dc <led_stt_blink_200_500_200_2000+0xbc>
        case 1:
            led_stt_off();
 800177e:	f7ff fac5 	bl	8000d0c <led_stt_off>
            if (now - last_tick >= 500) {
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <led_stt_blink_200_500_200_2000+0xd4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800178e:	d327      	bcc.n	80017e0 <led_stt_blink_200_500_200_2000+0xc0>
                last_tick = now;
 8001790:	4a18      	ldr	r2, [pc, #96]	; (80017f4 <led_stt_blink_200_500_200_2000+0xd4>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
                phase = 2;
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <led_stt_blink_200_500_200_2000+0xd8>)
 8001798:	2202      	movs	r2, #2
 800179a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800179c:	e020      	b.n	80017e0 <led_stt_blink_200_500_200_2000+0xc0>
        case 2:
            led_stt_on();
 800179e:	f7ff faab 	bl	8000cf8 <led_stt_on>
            if (now - last_tick >= 200) {
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <led_stt_blink_200_500_200_2000+0xd4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2bc7      	cmp	r3, #199	; 0xc7
 80017ac:	d91a      	bls.n	80017e4 <led_stt_blink_200_500_200_2000+0xc4>
                last_tick = now;
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <led_stt_blink_200_500_200_2000+0xd4>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6013      	str	r3, [r2, #0]
                phase = 3;
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <led_stt_blink_200_500_200_2000+0xd8>)
 80017b6:	2203      	movs	r2, #3
 80017b8:	701a      	strb	r2, [r3, #0]
            }
            break;
 80017ba:	e013      	b.n	80017e4 <led_stt_blink_200_500_200_2000+0xc4>
        case 3:
            led_stt_off();
 80017bc:	f7ff faa6 	bl	8000d0c <led_stt_off>
            if (now - last_tick >= 2000) {
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <led_stt_blink_200_500_200_2000+0xd4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017cc:	d30c      	bcc.n	80017e8 <led_stt_blink_200_500_200_2000+0xc8>
                last_tick = now;
 80017ce:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <led_stt_blink_200_500_200_2000+0xd4>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6013      	str	r3, [r2, #0]
                phase = 0;
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <led_stt_blink_200_500_200_2000+0xd8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
            }
            break;
 80017da:	e005      	b.n	80017e8 <led_stt_blink_200_500_200_2000+0xc8>
            break;
 80017dc:	bf00      	nop
 80017de:	e004      	b.n	80017ea <led_stt_blink_200_500_200_2000+0xca>
            break;
 80017e0:	bf00      	nop
 80017e2:	e002      	b.n	80017ea <led_stt_blink_200_500_200_2000+0xca>
            break;
 80017e4:	bf00      	nop
 80017e6:	e000      	b.n	80017ea <led_stt_blink_200_500_200_2000+0xca>
            break;
 80017e8:	bf00      	nop
    }
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000558 	.word	0x20000558
 80017f8:	2000055c 	.word	0x2000055c

080017fc <led_update_by_device_state>:

void led_update_by_device_state(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
    switch (current_device_state) {
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <led_update_by_device_state+0x78>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b05      	cmp	r3, #5
 8001806:	d82d      	bhi.n	8001864 <led_update_by_device_state+0x68>
 8001808:	a201      	add	r2, pc, #4	; (adr r2, 8001810 <led_update_by_device_state+0x14>)
 800180a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180e:	bf00      	nop
 8001810:	08001829 	.word	0x08001829
 8001814:	08001833 	.word	0x08001833
 8001818:	0800183d 	.word	0x0800183d
 800181c:	08001847 	.word	0x08001847
 8001820:	08001851 	.word	0x08001851
 8001824:	0800185b 	.word	0x0800185b
        case DEVICE_STATE_BOOTING_GSM:
            led_4g_blink_200_200();
 8001828:	f7ff fe9c 	bl	8001564 <led_4g_blink_200_200>
            led_stt_off();
 800182c:	f7ff fa6e 	bl	8000d0c <led_stt_off>
            break;
 8001830:	e01d      	b.n	800186e <led_update_by_device_state+0x72>

        case DEVICE_STATE_GSM_READY:
            led_4g_on();
 8001832:	f7ff fa49 	bl	8000cc8 <led_4g_on>
            led_stt_off();
 8001836:	f7ff fa69 	bl	8000d0c <led_stt_off>
            break;
 800183a:	e018      	b.n	800186e <led_update_by_device_state+0x72>

        case DEVICE_STATE_GSM_ERROR:
            led_4g_blink_200_500_200_2000();
 800183c:	f7ff feca 	bl	80015d4 <led_4g_blink_200_500_200_2000>
            led_stt_off();
 8001840:	f7ff fa64 	bl	8000d0c <led_stt_off>
            break;
 8001844:	e013      	b.n	800186e <led_update_by_device_state+0x72>

        case DEVICE_STATE_BOOTING_DEVICE:
            led_stt_blink_200_200();
 8001846:	f7ff ff33 	bl	80016b0 <led_stt_blink_200_200>
            led_4g_on();
 800184a:	f7ff fa3d 	bl	8000cc8 <led_4g_on>
            break;
 800184e:	e00e      	b.n	800186e <led_update_by_device_state+0x72>

        case DEVICE_STATE_DEVICE_READY:
            led_stt_on();
 8001850:	f7ff fa52 	bl	8000cf8 <led_stt_on>
            led_4g_on();
 8001854:	f7ff fa38 	bl	8000cc8 <led_4g_on>
            break;
 8001858:	e009      	b.n	800186e <led_update_by_device_state+0x72>

        case DEVICE_STATE_DEVICE_ERROR:
            led_stt_blink_200_500_200_2000();
 800185a:	f7ff ff61 	bl	8001720 <led_stt_blink_200_500_200_2000>
            led_4g_on();
 800185e:	f7ff fa33 	bl	8000cc8 <led_4g_on>
            break;
 8001862:	e004      	b.n	800186e <led_update_by_device_state+0x72>
        default:
            led_4g_off();
 8001864:	f7ff fa3c 	bl	8000ce0 <led_4g_off>
            led_stt_off();
 8001868:	f7ff fa50 	bl	8000d0c <led_stt_off>
            break;
 800186c:	bf00      	nop
    }
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000537 	.word	0x20000537

08001878 <led_stt_switch_control>:
//         led_4g_on();
//     } else {
//         led_4g_off();
//     }
// }
void led_stt_switch_control(void) {
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
    if (switch_state == swich_on) {
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <led_stt_switch_control+0x1c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d102      	bne.n	800188a <led_stt_switch_control+0x12>
        led_stt_switch_on();
 8001884:	f7ff fa4c 	bl	8000d20 <led_stt_switch_on>
    } else {
        led_stt_switch_off();
    }
}
 8001888:	e001      	b.n	800188e <led_stt_switch_control+0x16>
        led_stt_switch_off();
 800188a:	f7ff fa53 	bl	8000d34 <led_stt_switch_off>
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000538 	.word	0x20000538

08001898 <mqtt_try_reconnect>:
static int mqtt_reconnect_attempts = 0;
#define MQTT_MAX_RECONNECT_ATTEMPTS 10

static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status);

static void mqtt_try_reconnect(void) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af02      	add	r7, sp, #8
    if (mqtt_reconnect_attempts < MQTT_MAX_RECONNECT_ATTEMPTS) {
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <mqtt_try_reconnect+0x54>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b09      	cmp	r3, #9
 80018a4:	dc18      	bgt.n	80018d8 <mqtt_try_reconnect+0x40>
        mqtt_reconnect_attempts++;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <mqtt_try_reconnect+0x54>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <mqtt_try_reconnect+0x54>)
 80018ae:	6013      	str	r3, [r2, #0]
        uart_log("MQTT reconnecting...");
 80018b0:	480f      	ldr	r0, [pc, #60]	; (80018f0 <mqtt_try_reconnect+0x58>)
 80018b2:	f7ff fb77 	bl	8000fa4 <uart_log>
        delay_ms(2000); 
 80018b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018ba:	f7ff fab3 	bl	8000e24 <delay_ms>
        mqtt_client_connect(mqtt_client,
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <mqtt_try_reconnect+0x5c>)
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <mqtt_try_reconnect+0x60>)
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <mqtt_try_reconnect+0x60>)
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <mqtt_try_reconnect+0x64>)
 80018cc:	f240 725b 	movw	r2, #1883	; 0x75b
 80018d0:	490b      	ldr	r1, [pc, #44]	; (8001900 <mqtt_try_reconnect+0x68>)
 80018d2:	f002 f8b3 	bl	8003a3c <mqtt_client_connect>
            &mqtt_client_info);
    } else {
        uart_log("MQTT reconnect failed too many times!");
        current_device_state = DEVICE_STATE_DEVICE_ERROR;
    }
}
 80018d6:	e005      	b.n	80018e4 <mqtt_try_reconnect+0x4c>
        uart_log("MQTT reconnect failed too many times!");
 80018d8:	480a      	ldr	r0, [pc, #40]	; (8001904 <mqtt_try_reconnect+0x6c>)
 80018da:	f7ff fb63 	bl	8000fa4 <uart_log>
        current_device_state = DEVICE_STATE_DEVICE_ERROR;
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <mqtt_try_reconnect+0x70>)
 80018e0:	2205      	movs	r2, #5
 80018e2:	701a      	strb	r2, [r3, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200005e8 	.word	0x200005e8
 80018f0:	08014c90 	.word	0x08014c90
 80018f4:	20000560 	.word	0x20000560
 80018f8:	08017e34 	.word	0x08017e34
 80018fc:	08001a61 	.word	0x08001a61
 8001900:	20000000 	.word	0x20000000
 8001904:	08014ca8 	.word	0x08014ca8
 8001908:	20000537 	.word	0x20000537

0800190c <mqtt_incoming_publish_cb>:

static void
mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b0a6      	sub	sp, #152	; 0x98
 8001910:	af02      	add	r7, sp, #8
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
    snprintf(last_topic, sizeof(last_topic), "%s", topic);
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <mqtt_incoming_publish_cb+0x3c>)
 800191c:	2180      	movs	r1, #128	; 0x80
 800191e:	480b      	ldr	r0, [pc, #44]	; (800194c <mqtt_incoming_publish_cb+0x40>)
 8001920:	f012 fc96 	bl	8014250 <sniprintf>
    char log_buf[128];
    snprintf(log_buf, sizeof(log_buf), "Incoming publish: topic %s, len %d", topic, (int)tot_len);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f107 0010 	add.w	r0, r7, #16
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4a08      	ldr	r2, [pc, #32]	; (8001950 <mqtt_incoming_publish_cb+0x44>)
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	f012 fc8d 	bl	8014250 <sniprintf>
    uart_log(log_buf);
 8001936:	f107 0310 	add.w	r3, r7, #16
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fb32 	bl	8000fa4 <uart_log>
}
 8001940:	bf00      	nop
 8001942:	3790      	adds	r7, #144	; 0x90
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	08014cd0 	.word	0x08014cd0
 800194c:	20000564 	.word	0x20000564
 8001950:	08014cd4 	.word	0x08014cd4

08001954 <mqtt_incoming_data_cb>:

static void
mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b08d      	sub	sp, #52	; 0x34
 8001958:	af04      	add	r7, sp, #16
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	4611      	mov	r1, r2
 8001960:	461a      	mov	r2, r3
 8001962:	460b      	mov	r3, r1
 8001964:	80fb      	strh	r3, [r7, #6]
 8001966:	4613      	mov	r3, r2
 8001968:	717b      	strb	r3, [r7, #5]
    uart_log("Received data:");
 800196a:	4834      	ldr	r0, [pc, #208]	; (8001a3c <mqtt_incoming_data_cb+0xe8>)
 800196c:	f7ff fb1a 	bl	8000fa4 <uart_log>
    uart_log((const char *)data);
 8001970:	68b8      	ldr	r0, [r7, #8]
 8001972:	f7ff fb17 	bl	8000fa4 <uart_log>

    if (mqtt_phase == 0 && strcmp(last_topic, "start/device/cmd") == 0) {
 8001976:	4b32      	ldr	r3, [pc, #200]	; (8001a40 <mqtt_incoming_data_cb+0xec>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d13d      	bne.n	80019fa <mqtt_incoming_data_cb+0xa6>
 800197e:	4931      	ldr	r1, [pc, #196]	; (8001a44 <mqtt_incoming_data_cb+0xf0>)
 8001980:	4831      	ldr	r0, [pc, #196]	; (8001a48 <mqtt_incoming_data_cb+0xf4>)
 8001982:	f7fe fc25 	bl	80001d0 <strcmp>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d136      	bne.n	80019fa <mqtt_incoming_data_cb+0xa6>
        uart_log("Received connect confirm, switching to main topics.");
 800198c:	482f      	ldr	r0, [pc, #188]	; (8001a4c <mqtt_incoming_data_cb+0xf8>)
 800198e:	f7ff fb09 	bl	8000fa4 <uart_log>
        mqtt_sub_unsub(mqtt_client, "start/device/cmd", 0, NULL, NULL, 0); 
 8001992:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <mqtt_incoming_data_cb+0xfc>)
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	2300      	movs	r3, #0
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	2300      	movs	r3, #0
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2300      	movs	r3, #0
 80019a0:	2200      	movs	r2, #0
 80019a2:	4928      	ldr	r1, [pc, #160]	; (8001a44 <mqtt_incoming_data_cb+0xf0>)
 80019a4:	f001 ff32 	bl	800380c <mqtt_sub_unsub>
        mqtt_sub_unsub(mqtt_client, "device/switch1/cmd", 0, NULL, NULL, 1); 
 80019a8:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <mqtt_incoming_data_cb+0xfc>)
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	2301      	movs	r3, #1
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	2300      	movs	r3, #0
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2300      	movs	r3, #0
 80019b6:	2200      	movs	r2, #0
 80019b8:	4926      	ldr	r1, [pc, #152]	; (8001a54 <mqtt_incoming_data_cb+0x100>)
 80019ba:	f001 ff27 	bl	800380c <mqtt_sub_unsub>
        const char *topic = "device/switch1/status";
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <mqtt_incoming_data_cb+0x104>)
 80019c0:	61fb      	str	r3, [r7, #28]
        const char *message = "{\"msg\": \"OFF\"}";
 80019c2:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <mqtt_incoming_data_cb+0x108>)
 80019c4:	61bb      	str	r3, [r7, #24]
        mqtt_publish(mqtt_client, topic, message, strlen(message), 0, 0, NULL, NULL);
 80019c6:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <mqtt_incoming_data_cb+0xfc>)
 80019c8:	681c      	ldr	r4, [r3, #0]
 80019ca:	69b8      	ldr	r0, [r7, #24]
 80019cc:	f7fe fc0a 	bl	80001e4 <strlen>
 80019d0:	4603      	mov	r3, r0
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	2300      	movs	r3, #0
 80019d6:	9303      	str	r3, [sp, #12]
 80019d8:	2300      	movs	r3, #0
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	2300      	movs	r3, #0
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	2300      	movs	r3, #0
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	4613      	mov	r3, r2
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	69f9      	ldr	r1, [r7, #28]
 80019ea:	4620      	mov	r0, r4
 80019ec:	f001 fe30 	bl	8003650 <mqtt_publish>
        mqtt_phase = 1;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <mqtt_incoming_data_cb+0xec>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]
    if (mqtt_phase == 0 && strcmp(last_topic, "start/device/cmd") == 0) {
 80019f6:	bf00      	nop
        int cmd_code = mqtt_parse_command(last_topic, data, len);
        if (cmd_code == 1 || cmd_code == 2) {
            mqtt_handle_command_and_respond("device/switch1/status", cmd_code);
        }
    }
}
 80019f8:	e01b      	b.n	8001a32 <mqtt_incoming_data_cb+0xde>
    } else if (mqtt_phase == 1 && strcmp(last_topic, "device/switch1/cmd") == 0) {
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <mqtt_incoming_data_cb+0xec>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d117      	bne.n	8001a32 <mqtt_incoming_data_cb+0xde>
 8001a02:	4914      	ldr	r1, [pc, #80]	; (8001a54 <mqtt_incoming_data_cb+0x100>)
 8001a04:	4810      	ldr	r0, [pc, #64]	; (8001a48 <mqtt_incoming_data_cb+0xf4>)
 8001a06:	f7fe fbe3 	bl	80001d0 <strcmp>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d110      	bne.n	8001a32 <mqtt_incoming_data_cb+0xde>
        int cmd_code = mqtt_parse_command(last_topic, data, len);
 8001a10:	88fb      	ldrh	r3, [r7, #6]
 8001a12:	461a      	mov	r2, r3
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	480c      	ldr	r0, [pc, #48]	; (8001a48 <mqtt_incoming_data_cb+0xf4>)
 8001a18:	f000 f940 	bl	8001c9c <mqtt_parse_command>
 8001a1c:	6178      	str	r0, [r7, #20]
        if (cmd_code == 1 || cmd_code == 2) {
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d002      	beq.n	8001a2a <mqtt_incoming_data_cb+0xd6>
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d103      	bne.n	8001a32 <mqtt_incoming_data_cb+0xde>
            mqtt_handle_command_and_respond("device/switch1/status", cmd_code);
 8001a2a:	6979      	ldr	r1, [r7, #20]
 8001a2c:	480a      	ldr	r0, [pc, #40]	; (8001a58 <mqtt_incoming_data_cb+0x104>)
 8001a2e:	f000 f8d7 	bl	8001be0 <mqtt_handle_command_and_respond>
}
 8001a32:	bf00      	nop
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd90      	pop	{r4, r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	08014cf8 	.word	0x08014cf8
 8001a40:	200005e4 	.word	0x200005e4
 8001a44:	08014d08 	.word	0x08014d08
 8001a48:	20000564 	.word	0x20000564
 8001a4c:	08014d1c 	.word	0x08014d1c
 8001a50:	20000560 	.word	0x20000560
 8001a54:	08014d50 	.word	0x08014d50
 8001a58:	08014d64 	.word	0x08014d64
 8001a5c:	08014d7c 	.word	0x08014d7c

08001a60 <mqtt_connection_cb>:

static void
mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08c      	sub	sp, #48	; 0x30
 8001a64:	af04      	add	r7, sp, #16
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	80fb      	strh	r3, [r7, #6]
    const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	61fb      	str	r3, [r7, #28]

    if (status == MQTT_CONNECT_ACCEPTED) {
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d13e      	bne.n	8001af6 <mqtt_connection_cb+0x96>
        uart_log("MQTT connection accepted!");
 8001a78:	4825      	ldr	r0, [pc, #148]	; (8001b10 <mqtt_connection_cb+0xb0>)
 8001a7a:	f7ff fa93 	bl	8000fa4 <uart_log>
        current_device_state = DEVICE_STATE_DEVICE_READY;
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <mqtt_connection_cb+0xb4>)
 8001a80:	2204      	movs	r2, #4
 8001a82:	701a      	strb	r2, [r3, #0]
        mqtt_reconnect_attempts = 0; 
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <mqtt_connection_cb+0xb8>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]

        if (mqtt_phase == 1) {
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <mqtt_connection_cb+0xbc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d10c      	bne.n	8001aac <mqtt_connection_cb+0x4c>
            mqtt_sub_unsub(client, "device/switch1/cmd", 0, NULL, NULL, 1);
 8001a92:	2301      	movs	r3, #1
 8001a94:	9301      	str	r3, [sp, #4]
 8001a96:	2300      	movs	r3, #0
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	4920      	ldr	r1, [pc, #128]	; (8001b20 <mqtt_connection_cb+0xc0>)
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f001 feb3 	bl	800380c <mqtt_sub_unsub>
            mqtt_publish_switch_state();
 8001aa6:	f000 f8a7 	bl	8001bf8 <mqtt_publish_switch_state>
    } else {
        uart_log("MQTT connection failed!");
        current_device_state = DEVICE_STATE_DEVICE_ERROR;
        mqtt_try_reconnect();
    }
}
 8001aaa:	e02c      	b.n	8001b06 <mqtt_connection_cb+0xa6>
            mqtt_phase = 0;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <mqtt_connection_cb+0xbc>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
            mqtt_sub_unsub(client,
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	2300      	movs	r3, #0
 8001abc:	2200      	movs	r2, #0
 8001abe:	4919      	ldr	r1, [pc, #100]	; (8001b24 <mqtt_connection_cb+0xc4>)
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f001 fea3 	bl	800380c <mqtt_sub_unsub>
            const char *topic = "start/device/status";
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <mqtt_connection_cb+0xc8>)
 8001ac8:	61bb      	str	r3, [r7, #24]
            const char *message = "{\"msg\": \"Connect broker\"}";
 8001aca:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <mqtt_connection_cb+0xcc>)
 8001acc:	617b      	str	r3, [r7, #20]
            mqtt_publish(client, topic, message, strlen(message), 0, 0, NULL, NULL);
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7fe fb88 	bl	80001e4 <strlen>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9303      	str	r3, [sp, #12]
 8001adc:	2300      	movs	r3, #0
 8001ade:	9302      	str	r3, [sp, #8]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	69b9      	ldr	r1, [r7, #24]
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f001 fdae 	bl	8003650 <mqtt_publish>
}
 8001af4:	e007      	b.n	8001b06 <mqtt_connection_cb+0xa6>
        uart_log("MQTT connection failed!");
 8001af6:	480e      	ldr	r0, [pc, #56]	; (8001b30 <mqtt_connection_cb+0xd0>)
 8001af8:	f7ff fa54 	bl	8000fa4 <uart_log>
        current_device_state = DEVICE_STATE_DEVICE_ERROR;
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <mqtt_connection_cb+0xb4>)
 8001afe:	2205      	movs	r2, #5
 8001b00:	701a      	strb	r2, [r3, #0]
        mqtt_try_reconnect();
 8001b02:	f7ff fec9 	bl	8001898 <mqtt_try_reconnect>
}
 8001b06:	bf00      	nop
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	08014d8c 	.word	0x08014d8c
 8001b14:	20000537 	.word	0x20000537
 8001b18:	200005e8 	.word	0x200005e8
 8001b1c:	200005e4 	.word	0x200005e4
 8001b20:	08014d50 	.word	0x08014d50
 8001b24:	08014d08 	.word	0x08014d08
 8001b28:	08014da8 	.word	0x08014da8
 8001b2c:	08014dbc 	.word	0x08014dbc
 8001b30:	08014dd8 	.word	0x08014dd8

08001b34 <mqtt_example_init>:

void
mqtt_example_init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af02      	add	r7, sp, #8
#if LWIP_TCP
  mqtt_client = mqtt_client_new();
 8001b3a:	f001 ff75 	bl	8003a28 <mqtt_client_new>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <mqtt_example_init+0x3c>)
 8001b42:	601a      	str	r2, [r3, #0]

  mqtt_set_inpub_callback(mqtt_client,
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <mqtt_example_init+0x3c>)
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <mqtt_example_init+0x40>)
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <mqtt_example_init+0x44>)
 8001b4c:	490b      	ldr	r1, [pc, #44]	; (8001b7c <mqtt_example_init+0x48>)
 8001b4e:	f001 ff41 	bl	80039d4 <mqtt_set_inpub_callback>
          mqtt_incoming_publish_cb,
          mqtt_incoming_data_cb,
          LWIP_CONST_CAST(void*, &mqtt_client_info));

  mqtt_client_connect(mqtt_client,
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <mqtt_example_init+0x3c>)
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <mqtt_example_init+0x40>)
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <mqtt_example_init+0x40>)
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <mqtt_example_init+0x4c>)
 8001b60:	f240 725b 	movw	r2, #1883	; 0x75b
 8001b64:	4907      	ldr	r1, [pc, #28]	; (8001b84 <mqtt_example_init+0x50>)
 8001b66:	f001 ff69 	bl	8003a3c <mqtt_client_connect>
          &mqtt_ip, MQTT_PORT,
          mqtt_connection_cb, LWIP_CONST_CAST(void*, &mqtt_client_info),
          &mqtt_client_info);
#endif
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000560 	.word	0x20000560
 8001b74:	08017e34 	.word	0x08017e34
 8001b78:	08001955 	.word	0x08001955
 8001b7c:	0800190d 	.word	0x0800190d
 8001b80:	08001a61 	.word	0x08001a61
 8001b84:	20000000 	.word	0x20000000

08001b88 <handle_led_stt_switch>:

extern mqtt_client_t* mqtt_client;
extern device_state_t current_device_state;
extern swich_state_t switch_state;

void handle_led_stt_switch(int cmd_code) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
    if (cmd_code == 1) { 
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d106      	bne.n	8001ba4 <handle_led_stt_switch+0x1c>
        switch_state = swich_on;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <handle_led_stt_switch+0x48>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
        uart_log("led_stt_switch: ON");
 8001b9c:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <handle_led_stt_switch+0x4c>)
 8001b9e:	f7ff fa01 	bl	8000fa4 <uart_log>
 8001ba2:	e00f      	b.n	8001bc4 <handle_led_stt_switch+0x3c>
    } else if (cmd_code == 2) { 
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d106      	bne.n	8001bb8 <handle_led_stt_switch+0x30>
        switch_state = swich_off;
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <handle_led_stt_switch+0x48>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
        uart_log("led_stt_switch: OFF");
 8001bb0:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <handle_led_stt_switch+0x50>)
 8001bb2:	f7ff f9f7 	bl	8000fa4 <uart_log>
 8001bb6:	e005      	b.n	8001bc4 <handle_led_stt_switch+0x3c>
    }
    else if (cmd_code == 3) { 
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d102      	bne.n	8001bc4 <handle_led_stt_switch+0x3c>
        uart_log("led_stt_switch: RELAY");
 8001bbe:	4807      	ldr	r0, [pc, #28]	; (8001bdc <handle_led_stt_switch+0x54>)
 8001bc0:	f7ff f9f0 	bl	8000fa4 <uart_log>
    }
    mqtt_publish_switch_state();
 8001bc4:	f000 f818 	bl	8001bf8 <mqtt_publish_switch_state>
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000538 	.word	0x20000538
 8001bd4:	08014df0 	.word	0x08014df0
 8001bd8:	08014e04 	.word	0x08014e04
 8001bdc:	08014e18 	.word	0x08014e18

08001be0 <mqtt_handle_command_and_respond>:

void mqtt_handle_command_and_respond(const char* topic, int cmd_code) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
    handle_led_stt_switch(cmd_code);
 8001bea:	6838      	ldr	r0, [r7, #0]
 8001bec:	f7ff ffcc 	bl	8001b88 <handle_led_stt_switch>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <mqtt_publish_switch_state>:

void mqtt_publish_switch_state(void) {
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b0b4      	sub	sp, #208	; 0xd0
 8001bfc:	af04      	add	r7, sp, #16
    uart_log("mqtt_publish_switch_state called");
 8001bfe:	4821      	ldr	r0, [pc, #132]	; (8001c84 <mqtt_publish_switch_state+0x8c>)
 8001c00:	f7ff f9d0 	bl	8000fa4 <uart_log>
    char response_topic[64] = "device/switch1/status";
 8001c04:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <mqtt_publish_switch_state+0x90>)
 8001c06:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8001c0a:	461d      	mov	r5, r3
 8001c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c10:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c14:	6020      	str	r0, [r4, #0]
 8001c16:	3404      	adds	r4, #4
 8001c18:	8021      	strh	r1, [r4, #0]
 8001c1a:	f107 0396 	add.w	r3, r7, #150	; 0x96
 8001c1e:	222a      	movs	r2, #42	; 0x2a
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f012 fa0b 	bl	801403e <memset>
    char response_msg[128];

    snprintf(response_msg, sizeof(response_msg),
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <mqtt_publish_switch_state+0x94>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 f8c1 	bl	8001db4 <get_switch_state_string>
 8001c32:	4604      	mov	r4, r0
 8001c34:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <mqtt_publish_switch_state+0x98>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 f881 	bl	8001d40 <get_device_state_string>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4638      	mov	r0, r7
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	4623      	mov	r3, r4
 8001c46:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <mqtt_publish_switch_state+0x9c>)
 8001c48:	2180      	movs	r1, #128	; 0x80
 8001c4a:	f012 fb01 	bl	8014250 <sniprintf>
             "{\"status\":\"%s\",\"state\":\"%s\"}",
             get_switch_state_string(switch_state),
             get_device_state_string(current_device_state));

    mqtt_publish(mqtt_client, response_topic, response_msg, strlen(response_msg), 0, 0, NULL, NULL);
 8001c4e:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <mqtt_publish_switch_state+0xa0>)
 8001c50:	681c      	ldr	r4, [r3, #0]
 8001c52:	463b      	mov	r3, r7
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fac5 	bl	80001e4 <strlen>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	b298      	uxth	r0, r3
 8001c5e:	463a      	mov	r2, r7
 8001c60:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001c64:	2300      	movs	r3, #0
 8001c66:	9303      	str	r3, [sp, #12]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	2300      	movs	r3, #0
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	4603      	mov	r3, r0
 8001c76:	4620      	mov	r0, r4
 8001c78:	f001 fcea 	bl	8003650 <mqtt_publish>
 8001c7c:	bf00      	nop
 8001c7e:	37c0      	adds	r7, #192	; 0xc0
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bdb0      	pop	{r4, r5, r7, pc}
 8001c84:	08014e30 	.word	0x08014e30
 8001c88:	08014e74 	.word	0x08014e74
 8001c8c:	20000538 	.word	0x20000538
 8001c90:	20000537 	.word	0x20000537
 8001c94:	08014e54 	.word	0x08014e54
 8001c98:	20000560 	.word	0x20000560

08001c9c <mqtt_parse_command>:
#include <string.h>
#include <stdio.h>
#include "hardware/uart.h"
#include "main.h"

int mqtt_parse_command(const char* topic, const uint8_t* data, uint16_t len) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	80fb      	strh	r3, [r7, #6]
    if (topic == NULL || data == NULL || len == 0) return 0;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <mqtt_parse_command+0x20>
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <mqtt_parse_command+0x20>
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <mqtt_parse_command+0x24>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e02c      	b.n	8001d1a <mqtt_parse_command+0x7e>
    const char* msg_ptr = strstr((const char*)data, "\"msg\"");
 8001cc0:	4918      	ldr	r1, [pc, #96]	; (8001d24 <mqtt_parse_command+0x88>)
 8001cc2:	68b8      	ldr	r0, [r7, #8]
 8001cc4:	f012 fb50 	bl	8014368 <strstr>
 8001cc8:	6178      	str	r0, [r7, #20]
    if (msg_ptr) { 
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d023      	beq.n	8001d18 <mqtt_parse_command+0x7c>
        if (strstr(msg_ptr, "ON")) {
 8001cd0:	4915      	ldr	r1, [pc, #84]	; (8001d28 <mqtt_parse_command+0x8c>)
 8001cd2:	6978      	ldr	r0, [r7, #20]
 8001cd4:	f012 fb48 	bl	8014368 <strstr>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d004      	beq.n	8001ce8 <mqtt_parse_command+0x4c>
            uart_log("MQTT CMD: ON");
 8001cde:	4813      	ldr	r0, [pc, #76]	; (8001d2c <mqtt_parse_command+0x90>)
 8001ce0:	f7ff f960 	bl	8000fa4 <uart_log>
            return 1;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e018      	b.n	8001d1a <mqtt_parse_command+0x7e>
        }
        if (strstr(msg_ptr, "OFF")) {
 8001ce8:	4911      	ldr	r1, [pc, #68]	; (8001d30 <mqtt_parse_command+0x94>)
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f012 fb3c 	bl	8014368 <strstr>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d004      	beq.n	8001d00 <mqtt_parse_command+0x64>
            uart_log("MQTT CMD: OFF");
 8001cf6:	480f      	ldr	r0, [pc, #60]	; (8001d34 <mqtt_parse_command+0x98>)
 8001cf8:	f7ff f954 	bl	8000fa4 <uart_log>
            return 2;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e00c      	b.n	8001d1a <mqtt_parse_command+0x7e>
        }
        if (strstr(msg_ptr, "RELAY")) {
 8001d00:	490d      	ldr	r1, [pc, #52]	; (8001d38 <mqtt_parse_command+0x9c>)
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f012 fb30 	bl	8014368 <strstr>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d004      	beq.n	8001d18 <mqtt_parse_command+0x7c>
            uart_log("MQTT CMD: RELAY");
 8001d0e:	480b      	ldr	r0, [pc, #44]	; (8001d3c <mqtt_parse_command+0xa0>)
 8001d10:	f7ff f948 	bl	8000fa4 <uart_log>
            return 3;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e000      	b.n	8001d1a <mqtt_parse_command+0x7e>
        }
    }
    return 0;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	08014eb4 	.word	0x08014eb4
 8001d28:	08014ebc 	.word	0x08014ebc
 8001d2c:	08014ec0 	.word	0x08014ec0
 8001d30:	08014ed0 	.word	0x08014ed0
 8001d34:	08014ed4 	.word	0x08014ed4
 8001d38:	08014ee4 	.word	0x08014ee4
 8001d3c:	08014eec 	.word	0x08014eec

08001d40 <get_device_state_string>:

const char* get_device_state_string(device_state_t state) {
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b05      	cmp	r3, #5
 8001d4e:	d81b      	bhi.n	8001d88 <get_device_state_string+0x48>
 8001d50:	a201      	add	r2, pc, #4	; (adr r2, 8001d58 <get_device_state_string+0x18>)
 8001d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d56:	bf00      	nop
 8001d58:	08001d71 	.word	0x08001d71
 8001d5c:	08001d75 	.word	0x08001d75
 8001d60:	08001d79 	.word	0x08001d79
 8001d64:	08001d7d 	.word	0x08001d7d
 8001d68:	08001d81 	.word	0x08001d81
 8001d6c:	08001d85 	.word	0x08001d85
        case DEVICE_STATE_BOOTING_GSM:     return "BOOTING_GSM";
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <get_device_state_string+0x58>)
 8001d72:	e00a      	b.n	8001d8a <get_device_state_string+0x4a>
        case DEVICE_STATE_GSM_READY:       return "GSM_READY";
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <get_device_state_string+0x5c>)
 8001d76:	e008      	b.n	8001d8a <get_device_state_string+0x4a>
        case DEVICE_STATE_GSM_ERROR:       return "GSM_ERROR";
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <get_device_state_string+0x60>)
 8001d7a:	e006      	b.n	8001d8a <get_device_state_string+0x4a>
        case DEVICE_STATE_BOOTING_DEVICE:  return "BOOTING_DEVICE";
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <get_device_state_string+0x64>)
 8001d7e:	e004      	b.n	8001d8a <get_device_state_string+0x4a>
        case DEVICE_STATE_DEVICE_READY:    return "DEVICE_READY";
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <get_device_state_string+0x68>)
 8001d82:	e002      	b.n	8001d8a <get_device_state_string+0x4a>
        case DEVICE_STATE_DEVICE_ERROR:    return "DEVICE_ERROR";
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <get_device_state_string+0x6c>)
 8001d86:	e000      	b.n	8001d8a <get_device_state_string+0x4a>
        default:                           return "UNKNOWN";
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <get_device_state_string+0x70>)
    }
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	08014efc 	.word	0x08014efc
 8001d9c:	08014f08 	.word	0x08014f08
 8001da0:	08014f14 	.word	0x08014f14
 8001da4:	08014f20 	.word	0x08014f20
 8001da8:	08014f30 	.word	0x08014f30
 8001dac:	08014f40 	.word	0x08014f40
 8001db0:	08014f50 	.word	0x08014f50

08001db4 <get_switch_state_string>:

const char* get_switch_state_string(swich_state_t state) {
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <get_switch_state_string+0x18>
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d103      	bne.n	8001dd0 <get_switch_state_string+0x1c>
        case swich_on:  return "ON";
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <get_switch_state_string+0x2c>)
 8001dca:	e002      	b.n	8001dd2 <get_switch_state_string+0x1e>
        case swich_off: return "OFF";
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <get_switch_state_string+0x30>)
 8001dce:	e000      	b.n	8001dd2 <get_switch_state_string+0x1e>
        default:        return "UNKNOWN";
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <get_switch_state_string+0x34>)
    }
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	08014ebc 	.word	0x08014ebc
 8001de4:	08014ed0 	.word	0x08014ed0
 8001de8:	08014f50 	.word	0x08014f50

08001dec <sys_init>:
#include "lwip/opt.h"
#include "lwip/sys.h"
#include "lwip/err.h"
#include "arch/sys_arch.h"

void sys_init(void) {}
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <sys_mutex_new>:

err_t sys_mutex_new(sys_mutex_t *mutex) { *mutex = 0; return ERR_OK; }
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex) { (void)mutex; }
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <sys_mutex_unlock>:
void sys_mutex_unlock(sys_mutex_t *mutex) { (void)mutex; }
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <sys_mbox_new>:
err_t sys_sem_new(sys_sem_t *sem, u8_t count) { *sem = 0; (void)count; return ERR_OK; }
void sys_sem_signal(sys_sem_t *sem) { (void)sem; }
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout) { (void)sem; (void)timeout; return 0; }
void sys_sem_free(sys_sem_t *sem) { (void)sem; }

err_t sys_mbox_new(sys_mbox_t *mbox, int size) { *mbox = 0; (void)size; return ERR_OK; }
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <sys_mbox_trypost>:
void sys_mbox_post(sys_mbox_t *mbox, void *msg) { (void)mbox; (void)msg; }
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg) { (void)mbox; (void)msg; return ERR_OK; }
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	2300      	movs	r3, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <sys_arch_mbox_fetch>:
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout) { (void)mbox; (void)msg; (void)timeout; return 0; }
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	2300      	movs	r3, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <sys_thread_new>:
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg) { (void)mbox; (void)msg; return 0; }
void sys_mbox_free(sys_mbox_t *mbox) { (void)mbox; }

sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread, void *arg, int stacksize, int prio) { (void)name; (void)thread; (void)arg; (void)stacksize; (void)prio; return 0; }
 8001e8e:	b480      	push	{r7}
 8001e90:	b085      	sub	sp, #20
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <lwip_win32_platform_diag>:
    (void)msg;
    while (1) { }
}

// Diagnostic output for LwIP (optional)
void lwip_win32_platform_diag(const char *msg) {
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
    // Optionally send to UART or ignore
    (void)msg;
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <sys_now>:
void sys_check_core_locking(void) {
    // No-op for baremetal
}

// Returns system time in ms (replace with your own timer if needed)
uint32_t sys_now(void) {
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
    // TODO: Thay thế bằng hàm trả về thời gian thực tế nếu bạn có timer
    static uint32_t fake_tick = 0;
    return fake_tick++;
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <sys_now+0x18>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	4903      	ldr	r1, [pc, #12]	; (8001ed8 <sys_now+0x18>)
 8001ecc:	600a      	str	r2, [r1, #0]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	200005ec 	.word	0x200005ec

08001edc <sys_jiffies>:

// Returns system time in ticks (can be same as sys_now)
uint32_t sys_jiffies(void) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
    return sys_now();
 8001ee0:	f7ff ffee 	bl	8001ec0 <sys_now>
 8001ee4:	4603      	mov	r3, r0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <lwip_port_rand>:

// Returns a random 32-bit value (replace with your own RNG if needed)
uint32_t lwip_port_rand(void) {
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
    static uint32_t seed = 123456789;
    seed = seed * 1103515245 + 12345;
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <lwip_port_rand+0x28>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <lwip_port_rand+0x2c>)
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001efe:	3339      	adds	r3, #57	; 0x39
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <lwip_port_rand+0x28>)
 8001f02:	6013      	str	r3, [r2, #0]
    return seed;
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <lwip_port_rand+0x28>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000004 	.word	0x20000004
 8001f18:	41c64e6d 	.word	0x41c64e6d

08001f1c <sys_arch_protect>:

// --- LwIP baremetal porting functions ---

// sys_arch_protect/sys_arch_unprotect: No real protection needed for single-thread
unsigned long sys_arch_protect(void) {
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
    return 0;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <sys_arch_unprotect>:
void sys_arch_unprotect(unsigned long pval) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
    (void)pval;
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <test_tcp_connect_google>:
#include "lwip/netdb.h"
#include "lwip/dns.h"
#include "hardware/uart.h"


void test_tcp_connect_google(void) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b0a4      	sub	sp, #144	; 0x90
 8001f44:	af00      	add	r7, sp, #0
    char log_buf[128];
    uart_log("Start test_tcp_connect_google");
 8001f46:	481b      	ldr	r0, [pc, #108]	; (8001fb4 <test_tcp_connect_google+0x74>)
 8001f48:	f7ff f82c 	bl	8000fa4 <uart_log>

    struct tcp_pcb *pcb = tcp_new();
 8001f4c:	f006 f9a0 	bl	8008290 <tcp_new>
 8001f50:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if (pcb == NULL) {
 8001f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d103      	bne.n	8001f64 <test_tcp_connect_google+0x24>
        uart_log("Failed to create TCP PCB");
 8001f5c:	4816      	ldr	r0, [pc, #88]	; (8001fb8 <test_tcp_connect_google+0x78>)
 8001f5e:	f7ff f821 	bl	8000fa4 <uart_log>
 8001f62:	e024      	b.n	8001fae <test_tcp_connect_google+0x6e>
        return;
    }

    ip_addr_t google_ip;
    IP4_ADDR(&google_ip, 142, 250, 190, 46); // IP của google.com
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <test_tcp_connect_google+0x7c>)
 8001f66:	607b      	str	r3, [r7, #4]

    err_t err = tcp_connect(pcb, &google_ip, 80, NULL); // Không cần callback cho test đơn giản
 8001f68:	1d39      	adds	r1, r7, #4
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2250      	movs	r2, #80	; 0x50
 8001f6e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001f72:	f005 f9ef 	bl	8007354 <tcp_connect>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    if (err != ERR_OK) {
 8001f7c:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00d      	beq.n	8001fa0 <test_tcp_connect_google+0x60>
        snprintf(log_buf, sizeof(log_buf), "TCP Connect failed: %d", err);
 8001f84:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8001f88:	f107 0008 	add.w	r0, r7, #8
 8001f8c:	4a0c      	ldr	r2, [pc, #48]	; (8001fc0 <test_tcp_connect_google+0x80>)
 8001f8e:	2180      	movs	r1, #128	; 0x80
 8001f90:	f012 f95e 	bl	8014250 <sniprintf>
        uart_log(log_buf);
 8001f94:	f107 0308 	add.w	r3, r7, #8
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff f803 	bl	8000fa4 <uart_log>
 8001f9e:	e002      	b.n	8001fa6 <test_tcp_connect_google+0x66>
    } else {
        uart_log("TCP Connected to google.com:80!");
 8001fa0:	4808      	ldr	r0, [pc, #32]	; (8001fc4 <test_tcp_connect_google+0x84>)
 8001fa2:	f7fe ffff 	bl	8000fa4 <uart_log>
    }

    tcp_abort(pcb); // Đóng kết nối sau khi test
 8001fa6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001faa:	f005 f82d 	bl	8007008 <tcp_abort>
}
 8001fae:	3790      	adds	r7, #144	; 0x90
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	08014f58 	.word	0x08014f58
 8001fb8:	08014f78 	.word	0x08014f78
 8001fbc:	2ebefa8e 	.word	0x2ebefa8e
 8001fc0:	08014f94 	.word	0x08014f94
 8001fc4:	08014fac 	.word	0x08014fac

08001fc8 <ppp_output_callback>:
volatile bool gsm_ppp_mode = false;

static struct netif ppp_netif;
static bool ppp_connected = false;

static u32_t ppp_output_callback(ppp_pcb *pcb, const void *data, u32_t len, void *ctx) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
    (void)pcb;
    (void)ctx;
    uart1_send_raw((const uint8_t*)data, len);
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	68b8      	ldr	r0, [r7, #8]
 8001fda:	f7ff f81b 	bl	8001014 <uart1_send_raw>
    return len;
 8001fde:	687b      	ldr	r3, [r7, #4]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <ppp_status_cb>:

static void ppp_status_cb(ppp_pcb *pcb, int err_code, void *ctx) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b09e      	sub	sp, #120	; 0x78
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
    (void)pcb;
    (void)ctx;
    switch (err_code) {
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <ppp_status_cb+0x18>
 8001ffa:	2b05      	cmp	r3, #5
 8001ffc:	d063      	beq.n	80020c6 <ppp_status_cb+0xde>
 8001ffe:	e06f      	b.n	80020e0 <ppp_status_cb+0xf8>
        case PPPERR_NONE: {
            char log_buf[100];
            uart_log("PPP connected");
 8002000:	4840      	ldr	r0, [pc, #256]	; (8002104 <ppp_status_cb+0x11c>)
 8002002:	f7fe ffcf 	bl	8000fa4 <uart_log>
            ppp_connected = true;
 8002006:	4b40      	ldr	r3, [pc, #256]	; (8002108 <ppp_status_cb+0x120>)
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
            gsm_ppp_mode = true;
 800200c:	4b3f      	ldr	r3, [pc, #252]	; (800210c <ppp_status_cb+0x124>)
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
            ppp_connection_established = true;
 8002012:	4b3f      	ldr	r3, [pc, #252]	; (8002110 <ppp_status_cb+0x128>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]

            sprintf(log_buf, "   IP address:  %s", ipaddr_ntoa(netif_ip4_addr(&ppp_netif)));
 8002018:	483e      	ldr	r0, [pc, #248]	; (8002114 <ppp_status_cb+0x12c>)
 800201a:	f002 fcad 	bl	8004978 <ip4addr_ntoa>
 800201e:	4602      	mov	r2, r0
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	493c      	ldr	r1, [pc, #240]	; (8002118 <ppp_status_cb+0x130>)
 8002026:	4618      	mov	r0, r3
 8002028:	f011 fdcc 	bl	8013bc4 <siprintf>
            uart_log(log_buf);
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe ffb7 	bl	8000fa4 <uart_log>
            sprintf(log_buf, "   Gateway:     %s", ipaddr_ntoa(netif_ip4_gw(&ppp_netif)));
 8002036:	4839      	ldr	r0, [pc, #228]	; (800211c <ppp_status_cb+0x134>)
 8002038:	f002 fc9e 	bl	8004978 <ip4addr_ntoa>
 800203c:	4602      	mov	r2, r0
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	4937      	ldr	r1, [pc, #220]	; (8002120 <ppp_status_cb+0x138>)
 8002044:	4618      	mov	r0, r3
 8002046:	f011 fdbd 	bl	8013bc4 <siprintf>
            uart_log(log_buf);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe ffa8 	bl	8000fa4 <uart_log>
            sprintf(log_buf, "   Netmask:     %s", ipaddr_ntoa(netif_ip4_netmask(&ppp_netif)));
 8002054:	4833      	ldr	r0, [pc, #204]	; (8002124 <ppp_status_cb+0x13c>)
 8002056:	f002 fc8f 	bl	8004978 <ip4addr_ntoa>
 800205a:	4602      	mov	r2, r0
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4931      	ldr	r1, [pc, #196]	; (8002128 <ppp_status_cb+0x140>)
 8002062:	4618      	mov	r0, r3
 8002064:	f011 fdae 	bl	8013bc4 <siprintf>
            uart_log(log_buf);
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe ff99 	bl	8000fa4 <uart_log>
            
            uart_log("Waiting for PPP to stabilize...");
 8002072:	482e      	ldr	r0, [pc, #184]	; (800212c <ppp_status_cb+0x144>)
 8002074:	f7fe ff96 	bl	8000fa4 <uart_log>
            delay_ms(2000);
 8002078:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800207c:	f7fe fed2 	bl	8000e24 <delay_ms>

            uart_log("Checking routing...");
 8002080:	482b      	ldr	r0, [pc, #172]	; (8002130 <ppp_status_cb+0x148>)
 8002082:	f7fe ff8f 	bl	8000fa4 <uart_log>
            if (netif_is_up(&ppp_netif)) {
 8002086:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <ppp_status_cb+0x14c>)
 8002088:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <ppp_status_cb+0xb4>
                uart_log("PPP netif is up and routing is active.");
 8002094:	4828      	ldr	r0, [pc, #160]	; (8002138 <ppp_status_cb+0x150>)
 8002096:	f7fe ff85 	bl	8000fa4 <uart_log>
 800209a:	e002      	b.n	80020a2 <ppp_status_cb+0xba>
            } else {
                uart_log("PPP netif is down. Routing may not be active.");
 800209c:	4827      	ldr	r0, [pc, #156]	; (800213c <ppp_status_cb+0x154>)
 800209e:	f7fe ff81 	bl	8000fa4 <uart_log>
            }

            uart_log("Testing Internet connection...");
 80020a2:	4827      	ldr	r0, [pc, #156]	; (8002140 <ppp_status_cb+0x158>)
 80020a4:	f7fe ff7e 	bl	8000fa4 <uart_log>
            test_tcp_connect_google();
 80020a8:	f7ff ff4a 	bl	8001f40 <test_tcp_connect_google>
            uart_log("Internet connection test completed.");
 80020ac:	4825      	ldr	r0, [pc, #148]	; (8002144 <ppp_status_cb+0x15c>)
 80020ae:	f7fe ff79 	bl	8000fa4 <uart_log>

            uart_log("Initializing MQTT...");
 80020b2:	4825      	ldr	r0, [pc, #148]	; (8002148 <ppp_status_cb+0x160>)
 80020b4:	f7fe ff76 	bl	8000fa4 <uart_log>
            mqtt_example_init();
 80020b8:	f7ff fd3c 	bl	8001b34 <mqtt_example_init>
            uart_log("MQTT initialization completed.");
 80020bc:	4823      	ldr	r0, [pc, #140]	; (800214c <ppp_status_cb+0x164>)
 80020be:	f7fe ff71 	bl	8000fa4 <uart_log>

            break;
 80020c2:	bf00      	nop
 80020c4:	e019      	b.n	80020fa <ppp_status_cb+0x112>
        }
        case PPPERR_USER:
            uart_log("PPP connection terminated by user");
 80020c6:	4822      	ldr	r0, [pc, #136]	; (8002150 <ppp_status_cb+0x168>)
 80020c8:	f7fe ff6c 	bl	8000fa4 <uart_log>
            ppp_connected = false;
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <ppp_status_cb+0x120>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
            gsm_ppp_mode = false;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <ppp_status_cb+0x124>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
            ppp_connection_established = false;
 80020d8:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <ppp_status_cb+0x128>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
            break;
 80020de:	e00c      	b.n	80020fa <ppp_status_cb+0x112>
        default:
            uart_log("PPP connection error");
 80020e0:	481c      	ldr	r0, [pc, #112]	; (8002154 <ppp_status_cb+0x16c>)
 80020e2:	f7fe ff5f 	bl	8000fa4 <uart_log>
            ppp_connected = false;
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <ppp_status_cb+0x120>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
            gsm_ppp_mode = false;
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <ppp_status_cb+0x124>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
            ppp_connection_established = false;
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <ppp_status_cb+0x128>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
            break;
 80020f8:	bf00      	nop
    }
}
 80020fa:	bf00      	nop
 80020fc:	3778      	adds	r7, #120	; 0x78
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	080150a4 	.word	0x080150a4
 8002108:	2000062c 	.word	0x2000062c
 800210c:	200005f8 	.word	0x200005f8
 8002110:	200005f0 	.word	0x200005f0
 8002114:	20000600 	.word	0x20000600
 8002118:	080150b4 	.word	0x080150b4
 800211c:	20000608 	.word	0x20000608
 8002120:	080150c8 	.word	0x080150c8
 8002124:	20000604 	.word	0x20000604
 8002128:	080150dc 	.word	0x080150dc
 800212c:	080150f0 	.word	0x080150f0
 8002130:	08015110 	.word	0x08015110
 8002134:	200005fc 	.word	0x200005fc
 8002138:	08015124 	.word	0x08015124
 800213c:	0801514c 	.word	0x0801514c
 8002140:	0801517c 	.word	0x0801517c
 8002144:	0801519c 	.word	0x0801519c
 8002148:	080151c0 	.word	0x080151c0
 800214c:	080151d8 	.word	0x080151d8
 8002150:	080151f8 	.word	0x080151f8
 8002154:	0801521c 	.word	0x0801521c

08002158 <ppp_connection_init>:

void ppp_connection_init(void) {
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
    //uart_log("Initializing PPP connection...");

    tcpip_init(NULL, NULL);
 800215c:	2100      	movs	r1, #0
 800215e:	2000      	movs	r0, #0
 8002160:	f000 f912 	bl	8002388 <tcpip_init>

    ppp = pppos_create(&ppp_netif, ppp_output_callback, ppp_status_cb, NULL);
 8002164:	2300      	movs	r3, #0
 8002166:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <ppp_connection_init+0x48>)
 8002168:	490e      	ldr	r1, [pc, #56]	; (80021a4 <ppp_connection_init+0x4c>)
 800216a:	480f      	ldr	r0, [pc, #60]	; (80021a8 <ppp_connection_init+0x50>)
 800216c:	f010 fa68 	bl	8012640 <pppos_create>
 8002170:	4602      	mov	r2, r0
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <ppp_connection_init+0x54>)
 8002174:	601a      	str	r2, [r3, #0]
    if (ppp == NULL) {
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <ppp_connection_init+0x54>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d103      	bne.n	8002186 <ppp_connection_init+0x2e>
        uart_log("Failed to create PPP control block");
 800217e:	480c      	ldr	r0, [pc, #48]	; (80021b0 <ppp_connection_init+0x58>)
 8002180:	f7fe ff10 	bl	8000fa4 <uart_log>
        return;
 8002184:	e00b      	b.n	800219e <ppp_connection_init+0x46>
    }

    ppp_set_default(ppp);
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <ppp_connection_init+0x54>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	4618      	mov	r0, r3
 800218e:	f003 fc2d 	bl	80059ec <netif_set_default>
    ppp_connect(ppp, 0);
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <ppp_connection_init+0x54>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f00f ff1f 	bl	8011fdc <ppp_connect>
}
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	08001fe9 	.word	0x08001fe9
 80021a4:	08001fc9 	.word	0x08001fc9
 80021a8:	200005fc 	.word	0x200005fc
 80021ac:	200005f4 	.word	0x200005f4
 80021b0:	08015234 	.word	0x08015234

080021b4 <ppp_connection_poll>:

void ppp_connection_poll(void) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
    sys_check_timeouts();
 80021b8:	f00b fa12 	bl	800d5e0 <sys_check_timeouts>
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}

080021c0 <tcpip_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80021ca:	f00b fa3f 	bl	800d64c <sys_timeouts_sleeptime>
 80021ce:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d6:	d10b      	bne.n	80021f0 <tcpip_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80021d8:	4813      	ldr	r0, [pc, #76]	; (8002228 <tcpip_mbox_fetch+0x68>)
 80021da:	f7ff fe26 	bl	8001e2a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	6839      	ldr	r1, [r7, #0]
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff fe46 	bl	8001e74 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80021e8:	480f      	ldr	r0, [pc, #60]	; (8002228 <tcpip_mbox_fetch+0x68>)
 80021ea:	f7ff fe14 	bl	8001e16 <sys_mutex_lock>
    return;
 80021ee:	e018      	b.n	8002222 <tcpip_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <tcpip_mbox_fetch+0x3c>
    sys_check_timeouts();
 80021f6:	f00b f9f3 	bl	800d5e0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80021fa:	e7e6      	b.n	80021ca <tcpip_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80021fc:	480a      	ldr	r0, [pc, #40]	; (8002228 <tcpip_mbox_fetch+0x68>)
 80021fe:	f7ff fe14 	bl	8001e2a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	6839      	ldr	r1, [r7, #0]
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff fe34 	bl	8001e74 <sys_arch_mbox_fetch>
 800220c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800220e:	4806      	ldr	r0, [pc, #24]	; (8002228 <tcpip_mbox_fetch+0x68>)
 8002210:	f7ff fe01 	bl	8001e16 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221a:	d102      	bne.n	8002222 <tcpip_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800221c:	f00b f9e0 	bl	800d5e0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8002220:	e7d3      	b.n	80021ca <tcpip_mbox_fetch+0xa>
  }
}
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	2000087c 	.word	0x2000087c

0800222c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8002234:	4812      	ldr	r0, [pc, #72]	; (8002280 <tcpip_thread+0x54>)
 8002236:	f7ff fdee 	bl	8001e16 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800223a:	4b12      	ldr	r3, [pc, #72]	; (8002284 <tcpip_thread+0x58>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <tcpip_thread+0x58>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <tcpip_thread+0x5c>)
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	4610      	mov	r0, r2
 800224c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    tcpip_mbox_fetch(&tcpip_mbox, (void **)&msg);
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	4619      	mov	r1, r3
 8002254:	480d      	ldr	r0, [pc, #52]	; (800228c <tcpip_thread+0x60>)
 8002256:	f7ff ffb3 	bl	80021c0 <tcpip_mbox_fetch>
    if (msg == NULL) {
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <tcpip_thread+0x4a>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <tcpip_thread+0x64>)
 8002262:	229a      	movs	r2, #154	; 0x9a
 8002264:	490b      	ldr	r1, [pc, #44]	; (8002294 <tcpip_thread+0x68>)
 8002266:	480c      	ldr	r0, [pc, #48]	; (8002298 <tcpip_thread+0x6c>)
 8002268:	f011 fcc2 	bl	8013bf0 <iprintf>
 800226c:	2000      	movs	r0, #0
 800226e:	f011 fdc1 	bl	8013df4 <fflush>
 8002272:	f011 fd06 	bl	8013c82 <abort>
      continue;
    }
    tcpip_thread_handle_msg(msg);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f80f 	bl	800229c <tcpip_thread_handle_msg>
    tcpip_mbox_fetch(&tcpip_mbox, (void **)&msg);
 800227e:	e7e6      	b.n	800224e <tcpip_thread+0x22>
 8002280:	2000087c 	.word	0x2000087c
 8002284:	20000630 	.word	0x20000630
 8002288:	20000634 	.word	0x20000634
 800228c:	20000638 	.word	0x20000638
 8002290:	08015258 	.word	0x08015258
 8002294:	08015278 	.word	0x08015278
 8002298:	08015298 	.word	0x08015298

0800229c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d018      	beq.n	80022de <tcpip_thread_handle_msg+0x42>
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d021      	beq.n	80022f4 <tcpip_thread_handle_msg+0x58>
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d126      	bne.n	8002302 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6850      	ldr	r0, [r2, #4]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6892      	ldr	r2, [r2, #8]
 80022c0:	4611      	mov	r1, r2
 80022c2:	4798      	blx	r3
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d004      	beq.n	80022d4 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f003 ff70 	bl	80061b4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	2004      	movs	r0, #4
 80022d8:	f003 f996 	bl	8005608 <memp_free>
      break;
 80022dc:	e01c      	b.n	8002318 <tcpip_thread_handle_msg+0x7c>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6892      	ldr	r2, [r2, #8]
 80022e6:	4610      	mov	r0, r2
 80022e8:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	2003      	movs	r0, #3
 80022ee:	f003 f98b 	bl	8005608 <memp_free>
      break;
 80022f2:	e011      	b.n	8002318 <tcpip_thread_handle_msg+0x7c>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6892      	ldr	r2, [r2, #8]
 80022fc:	4610      	mov	r0, r2
 80022fe:	4798      	blx	r3
      break;
 8002300:	e00a      	b.n	8002318 <tcpip_thread_handle_msg+0x7c>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <tcpip_thread_handle_msg+0x84>)
 8002304:	22dd      	movs	r2, #221	; 0xdd
 8002306:	4907      	ldr	r1, [pc, #28]	; (8002324 <tcpip_thread_handle_msg+0x88>)
 8002308:	4807      	ldr	r0, [pc, #28]	; (8002328 <tcpip_thread_handle_msg+0x8c>)
 800230a:	f011 fc71 	bl	8013bf0 <iprintf>
 800230e:	2000      	movs	r0, #0
 8002310:	f011 fd70 	bl	8013df4 <fflush>
 8002314:	f011 fcb5 	bl	8013c82 <abort>
      break;
  }
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	08015258 	.word	0x08015258
 8002324:	08015278 	.word	0x08015278
 8002328:	08015298 	.word	0x08015298

0800232c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8002336:	2003      	movs	r0, #3
 8002338:	f003 f8f6 	bl	8005528 <memp_malloc>
 800233c:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d102      	bne.n	800234a <tcpip_try_callback+0x1e>
    return ERR_MEM;
 8002344:	f04f 33ff 	mov.w	r3, #4294967295
 8002348:	e017      	b.n	800237a <tcpip_try_callback+0x4e>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800235c:	68f9      	ldr	r1, [r7, #12]
 800235e:	4809      	ldr	r0, [pc, #36]	; (8002384 <tcpip_try_callback+0x58>)
 8002360:	f7ff fd7c 	bl	8001e5c <sys_mbox_trypost>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d006      	beq.n	8002378 <tcpip_try_callback+0x4c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800236a:	68f9      	ldr	r1, [r7, #12]
 800236c:	2003      	movs	r0, #3
 800236e:	f003 f94b 	bl	8005608 <memp_free>
    return ERR_MEM;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	e000      	b.n	800237a <tcpip_try_callback+0x4e>
  }
  return ERR_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000638 	.word	0x20000638

08002388 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af02      	add	r7, sp, #8
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  lwip_init();
 8002392:	f001 ff57 	bl	8004244 <lwip_init>

  tcpip_init_done = initfunc;
 8002396:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <tcpip_init+0x7c>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800239c:	4a1a      	ldr	r2, [pc, #104]	; (8002408 <tcpip_init+0x80>)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80023a2:	2100      	movs	r1, #0
 80023a4:	4819      	ldr	r0, [pc, #100]	; (800240c <tcpip_init+0x84>)
 80023a6:	f7ff fd4a 	bl	8001e3e <sys_mbox_new>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00b      	beq.n	80023c8 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80023b0:	4b17      	ldr	r3, [pc, #92]	; (8002410 <tcpip_init+0x88>)
 80023b2:	f240 229a 	movw	r2, #666	; 0x29a
 80023b6:	4917      	ldr	r1, [pc, #92]	; (8002414 <tcpip_init+0x8c>)
 80023b8:	4817      	ldr	r0, [pc, #92]	; (8002418 <tcpip_init+0x90>)
 80023ba:	f011 fc19 	bl	8013bf0 <iprintf>
 80023be:	2000      	movs	r0, #0
 80023c0:	f011 fd18 	bl	8013df4 <fflush>
 80023c4:	f011 fc5d 	bl	8013c82 <abort>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80023c8:	4814      	ldr	r0, [pc, #80]	; (800241c <tcpip_init+0x94>)
 80023ca:	f7ff fd16 	bl	8001dfa <sys_mutex_new>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00b      	beq.n	80023ec <tcpip_init+0x64>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80023d4:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <tcpip_init+0x88>)
 80023d6:	f240 229e 	movw	r2, #670	; 0x29e
 80023da:	4911      	ldr	r1, [pc, #68]	; (8002420 <tcpip_init+0x98>)
 80023dc:	480e      	ldr	r0, [pc, #56]	; (8002418 <tcpip_init+0x90>)
 80023de:	f011 fc07 	bl	8013bf0 <iprintf>
 80023e2:	2000      	movs	r0, #0
 80023e4:	f011 fd06 	bl	8013df4 <fflush>
 80023e8:	f011 fc4b 	bl	8013c82 <abort>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80023ec:	2301      	movs	r3, #1
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2300      	movs	r3, #0
 80023f2:	2200      	movs	r2, #0
 80023f4:	490b      	ldr	r1, [pc, #44]	; (8002424 <tcpip_init+0x9c>)
 80023f6:	480c      	ldr	r0, [pc, #48]	; (8002428 <tcpip_init+0xa0>)
 80023f8:	f7ff fd49 	bl	8001e8e <sys_thread_new>
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000630 	.word	0x20000630
 8002408:	20000634 	.word	0x20000634
 800240c:	20000638 	.word	0x20000638
 8002410:	08015258 	.word	0x08015258
 8002414:	080152c0 	.word	0x080152c0
 8002418:	08015298 	.word	0x08015298
 800241c:	2000087c 	.word	0x2000087c
 8002420:	080152e4 	.word	0x080152e4
 8002424:	0800222d 	.word	0x0800222d
 8002428:	08015308 	.word	0x08015308

0800242c <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	88db      	ldrh	r3, [r3, #6]
 8002438:	3301      	adds	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	88db      	ldrh	r3, [r3, #6]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	88db      	ldrh	r3, [r3, #6]
 800244c:	3301      	adds	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	88db      	ldrh	r3, [r3, #6]
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	78fa      	ldrb	r2, [r7, #3]
 800247c:	711a      	strb	r2, [r3, #4]
  rb->put++;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	3301      	adds	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	2bff      	cmp	r3, #255	; 0xff
 8002490:	d902      	bls.n	8002498 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	801a      	strh	r2, [r3, #0]
  }
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	885b      	ldrh	r3, [r3, #2]
 80024b0:	461a      	mov	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	3304      	adds	r3, #4
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 80024d0:	887b      	ldrh	r3, [r7, #2]
 80024d2:	2bff      	cmp	r3, #255	; 0xff
 80024d4:	d90a      	bls.n	80024ec <mqtt_ringbuf_advance_get_idx+0x28>
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <mqtt_ringbuf_advance_get_idx+0x54>)
 80024d8:	22cb      	movs	r2, #203	; 0xcb
 80024da:	4910      	ldr	r1, [pc, #64]	; (800251c <mqtt_ringbuf_advance_get_idx+0x58>)
 80024dc:	4810      	ldr	r0, [pc, #64]	; (8002520 <mqtt_ringbuf_advance_get_idx+0x5c>)
 80024de:	f011 fb87 	bl	8013bf0 <iprintf>
 80024e2:	2000      	movs	r0, #0
 80024e4:	f011 fc86 	bl	8013df4 <fflush>
 80024e8:	f011 fbcb 	bl	8013c82 <abort>

  rb->get += len;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	885a      	ldrh	r2, [r3, #2]
 80024f0:	887b      	ldrh	r3, [r7, #2]
 80024f2:	4413      	add	r3, r2
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	885b      	ldrh	r3, [r3, #2]
 80024fe:	2bff      	cmp	r3, #255	; 0xff
 8002500:	d906      	bls.n	8002510 <mqtt_ringbuf_advance_get_idx+0x4c>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	885b      	ldrh	r3, [r3, #2]
 8002506:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800250a:	b29a      	uxth	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	805a      	strh	r2, [r3, #2]
  }
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	080153a8 	.word	0x080153a8
 800251c:	080153cc 	.word	0x080153cc
 8002520:	0801540c 	.word	0x0801540c

08002524 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	885b      	ldrh	r3, [r3, #2]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002540:	d303      	bcc.n	800254a <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002548:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	b29b      	uxth	r3, r3
}
 800254e:	4618      	mov	r0, r3
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff ffda 	bl	8002524 <mqtt_ringbuf_len>
 8002570:	4603      	mov	r3, r0
 8002572:	461a      	mov	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	885b      	ldrh	r3, [r3, #2]
 8002578:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800257c:	429a      	cmp	r2, r3
 800257e:	da04      	bge.n	800258a <mqtt_output_send+0x2e>
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ffcf 	bl	8002524 <mqtt_ringbuf_len>
 8002586:	4603      	mov	r3, r0
 8002588:	e004      	b.n	8002594 <mqtt_output_send+0x38>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	885b      	ldrh	r3, [r3, #2]
 800258e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002592:	b29b      	uxth	r3, r3
 8002594:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800259c:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10a      	bne.n	80025ba <mqtt_output_send+0x5e>
 80025a4:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <mqtt_output_send+0x168>)
 80025a6:	22f0      	movs	r2, #240	; 0xf0
 80025a8:	4947      	ldr	r1, [pc, #284]	; (80026c8 <mqtt_output_send+0x16c>)
 80025aa:	4848      	ldr	r0, [pc, #288]	; (80026cc <mqtt_output_send+0x170>)
 80025ac:	f011 fb20 	bl	8013bf0 <iprintf>
 80025b0:	2000      	movs	r0, #0
 80025b2:	f011 fc1f 	bl	8013df4 <fflush>
 80025b6:	f011 fb64 	bl	8013c82 <abort>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 80025ba:	89bb      	ldrh	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d07c      	beq.n	80026ba <mqtt_output_send+0x15e>
 80025c0:	897b      	ldrh	r3, [r7, #10]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d079      	beq.n	80026ba <mqtt_output_send+0x15e>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 80025c6:	89ba      	ldrh	r2, [r7, #12]
 80025c8:	897b      	ldrh	r3, [r7, #10]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d90d      	bls.n	80025ea <mqtt_output_send+0x8e>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 80025ce:	897b      	ldrh	r3, [r7, #10]
 80025d0:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ffa6 	bl	8002524 <mqtt_ringbuf_len>
 80025d8:	4603      	mov	r3, r0
 80025da:	461a      	mov	r2, r3
 80025dc:	897b      	ldrh	r3, [r7, #10]
 80025de:	4293      	cmp	r3, r2
 80025e0:	bf34      	ite	cc
 80025e2:	2301      	movcc	r3, #1
 80025e4:	2300      	movcs	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ff5a 	bl	80024a4 <mqtt_ringbuf_get_ptr>
 80025f0:	4601      	mov	r1, r0
 80025f2:	7bbb      	ldrb	r3, [r7, #14]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <mqtt_output_send+0xa0>
 80025f8:	2303      	movs	r3, #3
 80025fa:	e000      	b.n	80025fe <mqtt_output_send+0xa2>
 80025fc:	2301      	movs	r3, #1
 80025fe:	89ba      	ldrh	r2, [r7, #12]
 8002600:	6838      	ldr	r0, [r7, #0]
 8002602:	f008 ff3f 	bl	800b484 <tcp_write>
 8002606:	4603      	mov	r3, r0
 8002608:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 800260a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d146      	bne.n	80026a0 <mqtt_output_send+0x144>
 8002612:	7bbb      	ldrb	r3, [r7, #14]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d043      	beq.n	80026a0 <mqtt_output_send+0x144>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8002618:	89bb      	ldrh	r3, [r7, #12]
 800261a:	4619      	mov	r1, r3
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff ff51 	bl	80024c4 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002628:	461c      	mov	r4, r3
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff ff7a 	bl	8002524 <mqtt_ringbuf_len>
 8002630:	4603      	mov	r3, r0
 8002632:	461a      	mov	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	885b      	ldrh	r3, [r3, #2]
 8002638:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800263c:	429a      	cmp	r2, r3
 800263e:	da04      	bge.n	800264a <mqtt_output_send+0xee>
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ff6f 	bl	8002524 <mqtt_ringbuf_len>
 8002646:	4603      	mov	r3, r0
 8002648:	e003      	b.n	8002652 <mqtt_output_send+0xf6>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	885b      	ldrh	r3, [r3, #2]
 800264e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002652:	429c      	cmp	r4, r3
 8002654:	da03      	bge.n	800265e <mqtt_output_send+0x102>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800265c:	e014      	b.n	8002688 <mqtt_output_send+0x12c>
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ff60 	bl	8002524 <mqtt_ringbuf_len>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	885b      	ldrh	r3, [r3, #2]
 800266c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002670:	429a      	cmp	r2, r3
 8002672:	da04      	bge.n	800267e <mqtt_output_send+0x122>
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ff55 	bl	8002524 <mqtt_ringbuf_len>
 800267a:	4603      	mov	r3, r0
 800267c:	e004      	b.n	8002688 <mqtt_output_send+0x12c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	885b      	ldrh	r3, [r3, #2]
 8002682:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002686:	b29b      	uxth	r3, r3
 8002688:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ff0a 	bl	80024a4 <mqtt_ringbuf_get_ptr>
 8002690:	4601      	mov	r1, r0
 8002692:	89ba      	ldrh	r2, [r7, #12]
 8002694:	2301      	movs	r3, #1
 8002696:	6838      	ldr	r0, [r7, #0]
 8002698:	f008 fef4 	bl	800b484 <tcp_write>
 800269c:	4603      	mov	r3, r0
 800269e:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 80026a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d109      	bne.n	80026bc <mqtt_output_send+0x160>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 80026a8:	89bb      	ldrh	r3, [r7, #12]
 80026aa:	4619      	mov	r1, r3
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ff09 	bl	80024c4 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 80026b2:	6838      	ldr	r0, [r7, #0]
 80026b4:	f009 fda4 	bl	800c200 <tcp_output>
 80026b8:	e000      	b.n	80026bc <mqtt_output_send+0x160>
    return;
 80026ba:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd90      	pop	{r4, r7, pc}
 80026c2:	bf00      	nop
 80026c4:	080153a8 	.word	0x080153a8
 80026c8:	08015434 	.word	0x08015434
 80026cc:	0801540c 	.word	0x0801540c

080026d0 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10b      	bne.n	8002702 <mqtt_create_request+0x32>
 80026ea:	4b1c      	ldr	r3, [pc, #112]	; (800275c <mqtt_create_request+0x8c>)
 80026ec:	f240 1223 	movw	r2, #291	; 0x123
 80026f0:	491b      	ldr	r1, [pc, #108]	; (8002760 <mqtt_create_request+0x90>)
 80026f2:	481c      	ldr	r0, [pc, #112]	; (8002764 <mqtt_create_request+0x94>)
 80026f4:	f011 fa7c 	bl	8013bf0 <iprintf>
 80026f8:	2000      	movs	r0, #0
 80026fa:	f011 fb7b 	bl	8013df4 <fflush>
 80026fe:	f011 fac0 	bl	8013c82 <abort>
  for (n = 0; n < r_objs_len; n++) {
 8002702:	2300      	movs	r3, #0
 8002704:	74fb      	strb	r3, [r7, #19]
 8002706:	e01f      	b.n	8002748 <mqtt_create_request+0x78>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4413      	add	r3, r2
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	7cfb      	ldrb	r3, [r7, #19]
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	68f9      	ldr	r1, [r7, #12]
 8002718:	440b      	add	r3, r1
 800271a:	429a      	cmp	r2, r3
 800271c:	d111      	bne.n	8002742 <mqtt_create_request+0x72>
      r = &r_objs[n];
 800271e:	7cfb      	ldrb	r3, [r7, #19]
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4413      	add	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	6a3a      	ldr	r2, [r7, #32]
 8002738:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	88fa      	ldrh	r2, [r7, #6]
 800273e:	819a      	strh	r2, [r3, #12]
      break;
 8002740:	e006      	b.n	8002750 <mqtt_create_request+0x80>
  for (n = 0; n < r_objs_len; n++) {
 8002742:	7cfb      	ldrb	r3, [r7, #19]
 8002744:	3301      	adds	r3, #1
 8002746:	74fb      	strb	r3, [r7, #19]
 8002748:	7cfa      	ldrb	r2, [r7, #19]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	429a      	cmp	r2, r3
 800274e:	d3db      	bcc.n	8002708 <mqtt_create_request+0x38>
    }
  }
  return r;
 8002750:	697b      	ldr	r3, [r7, #20]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	080153a8 	.word	0x080153a8
 8002760:	08015454 	.word	0x08015454
 8002764:	0801540c 	.word	0x0801540c

08002768 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10b      	bne.n	8002798 <mqtt_append_request+0x30>
 8002780:	4b20      	ldr	r3, [pc, #128]	; (8002804 <mqtt_append_request+0x9c>)
 8002782:	f240 123f 	movw	r2, #319	; 0x13f
 8002786:	4920      	ldr	r1, [pc, #128]	; (8002808 <mqtt_append_request+0xa0>)
 8002788:	4820      	ldr	r0, [pc, #128]	; (800280c <mqtt_append_request+0xa4>)
 800278a:	f011 fa31 	bl	8013bf0 <iprintf>
 800278e:	2000      	movs	r0, #0
 8002790:	f011 fb30 	bl	8013df4 <fflush>
 8002794:	f011 fa75 	bl	8013c82 <abort>

  /* Iterate through queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	e00a      	b.n	80027b6 <mqtt_append_request+0x4e>
    time_before += iter->timeout_diff;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	89da      	ldrh	r2, [r3, #14]
 80027a4:	8a7b      	ldrh	r3, [r7, #18]
 80027a6:	4413      	add	r3, r2
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	827b      	strh	r3, [r7, #18]
    head = iter;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f1      	bne.n	80027a0 <mqtt_append_request+0x38>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 80027bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027c0:	2b1e      	cmp	r3, #30
 80027c2:	dd0b      	ble.n	80027dc <mqtt_append_request+0x74>
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <mqtt_append_request+0x9c>)
 80027c6:	f240 1247 	movw	r2, #327	; 0x147
 80027ca:	4911      	ldr	r1, [pc, #68]	; (8002810 <mqtt_append_request+0xa8>)
 80027cc:	480f      	ldr	r0, [pc, #60]	; (800280c <mqtt_append_request+0xa4>)
 80027ce:	f011 fa0f 	bl	8013bf0 <iprintf>
 80027d2:	2000      	movs	r0, #0
 80027d4:	f011 fb0e 	bl	8013df4 <fflush>
 80027d8:	f011 fa53 	bl	8013c82 <abort>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 80027dc:	8a7b      	ldrh	r3, [r7, #18]
 80027de:	f1c3 031e 	rsb	r3, r3, #30
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d103      	bne.n	80027f6 <mqtt_append_request+0x8e>
    *tail = r;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 80027f4:	e002      	b.n	80027fc <mqtt_append_request+0x94>
    head->next = r;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	601a      	str	r2, [r3, #0]
}
 80027fc:	bf00      	nop
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	080153a8 	.word	0x080153a8
 8002808:	08015478 	.word	0x08015478
 800280c:	0801540c 	.word	0x0801540c
 8002810:	0801549c 	.word	0x0801549c

08002814 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <mqtt_delete_request+0x14>
    r->next = r;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	601a      	str	r2, [r3, #0]
  }
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10b      	bne.n	8002866 <mqtt_take_request+0x32>
 800284e:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <mqtt_take_request+0xa4>)
 8002850:	f240 1267 	movw	r2, #359	; 0x167
 8002854:	4921      	ldr	r1, [pc, #132]	; (80028dc <mqtt_take_request+0xa8>)
 8002856:	4822      	ldr	r0, [pc, #136]	; (80028e0 <mqtt_take_request+0xac>)
 8002858:	f011 f9ca 	bl	8013bf0 <iprintf>
 800285c:	2000      	movs	r0, #0
 800285e:	f011 fac9 	bl	8013df4 <fflush>
 8002862:	f011 fa0e 	bl	8013c82 <abort>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	e009      	b.n	8002882 <mqtt_take_request+0x4e>
    if (iter->pkt_id == pkt_id) {
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	899b      	ldrh	r3, [r3, #12]
 8002872:	887a      	ldrh	r2, [r7, #2]
 8002874:	429a      	cmp	r2, r3
 8002876:	d008      	beq.n	800288a <mqtt_take_request+0x56>
      break;
    }
    prev = iter;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f2      	bne.n	800286e <mqtt_take_request+0x3a>
 8002888:	e000      	b.n	800288c <mqtt_take_request+0x58>
      break;
 800288a:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01c      	beq.n	80028cc <mqtt_take_request+0x98>
    /* unchain */
    if (prev == NULL) {
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d104      	bne.n	80028a2 <mqtt_take_request+0x6e>
      *tail = iter->next;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	e003      	b.n	80028aa <mqtt_take_request+0x76>
    } else {
      prev->next = iter->next;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d009      	beq.n	80028c6 <mqtt_take_request+0x92>
      iter->next->timeout_diff += iter->timeout_diff;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	89d1      	ldrh	r1, [r2, #14]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	89d2      	ldrh	r2, [r2, #14]
 80028c0:	440a      	add	r2, r1
 80028c2:	b292      	uxth	r2, r2
 80028c4:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
  }
  return iter;
 80028cc:	68fb      	ldr	r3, [r7, #12]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	080153a8 	.word	0x080153a8
 80028dc:	080154d4 	.word	0x080154d4
 80028e0:	0801540c 	.word	0x0801540c

080028e4 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10b      	bne.n	800290e <mqtt_request_time_elapsed+0x2a>
 80028f6:	4b23      	ldr	r3, [pc, #140]	; (8002984 <mqtt_request_time_elapsed+0xa0>)
 80028f8:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 80028fc:	4922      	ldr	r1, [pc, #136]	; (8002988 <mqtt_request_time_elapsed+0xa4>)
 80028fe:	4823      	ldr	r0, [pc, #140]	; (800298c <mqtt_request_time_elapsed+0xa8>)
 8002900:	f011 f976 	bl	8013bf0 <iprintf>
 8002904:	2000      	movs	r0, #0
 8002906:	f011 fa75 	bl	8013df4 <fflush>
 800290a:	f011 f9ba 	bl	8013c82 <abort>
  r = *tail;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 8002914:	e02c      	b.n	8002970 <mqtt_request_time_elapsed+0x8c>
    if (t >= r->timeout_diff) {
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	89db      	ldrh	r3, [r3, #14]
 800291e:	429a      	cmp	r2, r3
 8002920:	d31c      	bcc.n	800295c <mqtt_request_time_elapsed+0x78>
      t -= (u8_t)r->timeout_diff;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	89db      	ldrh	r3, [r3, #14]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d007      	beq.n	800294e <mqtt_request_time_elapsed+0x6a>
        r->cb(r->arg, ERR_TIMEOUT);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	6892      	ldr	r2, [r2, #8]
 8002946:	f06f 0102 	mvn.w	r1, #2
 800294a:	4610      	mov	r0, r2
 800294c:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f7ff ff60 	bl	8002814 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	e009      	b.n	8002970 <mqtt_request_time_elapsed+0x8c>
    } else {
      r->timeout_diff -= t;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	89da      	ldrh	r2, [r3, #14]
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	b29b      	uxth	r3, r3
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	81da      	strh	r2, [r3, #14]
      t = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <mqtt_request_time_elapsed+0x98>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1cc      	bne.n	8002916 <mqtt_request_time_elapsed+0x32>
    }
  }
}
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	080153a8 	.word	0x080153a8
 8002988:	080154f4 	.word	0x080154f4
 800298c:	0801540c 	.word	0x0801540c

08002990 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10b      	bne.n	80029b6 <mqtt_clear_requests+0x26>
 800299e:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <mqtt_clear_requests+0x54>)
 80029a0:	f240 12a7 	movw	r2, #423	; 0x1a7
 80029a4:	4910      	ldr	r1, [pc, #64]	; (80029e8 <mqtt_clear_requests+0x58>)
 80029a6:	4811      	ldr	r0, [pc, #68]	; (80029ec <mqtt_clear_requests+0x5c>)
 80029a8:	f011 f922 	bl	8013bf0 <iprintf>
 80029ac:	2000      	movs	r0, #0
 80029ae:	f011 fa21 	bl	8013df4 <fflush>
 80029b2:	f011 f966 	bl	8013c82 <abort>
  for (iter = *tail; iter != NULL; iter = next) {
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	e007      	b.n	80029ce <mqtt_clear_requests+0x3e>
    next = iter->next;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f7ff ff25 	bl	8002814 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f4      	bne.n	80029be <mqtt_clear_requests+0x2e>
  }
  *tail = NULL;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
}
 80029da:	bf00      	nop
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	080153a8 	.word	0x080153a8
 80029e8:	0801551c 	.word	0x0801551c
 80029ec:	0801540c 	.word	0x0801540c

080029f0 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10b      	bne.n	8002a18 <mqtt_init_requests+0x28>
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <mqtt_init_requests+0x58>)
 8002a02:	f240 12b7 	movw	r2, #439	; 0x1b7
 8002a06:	4911      	ldr	r1, [pc, #68]	; (8002a4c <mqtt_init_requests+0x5c>)
 8002a08:	4811      	ldr	r0, [pc, #68]	; (8002a50 <mqtt_init_requests+0x60>)
 8002a0a:	f011 f8f1 	bl	8013bf0 <iprintf>
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f011 f9f0 	bl	8013df4 <fflush>
 8002a14:	f011 f935 	bl	8013c82 <abort>
  for (n = 0; n < r_objs_len; n++) {
 8002a18:	2300      	movs	r3, #0
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	e00b      	b.n	8002a36 <mqtt_init_requests+0x46>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	0112      	lsls	r2, r2, #4
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	440a      	add	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	3301      	adds	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d3ef      	bcc.n	8002a1e <mqtt_init_requests+0x2e>
  }
}
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	080153a8 	.word	0x080153a8
 8002a4c:	08015540 	.word	0x08015540
 8002a50:	0801540c 	.word	0x0801540c

08002a54 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	4619      	mov	r1, r3
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff fcfd 	bl	8002464 <mqtt_ringbuf_put>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8002a7e:	887b      	ldrh	r3, [r7, #2]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff fceb 	bl	8002464 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	4619      	mov	r1, r3
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff fce5 	bl	8002464 <mqtt_ringbuf_put>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b086      	sub	sp, #24
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	4613      	mov	r3, r2
 8002aae:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	82fb      	strh	r3, [r7, #22]
 8002ab4:	e00a      	b.n	8002acc <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 8002ab6:	8afb      	ldrh	r3, [r7, #22]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	4413      	add	r3, r2
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f7ff fccf 	bl	8002464 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8002ac6:	8afb      	ldrh	r3, [r7, #22]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	82fb      	strh	r3, [r7, #22]
 8002acc:	8afa      	ldrh	r2, [r7, #22]
 8002ace:	88fb      	ldrh	r3, [r7, #6]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d3f0      	bcc.n	8002ab6 <mqtt_output_append_buf+0x14>
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	4619      	mov	r1, r3
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f7ff fcb5 	bl	8002464 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	4619      	mov	r1, r3
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f7ff fcaf 	bl	8002464 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8002b06:	2300      	movs	r3, #0
 8002b08:	82fb      	strh	r3, [r7, #22]
 8002b0a:	e00a      	b.n	8002b22 <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8002b0c:	8afb      	ldrh	r3, [r7, #22]
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	4413      	add	r3, r2
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	4619      	mov	r1, r3
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f7ff fca4 	bl	8002464 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8002b1c:	8afb      	ldrh	r3, [r7, #22]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	82fb      	strh	r3, [r7, #22]
 8002b22:	8afa      	ldrh	r2, [r7, #22]
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d3f0      	bcc.n	8002b0c <mqtt_output_append_string+0x30>
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	4608      	mov	r0, r1
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4603      	mov	r3, r0
 8002b42:	70fb      	strb	r3, [r7, #3]
 8002b44:	460b      	mov	r3, r1
 8002b46:	70bb      	strb	r3, [r7, #2]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	b25a      	sxtb	r2, r3
 8002b52:	78bb      	ldrb	r3, [r7, #2]
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	b25b      	sxtb	r3, r3
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	b25a      	sxtb	r2, r3
 8002b62:	787b      	ldrb	r3, [r7, #1]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	b25b      	sxtb	r3, r3
 8002b68:	f003 0306 	and.w	r3, r3, #6
 8002b6c:	b25b      	sxtb	r3, r3
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	b25a      	sxtb	r2, r3
 8002b72:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	b25b      	sxtb	r3, r3
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	b25b      	sxtb	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	4619      	mov	r1, r3
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ff65 	bl	8002a54 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8002b8a:	8abb      	ldrh	r3, [r7, #20]
 8002b8c:	b25b      	sxtb	r3, r3
 8002b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b92:	b25a      	sxtb	r2, r3
 8002b94:	8abb      	ldrh	r3, [r7, #20]
 8002b96:	2b7f      	cmp	r3, #127	; 0x7f
 8002b98:	d902      	bls.n	8002ba0 <mqtt_output_append_fixed_header+0x6e>
 8002b9a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8002b9e:	e000      	b.n	8002ba2 <mqtt_output_append_fixed_header+0x70>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	b25b      	sxtb	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	4619      	mov	r1, r3
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff ff52 	bl	8002a54 <mqtt_output_append_u8>
    r_length >>= 7;
 8002bb0:	8abb      	ldrh	r3, [r7, #20]
 8002bb2:	09db      	lsrs	r3, r3, #7
 8002bb4:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8002bb6:	8abb      	ldrh	r3, [r7, #20]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1e6      	bne.n	8002b8a <mqtt_output_append_fixed_header+0x58>
}
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8002bd0:	887b      	ldrh	r3, [r7, #2]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10b      	bne.n	8002bf4 <mqtt_output_check_space+0x30>
 8002bdc:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <mqtt_output_check_space+0x64>)
 8002bde:	f240 2207 	movw	r2, #519	; 0x207
 8002be2:	4912      	ldr	r1, [pc, #72]	; (8002c2c <mqtt_output_check_space+0x68>)
 8002be4:	4812      	ldr	r0, [pc, #72]	; (8002c30 <mqtt_output_check_space+0x6c>)
 8002be6:	f011 f803 	bl	8013bf0 <iprintf>
 8002bea:	2000      	movs	r0, #0
 8002bec:	f011 f902 	bl	8013df4 <fflush>
 8002bf0:	f011 f847 	bl	8013c82 <abort>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 8002bf4:	89fb      	ldrh	r3, [r7, #14]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8002bfa:	887b      	ldrh	r3, [r7, #2]
 8002bfc:	09db      	lsrs	r3, r3, #7
 8002bfe:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8002c00:	887b      	ldrh	r3, [r7, #2]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f6      	bne.n	8002bf4 <mqtt_output_check_space+0x30>

  return (total_len <= mqtt_ringbuf_free(rb));
 8002c06:	89fc      	ldrh	r4, [r7, #14]
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff fc8b 	bl	8002524 <mqtt_ringbuf_len>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002c14:	429c      	cmp	r4, r3
 8002c16:	bfd4      	ite	le
 8002c18:	2301      	movle	r3, #1
 8002c1a:	2300      	movgt	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd90      	pop	{r4, r7, pc}
 8002c26:	bf00      	nop
 8002c28:	080153a8 	.word	0x080153a8
 8002c2c:	08015564 	.word	0x08015564
 8002c30:	0801540c 	.word	0x0801540c

08002c34 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10b      	bne.n	8002c5e <mqtt_close+0x2a>
 8002c46:	4b2a      	ldr	r3, [pc, #168]	; (8002cf0 <mqtt_close+0xbc>)
 8002c48:	f240 221b 	movw	r2, #539	; 0x21b
 8002c4c:	4929      	ldr	r1, [pc, #164]	; (8002cf4 <mqtt_close+0xc0>)
 8002c4e:	482a      	ldr	r0, [pc, #168]	; (8002cf8 <mqtt_close+0xc4>)
 8002c50:	f010 ffce 	bl	8013bf0 <iprintf>
 8002c54:	2000      	movs	r0, #0
 8002c56:	f011 f8cd 	bl	8013df4 <fflush>
 8002c5a:	f011 f812 	bl	8013c82 <abort>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d024      	beq.n	8002cb0 <mqtt_close+0x7c>
    err_t res;
    altcp_recv(client->conn, NULL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f005 fb37 	bl	80082e0 <tcp_recv>
    altcp_err(client->conn,  NULL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f005 fb7d 	bl	8008378 <tcp_err>
    altcp_sent(client->conn, NULL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f005 fb51 	bl	800832c <tcp_sent>
    res = altcp_close(client->conn);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f004 f8cc 	bl	8006e2c <tcp_close>
 8002c94:	4603      	mov	r3, r0
 8002c96:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 8002c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <mqtt_close+0x76>
      altcp_abort(client->conn);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f004 f9af 	bl	8007008 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3318      	adds	r3, #24
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fe6b 	bl	8002990 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	480f      	ldr	r0, [pc, #60]	; (8002cfc <mqtt_close+0xc8>)
 8002cbe:	f00a fc55 	bl	800d56c <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	7a9b      	ldrb	r3, [r3, #10]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00d      	beq.n	8002ce6 <mqtt_close+0xb2>

    client->conn_state = TCP_DISCONNECTED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <mqtt_close+0xb2>
      client->connect_cb(client, client->connect_arg, reason);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6911      	ldr	r1, [r2, #16]
 8002ce0:	887a      	ldrh	r2, [r7, #2]
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	4798      	blx	r3
    }
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	080153a8 	.word	0x080153a8
 8002cf4:	08015588 	.word	0x08015588
 8002cf8:	0801540c 	.word	0x0801540c
 8002cfc:	08002d01 	.word	0x08002d01

08002d00 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10b      	bne.n	8002d2e <mqtt_cyclic_timer+0x2e>
 8002d16:	4b44      	ldr	r3, [pc, #272]	; (8002e28 <mqtt_cyclic_timer+0x128>)
 8002d18:	f44f 7211 	mov.w	r2, #580	; 0x244
 8002d1c:	4943      	ldr	r1, [pc, #268]	; (8002e2c <mqtt_cyclic_timer+0x12c>)
 8002d1e:	4844      	ldr	r0, [pc, #272]	; (8002e30 <mqtt_cyclic_timer+0x130>)
 8002d20:	f010 ff66 	bl	8013bf0 <iprintf>
 8002d24:	2000      	movs	r0, #0
 8002d26:	f011 f865 	bl	8013df4 <fflush>
 8002d2a:	f010 ffaa 	bl	8013c82 <abort>

  if (client->conn_state == MQTT_CONNECTING) {
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	7a9b      	ldrb	r3, [r3, #10]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d115      	bne.n	8002d62 <mqtt_cyclic_timer+0x62>
    client->cyclic_tick++;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	2b63      	cmp	r3, #99	; 0x63
 8002d50:	dd5d      	ble.n	8002e0e <mqtt_cyclic_timer+0x10e>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8002d52:	f240 1101 	movw	r1, #257	; 0x101
 8002d56:	68b8      	ldr	r0, [r7, #8]
 8002d58:	f7ff ff6c 	bl	8002c34 <mqtt_close>
      restart_timer = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	73fb      	strb	r3, [r7, #15]
 8002d60:	e055      	b.n	8002e0e <mqtt_cyclic_timer+0x10e>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	7a9b      	ldrb	r3, [r3, #10]
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d14f      	bne.n	8002e0a <mqtt_cyclic_timer+0x10a>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	3318      	adds	r3, #24
 8002d6e:	2105      	movs	r1, #5
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fdb7 	bl	80028e4 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	885b      	ldrh	r3, [r3, #2]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d047      	beq.n	8002e0e <mqtt_cyclic_timer+0x10e>

      client->server_watchdog++;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	889b      	ldrh	r3, [r3, #4]
 8002d82:	3301      	adds	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	889b      	ldrh	r3, [r3, #4]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	441a      	add	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	885b      	ldrh	r3, [r3, #2]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	885b      	ldrh	r3, [r3, #2]
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	440b      	add	r3, r1
 8002da6:	429a      	cmp	r2, r3
 8002da8:	dd06      	ble.n	8002db8 <mqtt_cyclic_timer+0xb8>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8002daa:	f240 1101 	movw	r1, #257	; 0x101
 8002dae:	68b8      	ldr	r0, [r7, #8]
 8002db0:	f7ff ff40 	bl	8002c34 <mqtt_close>
        restart_timer = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      client->cyclic_tick++;
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	801a      	strh	r2, [r3, #0]
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	8852      	ldrh	r2, [r2, #2]
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	db1a      	blt.n	8002e0e <mqtt_cyclic_timer+0x10e>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	33ec      	adds	r3, #236	; 0xec
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fef0 	bl	8002bc4 <mqtt_output_check_space>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d011      	beq.n	8002e0e <mqtt_cyclic_timer+0x10e>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8002df0:	2300      	movs	r3, #0
 8002df2:	9301      	str	r3, [sp, #4]
 8002df4:	2300      	movs	r3, #0
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	210c      	movs	r1, #12
 8002dfe:	f7ff fe98 	bl	8002b32 <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2200      	movs	r2, #0
 8002e06:	801a      	strh	r2, [r3, #0]
 8002e08:	e001      	b.n	8002e0e <mqtt_cyclic_timer+0x10e>
        }
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <mqtt_cyclic_timer+0x120>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	4907      	ldr	r1, [pc, #28]	; (8002e34 <mqtt_cyclic_timer+0x134>)
 8002e18:	f241 3088 	movw	r0, #5000	; 0x1388
 8002e1c:	f00a fb7a 	bl	800d514 <sys_timeout>
  }
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	080153a8 	.word	0x080153a8
 8002e2c:	080155a4 	.word	0x080155a4
 8002e30:	0801540c 	.word	0x0801540c
 8002e34:	08002d01 	.word	0x08002d01

08002e38 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	4608      	mov	r0, r1
 8002e42:	4611      	mov	r1, r2
 8002e44:	461a      	mov	r2, r3
 8002e46:	4603      	mov	r3, r0
 8002e48:	70fb      	strb	r3, [r7, #3]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	803b      	strh	r3, [r7, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	33ec      	adds	r3, #236	; 0xec
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff feb1 	bl	8002bc4 <mqtt_output_check_space>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01d      	beq.n	8002ea4 <pub_ack_rec_rel_response+0x6c>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8002e6e:	78ba      	ldrb	r2, [r7, #2]
 8002e70:	78f9      	ldrb	r1, [r7, #3]
 8002e72:	2302      	movs	r3, #2
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	2300      	movs	r3, #0
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f7ff fe58 	bl	8002b32 <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	33ec      	adds	r3, #236	; 0xec
 8002e86:	883a      	ldrh	r2, [r7, #0]
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fdf1 	bl	8002a72 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	f7ff fb5d 	bl	800255c <mqtt_output_send>
 8002ea2:	e001      	b.n	8002ea8 <pub_ack_rec_rel_response+0x70>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 8002ea4:	23ff      	movs	r3, #255	; 0xff
 8002ea6:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 8002ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <mqtt_incoming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incoming_suback(struct mqtt_request_t *r, u8_t result)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00c      	beq.n	8002ee2 <mqtt_incoming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6890      	ldr	r0, [r2, #8]
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	2a02      	cmp	r2, #2
 8002ed4:	d801      	bhi.n	8002eda <mqtt_incoming_suback+0x26>
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	e001      	b.n	8002ede <mqtt_incoming_suback+0x2a>
 8002eda:	f06f 020c 	mvn.w	r2, #12
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4798      	blx	r3
  }
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <mqtt_message_received>:
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_len, u16_t length, u32_t remaining_length,
                      u8_t *var_hdr_payload)
{
 8002eec:	b590      	push	{r4, r7, lr}
 8002eee:	b08f      	sub	sp, #60	; 0x3c
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	607b      	str	r3, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	72fb      	strb	r3, [r7, #11]
 8002efa:	4613      	mov	r3, r2
 8002efc:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8002efe:	2300      	movs	r3, #0
 8002f00:	86fb      	strh	r3, [r7, #54]	; 0x36

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  u16_t pkt_id = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	85bb      	strh	r3, [r7, #44]	; 0x2c

  LWIP_ASSERT("fixed_hdr_len <= client->msg_idx", fixed_hdr_len <= client->msg_idx);
 8002f12:	7afa      	ldrb	r2, [r7, #11]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d90b      	bls.n	8002f34 <mqtt_message_received+0x48>
 8002f1c:	4ba3      	ldr	r3, [pc, #652]	; (80031ac <mqtt_message_received+0x2c0>)
 8002f1e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8002f22:	49a3      	ldr	r1, [pc, #652]	; (80031b0 <mqtt_message_received+0x2c4>)
 8002f24:	48a3      	ldr	r0, [pc, #652]	; (80031b4 <mqtt_message_received+0x2c8>)
 8002f26:	f010 fe63 	bl	8013bf0 <iprintf>
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	f010 ff62 	bl	8013df4 <fflush>
 8002f30:	f010 fea7 	bl	8013c82 <abort>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_len + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 8002f34:	7afa      	ldrb	r2, [r7, #11]
 8002f36:	893b      	ldrh	r3, [r7, #8]
 8002f38:	4413      	add	r3, r2
 8002f3a:	2b80      	cmp	r3, #128	; 0x80
 8002f3c:	dd09      	ble.n	8002f52 <mqtt_message_received+0x66>
 8002f3e:	4b9b      	ldr	r3, [pc, #620]	; (80031ac <mqtt_message_received+0x2c0>)
 8002f40:	f240 22aa 	movw	r2, #682	; 0x2aa
 8002f44:	499c      	ldr	r1, [pc, #624]	; (80031b8 <mqtt_message_received+0x2cc>)
 8002f46:	489b      	ldr	r0, [pc, #620]	; (80031b4 <mqtt_message_received+0x2c8>)
 8002f48:	f7fe ffaf 	bl	8001eaa <lwip_win32_platform_diag>
 8002f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f50:	e184      	b.n	800325c <mqtt_message_received+0x370>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 8002f52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d123      	bne.n	8002fa2 <mqtt_message_received+0xb6>
    if (client->conn_state == MQTT_CONNECTING) {
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	7a9b      	ldrb	r3, [r3, #10]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	f040 8165 	bne.w	800322e <mqtt_message_received+0x342>
      if (length < 2) {
 8002f64:	893b      	ldrh	r3, [r7, #8]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	f240 8163 	bls.w	8003232 <mqtt_message_received+0x346>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 8002f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f6e:	3301      	adds	r3, #1
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 8002f74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 8159 	bne.w	800322e <mqtt_message_received+0x342>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2203      	movs	r2, #3
 8002f86:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != NULL) {
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 814e 	beq.w	800322e <mqtt_message_received+0x342>
          client->connect_cb(client, client->connect_arg, res);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	6911      	ldr	r1, [r2, #16]
 8002f9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	4798      	blx	r3
 8002fa0:	e145      	b.n	800322e <mqtt_message_received+0x342>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 8002fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fa6:	2b0d      	cmp	r3, #13
 8002fa8:	f000 8141 	beq.w	800322e <mqtt_message_received+0x342>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 8002fac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	f040 80d2 	bne.w	800315a <mqtt_message_received+0x26e>
    u16_t payload_offset = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 8002fba:	893b      	ldrh	r3, [r7, #8]
 8002fbc:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002fc4:	105b      	asrs	r3, r3, #1
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if (client->msg_idx == (u32_t)(fixed_hdr_len + length)) {
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fd4:	7af9      	ldrb	r1, [r7, #11]
 8002fd6:	893a      	ldrh	r2, [r7, #8]
 8002fd8:	440a      	add	r2, r1
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	f040 8085 	bne.w	80030ea <mqtt_message_received+0x1fe>
      /* First publish message frame. Should have topic and pkt id*/
      size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_len;
 8002fe0:	7afb      	ldrb	r3, [r7, #11]
 8002fe2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 8002fe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <mqtt_message_received+0x108>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e000      	b.n	8002ff6 <mqtt_message_received+0x10a>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	847b      	strh	r3, [r7, #34]	; 0x22
      if (length < 2 + qos_len) {
 8002ff8:	893a      	ldrh	r2, [r7, #8]
 8002ffa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	429a      	cmp	r2, r3
 8003000:	f2c0 8119 	blt.w	8003236 <mqtt_message_received+0x34a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 8003004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	843b      	strh	r3, [r7, #32]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 800300a:	8c3b      	ldrh	r3, [r7, #32]
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	b29a      	uxth	r2, r3
 8003010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003012:	3301      	adds	r3, #1
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	4413      	add	r3, r2
 800301a:	843b      	strh	r3, [r7, #32]
      if ((topic_len > length - (2 + qos_len)) ||
 800301c:	8c3a      	ldrh	r2, [r7, #32]
 800301e:	8939      	ldrh	r1, [r7, #8]
 8003020:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003022:	3302      	adds	r3, #2
 8003024:	1acb      	subs	r3, r1, r3
 8003026:	429a      	cmp	r2, r3
 8003028:	f300 8107 	bgt.w	800323a <mqtt_message_received+0x34e>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 800302c:	8c3a      	ldrh	r2, [r7, #32]
 800302e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003032:	1acb      	subs	r3, r1, r3
 8003034:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 8003036:	429a      	cmp	r2, r3
 8003038:	f200 80ff 	bhi.w	800323a <mqtt_message_received+0x34e>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 800303c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303e:	3302      	adds	r3, #2
 8003040:	61fb      	str	r3, [r7, #28]
      after_topic = 2 + topic_len;
 8003042:	8c3b      	ldrh	r3, [r7, #32]
 8003044:	3302      	adds	r3, #2
 8003046:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8003048:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800304a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <mqtt_message_received+0x16a>
 8003052:	2302      	movs	r3, #2
 8003054:	e000      	b.n	8003058 <mqtt_message_received+0x16c>
 8003056:	2301      	movs	r3, #1
 8003058:	441a      	add	r2, r3
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	429a      	cmp	r2, r3
 800305e:	f200 80ee 	bhi.w	800323e <mqtt_message_received+0x352>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 8003062:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003066:	2b00      	cmp	r3, #0
 8003068:	d01a      	beq.n	80030a0 <mqtt_message_received+0x1b4>
        if (length < after_topic + 2U) {
 800306a:	893a      	ldrh	r2, [r7, #8]
 800306c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800306e:	3302      	adds	r3, #2
 8003070:	429a      	cmp	r2, r3
 8003072:	f0c0 80e6 	bcc.w	8003242 <mqtt_message_received+0x356>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8003076:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800307a:	4413      	add	r3, r2
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	021b      	lsls	r3, r3, #8
 8003082:	b29a      	uxth	r2, r3
 8003084:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003086:	3301      	adds	r3, #1
 8003088:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800308a:	440b      	add	r3, r1
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	b29b      	uxth	r3, r3
 8003090:	4413      	add	r3, r2
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 8003098:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800309a:	3302      	adds	r3, #2
 800309c:	863b      	strh	r3, [r7, #48]	; 0x30
 800309e:	e002      	b.n	80030a6 <mqtt_message_received+0x1ba>
      } else {
        client->inpub_pkt_id = 0;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 80030a6:	8c3b      	ldrh	r3, [r7, #32]
 80030a8:	69fa      	ldr	r2, [r7, #28]
 80030aa:	4413      	add	r3, r2
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	76fb      	strb	r3, [r7, #27]
      /* Zero terminate string */
      topic[topic_len] = 0;
 80030b0:	8c3b      	ldrh	r3, [r7, #32]
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	4413      	add	r3, r2
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 80030ba:	893a      	ldrh	r2, [r7, #8]
 80030bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 80030c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80030c4:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incoming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d008      	beq.n	80030e0 <mqtt_message_received+0x1f4>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 80030d6:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	440a      	add	r2, r1
 80030dc:	69f9      	ldr	r1, [r7, #28]
 80030de:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 80030e0:	8c3b      	ldrh	r3, [r7, #32]
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	4413      	add	r3, r2
 80030e6:	7efa      	ldrb	r2, [r7, #27]
 80030e8:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 80030ea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d103      	bne.n	80030f8 <mqtt_message_received+0x20c>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f040 809b 	bne.w	800322e <mqtt_message_received+0x342>
      if (length < (size_t)(payload_offset + payload_length)) {
 80030f8:	893b      	ldrh	r3, [r7, #8]
 80030fa:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80030fc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80030fe:	440a      	add	r2, r1
 8003100:	4293      	cmp	r3, r2
 8003102:	f0c0 80a0 	bcc.w	8003246 <mqtt_message_received+0x35a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      if (client->data_cb != NULL) {
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00e      	beq.n	800312c <mqtt_message_received+0x240>
        client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8003116:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800311a:	18d1      	adds	r1, r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	bf0c      	ite	eq
 8003122:	2301      	moveq	r3, #1
 8003124:	2300      	movne	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800312a:	47a0      	blx	r4
      }
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d17d      	bne.n	800322e <mqtt_message_received+0x342>
 8003132:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003136:	2b00      	cmp	r3, #0
 8003138:	d079      	beq.n	800322e <mqtt_message_received+0x342>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 800313a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <mqtt_message_received+0x25a>
 8003142:	2304      	movs	r3, #4
 8003144:	e000      	b.n	8003148 <mqtt_message_received+0x25c>
 8003146:	2305      	movs	r3, #5
 8003148:	76bb      	strb	r3, [r7, #26]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incoming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	891a      	ldrh	r2, [r3, #8]
 800314e:	7eb9      	ldrb	r1, [r7, #26]
 8003150:	2300      	movs	r3, #0
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f7ff fe70 	bl	8002e38 <pub_ack_rec_rel_response>
 8003158:	e069      	b.n	800322e <mqtt_message_received+0x342>
      }
    }
  } else {
    if (length < 2) {
 800315a:	893b      	ldrh	r3, [r7, #8]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d974      	bls.n	800324a <mqtt_message_received+0x35e>
      LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short message\n"));
      goto out_disconnect;
    }
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 8003160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	b29b      	uxth	r3, r3
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	85bb      	strh	r3, [r7, #44]	; 0x2c
    pkt_id |= (u16_t)var_hdr_payload[1];
 800316a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800316c:	3301      	adds	r3, #1
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	b29a      	uxth	r2, r3
 8003172:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003174:	4313      	orrs	r3, r2
 8003176:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (pkt_id == 0) {
 8003178:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d067      	beq.n	800324e <mqtt_message_received+0x362>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 800317e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003182:	2b05      	cmp	r3, #5
 8003184:	d106      	bne.n	8003194 <mqtt_message_received+0x2a8>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 8003186:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003188:	2301      	movs	r3, #1
 800318a:	2106      	movs	r1, #6
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f7ff fe53 	bl	8002e38 <pub_ack_rec_rel_response>
 8003192:	e04c      	b.n	800322e <mqtt_message_received+0x342>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 8003194:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003198:	2b06      	cmp	r3, #6
 800319a:	d10f      	bne.n	80031bc <mqtt_message_received+0x2d0>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 800319c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800319e:	2300      	movs	r3, #0
 80031a0:	2107      	movs	r1, #7
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f7ff fe48 	bl	8002e38 <pub_ack_rec_rel_response>
 80031a8:	e041      	b.n	800322e <mqtt_message_received+0x342>
 80031aa:	bf00      	nop
 80031ac:	080153a8 	.word	0x080153a8
 80031b0:	080155c8 	.word	0x080155c8
 80031b4:	0801540c 	.word	0x0801540c
 80031b8:	080155ec 	.word	0x080155ec

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 80031bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031c0:	2b09      	cmp	r3, #9
 80031c2:	d00b      	beq.n	80031dc <mqtt_message_received+0x2f0>
 80031c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031c8:	2b0b      	cmp	r3, #11
 80031ca:	d007      	beq.n	80031dc <mqtt_message_received+0x2f0>
 80031cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031d0:	2b07      	cmp	r3, #7
 80031d2:	d003      	beq.n	80031dc <mqtt_message_received+0x2f0>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 80031d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d13a      	bne.n	8003252 <mqtt_message_received+0x366>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	3318      	adds	r3, #24
 80031e0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fb25 	bl	8002834 <mqtt_take_request>
 80031ea:	6178      	str	r0, [r7, #20]
      if (r != NULL) {
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d01c      	beq.n	800322c <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 80031f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031f6:	2b09      	cmp	r3, #9
 80031f8:	d10a      	bne.n	8003210 <mqtt_message_received+0x324>
          if (length < 3) {
 80031fa:	893b      	ldrh	r3, [r7, #8]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d92a      	bls.n	8003256 <mqtt_message_received+0x36a>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incoming_suback(r, var_hdr_payload[2]);
 8003200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003202:	3302      	adds	r3, #2
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	4619      	mov	r1, r3
 8003208:	6978      	ldr	r0, [r7, #20]
 800320a:	f7ff fe53 	bl	8002eb4 <mqtt_incoming_suback>
 800320e:	e00a      	b.n	8003226 <mqtt_message_received+0x33a>
          }
        } else if (r->cb != NULL) {
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d006      	beq.n	8003226 <mqtt_message_received+0x33a>
          r->cb(r->arg, ERR_OK);
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	6892      	ldr	r2, [r2, #8]
 8003220:	2100      	movs	r1, #0
 8003222:	4610      	mov	r0, r2
 8003224:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 8003226:	6978      	ldr	r0, [r7, #20]
 8003228:	f7ff faf4 	bl	8002814 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800322c:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 800322e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003230:	e014      	b.n	800325c <mqtt_message_received+0x370>
        goto out_disconnect;
 8003232:	bf00      	nop
 8003234:	e010      	b.n	8003258 <mqtt_message_received+0x36c>
        goto out_disconnect;
 8003236:	bf00      	nop
 8003238:	e00e      	b.n	8003258 <mqtt_message_received+0x36c>
        goto out_disconnect;
 800323a:	bf00      	nop
 800323c:	e00c      	b.n	8003258 <mqtt_message_received+0x36c>
        goto out_disconnect;
 800323e:	bf00      	nop
 8003240:	e00a      	b.n	8003258 <mqtt_message_received+0x36c>
          goto out_disconnect;
 8003242:	bf00      	nop
 8003244:	e008      	b.n	8003258 <mqtt_message_received+0x36c>
        goto out_disconnect;
 8003246:	bf00      	nop
 8003248:	e006      	b.n	8003258 <mqtt_message_received+0x36c>
      goto out_disconnect;
 800324a:	bf00      	nop
 800324c:	e004      	b.n	8003258 <mqtt_message_received+0x36c>
      goto out_disconnect;
 800324e:	bf00      	nop
 8003250:	e002      	b.n	8003258 <mqtt_message_received+0x36c>
      goto out_disconnect;
 8003252:	bf00      	nop
 8003254:	e000      	b.n	8003258 <mqtt_message_received+0x36c>
            goto out_disconnect;
 8003256:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 8003258:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800325c:	4618      	mov	r0, r3
 800325e:	373c      	adds	r7, #60	; 0x3c
 8003260:	46bd      	mov	sp, r7
 8003262:	bd90      	pop	{r4, r7, pc}

08003264 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08a      	sub	sp, #40	; 0x28
 8003268:	af02      	add	r7, sp, #8
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_len = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 800327e:	e0b7      	b.n	80033f0 <mqtt_parse_incoming+0x18c>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_len < 2) || ((b & 0x80) != 0)) {
 8003280:	7dfb      	ldrb	r3, [r7, #23]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d903      	bls.n	800328e <mqtt_parse_incoming+0x2a>
 8003286:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800328a:	2b00      	cmp	r3, #0
 800328c:	da4f      	bge.n	800332e <mqtt_parse_incoming+0xca>

      if (fixed_hdr_len < client->msg_idx) {
 800328e:	7dfa      	ldrb	r2, [r7, #23]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003294:	429a      	cmp	r2, r3
 8003296:	d206      	bcs.n	80032a6 <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_len];
 8003298:	7dfb      	ldrb	r3, [r7, #23]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80032a2:	75bb      	strb	r3, [r7, #22]
 80032a4:	e012      	b.n	80032cc <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 80032a6:	8bfb      	ldrh	r3, [r7, #30]
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	83fa      	strh	r2, [r7, #30]
 80032ac:	4619      	mov	r1, r3
 80032ae:	6838      	ldr	r0, [r7, #0]
 80032b0:	f003 fb40 	bl	8006934 <pbuf_get_at>
 80032b4:	4603      	mov	r3, r0
 80032b6:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032bc:	1c59      	adds	r1, r3, #1
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6691      	str	r1, [r2, #104]	; 0x68
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	7dba      	ldrb	r2, [r7, #22]
 80032c8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_len++;
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	3301      	adds	r3, #1
 80032d0:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_len >= 2) {
 80032d2:	7dfb      	ldrb	r3, [r7, #23]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	f240 808b 	bls.w	80033f0 <mqtt_parse_incoming+0x18c>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_len - 2) * 7);
 80032da:	7dbb      	ldrb	r3, [r7, #22]
 80032dc:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	1e9a      	subs	r2, r3, #2
 80032e4:	4613      	mov	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 80032f4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	db79      	blt.n	80033f0 <mqtt_parse_incoming+0x18c>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10d      	bne.n	800331e <mqtt_parse_incoming+0xba>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_len, 0, 0, NULL);
 8003302:	7df9      	ldrb	r1, [r7, #23]
 8003304:	2300      	movs	r3, #0
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	2300      	movs	r3, #0
 800330a:	2200      	movs	r2, #0
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff fded 	bl	8002eec <mqtt_message_received>
            client->msg_idx = 0;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_len = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	75fb      	strb	r3, [r7, #23]
 800331c:	e068      	b.n	80033f0 <mqtt_parse_incoming+0x18c>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_len) - client->msg_idx;
 800331e:	7dfa      	ldrb	r2, [r7, #23]
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	441a      	add	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_len >= 2) {
 800332c:	e060      	b.n	80033f0 <mqtt_parse_incoming+0x18c>
      u16_t cpy_len, buffer_space;
      u8_t *var_hdr_payload;
      mqtt_connection_status_t res;

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	891a      	ldrh	r2, [r3, #8]
 8003332:	8bfb      	ldrh	r3, [r7, #30]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	b29b      	uxth	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	429a      	cmp	r2, r3
 800333e:	d205      	bcs.n	800334c <mqtt_parse_incoming+0xe8>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	891a      	ldrh	r2, [r3, #8]
 8003344:	8bfb      	ldrh	r3, [r7, #30]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	b29b      	uxth	r3, r3
 800334a:	e001      	b.n	8003350 <mqtt_parse_incoming+0xec>
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	b29b      	uxth	r3, r3
 8003350:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_len;
 8003352:	7dfb      	ldrb	r3, [r7, #23]
 8003354:	b29b      	uxth	r3, r3
 8003356:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800335a:	827b      	strh	r3, [r7, #18]
      if (cpy_len > buffer_space) {
 800335c:	8aba      	ldrh	r2, [r7, #20]
 800335e:	8a7b      	ldrh	r3, [r7, #18]
 8003360:	429a      	cmp	r2, r3
 8003362:	d901      	bls.n	8003368 <mqtt_parse_incoming+0x104>
        cpy_len = buffer_space;
 8003364:	8a7b      	ldrh	r3, [r7, #18]
 8003366:	82bb      	strh	r3, [r7, #20]
      }
      /* Adjust cpy_len to ensure zero-copy operation for remaining parts of current message */
      if (client->msg_idx >= MQTT_VAR_HEADER_BUFFER_LEN) {
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800336c:	2b7f      	cmp	r3, #127	; 0x7f
 800336e:	d90c      	bls.n	800338a <mqtt_parse_incoming+0x126>
        if (cpy_len > (p->len - in_offset))
 8003370:	8aba      	ldrh	r2, [r7, #20]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	895b      	ldrh	r3, [r3, #10]
 8003376:	4619      	mov	r1, r3
 8003378:	8bfb      	ldrh	r3, [r7, #30]
 800337a:	1acb      	subs	r3, r1, r3
 800337c:	429a      	cmp	r2, r3
 800337e:	dd04      	ble.n	800338a <mqtt_parse_incoming+0x126>
          cpy_len = p->len - in_offset;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	895a      	ldrh	r2, [r3, #10]
 8003384:	8bfb      	ldrh	r3, [r7, #30]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	82bb      	strh	r3, [r7, #20]
      }
      var_hdr_payload = (u8_t*)pbuf_get_contiguous(p, client->rx_buffer + fixed_hdr_len,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	18d1      	adds	r1, r2, r3
 8003394:	8a7a      	ldrh	r2, [r7, #18]
 8003396:	8ab8      	ldrh	r0, [r7, #20]
 8003398:	8bfb      	ldrh	r3, [r7, #30]
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	4603      	mov	r3, r0
 800339e:	6838      	ldr	r0, [r7, #0]
 80033a0:	f003 f9ea 	bl	8006778 <pbuf_get_contiguous>
 80033a4:	60f8      	str	r0, [r7, #12]
                                                   buffer_space, cpy_len, in_offset);

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80033aa:	8abb      	ldrh	r3, [r7, #20]
 80033ac:	441a      	add	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 80033b2:	8bfa      	ldrh	r2, [r7, #30]
 80033b4:	8abb      	ldrh	r3, [r7, #20]
 80033b6:	4413      	add	r3, r2
 80033b8:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 80033ba:	8abb      	ldrh	r3, [r7, #20]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      /* Whole or partial message received */
      res = mqtt_message_received(client, fixed_hdr_len, cpy_len, msg_rem_len, var_hdr_payload);
 80033c2:	8aba      	ldrh	r2, [r7, #20]
 80033c4:	7df9      	ldrb	r1, [r7, #23]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff fd8d 	bl	8002eec <mqtt_message_received>
 80033d2:	4603      	mov	r3, r0
 80033d4:	817b      	strh	r3, [r7, #10]
      if (res != MQTT_CONNECT_ACCEPTED) {
 80033d6:	897b      	ldrh	r3, [r7, #10]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <mqtt_parse_incoming+0x17c>
        return res;
 80033dc:	897b      	ldrh	r3, [r7, #10]
 80033de:	e00e      	b.n	80033fe <mqtt_parse_incoming+0x19a>
      }
      if (msg_rem_len == 0) {
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d104      	bne.n	80033f0 <mqtt_parse_incoming+0x18c>
        /* Reset parser state */
        client->msg_idx = 0;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	669a      	str	r2, [r3, #104]	; 0x68
        /* msg_tot_len = 0; */
        fixed_hdr_len = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	891b      	ldrh	r3, [r3, #8]
 80033f4:	8bfa      	ldrh	r2, [r7, #30]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	f4ff af42 	bcc.w	8003280 <mqtt_parse_incoming+0x1c>
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3720      	adds	r7, #32
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10b      	bne.n	8003438 <mqtt_tcp_recv_cb+0x30>
 8003420:	4b29      	ldr	r3, [pc, #164]	; (80034c8 <mqtt_tcp_recv_cb+0xc0>)
 8003422:	f240 32ae 	movw	r2, #942	; 0x3ae
 8003426:	4929      	ldr	r1, [pc, #164]	; (80034cc <mqtt_tcp_recv_cb+0xc4>)
 8003428:	4829      	ldr	r0, [pc, #164]	; (80034d0 <mqtt_tcp_recv_cb+0xc8>)
 800342a:	f010 fbe1 	bl	8013bf0 <iprintf>
 800342e:	2000      	movs	r0, #0
 8003430:	f010 fce0 	bl	8013df4 <fflush>
 8003434:	f010 fc25 	bl	8013c82 <abort>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	429a      	cmp	r2, r3
 8003440:	d00b      	beq.n	800345a <mqtt_tcp_recv_cb+0x52>
 8003442:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <mqtt_tcp_recv_cb+0xc0>)
 8003444:	f240 32af 	movw	r2, #943	; 0x3af
 8003448:	4922      	ldr	r1, [pc, #136]	; (80034d4 <mqtt_tcp_recv_cb+0xcc>)
 800344a:	4821      	ldr	r0, [pc, #132]	; (80034d0 <mqtt_tcp_recv_cb+0xc8>)
 800344c:	f010 fbd0 	bl	8013bf0 <iprintf>
 8003450:	2000      	movs	r0, #0
 8003452:	f010 fccf 	bl	8013df4 <fflush>
 8003456:	f010 fc14 	bl	8013c82 <abort>

  if (p == NULL) {
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d105      	bne.n	800346c <mqtt_tcp_recv_cb+0x64>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8003460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003464:	6978      	ldr	r0, [r7, #20]
 8003466:	f7ff fbe5 	bl	8002c34 <mqtt_close>
 800346a:	e027      	b.n	80034bc <mqtt_tcp_recv_cb+0xb4>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 800346c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <mqtt_tcp_recv_cb+0x78>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f002 fe9d 	bl	80061b4 <pbuf_free>
      return err;
 800347a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800347e:	e01e      	b.n	80034be <mqtt_tcp_recv_cb+0xb6>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	891b      	ldrh	r3, [r3, #8]
 8003484:	4619      	mov	r1, r3
 8003486:	68b8      	ldr	r0, [r7, #8]
 8003488:	f003 fec8 	bl	800721c <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	6978      	ldr	r0, [r7, #20]
 8003490:	f7ff fee8 	bl	8003264 <mqtt_parse_incoming>
 8003494:	4603      	mov	r3, r0
 8003496:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f002 fe8b 	bl	80061b4 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 800349e:	8a7b      	ldrh	r3, [r7, #18]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d004      	beq.n	80034ae <mqtt_tcp_recv_cb+0xa6>
      mqtt_close(client, res);
 80034a4:	8a7b      	ldrh	r3, [r7, #18]
 80034a6:	4619      	mov	r1, r3
 80034a8:	6978      	ldr	r0, [r7, #20]
 80034aa:	f7ff fbc3 	bl	8002c34 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	885b      	ldrh	r3, [r3, #2]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <mqtt_tcp_recv_cb+0xb4>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2200      	movs	r2, #0
 80034ba:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	080153a8 	.word	0x080153a8
 80034cc:	08015604 	.word	0x08015604
 80034d0:	0801540c 	.word	0x0801540c
 80034d4:	08015628 	.word	0x08015628

080034d8 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	4613      	mov	r3, r2
 80034e4:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	7a9b      	ldrb	r3, [r3, #10]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d127      	bne.n	8003542 <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2200      	movs	r2, #0
 80034f6:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2200      	movs	r2, #0
 80034fc:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 80034fe:	e00d      	b.n	800351c <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d006      	beq.n	8003516 <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	6892      	ldr	r2, [r2, #8]
 8003510:	2100      	movs	r1, #0
 8003512:	4610      	mov	r0, r2
 8003514:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8003516:	6938      	ldr	r0, [r7, #16]
 8003518:	f7ff f97c 	bl	8002814 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	3318      	adds	r3, #24
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff f986 	bl	8002834 <mqtt_take_request>
 8003528:	6138      	str	r0, [r7, #16]
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1e7      	bne.n	8003500 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	4619      	mov	r1, r3
 800353c:	4610      	mov	r0, r2
 800353e:	f7ff f80d 	bl	800255c <mqtt_output_send>
  }
  return ERR_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10b      	bne.n	800357a <mqtt_tcp_err_cb+0x2e>
 8003562:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <mqtt_tcp_err_cb+0x48>)
 8003564:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8003568:	490b      	ldr	r1, [pc, #44]	; (8003598 <mqtt_tcp_err_cb+0x4c>)
 800356a:	480c      	ldr	r0, [pc, #48]	; (800359c <mqtt_tcp_err_cb+0x50>)
 800356c:	f010 fb40 	bl	8013bf0 <iprintf>
 8003570:	2000      	movs	r0, #0
 8003572:	f010 fc3f 	bl	8013df4 <fflush>
 8003576:	f010 fb84 	bl	8013c82 <abort>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = NULL;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8003580:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f7ff fb55 	bl	8002c34 <mqtt_close>
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	080153a8 	.word	0x080153a8
 8003598:	08015650 	.word	0x08015650
 800359c:	0801540c 	.word	0x0801540c

080035a0 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	7a9b      	ldrb	r3, [r3, #10]
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d105      	bne.n	80035c2 <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	33ec      	adds	r3, #236	; 0xec
 80035ba:	6839      	ldr	r1, [r7, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe ffcd 	bl	800255c <mqtt_output_send>
  }
  return ERR_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	4613      	mov	r3, r2
 80035d8:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	e025      	b.n	8003638 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2200      	movs	r2, #0
 80035f0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 80035f2:	4913      	ldr	r1, [pc, #76]	; (8003640 <mqtt_tcp_connect_cb+0x74>)
 80035f4:	68b8      	ldr	r0, [r7, #8]
 80035f6:	f004 fe73 	bl	80082e0 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 80035fa:	4912      	ldr	r1, [pc, #72]	; (8003644 <mqtt_tcp_connect_cb+0x78>)
 80035fc:	68b8      	ldr	r0, [r7, #8]
 80035fe:	f004 fe95 	bl	800832c <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 8003602:	2202      	movs	r2, #2
 8003604:	4910      	ldr	r1, [pc, #64]	; (8003648 <mqtt_tcp_connect_cb+0x7c>)
 8003606:	68b8      	ldr	r0, [r7, #8]
 8003608:	f004 fedc 	bl	80083c4 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2202      	movs	r2, #2
 8003610:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	490d      	ldr	r1, [pc, #52]	; (800364c <mqtt_tcp_connect_cb+0x80>)
 8003616:	f241 3088 	movw	r0, #5000	; 0x1388
 800361a:	f009 ff7b 	bl	800d514 <sys_timeout>
  client->cyclic_tick = 0;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2200      	movs	r2, #0
 8003622:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	4619      	mov	r1, r3
 8003630:	4610      	mov	r0, r2
 8003632:	f7fe ff93 	bl	800255c <mqtt_output_send>

  return ERR_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	08003409 	.word	0x08003409
 8003644:	080034d9 	.word	0x080034d9
 8003648:	080035a1 	.word	0x080035a1
 800364c:	08002d01 	.word	0x08002d01

08003650 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08c      	sub	sp, #48	; 0x30
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10b      	bne.n	800367c <mqtt_publish+0x2c>
 8003664:	4b62      	ldr	r3, [pc, #392]	; (80037f0 <mqtt_publish+0x1a0>)
 8003666:	f240 425b 	movw	r2, #1115	; 0x45b
 800366a:	4962      	ldr	r1, [pc, #392]	; (80037f4 <mqtt_publish+0x1a4>)
 800366c:	4862      	ldr	r0, [pc, #392]	; (80037f8 <mqtt_publish+0x1a8>)
 800366e:	f010 fabf 	bl	8013bf0 <iprintf>
 8003672:	2000      	movs	r0, #0
 8003674:	f010 fbbe 	bl	8013df4 <fflush>
 8003678:	f010 fb03 	bl	8013c82 <abort>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10b      	bne.n	800369a <mqtt_publish+0x4a>
 8003682:	4b5b      	ldr	r3, [pc, #364]	; (80037f0 <mqtt_publish+0x1a0>)
 8003684:	f240 425c 	movw	r2, #1116	; 0x45c
 8003688:	495c      	ldr	r1, [pc, #368]	; (80037fc <mqtt_publish+0x1ac>)
 800368a:	485b      	ldr	r0, [pc, #364]	; (80037f8 <mqtt_publish+0x1a8>)
 800368c:	f010 fab0 	bl	8013bf0 <iprintf>
 8003690:	2000      	movs	r0, #0
 8003692:	f010 fbaf 	bl	8013df4 <fflush>
 8003696:	f010 faf4 	bl	8013c82 <abort>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	7a9b      	ldrb	r3, [r3, #10]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <mqtt_publish+0x66>
 80036a2:	4b53      	ldr	r3, [pc, #332]	; (80037f0 <mqtt_publish+0x1a0>)
 80036a4:	f240 425d 	movw	r2, #1117	; 0x45d
 80036a8:	4955      	ldr	r1, [pc, #340]	; (8003800 <mqtt_publish+0x1b0>)
 80036aa:	4853      	ldr	r0, [pc, #332]	; (80037f8 <mqtt_publish+0x1a8>)
 80036ac:	f7fe fbfd 	bl	8001eaa <lwip_win32_platform_diag>
 80036b0:	f06f 030a 	mvn.w	r3, #10
 80036b4:	e097      	b.n	80037e6 <mqtt_publish+0x196>

  topic_strlen = strlen(topic);
 80036b6:	68b8      	ldr	r0, [r7, #8]
 80036b8:	f7fc fd94 	bl	80001e4 <strlen>
 80036bc:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d909      	bls.n	80036dc <mqtt_publish+0x8c>
 80036c8:	4b49      	ldr	r3, [pc, #292]	; (80037f0 <mqtt_publish+0x1a0>)
 80036ca:	f44f 628c 	mov.w	r2, #1120	; 0x460
 80036ce:	494d      	ldr	r1, [pc, #308]	; (8003804 <mqtt_publish+0x1b4>)
 80036d0:	4849      	ldr	r0, [pc, #292]	; (80037f8 <mqtt_publish+0x1a8>)
 80036d2:	f7fe fbea 	bl	8001eaa <lwip_win32_platform_diag>
 80036d6:	f06f 030f 	mvn.w	r3, #15
 80036da:	e084      	b.n	80037e6 <mqtt_publish+0x196>
  topic_len = (u16_t)topic_strlen;
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 80036e0:	8b7b      	ldrh	r3, [r7, #26]
 80036e2:	1c9a      	adds	r2, r3, #2
 80036e4:	887b      	ldrh	r3, [r7, #2]
 80036e6:	4413      	add	r3, r2
 80036e8:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 80036ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <mqtt_publish+0xb4>
    total_len += 2;
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	3302      	adds	r3, #2
 80036f6:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7fe fe97 	bl	800242c <msg_generate_packet_id>
 80036fe:	4603      	mov	r3, r0
 8003700:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003702:	e001      	b.n	8003708 <mqtt_publish+0xb8>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370e:	d309      	bcc.n	8003724 <mqtt_publish+0xd4>
 8003710:	4b37      	ldr	r3, [pc, #220]	; (80037f0 <mqtt_publish+0x1a0>)
 8003712:	f240 426c 	movw	r2, #1132	; 0x46c
 8003716:	493c      	ldr	r1, [pc, #240]	; (8003808 <mqtt_publish+0x1b8>)
 8003718:	4837      	ldr	r0, [pc, #220]	; (80037f8 <mqtt_publish+0x1a8>)
 800371a:	f7fe fbc6 	bl	8001eaa <lwip_win32_platform_diag>
 800371e:	f06f 030f 	mvn.w	r3, #15
 8003722:	e060      	b.n	80037e6 <mqtt_publish+0x196>
  remaining_length = (u16_t)total_len;
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f103 001c 	add.w	r0, r3, #28
 800372e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003736:	2104      	movs	r1, #4
 8003738:	f7fe ffca 	bl	80026d0 <mqtt_create_request>
 800373c:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d102      	bne.n	800374a <mqtt_publish+0xfa>
    return ERR_MEM;
 8003744:	f04f 33ff 	mov.w	r3, #4294967295
 8003748:	e04d      	b.n	80037e6 <mqtt_publish+0x196>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	33ec      	adds	r3, #236	; 0xec
 800374e:	8b3a      	ldrh	r2, [r7, #24]
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff fa36 	bl	8002bc4 <mqtt_output_check_space>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d105      	bne.n	800376a <mqtt_publish+0x11a>
    mqtt_delete_request(r);
 800375e:	6978      	ldr	r0, [r7, #20]
 8003760:	f7ff f858 	bl	8002814 <mqtt_delete_request>
    return ERR_MEM;
 8003764:	f04f 33ff 	mov.w	r3, #4294967295
 8003768:	e03d      	b.n	80037e6 <mqtt_publish+0x196>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003770:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003774:	8b3b      	ldrh	r3, [r7, #24]
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	4613      	mov	r3, r2
 8003780:	2200      	movs	r2, #0
 8003782:	2103      	movs	r1, #3
 8003784:	f7ff f9d5 	bl	8002b32 <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	33ec      	adds	r3, #236	; 0xec
 800378c:	8b7a      	ldrh	r2, [r7, #26]
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff f9a3 	bl	8002adc <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 8003796:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800379a:	2b00      	cmp	r3, #0
 800379c:	d006      	beq.n	80037ac <mqtt_publish+0x15c>
    mqtt_output_append_u16(&client->output, pkt_id);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	33ec      	adds	r3, #236	; 0xec
 80037a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80037a4:	4611      	mov	r1, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff f963 	bl	8002a72 <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d009      	beq.n	80037c6 <mqtt_publish+0x176>
 80037b2:	887b      	ldrh	r3, [r7, #2]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d006      	beq.n	80037c6 <mqtt_publish+0x176>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	33ec      	adds	r3, #236	; 0xec
 80037bc:	887a      	ldrh	r2, [r7, #2]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff f96e 	bl	8002aa2 <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3318      	adds	r3, #24
 80037ca:	6979      	ldr	r1, [r7, #20]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe ffcb 	bl	8002768 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4619      	mov	r1, r3
 80037de:	4610      	mov	r0, r2
 80037e0:	f7fe febc 	bl	800255c <mqtt_output_send>
  return ERR_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3728      	adds	r7, #40	; 0x28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	080153a8 	.word	0x080153a8
 80037f4:	08015670 	.word	0x08015670
 80037f8:	0801540c 	.word	0x0801540c
 80037fc:	08015690 	.word	0x08015690
 8003800:	080156ac 	.word	0x080156ac
 8003804:	080156cc 	.word	0x080156cc
 8003808:	080156f0 	.word	0x080156f0

0800380c <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08c      	sub	sp, #48	; 0x30
 8003810:	af02      	add	r7, sp, #8
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10b      	bne.n	800383a <mqtt_sub_unsub+0x2e>
 8003822:	4b65      	ldr	r3, [pc, #404]	; (80039b8 <mqtt_sub_unsub+0x1ac>)
 8003824:	f240 42a6 	movw	r2, #1190	; 0x4a6
 8003828:	4964      	ldr	r1, [pc, #400]	; (80039bc <mqtt_sub_unsub+0x1b0>)
 800382a:	4865      	ldr	r0, [pc, #404]	; (80039c0 <mqtt_sub_unsub+0x1b4>)
 800382c:	f010 f9e0 	bl	8013bf0 <iprintf>
 8003830:	2000      	movs	r0, #0
 8003832:	f010 fadf 	bl	8013df4 <fflush>
 8003836:	f010 fa24 	bl	8013c82 <abort>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10b      	bne.n	8003858 <mqtt_sub_unsub+0x4c>
 8003840:	4b5d      	ldr	r3, [pc, #372]	; (80039b8 <mqtt_sub_unsub+0x1ac>)
 8003842:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8003846:	495f      	ldr	r1, [pc, #380]	; (80039c4 <mqtt_sub_unsub+0x1b8>)
 8003848:	485d      	ldr	r0, [pc, #372]	; (80039c0 <mqtt_sub_unsub+0x1b4>)
 800384a:	f010 f9d1 	bl	8013bf0 <iprintf>
 800384e:	2000      	movs	r0, #0
 8003850:	f010 fad0 	bl	8013df4 <fflush>
 8003854:	f010 fa15 	bl	8013c82 <abort>

  topic_strlen = strlen(topic);
 8003858:	68b8      	ldr	r0, [r7, #8]
 800385a:	f7fc fcc3 	bl	80001e4 <strlen>
 800385e:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8003866:	4293      	cmp	r3, r2
 8003868:	d909      	bls.n	800387e <mqtt_sub_unsub+0x72>
 800386a:	4b53      	ldr	r3, [pc, #332]	; (80039b8 <mqtt_sub_unsub+0x1ac>)
 800386c:	f240 42aa 	movw	r2, #1194	; 0x4aa
 8003870:	4955      	ldr	r1, [pc, #340]	; (80039c8 <mqtt_sub_unsub+0x1bc>)
 8003872:	4853      	ldr	r0, [pc, #332]	; (80039c0 <mqtt_sub_unsub+0x1b4>)
 8003874:	f7fe fb19 	bl	8001eaa <lwip_win32_platform_diag>
 8003878:	f06f 030f 	mvn.w	r3, #15
 800387c:	e098      	b.n	80039b0 <mqtt_sub_unsub+0x1a4>
  topic_len = (u16_t)topic_strlen;
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 8003882:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003884:	3304      	adds	r3, #4
 8003886:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800388a:	2a00      	cmp	r2, #0
 800388c:	bf14      	ite	ne
 800388e:	2201      	movne	r2, #1
 8003890:	2200      	moveq	r2, #0
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	4413      	add	r3, r2
 8003896:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389e:	d309      	bcc.n	80038b4 <mqtt_sub_unsub+0xa8>
 80038a0:	4b45      	ldr	r3, [pc, #276]	; (80039b8 <mqtt_sub_unsub+0x1ac>)
 80038a2:	f240 42ae 	movw	r2, #1198	; 0x4ae
 80038a6:	4949      	ldr	r1, [pc, #292]	; (80039cc <mqtt_sub_unsub+0x1c0>)
 80038a8:	4845      	ldr	r0, [pc, #276]	; (80039c0 <mqtt_sub_unsub+0x1b4>)
 80038aa:	f7fe fafe 	bl	8001eaa <lwip_win32_platform_diag>
 80038ae:	f06f 030f 	mvn.w	r3, #15
 80038b2:	e07d      	b.n	80039b0 <mqtt_sub_unsub+0x1a4>
  remaining_length = (u16_t)total_len;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d90b      	bls.n	80038d6 <mqtt_sub_unsub+0xca>
 80038be:	4b3e      	ldr	r3, [pc, #248]	; (80039b8 <mqtt_sub_unsub+0x1ac>)
 80038c0:	f240 42b1 	movw	r2, #1201	; 0x4b1
 80038c4:	4942      	ldr	r1, [pc, #264]	; (80039d0 <mqtt_sub_unsub+0x1c4>)
 80038c6:	483e      	ldr	r0, [pc, #248]	; (80039c0 <mqtt_sub_unsub+0x1b4>)
 80038c8:	f010 f992 	bl	8013bf0 <iprintf>
 80038cc:	2000      	movs	r0, #0
 80038ce:	f010 fa91 	bl	8013df4 <fflush>
 80038d2:	f010 f9d6 	bl	8013c82 <abort>
  if (client->conn_state == TCP_DISCONNECTED) {
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	7a9b      	ldrb	r3, [r3, #10]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d102      	bne.n	80038e4 <mqtt_sub_unsub+0xd8>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 80038de:	f06f 030a 	mvn.w	r3, #10
 80038e2:	e065      	b.n	80039b0 <mqtt_sub_unsub+0x1a4>
  }

  pkt_id = msg_generate_packet_id(client);
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f7fe fda1 	bl	800242c <msg_generate_packet_id>
 80038ea:	4603      	mov	r3, r0
 80038ec:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f103 001c 	add.w	r0, r3, #28
 80038f4:	8b3a      	ldrh	r2, [r7, #24]
 80038f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2104      	movs	r1, #4
 80038fe:	f7fe fee7 	bl	80026d0 <mqtt_create_request>
 8003902:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d102      	bne.n	8003910 <mqtt_sub_unsub+0x104>
    return ERR_MEM;
 800390a:	f04f 33ff 	mov.w	r3, #4294967295
 800390e:	e04f      	b.n	80039b0 <mqtt_sub_unsub+0x1a4>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	33ec      	adds	r3, #236	; 0xec
 8003914:	8b7a      	ldrh	r2, [r7, #26]
 8003916:	4611      	mov	r1, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff f953 	bl	8002bc4 <mqtt_output_check_space>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d105      	bne.n	8003930 <mqtt_sub_unsub+0x124>
    mqtt_delete_request(r);
 8003924:	6978      	ldr	r0, [r7, #20]
 8003926:	f7fe ff75 	bl	8002814 <mqtt_delete_request>
    return ERR_MEM;
 800392a:	f04f 33ff 	mov.w	r3, #4294967295
 800392e:	e03f      	b.n	80039b0 <mqtt_sub_unsub+0x1a4>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003936:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <mqtt_sub_unsub+0x136>
 800393e:	2108      	movs	r1, #8
 8003940:	e000      	b.n	8003944 <mqtt_sub_unsub+0x138>
 8003942:	210a      	movs	r1, #10
 8003944:	8b7b      	ldrh	r3, [r7, #26]
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	2300      	movs	r3, #0
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2301      	movs	r3, #1
 800394e:	2200      	movs	r2, #0
 8003950:	f7ff f8ef 	bl	8002b32 <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	33ec      	adds	r3, #236	; 0xec
 8003958:	8b3a      	ldrh	r2, [r7, #24]
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff f888 	bl	8002a72 <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	33ec      	adds	r3, #236	; 0xec
 8003966:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003968:	68b9      	ldr	r1, [r7, #8]
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff f8b6 	bl	8002adc <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 8003970:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00b      	beq.n	8003990 <mqtt_sub_unsub+0x184>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	2b02      	cmp	r3, #2
 8003982:	bf28      	it	cs
 8003984:	2302      	movcs	r3, #2
 8003986:	b2db      	uxtb	r3, r3
 8003988:	4619      	mov	r1, r3
 800398a:	4610      	mov	r0, r2
 800398c:	f7ff f862 	bl	8002a54 <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3318      	adds	r3, #24
 8003994:	6979      	ldr	r1, [r7, #20]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe fee6 	bl	8002768 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f7fe fdd7 	bl	800255c <mqtt_output_send>
  return ERR_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3728      	adds	r7, #40	; 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	080153a8 	.word	0x080153a8
 80039bc:	08015714 	.word	0x08015714
 80039c0:	0801540c 	.word	0x0801540c
 80039c4:	08015734 	.word	0x08015734
 80039c8:	08015754 	.word	0x08015754
 80039cc:	0801577c 	.word	0x0801577c
 80039d0:	080157a4 	.word	0x080157a4

080039d4 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10b      	bne.n	8003a00 <mqtt_set_inpub_callback+0x2c>
 80039e8:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <mqtt_set_inpub_callback+0x48>)
 80039ea:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80039ee:	490c      	ldr	r1, [pc, #48]	; (8003a20 <mqtt_set_inpub_callback+0x4c>)
 80039f0:	480c      	ldr	r0, [pc, #48]	; (8003a24 <mqtt_set_inpub_callback+0x50>)
 80039f2:	f010 f8fd 	bl	8013bf0 <iprintf>
 80039f6:	2000      	movs	r0, #0
 80039f8:	f010 f9fc 	bl	8013df4 <fflush>
 80039fc:	f010 f941 	bl	8013c82 <abort>
  client->data_cb = data_cb;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	080153a8 	.word	0x080153a8
 8003a20:	080157bc 	.word	0x080157bc
 8003a24:	0801540c 	.word	0x0801540c

08003a28 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 8003a2c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8003a30:	2001      	movs	r0, #1
 8003a32:	f001 fc95 	bl	8005360 <mem_calloc>
 8003a36:	4603      	mov	r3, r0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08e      	sub	sp, #56	; 0x38
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 8003a4c:	230a      	movs	r3, #10
 8003a4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a56:	2300      	movs	r3, #0
 8003a58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  u16_t client_user_len = 0, client_pass_len = 0;
 8003a62:	2300      	movs	r3, #0
 8003a64:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003a66:	2300      	movs	r3, #0
 8003a68:	84bb      	strh	r3, [r7, #36]	; 0x24
  mqtt_incoming_data_cb_t data_cb;
  mqtt_incoming_publish_cb_t pub_cb;
  void *inpub_arg;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10b      	bne.n	8003a88 <mqtt_client_connect+0x4c>
 8003a70:	4bab      	ldr	r3, [pc, #684]	; (8003d20 <mqtt_client_connect+0x2e4>)
 8003a72:	f240 5219 	movw	r2, #1305	; 0x519
 8003a76:	49ab      	ldr	r1, [pc, #684]	; (8003d24 <mqtt_client_connect+0x2e8>)
 8003a78:	48ab      	ldr	r0, [pc, #684]	; (8003d28 <mqtt_client_connect+0x2ec>)
 8003a7a:	f010 f8b9 	bl	8013bf0 <iprintf>
 8003a7e:	2000      	movs	r0, #0
 8003a80:	f010 f9b8 	bl	8013df4 <fflush>
 8003a84:	f010 f8fd 	bl	8013c82 <abort>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10b      	bne.n	8003aa6 <mqtt_client_connect+0x6a>
 8003a8e:	4ba4      	ldr	r3, [pc, #656]	; (8003d20 <mqtt_client_connect+0x2e4>)
 8003a90:	f240 521a 	movw	r2, #1306	; 0x51a
 8003a94:	49a5      	ldr	r1, [pc, #660]	; (8003d2c <mqtt_client_connect+0x2f0>)
 8003a96:	48a4      	ldr	r0, [pc, #656]	; (8003d28 <mqtt_client_connect+0x2ec>)
 8003a98:	f010 f8aa 	bl	8013bf0 <iprintf>
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	f010 f9a9 	bl	8013df4 <fflush>
 8003aa2:	f010 f8ee 	bl	8013c82 <abort>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 8003aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10b      	bne.n	8003ac4 <mqtt_client_connect+0x88>
 8003aac:	4b9c      	ldr	r3, [pc, #624]	; (8003d20 <mqtt_client_connect+0x2e4>)
 8003aae:	f240 521b 	movw	r2, #1307	; 0x51b
 8003ab2:	499f      	ldr	r1, [pc, #636]	; (8003d30 <mqtt_client_connect+0x2f4>)
 8003ab4:	489c      	ldr	r0, [pc, #624]	; (8003d28 <mqtt_client_connect+0x2ec>)
 8003ab6:	f010 f89b 	bl	8013bf0 <iprintf>
 8003aba:	2000      	movs	r0, #0
 8003abc:	f010 f99a 	bl	8013df4 <fflush>
 8003ac0:	f010 f8df 	bl	8013c82 <abort>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 8003ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <mqtt_client_connect+0xa8>
 8003acc:	4b94      	ldr	r3, [pc, #592]	; (8003d20 <mqtt_client_connect+0x2e4>)
 8003ace:	f240 521c 	movw	r2, #1308	; 0x51c
 8003ad2:	4998      	ldr	r1, [pc, #608]	; (8003d34 <mqtt_client_connect+0x2f8>)
 8003ad4:	4894      	ldr	r0, [pc, #592]	; (8003d28 <mqtt_client_connect+0x2ec>)
 8003ad6:	f010 f88b 	bl	8013bf0 <iprintf>
 8003ada:	2000      	movs	r0, #0
 8003adc:	f010 f98a 	bl	8013df4 <fflush>
 8003ae0:	f010 f8cf 	bl	8013c82 <abort>

  if (client->conn_state != TCP_DISCONNECTED) {
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	7a9b      	ldrb	r3, [r3, #10]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <mqtt_client_connect+0xb6>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8003aec:	f06f 0309 	mvn.w	r3, #9
 8003af0:	e23a      	b.n	8003f68 <mqtt_client_connect+0x52c>
  }

  /* Wipe clean, but keep callbacks */
  data_cb = client->data_cb;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af6:	623b      	str	r3, [r7, #32]
  pub_cb = client->pub_cb;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003afc:	61fb      	str	r3, [r7, #28]
  inpub_arg = client->inpub_arg;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b02:	61bb      	str	r3, [r7, #24]
  memset(client, 0, sizeof(mqtt_client_t));
 8003b04:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8003b08:	2100      	movs	r1, #0
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f010 fa97 	bl	801403e <memset>
  client->data_cb = data_cb;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a3a      	ldr	r2, [r7, #32]
 8003b14:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	69fa      	ldr	r2, [r7, #28]
 8003b1a:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = inpub_arg;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	65da      	str	r2, [r3, #92]	; 0x5c

  client->connect_arg = arg;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b26:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 8003b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b30:	899a      	ldrh	r2, [r3, #12]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	331c      	adds	r3, #28
 8003b3a:	2104      	movs	r1, #4
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe ff57 	bl	80029f0 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8003b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d07c      	beq.n	8003c44 <mqtt_client_connect+0x208>
 8003b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d078      	beq.n	8003c44 <mqtt_client_connect+0x208>
    flags |= MQTT_CONNECT_FLAG_WILL;
 8003b52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b56:	f043 0304 	orr.w	r3, r3, #4
 8003b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    flags |= (client_info->will_qos & 3) << 3;
 8003b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b60:	7e5b      	ldrb	r3, [r3, #25]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	b25b      	sxtb	r3, r3
 8003b66:	f003 0318 	and.w	r3, r3, #24
 8003b6a:	b25a      	sxtb	r2, r3
 8003b6c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003b70:	4313      	orrs	r3, r2
 8003b72:	b25b      	sxtb	r3, r3
 8003b74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (client_info->will_retain) {
 8003b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7a:	7e9b      	ldrb	r3, [r3, #26]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <mqtt_client_connect+0x150>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8003b80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b84:	f043 0320 	orr.w	r3, r3, #32
 8003b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
    len = strlen(client_info->will_topic);
 8003b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fc fb27 	bl	80001e4 <strlen>
 8003b96:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2bff      	cmp	r3, #255	; 0xff
 8003b9c:	d909      	bls.n	8003bb2 <mqtt_client_connect+0x176>
 8003b9e:	4b60      	ldr	r3, [pc, #384]	; (8003d20 <mqtt_client_connect+0x2e4>)
 8003ba0:	f240 5239 	movw	r2, #1337	; 0x539
 8003ba4:	4964      	ldr	r1, [pc, #400]	; (8003d38 <mqtt_client_connect+0x2fc>)
 8003ba6:	4860      	ldr	r0, [pc, #384]	; (8003d28 <mqtt_client_connect+0x2ec>)
 8003ba8:	f7fe f97f 	bl	8001eaa <lwip_win32_platform_diag>
 8003bac:	f06f 0305 	mvn.w	r3, #5
 8003bb0:	e1da      	b.n	8003f68 <mqtt_client_connect+0x52c>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d109      	bne.n	8003bcc <mqtt_client_connect+0x190>
 8003bb8:	4b59      	ldr	r3, [pc, #356]	; (8003d20 <mqtt_client_connect+0x2e4>)
 8003bba:	f240 523a 	movw	r2, #1338	; 0x53a
 8003bbe:	495f      	ldr	r1, [pc, #380]	; (8003d3c <mqtt_client_connect+0x300>)
 8003bc0:	4859      	ldr	r0, [pc, #356]	; (8003d28 <mqtt_client_connect+0x2ec>)
 8003bc2:	f7fe f972 	bl	8001eaa <lwip_win32_platform_diag>
 8003bc6:	f06f 0305 	mvn.w	r3, #5
 8003bca:	e1cd      	b.n	8003f68 <mqtt_client_connect+0x52c>
    will_topic_len = (u8_t)len;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    if (client_info->will_msg_len == 0)
 8003bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd4:	7e1b      	ldrb	r3, [r3, #24]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d116      	bne.n	8003c08 <mqtt_client_connect+0x1cc>
    {
        len = strlen(client_info->will_msg);
 8003bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fc fb00 	bl	80001e4 <strlen>
 8003be4:	6178      	str	r0, [r7, #20]
        LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2bff      	cmp	r3, #255	; 0xff
 8003bea:	d909      	bls.n	8003c00 <mqtt_client_connect+0x1c4>
 8003bec:	4b4c      	ldr	r3, [pc, #304]	; (8003d20 <mqtt_client_connect+0x2e4>)
 8003bee:	f240 523f 	movw	r2, #1343	; 0x53f
 8003bf2:	4953      	ldr	r1, [pc, #332]	; (8003d40 <mqtt_client_connect+0x304>)
 8003bf4:	484c      	ldr	r0, [pc, #304]	; (8003d28 <mqtt_client_connect+0x2ec>)
 8003bf6:	f7fe f958 	bl	8001eaa <lwip_win32_platform_diag>
 8003bfa:	f06f 0305 	mvn.w	r3, #5
 8003bfe:	e1b3      	b.n	8003f68 <mqtt_client_connect+0x52c>
        will_msg_len = (u8_t)len;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8003c06:	e003      	b.n	8003c10 <mqtt_client_connect+0x1d4>
    }
    else
    {
        will_msg_len = client_info->will_msg_len;
 8003c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c0a:	7e1b      	ldrb	r3, [r3, #24]
 8003c0c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8003c10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c12:	1c9a      	adds	r2, r3, #2
 8003c14:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003c18:	4413      	add	r3, r2
 8003c1a:	1c9a      	adds	r2, r3, #2
 8003c1c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003c20:	4413      	add	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2a:	d309      	bcc.n	8003c40 <mqtt_client_connect+0x204>
 8003c2c:	4b3c      	ldr	r3, [pc, #240]	; (8003d20 <mqtt_client_connect+0x2e4>)
 8003c2e:	f240 5247 	movw	r2, #1351	; 0x547
 8003c32:	4944      	ldr	r1, [pc, #272]	; (8003d44 <mqtt_client_connect+0x308>)
 8003c34:	483c      	ldr	r0, [pc, #240]	; (8003d28 <mqtt_client_connect+0x2ec>)
 8003c36:	f7fe f938 	bl	8001eaa <lwip_win32_platform_diag>
 8003c3a:	f06f 0305 	mvn.w	r3, #5
 8003c3e:	e193      	b.n	8003f68 <mqtt_client_connect+0x52c>
    remaining_length = (u16_t)len;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }
  if (client_info->client_user != NULL) {
 8003c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d03d      	beq.n	8003cc8 <mqtt_client_connect+0x28c>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 8003c4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    len = strlen(client_info->client_user);
 8003c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fc fac1 	bl	80001e4 <strlen>
 8003c62:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6a:	d309      	bcc.n	8003c80 <mqtt_client_connect+0x244>
 8003c6c:	4b2c      	ldr	r3, [pc, #176]	; (8003d20 <mqtt_client_connect+0x2e4>)
 8003c6e:	f240 524d 	movw	r2, #1357	; 0x54d
 8003c72:	4935      	ldr	r1, [pc, #212]	; (8003d48 <mqtt_client_connect+0x30c>)
 8003c74:	482c      	ldr	r0, [pc, #176]	; (8003d28 <mqtt_client_connect+0x2ec>)
 8003c76:	f7fe f918 	bl	8001eaa <lwip_win32_platform_diag>
 8003c7a:	f06f 0305 	mvn.w	r3, #5
 8003c7e:	e173      	b.n	8003f68 <mqtt_client_connect+0x52c>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <mqtt_client_connect+0x25e>
 8003c86:	4b26      	ldr	r3, [pc, #152]	; (8003d20 <mqtt_client_connect+0x2e4>)
 8003c88:	f240 524e 	movw	r2, #1358	; 0x54e
 8003c8c:	492f      	ldr	r1, [pc, #188]	; (8003d4c <mqtt_client_connect+0x310>)
 8003c8e:	4826      	ldr	r0, [pc, #152]	; (8003d28 <mqtt_client_connect+0x2ec>)
 8003c90:	f7fe f90b 	bl	8001eaa <lwip_win32_platform_diag>
 8003c94:	f06f 0305 	mvn.w	r3, #5
 8003c98:	e166      	b.n	8003f68 <mqtt_client_connect+0x52c>
    client_user_len = (u16_t)len;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	84fb      	strh	r3, [r7, #38]	; 0x26
    len = remaining_length + 2 + client_user_len;
 8003c9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003ca0:	1c9a      	adds	r2, r3, #2
 8003ca2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ca4:	4413      	add	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cae:	d309      	bcc.n	8003cc4 <mqtt_client_connect+0x288>
 8003cb0:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <mqtt_client_connect+0x2e4>)
 8003cb2:	f240 5251 	movw	r2, #1361	; 0x551
 8003cb6:	4923      	ldr	r1, [pc, #140]	; (8003d44 <mqtt_client_connect+0x308>)
 8003cb8:	481b      	ldr	r0, [pc, #108]	; (8003d28 <mqtt_client_connect+0x2ec>)
 8003cba:	f7fe f8f6 	bl	8001eaa <lwip_win32_platform_diag>
 8003cbe:	f06f 0305 	mvn.w	r3, #5
 8003cc2:	e151      	b.n	8003f68 <mqtt_client_connect+0x52c>
    remaining_length = (u16_t)len;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }
  if (client_info->client_pass != NULL) {
 8003cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d05a      	beq.n	8003d86 <mqtt_client_connect+0x34a>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8003cd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    len = strlen(client_info->client_pass);
 8003cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fc fa7f 	bl	80001e4 <strlen>
 8003ce6:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cee:	d309      	bcc.n	8003d04 <mqtt_client_connect+0x2c8>
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <mqtt_client_connect+0x2e4>)
 8003cf2:	f240 5257 	movw	r2, #1367	; 0x557
 8003cf6:	4916      	ldr	r1, [pc, #88]	; (8003d50 <mqtt_client_connect+0x314>)
 8003cf8:	480b      	ldr	r0, [pc, #44]	; (8003d28 <mqtt_client_connect+0x2ec>)
 8003cfa:	f7fe f8d6 	bl	8001eaa <lwip_win32_platform_diag>
 8003cfe:	f06f 0305 	mvn.w	r3, #5
 8003d02:	e131      	b.n	8003f68 <mqtt_client_connect+0x52c>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d126      	bne.n	8003d58 <mqtt_client_connect+0x31c>
 8003d0a:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <mqtt_client_connect+0x2e4>)
 8003d0c:	f44f 62ab 	mov.w	r2, #1368	; 0x558
 8003d10:	4910      	ldr	r1, [pc, #64]	; (8003d54 <mqtt_client_connect+0x318>)
 8003d12:	4805      	ldr	r0, [pc, #20]	; (8003d28 <mqtt_client_connect+0x2ec>)
 8003d14:	f7fe f8c9 	bl	8001eaa <lwip_win32_platform_diag>
 8003d18:	f06f 0305 	mvn.w	r3, #5
 8003d1c:	e124      	b.n	8003f68 <mqtt_client_connect+0x52c>
 8003d1e:	bf00      	nop
 8003d20:	080153a8 	.word	0x080153a8
 8003d24:	080157e4 	.word	0x080157e4
 8003d28:	0801540c 	.word	0x0801540c
 8003d2c:	08015808 	.word	0x08015808
 8003d30:	08015830 	.word	0x08015830
 8003d34:	0801585c 	.word	0x0801585c
 8003d38:	08015890 	.word	0x08015890
 8003d3c:	080158d0 	.word	0x080158d0
 8003d40:	08015910 	.word	0x08015910
 8003d44:	0801594c 	.word	0x0801594c
 8003d48:	0801597c 	.word	0x0801597c
 8003d4c:	080159bc 	.word	0x080159bc
 8003d50:	08015a00 	.word	0x08015a00
 8003d54:	08015a40 	.word	0x08015a40
    client_pass_len = (u16_t)len;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	84bb      	strh	r3, [r7, #36]	; 0x24
    len = remaining_length + 2 + client_pass_len;
 8003d5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d5e:	1c9a      	adds	r2, r3, #2
 8003d60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d62:	4413      	add	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6c:	d309      	bcc.n	8003d82 <mqtt_client_connect+0x346>
 8003d6e:	4b80      	ldr	r3, [pc, #512]	; (8003f70 <mqtt_client_connect+0x534>)
 8003d70:	f240 525b 	movw	r2, #1371	; 0x55b
 8003d74:	497f      	ldr	r1, [pc, #508]	; (8003f74 <mqtt_client_connect+0x538>)
 8003d76:	4880      	ldr	r0, [pc, #512]	; (8003f78 <mqtt_client_connect+0x53c>)
 8003d78:	f7fe f897 	bl	8001eaa <lwip_win32_platform_diag>
 8003d7c:	f06f 0305 	mvn.w	r3, #5
 8003d80:	e0f2      	b.n	8003f68 <mqtt_client_connect+0x52c>
    remaining_length = (u16_t)len;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8003d86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d8a:	f043 0302 	orr.w	r3, r3, #2
 8003d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  len = strlen(client_info->client_id);
 8003d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fc fa24 	bl	80001e4 <strlen>
 8003d9c:	6178      	str	r0, [r7, #20]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da4:	d309      	bcc.n	8003dba <mqtt_client_connect+0x37e>
 8003da6:	4b72      	ldr	r3, [pc, #456]	; (8003f70 <mqtt_client_connect+0x534>)
 8003da8:	f240 5263 	movw	r2, #1379	; 0x563
 8003dac:	4973      	ldr	r1, [pc, #460]	; (8003f7c <mqtt_client_connect+0x540>)
 8003dae:	4872      	ldr	r0, [pc, #456]	; (8003f78 <mqtt_client_connect+0x53c>)
 8003db0:	f7fe f87b 	bl	8001eaa <lwip_win32_platform_diag>
 8003db4:	f06f 0305 	mvn.w	r3, #5
 8003db8:	e0d6      	b.n	8003f68 <mqtt_client_connect+0x52c>
  client_id_length = (u16_t)len;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	827b      	strh	r3, [r7, #18]
  len = remaining_length + 2 + client_id_length;
 8003dbe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003dc0:	1c9a      	adds	r2, r3, #2
 8003dc2:	8a7b      	ldrh	r3, [r7, #18]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dce:	d309      	bcc.n	8003de4 <mqtt_client_connect+0x3a8>
 8003dd0:	4b67      	ldr	r3, [pc, #412]	; (8003f70 <mqtt_client_connect+0x534>)
 8003dd2:	f240 5266 	movw	r2, #1382	; 0x566
 8003dd6:	4967      	ldr	r1, [pc, #412]	; (8003f74 <mqtt_client_connect+0x538>)
 8003dd8:	4867      	ldr	r0, [pc, #412]	; (8003f78 <mqtt_client_connect+0x53c>)
 8003dda:	f7fe f866 	bl	8001eaa <lwip_win32_platform_diag>
 8003dde:	f06f 0305 	mvn.w	r3, #5
 8003de2:	e0c1      	b.n	8003f68 <mqtt_client_connect+0x52c>
  remaining_length = (u16_t)len;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	85bb      	strh	r3, [r7, #44]	; 0x2c

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	33ec      	adds	r3, #236	; 0xec
 8003dec:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003dee:	4611      	mov	r1, r2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fe fee7 	bl	8002bc4 <mqtt_output_check_space>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d102      	bne.n	8003e02 <mqtt_client_connect+0x3c6>
    return ERR_MEM;
 8003dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003e00:	e0b2      	b.n	8003f68 <mqtt_client_connect+0x52c>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 8003e02:	2000      	movs	r0, #0
 8003e04:	f004 fa4c 	bl	80082a0 <tcp_new_ip_type>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d102      	bne.n	8003e1c <mqtt_client_connect+0x3e0>
    return ERR_MEM;
 8003e16:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1a:	e0a5      	b.n	8003f68 <mqtt_client_connect+0x52c>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	68f9      	ldr	r1, [r7, #12]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f004 fa4a 	bl	80082bc <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	4954      	ldr	r1, [pc, #336]	; (8003f80 <mqtt_client_connect+0x544>)
 8003e30:	4618      	mov	r0, r3
 8003e32:	f003 f8f5 	bl	8007020 <tcp_bind>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (err != ERR_OK) {
 8003e3c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f040 8084 	bne.w	8003f4e <mqtt_client_connect+0x512>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	68d8      	ldr	r0, [r3, #12]
 8003e4a:	88fa      	ldrh	r2, [r7, #6]
 8003e4c:	4b4d      	ldr	r3, [pc, #308]	; (8003f84 <mqtt_client_connect+0x548>)
 8003e4e:	68b9      	ldr	r1, [r7, #8]
 8003e50:	f003 fa80 	bl	8007354 <tcp_connect>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (err != ERR_OK) {
 8003e5a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d177      	bne.n	8003f52 <mqtt_client_connect+0x516>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	4948      	ldr	r1, [pc, #288]	; (8003f88 <mqtt_client_connect+0x54c>)
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f004 fa85 	bl	8008378 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2201      	movs	r2, #1
 8003e72:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003e7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2300      	movs	r3, #0
 8003e84:	2200      	movs	r2, #0
 8003e86:	2101      	movs	r1, #1
 8003e88:	f7fe fe53 	bl	8002b32 <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	33ec      	adds	r3, #236	; 0xec
 8003e90:	2204      	movs	r2, #4
 8003e92:	493e      	ldr	r1, [pc, #248]	; (8003f8c <mqtt_client_connect+0x550>)
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fe fe21 	bl	8002adc <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	33ec      	adds	r3, #236	; 0xec
 8003e9e:	2104      	movs	r1, #4
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fe fdd7 	bl	8002a54 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	33ec      	adds	r3, #236	; 0xec
 8003eaa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003eae:	4611      	mov	r1, r2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fe fdcf 	bl	8002a54 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8003ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ebe:	899b      	ldrh	r3, [r3, #12]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f7fe fdd5 	bl	8002a72 <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	8a7a      	ldrh	r2, [r7, #18]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f7fe fe01 	bl	8002adc <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 8003eda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d015      	beq.n	8003f12 <mqtt_client_connect+0x4d6>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8003ef4:	b292      	uxth	r2, r2
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	f7fe fdf0 	bl	8002adc <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003f0a:	b292      	uxth	r2, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	f7fe fde5 	bl	8002adc <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8003f12:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	da08      	bge.n	8003f2c <mqtt_client_connect+0x4f0>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003f26:	4619      	mov	r1, r3
 8003f28:	f7fe fdd8 	bl	8002adc <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 8003f2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <mqtt_client_connect+0x50e>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f44:	4619      	mov	r1, r3
 8003f46:	f7fe fdc9 	bl	8002adc <mqtt_output_append_string>
  }
  return ERR_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e00c      	b.n	8003f68 <mqtt_client_connect+0x52c>
    goto tcp_fail;
 8003f4e:	bf00      	nop
 8003f50:	e000      	b.n	8003f54 <mqtt_client_connect+0x518>
    goto tcp_fail;
 8003f52:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f003 f855 	bl	8007008 <tcp_abort>
  client->conn = NULL;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	60da      	str	r2, [r3, #12]
  return err;
 8003f64:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3730      	adds	r7, #48	; 0x30
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	080153a8 	.word	0x080153a8
 8003f74:	0801594c 	.word	0x0801594c
 8003f78:	0801540c 	.word	0x0801540c
 8003f7c:	08015a84 	.word	0x08015a84
 8003f80:	08017e50 	.word	0x08017e50
 8003f84:	080035cd 	.word	0x080035cd
 8003f88:	0800354d 	.word	0x0800354d
 8003f8c:	08015ac0 	.word	0x08015ac0

08003f90 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	b21a      	sxth	r2, r3
 8003fa0:	88fb      	ldrh	r3, [r7, #6]
 8003fa2:	0a1b      	lsrs	r3, r3, #8
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	b21b      	sxth	r3, r3
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	b21b      	sxth	r3, r3
 8003fac:	b29b      	uxth	r3, r3
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	061a      	lsls	r2, r3, #24
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	0a1b      	lsrs	r3, r3, #8
 8003fd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0e1b      	lsrs	r3, r3, #24
 8003fde:	4313      	orrs	r3, r2
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b089      	sub	sp, #36	; 0x24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00d      	beq.n	800402c <lwip_standard_chksum+0x40>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	dd0a      	ble.n	800402c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8004016:	f107 030e 	add.w	r3, r7, #14
 800401a:	3301      	adds	r3, #1
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	1c51      	adds	r1, r2, #1
 8004020:	61f9      	str	r1, [r7, #28]
 8004022:	7812      	ldrb	r2, [r2, #0]
 8004024:	701a      	strb	r2, [r3, #0]
    len--;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	3b01      	subs	r3, #1
 800402a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8004030:	e00a      	b.n	8004048 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	1c9a      	adds	r2, r3, #2
 8004036:	61ba      	str	r2, [r7, #24]
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	4413      	add	r3, r2
 8004040:	617b      	str	r3, [r7, #20]
    len -= 2;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	3b02      	subs	r3, #2
 8004046:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2b01      	cmp	r3, #1
 800404c:	dcf1      	bgt.n	8004032 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	dd04      	ble.n	800405e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8004054:	f107 030e 	add.w	r3, r7, #14
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	7812      	ldrb	r2, [r2, #0]
 800405c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800405e:	89fb      	ldrh	r3, [r7, #14]
 8004060:	461a      	mov	r2, r3
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	4413      	add	r3, r2
 8004066:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	0c1a      	lsrs	r2, r3, #16
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	b29b      	uxth	r3, r3
 8004070:	4413      	add	r3, r2
 8004072:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	0c1a      	lsrs	r2, r3, #16
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	b29b      	uxth	r3, r3
 800407c:	4413      	add	r3, r2
 800407e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d007      	beq.n	8004096 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	b29a      	uxth	r2, r3
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	0a1b      	lsrs	r3, r3, #8
 8004090:	b2db      	uxtb	r3, r3
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	b29b      	uxth	r3, r3
}
 800409a:	4618      	mov	r0, r3
 800409c:	3724      	adds	r7, #36	; 0x24
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b086      	sub	sp, #24
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	607b      	str	r3, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	72fb      	strb	r3, [r7, #11]
 80040b4:	4613      	mov	r3, r2
 80040b6:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	e02b      	b.n	800411a <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	895b      	ldrh	r3, [r3, #10]
 80040ca:	4619      	mov	r1, r3
 80040cc:	4610      	mov	r0, r2
 80040ce:	f7ff ff8d 	bl	8003fec <lwip_standard_chksum>
 80040d2:	4603      	mov	r3, r0
 80040d4:	461a      	mov	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4413      	add	r3, r2
 80040da:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	0c1a      	lsrs	r2, r3, #16
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	4413      	add	r3, r2
 80040e6:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	895b      	ldrh	r3, [r3, #10]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00e      	beq.n	8004114 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bf0c      	ite	eq
 80040fc:	2301      	moveq	r3, #1
 80040fe:	2300      	movne	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	b29a      	uxth	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	0a1b      	lsrs	r3, r3, #8
 800410e:	b2db      	uxtb	r3, r3
 8004110:	4313      	orrs	r3, r2
 8004112:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1d0      	bne.n	80040c2 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d007      	beq.n	8004136 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	021b      	lsls	r3, r3, #8
 800412a:	b29a      	uxth	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	0a1b      	lsrs	r3, r3, #8
 8004130:	b2db      	uxtb	r3, r3
 8004132:	4313      	orrs	r3, r2
 8004134:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8004136:	7afb      	ldrb	r3, [r7, #11]
 8004138:	b29b      	uxth	r3, r3
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff ff28 	bl	8003f90 <lwip_htons>
 8004140:	4603      	mov	r3, r0
 8004142:	461a      	mov	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4413      	add	r3, r2
 8004148:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800414a:	893b      	ldrh	r3, [r7, #8]
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff ff1f 	bl	8003f90 <lwip_htons>
 8004152:	4603      	mov	r3, r0
 8004154:	461a      	mov	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4413      	add	r3, r2
 800415a:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	0c1a      	lsrs	r2, r3, #16
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	b29b      	uxth	r3, r3
 8004164:	4413      	add	r3, r2
 8004166:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	0c1a      	lsrs	r2, r3, #16
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	b29b      	uxth	r3, r3
 8004170:	4413      	add	r3, r2
 8004172:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	b29b      	uxth	r3, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	b29b      	uxth	r3, r3
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	607b      	str	r3, [r7, #4]
 800418e:	460b      	mov	r3, r1
 8004190:	72fb      	strb	r3, [r7, #11]
 8004192:	4613      	mov	r3, r2
 8004194:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	0c1b      	lsrs	r3, r3, #16
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4413      	add	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4413      	add	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	0c1b      	lsrs	r3, r3, #16
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4413      	add	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	0c1a      	lsrs	r2, r3, #16
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	4413      	add	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	0c1a      	lsrs	r2, r3, #16
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	4413      	add	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 80041de:	893a      	ldrh	r2, [r7, #8]
 80041e0:	7af9      	ldrb	r1, [r7, #11]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f7ff ff5e 	bl	80040a6 <inet_cksum_pseudo_base>
 80041ea:	4603      	mov	r3, r0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	607b      	str	r3, [r7, #4]
 80041fe:	460b      	mov	r3, r1
 8004200:	72fb      	strb	r3, [r7, #11]
 8004202:	4613      	mov	r3, r2
 8004204:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8004206:	893a      	ldrh	r2, [r7, #8]
 8004208:	7af9      	ldrb	r1, [r7, #11]
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f7ff ffb7 	bl	8004184 <inet_chksum_pseudo>
 8004216:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800422c:	887b      	ldrh	r3, [r7, #2]
 800422e:	4619      	mov	r1, r3
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff fedb 	bl	8003fec <lwip_standard_chksum>
 8004236:	4603      	mov	r3, r0
 8004238:	43db      	mvns	r3, r3
 800423a:	b29b      	uxth	r3, r3
}
 800423c:	4618      	mov	r0, r3
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 800424e:	f002 fbab 	bl	80069a8 <stats_init>
#if !NO_SYS
  sys_init();
 8004252:	f7fd fdcb 	bl	8001dec <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8004256:	f000 fcfb 	bl	8004c50 <mem_init>
  memp_init();
 800425a:	f001 f8df 	bl	800541c <memp_init>
  pbuf_init();
  netif_init();
 800425e:	f001 f9fd 	bl	800565c <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004262:	f002 fbaf 	bl	80069c4 <tcp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */
#if PPP_SUPPORT
  ppp_init();
 8004266:	f00d ff81 	bl	801216c <ppp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800426a:	f009 f933 	bl	800d4d4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8004280:	4b34      	ldr	r3, [pc, #208]	; (8004354 <ip4_route+0xdc>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	e033      	b.n	80042f0 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d029      	beq.n	80042ea <ip4_route+0x72>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d022      	beq.n	80042ea <ip4_route+0x72>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3304      	adds	r3, #4
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d01d      	beq.n	80042ea <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_net_eq(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3304      	adds	r3, #4
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	405a      	eors	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3308      	adds	r3, #8
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4013      	ands	r3, r2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	e03e      	b.n	8004348 <ip4_route+0xd0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_eq(dest, netif_ip4_gw(netif))) {
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d108      	bne.n	80042ea <ip4_route+0x72>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	330c      	adds	r3, #12
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d101      	bne.n	80042ea <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	e02e      	b.n	8004348 <ip4_route+0xd0>
  NETIF_FOREACH(netif) {
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1c8      	bne.n	8004288 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80042f6:	4b18      	ldr	r3, [pc, #96]	; (8004358 <ip4_route+0xe0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01a      	beq.n	8004334 <ip4_route+0xbc>
 80042fe:	4b16      	ldr	r3, [pc, #88]	; (8004358 <ip4_route+0xe0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d012      	beq.n	8004334 <ip4_route+0xbc>
 800430e:	4b12      	ldr	r3, [pc, #72]	; (8004358 <ip4_route+0xe0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800431e:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <ip4_route+0xe0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3304      	adds	r3, #4
 8004324:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8004326:	2b00      	cmp	r3, #0
 8004328:	d004      	beq.n	8004334 <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b7f      	cmp	r3, #127	; 0x7f
 8004332:	d107      	bne.n	8004344 <ip4_route+0xcc>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 8004334:	4b09      	ldr	r3, [pc, #36]	; (800435c <ip4_route+0xe4>)
 8004336:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004338:	3301      	adds	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	4b07      	ldr	r3, [pc, #28]	; (800435c <ip4_route+0xe4>)
 800433e:	84da      	strh	r2, [r3, #38]	; 0x26
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8004340:	2300      	movs	r3, #0
 8004342:	e001      	b.n	8004348 <ip4_route+0xd0>
  }

  return netif_default;
 8004344:	4b04      	ldr	r3, [pc, #16]	; (8004358 <ip4_route+0xe0>)
 8004346:	681b      	ldr	r3, [r3, #0]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	20002210 	.word	0x20002210
 8004358:	20002214 	.word	0x20002214
 800435c:	2000221c 	.word	0x2000221c

08004360 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d016      	beq.n	80043a4 <ip4_input_accept+0x44>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3304      	adds	r3, #4
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d011      	beq.n	80043a4 <ip4_input_accept+0x44>
    /* unicast to this interface address? */
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <ip4_input_accept+0x50>)
 8004382:	695a      	ldr	r2, [r3, #20]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d008      	beq.n	80043a0 <ip4_input_accept+0x40>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <ip4_input_accept+0x50>)
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 faad 	bl	80048f4 <ip4_addr_isbroadcast_u32>
 800439a:	4603      	mov	r3, r0
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <ip4_input_accept+0x44>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <ip4_input_accept+0x46>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20000880 	.word	0x20000880

080043b4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 80043be:	4b8e      	ldr	r3, [pc, #568]	; (80045f8 <ip4_input+0x244>)
 80043c0:	8b5b      	ldrh	r3, [r3, #26]
 80043c2:	3301      	adds	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	4b8c      	ldr	r3, [pc, #560]	; (80045f8 <ip4_input+0x244>)
 80043c8:	835a      	strh	r2, [r3, #26]
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d010      	beq.n	80043fe <ip4_input+0x4a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f001 fee9 	bl	80061b4 <pbuf_free>
    IP_STATS_INC(ip.err);
 80043e2:	4b85      	ldr	r3, [pc, #532]	; (80045f8 <ip4_input+0x244>)
 80043e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043e6:	3301      	adds	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	4b83      	ldr	r3, [pc, #524]	; (80045f8 <ip4_input+0x244>)
 80043ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    IP_STATS_INC(ip.drop);
 80043ee:	4b82      	ldr	r3, [pc, #520]	; (80045f8 <ip4_input+0x244>)
 80043f0:	8bdb      	ldrh	r3, [r3, #30]
 80043f2:	3301      	adds	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	4b80      	ldr	r3, [pc, #512]	; (80045f8 <ip4_input+0x244>)
 80043f8:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e125      	b.n	800464a <ip4_input+0x296>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	b2db      	uxtb	r3, r3
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	b2db      	uxtb	r3, r3
 800440c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	885b      	ldrh	r3, [r3, #2]
 8004412:	b29b      	uxth	r3, r3
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff fdbb 	bl	8003f90 <lwip_htons>
 800441a:	4603      	mov	r3, r0
 800441c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	891b      	ldrh	r3, [r3, #8]
 8004422:	89ba      	ldrh	r2, [r7, #12]
 8004424:	429a      	cmp	r2, r3
 8004426:	d204      	bcs.n	8004432 <ip4_input+0x7e>
    pbuf_realloc(p, iphdr_len);
 8004428:	89bb      	ldrh	r3, [r7, #12]
 800442a:	4619      	mov	r1, r3
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f001 fd49 	bl	8005ec4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	895b      	ldrh	r3, [r3, #10]
 8004436:	89fa      	ldrh	r2, [r7, #14]
 8004438:	429a      	cmp	r2, r3
 800443a:	d807      	bhi.n	800444c <ip4_input+0x98>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	891b      	ldrh	r3, [r3, #8]
 8004440:	89ba      	ldrh	r2, [r7, #12]
 8004442:	429a      	cmp	r2, r3
 8004444:	d802      	bhi.n	800444c <ip4_input+0x98>
 8004446:	89fb      	ldrh	r3, [r7, #14]
 8004448:	2b13      	cmp	r3, #19
 800444a:	d810      	bhi.n	800446e <ip4_input+0xba>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f001 feb1 	bl	80061b4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 8004452:	4b69      	ldr	r3, [pc, #420]	; (80045f8 <ip4_input+0x244>)
 8004454:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004456:	3301      	adds	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	4b67      	ldr	r3, [pc, #412]	; (80045f8 <ip4_input+0x244>)
 800445c:	845a      	strh	r2, [r3, #34]	; 0x22
    IP_STATS_INC(ip.drop);
 800445e:	4b66      	ldr	r3, [pc, #408]	; (80045f8 <ip4_input+0x244>)
 8004460:	8bdb      	ldrh	r3, [r3, #30]
 8004462:	3301      	adds	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	4b64      	ldr	r3, [pc, #400]	; (80045f8 <ip4_input+0x244>)
 8004468:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	e0ed      	b.n	800464a <ip4_input+0x296>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 800446e:	89fb      	ldrh	r3, [r7, #14]
 8004470:	4619      	mov	r1, r3
 8004472:	6938      	ldr	r0, [r7, #16]
 8004474:	f7ff fed4 	bl	8004220 <inet_chksum>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d010      	beq.n	80044a0 <ip4_input+0xec>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f001 fe98 	bl	80061b4 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
 8004484:	4b5c      	ldr	r3, [pc, #368]	; (80045f8 <ip4_input+0x244>)
 8004486:	8c1b      	ldrh	r3, [r3, #32]
 8004488:	3301      	adds	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	4b5a      	ldr	r3, [pc, #360]	; (80045f8 <ip4_input+0x244>)
 800448e:	841a      	strh	r2, [r3, #32]
      IP_STATS_INC(ip.drop);
 8004490:	4b59      	ldr	r3, [pc, #356]	; (80045f8 <ip4_input+0x244>)
 8004492:	8bdb      	ldrh	r3, [r3, #30]
 8004494:	3301      	adds	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	4b57      	ldr	r3, [pc, #348]	; (80045f8 <ip4_input+0x244>)
 800449a:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	e0d4      	b.n	800464a <ip4_input+0x296>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	4a55      	ldr	r2, [pc, #340]	; (80045fc <ip4_input+0x248>)
 80044a6:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4a53      	ldr	r2, [pc, #332]	; (80045fc <ip4_input+0x248>)
 80044ae:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80044b0:	4b52      	ldr	r3, [pc, #328]	; (80045fc <ip4_input+0x248>)
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b8:	2be0      	cmp	r3, #224	; 0xe0
 80044ba:	d111      	bne.n	80044e0 <ip4_input+0x12c>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <ip4_input+0x126>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	3304      	adds	r3, #4
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <ip4_input+0x126>
      netif = inp;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	e02a      	b.n	8004530 <ip4_input+0x17c>
    } else {
      netif = NULL;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e027      	b.n	8004530 <ip4_input+0x17c>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80044e0:	6838      	ldr	r0, [r7, #0]
 80044e2:	f7ff ff3d 	bl	8004360 <ip4_input_accept>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <ip4_input+0x13e>
      netif = inp;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	e01e      	b.n	8004530 <ip4_input+0x17c>
    } else {
      netif = NULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80044f6:	4b41      	ldr	r3, [pc, #260]	; (80045fc <ip4_input+0x248>)
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b7f      	cmp	r3, #127	; 0x7f
 80044fe:	d017      	beq.n	8004530 <ip4_input+0x17c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8004500:	4b3f      	ldr	r3, [pc, #252]	; (8004600 <ip4_input+0x24c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	e00e      	b.n	8004526 <ip4_input+0x172>
          if (netif == inp) {
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	429a      	cmp	r2, r3
 800450e:	d006      	beq.n	800451e <ip4_input+0x16a>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8004510:	6978      	ldr	r0, [r7, #20]
 8004512:	f7ff ff25 	bl	8004360 <ip4_input_accept>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d108      	bne.n	800452e <ip4_input+0x17a>
 800451c:	e000      	b.n	8004520 <ip4_input+0x16c>
            continue;
 800451e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1ed      	bne.n	8004508 <ip4_input+0x154>
 800452c:	e000      	b.n	8004530 <ip4_input+0x17c>
            break;
 800452e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8004530:	4b32      	ldr	r3, [pc, #200]	; (80045fc <ip4_input+0x248>)
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	6839      	ldr	r1, [r7, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f9dc 	bl	80048f4 <ip4_addr_isbroadcast_u32>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d105      	bne.n	800454e <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8004542:	4b2e      	ldr	r3, [pc, #184]	; (80045fc <ip4_input+0x248>)
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800454a:	2be0      	cmp	r3, #224	; 0xe0
 800454c:	d10a      	bne.n	8004564 <ip4_input+0x1b0>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f001 fe30 	bl	80061b4 <pbuf_free>
      IP_STATS_INC(ip.drop);
 8004554:	4b28      	ldr	r3, [pc, #160]	; (80045f8 <ip4_input+0x244>)
 8004556:	8bdb      	ldrh	r3, [r3, #30]
 8004558:	3301      	adds	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	4b26      	ldr	r3, [pc, #152]	; (80045f8 <ip4_input+0x244>)
 800455e:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	e072      	b.n	800464a <ip4_input+0x296>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10a      	bne.n	8004580 <ip4_input+0x1cc>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 800456a:	4b23      	ldr	r3, [pc, #140]	; (80045f8 <ip4_input+0x244>)
 800456c:	8bdb      	ldrh	r3, [r3, #30]
 800456e:	3301      	adds	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <ip4_input+0x244>)
 8004574:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f001 fe1c 	bl	80061b4 <pbuf_free>
    return ERR_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	e064      	b.n	800464a <ip4_input+0x296>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	88db      	ldrh	r3, [r3, #6]
 8004584:	b29b      	uxth	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800458c:	4013      	ands	r3, r2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d010      	beq.n	80045b4 <ip4_input+0x200>
    if (p == NULL) {
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
#else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
    pbuf_free(p);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f001 fe0e 	bl	80061b4 <pbuf_free>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since it was fragmented (0x%"X16_F") (while IP_REASSEMBLY == 0).\n",
                lwip_ntohs(IPH_OFFSET(iphdr))));
    IP_STATS_INC(ip.opterr);
 8004598:	4b17      	ldr	r3, [pc, #92]	; (80045f8 <ip4_input+0x244>)
 800459a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459c:	3301      	adds	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <ip4_input+0x244>)
 80045a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    IP_STATS_INC(ip.drop);
 80045a4:	4b14      	ldr	r3, [pc, #80]	; (80045f8 <ip4_input+0x244>)
 80045a6:	8bdb      	ldrh	r3, [r3, #30]
 80045a8:	3301      	adds	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <ip4_input+0x244>)
 80045ae:	83da      	strh	r2, [r3, #30]
    /* unsupported protocol feature */
    MIB2_STATS_INC(mib2.ipinunknownprotos);
    return ERR_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	e04a      	b.n	800464a <ip4_input+0x296>
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80045b4:	4a11      	ldr	r2, [pc, #68]	; (80045fc <ip4_input+0x248>)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80045ba:	4a10      	ldr	r2, [pc, #64]	; (80045fc <ip4_input+0x248>)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80045c0:	4a0e      	ldr	r2, [pc, #56]	; (80045fc <ip4_input+0x248>)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <ip4_input+0x248>)
 80045d8:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80045da:	89fb      	ldrh	r3, [r7, #14]
 80045dc:	4619      	mov	r1, r3
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f001 fd92 	bl	8006108 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	7a5b      	ldrb	r3, [r3, #9]
 80045e8:	2b06      	cmp	r3, #6
 80045ea:	d10b      	bne.n	8004604 <ip4_input+0x250>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80045ec:	6839      	ldr	r1, [r7, #0]
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f004 f90a 	bl	8008808 <tcp_input>
        break;
 80045f4:	e016      	b.n	8004624 <ip4_input+0x270>
 80045f6:	bf00      	nop
 80045f8:	2000221c 	.word	0x2000221c
 80045fc:	20000880 	.word	0x20000880
 8004600:	20002210 	.word	0x20002210
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 8004604:	4b13      	ldr	r3, [pc, #76]	; (8004654 <ip4_input+0x2a0>)
 8004606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004608:	3301      	adds	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	4b11      	ldr	r3, [pc, #68]	; (8004654 <ip4_input+0x2a0>)
 800460e:	851a      	strh	r2, [r3, #40]	; 0x28
          IP_STATS_INC(ip.drop);
 8004610:	4b10      	ldr	r3, [pc, #64]	; (8004654 <ip4_input+0x2a0>)
 8004612:	8bdb      	ldrh	r3, [r3, #30]
 8004614:	3301      	adds	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <ip4_input+0x2a0>)
 800461a:	83da      	strh	r2, [r3, #30]
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f001 fdc9 	bl	80061b4 <pbuf_free>
        break;
 8004622:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8004624:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <ip4_input+0x2a4>)
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800462a:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <ip4_input+0x2a4>)
 800462c:	2200      	movs	r2, #0
 800462e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8004630:	4b09      	ldr	r3, [pc, #36]	; (8004658 <ip4_input+0x2a4>)
 8004632:	2200      	movs	r2, #0
 8004634:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8004636:	4b08      	ldr	r3, [pc, #32]	; (8004658 <ip4_input+0x2a4>)
 8004638:	2200      	movs	r2, #0
 800463a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <ip4_input+0x2a4>)
 800463e:	2200      	movs	r2, #0
 8004640:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <ip4_input+0x2a4>)
 8004644:	2200      	movs	r2, #0
 8004646:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	2000221c 	.word	0x2000221c
 8004658:	20000880 	.word	0x20000880

0800465c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08a      	sub	sp, #40	; 0x28
 8004660:	af04      	add	r7, sp, #16
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <ip4_output_if+0x26>
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d102      	bne.n	8004688 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004684:	3304      	adds	r3, #4
 8004686:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	9302      	str	r3, [sp, #8]
 800468e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	4613      	mov	r3, r2
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6979      	ldr	r1, [r7, #20]
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 f805 	bl	80046b0 <ip4_output_if_src>
 80046a6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	7b9b      	ldrb	r3, [r3, #14]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d00b      	beq.n	80046e2 <ip4_output_if_src+0x32>
 80046ca:	4b83      	ldr	r3, [pc, #524]	; (80048d8 <ip4_output_if_src+0x228>)
 80046cc:	f240 326b 	movw	r2, #875	; 0x36b
 80046d0:	4982      	ldr	r1, [pc, #520]	; (80048dc <ip4_output_if_src+0x22c>)
 80046d2:	4883      	ldr	r0, [pc, #524]	; (80048e0 <ip4_output_if_src+0x230>)
 80046d4:	f00f fa8c 	bl	8013bf0 <iprintf>
 80046d8:	2000      	movs	r0, #0
 80046da:	f00f fb8b 	bl	8013df4 <fflush>
 80046de:	f00f fad0 	bl	8013c82 <abort>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80cf 	beq.w	8004888 <ip4_output_if_src+0x1d8>
    u16_t ip_hlen = IP_HLEN;
 80046ea:	2314      	movs	r3, #20
 80046ec:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80046ee:	2114      	movs	r1, #20
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f001 fcf9 	bl	80060e8 <pbuf_add_header>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <ip4_output_if_src+0x5e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 80046fc:	4b79      	ldr	r3, [pc, #484]	; (80048e4 <ip4_output_if_src+0x234>)
 80046fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004700:	3301      	adds	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	4b77      	ldr	r3, [pc, #476]	; (80048e4 <ip4_output_if_src+0x234>)
 8004706:	859a      	strh	r2, [r3, #44]	; 0x2c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8004708:	f06f 0301 	mvn.w	r3, #1
 800470c:	e0df      	b.n	80048ce <ip4_output_if_src+0x21e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	895b      	ldrh	r3, [r3, #10]
 8004718:	2b13      	cmp	r3, #19
 800471a:	d80b      	bhi.n	8004734 <ip4_output_if_src+0x84>
 800471c:	4b6e      	ldr	r3, [pc, #440]	; (80048d8 <ip4_output_if_src+0x228>)
 800471e:	f44f 7268 	mov.w	r2, #928	; 0x3a0
 8004722:	4971      	ldr	r1, [pc, #452]	; (80048e8 <ip4_output_if_src+0x238>)
 8004724:	486e      	ldr	r0, [pc, #440]	; (80048e0 <ip4_output_if_src+0x230>)
 8004726:	f00f fa63 	bl	8013bf0 <iprintf>
 800472a:	2000      	movs	r0, #0
 800472c:	f00f fb62 	bl	8013df4 <fflush>
 8004730:	f00f faa7 	bl	8013c82 <abort>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	78fa      	ldrb	r2, [r7, #3]
 8004738:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004740:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8004742:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	4313      	orrs	r3, r2
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	b21a      	sxth	r2, r3
 8004750:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	021b      	lsls	r3, r3, #8
 8004758:	430b      	orrs	r3, r1
 800475a:	121b      	asrs	r3, r3, #8
 800475c:	b21b      	sxth	r3, r3
 800475e:	b2db      	uxtb	r3, r3
 8004760:	b21b      	sxth	r3, r3
 8004762:	4313      	orrs	r3, r2
 8004764:	b21b      	sxth	r3, r3
 8004766:	b29b      	uxth	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	4413      	add	r3, r2
 800476e:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	b29b      	uxth	r3, r3
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	4413      	add	r3, r2
 8004782:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	0c1b      	lsrs	r3, r3, #16
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	4413      	add	r3, r2
 800478e:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8004790:	8b7b      	ldrh	r3, [r7, #26]
 8004792:	089b      	lsrs	r3, r3, #2
 8004794:	b29b      	uxth	r3, r3
 8004796:	b2db      	uxtb	r3, r3
 8004798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800479c:	b2da      	uxtb	r2, r3
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80047a8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 80047aa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	021b      	lsls	r3, r3, #8
 80047b4:	4313      	orrs	r3, r2
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	b21a      	sxth	r2, r3
 80047ba:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	430b      	orrs	r3, r1
 80047c6:	121b      	asrs	r3, r3, #8
 80047c8:	b21b      	sxth	r3, r3
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	b21b      	sxth	r3, r3
 80047ce:	4313      	orrs	r3, r2
 80047d0:	b21b      	sxth	r3, r3
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	891b      	ldrh	r3, [r3, #8]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff fbd5 	bl	8003f90 <lwip_htons>
 80047e6:	4603      	mov	r3, r0
 80047e8:	461a      	mov	r2, r3
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	885b      	ldrh	r3, [r3, #2]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	461a      	mov	r2, r3
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	4413      	add	r3, r2
 80047fa:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2200      	movs	r2, #0
 8004800:	719a      	strb	r2, [r3, #6]
 8004802:	2200      	movs	r2, #0
 8004804:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8004806:	4b39      	ldr	r3, [pc, #228]	; (80048ec <ip4_output_if_src+0x23c>)
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff fbc0 	bl	8003f90 <lwip_htons>
 8004810:	4603      	mov	r3, r0
 8004812:	461a      	mov	r2, r3
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	889b      	ldrh	r3, [r3, #4]
 800481c:	b29b      	uxth	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	4413      	add	r3, r2
 8004824:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8004826:	4b31      	ldr	r3, [pc, #196]	; (80048ec <ip4_output_if_src+0x23c>)
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	3301      	adds	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	4b2f      	ldr	r3, [pc, #188]	; (80048ec <ip4_output_if_src+0x23c>)
 8004830:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d104      	bne.n	8004842 <ip4_output_if_src+0x192>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8004838:	4b2d      	ldr	r3, [pc, #180]	; (80048f0 <ip4_output_if_src+0x240>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	60da      	str	r2, [r3, #12]
 8004840:	e003      	b.n	800484a <ip4_output_if_src+0x19a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	b29b      	uxth	r3, r3
 8004850:	69fa      	ldr	r2, [r7, #28]
 8004852:	4413      	add	r3, r2
 8004854:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	0c1b      	lsrs	r3, r3, #16
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	4413      	add	r3, r2
 8004860:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	0c1a      	lsrs	r2, r3, #16
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	b29b      	uxth	r3, r3
 800486a:	4413      	add	r3, r2
 800486c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	0c1b      	lsrs	r3, r3, #16
 8004872:	69fa      	ldr	r2, [r7, #28]
 8004874:	4413      	add	r3, r2
 8004876:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	43db      	mvns	r3, r3
 800487c:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	b29a      	uxth	r2, r3
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	815a      	strh	r2, [r3, #10]
 8004886:	e015      	b.n	80048b4 <ip4_output_if_src+0x204>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	895b      	ldrh	r3, [r3, #10]
 800488c:	2b13      	cmp	r3, #19
 800488e:	d808      	bhi.n	80048a2 <ip4_output_if_src+0x1f2>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 8004890:	4b14      	ldr	r3, [pc, #80]	; (80048e4 <ip4_output_if_src+0x234>)
 8004892:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004894:	3301      	adds	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <ip4_output_if_src+0x234>)
 800489a:	859a      	strh	r2, [r3, #44]	; 0x2c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800489c:	f06f 0301 	mvn.w	r3, #1
 80048a0:	e015      	b.n	80048ce <ip4_output_if_src+0x21e>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	617b      	str	r3, [r7, #20]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 80048ae:	f107 0310 	add.w	r3, r7, #16
 80048b2:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 80048b4:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <ip4_output_if_src+0x234>)
 80048b6:	8b1b      	ldrh	r3, [r3, #24]
 80048b8:	3301      	adds	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <ip4_output_if_src+0x234>)
 80048be:	831a      	strh	r2, [r3, #24]
    return ERR_BUF;
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80048c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	68f9      	ldr	r1, [r7, #12]
 80048c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048ca:	4798      	blx	r3
 80048cc:	4603      	mov	r3, r0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3720      	adds	r7, #32
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	08015b14 	.word	0x08015b14
 80048dc:	08015b38 	.word	0x08015b38
 80048e0:	08015b44 	.word	0x08015b44
 80048e4:	2000221c 	.word	0x2000221c
 80048e8:	08015b6c 	.word	0x08015b6c
 80048ec:	2000063a 	.word	0x2000063a
 80048f0:	08017e50 	.word	0x08017e50

080048f4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004908:	d002      	beq.n	8004910 <ip4_addr_isbroadcast_u32+0x1c>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8004910:	2301      	movs	r3, #1
 8004912:	e02a      	b.n	800496a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8004922:	2300      	movs	r3, #0
 8004924:	e021      	b.n	800496a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	3304      	adds	r3, #4
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	429a      	cmp	r2, r3
 8004930:	d101      	bne.n	8004936 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8004932:	2300      	movs	r3, #0
 8004934:	e019      	b.n	800496a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_net_eq(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	3304      	adds	r3, #4
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	405a      	eors	r2, r3
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	3308      	adds	r3, #8
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4013      	ands	r3, r2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10d      	bne.n	8004968 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	3308      	adds	r3, #8
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	43da      	mvns	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	3308      	adds	r3, #8
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8004960:	429a      	cmp	r2, r3
 8004962:	d101      	bne.n	8004968 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8004968:	2300      	movs	r3, #0
  }
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
	...

08004978 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8004980:	2210      	movs	r2, #16
 8004982:	4904      	ldr	r1, [pc, #16]	; (8004994 <ip4addr_ntoa+0x1c>)
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f807 	bl	8004998 <ip4addr_ntoa_r>
 800498a:	4603      	mov	r3, r0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	2000063c 	.word	0x2000063c

08004998 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8004998:	b480      	push	{r7}
 800499a:	b08d      	sub	sp, #52	; 0x34
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80049b2:	f107 0318 	add.w	r3, r7, #24
 80049b6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80049b8:	2300      	movs	r3, #0
 80049ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80049be:	e059      	b.n	8004a74 <ip4addr_ntoa_r+0xdc>
    i = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	781a      	ldrb	r2, [r3, #0]
 80049ca:	4b33      	ldr	r3, [pc, #204]	; (8004a98 <ip4addr_ntoa_r+0x100>)
 80049cc:	fba3 1302 	umull	r1, r3, r3, r2
 80049d0:	08d9      	lsrs	r1, r3, #3
 80049d2:	460b      	mov	r3, r1
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	440b      	add	r3, r1
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	4a2d      	ldr	r2, [pc, #180]	; (8004a98 <ip4addr_ntoa_r+0x100>)
 80049e4:	fba2 2303 	umull	r2, r3, r2, r3
 80049e8:	08db      	lsrs	r3, r3, #3
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80049f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80049fa:	4619      	mov	r1, r3
 80049fc:	7ffb      	ldrb	r3, [r7, #31]
 80049fe:	3330      	adds	r3, #48	; 0x30
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a06:	440b      	add	r3, r1
 8004a08:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1d8      	bne.n	80049c6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8004a14:	e012      	b.n	8004a3c <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	623a      	str	r2, [r7, #32]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	db01      	blt.n	8004a26 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	e031      	b.n	8004a8a <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8004a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a2c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004a30:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004a34:	440a      	add	r2, r1
 8004a36:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8004a3a:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8004a3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004a40:	1e5a      	subs	r2, r3, #1
 8004a42:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1e5      	bne.n	8004a16 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	623a      	str	r2, [r7, #32]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	4293      	cmp	r3, r2
 8004a54:	db01      	blt.n	8004a5a <ip4addr_ntoa_r+0xc2>
      return NULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e017      	b.n	8004a8a <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a60:	222e      	movs	r2, #46	; 0x2e
 8004a62:	701a      	strb	r2, [r3, #0]
    ap++;
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	3301      	adds	r3, #1
 8004a68:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8004a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a6e:	3301      	adds	r3, #1
 8004a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d9a1      	bls.n	80049c0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8004a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
  return buf;
 8004a88:	68bb      	ldr	r3, [r7, #8]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3734      	adds	r7, #52	; 0x34
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	cccccccd 	.word	0xcccccccd

08004a9c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004aa6:	4b05      	ldr	r3, [pc, #20]	; (8004abc <ptr_to_mem+0x20>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	4413      	add	r3, r2
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	2000064c 	.word	0x2000064c

08004ac0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a05      	ldr	r2, [pc, #20]	; (8004ae0 <mem_to_ptr+0x20>)
 8004acc:	6812      	ldr	r2, [r2, #0]
 8004ace:	1a9b      	subs	r3, r3, r2
 8004ad0:	b29b      	uxth	r3, r3
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	2000064c 	.word	0x2000064c

08004ae4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004ae4:	b590      	push	{r4, r7, lr}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004aec:	4b4f      	ldr	r3, [pc, #316]	; (8004c2c <plug_holes+0x148>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d20b      	bcs.n	8004b0e <plug_holes+0x2a>
 8004af6:	4b4e      	ldr	r3, [pc, #312]	; (8004c30 <plug_holes+0x14c>)
 8004af8:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 8004afc:	494d      	ldr	r1, [pc, #308]	; (8004c34 <plug_holes+0x150>)
 8004afe:	484e      	ldr	r0, [pc, #312]	; (8004c38 <plug_holes+0x154>)
 8004b00:	f00f f876 	bl	8013bf0 <iprintf>
 8004b04:	2000      	movs	r0, #0
 8004b06:	f00f f975 	bl	8013df4 <fflush>
 8004b0a:	f00f f8ba 	bl	8013c82 <abort>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004b0e:	4b4b      	ldr	r3, [pc, #300]	; (8004c3c <plug_holes+0x158>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d30b      	bcc.n	8004b30 <plug_holes+0x4c>
 8004b18:	4b45      	ldr	r3, [pc, #276]	; (8004c30 <plug_holes+0x14c>)
 8004b1a:	f240 12d3 	movw	r2, #467	; 0x1d3
 8004b1e:	4948      	ldr	r1, [pc, #288]	; (8004c40 <plug_holes+0x15c>)
 8004b20:	4845      	ldr	r0, [pc, #276]	; (8004c38 <plug_holes+0x154>)
 8004b22:	f00f f865 	bl	8013bf0 <iprintf>
 8004b26:	2000      	movs	r0, #0
 8004b28:	f00f f964 	bl	8013df4 <fflush>
 8004b2c:	f00f f8a9 	bl	8013c82 <abort>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	791b      	ldrb	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00b      	beq.n	8004b50 <plug_holes+0x6c>
 8004b38:	4b3d      	ldr	r3, [pc, #244]	; (8004c30 <plug_holes+0x14c>)
 8004b3a:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8004b3e:	4941      	ldr	r1, [pc, #260]	; (8004c44 <plug_holes+0x160>)
 8004b40:	483d      	ldr	r0, [pc, #244]	; (8004c38 <plug_holes+0x154>)
 8004b42:	f00f f855 	bl	8013bf0 <iprintf>
 8004b46:	2000      	movs	r0, #0
 8004b48:	f00f f954 	bl	8013df4 <fflush>
 8004b4c:	f00f f899 	bl	8013c82 <abort>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b58:	d90b      	bls.n	8004b72 <plug_holes+0x8e>
 8004b5a:	4b35      	ldr	r3, [pc, #212]	; (8004c30 <plug_holes+0x14c>)
 8004b5c:	f240 12d7 	movw	r2, #471	; 0x1d7
 8004b60:	4939      	ldr	r1, [pc, #228]	; (8004c48 <plug_holes+0x164>)
 8004b62:	4835      	ldr	r0, [pc, #212]	; (8004c38 <plug_holes+0x154>)
 8004b64:	f00f f844 	bl	8013bf0 <iprintf>
 8004b68:	2000      	movs	r0, #0
 8004b6a:	f00f f943 	bl	8013df4 <fflush>
 8004b6e:	f00f f888 	bl	8013c82 <abort>

  nmem = ptr_to_mem(mem->next);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff ff90 	bl	8004a9c <ptr_to_mem>
 8004b7c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d024      	beq.n	8004bd0 <plug_holes+0xec>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	791b      	ldrb	r3, [r3, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d120      	bne.n	8004bd0 <plug_holes+0xec>
 8004b8e:	4b2b      	ldr	r3, [pc, #172]	; (8004c3c <plug_holes+0x158>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d01b      	beq.n	8004bd0 <plug_holes+0xec>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004b98:	4b2c      	ldr	r3, [pc, #176]	; (8004c4c <plug_holes+0x168>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d102      	bne.n	8004ba8 <plug_holes+0xc4>
      lfree = mem;
 8004ba2:	4a2a      	ldr	r2, [pc, #168]	; (8004c4c <plug_holes+0x168>)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	881a      	ldrh	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004bb8:	d00a      	beq.n	8004bd0 <plug_holes+0xec>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff ff6c 	bl	8004a9c <ptr_to_mem>
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7ff ff7a 	bl	8004ac0 <mem_to_ptr>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	885b      	ldrh	r3, [r3, #2]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff ff61 	bl	8004a9c <ptr_to_mem>
 8004bda:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d01f      	beq.n	8004c24 <plug_holes+0x140>
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	791b      	ldrb	r3, [r3, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d11b      	bne.n	8004c24 <plug_holes+0x140>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004bec:	4b17      	ldr	r3, [pc, #92]	; (8004c4c <plug_holes+0x168>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d102      	bne.n	8004bfc <plug_holes+0x118>
      lfree = pmem;
 8004bf6:	4a15      	ldr	r2, [pc, #84]	; (8004c4c <plug_holes+0x168>)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	881a      	ldrh	r2, [r3, #0]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c0c:	d00a      	beq.n	8004c24 <plug_holes+0x140>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff ff42 	bl	8004a9c <ptr_to_mem>
 8004c18:	4604      	mov	r4, r0
 8004c1a:	68b8      	ldr	r0, [r7, #8]
 8004c1c:	f7ff ff50 	bl	8004ac0 <mem_to_ptr>
 8004c20:	4603      	mov	r3, r0
 8004c22:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004c24:	bf00      	nop
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd90      	pop	{r4, r7, pc}
 8004c2c:	2000064c 	.word	0x2000064c
 8004c30:	08015b9c 	.word	0x08015b9c
 8004c34:	08015bbc 	.word	0x08015bbc
 8004c38:	08015bd4 	.word	0x08015bd4
 8004c3c:	20000650 	.word	0x20000650
 8004c40:	08015bfc 	.word	0x08015bfc
 8004c44:	08015c18 	.word	0x08015c18
 8004c48:	08015c34 	.word	0x08015c34
 8004c4c:	20000658 	.word	0x20000658

08004c50 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004c56:	4b22      	ldr	r3, [pc, #136]	; (8004ce0 <mem_init+0x90>)
 8004c58:	4a22      	ldr	r2, [pc, #136]	; (8004ce4 <mem_init+0x94>)
 8004c5a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004c5c:	4b20      	ldr	r3, [pc, #128]	; (8004ce0 <mem_init+0x90>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004c68:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004c76:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004c7a:	f7ff ff0f 	bl	8004a9c <ptr_to_mem>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <mem_init+0x98>)
 8004c82:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8004c84:	4b18      	ldr	r3, [pc, #96]	; (8004ce8 <mem_init+0x98>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004c8c:	4b16      	ldr	r3, [pc, #88]	; (8004ce8 <mem_init+0x98>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004c94:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004c96:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <mem_init+0x98>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004c9e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004ca0:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <mem_init+0x90>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a11      	ldr	r2, [pc, #68]	; (8004cec <mem_init+0x9c>)
 8004ca6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8004ca8:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <mem_init+0xa0>)
 8004caa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004cae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8004cb2:	4810      	ldr	r0, [pc, #64]	; (8004cf4 <mem_init+0xa4>)
 8004cb4:	f7fd f8a1 	bl	8001dfa <sys_mutex_new>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00b      	beq.n	8004cd6 <mem_init+0x86>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8004cbe:	4b0e      	ldr	r3, [pc, #56]	; (8004cf8 <mem_init+0xa8>)
 8004cc0:	f240 2212 	movw	r2, #530	; 0x212
 8004cc4:	490d      	ldr	r1, [pc, #52]	; (8004cfc <mem_init+0xac>)
 8004cc6:	480e      	ldr	r0, [pc, #56]	; (8004d00 <mem_init+0xb0>)
 8004cc8:	f00e ff92 	bl	8013bf0 <iprintf>
 8004ccc:	2000      	movs	r0, #0
 8004cce:	f00f f891 	bl	8013df4 <fflush>
 8004cd2:	f00e ffd6 	bl	8013c82 <abort>
  }
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	2000064c 	.word	0x2000064c
 8004ce4:	20000898 	.word	0x20000898
 8004ce8:	20000650 	.word	0x20000650
 8004cec:	20000658 	.word	0x20000658
 8004cf0:	2000221c 	.word	0x2000221c
 8004cf4:	20000654 	.word	0x20000654
 8004cf8:	08015b9c 	.word	0x08015b9c
 8004cfc:	08015c60 	.word	0x08015c60
 8004d00:	08015bd4 	.word	0x08015bd4

08004d04 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff fed7 	bl	8004ac0 <mem_to_ptr>
 8004d12:	4603      	mov	r3, r0
 8004d14:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff febe 	bl	8004a9c <ptr_to_mem>
 8004d20:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	885b      	ldrh	r3, [r3, #2]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff feb8 	bl	8004a9c <ptr_to_mem>
 8004d2c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d36:	d818      	bhi.n	8004d6a <mem_link_valid+0x66>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	885b      	ldrh	r3, [r3, #2]
 8004d3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d40:	d813      	bhi.n	8004d6a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004d46:	8afa      	ldrh	r2, [r7, #22]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d004      	beq.n	8004d56 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	8afa      	ldrh	r2, [r7, #22]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d109      	bne.n	8004d6a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004d56:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <mem_link_valid+0x74>)
 8004d58:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d006      	beq.n	8004d6e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	885b      	ldrh	r3, [r3, #2]
 8004d64:	8afa      	ldrh	r2, [r7, #22]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d001      	beq.n	8004d6e <mem_link_valid+0x6a>
    return 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e000      	b.n	8004d70 <mem_link_valid+0x6c>
  }
  return 1;
 8004d6e:	2301      	movs	r3, #1
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000650 	.word	0x20000650

08004d7c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d062      	beq.n	8004e50 <mem_free+0xd4>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3b06      	subs	r3, #6
 8004d8e:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004d90:	4b31      	ldr	r3, [pc, #196]	; (8004e58 <mem_free+0xdc>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d306      	bcc.n	8004da8 <mem_free+0x2c>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f103 020c 	add.w	r2, r3, #12
 8004da0:	4b2e      	ldr	r3, [pc, #184]	; (8004e5c <mem_free+0xe0>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d90b      	bls.n	8004dc0 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004da8:	4b2d      	ldr	r3, [pc, #180]	; (8004e60 <mem_free+0xe4>)
 8004daa:	f240 2272 	movw	r2, #626	; 0x272
 8004dae:	492d      	ldr	r1, [pc, #180]	; (8004e64 <mem_free+0xe8>)
 8004db0:	482d      	ldr	r0, [pc, #180]	; (8004e68 <mem_free+0xec>)
 8004db2:	f00e ff1d 	bl	8013bf0 <iprintf>
 8004db6:	2000      	movs	r0, #0
 8004db8:	f00f f81c 	bl	8013df4 <fflush>
 8004dbc:	f00e ff61 	bl	8013c82 <abort>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8004dc0:	482a      	ldr	r0, [pc, #168]	; (8004e6c <mem_free+0xf0>)
 8004dc2:	f7fd f828 	bl	8001e16 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	791b      	ldrb	r3, [r3, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10b      	bne.n	8004de6 <mem_free+0x6a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004dce:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <mem_free+0xe4>)
 8004dd0:	f240 227f 	movw	r2, #639	; 0x27f
 8004dd4:	4926      	ldr	r1, [pc, #152]	; (8004e70 <mem_free+0xf4>)
 8004dd6:	4824      	ldr	r0, [pc, #144]	; (8004e68 <mem_free+0xec>)
 8004dd8:	f00e ff0a 	bl	8013bf0 <iprintf>
 8004ddc:	2000      	movs	r0, #0
 8004dde:	f00f f809 	bl	8013df4 <fflush>
 8004de2:	f00e ff4e 	bl	8013c82 <abort>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f7ff ff8c 	bl	8004d04 <mem_link_valid>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10b      	bne.n	8004e0a <mem_free+0x8e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004df2:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <mem_free+0xe4>)
 8004df4:	f44f 7222 	mov.w	r2, #648	; 0x288
 8004df8:	491e      	ldr	r1, [pc, #120]	; (8004e74 <mem_free+0xf8>)
 8004dfa:	481b      	ldr	r0, [pc, #108]	; (8004e68 <mem_free+0xec>)
 8004dfc:	f00e fef8 	bl	8013bf0 <iprintf>
 8004e00:	2000      	movs	r0, #0
 8004e02:	f00e fff7 	bl	8013df4 <fflush>
 8004e06:	f00e ff3c 	bl	8013c82 <abort>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004e10:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <mem_free+0xfc>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d202      	bcs.n	8004e20 <mem_free+0xa4>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004e1a:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <mem_free+0xfc>)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8004e20:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <mem_free+0x100>)
 8004e22:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	490b      	ldr	r1, [pc, #44]	; (8004e58 <mem_free+0xdc>)
 8004e2a:	6809      	ldr	r1, [r1, #0]
 8004e2c:	1a5b      	subs	r3, r3, r1
 8004e2e:	b299      	uxth	r1, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	1acb      	subs	r3, r1, r3
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	4413      	add	r3, r2
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <mem_free+0x100>)
 8004e3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f7ff fe4e 	bl	8004ae4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8004e48:	4808      	ldr	r0, [pc, #32]	; (8004e6c <mem_free+0xf0>)
 8004e4a:	f7fc ffee 	bl	8001e2a <sys_mutex_unlock>
 8004e4e:	e000      	b.n	8004e52 <mem_free+0xd6>
    return;
 8004e50:	bf00      	nop
}
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	2000064c 	.word	0x2000064c
 8004e5c:	20000650 	.word	0x20000650
 8004e60:	08015b9c 	.word	0x08015b9c
 8004e64:	08015c7c 	.word	0x08015c7c
 8004e68:	08015bd4 	.word	0x08015bd4
 8004e6c:	20000654 	.word	0x20000654
 8004e70:	08015c98 	.word	0x08015c98
 8004e74:	08015cc0 	.word	0x08015cc0
 8004e78:	20000658 	.word	0x20000658
 8004e7c:	2000221c 	.word	0x2000221c

08004e80 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004e8c:	887b      	ldrh	r3, [r7, #2]
 8004e8e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004e90:	8bfb      	ldrh	r3, [r7, #30]
 8004e92:	2b0b      	cmp	r3, #11
 8004e94:	d801      	bhi.n	8004e9a <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004e96:	230c      	movs	r3, #12
 8004e98:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004e9a:	8bfb      	ldrh	r3, [r7, #30]
 8004e9c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ea0:	d803      	bhi.n	8004eaa <mem_trim+0x2a>
 8004ea2:	8bfa      	ldrh	r2, [r7, #30]
 8004ea4:	887b      	ldrh	r3, [r7, #2]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d201      	bcs.n	8004eae <mem_trim+0x2e>
    return NULL;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e10c      	b.n	80050c8 <mem_trim+0x248>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004eae:	4b88      	ldr	r3, [pc, #544]	; (80050d0 <mem_trim+0x250>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d304      	bcc.n	8004ec2 <mem_trim+0x42>
 8004eb8:	4b86      	ldr	r3, [pc, #536]	; (80050d4 <mem_trim+0x254>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d30b      	bcc.n	8004eda <mem_trim+0x5a>
 8004ec2:	4b85      	ldr	r3, [pc, #532]	; (80050d8 <mem_trim+0x258>)
 8004ec4:	f240 22c5 	movw	r2, #709	; 0x2c5
 8004ec8:	4984      	ldr	r1, [pc, #528]	; (80050dc <mem_trim+0x25c>)
 8004eca:	4885      	ldr	r0, [pc, #532]	; (80050e0 <mem_trim+0x260>)
 8004ecc:	f00e fe90 	bl	8013bf0 <iprintf>
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	f00e ff8f 	bl	8013df4 <fflush>
 8004ed6:	f00e fed4 	bl	8013c82 <abort>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004eda:	4b7d      	ldr	r3, [pc, #500]	; (80050d0 <mem_trim+0x250>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d304      	bcc.n	8004eee <mem_trim+0x6e>
 8004ee4:	4b7b      	ldr	r3, [pc, #492]	; (80050d4 <mem_trim+0x254>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d30f      	bcc.n	8004f0e <mem_trim+0x8e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8004eee:	f7fd f815 	bl	8001f1c <sys_arch_protect>
 8004ef2:	60b8      	str	r0, [r7, #8]
 8004ef4:	4b7b      	ldr	r3, [pc, #492]	; (80050e4 <mem_trim+0x264>)
 8004ef6:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8004efa:	3301      	adds	r3, #1
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	4b79      	ldr	r3, [pc, #484]	; (80050e4 <mem_trim+0x264>)
 8004f00:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8004f04:	68b8      	ldr	r0, [r7, #8]
 8004f06:	f7fd f811 	bl	8001f2c <sys_arch_unprotect>
    return rmem;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	e0dc      	b.n	80050c8 <mem_trim+0x248>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3b06      	subs	r3, #6
 8004f12:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004f14:	69b8      	ldr	r0, [r7, #24]
 8004f16:	f7ff fdd3 	bl	8004ac0 <mem_to_ptr>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	881a      	ldrh	r2, [r3, #0]
 8004f22:	8afb      	ldrh	r3, [r7, #22]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b06      	subs	r3, #6
 8004f2a:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004f2c:	8bfa      	ldrh	r2, [r7, #30]
 8004f2e:	8abb      	ldrh	r3, [r7, #20]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d90b      	bls.n	8004f4c <mem_trim+0xcc>
 8004f34:	4b68      	ldr	r3, [pc, #416]	; (80050d8 <mem_trim+0x258>)
 8004f36:	f240 22d7 	movw	r2, #727	; 0x2d7
 8004f3a:	496b      	ldr	r1, [pc, #428]	; (80050e8 <mem_trim+0x268>)
 8004f3c:	4868      	ldr	r0, [pc, #416]	; (80050e0 <mem_trim+0x260>)
 8004f3e:	f00e fe57 	bl	8013bf0 <iprintf>
 8004f42:	2000      	movs	r0, #0
 8004f44:	f00e ff56 	bl	8013df4 <fflush>
 8004f48:	f00e fe9b 	bl	8013c82 <abort>
  if (newsize > size) {
 8004f4c:	8bfa      	ldrh	r2, [r7, #30]
 8004f4e:	8abb      	ldrh	r3, [r7, #20]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d901      	bls.n	8004f58 <mem_trim+0xd8>
    /* not supported */
    return NULL;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e0b7      	b.n	80050c8 <mem_trim+0x248>
  }
  if (newsize == size) {
 8004f58:	8bfa      	ldrh	r2, [r7, #30]
 8004f5a:	8abb      	ldrh	r3, [r7, #20]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d101      	bne.n	8004f64 <mem_trim+0xe4>
    /* No change in size, simply return */
    return rmem;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	e0b1      	b.n	80050c8 <mem_trim+0x248>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8004f64:	4861      	ldr	r0, [pc, #388]	; (80050ec <mem_trim+0x26c>)
 8004f66:	f7fc ff56 	bl	8001e16 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff fd94 	bl	8004a9c <ptr_to_mem>
 8004f74:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	791b      	ldrb	r3, [r3, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d150      	bne.n	8005020 <mem_trim+0x1a0>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f86:	d10b      	bne.n	8004fa0 <mem_trim+0x120>
 8004f88:	4b53      	ldr	r3, [pc, #332]	; (80050d8 <mem_trim+0x258>)
 8004f8a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8004f8e:	4958      	ldr	r1, [pc, #352]	; (80050f0 <mem_trim+0x270>)
 8004f90:	4853      	ldr	r0, [pc, #332]	; (80050e0 <mem_trim+0x260>)
 8004f92:	f00e fe2d 	bl	8013bf0 <iprintf>
 8004f96:	2000      	movs	r0, #0
 8004f98:	f00e ff2c 	bl	8013df4 <fflush>
 8004f9c:	f00e fe71 	bl	8013c82 <abort>
    /* remember the old next pointer */
    next = mem2->next;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	81fb      	strh	r3, [r7, #14]
    /* create new struct mem which is moved directly after the shrunk mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004fa6:	8afa      	ldrh	r2, [r7, #22]
 8004fa8:	8bfb      	ldrh	r3, [r7, #30]
 8004faa:	4413      	add	r3, r2
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	3306      	adds	r3, #6
 8004fb0:	81bb      	strh	r3, [r7, #12]
    if (lfree == mem2) {
 8004fb2:	4b50      	ldr	r3, [pc, #320]	; (80050f4 <mem_trim+0x274>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d106      	bne.n	8004fca <mem_trim+0x14a>
      lfree = ptr_to_mem(ptr2);
 8004fbc:	89bb      	ldrh	r3, [r7, #12]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff fd6c 	bl	8004a9c <ptr_to_mem>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	4b4b      	ldr	r3, [pc, #300]	; (80050f4 <mem_trim+0x274>)
 8004fc8:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004fca:	89bb      	ldrh	r3, [r7, #12]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fd65 	bl	8004a9c <ptr_to_mem>
 8004fd2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	89fa      	ldrh	r2, [r7, #14]
 8004fde:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	8afa      	ldrh	r2, [r7, #22]
 8004fe4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	89ba      	ldrh	r2, [r7, #12]
 8004fea:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ff4:	d007      	beq.n	8005006 <mem_trim+0x186>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff fd4e 	bl	8004a9c <ptr_to_mem>
 8005000:	4602      	mov	r2, r0
 8005002:	89bb      	ldrh	r3, [r7, #12]
 8005004:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8005006:	4b37      	ldr	r3, [pc, #220]	; (80050e4 <mem_trim+0x264>)
 8005008:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800500c:	8bf9      	ldrh	r1, [r7, #30]
 800500e:	8abb      	ldrh	r3, [r7, #20]
 8005010:	1acb      	subs	r3, r1, r3
 8005012:	b29b      	uxth	r3, r3
 8005014:	4413      	add	r3, r2
 8005016:	b29a      	uxth	r2, r3
 8005018:	4b32      	ldr	r3, [pc, #200]	; (80050e4 <mem_trim+0x264>)
 800501a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800501e:	e04f      	b.n	80050c0 <mem_trim+0x240>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005020:	8bfb      	ldrh	r3, [r7, #30]
 8005022:	f103 0212 	add.w	r2, r3, #18
 8005026:	8abb      	ldrh	r3, [r7, #20]
 8005028:	429a      	cmp	r2, r3
 800502a:	d849      	bhi.n	80050c0 <mem_trim+0x240>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800502c:	8afa      	ldrh	r2, [r7, #22]
 800502e:	8bfb      	ldrh	r3, [r7, #30]
 8005030:	4413      	add	r3, r2
 8005032:	b29b      	uxth	r3, r3
 8005034:	3306      	adds	r3, #6
 8005036:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005040:	d10b      	bne.n	800505a <mem_trim+0x1da>
 8005042:	4b25      	ldr	r3, [pc, #148]	; (80050d8 <mem_trim+0x258>)
 8005044:	f240 3209 	movw	r2, #777	; 0x309
 8005048:	4929      	ldr	r1, [pc, #164]	; (80050f0 <mem_trim+0x270>)
 800504a:	4825      	ldr	r0, [pc, #148]	; (80050e0 <mem_trim+0x260>)
 800504c:	f00e fdd0 	bl	8013bf0 <iprintf>
 8005050:	2000      	movs	r0, #0
 8005052:	f00e fecf 	bl	8013df4 <fflush>
 8005056:	f00e fe14 	bl	8013c82 <abort>
    mem2 = ptr_to_mem(ptr2);
 800505a:	89bb      	ldrh	r3, [r7, #12]
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff fd1d 	bl	8004a9c <ptr_to_mem>
 8005062:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005064:	4b23      	ldr	r3, [pc, #140]	; (80050f4 <mem_trim+0x274>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	429a      	cmp	r2, r3
 800506c:	d202      	bcs.n	8005074 <mem_trim+0x1f4>
      lfree = mem2;
 800506e:	4a21      	ldr	r2, [pc, #132]	; (80050f4 <mem_trim+0x274>)
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	2200      	movs	r2, #0
 8005078:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	881a      	ldrh	r2, [r3, #0]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	8afa      	ldrh	r2, [r7, #22]
 8005086:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	89ba      	ldrh	r2, [r7, #12]
 800508c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005096:	d007      	beq.n	80050a8 <mem_trim+0x228>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff fcfd 	bl	8004a9c <ptr_to_mem>
 80050a2:	4602      	mov	r2, r0
 80050a4:	89bb      	ldrh	r3, [r7, #12]
 80050a6:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 80050a8:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <mem_trim+0x264>)
 80050aa:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 80050ae:	8bf9      	ldrh	r1, [r7, #30]
 80050b0:	8abb      	ldrh	r3, [r7, #20]
 80050b2:	1acb      	subs	r3, r1, r3
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <mem_trim+0x264>)
 80050bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80050c0:	480a      	ldr	r0, [pc, #40]	; (80050ec <mem_trim+0x26c>)
 80050c2:	f7fc feb2 	bl	8001e2a <sys_mutex_unlock>
  return rmem;
 80050c6:	687b      	ldr	r3, [r7, #4]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3720      	adds	r7, #32
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	2000064c 	.word	0x2000064c
 80050d4:	20000650 	.word	0x20000650
 80050d8:	08015b9c 	.word	0x08015b9c
 80050dc:	08015cf4 	.word	0x08015cf4
 80050e0:	08015bd4 	.word	0x08015bd4
 80050e4:	2000221c 	.word	0x2000221c
 80050e8:	08015d0c 	.word	0x08015d0c
 80050ec:	20000654 	.word	0x20000654
 80050f0:	08015d2c 	.word	0x08015d2c
 80050f4:	20000658 	.word	0x20000658

080050f8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80050f8:	b590      	push	{r4, r7, lr}
 80050fa:	b089      	sub	sp, #36	; 0x24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	4603      	mov	r3, r0
 8005100:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005102:	88fb      	ldrh	r3, [r7, #6]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <mem_malloc+0x14>
    return NULL;
 8005108:	2300      	movs	r3, #0
 800510a:	e112      	b.n	8005332 <mem_malloc+0x23a>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800510c:	88fb      	ldrh	r3, [r7, #6]
 800510e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005110:	8bbb      	ldrh	r3, [r7, #28]
 8005112:	2b0b      	cmp	r3, #11
 8005114:	d801      	bhi.n	800511a <mem_malloc+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005116:	230c      	movs	r3, #12
 8005118:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800511a:	8bbb      	ldrh	r3, [r7, #28]
 800511c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005120:	d803      	bhi.n	800512a <mem_malloc+0x32>
 8005122:	8bba      	ldrh	r2, [r7, #28]
 8005124:	88fb      	ldrh	r3, [r7, #6]
 8005126:	429a      	cmp	r2, r3
 8005128:	d201      	bcs.n	800512e <mem_malloc+0x36>
    return NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	e101      	b.n	8005332 <mem_malloc+0x23a>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800512e:	4883      	ldr	r0, [pc, #524]	; (800533c <mem_malloc+0x244>)
 8005130:	f7fc fe71 	bl	8001e16 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005134:	4b82      	ldr	r3, [pc, #520]	; (8005340 <mem_malloc+0x248>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff fcc1 	bl	8004ac0 <mem_to_ptr>
 800513e:	4603      	mov	r3, r0
 8005140:	83fb      	strh	r3, [r7, #30]
 8005142:	e0e3      	b.n	800530c <mem_malloc+0x214>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005144:	8bfb      	ldrh	r3, [r7, #30]
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff fca8 	bl	8004a9c <ptr_to_mem>
 800514c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	791b      	ldrb	r3, [r3, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	f040 80d3 	bne.w	80052fe <mem_malloc+0x206>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	461a      	mov	r2, r3
 800515e:	8bfb      	ldrh	r3, [r7, #30]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	1f9a      	subs	r2, r3, #6
 8005164:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005166:	429a      	cmp	r2, r3
 8005168:	f0c0 80c9 	bcc.w	80052fe <mem_malloc+0x206>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	8bfb      	ldrh	r3, [r7, #30]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	1f9a      	subs	r2, r3, #6
 8005178:	8bbb      	ldrh	r3, [r7, #28]
 800517a:	3312      	adds	r3, #18
 800517c:	429a      	cmp	r2, r3
 800517e:	d351      	bcc.n	8005224 <mem_malloc+0x12c>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005180:	8bfa      	ldrh	r2, [r7, #30]
 8005182:	8bbb      	ldrh	r3, [r7, #28]
 8005184:	4413      	add	r3, r2
 8005186:	b29b      	uxth	r3, r3
 8005188:	3306      	adds	r3, #6
 800518a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800518c:	8a7b      	ldrh	r3, [r7, #18]
 800518e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005192:	d10b      	bne.n	80051ac <mem_malloc+0xb4>
 8005194:	4b6b      	ldr	r3, [pc, #428]	; (8005344 <mem_malloc+0x24c>)
 8005196:	f240 327a 	movw	r2, #890	; 0x37a
 800519a:	496b      	ldr	r1, [pc, #428]	; (8005348 <mem_malloc+0x250>)
 800519c:	486b      	ldr	r0, [pc, #428]	; (800534c <mem_malloc+0x254>)
 800519e:	f00e fd27 	bl	8013bf0 <iprintf>
 80051a2:	2000      	movs	r0, #0
 80051a4:	f00e fe26 	bl	8013df4 <fflush>
 80051a8:	f00e fd6b 	bl	8013c82 <abort>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80051ac:	8a7b      	ldrh	r3, [r7, #18]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff fc74 	bl	8004a9c <ptr_to_mem>
 80051b4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	881a      	ldrh	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8bfa      	ldrh	r2, [r7, #30]
 80051c8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	8a7a      	ldrh	r2, [r7, #18]
 80051ce:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2201      	movs	r2, #1
 80051d4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80051de:	d007      	beq.n	80051f0 <mem_malloc+0xf8>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff fc59 	bl	8004a9c <ptr_to_mem>
 80051ea:	4602      	mov	r2, r0
 80051ec:	8a7b      	ldrh	r3, [r7, #18]
 80051ee:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 80051f0:	4b57      	ldr	r3, [pc, #348]	; (8005350 <mem_malloc+0x258>)
 80051f2:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 80051f6:	8bbb      	ldrh	r3, [r7, #28]
 80051f8:	4413      	add	r3, r2
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	3306      	adds	r3, #6
 80051fe:	b29a      	uxth	r2, r3
 8005200:	4b53      	ldr	r3, [pc, #332]	; (8005350 <mem_malloc+0x258>)
 8005202:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005206:	4b52      	ldr	r3, [pc, #328]	; (8005350 <mem_malloc+0x258>)
 8005208:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800520c:	4b50      	ldr	r3, [pc, #320]	; (8005350 <mem_malloc+0x258>)
 800520e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005212:	429a      	cmp	r2, r3
 8005214:	d227      	bcs.n	8005266 <mem_malloc+0x16e>
 8005216:	4b4e      	ldr	r3, [pc, #312]	; (8005350 <mem_malloc+0x258>)
 8005218:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800521c:	4b4c      	ldr	r3, [pc, #304]	; (8005350 <mem_malloc+0x258>)
 800521e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005222:	e020      	b.n	8005266 <mem_malloc+0x16e>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2201      	movs	r2, #1
 8005228:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 800522a:	4b49      	ldr	r3, [pc, #292]	; (8005350 <mem_malloc+0x258>)
 800522c:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	4413      	add	r3, r2
 8005236:	b29c      	uxth	r4, r3
 8005238:	6978      	ldr	r0, [r7, #20]
 800523a:	f7ff fc41 	bl	8004ac0 <mem_to_ptr>
 800523e:	4603      	mov	r3, r0
 8005240:	1ae3      	subs	r3, r4, r3
 8005242:	b29a      	uxth	r2, r3
 8005244:	4b42      	ldr	r3, [pc, #264]	; (8005350 <mem_malloc+0x258>)
 8005246:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800524a:	4b41      	ldr	r3, [pc, #260]	; (8005350 <mem_malloc+0x258>)
 800524c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8005250:	4b3f      	ldr	r3, [pc, #252]	; (8005350 <mem_malloc+0x258>)
 8005252:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005256:	429a      	cmp	r2, r3
 8005258:	d205      	bcs.n	8005266 <mem_malloc+0x16e>
 800525a:	4b3d      	ldr	r3, [pc, #244]	; (8005350 <mem_malloc+0x258>)
 800525c:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8005260:	4b3b      	ldr	r3, [pc, #236]	; (8005350 <mem_malloc+0x258>)
 8005262:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005266:	4b36      	ldr	r3, [pc, #216]	; (8005340 <mem_malloc+0x248>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	429a      	cmp	r2, r3
 800526e:	d12c      	bne.n	80052ca <mem_malloc+0x1d2>
          struct mem *cur = lfree;
 8005270:	4b33      	ldr	r3, [pc, #204]	; (8005340 <mem_malloc+0x248>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005276:	e005      	b.n	8005284 <mem_malloc+0x18c>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff fc0d 	bl	8004a9c <ptr_to_mem>
 8005282:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	791b      	ldrb	r3, [r3, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d004      	beq.n	8005296 <mem_malloc+0x19e>
 800528c:	4b31      	ldr	r3, [pc, #196]	; (8005354 <mem_malloc+0x25c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	429a      	cmp	r2, r3
 8005294:	d1f0      	bne.n	8005278 <mem_malloc+0x180>
          }
          lfree = cur;
 8005296:	4a2a      	ldr	r2, [pc, #168]	; (8005340 <mem_malloc+0x248>)
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800529c:	4b28      	ldr	r3, [pc, #160]	; (8005340 <mem_malloc+0x248>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	4b2c      	ldr	r3, [pc, #176]	; (8005354 <mem_malloc+0x25c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d010      	beq.n	80052ca <mem_malloc+0x1d2>
 80052a8:	4b25      	ldr	r3, [pc, #148]	; (8005340 <mem_malloc+0x248>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	791b      	ldrb	r3, [r3, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00b      	beq.n	80052ca <mem_malloc+0x1d2>
 80052b2:	4b24      	ldr	r3, [pc, #144]	; (8005344 <mem_malloc+0x24c>)
 80052b4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80052b8:	4927      	ldr	r1, [pc, #156]	; (8005358 <mem_malloc+0x260>)
 80052ba:	4824      	ldr	r0, [pc, #144]	; (800534c <mem_malloc+0x254>)
 80052bc:	f00e fc98 	bl	8013bf0 <iprintf>
 80052c0:	2000      	movs	r0, #0
 80052c2:	f00e fd97 	bl	8013df4 <fflush>
 80052c6:	f00e fcdc 	bl	8013c82 <abort>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80052ca:	481c      	ldr	r0, [pc, #112]	; (800533c <mem_malloc+0x244>)
 80052cc:	f7fc fdad 	bl	8001e2a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80052d0:	8bba      	ldrh	r2, [r7, #28]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	4413      	add	r3, r2
 80052d6:	3306      	adds	r3, #6
 80052d8:	4a1e      	ldr	r2, [pc, #120]	; (8005354 <mem_malloc+0x25c>)
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	4293      	cmp	r3, r2
 80052de:	d90b      	bls.n	80052f8 <mem_malloc+0x200>
 80052e0:	4b18      	ldr	r3, [pc, #96]	; (8005344 <mem_malloc+0x24c>)
 80052e2:	f240 32ad 	movw	r2, #941	; 0x3ad
 80052e6:	491d      	ldr	r1, [pc, #116]	; (800535c <mem_malloc+0x264>)
 80052e8:	4818      	ldr	r0, [pc, #96]	; (800534c <mem_malloc+0x254>)
 80052ea:	f00e fc81 	bl	8013bf0 <iprintf>
 80052ee:	2000      	movs	r0, #0
 80052f0:	f00e fd80 	bl	8013df4 <fflush>
 80052f4:	f00e fcc5 	bl	8013c82 <abort>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	3306      	adds	r3, #6
 80052fc:	e019      	b.n	8005332 <mem_malloc+0x23a>
         ptr = ptr_to_mem(ptr)->next) {
 80052fe:	8bfb      	ldrh	r3, [r7, #30]
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff fbcb 	bl	8004a9c <ptr_to_mem>
 8005306:	4603      	mov	r3, r0
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800530c:	8bfa      	ldrh	r2, [r7, #30]
 800530e:	8bbb      	ldrh	r3, [r7, #28]
 8005310:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005314:	429a      	cmp	r2, r3
 8005316:	f4ff af15 	bcc.w	8005144 <mem_malloc+0x4c>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 800531a:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <mem_malloc+0x258>)
 800531c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8005320:	3301      	adds	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <mem_malloc+0x258>)
 8005326:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800532a:	4804      	ldr	r0, [pc, #16]	; (800533c <mem_malloc+0x244>)
 800532c:	f7fc fd7d 	bl	8001e2a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3724      	adds	r7, #36	; 0x24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd90      	pop	{r4, r7, pc}
 800533a:	bf00      	nop
 800533c:	20000654 	.word	0x20000654
 8005340:	20000658 	.word	0x20000658
 8005344:	08015b9c 	.word	0x08015b9c
 8005348:	08015d2c 	.word	0x08015d2c
 800534c:	08015bd4 	.word	0x08015bd4
 8005350:	2000221c 	.word	0x2000221c
 8005354:	20000650 	.word	0x20000650
 8005358:	08015d40 	.word	0x08015d40
 800535c:	08015d5c 	.word	0x08015d5c

08005360 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	460a      	mov	r2, r1
 800536a:	80fb      	strh	r3, [r7, #6]
 800536c:	4613      	mov	r3, r2
 800536e:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	88ba      	ldrh	r2, [r7, #4]
 8005374:	fb02 f303 	mul.w	r3, r2, r3
 8005378:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	b29b      	uxth	r3, r3
 800537e:	461a      	mov	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	429a      	cmp	r2, r3
 8005384:	d001      	beq.n	800538a <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 8005386:	2300      	movs	r3, #0
 8005388:	e00e      	b.n	80053a8 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	b29b      	uxth	r3, r3
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff feb2 	bl	80050f8 <mem_malloc>
 8005394:	60b8      	str	r0, [r7, #8]
  if (p) {
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d004      	beq.n	80053a6 <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	2100      	movs	r1, #0
 80053a0:	68b8      	ldr	r0, [r7, #8]
 80053a2:	f00e fe4c 	bl	801403e <memset>
  }
  return p;
 80053a6:	68bb      	ldr	r3, [r7, #8]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	e011      	b.n	80053f0 <memp_init_pool+0x40>
    memp->next = *desc->tab;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	891b      	ldrh	r3, [r3, #8]
 80053e2:	461a      	mov	r2, r3
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4413      	add	r3, r2
 80053e8:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	3301      	adds	r3, #1
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	895b      	ldrh	r3, [r3, #10]
 80053f4:	461a      	mov	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	dce7      	bgt.n	80053cc <memp_init_pool+0x1c>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	8952      	ldrh	r2, [r2, #10]
 8005404:	80da      	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6812      	ldr	r2, [r2, #0]
 800540e:	601a      	str	r2, [r3, #0]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005410:	bf00      	nop
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005422:	2300      	movs	r3, #0
 8005424:	80fb      	strh	r3, [r7, #6]
 8005426:	e013      	b.n	8005450 <memp_init+0x34>
    memp_init_pool(memp_pools[i]);
 8005428:	88fb      	ldrh	r3, [r7, #6]
 800542a:	4a0d      	ldr	r2, [pc, #52]	; (8005460 <memp_init+0x44>)
 800542c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff ffbd 	bl	80053b0 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	88fa      	ldrh	r2, [r7, #6]
 800543a:	4909      	ldr	r1, [pc, #36]	; (8005460 <memp_init+0x44>)
 800543c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005440:	6852      	ldr	r2, [r2, #4]
 8005442:	4908      	ldr	r1, [pc, #32]	; (8005464 <memp_init+0x48>)
 8005444:	331c      	adds	r3, #28
 8005446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800544a:	88fb      	ldrh	r3, [r7, #6]
 800544c:	3301      	adds	r3, #1
 800544e:	80fb      	strh	r3, [r7, #6]
 8005450:	88fb      	ldrh	r3, [r7, #6]
 8005452:	2b07      	cmp	r3, #7
 8005454:	d9e8      	bls.n	8005428 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005456:	bf00      	nop
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	08017ef8 	.word	0x08017ef8
 8005464:	2000221c 	.word	0x2000221c

08005468 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8005470:	f7fc fd54 	bl	8001f1c <sys_arch_protect>
 8005474:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01d      	beq.n	80054c0 <do_memp_malloc_pool+0x58>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	601a      	str	r2, [r3, #0]
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	891a      	ldrh	r2, [r3, #8]
 8005494:	3201      	adds	r2, #1
 8005496:	b292      	uxth	r2, r2
 8005498:	811a      	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	891a      	ldrh	r2, [r3, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	895b      	ldrh	r3, [r3, #10]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d905      	bls.n	80054b6 <do_memp_malloc_pool+0x4e>
      desc->stats->max = desc->stats->used;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6852      	ldr	r2, [r2, #4]
 80054b2:	8912      	ldrh	r2, [r2, #8]
 80054b4:	815a      	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f7fc fd38 	bl	8001f2c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	e009      	b.n	80054d4 <do_memp_malloc_pool+0x6c>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	889a      	ldrh	r2, [r3, #4]
 80054c6:	3201      	adds	r2, #1
 80054c8:	b292      	uxth	r2, r2
 80054ca:	809a      	strh	r2, [r3, #4]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f7fc fd2d 	bl	8001f2c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10b      	bne.n	8005502 <memp_malloc_pool+0x26>
 80054ea:	4b0c      	ldr	r3, [pc, #48]	; (800551c <memp_malloc_pool+0x40>)
 80054ec:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80054f0:	490b      	ldr	r1, [pc, #44]	; (8005520 <memp_malloc_pool+0x44>)
 80054f2:	480c      	ldr	r0, [pc, #48]	; (8005524 <memp_malloc_pool+0x48>)
 80054f4:	f00e fb7c 	bl	8013bf0 <iprintf>
 80054f8:	2000      	movs	r0, #0
 80054fa:	f00e fc7b 	bl	8013df4 <fflush>
 80054fe:	f00e fbc0 	bl	8013c82 <abort>
  if (desc == NULL) {
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <memp_malloc_pool+0x30>
    return NULL;
 8005508:	2300      	movs	r3, #0
 800550a:	e003      	b.n	8005514 <memp_malloc_pool+0x38>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff ffab 	bl	8005468 <do_memp_malloc_pool>
 8005512:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	08015df4 	.word	0x08015df4
 8005520:	08015e14 	.word	0x08015e14
 8005524:	08015e28 	.word	0x08015e28

08005528 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	4603      	mov	r3, r0
 8005530:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	2b07      	cmp	r3, #7
 8005536:	d908      	bls.n	800554a <memp_malloc+0x22>
 8005538:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <memp_malloc+0x3c>)
 800553a:	f240 1257 	movw	r2, #343	; 0x157
 800553e:	490a      	ldr	r1, [pc, #40]	; (8005568 <memp_malloc+0x40>)
 8005540:	480a      	ldr	r0, [pc, #40]	; (800556c <memp_malloc+0x44>)
 8005542:	f7fc fcb2 	bl	8001eaa <lwip_win32_platform_diag>
 8005546:	2300      	movs	r3, #0
 8005548:	e008      	b.n	800555c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	4a08      	ldr	r2, [pc, #32]	; (8005570 <memp_malloc+0x48>)
 800554e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff ff88 	bl	8005468 <do_memp_malloc_pool>
 8005558:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800555a:	68fb      	ldr	r3, [r7, #12]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	08015df4 	.word	0x08015df4
 8005568:	08015e50 	.word	0x08015e50
 800556c:	08015e28 	.word	0x08015e28
 8005570:	08017ef8 	.word	0x08017ef8

08005574 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8005582:	f7fc fccb 	bl	8001f1c <sys_arch_protect>
 8005586:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	891a      	ldrh	r2, [r3, #8]
 800558e:	3a01      	subs	r2, #1
 8005590:	b292      	uxth	r2, r2
 8005592:	811a      	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80055a6:	68b8      	ldr	r0, [r7, #8]
 80055a8:	f7fc fcc0 	bl	8001f2c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80055ac:	bf00      	nop
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10b      	bne.n	80055dc <memp_free_pool+0x28>
 80055c4:	4b0d      	ldr	r3, [pc, #52]	; (80055fc <memp_free_pool+0x48>)
 80055c6:	f240 1295 	movw	r2, #405	; 0x195
 80055ca:	490d      	ldr	r1, [pc, #52]	; (8005600 <memp_free_pool+0x4c>)
 80055cc:	480d      	ldr	r0, [pc, #52]	; (8005604 <memp_free_pool+0x50>)
 80055ce:	f00e fb0f 	bl	8013bf0 <iprintf>
 80055d2:	2000      	movs	r0, #0
 80055d4:	f00e fc0e 	bl	8013df4 <fflush>
 80055d8:	f00e fb53 	bl	8013c82 <abort>
  if ((desc == NULL) || (mem == NULL)) {
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d007      	beq.n	80055f2 <memp_free_pool+0x3e>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d004      	beq.n	80055f2 <memp_free_pool+0x3e>
    return;
  }

  do_memp_free_pool(desc, mem);
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff ffc2 	bl	8005574 <do_memp_free_pool>
 80055f0:	e000      	b.n	80055f4 <memp_free_pool+0x40>
    return;
 80055f2:	bf00      	nop
}
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	08015df4 	.word	0x08015df4
 8005600:	08015e14 	.word	0x08015e14
 8005604:	08015e28 	.word	0x08015e28

08005608 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	6039      	str	r1, [r7, #0]
 8005612:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	2b07      	cmp	r3, #7
 8005618:	d907      	bls.n	800562a <memp_free+0x22>
 800561a:	4b0c      	ldr	r3, [pc, #48]	; (800564c <memp_free+0x44>)
 800561c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005620:	490b      	ldr	r1, [pc, #44]	; (8005650 <memp_free+0x48>)
 8005622:	480c      	ldr	r0, [pc, #48]	; (8005654 <memp_free+0x4c>)
 8005624:	f7fc fc41 	bl	8001eaa <lwip_win32_platform_diag>
 8005628:	e00c      	b.n	8005644 <memp_free+0x3c>

  if (mem == NULL) {
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d008      	beq.n	8005642 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005630:	79fb      	ldrb	r3, [r7, #7]
 8005632:	4a09      	ldr	r2, [pc, #36]	; (8005658 <memp_free+0x50>)
 8005634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005638:	6839      	ldr	r1, [r7, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff ff9a 	bl	8005574 <do_memp_free_pool>
 8005640:	e000      	b.n	8005644 <memp_free+0x3c>
    return;
 8005642:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	08015df4 	.word	0x08015df4
 8005650:	08015e70 	.word	0x08015e70
 8005654:	08015e28 	.word	0x08015e28
 8005658:	08017ef8 	.word	0x08017ef8

0800565c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005660:	bf00      	nop
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
	...

0800566c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d108      	bne.n	8005692 <netif_add+0x26>
 8005680:	4b5b      	ldr	r3, [pc, #364]	; (80057f0 <netif_add+0x184>)
 8005682:	f44f 7299 	mov.w	r2, #306	; 0x132
 8005686:	495b      	ldr	r1, [pc, #364]	; (80057f4 <netif_add+0x188>)
 8005688:	485b      	ldr	r0, [pc, #364]	; (80057f8 <netif_add+0x18c>)
 800568a:	f7fc fc0e 	bl	8001eaa <lwip_win32_platform_diag>
 800568e:	2300      	movs	r3, #0
 8005690:	e0a9      	b.n	80057e6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	2b00      	cmp	r3, #0
 8005696:	d108      	bne.n	80056aa <netif_add+0x3e>
 8005698:	4b55      	ldr	r3, [pc, #340]	; (80057f0 <netif_add+0x184>)
 800569a:	f240 1233 	movw	r2, #307	; 0x133
 800569e:	4957      	ldr	r1, [pc, #348]	; (80057fc <netif_add+0x190>)
 80056a0:	4855      	ldr	r0, [pc, #340]	; (80057f8 <netif_add+0x18c>)
 80056a2:	f7fc fc02 	bl	8001eaa <lwip_win32_platform_diag>
 80056a6:	2300      	movs	r3, #0
 80056a8:	e09d      	b.n	80057e6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80056b0:	4b53      	ldr	r3, [pc, #332]	; (8005800 <netif_add+0x194>)
 80056b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80056ba:	4b51      	ldr	r3, [pc, #324]	; (8005800 <netif_add+0x194>)
 80056bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80056c4:	4b4e      	ldr	r3, [pc, #312]	; (8005800 <netif_add+0x194>)
 80056c6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4a49      	ldr	r2, [pc, #292]	; (8005804 <netif_add+0x198>)
 80056de:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */

  /* remember netif specific state information data */
  netif->state = state;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a3a      	ldr	r2, [r7, #32]
 80056f2:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 80056f4:	4b44      	ldr	r3, [pc, #272]	; (8005808 <netif_add+0x19c>)
 80056f6:	781a      	ldrb	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005702:	611a      	str	r2, [r3, #16]
  netif->reschedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
#endif /* ENABLE_LOOPBACK */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f924 	bl	8005958 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	4798      	blx	r3
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <netif_add+0xb4>
    return NULL;
 800571c:	2300      	movs	r3, #0
 800571e:	e062      	b.n	80057e6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005726:	2bff      	cmp	r3, #255	; 0xff
 8005728:	d103      	bne.n	8005732 <netif_add+0xc6>
        netif->num = 0;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 8005732:	2300      	movs	r3, #0
 8005734:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005736:	4b35      	ldr	r3, [pc, #212]	; (800580c <netif_add+0x1a0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	e035      	b.n	80057aa <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	429a      	cmp	r2, r3
 8005744:	d10b      	bne.n	800575e <netif_add+0xf2>
 8005746:	4b2a      	ldr	r3, [pc, #168]	; (80057f0 <netif_add+0x184>)
 8005748:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800574c:	4930      	ldr	r1, [pc, #192]	; (8005810 <netif_add+0x1a4>)
 800574e:	482a      	ldr	r0, [pc, #168]	; (80057f8 <netif_add+0x18c>)
 8005750:	f00e fa4e 	bl	8013bf0 <iprintf>
 8005754:	2000      	movs	r0, #0
 8005756:	f00e fb4d 	bl	8013df4 <fflush>
 800575a:	f00e fa92 	bl	8013c82 <abort>
        num_netifs++;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	3301      	adds	r3, #1
 8005762:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2bff      	cmp	r3, #255	; 0xff
 8005768:	dd0b      	ble.n	8005782 <netif_add+0x116>
 800576a:	4b21      	ldr	r3, [pc, #132]	; (80057f0 <netif_add+0x184>)
 800576c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8005770:	4928      	ldr	r1, [pc, #160]	; (8005814 <netif_add+0x1a8>)
 8005772:	4821      	ldr	r0, [pc, #132]	; (80057f8 <netif_add+0x18c>)
 8005774:	f00e fa3c 	bl	8013bf0 <iprintf>
 8005778:	2000      	movs	r0, #0
 800577a:	f00e fb3b 	bl	8013df4 <fflush>
 800577e:	f00e fa80 	bl	8013c82 <abort>
        if (netif2->num == netif->num) {
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800578e:	429a      	cmp	r2, r3
 8005790:	d108      	bne.n	80057a4 <netif_add+0x138>
          netif->num++;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005798:	3301      	adds	r3, #1
 800579a:	b2da      	uxtb	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 80057a2:	e005      	b.n	80057b0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1c6      	bne.n	800573e <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1b4      	bne.n	8005720 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80057bc:	2bfe      	cmp	r3, #254	; 0xfe
 80057be:	d103      	bne.n	80057c8 <netif_add+0x15c>
    netif_num = 0;
 80057c0:	4b11      	ldr	r3, [pc, #68]	; (8005808 <netif_add+0x19c>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	e006      	b.n	80057d6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80057ce:	3301      	adds	r3, #1
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	4b0d      	ldr	r3, [pc, #52]	; (8005808 <netif_add+0x19c>)
 80057d4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80057d6:	4b0d      	ldr	r3, [pc, #52]	; (800580c <netif_add+0x1a0>)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80057de:	4a0b      	ldr	r2, [pc, #44]	; (800580c <netif_add+0x1a0>)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80057e4:	68fb      	ldr	r3, [r7, #12]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	08015e8c 	.word	0x08015e8c
 80057f4:	08015f0c 	.word	0x08015f0c
 80057f8:	08015ec8 	.word	0x08015ec8
 80057fc:	08015f28 	.word	0x08015f28
 8005800:	08017e50 	.word	0x08017e50
 8005804:	08005b71 	.word	0x08005b71
 8005808:	200006fc 	.word	0x200006fc
 800580c:	20002210 	.word	0x20002210
 8005810:	08015f4c 	.word	0x08015f4c
 8005814:	08015f60 	.word	0x08015f60

08005818 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005822:	6839      	ldr	r1, [r7, #0]
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f002 ff9d 	bl	8008764 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
	...

08005834 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10b      	bne.n	800585e <netif_do_set_ipaddr+0x2a>
 8005846:	4b22      	ldr	r3, [pc, #136]	; (80058d0 <netif_do_set_ipaddr+0x9c>)
 8005848:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 800584c:	4921      	ldr	r1, [pc, #132]	; (80058d4 <netif_do_set_ipaddr+0xa0>)
 800584e:	4822      	ldr	r0, [pc, #136]	; (80058d8 <netif_do_set_ipaddr+0xa4>)
 8005850:	f00e f9ce 	bl	8013bf0 <iprintf>
 8005854:	2000      	movs	r0, #0
 8005856:	f00e facd 	bl	8013df4 <fflush>
 800585a:	f00e fa12 	bl	8013c82 <abort>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <netif_do_set_ipaddr+0x48>
 8005864:	4b1a      	ldr	r3, [pc, #104]	; (80058d0 <netif_do_set_ipaddr+0x9c>)
 8005866:	f240 12dd 	movw	r2, #477	; 0x1dd
 800586a:	491a      	ldr	r1, [pc, #104]	; (80058d4 <netif_do_set_ipaddr+0xa0>)
 800586c:	481a      	ldr	r0, [pc, #104]	; (80058d8 <netif_do_set_ipaddr+0xa4>)
 800586e:	f00e f9bf 	bl	8013bf0 <iprintf>
 8005872:	2000      	movs	r0, #0
 8005874:	f00e fabe 	bl	8013df4 <fflush>
 8005878:	f00e fa03 	bl	8013c82 <abort>

  /* address is actually being changed? */
  if (ip4_addr_eq(ipaddr, netif_ip4_addr(netif)) == 0) {
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	3304      	adds	r3, #4
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d01c      	beq.n	80058c4 <netif_do_set_ipaddr+0x90>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3304      	adds	r3, #4
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800589a:	f107 0314 	add.w	r3, r7, #20
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff ffb9 	bl	8005818 <netif_do_ip_addr_changed>
#endif /* LWIP_ACD */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <netif_do_set_ipaddr+0x7e>
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	e000      	b.n	80058b4 <netif_do_set_ipaddr+0x80>
 80058b2:	2300      	movs	r3, #0
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80058b8:	2101      	movs	r1, #1
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 f8d2 	bl	8005a64 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <netif_do_set_ipaddr+0x92>
  }
  return 0; /* address unchanged */
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	08015e8c 	.word	0x08015e8c
 80058d4:	08015f90 	.word	0x08015f90
 80058d8:	08015ec8 	.word	0x08015ec8

080058dc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(netmask, netif_ip4_netmask(netif)) == 0) {
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3308      	adds	r3, #8
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d00a      	beq.n	800590c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <netif_do_set_netmask+0x26>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	e000      	b.n	8005904 <netif_do_set_netmask+0x28>
 8005902:	2300      	movs	r3, #0
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005908:	2301      	movs	r3, #1
 800590a:	e000      	b.n	800590e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800591a:	b480      	push	{r7}
 800591c:	b085      	sub	sp, #20
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(gw, netif_ip4_gw(netif)) == 0) {
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	330c      	adds	r3, #12
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d00a      	beq.n	800594a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <netif_do_set_gw+0x26>
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	e000      	b.n	8005942 <netif_do_set_gw+0x28>
 8005940:	2300      	movs	r3, #0
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800596a:	2300      	movs	r3, #0
 800596c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005974:	4b1c      	ldr	r3, [pc, #112]	; (80059e8 <netif_set_addr+0x90>)
 8005976:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800597e:	4b1a      	ldr	r3, [pc, #104]	; (80059e8 <netif_set_addr+0x90>)
 8005980:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005988:	4b17      	ldr	r3, [pc, #92]	; (80059e8 <netif_set_addr+0x90>)
 800598a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <netif_set_addr+0x42>
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <netif_set_addr+0x46>
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <netif_set_addr+0x48>
 800599e:	2300      	movs	r3, #0
 80059a0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d006      	beq.n	80059b6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80059a8:	f107 0310 	add.w	r3, r7, #16
 80059ac:	461a      	mov	r2, r3
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f7ff ff3f 	bl	8005834 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f7ff ff8e 	bl	80058dc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	6839      	ldr	r1, [r7, #0]
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f7ff ffa8 	bl	800591a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d106      	bne.n	80059de <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80059d0:	f107 0310 	add.w	r3, r7, #16
 80059d4:	461a      	mov	r2, r3
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f7ff ff2b 	bl	8005834 <netif_do_set_ipaddr>
  }
  if (change_reason != LWIP_NSC_NONE) {
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80059de:	bf00      	nop
 80059e0:	3720      	adds	r7, #32
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	08017e50 	.word	0x08017e50

080059ec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80059f4:	4a04      	ldr	r2, [pc, #16]	; (8005a08 <netif_set_default+0x1c>)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	20002214 	.word	0x20002214

08005a0c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d107      	bne.n	8005a2a <netif_set_up+0x1e>
 8005a1a:	4b0f      	ldr	r3, [pc, #60]	; (8005a58 <netif_set_up+0x4c>)
 8005a1c:	f240 326b 	movw	r2, #875	; 0x36b
 8005a20:	490e      	ldr	r1, [pc, #56]	; (8005a5c <netif_set_up+0x50>)
 8005a22:	480f      	ldr	r0, [pc, #60]	; (8005a60 <netif_set_up+0x54>)
 8005a24:	f7fc fa41 	bl	8001eaa <lwip_win32_platform_diag>
 8005a28:	e013      	b.n	8005a52 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10c      	bne.n	8005a52 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a3e:	f043 0301 	orr.w	r3, r3, #1
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005a4a:	2103      	movs	r1, #3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f809 	bl	8005a64 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	08015e8c 	.word	0x08015e8c
 8005a5c:	08016000 	.word	0x08016000
 8005a60:	08015ec8 	.word	0x08015ec8

08005a64 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10b      	bne.n	8005a8e <netif_issue_reports+0x2a>
 8005a76:	4b11      	ldr	r3, [pc, #68]	; (8005abc <netif_issue_reports+0x58>)
 8005a78:	f44f 7262 	mov.w	r2, #904	; 0x388
 8005a7c:	4910      	ldr	r1, [pc, #64]	; (8005ac0 <netif_issue_reports+0x5c>)
 8005a7e:	4811      	ldr	r0, [pc, #68]	; (8005ac4 <netif_issue_reports+0x60>)
 8005a80:	f00e f8b6 	bl	8013bf0 <iprintf>
 8005a84:	2000      	movs	r0, #0
 8005a86:	f00e f9b5 	bl	8013df4 <fflush>
 8005a8a:	f00e f8fa 	bl	8013c82 <abort>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00b      	beq.n	8005ab4 <netif_issue_reports+0x50>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005aa2:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d004      	beq.n	8005ab4 <netif_issue_reports+0x50>
    return;
  }
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	e000      	b.n	8005ab6 <netif_issue_reports+0x52>
    return;
 8005ab4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	08015e8c 	.word	0x08015e8c
 8005ac0:	0801601c 	.word	0x0801601c
 8005ac4:	08015ec8 	.word	0x08015ec8

08005ac8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d107      	bne.n	8005ae6 <netif_set_link_up+0x1e>
 8005ad6:	4b0f      	ldr	r3, [pc, #60]	; (8005b14 <netif_set_link_up+0x4c>)
 8005ad8:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8005adc:	490e      	ldr	r1, [pc, #56]	; (8005b18 <netif_set_link_up+0x50>)
 8005ade:	480f      	ldr	r0, [pc, #60]	; (8005b1c <netif_set_link_up+0x54>)
 8005ae0:	f7fc f9e3 	bl	8001eaa <lwip_win32_platform_diag>
 8005ae4:	e013      	b.n	8005b0e <netif_set_link_up+0x46>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10c      	bne.n	8005b0e <netif_set_link_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005afa:	f043 0304 	orr.w	r3, r3, #4
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

#if LWIP_AUTOIP
    autoip_network_changed_link_up(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005b06:	2103      	movs	r1, #3
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f7ff ffab 	bl	8005a64 <netif_issue_reports>
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	08015e8c 	.word	0x08015e8c
 8005b18:	08016060 	.word	0x08016060
 8005b1c:	08015ec8 	.word	0x08015ec8

08005b20 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d107      	bne.n	8005b3e <netif_set_link_down+0x1e>
 8005b2e:	4b0d      	ldr	r3, [pc, #52]	; (8005b64 <netif_set_link_down+0x44>)
 8005b30:	f240 4223 	movw	r2, #1059	; 0x423
 8005b34:	490c      	ldr	r1, [pc, #48]	; (8005b68 <netif_set_link_down+0x48>)
 8005b36:	480d      	ldr	r0, [pc, #52]	; (8005b6c <netif_set_link_down+0x4c>)
 8005b38:	f7fc f9b7 	bl	8001eaa <lwip_win32_platform_diag>
 8005b3c:	e00f      	b.n	8005b5e <netif_set_link_down+0x3e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d008      	beq.n	8005b5e <netif_set_link_down+0x3e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b52:	f023 0304 	bic.w	r3, r3, #4
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	08015e8c 	.word	0x08015e8c
 8005b68:	08016084 	.word	0x08016084
 8005b6c:	08015ec8 	.word	0x08015ec8

08005b70 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005b7c:	f06f 030b 	mvn.w	r3, #11
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	4603      	mov	r3, r0
 8005b94:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d013      	beq.n	8005bc4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	; (8005bd4 <netif_get_by_index+0x48>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60fb      	str	r3, [r7, #12]
 8005ba2:	e00c      	b.n	8005bbe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005baa:	3301      	adds	r3, #1
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	79fa      	ldrb	r2, [r7, #7]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d101      	bne.n	8005bb8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	e006      	b.n	8005bc6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1ef      	bne.n	8005ba4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20002210 	.word	0x20002210

08005bd8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005bde:	f7fc f99d 	bl	8001f1c <sys_arch_protect>
 8005be2:	6038      	str	r0, [r7, #0]
 8005be4:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <pbuf_free_ooseq+0x44>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	6838      	ldr	r0, [r7, #0]
 8005bec:	f7fc f99e 	bl	8001f2c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005bf0:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <pbuf_free_ooseq+0x48>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	607b      	str	r3, [r7, #4]
 8005bf6:	e00a      	b.n	8005c0e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f002 fded 	bl	80087e0 <tcp_free_ooseq>
      return;
 8005c06:	e005      	b.n	8005c14 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	607b      	str	r3, [r7, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1f1      	bne.n	8005bf8 <pbuf_free_ooseq+0x20>
    }
  }
}
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20002218 	.word	0x20002218
 8005c20:	200022c4 	.word	0x200022c4

08005c24 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8005c2c:	f7ff ffd4 	bl	8005bd8 <pbuf_free_ooseq>
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8005c3e:	f7fc f96d 	bl	8001f1c <sys_arch_protect>
 8005c42:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8005c44:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <pbuf_pool_is_empty+0x4c>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8005c4a:	4b0e      	ldr	r3, [pc, #56]	; (8005c84 <pbuf_pool_is_empty+0x4c>)
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7fc f96b 	bl	8001f2c <sys_arch_unprotect>

  if (!queued) {
 8005c56:	78fb      	ldrb	r3, [r7, #3]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10f      	bne.n	8005c7c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	480a      	ldr	r0, [pc, #40]	; (8005c88 <pbuf_pool_is_empty+0x50>)
 8005c60:	f7fc fb64 	bl	800232c <tcpip_try_callback>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d008      	beq.n	8005c7c <pbuf_pool_is_empty+0x44>
 8005c6a:	f7fc f957 	bl	8001f1c <sys_arch_protect>
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	4b04      	ldr	r3, [pc, #16]	; (8005c84 <pbuf_pool_is_empty+0x4c>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7fc f958 	bl	8001f2c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005c7c:	bf00      	nop
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20002218 	.word	0x20002218
 8005c88:	08005c25 	.word	0x08005c25

08005c8c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	4611      	mov	r1, r2
 8005c98:	461a      	mov	r2, r3
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	80fb      	strh	r3, [r7, #6]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	88fa      	ldrh	r2, [r7, #6]
 8005cb2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	88ba      	ldrh	r2, [r7, #4]
 8005cb8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005cba:	8b3b      	ldrh	r3, [r7, #24]
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	7f3a      	ldrb	r2, [r7, #28]
 8005cc6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	73da      	strb	r2, [r3, #15]

  LWIP_PBUF_CUSTOM_DATA_INIT(p);
}
 8005cd4:	bf00      	nop
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08c      	sub	sp, #48	; 0x30
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	71fb      	strb	r3, [r7, #7]
 8005cea:	460b      	mov	r3, r1
 8005cec:	80bb      	strh	r3, [r7, #4]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005cf6:	887b      	ldrh	r3, [r7, #2]
 8005cf8:	2b41      	cmp	r3, #65	; 0x41
 8005cfa:	d00b      	beq.n	8005d14 <pbuf_alloc+0x34>
 8005cfc:	2b41      	cmp	r3, #65	; 0x41
 8005cfe:	dc02      	bgt.n	8005d06 <pbuf_alloc+0x26>
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d007      	beq.n	8005d14 <pbuf_alloc+0x34>
 8005d04:	e08b      	b.n	8005e1e <pbuf_alloc+0x13e>
 8005d06:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005d0a:	d00b      	beq.n	8005d24 <pbuf_alloc+0x44>
 8005d0c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005d10:	d05b      	beq.n	8005dca <pbuf_alloc+0xea>
 8005d12:	e084      	b.n	8005e1e <pbuf_alloc+0x13e>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005d14:	887a      	ldrh	r2, [r7, #2]
 8005d16:	88bb      	ldrh	r3, [r7, #4]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	f000 f898 	bl	8005e50 <pbuf_alloc_reference>
 8005d20:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005d22:	e088      	b.n	8005e36 <pbuf_alloc+0x156>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005d24:	2300      	movs	r3, #0
 8005d26:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005d2c:	88bb      	ldrh	r3, [r7, #4]
 8005d2e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005d30:	2007      	movs	r0, #7
 8005d32:	f7ff fbf9 	bl	8005528 <memp_malloc>
 8005d36:	6178      	str	r0, [r7, #20]
        if (q == NULL) {
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d109      	bne.n	8005d52 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8005d3e:	f7ff ff7b 	bl	8005c38 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <pbuf_alloc+0x6e>
            pbuf_free(p);
 8005d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d4a:	f000 fa33 	bl	80061b4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	e072      	b.n	8005e38 <pbuf_alloc+0x158>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005d52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d54:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	8b7b      	ldrh	r3, [r7, #26]
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	bf28      	it	cs
 8005d60:	4613      	movcs	r3, r2
 8005d62:	827b      	strh	r3, [r7, #18]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005d64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d66:	3310      	adds	r3, #16
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	18d1      	adds	r1, r2, r3
 8005d6c:	8a78      	ldrh	r0, [r7, #18]
 8005d6e:	8b7a      	ldrh	r2, [r7, #26]
 8005d70:	2300      	movs	r3, #0
 8005d72:	9301      	str	r3, [sp, #4]
 8005d74:	887b      	ldrh	r3, [r7, #2]
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	4603      	mov	r3, r0
 8005d7a:	6978      	ldr	r0, [r7, #20]
 8005d7c:	f7ff ff86 	bl	8005c8c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005d80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d86:	d10b      	bne.n	8005da0 <pbuf_alloc+0xc0>
 8005d88:	4b2d      	ldr	r3, [pc, #180]	; (8005e40 <pbuf_alloc+0x160>)
 8005d8a:	f240 1205 	movw	r2, #261	; 0x105
 8005d8e:	492d      	ldr	r1, [pc, #180]	; (8005e44 <pbuf_alloc+0x164>)
 8005d90:	482d      	ldr	r0, [pc, #180]	; (8005e48 <pbuf_alloc+0x168>)
 8005d92:	f00d ff2d 	bl	8013bf0 <iprintf>
 8005d96:	2000      	movs	r0, #0
 8005d98:	f00e f82c 	bl	8013df4 <fflush>
 8005d9c:	f00d ff71 	bl	8013c82 <abort>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d102      	bne.n	8005dac <pbuf_alloc+0xcc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
 8005daa:	e002      	b.n	8005db2 <pbuf_alloc+0xd2>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005db6:	8b7a      	ldrh	r2, [r7, #26]
 8005db8:	8a7b      	ldrh	r3, [r7, #18]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005dc2:	8b7b      	ldrh	r3, [r7, #26]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1b3      	bne.n	8005d30 <pbuf_alloc+0x50>
      break;
 8005dc8:	e035      	b.n	8005e36 <pbuf_alloc+0x156>
    }
    case PBUF_RAM: {
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005dca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005dcc:	88bb      	ldrh	r3, [r7, #4]
 8005dce:	4413      	add	r3, r2
 8005dd0:	823b      	strh	r3, [r7, #16]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005dd2:	8a3b      	ldrh	r3, [r7, #16]
 8005dd4:	3310      	adds	r3, #16
 8005dd6:	81fb      	strh	r3, [r7, #14]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005dd8:	8a3a      	ldrh	r2, [r7, #16]
 8005dda:	88bb      	ldrh	r3, [r7, #4]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d303      	bcc.n	8005de8 <pbuf_alloc+0x108>
 8005de0:	89fa      	ldrh	r2, [r7, #14]
 8005de2:	88bb      	ldrh	r3, [r7, #4]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d201      	bcs.n	8005dec <pbuf_alloc+0x10c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
        return NULL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	e025      	b.n	8005e38 <pbuf_alloc+0x158>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005dec:	89fb      	ldrh	r3, [r7, #14]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7ff f982 	bl	80050f8 <mem_malloc>
 8005df4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <pbuf_alloc+0x120>
        return NULL;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e01b      	b.n	8005e38 <pbuf_alloc+0x158>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005e00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e02:	3310      	adds	r3, #16
 8005e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e06:	18d1      	adds	r1, r2, r3
 8005e08:	88b8      	ldrh	r0, [r7, #4]
 8005e0a:	88ba      	ldrh	r2, [r7, #4]
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	9301      	str	r3, [sp, #4]
 8005e10:	887b      	ldrh	r3, [r7, #2]
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	4603      	mov	r3, r0
 8005e16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e18:	f7ff ff38 	bl	8005c8c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005e1c:	e00b      	b.n	8005e36 <pbuf_alloc+0x156>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005e1e:	4b08      	ldr	r3, [pc, #32]	; (8005e40 <pbuf_alloc+0x160>)
 8005e20:	f240 1229 	movw	r2, #297	; 0x129
 8005e24:	4909      	ldr	r1, [pc, #36]	; (8005e4c <pbuf_alloc+0x16c>)
 8005e26:	4808      	ldr	r0, [pc, #32]	; (8005e48 <pbuf_alloc+0x168>)
 8005e28:	f00d fee2 	bl	8013bf0 <iprintf>
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	f00d ffe1 	bl	8013df4 <fflush>
 8005e32:	f00d ff26 	bl	8013c82 <abort>
      return NULL;
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3728      	adds	r7, #40	; 0x28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	080160a8 	.word	0x080160a8
 8005e44:	080160c8 	.word	0x080160c8
 8005e48:	080160fc 	.word	0x080160fc
 8005e4c:	08016124 	.word	0x08016124

08005e50 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af02      	add	r7, sp, #8
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	807b      	strh	r3, [r7, #2]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005e60:	883b      	ldrh	r3, [r7, #0]
 8005e62:	2b41      	cmp	r3, #65	; 0x41
 8005e64:	d00e      	beq.n	8005e84 <pbuf_alloc_reference+0x34>
 8005e66:	883b      	ldrh	r3, [r7, #0]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d00b      	beq.n	8005e84 <pbuf_alloc_reference+0x34>
 8005e6c:	4b12      	ldr	r3, [pc, #72]	; (8005eb8 <pbuf_alloc_reference+0x68>)
 8005e6e:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8005e72:	4912      	ldr	r1, [pc, #72]	; (8005ebc <pbuf_alloc_reference+0x6c>)
 8005e74:	4812      	ldr	r0, [pc, #72]	; (8005ec0 <pbuf_alloc_reference+0x70>)
 8005e76:	f00d febb 	bl	8013bf0 <iprintf>
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	f00d ffba 	bl	8013df4 <fflush>
 8005e80:	f00d feff 	bl	8013c82 <abort>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005e84:	2006      	movs	r0, #6
 8005e86:	f7ff fb4f 	bl	8005528 <memp_malloc>
 8005e8a:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <pbuf_alloc_reference+0x46>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e00b      	b.n	8005eae <pbuf_alloc_reference+0x5e>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005e96:	8879      	ldrh	r1, [r7, #2]
 8005e98:	887a      	ldrh	r2, [r7, #2]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	883b      	ldrh	r3, [r7, #0]
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f7ff fef0 	bl	8005c8c <pbuf_init_alloced_pbuf>
  return p;
 8005eac:	68fb      	ldr	r3, [r7, #12]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	080160a8 	.word	0x080160a8
 8005ebc:	08016140 	.word	0x08016140
 8005ec0:	080160fc 	.word	0x080160fc

08005ec4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10b      	bne.n	8005eee <pbuf_realloc+0x2a>
 8005ed6:	4b47      	ldr	r3, [pc, #284]	; (8005ff4 <pbuf_realloc+0x130>)
 8005ed8:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8005edc:	4946      	ldr	r1, [pc, #280]	; (8005ff8 <pbuf_realloc+0x134>)
 8005ede:	4847      	ldr	r0, [pc, #284]	; (8005ffc <pbuf_realloc+0x138>)
 8005ee0:	f00d fe86 	bl	8013bf0 <iprintf>
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	f00d ff85 	bl	8013df4 <fflush>
 8005eea:	f00d feca 	bl	8013c82 <abort>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	891b      	ldrh	r3, [r3, #8]
 8005ef2:	887a      	ldrh	r2, [r7, #2]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d278      	bcs.n	8005fea <pbuf_realloc+0x126>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	891a      	ldrh	r2, [r3, #8]
 8005efc:	887b      	ldrh	r3, [r7, #2]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	823b      	strh	r3, [r7, #16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005f02:	887b      	ldrh	r3, [r7, #2]
 8005f04:	827b      	strh	r3, [r7, #18]
  q = p;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005f0a:	e01d      	b.n	8005f48 <pbuf_realloc+0x84>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	895b      	ldrh	r3, [r3, #10]
 8005f10:	8a7a      	ldrh	r2, [r7, #18]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	891a      	ldrh	r2, [r3, #8]
 8005f1a:	8a3b      	ldrh	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10b      	bne.n	8005f48 <pbuf_realloc+0x84>
 8005f30:	4b30      	ldr	r3, [pc, #192]	; (8005ff4 <pbuf_realloc+0x130>)
 8005f32:	f240 12b1 	movw	r2, #433	; 0x1b1
 8005f36:	4932      	ldr	r1, [pc, #200]	; (8006000 <pbuf_realloc+0x13c>)
 8005f38:	4830      	ldr	r0, [pc, #192]	; (8005ffc <pbuf_realloc+0x138>)
 8005f3a:	f00d fe59 	bl	8013bf0 <iprintf>
 8005f3e:	2000      	movs	r0, #0
 8005f40:	f00d ff58 	bl	8013df4 <fflush>
 8005f44:	f00d fe9d 	bl	8013c82 <abort>
  while (rem_len > q->len) {
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	895b      	ldrh	r3, [r3, #10]
 8005f4c:	8a7a      	ldrh	r2, [r7, #18]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d8dc      	bhi.n	8005f0c <pbuf_realloc+0x48>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	7b1b      	ldrb	r3, [r3, #12]
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d131      	bne.n	8005fc2 <pbuf_realloc+0xfe>
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	895b      	ldrh	r3, [r3, #10]
 8005f62:	8a7a      	ldrh	r2, [r7, #18]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d02c      	beq.n	8005fc2 <pbuf_realloc+0xfe>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    struct pbuf *r = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	8a7b      	ldrh	r3, [r7, #18]
 8005f76:	4413      	add	r3, r2
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6978      	ldr	r0, [r7, #20]
 8005f7e:	f7fe ff7f 	bl	8004e80 <mem_trim>
 8005f82:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned r == NULL", r != NULL);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10b      	bne.n	8005fa2 <pbuf_realloc+0xde>
 8005f8a:	4b1a      	ldr	r3, [pc, #104]	; (8005ff4 <pbuf_realloc+0x130>)
 8005f8c:	f240 12bf 	movw	r2, #447	; 0x1bf
 8005f90:	491c      	ldr	r1, [pc, #112]	; (8006004 <pbuf_realloc+0x140>)
 8005f92:	481a      	ldr	r0, [pc, #104]	; (8005ffc <pbuf_realloc+0x138>)
 8005f94:	f00d fe2c 	bl	8013bf0 <iprintf>
 8005f98:	2000      	movs	r0, #0
 8005f9a:	f00d ff2b 	bl	8013df4 <fflush>
 8005f9e:	f00d fe70 	bl	8013c82 <abort>
    /* help to detect faulty overridden implementation of mem_trim */
    LWIP_ASSERT("mem_trim returned r != q", r == q);
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d00b      	beq.n	8005fc2 <pbuf_realloc+0xfe>
 8005faa:	4b12      	ldr	r3, [pc, #72]	; (8005ff4 <pbuf_realloc+0x130>)
 8005fac:	f240 12c1 	movw	r2, #449	; 0x1c1
 8005fb0:	4915      	ldr	r1, [pc, #84]	; (8006008 <pbuf_realloc+0x144>)
 8005fb2:	4812      	ldr	r0, [pc, #72]	; (8005ffc <pbuf_realloc+0x138>)
 8005fb4:	f00d fe1c 	bl	8013bf0 <iprintf>
 8005fb8:	2000      	movs	r0, #0
 8005fba:	f00d ff1b 	bl	8013df4 <fflush>
 8005fbe:	f00d fe60 	bl	8013c82 <abort>
    LWIP_UNUSED_ARG(r);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	8a7a      	ldrh	r2, [r7, #18]
 8005fc6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	895a      	ldrh	r2, [r3, #10]
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d004      	beq.n	8005fe2 <pbuf_realloc+0x11e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 f8e9 	bl	80061b4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	e000      	b.n	8005fec <pbuf_realloc+0x128>
    return;
 8005fea:	bf00      	nop

}
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	080160a8 	.word	0x080160a8
 8005ff8:	08016154 	.word	0x08016154
 8005ffc:	080160fc 	.word	0x080160fc
 8006000:	0801616c 	.word	0x0801616c
 8006004:	08016184 	.word	0x08016184
 8006008:	080161a0 	.word	0x080161a0

0800600c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	4613      	mov	r3, r2
 8006018:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10b      	bne.n	8006038 <pbuf_add_header_impl+0x2c>
 8006020:	4b2e      	ldr	r3, [pc, #184]	; (80060dc <pbuf_add_header_impl+0xd0>)
 8006022:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8006026:	492e      	ldr	r1, [pc, #184]	; (80060e0 <pbuf_add_header_impl+0xd4>)
 8006028:	482e      	ldr	r0, [pc, #184]	; (80060e4 <pbuf_add_header_impl+0xd8>)
 800602a:	f00d fde1 	bl	8013bf0 <iprintf>
 800602e:	2000      	movs	r0, #0
 8006030:	f00d fee0 	bl	8013df4 <fflush>
 8006034:	f00d fe25 	bl	8013c82 <abort>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <pbuf_add_header_impl+0x3a>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006044:	d301      	bcc.n	800604a <pbuf_add_header_impl+0x3e>
    return 1;
 8006046:	2301      	movs	r3, #1
 8006048:	e044      	b.n	80060d4 <pbuf_add_header_impl+0xc8>
  }
  if (header_size_increment == 0) {
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <pbuf_add_header_impl+0x48>
    return 0;
 8006050:	2300      	movs	r3, #0
 8006052:	e03f      	b.n	80060d4 <pbuf_add_header_impl+0xc8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	891a      	ldrh	r2, [r3, #8]
 800605c:	8a7b      	ldrh	r3, [r7, #18]
 800605e:	4413      	add	r3, r2
 8006060:	b29b      	uxth	r3, r3
 8006062:	8a7a      	ldrh	r2, [r7, #18]
 8006064:	429a      	cmp	r2, r3
 8006066:	d901      	bls.n	800606c <pbuf_add_header_impl+0x60>
    return 1;
 8006068:	2301      	movs	r3, #1
 800606a:	e033      	b.n	80060d4 <pbuf_add_header_impl+0xc8>
  }

  type_internal = p->type_internal;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	7b1b      	ldrb	r3, [r3, #12]
 8006070:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006072:	8a3b      	ldrh	r3, [r7, #16]
 8006074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00d      	beq.n	8006098 <pbuf_add_header_impl+0x8c>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	425b      	negs	r3, r3
 8006084:	4413      	add	r3, r2
 8006086:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f103 0210 	add.w	r2, r3, #16
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	429a      	cmp	r2, r3
 8006092:	d90d      	bls.n	80060b0 <pbuf_add_header_impl+0xa4>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006094:	2301      	movs	r3, #1
 8006096:	e01d      	b.n	80060d4 <pbuf_add_header_impl+0xc8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006098:	79fb      	ldrb	r3, [r7, #7]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d006      	beq.n	80060ac <pbuf_add_header_impl+0xa0>
      payload = (u8_t *)p->payload - header_size_increment;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	425b      	negs	r3, r3
 80060a6:	4413      	add	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]
 80060aa:	e001      	b.n	80060b0 <pbuf_add_header_impl+0xa4>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e011      	b.n	80060d4 <pbuf_add_header_impl+0xc8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	895a      	ldrh	r2, [r3, #10]
 80060ba:	8a7b      	ldrh	r3, [r7, #18]
 80060bc:	4413      	add	r3, r2
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	891a      	ldrh	r2, [r3, #8]
 80060c8:	8a7b      	ldrh	r3, [r7, #18]
 80060ca:	4413      	add	r3, r2
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	811a      	strh	r2, [r3, #8]


  return 0;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	080160a8 	.word	0x080160a8
 80060e0:	080161bc 	.word	0x080161bc
 80060e4:	080160fc 	.word	0x080160fc

080060e8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80060f2:	2200      	movs	r2, #0
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff ff88 	bl	800600c <pbuf_add_header_impl>
 80060fc:	4603      	mov	r3, r0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10b      	bne.n	8006130 <pbuf_remove_header+0x28>
 8006118:	4b22      	ldr	r3, [pc, #136]	; (80061a4 <pbuf_remove_header+0x9c>)
 800611a:	f44f 7214 	mov.w	r2, #592	; 0x250
 800611e:	4922      	ldr	r1, [pc, #136]	; (80061a8 <pbuf_remove_header+0xa0>)
 8006120:	4822      	ldr	r0, [pc, #136]	; (80061ac <pbuf_remove_header+0xa4>)
 8006122:	f00d fd65 	bl	8013bf0 <iprintf>
 8006126:	2000      	movs	r0, #0
 8006128:	f00d fe64 	bl	8013df4 <fflush>
 800612c:	f00d fda9 	bl	8013c82 <abort>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <pbuf_remove_header+0x36>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800613c:	d301      	bcc.n	8006142 <pbuf_remove_header+0x3a>
    return 1;
 800613e:	2301      	movs	r3, #1
 8006140:	e02c      	b.n	800619c <pbuf_remove_header+0x94>
  }
  if (header_size_decrement == 0) {
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <pbuf_remove_header+0x44>
    return 0;
 8006148:	2300      	movs	r3, #0
 800614a:	e027      	b.n	800619c <pbuf_remove_header+0x94>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	895b      	ldrh	r3, [r3, #10]
 8006154:	89fa      	ldrh	r2, [r7, #14]
 8006156:	429a      	cmp	r2, r3
 8006158:	d908      	bls.n	800616c <pbuf_remove_header+0x64>
 800615a:	4b12      	ldr	r3, [pc, #72]	; (80061a4 <pbuf_remove_header+0x9c>)
 800615c:	f240 225a 	movw	r2, #602	; 0x25a
 8006160:	4913      	ldr	r1, [pc, #76]	; (80061b0 <pbuf_remove_header+0xa8>)
 8006162:	4812      	ldr	r0, [pc, #72]	; (80061ac <pbuf_remove_header+0xa4>)
 8006164:	f7fb fea1 	bl	8001eaa <lwip_win32_platform_diag>
 8006168:	2301      	movs	r3, #1
 800616a:	e017      	b.n	800619c <pbuf_remove_header+0x94>

  /* remember current payload pointer */
  payload = p->payload;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	441a      	add	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	895a      	ldrh	r2, [r3, #10]
 8006182:	89fb      	ldrh	r3, [r7, #14]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	b29a      	uxth	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	891a      	ldrh	r2, [r3, #8]
 8006190:	89fb      	ldrh	r3, [r7, #14]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	b29a      	uxth	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	080160a8 	.word	0x080160a8
 80061a8:	080161bc 	.word	0x080161bc
 80061ac:	080160fc 	.word	0x080160fc
 80061b0:	080161c8 	.word	0x080161c8

080061b4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d110      	bne.n	80061e4 <pbuf_free+0x30>
    LWIP_ASSERT("p != NULL", p != NULL);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10b      	bne.n	80061e0 <pbuf_free+0x2c>
 80061c8:	4b36      	ldr	r3, [pc, #216]	; (80062a4 <pbuf_free+0xf0>)
 80061ca:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80061ce:	4936      	ldr	r1, [pc, #216]	; (80062a8 <pbuf_free+0xf4>)
 80061d0:	4836      	ldr	r0, [pc, #216]	; (80062ac <pbuf_free+0xf8>)
 80061d2:	f00d fd0d 	bl	8013bf0 <iprintf>
 80061d6:	2000      	movs	r0, #0
 80061d8:	f00d fe0c 	bl	8013df4 <fflush>
 80061dc:	f00d fd51 	bl	8013c82 <abort>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	e05b      	b.n	800629c <pbuf_free+0xe8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80061e8:	e054      	b.n	8006294 <pbuf_free+0xe0>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80061ea:	f7fb fe97 	bl	8001f1c <sys_arch_protect>
 80061ee:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	7b9b      	ldrb	r3, [r3, #14]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10b      	bne.n	8006210 <pbuf_free+0x5c>
 80061f8:	4b2a      	ldr	r3, [pc, #168]	; (80062a4 <pbuf_free+0xf0>)
 80061fa:	f240 22f5 	movw	r2, #757	; 0x2f5
 80061fe:	492c      	ldr	r1, [pc, #176]	; (80062b0 <pbuf_free+0xfc>)
 8006200:	482a      	ldr	r0, [pc, #168]	; (80062ac <pbuf_free+0xf8>)
 8006202:	f00d fcf5 	bl	8013bf0 <iprintf>
 8006206:	2000      	movs	r0, #0
 8006208:	f00d fdf4 	bl	8013df4 <fflush>
 800620c:	f00d fd39 	bl	8013c82 <abort>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	7b9b      	ldrb	r3, [r3, #14]
 8006214:	3b01      	subs	r3, #1
 8006216:	b2da      	uxtb	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	739a      	strb	r2, [r3, #14]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	7b9b      	ldrb	r3, [r3, #14]
 8006220:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8006222:	69b8      	ldr	r0, [r7, #24]
 8006224:	f7fb fe82 	bl	8001f2c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006228:	7dfb      	ldrb	r3, [r7, #23]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d130      	bne.n	8006290 <pbuf_free+0xdc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	7b1b      	ldrb	r3, [r3, #12]
 8006238:	f003 030f 	and.w	r3, r3, #15
 800623c:	73fb      	strb	r3, [r7, #15]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800623e:	7bfb      	ldrb	r3, [r7, #15]
 8006240:	2b02      	cmp	r3, #2
 8006242:	d104      	bne.n	800624e <pbuf_free+0x9a>
          memp_free(MEMP_PBUF_POOL, p);
 8006244:	6879      	ldr	r1, [r7, #4]
 8006246:	2007      	movs	r0, #7
 8006248:	f7ff f9de 	bl	8005608 <memp_free>
 800624c:	e01a      	b.n	8006284 <pbuf_free+0xd0>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800624e:	7bfb      	ldrb	r3, [r7, #15]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d104      	bne.n	800625e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF, p);
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	2006      	movs	r0, #6
 8006258:	f7ff f9d6 	bl	8005608 <memp_free>
 800625c:	e012      	b.n	8006284 <pbuf_free+0xd0>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800625e:	7bfb      	ldrb	r3, [r7, #15]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d103      	bne.n	800626c <pbuf_free+0xb8>
          mem_free(p);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7fe fd89 	bl	8004d7c <mem_free>
 800626a:	e00b      	b.n	8006284 <pbuf_free+0xd0>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800626c:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <pbuf_free+0xf0>)
 800626e:	f240 3213 	movw	r2, #787	; 0x313
 8006272:	4910      	ldr	r1, [pc, #64]	; (80062b4 <pbuf_free+0x100>)
 8006274:	480d      	ldr	r0, [pc, #52]	; (80062ac <pbuf_free+0xf8>)
 8006276:	f00d fcbb 	bl	8013bf0 <iprintf>
 800627a:	2000      	movs	r0, #0
 800627c:	f00d fdba 	bl	8013df4 <fflush>
 8006280:	f00d fcff 	bl	8013c82 <abort>
        }
      }
      count++;
 8006284:	7ffb      	ldrb	r3, [r7, #31]
 8006286:	3301      	adds	r3, #1
 8006288:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	607b      	str	r3, [r7, #4]
 800628e:	e001      	b.n	8006294 <pbuf_free+0xe0>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006290:	2300      	movs	r3, #0
 8006292:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1a7      	bne.n	80061ea <pbuf_free+0x36>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800629a:	7ffb      	ldrb	r3, [r7, #31]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3720      	adds	r7, #32
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	080160a8 	.word	0x080160a8
 80062a8:	080161bc 	.word	0x080161bc
 80062ac:	080160fc 	.word	0x080160fc
 80062b0:	080161e8 	.word	0x080161e8
 80062b4:	08016200 	.word	0x08016200

080062b8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80062c0:	2300      	movs	r3, #0
 80062c2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80062c4:	e005      	b.n	80062d2 <pbuf_clen+0x1a>
    ++len;
 80062c6:	89fb      	ldrh	r3, [r7, #14]
 80062c8:	3301      	adds	r3, #1
 80062ca:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1f6      	bne.n	80062c6 <pbuf_clen+0xe>
  }
  return len;
 80062d8:	89fb      	ldrh	r3, [r7, #14]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
	...

080062e8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d01b      	beq.n	800632e <pbuf_ref+0x46>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80062f6:	f7fb fe11 	bl	8001f1c <sys_arch_protect>
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	7b9b      	ldrb	r3, [r3, #14]
 8006300:	3301      	adds	r3, #1
 8006302:	b2da      	uxtb	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	739a      	strb	r2, [r3, #14]
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7fb fe0f 	bl	8001f2c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	7b9b      	ldrb	r3, [r3, #14]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10b      	bne.n	800632e <pbuf_ref+0x46>
 8006316:	4b08      	ldr	r3, [pc, #32]	; (8006338 <pbuf_ref+0x50>)
 8006318:	f240 3246 	movw	r2, #838	; 0x346
 800631c:	4907      	ldr	r1, [pc, #28]	; (800633c <pbuf_ref+0x54>)
 800631e:	4808      	ldr	r0, [pc, #32]	; (8006340 <pbuf_ref+0x58>)
 8006320:	f00d fc66 	bl	8013bf0 <iprintf>
 8006324:	2000      	movs	r0, #0
 8006326:	f00d fd65 	bl	8013df4 <fflush>
 800632a:	f00d fcaa 	bl	8013c82 <abort>
  }
}
 800632e:	bf00      	nop
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	080160a8 	.word	0x080160a8
 800633c:	08016214 	.word	0x08016214
 8006340:	080160fc 	.word	0x080160fc

08006344 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <pbuf_cat+0x16>
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d107      	bne.n	800636a <pbuf_cat+0x26>
 800635a:	4b2d      	ldr	r3, [pc, #180]	; (8006410 <pbuf_cat+0xcc>)
 800635c:	f240 325e 	movw	r2, #862	; 0x35e
 8006360:	492c      	ldr	r1, [pc, #176]	; (8006414 <pbuf_cat+0xd0>)
 8006362:	482d      	ldr	r0, [pc, #180]	; (8006418 <pbuf_cat+0xd4>)
 8006364:	f7fb fda1 	bl	8001eaa <lwip_win32_platform_diag>
 8006368:	e04e      	b.n	8006408 <pbuf_cat+0xc4>
             ((h != NULL) && (t != NULL)), return;);
  LWIP_ASSERT("Creating an infinite loop", h != t);
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	429a      	cmp	r2, r3
 8006370:	d10b      	bne.n	800638a <pbuf_cat+0x46>
 8006372:	4b27      	ldr	r3, [pc, #156]	; (8006410 <pbuf_cat+0xcc>)
 8006374:	f240 325f 	movw	r2, #863	; 0x35f
 8006378:	4928      	ldr	r1, [pc, #160]	; (800641c <pbuf_cat+0xd8>)
 800637a:	4827      	ldr	r0, [pc, #156]	; (8006418 <pbuf_cat+0xd4>)
 800637c:	f00d fc38 	bl	8013bf0 <iprintf>
 8006380:	2000      	movs	r0, #0
 8006382:	f00d fd37 	bl	8013df4 <fflush>
 8006386:	f00d fc7c 	bl	8013c82 <abort>

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	e00a      	b.n	80063a6 <pbuf_cat+0x62>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	891a      	ldrh	r2, [r3, #8]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	891b      	ldrh	r3, [r3, #8]
 8006398:	4413      	add	r3, r2
 800639a:	b29a      	uxth	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1f0      	bne.n	8006390 <pbuf_cat+0x4c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	891a      	ldrh	r2, [r3, #8]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	895b      	ldrh	r3, [r3, #10]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d00b      	beq.n	80063d2 <pbuf_cat+0x8e>
 80063ba:	4b15      	ldr	r3, [pc, #84]	; (8006410 <pbuf_cat+0xcc>)
 80063bc:	f240 3267 	movw	r2, #871	; 0x367
 80063c0:	4917      	ldr	r1, [pc, #92]	; (8006420 <pbuf_cat+0xdc>)
 80063c2:	4815      	ldr	r0, [pc, #84]	; (8006418 <pbuf_cat+0xd4>)
 80063c4:	f00d fc14 	bl	8013bf0 <iprintf>
 80063c8:	2000      	movs	r0, #0
 80063ca:	f00d fd13 	bl	8013df4 <fflush>
 80063ce:	f00d fc58 	bl	8013c82 <abort>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00b      	beq.n	80063f2 <pbuf_cat+0xae>
 80063da:	4b0d      	ldr	r3, [pc, #52]	; (8006410 <pbuf_cat+0xcc>)
 80063dc:	f44f 725a 	mov.w	r2, #872	; 0x368
 80063e0:	4910      	ldr	r1, [pc, #64]	; (8006424 <pbuf_cat+0xe0>)
 80063e2:	480d      	ldr	r0, [pc, #52]	; (8006418 <pbuf_cat+0xd4>)
 80063e4:	f00d fc04 	bl	8013bf0 <iprintf>
 80063e8:	2000      	movs	r0, #0
 80063ea:	f00d fd03 	bl	8013df4 <fflush>
 80063ee:	f00d fc48 	bl	8013c82 <abort>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	891a      	ldrh	r2, [r3, #8]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	891b      	ldrh	r3, [r3, #8]
 80063fa:	4413      	add	r3, r2
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	080160a8 	.word	0x080160a8
 8006414:	08016228 	.word	0x08016228
 8006418:	080160fc 	.word	0x080160fc
 800641c:	08016260 	.word	0x08016260
 8006420:	0801627c 	.word	0x0801627c
 8006424:	080162ac 	.word	0x080162ac

08006428 <pbuf_copy>:
 *                 enough to hold p_from
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d109      	bne.n	800644c <pbuf_copy+0x24>
 8006438:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <pbuf_copy+0x3c>)
 800643a:	f240 32c7 	movw	r2, #967	; 0x3c7
 800643e:	490a      	ldr	r1, [pc, #40]	; (8006468 <pbuf_copy+0x40>)
 8006440:	480a      	ldr	r0, [pc, #40]	; (800646c <pbuf_copy+0x44>)
 8006442:	f7fb fd32 	bl	8001eaa <lwip_win32_platform_diag>
 8006446:	f06f 030f 	mvn.w	r3, #15
 800644a:	e007      	b.n	800645c <pbuf_copy+0x34>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	891a      	ldrh	r2, [r3, #8]
 8006450:	2300      	movs	r3, #0
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f80b 	bl	8006470 <pbuf_copy_partial_pbuf>
 800645a:	4603      	mov	r3, r0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	080160a8 	.word	0x080160a8
 8006468:	080162f8 	.word	0x080162f8
 800646c:	080160fc 	.word	0x080160fc

08006470 <pbuf_copy_partial_pbuf>:
 *                 or p_to is not big enough to hold copy_len at offset
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy_partial_pbuf(struct pbuf *p_to, const struct pbuf *p_from, u16_t copy_len, u16_t offset)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	4611      	mov	r1, r2
 800647c:	461a      	mov	r2, r3
 800647e:	460b      	mov	r3, r1
 8006480:	80fb      	strh	r3, [r7, #6]
 8006482:	4613      	mov	r3, r2
 8006484:	80bb      	strh	r3, [r7, #4]
  size_t offset_to = offset, offset_from = 0, len;
 8006486:	88bb      	ldrh	r3, [r7, #4]
 8006488:	61fb      	str	r3, [r7, #28]
 800648a:	2300      	movs	r3, #0
 800648c:	61bb      	str	r3, [r7, #24]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf(%p, %p, %"U16_F", %"U16_F")\n",
              (const void *)p_to, (const void *)p_from, copy_len, offset));

  /* is the copy_len in range? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d004      	beq.n	800649e <pbuf_copy_partial_pbuf+0x2e>
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	891b      	ldrh	r3, [r3, #8]
 8006498:	88fa      	ldrh	r2, [r7, #6]
 800649a:	429a      	cmp	r2, r3
 800649c:	d909      	bls.n	80064b2 <pbuf_copy_partial_pbuf+0x42>
 800649e:	4b74      	ldr	r3, [pc, #464]	; (8006670 <pbuf_copy_partial_pbuf+0x200>)
 80064a0:	f240 32e6 	movw	r2, #998	; 0x3e6
 80064a4:	4973      	ldr	r1, [pc, #460]	; (8006674 <pbuf_copy_partial_pbuf+0x204>)
 80064a6:	4874      	ldr	r0, [pc, #464]	; (8006678 <pbuf_copy_partial_pbuf+0x208>)
 80064a8:	f7fb fcff 	bl	8001eaa <lwip_win32_platform_diag>
 80064ac:	f06f 030f 	mvn.w	r3, #15
 80064b0:	e0d9      	b.n	8006666 <pbuf_copy_partial_pbuf+0x1f6>
             (p_from->tot_len >= copy_len)), return ERR_ARG;);
  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d007      	beq.n	80064c8 <pbuf_copy_partial_pbuf+0x58>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	891b      	ldrh	r3, [r3, #8]
 80064bc:	4619      	mov	r1, r3
 80064be:	88ba      	ldrh	r2, [r7, #4]
 80064c0:	88fb      	ldrh	r3, [r7, #6]
 80064c2:	4413      	add	r3, r2
 80064c4:	4299      	cmp	r1, r3
 80064c6:	da09      	bge.n	80064dc <pbuf_copy_partial_pbuf+0x6c>
 80064c8:	4b69      	ldr	r3, [pc, #420]	; (8006670 <pbuf_copy_partial_pbuf+0x200>)
 80064ca:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80064ce:	496b      	ldr	r1, [pc, #428]	; (800667c <pbuf_copy_partial_pbuf+0x20c>)
 80064d0:	4869      	ldr	r0, [pc, #420]	; (8006678 <pbuf_copy_partial_pbuf+0x208>)
 80064d2:	f7fb fcea 	bl	8001eaa <lwip_win32_platform_diag>
 80064d6:	f06f 030f 	mvn.w	r3, #15
 80064da:	e0c4      	b.n	8006666 <pbuf_copy_partial_pbuf+0x1f6>
             (p_to->tot_len >= (offset + copy_len))), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	895b      	ldrh	r3, [r3, #10]
 80064e0:	461a      	mov	r2, r3
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	1ad2      	subs	r2, r2, r3
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	895b      	ldrh	r3, [r3, #10]
 80064ea:	4619      	mov	r1, r3
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	1acb      	subs	r3, r1, r3
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d306      	bcc.n	8006502 <pbuf_copy_partial_pbuf+0x92>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	895b      	ldrh	r3, [r3, #10]
 80064f8:	461a      	mov	r2, r3
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	e005      	b.n	800650e <pbuf_copy_partial_pbuf+0x9e>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	895b      	ldrh	r3, [r3, #10]
 8006506:	461a      	mov	r2, r3
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	617b      	str	r3, [r7, #20]
    }
    len = LWIP_MIN(copy_len, len);
 800650e:	88fb      	ldrh	r3, [r7, #6]
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	4293      	cmp	r3, r2
 8006514:	bf28      	it	cs
 8006516:	4613      	movcs	r3, r2
 8006518:	617b      	str	r3, [r7, #20]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	18d0      	adds	r0, r2, r3
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	4413      	add	r3, r2
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4619      	mov	r1, r3
 800652e:	f00d fd61 	bl	8013ff4 <memcpy>
    offset_to += len;
 8006532:	69fa      	ldr	r2, [r7, #28]
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	4413      	add	r3, r2
 8006538:	61fb      	str	r3, [r7, #28]
    offset_from += len;
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	4413      	add	r3, r2
 8006540:	61bb      	str	r3, [r7, #24]
    copy_len = (u16_t)(copy_len - len);
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	b29b      	uxth	r3, r3
 8006546:	88fa      	ldrh	r2, [r7, #6]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	80fb      	strh	r3, [r7, #6]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	895b      	ldrh	r3, [r3, #10]
 8006550:	461a      	mov	r2, r3
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	429a      	cmp	r2, r3
 8006556:	d20b      	bcs.n	8006570 <pbuf_copy_partial_pbuf+0x100>
 8006558:	4b45      	ldr	r3, [pc, #276]	; (8006670 <pbuf_copy_partial_pbuf+0x200>)
 800655a:	f240 32fa 	movw	r2, #1018	; 0x3fa
 800655e:	4948      	ldr	r1, [pc, #288]	; (8006680 <pbuf_copy_partial_pbuf+0x210>)
 8006560:	4845      	ldr	r0, [pc, #276]	; (8006678 <pbuf_copy_partial_pbuf+0x208>)
 8006562:	f00d fb45 	bl	8013bf0 <iprintf>
 8006566:	2000      	movs	r0, #0
 8006568:	f00d fc44 	bl	8013df4 <fflush>
 800656c:	f00d fb89 	bl	8013c82 <abort>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	895b      	ldrh	r3, [r3, #10]
 8006574:	461a      	mov	r2, r3
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	429a      	cmp	r2, r3
 800657a:	d20b      	bcs.n	8006594 <pbuf_copy_partial_pbuf+0x124>
 800657c:	4b3c      	ldr	r3, [pc, #240]	; (8006670 <pbuf_copy_partial_pbuf+0x200>)
 800657e:	f240 32fb 	movw	r2, #1019	; 0x3fb
 8006582:	4940      	ldr	r1, [pc, #256]	; (8006684 <pbuf_copy_partial_pbuf+0x214>)
 8006584:	483c      	ldr	r0, [pc, #240]	; (8006678 <pbuf_copy_partial_pbuf+0x208>)
 8006586:	f00d fb33 	bl	8013bf0 <iprintf>
 800658a:	2000      	movs	r0, #0
 800658c:	f00d fc32 	bl	8013df4 <fflush>
 8006590:	f00d fb77 	bl	8013c82 <abort>
    if (offset_from >= p_from->len) {
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	895b      	ldrh	r3, [r3, #10]
 8006598:	461a      	mov	r2, r3
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	429a      	cmp	r2, r3
 800659e:	d814      	bhi.n	80065ca <pbuf_copy_partial_pbuf+0x15a>
      /* on to next p_from (if any) */
      offset_from = 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	61bb      	str	r3, [r7, #24]
      p_from = p_from->next;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	60bb      	str	r3, [r7, #8]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10c      	bne.n	80065ca <pbuf_copy_partial_pbuf+0x15a>
 80065b0:	88fb      	ldrh	r3, [r7, #6]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d009      	beq.n	80065ca <pbuf_copy_partial_pbuf+0x15a>
 80065b6:	4b2e      	ldr	r3, [pc, #184]	; (8006670 <pbuf_copy_partial_pbuf+0x200>)
 80065b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065bc:	4932      	ldr	r1, [pc, #200]	; (8006688 <pbuf_copy_partial_pbuf+0x218>)
 80065be:	482e      	ldr	r0, [pc, #184]	; (8006678 <pbuf_copy_partial_pbuf+0x208>)
 80065c0:	f7fb fc73 	bl	8001eaa <lwip_win32_platform_diag>
 80065c4:	f06f 030f 	mvn.w	r3, #15
 80065c8:	e04d      	b.n	8006666 <pbuf_copy_partial_pbuf+0x1f6>
    }
    if (offset_to == p_to->len) {
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	895b      	ldrh	r3, [r3, #10]
 80065ce:	461a      	mov	r2, r3
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d114      	bne.n	8006600 <pbuf_copy_partial_pbuf+0x190>
      /* on to next p_to (if any) */
      offset_to = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	61fb      	str	r3, [r7, #28]
      p_to = p_to->next;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60fb      	str	r3, [r7, #12]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10c      	bne.n	8006600 <pbuf_copy_partial_pbuf+0x190>
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d009      	beq.n	8006600 <pbuf_copy_partial_pbuf+0x190>
 80065ec:	4b20      	ldr	r3, [pc, #128]	; (8006670 <pbuf_copy_partial_pbuf+0x200>)
 80065ee:	f240 4206 	movw	r2, #1030	; 0x406
 80065f2:	4926      	ldr	r1, [pc, #152]	; (800668c <pbuf_copy_partial_pbuf+0x21c>)
 80065f4:	4820      	ldr	r0, [pc, #128]	; (8006678 <pbuf_copy_partial_pbuf+0x208>)
 80065f6:	f7fb fc58 	bl	8001eaa <lwip_win32_platform_diag>
 80065fa:	f06f 030f 	mvn.w	r3, #15
 80065fe:	e032      	b.n	8006666 <pbuf_copy_partial_pbuf+0x1f6>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d013      	beq.n	800662e <pbuf_copy_partial_pbuf+0x1be>
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	895a      	ldrh	r2, [r3, #10]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	891b      	ldrh	r3, [r3, #8]
 800660e:	429a      	cmp	r2, r3
 8006610:	d10d      	bne.n	800662e <pbuf_copy_partial_pbuf+0x1be>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <pbuf_copy_partial_pbuf+0x1be>
 800661a:	4b15      	ldr	r3, [pc, #84]	; (8006670 <pbuf_copy_partial_pbuf+0x200>)
 800661c:	f240 420c 	movw	r2, #1036	; 0x40c
 8006620:	491b      	ldr	r1, [pc, #108]	; (8006690 <pbuf_copy_partial_pbuf+0x220>)
 8006622:	4815      	ldr	r0, [pc, #84]	; (8006678 <pbuf_copy_partial_pbuf+0x208>)
 8006624:	f7fb fc41 	bl	8001eaa <lwip_win32_platform_diag>
 8006628:	f06f 0305 	mvn.w	r3, #5
 800662c:	e01b      	b.n	8006666 <pbuf_copy_partial_pbuf+0x1f6>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d013      	beq.n	800665c <pbuf_copy_partial_pbuf+0x1ec>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	895a      	ldrh	r2, [r3, #10]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	891b      	ldrh	r3, [r3, #8]
 800663c:	429a      	cmp	r2, r3
 800663e:	d10d      	bne.n	800665c <pbuf_copy_partial_pbuf+0x1ec>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d009      	beq.n	800665c <pbuf_copy_partial_pbuf+0x1ec>
 8006648:	4b09      	ldr	r3, [pc, #36]	; (8006670 <pbuf_copy_partial_pbuf+0x200>)
 800664a:	f240 4211 	movw	r2, #1041	; 0x411
 800664e:	4910      	ldr	r1, [pc, #64]	; (8006690 <pbuf_copy_partial_pbuf+0x220>)
 8006650:	4809      	ldr	r0, [pc, #36]	; (8006678 <pbuf_copy_partial_pbuf+0x208>)
 8006652:	f7fb fc2a 	bl	8001eaa <lwip_win32_platform_diag>
 8006656:	f06f 0305 	mvn.w	r3, #5
 800665a:	e004      	b.n	8006666 <pbuf_copy_partial_pbuf+0x1f6>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (copy_len);
 800665c:	88fb      	ldrh	r3, [r7, #6]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f47f af3c 	bne.w	80064dc <pbuf_copy_partial_pbuf+0x6c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf: copy complete.\n"));
  return ERR_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3720      	adds	r7, #32
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	080160a8 	.word	0x080160a8
 8006674:	08016314 	.word	0x08016314
 8006678:	080160fc 	.word	0x080160fc
 800667c:	08016348 	.word	0x08016348
 8006680:	08016378 	.word	0x08016378
 8006684:	08016390 	.word	0x08016390
 8006688:	080163ac 	.word	0x080163ac
 800668c:	080163bc 	.word	0x080163bc
 8006690:	080163cc 	.word	0x080163cc

08006694 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	4611      	mov	r1, r2
 80066a0:	461a      	mov	r2, r3
 80066a2:	460b      	mov	r3, r1
 80066a4:	80fb      	strh	r3, [r7, #6]
 80066a6:	4613      	mov	r3, r2
 80066a8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80066ae:	2300      	movs	r3, #0
 80066b0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d108      	bne.n	80066ca <pbuf_copy_partial+0x36>
 80066b8:	4b2b      	ldr	r3, [pc, #172]	; (8006768 <pbuf_copy_partial+0xd4>)
 80066ba:	f240 422c 	movw	r2, #1068	; 0x42c
 80066be:	492b      	ldr	r1, [pc, #172]	; (800676c <pbuf_copy_partial+0xd8>)
 80066c0:	482b      	ldr	r0, [pc, #172]	; (8006770 <pbuf_copy_partial+0xdc>)
 80066c2:	f7fb fbf2 	bl	8001eaa <lwip_win32_platform_diag>
 80066c6:	2300      	movs	r3, #0
 80066c8:	e04a      	b.n	8006760 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d108      	bne.n	80066e2 <pbuf_copy_partial+0x4e>
 80066d0:	4b25      	ldr	r3, [pc, #148]	; (8006768 <pbuf_copy_partial+0xd4>)
 80066d2:	f240 422d 	movw	r2, #1069	; 0x42d
 80066d6:	4927      	ldr	r1, [pc, #156]	; (8006774 <pbuf_copy_partial+0xe0>)
 80066d8:	4825      	ldr	r0, [pc, #148]	; (8006770 <pbuf_copy_partial+0xdc>)
 80066da:	f7fb fbe6 	bl	8001eaa <lwip_win32_platform_diag>
 80066de:	2300      	movs	r3, #0
 80066e0:	e03e      	b.n	8006760 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	61fb      	str	r3, [r7, #28]
 80066e6:	e034      	b.n	8006752 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80066e8:	88bb      	ldrh	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00a      	beq.n	8006704 <pbuf_copy_partial+0x70>
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	895b      	ldrh	r3, [r3, #10]
 80066f2:	88ba      	ldrh	r2, [r7, #4]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d305      	bcc.n	8006704 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	895b      	ldrh	r3, [r3, #10]
 80066fc:	88ba      	ldrh	r2, [r7, #4]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	80bb      	strh	r3, [r7, #4]
 8006702:	e023      	b.n	800674c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	895a      	ldrh	r2, [r3, #10]
 8006708:	88bb      	ldrh	r3, [r7, #4]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800670e:	8b3a      	ldrh	r2, [r7, #24]
 8006710:	88fb      	ldrh	r3, [r7, #6]
 8006712:	429a      	cmp	r2, r3
 8006714:	d901      	bls.n	800671a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006716:	88fb      	ldrh	r3, [r7, #6]
 8006718:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800671a:	8b7b      	ldrh	r3, [r7, #26]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	18d0      	adds	r0, r2, r3
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	88bb      	ldrh	r3, [r7, #4]
 8006726:	4413      	add	r3, r2
 8006728:	8b3a      	ldrh	r2, [r7, #24]
 800672a:	4619      	mov	r1, r3
 800672c:	f00d fc62 	bl	8013ff4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006730:	8afa      	ldrh	r2, [r7, #22]
 8006732:	8b3b      	ldrh	r3, [r7, #24]
 8006734:	4413      	add	r3, r2
 8006736:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006738:	8b7a      	ldrh	r2, [r7, #26]
 800673a:	8b3b      	ldrh	r3, [r7, #24]
 800673c:	4413      	add	r3, r2
 800673e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006740:	88fa      	ldrh	r2, [r7, #6]
 8006742:	8b3b      	ldrh	r3, [r7, #24]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006748:	2300      	movs	r3, #0
 800674a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	61fb      	str	r3, [r7, #28]
 8006752:	88fb      	ldrh	r3, [r7, #6]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <pbuf_copy_partial+0xca>
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1c4      	bne.n	80066e8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800675e:	8afb      	ldrh	r3, [r7, #22]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3720      	adds	r7, #32
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	080160a8 	.word	0x080160a8
 800676c:	08016404 	.word	0x08016404
 8006770:	080160fc 	.word	0x080160fc
 8006774:	08016424 	.word	0x08016424

08006778 <pbuf_get_contiguous>:
 *         - pointer to 'buffer' if data was not contiguous and had to be copied
 *         - NULL on error
 */
void *
pbuf_get_contiguous(const struct pbuf *p, void *buffer, size_t bufsize, u16_t len, u16_t offset)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
 8006784:	807b      	strh	r3, [r7, #2]
  const struct pbuf *q;
  u16_t out_offset;

  LWIP_ERROR("pbuf_get_contiguous: invalid buf", (p != NULL), return NULL;);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d108      	bne.n	800679e <pbuf_get_contiguous+0x26>
 800678c:	4b25      	ldr	r3, [pc, #148]	; (8006824 <pbuf_get_contiguous+0xac>)
 800678e:	f240 425c 	movw	r2, #1116	; 0x45c
 8006792:	4925      	ldr	r1, [pc, #148]	; (8006828 <pbuf_get_contiguous+0xb0>)
 8006794:	4825      	ldr	r0, [pc, #148]	; (800682c <pbuf_get_contiguous+0xb4>)
 8006796:	f7fb fb88 	bl	8001eaa <lwip_win32_platform_diag>
 800679a:	2300      	movs	r3, #0
 800679c:	e03d      	b.n	800681a <pbuf_get_contiguous+0xa2>
  LWIP_ERROR("pbuf_get_contiguous: invalid bufsize", (buffer == NULL) || (bufsize >= len), return NULL;);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00c      	beq.n	80067be <pbuf_get_contiguous+0x46>
 80067a4:	887a      	ldrh	r2, [r7, #2]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d908      	bls.n	80067be <pbuf_get_contiguous+0x46>
 80067ac:	4b1d      	ldr	r3, [pc, #116]	; (8006824 <pbuf_get_contiguous+0xac>)
 80067ae:	f240 425d 	movw	r2, #1117	; 0x45d
 80067b2:	491f      	ldr	r1, [pc, #124]	; (8006830 <pbuf_get_contiguous+0xb8>)
 80067b4:	481d      	ldr	r0, [pc, #116]	; (800682c <pbuf_get_contiguous+0xb4>)
 80067b6:	f7fb fb78 	bl	8001eaa <lwip_win32_platform_diag>
 80067ba:	2300      	movs	r3, #0
 80067bc:	e02d      	b.n	800681a <pbuf_get_contiguous+0xa2>

  q = pbuf_skip_const(p, offset, &out_offset);
 80067be:	f107 0212 	add.w	r2, r7, #18
 80067c2:	8c3b      	ldrh	r3, [r7, #32]
 80067c4:	4619      	mov	r1, r3
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 f834 	bl	8006834 <pbuf_skip_const>
 80067cc:	6178      	str	r0, [r7, #20]
  if (q != NULL) {
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d021      	beq.n	8006818 <pbuf_get_contiguous+0xa0>
    if (q->len >= (out_offset + len)) {
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	895b      	ldrh	r3, [r3, #10]
 80067d8:	461a      	mov	r2, r3
 80067da:	8a7b      	ldrh	r3, [r7, #18]
 80067dc:	4619      	mov	r1, r3
 80067de:	887b      	ldrh	r3, [r7, #2]
 80067e0:	440b      	add	r3, r1
 80067e2:	429a      	cmp	r2, r3
 80067e4:	db04      	blt.n	80067f0 <pbuf_get_contiguous+0x78>
      /* all data in this pbuf, return zero-copy */
      return (u8_t *)q->payload + out_offset;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	8a7a      	ldrh	r2, [r7, #18]
 80067ec:	4413      	add	r3, r2
 80067ee:	e014      	b.n	800681a <pbuf_get_contiguous+0xa2>
    }
    if (buffer == NULL) {
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <pbuf_get_contiguous+0x82>
      /* the caller does not want to copy */
      return NULL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	e00f      	b.n	800681a <pbuf_get_contiguous+0xa2>
    }
    /* need to copy */
    if (pbuf_copy_partial(q, buffer, len, out_offset) != len) {
 80067fa:	8a7b      	ldrh	r3, [r7, #18]
 80067fc:	887a      	ldrh	r2, [r7, #2]
 80067fe:	68b9      	ldr	r1, [r7, #8]
 8006800:	6978      	ldr	r0, [r7, #20]
 8006802:	f7ff ff47 	bl	8006694 <pbuf_copy_partial>
 8006806:	4603      	mov	r3, r0
 8006808:	461a      	mov	r2, r3
 800680a:	887b      	ldrh	r3, [r7, #2]
 800680c:	4293      	cmp	r3, r2
 800680e:	d001      	beq.n	8006814 <pbuf_get_contiguous+0x9c>
      /* copying failed: pbuf is too short */
      return NULL;
 8006810:	2300      	movs	r3, #0
 8006812:	e002      	b.n	800681a <pbuf_get_contiguous+0xa2>
    }
    return buffer;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	e000      	b.n	800681a <pbuf_get_contiguous+0xa2>
  }
  /* pbuf is too short (offset does not fit in) */
  return NULL;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	080160a8 	.word	0x080160a8
 8006828:	08016448 	.word	0x08016448
 800682c:	080160fc 	.word	0x080160fc
 8006830:	0801646c 	.word	0x0801646c

08006834 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	460b      	mov	r3, r1
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8006842:	897b      	ldrh	r3, [r7, #10]
 8006844:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800684a:	e007      	b.n	800685c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	895b      	ldrh	r3, [r3, #10]
 8006850:	8afa      	ldrh	r2, [r7, #22]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d004      	beq.n	800686c <pbuf_skip_const+0x38>
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	895b      	ldrh	r3, [r3, #10]
 8006866:	8afa      	ldrh	r2, [r7, #22]
 8006868:	429a      	cmp	r2, r3
 800686a:	d2ef      	bcs.n	800684c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	8afa      	ldrh	r2, [r7, #22]
 8006876:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8006878:	693b      	ldr	r3, [r7, #16]
}
 800687a:	4618      	mov	r0, r3
 800687c:	371c      	adds	r7, #28
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf *
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	460b      	mov	r3, r1
 8006890:	70fb      	strb	r3, [r7, #3]
  struct pbuf *q;
  if (p->next == NULL) {
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <pbuf_coalesce+0x18>
    return p;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	e010      	b.n	80068c0 <pbuf_coalesce+0x3a>
  }
  q = pbuf_clone(layer, PBUF_RAM, p);
 800689e:	78fb      	ldrb	r3, [r7, #3]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 f80e 	bl	80068c8 <pbuf_clone>
 80068ac:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <pbuf_coalesce+0x32>
    /* @todo: what do we do now? */
    return p;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	e003      	b.n	80068c0 <pbuf_coalesce+0x3a>
  }
  pbuf_free(p);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7ff fc7b 	bl	80061b4 <pbuf_free>
  return q;
 80068be:	68fb      	ldr	r3, [r7, #12]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	4603      	mov	r3, r0
 80068d0:	603a      	str	r2, [r7, #0]
 80068d2:	71fb      	strb	r3, [r7, #7]
 80068d4:	460b      	mov	r3, r1
 80068d6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	8919      	ldrh	r1, [r3, #8]
 80068dc:	88ba      	ldrh	r2, [r7, #4]
 80068de:	79fb      	ldrb	r3, [r7, #7]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff f9fd 	bl	8005ce0 <pbuf_alloc>
 80068e6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <pbuf_clone+0x2a>
    return NULL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	e016      	b.n	8006920 <pbuf_clone+0x58>
  }
  err = pbuf_copy(q, p);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f7ff fd97 	bl	8006428 <pbuf_copy>
 80068fa:	4603      	mov	r3, r0
 80068fc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80068fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00b      	beq.n	800691e <pbuf_clone+0x56>
 8006906:	4b08      	ldr	r3, [pc, #32]	; (8006928 <pbuf_clone+0x60>)
 8006908:	f240 524c 	movw	r2, #1356	; 0x54c
 800690c:	4907      	ldr	r1, [pc, #28]	; (800692c <pbuf_clone+0x64>)
 800690e:	4808      	ldr	r0, [pc, #32]	; (8006930 <pbuf_clone+0x68>)
 8006910:	f00d f96e 	bl	8013bf0 <iprintf>
 8006914:	2000      	movs	r0, #0
 8006916:	f00d fa6d 	bl	8013df4 <fflush>
 800691a:	f00d f9b2 	bl	8013c82 <abort>
  return q;
 800691e:	68fb      	ldr	r3, [r7, #12]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	080160a8 	.word	0x080160a8
 800692c:	08016530 	.word	0x08016530
 8006930:	080160fc 	.word	0x080160fc

08006934 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8006940:	887b      	ldrh	r3, [r7, #2]
 8006942:	4619      	mov	r1, r3
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f80c 	bl	8006962 <pbuf_try_get_at>
 800694a:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	db02      	blt.n	8006958 <pbuf_get_at+0x24>
    return (u8_t)ret;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	b2db      	uxtb	r3, r3
 8006956:	e000      	b.n	800695a <pbuf_get_at+0x26>
  }
  return 0;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	460b      	mov	r3, r1
 800696c:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800696e:	f107 020a 	add.w	r2, r7, #10
 8006972:	887b      	ldrh	r3, [r7, #2]
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff ff5c 	bl	8006834 <pbuf_skip_const>
 800697c:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00a      	beq.n	800699a <pbuf_try_get_at+0x38>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	895a      	ldrh	r2, [r3, #10]
 8006988:	897b      	ldrh	r3, [r7, #10]
 800698a:	429a      	cmp	r2, r3
 800698c:	d905      	bls.n	800699a <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	897a      	ldrh	r2, [r7, #10]
 8006994:	4413      	add	r3, r2
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	e001      	b.n	800699e <pbuf_try_get_at+0x3c>
  }
  return -1;
 800699a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
	...

080069a8 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 80069a8:	b480      	push	{r7}
 80069aa:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
 80069ac:	4b03      	ldr	r3, [pc, #12]	; (80069bc <stats_init+0x14>)
 80069ae:	4a04      	ldr	r2, [pc, #16]	; (80069c0 <stats_init+0x18>)
 80069b0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 80069b2:	bf00      	nop
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	2000221c 	.word	0x2000221c
 80069c0:	08016544 	.word	0x08016544

080069c4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80069c8:	f7fb fa90 	bl	8001eec <lwip_port_rand>
 80069cc:	4603      	mov	r3, r0
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80069da:	b29a      	uxth	r2, r3
 80069dc:	4b01      	ldr	r3, [pc, #4]	; (80069e4 <tcp_init+0x20>)
 80069de:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80069e0:	bf00      	nop
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	20000008 	.word	0x20000008

080069e8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	7d1b      	ldrb	r3, [r3, #20]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d10a      	bne.n	8006a0e <tcp_free+0x26>
 80069f8:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <tcp_free+0x38>)
 80069fa:	22d4      	movs	r2, #212	; 0xd4
 80069fc:	4909      	ldr	r1, [pc, #36]	; (8006a24 <tcp_free+0x3c>)
 80069fe:	480a      	ldr	r0, [pc, #40]	; (8006a28 <tcp_free+0x40>)
 8006a00:	f00d f8f6 	bl	8013bf0 <iprintf>
 8006a04:	2000      	movs	r0, #0
 8006a06:	f00d f9f5 	bl	8013df4 <fflush>
 8006a0a:	f00d f93a 	bl	8013c82 <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	2000      	movs	r0, #0
 8006a12:	f7fe fdf9 	bl	8005608 <memp_free>
}
 8006a16:	bf00      	nop
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	080165c0 	.word	0x080165c0
 8006a24:	080165e0 	.word	0x080165e0
 8006a28:	080165f4 	.word	0x080165f4

08006a2c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	7d1b      	ldrb	r3, [r3, #20]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d10a      	bne.n	8006a52 <tcp_free_listen+0x26>
 8006a3c:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <tcp_free_listen+0x38>)
 8006a3e:	22df      	movs	r2, #223	; 0xdf
 8006a40:	4909      	ldr	r1, [pc, #36]	; (8006a68 <tcp_free_listen+0x3c>)
 8006a42:	480a      	ldr	r0, [pc, #40]	; (8006a6c <tcp_free_listen+0x40>)
 8006a44:	f00d f8d4 	bl	8013bf0 <iprintf>
 8006a48:	2000      	movs	r0, #0
 8006a4a:	f00d f9d3 	bl	8013df4 <fflush>
 8006a4e:	f00d f918 	bl	8013c82 <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	2001      	movs	r0, #1
 8006a56:	f7fe fdd7 	bl	8005608 <memp_free>
}
 8006a5a:	bf00      	nop
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	080165c0 	.word	0x080165c0
 8006a68:	0801661c 	.word	0x0801661c
 8006a6c:	080165f4 	.word	0x080165f4

08006a70 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006a74:	f001 f8f8 	bl	8007c68 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006a78:	4b07      	ldr	r3, [pc, #28]	; (8006a98 <tcp_tmr+0x28>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <tcp_tmr+0x28>)
 8006a82:	701a      	strb	r2, [r3, #0]
 8006a84:	4b04      	ldr	r3, [pc, #16]	; (8006a98 <tcp_tmr+0x28>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006a90:	f000 fd78 	bl	8007584 <tcp_slowtmr>
  }
}
 8006a94:	bf00      	nop
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	200006fd 	.word	0x200006fd

08006a9c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10a      	bne.n	8006ac2 <tcp_remove_listener+0x26>
 8006aac:	4b0f      	ldr	r3, [pc, #60]	; (8006aec <tcp_remove_listener+0x50>)
 8006aae:	22ff      	movs	r2, #255	; 0xff
 8006ab0:	490f      	ldr	r1, [pc, #60]	; (8006af0 <tcp_remove_listener+0x54>)
 8006ab2:	4810      	ldr	r0, [pc, #64]	; (8006af4 <tcp_remove_listener+0x58>)
 8006ab4:	f00d f89c 	bl	8013bf0 <iprintf>
 8006ab8:	2000      	movs	r0, #0
 8006aba:	f00d f99b 	bl	8013df4 <fflush>
 8006abe:	f00d f8e0 	bl	8013c82 <abort>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	e00a      	b.n	8006ade <tcp_remove_listener+0x42>
    if (pcb->listener == lpcb) {
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d102      	bne.n	8006ad8 <tcp_remove_listener+0x3c>
      pcb->listener = NULL;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1f1      	bne.n	8006ac8 <tcp_remove_listener+0x2c>
    }
  }
}
 8006ae4:	bf00      	nop
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	080165c0 	.word	0x080165c0
 8006af0:	08016638 	.word	0x08016638
 8006af4:	080165f4 	.word	0x080165f4

08006af8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10b      	bne.n	8006b1e <tcp_listen_closed+0x26>
 8006b06:	4b19      	ldr	r3, [pc, #100]	; (8006b6c <tcp_listen_closed+0x74>)
 8006b08:	f240 1211 	movw	r2, #273	; 0x111
 8006b0c:	4918      	ldr	r1, [pc, #96]	; (8006b70 <tcp_listen_closed+0x78>)
 8006b0e:	4819      	ldr	r0, [pc, #100]	; (8006b74 <tcp_listen_closed+0x7c>)
 8006b10:	f00d f86e 	bl	8013bf0 <iprintf>
 8006b14:	2000      	movs	r0, #0
 8006b16:	f00d f96d 	bl	8013df4 <fflush>
 8006b1a:	f00d f8b2 	bl	8013c82 <abort>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	7d1b      	ldrb	r3, [r3, #20]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d00b      	beq.n	8006b3e <tcp_listen_closed+0x46>
 8006b26:	4b11      	ldr	r3, [pc, #68]	; (8006b6c <tcp_listen_closed+0x74>)
 8006b28:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006b2c:	4912      	ldr	r1, [pc, #72]	; (8006b78 <tcp_listen_closed+0x80>)
 8006b2e:	4811      	ldr	r0, [pc, #68]	; (8006b74 <tcp_listen_closed+0x7c>)
 8006b30:	f00d f85e 	bl	8013bf0 <iprintf>
 8006b34:	2000      	movs	r0, #0
 8006b36:	f00d f95d 	bl	8013df4 <fflush>
 8006b3a:	f00d f8a2 	bl	8013c82 <abort>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006b3e:	2301      	movs	r3, #1
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	e00b      	b.n	8006b5c <tcp_listen_closed+0x64>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006b44:	4a0d      	ldr	r2, [pc, #52]	; (8006b7c <tcp_listen_closed+0x84>)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6879      	ldr	r1, [r7, #4]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7ff ffa3 	bl	8006a9c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d9f0      	bls.n	8006b44 <tcp_listen_closed+0x4c>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006b62:	bf00      	nop
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	080165c0 	.word	0x080165c0
 8006b70:	08016660 	.word	0x08016660
 8006b74:	080165f4 	.word	0x080165f4
 8006b78:	0801666c 	.word	0x0801666c
 8006b7c:	08017f30 	.word	0x08017f30

08006b80 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006b80:	b5b0      	push	{r4, r5, r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af04      	add	r7, sp, #16
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10b      	bne.n	8006baa <tcp_close_shutdown+0x2a>
 8006b92:	4b67      	ldr	r3, [pc, #412]	; (8006d30 <tcp_close_shutdown+0x1b0>)
 8006b94:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006b98:	4966      	ldr	r1, [pc, #408]	; (8006d34 <tcp_close_shutdown+0x1b4>)
 8006b9a:	4867      	ldr	r0, [pc, #412]	; (8006d38 <tcp_close_shutdown+0x1b8>)
 8006b9c:	f00d f828 	bl	8013bf0 <iprintf>
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	f00d f927 	bl	8013df4 <fflush>
 8006ba6:	f00d f86c 	bl	8013c82 <abort>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d06c      	beq.n	8006c8a <tcp_close_shutdown+0x10a>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	7d1b      	ldrb	r3, [r3, #20]
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d003      	beq.n	8006bc0 <tcp_close_shutdown+0x40>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	7d1b      	ldrb	r3, [r3, #20]
 8006bbc:	2b07      	cmp	r3, #7
 8006bbe:	d164      	bne.n	8006c8a <tcp_close_shutdown+0x10a>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d105      	bne.n	8006bd4 <tcp_close_shutdown+0x54>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bcc:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d05a      	beq.n	8006c8a <tcp_close_shutdown+0x10a>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	8b5b      	ldrh	r3, [r3, #26]
 8006bd8:	f003 0310 	and.w	r3, r3, #16
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10b      	bne.n	8006bf8 <tcp_close_shutdown+0x78>
 8006be0:	4b53      	ldr	r3, [pc, #332]	; (8006d30 <tcp_close_shutdown+0x1b0>)
 8006be2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006be6:	4955      	ldr	r1, [pc, #340]	; (8006d3c <tcp_close_shutdown+0x1bc>)
 8006be8:	4853      	ldr	r0, [pc, #332]	; (8006d38 <tcp_close_shutdown+0x1b8>)
 8006bea:	f00d f801 	bl	8013bf0 <iprintf>
 8006bee:	2000      	movs	r0, #0
 8006bf0:	f00d f900 	bl	8013df4 <fflush>
 8006bf4:	f00d f845 	bl	8013c82 <abort>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006c00:	687d      	ldr	r5, [r7, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3304      	adds	r3, #4
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	8ad2      	ldrh	r2, [r2, #22]
 8006c0a:	6879      	ldr	r1, [r7, #4]
 8006c0c:	8b09      	ldrh	r1, [r1, #24]
 8006c0e:	9102      	str	r1, [sp, #8]
 8006c10:	9201      	str	r2, [sp, #4]
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	462b      	mov	r3, r5
 8006c16:	4622      	mov	r2, r4
 8006c18:	4601      	mov	r1, r0
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f006 f9d8 	bl	800cfd0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 fc03 	bl	800842c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006c26:	4b46      	ldr	r3, [pc, #280]	; (8006d40 <tcp_close_shutdown+0x1c0>)
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d105      	bne.n	8006c3c <tcp_close_shutdown+0xbc>
 8006c30:	4b43      	ldr	r3, [pc, #268]	; (8006d40 <tcp_close_shutdown+0x1c0>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	4a42      	ldr	r2, [pc, #264]	; (8006d40 <tcp_close_shutdown+0x1c0>)
 8006c38:	6013      	str	r3, [r2, #0]
 8006c3a:	e013      	b.n	8006c64 <tcp_close_shutdown+0xe4>
 8006c3c:	4b40      	ldr	r3, [pc, #256]	; (8006d40 <tcp_close_shutdown+0x1c0>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	e00c      	b.n	8006c5e <tcp_close_shutdown+0xde>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	68da      	ldr	r2, [r3, #12]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d104      	bne.n	8006c58 <tcp_close_shutdown+0xd8>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68da      	ldr	r2, [r3, #12]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	60da      	str	r2, [r3, #12]
 8006c56:	e005      	b.n	8006c64 <tcp_close_shutdown+0xe4>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	60fb      	str	r3, [r7, #12]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1ef      	bne.n	8006c44 <tcp_close_shutdown+0xc4>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	60da      	str	r2, [r3, #12]
 8006c6a:	4b36      	ldr	r3, [pc, #216]	; (8006d44 <tcp_close_shutdown+0x1c4>)
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006c70:	4b35      	ldr	r3, [pc, #212]	; (8006d48 <tcp_close_shutdown+0x1c8>)
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d102      	bne.n	8006c80 <tcp_close_shutdown+0x100>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006c7a:	f004 fa03 	bl	800b084 <tcp_trigger_input_pcb_close>
 8006c7e:	e002      	b.n	8006c86 <tcp_close_shutdown+0x106>
      } else {
        tcp_free(pcb);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff feb1 	bl	80069e8 <tcp_free>
      }
      return ERR_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	e04d      	b.n	8006d26 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	7d1b      	ldrb	r3, [r3, #20]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d02d      	beq.n	8006cee <tcp_close_shutdown+0x16e>
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d036      	beq.n	8006d04 <tcp_close_shutdown+0x184>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d13f      	bne.n	8006d1a <tcp_close_shutdown+0x19a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	8adb      	ldrh	r3, [r3, #22]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d021      	beq.n	8006ce6 <tcp_close_shutdown+0x166>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006ca2:	4b2a      	ldr	r3, [pc, #168]	; (8006d4c <tcp_close_shutdown+0x1cc>)
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d105      	bne.n	8006cb8 <tcp_close_shutdown+0x138>
 8006cac:	4b27      	ldr	r3, [pc, #156]	; (8006d4c <tcp_close_shutdown+0x1cc>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	4a26      	ldr	r2, [pc, #152]	; (8006d4c <tcp_close_shutdown+0x1cc>)
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	e013      	b.n	8006ce0 <tcp_close_shutdown+0x160>
 8006cb8:	4b24      	ldr	r3, [pc, #144]	; (8006d4c <tcp_close_shutdown+0x1cc>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	60bb      	str	r3, [r7, #8]
 8006cbe:	e00c      	b.n	8006cda <tcp_close_shutdown+0x15a>
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	68da      	ldr	r2, [r3, #12]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d104      	bne.n	8006cd4 <tcp_close_shutdown+0x154>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	60da      	str	r2, [r3, #12]
 8006cd2:	e005      	b.n	8006ce0 <tcp_close_shutdown+0x160>
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	60bb      	str	r3, [r7, #8]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1ef      	bne.n	8006cc0 <tcp_close_shutdown+0x140>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7ff fe7e 	bl	80069e8 <tcp_free>
      break;
 8006cec:	e01a      	b.n	8006d24 <tcp_close_shutdown+0x1a4>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff ff02 	bl	8006af8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	4816      	ldr	r0, [pc, #88]	; (8006d50 <tcp_close_shutdown+0x1d0>)
 8006cf8:	f001 fbe8 	bl	80084cc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff fe95 	bl	8006a2c <tcp_free_listen>
      break;
 8006d02:	e00f      	b.n	8006d24 <tcp_close_shutdown+0x1a4>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006d04:	6879      	ldr	r1, [r7, #4]
 8006d06:	480e      	ldr	r0, [pc, #56]	; (8006d40 <tcp_close_shutdown+0x1c0>)
 8006d08:	f001 fbe0 	bl	80084cc <tcp_pcb_remove>
 8006d0c:	4b0d      	ldr	r3, [pc, #52]	; (8006d44 <tcp_close_shutdown+0x1c4>)
 8006d0e:	2201      	movs	r2, #1
 8006d10:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff fe68 	bl	80069e8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006d18:	e004      	b.n	8006d24 <tcp_close_shutdown+0x1a4>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f81a 	bl	8006d54 <tcp_close_shutdown_fin>
 8006d20:	4603      	mov	r3, r0
 8006d22:	e000      	b.n	8006d26 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	080165c0 	.word	0x080165c0
 8006d34:	08016684 	.word	0x08016684
 8006d38:	080165f4 	.word	0x080165f4
 8006d3c:	080166a4 	.word	0x080166a4
 8006d40:	200022c4 	.word	0x200022c4
 8006d44:	200022c0 	.word	0x200022c0
 8006d48:	200022d8 	.word	0x200022d8
 8006d4c:	200022d0 	.word	0x200022d0
 8006d50:	200022cc 	.word	0x200022cc

08006d54 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10b      	bne.n	8006d7a <tcp_close_shutdown_fin+0x26>
 8006d62:	4b2f      	ldr	r3, [pc, #188]	; (8006e20 <tcp_close_shutdown_fin+0xcc>)
 8006d64:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006d68:	492e      	ldr	r1, [pc, #184]	; (8006e24 <tcp_close_shutdown_fin+0xd0>)
 8006d6a:	482f      	ldr	r0, [pc, #188]	; (8006e28 <tcp_close_shutdown_fin+0xd4>)
 8006d6c:	f00c ff40 	bl	8013bf0 <iprintf>
 8006d70:	2000      	movs	r0, #0
 8006d72:	f00d f83f 	bl	8013df4 <fflush>
 8006d76:	f00c ff84 	bl	8013c82 <abort>

  switch (pcb->state) {
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	7d1b      	ldrb	r3, [r3, #20]
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d010      	beq.n	8006da4 <tcp_close_shutdown_fin+0x50>
 8006d82:	2b07      	cmp	r3, #7
 8006d84:	d01b      	beq.n	8006dbe <tcp_close_shutdown_fin+0x6a>
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d126      	bne.n	8006dd8 <tcp_close_shutdown_fin+0x84>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f005 f8d8 	bl	800bf40 <tcp_send_fin>
 8006d90:	4603      	mov	r3, r0
 8006d92:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d11f      	bne.n	8006ddc <tcp_close_shutdown_fin+0x88>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2205      	movs	r2, #5
 8006da0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006da2:	e01b      	b.n	8006ddc <tcp_close_shutdown_fin+0x88>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f005 f8cb 	bl	800bf40 <tcp_send_fin>
 8006daa:	4603      	mov	r3, r0
 8006dac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d114      	bne.n	8006de0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2205      	movs	r2, #5
 8006dba:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006dbc:	e010      	b.n	8006de0 <tcp_close_shutdown_fin+0x8c>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f005 f8be 	bl	800bf40 <tcp_send_fin>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d109      	bne.n	8006de4 <tcp_close_shutdown_fin+0x90>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2209      	movs	r2, #9
 8006dd4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006dd6:	e005      	b.n	8006de4 <tcp_close_shutdown_fin+0x90>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	e01c      	b.n	8006e16 <tcp_close_shutdown_fin+0xc2>
      break;
 8006ddc:	bf00      	nop
 8006dde:	e002      	b.n	8006de6 <tcp_close_shutdown_fin+0x92>
      break;
 8006de0:	bf00      	nop
 8006de2:	e000      	b.n	8006de6 <tcp_close_shutdown_fin+0x92>
      break;
 8006de4:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d103      	bne.n	8006df6 <tcp_close_shutdown_fin+0xa2>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f005 fa06 	bl	800c200 <tcp_output>
 8006df4:	e00d      	b.n	8006e12 <tcp_close_shutdown_fin+0xbe>
  } else if (err == ERR_MEM) {
 8006df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfe:	d108      	bne.n	8006e12 <tcp_close_shutdown_fin+0xbe>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	8b5b      	ldrh	r3, [r3, #26]
 8006e04:	f043 0308 	orr.w	r3, r3, #8
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e001      	b.n	8006e16 <tcp_close_shutdown_fin+0xc2>
  }
  return err;
 8006e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	080165c0 	.word	0x080165c0
 8006e24:	08016660 	.word	0x08016660
 8006e28:	080165f4 	.word	0x080165f4

08006e2c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d109      	bne.n	8006e4e <tcp_close+0x22>
 8006e3a:	4b0f      	ldr	r3, [pc, #60]	; (8006e78 <tcp_close+0x4c>)
 8006e3c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006e40:	490e      	ldr	r1, [pc, #56]	; (8006e7c <tcp_close+0x50>)
 8006e42:	480f      	ldr	r0, [pc, #60]	; (8006e80 <tcp_close+0x54>)
 8006e44:	f7fb f831 	bl	8001eaa <lwip_win32_platform_diag>
 8006e48:	f06f 030f 	mvn.w	r3, #15
 8006e4c:	e00f      	b.n	8006e6e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	7d1b      	ldrb	r3, [r3, #20]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d006      	beq.n	8006e64 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	8b5b      	ldrh	r3, [r3, #26]
 8006e5a:	f043 0310 	orr.w	r3, r3, #16
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006e64:	2101      	movs	r1, #1
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7ff fe8a 	bl	8006b80 <tcp_close_shutdown>
 8006e6c:	4603      	mov	r3, r0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	080165c0 	.word	0x080165c0
 8006e7c:	080166c0 	.word	0x080166c0
 8006e80:	080165f4 	.word	0x080165f4

08006e84 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08e      	sub	sp, #56	; 0x38
 8006e88:	af04      	add	r7, sp, #16
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d107      	bne.n	8006ea4 <tcp_abandon+0x20>
 8006e94:	4b54      	ldr	r3, [pc, #336]	; (8006fe8 <tcp_abandon+0x164>)
 8006e96:	f240 223d 	movw	r2, #573	; 0x23d
 8006e9a:	4954      	ldr	r1, [pc, #336]	; (8006fec <tcp_abandon+0x168>)
 8006e9c:	4854      	ldr	r0, [pc, #336]	; (8006ff0 <tcp_abandon+0x16c>)
 8006e9e:	f7fb f804 	bl	8001eaa <lwip_win32_platform_diag>
 8006ea2:	e09e      	b.n	8006fe2 <tcp_abandon+0x15e>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	7d1b      	ldrb	r3, [r3, #20]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d10b      	bne.n	8006ec4 <tcp_abandon+0x40>
 8006eac:	4b4e      	ldr	r3, [pc, #312]	; (8006fe8 <tcp_abandon+0x164>)
 8006eae:	f240 2241 	movw	r2, #577	; 0x241
 8006eb2:	4950      	ldr	r1, [pc, #320]	; (8006ff4 <tcp_abandon+0x170>)
 8006eb4:	484e      	ldr	r0, [pc, #312]	; (8006ff0 <tcp_abandon+0x16c>)
 8006eb6:	f00c fe9b 	bl	8013bf0 <iprintf>
 8006eba:	2000      	movs	r0, #0
 8006ebc:	f00c ff9a 	bl	8013df4 <fflush>
 8006ec0:	f00c fedf 	bl	8013c82 <abort>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	7d1b      	ldrb	r3, [r3, #20]
 8006ec8:	2b0a      	cmp	r3, #10
 8006eca:	d107      	bne.n	8006edc <tcp_abandon+0x58>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	484a      	ldr	r0, [pc, #296]	; (8006ff8 <tcp_abandon+0x174>)
 8006ed0:	f001 fafc 	bl	80084cc <tcp_pcb_remove>
    tcp_free(pcb);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f7ff fd87 	bl	80069e8 <tcp_free>
 8006eda:	e082      	b.n	8006fe2 <tcp_abandon+0x15e>
  } else {
    int send_rst = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee8:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef6:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	7d1b      	ldrb	r3, [r3, #20]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d126      	bne.n	8006f54 <tcp_abandon+0xd0>
      if (pcb->local_port != 0) {
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	8adb      	ldrh	r3, [r3, #22]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d02e      	beq.n	8006f6c <tcp_abandon+0xe8>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006f0e:	4b3b      	ldr	r3, [pc, #236]	; (8006ffc <tcp_abandon+0x178>)
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d105      	bne.n	8006f24 <tcp_abandon+0xa0>
 8006f18:	4b38      	ldr	r3, [pc, #224]	; (8006ffc <tcp_abandon+0x178>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	4a37      	ldr	r2, [pc, #220]	; (8006ffc <tcp_abandon+0x178>)
 8006f20:	6013      	str	r3, [r2, #0]
 8006f22:	e013      	b.n	8006f4c <tcp_abandon+0xc8>
 8006f24:	4b35      	ldr	r3, [pc, #212]	; (8006ffc <tcp_abandon+0x178>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	61fb      	str	r3, [r7, #28]
 8006f2a:	e00c      	b.n	8006f46 <tcp_abandon+0xc2>
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d104      	bne.n	8006f40 <tcp_abandon+0xbc>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68da      	ldr	r2, [r3, #12]
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	60da      	str	r2, [r3, #12]
 8006f3e:	e005      	b.n	8006f4c <tcp_abandon+0xc8>
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	61fb      	str	r3, [r7, #28]
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1ef      	bne.n	8006f2c <tcp_abandon+0xa8>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	60da      	str	r2, [r3, #12]
 8006f52:	e00b      	b.n	8006f6c <tcp_abandon+0xe8>
      }
    } else {
      send_rst = reset;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	8adb      	ldrh	r3, [r3, #22]
 8006f5c:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	4827      	ldr	r0, [pc, #156]	; (8007000 <tcp_abandon+0x17c>)
 8006f62:	f001 fab3 	bl	80084cc <tcp_pcb_remove>
 8006f66:	4b27      	ldr	r3, [pc, #156]	; (8007004 <tcp_abandon+0x180>)
 8006f68:	2201      	movs	r2, #1
 8006f6a:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d004      	beq.n	8006f7e <tcp_abandon+0xfa>
      tcp_segs_free(pcb->unacked);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 ff57 	bl	8007e2c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d004      	beq.n	8006f90 <tcp_abandon+0x10c>
      tcp_segs_free(pcb->unsent);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 ff4e 	bl	8007e2c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d004      	beq.n	8006fa2 <tcp_abandon+0x11e>
      tcp_segs_free(pcb->ooseq);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 ff45 	bl	8007e2c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00e      	beq.n	8006fc6 <tcp_abandon+0x142>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3304      	adds	r3, #4
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	8b12      	ldrh	r2, [r2, #24]
 8006fb2:	9202      	str	r2, [sp, #8]
 8006fb4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006fb6:	9201      	str	r2, [sp, #4]
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	460b      	mov	r3, r1
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	69b9      	ldr	r1, [r7, #24]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f006 f805 	bl	800cfd0 <tcp_rst>
    }
    last_state = pcb->state;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	7d1b      	ldrb	r3, [r3, #20]
 8006fca:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff fd0b 	bl	80069e8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d004      	beq.n	8006fe2 <tcp_abandon+0x15e>
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f06f 010c 	mvn.w	r1, #12
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	4798      	blx	r3
  }
}
 8006fe2:	3728      	adds	r7, #40	; 0x28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	080165c0 	.word	0x080165c0
 8006fec:	080166f4 	.word	0x080166f4
 8006ff0:	080165f4 	.word	0x080165f4
 8006ff4:	08016710 	.word	0x08016710
 8006ff8:	200022d4 	.word	0x200022d4
 8006ffc:	200022d0 	.word	0x200022d0
 8007000:	200022c4 	.word	0x200022c4
 8007004:	200022c0 	.word	0x200022c0

08007008 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007010:	2101      	movs	r1, #1
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7ff ff36 	bl	8006e84 <tcp_abandon>
}
 8007018:	bf00      	nop
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	4613      	mov	r3, r2
 800702c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800702e:	2304      	movs	r3, #4
 8007030:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8007038:	4b3e      	ldr	r3, [pc, #248]	; (8007134 <tcp_bind+0x114>)
 800703a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d109      	bne.n	8007056 <tcp_bind+0x36>
 8007042:	4b3d      	ldr	r3, [pc, #244]	; (8007138 <tcp_bind+0x118>)
 8007044:	f240 22aa 	movw	r2, #682	; 0x2aa
 8007048:	493c      	ldr	r1, [pc, #240]	; (800713c <tcp_bind+0x11c>)
 800704a:	483d      	ldr	r0, [pc, #244]	; (8007140 <tcp_bind+0x120>)
 800704c:	f7fa ff2d 	bl	8001eaa <lwip_win32_platform_diag>
 8007050:	f06f 030f 	mvn.w	r3, #15
 8007054:	e06a      	b.n	800712c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	7d1b      	ldrb	r3, [r3, #20]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d009      	beq.n	8007072 <tcp_bind+0x52>
 800705e:	4b36      	ldr	r3, [pc, #216]	; (8007138 <tcp_bind+0x118>)
 8007060:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8007064:	4937      	ldr	r1, [pc, #220]	; (8007144 <tcp_bind+0x124>)
 8007066:	4836      	ldr	r0, [pc, #216]	; (8007140 <tcp_bind+0x120>)
 8007068:	f7fa ff1f 	bl	8001eaa <lwip_win32_platform_diag>
 800706c:	f06f 0305 	mvn.w	r3, #5
 8007070:	e05c      	b.n	800712c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d109      	bne.n	800708c <tcp_bind+0x6c>
    port = tcp_new_port();
 8007078:	f000 f926 	bl	80072c8 <tcp_new_port>
 800707c:	4603      	mov	r3, r0
 800707e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007080:	88fb      	ldrh	r3, [r7, #6]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d135      	bne.n	80070f2 <tcp_bind+0xd2>
      return ERR_BUF;
 8007086:	f06f 0301 	mvn.w	r3, #1
 800708a:	e04f      	b.n	800712c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800708c:	2300      	movs	r3, #0
 800708e:	61fb      	str	r3, [r7, #28]
 8007090:	e02b      	b.n	80070ea <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007092:	4a2d      	ldr	r2, [pc, #180]	; (8007148 <tcp_bind+0x128>)
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	61bb      	str	r3, [r7, #24]
 800709e:	e01e      	b.n	80070de <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	8adb      	ldrh	r3, [r3, #22]
 80070a4:	88fa      	ldrh	r2, [r7, #6]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d116      	bne.n	80070d8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80070aa:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d010      	beq.n	80070d2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00c      	beq.n	80070d2 <tcp_bind+0xb2>
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d009      	beq.n	80070d2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d005      	beq.n	80070d2 <tcp_bind+0xb2>
                 ip_addr_eq(&cpcb->local_ip, ipaddr))) {
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d102      	bne.n	80070d8 <tcp_bind+0xb8>
              return ERR_USE;
 80070d2:	f06f 0307 	mvn.w	r3, #7
 80070d6:	e029      	b.n	800712c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	61bb      	str	r3, [r7, #24]
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1dd      	bne.n	80070a0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	3301      	adds	r3, #1
 80070e8:	61fb      	str	r3, [r7, #28]
 80070ea:	69fa      	ldr	r2, [r7, #28]
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	dbcf      	blt.n	8007092 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00c      	beq.n	8007112 <tcp_bind+0xf2>
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d008      	beq.n	8007112 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <tcp_bind+0xec>
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	e000      	b.n	800710e <tcp_bind+0xee>
 800710c:	2300      	movs	r3, #0
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	88fa      	ldrh	r2, [r7, #6]
 8007116:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007118:	4b0c      	ldr	r3, [pc, #48]	; (800714c <tcp_bind+0x12c>)
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	60da      	str	r2, [r3, #12]
 8007120:	4a0a      	ldr	r2, [pc, #40]	; (800714c <tcp_bind+0x12c>)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	f006 f91d 	bl	800d364 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3720      	adds	r7, #32
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	08017e50 	.word	0x08017e50
 8007138:	080165c0 	.word	0x080165c0
 800713c:	08016744 	.word	0x08016744
 8007140:	080165f4 	.word	0x080165f4
 8007144:	0801675c 	.word	0x0801675c
 8007148:	08017f30 	.word	0x08017f30
 800714c:	200022d0 	.word	0x200022d0

08007150 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10b      	bne.n	8007176 <tcp_update_rcv_ann_wnd+0x26>
 800715e:	4b2b      	ldr	r3, [pc, #172]	; (800720c <tcp_update_rcv_ann_wnd+0xbc>)
 8007160:	f240 32aa 	movw	r2, #938	; 0x3aa
 8007164:	492a      	ldr	r1, [pc, #168]	; (8007210 <tcp_update_rcv_ann_wnd+0xc0>)
 8007166:	482b      	ldr	r0, [pc, #172]	; (8007214 <tcp_update_rcv_ann_wnd+0xc4>)
 8007168:	f00c fd42 	bl	8013bf0 <iprintf>
 800716c:	2000      	movs	r0, #0
 800716e:	f00c fe41 	bl	8013df4 <fflush>
 8007172:	f00c fd86 	bl	8013c82 <abort>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800717e:	4413      	add	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800718a:	f240 21da 	movw	r1, #730	; 0x2da
 800718e:	428a      	cmp	r2, r1
 8007190:	d802      	bhi.n	8007198 <tcp_update_rcv_ann_wnd+0x48>
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007196:	e001      	b.n	800719c <tcp_update_rcv_ann_wnd+0x4c>
 8007198:	f240 22da 	movw	r2, #730	; 0x2da
 800719c:	4413      	add	r3, r2
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	db08      	blt.n	80071b8 <tcp_update_rcv_ann_wnd+0x68>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	e025      	b.n	8007204 <tcp_update_rcv_ann_wnd+0xb4>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	da03      	bge.n	80071ce <tcp_update_rcv_ann_wnd+0x7e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80071cc:	e019      	b.n	8007202 <tcp_update_rcv_ann_wnd+0xb2>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071e0:	d30b      	bcc.n	80071fa <tcp_update_rcv_ann_wnd+0xaa>
 80071e2:	4b0a      	ldr	r3, [pc, #40]	; (800720c <tcp_update_rcv_ann_wnd+0xbc>)
 80071e4:	f240 32ba 	movw	r2, #954	; 0x3ba
 80071e8:	490b      	ldr	r1, [pc, #44]	; (8007218 <tcp_update_rcv_ann_wnd+0xc8>)
 80071ea:	480a      	ldr	r0, [pc, #40]	; (8007214 <tcp_update_rcv_ann_wnd+0xc4>)
 80071ec:	f00c fd00 	bl	8013bf0 <iprintf>
 80071f0:	2000      	movs	r0, #0
 80071f2:	f00c fdff 	bl	8013df4 <fflush>
 80071f6:	f00c fd44 	bl	8013c82 <abort>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007202:	2300      	movs	r3, #0
  }
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	080165c0 	.word	0x080165c0
 8007210:	0801680c 	.word	0x0801680c
 8007214:	080165f4 	.word	0x080165f4
 8007218:	08016830 	.word	0x08016830

0800721c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d107      	bne.n	800723e <tcp_recved+0x22>
 800722e:	4b22      	ldr	r3, [pc, #136]	; (80072b8 <tcp_recved+0x9c>)
 8007230:	f240 32d3 	movw	r2, #979	; 0x3d3
 8007234:	4921      	ldr	r1, [pc, #132]	; (80072bc <tcp_recved+0xa0>)
 8007236:	4822      	ldr	r0, [pc, #136]	; (80072c0 <tcp_recved+0xa4>)
 8007238:	f7fa fe37 	bl	8001eaa <lwip_win32_platform_diag>
 800723c:	e038      	b.n	80072b0 <tcp_recved+0x94>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	7d1b      	ldrb	r3, [r3, #20]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d10b      	bne.n	800725e <tcp_recved+0x42>
 8007246:	4b1c      	ldr	r3, [pc, #112]	; (80072b8 <tcp_recved+0x9c>)
 8007248:	f240 32d7 	movw	r2, #983	; 0x3d7
 800724c:	491d      	ldr	r1, [pc, #116]	; (80072c4 <tcp_recved+0xa8>)
 800724e:	481c      	ldr	r0, [pc, #112]	; (80072c0 <tcp_recved+0xa4>)
 8007250:	f00c fcce 	bl	8013bf0 <iprintf>
 8007254:	2000      	movs	r0, #0
 8007256:	f00c fdcd 	bl	8013df4 <fflush>
 800725a:	f00c fd12 	bl	8013c82 <abort>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007262:	887b      	ldrh	r3, [r7, #2]
 8007264:	4413      	add	r3, r2
 8007266:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007268:	89fb      	ldrh	r3, [r7, #14]
 800726a:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800726e:	4293      	cmp	r3, r2
 8007270:	d804      	bhi.n	800727c <tcp_recved+0x60>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007276:	89fa      	ldrh	r2, [r7, #14]
 8007278:	429a      	cmp	r2, r3
 800727a:	d204      	bcs.n	8007286 <tcp_recved+0x6a>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8007282:	851a      	strh	r2, [r3, #40]	; 0x28
 8007284:	e002      	b.n	800728c <tcp_recved+0x70>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	89fa      	ldrh	r2, [r7, #14]
 800728a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7ff ff5f 	bl	8007150 <tcp_update_rcv_ann_wnd>
 8007292:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 800729a:	d909      	bls.n	80072b0 <tcp_recved+0x94>
    tcp_ack_now(pcb);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8b5b      	ldrh	r3, [r3, #26]
 80072a0:	f043 0302 	orr.w	r3, r3, #2
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f004 ffa8 	bl	800c200 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	080165c0 	.word	0x080165c0
 80072bc:	0801684c 	.word	0x0801684c
 80072c0:	080165f4 	.word	0x080165f4
 80072c4:	08016864 	.word	0x08016864

080072c8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80072ce:	2300      	movs	r3, #0
 80072d0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80072d2:	4b1e      	ldr	r3, [pc, #120]	; (800734c <tcp_new_port+0x84>)
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	3301      	adds	r3, #1
 80072d8:	b29a      	uxth	r2, r3
 80072da:	4b1c      	ldr	r3, [pc, #112]	; (800734c <tcp_new_port+0x84>)
 80072dc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80072de:	4b1b      	ldr	r3, [pc, #108]	; (800734c <tcp_new_port+0x84>)
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d103      	bne.n	80072f2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80072ea:	4b18      	ldr	r3, [pc, #96]	; (800734c <tcp_new_port+0x84>)
 80072ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80072f0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80072f2:	2300      	movs	r3, #0
 80072f4:	71fb      	strb	r3, [r7, #7]
 80072f6:	e01e      	b.n	8007336 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80072f8:	79fb      	ldrb	r3, [r7, #7]
 80072fa:	4a15      	ldr	r2, [pc, #84]	; (8007350 <tcp_new_port+0x88>)
 80072fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	603b      	str	r3, [r7, #0]
 8007304:	e011      	b.n	800732a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	8ada      	ldrh	r2, [r3, #22]
 800730a:	4b10      	ldr	r3, [pc, #64]	; (800734c <tcp_new_port+0x84>)
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	429a      	cmp	r2, r3
 8007310:	d108      	bne.n	8007324 <tcp_new_port+0x5c>
        n++;
 8007312:	88bb      	ldrh	r3, [r7, #4]
 8007314:	3301      	adds	r3, #1
 8007316:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007318:	88bb      	ldrh	r3, [r7, #4]
 800731a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800731e:	d3d8      	bcc.n	80072d2 <tcp_new_port+0xa>
          return 0;
 8007320:	2300      	movs	r3, #0
 8007322:	e00d      	b.n	8007340 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	603b      	str	r3, [r7, #0]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1ea      	bne.n	8007306 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007330:	79fb      	ldrb	r3, [r7, #7]
 8007332:	3301      	adds	r3, #1
 8007334:	71fb      	strb	r3, [r7, #7]
 8007336:	79fb      	ldrb	r3, [r7, #7]
 8007338:	2b03      	cmp	r3, #3
 800733a:	d9dd      	bls.n	80072f8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800733c:	4b03      	ldr	r3, [pc, #12]	; (800734c <tcp_new_port+0x84>)
 800733e:	881b      	ldrh	r3, [r3, #0]
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	20000008 	.word	0x20000008
 8007350:	08017f30 	.word	0x08017f30

08007354 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08a      	sub	sp, #40	; 0x28
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	603b      	str	r3, [r7, #0]
 8007360:	4613      	mov	r3, r2
 8007362:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8007364:	2300      	movs	r3, #0
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d109      	bne.n	8007382 <tcp_connect+0x2e>
 800736e:	4b7d      	ldr	r3, [pc, #500]	; (8007564 <tcp_connect+0x210>)
 8007370:	f240 4239 	movw	r2, #1081	; 0x439
 8007374:	497c      	ldr	r1, [pc, #496]	; (8007568 <tcp_connect+0x214>)
 8007376:	487d      	ldr	r0, [pc, #500]	; (800756c <tcp_connect+0x218>)
 8007378:	f7fa fd97 	bl	8001eaa <lwip_win32_platform_diag>
 800737c:	f06f 030f 	mvn.w	r3, #15
 8007380:	e0ec      	b.n	800755c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d109      	bne.n	800739c <tcp_connect+0x48>
 8007388:	4b76      	ldr	r3, [pc, #472]	; (8007564 <tcp_connect+0x210>)
 800738a:	f240 423a 	movw	r2, #1082	; 0x43a
 800738e:	4978      	ldr	r1, [pc, #480]	; (8007570 <tcp_connect+0x21c>)
 8007390:	4876      	ldr	r0, [pc, #472]	; (800756c <tcp_connect+0x218>)
 8007392:	f7fa fd8a 	bl	8001eaa <lwip_win32_platform_diag>
 8007396:	f06f 030f 	mvn.w	r3, #15
 800739a:	e0df      	b.n	800755c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	7d1b      	ldrb	r3, [r3, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d009      	beq.n	80073b8 <tcp_connect+0x64>
 80073a4:	4b6f      	ldr	r3, [pc, #444]	; (8007564 <tcp_connect+0x210>)
 80073a6:	f240 423c 	movw	r2, #1084	; 0x43c
 80073aa:	4972      	ldr	r1, [pc, #456]	; (8007574 <tcp_connect+0x220>)
 80073ac:	486f      	ldr	r0, [pc, #444]	; (800756c <tcp_connect+0x218>)
 80073ae:	f7fa fd7c 	bl	8001eaa <lwip_win32_platform_diag>
 80073b2:	f06f 0309 	mvn.w	r3, #9
 80073b6:	e0d1      	b.n	800755c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <tcp_connect+0x70>
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	e000      	b.n	80073c6 <tcp_connect+0x72>
 80073c4:	2300      	movs	r3, #0
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	88fa      	ldrh	r2, [r7, #6]
 80073ce:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	7a1b      	ldrb	r3, [r3, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d006      	beq.n	80073e6 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	7a1b      	ldrb	r3, [r3, #8]
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fe fbd5 	bl	8005b8c <netif_get_by_index>
 80073e2:	6278      	str	r0, [r7, #36]	; 0x24
 80073e4:	e005      	b.n	80073f2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3304      	adds	r3, #4
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fc ff44 	bl	8004278 <ip4_route>
 80073f0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d102      	bne.n	80073fe <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 80073f8:	f06f 0303 	mvn.w	r3, #3
 80073fc:	e0ae      	b.n	800755c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <tcp_connect+0xb8>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d111      	bne.n	8007430 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <tcp_connect+0xc4>
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	3304      	adds	r3, #4
 8007416:	e000      	b.n	800741a <tcp_connect+0xc6>
 8007418:	2300      	movs	r3, #0
 800741a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d102      	bne.n	8007428 <tcp_connect+0xd4>
      return ERR_RTE;
 8007422:	f06f 0303 	mvn.w	r3, #3
 8007426:	e099      	b.n	800755c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8adb      	ldrh	r3, [r3, #22]
 8007434:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8adb      	ldrh	r3, [r3, #22]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10c      	bne.n	8007458 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800743e:	f7ff ff43 	bl	80072c8 <tcp_new_port>
 8007442:	4603      	mov	r3, r0
 8007444:	461a      	mov	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	8adb      	ldrh	r3, [r3, #22]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d102      	bne.n	8007458 <tcp_connect+0x104>
      return ERR_BUF;
 8007452:	f06f 0301 	mvn.w	r3, #1
 8007456:	e081      	b.n	800755c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f001 f8e3 	bl	8008624 <tcp_next_iss>
 800745e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	1e5a      	subs	r2, r3, #1
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	1e5a      	subs	r2, r3, #1
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	1e5a      	subs	r2, r3, #1
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800748a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80074a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80074ac:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3304      	adds	r3, #4
 80074b6:	461a      	mov	r2, r3
 80074b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074ba:	f001 f8dd 	bl	8008678 <tcp_eff_send_mss_netif>
 80074be:	4603      	mov	r3, r0
 80074c0:	461a      	mov	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80074d6:	2102      	movs	r1, #2
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f004 fd85 	bl	800bfe8 <tcp_enqueue_flags>
 80074de:	4603      	mov	r3, r0
 80074e0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80074e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d136      	bne.n	8007558 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2202      	movs	r2, #2
 80074ee:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80074f0:	8b7b      	ldrh	r3, [r7, #26]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d021      	beq.n	800753a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80074f6:	4b20      	ldr	r3, [pc, #128]	; (8007578 <tcp_connect+0x224>)
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d105      	bne.n	800750c <tcp_connect+0x1b8>
 8007500:	4b1d      	ldr	r3, [pc, #116]	; (8007578 <tcp_connect+0x224>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	4a1c      	ldr	r2, [pc, #112]	; (8007578 <tcp_connect+0x224>)
 8007508:	6013      	str	r3, [r2, #0]
 800750a:	e013      	b.n	8007534 <tcp_connect+0x1e0>
 800750c:	4b1a      	ldr	r3, [pc, #104]	; (8007578 <tcp_connect+0x224>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	623b      	str	r3, [r7, #32]
 8007512:	e00c      	b.n	800752e <tcp_connect+0x1da>
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	429a      	cmp	r2, r3
 800751c:	d104      	bne.n	8007528 <tcp_connect+0x1d4>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	68da      	ldr	r2, [r3, #12]
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	60da      	str	r2, [r3, #12]
 8007526:	e005      	b.n	8007534 <tcp_connect+0x1e0>
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	623b      	str	r3, [r7, #32]
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1ef      	bne.n	8007514 <tcp_connect+0x1c0>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800753a:	4b10      	ldr	r3, [pc, #64]	; (800757c <tcp_connect+0x228>)
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	60da      	str	r2, [r3, #12]
 8007542:	4a0e      	ldr	r2, [pc, #56]	; (800757c <tcp_connect+0x228>)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	f005 ff0c 	bl	800d364 <tcp_timer_needed>
 800754c:	4b0c      	ldr	r3, [pc, #48]	; (8007580 <tcp_connect+0x22c>)
 800754e:	2201      	movs	r2, #1
 8007550:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f004 fe54 	bl	800c200 <tcp_output>
  }
  return ret;
 8007558:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3728      	adds	r7, #40	; 0x28
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	080165c0 	.word	0x080165c0
 8007568:	0801688c 	.word	0x0801688c
 800756c:	080165f4 	.word	0x080165f4
 8007570:	080168a8 	.word	0x080168a8
 8007574:	080168c4 	.word	0x080168c4
 8007578:	200022d0 	.word	0x200022d0
 800757c:	200022c4 	.word	0x200022c4
 8007580:	200022c0 	.word	0x200022c0

08007584 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007584:	b5b0      	push	{r4, r5, r7, lr}
 8007586:	b090      	sub	sp, #64	; 0x40
 8007588:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007590:	4ba1      	ldr	r3, [pc, #644]	; (8007818 <tcp_slowtmr+0x294>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3301      	adds	r3, #1
 8007596:	4aa0      	ldr	r2, [pc, #640]	; (8007818 <tcp_slowtmr+0x294>)
 8007598:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800759a:	4ba0      	ldr	r3, [pc, #640]	; (800781c <tcp_slowtmr+0x298>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	3301      	adds	r3, #1
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	4b9e      	ldr	r3, [pc, #632]	; (800781c <tcp_slowtmr+0x298>)
 80075a4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80075aa:	4b9d      	ldr	r3, [pc, #628]	; (8007820 <tcp_slowtmr+0x29c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80075b0:	e2c3      	b.n	8007b3a <tcp_slowtmr+0x5b6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED", pcb->state != CLOSED);
 80075b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b4:	7d1b      	ldrb	r3, [r3, #20]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10b      	bne.n	80075d2 <tcp_slowtmr+0x4e>
 80075ba:	4b9a      	ldr	r3, [pc, #616]	; (8007824 <tcp_slowtmr+0x2a0>)
 80075bc:	f240 42c2 	movw	r2, #1218	; 0x4c2
 80075c0:	4999      	ldr	r1, [pc, #612]	; (8007828 <tcp_slowtmr+0x2a4>)
 80075c2:	489a      	ldr	r0, [pc, #616]	; (800782c <tcp_slowtmr+0x2a8>)
 80075c4:	f00c fb14 	bl	8013bf0 <iprintf>
 80075c8:	2000      	movs	r0, #0
 80075ca:	f00c fc13 	bl	8013df4 <fflush>
 80075ce:	f00c fb58 	bl	8013c82 <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN", pcb->state != LISTEN);
 80075d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d4:	7d1b      	ldrb	r3, [r3, #20]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d10b      	bne.n	80075f2 <tcp_slowtmr+0x6e>
 80075da:	4b92      	ldr	r3, [pc, #584]	; (8007824 <tcp_slowtmr+0x2a0>)
 80075dc:	f240 42c3 	movw	r2, #1219	; 0x4c3
 80075e0:	4993      	ldr	r1, [pc, #588]	; (8007830 <tcp_slowtmr+0x2ac>)
 80075e2:	4892      	ldr	r0, [pc, #584]	; (800782c <tcp_slowtmr+0x2a8>)
 80075e4:	f00c fb04 	bl	8013bf0 <iprintf>
 80075e8:	2000      	movs	r0, #0
 80075ea:	f00c fc03 	bl	8013df4 <fflush>
 80075ee:	f00c fb48 	bl	8013c82 <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80075f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f4:	7d1b      	ldrb	r3, [r3, #20]
 80075f6:	2b0a      	cmp	r3, #10
 80075f8:	d10b      	bne.n	8007612 <tcp_slowtmr+0x8e>
 80075fa:	4b8a      	ldr	r3, [pc, #552]	; (8007824 <tcp_slowtmr+0x2a0>)
 80075fc:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8007600:	498c      	ldr	r1, [pc, #560]	; (8007834 <tcp_slowtmr+0x2b0>)
 8007602:	488a      	ldr	r0, [pc, #552]	; (800782c <tcp_slowtmr+0x2a8>)
 8007604:	f00c faf4 	bl	8013bf0 <iprintf>
 8007608:	2000      	movs	r0, #0
 800760a:	f00c fbf3 	bl	8013df4 <fflush>
 800760e:	f00c fb38 	bl	8013c82 <abort>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007614:	7f9a      	ldrb	r2, [r3, #30]
 8007616:	4b81      	ldr	r3, [pc, #516]	; (800781c <tcp_slowtmr+0x298>)
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d105      	bne.n	800762a <tcp_slowtmr+0xa6>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800761e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007620:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007628:	e287      	b.n	8007b3a <tcp_slowtmr+0x5b6>
    }
    pcb->last_timer = tcp_timer_ctr;
 800762a:	4b7c      	ldr	r3, [pc, #496]	; (800781c <tcp_slowtmr+0x298>)
 800762c:	781a      	ldrb	r2, [r3, #0]
 800762e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007630:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007632:	2300      	movs	r3, #0
 8007634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007640:	7d1b      	ldrb	r3, [r3, #20]
 8007642:	2b02      	cmp	r3, #2
 8007644:	d10a      	bne.n	800765c <tcp_slowtmr+0xd8>
 8007646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007648:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800764c:	2b05      	cmp	r3, #5
 800764e:	d905      	bls.n	800765c <tcp_slowtmr+0xd8>
      ++pcb_remove;
 8007650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007654:	3301      	adds	r3, #1
 8007656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800765a:	e129      	b.n	80078b0 <tcp_slowtmr+0x32c>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800765c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007662:	2b0b      	cmp	r3, #11
 8007664:	d905      	bls.n	8007672 <tcp_slowtmr+0xee>
      ++pcb_remove;
 8007666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800766a:	3301      	adds	r3, #1
 800766c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007670:	e11e      	b.n	80078b0 <tcp_slowtmr+0x32c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007674:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007678:	2b00      	cmp	r3, #0
 800767a:	d07f      	beq.n	800777c <tcp_slowtmr+0x1f8>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800767c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00b      	beq.n	800769c <tcp_slowtmr+0x118>
 8007684:	4b67      	ldr	r3, [pc, #412]	; (8007824 <tcp_slowtmr+0x2a0>)
 8007686:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 800768a:	496b      	ldr	r1, [pc, #428]	; (8007838 <tcp_slowtmr+0x2b4>)
 800768c:	4867      	ldr	r0, [pc, #412]	; (800782c <tcp_slowtmr+0x2a8>)
 800768e:	f00c faaf 	bl	8013bf0 <iprintf>
 8007692:	2000      	movs	r0, #0
 8007694:	f00c fbae 	bl	8013df4 <fflush>
 8007698:	f00c faf3 	bl	8013c82 <abort>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800769c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10b      	bne.n	80076bc <tcp_slowtmr+0x138>
 80076a4:	4b5f      	ldr	r3, [pc, #380]	; (8007824 <tcp_slowtmr+0x2a0>)
 80076a6:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80076aa:	4964      	ldr	r1, [pc, #400]	; (800783c <tcp_slowtmr+0x2b8>)
 80076ac:	485f      	ldr	r0, [pc, #380]	; (800782c <tcp_slowtmr+0x2a8>)
 80076ae:	f00c fa9f 	bl	8013bf0 <iprintf>
 80076b2:	2000      	movs	r0, #0
 80076b4:	f00c fb9e 	bl	8013df4 <fflush>
 80076b8:	f00c fae3 	bl	8013c82 <abort>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80076bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076be:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80076c2:	2b0b      	cmp	r3, #11
 80076c4:	d905      	bls.n	80076d2 <tcp_slowtmr+0x14e>
          ++pcb_remove; /* max probes reached */
 80076c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076ca:	3301      	adds	r3, #1
 80076cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80076d0:	e0ee      	b.n	80078b0 <tcp_slowtmr+0x32c>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80076d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80076d8:	3b01      	subs	r3, #1
 80076da:	4a59      	ldr	r2, [pc, #356]	; (8007840 <tcp_slowtmr+0x2bc>)
 80076dc:	5cd3      	ldrb	r3, [r2, r3]
 80076de:	77fb      	strb	r3, [r7, #31]
          if (pcb->persist_cnt < backoff_cnt) {
 80076e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80076e6:	7ffa      	ldrb	r2, [r7, #31]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d907      	bls.n	80076fc <tcp_slowtmr+0x178>
            pcb->persist_cnt++;
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80076f2:	3301      	adds	r3, #1
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80076fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fe:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007702:	7ffa      	ldrb	r2, [r7, #31]
 8007704:	429a      	cmp	r2, r3
 8007706:	f200 80d3 	bhi.w	80078b0 <tcp_slowtmr+0x32c>
            int next_slot = 1; /* increment timer to next slot */
 800770a:	2301      	movs	r3, #1
 800770c:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800770e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007710:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007714:	2b00      	cmp	r3, #0
 8007716:	d108      	bne.n	800772a <tcp_slowtmr+0x1a6>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007718:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800771a:	f005 fd51 	bl	800d1c0 <tcp_zero_window_probe>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d014      	beq.n	800774e <tcp_slowtmr+0x1ca>
                next_slot = 0; /* try probe again with current slot */
 8007724:	2300      	movs	r3, #0
 8007726:	623b      	str	r3, [r7, #32]
 8007728:	e011      	b.n	800774e <tcp_slowtmr+0x1ca>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007730:	4619      	mov	r1, r3
 8007732:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007734:	f004 fa96 	bl	800bc64 <tcp_split_unsent_seg>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d107      	bne.n	800774e <tcp_slowtmr+0x1ca>
                if (tcp_output(pcb) == ERR_OK) {
 800773e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007740:	f004 fd5e 	bl	800c200 <tcp_output>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <tcp_slowtmr+0x1ca>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800774a:	2300      	movs	r3, #0
 800774c:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 80ad 	beq.w	80078b0 <tcp_slowtmr+0x32c>
              pcb->persist_cnt = 0;
 8007756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800775e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007760:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007764:	2b06      	cmp	r3, #6
 8007766:	f200 80a3 	bhi.w	80078b0 <tcp_slowtmr+0x32c>
                pcb->persist_backoff++;
 800776a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007770:	3301      	adds	r3, #1
 8007772:	b2da      	uxtb	r2, r3
 8007774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007776:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800777a:	e099      	b.n	80078b0 <tcp_slowtmr+0x32c>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800777c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007782:	2b00      	cmp	r3, #0
 8007784:	db0f      	blt.n	80077a6 <tcp_slowtmr+0x222>
 8007786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007788:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800778c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007790:	4293      	cmp	r3, r2
 8007792:	d008      	beq.n	80077a6 <tcp_slowtmr+0x222>
          ++pcb->rtime;
 8007794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007796:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800779a:	b29b      	uxth	r3, r3
 800779c:	3301      	adds	r3, #1
 800779e:	b29b      	uxth	r3, r3
 80077a0:	b21a      	sxth	r2, r3
 80077a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a4:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80077a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a8:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80077ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ae:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80077b2:	429a      	cmp	r2, r3
 80077b4:	db7c      	blt.n	80078b0 <tcp_slowtmr+0x32c>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80077b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077b8:	f005 f862 	bl	800c880 <tcp_rexmit_rto_prepare>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d007      	beq.n	80077d2 <tcp_slowtmr+0x24e>
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d172      	bne.n	80078b0 <tcp_slowtmr+0x32c>
 80077ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d06e      	beq.n	80078b0 <tcp_slowtmr+0x32c>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80077d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d4:	7d1b      	ldrb	r3, [r3, #20]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d03b      	beq.n	8007852 <tcp_slowtmr+0x2ce>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80077da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077e0:	2b0c      	cmp	r3, #12
 80077e2:	bf28      	it	cs
 80077e4:	230c      	movcs	r3, #12
 80077e6:	77bb      	strb	r3, [r7, #30]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80077e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80077ee:	10db      	asrs	r3, r3, #3
 80077f0:	b21b      	sxth	r3, r3
 80077f2:	461a      	mov	r2, r3
 80077f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80077fa:	4413      	add	r3, r2
 80077fc:	7fba      	ldrb	r2, [r7, #30]
 80077fe:	4911      	ldr	r1, [pc, #68]	; (8007844 <tcp_slowtmr+0x2c0>)
 8007800:	5c8a      	ldrb	r2, [r1, r2]
 8007802:	4093      	lsls	r3, r2
 8007804:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800780c:	4293      	cmp	r3, r2
 800780e:	dc1b      	bgt.n	8007848 <tcp_slowtmr+0x2c4>
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	b21a      	sxth	r2, r3
 8007814:	e01a      	b.n	800784c <tcp_slowtmr+0x2c8>
 8007816:	bf00      	nop
 8007818:	200022c8 	.word	0x200022c8
 800781c:	200006fe 	.word	0x200006fe
 8007820:	200022c4 	.word	0x200022c4
 8007824:	080165c0 	.word	0x080165c0
 8007828:	080168f4 	.word	0x080168f4
 800782c:	080165f4 	.word	0x080165f4
 8007830:	08016920 	.word	0x08016920
 8007834:	0801694c 	.word	0x0801694c
 8007838:	08016978 	.word	0x08016978
 800783c:	080169ac 	.word	0x080169ac
 8007840:	08017f28 	.word	0x08017f28
 8007844:	08017f18 	.word	0x08017f18
 8007848:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007854:	2200      	movs	r2, #0
 8007856:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800785e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007860:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007864:	4293      	cmp	r3, r2
 8007866:	bf28      	it	cs
 8007868:	4613      	movcs	r3, r2
 800786a:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 800786c:	8afb      	ldrh	r3, [r7, #22]
 800786e:	085b      	lsrs	r3, r3, #1
 8007870:	b29a      	uxth	r2, r3
 8007872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007874:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007882:	005b      	lsls	r3, r3, #1
 8007884:	b29b      	uxth	r3, r3
 8007886:	429a      	cmp	r2, r3
 8007888:	d206      	bcs.n	8007898 <tcp_slowtmr+0x314>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800788e:	005b      	lsls	r3, r3, #1
 8007890:	b29a      	uxth	r2, r3
 8007892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007894:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80078a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a4:	2200      	movs	r2, #0
 80078a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80078aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078ac:	f005 f866 	bl	800c97c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80078b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b2:	7d1b      	ldrb	r3, [r3, #20]
 80078b4:	2b06      	cmp	r3, #6
 80078b6:	d111      	bne.n	80078dc <tcp_slowtmr+0x358>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	8b5b      	ldrh	r3, [r3, #26]
 80078bc:	f003 0310 	and.w	r3, r3, #16
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00b      	beq.n	80078dc <tcp_slowtmr+0x358>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80078c4:	4ba2      	ldr	r3, [pc, #648]	; (8007b50 <tcp_slowtmr+0x5cc>)
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	2b28      	cmp	r3, #40	; 0x28
 80078d0:	d904      	bls.n	80078dc <tcp_slowtmr+0x358>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80078d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078d6:	3301      	adds	r3, #1
 80078d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80078dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078de:	7a5b      	ldrb	r3, [r3, #9]
 80078e0:	f003 0308 	and.w	r3, r3, #8
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d04c      	beq.n	8007982 <tcp_slowtmr+0x3fe>
        ((pcb->state == ESTABLISHED) ||
 80078e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ea:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	d003      	beq.n	80078f8 <tcp_slowtmr+0x374>
         (pcb->state == CLOSE_WAIT))) {
 80078f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80078f4:	2b07      	cmp	r3, #7
 80078f6:	d144      	bne.n	8007982 <tcp_slowtmr+0x3fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80078f8:	4b95      	ldr	r3, [pc, #596]	; (8007b50 <tcp_slowtmr+0x5cc>)
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007908:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800790c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007910:	4990      	ldr	r1, [pc, #576]	; (8007b54 <tcp_slowtmr+0x5d0>)
 8007912:	fba1 1303 	umull	r1, r3, r1, r3
 8007916:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007918:	429a      	cmp	r2, r3
 800791a:	d90a      	bls.n	8007932 <tcp_slowtmr+0x3ae>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800791c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007920:	3301      	adds	r3, #1
 8007922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007926:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800792a:	3301      	adds	r3, #1
 800792c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007930:	e027      	b.n	8007982 <tcp_slowtmr+0x3fe>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007932:	4b87      	ldr	r3, [pc, #540]	; (8007b50 <tcp_slowtmr+0x5cc>)
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800793c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007944:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007948:	4618      	mov	r0, r3
 800794a:	4b83      	ldr	r3, [pc, #524]	; (8007b58 <tcp_slowtmr+0x5d4>)
 800794c:	fb03 f300 	mul.w	r3, r3, r0
 8007950:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007952:	4980      	ldr	r1, [pc, #512]	; (8007b54 <tcp_slowtmr+0x5d0>)
 8007954:	fba1 1303 	umull	r1, r3, r1, r3
 8007958:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800795a:	429a      	cmp	r2, r3
 800795c:	d911      	bls.n	8007982 <tcp_slowtmr+0x3fe>
        err = tcp_keepalive(pcb);
 800795e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007960:	f005 fbe8 	bl	800d134 <tcp_keepalive>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800796a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800796e:	2b00      	cmp	r3, #0
 8007970:	d107      	bne.n	8007982 <tcp_slowtmr+0x3fe>
          pcb->keep_cnt_sent++;
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007978:	3301      	adds	r3, #1
 800797a:	b2da      	uxtb	r2, r3
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007986:	2b00      	cmp	r3, #0
 8007988:	d011      	beq.n	80079ae <tcp_slowtmr+0x42a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800798a:	4b71      	ldr	r3, [pc, #452]	; (8007b50 <tcp_slowtmr+0x5cc>)
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	1ad2      	subs	r2, r2, r3
 8007994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007996:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800799a:	4619      	mov	r1, r3
 800799c:	460b      	mov	r3, r1
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	440b      	add	r3, r1
 80079a2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d302      	bcc.n	80079ae <tcp_slowtmr+0x42a>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80079a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079aa:	f000 ff19 	bl	80087e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80079ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b0:	7d1b      	ldrb	r3, [r3, #20]
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d10b      	bne.n	80079ce <tcp_slowtmr+0x44a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80079b6:	4b66      	ldr	r3, [pc, #408]	; (8007b50 <tcp_slowtmr+0x5cc>)
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	2b28      	cmp	r3, #40	; 0x28
 80079c2:	d904      	bls.n	80079ce <tcp_slowtmr+0x44a>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80079c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079c8:	3301      	adds	r3, #1
 80079ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80079ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d0:	7d1b      	ldrb	r3, [r3, #20]
 80079d2:	2b09      	cmp	r3, #9
 80079d4:	d10b      	bne.n	80079ee <tcp_slowtmr+0x46a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80079d6:	4b5e      	ldr	r3, [pc, #376]	; (8007b50 <tcp_slowtmr+0x5cc>)
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2bf0      	cmp	r3, #240	; 0xf0
 80079e2:	d904      	bls.n	80079ee <tcp_slowtmr+0x46a>
        ++pcb_remove;
 80079e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079e8:	3301      	adds	r3, #1
 80079ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80079ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d06a      	beq.n	8007acc <tcp_slowtmr+0x548>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80079f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079fc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80079fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a00:	f000 fd14 	bl	800842c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d015      	beq.n	8007a36 <tcp_slowtmr+0x4b2>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007a0a:	4b54      	ldr	r3, [pc, #336]	; (8007b5c <tcp_slowtmr+0x5d8>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d10b      	bne.n	8007a2c <tcp_slowtmr+0x4a8>
 8007a14:	4b52      	ldr	r3, [pc, #328]	; (8007b60 <tcp_slowtmr+0x5dc>)
 8007a16:	f240 5271 	movw	r2, #1393	; 0x571
 8007a1a:	4952      	ldr	r1, [pc, #328]	; (8007b64 <tcp_slowtmr+0x5e0>)
 8007a1c:	4852      	ldr	r0, [pc, #328]	; (8007b68 <tcp_slowtmr+0x5e4>)
 8007a1e:	f00c f8e7 	bl	8013bf0 <iprintf>
 8007a22:	2000      	movs	r0, #0
 8007a24:	f00c f9e6 	bl	8013df4 <fflush>
 8007a28:	f00c f92b 	bl	8013c82 <abort>
        prev->next = pcb->next;
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	68da      	ldr	r2, [r3, #12]
 8007a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a32:	60da      	str	r2, [r3, #12]
 8007a34:	e014      	b.n	8007a60 <tcp_slowtmr+0x4dc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007a36:	4b49      	ldr	r3, [pc, #292]	; (8007b5c <tcp_slowtmr+0x5d8>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d00b      	beq.n	8007a58 <tcp_slowtmr+0x4d4>
 8007a40:	4b47      	ldr	r3, [pc, #284]	; (8007b60 <tcp_slowtmr+0x5dc>)
 8007a42:	f240 5275 	movw	r2, #1397	; 0x575
 8007a46:	4949      	ldr	r1, [pc, #292]	; (8007b6c <tcp_slowtmr+0x5e8>)
 8007a48:	4847      	ldr	r0, [pc, #284]	; (8007b68 <tcp_slowtmr+0x5e4>)
 8007a4a:	f00c f8d1 	bl	8013bf0 <iprintf>
 8007a4e:	2000      	movs	r0, #0
 8007a50:	f00c f9d0 	bl	8013df4 <fflush>
 8007a54:	f00c f915 	bl	8013c82 <abort>
        tcp_active_pcbs = pcb->next;
 8007a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	4a3f      	ldr	r2, [pc, #252]	; (8007b5c <tcp_slowtmr+0x5d8>)
 8007a5e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007a60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d013      	beq.n	8007a90 <tcp_slowtmr+0x50c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007a70:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a74:	3304      	adds	r3, #4
 8007a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a78:	8ad2      	ldrh	r2, [r2, #22]
 8007a7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a7c:	8b09      	ldrh	r1, [r1, #24]
 8007a7e:	9102      	str	r1, [sp, #8]
 8007a80:	9201      	str	r2, [sp, #4]
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	462b      	mov	r3, r5
 8007a86:	4622      	mov	r2, r4
 8007a88:	4601      	mov	r1, r0
 8007a8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a8c:	f005 faa0 	bl	800cfd0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	7d1b      	ldrb	r3, [r3, #20]
 8007a9a:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 8007aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7fe ff9e 	bl	80069e8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007aac:	4b30      	ldr	r3, [pc, #192]	; (8007b70 <tcp_slowtmr+0x5ec>)
 8007aae:	2200      	movs	r2, #0
 8007ab0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d004      	beq.n	8007ac2 <tcp_slowtmr+0x53e>
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	f06f 010c 	mvn.w	r1, #12
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007ac2:	4b2b      	ldr	r3, [pc, #172]	; (8007b70 <tcp_slowtmr+0x5ec>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d037      	beq.n	8007b3a <tcp_slowtmr+0x5b6>
        goto tcp_slowtmr_start;
 8007aca:	e56c      	b.n	80075a6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ace:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad8:	7f1b      	ldrb	r3, [r3, #28]
 8007ada:	3301      	adds	r3, #1
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae4:	7f1a      	ldrb	r2, [r3, #28]
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	7f5b      	ldrb	r3, [r3, #29]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d325      	bcc.n	8007b3a <tcp_slowtmr+0x5b6>
        prev->polltmr = 0;
 8007aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af0:	2200      	movs	r2, #0
 8007af2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007af4:	4b1e      	ldr	r3, [pc, #120]	; (8007b70 <tcp_slowtmr+0x5ec>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00b      	beq.n	8007b1c <tcp_slowtmr+0x598>
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b0c:	6912      	ldr	r2, [r2, #16]
 8007b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b10:	4610      	mov	r0, r2
 8007b12:	4798      	blx	r3
 8007b14:	4603      	mov	r3, r0
 8007b16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007b1a:	e002      	b.n	8007b22 <tcp_slowtmr+0x59e>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007b22:	4b13      	ldr	r3, [pc, #76]	; (8007b70 <tcp_slowtmr+0x5ec>)
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d000      	beq.n	8007b2c <tcp_slowtmr+0x5a8>
          goto tcp_slowtmr_start;
 8007b2a:	e53c      	b.n	80075a6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007b2c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d102      	bne.n	8007b3a <tcp_slowtmr+0x5b6>
          tcp_output(prev);
 8007b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b36:	f004 fb63 	bl	800c200 <tcp_output>
  while (pcb != NULL) {
 8007b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f47f ad38 	bne.w	80075b2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007b46:	4b0b      	ldr	r3, [pc, #44]	; (8007b74 <tcp_slowtmr+0x5f0>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007b4c:	e076      	b.n	8007c3c <tcp_slowtmr+0x6b8>
 8007b4e:	bf00      	nop
 8007b50:	200022c8 	.word	0x200022c8
 8007b54:	10624dd3 	.word	0x10624dd3
 8007b58:	000124f8 	.word	0x000124f8
 8007b5c:	200022c4 	.word	0x200022c4
 8007b60:	080165c0 	.word	0x080165c0
 8007b64:	080169e4 	.word	0x080169e4
 8007b68:	080165f4 	.word	0x080165f4
 8007b6c:	08016a10 	.word	0x08016a10
 8007b70:	200022c0 	.word	0x200022c0
 8007b74:	200022d4 	.word	0x200022d4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7a:	7d1b      	ldrb	r3, [r3, #20]
 8007b7c:	2b0a      	cmp	r3, #10
 8007b7e:	d00b      	beq.n	8007b98 <tcp_slowtmr+0x614>
 8007b80:	4b32      	ldr	r3, [pc, #200]	; (8007c4c <tcp_slowtmr+0x6c8>)
 8007b82:	f240 52a5 	movw	r2, #1445	; 0x5a5
 8007b86:	4932      	ldr	r1, [pc, #200]	; (8007c50 <tcp_slowtmr+0x6cc>)
 8007b88:	4832      	ldr	r0, [pc, #200]	; (8007c54 <tcp_slowtmr+0x6d0>)
 8007b8a:	f00c f831 	bl	8013bf0 <iprintf>
 8007b8e:	2000      	movs	r0, #0
 8007b90:	f00c f930 	bl	8013df4 <fflush>
 8007b94:	f00c f875 	bl	8013c82 <abort>
    pcb_remove = 0;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007b9e:	4b2e      	ldr	r3, [pc, #184]	; (8007c58 <tcp_slowtmr+0x6d4>)
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	2bf0      	cmp	r3, #240	; 0xf0
 8007baa:	d904      	bls.n	8007bb6 <tcp_slowtmr+0x632>
      ++pcb_remove;
 8007bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d039      	beq.n	8007c32 <tcp_slowtmr+0x6ae>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007bbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bc0:	f000 fc34 	bl	800842c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d015      	beq.n	8007bf6 <tcp_slowtmr+0x672>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007bca:	4b24      	ldr	r3, [pc, #144]	; (8007c5c <tcp_slowtmr+0x6d8>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d10b      	bne.n	8007bec <tcp_slowtmr+0x668>
 8007bd4:	4b1d      	ldr	r3, [pc, #116]	; (8007c4c <tcp_slowtmr+0x6c8>)
 8007bd6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007bda:	4921      	ldr	r1, [pc, #132]	; (8007c60 <tcp_slowtmr+0x6dc>)
 8007bdc:	481d      	ldr	r0, [pc, #116]	; (8007c54 <tcp_slowtmr+0x6d0>)
 8007bde:	f00c f807 	bl	8013bf0 <iprintf>
 8007be2:	2000      	movs	r0, #0
 8007be4:	f00c f906 	bl	8013df4 <fflush>
 8007be8:	f00c f84b 	bl	8013c82 <abort>
        prev->next = pcb->next;
 8007bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf2:	60da      	str	r2, [r3, #12]
 8007bf4:	e014      	b.n	8007c20 <tcp_slowtmr+0x69c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007bf6:	4b19      	ldr	r3, [pc, #100]	; (8007c5c <tcp_slowtmr+0x6d8>)
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d00b      	beq.n	8007c18 <tcp_slowtmr+0x694>
 8007c00:	4b12      	ldr	r3, [pc, #72]	; (8007c4c <tcp_slowtmr+0x6c8>)
 8007c02:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8007c06:	4917      	ldr	r1, [pc, #92]	; (8007c64 <tcp_slowtmr+0x6e0>)
 8007c08:	4812      	ldr	r0, [pc, #72]	; (8007c54 <tcp_slowtmr+0x6d0>)
 8007c0a:	f00b fff1 	bl	8013bf0 <iprintf>
 8007c0e:	2000      	movs	r0, #0
 8007c10:	f00c f8f0 	bl	8013df4 <fflush>
 8007c14:	f00c f835 	bl	8013c82 <abort>
        tcp_tw_pcbs = pcb->next;
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	4a0f      	ldr	r2, [pc, #60]	; (8007c5c <tcp_slowtmr+0x6d8>)
 8007c1e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c22:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007c2a:	6838      	ldr	r0, [r7, #0]
 8007c2c:	f7fe fedc 	bl	80069e8 <tcp_free>
 8007c30:	e004      	b.n	8007c3c <tcp_slowtmr+0x6b8>
    } else {
      prev = pcb;
 8007c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c34:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d19a      	bne.n	8007b78 <tcp_slowtmr+0x5f4>
    }
  }
}
 8007c42:	bf00      	nop
 8007c44:	3730      	adds	r7, #48	; 0x30
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bdb0      	pop	{r4, r5, r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	080165c0 	.word	0x080165c0
 8007c50:	08016a3c 	.word	0x08016a3c
 8007c54:	080165f4 	.word	0x080165f4
 8007c58:	200022c8 	.word	0x200022c8
 8007c5c:	200022d4 	.word	0x200022d4
 8007c60:	08016a6c 	.word	0x08016a6c
 8007c64:	08016a94 	.word	0x08016a94

08007c68 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007c6e:	4b2d      	ldr	r3, [pc, #180]	; (8007d24 <tcp_fasttmr+0xbc>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	3301      	adds	r3, #1
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	4b2b      	ldr	r3, [pc, #172]	; (8007d24 <tcp_fasttmr+0xbc>)
 8007c78:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007c7a:	4b2b      	ldr	r3, [pc, #172]	; (8007d28 <tcp_fasttmr+0xc0>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007c80:	e048      	b.n	8007d14 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	7f9a      	ldrb	r2, [r3, #30]
 8007c86:	4b27      	ldr	r3, [pc, #156]	; (8007d24 <tcp_fasttmr+0xbc>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d03f      	beq.n	8007d0e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007c8e:	4b25      	ldr	r3, [pc, #148]	; (8007d24 <tcp_fasttmr+0xbc>)
 8007c90:	781a      	ldrb	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	8b5b      	ldrh	r3, [r3, #26]
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d010      	beq.n	8007cc4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	8b5b      	ldrh	r3, [r3, #26]
 8007ca6:	f043 0302 	orr.w	r3, r3, #2
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f004 faa5 	bl	800c200 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	8b5b      	ldrh	r3, [r3, #26]
 8007cba:	f023 0303 	bic.w	r3, r3, #3
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	8b5b      	ldrh	r3, [r3, #26]
 8007cc8:	f003 0308 	and.w	r3, r3, #8
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d009      	beq.n	8007ce4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	8b5b      	ldrh	r3, [r3, #26]
 8007cd4:	f023 0308 	bic.w	r3, r3, #8
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7ff f838 	bl	8006d54 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00a      	beq.n	8007d08 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007cf2:	4b0e      	ldr	r3, [pc, #56]	; (8007d2c <tcp_fasttmr+0xc4>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f819 	bl	8007d30 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007cfe:	4b0b      	ldr	r3, [pc, #44]	; (8007d2c <tcp_fasttmr+0xc4>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d000      	beq.n	8007d08 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007d06:	e7b8      	b.n	8007c7a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	607b      	str	r3, [r7, #4]
 8007d0c:	e002      	b.n	8007d14 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1b3      	bne.n	8007c82 <tcp_fasttmr+0x1a>
    }
  }
}
 8007d1a:	bf00      	nop
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	200006fe 	.word	0x200006fe
 8007d28:	200022c4 	.word	0x200022c4
 8007d2c:	200022c0 	.word	0x200022c0

08007d30 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007d30:	b590      	push	{r4, r7, lr}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d109      	bne.n	8007d52 <tcp_process_refused_data+0x22>
 8007d3e:	4b38      	ldr	r3, [pc, #224]	; (8007e20 <tcp_process_refused_data+0xf0>)
 8007d40:	f240 620d 	movw	r2, #1549	; 0x60d
 8007d44:	4937      	ldr	r1, [pc, #220]	; (8007e24 <tcp_process_refused_data+0xf4>)
 8007d46:	4838      	ldr	r0, [pc, #224]	; (8007e28 <tcp_process_refused_data+0xf8>)
 8007d48:	f7fa f8af 	bl	8001eaa <lwip_win32_platform_diag>
 8007d4c:	f06f 030f 	mvn.w	r3, #15
 8007d50:	e061      	b.n	8007e16 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d56:	7b5b      	ldrb	r3, [r3, #13]
 8007d58:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d5e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00b      	beq.n	8007d88 <tcp_process_refused_data+0x58>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6918      	ldr	r0, [r3, #16]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	6879      	ldr	r1, [r7, #4]
 8007d80:	47a0      	blx	r4
 8007d82:	4603      	mov	r3, r0
 8007d84:	73fb      	strb	r3, [r7, #15]
 8007d86:	e007      	b.n	8007d98 <tcp_process_refused_data+0x68>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	6879      	ldr	r1, [r7, #4]
 8007d8e:	2000      	movs	r0, #0
 8007d90:	f000 f8aa 	bl	8007ee8 <tcp_recv_null>
 8007d94:	4603      	mov	r3, r0
 8007d96:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d12b      	bne.n	8007df8 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
 8007da2:	f003 0320 	and.w	r3, r3, #32
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d034      	beq.n	8007e14 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dae:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d005      	beq.n	8007dc2 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dba:	3301      	adds	r3, #1
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00b      	beq.n	8007de4 <tcp_process_refused_data+0xb4>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6918      	ldr	r0, [r3, #16]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	2200      	movs	r2, #0
 8007dda:	6879      	ldr	r1, [r7, #4]
 8007ddc:	47a0      	blx	r4
 8007dde:	4603      	mov	r3, r0
 8007de0:	73fb      	strb	r3, [r7, #15]
 8007de2:	e001      	b.n	8007de8 <tcp_process_refused_data+0xb8>
 8007de4:	2300      	movs	r3, #0
 8007de6:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dec:	f113 0f0d 	cmn.w	r3, #13
 8007df0:	d110      	bne.n	8007e14 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8007df2:	f06f 030c 	mvn.w	r3, #12
 8007df6:	e00e      	b.n	8007e16 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8007df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dfc:	f113 0f0d 	cmn.w	r3, #13
 8007e00:	d102      	bne.n	8007e08 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007e02:	f06f 030c 	mvn.w	r3, #12
 8007e06:	e006      	b.n	8007e16 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007e0e:	f06f 0304 	mvn.w	r3, #4
 8007e12:	e000      	b.n	8007e16 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd90      	pop	{r4, r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	080165c0 	.word	0x080165c0
 8007e24:	08016abc 	.word	0x08016abc
 8007e28:	080165f4 	.word	0x080165f4

08007e2c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007e34:	e007      	b.n	8007e46 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f809 	bl	8007e54 <tcp_seg_free>
    seg = next;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1f4      	bne.n	8007e36 <tcp_segs_free+0xa>
  }
}
 8007e4c:	bf00      	nop
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00c      	beq.n	8007e7c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d004      	beq.n	8007e74 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe f9a0 	bl	80061b4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007e74:	6879      	ldr	r1, [r7, #4]
 8007e76:	2002      	movs	r0, #2
 8007e78:	f7fd fbc6 	bl	8005608 <memp_free>
  }
}
 8007e7c:	bf00      	nop
 8007e7e:	3708      	adds	r7, #8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10b      	bne.n	8007eaa <tcp_seg_copy+0x26>
 8007e92:	4b12      	ldr	r3, [pc, #72]	; (8007edc <tcp_seg_copy+0x58>)
 8007e94:	f240 6286 	movw	r2, #1670	; 0x686
 8007e98:	4911      	ldr	r1, [pc, #68]	; (8007ee0 <tcp_seg_copy+0x5c>)
 8007e9a:	4812      	ldr	r0, [pc, #72]	; (8007ee4 <tcp_seg_copy+0x60>)
 8007e9c:	f00b fea8 	bl	8013bf0 <iprintf>
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	f00b ffa7 	bl	8013df4 <fflush>
 8007ea6:	f00b feec 	bl	8013c82 <abort>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007eaa:	2002      	movs	r0, #2
 8007eac:	f7fd fb3c 	bl	8005528 <memp_malloc>
 8007eb0:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <tcp_seg_copy+0x38>
    return NULL;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	e00a      	b.n	8007ed2 <tcp_seg_copy+0x4e>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007ebc:	2214      	movs	r2, #20
 8007ebe:	6879      	ldr	r1, [r7, #4]
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f00c f897 	bl	8013ff4 <memcpy>
  pbuf_ref(cseg->p);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe fa0c 	bl	80062e8 <pbuf_ref>
  return cseg;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	080165c0 	.word	0x080165c0
 8007ee0:	08016b00 	.word	0x08016b00
 8007ee4:	080165f4 	.word	0x080165f4

08007ee8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d109      	bne.n	8007f10 <tcp_recv_null+0x28>
 8007efc:	4b12      	ldr	r3, [pc, #72]	; (8007f48 <tcp_recv_null+0x60>)
 8007efe:	f240 629c 	movw	r2, #1692	; 0x69c
 8007f02:	4912      	ldr	r1, [pc, #72]	; (8007f4c <tcp_recv_null+0x64>)
 8007f04:	4812      	ldr	r0, [pc, #72]	; (8007f50 <tcp_recv_null+0x68>)
 8007f06:	f7f9 ffd0 	bl	8001eaa <lwip_win32_platform_diag>
 8007f0a:	f06f 030f 	mvn.w	r3, #15
 8007f0e:	e016      	b.n	8007f3e <tcp_recv_null+0x56>

  if (p != NULL) {
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d009      	beq.n	8007f2a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	891b      	ldrh	r3, [r3, #8]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	68b8      	ldr	r0, [r7, #8]
 8007f1e:	f7ff f97d 	bl	800721c <tcp_recved>
    pbuf_free(p);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7fe f946 	bl	80061b4 <pbuf_free>
 8007f28:	e008      	b.n	8007f3c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007f2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d104      	bne.n	8007f3c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007f32:	68b8      	ldr	r0, [r7, #8]
 8007f34:	f7fe ff7a 	bl	8006e2c <tcp_close>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	e000      	b.n	8007f3e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	080165c0 	.word	0x080165c0
 8007f4c:	08016b1c 	.word	0x08016b1c
 8007f50:	080165f4 	.word	0x080165f4

08007f54 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	db01      	blt.n	8007f6a <tcp_kill_prio+0x16>
 8007f66:	79fb      	ldrb	r3, [r7, #7]
 8007f68:	e000      	b.n	8007f6c <tcp_kill_prio+0x18>
 8007f6a:	237f      	movs	r3, #127	; 0x7f
 8007f6c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007f6e:	7afb      	ldrb	r3, [r7, #11]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d034      	beq.n	8007fde <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007f74:	7afb      	ldrb	r3, [r7, #11]
 8007f76:	3b01      	subs	r3, #1
 8007f78:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f82:	4b19      	ldr	r3, [pc, #100]	; (8007fe8 <tcp_kill_prio+0x94>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	617b      	str	r3, [r7, #20]
 8007f88:	e01f      	b.n	8007fca <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	7d5b      	ldrb	r3, [r3, #21]
 8007f8e:	7afa      	ldrb	r2, [r7, #11]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d80c      	bhi.n	8007fae <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007f98:	7afa      	ldrb	r2, [r7, #11]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d112      	bne.n	8007fc4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007f9e:	4b13      	ldr	r3, [pc, #76]	; (8007fec <tcp_kill_prio+0x98>)
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	1ad2      	subs	r2, r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d30a      	bcc.n	8007fc4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007fae:	4b0f      	ldr	r3, [pc, #60]	; (8007fec <tcp_kill_prio+0x98>)
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	7d5b      	ldrb	r3, [r3, #21]
 8007fc2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	617b      	str	r3, [r7, #20]
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1dc      	bne.n	8007f8a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d004      	beq.n	8007fe0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007fd6:	6938      	ldr	r0, [r7, #16]
 8007fd8:	f7ff f816 	bl	8007008 <tcp_abort>
 8007fdc:	e000      	b.n	8007fe0 <tcp_kill_prio+0x8c>
    return;
 8007fde:	bf00      	nop
  }
}
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	200022c4 	.word	0x200022c4
 8007fec:	200022c8 	.word	0x200022c8

08007ff0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007ffa:	79fb      	ldrb	r3, [r7, #7]
 8007ffc:	2b08      	cmp	r3, #8
 8007ffe:	d00e      	beq.n	800801e <tcp_kill_state+0x2e>
 8008000:	79fb      	ldrb	r3, [r7, #7]
 8008002:	2b09      	cmp	r3, #9
 8008004:	d00b      	beq.n	800801e <tcp_kill_state+0x2e>
 8008006:	4b1d      	ldr	r3, [pc, #116]	; (800807c <tcp_kill_state+0x8c>)
 8008008:	f240 62e1 	movw	r2, #1761	; 0x6e1
 800800c:	491c      	ldr	r1, [pc, #112]	; (8008080 <tcp_kill_state+0x90>)
 800800e:	481d      	ldr	r0, [pc, #116]	; (8008084 <tcp_kill_state+0x94>)
 8008010:	f00b fdee 	bl	8013bf0 <iprintf>
 8008014:	2000      	movs	r0, #0
 8008016:	f00b feed 	bl	8013df4 <fflush>
 800801a:	f00b fe32 	bl	8013c82 <abort>

  inactivity = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008022:	2300      	movs	r3, #0
 8008024:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008026:	4b18      	ldr	r3, [pc, #96]	; (8008088 <tcp_kill_state+0x98>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	617b      	str	r3, [r7, #20]
 800802c:	e017      	b.n	800805e <tcp_kill_state+0x6e>
    if (pcb->state == state) {
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	7d1b      	ldrb	r3, [r3, #20]
 8008032:	79fa      	ldrb	r2, [r7, #7]
 8008034:	429a      	cmp	r2, r3
 8008036:	d10f      	bne.n	8008058 <tcp_kill_state+0x68>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008038:	4b14      	ldr	r3, [pc, #80]	; (800808c <tcp_kill_state+0x9c>)
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	1ad2      	subs	r2, r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	429a      	cmp	r2, r3
 8008046:	d307      	bcc.n	8008058 <tcp_kill_state+0x68>
        inactivity = tcp_ticks - pcb->tmr;
 8008048:	4b10      	ldr	r3, [pc, #64]	; (800808c <tcp_kill_state+0x9c>)
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	617b      	str	r3, [r7, #20]
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1e4      	bne.n	800802e <tcp_kill_state+0x3e>
      }
    }
  }
  if (inactive != NULL) {
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <tcp_kill_state+0x82>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800806a:	2100      	movs	r1, #0
 800806c:	6938      	ldr	r0, [r7, #16]
 800806e:	f7fe ff09 	bl	8006e84 <tcp_abandon>
  }
}
 8008072:	bf00      	nop
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	080165c0 	.word	0x080165c0
 8008080:	08016b38 	.word	0x08016b38
 8008084:	080165f4 	.word	0x080165f4
 8008088:	200022c4 	.word	0x200022c4
 800808c:	200022c8 	.word	0x200022c8

08008090 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800809a:	2300      	movs	r3, #0
 800809c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800809e:	4b12      	ldr	r3, [pc, #72]	; (80080e8 <tcp_kill_timewait+0x58>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	60fb      	str	r3, [r7, #12]
 80080a4:	e012      	b.n	80080cc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80080a6:	4b11      	ldr	r3, [pc, #68]	; (80080ec <tcp_kill_timewait+0x5c>)
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	1ad2      	subs	r2, r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d307      	bcc.n	80080c6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80080b6:	4b0d      	ldr	r3, [pc, #52]	; (80080ec <tcp_kill_timewait+0x5c>)
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1e9      	bne.n	80080a6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d002      	beq.n	80080de <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80080d8:	68b8      	ldr	r0, [r7, #8]
 80080da:	f7fe ff95 	bl	8007008 <tcp_abort>
  }
}
 80080de:	bf00      	nop
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	200022d4 	.word	0x200022d4
 80080ec:	200022c8 	.word	0x200022c8

080080f0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80080f6:	4b10      	ldr	r3, [pc, #64]	; (8008138 <tcp_handle_closepend+0x48>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80080fc:	e014      	b.n	8008128 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	8b5b      	ldrh	r3, [r3, #26]
 8008108:	f003 0308 	and.w	r3, r3, #8
 800810c:	2b00      	cmp	r3, #0
 800810e:	d009      	beq.n	8008124 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	8b5b      	ldrh	r3, [r3, #26]
 8008114:	f023 0308 	bic.w	r3, r3, #8
 8008118:	b29a      	uxth	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7fe fe18 	bl	8006d54 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1e7      	bne.n	80080fe <tcp_handle_closepend+0xe>
  }
}
 800812e:	bf00      	nop
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	200022c4 	.word	0x200022c4

0800813c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	4603      	mov	r3, r0
 8008144:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008146:	2000      	movs	r0, #0
 8008148:	f7fd f9ee 	bl	8005528 <memp_malloc>
 800814c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d14a      	bne.n	80081ea <tcp_alloc+0xae>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008154:	f7ff ffcc 	bl	80080f0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008158:	f7ff ff9a 	bl	8008090 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800815c:	2000      	movs	r0, #0
 800815e:	f7fd f9e3 	bl	8005528 <memp_malloc>
 8008162:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d136      	bne.n	80081d8 <tcp_alloc+0x9c>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800816a:	2009      	movs	r0, #9
 800816c:	f7ff ff40 	bl	8007ff0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008170:	2000      	movs	r0, #0
 8008172:	f7fd f9d9 	bl	8005528 <memp_malloc>
 8008176:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d123      	bne.n	80081c6 <tcp_alloc+0x8a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800817e:	2008      	movs	r0, #8
 8008180:	f7ff ff36 	bl	8007ff0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008184:	2000      	movs	r0, #0
 8008186:	f7fd f9cf 	bl	8005528 <memp_malloc>
 800818a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d110      	bne.n	80081b4 <tcp_alloc+0x78>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008192:	79fb      	ldrb	r3, [r7, #7]
 8008194:	4618      	mov	r0, r3
 8008196:	f7ff fedd 	bl	8007f54 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800819a:	2000      	movs	r0, #0
 800819c:	f7fd f9c4 	bl	8005528 <memp_malloc>
 80081a0:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d005      	beq.n	80081b4 <tcp_alloc+0x78>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80081a8:	4b34      	ldr	r3, [pc, #208]	; (800827c <tcp_alloc+0x140>)
 80081aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ac:	889a      	ldrh	r2, [r3, #4]
 80081ae:	3a01      	subs	r2, #1
 80081b0:	b292      	uxth	r2, r2
 80081b2:	809a      	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d005      	beq.n	80081c6 <tcp_alloc+0x8a>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80081ba:	4b30      	ldr	r3, [pc, #192]	; (800827c <tcp_alloc+0x140>)
 80081bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081be:	889a      	ldrh	r2, [r3, #4]
 80081c0:	3a01      	subs	r2, #1
 80081c2:	b292      	uxth	r2, r2
 80081c4:	809a      	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d005      	beq.n	80081d8 <tcp_alloc+0x9c>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80081cc:	4b2b      	ldr	r3, [pc, #172]	; (800827c <tcp_alloc+0x140>)
 80081ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d0:	889a      	ldrh	r2, [r3, #4]
 80081d2:	3a01      	subs	r2, #1
 80081d4:	b292      	uxth	r2, r2
 80081d6:	809a      	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d005      	beq.n	80081ea <tcp_alloc+0xae>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80081de:	4b27      	ldr	r3, [pc, #156]	; (800827c <tcp_alloc+0x140>)
 80081e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e2:	889a      	ldrh	r2, [r3, #4]
 80081e4:	3a01      	subs	r2, #1
 80081e6:	b292      	uxth	r2, r2
 80081e8:	809a      	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d03f      	beq.n	8008270 <tcp_alloc+0x134>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80081f0:	229c      	movs	r2, #156	; 0x9c
 80081f2:	2100      	movs	r1, #0
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f00b ff22 	bl	801403e <memset>
    pcb->prio = prio;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	79fa      	ldrb	r2, [r7, #7]
 80081fe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f640 3268 	movw	r2, #2920	; 0xb68
 8008206:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8008210:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	22ff      	movs	r2, #255	; 0xff
 800821e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008226:	865a      	strh	r2, [r3, #50]	; 0x32
    /* Set initial TCP's retransmission timeout to 3000 ms by default.
       This value could be configured in lwipopts */
    pcb->rto = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2206      	movs	r2, #6
 800822c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2206      	movs	r2, #6
 8008234:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800823c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2201      	movs	r2, #1
 8008242:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008246:	4b0e      	ldr	r3, [pc, #56]	; (8008280 <tcp_alloc+0x144>)
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800824e:	4b0d      	ldr	r3, [pc, #52]	; (8008284 <tcp_alloc+0x148>)
 8008250:	781a      	ldrb	r2, [r3, #0]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f640 3268 	movw	r2, #2920	; 0xb68
 800825c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4a09      	ldr	r2, [pc, #36]	; (8008288 <tcp_alloc+0x14c>)
 8008264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4a08      	ldr	r2, [pc, #32]	; (800828c <tcp_alloc+0x150>)
 800826c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
    pcb_tci_init(pcb);
  }
  return pcb;
 8008270:	68fb      	ldr	r3, [r7, #12]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	2000221c 	.word	0x2000221c
 8008280:	200022c8 	.word	0x200022c8
 8008284:	200006fe 	.word	0x200006fe
 8008288:	08007ee9 	.word	0x08007ee9
 800828c:	006ddd00 	.word	0x006ddd00

08008290 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8008294:	2040      	movs	r0, #64	; 0x40
 8008296:	f7ff ff51 	bl	800813c <tcp_alloc>
 800829a:	4603      	mov	r3, r0
}
 800829c:	4618      	mov	r0, r3
 800829e:	bd80      	pop	{r7, pc}

080082a0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	4603      	mov	r3, r0
 80082a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80082aa:	2040      	movs	r0, #64	; 0x40
 80082ac:	f7ff ff46 	bl	800813c <tcp_alloc>
 80082b0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80082b2:	68fb      	ldr	r3, [r7, #12]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	683a      	ldr	r2, [r7, #0]
 80082d0:	611a      	str	r2, [r3, #16]
  }
}
 80082d2:	bf00      	nop
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
	...

080082e0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d013      	beq.n	8008318 <tcp_recv+0x38>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	7d1b      	ldrb	r3, [r3, #20]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d10b      	bne.n	8008310 <tcp_recv+0x30>
 80082f8:	4b09      	ldr	r3, [pc, #36]	; (8008320 <tcp_recv+0x40>)
 80082fa:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 80082fe:	4909      	ldr	r1, [pc, #36]	; (8008324 <tcp_recv+0x44>)
 8008300:	4809      	ldr	r0, [pc, #36]	; (8008328 <tcp_recv+0x48>)
 8008302:	f00b fc75 	bl	8013bf0 <iprintf>
 8008306:	2000      	movs	r0, #0
 8008308:	f00b fd74 	bl	8013df4 <fflush>
 800830c:	f00b fcb9 	bl	8013c82 <abort>
    pcb->recv = recv;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8008318:	bf00      	nop
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	080165c0 	.word	0x080165c0
 8008324:	08016b48 	.word	0x08016b48
 8008328:	080165f4 	.word	0x080165f4

0800832c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d013      	beq.n	8008364 <tcp_sent+0x38>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	7d1b      	ldrb	r3, [r3, #20]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d10b      	bne.n	800835c <tcp_sent+0x30>
 8008344:	4b09      	ldr	r3, [pc, #36]	; (800836c <tcp_sent+0x40>)
 8008346:	f240 72fc 	movw	r2, #2044	; 0x7fc
 800834a:	4909      	ldr	r1, [pc, #36]	; (8008370 <tcp_sent+0x44>)
 800834c:	4809      	ldr	r0, [pc, #36]	; (8008374 <tcp_sent+0x48>)
 800834e:	f00b fc4f 	bl	8013bf0 <iprintf>
 8008352:	2000      	movs	r0, #0
 8008354:	f00b fd4e 	bl	8013df4 <fflush>
 8008358:	f00b fc93 	bl	8013c82 <abort>
    pcb->sent = sent;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8008364:	bf00      	nop
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	080165c0 	.word	0x080165c0
 8008370:	08016b70 	.word	0x08016b70
 8008374:	080165f4 	.word	0x080165f4

08008378 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d013      	beq.n	80083b0 <tcp_err+0x38>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	7d1b      	ldrb	r3, [r3, #20]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d10b      	bne.n	80083a8 <tcp_err+0x30>
 8008390:	4b09      	ldr	r3, [pc, #36]	; (80083b8 <tcp_err+0x40>)
 8008392:	f640 0216 	movw	r2, #2070	; 0x816
 8008396:	4909      	ldr	r1, [pc, #36]	; (80083bc <tcp_err+0x44>)
 8008398:	4809      	ldr	r0, [pc, #36]	; (80083c0 <tcp_err+0x48>)
 800839a:	f00b fc29 	bl	8013bf0 <iprintf>
 800839e:	2000      	movs	r0, #0
 80083a0:	f00b fd28 	bl	8013df4 <fflush>
 80083a4:	f00b fc6d 	bl	8013c82 <abort>
    pcb->errf = err;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80083b0:	bf00      	nop
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	080165c0 	.word	0x080165c0
 80083bc:	08016b98 	.word	0x08016b98
 80083c0:	080165f4 	.word	0x080165f4

080083c4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	4613      	mov	r3, r2
 80083d0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d107      	bne.n	80083e8 <tcp_poll+0x24>
 80083d8:	4b10      	ldr	r3, [pc, #64]	; (800841c <tcp_poll+0x58>)
 80083da:	f640 0247 	movw	r2, #2119	; 0x847
 80083de:	4910      	ldr	r1, [pc, #64]	; (8008420 <tcp_poll+0x5c>)
 80083e0:	4810      	ldr	r0, [pc, #64]	; (8008424 <tcp_poll+0x60>)
 80083e2:	f7f9 fd62 	bl	8001eaa <lwip_win32_platform_diag>
 80083e6:	e016      	b.n	8008416 <tcp_poll+0x52>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	7d1b      	ldrb	r3, [r3, #20]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d10b      	bne.n	8008408 <tcp_poll+0x44>
 80083f0:	4b0a      	ldr	r3, [pc, #40]	; (800841c <tcp_poll+0x58>)
 80083f2:	f640 0248 	movw	r2, #2120	; 0x848
 80083f6:	490c      	ldr	r1, [pc, #48]	; (8008428 <tcp_poll+0x64>)
 80083f8:	480a      	ldr	r0, [pc, #40]	; (8008424 <tcp_poll+0x60>)
 80083fa:	f00b fbf9 	bl	8013bf0 <iprintf>
 80083fe:	2000      	movs	r0, #0
 8008400:	f00b fcf8 	bl	8013df4 <fflush>
 8008404:	f00b fc3d 	bl	8013c82 <abort>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	79fa      	ldrb	r2, [r7, #7]
 8008414:	775a      	strb	r2, [r3, #29]
}
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	080165c0 	.word	0x080165c0
 8008420:	08016bc0 	.word	0x08016bc0
 8008424:	080165f4 	.word	0x080165f4
 8008428:	08016bd8 	.word	0x08016bd8

0800842c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d107      	bne.n	800844a <tcp_pcb_purge+0x1e>
 800843a:	4b21      	ldr	r3, [pc, #132]	; (80084c0 <tcp_pcb_purge+0x94>)
 800843c:	f640 025b 	movw	r2, #2139	; 0x85b
 8008440:	4920      	ldr	r1, [pc, #128]	; (80084c4 <tcp_pcb_purge+0x98>)
 8008442:	4821      	ldr	r0, [pc, #132]	; (80084c8 <tcp_pcb_purge+0x9c>)
 8008444:	f7f9 fd31 	bl	8001eaa <lwip_win32_platform_diag>
 8008448:	e037      	b.n	80084ba <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	7d1b      	ldrb	r3, [r3, #20]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d033      	beq.n	80084ba <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008456:	2b0a      	cmp	r3, #10
 8008458:	d02f      	beq.n	80084ba <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800845e:	2b01      	cmp	r3, #1
 8008460:	d02b      	beq.n	80084ba <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008466:	2b00      	cmp	r3, #0
 8008468:	d007      	beq.n	800847a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800846e:	4618      	mov	r0, r3
 8008470:	f7fd fea0 	bl	80061b4 <pbuf_free>
      pcb->refused_data = NULL;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800847e:	2b00      	cmp	r3, #0
 8008480:	d002      	beq.n	8008488 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f9ac 	bl	80087e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800848e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008494:	4618      	mov	r0, r3
 8008496:	f7ff fcc9 	bl	8007e2c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849e:	4618      	mov	r0, r3
 80084a0:	f7ff fcc4 	bl	8007e2c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	66da      	str	r2, [r3, #108]	; 0x6c
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	080165c0 	.word	0x080165c0
 80084c4:	08016bf8 	.word	0x08016bf8
 80084c8:	080165f4 	.word	0x080165f4

080084cc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10b      	bne.n	80084f4 <tcp_pcb_remove+0x28>
 80084dc:	4b4a      	ldr	r3, [pc, #296]	; (8008608 <tcp_pcb_remove+0x13c>)
 80084de:	f640 028d 	movw	r2, #2189	; 0x88d
 80084e2:	494a      	ldr	r1, [pc, #296]	; (800860c <tcp_pcb_remove+0x140>)
 80084e4:	484a      	ldr	r0, [pc, #296]	; (8008610 <tcp_pcb_remove+0x144>)
 80084e6:	f00b fb83 	bl	8013bf0 <iprintf>
 80084ea:	2000      	movs	r0, #0
 80084ec:	f00b fc82 	bl	8013df4 <fflush>
 80084f0:	f00b fbc7 	bl	8013c82 <abort>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10b      	bne.n	8008512 <tcp_pcb_remove+0x46>
 80084fa:	4b43      	ldr	r3, [pc, #268]	; (8008608 <tcp_pcb_remove+0x13c>)
 80084fc:	f640 028e 	movw	r2, #2190	; 0x88e
 8008500:	4944      	ldr	r1, [pc, #272]	; (8008614 <tcp_pcb_remove+0x148>)
 8008502:	4843      	ldr	r0, [pc, #268]	; (8008610 <tcp_pcb_remove+0x144>)
 8008504:	f00b fb74 	bl	8013bf0 <iprintf>
 8008508:	2000      	movs	r0, #0
 800850a:	f00b fc73 	bl	8013df4 <fflush>
 800850e:	f00b fbb8 	bl	8013c82 <abort>

  TCP_RMV(pcblist, pcb);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	429a      	cmp	r2, r3
 800851a:	d105      	bne.n	8008528 <tcp_pcb_remove+0x5c>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68da      	ldr	r2, [r3, #12]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	e013      	b.n	8008550 <tcp_pcb_remove+0x84>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	60fb      	str	r3, [r7, #12]
 800852e:	e00c      	b.n	800854a <tcp_pcb_remove+0x7e>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	68da      	ldr	r2, [r3, #12]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	429a      	cmp	r2, r3
 8008538:	d104      	bne.n	8008544 <tcp_pcb_remove+0x78>
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	68da      	ldr	r2, [r3, #12]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	60da      	str	r2, [r3, #12]
 8008542:	e005      	b.n	8008550 <tcp_pcb_remove+0x84>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	60fb      	str	r3, [r7, #12]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1ef      	bne.n	8008530 <tcp_pcb_remove+0x64>
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2200      	movs	r2, #0
 8008554:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008556:	6838      	ldr	r0, [r7, #0]
 8008558:	f7ff ff68 	bl	800842c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	7d1b      	ldrb	r3, [r3, #20]
 8008560:	2b0a      	cmp	r3, #10
 8008562:	d013      	beq.n	800858c <tcp_pcb_remove+0xc0>
      (pcb->state != LISTEN) &&
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008568:	2b01      	cmp	r3, #1
 800856a:	d00f      	beq.n	800858c <tcp_pcb_remove+0xc0>
      (pcb->flags & TF_ACK_DELAY)) {
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	8b5b      	ldrh	r3, [r3, #26]
 8008570:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008574:	2b00      	cmp	r3, #0
 8008576:	d009      	beq.n	800858c <tcp_pcb_remove+0xc0>
    tcp_ack_now(pcb);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	8b5b      	ldrh	r3, [r3, #26]
 800857c:	f043 0302 	orr.w	r3, r3, #2
 8008580:	b29a      	uxth	r2, r3
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008586:	6838      	ldr	r0, [r7, #0]
 8008588:	f003 fe3a 	bl	800c200 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	7d1b      	ldrb	r3, [r3, #20]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d02f      	beq.n	80085f4 <tcp_pcb_remove+0x128>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00b      	beq.n	80085b4 <tcp_pcb_remove+0xe8>
 800859c:	4b1a      	ldr	r3, [pc, #104]	; (8008608 <tcp_pcb_remove+0x13c>)
 800859e:	f640 029d 	movw	r2, #2205	; 0x89d
 80085a2:	491d      	ldr	r1, [pc, #116]	; (8008618 <tcp_pcb_remove+0x14c>)
 80085a4:	481a      	ldr	r0, [pc, #104]	; (8008610 <tcp_pcb_remove+0x144>)
 80085a6:	f00b fb23 	bl	8013bf0 <iprintf>
 80085aa:	2000      	movs	r0, #0
 80085ac:	f00b fc22 	bl	8013df4 <fflush>
 80085b0:	f00b fb67 	bl	8013c82 <abort>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00b      	beq.n	80085d4 <tcp_pcb_remove+0x108>
 80085bc:	4b12      	ldr	r3, [pc, #72]	; (8008608 <tcp_pcb_remove+0x13c>)
 80085be:	f640 029e 	movw	r2, #2206	; 0x89e
 80085c2:	4916      	ldr	r1, [pc, #88]	; (800861c <tcp_pcb_remove+0x150>)
 80085c4:	4812      	ldr	r0, [pc, #72]	; (8008610 <tcp_pcb_remove+0x144>)
 80085c6:	f00b fb13 	bl	8013bf0 <iprintf>
 80085ca:	2000      	movs	r0, #0
 80085cc:	f00b fc12 	bl	8013df4 <fflush>
 80085d0:	f00b fb57 	bl	8013c82 <abort>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00b      	beq.n	80085f4 <tcp_pcb_remove+0x128>
 80085dc:	4b0a      	ldr	r3, [pc, #40]	; (8008608 <tcp_pcb_remove+0x13c>)
 80085de:	f44f 620a 	mov.w	r2, #2208	; 0x8a0
 80085e2:	490f      	ldr	r1, [pc, #60]	; (8008620 <tcp_pcb_remove+0x154>)
 80085e4:	480a      	ldr	r0, [pc, #40]	; (8008610 <tcp_pcb_remove+0x144>)
 80085e6:	f00b fb03 	bl	8013bf0 <iprintf>
 80085ea:	2000      	movs	r0, #0
 80085ec:	f00b fc02 	bl	8013df4 <fflush>
 80085f0:	f00b fb47 	bl	8013c82 <abort>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	2200      	movs	r2, #0
 80085f8:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2200      	movs	r2, #0
 80085fe:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008600:	bf00      	nop
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	080165c0 	.word	0x080165c0
 800860c:	08016c14 	.word	0x08016c14
 8008610:	080165f4 	.word	0x080165f4
 8008614:	08016c30 	.word	0x08016c30
 8008618:	08016c50 	.word	0x08016c50
 800861c:	08016c68 	.word	0x08016c68
 8008620:	08016c84 	.word	0x08016c84

08008624 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10b      	bne.n	800864a <tcp_next_iss+0x26>
 8008632:	4b0c      	ldr	r3, [pc, #48]	; (8008664 <tcp_next_iss+0x40>)
 8008634:	f640 02b9 	movw	r2, #2233	; 0x8b9
 8008638:	490b      	ldr	r1, [pc, #44]	; (8008668 <tcp_next_iss+0x44>)
 800863a:	480c      	ldr	r0, [pc, #48]	; (800866c <tcp_next_iss+0x48>)
 800863c:	f00b fad8 	bl	8013bf0 <iprintf>
 8008640:	2000      	movs	r0, #0
 8008642:	f00b fbd7 	bl	8013df4 <fflush>
 8008646:	f00b fb1c 	bl	8013c82 <abort>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800864a:	4b09      	ldr	r3, [pc, #36]	; (8008670 <tcp_next_iss+0x4c>)
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	4b09      	ldr	r3, [pc, #36]	; (8008674 <tcp_next_iss+0x50>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4413      	add	r3, r2
 8008654:	4a06      	ldr	r2, [pc, #24]	; (8008670 <tcp_next_iss+0x4c>)
 8008656:	6013      	str	r3, [r2, #0]
  return iss;
 8008658:	4b05      	ldr	r3, [pc, #20]	; (8008670 <tcp_next_iss+0x4c>)
 800865a:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800865c:	4618      	mov	r0, r3
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	080165c0 	.word	0x080165c0
 8008668:	08016c9c 	.word	0x08016c9c
 800866c:	080165f4 	.word	0x080165f4
 8008670:	2000000c 	.word	0x2000000c
 8008674:	200022c8 	.word	0x200022c8

08008678 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	4603      	mov	r3, r0
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
 8008684:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10b      	bne.n	80086a4 <tcp_eff_send_mss_netif+0x2c>
 800868c:	4b17      	ldr	r3, [pc, #92]	; (80086ec <tcp_eff_send_mss_netif+0x74>)
 800868e:	f640 02cf 	movw	r2, #2255	; 0x8cf
 8008692:	4917      	ldr	r1, [pc, #92]	; (80086f0 <tcp_eff_send_mss_netif+0x78>)
 8008694:	4817      	ldr	r0, [pc, #92]	; (80086f4 <tcp_eff_send_mss_netif+0x7c>)
 8008696:	f00b faab 	bl	8013bf0 <iprintf>
 800869a:	2000      	movs	r0, #0
 800869c:	f00b fbaa 	bl	8013df4 <fflush>
 80086a0:	f00b faef 	bl	8013c82 <abort>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d101      	bne.n	80086ae <tcp_eff_send_mss_netif+0x36>
      return sendmss;
 80086aa:	89fb      	ldrh	r3, [r7, #14]
 80086ac:	e019      	b.n	80086e2 <tcp_eff_send_mss_netif+0x6a>
    }
    mtu = outif->mtu;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	8c1b      	ldrh	r3, [r3, #32]
 80086b2:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80086b4:	8afb      	ldrh	r3, [r7, #22]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d012      	beq.n	80086e0 <tcp_eff_send_mss_netif+0x68>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80086ba:	2328      	movs	r3, #40	; 0x28
 80086bc:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80086be:	8afa      	ldrh	r2, [r7, #22]
 80086c0:	8abb      	ldrh	r3, [r7, #20]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d904      	bls.n	80086d0 <tcp_eff_send_mss_netif+0x58>
 80086c6:	8afa      	ldrh	r2, [r7, #22]
 80086c8:	8abb      	ldrh	r3, [r7, #20]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	e000      	b.n	80086d2 <tcp_eff_send_mss_netif+0x5a>
 80086d0:	2300      	movs	r3, #0
 80086d2:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80086d4:	8a7a      	ldrh	r2, [r7, #18]
 80086d6:	89fb      	ldrh	r3, [r7, #14]
 80086d8:	4293      	cmp	r3, r2
 80086da:	bf28      	it	cs
 80086dc:	4613      	movcs	r3, r2
 80086de:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80086e0:	89fb      	ldrh	r3, [r7, #14]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	080165c0 	.word	0x080165c0
 80086f0:	08016cb8 	.word	0x08016cb8
 80086f4:	080165f4 	.word	0x080165f4

080086f8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d11d      	bne.n	8008748 <tcp_netif_ip_addr_changed_pcblist+0x50>
 800870c:	4b12      	ldr	r3, [pc, #72]	; (8008758 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800870e:	f640 120a 	movw	r2, #2314	; 0x90a
 8008712:	4912      	ldr	r1, [pc, #72]	; (800875c <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8008714:	4812      	ldr	r0, [pc, #72]	; (8008760 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8008716:	f00b fa6b 	bl	8013bf0 <iprintf>
 800871a:	2000      	movs	r0, #0
 800871c:	f00b fb6a 	bl	8013df4 <fflush>
 8008720:	f00b faaf 	bl	8013c82 <abort>

  while (pcb != NULL) {
    /* PCB bound to current local interface address? */
    if (ip_addr_eq(&pcb->local_ip, old_addr)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	429a      	cmp	r2, r3
 800872e:	d108      	bne.n	8008742 <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f7fe fc66 	bl	8007008 <tcp_abort>
      pcb = next;
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	e002      	b.n	8008748 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1ea      	bne.n	8008724 <tcp_netif_ip_addr_changed_pcblist+0x2c>
    }
  }
}
 800874e:	bf00      	nop
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	080165c0 	.word	0x080165c0
 800875c:	08016ce0 	.word	0x08016ce0
 8008760:	080165f4 	.word	0x080165f4

08008764 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d02a      	beq.n	80087ca <tcp_netif_ip_addr_changed+0x66>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d026      	beq.n	80087ca <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800877c:	4b15      	ldr	r3, [pc, #84]	; (80087d4 <tcp_netif_ip_addr_changed+0x70>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7ff ffb8 	bl	80086f8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008788:	4b13      	ldr	r3, [pc, #76]	; (80087d8 <tcp_netif_ip_addr_changed+0x74>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff ffb2 	bl	80086f8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d017      	beq.n	80087ca <tcp_netif_ip_addr_changed+0x66>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d013      	beq.n	80087ca <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80087a2:	4b0e      	ldr	r3, [pc, #56]	; (80087dc <tcp_netif_ip_addr_changed+0x78>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	60fb      	str	r3, [r7, #12]
 80087a8:	e00c      	b.n	80087c4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_eq(&lpcb->local_ip, old_addr)) {
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d103      	bne.n	80087be <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1ef      	bne.n	80087aa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80087ca:	bf00      	nop
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	200022c4 	.word	0x200022c4
 80087d8:	200022d0 	.word	0x200022d0
 80087dc:	200022cc 	.word	0x200022cc

080087e0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d007      	beq.n	8008800 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7ff fb19 	bl	8007e2c <tcp_segs_free>
    pcb->ooseq = NULL;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008808:	b590      	push	{r4, r7, lr}
 800880a:	b08d      	sub	sp, #52	; 0x34
 800880c:	af04      	add	r7, sp, #16
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10a      	bne.n	800882e <tcp_input+0x26>
 8008818:	4b7b      	ldr	r3, [pc, #492]	; (8008a08 <tcp_input+0x200>)
 800881a:	2283      	movs	r2, #131	; 0x83
 800881c:	497b      	ldr	r1, [pc, #492]	; (8008a0c <tcp_input+0x204>)
 800881e:	487c      	ldr	r0, [pc, #496]	; (8008a10 <tcp_input+0x208>)
 8008820:	f00b f9e6 	bl	8013bf0 <iprintf>
 8008824:	2000      	movs	r0, #0
 8008826:	f00b fae5 	bl	8013df4 <fflush>
 800882a:	f00b fa2a 	bl	8013c82 <abort>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 800882e:	4b79      	ldr	r3, [pc, #484]	; (8008a14 <tcp_input+0x20c>)
 8008830:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008834:	3301      	adds	r3, #1
 8008836:	b29a      	uxth	r2, r3
 8008838:	4b76      	ldr	r3, [pc, #472]	; (8008a14 <tcp_input+0x20c>)
 800883a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	4a75      	ldr	r2, [pc, #468]	; (8008a18 <tcp_input+0x210>)
 8008844:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	895b      	ldrh	r3, [r3, #10]
 800884a:	2b13      	cmp	r3, #19
 800884c:	d809      	bhi.n	8008862 <tcp_input+0x5a>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 800884e:	4b71      	ldr	r3, [pc, #452]	; (8008a14 <tcp_input+0x20c>)
 8008850:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008854:	3301      	adds	r3, #1
 8008856:	b29a      	uxth	r2, r3
 8008858:	4b6e      	ldr	r3, [pc, #440]	; (8008a14 <tcp_input+0x20c>)
 800885a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    goto dropped;
 800885e:	f000 bc6a 	b.w	8009136 <tcp_input+0x92e>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008862:	4b6e      	ldr	r3, [pc, #440]	; (8008a1c <tcp_input+0x214>)
 8008864:	695a      	ldr	r2, [r3, #20]
 8008866:	4b6d      	ldr	r3, [pc, #436]	; (8008a1c <tcp_input+0x214>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4619      	mov	r1, r3
 800886c:	4610      	mov	r0, r2
 800886e:	f7fc f841 	bl	80048f4 <ip4_addr_isbroadcast_u32>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d105      	bne.n	8008884 <tcp_input+0x7c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008878:	4b68      	ldr	r3, [pc, #416]	; (8008a1c <tcp_input+0x214>)
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008880:	2be0      	cmp	r3, #224	; 0xe0
 8008882:	d109      	bne.n	8008898 <tcp_input+0x90>
    TCP_STATS_INC(tcp.proterr);
 8008884:	4b63      	ldr	r3, [pc, #396]	; (8008a14 <tcp_input+0x20c>)
 8008886:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800888a:	3301      	adds	r3, #1
 800888c:	b29a      	uxth	r2, r3
 800888e:	4b61      	ldr	r3, [pc, #388]	; (8008a14 <tcp_input+0x20c>)
 8008890:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    goto dropped;
 8008894:	f000 bc4f 	b.w	8009136 <tcp_input+0x92e>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	891a      	ldrh	r2, [r3, #8]
 800889c:	4b60      	ldr	r3, [pc, #384]	; (8008a20 <tcp_input+0x218>)
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	4b60      	ldr	r3, [pc, #384]	; (8008a24 <tcp_input+0x21c>)
 80088a2:	2106      	movs	r1, #6
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f7fb fca5 	bl	80041f4 <ip_chksum_pseudo>
 80088aa:	4603      	mov	r3, r0
 80088ac:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 80088ae:	8a3b      	ldrh	r3, [r7, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d009      	beq.n	80088c8 <tcp_input+0xc0>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
                                    chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
 80088b4:	4b57      	ldr	r3, [pc, #348]	; (8008a14 <tcp_input+0x20c>)
 80088b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088ba:	3301      	adds	r3, #1
 80088bc:	b29a      	uxth	r2, r3
 80088be:	4b55      	ldr	r3, [pc, #340]	; (8008a14 <tcp_input+0x20c>)
 80088c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
      goto dropped;
 80088c4:	f000 bc37 	b.w	8009136 <tcp_input+0x92e>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80088c8:	4b53      	ldr	r3, [pc, #332]	; (8008a18 <tcp_input+0x210>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	899b      	ldrh	r3, [r3, #12]
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fb fb5d 	bl	8003f90 <lwip_htons>
 80088d6:	4603      	mov	r3, r0
 80088d8:	0b1b      	lsrs	r3, r3, #12
 80088da:	b29b      	uxth	r3, r3
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
 80088e4:	2b13      	cmp	r3, #19
 80088e6:	d905      	bls.n	80088f4 <tcp_input+0xec>
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	891b      	ldrh	r3, [r3, #8]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d909      	bls.n	8008908 <tcp_input+0x100>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 80088f4:	4b47      	ldr	r3, [pc, #284]	; (8008a14 <tcp_input+0x20c>)
 80088f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80088fa:	3301      	adds	r3, #1
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	4b45      	ldr	r3, [pc, #276]	; (8008a14 <tcp_input+0x20c>)
 8008900:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    goto dropped;
 8008904:	f000 bc17 	b.w	8009136 <tcp_input+0x92e>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	b29b      	uxth	r3, r3
 800890c:	3b14      	subs	r3, #20
 800890e:	b29a      	uxth	r2, r3
 8008910:	4b45      	ldr	r3, [pc, #276]	; (8008a28 <tcp_input+0x220>)
 8008912:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008914:	4b45      	ldr	r3, [pc, #276]	; (8008a2c <tcp_input+0x224>)
 8008916:	2200      	movs	r2, #0
 8008918:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	895a      	ldrh	r2, [r3, #10]
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	b29b      	uxth	r3, r3
 8008922:	429a      	cmp	r2, r3
 8008924:	d309      	bcc.n	800893a <tcp_input+0x132>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008926:	4b40      	ldr	r3, [pc, #256]	; (8008a28 <tcp_input+0x220>)
 8008928:	881a      	ldrh	r2, [r3, #0]
 800892a:	4b41      	ldr	r3, [pc, #260]	; (8008a30 <tcp_input+0x228>)
 800892c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7fd fbe8 	bl	8006108 <pbuf_remove_header>
 8008938:	e082      	b.n	8008a40 <tcp_input+0x238>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10a      	bne.n	8008958 <tcp_input+0x150>
 8008942:	4b31      	ldr	r3, [pc, #196]	; (8008a08 <tcp_input+0x200>)
 8008944:	22c2      	movs	r2, #194	; 0xc2
 8008946:	493b      	ldr	r1, [pc, #236]	; (8008a34 <tcp_input+0x22c>)
 8008948:	4831      	ldr	r0, [pc, #196]	; (8008a10 <tcp_input+0x208>)
 800894a:	f00b f951 	bl	8013bf0 <iprintf>
 800894e:	2000      	movs	r0, #0
 8008950:	f00b fa50 	bl	8013df4 <fflush>
 8008954:	f00b f995 	bl	8013c82 <abort>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008958:	2114      	movs	r1, #20
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7fd fbd4 	bl	8006108 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	895a      	ldrh	r2, [r3, #10]
 8008964:	4b32      	ldr	r3, [pc, #200]	; (8008a30 <tcp_input+0x228>)
 8008966:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008968:	4b2f      	ldr	r3, [pc, #188]	; (8008a28 <tcp_input+0x220>)
 800896a:	881a      	ldrh	r2, [r3, #0]
 800896c:	4b30      	ldr	r3, [pc, #192]	; (8008a30 <tcp_input+0x228>)
 800896e:	881b      	ldrh	r3, [r3, #0]
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008974:	4b2e      	ldr	r3, [pc, #184]	; (8008a30 <tcp_input+0x228>)
 8008976:	881b      	ldrh	r3, [r3, #0]
 8008978:	4619      	mov	r1, r3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f7fd fbc4 	bl	8006108 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	895b      	ldrh	r3, [r3, #10]
 8008986:	89ba      	ldrh	r2, [r7, #12]
 8008988:	429a      	cmp	r2, r3
 800898a:	d908      	bls.n	800899e <tcp_input+0x196>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 800898c:	4b21      	ldr	r3, [pc, #132]	; (8008a14 <tcp_input+0x20c>)
 800898e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008992:	3301      	adds	r3, #1
 8008994:	b29a      	uxth	r2, r3
 8008996:	4b1f      	ldr	r3, [pc, #124]	; (8008a14 <tcp_input+0x20c>)
 8008998:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      goto dropped;
 800899c:	e3cb      	b.n	8009136 <tcp_input+0x92e>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	4a21      	ldr	r2, [pc, #132]	; (8008a2c <tcp_input+0x224>)
 80089a6:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	89ba      	ldrh	r2, [r7, #12]
 80089ae:	4611      	mov	r1, r2
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fd fba9 	bl	8006108 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	891a      	ldrh	r2, [r3, #8]
 80089ba:	89bb      	ldrh	r3, [r7, #12]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	b29a      	uxth	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	895b      	ldrh	r3, [r3, #10]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00a      	beq.n	80089e2 <tcp_input+0x1da>
 80089cc:	4b0e      	ldr	r3, [pc, #56]	; (8008a08 <tcp_input+0x200>)
 80089ce:	22df      	movs	r2, #223	; 0xdf
 80089d0:	4919      	ldr	r1, [pc, #100]	; (8008a38 <tcp_input+0x230>)
 80089d2:	480f      	ldr	r0, [pc, #60]	; (8008a10 <tcp_input+0x208>)
 80089d4:	f00b f90c 	bl	8013bf0 <iprintf>
 80089d8:	2000      	movs	r0, #0
 80089da:	f00b fa0b 	bl	8013df4 <fflush>
 80089de:	f00b f950 	bl	8013c82 <abort>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	891a      	ldrh	r2, [r3, #8]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	891b      	ldrh	r3, [r3, #8]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d027      	beq.n	8008a40 <tcp_input+0x238>
 80089f0:	4b05      	ldr	r3, [pc, #20]	; (8008a08 <tcp_input+0x200>)
 80089f2:	22e0      	movs	r2, #224	; 0xe0
 80089f4:	4911      	ldr	r1, [pc, #68]	; (8008a3c <tcp_input+0x234>)
 80089f6:	4806      	ldr	r0, [pc, #24]	; (8008a10 <tcp_input+0x208>)
 80089f8:	f00b f8fa 	bl	8013bf0 <iprintf>
 80089fc:	2000      	movs	r0, #0
 80089fe:	f00b f9f9 	bl	8013df4 <fflush>
 8008a02:	f00b f93e 	bl	8013c82 <abort>
 8008a06:	bf00      	nop
 8008a08:	08016d14 	.word	0x08016d14
 8008a0c:	08016d38 	.word	0x08016d38
 8008a10:	08016d50 	.word	0x08016d50
 8008a14:	2000221c 	.word	0x2000221c
 8008a18:	20000714 	.word	0x20000714
 8008a1c:	20000880 	.word	0x20000880
 8008a20:	20000894 	.word	0x20000894
 8008a24:	20000890 	.word	0x20000890
 8008a28:	20000718 	.word	0x20000718
 8008a2c:	2000071c 	.word	0x2000071c
 8008a30:	2000071a 	.word	0x2000071a
 8008a34:	08016d78 	.word	0x08016d78
 8008a38:	08016d88 	.word	0x08016d88
 8008a3c:	08016d94 	.word	0x08016d94
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008a40:	4b91      	ldr	r3, [pc, #580]	; (8008c88 <tcp_input+0x480>)
 8008a42:	681c      	ldr	r4, [r3, #0]
 8008a44:	4b90      	ldr	r3, [pc, #576]	; (8008c88 <tcp_input+0x480>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7fb fa9f 	bl	8003f90 <lwip_htons>
 8008a52:	4603      	mov	r3, r0
 8008a54:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008a56:	4b8c      	ldr	r3, [pc, #560]	; (8008c88 <tcp_input+0x480>)
 8008a58:	681c      	ldr	r4, [r3, #0]
 8008a5a:	4b8b      	ldr	r3, [pc, #556]	; (8008c88 <tcp_input+0x480>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	885b      	ldrh	r3, [r3, #2]
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fb fa94 	bl	8003f90 <lwip_htons>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008a6c:	4b86      	ldr	r3, [pc, #536]	; (8008c88 <tcp_input+0x480>)
 8008a6e:	681c      	ldr	r4, [r3, #0]
 8008a70:	4b85      	ldr	r3, [pc, #532]	; (8008c88 <tcp_input+0x480>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fb fa9f 	bl	8003fba <lwip_htonl>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	6063      	str	r3, [r4, #4]
 8008a80:	6863      	ldr	r3, [r4, #4]
 8008a82:	4a82      	ldr	r2, [pc, #520]	; (8008c8c <tcp_input+0x484>)
 8008a84:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008a86:	4b80      	ldr	r3, [pc, #512]	; (8008c88 <tcp_input+0x480>)
 8008a88:	681c      	ldr	r4, [r3, #0]
 8008a8a:	4b7f      	ldr	r3, [pc, #508]	; (8008c88 <tcp_input+0x480>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fb fa92 	bl	8003fba <lwip_htonl>
 8008a96:	4603      	mov	r3, r0
 8008a98:	60a3      	str	r3, [r4, #8]
 8008a9a:	68a3      	ldr	r3, [r4, #8]
 8008a9c:	4a7c      	ldr	r2, [pc, #496]	; (8008c90 <tcp_input+0x488>)
 8008a9e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008aa0:	4b79      	ldr	r3, [pc, #484]	; (8008c88 <tcp_input+0x480>)
 8008aa2:	681c      	ldr	r4, [r3, #0]
 8008aa4:	4b78      	ldr	r3, [pc, #480]	; (8008c88 <tcp_input+0x480>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	89db      	ldrh	r3, [r3, #14]
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fb fa6f 	bl	8003f90 <lwip_htons>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008ab6:	4b74      	ldr	r3, [pc, #464]	; (8008c88 <tcp_input+0x480>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	899b      	ldrh	r3, [r3, #12]
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fb fa66 	bl	8003f90 <lwip_htons>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	4b71      	ldr	r3, [pc, #452]	; (8008c94 <tcp_input+0x48c>)
 8008ad0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	891a      	ldrh	r2, [r3, #8]
 8008ad6:	4b70      	ldr	r3, [pc, #448]	; (8008c98 <tcp_input+0x490>)
 8008ad8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008ada:	4b6e      	ldr	r3, [pc, #440]	; (8008c94 <tcp_input+0x48c>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	f003 0303 	and.w	r3, r3, #3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d014      	beq.n	8008b10 <tcp_input+0x308>
    tcplen++;
 8008ae6:	4b6c      	ldr	r3, [pc, #432]	; (8008c98 <tcp_input+0x490>)
 8008ae8:	881b      	ldrh	r3, [r3, #0]
 8008aea:	3301      	adds	r3, #1
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	4b6a      	ldr	r3, [pc, #424]	; (8008c98 <tcp_input+0x490>)
 8008af0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	891a      	ldrh	r2, [r3, #8]
 8008af6:	4b68      	ldr	r3, [pc, #416]	; (8008c98 <tcp_input+0x490>)
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d908      	bls.n	8008b10 <tcp_input+0x308>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8008afe:	4b67      	ldr	r3, [pc, #412]	; (8008c9c <tcp_input+0x494>)
 8008b00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008b04:	3301      	adds	r3, #1
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	4b64      	ldr	r3, [pc, #400]	; (8008c9c <tcp_input+0x494>)
 8008b0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      goto dropped;
 8008b0e:	e312      	b.n	8009136 <tcp_input+0x92e>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008b10:	2300      	movs	r3, #0
 8008b12:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b14:	4b62      	ldr	r3, [pc, #392]	; (8008ca0 <tcp_input+0x498>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	61fb      	str	r3, [r7, #28]
 8008b1a:	e097      	b.n	8008c4c <tcp_input+0x444>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	7d1b      	ldrb	r3, [r3, #20]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10a      	bne.n	8008b3a <tcp_input+0x332>
 8008b24:	4b5f      	ldr	r3, [pc, #380]	; (8008ca4 <tcp_input+0x49c>)
 8008b26:	22fb      	movs	r2, #251	; 0xfb
 8008b28:	495f      	ldr	r1, [pc, #380]	; (8008ca8 <tcp_input+0x4a0>)
 8008b2a:	4860      	ldr	r0, [pc, #384]	; (8008cac <tcp_input+0x4a4>)
 8008b2c:	f00b f860 	bl	8013bf0 <iprintf>
 8008b30:	2000      	movs	r0, #0
 8008b32:	f00b f95f 	bl	8013df4 <fflush>
 8008b36:	f00b f8a4 	bl	8013c82 <abort>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	7d1b      	ldrb	r3, [r3, #20]
 8008b3e:	2b0a      	cmp	r3, #10
 8008b40:	d10a      	bne.n	8008b58 <tcp_input+0x350>
 8008b42:	4b58      	ldr	r3, [pc, #352]	; (8008ca4 <tcp_input+0x49c>)
 8008b44:	22fc      	movs	r2, #252	; 0xfc
 8008b46:	495a      	ldr	r1, [pc, #360]	; (8008cb0 <tcp_input+0x4a8>)
 8008b48:	4858      	ldr	r0, [pc, #352]	; (8008cac <tcp_input+0x4a4>)
 8008b4a:	f00b f851 	bl	8013bf0 <iprintf>
 8008b4e:	2000      	movs	r0, #0
 8008b50:	f00b f950 	bl	8013df4 <fflush>
 8008b54:	f00b f895 	bl	8013c82 <abort>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	7d1b      	ldrb	r3, [r3, #20]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d10a      	bne.n	8008b76 <tcp_input+0x36e>
 8008b60:	4b50      	ldr	r3, [pc, #320]	; (8008ca4 <tcp_input+0x49c>)
 8008b62:	22fd      	movs	r2, #253	; 0xfd
 8008b64:	4953      	ldr	r1, [pc, #332]	; (8008cb4 <tcp_input+0x4ac>)
 8008b66:	4851      	ldr	r0, [pc, #324]	; (8008cac <tcp_input+0x4a4>)
 8008b68:	f00b f842 	bl	8013bf0 <iprintf>
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	f00b f941 	bl	8013df4 <fflush>
 8008b72:	f00b f886 	bl	8013c82 <abort>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	7a1b      	ldrb	r3, [r3, #8]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00c      	beq.n	8008b98 <tcp_input+0x390>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	7a1a      	ldrb	r2, [r3, #8]
 8008b82:	4b4d      	ldr	r3, [pc, #308]	; (8008cb8 <tcp_input+0x4b0>)
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d002      	beq.n	8008b98 <tcp_input+0x390>
      prev = pcb;
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	61bb      	str	r3, [r7, #24]
      continue;
 8008b96:	e056      	b.n	8008c46 <tcp_input+0x43e>
    }

    if (pcb->remote_port == tcphdr->src &&
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	8b1a      	ldrh	r2, [r3, #24]
 8008b9c:	4b3a      	ldr	r3, [pc, #232]	; (8008c88 <tcp_input+0x480>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d14c      	bne.n	8008c42 <tcp_input+0x43a>
        pcb->local_port == tcphdr->dest &&
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	8ada      	ldrh	r2, [r3, #22]
 8008bac:	4b36      	ldr	r3, [pc, #216]	; (8008c88 <tcp_input+0x480>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	885b      	ldrh	r3, [r3, #2]
 8008bb2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d144      	bne.n	8008c42 <tcp_input+0x43a>
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	4b3e      	ldr	r3, [pc, #248]	; (8008cb8 <tcp_input+0x4b0>)
 8008bbe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d13e      	bne.n	8008c42 <tcp_input+0x43a>
        ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	4b3b      	ldr	r3, [pc, #236]	; (8008cb8 <tcp_input+0x4b0>)
 8008bca:	695b      	ldr	r3, [r3, #20]
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d138      	bne.n	8008c42 <tcp_input+0x43a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	68da      	ldr	r2, [r3, #12]
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d10b      	bne.n	8008bf2 <tcp_input+0x3ea>
 8008bda:	4b32      	ldr	r3, [pc, #200]	; (8008ca4 <tcp_input+0x49c>)
 8008bdc:	f240 120d 	movw	r2, #269	; 0x10d
 8008be0:	4936      	ldr	r1, [pc, #216]	; (8008cbc <tcp_input+0x4b4>)
 8008be2:	4832      	ldr	r0, [pc, #200]	; (8008cac <tcp_input+0x4a4>)
 8008be4:	f00b f804 	bl	8013bf0 <iprintf>
 8008be8:	2000      	movs	r0, #0
 8008bea:	f00b f903 	bl	8013df4 <fflush>
 8008bee:	f00b f848 	bl	8013c82 <abort>
      if (prev != NULL) {
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00b      	beq.n	8008c10 <tcp_input+0x408>
        prev->next = pcb->next;
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	68da      	ldr	r2, [r3, #12]
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008c00:	4b27      	ldr	r3, [pc, #156]	; (8008ca0 <tcp_input+0x498>)
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008c08:	4a25      	ldr	r2, [pc, #148]	; (8008ca0 <tcp_input+0x498>)
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	6013      	str	r3, [r2, #0]
 8008c0e:	e007      	b.n	8008c20 <tcp_input+0x418>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8008c10:	4b22      	ldr	r3, [pc, #136]	; (8008c9c <tcp_input+0x494>)
 8008c12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c16:	3301      	adds	r3, #1
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	4b20      	ldr	r3, [pc, #128]	; (8008c9c <tcp_input+0x494>)
 8008c1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	68da      	ldr	r2, [r3, #12]
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d115      	bne.n	8008c56 <tcp_input+0x44e>
 8008c2a:	4b1e      	ldr	r3, [pc, #120]	; (8008ca4 <tcp_input+0x49c>)
 8008c2c:	f240 1215 	movw	r2, #277	; 0x115
 8008c30:	4923      	ldr	r1, [pc, #140]	; (8008cc0 <tcp_input+0x4b8>)
 8008c32:	481e      	ldr	r0, [pc, #120]	; (8008cac <tcp_input+0x4a4>)
 8008c34:	f00a ffdc 	bl	8013bf0 <iprintf>
 8008c38:	2000      	movs	r0, #0
 8008c3a:	f00b f8db 	bl	8013df4 <fflush>
 8008c3e:	f00b f820 	bl	8013c82 <abort>
      break;
    }
    prev = pcb;
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	61fb      	str	r3, [r7, #28]
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f47f af64 	bne.w	8008b1c <tcp_input+0x314>
 8008c54:	e000      	b.n	8008c58 <tcp_input+0x450>
      break;
 8008c56:	bf00      	nop
  }

  if (pcb == NULL) {
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f040 80c5 	bne.w	8008dea <tcp_input+0x5e2>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c60:	4b18      	ldr	r3, [pc, #96]	; (8008cc4 <tcp_input+0x4bc>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	61fb      	str	r3, [r7, #28]
 8008c66:	e066      	b.n	8008d36 <tcp_input+0x52e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	7d1b      	ldrb	r3, [r3, #20]
 8008c6c:	2b0a      	cmp	r3, #10
 8008c6e:	d02d      	beq.n	8008ccc <tcp_input+0x4c4>
 8008c70:	4b0c      	ldr	r3, [pc, #48]	; (8008ca4 <tcp_input+0x49c>)
 8008c72:	f240 121f 	movw	r2, #287	; 0x11f
 8008c76:	4914      	ldr	r1, [pc, #80]	; (8008cc8 <tcp_input+0x4c0>)
 8008c78:	480c      	ldr	r0, [pc, #48]	; (8008cac <tcp_input+0x4a4>)
 8008c7a:	f00a ffb9 	bl	8013bf0 <iprintf>
 8008c7e:	2000      	movs	r0, #0
 8008c80:	f00b f8b8 	bl	8013df4 <fflush>
 8008c84:	f00a fffd 	bl	8013c82 <abort>
 8008c88:	20000714 	.word	0x20000714
 8008c8c:	20000724 	.word	0x20000724
 8008c90:	20000728 	.word	0x20000728
 8008c94:	20000730 	.word	0x20000730
 8008c98:	2000072e 	.word	0x2000072e
 8008c9c:	2000221c 	.word	0x2000221c
 8008ca0:	200022c4 	.word	0x200022c4
 8008ca4:	08016d14 	.word	0x08016d14
 8008ca8:	08016db4 	.word	0x08016db4
 8008cac:	08016d50 	.word	0x08016d50
 8008cb0:	08016ddc 	.word	0x08016ddc
 8008cb4:	08016e08 	.word	0x08016e08
 8008cb8:	20000880 	.word	0x20000880
 8008cbc:	08016e30 	.word	0x08016e30
 8008cc0:	08016e5c 	.word	0x08016e5c
 8008cc4:	200022d4 	.word	0x200022d4
 8008cc8:	08016e88 	.word	0x08016e88

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	7a1b      	ldrb	r3, [r3, #8]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d009      	beq.n	8008ce8 <tcp_input+0x4e0>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	7a1a      	ldrb	r2, [r3, #8]
 8008cd8:	4b9e      	ldr	r3, [pc, #632]	; (8008f54 <tcp_input+0x74c>)
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d122      	bne.n	8008d2e <tcp_input+0x526>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	8b1a      	ldrh	r2, [r3, #24]
 8008cec:	4b9a      	ldr	r3, [pc, #616]	; (8008f58 <tcp_input+0x750>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	881b      	ldrh	r3, [r3, #0]
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d11b      	bne.n	8008d30 <tcp_input+0x528>
          pcb->local_port == tcphdr->dest &&
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	8ada      	ldrh	r2, [r3, #22]
 8008cfc:	4b96      	ldr	r3, [pc, #600]	; (8008f58 <tcp_input+0x750>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	885b      	ldrh	r3, [r3, #2]
 8008d02:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d113      	bne.n	8008d30 <tcp_input+0x528>
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	4b91      	ldr	r3, [pc, #580]	; (8008f54 <tcp_input+0x74c>)
 8008d0e:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d10d      	bne.n	8008d30 <tcp_input+0x528>
          ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	4b8e      	ldr	r3, [pc, #568]	; (8008f54 <tcp_input+0x74c>)
 8008d1a:	695b      	ldr	r3, [r3, #20]
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d107      	bne.n	8008d30 <tcp_input+0x528>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008d20:	69f8      	ldr	r0, [r7, #28]
 8008d22:	f000 fb85 	bl	8009430 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7fd fa44 	bl	80061b4 <pbuf_free>
        return;
 8008d2c:	e210      	b.n	8009150 <tcp_input+0x948>
        continue;
 8008d2e:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	61fb      	str	r3, [r7, #28]
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d195      	bne.n	8008c68 <tcp_input+0x460>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008d40:	4b86      	ldr	r3, [pc, #536]	; (8008f5c <tcp_input+0x754>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	617b      	str	r3, [r7, #20]
 8008d46:	e02a      	b.n	8008d9e <tcp_input+0x596>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	7a1b      	ldrb	r3, [r3, #8]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00c      	beq.n	8008d6a <tcp_input+0x562>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	7a1a      	ldrb	r2, [r3, #8]
 8008d54:	4b7f      	ldr	r3, [pc, #508]	; (8008f54 <tcp_input+0x74c>)
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d002      	beq.n	8008d6a <tcp_input+0x562>
        prev = (struct tcp_pcb *)lpcb;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	61bb      	str	r3, [r7, #24]
        continue;
 8008d68:	e016      	b.n	8008d98 <tcp_input+0x590>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	8ada      	ldrh	r2, [r3, #22]
 8008d6e:	4b7a      	ldr	r3, [pc, #488]	; (8008f58 <tcp_input+0x750>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	885b      	ldrh	r3, [r3, #2]
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d10c      	bne.n	8008d94 <tcp_input+0x58c>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_eq(&lpcb->local_ip, ip_current_dest_addr())) {
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	4b75      	ldr	r3, [pc, #468]	; (8008f54 <tcp_input+0x74c>)
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d00f      	beq.n	8008da6 <tcp_input+0x59e>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00d      	beq.n	8008da8 <tcp_input+0x5a0>
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d009      	beq.n	8008da8 <tcp_input+0x5a0>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	617b      	str	r3, [r7, #20]
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1d1      	bne.n	8008d48 <tcp_input+0x540>
 8008da4:	e000      	b.n	8008da8 <tcp_input+0x5a0>
            break;
 8008da6:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d01d      	beq.n	8008dea <tcp_input+0x5e2>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00b      	beq.n	8008dcc <tcp_input+0x5c4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	68da      	ldr	r2, [r3, #12]
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008dbc:	4b67      	ldr	r3, [pc, #412]	; (8008f5c <tcp_input+0x754>)
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008dc4:	4a65      	ldr	r2, [pc, #404]	; (8008f5c <tcp_input+0x754>)
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	6013      	str	r3, [r2, #0]
 8008dca:	e007      	b.n	8008ddc <tcp_input+0x5d4>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8008dcc:	4b64      	ldr	r3, [pc, #400]	; (8008f60 <tcp_input+0x758>)
 8008dce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	4b62      	ldr	r3, [pc, #392]	; (8008f60 <tcp_input+0x758>)
 8008dd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008ddc:	6978      	ldr	r0, [r7, #20]
 8008dde:	f000 fa19 	bl	8009214 <tcp_listen_input>
      }
      pbuf_free(p);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7fd f9e6 	bl	80061b4 <pbuf_free>
      return;
 8008de8:	e1b2      	b.n	8009150 <tcp_input+0x948>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 8167 	beq.w	80090c0 <tcp_input+0x8b8>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008df2:	4b5c      	ldr	r3, [pc, #368]	; (8008f64 <tcp_input+0x75c>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	891a      	ldrh	r2, [r3, #8]
 8008dfc:	4b59      	ldr	r3, [pc, #356]	; (8008f64 <tcp_input+0x75c>)
 8008dfe:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008e00:	4a58      	ldr	r2, [pc, #352]	; (8008f64 <tcp_input+0x75c>)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008e06:	4b54      	ldr	r3, [pc, #336]	; (8008f58 <tcp_input+0x750>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a56      	ldr	r2, [pc, #344]	; (8008f64 <tcp_input+0x75c>)
 8008e0c:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8008e0e:	4b56      	ldr	r3, [pc, #344]	; (8008f68 <tcp_input+0x760>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008e14:	4b55      	ldr	r3, [pc, #340]	; (8008f6c <tcp_input+0x764>)
 8008e16:	2200      	movs	r2, #0
 8008e18:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008e1a:	4b55      	ldr	r3, [pc, #340]	; (8008f70 <tcp_input+0x768>)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008e20:	4b54      	ldr	r3, [pc, #336]	; (8008f74 <tcp_input+0x76c>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	f003 0308 	and.w	r3, r3, #8
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d006      	beq.n	8008e3a <tcp_input+0x632>
      p->flags |= PBUF_FLAG_PUSH;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	7b5b      	ldrb	r3, [r3, #13]
 8008e30:	f043 0301 	orr.w	r3, r3, #1
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d01e      	beq.n	8008e80 <tcp_input+0x678>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008e42:	69f8      	ldr	r0, [r7, #28]
 8008e44:	f7fe ff74 	bl	8007d30 <tcp_process_refused_data>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	f113 0f0d 	cmn.w	r3, #13
 8008e4e:	d007      	beq.n	8008e60 <tcp_input+0x658>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d013      	beq.n	8008e80 <tcp_input+0x678>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008e58:	4b47      	ldr	r3, [pc, #284]	; (8008f78 <tcp_input+0x770>)
 8008e5a:	881b      	ldrh	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00f      	beq.n	8008e80 <tcp_input+0x678>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d102      	bne.n	8008e6e <tcp_input+0x666>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008e68:	69f8      	ldr	r0, [r7, #28]
 8008e6a:	f004 f8f9 	bl	800d060 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8008e6e:	4b3c      	ldr	r3, [pc, #240]	; (8008f60 <tcp_input+0x758>)
 8008e70:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8008e74:	3301      	adds	r3, #1
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	4b39      	ldr	r3, [pc, #228]	; (8008f60 <tcp_input+0x758>)
 8008e7a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008e7e:	e10c      	b.n	800909a <tcp_input+0x892>
      }
    }
    tcp_input_pcb = pcb;
 8008e80:	4a3e      	ldr	r2, [pc, #248]	; (8008f7c <tcp_input+0x774>)
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008e86:	69f8      	ldr	r0, [r7, #28]
 8008e88:	f000 fb52 	bl	8009530 <tcp_process>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008e90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008e94:	f113 0f0d 	cmn.w	r3, #13
 8008e98:	f000 80ff 	beq.w	800909a <tcp_input+0x892>
      if (recv_flags & TF_RESET) {
 8008e9c:	4b33      	ldr	r3, [pc, #204]	; (8008f6c <tcp_input+0x764>)
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	f003 0308 	and.w	r3, r3, #8
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d015      	beq.n	8008ed4 <tcp_input+0x6cc>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d008      	beq.n	8008ec4 <tcp_input+0x6bc>
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eb8:	69fa      	ldr	r2, [r7, #28]
 8008eba:	6912      	ldr	r2, [r2, #16]
 8008ebc:	f06f 010d 	mvn.w	r1, #13
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008ec4:	69f9      	ldr	r1, [r7, #28]
 8008ec6:	482e      	ldr	r0, [pc, #184]	; (8008f80 <tcp_input+0x778>)
 8008ec8:	f7ff fb00 	bl	80084cc <tcp_pcb_remove>
        tcp_free(pcb);
 8008ecc:	69f8      	ldr	r0, [r7, #28]
 8008ece:	f7fd fd8b 	bl	80069e8 <tcp_free>
 8008ed2:	e0e2      	b.n	800909a <tcp_input+0x892>
      } else {
        err = ERR_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008ed8:	4b25      	ldr	r3, [pc, #148]	; (8008f70 <tcp_input+0x768>)
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d01d      	beq.n	8008f1c <tcp_input+0x714>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008ee0:	4b23      	ldr	r3, [pc, #140]	; (8008f70 <tcp_input+0x768>)
 8008ee2:	881b      	ldrh	r3, [r3, #0]
 8008ee4:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00a      	beq.n	8008f06 <tcp_input+0x6fe>
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ef6:	69fa      	ldr	r2, [r7, #28]
 8008ef8:	6910      	ldr	r0, [r2, #16]
 8008efa:	897a      	ldrh	r2, [r7, #10]
 8008efc:	69f9      	ldr	r1, [r7, #28]
 8008efe:	4798      	blx	r3
 8008f00:	4603      	mov	r3, r0
 8008f02:	74fb      	strb	r3, [r7, #19]
 8008f04:	e001      	b.n	8008f0a <tcp_input+0x702>
 8008f06:	2300      	movs	r3, #0
 8008f08:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008f0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f0e:	f113 0f0d 	cmn.w	r3, #13
 8008f12:	f000 80b9 	beq.w	8009088 <tcp_input+0x880>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008f16:	4b16      	ldr	r3, [pc, #88]	; (8008f70 <tcp_input+0x768>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008f1c:	69f8      	ldr	r0, [r7, #28]
 8008f1e:	f000 f933 	bl	8009188 <tcp_input_delayed_close>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f040 80b1 	bne.w	800908c <tcp_input+0x884>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008f2a:	4b0f      	ldr	r3, [pc, #60]	; (8008f68 <tcp_input+0x760>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d065      	beq.n	8008ffe <tcp_input+0x7f6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d02a      	beq.n	8008f90 <tcp_input+0x788>
 8008f3a:	4b12      	ldr	r3, [pc, #72]	; (8008f84 <tcp_input+0x77c>)
 8008f3c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008f40:	4911      	ldr	r1, [pc, #68]	; (8008f88 <tcp_input+0x780>)
 8008f42:	4812      	ldr	r0, [pc, #72]	; (8008f8c <tcp_input+0x784>)
 8008f44:	f00a fe54 	bl	8013bf0 <iprintf>
 8008f48:	2000      	movs	r0, #0
 8008f4a:	f00a ff53 	bl	8013df4 <fflush>
 8008f4e:	f00a fe98 	bl	8013c82 <abort>
 8008f52:	bf00      	nop
 8008f54:	20000880 	.word	0x20000880
 8008f58:	20000714 	.word	0x20000714
 8008f5c:	200022cc 	.word	0x200022cc
 8008f60:	2000221c 	.word	0x2000221c
 8008f64:	20000700 	.word	0x20000700
 8008f68:	20000734 	.word	0x20000734
 8008f6c:	20000731 	.word	0x20000731
 8008f70:	2000072c 	.word	0x2000072c
 8008f74:	20000730 	.word	0x20000730
 8008f78:	2000072e 	.word	0x2000072e
 8008f7c:	200022d8 	.word	0x200022d8
 8008f80:	200022c4 	.word	0x200022c4
 8008f84:	08016d14 	.word	0x08016d14
 8008f88:	08016eb8 	.word	0x08016eb8
 8008f8c:	08016d50 	.word	0x08016d50
          if (pcb->flags & TF_RXCLOSED) {
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	8b5b      	ldrh	r3, [r3, #26]
 8008f94:	f003 0310 	and.w	r3, r3, #16
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d008      	beq.n	8008fae <tcp_input+0x7a6>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008f9c:	4b6e      	ldr	r3, [pc, #440]	; (8009158 <tcp_input+0x950>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fd f907 	bl	80061b4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008fa6:	69f8      	ldr	r0, [r7, #28]
 8008fa8:	f7fe f82e 	bl	8007008 <tcp_abort>
            goto aborted;
 8008fac:	e075      	b.n	800909a <tcp_input+0x892>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00c      	beq.n	8008fd2 <tcp_input+0x7ca>
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	6918      	ldr	r0, [r3, #16]
 8008fc2:	4b65      	ldr	r3, [pc, #404]	; (8009158 <tcp_input+0x950>)
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	69f9      	ldr	r1, [r7, #28]
 8008fca:	47a0      	blx	r4
 8008fcc:	4603      	mov	r3, r0
 8008fce:	74fb      	strb	r3, [r7, #19]
 8008fd0:	e008      	b.n	8008fe4 <tcp_input+0x7dc>
 8008fd2:	4b61      	ldr	r3, [pc, #388]	; (8009158 <tcp_input+0x950>)
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	69f9      	ldr	r1, [r7, #28]
 8008fda:	2000      	movs	r0, #0
 8008fdc:	f7fe ff84 	bl	8007ee8 <tcp_recv_null>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008fe4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008fe8:	f113 0f0d 	cmn.w	r3, #13
 8008fec:	d050      	beq.n	8009090 <tcp_input+0x888>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008fee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d003      	beq.n	8008ffe <tcp_input+0x7f6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008ff6:	4b58      	ldr	r3, [pc, #352]	; (8009158 <tcp_input+0x950>)
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008ffe:	4b57      	ldr	r3, [pc, #348]	; (800915c <tcp_input+0x954>)
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	f003 0320 	and.w	r3, r3, #32
 8009006:	2b00      	cmp	r3, #0
 8009008:	d031      	beq.n	800906e <tcp_input+0x866>
          if (pcb->refused_data != NULL) {
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800900e:	2b00      	cmp	r3, #0
 8009010:	d009      	beq.n	8009026 <tcp_input+0x81e>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009016:	69fa      	ldr	r2, [r7, #28]
 8009018:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800901a:	7b52      	ldrb	r2, [r2, #13]
 800901c:	f042 0220 	orr.w	r2, r2, #32
 8009020:	b2d2      	uxtb	r2, r2
 8009022:	735a      	strb	r2, [r3, #13]
 8009024:	e023      	b.n	800906e <tcp_input+0x866>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800902a:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800902e:	4293      	cmp	r3, r2
 8009030:	d005      	beq.n	800903e <tcp_input+0x836>
              pcb->rcv_wnd++;
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009036:	3301      	adds	r3, #1
 8009038:	b29a      	uxth	r2, r3
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00b      	beq.n	8009060 <tcp_input+0x858>
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	6918      	ldr	r0, [r3, #16]
 8009052:	2300      	movs	r3, #0
 8009054:	2200      	movs	r2, #0
 8009056:	69f9      	ldr	r1, [r7, #28]
 8009058:	47a0      	blx	r4
 800905a:	4603      	mov	r3, r0
 800905c:	74fb      	strb	r3, [r7, #19]
 800905e:	e001      	b.n	8009064 <tcp_input+0x85c>
 8009060:	2300      	movs	r3, #0
 8009062:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009064:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009068:	f113 0f0d 	cmn.w	r3, #13
 800906c:	d012      	beq.n	8009094 <tcp_input+0x88c>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800906e:	4b3c      	ldr	r3, [pc, #240]	; (8009160 <tcp_input+0x958>)
 8009070:	2200      	movs	r2, #0
 8009072:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009074:	69f8      	ldr	r0, [r7, #28]
 8009076:	f000 f887 	bl	8009188 <tcp_input_delayed_close>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10b      	bne.n	8009098 <tcp_input+0x890>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009080:	69f8      	ldr	r0, [r7, #28]
 8009082:	f003 f8bd 	bl	800c200 <tcp_output>
 8009086:	e008      	b.n	800909a <tcp_input+0x892>
              goto aborted;
 8009088:	bf00      	nop
 800908a:	e006      	b.n	800909a <tcp_input+0x892>
          goto aborted;
 800908c:	bf00      	nop
 800908e:	e004      	b.n	800909a <tcp_input+0x892>
            goto aborted;
 8009090:	bf00      	nop
 8009092:	e002      	b.n	800909a <tcp_input+0x892>
              goto aborted;
 8009094:	bf00      	nop
 8009096:	e000      	b.n	800909a <tcp_input+0x892>
          goto aborted;
 8009098:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 800909a:	4b31      	ldr	r3, [pc, #196]	; (8009160 <tcp_input+0x958>)
 800909c:	2200      	movs	r2, #0
 800909e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80090a0:	4b2d      	ldr	r3, [pc, #180]	; (8009158 <tcp_input+0x950>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80090a6:	4b2f      	ldr	r3, [pc, #188]	; (8009164 <tcp_input+0x95c>)
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d04f      	beq.n	800914e <tcp_input+0x946>
      pbuf_free(inseg.p);
 80090ae:	4b2d      	ldr	r3, [pc, #180]	; (8009164 <tcp_input+0x95c>)
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fd f87e 	bl	80061b4 <pbuf_free>
      inseg.p = NULL;
 80090b8:	4b2a      	ldr	r3, [pc, #168]	; (8009164 <tcp_input+0x95c>)
 80090ba:	2200      	movs	r2, #0
 80090bc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80090be:	e046      	b.n	800914e <tcp_input+0x946>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80090c0:	4b29      	ldr	r3, [pc, #164]	; (8009168 <tcp_input+0x960>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	899b      	ldrh	r3, [r3, #12]
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fa ff61 	bl	8003f90 <lwip_htons>
 80090ce:	4603      	mov	r3, r0
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	f003 0304 	and.w	r3, r3, #4
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d129      	bne.n	800912e <tcp_input+0x926>
      TCP_STATS_INC(tcp.proterr);
 80090da:	4b24      	ldr	r3, [pc, #144]	; (800916c <tcp_input+0x964>)
 80090dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80090e0:	3301      	adds	r3, #1
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	4b21      	ldr	r3, [pc, #132]	; (800916c <tcp_input+0x964>)
 80090e6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
      TCP_STATS_INC(tcp.drop);
 80090ea:	4b20      	ldr	r3, [pc, #128]	; (800916c <tcp_input+0x964>)
 80090ec:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80090f0:	3301      	adds	r3, #1
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	4b1d      	ldr	r3, [pc, #116]	; (800916c <tcp_input+0x964>)
 80090f6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80090fa:	4b1d      	ldr	r3, [pc, #116]	; (8009170 <tcp_input+0x968>)
 80090fc:	6858      	ldr	r0, [r3, #4]
 80090fe:	4b1d      	ldr	r3, [pc, #116]	; (8009174 <tcp_input+0x96c>)
 8009100:	6819      	ldr	r1, [r3, #0]
 8009102:	4b1d      	ldr	r3, [pc, #116]	; (8009178 <tcp_input+0x970>)
 8009104:	881b      	ldrh	r3, [r3, #0]
 8009106:	461a      	mov	r2, r3
 8009108:	4b1c      	ldr	r3, [pc, #112]	; (800917c <tcp_input+0x974>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	18d4      	adds	r4, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800910e:	4b16      	ldr	r3, [pc, #88]	; (8009168 <tcp_input+0x960>)
 8009110:	681b      	ldr	r3, [r3, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009112:	885b      	ldrh	r3, [r3, #2]
 8009114:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009116:	4a14      	ldr	r2, [pc, #80]	; (8009168 <tcp_input+0x960>)
 8009118:	6812      	ldr	r2, [r2, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800911a:	8812      	ldrh	r2, [r2, #0]
 800911c:	b292      	uxth	r2, r2
 800911e:	9202      	str	r2, [sp, #8]
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	4b17      	ldr	r3, [pc, #92]	; (8009180 <tcp_input+0x978>)
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	4b17      	ldr	r3, [pc, #92]	; (8009184 <tcp_input+0x97c>)
 8009128:	4622      	mov	r2, r4
 800912a:	f003 ff72 	bl	800d012 <tcp_rst_netif>
    pbuf_free(p);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7fd f840 	bl	80061b4 <pbuf_free>
  return;
 8009134:	e00b      	b.n	800914e <tcp_input+0x946>
dropped:
  TCP_STATS_INC(tcp.drop);
 8009136:	4b0d      	ldr	r3, [pc, #52]	; (800916c <tcp_input+0x964>)
 8009138:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800913c:	3301      	adds	r3, #1
 800913e:	b29a      	uxth	r2, r3
 8009140:	4b0a      	ldr	r3, [pc, #40]	; (800916c <tcp_input+0x964>)
 8009142:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7fd f834 	bl	80061b4 <pbuf_free>
 800914c:	e000      	b.n	8009150 <tcp_input+0x948>
  return;
 800914e:	bf00      	nop
}
 8009150:	3724      	adds	r7, #36	; 0x24
 8009152:	46bd      	mov	sp, r7
 8009154:	bd90      	pop	{r4, r7, pc}
 8009156:	bf00      	nop
 8009158:	20000734 	.word	0x20000734
 800915c:	20000731 	.word	0x20000731
 8009160:	200022d8 	.word	0x200022d8
 8009164:	20000700 	.word	0x20000700
 8009168:	20000714 	.word	0x20000714
 800916c:	2000221c 	.word	0x2000221c
 8009170:	20000880 	.word	0x20000880
 8009174:	20000728 	.word	0x20000728
 8009178:	2000072e 	.word	0x2000072e
 800917c:	20000724 	.word	0x20000724
 8009180:	20000890 	.word	0x20000890
 8009184:	20000894 	.word	0x20000894

08009188 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10b      	bne.n	80091ae <tcp_input_delayed_close+0x26>
 8009196:	4b1a      	ldr	r3, [pc, #104]	; (8009200 <tcp_input_delayed_close+0x78>)
 8009198:	f240 225a 	movw	r2, #602	; 0x25a
 800919c:	4919      	ldr	r1, [pc, #100]	; (8009204 <tcp_input_delayed_close+0x7c>)
 800919e:	481a      	ldr	r0, [pc, #104]	; (8009208 <tcp_input_delayed_close+0x80>)
 80091a0:	f00a fd26 	bl	8013bf0 <iprintf>
 80091a4:	2000      	movs	r0, #0
 80091a6:	f00a fe25 	bl	8013df4 <fflush>
 80091aa:	f00a fd6a 	bl	8013c82 <abort>

  if (recv_flags & TF_CLOSED) {
 80091ae:	4b17      	ldr	r3, [pc, #92]	; (800920c <tcp_input_delayed_close+0x84>)
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	f003 0310 	and.w	r3, r3, #16
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d01c      	beq.n	80091f4 <tcp_input_delayed_close+0x6c>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	8b5b      	ldrh	r3, [r3, #26]
 80091be:	f003 0310 	and.w	r3, r3, #16
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10d      	bne.n	80091e2 <tcp_input_delayed_close+0x5a>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d008      	beq.n	80091e2 <tcp_input_delayed_close+0x5a>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	6912      	ldr	r2, [r2, #16]
 80091da:	f06f 010e 	mvn.w	r1, #14
 80091de:	4610      	mov	r0, r2
 80091e0:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80091e2:	6879      	ldr	r1, [r7, #4]
 80091e4:	480a      	ldr	r0, [pc, #40]	; (8009210 <tcp_input_delayed_close+0x88>)
 80091e6:	f7ff f971 	bl	80084cc <tcp_pcb_remove>
    tcp_free(pcb);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7fd fbfc 	bl	80069e8 <tcp_free>
    return 1;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e000      	b.n	80091f6 <tcp_input_delayed_close+0x6e>
  }
  return 0;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3708      	adds	r7, #8
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	08016d14 	.word	0x08016d14
 8009204:	08016ed4 	.word	0x08016ed4
 8009208:	08016d50 	.word	0x08016d50
 800920c:	20000731 	.word	0x20000731
 8009210:	200022c4 	.word	0x200022c4

08009214 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009214:	b590      	push	{r4, r7, lr}
 8009216:	b08b      	sub	sp, #44	; 0x2c
 8009218:	af04      	add	r7, sp, #16
 800921a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800921c:	4b76      	ldr	r3, [pc, #472]	; (80093f8 <tcp_listen_input+0x1e4>)
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	f003 0304 	and.w	r3, r3, #4
 8009224:	2b00      	cmp	r3, #0
 8009226:	f040 80e1 	bne.w	80093ec <tcp_listen_input+0x1d8>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10b      	bne.n	8009248 <tcp_listen_input+0x34>
 8009230:	4b72      	ldr	r3, [pc, #456]	; (80093fc <tcp_listen_input+0x1e8>)
 8009232:	f240 2281 	movw	r2, #641	; 0x281
 8009236:	4972      	ldr	r1, [pc, #456]	; (8009400 <tcp_listen_input+0x1ec>)
 8009238:	4872      	ldr	r0, [pc, #456]	; (8009404 <tcp_listen_input+0x1f0>)
 800923a:	f00a fcd9 	bl	8013bf0 <iprintf>
 800923e:	2000      	movs	r0, #0
 8009240:	f00a fdd8 	bl	8013df4 <fflush>
 8009244:	f00a fd1d 	bl	8013c82 <abort>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009248:	4b6b      	ldr	r3, [pc, #428]	; (80093f8 <tcp_listen_input+0x1e4>)
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	f003 0310 	and.w	r3, r3, #16
 8009250:	2b00      	cmp	r3, #0
 8009252:	d01a      	beq.n	800928a <tcp_listen_input+0x76>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009254:	4b6c      	ldr	r3, [pc, #432]	; (8009408 <tcp_listen_input+0x1f4>)
 8009256:	6858      	ldr	r0, [r3, #4]
 8009258:	4b6c      	ldr	r3, [pc, #432]	; (800940c <tcp_listen_input+0x1f8>)
 800925a:	6819      	ldr	r1, [r3, #0]
 800925c:	4b6c      	ldr	r3, [pc, #432]	; (8009410 <tcp_listen_input+0x1fc>)
 800925e:	881b      	ldrh	r3, [r3, #0]
 8009260:	461a      	mov	r2, r3
 8009262:	4b6c      	ldr	r3, [pc, #432]	; (8009414 <tcp_listen_input+0x200>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	18d4      	adds	r4, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009268:	4b6b      	ldr	r3, [pc, #428]	; (8009418 <tcp_listen_input+0x204>)
 800926a:	681b      	ldr	r3, [r3, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800926c:	885b      	ldrh	r3, [r3, #2]
 800926e:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009270:	4a69      	ldr	r2, [pc, #420]	; (8009418 <tcp_listen_input+0x204>)
 8009272:	6812      	ldr	r2, [r2, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009274:	8812      	ldrh	r2, [r2, #0]
 8009276:	b292      	uxth	r2, r2
 8009278:	9202      	str	r2, [sp, #8]
 800927a:	9301      	str	r3, [sp, #4]
 800927c:	4b67      	ldr	r3, [pc, #412]	; (800941c <tcp_listen_input+0x208>)
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	4b67      	ldr	r3, [pc, #412]	; (8009420 <tcp_listen_input+0x20c>)
 8009282:	4622      	mov	r2, r4
 8009284:	f003 fec5 	bl	800d012 <tcp_rst_netif>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009288:	e0b2      	b.n	80093f0 <tcp_listen_input+0x1dc>
  } else if (flags & TCP_SYN) {
 800928a:	4b5b      	ldr	r3, [pc, #364]	; (80093f8 <tcp_listen_input+0x1e4>)
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	2b00      	cmp	r3, #0
 8009294:	f000 80ac 	beq.w	80093f0 <tcp_listen_input+0x1dc>
    npcb = tcp_alloc(pcb->prio);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	7d5b      	ldrb	r3, [r3, #21]
 800929c:	4618      	mov	r0, r3
 800929e:	f7fe ff4d 	bl	800813c <tcp_alloc>
 80092a2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d119      	bne.n	80092de <tcp_listen_input+0xca>
      TCP_STATS_INC(tcp.memerr);
 80092aa:	4b5e      	ldr	r3, [pc, #376]	; (8009424 <tcp_listen_input+0x210>)
 80092ac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80092b0:	3301      	adds	r3, #1
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	4b5b      	ldr	r3, [pc, #364]	; (8009424 <tcp_listen_input+0x210>)
 80092b6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00a      	beq.n	80092d8 <tcp_listen_input+0xc4>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	6910      	ldr	r0, [r2, #16]
 80092ca:	f04f 32ff 	mov.w	r2, #4294967295
 80092ce:	2100      	movs	r1, #0
 80092d0:	4798      	blx	r3
 80092d2:	4603      	mov	r3, r0
 80092d4:	74fb      	strb	r3, [r7, #19]
      return;
 80092d6:	e08c      	b.n	80093f2 <tcp_listen_input+0x1de>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80092d8:	23f0      	movs	r3, #240	; 0xf0
 80092da:	74fb      	strb	r3, [r7, #19]
      return;
 80092dc:	e089      	b.n	80093f2 <tcp_listen_input+0x1de>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80092de:	4b4a      	ldr	r3, [pc, #296]	; (8009408 <tcp_listen_input+0x1f4>)
 80092e0:	695a      	ldr	r2, [r3, #20]
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80092e6:	4b48      	ldr	r3, [pc, #288]	; (8009408 <tcp_listen_input+0x1f4>)
 80092e8:	691a      	ldr	r2, [r3, #16]
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	8ada      	ldrh	r2, [r3, #22]
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80092f6:	4b48      	ldr	r3, [pc, #288]	; (8009418 <tcp_listen_input+0x204>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	881b      	ldrh	r3, [r3, #0]
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	2203      	movs	r2, #3
 8009306:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009308:	4b42      	ldr	r3, [pc, #264]	; (8009414 <tcp_listen_input+0x200>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	1c5a      	adds	r2, r3, #1
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800931a:	6978      	ldr	r0, [r7, #20]
 800931c:	f7ff f982 	bl	8008624 <tcp_next_iss>
 8009320:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800933a:	4b36      	ldr	r3, [pc, #216]	; (8009414 <tcp_listen_input+0x200>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	1e5a      	subs	r2, r3, #1
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	691a      	ldr	r2, [r3, #16]
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	7a5b      	ldrb	r3, [r3, #9]
 8009356:	f003 030c 	and.w	r3, r3, #12
 800935a:	b2da      	uxtb	r2, r3
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	7a1a      	ldrb	r2, [r3, #8]
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009368:	4b2f      	ldr	r3, [pc, #188]	; (8009428 <tcp_listen_input+0x214>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	60da      	str	r2, [r3, #12]
 8009370:	4a2d      	ldr	r2, [pc, #180]	; (8009428 <tcp_listen_input+0x214>)
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	6013      	str	r3, [r2, #0]
 8009376:	f003 fff5 	bl	800d364 <tcp_timer_needed>
 800937a:	4b2c      	ldr	r3, [pc, #176]	; (800942c <tcp_listen_input+0x218>)
 800937c:	2201      	movs	r2, #1
 800937e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009380:	6978      	ldr	r0, [r7, #20]
 8009382:	f001 fe05 	bl	800af90 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009386:	4b24      	ldr	r3, [pc, #144]	; (8009418 <tcp_listen_input+0x204>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	89db      	ldrh	r3, [r3, #14]
 800938c:	b29a      	uxth	r2, r3
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	3304      	adds	r3, #4
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fa ff65 	bl	8004278 <ip4_route>
 80093ae:	4601      	mov	r1, r0
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	3304      	adds	r3, #4
 80093b4:	461a      	mov	r2, r3
 80093b6:	4620      	mov	r0, r4
 80093b8:	f7ff f95e 	bl	8008678 <tcp_eff_send_mss_netif>
 80093bc:	4603      	mov	r3, r0
 80093be:	461a      	mov	r2, r3
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80093c4:	2112      	movs	r1, #18
 80093c6:	6978      	ldr	r0, [r7, #20]
 80093c8:	f002 fe0e 	bl	800bfe8 <tcp_enqueue_flags>
 80093cc:	4603      	mov	r3, r0
 80093ce:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 80093d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d004      	beq.n	80093e2 <tcp_listen_input+0x1ce>
      tcp_abandon(npcb, 0);
 80093d8:	2100      	movs	r1, #0
 80093da:	6978      	ldr	r0, [r7, #20]
 80093dc:	f7fd fd52 	bl	8006e84 <tcp_abandon>
      return;
 80093e0:	e007      	b.n	80093f2 <tcp_listen_input+0x1de>
    tcp_output(npcb);
 80093e2:	6978      	ldr	r0, [r7, #20]
 80093e4:	f002 ff0c 	bl	800c200 <tcp_output>
  return;
 80093e8:	bf00      	nop
 80093ea:	e001      	b.n	80093f0 <tcp_listen_input+0x1dc>
    return;
 80093ec:	bf00      	nop
 80093ee:	e000      	b.n	80093f2 <tcp_listen_input+0x1de>
  return;
 80093f0:	bf00      	nop
}
 80093f2:	371c      	adds	r7, #28
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd90      	pop	{r4, r7, pc}
 80093f8:	20000730 	.word	0x20000730
 80093fc:	08016d14 	.word	0x08016d14
 8009400:	08016efc 	.word	0x08016efc
 8009404:	08016d50 	.word	0x08016d50
 8009408:	20000880 	.word	0x20000880
 800940c:	20000728 	.word	0x20000728
 8009410:	2000072e 	.word	0x2000072e
 8009414:	20000724 	.word	0x20000724
 8009418:	20000714 	.word	0x20000714
 800941c:	20000890 	.word	0x20000890
 8009420:	20000894 	.word	0x20000894
 8009424:	2000221c 	.word	0x2000221c
 8009428:	200022c4 	.word	0x200022c4
 800942c:	200022c0 	.word	0x200022c0

08009430 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af04      	add	r7, sp, #16
 8009436:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009438:	4b32      	ldr	r3, [pc, #200]	; (8009504 <tcp_timewait_input+0xd4>)
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	f003 0304 	and.w	r3, r3, #4
 8009440:	2b00      	cmp	r3, #0
 8009442:	d159      	bne.n	80094f8 <tcp_timewait_input+0xc8>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10b      	bne.n	8009462 <tcp_timewait_input+0x32>
 800944a:	4b2f      	ldr	r3, [pc, #188]	; (8009508 <tcp_timewait_input+0xd8>)
 800944c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009450:	492e      	ldr	r1, [pc, #184]	; (800950c <tcp_timewait_input+0xdc>)
 8009452:	482f      	ldr	r0, [pc, #188]	; (8009510 <tcp_timewait_input+0xe0>)
 8009454:	f00a fbcc 	bl	8013bf0 <iprintf>
 8009458:	2000      	movs	r0, #0
 800945a:	f00a fccb 	bl	8013df4 <fflush>
 800945e:	f00a fc10 	bl	8013c82 <abort>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009462:	4b28      	ldr	r3, [pc, #160]	; (8009504 <tcp_timewait_input+0xd4>)
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	f003 0302 	and.w	r3, r3, #2
 800946a:	2b00      	cmp	r3, #0
 800946c:	d02a      	beq.n	80094c4 <tcp_timewait_input+0x94>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800946e:	4b29      	ldr	r3, [pc, #164]	; (8009514 <tcp_timewait_input+0xe4>)
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	2b00      	cmp	r3, #0
 800947a:	db2d      	blt.n	80094d8 <tcp_timewait_input+0xa8>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009484:	441a      	add	r2, r3
 8009486:	4b23      	ldr	r3, [pc, #140]	; (8009514 <tcp_timewait_input+0xe4>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	2b00      	cmp	r3, #0
 800948e:	db23      	blt.n	80094d8 <tcp_timewait_input+0xa8>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009490:	4b21      	ldr	r3, [pc, #132]	; (8009518 <tcp_timewait_input+0xe8>)
 8009492:	6819      	ldr	r1, [r3, #0]
 8009494:	4b21      	ldr	r3, [pc, #132]	; (800951c <tcp_timewait_input+0xec>)
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	461a      	mov	r2, r3
 800949a:	4b1e      	ldr	r3, [pc, #120]	; (8009514 <tcp_timewait_input+0xe4>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094a0:	4b1f      	ldr	r3, [pc, #124]	; (8009520 <tcp_timewait_input+0xf0>)
 80094a2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094a4:	885b      	ldrh	r3, [r3, #2]
 80094a6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094a8:	4a1d      	ldr	r2, [pc, #116]	; (8009520 <tcp_timewait_input+0xf0>)
 80094aa:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094ac:	8812      	ldrh	r2, [r2, #0]
 80094ae:	b292      	uxth	r2, r2
 80094b0:	9202      	str	r2, [sp, #8]
 80094b2:	9301      	str	r3, [sp, #4]
 80094b4:	4b1b      	ldr	r3, [pc, #108]	; (8009524 <tcp_timewait_input+0xf4>)
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	4b1b      	ldr	r3, [pc, #108]	; (8009528 <tcp_timewait_input+0xf8>)
 80094ba:	4602      	mov	r2, r0
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f003 fd87 	bl	800cfd0 <tcp_rst>
      return;
 80094c2:	e01c      	b.n	80094fe <tcp_timewait_input+0xce>
    }
  } else if (flags & TCP_FIN) {
 80094c4:	4b0f      	ldr	r3, [pc, #60]	; (8009504 <tcp_timewait_input+0xd4>)
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	f003 0301 	and.w	r3, r3, #1
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d003      	beq.n	80094d8 <tcp_timewait_input+0xa8>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80094d0:	4b16      	ldr	r3, [pc, #88]	; (800952c <tcp_timewait_input+0xfc>)
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80094d8:	4b10      	ldr	r3, [pc, #64]	; (800951c <tcp_timewait_input+0xec>)
 80094da:	881b      	ldrh	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00d      	beq.n	80094fc <tcp_timewait_input+0xcc>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	8b5b      	ldrh	r3, [r3, #26]
 80094e4:	f043 0302 	orr.w	r3, r3, #2
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f002 fe86 	bl	800c200 <tcp_output>
  }
  return;
 80094f4:	bf00      	nop
 80094f6:	e001      	b.n	80094fc <tcp_timewait_input+0xcc>
    return;
 80094f8:	bf00      	nop
 80094fa:	e000      	b.n	80094fe <tcp_timewait_input+0xce>
  return;
 80094fc:	bf00      	nop
}
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	20000730 	.word	0x20000730
 8009508:	08016d14 	.word	0x08016d14
 800950c:	08016f1c 	.word	0x08016f1c
 8009510:	08016d50 	.word	0x08016d50
 8009514:	20000724 	.word	0x20000724
 8009518:	20000728 	.word	0x20000728
 800951c:	2000072e 	.word	0x2000072e
 8009520:	20000714 	.word	0x20000714
 8009524:	20000890 	.word	0x20000890
 8009528:	20000894 	.word	0x20000894
 800952c:	200022c8 	.word	0x200022c8

08009530 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009530:	b590      	push	{r4, r7, lr}
 8009532:	b08d      	sub	sp, #52	; 0x34
 8009534:	af04      	add	r7, sp, #16
 8009536:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009538:	2300      	movs	r3, #0
 800953a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10b      	bne.n	800955e <tcp_process+0x2e>
 8009546:	4b9c      	ldr	r3, [pc, #624]	; (80097b8 <tcp_process+0x288>)
 8009548:	f240 321f 	movw	r2, #799	; 0x31f
 800954c:	499b      	ldr	r1, [pc, #620]	; (80097bc <tcp_process+0x28c>)
 800954e:	489c      	ldr	r0, [pc, #624]	; (80097c0 <tcp_process+0x290>)
 8009550:	f00a fb4e 	bl	8013bf0 <iprintf>
 8009554:	2000      	movs	r0, #0
 8009556:	f00a fc4d 	bl	8013df4 <fflush>
 800955a:	f00a fb92 	bl	8013c82 <abort>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800955e:	4b99      	ldr	r3, [pc, #612]	; (80097c4 <tcp_process+0x294>)
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	f003 0304 	and.w	r3, r3, #4
 8009566:	2b00      	cmp	r3, #0
 8009568:	d053      	beq.n	8009612 <tcp_process+0xe2>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	7d1b      	ldrb	r3, [r3, #20]
 800956e:	2b02      	cmp	r3, #2
 8009570:	d108      	bne.n	8009584 <tcp_process+0x54>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009576:	4b94      	ldr	r3, [pc, #592]	; (80097c8 <tcp_process+0x298>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	429a      	cmp	r2, r3
 800957c:	d123      	bne.n	80095c6 <tcp_process+0x96>
        acceptable = 1;
 800957e:	2301      	movs	r3, #1
 8009580:	76fb      	strb	r3, [r7, #27]
 8009582:	e020      	b.n	80095c6 <tcp_process+0x96>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009588:	4b90      	ldr	r3, [pc, #576]	; (80097cc <tcp_process+0x29c>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	429a      	cmp	r2, r3
 800958e:	d102      	bne.n	8009596 <tcp_process+0x66>
        acceptable = 1;
 8009590:	2301      	movs	r3, #1
 8009592:	76fb      	strb	r3, [r7, #27]
 8009594:	e017      	b.n	80095c6 <tcp_process+0x96>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009596:	4b8d      	ldr	r3, [pc, #564]	; (80097cc <tcp_process+0x29c>)
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	db10      	blt.n	80095c6 <tcp_process+0x96>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80095ac:	441a      	add	r2, r3
 80095ae:	4b87      	ldr	r3, [pc, #540]	; (80097cc <tcp_process+0x29c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	db06      	blt.n	80095c6 <tcp_process+0x96>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	8b5b      	ldrh	r3, [r3, #26]
 80095bc:	f043 0302 	orr.w	r3, r3, #2
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80095c6:	7efb      	ldrb	r3, [r7, #27]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d020      	beq.n	800960e <tcp_process+0xde>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	7d1b      	ldrb	r3, [r3, #20]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10b      	bne.n	80095ec <tcp_process+0xbc>
 80095d4:	4b78      	ldr	r3, [pc, #480]	; (80097b8 <tcp_process+0x288>)
 80095d6:	f240 323b 	movw	r2, #827	; 0x33b
 80095da:	497d      	ldr	r1, [pc, #500]	; (80097d0 <tcp_process+0x2a0>)
 80095dc:	4878      	ldr	r0, [pc, #480]	; (80097c0 <tcp_process+0x290>)
 80095de:	f00a fb07 	bl	8013bf0 <iprintf>
 80095e2:	2000      	movs	r0, #0
 80095e4:	f00a fc06 	bl	8013df4 <fflush>
 80095e8:	f00a fb4b 	bl	8013c82 <abort>
      recv_flags |= TF_RESET;
 80095ec:	4b79      	ldr	r3, [pc, #484]	; (80097d4 <tcp_process+0x2a4>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	f043 0308 	orr.w	r3, r3, #8
 80095f4:	b2da      	uxtb	r2, r3
 80095f6:	4b77      	ldr	r3, [pc, #476]	; (80097d4 <tcp_process+0x2a4>)
 80095f8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	8b5b      	ldrh	r3, [r3, #26]
 80095fe:	f023 0301 	bic.w	r3, r3, #1
 8009602:	b29a      	uxth	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009608:	f06f 030d 	mvn.w	r3, #13
 800960c:	e3a1      	b.n	8009d52 <tcp_process+0x822>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	e39f      	b.n	8009d52 <tcp_process+0x822>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009612:	4b6c      	ldr	r3, [pc, #432]	; (80097c4 <tcp_process+0x294>)
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	f003 0302 	and.w	r3, r3, #2
 800961a:	2b00      	cmp	r3, #0
 800961c:	d010      	beq.n	8009640 <tcp_process+0x110>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	7d1b      	ldrb	r3, [r3, #20]
 8009622:	2b02      	cmp	r3, #2
 8009624:	d00c      	beq.n	8009640 <tcp_process+0x110>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	7d1b      	ldrb	r3, [r3, #20]
 800962a:	2b03      	cmp	r3, #3
 800962c:	d008      	beq.n	8009640 <tcp_process+0x110>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	8b5b      	ldrh	r3, [r3, #26]
 8009632:	f043 0302 	orr.w	r3, r3, #2
 8009636:	b29a      	uxth	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	e388      	b.n	8009d52 <tcp_process+0x822>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	8b5b      	ldrh	r3, [r3, #26]
 8009644:	f003 0310 	and.w	r3, r3, #16
 8009648:	2b00      	cmp	r3, #0
 800964a:	d103      	bne.n	8009654 <tcp_process+0x124>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800964c:	4b62      	ldr	r3, [pc, #392]	; (80097d8 <tcp_process+0x2a8>)
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f001 fc93 	bl	800af90 <tcp_parseopt>

  if (flags & TCP_SYN) {
 800966a:	4b56      	ldr	r3, [pc, #344]	; (80097c4 <tcp_process+0x294>)
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	f003 0302 	and.w	r3, r3, #2
 8009672:	2b00      	cmp	r3, #0
 8009674:	d009      	beq.n	800968a <tcp_process+0x15a>
    /* accept SYN only in 2 states: */
    if ((pcb->state != SYN_SENT) && (pcb->state != SYN_RCVD)) {
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	7d1b      	ldrb	r3, [r3, #20]
 800967a:	2b02      	cmp	r3, #2
 800967c:	d005      	beq.n	800968a <tcp_process+0x15a>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	7d1b      	ldrb	r3, [r3, #20]
 8009682:	2b03      	cmp	r3, #3
 8009684:	d001      	beq.n	800968a <tcp_process+0x15a>
      return ERR_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	e363      	b.n	8009d52 <tcp_process+0x822>
    }
  }

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	7d1b      	ldrb	r3, [r3, #20]
 800968e:	3b02      	subs	r3, #2
 8009690:	2b07      	cmp	r3, #7
 8009692:	f200 834e 	bhi.w	8009d32 <tcp_process+0x802>
 8009696:	a201      	add	r2, pc, #4	; (adr r2, 800969c <tcp_process+0x16c>)
 8009698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969c:	080096bd 	.word	0x080096bd
 80096a0:	080098fb 	.word	0x080098fb
 80096a4:	08009ab1 	.word	0x08009ab1
 80096a8:	08009adb 	.word	0x08009adb
 80096ac:	08009bc9 	.word	0x08009bc9
 80096b0:	08009ab1 	.word	0x08009ab1
 80096b4:	08009c55 	.word	0x08009c55
 80096b8:	08009cfd 	.word	0x08009cfd
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %s %"U32_F"\n",
                                    ackno, pcb->snd_nxt, pcb->unacked ? "" : " empty:",
                                    pcb->unacked ? lwip_ntohl(pcb->unacked->tcphdr->seqno) : 0));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80096bc:	4b41      	ldr	r3, [pc, #260]	; (80097c4 <tcp_process+0x294>)
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	f003 0310 	and.w	r3, r3, #16
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f000 80eb 	beq.w	80098a0 <tcp_process+0x370>
 80096ca:	4b3e      	ldr	r3, [pc, #248]	; (80097c4 <tcp_process+0x294>)
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	f003 0302 	and.w	r3, r3, #2
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	f000 80e4 	beq.w	80098a0 <tcp_process+0x370>
          && (ackno == pcb->lastack + 1)) {
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096dc:	1c5a      	adds	r2, r3, #1
 80096de:	4b3a      	ldr	r3, [pc, #232]	; (80097c8 <tcp_process+0x298>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	f040 80dc 	bne.w	80098a0 <tcp_process+0x370>
        pcb->rcv_nxt = seqno + 1;
 80096e8:	4b38      	ldr	r3, [pc, #224]	; (80097cc <tcp_process+0x29c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	1c5a      	adds	r2, r3, #1
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80096fa:	4b33      	ldr	r3, [pc, #204]	; (80097c8 <tcp_process+0x298>)
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009702:	4b36      	ldr	r3, [pc, #216]	; (80097dc <tcp_process+0x2ac>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	89db      	ldrh	r3, [r3, #14]
 8009708:	b29a      	uxth	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800971c:	4b2b      	ldr	r3, [pc, #172]	; (80097cc <tcp_process+0x29c>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	1e5a      	subs	r2, r3, #1
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2204      	movs	r2, #4
 800972a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	3304      	adds	r3, #4
 8009734:	4618      	mov	r0, r3
 8009736:	f7fa fd9f 	bl	8004278 <ip4_route>
 800973a:	4601      	mov	r1, r0
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	3304      	adds	r3, #4
 8009740:	461a      	mov	r2, r3
 8009742:	4620      	mov	r0, r4
 8009744:	f7fe ff98 	bl	8008678 <tcp_eff_send_mss_netif>
 8009748:	4603      	mov	r3, r0
 800974a:	461a      	mov	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009754:	009a      	lsls	r2, r3, #2
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800975a:	005b      	lsls	r3, r3, #1
 800975c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009760:	428b      	cmp	r3, r1
 8009762:	bf38      	it	cc
 8009764:	460b      	movcc	r3, r1
 8009766:	429a      	cmp	r2, r3
 8009768:	d204      	bcs.n	8009774 <tcp_process+0x244>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	b29b      	uxth	r3, r3
 8009772:	e00d      	b.n	8009790 <tcp_process+0x260>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009778:	005b      	lsls	r3, r3, #1
 800977a:	f241 121c 	movw	r2, #4380	; 0x111c
 800977e:	4293      	cmp	r3, r2
 8009780:	d904      	bls.n	800978c <tcp_process+0x25c>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009786:	005b      	lsls	r3, r3, #1
 8009788:	b29b      	uxth	r3, r3
 800978a:	e001      	b.n	8009790 <tcp_process+0x260>
 800978c:	f241 131c 	movw	r3, #4380	; 0x111c
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800979c:	2b00      	cmp	r3, #0
 800979e:	d121      	bne.n	80097e4 <tcp_process+0x2b4>
 80097a0:	4b05      	ldr	r3, [pc, #20]	; (80097b8 <tcp_process+0x288>)
 80097a2:	f240 3277 	movw	r2, #887	; 0x377
 80097a6:	490e      	ldr	r1, [pc, #56]	; (80097e0 <tcp_process+0x2b0>)
 80097a8:	4805      	ldr	r0, [pc, #20]	; (80097c0 <tcp_process+0x290>)
 80097aa:	f00a fa21 	bl	8013bf0 <iprintf>
 80097ae:	2000      	movs	r0, #0
 80097b0:	f00a fb20 	bl	8013df4 <fflush>
 80097b4:	f00a fa65 	bl	8013c82 <abort>
 80097b8:	08016d14 	.word	0x08016d14
 80097bc:	08016f3c 	.word	0x08016f3c
 80097c0:	08016d50 	.word	0x08016d50
 80097c4:	20000730 	.word	0x20000730
 80097c8:	20000728 	.word	0x20000728
 80097cc:	20000724 	.word	0x20000724
 80097d0:	08016f58 	.word	0x08016f58
 80097d4:	20000731 	.word	0x20000731
 80097d8:	200022c8 	.word	0x200022c8
 80097dc:	20000714 	.word	0x20000714
 80097e0:	08016f78 	.word	0x08016f78
        --pcb->snd_queuelen;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80097ea:	3b01      	subs	r3, #1
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f8:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d116      	bne.n	800982e <tcp_process+0x2fe>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009804:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10b      	bne.n	8009824 <tcp_process+0x2f4>
 800980c:	4b9b      	ldr	r3, [pc, #620]	; (8009a7c <tcp_process+0x54c>)
 800980e:	f240 327f 	movw	r2, #895	; 0x37f
 8009812:	499b      	ldr	r1, [pc, #620]	; (8009a80 <tcp_process+0x550>)
 8009814:	489b      	ldr	r0, [pc, #620]	; (8009a84 <tcp_process+0x554>)
 8009816:	f00a f9eb 	bl	8013bf0 <iprintf>
 800981a:	2000      	movs	r0, #0
 800981c:	f00a faea 	bl	8013df4 <fflush>
 8009820:	f00a fa2f 	bl	8013c82 <abort>
          pcb->unsent = rseg->next;
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	66da      	str	r2, [r3, #108]	; 0x6c
 800982c:	e003      	b.n	8009836 <tcp_process+0x306>
        } else {
          pcb->unacked = rseg->next;
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009836:	69f8      	ldr	r0, [r7, #28]
 8009838:	f7fe fb0c 	bl	8007e54 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009840:	2b00      	cmp	r3, #0
 8009842:	d104      	bne.n	800984e <tcp_process+0x31e>
          pcb->rtime = -1;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800984a:	861a      	strh	r2, [r3, #48]	; 0x30
 800984c:	e006      	b.n	800985c <tcp_process+0x32c>
        } else {
          pcb->rtime = 0;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00a      	beq.n	800987c <tcp_process+0x34c>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	6910      	ldr	r0, [r2, #16]
 8009870:	2200      	movs	r2, #0
 8009872:	6879      	ldr	r1, [r7, #4]
 8009874:	4798      	blx	r3
 8009876:	4603      	mov	r3, r0
 8009878:	76bb      	strb	r3, [r7, #26]
 800987a:	e001      	b.n	8009880 <tcp_process+0x350>
 800987c:	2300      	movs	r3, #0
 800987e:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009880:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009884:	f113 0f0d 	cmn.w	r3, #13
 8009888:	d102      	bne.n	8009890 <tcp_process+0x360>
          return ERR_ABRT;
 800988a:	f06f 030c 	mvn.w	r3, #12
 800988e:	e260      	b.n	8009d52 <tcp_process+0x822>
        }
        tcp_ack_now(pcb);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	8b5b      	ldrh	r3, [r3, #26]
 8009894:	f043 0302 	orr.w	r3, r3, #2
 8009898:	b29a      	uxth	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800989e:	e24a      	b.n	8009d36 <tcp_process+0x806>
      else if (flags & TCP_ACK) {
 80098a0:	4b79      	ldr	r3, [pc, #484]	; (8009a88 <tcp_process+0x558>)
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	f003 0310 	and.w	r3, r3, #16
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 8244 	beq.w	8009d36 <tcp_process+0x806>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098ae:	4b77      	ldr	r3, [pc, #476]	; (8009a8c <tcp_process+0x55c>)
 80098b0:	6819      	ldr	r1, [r3, #0]
 80098b2:	4b77      	ldr	r3, [pc, #476]	; (8009a90 <tcp_process+0x560>)
 80098b4:	881b      	ldrh	r3, [r3, #0]
 80098b6:	461a      	mov	r2, r3
 80098b8:	4b76      	ldr	r3, [pc, #472]	; (8009a94 <tcp_process+0x564>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098be:	4b76      	ldr	r3, [pc, #472]	; (8009a98 <tcp_process+0x568>)
 80098c0:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098c2:	885b      	ldrh	r3, [r3, #2]
 80098c4:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098c6:	4a74      	ldr	r2, [pc, #464]	; (8009a98 <tcp_process+0x568>)
 80098c8:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098ca:	8812      	ldrh	r2, [r2, #0]
 80098cc:	b292      	uxth	r2, r2
 80098ce:	9202      	str	r2, [sp, #8]
 80098d0:	9301      	str	r3, [sp, #4]
 80098d2:	4b72      	ldr	r3, [pc, #456]	; (8009a9c <tcp_process+0x56c>)
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	4b72      	ldr	r3, [pc, #456]	; (8009aa0 <tcp_process+0x570>)
 80098d8:	4602      	mov	r2, r0
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f003 fb78 	bl	800cfd0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098e6:	2b05      	cmp	r3, #5
 80098e8:	f200 8225 	bhi.w	8009d36 <tcp_process+0x806>
          pcb->rtime = 0;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f003 f870 	bl	800c9d8 <tcp_rexmit_rto>
      break;
 80098f8:	e21d      	b.n	8009d36 <tcp_process+0x806>
    case SYN_RCVD:
      if (flags & TCP_SYN) {
 80098fa:	4b63      	ldr	r3, [pc, #396]	; (8009a88 <tcp_process+0x558>)
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	f003 0302 	and.w	r3, r3, #2
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00b      	beq.n	800991e <tcp_process+0x3ee>
        if (seqno == pcb->rcv_nxt - 1) {
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990a:	1e5a      	subs	r2, r3, #1
 800990c:	4b61      	ldr	r3, [pc, #388]	; (8009a94 <tcp_process+0x564>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	429a      	cmp	r2, r3
 8009912:	f040 8212 	bne.w	8009d3a <tcp_process+0x80a>
          /* Looks like another copy of the SYN - retransmit our SYN-ACK */
          tcp_rexmit(pcb);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f003 f884 	bl	800ca24 <tcp_rexmit>
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
        }
      }
      break;
 800991c:	e20d      	b.n	8009d3a <tcp_process+0x80a>
      } else if (flags & TCP_ACK) {
 800991e:	4b5a      	ldr	r3, [pc, #360]	; (8009a88 <tcp_process+0x558>)
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	f003 0310 	and.w	r3, r3, #16
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 8207 	beq.w	8009d3a <tcp_process+0x80a>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800992c:	4b57      	ldr	r3, [pc, #348]	; (8009a8c <tcp_process+0x55c>)
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	3b01      	subs	r3, #1
 8009938:	2b00      	cmp	r3, #0
 800993a:	f2c0 8084 	blt.w	8009a46 <tcp_process+0x516>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009942:	4b52      	ldr	r3, [pc, #328]	; (8009a8c <tcp_process+0x55c>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	2b00      	cmp	r3, #0
 800994a:	db7c      	blt.n	8009a46 <tcp_process+0x516>
          pcb->state = ESTABLISHED;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2204      	movs	r2, #4
 8009950:	751a      	strb	r2, [r3, #20]
          if (pcb->listener == NULL) {
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009956:	2b00      	cmp	r3, #0
 8009958:	d102      	bne.n	8009960 <tcp_process+0x430>
            err = ERR_VAL;
 800995a:	23fa      	movs	r3, #250	; 0xfa
 800995c:	76bb      	strb	r3, [r7, #26]
 800995e:	e022      	b.n	80099a6 <tcp_process+0x476>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10b      	bne.n	8009982 <tcp_process+0x452>
 800996a:	4b44      	ldr	r3, [pc, #272]	; (8009a7c <tcp_process+0x54c>)
 800996c:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8009970:	494c      	ldr	r1, [pc, #304]	; (8009aa4 <tcp_process+0x574>)
 8009972:	4844      	ldr	r0, [pc, #272]	; (8009a84 <tcp_process+0x554>)
 8009974:	f00a f93c 	bl	8013bf0 <iprintf>
 8009978:	2000      	movs	r0, #0
 800997a:	f00a fa3b 	bl	8013df4 <fflush>
 800997e:	f00a f980 	bl	8013c82 <abort>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00a      	beq.n	80099a2 <tcp_process+0x472>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	6910      	ldr	r0, [r2, #16]
 8009996:	2200      	movs	r2, #0
 8009998:	6879      	ldr	r1, [r7, #4]
 800999a:	4798      	blx	r3
 800999c:	4603      	mov	r3, r0
 800999e:	76bb      	strb	r3, [r7, #26]
 80099a0:	e001      	b.n	80099a6 <tcp_process+0x476>
 80099a2:	23f0      	movs	r3, #240	; 0xf0
 80099a4:	76bb      	strb	r3, [r7, #26]
          if (err != ERR_OK) {
 80099a6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00a      	beq.n	80099c4 <tcp_process+0x494>
            if (err != ERR_ABRT) {
 80099ae:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80099b2:	f113 0f0d 	cmn.w	r3, #13
 80099b6:	d002      	beq.n	80099be <tcp_process+0x48e>
              tcp_abort(pcb);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7fd fb25 	bl	8007008 <tcp_abort>
            return ERR_ABRT;
 80099be:	f06f 030c 	mvn.w	r3, #12
 80099c2:	e1c6      	b.n	8009d52 <tcp_process+0x822>
          tcp_receive(pcb);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fae1 	bl	8009f8c <tcp_receive>
          if (recv_acked != 0) {
 80099ca:	4b37      	ldr	r3, [pc, #220]	; (8009aa8 <tcp_process+0x578>)
 80099cc:	881b      	ldrh	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d005      	beq.n	80099de <tcp_process+0x4ae>
            recv_acked--;
 80099d2:	4b35      	ldr	r3, [pc, #212]	; (8009aa8 <tcp_process+0x578>)
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	3b01      	subs	r3, #1
 80099d8:	b29a      	uxth	r2, r3
 80099da:	4b33      	ldr	r3, [pc, #204]	; (8009aa8 <tcp_process+0x578>)
 80099dc:	801a      	strh	r2, [r3, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099e2:	009a      	lsls	r2, r3, #2
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099e8:	005b      	lsls	r3, r3, #1
 80099ea:	f241 111c 	movw	r1, #4380	; 0x111c
 80099ee:	428b      	cmp	r3, r1
 80099f0:	bf38      	it	cc
 80099f2:	460b      	movcc	r3, r1
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d204      	bcs.n	8009a02 <tcp_process+0x4d2>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	e00d      	b.n	8009a1e <tcp_process+0x4ee>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a06:	005b      	lsls	r3, r3, #1
 8009a08:	f241 121c 	movw	r2, #4380	; 0x111c
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d904      	bls.n	8009a1a <tcp_process+0x4ea>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a14:	005b      	lsls	r3, r3, #1
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	e001      	b.n	8009a1e <tcp_process+0x4ee>
 8009a1a:	f241 131c 	movw	r3, #4380	; 0x111c
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 8009a24:	4b21      	ldr	r3, [pc, #132]	; (8009aac <tcp_process+0x57c>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	f003 0320 	and.w	r3, r3, #32
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d024      	beq.n	8009a7a <tcp_process+0x54a>
            tcp_ack_now(pcb);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	8b5b      	ldrh	r3, [r3, #26]
 8009a34:	f043 0302 	orr.w	r3, r3, #2
 8009a38:	b29a      	uxth	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2207      	movs	r2, #7
 8009a42:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009a44:	e019      	b.n	8009a7a <tcp_process+0x54a>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a46:	4b11      	ldr	r3, [pc, #68]	; (8009a8c <tcp_process+0x55c>)
 8009a48:	6819      	ldr	r1, [r3, #0]
 8009a4a:	4b11      	ldr	r3, [pc, #68]	; (8009a90 <tcp_process+0x560>)
 8009a4c:	881b      	ldrh	r3, [r3, #0]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	4b10      	ldr	r3, [pc, #64]	; (8009a94 <tcp_process+0x564>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a56:	4b10      	ldr	r3, [pc, #64]	; (8009a98 <tcp_process+0x568>)
 8009a58:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a5a:	885b      	ldrh	r3, [r3, #2]
 8009a5c:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a5e:	4a0e      	ldr	r2, [pc, #56]	; (8009a98 <tcp_process+0x568>)
 8009a60:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a62:	8812      	ldrh	r2, [r2, #0]
 8009a64:	b292      	uxth	r2, r2
 8009a66:	9202      	str	r2, [sp, #8]
 8009a68:	9301      	str	r3, [sp, #4]
 8009a6a:	4b0c      	ldr	r3, [pc, #48]	; (8009a9c <tcp_process+0x56c>)
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	4b0c      	ldr	r3, [pc, #48]	; (8009aa0 <tcp_process+0x570>)
 8009a70:	4602      	mov	r2, r0
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f003 faac 	bl	800cfd0 <tcp_rst>
      break;
 8009a78:	e15f      	b.n	8009d3a <tcp_process+0x80a>
 8009a7a:	e15e      	b.n	8009d3a <tcp_process+0x80a>
 8009a7c:	08016d14 	.word	0x08016d14
 8009a80:	08016f90 	.word	0x08016f90
 8009a84:	08016d50 	.word	0x08016d50
 8009a88:	20000730 	.word	0x20000730
 8009a8c:	20000728 	.word	0x20000728
 8009a90:	2000072e 	.word	0x2000072e
 8009a94:	20000724 	.word	0x20000724
 8009a98:	20000714 	.word	0x20000714
 8009a9c:	20000890 	.word	0x20000890
 8009aa0:	20000894 	.word	0x20000894
 8009aa4:	08016fa4 	.word	0x08016fa4
 8009aa8:	2000072c 	.word	0x2000072c
 8009aac:	20000731 	.word	0x20000731
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fa6b 	bl	8009f8c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009ab6:	4b8b      	ldr	r3, [pc, #556]	; (8009ce4 <tcp_process+0x7b4>)
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	f003 0320 	and.w	r3, r3, #32
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f000 813d 	beq.w	8009d3e <tcp_process+0x80e>
        tcp_ack_now(pcb);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	8b5b      	ldrh	r3, [r3, #26]
 8009ac8:	f043 0302 	orr.w	r3, r3, #2
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2207      	movs	r2, #7
 8009ad6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009ad8:	e131      	b.n	8009d3e <tcp_process+0x80e>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fa56 	bl	8009f8c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009ae0:	4b80      	ldr	r3, [pc, #512]	; (8009ce4 <tcp_process+0x7b4>)
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	f003 0320 	and.w	r3, r3, #32
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d056      	beq.n	8009b9a <tcp_process+0x66a>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009aec:	4b7e      	ldr	r3, [pc, #504]	; (8009ce8 <tcp_process+0x7b8>)
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	f003 0310 	and.w	r3, r3, #16
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d045      	beq.n	8009b84 <tcp_process+0x654>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009afc:	4b7b      	ldr	r3, [pc, #492]	; (8009cec <tcp_process+0x7bc>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d13f      	bne.n	8009b84 <tcp_process+0x654>
            pcb->unsent == NULL) {
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d13b      	bne.n	8009b84 <tcp_process+0x654>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	8b5b      	ldrh	r3, [r3, #26]
 8009b10:	f043 0302 	orr.w	r3, r3, #2
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7fe fc86 	bl	800842c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009b20:	4b73      	ldr	r3, [pc, #460]	; (8009cf0 <tcp_process+0x7c0>)
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d105      	bne.n	8009b36 <tcp_process+0x606>
 8009b2a:	4b71      	ldr	r3, [pc, #452]	; (8009cf0 <tcp_process+0x7c0>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	4a6f      	ldr	r2, [pc, #444]	; (8009cf0 <tcp_process+0x7c0>)
 8009b32:	6013      	str	r3, [r2, #0]
 8009b34:	e013      	b.n	8009b5e <tcp_process+0x62e>
 8009b36:	4b6e      	ldr	r3, [pc, #440]	; (8009cf0 <tcp_process+0x7c0>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	617b      	str	r3, [r7, #20]
 8009b3c:	e00c      	b.n	8009b58 <tcp_process+0x628>
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	68da      	ldr	r2, [r3, #12]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d104      	bne.n	8009b52 <tcp_process+0x622>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68da      	ldr	r2, [r3, #12]
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	60da      	str	r2, [r3, #12]
 8009b50:	e005      	b.n	8009b5e <tcp_process+0x62e>
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	617b      	str	r3, [r7, #20]
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1ef      	bne.n	8009b3e <tcp_process+0x60e>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	60da      	str	r2, [r3, #12]
 8009b64:	4b63      	ldr	r3, [pc, #396]	; (8009cf4 <tcp_process+0x7c4>)
 8009b66:	2201      	movs	r2, #1
 8009b68:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	220a      	movs	r2, #10
 8009b6e:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009b70:	4b61      	ldr	r3, [pc, #388]	; (8009cf8 <tcp_process+0x7c8>)
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	60da      	str	r2, [r3, #12]
 8009b78:	4a5f      	ldr	r2, [pc, #380]	; (8009cf8 <tcp_process+0x7c8>)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6013      	str	r3, [r2, #0]
 8009b7e:	f003 fbf1 	bl	800d364 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009b82:	e0de      	b.n	8009d42 <tcp_process+0x812>
          tcp_ack_now(pcb);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	8b5b      	ldrh	r3, [r3, #26]
 8009b88:	f043 0302 	orr.w	r3, r3, #2
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2208      	movs	r2, #8
 8009b96:	751a      	strb	r2, [r3, #20]
      break;
 8009b98:	e0d3      	b.n	8009d42 <tcp_process+0x812>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009b9a:	4b53      	ldr	r3, [pc, #332]	; (8009ce8 <tcp_process+0x7b8>)
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	f003 0310 	and.w	r3, r3, #16
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	f000 80cd 	beq.w	8009d42 <tcp_process+0x812>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009bac:	4b4f      	ldr	r3, [pc, #316]	; (8009cec <tcp_process+0x7bc>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	f040 80c6 	bne.w	8009d42 <tcp_process+0x812>
                 pcb->unsent == NULL) {
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f040 80c1 	bne.w	8009d42 <tcp_process+0x812>
        pcb->state = FIN_WAIT_2;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2206      	movs	r2, #6
 8009bc4:	751a      	strb	r2, [r3, #20]
      break;
 8009bc6:	e0bc      	b.n	8009d42 <tcp_process+0x812>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f9df 	bl	8009f8c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009bce:	4b45      	ldr	r3, [pc, #276]	; (8009ce4 <tcp_process+0x7b4>)
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	f003 0320 	and.w	r3, r3, #32
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f000 80b5 	beq.w	8009d46 <tcp_process+0x816>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	8b5b      	ldrh	r3, [r3, #26]
 8009be0:	f043 0302 	orr.w	r3, r3, #2
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7fe fc1e 	bl	800842c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009bf0:	4b3f      	ldr	r3, [pc, #252]	; (8009cf0 <tcp_process+0x7c0>)
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d105      	bne.n	8009c06 <tcp_process+0x6d6>
 8009bfa:	4b3d      	ldr	r3, [pc, #244]	; (8009cf0 <tcp_process+0x7c0>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	4a3b      	ldr	r2, [pc, #236]	; (8009cf0 <tcp_process+0x7c0>)
 8009c02:	6013      	str	r3, [r2, #0]
 8009c04:	e013      	b.n	8009c2e <tcp_process+0x6fe>
 8009c06:	4b3a      	ldr	r3, [pc, #232]	; (8009cf0 <tcp_process+0x7c0>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	613b      	str	r3, [r7, #16]
 8009c0c:	e00c      	b.n	8009c28 <tcp_process+0x6f8>
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	68da      	ldr	r2, [r3, #12]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d104      	bne.n	8009c22 <tcp_process+0x6f2>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	68da      	ldr	r2, [r3, #12]
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	60da      	str	r2, [r3, #12]
 8009c20:	e005      	b.n	8009c2e <tcp_process+0x6fe>
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	613b      	str	r3, [r7, #16]
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1ef      	bne.n	8009c0e <tcp_process+0x6de>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	60da      	str	r2, [r3, #12]
 8009c34:	4b2f      	ldr	r3, [pc, #188]	; (8009cf4 <tcp_process+0x7c4>)
 8009c36:	2201      	movs	r2, #1
 8009c38:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	220a      	movs	r2, #10
 8009c3e:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009c40:	4b2d      	ldr	r3, [pc, #180]	; (8009cf8 <tcp_process+0x7c8>)
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	60da      	str	r2, [r3, #12]
 8009c48:	4a2b      	ldr	r2, [pc, #172]	; (8009cf8 <tcp_process+0x7c8>)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6013      	str	r3, [r2, #0]
 8009c4e:	f003 fb89 	bl	800d364 <tcp_timer_needed>
      }
      break;
 8009c52:	e078      	b.n	8009d46 <tcp_process+0x816>
    case CLOSING:
      tcp_receive(pcb);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f999 	bl	8009f8c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009c5a:	4b23      	ldr	r3, [pc, #140]	; (8009ce8 <tcp_process+0x7b8>)
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	f003 0310 	and.w	r3, r3, #16
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d071      	beq.n	8009d4a <tcp_process+0x81a>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c6a:	4b20      	ldr	r3, [pc, #128]	; (8009cec <tcp_process+0x7bc>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d16b      	bne.n	8009d4a <tcp_process+0x81a>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d167      	bne.n	8009d4a <tcp_process+0x81a>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7fe fbd6 	bl	800842c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009c80:	4b1b      	ldr	r3, [pc, #108]	; (8009cf0 <tcp_process+0x7c0>)
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d105      	bne.n	8009c96 <tcp_process+0x766>
 8009c8a:	4b19      	ldr	r3, [pc, #100]	; (8009cf0 <tcp_process+0x7c0>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	4a17      	ldr	r2, [pc, #92]	; (8009cf0 <tcp_process+0x7c0>)
 8009c92:	6013      	str	r3, [r2, #0]
 8009c94:	e013      	b.n	8009cbe <tcp_process+0x78e>
 8009c96:	4b16      	ldr	r3, [pc, #88]	; (8009cf0 <tcp_process+0x7c0>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	60fb      	str	r3, [r7, #12]
 8009c9c:	e00c      	b.n	8009cb8 <tcp_process+0x788>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	68da      	ldr	r2, [r3, #12]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d104      	bne.n	8009cb2 <tcp_process+0x782>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68da      	ldr	r2, [r3, #12]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	60da      	str	r2, [r3, #12]
 8009cb0:	e005      	b.n	8009cbe <tcp_process+0x78e>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1ef      	bne.n	8009c9e <tcp_process+0x76e>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	60da      	str	r2, [r3, #12]
 8009cc4:	4b0b      	ldr	r3, [pc, #44]	; (8009cf4 <tcp_process+0x7c4>)
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	220a      	movs	r2, #10
 8009cce:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009cd0:	4b09      	ldr	r3, [pc, #36]	; (8009cf8 <tcp_process+0x7c8>)
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	60da      	str	r2, [r3, #12]
 8009cd8:	4a07      	ldr	r2, [pc, #28]	; (8009cf8 <tcp_process+0x7c8>)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6013      	str	r3, [r2, #0]
 8009cde:	f003 fb41 	bl	800d364 <tcp_timer_needed>
      }
      break;
 8009ce2:	e032      	b.n	8009d4a <tcp_process+0x81a>
 8009ce4:	20000731 	.word	0x20000731
 8009ce8:	20000730 	.word	0x20000730
 8009cec:	20000728 	.word	0x20000728
 8009cf0:	200022c4 	.word	0x200022c4
 8009cf4:	200022c0 	.word	0x200022c0
 8009cf8:	200022d4 	.word	0x200022d4
    case LAST_ACK:
      tcp_receive(pcb);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f945 	bl	8009f8c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009d02:	4b16      	ldr	r3, [pc, #88]	; (8009d5c <tcp_process+0x82c>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	f003 0310 	and.w	r3, r3, #16
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d01f      	beq.n	8009d4e <tcp_process+0x81e>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d12:	4b13      	ldr	r3, [pc, #76]	; (8009d60 <tcp_process+0x830>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d119      	bne.n	8009d4e <tcp_process+0x81e>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d115      	bne.n	8009d4e <tcp_process+0x81e>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009d22:	4b10      	ldr	r3, [pc, #64]	; (8009d64 <tcp_process+0x834>)
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	f043 0310 	orr.w	r3, r3, #16
 8009d2a:	b2da      	uxtb	r2, r3
 8009d2c:	4b0d      	ldr	r3, [pc, #52]	; (8009d64 <tcp_process+0x834>)
 8009d2e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009d30:	e00d      	b.n	8009d4e <tcp_process+0x81e>
    default:
      break;
 8009d32:	bf00      	nop
 8009d34:	e00c      	b.n	8009d50 <tcp_process+0x820>
      break;
 8009d36:	bf00      	nop
 8009d38:	e00a      	b.n	8009d50 <tcp_process+0x820>
      break;
 8009d3a:	bf00      	nop
 8009d3c:	e008      	b.n	8009d50 <tcp_process+0x820>
      break;
 8009d3e:	bf00      	nop
 8009d40:	e006      	b.n	8009d50 <tcp_process+0x820>
      break;
 8009d42:	bf00      	nop
 8009d44:	e004      	b.n	8009d50 <tcp_process+0x820>
      break;
 8009d46:	bf00      	nop
 8009d48:	e002      	b.n	8009d50 <tcp_process+0x820>
      break;
 8009d4a:	bf00      	nop
 8009d4c:	e000      	b.n	8009d50 <tcp_process+0x820>
      break;
 8009d4e:	bf00      	nop
  }
  return ERR_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3724      	adds	r7, #36	; 0x24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd90      	pop	{r4, r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20000730 	.word	0x20000730
 8009d60:	20000728 	.word	0x20000728
 8009d64:	20000731 	.word	0x20000731

08009d68 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009d68:	b5b0      	push	{r4, r5, r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10b      	bne.n	8009d90 <tcp_oos_insert_segment+0x28>
 8009d78:	4b3d      	ldr	r3, [pc, #244]	; (8009e70 <tcp_oos_insert_segment+0x108>)
 8009d7a:	f240 422c 	movw	r2, #1068	; 0x42c
 8009d7e:	493d      	ldr	r1, [pc, #244]	; (8009e74 <tcp_oos_insert_segment+0x10c>)
 8009d80:	483d      	ldr	r0, [pc, #244]	; (8009e78 <tcp_oos_insert_segment+0x110>)
 8009d82:	f009 ff35 	bl	8013bf0 <iprintf>
 8009d86:	2000      	movs	r0, #0
 8009d88:	f00a f834 	bl	8013df4 <fflush>
 8009d8c:	f009 ff79 	bl	8013c82 <abort>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	899b      	ldrh	r3, [r3, #12]
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7fa f8f9 	bl	8003f90 <lwip_htons>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	f003 0301 	and.w	r3, r3, #1
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d027      	beq.n	8009dfa <tcp_oos_insert_segment+0x92>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009daa:	6838      	ldr	r0, [r7, #0]
 8009dac:	f7fe f83e 	bl	8007e2c <tcp_segs_free>
    next = NULL;
 8009db0:	2300      	movs	r3, #0
 8009db2:	603b      	str	r3, [r7, #0]
 8009db4:	e055      	b.n	8009e62 <tcp_oos_insert_segment+0xfa>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	899b      	ldrh	r3, [r3, #12]
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fa f8e6 	bl	8003f90 <lwip_htons>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	f003 0301 	and.w	r3, r3, #1
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00c      	beq.n	8009dea <tcp_oos_insert_segment+0x82>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	691c      	ldr	r4, [r3, #16]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	899b      	ldrh	r3, [r3, #12]
 8009dda:	b29d      	uxth	r5, r3
 8009ddc:	2001      	movs	r0, #1
 8009dde:	f7fa f8d7 	bl	8003f90 <lwip_htons>
 8009de2:	4603      	mov	r3, r0
 8009de4:	432b      	orrs	r3, r5
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f7fe f82d 	bl	8007e54 <tcp_seg_free>
    while (next &&
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00e      	beq.n	8009e1e <tcp_oos_insert_segment+0xb6>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	891b      	ldrh	r3, [r3, #8]
 8009e04:	461a      	mov	r2, r3
 8009e06:	4b1d      	ldr	r3, [pc, #116]	; (8009e7c <tcp_oos_insert_segment+0x114>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	441a      	add	r2, r3
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	6839      	ldr	r1, [r7, #0]
 8009e14:	8909      	ldrh	r1, [r1, #8]
 8009e16:	440b      	add	r3, r1
 8009e18:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	dacb      	bge.n	8009db6 <tcp_oos_insert_segment+0x4e>
    }
    if (next &&
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d01e      	beq.n	8009e62 <tcp_oos_insert_segment+0xfa>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	685a      	ldr	r2, [r3, #4]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	891b      	ldrh	r3, [r3, #8]
 8009e2e:	4619      	mov	r1, r3
 8009e30:	4b12      	ldr	r3, [pc, #72]	; (8009e7c <tcp_oos_insert_segment+0x114>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	440b      	add	r3, r1
 8009e36:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	da12      	bge.n	8009e62 <tcp_oos_insert_segment+0xfa>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	4b0d      	ldr	r3, [pc, #52]	; (8009e7c <tcp_oos_insert_segment+0x114>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	891b      	ldrh	r3, [r3, #8]
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	f7fc f831 	bl	8005ec4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	683a      	ldr	r2, [r7, #0]
 8009e66:	601a      	str	r2, [r3, #0]
}
 8009e68:	bf00      	nop
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8009e70:	08016d14 	.word	0x08016d14
 8009e74:	08016fc4 	.word	0x08016fc4
 8009e78:	08016d50 	.word	0x08016d50
 8009e7c:	20000724 	.word	0x20000724

08009e80 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
 8009e8c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009e8e:	e048      	b.n	8009f22 <tcp_free_acked_segments+0xa2>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fc fa0a 	bl	80062b8 <pbuf_clen>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009eae:	8a7a      	ldrh	r2, [r7, #18]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d90b      	bls.n	8009ecc <tcp_free_acked_segments+0x4c>
 8009eb4:	4b2f      	ldr	r3, [pc, #188]	; (8009f74 <tcp_free_acked_segments+0xf4>)
 8009eb6:	f240 4264 	movw	r2, #1124	; 0x464
 8009eba:	492f      	ldr	r1, [pc, #188]	; (8009f78 <tcp_free_acked_segments+0xf8>)
 8009ebc:	482f      	ldr	r0, [pc, #188]	; (8009f7c <tcp_free_acked_segments+0xfc>)
 8009ebe:	f009 fe97 	bl	8013bf0 <iprintf>
 8009ec2:	2000      	movs	r0, #0
 8009ec4:	f009 ff96 	bl	8013df4 <fflush>
 8009ec8:	f009 fedb 	bl	8013c82 <abort>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009ed2:	8a7b      	ldrh	r3, [r7, #18]
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	891a      	ldrh	r2, [r3, #8]
 8009ee2:	4b27      	ldr	r3, [pc, #156]	; (8009f80 <tcp_free_acked_segments+0x100>)
 8009ee4:	881b      	ldrh	r3, [r3, #0]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	4b25      	ldr	r3, [pc, #148]	; (8009f80 <tcp_free_acked_segments+0x100>)
 8009eec:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009eee:	6978      	ldr	r0, [r7, #20]
 8009ef0:	f7fd ffb0 	bl	8007e54 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d011      	beq.n	8009f22 <tcp_free_acked_segments+0xa2>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d10e      	bne.n	8009f22 <tcp_free_acked_segments+0xa2>
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10b      	bne.n	8009f22 <tcp_free_acked_segments+0xa2>
 8009f0a:	4b1a      	ldr	r3, [pc, #104]	; (8009f74 <tcp_free_acked_segments+0xf4>)
 8009f0c:	f240 426f 	movw	r2, #1135	; 0x46f
 8009f10:	491c      	ldr	r1, [pc, #112]	; (8009f84 <tcp_free_acked_segments+0x104>)
 8009f12:	481a      	ldr	r0, [pc, #104]	; (8009f7c <tcp_free_acked_segments+0xfc>)
 8009f14:	f009 fe6c 	bl	8013bf0 <iprintf>
 8009f18:	2000      	movs	r0, #0
 8009f1a:	f009 ff6b 	bl	8013df4 <fflush>
 8009f1e:	f009 feb0 	bl	8013c82 <abort>
  while (seg_list != NULL &&
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d020      	beq.n	8009f6a <tcp_free_acked_segments+0xea>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009f28:	4b17      	ldr	r3, [pc, #92]	; (8009f88 <tcp_free_acked_segments+0x108>)
 8009f2a:	681c      	ldr	r4, [r3, #0]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fa f841 	bl	8003fba <lwip_htonl>
 8009f38:	4605      	mov	r5, r0
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	891b      	ldrh	r3, [r3, #8]
 8009f3e:	461e      	mov	r6, r3
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	899b      	ldrh	r3, [r3, #12]
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7fa f821 	bl	8003f90 <lwip_htons>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	f003 0303 	and.w	r3, r3, #3
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d001      	beq.n	8009f5e <tcp_free_acked_segments+0xde>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e000      	b.n	8009f60 <tcp_free_acked_segments+0xe0>
 8009f5e:	2300      	movs	r3, #0
 8009f60:	4433      	add	r3, r6
 8009f62:	442b      	add	r3, r5
 8009f64:	1ae3      	subs	r3, r4, r3
  while (seg_list != NULL &&
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	da92      	bge.n	8009e90 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009f6a:	68bb      	ldr	r3, [r7, #8]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	371c      	adds	r7, #28
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f74:	08016d14 	.word	0x08016d14
 8009f78:	08016fec 	.word	0x08016fec
 8009f7c:	08016d50 	.word	0x08016d50
 8009f80:	2000072c 	.word	0x2000072c
 8009f84:	08017014 	.word	0x08017014
 8009f88:	20000728 	.word	0x20000728

08009f8c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009f8c:	b5b0      	push	{r4, r5, r7, lr}
 8009f8e:	b094      	sub	sp, #80	; 0x50
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10b      	bne.n	8009fb2 <tcp_receive+0x26>
 8009f9a:	4bab      	ldr	r3, [pc, #684]	; (800a248 <tcp_receive+0x2bc>)
 8009f9c:	f240 4287 	movw	r2, #1159	; 0x487
 8009fa0:	49aa      	ldr	r1, [pc, #680]	; (800a24c <tcp_receive+0x2c0>)
 8009fa2:	48ab      	ldr	r0, [pc, #684]	; (800a250 <tcp_receive+0x2c4>)
 8009fa4:	f009 fe24 	bl	8013bf0 <iprintf>
 8009fa8:	2000      	movs	r0, #0
 8009faa:	f009 ff23 	bl	8013df4 <fflush>
 8009fae:	f009 fe68 	bl	8013c82 <abort>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	7d1b      	ldrb	r3, [r3, #20]
 8009fb6:	2b03      	cmp	r3, #3
 8009fb8:	d80b      	bhi.n	8009fd2 <tcp_receive+0x46>
 8009fba:	4ba3      	ldr	r3, [pc, #652]	; (800a248 <tcp_receive+0x2bc>)
 8009fbc:	f44f 6291 	mov.w	r2, #1160	; 0x488
 8009fc0:	49a4      	ldr	r1, [pc, #656]	; (800a254 <tcp_receive+0x2c8>)
 8009fc2:	48a3      	ldr	r0, [pc, #652]	; (800a250 <tcp_receive+0x2c4>)
 8009fc4:	f009 fe14 	bl	8013bf0 <iprintf>
 8009fc8:	2000      	movs	r0, #0
 8009fca:	f009 ff13 	bl	8013df4 <fflush>
 8009fce:	f009 fe58 	bl	8013c82 <abort>

  if (flags & TCP_ACK) {
 8009fd2:	4ba1      	ldr	r3, [pc, #644]	; (800a258 <tcp_receive+0x2cc>)
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	f003 0310 	and.w	r3, r3, #16
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f000 8263 	beq.w	800a4a6 <tcp_receive+0x51a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fec:	4413      	add	r3, r2
 8009fee:	637b      	str	r3, [r7, #52]	; 0x34

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ff4:	4b99      	ldr	r3, [pc, #612]	; (800a25c <tcp_receive+0x2d0>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	db1b      	blt.n	800a036 <tcp_receive+0xaa>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a002:	4b96      	ldr	r3, [pc, #600]	; (800a25c <tcp_receive+0x2d0>)
 800a004:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a006:	429a      	cmp	r2, r3
 800a008:	d106      	bne.n	800a018 <tcp_receive+0x8c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a00e:	4b94      	ldr	r3, [pc, #592]	; (800a260 <tcp_receive+0x2d4>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	2b00      	cmp	r3, #0
 800a016:	db0e      	blt.n	800a036 <tcp_receive+0xaa>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a01c:	4b90      	ldr	r3, [pc, #576]	; (800a260 <tcp_receive+0x2d4>)
 800a01e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a020:	429a      	cmp	r2, r3
 800a022:	d125      	bne.n	800a070 <tcp_receive+0xe4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a024:	4b8f      	ldr	r3, [pc, #572]	; (800a264 <tcp_receive+0x2d8>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	89db      	ldrh	r3, [r3, #14]
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a032:	429a      	cmp	r2, r3
 800a034:	d91c      	bls.n	800a070 <tcp_receive+0xe4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a036:	4b8b      	ldr	r3, [pc, #556]	; (800a264 <tcp_receive+0x2d8>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	89db      	ldrh	r3, [r3, #14]
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a050:	429a      	cmp	r2, r3
 800a052:	d205      	bcs.n	800a060 <tcp_receive+0xd4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a060:	4b7e      	ldr	r3, [pc, #504]	; (800a25c <tcp_receive+0x2d0>)
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a068:	4b7d      	ldr	r3, [pc, #500]	; (800a260 <tcp_receive+0x2d4>)
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a074:	4b7a      	ldr	r3, [pc, #488]	; (800a260 <tcp_receive+0x2d4>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	db58      	blt.n	800a130 <tcp_receive+0x1a4>
      /* Clause 2 */
      if (tcplen == 0) {
 800a07e:	4b7a      	ldr	r3, [pc, #488]	; (800a268 <tcp_receive+0x2dc>)
 800a080:	881b      	ldrh	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	f040 81af 	bne.w	800a3e6 <tcp_receive+0x45a>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a092:	441a      	add	r2, r3
 800a094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a096:	429a      	cmp	r2, r3
 800a098:	f040 81a5 	bne.w	800a3e6 <tcp_receive+0x45a>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f2c0 819f 	blt.w	800a3e6 <tcp_receive+0x45a>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0ac:	4b6c      	ldr	r3, [pc, #432]	; (800a260 <tcp_receive+0x2d4>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	f040 8198 	bne.w	800a3e6 <tcp_receive+0x45a>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0bc:	3301      	adds	r3, #1
 800a0be:	b2da      	uxtb	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d907      	bls.n	800a0da <tcp_receive+0x14e>
                ++pcb->dupacks;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	b2da      	uxtb	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0e0:	2b03      	cmp	r3, #3
 800a0e2:	d91b      	bls.n	800a11c <tcp_receive+0x190>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0ee:	4413      	add	r3, r2
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d30a      	bcc.n	800a112 <tcp_receive+0x186>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a106:	4413      	add	r3, r2
 800a108:	b29a      	uxth	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a110:	e004      	b.n	800a11c <tcp_receive+0x190>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a118:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a122:	2b02      	cmp	r3, #2
 800a124:	f240 815f 	bls.w	800a3e6 <tcp_receive+0x45a>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f002 fced 	bl	800cb08 <tcp_rexmit_fast>
 800a12e:	e15a      	b.n	800a3e6 <tcp_receive+0x45a>
              }
            }
          }
        }
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a130:	4b4b      	ldr	r3, [pc, #300]	; (800a260 <tcp_receive+0x2d4>)
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	3b01      	subs	r3, #1
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f2c0 814d 	blt.w	800a3dc <tcp_receive+0x450>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a146:	4b46      	ldr	r3, [pc, #280]	; (800a260 <tcp_receive+0x2d4>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f2c0 8145 	blt.w	800a3dc <tcp_receive+0x450>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	8b5b      	ldrh	r3, [r3, #26]
 800a156:	f003 0304 	and.w	r3, r3, #4
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d010      	beq.n	800a180 <tcp_receive+0x1f4>
        tcp_clear_flags(pcb, TF_INFR);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	8b5b      	ldrh	r3, [r3, #26]
 800a162:	f023 0304 	bic.w	r3, r3, #4
 800a166:	b29a      	uxth	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a18e:	10db      	asrs	r3, r3, #3
 800a190:	b21b      	sxth	r3, r3
 800a192:	b29a      	uxth	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	4413      	add	r3, r2
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	b21a      	sxth	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a1a8:	4b2d      	ldr	r3, [pc, #180]	; (800a260 <tcp_receive+0x2d4>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	1ad3      	subs	r3, r2, r3
 800a1b6:	867b      	strh	r3, [r7, #50]	; 0x32

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a1c0:	4b27      	ldr	r3, [pc, #156]	; (800a260 <tcp_receive+0x2d4>)
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	7d1b      	ldrb	r3, [r3, #20]
 800a1cc:	2b03      	cmp	r3, #3
 800a1ce:	f240 8096 	bls.w	800a2fe <tcp_receive+0x372>
        if (pcb->cwnd < pcb->ssthresh) {
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d244      	bcs.n	800a26c <tcp_receive+0x2e0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	8b5b      	ldrh	r3, [r3, #26]
 800a1e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <tcp_receive+0x266>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e000      	b.n	800a1f4 <tcp_receive+0x268>
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a1f8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a202:	fb12 f303 	smulbb	r3, r2, r3
 800a206:	b29a      	uxth	r2, r3
 800a208:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a20a:	4293      	cmp	r3, r2
 800a20c:	bf28      	it	cs
 800a20e:	4613      	movcs	r3, r2
 800a210:	85fb      	strh	r3, [r7, #46]	; 0x2e
          TCP_WND_INC(pcb->cwnd, increase);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a218:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a21a:	4413      	add	r3, r2
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a224:	429a      	cmp	r2, r3
 800a226:	d309      	bcc.n	800a23c <tcp_receive+0x2b0>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a22e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a230:	4413      	add	r3, r2
 800a232:	b29a      	uxth	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a23a:	e060      	b.n	800a2fe <tcp_receive+0x372>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a242:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a246:	e05a      	b.n	800a2fe <tcp_receive+0x372>
 800a248:	08016d14 	.word	0x08016d14
 800a24c:	08017034 	.word	0x08017034
 800a250:	08016d50 	.word	0x08016d50
 800a254:	08017050 	.word	0x08017050
 800a258:	20000730 	.word	0x20000730
 800a25c:	20000724 	.word	0x20000724
 800a260:	20000728 	.word	0x20000728
 800a264:	20000714 	.word	0x20000714
 800a268:	2000072e 	.word	0x2000072e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a272:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a274:	4413      	add	r3, r2
 800a276:	b29a      	uxth	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a27e:	429a      	cmp	r2, r3
 800a280:	d309      	bcc.n	800a296 <tcp_receive+0x30a>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a288:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a28a:	4413      	add	r3, r2
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a294:	e004      	b.n	800a2a0 <tcp_receive+0x314>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a29c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d326      	bcc.n	800a2fe <tcp_receive+0x372>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2d0:	4413      	add	r3, r2
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d30a      	bcc.n	800a2f4 <tcp_receive+0x368>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2e8:	4413      	add	r3, r2
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a2f2:	e004      	b.n	800a2fe <tcp_receive+0x372>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a306:	4aa0      	ldr	r2, [pc, #640]	; (800a588 <tcp_receive+0x5fc>)
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f7ff fdb9 	bl	8009e80 <tcp_free_acked_segments>
 800a30e:	4602      	mov	r2, r0
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a31c:	4a9b      	ldr	r2, [pc, #620]	; (800a58c <tcp_receive+0x600>)
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7ff fdae 	bl	8009e80 <tcp_free_acked_segments>
 800a324:	4602      	mov	r2, r0
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d104      	bne.n	800a33c <tcp_receive+0x3b0>
        pcb->rtime = -1;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a338:	861a      	strh	r2, [r3, #48]	; 0x30
 800a33a:	e002      	b.n	800a342 <tcp_receive+0x3b6>
      } else {
        pcb->rtime = 0;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d103      	bne.n	800a358 <tcp_receive+0x3cc>
        pcb->unsent_oversize = 0;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a35e:	4b8c      	ldr	r3, [pc, #560]	; (800a590 <tcp_receive+0x604>)
 800a360:	881b      	ldrh	r3, [r3, #0]
 800a362:	4413      	add	r3, r2
 800a364:	b29a      	uxth	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	8b5b      	ldrh	r3, [r3, #26]
 800a370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a374:	2b00      	cmp	r3, #0
 800a376:	d035      	beq.n	800a3e4 <tcp_receive+0x458>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d118      	bne.n	800a3b2 <tcp_receive+0x426>
          if ((pcb->unsent == NULL) ||
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a384:	2b00      	cmp	r3, #0
 800a386:	d00c      	beq.n	800a3a2 <tcp_receive+0x416>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	4618      	mov	r0, r3
 800a392:	f7f9 fe12 	bl	8003fba <lwip_htonl>
 800a396:	4602      	mov	r2, r0
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a39c:	1ad3      	subs	r3, r2, r3
          if ((pcb->unsent == NULL) ||
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	db20      	blt.n	800a3e4 <tcp_receive+0x458>
            tcp_clear_flags(pcb, TF_RTO);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	8b5b      	ldrh	r3, [r3, #26]
 800a3a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a3b0:	e018      	b.n	800a3e4 <tcp_receive+0x458>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7f9 fdfd 	bl	8003fba <lwip_htonl>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	db0b      	blt.n	800a3e4 <tcp_receive+0x458>
          tcp_clear_flags(pcb, TF_RTO);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	8b5b      	ldrh	r3, [r3, #26]
 800a3d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a3da:	e003      	b.n	800a3e4 <tcp_receive+0x458>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f002 fe3f 	bl	800d060 <tcp_send_empty_ack>
 800a3e2:	e000      	b.n	800a3e6 <tcp_receive+0x45a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a3e4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d05b      	beq.n	800a4a6 <tcp_receive+0x51a>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3f2:	4b68      	ldr	r3, [pc, #416]	; (800a594 <tcp_receive+0x608>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	da54      	bge.n	800a4a6 <tcp_receive+0x51a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a3fc:	4b66      	ldr	r3, [pc, #408]	; (800a598 <tcp_receive+0x60c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	b29a      	uxth	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a406:	b29b      	uxth	r3, r3
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a410:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a41a:	10db      	asrs	r3, r3, #3
 800a41c:	b21b      	sxth	r3, r3
 800a41e:	b29b      	uxth	r3, r3
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	b29b      	uxth	r3, r3
 800a424:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a42e:	b29a      	uxth	r2, r3
 800a430:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a434:	4413      	add	r3, r2
 800a436:	b29b      	uxth	r3, r3
 800a438:	b21a      	sxth	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a43e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a442:	2b00      	cmp	r3, #0
 800a444:	da05      	bge.n	800a452 <tcp_receive+0x4c6>
        m = (s16_t) - m;
 800a446:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a44a:	425b      	negs	r3, r3
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a452:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a45c:	109b      	asrs	r3, r3, #2
 800a45e:	b21b      	sxth	r3, r3
 800a460:	b29b      	uxth	r3, r3
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	b29b      	uxth	r3, r3
 800a466:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a470:	b29a      	uxth	r2, r3
 800a472:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a476:	4413      	add	r3, r2
 800a478:	b29b      	uxth	r3, r3
 800a47a:	b21a      	sxth	r2, r3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a486:	10db      	asrs	r3, r3, #3
 800a488:	b21b      	sxth	r3, r3
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a492:	b29b      	uxth	r3, r3
 800a494:	4413      	add	r3, r2
 800a496:	b29b      	uxth	r3, r3
 800a498:	b21a      	sxth	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a4a6:	4b3d      	ldr	r3, [pc, #244]	; (800a59c <tcp_receive+0x610>)
 800a4a8:	881b      	ldrh	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f000 850f 	beq.w	800aece <tcp_receive+0xf42>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	7d1b      	ldrb	r3, [r3, #20]
 800a4b4:	2b06      	cmp	r3, #6
 800a4b6:	f200 850a 	bhi.w	800aece <tcp_receive+0xf42>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4be:	4b38      	ldr	r3, [pc, #224]	; (800a5a0 <tcp_receive+0x614>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	1ad3      	subs	r3, r2, r3
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f2c0 809e 	blt.w	800a608 <tcp_receive+0x67c>
 800a4cc:	4b33      	ldr	r3, [pc, #204]	; (800a59c <tcp_receive+0x610>)
 800a4ce:	881b      	ldrh	r3, [r3, #0]
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	4b33      	ldr	r3, [pc, #204]	; (800a5a0 <tcp_receive+0x614>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	441a      	add	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4dc:	425b      	negs	r3, r3
 800a4de:	4413      	add	r3, r2
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f2c0 8090 	blt.w	800a608 <tcp_receive+0x67c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a4e8:	4b2e      	ldr	r3, [pc, #184]	; (800a5a4 <tcp_receive+0x618>)
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	64bb      	str	r3, [r7, #72]	; 0x48
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4f2:	4b2b      	ldr	r3, [pc, #172]	; (800a5a0 <tcp_receive+0x614>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	1ad3      	subs	r3, r2, r3
 800a4f8:	62bb      	str	r3, [r7, #40]	; 0x28
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a4fa:	4b2a      	ldr	r3, [pc, #168]	; (800a5a4 <tcp_receive+0x618>)
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10b      	bne.n	800a51a <tcp_receive+0x58e>
 800a502:	4b29      	ldr	r3, [pc, #164]	; (800a5a8 <tcp_receive+0x61c>)
 800a504:	f240 529a 	movw	r2, #1434	; 0x59a
 800a508:	4928      	ldr	r1, [pc, #160]	; (800a5ac <tcp_receive+0x620>)
 800a50a:	4829      	ldr	r0, [pc, #164]	; (800a5b0 <tcp_receive+0x624>)
 800a50c:	f009 fb70 	bl	8013bf0 <iprintf>
 800a510:	2000      	movs	r0, #0
 800a512:	f009 fc6f 	bl	8013df4 <fflush>
 800a516:	f009 fbb4 	bl	8013c82 <abort>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a520:	4293      	cmp	r3, r2
 800a522:	d90b      	bls.n	800a53c <tcp_receive+0x5b0>
 800a524:	4b20      	ldr	r3, [pc, #128]	; (800a5a8 <tcp_receive+0x61c>)
 800a526:	f240 529b 	movw	r2, #1435	; 0x59b
 800a52a:	4922      	ldr	r1, [pc, #136]	; (800a5b4 <tcp_receive+0x628>)
 800a52c:	4820      	ldr	r0, [pc, #128]	; (800a5b0 <tcp_receive+0x624>)
 800a52e:	f009 fb5f 	bl	8013bf0 <iprintf>
 800a532:	2000      	movs	r0, #0
 800a534:	f009 fc5e 	bl	8013df4 <fflush>
 800a538:	f009 fba3 	bl	8013c82 <abort>
      off = (u16_t)off32;
 800a53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a542:	4b18      	ldr	r3, [pc, #96]	; (800a5a4 <tcp_receive+0x618>)
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	891b      	ldrh	r3, [r3, #8]
 800a548:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d90b      	bls.n	800a568 <tcp_receive+0x5dc>
 800a550:	4b15      	ldr	r3, [pc, #84]	; (800a5a8 <tcp_receive+0x61c>)
 800a552:	f240 529d 	movw	r2, #1437	; 0x59d
 800a556:	4918      	ldr	r1, [pc, #96]	; (800a5b8 <tcp_receive+0x62c>)
 800a558:	4815      	ldr	r0, [pc, #84]	; (800a5b0 <tcp_receive+0x624>)
 800a55a:	f009 fb49 	bl	8013bf0 <iprintf>
 800a55e:	2000      	movs	r0, #0
 800a560:	f009 fc48 	bl	8013df4 <fflush>
 800a564:	f009 fb8d 	bl	8013c82 <abort>
      inseg.len -= off;
 800a568:	4b0e      	ldr	r3, [pc, #56]	; (800a5a4 <tcp_receive+0x618>)
 800a56a:	891a      	ldrh	r2, [r3, #8]
 800a56c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	b29a      	uxth	r2, r3
 800a574:	4b0b      	ldr	r3, [pc, #44]	; (800a5a4 <tcp_receive+0x618>)
 800a576:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a578:	4b0a      	ldr	r3, [pc, #40]	; (800a5a4 <tcp_receive+0x618>)
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	891a      	ldrh	r2, [r3, #8]
 800a57e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a582:	1ad3      	subs	r3, r2, r3
 800a584:	84fb      	strh	r3, [r7, #38]	; 0x26
      while (p->len < off) {
 800a586:	e029      	b.n	800a5dc <tcp_receive+0x650>
 800a588:	0801706c 	.word	0x0801706c
 800a58c:	08017074 	.word	0x08017074
 800a590:	2000072c 	.word	0x2000072c
 800a594:	20000728 	.word	0x20000728
 800a598:	200022c8 	.word	0x200022c8
 800a59c:	2000072e 	.word	0x2000072e
 800a5a0:	20000724 	.word	0x20000724
 800a5a4:	20000700 	.word	0x20000700
 800a5a8:	08016d14 	.word	0x08016d14
 800a5ac:	0801707c 	.word	0x0801707c
 800a5b0:	08016d50 	.word	0x08016d50
 800a5b4:	0801708c 	.word	0x0801708c
 800a5b8:	0801709c 	.word	0x0801709c
        off -= p->len;
 800a5bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5be:	895b      	ldrh	r3, [r3, #10]
 800a5c0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a5c4:	1ad3      	subs	r3, r2, r3
 800a5c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a5ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a5ce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a5d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a5d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	64bb      	str	r3, [r7, #72]	; 0x48
      while (p->len < off) {
 800a5dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5de:	895b      	ldrh	r3, [r3, #10]
 800a5e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d8e9      	bhi.n	800a5bc <tcp_receive+0x630>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a5e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a5f0:	f7fb fd8a 	bl	8006108 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a5f4:	4b94      	ldr	r3, [pc, #592]	; (800a848 <tcp_receive+0x8bc>)
 800a5f6:	691b      	ldr	r3, [r3, #16]
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a5fc:	4993      	ldr	r1, [pc, #588]	; (800a84c <tcp_receive+0x8c0>)
 800a5fe:	600a      	str	r2, [r1, #0]
 800a600:	4a92      	ldr	r2, [pc, #584]	; (800a84c <tcp_receive+0x8c0>)
 800a602:	6812      	ldr	r2, [r2, #0]
 800a604:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a606:	e00d      	b.n	800a624 <tcp_receive+0x698>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a608:	4b90      	ldr	r3, [pc, #576]	; (800a84c <tcp_receive+0x8c0>)
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	2b00      	cmp	r3, #0
 800a614:	da06      	bge.n	800a624 <tcp_receive+0x698>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	8b5b      	ldrh	r3, [r3, #26]
 800a61a:	f043 0302 	orr.w	r3, r3, #2
 800a61e:	b29a      	uxth	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a624:	4b89      	ldr	r3, [pc, #548]	; (800a84c <tcp_receive+0x8c0>)
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f2c0 8448 	blt.w	800aec4 <tcp_receive+0xf38>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a63c:	441a      	add	r2, r3
 800a63e:	4b83      	ldr	r3, [pc, #524]	; (800a84c <tcp_receive+0x8c0>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	425b      	negs	r3, r3
 800a644:	4413      	add	r3, r2
 800a646:	3b01      	subs	r3, #1
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f2c0 843b 	blt.w	800aec4 <tcp_receive+0xf38>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a652:	4b7e      	ldr	r3, [pc, #504]	; (800a84c <tcp_receive+0x8c0>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	429a      	cmp	r2, r3
 800a658:	f040 82ab 	bne.w	800abb2 <tcp_receive+0xc26>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a65c:	4b7a      	ldr	r3, [pc, #488]	; (800a848 <tcp_receive+0x8bc>)
 800a65e:	891c      	ldrh	r4, [r3, #8]
 800a660:	4b79      	ldr	r3, [pc, #484]	; (800a848 <tcp_receive+0x8bc>)
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	899b      	ldrh	r3, [r3, #12]
 800a666:	b29b      	uxth	r3, r3
 800a668:	4618      	mov	r0, r3
 800a66a:	f7f9 fc91 	bl	8003f90 <lwip_htons>
 800a66e:	4603      	mov	r3, r0
 800a670:	b2db      	uxtb	r3, r3
 800a672:	f003 0303 	and.w	r3, r3, #3
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <tcp_receive+0x6f2>
 800a67a:	2301      	movs	r3, #1
 800a67c:	e000      	b.n	800a680 <tcp_receive+0x6f4>
 800a67e:	2300      	movs	r3, #0
 800a680:	4423      	add	r3, r4
 800a682:	b29a      	uxth	r2, r3
 800a684:	4b72      	ldr	r3, [pc, #456]	; (800a850 <tcp_receive+0x8c4>)
 800a686:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a68c:	4b70      	ldr	r3, [pc, #448]	; (800a850 <tcp_receive+0x8c4>)
 800a68e:	881b      	ldrh	r3, [r3, #0]
 800a690:	429a      	cmp	r2, r3
 800a692:	d27a      	bcs.n	800a78a <tcp_receive+0x7fe>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a694:	4b6c      	ldr	r3, [pc, #432]	; (800a848 <tcp_receive+0x8bc>)
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	899b      	ldrh	r3, [r3, #12]
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7f9 fc77 	bl	8003f90 <lwip_htons>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	f003 0301 	and.w	r3, r3, #1
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d01f      	beq.n	800a6ee <tcp_receive+0x762>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a6ae:	4b66      	ldr	r3, [pc, #408]	; (800a848 <tcp_receive+0x8bc>)
 800a6b0:	691c      	ldr	r4, [r3, #16]
 800a6b2:	4b65      	ldr	r3, [pc, #404]	; (800a848 <tcp_receive+0x8bc>)
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	899b      	ldrh	r3, [r3, #12]
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	b21b      	sxth	r3, r3
 800a6bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a6c0:	b21d      	sxth	r5, r3
 800a6c2:	4b61      	ldr	r3, [pc, #388]	; (800a848 <tcp_receive+0x8bc>)
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	899b      	ldrh	r3, [r3, #12]
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7f9 fc60 	bl	8003f90 <lwip_htons>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7f9 fc57 	bl	8003f90 <lwip_htons>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	b21b      	sxth	r3, r3
 800a6e6:	432b      	orrs	r3, r5
 800a6e8:	b21b      	sxth	r3, r3
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a6f2:	4b55      	ldr	r3, [pc, #340]	; (800a848 <tcp_receive+0x8bc>)
 800a6f4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a6f6:	4b54      	ldr	r3, [pc, #336]	; (800a848 <tcp_receive+0x8bc>)
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	899b      	ldrh	r3, [r3, #12]
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7f9 fc46 	bl	8003f90 <lwip_htons>
 800a704:	4603      	mov	r3, r0
 800a706:	b2db      	uxtb	r3, r3
 800a708:	f003 0302 	and.w	r3, r3, #2
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d005      	beq.n	800a71c <tcp_receive+0x790>
            inseg.len -= 1;
 800a710:	4b4d      	ldr	r3, [pc, #308]	; (800a848 <tcp_receive+0x8bc>)
 800a712:	891b      	ldrh	r3, [r3, #8]
 800a714:	3b01      	subs	r3, #1
 800a716:	b29a      	uxth	r2, r3
 800a718:	4b4b      	ldr	r3, [pc, #300]	; (800a848 <tcp_receive+0x8bc>)
 800a71a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a71c:	4b4a      	ldr	r3, [pc, #296]	; (800a848 <tcp_receive+0x8bc>)
 800a71e:	685a      	ldr	r2, [r3, #4]
 800a720:	4b49      	ldr	r3, [pc, #292]	; (800a848 <tcp_receive+0x8bc>)
 800a722:	891b      	ldrh	r3, [r3, #8]
 800a724:	4619      	mov	r1, r3
 800a726:	4610      	mov	r0, r2
 800a728:	f7fb fbcc 	bl	8005ec4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a72c:	4b46      	ldr	r3, [pc, #280]	; (800a848 <tcp_receive+0x8bc>)
 800a72e:	891c      	ldrh	r4, [r3, #8]
 800a730:	4b45      	ldr	r3, [pc, #276]	; (800a848 <tcp_receive+0x8bc>)
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	899b      	ldrh	r3, [r3, #12]
 800a736:	b29b      	uxth	r3, r3
 800a738:	4618      	mov	r0, r3
 800a73a:	f7f9 fc29 	bl	8003f90 <lwip_htons>
 800a73e:	4603      	mov	r3, r0
 800a740:	b2db      	uxtb	r3, r3
 800a742:	f003 0303 	and.w	r3, r3, #3
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <tcp_receive+0x7c2>
 800a74a:	2301      	movs	r3, #1
 800a74c:	e000      	b.n	800a750 <tcp_receive+0x7c4>
 800a74e:	2300      	movs	r3, #0
 800a750:	4423      	add	r3, r4
 800a752:	b29a      	uxth	r2, r3
 800a754:	4b3e      	ldr	r3, [pc, #248]	; (800a850 <tcp_receive+0x8c4>)
 800a756:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 800a758:	4b3d      	ldr	r3, [pc, #244]	; (800a850 <tcp_receive+0x8c4>)
 800a75a:	881b      	ldrh	r3, [r3, #0]
 800a75c:	461a      	mov	r2, r3
 800a75e:	4b3b      	ldr	r3, [pc, #236]	; (800a84c <tcp_receive+0x8c0>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	441a      	add	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a768:	6879      	ldr	r1, [r7, #4]
 800a76a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a76c:	440b      	add	r3, r1
 800a76e:	429a      	cmp	r2, r3
 800a770:	d00b      	beq.n	800a78a <tcp_receive+0x7fe>
 800a772:	4b38      	ldr	r3, [pc, #224]	; (800a854 <tcp_receive+0x8c8>)
 800a774:	f240 52d2 	movw	r2, #1490	; 0x5d2
 800a778:	4937      	ldr	r1, [pc, #220]	; (800a858 <tcp_receive+0x8cc>)
 800a77a:	4838      	ldr	r0, [pc, #224]	; (800a85c <tcp_receive+0x8d0>)
 800a77c:	f009 fa38 	bl	8013bf0 <iprintf>
 800a780:	2000      	movs	r0, #0
 800a782:	f009 fb37 	bl	8013df4 <fflush>
 800a786:	f009 fa7c 	bl	8013c82 <abort>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f000 80ea 	beq.w	800a968 <tcp_receive+0x9dc>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a794:	4b2c      	ldr	r3, [pc, #176]	; (800a848 <tcp_receive+0x8bc>)
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	899b      	ldrh	r3, [r3, #12]
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7f9 fbf7 	bl	8003f90 <lwip_htons>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	f003 0301 	and.w	r3, r3, #1
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d010      	beq.n	800a7d0 <tcp_receive+0x844>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a7ae:	e00a      	b.n	800a7c6 <tcp_receive+0x83a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7b4:	623b      	str	r3, [r7, #32]
              pcb->ooseq = pcb->ooseq->next;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a7c0:	6a38      	ldr	r0, [r7, #32]
 800a7c2:	f7fd fb47 	bl	8007e54 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1f0      	bne.n	800a7b0 <tcp_receive+0x824>
 800a7ce:	e0cb      	b.n	800a968 <tcp_receive+0x9dc>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7d4:	643b      	str	r3, [r7, #64]	; 0x40
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a7d6:	e050      	b.n	800a87a <tcp_receive+0x8ee>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a7d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	899b      	ldrh	r3, [r3, #12]
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7f9 fbd5 	bl	8003f90 <lwip_htons>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d03b      	beq.n	800a86a <tcp_receive+0x8de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a7f2:	4b15      	ldr	r3, [pc, #84]	; (800a848 <tcp_receive+0x8bc>)
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	899b      	ldrh	r3, [r3, #12]
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7f9 fbc8 	bl	8003f90 <lwip_htons>
 800a800:	4603      	mov	r3, r0
 800a802:	b2db      	uxtb	r3, r3
 800a804:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d12e      	bne.n	800a86a <tcp_receive+0x8de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a80c:	4b0e      	ldr	r3, [pc, #56]	; (800a848 <tcp_receive+0x8bc>)
 800a80e:	691c      	ldr	r4, [r3, #16]
 800a810:	4b0d      	ldr	r3, [pc, #52]	; (800a848 <tcp_receive+0x8bc>)
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	899b      	ldrh	r3, [r3, #12]
 800a816:	b29d      	uxth	r5, r3
 800a818:	2001      	movs	r0, #1
 800a81a:	f7f9 fbb9 	bl	8003f90 <lwip_htons>
 800a81e:	4603      	mov	r3, r0
 800a820:	432b      	orrs	r3, r5
 800a822:	b29b      	uxth	r3, r3
 800a824:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a826:	4b08      	ldr	r3, [pc, #32]	; (800a848 <tcp_receive+0x8bc>)
 800a828:	891c      	ldrh	r4, [r3, #8]
 800a82a:	4b07      	ldr	r3, [pc, #28]	; (800a848 <tcp_receive+0x8bc>)
 800a82c:	691b      	ldr	r3, [r3, #16]
 800a82e:	899b      	ldrh	r3, [r3, #12]
 800a830:	b29b      	uxth	r3, r3
 800a832:	4618      	mov	r0, r3
 800a834:	f7f9 fbac 	bl	8003f90 <lwip_htons>
 800a838:	4603      	mov	r3, r0
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	f003 0303 	and.w	r3, r3, #3
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00d      	beq.n	800a860 <tcp_receive+0x8d4>
 800a844:	2301      	movs	r3, #1
 800a846:	e00c      	b.n	800a862 <tcp_receive+0x8d6>
 800a848:	20000700 	.word	0x20000700
 800a84c:	20000724 	.word	0x20000724
 800a850:	2000072e 	.word	0x2000072e
 800a854:	08016d14 	.word	0x08016d14
 800a858:	080170ac 	.word	0x080170ac
 800a85c:	08016d50 	.word	0x08016d50
 800a860:	2300      	movs	r3, #0
 800a862:	4423      	add	r3, r4
 800a864:	b29a      	uxth	r2, r3
 800a866:	4b9f      	ldr	r3, [pc, #636]	; (800aae4 <tcp_receive+0xb58>)
 800a868:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a86a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a86c:	61fb      	str	r3, [r7, #28]
              next = next->next;
 800a86e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	643b      	str	r3, [r7, #64]	; 0x40
              tcp_seg_free(tmp);
 800a874:	69f8      	ldr	r0, [r7, #28]
 800a876:	f7fd faed 	bl	8007e54 <tcp_seg_free>
            while (next &&
 800a87a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00e      	beq.n	800a89e <tcp_receive+0x912>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a880:	4b98      	ldr	r3, [pc, #608]	; (800aae4 <tcp_receive+0xb58>)
 800a882:	881b      	ldrh	r3, [r3, #0]
 800a884:	461a      	mov	r2, r3
 800a886:	4b98      	ldr	r3, [pc, #608]	; (800aae8 <tcp_receive+0xb5c>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	441a      	add	r2, r3
 800a88c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a894:	8909      	ldrh	r1, [r1, #8]
 800a896:	440b      	add	r3, r1
 800a898:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	da9c      	bge.n	800a7d8 <tcp_receive+0x84c>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a89e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d05e      	beq.n	800a962 <tcp_receive+0x9d6>
                TCP_SEQ_GT(seqno + tcplen,
 800a8a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	4b8e      	ldr	r3, [pc, #568]	; (800aae4 <tcp_receive+0xb58>)
 800a8ac:	881b      	ldrh	r3, [r3, #0]
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	4b8d      	ldr	r3, [pc, #564]	; (800aae8 <tcp_receive+0xb5c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	440b      	add	r3, r1
 800a8b6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	da52      	bge.n	800a962 <tcp_receive+0x9d6>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a8bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	b29a      	uxth	r2, r3
 800a8c4:	4b88      	ldr	r3, [pc, #544]	; (800aae8 <tcp_receive+0xb5c>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	4b87      	ldr	r3, [pc, #540]	; (800aaec <tcp_receive+0xb60>)
 800a8d0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a8d2:	4b86      	ldr	r3, [pc, #536]	; (800aaec <tcp_receive+0xb60>)
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	899b      	ldrh	r3, [r3, #12]
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7f9 fb58 	bl	8003f90 <lwip_htons>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	f003 0302 	and.w	r3, r3, #2
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d005      	beq.n	800a8f8 <tcp_receive+0x96c>
                inseg.len -= 1;
 800a8ec:	4b7f      	ldr	r3, [pc, #508]	; (800aaec <tcp_receive+0xb60>)
 800a8ee:	891b      	ldrh	r3, [r3, #8]
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	4b7d      	ldr	r3, [pc, #500]	; (800aaec <tcp_receive+0xb60>)
 800a8f6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a8f8:	4b7c      	ldr	r3, [pc, #496]	; (800aaec <tcp_receive+0xb60>)
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	4b7b      	ldr	r3, [pc, #492]	; (800aaec <tcp_receive+0xb60>)
 800a8fe:	891b      	ldrh	r3, [r3, #8]
 800a900:	4619      	mov	r1, r3
 800a902:	4610      	mov	r0, r2
 800a904:	f7fb fade 	bl	8005ec4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a908:	4b78      	ldr	r3, [pc, #480]	; (800aaec <tcp_receive+0xb60>)
 800a90a:	891c      	ldrh	r4, [r3, #8]
 800a90c:	4b77      	ldr	r3, [pc, #476]	; (800aaec <tcp_receive+0xb60>)
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	899b      	ldrh	r3, [r3, #12]
 800a912:	b29b      	uxth	r3, r3
 800a914:	4618      	mov	r0, r3
 800a916:	f7f9 fb3b 	bl	8003f90 <lwip_htons>
 800a91a:	4603      	mov	r3, r0
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	f003 0303 	and.w	r3, r3, #3
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <tcp_receive+0x99e>
 800a926:	2301      	movs	r3, #1
 800a928:	e000      	b.n	800a92c <tcp_receive+0x9a0>
 800a92a:	2300      	movs	r3, #0
 800a92c:	4423      	add	r3, r4
 800a92e:	b29a      	uxth	r2, r3
 800a930:	4b6c      	ldr	r3, [pc, #432]	; (800aae4 <tcp_receive+0xb58>)
 800a932:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue",
 800a934:	4b6b      	ldr	r3, [pc, #428]	; (800aae4 <tcp_receive+0xb58>)
 800a936:	881b      	ldrh	r3, [r3, #0]
 800a938:	461a      	mov	r2, r3
 800a93a:	4b6b      	ldr	r3, [pc, #428]	; (800aae8 <tcp_receive+0xb5c>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	441a      	add	r2, r3
 800a940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	429a      	cmp	r2, r3
 800a948:	d00b      	beq.n	800a962 <tcp_receive+0x9d6>
 800a94a:	4b69      	ldr	r3, [pc, #420]	; (800aaf0 <tcp_receive+0xb64>)
 800a94c:	f240 6203 	movw	r2, #1539	; 0x603
 800a950:	4968      	ldr	r1, [pc, #416]	; (800aaf4 <tcp_receive+0xb68>)
 800a952:	4869      	ldr	r0, [pc, #420]	; (800aaf8 <tcp_receive+0xb6c>)
 800a954:	f009 f94c 	bl	8013bf0 <iprintf>
 800a958:	2000      	movs	r0, #0
 800a95a:	f009 fa4b 	bl	8013df4 <fflush>
 800a95e:	f009 f990 	bl	8013c82 <abort>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a966:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a968:	4b5e      	ldr	r3, [pc, #376]	; (800aae4 <tcp_receive+0xb58>)
 800a96a:	881b      	ldrh	r3, [r3, #0]
 800a96c:	461a      	mov	r2, r3
 800a96e:	4b5e      	ldr	r3, [pc, #376]	; (800aae8 <tcp_receive+0xb5c>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	441a      	add	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd", pcb->rcv_wnd >= tcplen);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a97c:	4b59      	ldr	r3, [pc, #356]	; (800aae4 <tcp_receive+0xb58>)
 800a97e:	881b      	ldrh	r3, [r3, #0]
 800a980:	429a      	cmp	r2, r3
 800a982:	d20b      	bcs.n	800a99c <tcp_receive+0xa10>
 800a984:	4b5a      	ldr	r3, [pc, #360]	; (800aaf0 <tcp_receive+0xb64>)
 800a986:	f240 620d 	movw	r2, #1549	; 0x60d
 800a98a:	495c      	ldr	r1, [pc, #368]	; (800aafc <tcp_receive+0xb70>)
 800a98c:	485a      	ldr	r0, [pc, #360]	; (800aaf8 <tcp_receive+0xb6c>)
 800a98e:	f009 f92f 	bl	8013bf0 <iprintf>
 800a992:	2000      	movs	r0, #0
 800a994:	f009 fa2e 	bl	8013df4 <fflush>
 800a998:	f009 f973 	bl	8013c82 <abort>
        pcb->rcv_wnd -= tcplen;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a9a0:	4b50      	ldr	r3, [pc, #320]	; (800aae4 <tcp_receive+0xb58>)
 800a9a2:	881b      	ldrh	r3, [r3, #0]
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f7fc fbcf 	bl	8007150 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a9b2:	4b4e      	ldr	r3, [pc, #312]	; (800aaec <tcp_receive+0xb60>)
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	891b      	ldrh	r3, [r3, #8]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d006      	beq.n	800a9ca <tcp_receive+0xa3e>
          recv_data = inseg.p;
 800a9bc:	4b4b      	ldr	r3, [pc, #300]	; (800aaec <tcp_receive+0xb60>)
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	4a4f      	ldr	r2, [pc, #316]	; (800ab00 <tcp_receive+0xb74>)
 800a9c2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakenly) deallocate it. */
          inseg.p = NULL;
 800a9c4:	4b49      	ldr	r3, [pc, #292]	; (800aaec <tcp_receive+0xb60>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a9ca:	4b48      	ldr	r3, [pc, #288]	; (800aaec <tcp_receive+0xb60>)
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	899b      	ldrh	r3, [r3, #12]
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7f9 fadc 	bl	8003f90 <lwip_htons>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	f003 0301 	and.w	r3, r3, #1
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f000 80bc 	beq.w	800ab5e <tcp_receive+0xbd2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a9e6:	4b47      	ldr	r3, [pc, #284]	; (800ab04 <tcp_receive+0xb78>)
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	f043 0320 	orr.w	r3, r3, #32
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	4b44      	ldr	r3, [pc, #272]	; (800ab04 <tcp_receive+0xb78>)
 800a9f2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a9f4:	e0b3      	b.n	800ab5e <tcp_receive+0xbd2>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9fa:	61bb      	str	r3, [r7, #24]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	4a38      	ldr	r2, [pc, #224]	; (800aae8 <tcp_receive+0xb5c>)
 800aa06:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	891b      	ldrh	r3, [r3, #8]
 800aa0c:	461c      	mov	r4, r3
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	899b      	ldrh	r3, [r3, #12]
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7f9 faba 	bl	8003f90 <lwip_htons>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	f003 0303 	and.w	r3, r3, #3
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d001      	beq.n	800aa2c <tcp_receive+0xaa0>
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e000      	b.n	800aa2e <tcp_receive+0xaa2>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	4423      	add	r3, r4
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aa34:	441a      	add	r2, r3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd",
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa3e:	461c      	mov	r4, r3
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	891b      	ldrh	r3, [r3, #8]
 800aa44:	461d      	mov	r5, r3
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	691b      	ldr	r3, [r3, #16]
 800aa4a:	899b      	ldrh	r3, [r3, #12]
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7f9 fa9e 	bl	8003f90 <lwip_htons>
 800aa54:	4603      	mov	r3, r0
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	f003 0303 	and.w	r3, r3, #3
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d001      	beq.n	800aa64 <tcp_receive+0xad8>
 800aa60:	2301      	movs	r3, #1
 800aa62:	e000      	b.n	800aa66 <tcp_receive+0xada>
 800aa64:	2300      	movs	r3, #0
 800aa66:	442b      	add	r3, r5
 800aa68:	429c      	cmp	r4, r3
 800aa6a:	d20b      	bcs.n	800aa84 <tcp_receive+0xaf8>
 800aa6c:	4b20      	ldr	r3, [pc, #128]	; (800aaf0 <tcp_receive+0xb64>)
 800aa6e:	f240 6232 	movw	r2, #1586	; 0x632
 800aa72:	4925      	ldr	r1, [pc, #148]	; (800ab08 <tcp_receive+0xb7c>)
 800aa74:	4820      	ldr	r0, [pc, #128]	; (800aaf8 <tcp_receive+0xb6c>)
 800aa76:	f009 f8bb 	bl	8013bf0 <iprintf>
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	f009 f9ba 	bl	8013df4 <fflush>
 800aa80:	f009 f8ff 	bl	8013c82 <abort>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	891b      	ldrh	r3, [r3, #8]
 800aa88:	461c      	mov	r4, r3
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	899b      	ldrh	r3, [r3, #12]
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7f9 fa7c 	bl	8003f90 <lwip_htons>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	f003 0303 	and.w	r3, r3, #3
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d001      	beq.n	800aaa8 <tcp_receive+0xb1c>
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e000      	b.n	800aaaa <tcp_receive+0xb1e>
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	18e1      	adds	r1, r4, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aab0:	b28b      	uxth	r3, r1
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7fc fb48 	bl	8007150 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	891b      	ldrh	r3, [r3, #8]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d027      	beq.n	800ab1a <tcp_receive+0xb8e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800aaca:	4b0d      	ldr	r3, [pc, #52]	; (800ab00 <tcp_receive+0xb74>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d01c      	beq.n	800ab0c <tcp_receive+0xb80>
              pbuf_cat(recv_data, cseg->p);
 800aad2:	4b0b      	ldr	r3, [pc, #44]	; (800ab00 <tcp_receive+0xb74>)
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	4619      	mov	r1, r3
 800aadc:	4610      	mov	r0, r2
 800aade:	f7fb fc31 	bl	8006344 <pbuf_cat>
 800aae2:	e017      	b.n	800ab14 <tcp_receive+0xb88>
 800aae4:	2000072e 	.word	0x2000072e
 800aae8:	20000724 	.word	0x20000724
 800aaec:	20000700 	.word	0x20000700
 800aaf0:	08016d14 	.word	0x08016d14
 800aaf4:	080170e4 	.word	0x080170e4
 800aaf8:	08016d50 	.word	0x08016d50
 800aafc:	08017120 	.word	0x08017120
 800ab00:	20000734 	.word	0x20000734
 800ab04:	20000731 	.word	0x20000731
 800ab08:	08017140 	.word	0x08017140
            } else {
              recv_data = cseg->p;
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	4a73      	ldr	r2, [pc, #460]	; (800ace0 <tcp_receive+0xd54>)
 800ab12:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	2200      	movs	r2, #0
 800ab18:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	899b      	ldrh	r3, [r3, #12]
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7f9 fa34 	bl	8003f90 <lwip_htons>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	f003 0301 	and.w	r3, r3, #1
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d00d      	beq.n	800ab50 <tcp_receive+0xbc4>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ab34:	4b6b      	ldr	r3, [pc, #428]	; (800ace4 <tcp_receive+0xd58>)
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	f043 0320 	orr.w	r3, r3, #32
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	4b69      	ldr	r3, [pc, #420]	; (800ace4 <tcp_receive+0xd58>)
 800ab40:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	7d1b      	ldrb	r3, [r3, #20]
 800ab46:	2b04      	cmp	r3, #4
 800ab48:	d102      	bne.n	800ab50 <tcp_receive+0xbc4>
              pcb->state = CLOSE_WAIT;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2207      	movs	r2, #7
 800ab4e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ab58:	69b8      	ldr	r0, [r7, #24]
 800ab5a:	f7fd f97b 	bl	8007e54 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d008      	beq.n	800ab78 <tcp_receive+0xbec>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab6a:	691b      	ldr	r3, [r3, #16]
 800ab6c:	685a      	ldr	r2, [r3, #4]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ab72:	429a      	cmp	r2, r3
 800ab74:	f43f af3f 	beq.w	800a9f6 <tcp_receive+0xa6a>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	8b5b      	ldrh	r3, [r3, #26]
 800ab7c:	f003 0301 	and.w	r3, r3, #1
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00e      	beq.n	800aba2 <tcp_receive+0xc16>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	8b5b      	ldrh	r3, [r3, #26]
 800ab88:	f023 0301 	bic.w	r3, r3, #1
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	835a      	strh	r2, [r3, #26]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	8b5b      	ldrh	r3, [r3, #26]
 800ab96:	f043 0302 	orr.w	r3, r3, #2
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800aba0:	e194      	b.n	800aecc <tcp_receive+0xf40>
        tcp_ack(pcb);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	8b5b      	ldrh	r3, [r3, #26]
 800aba6:	f043 0301 	orr.w	r3, r3, #1
 800abaa:	b29a      	uxth	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800abb0:	e18c      	b.n	800aecc <tcp_receive+0xf40>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d106      	bne.n	800abc8 <tcp_receive+0xc3c>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800abba:	484b      	ldr	r0, [pc, #300]	; (800ace8 <tcp_receive+0xd5c>)
 800abbc:	f7fd f962 	bl	8007e84 <tcp_seg_copy>
 800abc0:	4602      	mov	r2, r0
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	675a      	str	r2, [r3, #116]	; 0x74
 800abc6:	e179      	b.n	800aebc <tcp_receive+0xf30>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800abc8:	2300      	movs	r3, #0
 800abca:	63bb      	str	r3, [r7, #56]	; 0x38
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abd2:	e161      	b.n	800ae98 <tcp_receive+0xf0c>
            if (seqno == next->tcphdr->seqno) {
 800abd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abd6:	691b      	ldr	r3, [r3, #16]
 800abd8:	685a      	ldr	r2, [r3, #4]
 800abda:	4b44      	ldr	r3, [pc, #272]	; (800acec <tcp_receive+0xd60>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d122      	bne.n	800ac28 <tcp_receive+0xc9c>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800abe2:	4b41      	ldr	r3, [pc, #260]	; (800ace8 <tcp_receive+0xd5c>)
 800abe4:	891a      	ldrh	r2, [r3, #8]
 800abe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abe8:	891b      	ldrh	r3, [r3, #8]
 800abea:	429a      	cmp	r2, r3
 800abec:	f240 8159 	bls.w	800aea2 <tcp_receive+0xf16>

                /* If next segment is the last segment in ooseq
                   and smaller than inseg, that means it has been
                   trimmed before to fit our window, so we just
                   break here. */
                if (next->next == NULL) {
 800abf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f000 8156 	beq.w	800aea6 <tcp_receive+0xf1a>
                }

                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800abfa:	483b      	ldr	r0, [pc, #236]	; (800ace8 <tcp_receive+0xd5c>)
 800abfc:	f7fd f942 	bl	8007e84 <tcp_seg_copy>
 800ac00:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f000 8150 	beq.w	800aeaa <tcp_receive+0xf1e>
                  if (prev != NULL) {
 800ac0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d003      	beq.n	800ac18 <tcp_receive+0xc8c>
                    prev->next = cseg;
 800ac10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	601a      	str	r2, [r3, #0]
 800ac16:	e002      	b.n	800ac1e <tcp_receive+0xc92>
                  } else {
                    pcb->ooseq = cseg;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ac1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f7ff f8a1 	bl	8009d68 <tcp_oos_insert_segment>
                }
                break;
 800ac26:	e140      	b.n	800aeaa <tcp_receive+0xf1e>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ac28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d117      	bne.n	800ac5e <tcp_receive+0xcd2>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ac2e:	4b2f      	ldr	r3, [pc, #188]	; (800acec <tcp_receive+0xd60>)
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	da58      	bge.n	800acf0 <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ac3e:	482a      	ldr	r0, [pc, #168]	; (800ace8 <tcp_receive+0xd5c>)
 800ac40:	f7fd f920 	bl	8007e84 <tcp_seg_copy>
 800ac44:	6178      	str	r0, [r7, #20]
                  if (cseg != NULL) {
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f000 8130 	beq.w	800aeae <tcp_receive+0xf22>
                    pcb->ooseq = cseg;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ac54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac56:	6978      	ldr	r0, [r7, #20]
 800ac58:	f7ff f886 	bl	8009d68 <tcp_oos_insert_segment>
                  }
                  break;
 800ac5c:	e127      	b.n	800aeae <tcp_receive+0xf22>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ac5e:	4b23      	ldr	r3, [pc, #140]	; (800acec <tcp_receive+0xd60>)
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	1ad3      	subs	r3, r2, r3
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	db3f      	blt.n	800acf0 <tcp_receive+0xd64>
 800ac70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	685a      	ldr	r2, [r3, #4]
 800ac76:	4b1d      	ldr	r3, [pc, #116]	; (800acec <tcp_receive+0xd60>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	1ad3      	subs	r3, r2, r3
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	db36      	blt.n	800acf0 <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ac82:	4819      	ldr	r0, [pc, #100]	; (800ace8 <tcp_receive+0xd5c>)
 800ac84:	f7fd f8fe 	bl	8007e84 <tcp_seg_copy>
 800ac88:	6138      	str	r0, [r7, #16]
                  if (cseg != NULL) {
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f000 8110 	beq.w	800aeb2 <tcp_receive+0xf26>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ac92:	4b16      	ldr	r3, [pc, #88]	; (800acec <tcp_receive+0xd60>)
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac9e:	8909      	ldrh	r1, [r1, #8]
 800aca0:	440b      	add	r3, r1
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	da12      	bge.n	800acce <tcp_receive+0xd42>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800aca8:	4b10      	ldr	r3, [pc, #64]	; (800acec <tcp_receive+0xd60>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	b29a      	uxth	r2, r3
 800acae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb0:	691b      	ldr	r3, [r3, #16]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	1ad3      	subs	r3, r2, r3
 800acb8:	b29a      	uxth	r2, r3
 800acba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acbc:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800acbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc0:	685a      	ldr	r2, [r3, #4]
 800acc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc4:	891b      	ldrh	r3, [r3, #8]
 800acc6:	4619      	mov	r1, r3
 800acc8:	4610      	mov	r0, r2
 800acca:	f7fb f8fb 	bl	8005ec4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800acce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd0:	693a      	ldr	r2, [r7, #16]
 800acd2:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800acd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800acd6:	6938      	ldr	r0, [r7, #16]
 800acd8:	f7ff f846 	bl	8009d68 <tcp_oos_insert_segment>
                  }
                  break;
 800acdc:	e0e9      	b.n	800aeb2 <tcp_receive+0xf26>
 800acde:	bf00      	nop
 800ace0:	20000734 	.word	0x20000734
 800ace4:	20000731 	.word	0x20000731
 800ace8:	20000700 	.word	0x20000700
 800acec:	20000724 	.word	0x20000724
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800acf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf2:	63bb      	str	r3, [r7, #56]	; 0x38

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800acf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f040 80ca 	bne.w	800ae92 <tcp_receive+0xf06>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800acfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	685a      	ldr	r2, [r3, #4]
 800ad04:	4b81      	ldr	r3, [pc, #516]	; (800af0c <tcp_receive+0xf80>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f280 80c1 	bge.w	800ae92 <tcp_receive+0xf06>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ad10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	899b      	ldrh	r3, [r3, #12]
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7f9 f939 	bl	8003f90 <lwip_htons>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	f040 80c5 	bne.w	800aeb6 <tcp_receive+0xf2a>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ad2c:	4878      	ldr	r0, [pc, #480]	; (800af10 <tcp_receive+0xf84>)
 800ad2e:	f7fd f8a9 	bl	8007e84 <tcp_seg_copy>
 800ad32:	4602      	mov	r2, r0
 800ad34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad36:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ad38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f000 80bc 	beq.w	800aeba <tcp_receive+0xf2e>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ad42:	4b72      	ldr	r3, [pc, #456]	; (800af0c <tcp_receive+0xf80>)
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad4e:	8909      	ldrh	r1, [r1, #8]
 800ad50:	440b      	add	r3, r1
 800ad52:	1ad3      	subs	r3, r2, r3
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	da12      	bge.n	800ad7e <tcp_receive+0xdf2>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ad58:	4b6c      	ldr	r3, [pc, #432]	; (800af0c <tcp_receive+0xf80>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad6c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ad6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad70:	685a      	ldr	r2, [r3, #4]
 800ad72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad74:	891b      	ldrh	r3, [r3, #8]
 800ad76:	4619      	mov	r1, r3
 800ad78:	4610      	mov	r0, r2
 800ad7a:	f7fb f8a3 	bl	8005ec4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ad86:	441a      	add	r2, r3
 800ad88:	4b62      	ldr	r3, [pc, #392]	; (800af14 <tcp_receive+0xf88>)
 800ad8a:	881b      	ldrh	r3, [r3, #0]
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	4b5f      	ldr	r3, [pc, #380]	; (800af0c <tcp_receive+0xf80>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	440b      	add	r3, r1
 800ad94:	1ad3      	subs	r3, r2, r3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f280 808f 	bge.w	800aeba <tcp_receive+0xf2e>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ad9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	899b      	ldrh	r3, [r3, #12]
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7f9 f8f2 	bl	8003f90 <lwip_htons>
 800adac:	4603      	mov	r3, r0
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	f003 0301 	and.w	r3, r3, #1
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d022      	beq.n	800adfe <tcp_receive+0xe72>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800adb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	691c      	ldr	r4, [r3, #16]
 800adbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	899b      	ldrh	r3, [r3, #12]
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	b21b      	sxth	r3, r3
 800adca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800adce:	b21d      	sxth	r5, r3
 800add0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	899b      	ldrh	r3, [r3, #12]
 800add8:	b29b      	uxth	r3, r3
 800adda:	4618      	mov	r0, r3
 800addc:	f7f9 f8d8 	bl	8003f90 <lwip_htons>
 800ade0:	4603      	mov	r3, r0
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800adea:	b29b      	uxth	r3, r3
 800adec:	4618      	mov	r0, r3
 800adee:	f7f9 f8cf 	bl	8003f90 <lwip_htons>
 800adf2:	4603      	mov	r3, r0
 800adf4:	b21b      	sxth	r3, r3
 800adf6:	432b      	orrs	r3, r5
 800adf8:	b21b      	sxth	r3, r3
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800adfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ae06:	b291      	uxth	r1, r2
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ae0c:	440a      	add	r2, r1
 800ae0e:	b291      	uxth	r1, r2
 800ae10:	4a3e      	ldr	r2, [pc, #248]	; (800af0c <tcp_receive+0xf80>)
 800ae12:	6812      	ldr	r2, [r2, #0]
 800ae14:	b292      	uxth	r2, r2
 800ae16:	1a8a      	subs	r2, r1, r2
 800ae18:	b292      	uxth	r2, r2
 800ae1a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ae1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	685a      	ldr	r2, [r3, #4]
 800ae22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	891b      	ldrh	r3, [r3, #8]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	4610      	mov	r0, r2
 800ae2c:	f7fb f84a 	bl	8005ec4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ae30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	891c      	ldrh	r4, [r3, #8]
 800ae36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	899b      	ldrh	r3, [r3, #12]
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7f9 f8a5 	bl	8003f90 <lwip_htons>
 800ae46:	4603      	mov	r3, r0
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	f003 0303 	and.w	r3, r3, #3
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d001      	beq.n	800ae56 <tcp_receive+0xeca>
 800ae52:	2301      	movs	r3, #1
 800ae54:	e000      	b.n	800ae58 <tcp_receive+0xecc>
 800ae56:	2300      	movs	r3, #0
 800ae58:	4423      	add	r3, r4
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	4b2d      	ldr	r3, [pc, #180]	; (800af14 <tcp_receive+0xf88>)
 800ae5e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 800ae60:	4b2c      	ldr	r3, [pc, #176]	; (800af14 <tcp_receive+0xf88>)
 800ae62:	881b      	ldrh	r3, [r3, #0]
 800ae64:	461a      	mov	r2, r3
 800ae66:	4b29      	ldr	r3, [pc, #164]	; (800af0c <tcp_receive+0xf80>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	441a      	add	r2, r3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae70:	6879      	ldr	r1, [r7, #4]
 800ae72:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae74:	440b      	add	r3, r1
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d01f      	beq.n	800aeba <tcp_receive+0xf2e>
 800ae7a:	4b27      	ldr	r3, [pc, #156]	; (800af18 <tcp_receive+0xf8c>)
 800ae7c:	f240 7209 	movw	r2, #1801	; 0x709
 800ae80:	4926      	ldr	r1, [pc, #152]	; (800af1c <tcp_receive+0xf90>)
 800ae82:	4827      	ldr	r0, [pc, #156]	; (800af20 <tcp_receive+0xf94>)
 800ae84:	f008 feb4 	bl	8013bf0 <iprintf>
 800ae88:	2000      	movs	r0, #0
 800ae8a:	f008 ffb3 	bl	8013df4 <fflush>
 800ae8e:	f008 fef8 	bl	8013c82 <abort>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ae92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f47f ae9a 	bne.w	800abd4 <tcp_receive+0xc48>
 800aea0:	e00c      	b.n	800aebc <tcp_receive+0xf30>
                break;
 800aea2:	bf00      	nop
 800aea4:	e00a      	b.n	800aebc <tcp_receive+0xf30>
                  break;
 800aea6:	bf00      	nop
 800aea8:	e008      	b.n	800aebc <tcp_receive+0xf30>
                break;
 800aeaa:	bf00      	nop
 800aeac:	e006      	b.n	800aebc <tcp_receive+0xf30>
                  break;
 800aeae:	bf00      	nop
 800aeb0:	e004      	b.n	800aebc <tcp_receive+0xf30>
                  break;
 800aeb2:	bf00      	nop
 800aeb4:	e002      	b.n	800aebc <tcp_receive+0xf30>
                  break;
 800aeb6:	bf00      	nop
 800aeb8:	e000      	b.n	800aebc <tcp_receive+0xf30>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800aeba:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f002 f8cf 	bl	800d060 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800aec2:	e003      	b.n	800aecc <tcp_receive+0xf40>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f002 f8cb 	bl	800d060 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800aeca:	e01b      	b.n	800af04 <tcp_receive+0xf78>
 800aecc:	e01a      	b.n	800af04 <tcp_receive+0xf78>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800aece:	4b0f      	ldr	r3, [pc, #60]	; (800af0c <tcp_receive+0xf80>)
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	db0b      	blt.n	800aef4 <tcp_receive+0xf68>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800aee4:	441a      	add	r2, r3
 800aee6:	4b09      	ldr	r3, [pc, #36]	; (800af0c <tcp_receive+0xf80>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	425b      	negs	r3, r3
 800aeec:	4413      	add	r3, r2
 800aeee:	3b01      	subs	r3, #1
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	da07      	bge.n	800af04 <tcp_receive+0xf78>
      tcp_ack_now(pcb);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	8b5b      	ldrh	r3, [r3, #26]
 800aef8:	f043 0302 	orr.w	r3, r3, #2
 800aefc:	b29a      	uxth	r2, r3
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800af02:	e7ff      	b.n	800af04 <tcp_receive+0xf78>
 800af04:	bf00      	nop
 800af06:	3750      	adds	r7, #80	; 0x50
 800af08:	46bd      	mov	sp, r7
 800af0a:	bdb0      	pop	{r4, r5, r7, pc}
 800af0c:	20000724 	.word	0x20000724
 800af10:	20000700 	.word	0x20000700
 800af14:	2000072e 	.word	0x2000072e
 800af18:	08016d14 	.word	0x08016d14
 800af1c:	080170ac 	.word	0x080170ac
 800af20:	08016d50 	.word	0x08016d50

0800af24 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800af2a:	4b15      	ldr	r3, [pc, #84]	; (800af80 <tcp_get_next_optbyte+0x5c>)
 800af2c:	881b      	ldrh	r3, [r3, #0]
 800af2e:	1c5a      	adds	r2, r3, #1
 800af30:	b291      	uxth	r1, r2
 800af32:	4a13      	ldr	r2, [pc, #76]	; (800af80 <tcp_get_next_optbyte+0x5c>)
 800af34:	8011      	strh	r1, [r2, #0]
 800af36:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800af38:	4b12      	ldr	r3, [pc, #72]	; (800af84 <tcp_get_next_optbyte+0x60>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d004      	beq.n	800af4a <tcp_get_next_optbyte+0x26>
 800af40:	4b11      	ldr	r3, [pc, #68]	; (800af88 <tcp_get_next_optbyte+0x64>)
 800af42:	881b      	ldrh	r3, [r3, #0]
 800af44:	88fa      	ldrh	r2, [r7, #6]
 800af46:	429a      	cmp	r2, r3
 800af48:	d208      	bcs.n	800af5c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800af4a:	4b10      	ldr	r3, [pc, #64]	; (800af8c <tcp_get_next_optbyte+0x68>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	3314      	adds	r3, #20
 800af50:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800af52:	88fb      	ldrh	r3, [r7, #6]
 800af54:	683a      	ldr	r2, [r7, #0]
 800af56:	4413      	add	r3, r2
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	e00b      	b.n	800af74 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800af5c:	88fb      	ldrh	r3, [r7, #6]
 800af5e:	b2da      	uxtb	r2, r3
 800af60:	4b09      	ldr	r3, [pc, #36]	; (800af88 <tcp_get_next_optbyte+0x64>)
 800af62:	881b      	ldrh	r3, [r3, #0]
 800af64:	b2db      	uxtb	r3, r3
 800af66:	1ad3      	subs	r3, r2, r3
 800af68:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800af6a:	4b06      	ldr	r3, [pc, #24]	; (800af84 <tcp_get_next_optbyte+0x60>)
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	797b      	ldrb	r3, [r7, #5]
 800af70:	4413      	add	r3, r2
 800af72:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af74:	4618      	mov	r0, r3
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	20000720 	.word	0x20000720
 800af84:	2000071c 	.word	0x2000071c
 800af88:	2000071a 	.word	0x2000071a
 800af8c:	20000714 	.word	0x20000714

0800af90 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d10b      	bne.n	800afb6 <tcp_parseopt+0x26>
 800af9e:	4b34      	ldr	r3, [pc, #208]	; (800b070 <tcp_parseopt+0xe0>)
 800afa0:	f240 728d 	movw	r2, #1933	; 0x78d
 800afa4:	4933      	ldr	r1, [pc, #204]	; (800b074 <tcp_parseopt+0xe4>)
 800afa6:	4834      	ldr	r0, [pc, #208]	; (800b078 <tcp_parseopt+0xe8>)
 800afa8:	f008 fe22 	bl	8013bf0 <iprintf>
 800afac:	2000      	movs	r0, #0
 800afae:	f008 ff21 	bl	8013df4 <fflush>
 800afb2:	f008 fe66 	bl	8013c82 <abort>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800afb6:	4b31      	ldr	r3, [pc, #196]	; (800b07c <tcp_parseopt+0xec>)
 800afb8:	881b      	ldrh	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d054      	beq.n	800b068 <tcp_parseopt+0xd8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800afbe:	4b30      	ldr	r3, [pc, #192]	; (800b080 <tcp_parseopt+0xf0>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	801a      	strh	r2, [r3, #0]
 800afc4:	e044      	b.n	800b050 <tcp_parseopt+0xc0>
      u8_t opt = tcp_get_next_optbyte();
 800afc6:	f7ff ffad 	bl	800af24 <tcp_get_next_optbyte>
 800afca:	4603      	mov	r3, r0
 800afcc:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800afce:	7bfb      	ldrb	r3, [r7, #15]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d03d      	beq.n	800b050 <tcp_parseopt+0xc0>
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d002      	beq.n	800afde <tcp_parseopt+0x4e>
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d040      	beq.n	800b05e <tcp_parseopt+0xce>
 800afdc:	e027      	b.n	800b02e <tcp_parseopt+0x9e>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800afde:	f7ff ffa1 	bl	800af24 <tcp_get_next_optbyte>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b04      	cmp	r3, #4
 800afe6:	d13c      	bne.n	800b062 <tcp_parseopt+0xd2>
 800afe8:	4b25      	ldr	r3, [pc, #148]	; (800b080 <tcp_parseopt+0xf0>)
 800afea:	881b      	ldrh	r3, [r3, #0]
 800afec:	3302      	adds	r3, #2
 800afee:	4a23      	ldr	r2, [pc, #140]	; (800b07c <tcp_parseopt+0xec>)
 800aff0:	8812      	ldrh	r2, [r2, #0]
 800aff2:	4293      	cmp	r3, r2
 800aff4:	dc35      	bgt.n	800b062 <tcp_parseopt+0xd2>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800aff6:	f7ff ff95 	bl	800af24 <tcp_get_next_optbyte>
 800affa:	4603      	mov	r3, r0
 800affc:	b29b      	uxth	r3, r3
 800affe:	021b      	lsls	r3, r3, #8
 800b000:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b002:	f7ff ff8f 	bl	800af24 <tcp_get_next_optbyte>
 800b006:	4603      	mov	r3, r0
 800b008:	b29a      	uxth	r2, r3
 800b00a:	89bb      	ldrh	r3, [r7, #12]
 800b00c:	4313      	orrs	r3, r2
 800b00e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b010:	89bb      	ldrh	r3, [r7, #12]
 800b012:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800b016:	4293      	cmp	r3, r2
 800b018:	d804      	bhi.n	800b024 <tcp_parseopt+0x94>
 800b01a:	89bb      	ldrh	r3, [r7, #12]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d001      	beq.n	800b024 <tcp_parseopt+0x94>
 800b020:	89ba      	ldrh	r2, [r7, #12]
 800b022:	e001      	b.n	800b028 <tcp_parseopt+0x98>
 800b024:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b02c:	e010      	b.n	800b050 <tcp_parseopt+0xc0>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b02e:	f7ff ff79 	bl	800af24 <tcp_get_next_optbyte>
 800b032:	4603      	mov	r3, r0
 800b034:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b036:	7afb      	ldrb	r3, [r7, #11]
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d914      	bls.n	800b066 <tcp_parseopt+0xd6>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b03c:	7afb      	ldrb	r3, [r7, #11]
 800b03e:	b29a      	uxth	r2, r3
 800b040:	4b0f      	ldr	r3, [pc, #60]	; (800b080 <tcp_parseopt+0xf0>)
 800b042:	881b      	ldrh	r3, [r3, #0]
 800b044:	4413      	add	r3, r2
 800b046:	b29b      	uxth	r3, r3
 800b048:	3b02      	subs	r3, #2
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	4b0c      	ldr	r3, [pc, #48]	; (800b080 <tcp_parseopt+0xf0>)
 800b04e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b050:	4b0b      	ldr	r3, [pc, #44]	; (800b080 <tcp_parseopt+0xf0>)
 800b052:	881a      	ldrh	r2, [r3, #0]
 800b054:	4b09      	ldr	r3, [pc, #36]	; (800b07c <tcp_parseopt+0xec>)
 800b056:	881b      	ldrh	r3, [r3, #0]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d3b4      	bcc.n	800afc6 <tcp_parseopt+0x36>
 800b05c:	e004      	b.n	800b068 <tcp_parseopt+0xd8>
          return;
 800b05e:	bf00      	nop
 800b060:	e002      	b.n	800b068 <tcp_parseopt+0xd8>
            return;
 800b062:	bf00      	nop
 800b064:	e000      	b.n	800b068 <tcp_parseopt+0xd8>
            return;
 800b066:	bf00      	nop
      }
    }
  }
}
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	08016d14 	.word	0x08016d14
 800b074:	08017164 	.word	0x08017164
 800b078:	08016d50 	.word	0x08016d50
 800b07c:	20000718 	.word	0x20000718
 800b080:	20000720 	.word	0x20000720

0800b084 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b084:	b480      	push	{r7}
 800b086:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b088:	4b05      	ldr	r3, [pc, #20]	; (800b0a0 <tcp_trigger_input_pcb_close+0x1c>)
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	f043 0310 	orr.w	r3, r3, #16
 800b090:	b2da      	uxtb	r2, r3
 800b092:	4b03      	ldr	r3, [pc, #12]	; (800b0a0 <tcp_trigger_input_pcb_close+0x1c>)
 800b094:	701a      	strb	r2, [r3, #0]
}
 800b096:	bf00      	nop
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr
 800b0a0:	20000731 	.word	0x20000731

0800b0a4 <tcp_route>:
                                              struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00a      	beq.n	800b0cc <tcp_route+0x28>
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	7a1b      	ldrb	r3, [r3, #8]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d006      	beq.n	800b0cc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	7a1b      	ldrb	r3, [r3, #8]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7fa fd62 	bl	8005b8c <netif_get_by_index>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	e003      	b.n	800b0d4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f7f9 f8d3 	bl	8004278 <ip4_route>
 800b0d2:	4603      	mov	r3, r0
  }
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b0dc:	b590      	push	{r4, r7, lr}
 800b0de:	b087      	sub	sp, #28
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	603b      	str	r3, [r7, #0]
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d10a      	bne.n	800b108 <tcp_create_segment+0x2c>
 800b0f2:	4b52      	ldr	r3, [pc, #328]	; (800b23c <tcp_create_segment+0x160>)
 800b0f4:	22a6      	movs	r2, #166	; 0xa6
 800b0f6:	4952      	ldr	r1, [pc, #328]	; (800b240 <tcp_create_segment+0x164>)
 800b0f8:	4852      	ldr	r0, [pc, #328]	; (800b244 <tcp_create_segment+0x168>)
 800b0fa:	f008 fd79 	bl	8013bf0 <iprintf>
 800b0fe:	2000      	movs	r0, #0
 800b100:	f008 fe78 	bl	8013df4 <fflush>
 800b104:	f008 fdbd 	bl	8013c82 <abort>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10a      	bne.n	800b124 <tcp_create_segment+0x48>
 800b10e:	4b4b      	ldr	r3, [pc, #300]	; (800b23c <tcp_create_segment+0x160>)
 800b110:	22a7      	movs	r2, #167	; 0xa7
 800b112:	494d      	ldr	r1, [pc, #308]	; (800b248 <tcp_create_segment+0x16c>)
 800b114:	484b      	ldr	r0, [pc, #300]	; (800b244 <tcp_create_segment+0x168>)
 800b116:	f008 fd6b 	bl	8013bf0 <iprintf>
 800b11a:	2000      	movs	r0, #0
 800b11c:	f008 fe6a 	bl	8013df4 <fflush>
 800b120:	f008 fdaf 	bl	8013c82 <abort>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b124:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b128:	f003 0301 	and.w	r3, r3, #1
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <tcp_create_segment+0x58>
 800b130:	2304      	movs	r3, #4
 800b132:	e000      	b.n	800b136 <tcp_create_segment+0x5a>
 800b134:	2300      	movs	r3, #0
 800b136:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b138:	2002      	movs	r0, #2
 800b13a:	f7fa f9f5 	bl	8005528 <memp_malloc>
 800b13e:	6138      	str	r0, [r7, #16]
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d104      	bne.n	800b150 <tcp_create_segment+0x74>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b146:	68b8      	ldr	r0, [r7, #8]
 800b148:	f7fb f834 	bl	80061b4 <pbuf_free>
    return NULL;
 800b14c:	2300      	movs	r3, #0
 800b14e:	e071      	b.n	800b234 <tcp_create_segment+0x158>
  }
  seg->flags = optflags;
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b156:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	2200      	movs	r2, #0
 800b15c:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	68ba      	ldr	r2, [r7, #8]
 800b162:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	891a      	ldrh	r2, [r3, #8]
 800b168:	7dfb      	ldrb	r3, [r7, #23]
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d20a      	bcs.n	800b186 <tcp_create_segment+0xaa>
 800b170:	4b32      	ldr	r3, [pc, #200]	; (800b23c <tcp_create_segment+0x160>)
 800b172:	22b3      	movs	r2, #179	; 0xb3
 800b174:	4935      	ldr	r1, [pc, #212]	; (800b24c <tcp_create_segment+0x170>)
 800b176:	4833      	ldr	r0, [pc, #204]	; (800b244 <tcp_create_segment+0x168>)
 800b178:	f008 fd3a 	bl	8013bf0 <iprintf>
 800b17c:	2000      	movs	r0, #0
 800b17e:	f008 fe39 	bl	8013df4 <fflush>
 800b182:	f008 fd7e 	bl	8013c82 <abort>
  seg->len = p->tot_len - optlen;
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	891a      	ldrh	r2, [r3, #8]
 800b18a:	7dfb      	ldrb	r3, [r7, #23]
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	b29a      	uxth	r2, r3
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	2200      	movs	r2, #0
 800b19a:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b19c:	2114      	movs	r1, #20
 800b19e:	68b8      	ldr	r0, [r7, #8]
 800b1a0:	f7fa ffa2 	bl	80060e8 <pbuf_add_header>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d00c      	beq.n	800b1c4 <tcp_create_segment+0xe8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 800b1aa:	4b29      	ldr	r3, [pc, #164]	; (800b250 <tcp_create_segment+0x174>)
 800b1ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	b29a      	uxth	r2, r3
 800b1b4:	4b26      	ldr	r3, [pc, #152]	; (800b250 <tcp_create_segment+0x174>)
 800b1b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    tcp_seg_free(seg);
 800b1ba:	6938      	ldr	r0, [r7, #16]
 800b1bc:	f7fc fe4a 	bl	8007e54 <tcp_seg_free>
    return NULL;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	e037      	b.n	800b234 <tcp_create_segment+0x158>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	685a      	ldr	r2, [r3, #4]
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	691c      	ldr	r4, [r3, #16]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	8adb      	ldrh	r3, [r3, #22]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7f8 feda 	bl	8003f90 <lwip_htons>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	691c      	ldr	r4, [r3, #16]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	8b1b      	ldrh	r3, [r3, #24]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7f8 fed1 	bl	8003f90 <lwip_htons>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	691c      	ldr	r4, [r3, #16]
 800b1f6:	6838      	ldr	r0, [r7, #0]
 800b1f8:	f7f8 fedf 	bl	8003fba <lwip_htonl>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	691c      	ldr	r4, [r3, #16]
 800b204:	7dfb      	ldrb	r3, [r7, #23]
 800b206:	089b      	lsrs	r3, r3, #2
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	3305      	adds	r3, #5
 800b20e:	b29b      	uxth	r3, r3
 800b210:	031b      	lsls	r3, r3, #12
 800b212:	b29a      	uxth	r2, r3
 800b214:	79fb      	ldrb	r3, [r7, #7]
 800b216:	b29b      	uxth	r3, r3
 800b218:	4313      	orrs	r3, r2
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7f8 feb7 	bl	8003f90 <lwip_htons>
 800b222:	4603      	mov	r3, r0
 800b224:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	691b      	ldr	r3, [r3, #16]
 800b22a:	2200      	movs	r2, #0
 800b22c:	749a      	strb	r2, [r3, #18]
 800b22e:	2200      	movs	r2, #0
 800b230:	74da      	strb	r2, [r3, #19]
  return seg;
 800b232:	693b      	ldr	r3, [r7, #16]
}
 800b234:	4618      	mov	r0, r3
 800b236:	371c      	adds	r7, #28
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd90      	pop	{r4, r7, pc}
 800b23c:	08017180 	.word	0x08017180
 800b240:	080171a4 	.word	0x080171a4
 800b244:	080171c4 	.word	0x080171c4
 800b248:	080171ec 	.word	0x080171ec
 800b24c:	08017210 	.word	0x08017210
 800b250:	2000221c 	.word	0x2000221c

0800b254 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b086      	sub	sp, #24
 800b258:	af00      	add	r7, sp, #0
 800b25a:	607b      	str	r3, [r7, #4]
 800b25c:	4603      	mov	r3, r0
 800b25e:	73fb      	strb	r3, [r7, #15]
 800b260:	460b      	mov	r3, r1
 800b262:	81bb      	strh	r3, [r7, #12]
 800b264:	4613      	mov	r3, r2
 800b266:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b268:	89bb      	ldrh	r3, [r7, #12]
 800b26a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10a      	bne.n	800b288 <tcp_pbuf_prealloc+0x34>
 800b272:	4b36      	ldr	r3, [pc, #216]	; (800b34c <tcp_pbuf_prealloc+0xf8>)
 800b274:	22eb      	movs	r2, #235	; 0xeb
 800b276:	4936      	ldr	r1, [pc, #216]	; (800b350 <tcp_pbuf_prealloc+0xfc>)
 800b278:	4836      	ldr	r0, [pc, #216]	; (800b354 <tcp_pbuf_prealloc+0x100>)
 800b27a:	f008 fcb9 	bl	8013bf0 <iprintf>
 800b27e:	2000      	movs	r0, #0
 800b280:	f008 fdb8 	bl	8013df4 <fflush>
 800b284:	f008 fcfd 	bl	8013c82 <abort>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b288:	6a3b      	ldr	r3, [r7, #32]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d10a      	bne.n	800b2a4 <tcp_pbuf_prealloc+0x50>
 800b28e:	4b2f      	ldr	r3, [pc, #188]	; (800b34c <tcp_pbuf_prealloc+0xf8>)
 800b290:	22ec      	movs	r2, #236	; 0xec
 800b292:	4931      	ldr	r1, [pc, #196]	; (800b358 <tcp_pbuf_prealloc+0x104>)
 800b294:	482f      	ldr	r0, [pc, #188]	; (800b354 <tcp_pbuf_prealloc+0x100>)
 800b296:	f008 fcab 	bl	8013bf0 <iprintf>
 800b29a:	2000      	movs	r0, #0
 800b29c:	f008 fdaa 	bl	8013df4 <fflush>
 800b2a0:	f008 fcef 	bl	8013c82 <abort>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b2a4:	89ba      	ldrh	r2, [r7, #12]
 800b2a6:	897b      	ldrh	r3, [r7, #10]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d21f      	bcs.n	800b2ec <tcp_pbuf_prealloc+0x98>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b2ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b2b0:	f003 0302 	and.w	r3, r3, #2
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d111      	bne.n	800b2dc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b2b8:	6a3b      	ldr	r3, [r7, #32]
 800b2ba:	8b5b      	ldrh	r3, [r3, #26]
 800b2bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d113      	bne.n	800b2ec <tcp_pbuf_prealloc+0x98>
        (!(pcb->flags & TF_NODELAY) &&
 800b2c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d007      	beq.n	800b2dc <tcp_pbuf_prealloc+0x88>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b2cc:	6a3b      	ldr	r3, [r7, #32]
 800b2ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d103      	bne.n	800b2dc <tcp_pbuf_prealloc+0x88>
          pcb->unacked != NULL))) {
 800b2d4:	6a3b      	ldr	r3, [r7, #32]
 800b2d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d007      	beq.n	800b2ec <tcp_pbuf_prealloc+0x98>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b2dc:	89bb      	ldrh	r3, [r7, #12]
 800b2de:	f203 52b4 	addw	r2, r3, #1460	; 0x5b4
 800b2e2:	897b      	ldrh	r3, [r7, #10]
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	bf28      	it	cs
 800b2e8:	4613      	movcs	r3, r2
 800b2ea:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b2ec:	8af9      	ldrh	r1, [r7, #22]
 800b2ee:	7bfb      	ldrb	r3, [r7, #15]
 800b2f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7fa fcf3 	bl	8005ce0 <pbuf_alloc>
 800b2fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d101      	bne.n	800b306 <tcp_pbuf_prealloc+0xb2>
    return NULL;
 800b302:	2300      	movs	r3, #0
 800b304:	e01e      	b.n	800b344 <tcp_pbuf_prealloc+0xf0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00b      	beq.n	800b326 <tcp_pbuf_prealloc+0xd2>
 800b30e:	4b0f      	ldr	r3, [pc, #60]	; (800b34c <tcp_pbuf_prealloc+0xf8>)
 800b310:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800b314:	4911      	ldr	r1, [pc, #68]	; (800b35c <tcp_pbuf_prealloc+0x108>)
 800b316:	480f      	ldr	r0, [pc, #60]	; (800b354 <tcp_pbuf_prealloc+0x100>)
 800b318:	f008 fc6a 	bl	8013bf0 <iprintf>
 800b31c:	2000      	movs	r0, #0
 800b31e:	f008 fd69 	bl	8013df4 <fflush>
 800b322:	f008 fcae 	bl	8013c82 <abort>
  *oversize = p->len - length;
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	895a      	ldrh	r2, [r3, #10]
 800b32a:	89bb      	ldrh	r3, [r7, #12]
 800b32c:	1ad3      	subs	r3, r2, r3
 800b32e:	b29a      	uxth	r2, r3
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	89ba      	ldrh	r2, [r7, #12]
 800b338:	811a      	strh	r2, [r3, #8]
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	891a      	ldrh	r2, [r3, #8]
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	815a      	strh	r2, [r3, #10]
  return p;
 800b342:	693b      	ldr	r3, [r7, #16]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3718      	adds	r7, #24
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	08017180 	.word	0x08017180
 800b350:	08017228 	.word	0x08017228
 800b354:	080171c4 	.word	0x080171c4
 800b358:	0801724c 	.word	0x0801724c
 800b35c:	0801726c 	.word	0x0801726c

0800b360 <tcp_write_checks>:
 * @param len length of data to send (checked against snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	460b      	mov	r3, r1
 800b36a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d10b      	bne.n	800b38a <tcp_write_checks+0x2a>
 800b372:	4b3e      	ldr	r3, [pc, #248]	; (800b46c <tcp_write_checks+0x10c>)
 800b374:	f44f 729b 	mov.w	r2, #310	; 0x136
 800b378:	493d      	ldr	r1, [pc, #244]	; (800b470 <tcp_write_checks+0x110>)
 800b37a:	483e      	ldr	r0, [pc, #248]	; (800b474 <tcp_write_checks+0x114>)
 800b37c:	f008 fc38 	bl	8013bf0 <iprintf>
 800b380:	2000      	movs	r0, #0
 800b382:	f008 fd37 	bl	8013df4 <fflush>
 800b386:	f008 fc7c 	bl	8013c82 <abort>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	7d1b      	ldrb	r3, [r3, #20]
 800b38e:	2b04      	cmp	r3, #4
 800b390:	d00e      	beq.n	800b3b0 <tcp_write_checks+0x50>
      (pcb->state != CLOSE_WAIT) &&
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b396:	2b07      	cmp	r3, #7
 800b398:	d00a      	beq.n	800b3b0 <tcp_write_checks+0x50>
      (pcb->state != SYN_SENT) &&
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b39e:	2b02      	cmp	r3, #2
 800b3a0:	d006      	beq.n	800b3b0 <tcp_write_checks+0x50>
      (pcb->state != SYN_RCVD)) {
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	d002      	beq.n	800b3b0 <tcp_write_checks+0x50>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b3aa:	f06f 030a 	mvn.w	r3, #10
 800b3ae:	e059      	b.n	800b464 <tcp_write_checks+0x104>
  } else if (len == 0) {
 800b3b0:	887b      	ldrh	r3, [r7, #2]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d101      	bne.n	800b3ba <tcp_write_checks+0x5a>
    return ERR_OK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	e054      	b.n	800b464 <tcp_write_checks+0x104>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b3c0:	887a      	ldrh	r2, [r7, #2]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d909      	bls.n	800b3da <tcp_write_checks+0x7a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	8b5b      	ldrh	r3, [r3, #26]
 800b3ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b3d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3d8:	e044      	b.n	800b464 <tcp_write_checks+0x104>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b3e0:	2b07      	cmp	r3, #7
 800b3e2:	d911      	bls.n	800b408 <tcp_write_checks+0xa8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 800b3e4:	4b24      	ldr	r3, [pc, #144]	; (800b478 <tcp_write_checks+0x118>)
 800b3e6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	4b22      	ldr	r3, [pc, #136]	; (800b478 <tcp_write_checks+0x118>)
 800b3f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	8b5b      	ldrh	r3, [r3, #26]
 800b3f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3fc:	b29a      	uxth	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b402:	f04f 33ff 	mov.w	r3, #4294967295
 800b406:	e02d      	b.n	800b464 <tcp_write_checks+0x104>
  }
  if (pcb->snd_queuelen != 0) {
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d013      	beq.n	800b43a <tcp_write_checks+0xda>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b416:	2b00      	cmp	r3, #0
 800b418:	d123      	bne.n	800b462 <tcp_write_checks+0x102>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d11f      	bne.n	800b462 <tcp_write_checks+0x102>
 800b422:	4b12      	ldr	r3, [pc, #72]	; (800b46c <tcp_write_checks+0x10c>)
 800b424:	f240 1259 	movw	r2, #345	; 0x159
 800b428:	4914      	ldr	r1, [pc, #80]	; (800b47c <tcp_write_checks+0x11c>)
 800b42a:	4812      	ldr	r0, [pc, #72]	; (800b474 <tcp_write_checks+0x114>)
 800b42c:	f008 fbe0 	bl	8013bf0 <iprintf>
 800b430:	2000      	movs	r0, #0
 800b432:	f008 fcdf 	bl	8013df4 <fflush>
 800b436:	f008 fc24 	bl	8013c82 <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d103      	bne.n	800b44a <tcp_write_checks+0xea>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00b      	beq.n	800b462 <tcp_write_checks+0x102>
 800b44a:	4b08      	ldr	r3, [pc, #32]	; (800b46c <tcp_write_checks+0x10c>)
 800b44c:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 800b450:	490b      	ldr	r1, [pc, #44]	; (800b480 <tcp_write_checks+0x120>)
 800b452:	4808      	ldr	r0, [pc, #32]	; (800b474 <tcp_write_checks+0x114>)
 800b454:	f008 fbcc 	bl	8013bf0 <iprintf>
 800b458:	2000      	movs	r0, #0
 800b45a:	f008 fccb 	bl	8013df4 <fflush>
 800b45e:	f008 fc10 	bl	8013c82 <abort>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b462:	2300      	movs	r3, #0
}
 800b464:	4618      	mov	r0, r3
 800b466:	3708      	adds	r7, #8
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	08017180 	.word	0x08017180
 800b470:	08017280 	.word	0x08017280
 800b474:	080171c4 	.word	0x080171c4
 800b478:	2000221c 	.word	0x2000221c
 800b47c:	080172a0 	.word	0x080172a0
 800b480:	080172dc 	.word	0x080172dc

0800b484 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b484:	b5b0      	push	{r4, r5, r7, lr}
 800b486:	b09a      	sub	sp, #104	; 0x68
 800b488:	af04      	add	r7, sp, #16
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	4611      	mov	r1, r2
 800b490:	461a      	mov	r2, r3
 800b492:	460b      	mov	r3, r1
 800b494:	80fb      	strh	r3, [r7, #6]
 800b496:	4613      	mov	r3, r2
 800b498:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b49a:	2300      	movs	r3, #0
 800b49c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	653b      	str	r3, [r7, #80]	; 0x50
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d109      	bne.n	800b4e4 <tcp_write+0x60>
 800b4d0:	4ba3      	ldr	r3, [pc, #652]	; (800b760 <tcp_write+0x2dc>)
 800b4d2:	f240 12a1 	movw	r2, #417	; 0x1a1
 800b4d6:	49a3      	ldr	r1, [pc, #652]	; (800b764 <tcp_write+0x2e0>)
 800b4d8:	48a3      	ldr	r0, [pc, #652]	; (800b768 <tcp_write+0x2e4>)
 800b4da:	f7f6 fce6 	bl	8001eaa <lwip_win32_platform_diag>
 800b4de:	f06f 030f 	mvn.w	r3, #15
 800b4e2:	e3b0      	b.n	800bc46 <tcp_write+0x7c2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b4ea:	085b      	lsrs	r3, r3, #1
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	bf28      	it	cs
 800b4f6:	4613      	movcs	r3, r2
 800b4f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b4fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d102      	bne.n	800b506 <tcp_write+0x82>
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b504:	e000      	b.n	800b508 <tcp_write+0x84>
 800b506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b508:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d109      	bne.n	800b524 <tcp_write+0xa0>
 800b510:	4b93      	ldr	r3, [pc, #588]	; (800b760 <tcp_write+0x2dc>)
 800b512:	f240 12b1 	movw	r2, #433	; 0x1b1
 800b516:	4995      	ldr	r1, [pc, #596]	; (800b76c <tcp_write+0x2e8>)
 800b518:	4893      	ldr	r0, [pc, #588]	; (800b768 <tcp_write+0x2e4>)
 800b51a:	f7f6 fcc6 	bl	8001eaa <lwip_win32_platform_diag>
 800b51e:	f06f 030f 	mvn.w	r3, #15
 800b522:	e390      	b.n	800bc46 <tcp_write+0x7c2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b524:	88fb      	ldrh	r3, [r7, #6]
 800b526:	4619      	mov	r1, r3
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f7ff ff19 	bl	800b360 <tcp_write_checks>
 800b52e:	4603      	mov	r3, r0
 800b530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800b534:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d002      	beq.n	800b542 <tcp_write+0xbe>
    return err;
 800b53c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b540:	e381      	b.n	800bc46 <tcp_write+0x7c2>
  }
  queuelen = pcb->snd_queuelen;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b548:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b54c:	2300      	movs	r3, #0
 800b54e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b556:	2b00      	cmp	r3, #0
 800b558:	f000 8136 	beq.w	800b7c8 <tcp_write+0x344>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b560:	653b      	str	r3, [r7, #80]	; 0x50
 800b562:	e002      	b.n	800b56a <tcp_write+0xe6>
         last_unsent = last_unsent->next);
 800b564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b56a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1f8      	bne.n	800b564 <tcp_write+0xe0>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b574:	7b1b      	ldrb	r3, [r3, #12]
 800b576:	f003 0301 	and.w	r3, r3, #1
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d001      	beq.n	800b582 <tcp_write+0xfe>
 800b57e:	2304      	movs	r3, #4
 800b580:	e000      	b.n	800b584 <tcp_write+0x100>
 800b582:	2300      	movs	r3, #0
 800b584:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b586:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b58a:	891b      	ldrh	r3, [r3, #8]
 800b58c:	4619      	mov	r1, r3
 800b58e:	8c3b      	ldrh	r3, [r7, #32]
 800b590:	440b      	add	r3, r1
 800b592:	429a      	cmp	r2, r3
 800b594:	da0b      	bge.n	800b5ae <tcp_write+0x12a>
 800b596:	4b72      	ldr	r3, [pc, #456]	; (800b760 <tcp_write+0x2dc>)
 800b598:	f240 12e9 	movw	r2, #489	; 0x1e9
 800b59c:	4974      	ldr	r1, [pc, #464]	; (800b770 <tcp_write+0x2ec>)
 800b59e:	4872      	ldr	r0, [pc, #456]	; (800b768 <tcp_write+0x2e4>)
 800b5a0:	f008 fb26 	bl	8013bf0 <iprintf>
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	f008 fc25 	bl	8013df4 <fflush>
 800b5aa:	f008 fb6a 	bl	8013c82 <abort>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b5ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5b0:	891a      	ldrh	r2, [r3, #8]
 800b5b2:	8c3b      	ldrh	r3, [r7, #32]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	873b      	strh	r3, [r7, #56]	; 0x38
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800b5c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5c6:	895b      	ldrh	r3, [r3, #10]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d00b      	beq.n	800b5e4 <tcp_write+0x160>
 800b5cc:	4b64      	ldr	r3, [pc, #400]	; (800b760 <tcp_write+0x2dc>)
 800b5ce:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b5d2:	4968      	ldr	r1, [pc, #416]	; (800b774 <tcp_write+0x2f0>)
 800b5d4:	4864      	ldr	r0, [pc, #400]	; (800b768 <tcp_write+0x2e4>)
 800b5d6:	f008 fb0b 	bl	8013bf0 <iprintf>
 800b5da:	2000      	movs	r0, #0
 800b5dc:	f008 fc0a 	bl	8013df4 <fflush>
 800b5e0:	f008 fb4f 	bl	8013c82 <abort>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b5ea:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800b5ec:	8a7b      	ldrh	r3, [r7, #18]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d02c      	beq.n	800b64c <tcp_write+0x1c8>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b5f2:	8a7b      	ldrh	r3, [r7, #18]
 800b5f4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d20b      	bcs.n	800b612 <tcp_write+0x18e>
 800b5fa:	4b59      	ldr	r3, [pc, #356]	; (800b760 <tcp_write+0x2dc>)
 800b5fc:	f240 12fb 	movw	r2, #507	; 0x1fb
 800b600:	495d      	ldr	r1, [pc, #372]	; (800b778 <tcp_write+0x2f4>)
 800b602:	4859      	ldr	r0, [pc, #356]	; (800b768 <tcp_write+0x2e4>)
 800b604:	f008 faf4 	bl	8013bf0 <iprintf>
 800b608:	2000      	movs	r0, #0
 800b60a:	f008 fbf3 	bl	8013df4 <fflush>
 800b60e:	f008 fb38 	bl	8013c82 <abort>
      seg = last_unsent;
 800b612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b614:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b616:	8a7b      	ldrh	r3, [r7, #18]
 800b618:	88fa      	ldrh	r2, [r7, #6]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d901      	bls.n	800b622 <tcp_write+0x19e>
 800b61e:	8a7b      	ldrh	r3, [r7, #18]
 800b620:	e000      	b.n	800b624 <tcp_write+0x1a0>
 800b622:	88fb      	ldrh	r3, [r7, #6]
 800b624:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b626:	4293      	cmp	r3, r2
 800b628:	bfa8      	it	ge
 800b62a:	4613      	movge	r3, r2
 800b62c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800b62e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b632:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b634:	4413      	add	r3, r2
 800b636:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800b63a:	8a7a      	ldrh	r2, [r7, #18]
 800b63c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	b29b      	uxth	r3, r3
 800b642:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800b644:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b646:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b648:	1ad3      	subs	r3, r2, r3
 800b64a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b64c:	8a7b      	ldrh	r3, [r7, #18]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d010      	beq.n	800b674 <tcp_write+0x1f0>
 800b652:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b656:	88fb      	ldrh	r3, [r7, #6]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d00b      	beq.n	800b674 <tcp_write+0x1f0>
 800b65c:	4b40      	ldr	r3, [pc, #256]	; (800b760 <tcp_write+0x2dc>)
 800b65e:	f240 2203 	movw	r2, #515	; 0x203
 800b662:	4946      	ldr	r1, [pc, #280]	; (800b77c <tcp_write+0x2f8>)
 800b664:	4840      	ldr	r0, [pc, #256]	; (800b768 <tcp_write+0x2e4>)
 800b666:	f008 fac3 	bl	8013bf0 <iprintf>
 800b66a:	2000      	movs	r0, #0
 800b66c:	f008 fbc2 	bl	8013df4 <fflush>
 800b670:	f008 fb07 	bl	8013c82 <abort>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b674:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b678:	88fb      	ldrh	r3, [r7, #6]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	f080 8185 	bcs.w	800b98a <tcp_write+0x506>
 800b680:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b682:	2b00      	cmp	r3, #0
 800b684:	f000 8181 	beq.w	800b98a <tcp_write+0x506>
 800b688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b68a:	891b      	ldrh	r3, [r3, #8]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f000 817c 	beq.w	800b98a <tcp_write+0x506>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b692:	88fa      	ldrh	r2, [r7, #6]
 800b694:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b698:	1ad2      	subs	r2, r2, r3
 800b69a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b69c:	4293      	cmp	r3, r2
 800b69e:	bfa8      	it	ge
 800b6a0:	4613      	movge	r3, r2
 800b6a2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b6a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6a6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b6a8:	797b      	ldrb	r3, [r7, #5]
 800b6aa:	f003 0301 	and.w	r3, r3, #1
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d029      	beq.n	800b706 <tcp_write+0x282>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b6b2:	f107 0012 	add.w	r0, r7, #18
 800b6b6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b6b8:	8bf9      	ldrh	r1, [r7, #30]
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	9302      	str	r3, [sp, #8]
 800b6be:	797b      	ldrb	r3, [r7, #5]
 800b6c0:	9301      	str	r3, [sp, #4]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	f7ff fdc3 	bl	800b254 <tcp_pbuf_prealloc>
 800b6ce:	6578      	str	r0, [r7, #84]	; 0x54
 800b6d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f000 8278 	beq.w	800bbc8 <tcp_write+0x744>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 800b6d8:	8a7b      	ldrh	r3, [r7, #18]
 800b6da:	87bb      	strh	r3, [r7, #60]	; 0x3c
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b6dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6de:	6858      	ldr	r0, [r3, #4]
 800b6e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b6e4:	68ba      	ldr	r2, [r7, #8]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	8bfa      	ldrh	r2, [r7, #30]
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	f008 fc82 	bl	8013ff4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b6f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b6f2:	f7fa fde1 	bl	80062b8 <pbuf_clen>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b6fe:	4413      	add	r3, r2
 800b700:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b704:	e059      	b.n	800b7ba <tcp_write+0x336>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	637b      	str	r3, [r7, #52]	; 0x34
 800b70c:	e002      	b.n	800b714 <tcp_write+0x290>
 800b70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	637b      	str	r3, [r7, #52]	; 0x34
 800b714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1f8      	bne.n	800b70e <tcp_write+0x28a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b71e:	7b1b      	ldrb	r3, [r3, #12]
 800b720:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b724:	2b00      	cmp	r3, #0
 800b726:	d12d      	bne.n	800b784 <tcp_write+0x300>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b72e:	8952      	ldrh	r2, [r2, #10]
 800b730:	441a      	add	r2, r3
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	429a      	cmp	r2, r3
 800b736:	d125      	bne.n	800b784 <tcp_write+0x300>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b738:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d00b      	beq.n	800b758 <tcp_write+0x2d4>
 800b740:	4b07      	ldr	r3, [pc, #28]	; (800b760 <tcp_write+0x2dc>)
 800b742:	f44f 720d 	mov.w	r2, #564	; 0x234
 800b746:	490e      	ldr	r1, [pc, #56]	; (800b780 <tcp_write+0x2fc>)
 800b748:	4807      	ldr	r0, [pc, #28]	; (800b768 <tcp_write+0x2e4>)
 800b74a:	f008 fa51 	bl	8013bf0 <iprintf>
 800b74e:	2000      	movs	r0, #0
 800b750:	f008 fb50 	bl	8013df4 <fflush>
 800b754:	f008 fa95 	bl	8013c82 <abort>
          extendlen = seglen;
 800b758:	8bfb      	ldrh	r3, [r7, #30]
 800b75a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800b75c:	e02d      	b.n	800b7ba <tcp_write+0x336>
 800b75e:	bf00      	nop
 800b760:	08017180 	.word	0x08017180
 800b764:	08017310 	.word	0x08017310
 800b768:	080171c4 	.word	0x080171c4
 800b76c:	08017328 	.word	0x08017328
 800b770:	0801735c 	.word	0x0801735c
 800b774:	08017374 	.word	0x08017374
 800b778:	080173a4 	.word	0x080173a4
 800b77c:	080173c4 	.word	0x080173c4
 800b780:	080173e4 	.word	0x080173e4
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b784:	8bfb      	ldrh	r3, [r7, #30]
 800b786:	2201      	movs	r2, #1
 800b788:	4619      	mov	r1, r3
 800b78a:	2000      	movs	r0, #0
 800b78c:	f7fa faa8 	bl	8005ce0 <pbuf_alloc>
 800b790:	6578      	str	r0, [r7, #84]	; 0x54
 800b792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 8219 	beq.w	800bbcc <tcp_write+0x748>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b79a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	441a      	add	r2, r3
 800b7a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7a4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800b7a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b7a8:	f7fa fd86 	bl	80062b8 <pbuf_clen>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b7b4:	4413      	add	r3, r2
 800b7b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800b7ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7be:	8bfb      	ldrh	r3, [r7, #30]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b7c6:	e0e0      	b.n	800b98a <tcp_write+0x506>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f000 80db 	beq.w	800b98a <tcp_write+0x506>
 800b7d4:	4ba5      	ldr	r3, [pc, #660]	; (800ba6c <tcp_write+0x5e8>)
 800b7d6:	f240 224e 	movw	r2, #590	; 0x24e
 800b7da:	49a5      	ldr	r1, [pc, #660]	; (800ba70 <tcp_write+0x5ec>)
 800b7dc:	48a5      	ldr	r0, [pc, #660]	; (800ba74 <tcp_write+0x5f0>)
 800b7de:	f008 fa07 	bl	8013bf0 <iprintf>
 800b7e2:	2000      	movs	r0, #0
 800b7e4:	f008 fb06 	bl	8013df4 <fflush>
 800b7e8:	f008 fa4b 	bl	8013c82 <abort>
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
    struct pbuf *p;
    u16_t left = len - pos;
 800b7ec:	88fa      	ldrh	r2, [r7, #6]
 800b7ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b7f2:	1ad3      	subs	r3, r2, r3
 800b7f4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800b7f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b7fe:	1ad3      	subs	r3, r2, r3
 800b800:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b802:	8b7a      	ldrh	r2, [r7, #26]
 800b804:	8bbb      	ldrh	r3, [r7, #28]
 800b806:	4293      	cmp	r3, r2
 800b808:	bf28      	it	cs
 800b80a:	4613      	movcs	r3, r2
 800b80c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b80e:	797b      	ldrb	r3, [r7, #5]
 800b810:	f003 0301 	and.w	r3, r3, #1
 800b814:	2b00      	cmp	r3, #0
 800b816:	d03b      	beq.n	800b890 <tcp_write+0x40c>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b818:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b81c:	b29a      	uxth	r2, r3
 800b81e:	8b3b      	ldrh	r3, [r7, #24]
 800b820:	4413      	add	r3, r2
 800b822:	b299      	uxth	r1, r3
 800b824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b826:	2b00      	cmp	r3, #0
 800b828:	bf0c      	ite	eq
 800b82a:	2301      	moveq	r3, #1
 800b82c:	2300      	movne	r3, #0
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	f107 0012 	add.w	r0, r7, #18
 800b834:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b836:	9302      	str	r3, [sp, #8]
 800b838:	797b      	ldrb	r3, [r7, #5]
 800b83a:	9301      	str	r3, [sp, #4]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	9300      	str	r3, [sp, #0]
 800b840:	4603      	mov	r3, r0
 800b842:	2036      	movs	r0, #54	; 0x36
 800b844:	f7ff fd06 	bl	800b254 <tcp_pbuf_prealloc>
 800b848:	6338      	str	r0, [r7, #48]	; 0x30
 800b84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f000 81bf 	beq.w	800bbd0 <tcp_write+0x74c>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b854:	895b      	ldrh	r3, [r3, #10]
 800b856:	8b3a      	ldrh	r2, [r7, #24]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d90b      	bls.n	800b874 <tcp_write+0x3f0>
 800b85c:	4b83      	ldr	r3, [pc, #524]	; (800ba6c <tcp_write+0x5e8>)
 800b85e:	f240 226a 	movw	r2, #618	; 0x26a
 800b862:	4985      	ldr	r1, [pc, #532]	; (800ba78 <tcp_write+0x5f4>)
 800b864:	4883      	ldr	r0, [pc, #524]	; (800ba74 <tcp_write+0x5f0>)
 800b866:	f008 f9c3 	bl	8013bf0 <iprintf>
 800b86a:	2000      	movs	r0, #0
 800b86c:	f008 fac2 	bl	8013df4 <fflush>
 800b870:	f008 fa07 	bl	8013c82 <abort>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b876:	685a      	ldr	r2, [r3, #4]
 800b878:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b87c:	18d0      	adds	r0, r2, r3
 800b87e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b882:	68ba      	ldr	r2, [r7, #8]
 800b884:	4413      	add	r3, r2
 800b886:	8b3a      	ldrh	r2, [r7, #24]
 800b888:	4619      	mov	r1, r3
 800b88a:	f008 fbb3 	bl	8013ff4 <memcpy>
 800b88e:	e034      	b.n	800b8fa <tcp_write+0x476>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b890:	8a7b      	ldrh	r3, [r7, #18]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00b      	beq.n	800b8ae <tcp_write+0x42a>
 800b896:	4b75      	ldr	r3, [pc, #468]	; (800ba6c <tcp_write+0x5e8>)
 800b898:	f44f 721d 	mov.w	r2, #628	; 0x274
 800b89c:	4977      	ldr	r1, [pc, #476]	; (800ba7c <tcp_write+0x5f8>)
 800b89e:	4875      	ldr	r0, [pc, #468]	; (800ba74 <tcp_write+0x5f0>)
 800b8a0:	f008 f9a6 	bl	8013bf0 <iprintf>
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	f008 faa5 	bl	8013df4 <fflush>
 800b8aa:	f008 f9ea 	bl	8013c82 <abort>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b8ae:	8b3b      	ldrh	r3, [r7, #24]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	2036      	movs	r0, #54	; 0x36
 800b8b6:	f7fa fa13 	bl	8005ce0 <pbuf_alloc>
 800b8ba:	6178      	str	r0, [r7, #20]
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	f000 8188 	beq.w	800bbd4 <tcp_write+0x750>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b8c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	441a      	add	r2, r3
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b8d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b8da:	4619      	mov	r1, r3
 800b8dc:	2036      	movs	r0, #54	; 0x36
 800b8de:	f7fa f9ff 	bl	8005ce0 <pbuf_alloc>
 800b8e2:	6338      	str	r0, [r7, #48]	; 0x30
 800b8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d103      	bne.n	800b8f2 <tcp_write+0x46e>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b8ea:	6978      	ldr	r0, [r7, #20]
 800b8ec:	f7fa fc62 	bl	80061b4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b8f0:	e173      	b.n	800bbda <tcp_write+0x756>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b8f2:	6979      	ldr	r1, [r7, #20]
 800b8f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8f6:	f7fa fd25 	bl	8006344 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b8fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8fc:	f7fa fcdc 	bl	80062b8 <pbuf_clen>
 800b900:	4603      	mov	r3, r0
 800b902:	461a      	mov	r2, r3
 800b904:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b908:	4413      	add	r3, r2
 800b90a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b90e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b912:	2b08      	cmp	r3, #8
 800b914:	d903      	bls.n	800b91e <tcp_write+0x49a>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b916:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b918:	f7fa fc4c 	bl	80061b4 <pbuf_free>
      goto memerr;
 800b91c:	e15d      	b.n	800bbda <tcp_write+0x756>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b922:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b926:	441a      	add	r2, r3
 800b928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	4613      	mov	r3, r2
 800b930:	2200      	movs	r2, #0
 800b932:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	f7ff fbd1 	bl	800b0dc <tcp_create_segment>
 800b93a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b93c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f000 814a 	beq.w	800bbd8 <tcp_write+0x754>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 800b944:	8a7a      	ldrh	r2, [r7, #18]
 800b946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b948:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b94a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d102      	bne.n	800b956 <tcp_write+0x4d2>
      queue = seg;
 800b950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b952:	647b      	str	r3, [r7, #68]	; 0x44
 800b954:	e011      	b.n	800b97a <tcp_write+0x4f6>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10b      	bne.n	800b974 <tcp_write+0x4f0>
 800b95c:	4b43      	ldr	r3, [pc, #268]	; (800ba6c <tcp_write+0x5e8>)
 800b95e:	f240 22ae 	movw	r2, #686	; 0x2ae
 800b962:	4947      	ldr	r1, [pc, #284]	; (800ba80 <tcp_write+0x5fc>)
 800b964:	4843      	ldr	r0, [pc, #268]	; (800ba74 <tcp_write+0x5f0>)
 800b966:	f008 f943 	bl	8013bf0 <iprintf>
 800b96a:	2000      	movs	r0, #0
 800b96c:	f008 fa42 	bl	8013df4 <fflush>
 800b970:	f008 f987 	bl	8013c82 <abort>
      prev_seg->next = seg;
 800b974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b976:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b978:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b97a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b97c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b97e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b982:	8b3b      	ldrh	r3, [r7, #24]
 800b984:	4413      	add	r3, r2
 800b986:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b98a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b98e:	88fb      	ldrh	r3, [r7, #6]
 800b990:	429a      	cmp	r2, r3
 800b992:	f4ff af2b 	bcc.w	800b7ec <tcp_write+0x368>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 800b996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d009      	beq.n	800b9b0 <tcp_write+0x52c>
 800b99c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d006      	beq.n	800b9b0 <tcp_write+0x52c>
    last_unsent->oversize_left += oversize_add;
 800b9a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9a4:	895a      	ldrh	r2, [r3, #10]
 800b9a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b9a8:	4413      	add	r3, r2
 800b9aa:	b29a      	uxth	r2, r3
 800b9ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ae:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b9b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d044      	beq.n	800ba40 <tcp_write+0x5bc>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b9b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9bc:	e01e      	b.n	800b9fc <tcp_write+0x578>
      p->tot_len += oversize_used;
 800b9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c0:	891a      	ldrh	r2, [r3, #8]
 800b9c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b9c4:	4413      	add	r3, r2
 800b9c6:	b29a      	uxth	r2, r3
 800b9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ca:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d110      	bne.n	800b9f6 <tcp_write+0x572>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9da:	8952      	ldrh	r2, [r2, #10]
 800b9dc:	4413      	add	r3, r2
 800b9de:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b9e0:	68b9      	ldr	r1, [r7, #8]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f008 fb06 	bl	8013ff4 <memcpy>
        p->len += oversize_used;
 800b9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ea:	895a      	ldrh	r2, [r3, #10]
 800b9ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b9ee:	4413      	add	r3, r2
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f4:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d1dd      	bne.n	800b9be <tcp_write+0x53a>
      }
    }
    last_unsent->len += oversize_used;
 800ba02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba04:	891a      	ldrh	r2, [r3, #8]
 800ba06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ba08:	4413      	add	r3, r2
 800ba0a:	b29a      	uxth	r2, r3
 800ba0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba0e:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 800ba10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba12:	895b      	ldrh	r3, [r3, #10]
 800ba14:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d90b      	bls.n	800ba32 <tcp_write+0x5ae>
 800ba1a:	4b14      	ldr	r3, [pc, #80]	; (800ba6c <tcp_write+0x5e8>)
 800ba1c:	f240 22d7 	movw	r2, #727	; 0x2d7
 800ba20:	4918      	ldr	r1, [pc, #96]	; (800ba84 <tcp_write+0x600>)
 800ba22:	4814      	ldr	r0, [pc, #80]	; (800ba74 <tcp_write+0x5f0>)
 800ba24:	f008 f8e4 	bl	8013bf0 <iprintf>
 800ba28:	2000      	movs	r0, #0
 800ba2a:	f008 f9e3 	bl	8013df4 <fflush>
 800ba2e:	f008 f928 	bl	8013c82 <abort>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 800ba32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba34:	895a      	ldrh	r2, [r3, #10]
 800ba36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ba38:	1ad3      	subs	r3, r2, r3
 800ba3a:	b29a      	uxth	r2, r3
 800ba3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba3e:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800ba40:	8a7a      	ldrh	r2, [r7, #18]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800ba48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d02d      	beq.n	800baaa <tcp_write+0x626>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ba4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d11b      	bne.n	800ba8c <tcp_write+0x608>
 800ba54:	4b05      	ldr	r3, [pc, #20]	; (800ba6c <tcp_write+0x5e8>)
 800ba56:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ba5a:	490b      	ldr	r1, [pc, #44]	; (800ba88 <tcp_write+0x604>)
 800ba5c:	4805      	ldr	r0, [pc, #20]	; (800ba74 <tcp_write+0x5f0>)
 800ba5e:	f008 f8c7 	bl	8013bf0 <iprintf>
 800ba62:	2000      	movs	r0, #0
 800ba64:	f008 f9c6 	bl	8013df4 <fflush>
 800ba68:	f008 f90b 	bl	8013c82 <abort>
 800ba6c:	08017180 	.word	0x08017180
 800ba70:	08017410 	.word	0x08017410
 800ba74:	080171c4 	.word	0x080171c4
 800ba78:	08017440 	.word	0x08017440
 800ba7c:	08017480 	.word	0x08017480
 800ba80:	08017490 	.word	0x08017490
 800ba84:	080174a4 	.word	0x080174a4
 800ba88:	080174d0 	.word	0x080174d0
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800ba8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fa fc56 	bl	8006344 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ba98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba9a:	891a      	ldrh	r2, [r3, #8]
 800ba9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba9e:	891b      	ldrh	r3, [r3, #8]
 800baa0:	4413      	add	r3, r2
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baa6:	811a      	strh	r2, [r3, #8]
 800baa8:	e03c      	b.n	800bb24 <tcp_write+0x6a0>
  } else if (extendlen > 0) {
 800baaa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800baac:	2b00      	cmp	r3, #0
 800baae:	d039      	beq.n	800bb24 <tcp_write+0x6a0>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800bab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d003      	beq.n	800babe <tcp_write+0x63a>
 800bab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10b      	bne.n	800bad6 <tcp_write+0x652>
 800babe:	4b64      	ldr	r3, [pc, #400]	; (800bc50 <tcp_write+0x7cc>)
 800bac0:	f240 22ea 	movw	r2, #746	; 0x2ea
 800bac4:	4963      	ldr	r1, [pc, #396]	; (800bc54 <tcp_write+0x7d0>)
 800bac6:	4864      	ldr	r0, [pc, #400]	; (800bc58 <tcp_write+0x7d4>)
 800bac8:	f008 f892 	bl	8013bf0 <iprintf>
 800bacc:	2000      	movs	r0, #0
 800bace:	f008 f991 	bl	8013df4 <fflush>
 800bad2:	f008 f8d6 	bl	8013c82 <abort>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	62bb      	str	r3, [r7, #40]	; 0x28
 800badc:	e009      	b.n	800baf2 <tcp_write+0x66e>
      p->tot_len += extendlen;
 800bade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae0:	891a      	ldrh	r2, [r3, #8]
 800bae2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bae4:	4413      	add	r3, r2
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baea:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800baec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	62bb      	str	r3, [r7, #40]	; 0x28
 800baf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1f1      	bne.n	800bade <tcp_write+0x65a>
    }
    p->tot_len += extendlen;
 800bafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafc:	891a      	ldrh	r2, [r3, #8]
 800bafe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bb00:	4413      	add	r3, r2
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb06:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800bb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0a:	895a      	ldrh	r2, [r3, #10]
 800bb0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bb0e:	4413      	add	r3, r2
 800bb10:	b29a      	uxth	r2, r3
 800bb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb14:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800bb16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb18:	891a      	ldrh	r2, [r3, #8]
 800bb1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bb1c:	4413      	add	r3, r2
 800bb1e:	b29a      	uxth	r2, r3
 800bb20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb22:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800bb24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d103      	bne.n	800bb32 <tcp_write+0x6ae>
    pcb->unsent = queue;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb2e:	66da      	str	r2, [r3, #108]	; 0x6c
 800bb30:	e002      	b.n	800bb38 <tcp_write+0x6b4>
  } else {
    last_unsent->next = queue;
 800bb32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb36:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bb3c:	88fb      	ldrh	r3, [r7, #6]
 800bb3e:	441a      	add	r2, r3
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800bb4a:	88fb      	ldrh	r3, [r7, #6]
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800bb5c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d013      	beq.n	800bb92 <tcp_write+0x70e>
    LWIP_ASSERT("tcp_write: valid queue length",
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d10f      	bne.n	800bb92 <tcp_write+0x70e>
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d10b      	bne.n	800bb92 <tcp_write+0x70e>
 800bb7a:	4b35      	ldr	r3, [pc, #212]	; (800bc50 <tcp_write+0x7cc>)
 800bb7c:	f240 3216 	movw	r2, #790	; 0x316
 800bb80:	4936      	ldr	r1, [pc, #216]	; (800bc5c <tcp_write+0x7d8>)
 800bb82:	4835      	ldr	r0, [pc, #212]	; (800bc58 <tcp_write+0x7d4>)
 800bb84:	f008 f834 	bl	8013bf0 <iprintf>
 800bb88:	2000      	movs	r0, #0
 800bb8a:	f008 f933 	bl	8013df4 <fflush>
 800bb8e:	f008 f878 	bl	8013c82 <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800bb92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d015      	beq.n	800bbc4 <tcp_write+0x740>
 800bb98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb9a:	691b      	ldr	r3, [r3, #16]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d011      	beq.n	800bbc4 <tcp_write+0x740>
 800bba0:	797b      	ldrb	r3, [r7, #5]
 800bba2:	f003 0302 	and.w	r3, r3, #2
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d10c      	bne.n	800bbc4 <tcp_write+0x740>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800bbaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbac:	691c      	ldr	r4, [r3, #16]
 800bbae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbb0:	691b      	ldr	r3, [r3, #16]
 800bbb2:	899b      	ldrh	r3, [r3, #12]
 800bbb4:	b29d      	uxth	r5, r3
 800bbb6:	2008      	movs	r0, #8
 800bbb8:	f7f8 f9ea 	bl	8003f90 <lwip_htons>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	432b      	orrs	r3, r5
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	e03e      	b.n	800bc46 <tcp_write+0x7c2>
          goto memerr;
 800bbc8:	bf00      	nop
 800bbca:	e006      	b.n	800bbda <tcp_write+0x756>
            goto memerr;
 800bbcc:	bf00      	nop
 800bbce:	e004      	b.n	800bbda <tcp_write+0x756>
        goto memerr;
 800bbd0:	bf00      	nop
 800bbd2:	e002      	b.n	800bbda <tcp_write+0x756>
        goto memerr;
 800bbd4:	bf00      	nop
 800bbd6:	e000      	b.n	800bbda <tcp_write+0x756>
      goto memerr;
 800bbd8:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	8b5b      	ldrh	r3, [r3, #26]
 800bbde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbe2:	b29a      	uxth	r2, r3
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 800bbe8:	4b1d      	ldr	r3, [pc, #116]	; (800bc60 <tcp_write+0x7dc>)
 800bbea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bbee:	3301      	adds	r3, #1
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	4b1b      	ldr	r3, [pc, #108]	; (800bc60 <tcp_write+0x7dc>)
 800bbf4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  if (concat_p != NULL) {
 800bbf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d002      	beq.n	800bc04 <tcp_write+0x780>
    pbuf_free(concat_p);
 800bbfe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bc00:	f7fa fad8 	bl	80061b4 <pbuf_free>
  }
  if (queue != NULL) {
 800bc04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d002      	beq.n	800bc10 <tcp_write+0x78c>
    tcp_segs_free(queue);
 800bc0a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bc0c:	f7fc f90e 	bl	8007e2c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d013      	beq.n	800bc42 <tcp_write+0x7be>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10f      	bne.n	800bc42 <tcp_write+0x7be>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10b      	bne.n	800bc42 <tcp_write+0x7be>
 800bc2a:	4b09      	ldr	r3, [pc, #36]	; (800bc50 <tcp_write+0x7cc>)
 800bc2c:	f240 322b 	movw	r2, #811	; 0x32b
 800bc30:	490a      	ldr	r1, [pc, #40]	; (800bc5c <tcp_write+0x7d8>)
 800bc32:	4809      	ldr	r0, [pc, #36]	; (800bc58 <tcp_write+0x7d4>)
 800bc34:	f007 ffdc 	bl	8013bf0 <iprintf>
 800bc38:	2000      	movs	r0, #0
 800bc3a:	f008 f8db 	bl	8013df4 <fflush>
 800bc3e:	f008 f820 	bl	8013c82 <abort>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800bc42:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3758      	adds	r7, #88	; 0x58
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bdb0      	pop	{r4, r5, r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	08017180 	.word	0x08017180
 800bc54:	08017508 	.word	0x08017508
 800bc58:	080171c4 	.word	0x080171c4
 800bc5c:	08017540 	.word	0x08017540
 800bc60:	2000221c 	.word	0x2000221c

0800bc64 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800bc64:	b5b0      	push	{r4, r5, r7, lr}
 800bc66:	b08a      	sub	sp, #40	; 0x28
 800bc68:	af02      	add	r7, sp, #8
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800bc70:	2300      	movs	r3, #0
 800bc72:	61fb      	str	r3, [r7, #28]
 800bc74:	2300      	movs	r3, #0
 800bc76:	613b      	str	r3, [r7, #16]
  struct pbuf *p = NULL;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	61bb      	str	r3, [r7, #24]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10b      	bne.n	800bc9a <tcp_split_unsent_seg+0x36>
 800bc82:	4ba7      	ldr	r3, [pc, #668]	; (800bf20 <tcp_split_unsent_seg+0x2bc>)
 800bc84:	f240 324e 	movw	r2, #846	; 0x34e
 800bc88:	49a6      	ldr	r1, [pc, #664]	; (800bf24 <tcp_split_unsent_seg+0x2c0>)
 800bc8a:	48a7      	ldr	r0, [pc, #668]	; (800bf28 <tcp_split_unsent_seg+0x2c4>)
 800bc8c:	f007 ffb0 	bl	8013bf0 <iprintf>
 800bc90:	2000      	movs	r0, #0
 800bc92:	f008 f8af 	bl	8013df4 <fflush>
 800bc96:	f007 fff4 	bl	8013c82 <abort>

  useg = pcb->unsent;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc9e:	613b      	str	r3, [r7, #16]
  if (useg == NULL) {
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d102      	bne.n	800bcac <tcp_split_unsent_seg+0x48>
    return ERR_MEM;
 800bca6:	f04f 33ff 	mov.w	r3, #4294967295
 800bcaa:	e135      	b.n	800bf18 <tcp_split_unsent_seg+0x2b4>
  }

  if (split == 0) {
 800bcac:	887b      	ldrh	r3, [r7, #2]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d10b      	bne.n	800bcca <tcp_split_unsent_seg+0x66>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800bcb2:	4b9b      	ldr	r3, [pc, #620]	; (800bf20 <tcp_split_unsent_seg+0x2bc>)
 800bcb4:	f240 3256 	movw	r2, #854	; 0x356
 800bcb8:	499c      	ldr	r1, [pc, #624]	; (800bf2c <tcp_split_unsent_seg+0x2c8>)
 800bcba:	489b      	ldr	r0, [pc, #620]	; (800bf28 <tcp_split_unsent_seg+0x2c4>)
 800bcbc:	f007 ff98 	bl	8013bf0 <iprintf>
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	f008 f897 	bl	8013df4 <fflush>
 800bcc6:	f007 ffdc 	bl	8013c82 <abort>
    return ERR_VAL;
  }

  if (useg->len <= split) {
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	891b      	ldrh	r3, [r3, #8]
 800bcce:	887a      	ldrh	r2, [r7, #2]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d301      	bcc.n	800bcd8 <tcp_split_unsent_seg+0x74>
    return ERR_OK;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	e11f      	b.n	800bf18 <tcp_split_unsent_seg+0x2b4>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bcdc:	887a      	ldrh	r2, [r7, #2]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d90b      	bls.n	800bcfa <tcp_split_unsent_seg+0x96>
 800bce2:	4b8f      	ldr	r3, [pc, #572]	; (800bf20 <tcp_split_unsent_seg+0x2bc>)
 800bce4:	f240 325e 	movw	r2, #862	; 0x35e
 800bce8:	4991      	ldr	r1, [pc, #580]	; (800bf30 <tcp_split_unsent_seg+0x2cc>)
 800bcea:	488f      	ldr	r0, [pc, #572]	; (800bf28 <tcp_split_unsent_seg+0x2c4>)
 800bcec:	f007 ff80 	bl	8013bf0 <iprintf>
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	f008 f87f 	bl	8013df4 <fflush>
 800bcf6:	f007 ffc4 	bl	8013c82 <abort>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	891b      	ldrh	r3, [r3, #8]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10b      	bne.n	800bd1a <tcp_split_unsent_seg+0xb6>
 800bd02:	4b87      	ldr	r3, [pc, #540]	; (800bf20 <tcp_split_unsent_seg+0x2bc>)
 800bd04:	f240 325f 	movw	r2, #863	; 0x35f
 800bd08:	498a      	ldr	r1, [pc, #552]	; (800bf34 <tcp_split_unsent_seg+0x2d0>)
 800bd0a:	4887      	ldr	r0, [pc, #540]	; (800bf28 <tcp_split_unsent_seg+0x2c4>)
 800bd0c:	f007 ff70 	bl	8013bf0 <iprintf>
 800bd10:	2000      	movs	r0, #0
 800bd12:	f008 f86f 	bl	8013df4 <fflush>
 800bd16:	f007 ffb4 	bl	8013c82 <abort>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	7b1b      	ldrb	r3, [r3, #12]
 800bd1e:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bd20:	7bfb      	ldrb	r3, [r7, #15]
 800bd22:	f003 0301 	and.w	r3, r3, #1
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d001      	beq.n	800bd2e <tcp_split_unsent_seg+0xca>
 800bd2a:	2304      	movs	r3, #4
 800bd2c:	e000      	b.n	800bd30 <tcp_split_unsent_seg+0xcc>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	891a      	ldrh	r2, [r3, #8]
 800bd36:	887b      	ldrh	r3, [r7, #2]
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800bd3c:	7bbb      	ldrb	r3, [r7, #14]
 800bd3e:	b29a      	uxth	r2, r3
 800bd40:	89bb      	ldrh	r3, [r7, #12]
 800bd42:	4413      	add	r3, r2
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	2036      	movs	r0, #54	; 0x36
 800bd4e:	f7f9 ffc7 	bl	8005ce0 <pbuf_alloc>
 800bd52:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	f000 80bc 	beq.w	800bed4 <tcp_split_unsent_seg+0x270>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	891a      	ldrh	r2, [r3, #8]
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	891b      	ldrh	r3, [r3, #8]
 800bd66:	1ad3      	subs	r3, r2, r3
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	887b      	ldrh	r3, [r7, #2]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	6858      	ldr	r0, [r3, #4]
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	685a      	ldr	r2, [r3, #4]
 800bd78:	7bbb      	ldrb	r3, [r7, #14]
 800bd7a:	18d1      	adds	r1, r2, r3
 800bd7c:	897b      	ldrh	r3, [r7, #10]
 800bd7e:	89ba      	ldrh	r2, [r7, #12]
 800bd80:	f7fa fc88 	bl	8006694 <pbuf_copy_partial>
 800bd84:	4603      	mov	r3, r0
 800bd86:	461a      	mov	r2, r3
 800bd88:	89bb      	ldrh	r3, [r7, #12]
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	f040 80a4 	bne.w	800bed8 <tcp_split_unsent_seg+0x274>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	691b      	ldr	r3, [r3, #16]
 800bd94:	899b      	ldrh	r3, [r3, #12]
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7f8 f8f9 	bl	8003f90 <lwip_htons>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bda6:	75fb      	strb	r3, [r7, #23]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800bda8:	2300      	movs	r3, #0
 800bdaa:	75bb      	strb	r3, [r7, #22]

  if (split_flags & TCP_PSH) {
 800bdac:	7dfb      	ldrb	r3, [r7, #23]
 800bdae:	f003 0308 	and.w	r3, r3, #8
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d007      	beq.n	800bdc6 <tcp_split_unsent_seg+0x162>
    split_flags &= ~TCP_PSH;
 800bdb6:	7dfb      	ldrb	r3, [r7, #23]
 800bdb8:	f023 0308 	bic.w	r3, r3, #8
 800bdbc:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_PSH;
 800bdbe:	7dbb      	ldrb	r3, [r7, #22]
 800bdc0:	f043 0308 	orr.w	r3, r3, #8
 800bdc4:	75bb      	strb	r3, [r7, #22]
  }
  if (split_flags & TCP_FIN) {
 800bdc6:	7dfb      	ldrb	r3, [r7, #23]
 800bdc8:	f003 0301 	and.w	r3, r3, #1
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d007      	beq.n	800bde0 <tcp_split_unsent_seg+0x17c>
    split_flags &= ~TCP_FIN;
 800bdd0:	7dfb      	ldrb	r3, [r7, #23]
 800bdd2:	f023 0301 	bic.w	r3, r3, #1
 800bdd6:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_FIN;
 800bdd8:	7dbb      	ldrb	r3, [r7, #22]
 800bdda:	f043 0301 	orr.w	r3, r3, #1
 800bdde:	75bb      	strb	r3, [r7, #22]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	691b      	ldr	r3, [r3, #16]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7f8 f8e7 	bl	8003fba <lwip_htonl>
 800bdec:	4602      	mov	r2, r0
 800bdee:	887b      	ldrh	r3, [r7, #2]
 800bdf0:	18d1      	adds	r1, r2, r3
 800bdf2:	7dba      	ldrb	r2, [r7, #22]
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
 800bdf6:	9300      	str	r3, [sp, #0]
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	69b9      	ldr	r1, [r7, #24]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f7ff f96d 	bl	800b0dc <tcp_create_segment>
 800be02:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d102      	bne.n	800be10 <tcp_split_unsent_seg+0x1ac>
    p = NULL; /* Freed by tcp_create_segment */
 800be0a:	2300      	movs	r3, #0
 800be0c:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
 800be0e:	e064      	b.n	800beda <tcp_split_unsent_seg+0x276>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	4618      	mov	r0, r3
 800be16:	f7fa fa4f 	bl	80062b8 <pbuf_clen>
 800be1a:	4603      	mov	r3, r0
 800be1c:	461a      	mov	r2, r3
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800be24:	1a9b      	subs	r3, r3, r2
 800be26:	b29a      	uxth	r2, r3
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	6858      	ldr	r0, [r3, #4]
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	891a      	ldrh	r2, [r3, #8]
 800be38:	89bb      	ldrh	r3, [r7, #12]
 800be3a:	1ad3      	subs	r3, r2, r3
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	4619      	mov	r1, r3
 800be40:	f7fa f840 	bl	8005ec4 <pbuf_realloc>
  useg->len -= remainder;
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	891a      	ldrh	r2, [r3, #8]
 800be48:	89bb      	ldrh	r3, [r7, #12]
 800be4a:	1ad3      	subs	r3, r2, r3
 800be4c:	b29a      	uxth	r2, r3
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	691c      	ldr	r4, [r3, #16]
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	899b      	ldrh	r3, [r3, #12]
 800be5c:	b29d      	uxth	r5, r3
 800be5e:	7dfb      	ldrb	r3, [r7, #23]
 800be60:	b29b      	uxth	r3, r3
 800be62:	4618      	mov	r0, r3
 800be64:	f7f8 f894 	bl	8003f90 <lwip_htons>
 800be68:	4603      	mov	r3, r0
 800be6a:	432b      	orrs	r3, r5
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	81a3      	strh	r3, [r4, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	2200      	movs	r2, #0
 800be74:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7fa fa1c 	bl	80062b8 <pbuf_clen>
 800be80:	4603      	mov	r3, r0
 800be82:	461a      	mov	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800be8a:	4413      	add	r3, r2
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800be94:	69fb      	ldr	r3, [r7, #28]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	4618      	mov	r0, r3
 800be9a:	f7fa fa0d 	bl	80062b8 <pbuf_clen>
 800be9e:	4603      	mov	r3, r0
 800bea0:	461a      	mov	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bea8:	4413      	add	r3, r2
 800beaa:	b29a      	uxth	r2, r3
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	69fa      	ldr	r2, [r7, #28]
 800bebe:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d103      	bne.n	800bed0 <tcp_split_unsent_seg+0x26c>
    pcb->unsent_oversize = 0;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800bed0:	2300      	movs	r3, #0
 800bed2:	e021      	b.n	800bf18 <tcp_split_unsent_seg+0x2b4>
    goto memerr;
 800bed4:	bf00      	nop
 800bed6:	e000      	b.n	800beda <tcp_split_unsent_seg+0x276>
    goto memerr;
 800bed8:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 800beda:	4b17      	ldr	r3, [pc, #92]	; (800bf38 <tcp_split_unsent_seg+0x2d4>)
 800bedc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bee0:	3301      	adds	r3, #1
 800bee2:	b29a      	uxth	r2, r3
 800bee4:	4b14      	ldr	r3, [pc, #80]	; (800bf38 <tcp_split_unsent_seg+0x2d4>)
 800bee6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d00b      	beq.n	800bf08 <tcp_split_unsent_seg+0x2a4>
 800bef0:	4b0b      	ldr	r3, [pc, #44]	; (800bf20 <tcp_split_unsent_seg+0x2bc>)
 800bef2:	f44f 7277 	mov.w	r2, #988	; 0x3dc
 800bef6:	4911      	ldr	r1, [pc, #68]	; (800bf3c <tcp_split_unsent_seg+0x2d8>)
 800bef8:	480b      	ldr	r0, [pc, #44]	; (800bf28 <tcp_split_unsent_seg+0x2c4>)
 800befa:	f007 fe79 	bl	8013bf0 <iprintf>
 800befe:	2000      	movs	r0, #0
 800bf00:	f007 ff78 	bl	8013df4 <fflush>
 800bf04:	f007 febd 	bl	8013c82 <abort>
  if (p != NULL) {
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d002      	beq.n	800bf14 <tcp_split_unsent_seg+0x2b0>
    pbuf_free(p);
 800bf0e:	69b8      	ldr	r0, [r7, #24]
 800bf10:	f7fa f950 	bl	80061b4 <pbuf_free>
  }

  return ERR_MEM;
 800bf14:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3720      	adds	r7, #32
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bdb0      	pop	{r4, r5, r7, pc}
 800bf20:	08017180 	.word	0x08017180
 800bf24:	08017560 	.word	0x08017560
 800bf28:	080171c4 	.word	0x080171c4
 800bf2c:	08017584 	.word	0x08017584
 800bf30:	080175a8 	.word	0x080175a8
 800bf34:	080175b8 	.word	0x080175b8
 800bf38:	2000221c 	.word	0x2000221c
 800bf3c:	080175c8 	.word	0x080175c8

0800bf40 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800bf40:	b5b0      	push	{r4, r5, r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d10b      	bne.n	800bf66 <tcp_send_fin+0x26>
 800bf4e:	4b23      	ldr	r3, [pc, #140]	; (800bfdc <tcp_send_fin+0x9c>)
 800bf50:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800bf54:	4922      	ldr	r1, [pc, #136]	; (800bfe0 <tcp_send_fin+0xa0>)
 800bf56:	4823      	ldr	r0, [pc, #140]	; (800bfe4 <tcp_send_fin+0xa4>)
 800bf58:	f007 fe4a 	bl	8013bf0 <iprintf>
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	f007 ff49 	bl	8013df4 <fflush>
 800bf62:	f007 fe8e 	bl	8013c82 <abort>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d02d      	beq.n	800bfca <tcp_send_fin+0x8a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf72:	60fb      	str	r3, [r7, #12]
 800bf74:	e002      	b.n	800bf7c <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1f8      	bne.n	800bf76 <tcp_send_fin+0x36>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	691b      	ldr	r3, [r3, #16]
 800bf88:	899b      	ldrh	r3, [r3, #12]
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7f7 ffff 	bl	8003f90 <lwip_htons>
 800bf92:	4603      	mov	r3, r0
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	f003 0307 	and.w	r3, r3, #7
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d115      	bne.n	800bfca <tcp_send_fin+0x8a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	691c      	ldr	r4, [r3, #16]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	691b      	ldr	r3, [r3, #16]
 800bfa6:	899b      	ldrh	r3, [r3, #12]
 800bfa8:	b29d      	uxth	r5, r3
 800bfaa:	2001      	movs	r0, #1
 800bfac:	f7f7 fff0 	bl	8003f90 <lwip_htons>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	432b      	orrs	r3, r5
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	81a3      	strh	r3, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	8b5b      	ldrh	r3, [r3, #26]
 800bfbc:	f043 0320 	orr.w	r3, r3, #32
 800bfc0:	b29a      	uxth	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	e004      	b.n	800bfd4 <tcp_send_fin+0x94>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bfca:	2101      	movs	r1, #1
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 f80b 	bl	800bfe8 <tcp_enqueue_flags>
 800bfd2:	4603      	mov	r3, r0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3710      	adds	r7, #16
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bdb0      	pop	{r4, r5, r7, pc}
 800bfdc:	08017180 	.word	0x08017180
 800bfe0:	080175d4 	.word	0x080175d4
 800bfe4:	080171c4 	.word	0x080171c4

0800bfe8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b08a      	sub	sp, #40	; 0x28
 800bfec:	af02      	add	r7, sp, #8
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	460b      	mov	r3, r1
 800bff2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800bff8:	2300      	movs	r3, #0
 800bffa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bffc:	78fb      	ldrb	r3, [r7, #3]
 800bffe:	f003 0303 	and.w	r3, r3, #3
 800c002:	2b00      	cmp	r3, #0
 800c004:	d10b      	bne.n	800c01e <tcp_enqueue_flags+0x36>
 800c006:	4b76      	ldr	r3, [pc, #472]	; (800c1e0 <tcp_enqueue_flags+0x1f8>)
 800c008:	f240 4214 	movw	r2, #1044	; 0x414
 800c00c:	4975      	ldr	r1, [pc, #468]	; (800c1e4 <tcp_enqueue_flags+0x1fc>)
 800c00e:	4876      	ldr	r0, [pc, #472]	; (800c1e8 <tcp_enqueue_flags+0x200>)
 800c010:	f007 fdee 	bl	8013bf0 <iprintf>
 800c014:	2000      	movs	r0, #0
 800c016:	f007 feed 	bl	8013df4 <fflush>
 800c01a:	f007 fe32 	bl	8013c82 <abort>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d10b      	bne.n	800c03c <tcp_enqueue_flags+0x54>
 800c024:	4b6e      	ldr	r3, [pc, #440]	; (800c1e0 <tcp_enqueue_flags+0x1f8>)
 800c026:	f240 4215 	movw	r2, #1045	; 0x415
 800c02a:	4970      	ldr	r1, [pc, #448]	; (800c1ec <tcp_enqueue_flags+0x204>)
 800c02c:	486e      	ldr	r0, [pc, #440]	; (800c1e8 <tcp_enqueue_flags+0x200>)
 800c02e:	f007 fddf 	bl	8013bf0 <iprintf>
 800c032:	2000      	movs	r0, #0
 800c034:	f007 fede 	bl	8013df4 <fflush>
 800c038:	f007 fe23 	bl	8013c82 <abort>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c03c:	78fb      	ldrb	r3, [r7, #3]
 800c03e:	f003 0302 	and.w	r3, r3, #2
 800c042:	2b00      	cmp	r3, #0
 800c044:	d001      	beq.n	800c04a <tcp_enqueue_flags+0x62>
    optflags = TF_SEG_OPTS_MSS;
 800c046:	2301      	movs	r3, #1
 800c048:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c04a:	7ffb      	ldrb	r3, [r7, #31]
 800c04c:	f003 0301 	and.w	r3, r3, #1
 800c050:	2b00      	cmp	r3, #0
 800c052:	d001      	beq.n	800c058 <tcp_enqueue_flags+0x70>
 800c054:	2304      	movs	r3, #4
 800c056:	e000      	b.n	800c05a <tcp_enqueue_flags+0x72>
 800c058:	2300      	movs	r3, #0
 800c05a:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c05c:	7dfb      	ldrb	r3, [r7, #23]
 800c05e:	b29b      	uxth	r3, r3
 800c060:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c064:	4619      	mov	r1, r3
 800c066:	2036      	movs	r0, #54	; 0x36
 800c068:	f7f9 fe3a 	bl	8005ce0 <pbuf_alloc>
 800c06c:	6138      	str	r0, [r7, #16]
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d111      	bne.n	800c098 <tcp_enqueue_flags+0xb0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	8b5b      	ldrh	r3, [r3, #26]
 800c078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c07c:	b29a      	uxth	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800c082:	4b5b      	ldr	r3, [pc, #364]	; (800c1f0 <tcp_enqueue_flags+0x208>)
 800c084:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c088:	3301      	adds	r3, #1
 800c08a:	b29a      	uxth	r2, r3
 800c08c:	4b58      	ldr	r3, [pc, #352]	; (800c1f0 <tcp_enqueue_flags+0x208>)
 800c08e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    return ERR_MEM;
 800c092:	f04f 33ff 	mov.w	r3, #4294967295
 800c096:	e09f      	b.n	800c1d8 <tcp_enqueue_flags+0x1f0>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	895a      	ldrh	r2, [r3, #10]
 800c09c:	7dfb      	ldrb	r3, [r7, #23]
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d20b      	bcs.n	800c0bc <tcp_enqueue_flags+0xd4>
 800c0a4:	4b4e      	ldr	r3, [pc, #312]	; (800c1e0 <tcp_enqueue_flags+0x1f8>)
 800c0a6:	f240 423e 	movw	r2, #1086	; 0x43e
 800c0aa:	4952      	ldr	r1, [pc, #328]	; (800c1f4 <tcp_enqueue_flags+0x20c>)
 800c0ac:	484e      	ldr	r0, [pc, #312]	; (800c1e8 <tcp_enqueue_flags+0x200>)
 800c0ae:	f007 fd9f 	bl	8013bf0 <iprintf>
 800c0b2:	2000      	movs	r0, #0
 800c0b4:	f007 fe9e 	bl	8013df4 <fflush>
 800c0b8:	f007 fde3 	bl	8013c82 <abort>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c0c0:	78fa      	ldrb	r2, [r7, #3]
 800c0c2:	7ffb      	ldrb	r3, [r7, #31]
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	6939      	ldr	r1, [r7, #16]
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7ff f806 	bl	800b0dc <tcp_create_segment>
 800c0d0:	60f8      	str	r0, [r7, #12]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d111      	bne.n	800c0fc <tcp_enqueue_flags+0x114>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	8b5b      	ldrh	r3, [r3, #26]
 800c0dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800c0e6:	4b42      	ldr	r3, [pc, #264]	; (800c1f0 <tcp_enqueue_flags+0x208>)
 800c0e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	4b3f      	ldr	r3, [pc, #252]	; (800c1f0 <tcp_enqueue_flags+0x208>)
 800c0f2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    return ERR_MEM;
 800c0f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c0fa:	e06d      	b.n	800c1d8 <tcp_enqueue_flags+0x1f0>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	891b      	ldrh	r3, [r3, #8]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00b      	beq.n	800c11c <tcp_enqueue_flags+0x134>
 800c104:	4b36      	ldr	r3, [pc, #216]	; (800c1e0 <tcp_enqueue_flags+0x1f8>)
 800c106:	f240 4247 	movw	r2, #1095	; 0x447
 800c10a:	493b      	ldr	r1, [pc, #236]	; (800c1f8 <tcp_enqueue_flags+0x210>)
 800c10c:	4836      	ldr	r0, [pc, #216]	; (800c1e8 <tcp_enqueue_flags+0x200>)
 800c10e:	f007 fd6f 	bl	8013bf0 <iprintf>
 800c112:	2000      	movs	r0, #0
 800c114:	f007 fe6e 	bl	8013df4 <fflush>
 800c118:	f007 fdb3 	bl	8013c82 <abort>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c120:	2b00      	cmp	r3, #0
 800c122:	d103      	bne.n	800c12c <tcp_enqueue_flags+0x144>
    pcb->unsent = seg;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	66da      	str	r2, [r3, #108]	; 0x6c
 800c12a:	e00d      	b.n	800c148 <tcp_enqueue_flags+0x160>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c130:	61bb      	str	r3, [r7, #24]
 800c132:	e002      	b.n	800c13a <tcp_enqueue_flags+0x152>
 800c134:	69bb      	ldr	r3, [r7, #24]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	61bb      	str	r3, [r7, #24]
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1f8      	bne.n	800c134 <tcp_enqueue_flags+0x14c>
    useg->next = seg;
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c150:	78fb      	ldrb	r3, [r7, #3]
 800c152:	f003 0302 	and.w	r3, r3, #2
 800c156:	2b00      	cmp	r3, #0
 800c158:	d104      	bne.n	800c164 <tcp_enqueue_flags+0x17c>
 800c15a:	78fb      	ldrb	r3, [r7, #3]
 800c15c:	f003 0301 	and.w	r3, r3, #1
 800c160:	2b00      	cmp	r3, #0
 800c162:	d004      	beq.n	800c16e <tcp_enqueue_flags+0x186>
    pcb->snd_lbb++;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c168:	1c5a      	adds	r2, r3, #1
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c16e:	78fb      	ldrb	r3, [r7, #3]
 800c170:	f003 0301 	and.w	r3, r3, #1
 800c174:	2b00      	cmp	r3, #0
 800c176:	d006      	beq.n	800c186 <tcp_enqueue_flags+0x19e>
    tcp_set_flags(pcb, TF_FIN);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	8b5b      	ldrh	r3, [r3, #26]
 800c17c:	f043 0320 	orr.w	r3, r3, #32
 800c180:	b29a      	uxth	r2, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fa f894 	bl	80062b8 <pbuf_clen>
 800c190:	4603      	mov	r3, r0
 800c192:	461a      	mov	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c19a:	4413      	add	r3, r2
 800c19c:	b29a      	uxth	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d013      	beq.n	800c1d6 <tcp_enqueue_flags+0x1ee>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d10f      	bne.n	800c1d6 <tcp_enqueue_flags+0x1ee>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d10b      	bne.n	800c1d6 <tcp_enqueue_flags+0x1ee>
 800c1be:	4b08      	ldr	r3, [pc, #32]	; (800c1e0 <tcp_enqueue_flags+0x1f8>)
 800c1c0:	f240 426a 	movw	r2, #1130	; 0x46a
 800c1c4:	490d      	ldr	r1, [pc, #52]	; (800c1fc <tcp_enqueue_flags+0x214>)
 800c1c6:	4808      	ldr	r0, [pc, #32]	; (800c1e8 <tcp_enqueue_flags+0x200>)
 800c1c8:	f007 fd12 	bl	8013bf0 <iprintf>
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	f007 fe11 	bl	8013df4 <fflush>
 800c1d2:	f007 fd56 	bl	8013c82 <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3720      	adds	r7, #32
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	08017180 	.word	0x08017180
 800c1e4:	080175f0 	.word	0x080175f0
 800c1e8:	080171c4 	.word	0x080171c4
 800c1ec:	08017648 	.word	0x08017648
 800c1f0:	2000221c 	.word	0x2000221c
 800c1f4:	08017668 	.word	0x08017668
 800c1f8:	080176a4 	.word	0x080176a4
 800c1fc:	080176d0 	.word	0x080176d0

0800c200 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c200:	b5b0      	push	{r4, r5, r7, lr}
 800c202:	b08a      	sub	sp, #40	; 0x28
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d10b      	bne.n	800c226 <tcp_output+0x26>
 800c20e:	4ba9      	ldr	r3, [pc, #676]	; (800c4b4 <tcp_output+0x2b4>)
 800c210:	f240 42e5 	movw	r2, #1253	; 0x4e5
 800c214:	49a8      	ldr	r1, [pc, #672]	; (800c4b8 <tcp_output+0x2b8>)
 800c216:	48a9      	ldr	r0, [pc, #676]	; (800c4bc <tcp_output+0x2bc>)
 800c218:	f007 fcea 	bl	8013bf0 <iprintf>
 800c21c:	2000      	movs	r0, #0
 800c21e:	f007 fde9 	bl	8013df4 <fflush>
 800c222:	f007 fd2e 	bl	8013c82 <abort>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	7d1b      	ldrb	r3, [r3, #20]
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d10b      	bne.n	800c246 <tcp_output+0x46>
 800c22e:	4ba1      	ldr	r3, [pc, #644]	; (800c4b4 <tcp_output+0x2b4>)
 800c230:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
 800c234:	49a2      	ldr	r1, [pc, #648]	; (800c4c0 <tcp_output+0x2c0>)
 800c236:	48a1      	ldr	r0, [pc, #644]	; (800c4bc <tcp_output+0x2bc>)
 800c238:	f007 fcda 	bl	8013bf0 <iprintf>
 800c23c:	2000      	movs	r0, #0
 800c23e:	f007 fdd9 	bl	8013df4 <fflush>
 800c242:	f007 fd1e 	bl	8013c82 <abort>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c246:	4b9f      	ldr	r3, [pc, #636]	; (800c4c4 <tcp_output+0x2c4>)
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d101      	bne.n	800c254 <tcp_output+0x54>
    return ERR_OK;
 800c250:	2300      	movs	r3, #0
 800c252:	e1d8      	b.n	800c606 <tcp_output+0x406>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c260:	429a      	cmp	r2, r3
 800c262:	d203      	bcs.n	800c26c <tcp_output+0x6c>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c26a:	e002      	b.n	800c272 <tcp_output+0x72>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c272:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c278:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d10b      	bne.n	800c298 <tcp_output+0x98>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	8b5b      	ldrh	r3, [r3, #26]
 800c284:	f003 0302 	and.w	r3, r3, #2
 800c288:	2b00      	cmp	r3, #0
 800c28a:	f000 81b1 	beq.w	800c5f0 <tcp_output+0x3f0>
      return tcp_send_empty_ack(pcb);
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 fee6 	bl	800d060 <tcp_send_empty_ack>
 800c294:	4603      	mov	r3, r0
 800c296:	e1b6      	b.n	800c606 <tcp_output+0x406>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c298:	6879      	ldr	r1, [r7, #4]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	3304      	adds	r3, #4
 800c29e:	461a      	mov	r2, r3
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f7fe feff 	bl	800b0a4 <tcp_route>
 800c2a6:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d102      	bne.n	800c2b4 <tcp_output+0xb4>
    return ERR_RTE;
 800c2ae:	f06f 0303 	mvn.w	r3, #3
 800c2b2:	e1a8      	b.n	800c606 <tcp_output+0x406>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d003      	beq.n	800c2c2 <tcp_output+0xc2>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d111      	bne.n	800c2e6 <tcp_output+0xe6>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d002      	beq.n	800c2ce <tcp_output+0xce>
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	3304      	adds	r3, #4
 800c2cc:	e000      	b.n	800c2d0 <tcp_output+0xd0>
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d102      	bne.n	800c2de <tcp_output+0xde>
      return ERR_RTE;
 800c2d8:	f06f 0303 	mvn.w	r3, #3
 800c2dc:	e193      	b.n	800c606 <tcp_output+0x406>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e8:	691b      	ldr	r3, [r3, #16]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7f7 fe64 	bl	8003fba <lwip_htonl>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2fc:	8912      	ldrh	r2, [r2, #8]
 800c2fe:	441a      	add	r2, r3
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	429a      	cmp	r2, r3
 800c304:	d927      	bls.n	800c356 <tcp_output+0x156>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c30c:	461a      	mov	r2, r3
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	429a      	cmp	r2, r3
 800c312:	d114      	bne.n	800c33e <tcp_output+0x13e>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d110      	bne.n	800c33e <tcp_output+0x13e>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c322:	2b00      	cmp	r3, #0
 800c324:	d10b      	bne.n	800c33e <tcp_output+0x13e>
      pcb->persist_cnt = 0;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2201      	movs	r2, #1
 800c332:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	8b5b      	ldrh	r3, [r3, #26]
 800c342:	f003 0302 	and.w	r3, r3, #2
 800c346:	2b00      	cmp	r3, #0
 800c348:	f000 8154 	beq.w	800c5f4 <tcp_output+0x3f4>
      return tcp_send_empty_ack(pcb);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fe87 	bl	800d060 <tcp_send_empty_ack>
 800c352:	4603      	mov	r3, r0
 800c354:	e157      	b.n	800c606 <tcp_output+0x406>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2200      	movs	r2, #0
 800c35a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c362:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c364:	6a3b      	ldr	r3, [r7, #32]
 800c366:	2b00      	cmp	r3, #0
 800c368:	f000 8123 	beq.w	800c5b2 <tcp_output+0x3b2>
    for (; useg->next != NULL; useg = useg->next);
 800c36c:	e002      	b.n	800c374 <tcp_output+0x174>
 800c36e:	6a3b      	ldr	r3, [r7, #32]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	623b      	str	r3, [r7, #32]
 800c374:	6a3b      	ldr	r3, [r7, #32]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1f8      	bne.n	800c36e <tcp_output+0x16e>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c37c:	e119      	b.n	800c5b2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	899b      	ldrh	r3, [r3, #12]
 800c384:	b29b      	uxth	r3, r3
 800c386:	4618      	mov	r0, r3
 800c388:	f7f7 fe02 	bl	8003f90 <lwip_htons>
 800c38c:	4603      	mov	r3, r0
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	f003 0304 	and.w	r3, r3, #4
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00b      	beq.n	800c3b0 <tcp_output+0x1b0>
 800c398:	4b46      	ldr	r3, [pc, #280]	; (800c4b4 <tcp_output+0x2b4>)
 800c39a:	f240 523b 	movw	r2, #1339	; 0x53b
 800c39e:	494a      	ldr	r1, [pc, #296]	; (800c4c8 <tcp_output+0x2c8>)
 800c3a0:	4846      	ldr	r0, [pc, #280]	; (800c4bc <tcp_output+0x2bc>)
 800c3a2:	f007 fc25 	bl	8013bf0 <iprintf>
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	f007 fd24 	bl	8013df4 <fflush>
 800c3ac:	f007 fc69 	bl	8013c82 <abort>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d01f      	beq.n	800c3f8 <tcp_output+0x1f8>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	8b5b      	ldrh	r3, [r3, #26]
 800c3bc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d119      	bne.n	800c3f8 <tcp_output+0x1f8>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00b      	beq.n	800c3e4 <tcp_output+0x1e4>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d110      	bne.n	800c3f8 <tcp_output+0x1f8>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3da:	891a      	ldrh	r2, [r3, #8]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d209      	bcs.n	800c3f8 <tcp_output+0x1f8>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d004      	beq.n	800c3f8 <tcp_output+0x1f8>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c3f4:	2b07      	cmp	r3, #7
 800c3f6:	d901      	bls.n	800c3fc <tcp_output+0x1fc>
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e000      	b.n	800c3fe <tcp_output+0x1fe>
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d106      	bne.n	800c410 <tcp_output+0x210>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	8b5b      	ldrh	r3, [r3, #26]
 800c406:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	f000 80e6 	beq.w	800c5dc <tcp_output+0x3dc>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	7d1b      	ldrb	r3, [r3, #20]
 800c414:	2b02      	cmp	r3, #2
 800c416:	d00c      	beq.n	800c432 <tcp_output+0x232>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41a:	691c      	ldr	r4, [r3, #16]
 800c41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41e:	691b      	ldr	r3, [r3, #16]
 800c420:	899b      	ldrh	r3, [r3, #12]
 800c422:	b29d      	uxth	r5, r3
 800c424:	2010      	movs	r0, #16
 800c426:	f7f7 fdb3 	bl	8003f90 <lwip_htons>
 800c42a:	4603      	mov	r3, r0
 800c42c:	432b      	orrs	r3, r5
 800c42e:	b29b      	uxth	r3, r3
 800c430:	81a3      	strh	r3, [r4, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c432:	697a      	ldr	r2, [r7, #20]
 800c434:	6879      	ldr	r1, [r7, #4]
 800c436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c438:	f000 f910 	bl	800c65c <tcp_output_segment>
 800c43c:	4603      	mov	r3, r0
 800c43e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d009      	beq.n	800c45c <tcp_output+0x25c>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	8b5b      	ldrh	r3, [r3, #26]
 800c44c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c450:	b29a      	uxth	r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	835a      	strh	r2, [r3, #26]
      return err;
 800c456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c45a:	e0d4      	b.n	800c606 <tcp_output+0x406>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800c45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45e:	2200      	movs	r2, #0
 800c460:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	7d1b      	ldrb	r3, [r3, #20]
 800c46e:	2b02      	cmp	r3, #2
 800c470:	d006      	beq.n	800c480 <tcp_output+0x280>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	8b5b      	ldrh	r3, [r3, #26]
 800c476:	f023 0303 	bic.w	r3, r3, #3
 800c47a:	b29a      	uxth	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	4618      	mov	r0, r3
 800c488:	f7f7 fd97 	bl	8003fba <lwip_htonl>
 800c48c:	4604      	mov	r4, r0
 800c48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c490:	891b      	ldrh	r3, [r3, #8]
 800c492:	461d      	mov	r5, r3
 800c494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c496:	691b      	ldr	r3, [r3, #16]
 800c498:	899b      	ldrh	r3, [r3, #12]
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7f7 fd77 	bl	8003f90 <lwip_htons>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	f003 0303 	and.w	r3, r3, #3
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00e      	beq.n	800c4cc <tcp_output+0x2cc>
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	e00d      	b.n	800c4ce <tcp_output+0x2ce>
 800c4b2:	bf00      	nop
 800c4b4:	08017180 	.word	0x08017180
 800c4b8:	080176f8 	.word	0x080176f8
 800c4bc:	080171c4 	.word	0x080171c4
 800c4c0:	08017710 	.word	0x08017710
 800c4c4:	200022d8 	.word	0x200022d8
 800c4c8:	08017738 	.word	0x08017738
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	442b      	add	r3, r5
 800c4d0:	4423      	add	r3, r4
 800c4d2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	1ad3      	subs	r3, r2, r3
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	da02      	bge.n	800c4e6 <tcp_output+0x2e6>
      pcb->snd_nxt = snd_nxt;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	68ba      	ldr	r2, [r7, #8]
 800c4e4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e8:	891b      	ldrh	r3, [r3, #8]
 800c4ea:	461c      	mov	r4, r3
 800c4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	899b      	ldrh	r3, [r3, #12]
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7f7 fd4b 	bl	8003f90 <lwip_htons>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	f003 0303 	and.w	r3, r3, #3
 800c502:	2b00      	cmp	r3, #0
 800c504:	d001      	beq.n	800c50a <tcp_output+0x30a>
 800c506:	2301      	movs	r3, #1
 800c508:	e000      	b.n	800c50c <tcp_output+0x30c>
 800c50a:	2300      	movs	r3, #0
 800c50c:	4423      	add	r3, r4
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d049      	beq.n	800c5a6 <tcp_output+0x3a6>
      seg->next = NULL;
 800c512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c514:	2200      	movs	r2, #0
 800c516:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d105      	bne.n	800c52c <tcp_output+0x32c>
        pcb->unacked = seg;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c524:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c528:	623b      	str	r3, [r7, #32]
 800c52a:	e03f      	b.n	800c5ac <tcp_output+0x3ac>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52e:	691b      	ldr	r3, [r3, #16]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	4618      	mov	r0, r3
 800c534:	f7f7 fd41 	bl	8003fba <lwip_htonl>
 800c538:	4604      	mov	r4, r0
 800c53a:	6a3b      	ldr	r3, [r7, #32]
 800c53c:	691b      	ldr	r3, [r3, #16]
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	4618      	mov	r0, r3
 800c542:	f7f7 fd3a 	bl	8003fba <lwip_htonl>
 800c546:	4603      	mov	r3, r0
 800c548:	1ae3      	subs	r3, r4, r3
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	da24      	bge.n	800c598 <tcp_output+0x398>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	3370      	adds	r3, #112	; 0x70
 800c552:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c554:	e002      	b.n	800c55c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c556:	69fb      	ldr	r3, [r7, #28]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d011      	beq.n	800c588 <tcp_output+0x388>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	691b      	ldr	r3, [r3, #16]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7f7 fd24 	bl	8003fba <lwip_htonl>
 800c572:	4604      	mov	r4, r0
 800c574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c576:	691b      	ldr	r3, [r3, #16]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7f7 fd1d 	bl	8003fba <lwip_htonl>
 800c580:	4603      	mov	r3, r0
 800c582:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c584:	2b00      	cmp	r3, #0
 800c586:	dbe6      	blt.n	800c556 <tcp_output+0x356>
          }
          seg->next = (*cur_seg);
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c594:	601a      	str	r2, [r3, #0]
 800c596:	e009      	b.n	800c5ac <tcp_output+0x3ac>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c598:	6a3b      	ldr	r3, [r7, #32]
 800c59a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c59c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c59e:	6a3b      	ldr	r3, [r7, #32]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	623b      	str	r3, [r7, #32]
 800c5a4:	e002      	b.n	800c5ac <tcp_output+0x3ac>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c5a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5a8:	f7fb fc54 	bl	8007e54 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5b0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d012      	beq.n	800c5de <tcp_output+0x3de>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ba:	691b      	ldr	r3, [r3, #16]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7f7 fcfb 	bl	8003fba <lwip_htonl>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5ca:	1ad3      	subs	r3, r2, r3
 800c5cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5ce:	8912      	ldrh	r2, [r2, #8]
 800c5d0:	441a      	add	r2, r3
  while (seg != NULL &&
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	f67f aed2 	bls.w	800c37e <tcp_output+0x17e>
 800c5da:	e000      	b.n	800c5de <tcp_output+0x3de>
      break;
 800c5dc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d107      	bne.n	800c5f6 <tcp_output+0x3f6>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c5ee:	e002      	b.n	800c5f6 <tcp_output+0x3f6>
    goto output_done;
 800c5f0:	bf00      	nop
 800c5f2:	e000      	b.n	800c5f6 <tcp_output+0x3f6>
    goto output_done;
 800c5f4:	bf00      	nop
  }
#endif /* TCP_OVERSIZE */

output_done:
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	8b5b      	ldrh	r3, [r3, #26]
 800c5fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c604:	2300      	movs	r3, #0
}
 800c606:	4618      	mov	r0, r3
 800c608:	3728      	adds	r7, #40	; 0x28
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bdb0      	pop	{r4, r5, r7, pc}
 800c60e:	bf00      	nop

0800c610 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d10b      	bne.n	800c636 <tcp_output_segment_busy+0x26>
 800c61e:	4b0c      	ldr	r3, [pc, #48]	; (800c650 <tcp_output_segment_busy+0x40>)
 800c620:	f240 529e 	movw	r2, #1438	; 0x59e
 800c624:	490b      	ldr	r1, [pc, #44]	; (800c654 <tcp_output_segment_busy+0x44>)
 800c626:	480c      	ldr	r0, [pc, #48]	; (800c658 <tcp_output_segment_busy+0x48>)
 800c628:	f007 fae2 	bl	8013bf0 <iprintf>
 800c62c:	2000      	movs	r0, #0
 800c62e:	f007 fbe1 	bl	8013df4 <fflush>
 800c632:	f007 fb26 	bl	8013c82 <abort>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	7b9b      	ldrb	r3, [r3, #14]
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d001      	beq.n	800c644 <tcp_output_segment_busy+0x34>
    /* other reference found */
    return 1;
 800c640:	2301      	movs	r3, #1
 800c642:	e000      	b.n	800c646 <tcp_output_segment_busy+0x36>
  }
  /* no other references found */
  return 0;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	08017180 	.word	0x08017180
 800c654:	08017750 	.word	0x08017750
 800c658:	080171c4 	.word	0x080171c4

0800c65c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c65c:	b5b0      	push	{r4, r5, r7, lr}
 800c65e:	b08c      	sub	sp, #48	; 0x30
 800c660:	af04      	add	r7, sp, #16
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d10b      	bne.n	800c686 <tcp_output_segment+0x2a>
 800c66e:	4b7c      	ldr	r3, [pc, #496]	; (800c860 <tcp_output_segment+0x204>)
 800c670:	f240 52bc 	movw	r2, #1468	; 0x5bc
 800c674:	497b      	ldr	r1, [pc, #492]	; (800c864 <tcp_output_segment+0x208>)
 800c676:	487c      	ldr	r0, [pc, #496]	; (800c868 <tcp_output_segment+0x20c>)
 800c678:	f007 faba 	bl	8013bf0 <iprintf>
 800c67c:	2000      	movs	r0, #0
 800c67e:	f007 fbb9 	bl	8013df4 <fflush>
 800c682:	f007 fafe 	bl	8013c82 <abort>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d10b      	bne.n	800c6a4 <tcp_output_segment+0x48>
 800c68c:	4b74      	ldr	r3, [pc, #464]	; (800c860 <tcp_output_segment+0x204>)
 800c68e:	f240 52bd 	movw	r2, #1469	; 0x5bd
 800c692:	4976      	ldr	r1, [pc, #472]	; (800c86c <tcp_output_segment+0x210>)
 800c694:	4874      	ldr	r0, [pc, #464]	; (800c868 <tcp_output_segment+0x20c>)
 800c696:	f007 faab 	bl	8013bf0 <iprintf>
 800c69a:	2000      	movs	r0, #0
 800c69c:	f007 fbaa 	bl	8013df4 <fflush>
 800c6a0:	f007 faef 	bl	8013c82 <abort>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d10b      	bne.n	800c6c2 <tcp_output_segment+0x66>
 800c6aa:	4b6d      	ldr	r3, [pc, #436]	; (800c860 <tcp_output_segment+0x204>)
 800c6ac:	f240 52be 	movw	r2, #1470	; 0x5be
 800c6b0:	496f      	ldr	r1, [pc, #444]	; (800c870 <tcp_output_segment+0x214>)
 800c6b2:	486d      	ldr	r0, [pc, #436]	; (800c868 <tcp_output_segment+0x20c>)
 800c6b4:	f007 fa9c 	bl	8013bf0 <iprintf>
 800c6b8:	2000      	movs	r0, #0
 800c6ba:	f007 fb9b 	bl	8013df4 <fflush>
 800c6be:	f007 fae0 	bl	8013c82 <abort>

  if (tcp_output_segment_busy(seg)) {
 800c6c2:	68f8      	ldr	r0, [r7, #12]
 800c6c4:	f7ff ffa4 	bl	800c610 <tcp_output_segment_busy>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d001      	beq.n	800c6d2 <tcp_output_segment+0x76>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	e0c2      	b.n	800c858 <tcp_output_segment+0x1fc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	691c      	ldr	r4, [r3, #16]
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7f7 fc6d 	bl	8003fba <lwip_htonl>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	691c      	ldr	r4, [r3, #16]
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7f7 fc4f 	bl	8003f90 <lwip_htons>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6fa:	68ba      	ldr	r2, [r7, #8]
 800c6fc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c6fe:	441a      	add	r2, r3
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	691b      	ldr	r3, [r3, #16]
 800c708:	3314      	adds	r3, #20
 800c70a:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	7b1b      	ldrb	r3, [r3, #12]
 800c710:	f003 0301 	and.w	r3, r3, #1
 800c714:	2b00      	cmp	r3, #0
 800c716:	d015      	beq.n	800c744 <tcp_output_segment+0xe8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	3304      	adds	r3, #4
 800c71c:	461a      	mov	r2, r3
 800c71e:	6879      	ldr	r1, [r7, #4]
 800c720:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800c724:	f7fb ffa8 	bl	8008678 <tcp_eff_send_mss_netif>
 800c728:	4603      	mov	r3, r0
 800c72a:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c72c:	8b7b      	ldrh	r3, [r7, #26]
 800c72e:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c732:	4618      	mov	r0, r3
 800c734:	f7f7 fc41 	bl	8003fba <lwip_htonl>
 800c738:	4602      	mov	r2, r0
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c73e:	69fb      	ldr	r3, [r7, #28]
 800c740:	3304      	adds	r3, #4
 800c742:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	da02      	bge.n	800c754 <tcp_output_segment+0xf8>
    pcb->rtime = 0;
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	2200      	movs	r2, #0
 800c752:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10c      	bne.n	800c776 <tcp_output_segment+0x11a>
    pcb->rttest = tcp_ticks;
 800c75c:	4b45      	ldr	r3, [pc, #276]	; (800c874 <tcp_output_segment+0x218>)
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	691b      	ldr	r3, [r3, #16]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7f7 fc25 	bl	8003fba <lwip_htonl>
 800c770:	4602      	mov	r2, r0
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	691b      	ldr	r3, [r3, #16]
 800c77a:	461a      	mov	r2, r3
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	1ad3      	subs	r3, r2, r3
 800c784:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	68fa      	ldr	r2, [r7, #12]
 800c78c:	6852      	ldr	r2, [r2, #4]
 800c78e:	8951      	ldrh	r1, [r2, #10]
 800c790:	8b3a      	ldrh	r2, [r7, #24]
 800c792:	1a8a      	subs	r2, r1, r2
 800c794:	b292      	uxth	r2, r2
 800c796:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	68fa      	ldr	r2, [r7, #12]
 800c79e:	6852      	ldr	r2, [r2, #4]
 800c7a0:	8911      	ldrh	r1, [r2, #8]
 800c7a2:	8b3a      	ldrh	r2, [r7, #24]
 800c7a4:	1a8a      	subs	r2, r1, r2
 800c7a6:	b292      	uxth	r2, r2
 800c7a8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	6912      	ldr	r2, [r2, #16]
 800c7b2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	741a      	strb	r2, [r3, #16]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	691b      	ldr	r3, [r3, #16]
 800c7c4:	f103 0214 	add.w	r2, r3, #20
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	7b1b      	ldrb	r3, [r3, #12]
 800c7cc:	f003 0301 	and.w	r3, r3, #1
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d001      	beq.n	800c7d8 <tcp_output_segment+0x17c>
 800c7d4:	2304      	movs	r3, #4
 800c7d6:	e000      	b.n	800c7da <tcp_output_segment+0x17e>
 800c7d8:	2300      	movs	r3, #0
 800c7da:	441a      	add	r2, r3
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d00b      	beq.n	800c7fa <tcp_output_segment+0x19e>
 800c7e2:	4b1f      	ldr	r3, [pc, #124]	; (800c860 <tcp_output_segment+0x204>)
 800c7e4:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 800c7e8:	4923      	ldr	r1, [pc, #140]	; (800c878 <tcp_output_segment+0x21c>)
 800c7ea:	481f      	ldr	r0, [pc, #124]	; (800c868 <tcp_output_segment+0x20c>)
 800c7ec:	f007 fa00 	bl	8013bf0 <iprintf>
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	f007 faff 	bl	8013df4 <fflush>
 800c7f6:	f007 fa44 	bl	8013c82 <abort>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	691c      	ldr	r4, [r3, #16]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800c806:	891a      	ldrh	r2, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800c808:	68b9      	ldr	r1, [r7, #8]
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800c80e:	9300      	str	r3, [sp, #0]
 800c810:	460b      	mov	r3, r1
 800c812:	2106      	movs	r1, #6
 800c814:	f7f7 fcee 	bl	80041f4 <ip_chksum_pseudo>
 800c818:	4603      	mov	r3, r0
 800c81a:	8223      	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 800c81c:	4b17      	ldr	r3, [pc, #92]	; (800c87c <tcp_output_segment+0x220>)
 800c81e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c822:	3301      	adds	r3, #1
 800c824:	b29a      	uxth	r2, r3
 800c826:	4b15      	ldr	r3, [pc, #84]	; (800c87c <tcp_output_segment+0x220>)
 800c828:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	6858      	ldr	r0, [r3, #4]
 800c830:	68b9      	ldr	r1, [r7, #8]
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	1d1c      	adds	r4, r3, #4
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	7add      	ldrb	r5, [r3, #11]
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	7a9b      	ldrb	r3, [r3, #10]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	9202      	str	r2, [sp, #8]
 800c842:	2206      	movs	r2, #6
 800c844:	9201      	str	r2, [sp, #4]
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	462b      	mov	r3, r5
 800c84a:	4622      	mov	r2, r4
 800c84c:	f7f7 ff06 	bl	800465c <ip4_output_if>
 800c850:	4603      	mov	r3, r0
 800c852:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c854:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3720      	adds	r7, #32
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bdb0      	pop	{r4, r5, r7, pc}
 800c860:	08017180 	.word	0x08017180
 800c864:	08017778 	.word	0x08017778
 800c868:	080171c4 	.word	0x080171c4
 800c86c:	08017798 	.word	0x08017798
 800c870:	080177b8 	.word	0x080177b8
 800c874:	200022c8 	.word	0x200022c8
 800c878:	080177dc 	.word	0x080177dc
 800c87c:	2000221c 	.word	0x2000221c

0800c880 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c880:	b5b0      	push	{r4, r5, r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d10b      	bne.n	800c8a6 <tcp_rexmit_rto_prepare+0x26>
 800c88e:	4b38      	ldr	r3, [pc, #224]	; (800c970 <tcp_rexmit_rto_prepare+0xf0>)
 800c890:	f240 6267 	movw	r2, #1639	; 0x667
 800c894:	4937      	ldr	r1, [pc, #220]	; (800c974 <tcp_rexmit_rto_prepare+0xf4>)
 800c896:	4838      	ldr	r0, [pc, #224]	; (800c978 <tcp_rexmit_rto_prepare+0xf8>)
 800c898:	f007 f9aa 	bl	8013bf0 <iprintf>
 800c89c:	2000      	movs	r0, #0
 800c89e:	f007 faa9 	bl	8013df4 <fflush>
 800c8a2:	f007 f9ee 	bl	8013c82 <abort>

  if (pcb->unacked == NULL) {
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d102      	bne.n	800c8b4 <tcp_rexmit_rto_prepare+0x34>
    return ERR_VAL;
 800c8ae:	f06f 0305 	mvn.w	r3, #5
 800c8b2:	e059      	b.n	800c968 <tcp_rexmit_rto_prepare+0xe8>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8b8:	60fb      	str	r3, [r7, #12]
 800c8ba:	e00b      	b.n	800c8d4 <tcp_rexmit_rto_prepare+0x54>
    if (tcp_output_segment_busy(seg)) {
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f7ff fea7 	bl	800c610 <tcp_output_segment_busy>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d002      	beq.n	800c8ce <tcp_rexmit_rto_prepare+0x4e>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c8c8:	f06f 0305 	mvn.w	r3, #5
 800c8cc:	e04c      	b.n	800c968 <tcp_rexmit_rto_prepare+0xe8>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	60fb      	str	r3, [r7, #12]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d1ef      	bne.n	800c8bc <tcp_rexmit_rto_prepare+0x3c>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c8dc:	68f8      	ldr	r0, [r7, #12]
 800c8de:	f7ff fe97 	bl	800c610 <tcp_output_segment_busy>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d002      	beq.n	800c8ee <tcp_rexmit_rto_prepare+0x6e>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c8e8:	f06f 0305 	mvn.w	r3, #5
 800c8ec:	e03c      	b.n	800c968 <tcp_rexmit_rto_prepare+0xe8>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d104      	bne.n	800c908 <tcp_rexmit_rto_prepare+0x88>
    pcb->unsent_oversize = seg->oversize_left;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	895a      	ldrh	r2, [r3, #10]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2200      	movs	r2, #0
 800c914:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	8b5b      	ldrh	r3, [r3, #26]
 800c91a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c91e:	b29a      	uxth	r2, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	691b      	ldr	r3, [r3, #16]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7f7 fb45 	bl	8003fba <lwip_htonl>
 800c930:	4604      	mov	r4, r0
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	891b      	ldrh	r3, [r3, #8]
 800c936:	461d      	mov	r5, r3
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	691b      	ldr	r3, [r3, #16]
 800c93c:	899b      	ldrh	r3, [r3, #12]
 800c93e:	b29b      	uxth	r3, r3
 800c940:	4618      	mov	r0, r3
 800c942:	f7f7 fb25 	bl	8003f90 <lwip_htons>
 800c946:	4603      	mov	r3, r0
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	f003 0303 	and.w	r3, r3, #3
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d001      	beq.n	800c956 <tcp_rexmit_rto_prepare+0xd6>
 800c952:	2301      	movs	r3, #1
 800c954:	e000      	b.n	800c958 <tcp_rexmit_rto_prepare+0xd8>
 800c956:	2300      	movs	r3, #0
 800c958:	442b      	add	r3, r5
 800c95a:	18e2      	adds	r2, r4, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2200      	movs	r2, #0
 800c964:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800c966:	2300      	movs	r3, #0
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bdb0      	pop	{r4, r5, r7, pc}
 800c970:	08017180 	.word	0x08017180
 800c974:	080177f0 	.word	0x080177f0
 800c978:	080171c4 	.word	0x080171c4

0800c97c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d10b      	bne.n	800c9a2 <tcp_rexmit_rto_commit+0x26>
 800c98a:	4b10      	ldr	r3, [pc, #64]	; (800c9cc <tcp_rexmit_rto_commit+0x50>)
 800c98c:	f240 629c 	movw	r2, #1692	; 0x69c
 800c990:	490f      	ldr	r1, [pc, #60]	; (800c9d0 <tcp_rexmit_rto_commit+0x54>)
 800c992:	4810      	ldr	r0, [pc, #64]	; (800c9d4 <tcp_rexmit_rto_commit+0x58>)
 800c994:	f007 f92c 	bl	8013bf0 <iprintf>
 800c998:	2000      	movs	r0, #0
 800c99a:	f007 fa2b 	bl	8013df4 <fflush>
 800c99e:	f007 f970 	bl	8013c82 <abort>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9a8:	2bff      	cmp	r3, #255	; 0xff
 800c9aa:	d007      	beq.n	800c9bc <tcp_rexmit_rto_commit+0x40>
    ++pcb->nrtx;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	b2da      	uxtb	r2, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f7ff fc1f 	bl	800c200 <tcp_output>
}
 800c9c2:	bf00      	nop
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	08017180 	.word	0x08017180
 800c9d0:	08017814 	.word	0x08017814
 800c9d4:	080171c4 	.word	0x080171c4

0800c9d8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d10b      	bne.n	800c9fe <tcp_rexmit_rto+0x26>
 800c9e6:	4b0c      	ldr	r3, [pc, #48]	; (800ca18 <tcp_rexmit_rto+0x40>)
 800c9e8:	f240 62b1 	movw	r2, #1713	; 0x6b1
 800c9ec:	490b      	ldr	r1, [pc, #44]	; (800ca1c <tcp_rexmit_rto+0x44>)
 800c9ee:	480c      	ldr	r0, [pc, #48]	; (800ca20 <tcp_rexmit_rto+0x48>)
 800c9f0:	f007 f8fe 	bl	8013bf0 <iprintf>
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	f007 f9fd 	bl	8013df4 <fflush>
 800c9fa:	f007 f942 	bl	8013c82 <abort>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f7ff ff3e 	bl	800c880 <tcp_rexmit_rto_prepare>
 800ca04:	4603      	mov	r3, r0
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d102      	bne.n	800ca10 <tcp_rexmit_rto+0x38>
    tcp_rexmit_rto_commit(pcb);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f7ff ffb6 	bl	800c97c <tcp_rexmit_rto_commit>
  }
}
 800ca10:	bf00      	nop
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	08017180 	.word	0x08017180
 800ca1c:	08017838 	.word	0x08017838
 800ca20:	080171c4 	.word	0x080171c4

0800ca24 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ca24:	b590      	push	{r4, r7, lr}
 800ca26:	b085      	sub	sp, #20
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d10b      	bne.n	800ca4a <tcp_rexmit+0x26>
 800ca32:	4b32      	ldr	r3, [pc, #200]	; (800cafc <tcp_rexmit+0xd8>)
 800ca34:	f240 62c5 	movw	r2, #1733	; 0x6c5
 800ca38:	4931      	ldr	r1, [pc, #196]	; (800cb00 <tcp_rexmit+0xdc>)
 800ca3a:	4832      	ldr	r0, [pc, #200]	; (800cb04 <tcp_rexmit+0xe0>)
 800ca3c:	f007 f8d8 	bl	8013bf0 <iprintf>
 800ca40:	2000      	movs	r0, #0
 800ca42:	f007 f9d7 	bl	8013df4 <fflush>
 800ca46:	f007 f91c 	bl	8013c82 <abort>

  if (pcb->unacked == NULL) {
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d102      	bne.n	800ca58 <tcp_rexmit+0x34>
    return ERR_VAL;
 800ca52:	f06f 0305 	mvn.w	r3, #5
 800ca56:	e04c      	b.n	800caf2 <tcp_rexmit+0xce>
  }

  seg = pcb->unacked;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca5c:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ca5e:	68b8      	ldr	r0, [r7, #8]
 800ca60:	f7ff fdd6 	bl	800c610 <tcp_output_segment_busy>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d002      	beq.n	800ca70 <tcp_rexmit+0x4c>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ca6a:	f06f 0305 	mvn.w	r3, #5
 800ca6e:	e040      	b.n	800caf2 <tcp_rexmit+0xce>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	336c      	adds	r3, #108	; 0x6c
 800ca7c:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ca7e:	e002      	b.n	800ca86 <tcp_rexmit+0x62>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d011      	beq.n	800cab2 <tcp_rexmit+0x8e>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	691b      	ldr	r3, [r3, #16]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7f7 fa8f 	bl	8003fba <lwip_htonl>
 800ca9c:	4604      	mov	r4, r0
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	691b      	ldr	r3, [r3, #16]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7f7 fa88 	bl	8003fba <lwip_htonl>
 800caaa:	4603      	mov	r3, r0
 800caac:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800caae:	2b00      	cmp	r3, #0
 800cab0:	dbe6      	blt.n	800ca80 <tcp_rexmit+0x5c>
  }
  seg->next = *cur_seg;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	68ba      	ldr	r2, [r7, #8]
 800cabe:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d103      	bne.n	800cad0 <tcp_rexmit+0xac>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cad6:	2bff      	cmp	r3, #255	; 0xff
 800cad8:	d007      	beq.n	800caea <tcp_rexmit+0xc6>
    ++pcb->nrtx;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cae0:	3301      	adds	r3, #1
 800cae2:	b2da      	uxtb	r2, r3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2200      	movs	r2, #0
 800caee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800caf0:	2300      	movs	r3, #0
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3714      	adds	r7, #20
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd90      	pop	{r4, r7, pc}
 800cafa:	bf00      	nop
 800cafc:	08017180 	.word	0x08017180
 800cb00:	08017854 	.word	0x08017854
 800cb04:	080171c4 	.word	0x080171c4

0800cb08 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d10b      	bne.n	800cb2e <tcp_rexmit_fast+0x26>
 800cb16:	4b31      	ldr	r3, [pc, #196]	; (800cbdc <tcp_rexmit_fast+0xd4>)
 800cb18:	f240 62fd 	movw	r2, #1789	; 0x6fd
 800cb1c:	4930      	ldr	r1, [pc, #192]	; (800cbe0 <tcp_rexmit_fast+0xd8>)
 800cb1e:	4831      	ldr	r0, [pc, #196]	; (800cbe4 <tcp_rexmit_fast+0xdc>)
 800cb20:	f007 f866 	bl	8013bf0 <iprintf>
 800cb24:	2000      	movs	r0, #0
 800cb26:	f007 f965 	bl	8013df4 <fflush>
 800cb2a:	f007 f8aa 	bl	8013c82 <abort>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d04d      	beq.n	800cbd2 <tcp_rexmit_fast+0xca>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	8b5b      	ldrh	r3, [r3, #26]
 800cb3a:	f003 0304 	and.w	r3, r3, #4
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d147      	bne.n	800cbd2 <tcp_rexmit_fast+0xca>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f7ff ff6e 	bl	800ca24 <tcp_rexmit>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d141      	bne.n	800cbd2 <tcp_rexmit_fast+0xca>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d207      	bcs.n	800cb6e <tcp_rexmit_fast+0x66>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb64:	0fda      	lsrs	r2, r3, #31
 800cb66:	4413      	add	r3, r2
 800cb68:	105b      	asrs	r3, r3, #1
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	e006      	b.n	800cb7c <tcp_rexmit_fast+0x74>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb74:	0fda      	lsrs	r2, r3, #31
 800cb76:	4413      	add	r3, r2
 800cb78:	105b      	asrs	r3, r3, #1
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cb88:	461a      	mov	r2, r3
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb8e:	005b      	lsls	r3, r3, #1
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d206      	bcs.n	800cba2 <tcp_rexmit_fast+0x9a>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb98:	005b      	lsls	r3, r3, #1
 800cb9a:	b29a      	uxth	r2, r3
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cbac:	4619      	mov	r1, r3
 800cbae:	0049      	lsls	r1, r1, #1
 800cbb0:	440b      	add	r3, r1
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	4413      	add	r3, r2
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	8b5b      	ldrh	r3, [r3, #26]
 800cbc2:	f043 0304 	orr.w	r3, r3, #4
 800cbc6:	b29a      	uxth	r2, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800cbd2:	bf00      	nop
 800cbd4:	3708      	adds	r7, #8
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	08017180 	.word	0x08017180
 800cbe0:	0801786c 	.word	0x0801786c
 800cbe4:	080171c4 	.word	0x080171c4

0800cbe8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b086      	sub	sp, #24
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	607b      	str	r3, [r7, #4]
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	817b      	strh	r3, [r7, #10]
 800cbf6:	4613      	mov	r3, r2
 800cbf8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cbfa:	897a      	ldrh	r2, [r7, #10]
 800cbfc:	893b      	ldrh	r3, [r7, #8]
 800cbfe:	4413      	add	r3, r2
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	3314      	adds	r3, #20
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	2022      	movs	r0, #34	; 0x22
 800cc0e:	f7f9 f867 	bl	8005ce0 <pbuf_alloc>
 800cc12:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d053      	beq.n	800ccc2 <tcp_output_alloc_header_common+0xda>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	895b      	ldrh	r3, [r3, #10]
 800cc1e:	461a      	mov	r2, r3
 800cc20:	897b      	ldrh	r3, [r7, #10]
 800cc22:	3314      	adds	r3, #20
 800cc24:	429a      	cmp	r2, r3
 800cc26:	da0b      	bge.n	800cc40 <tcp_output_alloc_header_common+0x58>
 800cc28:	4b28      	ldr	r3, [pc, #160]	; (800cccc <tcp_output_alloc_header_common+0xe4>)
 800cc2a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800cc2e:	4928      	ldr	r1, [pc, #160]	; (800ccd0 <tcp_output_alloc_header_common+0xe8>)
 800cc30:	4828      	ldr	r0, [pc, #160]	; (800ccd4 <tcp_output_alloc_header_common+0xec>)
 800cc32:	f006 ffdd 	bl	8013bf0 <iprintf>
 800cc36:	2000      	movs	r0, #0
 800cc38:	f007 f8dc 	bl	8013df4 <fflush>
 800cc3c:	f007 f821 	bl	8013c82 <abort>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800cc46:	8c3b      	ldrh	r3, [r7, #32]
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7f7 f9a1 	bl	8003f90 <lwip_htons>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	461a      	mov	r2, r3
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800cc56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7f7 f999 	bl	8003f90 <lwip_htons>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	461a      	mov	r2, r3
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800cc6c:	68f8      	ldr	r0, [r7, #12]
 800cc6e:	f7f7 f9a4 	bl	8003fba <lwip_htonl>
 800cc72:	4602      	mov	r2, r0
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800cc78:	897b      	ldrh	r3, [r7, #10]
 800cc7a:	089b      	lsrs	r3, r3, #2
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	3305      	adds	r3, #5
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	031b      	lsls	r3, r3, #12
 800cc84:	b29a      	uxth	r2, r3
 800cc86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7f7 f97d 	bl	8003f90 <lwip_htons>
 800cc96:	4603      	mov	r3, r0
 800cc98:	461a      	mov	r2, r3
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800cc9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7f7 f975 	bl	8003f90 <lwip_htons>
 800cca6:	4603      	mov	r3, r0
 800cca8:	461a      	mov	r2, r3
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	741a      	strb	r2, [r3, #16]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	749a      	strb	r2, [r3, #18]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ccc2:	697b      	ldr	r3, [r7, #20]
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3718      	adds	r7, #24
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	08017180 	.word	0x08017180
 800ccd0:	0801788c 	.word	0x0801788c
 800ccd4:	080171c4 	.word	0x080171c4

0800ccd8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ccd8:	b5b0      	push	{r4, r5, r7, lr}
 800ccda:	b08a      	sub	sp, #40	; 0x28
 800ccdc:	af04      	add	r7, sp, #16
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	607b      	str	r3, [r7, #4]
 800cce2:	460b      	mov	r3, r1
 800cce4:	817b      	strh	r3, [r7, #10]
 800cce6:	4613      	mov	r3, r2
 800cce8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d10b      	bne.n	800cd08 <tcp_output_alloc_header+0x30>
 800ccf0:	4b17      	ldr	r3, [pc, #92]	; (800cd50 <tcp_output_alloc_header+0x78>)
 800ccf2:	f240 7246 	movw	r2, #1862	; 0x746
 800ccf6:	4917      	ldr	r1, [pc, #92]	; (800cd54 <tcp_output_alloc_header+0x7c>)
 800ccf8:	4817      	ldr	r0, [pc, #92]	; (800cd58 <tcp_output_alloc_header+0x80>)
 800ccfa:	f006 ff79 	bl	8013bf0 <iprintf>
 800ccfe:	2000      	movs	r0, #0
 800cd00:	f007 f878 	bl	8013df4 <fflush>
 800cd04:	f006 ffbd 	bl	8013c82 <abort>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	8adb      	ldrh	r3, [r3, #22]
 800cd10:	68fa      	ldr	r2, [r7, #12]
 800cd12:	8b12      	ldrh	r2, [r2, #24]
 800cd14:	68f9      	ldr	r1, [r7, #12]
 800cd16:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800cd18:	893d      	ldrh	r5, [r7, #8]
 800cd1a:	897c      	ldrh	r4, [r7, #10]
 800cd1c:	9103      	str	r1, [sp, #12]
 800cd1e:	2110      	movs	r1, #16
 800cd20:	9102      	str	r1, [sp, #8]
 800cd22:	9201      	str	r2, [sp, #4]
 800cd24:	9300      	str	r3, [sp, #0]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	462a      	mov	r2, r5
 800cd2a:	4621      	mov	r1, r4
 800cd2c:	f7ff ff5c 	bl	800cbe8 <tcp_output_alloc_header_common>
 800cd30:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d006      	beq.n	800cd46 <tcp_output_alloc_header+0x6e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cd40:	441a      	add	r2, r3
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800cd46:	697b      	ldr	r3, [r7, #20]
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3718      	adds	r7, #24
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bdb0      	pop	{r4, r5, r7, pc}
 800cd50:	08017180 	.word	0x08017180
 800cd54:	080178bc 	.word	0x080178bc
 800cd58:	080171c4 	.word	0x080171c4

0800cd5c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b088      	sub	sp, #32
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	4611      	mov	r1, r2
 800cd68:	461a      	mov	r2, r3
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	71fb      	strb	r3, [r7, #7]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800cd72:	2300      	movs	r3, #0
 800cd74:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d10b      	bne.n	800cd94 <tcp_output_fill_options+0x38>
 800cd7c:	4b1a      	ldr	r3, [pc, #104]	; (800cde8 <tcp_output_fill_options+0x8c>)
 800cd7e:	f240 725a 	movw	r2, #1882	; 0x75a
 800cd82:	491a      	ldr	r1, [pc, #104]	; (800cdec <tcp_output_fill_options+0x90>)
 800cd84:	481a      	ldr	r0, [pc, #104]	; (800cdf0 <tcp_output_fill_options+0x94>)
 800cd86:	f006 ff33 	bl	8013bf0 <iprintf>
 800cd8a:	2000      	movs	r0, #0
 800cd8c:	f007 f832 	bl	8013df4 <fflush>
 800cd90:	f006 ff77 	bl	8013c82 <abort>

  tcphdr = (struct tcp_hdr *)p->payload;
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800cd9a:	69bb      	ldr	r3, [r7, #24]
 800cd9c:	3314      	adds	r3, #20
 800cd9e:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	f103 0214 	add.w	r2, r3, #20
 800cda6:	8bfb      	ldrh	r3, [r7, #30]
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	4619      	mov	r1, r3
 800cdac:	79fb      	ldrb	r3, [r7, #7]
 800cdae:	f003 0301 	and.w	r3, r3, #1
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d001      	beq.n	800cdba <tcp_output_fill_options+0x5e>
 800cdb6:	2304      	movs	r3, #4
 800cdb8:	e000      	b.n	800cdbc <tcp_output_fill_options+0x60>
 800cdba:	2300      	movs	r3, #0
 800cdbc:	440b      	add	r3, r1
 800cdbe:	441a      	add	r2, r3
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d00b      	beq.n	800cdde <tcp_output_fill_options+0x82>
 800cdc6:	4b08      	ldr	r3, [pc, #32]	; (800cde8 <tcp_output_fill_options+0x8c>)
 800cdc8:	f240 7279 	movw	r2, #1913	; 0x779
 800cdcc:	4909      	ldr	r1, [pc, #36]	; (800cdf4 <tcp_output_fill_options+0x98>)
 800cdce:	4808      	ldr	r0, [pc, #32]	; (800cdf0 <tcp_output_fill_options+0x94>)
 800cdd0:	f006 ff0e 	bl	8013bf0 <iprintf>
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	f007 f80d 	bl	8013df4 <fflush>
 800cdda:	f006 ff52 	bl	8013c82 <abort>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800cdde:	bf00      	nop
 800cde0:	3720      	adds	r7, #32
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	08017180 	.word	0x08017180
 800cdec:	080178e4 	.word	0x080178e4
 800cdf0:	080171c4 	.word	0x080171c4
 800cdf4:	080177dc 	.word	0x080177dc

0800cdf8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b088      	sub	sp, #32
 800cdfc:	af02      	add	r7, sp, #8
 800cdfe:	60f8      	str	r0, [r7, #12]
 800ce00:	60b9      	str	r1, [r7, #8]
 800ce02:	607a      	str	r2, [r7, #4]
 800ce04:	603b      	str	r3, [r7, #0]
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d10b      	bne.n	800ce24 <tcp_output_control_segment+0x2c>
 800ce0c:	4b13      	ldr	r3, [pc, #76]	; (800ce5c <tcp_output_control_segment+0x64>)
 800ce0e:	f240 728a 	movw	r2, #1930	; 0x78a
 800ce12:	4913      	ldr	r1, [pc, #76]	; (800ce60 <tcp_output_control_segment+0x68>)
 800ce14:	4813      	ldr	r0, [pc, #76]	; (800ce64 <tcp_output_control_segment+0x6c>)
 800ce16:	f006 feeb 	bl	8013bf0 <iprintf>
 800ce1a:	2000      	movs	r0, #0
 800ce1c:	f006 ffea 	bl	8013df4 <fflush>
 800ce20:	f006 ff2f 	bl	8013c82 <abort>

  netif = tcp_route(pcb, src, dst);
 800ce24:	683a      	ldr	r2, [r7, #0]
 800ce26:	6879      	ldr	r1, [r7, #4]
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f7fe f93b 	bl	800b0a4 <tcp_route>
 800ce2e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d105      	bne.n	800ce42 <tcp_output_control_segment+0x4a>
    pbuf_free(p);
 800ce36:	68b8      	ldr	r0, [r7, #8]
 800ce38:	f7f9 f9bc 	bl	80061b4 <pbuf_free>
    return ERR_RTE;
 800ce3c:	f06f 0303 	mvn.w	r3, #3
 800ce40:	e008      	b.n	800ce54 <tcp_output_control_segment+0x5c>
  }
  return tcp_output_control_segment_netif(pcb, p, src, dst, netif);
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	9300      	str	r3, [sp, #0]
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	68b9      	ldr	r1, [r7, #8]
 800ce4c:	68f8      	ldr	r0, [r7, #12]
 800ce4e:	f000 f80b 	bl	800ce68 <tcp_output_control_segment_netif>
 800ce52:	4603      	mov	r3, r0
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3718      	adds	r7, #24
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	08017180 	.word	0x08017180
 800ce60:	0801790c 	.word	0x0801790c
 800ce64:	080171c4 	.word	0x080171c4

0800ce68 <tcp_output_control_segment_netif>:
 */
static err_t
tcp_output_control_segment_netif(const struct tcp_pcb *pcb, struct pbuf *p,
                                 const ip_addr_t *src, const ip_addr_t *dst,
                                 struct netif *netif)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b08c      	sub	sp, #48	; 0x30
 800ce6c:	af04      	add	r7, sp, #16
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	607a      	str	r2, [r7, #4]
 800ce74:	603b      	str	r3, [r7, #0]
  err_t err;
  u8_t ttl, tos;

  LWIP_ASSERT("tcp_output_control_segment_netif: no netif given", netif != NULL);
 800ce76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d10b      	bne.n	800ce94 <tcp_output_control_segment_netif+0x2c>
 800ce7c:	4b24      	ldr	r3, [pc, #144]	; (800cf10 <tcp_output_control_segment_netif+0xa8>)
 800ce7e:	f240 72a1 	movw	r2, #1953	; 0x7a1
 800ce82:	4924      	ldr	r1, [pc, #144]	; (800cf14 <tcp_output_control_segment_netif+0xac>)
 800ce84:	4824      	ldr	r0, [pc, #144]	; (800cf18 <tcp_output_control_segment_netif+0xb0>)
 800ce86:	f006 feb3 	bl	8013bf0 <iprintf>
 800ce8a:	2000      	movs	r0, #0
 800ce8c:	f006 ffb2 	bl	8013df4 <fflush>
 800ce90:	f006 fef7 	bl	8013c82 <abort>

#if CHECKSUM_GEN_TCP
  IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
    struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	61bb      	str	r3, [r7, #24]
    tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	891a      	ldrh	r2, [r3, #8]
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	9300      	str	r3, [sp, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2106      	movs	r1, #6
 800cea6:	68b8      	ldr	r0, [r7, #8]
 800cea8:	f7f7 f9a4 	bl	80041f4 <ip_chksum_pseudo>
 800ceac:	4603      	mov	r3, r0
 800ceae:	461a      	mov	r2, r3
 800ceb0:	69bb      	ldr	r3, [r7, #24]
 800ceb2:	821a      	strh	r2, [r3, #16]
                                      src, dst);
  }
#endif
  if (pcb != NULL) {
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d006      	beq.n	800cec8 <tcp_output_control_segment_netif+0x60>
    NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
    ttl = pcb->ttl;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	7adb      	ldrb	r3, [r3, #11]
 800cebe:	77fb      	strb	r3, [r7, #31]
    tos = pcb->tos;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	7a9b      	ldrb	r3, [r3, #10]
 800cec4:	77bb      	strb	r3, [r7, #30]
 800cec6:	e003      	b.n	800ced0 <tcp_output_control_segment_netif+0x68>
  } else {
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ttl = TCP_TTL;
 800cec8:	23ff      	movs	r3, #255	; 0xff
 800ceca:	77fb      	strb	r3, [r7, #31]
    tos = 0;
 800cecc:	2300      	movs	r3, #0
 800cece:	77bb      	strb	r3, [r7, #30]
  }
  TCP_STATS_INC(tcp.xmit);
 800ced0:	4b12      	ldr	r3, [pc, #72]	; (800cf1c <tcp_output_control_segment_netif+0xb4>)
 800ced2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ced6:	3301      	adds	r3, #1
 800ced8:	b29a      	uxth	r2, r3
 800ceda:	4b10      	ldr	r3, [pc, #64]	; (800cf1c <tcp_output_control_segment_netif+0xb4>)
 800cedc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800cee0:	7ffa      	ldrb	r2, [r7, #31]
 800cee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee4:	9302      	str	r3, [sp, #8]
 800cee6:	2306      	movs	r3, #6
 800cee8:	9301      	str	r3, [sp, #4]
 800ceea:	7fbb      	ldrb	r3, [r7, #30]
 800ceec:	9300      	str	r3, [sp, #0]
 800ceee:	4613      	mov	r3, r2
 800cef0:	683a      	ldr	r2, [r7, #0]
 800cef2:	6879      	ldr	r1, [r7, #4]
 800cef4:	68b8      	ldr	r0, [r7, #8]
 800cef6:	f7f7 fbb1 	bl	800465c <ip4_output_if>
 800cefa:	4603      	mov	r3, r0
 800cefc:	75fb      	strb	r3, [r7, #23]
  NETIF_RESET_HINTS(netif);

  pbuf_free(p);
 800cefe:	68b8      	ldr	r0, [r7, #8]
 800cf00:	f7f9 f958 	bl	80061b4 <pbuf_free>
  return err;
 800cf04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3720      	adds	r7, #32
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}
 800cf10:	08017180 	.word	0x08017180
 800cf14:	08017938 	.word	0x08017938
 800cf18:	080171c4 	.word	0x080171c4
 800cf1c:	2000221c 	.word	0x2000221c

0800cf20 <tcp_rst_common>:

static struct pbuf *
tcp_rst_common(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
               const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
               u16_t local_port, u16_t remote_port)
{
 800cf20:	b590      	push	{r4, r7, lr}
 800cf22:	b08b      	sub	sp, #44	; 0x2c
 800cf24:	af04      	add	r7, sp, #16
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	607a      	str	r2, [r7, #4]
 800cf2c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d10b      	bne.n	800cf4c <tcp_rst_common+0x2c>
 800cf34:	4b22      	ldr	r3, [pc, #136]	; (800cfc0 <tcp_rst_common+0xa0>)
 800cf36:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800cf3a:	4922      	ldr	r1, [pc, #136]	; (800cfc4 <tcp_rst_common+0xa4>)
 800cf3c:	4822      	ldr	r0, [pc, #136]	; (800cfc8 <tcp_rst_common+0xa8>)
 800cf3e:	f006 fe57 	bl	8013bf0 <iprintf>
 800cf42:	2000      	movs	r0, #0
 800cf44:	f006 ff56 	bl	8013df4 <fflush>
 800cf48:	f006 fe9b 	bl	8013c82 <abort>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800cf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d10b      	bne.n	800cf6a <tcp_rst_common+0x4a>
 800cf52:	4b1b      	ldr	r3, [pc, #108]	; (800cfc0 <tcp_rst_common+0xa0>)
 800cf54:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800cf58:	491c      	ldr	r1, [pc, #112]	; (800cfcc <tcp_rst_common+0xac>)
 800cf5a:	481b      	ldr	r0, [pc, #108]	; (800cfc8 <tcp_rst_common+0xa8>)
 800cf5c:	f006 fe48 	bl	8013bf0 <iprintf>
 800cf60:	2000      	movs	r0, #0
 800cf62:	f006 ff47 	bl	8013df4 <fflush>
 800cf66:	f006 fe8c 	bl	8013c82 <abort>
  /* these two are passed only for checks, disable warnings without asserts */
  LWIP_UNUSED_ARG(local_ip);
  LWIP_UNUSED_ARG(remote_ip);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800cf6e:	f24b 4305 	movw	r3, #46085	; 0xb405
 800cf72:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800cf74:	7dfb      	ldrb	r3, [r7, #23]
 800cf76:	b29c      	uxth	r4, r3
 800cf78:	68b8      	ldr	r0, [r7, #8]
 800cf7a:	f7f7 f81e 	bl	8003fba <lwip_htonl>
 800cf7e:	4602      	mov	r2, r0
 800cf80:	8abb      	ldrh	r3, [r7, #20]
 800cf82:	9303      	str	r3, [sp, #12]
 800cf84:	2314      	movs	r3, #20
 800cf86:	9302      	str	r3, [sp, #8]
 800cf88:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cf8a:	9301      	str	r3, [sp, #4]
 800cf8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cf8e:	9300      	str	r3, [sp, #0]
 800cf90:	4613      	mov	r3, r2
 800cf92:	2200      	movs	r2, #0
 800cf94:	4621      	mov	r1, r4
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f7ff fe26 	bl	800cbe8 <tcp_output_alloc_header_common>
 800cf9c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d101      	bne.n	800cfa8 <tcp_rst_common+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return NULL;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	e006      	b.n	800cfb6 <tcp_rst_common+0x96>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	2200      	movs	r2, #0
 800cfac:	6939      	ldr	r1, [r7, #16]
 800cfae:	68f8      	ldr	r0, [r7, #12]
 800cfb0:	f7ff fed4 	bl	800cd5c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
  return p;
 800cfb4:	693b      	ldr	r3, [r7, #16]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	371c      	adds	r7, #28
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd90      	pop	{r4, r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	08017180 	.word	0x08017180
 800cfc4:	0801796c 	.word	0x0801796c
 800cfc8:	080171c4 	.word	0x080171c4
 800cfcc:	08017988 	.word	0x08017988

0800cfd0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b08a      	sub	sp, #40	; 0x28
 800cfd4:	af04      	add	r7, sp, #16
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	607a      	str	r2, [r7, #4]
 800cfdc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  
  p = tcp_rst_common(pcb, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 800cfde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cfe0:	9302      	str	r3, [sp, #8]
 800cfe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfe4:	9301      	str	r3, [sp, #4]
 800cfe6:	6a3b      	ldr	r3, [r7, #32]
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	68b9      	ldr	r1, [r7, #8]
 800cff0:	68f8      	ldr	r0, [r7, #12]
 800cff2:	f7ff ff95 	bl	800cf20 <tcp_rst_common>
 800cff6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d005      	beq.n	800d00a <tcp_rst+0x3a>
    tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800cffe:	6a3b      	ldr	r3, [r7, #32]
 800d000:	683a      	ldr	r2, [r7, #0]
 800d002:	6979      	ldr	r1, [r7, #20]
 800d004:	68f8      	ldr	r0, [r7, #12]
 800d006:	f7ff fef7 	bl	800cdf8 <tcp_output_control_segment>
  }
}
 800d00a:	bf00      	nop
 800d00c:	3718      	adds	r7, #24
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}

0800d012 <tcp_rst_netif>:
 */
void
tcp_rst_netif(struct netif *netif, u32_t seqno, u32_t ackno,
              const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
              u16_t local_port, u16_t remote_port)
{
 800d012:	b580      	push	{r7, lr}
 800d014:	b08a      	sub	sp, #40	; 0x28
 800d016:	af04      	add	r7, sp, #16
 800d018:	60f8      	str	r0, [r7, #12]
 800d01a:	60b9      	str	r1, [r7, #8]
 800d01c:	607a      	str	r2, [r7, #4]
 800d01e:	603b      	str	r3, [r7, #0]
  if (netif) {
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d017      	beq.n	800d056 <tcp_rst_netif+0x44>
    struct pbuf *p = tcp_rst_common(NULL, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 800d026:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d028:	9302      	str	r3, [sp, #8]
 800d02a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d02c:	9301      	str	r3, [sp, #4]
 800d02e:	6a3b      	ldr	r3, [r7, #32]
 800d030:	9300      	str	r3, [sp, #0]
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	68b9      	ldr	r1, [r7, #8]
 800d038:	2000      	movs	r0, #0
 800d03a:	f7ff ff71 	bl	800cf20 <tcp_rst_common>
 800d03e:	6178      	str	r0, [r7, #20]
    if (p != NULL) {
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d007      	beq.n	800d056 <tcp_rst_netif+0x44>
      tcp_output_control_segment_netif(NULL, p, local_ip, remote_ip, netif);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	9300      	str	r3, [sp, #0]
 800d04a:	6a3b      	ldr	r3, [r7, #32]
 800d04c:	683a      	ldr	r2, [r7, #0]
 800d04e:	6979      	ldr	r1, [r7, #20]
 800d050:	2000      	movs	r0, #0
 800d052:	f7ff ff09 	bl	800ce68 <tcp_output_control_segment_netif>
    }
  } else {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_rst_netif: no netif given\n"));
  }
}
 800d056:	bf00      	nop
 800d058:	3718      	adds	r7, #24
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
	...

0800d060 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d060:	b590      	push	{r4, r7, lr}
 800d062:	b087      	sub	sp, #28
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d068:	2300      	movs	r3, #0
 800d06a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d06c:	2300      	movs	r3, #0
 800d06e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10b      	bne.n	800d08e <tcp_send_empty_ack+0x2e>
 800d076:	4b2c      	ldr	r3, [pc, #176]	; (800d128 <tcp_send_empty_ack+0xc8>)
 800d078:	f44f 6203 	mov.w	r2, #2096	; 0x830
 800d07c:	492b      	ldr	r1, [pc, #172]	; (800d12c <tcp_send_empty_ack+0xcc>)
 800d07e:	482c      	ldr	r0, [pc, #176]	; (800d130 <tcp_send_empty_ack+0xd0>)
 800d080:	f006 fdb6 	bl	8013bf0 <iprintf>
 800d084:	2000      	movs	r0, #0
 800d086:	f006 feb5 	bl	8013df4 <fflush>
 800d08a:	f006 fdfa 	bl	8013c82 <abort>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d08e:	7dfb      	ldrb	r3, [r7, #23]
 800d090:	f003 0301 	and.w	r3, r3, #1
 800d094:	2b00      	cmp	r3, #0
 800d096:	d001      	beq.n	800d09c <tcp_send_empty_ack+0x3c>
 800d098:	2304      	movs	r3, #4
 800d09a:	e000      	b.n	800d09e <tcp_send_empty_ack+0x3e>
 800d09c:	2300      	movs	r3, #0
 800d09e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d0a0:	7d7b      	ldrb	r3, [r7, #21]
 800d0a2:	b29c      	uxth	r4, r3
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7f6 ff86 	bl	8003fba <lwip_htonl>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	4621      	mov	r1, r4
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f7ff fe0f 	bl	800ccd8 <tcp_output_alloc_header>
 800d0ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d109      	bne.n	800d0d6 <tcp_send_empty_ack+0x76>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	8b5b      	ldrh	r3, [r3, #26]
 800d0c6:	f043 0303 	orr.w	r3, r3, #3
 800d0ca:	b29a      	uxth	r2, r3
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d0d0:	f06f 0301 	mvn.w	r3, #1
 800d0d4:	e023      	b.n	800d11e <tcp_send_empty_ack+0xbe>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d0d6:	7dbb      	ldrb	r3, [r7, #22]
 800d0d8:	7dfa      	ldrb	r2, [r7, #23]
 800d0da:	6939      	ldr	r1, [r7, #16]
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f7ff fe3d 	bl	800cd5c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	3304      	adds	r3, #4
 800d0e8:	6939      	ldr	r1, [r7, #16]
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f7ff fe84 	bl	800cdf8 <tcp_output_control_segment>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d0f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d007      	beq.n	800d10c <tcp_send_empty_ack+0xac>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	8b5b      	ldrh	r3, [r3, #26]
 800d100:	f043 0303 	orr.w	r3, r3, #3
 800d104:	b29a      	uxth	r2, r3
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	835a      	strh	r2, [r3, #26]
 800d10a:	e006      	b.n	800d11a <tcp_send_empty_ack+0xba>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	8b5b      	ldrh	r3, [r3, #26]
 800d110:	f023 0303 	bic.w	r3, r3, #3
 800d114:	b29a      	uxth	r2, r3
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d11a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	371c      	adds	r7, #28
 800d122:	46bd      	mov	sp, r7
 800d124:	bd90      	pop	{r4, r7, pc}
 800d126:	bf00      	nop
 800d128:	08017180 	.word	0x08017180
 800d12c:	080179a4 	.word	0x080179a4
 800d130:	080171c4 	.word	0x080171c4

0800d134 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d134:	b590      	push	{r4, r7, lr}
 800d136:	b087      	sub	sp, #28
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d13c:	2300      	movs	r3, #0
 800d13e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d10b      	bne.n	800d15e <tcp_keepalive+0x2a>
 800d146:	4b1b      	ldr	r3, [pc, #108]	; (800d1b4 <tcp_keepalive+0x80>)
 800d148:	f640 026a 	movw	r2, #2154	; 0x86a
 800d14c:	491a      	ldr	r1, [pc, #104]	; (800d1b8 <tcp_keepalive+0x84>)
 800d14e:	481b      	ldr	r0, [pc, #108]	; (800d1bc <tcp_keepalive+0x88>)
 800d150:	f006 fd4e 	bl	8013bf0 <iprintf>
 800d154:	2000      	movs	r0, #0
 800d156:	f006 fe4d 	bl	8013df4 <fflush>
 800d15a:	f006 fd92 	bl	8013c82 <abort>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d15e:	7dfb      	ldrb	r3, [r7, #23]
 800d160:	b29c      	uxth	r4, r3
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d166:	3b01      	subs	r3, #1
 800d168:	4618      	mov	r0, r3
 800d16a:	f7f6 ff26 	bl	8003fba <lwip_htonl>
 800d16e:	4603      	mov	r3, r0
 800d170:	2200      	movs	r2, #0
 800d172:	4621      	mov	r1, r4
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f7ff fdaf 	bl	800ccd8 <tcp_output_alloc_header>
 800d17a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d102      	bne.n	800d188 <tcp_keepalive+0x54>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d182:	f04f 33ff 	mov.w	r3, #4294967295
 800d186:	e010      	b.n	800d1aa <tcp_keepalive+0x76>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800d188:	2300      	movs	r3, #0
 800d18a:	2200      	movs	r2, #0
 800d18c:	6939      	ldr	r1, [r7, #16]
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f7ff fde4 	bl	800cd5c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	3304      	adds	r3, #4
 800d19a:	6939      	ldr	r1, [r7, #16]
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f7ff fe2b 	bl	800cdf8 <tcp_output_control_segment>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d1a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	371c      	adds	r7, #28
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd90      	pop	{r4, r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	08017180 	.word	0x08017180
 800d1b8:	080179c4 	.word	0x080179c4
 800d1bc:	080171c4 	.word	0x080171c4

0800d1c0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d1c0:	b590      	push	{r4, r7, lr}
 800d1c2:	b08b      	sub	sp, #44	; 0x2c
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10b      	bne.n	800d1ec <tcp_zero_window_probe+0x2c>
 800d1d4:	4b4e      	ldr	r3, [pc, #312]	; (800d310 <tcp_zero_window_probe+0x150>)
 800d1d6:	f640 0295 	movw	r2, #2197	; 0x895
 800d1da:	494e      	ldr	r1, [pc, #312]	; (800d314 <tcp_zero_window_probe+0x154>)
 800d1dc:	484e      	ldr	r0, [pc, #312]	; (800d318 <tcp_zero_window_probe+0x158>)
 800d1de:	f006 fd07 	bl	8013bf0 <iprintf>
 800d1e2:	2000      	movs	r0, #0
 800d1e4:	f006 fe06 	bl	8013df4 <fflush>
 800d1e8:	f006 fd4b 	bl	8013c82 <abort>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1f0:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d1f2:	6a3b      	ldr	r3, [r7, #32]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d101      	bne.n	800d1fc <tcp_zero_window_probe+0x3c>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	e085      	b.n	800d308 <tcp_zero_window_probe+0x148>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d202:	2bff      	cmp	r3, #255	; 0xff
 800d204:	d007      	beq.n	800d216 <tcp_zero_window_probe+0x56>
    ++pcb->persist_probe;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d20c:	3301      	adds	r3, #1
 800d20e:	b2da      	uxtb	r2, r3
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d216:	6a3b      	ldr	r3, [r7, #32]
 800d218:	691b      	ldr	r3, [r3, #16]
 800d21a:	899b      	ldrh	r3, [r3, #12]
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	4618      	mov	r0, r3
 800d220:	f7f6 feb6 	bl	8003f90 <lwip_htons>
 800d224:	4603      	mov	r3, r0
 800d226:	b2db      	uxtb	r3, r3
 800d228:	f003 0301 	and.w	r3, r3, #1
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d005      	beq.n	800d23c <tcp_zero_window_probe+0x7c>
 800d230:	6a3b      	ldr	r3, [r7, #32]
 800d232:	891b      	ldrh	r3, [r3, #8]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d101      	bne.n	800d23c <tcp_zero_window_probe+0x7c>
 800d238:	2301      	movs	r3, #1
 800d23a:	e000      	b.n	800d23e <tcp_zero_window_probe+0x7e>
 800d23c:	2300      	movs	r3, #0
 800d23e:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d240:	7ffb      	ldrb	r3, [r7, #31]
 800d242:	2b00      	cmp	r3, #0
 800d244:	bf0c      	ite	eq
 800d246:	2301      	moveq	r3, #1
 800d248:	2300      	movne	r3, #0
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d24e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d252:	b299      	uxth	r1, r3
 800d254:	6a3b      	ldr	r3, [r7, #32]
 800d256:	691b      	ldr	r3, [r3, #16]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	8bba      	ldrh	r2, [r7, #28]
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f7ff fd3b 	bl	800ccd8 <tcp_output_alloc_header>
 800d262:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d264:	69bb      	ldr	r3, [r7, #24]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d102      	bne.n	800d270 <tcp_zero_window_probe+0xb0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d26a:	f04f 33ff 	mov.w	r3, #4294967295
 800d26e:	e04b      	b.n	800d308 <tcp_zero_window_probe+0x148>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d270:	69bb      	ldr	r3, [r7, #24]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d276:	7ffb      	ldrb	r3, [r7, #31]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d011      	beq.n	800d2a0 <tcp_zero_window_probe+0xe0>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	899b      	ldrh	r3, [r3, #12]
 800d280:	b29b      	uxth	r3, r3
 800d282:	b21b      	sxth	r3, r3
 800d284:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d288:	b21c      	sxth	r4, r3
 800d28a:	2011      	movs	r0, #17
 800d28c:	f7f6 fe80 	bl	8003f90 <lwip_htons>
 800d290:	4603      	mov	r3, r0
 800d292:	b21b      	sxth	r3, r3
 800d294:	4323      	orrs	r3, r4
 800d296:	b21b      	sxth	r3, r3
 800d298:	b29a      	uxth	r2, r3
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	819a      	strh	r2, [r3, #12]
 800d29e:	e010      	b.n	800d2c2 <tcp_zero_window_probe+0x102>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	3314      	adds	r3, #20
 800d2a6:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d2a8:	6a3b      	ldr	r3, [r7, #32]
 800d2aa:	6858      	ldr	r0, [r3, #4]
 800d2ac:	6a3b      	ldr	r3, [r7, #32]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	891a      	ldrh	r2, [r3, #8]
 800d2b2:	6a3b      	ldr	r3, [r7, #32]
 800d2b4:	891b      	ldrh	r3, [r3, #8]
 800d2b6:	1ad3      	subs	r3, r2, r3
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	6939      	ldr	r1, [r7, #16]
 800d2be:	f7f9 f9e9 	bl	8006694 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d2c2:	6a3b      	ldr	r3, [r7, #32]
 800d2c4:	691b      	ldr	r3, [r3, #16]
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7f6 fe76 	bl	8003fba <lwip_htonl>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	da02      	bge.n	800d2e6 <tcp_zero_window_probe+0x126>
    pcb->snd_nxt = snd_nxt;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	68fa      	ldr	r2, [r7, #12]
 800d2e4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	69b9      	ldr	r1, [r7, #24]
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f7ff fd35 	bl	800cd5c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	3304      	adds	r3, #4
 800d2f8:	69b9      	ldr	r1, [r7, #24]
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f7ff fd7c 	bl	800cdf8 <tcp_output_control_segment>
 800d300:	4603      	mov	r3, r0
 800d302:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d304:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d308:	4618      	mov	r0, r3
 800d30a:	372c      	adds	r7, #44	; 0x2c
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd90      	pop	{r4, r7, pc}
 800d310:	08017180 	.word	0x08017180
 800d314:	080179e0 	.word	0x080179e0
 800d318:	080171c4 	.word	0x080171c4

0800d31c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d324:	f7f9 fba4 	bl	8006a70 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d328:	4b0a      	ldr	r3, [pc, #40]	; (800d354 <tcpip_tcp_timer+0x38>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d103      	bne.n	800d338 <tcpip_tcp_timer+0x1c>
 800d330:	4b09      	ldr	r3, [pc, #36]	; (800d358 <tcpip_tcp_timer+0x3c>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d005      	beq.n	800d344 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d338:	2200      	movs	r2, #0
 800d33a:	4908      	ldr	r1, [pc, #32]	; (800d35c <tcpip_tcp_timer+0x40>)
 800d33c:	20fa      	movs	r0, #250	; 0xfa
 800d33e:	f000 f8e9 	bl	800d514 <sys_timeout>
 800d342:	e002      	b.n	800d34a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d344:	4b06      	ldr	r3, [pc, #24]	; (800d360 <tcpip_tcp_timer+0x44>)
 800d346:	2200      	movs	r2, #0
 800d348:	601a      	str	r2, [r3, #0]
  }
}
 800d34a:	bf00      	nop
 800d34c:	3708      	adds	r7, #8
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	200022c4 	.word	0x200022c4
 800d358:	200022d4 	.word	0x200022d4
 800d35c:	0800d31d 	.word	0x0800d31d
 800d360:	20000740 	.word	0x20000740

0800d364 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d368:	4b0a      	ldr	r3, [pc, #40]	; (800d394 <tcp_timer_needed+0x30>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d10f      	bne.n	800d390 <tcp_timer_needed+0x2c>
 800d370:	4b09      	ldr	r3, [pc, #36]	; (800d398 <tcp_timer_needed+0x34>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d103      	bne.n	800d380 <tcp_timer_needed+0x1c>
 800d378:	4b08      	ldr	r3, [pc, #32]	; (800d39c <tcp_timer_needed+0x38>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d007      	beq.n	800d390 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d380:	4b04      	ldr	r3, [pc, #16]	; (800d394 <tcp_timer_needed+0x30>)
 800d382:	2201      	movs	r2, #1
 800d384:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d386:	2200      	movs	r2, #0
 800d388:	4905      	ldr	r1, [pc, #20]	; (800d3a0 <tcp_timer_needed+0x3c>)
 800d38a:	20fa      	movs	r0, #250	; 0xfa
 800d38c:	f000 f8c2 	bl	800d514 <sys_timeout>
  }
}
 800d390:	bf00      	nop
 800d392:	bd80      	pop	{r7, pc}
 800d394:	20000740 	.word	0x20000740
 800d398:	200022c4 	.word	0x200022c4
 800d39c:	200022d4 	.word	0x200022d4
 800d3a0:	0800d31d 	.word	0x0800d31d

0800d3a4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b086      	sub	sp, #24
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d3b0:	2005      	movs	r0, #5
 800d3b2:	f7f8 f8b9 	bl	8005528 <memp_malloc>
 800d3b6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d10d      	bne.n	800d3da <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d14d      	bne.n	800d460 <sys_timeout_abs+0xbc>
 800d3c4:	4b28      	ldr	r3, [pc, #160]	; (800d468 <sys_timeout_abs+0xc4>)
 800d3c6:	22be      	movs	r2, #190	; 0xbe
 800d3c8:	4928      	ldr	r1, [pc, #160]	; (800d46c <sys_timeout_abs+0xc8>)
 800d3ca:	4829      	ldr	r0, [pc, #164]	; (800d470 <sys_timeout_abs+0xcc>)
 800d3cc:	f006 fc10 	bl	8013bf0 <iprintf>
 800d3d0:	2000      	movs	r0, #0
 800d3d2:	f006 fd0f 	bl	8013df4 <fflush>
 800d3d6:	f006 fc54 	bl	8013c82 <abort>
    return;
  }

  timeout->next = NULL;
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	68ba      	ldr	r2, [r7, #8]
 800d3e4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	68fa      	ldr	r2, [r7, #12]
 800d3f0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d3f2:	4b20      	ldr	r3, [pc, #128]	; (800d474 <sys_timeout_abs+0xd0>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d103      	bne.n	800d402 <sys_timeout_abs+0x5e>
    next_timeout = timeout;
 800d3fa:	4a1e      	ldr	r2, [pc, #120]	; (800d474 <sys_timeout_abs+0xd0>)
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	6013      	str	r3, [r2, #0]
    return;
 800d400:	e02f      	b.n	800d462 <sys_timeout_abs+0xbe>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	685a      	ldr	r2, [r3, #4]
 800d406:	4b1b      	ldr	r3, [pc, #108]	; (800d474 <sys_timeout_abs+0xd0>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	1ad3      	subs	r3, r2, r3
 800d40e:	2b00      	cmp	r3, #0
 800d410:	da07      	bge.n	800d422 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d412:	4b18      	ldr	r3, [pc, #96]	; (800d474 <sys_timeout_abs+0xd0>)
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d41a:	4a16      	ldr	r2, [pc, #88]	; (800d474 <sys_timeout_abs+0xd0>)
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	6013      	str	r3, [r2, #0]
 800d420:	e01f      	b.n	800d462 <sys_timeout_abs+0xbe>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d422:	4b14      	ldr	r3, [pc, #80]	; (800d474 <sys_timeout_abs+0xd0>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	617b      	str	r3, [r7, #20]
 800d428:	e016      	b.n	800d458 <sys_timeout_abs+0xb4>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d007      	beq.n	800d442 <sys_timeout_abs+0x9e>
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	685a      	ldr	r2, [r3, #4]
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	1ad3      	subs	r3, r2, r3
 800d43e:	2b00      	cmp	r3, #0
 800d440:	da07      	bge.n	800d452 <sys_timeout_abs+0xae>
        timeout->next = t->next;
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	681a      	ldr	r2, [r3, #0]
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	693a      	ldr	r2, [r7, #16]
 800d44e:	601a      	str	r2, [r3, #0]
        break;
 800d450:	e007      	b.n	800d462 <sys_timeout_abs+0xbe>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	617b      	str	r3, [r7, #20]
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d1e5      	bne.n	800d42a <sys_timeout_abs+0x86>
 800d45e:	e000      	b.n	800d462 <sys_timeout_abs+0xbe>
    return;
 800d460:	bf00      	nop
      }
    }
  }
}
 800d462:	3718      	adds	r7, #24
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	08017a04 	.word	0x08017a04
 800d46c:	08017a28 	.word	0x08017a28
 800d470:	08017a68 	.word	0x08017a68
 800d474:	20000738 	.word	0x20000738

0800d478 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b086      	sub	sp, #24
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	4798      	blx	r3

  now = sys_now();
 800d48a:	f7f4 fd19 	bl	8001ec0 <sys_now>
 800d48e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	4b0d      	ldr	r3, [pc, #52]	; (800d4cc <lwip_cyclic_timer+0x54>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4413      	add	r3, r2
 800d49a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d49c:	68fa      	ldr	r2, [r7, #12]
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	1ad3      	subs	r3, r2, r3
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	da09      	bge.n	800d4ba <lwip_cyclic_timer+0x42>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	687a      	ldr	r2, [r7, #4]
 800d4b0:	4907      	ldr	r1, [pc, #28]	; (800d4d0 <lwip_cyclic_timer+0x58>)
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7ff ff76 	bl	800d3a4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d4b8:	e004      	b.n	800d4c4 <lwip_cyclic_timer+0x4c>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	4904      	ldr	r1, [pc, #16]	; (800d4d0 <lwip_cyclic_timer+0x58>)
 800d4be:	68f8      	ldr	r0, [r7, #12]
 800d4c0:	f7ff ff70 	bl	800d3a4 <sys_timeout_abs>
}
 800d4c4:	bf00      	nop
 800d4c6:	3718      	adds	r7, #24
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	2000073c 	.word	0x2000073c
 800d4d0:	0800d479 	.word	0x0800d479

0800d4d4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d4da:	2301      	movs	r3, #1
 800d4dc:	607b      	str	r3, [r7, #4]
 800d4de:	e00e      	b.n	800d4fe <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d4e0:	4a0a      	ldr	r2, [pc, #40]	; (800d50c <sys_timeouts_init+0x38>)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	00db      	lsls	r3, r3, #3
 800d4ec:	4a07      	ldr	r2, [pc, #28]	; (800d50c <sys_timeouts_init+0x38>)
 800d4ee:	4413      	add	r3, r2
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	4907      	ldr	r1, [pc, #28]	; (800d510 <sys_timeouts_init+0x3c>)
 800d4f4:	f000 f80e 	bl	800d514 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	607b      	str	r3, [r7, #4]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d0ed      	beq.n	800d4e0 <sys_timeouts_init+0xc>
  }
}
 800d504:	bf00      	nop
 800d506:	3708      	adds	r7, #8
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}
 800d50c:	08017f40 	.word	0x08017f40
 800d510:	0800d479 	.word	0x0800d479

0800d514 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b086      	sub	sp, #24
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d526:	d30b      	bcc.n	800d540 <sys_timeout+0x2c>
 800d528:	4b0d      	ldr	r3, [pc, #52]	; (800d560 <sys_timeout+0x4c>)
 800d52a:	f240 1229 	movw	r2, #297	; 0x129
 800d52e:	490d      	ldr	r1, [pc, #52]	; (800d564 <sys_timeout+0x50>)
 800d530:	480d      	ldr	r0, [pc, #52]	; (800d568 <sys_timeout+0x54>)
 800d532:	f006 fb5d 	bl	8013bf0 <iprintf>
 800d536:	2000      	movs	r0, #0
 800d538:	f006 fc5c 	bl	8013df4 <fflush>
 800d53c:	f006 fba1 	bl	8013c82 <abort>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */
 800d540:	f7f4 fcbe 	bl	8001ec0 <sys_now>
 800d544:	4602      	mov	r2, r0
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	4413      	add	r3, r2
 800d54a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	68b9      	ldr	r1, [r7, #8]
 800d550:	6978      	ldr	r0, [r7, #20]
 800d552:	f7ff ff27 	bl	800d3a4 <sys_timeout_abs>
#endif
}
 800d556:	bf00      	nop
 800d558:	3718      	adds	r7, #24
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	08017a04 	.word	0x08017a04
 800d564:	08017a90 	.word	0x08017a90
 800d568:	08017a68 	.word	0x08017a68

0800d56c <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800d576:	4b19      	ldr	r3, [pc, #100]	; (800d5dc <sys_untimeout+0x70>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d02a      	beq.n	800d5d4 <sys_untimeout+0x68>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800d57e:	4b17      	ldr	r3, [pc, #92]	; (800d5dc <sys_untimeout+0x70>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	60bb      	str	r3, [r7, #8]
 800d584:	2300      	movs	r3, #0
 800d586:	60fb      	str	r3, [r7, #12]
 800d588:	e01f      	b.n	800d5ca <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	689a      	ldr	r2, [r3, #8]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	429a      	cmp	r2, r3
 800d592:	d115      	bne.n	800d5c0 <sys_untimeout+0x54>
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	68da      	ldr	r2, [r3, #12]
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d110      	bne.n	800d5c0 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d104      	bne.n	800d5ae <sys_untimeout+0x42>
        next_timeout = t->next;
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a0c      	ldr	r2, [pc, #48]	; (800d5dc <sys_untimeout+0x70>)
 800d5aa:	6013      	str	r3, [r2, #0]
 800d5ac:	e003      	b.n	800d5b6 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 800d5b6:	68b9      	ldr	r1, [r7, #8]
 800d5b8:	2005      	movs	r0, #5
 800d5ba:	f7f8 f825 	bl	8005608 <memp_free>
      return;
 800d5be:	e00a      	b.n	800d5d6 <sys_untimeout+0x6a>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	60fb      	str	r3, [r7, #12]
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	60bb      	str	r3, [r7, #8]
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d1dc      	bne.n	800d58a <sys_untimeout+0x1e>
    }
  }
  return;
 800d5d0:	bf00      	nop
 800d5d2:	e000      	b.n	800d5d6 <sys_untimeout+0x6a>
    return;
 800d5d4:	bf00      	nop
}
 800d5d6:	3710      	adds	r7, #16
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	20000738 	.word	0x20000738

0800d5e0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d5e6:	f7f4 fc6b 	bl	8001ec0 <sys_now>
 800d5ea:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800d5ec:	4b15      	ldr	r3, [pc, #84]	; (800d644 <sys_check_timeouts+0x64>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d01e      	beq.n	800d636 <sys_check_timeouts+0x56>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	68fa      	ldr	r2, [r7, #12]
 800d5fe:	1ad3      	subs	r3, r2, r3
 800d600:	2b00      	cmp	r3, #0
 800d602:	db1a      	blt.n	800d63a <sys_check_timeouts+0x5a>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a0e      	ldr	r2, [pc, #56]	; (800d644 <sys_check_timeouts+0x64>)
 800d60a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	689b      	ldr	r3, [r3, #8]
 800d610:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	68db      	ldr	r3, [r3, #12]
 800d616:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	4a0a      	ldr	r2, [pc, #40]	; (800d648 <sys_check_timeouts+0x68>)
 800d61e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d620:	68b9      	ldr	r1, [r7, #8]
 800d622:	2005      	movs	r0, #5
 800d624:	f7f7 fff0 	bl	8005608 <memp_free>
    if (handler != NULL) {
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d0de      	beq.n	800d5ec <sys_check_timeouts+0xc>
      handler(arg);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6838      	ldr	r0, [r7, #0]
 800d632:	4798      	blx	r3
  do {
 800d634:	e7da      	b.n	800d5ec <sys_check_timeouts+0xc>
      return;
 800d636:	bf00      	nop
 800d638:	e000      	b.n	800d63c <sys_check_timeouts+0x5c>
      return;
 800d63a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d63c:	3710      	adds	r7, #16
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	20000738 	.word	0x20000738
 800d648:	2000073c 	.word	0x2000073c

0800d64c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800d652:	4b16      	ldr	r3, [pc, #88]	; (800d6ac <sys_timeouts_sleeptime+0x60>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d102      	bne.n	800d660 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800d65a:	f04f 33ff 	mov.w	r3, #4294967295
 800d65e:	e021      	b.n	800d6a4 <sys_timeouts_sleeptime+0x58>
  }
  now = sys_now();
 800d660:	f7f4 fc2e 	bl	8001ec0 <sys_now>
 800d664:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800d666:	4b11      	ldr	r3, [pc, #68]	; (800d6ac <sys_timeouts_sleeptime+0x60>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	685a      	ldr	r2, [r3, #4]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	1ad3      	subs	r3, r2, r3
 800d670:	2b00      	cmp	r3, #0
 800d672:	da01      	bge.n	800d678 <sys_timeouts_sleeptime+0x2c>
    return 0;
 800d674:	2300      	movs	r3, #0
 800d676:	e015      	b.n	800d6a4 <sys_timeouts_sleeptime+0x58>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800d678:	4b0c      	ldr	r3, [pc, #48]	; (800d6ac <sys_timeouts_sleeptime+0x60>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	685a      	ldr	r2, [r3, #4]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	da0b      	bge.n	800d6a2 <sys_timeouts_sleeptime+0x56>
 800d68a:	4b09      	ldr	r3, [pc, #36]	; (800d6b0 <sys_timeouts_sleeptime+0x64>)
 800d68c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800d690:	4908      	ldr	r1, [pc, #32]	; (800d6b4 <sys_timeouts_sleeptime+0x68>)
 800d692:	4809      	ldr	r0, [pc, #36]	; (800d6b8 <sys_timeouts_sleeptime+0x6c>)
 800d694:	f006 faac 	bl	8013bf0 <iprintf>
 800d698:	2000      	movs	r0, #0
 800d69a:	f006 fbab 	bl	8013df4 <fflush>
 800d69e:	f006 faf0 	bl	8013c82 <abort>
    return ret;
 800d6a2:	683b      	ldr	r3, [r7, #0]
  }
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3708      	adds	r7, #8
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}
 800d6ac:	20000738 	.word	0x20000738
 800d6b0:	08017a04 	.word	0x08017a04
 800d6b4:	08017ac8 	.word	0x08017ac8
 800d6b8:	08017a68 	.word	0x08017a68

0800d6bc <link_required>:
#endif

/*
 * An Open on LCP has requested a change from Dead to Establish phase.
 */
void link_required(ppp_pcb *pcb) {
 800d6bc:	b480      	push	{r7}
 800d6be:	b083      	sub	sp, #12
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
    LWIP_UNUSED_ARG(pcb);
}
 800d6c4:	bf00      	nop
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <link_terminated>:

/*
 * LCP has terminated the link; go to the Dead phase and take the
 * physical layer down.
 */
void link_terminated(ppp_pcb *pcb) {
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
    if (pcb->phase == PPP_PHASE_DEAD
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d00a      	beq.n	800d6f8 <link_terminated+0x28>
#ifdef HAVE_MULTILINK
    || pcb->phase == PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	return;
    new_phase(pcb, PPP_PHASE_DISCONNECT);
 800d6e2:	210c      	movs	r1, #12
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f004 fedd 	bl	80124a4 <new_phase>
	print_link_stats();
#endif /* PPP_STATS_SUPPORT */
    } else
	ppp_notice(("Link terminated."));

    lcp_lowerdown(pcb);
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f002 fc30 	bl	800ff50 <lcp_lowerdown>

    ppp_link_terminated(pcb);
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f004 fec7 	bl	8012484 <ppp_link_terminated>
 800d6f6:	e000      	b.n	800d6fa <link_terminated+0x2a>
	return;
 800d6f8:	bf00      	nop
	else
	    mp_bundle_terminated();
    } else
	new_phase(pcb, PPP_PHASE_DEAD);
#endif
}
 800d6fa:	3708      	adds	r7, #8
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <link_down>:

/*
 * LCP has gone down; it will either die or try to re-establish.
 */
void link_down(ppp_pcb *pcb) {
 800d700:	b580      	push	{r7, lr}
 800d702:	b082      	sub	sp, #8
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
#if PPP_NOTIFY
    notify(link_down_notifier, 0);
#endif /* PPP_NOTIFY */

    if (!doing_multilink) {
	upper_layers_down(pcb);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 f80d 	bl	800d728 <upper_layers_down>
	if (pcb->phase != PPP_PHASE_DEAD
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d714:	2b00      	cmp	r3, #0
 800d716:	d003      	beq.n	800d720 <link_down+0x20>
#ifdef HAVE_MULTILINK
	&& pcb->phase != PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
	)
	    new_phase(pcb, PPP_PHASE_ESTABLISH);
 800d718:	2106      	movs	r1, #6
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f004 fec2 	bl	80124a4 <new_phase>
    }
    /* XXX if doing_multilink, should do something to stop
       network-layer traffic on the link */
}
 800d720:	bf00      	nop
 800d722:	3708      	adds	r7, #8
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <upper_layers_down>:

void upper_layers_down(ppp_pcb *pcb) {
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
    int i;
    const struct protent *protp;

    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800d730:	2300      	movs	r3, #0
 800d732:	60fb      	str	r3, [r7, #12]
 800d734:	e01e      	b.n	800d774 <upper_layers_down+0x4c>
        if (protp->protocol != PPP_LCP && protp->lowerdown != NULL)
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	881b      	ldrh	r3, [r3, #0]
 800d73a:	f24c 0221 	movw	r2, #49185	; 0xc021
 800d73e:	4293      	cmp	r3, r2
 800d740:	d007      	beq.n	800d752 <upper_layers_down+0x2a>
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	695b      	ldr	r3, [r3, #20]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d003      	beq.n	800d752 <upper_layers_down+0x2a>
	    (*protp->lowerdown)(pcb);
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	695b      	ldr	r3, [r3, #20]
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	4798      	blx	r3
        if (protp->protocol < 0xC000 && protp->close != NULL)
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	881b      	ldrh	r3, [r3, #0]
 800d756:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d75a:	d208      	bcs.n	800d76e <upper_layers_down+0x46>
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	69db      	ldr	r3, [r3, #28]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d004      	beq.n	800d76e <upper_layers_down+0x46>
	    (*protp->close)(pcb, "LCP down");
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	69db      	ldr	r3, [r3, #28]
 800d768:	490c      	ldr	r1, [pc, #48]	; (800d79c <upper_layers_down+0x74>)
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	4798      	blx	r3
    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	3301      	adds	r3, #1
 800d772:	60fb      	str	r3, [r7, #12]
 800d774:	4a0a      	ldr	r2, [pc, #40]	; (800d7a0 <upper_layers_down+0x78>)
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d77c:	60bb      	str	r3, [r7, #8]
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d1d8      	bne.n	800d736 <upper_layers_down+0xe>
    }
    pcb->num_np_open = 0;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2200      	movs	r2, #0
 800d788:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    pcb->num_np_up = 0;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2200      	movs	r2, #0
 800d790:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
}
 800d794:	bf00      	nop
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	08017adc 	.word	0x08017adc
 800d7a0:	08018014 	.word	0x08018014

0800d7a4 <link_established>:

/*
 * The link is established.
 * Proceed to the Dead, Authenticate or Network phase as appropriate.
 */
void link_established(ppp_pcb *pcb) {
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b086      	sub	sp, #24
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
#if PAP_SUPPORT
    lcp_options *wo = &pcb->lcp_wantoptions;
#endif /* PAP_SUPPORT */
    lcp_options *go = &pcb->lcp_gotoptions;
#endif /* PPP_SERVER */
    lcp_options *ho = &pcb->lcp_hisoptions;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	33cc      	adds	r3, #204	; 0xcc
 800d7b0:	60fb      	str	r3, [r7, #12]

    /*
     * Tell higher-level protocols that LCP is up.
     */
    if (!doing_multilink) {
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	613b      	str	r3, [r7, #16]
 800d7b6:	e010      	b.n	800d7da <link_established+0x36>
	    if (protp->protocol != PPP_LCP
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	881b      	ldrh	r3, [r3, #0]
 800d7bc:	f24c 0221 	movw	r2, #49185	; 0xc021
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d007      	beq.n	800d7d4 <link_established+0x30>
		&& protp->lowerup != NULL)
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	691b      	ldr	r3, [r3, #16]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d003      	beq.n	800d7d4 <link_established+0x30>
		(*protp->lowerup)(pcb);
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	691b      	ldr	r3, [r3, #16]
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	4798      	blx	r3
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	613b      	str	r3, [r7, #16]
 800d7da:	4a19      	ldr	r2, [pc, #100]	; (800d840 <link_established+0x9c>)
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7e2:	60bb      	str	r3, [r7, #8]
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d1e6      	bne.n	800d7b8 <link_established+0x14>
	    return;
	}
    }
#endif /* PPP_SERVER */

    new_phase(pcb, PPP_PHASE_AUTHENTICATE);
 800d7ea:	2107      	movs	r1, #7
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f004 fe59 	bl	80124a4 <new_phase>
    auth = 0;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	617b      	str	r3, [r7, #20]
	chap_auth_with_peer(pcb, pcb->settings.user, CHAP_DIGEST(ho->chap_mdtype));
	auth |= CHAP_WITHPEER;
    } else
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    if (ho->neg_upap) {
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	f003 0310 	and.w	r3, r3, #16
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	2b00      	cmp	r3, #0
 800d802:	d00b      	beq.n	800d81c <link_established+0x78>
	upap_authwithpeer(pcb, pcb->settings.user, pcb->settings.passwd);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6859      	ldr	r1, [r3, #4]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	689b      	ldr	r3, [r3, #8]
 800d80c:	461a      	mov	r2, r3
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f005 fca8 	bl	8013164 <upap_authwithpeer>
	auth |= PAP_WITHPEER;
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	f043 0301 	orr.w	r3, r3, #1
 800d81a:	617b      	str	r3, [r7, #20]
    } else
#endif /* PAP_SUPPORT */
    {}

    pcb->auth_pending = auth;
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	b29a      	uxth	r2, r3
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->auth_done = 0;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2200      	movs	r2, #0
 800d828:	865a      	strh	r2, [r3, #50]	; 0x32

    if (!auth)
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d102      	bne.n	800d836 <link_established+0x92>
#endif /* PPP_AUTH_SUPPORT */
	network_phase(pcb);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 f807 	bl	800d844 <network_phase>
}
 800d836:	bf00      	nop
 800d838:	3718      	adds	r7, #24
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	08018014 	.word	0x08018014

0800d844 <network_phase>:

/*
 * Proceed to the network phase.
 */
static void network_phase(ppp_pcb *pcb) {
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
	options_from_list(extra_options, 1);
	free_wordlist(extra_options);
	extra_options = 0;
    }
#endif /* PPP_OPTIONS */
    start_networks(pcb);
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 f804 	bl	800d85a <start_networks>
}
 800d852:	bf00      	nop
 800d854:	3708      	adds	r7, #8
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <start_networks>:

void start_networks(ppp_pcb *pcb) {
 800d85a:	b580      	push	{r7, lr}
 800d85c:	b082      	sub	sp, #8
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
#if CCP_SUPPORT || ECP_SUPPORT
    int i;
    const struct protent *protp;
#endif /* CCP_SUPPORT || ECP_SUPPORT */

    new_phase(pcb, PPP_PHASE_NETWORK);
 800d862:	2109      	movs	r1, #9
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f004 fe1d 	bl	80124a4 <new_phase>
#endif /* ECP_SUPPORT */
#if MPPE_SUPPORT
        && !pcb->ccp_gotoptions.mppe
#endif /* MPPE_SUPPORT */
        )
	continue_networks(pcb);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 f804 	bl	800d878 <continue_networks>
}
 800d870:	bf00      	nop
 800d872:	3708      	adds	r7, #8
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <continue_networks>:

void continue_networks(ppp_pcb *pcb) {
 800d878:	b580      	push	{r7, lr}
 800d87a:	b084      	sub	sp, #16
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
    const struct protent *protp;

    /*
     * Start the "real" network protocols.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800d880:	2300      	movs	r3, #0
 800d882:	60fb      	str	r3, [r7, #12]
 800d884:	e017      	b.n	800d8b6 <continue_networks+0x3e>
	if (protp->protocol < 0xC000
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	881b      	ldrh	r3, [r3, #0]
 800d88a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d88e:	d20f      	bcs.n	800d8b0 <continue_networks+0x38>
	    && protp->protocol != PPP_CCP
#endif /* CCP_SUPPORT */
#if ECP_SUPPORT
	    && protp->protocol != PPP_ECP
#endif /* ECP_SUPPORT */
	    && protp->open != NULL) {
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	699b      	ldr	r3, [r3, #24]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d00b      	beq.n	800d8b0 <continue_networks+0x38>
	    (*protp->open)(pcb);
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	699b      	ldr	r3, [r3, #24]
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	4798      	blx	r3
	    ++pcb->num_np_open;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	60fb      	str	r3, [r7, #12]
 800d8b6:	4a0a      	ldr	r2, [pc, #40]	; (800d8e0 <continue_networks+0x68>)
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8be:	60bb      	str	r3, [r7, #8]
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d1df      	bne.n	800d886 <continue_networks+0xe>
	}

    if (pcb->num_np_open == 0)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d103      	bne.n	800d8d8 <continue_networks+0x60>
	/* nothing to do */
	lcp_close(pcb, "No network protocols running");
 800d8d0:	4904      	ldr	r1, [pc, #16]	; (800d8e4 <continue_networks+0x6c>)
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f002 faa0 	bl	800fe18 <lcp_close>
}
 800d8d8:	bf00      	nop
 800d8da:	3710      	adds	r7, #16
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	08018014 	.word	0x08018014
 800d8e4:	08017ae8 	.word	0x08017ae8

0800d8e8 <auth_withpeer_fail>:
#endif /* PPP_SERVER */

/*
 * We have failed to authenticate ourselves to the peer using `protocol'.
 */
void auth_withpeer_fail(ppp_pcb *pcb, int protocol) {
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
     * authentication secrets.
     *
     * He'll probably take the link down, and there's not much
     * we can do except wait for that.
     */
    pcb->err_code = PPPERR_AUTHFAIL;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2207      	movs	r2, #7
 800d8f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    lcp_close(pcb, "Failed to authenticate ourselves to peer");
 800d8fa:	4904      	ldr	r1, [pc, #16]	; (800d90c <auth_withpeer_fail+0x24>)
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f002 fa8b 	bl	800fe18 <lcp_close>
}
 800d902:	bf00      	nop
 800d904:	3708      	adds	r7, #8
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	08017b08 	.word	0x08017b08

0800d910 <auth_withpeer_success>:

/*
 * We have successfully authenticated ourselves with the peer using `protocol'.
 */
void auth_withpeer_success(ppp_pcb *pcb, int protocol, int prot_flavor) {
 800d910:	b580      	push	{r7, lr}
 800d912:	b086      	sub	sp, #24
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	607a      	str	r2, [r7, #4]
    int bit;
    const char *prot = "";
 800d91c:	4b17      	ldr	r3, [pc, #92]	; (800d97c <auth_withpeer_success+0x6c>)
 800d91e:	613b      	str	r3, [r7, #16]
    LWIP_UNUSED_ARG(prot_flavor); /* if CHAP_SUPPORT is disabled */

    switch (protocol) {
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	f24c 0223 	movw	r2, #49187	; 0xc023
 800d926:	4293      	cmp	r3, r2
 800d928:	d104      	bne.n	800d934 <auth_withpeer_success+0x24>
	}
	break;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    case PPP_PAP:
	bit = PAP_WITHPEER;
 800d92a:	2301      	movs	r3, #1
 800d92c:	617b      	str	r3, [r7, #20]
	prot = "PAP";
 800d92e:	4b14      	ldr	r3, [pc, #80]	; (800d980 <auth_withpeer_success+0x70>)
 800d930:	613b      	str	r3, [r7, #16]
	break;
 800d932:	e001      	b.n	800d938 <auth_withpeer_success+0x28>
	prot = "EAP";
	break;
#endif /* EAP_SUPPORT */
    default:
	ppp_warn(("auth_withpeer_success: unknown protocol %x", protocol));
	bit = 0;
 800d934:	2300      	movs	r3, #0
 800d936:	617b      	str	r3, [r7, #20]
    }

    ppp_notice(("%s authentication succeeded", prot));

    /* Save the authentication method for later. */
    pcb->auth_done |= bit;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d93c:	b21a      	sxth	r2, r3
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	b21b      	sxth	r3, r3
 800d942:	4313      	orrs	r3, r2
 800d944:	b21b      	sxth	r3, r3
 800d946:	b29a      	uxth	r2, r3
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	865a      	strh	r2, [r3, #50]	; 0x32

    /*
     * If there is no more authentication still being done,
     * proceed to the network (or callback) phase.
     */
    if ((pcb->auth_pending &= ~bit) == 0)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d950:	b21a      	sxth	r2, r3
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	b21b      	sxth	r3, r3
 800d956:	43db      	mvns	r3, r3
 800d958:	b21b      	sxth	r3, r3
 800d95a:	4013      	ands	r3, r2
 800d95c:	b21b      	sxth	r3, r3
 800d95e:	b29a      	uxth	r2, r3
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	861a      	strh	r2, [r3, #48]	; 0x30
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d102      	bne.n	800d972 <auth_withpeer_success+0x62>
	network_phase(pcb);
 800d96c:	68f8      	ldr	r0, [r7, #12]
 800d96e:	f7ff ff69 	bl	800d844 <network_phase>
}
 800d972:	bf00      	nop
 800d974:	3718      	adds	r7, #24
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	08017b34 	.word	0x08017b34
 800d980:	08017b38 	.word	0x08017b38

0800d984 <np_up>:


/*
 * np_up - a network protocol has come up.
 */
void np_up(ppp_pcb *pcb, int proto) {
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
#if PPP_IDLETIMELIMIT
    int tlim;
#endif /* PPP_IDLETIMELIMIT */
    LWIP_UNUSED_ARG(proto);

    if (pcb->num_np_up == 0) {
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800d994:	2b00      	cmp	r3, #0
 800d996:	d103      	bne.n	800d9a0 <np_up+0x1c>
	/*
	 * At this point we consider that the link has come up successfully.
	 */
	new_phase(pcb, PPP_PHASE_RUNNING);
 800d998:	210a      	movs	r1, #10
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f004 fd82 	bl	80124a4 <new_phase>
	 */
	if (updetach && !nodetach)
	    detach();
#endif /* Unused */
    }
    ++pcb->num_np_up;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	b2da      	uxtb	r2, r3
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
}
 800d9b0:	bf00      	nop
 800d9b2:	3708      	adds	r7, #8
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <np_down>:

/*
 * np_down - a network protocol has gone down.
 */
void np_down(ppp_pcb *pcb, int proto) {
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_up == 0) {
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800d9c8:	3b01      	subs	r3, #1
 800d9ca:	b2da      	uxtb	r2, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d103      	bne.n	800d9e4 <np_down+0x2c>
	UNTIMEOUT(connect_time_expired, NULL);
#endif /* PPP_MAXCONNECT */
#ifdef MAXOCTETS
	UNTIMEOUT(check_maxoctets, NULL);
#endif
	new_phase(pcb, PPP_PHASE_NETWORK);
 800d9dc:	2109      	movs	r1, #9
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f004 fd60 	bl	80124a4 <new_phase>
    }
}
 800d9e4:	bf00      	nop
 800d9e6:	3708      	adds	r7, #8
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <np_finished>:

/*
 * np_finished - a network protocol has finished using the link.
 */
void np_finished(ppp_pcb *pcb, int proto) {
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b082      	sub	sp, #8
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_open <= 0) {
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800d9fc:	3b01      	subs	r3, #1
 800d9fe:	b2da      	uxtb	r2, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d103      	bne.n	800da18 <np_finished+0x2c>
	/* no further use for the link: shut up shop. */
	lcp_close(pcb, "No network protocols running");
 800da10:	4903      	ldr	r1, [pc, #12]	; (800da20 <np_finished+0x34>)
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f002 fa00 	bl	800fe18 <lcp_close>
    }
}
 800da18:	bf00      	nop
 800da1a:	3708      	adds	r7, #8
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	08017ae8 	.word	0x08017ae8

0800da24 <fsm_init>:
/*
 * fsm_init - Initialize fsm.
 *
 * Initialize fsm state.
 */
void fsm_init(fsm *f) {
 800da24:	b480      	push	{r7}
 800da26:	b085      	sub	sp, #20
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	60fb      	str	r3, [r7, #12]
    f->state = PPP_FSM_INITIAL;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2200      	movs	r2, #0
 800da36:	741a      	strb	r2, [r3, #16]
    f->flags = 0;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	745a      	strb	r2, [r3, #17]
    f->id = 0;				/* XXX Start with random id? */
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2200      	movs	r2, #0
 800da42:	749a      	strb	r2, [r3, #18]
    f->maxnakloops = pcb->settings.fsm_max_nak_loops;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	7c5a      	ldrb	r2, [r3, #17]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	75da      	strb	r2, [r3, #23]
    f->term_reason_len = 0;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2200      	movs	r2, #0
 800da50:	761a      	strb	r2, [r3, #24]
}
 800da52:	bf00      	nop
 800da54:	3714      	adds	r7, #20
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr

0800da5e <fsm_lowerup>:


/*
 * fsm_lowerup - The lower layer is up.
 */
void fsm_lowerup(fsm *f) {
 800da5e:	b580      	push	{r7, lr}
 800da60:	b082      	sub	sp, #8
 800da62:	af00      	add	r7, sp, #0
 800da64:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	7c1b      	ldrb	r3, [r3, #16]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d002      	beq.n	800da74 <fsm_lowerup+0x16>
 800da6e:	2b01      	cmp	r3, #1
 800da70:	d004      	beq.n	800da7c <fsm_lowerup+0x1e>

    default:
	FSMDEBUG(("%s: Up event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800da72:	e015      	b.n	800daa0 <fsm_lowerup+0x42>
	f->state = PPP_FSM_CLOSED;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2202      	movs	r2, #2
 800da78:	741a      	strb	r2, [r3, #16]
	break;
 800da7a:	e011      	b.n	800daa0 <fsm_lowerup+0x42>
	if( f->flags & OPT_SILENT )
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	7c5b      	ldrb	r3, [r3, #17]
 800da80:	f003 0304 	and.w	r3, r3, #4
 800da84:	2b00      	cmp	r3, #0
 800da86:	d003      	beq.n	800da90 <fsm_lowerup+0x32>
	    f->state = PPP_FSM_STOPPED;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2203      	movs	r2, #3
 800da8c:	741a      	strb	r2, [r3, #16]
	break;
 800da8e:	e006      	b.n	800da9e <fsm_lowerup+0x40>
	    fsm_sconfreq(f, 0);
 800da90:	2100      	movs	r1, #0
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 fdb2 	bl	800e5fc <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2206      	movs	r2, #6
 800da9c:	741a      	strb	r2, [r3, #16]
	break;
 800da9e:	bf00      	nop
}
 800daa0:	bf00      	nop
 800daa2:	3708      	adds	r7, #8
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <fsm_lowerdown>:
/*
 * fsm_lowerdown - The lower layer is down.
 *
 * Cancel all timeouts and inform upper layers.
 */
void fsm_lowerdown(fsm *f) {
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	7c1b      	ldrb	r3, [r3, #16]
 800dab4:	3b02      	subs	r3, #2
 800dab6:	2b07      	cmp	r3, #7
 800dab8:	d843      	bhi.n	800db42 <fsm_lowerdown+0x9a>
 800daba:	a201      	add	r2, pc, #4	; (adr r2, 800dac0 <fsm_lowerdown+0x18>)
 800dabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dac0:	0800dae1 	.word	0x0800dae1
 800dac4:	0800dae9 	.word	0x0800dae9
 800dac8:	0800db05 	.word	0x0800db05
 800dacc:	0800db15 	.word	0x0800db15
 800dad0:	0800db15 	.word	0x0800db15
 800dad4:	0800db15 	.word	0x0800db15
 800dad8:	0800db15 	.word	0x0800db15
 800dadc:	0800db25 	.word	0x0800db25
    case PPP_FSM_CLOSED:
	f->state = PPP_FSM_INITIAL;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	741a      	strb	r2, [r3, #16]
	break;
 800dae6:	e02c      	b.n	800db42 <fsm_lowerdown+0x9a>

    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_STARTING;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2201      	movs	r2, #1
 800daec:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->starting )
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d023      	beq.n	800db40 <fsm_lowerdown+0x98>
	    (*f->callbacks->starting)(f);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	4798      	blx	r3
	break;
 800db02:	e01d      	b.n	800db40 <fsm_lowerdown+0x98>

    case PPP_FSM_CLOSING:
	f->state = PPP_FSM_INITIAL;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2200      	movs	r2, #0
 800db08:	741a      	strb	r2, [r3, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800db0a:	6879      	ldr	r1, [r7, #4]
 800db0c:	480f      	ldr	r0, [pc, #60]	; (800db4c <fsm_lowerdown+0xa4>)
 800db0e:	f7ff fd2d 	bl	800d56c <sys_untimeout>
	break;
 800db12:	e016      	b.n	800db42 <fsm_lowerdown+0x9a>

    case PPP_FSM_STOPPING:
    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	f->state = PPP_FSM_STARTING;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2201      	movs	r2, #1
 800db18:	741a      	strb	r2, [r3, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800db1a:	6879      	ldr	r1, [r7, #4]
 800db1c:	480b      	ldr	r0, [pc, #44]	; (800db4c <fsm_lowerdown+0xa4>)
 800db1e:	f7ff fd25 	bl	800d56c <sys_untimeout>
	break;
 800db22:	e00e      	b.n	800db42 <fsm_lowerdown+0x9a>

    case PPP_FSM_OPENED:
	if( f->callbacks->down )
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	6a1b      	ldr	r3, [r3, #32]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d004      	beq.n	800db38 <fsm_lowerdown+0x90>
	    (*f->callbacks->down)(f);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	6a1b      	ldr	r3, [r3, #32]
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	4798      	blx	r3
	f->state = PPP_FSM_STARTING;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2201      	movs	r2, #1
 800db3c:	741a      	strb	r2, [r3, #16]
	break;
 800db3e:	e000      	b.n	800db42 <fsm_lowerdown+0x9a>
	break;
 800db40:	bf00      	nop

    default:
	FSMDEBUG(("%s: Down event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800db42:	bf00      	nop
 800db44:	3708      	adds	r7, #8
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	0800dd79 	.word	0x0800dd79

0800db50 <fsm_open>:


/*
 * fsm_open - Link is allowed to come up.
 */
void fsm_open(fsm *f) {
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	7c1b      	ldrb	r3, [r3, #16]
 800db5c:	2b09      	cmp	r3, #9
 800db5e:	d847      	bhi.n	800dbf0 <fsm_open+0xa0>
 800db60:	a201      	add	r2, pc, #4	; (adr r2, 800db68 <fsm_open+0x18>)
 800db62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db66:	bf00      	nop
 800db68:	0800db91 	.word	0x0800db91
 800db6c:	0800dbf1 	.word	0x0800dbf1
 800db70:	0800dbad 	.word	0x0800dbad
 800db74:	0800dbd7 	.word	0x0800dbd7
 800db78:	0800dbd1 	.word	0x0800dbd1
 800db7c:	0800dbf1 	.word	0x0800dbf1
 800db80:	0800dbf1 	.word	0x0800dbf1
 800db84:	0800dbf1 	.word	0x0800dbf1
 800db88:	0800dbf1 	.word	0x0800dbf1
 800db8c:	0800dbd7 	.word	0x0800dbd7
    case PPP_FSM_INITIAL:
	f->state = PPP_FSM_STARTING;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2201      	movs	r2, #1
 800db94:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->starting )
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	685b      	ldr	r3, [r3, #4]
 800db9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d029      	beq.n	800dbf4 <fsm_open+0xa4>
	    (*f->callbacks->starting)(f);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	4798      	blx	r3
	break;
 800dbaa:	e023      	b.n	800dbf4 <fsm_open+0xa4>

    case PPP_FSM_CLOSED:
	if( f->flags & OPT_SILENT )
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	7c5b      	ldrb	r3, [r3, #17]
 800dbb0:	f003 0304 	and.w	r3, r3, #4
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d003      	beq.n	800dbc0 <fsm_open+0x70>
	    f->state = PPP_FSM_STOPPED;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2203      	movs	r2, #3
 800dbbc:	741a      	strb	r2, [r3, #16]
	else {
	    /* Send an initial configure-request */
	    fsm_sconfreq(f, 0);
	    f->state = PPP_FSM_REQSENT;
	}
	break;
 800dbbe:	e01c      	b.n	800dbfa <fsm_open+0xaa>
	    fsm_sconfreq(f, 0);
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 fd1a 	bl	800e5fc <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2206      	movs	r2, #6
 800dbcc:	741a      	strb	r2, [r3, #16]
	break;
 800dbce:	e014      	b.n	800dbfa <fsm_open+0xaa>

    case PPP_FSM_CLOSING:
	f->state = PPP_FSM_STOPPING;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2205      	movs	r2, #5
 800dbd4:	741a      	strb	r2, [r3, #16]
	/* fall through */
	/* no break */
    case PPP_FSM_STOPPED:
    case PPP_FSM_OPENED:
	if( f->flags & OPT_RESTART ){
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	7c5b      	ldrb	r3, [r3, #17]
 800dbda:	f003 0302 	and.w	r3, r3, #2
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d00a      	beq.n	800dbf8 <fsm_open+0xa8>
	    fsm_lowerdown(f);
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f7ff ff60 	bl	800daa8 <fsm_lowerdown>
	    fsm_lowerup(f);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f7ff ff38 	bl	800da5e <fsm_lowerup>
	}
	break;
 800dbee:	e003      	b.n	800dbf8 <fsm_open+0xa8>
    default:
	break;
 800dbf0:	bf00      	nop
 800dbf2:	e002      	b.n	800dbfa <fsm_open+0xaa>
	break;
 800dbf4:	bf00      	nop
 800dbf6:	e000      	b.n	800dbfa <fsm_open+0xaa>
	break;
 800dbf8:	bf00      	nop
    }
}
 800dbfa:	bf00      	nop
 800dbfc:	3708      	adds	r7, #8
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop

0800dc04 <terminate_layer>:
 * terminate_layer - Start process of shutting down the FSM
 *
 * Cancel any timeout running, notify upper layers we're done, and
 * send a terminate-request message as configured.
 */
static void terminate_layer(fsm *f, int nextstate) {
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b086      	sub	sp, #24
 800dc08:	af02      	add	r7, sp, #8
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	6039      	str	r1, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	60fb      	str	r3, [r7, #12]

    if( f->state != PPP_FSM_OPENED )
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	7c1b      	ldrb	r3, [r3, #16]
 800dc18:	2b09      	cmp	r3, #9
 800dc1a:	d004      	beq.n	800dc26 <terminate_layer+0x22>
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800dc1c:	6879      	ldr	r1, [r7, #4]
 800dc1e:	482f      	ldr	r0, [pc, #188]	; (800dcdc <terminate_layer+0xd8>)
 800dc20:	f7ff fca4 	bl	800d56c <sys_untimeout>
 800dc24:	e009      	b.n	800dc3a <terminate_layer+0x36>
    else if( f->callbacks->down )
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	6a1b      	ldr	r3, [r3, #32]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d004      	beq.n	800dc3a <terminate_layer+0x36>
	(*f->callbacks->down)(f);	/* Inform upper layers we're down */
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	6a1b      	ldr	r3, [r3, #32]
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	4798      	blx	r3

    /* Init restart counter and send Terminate-Request */
    f->retransmits = pcb->settings.fsm_max_term_transmits;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	7c1a      	ldrb	r2, [r3, #16]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	751a      	strb	r2, [r3, #20]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	7c9b      	ldrb	r3, [r3, #18]
 800dc46:	3301      	adds	r3, #1
 800dc48:	b2da      	uxtb	r2, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	749a      	strb	r2, [r3, #18]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	7c9a      	ldrb	r2, [r3, #18]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	74da      	strb	r2, [r3, #19]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	7cda      	ldrb	r2, [r3, #19]
	      (const u_char *) f->term_reason, f->term_reason_len);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6899      	ldr	r1, [r3, #8]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	7e1b      	ldrb	r3, [r3, #24]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800dc62:	9300      	str	r3, [sp, #0]
 800dc64:	460b      	mov	r3, r1
 800dc66:	2105      	movs	r1, #5
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 fdb5 	bl	800e7d8 <fsm_sdata>

    if (f->retransmits == 0) {
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	7d1b      	ldrb	r3, [r3, #20]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d112      	bne.n	800dc9c <terminate_layer+0x98>
	/*
	 * User asked for no terminate requests at all; just close it.
	 * We've already fired off one Terminate-Request just to be nice
	 * to the peer, but we're not going to wait for a reply.
	 */
	f->state = nextstate == PPP_FSM_CLOSING ? PPP_FSM_CLOSED : PPP_FSM_STOPPED;
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	2b04      	cmp	r3, #4
 800dc7a:	d101      	bne.n	800dc80 <terminate_layer+0x7c>
 800dc7c:	2202      	movs	r2, #2
 800dc7e:	e000      	b.n	800dc82 <terminate_layer+0x7e>
 800dc80:	2203      	movs	r2, #3
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d020      	beq.n	800dcd2 <terminate_layer+0xce>
	    (*f->callbacks->finished)(f);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	4798      	blx	r3
	return;
 800dc9a:	e01a      	b.n	800dcd2 <terminate_layer+0xce>
    }

    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800dc9c:	6879      	ldr	r1, [r7, #4]
 800dc9e:	480f      	ldr	r0, [pc, #60]	; (800dcdc <terminate_layer+0xd8>)
 800dca0:	f7ff fc64 	bl	800d56c <sys_untimeout>
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	7b9b      	ldrb	r3, [r3, #14]
 800dca8:	461a      	mov	r2, r3
 800dcaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dcae:	fb03 f302 	mul.w	r3, r3, r2
 800dcb2:	687a      	ldr	r2, [r7, #4]
 800dcb4:	4909      	ldr	r1, [pc, #36]	; (800dcdc <terminate_layer+0xd8>)
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7ff fc2c 	bl	800d514 <sys_timeout>
    --f->retransmits;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	7d1b      	ldrb	r3, [r3, #20]
 800dcc0:	3b01      	subs	r3, #1
 800dcc2:	b2da      	uxtb	r2, r3
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	751a      	strb	r2, [r3, #20]

    f->state = nextstate;
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	b2da      	uxtb	r2, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	741a      	strb	r2, [r3, #16]
 800dcd0:	e000      	b.n	800dcd4 <terminate_layer+0xd0>
	return;
 800dcd2:	bf00      	nop
}
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	0800dd79 	.word	0x0800dd79

0800dce0 <fsm_close>:
 * fsm_close - Start closing connection.
 *
 * Cancel timeouts and either initiate close or possibly go directly to
 * the PPP_FSM_CLOSED state.
 */
void fsm_close(fsm *f, const char *reason) {
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
    f->term_reason = reason;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	683a      	ldr	r2, [r7, #0]
 800dcee:	609a      	str	r2, [r3, #8]
    f->term_reason_len = (reason == NULL? 0: (u8_t)LWIP_MIN(strlen(reason), 0xFF) );
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d00d      	beq.n	800dd12 <fsm_close+0x32>
 800dcf6:	6838      	ldr	r0, [r7, #0]
 800dcf8:	f7f2 fa74 	bl	80001e4 <strlen>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2bfe      	cmp	r3, #254	; 0xfe
 800dd00:	d805      	bhi.n	800dd0e <fsm_close+0x2e>
 800dd02:	6838      	ldr	r0, [r7, #0]
 800dd04:	f7f2 fa6e 	bl	80001e4 <strlen>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	e002      	b.n	800dd14 <fsm_close+0x34>
 800dd0e:	23ff      	movs	r3, #255	; 0xff
 800dd10:	e000      	b.n	800dd14 <fsm_close+0x34>
 800dd12:	2300      	movs	r3, #0
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	7613      	strb	r3, [r2, #24]
    switch( f->state ){
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	7c1b      	ldrb	r3, [r3, #16]
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	2b08      	cmp	r3, #8
 800dd20:	d825      	bhi.n	800dd6e <fsm_close+0x8e>
 800dd22:	a201      	add	r2, pc, #4	; (adr r2, 800dd28 <fsm_close+0x48>)
 800dd24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd28:	0800dd4d 	.word	0x0800dd4d
 800dd2c:	0800dd6f 	.word	0x0800dd6f
 800dd30:	0800dd55 	.word	0x0800dd55
 800dd34:	0800dd6f 	.word	0x0800dd6f
 800dd38:	0800dd5d 	.word	0x0800dd5d
 800dd3c:	0800dd65 	.word	0x0800dd65
 800dd40:	0800dd65 	.word	0x0800dd65
 800dd44:	0800dd65 	.word	0x0800dd65
 800dd48:	0800dd65 	.word	0x0800dd65
    case PPP_FSM_STARTING:
	f->state = PPP_FSM_INITIAL;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	741a      	strb	r2, [r3, #16]
	break;
 800dd52:	e00d      	b.n	800dd70 <fsm_close+0x90>
    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_CLOSED;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2202      	movs	r2, #2
 800dd58:	741a      	strb	r2, [r3, #16]
	break;
 800dd5a:	e009      	b.n	800dd70 <fsm_close+0x90>
    case PPP_FSM_STOPPING:
	f->state = PPP_FSM_CLOSING;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2204      	movs	r2, #4
 800dd60:	741a      	strb	r2, [r3, #16]
	break;
 800dd62:	e005      	b.n	800dd70 <fsm_close+0x90>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
    case PPP_FSM_OPENED:
	terminate_layer(f, PPP_FSM_CLOSING);
 800dd64:	2104      	movs	r1, #4
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f7ff ff4c 	bl	800dc04 <terminate_layer>
	break;
 800dd6c:	e000      	b.n	800dd70 <fsm_close+0x90>
    default:
	break;
 800dd6e:	bf00      	nop
    }
}
 800dd70:	bf00      	nop
 800dd72:	3708      	adds	r7, #8
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <fsm_timeout>:


/*
 * fsm_timeout - Timeout expired.
 */
static void fsm_timeout(void *arg) {
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b086      	sub	sp, #24
 800dd7c:	af02      	add	r7, sp, #8
 800dd7e:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm *) arg;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	60fb      	str	r3, [r7, #12]
    ppp_pcb *pcb = f->pcb;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	60bb      	str	r3, [r7, #8]

    switch (f->state) {
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	7c1b      	ldrb	r3, [r3, #16]
 800dd8e:	3b04      	subs	r3, #4
 800dd90:	2b04      	cmp	r3, #4
 800dd92:	f200 8083 	bhi.w	800de9c <fsm_timeout+0x124>
 800dd96:	a201      	add	r2, pc, #4	; (adr r2, 800dd9c <fsm_timeout+0x24>)
 800dd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd9c:	0800ddb1 	.word	0x0800ddb1
 800dda0:	0800ddb1 	.word	0x0800ddb1
 800dda4:	0800de3b 	.word	0x0800de3b
 800dda8:	0800de3b 	.word	0x0800de3b
 800ddac:	0800de3b 	.word	0x0800de3b
    case PPP_FSM_CLOSING:
    case PPP_FSM_STOPPING:
	if( f->retransmits <= 0 ){
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	7d1b      	ldrb	r3, [r3, #20]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d113      	bne.n	800dde0 <fsm_timeout+0x68>
	    /*
	     * We've waited for an ack long enough.  Peer probably heard us.
	     */
	    f->state = (f->state == PPP_FSM_CLOSING)? PPP_FSM_CLOSED: PPP_FSM_STOPPED;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	7c1b      	ldrb	r3, [r3, #16]
 800ddbc:	2b04      	cmp	r3, #4
 800ddbe:	d101      	bne.n	800ddc4 <fsm_timeout+0x4c>
 800ddc0:	2202      	movs	r2, #2
 800ddc2:	e000      	b.n	800ddc6 <fsm_timeout+0x4e>
 800ddc4:	2203      	movs	r2, #3
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	741a      	strb	r2, [r3, #16]
	    if( f->callbacks->finished )
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d060      	beq.n	800de96 <fsm_timeout+0x11e>
		(*f->callbacks->finished)(f);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	685b      	ldr	r3, [r3, #4]
 800ddd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddda:	68f8      	ldr	r0, [r7, #12]
 800dddc:	4798      	blx	r3
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
		      (const u_char *) f->term_reason, f->term_reason_len);
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
	    --f->retransmits;
	}
	break;
 800ddde:	e05a      	b.n	800de96 <fsm_timeout+0x11e>
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	7c9b      	ldrb	r3, [r3, #18]
 800dde4:	3301      	adds	r3, #1
 800dde6:	b2da      	uxtb	r2, r3
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	749a      	strb	r2, [r3, #18]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	7c9a      	ldrb	r2, [r3, #18]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	74da      	strb	r2, [r3, #19]
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	7cda      	ldrb	r2, [r3, #19]
		      (const u_char *) f->term_reason, f->term_reason_len);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	6899      	ldr	r1, [r3, #8]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	7e1b      	ldrb	r3, [r3, #24]
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800de00:	9300      	str	r3, [sp, #0]
 800de02:	460b      	mov	r3, r1
 800de04:	2105      	movs	r1, #5
 800de06:	68f8      	ldr	r0, [r7, #12]
 800de08:	f000 fce6 	bl	800e7d8 <fsm_sdata>
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800de0c:	68f9      	ldr	r1, [r7, #12]
 800de0e:	4825      	ldr	r0, [pc, #148]	; (800dea4 <fsm_timeout+0x12c>)
 800de10:	f7ff fbac 	bl	800d56c <sys_untimeout>
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	7b9b      	ldrb	r3, [r3, #14]
 800de18:	461a      	mov	r2, r3
 800de1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800de1e:	fb03 f302 	mul.w	r3, r3, r2
 800de22:	68fa      	ldr	r2, [r7, #12]
 800de24:	491f      	ldr	r1, [pc, #124]	; (800dea4 <fsm_timeout+0x12c>)
 800de26:	4618      	mov	r0, r3
 800de28:	f7ff fb74 	bl	800d514 <sys_timeout>
	    --f->retransmits;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	7d1b      	ldrb	r3, [r3, #20]
 800de30:	3b01      	subs	r3, #1
 800de32:	b2da      	uxtb	r2, r3
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	751a      	strb	r2, [r3, #20]
	break;
 800de38:	e02d      	b.n	800de96 <fsm_timeout+0x11e>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	if (f->retransmits <= 0) {
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	7d1b      	ldrb	r3, [r3, #20]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d113      	bne.n	800de6a <fsm_timeout+0xf2>
	    ppp_warn(("%s: timeout sending Config-Requests", PROTO_NAME(f)));
	    f->state = PPP_FSM_STOPPED;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2203      	movs	r2, #3
 800de46:	741a      	strb	r2, [r3, #16]
	    if( (f->flags & OPT_PASSIVE) == 0 && f->callbacks->finished )
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	7c5b      	ldrb	r3, [r3, #17]
 800de4c:	f003 0301 	and.w	r3, r3, #1
 800de50:	2b00      	cmp	r3, #0
 800de52:	d122      	bne.n	800de9a <fsm_timeout+0x122>
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d01d      	beq.n	800de9a <fsm_timeout+0x122>
		(*f->callbacks->finished)(f);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de64:	68f8      	ldr	r0, [r7, #12]
 800de66:	4798      	blx	r3
		(*f->callbacks->retransmit)(f);
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
	    if( f->state == PPP_FSM_ACKRCVD )
		f->state = PPP_FSM_REQSENT;
	}
	break;
 800de68:	e017      	b.n	800de9a <fsm_timeout+0x122>
	    if (f->callbacks->retransmit)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de70:	2b00      	cmp	r3, #0
 800de72:	d004      	beq.n	800de7e <fsm_timeout+0x106>
		(*f->callbacks->retransmit)(f);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de7a:	68f8      	ldr	r0, [r7, #12]
 800de7c:	4798      	blx	r3
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
 800de7e:	2101      	movs	r1, #1
 800de80:	68f8      	ldr	r0, [r7, #12]
 800de82:	f000 fbbb 	bl	800e5fc <fsm_sconfreq>
	    if( f->state == PPP_FSM_ACKRCVD )
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	7c1b      	ldrb	r3, [r3, #16]
 800de8a:	2b07      	cmp	r3, #7
 800de8c:	d105      	bne.n	800de9a <fsm_timeout+0x122>
		f->state = PPP_FSM_REQSENT;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	2206      	movs	r2, #6
 800de92:	741a      	strb	r2, [r3, #16]
	break;
 800de94:	e001      	b.n	800de9a <fsm_timeout+0x122>
	break;
 800de96:	bf00      	nop
 800de98:	e000      	b.n	800de9c <fsm_timeout+0x124>
	break;
 800de9a:	bf00      	nop

    default:
	FSMDEBUG(("%s: Timeout event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800de9c:	bf00      	nop
 800de9e:	3710      	adds	r7, #16
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}
 800dea4:	0800dd79 	.word	0x0800dd79

0800dea8 <fsm_input>:


/*
 * fsm_input - Input packet.
 */
void fsm_input(fsm *f, u_char *inpacket, int l) {
 800dea8:	b590      	push	{r4, r7, lr}
 800deaa:	b08b      	sub	sp, #44	; 0x2c
 800deac:	af02      	add	r7, sp, #8
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	60b9      	str	r1, [r7, #8]
 800deb2:	607a      	str	r2, [r7, #4]

    /*
     * Parse header (code, id and length).
     * If packet too short, drop it.
     */
    inp = inpacket;
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	61fb      	str	r3, [r7, #28]
    if (l < HEADERLEN) {
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2b03      	cmp	r3, #3
 800debc:	f340 808c 	ble.w	800dfd8 <fsm_input+0x130>
	FSMDEBUG(("fsm_input(%x): Rcvd short header.", f->protocol));
	return;
    }
    GETCHAR(code, inp);
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	1c5a      	adds	r2, r3, #1
 800dec4:	61fa      	str	r2, [r7, #28]
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	76fb      	strb	r3, [r7, #27]
    GETCHAR(id, inp);
 800deca:	69fb      	ldr	r3, [r7, #28]
 800decc:	1c5a      	adds	r2, r3, #1
 800dece:	61fa      	str	r2, [r7, #28]
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	76bb      	strb	r3, [r7, #26]
    GETSHORT(len, inp);
 800ded4:	69fb      	ldr	r3, [r7, #28]
 800ded6:	1c5a      	adds	r2, r3, #1
 800ded8:	61fa      	str	r2, [r7, #28]
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	021b      	lsls	r3, r3, #8
 800dede:	617b      	str	r3, [r7, #20]
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	1c5a      	adds	r2, r3, #1
 800dee4:	61fa      	str	r2, [r7, #28]
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	461a      	mov	r2, r3
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	4313      	orrs	r3, r2
 800deee:	617b      	str	r3, [r7, #20]
    if (len < HEADERLEN) {
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	2b03      	cmp	r3, #3
 800def4:	dd72      	ble.n	800dfdc <fsm_input+0x134>
	FSMDEBUG(("fsm_input(%x): Rcvd illegal length.", f->protocol));
	return;
    }
    if (len > l) {
 800def6:	697a      	ldr	r2, [r7, #20]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	429a      	cmp	r2, r3
 800defc:	dc70      	bgt.n	800dfe0 <fsm_input+0x138>
	FSMDEBUG(("fsm_input(%x): Rcvd short packet.", f->protocol));
	return;
    }
    len -= HEADERLEN;		/* subtract header length */
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	3b04      	subs	r3, #4
 800df02:	617b      	str	r3, [r7, #20]

    if( f->state == PPP_FSM_INITIAL || f->state == PPP_FSM_STARTING ){
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	7c1b      	ldrb	r3, [r3, #16]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d06b      	beq.n	800dfe4 <fsm_input+0x13c>
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	7c1b      	ldrb	r3, [r3, #16]
 800df10:	2b01      	cmp	r3, #1
 800df12:	d067      	beq.n	800dfe4 <fsm_input+0x13c>
    }

    /*
     * Action depends on code.
     */
    switch (code) {
 800df14:	7efb      	ldrb	r3, [r7, #27]
 800df16:	3b01      	subs	r3, #1
 800df18:	2b06      	cmp	r3, #6
 800df1a:	d839      	bhi.n	800df90 <fsm_input+0xe8>
 800df1c:	a201      	add	r2, pc, #4	; (adr r2, 800df24 <fsm_input+0x7c>)
 800df1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df22:	bf00      	nop
 800df24:	0800df41 	.word	0x0800df41
 800df28:	0800df4f 	.word	0x0800df4f
 800df2c:	0800df5d 	.word	0x0800df5d
 800df30:	0800df5d 	.word	0x0800df5d
 800df34:	0800df6f 	.word	0x0800df6f
 800df38:	0800df7d 	.word	0x0800df7d
 800df3c:	0800df85 	.word	0x0800df85
    case CONFREQ:
	fsm_rconfreq(f, id, inp, len);
 800df40:	7eb9      	ldrb	r1, [r7, #26]
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	69fa      	ldr	r2, [r7, #28]
 800df46:	68f8      	ldr	r0, [r7, #12]
 800df48:	f000 f852 	bl	800dff0 <fsm_rconfreq>
	break;
 800df4c:	e04d      	b.n	800dfea <fsm_input+0x142>
    
    case CONFACK:
	fsm_rconfack(f, id, inp, len);
 800df4e:	7eb9      	ldrb	r1, [r7, #26]
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	69fa      	ldr	r2, [r7, #28]
 800df54:	68f8      	ldr	r0, [r7, #12]
 800df56:	f000 f8f1 	bl	800e13c <fsm_rconfack>
	break;
 800df5a:	e046      	b.n	800dfea <fsm_input+0x142>
    
    case CONFNAK:
    case CONFREJ:
	fsm_rconfnakrej(f, code, id, inp, len);
 800df5c:	7ef9      	ldrb	r1, [r7, #27]
 800df5e:	7eba      	ldrb	r2, [r7, #26]
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	9300      	str	r3, [sp, #0]
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	68f8      	ldr	r0, [r7, #12]
 800df68:	f000 f988 	bl	800e27c <fsm_rconfnakrej>
	break;
 800df6c:	e03d      	b.n	800dfea <fsm_input+0x142>
    
    case TERMREQ:
	fsm_rtermreq(f, id, inp, len);
 800df6e:	7eb9      	ldrb	r1, [r7, #26]
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	69fa      	ldr	r2, [r7, #28]
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	f000 fa2b 	bl	800e3d0 <fsm_rtermreq>
	break;
 800df7a:	e036      	b.n	800dfea <fsm_input+0x142>
    
    case TERMACK:
	fsm_rtermack(f);
 800df7c:	68f8      	ldr	r0, [r7, #12]
 800df7e:	f000 fa6f 	bl	800e460 <fsm_rtermack>
	break;
 800df82:	e032      	b.n	800dfea <fsm_input+0x142>
    
    case CODEREJ:
	fsm_rcoderej(f, inp, len);
 800df84:	697a      	ldr	r2, [r7, #20]
 800df86:	69f9      	ldr	r1, [r7, #28]
 800df88:	68f8      	ldr	r0, [r7, #12]
 800df8a:	f000 fac7 	bl	800e51c <fsm_rcoderej>
	break;
 800df8e:	e02c      	b.n	800dfea <fsm_input+0x142>
    
    default:
	if( !f->callbacks->extcode
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df96:	2b00      	cmp	r3, #0
 800df98:	d00c      	beq.n	800dfb4 <fsm_input+0x10c>
	   || !(*f->callbacks->extcode)(f, code, id, inp, len) )
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800dfa0:	7ef9      	ldrb	r1, [r7, #27]
 800dfa2:	7eba      	ldrb	r2, [r7, #26]
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	9300      	str	r3, [sp, #0]
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	68f8      	ldr	r0, [r7, #12]
 800dfac:	47a0      	blx	r4
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d119      	bne.n	800dfe8 <fsm_input+0x140>
	    fsm_sdata(f, CODEREJ, ++f->id, inpacket, len + HEADERLEN);
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	7c9b      	ldrb	r3, [r3, #18]
 800dfb8:	3301      	adds	r3, #1
 800dfba:	b2da      	uxtb	r2, r3
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	749a      	strb	r2, [r3, #18]
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	7c9a      	ldrb	r2, [r3, #18]
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	3304      	adds	r3, #4
 800dfc8:	9300      	str	r3, [sp, #0]
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	2107      	movs	r1, #7
 800dfce:	68f8      	ldr	r0, [r7, #12]
 800dfd0:	f000 fc02 	bl	800e7d8 <fsm_sdata>
	break;
 800dfd4:	bf00      	nop
 800dfd6:	e007      	b.n	800dfe8 <fsm_input+0x140>
	return;
 800dfd8:	bf00      	nop
 800dfda:	e006      	b.n	800dfea <fsm_input+0x142>
	return;
 800dfdc:	bf00      	nop
 800dfde:	e004      	b.n	800dfea <fsm_input+0x142>
	return;
 800dfe0:	bf00      	nop
 800dfe2:	e002      	b.n	800dfea <fsm_input+0x142>
	return;
 800dfe4:	bf00      	nop
 800dfe6:	e000      	b.n	800dfea <fsm_input+0x142>
	break;
 800dfe8:	bf00      	nop
    }
}
 800dfea:	3724      	adds	r7, #36	; 0x24
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd90      	pop	{r4, r7, pc}

0800dff0 <fsm_rconfreq>:


/*
 * fsm_rconfreq - Receive Configure-Request.
 */
static void fsm_rconfreq(fsm *f, u_char id, u_char *inp, int len) {
 800dff0:	b590      	push	{r4, r7, lr}
 800dff2:	b089      	sub	sp, #36	; 0x24
 800dff4:	af02      	add	r7, sp, #8
 800dff6:	60f8      	str	r0, [r7, #12]
 800dff8:	607a      	str	r2, [r7, #4]
 800dffa:	603b      	str	r3, [r7, #0]
 800dffc:	460b      	mov	r3, r1
 800dffe:	72fb      	strb	r3, [r7, #11]
    int code, reject_if_disagree;

    switch( f->state ){
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	7c1b      	ldrb	r3, [r3, #16]
 800e004:	3b02      	subs	r3, #2
 800e006:	2b07      	cmp	r3, #7
 800e008:	d835      	bhi.n	800e076 <fsm_rconfreq+0x86>
 800e00a:	a201      	add	r2, pc, #4	; (adr r2, 800e010 <fsm_rconfreq+0x20>)
 800e00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e010:	0800e031 	.word	0x0800e031
 800e014:	0800e067 	.word	0x0800e067
 800e018:	0800e12f 	.word	0x0800e12f
 800e01c:	0800e12f 	.word	0x0800e12f
 800e020:	0800e077 	.word	0x0800e077
 800e024:	0800e077 	.word	0x0800e077
 800e028:	0800e077 	.word	0x0800e077
 800e02c:	0800e043 	.word	0x0800e043
    case PPP_FSM_CLOSED:
	/* Go away, we're closed */
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800e030:	7afa      	ldrb	r2, [r7, #11]
 800e032:	2300      	movs	r3, #0
 800e034:	9300      	str	r3, [sp, #0]
 800e036:	2300      	movs	r3, #0
 800e038:	2106      	movs	r1, #6
 800e03a:	68f8      	ldr	r0, [r7, #12]
 800e03c:	f000 fbcc 	bl	800e7d8 <fsm_sdata>
	return;
 800e040:	e076      	b.n	800e130 <fsm_rconfreq+0x140>
    case PPP_FSM_STOPPING:
	return;

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if( f->callbacks->down )
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	6a1b      	ldr	r3, [r3, #32]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d004      	beq.n	800e056 <fsm_rconfreq+0x66>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	6a1b      	ldr	r3, [r3, #32]
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800e056:	2100      	movs	r1, #0
 800e058:	68f8      	ldr	r0, [r7, #12]
 800e05a:	f000 facf 	bl	800e5fc <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	2206      	movs	r2, #6
 800e062:	741a      	strb	r2, [r3, #16]
	break;
 800e064:	e008      	b.n	800e078 <fsm_rconfreq+0x88>

    case PPP_FSM_STOPPED:
	/* Negotiation started by our peer */
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800e066:	2100      	movs	r1, #0
 800e068:	68f8      	ldr	r0, [r7, #12]
 800e06a:	f000 fac7 	bl	800e5fc <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2206      	movs	r2, #6
 800e072:	741a      	strb	r2, [r3, #16]
	break;
 800e074:	e000      	b.n	800e078 <fsm_rconfreq+0x88>
    default:
	break;
 800e076:	bf00      	nop

    /*
     * Pass the requested configuration options
     * to protocol-specific code for checking.
     */
    if (f->callbacks->reqci){		/* Check CI */
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	699b      	ldr	r3, [r3, #24]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d013      	beq.n	800e0aa <fsm_rconfreq+0xba>
	reject_if_disagree = (f->nakloops >= f->maxnakloops);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	7d5a      	ldrb	r2, [r3, #21]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	7ddb      	ldrb	r3, [r3, #23]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	bf2c      	ite	cs
 800e08e:	2301      	movcs	r3, #1
 800e090:	2300      	movcc	r3, #0
 800e092:	b2db      	uxtb	r3, r3
 800e094:	613b      	str	r3, [r7, #16]
	code = (*f->callbacks->reqci)(f, inp, &len, reject_if_disagree);
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	685b      	ldr	r3, [r3, #4]
 800e09a:	699c      	ldr	r4, [r3, #24]
 800e09c:	463a      	mov	r2, r7
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	6879      	ldr	r1, [r7, #4]
 800e0a2:	68f8      	ldr	r0, [r7, #12]
 800e0a4:	47a0      	blx	r4
 800e0a6:	6178      	str	r0, [r7, #20]
 800e0a8:	e007      	b.n	800e0ba <fsm_rconfreq+0xca>
    } else if (len)
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d002      	beq.n	800e0b6 <fsm_rconfreq+0xc6>
	code = CONFREJ;			/* Reject all CI */
 800e0b0:	2304      	movs	r3, #4
 800e0b2:	617b      	str	r3, [r7, #20]
 800e0b4:	e001      	b.n	800e0ba <fsm_rconfreq+0xca>
    else
	code = CONFACK;
 800e0b6:	2302      	movs	r3, #2
 800e0b8:	617b      	str	r3, [r7, #20]

    /* send the Ack, Nak or Rej to the peer */
    fsm_sdata(f, code, id, inp, len);
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	b2d9      	uxtb	r1, r3
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	7afa      	ldrb	r2, [r7, #11]
 800e0c2:	9300      	str	r3, [sp, #0]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	68f8      	ldr	r0, [r7, #12]
 800e0c8:	f000 fb86 	bl	800e7d8 <fsm_sdata>

    if (code == CONFACK) {
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	2b02      	cmp	r3, #2
 800e0d0:	d11c      	bne.n	800e10c <fsm_rconfreq+0x11c>
	if (f->state == PPP_FSM_ACKRCVD) {
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	7c1b      	ldrb	r3, [r3, #16]
 800e0d6:	2b07      	cmp	r3, #7
 800e0d8:	d111      	bne.n	800e0fe <fsm_rconfreq+0x10e>
	    UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e0da:	68f9      	ldr	r1, [r7, #12]
 800e0dc:	4816      	ldr	r0, [pc, #88]	; (800e138 <fsm_rconfreq+0x148>)
 800e0de:	f7ff fa45 	bl	800d56c <sys_untimeout>
	    f->state = PPP_FSM_OPENED;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2209      	movs	r2, #9
 800e0e6:	741a      	strb	r2, [r3, #16]
	    if (f->callbacks->up)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	69db      	ldr	r3, [r3, #28]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d008      	beq.n	800e104 <fsm_rconfreq+0x114>
		(*f->callbacks->up)(f);	/* Inform upper layers */
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	69db      	ldr	r3, [r3, #28]
 800e0f8:	68f8      	ldr	r0, [r7, #12]
 800e0fa:	4798      	blx	r3
 800e0fc:	e002      	b.n	800e104 <fsm_rconfreq+0x114>
	} else
	    f->state = PPP_FSM_ACKSENT;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2208      	movs	r2, #8
 800e102:	741a      	strb	r2, [r3, #16]
	f->nakloops = 0;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2200      	movs	r2, #0
 800e108:	755a      	strb	r2, [r3, #21]
 800e10a:	e011      	b.n	800e130 <fsm_rconfreq+0x140>

    } else {
	/* we sent CONFACK or CONFREJ */
	if (f->state != PPP_FSM_ACKRCVD)
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	7c1b      	ldrb	r3, [r3, #16]
 800e110:	2b07      	cmp	r3, #7
 800e112:	d002      	beq.n	800e11a <fsm_rconfreq+0x12a>
	    f->state = PPP_FSM_REQSENT;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2206      	movs	r2, #6
 800e118:	741a      	strb	r2, [r3, #16]
	if( code == CONFNAK )
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	2b03      	cmp	r3, #3
 800e11e:	d107      	bne.n	800e130 <fsm_rconfreq+0x140>
	    ++f->nakloops;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	7d5b      	ldrb	r3, [r3, #21]
 800e124:	3301      	adds	r3, #1
 800e126:	b2da      	uxtb	r2, r3
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	755a      	strb	r2, [r3, #21]
 800e12c:	e000      	b.n	800e130 <fsm_rconfreq+0x140>
	return;
 800e12e:	bf00      	nop
    }
}
 800e130:	371c      	adds	r7, #28
 800e132:	46bd      	mov	sp, r7
 800e134:	bd90      	pop	{r4, r7, pc}
 800e136:	bf00      	nop
 800e138:	0800dd79 	.word	0x0800dd79

0800e13c <fsm_rconfack>:


/*
 * fsm_rconfack - Receive Configure-Ack.
 */
static void fsm_rconfack(fsm *f, int id, u_char *inp, int len) {
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b088      	sub	sp, #32
 800e140:	af02      	add	r7, sp, #8
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	60b9      	str	r1, [r7, #8]
 800e146:	607a      	str	r2, [r7, #4]
 800e148:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	617b      	str	r3, [r7, #20]

    if (id != f->reqid || f->seen_ack)		/* Expected id? */
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	7cdb      	ldrb	r3, [r3, #19]
 800e154:	461a      	mov	r2, r3
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	429a      	cmp	r2, r3
 800e15a:	f040 8083 	bne.w	800e264 <fsm_rconfack+0x128>
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	7b1b      	ldrb	r3, [r3, #12]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d17e      	bne.n	800e264 <fsm_rconfack+0x128>
	return;					/* Nope, toss... */
    if( !(f->callbacks->ackci? (*f->callbacks->ackci)(f, inp, len):
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	68db      	ldr	r3, [r3, #12]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d00d      	beq.n	800e18c <fsm_rconfack+0x50>
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	68db      	ldr	r3, [r3, #12]
 800e176:	683a      	ldr	r2, [r7, #0]
 800e178:	6879      	ldr	r1, [r7, #4]
 800e17a:	68f8      	ldr	r0, [r7, #12]
 800e17c:	4798      	blx	r3
 800e17e:	4603      	mov	r3, r0
 800e180:	2b00      	cmp	r3, #0
 800e182:	bf0c      	ite	eq
 800e184:	2301      	moveq	r3, #1
 800e186:	2300      	movne	r3, #0
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	e005      	b.n	800e198 <fsm_rconfack+0x5c>
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	bf14      	ite	ne
 800e192:	2301      	movne	r3, #1
 800e194:	2300      	moveq	r3, #0
 800e196:	b2db      	uxtb	r3, r3
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d165      	bne.n	800e268 <fsm_rconfack+0x12c>
	  (len == 0)) ){
	/* Ack is bad - ignore it */
	ppp_error(("Received bad configure-ack: %P", inp, len));
	return;
    }
    f->seen_ack = 1;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2201      	movs	r2, #1
 800e1a0:	731a      	strb	r2, [r3, #12]
    f->rnakloops = 0;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	759a      	strb	r2, [r3, #22]

    switch (f->state) {
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	7c1b      	ldrb	r3, [r3, #16]
 800e1ac:	3b02      	subs	r3, #2
 800e1ae:	2b07      	cmp	r3, #7
 800e1b0:	d85c      	bhi.n	800e26c <fsm_rconfack+0x130>
 800e1b2:	a201      	add	r2, pc, #4	; (adr r2, 800e1b8 <fsm_rconfack+0x7c>)
 800e1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b8:	0800e1d9 	.word	0x0800e1d9
 800e1bc:	0800e1d9 	.word	0x0800e1d9
 800e1c0:	0800e26d 	.word	0x0800e26d
 800e1c4:	0800e26d 	.word	0x0800e26d
 800e1c8:	0800e1ed 	.word	0x0800e1ed
 800e1cc:	0800e1fd 	.word	0x0800e1fd
 800e1d0:	0800e215 	.word	0x0800e215
 800e1d4:	0800e241 	.word	0x0800e241
    case PPP_FSM_CLOSED:
    case PPP_FSM_STOPPED:
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	b2da      	uxtb	r2, r3
 800e1dc:	2300      	movs	r3, #0
 800e1de:	9300      	str	r3, [sp, #0]
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	2106      	movs	r1, #6
 800e1e4:	68f8      	ldr	r0, [r7, #12]
 800e1e6:	f000 faf7 	bl	800e7d8 <fsm_sdata>
	break;
 800e1ea:	e042      	b.n	800e272 <fsm_rconfack+0x136>

    case PPP_FSM_REQSENT:
	f->state = PPP_FSM_ACKRCVD;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2207      	movs	r2, #7
 800e1f0:	741a      	strb	r2, [r3, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	7bda      	ldrb	r2, [r3, #15]
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	751a      	strb	r2, [r3, #20]
	break;
 800e1fa:	e03a      	b.n	800e272 <fsm_rconfack+0x136>

    case PPP_FSM_ACKRCVD:
	/* Huh? an extra valid Ack? oh well... */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e1fc:	68f9      	ldr	r1, [r7, #12]
 800e1fe:	481e      	ldr	r0, [pc, #120]	; (800e278 <fsm_rconfack+0x13c>)
 800e200:	f7ff f9b4 	bl	800d56c <sys_untimeout>
	fsm_sconfreq(f, 0);
 800e204:	2100      	movs	r1, #0
 800e206:	68f8      	ldr	r0, [r7, #12]
 800e208:	f000 f9f8 	bl	800e5fc <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2206      	movs	r2, #6
 800e210:	741a      	strb	r2, [r3, #16]
	break;
 800e212:	e02e      	b.n	800e272 <fsm_rconfack+0x136>

    case PPP_FSM_ACKSENT:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e214:	68f9      	ldr	r1, [r7, #12]
 800e216:	4818      	ldr	r0, [pc, #96]	; (800e278 <fsm_rconfack+0x13c>)
 800e218:	f7ff f9a8 	bl	800d56c <sys_untimeout>
	f->state = PPP_FSM_OPENED;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	2209      	movs	r2, #9
 800e220:	741a      	strb	r2, [r3, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	7bda      	ldrb	r2, [r3, #15]
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	751a      	strb	r2, [r3, #20]
	if (f->callbacks->up)
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	69db      	ldr	r3, [r3, #28]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d01d      	beq.n	800e270 <fsm_rconfack+0x134>
	    (*f->callbacks->up)(f);	/* Inform upper layers */
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	69db      	ldr	r3, [r3, #28]
 800e23a:	68f8      	ldr	r0, [r7, #12]
 800e23c:	4798      	blx	r3
	break;
 800e23e:	e017      	b.n	800e270 <fsm_rconfack+0x134>

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if (f->callbacks->down)
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	6a1b      	ldr	r3, [r3, #32]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d004      	beq.n	800e254 <fsm_rconfack+0x118>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	6a1b      	ldr	r3, [r3, #32]
 800e250:	68f8      	ldr	r0, [r7, #12]
 800e252:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800e254:	2100      	movs	r1, #0
 800e256:	68f8      	ldr	r0, [r7, #12]
 800e258:	f000 f9d0 	bl	800e5fc <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	2206      	movs	r2, #6
 800e260:	741a      	strb	r2, [r3, #16]
	break;
 800e262:	e006      	b.n	800e272 <fsm_rconfack+0x136>
	return;					/* Nope, toss... */
 800e264:	bf00      	nop
 800e266:	e004      	b.n	800e272 <fsm_rconfack+0x136>
	return;
 800e268:	bf00      	nop
 800e26a:	e002      	b.n	800e272 <fsm_rconfack+0x136>
    default:
	break;
 800e26c:	bf00      	nop
 800e26e:	e000      	b.n	800e272 <fsm_rconfack+0x136>
	break;
 800e270:	bf00      	nop
    }
}
 800e272:	3718      	adds	r7, #24
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	0800dd79 	.word	0x0800dd79

0800e27c <fsm_rconfnakrej>:


/*
 * fsm_rconfnakrej - Receive Configure-Nak or Configure-Reject.
 */
static void fsm_rconfnakrej(fsm *f, int code, int id, u_char *inp, int len) {
 800e27c:	b590      	push	{r4, r7, lr}
 800e27e:	b089      	sub	sp, #36	; 0x24
 800e280:	af02      	add	r7, sp, #8
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	60b9      	str	r1, [r7, #8]
 800e286:	607a      	str	r2, [r7, #4]
 800e288:	603b      	str	r3, [r7, #0]
    int ret;
    int treat_as_reject;

    if (id != f->reqid || f->seen_ack)	/* Expected id? */
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	7cdb      	ldrb	r3, [r3, #19]
 800e28e:	461a      	mov	r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	429a      	cmp	r2, r3
 800e294:	f040 8090 	bne.w	800e3b8 <fsm_rconfnakrej+0x13c>
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	7b1b      	ldrb	r3, [r3, #12]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	f040 808b 	bne.w	800e3b8 <fsm_rconfnakrej+0x13c>
	return;				/* Nope, toss... */

    if (code == CONFNAK) {
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	2b03      	cmp	r3, #3
 800e2a6:	d121      	bne.n	800e2ec <fsm_rconfnakrej+0x70>
	++f->rnakloops;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	7d9b      	ldrb	r3, [r3, #22]
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	b2da      	uxtb	r2, r3
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	759a      	strb	r2, [r3, #22]
	treat_as_reject = (f->rnakloops >= f->maxnakloops);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	7d9a      	ldrb	r2, [r3, #22]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	7ddb      	ldrb	r3, [r3, #23]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	bf2c      	ite	cs
 800e2c0:	2301      	movcs	r3, #1
 800e2c2:	2300      	movcc	r3, #0
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	613b      	str	r3, [r7, #16]
	if (f->callbacks->nakci == NULL
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	691b      	ldr	r3, [r3, #16]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d074      	beq.n	800e3bc <fsm_rconfnakrej+0x140>
	    || !(ret = f->callbacks->nakci(f, inp, len, treat_as_reject))) {
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	685b      	ldr	r3, [r3, #4]
 800e2d6:	691c      	ldr	r4, [r3, #16]
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2dc:	6839      	ldr	r1, [r7, #0]
 800e2de:	68f8      	ldr	r0, [r7, #12]
 800e2e0:	47a0      	blx	r4
 800e2e2:	6178      	str	r0, [r7, #20]
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d113      	bne.n	800e312 <fsm_rconfnakrej+0x96>
	    ppp_error(("Received bad configure-nak: %P", inp, len));
	    return;
 800e2ea:	e067      	b.n	800e3bc <fsm_rconfnakrej+0x140>
	}
    } else {
	f->rnakloops = 0;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	759a      	strb	r2, [r3, #22]
	if (f->callbacks->rejci == NULL
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	695b      	ldr	r3, [r3, #20]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d061      	beq.n	800e3c0 <fsm_rconfnakrej+0x144>
	    || !(ret = f->callbacks->rejci(f, inp, len))) {
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	695b      	ldr	r3, [r3, #20]
 800e302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e304:	6839      	ldr	r1, [r7, #0]
 800e306:	68f8      	ldr	r0, [r7, #12]
 800e308:	4798      	blx	r3
 800e30a:	6178      	str	r0, [r7, #20]
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d056      	beq.n	800e3c0 <fsm_rconfnakrej+0x144>
	    ppp_error(("Received bad configure-rej: %P", inp, len));
	    return;
	}
    }

    f->seen_ack = 1;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2201      	movs	r2, #1
 800e316:	731a      	strb	r2, [r3, #12]

    switch (f->state) {
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	7c1b      	ldrb	r3, [r3, #16]
 800e31c:	3b02      	subs	r3, #2
 800e31e:	2b07      	cmp	r3, #7
 800e320:	d850      	bhi.n	800e3c4 <fsm_rconfnakrej+0x148>
 800e322:	a201      	add	r2, pc, #4	; (adr r2, 800e328 <fsm_rconfnakrej+0xac>)
 800e324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e328:	0800e349 	.word	0x0800e349
 800e32c:	0800e349 	.word	0x0800e349
 800e330:	0800e3c5 	.word	0x0800e3c5
 800e334:	0800e3c5 	.word	0x0800e3c5
 800e338:	0800e35d 	.word	0x0800e35d
 800e33c:	0800e37d 	.word	0x0800e37d
 800e340:	0800e35d 	.word	0x0800e35d
 800e344:	0800e395 	.word	0x0800e395
    case PPP_FSM_CLOSED:
    case PPP_FSM_STOPPED:
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	b2da      	uxtb	r2, r3
 800e34c:	2300      	movs	r3, #0
 800e34e:	9300      	str	r3, [sp, #0]
 800e350:	2300      	movs	r3, #0
 800e352:	2106      	movs	r1, #6
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	f000 fa3f 	bl	800e7d8 <fsm_sdata>
	break;
 800e35a:	e034      	b.n	800e3c6 <fsm_rconfnakrej+0x14a>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKSENT:
	/* They didn't agree to what we wanted - try another request */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e35c:	68f9      	ldr	r1, [r7, #12]
 800e35e:	481b      	ldr	r0, [pc, #108]	; (800e3cc <fsm_rconfnakrej+0x150>)
 800e360:	f7ff f904 	bl	800d56c <sys_untimeout>
	if (ret < 0)
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	2b00      	cmp	r3, #0
 800e368:	da03      	bge.n	800e372 <fsm_rconfnakrej+0xf6>
	    f->state = PPP_FSM_STOPPED;		/* kludge for stopping CCP */
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	2203      	movs	r2, #3
 800e36e:	741a      	strb	r2, [r3, #16]
	else
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
	break;
 800e370:	e029      	b.n	800e3c6 <fsm_rconfnakrej+0x14a>
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
 800e372:	2100      	movs	r1, #0
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	f000 f941 	bl	800e5fc <fsm_sconfreq>
	break;
 800e37a:	e024      	b.n	800e3c6 <fsm_rconfnakrej+0x14a>

    case PPP_FSM_ACKRCVD:
	/* Got a Nak/reject when we had already had an Ack?? oh well... */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e37c:	68f9      	ldr	r1, [r7, #12]
 800e37e:	4813      	ldr	r0, [pc, #76]	; (800e3cc <fsm_rconfnakrej+0x150>)
 800e380:	f7ff f8f4 	bl	800d56c <sys_untimeout>
	fsm_sconfreq(f, 0);
 800e384:	2100      	movs	r1, #0
 800e386:	68f8      	ldr	r0, [r7, #12]
 800e388:	f000 f938 	bl	800e5fc <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2206      	movs	r2, #6
 800e390:	741a      	strb	r2, [r3, #16]
	break;
 800e392:	e018      	b.n	800e3c6 <fsm_rconfnakrej+0x14a>

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if (f->callbacks->down)
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	6a1b      	ldr	r3, [r3, #32]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d004      	beq.n	800e3a8 <fsm_rconfnakrej+0x12c>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	685b      	ldr	r3, [r3, #4]
 800e3a2:	6a1b      	ldr	r3, [r3, #32]
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800e3a8:	2100      	movs	r1, #0
 800e3aa:	68f8      	ldr	r0, [r7, #12]
 800e3ac:	f000 f926 	bl	800e5fc <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2206      	movs	r2, #6
 800e3b4:	741a      	strb	r2, [r3, #16]
	break;
 800e3b6:	e006      	b.n	800e3c6 <fsm_rconfnakrej+0x14a>
	return;				/* Nope, toss... */
 800e3b8:	bf00      	nop
 800e3ba:	e004      	b.n	800e3c6 <fsm_rconfnakrej+0x14a>
	    return;
 800e3bc:	bf00      	nop
 800e3be:	e002      	b.n	800e3c6 <fsm_rconfnakrej+0x14a>
	    return;
 800e3c0:	bf00      	nop
 800e3c2:	e000      	b.n	800e3c6 <fsm_rconfnakrej+0x14a>
    default:
	break;
 800e3c4:	bf00      	nop
    }
}
 800e3c6:	371c      	adds	r7, #28
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd90      	pop	{r4, r7, pc}
 800e3cc:	0800dd79 	.word	0x0800dd79

0800e3d0 <fsm_rtermreq>:


/*
 * fsm_rtermreq - Receive Terminate-Req.
 */
static void fsm_rtermreq(fsm *f, int id, u_char *p, int len) {
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b088      	sub	sp, #32
 800e3d4:	af02      	add	r7, sp, #8
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	607a      	str	r2, [r7, #4]
 800e3dc:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	617b      	str	r3, [r7, #20]

    switch (f->state) {
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	7c1b      	ldrb	r3, [r3, #16]
 800e3e8:	2b07      	cmp	r3, #7
 800e3ea:	db29      	blt.n	800e440 <fsm_rtermreq+0x70>
 800e3ec:	2b08      	cmp	r3, #8
 800e3ee:	dd02      	ble.n	800e3f6 <fsm_rtermreq+0x26>
 800e3f0:	2b09      	cmp	r3, #9
 800e3f2:	d004      	beq.n	800e3fe <fsm_rtermreq+0x2e>
	if (f->callbacks->down)
	    (*f->callbacks->down)(f);	/* Inform upper layers */
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
	break;
    default:
	break;
 800e3f4:	e024      	b.n	800e440 <fsm_rtermreq+0x70>
	f->state = PPP_FSM_REQSENT;		/* Start over but keep trying */
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2206      	movs	r2, #6
 800e3fa:	741a      	strb	r2, [r3, #16]
	break;
 800e3fc:	e021      	b.n	800e442 <fsm_rtermreq+0x72>
	f->retransmits = 0;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2200      	movs	r2, #0
 800e402:	751a      	strb	r2, [r3, #20]
	f->state = PPP_FSM_STOPPING;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2205      	movs	r2, #5
 800e408:	741a      	strb	r2, [r3, #16]
	if (f->callbacks->down)
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	6a1b      	ldr	r3, [r3, #32]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d004      	beq.n	800e41e <fsm_rtermreq+0x4e>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	685b      	ldr	r3, [r3, #4]
 800e418:	6a1b      	ldr	r3, [r3, #32]
 800e41a:	68f8      	ldr	r0, [r7, #12]
 800e41c:	4798      	blx	r3
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800e41e:	68f9      	ldr	r1, [r7, #12]
 800e420:	480e      	ldr	r0, [pc, #56]	; (800e45c <fsm_rtermreq+0x8c>)
 800e422:	f7ff f8a3 	bl	800d56c <sys_untimeout>
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	7b9b      	ldrb	r3, [r3, #14]
 800e42a:	461a      	mov	r2, r3
 800e42c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e430:	fb03 f302 	mul.w	r3, r3, r2
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	4909      	ldr	r1, [pc, #36]	; (800e45c <fsm_rtermreq+0x8c>)
 800e438:	4618      	mov	r0, r3
 800e43a:	f7ff f86b 	bl	800d514 <sys_timeout>
	break;
 800e43e:	e000      	b.n	800e442 <fsm_rtermreq+0x72>
	break;
 800e440:	bf00      	nop
    }

    fsm_sdata(f, TERMACK, id, NULL, 0);
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	b2da      	uxtb	r2, r3
 800e446:	2300      	movs	r3, #0
 800e448:	9300      	str	r3, [sp, #0]
 800e44a:	2300      	movs	r3, #0
 800e44c:	2106      	movs	r1, #6
 800e44e:	68f8      	ldr	r0, [r7, #12]
 800e450:	f000 f9c2 	bl	800e7d8 <fsm_sdata>
}
 800e454:	bf00      	nop
 800e456:	3718      	adds	r7, #24
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}
 800e45c:	0800dd79 	.word	0x0800dd79

0800e460 <fsm_rtermack>:


/*
 * fsm_rtermack - Receive Terminate-Ack.
 */
static void fsm_rtermack(fsm *f) {
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
    switch (f->state) {
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	7c1b      	ldrb	r3, [r3, #16]
 800e46c:	3b04      	subs	r3, #4
 800e46e:	2b05      	cmp	r3, #5
 800e470:	d848      	bhi.n	800e504 <fsm_rtermack+0xa4>
 800e472:	a201      	add	r2, pc, #4	; (adr r2, 800e478 <fsm_rtermack+0x18>)
 800e474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e478:	0800e491 	.word	0x0800e491
 800e47c:	0800e4b5 	.word	0x0800e4b5
 800e480:	0800e505 	.word	0x0800e505
 800e484:	0800e4d9 	.word	0x0800e4d9
 800e488:	0800e505 	.word	0x0800e505
 800e48c:	0800e4e1 	.word	0x0800e4e1
    case PPP_FSM_CLOSING:
	UNTIMEOUT(fsm_timeout, f);
 800e490:	6879      	ldr	r1, [r7, #4]
 800e492:	4821      	ldr	r0, [pc, #132]	; (800e518 <fsm_rtermack+0xb8>)
 800e494:	f7ff f86a 	bl	800d56c <sys_untimeout>
	f->state = PPP_FSM_CLOSED;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2202      	movs	r2, #2
 800e49c:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d02f      	beq.n	800e508 <fsm_rtermack+0xa8>
	    (*f->callbacks->finished)(f);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	4798      	blx	r3
	break;
 800e4b2:	e029      	b.n	800e508 <fsm_rtermack+0xa8>
    case PPP_FSM_STOPPING:
	UNTIMEOUT(fsm_timeout, f);
 800e4b4:	6879      	ldr	r1, [r7, #4]
 800e4b6:	4818      	ldr	r0, [pc, #96]	; (800e518 <fsm_rtermack+0xb8>)
 800e4b8:	f7ff f858 	bl	800d56c <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2203      	movs	r2, #3
 800e4c0:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d01f      	beq.n	800e50c <fsm_rtermack+0xac>
	    (*f->callbacks->finished)(f);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	4798      	blx	r3
	break;
 800e4d6:	e019      	b.n	800e50c <fsm_rtermack+0xac>

    case PPP_FSM_ACKRCVD:
	f->state = PPP_FSM_REQSENT;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2206      	movs	r2, #6
 800e4dc:	741a      	strb	r2, [r3, #16]
	break;
 800e4de:	e016      	b.n	800e50e <fsm_rtermack+0xae>

    case PPP_FSM_OPENED:
	if (f->callbacks->down)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	6a1b      	ldr	r3, [r3, #32]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d004      	beq.n	800e4f4 <fsm_rtermack+0x94>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	6a1b      	ldr	r3, [r3, #32]
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	4798      	blx	r3
	fsm_sconfreq(f, 0);
 800e4f4:	2100      	movs	r1, #0
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f000 f880 	bl	800e5fc <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2206      	movs	r2, #6
 800e500:	741a      	strb	r2, [r3, #16]
	break;
 800e502:	e004      	b.n	800e50e <fsm_rtermack+0xae>
    default:
	break;
 800e504:	bf00      	nop
 800e506:	e002      	b.n	800e50e <fsm_rtermack+0xae>
	break;
 800e508:	bf00      	nop
 800e50a:	e000      	b.n	800e50e <fsm_rtermack+0xae>
	break;
 800e50c:	bf00      	nop
    }
}
 800e50e:	bf00      	nop
 800e510:	3708      	adds	r7, #8
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	0800dd79 	.word	0x0800dd79

0800e51c <fsm_rcoderej>:


/*
 * fsm_rcoderej - Receive an Code-Reject.
 */
static void fsm_rcoderej(fsm *f, u_char *inp, int len) {
 800e51c:	b480      	push	{r7}
 800e51e:	b087      	sub	sp, #28
 800e520:	af00      	add	r7, sp, #0
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	60b9      	str	r1, [r7, #8]
 800e526:	607a      	str	r2, [r7, #4]
    u_char code, id;

    if (len < HEADERLEN) {
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2b03      	cmp	r3, #3
 800e52c:	dd11      	ble.n	800e552 <fsm_rcoderej+0x36>
	FSMDEBUG(("fsm_rcoderej: Rcvd short Code-Reject packet!"));
	return;
    }
    GETCHAR(code, inp);
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	1c5a      	adds	r2, r3, #1
 800e532:	60ba      	str	r2, [r7, #8]
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	75fb      	strb	r3, [r7, #23]
    GETCHAR(id, inp);
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	1c5a      	adds	r2, r3, #1
 800e53c:	60ba      	str	r2, [r7, #8]
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	75bb      	strb	r3, [r7, #22]
    ppp_warn(("%s: Rcvd Code-Reject for code %d, id %d", PROTO_NAME(f), code, id));

    if( f->state == PPP_FSM_ACKRCVD )
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	7c1b      	ldrb	r3, [r3, #16]
 800e546:	2b07      	cmp	r3, #7
 800e548:	d104      	bne.n	800e554 <fsm_rcoderej+0x38>
	f->state = PPP_FSM_REQSENT;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	2206      	movs	r2, #6
 800e54e:	741a      	strb	r2, [r3, #16]
 800e550:	e000      	b.n	800e554 <fsm_rcoderej+0x38>
	return;
 800e552:	bf00      	nop
}
 800e554:	371c      	adds	r7, #28
 800e556:	46bd      	mov	sp, r7
 800e558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55c:	4770      	bx	lr
	...

0800e560 <fsm_protreject>:
/*
 * fsm_protreject - Peer doesn't speak this protocol.
 *
 * Treat this as a catastrophic error (RXJ-).
 */
void fsm_protreject(fsm *f) {
 800e560:	b580      	push	{r7, lr}
 800e562:	b082      	sub	sp, #8
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	7c1b      	ldrb	r3, [r3, #16]
 800e56c:	3b02      	subs	r3, #2
 800e56e:	2b07      	cmp	r3, #7
 800e570:	d83e      	bhi.n	800e5f0 <fsm_protreject+0x90>
 800e572:	a201      	add	r2, pc, #4	; (adr r2, 800e578 <fsm_protreject+0x18>)
 800e574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e578:	0800e5a1 	.word	0x0800e5a1
 800e57c:	0800e5c5 	.word	0x0800e5c5
 800e580:	0800e599 	.word	0x0800e599
 800e584:	0800e5bd 	.word	0x0800e5bd
 800e588:	0800e5bd 	.word	0x0800e5bd
 800e58c:	0800e5bd 	.word	0x0800e5bd
 800e590:	0800e5bd 	.word	0x0800e5bd
 800e594:	0800e5e1 	.word	0x0800e5e1
    case PPP_FSM_CLOSING:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e598:	6879      	ldr	r1, [r7, #4]
 800e59a:	4817      	ldr	r0, [pc, #92]	; (800e5f8 <fsm_protreject+0x98>)
 800e59c:	f7fe ffe6 	bl	800d56c <sys_untimeout>
	/* fall through */
	/* no break */
    case PPP_FSM_CLOSED:
	f->state = PPP_FSM_CLOSED;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2202      	movs	r2, #2
 800e5a4:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	685b      	ldr	r3, [r3, #4]
 800e5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d01c      	beq.n	800e5ea <fsm_protreject+0x8a>
	    (*f->callbacks->finished)(f);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	4798      	blx	r3
	break;
 800e5ba:	e016      	b.n	800e5ea <fsm_protreject+0x8a>

    case PPP_FSM_STOPPING:
    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e5bc:	6879      	ldr	r1, [r7, #4]
 800e5be:	480e      	ldr	r0, [pc, #56]	; (800e5f8 <fsm_protreject+0x98>)
 800e5c0:	f7fe ffd4 	bl	800d56c <sys_untimeout>
	/* fall through */
	/* no break */
    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_STOPPED;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2203      	movs	r2, #3
 800e5c8:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d00c      	beq.n	800e5ee <fsm_protreject+0x8e>
	    (*f->callbacks->finished)(f);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	685b      	ldr	r3, [r3, #4]
 800e5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	4798      	blx	r3
	break;
 800e5de:	e006      	b.n	800e5ee <fsm_protreject+0x8e>

    case PPP_FSM_OPENED:
	terminate_layer(f, PPP_FSM_STOPPING);
 800e5e0:	2105      	movs	r1, #5
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f7ff fb0e 	bl	800dc04 <terminate_layer>
	break;
 800e5e8:	e002      	b.n	800e5f0 <fsm_protreject+0x90>
	break;
 800e5ea:	bf00      	nop
 800e5ec:	e000      	b.n	800e5f0 <fsm_protreject+0x90>
	break;
 800e5ee:	bf00      	nop
    default:
	FSMDEBUG(("%s: Protocol-reject event in state %d!",
		  PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800e5f0:	bf00      	nop
 800e5f2:	3708      	adds	r7, #8
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}
 800e5f8:	0800dd79 	.word	0x0800dd79

0800e5fc <fsm_sconfreq>:


/*
 * fsm_sconfreq - Send a Configure-Request.
 */
static void fsm_sconfreq(fsm *f, int retransmit) {
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b086      	sub	sp, #24
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	617b      	str	r3, [r7, #20]
    struct pbuf *p;
    u_char *outp;
    int cilen;

    if( f->state != PPP_FSM_REQSENT && f->state != PPP_FSM_ACKRCVD && f->state != PPP_FSM_ACKSENT ){
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	7c1b      	ldrb	r3, [r3, #16]
 800e610:	2b06      	cmp	r3, #6
 800e612:	d017      	beq.n	800e644 <fsm_sconfreq+0x48>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	7c1b      	ldrb	r3, [r3, #16]
 800e618:	2b07      	cmp	r3, #7
 800e61a:	d013      	beq.n	800e644 <fsm_sconfreq+0x48>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	7c1b      	ldrb	r3, [r3, #16]
 800e620:	2b08      	cmp	r3, #8
 800e622:	d00f      	beq.n	800e644 <fsm_sconfreq+0x48>
	/* Not currently negotiating - reset options */
	if( f->callbacks->resetci )
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d004      	beq.n	800e638 <fsm_sconfreq+0x3c>
	    (*f->callbacks->resetci)(f);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	4798      	blx	r3
	f->nakloops = 0;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2200      	movs	r2, #0
 800e63c:	755a      	strb	r2, [r3, #21]
	f->rnakloops = 0;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2200      	movs	r2, #0
 800e642:	759a      	strb	r2, [r3, #22]
    }

    if( !retransmit ){
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d10d      	bne.n	800e666 <fsm_sconfreq+0x6a>
	/* New request - reset retransmission counter, use new ID */
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	7bda      	ldrb	r2, [r3, #15]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	751a      	strb	r2, [r3, #20]
	f->reqid = ++f->id;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	7c9b      	ldrb	r3, [r3, #18]
 800e656:	3301      	adds	r3, #1
 800e658:	b2da      	uxtb	r2, r3
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	749a      	strb	r2, [r3, #18]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	7c9a      	ldrb	r2, [r3, #18]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	74da      	strb	r2, [r3, #19]
    }

    f->seen_ack = 0;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2200      	movs	r2, #0
 800e66a:	731a      	strb	r2, [r3, #12]

    /*
     * Make up the request packet
     */
    if( f->callbacks->cilen && f->callbacks->addci ){
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	685b      	ldr	r3, [r3, #4]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d018      	beq.n	800e6a8 <fsm_sconfreq+0xac>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	689b      	ldr	r3, [r3, #8]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d013      	beq.n	800e6a8 <fsm_sconfreq+0xac>
	cilen = (*f->callbacks->cilen)(f);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	4798      	blx	r3
 800e68a:	4603      	mov	r3, r0
 800e68c:	60bb      	str	r3, [r7, #8]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800e694:	1f1a      	subs	r2, r3, #4
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	429a      	cmp	r2, r3
 800e69a:	da07      	bge.n	800e6ac <fsm_sconfreq+0xb0>
	    cilen = pcb->peer_mru - HEADERLEN;
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800e6a2:	3b04      	subs	r3, #4
 800e6a4:	60bb      	str	r3, [r7, #8]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800e6a6:	e001      	b.n	800e6ac <fsm_sconfreq+0xb0>
    } else
	cilen = 0;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	60bb      	str	r3, [r7, #8]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(cilen + HEADERLEN + PPP_HDRLEN), PBUF_RAM);
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	3308      	adds	r3, #8
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	2000      	movs	r0, #0
 800e6bc:	f7f7 fb10 	bl	8005ce0 <pbuf_alloc>
 800e6c0:	6138      	str	r0, [r7, #16]
    if(NULL == p)
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d07a      	beq.n	800e7be <fsm_sconfreq+0x1c2>
        return;
    if(p->tot_len != p->len) {
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	891a      	ldrh	r2, [r3, #8]
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	895b      	ldrh	r3, [r3, #10]
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d003      	beq.n	800e6dc <fsm_sconfreq+0xe0>
        pbuf_free(p);
 800e6d4:	6938      	ldr	r0, [r7, #16]
 800e6d6:	f7f7 fd6d 	bl	80061b4 <pbuf_free>
        return;
 800e6da:	e071      	b.n	800e7c0 <fsm_sconfreq+0x1c4>
    }

    /* send the request to our peer */
    outp = (u_char*)p->payload;
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	60fb      	str	r3, [r7, #12]
    MAKEHEADER(outp, f->protocol);
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	1c5a      	adds	r2, r3, #1
 800e6e6:	60fa      	str	r2, [r7, #12]
 800e6e8:	22ff      	movs	r2, #255	; 0xff
 800e6ea:	701a      	strb	r2, [r3, #0]
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	1c5a      	adds	r2, r3, #1
 800e6f0:	60fa      	str	r2, [r7, #12]
 800e6f2:	2203      	movs	r2, #3
 800e6f4:	701a      	strb	r2, [r3, #0]
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	1c5a      	adds	r2, r3, #1
 800e6fa:	60fa      	str	r2, [r7, #12]
 800e6fc:	687a      	ldr	r2, [r7, #4]
 800e6fe:	89d2      	ldrh	r2, [r2, #14]
 800e700:	0a12      	lsrs	r2, r2, #8
 800e702:	b292      	uxth	r2, r2
 800e704:	b2d2      	uxtb	r2, r2
 800e706:	701a      	strb	r2, [r3, #0]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	1c5a      	adds	r2, r3, #1
 800e70c:	60fa      	str	r2, [r7, #12]
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	89d2      	ldrh	r2, [r2, #14]
 800e712:	b2d2      	uxtb	r2, r2
 800e714:	701a      	strb	r2, [r3, #0]
    PUTCHAR(CONFREQ, outp);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	1c5a      	adds	r2, r3, #1
 800e71a:	60fa      	str	r2, [r7, #12]
 800e71c:	2201      	movs	r2, #1
 800e71e:	701a      	strb	r2, [r3, #0]
    PUTCHAR(f->reqid, outp);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	1c5a      	adds	r2, r3, #1
 800e724:	60fa      	str	r2, [r7, #12]
 800e726:	687a      	ldr	r2, [r7, #4]
 800e728:	7cd2      	ldrb	r2, [r2, #19]
 800e72a:	701a      	strb	r2, [r3, #0]
    PUTSHORT(cilen + HEADERLEN, outp);
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	1c5a      	adds	r2, r3, #1
 800e730:	60fa      	str	r2, [r7, #12]
 800e732:	68ba      	ldr	r2, [r7, #8]
 800e734:	3204      	adds	r2, #4
 800e736:	1212      	asrs	r2, r2, #8
 800e738:	b2d2      	uxtb	r2, r2
 800e73a:	701a      	strb	r2, [r3, #0]
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	1c5a      	adds	r2, r3, #1
 800e740:	60fa      	str	r2, [r7, #12]
 800e742:	68ba      	ldr	r2, [r7, #8]
 800e744:	b2d2      	uxtb	r2, r2
 800e746:	3204      	adds	r2, #4
 800e748:	b2d2      	uxtb	r2, r2
 800e74a:	701a      	strb	r2, [r3, #0]
    if (cilen != 0) {
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d01a      	beq.n	800e788 <fsm_sconfreq+0x18c>
	(*f->callbacks->addci)(f, outp, &cilen);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	685b      	ldr	r3, [r3, #4]
 800e756:	689b      	ldr	r3, [r3, #8]
 800e758:	f107 0208 	add.w	r2, r7, #8
 800e75c:	68f9      	ldr	r1, [r7, #12]
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	4798      	blx	r3
	LWIP_ASSERT("cilen == p->len - HEADERLEN - PPP_HDRLEN", cilen == p->len - HEADERLEN - PPP_HDRLEN);
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	895b      	ldrh	r3, [r3, #10]
 800e766:	f1a3 0208 	sub.w	r2, r3, #8
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d00b      	beq.n	800e788 <fsm_sconfreq+0x18c>
 800e770:	4b15      	ldr	r3, [pc, #84]	; (800e7c8 <fsm_sconfreq+0x1cc>)
 800e772:	f240 22f2 	movw	r2, #754	; 0x2f2
 800e776:	4915      	ldr	r1, [pc, #84]	; (800e7cc <fsm_sconfreq+0x1d0>)
 800e778:	4815      	ldr	r0, [pc, #84]	; (800e7d0 <fsm_sconfreq+0x1d4>)
 800e77a:	f005 fa39 	bl	8013bf0 <iprintf>
 800e77e:	2000      	movs	r0, #0
 800e780:	f005 fb38 	bl	8013df4 <fflush>
 800e784:	f005 fa7d 	bl	8013c82 <abort>
    }

    ppp_write(pcb, p);
 800e788:	6939      	ldr	r1, [r7, #16]
 800e78a:	6978      	ldr	r0, [r7, #20]
 800e78c:	f003 fe68 	bl	8012460 <ppp_write>

    /* start the retransmit timer */
    --f->retransmits;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	7d1b      	ldrb	r3, [r3, #20]
 800e794:	3b01      	subs	r3, #1
 800e796:	b2da      	uxtb	r2, r3
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	751a      	strb	r2, [r3, #20]
    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800e79c:	6879      	ldr	r1, [r7, #4]
 800e79e:	480d      	ldr	r0, [pc, #52]	; (800e7d4 <fsm_sconfreq+0x1d8>)
 800e7a0:	f7fe fee4 	bl	800d56c <sys_untimeout>
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	7b9b      	ldrb	r3, [r3, #14]
 800e7a8:	461a      	mov	r2, r3
 800e7aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e7ae:	fb03 f302 	mul.w	r3, r3, r2
 800e7b2:	687a      	ldr	r2, [r7, #4]
 800e7b4:	4907      	ldr	r1, [pc, #28]	; (800e7d4 <fsm_sconfreq+0x1d8>)
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7fe feac 	bl	800d514 <sys_timeout>
 800e7bc:	e000      	b.n	800e7c0 <fsm_sconfreq+0x1c4>
        return;
 800e7be:	bf00      	nop
}
 800e7c0:	3718      	adds	r7, #24
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	08017b3c 	.word	0x08017b3c
 800e7cc:	08017b60 	.word	0x08017b60
 800e7d0:	08017b8c 	.word	0x08017b8c
 800e7d4:	0800dd79 	.word	0x0800dd79

0800e7d8 <fsm_sdata>:
/*
 * fsm_sdata - Send some data.
 *
 * Used for all packets sent to our peer by this module.
 */
void fsm_sdata(fsm *f, u_char code, u_char id, const u_char *data, int datalen) {
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b088      	sub	sp, #32
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	607b      	str	r3, [r7, #4]
 800e7e2:	460b      	mov	r3, r1
 800e7e4:	72fb      	strb	r3, [r7, #11]
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	72bb      	strb	r3, [r7, #10]
    ppp_pcb *pcb = f->pcb;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	61fb      	str	r3, [r7, #28]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    /* Adjust length to be smaller than MTU */
    if (datalen > pcb->peer_mru - HEADERLEN)
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800e7f6:	1f1a      	subs	r2, r3, #4
 800e7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	da04      	bge.n	800e808 <fsm_sdata+0x30>
	datalen = pcb->peer_mru - HEADERLEN;
 800e7fe:	69fb      	ldr	r3, [r7, #28]
 800e800:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800e804:	3b04      	subs	r3, #4
 800e806:	62bb      	str	r3, [r7, #40]	; 0x28
    outlen = datalen + HEADERLEN;
 800e808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e80a:	3304      	adds	r3, #4
 800e80c:	61bb      	str	r3, [r7, #24]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(outlen + PPP_HDRLEN), PBUF_RAM);
 800e80e:	69bb      	ldr	r3, [r7, #24]
 800e810:	b29b      	uxth	r3, r3
 800e812:	3304      	adds	r3, #4
 800e814:	b29b      	uxth	r3, r3
 800e816:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e81a:	4619      	mov	r1, r3
 800e81c:	2000      	movs	r0, #0
 800e81e:	f7f7 fa5f 	bl	8005ce0 <pbuf_alloc>
 800e822:	6178      	str	r0, [r7, #20]
    if(NULL == p)
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d04f      	beq.n	800e8ca <fsm_sdata+0xf2>
        return;
    if(p->tot_len != p->len) {
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	891a      	ldrh	r2, [r3, #8]
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	895b      	ldrh	r3, [r3, #10]
 800e832:	429a      	cmp	r2, r3
 800e834:	d003      	beq.n	800e83e <fsm_sdata+0x66>
        pbuf_free(p);
 800e836:	6978      	ldr	r0, [r7, #20]
 800e838:	f7f7 fcbc 	bl	80061b4 <pbuf_free>
        return;
 800e83c:	e046      	b.n	800e8cc <fsm_sdata+0xf4>
    }

    outp = (u_char*)p->payload;
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	685b      	ldr	r3, [r3, #4]
 800e842:	613b      	str	r3, [r7, #16]
    if (datalen && data != NULL) { /* && data != outp + PPP_HDRLEN + HEADERLEN)  -- was only for fsm_sconfreq() */
 800e844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e846:	2b00      	cmp	r3, #0
 800e848:	d009      	beq.n	800e85e <fsm_sdata+0x86>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d006      	beq.n	800e85e <fsm_sdata+0x86>
      MEMCPY(outp + PPP_HDRLEN + HEADERLEN, data, datalen);
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	3308      	adds	r3, #8
 800e854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e856:	6879      	ldr	r1, [r7, #4]
 800e858:	4618      	mov	r0, r3
 800e85a:	f005 fbcb 	bl	8013ff4 <memcpy>
    }
    MAKEHEADER(outp, f->protocol);
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	1c5a      	adds	r2, r3, #1
 800e862:	613a      	str	r2, [r7, #16]
 800e864:	22ff      	movs	r2, #255	; 0xff
 800e866:	701a      	strb	r2, [r3, #0]
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	1c5a      	adds	r2, r3, #1
 800e86c:	613a      	str	r2, [r7, #16]
 800e86e:	2203      	movs	r2, #3
 800e870:	701a      	strb	r2, [r3, #0]
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	1c5a      	adds	r2, r3, #1
 800e876:	613a      	str	r2, [r7, #16]
 800e878:	68fa      	ldr	r2, [r7, #12]
 800e87a:	89d2      	ldrh	r2, [r2, #14]
 800e87c:	0a12      	lsrs	r2, r2, #8
 800e87e:	b292      	uxth	r2, r2
 800e880:	b2d2      	uxtb	r2, r2
 800e882:	701a      	strb	r2, [r3, #0]
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	1c5a      	adds	r2, r3, #1
 800e888:	613a      	str	r2, [r7, #16]
 800e88a:	68fa      	ldr	r2, [r7, #12]
 800e88c:	89d2      	ldrh	r2, [r2, #14]
 800e88e:	b2d2      	uxtb	r2, r2
 800e890:	701a      	strb	r2, [r3, #0]
    PUTCHAR(code, outp);
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	1c5a      	adds	r2, r3, #1
 800e896:	613a      	str	r2, [r7, #16]
 800e898:	7afa      	ldrb	r2, [r7, #11]
 800e89a:	701a      	strb	r2, [r3, #0]
    PUTCHAR(id, outp);
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	1c5a      	adds	r2, r3, #1
 800e8a0:	613a      	str	r2, [r7, #16]
 800e8a2:	7aba      	ldrb	r2, [r7, #10]
 800e8a4:	701a      	strb	r2, [r3, #0]
    PUTSHORT(outlen, outp);
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	1c5a      	adds	r2, r3, #1
 800e8aa:	613a      	str	r2, [r7, #16]
 800e8ac:	69ba      	ldr	r2, [r7, #24]
 800e8ae:	1212      	asrs	r2, r2, #8
 800e8b0:	b2d2      	uxtb	r2, r2
 800e8b2:	701a      	strb	r2, [r3, #0]
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	1c5a      	adds	r2, r3, #1
 800e8b8:	613a      	str	r2, [r7, #16]
 800e8ba:	69ba      	ldr	r2, [r7, #24]
 800e8bc:	b2d2      	uxtb	r2, r2
 800e8be:	701a      	strb	r2, [r3, #0]
    ppp_write(pcb, p);
 800e8c0:	6979      	ldr	r1, [r7, #20]
 800e8c2:	69f8      	ldr	r0, [r7, #28]
 800e8c4:	f003 fdcc 	bl	8012460 <ppp_write>
 800e8c8:	e000      	b.n	800e8cc <fsm_sdata+0xf4>
        return;
 800e8ca:	bf00      	nop
}
 800e8cc:	3720      	adds	r7, #32
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
	...

0800e8d4 <ipcp_init>:
#endif /* PPP_OPTIONS */

/*
 * ipcp_init - Initialize IPCP.
 */
static void ipcp_init(ppp_pcb *pcb) {
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b086      	sub	sp, #24
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	33f8      	adds	r3, #248	; 0xf8
 800e8e0:	617b      	str	r3, [r7, #20]

    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800e8e8:	613b      	str	r3, [r7, #16]
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800e8f0:	60fb      	str	r3, [r7, #12]

    f->pcb = pcb;
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	601a      	str	r2, [r3, #0]
    f->protocol = PPP_IPCP;
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	f248 0221 	movw	r2, #32801	; 0x8021
 800e8fe:	81da      	strh	r2, [r3, #14]
    f->callbacks = &ipcp_callbacks;
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	4a15      	ldr	r2, [pc, #84]	; (800e958 <ipcp_init+0x84>)
 800e904:	605a      	str	r2, [r3, #4]
    fsm_init(f);
 800e906:	6978      	ldr	r0, [r7, #20]
 800e908:	f7ff f88c 	bl	800da24 <fsm_init>
     * Some 3G modems use repeated IPCP NAKs as a way of stalling
     * until they can contact a server on the network, so we increase
     * the default number of NAKs we accept before we start treating
     * them as rejects.
     */
    f->maxnakloops = 100;
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	2264      	movs	r2, #100	; 0x64
 800e910:	75da      	strb	r2, [r3, #23]
#if 0 /* Not necessary, everything is cleared in ppp_new() */
    memset(wo, 0, sizeof(*wo));
    memset(ao, 0, sizeof(*ao));
#endif /* 0 */

    wo->neg_addr = wo->old_addrs = 1;
 800e912:	693a      	ldr	r2, [r7, #16]
 800e914:	7813      	ldrb	r3, [r2, #0]
 800e916:	f043 0302 	orr.w	r3, r3, #2
 800e91a:	7013      	strb	r3, [r2, #0]
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e924:	b2d9      	uxtb	r1, r3
 800e926:	693a      	ldr	r2, [r7, #16]
 800e928:	7813      	ldrb	r3, [r2, #0]
 800e92a:	f361 0300 	bfi	r3, r1, #0, #1
 800e92e:	7013      	strb	r3, [r2, #0]
#if 0 /* UNUSED */
    /* wanting default route by default */
    wo->default_route = 1;
#endif /* UNUSED */

    ao->neg_addr = ao->old_addrs = 1;
 800e930:	68fa      	ldr	r2, [r7, #12]
 800e932:	7813      	ldrb	r3, [r2, #0]
 800e934:	f043 0302 	orr.w	r3, r3, #2
 800e938:	7013      	strb	r3, [r2, #0]
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e942:	b2d9      	uxtb	r1, r3
 800e944:	68fa      	ldr	r2, [r7, #12]
 800e946:	7813      	ldrb	r3, [r2, #0]
 800e948:	f361 0300 	bfi	r3, r1, #0, #1
 800e94c:	7013      	strb	r3, [r2, #0]
     * and defaultroute options.
     */
    ao->proxy_arp = 1;
    ao->default_route = 1;
#endif /* UNUSED */
}
 800e94e:	bf00      	nop
 800e950:	3718      	adds	r7, #24
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
 800e956:	bf00      	nop
 800e958:	08017f48 	.word	0x08017f48

0800e95c <ipcp_open>:


/*
 * ipcp_open - IPCP is allowed to come up.
 */
static void ipcp_open(ppp_pcb *pcb) {
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b084      	sub	sp, #16
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	33f8      	adds	r3, #248	; 0xf8
 800e968:	60fb      	str	r3, [r7, #12]
    fsm_open(f);
 800e96a:	68f8      	ldr	r0, [r7, #12]
 800e96c:	f7ff f8f0 	bl	800db50 <fsm_open>
    pcb->ipcp_is_open = 1;
 800e970:	687a      	ldr	r2, [r7, #4]
 800e972:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800e976:	f043 0302 	orr.w	r3, r3, #2
 800e97a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
}
 800e97e:	bf00      	nop
 800e980:	3710      	adds	r7, #16
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}

0800e986 <ipcp_close>:


/*
 * ipcp_close - Take IPCP down.
 */
static void ipcp_close(ppp_pcb *pcb, const char *reason) {
 800e986:	b580      	push	{r7, lr}
 800e988:	b084      	sub	sp, #16
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	6078      	str	r0, [r7, #4]
 800e98e:	6039      	str	r1, [r7, #0]
    fsm *f = &pcb->ipcp_fsm;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	33f8      	adds	r3, #248	; 0xf8
 800e994:	60fb      	str	r3, [r7, #12]
    fsm_close(f, reason);
 800e996:	6839      	ldr	r1, [r7, #0]
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f7ff f9a1 	bl	800dce0 <fsm_close>
}
 800e99e:	bf00      	nop
 800e9a0:	3710      	adds	r7, #16
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <ipcp_lowerup>:


/*
 * ipcp_lowerup - The lower layer is up.
 */
static void ipcp_lowerup(ppp_pcb *pcb) {
 800e9a6:	b580      	push	{r7, lr}
 800e9a8:	b084      	sub	sp, #16
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	33f8      	adds	r3, #248	; 0xf8
 800e9b2:	60fb      	str	r3, [r7, #12]
    fsm_lowerup(f);
 800e9b4:	68f8      	ldr	r0, [r7, #12]
 800e9b6:	f7ff f852 	bl	800da5e <fsm_lowerup>
}
 800e9ba:	bf00      	nop
 800e9bc:	3710      	adds	r7, #16
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <ipcp_lowerdown>:


/*
 * ipcp_lowerdown - The lower layer is down.
 */
static void ipcp_lowerdown(ppp_pcb *pcb) {
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b084      	sub	sp, #16
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	33f8      	adds	r3, #248	; 0xf8
 800e9ce:	60fb      	str	r3, [r7, #12]
    fsm_lowerdown(f);
 800e9d0:	68f8      	ldr	r0, [r7, #12]
 800e9d2:	f7ff f869 	bl	800daa8 <fsm_lowerdown>
}
 800e9d6:	bf00      	nop
 800e9d8:	3710      	adds	r7, #16
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}

0800e9de <ipcp_input>:


/*
 * ipcp_input - Input IPCP packet.
 */
static void ipcp_input(ppp_pcb *pcb, u_char *p, int len) {
 800e9de:	b580      	push	{r7, lr}
 800e9e0:	b086      	sub	sp, #24
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	60f8      	str	r0, [r7, #12]
 800e9e6:	60b9      	str	r1, [r7, #8]
 800e9e8:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	33f8      	adds	r3, #248	; 0xf8
 800e9ee:	617b      	str	r3, [r7, #20]
    fsm_input(f, p, len);
 800e9f0:	687a      	ldr	r2, [r7, #4]
 800e9f2:	68b9      	ldr	r1, [r7, #8]
 800e9f4:	6978      	ldr	r0, [r7, #20]
 800e9f6:	f7ff fa57 	bl	800dea8 <fsm_input>
}
 800e9fa:	bf00      	nop
 800e9fc:	3718      	adds	r7, #24
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}

0800ea02 <ipcp_protrej>:
/*
 * ipcp_protrej - A Protocol-Reject was received for IPCP.
 *
 * Pretend the lower layer went down, so we shut up.
 */
static void ipcp_protrej(ppp_pcb *pcb) {
 800ea02:	b580      	push	{r7, lr}
 800ea04:	b084      	sub	sp, #16
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	33f8      	adds	r3, #248	; 0xf8
 800ea0e:	60fb      	str	r3, [r7, #12]
    fsm_lowerdown(f);
 800ea10:	68f8      	ldr	r0, [r7, #12]
 800ea12:	f7ff f849 	bl	800daa8 <fsm_lowerdown>
}
 800ea16:	bf00      	nop
 800ea18:	3710      	adds	r7, #16
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}

0800ea1e <ipcp_resetci>:

/*
 * ipcp_resetci - Reset our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static void ipcp_resetci(fsm *f) {
 800ea1e:	b580      	push	{r7, lr}
 800ea20:	b086      	sub	sp, #24
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	617b      	str	r3, [r7, #20]
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800ea32:	613b      	str	r3, [r7, #16]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ea3a:	60fb      	str	r3, [r7, #12]
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800ea42:	60bb      	str	r3, [r7, #8]

    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800ea44:	693b      	ldr	r3, [r7, #16]
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	f003 0301 	and.w	r3, r3, #1
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d106      	bne.n	800ea60 <ipcp_resetci+0x42>
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	f003 0302 	and.w	r3, r3, #2
 800ea5a:	b2db      	uxtb	r3, r3
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d00f      	beq.n	800ea80 <ipcp_resetci+0x62>
	(ao->neg_addr || ao->old_addrs);
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	f003 0301 	and.w	r3, r3, #1
 800ea68:	b2db      	uxtb	r3, r3
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d106      	bne.n	800ea7c <ipcp_resetci+0x5e>
	(ao->neg_addr || ao->old_addrs);
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	f003 0302 	and.w	r3, r3, #2
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d001      	beq.n	800ea80 <ipcp_resetci+0x62>
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	e000      	b.n	800ea82 <ipcp_resetci+0x64>
 800ea80:	2300      	movs	r3, #0
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	f003 0301 	and.w	r3, r3, #1
 800ea88:	b2d9      	uxtb	r1, r3
 800ea8a:	693a      	ldr	r2, [r7, #16]
 800ea8c:	7813      	ldrb	r3, [r2, #0]
 800ea8e:	f361 0382 	bfi	r3, r1, #2, #1
 800ea92:	7013      	strb	r3, [r2, #0]
    if (wo->ouraddr == 0)
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d104      	bne.n	800eaa6 <ipcp_resetci+0x88>
	wo->accept_local = 1;
 800ea9c:	693a      	ldr	r2, [r7, #16]
 800ea9e:	7813      	ldrb	r3, [r2, #0]
 800eaa0:	f043 0308 	orr.w	r3, r3, #8
 800eaa4:	7013      	strb	r3, [r2, #0]
    if (wo->hisaddr == 0)
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	689b      	ldr	r3, [r3, #8]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d104      	bne.n	800eab8 <ipcp_resetci+0x9a>
	wo->accept_remote = 1;
 800eaae:	693a      	ldr	r2, [r7, #16]
 800eab0:	7813      	ldrb	r3, [r2, #0]
 800eab2:	f043 0310 	orr.w	r3, r3, #16
 800eab6:	7013      	strb	r3, [r2, #0]
#if LWIP_DNS
    wo->req_dns1 = wo->req_dns2 = pcb->settings.usepeerdns;	/* Request DNS addresses from the peer */
#endif /* LWIP_DNS */
    *go = *wo;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	693a      	ldr	r2, [r7, #16]
 800eabc:	ca07      	ldmia	r2, {r0, r1, r2}
 800eabe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (!pcb->ask_for_local)
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800eac8:	f003 0301 	and.w	r3, r3, #1
 800eacc:	b2db      	uxtb	r3, r3
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d102      	bne.n	800ead8 <ipcp_resetci+0xba>
	go->ouraddr = 0;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2200      	movs	r2, #0
 800ead6:	605a      	str	r2, [r3, #4]
	if (wo->hisaddr) {
	    wo->accept_remote = 0;
	}
    }
#endif /* UNUSED */
    BZERO(&pcb->ipcp_hisoptions, sizeof(ipcp_options));
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800eade:	220c      	movs	r2, #12
 800eae0:	2100      	movs	r1, #0
 800eae2:	4618      	mov	r0, r3
 800eae4:	f005 faab 	bl	801403e <memset>
}
 800eae8:	bf00      	nop
 800eaea:	3718      	adds	r7, #24
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <ipcp_cilen>:

/*
 * ipcp_cilen - Return length of our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static int ipcp_cilen(fsm *f) {
 800eaf0:	b480      	push	{r7}
 800eaf2:	b087      	sub	sp, #28
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	617b      	str	r3, [r7, #20]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800eb04:	613b      	str	r3, [r7, #16]
#if VJ_SUPPORT
    ipcp_options *wo = &pcb->ipcp_wantoptions;
#endif /* VJ_SUPPORT */
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800eb0c:	60fb      	str	r3, [r7, #12]

    /*
     * First see if we want to change our options to the old
     * forms because we have received old forms from the peer.
     */
    if (go->neg_addr && go->old_addrs && !ho->neg_addr && ho->old_addrs)
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	781b      	ldrb	r3, [r3, #0]
 800eb12:	f003 0301 	and.w	r3, r3, #1
 800eb16:	b2db      	uxtb	r3, r3
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d019      	beq.n	800eb50 <ipcp_cilen+0x60>
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	f003 0302 	and.w	r3, r3, #2
 800eb24:	b2db      	uxtb	r3, r3
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d012      	beq.n	800eb50 <ipcp_cilen+0x60>
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	f003 0301 	and.w	r3, r3, #1
 800eb32:	b2db      	uxtb	r3, r3
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d10b      	bne.n	800eb50 <ipcp_cilen+0x60>
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	f003 0302 	and.w	r3, r3, #2
 800eb40:	b2db      	uxtb	r3, r3
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d004      	beq.n	800eb50 <ipcp_cilen+0x60>
	go->neg_addr = 0;
 800eb46:	693a      	ldr	r2, [r7, #16]
 800eb48:	7813      	ldrb	r3, [r2, #0]
 800eb4a:	f36f 0300 	bfc	r3, #0, #1
 800eb4e:	7013      	strb	r3, [r2, #0]
	    go->vj_protocol = ho->vj_protocol;
	}
    }
#endif /* VJ_SUPPORT */

    return (LENCIADDRS(!go->neg_addr && go->old_addrs) +
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	f003 0301 	and.w	r3, r3, #1
 800eb58:	b2db      	uxtb	r3, r3
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d108      	bne.n	800eb70 <ipcp_cilen+0x80>
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	f003 0302 	and.w	r3, r3, #2
 800eb66:	b2db      	uxtb	r3, r3
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d001      	beq.n	800eb70 <ipcp_cilen+0x80>
 800eb6c:	220a      	movs	r2, #10
 800eb6e:	e000      	b.n	800eb72 <ipcp_cilen+0x82>
 800eb70:	2200      	movs	r2, #0
#if VJ_SUPPORT
	    LENCIVJ(go->neg_vj, go->old_vj) +
#endif /* VJ_SUPPORT */
	    LENCIADDR(go->neg_addr) +
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	f003 0301 	and.w	r3, r3, #1
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d001      	beq.n	800eb84 <ipcp_cilen+0x94>
 800eb80:	2306      	movs	r3, #6
 800eb82:	e000      	b.n	800eb86 <ipcp_cilen+0x96>
 800eb84:	2300      	movs	r3, #0
 800eb86:	4413      	add	r3, r2
#if 0 /* UNUSED - WINS */
	    LENCIWINS(go->winsaddr[0]) +
	    LENCIWINS(go->winsaddr[1]) +
#endif /* UNUSED - WINS */
	    0);
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	371c      	adds	r7, #28
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr

0800eb94 <ipcp_addci>:

/*
 * ipcp_addci - Add our desired CIs to a packet.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static void ipcp_addci(fsm *f, u_char *ucp, int *lenp) {
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b08a      	sub	sp, #40	; 0x28
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	60f8      	str	r0, [r7, #12]
 800eb9c:	60b9      	str	r1, [r7, #8]
 800eb9e:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	623b      	str	r3, [r7, #32]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800eba6:	6a3b      	ldr	r3, [r7, #32]
 800eba8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ebac:	61fb      	str	r3, [r7, #28]
    int len = *lenp;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	627b      	str	r3, [r7, #36]	; 0x24
	} else \
	    addr = 0; \
    }
#endif /* UNUSED - WINS */

    ADDCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	f003 0301 	and.w	r3, r3, #1
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d15e      	bne.n	800ec80 <ipcp_addci+0xec>
 800ebc2:	69fb      	ldr	r3, [r7, #28]
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	f003 0302 	and.w	r3, r3, #2
 800ebca:	b2db      	uxtb	r3, r3
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d057      	beq.n	800ec80 <ipcp_addci+0xec>
 800ebd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd2:	2b09      	cmp	r3, #9
 800ebd4:	dd4f      	ble.n	800ec76 <ipcp_addci+0xe2>
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	1c5a      	adds	r2, r3, #1
 800ebda:	60ba      	str	r2, [r7, #8]
 800ebdc:	2201      	movs	r2, #1
 800ebde:	701a      	strb	r2, [r3, #0]
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	1c5a      	adds	r2, r3, #1
 800ebe4:	60ba      	str	r2, [r7, #8]
 800ebe6:	220a      	movs	r2, #10
 800ebe8:	701a      	strb	r2, [r3, #0]
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7f5 f9e3 	bl	8003fba <lwip_htonl>
 800ebf4:	61b8      	str	r0, [r7, #24]
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	1c5a      	adds	r2, r3, #1
 800ebfa:	60ba      	str	r2, [r7, #8]
 800ebfc:	69ba      	ldr	r2, [r7, #24]
 800ebfe:	0e12      	lsrs	r2, r2, #24
 800ec00:	b2d2      	uxtb	r2, r2
 800ec02:	701a      	strb	r2, [r3, #0]
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	1c5a      	adds	r2, r3, #1
 800ec08:	60ba      	str	r2, [r7, #8]
 800ec0a:	69ba      	ldr	r2, [r7, #24]
 800ec0c:	0c12      	lsrs	r2, r2, #16
 800ec0e:	b2d2      	uxtb	r2, r2
 800ec10:	701a      	strb	r2, [r3, #0]
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	1c5a      	adds	r2, r3, #1
 800ec16:	60ba      	str	r2, [r7, #8]
 800ec18:	69ba      	ldr	r2, [r7, #24]
 800ec1a:	0a12      	lsrs	r2, r2, #8
 800ec1c:	b2d2      	uxtb	r2, r2
 800ec1e:	701a      	strb	r2, [r3, #0]
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	1c5a      	adds	r2, r3, #1
 800ec24:	60ba      	str	r2, [r7, #8]
 800ec26:	69ba      	ldr	r2, [r7, #24]
 800ec28:	b2d2      	uxtb	r2, r2
 800ec2a:	701a      	strb	r2, [r3, #0]
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	689b      	ldr	r3, [r3, #8]
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7f5 f9c2 	bl	8003fba <lwip_htonl>
 800ec36:	61b8      	str	r0, [r7, #24]
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	1c5a      	adds	r2, r3, #1
 800ec3c:	60ba      	str	r2, [r7, #8]
 800ec3e:	69ba      	ldr	r2, [r7, #24]
 800ec40:	0e12      	lsrs	r2, r2, #24
 800ec42:	b2d2      	uxtb	r2, r2
 800ec44:	701a      	strb	r2, [r3, #0]
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	1c5a      	adds	r2, r3, #1
 800ec4a:	60ba      	str	r2, [r7, #8]
 800ec4c:	69ba      	ldr	r2, [r7, #24]
 800ec4e:	0c12      	lsrs	r2, r2, #16
 800ec50:	b2d2      	uxtb	r2, r2
 800ec52:	701a      	strb	r2, [r3, #0]
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	1c5a      	adds	r2, r3, #1
 800ec58:	60ba      	str	r2, [r7, #8]
 800ec5a:	69ba      	ldr	r2, [r7, #24]
 800ec5c:	0a12      	lsrs	r2, r2, #8
 800ec5e:	b2d2      	uxtb	r2, r2
 800ec60:	701a      	strb	r2, [r3, #0]
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	1c5a      	adds	r2, r3, #1
 800ec66:	60ba      	str	r2, [r7, #8]
 800ec68:	69ba      	ldr	r2, [r7, #24]
 800ec6a:	b2d2      	uxtb	r2, r2
 800ec6c:	701a      	strb	r2, [r3, #0]
 800ec6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec70:	3b0a      	subs	r3, #10
 800ec72:	627b      	str	r3, [r7, #36]	; 0x24
 800ec74:	e004      	b.n	800ec80 <ipcp_addci+0xec>
 800ec76:	69fa      	ldr	r2, [r7, #28]
 800ec78:	7813      	ldrb	r3, [r2, #0]
 800ec7a:	f36f 0341 	bfc	r3, #1, #1
 800ec7e:	7013      	strb	r3, [r2, #0]
#if VJ_SUPPORT
    ADDCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    ADDCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	f003 0301 	and.w	r3, r3, #1
 800ec88:	b2db      	uxtb	r3, r3
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d036      	beq.n	800ecfc <ipcp_addci+0x168>
 800ec8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec90:	2b05      	cmp	r3, #5
 800ec92:	dd2e      	ble.n	800ecf2 <ipcp_addci+0x15e>
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	1c5a      	adds	r2, r3, #1
 800ec98:	60ba      	str	r2, [r7, #8]
 800ec9a:	2203      	movs	r2, #3
 800ec9c:	701a      	strb	r2, [r3, #0]
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	1c5a      	adds	r2, r3, #1
 800eca2:	60ba      	str	r2, [r7, #8]
 800eca4:	2206      	movs	r2, #6
 800eca6:	701a      	strb	r2, [r3, #0]
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	4618      	mov	r0, r3
 800ecae:	f7f5 f984 	bl	8003fba <lwip_htonl>
 800ecb2:	6178      	str	r0, [r7, #20]
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	1c5a      	adds	r2, r3, #1
 800ecb8:	60ba      	str	r2, [r7, #8]
 800ecba:	697a      	ldr	r2, [r7, #20]
 800ecbc:	0e12      	lsrs	r2, r2, #24
 800ecbe:	b2d2      	uxtb	r2, r2
 800ecc0:	701a      	strb	r2, [r3, #0]
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	1c5a      	adds	r2, r3, #1
 800ecc6:	60ba      	str	r2, [r7, #8]
 800ecc8:	697a      	ldr	r2, [r7, #20]
 800ecca:	0c12      	lsrs	r2, r2, #16
 800eccc:	b2d2      	uxtb	r2, r2
 800ecce:	701a      	strb	r2, [r3, #0]
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	1c5a      	adds	r2, r3, #1
 800ecd4:	60ba      	str	r2, [r7, #8]
 800ecd6:	697a      	ldr	r2, [r7, #20]
 800ecd8:	0a12      	lsrs	r2, r2, #8
 800ecda:	b2d2      	uxtb	r2, r2
 800ecdc:	701a      	strb	r2, [r3, #0]
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	1c5a      	adds	r2, r3, #1
 800ece2:	60ba      	str	r2, [r7, #8]
 800ece4:	697a      	ldr	r2, [r7, #20]
 800ece6:	b2d2      	uxtb	r2, r2
 800ece8:	701a      	strb	r2, [r3, #0]
 800ecea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecec:	3b06      	subs	r3, #6
 800ecee:	627b      	str	r3, [r7, #36]	; 0x24
 800ecf0:	e004      	b.n	800ecfc <ipcp_addci+0x168>
 800ecf2:	69fa      	ldr	r2, [r7, #28]
 800ecf4:	7813      	ldrb	r3, [r2, #0]
 800ecf6:	f36f 0300 	bfc	r3, #0, #1
 800ecfa:	7013      	strb	r3, [r2, #0]
    ADDCIWINS(CI_MS_WINS1, go->winsaddr[0]);

    ADDCIWINS(CI_MS_WINS2, go->winsaddr[1]);
#endif /* UNUSED - WINS */
    
    *lenp -= len;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed02:	1ad2      	subs	r2, r2, r3
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	601a      	str	r2, [r3, #0]
}
 800ed08:	bf00      	nop
 800ed0a:	3728      	adds	r7, #40	; 0x28
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <ipcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int ipcp_ackci(fsm *f, u_char *p, int len) {
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b08a      	sub	sp, #40	; 0x28
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	627b      	str	r3, [r7, #36]	; 0x24
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800ed22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed24:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ed28:	623b      	str	r3, [r7, #32]
	if (addr != cilong) \
	    goto bad; \
    }
#endif /* UNUSED - WINS */

    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800ed2a:	6a3b      	ldr	r3, [r7, #32]
 800ed2c:	781b      	ldrb	r3, [r3, #0]
 800ed2e:	f003 0301 	and.w	r3, r3, #1
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d179      	bne.n	800ee2c <ipcp_ackci+0x11c>
 800ed38:	6a3b      	ldr	r3, [r7, #32]
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	f003 0302 	and.w	r3, r3, #2
 800ed40:	b2db      	uxtb	r3, r3
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d072      	beq.n	800ee2c <ipcp_ackci+0x11c>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	3b0a      	subs	r3, #10
 800ed4a:	607b      	str	r3, [r7, #4]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	f2c0 80bb 	blt.w	800eeca <ipcp_ackci+0x1ba>
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	1c5a      	adds	r2, r3, #1
 800ed58:	60ba      	str	r2, [r7, #8]
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	83fb      	strh	r3, [r7, #30]
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	1c5a      	adds	r2, r3, #1
 800ed62:	60ba      	str	r2, [r7, #8]
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	83bb      	strh	r3, [r7, #28]
 800ed68:	8bbb      	ldrh	r3, [r7, #28]
 800ed6a:	2b0a      	cmp	r3, #10
 800ed6c:	f040 80b8 	bne.w	800eee0 <ipcp_ackci+0x1d0>
 800ed70:	8bfb      	ldrh	r3, [r7, #30]
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	f040 80b4 	bne.w	800eee0 <ipcp_ackci+0x1d0>
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	1c5a      	adds	r2, r3, #1
 800ed7c:	60ba      	str	r2, [r7, #8]
 800ed7e:	781b      	ldrb	r3, [r3, #0]
 800ed80:	021b      	lsls	r3, r3, #8
 800ed82:	61bb      	str	r3, [r7, #24]
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	1c5a      	adds	r2, r3, #1
 800ed88:	60ba      	str	r2, [r7, #8]
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	69bb      	ldr	r3, [r7, #24]
 800ed90:	4313      	orrs	r3, r2
 800ed92:	61bb      	str	r3, [r7, #24]
 800ed94:	69bb      	ldr	r3, [r7, #24]
 800ed96:	021b      	lsls	r3, r3, #8
 800ed98:	61bb      	str	r3, [r7, #24]
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	1c5a      	adds	r2, r3, #1
 800ed9e:	60ba      	str	r2, [r7, #8]
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	461a      	mov	r2, r3
 800eda4:	69bb      	ldr	r3, [r7, #24]
 800eda6:	4313      	orrs	r3, r2
 800eda8:	61bb      	str	r3, [r7, #24]
 800edaa:	69bb      	ldr	r3, [r7, #24]
 800edac:	021b      	lsls	r3, r3, #8
 800edae:	61bb      	str	r3, [r7, #24]
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	1c5a      	adds	r2, r3, #1
 800edb4:	60ba      	str	r2, [r7, #8]
 800edb6:	781b      	ldrb	r3, [r3, #0]
 800edb8:	461a      	mov	r2, r3
 800edba:	69bb      	ldr	r3, [r7, #24]
 800edbc:	4313      	orrs	r3, r2
 800edbe:	61bb      	str	r3, [r7, #24]
 800edc0:	69b8      	ldr	r0, [r7, #24]
 800edc2:	f7f5 f8fa 	bl	8003fba <lwip_htonl>
 800edc6:	6178      	str	r0, [r7, #20]
 800edc8:	6a3b      	ldr	r3, [r7, #32]
 800edca:	685a      	ldr	r2, [r3, #4]
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	429a      	cmp	r2, r3
 800edd0:	d17d      	bne.n	800eece <ipcp_ackci+0x1be>
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	1c5a      	adds	r2, r3, #1
 800edd6:	60ba      	str	r2, [r7, #8]
 800edd8:	781b      	ldrb	r3, [r3, #0]
 800edda:	021b      	lsls	r3, r3, #8
 800eddc:	61bb      	str	r3, [r7, #24]
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	1c5a      	adds	r2, r3, #1
 800ede2:	60ba      	str	r2, [r7, #8]
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	461a      	mov	r2, r3
 800ede8:	69bb      	ldr	r3, [r7, #24]
 800edea:	4313      	orrs	r3, r2
 800edec:	61bb      	str	r3, [r7, #24]
 800edee:	69bb      	ldr	r3, [r7, #24]
 800edf0:	021b      	lsls	r3, r3, #8
 800edf2:	61bb      	str	r3, [r7, #24]
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	1c5a      	adds	r2, r3, #1
 800edf8:	60ba      	str	r2, [r7, #8]
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	461a      	mov	r2, r3
 800edfe:	69bb      	ldr	r3, [r7, #24]
 800ee00:	4313      	orrs	r3, r2
 800ee02:	61bb      	str	r3, [r7, #24]
 800ee04:	69bb      	ldr	r3, [r7, #24]
 800ee06:	021b      	lsls	r3, r3, #8
 800ee08:	61bb      	str	r3, [r7, #24]
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	1c5a      	adds	r2, r3, #1
 800ee0e:	60ba      	str	r2, [r7, #8]
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	461a      	mov	r2, r3
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	4313      	orrs	r3, r2
 800ee18:	61bb      	str	r3, [r7, #24]
 800ee1a:	69b8      	ldr	r0, [r7, #24]
 800ee1c:	f7f5 f8cd 	bl	8003fba <lwip_htonl>
 800ee20:	6178      	str	r0, [r7, #20]
 800ee22:	6a3b      	ldr	r3, [r7, #32]
 800ee24:	689a      	ldr	r2, [r3, #8]
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d152      	bne.n	800eed2 <ipcp_ackci+0x1c2>
#if VJ_SUPPORT
    ACKCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800ee2c:	6a3b      	ldr	r3, [r7, #32]
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	f003 0301 	and.w	r3, r3, #1
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d042      	beq.n	800eec0 <ipcp_ackci+0x1b0>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	3b06      	subs	r3, #6
 800ee3e:	607b      	str	r3, [r7, #4]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	db47      	blt.n	800eed6 <ipcp_ackci+0x1c6>
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	1c5a      	adds	r2, r3, #1
 800ee4a:	60ba      	str	r2, [r7, #8]
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	83fb      	strh	r3, [r7, #30]
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	1c5a      	adds	r2, r3, #1
 800ee54:	60ba      	str	r2, [r7, #8]
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	83bb      	strh	r3, [r7, #28]
 800ee5a:	8bbb      	ldrh	r3, [r7, #28]
 800ee5c:	2b06      	cmp	r3, #6
 800ee5e:	d13f      	bne.n	800eee0 <ipcp_ackci+0x1d0>
 800ee60:	8bfb      	ldrh	r3, [r7, #30]
 800ee62:	2b03      	cmp	r3, #3
 800ee64:	d13c      	bne.n	800eee0 <ipcp_ackci+0x1d0>
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	1c5a      	adds	r2, r3, #1
 800ee6a:	60ba      	str	r2, [r7, #8]
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	021b      	lsls	r3, r3, #8
 800ee70:	613b      	str	r3, [r7, #16]
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	1c5a      	adds	r2, r3, #1
 800ee76:	60ba      	str	r2, [r7, #8]
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	4313      	orrs	r3, r2
 800ee80:	613b      	str	r3, [r7, #16]
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	021b      	lsls	r3, r3, #8
 800ee86:	613b      	str	r3, [r7, #16]
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	1c5a      	adds	r2, r3, #1
 800ee8c:	60ba      	str	r2, [r7, #8]
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	461a      	mov	r2, r3
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	4313      	orrs	r3, r2
 800ee96:	613b      	str	r3, [r7, #16]
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	021b      	lsls	r3, r3, #8
 800ee9c:	613b      	str	r3, [r7, #16]
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	1c5a      	adds	r2, r3, #1
 800eea2:	60ba      	str	r2, [r7, #8]
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	461a      	mov	r2, r3
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	4313      	orrs	r3, r2
 800eeac:	613b      	str	r3, [r7, #16]
 800eeae:	6938      	ldr	r0, [r7, #16]
 800eeb0:	f7f5 f883 	bl	8003fba <lwip_htonl>
 800eeb4:	6178      	str	r0, [r7, #20]
 800eeb6:	6a3b      	ldr	r3, [r7, #32]
 800eeb8:	685a      	ldr	r2, [r3, #4]
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d10c      	bne.n	800eeda <ipcp_ackci+0x1ca>
#endif /* UNUSED - WINS */

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d10b      	bne.n	800eede <ipcp_ackci+0x1ce>
	goto bad;
    return (1);
 800eec6:	2301      	movs	r3, #1
 800eec8:	e00b      	b.n	800eee2 <ipcp_ackci+0x1d2>
    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800eeca:	bf00      	nop
 800eecc:	e008      	b.n	800eee0 <ipcp_ackci+0x1d0>
 800eece:	bf00      	nop
 800eed0:	e006      	b.n	800eee0 <ipcp_ackci+0x1d0>
 800eed2:	bf00      	nop
 800eed4:	e004      	b.n	800eee0 <ipcp_ackci+0x1d0>
    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800eed6:	bf00      	nop
 800eed8:	e002      	b.n	800eee0 <ipcp_ackci+0x1d0>
 800eeda:	bf00      	nop
 800eedc:	e000      	b.n	800eee0 <ipcp_ackci+0x1d0>
	goto bad;
 800eede:	bf00      	nop

bad:
    IPCPDEBUG(("ipcp_ackci: received bad Ack!"));
    return (0);
 800eee0:	2300      	movs	r3, #0
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3728      	adds	r7, #40	; 0x28
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}

0800eeea <ipcp_nakci>:
 *
 * Returns:
 *	0 - Nak was bad.
 *	1 - Nak was good.
 */
static int ipcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 800eeea:	b590      	push	{r4, r7, lr}
 800eeec:	b093      	sub	sp, #76	; 0x4c
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	60f8      	str	r0, [r7, #12]
 800eef2:	60b9      	str	r1, [r7, #8]
 800eef4:	607a      	str	r2, [r7, #4]
 800eef6:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	647b      	str	r3, [r7, #68]	; 0x44
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800eefe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef00:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ef04:	643b      	str	r3, [r7, #64]	; 0x40
    u32_t cidnsaddr;
#endif /* LWIP_DNS */
    ipcp_options no;		/* options we've seen Naks for */
    ipcp_options try_;		/* options to request next time */

    BZERO(&no, sizeof(no));
 800ef06:	f107 031c 	add.w	r3, r7, #28
 800ef0a:	220c      	movs	r2, #12
 800ef0c:	2100      	movs	r1, #0
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f005 f895 	bl	801403e <memset>
    try_ = *go;
 800ef14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef16:	f107 0310 	add.w	r3, r7, #16
 800ef1a:	ca07      	ldmia	r2, {r0, r1, r2}
 800ef1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /*
     * Accept the peer's idea of {our,his} address, if different
     * from our idea, only if the accept_{local,remote} flag is set.
     */
    NAKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800ef20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	f003 0301 	and.w	r3, r3, #1
 800ef28:	b2db      	uxtb	r3, r3
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	f040 8096 	bne.w	800f05c <ipcp_nakci+0x172>
 800ef30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	f003 0302 	and.w	r3, r3, #2
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	f000 808e 	beq.w	800f05c <ipcp_nakci+0x172>
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	785b      	ldrb	r3, [r3, #1]
 800ef44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ef48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ef4c:	2b0a      	cmp	r3, #10
 800ef4e:	f040 8085 	bne.w	800f05c <ipcp_nakci+0x172>
 800ef52:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	dc7f      	bgt.n	800f05c <ipcp_nakci+0x172>
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	781b      	ldrb	r3, [r3, #0]
 800ef60:	2b01      	cmp	r3, #1
 800ef62:	d17b      	bne.n	800f05c <ipcp_nakci+0x172>
 800ef64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ef68:	687a      	ldr	r2, [r7, #4]
 800ef6a:	1ad3      	subs	r3, r2, r3
 800ef6c:	607b      	str	r3, [r7, #4]
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	3302      	adds	r3, #2
 800ef72:	60bb      	str	r3, [r7, #8]
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	1c5a      	adds	r2, r3, #1
 800ef78:	60ba      	str	r2, [r7, #8]
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	021b      	lsls	r3, r3, #8
 800ef7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	1c5a      	adds	r2, r3, #1
 800ef84:	60ba      	str	r2, [r7, #8]
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	461a      	mov	r2, r3
 800ef8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef92:	021b      	lsls	r3, r3, #8
 800ef94:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	1c5a      	adds	r2, r3, #1
 800ef9a:	60ba      	str	r2, [r7, #8]
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	461a      	mov	r2, r3
 800efa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa2:	4313      	orrs	r3, r2
 800efa4:	63bb      	str	r3, [r7, #56]	; 0x38
 800efa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa8:	021b      	lsls	r3, r3, #8
 800efaa:	63bb      	str	r3, [r7, #56]	; 0x38
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	1c5a      	adds	r2, r3, #1
 800efb0:	60ba      	str	r2, [r7, #8]
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	461a      	mov	r2, r3
 800efb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb8:	4313      	orrs	r3, r2
 800efba:	63bb      	str	r3, [r7, #56]	; 0x38
 800efbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800efbe:	f7f4 fffc 	bl	8003fba <lwip_htonl>
 800efc2:	6378      	str	r0, [r7, #52]	; 0x34
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	1c5a      	adds	r2, r3, #1
 800efc8:	60ba      	str	r2, [r7, #8]
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	021b      	lsls	r3, r3, #8
 800efce:	63bb      	str	r3, [r7, #56]	; 0x38
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	1c5a      	adds	r2, r3, #1
 800efd4:	60ba      	str	r2, [r7, #8]
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	461a      	mov	r2, r3
 800efda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efdc:	4313      	orrs	r3, r2
 800efde:	63bb      	str	r3, [r7, #56]	; 0x38
 800efe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe2:	021b      	lsls	r3, r3, #8
 800efe4:	63bb      	str	r3, [r7, #56]	; 0x38
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	1c5a      	adds	r2, r3, #1
 800efea:	60ba      	str	r2, [r7, #8]
 800efec:	781b      	ldrb	r3, [r3, #0]
 800efee:	461a      	mov	r2, r3
 800eff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff2:	4313      	orrs	r3, r2
 800eff4:	63bb      	str	r3, [r7, #56]	; 0x38
 800eff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff8:	021b      	lsls	r3, r3, #8
 800effa:	63bb      	str	r3, [r7, #56]	; 0x38
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	1c5a      	adds	r2, r3, #1
 800f000:	60ba      	str	r2, [r7, #8]
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	461a      	mov	r2, r3
 800f006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f008:	4313      	orrs	r3, r2
 800f00a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f00c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f00e:	f7f4 ffd4 	bl	8003fba <lwip_htonl>
 800f012:	6338      	str	r0, [r7, #48]	; 0x30
 800f014:	7f3b      	ldrb	r3, [r7, #28]
 800f016:	f043 0302 	orr.w	r3, r3, #2
 800f01a:	773b      	strb	r3, [r7, #28]
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d004      	beq.n	800f02c <ipcp_nakci+0x142>
 800f022:	7c3b      	ldrb	r3, [r7, #16]
 800f024:	f36f 0341 	bfc	r3, #1, #1
 800f028:	743b      	strb	r3, [r7, #16]
 800f02a:	e017      	b.n	800f05c <ipcp_nakci+0x172>
 800f02c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	f003 0308 	and.w	r3, r3, #8
 800f034:	b2db      	uxtb	r3, r3
 800f036:	2b00      	cmp	r3, #0
 800f038:	d004      	beq.n	800f044 <ipcp_nakci+0x15a>
 800f03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d001      	beq.n	800f044 <ipcp_nakci+0x15a>
 800f040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f042:	617b      	str	r3, [r7, #20]
 800f044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	f003 0310 	and.w	r3, r3, #16
 800f04c:	b2db      	uxtb	r3, r3
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d004      	beq.n	800f05c <ipcp_nakci+0x172>
 800f052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f054:	2b00      	cmp	r3, #0
 800f056:	d001      	beq.n	800f05c <ipcp_nakci+0x172>
 800f058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f05a:	61bb      	str	r3, [r7, #24]
		}
	    }
	    );
#endif /* VJ_SUPPORT */

    NAKCIADDR(CI_ADDR, neg_addr,
 800f05c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	f003 0301 	and.w	r3, r3, #1
 800f064:	b2db      	uxtb	r3, r3
 800f066:	2b00      	cmp	r3, #0
 800f068:	f000 816e 	beq.w	800f348 <ipcp_nakci+0x45e>
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	785b      	ldrb	r3, [r3, #1]
 800f070:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f074:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f078:	2b06      	cmp	r3, #6
 800f07a:	f040 8165 	bne.w	800f348 <ipcp_nakci+0x45e>
 800f07e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	429a      	cmp	r2, r3
 800f086:	f300 815f 	bgt.w	800f348 <ipcp_nakci+0x45e>
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	2b03      	cmp	r3, #3
 800f090:	f040 815a 	bne.w	800f348 <ipcp_nakci+0x45e>
 800f094:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f098:	687a      	ldr	r2, [r7, #4]
 800f09a:	1ad3      	subs	r3, r2, r3
 800f09c:	607b      	str	r3, [r7, #4]
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	3302      	adds	r3, #2
 800f0a2:	60bb      	str	r3, [r7, #8]
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	1c5a      	adds	r2, r3, #1
 800f0a8:	60ba      	str	r2, [r7, #8]
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	021b      	lsls	r3, r3, #8
 800f0ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	1c5a      	adds	r2, r3, #1
 800f0b4:	60ba      	str	r2, [r7, #8]
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0bc:	4313      	orrs	r3, r2
 800f0be:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c2:	021b      	lsls	r3, r3, #8
 800f0c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	1c5a      	adds	r2, r3, #1
 800f0ca:	60ba      	str	r2, [r7, #8]
 800f0cc:	781b      	ldrb	r3, [r3, #0]
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d2:	4313      	orrs	r3, r2
 800f0d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d8:	021b      	lsls	r3, r3, #8
 800f0da:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	1c5a      	adds	r2, r3, #1
 800f0e0:	60ba      	str	r2, [r7, #8]
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e8:	4313      	orrs	r3, r2
 800f0ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f0ee:	f7f4 ff64 	bl	8003fba <lwip_htonl>
 800f0f2:	6378      	str	r0, [r7, #52]	; 0x34
 800f0f4:	7f3b      	ldrb	r3, [r7, #28]
 800f0f6:	f043 0301 	orr.w	r3, r3, #1
 800f0fa:	773b      	strb	r3, [r7, #28]
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d008      	beq.n	800f114 <ipcp_nakci+0x22a>
 800f102:	7c3b      	ldrb	r3, [r7, #16]
 800f104:	f36f 0300 	bfc	r3, #0, #1
 800f108:	743b      	strb	r3, [r7, #16]
 800f10a:	7c3b      	ldrb	r3, [r7, #16]
 800f10c:	f36f 0341 	bfc	r3, #1, #1
 800f110:	743b      	strb	r3, [r7, #16]
 800f112:	e119      	b.n	800f348 <ipcp_nakci+0x45e>
 800f114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	f003 0308 	and.w	r3, r3, #8
 800f11c:	b2db      	uxtb	r3, r3
 800f11e:	2b00      	cmp	r3, #0
 800f120:	f000 8112 	beq.w	800f348 <ipcp_nakci+0x45e>
 800f124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f126:	2b00      	cmp	r3, #0
 800f128:	f000 810e 	beq.w	800f348 <ipcp_nakci+0x45e>
 800f12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f12e:	617b      	str	r3, [r7, #20]
     * If they want to negotiate about IP addresses, we comply.
     * If they want us to ask for compression, we refuse.
     * If they want us to ask for ms-dns, we do that, since some
     * peers get huffy if we don't.
     */
    while (len >= CILEN_VOID) {
 800f130:	e10a      	b.n	800f348 <ipcp_nakci+0x45e>
	GETCHAR(citype, p);
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	1c5a      	adds	r2, r3, #1
 800f136:	60ba      	str	r2, [r7, #8]
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GETCHAR(cilen, p);
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	1c5a      	adds	r2, r3, #1
 800f142:	60ba      	str	r2, [r7, #8]
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if ( cilen < CILEN_VOID || (len -= cilen) < 0 )
 800f14a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f14e:	2b01      	cmp	r3, #1
 800f150:	f240 810c 	bls.w	800f36c <ipcp_nakci+0x482>
 800f154:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f158:	687a      	ldr	r2, [r7, #4]
 800f15a:	1ad3      	subs	r3, r2, r3
 800f15c:	607b      	str	r3, [r7, #4]
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2b00      	cmp	r3, #0
 800f162:	f2c0 8103 	blt.w	800f36c <ipcp_nakci+0x482>
	    goto bad;
	next = p + cilen - 2;
 800f166:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f16a:	3b02      	subs	r3, #2
 800f16c:	68ba      	ldr	r2, [r7, #8]
 800f16e:	4413      	add	r3, r2
 800f170:	62bb      	str	r3, [r7, #40]	; 0x28

	switch (citype) {
 800f172:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f176:	2b01      	cmp	r3, #1
 800f178:	d003      	beq.n	800f182 <ipcp_nakci+0x298>
 800f17a:	2b03      	cmp	r3, #3
 800f17c:	f000 808d 	beq.w	800f29a <ipcp_nakci+0x3b0>
	    if (ciaddr1)
		try_.winsaddr[citype == CI_MS_WINS2] = ciaddr1;
	    break;
#endif /* UNUSED - WINS */
	default:
	    break;
 800f180:	e0e0      	b.n	800f344 <ipcp_nakci+0x45a>
	    if ((!go->neg_addr && go->old_addrs) || no.old_addrs
 800f182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f184:	781b      	ldrb	r3, [r3, #0]
 800f186:	f003 0301 	and.w	r3, r3, #1
 800f18a:	b2db      	uxtb	r3, r3
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d107      	bne.n	800f1a0 <ipcp_nakci+0x2b6>
 800f190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	f003 0302 	and.w	r3, r3, #2
 800f198:	b2db      	uxtb	r3, r3
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	f040 80e6 	bne.w	800f36c <ipcp_nakci+0x482>
 800f1a0:	7f3b      	ldrb	r3, [r7, #28]
 800f1a2:	f003 0302 	and.w	r3, r3, #2
 800f1a6:	b2db      	uxtb	r3, r3
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	f040 80df 	bne.w	800f36c <ipcp_nakci+0x482>
		|| cilen != CILEN_ADDRS)
 800f1ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f1b2:	2b0a      	cmp	r3, #10
 800f1b4:	f040 80da 	bne.w	800f36c <ipcp_nakci+0x482>
	    try_.neg_addr = 0;
 800f1b8:	7c3b      	ldrb	r3, [r7, #16]
 800f1ba:	f36f 0300 	bfc	r3, #0, #1
 800f1be:	743b      	strb	r3, [r7, #16]
	    GETLONG(l, p);
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	1c5a      	adds	r2, r3, #1
 800f1c4:	60ba      	str	r2, [r7, #8]
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	021b      	lsls	r3, r3, #8
 800f1ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	1c5a      	adds	r2, r3, #1
 800f1d0:	60ba      	str	r2, [r7, #8]
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	461a      	mov	r2, r3
 800f1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d8:	4313      	orrs	r3, r2
 800f1da:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1de:	021b      	lsls	r3, r3, #8
 800f1e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	1c5a      	adds	r2, r3, #1
 800f1e6:	60ba      	str	r2, [r7, #8]
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ee:	4313      	orrs	r3, r2
 800f1f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f4:	021b      	lsls	r3, r3, #8
 800f1f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	1c5a      	adds	r2, r3, #1
 800f1fc:	60ba      	str	r2, [r7, #8]
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	461a      	mov	r2, r3
 800f202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f204:	4313      	orrs	r3, r2
 800f206:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr1 = lwip_htonl(l);
 800f208:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f20a:	f7f4 fed6 	bl	8003fba <lwip_htonl>
 800f20e:	6378      	str	r0, [r7, #52]	; 0x34
	    if (ciaddr1 && go->accept_local)
 800f210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f212:	2b00      	cmp	r3, #0
 800f214:	d008      	beq.n	800f228 <ipcp_nakci+0x33e>
 800f216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	f003 0308 	and.w	r3, r3, #8
 800f21e:	b2db      	uxtb	r3, r3
 800f220:	2b00      	cmp	r3, #0
 800f222:	d001      	beq.n	800f228 <ipcp_nakci+0x33e>
		try_.ouraddr = ciaddr1;
 800f224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f226:	617b      	str	r3, [r7, #20]
	    GETLONG(l, p);
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	1c5a      	adds	r2, r3, #1
 800f22c:	60ba      	str	r2, [r7, #8]
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	021b      	lsls	r3, r3, #8
 800f232:	63bb      	str	r3, [r7, #56]	; 0x38
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	1c5a      	adds	r2, r3, #1
 800f238:	60ba      	str	r2, [r7, #8]
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	461a      	mov	r2, r3
 800f23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f240:	4313      	orrs	r3, r2
 800f242:	63bb      	str	r3, [r7, #56]	; 0x38
 800f244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f246:	021b      	lsls	r3, r3, #8
 800f248:	63bb      	str	r3, [r7, #56]	; 0x38
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	1c5a      	adds	r2, r3, #1
 800f24e:	60ba      	str	r2, [r7, #8]
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	461a      	mov	r2, r3
 800f254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f256:	4313      	orrs	r3, r2
 800f258:	63bb      	str	r3, [r7, #56]	; 0x38
 800f25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f25c:	021b      	lsls	r3, r3, #8
 800f25e:	63bb      	str	r3, [r7, #56]	; 0x38
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	1c5a      	adds	r2, r3, #1
 800f264:	60ba      	str	r2, [r7, #8]
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	461a      	mov	r2, r3
 800f26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f26c:	4313      	orrs	r3, r2
 800f26e:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr2 = lwip_htonl(l);
 800f270:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f272:	f7f4 fea2 	bl	8003fba <lwip_htonl>
 800f276:	6338      	str	r0, [r7, #48]	; 0x30
	    if (ciaddr2 && go->accept_remote)
 800f278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d008      	beq.n	800f290 <ipcp_nakci+0x3a6>
 800f27e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	f003 0310 	and.w	r3, r3, #16
 800f286:	b2db      	uxtb	r3, r3
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d001      	beq.n	800f290 <ipcp_nakci+0x3a6>
		try_.hisaddr = ciaddr2;
 800f28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28e:	61bb      	str	r3, [r7, #24]
	    no.old_addrs = 1;
 800f290:	7f3b      	ldrb	r3, [r7, #28]
 800f292:	f043 0302 	orr.w	r3, r3, #2
 800f296:	773b      	strb	r3, [r7, #28]
	    break;
 800f298:	e054      	b.n	800f344 <ipcp_nakci+0x45a>
	    if (go->neg_addr || no.neg_addr || cilen != CILEN_ADDR)
 800f29a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f29c:	781b      	ldrb	r3, [r3, #0]
 800f29e:	f003 0301 	and.w	r3, r3, #1
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d161      	bne.n	800f36c <ipcp_nakci+0x482>
 800f2a8:	7f3b      	ldrb	r3, [r7, #28]
 800f2aa:	f003 0301 	and.w	r3, r3, #1
 800f2ae:	b2db      	uxtb	r3, r3
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d15b      	bne.n	800f36c <ipcp_nakci+0x482>
 800f2b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f2b8:	2b06      	cmp	r3, #6
 800f2ba:	d157      	bne.n	800f36c <ipcp_nakci+0x482>
	    try_.old_addrs = 0;
 800f2bc:	7c3b      	ldrb	r3, [r7, #16]
 800f2be:	f36f 0341 	bfc	r3, #1, #1
 800f2c2:	743b      	strb	r3, [r7, #16]
	    GETLONG(l, p);
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	1c5a      	adds	r2, r3, #1
 800f2c8:	60ba      	str	r2, [r7, #8]
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	021b      	lsls	r3, r3, #8
 800f2ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	1c5a      	adds	r2, r3, #1
 800f2d4:	60ba      	str	r2, [r7, #8]
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	461a      	mov	r2, r3
 800f2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2dc:	4313      	orrs	r3, r2
 800f2de:	63bb      	str	r3, [r7, #56]	; 0x38
 800f2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e2:	021b      	lsls	r3, r3, #8
 800f2e4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	1c5a      	adds	r2, r3, #1
 800f2ea:	60ba      	str	r2, [r7, #8]
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	461a      	mov	r2, r3
 800f2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f2:	4313      	orrs	r3, r2
 800f2f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f8:	021b      	lsls	r3, r3, #8
 800f2fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	1c5a      	adds	r2, r3, #1
 800f300:	60ba      	str	r2, [r7, #8]
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	461a      	mov	r2, r3
 800f306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f308:	4313      	orrs	r3, r2
 800f30a:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr1 = lwip_htonl(l);
 800f30c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f30e:	f7f4 fe54 	bl	8003fba <lwip_htonl>
 800f312:	6378      	str	r0, [r7, #52]	; 0x34
	    if (ciaddr1 && go->accept_local)
 800f314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f316:	2b00      	cmp	r3, #0
 800f318:	d008      	beq.n	800f32c <ipcp_nakci+0x442>
 800f31a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	f003 0308 	and.w	r3, r3, #8
 800f322:	b2db      	uxtb	r3, r3
 800f324:	2b00      	cmp	r3, #0
 800f326:	d001      	beq.n	800f32c <ipcp_nakci+0x442>
		try_.ouraddr = ciaddr1;
 800f328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f32a:	617b      	str	r3, [r7, #20]
	    if (try_.ouraddr != 0)
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d003      	beq.n	800f33a <ipcp_nakci+0x450>
		try_.neg_addr = 1;
 800f332:	7c3b      	ldrb	r3, [r7, #16]
 800f334:	f043 0301 	orr.w	r3, r3, #1
 800f338:	743b      	strb	r3, [r7, #16]
	    no.neg_addr = 1;
 800f33a:	7f3b      	ldrb	r3, [r7, #28]
 800f33c:	f043 0301 	orr.w	r3, r3, #1
 800f340:	773b      	strb	r3, [r7, #28]
	    break;
 800f342:	bf00      	nop
	}
	p = next;
 800f344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f346:	60bb      	str	r3, [r7, #8]
    while (len >= CILEN_VOID) {
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	f73f aef1 	bgt.w	800f132 <ipcp_nakci+0x248>

    /*
     * OK, the Nak is good.  Now we can update state.
     * If there are any remaining options, we ignore them.
     */
    if (f->state != PPP_FSM_OPENED)
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	7c1b      	ldrb	r3, [r3, #16]
 800f354:	2b09      	cmp	r3, #9
 800f356:	d007      	beq.n	800f368 <ipcp_nakci+0x47e>
	*go = try_;
 800f358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f35a:	461c      	mov	r4, r3
 800f35c:	f107 0310 	add.w	r3, r7, #16
 800f360:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f364:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    return 1;
 800f368:	2301      	movs	r3, #1
 800f36a:	e000      	b.n	800f36e <ipcp_nakci+0x484>

bad:
    IPCPDEBUG(("ipcp_nakci: received bad Nak!"));
    return 0;
 800f36c:	2300      	movs	r3, #0
}
 800f36e:	4618      	mov	r0, r3
 800f370:	374c      	adds	r7, #76	; 0x4c
 800f372:	46bd      	mov	sp, r7
 800f374:	bd90      	pop	{r4, r7, pc}

0800f376 <ipcp_rejci>:

/*
 * ipcp_rejci - Reject some of our CIs.
 * Callback from fsm_rconfnakrej.
 */
static int ipcp_rejci(fsm *f, u_char *p, int len) {
 800f376:	b590      	push	{r4, r7, lr}
 800f378:	b08f      	sub	sp, #60	; 0x3c
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	60f8      	str	r0, [r7, #12]
 800f37e:	60b9      	str	r1, [r7, #8]
 800f380:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	637b      	str	r3, [r7, #52]	; 0x34
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800f388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f38a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800f38e:	633b      	str	r3, [r7, #48]	; 0x30
    u_short cishort;
#endif /* VJ_SUPPORT */
    u32_t cilong;
    ipcp_options try_;		/* options to request next time */

    try_ = *go;
 800f390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f392:	f107 0314 	add.w	r3, r7, #20
 800f396:	ca07      	ldmia	r2, {r0, r1, r2}
 800f398:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    goto bad; \
	try_.winsaddr[opt == CI_MS_WINS2] = 0; \
    }
#endif /* UNUSED - WINS */

    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800f39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	f003 0301 	and.w	r3, r3, #1
 800f3a4:	b2db      	uxtb	r3, r3
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d17e      	bne.n	800f4a8 <ipcp_rejci+0x132>
 800f3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	f003 0302 	and.w	r3, r3, #2
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d077      	beq.n	800f4a8 <ipcp_rejci+0x132>
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	785b      	ldrb	r3, [r3, #1]
 800f3bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f3c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3c4:	2b0a      	cmp	r3, #10
 800f3c6:	d16f      	bne.n	800f4a8 <ipcp_rejci+0x132>
 800f3c8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	dc6a      	bgt.n	800f4a8 <ipcp_rejci+0x132>
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	2b01      	cmp	r3, #1
 800f3d8:	d166      	bne.n	800f4a8 <ipcp_rejci+0x132>
 800f3da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	1ad3      	subs	r3, r2, r3
 800f3e2:	607b      	str	r3, [r7, #4]
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	3302      	adds	r3, #2
 800f3e8:	60bb      	str	r3, [r7, #8]
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	1c5a      	adds	r2, r3, #1
 800f3ee:	60ba      	str	r2, [r7, #8]
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	021b      	lsls	r3, r3, #8
 800f3f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	1c5a      	adds	r2, r3, #1
 800f3fa:	60ba      	str	r2, [r7, #8]
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	461a      	mov	r2, r3
 800f400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f402:	4313      	orrs	r3, r2
 800f404:	62bb      	str	r3, [r7, #40]	; 0x28
 800f406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f408:	021b      	lsls	r3, r3, #8
 800f40a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	1c5a      	adds	r2, r3, #1
 800f410:	60ba      	str	r2, [r7, #8]
 800f412:	781b      	ldrb	r3, [r3, #0]
 800f414:	461a      	mov	r2, r3
 800f416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f418:	4313      	orrs	r3, r2
 800f41a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f41e:	021b      	lsls	r3, r3, #8
 800f420:	62bb      	str	r3, [r7, #40]	; 0x28
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	1c5a      	adds	r2, r3, #1
 800f426:	60ba      	str	r2, [r7, #8]
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	461a      	mov	r2, r3
 800f42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f42e:	4313      	orrs	r3, r2
 800f430:	62bb      	str	r3, [r7, #40]	; 0x28
 800f432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f434:	f7f4 fdc1 	bl	8003fba <lwip_htonl>
 800f438:	6278      	str	r0, [r7, #36]	; 0x24
 800f43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f43c:	685a      	ldr	r2, [r3, #4]
 800f43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f440:	429a      	cmp	r2, r3
 800f442:	f040 8093 	bne.w	800f56c <ipcp_rejci+0x1f6>
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	1c5a      	adds	r2, r3, #1
 800f44a:	60ba      	str	r2, [r7, #8]
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	021b      	lsls	r3, r3, #8
 800f450:	62bb      	str	r3, [r7, #40]	; 0x28
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	1c5a      	adds	r2, r3, #1
 800f456:	60ba      	str	r2, [r7, #8]
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	461a      	mov	r2, r3
 800f45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45e:	4313      	orrs	r3, r2
 800f460:	62bb      	str	r3, [r7, #40]	; 0x28
 800f462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f464:	021b      	lsls	r3, r3, #8
 800f466:	62bb      	str	r3, [r7, #40]	; 0x28
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	1c5a      	adds	r2, r3, #1
 800f46c:	60ba      	str	r2, [r7, #8]
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	461a      	mov	r2, r3
 800f472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f474:	4313      	orrs	r3, r2
 800f476:	62bb      	str	r3, [r7, #40]	; 0x28
 800f478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47a:	021b      	lsls	r3, r3, #8
 800f47c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	1c5a      	adds	r2, r3, #1
 800f482:	60ba      	str	r2, [r7, #8]
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	461a      	mov	r2, r3
 800f488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48a:	4313      	orrs	r3, r2
 800f48c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f48e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f490:	f7f4 fd93 	bl	8003fba <lwip_htonl>
 800f494:	6278      	str	r0, [r7, #36]	; 0x24
 800f496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f498:	689a      	ldr	r2, [r3, #8]
 800f49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f49c:	429a      	cmp	r2, r3
 800f49e:	d167      	bne.n	800f570 <ipcp_rejci+0x1fa>
 800f4a0:	7d3b      	ldrb	r3, [r7, #20]
 800f4a2:	f36f 0341 	bfc	r3, #1, #1
 800f4a6:	753b      	strb	r3, [r7, #20]
#if VJ_SUPPORT
    REJCIVJ(CI_COMPRESSTYPE, neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800f4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	f003 0301 	and.w	r3, r3, #1
 800f4b0:	b2db      	uxtb	r3, r3
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d049      	beq.n	800f54a <ipcp_rejci+0x1d4>
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	785b      	ldrb	r3, [r3, #1]
 800f4ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f4be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4c2:	2b06      	cmp	r3, #6
 800f4c4:	d141      	bne.n	800f54a <ipcp_rejci+0x1d4>
 800f4c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	dc3c      	bgt.n	800f54a <ipcp_rejci+0x1d4>
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	2b03      	cmp	r3, #3
 800f4d6:	d138      	bne.n	800f54a <ipcp_rejci+0x1d4>
 800f4d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4dc:	687a      	ldr	r2, [r7, #4]
 800f4de:	1ad3      	subs	r3, r2, r3
 800f4e0:	607b      	str	r3, [r7, #4]
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	3302      	adds	r3, #2
 800f4e6:	60bb      	str	r3, [r7, #8]
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	1c5a      	adds	r2, r3, #1
 800f4ec:	60ba      	str	r2, [r7, #8]
 800f4ee:	781b      	ldrb	r3, [r3, #0]
 800f4f0:	021b      	lsls	r3, r3, #8
 800f4f2:	623b      	str	r3, [r7, #32]
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	1c5a      	adds	r2, r3, #1
 800f4f8:	60ba      	str	r2, [r7, #8]
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	6a3b      	ldr	r3, [r7, #32]
 800f500:	4313      	orrs	r3, r2
 800f502:	623b      	str	r3, [r7, #32]
 800f504:	6a3b      	ldr	r3, [r7, #32]
 800f506:	021b      	lsls	r3, r3, #8
 800f508:	623b      	str	r3, [r7, #32]
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	1c5a      	adds	r2, r3, #1
 800f50e:	60ba      	str	r2, [r7, #8]
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	461a      	mov	r2, r3
 800f514:	6a3b      	ldr	r3, [r7, #32]
 800f516:	4313      	orrs	r3, r2
 800f518:	623b      	str	r3, [r7, #32]
 800f51a:	6a3b      	ldr	r3, [r7, #32]
 800f51c:	021b      	lsls	r3, r3, #8
 800f51e:	623b      	str	r3, [r7, #32]
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	1c5a      	adds	r2, r3, #1
 800f524:	60ba      	str	r2, [r7, #8]
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	461a      	mov	r2, r3
 800f52a:	6a3b      	ldr	r3, [r7, #32]
 800f52c:	4313      	orrs	r3, r2
 800f52e:	623b      	str	r3, [r7, #32]
 800f530:	6a38      	ldr	r0, [r7, #32]
 800f532:	f7f4 fd42 	bl	8003fba <lwip_htonl>
 800f536:	6278      	str	r0, [r7, #36]	; 0x24
 800f538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53a:	685a      	ldr	r2, [r3, #4]
 800f53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53e:	429a      	cmp	r2, r3
 800f540:	d118      	bne.n	800f574 <ipcp_rejci+0x1fe>
 800f542:	7d3b      	ldrb	r3, [r7, #20]
 800f544:	f36f 0300 	bfc	r3, #0, #1
 800f548:	753b      	strb	r3, [r7, #20]
#endif /* UNUSED - WINS */

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d113      	bne.n	800f578 <ipcp_rejci+0x202>
	goto bad;
    /*
     * Now we can update state.
     */
    if (f->state != PPP_FSM_OPENED)
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	7c1b      	ldrb	r3, [r3, #16]
 800f554:	2b09      	cmp	r3, #9
 800f556:	d007      	beq.n	800f568 <ipcp_rejci+0x1f2>
	*go = try_;
 800f558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f55a:	461c      	mov	r4, r3
 800f55c:	f107 0314 	add.w	r3, r7, #20
 800f560:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f564:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return 1;
 800f568:	2301      	movs	r3, #1
 800f56a:	e007      	b.n	800f57c <ipcp_rejci+0x206>
    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800f56c:	bf00      	nop
 800f56e:	e004      	b.n	800f57a <ipcp_rejci+0x204>
 800f570:	bf00      	nop
 800f572:	e002      	b.n	800f57a <ipcp_rejci+0x204>
    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800f574:	bf00      	nop
 800f576:	e000      	b.n	800f57a <ipcp_rejci+0x204>
	goto bad;
 800f578:	bf00      	nop

bad:
    IPCPDEBUG(("ipcp_rejci: received bad Reject!"));
    return 0;
 800f57a:	2300      	movs	r3, #0
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	373c      	adds	r7, #60	; 0x3c
 800f580:	46bd      	mov	sp, r7
 800f582:	bd90      	pop	{r4, r7, pc}

0800f584 <ipcp_reqci>:
 * CONFNAK; returns CONFREJ if it can't return CONFACK.
 *
 * inp = Requested CIs
 * len = Length of requested CIs
 */
static int ipcp_reqci(fsm *f, u_char *inp, int *len, int reject_if_disagree) {
 800f584:	b580      	push	{r7, lr}
 800f586:	b094      	sub	sp, #80	; 0x50
 800f588:	af00      	add	r7, sp, #0
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	607a      	str	r2, [r7, #4]
 800f590:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	633b      	str	r3, [r7, #48]	; 0x30
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800f598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f59a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800f59e:	62fb      	str	r3, [r7, #44]	; 0x2c
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800f5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800f5a6:	62bb      	str	r3, [r7, #40]	; 0x28
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800f5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5aa:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800f5ae:	627b      	str	r3, [r7, #36]	; 0x24
    u_short cilen, citype;	/* Parsed len, type */
#if VJ_SUPPORT
    u_short cishort;		/* Parsed short value */
#endif /* VJ_SUPPORT */
    u32_t tl, ciaddr1, ciaddr2;/* Parsed address values */
    int rc = CONFACK;		/* Final packet return code */
 800f5b0:	2302      	movs	r3, #2
 800f5b2:	647b      	str	r3, [r7, #68]	; 0x44
    int orc;			/* Individual option return code */
    u_char *p;			/* Pointer to next char to parse */
    u_char *ucp = inp;		/* Pointer to current output char */
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	63bb      	str	r3, [r7, #56]	; 0x38
    int l = *len;		/* Length left */
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_DNS */

    /*
     * Reset all his options.
     */
    BZERO(ho, sizeof(*ho));
 800f5be:	220c      	movs	r2, #12
 800f5c0:	2100      	movs	r1, #0
 800f5c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5c4:	f004 fd3b 	bl	801403e <memset>
    
    /*
     * Process all his options.
     */
    next = inp;
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    while (l) {
 800f5cc:	e1f3      	b.n	800f9b6 <ipcp_reqci+0x432>
	orc = CONFACK;			/* Assume success */
 800f5ce:	2302      	movs	r3, #2
 800f5d0:	643b      	str	r3, [r7, #64]	; 0x40
	cip = p = next;			/* Remember beginning of CI */
 800f5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5d8:	623b      	str	r3, [r7, #32]
	if (l < 2 ||			/* Not enough data for CI header or */
 800f5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	dd0b      	ble.n	800f5f8 <ipcp_reqci+0x74>
	    p[1] < 2 ||			/*  CI length too small or */
 800f5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	781b      	ldrb	r3, [r3, #0]
	if (l < 2 ||			/* Not enough data for CI header or */
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d906      	bls.n	800f5f8 <ipcp_reqci+0x74>
	    p[1] > l) {			/*  CI length too big? */
 800f5ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	461a      	mov	r2, r3
	    p[1] < 2 ||			/*  CI length too small or */
 800f5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	dd07      	ble.n	800f608 <ipcp_reqci+0x84>
	    IPCPDEBUG(("ipcp_reqci: bad CI length!"));
	    orc = CONFREJ;		/* Reject bad CI */
 800f5f8:	2304      	movs	r3, #4
 800f5fa:	643b      	str	r3, [r7, #64]	; 0x40
	    cilen = l;			/* Reject till end of packet */
 800f5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5fe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	    l = 0;			/* Don't loop again */
 800f602:	2300      	movs	r3, #0
 800f604:	637b      	str	r3, [r7, #52]	; 0x34
	    goto endswitch;
 800f606:	e1a1      	b.n	800f94c <ipcp_reqci+0x3c8>
	}
	GETCHAR(citype, p);		/* Parse CI type */
 800f608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f60a:	1c5a      	adds	r2, r3, #1
 800f60c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	83fb      	strh	r3, [r7, #30]
	GETCHAR(cilen, p);		/* Parse CI length */
 800f612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f614:	1c5a      	adds	r2, r3, #1
 800f616:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	l -= cilen;			/* Adjust remaining length */
 800f61e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f624:	1ad3      	subs	r3, r2, r3
 800f626:	637b      	str	r3, [r7, #52]	; 0x34
	next += cilen;			/* Step to next CI */
 800f628:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f62c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f62e:	4413      	add	r3, r2
 800f630:	64fb      	str	r3, [r7, #76]	; 0x4c

	switch (citype) {		/* Check CI type */
 800f632:	8bfb      	ldrh	r3, [r7, #30]
 800f634:	2b01      	cmp	r3, #1
 800f636:	d003      	beq.n	800f640 <ipcp_reqci+0xbc>
 800f638:	2b03      	cmp	r3, #3
 800f63a:	f000 80f6 	beq.w	800f82a <ipcp_reqci+0x2a6>
 800f63e:	e182      	b.n	800f946 <ipcp_reqci+0x3c2>
	case CI_ADDRS:
	    if (!ao->old_addrs || ho->neg_addr ||
 800f640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f642:	781b      	ldrb	r3, [r3, #0]
 800f644:	f003 0302 	and.w	r3, r3, #2
 800f648:	b2db      	uxtb	r3, r3
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d00a      	beq.n	800f664 <ipcp_reqci+0xe0>
 800f64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	f003 0301 	and.w	r3, r3, #1
 800f656:	b2db      	uxtb	r3, r3
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d103      	bne.n	800f664 <ipcp_reqci+0xe0>
 800f65c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f660:	2b0a      	cmp	r3, #10
 800f662:	d002      	beq.n	800f66a <ipcp_reqci+0xe6>
		cilen != CILEN_ADDRS) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800f664:	2304      	movs	r3, #4
 800f666:	643b      	str	r3, [r7, #64]	; 0x40
		break;
 800f668:	e170      	b.n	800f94c <ipcp_reqci+0x3c8>
	     * If he has no address, or if we both have his address but
	     * disagree about it, then NAK it with our idea.
	     * In particular, if we don't know his address, but he does,
	     * then accept it.
	     */
	    GETLONG(tl, p);		/* Parse source address (his) */
 800f66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f66c:	1c5a      	adds	r2, r3, #1
 800f66e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	021b      	lsls	r3, r3, #8
 800f674:	61bb      	str	r3, [r7, #24]
 800f676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f678:	1c5a      	adds	r2, r3, #1
 800f67a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f67c:	781b      	ldrb	r3, [r3, #0]
 800f67e:	461a      	mov	r2, r3
 800f680:	69bb      	ldr	r3, [r7, #24]
 800f682:	4313      	orrs	r3, r2
 800f684:	61bb      	str	r3, [r7, #24]
 800f686:	69bb      	ldr	r3, [r7, #24]
 800f688:	021b      	lsls	r3, r3, #8
 800f68a:	61bb      	str	r3, [r7, #24]
 800f68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f68e:	1c5a      	adds	r2, r3, #1
 800f690:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	461a      	mov	r2, r3
 800f696:	69bb      	ldr	r3, [r7, #24]
 800f698:	4313      	orrs	r3, r2
 800f69a:	61bb      	str	r3, [r7, #24]
 800f69c:	69bb      	ldr	r3, [r7, #24]
 800f69e:	021b      	lsls	r3, r3, #8
 800f6a0:	61bb      	str	r3, [r7, #24]
 800f6a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6a4:	1c5a      	adds	r2, r3, #1
 800f6a6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	69bb      	ldr	r3, [r7, #24]
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	61bb      	str	r3, [r7, #24]
	    ciaddr1 = lwip_htonl(tl);
 800f6b2:	69b8      	ldr	r0, [r7, #24]
 800f6b4:	f7f4 fc81 	bl	8003fba <lwip_htonl>
 800f6b8:	6178      	str	r0, [r7, #20]
	    if (ciaddr1 != wo->hisaddr
 800f6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6bc:	689a      	ldr	r2, [r3, #8]
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d033      	beq.n	800f72c <ipcp_reqci+0x1a8>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d006      	beq.n	800f6d8 <ipcp_reqci+0x154>
 800f6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	f003 0310 	and.w	r3, r3, #16
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d129      	bne.n	800f72c <ipcp_reqci+0x1a8>
		orc = CONFNAK;
 800f6d8:	2303      	movs	r3, #3
 800f6da:	643b      	str	r3, [r7, #64]	; 0x40
		if (!reject_if_disagree) {
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d133      	bne.n	800f74a <ipcp_reqci+0x1c6>
		    DECPTR(sizeof(u32_t), p);
 800f6e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6e4:	3b04      	subs	r3, #4
 800f6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
		    tl = lwip_ntohl(wo->hisaddr);
 800f6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ea:	689b      	ldr	r3, [r3, #8]
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7f4 fc64 	bl	8003fba <lwip_htonl>
 800f6f2:	61b8      	str	r0, [r7, #24]
		    PUTLONG(tl, p);
 800f6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6f6:	1c5a      	adds	r2, r3, #1
 800f6f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f6fa:	69ba      	ldr	r2, [r7, #24]
 800f6fc:	0e12      	lsrs	r2, r2, #24
 800f6fe:	b2d2      	uxtb	r2, r2
 800f700:	701a      	strb	r2, [r3, #0]
 800f702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f704:	1c5a      	adds	r2, r3, #1
 800f706:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f708:	69ba      	ldr	r2, [r7, #24]
 800f70a:	0c12      	lsrs	r2, r2, #16
 800f70c:	b2d2      	uxtb	r2, r2
 800f70e:	701a      	strb	r2, [r3, #0]
 800f710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f712:	1c5a      	adds	r2, r3, #1
 800f714:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f716:	69ba      	ldr	r2, [r7, #24]
 800f718:	0a12      	lsrs	r2, r2, #8
 800f71a:	b2d2      	uxtb	r2, r2
 800f71c:	701a      	strb	r2, [r3, #0]
 800f71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f720:	1c5a      	adds	r2, r3, #1
 800f722:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f724:	69ba      	ldr	r2, [r7, #24]
 800f726:	b2d2      	uxtb	r2, r2
 800f728:	701a      	strb	r2, [r3, #0]
		if (!reject_if_disagree) {
 800f72a:	e00e      	b.n	800f74a <ipcp_reqci+0x1c6>
		}
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d10b      	bne.n	800f74a <ipcp_reqci+0x1c6>
 800f732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f734:	689b      	ldr	r3, [r3, #8]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d107      	bne.n	800f74a <ipcp_reqci+0x1c6>
		/*
		 * If neither we nor he knows his address, reject the option.
		 */
		orc = CONFREJ;
 800f73a:	2304      	movs	r3, #4
 800f73c:	643b      	str	r3, [r7, #64]	; 0x40
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 800f73e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f740:	7813      	ldrb	r3, [r2, #0]
 800f742:	f36f 0382 	bfc	r3, #2, #1
 800f746:	7013      	strb	r3, [r2, #0]
		break;
 800f748:	e100      	b.n	800f94c <ipcp_reqci+0x3c8>

	    /*
	     * If he doesn't know our address, or if we both have our address
	     * but disagree about it, then NAK it with our idea.
	     */
	    GETLONG(tl, p);		/* Parse destination address (ours) */
 800f74a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f74c:	1c5a      	adds	r2, r3, #1
 800f74e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	021b      	lsls	r3, r3, #8
 800f754:	61bb      	str	r3, [r7, #24]
 800f756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f758:	1c5a      	adds	r2, r3, #1
 800f75a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	461a      	mov	r2, r3
 800f760:	69bb      	ldr	r3, [r7, #24]
 800f762:	4313      	orrs	r3, r2
 800f764:	61bb      	str	r3, [r7, #24]
 800f766:	69bb      	ldr	r3, [r7, #24]
 800f768:	021b      	lsls	r3, r3, #8
 800f76a:	61bb      	str	r3, [r7, #24]
 800f76c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f76e:	1c5a      	adds	r2, r3, #1
 800f770:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	461a      	mov	r2, r3
 800f776:	69bb      	ldr	r3, [r7, #24]
 800f778:	4313      	orrs	r3, r2
 800f77a:	61bb      	str	r3, [r7, #24]
 800f77c:	69bb      	ldr	r3, [r7, #24]
 800f77e:	021b      	lsls	r3, r3, #8
 800f780:	61bb      	str	r3, [r7, #24]
 800f782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f784:	1c5a      	adds	r2, r3, #1
 800f786:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	461a      	mov	r2, r3
 800f78c:	69bb      	ldr	r3, [r7, #24]
 800f78e:	4313      	orrs	r3, r2
 800f790:	61bb      	str	r3, [r7, #24]
	    ciaddr2 = lwip_htonl(tl);
 800f792:	69b8      	ldr	r0, [r7, #24]
 800f794:	f7f4 fc11 	bl	8003fba <lwip_htonl>
 800f798:	6138      	str	r0, [r7, #16]
	    if (ciaddr2 != wo->ouraddr) {
 800f79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79c:	685a      	ldr	r2, [r3, #4]
 800f79e:	693b      	ldr	r3, [r7, #16]
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	d036      	beq.n	800f812 <ipcp_reqci+0x28e>
		if (ciaddr2 == 0 || !wo->accept_local) {
 800f7a4:	693b      	ldr	r3, [r7, #16]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d006      	beq.n	800f7b8 <ipcp_reqci+0x234>
 800f7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	f003 0308 	and.w	r3, r3, #8
 800f7b2:	b2db      	uxtb	r3, r3
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d129      	bne.n	800f80c <ipcp_reqci+0x288>
		    orc = CONFNAK;
 800f7b8:	2303      	movs	r3, #3
 800f7ba:	643b      	str	r3, [r7, #64]	; 0x40
		    if (!reject_if_disagree) {
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d127      	bne.n	800f812 <ipcp_reqci+0x28e>
			DECPTR(sizeof(u32_t), p);
 800f7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7c4:	3b04      	subs	r3, #4
 800f7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
			tl = lwip_ntohl(wo->ouraddr);
 800f7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7f4 fbf4 	bl	8003fba <lwip_htonl>
 800f7d2:	61b8      	str	r0, [r7, #24]
			PUTLONG(tl, p);
 800f7d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7d6:	1c5a      	adds	r2, r3, #1
 800f7d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f7da:	69ba      	ldr	r2, [r7, #24]
 800f7dc:	0e12      	lsrs	r2, r2, #24
 800f7de:	b2d2      	uxtb	r2, r2
 800f7e0:	701a      	strb	r2, [r3, #0]
 800f7e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e4:	1c5a      	adds	r2, r3, #1
 800f7e6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f7e8:	69ba      	ldr	r2, [r7, #24]
 800f7ea:	0c12      	lsrs	r2, r2, #16
 800f7ec:	b2d2      	uxtb	r2, r2
 800f7ee:	701a      	strb	r2, [r3, #0]
 800f7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7f2:	1c5a      	adds	r2, r3, #1
 800f7f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f7f6:	69ba      	ldr	r2, [r7, #24]
 800f7f8:	0a12      	lsrs	r2, r2, #8
 800f7fa:	b2d2      	uxtb	r2, r2
 800f7fc:	701a      	strb	r2, [r3, #0]
 800f7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f800:	1c5a      	adds	r2, r3, #1
 800f802:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f804:	69ba      	ldr	r2, [r7, #24]
 800f806:	b2d2      	uxtb	r2, r2
 800f808:	701a      	strb	r2, [r3, #0]
		    if (!reject_if_disagree) {
 800f80a:	e002      	b.n	800f812 <ipcp_reqci+0x28e>
		    }
		} else {
		    wo->ouraddr = ciaddr2;	/* accept peer's idea */
 800f80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f80e:	693a      	ldr	r2, [r7, #16]
 800f810:	605a      	str	r2, [r3, #4]
		}
	    }

	    ho->old_addrs = 1;
 800f812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f814:	7813      	ldrb	r3, [r2, #0]
 800f816:	f043 0302 	orr.w	r3, r3, #2
 800f81a:	7013      	strb	r3, [r2, #0]
	    ho->hisaddr = ciaddr1;
 800f81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f81e:	697a      	ldr	r2, [r7, #20]
 800f820:	609a      	str	r2, [r3, #8]
	    ho->ouraddr = ciaddr2;
 800f822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f824:	693a      	ldr	r2, [r7, #16]
 800f826:	605a      	str	r2, [r3, #4]
	    break;
 800f828:	e090      	b.n	800f94c <ipcp_reqci+0x3c8>

	case CI_ADDR:
	    if (!ao->neg_addr || ho->old_addrs ||
 800f82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	f003 0301 	and.w	r3, r3, #1
 800f832:	b2db      	uxtb	r3, r3
 800f834:	2b00      	cmp	r3, #0
 800f836:	d00a      	beq.n	800f84e <ipcp_reqci+0x2ca>
 800f838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	f003 0302 	and.w	r3, r3, #2
 800f840:	b2db      	uxtb	r3, r3
 800f842:	2b00      	cmp	r3, #0
 800f844:	d103      	bne.n	800f84e <ipcp_reqci+0x2ca>
 800f846:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f84a:	2b06      	cmp	r3, #6
 800f84c:	d002      	beq.n	800f854 <ipcp_reqci+0x2d0>
		cilen != CILEN_ADDR) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800f84e:	2304      	movs	r3, #4
 800f850:	643b      	str	r3, [r7, #64]	; 0x40
		break;
 800f852:	e07b      	b.n	800f94c <ipcp_reqci+0x3c8>
	     * If he has no address, or if we both have his address but
	     * disagree about it, then NAK it with our idea.
	     * In particular, if we don't know his address, but he does,
	     * then accept it.
	     */
	    GETLONG(tl, p);	/* Parse source address (his) */
 800f854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f856:	1c5a      	adds	r2, r3, #1
 800f858:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	021b      	lsls	r3, r3, #8
 800f85e:	61bb      	str	r3, [r7, #24]
 800f860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f862:	1c5a      	adds	r2, r3, #1
 800f864:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f866:	781b      	ldrb	r3, [r3, #0]
 800f868:	461a      	mov	r2, r3
 800f86a:	69bb      	ldr	r3, [r7, #24]
 800f86c:	4313      	orrs	r3, r2
 800f86e:	61bb      	str	r3, [r7, #24]
 800f870:	69bb      	ldr	r3, [r7, #24]
 800f872:	021b      	lsls	r3, r3, #8
 800f874:	61bb      	str	r3, [r7, #24]
 800f876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f878:	1c5a      	adds	r2, r3, #1
 800f87a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	461a      	mov	r2, r3
 800f880:	69bb      	ldr	r3, [r7, #24]
 800f882:	4313      	orrs	r3, r2
 800f884:	61bb      	str	r3, [r7, #24]
 800f886:	69bb      	ldr	r3, [r7, #24]
 800f888:	021b      	lsls	r3, r3, #8
 800f88a:	61bb      	str	r3, [r7, #24]
 800f88c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f88e:	1c5a      	adds	r2, r3, #1
 800f890:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	461a      	mov	r2, r3
 800f896:	69bb      	ldr	r3, [r7, #24]
 800f898:	4313      	orrs	r3, r2
 800f89a:	61bb      	str	r3, [r7, #24]
	    ciaddr1 = lwip_htonl(tl);
 800f89c:	69b8      	ldr	r0, [r7, #24]
 800f89e:	f7f4 fb8c 	bl	8003fba <lwip_htonl>
 800f8a2:	6178      	str	r0, [r7, #20]
	    if (ciaddr1 != wo->hisaddr
 800f8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a6:	689a      	ldr	r2, [r3, #8]
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d033      	beq.n	800f916 <ipcp_reqci+0x392>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d006      	beq.n	800f8c2 <ipcp_reqci+0x33e>
 800f8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	f003 0310 	and.w	r3, r3, #16
 800f8bc:	b2db      	uxtb	r3, r3
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d129      	bne.n	800f916 <ipcp_reqci+0x392>
		orc = CONFNAK;
 800f8c2:	2303      	movs	r3, #3
 800f8c4:	643b      	str	r3, [r7, #64]	; 0x40
		if (!reject_if_disagree) {
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d133      	bne.n	800f934 <ipcp_reqci+0x3b0>
		    DECPTR(sizeof(u32_t), p);
 800f8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8ce:	3b04      	subs	r3, #4
 800f8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		    tl = lwip_ntohl(wo->hisaddr);
 800f8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d4:	689b      	ldr	r3, [r3, #8]
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7f4 fb6f 	bl	8003fba <lwip_htonl>
 800f8dc:	61b8      	str	r0, [r7, #24]
		    PUTLONG(tl, p);
 800f8de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8e0:	1c5a      	adds	r2, r3, #1
 800f8e2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f8e4:	69ba      	ldr	r2, [r7, #24]
 800f8e6:	0e12      	lsrs	r2, r2, #24
 800f8e8:	b2d2      	uxtb	r2, r2
 800f8ea:	701a      	strb	r2, [r3, #0]
 800f8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8ee:	1c5a      	adds	r2, r3, #1
 800f8f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f8f2:	69ba      	ldr	r2, [r7, #24]
 800f8f4:	0c12      	lsrs	r2, r2, #16
 800f8f6:	b2d2      	uxtb	r2, r2
 800f8f8:	701a      	strb	r2, [r3, #0]
 800f8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8fc:	1c5a      	adds	r2, r3, #1
 800f8fe:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f900:	69ba      	ldr	r2, [r7, #24]
 800f902:	0a12      	lsrs	r2, r2, #8
 800f904:	b2d2      	uxtb	r2, r2
 800f906:	701a      	strb	r2, [r3, #0]
 800f908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f90a:	1c5a      	adds	r2, r3, #1
 800f90c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f90e:	69ba      	ldr	r2, [r7, #24]
 800f910:	b2d2      	uxtb	r2, r2
 800f912:	701a      	strb	r2, [r3, #0]
		if (!reject_if_disagree) {
 800f914:	e00e      	b.n	800f934 <ipcp_reqci+0x3b0>
		}
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d10b      	bne.n	800f934 <ipcp_reqci+0x3b0>
 800f91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91e:	689b      	ldr	r3, [r3, #8]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d107      	bne.n	800f934 <ipcp_reqci+0x3b0>
		/*
		 * Don't ACK an address of 0.0.0.0 - reject it instead.
		 */
		orc = CONFREJ;
 800f924:	2304      	movs	r3, #4
 800f926:	643b      	str	r3, [r7, #64]	; 0x40
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 800f928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f92a:	7813      	ldrb	r3, [r2, #0]
 800f92c:	f36f 0382 	bfc	r3, #2, #1
 800f930:	7013      	strb	r3, [r2, #0]
		break;
 800f932:	e00b      	b.n	800f94c <ipcp_reqci+0x3c8>
	    }
	
	    ho->neg_addr = 1;
 800f934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f936:	7813      	ldrb	r3, [r2, #0]
 800f938:	f043 0301 	orr.w	r3, r3, #1
 800f93c:	7013      	strb	r3, [r2, #0]
	    ho->hisaddr = ciaddr1;
 800f93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f940:	697a      	ldr	r2, [r7, #20]
 800f942:	609a      	str	r2, [r3, #8]
	    break;
 800f944:	e002      	b.n	800f94c <ipcp_reqci+0x3c8>
	    }
	    break;
#endif /* VJ_SUPPORT */

	default:
	    orc = CONFREJ;
 800f946:	2304      	movs	r3, #4
 800f948:	643b      	str	r3, [r7, #64]	; 0x40
	    break;
 800f94a:	bf00      	nop
	}
endswitch:
	if (orc == CONFACK &&		/* Good CI */
 800f94c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f94e:	2b02      	cmp	r3, #2
 800f950:	d103      	bne.n	800f95a <ipcp_reqci+0x3d6>
 800f952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f954:	2b02      	cmp	r3, #2
 800f956:	d000      	beq.n	800f95a <ipcp_reqci+0x3d6>
	    rc != CONFACK)		/*  but prior CI wasn't? */
	    continue;			/* Don't send this one */
 800f958:	e02d      	b.n	800f9b6 <ipcp_reqci+0x432>

	if (orc == CONFNAK) {		/* Nak this CI? */
 800f95a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f95c:	2b03      	cmp	r3, #3
 800f95e:	d110      	bne.n	800f982 <ipcp_reqci+0x3fe>
	    if (reject_if_disagree)	/* Getting fed up with sending NAKs? */
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d002      	beq.n	800f96c <ipcp_reqci+0x3e8>
		orc = CONFREJ;		/* Get tough if so */
 800f966:	2304      	movs	r3, #4
 800f968:	643b      	str	r3, [r7, #64]	; 0x40
 800f96a:	e00a      	b.n	800f982 <ipcp_reqci+0x3fe>
	    else {
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 800f96c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f96e:	2b04      	cmp	r3, #4
 800f970:	d100      	bne.n	800f974 <ipcp_reqci+0x3f0>
		    continue;		/* Don't send this one */
 800f972:	e020      	b.n	800f9b6 <ipcp_reqci+0x432>
		if (rc == CONFACK) {	/* Ack'd all prior CIs? */
 800f974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f976:	2b02      	cmp	r3, #2
 800f978:	d103      	bne.n	800f982 <ipcp_reqci+0x3fe>
		    rc = CONFNAK;	/* Not anymore... */
 800f97a:	2303      	movs	r3, #3
 800f97c:	647b      	str	r3, [r7, #68]	; 0x44
		    ucp = inp;		/* Backup */
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	    }
	}

	if (orc == CONFREJ &&		/* Reject this CI */
 800f982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f984:	2b04      	cmp	r3, #4
 800f986:	d106      	bne.n	800f996 <ipcp_reqci+0x412>
 800f988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f98a:	2b04      	cmp	r3, #4
 800f98c:	d003      	beq.n	800f996 <ipcp_reqci+0x412>
	    rc != CONFREJ) {		/*  but no prior ones? */
	    rc = CONFREJ;
 800f98e:	2304      	movs	r3, #4
 800f990:	647b      	str	r3, [r7, #68]	; 0x44
	    ucp = inp;			/* Backup */
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	/* Need to move CI? */
	if (ucp != cip)
 800f996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f998:	6a3b      	ldr	r3, [r7, #32]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d006      	beq.n	800f9ac <ipcp_reqci+0x428>
	    MEMCPY(ucp, cip, cilen);	/* Move it */
 800f99e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	6a39      	ldr	r1, [r7, #32]
 800f9a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f9a8:	f004 fb24 	bl	8013ff4 <memcpy>

	/* Update output pointer */
	INCPTR(cilen, ucp);
 800f9ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f9b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9b2:	4413      	add	r3, r2
 800f9b4:	63bb      	str	r3, [r7, #56]	; 0x38
    while (l) {
 800f9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	f47f ae08 	bne.w	800f5ce <ipcp_reqci+0x4a>
     * their address, and they didn't send their address, then we
     * send a NAK with a CI_ADDR option appended.  We assume the
     * input buffer is long enough that we can append the extra
     * option safely.
     */
    if (rc != CONFREJ && !ho->neg_addr && !ho->old_addrs &&
 800f9be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9c0:	2b04      	cmp	r3, #4
 800f9c2:	d055      	beq.n	800fa70 <ipcp_reqci+0x4ec>
 800f9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c6:	781b      	ldrb	r3, [r3, #0]
 800f9c8:	f003 0301 	and.w	r3, r3, #1
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d14e      	bne.n	800fa70 <ipcp_reqci+0x4ec>
 800f9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	f003 0302 	and.w	r3, r3, #2
 800f9da:	b2db      	uxtb	r3, r3
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d147      	bne.n	800fa70 <ipcp_reqci+0x4ec>
 800f9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	f003 0304 	and.w	r3, r3, #4
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d040      	beq.n	800fa70 <ipcp_reqci+0x4ec>
	wo->req_addr && !reject_if_disagree && !pcb->settings.noremoteip) {
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d13d      	bne.n	800fa70 <ipcp_reqci+0x4ec>
 800f9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	f003 0304 	and.w	r3, r3, #4
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d136      	bne.n	800fa70 <ipcp_reqci+0x4ec>
	if (rc == CONFACK) {
 800fa02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa04:	2b02      	cmp	r3, #2
 800fa06:	d108      	bne.n	800fa1a <ipcp_reqci+0x496>
	    rc = CONFNAK;
 800fa08:	2303      	movs	r3, #3
 800fa0a:	647b      	str	r3, [r7, #68]	; 0x44
	    ucp = inp;			/* reset pointer */
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	63bb      	str	r3, [r7, #56]	; 0x38
	    wo->req_addr = 0;		/* don't ask again */
 800fa10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa12:	7813      	ldrb	r3, [r2, #0]
 800fa14:	f36f 0382 	bfc	r3, #2, #1
 800fa18:	7013      	strb	r3, [r2, #0]
	}
	PUTCHAR(CI_ADDR, ucp);
 800fa1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1c:	1c5a      	adds	r2, r3, #1
 800fa1e:	63ba      	str	r2, [r7, #56]	; 0x38
 800fa20:	2203      	movs	r2, #3
 800fa22:	701a      	strb	r2, [r3, #0]
	PUTCHAR(CILEN_ADDR, ucp);
 800fa24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa26:	1c5a      	adds	r2, r3, #1
 800fa28:	63ba      	str	r2, [r7, #56]	; 0x38
 800fa2a:	2206      	movs	r2, #6
 800fa2c:	701a      	strb	r2, [r3, #0]
	tl = lwip_ntohl(wo->hisaddr);
 800fa2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa30:	689b      	ldr	r3, [r3, #8]
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7f4 fac1 	bl	8003fba <lwip_htonl>
 800fa38:	61b8      	str	r0, [r7, #24]
	PUTLONG(tl, ucp);
 800fa3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa3c:	1c5a      	adds	r2, r3, #1
 800fa3e:	63ba      	str	r2, [r7, #56]	; 0x38
 800fa40:	69ba      	ldr	r2, [r7, #24]
 800fa42:	0e12      	lsrs	r2, r2, #24
 800fa44:	b2d2      	uxtb	r2, r2
 800fa46:	701a      	strb	r2, [r3, #0]
 800fa48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4a:	1c5a      	adds	r2, r3, #1
 800fa4c:	63ba      	str	r2, [r7, #56]	; 0x38
 800fa4e:	69ba      	ldr	r2, [r7, #24]
 800fa50:	0c12      	lsrs	r2, r2, #16
 800fa52:	b2d2      	uxtb	r2, r2
 800fa54:	701a      	strb	r2, [r3, #0]
 800fa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa58:	1c5a      	adds	r2, r3, #1
 800fa5a:	63ba      	str	r2, [r7, #56]	; 0x38
 800fa5c:	69ba      	ldr	r2, [r7, #24]
 800fa5e:	0a12      	lsrs	r2, r2, #8
 800fa60:	b2d2      	uxtb	r2, r2
 800fa62:	701a      	strb	r2, [r3, #0]
 800fa64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa66:	1c5a      	adds	r2, r3, #1
 800fa68:	63ba      	str	r2, [r7, #56]	; 0x38
 800fa6a:	69ba      	ldr	r2, [r7, #24]
 800fa6c:	b2d2      	uxtb	r2, r2
 800fa6e:	701a      	strb	r2, [r3, #0]
    }

    *len = ucp - inp;			/* Compute output length */
 800fa70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	1ad2      	subs	r2, r2, r3
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	601a      	str	r2, [r3, #0]
    IPCPDEBUG(("ipcp: returning Configure-%s", CODENAME(rc)));
    return (rc);			/* Return final code */
 800fa7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3750      	adds	r7, #80	; 0x50
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}

0800fa84 <ipcp_up>:
/*
 * ipcp_up - IPCP has come UP.
 *
 * Configure the IP network interface appropriately and bring it up.
 */
static void ipcp_up(fsm *f) {
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b088      	sub	sp, #32
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	61fb      	str	r3, [r7, #28]
    u32_t mask;
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fa98:	61bb      	str	r3, [r7, #24]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800faa0:	617b      	str	r3, [r7, #20]
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800faa2:	69fb      	ldr	r3, [r7, #28]
 800faa4:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800faa8:	613b      	str	r3, [r7, #16]
    IPCPDEBUG(("ipcp: up"));

    /*
     * We must have a non-zero IP address for both ends of the link.
     */
    if (!ho->neg_addr && !ho->old_addrs)
 800faaa:	69bb      	ldr	r3, [r7, #24]
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	f003 0301 	and.w	r3, r3, #1
 800fab2:	b2db      	uxtb	r3, r3
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d10a      	bne.n	800face <ipcp_up+0x4a>
 800fab8:	69bb      	ldr	r3, [r7, #24]
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	f003 0302 	and.w	r3, r3, #2
 800fac0:	b2db      	uxtb	r3, r3
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d103      	bne.n	800face <ipcp_up+0x4a>
	ho->hisaddr = wo->hisaddr;
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	689a      	ldr	r2, [r3, #8]
 800faca:	69bb      	ldr	r3, [r7, #24]
 800facc:	609a      	str	r2, [r3, #8]

    if (!(go->neg_addr || go->old_addrs) && (wo->neg_addr || wo->old_addrs)
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	781b      	ldrb	r3, [r3, #0]
 800fad2:	f003 0301 	and.w	r3, r3, #1
 800fad6:	b2db      	uxtb	r3, r3
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d11f      	bne.n	800fb1c <ipcp_up+0x98>
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	781b      	ldrb	r3, [r3, #0]
 800fae0:	f003 0302 	and.w	r3, r3, #2
 800fae4:	b2db      	uxtb	r3, r3
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d118      	bne.n	800fb1c <ipcp_up+0x98>
 800faea:	693b      	ldr	r3, [r7, #16]
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	f003 0301 	and.w	r3, r3, #1
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d106      	bne.n	800fb06 <ipcp_up+0x82>
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	f003 0302 	and.w	r3, r3, #2
 800fb00:	b2db      	uxtb	r3, r3
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d00a      	beq.n	800fb1c <ipcp_up+0x98>
	&& wo->ouraddr != 0) {
 800fb06:	693b      	ldr	r3, [r7, #16]
 800fb08:	685b      	ldr	r3, [r3, #4]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d006      	beq.n	800fb1c <ipcp_up+0x98>
	ppp_error(("Peer refused to agree to our IP address"));
	ipcp_close(f->pcb, "Refused our IP address");
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	493b      	ldr	r1, [pc, #236]	; (800fc00 <ipcp_up+0x17c>)
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7fe ff36 	bl	800e986 <ipcp_close>
	return;
 800fb1a:	e06e      	b.n	800fbfa <ipcp_up+0x176>
    }
    if (go->ouraddr == 0) {
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	685b      	ldr	r3, [r3, #4]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d106      	bne.n	800fb32 <ipcp_up+0xae>
	ppp_error(("Could not determine local IP address"));
	ipcp_close(f->pcb, "Could not determine local IP address");
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	4936      	ldr	r1, [pc, #216]	; (800fc04 <ipcp_up+0x180>)
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7fe ff2b 	bl	800e986 <ipcp_close>
	return;
 800fb30:	e063      	b.n	800fbfa <ipcp_up+0x176>
    }
    if (ho->hisaddr == 0 && !pcb->settings.noremoteip) {
 800fb32:	69bb      	ldr	r3, [r7, #24]
 800fb34:	689b      	ldr	r3, [r3, #8]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d10c      	bne.n	800fb54 <ipcp_up+0xd0>
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	f003 0304 	and.w	r3, r3, #4
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d105      	bne.n	800fb54 <ipcp_up+0xd0>
	ho->hisaddr = lwip_htonl(0x0a404040);
 800fb48:	482f      	ldr	r0, [pc, #188]	; (800fc08 <ipcp_up+0x184>)
 800fb4a:	f7f4 fa36 	bl	8003fba <lwip_htonl>
 800fb4e:	4602      	mov	r2, r0
 800fb50:	69bb      	ldr	r3, [r7, #24]
 800fb52:	609a      	str	r2, [r3, #8]
#endif /* LWIP_DNS */

    /*
     * Check that the peer is allowed to use the IP address it wants.
     */
    if (ho->hisaddr != 0) {
 800fb54:	69bb      	ldr	r3, [r7, #24]
 800fb56:	689b      	ldr	r3, [r3, #8]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d01a      	beq.n	800fb92 <ipcp_up+0x10e>
	u32_t addr = lwip_ntohl(ho->hisaddr);
 800fb5c:	69bb      	ldr	r3, [r7, #24]
 800fb5e:	689b      	ldr	r3, [r3, #8]
 800fb60:	4618      	mov	r0, r3
 800fb62:	f7f4 fa2a 	bl	8003fba <lwip_htonl>
 800fb66:	60f8      	str	r0, [r7, #12]
	if ((addr >> IP_CLASSA_NSHIFT) == IP_LOOPBACKNET
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	0e1b      	lsrs	r3, r3, #24
 800fb6c:	2b7f      	cmp	r3, #127	; 0x7f
 800fb6e:	d00b      	beq.n	800fb88 <ipcp_up+0x104>
	    || IP_MULTICAST(addr) || IP_BADCLASS(addr)
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fb76:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800fb7a:	d005      	beq.n	800fb88 <ipcp_up+0x104>
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fb82:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 800fb86:	d104      	bne.n	800fb92 <ipcp_up+0x10e>
#if PPP_SERVER && PPP_AUTH_SUPPORT
	    || (pcb->settings.auth_required && wo->hisaddr != ho->hisaddr)
#endif /* PPP_SERVER && PPP_AUTH_SUPPORT */
	    ) {
		ppp_error(("Peer is not authorized to use remote address %I", ho->hisaddr));
		ipcp_close(pcb, "Unauthorized remote IP address");
 800fb88:	4920      	ldr	r1, [pc, #128]	; (800fc0c <ipcp_up+0x188>)
 800fb8a:	69f8      	ldr	r0, [r7, #28]
 800fb8c:	f7fe fefb 	bl	800e986 <ipcp_close>
		return;
 800fb90:	e033      	b.n	800fbfa <ipcp_up+0x176>
#endif /* DEMAND_SUPPORT */
    {
	/*
	 * Set IP addresses and (if specified) netmask.
	 */
	mask = get_mask(go->ouraddr);
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	685b      	ldr	r3, [r3, #4]
 800fb96:	4618      	mov	r0, r3
 800fb98:	f002 fd36 	bl	8012608 <get_mask>
 800fb9c:	60b8      	str	r0, [r7, #8]

#if !(defined(SVR4) && (defined(SNI) || defined(__USLC__)))
	if (!sifaddr(pcb, go->ouraddr, ho->hisaddr, mask)) {
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	6859      	ldr	r1, [r3, #4]
 800fba2:	69bb      	ldr	r3, [r7, #24]
 800fba4:	689a      	ldr	r2, [r3, #8]
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	69f8      	ldr	r0, [r7, #28]
 800fbaa:	f002 fcc3 	bl	8012534 <sifaddr>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d106      	bne.n	800fbc2 <ipcp_up+0x13e>
#if PPP_DEBUG
	    ppp_warn(("Interface configuration failed"));
#endif /* PPP_DEBUG */
	    ipcp_close(f->pcb, "Interface configuration failed");
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	4915      	ldr	r1, [pc, #84]	; (800fc10 <ipcp_up+0x18c>)
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7fe fee3 	bl	800e986 <ipcp_close>
	    return;
 800fbc0:	e01b      	b.n	800fbfa <ipcp_up+0x176>
	}
#endif

	/* bring the interface up for IP */
	if (!sifup(pcb)) {
 800fbc2:	69f8      	ldr	r0, [r7, #28]
 800fbc4:	f002 fce8 	bl	8012598 <sifup>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d106      	bne.n	800fbdc <ipcp_up+0x158>
#if PPP_DEBUG
	    ppp_warn(("Interface failed to come up"));
#endif /* PPP_DEBUG */
	    ipcp_close(f->pcb, "Interface configuration failed");
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	490f      	ldr	r1, [pc, #60]	; (800fc10 <ipcp_up+0x18c>)
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7fe fed6 	bl	800e986 <ipcp_close>
	    return;
 800fbda:	e00e      	b.n	800fbfa <ipcp_up+0x176>
	if (ho->hisaddr != 0 && wo->proxy_arp)
	    if (sifproxyarp(pcb, ho->hisaddr))
		pcb->proxy_arp_set = 1;
#endif /* UNUSED - PROXY ARP */

	wo->ouraddr = go->ouraddr;
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	685a      	ldr	r2, [r3, #4]
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	605a      	str	r2, [r3, #4]

#if PPP_STATS_SUPPORT
    reset_link_stats(f->unit);
#endif /* PPP_STATS_SUPPORT */

    np_up(pcb, PPP_IP);
 800fbe4:	2121      	movs	r1, #33	; 0x21
 800fbe6:	69f8      	ldr	r0, [r7, #28]
 800fbe8:	f7fd fecc 	bl	800d984 <np_up>
    pcb->ipcp_is_up = 1;
 800fbec:	69fa      	ldr	r2, [r7, #28]
 800fbee:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800fbf2:	f043 0304 	orr.w	r3, r3, #4
 800fbf6:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
#endif /* PPP_NOTIFY */
#if 0 /* UNUSED */
    if (ip_up_hook)
	ip_up_hook();
#endif /* UNUSED */
}
 800fbfa:	3720      	adds	r7, #32
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}
 800fc00:	08017bbc 	.word	0x08017bbc
 800fc04:	08017bd4 	.word	0x08017bd4
 800fc08:	0a404040 	.word	0x0a404040
 800fc0c:	08017bfc 	.word	0x08017bfc
 800fc10:	08017c1c 	.word	0x08017c1c

0800fc14 <ipcp_down>:
 * ipcp_down - IPCP has gone DOWN.
 *
 * Take the IP network interface down, clear its addresses
 * and delete routes through it.
 */
static void ipcp_down(fsm *f) {
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b086      	sub	sp, #24
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	617b      	str	r3, [r7, #20]
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fc28:	613b      	str	r3, [r7, #16]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800fc30:	60fb      	str	r3, [r7, #12]
#endif /* PPP_NOTIFY */
#if 0 /* UNUSED */
    if (ip_down_hook)
	ip_down_hook();
#endif /* UNUSED */
    if (pcb->ipcp_is_up) {
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800fc38:	f003 0304 	and.w	r3, r3, #4
 800fc3c:	b2db      	uxtb	r3, r3
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d00a      	beq.n	800fc58 <ipcp_down+0x44>
	pcb->ipcp_is_up = 0;
 800fc42:	697a      	ldr	r2, [r7, #20]
 800fc44:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800fc48:	f36f 0382 	bfc	r3, #2, #1
 800fc4c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	np_down(pcb, PPP_IP);
 800fc50:	2121      	movs	r1, #33	; 0x21
 800fc52:	6978      	ldr	r0, [r7, #20]
 800fc54:	f7fd feb0 	bl	800d9b8 <np_down>
#endif /* DEMAND_SUPPORT */
    {
#if DEMAND_SUPPORT
	sifnpmode(pcb, PPP_IP, NPMODE_DROP);
#endif /* DEMAND_SUPPORT */
	sifdown(pcb);
 800fc58:	6978      	ldr	r0, [r7, #20]
 800fc5a:	f002 fcc0 	bl	80125de <sifdown>
	ipcp_clear_addrs(pcb, go->ouraddr,
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	6859      	ldr	r1, [r3, #4]
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	689a      	ldr	r2, [r3, #8]
 800fc66:	2300      	movs	r3, #0
 800fc68:	6978      	ldr	r0, [r7, #20]
 800fc6a:	f000 f804 	bl	800fc76 <ipcp_clear_addrs>
			 ho->hisaddr, 0);
#if LWIP_DNS
	cdns(pcb, go->dnsaddr[0], go->dnsaddr[1]);
#endif /* LWIP_DNS */
    }
}
 800fc6e:	bf00      	nop
 800fc70:	3718      	adds	r7, #24
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}

0800fc76 <ipcp_clear_addrs>:

/*
 * ipcp_clear_addrs() - clear the interface addresses, routes,
 * proxy arp entries, etc.
 */
static void ipcp_clear_addrs(ppp_pcb *pcb, u32_t ouraddr, u32_t hisaddr, u8_t replacedefaultroute) {
 800fc76:	b580      	push	{r7, lr}
 800fc78:	b084      	sub	sp, #16
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	60f8      	str	r0, [r7, #12]
 800fc7e:	60b9      	str	r1, [r7, #8]
 800fc80:	607a      	str	r2, [r7, #4]
 800fc82:	70fb      	strb	r3, [r7, #3]
    if (!replacedefaultroute && pcb->default_route_set) {
	cifdefaultroute(pcb, ouraddr, hisaddr);
	pcb->default_route_set = 0;
    }
#endif /* UNUSED */
    cifaddr(pcb, ouraddr, hisaddr);
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	68b9      	ldr	r1, [r7, #8]
 800fc88:	68f8      	ldr	r0, [r7, #12]
 800fc8a:	f002 fc6f 	bl	801256c <cifaddr>
}
 800fc8e:	bf00      	nop
 800fc90:	3710      	adds	r7, #16
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}

0800fc96 <ipcp_finished>:


/*
 * ipcp_finished - possibly shut down the lower layers.
 */
static void ipcp_finished(fsm *f) {
 800fc96:	b580      	push	{r7, lr}
 800fc98:	b084      	sub	sp, #16
 800fc9a:	af00      	add	r7, sp, #0
 800fc9c:	6078      	str	r0, [r7, #4]
	ppp_pcb *pcb = f->pcb;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	60fb      	str	r3, [r7, #12]
	if (pcb->ipcp_is_open) {
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800fcaa:	f003 0302 	and.w	r3, r3, #2
 800fcae:	b2db      	uxtb	r3, r3
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d00a      	beq.n	800fcca <ipcp_finished+0x34>
		pcb->ipcp_is_open = 0;
 800fcb4:	68fa      	ldr	r2, [r7, #12]
 800fcb6:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800fcba:	f36f 0341 	bfc	r3, #1, #1
 800fcbe:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		np_finished(pcb, PPP_IP);
 800fcc2:	2121      	movs	r1, #33	; 0x21
 800fcc4:	68f8      	ldr	r0, [r7, #12]
 800fcc6:	f7fd fe91 	bl	800d9ec <np_finished>
	}
}
 800fcca:	bf00      	nop
 800fccc:	3710      	adds	r7, #16
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}
	...

0800fcd4 <lcp_init>:
#endif /* HAVE_MULTILINK */

/*
 * lcp_init - Initialize LCP.
 */
static void lcp_init(ppp_pcb *pcb) {
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b086      	sub	sp, #24
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	3344      	adds	r3, #68	; 0x44
 800fce0:	617b      	str	r3, [r7, #20]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	3360      	adds	r3, #96	; 0x60
 800fce6:	613b      	str	r3, [r7, #16]
    lcp_options *ao = &pcb->lcp_allowoptions;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	33a8      	adds	r3, #168	; 0xa8
 800fcec:	60fb      	str	r3, [r7, #12]

    f->pcb = pcb;
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	687a      	ldr	r2, [r7, #4]
 800fcf2:	601a      	str	r2, [r3, #0]
    f->protocol = PPP_LCP;
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	f24c 0221 	movw	r2, #49185	; 0xc021
 800fcfa:	81da      	strh	r2, [r3, #14]
    f->callbacks = &lcp_callbacks;
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	4a2b      	ldr	r2, [pc, #172]	; (800fdac <lcp_init+0xd8>)
 800fd00:	605a      	str	r2, [r3, #4]

    fsm_init(f);
 800fd02:	6978      	ldr	r0, [r7, #20]
 800fd04:	f7fd fe8e 	bl	800da24 <fsm_init>

    BZERO(wo, sizeof(*wo));
 800fd08:	2224      	movs	r2, #36	; 0x24
 800fd0a:	2100      	movs	r1, #0
 800fd0c:	6938      	ldr	r0, [r7, #16]
 800fd0e:	f004 f996 	bl	801403e <memset>
    wo->neg_mru = 1;
 800fd12:	693a      	ldr	r2, [r7, #16]
 800fd14:	7813      	ldrb	r3, [r2, #0]
 800fd16:	f043 0304 	orr.w	r3, r3, #4
 800fd1a:	7013      	strb	r3, [r2, #0]
    wo->mru = PPP_MRU;
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800fd22:	805a      	strh	r2, [r3, #2]
    wo->neg_asyncmap = 1;
 800fd24:	693a      	ldr	r2, [r7, #16]
 800fd26:	7813      	ldrb	r3, [r2, #0]
 800fd28:	f043 0308 	orr.w	r3, r3, #8
 800fd2c:	7013      	strb	r3, [r2, #0]
    wo->neg_magicnumber = 1;
 800fd2e:	693a      	ldr	r2, [r7, #16]
 800fd30:	7813      	ldrb	r3, [r2, #0]
 800fd32:	f043 0320 	orr.w	r3, r3, #32
 800fd36:	7013      	strb	r3, [r2, #0]
    wo->neg_pcompression = 1;
 800fd38:	693a      	ldr	r2, [r7, #16]
 800fd3a:	7813      	ldrb	r3, [r2, #0]
 800fd3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd40:	7013      	strb	r3, [r2, #0]
    wo->neg_accompression = 1;
 800fd42:	693a      	ldr	r2, [r7, #16]
 800fd44:	7813      	ldrb	r3, [r2, #0]
 800fd46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd4a:	7013      	strb	r3, [r2, #0]

    BZERO(ao, sizeof(*ao));
 800fd4c:	2224      	movs	r2, #36	; 0x24
 800fd4e:	2100      	movs	r1, #0
 800fd50:	68f8      	ldr	r0, [r7, #12]
 800fd52:	f004 f974 	bl	801403e <memset>
    ao->neg_mru = 1;
 800fd56:	68fa      	ldr	r2, [r7, #12]
 800fd58:	7813      	ldrb	r3, [r2, #0]
 800fd5a:	f043 0304 	orr.w	r3, r3, #4
 800fd5e:	7013      	strb	r3, [r2, #0]
    ao->mru = PPP_MAXMRU;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800fd66:	805a      	strh	r2, [r3, #2]
    ao->neg_asyncmap = 1;
 800fd68:	68fa      	ldr	r2, [r7, #12]
 800fd6a:	7813      	ldrb	r3, [r2, #0]
 800fd6c:	f043 0308 	orr.w	r3, r3, #8
 800fd70:	7013      	strb	r3, [r2, #0]
#if CHAP_SUPPORT
    ao->neg_chap = 1;
    ao->chap_mdtype = CHAP_MDTYPE_SUPPORTED;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    ao->neg_upap = 1;
 800fd72:	68fa      	ldr	r2, [r7, #12]
 800fd74:	7813      	ldrb	r3, [r2, #0]
 800fd76:	f043 0310 	orr.w	r3, r3, #16
 800fd7a:	7013      	strb	r3, [r2, #0]
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
    ao->neg_eap = 1;
#endif /* EAP_SUPPORT */
    ao->neg_magicnumber = 1;
 800fd7c:	68fa      	ldr	r2, [r7, #12]
 800fd7e:	7813      	ldrb	r3, [r2, #0]
 800fd80:	f043 0320 	orr.w	r3, r3, #32
 800fd84:	7013      	strb	r3, [r2, #0]
    ao->neg_pcompression = 1;
 800fd86:	68fa      	ldr	r2, [r7, #12]
 800fd88:	7813      	ldrb	r3, [r2, #0]
 800fd8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd8e:	7013      	strb	r3, [r2, #0]
    ao->neg_accompression = 1;
 800fd90:	68fa      	ldr	r2, [r7, #12]
 800fd92:	7813      	ldrb	r3, [r2, #0]
 800fd94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd98:	7013      	strb	r3, [r2, #0]
    ao->neg_endpoint = 1;
 800fd9a:	68fa      	ldr	r2, [r7, #12]
 800fd9c:	7853      	ldrb	r3, [r2, #1]
 800fd9e:	f043 0304 	orr.w	r3, r3, #4
 800fda2:	7053      	strb	r3, [r2, #1]
}
 800fda4:	bf00      	nop
 800fda6:	3718      	adds	r7, #24
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}
 800fdac:	08017fa4 	.word	0x08017fa4

0800fdb0 <lcp_open>:


/*
 * lcp_open - LCP is allowed to come up.
 */
void lcp_open(ppp_pcb *pcb) {
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b084      	sub	sp, #16
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	3344      	adds	r3, #68	; 0x44
 800fdbc:	60fb      	str	r3, [r7, #12]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	3360      	adds	r3, #96	; 0x60
 800fdc2:	60bb      	str	r3, [r7, #8]

    f->flags &= ~(OPT_PASSIVE | OPT_SILENT);
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	7c5b      	ldrb	r3, [r3, #17]
 800fdc8:	f023 0305 	bic.w	r3, r3, #5
 800fdcc:	b2da      	uxtb	r2, r3
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	745a      	strb	r2, [r3, #17]
    if (wo->passive)
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	f003 0301 	and.w	r3, r3, #1
 800fdda:	b2db      	uxtb	r3, r3
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d006      	beq.n	800fdee <lcp_open+0x3e>
	f->flags |= OPT_PASSIVE;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	7c5b      	ldrb	r3, [r3, #17]
 800fde4:	f043 0301 	orr.w	r3, r3, #1
 800fde8:	b2da      	uxtb	r2, r3
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	745a      	strb	r2, [r3, #17]
    if (wo->silent)
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	781b      	ldrb	r3, [r3, #0]
 800fdf2:	f003 0302 	and.w	r3, r3, #2
 800fdf6:	b2db      	uxtb	r3, r3
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d006      	beq.n	800fe0a <lcp_open+0x5a>
	f->flags |= OPT_SILENT;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	7c5b      	ldrb	r3, [r3, #17]
 800fe00:	f043 0304 	orr.w	r3, r3, #4
 800fe04:	b2da      	uxtb	r2, r3
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	745a      	strb	r2, [r3, #17]
    fsm_open(f);
 800fe0a:	68f8      	ldr	r0, [r7, #12]
 800fe0c:	f7fd fea0 	bl	800db50 <fsm_open>
}
 800fe10:	bf00      	nop
 800fe12:	3710      	adds	r7, #16
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}

0800fe18 <lcp_close>:


/*
 * lcp_close - Take LCP down.
 */
void lcp_close(ppp_pcb *pcb, const char *reason) {
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b084      	sub	sp, #16
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	6039      	str	r1, [r7, #0]
    fsm *f = &pcb->lcp_fsm;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	3344      	adds	r3, #68	; 0x44
 800fe26:	60fb      	str	r3, [r7, #12]
    int oldstate;

    if (pcb->phase != PPP_PHASE_DEAD
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d003      	beq.n	800fe3a <lcp_close+0x22>
#ifdef HAVE_MULTILINK
    && pcb->phase != PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	new_phase(pcb, PPP_PHASE_TERMINATE);
 800fe32:	210b      	movs	r1, #11
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f002 fb35 	bl	80124a4 <new_phase>

    if (f->flags & DELAYED_UP) {
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	7c5b      	ldrb	r3, [r3, #17]
 800fe3e:	b25b      	sxtb	r3, r3
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	da06      	bge.n	800fe52 <lcp_close+0x3a>
	UNTIMEOUT(lcp_delayed_up, f);
 800fe44:	68f9      	ldr	r1, [r7, #12]
 800fe46:	4812      	ldr	r0, [pc, #72]	; (800fe90 <lcp_close+0x78>)
 800fe48:	f7fd fb90 	bl	800d56c <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2203      	movs	r2, #3
 800fe50:	741a      	strb	r2, [r3, #16]
    }
    oldstate = f->state;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	7c1b      	ldrb	r3, [r3, #16]
 800fe56:	60bb      	str	r3, [r7, #8]

    fsm_close(f, reason);
 800fe58:	6839      	ldr	r1, [r7, #0]
 800fe5a:	68f8      	ldr	r0, [r7, #12]
 800fe5c:	f7fd ff40 	bl	800dce0 <fsm_close>
    if (oldstate == PPP_FSM_STOPPED && (f->flags & (OPT_PASSIVE|OPT_SILENT|DELAYED_UP))) {
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	2b03      	cmp	r3, #3
 800fe64:	d10f      	bne.n	800fe86 <lcp_close+0x6e>
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	7c5b      	ldrb	r3, [r3, #17]
 800fe6a:	f003 0385 	and.w	r3, r3, #133	; 0x85
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d009      	beq.n	800fe86 <lcp_close+0x6e>
	 * but it does mean that the program terminates if you do a
	 * lcp_close() when a connection hasn't been established
	 * because we are in passive/silent mode or because we have
	 * delayed the fsm_lowerup() call and it hasn't happened yet.
	 */
	f->flags &= ~DELAYED_UP;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	7c5b      	ldrb	r3, [r3, #17]
 800fe76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe7a:	b2da      	uxtb	r2, r3
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	745a      	strb	r2, [r3, #17]
	lcp_finished(f);
 800fe80:	68f8      	ldr	r0, [r7, #12]
 800fe82:	f001 ff1a 	bl	8011cba <lcp_finished>
    }
}
 800fe86:	bf00      	nop
 800fe88:	3710      	adds	r7, #16
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
 800fe8e:	bf00      	nop
 800fe90:	0800ff95 	.word	0x0800ff95

0800fe94 <lcp_lowerup>:


/*
 * lcp_lowerup - The lower layer is up.
 */
void lcp_lowerup(ppp_pcb *pcb) {
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b086      	sub	sp, #24
 800fe98:	af02      	add	r7, sp, #8
 800fe9a:	6078      	str	r0, [r7, #4]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	3360      	adds	r3, #96	; 0x60
 800fea0:	60fb      	str	r3, [r7, #12]
    fsm *f = &pcb->lcp_fsm;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	3344      	adds	r3, #68	; 0x44
 800fea6:	60bb      	str	r3, [r7, #8]
    /*
     * Don't use A/C or protocol compression on transmission,
     * but accept A/C and protocol compressed packets
     * if we are going to ask for A/C and protocol compression.
     */
    if (ppp_send_config(pcb, PPP_DEFMRU, 0xffffffff, 0, 0) < 0
 800fea8:	2300      	movs	r3, #0
 800feaa:	9300      	str	r3, [sp, #0]
 800feac:	2300      	movs	r3, #0
 800feae:	f04f 32ff 	mov.w	r2, #4294967295
 800feb2:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f002 fb04 	bl	80124c4 <ppp_send_config>
 800febc:	4603      	mov	r3, r0
 800febe:	2b00      	cmp	r3, #0
 800fec0:	db3f      	blt.n	800ff42 <lcp_lowerup+0xae>
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	f003 0308 	and.w	r3, r3, #8
 800feca:	b2db      	uxtb	r3, r3
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d001      	beq.n	800fed4 <lcp_lowerup+0x40>
 800fed0:	2200      	movs	r2, #0
 800fed2:	e001      	b.n	800fed8 <lcp_lowerup+0x44>
 800fed4:	f04f 32ff 	mov.w	r2, #4294967295
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800fee0:	b2db      	uxtb	r3, r3
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800fee2:	4619      	mov	r1, r3
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	781b      	ldrb	r3, [r3, #0]
 800fee8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800feec:	b2db      	uxtb	r3, r3
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800feee:	9300      	str	r3, [sp, #0]
 800fef0:	460b      	mov	r3, r1
 800fef2:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f002 fb00 	bl	80124fc <ppp_recv_config>
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	db1f      	blt.n	800ff42 <lcp_lowerup+0xae>
	    return;
    pcb->peer_mru = PPP_DEFMRU;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ff08:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0

    if (pcb->settings.listen_time != 0) {
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	885b      	ldrh	r3, [r3, #2]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d012      	beq.n	800ff3a <lcp_lowerup+0xa6>
	f->flags |= DELAYED_UP;
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	7c5b      	ldrb	r3, [r3, #17]
 800ff18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ff1c:	b2da      	uxtb	r2, r3
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	745a      	strb	r2, [r3, #17]
	TIMEOUTMS(lcp_delayed_up, f, pcb->settings.listen_time);
 800ff22:	68b9      	ldr	r1, [r7, #8]
 800ff24:	4809      	ldr	r0, [pc, #36]	; (800ff4c <lcp_lowerup+0xb8>)
 800ff26:	f7fd fb21 	bl	800d56c <sys_untimeout>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	885b      	ldrh	r3, [r3, #2]
 800ff2e:	68ba      	ldr	r2, [r7, #8]
 800ff30:	4906      	ldr	r1, [pc, #24]	; (800ff4c <lcp_lowerup+0xb8>)
 800ff32:	4618      	mov	r0, r3
 800ff34:	f7fd faee 	bl	800d514 <sys_timeout>
 800ff38:	e004      	b.n	800ff44 <lcp_lowerup+0xb0>
    } else
	fsm_lowerup(f);
 800ff3a:	68b8      	ldr	r0, [r7, #8]
 800ff3c:	f7fd fd8f 	bl	800da5e <fsm_lowerup>
 800ff40:	e000      	b.n	800ff44 <lcp_lowerup+0xb0>
	    return;
 800ff42:	bf00      	nop
}
 800ff44:	3710      	adds	r7, #16
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
 800ff4a:	bf00      	nop
 800ff4c:	0800ff95 	.word	0x0800ff95

0800ff50 <lcp_lowerdown>:


/*
 * lcp_lowerdown - The lower layer is down.
 */
void lcp_lowerdown(ppp_pcb *pcb) {
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b084      	sub	sp, #16
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	3344      	adds	r3, #68	; 0x44
 800ff5c:	60fb      	str	r3, [r7, #12]

    if (f->flags & DELAYED_UP) {
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	7c5b      	ldrb	r3, [r3, #17]
 800ff62:	b25b      	sxtb	r3, r3
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	da0b      	bge.n	800ff80 <lcp_lowerdown+0x30>
	f->flags &= ~DELAYED_UP;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	7c5b      	ldrb	r3, [r3, #17]
 800ff6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff70:	b2da      	uxtb	r2, r3
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	745a      	strb	r2, [r3, #17]
	UNTIMEOUT(lcp_delayed_up, f);
 800ff76:	68f9      	ldr	r1, [r7, #12]
 800ff78:	4805      	ldr	r0, [pc, #20]	; (800ff90 <lcp_lowerdown+0x40>)
 800ff7a:	f7fd faf7 	bl	800d56c <sys_untimeout>
    } else
	fsm_lowerdown(f);
}
 800ff7e:	e002      	b.n	800ff86 <lcp_lowerdown+0x36>
	fsm_lowerdown(f);
 800ff80:	68f8      	ldr	r0, [r7, #12]
 800ff82:	f7fd fd91 	bl	800daa8 <fsm_lowerdown>
}
 800ff86:	bf00      	nop
 800ff88:	3710      	adds	r7, #16
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	0800ff95 	.word	0x0800ff95

0800ff94 <lcp_delayed_up>:


/*
 * lcp_delayed_up - Bring the lower layer up now.
 */
static void lcp_delayed_up(void *arg) {
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm*)arg;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	60fb      	str	r3, [r7, #12]

    if (f->flags & DELAYED_UP) {
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	7c5b      	ldrb	r3, [r3, #17]
 800ffa4:	b25b      	sxtb	r3, r3
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	da09      	bge.n	800ffbe <lcp_delayed_up+0x2a>
	f->flags &= ~DELAYED_UP;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	7c5b      	ldrb	r3, [r3, #17]
 800ffae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffb2:	b2da      	uxtb	r2, r3
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	745a      	strb	r2, [r3, #17]
	fsm_lowerup(f);
 800ffb8:	68f8      	ldr	r0, [r7, #12]
 800ffba:	f7fd fd50 	bl	800da5e <fsm_lowerup>
    }
}
 800ffbe:	bf00      	nop
 800ffc0:	3710      	adds	r7, #16
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
	...

0800ffc8 <lcp_input>:


/*
 * lcp_input - Input LCP packet.
 */
static void lcp_input(ppp_pcb *pcb, u_char *p, int len) {
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b086      	sub	sp, #24
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	60f8      	str	r0, [r7, #12]
 800ffd0:	60b9      	str	r1, [r7, #8]
 800ffd2:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	3344      	adds	r3, #68	; 0x44
 800ffd8:	617b      	str	r3, [r7, #20]

    if (f->flags & DELAYED_UP) {
 800ffda:	697b      	ldr	r3, [r7, #20]
 800ffdc:	7c5b      	ldrb	r3, [r3, #17]
 800ffde:	b25b      	sxtb	r3, r3
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	da0d      	bge.n	8010000 <lcp_input+0x38>
	f->flags &= ~DELAYED_UP;
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	7c5b      	ldrb	r3, [r3, #17]
 800ffe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffec:	b2da      	uxtb	r2, r3
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	745a      	strb	r2, [r3, #17]
	UNTIMEOUT(lcp_delayed_up, f);
 800fff2:	6979      	ldr	r1, [r7, #20]
 800fff4:	4807      	ldr	r0, [pc, #28]	; (8010014 <lcp_input+0x4c>)
 800fff6:	f7fd fab9 	bl	800d56c <sys_untimeout>
	fsm_lowerup(f);
 800fffa:	6978      	ldr	r0, [r7, #20]
 800fffc:	f7fd fd2f 	bl	800da5e <fsm_lowerup>
    }
    fsm_input(f, p, len);
 8010000:	687a      	ldr	r2, [r7, #4]
 8010002:	68b9      	ldr	r1, [r7, #8]
 8010004:	6978      	ldr	r0, [r7, #20]
 8010006:	f7fd ff4f 	bl	800dea8 <fsm_input>
}
 801000a:	bf00      	nop
 801000c:	3718      	adds	r7, #24
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
 8010012:	bf00      	nop
 8010014:	0800ff95 	.word	0x0800ff95

08010018 <lcp_extcode>:

/*
 * lcp_extcode - Handle a LCP-specific code.
 */
static int lcp_extcode(fsm *f, int code, int id, u_char *inp, int len) {
 8010018:	b580      	push	{r7, lr}
 801001a:	b08a      	sub	sp, #40	; 0x28
 801001c:	af02      	add	r7, sp, #8
 801001e:	60f8      	str	r0, [r7, #12]
 8010020:	60b9      	str	r1, [r7, #8]
 8010022:	607a      	str	r2, [r7, #4]
 8010024:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 801002c:	69fb      	ldr	r3, [r7, #28]
 801002e:	3384      	adds	r3, #132	; 0x84
 8010030:	61bb      	str	r3, [r7, #24]
    u_char *magp;

    switch( code ){
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	3b08      	subs	r3, #8
 8010036:	2b05      	cmp	r3, #5
 8010038:	d84a      	bhi.n	80100d0 <lcp_extcode+0xb8>
 801003a:	a201      	add	r2, pc, #4	; (adr r2, 8010040 <lcp_extcode+0x28>)
 801003c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010040:	08010059 	.word	0x08010059
 8010044:	08010065 	.word	0x08010065
 8010048:	080100c3 	.word	0x080100c3
 801004c:	080100d5 	.word	0x080100d5
 8010050:	080100d5 	.word	0x080100d5
 8010054:	080100d5 	.word	0x080100d5
    case PROTREJ:
	lcp_rprotrej(f, inp, len);
 8010058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801005a:	6839      	ldr	r1, [r7, #0]
 801005c:	68f8      	ldr	r0, [r7, #12]
 801005e:	f000 f841 	bl	80100e4 <lcp_rprotrej>
	break;
 8010062:	e03a      	b.n	80100da <lcp_extcode+0xc2>
    
    case ECHOREQ:
	if (f->state != PPP_FSM_OPENED)
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	7c1b      	ldrb	r3, [r3, #16]
 8010068:	2b09      	cmp	r3, #9
 801006a:	d135      	bne.n	80100d8 <lcp_extcode+0xc0>
	    break;
	magp = inp;
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	617b      	str	r3, [r7, #20]
	PUTLONG(go->magicnumber, magp);
 8010070:	697b      	ldr	r3, [r7, #20]
 8010072:	1c5a      	adds	r2, r3, #1
 8010074:	617a      	str	r2, [r7, #20]
 8010076:	69ba      	ldr	r2, [r7, #24]
 8010078:	6892      	ldr	r2, [r2, #8]
 801007a:	0e12      	lsrs	r2, r2, #24
 801007c:	b2d2      	uxtb	r2, r2
 801007e:	701a      	strb	r2, [r3, #0]
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	1c5a      	adds	r2, r3, #1
 8010084:	617a      	str	r2, [r7, #20]
 8010086:	69ba      	ldr	r2, [r7, #24]
 8010088:	6892      	ldr	r2, [r2, #8]
 801008a:	0c12      	lsrs	r2, r2, #16
 801008c:	b2d2      	uxtb	r2, r2
 801008e:	701a      	strb	r2, [r3, #0]
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	1c5a      	adds	r2, r3, #1
 8010094:	617a      	str	r2, [r7, #20]
 8010096:	69ba      	ldr	r2, [r7, #24]
 8010098:	6892      	ldr	r2, [r2, #8]
 801009a:	0a12      	lsrs	r2, r2, #8
 801009c:	b2d2      	uxtb	r2, r2
 801009e:	701a      	strb	r2, [r3, #0]
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	1c5a      	adds	r2, r3, #1
 80100a4:	617a      	str	r2, [r7, #20]
 80100a6:	69ba      	ldr	r2, [r7, #24]
 80100a8:	6892      	ldr	r2, [r2, #8]
 80100aa:	b2d2      	uxtb	r2, r2
 80100ac:	701a      	strb	r2, [r3, #0]
	fsm_sdata(f, ECHOREP, id, inp, len);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	b2da      	uxtb	r2, r3
 80100b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100b4:	9300      	str	r3, [sp, #0]
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	210a      	movs	r1, #10
 80100ba:	68f8      	ldr	r0, [r7, #12]
 80100bc:	f7fe fb8c 	bl	800e7d8 <fsm_sdata>
	break;
 80100c0:	e00b      	b.n	80100da <lcp_extcode+0xc2>
    
    case ECHOREP:
	lcp_received_echo_reply(f, id, inp, len);
 80100c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100c4:	683a      	ldr	r2, [r7, #0]
 80100c6:	6879      	ldr	r1, [r7, #4]
 80100c8:	68f8      	ldr	r0, [r7, #12]
 80100ca:	f001 fe6a 	bl	8011da2 <lcp_received_echo_reply>
	break;
 80100ce:	e004      	b.n	80100da <lcp_extcode+0xc2>
    case IDENTIF:
    case TIMEREM:
	break;

    default:
	return 0;
 80100d0:	2300      	movs	r3, #0
 80100d2:	e003      	b.n	80100dc <lcp_extcode+0xc4>
	break;
 80100d4:	bf00      	nop
 80100d6:	e000      	b.n	80100da <lcp_extcode+0xc2>
	    break;
 80100d8:	bf00      	nop
    }
    return 1;
 80100da:	2301      	movs	r3, #1
}
 80100dc:	4618      	mov	r0, r3
 80100de:	3720      	adds	r7, #32
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <lcp_rprotrej>:
/*
 * lcp_rprotrej - Receive an Protocol-Reject.
 *
 * Figure out which protocol is rejected and inform it.
 */
static void lcp_rprotrej(fsm *f, u_char *inp, int len) {
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b088      	sub	sp, #32
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	60f8      	str	r0, [r7, #12]
 80100ec:	60b9      	str	r1, [r7, #8]
 80100ee:	607a      	str	r2, [r7, #4]
    u_short prot;
#if PPP_PROTOCOLNAME
    const char *pname;
#endif /* PPP_PROTOCOLNAME */

    if (len < 2) {
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2b01      	cmp	r3, #1
 80100f4:	dd2d      	ble.n	8010152 <lcp_rprotrej+0x6e>
	LCPDEBUG(("lcp_rprotrej: Rcvd short Protocol-Reject packet!"));
	return;
    }

    GETSHORT(prot, inp);
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	1c5a      	adds	r2, r3, #1
 80100fa:	60ba      	str	r2, [r7, #8]
 80100fc:	781b      	ldrb	r3, [r3, #0]
 80100fe:	b29b      	uxth	r3, r3
 8010100:	021b      	lsls	r3, r3, #8
 8010102:	837b      	strh	r3, [r7, #26]
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	1c5a      	adds	r2, r3, #1
 8010108:	60ba      	str	r2, [r7, #8]
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	b29a      	uxth	r2, r3
 801010e:	8b7b      	ldrh	r3, [r7, #26]
 8010110:	4313      	orrs	r3, r2
 8010112:	837b      	strh	r3, [r7, #26]

    /*
     * Protocol-Reject packets received in any state other than the LCP
     * OPENED state SHOULD be silently discarded.
     */
    if( f->state != PPP_FSM_OPENED ){
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	7c1b      	ldrb	r3, [r3, #16]
 8010118:	2b09      	cmp	r3, #9
 801011a:	d11c      	bne.n	8010156 <lcp_rprotrej+0x72>
#endif /* PPP_PROTOCOLNAME */

    /*
     * Upcall the proper Protocol-Reject routine.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 801011c:	2300      	movs	r3, #0
 801011e:	61fb      	str	r3, [r7, #28]
 8010120:	e00e      	b.n	8010140 <lcp_rprotrej+0x5c>
	if (protp->protocol == prot) {
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	881b      	ldrh	r3, [r3, #0]
 8010126:	8b7a      	ldrh	r2, [r7, #26]
 8010128:	429a      	cmp	r2, r3
 801012a:	d106      	bne.n	801013a <lcp_rprotrej+0x56>
		ppp_dbglog(("Protocol-Reject for '%s' (0x%x) received", pname,
		       prot));
	    else
#endif /* PPP_PROTOCOLNAME */
		ppp_dbglog(("Protocol-Reject for 0x%x received", prot));
	    (*protp->protrej)(f->pcb);
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	68db      	ldr	r3, [r3, #12]
 8010130:	68fa      	ldr	r2, [r7, #12]
 8010132:	6812      	ldr	r2, [r2, #0]
 8010134:	4610      	mov	r0, r2
 8010136:	4798      	blx	r3
	    return;
 8010138:	e00e      	b.n	8010158 <lcp_rprotrej+0x74>
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 801013a:	69fb      	ldr	r3, [r7, #28]
 801013c:	3301      	adds	r3, #1
 801013e:	61fb      	str	r3, [r7, #28]
 8010140:	4a07      	ldr	r2, [pc, #28]	; (8010160 <lcp_rprotrej+0x7c>)
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010148:	617b      	str	r3, [r7, #20]
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d1e8      	bne.n	8010122 <lcp_rprotrej+0x3e>
 8010150:	e002      	b.n	8010158 <lcp_rprotrej+0x74>
	return;
 8010152:	bf00      	nop
 8010154:	e000      	b.n	8010158 <lcp_rprotrej+0x74>
	return;
 8010156:	bf00      	nop
	ppp_warn(("Protocol-Reject for unsupported protocol '%s' (0x%x)", pname,
	     prot));
    else
#endif /* #if PPP_PROTOCOLNAME */
	ppp_warn(("Protocol-Reject for unsupported protocol 0x%x", prot));
}
 8010158:	3720      	adds	r7, #32
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop
 8010160:	08018014 	.word	0x08018014

08010164 <lcp_protrej>:

/*
 * lcp_protrej - A Protocol-Reject was received.
 */
/*ARGSUSED*/
static void lcp_protrej(ppp_pcb *pcb) {
 8010164:	b580      	push	{r7, lr}
 8010166:	b082      	sub	sp, #8
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
    /*
     * Can't reject LCP!
     */
    ppp_error(("Received Protocol-Reject for LCP!"));
    fsm_protreject(&pcb->lcp_fsm);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	3344      	adds	r3, #68	; 0x44
 8010170:	4618      	mov	r0, r3
 8010172:	f7fe f9f5 	bl	800e560 <fsm_protreject>
}
 8010176:	bf00      	nop
 8010178:	3708      	adds	r7, #8
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}

0801017e <lcp_sprotrej>:


/*
 * lcp_sprotrej - Send a Protocol-Reject for some protocol.
 */
void lcp_sprotrej(ppp_pcb *pcb, u_char *p, int len) {
 801017e:	b580      	push	{r7, lr}
 8010180:	b088      	sub	sp, #32
 8010182:	af02      	add	r7, sp, #8
 8010184:	60f8      	str	r0, [r7, #12]
 8010186:	60b9      	str	r1, [r7, #8]
 8010188:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	3344      	adds	r3, #68	; 0x44
 801018e:	617b      	str	r3, [r7, #20]
#if 0
    p += 2;
    len -= 2;
#endif

    fsm_sdata(f, PROTREJ, ++f->id,
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	7c9b      	ldrb	r3, [r3, #18]
 8010194:	3301      	adds	r3, #1
 8010196:	b2da      	uxtb	r2, r3
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	749a      	strb	r2, [r3, #18]
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	7c9a      	ldrb	r2, [r3, #18]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	9300      	str	r3, [sp, #0]
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	2108      	movs	r1, #8
 80101a8:	6978      	ldr	r0, [r7, #20]
 80101aa:	f7fe fb15 	bl	800e7d8 <fsm_sdata>
	      p, len);
}
 80101ae:	bf00      	nop
 80101b0:	3718      	adds	r7, #24
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}

080101b6 <lcp_resetci>:


/*
 * lcp_resetci - Reset our CI.
 */
static void lcp_resetci(fsm *f) {
 80101b6:	b5b0      	push	{r4, r5, r7, lr}
 80101b8:	b086      	sub	sp, #24
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	617b      	str	r3, [r7, #20]
    lcp_options *wo = &pcb->lcp_wantoptions;
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	3360      	adds	r3, #96	; 0x60
 80101c8:	613b      	str	r3, [r7, #16]
    lcp_options *go = &pcb->lcp_gotoptions;
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	3384      	adds	r3, #132	; 0x84
 80101ce:	60fb      	str	r3, [r7, #12]
    lcp_options *ao = &pcb->lcp_allowoptions;
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	33a8      	adds	r3, #168	; 0xa8
 80101d4:	60bb      	str	r3, [r7, #8]

#if PPP_AUTH_SUPPORT

    /* note: default value is true for allow options */
    if (pcb->settings.user && pcb->settings.passwd) {
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	685b      	ldr	r3, [r3, #4]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d010      	beq.n	8010200 <lcp_resetci+0x4a>
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	689b      	ldr	r3, [r3, #8]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d00c      	beq.n	8010200 <lcp_resetci+0x4a>
#if PAP_SUPPORT
      if (pcb->settings.refuse_pap) {
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	f003 0301 	and.w	r3, r3, #1
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d00a      	beq.n	801020a <lcp_resetci+0x54>
        ao->neg_upap = 0;
 80101f4:	68ba      	ldr	r2, [r7, #8]
 80101f6:	7813      	ldrb	r3, [r2, #0]
 80101f8:	f36f 1304 	bfc	r3, #4, #1
 80101fc:	7013      	strb	r3, [r2, #0]
      if (pcb->settings.refuse_pap) {
 80101fe:	e004      	b.n	801020a <lcp_resetci+0x54>
      }
#endif /* PPP_SERVER */

    } else {
#if PAP_SUPPORT
      ao->neg_upap = 0;
 8010200:	68ba      	ldr	r2, [r7, #8]
 8010202:	7813      	ldrb	r3, [r2, #0]
 8010204:	f36f 1304 	bfc	r3, #4, #1
 8010208:	7013      	strb	r3, [r2, #0]
#endif /* EAP_SUPPORT */
    PPPDEBUG(LOG_DEBUG, ("\n"));

#endif /* PPP_AUTH_SUPPORT */

    wo->magicnumber = magic();
 801020a:	f001 fed5 	bl	8011fb8 <magic>
 801020e:	4602      	mov	r2, r0
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	609a      	str	r2, [r3, #8]
    wo->numloops = 0;
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	2200      	movs	r2, #0
 8010218:	731a      	strb	r2, [r3, #12]
    *go = *wo;
 801021a:	68fa      	ldr	r2, [r7, #12]
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	4614      	mov	r4, r2
 8010220:	461d      	mov	r5, r3
 8010222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801022a:	682b      	ldr	r3, [r5, #0]
 801022c:	6023      	str	r3, [r4, #0]
#ifdef HAVE_MULTILINK
    if (!multilink) {
	go->neg_mrru = 0;
#endif /* HAVE_MULTILINK */
	go->neg_ssnhf = 0;
 801022e:	68fa      	ldr	r2, [r7, #12]
 8010230:	7853      	ldrb	r3, [r2, #1]
 8010232:	f36f 0341 	bfc	r3, #1, #1
 8010236:	7053      	strb	r3, [r2, #1]
	go->neg_endpoint = 0;
 8010238:	68fa      	ldr	r2, [r7, #12]
 801023a:	7853      	ldrb	r3, [r2, #1]
 801023c:	f36f 0382 	bfc	r3, #2, #1
 8010240:	7053      	strb	r3, [r2, #1]
#ifdef HAVE_MULTILINK
    }
#endif /* HAVE_MULTILINK */
    if (pcb->settings.noendpoint)
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	f003 0310 	and.w	r3, r3, #16
 801024a:	b2db      	uxtb	r3, r3
 801024c:	2b00      	cmp	r3, #0
 801024e:	d004      	beq.n	801025a <lcp_resetci+0xa4>
	ao->neg_endpoint = 0;
 8010250:	68ba      	ldr	r2, [r7, #8]
 8010252:	7853      	ldrb	r3, [r2, #1]
 8010254:	f36f 0382 	bfc	r3, #2, #1
 8010258:	7053      	strb	r3, [r2, #1]
    pcb->peer_mru = PPP_DEFMRU;
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010260:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
#if 0 /* UNUSED */
    auth_reset(pcb);
#endif /* UNUSED */
}
 8010264:	bf00      	nop
 8010266:	3718      	adds	r7, #24
 8010268:	46bd      	mov	sp, r7
 801026a:	bdb0      	pop	{r4, r5, r7, pc}

0801026c <lcp_cilen>:


/*
 * lcp_cilen - Return length of our CI.
 */
static int lcp_cilen(fsm *f) {
 801026c:	b480      	push	{r7}
 801026e:	b085      	sub	sp, #20
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	60fb      	str	r3, [r7, #12]
    lcp_options *go = &pcb->lcp_gotoptions;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	3384      	adds	r3, #132	; 0x84
 801027e:	60bb      	str	r3, [r7, #8]
    /*
     * NB: we only ask for one of CHAP, UPAP, or EAP, even if we will
     * accept more than one.  We prefer EAP first, then CHAP, then
     * PAP.
     */
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	781b      	ldrb	r3, [r3, #0]
 8010284:	f003 0304 	and.w	r3, r3, #4
 8010288:	b2db      	uxtb	r3, r3
 801028a:	2b00      	cmp	r3, #0
 801028c:	d007      	beq.n	801029e <lcp_cilen+0x32>
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	885b      	ldrh	r3, [r3, #2]
 8010292:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010296:	4293      	cmp	r3, r2
 8010298:	d001      	beq.n	801029e <lcp_cilen+0x32>
 801029a:	2204      	movs	r2, #4
 801029c:	e000      	b.n	80102a0 <lcp_cilen+0x34>
 801029e:	2200      	movs	r2, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	f003 0308 	and.w	r3, r3, #8
 80102a8:	b2db      	uxtb	r3, r3
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d006      	beq.n	80102bc <lcp_cilen+0x50>
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	685b      	ldr	r3, [r3, #4]
 80102b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102b6:	d001      	beq.n	80102bc <lcp_cilen+0x50>
 80102b8:	2306      	movs	r3, #6
 80102ba:	e000      	b.n	80102be <lcp_cilen+0x52>
 80102bc:	2300      	movs	r3, #0
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 80102be:	441a      	add	r2, r3
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
	    LENCISHORT(!go->neg_chap && go->neg_upap) +
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
	    LENCISHORT(go->neg_upap) +
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	781b      	ldrb	r3, [r3, #0]
 80102c4:	f003 0310 	and.w	r3, r3, #16
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d001      	beq.n	80102d2 <lcp_cilen+0x66>
 80102ce:	2304      	movs	r3, #4
 80102d0:	e000      	b.n	80102d4 <lcp_cilen+0x68>
 80102d2:	2300      	movs	r3, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 80102d4:	441a      	add	r2, r3
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
	    LENCILQR(go->neg_lqr) +
#endif /* LQR_SUPPORT */
	    LENCICBCP(go->neg_cbcp) +
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	785b      	ldrb	r3, [r3, #1]
 80102da:	f003 0301 	and.w	r3, r3, #1
 80102de:	b2db      	uxtb	r3, r3
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d001      	beq.n	80102e8 <lcp_cilen+0x7c>
 80102e4:	2303      	movs	r3, #3
 80102e6:	e000      	b.n	80102ea <lcp_cilen+0x7e>
 80102e8:	2300      	movs	r3, #0
	    LENCISHORT(go->neg_upap) +
 80102ea:	441a      	add	r2, r3
	    LENCILONG(go->neg_magicnumber) +
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	781b      	ldrb	r3, [r3, #0]
 80102f0:	f003 0320 	and.w	r3, r3, #32
 80102f4:	b2db      	uxtb	r3, r3
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d001      	beq.n	80102fe <lcp_cilen+0x92>
 80102fa:	2306      	movs	r3, #6
 80102fc:	e000      	b.n	8010300 <lcp_cilen+0x94>
 80102fe:	2300      	movs	r3, #0
	    LENCICBCP(go->neg_cbcp) +
 8010300:	441a      	add	r2, r3
	    LENCIVOID(go->neg_pcompression) +
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	781b      	ldrb	r3, [r3, #0]
 8010306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801030a:	b2db      	uxtb	r3, r3
 801030c:	2b00      	cmp	r3, #0
 801030e:	d001      	beq.n	8010314 <lcp_cilen+0xa8>
 8010310:	2302      	movs	r3, #2
 8010312:	e000      	b.n	8010316 <lcp_cilen+0xaa>
 8010314:	2300      	movs	r3, #0
	    LENCILONG(go->neg_magicnumber) +
 8010316:	441a      	add	r2, r3
	    LENCIVOID(go->neg_accompression) +
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	781b      	ldrb	r3, [r3, #0]
 801031c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010320:	b2db      	uxtb	r3, r3
 8010322:	2b00      	cmp	r3, #0
 8010324:	d001      	beq.n	801032a <lcp_cilen+0xbe>
 8010326:	2302      	movs	r3, #2
 8010328:	e000      	b.n	801032c <lcp_cilen+0xc0>
 801032a:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_pcompression) +
 801032c:	441a      	add	r2, r3
#ifdef HAVE_MULTILINK
	    LENCISHORT(go->neg_mrru) +
#endif /* HAVE_MULTILINK */
	    LENCIVOID(go->neg_ssnhf) +
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	785b      	ldrb	r3, [r3, #1]
 8010332:	f003 0302 	and.w	r3, r3, #2
	    LENCIVOID(go->neg_accompression) +
 8010336:	441a      	add	r2, r3
	    (go->neg_endpoint? CILEN_CHAR + go->endpoint.length: 0));
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	785b      	ldrb	r3, [r3, #1]
 801033c:	f003 0304 	and.w	r3, r3, #4
 8010340:	b2db      	uxtb	r3, r3
 8010342:	2b00      	cmp	r3, #0
 8010344:	d003      	beq.n	801034e <lcp_cilen+0xe2>
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	7b9b      	ldrb	r3, [r3, #14]
 801034a:	3303      	adds	r3, #3
 801034c:	e000      	b.n	8010350 <lcp_cilen+0xe4>
 801034e:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_ssnhf) +
 8010350:	4413      	add	r3, r2
}
 8010352:	4618      	mov	r0, r3
 8010354:	3714      	adds	r7, #20
 8010356:	46bd      	mov	sp, r7
 8010358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035c:	4770      	bx	lr

0801035e <lcp_addci>:


/*
 * lcp_addci - Add our desired CIs to a packet.
 */
static void lcp_addci(fsm *f, u_char *ucp, int *lenp) {
 801035e:	b480      	push	{r7}
 8010360:	b089      	sub	sp, #36	; 0x24
 8010362:	af00      	add	r7, sp, #0
 8010364:	60f8      	str	r0, [r7, #12]
 8010366:	60b9      	str	r1, [r7, #8]
 8010368:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	61bb      	str	r3, [r7, #24]
    lcp_options *go = &pcb->lcp_gotoptions;
 8010370:	69bb      	ldr	r3, [r7, #24]
 8010372:	3384      	adds	r3, #132	; 0x84
 8010374:	617b      	str	r3, [r7, #20]
    u_char *start_ucp = ucp;
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	613b      	str	r3, [r7, #16]
	PUTCHAR(class, ucp); \
	for (i = 0; i < len; ++i) \
	    PUTCHAR(val[i], ucp); \
    }

    ADDCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	781b      	ldrb	r3, [r3, #0]
 801037e:	f003 0304 	and.w	r3, r3, #4
 8010382:	b2db      	uxtb	r3, r3
 8010384:	2b00      	cmp	r3, #0
 8010386:	d01f      	beq.n	80103c8 <lcp_addci+0x6a>
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	885b      	ldrh	r3, [r3, #2]
 801038c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010390:	4293      	cmp	r3, r2
 8010392:	d019      	beq.n	80103c8 <lcp_addci+0x6a>
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	1c5a      	adds	r2, r3, #1
 8010398:	60ba      	str	r2, [r7, #8]
 801039a:	2201      	movs	r2, #1
 801039c:	701a      	strb	r2, [r3, #0]
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	1c5a      	adds	r2, r3, #1
 80103a2:	60ba      	str	r2, [r7, #8]
 80103a4:	2204      	movs	r2, #4
 80103a6:	701a      	strb	r2, [r3, #0]
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	1c5a      	adds	r2, r3, #1
 80103ac:	60ba      	str	r2, [r7, #8]
 80103ae:	697a      	ldr	r2, [r7, #20]
 80103b0:	8852      	ldrh	r2, [r2, #2]
 80103b2:	0a12      	lsrs	r2, r2, #8
 80103b4:	b292      	uxth	r2, r2
 80103b6:	b2d2      	uxtb	r2, r2
 80103b8:	701a      	strb	r2, [r3, #0]
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	1c5a      	adds	r2, r3, #1
 80103be:	60ba      	str	r2, [r7, #8]
 80103c0:	697a      	ldr	r2, [r7, #20]
 80103c2:	8852      	ldrh	r2, [r2, #2]
 80103c4:	b2d2      	uxtb	r2, r2
 80103c6:	701a      	strb	r2, [r3, #0]
    ADDCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	781b      	ldrb	r3, [r3, #0]
 80103cc:	f003 0308 	and.w	r3, r3, #8
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d02d      	beq.n	8010432 <lcp_addci+0xd4>
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	685b      	ldr	r3, [r3, #4]
 80103da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103de:	d028      	beq.n	8010432 <lcp_addci+0xd4>
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	1c5a      	adds	r2, r3, #1
 80103e4:	60ba      	str	r2, [r7, #8]
 80103e6:	2202      	movs	r2, #2
 80103e8:	701a      	strb	r2, [r3, #0]
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	1c5a      	adds	r2, r3, #1
 80103ee:	60ba      	str	r2, [r7, #8]
 80103f0:	2206      	movs	r2, #6
 80103f2:	701a      	strb	r2, [r3, #0]
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	1c5a      	adds	r2, r3, #1
 80103f8:	60ba      	str	r2, [r7, #8]
 80103fa:	697a      	ldr	r2, [r7, #20]
 80103fc:	6852      	ldr	r2, [r2, #4]
 80103fe:	0e12      	lsrs	r2, r2, #24
 8010400:	b2d2      	uxtb	r2, r2
 8010402:	701a      	strb	r2, [r3, #0]
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	1c5a      	adds	r2, r3, #1
 8010408:	60ba      	str	r2, [r7, #8]
 801040a:	697a      	ldr	r2, [r7, #20]
 801040c:	6852      	ldr	r2, [r2, #4]
 801040e:	0c12      	lsrs	r2, r2, #16
 8010410:	b2d2      	uxtb	r2, r2
 8010412:	701a      	strb	r2, [r3, #0]
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	1c5a      	adds	r2, r3, #1
 8010418:	60ba      	str	r2, [r7, #8]
 801041a:	697a      	ldr	r2, [r7, #20]
 801041c:	6852      	ldr	r2, [r2, #4]
 801041e:	0a12      	lsrs	r2, r2, #8
 8010420:	b2d2      	uxtb	r2, r2
 8010422:	701a      	strb	r2, [r3, #0]
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	1c5a      	adds	r2, r3, #1
 8010428:	60ba      	str	r2, [r7, #8]
 801042a:	697a      	ldr	r2, [r7, #20]
 801042c:	6852      	ldr	r2, [r2, #4]
 801042e:	b2d2      	uxtb	r2, r2
 8010430:	701a      	strb	r2, [r3, #0]
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
    ADDCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
    ADDCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	781b      	ldrb	r3, [r3, #0]
 8010436:	f003 0310 	and.w	r3, r3, #16
 801043a:	b2db      	uxtb	r3, r3
 801043c:	2b00      	cmp	r3, #0
 801043e:	d013      	beq.n	8010468 <lcp_addci+0x10a>
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	1c5a      	adds	r2, r3, #1
 8010444:	60ba      	str	r2, [r7, #8]
 8010446:	2203      	movs	r2, #3
 8010448:	701a      	strb	r2, [r3, #0]
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	1c5a      	adds	r2, r3, #1
 801044e:	60ba      	str	r2, [r7, #8]
 8010450:	2204      	movs	r2, #4
 8010452:	701a      	strb	r2, [r3, #0]
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	1c5a      	adds	r2, r3, #1
 8010458:	60ba      	str	r2, [r7, #8]
 801045a:	22c0      	movs	r2, #192	; 0xc0
 801045c:	701a      	strb	r2, [r3, #0]
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	1c5a      	adds	r2, r3, #1
 8010462:	60ba      	str	r2, [r7, #8]
 8010464:	2223      	movs	r2, #35	; 0x23
 8010466:	701a      	strb	r2, [r3, #0]
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ADDCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ADDCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	785b      	ldrb	r3, [r3, #1]
 801046c:	f003 0301 	and.w	r3, r3, #1
 8010470:	b2db      	uxtb	r3, r3
 8010472:	2b00      	cmp	r3, #0
 8010474:	d00e      	beq.n	8010494 <lcp_addci+0x136>
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	1c5a      	adds	r2, r3, #1
 801047a:	60ba      	str	r2, [r7, #8]
 801047c:	220d      	movs	r2, #13
 801047e:	701a      	strb	r2, [r3, #0]
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	1c5a      	adds	r2, r3, #1
 8010484:	60ba      	str	r2, [r7, #8]
 8010486:	2203      	movs	r2, #3
 8010488:	701a      	strb	r2, [r3, #0]
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	1c5a      	adds	r2, r3, #1
 801048e:	60ba      	str	r2, [r7, #8]
 8010490:	2206      	movs	r2, #6
 8010492:	701a      	strb	r2, [r3, #0]
    ADDCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	f003 0320 	and.w	r3, r3, #32
 801049c:	b2db      	uxtb	r3, r3
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d028      	beq.n	80104f4 <lcp_addci+0x196>
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	1c5a      	adds	r2, r3, #1
 80104a6:	60ba      	str	r2, [r7, #8]
 80104a8:	2205      	movs	r2, #5
 80104aa:	701a      	strb	r2, [r3, #0]
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	1c5a      	adds	r2, r3, #1
 80104b0:	60ba      	str	r2, [r7, #8]
 80104b2:	2206      	movs	r2, #6
 80104b4:	701a      	strb	r2, [r3, #0]
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	1c5a      	adds	r2, r3, #1
 80104ba:	60ba      	str	r2, [r7, #8]
 80104bc:	697a      	ldr	r2, [r7, #20]
 80104be:	6892      	ldr	r2, [r2, #8]
 80104c0:	0e12      	lsrs	r2, r2, #24
 80104c2:	b2d2      	uxtb	r2, r2
 80104c4:	701a      	strb	r2, [r3, #0]
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	1c5a      	adds	r2, r3, #1
 80104ca:	60ba      	str	r2, [r7, #8]
 80104cc:	697a      	ldr	r2, [r7, #20]
 80104ce:	6892      	ldr	r2, [r2, #8]
 80104d0:	0c12      	lsrs	r2, r2, #16
 80104d2:	b2d2      	uxtb	r2, r2
 80104d4:	701a      	strb	r2, [r3, #0]
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	1c5a      	adds	r2, r3, #1
 80104da:	60ba      	str	r2, [r7, #8]
 80104dc:	697a      	ldr	r2, [r7, #20]
 80104de:	6892      	ldr	r2, [r2, #8]
 80104e0:	0a12      	lsrs	r2, r2, #8
 80104e2:	b2d2      	uxtb	r2, r2
 80104e4:	701a      	strb	r2, [r3, #0]
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	1c5a      	adds	r2, r3, #1
 80104ea:	60ba      	str	r2, [r7, #8]
 80104ec:	697a      	ldr	r2, [r7, #20]
 80104ee:	6892      	ldr	r2, [r2, #8]
 80104f0:	b2d2      	uxtb	r2, r2
 80104f2:	701a      	strb	r2, [r3, #0]
    ADDCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 80104f4:	697b      	ldr	r3, [r7, #20]
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104fc:	b2db      	uxtb	r3, r3
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d009      	beq.n	8010516 <lcp_addci+0x1b8>
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	1c5a      	adds	r2, r3, #1
 8010506:	60ba      	str	r2, [r7, #8]
 8010508:	2207      	movs	r2, #7
 801050a:	701a      	strb	r2, [r3, #0]
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	1c5a      	adds	r2, r3, #1
 8010510:	60ba      	str	r2, [r7, #8]
 8010512:	2202      	movs	r2, #2
 8010514:	701a      	strb	r2, [r3, #0]
    ADDCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	781b      	ldrb	r3, [r3, #0]
 801051a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801051e:	b2db      	uxtb	r3, r3
 8010520:	2b00      	cmp	r3, #0
 8010522:	d009      	beq.n	8010538 <lcp_addci+0x1da>
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	1c5a      	adds	r2, r3, #1
 8010528:	60ba      	str	r2, [r7, #8]
 801052a:	2208      	movs	r2, #8
 801052c:	701a      	strb	r2, [r3, #0]
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	1c5a      	adds	r2, r3, #1
 8010532:	60ba      	str	r2, [r7, #8]
 8010534:	2202      	movs	r2, #2
 8010536:	701a      	strb	r2, [r3, #0]
#ifdef HAVE_MULTILINK
    ADDCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif
    ADDCIVOID(CI_SSNHF, go->neg_ssnhf);
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	785b      	ldrb	r3, [r3, #1]
 801053c:	f003 0302 	and.w	r3, r3, #2
 8010540:	b2db      	uxtb	r3, r3
 8010542:	2b00      	cmp	r3, #0
 8010544:	d009      	beq.n	801055a <lcp_addci+0x1fc>
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	1c5a      	adds	r2, r3, #1
 801054a:	60ba      	str	r2, [r7, #8]
 801054c:	2212      	movs	r2, #18
 801054e:	701a      	strb	r2, [r3, #0]
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	1c5a      	adds	r2, r3, #1
 8010554:	60ba      	str	r2, [r7, #8]
 8010556:	2202      	movs	r2, #2
 8010558:	701a      	strb	r2, [r3, #0]
    ADDCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	785b      	ldrb	r3, [r3, #1]
 801055e:	f003 0304 	and.w	r3, r3, #4
 8010562:	b2db      	uxtb	r3, r3
 8010564:	2b00      	cmp	r3, #0
 8010566:	d027      	beq.n	80105b8 <lcp_addci+0x25a>
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	1c5a      	adds	r2, r3, #1
 801056c:	60ba      	str	r2, [r7, #8]
 801056e:	2213      	movs	r2, #19
 8010570:	701a      	strb	r2, [r3, #0]
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	1c5a      	adds	r2, r3, #1
 8010576:	60ba      	str	r2, [r7, #8]
 8010578:	697a      	ldr	r2, [r7, #20]
 801057a:	7b92      	ldrb	r2, [r2, #14]
 801057c:	3203      	adds	r2, #3
 801057e:	b2d2      	uxtb	r2, r2
 8010580:	701a      	strb	r2, [r3, #0]
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	1c5a      	adds	r2, r3, #1
 8010586:	60ba      	str	r2, [r7, #8]
 8010588:	697a      	ldr	r2, [r7, #20]
 801058a:	7b52      	ldrb	r2, [r2, #13]
 801058c:	701a      	strb	r2, [r3, #0]
 801058e:	2300      	movs	r3, #0
 8010590:	61fb      	str	r3, [r7, #28]
 8010592:	e00b      	b.n	80105ac <lcp_addci+0x24e>
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	1c5a      	adds	r2, r3, #1
 8010598:	60ba      	str	r2, [r7, #8]
 801059a:	6979      	ldr	r1, [r7, #20]
 801059c:	69fa      	ldr	r2, [r7, #28]
 801059e:	440a      	add	r2, r1
 80105a0:	320f      	adds	r2, #15
 80105a2:	7812      	ldrb	r2, [r2, #0]
 80105a4:	701a      	strb	r2, [r3, #0]
 80105a6:	69fb      	ldr	r3, [r7, #28]
 80105a8:	3301      	adds	r3, #1
 80105aa:	61fb      	str	r3, [r7, #28]
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	7b9b      	ldrb	r3, [r3, #14]
 80105b0:	461a      	mov	r2, r3
 80105b2:	69fb      	ldr	r3, [r7, #28]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	dced      	bgt.n	8010594 <lcp_addci+0x236>

    if (ucp - start_ucp != *lenp) {
	/* this should never happen, because peer_mtu should be 1500 */
	ppp_error(("Bug in lcp_addci: wrong length"));
    }
}
 80105b8:	bf00      	nop
 80105ba:	3724      	adds	r7, #36	; 0x24
 80105bc:	46bd      	mov	sp, r7
 80105be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c2:	4770      	bx	lr

080105c4 <lcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int lcp_ackci(fsm *f, u_char *p, int len) {
 80105c4:	b480      	push	{r7}
 80105c6:	b08b      	sub	sp, #44	; 0x2c
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	60f8      	str	r0, [r7, #12]
 80105cc:	60b9      	str	r1, [r7, #8]
 80105ce:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	623b      	str	r3, [r7, #32]
    lcp_options *go = &pcb->lcp_gotoptions;
 80105d6:	6a3b      	ldr	r3, [r7, #32]
 80105d8:	3384      	adds	r3, #132	; 0x84
 80105da:	61fb      	str	r3, [r7, #28]
	    if (cichar != val[i]) \
		goto bad; \
	} \
    }

    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 80105dc:	69fb      	ldr	r3, [r7, #28]
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	f003 0304 	and.w	r3, r3, #4
 80105e4:	b2db      	uxtb	r3, r3
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d033      	beq.n	8010652 <lcp_ackci+0x8e>
 80105ea:	69fb      	ldr	r3, [r7, #28]
 80105ec:	885b      	ldrh	r3, [r3, #2]
 80105ee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80105f2:	4293      	cmp	r3, r2
 80105f4:	d02d      	beq.n	8010652 <lcp_ackci+0x8e>
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	3b04      	subs	r3, #4
 80105fa:	607b      	str	r3, [r7, #4]
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	f2c0 81c6 	blt.w	8010990 <lcp_ackci+0x3cc>
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	1c5a      	adds	r2, r3, #1
 8010608:	60ba      	str	r2, [r7, #8]
 801060a:	781b      	ldrb	r3, [r3, #0]
 801060c:	76fb      	strb	r3, [r7, #27]
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	1c5a      	adds	r2, r3, #1
 8010612:	60ba      	str	r2, [r7, #8]
 8010614:	781b      	ldrb	r3, [r3, #0]
 8010616:	76bb      	strb	r3, [r7, #26]
 8010618:	7ebb      	ldrb	r3, [r7, #26]
 801061a:	2b04      	cmp	r3, #4
 801061c:	f040 81d9 	bne.w	80109d2 <lcp_ackci+0x40e>
 8010620:	7efb      	ldrb	r3, [r7, #27]
 8010622:	2b01      	cmp	r3, #1
 8010624:	f040 81d5 	bne.w	80109d2 <lcp_ackci+0x40e>
 8010628:	68bb      	ldr	r3, [r7, #8]
 801062a:	1c5a      	adds	r2, r3, #1
 801062c:	60ba      	str	r2, [r7, #8]
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	b29b      	uxth	r3, r3
 8010632:	021b      	lsls	r3, r3, #8
 8010634:	833b      	strh	r3, [r7, #24]
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	1c5a      	adds	r2, r3, #1
 801063a:	60ba      	str	r2, [r7, #8]
 801063c:	781b      	ldrb	r3, [r3, #0]
 801063e:	b29a      	uxth	r2, r3
 8010640:	8b3b      	ldrh	r3, [r7, #24]
 8010642:	4313      	orrs	r3, r2
 8010644:	833b      	strh	r3, [r7, #24]
 8010646:	69fb      	ldr	r3, [r7, #28]
 8010648:	885b      	ldrh	r3, [r3, #2]
 801064a:	8b3a      	ldrh	r2, [r7, #24]
 801064c:	429a      	cmp	r2, r3
 801064e:	f040 81a1 	bne.w	8010994 <lcp_ackci+0x3d0>
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 8010652:	69fb      	ldr	r3, [r7, #28]
 8010654:	781b      	ldrb	r3, [r3, #0]
 8010656:	f003 0308 	and.w	r3, r3, #8
 801065a:	b2db      	uxtb	r3, r3
 801065c:	2b00      	cmp	r3, #0
 801065e:	d047      	beq.n	80106f0 <lcp_ackci+0x12c>
 8010660:	69fb      	ldr	r3, [r7, #28]
 8010662:	685b      	ldr	r3, [r3, #4]
 8010664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010668:	d042      	beq.n	80106f0 <lcp_ackci+0x12c>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	3b06      	subs	r3, #6
 801066e:	607b      	str	r3, [r7, #4]
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2b00      	cmp	r3, #0
 8010674:	f2c0 8190 	blt.w	8010998 <lcp_ackci+0x3d4>
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	1c5a      	adds	r2, r3, #1
 801067c:	60ba      	str	r2, [r7, #8]
 801067e:	781b      	ldrb	r3, [r3, #0]
 8010680:	76fb      	strb	r3, [r7, #27]
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	1c5a      	adds	r2, r3, #1
 8010686:	60ba      	str	r2, [r7, #8]
 8010688:	781b      	ldrb	r3, [r3, #0]
 801068a:	76bb      	strb	r3, [r7, #26]
 801068c:	7ebb      	ldrb	r3, [r7, #26]
 801068e:	2b06      	cmp	r3, #6
 8010690:	f040 819f 	bne.w	80109d2 <lcp_ackci+0x40e>
 8010694:	7efb      	ldrb	r3, [r7, #27]
 8010696:	2b02      	cmp	r3, #2
 8010698:	f040 819b 	bne.w	80109d2 <lcp_ackci+0x40e>
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	1c5a      	adds	r2, r3, #1
 80106a0:	60ba      	str	r2, [r7, #8]
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	021b      	lsls	r3, r3, #8
 80106a6:	617b      	str	r3, [r7, #20]
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	1c5a      	adds	r2, r3, #1
 80106ac:	60ba      	str	r2, [r7, #8]
 80106ae:	781b      	ldrb	r3, [r3, #0]
 80106b0:	461a      	mov	r2, r3
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	4313      	orrs	r3, r2
 80106b6:	617b      	str	r3, [r7, #20]
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	021b      	lsls	r3, r3, #8
 80106bc:	617b      	str	r3, [r7, #20]
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	1c5a      	adds	r2, r3, #1
 80106c2:	60ba      	str	r2, [r7, #8]
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	461a      	mov	r2, r3
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	4313      	orrs	r3, r2
 80106cc:	617b      	str	r3, [r7, #20]
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	021b      	lsls	r3, r3, #8
 80106d2:	617b      	str	r3, [r7, #20]
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	1c5a      	adds	r2, r3, #1
 80106d8:	60ba      	str	r2, [r7, #8]
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	461a      	mov	r2, r3
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	4313      	orrs	r3, r2
 80106e2:	617b      	str	r3, [r7, #20]
 80106e4:	69fb      	ldr	r3, [r7, #28]
 80106e6:	685a      	ldr	r2, [r3, #4]
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	f040 8156 	bne.w	801099c <lcp_ackci+0x3d8>
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
    ACKCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
    ACKCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 80106f0:	69fb      	ldr	r3, [r7, #28]
 80106f2:	781b      	ldrb	r3, [r3, #0]
 80106f4:	f003 0310 	and.w	r3, r3, #16
 80106f8:	b2db      	uxtb	r3, r3
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d02d      	beq.n	801075a <lcp_ackci+0x196>
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	3b04      	subs	r3, #4
 8010702:	607b      	str	r3, [r7, #4]
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2b00      	cmp	r3, #0
 8010708:	f2c0 814a 	blt.w	80109a0 <lcp_ackci+0x3dc>
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	1c5a      	adds	r2, r3, #1
 8010710:	60ba      	str	r2, [r7, #8]
 8010712:	781b      	ldrb	r3, [r3, #0]
 8010714:	76fb      	strb	r3, [r7, #27]
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	1c5a      	adds	r2, r3, #1
 801071a:	60ba      	str	r2, [r7, #8]
 801071c:	781b      	ldrb	r3, [r3, #0]
 801071e:	76bb      	strb	r3, [r7, #26]
 8010720:	7ebb      	ldrb	r3, [r7, #26]
 8010722:	2b04      	cmp	r3, #4
 8010724:	f040 8155 	bne.w	80109d2 <lcp_ackci+0x40e>
 8010728:	7efb      	ldrb	r3, [r7, #27]
 801072a:	2b03      	cmp	r3, #3
 801072c:	f040 8151 	bne.w	80109d2 <lcp_ackci+0x40e>
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	1c5a      	adds	r2, r3, #1
 8010734:	60ba      	str	r2, [r7, #8]
 8010736:	781b      	ldrb	r3, [r3, #0]
 8010738:	b29b      	uxth	r3, r3
 801073a:	021b      	lsls	r3, r3, #8
 801073c:	833b      	strh	r3, [r7, #24]
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	1c5a      	adds	r2, r3, #1
 8010742:	60ba      	str	r2, [r7, #8]
 8010744:	781b      	ldrb	r3, [r3, #0]
 8010746:	b29a      	uxth	r2, r3
 8010748:	8b3b      	ldrh	r3, [r7, #24]
 801074a:	4313      	orrs	r3, r2
 801074c:	833b      	strh	r3, [r7, #24]
 801074e:	8b3b      	ldrh	r3, [r7, #24]
 8010750:	f24c 0223 	movw	r2, #49187	; 0xc023
 8010754:	4293      	cmp	r3, r2
 8010756:	f040 8125 	bne.w	80109a4 <lcp_ackci+0x3e0>
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ACKCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 801075a:	69fb      	ldr	r3, [r7, #28]
 801075c:	785b      	ldrb	r3, [r3, #1]
 801075e:	f003 0301 	and.w	r3, r3, #1
 8010762:	b2db      	uxtb	r3, r3
 8010764:	2b00      	cmp	r3, #0
 8010766:	d021      	beq.n	80107ac <lcp_ackci+0x1e8>
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	3b03      	subs	r3, #3
 801076c:	607b      	str	r3, [r7, #4]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2b00      	cmp	r3, #0
 8010772:	f2c0 8119 	blt.w	80109a8 <lcp_ackci+0x3e4>
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	1c5a      	adds	r2, r3, #1
 801077a:	60ba      	str	r2, [r7, #8]
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	76fb      	strb	r3, [r7, #27]
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	1c5a      	adds	r2, r3, #1
 8010784:	60ba      	str	r2, [r7, #8]
 8010786:	781b      	ldrb	r3, [r3, #0]
 8010788:	76bb      	strb	r3, [r7, #26]
 801078a:	7ebb      	ldrb	r3, [r7, #26]
 801078c:	2b03      	cmp	r3, #3
 801078e:	f040 8120 	bne.w	80109d2 <lcp_ackci+0x40e>
 8010792:	7efb      	ldrb	r3, [r7, #27]
 8010794:	2b0d      	cmp	r3, #13
 8010796:	f040 811c 	bne.w	80109d2 <lcp_ackci+0x40e>
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	1c5a      	adds	r2, r3, #1
 801079e:	60ba      	str	r2, [r7, #8]
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	74fb      	strb	r3, [r7, #19]
 80107a4:	7cfb      	ldrb	r3, [r7, #19]
 80107a6:	2b06      	cmp	r3, #6
 80107a8:	f040 8100 	bne.w	80109ac <lcp_ackci+0x3e8>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 80107ac:	69fb      	ldr	r3, [r7, #28]
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	f003 0320 	and.w	r3, r3, #32
 80107b4:	b2db      	uxtb	r3, r3
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d042      	beq.n	8010840 <lcp_ackci+0x27c>
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	3b06      	subs	r3, #6
 80107be:	607b      	str	r3, [r7, #4]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	f2c0 80f4 	blt.w	80109b0 <lcp_ackci+0x3ec>
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	1c5a      	adds	r2, r3, #1
 80107cc:	60ba      	str	r2, [r7, #8]
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	76fb      	strb	r3, [r7, #27]
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	1c5a      	adds	r2, r3, #1
 80107d6:	60ba      	str	r2, [r7, #8]
 80107d8:	781b      	ldrb	r3, [r3, #0]
 80107da:	76bb      	strb	r3, [r7, #26]
 80107dc:	7ebb      	ldrb	r3, [r7, #26]
 80107de:	2b06      	cmp	r3, #6
 80107e0:	f040 80f7 	bne.w	80109d2 <lcp_ackci+0x40e>
 80107e4:	7efb      	ldrb	r3, [r7, #27]
 80107e6:	2b05      	cmp	r3, #5
 80107e8:	f040 80f3 	bne.w	80109d2 <lcp_ackci+0x40e>
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	1c5a      	adds	r2, r3, #1
 80107f0:	60ba      	str	r2, [r7, #8]
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	021b      	lsls	r3, r3, #8
 80107f6:	617b      	str	r3, [r7, #20]
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	1c5a      	adds	r2, r3, #1
 80107fc:	60ba      	str	r2, [r7, #8]
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	461a      	mov	r2, r3
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	4313      	orrs	r3, r2
 8010806:	617b      	str	r3, [r7, #20]
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	021b      	lsls	r3, r3, #8
 801080c:	617b      	str	r3, [r7, #20]
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	1c5a      	adds	r2, r3, #1
 8010812:	60ba      	str	r2, [r7, #8]
 8010814:	781b      	ldrb	r3, [r3, #0]
 8010816:	461a      	mov	r2, r3
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	4313      	orrs	r3, r2
 801081c:	617b      	str	r3, [r7, #20]
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	021b      	lsls	r3, r3, #8
 8010822:	617b      	str	r3, [r7, #20]
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	1c5a      	adds	r2, r3, #1
 8010828:	60ba      	str	r2, [r7, #8]
 801082a:	781b      	ldrb	r3, [r3, #0]
 801082c:	461a      	mov	r2, r3
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	4313      	orrs	r3, r2
 8010832:	617b      	str	r3, [r7, #20]
 8010834:	69fb      	ldr	r3, [r7, #28]
 8010836:	689a      	ldr	r2, [r3, #8]
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	429a      	cmp	r2, r3
 801083c:	f040 80ba 	bne.w	80109b4 <lcp_ackci+0x3f0>
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 8010840:	69fb      	ldr	r3, [r7, #28]
 8010842:	781b      	ldrb	r3, [r3, #0]
 8010844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010848:	b2db      	uxtb	r3, r3
 801084a:	2b00      	cmp	r3, #0
 801084c:	d018      	beq.n	8010880 <lcp_ackci+0x2bc>
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	3b02      	subs	r3, #2
 8010852:	607b      	str	r3, [r7, #4]
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2b00      	cmp	r3, #0
 8010858:	f2c0 80ae 	blt.w	80109b8 <lcp_ackci+0x3f4>
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	1c5a      	adds	r2, r3, #1
 8010860:	60ba      	str	r2, [r7, #8]
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	76fb      	strb	r3, [r7, #27]
 8010866:	68bb      	ldr	r3, [r7, #8]
 8010868:	1c5a      	adds	r2, r3, #1
 801086a:	60ba      	str	r2, [r7, #8]
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	76bb      	strb	r3, [r7, #26]
 8010870:	7ebb      	ldrb	r3, [r7, #26]
 8010872:	2b02      	cmp	r3, #2
 8010874:	f040 80ad 	bne.w	80109d2 <lcp_ackci+0x40e>
 8010878:	7efb      	ldrb	r3, [r7, #27]
 801087a:	2b07      	cmp	r3, #7
 801087c:	f040 80a9 	bne.w	80109d2 <lcp_ackci+0x40e>
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 8010880:	69fb      	ldr	r3, [r7, #28]
 8010882:	781b      	ldrb	r3, [r3, #0]
 8010884:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010888:	b2db      	uxtb	r3, r3
 801088a:	2b00      	cmp	r3, #0
 801088c:	d018      	beq.n	80108c0 <lcp_ackci+0x2fc>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	3b02      	subs	r3, #2
 8010892:	607b      	str	r3, [r7, #4]
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2b00      	cmp	r3, #0
 8010898:	f2c0 8090 	blt.w	80109bc <lcp_ackci+0x3f8>
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	1c5a      	adds	r2, r3, #1
 80108a0:	60ba      	str	r2, [r7, #8]
 80108a2:	781b      	ldrb	r3, [r3, #0]
 80108a4:	76fb      	strb	r3, [r7, #27]
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	1c5a      	adds	r2, r3, #1
 80108aa:	60ba      	str	r2, [r7, #8]
 80108ac:	781b      	ldrb	r3, [r3, #0]
 80108ae:	76bb      	strb	r3, [r7, #26]
 80108b0:	7ebb      	ldrb	r3, [r7, #26]
 80108b2:	2b02      	cmp	r3, #2
 80108b4:	f040 808d 	bne.w	80109d2 <lcp_ackci+0x40e>
 80108b8:	7efb      	ldrb	r3, [r7, #27]
 80108ba:	2b08      	cmp	r3, #8
 80108bc:	f040 8089 	bne.w	80109d2 <lcp_ackci+0x40e>
#ifdef HAVE_MULTILINK
    ACKCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 80108c0:	69fb      	ldr	r3, [r7, #28]
 80108c2:	785b      	ldrb	r3, [r3, #1]
 80108c4:	f003 0302 	and.w	r3, r3, #2
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d015      	beq.n	80108fa <lcp_ackci+0x336>
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	3b02      	subs	r3, #2
 80108d2:	607b      	str	r3, [r7, #4]
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	db72      	blt.n	80109c0 <lcp_ackci+0x3fc>
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	1c5a      	adds	r2, r3, #1
 80108de:	60ba      	str	r2, [r7, #8]
 80108e0:	781b      	ldrb	r3, [r3, #0]
 80108e2:	76fb      	strb	r3, [r7, #27]
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	1c5a      	adds	r2, r3, #1
 80108e8:	60ba      	str	r2, [r7, #8]
 80108ea:	781b      	ldrb	r3, [r3, #0]
 80108ec:	76bb      	strb	r3, [r7, #26]
 80108ee:	7ebb      	ldrb	r3, [r7, #26]
 80108f0:	2b02      	cmp	r3, #2
 80108f2:	d16e      	bne.n	80109d2 <lcp_ackci+0x40e>
 80108f4:	7efb      	ldrb	r3, [r7, #27]
 80108f6:	2b12      	cmp	r3, #18
 80108f8:	d16b      	bne.n	80109d2 <lcp_ackci+0x40e>
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 80108fa:	69fb      	ldr	r3, [r7, #28]
 80108fc:	785b      	ldrb	r3, [r3, #1]
 80108fe:	f003 0304 	and.w	r3, r3, #4
 8010902:	b2db      	uxtb	r3, r3
 8010904:	2b00      	cmp	r3, #0
 8010906:	d03e      	beq.n	8010986 <lcp_ackci+0x3c2>
 8010908:	69fb      	ldr	r3, [r7, #28]
 801090a:	7b9b      	ldrb	r3, [r3, #14]
 801090c:	3303      	adds	r3, #3
 801090e:	687a      	ldr	r2, [r7, #4]
 8010910:	1ad3      	subs	r3, r2, r3
 8010912:	607b      	str	r3, [r7, #4]
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2b00      	cmp	r3, #0
 8010918:	db54      	blt.n	80109c4 <lcp_ackci+0x400>
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	1c5a      	adds	r2, r3, #1
 801091e:	60ba      	str	r2, [r7, #8]
 8010920:	781b      	ldrb	r3, [r3, #0]
 8010922:	76fb      	strb	r3, [r7, #27]
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	1c5a      	adds	r2, r3, #1
 8010928:	60ba      	str	r2, [r7, #8]
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	76bb      	strb	r3, [r7, #26]
 801092e:	7eba      	ldrb	r2, [r7, #26]
 8010930:	69fb      	ldr	r3, [r7, #28]
 8010932:	7b9b      	ldrb	r3, [r3, #14]
 8010934:	3303      	adds	r3, #3
 8010936:	429a      	cmp	r2, r3
 8010938:	d14b      	bne.n	80109d2 <lcp_ackci+0x40e>
 801093a:	7efb      	ldrb	r3, [r7, #27]
 801093c:	2b13      	cmp	r3, #19
 801093e:	d148      	bne.n	80109d2 <lcp_ackci+0x40e>
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	1c5a      	adds	r2, r3, #1
 8010944:	60ba      	str	r2, [r7, #8]
 8010946:	781b      	ldrb	r3, [r3, #0]
 8010948:	74fb      	strb	r3, [r7, #19]
 801094a:	69fb      	ldr	r3, [r7, #28]
 801094c:	7b5b      	ldrb	r3, [r3, #13]
 801094e:	7cfa      	ldrb	r2, [r7, #19]
 8010950:	429a      	cmp	r2, r3
 8010952:	d139      	bne.n	80109c8 <lcp_ackci+0x404>
 8010954:	2300      	movs	r3, #0
 8010956:	627b      	str	r3, [r7, #36]	; 0x24
 8010958:	e00f      	b.n	801097a <lcp_ackci+0x3b6>
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	1c5a      	adds	r2, r3, #1
 801095e:	60ba      	str	r2, [r7, #8]
 8010960:	781b      	ldrb	r3, [r3, #0]
 8010962:	74fb      	strb	r3, [r7, #19]
 8010964:	69fa      	ldr	r2, [r7, #28]
 8010966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010968:	4413      	add	r3, r2
 801096a:	330f      	adds	r3, #15
 801096c:	781b      	ldrb	r3, [r3, #0]
 801096e:	7cfa      	ldrb	r2, [r7, #19]
 8010970:	429a      	cmp	r2, r3
 8010972:	d12b      	bne.n	80109cc <lcp_ackci+0x408>
 8010974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010976:	3301      	adds	r3, #1
 8010978:	627b      	str	r3, [r7, #36]	; 0x24
 801097a:	69fb      	ldr	r3, [r7, #28]
 801097c:	7b9b      	ldrb	r3, [r3, #14]
 801097e:	461a      	mov	r2, r3
 8010980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010982:	429a      	cmp	r2, r3
 8010984:	dce9      	bgt.n	801095a <lcp_ackci+0x396>
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d121      	bne.n	80109d0 <lcp_ackci+0x40c>
	goto bad;
    return (1);
 801098c:	2301      	movs	r3, #1
 801098e:	e021      	b.n	80109d4 <lcp_ackci+0x410>
    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 8010990:	bf00      	nop
 8010992:	e01e      	b.n	80109d2 <lcp_ackci+0x40e>
 8010994:	bf00      	nop
 8010996:	e01c      	b.n	80109d2 <lcp_ackci+0x40e>
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 8010998:	bf00      	nop
 801099a:	e01a      	b.n	80109d2 <lcp_ackci+0x40e>
 801099c:	bf00      	nop
 801099e:	e018      	b.n	80109d2 <lcp_ackci+0x40e>
    ACKCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 80109a0:	bf00      	nop
 80109a2:	e016      	b.n	80109d2 <lcp_ackci+0x40e>
 80109a4:	bf00      	nop
 80109a6:	e014      	b.n	80109d2 <lcp_ackci+0x40e>
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 80109a8:	bf00      	nop
 80109aa:	e012      	b.n	80109d2 <lcp_ackci+0x40e>
 80109ac:	bf00      	nop
 80109ae:	e010      	b.n	80109d2 <lcp_ackci+0x40e>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 80109b0:	bf00      	nop
 80109b2:	e00e      	b.n	80109d2 <lcp_ackci+0x40e>
 80109b4:	bf00      	nop
 80109b6:	e00c      	b.n	80109d2 <lcp_ackci+0x40e>
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 80109b8:	bf00      	nop
 80109ba:	e00a      	b.n	80109d2 <lcp_ackci+0x40e>
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 80109bc:	bf00      	nop
 80109be:	e008      	b.n	80109d2 <lcp_ackci+0x40e>
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 80109c0:	bf00      	nop
 80109c2:	e006      	b.n	80109d2 <lcp_ackci+0x40e>
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 80109c4:	bf00      	nop
 80109c6:	e004      	b.n	80109d2 <lcp_ackci+0x40e>
 80109c8:	bf00      	nop
 80109ca:	e002      	b.n	80109d2 <lcp_ackci+0x40e>
 80109cc:	bf00      	nop
 80109ce:	e000      	b.n	80109d2 <lcp_ackci+0x40e>
	goto bad;
 80109d0:	bf00      	nop
bad:
    LCPDEBUG(("lcp_acki: received bad Ack!"));
    return (0);
 80109d2:	2300      	movs	r3, #0
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	372c      	adds	r7, #44	; 0x2c
 80109d8:	46bd      	mov	sp, r7
 80109da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109de:	4770      	bx	lr

080109e0 <lcp_nakci>:
 *
 * Returns:
 *	0 - Nak was bad.
 *	1 - Nak was good.
 */
static int lcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 80109e0:	b5b0      	push	{r4, r5, r7, lr}
 80109e2:	b0a0      	sub	sp, #128	; 0x80
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	60f8      	str	r0, [r7, #12]
 80109e8:	60b9      	str	r1, [r7, #8]
 80109ea:	607a      	str	r2, [r7, #4]
 80109ec:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	67bb      	str	r3, [r7, #120]	; 0x78
    lcp_options *go = &pcb->lcp_gotoptions;
 80109f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80109f6:	3384      	adds	r3, #132	; 0x84
 80109f8:	677b      	str	r3, [r7, #116]	; 0x74
    lcp_options *wo = &pcb->lcp_wantoptions;
 80109fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80109fc:	3360      	adds	r3, #96	; 0x60
 80109fe:	673b      	str	r3, [r7, #112]	; 0x70
    u_char citype, cichar, *next;
    u_short cishort;
    u32_t cilong;
    lcp_options no;		/* options we've seen Naks for */
    lcp_options try_;		/* options to request next time */
    int looped_back = 0;
 8010a00:	2300      	movs	r3, #0
 8010a02:	67fb      	str	r3, [r7, #124]	; 0x7c
    int cilen;

    BZERO(&no, sizeof(no));
 8010a04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010a08:	2224      	movs	r2, #36	; 0x24
 8010a0a:	2100      	movs	r1, #0
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f003 fb16 	bl	801403e <memset>
    try_ = *go;
 8010a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a14:	f107 0414 	add.w	r4, r7, #20
 8010a18:	461d      	mov	r5, r3
 8010a1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a22:	682b      	ldr	r3, [r5, #0]
 8010a24:	6023      	str	r3, [r4, #0]
     * we want.  Therefore, accept any MRU less than what we asked for,
     * but then ignore the new value when setting the MRU in the kernel.
     * If they send us a bigger MRU than what we asked, accept it, up to
     * the limit of the default MRU we'd get if we didn't negotiate.
     */
    if (go->neg_mru && go->mru != PPP_DEFMRU) {
 8010a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	f003 0304 	and.w	r3, r3, #4
 8010a2e:	b2db      	uxtb	r3, r3
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d045      	beq.n	8010ac0 <lcp_nakci+0xe0>
 8010a34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a36:	885b      	ldrh	r3, [r3, #2]
 8010a38:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010a3c:	4293      	cmp	r3, r2
 8010a3e:	d03f      	beq.n	8010ac0 <lcp_nakci+0xe0>
	NAKCISHORT(CI_MRU, neg_mru,
 8010a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	f003 0304 	and.w	r3, r3, #4
 8010a48:	b2db      	uxtb	r3, r3
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d038      	beq.n	8010ac0 <lcp_nakci+0xe0>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2b03      	cmp	r3, #3
 8010a52:	dd35      	ble.n	8010ac0 <lcp_nakci+0xe0>
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	3301      	adds	r3, #1
 8010a58:	781b      	ldrb	r3, [r3, #0]
 8010a5a:	2b04      	cmp	r3, #4
 8010a5c:	d130      	bne.n	8010ac0 <lcp_nakci+0xe0>
 8010a5e:	68bb      	ldr	r3, [r7, #8]
 8010a60:	781b      	ldrb	r3, [r3, #0]
 8010a62:	2b01      	cmp	r3, #1
 8010a64:	d12c      	bne.n	8010ac0 <lcp_nakci+0xe0>
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	3b04      	subs	r3, #4
 8010a6a:	607b      	str	r3, [r7, #4]
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	3302      	adds	r3, #2
 8010a70:	60bb      	str	r3, [r7, #8]
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	1c5a      	adds	r2, r3, #1
 8010a76:	60ba      	str	r2, [r7, #8]
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	b29b      	uxth	r3, r3
 8010a7c:	021b      	lsls	r3, r3, #8
 8010a7e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	1c5a      	adds	r2, r3, #1
 8010a86:	60ba      	str	r2, [r7, #8]
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	b29a      	uxth	r2, r3
 8010a8c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010a90:	4313      	orrs	r3, r2
 8010a92:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8010a96:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010a9a:	f043 0304 	orr.w	r3, r3, #4
 8010a9e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8010aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010aa4:	885b      	ldrh	r3, [r3, #2]
 8010aa6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8010aaa:	429a      	cmp	r2, r3
 8010aac:	d905      	bls.n	8010aba <lcp_nakci+0xda>
 8010aae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010ab2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	d802      	bhi.n	8010ac0 <lcp_nakci+0xe0>
 8010aba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010abe:	82fb      	strh	r3, [r7, #22]
    }

    /*
     * Add any characters they want to our (receive-side) asyncmap.
     */
    if (go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) {
 8010ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	f003 0308 	and.w	r3, r3, #8
 8010ac8:	b2db      	uxtb	r3, r3
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d04c      	beq.n	8010b68 <lcp_nakci+0x188>
 8010ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ad6:	d047      	beq.n	8010b68 <lcp_nakci+0x188>
	NAKCILONG(CI_ASYNCMAP, neg_asyncmap,
 8010ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ada:	781b      	ldrb	r3, [r3, #0]
 8010adc:	f003 0308 	and.w	r3, r3, #8
 8010ae0:	b2db      	uxtb	r3, r3
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d040      	beq.n	8010b68 <lcp_nakci+0x188>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	2b05      	cmp	r3, #5
 8010aea:	dd3d      	ble.n	8010b68 <lcp_nakci+0x188>
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	3301      	adds	r3, #1
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	2b06      	cmp	r3, #6
 8010af4:	d138      	bne.n	8010b68 <lcp_nakci+0x188>
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	781b      	ldrb	r3, [r3, #0]
 8010afa:	2b02      	cmp	r3, #2
 8010afc:	d134      	bne.n	8010b68 <lcp_nakci+0x188>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	3b06      	subs	r3, #6
 8010b02:	607b      	str	r3, [r7, #4]
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	3302      	adds	r3, #2
 8010b08:	60bb      	str	r3, [r7, #8]
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	1c5a      	adds	r2, r3, #1
 8010b0e:	60ba      	str	r2, [r7, #8]
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	021b      	lsls	r3, r3, #8
 8010b14:	66bb      	str	r3, [r7, #104]	; 0x68
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	1c5a      	adds	r2, r3, #1
 8010b1a:	60ba      	str	r2, [r7, #8]
 8010b1c:	781b      	ldrb	r3, [r3, #0]
 8010b1e:	461a      	mov	r2, r3
 8010b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b22:	4313      	orrs	r3, r2
 8010b24:	66bb      	str	r3, [r7, #104]	; 0x68
 8010b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b28:	021b      	lsls	r3, r3, #8
 8010b2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	1c5a      	adds	r2, r3, #1
 8010b30:	60ba      	str	r2, [r7, #8]
 8010b32:	781b      	ldrb	r3, [r3, #0]
 8010b34:	461a      	mov	r2, r3
 8010b36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b38:	4313      	orrs	r3, r2
 8010b3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8010b3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b3e:	021b      	lsls	r3, r3, #8
 8010b40:	66bb      	str	r3, [r7, #104]	; 0x68
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	1c5a      	adds	r2, r3, #1
 8010b46:	60ba      	str	r2, [r7, #8]
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b4e:	4313      	orrs	r3, r2
 8010b50:	66bb      	str	r3, [r7, #104]	; 0x68
 8010b52:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010b56:	f043 0308 	orr.w	r3, r3, #8
 8010b5a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8010b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b60:	685a      	ldr	r2, [r3, #4]
 8010b62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b64:	4313      	orrs	r3, r2
 8010b66:	61bb      	str	r3, [r7, #24]
    if ((0
#if CHAP_SUPPORT
        || go->neg_chap
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
        || go->neg_upap
 8010b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b6a:	781b      	ldrb	r3, [r3, #0]
 8010b6c:	f003 0310 	and.w	r3, r3, #16
 8010b70:	b2db      	uxtb	r3, r3
    if ((0
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d04d      	beq.n	8010c12 <lcp_nakci+0x232>
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
        || go->neg_eap
#endif /* EAP_SUPPORT */
        )
	&& len >= CILEN_SHORT
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2b03      	cmp	r3, #3
 8010b7a:	dd4a      	ble.n	8010c12 <lcp_nakci+0x232>
	&& p[0] == CI_AUTHTYPE && p[1] >= CILEN_SHORT && p[1] <= len) {
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	2b03      	cmp	r3, #3
 8010b82:	d146      	bne.n	8010c12 <lcp_nakci+0x232>
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	3301      	adds	r3, #1
 8010b88:	781b      	ldrb	r3, [r3, #0]
 8010b8a:	2b03      	cmp	r3, #3
 8010b8c:	d941      	bls.n	8010c12 <lcp_nakci+0x232>
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	3301      	adds	r3, #1
 8010b92:	781b      	ldrb	r3, [r3, #0]
 8010b94:	461a      	mov	r2, r3
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	dc3a      	bgt.n	8010c12 <lcp_nakci+0x232>
	cilen = p[1];
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	3301      	adds	r3, #1
 8010ba0:	781b      	ldrb	r3, [r3, #0]
 8010ba2:	667b      	str	r3, [r7, #100]	; 0x64
	len -= cilen;
 8010ba4:	687a      	ldr	r2, [r7, #4]
 8010ba6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ba8:	1ad3      	subs	r3, r2, r3
 8010baa:	607b      	str	r3, [r7, #4]
#if CHAP_SUPPORT
	no.neg_chap = go->neg_chap;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	no.neg_upap = go->neg_upap;
 8010bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010bae:	781b      	ldrb	r3, [r3, #0]
 8010bb0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8010bb4:	b2da      	uxtb	r2, r3
 8010bb6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010bba:	f362 1304 	bfi	r3, r2, #4, #1
 8010bbe:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
	no.neg_eap = go->neg_eap;
#endif /* EAP_SUPPORT */
	INCPTR(2, p);
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	3302      	adds	r3, #2
 8010bc6:	60bb      	str	r3, [r7, #8]
	GETSHORT(cishort, p);
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	1c5a      	adds	r2, r3, #1
 8010bcc:	60ba      	str	r2, [r7, #8]
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	021b      	lsls	r3, r3, #8
 8010bd4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	1c5a      	adds	r2, r3, #1
 8010bdc:	60ba      	str	r2, [r7, #8]
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	b29a      	uxth	r2, r3
 8010be2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010be6:	4313      	orrs	r3, r2
 8010be8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

#if PAP_SUPPORT
	if (cishort == PPP_PAP && cilen == CILEN_SHORT) {
 8010bec:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010bf0:	f24c 0223 	movw	r2, #49187	; 0xc023
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d103      	bne.n	8010c00 <lcp_nakci+0x220>
 8010bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010bfa:	2b04      	cmp	r3, #4
 8010bfc:	f000 8265 	beq.w	80110ca <lcp_nakci+0x6ea>
	    else
#endif /* CHAP_SUPPORT */

#if PAP_SUPPORT
	    if(1)
		try_.neg_upap = 0;
 8010c00:	7d3b      	ldrb	r3, [r7, #20]
 8010c02:	f36f 1304 	bfc	r3, #4, #1
 8010c06:	753b      	strb	r3, [r7, #20]
	    else
#endif /* PAP_SUPPORT */
	    {}

	    p += cilen - CILEN_SHORT;
 8010c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010c0a:	3b04      	subs	r3, #4
 8010c0c:	68ba      	ldr	r2, [r7, #8]
 8010c0e:	4413      	add	r3, r2
 8010c10:	60bb      	str	r3, [r7, #8]
#endif /* LQR_SUPPORT */

    /*
     * Only implementing CBCP...not the rest of the callback options
     */
    NAKCICHAR(CI_CALLBACK, neg_cbcp,
 8010c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c14:	785b      	ldrb	r3, [r3, #1]
 8010c16:	f003 0301 	and.w	r3, r3, #1
 8010c1a:	b2db      	uxtb	r3, r3
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d021      	beq.n	8010c64 <lcp_nakci+0x284>
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2b02      	cmp	r3, #2
 8010c24:	dd1e      	ble.n	8010c64 <lcp_nakci+0x284>
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	3301      	adds	r3, #1
 8010c2a:	781b      	ldrb	r3, [r3, #0]
 8010c2c:	2b03      	cmp	r3, #3
 8010c2e:	d119      	bne.n	8010c64 <lcp_nakci+0x284>
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	2b0d      	cmp	r3, #13
 8010c36:	d115      	bne.n	8010c64 <lcp_nakci+0x284>
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	3b03      	subs	r3, #3
 8010c3c:	607b      	str	r3, [r7, #4]
 8010c3e:	68bb      	ldr	r3, [r7, #8]
 8010c40:	3302      	adds	r3, #2
 8010c42:	60bb      	str	r3, [r7, #8]
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	1c5a      	adds	r2, r3, #1
 8010c48:	60ba      	str	r2, [r7, #8]
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8010c50:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010c54:	f043 0301 	orr.w	r3, r3, #1
 8010c58:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8010c5c:	7d7b      	ldrb	r3, [r7, #21]
 8010c5e:	f36f 0300 	bfc	r3, #0, #1
 8010c62:	757b      	strb	r3, [r7, #21]
              );

    /*
     * Check for a looped-back line.
     */
    NAKCILONG(CI_MAGICNUMBER, neg_magicnumber,
 8010c64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c66:	781b      	ldrb	r3, [r3, #0]
 8010c68:	f003 0320 	and.w	r3, r3, #32
 8010c6c:	b2db      	uxtb	r3, r3
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d041      	beq.n	8010cf6 <lcp_nakci+0x316>
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2b05      	cmp	r3, #5
 8010c76:	dd3e      	ble.n	8010cf6 <lcp_nakci+0x316>
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	3301      	adds	r3, #1
 8010c7c:	781b      	ldrb	r3, [r3, #0]
 8010c7e:	2b06      	cmp	r3, #6
 8010c80:	d139      	bne.n	8010cf6 <lcp_nakci+0x316>
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	781b      	ldrb	r3, [r3, #0]
 8010c86:	2b05      	cmp	r3, #5
 8010c88:	d135      	bne.n	8010cf6 <lcp_nakci+0x316>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	3b06      	subs	r3, #6
 8010c8e:	607b      	str	r3, [r7, #4]
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	3302      	adds	r3, #2
 8010c94:	60bb      	str	r3, [r7, #8]
 8010c96:	68bb      	ldr	r3, [r7, #8]
 8010c98:	1c5a      	adds	r2, r3, #1
 8010c9a:	60ba      	str	r2, [r7, #8]
 8010c9c:	781b      	ldrb	r3, [r3, #0]
 8010c9e:	021b      	lsls	r3, r3, #8
 8010ca0:	66bb      	str	r3, [r7, #104]	; 0x68
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	1c5a      	adds	r2, r3, #1
 8010ca6:	60ba      	str	r2, [r7, #8]
 8010ca8:	781b      	ldrb	r3, [r3, #0]
 8010caa:	461a      	mov	r2, r3
 8010cac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010cae:	4313      	orrs	r3, r2
 8010cb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8010cb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010cb4:	021b      	lsls	r3, r3, #8
 8010cb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	1c5a      	adds	r2, r3, #1
 8010cbc:	60ba      	str	r2, [r7, #8]
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	461a      	mov	r2, r3
 8010cc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010cc4:	4313      	orrs	r3, r2
 8010cc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8010cc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010cca:	021b      	lsls	r3, r3, #8
 8010ccc:	66bb      	str	r3, [r7, #104]	; 0x68
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	1c5a      	adds	r2, r3, #1
 8010cd2:	60ba      	str	r2, [r7, #8]
 8010cd4:	781b      	ldrb	r3, [r3, #0]
 8010cd6:	461a      	mov	r2, r3
 8010cd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010cda:	4313      	orrs	r3, r2
 8010cdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8010cde:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010ce2:	f043 0320 	orr.w	r3, r3, #32
 8010ce6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8010cea:	f001 f965 	bl	8011fb8 <magic>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	61fb      	str	r3, [r7, #28]
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	67fb      	str	r3, [r7, #124]	; 0x7c
    /*
     * Peer shouldn't send Nak for protocol compression or
     * address/control compression requests; they should send
     * a Reject instead.  If they send a Nak, treat it as a Reject.
     */
    NAKCIVOID(CI_PCOMPRESSION, neg_pcompression);
 8010cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010cf8:	781b      	ldrb	r3, [r3, #0]
 8010cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cfe:	b2db      	uxtb	r3, r3
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d01b      	beq.n	8010d3c <lcp_nakci+0x35c>
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2b01      	cmp	r3, #1
 8010d08:	dd18      	ble.n	8010d3c <lcp_nakci+0x35c>
 8010d0a:	68bb      	ldr	r3, [r7, #8]
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	781b      	ldrb	r3, [r3, #0]
 8010d10:	2b02      	cmp	r3, #2
 8010d12:	d113      	bne.n	8010d3c <lcp_nakci+0x35c>
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	781b      	ldrb	r3, [r3, #0]
 8010d18:	2b07      	cmp	r3, #7
 8010d1a:	d10f      	bne.n	8010d3c <lcp_nakci+0x35c>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	3b02      	subs	r3, #2
 8010d20:	607b      	str	r3, [r7, #4]
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	3302      	adds	r3, #2
 8010d26:	60bb      	str	r3, [r7, #8]
 8010d28:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d30:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8010d34:	7d3b      	ldrb	r3, [r7, #20]
 8010d36:	f36f 1386 	bfc	r3, #6, #1
 8010d3a:	753b      	strb	r3, [r7, #20]
    NAKCIVOID(CI_ACCOMPRESSION, neg_accompression);
 8010d3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d3e:	781b      	ldrb	r3, [r3, #0]
 8010d40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010d44:	b2db      	uxtb	r3, r3
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d01b      	beq.n	8010d82 <lcp_nakci+0x3a2>
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2b01      	cmp	r3, #1
 8010d4e:	dd18      	ble.n	8010d82 <lcp_nakci+0x3a2>
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	3301      	adds	r3, #1
 8010d54:	781b      	ldrb	r3, [r3, #0]
 8010d56:	2b02      	cmp	r3, #2
 8010d58:	d113      	bne.n	8010d82 <lcp_nakci+0x3a2>
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	781b      	ldrb	r3, [r3, #0]
 8010d5e:	2b08      	cmp	r3, #8
 8010d60:	d10f      	bne.n	8010d82 <lcp_nakci+0x3a2>
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	3b02      	subs	r3, #2
 8010d66:	607b      	str	r3, [r7, #4]
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	3302      	adds	r3, #2
 8010d6c:	60bb      	str	r3, [r7, #8]
 8010d6e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d76:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8010d7a:	7d3b      	ldrb	r3, [r7, #20]
 8010d7c:	f36f 13c7 	bfc	r3, #7, #1
 8010d80:	753b      	strb	r3, [r7, #20]

    /*
     * Nak for short sequence numbers shouldn't be sent, treat it
     * like a reject.
     */
    NAKCIVOID(CI_SSNHF, neg_ssnhf);
 8010d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d84:	785b      	ldrb	r3, [r3, #1]
 8010d86:	f003 0302 	and.w	r3, r3, #2
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d01b      	beq.n	8010dc8 <lcp_nakci+0x3e8>
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2b01      	cmp	r3, #1
 8010d94:	dd18      	ble.n	8010dc8 <lcp_nakci+0x3e8>
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	3301      	adds	r3, #1
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	2b02      	cmp	r3, #2
 8010d9e:	d113      	bne.n	8010dc8 <lcp_nakci+0x3e8>
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	781b      	ldrb	r3, [r3, #0]
 8010da4:	2b12      	cmp	r3, #18
 8010da6:	d10f      	bne.n	8010dc8 <lcp_nakci+0x3e8>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	3b02      	subs	r3, #2
 8010dac:	607b      	str	r3, [r7, #4]
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	3302      	adds	r3, #2
 8010db2:	60bb      	str	r3, [r7, #8]
 8010db4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010db8:	f043 0302 	orr.w	r3, r3, #2
 8010dbc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8010dc0:	7d7b      	ldrb	r3, [r7, #21]
 8010dc2:	f36f 0341 	bfc	r3, #1, #1
 8010dc6:	757b      	strb	r3, [r7, #21]

    /*
     * Nak of the endpoint discriminator option is not permitted,
     * treat it like a reject.
     */
    NAKCIENDP(CI_EPDISC, neg_endpoint);
 8010dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010dca:	785b      	ldrb	r3, [r3, #1]
 8010dcc:	f003 0304 	and.w	r3, r3, #4
 8010dd0:	b2db      	uxtb	r3, r3
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	f000 8148 	beq.w	8011068 <lcp_nakci+0x688>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2b02      	cmp	r3, #2
 8010ddc:	f340 8144 	ble.w	8011068 <lcp_nakci+0x688>
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	781b      	ldrb	r3, [r3, #0]
 8010de4:	2b13      	cmp	r3, #19
 8010de6:	f040 813f 	bne.w	8011068 <lcp_nakci+0x688>
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	3301      	adds	r3, #1
 8010dee:	781b      	ldrb	r3, [r3, #0]
 8010df0:	2b02      	cmp	r3, #2
 8010df2:	f240 8139 	bls.w	8011068 <lcp_nakci+0x688>
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	3301      	adds	r3, #1
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	461a      	mov	r2, r3
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	429a      	cmp	r2, r3
 8010e02:	f300 8131 	bgt.w	8011068 <lcp_nakci+0x688>
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	3301      	adds	r3, #1
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	461a      	mov	r2, r3
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	1a9b      	subs	r3, r3, r2
 8010e12:	607b      	str	r3, [r7, #4]
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	3301      	adds	r3, #1
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	4413      	add	r3, r2
 8010e20:	60bb      	str	r3, [r7, #8]
 8010e22:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010e26:	f043 0304 	orr.w	r3, r3, #4
 8010e2a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8010e2e:	7d7b      	ldrb	r3, [r7, #21]
 8010e30:	f36f 0382 	bfc	r3, #2, #1
 8010e34:	757b      	strb	r3, [r7, #21]
     * For the quality protocol, the Nak means `ask me to send you quality
     * reports', but if we didn't ask for them, we don't want them.
     * An option we don't recognize represents the peer asking to
     * negotiate some option we don't support, so ignore it.
     */
    while (len >= CILEN_VOID) {
 8010e36:	e117      	b.n	8011068 <lcp_nakci+0x688>
	GETCHAR(citype, p);
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	1c5a      	adds	r2, r3, #1
 8010e3c:	60ba      	str	r2, [r7, #8]
 8010e3e:	781b      	ldrb	r3, [r3, #0]
 8010e40:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	GETCHAR(cilen, p);
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	1c5a      	adds	r2, r3, #1
 8010e48:	60ba      	str	r2, [r7, #8]
 8010e4a:	781b      	ldrb	r3, [r3, #0]
 8010e4c:	667b      	str	r3, [r7, #100]	; 0x64
	if (cilen < CILEN_VOID || (len -= cilen) < 0)
 8010e4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e50:	2b01      	cmp	r3, #1
 8010e52:	f340 813a 	ble.w	80110ca <lcp_nakci+0x6ea>
 8010e56:	687a      	ldr	r2, [r7, #4]
 8010e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e5a:	1ad3      	subs	r3, r2, r3
 8010e5c:	607b      	str	r3, [r7, #4]
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	f2c0 8132 	blt.w	80110ca <lcp_nakci+0x6ea>
	    goto bad;
	next = p + cilen - 2;
 8010e66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e68:	3b02      	subs	r3, #2
 8010e6a:	68ba      	ldr	r2, [r7, #8]
 8010e6c:	4413      	add	r3, r2
 8010e6e:	65fb      	str	r3, [r7, #92]	; 0x5c

	switch (citype) {
 8010e70:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8010e74:	3b01      	subs	r3, #1
 8010e76:	2b12      	cmp	r3, #18
 8010e78:	f200 80f1 	bhi.w	801105e <lcp_nakci+0x67e>
 8010e7c:	a201      	add	r2, pc, #4	; (adr r2, 8010e84 <lcp_nakci+0x4a4>)
 8010e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e82:	bf00      	nop
 8010e84:	08010ed1 	.word	0x08010ed1
 8010e88:	08010f47 	.word	0x08010f47
 8010e8c:	08010f7b 	.word	0x08010f7b
 8010e90:	0801105f 	.word	0x0801105f
 8010e94:	08010f9d 	.word	0x08010f9d
 8010e98:	0801105f 	.word	0x0801105f
 8010e9c:	08010fc7 	.word	0x08010fc7
 8010ea0:	08010feb 	.word	0x08010feb
 8010ea4:	0801105f 	.word	0x0801105f
 8010ea8:	0801105f 	.word	0x0801105f
 8010eac:	0801105f 	.word	0x0801105f
 8010eb0:	0801105f 	.word	0x0801105f
 8010eb4:	0801105f 	.word	0x0801105f
 8010eb8:	0801105f 	.word	0x0801105f
 8010ebc:	0801105f 	.word	0x0801105f
 8010ec0:	0801105f 	.word	0x0801105f
 8010ec4:	0801105f 	.word	0x0801105f
 8010ec8:	0801100f 	.word	0x0801100f
 8010ecc:	0801103b 	.word	0x0801103b
	case CI_MRU:
	    if ((go->neg_mru && go->mru != PPP_DEFMRU)
 8010ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ed2:	781b      	ldrb	r3, [r3, #0]
 8010ed4:	f003 0304 	and.w	r3, r3, #4
 8010ed8:	b2db      	uxtb	r3, r3
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d006      	beq.n	8010eec <lcp_nakci+0x50c>
 8010ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ee0:	885b      	ldrh	r3, [r3, #2]
 8010ee2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	f040 80ef 	bne.w	80110ca <lcp_nakci+0x6ea>
		|| no.neg_mru || cilen != CILEN_SHORT)
 8010eec:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010ef0:	f003 0304 	and.w	r3, r3, #4
 8010ef4:	b2db      	uxtb	r3, r3
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	f040 80e7 	bne.w	80110ca <lcp_nakci+0x6ea>
 8010efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010efe:	2b04      	cmp	r3, #4
 8010f00:	f040 80e3 	bne.w	80110ca <lcp_nakci+0x6ea>
		goto bad;
	    GETSHORT(cishort, p);
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	1c5a      	adds	r2, r3, #1
 8010f08:	60ba      	str	r2, [r7, #8]
 8010f0a:	781b      	ldrb	r3, [r3, #0]
 8010f0c:	b29b      	uxth	r3, r3
 8010f0e:	021b      	lsls	r3, r3, #8
 8010f10:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	1c5a      	adds	r2, r3, #1
 8010f18:	60ba      	str	r2, [r7, #8]
 8010f1a:	781b      	ldrb	r3, [r3, #0]
 8010f1c:	b29a      	uxth	r2, r3
 8010f1e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010f22:	4313      	orrs	r3, r2
 8010f24:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	    if (cishort < PPP_DEFMRU) {
 8010f28:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010f2c:	f240 52db 	movw	r2, #1499	; 0x5db
 8010f30:	4293      	cmp	r3, r2
 8010f32:	f200 8096 	bhi.w	8011062 <lcp_nakci+0x682>
		try_.neg_mru = 1;
 8010f36:	7d3b      	ldrb	r3, [r7, #20]
 8010f38:	f043 0304 	orr.w	r3, r3, #4
 8010f3c:	753b      	strb	r3, [r7, #20]
		try_.mru = cishort;
 8010f3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010f42:	82fb      	strh	r3, [r7, #22]
	    }
	    break;
 8010f44:	e08d      	b.n	8011062 <lcp_nakci+0x682>
	case CI_ASYNCMAP:
	    if ((go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF)
 8010f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	f003 0308 	and.w	r3, r3, #8
 8010f4e:	b2db      	uxtb	r3, r3
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d005      	beq.n	8010f60 <lcp_nakci+0x580>
 8010f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f5c:	f040 80b5 	bne.w	80110ca <lcp_nakci+0x6ea>
		|| no.neg_asyncmap || cilen != CILEN_LONG)
 8010f60:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010f64:	f003 0308 	and.w	r3, r3, #8
 8010f68:	b2db      	uxtb	r3, r3
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	f040 80ad 	bne.w	80110ca <lcp_nakci+0x6ea>
 8010f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f72:	2b06      	cmp	r3, #6
 8010f74:	f040 80a9 	bne.w	80110ca <lcp_nakci+0x6ea>
		goto bad;
	    break;
 8010f78:	e074      	b.n	8011064 <lcp_nakci+0x684>
	    if ((0
#if CHAP_SUPPORT
                || go->neg_chap || no.neg_chap
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
                || go->neg_upap || no.neg_upap
 8010f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f7c:	781b      	ldrb	r3, [r3, #0]
 8010f7e:	f003 0310 	and.w	r3, r3, #16
 8010f82:	b2db      	uxtb	r3, r3
	    if ((0
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	f040 80a0 	bne.w	80110ca <lcp_nakci+0x6ea>
                || go->neg_upap || no.neg_upap
 8010f8a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010f8e:	f003 0310 	and.w	r3, r3, #16
 8010f92:	b2db      	uxtb	r3, r3
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	f040 8098 	bne.w	80110ca <lcp_nakci+0x6ea>
#if EAP_SUPPORT
		|| go->neg_eap || no.neg_eap
#endif /* EAP_SUPPORT */
		))
		goto bad;
	    break;
 8010f9a:	e063      	b.n	8011064 <lcp_nakci+0x684>
	case CI_MAGICNUMBER:
	    if (go->neg_magicnumber || no.neg_magicnumber ||
 8010f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f9e:	781b      	ldrb	r3, [r3, #0]
 8010fa0:	f003 0320 	and.w	r3, r3, #32
 8010fa4:	b2db      	uxtb	r3, r3
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	f040 808f 	bne.w	80110ca <lcp_nakci+0x6ea>
 8010fac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010fb0:	f003 0320 	and.w	r3, r3, #32
 8010fb4:	b2db      	uxtb	r3, r3
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	f040 8087 	bne.w	80110ca <lcp_nakci+0x6ea>
 8010fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010fbe:	2b06      	cmp	r3, #6
 8010fc0:	f040 8083 	bne.w	80110ca <lcp_nakci+0x6ea>
		cilen != CILEN_LONG)
		goto bad;
	    break;
 8010fc4:	e04e      	b.n	8011064 <lcp_nakci+0x684>
	case CI_PCOMPRESSION:
	    if (go->neg_pcompression || no.neg_pcompression
 8010fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010fc8:	781b      	ldrb	r3, [r3, #0]
 8010fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fce:	b2db      	uxtb	r3, r3
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d17a      	bne.n	80110ca <lcp_nakci+0x6ea>
 8010fd4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fdc:	b2db      	uxtb	r3, r3
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d173      	bne.n	80110ca <lcp_nakci+0x6ea>
		|| cilen != CILEN_VOID)
 8010fe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010fe4:	2b02      	cmp	r3, #2
 8010fe6:	d170      	bne.n	80110ca <lcp_nakci+0x6ea>
		goto bad;
	    break;
 8010fe8:	e03c      	b.n	8011064 <lcp_nakci+0x684>
	case CI_ACCOMPRESSION:
	    if (go->neg_accompression || no.neg_accompression
 8010fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010fec:	781b      	ldrb	r3, [r3, #0]
 8010fee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010ff2:	b2db      	uxtb	r3, r3
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d168      	bne.n	80110ca <lcp_nakci+0x6ea>
 8010ff8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010ffc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011000:	b2db      	uxtb	r3, r3
 8011002:	2b00      	cmp	r3, #0
 8011004:	d161      	bne.n	80110ca <lcp_nakci+0x6ea>
		|| cilen != CILEN_VOID)
 8011006:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011008:	2b02      	cmp	r3, #2
 801100a:	d15e      	bne.n	80110ca <lcp_nakci+0x6ea>
		goto bad;
	    break;
 801100c:	e02a      	b.n	8011064 <lcp_nakci+0x684>
	    if (go->neg_mrru || no.neg_mrru || cilen != CILEN_SHORT)
		goto bad;
	    break;
#endif /* HAVE_MULTILINK */
	case CI_SSNHF:
	    if (go->neg_ssnhf || no.neg_ssnhf || cilen != CILEN_VOID)
 801100e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011010:	785b      	ldrb	r3, [r3, #1]
 8011012:	f003 0302 	and.w	r3, r3, #2
 8011016:	b2db      	uxtb	r3, r3
 8011018:	2b00      	cmp	r3, #0
 801101a:	d156      	bne.n	80110ca <lcp_nakci+0x6ea>
 801101c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8011020:	f003 0302 	and.w	r3, r3, #2
 8011024:	b2db      	uxtb	r3, r3
 8011026:	2b00      	cmp	r3, #0
 8011028:	d14f      	bne.n	80110ca <lcp_nakci+0x6ea>
 801102a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801102c:	2b02      	cmp	r3, #2
 801102e:	d14c      	bne.n	80110ca <lcp_nakci+0x6ea>
		goto bad;
	    try_.neg_ssnhf = 1;
 8011030:	7d7b      	ldrb	r3, [r7, #21]
 8011032:	f043 0302 	orr.w	r3, r3, #2
 8011036:	757b      	strb	r3, [r7, #21]
	    break;
 8011038:	e014      	b.n	8011064 <lcp_nakci+0x684>
	case CI_EPDISC:
	    if (go->neg_endpoint || no.neg_endpoint || cilen < CILEN_CHAR)
 801103a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801103c:	785b      	ldrb	r3, [r3, #1]
 801103e:	f003 0304 	and.w	r3, r3, #4
 8011042:	b2db      	uxtb	r3, r3
 8011044:	2b00      	cmp	r3, #0
 8011046:	d140      	bne.n	80110ca <lcp_nakci+0x6ea>
 8011048:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801104c:	f003 0304 	and.w	r3, r3, #4
 8011050:	b2db      	uxtb	r3, r3
 8011052:	2b00      	cmp	r3, #0
 8011054:	d139      	bne.n	80110ca <lcp_nakci+0x6ea>
 8011056:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011058:	2b02      	cmp	r3, #2
 801105a:	dd36      	ble.n	80110ca <lcp_nakci+0x6ea>
		goto bad;
	    break;
 801105c:	e002      	b.n	8011064 <lcp_nakci+0x684>
	default:
	    break;
 801105e:	bf00      	nop
 8011060:	e000      	b.n	8011064 <lcp_nakci+0x684>
	    break;
 8011062:	bf00      	nop
	}
	p = next;
 8011064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011066:	60bb      	str	r3, [r7, #8]
    while (len >= CILEN_VOID) {
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2b01      	cmp	r3, #1
 801106c:	f73f aee4 	bgt.w	8010e38 <lcp_nakci+0x458>

    /*
     * OK, the Nak is good.  Now we can update state.
     * If there are any options left we ignore them.
     */
    if (f->state != PPP_FSM_OPENED) {
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	7c1b      	ldrb	r3, [r3, #16]
 8011074:	2b09      	cmp	r3, #9
 8011076:	d026      	beq.n	80110c6 <lcp_nakci+0x6e6>
	if (looped_back) {
 8011078:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801107a:	2b00      	cmp	r3, #0
 801107c:	d016      	beq.n	80110ac <lcp_nakci+0x6cc>
	    if (++try_.numloops >= pcb->settings.lcp_loopbackfail) {
 801107e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011082:	3301      	adds	r3, #1
 8011084:	b2db      	uxtb	r3, r3
 8011086:	f887 3020 	strb.w	r3, [r7, #32]
 801108a:	f897 2020 	ldrb.w	r2, [r7, #32]
 801108e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011090:	7c9b      	ldrb	r3, [r3, #18]
 8011092:	429a      	cmp	r2, r3
 8011094:	d30d      	bcc.n	80110b2 <lcp_nakci+0x6d2>
		ppp_notice(("Serial line is looped back."));
		pcb->err_code = PPPERR_LOOPBACK;
 8011096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011098:	220c      	movs	r2, #12
 801109a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		lcp_close(f->pcb, "Loopback detected");
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	490c      	ldr	r1, [pc, #48]	; (80110d4 <lcp_nakci+0x6f4>)
 80110a4:	4618      	mov	r0, r3
 80110a6:	f7fe feb7 	bl	800fe18 <lcp_close>
 80110aa:	e002      	b.n	80110b2 <lcp_nakci+0x6d2>
	    }
	} else
	    try_.numloops = 0;
 80110ac:	2300      	movs	r3, #0
 80110ae:	f887 3020 	strb.w	r3, [r7, #32]
	*go = try_;
 80110b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80110b4:	461d      	mov	r5, r3
 80110b6:	f107 0414 	add.w	r4, r7, #20
 80110ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80110bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80110be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80110c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80110c2:	6823      	ldr	r3, [r4, #0]
 80110c4:	602b      	str	r3, [r5, #0]
    }

    return 1;
 80110c6:	2301      	movs	r3, #1
 80110c8:	e000      	b.n	80110cc <lcp_nakci+0x6ec>

bad:
    LCPDEBUG(("lcp_nakci: received bad Nak!"));
    return 0;
 80110ca:	2300      	movs	r3, #0
}
 80110cc:	4618      	mov	r0, r3
 80110ce:	3780      	adds	r7, #128	; 0x80
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bdb0      	pop	{r4, r5, r7, pc}
 80110d4:	08017c40 	.word	0x08017c40

080110d8 <lcp_rejci>:
 *
 * Returns:
 *	0 - Reject was bad.
 *	1 - Reject was good.
 */
static int lcp_rejci(fsm *f, u_char *p, int len) {
 80110d8:	b4b0      	push	{r4, r5, r7}
 80110da:	b095      	sub	sp, #84	; 0x54
 80110dc:	af00      	add	r7, sp, #0
 80110de:	60f8      	str	r0, [r7, #12]
 80110e0:	60b9      	str	r1, [r7, #8]
 80110e2:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	64bb      	str	r3, [r7, #72]	; 0x48
    lcp_options *go = &pcb->lcp_gotoptions;
 80110ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110ec:	3384      	adds	r3, #132	; 0x84
 80110ee:	647b      	str	r3, [r7, #68]	; 0x44
    u_char cichar;
    u_short cishort;
    u32_t cilong;
    lcp_options try_;		/* options to request next time */

    try_ = *go;
 80110f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110f2:	f107 0414 	add.w	r4, r7, #20
 80110f6:	461d      	mov	r5, r3
 80110f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80110fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80110fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80110fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011100:	682b      	ldr	r3, [r5, #0]
 8011102:	6023      	str	r3, [r4, #0]
		goto bad; \
	} \
	try_.neg = 0; \
    }

    REJCISHORT(CI_MRU, neg_mru, go->mru);
 8011104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	f003 0304 	and.w	r3, r3, #4
 801110c:	b2db      	uxtb	r3, r3
 801110e:	2b00      	cmp	r3, #0
 8011110:	d02e      	beq.n	8011170 <lcp_rejci+0x98>
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	2b03      	cmp	r3, #3
 8011116:	dd2b      	ble.n	8011170 <lcp_rejci+0x98>
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	3301      	adds	r3, #1
 801111c:	781b      	ldrb	r3, [r3, #0]
 801111e:	2b04      	cmp	r3, #4
 8011120:	d126      	bne.n	8011170 <lcp_rejci+0x98>
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	2b01      	cmp	r3, #1
 8011128:	d122      	bne.n	8011170 <lcp_rejci+0x98>
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	3b04      	subs	r3, #4
 801112e:	607b      	str	r3, [r7, #4]
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	3302      	adds	r3, #2
 8011134:	60bb      	str	r3, [r7, #8]
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	1c5a      	adds	r2, r3, #1
 801113a:	60ba      	str	r2, [r7, #8]
 801113c:	781b      	ldrb	r3, [r3, #0]
 801113e:	b29b      	uxth	r3, r3
 8011140:	021b      	lsls	r3, r3, #8
 8011142:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	1c5a      	adds	r2, r3, #1
 801114a:	60ba      	str	r2, [r7, #8]
 801114c:	781b      	ldrb	r3, [r3, #0]
 801114e:	b29a      	uxth	r2, r3
 8011150:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011154:	4313      	orrs	r3, r2
 8011156:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801115a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801115c:	885b      	ldrh	r3, [r3, #2]
 801115e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011162:	429a      	cmp	r2, r3
 8011164:	f040 81a8 	bne.w	80114b8 <lcp_rejci+0x3e0>
 8011168:	7d3b      	ldrb	r3, [r7, #20]
 801116a:	f36f 0382 	bfc	r3, #2, #1
 801116e:	753b      	strb	r3, [r7, #20]
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 8011170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011172:	781b      	ldrb	r3, [r3, #0]
 8011174:	f003 0308 	and.w	r3, r3, #8
 8011178:	b2db      	uxtb	r3, r3
 801117a:	2b00      	cmp	r3, #0
 801117c:	d03f      	beq.n	80111fe <lcp_rejci+0x126>
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	2b05      	cmp	r3, #5
 8011182:	dd3c      	ble.n	80111fe <lcp_rejci+0x126>
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	3301      	adds	r3, #1
 8011188:	781b      	ldrb	r3, [r3, #0]
 801118a:	2b06      	cmp	r3, #6
 801118c:	d137      	bne.n	80111fe <lcp_rejci+0x126>
 801118e:	68bb      	ldr	r3, [r7, #8]
 8011190:	781b      	ldrb	r3, [r3, #0]
 8011192:	2b02      	cmp	r3, #2
 8011194:	d133      	bne.n	80111fe <lcp_rejci+0x126>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	3b06      	subs	r3, #6
 801119a:	607b      	str	r3, [r7, #4]
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	3302      	adds	r3, #2
 80111a0:	60bb      	str	r3, [r7, #8]
 80111a2:	68bb      	ldr	r3, [r7, #8]
 80111a4:	1c5a      	adds	r2, r3, #1
 80111a6:	60ba      	str	r2, [r7, #8]
 80111a8:	781b      	ldrb	r3, [r3, #0]
 80111aa:	021b      	lsls	r3, r3, #8
 80111ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	1c5a      	adds	r2, r3, #1
 80111b2:	60ba      	str	r2, [r7, #8]
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	461a      	mov	r2, r3
 80111b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111ba:	4313      	orrs	r3, r2
 80111bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111c0:	021b      	lsls	r3, r3, #8
 80111c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	1c5a      	adds	r2, r3, #1
 80111c8:	60ba      	str	r2, [r7, #8]
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	461a      	mov	r2, r3
 80111ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111d0:	4313      	orrs	r3, r2
 80111d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111d6:	021b      	lsls	r3, r3, #8
 80111d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	1c5a      	adds	r2, r3, #1
 80111de:	60ba      	str	r2, [r7, #8]
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	461a      	mov	r2, r3
 80111e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111e6:	4313      	orrs	r3, r2
 80111e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111ec:	685a      	ldr	r2, [r3, #4]
 80111ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111f0:	429a      	cmp	r2, r3
 80111f2:	f040 8163 	bne.w	80114bc <lcp_rejci+0x3e4>
 80111f6:	7d3b      	ldrb	r3, [r7, #20]
 80111f8:	f36f 03c3 	bfc	r3, #3, #1
 80111fc:	753b      	strb	r3, [r7, #20]
#if CHAP_SUPPORT
	REJCICHAP(CI_AUTHTYPE, neg_chap, go->chap_mdtype);
	if (!go->neg_chap) {
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
 80111fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	f003 0310 	and.w	r3, r3, #16
 8011206:	b2db      	uxtb	r3, r3
 8011208:	2b00      	cmp	r3, #0
 801120a:	d02e      	beq.n	801126a <lcp_rejci+0x192>
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2b03      	cmp	r3, #3
 8011210:	dd2b      	ble.n	801126a <lcp_rejci+0x192>
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	3301      	adds	r3, #1
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	2b04      	cmp	r3, #4
 801121a:	d126      	bne.n	801126a <lcp_rejci+0x192>
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	781b      	ldrb	r3, [r3, #0]
 8011220:	2b03      	cmp	r3, #3
 8011222:	d122      	bne.n	801126a <lcp_rejci+0x192>
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	3b04      	subs	r3, #4
 8011228:	607b      	str	r3, [r7, #4]
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	3302      	adds	r3, #2
 801122e:	60bb      	str	r3, [r7, #8]
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	1c5a      	adds	r2, r3, #1
 8011234:	60ba      	str	r2, [r7, #8]
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	b29b      	uxth	r3, r3
 801123a:	021b      	lsls	r3, r3, #8
 801123c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	1c5a      	adds	r2, r3, #1
 8011244:	60ba      	str	r2, [r7, #8]
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	b29a      	uxth	r2, r3
 801124a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801124e:	4313      	orrs	r3, r2
 8011250:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011254:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011258:	f24c 0223 	movw	r2, #49187	; 0xc023
 801125c:	4293      	cmp	r3, r2
 801125e:	f040 812f 	bne.w	80114c0 <lcp_rejci+0x3e8>
 8011262:	7d3b      	ldrb	r3, [r7, #20]
 8011264:	f36f 1304 	bfc	r3, #4, #1
 8011268:	753b      	strb	r3, [r7, #20]
    }
#endif /* EAP_SUPPORT */
#if LQR_SUPPORT
    REJCILQR(CI_QUALITY, neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 801126a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801126c:	785b      	ldrb	r3, [r3, #1]
 801126e:	f003 0301 	and.w	r3, r3, #1
 8011272:	b2db      	uxtb	r3, r3
 8011274:	2b00      	cmp	r3, #0
 8011276:	d020      	beq.n	80112ba <lcp_rejci+0x1e2>
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2b02      	cmp	r3, #2
 801127c:	dd1d      	ble.n	80112ba <lcp_rejci+0x1e2>
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	3301      	adds	r3, #1
 8011282:	781b      	ldrb	r3, [r3, #0]
 8011284:	2b03      	cmp	r3, #3
 8011286:	d118      	bne.n	80112ba <lcp_rejci+0x1e2>
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	781b      	ldrb	r3, [r3, #0]
 801128c:	2b0d      	cmp	r3, #13
 801128e:	d114      	bne.n	80112ba <lcp_rejci+0x1e2>
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	3b03      	subs	r3, #3
 8011294:	607b      	str	r3, [r7, #4]
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	3302      	adds	r3, #2
 801129a:	60bb      	str	r3, [r7, #8]
 801129c:	68bb      	ldr	r3, [r7, #8]
 801129e:	1c5a      	adds	r2, r3, #1
 80112a0:	60ba      	str	r2, [r7, #8]
 80112a2:	781b      	ldrb	r3, [r3, #0]
 80112a4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80112a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80112ac:	2b06      	cmp	r3, #6
 80112ae:	f040 8109 	bne.w	80114c4 <lcp_rejci+0x3ec>
 80112b2:	7d7b      	ldrb	r3, [r7, #21]
 80112b4:	f36f 0300 	bfc	r3, #0, #1
 80112b8:	757b      	strb	r3, [r7, #21]
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 80112ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112bc:	781b      	ldrb	r3, [r3, #0]
 80112be:	f003 0320 	and.w	r3, r3, #32
 80112c2:	b2db      	uxtb	r3, r3
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d03f      	beq.n	8011348 <lcp_rejci+0x270>
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2b05      	cmp	r3, #5
 80112cc:	dd3c      	ble.n	8011348 <lcp_rejci+0x270>
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	3301      	adds	r3, #1
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	2b06      	cmp	r3, #6
 80112d6:	d137      	bne.n	8011348 <lcp_rejci+0x270>
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	781b      	ldrb	r3, [r3, #0]
 80112dc:	2b05      	cmp	r3, #5
 80112de:	d133      	bne.n	8011348 <lcp_rejci+0x270>
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	3b06      	subs	r3, #6
 80112e4:	607b      	str	r3, [r7, #4]
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	3302      	adds	r3, #2
 80112ea:	60bb      	str	r3, [r7, #8]
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	1c5a      	adds	r2, r3, #1
 80112f0:	60ba      	str	r2, [r7, #8]
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	021b      	lsls	r3, r3, #8
 80112f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	1c5a      	adds	r2, r3, #1
 80112fc:	60ba      	str	r2, [r7, #8]
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	461a      	mov	r2, r3
 8011302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011304:	4313      	orrs	r3, r2
 8011306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801130a:	021b      	lsls	r3, r3, #8
 801130c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	1c5a      	adds	r2, r3, #1
 8011312:	60ba      	str	r2, [r7, #8]
 8011314:	781b      	ldrb	r3, [r3, #0]
 8011316:	461a      	mov	r2, r3
 8011318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801131a:	4313      	orrs	r3, r2
 801131c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801131e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011320:	021b      	lsls	r3, r3, #8
 8011322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	1c5a      	adds	r2, r3, #1
 8011328:	60ba      	str	r2, [r7, #8]
 801132a:	781b      	ldrb	r3, [r3, #0]
 801132c:	461a      	mov	r2, r3
 801132e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011330:	4313      	orrs	r3, r2
 8011332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011336:	689a      	ldr	r2, [r3, #8]
 8011338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801133a:	429a      	cmp	r2, r3
 801133c:	f040 80c4 	bne.w	80114c8 <lcp_rejci+0x3f0>
 8011340:	7d3b      	ldrb	r3, [r7, #20]
 8011342:	f36f 1345 	bfc	r3, #5, #1
 8011346:	753b      	strb	r3, [r7, #20]
    REJCIVOID(CI_PCOMPRESSION, neg_pcompression);
 8011348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801134a:	781b      	ldrb	r3, [r3, #0]
 801134c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011350:	b2db      	uxtb	r3, r3
 8011352:	2b00      	cmp	r3, #0
 8011354:	d015      	beq.n	8011382 <lcp_rejci+0x2aa>
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	2b01      	cmp	r3, #1
 801135a:	dd12      	ble.n	8011382 <lcp_rejci+0x2aa>
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	3301      	adds	r3, #1
 8011360:	781b      	ldrb	r3, [r3, #0]
 8011362:	2b02      	cmp	r3, #2
 8011364:	d10d      	bne.n	8011382 <lcp_rejci+0x2aa>
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	781b      	ldrb	r3, [r3, #0]
 801136a:	2b07      	cmp	r3, #7
 801136c:	d109      	bne.n	8011382 <lcp_rejci+0x2aa>
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	3b02      	subs	r3, #2
 8011372:	607b      	str	r3, [r7, #4]
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	3302      	adds	r3, #2
 8011378:	60bb      	str	r3, [r7, #8]
 801137a:	7d3b      	ldrb	r3, [r7, #20]
 801137c:	f36f 1386 	bfc	r3, #6, #1
 8011380:	753b      	strb	r3, [r7, #20]
    REJCIVOID(CI_ACCOMPRESSION, neg_accompression);
 8011382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011384:	781b      	ldrb	r3, [r3, #0]
 8011386:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801138a:	b2db      	uxtb	r3, r3
 801138c:	2b00      	cmp	r3, #0
 801138e:	d015      	beq.n	80113bc <lcp_rejci+0x2e4>
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2b01      	cmp	r3, #1
 8011394:	dd12      	ble.n	80113bc <lcp_rejci+0x2e4>
 8011396:	68bb      	ldr	r3, [r7, #8]
 8011398:	3301      	adds	r3, #1
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	2b02      	cmp	r3, #2
 801139e:	d10d      	bne.n	80113bc <lcp_rejci+0x2e4>
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	781b      	ldrb	r3, [r3, #0]
 80113a4:	2b08      	cmp	r3, #8
 80113a6:	d109      	bne.n	80113bc <lcp_rejci+0x2e4>
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	3b02      	subs	r3, #2
 80113ac:	607b      	str	r3, [r7, #4]
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	3302      	adds	r3, #2
 80113b2:	60bb      	str	r3, [r7, #8]
 80113b4:	7d3b      	ldrb	r3, [r7, #20]
 80113b6:	f36f 13c7 	bfc	r3, #7, #1
 80113ba:	753b      	strb	r3, [r7, #20]
#ifdef HAVE_MULTILINK
    REJCISHORT(CI_MRRU, neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    REJCIVOID(CI_SSNHF, neg_ssnhf);
 80113bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113be:	785b      	ldrb	r3, [r3, #1]
 80113c0:	f003 0302 	and.w	r3, r3, #2
 80113c4:	b2db      	uxtb	r3, r3
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d015      	beq.n	80113f6 <lcp_rejci+0x31e>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	dd12      	ble.n	80113f6 <lcp_rejci+0x31e>
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	3301      	adds	r3, #1
 80113d4:	781b      	ldrb	r3, [r3, #0]
 80113d6:	2b02      	cmp	r3, #2
 80113d8:	d10d      	bne.n	80113f6 <lcp_rejci+0x31e>
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	2b12      	cmp	r3, #18
 80113e0:	d109      	bne.n	80113f6 <lcp_rejci+0x31e>
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	3b02      	subs	r3, #2
 80113e6:	607b      	str	r3, [r7, #4]
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	3302      	adds	r3, #2
 80113ec:	60bb      	str	r3, [r7, #8]
 80113ee:	7d7b      	ldrb	r3, [r7, #21]
 80113f0:	f36f 0341 	bfc	r3, #1, #1
 80113f4:	757b      	strb	r3, [r7, #21]
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 80113f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113f8:	785b      	ldrb	r3, [r3, #1]
 80113fa:	f003 0304 	and.w	r3, r3, #4
 80113fe:	b2db      	uxtb	r3, r3
 8011400:	2b00      	cmp	r3, #0
 8011402:	d046      	beq.n	8011492 <lcp_rejci+0x3ba>
 8011404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011406:	7b9b      	ldrb	r3, [r3, #14]
 8011408:	1cda      	adds	r2, r3, #3
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	429a      	cmp	r2, r3
 801140e:	dc40      	bgt.n	8011492 <lcp_rejci+0x3ba>
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	2b13      	cmp	r3, #19
 8011416:	d13c      	bne.n	8011492 <lcp_rejci+0x3ba>
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	3301      	adds	r3, #1
 801141c:	781b      	ldrb	r3, [r3, #0]
 801141e:	461a      	mov	r2, r3
 8011420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011422:	7b9b      	ldrb	r3, [r3, #14]
 8011424:	3303      	adds	r3, #3
 8011426:	429a      	cmp	r2, r3
 8011428:	d133      	bne.n	8011492 <lcp_rejci+0x3ba>
 801142a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801142c:	7b9b      	ldrb	r3, [r3, #14]
 801142e:	3303      	adds	r3, #3
 8011430:	687a      	ldr	r2, [r7, #4]
 8011432:	1ad3      	subs	r3, r2, r3
 8011434:	607b      	str	r3, [r7, #4]
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	3302      	adds	r3, #2
 801143a:	60bb      	str	r3, [r7, #8]
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	1c5a      	adds	r2, r3, #1
 8011440:	60ba      	str	r2, [r7, #8]
 8011442:	781b      	ldrb	r3, [r3, #0]
 8011444:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8011448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801144a:	7b5b      	ldrb	r3, [r3, #13]
 801144c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8011450:	429a      	cmp	r2, r3
 8011452:	d13b      	bne.n	80114cc <lcp_rejci+0x3f4>
 8011454:	2300      	movs	r3, #0
 8011456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011458:	e011      	b.n	801147e <lcp_rejci+0x3a6>
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	1c5a      	adds	r2, r3, #1
 801145e:	60ba      	str	r2, [r7, #8]
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8011466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801146a:	4413      	add	r3, r2
 801146c:	330f      	adds	r3, #15
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8011474:	429a      	cmp	r2, r3
 8011476:	d12b      	bne.n	80114d0 <lcp_rejci+0x3f8>
 8011478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801147a:	3301      	adds	r3, #1
 801147c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801147e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011480:	7b9b      	ldrb	r3, [r3, #14]
 8011482:	461a      	mov	r2, r3
 8011484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011486:	429a      	cmp	r2, r3
 8011488:	dce7      	bgt.n	801145a <lcp_rejci+0x382>
 801148a:	7d7b      	ldrb	r3, [r7, #21]
 801148c:	f36f 0382 	bfc	r3, #2, #1
 8011490:	757b      	strb	r3, [r7, #21]
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d11d      	bne.n	80114d4 <lcp_rejci+0x3fc>
	goto bad;
    /*
     * Now we can update state.
     */
    if (f->state != PPP_FSM_OPENED)
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	7c1b      	ldrb	r3, [r3, #16]
 801149c:	2b09      	cmp	r3, #9
 801149e:	d009      	beq.n	80114b4 <lcp_rejci+0x3dc>
	*go = try_;
 80114a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114a2:	461d      	mov	r5, r3
 80114a4:	f107 0414 	add.w	r4, r7, #20
 80114a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80114aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80114ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80114ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80114b0:	6823      	ldr	r3, [r4, #0]
 80114b2:	602b      	str	r3, [r5, #0]
    return 1;
 80114b4:	2301      	movs	r3, #1
 80114b6:	e00f      	b.n	80114d8 <lcp_rejci+0x400>
    REJCISHORT(CI_MRU, neg_mru, go->mru);
 80114b8:	bf00      	nop
 80114ba:	e00c      	b.n	80114d6 <lcp_rejci+0x3fe>
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 80114bc:	bf00      	nop
 80114be:	e00a      	b.n	80114d6 <lcp_rejci+0x3fe>
	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
 80114c0:	bf00      	nop
 80114c2:	e008      	b.n	80114d6 <lcp_rejci+0x3fe>
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 80114c4:	bf00      	nop
 80114c6:	e006      	b.n	80114d6 <lcp_rejci+0x3fe>
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 80114c8:	bf00      	nop
 80114ca:	e004      	b.n	80114d6 <lcp_rejci+0x3fe>
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 80114cc:	bf00      	nop
 80114ce:	e002      	b.n	80114d6 <lcp_rejci+0x3fe>
 80114d0:	bf00      	nop
 80114d2:	e000      	b.n	80114d6 <lcp_rejci+0x3fe>
	goto bad;
 80114d4:	bf00      	nop

bad:
    LCPDEBUG(("lcp_rejci: received bad Reject!"));
    return 0;
 80114d6:	2300      	movs	r3, #0
}
 80114d8:	4618      	mov	r0, r3
 80114da:	3754      	adds	r7, #84	; 0x54
 80114dc:	46bd      	mov	sp, r7
 80114de:	bcb0      	pop	{r4, r5, r7}
 80114e0:	4770      	bx	lr
	...

080114e4 <lcp_reqci>:
 * CONFNAK; returns CONFREJ if it can't return CONFACK.
 *
 * inp = Requested CIs
 * lenp = Length of requested CIs
 */
static int lcp_reqci(fsm *f, u_char *inp, int *lenp, int reject_if_disagree) {
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b096      	sub	sp, #88	; 0x58
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	60f8      	str	r0, [r7, #12]
 80114ec:	60b9      	str	r1, [r7, #8]
 80114ee:	607a      	str	r2, [r7, #4]
 80114f0:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	637b      	str	r3, [r7, #52]	; 0x34
    lcp_options *go = &pcb->lcp_gotoptions;
 80114f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114fa:	3384      	adds	r3, #132	; 0x84
 80114fc:	633b      	str	r3, [r7, #48]	; 0x30
    lcp_options *ho = &pcb->lcp_hisoptions;
 80114fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011500:	33cc      	adds	r3, #204	; 0xcc
 8011502:	62fb      	str	r3, [r7, #44]	; 0x2c
    lcp_options *ao = &pcb->lcp_allowoptions;
 8011504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011506:	33a8      	adds	r3, #168	; 0xa8
 8011508:	62bb      	str	r3, [r7, #40]	; 0x28
    u_char *cip, *next;		/* Pointer to current and next CIs */
    int cilen, citype, cichar;	/* Parsed len, type, char value */
    u_short cishort;		/* Parsed short value */
    u32_t cilong;		/* Parse long value */
    int rc = CONFACK;		/* Final packet return code */
 801150a:	2302      	movs	r3, #2
 801150c:	64bb      	str	r3, [r7, #72]	; 0x48
    int orc;			/* Individual option return code */
    u_char *p;			/* Pointer to next char to parse */
    u_char *rejp;		/* Pointer to next char in reject frame */
    struct pbuf *nakp;          /* Nak buffer */
    u_char *nakoutp;		/* Pointer to next char in Nak frame */
    int l = *lenp;		/* Length left */
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	63bb      	str	r3, [r7, #56]	; 0x38

    /*
     * Reset all his options.
     */
    BZERO(ho, sizeof(*ho));
 8011514:	2224      	movs	r2, #36	; 0x24
 8011516:	2100      	movs	r1, #0
 8011518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801151a:	f002 fd90 	bl	801403e <memset>

    /*
     * Process all his options.
     */
    next = inp;
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	657b      	str	r3, [r7, #84]	; 0x54
    nakp = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_CTRL_PBUF_UNKNOWN_SIZE), PBUF_RAM);
 8011522:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011526:	f44f 7100 	mov.w	r1, #512	; 0x200
 801152a:	2000      	movs	r0, #0
 801152c:	f7f4 fbd8 	bl	8005ce0 <pbuf_alloc>
 8011530:	6278      	str	r0, [r7, #36]	; 0x24
    if(NULL == nakp)
 8011532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011534:	2b00      	cmp	r3, #0
 8011536:	d101      	bne.n	801153c <lcp_reqci+0x58>
        return 0;
 8011538:	2300      	movs	r3, #0
 801153a:	e2b4      	b.n	8011aa6 <lcp_reqci+0x5c2>
    if(nakp->tot_len != nakp->len) {
 801153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801153e:	891a      	ldrh	r2, [r3, #8]
 8011540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011542:	895b      	ldrh	r3, [r3, #10]
 8011544:	429a      	cmp	r2, r3
 8011546:	d004      	beq.n	8011552 <lcp_reqci+0x6e>
        pbuf_free(nakp);
 8011548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801154a:	f7f4 fe33 	bl	80061b4 <pbuf_free>
        return 0;
 801154e:	2300      	movs	r3, #0
 8011550:	e2a9      	b.n	8011aa6 <lcp_reqci+0x5c2>
    }

    nakoutp = (u_char*)nakp->payload;
 8011552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	63fb      	str	r3, [r7, #60]	; 0x3c
    rejp = inp;
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 801155c:	e278      	b.n	8011a50 <lcp_reqci+0x56c>
	orc = CONFACK;			/* Assume success */
 801155e:	2302      	movs	r3, #2
 8011560:	647b      	str	r3, [r7, #68]	; 0x44
	cip = p = next;			/* Remember beginning of CI */
 8011562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011564:	623b      	str	r3, [r7, #32]
 8011566:	6a3b      	ldr	r3, [r7, #32]
 8011568:	61fb      	str	r3, [r7, #28]
	if (l < 2 ||			/* Not enough data for CI header or */
 801156a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801156c:	2b01      	cmp	r3, #1
 801156e:	dd0b      	ble.n	8011588 <lcp_reqci+0xa4>
	    p[1] < 2 ||			/*  CI length too small or */
 8011570:	6a3b      	ldr	r3, [r7, #32]
 8011572:	3301      	adds	r3, #1
 8011574:	781b      	ldrb	r3, [r3, #0]
	if (l < 2 ||			/* Not enough data for CI header or */
 8011576:	2b01      	cmp	r3, #1
 8011578:	d906      	bls.n	8011588 <lcp_reqci+0xa4>
	    p[1] > l) {			/*  CI length too big? */
 801157a:	6a3b      	ldr	r3, [r7, #32]
 801157c:	3301      	adds	r3, #1
 801157e:	781b      	ldrb	r3, [r3, #0]
 8011580:	461a      	mov	r2, r3
	    p[1] < 2 ||			/*  CI length too small or */
 8011582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011584:	429a      	cmp	r2, r3
 8011586:	dd08      	ble.n	801159a <lcp_reqci+0xb6>
	    LCPDEBUG(("lcp_reqci: bad CI length!"));
	    orc = CONFREJ;		/* Reject bad CI */
 8011588:	2304      	movs	r3, #4
 801158a:	647b      	str	r3, [r7, #68]	; 0x44
	    cilen = l;			/* Reject till end of packet */
 801158c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801158e:	653b      	str	r3, [r7, #80]	; 0x50
	    l = 0;			/* Don't loop again */
 8011590:	2300      	movs	r3, #0
 8011592:	63bb      	str	r3, [r7, #56]	; 0x38
	    citype = 0;
 8011594:	2300      	movs	r3, #0
 8011596:	64fb      	str	r3, [r7, #76]	; 0x4c
	    goto endswitch;
 8011598:	e22e      	b.n	80119f8 <lcp_reqci+0x514>
	}
	GETCHAR(citype, p);		/* Parse CI type */
 801159a:	6a3b      	ldr	r3, [r7, #32]
 801159c:	1c5a      	adds	r2, r3, #1
 801159e:	623a      	str	r2, [r7, #32]
 80115a0:	781b      	ldrb	r3, [r3, #0]
 80115a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	GETCHAR(cilen, p);		/* Parse CI length */
 80115a4:	6a3b      	ldr	r3, [r7, #32]
 80115a6:	1c5a      	adds	r2, r3, #1
 80115a8:	623a      	str	r2, [r7, #32]
 80115aa:	781b      	ldrb	r3, [r3, #0]
 80115ac:	653b      	str	r3, [r7, #80]	; 0x50
	l -= cilen;			/* Adjust remaining length */
 80115ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115b2:	1ad3      	subs	r3, r2, r3
 80115b4:	63bb      	str	r3, [r7, #56]	; 0x38
	next += cilen;			/* Step to next CI */
 80115b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80115ba:	4413      	add	r3, r2
 80115bc:	657b      	str	r3, [r7, #84]	; 0x54

	switch (citype) {		/* Check CI type */
 80115be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115c0:	3b01      	subs	r3, #1
 80115c2:	2b12      	cmp	r3, #18
 80115c4:	f200 8215 	bhi.w	80119f2 <lcp_reqci+0x50e>
 80115c8:	a201      	add	r2, pc, #4	; (adr r2, 80115d0 <lcp_reqci+0xec>)
 80115ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115ce:	bf00      	nop
 80115d0:	0801161d 	.word	0x0801161d
 80115d4:	0801169b 	.word	0x0801169b
 80115d8:	08011789 	.word	0x08011789
 80115dc:	080119f3 	.word	0x080119f3
 80115e0:	0801182f 	.word	0x0801182f
 80115e4:	080119f3 	.word	0x080119f3
 80115e8:	0801191f 	.word	0x0801191f
 80115ec:	08011945 	.word	0x08011945
 80115f0:	080119f3 	.word	0x080119f3
 80115f4:	080119f3 	.word	0x080119f3
 80115f8:	080119f3 	.word	0x080119f3
 80115fc:	080119f3 	.word	0x080119f3
 8011600:	080119f3 	.word	0x080119f3
 8011604:	080119f3 	.word	0x080119f3
 8011608:	080119f3 	.word	0x080119f3
 801160c:	080119f3 	.word	0x080119f3
 8011610:	080119f3 	.word	0x080119f3
 8011614:	0801196b 	.word	0x0801196b
 8011618:	08011991 	.word	0x08011991
	case CI_MRU:
	    if (!ao->neg_mru ||		/* Allow option? */
 801161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801161e:	781b      	ldrb	r3, [r3, #0]
 8011620:	f003 0304 	and.w	r3, r3, #4
 8011624:	b2db      	uxtb	r3, r3
 8011626:	2b00      	cmp	r3, #0
 8011628:	d002      	beq.n	8011630 <lcp_reqci+0x14c>
 801162a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801162c:	2b04      	cmp	r3, #4
 801162e:	d002      	beq.n	8011636 <lcp_reqci+0x152>
		cilen != CILEN_SHORT) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 8011630:	2304      	movs	r3, #4
 8011632:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8011634:	e1e0      	b.n	80119f8 <lcp_reqci+0x514>
	    }
	    GETSHORT(cishort, p);	/* Parse MRU */
 8011636:	6a3b      	ldr	r3, [r7, #32]
 8011638:	1c5a      	adds	r2, r3, #1
 801163a:	623a      	str	r2, [r7, #32]
 801163c:	781b      	ldrb	r3, [r3, #0]
 801163e:	b29b      	uxth	r3, r3
 8011640:	021b      	lsls	r3, r3, #8
 8011642:	837b      	strh	r3, [r7, #26]
 8011644:	6a3b      	ldr	r3, [r7, #32]
 8011646:	1c5a      	adds	r2, r3, #1
 8011648:	623a      	str	r2, [r7, #32]
 801164a:	781b      	ldrb	r3, [r3, #0]
 801164c:	b29a      	uxth	r2, r3
 801164e:	8b7b      	ldrh	r3, [r7, #26]
 8011650:	4313      	orrs	r3, r2
 8011652:	837b      	strh	r3, [r7, #26]
	    /*
	     * He must be able to receive at least our minimum.
	     * No need to check a maximum.  If he sends a large number,
	     * we'll just ignore it.
	     */
	    if (cishort < PPP_MINMRU) {
 8011654:	8b7b      	ldrh	r3, [r7, #26]
 8011656:	2b7f      	cmp	r3, #127	; 0x7f
 8011658:	d816      	bhi.n	8011688 <lcp_reqci+0x1a4>
		orc = CONFNAK;		/* Nak CI */
 801165a:	2303      	movs	r3, #3
 801165c:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_MRU, nakoutp);
 801165e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011660:	1c5a      	adds	r2, r3, #1
 8011662:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011664:	2201      	movs	r2, #1
 8011666:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_SHORT, nakoutp);
 8011668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801166a:	1c5a      	adds	r2, r3, #1
 801166c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801166e:	2204      	movs	r2, #4
 8011670:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_MINMRU, nakoutp);	/* Give him a hint */
 8011672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011674:	1c5a      	adds	r2, r3, #1
 8011676:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011678:	2200      	movs	r2, #0
 801167a:	701a      	strb	r2, [r3, #0]
 801167c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801167e:	1c5a      	adds	r2, r3, #1
 8011680:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011682:	2280      	movs	r2, #128	; 0x80
 8011684:	701a      	strb	r2, [r3, #0]
		break;
 8011686:	e1b7      	b.n	80119f8 <lcp_reqci+0x514>
	    }
	    ho->neg_mru = 1;		/* Remember he sent MRU */
 8011688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801168a:	7813      	ldrb	r3, [r2, #0]
 801168c:	f043 0304 	orr.w	r3, r3, #4
 8011690:	7013      	strb	r3, [r2, #0]
	    ho->mru = cishort;		/* And remember value */
 8011692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011694:	8b7a      	ldrh	r2, [r7, #26]
 8011696:	805a      	strh	r2, [r3, #2]
	    break;
 8011698:	e1ae      	b.n	80119f8 <lcp_reqci+0x514>

	case CI_ASYNCMAP:
	    if (!ao->neg_asyncmap ||
 801169a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	f003 0308 	and.w	r3, r3, #8
 80116a2:	b2db      	uxtb	r3, r3
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d002      	beq.n	80116ae <lcp_reqci+0x1ca>
 80116a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116aa:	2b06      	cmp	r3, #6
 80116ac:	d002      	beq.n	80116b4 <lcp_reqci+0x1d0>
		cilen != CILEN_LONG) {
		orc = CONFREJ;
 80116ae:	2304      	movs	r3, #4
 80116b0:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 80116b2:	e1a1      	b.n	80119f8 <lcp_reqci+0x514>
	    }
	    GETLONG(cilong, p);
 80116b4:	6a3b      	ldr	r3, [r7, #32]
 80116b6:	1c5a      	adds	r2, r3, #1
 80116b8:	623a      	str	r2, [r7, #32]
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	021b      	lsls	r3, r3, #8
 80116be:	617b      	str	r3, [r7, #20]
 80116c0:	6a3b      	ldr	r3, [r7, #32]
 80116c2:	1c5a      	adds	r2, r3, #1
 80116c4:	623a      	str	r2, [r7, #32]
 80116c6:	781b      	ldrb	r3, [r3, #0]
 80116c8:	461a      	mov	r2, r3
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	4313      	orrs	r3, r2
 80116ce:	617b      	str	r3, [r7, #20]
 80116d0:	697b      	ldr	r3, [r7, #20]
 80116d2:	021b      	lsls	r3, r3, #8
 80116d4:	617b      	str	r3, [r7, #20]
 80116d6:	6a3b      	ldr	r3, [r7, #32]
 80116d8:	1c5a      	adds	r2, r3, #1
 80116da:	623a      	str	r2, [r7, #32]
 80116dc:	781b      	ldrb	r3, [r3, #0]
 80116de:	461a      	mov	r2, r3
 80116e0:	697b      	ldr	r3, [r7, #20]
 80116e2:	4313      	orrs	r3, r2
 80116e4:	617b      	str	r3, [r7, #20]
 80116e6:	697b      	ldr	r3, [r7, #20]
 80116e8:	021b      	lsls	r3, r3, #8
 80116ea:	617b      	str	r3, [r7, #20]
 80116ec:	6a3b      	ldr	r3, [r7, #32]
 80116ee:	1c5a      	adds	r2, r3, #1
 80116f0:	623a      	str	r2, [r7, #32]
 80116f2:	781b      	ldrb	r3, [r3, #0]
 80116f4:	461a      	mov	r2, r3
 80116f6:	697b      	ldr	r3, [r7, #20]
 80116f8:	4313      	orrs	r3, r2
 80116fa:	617b      	str	r3, [r7, #20]

	    /*
	     * Asyncmap must have set at least the bits
	     * which are set in lcp_allowoptions[unit].asyncmap.
	     */
	    if ((ao->asyncmap & ~cilong) != 0) {
 80116fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116fe:	685a      	ldr	r2, [r3, #4]
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	43db      	mvns	r3, r3
 8011704:	4013      	ands	r3, r2
 8011706:	2b00      	cmp	r3, #0
 8011708:	d035      	beq.n	8011776 <lcp_reqci+0x292>
		orc = CONFNAK;
 801170a:	2303      	movs	r3, #3
 801170c:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_ASYNCMAP, nakoutp);
 801170e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011710:	1c5a      	adds	r2, r3, #1
 8011712:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011714:	2202      	movs	r2, #2
 8011716:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 8011718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801171a:	1c5a      	adds	r2, r3, #1
 801171c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801171e:	2206      	movs	r2, #6
 8011720:	701a      	strb	r2, [r3, #0]
		PUTLONG(ao->asyncmap | cilong, nakoutp);
 8011722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011724:	1c5a      	adds	r2, r3, #1
 8011726:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801172a:	6851      	ldr	r1, [r2, #4]
 801172c:	697a      	ldr	r2, [r7, #20]
 801172e:	430a      	orrs	r2, r1
 8011730:	0e12      	lsrs	r2, r2, #24
 8011732:	b2d2      	uxtb	r2, r2
 8011734:	701a      	strb	r2, [r3, #0]
 8011736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011738:	1c5a      	adds	r2, r3, #1
 801173a:	63fa      	str	r2, [r7, #60]	; 0x3c
 801173c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801173e:	6851      	ldr	r1, [r2, #4]
 8011740:	697a      	ldr	r2, [r7, #20]
 8011742:	430a      	orrs	r2, r1
 8011744:	0c12      	lsrs	r2, r2, #16
 8011746:	b2d2      	uxtb	r2, r2
 8011748:	701a      	strb	r2, [r3, #0]
 801174a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801174c:	1c5a      	adds	r2, r3, #1
 801174e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011752:	6851      	ldr	r1, [r2, #4]
 8011754:	697a      	ldr	r2, [r7, #20]
 8011756:	430a      	orrs	r2, r1
 8011758:	0a12      	lsrs	r2, r2, #8
 801175a:	b2d2      	uxtb	r2, r2
 801175c:	701a      	strb	r2, [r3, #0]
 801175e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011760:	1c5a      	adds	r2, r3, #1
 8011762:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011766:	6852      	ldr	r2, [r2, #4]
 8011768:	b2d1      	uxtb	r1, r2
 801176a:	697a      	ldr	r2, [r7, #20]
 801176c:	b2d2      	uxtb	r2, r2
 801176e:	430a      	orrs	r2, r1
 8011770:	b2d2      	uxtb	r2, r2
 8011772:	701a      	strb	r2, [r3, #0]
		break;
 8011774:	e140      	b.n	80119f8 <lcp_reqci+0x514>
	    }
	    ho->neg_asyncmap = 1;
 8011776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011778:	7813      	ldrb	r3, [r2, #0]
 801177a:	f043 0308 	orr.w	r3, r3, #8
 801177e:	7013      	strb	r3, [r2, #0]
	    ho->asyncmap = cilong;
 8011780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011782:	697a      	ldr	r2, [r7, #20]
 8011784:	605a      	str	r2, [r3, #4]
	    break;
 8011786:	e137      	b.n	80119f8 <lcp_reqci+0x514>

	case CI_AUTHTYPE:
	    if (cilen < CILEN_SHORT ||
 8011788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801178a:	2b03      	cmp	r3, #3
 801178c:	dd06      	ble.n	801179c <lcp_reqci+0x2b8>
		!(0
#if PAP_SUPPORT
		|| ao->neg_upap
 801178e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011790:	781b      	ldrb	r3, [r3, #0]
		!(0
 8011792:	f003 0310 	and.w	r3, r3, #16
 8011796:	b2db      	uxtb	r3, r3
	    if (cilen < CILEN_SHORT ||
 8011798:	2b00      	cmp	r3, #0
 801179a:	d102      	bne.n	80117a2 <lcp_reqci+0x2be>
		)) {
		/*
		 * Reject the option if we're not willing to authenticate.
		 */
		ppp_dbglog(("No auth is possible"));
		orc = CONFREJ;
 801179c:	2304      	movs	r3, #4
 801179e:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 80117a0:	e12a      	b.n	80119f8 <lcp_reqci+0x514>
	    }
	    GETSHORT(cishort, p);
 80117a2:	6a3b      	ldr	r3, [r7, #32]
 80117a4:	1c5a      	adds	r2, r3, #1
 80117a6:	623a      	str	r2, [r7, #32]
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	021b      	lsls	r3, r3, #8
 80117ae:	837b      	strh	r3, [r7, #26]
 80117b0:	6a3b      	ldr	r3, [r7, #32]
 80117b2:	1c5a      	adds	r2, r3, #1
 80117b4:	623a      	str	r2, [r7, #32]
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	b29a      	uxth	r2, r3
 80117ba:	8b7b      	ldrh	r3, [r7, #26]
 80117bc:	4313      	orrs	r3, r2
 80117be:	837b      	strh	r3, [r7, #26]
	     * Whether we end up doing CHAP, UPAP, or EAP depends then on
	     * the ordering of the CIs in the peer's Configure-Request.
             */

#if PAP_SUPPORT
	    if (cishort == PPP_PAP) {
 80117c0:	8b7b      	ldrh	r3, [r7, #26]
 80117c2:	f24c 0223 	movw	r2, #49187	; 0xc023
 80117c6:	4293      	cmp	r3, r2
 80117c8:	d11a      	bne.n	8011800 <lcp_reqci+0x31c>
		/* we've already accepted CHAP or EAP */
		if (0
 80117ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117cc:	2b04      	cmp	r3, #4
 80117ce:	d002      	beq.n	80117d6 <lcp_reqci+0x2f2>
#if EAP_SUPPORT
		    || ho->neg_eap
#endif /* EAP_SUPPORT */
		    || cilen != CILEN_SHORT) {
		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE PAP, rejecting..."));
		    orc = CONFREJ;
 80117d0:	2304      	movs	r3, #4
 80117d2:	647b      	str	r3, [r7, #68]	; 0x44
		    break;
 80117d4:	e110      	b.n	80119f8 <lcp_reqci+0x514>
		}
		if (!ao->neg_upap) {	/* we don't want to do PAP */
 80117d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d8:	781b      	ldrb	r3, [r3, #0]
 80117da:	f003 0310 	and.w	r3, r3, #16
 80117de:	b2db      	uxtb	r3, r3
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d107      	bne.n	80117f4 <lcp_reqci+0x310>
		    orc = CONFNAK;	/* NAK it and suggest CHAP or EAP */
 80117e4:	2303      	movs	r3, #3
 80117e6:	647b      	str	r3, [r7, #68]	; 0x44
		    PUTCHAR(CI_AUTHTYPE, nakoutp);
 80117e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117ea:	1c5a      	adds	r2, r3, #1
 80117ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80117ee:	2203      	movs	r2, #3
 80117f0:	701a      	strb	r2, [r3, #0]
			PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
#endif /* CHAP_SUPPORT */
#if EAP_SUPPORT
		    }
#endif /* EAP_SUPPORT */
		    break;
 80117f2:	e101      	b.n	80119f8 <lcp_reqci+0x514>
		}
		ho->neg_upap = 1;
 80117f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117f6:	7813      	ldrb	r3, [r2, #0]
 80117f8:	f043 0310 	orr.w	r3, r3, #16
 80117fc:	7013      	strb	r3, [r2, #0]
		break;
 80117fe:	e0fb      	b.n	80119f8 <lcp_reqci+0x514>
	     * We don't recognize the protocol they're asking for.
	     * Nak it with something we're willing to do.
	     * (At this point we know ao->neg_upap || ao->neg_chap ||
	     * ao->neg_eap.)
	     */
	    orc = CONFNAK;
 8011800:	2303      	movs	r3, #3
 8011802:	647b      	str	r3, [r7, #68]	; 0x44
	    PUTCHAR(CI_AUTHTYPE, nakoutp);
 8011804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011806:	1c5a      	adds	r2, r3, #1
 8011808:	63fa      	str	r2, [r7, #60]	; 0x3c
 801180a:	2203      	movs	r2, #3
 801180c:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
	    } else
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	    if(1) {
		PUTCHAR(CILEN_SHORT, nakoutp);
 801180e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011810:	1c5a      	adds	r2, r3, #1
 8011812:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011814:	2204      	movs	r2, #4
 8011816:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_PAP, nakoutp);
 8011818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801181a:	1c5a      	adds	r2, r3, #1
 801181c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801181e:	22c0      	movs	r2, #192	; 0xc0
 8011820:	701a      	strb	r2, [r3, #0]
 8011822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011824:	1c5a      	adds	r2, r3, #1
 8011826:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011828:	2223      	movs	r2, #35	; 0x23
 801182a:	701a      	strb	r2, [r3, #0]
	    } else
#endif /* PAP_SUPPORT */
	    {}
	    break;
 801182c:	e0e4      	b.n	80119f8 <lcp_reqci+0x514>
	    }
	    break;
#endif /* LQR_SUPPORT */

	case CI_MAGICNUMBER:
	    if (!(ao->neg_magicnumber || go->neg_magicnumber) ||
 801182e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011830:	781b      	ldrb	r3, [r3, #0]
 8011832:	f003 0320 	and.w	r3, r3, #32
 8011836:	b2db      	uxtb	r3, r3
 8011838:	2b00      	cmp	r3, #0
 801183a:	d106      	bne.n	801184a <lcp_reqci+0x366>
 801183c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801183e:	781b      	ldrb	r3, [r3, #0]
 8011840:	f003 0320 	and.w	r3, r3, #32
 8011844:	b2db      	uxtb	r3, r3
 8011846:	2b00      	cmp	r3, #0
 8011848:	d002      	beq.n	8011850 <lcp_reqci+0x36c>
 801184a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801184c:	2b06      	cmp	r3, #6
 801184e:	d002      	beq.n	8011856 <lcp_reqci+0x372>
		cilen != CILEN_LONG) {
		orc = CONFREJ;
 8011850:	2304      	movs	r3, #4
 8011852:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8011854:	e0d0      	b.n	80119f8 <lcp_reqci+0x514>
	    }
	    GETLONG(cilong, p);
 8011856:	6a3b      	ldr	r3, [r7, #32]
 8011858:	1c5a      	adds	r2, r3, #1
 801185a:	623a      	str	r2, [r7, #32]
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	021b      	lsls	r3, r3, #8
 8011860:	617b      	str	r3, [r7, #20]
 8011862:	6a3b      	ldr	r3, [r7, #32]
 8011864:	1c5a      	adds	r2, r3, #1
 8011866:	623a      	str	r2, [r7, #32]
 8011868:	781b      	ldrb	r3, [r3, #0]
 801186a:	461a      	mov	r2, r3
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	4313      	orrs	r3, r2
 8011870:	617b      	str	r3, [r7, #20]
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	021b      	lsls	r3, r3, #8
 8011876:	617b      	str	r3, [r7, #20]
 8011878:	6a3b      	ldr	r3, [r7, #32]
 801187a:	1c5a      	adds	r2, r3, #1
 801187c:	623a      	str	r2, [r7, #32]
 801187e:	781b      	ldrb	r3, [r3, #0]
 8011880:	461a      	mov	r2, r3
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	4313      	orrs	r3, r2
 8011886:	617b      	str	r3, [r7, #20]
 8011888:	697b      	ldr	r3, [r7, #20]
 801188a:	021b      	lsls	r3, r3, #8
 801188c:	617b      	str	r3, [r7, #20]
 801188e:	6a3b      	ldr	r3, [r7, #32]
 8011890:	1c5a      	adds	r2, r3, #1
 8011892:	623a      	str	r2, [r7, #32]
 8011894:	781b      	ldrb	r3, [r3, #0]
 8011896:	461a      	mov	r2, r3
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	4313      	orrs	r3, r2
 801189c:	617b      	str	r3, [r7, #20]

	    /*
	     * He must have a different magic number.
	     */
	    if (go->neg_magicnumber &&
 801189e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118a0:	781b      	ldrb	r3, [r3, #0]
 80118a2:	f003 0320 	and.w	r3, r3, #32
 80118a6:	b2db      	uxtb	r3, r3
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d02f      	beq.n	801190c <lcp_reqci+0x428>
		cilong == go->magicnumber) {
 80118ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ae:	689a      	ldr	r2, [r3, #8]
	    if (go->neg_magicnumber &&
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	429a      	cmp	r2, r3
 80118b4:	d12a      	bne.n	801190c <lcp_reqci+0x428>
		cilong = magic();	/* Don't put magic() inside macro! */
 80118b6:	f000 fb7f 	bl	8011fb8 <magic>
 80118ba:	6178      	str	r0, [r7, #20]
		orc = CONFNAK;
 80118bc:	2303      	movs	r3, #3
 80118be:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_MAGICNUMBER, nakoutp);
 80118c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118c2:	1c5a      	adds	r2, r3, #1
 80118c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80118c6:	2205      	movs	r2, #5
 80118c8:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 80118ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118cc:	1c5a      	adds	r2, r3, #1
 80118ce:	63fa      	str	r2, [r7, #60]	; 0x3c
 80118d0:	2206      	movs	r2, #6
 80118d2:	701a      	strb	r2, [r3, #0]
		PUTLONG(cilong, nakoutp);
 80118d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118d6:	1c5a      	adds	r2, r3, #1
 80118d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80118da:	697a      	ldr	r2, [r7, #20]
 80118dc:	0e12      	lsrs	r2, r2, #24
 80118de:	b2d2      	uxtb	r2, r2
 80118e0:	701a      	strb	r2, [r3, #0]
 80118e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118e4:	1c5a      	adds	r2, r3, #1
 80118e6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80118e8:	697a      	ldr	r2, [r7, #20]
 80118ea:	0c12      	lsrs	r2, r2, #16
 80118ec:	b2d2      	uxtb	r2, r2
 80118ee:	701a      	strb	r2, [r3, #0]
 80118f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118f2:	1c5a      	adds	r2, r3, #1
 80118f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80118f6:	697a      	ldr	r2, [r7, #20]
 80118f8:	0a12      	lsrs	r2, r2, #8
 80118fa:	b2d2      	uxtb	r2, r2
 80118fc:	701a      	strb	r2, [r3, #0]
 80118fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011900:	1c5a      	adds	r2, r3, #1
 8011902:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011904:	697a      	ldr	r2, [r7, #20]
 8011906:	b2d2      	uxtb	r2, r2
 8011908:	701a      	strb	r2, [r3, #0]
		break;
 801190a:	e075      	b.n	80119f8 <lcp_reqci+0x514>
	    }
	    ho->neg_magicnumber = 1;
 801190c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801190e:	7813      	ldrb	r3, [r2, #0]
 8011910:	f043 0320 	orr.w	r3, r3, #32
 8011914:	7013      	strb	r3, [r2, #0]
	    ho->magicnumber = cilong;
 8011916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011918:	697a      	ldr	r2, [r7, #20]
 801191a:	609a      	str	r2, [r3, #8]
	    break;
 801191c:	e06c      	b.n	80119f8 <lcp_reqci+0x514>


	case CI_PCOMPRESSION:
	    if (!ao->neg_pcompression ||
 801191e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011920:	781b      	ldrb	r3, [r3, #0]
 8011922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011926:	b2db      	uxtb	r3, r3
 8011928:	2b00      	cmp	r3, #0
 801192a:	d002      	beq.n	8011932 <lcp_reqci+0x44e>
 801192c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801192e:	2b02      	cmp	r3, #2
 8011930:	d002      	beq.n	8011938 <lcp_reqci+0x454>
		cilen != CILEN_VOID) {
		orc = CONFREJ;
 8011932:	2304      	movs	r3, #4
 8011934:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8011936:	e05f      	b.n	80119f8 <lcp_reqci+0x514>
	    }
	    ho->neg_pcompression = 1;
 8011938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801193a:	7813      	ldrb	r3, [r2, #0]
 801193c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011940:	7013      	strb	r3, [r2, #0]
	    break;
 8011942:	e059      	b.n	80119f8 <lcp_reqci+0x514>

	case CI_ACCOMPRESSION:
	    if (!ao->neg_accompression ||
 8011944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011946:	781b      	ldrb	r3, [r3, #0]
 8011948:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801194c:	b2db      	uxtb	r3, r3
 801194e:	2b00      	cmp	r3, #0
 8011950:	d002      	beq.n	8011958 <lcp_reqci+0x474>
 8011952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011954:	2b02      	cmp	r3, #2
 8011956:	d002      	beq.n	801195e <lcp_reqci+0x47a>
		cilen != CILEN_VOID) {
		orc = CONFREJ;
 8011958:	2304      	movs	r3, #4
 801195a:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 801195c:	e04c      	b.n	80119f8 <lcp_reqci+0x514>
	    }
	    ho->neg_accompression = 1;
 801195e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011960:	7813      	ldrb	r3, [r2, #0]
 8011962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011966:	7013      	strb	r3, [r2, #0]
	    break;
 8011968:	e046      	b.n	80119f8 <lcp_reqci+0x514>
	    ho->mrru = cishort;
	    break;
#endif /* HAVE_MULTILINK */

	case CI_SSNHF:
	    if (!ao->neg_ssnhf
 801196a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801196c:	785b      	ldrb	r3, [r3, #1]
 801196e:	f003 0302 	and.w	r3, r3, #2
 8011972:	b2db      	uxtb	r3, r3
 8011974:	2b00      	cmp	r3, #0
 8011976:	d002      	beq.n	801197e <lcp_reqci+0x49a>
#ifdef HAVE_MULTILINK
		|| !multilink
#endif /* HAVE_MULTILINK */
		|| cilen != CILEN_VOID) {
 8011978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801197a:	2b02      	cmp	r3, #2
 801197c:	d002      	beq.n	8011984 <lcp_reqci+0x4a0>
		orc = CONFREJ;
 801197e:	2304      	movs	r3, #4
 8011980:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8011982:	e039      	b.n	80119f8 <lcp_reqci+0x514>
	    }
	    ho->neg_ssnhf = 1;
 8011984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011986:	7853      	ldrb	r3, [r2, #1]
 8011988:	f043 0302 	orr.w	r3, r3, #2
 801198c:	7053      	strb	r3, [r2, #1]
	    break;
 801198e:	e033      	b.n	80119f8 <lcp_reqci+0x514>

	case CI_EPDISC:
	    if (!ao->neg_endpoint ||
 8011990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011992:	785b      	ldrb	r3, [r3, #1]
 8011994:	f003 0304 	and.w	r3, r3, #4
 8011998:	b2db      	uxtb	r3, r3
 801199a:	2b00      	cmp	r3, #0
 801199c:	d005      	beq.n	80119aa <lcp_reqci+0x4c6>
 801199e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119a0:	2b02      	cmp	r3, #2
 80119a2:	dd02      	ble.n	80119aa <lcp_reqci+0x4c6>
		cilen < CILEN_CHAR ||
 80119a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119a6:	2b17      	cmp	r3, #23
 80119a8:	dd02      	ble.n	80119b0 <lcp_reqci+0x4cc>
		cilen > CILEN_CHAR + MAX_ENDP_LEN) {
		orc = CONFREJ;
 80119aa:	2304      	movs	r3, #4
 80119ac:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 80119ae:	e023      	b.n	80119f8 <lcp_reqci+0x514>
	    }
	    GETCHAR(cichar, p);
 80119b0:	6a3b      	ldr	r3, [r7, #32]
 80119b2:	1c5a      	adds	r2, r3, #1
 80119b4:	623a      	str	r2, [r7, #32]
 80119b6:	781b      	ldrb	r3, [r3, #0]
 80119b8:	613b      	str	r3, [r7, #16]
	    cilen -= CILEN_CHAR;
 80119ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119bc:	3b03      	subs	r3, #3
 80119be:	653b      	str	r3, [r7, #80]	; 0x50
	    ho->neg_endpoint = 1;
 80119c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119c2:	7853      	ldrb	r3, [r2, #1]
 80119c4:	f043 0304 	orr.w	r3, r3, #4
 80119c8:	7053      	strb	r3, [r2, #1]
	    ho->endpoint.class_ = cichar;
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	b2da      	uxtb	r2, r3
 80119ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d0:	735a      	strb	r2, [r3, #13]
	    ho->endpoint.length = cilen;
 80119d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119d4:	b2da      	uxtb	r2, r3
 80119d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d8:	739a      	strb	r2, [r3, #14]
	    MEMCPY(ho->endpoint.value, p, cilen);
 80119da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119dc:	330f      	adds	r3, #15
 80119de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80119e0:	6a39      	ldr	r1, [r7, #32]
 80119e2:	4618      	mov	r0, r3
 80119e4:	f002 fb06 	bl	8013ff4 <memcpy>
	    INCPTR(cilen, p);
 80119e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119ea:	6a3a      	ldr	r2, [r7, #32]
 80119ec:	4413      	add	r3, r2
 80119ee:	623b      	str	r3, [r7, #32]
	    break;
 80119f0:	e002      	b.n	80119f8 <lcp_reqci+0x514>

	default:
	    LCPDEBUG(("lcp_reqci: rcvd unknown option %d", citype));
	    orc = CONFREJ;
 80119f2:	2304      	movs	r3, #4
 80119f4:	647b      	str	r3, [r7, #68]	; 0x44
	    break;
 80119f6:	bf00      	nop
	}

endswitch:
	if (orc == CONFACK &&		/* Good CI */
 80119f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119fa:	2b02      	cmp	r3, #2
 80119fc:	d103      	bne.n	8011a06 <lcp_reqci+0x522>
 80119fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a00:	2b02      	cmp	r3, #2
 8011a02:	d000      	beq.n	8011a06 <lcp_reqci+0x522>
	    rc != CONFACK)		/*  but prior CI wasn't? */
	    continue;			/* Don't send this one */
 8011a04:	e024      	b.n	8011a50 <lcp_reqci+0x56c>

	if (orc == CONFNAK) {		/* Nak this CI? */
 8011a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a08:	2b03      	cmp	r3, #3
 8011a0a:	d10e      	bne.n	8011a2a <lcp_reqci+0x546>
	    if (reject_if_disagree	/* Getting fed up with sending NAKs? */
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d005      	beq.n	8011a1e <lcp_reqci+0x53a>
		&& citype != CI_MAGICNUMBER) {
 8011a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a14:	2b05      	cmp	r3, #5
 8011a16:	d002      	beq.n	8011a1e <lcp_reqci+0x53a>
		orc = CONFREJ;		/* Get tough if so */
 8011a18:	2304      	movs	r3, #4
 8011a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8011a1c:	e005      	b.n	8011a2a <lcp_reqci+0x546>
	    } else {
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 8011a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a20:	2b04      	cmp	r3, #4
 8011a22:	d100      	bne.n	8011a26 <lcp_reqci+0x542>
		    continue;		/* Don't send this one */
 8011a24:	e014      	b.n	8011a50 <lcp_reqci+0x56c>
		rc = CONFNAK;
 8011a26:	2303      	movs	r3, #3
 8011a28:	64bb      	str	r3, [r7, #72]	; 0x48
	    }
	}
	if (orc == CONFREJ) {		/* Reject this CI */
 8011a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a2c:	2b04      	cmp	r3, #4
 8011a2e:	d10f      	bne.n	8011a50 <lcp_reqci+0x56c>
	    rc = CONFREJ;
 8011a30:	2304      	movs	r3, #4
 8011a32:	64bb      	str	r3, [r7, #72]	; 0x48
	    if (cip != rejp)		/* Need to move rejected CI? */
 8011a34:	69fa      	ldr	r2, [r7, #28]
 8011a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d005      	beq.n	8011a48 <lcp_reqci+0x564>
		MEMCPY(rejp, cip, cilen); /* Move it */
 8011a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a3e:	461a      	mov	r2, r3
 8011a40:	69f9      	ldr	r1, [r7, #28]
 8011a42:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011a44:	f002 fad6 	bl	8013ff4 <memcpy>
	    INCPTR(cilen, rejp);	/* Update output pointer */
 8011a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011a4c:	4413      	add	r3, r2
 8011a4e:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 8011a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	f47f ad83 	bne.w	801155e <lcp_reqci+0x7a>
     * code would go here.  The extra NAKs would go at *nakoutp.
     * At present there are no cases where we want to ask the
     * peer to negotiate an option.
     */

    switch (rc) {
 8011a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a5a:	2b03      	cmp	r3, #3
 8011a5c:	d00a      	beq.n	8011a74 <lcp_reqci+0x590>
 8011a5e:	2b04      	cmp	r3, #4
 8011a60:	d017      	beq.n	8011a92 <lcp_reqci+0x5ae>
 8011a62:	2b02      	cmp	r3, #2
 8011a64:	d000      	beq.n	8011a68 <lcp_reqci+0x584>
	break;
    case CONFREJ:
	*lenp = rejp - inp;
	break;
    default:
	break;
 8011a66:	e01a      	b.n	8011a9e <lcp_reqci+0x5ba>
	*lenp = next - inp;
 8011a68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	1ad2      	subs	r2, r2, r3
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	601a      	str	r2, [r3, #0]
	break;
 8011a72:	e014      	b.n	8011a9e <lcp_reqci+0x5ba>
	*lenp = nakoutp - (u_char*)nakp->payload;
 8011a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a78:	6852      	ldr	r2, [r2, #4]
 8011a7a:	1a9a      	subs	r2, r3, r2
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	601a      	str	r2, [r3, #0]
	MEMCPY(inp, nakp->payload, *lenp);
 8011a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a82:	6859      	ldr	r1, [r3, #4]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	461a      	mov	r2, r3
 8011a8a:	68b8      	ldr	r0, [r7, #8]
 8011a8c:	f002 fab2 	bl	8013ff4 <memcpy>
	break;
 8011a90:	e005      	b.n	8011a9e <lcp_reqci+0x5ba>
	*lenp = rejp - inp;
 8011a92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	1ad2      	subs	r2, r2, r3
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	601a      	str	r2, [r3, #0]
	break;
 8011a9c:	bf00      	nop
    }

    pbuf_free(nakp);
 8011a9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011aa0:	f7f4 fb88 	bl	80061b4 <pbuf_free>
    LCPDEBUG(("lcp_reqci: returning CONF%s.", CODENAME(rc)));
    return (rc);			/* Return final code */
 8011aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	3758      	adds	r7, #88	; 0x58
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}
 8011aae:	bf00      	nop

08011ab0 <lcp_up>:


/*
 * lcp_up - LCP has come UP.
 */
static void lcp_up(fsm *f) {
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b08c      	sub	sp, #48	; 0x30
 8011ab4:	af02      	add	r7, sp, #8
 8011ab6:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	627b      	str	r3, [r7, #36]	; 0x24
    lcp_options *wo = &pcb->lcp_wantoptions;
 8011abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac0:	3360      	adds	r3, #96	; 0x60
 8011ac2:	623b      	str	r3, [r7, #32]
    lcp_options *ho = &pcb->lcp_hisoptions;
 8011ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac6:	33cc      	adds	r3, #204	; 0xcc
 8011ac8:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 8011aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011acc:	3384      	adds	r3, #132	; 0x84
 8011ace:	61bb      	str	r3, [r7, #24]
    lcp_options *ao = &pcb->lcp_allowoptions;
 8011ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad2:	33a8      	adds	r3, #168	; 0xa8
 8011ad4:	617b      	str	r3, [r7, #20]
    int mtu, mru;

    if (!go->neg_magicnumber)
 8011ad6:	69bb      	ldr	r3, [r7, #24]
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	f003 0320 	and.w	r3, r3, #32
 8011ade:	b2db      	uxtb	r3, r3
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d102      	bne.n	8011aea <lcp_up+0x3a>
	go->magicnumber = 0;
 8011ae4:	69bb      	ldr	r3, [r7, #24]
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	609a      	str	r2, [r3, #8]
    if (!ho->neg_magicnumber)
 8011aea:	69fb      	ldr	r3, [r7, #28]
 8011aec:	781b      	ldrb	r3, [r3, #0]
 8011aee:	f003 0320 	and.w	r3, r3, #32
 8011af2:	b2db      	uxtb	r3, r3
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d102      	bne.n	8011afe <lcp_up+0x4e>
	ho->magicnumber = 0;
 8011af8:	69fb      	ldr	r3, [r7, #28]
 8011afa:	2200      	movs	r2, #0
 8011afc:	609a      	str	r2, [r3, #8]
     * the value we got in the negotiation.
     * Note on the MTU: the link MTU can be the MRU the peer wanted,
     * the interface MTU is set to the lowest of that, the
     * MTU we want to use, and our link MRU.
     */
    mtu = ho->neg_mru? ho->mru: PPP_DEFMRU;
 8011afe:	69fb      	ldr	r3, [r7, #28]
 8011b00:	781b      	ldrb	r3, [r3, #0]
 8011b02:	f003 0304 	and.w	r3, r3, #4
 8011b06:	b2db      	uxtb	r3, r3
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d002      	beq.n	8011b12 <lcp_up+0x62>
 8011b0c:	69fb      	ldr	r3, [r7, #28]
 8011b0e:	885b      	ldrh	r3, [r3, #2]
 8011b10:	e001      	b.n	8011b16 <lcp_up+0x66>
 8011b12:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8011b16:	613b      	str	r3, [r7, #16]
    mru = go->neg_mru? LWIP_MAX(wo->mru, go->mru): PPP_DEFMRU;
 8011b18:	69bb      	ldr	r3, [r7, #24]
 8011b1a:	781b      	ldrb	r3, [r3, #0]
 8011b1c:	f003 0304 	and.w	r3, r3, #4
 8011b20:	b2db      	uxtb	r3, r3
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d00b      	beq.n	8011b3e <lcp_up+0x8e>
 8011b26:	6a3b      	ldr	r3, [r7, #32]
 8011b28:	885a      	ldrh	r2, [r3, #2]
 8011b2a:	69bb      	ldr	r3, [r7, #24]
 8011b2c:	885b      	ldrh	r3, [r3, #2]
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d902      	bls.n	8011b38 <lcp_up+0x88>
 8011b32:	6a3b      	ldr	r3, [r7, #32]
 8011b34:	885b      	ldrh	r3, [r3, #2]
 8011b36:	e004      	b.n	8011b42 <lcp_up+0x92>
 8011b38:	69bb      	ldr	r3, [r7, #24]
 8011b3a:	885b      	ldrh	r3, [r3, #2]
 8011b3c:	e001      	b.n	8011b42 <lcp_up+0x92>
 8011b3e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8011b42:	60fb      	str	r3, [r7, #12]
#ifdef HAVE_MULTILINK
    if (!(multilink && go->neg_mrru && ho->neg_mrru))
#endif /* HAVE_MULTILINK */
	ppp_netif_set_mtu(pcb, LWIP_MIN(LWIP_MIN(mtu, mru), ao->mru));
 8011b44:	697b      	ldr	r3, [r7, #20]
 8011b46:	885b      	ldrh	r3, [r3, #2]
 8011b48:	4619      	mov	r1, r3
 8011b4a:	68fa      	ldr	r2, [r7, #12]
 8011b4c:	693b      	ldr	r3, [r7, #16]
 8011b4e:	4293      	cmp	r3, r2
 8011b50:	bfa8      	it	ge
 8011b52:	4613      	movge	r3, r2
 8011b54:	428b      	cmp	r3, r1
 8011b56:	bfa8      	it	ge
 8011b58:	460b      	movge	r3, r1
 8011b5a:	4619      	mov	r1, r3
 8011b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b5e:	f000 fd5f 	bl	8012620 <ppp_netif_set_mtu>
    ppp_send_config(pcb, mtu,
		    (ho->neg_asyncmap? ho->asyncmap: 0xffffffff),
 8011b62:	69fb      	ldr	r3, [r7, #28]
 8011b64:	781b      	ldrb	r3, [r3, #0]
 8011b66:	f003 0308 	and.w	r3, r3, #8
 8011b6a:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d002      	beq.n	8011b76 <lcp_up+0xc6>
 8011b70:	69fb      	ldr	r3, [r7, #28]
 8011b72:	685a      	ldr	r2, [r3, #4]
 8011b74:	e001      	b.n	8011b7a <lcp_up+0xca>
 8011b76:	f04f 32ff 	mov.w	r2, #4294967295
		    ho->neg_pcompression, ho->neg_accompression);
 8011b7a:	69fb      	ldr	r3, [r7, #28]
 8011b7c:	781b      	ldrb	r3, [r3, #0]
 8011b7e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8011b82:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 8011b84:	4619      	mov	r1, r3
		    ho->neg_pcompression, ho->neg_accompression);
 8011b86:	69fb      	ldr	r3, [r7, #28]
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011b8e:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 8011b90:	9300      	str	r3, [sp, #0]
 8011b92:	460b      	mov	r3, r1
 8011b94:	6939      	ldr	r1, [r7, #16]
 8011b96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b98:	f000 fc94 	bl	80124c4 <ppp_send_config>
    ppp_recv_config(pcb, mru,
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8011b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b9e:	781b      	ldrb	r3, [r3, #0]
 8011ba0:	f003 0308 	and.w	r3, r3, #8
 8011ba4:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d10c      	bne.n	8011bc4 <lcp_up+0x114>
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8011baa:	69bb      	ldr	r3, [r7, #24]
 8011bac:	781b      	ldrb	r3, [r3, #0]
 8011bae:	f003 0308 	and.w	r3, r3, #8
 8011bb2:	b2db      	uxtb	r3, r3
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d002      	beq.n	8011bbe <lcp_up+0x10e>
 8011bb8:	69bb      	ldr	r3, [r7, #24]
 8011bba:	685a      	ldr	r2, [r3, #4]
 8011bbc:	e003      	b.n	8011bc6 <lcp_up+0x116>
 8011bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8011bc2:	e000      	b.n	8011bc6 <lcp_up+0x116>
    ppp_recv_config(pcb, mru,
 8011bc4:	2200      	movs	r2, #0
		    go->neg_pcompression, go->neg_accompression);
 8011bc6:	69bb      	ldr	r3, [r7, #24]
 8011bc8:	781b      	ldrb	r3, [r3, #0]
 8011bca:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8011bce:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 8011bd0:	4619      	mov	r1, r3
		    go->neg_pcompression, go->neg_accompression);
 8011bd2:	69bb      	ldr	r3, [r7, #24]
 8011bd4:	781b      	ldrb	r3, [r3, #0]
 8011bd6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011bda:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 8011bdc:	9300      	str	r3, [sp, #0]
 8011bde:	460b      	mov	r3, r1
 8011be0:	68f9      	ldr	r1, [r7, #12]
 8011be2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011be4:	f000 fc8a 	bl	80124fc <ppp_recv_config>

    if (ho->neg_mru)
 8011be8:	69fb      	ldr	r3, [r7, #28]
 8011bea:	781b      	ldrb	r3, [r3, #0]
 8011bec:	f003 0304 	and.w	r3, r3, #4
 8011bf0:	b2db      	uxtb	r3, r3
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d004      	beq.n	8011c00 <lcp_up+0x150>
	pcb->peer_mru = ho->mru;
 8011bf6:	69fb      	ldr	r3, [r7, #28]
 8011bf8:	885a      	ldrh	r2, [r3, #2]
 8011bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bfc:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0

    lcp_echo_lowerup(f->pcb);  /* Enable echo messages */
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	4618      	mov	r0, r3
 8011c06:	f000 f97a 	bl	8011efe <lcp_echo_lowerup>

    link_established(pcb);
 8011c0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c0c:	f7fb fdca 	bl	800d7a4 <link_established>
}
 8011c10:	bf00      	nop
 8011c12:	3728      	adds	r7, #40	; 0x28
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}

08011c18 <lcp_down>:
/*
 * lcp_down - LCP has gone DOWN.
 *
 * Alert other protocols.
 */
static void lcp_down(fsm *f) {
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b086      	sub	sp, #24
 8011c1c:	af02      	add	r7, sp, #8
 8011c1e:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	60fb      	str	r3, [r7, #12]
    lcp_options *go = &pcb->lcp_gotoptions;
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	3384      	adds	r3, #132	; 0x84
 8011c2a:	60bb      	str	r3, [r7, #8]

    lcp_echo_lowerdown(f->pcb);
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	4618      	mov	r0, r3
 8011c32:	f000 f985 	bl	8011f40 <lcp_echo_lowerdown>

    link_down(pcb);
 8011c36:	68f8      	ldr	r0, [r7, #12]
 8011c38:	f7fb fd62 	bl	800d700 <link_down>

    ppp_send_config(pcb, PPP_DEFMRU, 0xffffffff, 0, 0);
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	9300      	str	r3, [sp, #0]
 8011c40:	2300      	movs	r3, #0
 8011c42:	f04f 32ff 	mov.w	r2, #4294967295
 8011c46:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8011c4a:	68f8      	ldr	r0, [r7, #12]
 8011c4c:	f000 fc3a 	bl	80124c4 <ppp_send_config>
    ppp_recv_config(pcb, PPP_DEFMRU,
		    (go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	781b      	ldrb	r3, [r3, #0]
 8011c54:	f003 0308 	and.w	r3, r3, #8
 8011c58:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d002      	beq.n	8011c64 <lcp_down+0x4c>
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	685a      	ldr	r2, [r3, #4]
 8011c62:	e001      	b.n	8011c68 <lcp_down+0x50>
 8011c64:	f04f 32ff 	mov.w	r2, #4294967295
		    go->neg_pcompression, go->neg_accompression);
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	781b      	ldrb	r3, [r3, #0]
 8011c6c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8011c70:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 8011c72:	4619      	mov	r1, r3
		    go->neg_pcompression, go->neg_accompression);
 8011c74:	68bb      	ldr	r3, [r7, #8]
 8011c76:	781b      	ldrb	r3, [r3, #0]
 8011c78:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011c7c:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 8011c7e:	9300      	str	r3, [sp, #0]
 8011c80:	460b      	mov	r3, r1
 8011c82:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8011c86:	68f8      	ldr	r0, [r7, #12]
 8011c88:	f000 fc38 	bl	80124fc <ppp_recv_config>
    pcb->peer_mru = PPP_DEFMRU;
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8011c92:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
}
 8011c96:	bf00      	nop
 8011c98:	3710      	adds	r7, #16
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	bd80      	pop	{r7, pc}

08011c9e <lcp_starting>:


/*
 * lcp_starting - LCP needs the lower layer up.
 */
static void lcp_starting(fsm *f) {
 8011c9e:	b580      	push	{r7, lr}
 8011ca0:	b084      	sub	sp, #16
 8011ca2:	af00      	add	r7, sp, #0
 8011ca4:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	60fb      	str	r3, [r7, #12]
    link_required(pcb);
 8011cac:	68f8      	ldr	r0, [r7, #12]
 8011cae:	f7fb fd05 	bl	800d6bc <link_required>
}
 8011cb2:	bf00      	nop
 8011cb4:	3710      	adds	r7, #16
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}

08011cba <lcp_finished>:


/*
 * lcp_finished - LCP has finished with the lower layer.
 */
static void lcp_finished(fsm *f) {
 8011cba:	b580      	push	{r7, lr}
 8011cbc:	b084      	sub	sp, #16
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	60fb      	str	r3, [r7, #12]
    link_terminated(pcb);
 8011cc8:	68f8      	ldr	r0, [r7, #12]
 8011cca:	f7fb fd01 	bl	800d6d0 <link_terminated>
}
 8011cce:	bf00      	nop
 8011cd0:	3710      	adds	r7, #16
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}
	...

08011cd8 <LcpLinkFailure>:

/*
 * Time to shut down the link because there is nothing out there.
 */

static void LcpLinkFailure(fsm *f) {
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b084      	sub	sp, #16
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	60fb      	str	r3, [r7, #12]
    if (f->state == PPP_FSM_OPENED) {
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	7c1b      	ldrb	r3, [r3, #16]
 8011cea:	2b09      	cmp	r3, #9
 8011cec:	d107      	bne.n	8011cfe <LcpLinkFailure+0x26>
	ppp_info(("No response to %d echo-requests", pcb->lcp_echos_pending));
        ppp_notice(("Serial link appears to be disconnected."));
	pcb->err_code = PPPERR_PEERDEAD;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	2209      	movs	r2, #9
 8011cf2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	lcp_close(pcb, "Peer not responding");
 8011cf6:	4904      	ldr	r1, [pc, #16]	; (8011d08 <LcpLinkFailure+0x30>)
 8011cf8:	68f8      	ldr	r0, [r7, #12]
 8011cfa:	f7fe f88d 	bl	800fe18 <lcp_close>
    }
}
 8011cfe:	bf00      	nop
 8011d00:	3710      	adds	r7, #16
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd80      	pop	{r7, pc}
 8011d06:	bf00      	nop
 8011d08:	08017c54 	.word	0x08017c54

08011d0c <LcpEchoCheck>:

/*
 * Timer expired for the LCP echo requests from this process.
 */

static void LcpEchoCheck(fsm *f) {
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b084      	sub	sp, #16
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	60fb      	str	r3, [r7, #12]

    LcpSendEchoRequest (f);
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f000 f88e 	bl	8011e3c <LcpSendEchoRequest>
    if (f->state != PPP_FSM_OPENED)
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	7c1b      	ldrb	r3, [r3, #16]
 8011d24:	2b09      	cmp	r3, #9
 8011d26:	d117      	bne.n	8011d58 <LcpEchoCheck+0x4c>
    /*
     * Start the timer for the next interval.
     */
    if (pcb->lcp_echo_timer_running)
	ppp_warn(("assertion lcp_echo_timer_running==0 failed"));
    TIMEOUT (LcpEchoTimeout, f, pcb->settings.lcp_echo_interval);
 8011d28:	6879      	ldr	r1, [r7, #4]
 8011d2a:	480d      	ldr	r0, [pc, #52]	; (8011d60 <LcpEchoCheck+0x54>)
 8011d2c:	f7fb fc1e 	bl	800d56c <sys_untimeout>
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	7cdb      	ldrb	r3, [r3, #19]
 8011d34:	461a      	mov	r2, r3
 8011d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011d3a:	fb03 f302 	mul.w	r3, r3, r2
 8011d3e:	687a      	ldr	r2, [r7, #4]
 8011d40:	4907      	ldr	r1, [pc, #28]	; (8011d60 <LcpEchoCheck+0x54>)
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7fb fbe6 	bl	800d514 <sys_timeout>
    pcb->lcp_echo_timer_running = 1;
 8011d48:	68fa      	ldr	r2, [r7, #12]
 8011d4a:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8011d4e:	f043 0310 	orr.w	r3, r3, #16
 8011d52:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 8011d56:	e000      	b.n	8011d5a <LcpEchoCheck+0x4e>
	return;
 8011d58:	bf00      	nop
}
 8011d5a:	3710      	adds	r7, #16
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bd80      	pop	{r7, pc}
 8011d60:	08011d65 	.word	0x08011d65

08011d64 <LcpEchoTimeout>:

/*
 * LcpEchoTimeout - Timer expired on the LCP echo
 */

static void LcpEchoTimeout(void *arg) {
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b084      	sub	sp, #16
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm*)arg;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	60fb      	str	r3, [r7, #12]
    ppp_pcb *pcb = f->pcb;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	60bb      	str	r3, [r7, #8]
    if (pcb->lcp_echo_timer_running != 0) {
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011d7c:	f003 0310 	and.w	r3, r3, #16
 8011d80:	b2db      	uxtb	r3, r3
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d009      	beq.n	8011d9a <LcpEchoTimeout+0x36>
        pcb->lcp_echo_timer_running = 0;
 8011d86:	68ba      	ldr	r2, [r7, #8]
 8011d88:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8011d8c:	f36f 1304 	bfc	r3, #4, #1
 8011d90:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
        LcpEchoCheck ((fsm *) arg);
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	f7ff ffb9 	bl	8011d0c <LcpEchoCheck>
    }
}
 8011d9a:	bf00      	nop
 8011d9c:	3710      	adds	r7, #16
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}

08011da2 <lcp_received_echo_reply>:

/*
 * LcpEchoReply - LCP has received a reply to the echo
 */

static void lcp_received_echo_reply(fsm *f, int id, u_char *inp, int len) {
 8011da2:	b480      	push	{r7}
 8011da4:	b089      	sub	sp, #36	; 0x24
 8011da6:	af00      	add	r7, sp, #0
 8011da8:	60f8      	str	r0, [r7, #12]
 8011daa:	60b9      	str	r1, [r7, #8]
 8011dac:	607a      	str	r2, [r7, #4]
 8011dae:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 8011db6:	69fb      	ldr	r3, [r7, #28]
 8011db8:	3384      	adds	r3, #132	; 0x84
 8011dba:	61bb      	str	r3, [r7, #24]
    u32_t magic_val;
    LWIP_UNUSED_ARG(id);

    /* Check the magic number - don't count replies from ourselves. */
    if (len < 4) {
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	2b03      	cmp	r3, #3
 8011dc0:	dd34      	ble.n	8011e2c <lcp_received_echo_reply+0x8a>
	ppp_dbglog(("lcp: received short Echo-Reply, length %d", len));
	return;
    }
    GETLONG(magic_val, inp);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	1c5a      	adds	r2, r3, #1
 8011dc6:	607a      	str	r2, [r7, #4]
 8011dc8:	781b      	ldrb	r3, [r3, #0]
 8011dca:	021b      	lsls	r3, r3, #8
 8011dcc:	617b      	str	r3, [r7, #20]
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	1c5a      	adds	r2, r3, #1
 8011dd2:	607a      	str	r2, [r7, #4]
 8011dd4:	781b      	ldrb	r3, [r3, #0]
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	4313      	orrs	r3, r2
 8011ddc:	617b      	str	r3, [r7, #20]
 8011dde:	697b      	ldr	r3, [r7, #20]
 8011de0:	021b      	lsls	r3, r3, #8
 8011de2:	617b      	str	r3, [r7, #20]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	1c5a      	adds	r2, r3, #1
 8011de8:	607a      	str	r2, [r7, #4]
 8011dea:	781b      	ldrb	r3, [r3, #0]
 8011dec:	461a      	mov	r2, r3
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	4313      	orrs	r3, r2
 8011df2:	617b      	str	r3, [r7, #20]
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	021b      	lsls	r3, r3, #8
 8011df8:	617b      	str	r3, [r7, #20]
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	1c5a      	adds	r2, r3, #1
 8011dfe:	607a      	str	r2, [r7, #4]
 8011e00:	781b      	ldrb	r3, [r3, #0]
 8011e02:	461a      	mov	r2, r3
 8011e04:	697b      	ldr	r3, [r7, #20]
 8011e06:	4313      	orrs	r3, r2
 8011e08:	617b      	str	r3, [r7, #20]
    if (go->neg_magicnumber
 8011e0a:	69bb      	ldr	r3, [r7, #24]
 8011e0c:	781b      	ldrb	r3, [r3, #0]
 8011e0e:	f003 0320 	and.w	r3, r3, #32
 8011e12:	b2db      	uxtb	r3, r3
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d004      	beq.n	8011e22 <lcp_received_echo_reply+0x80>
	&& magic_val == go->magicnumber) {
 8011e18:	69bb      	ldr	r3, [r7, #24]
 8011e1a:	689a      	ldr	r2, [r3, #8]
 8011e1c:	697b      	ldr	r3, [r7, #20]
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d006      	beq.n	8011e30 <lcp_received_echo_reply+0x8e>
	ppp_warn(("appear to have received our own echo-reply!"));
	return;
    }

    /* Reset the number of outstanding echo frames */
    pcb->lcp_echos_pending = 0;
 8011e22:	69fb      	ldr	r3, [r7, #28]
 8011e24:	2200      	movs	r2, #0
 8011e26:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8011e2a:	e002      	b.n	8011e32 <lcp_received_echo_reply+0x90>
	return;
 8011e2c:	bf00      	nop
 8011e2e:	e000      	b.n	8011e32 <lcp_received_echo_reply+0x90>
	return;
 8011e30:	bf00      	nop
}
 8011e32:	3724      	adds	r7, #36	; 0x24
 8011e34:	46bd      	mov	sp, r7
 8011e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3a:	4770      	bx	lr

08011e3c <LcpSendEchoRequest>:

/*
 * LcpSendEchoRequest - Send an echo request frame to the peer
 */

static void LcpSendEchoRequest(fsm *f) {
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b08a      	sub	sp, #40	; 0x28
 8011e40:	af02      	add	r7, sp, #8
 8011e42:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 8011e4a:	69fb      	ldr	r3, [r7, #28]
 8011e4c:	3384      	adds	r3, #132	; 0x84
 8011e4e:	61bb      	str	r3, [r7, #24]
    u_char pkt[4], *pktp;

    /*
     * Detect the failure of the peer at this point.
     */
    if (pcb->settings.lcp_echo_fails != 0) {
 8011e50:	69fb      	ldr	r3, [r7, #28]
 8011e52:	7d1b      	ldrb	r3, [r3, #20]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d00d      	beq.n	8011e74 <LcpSendEchoRequest+0x38>
        if (pcb->lcp_echos_pending >= pcb->settings.lcp_echo_fails) {
 8011e58:	69fb      	ldr	r3, [r7, #28]
 8011e5a:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 8011e5e:	69fb      	ldr	r3, [r7, #28]
 8011e60:	7d1b      	ldrb	r3, [r3, #20]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d306      	bcc.n	8011e74 <LcpSendEchoRequest+0x38>
            LcpLinkFailure(f);
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f7ff ff36 	bl	8011cd8 <LcpLinkFailure>
            pcb->lcp_echos_pending = 0;
 8011e6c:	69fb      	ldr	r3, [r7, #28]
 8011e6e:	2200      	movs	r2, #0
 8011e70:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
#endif

    /*
     * Make and send the echo request frame.
     */
    if (f->state == PPP_FSM_OPENED) {
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	7c1b      	ldrb	r3, [r3, #16]
 8011e78:	2b09      	cmp	r3, #9
 8011e7a:	d13c      	bne.n	8011ef6 <LcpSendEchoRequest+0xba>
        lcp_magic = go->magicnumber;
 8011e7c:	69bb      	ldr	r3, [r7, #24]
 8011e7e:	689b      	ldr	r3, [r3, #8]
 8011e80:	617b      	str	r3, [r7, #20]
	pktp = pkt;
 8011e82:	f107 030c 	add.w	r3, r7, #12
 8011e86:	613b      	str	r3, [r7, #16]
	PUTLONG(lcp_magic, pktp);
 8011e88:	693b      	ldr	r3, [r7, #16]
 8011e8a:	1c5a      	adds	r2, r3, #1
 8011e8c:	613a      	str	r2, [r7, #16]
 8011e8e:	697a      	ldr	r2, [r7, #20]
 8011e90:	0e12      	lsrs	r2, r2, #24
 8011e92:	b2d2      	uxtb	r2, r2
 8011e94:	701a      	strb	r2, [r3, #0]
 8011e96:	693b      	ldr	r3, [r7, #16]
 8011e98:	1c5a      	adds	r2, r3, #1
 8011e9a:	613a      	str	r2, [r7, #16]
 8011e9c:	697a      	ldr	r2, [r7, #20]
 8011e9e:	0c12      	lsrs	r2, r2, #16
 8011ea0:	b2d2      	uxtb	r2, r2
 8011ea2:	701a      	strb	r2, [r3, #0]
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	1c5a      	adds	r2, r3, #1
 8011ea8:	613a      	str	r2, [r7, #16]
 8011eaa:	697a      	ldr	r2, [r7, #20]
 8011eac:	0a12      	lsrs	r2, r2, #8
 8011eae:	b2d2      	uxtb	r2, r2
 8011eb0:	701a      	strb	r2, [r3, #0]
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	1c5a      	adds	r2, r3, #1
 8011eb6:	613a      	str	r2, [r7, #16]
 8011eb8:	697a      	ldr	r2, [r7, #20]
 8011eba:	b2d2      	uxtb	r2, r2
 8011ebc:	701a      	strb	r2, [r3, #0]
        fsm_sdata(f, ECHOREQ, pcb->lcp_echo_number++, pkt, pktp - pkt);
 8011ebe:	69fb      	ldr	r3, [r7, #28]
 8011ec0:	f893 20f3 	ldrb.w	r2, [r3, #243]	; 0xf3
 8011ec4:	1c53      	adds	r3, r2, #1
 8011ec6:	b2d9      	uxtb	r1, r3
 8011ec8:	69fb      	ldr	r3, [r7, #28]
 8011eca:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8011ece:	6939      	ldr	r1, [r7, #16]
 8011ed0:	f107 030c 	add.w	r3, r7, #12
 8011ed4:	1acb      	subs	r3, r1, r3
 8011ed6:	f107 010c 	add.w	r1, r7, #12
 8011eda:	9300      	str	r3, [sp, #0]
 8011edc:	460b      	mov	r3, r1
 8011ede:	2109      	movs	r1, #9
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f7fc fc79 	bl	800e7d8 <fsm_sdata>
	++pcb->lcp_echos_pending;
 8011ee6:	69fb      	ldr	r3, [r7, #28]
 8011ee8:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8011eec:	3301      	adds	r3, #1
 8011eee:	b2da      	uxtb	r2, r3
 8011ef0:	69fb      	ldr	r3, [r7, #28]
 8011ef2:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    }
}
 8011ef6:	bf00      	nop
 8011ef8:	3720      	adds	r7, #32
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd80      	pop	{r7, pc}

08011efe <lcp_echo_lowerup>:

/*
 * lcp_echo_lowerup - Start the timer for the LCP frame
 */

static void lcp_echo_lowerup(ppp_pcb *pcb) {
 8011efe:	b580      	push	{r7, lr}
 8011f00:	b084      	sub	sp, #16
 8011f02:	af00      	add	r7, sp, #0
 8011f04:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	3344      	adds	r3, #68	; 0x44
 8011f0a:	60fb      	str	r3, [r7, #12]

    /* Clear the parameters for generating echo frames */
    pcb->lcp_echos_pending      = 0;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2200      	movs	r2, #0
 8011f10:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    pcb->lcp_echo_number        = 0;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2200      	movs	r2, #0
 8011f18:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
    pcb->lcp_echo_timer_running = 0;
 8011f1c:	687a      	ldr	r2, [r7, #4]
 8011f1e:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8011f22:	f36f 1304 	bfc	r3, #4, #1
 8011f26:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  
    /* If a timeout interval is specified then start the timer */
    if (pcb->settings.lcp_echo_interval != 0)
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	7cdb      	ldrb	r3, [r3, #19]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d002      	beq.n	8011f38 <lcp_echo_lowerup+0x3a>
        LcpEchoCheck (f);
 8011f32:	68f8      	ldr	r0, [r7, #12]
 8011f34:	f7ff feea 	bl	8011d0c <LcpEchoCheck>
}
 8011f38:	bf00      	nop
 8011f3a:	3710      	adds	r7, #16
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}

08011f40 <lcp_echo_lowerdown>:

/*
 * lcp_echo_lowerdown - Stop the timer for the LCP frame
 */

static void lcp_echo_lowerdown(ppp_pcb *pcb) {
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b084      	sub	sp, #16
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	3344      	adds	r3, #68	; 0x44
 8011f4c:	60fb      	str	r3, [r7, #12]

    if (pcb->lcp_echo_timer_running != 0) {
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011f54:	f003 0310 	and.w	r3, r3, #16
 8011f58:	b2db      	uxtb	r3, r3
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d00a      	beq.n	8011f74 <lcp_echo_lowerdown+0x34>
        UNTIMEOUT (LcpEchoTimeout, f);
 8011f5e:	68f9      	ldr	r1, [r7, #12]
 8011f60:	4806      	ldr	r0, [pc, #24]	; (8011f7c <lcp_echo_lowerdown+0x3c>)
 8011f62:	f7fb fb03 	bl	800d56c <sys_untimeout>
        pcb->lcp_echo_timer_running = 0;
 8011f66:	687a      	ldr	r2, [r7, #4]
 8011f68:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8011f6c:	f36f 1304 	bfc	r3, #4, #1
 8011f70:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    }
}
 8011f74:	bf00      	nop
 8011f76:	3710      	adds	r7, #16
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}
 8011f7c:	08011d65 	.word	0x08011d65

08011f80 <magic_init>:
 * random event.
 *
 * If LWIP_RAND if available, we do not call srand() as we are
 * not going to call rand().
 */
void magic_init(void) {
 8011f80:	b580      	push	{r7, lr}
 8011f82:	af00      	add	r7, sp, #0
  magic_randomseed += sys_jiffies();
 8011f84:	f7ef ffaa 	bl	8001edc <sys_jiffies>
 8011f88:	4602      	mov	r2, r0
 8011f8a:	4b03      	ldr	r3, [pc, #12]	; (8011f98 <magic_init+0x18>)
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	4413      	add	r3, r2
 8011f90:	4a01      	ldr	r2, [pc, #4]	; (8011f98 <magic_init+0x18>)
 8011f92:	6013      	str	r3, [r2, #0]
#ifndef LWIP_RAND
  /* Initialize the random number generator. */
  srand((unsigned)magic_randomseed);
#endif /* LWIP_RAND */
}
 8011f94:	bf00      	nop
 8011f96:	bd80      	pop	{r7, pc}
 8011f98:	20000744 	.word	0x20000744

08011f9c <magic_randomize>:
 * this function is called at *truly random* times by the polling
 * and network functions.  Here we only get 16 bits of new random
 * value but we use the previous value to randomize the other 16
 * bits.
 */
void magic_randomize(void) {
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	af00      	add	r7, sp, #0
    magic_init();
    /* The initialization function also updates the seed. */
    return;
  }
#endif /* LWIP_RAND */
  magic_randomseed += sys_jiffies();
 8011fa0:	f7ef ff9c 	bl	8001edc <sys_jiffies>
 8011fa4:	4602      	mov	r2, r0
 8011fa6:	4b03      	ldr	r3, [pc, #12]	; (8011fb4 <magic_randomize+0x18>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	4413      	add	r3, r2
 8011fac:	4a01      	ldr	r2, [pc, #4]	; (8011fb4 <magic_randomize+0x18>)
 8011fae:	6013      	str	r3, [r2, #0]
}
 8011fb0:	bf00      	nop
 8011fb2:	bd80      	pop	{r7, pc}
 8011fb4:	20000744 	.word	0x20000744

08011fb8 <magic>:
 * Alternatively, use LWIP_RAND if available, but we do not assume
 * it is returning 32 bits of random data because it is probably
 * going to be defined to directly return the rand() value. For
 * example, LCP magic numbers are 32-bit random values.
 */
u32_t magic(void) {
 8011fb8:	b598      	push	{r3, r4, r7, lr}
 8011fba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  return (LWIP_RAND() << 16) + LWIP_RAND() + magic_randomseed;
 8011fbc:	f7ef ff96 	bl	8001eec <lwip_port_rand>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	041c      	lsls	r4, r3, #16
 8011fc4:	f7ef ff92 	bl	8001eec <lwip_port_rand>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	18e2      	adds	r2, r4, r3
 8011fcc:	4b02      	ldr	r3, [pc, #8]	; (8011fd8 <magic+0x20>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	4413      	add	r3, r2
#else /* LWIP_RAND */
  return ((u32_t)rand() << 16) + (u32_t)rand() + magic_randomseed;
#endif /* LWIP_RAND */
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	bd98      	pop	{r3, r4, r7, pc}
 8011fd6:	bf00      	nop
 8011fd8:	20000744 	.word	0x20000744

08011fdc <ppp_connect>:
 * the connection.
 *
 * If this port connects to a modem, the modem connection must be
 * established before calling this.
 */
err_t ppp_connect(ppp_pcb *pcb, u16_t holdoff) {
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b082      	sub	sp, #8
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
 8011fe4:	460b      	mov	r3, r1
 8011fe6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb->phase != PPP_PHASE_DEAD) {
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d002      	beq.n	8011ff8 <ppp_connect+0x1c>
    return ERR_ALREADY;
 8011ff2:	f06f 0308 	mvn.w	r3, #8
 8011ff6:	e018      	b.n	801202a <ppp_connect+0x4e>
  }

  PPPDEBUG(LOG_DEBUG, ("ppp_connect[%d]: holdoff=%d\n", pcb->netif->num, holdoff));

  magic_randomize();
 8011ff8:	f7ff ffd0 	bl	8011f9c <magic_randomize>

  if (holdoff == 0) {
 8011ffc:	887b      	ldrh	r3, [r7, #2]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d104      	bne.n	801200c <ppp_connect+0x30>
    ppp_do_connect(pcb);
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f000 f818 	bl	8012038 <ppp_do_connect>
    return ERR_OK;
 8012008:	2300      	movs	r3, #0
 801200a:	e00e      	b.n	801202a <ppp_connect+0x4e>
  }

  new_phase(pcb, PPP_PHASE_HOLDOFF);
 801200c:	2102      	movs	r1, #2
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	f000 fa48 	bl	80124a4 <new_phase>
  sys_timeout((u32_t)(holdoff*1000), ppp_do_connect, pcb);
 8012014:	887b      	ldrh	r3, [r7, #2]
 8012016:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801201a:	fb02 f303 	mul.w	r3, r2, r3
 801201e:	687a      	ldr	r2, [r7, #4]
 8012020:	4904      	ldr	r1, [pc, #16]	; (8012034 <ppp_connect+0x58>)
 8012022:	4618      	mov	r0, r3
 8012024:	f7fb fa76 	bl	800d514 <sys_timeout>
  return ERR_OK;
 8012028:	2300      	movs	r3, #0
}
 801202a:	4618      	mov	r0, r3
 801202c:	3708      	adds	r7, #8
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}
 8012032:	bf00      	nop
 8012034:	08012039 	.word	0x08012039

08012038 <ppp_do_connect>:

/**********************************/
/*** LOCAL FUNCTION DEFINITIONS ***/
/**********************************/

static void ppp_do_connect(void *arg) {
 8012038:	b580      	push	{r7, lr}
 801203a:	b084      	sub	sp, #16
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
  ppp_pcb *pcb = (ppp_pcb*)arg;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("pcb->phase == PPP_PHASE_DEAD || pcb->phase == PPP_PHASE_HOLDOFF", pcb->phase == PPP_PHASE_DEAD || pcb->phase == PPP_PHASE_HOLDOFF);
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801204a:	2b00      	cmp	r3, #0
 801204c:	d010      	beq.n	8012070 <ppp_do_connect+0x38>
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012054:	2b02      	cmp	r3, #2
 8012056:	d00b      	beq.n	8012070 <ppp_do_connect+0x38>
 8012058:	4b0d      	ldr	r3, [pc, #52]	; (8012090 <ppp_do_connect+0x58>)
 801205a:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 801205e:	490d      	ldr	r1, [pc, #52]	; (8012094 <ppp_do_connect+0x5c>)
 8012060:	480d      	ldr	r0, [pc, #52]	; (8012098 <ppp_do_connect+0x60>)
 8012062:	f001 fdc5 	bl	8013bf0 <iprintf>
 8012066:	2000      	movs	r0, #0
 8012068:	f001 fec4 	bl	8013df4 <fflush>
 801206c:	f001 fe09 	bl	8013c82 <abort>

  new_phase(pcb, PPP_PHASE_INITIALIZE);
 8012070:	2103      	movs	r1, #3
 8012072:	68f8      	ldr	r0, [r7, #12]
 8012074:	f000 fa16 	bl	80124a4 <new_phase>
  pcb->link_cb->connect(pcb, pcb->link_ctx_cb);
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	699b      	ldr	r3, [r3, #24]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	68fa      	ldr	r2, [r7, #12]
 8012080:	69d2      	ldr	r2, [r2, #28]
 8012082:	4611      	mov	r1, r2
 8012084:	68f8      	ldr	r0, [r7, #12]
 8012086:	4798      	blx	r3
}
 8012088:	bf00      	nop
 801208a:	3710      	adds	r7, #16
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}
 8012090:	08017c70 	.word	0x08017c70
 8012094:	08017cec 	.word	0x08017cec
 8012098:	08017cb4 	.word	0x08017cb4

0801209c <ppp_netif_init_cb>:

/*
 * ppp_netif_init_cb - netif init callback
 */
static err_t ppp_netif_init_cb(struct netif *netif) {
 801209c:	b480      	push	{r7}
 801209e:	b083      	sub	sp, #12
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
  netif->name[0] = 'p';
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2270      	movs	r2, #112	; 0x70
 80120a8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = 'p';
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2270      	movs	r2, #112	; 0x70
 80120b0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if PPP_IPV4_SUPPORT
  netif->output = ppp_netif_output_ip4;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	4a04      	ldr	r2, [pc, #16]	; (80120c8 <ppp_netif_init_cb+0x2c>)
 80120b8:	615a      	str	r2, [r3, #20]
#endif /* PPP_IPV6_SUPPORT */
#if LWIP_NETIF_HOSTNAME
  /* @todo: Initialize interface hostname */
  /* netif_set_hostname(netif, "lwip"); */
#endif /* LWIP_NETIF_HOSTNAME */
  return ERR_OK;
 80120ba:	2300      	movs	r3, #0
}
 80120bc:	4618      	mov	r0, r3
 80120be:	370c      	adds	r7, #12
 80120c0:	46bd      	mov	sp, r7
 80120c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c6:	4770      	bx	lr
 80120c8:	080120cd 	.word	0x080120cd

080120cc <ppp_netif_output_ip4>:

#if PPP_IPV4_SUPPORT
/*
 * Send an IPv4 packet on the given connection.
 */
static err_t ppp_netif_output_ip4(struct netif *netif, struct pbuf *pb, const ip4_addr_t *ipaddr) {
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b084      	sub	sp, #16
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	60f8      	str	r0, [r7, #12]
 80120d4:	60b9      	str	r1, [r7, #8]
 80120d6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(ipaddr);
  return ppp_netif_output(netif, pb, PPP_IP);
 80120d8:	2221      	movs	r2, #33	; 0x21
 80120da:	68b9      	ldr	r1, [r7, #8]
 80120dc:	68f8      	ldr	r0, [r7, #12]
 80120de:	f000 f805 	bl	80120ec <ppp_netif_output>
 80120e2:	4603      	mov	r3, r0
}
 80120e4:	4618      	mov	r0, r3
 80120e6:	3710      	adds	r7, #16
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}

080120ec <ppp_netif_output>:
  LWIP_UNUSED_ARG(ipaddr);
  return ppp_netif_output(netif, pb, PPP_IPV6);
}
#endif /* PPP_IPV6_SUPPORT */

static err_t ppp_netif_output(struct netif *netif, struct pbuf *pb, u16_t protocol) {
 80120ec:	b590      	push	{r4, r7, lr}
 80120ee:	b089      	sub	sp, #36	; 0x24
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	60f8      	str	r0, [r7, #12]
 80120f4:	60b9      	str	r1, [r7, #8]
 80120f6:	4613      	mov	r3, r2
 80120f8:	80fb      	strh	r3, [r7, #6]
  ppp_pcb *pcb = (ppp_pcb*)netif->state;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	69db      	ldr	r3, [r3, #28]
 80120fe:	61bb      	str	r3, [r7, #24]
  err_t err;
  struct pbuf *fpb = NULL;
 8012100:	2300      	movs	r3, #0
 8012102:	617b      	str	r3, [r7, #20]

  /* Check that the link is up. */
  if (0
 8012104:	88fb      	ldrh	r3, [r7, #6]
 8012106:	2b21      	cmp	r3, #33	; 0x21
 8012108:	d107      	bne.n	801211a <ppp_netif_output+0x2e>
#if PPP_IPV4_SUPPORT
      || (protocol == PPP_IP && !pcb->if4_up)
 801210a:	69bb      	ldr	r3, [r7, #24]
 801210c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012110:	f003 0308 	and.w	r3, r3, #8
 8012114:	b2db      	uxtb	r3, r3
 8012116:	2b00      	cmp	r3, #0
 8012118:	d00b      	beq.n	8012132 <ppp_netif_output+0x46>
    PPPDEBUG(LOG_ERR, ("ppp_netif_output[%d]: bad CCP transmit method\n", pcb->netif->num));
    goto err_rte_drop; /* Cannot really happen, we only negotiate what we are able to do */
  }
#endif /* CCP_SUPPORT */

  err = pcb->link_cb->netif_output(pcb, pcb->link_ctx_cb, pb, protocol);
 801211a:	69bb      	ldr	r3, [r7, #24]
 801211c:	699b      	ldr	r3, [r3, #24]
 801211e:	691c      	ldr	r4, [r3, #16]
 8012120:	69bb      	ldr	r3, [r7, #24]
 8012122:	69d9      	ldr	r1, [r3, #28]
 8012124:	88fb      	ldrh	r3, [r7, #6]
 8012126:	68ba      	ldr	r2, [r7, #8]
 8012128:	69b8      	ldr	r0, [r7, #24]
 801212a:	47a0      	blx	r4
 801212c:	4603      	mov	r3, r0
 801212e:	77fb      	strb	r3, [r7, #31]
  goto err;
 8012130:	e00e      	b.n	8012150 <ppp_netif_output+0x64>
    goto err_rte_drop;
 8012132:	bf00      	nop

err_rte_drop:
  err = ERR_RTE;
 8012134:	23fc      	movs	r3, #252	; 0xfc
 8012136:	77fb      	strb	r3, [r7, #31]
  LINK_STATS_INC(link.rterr);
 8012138:	4b0b      	ldr	r3, [pc, #44]	; (8012168 <ppp_netif_output+0x7c>)
 801213a:	89db      	ldrh	r3, [r3, #14]
 801213c:	3301      	adds	r3, #1
 801213e:	b29a      	uxth	r2, r3
 8012140:	4b09      	ldr	r3, [pc, #36]	; (8012168 <ppp_netif_output+0x7c>)
 8012142:	81da      	strh	r2, [r3, #14]
  LINK_STATS_INC(link.drop);
 8012144:	4b08      	ldr	r3, [pc, #32]	; (8012168 <ppp_netif_output+0x7c>)
 8012146:	88db      	ldrh	r3, [r3, #6]
 8012148:	3301      	adds	r3, #1
 801214a:	b29a      	uxth	r2, r3
 801214c:	4b06      	ldr	r3, [pc, #24]	; (8012168 <ppp_netif_output+0x7c>)
 801214e:	80da      	strh	r2, [r3, #6]
  MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
err:
  if (fpb) {
 8012150:	697b      	ldr	r3, [r7, #20]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d002      	beq.n	801215c <ppp_netif_output+0x70>
    pbuf_free(fpb);
 8012156:	6978      	ldr	r0, [r7, #20]
 8012158:	f7f4 f82c 	bl	80061b4 <pbuf_free>
  }
  return err;
 801215c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012160:	4618      	mov	r0, r3
 8012162:	3724      	adds	r7, #36	; 0x24
 8012164:	46bd      	mov	sp, r7
 8012166:	bd90      	pop	{r4, r7, pc}
 8012168:	2000221c 	.word	0x2000221c

0801216c <ppp_init>:
/*** PRIVATE FUNCTION DEFINITIONS ***/
/************************************/

/* Initialize the PPP subsystem. */
int ppp_init(void)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	af00      	add	r7, sp, #0
#if PPPOS_SUPPORT
  LWIP_MEMPOOL_INIT(PPPOS_PCB);
 8012170:	4805      	ldr	r0, [pc, #20]	; (8012188 <ppp_init+0x1c>)
 8012172:	f7f3 f91d 	bl	80053b0 <memp_init_pool>
#endif
#if LWIP_PPP_API && LWIP_MPU_COMPATIBLE
  LWIP_MEMPOOL_INIT(PPPAPI_MSG);
#endif

  LWIP_MEMPOOL_INIT(PPP_PCB);
 8012176:	4805      	ldr	r0, [pc, #20]	; (801218c <ppp_init+0x20>)
 8012178:	f7f3 f91a 	bl	80053b0 <memp_init_pool>

  /*
   * Initialize magic number generator now so that protocols may
   * use magic numbers in initialization.
   */
  magic_init();
 801217c:	f7ff ff00 	bl	8011f80 <magic_init>

  return 0;
 8012180:	2300      	movs	r3, #0
}
 8012182:	4618      	mov	r0, r3
 8012184:	bd80      	pop	{r7, pc}
 8012186:	bf00      	nop
 8012188:	08018024 	.word	0x08018024
 801218c:	08018000 	.word	0x08018000

08012190 <ppp_new>:
 * attempt to negotiate the LCP session.
 *
 * Return a new PPP connection control block pointer
 * on success or a null pointer on failure.
 */
ppp_pcb *ppp_new(struct netif *pppif, const struct link_callbacks *callbacks, void *link_ctx_cb, ppp_link_status_cb_fn link_status_cb, void *ctx_cb) {
 8012190:	b580      	push	{r7, lr}
 8012192:	b08c      	sub	sp, #48	; 0x30
 8012194:	af04      	add	r7, sp, #16
 8012196:	60f8      	str	r0, [r7, #12]
 8012198:	60b9      	str	r1, [r7, #8]
 801219a:	607a      	str	r2, [r7, #4]
 801219c:	603b      	str	r3, [r7, #0]
  const struct protent *protp;
  int i;

  /* PPP is single-threaded: without a callback,
   * there is no way to know when the link is up. */
  if (link_status_cb == NULL) {
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d101      	bne.n	80121a8 <ppp_new+0x18>
    return NULL;
 80121a4:	2300      	movs	r3, #0
 80121a6:	e06a      	b.n	801227e <ppp_new+0xee>
  }

  pcb = (ppp_pcb*)LWIP_MEMPOOL_ALLOC(PPP_PCB);
 80121a8:	4837      	ldr	r0, [pc, #220]	; (8012288 <ppp_new+0xf8>)
 80121aa:	f7f3 f997 	bl	80054dc <memp_malloc_pool>
 80121ae:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 80121b0:	69bb      	ldr	r3, [r7, #24]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d101      	bne.n	80121ba <ppp_new+0x2a>
    return NULL;
 80121b6:	2300      	movs	r3, #0
 80121b8:	e061      	b.n	801227e <ppp_new+0xee>
  }

  memset(pcb, 0, sizeof(ppp_pcb));
 80121ba:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80121be:	2100      	movs	r1, #0
 80121c0:	69b8      	ldr	r0, [r7, #24]
 80121c2:	f001 ff3c 	bl	801403e <memset>

  /* default configuration */
#if PAP_SUPPORT
  pcb->settings.pap_timeout_time = UPAP_DEFTIMEOUT;
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	2206      	movs	r2, #6
 80121ca:	731a      	strb	r2, [r3, #12]
  pcb->settings.pap_max_transmits = UPAP_DEFTRANSMITS;
 80121cc:	69bb      	ldr	r3, [r7, #24]
 80121ce:	220a      	movs	r2, #10
 80121d0:	735a      	strb	r2, [r3, #13]
  pcb->settings.eap_timeout_time = EAP_DEFTIMEOUT;
  pcb->settings.eap_max_transmits = EAP_DEFTRANSMITS;
#endif /* PPP_SERVER */
#endif /* EAP_SUPPORT */

  pcb->settings.lcp_loopbackfail = LCP_DEFLOOPBACKFAIL;
 80121d2:	69bb      	ldr	r3, [r7, #24]
 80121d4:	220a      	movs	r2, #10
 80121d6:	749a      	strb	r2, [r3, #18]
  pcb->settings.lcp_echo_interval = LCP_ECHOINTERVAL;
 80121d8:	69bb      	ldr	r3, [r7, #24]
 80121da:	2200      	movs	r2, #0
 80121dc:	74da      	strb	r2, [r3, #19]
  pcb->settings.lcp_echo_fails = LCP_MAXECHOFAILS;
 80121de:	69bb      	ldr	r3, [r7, #24]
 80121e0:	2203      	movs	r2, #3
 80121e2:	751a      	strb	r2, [r3, #20]

  pcb->settings.fsm_timeout_time = FSM_DEFTIMEOUT;
 80121e4:	69bb      	ldr	r3, [r7, #24]
 80121e6:	2206      	movs	r2, #6
 80121e8:	739a      	strb	r2, [r3, #14]
  pcb->settings.fsm_max_conf_req_transmits = FSM_DEFMAXCONFREQS;
 80121ea:	69bb      	ldr	r3, [r7, #24]
 80121ec:	220a      	movs	r2, #10
 80121ee:	73da      	strb	r2, [r3, #15]
  pcb->settings.fsm_max_term_transmits = FSM_DEFMAXTERMREQS;
 80121f0:	69bb      	ldr	r3, [r7, #24]
 80121f2:	2202      	movs	r2, #2
 80121f4:	741a      	strb	r2, [r3, #16]
  pcb->settings.fsm_max_nak_loops = FSM_DEFMAXNAKLOOPS;
 80121f6:	69bb      	ldr	r3, [r7, #24]
 80121f8:	2205      	movs	r2, #5
 80121fa:	745a      	strb	r2, [r3, #17]

  pcb->netif = pppif;
 80121fc:	69bb      	ldr	r3, [r7, #24]
 80121fe:	68fa      	ldr	r2, [r7, #12]
 8012200:	629a      	str	r2, [r3, #40]	; 0x28
  MIB2_INIT_NETIF(pppif, snmp_ifType_ppp, 0);
  if (!netif_add(pcb->netif,
 8012202:	69bb      	ldr	r3, [r7, #24]
 8012204:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8012206:	2300      	movs	r3, #0
 8012208:	9302      	str	r3, [sp, #8]
 801220a:	4b20      	ldr	r3, [pc, #128]	; (801228c <ppp_new+0xfc>)
 801220c:	9301      	str	r3, [sp, #4]
 801220e:	69bb      	ldr	r3, [r7, #24]
 8012210:	9300      	str	r3, [sp, #0]
 8012212:	4b1f      	ldr	r3, [pc, #124]	; (8012290 <ppp_new+0x100>)
 8012214:	4a1f      	ldr	r2, [pc, #124]	; (8012294 <ppp_new+0x104>)
 8012216:	491e      	ldr	r1, [pc, #120]	; (8012290 <ppp_new+0x100>)
 8012218:	f7f3 fa28 	bl	800566c <netif_add>
 801221c:	4603      	mov	r3, r0
 801221e:	2b00      	cmp	r3, #0
 8012220:	d105      	bne.n	801222e <ppp_new+0x9e>
#if LWIP_IPV4
                 IP4_ADDR_ANY4, IP4_ADDR_BROADCAST, IP4_ADDR_ANY4,
#endif /* LWIP_IPV4 */
                 (void *)pcb, ppp_netif_init_cb, NULL)) {
    LWIP_MEMPOOL_FREE(PPP_PCB, pcb);
 8012222:	69b9      	ldr	r1, [r7, #24]
 8012224:	4818      	ldr	r0, [pc, #96]	; (8012288 <ppp_new+0xf8>)
 8012226:	f7f3 f9c5 	bl	80055b4 <memp_free_pool>
    PPPDEBUG(LOG_ERR, ("ppp_new: netif_add failed\n"));
    return NULL;
 801222a:	2300      	movs	r3, #0
 801222c:	e027      	b.n	801227e <ppp_new+0xee>
  }
  /* FIXME: user application should be responsible to call netif_set_up(),
   * remove it for next release with allowed behavior break */
  netif_set_up(pcb->netif);
 801222e:	69bb      	ldr	r3, [r7, #24]
 8012230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012232:	4618      	mov	r0, r3
 8012234:	f7f3 fbea 	bl	8005a0c <netif_set_up>

  pcb->link_cb = callbacks;
 8012238:	69bb      	ldr	r3, [r7, #24]
 801223a:	68ba      	ldr	r2, [r7, #8]
 801223c:	619a      	str	r2, [r3, #24]
  pcb->link_ctx_cb = link_ctx_cb;
 801223e:	69bb      	ldr	r3, [r7, #24]
 8012240:	687a      	ldr	r2, [r7, #4]
 8012242:	61da      	str	r2, [r3, #28]
  pcb->link_status_cb = link_status_cb;
 8012244:	69bb      	ldr	r3, [r7, #24]
 8012246:	683a      	ldr	r2, [r7, #0]
 8012248:	621a      	str	r2, [r3, #32]
  pcb->ctx_cb = ctx_cb;
 801224a:	69bb      	ldr	r3, [r7, #24]
 801224c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801224e:	625a      	str	r2, [r3, #36]	; 0x24

  /*
   * Initialize each protocol.
   */
  for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 8012250:	2300      	movs	r3, #0
 8012252:	61fb      	str	r3, [r7, #28]
 8012254:	e006      	b.n	8012264 <ppp_new+0xd4>
      (*protp->init)(pcb);
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	69b8      	ldr	r0, [r7, #24]
 801225c:	4798      	blx	r3
  for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 801225e:	69fb      	ldr	r3, [r7, #28]
 8012260:	3301      	adds	r3, #1
 8012262:	61fb      	str	r3, [r7, #28]
 8012264:	4a0c      	ldr	r2, [pc, #48]	; (8012298 <ppp_new+0x108>)
 8012266:	69fb      	ldr	r3, [r7, #28]
 8012268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801226c:	617b      	str	r3, [r7, #20]
 801226e:	697b      	ldr	r3, [r7, #20]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d1f0      	bne.n	8012256 <ppp_new+0xc6>
  }

  new_phase(pcb, PPP_PHASE_DEAD);
 8012274:	2100      	movs	r1, #0
 8012276:	69b8      	ldr	r0, [r7, #24]
 8012278:	f000 f914 	bl	80124a4 <new_phase>
  return pcb;
 801227c:	69bb      	ldr	r3, [r7, #24]
}
 801227e:	4618      	mov	r0, r3
 8012280:	3720      	adds	r7, #32
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}
 8012286:	bf00      	nop
 8012288:	08018000 	.word	0x08018000
 801228c:	0801209d 	.word	0x0801209d
 8012290:	08017e50 	.word	0x08017e50
 8012294:	08017e54 	.word	0x08017e54
 8012298:	08018014 	.word	0x08018014

0801229c <ppp_start>:

/** Initiate LCP open request */
void ppp_start(ppp_pcb *pcb) {
 801229c:	b580      	push	{r7, lr}
 801229e:	b082      	sub	sp, #8
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
#if VJ_SUPPORT
  vj_compress_init(&pcb->vj_comp);
#endif /* VJ_SUPPORT */

  /* Start protocol */
  new_phase(pcb, PPP_PHASE_ESTABLISH);
 80122a4:	2106      	movs	r1, #6
 80122a6:	6878      	ldr	r0, [r7, #4]
 80122a8:	f000 f8fc 	bl	80124a4 <new_phase>
  lcp_open(pcb);
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f7fd fd7f 	bl	800fdb0 <lcp_open>
  lcp_lowerup(pcb);
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	f7fd fdee 	bl	800fe94 <lcp_lowerup>
  PPPDEBUG(LOG_DEBUG, ("ppp_start[%d]: finished\n", pcb->netif->num));
}
 80122b8:	bf00      	nop
 80122ba:	3708      	adds	r7, #8
 80122bc:	46bd      	mov	sp, r7
 80122be:	bd80      	pop	{r7, pc}

080122c0 <ppp_link_end>:
  pcb->err_code = PPPERR_OPEN;
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
}

/** Called when link is normally down (i.e. it was asked to end) */
void ppp_link_end(ppp_pcb *pcb) {
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b082      	sub	sp, #8
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
  PPPDEBUG(LOG_DEBUG, ("ppp_link_end[%d]\n", pcb->netif->num));
  new_phase(pcb, PPP_PHASE_DEAD);
 80122c8:	2100      	movs	r1, #0
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f000 f8ea 	bl	80124a4 <new_phase>
  if (pcb->err_code == PPPERR_NONE) {
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d103      	bne.n	80122e2 <ppp_link_end+0x22>
    pcb->err_code = PPPERR_CONNECT;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2206      	movs	r2, #6
 80122de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	6a1b      	ldr	r3, [r3, #32]
 80122e6:	687a      	ldr	r2, [r7, #4]
 80122e8:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80122ec:	4611      	mov	r1, r2
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	4798      	blx	r3
}
 80122f6:	bf00      	nop
 80122f8:	3708      	adds	r7, #8
 80122fa:	46bd      	mov	sp, r7
 80122fc:	bd80      	pop	{r7, pc}
	...

08012300 <ppp_input>:

/*
 * Pass the processed input packet to the appropriate handler.
 * This function and all handlers run in the context of the tcpip_thread
 */
void ppp_input(ppp_pcb *pcb, struct pbuf *pb) {
 8012300:	b580      	push	{r7, lr}
 8012302:	b086      	sub	sp, #24
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	6039      	str	r1, [r7, #0]
  u16_t protocol;
#if PPP_DEBUG && PPP_PROTOCOLNAME
  const char *pname;
#endif /* PPP_DEBUG && PPP_PROTOCOLNAME */
  LWIP_ASSERT("pcb->phase >= PPP_PHASE_ESTABLISH && pcb->phase <= PPP_PHASE_TERMINATE",
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012310:	2b05      	cmp	r3, #5
 8012312:	d904      	bls.n	801231e <ppp_input+0x1e>
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801231a:	2b0b      	cmp	r3, #11
 801231c:	d90b      	bls.n	8012336 <ppp_input+0x36>
 801231e:	4b4b      	ldr	r3, [pc, #300]	; (801244c <ppp_input+0x14c>)
 8012320:	f240 3211 	movw	r2, #785	; 0x311
 8012324:	494a      	ldr	r1, [pc, #296]	; (8012450 <ppp_input+0x150>)
 8012326:	484b      	ldr	r0, [pc, #300]	; (8012454 <ppp_input+0x154>)
 8012328:	f001 fc62 	bl	8013bf0 <iprintf>
 801232c:	2000      	movs	r0, #0
 801232e:	f001 fd61 	bl	8013df4 <fflush>
 8012332:	f001 fca6 	bl	8013c82 <abort>
    pcb->phase >= PPP_PHASE_ESTABLISH && pcb->phase <= PPP_PHASE_TERMINATE);

  magic_randomize();
 8012336:	f7ff fe31 	bl	8011f9c <magic_randomize>

  if (pb->len < 2) {
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	895b      	ldrh	r3, [r3, #10]
 801233e:	2b01      	cmp	r3, #1
 8012340:	d96e      	bls.n	8012420 <ppp_input+0x120>
    PPPDEBUG(LOG_ERR, ("ppp_input[%d]: packet too short\n", pcb->netif->num));
    goto drop;
  }
  protocol = (((u8_t *)pb->payload)[0] << 8) | ((u8_t*)pb->payload)[1];
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	685b      	ldr	r3, [r3, #4]
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	021b      	lsls	r3, r3, #8
 801234a:	b21a      	sxth	r2, r3
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	685b      	ldr	r3, [r3, #4]
 8012350:	3301      	adds	r3, #1
 8012352:	781b      	ldrb	r3, [r3, #0]
 8012354:	b21b      	sxth	r3, r3
 8012356:	4313      	orrs	r3, r2
 8012358:	b21b      	sxth	r3, r3
 801235a:	827b      	strh	r3, [r7, #18]

#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "rcvd", (unsigned char *)pb->payload, pb->len);
#endif /* PRINTPKT_SUPPORT */

  pbuf_remove_header(pb, sizeof(protocol));
 801235c:	2102      	movs	r1, #2
 801235e:	6838      	ldr	r0, [r7, #0]
 8012360:	f7f3 fed2 	bl	8006108 <pbuf_remove_header>

  LINK_STATS_INC(link.recv);
 8012364:	4b3c      	ldr	r3, [pc, #240]	; (8012458 <ppp_input+0x158>)
 8012366:	885b      	ldrh	r3, [r3, #2]
 8012368:	3301      	adds	r3, #1
 801236a:	b29a      	uxth	r2, r3
 801236c:	4b3a      	ldr	r3, [pc, #232]	; (8012458 <ppp_input+0x158>)
 801236e:	805a      	strh	r2, [r3, #2]
  MIB2_STATS_NETIF_ADD(pcb->netif, ifinoctets, pb->tot_len);

  /*
   * Toss all non-LCP packets unless LCP is OPEN.
   */
  if (protocol != PPP_LCP && pcb->lcp_fsm.state != PPP_FSM_OPENED) {
 8012370:	8a7b      	ldrh	r3, [r7, #18]
 8012372:	f24c 0221 	movw	r2, #49185	; 0xc021
 8012376:	4293      	cmp	r3, r2
 8012378:	d004      	beq.n	8012384 <ppp_input+0x84>
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012380:	2b09      	cmp	r3, #9
 8012382:	d14f      	bne.n	8012424 <ppp_input+0x124>

  /*
   * Until we get past the authentication phase, toss all packets
   * except LCP, LQR and authentication packets.
   */
  if (pcb->phase <= PPP_PHASE_AUTHENTICATE
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801238a:	2b07      	cmp	r3, #7
 801238c:	d809      	bhi.n	80123a2 <ppp_input+0xa2>
   && !(protocol == PPP_LCP
 801238e:	8a7b      	ldrh	r3, [r7, #18]
 8012390:	f24c 0221 	movw	r2, #49185	; 0xc021
 8012394:	4293      	cmp	r3, r2
 8012396:	d004      	beq.n	80123a2 <ppp_input+0xa2>
 8012398:	8a7b      	ldrh	r3, [r7, #18]
 801239a:	f24c 0223 	movw	r2, #49187	; 0xc023
 801239e:	4293      	cmp	r3, r2
 80123a0:	d142      	bne.n	8012428 <ppp_input+0x128>
      pbuf_remove_header(pb, 2);
    }
  }
#endif /* CCP_SUPPORT */

  switch (protocol) {
 80123a2:	8a7b      	ldrh	r3, [r7, #18]
 80123a4:	2b21      	cmp	r3, #33	; 0x21
 80123a6:	d106      	bne.n	80123b6 <ppp_input+0xb6>

#if PPP_IPV4_SUPPORT
    case PPP_IP:            /* Internet Protocol */
      PPPDEBUG(LOG_INFO, ("ppp_input[%d]: ip in pbuf len=%d\n", pcb->netif->num, pb->tot_len));
      ip4_input(pb, pcb->netif);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123ac:	4619      	mov	r1, r3
 80123ae:	6838      	ldr	r0, [r7, #0]
 80123b0:	f7f2 f800 	bl	80043b4 <ip4_input>
      return;
 80123b4:	e046      	b.n	8012444 <ppp_input+0x144>
      const struct protent *protp;

      /*
       * Upcall the proper protocol input routine.
       */
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 80123b6:	2300      	movs	r3, #0
 80123b8:	617b      	str	r3, [r7, #20]
 80123ba:	e019      	b.n	80123f0 <ppp_input+0xf0>
        if (protp->protocol == protocol) {
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	881b      	ldrh	r3, [r3, #0]
 80123c0:	8a7a      	ldrh	r2, [r7, #18]
 80123c2:	429a      	cmp	r2, r3
 80123c4:	d111      	bne.n	80123ea <ppp_input+0xea>
          pb = pbuf_coalesce(pb, PBUF_RAW);
 80123c6:	2100      	movs	r1, #0
 80123c8:	6838      	ldr	r0, [r7, #0]
 80123ca:	f7f4 fa5c 	bl	8006886 <pbuf_coalesce>
 80123ce:	6038      	str	r0, [r7, #0]
          if (pb->next != NULL) {
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d129      	bne.n	801242c <ppp_input+0x12c>
            PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_coalesce failed), len=%d\n", pcb->netif->num, pb->tot_len));
            goto drop;
          }
          (*protp->input)(pcb, (u8_t*)pb->payload, pb->len);
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	689b      	ldr	r3, [r3, #8]
 80123dc:	683a      	ldr	r2, [r7, #0]
 80123de:	6851      	ldr	r1, [r2, #4]
 80123e0:	683a      	ldr	r2, [r7, #0]
 80123e2:	8952      	ldrh	r2, [r2, #10]
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	4798      	blx	r3
          goto out;
 80123e8:	e029      	b.n	801243e <ppp_input+0x13e>
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	3301      	adds	r3, #1
 80123ee:	617b      	str	r3, [r7, #20]
 80123f0:	4a1a      	ldr	r2, [pc, #104]	; (801245c <ppp_input+0x15c>)
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123f8:	60fb      	str	r3, [r7, #12]
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d1dd      	bne.n	80123bc <ppp_input+0xbc>
      } else
#endif /* PPP_PROTOCOLNAME */
        ppp_warn(("Unsupported protocol 0x%x received", protocol));
#endif /* PPP_DEBUG */

      if (pbuf_add_header(pb, sizeof(protocol))) {
 8012400:	2102      	movs	r1, #2
 8012402:	6838      	ldr	r0, [r7, #0]
 8012404:	f7f3 fe70 	bl	80060e8 <pbuf_add_header>
 8012408:	4603      	mov	r3, r0
 801240a:	2b00      	cmp	r3, #0
 801240c:	d110      	bne.n	8012430 <ppp_input+0x130>
        PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_add_header failed)\n", pcb->netif->num));
        goto drop;
      }
      lcp_sprotrej(pcb, (u8_t*)pb->payload, pb->len);
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	6859      	ldr	r1, [r3, #4]
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	895b      	ldrh	r3, [r3, #10]
 8012416:	461a      	mov	r2, r3
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f7fd feb0 	bl	801017e <lcp_sprotrej>
    }
    break;
 801241e:	e008      	b.n	8012432 <ppp_input+0x132>
    goto drop;
 8012420:	bf00      	nop
 8012422:	e006      	b.n	8012432 <ppp_input+0x132>
    goto drop;
 8012424:	bf00      	nop
 8012426:	e004      	b.n	8012432 <ppp_input+0x132>
    goto drop;
 8012428:	bf00      	nop
 801242a:	e002      	b.n	8012432 <ppp_input+0x132>
            goto drop;
 801242c:	bf00      	nop
 801242e:	e000      	b.n	8012432 <ppp_input+0x132>
        goto drop;
 8012430:	bf00      	nop
  }

drop:
  LINK_STATS_INC(link.drop);
 8012432:	4b09      	ldr	r3, [pc, #36]	; (8012458 <ppp_input+0x158>)
 8012434:	88db      	ldrh	r3, [r3, #6]
 8012436:	3301      	adds	r3, #1
 8012438:	b29a      	uxth	r2, r3
 801243a:	4b07      	ldr	r3, [pc, #28]	; (8012458 <ppp_input+0x158>)
 801243c:	80da      	strh	r2, [r3, #6]
  MIB2_STATS_NETIF_INC(pcb->netif, ifindiscards);

out:
  pbuf_free(pb);
 801243e:	6838      	ldr	r0, [r7, #0]
 8012440:	f7f3 feb8 	bl	80061b4 <pbuf_free>
}
 8012444:	3718      	adds	r7, #24
 8012446:	46bd      	mov	sp, r7
 8012448:	bd80      	pop	{r7, pc}
 801244a:	bf00      	nop
 801244c:	08017c70 	.word	0x08017c70
 8012450:	08017d2c 	.word	0x08017d2c
 8012454:	08017cb4 	.word	0x08017cb4
 8012458:	2000221c 	.word	0x2000221c
 801245c:	08018014 	.word	0x08018014

08012460 <ppp_write>:
 *
 * IPv4 and IPv6 packets from lwIP are sent, respectively,
 * with ppp_netif_output_ip4() and ppp_netif_output_ip6()
 * functions (which are callbacks of the netif PPP interface).
 */
err_t ppp_write(ppp_pcb *pcb, struct pbuf *p) {
 8012460:	b580      	push	{r7, lr}
 8012462:	b082      	sub	sp, #8
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
 8012468:	6039      	str	r1, [r7, #0]
#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "sent", (unsigned char *)p->payload+2, p->len-2);
#endif /* PRINTPKT_SUPPORT */
  return pcb->link_cb->write(pcb, pcb->link_ctx_cb, p);
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	699b      	ldr	r3, [r3, #24]
 801246e:	68db      	ldr	r3, [r3, #12]
 8012470:	687a      	ldr	r2, [r7, #4]
 8012472:	69d1      	ldr	r1, [r2, #28]
 8012474:	683a      	ldr	r2, [r7, #0]
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	4798      	blx	r3
 801247a:	4603      	mov	r3, r0
}
 801247c:	4618      	mov	r0, r3
 801247e:	3708      	adds	r7, #8
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <ppp_link_terminated>:

void ppp_link_terminated(ppp_pcb *pcb) {
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]\n", pcb->netif->num));
  pcb->link_cb->disconnect(pcb, pcb->link_ctx_cb);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	699b      	ldr	r3, [r3, #24]
 8012490:	685b      	ldr	r3, [r3, #4]
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	69d2      	ldr	r2, [r2, #28]
 8012496:	4611      	mov	r1, r2
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	4798      	blx	r3
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]: finished.\n", pcb->netif->num));
}
 801249c:	bf00      	nop
 801249e:	3708      	adds	r7, #8
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}

080124a4 <new_phase>:
 */

/*
 * new_phase - signal the start of a new phase of pppd's operation.
 */
void new_phase(ppp_pcb *pcb, int p) {
 80124a4:	b480      	push	{r7}
 80124a6:	b083      	sub	sp, #12
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
 80124ac:	6039      	str	r1, [r7, #0]
  pcb->phase = p;
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	b2da      	uxtb	r2, r3
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#if PPP_NOTIFY_PHASE
  if (pcb->notify_phase_cb != NULL) {
    pcb->notify_phase_cb(pcb, p, pcb->ctx_cb);
  }
#endif /* PPP_NOTIFY_PHASE */
}
 80124b8:	bf00      	nop
 80124ba:	370c      	adds	r7, #12
 80124bc:	46bd      	mov	sp, r7
 80124be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c2:	4770      	bx	lr

080124c4 <ppp_send_config>:

/*
 * ppp_send_config - configure the transmit-side characteristics of
 * the ppp interface.
 */
int ppp_send_config(ppp_pcb *pcb, int mtu, u32_t accm, int pcomp, int accomp) {
 80124c4:	b590      	push	{r4, r7, lr}
 80124c6:	b087      	sub	sp, #28
 80124c8:	af02      	add	r7, sp, #8
 80124ca:	60f8      	str	r0, [r7, #12]
 80124cc:	60b9      	str	r1, [r7, #8]
 80124ce:	607a      	str	r2, [r7, #4]
 80124d0:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(mtu);

  PPPDEBUG(LOG_INFO, ("ppp_send_config[%d]\n", pcb->netif->num));

  if (pcb->link_cb->send_config) {
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	699b      	ldr	r3, [r3, #24]
 80124d6:	695b      	ldr	r3, [r3, #20]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d00a      	beq.n	80124f2 <ppp_send_config+0x2e>
    pcb->link_cb->send_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	699b      	ldr	r3, [r3, #24]
 80124e0:	695c      	ldr	r4, [r3, #20]
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	69d9      	ldr	r1, [r3, #28]
 80124e6:	6a3b      	ldr	r3, [r7, #32]
 80124e8:	9300      	str	r3, [sp, #0]
 80124ea:	683b      	ldr	r3, [r7, #0]
 80124ec:	687a      	ldr	r2, [r7, #4]
 80124ee:	68f8      	ldr	r0, [r7, #12]
 80124f0:	47a0      	blx	r4
  }

  return 0;
 80124f2:	2300      	movs	r3, #0
}
 80124f4:	4618      	mov	r0, r3
 80124f6:	3714      	adds	r7, #20
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd90      	pop	{r4, r7, pc}

080124fc <ppp_recv_config>:

/*
 * ppp_recv_config - configure the receive-side characteristics of
 * the ppp interface.
 */
int ppp_recv_config(ppp_pcb *pcb, int mru, u32_t accm, int pcomp, int accomp) {
 80124fc:	b590      	push	{r4, r7, lr}
 80124fe:	b087      	sub	sp, #28
 8012500:	af02      	add	r7, sp, #8
 8012502:	60f8      	str	r0, [r7, #12]
 8012504:	60b9      	str	r1, [r7, #8]
 8012506:	607a      	str	r2, [r7, #4]
 8012508:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(mru);

  PPPDEBUG(LOG_INFO, ("ppp_recv_config[%d]\n", pcb->netif->num));

  if (pcb->link_cb->recv_config) {
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	699b      	ldr	r3, [r3, #24]
 801250e:	699b      	ldr	r3, [r3, #24]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d00a      	beq.n	801252a <ppp_recv_config+0x2e>
    pcb->link_cb->recv_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	699b      	ldr	r3, [r3, #24]
 8012518:	699c      	ldr	r4, [r3, #24]
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	69d9      	ldr	r1, [r3, #28]
 801251e:	6a3b      	ldr	r3, [r7, #32]
 8012520:	9300      	str	r3, [sp, #0]
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	687a      	ldr	r2, [r7, #4]
 8012526:	68f8      	ldr	r0, [r7, #12]
 8012528:	47a0      	blx	r4
  }

  return 0;
 801252a:	2300      	movs	r3, #0
}
 801252c:	4618      	mov	r0, r3
 801252e:	3714      	adds	r7, #20
 8012530:	46bd      	mov	sp, r7
 8012532:	bd90      	pop	{r4, r7, pc}

08012534 <sifaddr>:

#if PPP_IPV4_SUPPORT
/*
 * sifaddr - Config the interface IP addresses and netmask.
 */
int sifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr, u32_t netmask) {
 8012534:	b580      	push	{r7, lr}
 8012536:	b088      	sub	sp, #32
 8012538:	af00      	add	r7, sp, #0
 801253a:	60f8      	str	r0, [r7, #12]
 801253c:	60b9      	str	r1, [r7, #8]
 801253e:	607a      	str	r2, [r7, #4]
 8012540:	603b      	str	r3, [r7, #0]
  ip4_addr_t ip, nm, gw;

  ip4_addr_set_u32(&ip, our_adr);
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	61fb      	str	r3, [r7, #28]
  ip4_addr_set_u32(&nm, netmask);
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	61bb      	str	r3, [r7, #24]
  ip4_addr_set_u32(&gw, his_adr);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	617b      	str	r3, [r7, #20]
  netif_set_addr(pcb->netif, &ip, &nm, &gw);
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8012552:	f107 0314 	add.w	r3, r7, #20
 8012556:	f107 0218 	add.w	r2, r7, #24
 801255a:	f107 011c 	add.w	r1, r7, #28
 801255e:	f7f3 f9fb 	bl	8005958 <netif_set_addr>
  return 1;
 8012562:	2301      	movs	r3, #1
}
 8012564:	4618      	mov	r0, r3
 8012566:	3720      	adds	r7, #32
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}

0801256c <cifaddr>:
/********************************************************************
 *
 * cifaddr - Clear the interface IP addresses, and delete routes
 * through the interface if possible.
 */
int cifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr) {
 801256c:	b580      	push	{r7, lr}
 801256e:	b084      	sub	sp, #16
 8012570:	af00      	add	r7, sp, #0
 8012572:	60f8      	str	r0, [r7, #12]
 8012574:	60b9      	str	r1, [r7, #8]
 8012576:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(our_adr);
  LWIP_UNUSED_ARG(his_adr);

  netif_set_addr(pcb->netif, IP4_ADDR_ANY4, IP4_ADDR_BROADCAST, IP4_ADDR_ANY4);
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801257c:	4b04      	ldr	r3, [pc, #16]	; (8012590 <cifaddr+0x24>)
 801257e:	4a05      	ldr	r2, [pc, #20]	; (8012594 <cifaddr+0x28>)
 8012580:	4903      	ldr	r1, [pc, #12]	; (8012590 <cifaddr+0x24>)
 8012582:	f7f3 f9e9 	bl	8005958 <netif_set_addr>
  return 1;
 8012586:	2301      	movs	r3, #1
}
 8012588:	4618      	mov	r0, r3
 801258a:	3710      	adds	r7, #16
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}
 8012590:	08017e50 	.word	0x08017e50
 8012594:	08017e54 	.word	0x08017e54

08012598 <sifup>:
#endif /* VJ_SUPPORT */

/*
 * sifup - Config the interface up and enable IP packets to pass.
 */
int sifup(ppp_pcb *pcb) {
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
  pcb->if4_up = 1;
 80125a0:	687a      	ldr	r2, [r7, #4]
 80125a2:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 80125a6:	f043 0308 	orr.w	r3, r3, #8
 80125aa:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  pcb->err_code = PPPERR_NONE;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2200      	movs	r2, #0
 80125b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif_set_link_up(pcb->netif);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7f3 fa84 	bl	8005ac8 <netif_set_link_up>

  PPPDEBUG(LOG_DEBUG, ("sifup[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	6a1b      	ldr	r3, [r3, #32]
 80125c4:	687a      	ldr	r2, [r7, #4]
 80125c6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80125ca:	4611      	mov	r1, r2
 80125cc:	687a      	ldr	r2, [r7, #4]
 80125ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	4798      	blx	r3
  return 1;
 80125d4:	2301      	movs	r3, #1
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	3708      	adds	r7, #8
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}

080125de <sifdown>:
/********************************************************************
 *
 * sifdown - Disable the indicated protocol and config the interface
 *           down if there are no remaining protocols.
 */
int sifdown(ppp_pcb *pcb) {
 80125de:	b580      	push	{r7, lr}
 80125e0:	b082      	sub	sp, #8
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	6078      	str	r0, [r7, #4]

  pcb->if4_up = 0;
 80125e6:	687a      	ldr	r2, [r7, #4]
 80125e8:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 80125ec:	f36f 03c3 	bfc	r3, #3, #1
 80125f0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   /* set the interface down if IPv6 is down as well */
   && !pcb->if6_up
#endif /* PPP_IPV6_SUPPORT */
  ) {
    /* make sure the netif link callback is called */
    netif_set_link_down(pcb->netif);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125f8:	4618      	mov	r0, r3
 80125fa:	f7f3 fa91 	bl	8005b20 <netif_set_link_down>
  }
  PPPDEBUG(LOG_DEBUG, ("sifdown[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
  return 1;
 80125fe:	2301      	movs	r3, #1
}
 8012600:	4618      	mov	r0, r3
 8012602:	3708      	adds	r7, #8
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}

08012608 <get_mask>:
 * Here we scan through the system's list of interfaces, looking for
 * any non-point-to-point interfaces which might appear to be on the same
 * network as `addr'.  If we find any, we OR in their netmask to the
 * user-specified netmask.
 */
u32_t get_mask(u32_t addr) {
 8012608:	b480      	push	{r7}
 801260a:	b083      	sub	sp, #12
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
   */
  /* return mask; */
  return mask;
#endif /* 0 */
  LWIP_UNUSED_ARG(addr);
  return IPADDR_BROADCAST;
 8012610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012614:	4618      	mov	r0, r3
 8012616:	370c      	adds	r7, #12
 8012618:	46bd      	mov	sp, r7
 801261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261e:	4770      	bx	lr

08012620 <ppp_netif_set_mtu>:
#endif /* DEMAND_SUPPORT */

/*
 * ppp_netif_set_mtu - set the MTU on the PPP network interface.
 */
void ppp_netif_set_mtu(ppp_pcb *pcb, int mtu) {
 8012620:	b480      	push	{r7}
 8012622:	b083      	sub	sp, #12
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	6039      	str	r1, [r7, #0]

  pcb->netif->mtu = mtu;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801262e:	683a      	ldr	r2, [r7, #0]
 8012630:	b292      	uxth	r2, r2
 8012632:	841a      	strh	r2, [r3, #32]
#if PPP_IPV6_SUPPORT && LWIP_ND6_ALLOW_RA_UPDATES
  pcb->netif->mtu6 = mtu;
#endif /* PPP_IPV6_SUPPORT && LWIP_ND6_ALLOW_RA_UPDATES */
  PPPDEBUG(LOG_INFO, ("ppp_netif_set_mtu[%d]: mtu=%d\n", pcb->netif->num, mtu));
}
 8012634:	bf00      	nop
 8012636:	370c      	adds	r7, #12
 8012638:	46bd      	mov	sp, r7
 801263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263e:	4770      	bx	lr

08012640 <pppos_create>:
 *
 * Return 0 on success, an error code on failure.
 */
ppp_pcb *pppos_create(struct netif *pppif, pppos_output_cb_fn output_cb,
       ppp_link_status_cb_fn link_status_cb, void *ctx_cb)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b088      	sub	sp, #32
 8012644:	af02      	add	r7, sp, #8
 8012646:	60f8      	str	r0, [r7, #12]
 8012648:	60b9      	str	r1, [r7, #8]
 801264a:	607a      	str	r2, [r7, #4]
 801264c:	603b      	str	r3, [r7, #0]
  pppos_pcb *pppos;
  ppp_pcb *ppp;
  LWIP_ASSERT_CORE_LOCKED();

  pppos = (pppos_pcb *)LWIP_MEMPOOL_ALLOC(PPPOS_PCB);
 801264e:	4815      	ldr	r0, [pc, #84]	; (80126a4 <pppos_create+0x64>)
 8012650:	f7f2 ff44 	bl	80054dc <memp_malloc_pool>
 8012654:	6178      	str	r0, [r7, #20]
  if (pppos == NULL) {
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d101      	bne.n	8012660 <pppos_create+0x20>
    return NULL;
 801265c:	2300      	movs	r3, #0
 801265e:	e01d      	b.n	801269c <pppos_create+0x5c>
  }

  ppp = ppp_new(pppif, &pppos_callbacks, pppos, link_status_cb, ctx_cb);
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	9300      	str	r3, [sp, #0]
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	697a      	ldr	r2, [r7, #20]
 8012668:	490f      	ldr	r1, [pc, #60]	; (80126a8 <pppos_create+0x68>)
 801266a:	68f8      	ldr	r0, [r7, #12]
 801266c:	f7ff fd90 	bl	8012190 <ppp_new>
 8012670:	6138      	str	r0, [r7, #16]
  if (ppp == NULL) {
 8012672:	693b      	ldr	r3, [r7, #16]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d105      	bne.n	8012684 <pppos_create+0x44>
    LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
 8012678:	6979      	ldr	r1, [r7, #20]
 801267a:	480a      	ldr	r0, [pc, #40]	; (80126a4 <pppos_create+0x64>)
 801267c:	f7f2 ff9a 	bl	80055b4 <memp_free_pool>
    return NULL;
 8012680:	2300      	movs	r3, #0
 8012682:	e00b      	b.n	801269c <pppos_create+0x5c>
  }

  memset(pppos, 0, sizeof(pppos_pcb));
 8012684:	2260      	movs	r2, #96	; 0x60
 8012686:	2100      	movs	r1, #0
 8012688:	6978      	ldr	r0, [r7, #20]
 801268a:	f001 fcd8 	bl	801403e <memset>
  pppos->ppp = ppp;
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	693a      	ldr	r2, [r7, #16]
 8012692:	601a      	str	r2, [r3, #0]
  pppos->output_cb = output_cb;
 8012694:	697b      	ldr	r3, [r7, #20]
 8012696:	68ba      	ldr	r2, [r7, #8]
 8012698:	605a      	str	r2, [r3, #4]
  return ppp;
 801269a:	693b      	ldr	r3, [r7, #16]
}
 801269c:	4618      	mov	r0, r3
 801269e:	3718      	adds	r7, #24
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}
 80126a4:	08018024 	.word	0x08018024
 80126a8:	08018038 	.word	0x08018038

080126ac <pppos_write>:

/* Called by PPP core */
static err_t
pppos_write(ppp_pcb *ppp, void *ctx, struct pbuf *p)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b08c      	sub	sp, #48	; 0x30
 80126b0:	af02      	add	r7, sp, #8
 80126b2:	60f8      	str	r0, [r7, #12]
 80126b4:	60b9      	str	r1, [r7, #8]
 80126b6:	607a      	str	r2, [r7, #4]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	61fb      	str	r3, [r7, #28]
  err_t err;
  LWIP_UNUSED_ARG(ppp);

  /* Grab an output buffer. Assume PBUF_POOL_BUFSIZE is an acceptable
   * chunk size for Tx as well. */
  nb = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_RAM);
 80126bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80126c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80126c4:	2000      	movs	r0, #0
 80126c6:	f7f3 fb0b 	bl	8005ce0 <pbuf_alloc>
 80126ca:	61b8      	str	r0, [r7, #24]
  if (nb == NULL) {
 80126cc:	69bb      	ldr	r3, [r7, #24]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d111      	bne.n	80126f6 <pppos_write+0x4a>
    PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: alloc fail\n", ppp->netif->num));
    LINK_STATS_INC(link.memerr);
 80126d2:	4b34      	ldr	r3, [pc, #208]	; (80127a4 <pppos_write+0xf8>)
 80126d4:	899b      	ldrh	r3, [r3, #12]
 80126d6:	3301      	adds	r3, #1
 80126d8:	b29a      	uxth	r2, r3
 80126da:	4b32      	ldr	r3, [pc, #200]	; (80127a4 <pppos_write+0xf8>)
 80126dc:	819a      	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
 80126de:	4b31      	ldr	r3, [pc, #196]	; (80127a4 <pppos_write+0xf8>)
 80126e0:	88db      	ldrh	r3, [r3, #6]
 80126e2:	3301      	adds	r3, #1
 80126e4:	b29a      	uxth	r2, r3
 80126e6:	4b2f      	ldr	r3, [pc, #188]	; (80127a4 <pppos_write+0xf8>)
 80126e8:	80da      	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
    pbuf_free(p);
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f7f3 fd62 	bl	80061b4 <pbuf_free>
    return ERR_MEM;
 80126f0:	f04f 33ff 	mov.w	r3, #4294967295
 80126f4:	e051      	b.n	801279a <pppos_write+0xee>
  }

  /* Empty the buffer */
  nb->len = 0;
 80126f6:	69bb      	ldr	r3, [r7, #24]
 80126f8:	2200      	movs	r2, #0
 80126fa:	815a      	strh	r2, [r3, #10]
  /* Set nb->tot_len to actual payload length */
  nb->tot_len = p->len;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	895a      	ldrh	r2, [r3, #10]
 8012700:	69bb      	ldr	r3, [r7, #24]
 8012702:	811a      	strh	r2, [r3, #8]

  /* If the link has been idle, we'll send a fresh flag character to
   * flush any noise. */
  err = ERR_OK;
 8012704:	2300      	movs	r3, #0
 8012706:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
 801270a:	f7ef fbd9 	bl	8001ec0 <sys_now>
 801270e:	4602      	mov	r2, r0
 8012710:	69fb      	ldr	r3, [r7, #28]
 8012712:	689b      	ldr	r3, [r3, #8]
 8012714:	1ad3      	subs	r3, r2, r3
 8012716:	2b63      	cmp	r3, #99	; 0x63
 8012718:	d90d      	bls.n	8012736 <pppos_write+0x8a>
    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 801271a:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 801271e:	2300      	movs	r3, #0
 8012720:	9301      	str	r3, [sp, #4]
 8012722:	2300      	movs	r3, #0
 8012724:	9300      	str	r3, [sp, #0]
 8012726:	237e      	movs	r3, #126	; 0x7e
 8012728:	69ba      	ldr	r2, [r7, #24]
 801272a:	69f8      	ldr	r0, [r7, #28]
 801272c:	f000 fbf0 	bl	8012f10 <pppos_output_append>
 8012730:	4603      	mov	r3, r0
 8012732:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  }

  /* Load output buffer. */
  fcs_out = PPP_INITFCS;
 8012736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801273a:	82fb      	strh	r3, [r7, #22]
  s = (u8_t*)p->payload;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	685b      	ldr	r3, [r3, #4]
 8012740:	627b      	str	r3, [r7, #36]	; 0x24
  n = p->len;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	895b      	ldrh	r3, [r3, #10]
 8012746:	847b      	strh	r3, [r7, #34]	; 0x22
  while (n-- > 0) {
 8012748:	e012      	b.n	8012770 <pppos_write+0xc4>
    err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 801274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801274c:	1c5a      	adds	r2, r3, #1
 801274e:	627a      	str	r2, [r7, #36]	; 0x24
 8012750:	781a      	ldrb	r2, [r3, #0]
 8012752:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 8012756:	f107 0316 	add.w	r3, r7, #22
 801275a:	9301      	str	r3, [sp, #4]
 801275c:	2301      	movs	r3, #1
 801275e:	9300      	str	r3, [sp, #0]
 8012760:	4613      	mov	r3, r2
 8012762:	69ba      	ldr	r2, [r7, #24]
 8012764:	69f8      	ldr	r0, [r7, #28]
 8012766:	f000 fbd3 	bl	8012f10 <pppos_output_append>
 801276a:	4603      	mov	r3, r0
 801276c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  while (n-- > 0) {
 8012770:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012772:	1e5a      	subs	r2, r3, #1
 8012774:	847a      	strh	r2, [r7, #34]	; 0x22
 8012776:	2b00      	cmp	r3, #0
 8012778:	d1e7      	bne.n	801274a <pppos_write+0x9e>
  }

  err = pppos_output_last(pppos, err, nb, &fcs_out);
 801277a:	f107 0316 	add.w	r3, r7, #22
 801277e:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 8012782:	69ba      	ldr	r2, [r7, #24]
 8012784:	69f8      	ldr	r0, [r7, #28]
 8012786:	f000 fc49 	bl	801301c <pppos_output_last>
 801278a:	4603      	mov	r3, r0
 801278c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (err == ERR_OK) {
    PPPDEBUG(LOG_INFO, ("pppos_write[%d]: len=%d\n", ppp->netif->num, p->len));
  } else {
    PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: output failed len=%d\n", ppp->netif->num, p->len));
  }
  pbuf_free(p);
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f7f3 fd0f 	bl	80061b4 <pbuf_free>
  return err;
 8012796:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
}
 801279a:	4618      	mov	r0, r3
 801279c:	3728      	adds	r7, #40	; 0x28
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}
 80127a2:	bf00      	nop
 80127a4:	2000221c 	.word	0x2000221c

080127a8 <pppos_netif_output>:

/* Called by PPP core */
static err_t
pppos_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *pb, u16_t protocol)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b08c      	sub	sp, #48	; 0x30
 80127ac:	af02      	add	r7, sp, #8
 80127ae:	60f8      	str	r0, [r7, #12]
 80127b0:	60b9      	str	r1, [r7, #8]
 80127b2:	607a      	str	r2, [r7, #4]
 80127b4:	807b      	strh	r3, [r7, #2]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 80127b6:	68bb      	ldr	r3, [r7, #8]
 80127b8:	61bb      	str	r3, [r7, #24]
  err_t err;
  LWIP_UNUSED_ARG(ppp);

  /* Grab an output buffer. Assume PBUF_POOL_BUFSIZE is an acceptable
   * chunk size for Tx as well. */
  nb = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_RAM);
 80127ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80127be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80127c2:	2000      	movs	r0, #0
 80127c4:	f7f3 fa8c 	bl	8005ce0 <pbuf_alloc>
 80127c8:	6178      	str	r0, [r7, #20]
  if (nb == NULL) {
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d10e      	bne.n	80127ee <pppos_netif_output+0x46>
    PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: alloc fail\n", ppp->netif->num));
    LINK_STATS_INC(link.memerr);
 80127d0:	4b5f      	ldr	r3, [pc, #380]	; (8012950 <pppos_netif_output+0x1a8>)
 80127d2:	899b      	ldrh	r3, [r3, #12]
 80127d4:	3301      	adds	r3, #1
 80127d6:	b29a      	uxth	r2, r3
 80127d8:	4b5d      	ldr	r3, [pc, #372]	; (8012950 <pppos_netif_output+0x1a8>)
 80127da:	819a      	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
 80127dc:	4b5c      	ldr	r3, [pc, #368]	; (8012950 <pppos_netif_output+0x1a8>)
 80127de:	88db      	ldrh	r3, [r3, #6]
 80127e0:	3301      	adds	r3, #1
 80127e2:	b29a      	uxth	r2, r3
 80127e4:	4b5a      	ldr	r3, [pc, #360]	; (8012950 <pppos_netif_output+0x1a8>)
 80127e6:	80da      	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
    return ERR_MEM;
 80127e8:	f04f 33ff 	mov.w	r3, #4294967295
 80127ec:	e0ac      	b.n	8012948 <pppos_netif_output+0x1a0>
  }

  /* Empty the buffer */
  nb->len = 0;
 80127ee:	697b      	ldr	r3, [r7, #20]
 80127f0:	2200      	movs	r2, #0
 80127f2:	815a      	strh	r2, [r3, #10]
  /* Set nb->tot_len to actual payload length */
  nb->tot_len = pb->tot_len;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	891a      	ldrh	r2, [r3, #8]
 80127f8:	697b      	ldr	r3, [r7, #20]
 80127fa:	811a      	strh	r2, [r3, #8]

  /* If the link has been idle, we'll send a fresh flag character to
   * flush any noise. */
  err = ERR_OK;
 80127fc:	2300      	movs	r3, #0
 80127fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
 8012802:	f7ef fb5d 	bl	8001ec0 <sys_now>
 8012806:	4602      	mov	r2, r0
 8012808:	69bb      	ldr	r3, [r7, #24]
 801280a:	689b      	ldr	r3, [r3, #8]
 801280c:	1ad3      	subs	r3, r2, r3
 801280e:	2b63      	cmp	r3, #99	; 0x63
 8012810:	d90d      	bls.n	801282e <pppos_netif_output+0x86>
    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 8012812:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8012816:	2300      	movs	r3, #0
 8012818:	9301      	str	r3, [sp, #4]
 801281a:	2300      	movs	r3, #0
 801281c:	9300      	str	r3, [sp, #0]
 801281e:	237e      	movs	r3, #126	; 0x7e
 8012820:	697a      	ldr	r2, [r7, #20]
 8012822:	69b8      	ldr	r0, [r7, #24]
 8012824:	f000 fb74 	bl	8012f10 <pppos_output_append>
 8012828:	4603      	mov	r3, r0
 801282a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }

  fcs_out = PPP_INITFCS;
 801282e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012832:	827b      	strh	r3, [r7, #18]
  if (!pppos->accomp) {
 8012834:	69bb      	ldr	r3, [r7, #24]
 8012836:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801283a:	f003 0304 	and.w	r3, r3, #4
 801283e:	b2db      	uxtb	r3, r3
 8012840:	2b00      	cmp	r3, #0
 8012842:	d11d      	bne.n	8012880 <pppos_netif_output+0xd8>
    err = pppos_output_append(pppos, err,  nb, PPP_ALLSTATIONS, 1, &fcs_out);
 8012844:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8012848:	f107 0312 	add.w	r3, r7, #18
 801284c:	9301      	str	r3, [sp, #4]
 801284e:	2301      	movs	r3, #1
 8012850:	9300      	str	r3, [sp, #0]
 8012852:	23ff      	movs	r3, #255	; 0xff
 8012854:	697a      	ldr	r2, [r7, #20]
 8012856:	69b8      	ldr	r0, [r7, #24]
 8012858:	f000 fb5a 	bl	8012f10 <pppos_output_append>
 801285c:	4603      	mov	r3, r0
 801285e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    err = pppos_output_append(pppos, err,  nb, PPP_UI, 1, &fcs_out);
 8012862:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8012866:	f107 0312 	add.w	r3, r7, #18
 801286a:	9301      	str	r3, [sp, #4]
 801286c:	2301      	movs	r3, #1
 801286e:	9300      	str	r3, [sp, #0]
 8012870:	2303      	movs	r3, #3
 8012872:	697a      	ldr	r2, [r7, #20]
 8012874:	69b8      	ldr	r0, [r7, #24]
 8012876:	f000 fb4b 	bl	8012f10 <pppos_output_append>
 801287a:	4603      	mov	r3, r0
 801287c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
  if (!pppos->pcomp || protocol > 0xFF) {
 8012880:	69bb      	ldr	r3, [r7, #24]
 8012882:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012886:	f003 0302 	and.w	r3, r3, #2
 801288a:	b2db      	uxtb	r3, r3
 801288c:	2b00      	cmp	r3, #0
 801288e:	d002      	beq.n	8012896 <pppos_netif_output+0xee>
 8012890:	887b      	ldrh	r3, [r7, #2]
 8012892:	2bff      	cmp	r3, #255	; 0xff
 8012894:	d912      	bls.n	80128bc <pppos_netif_output+0x114>
    err = pppos_output_append(pppos, err,  nb, (protocol >> 8) & 0xFF, 1, &fcs_out);
 8012896:	887b      	ldrh	r3, [r7, #2]
 8012898:	0a1b      	lsrs	r3, r3, #8
 801289a:	b29b      	uxth	r3, r3
 801289c:	b2da      	uxtb	r2, r3
 801289e:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 80128a2:	f107 0312 	add.w	r3, r7, #18
 80128a6:	9301      	str	r3, [sp, #4]
 80128a8:	2301      	movs	r3, #1
 80128aa:	9300      	str	r3, [sp, #0]
 80128ac:	4613      	mov	r3, r2
 80128ae:	697a      	ldr	r2, [r7, #20]
 80128b0:	69b8      	ldr	r0, [r7, #24]
 80128b2:	f000 fb2d 	bl	8012f10 <pppos_output_append>
 80128b6:	4603      	mov	r3, r0
 80128b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
  err = pppos_output_append(pppos, err,  nb, protocol & 0xFF, 1, &fcs_out);
 80128bc:	887b      	ldrh	r3, [r7, #2]
 80128be:	b2da      	uxtb	r2, r3
 80128c0:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 80128c4:	f107 0312 	add.w	r3, r7, #18
 80128c8:	9301      	str	r3, [sp, #4]
 80128ca:	2301      	movs	r3, #1
 80128cc:	9300      	str	r3, [sp, #0]
 80128ce:	4613      	mov	r3, r2
 80128d0:	697a      	ldr	r2, [r7, #20]
 80128d2:	69b8      	ldr	r0, [r7, #24]
 80128d4:	f000 fb1c 	bl	8012f10 <pppos_output_append>
 80128d8:	4603      	mov	r3, r0
 80128da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Load packet. */
  for(p = pb; p; p = p->next) {
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	627b      	str	r3, [r7, #36]	; 0x24
 80128e2:	e021      	b.n	8012928 <pppos_netif_output+0x180>
    u16_t n = p->len;
 80128e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128e6:	895b      	ldrh	r3, [r3, #10]
 80128e8:	843b      	strh	r3, [r7, #32]
    u8_t *s = (u8_t*)p->payload;
 80128ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ec:	685b      	ldr	r3, [r3, #4]
 80128ee:	61fb      	str	r3, [r7, #28]

    while (n-- > 0) {
 80128f0:	e012      	b.n	8012918 <pppos_netif_output+0x170>
      err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 80128f2:	69fb      	ldr	r3, [r7, #28]
 80128f4:	1c5a      	adds	r2, r3, #1
 80128f6:	61fa      	str	r2, [r7, #28]
 80128f8:	781a      	ldrb	r2, [r3, #0]
 80128fa:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 80128fe:	f107 0312 	add.w	r3, r7, #18
 8012902:	9301      	str	r3, [sp, #4]
 8012904:	2301      	movs	r3, #1
 8012906:	9300      	str	r3, [sp, #0]
 8012908:	4613      	mov	r3, r2
 801290a:	697a      	ldr	r2, [r7, #20]
 801290c:	69b8      	ldr	r0, [r7, #24]
 801290e:	f000 faff 	bl	8012f10 <pppos_output_append>
 8012912:	4603      	mov	r3, r0
 8012914:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while (n-- > 0) {
 8012918:	8c3b      	ldrh	r3, [r7, #32]
 801291a:	1e5a      	subs	r2, r3, #1
 801291c:	843a      	strh	r2, [r7, #32]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d1e7      	bne.n	80128f2 <pppos_netif_output+0x14a>
  for(p = pb; p; p = p->next) {
 8012922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	627b      	str	r3, [r7, #36]	; 0x24
 8012928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801292a:	2b00      	cmp	r3, #0
 801292c:	d1da      	bne.n	80128e4 <pppos_netif_output+0x13c>
    }
  }

  err = pppos_output_last(pppos, err, nb, &fcs_out);
 801292e:	f107 0312 	add.w	r3, r7, #18
 8012932:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8012936:	697a      	ldr	r2, [r7, #20]
 8012938:	69b8      	ldr	r0, [r7, #24]
 801293a:	f000 fb6f 	bl	801301c <pppos_output_last>
 801293e:	4603      	mov	r3, r0
 8012940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err == ERR_OK) {
    PPPDEBUG(LOG_INFO, ("pppos_netif_output[%d]: proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
  } else {
    PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: output failed proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
  }
  return err;
 8012944:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 8012948:	4618      	mov	r0, r3
 801294a:	3728      	adds	r7, #40	; 0x28
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}
 8012950:	2000221c 	.word	0x2000221c

08012954 <pppos_connect>:

static void
pppos_connect(ppp_pcb *ppp, void *ctx)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b084      	sub	sp, #16
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
 801295c:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	60fb      	str	r3, [r7, #12]
  /* input pbuf left over from last session? */
  pppos_input_free_current_packet(pppos);
#endif /* PPP_INPROC_IRQ_SAFE */

  /* reset PPPoS control block to its initial state */
  memset(&pppos->last_xmit, 0, sizeof(pppos_pcb) - offsetof(pppos_pcb, last_xmit));
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	3308      	adds	r3, #8
 8012966:	2258      	movs	r2, #88	; 0x58
 8012968:	2100      	movs	r1, #0
 801296a:	4618      	mov	r0, r3
 801296c:	f001 fb67 	bl	801403e <memset>

  /*
   * Default the in and out accm so that escape and flag characters
   * are always escaped.
   */
  pppos->in_accm[15] = 0x60; /* no need to protect since RX is not running */
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	2260      	movs	r2, #96	; 0x60
 8012974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  pppos->out_accm[15] = 0x60;
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	2260      	movs	r2, #96	; 0x60
 801297c:	76da      	strb	r2, [r3, #27]
  PPPOS_PROTECT(lev);
  pppos->open = 1;
 801297e:	68fa      	ldr	r2, [r7, #12]
 8012980:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8012984:	f043 0301 	orr.w	r3, r3, #1
 8012988:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

  /*
   * Start the connection and handle incoming events (packet or timeout).
   */
  PPPDEBUG(LOG_INFO, ("pppos_connect: unit %d: connecting\n", ppp->netif->num));
  ppp_start(ppp); /* notify upper layers */
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f7ff fc85 	bl	801229c <ppp_start>
}
 8012992:	bf00      	nop
 8012994:	3710      	adds	r7, #16
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}

0801299a <pppos_disconnect>:
}
#endif /* PPP_SERVER */

static void
pppos_disconnect(ppp_pcb *ppp, void *ctx)
{
 801299a:	b580      	push	{r7, lr}
 801299c:	b084      	sub	sp, #16
 801299e:	af00      	add	r7, sp, #0
 80129a0:	6078      	str	r0, [r7, #4]
 80129a2:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	60fb      	str	r3, [r7, #12]
  PPPOS_DECL_PROTECT(lev);

  PPPOS_PROTECT(lev);
  pppos->open = 0;
 80129a8:	68fa      	ldr	r2, [r7, #12]
 80129aa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80129ae:	f36f 0300 	bfc	r3, #0, #1
 80129b2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
   * pppos_input_free_current_packet() here because
   * rx IRQ might still call pppos_input().
   */
#if !PPP_INPROC_IRQ_SAFE
  /* input pbuf left ? */
  pppos_input_free_current_packet(pppos);
 80129b6:	68f8      	ldr	r0, [r7, #12]
 80129b8:	f000 fa70 	bl	8012e9c <pppos_input_free_current_packet>
#endif /* !PPP_INPROC_IRQ_SAFE */

  ppp_link_end(ppp); /* notify upper layers */
 80129bc:	6878      	ldr	r0, [r7, #4]
 80129be:	f7ff fc7f 	bl	80122c0 <ppp_link_end>
}
 80129c2:	bf00      	nop
 80129c4:	3710      	adds	r7, #16
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}
	...

080129cc <pppos_destroy>:

static err_t
pppos_destroy(ppp_pcb *ppp, void *ctx)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b084      	sub	sp, #16
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
 80129d4:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	60fb      	str	r3, [r7, #12]
#if PPP_INPROC_IRQ_SAFE
  /* input pbuf left ? */
  pppos_input_free_current_packet(pppos);
#endif /* PPP_INPROC_IRQ_SAFE */

  LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
 80129da:	68f9      	ldr	r1, [r7, #12]
 80129dc:	4803      	ldr	r0, [pc, #12]	; (80129ec <pppos_destroy+0x20>)
 80129de:	f7f2 fde9 	bl	80055b4 <memp_free_pool>
  return ERR_OK;
 80129e2:	2300      	movs	r3, #0
}
 80129e4:	4618      	mov	r0, r3
 80129e6:	3710      	adds	r7, #16
 80129e8:	46bd      	mov	sp, r7
 80129ea:	bd80      	pop	{r7, pc}
 80129ec:	08018024 	.word	0x08018024

080129f0 <pppos_input>:
 * @param s received data
 * @param l length of received data
 */
void
pppos_input(ppp_pcb *ppp, const void *s, int l)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b08c      	sub	sp, #48	; 0x30
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	60f8      	str	r0, [r7, #12]
 80129f8:	60b9      	str	r1, [r7, #8]
 80129fa:	607a      	str	r2, [r7, #4]
  pppos_pcb *pppos = (pppos_pcb *)ppp->link_ctx_cb;
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	69db      	ldr	r3, [r3, #28]
 8012a00:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *next_pbuf;
  const u8_t *s_u8 = (const u8_t *)s;
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Don't even bother parsing data if we are disconnected.
   * Added to that, ppp_input must never be called if the upper layer is down.
   */
  PPPOS_PROTECT(lev);
  if (!pppos->open) {
 8012a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012a0c:	f003 0301 	and.w	r3, r3, #1
 8012a10:	b2db      	uxtb	r3, r3
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	f000 81d9 	beq.w	8012dca <pppos_input+0x3da>
    return;
  }
  PPPOS_UNPROTECT(lev);

  PPPDEBUG(LOG_DEBUG, ("pppos_input[%d]: got %d bytes\n", ppp->netif->num, l));
  while (l-- > 0) {
 8012a18:	e1d0      	b.n	8012dbc <pppos_input+0x3cc>
    cur_char = *s_u8++;
 8012a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1c:	1c5a      	adds	r2, r3, #1
 8012a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012a20:	781b      	ldrb	r3, [r3, #0]
 8012a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    PPPOS_PROTECT(lev);
    escaped = ESCAPE_P(pppos->in_accm, cur_char);
 8012a26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012a2a:	08db      	lsrs	r3, r3, #3
 8012a2c:	b2db      	uxtb	r3, r3
 8012a2e:	461a      	mov	r2, r3
 8012a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a32:	4413      	add	r3, r2
 8012a34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a38:	b25a      	sxtb	r2, r3
 8012a3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012a3e:	f003 0307 	and.w	r3, r3, #7
 8012a42:	2101      	movs	r1, #1
 8012a44:	fa01 f303 	lsl.w	r3, r1, r3
 8012a48:	b25b      	sxtb	r3, r3
 8012a4a:	4013      	ands	r3, r2
 8012a4c:	b25b      	sxtb	r3, r3
 8012a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    PPPOS_UNPROTECT(lev);

    /* Handle special characters. */
    if (escaped) {
 8012a52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	f000 80a7 	beq.w	8012baa <pppos_input+0x1ba>
      /* Check for escape sequences. */
      /* XXX Note that this does not handle an escaped 0x5d character which
       * would appear as an escape character.  Since this is an ASCII ']'
       * and there is no reason that I know of to escape it, I won't complicate
       * the code to handle this case. GLL */
      if (cur_char == PPP_ESCAPE) {
 8012a5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012a60:	2b7d      	cmp	r3, #125	; 0x7d
 8012a62:	d104      	bne.n	8012a6e <pppos_input+0x7e>
        pppos->in_escaped = 1;
 8012a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a66:	2201      	movs	r2, #1
 8012a68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8012a6c:	e1a6      	b.n	8012dbc <pppos_input+0x3cc>
      /* Check for the flag character. */
      } else if (cur_char == PPP_FLAG) {
 8012a6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012a72:	2b7e      	cmp	r3, #126	; 0x7e
 8012a74:	f040 81a2 	bne.w	8012dbc <pppos_input+0x3cc>
        /* If this is just an extra flag character, ignore it. */
        if (pppos->in_state <= PDADDRESS) {
 8012a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a7a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8012a7e:	2b01      	cmp	r3, #1
 8012a80:	f240 8085 	bls.w	8012b8e <pppos_input+0x19e>
          /* ignore it */;
        /* If we haven't received the packet header, drop what has come in. */
        } else if (pppos->in_state < PDDATA) {
 8012a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a86:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8012a8a:	2b04      	cmp	r3, #4
 8012a8c:	d809      	bhi.n	8012aa2 <pppos_input+0xb2>
          PPPDEBUG(LOG_WARNING,
                   ("pppos_input[%d]: Dropping incomplete packet %d\n",
                    ppp->netif->num, pppos->in_state));
          LINK_STATS_INC(link.lenerr);
 8012a8e:	4ba5      	ldr	r3, [pc, #660]	; (8012d24 <pppos_input+0x334>)
 8012a90:	895b      	ldrh	r3, [r3, #10]
 8012a92:	3301      	adds	r3, #1
 8012a94:	b29a      	uxth	r2, r3
 8012a96:	4ba3      	ldr	r3, [pc, #652]	; (8012d24 <pppos_input+0x334>)
 8012a98:	815a      	strh	r2, [r3, #10]
          pppos_input_drop(pppos);
 8012a9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a9c:	f000 fa24 	bl	8012ee8 <pppos_input_drop>
 8012aa0:	e075      	b.n	8012b8e <pppos_input+0x19e>
        /* If the fcs is invalid, drop the packet. */
        } else if (pppos->in_fcs != PPP_GOODFCS) {
 8012aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012aa8:	f24f 02b8 	movw	r2, #61624	; 0xf0b8
 8012aac:	4293      	cmp	r3, r2
 8012aae:	d009      	beq.n	8012ac4 <pppos_input+0xd4>
          PPPDEBUG(LOG_INFO,
                   ("pppos_input[%d]: Dropping bad fcs 0x%"X16_F" proto=0x%"X16_F"\n",
                    ppp->netif->num, pppos->in_fcs, pppos->in_protocol));
          /* Note: If you get lots of these, check for UART frame errors or try different baud rate */
          LINK_STATS_INC(link.chkerr);
 8012ab0:	4b9c      	ldr	r3, [pc, #624]	; (8012d24 <pppos_input+0x334>)
 8012ab2:	891b      	ldrh	r3, [r3, #8]
 8012ab4:	3301      	adds	r3, #1
 8012ab6:	b29a      	uxth	r2, r3
 8012ab8:	4b9a      	ldr	r3, [pc, #616]	; (8012d24 <pppos_input+0x334>)
 8012aba:	811a      	strh	r2, [r3, #8]
          pppos_input_drop(pppos);
 8012abc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012abe:	f000 fa13 	bl	8012ee8 <pppos_input_drop>
 8012ac2:	e064      	b.n	8012b8e <pppos_input+0x19e>
        } else if (!pppos->in_tail) {
 8012ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d109      	bne.n	8012ae0 <pppos_input+0xf0>
          PPPDEBUG(LOG_INFO,
                   ("pppos_input[%d]: Dropping null in_tail\n",
                    ppp->netif->num));
          LINK_STATS_INC(link.drop);
 8012acc:	4b95      	ldr	r3, [pc, #596]	; (8012d24 <pppos_input+0x334>)
 8012ace:	88db      	ldrh	r3, [r3, #6]
 8012ad0:	3301      	adds	r3, #1
 8012ad2:	b29a      	uxth	r2, r3
 8012ad4:	4b93      	ldr	r3, [pc, #588]	; (8012d24 <pppos_input+0x334>)
 8012ad6:	80da      	strh	r2, [r3, #6]
          pppos_input_drop(pppos);
 8012ad8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ada:	f000 fa05 	bl	8012ee8 <pppos_input_drop>
 8012ade:	e056      	b.n	8012b8e <pppos_input+0x19e>
        /* Otherwise it's a good packet so pass it on. */
        } else {
          struct pbuf *inp;
          /* Trim off the checksum. */
          if(pppos->in_tail->len > 2) {
 8012ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ae4:	895b      	ldrh	r3, [r3, #10]
 8012ae6:	2b02      	cmp	r3, #2
 8012ae8:	d91c      	bls.n	8012b24 <pppos_input+0x134>
            pppos->in_tail->len -= 2;
 8012aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012af0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012af2:	8952      	ldrh	r2, [r2, #10]
 8012af4:	3a02      	subs	r2, #2
 8012af6:	b292      	uxth	r2, r2
 8012af8:	815a      	strh	r2, [r3, #10]

            pppos->in_tail->tot_len = pppos->in_tail->len;
 8012afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b00:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012b02:	8952      	ldrh	r2, [r2, #10]
 8012b04:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 8012b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b0e:	429a      	cmp	r2, r3
 8012b10:	d027      	beq.n	8012b62 <pppos_input+0x172>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 8012b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b1a:	4619      	mov	r1, r3
 8012b1c:	4610      	mov	r0, r2
 8012b1e:	f7f3 fc11 	bl	8006344 <pbuf_cat>
 8012b22:	e01e      	b.n	8012b62 <pppos_input+0x172>
            }
          } else {
            pppos->in_tail->tot_len = pppos->in_tail->len;
 8012b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b2a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012b2c:	8952      	ldrh	r2, [r2, #10]
 8012b2e:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 8012b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b38:	429a      	cmp	r2, r3
 8012b3a:	d007      	beq.n	8012b4c <pppos_input+0x15c>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 8012b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b44:	4619      	mov	r1, r3
 8012b46:	4610      	mov	r0, r2
 8012b48:	f7f3 fbfc 	bl	8006344 <pbuf_cat>
            }

            pbuf_realloc(pppos->in_head, pppos->in_head->tot_len - 2);
 8012b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b54:	891b      	ldrh	r3, [r3, #8]
 8012b56:	3b02      	subs	r3, #2
 8012b58:	b29b      	uxth	r3, r3
 8012b5a:	4619      	mov	r1, r3
 8012b5c:	4610      	mov	r0, r2
 8012b5e:	f7f3 f9b1 	bl	8005ec4 <pbuf_realloc>
          }

          /* Dispatch the packet thereby consuming it. */
          inp = pppos->in_head;
 8012b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b66:	613b      	str	r3, [r7, #16]
          /* Packet consumed, release our references. */
          pppos->in_head = NULL;
 8012b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	651a      	str	r2, [r3, #80]	; 0x50
          pppos->in_tail = NULL;
 8012b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b70:	2200      	movs	r2, #0
 8012b72:	655a      	str	r2, [r3, #84]	; 0x54
            pbuf_free(inp);
            LINK_STATS_INC(link.drop);
            MIB2_STATS_NETIF_INC(ppp->netif, ifindiscards);
          }
#else /* PPP_INPROC_IRQ_SAFE */
          ppp_input(ppp, inp);
 8012b74:	6939      	ldr	r1, [r7, #16]
 8012b76:	68f8      	ldr	r0, [r7, #12]
 8012b78:	f7ff fbc2 	bl	8012300 <ppp_input>
          /* ppp_input can disconnect the interface, we need to abort to prevent a memory
           * leak if there are remaining bytes because pppos_connect and pppos_listen
           * functions expect input buffer to be free. Furthermore there are no real
           * reason to continue reading bytes if we are disconnected.
           */
          if (!pppos->open) {
 8012b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012b82:	f003 0301 	and.w	r3, r3, #1
 8012b86:	b2db      	uxtb	r3, r3
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	f000 8120 	beq.w	8012dce <pppos_input+0x3de>
          }
#endif /* PPP_INPROC_IRQ_SAFE */
        }

        /* Prepare for a new packet. */
        pppos->in_fcs = PPP_INITFCS;
 8012b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
        pppos->in_state = PDADDRESS;
 8012b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b9a:	2201      	movs	r2, #1
 8012b9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        pppos->in_escaped = 0;
 8012ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8012ba8:	e108      	b.n	8012dbc <pppos_input+0x3cc>
                 ("pppos_input[%d]: Dropping ACCM char <%d>\n", ppp->netif->num, cur_char));
      }
    /* Process other characters. */
    } else {
      /* Unencode escaped characters. */
      if (pppos->in_escaped) {
 8012baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d009      	beq.n	8012bc8 <pppos_input+0x1d8>
        pppos->in_escaped = 0;
 8012bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        cur_char ^= PPP_TRANS;
 8012bbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012bc0:	f083 0320 	eor.w	r3, r3, #32
 8012bc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      }

      /* Process character relative to current state. */
      switch (pppos->in_state) {
 8012bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8012bce:	2b05      	cmp	r3, #5
 8012bd0:	f200 80de 	bhi.w	8012d90 <pppos_input+0x3a0>
 8012bd4:	a201      	add	r2, pc, #4	; (adr r2, 8012bdc <pppos_input+0x1ec>)
 8012bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bda:	bf00      	nop
 8012bdc:	08012d91 	.word	0x08012d91
 8012be0:	08012bf5 	.word	0x08012bf5
 8012be4:	08012c07 	.word	0x08012c07
 8012be8:	08012c19 	.word	0x08012c19
 8012bec:	08012c55 	.word	0x08012c55
 8012bf0:	08012c75 	.word	0x08012c75
        case PDIDLE:                    /* Idle state - wait for flag character. */
          break;
        case PDADDRESS:                 /* Process address field. */
          if (cur_char == PPP_ALLSTATIONS) {
 8012bf4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012bf8:	2bff      	cmp	r3, #255	; 0xff
 8012bfa:	d104      	bne.n	8012c06 <pppos_input+0x216>
            pppos->in_state = PDCONTROL;
 8012bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfe:	2202      	movs	r2, #2
 8012c00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            break;
 8012c04:	e0c5      	b.n	8012d92 <pppos_input+0x3a2>
          }
          /* Else assume compressed address and control fields so
           * fall through to get the protocol... */
          /* Fall through */
        case PDCONTROL:                 /* Process control field. */
          if (cur_char == PPP_UI) {
 8012c06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012c0a:	2b03      	cmp	r3, #3
 8012c0c:	d104      	bne.n	8012c18 <pppos_input+0x228>
            pppos->in_state = PDPROTOCOL1;
 8012c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c10:	2203      	movs	r2, #3
 8012c12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            break;
 8012c16:	e0bc      	b.n	8012d92 <pppos_input+0x3a2>
          }
          /* Fall through */
        case PDPROTOCOL1:               /* Process protocol field 1. */
          /* If the lower bit is set, this is the end of the protocol
           * field. */
          if (cur_char & 1) {
 8012c18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012c1c:	f003 0301 	and.w	r3, r3, #1
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d00a      	beq.n	8012c3a <pppos_input+0x24a>
            pppos->in_protocol = cur_char;
 8012c24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012c28:	b29a      	uxth	r2, r3
 8012c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
            pppos->in_state = PDDATA;
 8012c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c32:	2205      	movs	r2, #5
 8012c34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          } else {
            pppos->in_protocol = (u16_t)cur_char << 8;
            pppos->in_state = PDPROTOCOL2;
          }
          break;
 8012c38:	e0ab      	b.n	8012d92 <pppos_input+0x3a2>
            pppos->in_protocol = (u16_t)cur_char << 8;
 8012c3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012c3e:	b29b      	uxth	r3, r3
 8012c40:	021b      	lsls	r3, r3, #8
 8012c42:	b29a      	uxth	r2, r3
 8012c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c46:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
            pppos->in_state = PDPROTOCOL2;
 8012c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4c:	2204      	movs	r2, #4
 8012c4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          break;
 8012c52:	e09e      	b.n	8012d92 <pppos_input+0x3a2>
        case PDPROTOCOL2:               /* Process protocol field 2. */
          pppos->in_protocol |= cur_char;
 8012c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c56:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8012c5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012c5e:	b29b      	uxth	r3, r3
 8012c60:	4313      	orrs	r3, r2
 8012c62:	b29a      	uxth	r2, r3
 8012c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c66:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          pppos->in_state = PDDATA;
 8012c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c6c:	2205      	movs	r2, #5
 8012c6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          break;
 8012c72:	e08e      	b.n	8012d92 <pppos_input+0x3a2>
        case PDDATA:                    /* Process data byte. */
          /* Make space to receive processed data. */
          if (pppos->in_tail == NULL || pppos->in_tail->len == PBUF_POOL_BUFSIZE) {
 8012c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d005      	beq.n	8012c88 <pppos_input+0x298>
 8012c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c80:	895b      	ldrh	r3, [r3, #10]
 8012c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c86:	d174      	bne.n	8012d72 <pppos_input+0x382>
            u16_t pbuf_alloc_len;
            if (pppos->in_tail != NULL) {
 8012c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d02d      	beq.n	8012cec <pppos_input+0x2fc>
              u16_t mru;
              pppos->in_tail->tot_len = pppos->in_tail->len;
 8012c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c96:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012c98:	8952      	ldrh	r2, [r2, #10]
 8012c9a:	811a      	strh	r2, [r3, #8]
              if (pppos->in_tail != pppos->in_head) {
 8012c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ca4:	429a      	cmp	r2, r3
 8012ca6:	d00a      	beq.n	8012cbe <pppos_input+0x2ce>
                pbuf_cat(pppos->in_head, pppos->in_tail);
 8012ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012caa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012cb0:	4619      	mov	r1, r3
 8012cb2:	4610      	mov	r0, r2
 8012cb4:	f7f3 fb46 	bl	8006344 <pbuf_cat>
                /* give up the in_tail reference now */
                pppos->in_tail = NULL;
 8012cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cba:	2200      	movs	r2, #0
 8012cbc:	655a      	str	r2, [r3, #84]	; 0x54
              }
              /* Compute MRU including headers length.  If smaller packets are
               * requested, we must still be able to receive packets of the
               * default MRU for control packets. */
              mru = LWIP_MAX(PPP_MRU, PPP_DEFMRU)
 8012cbe:	f240 6374 	movw	r3, #1652	; 0x674
 8012cc2:	843b      	strh	r3, [r7, #32]
#endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
#if PPP_INPROC_IRQ_SAFE
                + sizeof(struct pppos_input_header)
#endif /* PPP_INPROC_IRQ_SAFE */
                + sizeof(pppos->in_protocol);
              if (pppos->in_head->tot_len > mru) {
 8012cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012cc8:	891b      	ldrh	r3, [r3, #8]
 8012cca:	8c3a      	ldrh	r2, [r7, #32]
 8012ccc:	429a      	cmp	r2, r3
 8012cce:	d20d      	bcs.n	8012cec <pppos_input+0x2fc>
                /* Packet too big. Drop the input packet and let the
                 * higher layers deal with it.  Continue processing
                 * received characters in case a new packet starts. */
                PPPDEBUG(LOG_ERR, ("pppos_input[%d]: packet too big, max_len=%d, dropping packet\n", ppp->netif->num, mru));
                LINK_STATS_INC(link.lenerr);
 8012cd0:	4b14      	ldr	r3, [pc, #80]	; (8012d24 <pppos_input+0x334>)
 8012cd2:	895b      	ldrh	r3, [r3, #10]
 8012cd4:	3301      	adds	r3, #1
 8012cd6:	b29a      	uxth	r2, r3
 8012cd8:	4b12      	ldr	r3, [pc, #72]	; (8012d24 <pppos_input+0x334>)
 8012cda:	815a      	strh	r2, [r3, #10]
                pppos_input_drop(pppos);
 8012cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cde:	f000 f903 	bl	8012ee8 <pppos_input_drop>
                pppos->in_state = PDIDLE;  /* Wait for flag character. */
 8012ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                break;
 8012cea:	e052      	b.n	8012d92 <pppos_input+0x3a2>
              }
            }
            /* If we haven't started a packet, we need a packet header. */
            pbuf_alloc_len = 0;
 8012cec:	2300      	movs	r3, #0
 8012cee:	83fb      	strh	r3, [r7, #30]
#endif /* PPP_IPV6_SUPPORT */
             )) {
              pbuf_alloc_len = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
            }
#endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
            next_pbuf = pbuf_alloc(PBUF_RAW, pbuf_alloc_len, PBUF_POOL);
 8012cf0:	8bfb      	ldrh	r3, [r7, #30]
 8012cf2:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8012cf6:	4619      	mov	r1, r3
 8012cf8:	2000      	movs	r0, #0
 8012cfa:	f7f2 fff1 	bl	8005ce0 <pbuf_alloc>
 8012cfe:	61b8      	str	r0, [r7, #24]
            if (next_pbuf == NULL) {
 8012d00:	69bb      	ldr	r3, [r7, #24]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d110      	bne.n	8012d28 <pppos_input+0x338>
              /* No free buffers.  Drop the input packet and let the
               * higher layers deal with it.  Continue processing
               * received characters in case a new packet starts. */
              PPPDEBUG(LOG_ERR, ("pppos_input[%d]: NO FREE PBUFS!\n", ppp->netif->num));
              LINK_STATS_INC(link.memerr);
 8012d06:	4b07      	ldr	r3, [pc, #28]	; (8012d24 <pppos_input+0x334>)
 8012d08:	899b      	ldrh	r3, [r3, #12]
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	b29a      	uxth	r2, r3
 8012d0e:	4b05      	ldr	r3, [pc, #20]	; (8012d24 <pppos_input+0x334>)
 8012d10:	819a      	strh	r2, [r3, #12]
              pppos_input_drop(pppos);
 8012d12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d14:	f000 f8e8 	bl	8012ee8 <pppos_input_drop>
              pppos->in_state = PDIDLE;  /* Wait for flag character. */
 8012d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
              break;
 8012d20:	e037      	b.n	8012d92 <pppos_input+0x3a2>
 8012d22:	bf00      	nop
 8012d24:	2000221c 	.word	0x2000221c
            }
            if (pppos->in_head == NULL) {
 8012d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d11d      	bne.n	8012d6c <pppos_input+0x37c>
              u8_t *payload = ((u8_t*)next_pbuf->payload) + pbuf_alloc_len;
 8012d30:	69bb      	ldr	r3, [r7, #24]
 8012d32:	685a      	ldr	r2, [r3, #4]
 8012d34:	8bfb      	ldrh	r3, [r7, #30]
 8012d36:	4413      	add	r3, r2
 8012d38:	617b      	str	r3, [r7, #20]
#if PPP_INPROC_IRQ_SAFE
              ((struct pppos_input_header*)payload)->ppp = ppp;
              payload += sizeof(struct pppos_input_header);
              next_pbuf->len += sizeof(struct pppos_input_header);
#endif /* PPP_INPROC_IRQ_SAFE */
              next_pbuf->len += sizeof(pppos->in_protocol);
 8012d3a:	69bb      	ldr	r3, [r7, #24]
 8012d3c:	895b      	ldrh	r3, [r3, #10]
 8012d3e:	3302      	adds	r3, #2
 8012d40:	b29a      	uxth	r2, r3
 8012d42:	69bb      	ldr	r3, [r7, #24]
 8012d44:	815a      	strh	r2, [r3, #10]
              *(payload++) = pppos->in_protocol >> 8;
 8012d46:	697b      	ldr	r3, [r7, #20]
 8012d48:	1c5a      	adds	r2, r3, #1
 8012d4a:	617a      	str	r2, [r7, #20]
 8012d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d4e:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8012d52:	0a12      	lsrs	r2, r2, #8
 8012d54:	b292      	uxth	r2, r2
 8012d56:	b2d2      	uxtb	r2, r2
 8012d58:	701a      	strb	r2, [r3, #0]
              *(payload) = pppos->in_protocol & 0xFF;
 8012d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012d60:	b2da      	uxtb	r2, r3
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	701a      	strb	r2, [r3, #0]
              pppos->in_head = next_pbuf;
 8012d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d68:	69ba      	ldr	r2, [r7, #24]
 8012d6a:	651a      	str	r2, [r3, #80]	; 0x50
            }
            pppos->in_tail = next_pbuf;
 8012d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d6e:	69ba      	ldr	r2, [r7, #24]
 8012d70:	655a      	str	r2, [r3, #84]	; 0x54
          }
          /* Load character into buffer. */
          ((u8_t*)pppos->in_tail->payload)[pppos->in_tail->len++] = cur_char;
 8012d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d76:	6859      	ldr	r1, [r3, #4]
 8012d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d7c:	895a      	ldrh	r2, [r3, #10]
 8012d7e:	1c50      	adds	r0, r2, #1
 8012d80:	b280      	uxth	r0, r0
 8012d82:	8158      	strh	r0, [r3, #10]
 8012d84:	4613      	mov	r3, r2
 8012d86:	440b      	add	r3, r1
 8012d88:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8012d8c:	701a      	strb	r2, [r3, #0]
          break;
 8012d8e:	e000      	b.n	8012d92 <pppos_input+0x3a2>
        default:
          break;
 8012d90:	bf00      	nop
      }

      /* update the frame check sequence number. */
      pppos->in_fcs = PPP_FCS(pppos->in_fcs, cur_char);
 8012d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012d98:	0a1b      	lsrs	r3, r3, #8
 8012d9a:	b29a      	uxth	r2, r3
 8012d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012da2:	4619      	mov	r1, r3
 8012da4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012da8:	404b      	eors	r3, r1
 8012daa:	b2db      	uxtb	r3, r3
 8012dac:	490a      	ldr	r1, [pc, #40]	; (8012dd8 <pppos_input+0x3e8>)
 8012dae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012db2:	4053      	eors	r3, r2
 8012db4:	b29a      	uxth	r2, r3
 8012db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012db8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  while (l-- > 0) {
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	1e5a      	subs	r2, r3, #1
 8012dc0:	607a      	str	r2, [r7, #4]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	f73f ae29 	bgt.w	8012a1a <pppos_input+0x2a>
 8012dc8:	e002      	b.n	8012dd0 <pppos_input+0x3e0>
    return;
 8012dca:	bf00      	nop
 8012dcc:	e000      	b.n	8012dd0 <pppos_input+0x3e0>
            break;
 8012dce:	bf00      	nop
    }
  } /* while (l-- > 0), all bytes processed */
}
 8012dd0:	3730      	adds	r7, #48	; 0x30
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}
 8012dd6:	bf00      	nop
 8012dd8:	08018054 	.word	0x08018054

08012ddc <pppos_send_config>:
}
#endif /* PPP_INPROC_IRQ_SAFE */

static void
pppos_send_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
{
 8012ddc:	b480      	push	{r7}
 8012dde:	b087      	sub	sp, #28
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	60f8      	str	r0, [r7, #12]
 8012de4:	60b9      	str	r1, [r7, #8]
 8012de6:	607a      	str	r2, [r7, #4]
 8012de8:	603b      	str	r3, [r7, #0]
  int i;
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8012dea:	68bb      	ldr	r3, [r7, #8]
 8012dec:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(ppp);

  pppos->pcomp = pcomp;
 8012dee:	683b      	ldr	r3, [r7, #0]
 8012df0:	b2db      	uxtb	r3, r3
 8012df2:	f003 0301 	and.w	r3, r3, #1
 8012df6:	b2d9      	uxtb	r1, r3
 8012df8:	693a      	ldr	r2, [r7, #16]
 8012dfa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8012dfe:	f361 0341 	bfi	r3, r1, #1, #1
 8012e02:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
  pppos->accomp = accomp;
 8012e06:	6a3b      	ldr	r3, [r7, #32]
 8012e08:	b2db      	uxtb	r3, r3
 8012e0a:	f003 0301 	and.w	r3, r3, #1
 8012e0e:	b2d9      	uxtb	r1, r3
 8012e10:	693a      	ldr	r2, [r7, #16]
 8012e12:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8012e16:	f361 0382 	bfi	r3, r1, #2, #1
 8012e1a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

  /* Load the ACCM bits for the 32 control codes. */
  for (i = 0; i < 32/8; i++) {
 8012e1e:	2300      	movs	r3, #0
 8012e20:	617b      	str	r3, [r7, #20]
 8012e22:	e00e      	b.n	8012e42 <pppos_send_config+0x66>
    pppos->out_accm[i] = (u8_t)((accm >> (8 * i)) & 0xFF);
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	00db      	lsls	r3, r3, #3
 8012e28:	687a      	ldr	r2, [r7, #4]
 8012e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8012e2e:	b2d9      	uxtb	r1, r3
 8012e30:	693a      	ldr	r2, [r7, #16]
 8012e32:	697b      	ldr	r3, [r7, #20]
 8012e34:	4413      	add	r3, r2
 8012e36:	330c      	adds	r3, #12
 8012e38:	460a      	mov	r2, r1
 8012e3a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 32/8; i++) {
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	3301      	adds	r3, #1
 8012e40:	617b      	str	r3, [r7, #20]
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	2b03      	cmp	r3, #3
 8012e46:	dded      	ble.n	8012e24 <pppos_send_config+0x48>
  }

  PPPDEBUG(LOG_INFO, ("pppos_send_config[%d]: out_accm=%X %X %X %X\n",
            pppos->ppp->netif->num,
            pppos->out_accm[0], pppos->out_accm[1], pppos->out_accm[2], pppos->out_accm[3]));
}
 8012e48:	bf00      	nop
 8012e4a:	371c      	adds	r7, #28
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e52:	4770      	bx	lr

08012e54 <pppos_recv_config>:

static void
pppos_recv_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
{
 8012e54:	b480      	push	{r7}
 8012e56:	b087      	sub	sp, #28
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	60f8      	str	r0, [r7, #12]
 8012e5c:	60b9      	str	r1, [r7, #8]
 8012e5e:	607a      	str	r2, [r7, #4]
 8012e60:	603b      	str	r3, [r7, #0]
  int i;
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8012e62:	68bb      	ldr	r3, [r7, #8]
 8012e64:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(pcomp);
  LWIP_UNUSED_ARG(accomp);

  /* Load the ACCM bits for the 32 control codes. */
  PPPOS_PROTECT(lev);
  for (i = 0; i < 32 / 8; i++) {
 8012e66:	2300      	movs	r3, #0
 8012e68:	617b      	str	r3, [r7, #20]
 8012e6a:	e00e      	b.n	8012e8a <pppos_recv_config+0x36>
    pppos->in_accm[i] = (u8_t)(accm >> (i * 8));
 8012e6c:	697b      	ldr	r3, [r7, #20]
 8012e6e:	00db      	lsls	r3, r3, #3
 8012e70:	687a      	ldr	r2, [r7, #4]
 8012e72:	fa22 f303 	lsr.w	r3, r2, r3
 8012e76:	b2d9      	uxtb	r1, r3
 8012e78:	693a      	ldr	r2, [r7, #16]
 8012e7a:	697b      	ldr	r3, [r7, #20]
 8012e7c:	4413      	add	r3, r2
 8012e7e:	332d      	adds	r3, #45	; 0x2d
 8012e80:	460a      	mov	r2, r1
 8012e82:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 32 / 8; i++) {
 8012e84:	697b      	ldr	r3, [r7, #20]
 8012e86:	3301      	adds	r3, #1
 8012e88:	617b      	str	r3, [r7, #20]
 8012e8a:	697b      	ldr	r3, [r7, #20]
 8012e8c:	2b03      	cmp	r3, #3
 8012e8e:	dded      	ble.n	8012e6c <pppos_recv_config+0x18>
  PPPOS_UNPROTECT(lev);

  PPPDEBUG(LOG_INFO, ("pppos_recv_config[%d]: in_accm=%X %X %X %X\n",
            pppos->ppp->netif->num,
            pppos->in_accm[0], pppos->in_accm[1], pppos->in_accm[2], pppos->in_accm[3]));
}
 8012e90:	bf00      	nop
 8012e92:	371c      	adds	r7, #28
 8012e94:	46bd      	mov	sp, r7
 8012e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9a:	4770      	bx	lr

08012e9c <pppos_input_free_current_packet>:
/*
 * Drop the input packet.
 */
static void
pppos_input_free_current_packet(pppos_pcb *pppos)
{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b082      	sub	sp, #8
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
  if (pppos->in_head != NULL) {
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d016      	beq.n	8012eda <pppos_input_free_current_packet+0x3e>
    if (pppos->in_tail && (pppos->in_tail != pppos->in_head)) {
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d00a      	beq.n	8012eca <pppos_input_free_current_packet+0x2e>
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	d004      	beq.n	8012eca <pppos_input_free_current_packet+0x2e>
      pbuf_free(pppos->in_tail);
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7f3 f975 	bl	80061b4 <pbuf_free>
    }
    pbuf_free(pppos->in_head);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f7f3 f970 	bl	80061b4 <pbuf_free>
    pppos->in_head = NULL;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  pppos->in_tail = NULL;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	2200      	movs	r2, #0
 8012ede:	655a      	str	r2, [r3, #84]	; 0x54
}
 8012ee0:	bf00      	nop
 8012ee2:	3708      	adds	r7, #8
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	bd80      	pop	{r7, pc}

08012ee8 <pppos_input_drop>:
/*
 * Drop the input packet and increase error counters.
 */
static void
pppos_input_drop(pppos_pcb *pppos)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b082      	sub	sp, #8
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
#if 0
    PPPDEBUG(LOG_INFO, ("pppos_input_drop: %d:%.*H\n", pppos->in_head->len, min(60, pppos->in_head->len * 2), pppos->in_head->payload));
#endif
    PPPDEBUG(LOG_INFO, ("pppos_input_drop: pbuf len=%d, addr %p\n", pppos->in_head->len, (void*)pppos->in_head));
  }
  pppos_input_free_current_packet(pppos);
 8012ef0:	6878      	ldr	r0, [r7, #4]
 8012ef2:	f7ff ffd3 	bl	8012e9c <pppos_input_free_current_packet>
#if VJ_SUPPORT
  vj_uncompress_err(&pppos->ppp->vj_comp);
#endif /* VJ_SUPPORT */

  LINK_STATS_INC(link.drop);
 8012ef6:	4b05      	ldr	r3, [pc, #20]	; (8012f0c <pppos_input_drop+0x24>)
 8012ef8:	88db      	ldrh	r3, [r3, #6]
 8012efa:	3301      	adds	r3, #1
 8012efc:	b29a      	uxth	r2, r3
 8012efe:	4b03      	ldr	r3, [pc, #12]	; (8012f0c <pppos_input_drop+0x24>)
 8012f00:	80da      	strh	r2, [r3, #6]
  MIB2_STATS_NETIF_INC(pppos->ppp->netif, ifindiscards);
}
 8012f02:	bf00      	nop
 8012f04:	3708      	adds	r7, #8
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	bf00      	nop
 8012f0c:	2000221c 	.word	0x2000221c

08012f10 <pppos_output_append>:
 * If pbuf is full, send the pbuf and reuse it.
 * Return the current pbuf.
 */
static err_t
pppos_output_append(pppos_pcb *pppos, err_t err, struct pbuf *nb, u8_t c, u8_t accm, u16_t *fcs)
{
 8012f10:	b590      	push	{r4, r7, lr}
 8012f12:	b087      	sub	sp, #28
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	60f8      	str	r0, [r7, #12]
 8012f18:	607a      	str	r2, [r7, #4]
 8012f1a:	461a      	mov	r2, r3
 8012f1c:	460b      	mov	r3, r1
 8012f1e:	72fb      	strb	r3, [r7, #11]
 8012f20:	4613      	mov	r3, r2
 8012f22:	72bb      	strb	r3, [r7, #10]
  if (err != ERR_OK) {
 8012f24:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d002      	beq.n	8012f32 <pppos_output_append+0x22>
    return err;
 8012f2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012f30:	e06e      	b.n	8013010 <pppos_output_append+0x100>
  }

  /* Make sure there is room for the character and an escape code.
   * Sure we don't quite fill the buffer if the character doesn't
   * get escaped but is one character worth complicating this? */
  if ((PBUF_POOL_BUFSIZE - nb->len) < 2) {
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	895b      	ldrh	r3, [r3, #10]
 8012f36:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012f3a:	2b01      	cmp	r3, #1
 8012f3c:	dc19      	bgt.n	8012f72 <pppos_output_append+0x62>
    u32_t l = pppos->output_cb(pppos->ppp, nb->payload, nb->len, pppos->ppp->ctx_cb);
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	685c      	ldr	r4, [r3, #4]
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	6818      	ldr	r0, [r3, #0]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	6859      	ldr	r1, [r3, #4]
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	895b      	ldrh	r3, [r3, #10]
 8012f4e:	461a      	mov	r2, r3
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f56:	47a0      	blx	r4
 8012f58:	6178      	str	r0, [r7, #20]
    if (l != nb->len) {
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	895b      	ldrh	r3, [r3, #10]
 8012f5e:	461a      	mov	r2, r3
 8012f60:	697b      	ldr	r3, [r7, #20]
 8012f62:	429a      	cmp	r2, r3
 8012f64:	d002      	beq.n	8012f6c <pppos_output_append+0x5c>
      return ERR_IF;
 8012f66:	f06f 030b 	mvn.w	r3, #11
 8012f6a:	e051      	b.n	8013010 <pppos_output_append+0x100>
    }
    nb->len = 0;
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	2200      	movs	r2, #0
 8012f70:	815a      	strh	r2, [r3, #10]
  }

  /* Update FCS before checking for special characters. */
  if (fcs) {
 8012f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d010      	beq.n	8012f9a <pppos_output_append+0x8a>
    *fcs = PPP_FCS(*fcs, c);
 8012f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f7a:	881b      	ldrh	r3, [r3, #0]
 8012f7c:	0a1b      	lsrs	r3, r3, #8
 8012f7e:	b29a      	uxth	r2, r3
 8012f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f82:	881b      	ldrh	r3, [r3, #0]
 8012f84:	4619      	mov	r1, r3
 8012f86:	7abb      	ldrb	r3, [r7, #10]
 8012f88:	404b      	eors	r3, r1
 8012f8a:	b2db      	uxtb	r3, r3
 8012f8c:	4922      	ldr	r1, [pc, #136]	; (8013018 <pppos_output_append+0x108>)
 8012f8e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012f92:	4053      	eors	r3, r2
 8012f94:	b29a      	uxth	r2, r3
 8012f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f98:	801a      	strh	r2, [r3, #0]
  }

  /* Copy to output buffer escaping special characters. */
  if (accm && ESCAPE_P(pppos->out_accm, c)) {
 8012f9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d02a      	beq.n	8012ff8 <pppos_output_append+0xe8>
 8012fa2:	7abb      	ldrb	r3, [r7, #10]
 8012fa4:	08db      	lsrs	r3, r3, #3
 8012fa6:	b2db      	uxtb	r3, r3
 8012fa8:	461a      	mov	r2, r3
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	4413      	add	r3, r2
 8012fae:	7b1b      	ldrb	r3, [r3, #12]
 8012fb0:	461a      	mov	r2, r3
 8012fb2:	7abb      	ldrb	r3, [r7, #10]
 8012fb4:	f003 0307 	and.w	r3, r3, #7
 8012fb8:	fa42 f303 	asr.w	r3, r2, r3
 8012fbc:	f003 0301 	and.w	r3, r3, #1
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d019      	beq.n	8012ff8 <pppos_output_append+0xe8>
    *((u8_t*)nb->payload + nb->len++) = PPP_ESCAPE;
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	685a      	ldr	r2, [r3, #4]
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	895b      	ldrh	r3, [r3, #10]
 8012fcc:	1c59      	adds	r1, r3, #1
 8012fce:	b288      	uxth	r0, r1
 8012fd0:	6879      	ldr	r1, [r7, #4]
 8012fd2:	8148      	strh	r0, [r1, #10]
 8012fd4:	4413      	add	r3, r2
 8012fd6:	227d      	movs	r2, #125	; 0x7d
 8012fd8:	701a      	strb	r2, [r3, #0]
    *((u8_t*)nb->payload + nb->len++) = c ^ PPP_TRANS;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	685a      	ldr	r2, [r3, #4]
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	895b      	ldrh	r3, [r3, #10]
 8012fe2:	1c59      	adds	r1, r3, #1
 8012fe4:	b288      	uxth	r0, r1
 8012fe6:	6879      	ldr	r1, [r7, #4]
 8012fe8:	8148      	strh	r0, [r1, #10]
 8012fea:	4413      	add	r3, r2
 8012fec:	7aba      	ldrb	r2, [r7, #10]
 8012fee:	f082 0220 	eor.w	r2, r2, #32
 8012ff2:	b2d2      	uxtb	r2, r2
 8012ff4:	701a      	strb	r2, [r3, #0]
 8012ff6:	e00a      	b.n	801300e <pppos_output_append+0xfe>
  } else {
    *((u8_t*)nb->payload + nb->len++) = c;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	685a      	ldr	r2, [r3, #4]
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	895b      	ldrh	r3, [r3, #10]
 8013000:	1c59      	adds	r1, r3, #1
 8013002:	b288      	uxth	r0, r1
 8013004:	6879      	ldr	r1, [r7, #4]
 8013006:	8148      	strh	r0, [r1, #10]
 8013008:	4413      	add	r3, r2
 801300a:	7aba      	ldrb	r2, [r7, #10]
 801300c:	701a      	strb	r2, [r3, #0]
  }

  return ERR_OK;
 801300e:	2300      	movs	r3, #0
}
 8013010:	4618      	mov	r0, r3
 8013012:	371c      	adds	r7, #28
 8013014:	46bd      	mov	sp, r7
 8013016:	bd90      	pop	{r4, r7, pc}
 8013018:	08018054 	.word	0x08018054

0801301c <pppos_output_last>:

static err_t
pppos_output_last(pppos_pcb *pppos, err_t err, struct pbuf *nb, u16_t *fcs)
{
 801301c:	b590      	push	{r4, r7, lr}
 801301e:	b089      	sub	sp, #36	; 0x24
 8013020:	af02      	add	r7, sp, #8
 8013022:	60f8      	str	r0, [r7, #12]
 8013024:	607a      	str	r2, [r7, #4]
 8013026:	603b      	str	r3, [r7, #0]
 8013028:	460b      	mov	r3, r1
 801302a:	72fb      	strb	r3, [r7, #11]
  ppp_pcb *ppp = pppos->ppp;
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	617b      	str	r3, [r7, #20]

  /* Add FCS and trailing flag. */
  err = pppos_output_append(pppos, err,  nb, ~(*fcs) & 0xFF, 1, NULL);
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	881b      	ldrh	r3, [r3, #0]
 8013036:	b2db      	uxtb	r3, r3
 8013038:	43db      	mvns	r3, r3
 801303a:	b2da      	uxtb	r2, r3
 801303c:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8013040:	2300      	movs	r3, #0
 8013042:	9301      	str	r3, [sp, #4]
 8013044:	2301      	movs	r3, #1
 8013046:	9300      	str	r3, [sp, #0]
 8013048:	4613      	mov	r3, r2
 801304a:	687a      	ldr	r2, [r7, #4]
 801304c:	68f8      	ldr	r0, [r7, #12]
 801304e:	f7ff ff5f 	bl	8012f10 <pppos_output_append>
 8013052:	4603      	mov	r3, r0
 8013054:	72fb      	strb	r3, [r7, #11]
  err = pppos_output_append(pppos, err,  nb, (~(*fcs) >> 8) & 0xFF, 1, NULL);
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	881b      	ldrh	r3, [r3, #0]
 801305a:	43db      	mvns	r3, r3
 801305c:	121b      	asrs	r3, r3, #8
 801305e:	b2da      	uxtb	r2, r3
 8013060:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8013064:	2300      	movs	r3, #0
 8013066:	9301      	str	r3, [sp, #4]
 8013068:	2301      	movs	r3, #1
 801306a:	9300      	str	r3, [sp, #0]
 801306c:	4613      	mov	r3, r2
 801306e:	687a      	ldr	r2, [r7, #4]
 8013070:	68f8      	ldr	r0, [r7, #12]
 8013072:	f7ff ff4d 	bl	8012f10 <pppos_output_append>
 8013076:	4603      	mov	r3, r0
 8013078:	72fb      	strb	r3, [r7, #11]
  err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 801307a:	f997 100b 	ldrsb.w	r1, [r7, #11]
 801307e:	2300      	movs	r3, #0
 8013080:	9301      	str	r3, [sp, #4]
 8013082:	2300      	movs	r3, #0
 8013084:	9300      	str	r3, [sp, #0]
 8013086:	237e      	movs	r3, #126	; 0x7e
 8013088:	687a      	ldr	r2, [r7, #4]
 801308a:	68f8      	ldr	r0, [r7, #12]
 801308c:	f7ff ff40 	bl	8012f10 <pppos_output_append>
 8013090:	4603      	mov	r3, r0
 8013092:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK) {
 8013094:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d128      	bne.n	80130ee <pppos_output_last+0xd2>
    goto failed;
  }

  /* Send remaining buffer if not empty */
  if (nb->len > 0) {
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	895b      	ldrh	r3, [r3, #10]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d014      	beq.n	80130ce <pppos_output_last+0xb2>
    u32_t l = pppos->output_cb(ppp, nb->payload, nb->len, ppp->ctx_cb);
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	685c      	ldr	r4, [r3, #4]
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	6859      	ldr	r1, [r3, #4]
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	895b      	ldrh	r3, [r3, #10]
 80130b0:	461a      	mov	r2, r3
 80130b2:	697b      	ldr	r3, [r7, #20]
 80130b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130b6:	6978      	ldr	r0, [r7, #20]
 80130b8:	47a0      	blx	r4
 80130ba:	6138      	str	r0, [r7, #16]
    if (l != nb->len) {
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	895b      	ldrh	r3, [r3, #10]
 80130c0:	461a      	mov	r2, r3
 80130c2:	693b      	ldr	r3, [r7, #16]
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d002      	beq.n	80130ce <pppos_output_last+0xb2>
      err = ERR_IF;
 80130c8:	23f4      	movs	r3, #244	; 0xf4
 80130ca:	72fb      	strb	r3, [r7, #11]
      goto failed;
 80130cc:	e010      	b.n	80130f0 <pppos_output_last+0xd4>
    }
  }

  pppos->last_xmit = sys_now();
 80130ce:	f7ee fef7 	bl	8001ec0 <sys_now>
 80130d2:	4602      	mov	r2, r0
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	609a      	str	r2, [r3, #8]
  MIB2_STATS_NETIF_ADD(ppp->netif, ifoutoctets, nb->tot_len);
  MIB2_STATS_NETIF_INC(ppp->netif, ifoutucastpkts);
  LINK_STATS_INC(link.xmit);
 80130d8:	4b11      	ldr	r3, [pc, #68]	; (8013120 <pppos_output_last+0x104>)
 80130da:	881b      	ldrh	r3, [r3, #0]
 80130dc:	3301      	adds	r3, #1
 80130de:	b29a      	uxth	r2, r3
 80130e0:	4b0f      	ldr	r3, [pc, #60]	; (8013120 <pppos_output_last+0x104>)
 80130e2:	801a      	strh	r2, [r3, #0]
  pbuf_free(nb);
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f7f3 f865 	bl	80061b4 <pbuf_free>
  return ERR_OK;
 80130ea:	2300      	movs	r3, #0
 80130ec:	e014      	b.n	8013118 <pppos_output_last+0xfc>
    goto failed;
 80130ee:	bf00      	nop

failed:
  pppos->last_xmit = 0; /* prepend PPP_FLAG to next packet */
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	2200      	movs	r2, #0
 80130f4:	609a      	str	r2, [r3, #8]
  LINK_STATS_INC(link.err);
 80130f6:	4b0a      	ldr	r3, [pc, #40]	; (8013120 <pppos_output_last+0x104>)
 80130f8:	8a9b      	ldrh	r3, [r3, #20]
 80130fa:	3301      	adds	r3, #1
 80130fc:	b29a      	uxth	r2, r3
 80130fe:	4b08      	ldr	r3, [pc, #32]	; (8013120 <pppos_output_last+0x104>)
 8013100:	829a      	strh	r2, [r3, #20]
  LINK_STATS_INC(link.drop);
 8013102:	4b07      	ldr	r3, [pc, #28]	; (8013120 <pppos_output_last+0x104>)
 8013104:	88db      	ldrh	r3, [r3, #6]
 8013106:	3301      	adds	r3, #1
 8013108:	b29a      	uxth	r2, r3
 801310a:	4b05      	ldr	r3, [pc, #20]	; (8013120 <pppos_output_last+0x104>)
 801310c:	80da      	strh	r2, [r3, #6]
  MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
  pbuf_free(nb);
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f7f3 f850 	bl	80061b4 <pbuf_free>
  return err;
 8013114:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013118:	4618      	mov	r0, r3
 801311a:	371c      	adds	r7, #28
 801311c:	46bd      	mov	sp, r7
 801311e:	bd90      	pop	{r4, r7, pc}
 8013120:	2000221c 	.word	0x2000221c

08013124 <upap_init>:


/*
 * upap_init - Initialize a UPAP unit.
 */
static void upap_init(ppp_pcb *pcb) {
 8013124:	b480      	push	{r7}
 8013126:	b083      	sub	sp, #12
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
    pcb->upap.us_user = NULL;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2200      	movs	r2, #0
 8013130:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->upap.us_userlen = 0;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2200      	movs	r2, #0
 8013136:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pcb->upap.us_passwd = NULL;
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2200      	movs	r2, #0
 801313e:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->upap.us_passwdlen = 0;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2200      	movs	r2, #0
 8013144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pcb->upap.us_clientstate = UPAPCS_INITIAL;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2200      	movs	r2, #0
 801314c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if PPP_SERVER
    pcb->upap.us_serverstate = UPAPSS_INITIAL;
#endif /* PPP_SERVER */
    pcb->upap.us_id = 0;
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	2200      	movs	r2, #0
 8013154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 8013158:	bf00      	nop
 801315a:	370c      	adds	r7, #12
 801315c:	46bd      	mov	sp, r7
 801315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013162:	4770      	bx	lr

08013164 <upap_authwithpeer>:
/*
 * upap_authwithpeer - Authenticate us with our peer (start client).
 *
 * Set new state and send authenticate's.
 */
void upap_authwithpeer(ppp_pcb *pcb, const char *user, const char *password) {
 8013164:	b580      	push	{r7, lr}
 8013166:	b084      	sub	sp, #16
 8013168:	af00      	add	r7, sp, #0
 801316a:	60f8      	str	r0, [r7, #12]
 801316c:	60b9      	str	r1, [r7, #8]
 801316e:	607a      	str	r2, [r7, #4]

    if(!user || !password)
 8013170:	68bb      	ldr	r3, [r7, #8]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d03f      	beq.n	80131f6 <upap_authwithpeer+0x92>
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d03c      	beq.n	80131f6 <upap_authwithpeer+0x92>
        return;

    /* Save the username and password we're given */
    pcb->upap.us_user = user;
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	68ba      	ldr	r2, [r7, #8]
 8013180:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->upap.us_userlen = (u8_t)LWIP_MIN(strlen(user), 0xff);
 8013182:	68b8      	ldr	r0, [r7, #8]
 8013184:	f7ed f82e 	bl	80001e4 <strlen>
 8013188:	4603      	mov	r3, r0
 801318a:	2bfe      	cmp	r3, #254	; 0xfe
 801318c:	d805      	bhi.n	801319a <upap_authwithpeer+0x36>
 801318e:	68b8      	ldr	r0, [r7, #8]
 8013190:	f7ed f828 	bl	80001e4 <strlen>
 8013194:	4603      	mov	r3, r0
 8013196:	b2da      	uxtb	r2, r3
 8013198:	e000      	b.n	801319c <upap_authwithpeer+0x38>
 801319a:	22ff      	movs	r2, #255	; 0xff
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pcb->upap.us_passwd = password;
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	687a      	ldr	r2, [r7, #4]
 80131a6:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->upap.us_passwdlen = (u8_t)LWIP_MIN(strlen(password), 0xff);
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f7ed f81b 	bl	80001e4 <strlen>
 80131ae:	4603      	mov	r3, r0
 80131b0:	2bfe      	cmp	r3, #254	; 0xfe
 80131b2:	d805      	bhi.n	80131c0 <upap_authwithpeer+0x5c>
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f7ed f815 	bl	80001e4 <strlen>
 80131ba:	4603      	mov	r3, r0
 80131bc:	b2da      	uxtb	r2, r3
 80131be:	e000      	b.n	80131c2 <upap_authwithpeer+0x5e>
 80131c0:	22ff      	movs	r2, #255	; 0xff
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pcb->upap.us_transmits = 0;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	2200      	movs	r2, #0
 80131cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    /* Lower layer up yet? */
    if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d004      	beq.n	80131e4 <upap_authwithpeer+0x80>
	pcb->upap.us_clientstate == UPAPCS_PENDING) {
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
 80131e0:	2b02      	cmp	r3, #2
 80131e2:	d104      	bne.n	80131ee <upap_authwithpeer+0x8a>
	pcb->upap.us_clientstate = UPAPCS_PENDING;
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	2202      	movs	r2, #2
 80131e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	return;
 80131ec:	e004      	b.n	80131f8 <upap_authwithpeer+0x94>
    }

    upap_sauthreq(pcb);		/* Start protocol */
 80131ee:	68f8      	ldr	r0, [r7, #12]
 80131f0:	f000 f92c 	bl	801344c <upap_sauthreq>
 80131f4:	e000      	b.n	80131f8 <upap_authwithpeer+0x94>
        return;
 80131f6:	bf00      	nop
}
 80131f8:	3710      	adds	r7, #16
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bd80      	pop	{r7, pc}

080131fe <upap_timeout>:
#endif /* PPP_SERVER */

/*
 * upap_timeout - Retransmission timer for sending auth-reqs expired.
 */
static void upap_timeout(void *arg) {
 80131fe:	b580      	push	{r7, lr}
 8013200:	b084      	sub	sp, #16
 8013202:	af00      	add	r7, sp, #0
 8013204:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = (ppp_pcb*)arg;
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	60fb      	str	r3, [r7, #12]

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ)
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013210:	2b03      	cmp	r3, #3
 8013212:	d114      	bne.n	801323e <upap_timeout+0x40>
	return;

    if (pcb->upap.us_transmits >= pcb->settings.pap_max_transmits) {
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	7b5b      	ldrb	r3, [r3, #13]
 801321e:	429a      	cmp	r2, r3
 8013220:	d309      	bcc.n	8013236 <upap_timeout+0x38>
	/* give up in disgust */
	ppp_error(("No response to PAP authenticate-requests"));
	pcb->upap.us_clientstate = UPAPCS_BADAUTH;
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	2205      	movs	r2, #5
 8013226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	auth_withpeer_fail(pcb, PPP_PAP);
 801322a:	f24c 0123 	movw	r1, #49187	; 0xc023
 801322e:	68f8      	ldr	r0, [r7, #12]
 8013230:	f7fa fb5a 	bl	800d8e8 <auth_withpeer_fail>
	return;
 8013234:	e004      	b.n	8013240 <upap_timeout+0x42>
    }

    upap_sauthreq(pcb);		/* Send Authenticate-Request */
 8013236:	68f8      	ldr	r0, [r7, #12]
 8013238:	f000 f908 	bl	801344c <upap_sauthreq>
 801323c:	e000      	b.n	8013240 <upap_timeout+0x42>
	return;
 801323e:	bf00      	nop
}
 8013240:	3710      	adds	r7, #16
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}

08013246 <upap_lowerup>:
/*
 * upap_lowerup - The lower layer is up.
 *
 * Start authenticating if pending.
 */
static void upap_lowerup(ppp_pcb *pcb) {
 8013246:	b580      	push	{r7, lr}
 8013248:	b082      	sub	sp, #8
 801324a:	af00      	add	r7, sp, #0
 801324c:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_INITIAL)
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013254:	2b00      	cmp	r3, #0
 8013256:	d104      	bne.n	8013262 <upap_lowerup+0x1c>
	pcb->upap.us_clientstate = UPAPCS_CLOSED;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2201      	movs	r2, #1
 801325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	pcb->upap.us_serverstate = UPAPSS_LISTEN;
	if (pcb->settings.pap_req_timeout > 0)
	    TIMEOUT(upap_reqtimeout, pcb, pcb->settings.pap_req_timeout);
    }
#endif /* PPP_SERVER */
}
 8013260:	e007      	b.n	8013272 <upap_lowerup+0x2c>
    else if (pcb->upap.us_clientstate == UPAPCS_PENDING) {
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013268:	2b02      	cmp	r3, #2
 801326a:	d102      	bne.n	8013272 <upap_lowerup+0x2c>
	upap_sauthreq(pcb);	/* send an auth-request */
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f000 f8ed 	bl	801344c <upap_sauthreq>
}
 8013272:	bf00      	nop
 8013274:	3708      	adds	r7, #8
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}
	...

0801327c <upap_lowerdown>:
/*
 * upap_lowerdown - The lower layer is down.
 *
 * Cancel all timeouts.
 */
static void upap_lowerdown(ppp_pcb *pcb) {
 801327c:	b580      	push	{r7, lr}
 801327e:	b082      	sub	sp, #8
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ)	/* Timeout pending? */
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801328a:	2b03      	cmp	r3, #3
 801328c:	d103      	bne.n	8013296 <upap_lowerdown+0x1a>
	UNTIMEOUT(upap_timeout, pcb);		/* Cancel timeout */
 801328e:	6879      	ldr	r1, [r7, #4]
 8013290:	4805      	ldr	r0, [pc, #20]	; (80132a8 <upap_lowerdown+0x2c>)
 8013292:	f7fa f96b 	bl	800d56c <sys_untimeout>
#if PPP_SERVER
    if (pcb->upap.us_serverstate == UPAPSS_LISTEN && pcb->settings.pap_req_timeout > 0)
	UNTIMEOUT(upap_reqtimeout, pcb);
#endif /* PPP_SERVER */

    pcb->upap.us_clientstate = UPAPCS_INITIAL;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	2200      	movs	r2, #0
 801329a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if PPP_SERVER
    pcb->upap.us_serverstate = UPAPSS_INITIAL;
#endif /* PPP_SERVER */
}
 801329e:	bf00      	nop
 80132a0:	3708      	adds	r7, #8
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}
 80132a6:	bf00      	nop
 80132a8:	080131ff 	.word	0x080131ff

080132ac <upap_protrej>:
/*
 * upap_protrej - Peer doesn't speak this protocol.
 *
 * This shouldn't happen.  In any case, pretend lower layer went down.
 */
static void upap_protrej(ppp_pcb *pcb) {
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b082      	sub	sp, #8
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ) {
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80132ba:	2b03      	cmp	r3, #3
 80132bc:	d104      	bne.n	80132c8 <upap_protrej+0x1c>
	ppp_error(("PAP authentication failed due to protocol-reject"));
	auth_withpeer_fail(pcb, PPP_PAP);
 80132be:	f24c 0123 	movw	r1, #49187	; 0xc023
 80132c2:	6878      	ldr	r0, [r7, #4]
 80132c4:	f7fa fb10 	bl	800d8e8 <auth_withpeer_fail>
    if (pcb->upap.us_serverstate == UPAPSS_LISTEN) {
	ppp_error(("PAP authentication of peer failed (protocol-reject)"));
	auth_peer_fail(pcb, PPP_PAP);
    }
#endif /* PPP_SERVER */
    upap_lowerdown(pcb);
 80132c8:	6878      	ldr	r0, [r7, #4]
 80132ca:	f7ff ffd7 	bl	801327c <upap_lowerdown>
}
 80132ce:	bf00      	nop
 80132d0:	3708      	adds	r7, #8
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}

080132d6 <upap_input>:


/*
 * upap_input - Input UPAP packet.
 */
static void upap_input(ppp_pcb *pcb, u_char *inpacket, int l) {
 80132d6:	b580      	push	{r7, lr}
 80132d8:	b088      	sub	sp, #32
 80132da:	af00      	add	r7, sp, #0
 80132dc:	60f8      	str	r0, [r7, #12]
 80132de:	60b9      	str	r1, [r7, #8]
 80132e0:	607a      	str	r2, [r7, #4]

    /*
     * Parse header (code, id and length).
     * If packet too short, drop it.
     */
    inp = inpacket;
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	61fb      	str	r3, [r7, #28]
    if (l < UPAP_HEADERLEN) {
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	2b03      	cmp	r3, #3
 80132ea:	dd37      	ble.n	801335c <upap_input+0x86>
	UPAPDEBUG(("pap_input: rcvd short header."));
	return;
    }
    GETCHAR(code, inp);
 80132ec:	69fb      	ldr	r3, [r7, #28]
 80132ee:	1c5a      	adds	r2, r3, #1
 80132f0:	61fa      	str	r2, [r7, #28]
 80132f2:	781b      	ldrb	r3, [r3, #0]
 80132f4:	76fb      	strb	r3, [r7, #27]
    GETCHAR(id, inp);
 80132f6:	69fb      	ldr	r3, [r7, #28]
 80132f8:	1c5a      	adds	r2, r3, #1
 80132fa:	61fa      	str	r2, [r7, #28]
 80132fc:	781b      	ldrb	r3, [r3, #0]
 80132fe:	76bb      	strb	r3, [r7, #26]
    GETSHORT(len, inp);
 8013300:	69fb      	ldr	r3, [r7, #28]
 8013302:	1c5a      	adds	r2, r3, #1
 8013304:	61fa      	str	r2, [r7, #28]
 8013306:	781b      	ldrb	r3, [r3, #0]
 8013308:	021b      	lsls	r3, r3, #8
 801330a:	617b      	str	r3, [r7, #20]
 801330c:	69fb      	ldr	r3, [r7, #28]
 801330e:	1c5a      	adds	r2, r3, #1
 8013310:	61fa      	str	r2, [r7, #28]
 8013312:	781b      	ldrb	r3, [r3, #0]
 8013314:	461a      	mov	r2, r3
 8013316:	697b      	ldr	r3, [r7, #20]
 8013318:	4313      	orrs	r3, r2
 801331a:	617b      	str	r3, [r7, #20]
    if (len < UPAP_HEADERLEN) {
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	2b03      	cmp	r3, #3
 8013320:	dd1e      	ble.n	8013360 <upap_input+0x8a>
	UPAPDEBUG(("pap_input: rcvd illegal length."));
	return;
    }
    if (len > l) {
 8013322:	697a      	ldr	r2, [r7, #20]
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	429a      	cmp	r2, r3
 8013328:	dc1c      	bgt.n	8013364 <upap_input+0x8e>
	UPAPDEBUG(("pap_input: rcvd short packet."));
	return;
    }
    len -= UPAP_HEADERLEN;
 801332a:	697b      	ldr	r3, [r7, #20]
 801332c:	3b04      	subs	r3, #4
 801332e:	617b      	str	r3, [r7, #20]

    /*
     * Action depends on code.
     */
    switch (code) {
 8013330:	7efb      	ldrb	r3, [r7, #27]
 8013332:	2b02      	cmp	r3, #2
 8013334:	d004      	beq.n	8013340 <upap_input+0x6a>
 8013336:	2b03      	cmp	r3, #3
 8013338:	d009      	beq.n	801334e <upap_input+0x78>
 801333a:	2b01      	cmp	r3, #1
 801333c:	d014      	beq.n	8013368 <upap_input+0x92>
    case UPAP_AUTHNAK:
	upap_rauthnak(pcb, inp, id, len);
	break;

    default:				/* XXX Need code reject */
	break;
 801333e:	e014      	b.n	801336a <upap_input+0x94>
	upap_rauthack(pcb, inp, id, len);
 8013340:	7eba      	ldrb	r2, [r7, #26]
 8013342:	697b      	ldr	r3, [r7, #20]
 8013344:	69f9      	ldr	r1, [r7, #28]
 8013346:	68f8      	ldr	r0, [r7, #12]
 8013348:	f000 f812 	bl	8013370 <upap_rauthack>
	break;
 801334c:	e00d      	b.n	801336a <upap_input+0x94>
	upap_rauthnak(pcb, inp, id, len);
 801334e:	7eba      	ldrb	r2, [r7, #26]
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	69f9      	ldr	r1, [r7, #28]
 8013354:	68f8      	ldr	r0, [r7, #12]
 8013356:	f000 f843 	bl	80133e0 <upap_rauthnak>
	break;
 801335a:	e006      	b.n	801336a <upap_input+0x94>
	return;
 801335c:	bf00      	nop
 801335e:	e004      	b.n	801336a <upap_input+0x94>
	return;
 8013360:	bf00      	nop
 8013362:	e002      	b.n	801336a <upap_input+0x94>
	return;
 8013364:	bf00      	nop
 8013366:	e000      	b.n	801336a <upap_input+0x94>
	break;
 8013368:	bf00      	nop
    }
}
 801336a:	3720      	adds	r7, #32
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}

08013370 <upap_rauthack>:
#endif /* PPP_SERVER */

/*
 * upap_rauthack - Receive Authenticate-Ack.
 */
static void upap_rauthack(ppp_pcb *pcb, u_char *inp, int id, int len) {
 8013370:	b580      	push	{r7, lr}
 8013372:	b086      	sub	sp, #24
 8013374:	af00      	add	r7, sp, #0
 8013376:	60f8      	str	r0, [r7, #12]
 8013378:	60b9      	str	r1, [r7, #8]
 801337a:	607a      	str	r2, [r7, #4]
 801337c:	603b      	str	r3, [r7, #0]
    u_char msglen;
    char *msg;
    LWIP_UNUSED_ARG(id);

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013384:	2b03      	cmp	r3, #3
 8013386:	d122      	bne.n	80133ce <upap_rauthack+0x5e>
	return;

    /*
     * Parse message.
     */
    if (len < 1) {
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	2b00      	cmp	r3, #0
 801338c:	dd10      	ble.n	80133b0 <upap_rauthack+0x40>
	UPAPDEBUG(("pap_rauthack: ignoring missing msg-length."));
    } else {
	GETCHAR(msglen, inp);
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	1c5a      	adds	r2, r3, #1
 8013392:	60ba      	str	r2, [r7, #8]
 8013394:	781b      	ldrb	r3, [r3, #0]
 8013396:	75fb      	strb	r3, [r7, #23]
	if (msglen > 0) {
 8013398:	7dfb      	ldrb	r3, [r7, #23]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d008      	beq.n	80133b0 <upap_rauthack+0x40>
	    len -= sizeof (u_char);
 801339e:	683b      	ldr	r3, [r7, #0]
 80133a0:	3b01      	subs	r3, #1
 80133a2:	603b      	str	r3, [r7, #0]
	    if (len < msglen) {
 80133a4:	7dfa      	ldrb	r2, [r7, #23]
 80133a6:	683b      	ldr	r3, [r7, #0]
 80133a8:	429a      	cmp	r2, r3
 80133aa:	dc12      	bgt.n	80133d2 <upap_rauthack+0x62>
		UPAPDEBUG(("pap_rauthack: rcvd short packet."));
		return;
	    }
	    msg = (char *) inp;
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	613b      	str	r3, [r7, #16]
	    PRINTMSG(msg, msglen);
	}
    }

    UNTIMEOUT(upap_timeout, pcb);
 80133b0:	68f9      	ldr	r1, [r7, #12]
 80133b2:	480a      	ldr	r0, [pc, #40]	; (80133dc <upap_rauthack+0x6c>)
 80133b4:	f7fa f8da 	bl	800d56c <sys_untimeout>
    pcb->upap.us_clientstate = UPAPCS_OPEN;
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	2204      	movs	r2, #4
 80133bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    auth_withpeer_success(pcb, PPP_PAP, 0);
 80133c0:	2200      	movs	r2, #0
 80133c2:	f24c 0123 	movw	r1, #49187	; 0xc023
 80133c6:	68f8      	ldr	r0, [r7, #12]
 80133c8:	f7fa faa2 	bl	800d910 <auth_withpeer_success>
 80133cc:	e002      	b.n	80133d4 <upap_rauthack+0x64>
	return;
 80133ce:	bf00      	nop
 80133d0:	e000      	b.n	80133d4 <upap_rauthack+0x64>
		return;
 80133d2:	bf00      	nop
}
 80133d4:	3718      	adds	r7, #24
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}
 80133da:	bf00      	nop
 80133dc:	080131ff 	.word	0x080131ff

080133e0 <upap_rauthnak>:


/*
 * upap_rauthnak - Receive Authenticate-Nak.
 */
static void upap_rauthnak(ppp_pcb *pcb, u_char *inp, int id, int len) {
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b086      	sub	sp, #24
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	60f8      	str	r0, [r7, #12]
 80133e8:	60b9      	str	r1, [r7, #8]
 80133ea:	607a      	str	r2, [r7, #4]
 80133ec:	603b      	str	r3, [r7, #0]
    u_char msglen;
    char *msg;
    LWIP_UNUSED_ARG(id);

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80133f4:	2b03      	cmp	r3, #3
 80133f6:	d121      	bne.n	801343c <upap_rauthnak+0x5c>
	return;

    /*
     * Parse message.
     */
    if (len < 1) {
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	dd10      	ble.n	8013420 <upap_rauthnak+0x40>
	UPAPDEBUG(("pap_rauthnak: ignoring missing msg-length."));
    } else {
	GETCHAR(msglen, inp);
 80133fe:	68bb      	ldr	r3, [r7, #8]
 8013400:	1c5a      	adds	r2, r3, #1
 8013402:	60ba      	str	r2, [r7, #8]
 8013404:	781b      	ldrb	r3, [r3, #0]
 8013406:	75fb      	strb	r3, [r7, #23]
	if (msglen > 0) {
 8013408:	7dfb      	ldrb	r3, [r7, #23]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d008      	beq.n	8013420 <upap_rauthnak+0x40>
	    len -= sizeof (u_char);
 801340e:	683b      	ldr	r3, [r7, #0]
 8013410:	3b01      	subs	r3, #1
 8013412:	603b      	str	r3, [r7, #0]
	    if (len < msglen) {
 8013414:	7dfa      	ldrb	r2, [r7, #23]
 8013416:	683b      	ldr	r3, [r7, #0]
 8013418:	429a      	cmp	r2, r3
 801341a:	dc11      	bgt.n	8013440 <upap_rauthnak+0x60>
		UPAPDEBUG(("pap_rauthnak: rcvd short packet."));
		return;
	    }
	    msg = (char *) inp;
 801341c:	68bb      	ldr	r3, [r7, #8]
 801341e:	613b      	str	r3, [r7, #16]
	    PRINTMSG(msg, msglen);
	}
    }

    UNTIMEOUT(upap_timeout, pcb);
 8013420:	68f9      	ldr	r1, [r7, #12]
 8013422:	4809      	ldr	r0, [pc, #36]	; (8013448 <upap_rauthnak+0x68>)
 8013424:	f7fa f8a2 	bl	800d56c <sys_untimeout>
    pcb->upap.us_clientstate = UPAPCS_BADAUTH;
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	2205      	movs	r2, #5
 801342c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    ppp_error(("PAP authentication failed"));
    auth_withpeer_fail(pcb, PPP_PAP);
 8013430:	f24c 0123 	movw	r1, #49187	; 0xc023
 8013434:	68f8      	ldr	r0, [r7, #12]
 8013436:	f7fa fa57 	bl	800d8e8 <auth_withpeer_fail>
 801343a:	e002      	b.n	8013442 <upap_rauthnak+0x62>
	return;
 801343c:	bf00      	nop
 801343e:	e000      	b.n	8013442 <upap_rauthnak+0x62>
		return;
 8013440:	bf00      	nop
}
 8013442:	3718      	adds	r7, #24
 8013444:	46bd      	mov	sp, r7
 8013446:	bd80      	pop	{r7, pc}
 8013448:	080131ff 	.word	0x080131ff

0801344c <upap_sauthreq>:


/*
 * upap_sauthreq - Send an Authenticate-Request.
 */
static void upap_sauthreq(ppp_pcb *pcb) {
 801344c:	b580      	push	{r7, lr}
 801344e:	b086      	sub	sp, #24
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
	pcb->upap.us_userlen + pcb->upap.us_passwdlen;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801345a:	461a      	mov	r2, r3
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013462:	4413      	add	r3, r2
 8013464:	3306      	adds	r3, #6
    outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
 8013466:	617b      	str	r3, [r7, #20]
    p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN +outlen), PBUF_RAM);
 8013468:	697b      	ldr	r3, [r7, #20]
 801346a:	b29b      	uxth	r3, r3
 801346c:	3304      	adds	r3, #4
 801346e:	b29b      	uxth	r3, r3
 8013470:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013474:	4619      	mov	r1, r3
 8013476:	2000      	movs	r0, #0
 8013478:	f7f2 fc32 	bl	8005ce0 <pbuf_alloc>
 801347c:	6138      	str	r0, [r7, #16]
    if(NULL == p)
 801347e:	693b      	ldr	r3, [r7, #16]
 8013480:	2b00      	cmp	r3, #0
 8013482:	f000 808a 	beq.w	801359a <upap_sauthreq+0x14e>
        return;
    if(p->tot_len != p->len) {
 8013486:	693b      	ldr	r3, [r7, #16]
 8013488:	891a      	ldrh	r2, [r3, #8]
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	895b      	ldrh	r3, [r3, #10]
 801348e:	429a      	cmp	r2, r3
 8013490:	d003      	beq.n	801349a <upap_sauthreq+0x4e>
        pbuf_free(p);
 8013492:	6938      	ldr	r0, [r7, #16]
 8013494:	f7f2 fe8e 	bl	80061b4 <pbuf_free>
        return;
 8013498:	e080      	b.n	801359c <upap_sauthreq+0x150>
    }

    outp = (u_char*)p->payload;
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	685b      	ldr	r3, [r3, #4]
 801349e:	60fb      	str	r3, [r7, #12]
    MAKEHEADER(outp, PPP_PAP);
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	1c5a      	adds	r2, r3, #1
 80134a4:	60fa      	str	r2, [r7, #12]
 80134a6:	22ff      	movs	r2, #255	; 0xff
 80134a8:	701a      	strb	r2, [r3, #0]
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	1c5a      	adds	r2, r3, #1
 80134ae:	60fa      	str	r2, [r7, #12]
 80134b0:	2203      	movs	r2, #3
 80134b2:	701a      	strb	r2, [r3, #0]
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	1c5a      	adds	r2, r3, #1
 80134b8:	60fa      	str	r2, [r7, #12]
 80134ba:	22c0      	movs	r2, #192	; 0xc0
 80134bc:	701a      	strb	r2, [r3, #0]
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	1c5a      	adds	r2, r3, #1
 80134c2:	60fa      	str	r2, [r7, #12]
 80134c4:	2223      	movs	r2, #35	; 0x23
 80134c6:	701a      	strb	r2, [r3, #0]

    PUTCHAR(UPAP_AUTHREQ, outp);
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	1c5a      	adds	r2, r3, #1
 80134cc:	60fa      	str	r2, [r7, #12]
 80134ce:	2201      	movs	r2, #1
 80134d0:	701a      	strb	r2, [r3, #0]
    PUTCHAR(++pcb->upap.us_id, outp);
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	1c5a      	adds	r2, r3, #1
 80134d6:	60fa      	str	r2, [r7, #12]
 80134d8:	687a      	ldr	r2, [r7, #4]
 80134da:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 80134de:	3201      	adds	r2, #1
 80134e0:	b2d1      	uxtb	r1, r2
 80134e2:	687a      	ldr	r2, [r7, #4]
 80134e4:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
 80134e8:	687a      	ldr	r2, [r7, #4]
 80134ea:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 80134ee:	701a      	strb	r2, [r3, #0]
    PUTSHORT(outlen, outp);
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	1c5a      	adds	r2, r3, #1
 80134f4:	60fa      	str	r2, [r7, #12]
 80134f6:	697a      	ldr	r2, [r7, #20]
 80134f8:	1212      	asrs	r2, r2, #8
 80134fa:	b2d2      	uxtb	r2, r2
 80134fc:	701a      	strb	r2, [r3, #0]
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	1c5a      	adds	r2, r3, #1
 8013502:	60fa      	str	r2, [r7, #12]
 8013504:	697a      	ldr	r2, [r7, #20]
 8013506:	b2d2      	uxtb	r2, r2
 8013508:	701a      	strb	r2, [r3, #0]
    PUTCHAR(pcb->upap.us_userlen, outp);
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	1c5a      	adds	r2, r3, #1
 801350e:	60fa      	str	r2, [r7, #12]
 8013510:	687a      	ldr	r2, [r7, #4]
 8013512:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8013516:	701a      	strb	r2, [r3, #0]
    MEMCPY(outp, pcb->upap.us_user, pcb->upap.us_userlen);
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013522:	461a      	mov	r2, r3
 8013524:	68f8      	ldr	r0, [r7, #12]
 8013526:	f000 fd65 	bl	8013ff4 <memcpy>
    INCPTR(pcb->upap.us_userlen, outp);
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013530:	461a      	mov	r2, r3
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	4413      	add	r3, r2
 8013536:	60fb      	str	r3, [r7, #12]
    PUTCHAR(pcb->upap.us_passwdlen, outp);
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	1c5a      	adds	r2, r3, #1
 801353c:	60fa      	str	r2, [r7, #12]
 801353e:	687a      	ldr	r2, [r7, #4]
 8013540:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8013544:	701a      	strb	r2, [r3, #0]
    MEMCPY(outp, pcb->upap.us_passwd, pcb->upap.us_passwdlen);
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013550:	461a      	mov	r2, r3
 8013552:	68f8      	ldr	r0, [r7, #12]
 8013554:	f000 fd4e 	bl	8013ff4 <memcpy>

    ppp_write(pcb, p);
 8013558:	6939      	ldr	r1, [r7, #16]
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f7fe ff80 	bl	8012460 <ppp_write>

    TIMEOUT(upap_timeout, pcb, pcb->settings.pap_timeout_time);
 8013560:	6879      	ldr	r1, [r7, #4]
 8013562:	4810      	ldr	r0, [pc, #64]	; (80135a4 <upap_sauthreq+0x158>)
 8013564:	f7fa f802 	bl	800d56c <sys_untimeout>
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	7b1b      	ldrb	r3, [r3, #12]
 801356c:	461a      	mov	r2, r3
 801356e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013572:	fb03 f302 	mul.w	r3, r3, r2
 8013576:	687a      	ldr	r2, [r7, #4]
 8013578:	490a      	ldr	r1, [pc, #40]	; (80135a4 <upap_sauthreq+0x158>)
 801357a:	4618      	mov	r0, r3
 801357c:	f7f9 ffca 	bl	800d514 <sys_timeout>
    ++pcb->upap.us_transmits;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013586:	3301      	adds	r3, #1
 8013588:	b2da      	uxtb	r2, r3
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    pcb->upap.us_clientstate = UPAPCS_AUTHREQ;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2203      	movs	r2, #3
 8013594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013598:	e000      	b.n	801359c <upap_sauthreq+0x150>
        return;
 801359a:	bf00      	nop
}
 801359c:	3718      	adds	r7, #24
 801359e:	46bd      	mov	sp, r7
 80135a0:	bd80      	pop	{r7, pc}
 80135a2:	bf00      	nop
 80135a4:	080131ff 	.word	0x080131ff

080135a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80135a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80135e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80135ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80135ae:	e003      	b.n	80135b8 <LoopCopyDataInit>

080135b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80135b0:	4b0c      	ldr	r3, [pc, #48]	; (80135e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80135b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80135b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80135b6:	3104      	adds	r1, #4

080135b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80135b8:	480b      	ldr	r0, [pc, #44]	; (80135e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80135ba:	4b0c      	ldr	r3, [pc, #48]	; (80135ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80135bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80135be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80135c0:	d3f6      	bcc.n	80135b0 <CopyDataInit>
  ldr  r2, =_sbss
 80135c2:	4a0b      	ldr	r2, [pc, #44]	; (80135f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80135c4:	e002      	b.n	80135cc <LoopFillZerobss>

080135c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80135c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80135c8:	f842 3b04 	str.w	r3, [r2], #4

080135cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80135cc:	4b09      	ldr	r3, [pc, #36]	; (80135f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80135ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80135d0:	d3f9      	bcc.n	80135c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80135d2:	f000 f8d5 	bl	8013780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80135d6:	f000 fce9 	bl	8013fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80135da:	f7ed ff29 	bl	8001430 <main>
  bx  lr    
 80135de:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80135e0:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80135e4:	08018314 	.word	0x08018314
  ldr  r0, =_sdata
 80135e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80135ec:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80135f0:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80135f4:	20002484 	.word	0x20002484

080135f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80135f8:	e7fe      	b.n	80135f8 <ADC_IRQHandler>

080135fa <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80135fa:	b480      	push	{r7}
 80135fc:	af00      	add	r7, sp, #0
}
 80135fe:	bf00      	nop
 8013600:	46bd      	mov	sp, r7
 8013602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013606:	4770      	bx	lr

08013608 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8013608:	b480      	push	{r7}
 801360a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 801360c:	e7fe      	b.n	801360c <HardFault_Handler+0x4>

0801360e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 801360e:	b480      	push	{r7}
 8013610:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8013612:	e7fe      	b.n	8013612 <MemManage_Handler+0x4>

08013614 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8013614:	b480      	push	{r7}
 8013616:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8013618:	e7fe      	b.n	8013618 <BusFault_Handler+0x4>

0801361a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 801361a:	b480      	push	{r7}
 801361c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 801361e:	e7fe      	b.n	801361e <UsageFault_Handler+0x4>

08013620 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8013620:	b480      	push	{r7}
 8013622:	af00      	add	r7, sp, #0
}
 8013624:	bf00      	nop
 8013626:	46bd      	mov	sp, r7
 8013628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362c:	4770      	bx	lr

0801362e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 801362e:	b480      	push	{r7}
 8013630:	af00      	add	r7, sp, #0
}
 8013632:	bf00      	nop
 8013634:	46bd      	mov	sp, r7
 8013636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363a:	4770      	bx	lr

0801363c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 801363c:	b480      	push	{r7}
 801363e:	af00      	add	r7, sp, #0
}
 8013640:	bf00      	nop
 8013642:	46bd      	mov	sp, r7
 8013644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013648:	4770      	bx	lr

0801364a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 801364a:	b480      	push	{r7}
 801364c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 801364e:	bf00      	nop
 8013650:	46bd      	mov	sp, r7
 8013652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013656:	4770      	bx	lr

08013658 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013658:	b480      	push	{r7}
 801365a:	af00      	add	r7, sp, #0
	errno = ENOSYS;
 801365c:	4b04      	ldr	r3, [pc, #16]	; (8013670 <_getpid+0x18>)
 801365e:	2226      	movs	r2, #38	; 0x26
 8013660:	601a      	str	r2, [r3, #0]
	return -1;
 8013662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013666:	4618      	mov	r0, r3
 8013668:	46bd      	mov	sp, r7
 801366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366e:	4770      	bx	lr
 8013670:	20002480 	.word	0x20002480

08013674 <_kill>:
  errno = ENOSYS;
  return -1;
}

int _kill(int32_t pid, int32_t sig)
{
 8013674:	b480      	push	{r7}
 8013676:	b083      	sub	sp, #12
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 801367e:	4b05      	ldr	r3, [pc, #20]	; (8013694 <_kill+0x20>)
 8013680:	2226      	movs	r2, #38	; 0x26
 8013682:	601a      	str	r2, [r3, #0]
	return -1;
 8013684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013688:	4618      	mov	r0, r3
 801368a:	370c      	adds	r7, #12
 801368c:	46bd      	mov	sp, r7
 801368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013692:	4770      	bx	lr
 8013694:	20002480 	.word	0x20002480

08013698 <_exit>:

void _exit(int32_t status)
{
 8013698:	b480      	push	{r7}
 801369a:	b083      	sub	sp, #12
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
	while (1) {}		/* Make sure we hang here */
 80136a0:	e7fe      	b.n	80136a0 <_exit+0x8>
	...

080136a4 <_write>:
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80136a4:	b480      	push	{r7}
 80136a6:	b085      	sub	sp, #20
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	60f8      	str	r0, [r7, #12]
 80136ac:	60b9      	str	r1, [r7, #8]
 80136ae:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	
	errno = ENOSYS;
 80136b0:	4b05      	ldr	r3, [pc, #20]	; (80136c8 <_write+0x24>)
 80136b2:	2226      	movs	r2, #38	; 0x26
 80136b4:	601a      	str	r2, [r3, #0]
	return -1;
 80136b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80136ba:	4618      	mov	r0, r3
 80136bc:	3714      	adds	r7, #20
 80136be:	46bd      	mov	sp, r7
 80136c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c4:	4770      	bx	lr
 80136c6:	bf00      	nop
 80136c8:	20002480 	.word	0x20002480

080136cc <_sbrk>:

void * _sbrk(int32_t incr)
{
 80136cc:	b480      	push	{r7}
 80136ce:	b085      	sub	sp, #20
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 80136d4:	4b0b      	ldr	r3, [pc, #44]	; (8013704 <_sbrk+0x38>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d102      	bne.n	80136e2 <_sbrk+0x16>
		heap_end = & end;
 80136dc:	4b09      	ldr	r3, [pc, #36]	; (8013704 <_sbrk+0x38>)
 80136de:	4a0a      	ldr	r2, [pc, #40]	; (8013708 <_sbrk+0x3c>)
 80136e0:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 80136e2:	4b08      	ldr	r3, [pc, #32]	; (8013704 <_sbrk+0x38>)
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 80136e8:	4b06      	ldr	r3, [pc, #24]	; (8013704 <_sbrk+0x38>)
 80136ea:	681a      	ldr	r2, [r3, #0]
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	4413      	add	r3, r2
 80136f0:	4a04      	ldr	r2, [pc, #16]	; (8013704 <_sbrk+0x38>)
 80136f2:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 80136f4:	68fb      	ldr	r3, [r7, #12]
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	3714      	adds	r7, #20
 80136fa:	46bd      	mov	sp, r7
 80136fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013700:	4770      	bx	lr
 8013702:	bf00      	nop
 8013704:	20000770 	.word	0x20000770
 8013708:	20002484 	.word	0x20002484

0801370c <_close>:

int _close(int32_t file)
{
 801370c:	b480      	push	{r7}
 801370e:	b083      	sub	sp, #12
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8013714:	4b05      	ldr	r3, [pc, #20]	; (801372c <_close+0x20>)
 8013716:	2226      	movs	r2, #38	; 0x26
 8013718:	601a      	str	r2, [r3, #0]
	return -1;
 801371a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801371e:	4618      	mov	r0, r3
 8013720:	370c      	adds	r7, #12
 8013722:	46bd      	mov	sp, r7
 8013724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013728:	4770      	bx	lr
 801372a:	bf00      	nop
 801372c:	20002480 	.word	0x20002480

08013730 <_lseek>:
	errno = ENOSYS;
	return 0;
}

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8013730:	b480      	push	{r7}
 8013732:	b085      	sub	sp, #20
 8013734:	af00      	add	r7, sp, #0
 8013736:	60f8      	str	r0, [r7, #12]
 8013738:	60b9      	str	r1, [r7, #8]
 801373a:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 801373c:	4b05      	ldr	r3, [pc, #20]	; (8013754 <_lseek+0x24>)
 801373e:	2226      	movs	r2, #38	; 0x26
 8013740:	601a      	str	r2, [r3, #0]
	return -1;
 8013742:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013746:	4618      	mov	r0, r3
 8013748:	3714      	adds	r7, #20
 801374a:	46bd      	mov	sp, r7
 801374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013750:	4770      	bx	lr
 8013752:	bf00      	nop
 8013754:	20002480 	.word	0x20002480

08013758 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8013758:	b480      	push	{r7}
 801375a:	b085      	sub	sp, #20
 801375c:	af00      	add	r7, sp, #0
 801375e:	60f8      	str	r0, [r7, #12]
 8013760:	60b9      	str	r1, [r7, #8]
 8013762:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8013764:	4b05      	ldr	r3, [pc, #20]	; (801377c <_read+0x24>)
 8013766:	2226      	movs	r2, #38	; 0x26
 8013768:	601a      	str	r2, [r3, #0]
	return -1;
 801376a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801376e:	4618      	mov	r0, r3
 8013770:	3714      	adds	r7, #20
 8013772:	46bd      	mov	sp, r7
 8013774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013778:	4770      	bx	lr
 801377a:	bf00      	nop
 801377c:	20002480 	.word	0x20002480

08013780 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8013784:	4a16      	ldr	r2, [pc, #88]	; (80137e0 <SystemInit+0x60>)
 8013786:	4b16      	ldr	r3, [pc, #88]	; (80137e0 <SystemInit+0x60>)
 8013788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801378c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8013794:	4a13      	ldr	r2, [pc, #76]	; (80137e4 <SystemInit+0x64>)
 8013796:	4b13      	ldr	r3, [pc, #76]	; (80137e4 <SystemInit+0x64>)
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	f043 0301 	orr.w	r3, r3, #1
 801379e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80137a0:	4b10      	ldr	r3, [pc, #64]	; (80137e4 <SystemInit+0x64>)
 80137a2:	2200      	movs	r2, #0
 80137a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80137a6:	4a0f      	ldr	r2, [pc, #60]	; (80137e4 <SystemInit+0x64>)
 80137a8:	4b0e      	ldr	r3, [pc, #56]	; (80137e4 <SystemInit+0x64>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80137b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80137b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80137b6:	4b0b      	ldr	r3, [pc, #44]	; (80137e4 <SystemInit+0x64>)
 80137b8:	4a0b      	ldr	r2, [pc, #44]	; (80137e8 <SystemInit+0x68>)
 80137ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80137bc:	4a09      	ldr	r2, [pc, #36]	; (80137e4 <SystemInit+0x64>)
 80137be:	4b09      	ldr	r3, [pc, #36]	; (80137e4 <SystemInit+0x64>)
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80137c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80137c8:	4b06      	ldr	r3, [pc, #24]	; (80137e4 <SystemInit+0x64>)
 80137ca:	2200      	movs	r2, #0
 80137cc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80137ce:	f000 f80d 	bl	80137ec <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80137d2:	4b03      	ldr	r3, [pc, #12]	; (80137e0 <SystemInit+0x60>)
 80137d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80137d8:	609a      	str	r2, [r3, #8]
#endif
}
 80137da:	bf00      	nop
 80137dc:	bd80      	pop	{r7, pc}
 80137de:	bf00      	nop
 80137e0:	e000ed00 	.word	0xe000ed00
 80137e4:	40023800 	.word	0x40023800
 80137e8:	24003010 	.word	0x24003010

080137ec <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80137ec:	b480      	push	{r7}
 80137ee:	b083      	sub	sp, #12
 80137f0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80137f2:	2300      	movs	r3, #0
 80137f4:	607b      	str	r3, [r7, #4]
 80137f6:	2300      	movs	r3, #0
 80137f8:	603b      	str	r3, [r7, #0]
  //RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80137fa:	4b33      	ldr	r3, [pc, #204]	; (80138c8 <SetSysClock+0xdc>)
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013802:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	3301      	adds	r3, #1
 8013808:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 801380a:	683b      	ldr	r3, [r7, #0]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d103      	bne.n	8013818 <SetSysClock+0x2c>
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8013816:	d1f0      	bne.n	80137fa <SetSysClock+0xe>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8013818:	4b2b      	ldr	r3, [pc, #172]	; (80138c8 <SetSysClock+0xdc>)
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013820:	2b00      	cmp	r3, #0
 8013822:	d002      	beq.n	801382a <SetSysClock+0x3e>
  {
    HSEStatus = (uint32_t)0x01;
 8013824:	2301      	movs	r3, #1
 8013826:	603b      	str	r3, [r7, #0]
 8013828:	e001      	b.n	801382e <SetSysClock+0x42>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 801382a:	2300      	movs	r3, #0
 801382c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	2b01      	cmp	r3, #1
 8013832:	d142      	bne.n	80138ba <SetSysClock+0xce>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8013834:	4a24      	ldr	r2, [pc, #144]	; (80138c8 <SetSysClock+0xdc>)
 8013836:	4b24      	ldr	r3, [pc, #144]	; (80138c8 <SetSysClock+0xdc>)
 8013838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801383a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801383e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8013840:	4a22      	ldr	r2, [pc, #136]	; (80138cc <SetSysClock+0xe0>)
 8013842:	4b22      	ldr	r3, [pc, #136]	; (80138cc <SetSysClock+0xe0>)
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801384a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 801384c:	4a1e      	ldr	r2, [pc, #120]	; (80138c8 <SetSysClock+0xdc>)
 801384e:	4b1e      	ldr	r3, [pc, #120]	; (80138c8 <SetSysClock+0xdc>)
 8013850:	689b      	ldr	r3, [r3, #8]
 8013852:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8013854:	4a1c      	ldr	r2, [pc, #112]	; (80138c8 <SetSysClock+0xdc>)
 8013856:	4b1c      	ldr	r3, [pc, #112]	; (80138c8 <SetSysClock+0xdc>)
 8013858:	689b      	ldr	r3, [r3, #8]
 801385a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801385e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8013860:	4a19      	ldr	r2, [pc, #100]	; (80138c8 <SetSysClock+0xdc>)
 8013862:	4b19      	ldr	r3, [pc, #100]	; (80138c8 <SetSysClock+0xdc>)
 8013864:	689b      	ldr	r3, [r3, #8]
 8013866:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 801386a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 801386c:	4b16      	ldr	r3, [pc, #88]	; (80138c8 <SetSysClock+0xdc>)
 801386e:	4a18      	ldr	r2, [pc, #96]	; (80138d0 <SetSysClock+0xe4>)
 8013870:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8013872:	4a15      	ldr	r2, [pc, #84]	; (80138c8 <SetSysClock+0xdc>)
 8013874:	4b14      	ldr	r3, [pc, #80]	; (80138c8 <SetSysClock+0xdc>)
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801387c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 801387e:	bf00      	nop
 8013880:	4b11      	ldr	r3, [pc, #68]	; (80138c8 <SetSysClock+0xdc>)
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013888:	2b00      	cmp	r3, #0
 801388a:	d0f9      	beq.n	8013880 <SetSysClock+0x94>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 801388c:	4b11      	ldr	r3, [pc, #68]	; (80138d4 <SetSysClock+0xe8>)
 801388e:	f240 7205 	movw	r2, #1797	; 0x705
 8013892:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8013894:	4a0c      	ldr	r2, [pc, #48]	; (80138c8 <SetSysClock+0xdc>)
 8013896:	4b0c      	ldr	r3, [pc, #48]	; (80138c8 <SetSysClock+0xdc>)
 8013898:	689b      	ldr	r3, [r3, #8]
 801389a:	f023 0303 	bic.w	r3, r3, #3
 801389e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80138a0:	4a09      	ldr	r2, [pc, #36]	; (80138c8 <SetSysClock+0xdc>)
 80138a2:	4b09      	ldr	r3, [pc, #36]	; (80138c8 <SetSysClock+0xdc>)
 80138a4:	689b      	ldr	r3, [r3, #8]
 80138a6:	f043 0302 	orr.w	r3, r3, #2
 80138aa:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80138ac:	bf00      	nop
 80138ae:	4b06      	ldr	r3, [pc, #24]	; (80138c8 <SetSysClock+0xdc>)
 80138b0:	689b      	ldr	r3, [r3, #8]
 80138b2:	f003 030c 	and.w	r3, r3, #12
 80138b6:	2b08      	cmp	r3, #8
 80138b8:	d1f9      	bne.n	80138ae <SetSysClock+0xc2>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80138ba:	bf00      	nop
 80138bc:	370c      	adds	r7, #12
 80138be:	46bd      	mov	sp, r7
 80138c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c4:	4770      	bx	lr
 80138c6:	bf00      	nop
 80138c8:	40023800 	.word	0x40023800
 80138cc:	40007000 	.word	0x40007000
 80138d0:	07405419 	.word	0x07405419
 80138d4:	40023c00 	.word	0x40023c00

080138d8 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80138d8:	b480      	push	{r7}
 80138da:	b087      	sub	sp, #28
 80138dc:	af00      	add	r7, sp, #0
 80138de:	60f8      	str	r0, [r7, #12]
 80138e0:	60b9      	str	r1, [r7, #8]
 80138e2:	607a      	str	r2, [r7, #4]
	int div = 1;
 80138e4:	2301      	movs	r3, #1
 80138e6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80138e8:	e004      	b.n	80138f4 <ts_itoa+0x1c>
		div *= base;
 80138ea:	697b      	ldr	r3, [r7, #20]
 80138ec:	687a      	ldr	r2, [r7, #4]
 80138ee:	fb02 f303 	mul.w	r3, r2, r3
 80138f2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	68ba      	ldr	r2, [r7, #8]
 80138f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	429a      	cmp	r2, r3
 8013900:	d2f3      	bcs.n	80138ea <ts_itoa+0x12>

	while (div != 0)
 8013902:	e029      	b.n	8013958 <ts_itoa+0x80>
	{
		int num = d/div;
 8013904:	697b      	ldr	r3, [r7, #20]
 8013906:	68ba      	ldr	r2, [r7, #8]
 8013908:	fbb2 f3f3 	udiv	r3, r2, r3
 801390c:	613b      	str	r3, [r7, #16]
		d = d%div;
 801390e:	697a      	ldr	r2, [r7, #20]
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	fbb3 f1f2 	udiv	r1, r3, r2
 8013916:	fb02 f201 	mul.w	r2, r2, r1
 801391a:	1a9b      	subs	r3, r3, r2
 801391c:	60bb      	str	r3, [r7, #8]
		div /= base;
 801391e:	697a      	ldr	r2, [r7, #20]
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	fb92 f3f3 	sdiv	r3, r2, r3
 8013926:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8013928:	693b      	ldr	r3, [r7, #16]
 801392a:	2b09      	cmp	r3, #9
 801392c:	dd0a      	ble.n	8013944 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	1c59      	adds	r1, r3, #1
 8013934:	68fa      	ldr	r2, [r7, #12]
 8013936:	6011      	str	r1, [r2, #0]
 8013938:	693a      	ldr	r2, [r7, #16]
 801393a:	b2d2      	uxtb	r2, r2
 801393c:	3237      	adds	r2, #55	; 0x37
 801393e:	b2d2      	uxtb	r2, r2
 8013940:	701a      	strb	r2, [r3, #0]
 8013942:	e009      	b.n	8013958 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	1c59      	adds	r1, r3, #1
 801394a:	68fa      	ldr	r2, [r7, #12]
 801394c:	6011      	str	r1, [r2, #0]
 801394e:	693a      	ldr	r2, [r7, #16]
 8013950:	b2d2      	uxtb	r2, r2
 8013952:	3230      	adds	r2, #48	; 0x30
 8013954:	b2d2      	uxtb	r2, r2
 8013956:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8013958:	697b      	ldr	r3, [r7, #20]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d1d2      	bne.n	8013904 <ts_itoa+0x2c>
	}
}
 801395e:	bf00      	nop
 8013960:	371c      	adds	r7, #28
 8013962:	46bd      	mov	sp, r7
 8013964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013968:	4770      	bx	lr

0801396a <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 801396a:	b580      	push	{r7, lr}
 801396c:	b088      	sub	sp, #32
 801396e:	af00      	add	r7, sp, #0
 8013970:	60f8      	str	r0, [r7, #12]
 8013972:	60b9      	str	r1, [r7, #8]
 8013974:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	617b      	str	r3, [r7, #20]
	while(*fmt)
 801397a:	e07d      	b.n	8013a78 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 801397c:	68bb      	ldr	r3, [r7, #8]
 801397e:	781b      	ldrb	r3, [r3, #0]
 8013980:	2b25      	cmp	r3, #37	; 0x25
 8013982:	d171      	bne.n	8013a68 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8013984:	68bb      	ldr	r3, [r7, #8]
 8013986:	3301      	adds	r3, #1
 8013988:	60bb      	str	r3, [r7, #8]
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	781b      	ldrb	r3, [r3, #0]
 801398e:	2b64      	cmp	r3, #100	; 0x64
 8013990:	d01e      	beq.n	80139d0 <ts_formatstring+0x66>
 8013992:	2b64      	cmp	r3, #100	; 0x64
 8013994:	dc06      	bgt.n	80139a4 <ts_formatstring+0x3a>
 8013996:	2b58      	cmp	r3, #88	; 0x58
 8013998:	d050      	beq.n	8013a3c <ts_formatstring+0xd2>
 801399a:	2b63      	cmp	r3, #99	; 0x63
 801399c:	d00e      	beq.n	80139bc <ts_formatstring+0x52>
 801399e:	2b25      	cmp	r3, #37	; 0x25
 80139a0:	d058      	beq.n	8013a54 <ts_formatstring+0xea>
 80139a2:	e05d      	b.n	8013a60 <ts_formatstring+0xf6>
 80139a4:	2b73      	cmp	r3, #115	; 0x73
 80139a6:	d02b      	beq.n	8013a00 <ts_formatstring+0x96>
 80139a8:	2b73      	cmp	r3, #115	; 0x73
 80139aa:	dc02      	bgt.n	80139b2 <ts_formatstring+0x48>
 80139ac:	2b69      	cmp	r3, #105	; 0x69
 80139ae:	d00f      	beq.n	80139d0 <ts_formatstring+0x66>
 80139b0:	e056      	b.n	8013a60 <ts_formatstring+0xf6>
 80139b2:	2b75      	cmp	r3, #117	; 0x75
 80139b4:	d037      	beq.n	8013a26 <ts_formatstring+0xbc>
 80139b6:	2b78      	cmp	r3, #120	; 0x78
 80139b8:	d040      	beq.n	8013a3c <ts_formatstring+0xd2>
 80139ba:	e051      	b.n	8013a60 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	1c5a      	adds	r2, r3, #1
 80139c0:	60fa      	str	r2, [r7, #12]
 80139c2:	687a      	ldr	r2, [r7, #4]
 80139c4:	1d11      	adds	r1, r2, #4
 80139c6:	6079      	str	r1, [r7, #4]
 80139c8:	6812      	ldr	r2, [r2, #0]
 80139ca:	b2d2      	uxtb	r2, r2
 80139cc:	701a      	strb	r2, [r3, #0]
				break;
 80139ce:	e047      	b.n	8013a60 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	1d1a      	adds	r2, r3, #4
 80139d4:	607a      	str	r2, [r7, #4]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80139da:	69fb      	ldr	r3, [r7, #28]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	da07      	bge.n	80139f0 <ts_formatstring+0x86>
					{
						val *= -1;
 80139e0:	69fb      	ldr	r3, [r7, #28]
 80139e2:	425b      	negs	r3, r3
 80139e4:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	1c5a      	adds	r2, r3, #1
 80139ea:	60fa      	str	r2, [r7, #12]
 80139ec:	222d      	movs	r2, #45	; 0x2d
 80139ee:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80139f0:	69f9      	ldr	r1, [r7, #28]
 80139f2:	f107 030c 	add.w	r3, r7, #12
 80139f6:	220a      	movs	r2, #10
 80139f8:	4618      	mov	r0, r3
 80139fa:	f7ff ff6d 	bl	80138d8 <ts_itoa>
				}
				break;
 80139fe:	e02f      	b.n	8013a60 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	1d1a      	adds	r2, r3, #4
 8013a04:	607a      	str	r2, [r7, #4]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8013a0a:	e007      	b.n	8013a1c <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	1c5a      	adds	r2, r3, #1
 8013a10:	60fa      	str	r2, [r7, #12]
 8013a12:	69ba      	ldr	r2, [r7, #24]
 8013a14:	1c51      	adds	r1, r2, #1
 8013a16:	61b9      	str	r1, [r7, #24]
 8013a18:	7812      	ldrb	r2, [r2, #0]
 8013a1a:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8013a1c:	69bb      	ldr	r3, [r7, #24]
 8013a1e:	781b      	ldrb	r3, [r3, #0]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d1f3      	bne.n	8013a0c <ts_formatstring+0xa2>
					}
				}
				break;
 8013a24:	e01c      	b.n	8013a60 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	1d1a      	adds	r2, r3, #4
 8013a2a:	607a      	str	r2, [r7, #4]
 8013a2c:	6819      	ldr	r1, [r3, #0]
 8013a2e:	f107 030c 	add.w	r3, r7, #12
 8013a32:	220a      	movs	r2, #10
 8013a34:	4618      	mov	r0, r3
 8013a36:	f7ff ff4f 	bl	80138d8 <ts_itoa>
				break;
 8013a3a:	e011      	b.n	8013a60 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	1d1a      	adds	r2, r3, #4
 8013a40:	607a      	str	r2, [r7, #4]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	4619      	mov	r1, r3
 8013a46:	f107 030c 	add.w	r3, r7, #12
 8013a4a:	2210      	movs	r2, #16
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7ff ff43 	bl	80138d8 <ts_itoa>
				break;
 8013a52:	e005      	b.n	8013a60 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	1c5a      	adds	r2, r3, #1
 8013a58:	60fa      	str	r2, [r7, #12]
 8013a5a:	2225      	movs	r2, #37	; 0x25
 8013a5c:	701a      	strb	r2, [r3, #0]
				  break;
 8013a5e:	bf00      	nop
			}
			fmt++;
 8013a60:	68bb      	ldr	r3, [r7, #8]
 8013a62:	3301      	adds	r3, #1
 8013a64:	60bb      	str	r3, [r7, #8]
 8013a66:	e007      	b.n	8013a78 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	1c5a      	adds	r2, r3, #1
 8013a6c:	60fa      	str	r2, [r7, #12]
 8013a6e:	68ba      	ldr	r2, [r7, #8]
 8013a70:	1c51      	adds	r1, r2, #1
 8013a72:	60b9      	str	r1, [r7, #8]
 8013a74:	7812      	ldrb	r2, [r2, #0]
 8013a76:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8013a78:	68bb      	ldr	r3, [r7, #8]
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	f47f af7d 	bne.w	801397c <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	2200      	movs	r2, #0
 8013a86:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	461a      	mov	r2, r3
 8013a8c:	697b      	ldr	r3, [r7, #20]
 8013a8e:	1ad3      	subs	r3, r2, r3
}
 8013a90:	4618      	mov	r0, r3
 8013a92:	3720      	adds	r7, #32
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}

08013a98 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8013a98:	b480      	push	{r7}
 8013a9a:	b085      	sub	sp, #20
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
 8013aa0:	6039      	str	r1, [r7, #0]
	int length = 0;
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8013aa6:	e081      	b.n	8013bac <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	781b      	ldrb	r3, [r3, #0]
 8013aac:	2b25      	cmp	r3, #37	; 0x25
 8013aae:	d177      	bne.n	8013ba0 <ts_formatlength+0x108>
		{
			++fmt;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	3301      	adds	r3, #1
 8013ab4:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	781b      	ldrb	r3, [r3, #0]
 8013aba:	3b58      	subs	r3, #88	; 0x58
 8013abc:	2b20      	cmp	r3, #32
 8013abe:	d86a      	bhi.n	8013b96 <ts_formatlength+0xfe>
 8013ac0:	a201      	add	r2, pc, #4	; (adr r2, 8013ac8 <ts_formatlength+0x30>)
 8013ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ac6:	bf00      	nop
 8013ac8:	08013b89 	.word	0x08013b89
 8013acc:	08013b97 	.word	0x08013b97
 8013ad0:	08013b97 	.word	0x08013b97
 8013ad4:	08013b97 	.word	0x08013b97
 8013ad8:	08013b97 	.word	0x08013b97
 8013adc:	08013b97 	.word	0x08013b97
 8013ae0:	08013b97 	.word	0x08013b97
 8013ae4:	08013b97 	.word	0x08013b97
 8013ae8:	08013b97 	.word	0x08013b97
 8013aec:	08013b97 	.word	0x08013b97
 8013af0:	08013b97 	.word	0x08013b97
 8013af4:	08013b4d 	.word	0x08013b4d
 8013af8:	08013b5b 	.word	0x08013b5b
 8013afc:	08013b97 	.word	0x08013b97
 8013b00:	08013b97 	.word	0x08013b97
 8013b04:	08013b97 	.word	0x08013b97
 8013b08:	08013b97 	.word	0x08013b97
 8013b0c:	08013b5b 	.word	0x08013b5b
 8013b10:	08013b97 	.word	0x08013b97
 8013b14:	08013b97 	.word	0x08013b97
 8013b18:	08013b97 	.word	0x08013b97
 8013b1c:	08013b97 	.word	0x08013b97
 8013b20:	08013b97 	.word	0x08013b97
 8013b24:	08013b97 	.word	0x08013b97
 8013b28:	08013b97 	.word	0x08013b97
 8013b2c:	08013b97 	.word	0x08013b97
 8013b30:	08013b97 	.word	0x08013b97
 8013b34:	08013b69 	.word	0x08013b69
 8013b38:	08013b97 	.word	0x08013b97
 8013b3c:	08013b5b 	.word	0x08013b5b
 8013b40:	08013b97 	.word	0x08013b97
 8013b44:	08013b97 	.word	0x08013b97
 8013b48:	08013b89 	.word	0x08013b89
			{
			  case 'c':
		  		  va_arg(va, int);
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	3304      	adds	r3, #4
 8013b50:	603b      	str	r3, [r7, #0]
				  ++length;
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	3301      	adds	r3, #1
 8013b56:	60fb      	str	r3, [r7, #12]
				  break;
 8013b58:	e025      	b.n	8013ba6 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	330b      	adds	r3, #11
 8013b5e:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	3304      	adds	r3, #4
 8013b64:	603b      	str	r3, [r7, #0]
				  break;
 8013b66:	e01e      	b.n	8013ba6 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	1d1a      	adds	r2, r3, #4
 8013b6c:	603a      	str	r2, [r7, #0]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8013b72:	e002      	b.n	8013b7a <ts_formatlength+0xe2>
			  			  ++length;
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	3301      	adds	r3, #1
 8013b78:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8013b7a:	68bb      	ldr	r3, [r7, #8]
 8013b7c:	1c5a      	adds	r2, r3, #1
 8013b7e:	60ba      	str	r2, [r7, #8]
 8013b80:	781b      	ldrb	r3, [r3, #0]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d1f6      	bne.n	8013b74 <ts_formatlength+0xdc>
			  	  }
				  break;
 8013b86:	e00e      	b.n	8013ba6 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	3308      	adds	r3, #8
 8013b8c:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8013b8e:	683b      	ldr	r3, [r7, #0]
 8013b90:	3304      	adds	r3, #4
 8013b92:	603b      	str	r3, [r7, #0]
				  break;
 8013b94:	e007      	b.n	8013ba6 <ts_formatlength+0x10e>
			  default:
				  ++length;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	3301      	adds	r3, #1
 8013b9a:	60fb      	str	r3, [r7, #12]
				  break;
 8013b9c:	bf00      	nop
 8013b9e:	e002      	b.n	8013ba6 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	3301      	adds	r3, #1
 8013ba4:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	3301      	adds	r3, #1
 8013baa:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	781b      	ldrb	r3, [r3, #0]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	f47f af79 	bne.w	8013aa8 <ts_formatlength+0x10>
	}
	return length;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
}
 8013bb8:	4618      	mov	r0, r3
 8013bba:	3714      	adds	r7, #20
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc2:	4770      	bx	lr

08013bc4 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8013bc4:	b40e      	push	{r1, r2, r3}
 8013bc6:	b580      	push	{r7, lr}
 8013bc8:	b085      	sub	sp, #20
 8013bca:	af00      	add	r7, sp, #0
 8013bcc:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8013bce:	f107 0320 	add.w	r3, r7, #32
 8013bd2:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8013bd4:	68ba      	ldr	r2, [r7, #8]
 8013bd6:	69f9      	ldr	r1, [r7, #28]
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f7ff fec6 	bl	801396a <ts_formatstring>
 8013bde:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8013be0:	68fb      	ldr	r3, [r7, #12]
}
 8013be2:	4618      	mov	r0, r3
 8013be4:	3714      	adds	r7, #20
 8013be6:	46bd      	mov	sp, r7
 8013be8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013bec:	b003      	add	sp, #12
 8013bee:	4770      	bx	lr

08013bf0 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8013bf0:	b40f      	push	{r0, r1, r2, r3}
 8013bf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013bf6:	b085      	sub	sp, #20
 8013bf8:	af00      	add	r7, sp, #0
	int length = 0;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8013bfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013c02:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8013c04:	6839      	ldr	r1, [r7, #0]
 8013c06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c08:	f7ff ff46 	bl	8013a98 <ts_formatlength>
 8013c0c:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8013c0e:	466b      	mov	r3, sp
 8013c10:	461e      	mov	r6, r3
		char buf[length];
 8013c12:	68f9      	ldr	r1, [r7, #12]
 8013c14:	1e4b      	subs	r3, r1, #1
 8013c16:	60bb      	str	r3, [r7, #8]
 8013c18:	460b      	mov	r3, r1
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	f04f 0300 	mov.w	r3, #0
 8013c20:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8013c24:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8013c28:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8013c2c:	460b      	mov	r3, r1
 8013c2e:	461a      	mov	r2, r3
 8013c30:	f04f 0300 	mov.w	r3, #0
 8013c34:	00dd      	lsls	r5, r3, #3
 8013c36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8013c3a:	00d4      	lsls	r4, r2, #3
 8013c3c:	460b      	mov	r3, r1
 8013c3e:	3307      	adds	r3, #7
 8013c40:	08db      	lsrs	r3, r3, #3
 8013c42:	00db      	lsls	r3, r3, #3
 8013c44:	ebad 0d03 	sub.w	sp, sp, r3
 8013c48:	466b      	mov	r3, sp
 8013c4a:	3300      	adds	r3, #0
 8013c4c:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8013c4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013c52:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	683a      	ldr	r2, [r7, #0]
 8013c58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7ff fe85 	bl	801396a <ts_formatstring>
 8013c60:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	68fa      	ldr	r2, [r7, #12]
 8013c66:	4619      	mov	r1, r3
 8013c68:	2001      	movs	r0, #1
 8013c6a:	f7ff fd1b 	bl	80136a4 <_write>
 8013c6e:	60f8      	str	r0, [r7, #12]
 8013c70:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8013c72:	68fb      	ldr	r3, [r7, #12]
}
 8013c74:	4618      	mov	r0, r3
 8013c76:	3714      	adds	r7, #20
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c7e:	b004      	add	sp, #16
 8013c80:	4770      	bx	lr

08013c82 <abort>:
 8013c82:	b508      	push	{r3, lr}
 8013c84:	2006      	movs	r0, #6
 8013c86:	f000 fac7 	bl	8014218 <raise>
 8013c8a:	2001      	movs	r0, #1
 8013c8c:	f7ff fd04 	bl	8013698 <_exit>

08013c90 <__sflush_r>:
 8013c90:	898a      	ldrh	r2, [r1, #12]
 8013c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c96:	4605      	mov	r5, r0
 8013c98:	0710      	lsls	r0, r2, #28
 8013c9a:	460c      	mov	r4, r1
 8013c9c:	d45a      	bmi.n	8013d54 <__sflush_r+0xc4>
 8013c9e:	684b      	ldr	r3, [r1, #4]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	dc05      	bgt.n	8013cb0 <__sflush_r+0x20>
 8013ca4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	dc02      	bgt.n	8013cb0 <__sflush_r+0x20>
 8013caa:	2000      	movs	r0, #0
 8013cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013cb2:	2e00      	cmp	r6, #0
 8013cb4:	d0f9      	beq.n	8013caa <__sflush_r+0x1a>
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013cbc:	682f      	ldr	r7, [r5, #0]
 8013cbe:	602b      	str	r3, [r5, #0]
 8013cc0:	d033      	beq.n	8013d2a <__sflush_r+0x9a>
 8013cc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013cc4:	89a3      	ldrh	r3, [r4, #12]
 8013cc6:	075a      	lsls	r2, r3, #29
 8013cc8:	d505      	bpl.n	8013cd6 <__sflush_r+0x46>
 8013cca:	6863      	ldr	r3, [r4, #4]
 8013ccc:	1ac0      	subs	r0, r0, r3
 8013cce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013cd0:	b10b      	cbz	r3, 8013cd6 <__sflush_r+0x46>
 8013cd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013cd4:	1ac0      	subs	r0, r0, r3
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	4602      	mov	r2, r0
 8013cda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013cdc:	6a21      	ldr	r1, [r4, #32]
 8013cde:	4628      	mov	r0, r5
 8013ce0:	47b0      	blx	r6
 8013ce2:	1c43      	adds	r3, r0, #1
 8013ce4:	89a3      	ldrh	r3, [r4, #12]
 8013ce6:	d106      	bne.n	8013cf6 <__sflush_r+0x66>
 8013ce8:	6829      	ldr	r1, [r5, #0]
 8013cea:	291d      	cmp	r1, #29
 8013cec:	d84b      	bhi.n	8013d86 <__sflush_r+0xf6>
 8013cee:	4a2b      	ldr	r2, [pc, #172]	; (8013d9c <__sflush_r+0x10c>)
 8013cf0:	40ca      	lsrs	r2, r1
 8013cf2:	07d6      	lsls	r6, r2, #31
 8013cf4:	d547      	bpl.n	8013d86 <__sflush_r+0xf6>
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	6062      	str	r2, [r4, #4]
 8013cfa:	04d9      	lsls	r1, r3, #19
 8013cfc:	6922      	ldr	r2, [r4, #16]
 8013cfe:	6022      	str	r2, [r4, #0]
 8013d00:	d504      	bpl.n	8013d0c <__sflush_r+0x7c>
 8013d02:	1c42      	adds	r2, r0, #1
 8013d04:	d101      	bne.n	8013d0a <__sflush_r+0x7a>
 8013d06:	682b      	ldr	r3, [r5, #0]
 8013d08:	b903      	cbnz	r3, 8013d0c <__sflush_r+0x7c>
 8013d0a:	6560      	str	r0, [r4, #84]	; 0x54
 8013d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d0e:	602f      	str	r7, [r5, #0]
 8013d10:	2900      	cmp	r1, #0
 8013d12:	d0ca      	beq.n	8013caa <__sflush_r+0x1a>
 8013d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d18:	4299      	cmp	r1, r3
 8013d1a:	d002      	beq.n	8013d22 <__sflush_r+0x92>
 8013d1c:	4628      	mov	r0, r5
 8013d1e:	f000 f997 	bl	8014050 <_free_r>
 8013d22:	2000      	movs	r0, #0
 8013d24:	6360      	str	r0, [r4, #52]	; 0x34
 8013d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d2a:	6a21      	ldr	r1, [r4, #32]
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	4628      	mov	r0, r5
 8013d30:	47b0      	blx	r6
 8013d32:	1c41      	adds	r1, r0, #1
 8013d34:	d1c6      	bne.n	8013cc4 <__sflush_r+0x34>
 8013d36:	682b      	ldr	r3, [r5, #0]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d0c3      	beq.n	8013cc4 <__sflush_r+0x34>
 8013d3c:	2b1d      	cmp	r3, #29
 8013d3e:	d001      	beq.n	8013d44 <__sflush_r+0xb4>
 8013d40:	2b16      	cmp	r3, #22
 8013d42:	d101      	bne.n	8013d48 <__sflush_r+0xb8>
 8013d44:	602f      	str	r7, [r5, #0]
 8013d46:	e7b0      	b.n	8013caa <__sflush_r+0x1a>
 8013d48:	89a3      	ldrh	r3, [r4, #12]
 8013d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d4e:	81a3      	strh	r3, [r4, #12]
 8013d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d54:	690f      	ldr	r7, [r1, #16]
 8013d56:	2f00      	cmp	r7, #0
 8013d58:	d0a7      	beq.n	8013caa <__sflush_r+0x1a>
 8013d5a:	0793      	lsls	r3, r2, #30
 8013d5c:	680e      	ldr	r6, [r1, #0]
 8013d5e:	bf08      	it	eq
 8013d60:	694b      	ldreq	r3, [r1, #20]
 8013d62:	600f      	str	r7, [r1, #0]
 8013d64:	bf18      	it	ne
 8013d66:	2300      	movne	r3, #0
 8013d68:	eba6 0807 	sub.w	r8, r6, r7
 8013d6c:	608b      	str	r3, [r1, #8]
 8013d6e:	f1b8 0f00 	cmp.w	r8, #0
 8013d72:	dd9a      	ble.n	8013caa <__sflush_r+0x1a>
 8013d74:	4643      	mov	r3, r8
 8013d76:	463a      	mov	r2, r7
 8013d78:	6a21      	ldr	r1, [r4, #32]
 8013d7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013d7c:	4628      	mov	r0, r5
 8013d7e:	47b0      	blx	r6
 8013d80:	2800      	cmp	r0, #0
 8013d82:	dc07      	bgt.n	8013d94 <__sflush_r+0x104>
 8013d84:	89a3      	ldrh	r3, [r4, #12]
 8013d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d8a:	81a3      	strh	r3, [r4, #12]
 8013d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8013d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d94:	4407      	add	r7, r0
 8013d96:	eba8 0800 	sub.w	r8, r8, r0
 8013d9a:	e7e8      	b.n	8013d6e <__sflush_r+0xde>
 8013d9c:	20400001 	.word	0x20400001

08013da0 <_fflush_r>:
 8013da0:	b538      	push	{r3, r4, r5, lr}
 8013da2:	690b      	ldr	r3, [r1, #16]
 8013da4:	4605      	mov	r5, r0
 8013da6:	460c      	mov	r4, r1
 8013da8:	b1db      	cbz	r3, 8013de2 <_fflush_r+0x42>
 8013daa:	b118      	cbz	r0, 8013db4 <_fflush_r+0x14>
 8013dac:	6983      	ldr	r3, [r0, #24]
 8013dae:	b90b      	cbnz	r3, 8013db4 <_fflush_r+0x14>
 8013db0:	f000 f872 	bl	8013e98 <__sinit>
 8013db4:	4b0c      	ldr	r3, [pc, #48]	; (8013de8 <_fflush_r+0x48>)
 8013db6:	429c      	cmp	r4, r3
 8013db8:	d109      	bne.n	8013dce <_fflush_r+0x2e>
 8013dba:	686c      	ldr	r4, [r5, #4]
 8013dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013dc0:	b17b      	cbz	r3, 8013de2 <_fflush_r+0x42>
 8013dc2:	4621      	mov	r1, r4
 8013dc4:	4628      	mov	r0, r5
 8013dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013dca:	f7ff bf61 	b.w	8013c90 <__sflush_r>
 8013dce:	4b07      	ldr	r3, [pc, #28]	; (8013dec <_fflush_r+0x4c>)
 8013dd0:	429c      	cmp	r4, r3
 8013dd2:	d101      	bne.n	8013dd8 <_fflush_r+0x38>
 8013dd4:	68ac      	ldr	r4, [r5, #8]
 8013dd6:	e7f1      	b.n	8013dbc <_fflush_r+0x1c>
 8013dd8:	4b05      	ldr	r3, [pc, #20]	; (8013df0 <_fflush_r+0x50>)
 8013dda:	429c      	cmp	r4, r3
 8013ddc:	bf08      	it	eq
 8013dde:	68ec      	ldreq	r4, [r5, #12]
 8013de0:	e7ec      	b.n	8013dbc <_fflush_r+0x1c>
 8013de2:	2000      	movs	r0, #0
 8013de4:	bd38      	pop	{r3, r4, r5, pc}
 8013de6:	bf00      	nop
 8013de8:	08018294 	.word	0x08018294
 8013dec:	080182b4 	.word	0x080182b4
 8013df0:	08018274 	.word	0x08018274

08013df4 <fflush>:
 8013df4:	4601      	mov	r1, r0
 8013df6:	b920      	cbnz	r0, 8013e02 <fflush+0xe>
 8013df8:	4b04      	ldr	r3, [pc, #16]	; (8013e0c <fflush+0x18>)
 8013dfa:	4905      	ldr	r1, [pc, #20]	; (8013e10 <fflush+0x1c>)
 8013dfc:	6818      	ldr	r0, [r3, #0]
 8013dfe:	f000 b8b7 	b.w	8013f70 <_fwalk_reent>
 8013e02:	4b04      	ldr	r3, [pc, #16]	; (8013e14 <fflush+0x20>)
 8013e04:	6818      	ldr	r0, [r3, #0]
 8013e06:	f7ff bfcb 	b.w	8013da0 <_fflush_r>
 8013e0a:	bf00      	nop
 8013e0c:	080182d4 	.word	0x080182d4
 8013e10:	08013da1 	.word	0x08013da1
 8013e14:	20000010 	.word	0x20000010

08013e18 <_cleanup_r>:
 8013e18:	4901      	ldr	r1, [pc, #4]	; (8013e20 <_cleanup_r+0x8>)
 8013e1a:	f000 b8a9 	b.w	8013f70 <_fwalk_reent>
 8013e1e:	bf00      	nop
 8013e20:	08013da1 	.word	0x08013da1

08013e24 <std.isra.0>:
 8013e24:	2300      	movs	r3, #0
 8013e26:	b510      	push	{r4, lr}
 8013e28:	4604      	mov	r4, r0
 8013e2a:	6003      	str	r3, [r0, #0]
 8013e2c:	6043      	str	r3, [r0, #4]
 8013e2e:	6083      	str	r3, [r0, #8]
 8013e30:	8181      	strh	r1, [r0, #12]
 8013e32:	6643      	str	r3, [r0, #100]	; 0x64
 8013e34:	81c2      	strh	r2, [r0, #14]
 8013e36:	6103      	str	r3, [r0, #16]
 8013e38:	6143      	str	r3, [r0, #20]
 8013e3a:	6183      	str	r3, [r0, #24]
 8013e3c:	4619      	mov	r1, r3
 8013e3e:	2208      	movs	r2, #8
 8013e40:	305c      	adds	r0, #92	; 0x5c
 8013e42:	f000 f8fc 	bl	801403e <memset>
 8013e46:	4b05      	ldr	r3, [pc, #20]	; (8013e5c <std.isra.0+0x38>)
 8013e48:	6263      	str	r3, [r4, #36]	; 0x24
 8013e4a:	4b05      	ldr	r3, [pc, #20]	; (8013e60 <std.isra.0+0x3c>)
 8013e4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8013e4e:	4b05      	ldr	r3, [pc, #20]	; (8013e64 <std.isra.0+0x40>)
 8013e50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013e52:	4b05      	ldr	r3, [pc, #20]	; (8013e68 <std.isra.0+0x44>)
 8013e54:	6224      	str	r4, [r4, #32]
 8013e56:	6323      	str	r3, [r4, #48]	; 0x30
 8013e58:	bd10      	pop	{r4, pc}
 8013e5a:	bf00      	nop
 8013e5c:	080142b9 	.word	0x080142b9
 8013e60:	080142db 	.word	0x080142db
 8013e64:	08014313 	.word	0x08014313
 8013e68:	08014337 	.word	0x08014337

08013e6c <__sfmoreglue>:
 8013e6c:	b570      	push	{r4, r5, r6, lr}
 8013e6e:	1e4a      	subs	r2, r1, #1
 8013e70:	2568      	movs	r5, #104	; 0x68
 8013e72:	4355      	muls	r5, r2
 8013e74:	460e      	mov	r6, r1
 8013e76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013e7a:	f000 f937 	bl	80140ec <_malloc_r>
 8013e7e:	4604      	mov	r4, r0
 8013e80:	b140      	cbz	r0, 8013e94 <__sfmoreglue+0x28>
 8013e82:	2100      	movs	r1, #0
 8013e84:	e880 0042 	stmia.w	r0, {r1, r6}
 8013e88:	300c      	adds	r0, #12
 8013e8a:	60a0      	str	r0, [r4, #8]
 8013e8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013e90:	f000 f8d5 	bl	801403e <memset>
 8013e94:	4620      	mov	r0, r4
 8013e96:	bd70      	pop	{r4, r5, r6, pc}

08013e98 <__sinit>:
 8013e98:	6983      	ldr	r3, [r0, #24]
 8013e9a:	b510      	push	{r4, lr}
 8013e9c:	4604      	mov	r4, r0
 8013e9e:	bb33      	cbnz	r3, 8013eee <__sinit+0x56>
 8013ea0:	6483      	str	r3, [r0, #72]	; 0x48
 8013ea2:	64c3      	str	r3, [r0, #76]	; 0x4c
 8013ea4:	6503      	str	r3, [r0, #80]	; 0x50
 8013ea6:	4b12      	ldr	r3, [pc, #72]	; (8013ef0 <__sinit+0x58>)
 8013ea8:	4a12      	ldr	r2, [pc, #72]	; (8013ef4 <__sinit+0x5c>)
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	6282      	str	r2, [r0, #40]	; 0x28
 8013eae:	4298      	cmp	r0, r3
 8013eb0:	bf04      	itt	eq
 8013eb2:	2301      	moveq	r3, #1
 8013eb4:	6183      	streq	r3, [r0, #24]
 8013eb6:	f000 f81f 	bl	8013ef8 <__sfp>
 8013eba:	6060      	str	r0, [r4, #4]
 8013ebc:	4620      	mov	r0, r4
 8013ebe:	f000 f81b 	bl	8013ef8 <__sfp>
 8013ec2:	60a0      	str	r0, [r4, #8]
 8013ec4:	4620      	mov	r0, r4
 8013ec6:	f000 f817 	bl	8013ef8 <__sfp>
 8013eca:	2200      	movs	r2, #0
 8013ecc:	60e0      	str	r0, [r4, #12]
 8013ece:	2104      	movs	r1, #4
 8013ed0:	6860      	ldr	r0, [r4, #4]
 8013ed2:	f7ff ffa7 	bl	8013e24 <std.isra.0>
 8013ed6:	2201      	movs	r2, #1
 8013ed8:	2109      	movs	r1, #9
 8013eda:	68a0      	ldr	r0, [r4, #8]
 8013edc:	f7ff ffa2 	bl	8013e24 <std.isra.0>
 8013ee0:	2202      	movs	r2, #2
 8013ee2:	2112      	movs	r1, #18
 8013ee4:	68e0      	ldr	r0, [r4, #12]
 8013ee6:	f7ff ff9d 	bl	8013e24 <std.isra.0>
 8013eea:	2301      	movs	r3, #1
 8013eec:	61a3      	str	r3, [r4, #24]
 8013eee:	bd10      	pop	{r4, pc}
 8013ef0:	080182d4 	.word	0x080182d4
 8013ef4:	08013e19 	.word	0x08013e19

08013ef8 <__sfp>:
 8013ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013efa:	4b1c      	ldr	r3, [pc, #112]	; (8013f6c <__sfp+0x74>)
 8013efc:	681e      	ldr	r6, [r3, #0]
 8013efe:	69b3      	ldr	r3, [r6, #24]
 8013f00:	4607      	mov	r7, r0
 8013f02:	b913      	cbnz	r3, 8013f0a <__sfp+0x12>
 8013f04:	4630      	mov	r0, r6
 8013f06:	f7ff ffc7 	bl	8013e98 <__sinit>
 8013f0a:	3648      	adds	r6, #72	; 0x48
 8013f0c:	68b4      	ldr	r4, [r6, #8]
 8013f0e:	6873      	ldr	r3, [r6, #4]
 8013f10:	3b01      	subs	r3, #1
 8013f12:	d503      	bpl.n	8013f1c <__sfp+0x24>
 8013f14:	6833      	ldr	r3, [r6, #0]
 8013f16:	b133      	cbz	r3, 8013f26 <__sfp+0x2e>
 8013f18:	6836      	ldr	r6, [r6, #0]
 8013f1a:	e7f7      	b.n	8013f0c <__sfp+0x14>
 8013f1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013f20:	b16d      	cbz	r5, 8013f3e <__sfp+0x46>
 8013f22:	3468      	adds	r4, #104	; 0x68
 8013f24:	e7f4      	b.n	8013f10 <__sfp+0x18>
 8013f26:	2104      	movs	r1, #4
 8013f28:	4638      	mov	r0, r7
 8013f2a:	f7ff ff9f 	bl	8013e6c <__sfmoreglue>
 8013f2e:	6030      	str	r0, [r6, #0]
 8013f30:	2800      	cmp	r0, #0
 8013f32:	d1f1      	bne.n	8013f18 <__sfp+0x20>
 8013f34:	230c      	movs	r3, #12
 8013f36:	603b      	str	r3, [r7, #0]
 8013f38:	4604      	mov	r4, r0
 8013f3a:	4620      	mov	r0, r4
 8013f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f42:	81e3      	strh	r3, [r4, #14]
 8013f44:	2301      	movs	r3, #1
 8013f46:	81a3      	strh	r3, [r4, #12]
 8013f48:	6665      	str	r5, [r4, #100]	; 0x64
 8013f4a:	6025      	str	r5, [r4, #0]
 8013f4c:	60a5      	str	r5, [r4, #8]
 8013f4e:	6065      	str	r5, [r4, #4]
 8013f50:	6125      	str	r5, [r4, #16]
 8013f52:	6165      	str	r5, [r4, #20]
 8013f54:	61a5      	str	r5, [r4, #24]
 8013f56:	2208      	movs	r2, #8
 8013f58:	4629      	mov	r1, r5
 8013f5a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013f5e:	f000 f86e 	bl	801403e <memset>
 8013f62:	6365      	str	r5, [r4, #52]	; 0x34
 8013f64:	63a5      	str	r5, [r4, #56]	; 0x38
 8013f66:	64a5      	str	r5, [r4, #72]	; 0x48
 8013f68:	64e5      	str	r5, [r4, #76]	; 0x4c
 8013f6a:	e7e6      	b.n	8013f3a <__sfp+0x42>
 8013f6c:	080182d4 	.word	0x080182d4

08013f70 <_fwalk_reent>:
 8013f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f74:	4680      	mov	r8, r0
 8013f76:	4689      	mov	r9, r1
 8013f78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013f7c:	2600      	movs	r6, #0
 8013f7e:	b914      	cbnz	r4, 8013f86 <_fwalk_reent+0x16>
 8013f80:	4630      	mov	r0, r6
 8013f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f86:	68a5      	ldr	r5, [r4, #8]
 8013f88:	6867      	ldr	r7, [r4, #4]
 8013f8a:	3f01      	subs	r7, #1
 8013f8c:	d501      	bpl.n	8013f92 <_fwalk_reent+0x22>
 8013f8e:	6824      	ldr	r4, [r4, #0]
 8013f90:	e7f5      	b.n	8013f7e <_fwalk_reent+0xe>
 8013f92:	89ab      	ldrh	r3, [r5, #12]
 8013f94:	2b01      	cmp	r3, #1
 8013f96:	d907      	bls.n	8013fa8 <_fwalk_reent+0x38>
 8013f98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013f9c:	3301      	adds	r3, #1
 8013f9e:	d003      	beq.n	8013fa8 <_fwalk_reent+0x38>
 8013fa0:	4629      	mov	r1, r5
 8013fa2:	4640      	mov	r0, r8
 8013fa4:	47c8      	blx	r9
 8013fa6:	4306      	orrs	r6, r0
 8013fa8:	3568      	adds	r5, #104	; 0x68
 8013faa:	e7ee      	b.n	8013f8a <_fwalk_reent+0x1a>

08013fac <__libc_init_array>:
 8013fac:	b570      	push	{r4, r5, r6, lr}
 8013fae:	4e0d      	ldr	r6, [pc, #52]	; (8013fe4 <__libc_init_array+0x38>)
 8013fb0:	4c0d      	ldr	r4, [pc, #52]	; (8013fe8 <__libc_init_array+0x3c>)
 8013fb2:	1ba4      	subs	r4, r4, r6
 8013fb4:	10a4      	asrs	r4, r4, #2
 8013fb6:	2500      	movs	r5, #0
 8013fb8:	42a5      	cmp	r5, r4
 8013fba:	d109      	bne.n	8013fd0 <__libc_init_array+0x24>
 8013fbc:	4e0b      	ldr	r6, [pc, #44]	; (8013fec <__libc_init_array+0x40>)
 8013fbe:	4c0c      	ldr	r4, [pc, #48]	; (8013ff0 <__libc_init_array+0x44>)
 8013fc0:	f000 fd4c 	bl	8014a5c <_init>
 8013fc4:	1ba4      	subs	r4, r4, r6
 8013fc6:	10a4      	asrs	r4, r4, #2
 8013fc8:	2500      	movs	r5, #0
 8013fca:	42a5      	cmp	r5, r4
 8013fcc:	d105      	bne.n	8013fda <__libc_init_array+0x2e>
 8013fce:	bd70      	pop	{r4, r5, r6, pc}
 8013fd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013fd4:	4798      	blx	r3
 8013fd6:	3501      	adds	r5, #1
 8013fd8:	e7ee      	b.n	8013fb8 <__libc_init_array+0xc>
 8013fda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013fde:	4798      	blx	r3
 8013fe0:	3501      	adds	r5, #1
 8013fe2:	e7f2      	b.n	8013fca <__libc_init_array+0x1e>
 8013fe4:	0801830c 	.word	0x0801830c
 8013fe8:	0801830c 	.word	0x0801830c
 8013fec:	0801830c 	.word	0x0801830c
 8013ff0:	08018310 	.word	0x08018310

08013ff4 <memcpy>:
 8013ff4:	b510      	push	{r4, lr}
 8013ff6:	1e43      	subs	r3, r0, #1
 8013ff8:	440a      	add	r2, r1
 8013ffa:	4291      	cmp	r1, r2
 8013ffc:	d100      	bne.n	8014000 <memcpy+0xc>
 8013ffe:	bd10      	pop	{r4, pc}
 8014000:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014004:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014008:	e7f7      	b.n	8013ffa <memcpy+0x6>

0801400a <memmove>:
 801400a:	4288      	cmp	r0, r1
 801400c:	b510      	push	{r4, lr}
 801400e:	eb01 0302 	add.w	r3, r1, r2
 8014012:	d803      	bhi.n	801401c <memmove+0x12>
 8014014:	1e42      	subs	r2, r0, #1
 8014016:	4299      	cmp	r1, r3
 8014018:	d10c      	bne.n	8014034 <memmove+0x2a>
 801401a:	bd10      	pop	{r4, pc}
 801401c:	4298      	cmp	r0, r3
 801401e:	d2f9      	bcs.n	8014014 <memmove+0xa>
 8014020:	1881      	adds	r1, r0, r2
 8014022:	1ad2      	subs	r2, r2, r3
 8014024:	42d3      	cmn	r3, r2
 8014026:	d100      	bne.n	801402a <memmove+0x20>
 8014028:	bd10      	pop	{r4, pc}
 801402a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801402e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014032:	e7f7      	b.n	8014024 <memmove+0x1a>
 8014034:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014038:	f802 4f01 	strb.w	r4, [r2, #1]!
 801403c:	e7eb      	b.n	8014016 <memmove+0xc>

0801403e <memset>:
 801403e:	4402      	add	r2, r0
 8014040:	4603      	mov	r3, r0
 8014042:	4293      	cmp	r3, r2
 8014044:	d100      	bne.n	8014048 <memset+0xa>
 8014046:	4770      	bx	lr
 8014048:	f803 1b01 	strb.w	r1, [r3], #1
 801404c:	e7f9      	b.n	8014042 <memset+0x4>
	...

08014050 <_free_r>:
 8014050:	b538      	push	{r3, r4, r5, lr}
 8014052:	4605      	mov	r5, r0
 8014054:	2900      	cmp	r1, #0
 8014056:	d045      	beq.n	80140e4 <_free_r+0x94>
 8014058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801405c:	1f0c      	subs	r4, r1, #4
 801405e:	2b00      	cmp	r3, #0
 8014060:	bfb8      	it	lt
 8014062:	18e4      	addlt	r4, r4, r3
 8014064:	f000 f9d0 	bl	8014408 <__malloc_lock>
 8014068:	4a1f      	ldr	r2, [pc, #124]	; (80140e8 <_free_r+0x98>)
 801406a:	6813      	ldr	r3, [r2, #0]
 801406c:	4610      	mov	r0, r2
 801406e:	b933      	cbnz	r3, 801407e <_free_r+0x2e>
 8014070:	6063      	str	r3, [r4, #4]
 8014072:	6014      	str	r4, [r2, #0]
 8014074:	4628      	mov	r0, r5
 8014076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801407a:	f000 b9c6 	b.w	801440a <__malloc_unlock>
 801407e:	42a3      	cmp	r3, r4
 8014080:	d90c      	bls.n	801409c <_free_r+0x4c>
 8014082:	6821      	ldr	r1, [r4, #0]
 8014084:	1862      	adds	r2, r4, r1
 8014086:	4293      	cmp	r3, r2
 8014088:	bf04      	itt	eq
 801408a:	681a      	ldreq	r2, [r3, #0]
 801408c:	685b      	ldreq	r3, [r3, #4]
 801408e:	6063      	str	r3, [r4, #4]
 8014090:	bf04      	itt	eq
 8014092:	1852      	addeq	r2, r2, r1
 8014094:	6022      	streq	r2, [r4, #0]
 8014096:	6004      	str	r4, [r0, #0]
 8014098:	e7ec      	b.n	8014074 <_free_r+0x24>
 801409a:	4613      	mov	r3, r2
 801409c:	685a      	ldr	r2, [r3, #4]
 801409e:	b10a      	cbz	r2, 80140a4 <_free_r+0x54>
 80140a0:	42a2      	cmp	r2, r4
 80140a2:	d9fa      	bls.n	801409a <_free_r+0x4a>
 80140a4:	6819      	ldr	r1, [r3, #0]
 80140a6:	1858      	adds	r0, r3, r1
 80140a8:	42a0      	cmp	r0, r4
 80140aa:	d10b      	bne.n	80140c4 <_free_r+0x74>
 80140ac:	6820      	ldr	r0, [r4, #0]
 80140ae:	4401      	add	r1, r0
 80140b0:	1858      	adds	r0, r3, r1
 80140b2:	4282      	cmp	r2, r0
 80140b4:	6019      	str	r1, [r3, #0]
 80140b6:	d1dd      	bne.n	8014074 <_free_r+0x24>
 80140b8:	6810      	ldr	r0, [r2, #0]
 80140ba:	6852      	ldr	r2, [r2, #4]
 80140bc:	605a      	str	r2, [r3, #4]
 80140be:	4401      	add	r1, r0
 80140c0:	6019      	str	r1, [r3, #0]
 80140c2:	e7d7      	b.n	8014074 <_free_r+0x24>
 80140c4:	d902      	bls.n	80140cc <_free_r+0x7c>
 80140c6:	230c      	movs	r3, #12
 80140c8:	602b      	str	r3, [r5, #0]
 80140ca:	e7d3      	b.n	8014074 <_free_r+0x24>
 80140cc:	6820      	ldr	r0, [r4, #0]
 80140ce:	1821      	adds	r1, r4, r0
 80140d0:	428a      	cmp	r2, r1
 80140d2:	bf04      	itt	eq
 80140d4:	6811      	ldreq	r1, [r2, #0]
 80140d6:	6852      	ldreq	r2, [r2, #4]
 80140d8:	6062      	str	r2, [r4, #4]
 80140da:	bf04      	itt	eq
 80140dc:	1809      	addeq	r1, r1, r0
 80140de:	6021      	streq	r1, [r4, #0]
 80140e0:	605c      	str	r4, [r3, #4]
 80140e2:	e7c7      	b.n	8014074 <_free_r+0x24>
 80140e4:	bd38      	pop	{r3, r4, r5, pc}
 80140e6:	bf00      	nop
 80140e8:	20000774 	.word	0x20000774

080140ec <_malloc_r>:
 80140ec:	b570      	push	{r4, r5, r6, lr}
 80140ee:	1ccd      	adds	r5, r1, #3
 80140f0:	f025 0503 	bic.w	r5, r5, #3
 80140f4:	3508      	adds	r5, #8
 80140f6:	2d0c      	cmp	r5, #12
 80140f8:	bf38      	it	cc
 80140fa:	250c      	movcc	r5, #12
 80140fc:	2d00      	cmp	r5, #0
 80140fe:	4606      	mov	r6, r0
 8014100:	db01      	blt.n	8014106 <_malloc_r+0x1a>
 8014102:	42a9      	cmp	r1, r5
 8014104:	d903      	bls.n	801410e <_malloc_r+0x22>
 8014106:	230c      	movs	r3, #12
 8014108:	6033      	str	r3, [r6, #0]
 801410a:	2000      	movs	r0, #0
 801410c:	bd70      	pop	{r4, r5, r6, pc}
 801410e:	f000 f97b 	bl	8014408 <__malloc_lock>
 8014112:	4a23      	ldr	r2, [pc, #140]	; (80141a0 <_malloc_r+0xb4>)
 8014114:	6814      	ldr	r4, [r2, #0]
 8014116:	4621      	mov	r1, r4
 8014118:	b991      	cbnz	r1, 8014140 <_malloc_r+0x54>
 801411a:	4c22      	ldr	r4, [pc, #136]	; (80141a4 <_malloc_r+0xb8>)
 801411c:	6823      	ldr	r3, [r4, #0]
 801411e:	b91b      	cbnz	r3, 8014128 <_malloc_r+0x3c>
 8014120:	4630      	mov	r0, r6
 8014122:	f000 f841 	bl	80141a8 <_sbrk_r>
 8014126:	6020      	str	r0, [r4, #0]
 8014128:	4629      	mov	r1, r5
 801412a:	4630      	mov	r0, r6
 801412c:	f000 f83c 	bl	80141a8 <_sbrk_r>
 8014130:	1c43      	adds	r3, r0, #1
 8014132:	d126      	bne.n	8014182 <_malloc_r+0x96>
 8014134:	230c      	movs	r3, #12
 8014136:	6033      	str	r3, [r6, #0]
 8014138:	4630      	mov	r0, r6
 801413a:	f000 f966 	bl	801440a <__malloc_unlock>
 801413e:	e7e4      	b.n	801410a <_malloc_r+0x1e>
 8014140:	680b      	ldr	r3, [r1, #0]
 8014142:	1b5b      	subs	r3, r3, r5
 8014144:	d41a      	bmi.n	801417c <_malloc_r+0x90>
 8014146:	2b0b      	cmp	r3, #11
 8014148:	d90f      	bls.n	801416a <_malloc_r+0x7e>
 801414a:	600b      	str	r3, [r1, #0]
 801414c:	50cd      	str	r5, [r1, r3]
 801414e:	18cc      	adds	r4, r1, r3
 8014150:	4630      	mov	r0, r6
 8014152:	f000 f95a 	bl	801440a <__malloc_unlock>
 8014156:	f104 000b 	add.w	r0, r4, #11
 801415a:	1d23      	adds	r3, r4, #4
 801415c:	f020 0007 	bic.w	r0, r0, #7
 8014160:	1ac3      	subs	r3, r0, r3
 8014162:	d01b      	beq.n	801419c <_malloc_r+0xb0>
 8014164:	425a      	negs	r2, r3
 8014166:	50e2      	str	r2, [r4, r3]
 8014168:	bd70      	pop	{r4, r5, r6, pc}
 801416a:	428c      	cmp	r4, r1
 801416c:	bf0d      	iteet	eq
 801416e:	6863      	ldreq	r3, [r4, #4]
 8014170:	684b      	ldrne	r3, [r1, #4]
 8014172:	6063      	strne	r3, [r4, #4]
 8014174:	6013      	streq	r3, [r2, #0]
 8014176:	bf18      	it	ne
 8014178:	460c      	movne	r4, r1
 801417a:	e7e9      	b.n	8014150 <_malloc_r+0x64>
 801417c:	460c      	mov	r4, r1
 801417e:	6849      	ldr	r1, [r1, #4]
 8014180:	e7ca      	b.n	8014118 <_malloc_r+0x2c>
 8014182:	1cc4      	adds	r4, r0, #3
 8014184:	f024 0403 	bic.w	r4, r4, #3
 8014188:	42a0      	cmp	r0, r4
 801418a:	d005      	beq.n	8014198 <_malloc_r+0xac>
 801418c:	1a21      	subs	r1, r4, r0
 801418e:	4630      	mov	r0, r6
 8014190:	f000 f80a 	bl	80141a8 <_sbrk_r>
 8014194:	3001      	adds	r0, #1
 8014196:	d0cd      	beq.n	8014134 <_malloc_r+0x48>
 8014198:	6025      	str	r5, [r4, #0]
 801419a:	e7d9      	b.n	8014150 <_malloc_r+0x64>
 801419c:	bd70      	pop	{r4, r5, r6, pc}
 801419e:	bf00      	nop
 80141a0:	20000774 	.word	0x20000774
 80141a4:	20000778 	.word	0x20000778

080141a8 <_sbrk_r>:
 80141a8:	b538      	push	{r3, r4, r5, lr}
 80141aa:	4c06      	ldr	r4, [pc, #24]	; (80141c4 <_sbrk_r+0x1c>)
 80141ac:	2300      	movs	r3, #0
 80141ae:	4605      	mov	r5, r0
 80141b0:	4608      	mov	r0, r1
 80141b2:	6023      	str	r3, [r4, #0]
 80141b4:	f7ff fa8a 	bl	80136cc <_sbrk>
 80141b8:	1c43      	adds	r3, r0, #1
 80141ba:	d102      	bne.n	80141c2 <_sbrk_r+0x1a>
 80141bc:	6823      	ldr	r3, [r4, #0]
 80141be:	b103      	cbz	r3, 80141c2 <_sbrk_r+0x1a>
 80141c0:	602b      	str	r3, [r5, #0]
 80141c2:	bd38      	pop	{r3, r4, r5, pc}
 80141c4:	20002480 	.word	0x20002480

080141c8 <_raise_r>:
 80141c8:	291f      	cmp	r1, #31
 80141ca:	b538      	push	{r3, r4, r5, lr}
 80141cc:	4604      	mov	r4, r0
 80141ce:	460d      	mov	r5, r1
 80141d0:	d904      	bls.n	80141dc <_raise_r+0x14>
 80141d2:	2316      	movs	r3, #22
 80141d4:	6003      	str	r3, [r0, #0]
 80141d6:	f04f 30ff 	mov.w	r0, #4294967295
 80141da:	bd38      	pop	{r3, r4, r5, pc}
 80141dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80141de:	b112      	cbz	r2, 80141e6 <_raise_r+0x1e>
 80141e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80141e4:	b94b      	cbnz	r3, 80141fa <_raise_r+0x32>
 80141e6:	4620      	mov	r0, r4
 80141e8:	f000 f830 	bl	801424c <_getpid_r>
 80141ec:	462a      	mov	r2, r5
 80141ee:	4601      	mov	r1, r0
 80141f0:	4620      	mov	r0, r4
 80141f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80141f6:	f000 b817 	b.w	8014228 <_kill_r>
 80141fa:	2b01      	cmp	r3, #1
 80141fc:	d00a      	beq.n	8014214 <_raise_r+0x4c>
 80141fe:	1c59      	adds	r1, r3, #1
 8014200:	d103      	bne.n	801420a <_raise_r+0x42>
 8014202:	2316      	movs	r3, #22
 8014204:	6003      	str	r3, [r0, #0]
 8014206:	2001      	movs	r0, #1
 8014208:	bd38      	pop	{r3, r4, r5, pc}
 801420a:	2400      	movs	r4, #0
 801420c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014210:	4628      	mov	r0, r5
 8014212:	4798      	blx	r3
 8014214:	2000      	movs	r0, #0
 8014216:	bd38      	pop	{r3, r4, r5, pc}

08014218 <raise>:
 8014218:	4b02      	ldr	r3, [pc, #8]	; (8014224 <raise+0xc>)
 801421a:	4601      	mov	r1, r0
 801421c:	6818      	ldr	r0, [r3, #0]
 801421e:	f7ff bfd3 	b.w	80141c8 <_raise_r>
 8014222:	bf00      	nop
 8014224:	20000010 	.word	0x20000010

08014228 <_kill_r>:
 8014228:	b538      	push	{r3, r4, r5, lr}
 801422a:	4c07      	ldr	r4, [pc, #28]	; (8014248 <_kill_r+0x20>)
 801422c:	2300      	movs	r3, #0
 801422e:	4605      	mov	r5, r0
 8014230:	4608      	mov	r0, r1
 8014232:	4611      	mov	r1, r2
 8014234:	6023      	str	r3, [r4, #0]
 8014236:	f7ff fa1d 	bl	8013674 <_kill>
 801423a:	1c43      	adds	r3, r0, #1
 801423c:	d102      	bne.n	8014244 <_kill_r+0x1c>
 801423e:	6823      	ldr	r3, [r4, #0]
 8014240:	b103      	cbz	r3, 8014244 <_kill_r+0x1c>
 8014242:	602b      	str	r3, [r5, #0]
 8014244:	bd38      	pop	{r3, r4, r5, pc}
 8014246:	bf00      	nop
 8014248:	20002480 	.word	0x20002480

0801424c <_getpid_r>:
 801424c:	f7ff ba04 	b.w	8013658 <_getpid>

08014250 <sniprintf>:
 8014250:	b40c      	push	{r2, r3}
 8014252:	b530      	push	{r4, r5, lr}
 8014254:	4b17      	ldr	r3, [pc, #92]	; (80142b4 <sniprintf+0x64>)
 8014256:	1e0c      	subs	r4, r1, #0
 8014258:	b09d      	sub	sp, #116	; 0x74
 801425a:	681d      	ldr	r5, [r3, #0]
 801425c:	da08      	bge.n	8014270 <sniprintf+0x20>
 801425e:	238b      	movs	r3, #139	; 0x8b
 8014260:	602b      	str	r3, [r5, #0]
 8014262:	f04f 30ff 	mov.w	r0, #4294967295
 8014266:	b01d      	add	sp, #116	; 0x74
 8014268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801426c:	b002      	add	sp, #8
 801426e:	4770      	bx	lr
 8014270:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014274:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014278:	bf14      	ite	ne
 801427a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801427e:	4623      	moveq	r3, r4
 8014280:	9304      	str	r3, [sp, #16]
 8014282:	9307      	str	r3, [sp, #28]
 8014284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014288:	9002      	str	r0, [sp, #8]
 801428a:	9006      	str	r0, [sp, #24]
 801428c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014290:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014292:	ab21      	add	r3, sp, #132	; 0x84
 8014294:	a902      	add	r1, sp, #8
 8014296:	4628      	mov	r0, r5
 8014298:	9301      	str	r3, [sp, #4]
 801429a:	f000 f913 	bl	80144c4 <_svfiprintf_r>
 801429e:	1c43      	adds	r3, r0, #1
 80142a0:	bfbc      	itt	lt
 80142a2:	238b      	movlt	r3, #139	; 0x8b
 80142a4:	602b      	strlt	r3, [r5, #0]
 80142a6:	2c00      	cmp	r4, #0
 80142a8:	d0dd      	beq.n	8014266 <sniprintf+0x16>
 80142aa:	9b02      	ldr	r3, [sp, #8]
 80142ac:	2200      	movs	r2, #0
 80142ae:	701a      	strb	r2, [r3, #0]
 80142b0:	e7d9      	b.n	8014266 <sniprintf+0x16>
 80142b2:	bf00      	nop
 80142b4:	20000010 	.word	0x20000010

080142b8 <__sread>:
 80142b8:	b510      	push	{r4, lr}
 80142ba:	460c      	mov	r4, r1
 80142bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142c0:	f000 fb8a 	bl	80149d8 <_read_r>
 80142c4:	2800      	cmp	r0, #0
 80142c6:	bfab      	itete	ge
 80142c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80142ca:	89a3      	ldrhlt	r3, [r4, #12]
 80142cc:	181b      	addge	r3, r3, r0
 80142ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80142d2:	bfac      	ite	ge
 80142d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80142d6:	81a3      	strhlt	r3, [r4, #12]
 80142d8:	bd10      	pop	{r4, pc}

080142da <__swrite>:
 80142da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142de:	461f      	mov	r7, r3
 80142e0:	898b      	ldrh	r3, [r1, #12]
 80142e2:	05db      	lsls	r3, r3, #23
 80142e4:	4605      	mov	r5, r0
 80142e6:	460c      	mov	r4, r1
 80142e8:	4616      	mov	r6, r2
 80142ea:	d505      	bpl.n	80142f8 <__swrite+0x1e>
 80142ec:	2302      	movs	r3, #2
 80142ee:	2200      	movs	r2, #0
 80142f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142f4:	f000 f876 	bl	80143e4 <_lseek_r>
 80142f8:	89a3      	ldrh	r3, [r4, #12]
 80142fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80142fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014302:	81a3      	strh	r3, [r4, #12]
 8014304:	4632      	mov	r2, r6
 8014306:	463b      	mov	r3, r7
 8014308:	4628      	mov	r0, r5
 801430a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801430e:	f000 b847 	b.w	80143a0 <_write_r>

08014312 <__sseek>:
 8014312:	b510      	push	{r4, lr}
 8014314:	460c      	mov	r4, r1
 8014316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801431a:	f000 f863 	bl	80143e4 <_lseek_r>
 801431e:	1c43      	adds	r3, r0, #1
 8014320:	89a3      	ldrh	r3, [r4, #12]
 8014322:	bf15      	itete	ne
 8014324:	6560      	strne	r0, [r4, #84]	; 0x54
 8014326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801432a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801432e:	81a3      	strheq	r3, [r4, #12]
 8014330:	bf18      	it	ne
 8014332:	81a3      	strhne	r3, [r4, #12]
 8014334:	bd10      	pop	{r4, pc}

08014336 <__sclose>:
 8014336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801433a:	f000 b843 	b.w	80143c4 <_close_r>

0801433e <strncpy>:
 801433e:	b570      	push	{r4, r5, r6, lr}
 8014340:	4604      	mov	r4, r0
 8014342:	b902      	cbnz	r2, 8014346 <strncpy+0x8>
 8014344:	bd70      	pop	{r4, r5, r6, pc}
 8014346:	4623      	mov	r3, r4
 8014348:	f811 5b01 	ldrb.w	r5, [r1], #1
 801434c:	f803 5b01 	strb.w	r5, [r3], #1
 8014350:	1e56      	subs	r6, r2, #1
 8014352:	b91d      	cbnz	r5, 801435c <strncpy+0x1e>
 8014354:	4414      	add	r4, r2
 8014356:	42a3      	cmp	r3, r4
 8014358:	d103      	bne.n	8014362 <strncpy+0x24>
 801435a:	bd70      	pop	{r4, r5, r6, pc}
 801435c:	461c      	mov	r4, r3
 801435e:	4632      	mov	r2, r6
 8014360:	e7ef      	b.n	8014342 <strncpy+0x4>
 8014362:	f803 5b01 	strb.w	r5, [r3], #1
 8014366:	e7f6      	b.n	8014356 <strncpy+0x18>

08014368 <strstr>:
 8014368:	b5f0      	push	{r4, r5, r6, r7, lr}
 801436a:	7803      	ldrb	r3, [r0, #0]
 801436c:	b133      	cbz	r3, 801437c <strstr+0x14>
 801436e:	4603      	mov	r3, r0
 8014370:	4618      	mov	r0, r3
 8014372:	1c5e      	adds	r6, r3, #1
 8014374:	781b      	ldrb	r3, [r3, #0]
 8014376:	b933      	cbnz	r3, 8014386 <strstr+0x1e>
 8014378:	4618      	mov	r0, r3
 801437a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801437c:	780b      	ldrb	r3, [r1, #0]
 801437e:	2b00      	cmp	r3, #0
 8014380:	bf18      	it	ne
 8014382:	2000      	movne	r0, #0
 8014384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014386:	1e4d      	subs	r5, r1, #1
 8014388:	1e44      	subs	r4, r0, #1
 801438a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801438e:	2a00      	cmp	r2, #0
 8014390:	d0f3      	beq.n	801437a <strstr+0x12>
 8014392:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8014396:	4297      	cmp	r7, r2
 8014398:	4633      	mov	r3, r6
 801439a:	d0f6      	beq.n	801438a <strstr+0x22>
 801439c:	e7e8      	b.n	8014370 <strstr+0x8>
	...

080143a0 <_write_r>:
 80143a0:	b538      	push	{r3, r4, r5, lr}
 80143a2:	4c07      	ldr	r4, [pc, #28]	; (80143c0 <_write_r+0x20>)
 80143a4:	4605      	mov	r5, r0
 80143a6:	4608      	mov	r0, r1
 80143a8:	4611      	mov	r1, r2
 80143aa:	2200      	movs	r2, #0
 80143ac:	6022      	str	r2, [r4, #0]
 80143ae:	461a      	mov	r2, r3
 80143b0:	f7ff f978 	bl	80136a4 <_write>
 80143b4:	1c43      	adds	r3, r0, #1
 80143b6:	d102      	bne.n	80143be <_write_r+0x1e>
 80143b8:	6823      	ldr	r3, [r4, #0]
 80143ba:	b103      	cbz	r3, 80143be <_write_r+0x1e>
 80143bc:	602b      	str	r3, [r5, #0]
 80143be:	bd38      	pop	{r3, r4, r5, pc}
 80143c0:	20002480 	.word	0x20002480

080143c4 <_close_r>:
 80143c4:	b538      	push	{r3, r4, r5, lr}
 80143c6:	4c06      	ldr	r4, [pc, #24]	; (80143e0 <_close_r+0x1c>)
 80143c8:	2300      	movs	r3, #0
 80143ca:	4605      	mov	r5, r0
 80143cc:	4608      	mov	r0, r1
 80143ce:	6023      	str	r3, [r4, #0]
 80143d0:	f7ff f99c 	bl	801370c <_close>
 80143d4:	1c43      	adds	r3, r0, #1
 80143d6:	d102      	bne.n	80143de <_close_r+0x1a>
 80143d8:	6823      	ldr	r3, [r4, #0]
 80143da:	b103      	cbz	r3, 80143de <_close_r+0x1a>
 80143dc:	602b      	str	r3, [r5, #0]
 80143de:	bd38      	pop	{r3, r4, r5, pc}
 80143e0:	20002480 	.word	0x20002480

080143e4 <_lseek_r>:
 80143e4:	b538      	push	{r3, r4, r5, lr}
 80143e6:	4c07      	ldr	r4, [pc, #28]	; (8014404 <_lseek_r+0x20>)
 80143e8:	4605      	mov	r5, r0
 80143ea:	4608      	mov	r0, r1
 80143ec:	4611      	mov	r1, r2
 80143ee:	2200      	movs	r2, #0
 80143f0:	6022      	str	r2, [r4, #0]
 80143f2:	461a      	mov	r2, r3
 80143f4:	f7ff f99c 	bl	8013730 <_lseek>
 80143f8:	1c43      	adds	r3, r0, #1
 80143fa:	d102      	bne.n	8014402 <_lseek_r+0x1e>
 80143fc:	6823      	ldr	r3, [r4, #0]
 80143fe:	b103      	cbz	r3, 8014402 <_lseek_r+0x1e>
 8014400:	602b      	str	r3, [r5, #0]
 8014402:	bd38      	pop	{r3, r4, r5, pc}
 8014404:	20002480 	.word	0x20002480

08014408 <__malloc_lock>:
 8014408:	4770      	bx	lr

0801440a <__malloc_unlock>:
 801440a:	4770      	bx	lr

0801440c <__ssputs_r>:
 801440c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014410:	688e      	ldr	r6, [r1, #8]
 8014412:	429e      	cmp	r6, r3
 8014414:	4682      	mov	sl, r0
 8014416:	460c      	mov	r4, r1
 8014418:	4691      	mov	r9, r2
 801441a:	4698      	mov	r8, r3
 801441c:	d835      	bhi.n	801448a <__ssputs_r+0x7e>
 801441e:	898a      	ldrh	r2, [r1, #12]
 8014420:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014424:	d031      	beq.n	801448a <__ssputs_r+0x7e>
 8014426:	6825      	ldr	r5, [r4, #0]
 8014428:	6909      	ldr	r1, [r1, #16]
 801442a:	1a6f      	subs	r7, r5, r1
 801442c:	6965      	ldr	r5, [r4, #20]
 801442e:	2302      	movs	r3, #2
 8014430:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014434:	fb95 f5f3 	sdiv	r5, r5, r3
 8014438:	f108 0301 	add.w	r3, r8, #1
 801443c:	443b      	add	r3, r7
 801443e:	429d      	cmp	r5, r3
 8014440:	bf38      	it	cc
 8014442:	461d      	movcc	r5, r3
 8014444:	0553      	lsls	r3, r2, #21
 8014446:	d531      	bpl.n	80144ac <__ssputs_r+0xa0>
 8014448:	4629      	mov	r1, r5
 801444a:	f7ff fe4f 	bl	80140ec <_malloc_r>
 801444e:	4606      	mov	r6, r0
 8014450:	b950      	cbnz	r0, 8014468 <__ssputs_r+0x5c>
 8014452:	230c      	movs	r3, #12
 8014454:	f8ca 3000 	str.w	r3, [sl]
 8014458:	89a3      	ldrh	r3, [r4, #12]
 801445a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801445e:	81a3      	strh	r3, [r4, #12]
 8014460:	f04f 30ff 	mov.w	r0, #4294967295
 8014464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014468:	463a      	mov	r2, r7
 801446a:	6921      	ldr	r1, [r4, #16]
 801446c:	f7ff fdc2 	bl	8013ff4 <memcpy>
 8014470:	89a3      	ldrh	r3, [r4, #12]
 8014472:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801447a:	81a3      	strh	r3, [r4, #12]
 801447c:	6126      	str	r6, [r4, #16]
 801447e:	6165      	str	r5, [r4, #20]
 8014480:	443e      	add	r6, r7
 8014482:	1bed      	subs	r5, r5, r7
 8014484:	6026      	str	r6, [r4, #0]
 8014486:	60a5      	str	r5, [r4, #8]
 8014488:	4646      	mov	r6, r8
 801448a:	4546      	cmp	r6, r8
 801448c:	bf28      	it	cs
 801448e:	4646      	movcs	r6, r8
 8014490:	4632      	mov	r2, r6
 8014492:	4649      	mov	r1, r9
 8014494:	6820      	ldr	r0, [r4, #0]
 8014496:	f7ff fdb8 	bl	801400a <memmove>
 801449a:	68a3      	ldr	r3, [r4, #8]
 801449c:	1b9b      	subs	r3, r3, r6
 801449e:	60a3      	str	r3, [r4, #8]
 80144a0:	6823      	ldr	r3, [r4, #0]
 80144a2:	441e      	add	r6, r3
 80144a4:	6026      	str	r6, [r4, #0]
 80144a6:	2000      	movs	r0, #0
 80144a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144ac:	462a      	mov	r2, r5
 80144ae:	f000 faa5 	bl	80149fc <_realloc_r>
 80144b2:	4606      	mov	r6, r0
 80144b4:	2800      	cmp	r0, #0
 80144b6:	d1e1      	bne.n	801447c <__ssputs_r+0x70>
 80144b8:	6921      	ldr	r1, [r4, #16]
 80144ba:	4650      	mov	r0, sl
 80144bc:	f7ff fdc8 	bl	8014050 <_free_r>
 80144c0:	e7c7      	b.n	8014452 <__ssputs_r+0x46>
	...

080144c4 <_svfiprintf_r>:
 80144c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144c8:	b09d      	sub	sp, #116	; 0x74
 80144ca:	4680      	mov	r8, r0
 80144cc:	9303      	str	r3, [sp, #12]
 80144ce:	898b      	ldrh	r3, [r1, #12]
 80144d0:	061c      	lsls	r4, r3, #24
 80144d2:	460d      	mov	r5, r1
 80144d4:	4616      	mov	r6, r2
 80144d6:	d50f      	bpl.n	80144f8 <_svfiprintf_r+0x34>
 80144d8:	690b      	ldr	r3, [r1, #16]
 80144da:	b96b      	cbnz	r3, 80144f8 <_svfiprintf_r+0x34>
 80144dc:	2140      	movs	r1, #64	; 0x40
 80144de:	f7ff fe05 	bl	80140ec <_malloc_r>
 80144e2:	6028      	str	r0, [r5, #0]
 80144e4:	6128      	str	r0, [r5, #16]
 80144e6:	b928      	cbnz	r0, 80144f4 <_svfiprintf_r+0x30>
 80144e8:	230c      	movs	r3, #12
 80144ea:	f8c8 3000 	str.w	r3, [r8]
 80144ee:	f04f 30ff 	mov.w	r0, #4294967295
 80144f2:	e0c5      	b.n	8014680 <_svfiprintf_r+0x1bc>
 80144f4:	2340      	movs	r3, #64	; 0x40
 80144f6:	616b      	str	r3, [r5, #20]
 80144f8:	2300      	movs	r3, #0
 80144fa:	9309      	str	r3, [sp, #36]	; 0x24
 80144fc:	2320      	movs	r3, #32
 80144fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014502:	2330      	movs	r3, #48	; 0x30
 8014504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014508:	f04f 0b01 	mov.w	fp, #1
 801450c:	4637      	mov	r7, r6
 801450e:	463c      	mov	r4, r7
 8014510:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014514:	2b00      	cmp	r3, #0
 8014516:	d13c      	bne.n	8014592 <_svfiprintf_r+0xce>
 8014518:	ebb7 0a06 	subs.w	sl, r7, r6
 801451c:	d00b      	beq.n	8014536 <_svfiprintf_r+0x72>
 801451e:	4653      	mov	r3, sl
 8014520:	4632      	mov	r2, r6
 8014522:	4629      	mov	r1, r5
 8014524:	4640      	mov	r0, r8
 8014526:	f7ff ff71 	bl	801440c <__ssputs_r>
 801452a:	3001      	adds	r0, #1
 801452c:	f000 80a3 	beq.w	8014676 <_svfiprintf_r+0x1b2>
 8014530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014532:	4453      	add	r3, sl
 8014534:	9309      	str	r3, [sp, #36]	; 0x24
 8014536:	783b      	ldrb	r3, [r7, #0]
 8014538:	2b00      	cmp	r3, #0
 801453a:	f000 809c 	beq.w	8014676 <_svfiprintf_r+0x1b2>
 801453e:	2300      	movs	r3, #0
 8014540:	f04f 32ff 	mov.w	r2, #4294967295
 8014544:	9304      	str	r3, [sp, #16]
 8014546:	9307      	str	r3, [sp, #28]
 8014548:	9205      	str	r2, [sp, #20]
 801454a:	9306      	str	r3, [sp, #24]
 801454c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014550:	931a      	str	r3, [sp, #104]	; 0x68
 8014552:	2205      	movs	r2, #5
 8014554:	7821      	ldrb	r1, [r4, #0]
 8014556:	4850      	ldr	r0, [pc, #320]	; (8014698 <_svfiprintf_r+0x1d4>)
 8014558:	f7eb fe52 	bl	8000200 <memchr>
 801455c:	1c67      	adds	r7, r4, #1
 801455e:	9b04      	ldr	r3, [sp, #16]
 8014560:	b9d8      	cbnz	r0, 801459a <_svfiprintf_r+0xd6>
 8014562:	06d9      	lsls	r1, r3, #27
 8014564:	bf44      	itt	mi
 8014566:	2220      	movmi	r2, #32
 8014568:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801456c:	071a      	lsls	r2, r3, #28
 801456e:	bf44      	itt	mi
 8014570:	222b      	movmi	r2, #43	; 0x2b
 8014572:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014576:	7822      	ldrb	r2, [r4, #0]
 8014578:	2a2a      	cmp	r2, #42	; 0x2a
 801457a:	d016      	beq.n	80145aa <_svfiprintf_r+0xe6>
 801457c:	9a07      	ldr	r2, [sp, #28]
 801457e:	2100      	movs	r1, #0
 8014580:	200a      	movs	r0, #10
 8014582:	4627      	mov	r7, r4
 8014584:	3401      	adds	r4, #1
 8014586:	783b      	ldrb	r3, [r7, #0]
 8014588:	3b30      	subs	r3, #48	; 0x30
 801458a:	2b09      	cmp	r3, #9
 801458c:	d951      	bls.n	8014632 <_svfiprintf_r+0x16e>
 801458e:	b1c9      	cbz	r1, 80145c4 <_svfiprintf_r+0x100>
 8014590:	e011      	b.n	80145b6 <_svfiprintf_r+0xf2>
 8014592:	2b25      	cmp	r3, #37	; 0x25
 8014594:	d0c0      	beq.n	8014518 <_svfiprintf_r+0x54>
 8014596:	4627      	mov	r7, r4
 8014598:	e7b9      	b.n	801450e <_svfiprintf_r+0x4a>
 801459a:	4a3f      	ldr	r2, [pc, #252]	; (8014698 <_svfiprintf_r+0x1d4>)
 801459c:	1a80      	subs	r0, r0, r2
 801459e:	fa0b f000 	lsl.w	r0, fp, r0
 80145a2:	4318      	orrs	r0, r3
 80145a4:	9004      	str	r0, [sp, #16]
 80145a6:	463c      	mov	r4, r7
 80145a8:	e7d3      	b.n	8014552 <_svfiprintf_r+0x8e>
 80145aa:	9a03      	ldr	r2, [sp, #12]
 80145ac:	1d11      	adds	r1, r2, #4
 80145ae:	6812      	ldr	r2, [r2, #0]
 80145b0:	9103      	str	r1, [sp, #12]
 80145b2:	2a00      	cmp	r2, #0
 80145b4:	db01      	blt.n	80145ba <_svfiprintf_r+0xf6>
 80145b6:	9207      	str	r2, [sp, #28]
 80145b8:	e004      	b.n	80145c4 <_svfiprintf_r+0x100>
 80145ba:	4252      	negs	r2, r2
 80145bc:	f043 0302 	orr.w	r3, r3, #2
 80145c0:	9207      	str	r2, [sp, #28]
 80145c2:	9304      	str	r3, [sp, #16]
 80145c4:	783b      	ldrb	r3, [r7, #0]
 80145c6:	2b2e      	cmp	r3, #46	; 0x2e
 80145c8:	d10e      	bne.n	80145e8 <_svfiprintf_r+0x124>
 80145ca:	787b      	ldrb	r3, [r7, #1]
 80145cc:	2b2a      	cmp	r3, #42	; 0x2a
 80145ce:	f107 0101 	add.w	r1, r7, #1
 80145d2:	d132      	bne.n	801463a <_svfiprintf_r+0x176>
 80145d4:	9b03      	ldr	r3, [sp, #12]
 80145d6:	1d1a      	adds	r2, r3, #4
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	9203      	str	r2, [sp, #12]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	bfb8      	it	lt
 80145e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80145e4:	3702      	adds	r7, #2
 80145e6:	9305      	str	r3, [sp, #20]
 80145e8:	4c2c      	ldr	r4, [pc, #176]	; (801469c <_svfiprintf_r+0x1d8>)
 80145ea:	7839      	ldrb	r1, [r7, #0]
 80145ec:	2203      	movs	r2, #3
 80145ee:	4620      	mov	r0, r4
 80145f0:	f7eb fe06 	bl	8000200 <memchr>
 80145f4:	b138      	cbz	r0, 8014606 <_svfiprintf_r+0x142>
 80145f6:	2340      	movs	r3, #64	; 0x40
 80145f8:	1b00      	subs	r0, r0, r4
 80145fa:	fa03 f000 	lsl.w	r0, r3, r0
 80145fe:	9b04      	ldr	r3, [sp, #16]
 8014600:	4303      	orrs	r3, r0
 8014602:	9304      	str	r3, [sp, #16]
 8014604:	3701      	adds	r7, #1
 8014606:	7839      	ldrb	r1, [r7, #0]
 8014608:	4825      	ldr	r0, [pc, #148]	; (80146a0 <_svfiprintf_r+0x1dc>)
 801460a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801460e:	2206      	movs	r2, #6
 8014610:	1c7e      	adds	r6, r7, #1
 8014612:	f7eb fdf5 	bl	8000200 <memchr>
 8014616:	2800      	cmp	r0, #0
 8014618:	d035      	beq.n	8014686 <_svfiprintf_r+0x1c2>
 801461a:	4b22      	ldr	r3, [pc, #136]	; (80146a4 <_svfiprintf_r+0x1e0>)
 801461c:	b9fb      	cbnz	r3, 801465e <_svfiprintf_r+0x19a>
 801461e:	9b03      	ldr	r3, [sp, #12]
 8014620:	3307      	adds	r3, #7
 8014622:	f023 0307 	bic.w	r3, r3, #7
 8014626:	3308      	adds	r3, #8
 8014628:	9303      	str	r3, [sp, #12]
 801462a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801462c:	444b      	add	r3, r9
 801462e:	9309      	str	r3, [sp, #36]	; 0x24
 8014630:	e76c      	b.n	801450c <_svfiprintf_r+0x48>
 8014632:	fb00 3202 	mla	r2, r0, r2, r3
 8014636:	2101      	movs	r1, #1
 8014638:	e7a3      	b.n	8014582 <_svfiprintf_r+0xbe>
 801463a:	2300      	movs	r3, #0
 801463c:	9305      	str	r3, [sp, #20]
 801463e:	4618      	mov	r0, r3
 8014640:	240a      	movs	r4, #10
 8014642:	460f      	mov	r7, r1
 8014644:	3101      	adds	r1, #1
 8014646:	783a      	ldrb	r2, [r7, #0]
 8014648:	3a30      	subs	r2, #48	; 0x30
 801464a:	2a09      	cmp	r2, #9
 801464c:	d903      	bls.n	8014656 <_svfiprintf_r+0x192>
 801464e:	2b00      	cmp	r3, #0
 8014650:	d0ca      	beq.n	80145e8 <_svfiprintf_r+0x124>
 8014652:	9005      	str	r0, [sp, #20]
 8014654:	e7c8      	b.n	80145e8 <_svfiprintf_r+0x124>
 8014656:	fb04 2000 	mla	r0, r4, r0, r2
 801465a:	2301      	movs	r3, #1
 801465c:	e7f1      	b.n	8014642 <_svfiprintf_r+0x17e>
 801465e:	ab03      	add	r3, sp, #12
 8014660:	9300      	str	r3, [sp, #0]
 8014662:	462a      	mov	r2, r5
 8014664:	4b10      	ldr	r3, [pc, #64]	; (80146a8 <_svfiprintf_r+0x1e4>)
 8014666:	a904      	add	r1, sp, #16
 8014668:	4640      	mov	r0, r8
 801466a:	f3af 8000 	nop.w
 801466e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014672:	4681      	mov	r9, r0
 8014674:	d1d9      	bne.n	801462a <_svfiprintf_r+0x166>
 8014676:	89ab      	ldrh	r3, [r5, #12]
 8014678:	065b      	lsls	r3, r3, #25
 801467a:	f53f af38 	bmi.w	80144ee <_svfiprintf_r+0x2a>
 801467e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014680:	b01d      	add	sp, #116	; 0x74
 8014682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014686:	ab03      	add	r3, sp, #12
 8014688:	9300      	str	r3, [sp, #0]
 801468a:	462a      	mov	r2, r5
 801468c:	4b06      	ldr	r3, [pc, #24]	; (80146a8 <_svfiprintf_r+0x1e4>)
 801468e:	a904      	add	r1, sp, #16
 8014690:	4640      	mov	r0, r8
 8014692:	f000 f881 	bl	8014798 <_printf_i>
 8014696:	e7ea      	b.n	801466e <_svfiprintf_r+0x1aa>
 8014698:	080182d8 	.word	0x080182d8
 801469c:	080182de 	.word	0x080182de
 80146a0:	080182e2 	.word	0x080182e2
 80146a4:	00000000 	.word	0x00000000
 80146a8:	0801440d 	.word	0x0801440d

080146ac <_printf_common>:
 80146ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146b0:	4691      	mov	r9, r2
 80146b2:	461f      	mov	r7, r3
 80146b4:	688a      	ldr	r2, [r1, #8]
 80146b6:	690b      	ldr	r3, [r1, #16]
 80146b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80146bc:	4293      	cmp	r3, r2
 80146be:	bfb8      	it	lt
 80146c0:	4613      	movlt	r3, r2
 80146c2:	f8c9 3000 	str.w	r3, [r9]
 80146c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80146ca:	4606      	mov	r6, r0
 80146cc:	460c      	mov	r4, r1
 80146ce:	b112      	cbz	r2, 80146d6 <_printf_common+0x2a>
 80146d0:	3301      	adds	r3, #1
 80146d2:	f8c9 3000 	str.w	r3, [r9]
 80146d6:	6823      	ldr	r3, [r4, #0]
 80146d8:	0699      	lsls	r1, r3, #26
 80146da:	bf42      	ittt	mi
 80146dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80146e0:	3302      	addmi	r3, #2
 80146e2:	f8c9 3000 	strmi.w	r3, [r9]
 80146e6:	6825      	ldr	r5, [r4, #0]
 80146e8:	f015 0506 	ands.w	r5, r5, #6
 80146ec:	d107      	bne.n	80146fe <_printf_common+0x52>
 80146ee:	f104 0a19 	add.w	sl, r4, #25
 80146f2:	68e3      	ldr	r3, [r4, #12]
 80146f4:	f8d9 2000 	ldr.w	r2, [r9]
 80146f8:	1a9b      	subs	r3, r3, r2
 80146fa:	429d      	cmp	r5, r3
 80146fc:	db29      	blt.n	8014752 <_printf_common+0xa6>
 80146fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014702:	6822      	ldr	r2, [r4, #0]
 8014704:	3300      	adds	r3, #0
 8014706:	bf18      	it	ne
 8014708:	2301      	movne	r3, #1
 801470a:	0692      	lsls	r2, r2, #26
 801470c:	d42e      	bmi.n	801476c <_printf_common+0xc0>
 801470e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014712:	4639      	mov	r1, r7
 8014714:	4630      	mov	r0, r6
 8014716:	47c0      	blx	r8
 8014718:	3001      	adds	r0, #1
 801471a:	d021      	beq.n	8014760 <_printf_common+0xb4>
 801471c:	6823      	ldr	r3, [r4, #0]
 801471e:	68e5      	ldr	r5, [r4, #12]
 8014720:	f8d9 2000 	ldr.w	r2, [r9]
 8014724:	f003 0306 	and.w	r3, r3, #6
 8014728:	2b04      	cmp	r3, #4
 801472a:	bf08      	it	eq
 801472c:	1aad      	subeq	r5, r5, r2
 801472e:	68a3      	ldr	r3, [r4, #8]
 8014730:	6922      	ldr	r2, [r4, #16]
 8014732:	bf0c      	ite	eq
 8014734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014738:	2500      	movne	r5, #0
 801473a:	4293      	cmp	r3, r2
 801473c:	bfc4      	itt	gt
 801473e:	1a9b      	subgt	r3, r3, r2
 8014740:	18ed      	addgt	r5, r5, r3
 8014742:	f04f 0900 	mov.w	r9, #0
 8014746:	341a      	adds	r4, #26
 8014748:	454d      	cmp	r5, r9
 801474a:	d11b      	bne.n	8014784 <_printf_common+0xd8>
 801474c:	2000      	movs	r0, #0
 801474e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014752:	2301      	movs	r3, #1
 8014754:	4652      	mov	r2, sl
 8014756:	4639      	mov	r1, r7
 8014758:	4630      	mov	r0, r6
 801475a:	47c0      	blx	r8
 801475c:	3001      	adds	r0, #1
 801475e:	d103      	bne.n	8014768 <_printf_common+0xbc>
 8014760:	f04f 30ff 	mov.w	r0, #4294967295
 8014764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014768:	3501      	adds	r5, #1
 801476a:	e7c2      	b.n	80146f2 <_printf_common+0x46>
 801476c:	18e1      	adds	r1, r4, r3
 801476e:	1c5a      	adds	r2, r3, #1
 8014770:	2030      	movs	r0, #48	; 0x30
 8014772:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014776:	4422      	add	r2, r4
 8014778:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801477c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014780:	3302      	adds	r3, #2
 8014782:	e7c4      	b.n	801470e <_printf_common+0x62>
 8014784:	2301      	movs	r3, #1
 8014786:	4622      	mov	r2, r4
 8014788:	4639      	mov	r1, r7
 801478a:	4630      	mov	r0, r6
 801478c:	47c0      	blx	r8
 801478e:	3001      	adds	r0, #1
 8014790:	d0e6      	beq.n	8014760 <_printf_common+0xb4>
 8014792:	f109 0901 	add.w	r9, r9, #1
 8014796:	e7d7      	b.n	8014748 <_printf_common+0x9c>

08014798 <_printf_i>:
 8014798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801479c:	4617      	mov	r7, r2
 801479e:	7e0a      	ldrb	r2, [r1, #24]
 80147a0:	b085      	sub	sp, #20
 80147a2:	2a6e      	cmp	r2, #110	; 0x6e
 80147a4:	4698      	mov	r8, r3
 80147a6:	4606      	mov	r6, r0
 80147a8:	460c      	mov	r4, r1
 80147aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147ac:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80147b0:	f000 80bc 	beq.w	801492c <_printf_i+0x194>
 80147b4:	d81a      	bhi.n	80147ec <_printf_i+0x54>
 80147b6:	2a63      	cmp	r2, #99	; 0x63
 80147b8:	d02e      	beq.n	8014818 <_printf_i+0x80>
 80147ba:	d80a      	bhi.n	80147d2 <_printf_i+0x3a>
 80147bc:	2a00      	cmp	r2, #0
 80147be:	f000 80c8 	beq.w	8014952 <_printf_i+0x1ba>
 80147c2:	2a58      	cmp	r2, #88	; 0x58
 80147c4:	f000 808a 	beq.w	80148dc <_printf_i+0x144>
 80147c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80147cc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80147d0:	e02a      	b.n	8014828 <_printf_i+0x90>
 80147d2:	2a64      	cmp	r2, #100	; 0x64
 80147d4:	d001      	beq.n	80147da <_printf_i+0x42>
 80147d6:	2a69      	cmp	r2, #105	; 0x69
 80147d8:	d1f6      	bne.n	80147c8 <_printf_i+0x30>
 80147da:	6821      	ldr	r1, [r4, #0]
 80147dc:	681a      	ldr	r2, [r3, #0]
 80147de:	f011 0f80 	tst.w	r1, #128	; 0x80
 80147e2:	d023      	beq.n	801482c <_printf_i+0x94>
 80147e4:	1d11      	adds	r1, r2, #4
 80147e6:	6019      	str	r1, [r3, #0]
 80147e8:	6813      	ldr	r3, [r2, #0]
 80147ea:	e027      	b.n	801483c <_printf_i+0xa4>
 80147ec:	2a73      	cmp	r2, #115	; 0x73
 80147ee:	f000 80b4 	beq.w	801495a <_printf_i+0x1c2>
 80147f2:	d808      	bhi.n	8014806 <_printf_i+0x6e>
 80147f4:	2a6f      	cmp	r2, #111	; 0x6f
 80147f6:	d02a      	beq.n	801484e <_printf_i+0xb6>
 80147f8:	2a70      	cmp	r2, #112	; 0x70
 80147fa:	d1e5      	bne.n	80147c8 <_printf_i+0x30>
 80147fc:	680a      	ldr	r2, [r1, #0]
 80147fe:	f042 0220 	orr.w	r2, r2, #32
 8014802:	600a      	str	r2, [r1, #0]
 8014804:	e003      	b.n	801480e <_printf_i+0x76>
 8014806:	2a75      	cmp	r2, #117	; 0x75
 8014808:	d021      	beq.n	801484e <_printf_i+0xb6>
 801480a:	2a78      	cmp	r2, #120	; 0x78
 801480c:	d1dc      	bne.n	80147c8 <_printf_i+0x30>
 801480e:	2278      	movs	r2, #120	; 0x78
 8014810:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8014814:	496e      	ldr	r1, [pc, #440]	; (80149d0 <_printf_i+0x238>)
 8014816:	e064      	b.n	80148e2 <_printf_i+0x14a>
 8014818:	681a      	ldr	r2, [r3, #0]
 801481a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 801481e:	1d11      	adds	r1, r2, #4
 8014820:	6019      	str	r1, [r3, #0]
 8014822:	6813      	ldr	r3, [r2, #0]
 8014824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014828:	2301      	movs	r3, #1
 801482a:	e0a3      	b.n	8014974 <_printf_i+0x1dc>
 801482c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8014830:	f102 0104 	add.w	r1, r2, #4
 8014834:	6019      	str	r1, [r3, #0]
 8014836:	d0d7      	beq.n	80147e8 <_printf_i+0x50>
 8014838:	f9b2 3000 	ldrsh.w	r3, [r2]
 801483c:	2b00      	cmp	r3, #0
 801483e:	da03      	bge.n	8014848 <_printf_i+0xb0>
 8014840:	222d      	movs	r2, #45	; 0x2d
 8014842:	425b      	negs	r3, r3
 8014844:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014848:	4962      	ldr	r1, [pc, #392]	; (80149d4 <_printf_i+0x23c>)
 801484a:	220a      	movs	r2, #10
 801484c:	e017      	b.n	801487e <_printf_i+0xe6>
 801484e:	6820      	ldr	r0, [r4, #0]
 8014850:	6819      	ldr	r1, [r3, #0]
 8014852:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014856:	d003      	beq.n	8014860 <_printf_i+0xc8>
 8014858:	1d08      	adds	r0, r1, #4
 801485a:	6018      	str	r0, [r3, #0]
 801485c:	680b      	ldr	r3, [r1, #0]
 801485e:	e006      	b.n	801486e <_printf_i+0xd6>
 8014860:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014864:	f101 0004 	add.w	r0, r1, #4
 8014868:	6018      	str	r0, [r3, #0]
 801486a:	d0f7      	beq.n	801485c <_printf_i+0xc4>
 801486c:	880b      	ldrh	r3, [r1, #0]
 801486e:	4959      	ldr	r1, [pc, #356]	; (80149d4 <_printf_i+0x23c>)
 8014870:	2a6f      	cmp	r2, #111	; 0x6f
 8014872:	bf14      	ite	ne
 8014874:	220a      	movne	r2, #10
 8014876:	2208      	moveq	r2, #8
 8014878:	2000      	movs	r0, #0
 801487a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 801487e:	6865      	ldr	r5, [r4, #4]
 8014880:	60a5      	str	r5, [r4, #8]
 8014882:	2d00      	cmp	r5, #0
 8014884:	f2c0 809c 	blt.w	80149c0 <_printf_i+0x228>
 8014888:	6820      	ldr	r0, [r4, #0]
 801488a:	f020 0004 	bic.w	r0, r0, #4
 801488e:	6020      	str	r0, [r4, #0]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d13f      	bne.n	8014914 <_printf_i+0x17c>
 8014894:	2d00      	cmp	r5, #0
 8014896:	f040 8095 	bne.w	80149c4 <_printf_i+0x22c>
 801489a:	4675      	mov	r5, lr
 801489c:	2a08      	cmp	r2, #8
 801489e:	d10b      	bne.n	80148b8 <_printf_i+0x120>
 80148a0:	6823      	ldr	r3, [r4, #0]
 80148a2:	07da      	lsls	r2, r3, #31
 80148a4:	d508      	bpl.n	80148b8 <_printf_i+0x120>
 80148a6:	6923      	ldr	r3, [r4, #16]
 80148a8:	6862      	ldr	r2, [r4, #4]
 80148aa:	429a      	cmp	r2, r3
 80148ac:	bfde      	ittt	le
 80148ae:	2330      	movle	r3, #48	; 0x30
 80148b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80148b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80148b8:	ebae 0305 	sub.w	r3, lr, r5
 80148bc:	6123      	str	r3, [r4, #16]
 80148be:	f8cd 8000 	str.w	r8, [sp]
 80148c2:	463b      	mov	r3, r7
 80148c4:	aa03      	add	r2, sp, #12
 80148c6:	4621      	mov	r1, r4
 80148c8:	4630      	mov	r0, r6
 80148ca:	f7ff feef 	bl	80146ac <_printf_common>
 80148ce:	3001      	adds	r0, #1
 80148d0:	d155      	bne.n	801497e <_printf_i+0x1e6>
 80148d2:	f04f 30ff 	mov.w	r0, #4294967295
 80148d6:	b005      	add	sp, #20
 80148d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148dc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80148e0:	493c      	ldr	r1, [pc, #240]	; (80149d4 <_printf_i+0x23c>)
 80148e2:	6822      	ldr	r2, [r4, #0]
 80148e4:	6818      	ldr	r0, [r3, #0]
 80148e6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80148ea:	f100 0504 	add.w	r5, r0, #4
 80148ee:	601d      	str	r5, [r3, #0]
 80148f0:	d001      	beq.n	80148f6 <_printf_i+0x15e>
 80148f2:	6803      	ldr	r3, [r0, #0]
 80148f4:	e002      	b.n	80148fc <_printf_i+0x164>
 80148f6:	0655      	lsls	r5, r2, #25
 80148f8:	d5fb      	bpl.n	80148f2 <_printf_i+0x15a>
 80148fa:	8803      	ldrh	r3, [r0, #0]
 80148fc:	07d0      	lsls	r0, r2, #31
 80148fe:	bf44      	itt	mi
 8014900:	f042 0220 	orrmi.w	r2, r2, #32
 8014904:	6022      	strmi	r2, [r4, #0]
 8014906:	b91b      	cbnz	r3, 8014910 <_printf_i+0x178>
 8014908:	6822      	ldr	r2, [r4, #0]
 801490a:	f022 0220 	bic.w	r2, r2, #32
 801490e:	6022      	str	r2, [r4, #0]
 8014910:	2210      	movs	r2, #16
 8014912:	e7b1      	b.n	8014878 <_printf_i+0xe0>
 8014914:	4675      	mov	r5, lr
 8014916:	fbb3 f0f2 	udiv	r0, r3, r2
 801491a:	fb02 3310 	mls	r3, r2, r0, r3
 801491e:	5ccb      	ldrb	r3, [r1, r3]
 8014920:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014924:	4603      	mov	r3, r0
 8014926:	2800      	cmp	r0, #0
 8014928:	d1f5      	bne.n	8014916 <_printf_i+0x17e>
 801492a:	e7b7      	b.n	801489c <_printf_i+0x104>
 801492c:	6808      	ldr	r0, [r1, #0]
 801492e:	681a      	ldr	r2, [r3, #0]
 8014930:	6949      	ldr	r1, [r1, #20]
 8014932:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014936:	d004      	beq.n	8014942 <_printf_i+0x1aa>
 8014938:	1d10      	adds	r0, r2, #4
 801493a:	6018      	str	r0, [r3, #0]
 801493c:	6813      	ldr	r3, [r2, #0]
 801493e:	6019      	str	r1, [r3, #0]
 8014940:	e007      	b.n	8014952 <_printf_i+0x1ba>
 8014942:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014946:	f102 0004 	add.w	r0, r2, #4
 801494a:	6018      	str	r0, [r3, #0]
 801494c:	6813      	ldr	r3, [r2, #0]
 801494e:	d0f6      	beq.n	801493e <_printf_i+0x1a6>
 8014950:	8019      	strh	r1, [r3, #0]
 8014952:	2300      	movs	r3, #0
 8014954:	6123      	str	r3, [r4, #16]
 8014956:	4675      	mov	r5, lr
 8014958:	e7b1      	b.n	80148be <_printf_i+0x126>
 801495a:	681a      	ldr	r2, [r3, #0]
 801495c:	1d11      	adds	r1, r2, #4
 801495e:	6019      	str	r1, [r3, #0]
 8014960:	6815      	ldr	r5, [r2, #0]
 8014962:	6862      	ldr	r2, [r4, #4]
 8014964:	2100      	movs	r1, #0
 8014966:	4628      	mov	r0, r5
 8014968:	f7eb fc4a 	bl	8000200 <memchr>
 801496c:	b108      	cbz	r0, 8014972 <_printf_i+0x1da>
 801496e:	1b40      	subs	r0, r0, r5
 8014970:	6060      	str	r0, [r4, #4]
 8014972:	6863      	ldr	r3, [r4, #4]
 8014974:	6123      	str	r3, [r4, #16]
 8014976:	2300      	movs	r3, #0
 8014978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801497c:	e79f      	b.n	80148be <_printf_i+0x126>
 801497e:	6923      	ldr	r3, [r4, #16]
 8014980:	462a      	mov	r2, r5
 8014982:	4639      	mov	r1, r7
 8014984:	4630      	mov	r0, r6
 8014986:	47c0      	blx	r8
 8014988:	3001      	adds	r0, #1
 801498a:	d0a2      	beq.n	80148d2 <_printf_i+0x13a>
 801498c:	6823      	ldr	r3, [r4, #0]
 801498e:	079b      	lsls	r3, r3, #30
 8014990:	d507      	bpl.n	80149a2 <_printf_i+0x20a>
 8014992:	2500      	movs	r5, #0
 8014994:	f104 0919 	add.w	r9, r4, #25
 8014998:	68e3      	ldr	r3, [r4, #12]
 801499a:	9a03      	ldr	r2, [sp, #12]
 801499c:	1a9b      	subs	r3, r3, r2
 801499e:	429d      	cmp	r5, r3
 80149a0:	db05      	blt.n	80149ae <_printf_i+0x216>
 80149a2:	68e0      	ldr	r0, [r4, #12]
 80149a4:	9b03      	ldr	r3, [sp, #12]
 80149a6:	4298      	cmp	r0, r3
 80149a8:	bfb8      	it	lt
 80149aa:	4618      	movlt	r0, r3
 80149ac:	e793      	b.n	80148d6 <_printf_i+0x13e>
 80149ae:	2301      	movs	r3, #1
 80149b0:	464a      	mov	r2, r9
 80149b2:	4639      	mov	r1, r7
 80149b4:	4630      	mov	r0, r6
 80149b6:	47c0      	blx	r8
 80149b8:	3001      	adds	r0, #1
 80149ba:	d08a      	beq.n	80148d2 <_printf_i+0x13a>
 80149bc:	3501      	adds	r5, #1
 80149be:	e7eb      	b.n	8014998 <_printf_i+0x200>
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d1a7      	bne.n	8014914 <_printf_i+0x17c>
 80149c4:	780b      	ldrb	r3, [r1, #0]
 80149c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80149ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80149ce:	e765      	b.n	801489c <_printf_i+0x104>
 80149d0:	080182fa 	.word	0x080182fa
 80149d4:	080182e9 	.word	0x080182e9

080149d8 <_read_r>:
 80149d8:	b538      	push	{r3, r4, r5, lr}
 80149da:	4c07      	ldr	r4, [pc, #28]	; (80149f8 <_read_r+0x20>)
 80149dc:	4605      	mov	r5, r0
 80149de:	4608      	mov	r0, r1
 80149e0:	4611      	mov	r1, r2
 80149e2:	2200      	movs	r2, #0
 80149e4:	6022      	str	r2, [r4, #0]
 80149e6:	461a      	mov	r2, r3
 80149e8:	f7fe feb6 	bl	8013758 <_read>
 80149ec:	1c43      	adds	r3, r0, #1
 80149ee:	d102      	bne.n	80149f6 <_read_r+0x1e>
 80149f0:	6823      	ldr	r3, [r4, #0]
 80149f2:	b103      	cbz	r3, 80149f6 <_read_r+0x1e>
 80149f4:	602b      	str	r3, [r5, #0]
 80149f6:	bd38      	pop	{r3, r4, r5, pc}
 80149f8:	20002480 	.word	0x20002480

080149fc <_realloc_r>:
 80149fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149fe:	4607      	mov	r7, r0
 8014a00:	4614      	mov	r4, r2
 8014a02:	460e      	mov	r6, r1
 8014a04:	b921      	cbnz	r1, 8014a10 <_realloc_r+0x14>
 8014a06:	4611      	mov	r1, r2
 8014a08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014a0c:	f7ff bb6e 	b.w	80140ec <_malloc_r>
 8014a10:	b922      	cbnz	r2, 8014a1c <_realloc_r+0x20>
 8014a12:	f7ff fb1d 	bl	8014050 <_free_r>
 8014a16:	4625      	mov	r5, r4
 8014a18:	4628      	mov	r0, r5
 8014a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a1c:	f000 f814 	bl	8014a48 <_malloc_usable_size_r>
 8014a20:	4284      	cmp	r4, r0
 8014a22:	d90f      	bls.n	8014a44 <_realloc_r+0x48>
 8014a24:	4621      	mov	r1, r4
 8014a26:	4638      	mov	r0, r7
 8014a28:	f7ff fb60 	bl	80140ec <_malloc_r>
 8014a2c:	4605      	mov	r5, r0
 8014a2e:	2800      	cmp	r0, #0
 8014a30:	d0f2      	beq.n	8014a18 <_realloc_r+0x1c>
 8014a32:	4631      	mov	r1, r6
 8014a34:	4622      	mov	r2, r4
 8014a36:	f7ff fadd 	bl	8013ff4 <memcpy>
 8014a3a:	4631      	mov	r1, r6
 8014a3c:	4638      	mov	r0, r7
 8014a3e:	f7ff fb07 	bl	8014050 <_free_r>
 8014a42:	e7e9      	b.n	8014a18 <_realloc_r+0x1c>
 8014a44:	4635      	mov	r5, r6
 8014a46:	e7e7      	b.n	8014a18 <_realloc_r+0x1c>

08014a48 <_malloc_usable_size_r>:
 8014a48:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8014a4c:	2800      	cmp	r0, #0
 8014a4e:	f1a0 0004 	sub.w	r0, r0, #4
 8014a52:	bfbc      	itt	lt
 8014a54:	580b      	ldrlt	r3, [r1, r0]
 8014a56:	18c0      	addlt	r0, r0, r3
 8014a58:	4770      	bx	lr
	...

08014a5c <_init>:
 8014a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a5e:	bf00      	nop
 8014a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a62:	bc08      	pop	{r3}
 8014a64:	469e      	mov	lr, r3
 8014a66:	4770      	bx	lr

08014a68 <_fini>:
 8014a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a6a:	bf00      	nop
 8014a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a6e:	bc08      	pop	{r3}
 8014a70:	469e      	mov	lr, r3
 8014a72:	4770      	bx	lr
