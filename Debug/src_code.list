
src_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000112cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ee4  0801145c  0801145c  0002145c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08014340  08014340  00024340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08014344  08014344  00024344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  08014348  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000301dc  2**0
                  CONTENTS
  7 .bss          000015b0  200001dc  200001dc  000301dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  2000178c  2000178c  000301dc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000325ec  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000618c  00000000  00000000  000627f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000013b8  00000000  00000000  00068988  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001320  00000000  00000000  00069d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e580  00000000  00000000  0006b060  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000050fc  00000000  00000000  000795e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007e6dc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005394  00000000  00000000  0007e758  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011444 	.word	0x08011444

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08011444 	.word	0x08011444

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <gsm_get_response>:
bool ppp_connected = false;

extern uint8_t rx_buffer[128];
extern volatile bool rx_line_ready;

static const char* gsm_get_response(void) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
    if (rx_line_ready) {
 80002a4:	4b16      	ldr	r3, [pc, #88]	; (8000300 <gsm_get_response+0x60>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d025      	beq.n	80002fa <gsm_get_response+0x5a>
        rx_line_ready = false;
 80002ae:	4b14      	ldr	r3, [pc, #80]	; (8000300 <gsm_get_response+0x60>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	701a      	strb	r2, [r3, #0]
        extern void uart_log(const char* msg);
        uart_log("GSM RX (raw):");
 80002b4:	4813      	ldr	r0, [pc, #76]	; (8000304 <gsm_get_response+0x64>)
 80002b6:	f000 feed 	bl	8001094 <uart_log>
        uart_log((const char*)rx_buffer);
 80002ba:	4813      	ldr	r0, [pc, #76]	; (8000308 <gsm_get_response+0x68>)
 80002bc:	f000 feea 	bl	8001094 <uart_log>
        static char parsed_line[128];
        strncpy(parsed_line, (const char*)rx_buffer, sizeof(parsed_line) - 1);
 80002c0:	227f      	movs	r2, #127	; 0x7f
 80002c2:	4911      	ldr	r1, [pc, #68]	; (8000308 <gsm_get_response+0x68>)
 80002c4:	4811      	ldr	r0, [pc, #68]	; (800030c <gsm_get_response+0x6c>)
 80002c6:	f010 fd22 	bl	8010d0e <strncpy>
        parsed_line[sizeof(parsed_line) - 1] = '\0';
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <gsm_get_response+0x6c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        // Nếu nhận được CONNECT thì set ppp_connected = true và chuyển sang PPP data mode
        if (strstr((const char*)rx_buffer, "CONNECT") != NULL) {
 80002d2:	490f      	ldr	r1, [pc, #60]	; (8000310 <gsm_get_response+0x70>)
 80002d4:	480c      	ldr	r0, [pc, #48]	; (8000308 <gsm_get_response+0x68>)
 80002d6:	f010 fd2f 	bl	8010d38 <strstr>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d005      	beq.n	80002ec <gsm_get_response+0x4c>
            ppp_connected = true;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <gsm_get_response+0x74>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	701a      	strb	r2, [r3, #0]
            uart_set_ppp_mode(true); // Bổ sung: chuyển UART sang chế độ PPP data
 80002e6:	2001      	movs	r0, #1
 80002e8:	f000 ff3a 	bl	8001160 <uart_set_ppp_mode>
        }
        memset(rx_buffer, 0, sizeof(rx_buffer));
 80002ec:	2280      	movs	r2, #128	; 0x80
 80002ee:	2100      	movs	r1, #0
 80002f0:	4805      	ldr	r0, [pc, #20]	; (8000308 <gsm_get_response+0x68>)
 80002f2:	f010 fb72 	bl	80109da <memset>
        return parsed_line;
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <gsm_get_response+0x6c>)
 80002f8:	e000      	b.n	80002fc <gsm_get_response+0x5c>
    }
    return NULL;
 80002fa:	2300      	movs	r3, #0
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000294 	.word	0x20000294
 8000304:	0801145c 	.word	0x0801145c
 8000308:	20000510 	.word	0x20000510
 800030c:	200001fc 	.word	0x200001fc
 8000310:	0801146c 	.word	0x0801146c
 8000314:	200001f9 	.word	0x200001f9

08000318 <gsm_init>:

void gsm_init(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
    GSM_POWER_GPIO_PORT->MODER &= ~(3U << (GSM_POWER_PIN * 2));
 800031c:	4a17      	ldr	r2, [pc, #92]	; (800037c <gsm_init+0x64>)
 800031e:	4b17      	ldr	r3, [pc, #92]	; (800037c <gsm_init+0x64>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000326:	6013      	str	r3, [r2, #0]
    GSM_POWER_GPIO_PORT->MODER |=  (1U << (GSM_POWER_PIN * 2));
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <gsm_init+0x64>)
 800032a:	4b14      	ldr	r3, [pc, #80]	; (800037c <gsm_init+0x64>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000332:	6013      	str	r3, [r2, #0]
    GSM_POWER_GPIO_PORT->OTYPER &= ~(1U << GSM_POWER_PIN);
 8000334:	4a11      	ldr	r2, [pc, #68]	; (800037c <gsm_init+0x64>)
 8000336:	4b11      	ldr	r3, [pc, #68]	; (800037c <gsm_init+0x64>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800033e:	6053      	str	r3, [r2, #4]
    GSM_POWER_GPIO_PORT->OSPEEDR |= (3U << (GSM_POWER_PIN * 2));
 8000340:	4a0e      	ldr	r2, [pc, #56]	; (800037c <gsm_init+0x64>)
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <gsm_init+0x64>)
 8000344:	689b      	ldr	r3, [r3, #8]
 8000346:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800034a:	6093      	str	r3, [r2, #8]
    GSM_POWER_GPIO_PORT->PUPDR &= ~(3U << (GSM_POWER_PIN * 2));
 800034c:	4a0b      	ldr	r2, [pc, #44]	; (800037c <gsm_init+0x64>)
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <gsm_init+0x64>)
 8000350:	68db      	ldr	r3, [r3, #12]
 8000352:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000356:	60d3      	str	r3, [r2, #12]
    GSM_POWER_GPIO_PORT->ODR |= (1U << GSM_POWER_PIN);
 8000358:	4a08      	ldr	r2, [pc, #32]	; (800037c <gsm_init+0x64>)
 800035a:	4b08      	ldr	r3, [pc, #32]	; (800037c <gsm_init+0x64>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000362:	6153      	str	r3, [r2, #20]

    current_state = GSM_STATE_POWER_ON;
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <gsm_init+0x68>)
 8000366:	2201      	movs	r2, #1
 8000368:	701a      	strb	r2, [r3, #0]
    ppp_connected = false;
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <gsm_init+0x6c>)
 800036c:	2200      	movs	r2, #0
 800036e:	701a      	strb	r2, [r3, #0]
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40020000 	.word	0x40020000
 8000380:	200001f8 	.word	0x200001f8
 8000384:	200001f9 	.word	0x200001f9

08000388 <gsm_send_command>:

void gsm_send_command(const char* cmd)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
    usart1_hw_uart_send_raw((const uint8_t*)cmd, strlen(cmd));
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f7ff ff27 	bl	80001e4 <strlen>
 8000396:	4603      	mov	r3, r0
 8000398:	4619      	mov	r1, r3
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 feb2 	bl	8001104 <usart1_hw_uart_send_raw>
}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <gsm_get_state>:

gsm_state_t gsm_get_state(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
    return current_state;
 80003ac:	4b03      	ldr	r3, [pc, #12]	; (80003bc <gsm_get_state+0x14>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	200001f8 	.word	0x200001f8

080003c0 <gsm_update_led_mode>:
{
    current_state = GSM_STATE_ERROR;
}

// Hàm cập nhật trạng thái LED, chỉ gọi khi trạng thái GSM thay đổi
static void gsm_update_led_mode(gsm_state_t state) {
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	3b01      	subs	r3, #1
 80003ce:	2b07      	cmp	r3, #7
 80003d0:	d81e      	bhi.n	8000410 <gsm_update_led_mode+0x50>
 80003d2:	a201      	add	r2, pc, #4	; (adr r2, 80003d8 <gsm_update_led_mode+0x18>)
 80003d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d8:	08000401 	.word	0x08000401
 80003dc:	08000401 	.word	0x08000401
 80003e0:	08000401 	.word	0x08000401
 80003e4:	08000401 	.word	0x08000401
 80003e8:	08000401 	.word	0x08000401
 80003ec:	08000409 	.word	0x08000409
 80003f0:	08000409 	.word	0x08000409
 80003f4:	080003f9 	.word	0x080003f9
        case GSM_STATE_ERROR:
            led_4g_mode = LED_4G_BLINK_200_500_200_2000;
 80003f8:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <gsm_update_led_mode+0x64>)
 80003fa:	2203      	movs	r2, #3
 80003fc:	701a      	strb	r2, [r3, #0]
            break;
 80003fe:	e00b      	b.n	8000418 <gsm_update_led_mode+0x58>
        case GSM_STATE_POWER_ON:
        case GSM_STATE_WAIT_READY:
        case GSM_STATE_AT_OK:
        case GSM_STATE_SIGNAL_OK:
        case GSM_STATE_APN_SET:
            led_4g_mode = LED_4G_BLINK_200_200;
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <gsm_update_led_mode+0x64>)
 8000402:	2202      	movs	r2, #2
 8000404:	701a      	strb	r2, [r3, #0]
            break;
 8000406:	e007      	b.n	8000418 <gsm_update_led_mode+0x58>
        case GSM_STATE_DIALING:
        case GSM_STATE_PPP_MODE:
            led_4g_mode = LED_4G_ON;
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <gsm_update_led_mode+0x64>)
 800040a:	2201      	movs	r2, #1
 800040c:	701a      	strb	r2, [r3, #0]
            break;
 800040e:	e003      	b.n	8000418 <gsm_update_led_mode+0x58>
        default:
            led_4g_mode = LED_4G_OFF;
 8000410:	4b04      	ldr	r3, [pc, #16]	; (8000424 <gsm_update_led_mode+0x64>)
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
            break;
 8000416:	bf00      	nop
    }
}
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	20000318 	.word	0x20000318

08000428 <gsm_process>:

void gsm_process(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
    static uint32_t last_cmd_tick = 0;
    static gsm_state_t last_state = GSM_STATE_POWER_OFF;
    static int retry_count = 0;
    const uint32_t GSM_CMD_TIMEOUT = 2000;
 800042e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000432:	60fb      	str	r3, [r7, #12]
    const int GSM_CMD_MAX_RETRY = 3;
 8000434:	2303      	movs	r3, #3
 8000436:	60bb      	str	r3, [r7, #8]

    const char* resp = gsm_get_response();
 8000438:	f7ff ff32 	bl	80002a0 <gsm_get_response>
 800043c:	6078      	str	r0, [r7, #4]

    static gsm_state_t prev_led_state = GSM_STATE_POWER_OFF;
    if (current_state != prev_led_state) {
 800043e:	4b93      	ldr	r3, [pc, #588]	; (800068c <gsm_process+0x264>)
 8000440:	781a      	ldrb	r2, [r3, #0]
 8000442:	4b93      	ldr	r3, [pc, #588]	; (8000690 <gsm_process+0x268>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	429a      	cmp	r2, r3
 8000448:	d008      	beq.n	800045c <gsm_process+0x34>
        gsm_update_led_mode(current_state);
 800044a:	4b90      	ldr	r3, [pc, #576]	; (800068c <gsm_process+0x264>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ffb6 	bl	80003c0 <gsm_update_led_mode>
        prev_led_state = current_state;
 8000454:	4b8d      	ldr	r3, [pc, #564]	; (800068c <gsm_process+0x264>)
 8000456:	781a      	ldrb	r2, [r3, #0]
 8000458:	4b8d      	ldr	r3, [pc, #564]	; (8000690 <gsm_process+0x268>)
 800045a:	701a      	strb	r2, [r3, #0]
    }

    // Chỉ bỏ qua gửi lệnh và kiểm tra lỗi ở DIALING/PPP_MODE
    bool skip_cmd = (current_state == GSM_STATE_DIALING || current_state == GSM_STATE_PPP_MODE);
 800045c:	4b8b      	ldr	r3, [pc, #556]	; (800068c <gsm_process+0x264>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b06      	cmp	r3, #6
 8000462:	d003      	beq.n	800046c <gsm_process+0x44>
 8000464:	4b89      	ldr	r3, [pc, #548]	; (800068c <gsm_process+0x264>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b07      	cmp	r3, #7
 800046a:	d101      	bne.n	8000470 <gsm_process+0x48>
 800046c:	2301      	movs	r3, #1
 800046e:	e000      	b.n	8000472 <gsm_process+0x4a>
 8000470:	2300      	movs	r3, #0
 8000472:	70fb      	strb	r3, [r7, #3]
 8000474:	78fb      	ldrb	r3, [r7, #3]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	70fb      	strb	r3, [r7, #3]

    if (!skip_cmd && resp) {
 800047c:	78fb      	ldrb	r3, [r7, #3]
 800047e:	f083 0301 	eor.w	r3, r3, #1
 8000482:	b2db      	uxtb	r3, r3
 8000484:	2b00      	cmp	r3, #0
 8000486:	d02a      	beq.n	80004de <gsm_process+0xb6>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d027      	beq.n	80004de <gsm_process+0xb6>
        gsm_state_t new_state = gsm_state_handle_response(current_state, resp);
 800048e:	4b7f      	ldr	r3, [pc, #508]	; (800068c <gsm_process+0x264>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	6879      	ldr	r1, [r7, #4]
 8000494:	4618      	mov	r0, r3
 8000496:	f000 fb3f 	bl	8000b18 <gsm_state_handle_response>
 800049a:	4603      	mov	r3, r0
 800049c:	70bb      	strb	r3, [r7, #2]
        if (new_state == current_state) {
 800049e:	4b7b      	ldr	r3, [pc, #492]	; (800068c <gsm_process+0x264>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	78ba      	ldrb	r2, [r7, #2]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d10f      	bne.n	80004c8 <gsm_process+0xa0>
            if (gsm_parser_is_sim_error(resp) || gsm_parser_is_error(resp)) {
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f000 f9b5 	bl	8000818 <gsm_parser_is_sim_error>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d105      	bne.n	80004c0 <gsm_process+0x98>
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f000 f9fd 	bl	80008b4 <gsm_parser_is_error>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d00e      	beq.n	80004de <gsm_process+0xb6>
                current_state = GSM_STATE_ERROR;
 80004c0:	4b72      	ldr	r3, [pc, #456]	; (800068c <gsm_process+0x264>)
 80004c2:	2208      	movs	r2, #8
 80004c4:	701a      	strb	r2, [r3, #0]
                return;
 80004c6:	e0dd      	b.n	8000684 <gsm_process+0x25c>
            }
        } else {
            current_state = new_state;
 80004c8:	4a70      	ldr	r2, [pc, #448]	; (800068c <gsm_process+0x264>)
 80004ca:	78bb      	ldrb	r3, [r7, #2]
 80004cc:	7013      	strb	r3, [r2, #0]
            retry_count = 0;
 80004ce:	4b71      	ldr	r3, [pc, #452]	; (8000694 <gsm_process+0x26c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
            last_cmd_tick = timer2_get_tick();
 80004d4:	f000 fd12 	bl	8000efc <timer2_get_tick>
 80004d8:	4602      	mov	r2, r0
 80004da:	4b6f      	ldr	r3, [pc, #444]	; (8000698 <gsm_process+0x270>)
 80004dc:	601a      	str	r2, [r3, #0]
        }
    }

    if (!skip_cmd) {
 80004de:	78fb      	ldrb	r3, [r7, #3]
 80004e0:	f083 0301 	eor.w	r3, r3, #1
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	f000 80cc 	beq.w	8000684 <gsm_process+0x25c>
        if (current_state != last_state) {
 80004ec:	4b67      	ldr	r3, [pc, #412]	; (800068c <gsm_process+0x264>)
 80004ee:	781a      	ldrb	r2, [r3, #0]
 80004f0:	4b6a      	ldr	r3, [pc, #424]	; (800069c <gsm_process+0x274>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d057      	beq.n	80005a8 <gsm_process+0x180>
            switch (current_state) {
 80004f8:	4b64      	ldr	r3, [pc, #400]	; (800068c <gsm_process+0x264>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	3b01      	subs	r3, #1
 80004fe:	2b05      	cmp	r3, #5
 8000500:	d844      	bhi.n	800058c <gsm_process+0x164>
 8000502:	a201      	add	r2, pc, #4	; (adr r2, 8000508 <gsm_process+0xe0>)
 8000504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000508:	08000521 	.word	0x08000521
 800050c:	0800052f 	.word	0x0800052f
 8000510:	0800053d 	.word	0x0800053d
 8000514:	0800054b 	.word	0x0800054b
 8000518:	08000571 	.word	0x08000571
 800051c:	0800057f 	.word	0x0800057f
                case GSM_STATE_POWER_ON:
                    gsm_send_command("ATE0\r\n");
 8000520:	485f      	ldr	r0, [pc, #380]	; (80006a0 <gsm_process+0x278>)
 8000522:	f7ff ff31 	bl	8000388 <gsm_send_command>
                    delay_ms(200);
 8000526:	20c8      	movs	r0, #200	; 0xc8
 8000528:	f000 fcf4 	bl	8000f14 <delay_ms>
                    break;
 800052c:	e02f      	b.n	800058e <gsm_process+0x166>
                case GSM_STATE_WAIT_READY:
                    gsm_send_command("AT+CPIN?\r\n");
 800052e:	485d      	ldr	r0, [pc, #372]	; (80006a4 <gsm_process+0x27c>)
 8000530:	f7ff ff2a 	bl	8000388 <gsm_send_command>
                    delay_ms(200);
 8000534:	20c8      	movs	r0, #200	; 0xc8
 8000536:	f000 fced 	bl	8000f14 <delay_ms>
                    break;
 800053a:	e028      	b.n	800058e <gsm_process+0x166>
                case GSM_STATE_AT_OK:
                    gsm_send_command("AT+CSQ\r\n");
 800053c:	485a      	ldr	r0, [pc, #360]	; (80006a8 <gsm_process+0x280>)
 800053e:	f7ff ff23 	bl	8000388 <gsm_send_command>
                    delay_ms(200);
 8000542:	20c8      	movs	r0, #200	; 0xc8
 8000544:	f000 fce6 	bl	8000f14 <delay_ms>
                    break;
 8000548:	e021      	b.n	800058e <gsm_process+0x166>
                case GSM_STATE_SIGNAL_OK:
                    gsm_send_command("AT+CGDCONT=1,\"IP\",\"m-internet\"\r\n");
 800054a:	4858      	ldr	r0, [pc, #352]	; (80006ac <gsm_process+0x284>)
 800054c:	f7ff ff1c 	bl	8000388 <gsm_send_command>
                    uart_log("GSM: APN da duoc cau hinh");
 8000550:	4857      	ldr	r0, [pc, #348]	; (80006b0 <gsm_process+0x288>)
 8000552:	f000 fd9f 	bl	8001094 <uart_log>
                    delay_ms(200);
 8000556:	20c8      	movs	r0, #200	; 0xc8
 8000558:	f000 fcdc 	bl	8000f14 <delay_ms>
                    // Gửi lệnh attach GPRS, chỉ log, không kiểm tra phản hồi để tránh treo
                    gsm_send_command("AT+CGATT=1\r\n");
 800055c:	4855      	ldr	r0, [pc, #340]	; (80006b4 <gsm_process+0x28c>)
 800055e:	f7ff ff13 	bl	8000388 <gsm_send_command>
                    uart_log("GSM: da gui AT+CGATT=1 (khong kiem tra phan hoi)");
 8000562:	4855      	ldr	r0, [pc, #340]	; (80006b8 <gsm_process+0x290>)
 8000564:	f000 fd96 	bl	8001094 <uart_log>
                    delay_ms(200);
 8000568:	20c8      	movs	r0, #200	; 0xc8
 800056a:	f000 fcd3 	bl	8000f14 <delay_ms>
                    break;
 800056e:	e00e      	b.n	800058e <gsm_process+0x166>
                case GSM_STATE_APN_SET:
                    gsm_send_command("AT+CGACT=1,1\r\n");
 8000570:	4852      	ldr	r0, [pc, #328]	; (80006bc <gsm_process+0x294>)
 8000572:	f7ff ff09 	bl	8000388 <gsm_send_command>
                    delay_ms(200);
 8000576:	20c8      	movs	r0, #200	; 0xc8
 8000578:	f000 fccc 	bl	8000f14 <delay_ms>
                    break;
 800057c:	e007      	b.n	800058e <gsm_process+0x166>
                case GSM_STATE_DIALING:
                    gsm_send_command("ATD*99***1#\r\n");
 800057e:	4850      	ldr	r0, [pc, #320]	; (80006c0 <gsm_process+0x298>)
 8000580:	f7ff ff02 	bl	8000388 <gsm_send_command>
                    delay_ms(200);
 8000584:	20c8      	movs	r0, #200	; 0xc8
 8000586:	f000 fcc5 	bl	8000f14 <delay_ms>
                    break;
 800058a:	e000      	b.n	800058e <gsm_process+0x166>
                default:
                    break;
 800058c:	bf00      	nop
            }
            last_cmd_tick = timer2_get_tick();
 800058e:	f000 fcb5 	bl	8000efc <timer2_get_tick>
 8000592:	4602      	mov	r2, r0
 8000594:	4b40      	ldr	r3, [pc, #256]	; (8000698 <gsm_process+0x270>)
 8000596:	601a      	str	r2, [r3, #0]
            retry_count = 0;
 8000598:	4b3e      	ldr	r3, [pc, #248]	; (8000694 <gsm_process+0x26c>)
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
            last_state = current_state;
 800059e:	4b3b      	ldr	r3, [pc, #236]	; (800068c <gsm_process+0x264>)
 80005a0:	781a      	ldrb	r2, [r3, #0]
 80005a2:	4b3e      	ldr	r3, [pc, #248]	; (800069c <gsm_process+0x274>)
 80005a4:	701a      	strb	r2, [r3, #0]
 80005a6:	e062      	b.n	800066e <gsm_process+0x246>
        } else if (timer2_get_tick() - last_cmd_tick > GSM_CMD_TIMEOUT && retry_count < GSM_CMD_MAX_RETRY) {
 80005a8:	f000 fca8 	bl	8000efc <timer2_get_tick>
 80005ac:	4602      	mov	r2, r0
 80005ae:	4b3a      	ldr	r3, [pc, #232]	; (8000698 <gsm_process+0x270>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	1ad2      	subs	r2, r2, r3
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d959      	bls.n	800066e <gsm_process+0x246>
 80005ba:	4b36      	ldr	r3, [pc, #216]	; (8000694 <gsm_process+0x26c>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	da54      	bge.n	800066e <gsm_process+0x246>
            switch (current_state) {
 80005c4:	4b31      	ldr	r3, [pc, #196]	; (800068c <gsm_process+0x264>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d844      	bhi.n	8000658 <gsm_process+0x230>
 80005ce:	a201      	add	r2, pc, #4	; (adr r2, 80005d4 <gsm_process+0x1ac>)
 80005d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d4:	080005ed 	.word	0x080005ed
 80005d8:	080005fb 	.word	0x080005fb
 80005dc:	08000609 	.word	0x08000609
 80005e0:	08000617 	.word	0x08000617
 80005e4:	0800063d 	.word	0x0800063d
 80005e8:	0800064b 	.word	0x0800064b
                case GSM_STATE_POWER_ON:
                    gsm_send_command("ATE0\r\n");
 80005ec:	482c      	ldr	r0, [pc, #176]	; (80006a0 <gsm_process+0x278>)
 80005ee:	f7ff fecb 	bl	8000388 <gsm_send_command>
                    delay_ms(200);
 80005f2:	20c8      	movs	r0, #200	; 0xc8
 80005f4:	f000 fc8e 	bl	8000f14 <delay_ms>
                    break;
 80005f8:	e02f      	b.n	800065a <gsm_process+0x232>
                case GSM_STATE_WAIT_READY:
                    gsm_send_command("AT+CPIN?\r\n");
 80005fa:	482a      	ldr	r0, [pc, #168]	; (80006a4 <gsm_process+0x27c>)
 80005fc:	f7ff fec4 	bl	8000388 <gsm_send_command>
                    delay_ms(200);
 8000600:	20c8      	movs	r0, #200	; 0xc8
 8000602:	f000 fc87 	bl	8000f14 <delay_ms>
                    break;
 8000606:	e028      	b.n	800065a <gsm_process+0x232>
                case GSM_STATE_AT_OK:
                    gsm_send_command("AT+CSQ\r\n");
 8000608:	4827      	ldr	r0, [pc, #156]	; (80006a8 <gsm_process+0x280>)
 800060a:	f7ff febd 	bl	8000388 <gsm_send_command>
                    delay_ms(200);
 800060e:	20c8      	movs	r0, #200	; 0xc8
 8000610:	f000 fc80 	bl	8000f14 <delay_ms>
                    break;
 8000614:	e021      	b.n	800065a <gsm_process+0x232>
                case GSM_STATE_SIGNAL_OK:
                    gsm_send_command("AT+CGDCONT=1,\"IP\",\"m-internet\"\r\n");
 8000616:	4825      	ldr	r0, [pc, #148]	; (80006ac <gsm_process+0x284>)
 8000618:	f7ff feb6 	bl	8000388 <gsm_send_command>
                    uart_log("GSM: APN da duoc cau hinh");
 800061c:	4824      	ldr	r0, [pc, #144]	; (80006b0 <gsm_process+0x288>)
 800061e:	f000 fd39 	bl	8001094 <uart_log>
                    delay_ms(200);
 8000622:	20c8      	movs	r0, #200	; 0xc8
 8000624:	f000 fc76 	bl	8000f14 <delay_ms>
                    // Gửi lệnh attach GPRS khi retry, chỉ log, không kiểm tra phản hồi
                    gsm_send_command("AT+CGATT=1\r\n");
 8000628:	4822      	ldr	r0, [pc, #136]	; (80006b4 <gsm_process+0x28c>)
 800062a:	f7ff fead 	bl	8000388 <gsm_send_command>
                    uart_log("GSM: da gui AT+CGATT=1 (retry, khong kiem tra phan hoi)");
 800062e:	4825      	ldr	r0, [pc, #148]	; (80006c4 <gsm_process+0x29c>)
 8000630:	f000 fd30 	bl	8001094 <uart_log>
                    delay_ms(200);
 8000634:	20c8      	movs	r0, #200	; 0xc8
 8000636:	f000 fc6d 	bl	8000f14 <delay_ms>
                    break;
 800063a:	e00e      	b.n	800065a <gsm_process+0x232>
                case GSM_STATE_APN_SET:
                    gsm_send_command("AT+CGACT=1,1\r\n");
 800063c:	481f      	ldr	r0, [pc, #124]	; (80006bc <gsm_process+0x294>)
 800063e:	f7ff fea3 	bl	8000388 <gsm_send_command>
                    delay_ms(200);
 8000642:	20c8      	movs	r0, #200	; 0xc8
 8000644:	f000 fc66 	bl	8000f14 <delay_ms>
                    break;
 8000648:	e007      	b.n	800065a <gsm_process+0x232>
                case GSM_STATE_DIALING:
                    gsm_send_command("ATD*99***1#\r\n");
 800064a:	481d      	ldr	r0, [pc, #116]	; (80006c0 <gsm_process+0x298>)
 800064c:	f7ff fe9c 	bl	8000388 <gsm_send_command>
                    delay_ms(200);
 8000650:	20c8      	movs	r0, #200	; 0xc8
 8000652:	f000 fc5f 	bl	8000f14 <delay_ms>
                    break;
 8000656:	e000      	b.n	800065a <gsm_process+0x232>
                default:
                    break;
 8000658:	bf00      	nop
            }
            last_cmd_tick = timer2_get_tick();
 800065a:	f000 fc4f 	bl	8000efc <timer2_get_tick>
 800065e:	4602      	mov	r2, r0
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <gsm_process+0x270>)
 8000662:	601a      	str	r2, [r3, #0]
            retry_count++;
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <gsm_process+0x26c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	3301      	adds	r3, #1
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <gsm_process+0x26c>)
 800066c:	6013      	str	r3, [r2, #0]
        }

        if (retry_count >= GSM_CMD_MAX_RETRY) {
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <gsm_process+0x26c>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	429a      	cmp	r2, r3
 8000676:	db05      	blt.n	8000684 <gsm_process+0x25c>
            current_state = GSM_STATE_ERROR;
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <gsm_process+0x264>)
 800067a:	2208      	movs	r2, #8
 800067c:	701a      	strb	r2, [r3, #0]
            retry_count = 0;
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <gsm_process+0x26c>)
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
        }
    }
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200001f8 	.word	0x200001f8
 8000690:	2000027c 	.word	0x2000027c
 8000694:	20000280 	.word	0x20000280
 8000698:	20000284 	.word	0x20000284
 800069c:	20000288 	.word	0x20000288
 80006a0:	08011474 	.word	0x08011474
 80006a4:	0801147c 	.word	0x0801147c
 80006a8:	08011488 	.word	0x08011488
 80006ac:	08011494 	.word	0x08011494
 80006b0:	080114b8 	.word	0x080114b8
 80006b4:	080114d4 	.word	0x080114d4
 80006b8:	080114e4 	.word	0x080114e4
 80006bc:	08011518 	.word	0x08011518
 80006c0:	08011528 	.word	0x08011528
 80006c4:	08011538 	.word	0x08011538

080006c8 <gsm_data_layer_is_ppp_connected>:
#include "gsm_data_layer.h"

// Lấy trạng thái PPP thực tế từ gsm.c
extern bool ppp_connected;

bool gsm_data_layer_is_ppp_connected(void) {
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
    return ppp_connected;
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <gsm_data_layer_is_ppp_connected+0x14>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	200001f9 	.word	0x200001f9

080006e0 <gsm_parser_trim>:
#include "gsm_parser.h"
#include <string.h>
#include <ctype.h>

void gsm_parser_trim(char* s) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
    if (!s) return;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d042      	beq.n	8000774 <gsm_parser_trim+0x94>

    // Trim đầu
    char* start = s;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	60fb      	str	r3, [r7, #12]
    while (*start && isspace((unsigned char)*start)) start++;
 80006f2:	e002      	b.n	80006fa <gsm_parser_trim+0x1a>
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00b      	beq.n	800071a <gsm_parser_trim+0x3a>
 8000702:	f010 f925 	bl	8010950 <__locale_ctype_ptr>
 8000706:	4602      	mov	r2, r0
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	4413      	add	r3, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	2b00      	cmp	r3, #0
 8000718:	d1ec      	bne.n	80006f4 <gsm_parser_trim+0x14>

    // Trim cuối
    char* end = start + strlen(start);
 800071a:	68f8      	ldr	r0, [r7, #12]
 800071c:	f7ff fd62 	bl	80001e4 <strlen>
 8000720:	4602      	mov	r2, r0
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4413      	add	r3, r2
 8000726:	60bb      	str	r3, [r7, #8]
    while (end > start && isspace((unsigned char)*(end - 1))) end--;
 8000728:	e002      	b.n	8000730 <gsm_parser_trim+0x50>
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	3b01      	subs	r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68ba      	ldr	r2, [r7, #8]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	429a      	cmp	r2, r3
 8000736:	d90c      	bls.n	8000752 <gsm_parser_trim+0x72>
 8000738:	f010 f90a 	bl	8010950 <__locale_ctype_ptr>
 800073c:	4602      	mov	r2, r0
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	3b01      	subs	r3, #1
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	3301      	adds	r3, #1
 8000746:	4413      	add	r3, r2
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	f003 0308 	and.w	r3, r3, #8
 800074e:	2b00      	cmp	r3, #0
 8000750:	d1eb      	bne.n	800072a <gsm_parser_trim+0x4a>
    *end = '\0';
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]

    // Nếu có trim đầu, dời chuỗi
    if (start != s) memmove(s, start, end - start + 1);
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	429a      	cmp	r2, r3
 800075e:	d00a      	beq.n	8000776 <gsm_parser_trim+0x96>
 8000760:	68ba      	ldr	r2, [r7, #8]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	3301      	adds	r3, #1
 8000768:	461a      	mov	r2, r3
 800076a:	68f9      	ldr	r1, [r7, #12]
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f010 f91a 	bl	80109a6 <memmove>
 8000772:	e000      	b.n	8000776 <gsm_parser_trim+0x96>
    if (!s) return;
 8000774:	bf00      	nop
}
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <gsm_parser_is_empty_line>:

bool gsm_parser_is_empty_line(const char* resp) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    if (!resp) return true;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d112      	bne.n	80007b0 <gsm_parser_is_empty_line+0x34>
 800078a:	2301      	movs	r3, #1
 800078c:	e015      	b.n	80007ba <gsm_parser_is_empty_line+0x3e>

    while (*resp) {
        if (!isspace((unsigned char)*resp)) return false;
 800078e:	f010 f8df 	bl	8010950 <__locale_ctype_ptr>
 8000792:	4602      	mov	r2, r0
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	4413      	add	r3, r2
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d101      	bne.n	80007aa <gsm_parser_is_empty_line+0x2e>
 80007a6:	2300      	movs	r3, #0
 80007a8:	e007      	b.n	80007ba <gsm_parser_is_empty_line+0x3e>
        resp++;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3301      	adds	r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
    while (*resp) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1ea      	bne.n	800078e <gsm_parser_is_empty_line+0x12>
    }
    return true;
 80007b8:	2301      	movs	r3, #1
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <gsm_parser_is_ok>:

bool gsm_parser_is_ok(const char* resp) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
    if (!resp) return false;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d101      	bne.n	80007d6 <gsm_parser_is_ok+0x12>
 80007d2:	2300      	movs	r3, #0
 80007d4:	e01a      	b.n	800080c <gsm_parser_is_ok+0x48>

    char buf[32];
    strncpy(buf, resp, sizeof(buf) - 1);
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	221f      	movs	r2, #31
 80007dc:	6879      	ldr	r1, [r7, #4]
 80007de:	4618      	mov	r0, r3
 80007e0:	f010 fa95 	bl	8010d0e <strncpy>
    buf[sizeof(buf) - 1] = '\0';
 80007e4:	2300      	movs	r3, #0
 80007e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    gsm_parser_trim(buf);
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff76 	bl	80006e0 <gsm_parser_trim>

    return (strcmp(buf, "OK") == 0);
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	4906      	ldr	r1, [pc, #24]	; (8000814 <gsm_parser_is_ok+0x50>)
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fce8 	bl	80001d0 <strcmp>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	bf0c      	ite	eq
 8000806:	2301      	moveq	r3, #1
 8000808:	2300      	movne	r3, #0
 800080a:	b2db      	uxtb	r3, r3
}
 800080c:	4618      	mov	r0, r3
 800080e:	3728      	adds	r7, #40	; 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	08011570 	.word	0x08011570

08000818 <gsm_parser_is_sim_error>:

bool gsm_parser_is_sim_error(const char* resp) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b092      	sub	sp, #72	; 0x48
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
    if (!resp) return false;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d101      	bne.n	800082a <gsm_parser_is_sim_error+0x12>
 8000826:	2300      	movs	r3, #0
 8000828:	e038      	b.n	800089c <gsm_parser_is_sim_error+0x84>

    char buf[64];
    strncpy(buf, resp, sizeof(buf) - 1);
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	223f      	movs	r2, #63	; 0x3f
 8000830:	6879      	ldr	r1, [r7, #4]
 8000832:	4618      	mov	r0, r3
 8000834:	f010 fa6b 	bl	8010d0e <strncpy>
    buf[sizeof(buf) - 1] = '\0';
 8000838:	2300      	movs	r3, #0
 800083a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    gsm_parser_trim(buf);
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff4c 	bl	80006e0 <gsm_parser_trim>

    return strstr(buf, "SIM not inserted") ||
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	4915      	ldr	r1, [pc, #84]	; (80008a4 <gsm_parser_is_sim_error+0x8c>)
 800084e:	4618      	mov	r0, r3
 8000850:	f010 fa72 	bl	8010d38 <strstr>
 8000854:	4603      	mov	r3, r0
           strstr(buf, "+CME ERROR: 10") ||
           strstr(buf, "SIM failure") ||
 8000856:	2b00      	cmp	r3, #0
 8000858:	d11a      	bne.n	8000890 <gsm_parser_is_sim_error+0x78>
           strstr(buf, "+CME ERROR: 10") ||
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	4912      	ldr	r1, [pc, #72]	; (80008a8 <gsm_parser_is_sim_error+0x90>)
 8000860:	4618      	mov	r0, r3
 8000862:	f010 fa69 	bl	8010d38 <strstr>
 8000866:	4603      	mov	r3, r0
    return strstr(buf, "SIM not inserted") ||
 8000868:	2b00      	cmp	r3, #0
 800086a:	d111      	bne.n	8000890 <gsm_parser_is_sim_error+0x78>
           strstr(buf, "SIM failure") ||
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	490e      	ldr	r1, [pc, #56]	; (80008ac <gsm_parser_is_sim_error+0x94>)
 8000872:	4618      	mov	r0, r3
 8000874:	f010 fa60 	bl	8010d38 <strstr>
 8000878:	4603      	mov	r3, r0
           strstr(buf, "+CME ERROR: 10") ||
 800087a:	2b00      	cmp	r3, #0
 800087c:	d108      	bne.n	8000890 <gsm_parser_is_sim_error+0x78>
           strstr(buf, "SIM PIN required");
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	490b      	ldr	r1, [pc, #44]	; (80008b0 <gsm_parser_is_sim_error+0x98>)
 8000884:	4618      	mov	r0, r3
 8000886:	f010 fa57 	bl	8010d38 <strstr>
 800088a:	4603      	mov	r3, r0
           strstr(buf, "SIM failure") ||
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <gsm_parser_is_sim_error+0x7c>
 8000890:	2301      	movs	r3, #1
 8000892:	e000      	b.n	8000896 <gsm_parser_is_sim_error+0x7e>
 8000894:	2300      	movs	r3, #0
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
}
 800089c:	4618      	mov	r0, r3
 800089e:	3748      	adds	r7, #72	; 0x48
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	08011574 	.word	0x08011574
 80008a8:	08011588 	.word	0x08011588
 80008ac:	08011598 	.word	0x08011598
 80008b0:	080115a4 	.word	0x080115a4

080008b4 <gsm_parser_is_error>:

bool gsm_parser_is_error(const char* resp) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b092      	sub	sp, #72	; 0x48
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
    if (!resp || gsm_parser_is_empty_line(resp)) return false;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d005      	beq.n	80008ce <gsm_parser_is_error+0x1a>
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff ff5a 	bl	800077c <gsm_parser_is_empty_line>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <gsm_parser_is_error+0x1e>
 80008ce:	2300      	movs	r3, #0
 80008d0:	e037      	b.n	8000942 <gsm_parser_is_error+0x8e>

    if (gsm_parser_is_ok(resp)) return false;
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff ff76 	bl	80007c4 <gsm_parser_is_ok>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <gsm_parser_is_error+0x2e>
 80008de:	2300      	movs	r3, #0
 80008e0:	e02f      	b.n	8000942 <gsm_parser_is_error+0x8e>

    char buf[64];
    strncpy(buf, resp, sizeof(buf) - 1);
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	223f      	movs	r2, #63	; 0x3f
 80008e8:	6879      	ldr	r1, [r7, #4]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f010 fa0f 	bl	8010d0e <strncpy>
    buf[sizeof(buf) - 1] = '\0';
 80008f0:	2300      	movs	r3, #0
 80008f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    gsm_parser_trim(buf);
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fef0 	bl	80006e0 <gsm_parser_trim>

    return strstr(buf, "ERROR") ||
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	4911      	ldr	r1, [pc, #68]	; (800094c <gsm_parser_is_error+0x98>)
 8000906:	4618      	mov	r0, r3
 8000908:	f010 fa16 	bl	8010d38 <strstr>
 800090c:	4603      	mov	r3, r0
           strstr(buf, "+CME ERROR") ||
 800090e:	2b00      	cmp	r3, #0
 8000910:	d111      	bne.n	8000936 <gsm_parser_is_error+0x82>
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	490e      	ldr	r1, [pc, #56]	; (8000950 <gsm_parser_is_error+0x9c>)
 8000918:	4618      	mov	r0, r3
 800091a:	f010 fa0d 	bl	8010d38 <strstr>
 800091e:	4603      	mov	r3, r0
    return strstr(buf, "ERROR") ||
 8000920:	2b00      	cmp	r3, #0
 8000922:	d108      	bne.n	8000936 <gsm_parser_is_error+0x82>
           strstr(buf, "+CMS ERROR");
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	490a      	ldr	r1, [pc, #40]	; (8000954 <gsm_parser_is_error+0xa0>)
 800092a:	4618      	mov	r0, r3
 800092c:	f010 fa04 	bl	8010d38 <strstr>
 8000930:	4603      	mov	r3, r0
           strstr(buf, "+CME ERROR") ||
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <gsm_parser_is_error+0x86>
 8000936:	2301      	movs	r3, #1
 8000938:	e000      	b.n	800093c <gsm_parser_is_error+0x88>
 800093a:	2300      	movs	r3, #0
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	b2db      	uxtb	r3, r3
}
 8000942:	4618      	mov	r0, r3
 8000944:	3748      	adds	r7, #72	; 0x48
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	080115b8 	.word	0x080115b8
 8000950:	080115c0 	.word	0x080115c0
 8000954:	080115cc 	.word	0x080115cc

08000958 <gsm_parser_is_connect>:

bool gsm_parser_is_connect(const char* resp) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b092      	sub	sp, #72	; 0x48
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
    if (!resp) return false;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d101      	bne.n	800096a <gsm_parser_is_connect+0x12>
 8000966:	2300      	movs	r3, #0
 8000968:	e026      	b.n	80009b8 <gsm_parser_is_connect+0x60>

    char buf[64];
    strncpy(buf, resp, sizeof(buf) - 1);
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	223f      	movs	r2, #63	; 0x3f
 8000970:	6879      	ldr	r1, [r7, #4]
 8000972:	4618      	mov	r0, r3
 8000974:	f010 f9cb 	bl	8010d0e <strncpy>
    buf[sizeof(buf) - 1] = '\0';
 8000978:	2300      	movs	r3, #0
 800097a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    gsm_parser_trim(buf);
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff feac 	bl	80006e0 <gsm_parser_trim>

    return strstr(buf, "CONNECT") ||
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	490c      	ldr	r1, [pc, #48]	; (80009c0 <gsm_parser_is_connect+0x68>)
 800098e:	4618      	mov	r0, r3
 8000990:	f010 f9d2 	bl	8010d38 <strstr>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d108      	bne.n	80009ac <gsm_parser_is_connect+0x54>
           strstr(buf, "+CGEV: EPS PDN ACT");
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	4909      	ldr	r1, [pc, #36]	; (80009c4 <gsm_parser_is_connect+0x6c>)
 80009a0:	4618      	mov	r0, r3
 80009a2:	f010 f9c9 	bl	8010d38 <strstr>
 80009a6:	4603      	mov	r3, r0
    return strstr(buf, "CONNECT") ||
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <gsm_parser_is_connect+0x58>
 80009ac:	2301      	movs	r3, #1
 80009ae:	e000      	b.n	80009b2 <gsm_parser_is_connect+0x5a>
 80009b0:	2300      	movs	r3, #0
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	b2db      	uxtb	r3, r3
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3748      	adds	r7, #72	; 0x48
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	080115d8 	.word	0x080115d8
 80009c4:	080115e0 	.word	0x080115e0

080009c8 <gsm_parser_has_prefix>:

bool gsm_parser_has_prefix(const char* resp, const char* prefix) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b092      	sub	sp, #72	; 0x48
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
    if (!resp || !prefix) return false;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <gsm_parser_has_prefix+0x16>
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <gsm_parser_has_prefix+0x1a>
 80009de:	2300      	movs	r3, #0
 80009e0:	e01e      	b.n	8000a20 <gsm_parser_has_prefix+0x58>

    char buf[64];
    strncpy(buf, resp, sizeof(buf) - 1);
 80009e2:	f107 0308 	add.w	r3, r7, #8
 80009e6:	223f      	movs	r2, #63	; 0x3f
 80009e8:	6879      	ldr	r1, [r7, #4]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f010 f98f 	bl	8010d0e <strncpy>
    buf[sizeof(buf) - 1] = '\0';
 80009f0:	2300      	movs	r3, #0
 80009f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    gsm_parser_trim(buf);
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fe70 	bl	80006e0 <gsm_parser_trim>

    return strncmp(buf, prefix, strlen(prefix)) == 0;
 8000a00:	6838      	ldr	r0, [r7, #0]
 8000a02:	f7ff fbef 	bl	80001e4 <strlen>
 8000a06:	4602      	mov	r2, r0
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	6839      	ldr	r1, [r7, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f010 f96b 	bl	8010cea <strncmp>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	bf0c      	ite	eq
 8000a1a:	2301      	moveq	r3, #1
 8000a1c:	2300      	movne	r3, #0
 8000a1e:	b2db      	uxtb	r3, r3
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3748      	adds	r7, #72	; 0x48
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <gsm_state_str>:
#include <string.h>
#include <stdbool.h>
#include <stdio.h>

// Hàm chuyển enum sang chuỗi (có thể đặt ở file header nếu dùng chung)
static const char* gsm_state_str(gsm_state_t state) {
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b08      	cmp	r3, #8
 8000a36:	d827      	bhi.n	8000a88 <gsm_state_str+0x60>
 8000a38:	a201      	add	r2, pc, #4	; (adr r2, 8000a40 <gsm_state_str+0x18>)
 8000a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3e:	bf00      	nop
 8000a40:	08000a65 	.word	0x08000a65
 8000a44:	08000a69 	.word	0x08000a69
 8000a48:	08000a6d 	.word	0x08000a6d
 8000a4c:	08000a71 	.word	0x08000a71
 8000a50:	08000a75 	.word	0x08000a75
 8000a54:	08000a79 	.word	0x08000a79
 8000a58:	08000a7d 	.word	0x08000a7d
 8000a5c:	08000a81 	.word	0x08000a81
 8000a60:	08000a85 	.word	0x08000a85
        case GSM_STATE_POWER_OFF:      return "POWER_OFF";
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <gsm_state_str+0x70>)
 8000a66:	e010      	b.n	8000a8a <gsm_state_str+0x62>
        case GSM_STATE_POWER_ON:       return "POWER_ON";
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <gsm_state_str+0x74>)
 8000a6a:	e00e      	b.n	8000a8a <gsm_state_str+0x62>
        case GSM_STATE_WAIT_READY:     return "WAIT_READY";
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <gsm_state_str+0x78>)
 8000a6e:	e00c      	b.n	8000a8a <gsm_state_str+0x62>
        case GSM_STATE_AT_OK:          return "AT_OK";
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <gsm_state_str+0x7c>)
 8000a72:	e00a      	b.n	8000a8a <gsm_state_str+0x62>
        case GSM_STATE_SIGNAL_OK:      return "SIGNAL_OK";
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <gsm_state_str+0x80>)
 8000a76:	e008      	b.n	8000a8a <gsm_state_str+0x62>
        case GSM_STATE_APN_SET:        return "APN_SET";
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <gsm_state_str+0x84>)
 8000a7a:	e006      	b.n	8000a8a <gsm_state_str+0x62>
        case GSM_STATE_DIALING:        return "DIALING";
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <gsm_state_str+0x88>)
 8000a7e:	e004      	b.n	8000a8a <gsm_state_str+0x62>
        case GSM_STATE_PPP_MODE:       return "PPP_MODE";
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <gsm_state_str+0x8c>)
 8000a82:	e002      	b.n	8000a8a <gsm_state_str+0x62>
        case GSM_STATE_ERROR:          return "ERROR";
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <gsm_state_str+0x90>)
 8000a86:	e000      	b.n	8000a8a <gsm_state_str+0x62>
        default:                       return "UNKNOWN";
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <gsm_state_str+0x94>)
    }
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	080115f4 	.word	0x080115f4
 8000a9c:	08011600 	.word	0x08011600
 8000aa0:	0801160c 	.word	0x0801160c
 8000aa4:	08011618 	.word	0x08011618
 8000aa8:	08011620 	.word	0x08011620
 8000aac:	0801162c 	.word	0x0801162c
 8000ab0:	08011634 	.word	0x08011634
 8000ab4:	0801163c 	.word	0x0801163c
 8000ab8:	08011648 	.word	0x08011648
 8000abc:	08011650 	.word	0x08011650

08000ac0 <gsm_log_state>:

// Hàm log trạng thái (có thể thay bằng uart_log nếu cần)
static void gsm_log_state(gsm_state_t state) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b092      	sub	sp, #72	; 0x48
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
    char buf[64];
    snprintf(buf, sizeof(buf), "GSM State: %s", gsm_state_str(state));
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ffab 	bl	8000a28 <gsm_state_str>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f107 0008 	add.w	r0, r7, #8
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <gsm_log_state+0x4c>)
 8000ada:	2140      	movs	r1, #64	; 0x40
 8000adc:	f010 f886 	bl	8010bec <sniprintf>
    uart_log(buf);
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 fad5 	bl	8001094 <uart_log>
    if (state == GSM_STATE_PPP_MODE) {
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b07      	cmp	r3, #7
 8000aee:	d102      	bne.n	8000af6 <gsm_log_state+0x36>
        uart_log("PPP mode established! GSM network is ready.");
 8000af0:	4807      	ldr	r0, [pc, #28]	; (8000b10 <gsm_log_state+0x50>)
 8000af2:	f000 facf 	bl	8001094 <uart_log>
    }
    if (state == GSM_STATE_ERROR) {
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b08      	cmp	r3, #8
 8000afa:	d102      	bne.n	8000b02 <gsm_log_state+0x42>
        uart_log("GSM error occurred!");
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <gsm_log_state+0x54>)
 8000afe:	f000 fac9 	bl	8001094 <uart_log>
    }
}
 8000b02:	bf00      	nop
 8000b04:	3748      	adds	r7, #72	; 0x48
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	08011658 	.word	0x08011658
 8000b10:	08011668 	.word	0x08011668
 8000b14:	08011694 	.word	0x08011694

08000b18 <gsm_state_handle_response>:

// Hàm xử lý trạng thái chính sử dụng các hàm phân tích cú pháp mới
gsm_state_t gsm_state_handle_response(gsm_state_t current, const char* resp) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
    if (!resp || gsm_parser_is_empty_line(resp))
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d005      	beq.n	8000b36 <gsm_state_handle_response+0x1e>
 8000b2a:	6838      	ldr	r0, [r7, #0]
 8000b2c:	f7ff fe26 	bl	800077c <gsm_parser_is_empty_line>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <gsm_state_handle_response+0x22>
        return current;
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	e089      	b.n	8000c4e <gsm_state_handle_response+0x136>

    // Bỏ qua các thông báo nhà mạng hoặc các dòng không liên quan
    if (gsm_parser_has_prefix(resp, "*COPN:")) {
 8000b3a:	4947      	ldr	r1, [pc, #284]	; (8000c58 <gsm_state_handle_response+0x140>)
 8000b3c:	6838      	ldr	r0, [r7, #0]
 8000b3e:	f7ff ff43 	bl	80009c8 <gsm_parser_has_prefix>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <gsm_state_handle_response+0x34>
        // Có thể log hoặc xử lý riêng nếu cần
        return current;
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	e080      	b.n	8000c4e <gsm_state_handle_response+0x136>
    }

    if (gsm_parser_is_sim_error(resp)) {
 8000b4c:	6838      	ldr	r0, [r7, #0]
 8000b4e:	f7ff fe63 	bl	8000818 <gsm_parser_is_sim_error>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d004      	beq.n	8000b62 <gsm_state_handle_response+0x4a>
        gsm_log_state(GSM_STATE_ERROR);
 8000b58:	2008      	movs	r0, #8
 8000b5a:	f7ff ffb1 	bl	8000ac0 <gsm_log_state>
        return GSM_STATE_ERROR;
 8000b5e:	2308      	movs	r3, #8
 8000b60:	e075      	b.n	8000c4e <gsm_state_handle_response+0x136>
    }

    if (gsm_parser_is_error(resp)) {
 8000b62:	6838      	ldr	r0, [r7, #0]
 8000b64:	f7ff fea6 	bl	80008b4 <gsm_parser_is_error>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d004      	beq.n	8000b78 <gsm_state_handle_response+0x60>
        gsm_log_state(GSM_STATE_ERROR);
 8000b6e:	2008      	movs	r0, #8
 8000b70:	f7ff ffa6 	bl	8000ac0 <gsm_log_state>
        return GSM_STATE_ERROR;
 8000b74:	2308      	movs	r3, #8
 8000b76:	e06a      	b.n	8000c4e <gsm_state_handle_response+0x136>
    }

    switch (current) {
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	2b05      	cmp	r3, #5
 8000b7e:	d858      	bhi.n	8000c32 <gsm_state_handle_response+0x11a>
 8000b80:	a201      	add	r2, pc, #4	; (adr r2, 8000b88 <gsm_state_handle_response+0x70>)
 8000b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b86:	bf00      	nop
 8000b88:	08000ba1 	.word	0x08000ba1
 8000b8c:	08000bc5 	.word	0x08000bc5
 8000b90:	08000bdb 	.word	0x08000bdb
 8000b94:	08000bf1 	.word	0x08000bf1
 8000b98:	08000c07 	.word	0x08000c07
 8000b9c:	08000c1d 	.word	0x08000c1d
        case GSM_STATE_POWER_ON:
            if (gsm_parser_is_ok(resp) || gsm_parser_has_prefix(resp, "*ATREADY: 1")) {
 8000ba0:	6838      	ldr	r0, [r7, #0]
 8000ba2:	f7ff fe0f 	bl	80007c4 <gsm_parser_is_ok>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d106      	bne.n	8000bba <gsm_state_handle_response+0xa2>
 8000bac:	492b      	ldr	r1, [pc, #172]	; (8000c5c <gsm_state_handle_response+0x144>)
 8000bae:	6838      	ldr	r0, [r7, #0]
 8000bb0:	f7ff ff0a 	bl	80009c8 <gsm_parser_has_prefix>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d03d      	beq.n	8000c36 <gsm_state_handle_response+0x11e>
                gsm_log_state(GSM_STATE_WAIT_READY);
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f7ff ff80 	bl	8000ac0 <gsm_log_state>
                return GSM_STATE_WAIT_READY;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	e044      	b.n	8000c4e <gsm_state_handle_response+0x136>
            }
            break;

        case GSM_STATE_WAIT_READY:
            if (gsm_parser_is_ok(resp)) {
 8000bc4:	6838      	ldr	r0, [r7, #0]
 8000bc6:	f7ff fdfd 	bl	80007c4 <gsm_parser_is_ok>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d034      	beq.n	8000c3a <gsm_state_handle_response+0x122>
                gsm_log_state(GSM_STATE_AT_OK);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f7ff ff75 	bl	8000ac0 <gsm_log_state>
                return GSM_STATE_AT_OK;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e039      	b.n	8000c4e <gsm_state_handle_response+0x136>
            }
            break;

        case GSM_STATE_AT_OK:
            if (gsm_parser_is_ok(resp)) {
 8000bda:	6838      	ldr	r0, [r7, #0]
 8000bdc:	f7ff fdf2 	bl	80007c4 <gsm_parser_is_ok>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d02b      	beq.n	8000c3e <gsm_state_handle_response+0x126>
                gsm_log_state(GSM_STATE_SIGNAL_OK);
 8000be6:	2004      	movs	r0, #4
 8000be8:	f7ff ff6a 	bl	8000ac0 <gsm_log_state>
                return GSM_STATE_SIGNAL_OK;
 8000bec:	2304      	movs	r3, #4
 8000bee:	e02e      	b.n	8000c4e <gsm_state_handle_response+0x136>
            }
            break;

        case GSM_STATE_SIGNAL_OK:
            if (gsm_parser_is_ok(resp)) {
 8000bf0:	6838      	ldr	r0, [r7, #0]
 8000bf2:	f7ff fde7 	bl	80007c4 <gsm_parser_is_ok>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d022      	beq.n	8000c42 <gsm_state_handle_response+0x12a>
                gsm_log_state(GSM_STATE_APN_SET);
 8000bfc:	2005      	movs	r0, #5
 8000bfe:	f7ff ff5f 	bl	8000ac0 <gsm_log_state>
                return GSM_STATE_APN_SET;
 8000c02:	2305      	movs	r3, #5
 8000c04:	e023      	b.n	8000c4e <gsm_state_handle_response+0x136>
            }
            break;

        case GSM_STATE_APN_SET:
            if (gsm_parser_is_ok(resp)) {
 8000c06:	6838      	ldr	r0, [r7, #0]
 8000c08:	f7ff fddc 	bl	80007c4 <gsm_parser_is_ok>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d019      	beq.n	8000c46 <gsm_state_handle_response+0x12e>
                gsm_log_state(GSM_STATE_DIALING);
 8000c12:	2006      	movs	r0, #6
 8000c14:	f7ff ff54 	bl	8000ac0 <gsm_log_state>
                return GSM_STATE_DIALING;
 8000c18:	2306      	movs	r3, #6
 8000c1a:	e018      	b.n	8000c4e <gsm_state_handle_response+0x136>
            }
            break;

        case GSM_STATE_DIALING:
            if (gsm_parser_is_connect(resp)) {
 8000c1c:	6838      	ldr	r0, [r7, #0]
 8000c1e:	f7ff fe9b 	bl	8000958 <gsm_parser_is_connect>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d010      	beq.n	8000c4a <gsm_state_handle_response+0x132>
                gsm_log_state(GSM_STATE_PPP_MODE);
 8000c28:	2007      	movs	r0, #7
 8000c2a:	f7ff ff49 	bl	8000ac0 <gsm_log_state>
                return GSM_STATE_PPP_MODE;
 8000c2e:	2307      	movs	r3, #7
 8000c30:	e00d      	b.n	8000c4e <gsm_state_handle_response+0x136>
            }
            break;

        default:
            break;
 8000c32:	bf00      	nop
 8000c34:	e00a      	b.n	8000c4c <gsm_state_handle_response+0x134>
            break;
 8000c36:	bf00      	nop
 8000c38:	e008      	b.n	8000c4c <gsm_state_handle_response+0x134>
            break;
 8000c3a:	bf00      	nop
 8000c3c:	e006      	b.n	8000c4c <gsm_state_handle_response+0x134>
            break;
 8000c3e:	bf00      	nop
 8000c40:	e004      	b.n	8000c4c <gsm_state_handle_response+0x134>
            break;
 8000c42:	bf00      	nop
 8000c44:	e002      	b.n	8000c4c <gsm_state_handle_response+0x134>
            break;
 8000c46:	bf00      	nop
 8000c48:	e000      	b.n	8000c4c <gsm_state_handle_response+0x134>
            break;
 8000c4a:	bf00      	nop
    }

    return current;
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	080116a8 	.word	0x080116a8
 8000c5c:	080116b0 	.word	0x080116b0

08000c60 <button_init>:
#include "button.h"

void button_init(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
    // Cấu hình input pull-up
    uint8_t pin = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 16; ++i) {
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	71bb      	strb	r3, [r7, #6]
 8000c6e:	e008      	b.n	8000c82 <button_init+0x22>
        if (BUTTON_PIN & (1U << i)) { pin = i; break; }
 8000c70:	79bb      	ldrb	r3, [r7, #6]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d102      	bne.n	8000c7c <button_init+0x1c>
 8000c76:	79bb      	ldrb	r3, [r7, #6]
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	e005      	b.n	8000c88 <button_init+0x28>
    for (uint8_t i = 0; i < 16; ++i) {
 8000c7c:	79bb      	ldrb	r3, [r7, #6]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	71bb      	strb	r3, [r7, #6]
 8000c82:	79bb      	ldrb	r3, [r7, #6]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d9f3      	bls.n	8000c70 <button_init+0x10>
    }
    BUTTON_PORT->MODER &= ~(3U << (pin * 2));
 8000c88:	4912      	ldr	r1, [pc, #72]	; (8000cd4 <button_init+0x74>)
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <button_init+0x74>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2003      	movs	r0, #3
 8000c94:	fa00 f303 	lsl.w	r3, r0, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	600b      	str	r3, [r1, #0]
    BUTTON_PORT->PUPDR &= ~(3U << (pin * 2));
 8000c9e:	490d      	ldr	r1, [pc, #52]	; (8000cd4 <button_init+0x74>)
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <button_init+0x74>)
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2003      	movs	r0, #3
 8000caa:	fa00 f303 	lsl.w	r3, r0, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60cb      	str	r3, [r1, #12]
    BUTTON_PORT->PUPDR |=  (1U << (pin * 2)); // Pull-up
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <button_init+0x74>)
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <button_init+0x74>)
 8000cb8:	68da      	ldr	r2, [r3, #12]
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	fa00 f303 	lsl.w	r3, r0, r3
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	60cb      	str	r3, [r1, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <hardware_init>:
#include "button.h"
#include "uart.h"
#include "timer.h"
#include "stm32f4xx.h"

void hardware_init(void) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000cdc:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <hardware_init+0x48>)
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <hardware_init+0x48>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f043 0303 	orr.w	r3, r3, #3
 8000ce6:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN | RCC_APB1ENR_TIM2EN;
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <hardware_init+0x48>)
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <hardware_init+0x48>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000cf8:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <hardware_init+0x48>)
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <hardware_init+0x48>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f043 0310 	orr.w	r3, r3, #16
 8000d02:	6453      	str	r3, [r2, #68]	; 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN; // <-- Bật clock cho DMA2
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <hardware_init+0x48>)
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <hardware_init+0x48>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d0e:	6313      	str	r3, [r2, #48]	; 0x30

    timer2_init_1ms();
 8000d10:	f000 f8ac 	bl	8000e6c <timer2_init_1ms>
    led_init();
 8000d14:	f000 f806 	bl	8000d24 <led_init>
    button_init();
 8000d18:	f7ff ffa2 	bl	8000c60 <button_init>
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40023800 	.word	0x40023800

08000d24 <led_init>:
#include "stm32f4xx.h"
#include "led.h"

void led_init(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
    // Configure PB9 (LED 4G) as output
    GPIOB->MODER &= ~(3U << (9 * 2));
 8000d28:	4a34      	ldr	r2, [pc, #208]	; (8000dfc <led_init+0xd8>)
 8000d2a:	4b34      	ldr	r3, [pc, #208]	; (8000dfc <led_init+0xd8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000d32:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (9 * 2));
 8000d34:	4a31      	ldr	r2, [pc, #196]	; (8000dfc <led_init+0xd8>)
 8000d36:	4b31      	ldr	r3, [pc, #196]	; (8000dfc <led_init+0xd8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d3e:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 9);
 8000d40:	4a2e      	ldr	r2, [pc, #184]	; (8000dfc <led_init+0xd8>)
 8000d42:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <led_init+0xd8>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d4a:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (9 * 2));
 8000d4c:	4a2b      	ldr	r2, [pc, #172]	; (8000dfc <led_init+0xd8>)
 8000d4e:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <led_init+0xd8>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8000d56:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (9 * 2));
 8000d58:	4a28      	ldr	r2, [pc, #160]	; (8000dfc <led_init+0xd8>)
 8000d5a:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <led_init+0xd8>)
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000d62:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 9);
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <led_init+0xd8>)
 8000d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d6a:	835a      	strh	r2, [r3, #26]

    // Configure PB4 (LED GREEN NETWORK) as output
    GPIOB->MODER &= ~(3U << (4 * 2));
 8000d6c:	4a23      	ldr	r2, [pc, #140]	; (8000dfc <led_init+0xd8>)
 8000d6e:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <led_init+0xd8>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d76:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (4 * 2));
 8000d78:	4a20      	ldr	r2, [pc, #128]	; (8000dfc <led_init+0xd8>)
 8000d7a:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <led_init+0xd8>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d82:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 4);
 8000d84:	4a1d      	ldr	r2, [pc, #116]	; (8000dfc <led_init+0xd8>)
 8000d86:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <led_init+0xd8>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f023 0310 	bic.w	r3, r3, #16
 8000d8e:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (4 * 2));
 8000d90:	4a1a      	ldr	r2, [pc, #104]	; (8000dfc <led_init+0xd8>)
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <led_init+0xd8>)
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000d9a:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (4 * 2));
 8000d9c:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <led_init+0xd8>)
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <led_init+0xd8>)
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000da6:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 4);
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <led_init+0xd8>)
 8000daa:	2210      	movs	r2, #16
 8000dac:	835a      	strh	r2, [r3, #26]

    // Configure PB5 (LED BLUE STATEMACHINE) as output
    GPIOB->MODER &= ~(3U << (5 * 2));
 8000dae:	4a13      	ldr	r2, [pc, #76]	; (8000dfc <led_init+0xd8>)
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <led_init+0xd8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000db8:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (5 * 2));
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <led_init+0xd8>)
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <led_init+0xd8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc4:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 5);
 8000dc6:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <led_init+0xd8>)
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <led_init+0xd8>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f023 0320 	bic.w	r3, r3, #32
 8000dd0:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (5 * 2));
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <led_init+0xd8>)
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <led_init+0xd8>)
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000ddc:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (5 * 2));
 8000dde:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <led_init+0xd8>)
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <led_init+0xd8>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000de8:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 5);
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <led_init+0xd8>)
 8000dec:	2220      	movs	r2, #32
 8000dee:	835a      	strh	r2, [r3, #26]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40020400 	.word	0x40020400

08000e00 <led_4g_on>:

void led_4g_on(void) {
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
    GPIOB->BSRRL = (1U << 9);
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <led_4g_on+0x18>)
 8000e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0a:	831a      	strh	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40020400 	.word	0x40020400

08000e1c <led_4g_off>:

void led_4g_off(void) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
    GPIOB->BSRRH = (1U << 9);
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <led_4g_off+0x18>)
 8000e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e26:	835a      	strh	r2, [r3, #26]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40020400 	.word	0x40020400

08000e38 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000e42:	4909      	ldr	r1, [pc, #36]	; (8000e68 <NVIC_EnableIRQ+0x30>)
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	095b      	lsrs	r3, r3, #5
 8000e4a:	79fa      	ldrb	r2, [r7, #7]
 8000e4c:	f002 021f 	and.w	r2, r2, #31
 8000e50:	2001      	movs	r0, #1
 8000e52:	fa00 f202 	lsl.w	r2, r0, r2
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <timer2_init_1ms>:
#include "stm32f4xx.h"

static volatile uint32_t timer2_tick = 0;

void timer2_init_1ms(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
    TIM2->PSC = 15;      // 16MHz / (15+1) = 1MHz
 8000e70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e74:	220f      	movs	r2, #15
 8000e76:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM2->ARR = 999;     // 1MHz / (999+1) = 1kHz (1ms)
 8000e78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e80:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->EGR = TIM_EGR_UG;
 8000e82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e86:	2201      	movs	r2, #1
 8000e88:	829a      	strh	r2, [r3, #20]
    TIM2->DIER |= TIM_DIER_UIE;
 8000e8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e92:	899b      	ldrh	r3, [r3, #12]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	8193      	strh	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;
 8000e9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	8013      	strh	r3, [r2, #0]

    NVIC_EnableIRQ(TIM2_IRQn);
 8000eb2:	201c      	movs	r0, #28
 8000eb4:	f7ff ffc0 	bl	8000e38 <NVIC_EnableIRQ>
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) // Update interrupt flag
 8000ec0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec4:	8a1b      	ldrh	r3, [r3, #16]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d00e      	beq.n	8000eee <TIM2_IRQHandler+0x32>
    {
        TIM2->SR &= ~TIM_SR_UIF; // Clear flag
 8000ed0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed8:	8a1b      	ldrh	r3, [r3, #16]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	f023 0301 	bic.w	r3, r3, #1
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	8213      	strh	r3, [r2, #16]
        timer2_tick++;
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <TIM2_IRQHandler+0x3c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4a03      	ldr	r2, [pc, #12]	; (8000ef8 <TIM2_IRQHandler+0x3c>)
 8000eec:	6013      	str	r3, [r2, #0]
    }
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	2000028c 	.word	0x2000028c

08000efc <timer2_get_tick>:

uint32_t timer2_get_tick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
    return timer2_tick;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <timer2_get_tick+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	2000028c 	.word	0x2000028c

08000f14 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    uint32_t start = timer2_get_tick();
 8000f1c:	f7ff ffee 	bl	8000efc <timer2_get_tick>
 8000f20:	60f8      	str	r0, [r7, #12]
    while ((timer2_get_tick() - start) < ms) {
 8000f22:	bf00      	nop
 8000f24:	f7ff ffea 	bl	8000efc <timer2_get_tick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	1ad2      	subs	r2, r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d3f7      	bcc.n	8000f24 <delay_ms+0x10>
    }
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <NVIC_EnableIRQ>:
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000f46:	4909      	ldr	r1, [pc, #36]	; (8000f6c <NVIC_EnableIRQ+0x30>)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	095b      	lsrs	r3, r3, #5
 8000f4e:	79fa      	ldrb	r2, [r7, #7]
 8000f50:	f002 021f 	and.w	r2, r2, #31
 8000f54:	2001      	movs	r0, #1
 8000f56:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <uart_init_all>:
volatile bool gsm_ppp_mode = false; // Cờ xác định đã vào chế độ PPP/data
extern ppp_pcb *ppp; // Đảm bảo ppp được khai báo extern trong ppp_net.c

// Hàm khởi tạo UART1 và DMA RX circular
void uart_init_all(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
    // Khởi tạo GPIOA cho USART1 (GSM)
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000f74:	4a3f      	ldr	r2, [pc, #252]	; (8001074 <uart_init_all+0x104>)
 8000f76:	4b3f      	ldr	r3, [pc, #252]	; (8001074 <uart_init_all+0x104>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000f80:	4a3c      	ldr	r2, [pc, #240]	; (8001074 <uart_init_all+0x104>)
 8000f82:	4b3c      	ldr	r3, [pc, #240]	; (8001074 <uart_init_all+0x104>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f043 0310 	orr.w	r3, r3, #16
 8000f8a:	6453      	str	r3, [r2, #68]	; 0x44

    GPIOA->MODER &= ~((3U << (9 * 2)) | (3U << (10 * 2)));
 8000f8c:	4a3a      	ldr	r2, [pc, #232]	; (8001078 <uart_init_all+0x108>)
 8000f8e:	4b3a      	ldr	r3, [pc, #232]	; (8001078 <uart_init_all+0x108>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000f96:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2U << (9 * 2)) | (2U << (10 * 2)));
 8000f98:	4a37      	ldr	r2, [pc, #220]	; (8001078 <uart_init_all+0x108>)
 8000f9a:	4b37      	ldr	r3, [pc, #220]	; (8001078 <uart_init_all+0x108>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8000fa2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~((0xF << (4 * 1)) | (0xF << (4 * 2)));
 8000fa4:	4a34      	ldr	r2, [pc, #208]	; (8001078 <uart_init_all+0x108>)
 8000fa6:	4b34      	ldr	r3, [pc, #208]	; (8001078 <uart_init_all+0x108>)
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000faa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000fae:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= ((7U << (4 * 1)) | (7U << (4 * 2))); 
 8000fb0:	4a31      	ldr	r2, [pc, #196]	; (8001078 <uart_init_all+0x108>)
 8000fb2:	4b31      	ldr	r3, [pc, #196]	; (8001078 <uart_init_all+0x108>)
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb6:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000fba:	6253      	str	r3, [r2, #36]	; 0x24

    USART1->BRR = 16000000 / 115200;
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <uart_init_all+0x10c>)
 8000fbe:	228a      	movs	r2, #138	; 0x8a
 8000fc0:	811a      	strh	r2, [r3, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000fc2:	4b2e      	ldr	r3, [pc, #184]	; (800107c <uart_init_all+0x10c>)
 8000fc4:	f242 020c 	movw	r2, #8204	; 0x200c
 8000fc8:	819a      	strh	r2, [r3, #12]

    // Khởi tạo GPIOA cho USART2 (PC UART)
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000fca:	4a2a      	ldr	r2, [pc, #168]	; (8001074 <uart_init_all+0x104>)
 8000fcc:	4b29      	ldr	r3, [pc, #164]	; (8001074 <uart_init_all+0x104>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40

    GPIOA->MODER &= ~((3U << (2 * 2)) | (3U << (3 * 2)));
 8000fd6:	4a28      	ldr	r2, [pc, #160]	; (8001078 <uart_init_all+0x108>)
 8000fd8:	4b27      	ldr	r3, [pc, #156]	; (8001078 <uart_init_all+0x108>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fe0:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2U << (2 * 2)) | (2U << (3 * 2)));
 8000fe2:	4a25      	ldr	r2, [pc, #148]	; (8001078 <uart_init_all+0x108>)
 8000fe4:	4b24      	ldr	r3, [pc, #144]	; (8001078 <uart_init_all+0x108>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000fec:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0xF << (4 * 2)) | (0xF << (4 * 3)));
 8000fee:	4a22      	ldr	r2, [pc, #136]	; (8001078 <uart_init_all+0x108>)
 8000ff0:	4b21      	ldr	r3, [pc, #132]	; (8001078 <uart_init_all+0x108>)
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000ff8:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= ((7U << (4 * 2)) | (7U << (4 * 3))); 
 8000ffa:	4a1f      	ldr	r2, [pc, #124]	; (8001078 <uart_init_all+0x108>)
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <uart_init_all+0x108>)
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8001004:	6213      	str	r3, [r2, #32]

    USART2->BRR = 16000000 / 115200;
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <uart_init_all+0x110>)
 8001008:	228a      	movs	r2, #138	; 0x8a
 800100a:	811a      	strh	r2, [r3, #8]
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <uart_init_all+0x110>)
 800100e:	f242 020c 	movw	r2, #8204	; 0x200c
 8001012:	819a      	strh	r2, [r3, #12]

    // Bật DMA RX cho USART1
    USART1->CR3 |= USART_CR3_DMAR;
 8001014:	4a19      	ldr	r2, [pc, #100]	; (800107c <uart_init_all+0x10c>)
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <uart_init_all+0x10c>)
 8001018:	8a9b      	ldrh	r3, [r3, #20]
 800101a:	b29b      	uxth	r3, r3
 800101c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001020:	b29b      	uxth	r3, r3
 8001022:	8293      	strh	r3, [r2, #20]

    // Cấu hình DMA2_Stream2 cho USART1_RX (Channel 4)
    DMA2_Stream2->CR &= ~DMA_SxCR_EN;
 8001024:	4a17      	ldr	r2, [pc, #92]	; (8001084 <uart_init_all+0x114>)
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <uart_init_all+0x114>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f023 0301 	bic.w	r3, r3, #1
 800102e:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream2->CR & DMA_SxCR_EN);
 8001030:	bf00      	nop
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <uart_init_all+0x114>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f9      	bne.n	8001032 <uart_init_all+0xc2>

    DMA2_Stream2->PAR  = (uint32_t)&USART1->DR;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <uart_init_all+0x114>)
 8001040:	4a11      	ldr	r2, [pc, #68]	; (8001088 <uart_init_all+0x118>)
 8001042:	609a      	str	r2, [r3, #8]
    DMA2_Stream2->M0AR = (uint32_t)m_usart1_rx_buffer;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <uart_init_all+0x114>)
 8001046:	4a11      	ldr	r2, [pc, #68]	; (800108c <uart_init_all+0x11c>)
 8001048:	60da      	str	r2, [r3, #12]
    DMA2_Stream2->NDTR = UART1_RX_BUFFER_SIZE;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <uart_init_all+0x114>)
 800104c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001050:	605a      	str	r2, [r3, #4]

    DMA2_Stream2->CR =
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <uart_init_all+0x114>)
 8001054:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <uart_init_all+0x120>)
 8001056:	601a      	str	r2, [r3, #0]
        (0 << 6)       |    // Peripheral-to-memory
        (0 << 13)      |    // 8-bit memory size
        (0 << 11)      |    // 8-bit peripheral size
        (0 << 16);          // Low priority

    DMA2_Stream2->CR |= DMA_SxCR_EN;
 8001058:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <uart_init_all+0x114>)
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <uart_init_all+0x114>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6013      	str	r3, [r2, #0]

    NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001064:	203a      	movs	r0, #58	; 0x3a
 8001066:	f7ff ff69 	bl	8000f3c <NVIC_EnableIRQ>
    uart_enable_usart1_idle_irq();
 800106a:	f000 f97d 	bl	8001368 <uart_enable_usart1_idle_irq>
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40020000 	.word	0x40020000
 800107c:	40011000 	.word	0x40011000
 8001080:	40004400 	.word	0x40004400
 8001084:	40026440 	.word	0x40026440
 8001088:	40011004 	.word	0x40011004
 800108c:	20000410 	.word	0x20000410
 8001090:	08000500 	.word	0x08000500

08001094 <uart_log>:

// Hàm log chuỗi ra UART debug (PC)
void uart_log(const char* msg)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
    const char* p = msg;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	60fb      	str	r3, [r7, #12]
    while (*p)
 80010a0:	e00e      	b.n	80010c0 <uart_log+0x2c>
    {
        while (!(USART2->SR & USART_SR_TXE));
 80010a2:	bf00      	nop
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <uart_log+0x6c>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f8      	beq.n	80010a4 <uart_log+0x10>
        USART2->DR = *p++;
 80010b2:	4913      	ldr	r1, [pc, #76]	; (8001100 <uart_log+0x6c>)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	60fa      	str	r2, [r7, #12]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	808b      	strh	r3, [r1, #4]
    while (*p)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1ec      	bne.n	80010a2 <uart_log+0xe>
    }
    while (!(USART2->SR & USART_SR_TXE));
 80010c8:	bf00      	nop
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <uart_log+0x6c>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f8      	beq.n	80010ca <uart_log+0x36>
    USART2->DR = '\r';
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <uart_log+0x6c>)
 80010da:	220d      	movs	r2, #13
 80010dc:	809a      	strh	r2, [r3, #4]
    while (!(USART2->SR & USART_SR_TXE));
 80010de:	bf00      	nop
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <uart_log+0x6c>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0f8      	beq.n	80010e0 <uart_log+0x4c>
    USART2->DR = '\n';
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <uart_log+0x6c>)
 80010f0:	220a      	movs	r2, #10
 80010f2:	809a      	strh	r2, [r3, #4]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	40004400 	.word	0x40004400

08001104 <usart1_hw_uart_send_raw>:

// Hàm gửi raw qua USART1 (GSM)
void usart1_hw_uart_send_raw(const uint8_t* raw, uint32_t length)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < length; i++)
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	e011      	b.n	8001138 <usart1_hw_uart_send_raw+0x34>
    {
        while (!(USART1->SR & USART_SR_TXE)); 
 8001114:	bf00      	nop
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <usart1_hw_uart_send_raw+0x58>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f8      	beq.n	8001116 <usart1_hw_uart_send_raw+0x12>
        USART1->DR = raw[i];
 8001124:	490d      	ldr	r1, [pc, #52]	; (800115c <usart1_hw_uart_send_raw+0x58>)
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	808b      	strh	r3, [r1, #4]
    for (uint32_t i = 0; i < length; i++)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3301      	adds	r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	429a      	cmp	r2, r3
 800113e:	d3e9      	bcc.n	8001114 <usart1_hw_uart_send_raw+0x10>
    }
    while (!(USART1->SR & USART_SR_TC)); 
 8001140:	bf00      	nop
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <usart1_hw_uart_send_raw+0x58>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f8      	beq.n	8001142 <usart1_hw_uart_send_raw+0x3e>
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	40011000 	.word	0x40011000

08001160 <uart_set_ppp_mode>:

// Hàm này nên được gọi khi nhận được chuỗi "CONNECT" từ GSM
void uart_set_ppp_mode(bool enable)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
    gsm_ppp_mode = enable;
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <uart_set_ppp_mode+0x2c>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	7013      	strb	r3, [r2, #0]
    if (enable) {
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <uart_set_ppp_mode+0x1e>
        uart_log("UART: Switched to PPP data mode");
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <uart_set_ppp_mode+0x30>)
 8001178:	f7ff ff8c 	bl	8001094 <uart_log>
    } else {
        uart_log("UART: Switched to AT command mode");
    }
}
 800117c:	e002      	b.n	8001184 <uart_set_ppp_mode+0x24>
        uart_log("UART: Switched to AT command mode");
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <uart_set_ppp_mode+0x34>)
 8001180:	f7ff ff88 	bl	8001094 <uart_log>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000295 	.word	0x20000295
 8001190:	080116bc 	.word	0x080116bc
 8001194:	080116dc 	.word	0x080116dc

08001198 <usart1_dma_rx_check>:

// Hàm xử lý dữ liệu mới nhận từ DMA circular buffer
void usart1_dma_rx_check(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
    uint32_t pos = UART1_RX_BUFFER_SIZE - DMA2_Stream2->NDTR;
 800119e:	4b39      	ldr	r3, [pc, #228]	; (8001284 <usart1_dma_rx_check+0xec>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80011a6:	607b      	str	r3, [r7, #4]
    if (pos != m_old_usart1_dma_rx_pos)
 80011a8:	4b37      	ldr	r3, [pc, #220]	; (8001288 <usart1_dma_rx_check+0xf0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d064      	beq.n	800127c <usart1_dma_rx_check+0xe4>
    {
        if (gsm_ppp_mode && ppp != NULL) {
 80011b2:	4b36      	ldr	r3, [pc, #216]	; (800128c <usart1_dma_rx_check+0xf4>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d02e      	beq.n	800121a <usart1_dma_rx_check+0x82>
 80011bc:	4b34      	ldr	r3, [pc, #208]	; (8001290 <usart1_dma_rx_check+0xf8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d02a      	beq.n	800121a <usart1_dma_rx_check+0x82>
            // Truyền toàn bộ dữ liệu mới vào PPP stack
            if (pos > m_old_usart1_dma_rx_pos) {
 80011c4:	4b30      	ldr	r3, [pc, #192]	; (8001288 <usart1_dma_rx_check+0xf0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d90d      	bls.n	80011ea <usart1_dma_rx_check+0x52>
                pppos_input(ppp, &m_usart1_rx_buffer[m_old_usart1_dma_rx_pos], pos - m_old_usart1_dma_rx_pos);
 80011ce:	4b30      	ldr	r3, [pc, #192]	; (8001290 <usart1_dma_rx_check+0xf8>)
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <usart1_dma_rx_check+0xf0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a2f      	ldr	r2, [pc, #188]	; (8001294 <usart1_dma_rx_check+0xfc>)
 80011d8:	1899      	adds	r1, r3, r2
 80011da:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <usart1_dma_rx_check+0xf0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	f00e f8f2 	bl	800f3cc <pppos_input>
            if (pos > m_old_usart1_dma_rx_pos) {
 80011e8:	e03c      	b.n	8001264 <usart1_dma_rx_check+0xcc>
            } else {
                pppos_input(ppp, &m_usart1_rx_buffer[m_old_usart1_dma_rx_pos], UART1_RX_BUFFER_SIZE - m_old_usart1_dma_rx_pos);
 80011ea:	4b29      	ldr	r3, [pc, #164]	; (8001290 <usart1_dma_rx_check+0xf8>)
 80011ec:	6818      	ldr	r0, [r3, #0]
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <usart1_dma_rx_check+0xf0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a28      	ldr	r2, [pc, #160]	; (8001294 <usart1_dma_rx_check+0xfc>)
 80011f4:	1899      	adds	r1, r3, r2
 80011f6:	4b24      	ldr	r3, [pc, #144]	; (8001288 <usart1_dma_rx_check+0xf0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80011fe:	461a      	mov	r2, r3
 8001200:	f00e f8e4 	bl	800f3cc <pppos_input>
                if (pos > 0)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d02c      	beq.n	8001264 <usart1_dma_rx_check+0xcc>
                    pppos_input(ppp, &m_usart1_rx_buffer[0], pos);
 800120a:	4b21      	ldr	r3, [pc, #132]	; (8001290 <usart1_dma_rx_check+0xf8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	4920      	ldr	r1, [pc, #128]	; (8001294 <usart1_dma_rx_check+0xfc>)
 8001212:	4618      	mov	r0, r3
 8001214:	f00e f8da 	bl	800f3cc <pppos_input>
            if (pos > m_old_usart1_dma_rx_pos) {
 8001218:	e024      	b.n	8001264 <usart1_dma_rx_check+0xcc>
            }
        } else {
            // Chế độ AT command như cũ
            if (pos > m_old_usart1_dma_rx_pos) {
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <usart1_dma_rx_check+0xf0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	429a      	cmp	r2, r3
 8001222:	d90b      	bls.n	800123c <usart1_dma_rx_check+0xa4>
                gsm_hw_layer_uart_fill_rx(&m_usart1_rx_buffer[m_old_usart1_dma_rx_pos], pos - m_old_usart1_dma_rx_pos);
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <usart1_dma_rx_check+0xf0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <usart1_dma_rx_check+0xfc>)
 800122a:	1898      	adds	r0, r3, r2
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <usart1_dma_rx_check+0xf0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	4619      	mov	r1, r3
 8001236:	f000 f82f 	bl	8001298 <gsm_hw_layer_uart_fill_rx>
 800123a:	e014      	b.n	8001266 <usart1_dma_rx_check+0xce>
            } else {
                gsm_hw_layer_uart_fill_rx(&m_usart1_rx_buffer[m_old_usart1_dma_rx_pos], UART1_RX_BUFFER_SIZE - m_old_usart1_dma_rx_pos);
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <usart1_dma_rx_check+0xf0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <usart1_dma_rx_check+0xfc>)
 8001242:	441a      	add	r2, r3
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <usart1_dma_rx_check+0xf0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800124c:	4619      	mov	r1, r3
 800124e:	4610      	mov	r0, r2
 8001250:	f000 f822 	bl	8001298 <gsm_hw_layer_uart_fill_rx>
                if (pos > 0)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d005      	beq.n	8001266 <usart1_dma_rx_check+0xce>
                    gsm_hw_layer_uart_fill_rx(&m_usart1_rx_buffer[0], pos);
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <usart1_dma_rx_check+0xfc>)
 800125e:	f000 f81b 	bl	8001298 <gsm_hw_layer_uart_fill_rx>
 8001262:	e000      	b.n	8001266 <usart1_dma_rx_check+0xce>
            if (pos > m_old_usart1_dma_rx_pos) {
 8001264:	bf00      	nop
            }
        }
        m_old_usart1_dma_rx_pos = pos;
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <usart1_dma_rx_check+0xf0>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6013      	str	r3, [r2, #0]
        if (m_old_usart1_dma_rx_pos == UART1_RX_BUFFER_SIZE)
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <usart1_dma_rx_check+0xf0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001274:	d102      	bne.n	800127c <usart1_dma_rx_check+0xe4>
            m_old_usart1_dma_rx_pos = 0;
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <usart1_dma_rx_check+0xf0>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
    }
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40026440 	.word	0x40026440
 8001288:	20000290 	.word	0x20000290
 800128c:	20000295 	.word	0x20000295
 8001290:	20000360 	.word	0x20000360
 8001294:	20000410 	.word	0x20000410

08001298 <gsm_hw_layer_uart_fill_rx>:

// Hàm này gom dữ liệu thành từng dòng, set rx_line_ready khi đủ 1 dòng
void gsm_hw_layer_uart_fill_rx(uint8_t *data, uint32_t length)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
    static uint8_t line_buf[128];
    static uint16_t line_idx = 0;
    for (uint32_t i = 0; i < length; i++) {
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	e03b      	b.n	8001320 <gsm_hw_layer_uart_fill_rx+0x88>
        if (line_idx < sizeof(line_buf) - 1) {
 80012a8:	4b21      	ldr	r3, [pc, #132]	; (8001330 <gsm_hw_layer_uart_fill_rx+0x98>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	2b7e      	cmp	r3, #126	; 0x7e
 80012ae:	d831      	bhi.n	8001314 <gsm_hw_layer_uart_fill_rx+0x7c>
            line_buf[line_idx++] = data[i];
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <gsm_hw_layer_uart_fill_rx+0x98>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	b291      	uxth	r1, r2
 80012b8:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <gsm_hw_layer_uart_fill_rx+0x98>)
 80012ba:	8011      	strh	r1, [r2, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4413      	add	r3, r2
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <gsm_hw_layer_uart_fill_rx+0x9c>)
 80012c8:	545a      	strb	r2, [r3, r1]
            if (data[i] == '\n' || data[i] == '\r') {
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b0a      	cmp	r3, #10
 80012d4:	d005      	beq.n	80012e2 <gsm_hw_layer_uart_fill_rx+0x4a>
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b0d      	cmp	r3, #13
 80012e0:	d11b      	bne.n	800131a <gsm_hw_layer_uart_fill_rx+0x82>
                if (line_idx > 1) { // Có dữ liệu thực sự
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <gsm_hw_layer_uart_fill_rx+0x98>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d910      	bls.n	800130c <gsm_hw_layer_uart_fill_rx+0x74>
                    line_buf[line_idx] = 0;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <gsm_hw_layer_uart_fill_rx+0x98>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b10      	ldr	r3, [pc, #64]	; (8001334 <gsm_hw_layer_uart_fill_rx+0x9c>)
 80012f2:	2100      	movs	r1, #0
 80012f4:	5499      	strb	r1, [r3, r2]
                    memcpy(rx_buffer, line_buf, line_idx + 1);
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <gsm_hw_layer_uart_fill_rx+0x98>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	3301      	adds	r3, #1
 80012fc:	461a      	mov	r2, r3
 80012fe:	490d      	ldr	r1, [pc, #52]	; (8001334 <gsm_hw_layer_uart_fill_rx+0x9c>)
 8001300:	480d      	ldr	r0, [pc, #52]	; (8001338 <gsm_hw_layer_uart_fill_rx+0xa0>)
 8001302:	f00f fb45 	bl	8010990 <memcpy>
                    rx_line_ready = true;
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <gsm_hw_layer_uart_fill_rx+0xa4>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
                }
                line_idx = 0;
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <gsm_hw_layer_uart_fill_rx+0x98>)
 800130e:	2200      	movs	r2, #0
 8001310:	801a      	strh	r2, [r3, #0]
 8001312:	e002      	b.n	800131a <gsm_hw_layer_uart_fill_rx+0x82>
            }
        } else {
            line_idx = 0; // tránh tràn buffer
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <gsm_hw_layer_uart_fill_rx+0x98>)
 8001316:	2200      	movs	r2, #0
 8001318:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++) {
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3301      	adds	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	d3bf      	bcc.n	80012a8 <gsm_hw_layer_uart_fill_rx+0x10>
        }
    }
}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000296 	.word	0x20000296
 8001334:	20000298 	.word	0x20000298
 8001338:	20000510 	.word	0x20000510
 800133c:	20000294 	.word	0x20000294

08001340 <DMA2_Stream2_IRQHandler>:

// DMA2 Stream2 IRQ Handler
void DMA2_Stream2_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
    if (DMA2->LISR & DMA_LISR_TCIF2)
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <DMA2_Stream2_IRQHandler+0x24>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d007      	beq.n	8001360 <DMA2_Stream2_IRQHandler+0x20>
    {
        DMA2->LIFCR |= DMA_LIFCR_CTCIF2;
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <DMA2_Stream2_IRQHandler+0x24>)
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <DMA2_Stream2_IRQHandler+0x24>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800135a:	6093      	str	r3, [r2, #8]
        usart1_dma_rx_check();
 800135c:	f7ff ff1c 	bl	8001198 <usart1_dma_rx_check>
    }
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40026400 	.word	0x40026400

08001368 <uart_enable_usart1_idle_irq>:
    usart1_dma_rx_check();
}

// Thêm hàm khởi tạo ngắt IDLE cho USART1
void uart_enable_usart1_idle_irq(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
    USART1->CR1 |= USART_CR1_IDLEIE; // Bật ngắt IDLE
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <uart_enable_usart1_idle_irq+0x20>)
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <uart_enable_usart1_idle_irq+0x20>)
 8001370:	899b      	ldrh	r3, [r3, #12]
 8001372:	b29b      	uxth	r3, r3
 8001374:	f043 0310 	orr.w	r3, r3, #16
 8001378:	b29b      	uxth	r3, r3
 800137a:	8193      	strh	r3, [r2, #12]
    NVIC_EnableIRQ(USART1_IRQn);
 800137c:	2025      	movs	r0, #37	; 0x25
 800137e:	f7ff fddd 	bl	8000f3c <NVIC_EnableIRQ>
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40011000 	.word	0x40011000

0800138c <USART1_IRQHandler>:

// Thêm handler cho ngắt USART1 (IDLE)
void USART1_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_IDLE)
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <USART1_IRQHandler+0x34>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	b29b      	uxth	r3, r3
 8001398:	f003 0310 	and.w	r3, r3, #16
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00a      	beq.n	80013b6 <USART1_IRQHandler+0x2a>
    {
        volatile uint32_t tmp = USART1->SR; // Đọc SR và DR để xóa cờ IDLE
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <USART1_IRQHandler+0x34>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	607b      	str	r3, [r7, #4]
        tmp = USART1->DR;
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <USART1_IRQHandler+0x34>)
 80013aa:	889b      	ldrh	r3, [r3, #4]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	607b      	str	r3, [r7, #4]
        (void)tmp;
 80013b0:	687b      	ldr	r3, [r7, #4]
        usart1_dma_rx_check(); // Xử lý dữ liệu mới nhận được
 80013b2:	f7ff fef1 	bl	8001198 <usart1_dma_rx_check>
    }
    // ...xử lý các ngắt khác nếu cần...
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40011000 	.word	0x40011000

080013c4 <main>:

// Thêm khai báo trạng thái PPP
extern ppp_net_state_t ppp_state;

int main(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0a6      	sub	sp, #152	; 0x98
 80013c8:	af00      	add	r7, sp, #0
    hardware_init();
 80013ca:	f7ff fc85 	bl	8000cd8 <hardware_init>
    uart_init_all();
 80013ce:	f7ff fdcf 	bl	8000f70 <uart_init_all>
    timer2_init_1ms();
 80013d2:	f7ff fd4b 	bl	8000e6c <timer2_init_1ms>
    gsm_init();
 80013d6:	f7fe ff9f 	bl	8000318 <gsm_init>
    uart_log("UART2 log test");
 80013da:	4842      	ldr	r0, [pc, #264]	; (80014e4 <main+0x120>)
 80013dc:	f7ff fe5a 	bl	8001094 <uart_log>
    delay_ms(10000);
 80013e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80013e4:	f7ff fd96 	bl	8000f14 <delay_ms>

    lwip_init(); // <--- BẮT BUỘC PHẢI CÓ DÒNG NÀY
 80013e8:	f000 fce1 	bl	8001dae <lwip_init>

    gsm_state_t last_state = GSM_STATE_POWER_OFF;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
    bool ppp_started = false;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    while (1) {
        // Xử lý trạng thái GSM
        gsm_process();
 80013f8:	f7ff f816 	bl	8000428 <gsm_process>
        led_4g_update_logic();
 80013fc:	f000 f928 	bl	8001650 <led_4g_update_logic>

        // Thêm log để kiểm tra trạng thái GSM
        char gsm_state_log[64];
        sprintf(gsm_state_log, "GSM State: %d", gsm_get_state());
 8001400:	f7fe ffd2 	bl	80003a8 <gsm_get_state>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	463b      	mov	r3, r7
 800140a:	4937      	ldr	r1, [pc, #220]	; (80014e8 <main+0x124>)
 800140c:	4618      	mov	r0, r3
 800140e:	f00f f887 	bl	8010520 <siprintf>
        uart_log(gsm_state_log);
 8001412:	463b      	mov	r3, r7
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fe3d 	bl	8001094 <uart_log>

        // Khi GSM đã quay số PPP thành công, khởi tạo PPP nếu chưa khởi tạo
        if (gsm_data_layer_is_ppp_connected() && !ppp_started) {
 800141a:	f7ff f955 	bl	80006c8 <gsm_data_layer_is_ppp_connected>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d008      	beq.n	8001436 <main+0x72>
 8001424:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001428:	f083 0301 	eor.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <main+0x72>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <main+0x74>
 8001436:	2300      	movs	r3, #0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00a      	beq.n	8001452 <main+0x8e>
            uart_log("PPP: GSM bao da ket noi, bat dau khoi tao PPP...");
 800143c:	482b      	ldr	r0, [pc, #172]	; (80014ec <main+0x128>)
 800143e:	f7ff fe29 	bl	8001094 <uart_log>
            ppp_net_init();
 8001442:	f000 fa39 	bl	80018b8 <ppp_net_init>
            ppp_started = true;
 8001446:	2301      	movs	r3, #1
 8001448:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
            uart_log("PPP started");
 800144c:	4828      	ldr	r0, [pc, #160]	; (80014f0 <main+0x12c>)
 800144e:	f7ff fe21 	bl	8001094 <uart_log>
        }

        // Xử lý PPP định kỳ
        if (ppp_started) {
 8001452:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001456:	2b00      	cmp	r3, #0
 8001458:	d031      	beq.n	80014be <main+0xfa>
            ppp_net_poll();
 800145a:	f000 fa63 	bl	8001924 <ppp_net_poll>
            if (ppp_net_is_connected()) {
 800145e:	f000 fab7 	bl	80019d0 <ppp_net_is_connected>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d027      	beq.n	80014b8 <main+0xf4>
                struct netif* pppif = ppp_net_get_netif();
 8001468:	f000 fac2 	bl	80019f0 <ppp_net_get_netif>
 800146c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                if (pppif && !ip4_addr_isany_val(*netif_ip4_addr(pppif))) {
 8001470:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001474:	2b00      	cmp	r3, #0
 8001476:	d01b      	beq.n	80014b0 <main+0xec>
 8001478:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800147c:	3304      	adds	r3, #4
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d015      	beq.n	80014b0 <main+0xec>
                    char ipbuf[16];
                    sprintf(ipbuf, "%s", ip4addr_ntoa(netif_ip4_addr(pppif)));
 8001484:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001488:	3304      	adds	r3, #4
 800148a:	4618      	mov	r0, r3
 800148c:	f001 f99e 	bl	80027cc <ip4addr_ntoa>
 8001490:	4602      	mov	r2, r0
 8001492:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f00f fc1e 	bl	8010cda <strcpy>
                    uart_log("PPP: Da co IP, PPP hoat dong OK!");
 800149e:	4815      	ldr	r0, [pc, #84]	; (80014f4 <main+0x130>)
 80014a0:	f7ff fdf8 	bl	8001094 <uart_log>
                    uart_log(ipbuf);
 80014a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fdf3 	bl	8001094 <uart_log>
 80014ae:	e006      	b.n	80014be <main+0xfa>
                    // Có thể tick MQTT ở đây
                } else {
                    uart_log("PPP: Chua co IP, dang cho ket noi...");
 80014b0:	4811      	ldr	r0, [pc, #68]	; (80014f8 <main+0x134>)
 80014b2:	f7ff fdef 	bl	8001094 <uart_log>
 80014b6:	e002      	b.n	80014be <main+0xfa>
                }
            } else {
                uart_log("PPP: Chua co IP, dang cho ket noi...");
 80014b8:	480f      	ldr	r0, [pc, #60]	; (80014f8 <main+0x134>)
 80014ba:	f7ff fdeb 	bl	8001094 <uart_log>
            }
        }

        // Thêm log để kiểm tra trạng thái PPP
        if (ppp_started) {
 80014be:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d098      	beq.n	80013f8 <main+0x34>
            char ppp_state_log[64];
            sprintf(ppp_state_log, "PPP State: %d", ppp_state);
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <main+0x138>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014d0:	490b      	ldr	r1, [pc, #44]	; (8001500 <main+0x13c>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f00f f824 	bl	8010520 <siprintf>
            uart_log(ppp_state_log);
 80014d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fdd9 	bl	8001094 <uart_log>
        }
    }
 80014e2:	e789      	b.n	80013f8 <main+0x34>
 80014e4:	08011700 	.word	0x08011700
 80014e8:	08011710 	.word	0x08011710
 80014ec:	08011720 	.word	0x08011720
 80014f0:	08011754 	.word	0x08011754
 80014f4:	08011760 	.word	0x08011760
 80014f8:	08011784 	.word	0x08011784
 80014fc:	20000364 	.word	0x20000364
 8001500:	080117ac 	.word	0x080117ac

08001504 <led_logic_blink_200_200>:
#include "hardware/led.h"
#include "hardware/timer.h"

volatile led_4g_mode_t led_4g_mode = LED_4G_OFF;

void led_logic_blink_200_200(void) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t led_state = 0;
    uint32_t now = timer2_get_tick();
 800150a:	f7ff fcf7 	bl	8000efc <timer2_get_tick>
 800150e:	6078      	str	r0, [r7, #4]

    if (now < last_tick) last_tick = now;
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <led_logic_blink_200_200+0x68>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	429a      	cmp	r2, r3
 8001518:	d202      	bcs.n	8001520 <led_logic_blink_200_200+0x1c>
 800151a:	4a14      	ldr	r2, [pc, #80]	; (800156c <led_logic_blink_200_200+0x68>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6013      	str	r3, [r2, #0]

    if (led_state) {
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <led_logic_blink_200_200+0x6c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00e      	beq.n	8001546 <led_logic_blink_200_200+0x42>
        if (now - last_tick >= 200) {
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <led_logic_blink_200_200+0x68>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2bc7      	cmp	r3, #199	; 0xc7
 8001532:	d916      	bls.n	8001562 <led_logic_blink_200_200+0x5e>
            led_4g_off();
 8001534:	f7ff fc72 	bl	8000e1c <led_4g_off>
            led_state = 0;
 8001538:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <led_logic_blink_200_200+0x6c>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
            last_tick = now;
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <led_logic_blink_200_200+0x68>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6013      	str	r3, [r2, #0]
            led_4g_on();
            led_state = 1;
            last_tick = now;
        }
    }
}
 8001544:	e00d      	b.n	8001562 <led_logic_blink_200_200+0x5e>
        if (now - last_tick >= 200) {
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <led_logic_blink_200_200+0x68>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2bc7      	cmp	r3, #199	; 0xc7
 8001550:	d907      	bls.n	8001562 <led_logic_blink_200_200+0x5e>
            led_4g_on();
 8001552:	f7ff fc55 	bl	8000e00 <led_4g_on>
            led_state = 1;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <led_logic_blink_200_200+0x6c>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
            last_tick = now;
 800155c:	4a03      	ldr	r2, [pc, #12]	; (800156c <led_logic_blink_200_200+0x68>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6013      	str	r3, [r2, #0]
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2000031c 	.word	0x2000031c
 8001570:	20000320 	.word	0x20000320

08001574 <led_logic_blink_200_500_200_2000>:

void led_logic_blink_200_500_200_2000(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t phase = 0;
    uint32_t now = timer2_get_tick();
 800157a:	f7ff fcbf 	bl	8000efc <timer2_get_tick>
 800157e:	6078      	str	r0, [r7, #4]

    if (now < last_tick) {
 8001580:	4b31      	ldr	r3, [pc, #196]	; (8001648 <led_logic_blink_200_500_200_2000+0xd4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	429a      	cmp	r2, r3
 8001588:	d205      	bcs.n	8001596 <led_logic_blink_200_500_200_2000+0x22>
        last_tick = now;
 800158a:	4a2f      	ldr	r2, [pc, #188]	; (8001648 <led_logic_blink_200_500_200_2000+0xd4>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6013      	str	r3, [r2, #0]
        phase = 0;
 8001590:	4b2e      	ldr	r3, [pc, #184]	; (800164c <led_logic_blink_200_500_200_2000+0xd8>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
    }

    switch (phase) {
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <led_logic_blink_200_500_200_2000+0xd8>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b03      	cmp	r3, #3
 800159c:	d84f      	bhi.n	800163e <led_logic_blink_200_500_200_2000+0xca>
 800159e:	a201      	add	r2, pc, #4	; (adr r2, 80015a4 <led_logic_blink_200_500_200_2000+0x30>)
 80015a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a4:	080015b5 	.word	0x080015b5
 80015a8:	080015d3 	.word	0x080015d3
 80015ac:	080015f3 	.word	0x080015f3
 80015b0:	08001611 	.word	0x08001611
        case 0:
            led_4g_on();
 80015b4:	f7ff fc24 	bl	8000e00 <led_4g_on>
            if (now - last_tick >= 200) {
 80015b8:	4b23      	ldr	r3, [pc, #140]	; (8001648 <led_logic_blink_200_500_200_2000+0xd4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2bc7      	cmp	r3, #199	; 0xc7
 80015c2:	d935      	bls.n	8001630 <led_logic_blink_200_500_200_2000+0xbc>
                last_tick = now;
 80015c4:	4a20      	ldr	r2, [pc, #128]	; (8001648 <led_logic_blink_200_500_200_2000+0xd4>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
                phase = 1;
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <led_logic_blink_200_500_200_2000+0xd8>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
            }
            break;
 80015d0:	e02e      	b.n	8001630 <led_logic_blink_200_500_200_2000+0xbc>
        case 1:
            led_4g_off();
 80015d2:	f7ff fc23 	bl	8000e1c <led_4g_off>
            if (now - last_tick >= 500) {
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <led_logic_blink_200_500_200_2000+0xd4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015e2:	d327      	bcc.n	8001634 <led_logic_blink_200_500_200_2000+0xc0>
                last_tick = now;
 80015e4:	4a18      	ldr	r2, [pc, #96]	; (8001648 <led_logic_blink_200_500_200_2000+0xd4>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
                phase = 2;
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <led_logic_blink_200_500_200_2000+0xd8>)
 80015ec:	2202      	movs	r2, #2
 80015ee:	701a      	strb	r2, [r3, #0]
            }
            break;
 80015f0:	e020      	b.n	8001634 <led_logic_blink_200_500_200_2000+0xc0>
        case 2:
            led_4g_on();
 80015f2:	f7ff fc05 	bl	8000e00 <led_4g_on>
            if (now - last_tick >= 200) {
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <led_logic_blink_200_500_200_2000+0xd4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2bc7      	cmp	r3, #199	; 0xc7
 8001600:	d91a      	bls.n	8001638 <led_logic_blink_200_500_200_2000+0xc4>
                last_tick = now;
 8001602:	4a11      	ldr	r2, [pc, #68]	; (8001648 <led_logic_blink_200_500_200_2000+0xd4>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6013      	str	r3, [r2, #0]
                phase = 3;
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <led_logic_blink_200_500_200_2000+0xd8>)
 800160a:	2203      	movs	r2, #3
 800160c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800160e:	e013      	b.n	8001638 <led_logic_blink_200_500_200_2000+0xc4>
        case 3:
            led_4g_off();
 8001610:	f7ff fc04 	bl	8000e1c <led_4g_off>
            if (now - last_tick >= 2000) {
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <led_logic_blink_200_500_200_2000+0xd4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001620:	d30c      	bcc.n	800163c <led_logic_blink_200_500_200_2000+0xc8>
                last_tick = now;
 8001622:	4a09      	ldr	r2, [pc, #36]	; (8001648 <led_logic_blink_200_500_200_2000+0xd4>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6013      	str	r3, [r2, #0]
                phase = 0;
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <led_logic_blink_200_500_200_2000+0xd8>)
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800162e:	e005      	b.n	800163c <led_logic_blink_200_500_200_2000+0xc8>
            break;
 8001630:	bf00      	nop
 8001632:	e004      	b.n	800163e <led_logic_blink_200_500_200_2000+0xca>
            break;
 8001634:	bf00      	nop
 8001636:	e002      	b.n	800163e <led_logic_blink_200_500_200_2000+0xca>
            break;
 8001638:	bf00      	nop
 800163a:	e000      	b.n	800163e <led_logic_blink_200_500_200_2000+0xca>
            break;
 800163c:	bf00      	nop
    }
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000324 	.word	0x20000324
 800164c:	20000328 	.word	0x20000328

08001650 <led_4g_update_logic>:

void led_4g_update_logic(void) {
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
    switch (led_4g_mode) {
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <led_4g_update_logic+0x40>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b03      	cmp	r3, #3
 800165c:	d816      	bhi.n	800168c <led_4g_update_logic+0x3c>
 800165e:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <led_4g_update_logic+0x14>)
 8001660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001664:	0800167b 	.word	0x0800167b
 8001668:	08001675 	.word	0x08001675
 800166c:	08001681 	.word	0x08001681
 8001670:	08001687 	.word	0x08001687
        case LED_4G_ON:
            led_4g_on();
 8001674:	f7ff fbc4 	bl	8000e00 <led_4g_on>
            break;
 8001678:	e008      	b.n	800168c <led_4g_update_logic+0x3c>
        case LED_4G_OFF:
            led_4g_off();
 800167a:	f7ff fbcf 	bl	8000e1c <led_4g_off>
            break;
 800167e:	e005      	b.n	800168c <led_4g_update_logic+0x3c>
        case LED_4G_BLINK_200_200:
            led_logic_blink_200_200();
 8001680:	f7ff ff40 	bl	8001504 <led_logic_blink_200_200>
            break;
 8001684:	e002      	b.n	800168c <led_4g_update_logic+0x3c>
        case LED_4G_BLINK_200_500_200_2000:
            led_logic_blink_200_500_200_2000();
 8001686:	f7ff ff75 	bl	8001574 <led_logic_blink_200_500_200_2000>
            break;
 800168a:	bf00      	nop
    }
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000318 	.word	0x20000318

08001694 <sys_init>:
#include "lwip/opt.h"
#include "lwip/sys.h"
#include "lwip/err.h"
#include "arch/sys_arch.h"

void sys_init(void) {}
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <sys_mutex_new>:

err_t sys_mutex_new(sys_mutex_t *mutex) { *mutex = 0; return ERR_OK; }
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
 80016b0:	2300      	movs	r3, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex) { (void)mutex; }
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <sys_mutex_unlock>:
void sys_mutex_unlock(sys_mutex_t *mutex) { (void)mutex; }
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <sys_mbox_trypost>:
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout) { (void)sem; (void)timeout; return 0; }
void sys_sem_free(sys_sem_t *sem) { (void)sem; }

err_t sys_mbox_new(sys_mbox_t *mbox, int size) { *mbox = 0; (void)size; return ERR_OK; }
void sys_mbox_post(sys_mbox_t *mbox, void *msg) { (void)mbox; (void)msg; }
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg) { (void)mbox; (void)msg; return ERR_OK; }
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
 80016f0:	2300      	movs	r3, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <lwip_win32_platform_diag>:
    (void)msg;
    while (1) { }
}

// Diagnostic output for LwIP (optional)
void lwip_win32_platform_diag(const char *msg) {
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
    // Optionally send to UART or ignore
    (void)msg;
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <sys_now>:
void sys_check_core_locking(void) {
    // No-op for baremetal
}

// Returns system time in ms (replace with your own timer if needed)
uint32_t sys_now(void) {
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
    // TODO: Thay thế bằng hàm trả về thời gian thực tế nếu bạn có timer
    static uint32_t fake_tick = 0;
    return fake_tick++;
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <sys_now+0x18>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	4903      	ldr	r1, [pc, #12]	; (800172c <sys_now+0x18>)
 8001720:	600a      	str	r2, [r1, #0]
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	2000032c 	.word	0x2000032c

08001730 <sys_jiffies>:

// Returns system time in ticks (can be same as sys_now)
uint32_t sys_jiffies(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
    return sys_now();
 8001734:	f7ff ffee 	bl	8001714 <sys_now>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <lwip_port_rand>:

// Returns a random 32-bit value (replace with your own RNG if needed)
uint32_t lwip_port_rand(void) {
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
    static uint32_t seed = 123456789;
    seed = seed * 1103515245 + 12345;
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <lwip_port_rand+0x28>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a08      	ldr	r2, [pc, #32]	; (800176c <lwip_port_rand+0x2c>)
 800174a:	fb02 f303 	mul.w	r3, r2, r3
 800174e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001752:	3339      	adds	r3, #57	; 0x39
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <lwip_port_rand+0x28>)
 8001756:	6013      	str	r3, [r2, #0]
    return seed;
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <lwip_port_rand+0x28>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000000 	.word	0x20000000
 800176c:	41c64e6d 	.word	0x41c64e6d

08001770 <sys_arch_protect>:

// --- LwIP baremetal porting functions ---

// sys_arch_protect/sys_arch_unprotect: No real protection needed for single-thread
unsigned long sys_arch_protect(void) {
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
    return 0;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <sys_arch_unprotect>:
void sys_arch_unprotect(unsigned long pval) {
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
    (void)pval;
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <ppp_io_output_cb>:
#include "uart.h"
#include <string.h>

// Hàm này được LwIP gọi để gửi dữ liệu PPP ra UART
u32_t ppp_io_output_cb(ppp_pcb *pcb, const u8_t *data, u32_t len, void *ctx)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	603b      	str	r3, [r7, #0]
    usart1_hw_uart_send_raw(data, len); // Gửi ra UART GSM
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	68b8      	ldr	r0, [r7, #8]
 80017a6:	f7ff fcad 	bl	8001104 <usart1_hw_uart_send_raw>
    return len;
 80017aa:	687b      	ldr	r3, [r7, #4]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <ppp_status_cb>:
static struct netif ppp_netif;
ppp_pcb *ppp = NULL;
ppp_net_state_t ppp_state = PPP_NET_DISCONNECTED; // Định nghĩa biến trạng thái PPP để dùng extern

static void ppp_status_cb(ppp_pcb *pcb, int err_code, void *ctx)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b0a4      	sub	sp, #144	; 0x90
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
    char logbuf[128];
    switch (err_code) {
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b0c      	cmp	r3, #12
 80017c4:	d84f      	bhi.n	8001866 <ppp_status_cb+0xb2>
 80017c6:	a201      	add	r2, pc, #4	; (adr r2, 80017cc <ppp_status_cb+0x18>)
 80017c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017cc:	08001801 	.word	0x08001801
 80017d0:	08001867 	.word	0x08001867
 80017d4:	08001867 	.word	0x08001867
 80017d8:	08001867 	.word	0x08001867
 80017dc:	08001867 	.word	0x08001867
 80017e0:	08001827 	.word	0x08001827
 80017e4:	0800182f 	.word	0x0800182f
 80017e8:	08001837 	.word	0x08001837
 80017ec:	0800183f 	.word	0x0800183f
 80017f0:	08001847 	.word	0x08001847
 80017f4:	0800184f 	.word	0x0800184f
 80017f8:	08001857 	.word	0x08001857
 80017fc:	0800185f 	.word	0x0800185f
    case PPPERR_NONE:
        ppp_state = PPP_NET_CONNECTED;
 8001800:	4b21      	ldr	r3, [pc, #132]	; (8001888 <ppp_status_cb+0xd4>)
 8001802:	2202      	movs	r2, #2
 8001804:	701a      	strb	r2, [r3, #0]
        sprintf(logbuf, "PPP: Connected successfully, IP: %s", ip4addr_ntoa(netif_ip4_addr(&ppp_netif)));
 8001806:	4821      	ldr	r0, [pc, #132]	; (800188c <ppp_status_cb+0xd8>)
 8001808:	f000 ffe0 	bl	80027cc <ip4addr_ntoa>
 800180c:	4602      	mov	r2, r0
 800180e:	f107 0310 	add.w	r3, r7, #16
 8001812:	491f      	ldr	r1, [pc, #124]	; (8001890 <ppp_status_cb+0xdc>)
 8001814:	4618      	mov	r0, r3
 8001816:	f00e fe83 	bl	8010520 <siprintf>
        uart_log(logbuf);
 800181a:	f107 0310 	add.w	r3, r7, #16
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fc38 	bl	8001094 <uart_log>
        break;
 8001824:	e02c      	b.n	8001880 <ppp_status_cb+0xcc>
    case PPPERR_USER:
        uart_log("PPP: Disconnected by user");
 8001826:	481b      	ldr	r0, [pc, #108]	; (8001894 <ppp_status_cb+0xe0>)
 8001828:	f7ff fc34 	bl	8001094 <uart_log>
        break;
 800182c:	e028      	b.n	8001880 <ppp_status_cb+0xcc>
    case PPPERR_CONNECT:
        uart_log("PPP: Connection failed, retrying...");
 800182e:	481a      	ldr	r0, [pc, #104]	; (8001898 <ppp_status_cb+0xe4>)
 8001830:	f7ff fc30 	bl	8001094 <uart_log>
        break;
 8001834:	e024      	b.n	8001880 <ppp_status_cb+0xcc>
    case PPPERR_AUTHFAIL:
        uart_log("PPP: Authentication failed, check credentials");
 8001836:	4819      	ldr	r0, [pc, #100]	; (800189c <ppp_status_cb+0xe8>)
 8001838:	f7ff fc2c 	bl	8001094 <uart_log>
        break;
 800183c:	e020      	b.n	8001880 <ppp_status_cb+0xcc>
    case PPPERR_PROTOCOL:
        uart_log("PPP: Protocol error during IPCP negotiation, restarting...");
 800183e:	4818      	ldr	r0, [pc, #96]	; (80018a0 <ppp_status_cb+0xec>)
 8001840:	f7ff fc28 	bl	8001094 <uart_log>
        break;
 8001844:	e01c      	b.n	8001880 <ppp_status_cb+0xcc>
    case PPPERR_PEERDEAD:
        uart_log("PPP: Peer is dead, attempting reconnection...");
 8001846:	4817      	ldr	r0, [pc, #92]	; (80018a4 <ppp_status_cb+0xf0>)
 8001848:	f7ff fc24 	bl	8001094 <uart_log>
        break;
 800184c:	e018      	b.n	8001880 <ppp_status_cb+0xcc>
    case PPPERR_IDLETIMEOUT:
        uart_log("PPP: Idle timeout, reconnecting...");
 800184e:	4816      	ldr	r0, [pc, #88]	; (80018a8 <ppp_status_cb+0xf4>)
 8001850:	f7ff fc20 	bl	8001094 <uart_log>
        break;
 8001854:	e014      	b.n	8001880 <ppp_status_cb+0xcc>
    case PPPERR_CONNECTTIME:
        uart_log("PPP: Connection timeout, retrying...");
 8001856:	4815      	ldr	r0, [pc, #84]	; (80018ac <ppp_status_cb+0xf8>)
 8001858:	f7ff fc1c 	bl	8001094 <uart_log>
        break;
 800185c:	e010      	b.n	8001880 <ppp_status_cb+0xcc>
    case PPPERR_LOOPBACK:
        uart_log("PPP: Loopback detected, restarting connection...");
 800185e:	4814      	ldr	r0, [pc, #80]	; (80018b0 <ppp_status_cb+0xfc>)
 8001860:	f7ff fc18 	bl	8001094 <uart_log>
        break;
 8001864:	e00c      	b.n	8001880 <ppp_status_cb+0xcc>
    default:
        sprintf(logbuf, "PPP: Unknown error code %d, restarting...", err_code);
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	4911      	ldr	r1, [pc, #68]	; (80018b4 <ppp_status_cb+0x100>)
 800186e:	4618      	mov	r0, r3
 8001870:	f00e fe56 	bl	8010520 <siprintf>
        uart_log(logbuf);
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fc0b 	bl	8001094 <uart_log>
        break;
 800187e:	bf00      	nop
    }
}
 8001880:	bf00      	nop
 8001882:	3790      	adds	r7, #144	; 0x90
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000364 	.word	0x20000364
 800188c:	20000334 	.word	0x20000334
 8001890:	080117bc 	.word	0x080117bc
 8001894:	080117e0 	.word	0x080117e0
 8001898:	080117fc 	.word	0x080117fc
 800189c:	08011820 	.word	0x08011820
 80018a0:	08011850 	.word	0x08011850
 80018a4:	0801188c 	.word	0x0801188c
 80018a8:	080118bc 	.word	0x080118bc
 80018ac:	080118e0 	.word	0x080118e0
 80018b0:	08011908 	.word	0x08011908
 80018b4:	0801193c 	.word	0x0801193c

080018b8 <ppp_net_init>:

void ppp_net_init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
    if (ppp == NULL) {
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <ppp_net_init+0x58>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d122      	bne.n	800190a <ppp_net_init+0x52>
        ppp = pppos_create(&ppp_netif, ppp_io_output_cb, ppp_status_cb, NULL);
 80018c4:	2300      	movs	r3, #0
 80018c6:	4a13      	ldr	r2, [pc, #76]	; (8001914 <ppp_net_init+0x5c>)
 80018c8:	4913      	ldr	r1, [pc, #76]	; (8001918 <ppp_net_init+0x60>)
 80018ca:	4814      	ldr	r0, [pc, #80]	; (800191c <ppp_net_init+0x64>)
 80018cc:	f00d fbc4 	bl	800f058 <pppos_create>
 80018d0:	4602      	mov	r2, r0
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <ppp_net_init+0x58>)
 80018d4:	601a      	str	r2, [r3, #0]
        if (ppp != NULL) {
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <ppp_net_init+0x58>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d015      	beq.n	800190a <ppp_net_init+0x52>
            ppp_set_default(ppp);
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <ppp_net_init+0x58>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	4618      	mov	r0, r3
 80018e6:	f001 fecf 	bl	8003688 <netif_set_default>
            ppp_set_auth(ppp, PPPAUTHTYPE_NONE, NULL, NULL); // Không cần tài khoản và mật khẩu
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <ppp_net_init+0x58>)
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	2300      	movs	r3, #0
 80018f0:	2200      	movs	r2, #0
 80018f2:	2100      	movs	r1, #0
 80018f4:	f00d f808 	bl	800e908 <ppp_set_auth>
            ppp_state = PPP_NET_CONNECTING;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <ppp_net_init+0x68>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
            ppp_connect(ppp, 0);
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <ppp_net_init+0x58>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f00d f835 	bl	800e974 <ppp_connect>
        }
    }
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000360 	.word	0x20000360
 8001914:	080017b5 	.word	0x080017b5
 8001918:	08001795 	.word	0x08001795
 800191c:	20000330 	.word	0x20000330
 8001920:	20000364 	.word	0x20000364

08001924 <ppp_net_poll>:

void ppp_net_poll(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b092      	sub	sp, #72	; 0x48
 8001928:	af00      	add	r7, sp, #0
    struct netif* pppif = ppp_net_get_netif();
 800192a:	f000 f861 	bl	80019f0 <ppp_net_get_netif>
 800192e:	6478      	str	r0, [r7, #68]	; 0x44
    if (pppif && !ip4_addr_isany_val(*netif_ip4_addr(pppif))) {
 8001930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001932:	2b00      	cmp	r3, #0
 8001934:	d014      	beq.n	8001960 <ppp_net_poll+0x3c>
 8001936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001938:	3304      	adds	r3, #4
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00f      	beq.n	8001960 <ppp_net_poll+0x3c>
        char ipbuf[64];
        sprintf(ipbuf, "PPP: IP Address obtained: %s", ip4addr_ntoa(netif_ip4_addr(pppif)));
 8001940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001942:	3304      	adds	r3, #4
 8001944:	4618      	mov	r0, r3
 8001946:	f000 ff41 	bl	80027cc <ip4addr_ntoa>
 800194a:	4602      	mov	r2, r0
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	4919      	ldr	r1, [pc, #100]	; (80019b4 <ppp_net_poll+0x90>)
 8001950:	4618      	mov	r0, r3
 8001952:	f00e fde5 	bl	8010520 <siprintf>
        uart_log(ipbuf);
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fb9b 	bl	8001094 <uart_log>
    if (pppif && !ip4_addr_isany_val(*netif_ip4_addr(pppif))) {
 800195e:	e024      	b.n	80019aa <ppp_net_poll+0x86>
    } else {
        uart_log("PPP: No IP address yet, retrying connection...");
 8001960:	4815      	ldr	r0, [pc, #84]	; (80019b8 <ppp_net_poll+0x94>)
 8001962:	f7ff fb97 	bl	8001094 <uart_log>
        // Thêm log trạng thái PPP và con trỏ ppp
        char debugbuf[64];
        sprintf(debugbuf, "PPP state: %d, ppp ptr: %p", ppp_state, (void*)ppp);
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <ppp_net_poll+0x98>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <ppp_net_poll+0x9c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	1d38      	adds	r0, r7, #4
 8001972:	4914      	ldr	r1, [pc, #80]	; (80019c4 <ppp_net_poll+0xa0>)
 8001974:	f00e fdd4 	bl	8010520 <siprintf>
        uart_log(debugbuf);
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fb8a 	bl	8001094 <uart_log>
        if (ppp != NULL) {
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <ppp_net_poll+0x9c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00b      	beq.n	80019a0 <ppp_net_poll+0x7c>
            uart_log("PPP: Closing current PPP session...");
 8001988:	480f      	ldr	r0, [pc, #60]	; (80019c8 <ppp_net_poll+0xa4>)
 800198a:	f7ff fb83 	bl	8001094 <uart_log>
            ppp_close(ppp, 0);
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <ppp_net_poll+0x9c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f00d f81b 	bl	800e9d0 <ppp_close>
            ppp = NULL; // Đảm bảo sẽ tạo lại ppp_pcb mới
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <ppp_net_poll+0x9c>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
        }
        uart_log("PPP: Reinitializing PPP connection...");
 80019a0:	480a      	ldr	r0, [pc, #40]	; (80019cc <ppp_net_poll+0xa8>)
 80019a2:	f7ff fb77 	bl	8001094 <uart_log>
        ppp_net_init();
 80019a6:	f7ff ff87 	bl	80018b8 <ppp_net_init>
    }
}
 80019aa:	bf00      	nop
 80019ac:	3748      	adds	r7, #72	; 0x48
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	08011968 	.word	0x08011968
 80019b8:	08011988 	.word	0x08011988
 80019bc:	20000364 	.word	0x20000364
 80019c0:	20000360 	.word	0x20000360
 80019c4:	080119b8 	.word	0x080119b8
 80019c8:	080119d4 	.word	0x080119d4
 80019cc:	080119f8 	.word	0x080119f8

080019d0 <ppp_net_is_connected>:

bool ppp_net_is_connected(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
    return (ppp_state == PPP_NET_CONNECTED);
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <ppp_net_is_connected+0x1c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	20000364 	.word	0x20000364

080019f0 <ppp_net_get_netif>:

struct netif* ppp_net_get_netif(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
    return &ppp_netif;
 80019f4:	4b02      	ldr	r3, [pc, #8]	; (8001a00 <ppp_net_get_netif+0x10>)
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	20000330 	.word	0x20000330

08001a04 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8001a0e:	2005      	movs	r0, #5
 8001a10:	f001 fbde 	bl	80031d0 <memp_malloc>
 8001a14:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <tcpip_try_callback+0x1e>
    return ERR_MEM;
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	e017      	b.n	8001a52 <tcpip_try_callback+0x4e>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8001a34:	68f9      	ldr	r1, [r7, #12]
 8001a36:	4809      	ldr	r0, [pc, #36]	; (8001a5c <tcpip_try_callback+0x58>)
 8001a38:	f7ff fe55 	bl	80016e6 <sys_mbox_trypost>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d006      	beq.n	8001a50 <tcpip_try_callback+0x4c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8001a42:	68f9      	ldr	r1, [r7, #12]
 8001a44:	2005      	movs	r0, #5
 8001a46:	f001 fc2d 	bl	80032a4 <memp_free>
    return ERR_MEM;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	e000      	b.n	8001a52 <tcpip_try_callback+0x4e>
  }
  return ERR_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000365 	.word	0x20000365

08001a60 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	b21a      	sxth	r2, r3
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	b29b      	uxth	r3, r3
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	061a      	lsls	r2, r3, #24
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	0e1b      	lsrs	r3, r3, #24
 8001aae:	4313      	orrs	r3, r2
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00d      	beq.n	8001afc <lwip_standard_chksum+0x40>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	dd0a      	ble.n	8001afc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8001ae6:	f107 030e 	add.w	r3, r7, #14
 8001aea:	3301      	adds	r3, #1
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	1c51      	adds	r1, r2, #1
 8001af0:	61f9      	str	r1, [r7, #28]
 8001af2:	7812      	ldrb	r2, [r2, #0]
 8001af4:	701a      	strb	r2, [r3, #0]
    len--;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8001b00:	e00a      	b.n	8001b18 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	1c9a      	adds	r2, r3, #2
 8001b06:	61ba      	str	r2, [r7, #24]
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	4413      	add	r3, r2
 8001b10:	617b      	str	r3, [r7, #20]
    len -= 2;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	3b02      	subs	r3, #2
 8001b16:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	dcf1      	bgt.n	8001b02 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	dd04      	ble.n	8001b2e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8001b24:	f107 030e 	add.w	r3, r7, #14
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	7812      	ldrb	r2, [r2, #0]
 8001b2c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8001b2e:	89fb      	ldrh	r3, [r7, #14]
 8001b30:	461a      	mov	r2, r3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	4413      	add	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	0c1a      	lsrs	r2, r3, #16
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	0c1a      	lsrs	r2, r3, #16
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	4313      	orrs	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	b29b      	uxth	r3, r3
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3724      	adds	r7, #36	; 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	72fb      	strb	r3, [r7, #11]
 8001b84:	4613      	mov	r3, r2
 8001b86:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	e02b      	b.n	8001bea <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	895b      	ldrh	r3, [r3, #10]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	f7ff ff8d 	bl	8001abc <lwip_standard_chksum>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	0c1a      	lsrs	r2, r3, #16
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	895b      	ldrh	r3, [r3, #10]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00e      	beq.n	8001be4 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	bf0c      	ite	eq
 8001bcc:	2301      	moveq	r3, #1
 8001bce:	2300      	movne	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	4313      	orrs	r3, r2
 8001be2:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1d0      	bne.n	8001b92 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8001c06:	7afb      	ldrb	r3, [r7, #11]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff28 	bl	8001a60 <lwip_htons>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461a      	mov	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8001c1a:	893b      	ldrh	r3, [r7, #8]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff1f 	bl	8001a60 <lwip_htons>
 8001c22:	4603      	mov	r3, r0
 8001c24:	461a      	mov	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	0c1a      	lsrs	r2, r3, #16
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	0c1a      	lsrs	r2, r3, #16
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	b29b      	uxth	r3, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	72fb      	strb	r3, [r7, #11]
 8001c62:	4613      	mov	r3, r2
 8001c64:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	0c1b      	lsrs	r3, r3, #16
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4413      	add	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4413      	add	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	0c1b      	lsrs	r3, r3, #16
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4413      	add	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	0c1a      	lsrs	r2, r3, #16
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	0c1a      	lsrs	r2, r3, #16
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8001cae:	893a      	ldrh	r2, [r7, #8]
 8001cb0:	7af9      	ldrb	r1, [r7, #11]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f7ff ff5e 	bl	8001b76 <inet_cksum_pseudo_base>
 8001cba:	4603      	mov	r3, r0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af02      	add	r7, sp, #8
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	72fb      	strb	r3, [r7, #11]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8001cd6:	893a      	ldrh	r2, [r7, #8]
 8001cd8:	7af9      	ldrb	r1, [r7, #11]
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f7ff ffb7 	bl	8001c54 <inet_chksum_pseudo>
 8001ce6:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff fedb 	bl	8001abc <lwip_standard_chksum>
 8001d06:	4603      	mov	r3, r0
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	b29b      	uxth	r3, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	e02b      	b.n	8001d82 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	895b      	ldrh	r3, [r3, #10]
 8001d32:	4619      	mov	r1, r3
 8001d34:	4610      	mov	r0, r2
 8001d36:	f7ff fec1 	bl	8001abc <lwip_standard_chksum>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	4413      	add	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	0c1a      	lsrs	r2, r3, #16
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	895b      	ldrh	r3, [r3, #10]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00e      	beq.n	8001d7c <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1d0      	bne.n	8001d2a <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d007      	beq.n	8001d9e <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	b29b      	uxth	r3, r3
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8001db8:	f7ff fc6c 	bl	8001694 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8001dbc:	f000 fe72 	bl	8002aa4 <mem_init>
  memp_init();
 8001dc0:	f001 f9a6 	bl	8003110 <memp_init>
  pbuf_init();
  netif_init();
 8001dc4:	f001 fa98 	bl	80032f8 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8001dc8:	f002 fbb0 	bl	800452c <tcp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */
#if PPP_SUPPORT
  ppp_init();
 8001dcc:	f00c fee8 	bl	800eba0 <ppp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8001dd0:	f008 f884 	bl	8009edc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08e      	sub	sp, #56	; 0x38
 8001de0:	af04      	add	r7, sp, #16
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8001de6:	4b92      	ldr	r3, [pc, #584]	; (8002030 <icmp_input+0x254>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8001dfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001dfe:	2b13      	cmp	r3, #19
 8001e00:	f240 80fe 	bls.w	8002000 <icmp_input+0x224>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	895b      	ldrh	r3, [r3, #10]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	f240 80fb 	bls.w	8002004 <icmp_input+0x228>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	785b      	ldrb	r3, [r3, #1]
 8001e1e:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8001e22:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 80e3 	beq.w	8001ff2 <icmp_input+0x216>
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	f040 80e3 	bne.w	8001ff8 <icmp_input+0x21c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8001e32:	4b80      	ldr	r3, [pc, #512]	; (8002034 <icmp_input+0x258>)
 8001e34:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8001e36:	4b7e      	ldr	r3, [pc, #504]	; (8002030 <icmp_input+0x254>)
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e3e:	2be0      	cmp	r3, #224	; 0xe0
 8001e40:	f000 80e7 	beq.w	8002012 <icmp_input+0x236>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8001e44:	4b7a      	ldr	r3, [pc, #488]	; (8002030 <icmp_input+0x254>)
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	4b79      	ldr	r3, [pc, #484]	; (8002030 <icmp_input+0x254>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4610      	mov	r0, r2
 8001e50:	f000 fc7a 	bl	8002748 <ip4_addr_isbroadcast_u32>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f040 80dd 	bne.w	8002016 <icmp_input+0x23a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	891b      	ldrh	r3, [r3, #8]
 8001e60:	2b07      	cmp	r3, #7
 8001e62:	f240 80d1 	bls.w	8002008 <icmp_input+0x22c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ff54 	bl	8001d14 <inet_chksum_pbuf>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f002 f820 	bl	8003eb8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8001e78:	e0d6      	b.n	8002028 <icmp_input+0x24c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8001e7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e7c:	330e      	adds	r3, #14
 8001e7e:	4619      	mov	r1, r3
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f001 ff7f 	bl	8003d84 <pbuf_add_header>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d04c      	beq.n	8001f26 <icmp_input+0x14a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	891a      	ldrh	r2, [r3, #8]
 8001e90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e92:	4413      	add	r3, r2
 8001e94:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	891b      	ldrh	r3, [r3, #8]
 8001e9a:	8b7a      	ldrh	r2, [r7, #26]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	f0c0 80bc 	bcc.w	800201a <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8001ea2:	8b7b      	ldrh	r3, [r7, #26]
 8001ea4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	200e      	movs	r0, #14
 8001eac:	f001 fd66 	bl	800397c <pbuf_alloc>
 8001eb0:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80b2 	beq.w	800201e <icmp_input+0x242>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	895b      	ldrh	r3, [r3, #10]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ec2:	3308      	adds	r3, #8
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d203      	bcs.n	8001ed0 <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header\n"));
          pbuf_free(r);
 8001ec8:	6978      	ldr	r0, [r7, #20]
 8001eca:	f001 fff5 	bl	8003eb8 <pbuf_free>
          goto icmperr;
 8001ece:	e0a7      	b.n	8002020 <icmp_input+0x244>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001ed6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f00e fd59 	bl	8010990 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8001ede:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6978      	ldr	r0, [r7, #20]
 8001ee4:	f001 ff5e 	bl	8003da4 <pbuf_remove_header>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00a      	beq.n	8001f04 <icmp_input+0x128>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed", 0);
 8001eee:	4b52      	ldr	r3, [pc, #328]	; (8002038 <icmp_input+0x25c>)
 8001ef0:	22b6      	movs	r2, #182	; 0xb6
 8001ef2:	4952      	ldr	r1, [pc, #328]	; (800203c <icmp_input+0x260>)
 8001ef4:	4852      	ldr	r0, [pc, #328]	; (8002040 <icmp_input+0x264>)
 8001ef6:	f00e fb29 	bl	801054c <iprintf>
 8001efa:	2000      	movs	r0, #0
 8001efc:	f00e fc28 	bl	8010750 <fflush>
 8001f00:	f00e fb6d 	bl	80105de <abort>
          pbuf_free(r);
          goto icmperr;
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f002 f910 	bl	800412c <pbuf_copy>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <icmp_input+0x13e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed\n"));
          pbuf_free(r);
 8001f12:	6978      	ldr	r0, [r7, #20]
 8001f14:	f001 ffd0 	bl	8003eb8 <pbuf_free>
          goto icmperr;
 8001f18:	e082      	b.n	8002020 <icmp_input+0x244>
        }
        /* free the original p */
        pbuf_free(p);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f001 ffcc 	bl	8003eb8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	e013      	b.n	8001f4e <icmp_input+0x172>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8001f26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f28:	330e      	adds	r3, #14
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f001 ff39 	bl	8003da4 <pbuf_remove_header>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00a      	beq.n	8001f4e <icmp_input+0x172>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed", 0);
 8001f38:	4b3f      	ldr	r3, [pc, #252]	; (8002038 <icmp_input+0x25c>)
 8001f3a:	22c7      	movs	r2, #199	; 0xc7
 8001f3c:	4941      	ldr	r1, [pc, #260]	; (8002044 <icmp_input+0x268>)
 8001f3e:	4840      	ldr	r0, [pc, #256]	; (8002040 <icmp_input+0x264>)
 8001f40:	f00e fb04 	bl	801054c <iprintf>
 8001f44:	2000      	movs	r0, #0
 8001f46:	f00e fc03 	bl	8010750 <fflush>
 8001f4a:	f00e fb48 	bl	80105de <abort>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8001f54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f56:	4619      	mov	r1, r3
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f001 ff13 	bl	8003d84 <pbuf_add_header>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d148      	bne.n	8001ff6 <icmp_input+0x21a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet\n"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8001f72:	4b2f      	ldr	r3, [pc, #188]	; (8002030 <icmp_input+0x254>)
 8001f74:	691a      	ldr	r2, [r3, #16]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
        p->if_idx = NETIF_NO_INDEX; /* we're reusing this pbuf, so reset its if_idx */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	73da      	strb	r2, [r3, #15]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	885b      	ldrh	r3, [r3, #2]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d907      	bls.n	8001fa4 <icmp_input+0x1c8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	885b      	ldrh	r3, [r3, #2]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	3309      	adds	r3, #9
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	805a      	strh	r2, [r3, #2]
 8001fa2:	e006      	b.n	8001fb2 <icmp_input+0x1d6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	885b      	ldrh	r3, [r3, #2]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	3308      	adds	r3, #8
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	22ff      	movs	r2, #255	; 0xff
 8001fb6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	729a      	strb	r2, [r3, #10]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8001fc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f7ff fe92 	bl	8001cf0 <inet_chksum>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	9302      	str	r3, [sp, #8]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	2300      	movs	r3, #0
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	23ff      	movs	r3, #255	; 0xff
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	69f9      	ldr	r1, [r7, #28]
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fa76 	bl	80024d8 <ip4_output_if>
 8001fec:	4603      	mov	r3, r0
 8001fee:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8001ff0:	e001      	b.n	8001ff6 <icmp_input+0x21a>
      break;
 8001ff2:	bf00      	nop
 8001ff4:	e000      	b.n	8001ff8 <icmp_input+0x21c>
      break;
 8001ff6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f001 ff5d 	bl	8003eb8 <pbuf_free>
  return;
 8001ffe:	e013      	b.n	8002028 <icmp_input+0x24c>
    goto lenerr;
 8002000:	bf00      	nop
 8002002:	e002      	b.n	800200a <icmp_input+0x22e>
    goto lenerr;
 8002004:	bf00      	nop
 8002006:	e000      	b.n	800200a <icmp_input+0x22e>
        goto lenerr;
 8002008:	bf00      	nop
lenerr:
  pbuf_free(p);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f001 ff54 	bl	8003eb8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8002010:	e00a      	b.n	8002028 <icmp_input+0x24c>
        goto icmperr;
 8002012:	bf00      	nop
 8002014:	e004      	b.n	8002020 <icmp_input+0x244>
        goto icmperr;
 8002016:	bf00      	nop
 8002018:	e002      	b.n	8002020 <icmp_input+0x244>
          goto icmperr;
 800201a:	bf00      	nop
 800201c:	e000      	b.n	8002020 <icmp_input+0x244>
          goto icmperr;
 800201e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f001 ff49 	bl	8003eb8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8002026:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8002028:	3728      	adds	r7, #40	; 0x28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000590 	.word	0x20000590
 8002034:	200005a4 	.word	0x200005a4
 8002038:	08011a20 	.word	0x08011a20
 800203c:	08011a44 	.word	0x08011a44
 8002040:	08011a78 	.word	0x08011a78
 8002044:	08011aa0 	.word	0x08011aa0

08002048 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	461a      	mov	r2, r3
 8002058:	2103      	movs	r1, #3
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f804 	bl	8002068 <icmp_send_response>
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08c      	sub	sp, #48	; 0x30
 800206c:	af04      	add	r7, sp, #16
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	70fb      	strb	r3, [r7, #3]
 8002074:	4613      	mov	r3, r2
 8002076:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* Keep IP header + up to 8 bytes */
  response_pkt_len = IP_HLEN + ICMP_DEST_UNREACH_DATASIZE;
 8002078:	231c      	movs	r3, #28
 800207a:	83fb      	strh	r3, [r7, #30]
  if (p->tot_len < response_pkt_len) {
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	891b      	ldrh	r3, [r3, #8]
 8002080:	8bfa      	ldrh	r2, [r7, #30]
 8002082:	429a      	cmp	r2, r3
 8002084:	d902      	bls.n	800208c <icmp_send_response+0x24>
    response_pkt_len = p->tot_len;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	891b      	ldrh	r3, [r3, #8]
 800208a:	83fb      	strh	r3, [r7, #30]
  }

  /* ICMP header + part of original packet */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_hdr) + response_pkt_len, PBUF_RAM);
 800208c:	8bfb      	ldrh	r3, [r7, #30]
 800208e:	3308      	adds	r3, #8
 8002090:	b29b      	uxth	r3, r3
 8002092:	f44f 7220 	mov.w	r2, #640	; 0x280
 8002096:	4619      	mov	r1, r3
 8002098:	2022      	movs	r0, #34	; 0x22
 800209a:	f001 fc6f 	bl	800397c <pbuf_alloc>
 800209e:	61b8      	str	r0, [r7, #24]
  if (q == NULL) {
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d059      	beq.n	800215a <icmp_send_response+0xf2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_send_response: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	895b      	ldrh	r3, [r3, #10]
 80020aa:	461a      	mov	r2, r3
 80020ac:	8bfb      	ldrh	r3, [r7, #30]
 80020ae:	3308      	adds	r3, #8
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d20b      	bcs.n	80020cc <icmp_send_response+0x64>
 80020b4:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <icmp_send_response+0xfc>)
 80020b6:	f240 126f 	movw	r2, #367	; 0x16f
 80020ba:	492b      	ldr	r1, [pc, #172]	; (8002168 <icmp_send_response+0x100>)
 80020bc:	482b      	ldr	r0, [pc, #172]	; (800216c <icmp_send_response+0x104>)
 80020be:	f00e fa45 	bl	801054c <iprintf>
 80020c2:	2000      	movs	r0, #0
 80020c4:	f00e fb44 	bl	8010750 <fflush>
 80020c8:	f00e fa89 	bl	80105de <abort>
              (q->len >= (sizeof(struct icmp_hdr) + response_pkt_len)));

  iphdr = (struct ip_hdr *)p->payload;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_hdr *)q->payload;
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	78ba      	ldrb	r2, [r7, #2]
 80020e2:	705a      	strb	r2, [r3, #1]
  icmphdr->data = 0;
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	2200      	movs	r2, #0
 80020e8:	711a      	strb	r2, [r3, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	715a      	strb	r2, [r3, #5]
 80020ee:	2200      	movs	r2, #0
 80020f0:	719a      	strb	r2, [r3, #6]
 80020f2:	2200      	movs	r2, #0
 80020f4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  pbuf_copy_partial_pbuf(q, p, response_pkt_len, sizeof(struct icmp_hdr));
 80020f6:	8bfa      	ldrh	r2, [r7, #30]
 80020f8:	2308      	movs	r3, #8
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	69b8      	ldr	r0, [r7, #24]
 80020fe:	f002 f839 	bl	8004174 <pbuf_copy_partial_pbuf>

  ip4_addr_copy(iphdr_src, iphdr->src);
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	60bb      	str	r3, [r7, #8]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8002108:	f107 0308 	add.w	r3, r7, #8
 800210c:	4618      	mov	r0, r3
 800210e:	f000 f82f 	bl	8002170 <ip4_route>
 8002112:	60f8      	str	r0, [r7, #12]
#endif
  if (netif != NULL) {
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01b      	beq.n	8002152 <icmp_send_response+0xea>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2200      	movs	r2, #0
 800211e:	709a      	strb	r2, [r3, #2]
 8002120:	2200      	movs	r2, #0
 8002122:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	895b      	ldrh	r3, [r3, #10]
 8002128:	4619      	mov	r1, r3
 800212a:	6938      	ldr	r0, [r7, #16]
 800212c:	f7ff fde0 	bl	8001cf0 <inet_chksum>
 8002130:	4603      	mov	r3, r0
 8002132:	461a      	mov	r2, r3
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8002138:	f107 0208 	add.w	r2, r7, #8
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	9302      	str	r3, [sp, #8]
 8002140:	2301      	movs	r3, #1
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	2300      	movs	r3, #0
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	23ff      	movs	r3, #255	; 0xff
 800214a:	2100      	movs	r1, #0
 800214c:	69b8      	ldr	r0, [r7, #24]
 800214e:	f000 f9c3 	bl	80024d8 <ip4_output_if>
  }
  pbuf_free(q);
 8002152:	69b8      	ldr	r0, [r7, #24]
 8002154:	f001 feb0 	bl	8003eb8 <pbuf_free>
 8002158:	e000      	b.n	800215c <icmp_send_response+0xf4>
    return;
 800215a:	bf00      	nop
}
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	08011a20 	.word	0x08011a20
 8002168:	08011ad4 	.word	0x08011ad4
 800216c:	08011a78 	.word	0x08011a78

08002170 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8002178:	4b31      	ldr	r3, [pc, #196]	; (8002240 <ip4_route+0xd0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	e033      	b.n	80021e8 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d029      	beq.n	80021e2 <ip4_route+0x72>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d022      	beq.n	80021e2 <ip4_route+0x72>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3304      	adds	r3, #4
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d01d      	beq.n	80021e2 <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_net_eq(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	3304      	adds	r3, #4
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	405a      	eors	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	3308      	adds	r3, #8
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	e038      	b.n	8002234 <ip4_route+0xc4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_eq(dest, netif_ip4_gw(netif))) {
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d108      	bne.n	80021e2 <ip4_route+0x72>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	330c      	adds	r3, #12
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d101      	bne.n	80021e2 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	e028      	b.n	8002234 <ip4_route+0xc4>
  NETIF_FOREACH(netif) {
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1c8      	bne.n	8002180 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <ip4_route+0xd4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d01a      	beq.n	800222c <ip4_route+0xbc>
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <ip4_route+0xd4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d012      	beq.n	800222c <ip4_route+0xbc>
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <ip4_route+0xd4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <ip4_route+0xd4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3304      	adds	r3, #4
 800221c:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800221e:	2b00      	cmp	r3, #0
 8002220:	d004      	beq.n	800222c <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b7f      	cmp	r3, #127	; 0x7f
 800222a:	d101      	bne.n	8002230 <ip4_route+0xc0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800222c:	2300      	movs	r3, #0
 800222e:	e001      	b.n	8002234 <ip4_route+0xc4>
  }

  return netif_default;
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <ip4_route+0xd4>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	200015bc 	.word	0x200015bc
 8002244:	200015c0 	.word	0x200015c0

08002248 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d016      	beq.n	800228c <ip4_input_accept+0x44>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3304      	adds	r3, #4
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d011      	beq.n	800228c <ip4_input_accept+0x44>
    /* unicast to this interface address? */
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <ip4_input_accept+0x50>)
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3304      	adds	r3, #4
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d008      	beq.n	8002288 <ip4_input_accept+0x40>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <ip4_input_accept+0x50>)
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fa63 	bl	8002748 <ip4_addr_isbroadcast_u32>
 8002282:	4603      	mov	r3, r0
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <ip4_input_accept+0x44>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <ip4_input_accept+0x46>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000590 	.word	0x20000590

0800229c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d004      	beq.n	80022c2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f001 fdfd 	bl	8003eb8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e102      	b.n	80024c8 <ip4_input+0x22c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	885b      	ldrh	r3, [r3, #2]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fbc1 	bl	8001a60 <lwip_htons>
 80022de:	4603      	mov	r3, r0
 80022e0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	891b      	ldrh	r3, [r3, #8]
 80022e6:	89ba      	ldrh	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d204      	bcs.n	80022f6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80022ec:	89bb      	ldrh	r3, [r7, #12]
 80022ee:	4619      	mov	r1, r3
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f001 fc35 	bl	8003b60 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	895b      	ldrh	r3, [r3, #10]
 80022fa:	89fa      	ldrh	r2, [r7, #14]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d807      	bhi.n	8002310 <ip4_input+0x74>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	891b      	ldrh	r3, [r3, #8]
 8002304:	89ba      	ldrh	r2, [r7, #12]
 8002306:	429a      	cmp	r2, r3
 8002308:	d802      	bhi.n	8002310 <ip4_input+0x74>
 800230a:	89fb      	ldrh	r3, [r7, #14]
 800230c:	2b13      	cmp	r3, #19
 800230e:	d804      	bhi.n	800231a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f001 fdd1 	bl	8003eb8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e0d6      	b.n	80024c8 <ip4_input+0x22c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 800231a:	89fb      	ldrh	r3, [r7, #14]
 800231c:	4619      	mov	r1, r3
 800231e:	6938      	ldr	r0, [r7, #16]
 8002320:	f7ff fce6 	bl	8001cf0 <inet_chksum>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d004      	beq.n	8002334 <ip4_input+0x98>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f001 fdc4 	bl	8003eb8 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	e0c9      	b.n	80024c8 <ip4_input+0x22c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	4a65      	ldr	r2, [pc, #404]	; (80024d0 <ip4_input+0x234>)
 800233a:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a63      	ldr	r2, [pc, #396]	; (80024d0 <ip4_input+0x234>)
 8002342:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8002344:	4b62      	ldr	r3, [pc, #392]	; (80024d0 <ip4_input+0x234>)
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800234c:	2be0      	cmp	r3, #224	; 0xe0
 800234e:	d111      	bne.n	8002374 <ip4_input+0xd8>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <ip4_input+0xd2>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	3304      	adds	r3, #4
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <ip4_input+0xd2>
      netif = inp;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	e02a      	b.n	80023c4 <ip4_input+0x128>
    } else {
      netif = NULL;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	e027      	b.n	80023c4 <ip4_input+0x128>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8002374:	6838      	ldr	r0, [r7, #0]
 8002376:	f7ff ff67 	bl	8002248 <ip4_input_accept>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <ip4_input+0xea>
      netif = inp;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	e01e      	b.n	80023c4 <ip4_input+0x128>
    } else {
      netif = NULL;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800238a:	4b51      	ldr	r3, [pc, #324]	; (80024d0 <ip4_input+0x234>)
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b7f      	cmp	r3, #127	; 0x7f
 8002392:	d017      	beq.n	80023c4 <ip4_input+0x128>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8002394:	4b4f      	ldr	r3, [pc, #316]	; (80024d4 <ip4_input+0x238>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	e00e      	b.n	80023ba <ip4_input+0x11e>
          if (netif == inp) {
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d006      	beq.n	80023b2 <ip4_input+0x116>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80023a4:	6978      	ldr	r0, [r7, #20]
 80023a6:	f7ff ff4f 	bl	8002248 <ip4_input_accept>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d108      	bne.n	80023c2 <ip4_input+0x126>
 80023b0:	e000      	b.n	80023b4 <ip4_input+0x118>
            continue;
 80023b2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1ed      	bne.n	800239c <ip4_input+0x100>
 80023c0:	e000      	b.n	80023c4 <ip4_input+0x128>
            break;
 80023c2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80023c4:	4b42      	ldr	r3, [pc, #264]	; (80024d0 <ip4_input+0x234>)
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	6839      	ldr	r1, [r7, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f9bc 	bl	8002748 <ip4_addr_isbroadcast_u32>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d105      	bne.n	80023e2 <ip4_input+0x146>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80023d6:	4b3e      	ldr	r3, [pc, #248]	; (80024d0 <ip4_input+0x234>)
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80023de:	2be0      	cmp	r3, #224	; 0xe0
 80023e0:	d104      	bne.n	80023ec <ip4_input+0x150>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f001 fd68 	bl	8003eb8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e06d      	b.n	80024c8 <ip4_input+0x22c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d104      	bne.n	80023fc <ip4_input+0x160>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f001 fd60 	bl	8003eb8 <pbuf_free>
    return ERR_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e065      	b.n	80024c8 <ip4_input+0x22c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	88db      	ldrh	r3, [r3, #6]
 8002400:	b29b      	uxth	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8002408:	4013      	ands	r3, r2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d004      	beq.n	8002418 <ip4_input+0x17c>
    if (p == NULL) {
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
#else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
    pbuf_free(p);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f001 fd52 	bl	8003eb8 <pbuf_free>
                lwip_ntohs(IPH_OFFSET(iphdr))));
    IP_STATS_INC(ip.opterr);
    IP_STATS_INC(ip.drop);
    /* unsupported protocol feature */
    MIB2_STATS_INC(mib2.ipinunknownprotos);
    return ERR_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	e057      	b.n	80024c8 <ip4_input+0x22c>
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8002418:	4a2d      	ldr	r2, [pc, #180]	; (80024d0 <ip4_input+0x234>)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800241e:	4a2c      	ldr	r2, [pc, #176]	; (80024d0 <ip4_input+0x234>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8002424:	4a2a      	ldr	r2, [pc, #168]	; (80024d0 <ip4_input+0x234>)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	b2db      	uxtb	r3, r3
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	b2db      	uxtb	r3, r3
 8002438:	b29a      	uxth	r2, r3
 800243a:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <ip4_input+0x234>)
 800243c:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800243e:	89fb      	ldrh	r3, [r7, #14]
 8002440:	4619      	mov	r1, r3
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f001 fcae 	bl	8003da4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	7a5b      	ldrb	r3, [r3, #9]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d006      	beq.n	800245e <ip4_input+0x1c2>
 8002450:	2b06      	cmp	r3, #6
 8002452:	d109      	bne.n	8002468 <ip4_input+0x1cc>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8002454:	6839      	ldr	r1, [r7, #0]
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f003 fc9a 	bl	8005d90 <tcp_input>
        break;
 800245c:	e021      	b.n	80024a2 <ip4_input+0x206>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800245e:	6839      	ldr	r1, [r7, #0]
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff fcbb 	bl	8001ddc <icmp_input>
        break;
 8002466:	e01c      	b.n	80024a2 <ip4_input+0x206>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <ip4_input+0x234>)
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	6979      	ldr	r1, [r7, #20]
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f96a 	bl	8002748 <ip4_addr_isbroadcast_u32>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10f      	bne.n	800249a <ip4_input+0x1fe>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <ip4_input+0x234>)
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8002482:	2be0      	cmp	r3, #224	; 0xe0
 8002484:	d009      	beq.n	800249a <ip4_input+0x1fe>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8002486:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800248a:	4619      	mov	r1, r3
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f001 fd00 	bl	8003e92 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8002492:	2102      	movs	r1, #2
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff fdd7 	bl	8002048 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f001 fd0c 	bl	8003eb8 <pbuf_free>
        break;
 80024a0:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <ip4_input+0x234>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <ip4_input+0x234>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <ip4_input+0x234>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <ip4_input+0x234>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <ip4_input+0x234>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <ip4_input+0x234>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000590 	.word	0x20000590
 80024d4:	200015bc 	.word	0x200015bc

080024d8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af04      	add	r7, sp, #16
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d009      	beq.n	8002504 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <ip4_output_if+0x26>
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d102      	bne.n	8002504 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80024fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002500:	3304      	adds	r3, #4
 8002502:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002508:	9302      	str	r3, [sp, #8]
 800250a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800250e:	9301      	str	r3, [sp, #4]
 8002510:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	4613      	mov	r3, r2
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6979      	ldr	r1, [r7, #20]
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 f805 	bl	800252c <ip4_output_if_src>
 8002522:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	7b9b      	ldrb	r3, [r3, #14]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d00b      	beq.n	800255e <ip4_output_if_src+0x32>
 8002546:	4b7a      	ldr	r3, [pc, #488]	; (8002730 <ip4_output_if_src+0x204>)
 8002548:	f240 326b 	movw	r2, #875	; 0x36b
 800254c:	4979      	ldr	r1, [pc, #484]	; (8002734 <ip4_output_if_src+0x208>)
 800254e:	487a      	ldr	r0, [pc, #488]	; (8002738 <ip4_output_if_src+0x20c>)
 8002550:	f00d fffc 	bl	801054c <iprintf>
 8002554:	2000      	movs	r0, #0
 8002556:	f00e f8fb 	bl	8010750 <fflush>
 800255a:	f00e f840 	bl	80105de <abort>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80c9 	beq.w	80026f8 <ip4_output_if_src+0x1cc>
    u16_t ip_hlen = IP_HLEN;
 8002566:	2314      	movs	r3, #20
 8002568:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800256a:	2114      	movs	r1, #20
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f001 fc09 	bl	8003d84 <pbuf_add_header>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8002578:	f06f 0301 	mvn.w	r3, #1
 800257c:	e0d3      	b.n	8002726 <ip4_output_if_src+0x1fa>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	895b      	ldrh	r3, [r3, #10]
 8002588:	2b13      	cmp	r3, #19
 800258a:	d80b      	bhi.n	80025a4 <ip4_output_if_src+0x78>
 800258c:	4b68      	ldr	r3, [pc, #416]	; (8002730 <ip4_output_if_src+0x204>)
 800258e:	f44f 7268 	mov.w	r2, #928	; 0x3a0
 8002592:	496a      	ldr	r1, [pc, #424]	; (800273c <ip4_output_if_src+0x210>)
 8002594:	4868      	ldr	r0, [pc, #416]	; (8002738 <ip4_output_if_src+0x20c>)
 8002596:	f00d ffd9 	bl	801054c <iprintf>
 800259a:	2000      	movs	r0, #0
 800259c:	f00e f8d8 	bl	8010750 <fflush>
 80025a0:	f00e f81d 	bl	80105de <abort>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	78fa      	ldrb	r2, [r7, #3]
 80025a8:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80025b0:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 80025b2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	4313      	orrs	r3, r2
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	b21a      	sxth	r2, r3
 80025c0:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	430b      	orrs	r3, r1
 80025ca:	121b      	asrs	r3, r3, #8
 80025cc:	b21b      	sxth	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	b21b      	sxth	r3, r3
 80025d2:	4313      	orrs	r3, r2
 80025d4:	b21b      	sxth	r3, r3
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	4413      	add	r3, r2
 80025de:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	4413      	add	r3, r2
 80025f2:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	0c1b      	lsrs	r3, r3, #16
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	4413      	add	r3, r2
 80025fe:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8002600:	8b7b      	ldrh	r3, [r7, #26]
 8002602:	089b      	lsrs	r3, r3, #2
 8002604:	b29b      	uxth	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800260c:	b2da      	uxtb	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002618:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 800261a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	4313      	orrs	r3, r2
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	b21a      	sxth	r2, r3
 800262a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	430b      	orrs	r3, r1
 8002636:	121b      	asrs	r3, r3, #8
 8002638:	b21b      	sxth	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	b21b      	sxth	r3, r3
 800263e:	4313      	orrs	r3, r2
 8002640:	b21b      	sxth	r3, r3
 8002642:	b29b      	uxth	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	4413      	add	r3, r2
 800264a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	891b      	ldrh	r3, [r3, #8]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fa05 	bl	8001a60 <lwip_htons>
 8002656:	4603      	mov	r3, r0
 8002658:	461a      	mov	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	885b      	ldrh	r3, [r3, #2]
 8002662:	b29b      	uxth	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	4413      	add	r3, r2
 800266a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	2200      	movs	r2, #0
 8002670:	719a      	strb	r2, [r3, #6]
 8002672:	2200      	movs	r2, #0
 8002674:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8002676:	4b32      	ldr	r3, [pc, #200]	; (8002740 <ip4_output_if_src+0x214>)
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff f9f0 	bl	8001a60 <lwip_htons>
 8002680:	4603      	mov	r3, r0
 8002682:	461a      	mov	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	889b      	ldrh	r3, [r3, #4]
 800268c:	b29b      	uxth	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	4413      	add	r3, r2
 8002694:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8002696:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <ip4_output_if_src+0x214>)
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	3301      	adds	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	4b28      	ldr	r3, [pc, #160]	; (8002740 <ip4_output_if_src+0x214>)
 80026a0:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d104      	bne.n	80026b2 <ip4_output_if_src+0x186>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80026a8:	4b26      	ldr	r3, [pc, #152]	; (8002744 <ip4_output_if_src+0x218>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	60da      	str	r2, [r3, #12]
 80026b0:	e003      	b.n	80026ba <ip4_output_if_src+0x18e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	4413      	add	r3, r2
 80026c4:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	0c1b      	lsrs	r3, r3, #16
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	4413      	add	r3, r2
 80026d0:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	0c1a      	lsrs	r2, r3, #16
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	4413      	add	r3, r2
 80026dc:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	0c1b      	lsrs	r3, r3, #16
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	4413      	add	r3, r2
 80026e6:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	815a      	strh	r2, [r3, #10]
 80026f6:	e00f      	b.n	8002718 <ip4_output_if_src+0x1ec>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	895b      	ldrh	r3, [r3, #10]
 80026fc:	2b13      	cmp	r3, #19
 80026fe:	d802      	bhi.n	8002706 <ip4_output_if_src+0x1da>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8002700:	f06f 0301 	mvn.w	r3, #1
 8002704:	e00f      	b.n	8002726 <ip4_output_if_src+0x1fa>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	617b      	str	r3, [r7, #20]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8002712:	f107 0310 	add.w	r3, r7, #16
 8002716:	607b      	str	r3, [r7, #4]
    return ERR_BUF;
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	68f9      	ldr	r1, [r7, #12]
 8002720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002722:	4798      	blx	r3
 8002724:	4603      	mov	r3, r0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3720      	adds	r7, #32
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	08011b00 	.word	0x08011b00
 8002734:	08011b24 	.word	0x08011b24
 8002738:	08011b30 	.word	0x08011b30
 800273c:	08011b58 	.word	0x08011b58
 8002740:	20000366 	.word	0x20000366
 8002744:	08013d78 	.word	0x08013d78

08002748 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d002      	beq.n	8002764 <ip4_addr_isbroadcast_u32+0x1c>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8002764:	2301      	movs	r3, #1
 8002766:	e02a      	b.n	80027be <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8002776:	2300      	movs	r3, #0
 8002778:	e021      	b.n	80027be <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	3304      	adds	r3, #4
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	429a      	cmp	r2, r3
 8002784:	d101      	bne.n	800278a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8002786:	2300      	movs	r3, #0
 8002788:	e019      	b.n	80027be <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_net_eq(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	3304      	adds	r3, #4
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	405a      	eors	r2, r3
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	3308      	adds	r3, #8
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4013      	ands	r3, r2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10d      	bne.n	80027bc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	3308      	adds	r3, #8
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	43da      	mvns	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	3308      	adds	r3, #8
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d101      	bne.n	80027bc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80027bc:	2300      	movs	r3, #0
  }
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80027d4:	2210      	movs	r2, #16
 80027d6:	4904      	ldr	r1, [pc, #16]	; (80027e8 <ip4addr_ntoa+0x1c>)
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f807 	bl	80027ec <ip4addr_ntoa_r>
 80027de:	4603      	mov	r3, r0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000368 	.word	0x20000368

080027ec <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b08d      	sub	sp, #52	; 0x34
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8002806:	f107 0318 	add.w	r3, r7, #24
 800280a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800280c:	2300      	movs	r3, #0
 800280e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002812:	e059      	b.n	80028c8 <ip4addr_ntoa_r+0xdc>
    i = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	781a      	ldrb	r2, [r3, #0]
 800281e:	4b33      	ldr	r3, [pc, #204]	; (80028ec <ip4addr_ntoa_r+0x100>)
 8002820:	fba3 1302 	umull	r1, r3, r3, r2
 8002824:	08d9      	lsrs	r1, r3, #3
 8002826:	460b      	mov	r3, r1
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8002832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	4a2d      	ldr	r2, [pc, #180]	; (80028ec <ip4addr_ntoa_r+0x100>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	08db      	lsrs	r3, r3, #3
 800283e:	b2da      	uxtb	r2, r3
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8002844:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800284e:	4619      	mov	r1, r3
 8002850:	7ffb      	ldrb	r3, [r7, #31]
 8002852:	3330      	adds	r3, #48	; 0x30
 8002854:	b2da      	uxtb	r2, r3
 8002856:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800285a:	440b      	add	r3, r1
 800285c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1d8      	bne.n	800281a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8002868:	e012      	b.n	8002890 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	623a      	str	r2, [r7, #32]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	4293      	cmp	r3, r2
 8002874:	db01      	blt.n	800287a <ip4addr_ntoa_r+0x8e>
        return NULL;
 8002876:	2300      	movs	r3, #0
 8002878:	e031      	b.n	80028de <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002880:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002884:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002888:	440a      	add	r2, r1
 800288a:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800288e:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8002890:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002894:	1e5a      	subs	r2, r3, #1
 8002896:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1e5      	bne.n	800286a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	623a      	str	r2, [r7, #32]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	4293      	cmp	r3, r2
 80028a8:	db01      	blt.n	80028ae <ip4addr_ntoa_r+0xc2>
      return NULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e017      	b.n	80028de <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028b4:	222e      	movs	r2, #46	; 0x2e
 80028b6:	701a      	strb	r2, [r3, #0]
    ap++;
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	3301      	adds	r3, #1
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80028be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028c2:	3301      	adds	r3, #1
 80028c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80028c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d9a1      	bls.n	8002814 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80028d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d2:	3b01      	subs	r3, #1
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
  return buf;
 80028dc:	68bb      	ldr	r3, [r7, #8]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3734      	adds	r7, #52	; 0x34
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	cccccccd 	.word	0xcccccccd

080028f0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80028fa:	4b05      	ldr	r3, [pc, #20]	; (8002910 <ptr_to_mem+0x20>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	4413      	add	r3, r2
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000378 	.word	0x20000378

08002914 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a05      	ldr	r2, [pc, #20]	; (8002934 <mem_to_ptr+0x20>)
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	b29b      	uxth	r3, r3
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000378 	.word	0x20000378

08002938 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8002940:	4b4f      	ldr	r3, [pc, #316]	; (8002a80 <plug_holes+0x148>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	429a      	cmp	r2, r3
 8002948:	d20b      	bcs.n	8002962 <plug_holes+0x2a>
 800294a:	4b4e      	ldr	r3, [pc, #312]	; (8002a84 <plug_holes+0x14c>)
 800294c:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 8002950:	494d      	ldr	r1, [pc, #308]	; (8002a88 <plug_holes+0x150>)
 8002952:	484e      	ldr	r0, [pc, #312]	; (8002a8c <plug_holes+0x154>)
 8002954:	f00d fdfa 	bl	801054c <iprintf>
 8002958:	2000      	movs	r0, #0
 800295a:	f00d fef9 	bl	8010750 <fflush>
 800295e:	f00d fe3e 	bl	80105de <abort>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8002962:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <plug_holes+0x158>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	429a      	cmp	r2, r3
 800296a:	d30b      	bcc.n	8002984 <plug_holes+0x4c>
 800296c:	4b45      	ldr	r3, [pc, #276]	; (8002a84 <plug_holes+0x14c>)
 800296e:	f240 12d3 	movw	r2, #467	; 0x1d3
 8002972:	4948      	ldr	r1, [pc, #288]	; (8002a94 <plug_holes+0x15c>)
 8002974:	4845      	ldr	r0, [pc, #276]	; (8002a8c <plug_holes+0x154>)
 8002976:	f00d fde9 	bl	801054c <iprintf>
 800297a:	2000      	movs	r0, #0
 800297c:	f00d fee8 	bl	8010750 <fflush>
 8002980:	f00d fe2d 	bl	80105de <abort>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	791b      	ldrb	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00b      	beq.n	80029a4 <plug_holes+0x6c>
 800298c:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <plug_holes+0x14c>)
 800298e:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8002992:	4941      	ldr	r1, [pc, #260]	; (8002a98 <plug_holes+0x160>)
 8002994:	483d      	ldr	r0, [pc, #244]	; (8002a8c <plug_holes+0x154>)
 8002996:	f00d fdd9 	bl	801054c <iprintf>
 800299a:	2000      	movs	r0, #0
 800299c:	f00d fed8 	bl	8010750 <fflush>
 80029a0:	f00d fe1d 	bl	80105de <abort>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80029ac:	d90b      	bls.n	80029c6 <plug_holes+0x8e>
 80029ae:	4b35      	ldr	r3, [pc, #212]	; (8002a84 <plug_holes+0x14c>)
 80029b0:	f240 12d7 	movw	r2, #471	; 0x1d7
 80029b4:	4939      	ldr	r1, [pc, #228]	; (8002a9c <plug_holes+0x164>)
 80029b6:	4835      	ldr	r0, [pc, #212]	; (8002a8c <plug_holes+0x154>)
 80029b8:	f00d fdc8 	bl	801054c <iprintf>
 80029bc:	2000      	movs	r0, #0
 80029be:	f00d fec7 	bl	8010750 <fflush>
 80029c2:	f00d fe0c 	bl	80105de <abort>

  nmem = ptr_to_mem(mem->next);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ff90 	bl	80028f0 <ptr_to_mem>
 80029d0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d024      	beq.n	8002a24 <plug_holes+0xec>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	791b      	ldrb	r3, [r3, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d120      	bne.n	8002a24 <plug_holes+0xec>
 80029e2:	4b2b      	ldr	r3, [pc, #172]	; (8002a90 <plug_holes+0x158>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d01b      	beq.n	8002a24 <plug_holes+0xec>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80029ec:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <plug_holes+0x168>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d102      	bne.n	80029fc <plug_holes+0xc4>
      lfree = mem;
 80029f6:	4a2a      	ldr	r2, [pc, #168]	; (8002aa0 <plug_holes+0x168>)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	881a      	ldrh	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002a0c:	d00a      	beq.n	8002a24 <plug_holes+0xec>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ff6c 	bl	80028f0 <ptr_to_mem>
 8002a18:	4604      	mov	r4, r0
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ff7a 	bl	8002914 <mem_to_ptr>
 8002a20:	4603      	mov	r3, r0
 8002a22:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	885b      	ldrh	r3, [r3, #2]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff61 	bl	80028f0 <ptr_to_mem>
 8002a2e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d01f      	beq.n	8002a78 <plug_holes+0x140>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	791b      	ldrb	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d11b      	bne.n	8002a78 <plug_holes+0x140>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8002a40:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <plug_holes+0x168>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d102      	bne.n	8002a50 <plug_holes+0x118>
      lfree = pmem;
 8002a4a:	4a15      	ldr	r2, [pc, #84]	; (8002aa0 <plug_holes+0x168>)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	881a      	ldrh	r2, [r3, #0]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002a60:	d00a      	beq.n	8002a78 <plug_holes+0x140>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ff42 	bl	80028f0 <ptr_to_mem>
 8002a6c:	4604      	mov	r4, r0
 8002a6e:	68b8      	ldr	r0, [r7, #8]
 8002a70:	f7ff ff50 	bl	8002914 <mem_to_ptr>
 8002a74:	4603      	mov	r3, r0
 8002a76:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd90      	pop	{r4, r7, pc}
 8002a80:	20000378 	.word	0x20000378
 8002a84:	08011b88 	.word	0x08011b88
 8002a88:	08011ba8 	.word	0x08011ba8
 8002a8c:	08011bc0 	.word	0x08011bc0
 8002a90:	2000037c 	.word	0x2000037c
 8002a94:	08011be8 	.word	0x08011be8
 8002a98:	08011c04 	.word	0x08011c04
 8002a9c:	08011c20 	.word	0x08011c20
 8002aa0:	20000384 	.word	0x20000384

08002aa4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <mem_init+0x84>)
 8002aac:	4a1f      	ldr	r2, [pc, #124]	; (8002b2c <mem_init+0x88>)
 8002aae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <mem_init+0x84>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002abc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8002aca:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8002ace:	f7ff ff0f 	bl	80028f0 <ptr_to_mem>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <mem_init+0x8c>)
 8002ad6:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8002ad8:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <mem_init+0x8c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2201      	movs	r2, #1
 8002ade:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8002ae0:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <mem_init+0x8c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002ae8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <mem_init+0x8c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002af2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <mem_init+0x84>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0e      	ldr	r2, [pc, #56]	; (8002b34 <mem_init+0x90>)
 8002afa:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8002afc:	480e      	ldr	r0, [pc, #56]	; (8002b38 <mem_init+0x94>)
 8002afe:	f7fe fdd0 	bl	80016a2 <sys_mutex_new>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00b      	beq.n	8002b20 <mem_init+0x7c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <mem_init+0x98>)
 8002b0a:	f240 2212 	movw	r2, #530	; 0x212
 8002b0e:	490c      	ldr	r1, [pc, #48]	; (8002b40 <mem_init+0x9c>)
 8002b10:	480c      	ldr	r0, [pc, #48]	; (8002b44 <mem_init+0xa0>)
 8002b12:	f00d fd1b 	bl	801054c <iprintf>
 8002b16:	2000      	movs	r0, #0
 8002b18:	f00d fe1a 	bl	8010750 <fflush>
 8002b1c:	f00d fd5f 	bl	80105de <abort>
  }
}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000378 	.word	0x20000378
 8002b2c:	200005a8 	.word	0x200005a8
 8002b30:	2000037c 	.word	0x2000037c
 8002b34:	20000384 	.word	0x20000384
 8002b38:	20000380 	.word	0x20000380
 8002b3c:	08011b88 	.word	0x08011b88
 8002b40:	08011c4c 	.word	0x08011c4c
 8002b44:	08011bc0 	.word	0x08011bc0

08002b48 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff fedf 	bl	8002914 <mem_to_ptr>
 8002b56:	4603      	mov	r3, r0
 8002b58:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fec6 	bl	80028f0 <ptr_to_mem>
 8002b64:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	885b      	ldrh	r3, [r3, #2]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fec0 	bl	80028f0 <ptr_to_mem>
 8002b70:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002b7a:	d818      	bhi.n	8002bae <mem_link_valid+0x66>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	885b      	ldrh	r3, [r3, #2]
 8002b80:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002b84:	d813      	bhi.n	8002bae <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8002b8a:	8afa      	ldrh	r2, [r7, #22]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d004      	beq.n	8002b9a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	8afa      	ldrh	r2, [r7, #22]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d109      	bne.n	8002bae <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <mem_link_valid+0x74>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d006      	beq.n	8002bb2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	885b      	ldrh	r3, [r3, #2]
 8002ba8:	8afa      	ldrh	r2, [r7, #22]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d001      	beq.n	8002bb2 <mem_link_valid+0x6a>
    return 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e000      	b.n	8002bb4 <mem_link_valid+0x6c>
  }
  return 1;
 8002bb2:	2301      	movs	r3, #1
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	2000037c 	.word	0x2000037c

08002bc0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d051      	beq.n	8002c72 <mem_free+0xb2>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3b06      	subs	r3, #6
 8002bd2:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8002bd4:	4b29      	ldr	r3, [pc, #164]	; (8002c7c <mem_free+0xbc>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d306      	bcc.n	8002bec <mem_free+0x2c>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f103 020c 	add.w	r2, r3, #12
 8002be4:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <mem_free+0xc0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d90b      	bls.n	8002c04 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <mem_free+0xc4>)
 8002bee:	f240 2272 	movw	r2, #626	; 0x272
 8002bf2:	4925      	ldr	r1, [pc, #148]	; (8002c88 <mem_free+0xc8>)
 8002bf4:	4825      	ldr	r0, [pc, #148]	; (8002c8c <mem_free+0xcc>)
 8002bf6:	f00d fca9 	bl	801054c <iprintf>
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f00d fda8 	bl	8010750 <fflush>
 8002c00:	f00d fced 	bl	80105de <abort>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8002c04:	4822      	ldr	r0, [pc, #136]	; (8002c90 <mem_free+0xd0>)
 8002c06:	f7fe fd5a 	bl	80016be <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	791b      	ldrb	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10b      	bne.n	8002c2a <mem_free+0x6a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8002c12:	4b1c      	ldr	r3, [pc, #112]	; (8002c84 <mem_free+0xc4>)
 8002c14:	f240 227f 	movw	r2, #639	; 0x27f
 8002c18:	491e      	ldr	r1, [pc, #120]	; (8002c94 <mem_free+0xd4>)
 8002c1a:	481c      	ldr	r0, [pc, #112]	; (8002c8c <mem_free+0xcc>)
 8002c1c:	f00d fc96 	bl	801054c <iprintf>
 8002c20:	2000      	movs	r0, #0
 8002c22:	f00d fd95 	bl	8010750 <fflush>
 8002c26:	f00d fcda 	bl	80105de <abort>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7ff ff8c 	bl	8002b48 <mem_link_valid>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10b      	bne.n	8002c4e <mem_free+0x8e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8002c36:	4b13      	ldr	r3, [pc, #76]	; (8002c84 <mem_free+0xc4>)
 8002c38:	f44f 7222 	mov.w	r2, #648	; 0x288
 8002c3c:	4916      	ldr	r1, [pc, #88]	; (8002c98 <mem_free+0xd8>)
 8002c3e:	4813      	ldr	r0, [pc, #76]	; (8002c8c <mem_free+0xcc>)
 8002c40:	f00d fc84 	bl	801054c <iprintf>
 8002c44:	2000      	movs	r0, #0
 8002c46:	f00d fd83 	bl	8010750 <fflush>
 8002c4a:	f00d fcc8 	bl	80105de <abort>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <mem_free+0xdc>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d202      	bcs.n	8002c64 <mem_free+0xa4>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8002c5e:	4a0f      	ldr	r2, [pc, #60]	; (8002c9c <mem_free+0xdc>)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f7ff fe67 	bl	8002938 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8002c6a:	4809      	ldr	r0, [pc, #36]	; (8002c90 <mem_free+0xd0>)
 8002c6c:	f7fe fd31 	bl	80016d2 <sys_mutex_unlock>
 8002c70:	e000      	b.n	8002c74 <mem_free+0xb4>
    return;
 8002c72:	bf00      	nop
}
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000378 	.word	0x20000378
 8002c80:	2000037c 	.word	0x2000037c
 8002c84:	08011b88 	.word	0x08011b88
 8002c88:	08011c68 	.word	0x08011c68
 8002c8c:	08011bc0 	.word	0x08011bc0
 8002c90:	20000380 	.word	0x20000380
 8002c94:	08011c84 	.word	0x08011c84
 8002c98:	08011cac 	.word	0x08011cac
 8002c9c:	20000384 	.word	0x20000384

08002ca0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8002cac:	887b      	ldrh	r3, [r7, #2]
 8002cae:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8002cb0:	8bfb      	ldrh	r3, [r7, #30]
 8002cb2:	2b0b      	cmp	r3, #11
 8002cb4:	d801      	bhi.n	8002cba <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8002cb6:	230c      	movs	r3, #12
 8002cb8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8002cba:	8bfb      	ldrh	r3, [r7, #30]
 8002cbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002cc0:	d803      	bhi.n	8002cca <mem_trim+0x2a>
 8002cc2:	8bfa      	ldrh	r2, [r7, #30]
 8002cc4:	887b      	ldrh	r3, [r7, #2]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d201      	bcs.n	8002cce <mem_trim+0x2e>
    return NULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e0ec      	b.n	8002ea8 <mem_trim+0x208>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8002cce:	4b78      	ldr	r3, [pc, #480]	; (8002eb0 <mem_trim+0x210>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d304      	bcc.n	8002ce2 <mem_trim+0x42>
 8002cd8:	4b76      	ldr	r3, [pc, #472]	; (8002eb4 <mem_trim+0x214>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d30b      	bcc.n	8002cfa <mem_trim+0x5a>
 8002ce2:	4b75      	ldr	r3, [pc, #468]	; (8002eb8 <mem_trim+0x218>)
 8002ce4:	f240 22c5 	movw	r2, #709	; 0x2c5
 8002ce8:	4974      	ldr	r1, [pc, #464]	; (8002ebc <mem_trim+0x21c>)
 8002cea:	4875      	ldr	r0, [pc, #468]	; (8002ec0 <mem_trim+0x220>)
 8002cec:	f00d fc2e 	bl	801054c <iprintf>
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f00d fd2d 	bl	8010750 <fflush>
 8002cf6:	f00d fc72 	bl	80105de <abort>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8002cfa:	4b6d      	ldr	r3, [pc, #436]	; (8002eb0 <mem_trim+0x210>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d304      	bcc.n	8002d0e <mem_trim+0x6e>
 8002d04:	4b6b      	ldr	r3, [pc, #428]	; (8002eb4 <mem_trim+0x214>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d307      	bcc.n	8002d1e <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8002d0e:	f7fe fd2f 	bl	8001770 <sys_arch_protect>
 8002d12:	60b8      	str	r0, [r7, #8]
 8002d14:	68b8      	ldr	r0, [r7, #8]
 8002d16:	f7fe fd33 	bl	8001780 <sys_arch_unprotect>
    return rmem;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	e0c4      	b.n	8002ea8 <mem_trim+0x208>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3b06      	subs	r3, #6
 8002d22:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8002d24:	69b8      	ldr	r0, [r7, #24]
 8002d26:	f7ff fdf5 	bl	8002914 <mem_to_ptr>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	881a      	ldrh	r2, [r3, #0]
 8002d32:	8afb      	ldrh	r3, [r7, #22]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b06      	subs	r3, #6
 8002d3a:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8002d3c:	8bfa      	ldrh	r2, [r7, #30]
 8002d3e:	8abb      	ldrh	r3, [r7, #20]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d90b      	bls.n	8002d5c <mem_trim+0xbc>
 8002d44:	4b5c      	ldr	r3, [pc, #368]	; (8002eb8 <mem_trim+0x218>)
 8002d46:	f240 22d7 	movw	r2, #727	; 0x2d7
 8002d4a:	495e      	ldr	r1, [pc, #376]	; (8002ec4 <mem_trim+0x224>)
 8002d4c:	485c      	ldr	r0, [pc, #368]	; (8002ec0 <mem_trim+0x220>)
 8002d4e:	f00d fbfd 	bl	801054c <iprintf>
 8002d52:	2000      	movs	r0, #0
 8002d54:	f00d fcfc 	bl	8010750 <fflush>
 8002d58:	f00d fc41 	bl	80105de <abort>
  if (newsize > size) {
 8002d5c:	8bfa      	ldrh	r2, [r7, #30]
 8002d5e:	8abb      	ldrh	r3, [r7, #20]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d901      	bls.n	8002d68 <mem_trim+0xc8>
    /* not supported */
    return NULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	e09f      	b.n	8002ea8 <mem_trim+0x208>
  }
  if (newsize == size) {
 8002d68:	8bfa      	ldrh	r2, [r7, #30]
 8002d6a:	8abb      	ldrh	r3, [r7, #20]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d101      	bne.n	8002d74 <mem_trim+0xd4>
    /* No change in size, simply return */
    return rmem;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	e099      	b.n	8002ea8 <mem_trim+0x208>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8002d74:	4854      	ldr	r0, [pc, #336]	; (8002ec8 <mem_trim+0x228>)
 8002d76:	f7fe fca2 	bl	80016be <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fdb6 	bl	80028f0 <ptr_to_mem>
 8002d84:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	791b      	ldrb	r3, [r3, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d144      	bne.n	8002e18 <mem_trim+0x178>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002d96:	d10b      	bne.n	8002db0 <mem_trim+0x110>
 8002d98:	4b47      	ldr	r3, [pc, #284]	; (8002eb8 <mem_trim+0x218>)
 8002d9a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8002d9e:	494b      	ldr	r1, [pc, #300]	; (8002ecc <mem_trim+0x22c>)
 8002da0:	4847      	ldr	r0, [pc, #284]	; (8002ec0 <mem_trim+0x220>)
 8002da2:	f00d fbd3 	bl	801054c <iprintf>
 8002da6:	2000      	movs	r0, #0
 8002da8:	f00d fcd2 	bl	8010750 <fflush>
 8002dac:	f00d fc17 	bl	80105de <abort>
    /* remember the old next pointer */
    next = mem2->next;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	81fb      	strh	r3, [r7, #14]
    /* create new struct mem which is moved directly after the shrunk mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8002db6:	8afa      	ldrh	r2, [r7, #22]
 8002db8:	8bfb      	ldrh	r3, [r7, #30]
 8002dba:	4413      	add	r3, r2
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3306      	adds	r3, #6
 8002dc0:	81bb      	strh	r3, [r7, #12]
    if (lfree == mem2) {
 8002dc2:	4b43      	ldr	r3, [pc, #268]	; (8002ed0 <mem_trim+0x230>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d106      	bne.n	8002dda <mem_trim+0x13a>
      lfree = ptr_to_mem(ptr2);
 8002dcc:	89bb      	ldrh	r3, [r7, #12]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fd8e 	bl	80028f0 <ptr_to_mem>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b3e      	ldr	r3, [pc, #248]	; (8002ed0 <mem_trim+0x230>)
 8002dd8:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8002dda:	89bb      	ldrh	r3, [r7, #12]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fd87 	bl	80028f0 <ptr_to_mem>
 8002de2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	2200      	movs	r2, #0
 8002de8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	89fa      	ldrh	r2, [r7, #14]
 8002dee:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	8afa      	ldrh	r2, [r7, #22]
 8002df4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	89ba      	ldrh	r2, [r7, #12]
 8002dfa:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002e04:	d04c      	beq.n	8002ea0 <mem_trim+0x200>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fd70 	bl	80028f0 <ptr_to_mem>
 8002e10:	4602      	mov	r2, r0
 8002e12:	89bb      	ldrh	r3, [r7, #12]
 8002e14:	8053      	strh	r3, [r2, #2]
 8002e16:	e043      	b.n	8002ea0 <mem_trim+0x200>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8002e18:	8bfb      	ldrh	r3, [r7, #30]
 8002e1a:	f103 0212 	add.w	r2, r3, #18
 8002e1e:	8abb      	ldrh	r3, [r7, #20]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d83d      	bhi.n	8002ea0 <mem_trim+0x200>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8002e24:	8afa      	ldrh	r2, [r7, #22]
 8002e26:	8bfb      	ldrh	r3, [r7, #30]
 8002e28:	4413      	add	r3, r2
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3306      	adds	r3, #6
 8002e2e:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002e38:	d10b      	bne.n	8002e52 <mem_trim+0x1b2>
 8002e3a:	4b1f      	ldr	r3, [pc, #124]	; (8002eb8 <mem_trim+0x218>)
 8002e3c:	f240 3209 	movw	r2, #777	; 0x309
 8002e40:	4922      	ldr	r1, [pc, #136]	; (8002ecc <mem_trim+0x22c>)
 8002e42:	481f      	ldr	r0, [pc, #124]	; (8002ec0 <mem_trim+0x220>)
 8002e44:	f00d fb82 	bl	801054c <iprintf>
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f00d fc81 	bl	8010750 <fflush>
 8002e4e:	f00d fbc6 	bl	80105de <abort>
    mem2 = ptr_to_mem(ptr2);
 8002e52:	89bb      	ldrh	r3, [r7, #12]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fd4b 	bl	80028f0 <ptr_to_mem>
 8002e5a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8002e5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <mem_trim+0x230>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d202      	bcs.n	8002e6c <mem_trim+0x1cc>
      lfree = mem2;
 8002e66:	4a1a      	ldr	r2, [pc, #104]	; (8002ed0 <mem_trim+0x230>)
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	881a      	ldrh	r2, [r3, #0]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	8afa      	ldrh	r2, [r7, #22]
 8002e7e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	89ba      	ldrh	r2, [r7, #12]
 8002e84:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002e8e:	d007      	beq.n	8002ea0 <mem_trim+0x200>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fd2b 	bl	80028f0 <ptr_to_mem>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	89bb      	ldrh	r3, [r7, #12]
 8002e9e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8002ea0:	4809      	ldr	r0, [pc, #36]	; (8002ec8 <mem_trim+0x228>)
 8002ea2:	f7fe fc16 	bl	80016d2 <sys_mutex_unlock>
  return rmem;
 8002ea6:	687b      	ldr	r3, [r7, #4]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3720      	adds	r7, #32
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20000378 	.word	0x20000378
 8002eb4:	2000037c 	.word	0x2000037c
 8002eb8:	08011b88 	.word	0x08011b88
 8002ebc:	08011ce0 	.word	0x08011ce0
 8002ec0:	08011bc0 	.word	0x08011bc0
 8002ec4:	08011cf8 	.word	0x08011cf8
 8002ec8:	20000380 	.word	0x20000380
 8002ecc:	08011d18 	.word	0x08011d18
 8002ed0:	20000384 	.word	0x20000384

08002ed4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <mem_malloc+0x14>
    return NULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e0d3      	b.n	8003090 <mem_malloc+0x1bc>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8002eec:	8bbb      	ldrh	r3, [r7, #28]
 8002eee:	2b0b      	cmp	r3, #11
 8002ef0:	d801      	bhi.n	8002ef6 <mem_malloc+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8002ef2:	230c      	movs	r3, #12
 8002ef4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8002ef6:	8bbb      	ldrh	r3, [r7, #28]
 8002ef8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002efc:	d803      	bhi.n	8002f06 <mem_malloc+0x32>
 8002efe:	8bba      	ldrh	r2, [r7, #28]
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d201      	bcs.n	8002f0a <mem_malloc+0x36>
    return NULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e0c2      	b.n	8003090 <mem_malloc+0x1bc>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8002f0a:	4863      	ldr	r0, [pc, #396]	; (8003098 <mem_malloc+0x1c4>)
 8002f0c:	f7fe fbd7 	bl	80016be <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8002f10:	4b62      	ldr	r3, [pc, #392]	; (800309c <mem_malloc+0x1c8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fcfd 	bl	8002914 <mem_to_ptr>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	83fb      	strh	r3, [r7, #30]
 8002f1e:	e0ac      	b.n	800307a <mem_malloc+0x1a6>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8002f20:	8bfb      	ldrh	r3, [r7, #30]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fce4 	bl	80028f0 <ptr_to_mem>
 8002f28:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	791b      	ldrb	r3, [r3, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 809c 	bne.w	800306c <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	8bfb      	ldrh	r3, [r7, #30]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	1f9a      	subs	r2, r3, #6
 8002f40:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8002f42:	429a      	cmp	r2, r3
 8002f44:	f0c0 8092 	bcc.w	800306c <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	8bfb      	ldrh	r3, [r7, #30]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	1f9a      	subs	r2, r3, #6
 8002f54:	8bbb      	ldrh	r3, [r7, #28]
 8002f56:	3312      	adds	r3, #18
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d338      	bcc.n	8002fce <mem_malloc+0xfa>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8002f5c:	8bfa      	ldrh	r2, [r7, #30]
 8002f5e:	8bbb      	ldrh	r3, [r7, #28]
 8002f60:	4413      	add	r3, r2
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3306      	adds	r3, #6
 8002f66:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8002f68:	8a7b      	ldrh	r3, [r7, #18]
 8002f6a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002f6e:	d10b      	bne.n	8002f88 <mem_malloc+0xb4>
 8002f70:	4b4b      	ldr	r3, [pc, #300]	; (80030a0 <mem_malloc+0x1cc>)
 8002f72:	f240 327a 	movw	r2, #890	; 0x37a
 8002f76:	494b      	ldr	r1, [pc, #300]	; (80030a4 <mem_malloc+0x1d0>)
 8002f78:	484b      	ldr	r0, [pc, #300]	; (80030a8 <mem_malloc+0x1d4>)
 8002f7a:	f00d fae7 	bl	801054c <iprintf>
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f00d fbe6 	bl	8010750 <fflush>
 8002f84:	f00d fb2b 	bl	80105de <abort>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8002f88:	8a7b      	ldrh	r3, [r7, #18]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fcb0 	bl	80028f0 <ptr_to_mem>
 8002f90:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	881a      	ldrh	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8bfa      	ldrh	r2, [r7, #30]
 8002fa4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	8a7a      	ldrh	r2, [r7, #18]
 8002faa:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002fba:	d00b      	beq.n	8002fd4 <mem_malloc+0x100>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fc95 	bl	80028f0 <ptr_to_mem>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	8a7b      	ldrh	r3, [r7, #18]
 8002fca:	8053      	strh	r3, [r2, #2]
 8002fcc:	e002      	b.n	8002fd4 <mem_malloc+0x100>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8002fd4:	4b31      	ldr	r3, [pc, #196]	; (800309c <mem_malloc+0x1c8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d12c      	bne.n	8003038 <mem_malloc+0x164>
          struct mem *cur = lfree;
 8002fde:	4b2f      	ldr	r3, [pc, #188]	; (800309c <mem_malloc+0x1c8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8002fe4:	e005      	b.n	8002ff2 <mem_malloc+0x11e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fc80 	bl	80028f0 <ptr_to_mem>
 8002ff0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	791b      	ldrb	r3, [r3, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d004      	beq.n	8003004 <mem_malloc+0x130>
 8002ffa:	4b2c      	ldr	r3, [pc, #176]	; (80030ac <mem_malloc+0x1d8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	429a      	cmp	r2, r3
 8003002:	d1f0      	bne.n	8002fe6 <mem_malloc+0x112>
          }
          lfree = cur;
 8003004:	4a25      	ldr	r2, [pc, #148]	; (800309c <mem_malloc+0x1c8>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800300a:	4b24      	ldr	r3, [pc, #144]	; (800309c <mem_malloc+0x1c8>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4b27      	ldr	r3, [pc, #156]	; (80030ac <mem_malloc+0x1d8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d010      	beq.n	8003038 <mem_malloc+0x164>
 8003016:	4b21      	ldr	r3, [pc, #132]	; (800309c <mem_malloc+0x1c8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	791b      	ldrb	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00b      	beq.n	8003038 <mem_malloc+0x164>
 8003020:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <mem_malloc+0x1cc>)
 8003022:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8003026:	4922      	ldr	r1, [pc, #136]	; (80030b0 <mem_malloc+0x1dc>)
 8003028:	481f      	ldr	r0, [pc, #124]	; (80030a8 <mem_malloc+0x1d4>)
 800302a:	f00d fa8f 	bl	801054c <iprintf>
 800302e:	2000      	movs	r0, #0
 8003030:	f00d fb8e 	bl	8010750 <fflush>
 8003034:	f00d fad3 	bl	80105de <abort>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8003038:	4817      	ldr	r0, [pc, #92]	; (8003098 <mem_malloc+0x1c4>)
 800303a:	f7fe fb4a 	bl	80016d2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800303e:	8bba      	ldrh	r2, [r7, #28]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	4413      	add	r3, r2
 8003044:	3306      	adds	r3, #6
 8003046:	4a19      	ldr	r2, [pc, #100]	; (80030ac <mem_malloc+0x1d8>)
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	4293      	cmp	r3, r2
 800304c:	d90b      	bls.n	8003066 <mem_malloc+0x192>
 800304e:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <mem_malloc+0x1cc>)
 8003050:	f240 32ad 	movw	r2, #941	; 0x3ad
 8003054:	4917      	ldr	r1, [pc, #92]	; (80030b4 <mem_malloc+0x1e0>)
 8003056:	4814      	ldr	r0, [pc, #80]	; (80030a8 <mem_malloc+0x1d4>)
 8003058:	f00d fa78 	bl	801054c <iprintf>
 800305c:	2000      	movs	r0, #0
 800305e:	f00d fb77 	bl	8010750 <fflush>
 8003062:	f00d fabc 	bl	80105de <abort>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	3306      	adds	r3, #6
 800306a:	e011      	b.n	8003090 <mem_malloc+0x1bc>
         ptr = ptr_to_mem(ptr)->next) {
 800306c:	8bfb      	ldrh	r3, [r7, #30]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fc3e 	bl	80028f0 <ptr_to_mem>
 8003074:	4603      	mov	r3, r0
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800307a:	8bfa      	ldrh	r2, [r7, #30]
 800307c:	8bbb      	ldrh	r3, [r7, #28]
 800307e:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8003082:	429a      	cmp	r2, r3
 8003084:	f4ff af4c 	bcc.w	8002f20 <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8003088:	4803      	ldr	r0, [pc, #12]	; (8003098 <mem_malloc+0x1c4>)
 800308a:	f7fe fb22 	bl	80016d2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3720      	adds	r7, #32
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000380 	.word	0x20000380
 800309c:	20000384 	.word	0x20000384
 80030a0:	08011b88 	.word	0x08011b88
 80030a4:	08011d18 	.word	0x08011d18
 80030a8:	08011bc0 	.word	0x08011bc0
 80030ac:	2000037c 	.word	0x2000037c
 80030b0:	08011d2c 	.word	0x08011d2c
 80030b4:	08011d48 	.word	0x08011d48

080030b8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	e011      	b.n	80030f8 <memp_init_pool+0x40>
    memp->next = *desc->tab;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	889b      	ldrh	r3, [r3, #4]
 80030ea:	461a      	mov	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	4413      	add	r3, r2
 80030f0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	3301      	adds	r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	88db      	ldrh	r3, [r3, #6]
 80030fc:	461a      	mov	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	429a      	cmp	r2, r3
 8003102:	dce7      	bgt.n	80030d4 <memp_init_pool+0x1c>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003116:	2300      	movs	r3, #0
 8003118:	80fb      	strh	r3, [r7, #6]
 800311a:	e009      	b.n	8003130 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800311c:	88fb      	ldrh	r3, [r7, #6]
 800311e:	4a08      	ldr	r2, [pc, #32]	; (8003140 <memp_init+0x30>)
 8003120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ffc7 	bl	80030b8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	3301      	adds	r3, #1
 800312e:	80fb      	strh	r3, [r7, #6]
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	2b09      	cmp	r3, #9
 8003134:	d9f2      	bls.n	800311c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	08013e20 	.word	0x08013e20

08003144 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800314c:	f7fe fb10 	bl	8001770 <sys_arch_protect>
 8003150:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d009      	beq.n	8003174 <do_memp_malloc_pool+0x30>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	601a      	str	r2, [r3, #0]
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f7fe fb08 	bl	8001780 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	e003      	b.n	800317c <do_memp_malloc_pool+0x38>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f7fe fb03 	bl	8001780 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10b      	bne.n	80031aa <memp_malloc_pool+0x26>
 8003192:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <memp_malloc_pool+0x40>)
 8003194:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8003198:	490b      	ldr	r1, [pc, #44]	; (80031c8 <memp_malloc_pool+0x44>)
 800319a:	480c      	ldr	r0, [pc, #48]	; (80031cc <memp_malloc_pool+0x48>)
 800319c:	f00d f9d6 	bl	801054c <iprintf>
 80031a0:	2000      	movs	r0, #0
 80031a2:	f00d fad5 	bl	8010750 <fflush>
 80031a6:	f00d fa1a 	bl	80105de <abort>
  if (desc == NULL) {
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <memp_malloc_pool+0x30>
    return NULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e003      	b.n	80031bc <memp_malloc_pool+0x38>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff ffc5 	bl	8003144 <do_memp_malloc_pool>
 80031ba:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	08011df0 	.word	0x08011df0
 80031c8:	08011e10 	.word	0x08011e10
 80031cc:	08011e24 	.word	0x08011e24

080031d0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	2b09      	cmp	r3, #9
 80031de:	d908      	bls.n	80031f2 <memp_malloc+0x22>
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <memp_malloc+0x3c>)
 80031e2:	f240 1257 	movw	r2, #343	; 0x157
 80031e6:	490a      	ldr	r1, [pc, #40]	; (8003210 <memp_malloc+0x40>)
 80031e8:	480a      	ldr	r0, [pc, #40]	; (8003214 <memp_malloc+0x44>)
 80031ea:	f7fe fa88 	bl	80016fe <lwip_win32_platform_diag>
 80031ee:	2300      	movs	r3, #0
 80031f0:	e008      	b.n	8003204 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	4a08      	ldr	r2, [pc, #32]	; (8003218 <memp_malloc+0x48>)
 80031f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ffa2 	bl	8003144 <do_memp_malloc_pool>
 8003200:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8003202:	68fb      	ldr	r3, [r7, #12]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	08011df0 	.word	0x08011df0
 8003210:	08011e4c 	.word	0x08011e4c
 8003214:	08011e24 	.word	0x08011e24
 8003218:	08013e20 	.word	0x08013e20

0800321c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800322a:	f7fe faa1 	bl	8001770 <sys_arch_protect>
 800322e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8003242:	68b8      	ldr	r0, [r7, #8]
 8003244:	f7fe fa9c 	bl	8001780 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10b      	bne.n	8003278 <memp_free_pool+0x28>
 8003260:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <memp_free_pool+0x48>)
 8003262:	f240 1295 	movw	r2, #405	; 0x195
 8003266:	490d      	ldr	r1, [pc, #52]	; (800329c <memp_free_pool+0x4c>)
 8003268:	480d      	ldr	r0, [pc, #52]	; (80032a0 <memp_free_pool+0x50>)
 800326a:	f00d f96f 	bl	801054c <iprintf>
 800326e:	2000      	movs	r0, #0
 8003270:	f00d fa6e 	bl	8010750 <fflush>
 8003274:	f00d f9b3 	bl	80105de <abort>
  if ((desc == NULL) || (mem == NULL)) {
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d007      	beq.n	800328e <memp_free_pool+0x3e>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d004      	beq.n	800328e <memp_free_pool+0x3e>
    return;
  }

  do_memp_free_pool(desc, mem);
 8003284:	6839      	ldr	r1, [r7, #0]
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff ffc8 	bl	800321c <do_memp_free_pool>
 800328c:	e000      	b.n	8003290 <memp_free_pool+0x40>
    return;
 800328e:	bf00      	nop
}
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	08011df0 	.word	0x08011df0
 800329c:	08011e10 	.word	0x08011e10
 80032a0:	08011e24 	.word	0x08011e24

080032a4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	6039      	str	r1, [r7, #0]
 80032ae:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	2b09      	cmp	r3, #9
 80032b4:	d907      	bls.n	80032c6 <memp_free+0x22>
 80032b6:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <memp_free+0x44>)
 80032b8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80032bc:	490b      	ldr	r1, [pc, #44]	; (80032ec <memp_free+0x48>)
 80032be:	480c      	ldr	r0, [pc, #48]	; (80032f0 <memp_free+0x4c>)
 80032c0:	f7fe fa1d 	bl	80016fe <lwip_win32_platform_diag>
 80032c4:	e00c      	b.n	80032e0 <memp_free+0x3c>

  if (mem == NULL) {
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <memp_free+0x50>)
 80032d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d4:	6839      	ldr	r1, [r7, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff ffa0 	bl	800321c <do_memp_free_pool>
 80032dc:	e000      	b.n	80032e0 <memp_free+0x3c>
    return;
 80032de:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	08011df0 	.word	0x08011df0
 80032ec:	08011e6c 	.word	0x08011e6c
 80032f0:	08011e24 	.word	0x08011e24
 80032f4:	08013e20 	.word	0x08013e20

080032f8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d108      	bne.n	800332e <netif_add+0x26>
 800331c:	4b5b      	ldr	r3, [pc, #364]	; (800348c <netif_add+0x184>)
 800331e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8003322:	495b      	ldr	r1, [pc, #364]	; (8003490 <netif_add+0x188>)
 8003324:	485b      	ldr	r0, [pc, #364]	; (8003494 <netif_add+0x18c>)
 8003326:	f7fe f9ea 	bl	80016fe <lwip_win32_platform_diag>
 800332a:	2300      	movs	r3, #0
 800332c:	e0a9      	b.n	8003482 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	2b00      	cmp	r3, #0
 8003332:	d108      	bne.n	8003346 <netif_add+0x3e>
 8003334:	4b55      	ldr	r3, [pc, #340]	; (800348c <netif_add+0x184>)
 8003336:	f240 1233 	movw	r2, #307	; 0x133
 800333a:	4957      	ldr	r1, [pc, #348]	; (8003498 <netif_add+0x190>)
 800333c:	4855      	ldr	r0, [pc, #340]	; (8003494 <netif_add+0x18c>)
 800333e:	f7fe f9de 	bl	80016fe <lwip_win32_platform_diag>
 8003342:	2300      	movs	r3, #0
 8003344:	e09d      	b.n	8003482 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800334c:	4b53      	ldr	r3, [pc, #332]	; (800349c <netif_add+0x194>)
 800334e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8003356:	4b51      	ldr	r3, [pc, #324]	; (800349c <netif_add+0x194>)
 8003358:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8003360:	4b4e      	ldr	r3, [pc, #312]	; (800349c <netif_add+0x194>)
 8003362:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4a49      	ldr	r2, [pc, #292]	; (80034a0 <netif_add+0x198>)
 800337a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */

  /* remember netif specific state information data */
  netif->state = state;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a3a      	ldr	r2, [r7, #32]
 800338e:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8003390:	4b44      	ldr	r3, [pc, #272]	; (80034a4 <netif_add+0x19c>)
 8003392:	781a      	ldrb	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800339e:	611a      	str	r2, [r3, #16]
  netif->reschedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
#endif /* ENABLE_LOOPBACK */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f924 	bl	80035f4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	4798      	blx	r3
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <netif_add+0xb4>
    return NULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e062      	b.n	8003482 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80033c2:	2bff      	cmp	r3, #255	; 0xff
 80033c4:	d103      	bne.n	80033ce <netif_add+0xc6>
        netif->num = 0;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80033d2:	4b35      	ldr	r3, [pc, #212]	; (80034a8 <netif_add+0x1a0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	e035      	b.n	8003446 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d10b      	bne.n	80033fa <netif_add+0xf2>
 80033e2:	4b2a      	ldr	r3, [pc, #168]	; (800348c <netif_add+0x184>)
 80033e4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80033e8:	4930      	ldr	r1, [pc, #192]	; (80034ac <netif_add+0x1a4>)
 80033ea:	482a      	ldr	r0, [pc, #168]	; (8003494 <netif_add+0x18c>)
 80033ec:	f00d f8ae 	bl	801054c <iprintf>
 80033f0:	2000      	movs	r0, #0
 80033f2:	f00d f9ad 	bl	8010750 <fflush>
 80033f6:	f00d f8f2 	bl	80105de <abort>
        num_netifs++;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	3301      	adds	r3, #1
 80033fe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	2bff      	cmp	r3, #255	; 0xff
 8003404:	dd0b      	ble.n	800341e <netif_add+0x116>
 8003406:	4b21      	ldr	r3, [pc, #132]	; (800348c <netif_add+0x184>)
 8003408:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800340c:	4928      	ldr	r1, [pc, #160]	; (80034b0 <netif_add+0x1a8>)
 800340e:	4821      	ldr	r0, [pc, #132]	; (8003494 <netif_add+0x18c>)
 8003410:	f00d f89c 	bl	801054c <iprintf>
 8003414:	2000      	movs	r0, #0
 8003416:	f00d f99b 	bl	8010750 <fflush>
 800341a:	f00d f8e0 	bl	80105de <abort>
        if (netif2->num == netif->num) {
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800342a:	429a      	cmp	r2, r3
 800342c:	d108      	bne.n	8003440 <netif_add+0x138>
          netif->num++;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003434:	3301      	adds	r3, #1
 8003436:	b2da      	uxtb	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 800343e:	e005      	b.n	800344c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1c6      	bne.n	80033da <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1b4      	bne.n	80033bc <netif_add+0xb4>
  }
  if (netif->num == 254) {
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003458:	2bfe      	cmp	r3, #254	; 0xfe
 800345a:	d103      	bne.n	8003464 <netif_add+0x15c>
    netif_num = 0;
 800345c:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <netif_add+0x19c>)
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	e006      	b.n	8003472 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800346a:	3301      	adds	r3, #1
 800346c:	b2da      	uxtb	r2, r3
 800346e:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <netif_add+0x19c>)
 8003470:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8003472:	4b0d      	ldr	r3, [pc, #52]	; (80034a8 <netif_add+0x1a0>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800347a:	4a0b      	ldr	r2, [pc, #44]	; (80034a8 <netif_add+0x1a0>)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8003480:	68fb      	ldr	r3, [r7, #12]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	08011e88 	.word	0x08011e88
 8003490:	08011f08 	.word	0x08011f08
 8003494:	08011ec4 	.word	0x08011ec4
 8003498:	08011f24 	.word	0x08011f24
 800349c:	08013d78 	.word	0x08013d78
 80034a0:	0800380d 	.word	0x0800380d
 80034a4:	200003b0 	.word	0x200003b0
 80034a8:	200015bc 	.word	0x200015bc
 80034ac:	08011f48 	.word	0x08011f48
 80034b0:	08011f5c 	.word	0x08011f5c

080034b4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80034be:	6839      	ldr	r1, [r7, #0]
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f002 fc13 	bl	8005cec <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10b      	bne.n	80034fa <netif_do_set_ipaddr+0x2a>
 80034e2:	4b22      	ldr	r3, [pc, #136]	; (800356c <netif_do_set_ipaddr+0x9c>)
 80034e4:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 80034e8:	4921      	ldr	r1, [pc, #132]	; (8003570 <netif_do_set_ipaddr+0xa0>)
 80034ea:	4822      	ldr	r0, [pc, #136]	; (8003574 <netif_do_set_ipaddr+0xa4>)
 80034ec:	f00d f82e 	bl	801054c <iprintf>
 80034f0:	2000      	movs	r0, #0
 80034f2:	f00d f92d 	bl	8010750 <fflush>
 80034f6:	f00d f872 	bl	80105de <abort>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10b      	bne.n	8003518 <netif_do_set_ipaddr+0x48>
 8003500:	4b1a      	ldr	r3, [pc, #104]	; (800356c <netif_do_set_ipaddr+0x9c>)
 8003502:	f240 12dd 	movw	r2, #477	; 0x1dd
 8003506:	491a      	ldr	r1, [pc, #104]	; (8003570 <netif_do_set_ipaddr+0xa0>)
 8003508:	481a      	ldr	r0, [pc, #104]	; (8003574 <netif_do_set_ipaddr+0xa4>)
 800350a:	f00d f81f 	bl	801054c <iprintf>
 800350e:	2000      	movs	r0, #0
 8003510:	f00d f91e 	bl	8010750 <fflush>
 8003514:	f00d f863 	bl	80105de <abort>

  /* address is actually being changed? */
  if (ip4_addr_eq(ipaddr, netif_ip4_addr(netif)) == 0) {
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	3304      	adds	r3, #4
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d01c      	beq.n	8003560 <netif_do_set_ipaddr+0x90>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3304      	adds	r3, #4
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8003536:	f107 0314 	add.w	r3, r7, #20
 800353a:	4619      	mov	r1, r3
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ffb9 	bl	80034b4 <netif_do_ip_addr_changed>
#endif /* LWIP_ACD */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <netif_do_set_ipaddr+0x7e>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	e000      	b.n	8003550 <netif_do_set_ipaddr+0x80>
 800354e:	2300      	movs	r3, #0
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8003554:	2101      	movs	r1, #1
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f8d2 	bl	8003700 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <netif_do_set_ipaddr+0x92>
  }
  return 0; /* address unchanged */
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	08011e88 	.word	0x08011e88
 8003570:	08011f8c 	.word	0x08011f8c
 8003574:	08011ec4 	.word	0x08011ec4

08003578 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(netmask, netif_ip4_netmask(netif)) == 0) {
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	3308      	adds	r3, #8
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d00a      	beq.n	80035a8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <netif_do_set_netmask+0x26>
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	e000      	b.n	80035a0 <netif_do_set_netmask+0x28>
 800359e:	2300      	movs	r3, #0
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b085      	sub	sp, #20
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(gw, netif_ip4_gw(netif)) == 0) {
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	330c      	adds	r3, #12
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d00a      	beq.n	80035e6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <netif_do_set_gw+0x26>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	e000      	b.n	80035de <netif_do_set_gw+0x28>
 80035dc:	2300      	movs	r3, #0
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8003606:	2300      	movs	r3, #0
 8003608:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8003610:	4b1c      	ldr	r3, [pc, #112]	; (8003684 <netif_set_addr+0x90>)
 8003612:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800361a:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <netif_set_addr+0x90>)
 800361c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8003624:	4b17      	ldr	r3, [pc, #92]	; (8003684 <netif_set_addr+0x90>)
 8003626:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <netif_set_addr+0x42>
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <netif_set_addr+0x46>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <netif_set_addr+0x48>
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d006      	beq.n	8003652 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8003644:	f107 0310 	add.w	r3, r7, #16
 8003648:	461a      	mov	r2, r3
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f7ff ff3f 	bl	80034d0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f7ff ff8e 	bl	8003578 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	6839      	ldr	r1, [r7, #0]
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f7ff ffa8 	bl	80035b6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d106      	bne.n	800367a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800366c:	f107 0310 	add.w	r3, r7, #16
 8003670:	461a      	mov	r2, r3
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f7ff ff2b 	bl	80034d0 <netif_do_set_ipaddr>
  }
  if (change_reason != LWIP_NSC_NONE) {
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800367a:	bf00      	nop
 800367c:	3720      	adds	r7, #32
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	08013d78 	.word	0x08013d78

08003688 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8003690:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <netif_set_default+0x1c>)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	200015c0 	.word	0x200015c0

080036a8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d107      	bne.n	80036c6 <netif_set_up+0x1e>
 80036b6:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <netif_set_up+0x4c>)
 80036b8:	f240 326b 	movw	r2, #875	; 0x36b
 80036bc:	490e      	ldr	r1, [pc, #56]	; (80036f8 <netif_set_up+0x50>)
 80036be:	480f      	ldr	r0, [pc, #60]	; (80036fc <netif_set_up+0x54>)
 80036c0:	f7fe f81d 	bl	80016fe <lwip_win32_platform_diag>
 80036c4:	e013      	b.n	80036ee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10c      	bne.n	80036ee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80036e6:	2103      	movs	r1, #3
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f809 	bl	8003700 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	08011e88 	.word	0x08011e88
 80036f8:	08011ffc 	.word	0x08011ffc
 80036fc:	08011ec4 	.word	0x08011ec4

08003700 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10b      	bne.n	800372a <netif_issue_reports+0x2a>
 8003712:	4b11      	ldr	r3, [pc, #68]	; (8003758 <netif_issue_reports+0x58>)
 8003714:	f44f 7262 	mov.w	r2, #904	; 0x388
 8003718:	4910      	ldr	r1, [pc, #64]	; (800375c <netif_issue_reports+0x5c>)
 800371a:	4811      	ldr	r0, [pc, #68]	; (8003760 <netif_issue_reports+0x60>)
 800371c:	f00c ff16 	bl	801054c <iprintf>
 8003720:	2000      	movs	r0, #0
 8003722:	f00d f815 	bl	8010750 <fflush>
 8003726:	f00c ff5a 	bl	80105de <abort>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00b      	beq.n	8003750 <netif_issue_reports+0x50>
      !(netif->flags & NETIF_FLAG_UP)) {
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800373e:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8003742:	2b00      	cmp	r3, #0
 8003744:	d004      	beq.n	8003750 <netif_issue_reports+0x50>
    return;
  }
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003746:	78fb      	ldrb	r3, [r7, #3]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	e000      	b.n	8003752 <netif_issue_reports+0x52>
    return;
 8003750:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	08011e88 	.word	0x08011e88
 800375c:	08012018 	.word	0x08012018
 8003760:	08011ec4 	.word	0x08011ec4

08003764 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d107      	bne.n	8003782 <netif_set_link_up+0x1e>
 8003772:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <netif_set_link_up+0x4c>)
 8003774:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8003778:	490e      	ldr	r1, [pc, #56]	; (80037b4 <netif_set_link_up+0x50>)
 800377a:	480f      	ldr	r0, [pc, #60]	; (80037b8 <netif_set_link_up+0x54>)
 800377c:	f7fd ffbf 	bl	80016fe <lwip_win32_platform_diag>
 8003780:	e013      	b.n	80037aa <netif_set_link_up+0x46>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10c      	bne.n	80037aa <netif_set_link_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003796:	f043 0304 	orr.w	r3, r3, #4
 800379a:	b2da      	uxtb	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

#if LWIP_AUTOIP
    autoip_network_changed_link_up(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80037a2:	2103      	movs	r1, #3
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ffab 	bl	8003700 <netif_issue_reports>
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	08011e88 	.word	0x08011e88
 80037b4:	0801205c 	.word	0x0801205c
 80037b8:	08011ec4 	.word	0x08011ec4

080037bc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d107      	bne.n	80037da <netif_set_link_down+0x1e>
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <netif_set_link_down+0x44>)
 80037cc:	f240 4223 	movw	r2, #1059	; 0x423
 80037d0:	490c      	ldr	r1, [pc, #48]	; (8003804 <netif_set_link_down+0x48>)
 80037d2:	480d      	ldr	r0, [pc, #52]	; (8003808 <netif_set_link_down+0x4c>)
 80037d4:	f7fd ff93 	bl	80016fe <lwip_win32_platform_diag>
 80037d8:	e00f      	b.n	80037fa <netif_set_link_down+0x3e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <netif_set_link_down+0x3e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80037ee:	f023 0304 	bic.w	r3, r3, #4
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	08011e88 	.word	0x08011e88
 8003804:	08012080 	.word	0x08012080
 8003808:	08011ec4 	.word	0x08011ec4

0800380c <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8003818:	f06f 030b 	mvn.w	r3, #11
}
 800381c:	4618      	mov	r0, r3
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <netif_get_by_index+0x48>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	e00c      	b.n	800385a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003846:	3301      	adds	r3, #1
 8003848:	b2db      	uxtb	r3, r3
 800384a:	79fa      	ldrb	r2, [r7, #7]
 800384c:	429a      	cmp	r2, r3
 800384e:	d101      	bne.n	8003854 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	e006      	b.n	8003862 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1ef      	bne.n	8003840 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	200015bc 	.word	0x200015bc

08003874 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800387a:	f7fd ff79 	bl	8001770 <sys_arch_protect>
 800387e:	6038      	str	r0, [r7, #0]
 8003880:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <pbuf_free_ooseq+0x44>)
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	6838      	ldr	r0, [r7, #0]
 8003888:	f7fd ff7a 	bl	8001780 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800388c:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <pbuf_free_ooseq+0x48>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	e00a      	b.n	80038aa <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f002 fa63 	bl	8005d68 <tcp_free_ooseq>
      return;
 80038a2:	e005      	b.n	80038b0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	607b      	str	r3, [r7, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f1      	bne.n	8003894 <pbuf_free_ooseq+0x20>
    }
  }
}
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	200015c4 	.word	0x200015c4
 80038bc:	200015cc 	.word	0x200015cc

080038c0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80038c8:	f7ff ffd4 	bl	8003874 <pbuf_free_ooseq>
}
 80038cc:	bf00      	nop
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80038da:	f7fd ff49 	bl	8001770 <sys_arch_protect>
 80038de:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80038e0:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <pbuf_pool_is_empty+0x4c>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <pbuf_pool_is_empty+0x4c>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7fd ff47 	bl	8001780 <sys_arch_unprotect>

  if (!queued) {
 80038f2:	78fb      	ldrb	r3, [r7, #3]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10f      	bne.n	8003918 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80038f8:	2100      	movs	r1, #0
 80038fa:	480a      	ldr	r0, [pc, #40]	; (8003924 <pbuf_pool_is_empty+0x50>)
 80038fc:	f7fe f882 	bl	8001a04 <tcpip_try_callback>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d008      	beq.n	8003918 <pbuf_pool_is_empty+0x44>
 8003906:	f7fd ff33 	bl	8001770 <sys_arch_protect>
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	4b04      	ldr	r3, [pc, #16]	; (8003920 <pbuf_pool_is_empty+0x4c>)
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fd ff34 	bl	8001780 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8003918:	bf00      	nop
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	200015c4 	.word	0x200015c4
 8003924:	080038c1 	.word	0x080038c1

08003928 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	4611      	mov	r1, r2
 8003934:	461a      	mov	r2, r3
 8003936:	460b      	mov	r3, r1
 8003938:	80fb      	strh	r3, [r7, #6]
 800393a:	4613      	mov	r3, r2
 800393c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	88fa      	ldrh	r2, [r7, #6]
 800394e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	88ba      	ldrh	r2, [r7, #4]
 8003954:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8003956:	8b3b      	ldrh	r3, [r7, #24]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	7f3a      	ldrb	r2, [r7, #28]
 8003962:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	73da      	strb	r2, [r3, #15]

  LWIP_PBUF_CUSTOM_DATA_INIT(p);
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08c      	sub	sp, #48	; 0x30
 8003980:	af02      	add	r7, sp, #8
 8003982:	4603      	mov	r3, r0
 8003984:	71fb      	strb	r3, [r7, #7]
 8003986:	460b      	mov	r3, r1
 8003988:	80bb      	strh	r3, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8003992:	887b      	ldrh	r3, [r7, #2]
 8003994:	2b41      	cmp	r3, #65	; 0x41
 8003996:	d00b      	beq.n	80039b0 <pbuf_alloc+0x34>
 8003998:	2b41      	cmp	r3, #65	; 0x41
 800399a:	dc02      	bgt.n	80039a2 <pbuf_alloc+0x26>
 800399c:	2b01      	cmp	r3, #1
 800399e:	d007      	beq.n	80039b0 <pbuf_alloc+0x34>
 80039a0:	e08b      	b.n	8003aba <pbuf_alloc+0x13e>
 80039a2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80039a6:	d00b      	beq.n	80039c0 <pbuf_alloc+0x44>
 80039a8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80039ac:	d05b      	beq.n	8003a66 <pbuf_alloc+0xea>
 80039ae:	e084      	b.n	8003aba <pbuf_alloc+0x13e>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80039b0:	887a      	ldrh	r2, [r7, #2]
 80039b2:	88bb      	ldrh	r3, [r7, #4]
 80039b4:	4619      	mov	r1, r3
 80039b6:	2000      	movs	r0, #0
 80039b8:	f000 f898 	bl	8003aec <pbuf_alloc_reference>
 80039bc:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80039be:	e088      	b.n	8003ad2 <pbuf_alloc+0x156>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80039c8:	88bb      	ldrh	r3, [r7, #4]
 80039ca:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80039cc:	2009      	movs	r0, #9
 80039ce:	f7ff fbff 	bl	80031d0 <memp_malloc>
 80039d2:	6178      	str	r0, [r7, #20]
        if (q == NULL) {
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 80039da:	f7ff ff7b 	bl	80038d4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <pbuf_alloc+0x6e>
            pbuf_free(p);
 80039e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039e6:	f000 fa67 	bl	8003eb8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e072      	b.n	8003ad4 <pbuf_alloc+0x158>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80039ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039f0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	8b7b      	ldrh	r3, [r7, #26]
 80039f8:	4293      	cmp	r3, r2
 80039fa:	bf28      	it	cs
 80039fc:	4613      	movcs	r3, r2
 80039fe:	827b      	strh	r3, [r7, #18]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8003a00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a02:	3310      	adds	r3, #16
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	18d1      	adds	r1, r2, r3
 8003a08:	8a78      	ldrh	r0, [r7, #18]
 8003a0a:	8b7a      	ldrh	r2, [r7, #26]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	9301      	str	r3, [sp, #4]
 8003a10:	887b      	ldrh	r3, [r7, #2]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	4603      	mov	r3, r0
 8003a16:	6978      	ldr	r0, [r7, #20]
 8003a18:	f7ff ff86 	bl	8003928 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8003a1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a22:	d10b      	bne.n	8003a3c <pbuf_alloc+0xc0>
 8003a24:	4b2d      	ldr	r3, [pc, #180]	; (8003adc <pbuf_alloc+0x160>)
 8003a26:	f240 1205 	movw	r2, #261	; 0x105
 8003a2a:	492d      	ldr	r1, [pc, #180]	; (8003ae0 <pbuf_alloc+0x164>)
 8003a2c:	482d      	ldr	r0, [pc, #180]	; (8003ae4 <pbuf_alloc+0x168>)
 8003a2e:	f00c fd8d 	bl	801054c <iprintf>
 8003a32:	2000      	movs	r0, #0
 8003a34:	f00c fe8c 	bl	8010750 <fflush>
 8003a38:	f00c fdd1 	bl	80105de <abort>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d102      	bne.n	8003a48 <pbuf_alloc+0xcc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
 8003a46:	e002      	b.n	8003a4e <pbuf_alloc+0xd2>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8003a52:	8b7a      	ldrh	r2, [r7, #26]
 8003a54:	8a7b      	ldrh	r3, [r7, #18]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8003a5e:	8b7b      	ldrh	r3, [r7, #26]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1b3      	bne.n	80039cc <pbuf_alloc+0x50>
      break;
 8003a64:	e035      	b.n	8003ad2 <pbuf_alloc+0x156>
    }
    case PBUF_RAM: {
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8003a66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003a68:	88bb      	ldrh	r3, [r7, #4]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	823b      	strh	r3, [r7, #16]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8003a6e:	8a3b      	ldrh	r3, [r7, #16]
 8003a70:	3310      	adds	r3, #16
 8003a72:	81fb      	strh	r3, [r7, #14]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8003a74:	8a3a      	ldrh	r2, [r7, #16]
 8003a76:	88bb      	ldrh	r3, [r7, #4]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d303      	bcc.n	8003a84 <pbuf_alloc+0x108>
 8003a7c:	89fa      	ldrh	r2, [r7, #14]
 8003a7e:	88bb      	ldrh	r3, [r7, #4]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d201      	bcs.n	8003a88 <pbuf_alloc+0x10c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
        return NULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	e025      	b.n	8003ad4 <pbuf_alloc+0x158>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8003a88:	89fb      	ldrh	r3, [r7, #14]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fa22 	bl	8002ed4 <mem_malloc>
 8003a90:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <pbuf_alloc+0x120>
        return NULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e01b      	b.n	8003ad4 <pbuf_alloc+0x158>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8003a9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a9e:	3310      	adds	r3, #16
 8003aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa2:	18d1      	adds	r1, r2, r3
 8003aa4:	88b8      	ldrh	r0, [r7, #4]
 8003aa6:	88ba      	ldrh	r2, [r7, #4]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	9301      	str	r3, [sp, #4]
 8003aac:	887b      	ldrh	r3, [r7, #2]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ab4:	f7ff ff38 	bl	8003928 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8003ab8:	e00b      	b.n	8003ad2 <pbuf_alloc+0x156>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8003aba:	4b08      	ldr	r3, [pc, #32]	; (8003adc <pbuf_alloc+0x160>)
 8003abc:	f240 1229 	movw	r2, #297	; 0x129
 8003ac0:	4909      	ldr	r1, [pc, #36]	; (8003ae8 <pbuf_alloc+0x16c>)
 8003ac2:	4808      	ldr	r0, [pc, #32]	; (8003ae4 <pbuf_alloc+0x168>)
 8003ac4:	f00c fd42 	bl	801054c <iprintf>
 8003ac8:	2000      	movs	r0, #0
 8003aca:	f00c fe41 	bl	8010750 <fflush>
 8003ace:	f00c fd86 	bl	80105de <abort>
      return NULL;
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3728      	adds	r7, #40	; 0x28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	080120a4 	.word	0x080120a4
 8003ae0:	080120c4 	.word	0x080120c4
 8003ae4:	080120f8 	.word	0x080120f8
 8003ae8:	08012120 	.word	0x08012120

08003aec <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	807b      	strh	r3, [r7, #2]
 8003af8:	4613      	mov	r3, r2
 8003afa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8003afc:	883b      	ldrh	r3, [r7, #0]
 8003afe:	2b41      	cmp	r3, #65	; 0x41
 8003b00:	d00e      	beq.n	8003b20 <pbuf_alloc_reference+0x34>
 8003b02:	883b      	ldrh	r3, [r7, #0]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d00b      	beq.n	8003b20 <pbuf_alloc_reference+0x34>
 8003b08:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <pbuf_alloc_reference+0x68>)
 8003b0a:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8003b0e:	4912      	ldr	r1, [pc, #72]	; (8003b58 <pbuf_alloc_reference+0x6c>)
 8003b10:	4812      	ldr	r0, [pc, #72]	; (8003b5c <pbuf_alloc_reference+0x70>)
 8003b12:	f00c fd1b 	bl	801054c <iprintf>
 8003b16:	2000      	movs	r0, #0
 8003b18:	f00c fe1a 	bl	8010750 <fflush>
 8003b1c:	f00c fd5f 	bl	80105de <abort>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8003b20:	2008      	movs	r0, #8
 8003b22:	f7ff fb55 	bl	80031d0 <memp_malloc>
 8003b26:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <pbuf_alloc_reference+0x46>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e00b      	b.n	8003b4a <pbuf_alloc_reference+0x5e>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8003b32:	8879      	ldrh	r1, [r7, #2]
 8003b34:	887a      	ldrh	r2, [r7, #2]
 8003b36:	2300      	movs	r3, #0
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	883b      	ldrh	r3, [r7, #0]
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f7ff fef0 	bl	8003928 <pbuf_init_alloced_pbuf>
  return p;
 8003b48:	68fb      	ldr	r3, [r7, #12]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	080120a4 	.word	0x080120a4
 8003b58:	0801213c 	.word	0x0801213c
 8003b5c:	080120f8 	.word	0x080120f8

08003b60 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10b      	bne.n	8003b8a <pbuf_realloc+0x2a>
 8003b72:	4b47      	ldr	r3, [pc, #284]	; (8003c90 <pbuf_realloc+0x130>)
 8003b74:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8003b78:	4946      	ldr	r1, [pc, #280]	; (8003c94 <pbuf_realloc+0x134>)
 8003b7a:	4847      	ldr	r0, [pc, #284]	; (8003c98 <pbuf_realloc+0x138>)
 8003b7c:	f00c fce6 	bl	801054c <iprintf>
 8003b80:	2000      	movs	r0, #0
 8003b82:	f00c fde5 	bl	8010750 <fflush>
 8003b86:	f00c fd2a 	bl	80105de <abort>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	891b      	ldrh	r3, [r3, #8]
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d278      	bcs.n	8003c86 <pbuf_realloc+0x126>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	891a      	ldrh	r2, [r3, #8]
 8003b98:	887b      	ldrh	r3, [r7, #2]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	823b      	strh	r3, [r7, #16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8003b9e:	887b      	ldrh	r3, [r7, #2]
 8003ba0:	827b      	strh	r3, [r7, #18]
  q = p;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8003ba6:	e01d      	b.n	8003be4 <pbuf_realloc+0x84>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	895b      	ldrh	r3, [r3, #10]
 8003bac:	8a7a      	ldrh	r2, [r7, #18]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	891a      	ldrh	r2, [r3, #8]
 8003bb6:	8a3b      	ldrh	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10b      	bne.n	8003be4 <pbuf_realloc+0x84>
 8003bcc:	4b30      	ldr	r3, [pc, #192]	; (8003c90 <pbuf_realloc+0x130>)
 8003bce:	f240 12b1 	movw	r2, #433	; 0x1b1
 8003bd2:	4932      	ldr	r1, [pc, #200]	; (8003c9c <pbuf_realloc+0x13c>)
 8003bd4:	4830      	ldr	r0, [pc, #192]	; (8003c98 <pbuf_realloc+0x138>)
 8003bd6:	f00c fcb9 	bl	801054c <iprintf>
 8003bda:	2000      	movs	r0, #0
 8003bdc:	f00c fdb8 	bl	8010750 <fflush>
 8003be0:	f00c fcfd 	bl	80105de <abort>
  while (rem_len > q->len) {
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	895b      	ldrh	r3, [r3, #10]
 8003be8:	8a7a      	ldrh	r2, [r7, #18]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d8dc      	bhi.n	8003ba8 <pbuf_realloc+0x48>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	7b1b      	ldrb	r3, [r3, #12]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d131      	bne.n	8003c5e <pbuf_realloc+0xfe>
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	895b      	ldrh	r3, [r3, #10]
 8003bfe:	8a7a      	ldrh	r2, [r7, #18]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d02c      	beq.n	8003c5e <pbuf_realloc+0xfe>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    struct pbuf *r = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	8a7b      	ldrh	r3, [r7, #18]
 8003c12:	4413      	add	r3, r2
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	4619      	mov	r1, r3
 8003c18:	6978      	ldr	r0, [r7, #20]
 8003c1a:	f7ff f841 	bl	8002ca0 <mem_trim>
 8003c1e:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned r == NULL", r != NULL);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10b      	bne.n	8003c3e <pbuf_realloc+0xde>
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <pbuf_realloc+0x130>)
 8003c28:	f240 12bf 	movw	r2, #447	; 0x1bf
 8003c2c:	491c      	ldr	r1, [pc, #112]	; (8003ca0 <pbuf_realloc+0x140>)
 8003c2e:	481a      	ldr	r0, [pc, #104]	; (8003c98 <pbuf_realloc+0x138>)
 8003c30:	f00c fc8c 	bl	801054c <iprintf>
 8003c34:	2000      	movs	r0, #0
 8003c36:	f00c fd8b 	bl	8010750 <fflush>
 8003c3a:	f00c fcd0 	bl	80105de <abort>
    /* help to detect faulty overridden implementation of mem_trim */
    LWIP_ASSERT("mem_trim returned r != q", r == q);
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d00b      	beq.n	8003c5e <pbuf_realloc+0xfe>
 8003c46:	4b12      	ldr	r3, [pc, #72]	; (8003c90 <pbuf_realloc+0x130>)
 8003c48:	f240 12c1 	movw	r2, #449	; 0x1c1
 8003c4c:	4915      	ldr	r1, [pc, #84]	; (8003ca4 <pbuf_realloc+0x144>)
 8003c4e:	4812      	ldr	r0, [pc, #72]	; (8003c98 <pbuf_realloc+0x138>)
 8003c50:	f00c fc7c 	bl	801054c <iprintf>
 8003c54:	2000      	movs	r0, #0
 8003c56:	f00c fd7b 	bl	8010750 <fflush>
 8003c5a:	f00c fcc0 	bl	80105de <abort>
    LWIP_UNUSED_ARG(r);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	8a7a      	ldrh	r2, [r7, #18]
 8003c62:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	895a      	ldrh	r2, [r3, #10]
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d004      	beq.n	8003c7e <pbuf_realloc+0x11e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 f91d 	bl	8003eb8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	e000      	b.n	8003c88 <pbuf_realloc+0x128>
    return;
 8003c86:	bf00      	nop

}
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	080120a4 	.word	0x080120a4
 8003c94:	08012150 	.word	0x08012150
 8003c98:	080120f8 	.word	0x080120f8
 8003c9c:	08012168 	.word	0x08012168
 8003ca0:	08012180 	.word	0x08012180
 8003ca4:	0801219c 	.word	0x0801219c

08003ca8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10b      	bne.n	8003cd4 <pbuf_add_header_impl+0x2c>
 8003cbc:	4b2e      	ldr	r3, [pc, #184]	; (8003d78 <pbuf_add_header_impl+0xd0>)
 8003cbe:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003cc2:	492e      	ldr	r1, [pc, #184]	; (8003d7c <pbuf_add_header_impl+0xd4>)
 8003cc4:	482e      	ldr	r0, [pc, #184]	; (8003d80 <pbuf_add_header_impl+0xd8>)
 8003cc6:	f00c fc41 	bl	801054c <iprintf>
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f00c fd40 	bl	8010750 <fflush>
 8003cd0:	f00c fc85 	bl	80105de <abort>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <pbuf_add_header_impl+0x3a>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce0:	d301      	bcc.n	8003ce6 <pbuf_add_header_impl+0x3e>
    return 1;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e044      	b.n	8003d70 <pbuf_add_header_impl+0xc8>
  }
  if (header_size_increment == 0) {
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <pbuf_add_header_impl+0x48>
    return 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	e03f      	b.n	8003d70 <pbuf_add_header_impl+0xc8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	891a      	ldrh	r2, [r3, #8]
 8003cf8:	8a7b      	ldrh	r3, [r7, #18]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	8a7a      	ldrh	r2, [r7, #18]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d901      	bls.n	8003d08 <pbuf_add_header_impl+0x60>
    return 1;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e033      	b.n	8003d70 <pbuf_add_header_impl+0xc8>
  }

  type_internal = p->type_internal;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	7b1b      	ldrb	r3, [r3, #12]
 8003d0c:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8003d0e:	8a3b      	ldrh	r3, [r7, #16]
 8003d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00d      	beq.n	8003d34 <pbuf_add_header_impl+0x8c>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	425b      	negs	r3, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f103 0210 	add.w	r2, r3, #16
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d90d      	bls.n	8003d4c <pbuf_add_header_impl+0xa4>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e01d      	b.n	8003d70 <pbuf_add_header_impl+0xc8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d006      	beq.n	8003d48 <pbuf_add_header_impl+0xa0>
      payload = (u8_t *)p->payload - header_size_increment;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	425b      	negs	r3, r3
 8003d42:	4413      	add	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	e001      	b.n	8003d4c <pbuf_add_header_impl+0xa4>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e011      	b.n	8003d70 <pbuf_add_header_impl+0xc8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	895a      	ldrh	r2, [r3, #10]
 8003d56:	8a7b      	ldrh	r3, [r7, #18]
 8003d58:	4413      	add	r3, r2
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	891a      	ldrh	r2, [r3, #8]
 8003d64:	8a7b      	ldrh	r3, [r7, #18]
 8003d66:	4413      	add	r3, r2
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	811a      	strh	r2, [r3, #8]


  return 0;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	080120a4 	.word	0x080120a4
 8003d7c:	080121b8 	.word	0x080121b8
 8003d80:	080120f8 	.word	0x080120f8

08003d84 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8003d8e:	2200      	movs	r2, #0
 8003d90:	6839      	ldr	r1, [r7, #0]
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7ff ff88 	bl	8003ca8 <pbuf_add_header_impl>
 8003d98:	4603      	mov	r3, r0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10b      	bne.n	8003dcc <pbuf_remove_header+0x28>
 8003db4:	4b22      	ldr	r3, [pc, #136]	; (8003e40 <pbuf_remove_header+0x9c>)
 8003db6:	f44f 7214 	mov.w	r2, #592	; 0x250
 8003dba:	4922      	ldr	r1, [pc, #136]	; (8003e44 <pbuf_remove_header+0xa0>)
 8003dbc:	4822      	ldr	r0, [pc, #136]	; (8003e48 <pbuf_remove_header+0xa4>)
 8003dbe:	f00c fbc5 	bl	801054c <iprintf>
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	f00c fcc4 	bl	8010750 <fflush>
 8003dc8:	f00c fc09 	bl	80105de <abort>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <pbuf_remove_header+0x36>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd8:	d301      	bcc.n	8003dde <pbuf_remove_header+0x3a>
    return 1;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e02c      	b.n	8003e38 <pbuf_remove_header+0x94>
  }
  if (header_size_decrement == 0) {
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <pbuf_remove_header+0x44>
    return 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	e027      	b.n	8003e38 <pbuf_remove_header+0x94>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	895b      	ldrh	r3, [r3, #10]
 8003df0:	89fa      	ldrh	r2, [r7, #14]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d908      	bls.n	8003e08 <pbuf_remove_header+0x64>
 8003df6:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <pbuf_remove_header+0x9c>)
 8003df8:	f240 225a 	movw	r2, #602	; 0x25a
 8003dfc:	4913      	ldr	r1, [pc, #76]	; (8003e4c <pbuf_remove_header+0xa8>)
 8003dfe:	4812      	ldr	r0, [pc, #72]	; (8003e48 <pbuf_remove_header+0xa4>)
 8003e00:	f7fd fc7d 	bl	80016fe <lwip_win32_platform_diag>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e017      	b.n	8003e38 <pbuf_remove_header+0x94>

  /* remember current payload pointer */
  payload = p->payload;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	441a      	add	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	895a      	ldrh	r2, [r3, #10]
 8003e1e:	89fb      	ldrh	r3, [r7, #14]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	891a      	ldrh	r2, [r3, #8]
 8003e2c:	89fb      	ldrh	r3, [r7, #14]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	080120a4 	.word	0x080120a4
 8003e44:	080121b8 	.word	0x080121b8
 8003e48:	080120f8 	.word	0x080120f8
 8003e4c:	080121c4 	.word	0x080121c4

08003e50 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	807b      	strh	r3, [r7, #2]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8003e60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	da08      	bge.n	8003e7a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8003e68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e6c:	425b      	negs	r3, r3
 8003e6e:	4619      	mov	r1, r3
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ff97 	bl	8003da4 <pbuf_remove_header>
 8003e76:	4603      	mov	r3, r0
 8003e78:	e007      	b.n	8003e8a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8003e7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e7e:	787a      	ldrb	r2, [r7, #1]
 8003e80:	4619      	mov	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff ff10 	bl	8003ca8 <pbuf_add_header_impl>
 8003e88:	4603      	mov	r3, r0
  }
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8003e9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff ffd2 	bl	8003e50 <pbuf_header_impl>
 8003eac:	4603      	mov	r3, r0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d110      	bne.n	8003ee8 <pbuf_free+0x30>
    LWIP_ASSERT("p != NULL", p != NULL);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10b      	bne.n	8003ee4 <pbuf_free+0x2c>
 8003ecc:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <pbuf_free+0xf0>)
 8003ece:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8003ed2:	4936      	ldr	r1, [pc, #216]	; (8003fac <pbuf_free+0xf4>)
 8003ed4:	4836      	ldr	r0, [pc, #216]	; (8003fb0 <pbuf_free+0xf8>)
 8003ed6:	f00c fb39 	bl	801054c <iprintf>
 8003eda:	2000      	movs	r0, #0
 8003edc:	f00c fc38 	bl	8010750 <fflush>
 8003ee0:	f00c fb7d 	bl	80105de <abort>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e05b      	b.n	8003fa0 <pbuf_free+0xe8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8003eec:	e054      	b.n	8003f98 <pbuf_free+0xe0>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8003eee:	f7fd fc3f 	bl	8001770 <sys_arch_protect>
 8003ef2:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	7b9b      	ldrb	r3, [r3, #14]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10b      	bne.n	8003f14 <pbuf_free+0x5c>
 8003efc:	4b2a      	ldr	r3, [pc, #168]	; (8003fa8 <pbuf_free+0xf0>)
 8003efe:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003f02:	492c      	ldr	r1, [pc, #176]	; (8003fb4 <pbuf_free+0xfc>)
 8003f04:	482a      	ldr	r0, [pc, #168]	; (8003fb0 <pbuf_free+0xf8>)
 8003f06:	f00c fb21 	bl	801054c <iprintf>
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	f00c fc20 	bl	8010750 <fflush>
 8003f10:	f00c fb65 	bl	80105de <abort>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	7b9b      	ldrb	r3, [r3, #14]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	739a      	strb	r2, [r3, #14]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	7b9b      	ldrb	r3, [r3, #14]
 8003f24:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8003f26:	69b8      	ldr	r0, [r7, #24]
 8003f28:	f7fd fc2a 	bl	8001780 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d130      	bne.n	8003f94 <pbuf_free+0xdc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	7b1b      	ldrb	r3, [r3, #12]
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	73fb      	strb	r3, [r7, #15]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d104      	bne.n	8003f52 <pbuf_free+0x9a>
          memp_free(MEMP_PBUF_POOL, p);
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	2009      	movs	r0, #9
 8003f4c:	f7ff f9aa 	bl	80032a4 <memp_free>
 8003f50:	e01a      	b.n	8003f88 <pbuf_free+0xd0>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d104      	bne.n	8003f62 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF, p);
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	2008      	movs	r0, #8
 8003f5c:	f7ff f9a2 	bl	80032a4 <memp_free>
 8003f60:	e012      	b.n	8003f88 <pbuf_free+0xd0>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d103      	bne.n	8003f70 <pbuf_free+0xb8>
          mem_free(p);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7fe fe29 	bl	8002bc0 <mem_free>
 8003f6e:	e00b      	b.n	8003f88 <pbuf_free+0xd0>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8003f70:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <pbuf_free+0xf0>)
 8003f72:	f240 3213 	movw	r2, #787	; 0x313
 8003f76:	4910      	ldr	r1, [pc, #64]	; (8003fb8 <pbuf_free+0x100>)
 8003f78:	480d      	ldr	r0, [pc, #52]	; (8003fb0 <pbuf_free+0xf8>)
 8003f7a:	f00c fae7 	bl	801054c <iprintf>
 8003f7e:	2000      	movs	r0, #0
 8003f80:	f00c fbe6 	bl	8010750 <fflush>
 8003f84:	f00c fb2b 	bl	80105de <abort>
        }
      }
      count++;
 8003f88:	7ffb      	ldrb	r3, [r7, #31]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	e001      	b.n	8003f98 <pbuf_free+0xe0>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1a7      	bne.n	8003eee <pbuf_free+0x36>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8003f9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3720      	adds	r7, #32
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	080120a4 	.word	0x080120a4
 8003fac:	080121b8 	.word	0x080121b8
 8003fb0:	080120f8 	.word	0x080120f8
 8003fb4:	080121e4 	.word	0x080121e4
 8003fb8:	080121fc 	.word	0x080121fc

08003fbc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8003fc8:	e005      	b.n	8003fd6 <pbuf_clen+0x1a>
    ++len;
 8003fca:	89fb      	ldrh	r3, [r7, #14]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1f6      	bne.n	8003fca <pbuf_clen+0xe>
  }
  return len;
 8003fdc:	89fb      	ldrh	r3, [r7, #14]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d01b      	beq.n	8004032 <pbuf_ref+0x46>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8003ffa:	f7fd fbb9 	bl	8001770 <sys_arch_protect>
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	7b9b      	ldrb	r3, [r3, #14]
 8004004:	3301      	adds	r3, #1
 8004006:	b2da      	uxtb	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	739a      	strb	r2, [r3, #14]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f7fd fbb7 	bl	8001780 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	7b9b      	ldrb	r3, [r3, #14]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10b      	bne.n	8004032 <pbuf_ref+0x46>
 800401a:	4b08      	ldr	r3, [pc, #32]	; (800403c <pbuf_ref+0x50>)
 800401c:	f240 3246 	movw	r2, #838	; 0x346
 8004020:	4907      	ldr	r1, [pc, #28]	; (8004040 <pbuf_ref+0x54>)
 8004022:	4808      	ldr	r0, [pc, #32]	; (8004044 <pbuf_ref+0x58>)
 8004024:	f00c fa92 	bl	801054c <iprintf>
 8004028:	2000      	movs	r0, #0
 800402a:	f00c fb91 	bl	8010750 <fflush>
 800402e:	f00c fad6 	bl	80105de <abort>
  }
}
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	080120a4 	.word	0x080120a4
 8004040:	08012210 	.word	0x08012210
 8004044:	080120f8 	.word	0x080120f8

08004048 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <pbuf_cat+0x16>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d107      	bne.n	800406e <pbuf_cat+0x26>
 800405e:	4b2d      	ldr	r3, [pc, #180]	; (8004114 <pbuf_cat+0xcc>)
 8004060:	f240 325e 	movw	r2, #862	; 0x35e
 8004064:	492c      	ldr	r1, [pc, #176]	; (8004118 <pbuf_cat+0xd0>)
 8004066:	482d      	ldr	r0, [pc, #180]	; (800411c <pbuf_cat+0xd4>)
 8004068:	f7fd fb49 	bl	80016fe <lwip_win32_platform_diag>
 800406c:	e04e      	b.n	800410c <pbuf_cat+0xc4>
             ((h != NULL) && (t != NULL)), return;);
  LWIP_ASSERT("Creating an infinite loop", h != t);
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d10b      	bne.n	800408e <pbuf_cat+0x46>
 8004076:	4b27      	ldr	r3, [pc, #156]	; (8004114 <pbuf_cat+0xcc>)
 8004078:	f240 325f 	movw	r2, #863	; 0x35f
 800407c:	4928      	ldr	r1, [pc, #160]	; (8004120 <pbuf_cat+0xd8>)
 800407e:	4827      	ldr	r0, [pc, #156]	; (800411c <pbuf_cat+0xd4>)
 8004080:	f00c fa64 	bl	801054c <iprintf>
 8004084:	2000      	movs	r0, #0
 8004086:	f00c fb63 	bl	8010750 <fflush>
 800408a:	f00c faa8 	bl	80105de <abort>

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	e00a      	b.n	80040aa <pbuf_cat+0x62>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	891a      	ldrh	r2, [r3, #8]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	891b      	ldrh	r3, [r3, #8]
 800409c:	4413      	add	r3, r2
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <pbuf_cat+0x4c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	891a      	ldrh	r2, [r3, #8]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	895b      	ldrh	r3, [r3, #10]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d00b      	beq.n	80040d6 <pbuf_cat+0x8e>
 80040be:	4b15      	ldr	r3, [pc, #84]	; (8004114 <pbuf_cat+0xcc>)
 80040c0:	f240 3267 	movw	r2, #871	; 0x367
 80040c4:	4917      	ldr	r1, [pc, #92]	; (8004124 <pbuf_cat+0xdc>)
 80040c6:	4815      	ldr	r0, [pc, #84]	; (800411c <pbuf_cat+0xd4>)
 80040c8:	f00c fa40 	bl	801054c <iprintf>
 80040cc:	2000      	movs	r0, #0
 80040ce:	f00c fb3f 	bl	8010750 <fflush>
 80040d2:	f00c fa84 	bl	80105de <abort>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <pbuf_cat+0xae>
 80040de:	4b0d      	ldr	r3, [pc, #52]	; (8004114 <pbuf_cat+0xcc>)
 80040e0:	f44f 725a 	mov.w	r2, #872	; 0x368
 80040e4:	4910      	ldr	r1, [pc, #64]	; (8004128 <pbuf_cat+0xe0>)
 80040e6:	480d      	ldr	r0, [pc, #52]	; (800411c <pbuf_cat+0xd4>)
 80040e8:	f00c fa30 	bl	801054c <iprintf>
 80040ec:	2000      	movs	r0, #0
 80040ee:	f00c fb2f 	bl	8010750 <fflush>
 80040f2:	f00c fa74 	bl	80105de <abort>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	891a      	ldrh	r2, [r3, #8]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	891b      	ldrh	r3, [r3, #8]
 80040fe:	4413      	add	r3, r2
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	080120a4 	.word	0x080120a4
 8004118:	08012224 	.word	0x08012224
 800411c:	080120f8 	.word	0x080120f8
 8004120:	0801225c 	.word	0x0801225c
 8004124:	08012278 	.word	0x08012278
 8004128:	080122a8 	.word	0x080122a8

0800412c <pbuf_copy>:
 *                 enough to hold p_from
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d109      	bne.n	8004150 <pbuf_copy+0x24>
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <pbuf_copy+0x3c>)
 800413e:	f240 32c7 	movw	r2, #967	; 0x3c7
 8004142:	490a      	ldr	r1, [pc, #40]	; (800416c <pbuf_copy+0x40>)
 8004144:	480a      	ldr	r0, [pc, #40]	; (8004170 <pbuf_copy+0x44>)
 8004146:	f7fd fada 	bl	80016fe <lwip_win32_platform_diag>
 800414a:	f06f 030f 	mvn.w	r3, #15
 800414e:	e007      	b.n	8004160 <pbuf_copy+0x34>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	891a      	ldrh	r2, [r3, #8]
 8004154:	2300      	movs	r3, #0
 8004156:	6839      	ldr	r1, [r7, #0]
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f80b 	bl	8004174 <pbuf_copy_partial_pbuf>
 800415e:	4603      	mov	r3, r0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	080120a4 	.word	0x080120a4
 800416c:	080122f4 	.word	0x080122f4
 8004170:	080120f8 	.word	0x080120f8

08004174 <pbuf_copy_partial_pbuf>:
 *                 or p_to is not big enough to hold copy_len at offset
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy_partial_pbuf(struct pbuf *p_to, const struct pbuf *p_from, u16_t copy_len, u16_t offset)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	4611      	mov	r1, r2
 8004180:	461a      	mov	r2, r3
 8004182:	460b      	mov	r3, r1
 8004184:	80fb      	strh	r3, [r7, #6]
 8004186:	4613      	mov	r3, r2
 8004188:	80bb      	strh	r3, [r7, #4]
  size_t offset_to = offset, offset_from = 0, len;
 800418a:	88bb      	ldrh	r3, [r7, #4]
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	2300      	movs	r3, #0
 8004190:	61bb      	str	r3, [r7, #24]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf(%p, %p, %"U16_F", %"U16_F")\n",
              (const void *)p_to, (const void *)p_from, copy_len, offset));

  /* is the copy_len in range? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d004      	beq.n	80041a2 <pbuf_copy_partial_pbuf+0x2e>
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	891b      	ldrh	r3, [r3, #8]
 800419c:	88fa      	ldrh	r2, [r7, #6]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d909      	bls.n	80041b6 <pbuf_copy_partial_pbuf+0x42>
 80041a2:	4b74      	ldr	r3, [pc, #464]	; (8004374 <pbuf_copy_partial_pbuf+0x200>)
 80041a4:	f240 32e6 	movw	r2, #998	; 0x3e6
 80041a8:	4973      	ldr	r1, [pc, #460]	; (8004378 <pbuf_copy_partial_pbuf+0x204>)
 80041aa:	4874      	ldr	r0, [pc, #464]	; (800437c <pbuf_copy_partial_pbuf+0x208>)
 80041ac:	f7fd faa7 	bl	80016fe <lwip_win32_platform_diag>
 80041b0:	f06f 030f 	mvn.w	r3, #15
 80041b4:	e0d9      	b.n	800436a <pbuf_copy_partial_pbuf+0x1f6>
             (p_from->tot_len >= copy_len)), return ERR_ARG;);
  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d007      	beq.n	80041cc <pbuf_copy_partial_pbuf+0x58>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	891b      	ldrh	r3, [r3, #8]
 80041c0:	4619      	mov	r1, r3
 80041c2:	88ba      	ldrh	r2, [r7, #4]
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	4413      	add	r3, r2
 80041c8:	4299      	cmp	r1, r3
 80041ca:	da09      	bge.n	80041e0 <pbuf_copy_partial_pbuf+0x6c>
 80041cc:	4b69      	ldr	r3, [pc, #420]	; (8004374 <pbuf_copy_partial_pbuf+0x200>)
 80041ce:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80041d2:	496b      	ldr	r1, [pc, #428]	; (8004380 <pbuf_copy_partial_pbuf+0x20c>)
 80041d4:	4869      	ldr	r0, [pc, #420]	; (800437c <pbuf_copy_partial_pbuf+0x208>)
 80041d6:	f7fd fa92 	bl	80016fe <lwip_win32_platform_diag>
 80041da:	f06f 030f 	mvn.w	r3, #15
 80041de:	e0c4      	b.n	800436a <pbuf_copy_partial_pbuf+0x1f6>
             (p_to->tot_len >= (offset + copy_len))), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	895b      	ldrh	r3, [r3, #10]
 80041e4:	461a      	mov	r2, r3
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	1ad2      	subs	r2, r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	895b      	ldrh	r3, [r3, #10]
 80041ee:	4619      	mov	r1, r3
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	1acb      	subs	r3, r1, r3
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d306      	bcc.n	8004206 <pbuf_copy_partial_pbuf+0x92>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	895b      	ldrh	r3, [r3, #10]
 80041fc:	461a      	mov	r2, r3
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e005      	b.n	8004212 <pbuf_copy_partial_pbuf+0x9e>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	895b      	ldrh	r3, [r3, #10]
 800420a:	461a      	mov	r2, r3
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	617b      	str	r3, [r7, #20]
    }
    len = LWIP_MIN(copy_len, len);
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4293      	cmp	r3, r2
 8004218:	bf28      	it	cs
 800421a:	4613      	movcs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	18d0      	adds	r0, r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	4413      	add	r3, r2
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4619      	mov	r1, r3
 8004232:	f00c fbad 	bl	8010990 <memcpy>
    offset_to += len;
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4413      	add	r3, r2
 800423c:	61fb      	str	r3, [r7, #28]
    offset_from += len;
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	4413      	add	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
    copy_len = (u16_t)(copy_len - len);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	b29b      	uxth	r3, r3
 800424a:	88fa      	ldrh	r2, [r7, #6]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	80fb      	strh	r3, [r7, #6]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	895b      	ldrh	r3, [r3, #10]
 8004254:	461a      	mov	r2, r3
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	429a      	cmp	r2, r3
 800425a:	d20b      	bcs.n	8004274 <pbuf_copy_partial_pbuf+0x100>
 800425c:	4b45      	ldr	r3, [pc, #276]	; (8004374 <pbuf_copy_partial_pbuf+0x200>)
 800425e:	f240 32fa 	movw	r2, #1018	; 0x3fa
 8004262:	4948      	ldr	r1, [pc, #288]	; (8004384 <pbuf_copy_partial_pbuf+0x210>)
 8004264:	4845      	ldr	r0, [pc, #276]	; (800437c <pbuf_copy_partial_pbuf+0x208>)
 8004266:	f00c f971 	bl	801054c <iprintf>
 800426a:	2000      	movs	r0, #0
 800426c:	f00c fa70 	bl	8010750 <fflush>
 8004270:	f00c f9b5 	bl	80105de <abort>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	895b      	ldrh	r3, [r3, #10]
 8004278:	461a      	mov	r2, r3
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	429a      	cmp	r2, r3
 800427e:	d20b      	bcs.n	8004298 <pbuf_copy_partial_pbuf+0x124>
 8004280:	4b3c      	ldr	r3, [pc, #240]	; (8004374 <pbuf_copy_partial_pbuf+0x200>)
 8004282:	f240 32fb 	movw	r2, #1019	; 0x3fb
 8004286:	4940      	ldr	r1, [pc, #256]	; (8004388 <pbuf_copy_partial_pbuf+0x214>)
 8004288:	483c      	ldr	r0, [pc, #240]	; (800437c <pbuf_copy_partial_pbuf+0x208>)
 800428a:	f00c f95f 	bl	801054c <iprintf>
 800428e:	2000      	movs	r0, #0
 8004290:	f00c fa5e 	bl	8010750 <fflush>
 8004294:	f00c f9a3 	bl	80105de <abort>
    if (offset_from >= p_from->len) {
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	895b      	ldrh	r3, [r3, #10]
 800429c:	461a      	mov	r2, r3
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d814      	bhi.n	80042ce <pbuf_copy_partial_pbuf+0x15a>
      /* on to next p_from (if any) */
      offset_from = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61bb      	str	r3, [r7, #24]
      p_from = p_from->next;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60bb      	str	r3, [r7, #8]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10c      	bne.n	80042ce <pbuf_copy_partial_pbuf+0x15a>
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d009      	beq.n	80042ce <pbuf_copy_partial_pbuf+0x15a>
 80042ba:	4b2e      	ldr	r3, [pc, #184]	; (8004374 <pbuf_copy_partial_pbuf+0x200>)
 80042bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042c0:	4932      	ldr	r1, [pc, #200]	; (800438c <pbuf_copy_partial_pbuf+0x218>)
 80042c2:	482e      	ldr	r0, [pc, #184]	; (800437c <pbuf_copy_partial_pbuf+0x208>)
 80042c4:	f7fd fa1b 	bl	80016fe <lwip_win32_platform_diag>
 80042c8:	f06f 030f 	mvn.w	r3, #15
 80042cc:	e04d      	b.n	800436a <pbuf_copy_partial_pbuf+0x1f6>
    }
    if (offset_to == p_to->len) {
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	895b      	ldrh	r3, [r3, #10]
 80042d2:	461a      	mov	r2, r3
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d114      	bne.n	8004304 <pbuf_copy_partial_pbuf+0x190>
      /* on to next p_to (if any) */
      offset_to = 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
      p_to = p_to->next;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10c      	bne.n	8004304 <pbuf_copy_partial_pbuf+0x190>
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d009      	beq.n	8004304 <pbuf_copy_partial_pbuf+0x190>
 80042f0:	4b20      	ldr	r3, [pc, #128]	; (8004374 <pbuf_copy_partial_pbuf+0x200>)
 80042f2:	f240 4206 	movw	r2, #1030	; 0x406
 80042f6:	4926      	ldr	r1, [pc, #152]	; (8004390 <pbuf_copy_partial_pbuf+0x21c>)
 80042f8:	4820      	ldr	r0, [pc, #128]	; (800437c <pbuf_copy_partial_pbuf+0x208>)
 80042fa:	f7fd fa00 	bl	80016fe <lwip_win32_platform_diag>
 80042fe:	f06f 030f 	mvn.w	r3, #15
 8004302:	e032      	b.n	800436a <pbuf_copy_partial_pbuf+0x1f6>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d013      	beq.n	8004332 <pbuf_copy_partial_pbuf+0x1be>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	895a      	ldrh	r2, [r3, #10]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	891b      	ldrh	r3, [r3, #8]
 8004312:	429a      	cmp	r2, r3
 8004314:	d10d      	bne.n	8004332 <pbuf_copy_partial_pbuf+0x1be>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <pbuf_copy_partial_pbuf+0x1be>
 800431e:	4b15      	ldr	r3, [pc, #84]	; (8004374 <pbuf_copy_partial_pbuf+0x200>)
 8004320:	f240 420c 	movw	r2, #1036	; 0x40c
 8004324:	491b      	ldr	r1, [pc, #108]	; (8004394 <pbuf_copy_partial_pbuf+0x220>)
 8004326:	4815      	ldr	r0, [pc, #84]	; (800437c <pbuf_copy_partial_pbuf+0x208>)
 8004328:	f7fd f9e9 	bl	80016fe <lwip_win32_platform_diag>
 800432c:	f06f 0305 	mvn.w	r3, #5
 8004330:	e01b      	b.n	800436a <pbuf_copy_partial_pbuf+0x1f6>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d013      	beq.n	8004360 <pbuf_copy_partial_pbuf+0x1ec>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	895a      	ldrh	r2, [r3, #10]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	891b      	ldrh	r3, [r3, #8]
 8004340:	429a      	cmp	r2, r3
 8004342:	d10d      	bne.n	8004360 <pbuf_copy_partial_pbuf+0x1ec>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d009      	beq.n	8004360 <pbuf_copy_partial_pbuf+0x1ec>
 800434c:	4b09      	ldr	r3, [pc, #36]	; (8004374 <pbuf_copy_partial_pbuf+0x200>)
 800434e:	f240 4211 	movw	r2, #1041	; 0x411
 8004352:	4910      	ldr	r1, [pc, #64]	; (8004394 <pbuf_copy_partial_pbuf+0x220>)
 8004354:	4809      	ldr	r0, [pc, #36]	; (800437c <pbuf_copy_partial_pbuf+0x208>)
 8004356:	f7fd f9d2 	bl	80016fe <lwip_win32_platform_diag>
 800435a:	f06f 0305 	mvn.w	r3, #5
 800435e:	e004      	b.n	800436a <pbuf_copy_partial_pbuf+0x1f6>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (copy_len);
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f47f af3c 	bne.w	80041e0 <pbuf_copy_partial_pbuf+0x6c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf: copy complete.\n"));
  return ERR_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3720      	adds	r7, #32
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	080120a4 	.word	0x080120a4
 8004378:	08012310 	.word	0x08012310
 800437c:	080120f8 	.word	0x080120f8
 8004380:	08012344 	.word	0x08012344
 8004384:	08012374 	.word	0x08012374
 8004388:	0801238c 	.word	0x0801238c
 800438c:	080123a8 	.word	0x080123a8
 8004390:	080123b8 	.word	0x080123b8
 8004394:	080123c8 	.word	0x080123c8

08004398 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	4611      	mov	r1, r2
 80043a4:	461a      	mov	r2, r3
 80043a6:	460b      	mov	r3, r1
 80043a8:	80fb      	strh	r3, [r7, #6]
 80043aa:	4613      	mov	r3, r2
 80043ac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d108      	bne.n	80043ce <pbuf_copy_partial+0x36>
 80043bc:	4b2b      	ldr	r3, [pc, #172]	; (800446c <pbuf_copy_partial+0xd4>)
 80043be:	f240 422c 	movw	r2, #1068	; 0x42c
 80043c2:	492b      	ldr	r1, [pc, #172]	; (8004470 <pbuf_copy_partial+0xd8>)
 80043c4:	482b      	ldr	r0, [pc, #172]	; (8004474 <pbuf_copy_partial+0xdc>)
 80043c6:	f7fd f99a 	bl	80016fe <lwip_win32_platform_diag>
 80043ca:	2300      	movs	r3, #0
 80043cc:	e04a      	b.n	8004464 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d108      	bne.n	80043e6 <pbuf_copy_partial+0x4e>
 80043d4:	4b25      	ldr	r3, [pc, #148]	; (800446c <pbuf_copy_partial+0xd4>)
 80043d6:	f240 422d 	movw	r2, #1069	; 0x42d
 80043da:	4927      	ldr	r1, [pc, #156]	; (8004478 <pbuf_copy_partial+0xe0>)
 80043dc:	4825      	ldr	r0, [pc, #148]	; (8004474 <pbuf_copy_partial+0xdc>)
 80043de:	f7fd f98e 	bl	80016fe <lwip_win32_platform_diag>
 80043e2:	2300      	movs	r3, #0
 80043e4:	e03e      	b.n	8004464 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	61fb      	str	r3, [r7, #28]
 80043ea:	e034      	b.n	8004456 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80043ec:	88bb      	ldrh	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <pbuf_copy_partial+0x70>
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	895b      	ldrh	r3, [r3, #10]
 80043f6:	88ba      	ldrh	r2, [r7, #4]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d305      	bcc.n	8004408 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	895b      	ldrh	r3, [r3, #10]
 8004400:	88ba      	ldrh	r2, [r7, #4]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	80bb      	strh	r3, [r7, #4]
 8004406:	e023      	b.n	8004450 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	895a      	ldrh	r2, [r3, #10]
 800440c:	88bb      	ldrh	r3, [r7, #4]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8004412:	8b3a      	ldrh	r2, [r7, #24]
 8004414:	88fb      	ldrh	r3, [r7, #6]
 8004416:	429a      	cmp	r2, r3
 8004418:	d901      	bls.n	800441e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800441a:	88fb      	ldrh	r3, [r7, #6]
 800441c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800441e:	8b7b      	ldrh	r3, [r7, #26]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	18d0      	adds	r0, r2, r3
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	88bb      	ldrh	r3, [r7, #4]
 800442a:	4413      	add	r3, r2
 800442c:	8b3a      	ldrh	r2, [r7, #24]
 800442e:	4619      	mov	r1, r3
 8004430:	f00c faae 	bl	8010990 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8004434:	8afa      	ldrh	r2, [r7, #22]
 8004436:	8b3b      	ldrh	r3, [r7, #24]
 8004438:	4413      	add	r3, r2
 800443a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800443c:	8b7a      	ldrh	r2, [r7, #26]
 800443e:	8b3b      	ldrh	r3, [r7, #24]
 8004440:	4413      	add	r3, r2
 8004442:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8004444:	88fa      	ldrh	r2, [r7, #6]
 8004446:	8b3b      	ldrh	r3, [r7, #24]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	61fb      	str	r3, [r7, #28]
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <pbuf_copy_partial+0xca>
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1c4      	bne.n	80043ec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8004462:	8afb      	ldrh	r3, [r7, #22]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3720      	adds	r7, #32
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	080120a4 	.word	0x080120a4
 8004470:	08012400 	.word	0x08012400
 8004474:	080120f8 	.word	0x080120f8
 8004478:	08012420 	.word	0x08012420

0800447c <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf *
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	70fb      	strb	r3, [r7, #3]
  struct pbuf *q;
  if (p->next == NULL) {
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <pbuf_coalesce+0x18>
    return p;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	e010      	b.n	80044b6 <pbuf_coalesce+0x3a>
  }
  q = pbuf_clone(layer, PBUF_RAM, p);
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	f44f 7120 	mov.w	r1, #640	; 0x280
 800449c:	4618      	mov	r0, r3
 800449e:	f000 f80f 	bl	80044c0 <pbuf_clone>
 80044a2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <pbuf_coalesce+0x32>
    /* @todo: what do we do now? */
    return p;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	e003      	b.n	80044b6 <pbuf_coalesce+0x3a>
  }
  pbuf_free(p);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff fd02 	bl	8003eb8 <pbuf_free>
  return q;
 80044b4:	68fb      	ldr	r3, [r7, #12]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	603a      	str	r2, [r7, #0]
 80044ca:	71fb      	strb	r3, [r7, #7]
 80044cc:	460b      	mov	r3, r1
 80044ce:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	8919      	ldrh	r1, [r3, #8]
 80044d4:	88ba      	ldrh	r2, [r7, #4]
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff fa4f 	bl	800397c <pbuf_alloc>
 80044de:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <pbuf_clone+0x2a>
    return NULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	e016      	b.n	8004518 <pbuf_clone+0x58>
  }
  err = pbuf_copy(q, p);
 80044ea:	6839      	ldr	r1, [r7, #0]
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f7ff fe1d 	bl	800412c <pbuf_copy>
 80044f2:	4603      	mov	r3, r0
 80044f4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80044f6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00b      	beq.n	8004516 <pbuf_clone+0x56>
 80044fe:	4b08      	ldr	r3, [pc, #32]	; (8004520 <pbuf_clone+0x60>)
 8004500:	f240 524c 	movw	r2, #1356	; 0x54c
 8004504:	4907      	ldr	r1, [pc, #28]	; (8004524 <pbuf_clone+0x64>)
 8004506:	4808      	ldr	r0, [pc, #32]	; (8004528 <pbuf_clone+0x68>)
 8004508:	f00c f820 	bl	801054c <iprintf>
 800450c:	2000      	movs	r0, #0
 800450e:	f00c f91f 	bl	8010750 <fflush>
 8004512:	f00c f864 	bl	80105de <abort>
  return q;
 8004516:	68fb      	ldr	r3, [r7, #12]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	080120a4 	.word	0x080120a4
 8004524:	0801252c 	.word	0x0801252c
 8004528:	080120f8 	.word	0x080120f8

0800452c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8004530:	f7fd f906 	bl	8001740 <lwip_port_rand>
 8004534:	4603      	mov	r3, r0
 8004536:	b29b      	uxth	r3, r3
 8004538:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800453c:	b29b      	uxth	r3, r3
 800453e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004542:	b29a      	uxth	r2, r3
 8004544:	4b01      	ldr	r3, [pc, #4]	; (800454c <tcp_init+0x20>)
 8004546:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8004548:	bf00      	nop
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20000004 	.word	0x20000004

08004550 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	7d1b      	ldrb	r3, [r3, #20]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d10a      	bne.n	8004576 <tcp_free+0x26>
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <tcp_free+0x38>)
 8004562:	22d4      	movs	r2, #212	; 0xd4
 8004564:	4909      	ldr	r1, [pc, #36]	; (800458c <tcp_free+0x3c>)
 8004566:	480a      	ldr	r0, [pc, #40]	; (8004590 <tcp_free+0x40>)
 8004568:	f00b fff0 	bl	801054c <iprintf>
 800456c:	2000      	movs	r0, #0
 800456e:	f00c f8ef 	bl	8010750 <fflush>
 8004572:	f00c f834 	bl	80105de <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	2000      	movs	r0, #0
 800457a:	f7fe fe93 	bl	80032a4 <memp_free>
}
 800457e:	bf00      	nop
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	080125b8 	.word	0x080125b8
 800458c:	080125d8 	.word	0x080125d8
 8004590:	080125ec 	.word	0x080125ec

08004594 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	7d1b      	ldrb	r3, [r3, #20]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d10a      	bne.n	80045ba <tcp_free_listen+0x26>
 80045a4:	4b09      	ldr	r3, [pc, #36]	; (80045cc <tcp_free_listen+0x38>)
 80045a6:	22df      	movs	r2, #223	; 0xdf
 80045a8:	4909      	ldr	r1, [pc, #36]	; (80045d0 <tcp_free_listen+0x3c>)
 80045aa:	480a      	ldr	r0, [pc, #40]	; (80045d4 <tcp_free_listen+0x40>)
 80045ac:	f00b ffce 	bl	801054c <iprintf>
 80045b0:	2000      	movs	r0, #0
 80045b2:	f00c f8cd 	bl	8010750 <fflush>
 80045b6:	f00c f812 	bl	80105de <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	2001      	movs	r0, #1
 80045be:	f7fe fe71 	bl	80032a4 <memp_free>
}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	080125b8 	.word	0x080125b8
 80045d0:	08012614 	.word	0x08012614
 80045d4:	080125ec 	.word	0x080125ec

080045d8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80045dc:	f000 fefe 	bl	80053dc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80045e0:	4b07      	ldr	r3, [pc, #28]	; (8004600 <tcp_tmr+0x28>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	3301      	adds	r3, #1
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <tcp_tmr+0x28>)
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	4b04      	ldr	r3, [pc, #16]	; (8004600 <tcp_tmr+0x28>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80045f8:	f000 fb7e 	bl	8004cf8 <tcp_slowtmr>
  }
}
 80045fc:	bf00      	nop
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	200003b1 	.word	0x200003b1

08004604 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10a      	bne.n	800462a <tcp_remove_listener+0x26>
 8004614:	4b0f      	ldr	r3, [pc, #60]	; (8004654 <tcp_remove_listener+0x50>)
 8004616:	22ff      	movs	r2, #255	; 0xff
 8004618:	490f      	ldr	r1, [pc, #60]	; (8004658 <tcp_remove_listener+0x54>)
 800461a:	4810      	ldr	r0, [pc, #64]	; (800465c <tcp_remove_listener+0x58>)
 800461c:	f00b ff96 	bl	801054c <iprintf>
 8004620:	2000      	movs	r0, #0
 8004622:	f00c f895 	bl	8010750 <fflush>
 8004626:	f00b ffda 	bl	80105de <abort>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	e00a      	b.n	8004646 <tcp_remove_listener+0x42>
    if (pcb->listener == lpcb) {
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d102      	bne.n	8004640 <tcp_remove_listener+0x3c>
      pcb->listener = NULL;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1f1      	bne.n	8004630 <tcp_remove_listener+0x2c>
    }
  }
}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	080125b8 	.word	0x080125b8
 8004658:	08012630 	.word	0x08012630
 800465c:	080125ec 	.word	0x080125ec

08004660 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10b      	bne.n	8004686 <tcp_listen_closed+0x26>
 800466e:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <tcp_listen_closed+0x74>)
 8004670:	f240 1211 	movw	r2, #273	; 0x111
 8004674:	4918      	ldr	r1, [pc, #96]	; (80046d8 <tcp_listen_closed+0x78>)
 8004676:	4819      	ldr	r0, [pc, #100]	; (80046dc <tcp_listen_closed+0x7c>)
 8004678:	f00b ff68 	bl	801054c <iprintf>
 800467c:	2000      	movs	r0, #0
 800467e:	f00c f867 	bl	8010750 <fflush>
 8004682:	f00b ffac 	bl	80105de <abort>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	7d1b      	ldrb	r3, [r3, #20]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d00b      	beq.n	80046a6 <tcp_listen_closed+0x46>
 800468e:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <tcp_listen_closed+0x74>)
 8004690:	f44f 7289 	mov.w	r2, #274	; 0x112
 8004694:	4912      	ldr	r1, [pc, #72]	; (80046e0 <tcp_listen_closed+0x80>)
 8004696:	4811      	ldr	r0, [pc, #68]	; (80046dc <tcp_listen_closed+0x7c>)
 8004698:	f00b ff58 	bl	801054c <iprintf>
 800469c:	2000      	movs	r0, #0
 800469e:	f00c f857 	bl	8010750 <fflush>
 80046a2:	f00b ff9c 	bl	80105de <abort>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80046a6:	2301      	movs	r3, #1
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	e00b      	b.n	80046c4 <tcp_listen_closed+0x64>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80046ac:	4a0d      	ldr	r2, [pc, #52]	; (80046e4 <tcp_listen_closed+0x84>)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff ffa3 	bl	8004604 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3301      	adds	r3, #1
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d9f0      	bls.n	80046ac <tcp_listen_closed+0x4c>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80046ca:	bf00      	nop
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	080125b8 	.word	0x080125b8
 80046d8:	08012658 	.word	0x08012658
 80046dc:	080125ec 	.word	0x080125ec
 80046e0:	08012664 	.word	0x08012664
 80046e4:	08013e60 	.word	0x08013e60

080046e8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80046e8:	b5b0      	push	{r4, r5, r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af04      	add	r7, sp, #16
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10b      	bne.n	8004712 <tcp_close_shutdown+0x2a>
 80046fa:	4b66      	ldr	r3, [pc, #408]	; (8004894 <tcp_close_shutdown+0x1ac>)
 80046fc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8004700:	4965      	ldr	r1, [pc, #404]	; (8004898 <tcp_close_shutdown+0x1b0>)
 8004702:	4866      	ldr	r0, [pc, #408]	; (800489c <tcp_close_shutdown+0x1b4>)
 8004704:	f00b ff22 	bl	801054c <iprintf>
 8004708:	2000      	movs	r0, #0
 800470a:	f00c f821 	bl	8010750 <fflush>
 800470e:	f00b ff66 	bl	80105de <abort>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d06b      	beq.n	80047f0 <tcp_close_shutdown+0x108>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	7d1b      	ldrb	r3, [r3, #20]
 800471c:	2b04      	cmp	r3, #4
 800471e:	d003      	beq.n	8004728 <tcp_close_shutdown+0x40>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	7d1b      	ldrb	r3, [r3, #20]
 8004724:	2b07      	cmp	r3, #7
 8004726:	d163      	bne.n	80047f0 <tcp_close_shutdown+0x108>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800472c:	2b00      	cmp	r3, #0
 800472e:	d104      	bne.n	800473a <tcp_close_shutdown+0x52>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004734:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004738:	d05a      	beq.n	80047f0 <tcp_close_shutdown+0x108>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	8b5b      	ldrh	r3, [r3, #26]
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10b      	bne.n	800475e <tcp_close_shutdown+0x76>
 8004746:	4b53      	ldr	r3, [pc, #332]	; (8004894 <tcp_close_shutdown+0x1ac>)
 8004748:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800474c:	4954      	ldr	r1, [pc, #336]	; (80048a0 <tcp_close_shutdown+0x1b8>)
 800474e:	4853      	ldr	r0, [pc, #332]	; (800489c <tcp_close_shutdown+0x1b4>)
 8004750:	f00b fefc 	bl	801054c <iprintf>
 8004754:	2000      	movs	r0, #0
 8004756:	f00b fffb 	bl	8010750 <fflush>
 800475a:	f00b ff40 	bl	80105de <abort>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004766:	687d      	ldr	r5, [r7, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3304      	adds	r3, #4
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	8ad2      	ldrh	r2, [r2, #22]
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	8b09      	ldrh	r1, [r1, #24]
 8004774:	9102      	str	r1, [sp, #8]
 8004776:	9201      	str	r2, [sp, #4]
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	462b      	mov	r3, r5
 800477c:	4622      	mov	r2, r4
 800477e:	4601      	mov	r1, r0
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f005 f929 	bl	80099d8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f001 f914 	bl	80059b4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800478c:	4b45      	ldr	r3, [pc, #276]	; (80048a4 <tcp_close_shutdown+0x1bc>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	429a      	cmp	r2, r3
 8004794:	d105      	bne.n	80047a2 <tcp_close_shutdown+0xba>
 8004796:	4b43      	ldr	r3, [pc, #268]	; (80048a4 <tcp_close_shutdown+0x1bc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	4a41      	ldr	r2, [pc, #260]	; (80048a4 <tcp_close_shutdown+0x1bc>)
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	e013      	b.n	80047ca <tcp_close_shutdown+0xe2>
 80047a2:	4b40      	ldr	r3, [pc, #256]	; (80048a4 <tcp_close_shutdown+0x1bc>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	e00c      	b.n	80047c4 <tcp_close_shutdown+0xdc>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d104      	bne.n	80047be <tcp_close_shutdown+0xd6>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	60da      	str	r2, [r3, #12]
 80047bc:	e005      	b.n	80047ca <tcp_close_shutdown+0xe2>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1ef      	bne.n	80047aa <tcp_close_shutdown+0xc2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	60da      	str	r2, [r3, #12]
 80047d0:	4b35      	ldr	r3, [pc, #212]	; (80048a8 <tcp_close_shutdown+0x1c0>)
 80047d2:	2201      	movs	r2, #1
 80047d4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80047d6:	4b35      	ldr	r3, [pc, #212]	; (80048ac <tcp_close_shutdown+0x1c4>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d102      	bne.n	80047e6 <tcp_close_shutdown+0xfe>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80047e0:	f003 fe96 	bl	8008510 <tcp_trigger_input_pcb_close>
 80047e4:	e002      	b.n	80047ec <tcp_close_shutdown+0x104>
      } else {
        tcp_free(pcb);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff feb2 	bl	8004550 <tcp_free>
      }
      return ERR_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	e04d      	b.n	800488c <tcp_close_shutdown+0x1a4>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	7d1b      	ldrb	r3, [r3, #20]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d02d      	beq.n	8004854 <tcp_close_shutdown+0x16c>
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d036      	beq.n	800486a <tcp_close_shutdown+0x182>
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d13f      	bne.n	8004880 <tcp_close_shutdown+0x198>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	8adb      	ldrh	r3, [r3, #22]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d021      	beq.n	800484c <tcp_close_shutdown+0x164>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8004808:	4b29      	ldr	r3, [pc, #164]	; (80048b0 <tcp_close_shutdown+0x1c8>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	429a      	cmp	r2, r3
 8004810:	d105      	bne.n	800481e <tcp_close_shutdown+0x136>
 8004812:	4b27      	ldr	r3, [pc, #156]	; (80048b0 <tcp_close_shutdown+0x1c8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4a25      	ldr	r2, [pc, #148]	; (80048b0 <tcp_close_shutdown+0x1c8>)
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	e013      	b.n	8004846 <tcp_close_shutdown+0x15e>
 800481e:	4b24      	ldr	r3, [pc, #144]	; (80048b0 <tcp_close_shutdown+0x1c8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60bb      	str	r3, [r7, #8]
 8004824:	e00c      	b.n	8004840 <tcp_close_shutdown+0x158>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	429a      	cmp	r2, r3
 800482e:	d104      	bne.n	800483a <tcp_close_shutdown+0x152>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	60da      	str	r2, [r3, #12]
 8004838:	e005      	b.n	8004846 <tcp_close_shutdown+0x15e>
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1ef      	bne.n	8004826 <tcp_close_shutdown+0x13e>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff fe7f 	bl	8004550 <tcp_free>
      break;
 8004852:	e01a      	b.n	800488a <tcp_close_shutdown+0x1a2>
    case LISTEN:
      tcp_listen_closed(pcb);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff ff03 	bl	8004660 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	4815      	ldr	r0, [pc, #84]	; (80048b4 <tcp_close_shutdown+0x1cc>)
 800485e:	f001 f8f9 	bl	8005a54 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff fe96 	bl	8004594 <tcp_free_listen>
      break;
 8004868:	e00f      	b.n	800488a <tcp_close_shutdown+0x1a2>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	480d      	ldr	r0, [pc, #52]	; (80048a4 <tcp_close_shutdown+0x1bc>)
 800486e:	f001 f8f1 	bl	8005a54 <tcp_pcb_remove>
 8004872:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <tcp_close_shutdown+0x1c0>)
 8004874:	2201      	movs	r2, #1
 8004876:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7ff fe69 	bl	8004550 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800487e:	e004      	b.n	800488a <tcp_close_shutdown+0x1a2>
    default:
      return tcp_close_shutdown_fin(pcb);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f819 	bl	80048b8 <tcp_close_shutdown_fin>
 8004886:	4603      	mov	r3, r0
 8004888:	e000      	b.n	800488c <tcp_close_shutdown+0x1a4>
  }
  return ERR_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bdb0      	pop	{r4, r5, r7, pc}
 8004894:	080125b8 	.word	0x080125b8
 8004898:	0801267c 	.word	0x0801267c
 800489c:	080125ec 	.word	0x080125ec
 80048a0:	0801269c 	.word	0x0801269c
 80048a4:	200015cc 	.word	0x200015cc
 80048a8:	200015c8 	.word	0x200015c8
 80048ac:	200015e0 	.word	0x200015e0
 80048b0:	200015d8 	.word	0x200015d8
 80048b4:	200015d4 	.word	0x200015d4

080048b8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10b      	bne.n	80048de <tcp_close_shutdown_fin+0x26>
 80048c6:	4b2f      	ldr	r3, [pc, #188]	; (8004984 <tcp_close_shutdown_fin+0xcc>)
 80048c8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80048cc:	492e      	ldr	r1, [pc, #184]	; (8004988 <tcp_close_shutdown_fin+0xd0>)
 80048ce:	482f      	ldr	r0, [pc, #188]	; (800498c <tcp_close_shutdown_fin+0xd4>)
 80048d0:	f00b fe3c 	bl	801054c <iprintf>
 80048d4:	2000      	movs	r0, #0
 80048d6:	f00b ff3b 	bl	8010750 <fflush>
 80048da:	f00b fe80 	bl	80105de <abort>

  switch (pcb->state) {
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	7d1b      	ldrb	r3, [r3, #20]
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d010      	beq.n	8004908 <tcp_close_shutdown_fin+0x50>
 80048e6:	2b07      	cmp	r3, #7
 80048e8:	d01b      	beq.n	8004922 <tcp_close_shutdown_fin+0x6a>
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	d126      	bne.n	800493c <tcp_close_shutdown_fin+0x84>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f004 f850 	bl	8008994 <tcp_send_fin>
 80048f4:	4603      	mov	r3, r0
 80048f6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80048f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d11f      	bne.n	8004940 <tcp_close_shutdown_fin+0x88>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2205      	movs	r2, #5
 8004904:	751a      	strb	r2, [r3, #20]
      }
      break;
 8004906:	e01b      	b.n	8004940 <tcp_close_shutdown_fin+0x88>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f004 f843 	bl	8008994 <tcp_send_fin>
 800490e:	4603      	mov	r3, r0
 8004910:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8004912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d114      	bne.n	8004944 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2205      	movs	r2, #5
 800491e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8004920:	e010      	b.n	8004944 <tcp_close_shutdown_fin+0x8c>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f004 f836 	bl	8008994 <tcp_send_fin>
 8004928:	4603      	mov	r3, r0
 800492a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800492c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d109      	bne.n	8004948 <tcp_close_shutdown_fin+0x90>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2209      	movs	r2, #9
 8004938:	751a      	strb	r2, [r3, #20]
      }
      break;
 800493a:	e005      	b.n	8004948 <tcp_close_shutdown_fin+0x90>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800493c:	2300      	movs	r3, #0
 800493e:	e01c      	b.n	800497a <tcp_close_shutdown_fin+0xc2>
      break;
 8004940:	bf00      	nop
 8004942:	e002      	b.n	800494a <tcp_close_shutdown_fin+0x92>
      break;
 8004944:	bf00      	nop
 8004946:	e000      	b.n	800494a <tcp_close_shutdown_fin+0x92>
      break;
 8004948:	bf00      	nop
  }

  if (err == ERR_OK) {
 800494a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d103      	bne.n	800495a <tcp_close_shutdown_fin+0xa2>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f004 f96c 	bl	8008c30 <tcp_output>
 8004958:	e00d      	b.n	8004976 <tcp_close_shutdown_fin+0xbe>
  } else if (err == ERR_MEM) {
 800495a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004962:	d108      	bne.n	8004976 <tcp_close_shutdown_fin+0xbe>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	8b5b      	ldrh	r3, [r3, #26]
 8004968:	f043 0308 	orr.w	r3, r3, #8
 800496c:	b29a      	uxth	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	e001      	b.n	800497a <tcp_close_shutdown_fin+0xc2>
  }
  return err;
 8004976:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	080125b8 	.word	0x080125b8
 8004988:	08012658 	.word	0x08012658
 800498c:	080125ec 	.word	0x080125ec

08004990 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <tcp_close+0x22>
 800499e:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <tcp_close+0x4c>)
 80049a0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80049a4:	490e      	ldr	r1, [pc, #56]	; (80049e0 <tcp_close+0x50>)
 80049a6:	480f      	ldr	r0, [pc, #60]	; (80049e4 <tcp_close+0x54>)
 80049a8:	f7fc fea9 	bl	80016fe <lwip_win32_platform_diag>
 80049ac:	f06f 030f 	mvn.w	r3, #15
 80049b0:	e00f      	b.n	80049d2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	7d1b      	ldrb	r3, [r3, #20]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d006      	beq.n	80049c8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	8b5b      	ldrh	r3, [r3, #26]
 80049be:	f043 0310 	orr.w	r3, r3, #16
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80049c8:	2101      	movs	r1, #1
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff fe8c 	bl	80046e8 <tcp_close_shutdown>
 80049d0:	4603      	mov	r3, r0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	080125b8 	.word	0x080125b8
 80049e0:	080126b8 	.word	0x080126b8
 80049e4:	080125ec 	.word	0x080125ec

080049e8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08e      	sub	sp, #56	; 0x38
 80049ec:	af04      	add	r7, sp, #16
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d107      	bne.n	8004a08 <tcp_abandon+0x20>
 80049f8:	4b54      	ldr	r3, [pc, #336]	; (8004b4c <tcp_abandon+0x164>)
 80049fa:	f240 223d 	movw	r2, #573	; 0x23d
 80049fe:	4954      	ldr	r1, [pc, #336]	; (8004b50 <tcp_abandon+0x168>)
 8004a00:	4854      	ldr	r0, [pc, #336]	; (8004b54 <tcp_abandon+0x16c>)
 8004a02:	f7fc fe7c 	bl	80016fe <lwip_win32_platform_diag>
 8004a06:	e09e      	b.n	8004b46 <tcp_abandon+0x15e>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	7d1b      	ldrb	r3, [r3, #20]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d10b      	bne.n	8004a28 <tcp_abandon+0x40>
 8004a10:	4b4e      	ldr	r3, [pc, #312]	; (8004b4c <tcp_abandon+0x164>)
 8004a12:	f240 2241 	movw	r2, #577	; 0x241
 8004a16:	4950      	ldr	r1, [pc, #320]	; (8004b58 <tcp_abandon+0x170>)
 8004a18:	484e      	ldr	r0, [pc, #312]	; (8004b54 <tcp_abandon+0x16c>)
 8004a1a:	f00b fd97 	bl	801054c <iprintf>
 8004a1e:	2000      	movs	r0, #0
 8004a20:	f00b fe96 	bl	8010750 <fflush>
 8004a24:	f00b fddb 	bl	80105de <abort>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	7d1b      	ldrb	r3, [r3, #20]
 8004a2c:	2b0a      	cmp	r3, #10
 8004a2e:	d107      	bne.n	8004a40 <tcp_abandon+0x58>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	484a      	ldr	r0, [pc, #296]	; (8004b5c <tcp_abandon+0x174>)
 8004a34:	f001 f80e 	bl	8005a54 <tcp_pcb_remove>
    tcp_free(pcb);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff fd89 	bl	8004550 <tcp_free>
 8004a3e:	e082      	b.n	8004b46 <tcp_abandon+0x15e>
  } else {
    int send_rst = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a4c:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5a:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	7d1b      	ldrb	r3, [r3, #20]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d126      	bne.n	8004ab8 <tcp_abandon+0xd0>
      if (pcb->local_port != 0) {
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	8adb      	ldrh	r3, [r3, #22]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d02e      	beq.n	8004ad0 <tcp_abandon+0xe8>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8004a72:	4b3b      	ldr	r3, [pc, #236]	; (8004b60 <tcp_abandon+0x178>)
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d105      	bne.n	8004a88 <tcp_abandon+0xa0>
 8004a7c:	4b38      	ldr	r3, [pc, #224]	; (8004b60 <tcp_abandon+0x178>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	4a37      	ldr	r2, [pc, #220]	; (8004b60 <tcp_abandon+0x178>)
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	e013      	b.n	8004ab0 <tcp_abandon+0xc8>
 8004a88:	4b35      	ldr	r3, [pc, #212]	; (8004b60 <tcp_abandon+0x178>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	61fb      	str	r3, [r7, #28]
 8004a8e:	e00c      	b.n	8004aaa <tcp_abandon+0xc2>
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d104      	bne.n	8004aa4 <tcp_abandon+0xbc>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	60da      	str	r2, [r3, #12]
 8004aa2:	e005      	b.n	8004ab0 <tcp_abandon+0xc8>
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	61fb      	str	r3, [r7, #28]
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1ef      	bne.n	8004a90 <tcp_abandon+0xa8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	60da      	str	r2, [r3, #12]
 8004ab6:	e00b      	b.n	8004ad0 <tcp_abandon+0xe8>
      }
    } else {
      send_rst = reset;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	8adb      	ldrh	r3, [r3, #22]
 8004ac0:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4827      	ldr	r0, [pc, #156]	; (8004b64 <tcp_abandon+0x17c>)
 8004ac6:	f000 ffc5 	bl	8005a54 <tcp_pcb_remove>
 8004aca:	4b27      	ldr	r3, [pc, #156]	; (8004b68 <tcp_abandon+0x180>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d004      	beq.n	8004ae2 <tcp_abandon+0xfa>
      tcp_segs_free(pcb->unacked);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fd5d 	bl	800559c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d004      	beq.n	8004af4 <tcp_abandon+0x10c>
      tcp_segs_free(pcb->unsent);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fd54 	bl	800559c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d004      	beq.n	8004b06 <tcp_abandon+0x11e>
      tcp_segs_free(pcb->ooseq);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fd4b 	bl	800559c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00e      	beq.n	8004b2a <tcp_abandon+0x142>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3304      	adds	r3, #4
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	8b12      	ldrh	r2, [r2, #24]
 8004b16:	9202      	str	r2, [sp, #8]
 8004b18:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004b1a:	9201      	str	r2, [sp, #4]
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	69b9      	ldr	r1, [r7, #24]
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f004 ff57 	bl	80099d8 <tcp_rst>
    }
    last_state = pcb->state;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	7d1b      	ldrb	r3, [r3, #20]
 8004b2e:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff fd0d 	bl	8004550 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d004      	beq.n	8004b46 <tcp_abandon+0x15e>
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f06f 010c 	mvn.w	r1, #12
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	4798      	blx	r3
  }
}
 8004b46:	3728      	adds	r7, #40	; 0x28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	080125b8 	.word	0x080125b8
 8004b50:	080126ec 	.word	0x080126ec
 8004b54:	080125ec 	.word	0x080125ec
 8004b58:	08012708 	.word	0x08012708
 8004b5c:	200015dc 	.word	0x200015dc
 8004b60:	200015d8 	.word	0x200015d8
 8004b64:	200015cc 	.word	0x200015cc
 8004b68:	200015c8 	.word	0x200015c8

08004b6c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8004b74:	2101      	movs	r1, #1
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff ff36 	bl	80049e8 <tcp_abandon>
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10b      	bne.n	8004baa <tcp_update_rcv_ann_wnd+0x26>
 8004b92:	4b2b      	ldr	r3, [pc, #172]	; (8004c40 <tcp_update_rcv_ann_wnd+0xbc>)
 8004b94:	f240 32aa 	movw	r2, #938	; 0x3aa
 8004b98:	492a      	ldr	r1, [pc, #168]	; (8004c44 <tcp_update_rcv_ann_wnd+0xc0>)
 8004b9a:	482b      	ldr	r0, [pc, #172]	; (8004c48 <tcp_update_rcv_ann_wnd+0xc4>)
 8004b9c:	f00b fcd6 	bl	801054c <iprintf>
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	f00b fdd5 	bl	8010750 <fflush>
 8004ba6:	f00b fd1a 	bl	80105de <abort>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004bb2:	4413      	add	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8004bbe:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8004bc2:	d802      	bhi.n	8004bca <tcp_update_rcv_ann_wnd+0x46>
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8004bc8:	e001      	b.n	8004bce <tcp_update_rcv_ann_wnd+0x4a>
 8004bca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004bce:	4413      	add	r3, r2
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	db08      	blt.n	8004bea <tcp_update_rcv_ann_wnd+0x66>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	e025      	b.n	8004c36 <tcp_update_rcv_ann_wnd+0xb2>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	da03      	bge.n	8004c00 <tcp_update_rcv_ann_wnd+0x7c>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bfe:	e019      	b.n	8004c34 <tcp_update_rcv_ann_wnd+0xb0>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c12:	d30b      	bcc.n	8004c2c <tcp_update_rcv_ann_wnd+0xa8>
 8004c14:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <tcp_update_rcv_ann_wnd+0xbc>)
 8004c16:	f240 32ba 	movw	r2, #954	; 0x3ba
 8004c1a:	490c      	ldr	r1, [pc, #48]	; (8004c4c <tcp_update_rcv_ann_wnd+0xc8>)
 8004c1c:	480a      	ldr	r0, [pc, #40]	; (8004c48 <tcp_update_rcv_ann_wnd+0xc4>)
 8004c1e:	f00b fc95 	bl	801054c <iprintf>
 8004c22:	2000      	movs	r0, #0
 8004c24:	f00b fd94 	bl	8010750 <fflush>
 8004c28:	f00b fcd9 	bl	80105de <abort>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8004c34:	2300      	movs	r3, #0
  }
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	080125b8 	.word	0x080125b8
 8004c44:	08012804 	.word	0x08012804
 8004c48:	080125ec 	.word	0x080125ec
 8004c4c:	08012828 	.word	0x08012828

08004c50 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d107      	bne.n	8004c72 <tcp_recved+0x22>
 8004c62:	4b21      	ldr	r3, [pc, #132]	; (8004ce8 <tcp_recved+0x98>)
 8004c64:	f240 32d3 	movw	r2, #979	; 0x3d3
 8004c68:	4920      	ldr	r1, [pc, #128]	; (8004cec <tcp_recved+0x9c>)
 8004c6a:	4821      	ldr	r0, [pc, #132]	; (8004cf0 <tcp_recved+0xa0>)
 8004c6c:	f7fc fd47 	bl	80016fe <lwip_win32_platform_diag>
 8004c70:	e036      	b.n	8004ce0 <tcp_recved+0x90>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	7d1b      	ldrb	r3, [r3, #20]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d10b      	bne.n	8004c92 <tcp_recved+0x42>
 8004c7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ce8 <tcp_recved+0x98>)
 8004c7c:	f240 32d7 	movw	r2, #983	; 0x3d7
 8004c80:	491c      	ldr	r1, [pc, #112]	; (8004cf4 <tcp_recved+0xa4>)
 8004c82:	481b      	ldr	r0, [pc, #108]	; (8004cf0 <tcp_recved+0xa0>)
 8004c84:	f00b fc62 	bl	801054c <iprintf>
 8004c88:	2000      	movs	r0, #0
 8004c8a:	f00b fd61 	bl	8010750 <fflush>
 8004c8e:	f00b fca6 	bl	80105de <abort>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8004c96:	887b      	ldrh	r3, [r7, #2]
 8004c98:	4413      	add	r3, r2
 8004c9a:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8004c9c:	89fb      	ldrh	r3, [r7, #14]
 8004c9e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004ca2:	d804      	bhi.n	8004cae <tcp_recved+0x5e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca8:	89fa      	ldrh	r2, [r7, #14]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d204      	bcs.n	8004cb8 <tcp_recved+0x68>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004cb4:	851a      	strh	r2, [r3, #40]	; 0x28
 8004cb6:	e002      	b.n	8004cbe <tcp_recved+0x6e>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	89fa      	ldrh	r2, [r7, #14]
 8004cbc:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff ff60 	bl	8004b84 <tcp_update_rcv_ann_wnd>
 8004cc4:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2bc7      	cmp	r3, #199	; 0xc7
 8004cca:	d909      	bls.n	8004ce0 <tcp_recved+0x90>
    tcp_ack_now(pcb);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	8b5b      	ldrh	r3, [r3, #26]
 8004cd0:	f043 0302 	orr.w	r3, r3, #2
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f003 ffa8 	bl	8008c30 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	080125b8 	.word	0x080125b8
 8004cec:	08012844 	.word	0x08012844
 8004cf0:	080125ec 	.word	0x080125ec
 8004cf4:	0801285c 	.word	0x0801285c

08004cf8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8004cf8:	b5b0      	push	{r4, r5, r7, lr}
 8004cfa:	b090      	sub	sp, #64	; 0x40
 8004cfc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8004d04:	4ba1      	ldr	r3, [pc, #644]	; (8004f8c <tcp_slowtmr+0x294>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	4aa0      	ldr	r2, [pc, #640]	; (8004f8c <tcp_slowtmr+0x294>)
 8004d0c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8004d0e:	4ba0      	ldr	r3, [pc, #640]	; (8004f90 <tcp_slowtmr+0x298>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	3301      	adds	r3, #1
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	4b9e      	ldr	r3, [pc, #632]	; (8004f90 <tcp_slowtmr+0x298>)
 8004d18:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8004d1e:	4b9d      	ldr	r3, [pc, #628]	; (8004f94 <tcp_slowtmr+0x29c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8004d24:	e2c3      	b.n	80052ae <tcp_slowtmr+0x5b6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED", pcb->state != CLOSED);
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	7d1b      	ldrb	r3, [r3, #20]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10b      	bne.n	8004d46 <tcp_slowtmr+0x4e>
 8004d2e:	4b9a      	ldr	r3, [pc, #616]	; (8004f98 <tcp_slowtmr+0x2a0>)
 8004d30:	f240 42c2 	movw	r2, #1218	; 0x4c2
 8004d34:	4999      	ldr	r1, [pc, #612]	; (8004f9c <tcp_slowtmr+0x2a4>)
 8004d36:	489a      	ldr	r0, [pc, #616]	; (8004fa0 <tcp_slowtmr+0x2a8>)
 8004d38:	f00b fc08 	bl	801054c <iprintf>
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	f00b fd07 	bl	8010750 <fflush>
 8004d42:	f00b fc4c 	bl	80105de <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN", pcb->state != LISTEN);
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	7d1b      	ldrb	r3, [r3, #20]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d10b      	bne.n	8004d66 <tcp_slowtmr+0x6e>
 8004d4e:	4b92      	ldr	r3, [pc, #584]	; (8004f98 <tcp_slowtmr+0x2a0>)
 8004d50:	f240 42c3 	movw	r2, #1219	; 0x4c3
 8004d54:	4993      	ldr	r1, [pc, #588]	; (8004fa4 <tcp_slowtmr+0x2ac>)
 8004d56:	4892      	ldr	r0, [pc, #584]	; (8004fa0 <tcp_slowtmr+0x2a8>)
 8004d58:	f00b fbf8 	bl	801054c <iprintf>
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	f00b fcf7 	bl	8010750 <fflush>
 8004d62:	f00b fc3c 	bl	80105de <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	7d1b      	ldrb	r3, [r3, #20]
 8004d6a:	2b0a      	cmp	r3, #10
 8004d6c:	d10b      	bne.n	8004d86 <tcp_slowtmr+0x8e>
 8004d6e:	4b8a      	ldr	r3, [pc, #552]	; (8004f98 <tcp_slowtmr+0x2a0>)
 8004d70:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8004d74:	498c      	ldr	r1, [pc, #560]	; (8004fa8 <tcp_slowtmr+0x2b0>)
 8004d76:	488a      	ldr	r0, [pc, #552]	; (8004fa0 <tcp_slowtmr+0x2a8>)
 8004d78:	f00b fbe8 	bl	801054c <iprintf>
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	f00b fce7 	bl	8010750 <fflush>
 8004d82:	f00b fc2c 	bl	80105de <abort>
    if (pcb->last_timer == tcp_timer_ctr) {
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d88:	7f9a      	ldrb	r2, [r3, #30]
 8004d8a:	4b81      	ldr	r3, [pc, #516]	; (8004f90 <tcp_slowtmr+0x298>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d105      	bne.n	8004d9e <tcp_slowtmr+0xa6>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8004d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d94:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8004d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8004d9c:	e287      	b.n	80052ae <tcp_slowtmr+0x5b6>
    }
    pcb->last_timer = tcp_timer_ctr;
 8004d9e:	4b7c      	ldr	r3, [pc, #496]	; (8004f90 <tcp_slowtmr+0x298>)
 8004da0:	781a      	ldrb	r2, [r3, #0]
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	7d1b      	ldrb	r3, [r3, #20]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d10a      	bne.n	8004dd0 <tcp_slowtmr+0xd8>
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dc0:	2b05      	cmp	r3, #5
 8004dc2:	d905      	bls.n	8004dd0 <tcp_slowtmr+0xd8>
      ++pcb_remove;
 8004dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dc8:	3301      	adds	r3, #1
 8004dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8004dce:	e129      	b.n	8005024 <tcp_slowtmr+0x32c>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8004dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dd6:	2b0b      	cmp	r3, #11
 8004dd8:	d905      	bls.n	8004de6 <tcp_slowtmr+0xee>
      ++pcb_remove;
 8004dda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dde:	3301      	adds	r3, #1
 8004de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004de4:	e11e      	b.n	8005024 <tcp_slowtmr+0x32c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d07f      	beq.n	8004ef0 <tcp_slowtmr+0x1f8>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00b      	beq.n	8004e10 <tcp_slowtmr+0x118>
 8004df8:	4b67      	ldr	r3, [pc, #412]	; (8004f98 <tcp_slowtmr+0x2a0>)
 8004dfa:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 8004dfe:	496b      	ldr	r1, [pc, #428]	; (8004fac <tcp_slowtmr+0x2b4>)
 8004e00:	4867      	ldr	r0, [pc, #412]	; (8004fa0 <tcp_slowtmr+0x2a8>)
 8004e02:	f00b fba3 	bl	801054c <iprintf>
 8004e06:	2000      	movs	r0, #0
 8004e08:	f00b fca2 	bl	8010750 <fflush>
 8004e0c:	f00b fbe7 	bl	80105de <abort>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8004e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10b      	bne.n	8004e30 <tcp_slowtmr+0x138>
 8004e18:	4b5f      	ldr	r3, [pc, #380]	; (8004f98 <tcp_slowtmr+0x2a0>)
 8004e1a:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8004e1e:	4964      	ldr	r1, [pc, #400]	; (8004fb0 <tcp_slowtmr+0x2b8>)
 8004e20:	485f      	ldr	r0, [pc, #380]	; (8004fa0 <tcp_slowtmr+0x2a8>)
 8004e22:	f00b fb93 	bl	801054c <iprintf>
 8004e26:	2000      	movs	r0, #0
 8004e28:	f00b fc92 	bl	8010750 <fflush>
 8004e2c:	f00b fbd7 	bl	80105de <abort>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8004e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e32:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8004e36:	2b0b      	cmp	r3, #11
 8004e38:	d905      	bls.n	8004e46 <tcp_slowtmr+0x14e>
          ++pcb_remove; /* max probes reached */
 8004e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e3e:	3301      	adds	r3, #1
 8004e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e44:	e0ee      	b.n	8005024 <tcp_slowtmr+0x32c>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8004e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e48:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	4a59      	ldr	r2, [pc, #356]	; (8004fb4 <tcp_slowtmr+0x2bc>)
 8004e50:	5cd3      	ldrb	r3, [r2, r3]
 8004e52:	77fb      	strb	r3, [r7, #31]
          if (pcb->persist_cnt < backoff_cnt) {
 8004e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e56:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004e5a:	7ffa      	ldrb	r2, [r7, #31]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d907      	bls.n	8004e70 <tcp_slowtmr+0x178>
            pcb->persist_cnt++;
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004e66:	3301      	adds	r3, #1
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8004e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e72:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004e76:	7ffa      	ldrb	r2, [r7, #31]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	f200 80d3 	bhi.w	8005024 <tcp_slowtmr+0x32c>
            int next_slot = 1; /* increment timer to next slot */
 8004e7e:	2301      	movs	r3, #1
 8004e80:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8004e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d108      	bne.n	8004e9e <tcp_slowtmr+0x1a6>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8004e8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e8e:	f004 fe9b 	bl	8009bc8 <tcp_zero_window_probe>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d014      	beq.n	8004ec2 <tcp_slowtmr+0x1ca>
                next_slot = 0; /* try probe again with current slot */
 8004e98:	2300      	movs	r3, #0
 8004e9a:	623b      	str	r3, [r7, #32]
 8004e9c:	e011      	b.n	8004ec2 <tcp_slowtmr+0x1ca>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ea8:	f003 fc10 	bl	80086cc <tcp_split_unsent_seg>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d107      	bne.n	8004ec2 <tcp_slowtmr+0x1ca>
                if (tcp_output(pcb) == ERR_OK) {
 8004eb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004eb4:	f003 febc 	bl	8008c30 <tcp_output>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <tcp_slowtmr+0x1ca>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80ad 	beq.w	8005024 <tcp_slowtmr+0x32c>
              pcb->persist_cnt = 0;
 8004eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8004ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8004ed8:	2b06      	cmp	r3, #6
 8004eda:	f200 80a3 	bhi.w	8005024 <tcp_slowtmr+0x32c>
                pcb->persist_backoff++;
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eea:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8004eee:	e099      	b.n	8005024 <tcp_slowtmr+0x32c>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	db0f      	blt.n	8004f1a <tcp_slowtmr+0x222>
 8004efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8004f00:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d008      	beq.n	8004f1a <tcp_slowtmr+0x222>
          ++pcb->rtime;
 8004f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3301      	adds	r3, #1
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	b21a      	sxth	r2, r3
 8004f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f18:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8004f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8004f26:	429a      	cmp	r2, r3
 8004f28:	db7c      	blt.n	8005024 <tcp_slowtmr+0x32c>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8004f2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f2c:	f004 f9b6 	bl	800929c <tcp_rexmit_rto_prepare>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d007      	beq.n	8004f46 <tcp_slowtmr+0x24e>
 8004f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d172      	bne.n	8005024 <tcp_slowtmr+0x32c>
 8004f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d06e      	beq.n	8005024 <tcp_slowtmr+0x32c>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	7d1b      	ldrb	r3, [r3, #20]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d03b      	beq.n	8004fc6 <tcp_slowtmr+0x2ce>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f54:	2b0c      	cmp	r3, #12
 8004f56:	bf28      	it	cs
 8004f58:	230c      	movcs	r3, #12
 8004f5a:	77bb      	strb	r3, [r7, #30]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8004f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8004f62:	10db      	asrs	r3, r3, #3
 8004f64:	b21b      	sxth	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8004f6e:	4413      	add	r3, r2
 8004f70:	7fba      	ldrb	r2, [r7, #30]
 8004f72:	4911      	ldr	r1, [pc, #68]	; (8004fb8 <tcp_slowtmr+0x2c0>)
 8004f74:	5c8a      	ldrb	r2, [r1, r2]
 8004f76:	4093      	lsls	r3, r2
 8004f78:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8004f80:	4293      	cmp	r3, r2
 8004f82:	dc1b      	bgt.n	8004fbc <tcp_slowtmr+0x2c4>
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	b21a      	sxth	r2, r3
 8004f88:	e01a      	b.n	8004fc0 <tcp_slowtmr+0x2c8>
 8004f8a:	bf00      	nop
 8004f8c:	200015d0 	.word	0x200015d0
 8004f90:	200003b2 	.word	0x200003b2
 8004f94:	200015cc 	.word	0x200015cc
 8004f98:	080125b8 	.word	0x080125b8
 8004f9c:	080128ec 	.word	0x080128ec
 8004fa0:	080125ec 	.word	0x080125ec
 8004fa4:	08012918 	.word	0x08012918
 8004fa8:	08012944 	.word	0x08012944
 8004fac:	08012970 	.word	0x08012970
 8004fb0:	080129a4 	.word	0x080129a4
 8004fb4:	08013e58 	.word	0x08013e58
 8004fb8:	08013e48 	.word	0x08013e48
 8004fbc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc8:	2200      	movs	r2, #0
 8004fca:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8004fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	bf28      	it	cs
 8004fdc:	4613      	movcs	r3, r2
 8004fde:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 8004fe0:	8afb      	ldrh	r3, [r7, #22]
 8004fe2:	085b      	lsrs	r3, r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8004fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d206      	bcs.n	800500c <tcp_slowtmr+0x314>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8005016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005018:	2200      	movs	r2, #0
 800501a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800501e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005020:	f004 f9ba 	bl	8009398 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8005024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005026:	7d1b      	ldrb	r3, [r3, #20]
 8005028:	2b06      	cmp	r3, #6
 800502a:	d111      	bne.n	8005050 <tcp_slowtmr+0x358>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502e:	8b5b      	ldrh	r3, [r3, #26]
 8005030:	f003 0310 	and.w	r3, r3, #16
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00b      	beq.n	8005050 <tcp_slowtmr+0x358>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005038:	4ba2      	ldr	r3, [pc, #648]	; (80052c4 <tcp_slowtmr+0x5cc>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b28      	cmp	r3, #40	; 0x28
 8005044:	d904      	bls.n	8005050 <tcp_slowtmr+0x358>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800504a:	3301      	adds	r3, #1
 800504c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005052:	7a5b      	ldrb	r3, [r3, #9]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b00      	cmp	r3, #0
 800505a:	d04c      	beq.n	80050f6 <tcp_slowtmr+0x3fe>
        ((pcb->state == ESTABLISHED) ||
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005060:	2b04      	cmp	r3, #4
 8005062:	d003      	beq.n	800506c <tcp_slowtmr+0x374>
         (pcb->state == CLOSE_WAIT))) {
 8005064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005066:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8005068:	2b07      	cmp	r3, #7
 800506a:	d144      	bne.n	80050f6 <tcp_slowtmr+0x3fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800506c:	4b95      	ldr	r3, [pc, #596]	; (80052c4 <tcp_slowtmr+0x5cc>)
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8005076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800507c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8005080:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8005084:	4990      	ldr	r1, [pc, #576]	; (80052c8 <tcp_slowtmr+0x5d0>)
 8005086:	fba1 1303 	umull	r1, r3, r1, r3
 800508a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800508c:	429a      	cmp	r2, r3
 800508e:	d90a      	bls.n	80050a6 <tcp_slowtmr+0x3ae>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005094:	3301      	adds	r3, #1
 8005096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800509a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800509e:	3301      	adds	r3, #1
 80050a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80050a4:	e027      	b.n	80050f6 <tcp_slowtmr+0x3fe>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80050a6:	4b87      	ldr	r3, [pc, #540]	; (80052c4 <tcp_slowtmr+0x5cc>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80050bc:	4618      	mov	r0, r3
 80050be:	4b83      	ldr	r3, [pc, #524]	; (80052cc <tcp_slowtmr+0x5d4>)
 80050c0:	fb03 f300 	mul.w	r3, r3, r0
 80050c4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80050c6:	4980      	ldr	r1, [pc, #512]	; (80052c8 <tcp_slowtmr+0x5d0>)
 80050c8:	fba1 1303 	umull	r1, r3, r1, r3
 80050cc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d911      	bls.n	80050f6 <tcp_slowtmr+0x3fe>
        err = tcp_keepalive(pcb);
 80050d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050d4:	f004 fd32 	bl	8009b3c <tcp_keepalive>
 80050d8:	4603      	mov	r3, r0
 80050da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80050de:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d107      	bne.n	80050f6 <tcp_slowtmr+0x3fe>
          pcb->keep_cnt_sent++;
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80050ec:	3301      	adds	r3, #1
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80050f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d011      	beq.n	8005122 <tcp_slowtmr+0x42a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80050fe:	4b71      	ldr	r3, [pc, #452]	; (80052c4 <tcp_slowtmr+0x5cc>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	1ad2      	subs	r2, r2, r3
 8005108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800510e:	4619      	mov	r1, r3
 8005110:	460b      	mov	r3, r1
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	440b      	add	r3, r1
 8005116:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005118:	429a      	cmp	r2, r3
 800511a:	d302      	bcc.n	8005122 <tcp_slowtmr+0x42a>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800511c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800511e:	f000 fe23 	bl	8005d68 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	7d1b      	ldrb	r3, [r3, #20]
 8005126:	2b03      	cmp	r3, #3
 8005128:	d10b      	bne.n	8005142 <tcp_slowtmr+0x44a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800512a:	4b66      	ldr	r3, [pc, #408]	; (80052c4 <tcp_slowtmr+0x5cc>)
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b28      	cmp	r3, #40	; 0x28
 8005136:	d904      	bls.n	8005142 <tcp_slowtmr+0x44a>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800513c:	3301      	adds	r3, #1
 800513e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005144:	7d1b      	ldrb	r3, [r3, #20]
 8005146:	2b09      	cmp	r3, #9
 8005148:	d10b      	bne.n	8005162 <tcp_slowtmr+0x46a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800514a:	4b5e      	ldr	r3, [pc, #376]	; (80052c4 <tcp_slowtmr+0x5cc>)
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2bf0      	cmp	r3, #240	; 0xf0
 8005156:	d904      	bls.n	8005162 <tcp_slowtmr+0x46a>
        ++pcb_remove;
 8005158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800515c:	3301      	adds	r3, #1
 800515e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005166:	2b00      	cmp	r3, #0
 8005168:	d06a      	beq.n	8005240 <tcp_slowtmr+0x548>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005170:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8005172:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005174:	f000 fc1e 	bl	80059b4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	2b00      	cmp	r3, #0
 800517c:	d015      	beq.n	80051aa <tcp_slowtmr+0x4b2>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800517e:	4b54      	ldr	r3, [pc, #336]	; (80052d0 <tcp_slowtmr+0x5d8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005184:	429a      	cmp	r2, r3
 8005186:	d10b      	bne.n	80051a0 <tcp_slowtmr+0x4a8>
 8005188:	4b52      	ldr	r3, [pc, #328]	; (80052d4 <tcp_slowtmr+0x5dc>)
 800518a:	f240 5271 	movw	r2, #1393	; 0x571
 800518e:	4952      	ldr	r1, [pc, #328]	; (80052d8 <tcp_slowtmr+0x5e0>)
 8005190:	4852      	ldr	r0, [pc, #328]	; (80052dc <tcp_slowtmr+0x5e4>)
 8005192:	f00b f9db 	bl	801054c <iprintf>
 8005196:	2000      	movs	r0, #0
 8005198:	f00b fada 	bl	8010750 <fflush>
 800519c:	f00b fa1f 	bl	80105de <abort>
        prev->next = pcb->next;
 80051a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a6:	60da      	str	r2, [r3, #12]
 80051a8:	e014      	b.n	80051d4 <tcp_slowtmr+0x4dc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80051aa:	4b49      	ldr	r3, [pc, #292]	; (80052d0 <tcp_slowtmr+0x5d8>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d00b      	beq.n	80051cc <tcp_slowtmr+0x4d4>
 80051b4:	4b47      	ldr	r3, [pc, #284]	; (80052d4 <tcp_slowtmr+0x5dc>)
 80051b6:	f240 5275 	movw	r2, #1397	; 0x575
 80051ba:	4949      	ldr	r1, [pc, #292]	; (80052e0 <tcp_slowtmr+0x5e8>)
 80051bc:	4847      	ldr	r0, [pc, #284]	; (80052dc <tcp_slowtmr+0x5e4>)
 80051be:	f00b f9c5 	bl	801054c <iprintf>
 80051c2:	2000      	movs	r0, #0
 80051c4:	f00b fac4 	bl	8010750 <fflush>
 80051c8:	f00b fa09 	bl	80105de <abort>
        tcp_active_pcbs = pcb->next;
 80051cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	4a3f      	ldr	r2, [pc, #252]	; (80052d0 <tcp_slowtmr+0x5d8>)
 80051d2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80051d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d013      	beq.n	8005204 <tcp_slowtmr+0x50c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80051dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051de:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80051e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80051e4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80051e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e8:	3304      	adds	r3, #4
 80051ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ec:	8ad2      	ldrh	r2, [r2, #22]
 80051ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051f0:	8b09      	ldrh	r1, [r1, #24]
 80051f2:	9102      	str	r1, [sp, #8]
 80051f4:	9201      	str	r2, [sp, #4]
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	462b      	mov	r3, r5
 80051fa:	4622      	mov	r2, r4
 80051fc:	4601      	mov	r1, r0
 80051fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005200:	f004 fbea 	bl	80099d8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8005204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 800520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520c:	7d1b      	ldrb	r3, [r3, #20]
 800520e:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 8005210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005212:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 8005214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff f998 	bl	8004550 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8005220:	4b30      	ldr	r3, [pc, #192]	; (80052e4 <tcp_slowtmr+0x5ec>)
 8005222:	2200      	movs	r2, #0
 8005224:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <tcp_slowtmr+0x53e>
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f06f 010c 	mvn.w	r1, #12
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8005236:	4b2b      	ldr	r3, [pc, #172]	; (80052e4 <tcp_slowtmr+0x5ec>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d037      	beq.n	80052ae <tcp_slowtmr+0x5b6>
        goto tcp_slowtmr_start;
 800523e:	e56c      	b.n	8004d1a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8005240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005242:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	7f1b      	ldrb	r3, [r3, #28]
 800524e:	3301      	adds	r3, #1
 8005250:	b2da      	uxtb	r2, r3
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	7f1a      	ldrb	r2, [r3, #28]
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	7f5b      	ldrb	r3, [r3, #29]
 800525e:	429a      	cmp	r2, r3
 8005260:	d325      	bcc.n	80052ae <tcp_slowtmr+0x5b6>
        prev->polltmr = 0;
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	2200      	movs	r2, #0
 8005266:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8005268:	4b1e      	ldr	r3, [pc, #120]	; (80052e4 <tcp_slowtmr+0x5ec>)
 800526a:	2200      	movs	r2, #0
 800526c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00b      	beq.n	8005290 <tcp_slowtmr+0x598>
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800527e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005280:	6912      	ldr	r2, [r2, #16]
 8005282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005284:	4610      	mov	r0, r2
 8005286:	4798      	blx	r3
 8005288:	4603      	mov	r3, r0
 800528a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800528e:	e002      	b.n	8005296 <tcp_slowtmr+0x59e>
 8005290:	2300      	movs	r3, #0
 8005292:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8005296:	4b13      	ldr	r3, [pc, #76]	; (80052e4 <tcp_slowtmr+0x5ec>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d000      	beq.n	80052a0 <tcp_slowtmr+0x5a8>
          goto tcp_slowtmr_start;
 800529e:	e53c      	b.n	8004d1a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80052a0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d102      	bne.n	80052ae <tcp_slowtmr+0x5b6>
          tcp_output(prev);
 80052a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052aa:	f003 fcc1 	bl	8008c30 <tcp_output>
  while (pcb != NULL) {
 80052ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f47f ad38 	bne.w	8004d26 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80052ba:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <tcp_slowtmr+0x5f0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80052c0:	e076      	b.n	80053b0 <tcp_slowtmr+0x6b8>
 80052c2:	bf00      	nop
 80052c4:	200015d0 	.word	0x200015d0
 80052c8:	10624dd3 	.word	0x10624dd3
 80052cc:	000124f8 	.word	0x000124f8
 80052d0:	200015cc 	.word	0x200015cc
 80052d4:	080125b8 	.word	0x080125b8
 80052d8:	080129dc 	.word	0x080129dc
 80052dc:	080125ec 	.word	0x080125ec
 80052e0:	08012a08 	.word	0x08012a08
 80052e4:	200015c8 	.word	0x200015c8
 80052e8:	200015dc 	.word	0x200015dc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80052ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ee:	7d1b      	ldrb	r3, [r3, #20]
 80052f0:	2b0a      	cmp	r3, #10
 80052f2:	d00b      	beq.n	800530c <tcp_slowtmr+0x614>
 80052f4:	4b32      	ldr	r3, [pc, #200]	; (80053c0 <tcp_slowtmr+0x6c8>)
 80052f6:	f240 52a5 	movw	r2, #1445	; 0x5a5
 80052fa:	4932      	ldr	r1, [pc, #200]	; (80053c4 <tcp_slowtmr+0x6cc>)
 80052fc:	4832      	ldr	r0, [pc, #200]	; (80053c8 <tcp_slowtmr+0x6d0>)
 80052fe:	f00b f925 	bl	801054c <iprintf>
 8005302:	2000      	movs	r0, #0
 8005304:	f00b fa24 	bl	8010750 <fflush>
 8005308:	f00b f969 	bl	80105de <abort>
    pcb_remove = 0;
 800530c:	2300      	movs	r3, #0
 800530e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005312:	4b2e      	ldr	r3, [pc, #184]	; (80053cc <tcp_slowtmr+0x6d4>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2bf0      	cmp	r3, #240	; 0xf0
 800531e:	d904      	bls.n	800532a <tcp_slowtmr+0x632>
      ++pcb_remove;
 8005320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005324:	3301      	adds	r3, #1
 8005326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800532a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800532e:	2b00      	cmp	r3, #0
 8005330:	d039      	beq.n	80053a6 <tcp_slowtmr+0x6ae>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8005332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005334:	f000 fb3e 	bl	80059b4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	2b00      	cmp	r3, #0
 800533c:	d015      	beq.n	800536a <tcp_slowtmr+0x672>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800533e:	4b24      	ldr	r3, [pc, #144]	; (80053d0 <tcp_slowtmr+0x6d8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005344:	429a      	cmp	r2, r3
 8005346:	d10b      	bne.n	8005360 <tcp_slowtmr+0x668>
 8005348:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <tcp_slowtmr+0x6c8>)
 800534a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800534e:	4921      	ldr	r1, [pc, #132]	; (80053d4 <tcp_slowtmr+0x6dc>)
 8005350:	481d      	ldr	r0, [pc, #116]	; (80053c8 <tcp_slowtmr+0x6d0>)
 8005352:	f00b f8fb 	bl	801054c <iprintf>
 8005356:	2000      	movs	r0, #0
 8005358:	f00b f9fa 	bl	8010750 <fflush>
 800535c:	f00b f93f 	bl	80105de <abort>
        prev->next = pcb->next;
 8005360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	60da      	str	r2, [r3, #12]
 8005368:	e014      	b.n	8005394 <tcp_slowtmr+0x69c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800536a:	4b19      	ldr	r3, [pc, #100]	; (80053d0 <tcp_slowtmr+0x6d8>)
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005370:	429a      	cmp	r2, r3
 8005372:	d00b      	beq.n	800538c <tcp_slowtmr+0x694>
 8005374:	4b12      	ldr	r3, [pc, #72]	; (80053c0 <tcp_slowtmr+0x6c8>)
 8005376:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800537a:	4917      	ldr	r1, [pc, #92]	; (80053d8 <tcp_slowtmr+0x6e0>)
 800537c:	4812      	ldr	r0, [pc, #72]	; (80053c8 <tcp_slowtmr+0x6d0>)
 800537e:	f00b f8e5 	bl	801054c <iprintf>
 8005382:	2000      	movs	r0, #0
 8005384:	f00b f9e4 	bl	8010750 <fflush>
 8005388:	f00b f929 	bl	80105de <abort>
        tcp_tw_pcbs = pcb->next;
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	4a0f      	ldr	r2, [pc, #60]	; (80053d0 <tcp_slowtmr+0x6d8>)
 8005392:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8005394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005396:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8005398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800539e:	6838      	ldr	r0, [r7, #0]
 80053a0:	f7ff f8d6 	bl	8004550 <tcp_free>
 80053a4:	e004      	b.n	80053b0 <tcp_slowtmr+0x6b8>
    } else {
      prev = pcb;
 80053a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a8:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80053aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80053b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d19a      	bne.n	80052ec <tcp_slowtmr+0x5f4>
    }
  }
}
 80053b6:	bf00      	nop
 80053b8:	3730      	adds	r7, #48	; 0x30
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bdb0      	pop	{r4, r5, r7, pc}
 80053be:	bf00      	nop
 80053c0:	080125b8 	.word	0x080125b8
 80053c4:	08012a34 	.word	0x08012a34
 80053c8:	080125ec 	.word	0x080125ec
 80053cc:	200015d0 	.word	0x200015d0
 80053d0:	200015dc 	.word	0x200015dc
 80053d4:	08012a64 	.word	0x08012a64
 80053d8:	08012a8c 	.word	0x08012a8c

080053dc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80053e2:	4b2d      	ldr	r3, [pc, #180]	; (8005498 <tcp_fasttmr+0xbc>)
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	3301      	adds	r3, #1
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	4b2b      	ldr	r3, [pc, #172]	; (8005498 <tcp_fasttmr+0xbc>)
 80053ec:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80053ee:	4b2b      	ldr	r3, [pc, #172]	; (800549c <tcp_fasttmr+0xc0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80053f4:	e048      	b.n	8005488 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	7f9a      	ldrb	r2, [r3, #30]
 80053fa:	4b27      	ldr	r3, [pc, #156]	; (8005498 <tcp_fasttmr+0xbc>)
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d03f      	beq.n	8005482 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8005402:	4b25      	ldr	r3, [pc, #148]	; (8005498 <tcp_fasttmr+0xbc>)
 8005404:	781a      	ldrb	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	8b5b      	ldrh	r3, [r3, #26]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d010      	beq.n	8005438 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	8b5b      	ldrh	r3, [r3, #26]
 800541a:	f043 0302 	orr.w	r3, r3, #2
 800541e:	b29a      	uxth	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f003 fc03 	bl	8008c30 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	8b5b      	ldrh	r3, [r3, #26]
 800542e:	f023 0303 	bic.w	r3, r3, #3
 8005432:	b29a      	uxth	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	8b5b      	ldrh	r3, [r3, #26]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d009      	beq.n	8005458 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	8b5b      	ldrh	r3, [r3, #26]
 8005448:	f023 0308 	bic.w	r3, r3, #8
 800544c:	b29a      	uxth	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff fa30 	bl	80048b8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8005466:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <tcp_fasttmr+0xc4>)
 8005468:	2200      	movs	r2, #0
 800546a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f819 	bl	80054a4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8005472:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <tcp_fasttmr+0xc4>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d000      	beq.n	800547c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800547a:	e7b8      	b.n	80053ee <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	607b      	str	r3, [r7, #4]
 8005480:	e002      	b.n	8005488 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1b3      	bne.n	80053f6 <tcp_fasttmr+0x1a>
    }
  }
}
 800548e:	bf00      	nop
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	200003b2 	.word	0x200003b2
 800549c:	200015cc 	.word	0x200015cc
 80054a0:	200015c8 	.word	0x200015c8

080054a4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80054a4:	b590      	push	{r4, r7, lr}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d109      	bne.n	80054c6 <tcp_process_refused_data+0x22>
 80054b2:	4b37      	ldr	r3, [pc, #220]	; (8005590 <tcp_process_refused_data+0xec>)
 80054b4:	f240 620d 	movw	r2, #1549	; 0x60d
 80054b8:	4936      	ldr	r1, [pc, #216]	; (8005594 <tcp_process_refused_data+0xf0>)
 80054ba:	4837      	ldr	r0, [pc, #220]	; (8005598 <tcp_process_refused_data+0xf4>)
 80054bc:	f7fc f91f 	bl	80016fe <lwip_win32_platform_diag>
 80054c0:	f06f 030f 	mvn.w	r3, #15
 80054c4:	e060      	b.n	8005588 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ca:	7b5b      	ldrb	r3, [r3, #13]
 80054cc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054d2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00b      	beq.n	80054fc <tcp_process_refused_data+0x58>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6918      	ldr	r0, [r3, #16]
 80054ee:	2300      	movs	r3, #0
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	47a0      	blx	r4
 80054f6:	4603      	mov	r3, r0
 80054f8:	73fb      	strb	r3, [r7, #15]
 80054fa:	e007      	b.n	800550c <tcp_process_refused_data+0x68>
 80054fc:	2300      	movs	r3, #0
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	2000      	movs	r0, #0
 8005504:	f000 f8a8 	bl	8005658 <tcp_recv_null>
 8005508:	4603      	mov	r3, r0
 800550a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800550c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d12a      	bne.n	800556a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8005514:	7bbb      	ldrb	r3, [r7, #14]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d033      	beq.n	8005586 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005522:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005526:	d005      	beq.n	8005534 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552c:	3301      	adds	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00b      	beq.n	8005556 <tcp_process_refused_data+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6918      	ldr	r0, [r3, #16]
 8005548:	2300      	movs	r3, #0
 800554a:	2200      	movs	r2, #0
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	47a0      	blx	r4
 8005550:	4603      	mov	r3, r0
 8005552:	73fb      	strb	r3, [r7, #15]
 8005554:	e001      	b.n	800555a <tcp_process_refused_data+0xb6>
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800555a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800555e:	f113 0f0d 	cmn.w	r3, #13
 8005562:	d110      	bne.n	8005586 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8005564:	f06f 030c 	mvn.w	r3, #12
 8005568:	e00e      	b.n	8005588 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800556a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800556e:	f113 0f0d 	cmn.w	r3, #13
 8005572:	d102      	bne.n	800557a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8005574:	f06f 030c 	mvn.w	r3, #12
 8005578:	e006      	b.n	8005588 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8005580:	f06f 0304 	mvn.w	r3, #4
 8005584:	e000      	b.n	8005588 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	bd90      	pop	{r4, r7, pc}
 8005590:	080125b8 	.word	0x080125b8
 8005594:	08012ab4 	.word	0x08012ab4
 8005598:	080125ec 	.word	0x080125ec

0800559c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80055a4:	e007      	b.n	80055b6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f809 	bl	80055c4 <tcp_seg_free>
    seg = next;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f4      	bne.n	80055a6 <tcp_segs_free+0xa>
  }
}
 80055bc:	bf00      	nop
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00c      	beq.n	80055ec <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d004      	beq.n	80055e4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fe fc6a 	bl	8003eb8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	2002      	movs	r0, #2
 80055e8:	f7fd fe5c 	bl	80032a4 <memp_free>
  }
}
 80055ec:	bf00      	nop
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10b      	bne.n	800561a <tcp_seg_copy+0x26>
 8005602:	4b12      	ldr	r3, [pc, #72]	; (800564c <tcp_seg_copy+0x58>)
 8005604:	f240 6286 	movw	r2, #1670	; 0x686
 8005608:	4911      	ldr	r1, [pc, #68]	; (8005650 <tcp_seg_copy+0x5c>)
 800560a:	4812      	ldr	r0, [pc, #72]	; (8005654 <tcp_seg_copy+0x60>)
 800560c:	f00a ff9e 	bl	801054c <iprintf>
 8005610:	2000      	movs	r0, #0
 8005612:	f00b f89d 	bl	8010750 <fflush>
 8005616:	f00a ffe2 	bl	80105de <abort>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800561a:	2002      	movs	r0, #2
 800561c:	f7fd fdd8 	bl	80031d0 <memp_malloc>
 8005620:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <tcp_seg_copy+0x38>
    return NULL;
 8005628:	2300      	movs	r3, #0
 800562a:	e00a      	b.n	8005642 <tcp_seg_copy+0x4e>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800562c:	2214      	movs	r2, #20
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f00b f9ad 	bl	8010990 <memcpy>
  pbuf_ref(cseg->p);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	4618      	mov	r0, r3
 800563c:	f7fe fcd6 	bl	8003fec <pbuf_ref>
  return cseg;
 8005640:	68fb      	ldr	r3, [r7, #12]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	080125b8 	.word	0x080125b8
 8005650:	08012af8 	.word	0x08012af8
 8005654:	080125ec 	.word	0x080125ec

08005658 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d109      	bne.n	8005680 <tcp_recv_null+0x28>
 800566c:	4b12      	ldr	r3, [pc, #72]	; (80056b8 <tcp_recv_null+0x60>)
 800566e:	f240 629c 	movw	r2, #1692	; 0x69c
 8005672:	4912      	ldr	r1, [pc, #72]	; (80056bc <tcp_recv_null+0x64>)
 8005674:	4812      	ldr	r0, [pc, #72]	; (80056c0 <tcp_recv_null+0x68>)
 8005676:	f7fc f842 	bl	80016fe <lwip_win32_platform_diag>
 800567a:	f06f 030f 	mvn.w	r3, #15
 800567e:	e016      	b.n	80056ae <tcp_recv_null+0x56>

  if (p != NULL) {
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d009      	beq.n	800569a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	891b      	ldrh	r3, [r3, #8]
 800568a:	4619      	mov	r1, r3
 800568c:	68b8      	ldr	r0, [r7, #8]
 800568e:	f7ff fadf 	bl	8004c50 <tcp_recved>
    pbuf_free(p);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fe fc10 	bl	8003eb8 <pbuf_free>
 8005698:	e008      	b.n	80056ac <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800569a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d104      	bne.n	80056ac <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80056a2:	68b8      	ldr	r0, [r7, #8]
 80056a4:	f7ff f974 	bl	8004990 <tcp_close>
 80056a8:	4603      	mov	r3, r0
 80056aa:	e000      	b.n	80056ae <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	080125b8 	.word	0x080125b8
 80056bc:	08012b14 	.word	0x08012b14
 80056c0:	080125ec 	.word	0x080125ec

080056c4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80056ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	db01      	blt.n	80056da <tcp_kill_prio+0x16>
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	e000      	b.n	80056dc <tcp_kill_prio+0x18>
 80056da:	237f      	movs	r3, #127	; 0x7f
 80056dc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80056de:	7afb      	ldrb	r3, [r7, #11]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d034      	beq.n	800574e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80056e4:	7afb      	ldrb	r3, [r7, #11]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80056f2:	4b19      	ldr	r3, [pc, #100]	; (8005758 <tcp_kill_prio+0x94>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	e01f      	b.n	800573a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	7d5b      	ldrb	r3, [r3, #21]
 80056fe:	7afa      	ldrb	r2, [r7, #11]
 8005700:	429a      	cmp	r2, r3
 8005702:	d80c      	bhi.n	800571e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8005708:	7afa      	ldrb	r2, [r7, #11]
 800570a:	429a      	cmp	r2, r3
 800570c:	d112      	bne.n	8005734 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800570e:	4b13      	ldr	r3, [pc, #76]	; (800575c <tcp_kill_prio+0x98>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	1ad2      	subs	r2, r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	429a      	cmp	r2, r3
 800571c:	d30a      	bcc.n	8005734 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800571e:	4b0f      	ldr	r3, [pc, #60]	; (800575c <tcp_kill_prio+0x98>)
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	7d5b      	ldrb	r3, [r3, #21]
 8005732:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1dc      	bne.n	80056fa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d004      	beq.n	8005750 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8005746:	6938      	ldr	r0, [r7, #16]
 8005748:	f7ff fa10 	bl	8004b6c <tcp_abort>
 800574c:	e000      	b.n	8005750 <tcp_kill_prio+0x8c>
    return;
 800574e:	bf00      	nop
  }
}
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	200015cc 	.word	0x200015cc
 800575c:	200015d0 	.word	0x200015d0

08005760 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	4603      	mov	r3, r0
 8005768:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	2b08      	cmp	r3, #8
 800576e:	d00e      	beq.n	800578e <tcp_kill_state+0x2e>
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	2b09      	cmp	r3, #9
 8005774:	d00b      	beq.n	800578e <tcp_kill_state+0x2e>
 8005776:	4b1d      	ldr	r3, [pc, #116]	; (80057ec <tcp_kill_state+0x8c>)
 8005778:	f240 62e1 	movw	r2, #1761	; 0x6e1
 800577c:	491c      	ldr	r1, [pc, #112]	; (80057f0 <tcp_kill_state+0x90>)
 800577e:	481d      	ldr	r0, [pc, #116]	; (80057f4 <tcp_kill_state+0x94>)
 8005780:	f00a fee4 	bl	801054c <iprintf>
 8005784:	2000      	movs	r0, #0
 8005786:	f00a ffe3 	bl	8010750 <fflush>
 800578a:	f00a ff28 	bl	80105de <abort>

  inactivity = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8005792:	2300      	movs	r3, #0
 8005794:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005796:	4b18      	ldr	r3, [pc, #96]	; (80057f8 <tcp_kill_state+0x98>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	e017      	b.n	80057ce <tcp_kill_state+0x6e>
    if (pcb->state == state) {
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	7d1b      	ldrb	r3, [r3, #20]
 80057a2:	79fa      	ldrb	r2, [r7, #7]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d10f      	bne.n	80057c8 <tcp_kill_state+0x68>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80057a8:	4b14      	ldr	r3, [pc, #80]	; (80057fc <tcp_kill_state+0x9c>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	1ad2      	subs	r2, r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d307      	bcc.n	80057c8 <tcp_kill_state+0x68>
        inactivity = tcp_ticks - pcb->tmr;
 80057b8:	4b10      	ldr	r3, [pc, #64]	; (80057fc <tcp_kill_state+0x9c>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e4      	bne.n	800579e <tcp_kill_state+0x3e>
      }
    }
  }
  if (inactive != NULL) {
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <tcp_kill_state+0x82>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80057da:	2100      	movs	r1, #0
 80057dc:	6938      	ldr	r0, [r7, #16]
 80057de:	f7ff f903 	bl	80049e8 <tcp_abandon>
  }
}
 80057e2:	bf00      	nop
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	080125b8 	.word	0x080125b8
 80057f0:	08012b30 	.word	0x08012b30
 80057f4:	080125ec 	.word	0x080125ec
 80057f8:	200015cc 	.word	0x200015cc
 80057fc:	200015d0 	.word	0x200015d0

08005800 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800580e:	4b12      	ldr	r3, [pc, #72]	; (8005858 <tcp_kill_timewait+0x58>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	e012      	b.n	800583c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005816:	4b11      	ldr	r3, [pc, #68]	; (800585c <tcp_kill_timewait+0x5c>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	1ad2      	subs	r2, r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	429a      	cmp	r2, r3
 8005824:	d307      	bcc.n	8005836 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8005826:	4b0d      	ldr	r3, [pc, #52]	; (800585c <tcp_kill_timewait+0x5c>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1e9      	bne.n	8005816 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8005848:	68b8      	ldr	r0, [r7, #8]
 800584a:	f7ff f98f 	bl	8004b6c <tcp_abort>
  }
}
 800584e:	bf00      	nop
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	200015dc 	.word	0x200015dc
 800585c:	200015d0 	.word	0x200015d0

08005860 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8005866:	4b10      	ldr	r3, [pc, #64]	; (80058a8 <tcp_handle_closepend+0x48>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800586c:	e014      	b.n	8005898 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	8b5b      	ldrh	r3, [r3, #26]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d009      	beq.n	8005894 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	8b5b      	ldrh	r3, [r3, #26]
 8005884:	f023 0308 	bic.w	r3, r3, #8
 8005888:	b29a      	uxth	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7ff f812 	bl	80048b8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1e7      	bne.n	800586e <tcp_handle_closepend+0xe>
  }
}
 800589e:	bf00      	nop
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	200015cc 	.word	0x200015cc

080058ac <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	4603      	mov	r3, r0
 80058b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80058b6:	2000      	movs	r0, #0
 80058b8:	f7fd fc8a 	bl	80031d0 <memp_malloc>
 80058bc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d126      	bne.n	8005912 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80058c4:	f7ff ffcc 	bl	8005860 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80058c8:	f7ff ff9a 	bl	8005800 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80058cc:	2000      	movs	r0, #0
 80058ce:	f7fd fc7f 	bl	80031d0 <memp_malloc>
 80058d2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d11b      	bne.n	8005912 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80058da:	2009      	movs	r0, #9
 80058dc:	f7ff ff40 	bl	8005760 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80058e0:	2000      	movs	r0, #0
 80058e2:	f7fd fc75 	bl	80031d0 <memp_malloc>
 80058e6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d111      	bne.n	8005912 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80058ee:	2008      	movs	r0, #8
 80058f0:	f7ff ff36 	bl	8005760 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80058f4:	2000      	movs	r0, #0
 80058f6:	f7fd fc6b 	bl	80031d0 <memp_malloc>
 80058fa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d107      	bne.n	8005912 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8005902:	79fb      	ldrb	r3, [r7, #7]
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff fedd 	bl	80056c4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800590a:	2000      	movs	r0, #0
 800590c:	f7fd fc60 	bl	80031d0 <memp_malloc>
 8005910:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d03f      	beq.n	8005998 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8005918:	229c      	movs	r2, #156	; 0x9c
 800591a:	2100      	movs	r1, #0
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f00b f85c 	bl	80109da <memset>
    pcb->prio = prio;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	79fa      	ldrb	r2, [r7, #7]
 8005926:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800592e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005938:	855a      	strh	r2, [r3, #42]	; 0x2a
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	22ff      	movs	r2, #255	; 0xff
 8005946:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800594e:	865a      	strh	r2, [r3, #50]	; 0x32
    /* Set initial TCP's retransmission timeout to 3000 ms by default.
       This value could be configured in lwipopts */
    pcb->rto = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2206      	movs	r2, #6
 8005954:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2206      	movs	r2, #6
 800595c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005964:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2201      	movs	r2, #1
 800596a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800596e:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <tcp_alloc+0xf8>)
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8005976:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <tcp_alloc+0xfc>)
 8005978:	781a      	ldrb	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8005984:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4a08      	ldr	r2, [pc, #32]	; (80059ac <tcp_alloc+0x100>)
 800598c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4a07      	ldr	r2, [pc, #28]	; (80059b0 <tcp_alloc+0x104>)
 8005994:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
    pcb_tci_init(pcb);
  }
  return pcb;
 8005998:	68fb      	ldr	r3, [r7, #12]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	200015d0 	.word	0x200015d0
 80059a8:	200003b2 	.word	0x200003b2
 80059ac:	08005659 	.word	0x08005659
 80059b0:	006ddd00 	.word	0x006ddd00

080059b4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d107      	bne.n	80059d2 <tcp_pcb_purge+0x1e>
 80059c2:	4b21      	ldr	r3, [pc, #132]	; (8005a48 <tcp_pcb_purge+0x94>)
 80059c4:	f640 025b 	movw	r2, #2139	; 0x85b
 80059c8:	4920      	ldr	r1, [pc, #128]	; (8005a4c <tcp_pcb_purge+0x98>)
 80059ca:	4821      	ldr	r0, [pc, #132]	; (8005a50 <tcp_pcb_purge+0x9c>)
 80059cc:	f7fb fe97 	bl	80016fe <lwip_win32_platform_diag>
 80059d0:	e037      	b.n	8005a42 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	7d1b      	ldrb	r3, [r3, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d033      	beq.n	8005a42 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80059de:	2b0a      	cmp	r3, #10
 80059e0:	d02f      	beq.n	8005a42 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d02b      	beq.n	8005a42 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe fa5e 	bl	8003eb8 <pbuf_free>
      pcb->refused_data = NULL;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f9ac 	bl	8005d68 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a16:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff fdbd 	bl	800559c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7ff fdb8 	bl	800559c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	66da      	str	r2, [r3, #108]	; 0x6c
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	080125b8 	.word	0x080125b8
 8005a4c:	08012bf0 	.word	0x08012bf0
 8005a50:	080125ec 	.word	0x080125ec

08005a54 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10b      	bne.n	8005a7c <tcp_pcb_remove+0x28>
 8005a64:	4b4a      	ldr	r3, [pc, #296]	; (8005b90 <tcp_pcb_remove+0x13c>)
 8005a66:	f640 028d 	movw	r2, #2189	; 0x88d
 8005a6a:	494a      	ldr	r1, [pc, #296]	; (8005b94 <tcp_pcb_remove+0x140>)
 8005a6c:	484a      	ldr	r0, [pc, #296]	; (8005b98 <tcp_pcb_remove+0x144>)
 8005a6e:	f00a fd6d 	bl	801054c <iprintf>
 8005a72:	2000      	movs	r0, #0
 8005a74:	f00a fe6c 	bl	8010750 <fflush>
 8005a78:	f00a fdb1 	bl	80105de <abort>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10b      	bne.n	8005a9a <tcp_pcb_remove+0x46>
 8005a82:	4b43      	ldr	r3, [pc, #268]	; (8005b90 <tcp_pcb_remove+0x13c>)
 8005a84:	f640 028e 	movw	r2, #2190	; 0x88e
 8005a88:	4944      	ldr	r1, [pc, #272]	; (8005b9c <tcp_pcb_remove+0x148>)
 8005a8a:	4843      	ldr	r0, [pc, #268]	; (8005b98 <tcp_pcb_remove+0x144>)
 8005a8c:	f00a fd5e 	bl	801054c <iprintf>
 8005a90:	2000      	movs	r0, #0
 8005a92:	f00a fe5d 	bl	8010750 <fflush>
 8005a96:	f00a fda2 	bl	80105de <abort>

  TCP_RMV(pcblist, pcb);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d105      	bne.n	8005ab0 <tcp_pcb_remove+0x5c>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	e013      	b.n	8005ad8 <tcp_pcb_remove+0x84>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	e00c      	b.n	8005ad2 <tcp_pcb_remove+0x7e>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d104      	bne.n	8005acc <tcp_pcb_remove+0x78>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	60da      	str	r2, [r3, #12]
 8005aca:	e005      	b.n	8005ad8 <tcp_pcb_remove+0x84>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1ef      	bne.n	8005ab8 <tcp_pcb_remove+0x64>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2200      	movs	r2, #0
 8005adc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8005ade:	6838      	ldr	r0, [r7, #0]
 8005ae0:	f7ff ff68 	bl	80059b4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	7d1b      	ldrb	r3, [r3, #20]
 8005ae8:	2b0a      	cmp	r3, #10
 8005aea:	d013      	beq.n	8005b14 <tcp_pcb_remove+0xc0>
      (pcb->state != LISTEN) &&
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d00f      	beq.n	8005b14 <tcp_pcb_remove+0xc0>
      (pcb->flags & TF_ACK_DELAY)) {
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	8b5b      	ldrh	r3, [r3, #26]
 8005af8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d009      	beq.n	8005b14 <tcp_pcb_remove+0xc0>
    tcp_ack_now(pcb);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	8b5b      	ldrh	r3, [r3, #26]
 8005b04:	f043 0302 	orr.w	r3, r3, #2
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005b0e:	6838      	ldr	r0, [r7, #0]
 8005b10:	f003 f88e 	bl	8008c30 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	7d1b      	ldrb	r3, [r3, #20]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d02f      	beq.n	8005b7c <tcp_pcb_remove+0x128>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00b      	beq.n	8005b3c <tcp_pcb_remove+0xe8>
 8005b24:	4b1a      	ldr	r3, [pc, #104]	; (8005b90 <tcp_pcb_remove+0x13c>)
 8005b26:	f640 029d 	movw	r2, #2205	; 0x89d
 8005b2a:	491d      	ldr	r1, [pc, #116]	; (8005ba0 <tcp_pcb_remove+0x14c>)
 8005b2c:	481a      	ldr	r0, [pc, #104]	; (8005b98 <tcp_pcb_remove+0x144>)
 8005b2e:	f00a fd0d 	bl	801054c <iprintf>
 8005b32:	2000      	movs	r0, #0
 8005b34:	f00a fe0c 	bl	8010750 <fflush>
 8005b38:	f00a fd51 	bl	80105de <abort>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00b      	beq.n	8005b5c <tcp_pcb_remove+0x108>
 8005b44:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <tcp_pcb_remove+0x13c>)
 8005b46:	f640 029e 	movw	r2, #2206	; 0x89e
 8005b4a:	4916      	ldr	r1, [pc, #88]	; (8005ba4 <tcp_pcb_remove+0x150>)
 8005b4c:	4812      	ldr	r0, [pc, #72]	; (8005b98 <tcp_pcb_remove+0x144>)
 8005b4e:	f00a fcfd 	bl	801054c <iprintf>
 8005b52:	2000      	movs	r0, #0
 8005b54:	f00a fdfc 	bl	8010750 <fflush>
 8005b58:	f00a fd41 	bl	80105de <abort>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00b      	beq.n	8005b7c <tcp_pcb_remove+0x128>
 8005b64:	4b0a      	ldr	r3, [pc, #40]	; (8005b90 <tcp_pcb_remove+0x13c>)
 8005b66:	f44f 620a 	mov.w	r2, #2208	; 0x8a0
 8005b6a:	490f      	ldr	r1, [pc, #60]	; (8005ba8 <tcp_pcb_remove+0x154>)
 8005b6c:	480a      	ldr	r0, [pc, #40]	; (8005b98 <tcp_pcb_remove+0x144>)
 8005b6e:	f00a fced 	bl	801054c <iprintf>
 8005b72:	2000      	movs	r0, #0
 8005b74:	f00a fdec 	bl	8010750 <fflush>
 8005b78:	f00a fd31 	bl	80105de <abort>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2200      	movs	r2, #0
 8005b86:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8005b88:	bf00      	nop
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	080125b8 	.word	0x080125b8
 8005b94:	08012c0c 	.word	0x08012c0c
 8005b98:	080125ec 	.word	0x080125ec
 8005b9c:	08012c28 	.word	0x08012c28
 8005ba0:	08012c48 	.word	0x08012c48
 8005ba4:	08012c60 	.word	0x08012c60
 8005ba8:	08012c7c 	.word	0x08012c7c

08005bac <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10b      	bne.n	8005bd2 <tcp_next_iss+0x26>
 8005bba:	4b0c      	ldr	r3, [pc, #48]	; (8005bec <tcp_next_iss+0x40>)
 8005bbc:	f640 02b9 	movw	r2, #2233	; 0x8b9
 8005bc0:	490b      	ldr	r1, [pc, #44]	; (8005bf0 <tcp_next_iss+0x44>)
 8005bc2:	480c      	ldr	r0, [pc, #48]	; (8005bf4 <tcp_next_iss+0x48>)
 8005bc4:	f00a fcc2 	bl	801054c <iprintf>
 8005bc8:	2000      	movs	r0, #0
 8005bca:	f00a fdc1 	bl	8010750 <fflush>
 8005bce:	f00a fd06 	bl	80105de <abort>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8005bd2:	4b09      	ldr	r3, [pc, #36]	; (8005bf8 <tcp_next_iss+0x4c>)
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <tcp_next_iss+0x50>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4413      	add	r3, r2
 8005bdc:	4a06      	ldr	r2, [pc, #24]	; (8005bf8 <tcp_next_iss+0x4c>)
 8005bde:	6013      	str	r3, [r2, #0]
  return iss;
 8005be0:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <tcp_next_iss+0x4c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	080125b8 	.word	0x080125b8
 8005bf0:	08012c94 	.word	0x08012c94
 8005bf4:	080125ec 	.word	0x080125ec
 8005bf8:	20000008 	.word	0x20000008
 8005bfc:	200015d0 	.word	0x200015d0

08005c00 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4603      	mov	r3, r0
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10b      	bne.n	8005c2c <tcp_eff_send_mss_netif+0x2c>
 8005c14:	4b17      	ldr	r3, [pc, #92]	; (8005c74 <tcp_eff_send_mss_netif+0x74>)
 8005c16:	f640 02cf 	movw	r2, #2255	; 0x8cf
 8005c1a:	4917      	ldr	r1, [pc, #92]	; (8005c78 <tcp_eff_send_mss_netif+0x78>)
 8005c1c:	4817      	ldr	r0, [pc, #92]	; (8005c7c <tcp_eff_send_mss_netif+0x7c>)
 8005c1e:	f00a fc95 	bl	801054c <iprintf>
 8005c22:	2000      	movs	r0, #0
 8005c24:	f00a fd94 	bl	8010750 <fflush>
 8005c28:	f00a fcd9 	bl	80105de <abort>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <tcp_eff_send_mss_netif+0x36>
      return sendmss;
 8005c32:	89fb      	ldrh	r3, [r7, #14]
 8005c34:	e019      	b.n	8005c6a <tcp_eff_send_mss_netif+0x6a>
    }
    mtu = outif->mtu;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	8c1b      	ldrh	r3, [r3, #32]
 8005c3a:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8005c3c:	8afb      	ldrh	r3, [r7, #22]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d012      	beq.n	8005c68 <tcp_eff_send_mss_netif+0x68>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8005c42:	2328      	movs	r3, #40	; 0x28
 8005c44:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8005c46:	8afa      	ldrh	r2, [r7, #22]
 8005c48:	8abb      	ldrh	r3, [r7, #20]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d904      	bls.n	8005c58 <tcp_eff_send_mss_netif+0x58>
 8005c4e:	8afa      	ldrh	r2, [r7, #22]
 8005c50:	8abb      	ldrh	r3, [r7, #20]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	e000      	b.n	8005c5a <tcp_eff_send_mss_netif+0x5a>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8005c5c:	8a7a      	ldrh	r2, [r7, #18]
 8005c5e:	89fb      	ldrh	r3, [r7, #14]
 8005c60:	4293      	cmp	r3, r2
 8005c62:	bf28      	it	cs
 8005c64:	4613      	movcs	r3, r2
 8005c66:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8005c68:	89fb      	ldrh	r3, [r7, #14]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	080125b8 	.word	0x080125b8
 8005c78:	08012cb0 	.word	0x08012cb0
 8005c7c:	080125ec 	.word	0x080125ec

08005c80 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d11d      	bne.n	8005cd0 <tcp_netif_ip_addr_changed_pcblist+0x50>
 8005c94:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8005c96:	f640 120a 	movw	r2, #2314	; 0x90a
 8005c9a:	4912      	ldr	r1, [pc, #72]	; (8005ce4 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8005c9c:	4812      	ldr	r0, [pc, #72]	; (8005ce8 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8005c9e:	f00a fc55 	bl	801054c <iprintf>
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	f00a fd54 	bl	8010750 <fflush>
 8005ca8:	f00a fc99 	bl	80105de <abort>

  while (pcb != NULL) {
    /* PCB bound to current local interface address? */
    if (ip_addr_eq(&pcb->local_ip, old_addr)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d108      	bne.n	8005cca <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7fe ff54 	bl	8004b6c <tcp_abort>
      pcb = next;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	e002      	b.n	8005cd0 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1ea      	bne.n	8005cac <tcp_netif_ip_addr_changed_pcblist+0x2c>
    }
  }
}
 8005cd6:	bf00      	nop
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	080125b8 	.word	0x080125b8
 8005ce4:	08012cd8 	.word	0x08012cd8
 8005ce8:	080125ec 	.word	0x080125ec

08005cec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d02a      	beq.n	8005d52 <tcp_netif_ip_addr_changed+0x66>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d026      	beq.n	8005d52 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8005d04:	4b15      	ldr	r3, [pc, #84]	; (8005d5c <tcp_netif_ip_addr_changed+0x70>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7ff ffb8 	bl	8005c80 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8005d10:	4b13      	ldr	r3, [pc, #76]	; (8005d60 <tcp_netif_ip_addr_changed+0x74>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7ff ffb2 	bl	8005c80 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d017      	beq.n	8005d52 <tcp_netif_ip_addr_changed+0x66>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d013      	beq.n	8005d52 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005d2a:	4b0e      	ldr	r3, [pc, #56]	; (8005d64 <tcp_netif_ip_addr_changed+0x78>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	e00c      	b.n	8005d4c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_eq(&lpcb->local_ip, old_addr)) {
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d103      	bne.n	8005d46 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1ef      	bne.n	8005d32 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	200015cc 	.word	0x200015cc
 8005d60:	200015d8 	.word	0x200015d8
 8005d64:	200015d4 	.word	0x200015d4

08005d68 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d007      	beq.n	8005d88 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff fc0d 	bl	800559c <tcp_segs_free>
    pcb->ooseq = NULL;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8005d88:	bf00      	nop
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b08d      	sub	sp, #52	; 0x34
 8005d94:	af04      	add	r7, sp, #16
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10a      	bne.n	8005db6 <tcp_input+0x26>
 8005da0:	4ba4      	ldr	r3, [pc, #656]	; (8006034 <tcp_input+0x2a4>)
 8005da2:	2283      	movs	r2, #131	; 0x83
 8005da4:	49a4      	ldr	r1, [pc, #656]	; (8006038 <tcp_input+0x2a8>)
 8005da6:	48a5      	ldr	r0, [pc, #660]	; (800603c <tcp_input+0x2ac>)
 8005da8:	f00a fbd0 	bl	801054c <iprintf>
 8005dac:	2000      	movs	r0, #0
 8005dae:	f00a fccf 	bl	8010750 <fflush>
 8005db2:	f00a fc14 	bl	80105de <abort>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	4aa1      	ldr	r2, [pc, #644]	; (8006040 <tcp_input+0x2b0>)
 8005dbc:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	895b      	ldrh	r3, [r3, #10]
 8005dc2:	2b13      	cmp	r3, #19
 8005dc4:	f240 8413 	bls.w	80065ee <tcp_input+0x85e>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005dc8:	4b9e      	ldr	r3, [pc, #632]	; (8006044 <tcp_input+0x2b4>)
 8005dca:	695a      	ldr	r2, [r3, #20]
 8005dcc:	4b9d      	ldr	r3, [pc, #628]	; (8006044 <tcp_input+0x2b4>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	f7fc fcb8 	bl	8002748 <ip4_addr_isbroadcast_u32>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f040 8410 	bne.w	8006600 <tcp_input+0x870>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8005de0:	4b98      	ldr	r3, [pc, #608]	; (8006044 <tcp_input+0x2b4>)
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005de8:	2be0      	cmp	r3, #224	; 0xe0
 8005dea:	f000 8409 	beq.w	8006600 <tcp_input+0x870>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	891a      	ldrh	r2, [r3, #8]
 8005df2:	4b95      	ldr	r3, [pc, #596]	; (8006048 <tcp_input+0x2b8>)
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	4b95      	ldr	r3, [pc, #596]	; (800604c <tcp_input+0x2bc>)
 8005df8:	2106      	movs	r1, #6
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7fb ff62 	bl	8001cc4 <ip_chksum_pseudo>
 8005e00:	4603      	mov	r3, r0
 8005e02:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 8005e04:	8a3b      	ldrh	r3, [r7, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f040 83f3 	bne.w	80065f2 <tcp_input+0x862>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8005e0c:	4b8c      	ldr	r3, [pc, #560]	; (8006040 <tcp_input+0x2b0>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	899b      	ldrh	r3, [r3, #12]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fb fe23 	bl	8001a60 <lwip_htons>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	0b1b      	lsrs	r3, r3, #12
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
 8005e28:	2b13      	cmp	r3, #19
 8005e2a:	f240 83e4 	bls.w	80065f6 <tcp_input+0x866>
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	891b      	ldrh	r3, [r3, #8]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	f200 83dd 	bhi.w	80065f6 <tcp_input+0x866>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	3b14      	subs	r3, #20
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	4b82      	ldr	r3, [pc, #520]	; (8006050 <tcp_input+0x2c0>)
 8005e46:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8005e48:	4b82      	ldr	r3, [pc, #520]	; (8006054 <tcp_input+0x2c4>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	895a      	ldrh	r2, [r3, #10]
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d309      	bcc.n	8005e6e <tcp_input+0xde>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8005e5a:	4b7d      	ldr	r3, [pc, #500]	; (8006050 <tcp_input+0x2c0>)
 8005e5c:	881a      	ldrh	r2, [r3, #0]
 8005e5e:	4b7e      	ldr	r3, [pc, #504]	; (8006058 <tcp_input+0x2c8>)
 8005e60:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fd ff9c 	bl	8003da4 <pbuf_remove_header>
 8005e6c:	e05d      	b.n	8005f2a <tcp_input+0x19a>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10a      	bne.n	8005e8c <tcp_input+0xfc>
 8005e76:	4b6f      	ldr	r3, [pc, #444]	; (8006034 <tcp_input+0x2a4>)
 8005e78:	22c2      	movs	r2, #194	; 0xc2
 8005e7a:	4978      	ldr	r1, [pc, #480]	; (800605c <tcp_input+0x2cc>)
 8005e7c:	486f      	ldr	r0, [pc, #444]	; (800603c <tcp_input+0x2ac>)
 8005e7e:	f00a fb65 	bl	801054c <iprintf>
 8005e82:	2000      	movs	r0, #0
 8005e84:	f00a fc64 	bl	8010750 <fflush>
 8005e88:	f00a fba9 	bl	80105de <abort>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8005e8c:	2114      	movs	r1, #20
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fd ff88 	bl	8003da4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	895a      	ldrh	r2, [r3, #10]
 8005e98:	4b6f      	ldr	r3, [pc, #444]	; (8006058 <tcp_input+0x2c8>)
 8005e9a:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8005e9c:	4b6c      	ldr	r3, [pc, #432]	; (8006050 <tcp_input+0x2c0>)
 8005e9e:	881a      	ldrh	r2, [r3, #0]
 8005ea0:	4b6d      	ldr	r3, [pc, #436]	; (8006058 <tcp_input+0x2c8>)
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8005ea8:	4b6b      	ldr	r3, [pc, #428]	; (8006058 <tcp_input+0x2c8>)
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	4619      	mov	r1, r3
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fd ff78 	bl	8003da4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	895b      	ldrh	r3, [r3, #10]
 8005eba:	89ba      	ldrh	r2, [r7, #12]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	f200 839c 	bhi.w	80065fa <tcp_input+0x86a>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	4a62      	ldr	r2, [pc, #392]	; (8006054 <tcp_input+0x2c4>)
 8005eca:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	89ba      	ldrh	r2, [r7, #12]
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fd ff65 	bl	8003da4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	891a      	ldrh	r2, [r3, #8]
 8005ede:	89bb      	ldrh	r3, [r7, #12]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	895b      	ldrh	r3, [r3, #10]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <tcp_input+0x176>
 8005ef0:	4b50      	ldr	r3, [pc, #320]	; (8006034 <tcp_input+0x2a4>)
 8005ef2:	22df      	movs	r2, #223	; 0xdf
 8005ef4:	495a      	ldr	r1, [pc, #360]	; (8006060 <tcp_input+0x2d0>)
 8005ef6:	4851      	ldr	r0, [pc, #324]	; (800603c <tcp_input+0x2ac>)
 8005ef8:	f00a fb28 	bl	801054c <iprintf>
 8005efc:	2000      	movs	r0, #0
 8005efe:	f00a fc27 	bl	8010750 <fflush>
 8005f02:	f00a fb6c 	bl	80105de <abort>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	891a      	ldrh	r2, [r3, #8]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	891b      	ldrh	r3, [r3, #8]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d00a      	beq.n	8005f2a <tcp_input+0x19a>
 8005f14:	4b47      	ldr	r3, [pc, #284]	; (8006034 <tcp_input+0x2a4>)
 8005f16:	22e0      	movs	r2, #224	; 0xe0
 8005f18:	4952      	ldr	r1, [pc, #328]	; (8006064 <tcp_input+0x2d4>)
 8005f1a:	4848      	ldr	r0, [pc, #288]	; (800603c <tcp_input+0x2ac>)
 8005f1c:	f00a fb16 	bl	801054c <iprintf>
 8005f20:	2000      	movs	r0, #0
 8005f22:	f00a fc15 	bl	8010750 <fflush>
 8005f26:	f00a fb5a 	bl	80105de <abort>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8005f2a:	4b45      	ldr	r3, [pc, #276]	; (8006040 <tcp_input+0x2b0>)
 8005f2c:	681c      	ldr	r4, [r3, #0]
 8005f2e:	4b44      	ldr	r3, [pc, #272]	; (8006040 <tcp_input+0x2b0>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fb fd92 	bl	8001a60 <lwip_htons>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8005f40:	4b3f      	ldr	r3, [pc, #252]	; (8006040 <tcp_input+0x2b0>)
 8005f42:	681c      	ldr	r4, [r3, #0]
 8005f44:	4b3e      	ldr	r3, [pc, #248]	; (8006040 <tcp_input+0x2b0>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	885b      	ldrh	r3, [r3, #2]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fb fd87 	bl	8001a60 <lwip_htons>
 8005f52:	4603      	mov	r3, r0
 8005f54:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8005f56:	4b3a      	ldr	r3, [pc, #232]	; (8006040 <tcp_input+0x2b0>)
 8005f58:	681c      	ldr	r4, [r3, #0]
 8005f5a:	4b39      	ldr	r3, [pc, #228]	; (8006040 <tcp_input+0x2b0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fb fd92 	bl	8001a8a <lwip_htonl>
 8005f66:	4603      	mov	r3, r0
 8005f68:	6063      	str	r3, [r4, #4]
 8005f6a:	6863      	ldr	r3, [r4, #4]
 8005f6c:	4a3e      	ldr	r2, [pc, #248]	; (8006068 <tcp_input+0x2d8>)
 8005f6e:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8005f70:	4b33      	ldr	r3, [pc, #204]	; (8006040 <tcp_input+0x2b0>)
 8005f72:	681c      	ldr	r4, [r3, #0]
 8005f74:	4b32      	ldr	r3, [pc, #200]	; (8006040 <tcp_input+0x2b0>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fb fd85 	bl	8001a8a <lwip_htonl>
 8005f80:	4603      	mov	r3, r0
 8005f82:	60a3      	str	r3, [r4, #8]
 8005f84:	68a3      	ldr	r3, [r4, #8]
 8005f86:	4a39      	ldr	r2, [pc, #228]	; (800606c <tcp_input+0x2dc>)
 8005f88:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8005f8a:	4b2d      	ldr	r3, [pc, #180]	; (8006040 <tcp_input+0x2b0>)
 8005f8c:	681c      	ldr	r4, [r3, #0]
 8005f8e:	4b2c      	ldr	r3, [pc, #176]	; (8006040 <tcp_input+0x2b0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	89db      	ldrh	r3, [r3, #14]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fb fd62 	bl	8001a60 <lwip_htons>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8005fa0:	4b27      	ldr	r3, [pc, #156]	; (8006040 <tcp_input+0x2b0>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	899b      	ldrh	r3, [r3, #12]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fb fd59 	bl	8001a60 <lwip_htons>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	4b2d      	ldr	r3, [pc, #180]	; (8006070 <tcp_input+0x2e0>)
 8005fba:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	891a      	ldrh	r2, [r3, #8]
 8005fc0:	4b2c      	ldr	r3, [pc, #176]	; (8006074 <tcp_input+0x2e4>)
 8005fc2:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8005fc4:	4b2a      	ldr	r3, [pc, #168]	; (8006070 <tcp_input+0x2e0>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	f003 0303 	and.w	r3, r3, #3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00c      	beq.n	8005fea <tcp_input+0x25a>
    tcplen++;
 8005fd0:	4b28      	ldr	r3, [pc, #160]	; (8006074 <tcp_input+0x2e4>)
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	4b26      	ldr	r3, [pc, #152]	; (8006074 <tcp_input+0x2e4>)
 8005fda:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	891a      	ldrh	r2, [r3, #8]
 8005fe0:	4b24      	ldr	r3, [pc, #144]	; (8006074 <tcp_input+0x2e4>)
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	f200 830a 	bhi.w	80065fe <tcp_input+0x86e>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005fee:	4b22      	ldr	r3, [pc, #136]	; (8006078 <tcp_input+0x2e8>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	61fb      	str	r3, [r7, #28]
 8005ff4:	e0b7      	b.n	8006166 <tcp_input+0x3d6>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	7d1b      	ldrb	r3, [r3, #20]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10a      	bne.n	8006014 <tcp_input+0x284>
 8005ffe:	4b0d      	ldr	r3, [pc, #52]	; (8006034 <tcp_input+0x2a4>)
 8006000:	22fb      	movs	r2, #251	; 0xfb
 8006002:	491e      	ldr	r1, [pc, #120]	; (800607c <tcp_input+0x2ec>)
 8006004:	480d      	ldr	r0, [pc, #52]	; (800603c <tcp_input+0x2ac>)
 8006006:	f00a faa1 	bl	801054c <iprintf>
 800600a:	2000      	movs	r0, #0
 800600c:	f00a fba0 	bl	8010750 <fflush>
 8006010:	f00a fae5 	bl	80105de <abort>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	7d1b      	ldrb	r3, [r3, #20]
 8006018:	2b0a      	cmp	r3, #10
 800601a:	d133      	bne.n	8006084 <tcp_input+0x2f4>
 800601c:	4b05      	ldr	r3, [pc, #20]	; (8006034 <tcp_input+0x2a4>)
 800601e:	22fc      	movs	r2, #252	; 0xfc
 8006020:	4917      	ldr	r1, [pc, #92]	; (8006080 <tcp_input+0x2f0>)
 8006022:	4806      	ldr	r0, [pc, #24]	; (800603c <tcp_input+0x2ac>)
 8006024:	f00a fa92 	bl	801054c <iprintf>
 8006028:	2000      	movs	r0, #0
 800602a:	f00a fb91 	bl	8010750 <fflush>
 800602e:	f00a fad6 	bl	80105de <abort>
 8006032:	bf00      	nop
 8006034:	08012d0c 	.word	0x08012d0c
 8006038:	08012d30 	.word	0x08012d30
 800603c:	08012d48 	.word	0x08012d48
 8006040:	200003c8 	.word	0x200003c8
 8006044:	20000590 	.word	0x20000590
 8006048:	200005a4 	.word	0x200005a4
 800604c:	200005a0 	.word	0x200005a0
 8006050:	200003cc 	.word	0x200003cc
 8006054:	200003d0 	.word	0x200003d0
 8006058:	200003ce 	.word	0x200003ce
 800605c:	08012d70 	.word	0x08012d70
 8006060:	08012d80 	.word	0x08012d80
 8006064:	08012d8c 	.word	0x08012d8c
 8006068:	200003d8 	.word	0x200003d8
 800606c:	200003dc 	.word	0x200003dc
 8006070:	200003e4 	.word	0x200003e4
 8006074:	200003e2 	.word	0x200003e2
 8006078:	200015cc 	.word	0x200015cc
 800607c:	08012dac 	.word	0x08012dac
 8006080:	08012dd4 	.word	0x08012dd4
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	7d1b      	ldrb	r3, [r3, #20]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d10a      	bne.n	80060a2 <tcp_input+0x312>
 800608c:	4b88      	ldr	r3, [pc, #544]	; (80062b0 <tcp_input+0x520>)
 800608e:	22fd      	movs	r2, #253	; 0xfd
 8006090:	4988      	ldr	r1, [pc, #544]	; (80062b4 <tcp_input+0x524>)
 8006092:	4889      	ldr	r0, [pc, #548]	; (80062b8 <tcp_input+0x528>)
 8006094:	f00a fa5a 	bl	801054c <iprintf>
 8006098:	2000      	movs	r0, #0
 800609a:	f00a fb59 	bl	8010750 <fflush>
 800609e:	f00a fa9e 	bl	80105de <abort>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	7a1b      	ldrb	r3, [r3, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00c      	beq.n	80060c4 <tcp_input+0x334>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	7a1a      	ldrb	r2, [r3, #8]
 80060ae:	4b83      	ldr	r3, [pc, #524]	; (80062bc <tcp_input+0x52c>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80060b6:	3301      	adds	r3, #1
 80060b8:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d002      	beq.n	80060c4 <tcp_input+0x334>
      prev = pcb;
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	61bb      	str	r3, [r7, #24]
      continue;
 80060c2:	e04d      	b.n	8006160 <tcp_input+0x3d0>
    }

    if (pcb->remote_port == tcphdr->src &&
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	8b1a      	ldrh	r2, [r3, #24]
 80060c8:	4b7d      	ldr	r3, [pc, #500]	; (80062c0 <tcp_input+0x530>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d143      	bne.n	800615c <tcp_input+0x3cc>
        pcb->local_port == tcphdr->dest &&
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	8ada      	ldrh	r2, [r3, #22]
 80060d8:	4b79      	ldr	r3, [pc, #484]	; (80062c0 <tcp_input+0x530>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	885b      	ldrh	r3, [r3, #2]
 80060de:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d13b      	bne.n	800615c <tcp_input+0x3cc>
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	4b74      	ldr	r3, [pc, #464]	; (80062bc <tcp_input+0x52c>)
 80060ea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d135      	bne.n	800615c <tcp_input+0x3cc>
        ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	4b71      	ldr	r3, [pc, #452]	; (80062bc <tcp_input+0x52c>)
 80060f6:	695b      	ldr	r3, [r3, #20]
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d12f      	bne.n	800615c <tcp_input+0x3cc>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	429a      	cmp	r2, r3
 8006104:	d10b      	bne.n	800611e <tcp_input+0x38e>
 8006106:	4b6a      	ldr	r3, [pc, #424]	; (80062b0 <tcp_input+0x520>)
 8006108:	f240 120d 	movw	r2, #269	; 0x10d
 800610c:	496d      	ldr	r1, [pc, #436]	; (80062c4 <tcp_input+0x534>)
 800610e:	486a      	ldr	r0, [pc, #424]	; (80062b8 <tcp_input+0x528>)
 8006110:	f00a fa1c 	bl	801054c <iprintf>
 8006114:	2000      	movs	r0, #0
 8006116:	f00a fb1b 	bl	8010750 <fflush>
 800611a:	f00a fa60 	bl	80105de <abort>
      if (prev != NULL) {
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00a      	beq.n	800613a <tcp_input+0x3aa>
        prev->next = pcb->next;
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800612c:	4b66      	ldr	r3, [pc, #408]	; (80062c8 <tcp_input+0x538>)
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006134:	4a64      	ldr	r2, [pc, #400]	; (80062c8 <tcp_input+0x538>)
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	429a      	cmp	r2, r3
 8006142:	d115      	bne.n	8006170 <tcp_input+0x3e0>
 8006144:	4b5a      	ldr	r3, [pc, #360]	; (80062b0 <tcp_input+0x520>)
 8006146:	f240 1215 	movw	r2, #277	; 0x115
 800614a:	4960      	ldr	r1, [pc, #384]	; (80062cc <tcp_input+0x53c>)
 800614c:	485a      	ldr	r0, [pc, #360]	; (80062b8 <tcp_input+0x528>)
 800614e:	f00a f9fd 	bl	801054c <iprintf>
 8006152:	2000      	movs	r0, #0
 8006154:	f00a fafc 	bl	8010750 <fflush>
 8006158:	f00a fa41 	bl	80105de <abort>
      break;
    }
    prev = pcb;
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	61fb      	str	r3, [r7, #28]
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f47f af44 	bne.w	8005ff6 <tcp_input+0x266>
 800616e:	e000      	b.n	8006172 <tcp_input+0x3e2>
      break;
 8006170:	bf00      	nop
  }

  if (pcb == NULL) {
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f040 80b1 	bne.w	80062dc <tcp_input+0x54c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800617a:	4b55      	ldr	r3, [pc, #340]	; (80062d0 <tcp_input+0x540>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	61fb      	str	r3, [r7, #28]
 8006180:	e044      	b.n	800620c <tcp_input+0x47c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	7d1b      	ldrb	r3, [r3, #20]
 8006186:	2b0a      	cmp	r3, #10
 8006188:	d00b      	beq.n	80061a2 <tcp_input+0x412>
 800618a:	4b49      	ldr	r3, [pc, #292]	; (80062b0 <tcp_input+0x520>)
 800618c:	f240 121f 	movw	r2, #287	; 0x11f
 8006190:	4950      	ldr	r1, [pc, #320]	; (80062d4 <tcp_input+0x544>)
 8006192:	4849      	ldr	r0, [pc, #292]	; (80062b8 <tcp_input+0x528>)
 8006194:	f00a f9da 	bl	801054c <iprintf>
 8006198:	2000      	movs	r0, #0
 800619a:	f00a fad9 	bl	8010750 <fflush>
 800619e:	f00a fa1e 	bl	80105de <abort>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	7a1b      	ldrb	r3, [r3, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d009      	beq.n	80061be <tcp_input+0x42e>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	7a1a      	ldrb	r2, [r3, #8]
 80061ae:	4b43      	ldr	r3, [pc, #268]	; (80062bc <tcp_input+0x52c>)
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80061b6:	3301      	adds	r3, #1
 80061b8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d122      	bne.n	8006204 <tcp_input+0x474>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	8b1a      	ldrh	r2, [r3, #24]
 80061c2:	4b3f      	ldr	r3, [pc, #252]	; (80062c0 <tcp_input+0x530>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d11b      	bne.n	8006206 <tcp_input+0x476>
          pcb->local_port == tcphdr->dest &&
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	8ada      	ldrh	r2, [r3, #22]
 80061d2:	4b3b      	ldr	r3, [pc, #236]	; (80062c0 <tcp_input+0x530>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	885b      	ldrh	r3, [r3, #2]
 80061d8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80061da:	429a      	cmp	r2, r3
 80061dc:	d113      	bne.n	8006206 <tcp_input+0x476>
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	4b36      	ldr	r3, [pc, #216]	; (80062bc <tcp_input+0x52c>)
 80061e4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d10d      	bne.n	8006206 <tcp_input+0x476>
          ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	4b33      	ldr	r3, [pc, #204]	; (80062bc <tcp_input+0x52c>)
 80061f0:	695b      	ldr	r3, [r3, #20]
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d107      	bne.n	8006206 <tcp_input+0x476>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80061f6:	69f8      	ldr	r0, [r7, #28]
 80061f8:	f000 fb62 	bl	80068c0 <tcp_timewait_input>
        }
        pbuf_free(p);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7fd fe5b 	bl	8003eb8 <pbuf_free>
        return;
 8006202:	e202      	b.n	800660a <tcp_input+0x87a>
        continue;
 8006204:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	61fb      	str	r3, [r7, #28]
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1b7      	bne.n	8006182 <tcp_input+0x3f2>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8006212:	2300      	movs	r3, #0
 8006214:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006216:	4b30      	ldr	r3, [pc, #192]	; (80062d8 <tcp_input+0x548>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	e02a      	b.n	8006274 <tcp_input+0x4e4>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	7a1b      	ldrb	r3, [r3, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00c      	beq.n	8006240 <tcp_input+0x4b0>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	7a1a      	ldrb	r2, [r3, #8]
 800622a:	4b24      	ldr	r3, [pc, #144]	; (80062bc <tcp_input+0x52c>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006232:	3301      	adds	r3, #1
 8006234:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006236:	429a      	cmp	r2, r3
 8006238:	d002      	beq.n	8006240 <tcp_input+0x4b0>
        prev = (struct tcp_pcb *)lpcb;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	61bb      	str	r3, [r7, #24]
        continue;
 800623e:	e016      	b.n	800626e <tcp_input+0x4de>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	8ada      	ldrh	r2, [r3, #22]
 8006244:	4b1e      	ldr	r3, [pc, #120]	; (80062c0 <tcp_input+0x530>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	885b      	ldrh	r3, [r3, #2]
 800624a:	b29b      	uxth	r3, r3
 800624c:	429a      	cmp	r2, r3
 800624e:	d10c      	bne.n	800626a <tcp_input+0x4da>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_eq(&lpcb->local_ip, ip_current_dest_addr())) {
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	4b19      	ldr	r3, [pc, #100]	; (80062bc <tcp_input+0x52c>)
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	429a      	cmp	r2, r3
 800625a:	d00f      	beq.n	800627c <tcp_input+0x4ec>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00d      	beq.n	800627e <tcp_input+0x4ee>
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d009      	beq.n	800627e <tcp_input+0x4ee>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1d1      	bne.n	800621e <tcp_input+0x48e>
 800627a:	e000      	b.n	800627e <tcp_input+0x4ee>
            break;
 800627c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d02b      	beq.n	80062dc <tcp_input+0x54c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <tcp_input+0x510>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006292:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <tcp_input+0x548>)
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800629a:	4a0f      	ldr	r2, [pc, #60]	; (80062d8 <tcp_input+0x548>)
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80062a0:	6978      	ldr	r0, [r7, #20]
 80062a2:	f000 fa09 	bl	80066b8 <tcp_listen_input>
      }
      pbuf_free(p);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fd fe06 	bl	8003eb8 <pbuf_free>
      return;
 80062ac:	e1ad      	b.n	800660a <tcp_input+0x87a>
 80062ae:	bf00      	nop
 80062b0:	08012d0c 	.word	0x08012d0c
 80062b4:	08012e00 	.word	0x08012e00
 80062b8:	08012d48 	.word	0x08012d48
 80062bc:	20000590 	.word	0x20000590
 80062c0:	200003c8 	.word	0x200003c8
 80062c4:	08012e28 	.word	0x08012e28
 80062c8:	200015cc 	.word	0x200015cc
 80062cc:	08012e54 	.word	0x08012e54
 80062d0:	200015dc 	.word	0x200015dc
 80062d4:	08012e80 	.word	0x08012e80
 80062d8:	200015d4 	.word	0x200015d4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 815a 	beq.w	8006598 <tcp_input+0x808>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80062e4:	4ba0      	ldr	r3, [pc, #640]	; (8006568 <tcp_input+0x7d8>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	891a      	ldrh	r2, [r3, #8]
 80062ee:	4b9e      	ldr	r3, [pc, #632]	; (8006568 <tcp_input+0x7d8>)
 80062f0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80062f2:	4a9d      	ldr	r2, [pc, #628]	; (8006568 <tcp_input+0x7d8>)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80062f8:	4b9c      	ldr	r3, [pc, #624]	; (800656c <tcp_input+0x7dc>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a9a      	ldr	r2, [pc, #616]	; (8006568 <tcp_input+0x7d8>)
 80062fe:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8006300:	4b9b      	ldr	r3, [pc, #620]	; (8006570 <tcp_input+0x7e0>)
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8006306:	4b9b      	ldr	r3, [pc, #620]	; (8006574 <tcp_input+0x7e4>)
 8006308:	2200      	movs	r2, #0
 800630a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800630c:	4b9a      	ldr	r3, [pc, #616]	; (8006578 <tcp_input+0x7e8>)
 800630e:	2200      	movs	r2, #0
 8006310:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8006312:	4b9a      	ldr	r3, [pc, #616]	; (800657c <tcp_input+0x7ec>)
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	f003 0308 	and.w	r3, r3, #8
 800631a:	2b00      	cmp	r3, #0
 800631c:	d006      	beq.n	800632c <tcp_input+0x59c>
      p->flags |= PBUF_FLAG_PUSH;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	7b5b      	ldrb	r3, [r3, #13]
 8006322:	f043 0301 	orr.w	r3, r3, #1
 8006326:	b2da      	uxtb	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006330:	2b00      	cmp	r3, #0
 8006332:	d017      	beq.n	8006364 <tcp_input+0x5d4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006334:	69f8      	ldr	r0, [r7, #28]
 8006336:	f7ff f8b5 	bl	80054a4 <tcp_process_refused_data>
 800633a:	4603      	mov	r3, r0
 800633c:	f113 0f0d 	cmn.w	r3, #13
 8006340:	d007      	beq.n	8006352 <tcp_input+0x5c2>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00c      	beq.n	8006364 <tcp_input+0x5d4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800634a:	4b8d      	ldr	r3, [pc, #564]	; (8006580 <tcp_input+0x7f0>)
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d008      	beq.n	8006364 <tcp_input+0x5d4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006356:	2b00      	cmp	r3, #0
 8006358:	f040 80e8 	bne.w	800652c <tcp_input+0x79c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800635c:	69f8      	ldr	r0, [r7, #28]
 800635e:	f003 fb83 	bl	8009a68 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8006362:	e0e3      	b.n	800652c <tcp_input+0x79c>
      }
    }
    tcp_input_pcb = pcb;
 8006364:	4a87      	ldr	r2, [pc, #540]	; (8006584 <tcp_input+0x7f4>)
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800636a:	69f8      	ldr	r0, [r7, #28]
 800636c:	f000 fb28 	bl	80069c0 <tcp_process>
 8006370:	4603      	mov	r3, r0
 8006372:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8006374:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006378:	f113 0f0d 	cmn.w	r3, #13
 800637c:	f000 80e1 	beq.w	8006542 <tcp_input+0x7b2>
      if (recv_flags & TF_RESET) {
 8006380:	4b7c      	ldr	r3, [pc, #496]	; (8006574 <tcp_input+0x7e4>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	f003 0308 	and.w	r3, r3, #8
 8006388:	2b00      	cmp	r3, #0
 800638a:	d015      	beq.n	80063b8 <tcp_input+0x628>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	2b00      	cmp	r3, #0
 8006394:	d008      	beq.n	80063a8 <tcp_input+0x618>
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639c:	69fa      	ldr	r2, [r7, #28]
 800639e:	6912      	ldr	r2, [r2, #16]
 80063a0:	f06f 010d 	mvn.w	r1, #13
 80063a4:	4610      	mov	r0, r2
 80063a6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80063a8:	69f9      	ldr	r1, [r7, #28]
 80063aa:	4877      	ldr	r0, [pc, #476]	; (8006588 <tcp_input+0x7f8>)
 80063ac:	f7ff fb52 	bl	8005a54 <tcp_pcb_remove>
        tcp_free(pcb);
 80063b0:	69f8      	ldr	r0, [r7, #28]
 80063b2:	f7fe f8cd 	bl	8004550 <tcp_free>
 80063b6:	e0c4      	b.n	8006542 <tcp_input+0x7b2>
      } else {
        err = ERR_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80063bc:	4b6e      	ldr	r3, [pc, #440]	; (8006578 <tcp_input+0x7e8>)
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d01d      	beq.n	8006400 <tcp_input+0x670>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80063c4:	4b6c      	ldr	r3, [pc, #432]	; (8006578 <tcp_input+0x7e8>)
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <tcp_input+0x65a>
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063da:	69fa      	ldr	r2, [r7, #28]
 80063dc:	6910      	ldr	r0, [r2, #16]
 80063de:	897a      	ldrh	r2, [r7, #10]
 80063e0:	69f9      	ldr	r1, [r7, #28]
 80063e2:	4798      	blx	r3
 80063e4:	4603      	mov	r3, r0
 80063e6:	74fb      	strb	r3, [r7, #19]
 80063e8:	e001      	b.n	80063ee <tcp_input+0x65e>
 80063ea:	2300      	movs	r3, #0
 80063ec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80063ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80063f2:	f113 0f0d 	cmn.w	r3, #13
 80063f6:	f000 809b 	beq.w	8006530 <tcp_input+0x7a0>
              goto aborted;
            }
          }
          recv_acked = 0;
 80063fa:	4b5f      	ldr	r3, [pc, #380]	; (8006578 <tcp_input+0x7e8>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8006400:	69f8      	ldr	r0, [r7, #28]
 8006402:	f000 f913 	bl	800662c <tcp_input_delayed_close>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	f040 8093 	bne.w	8006534 <tcp_input+0x7a4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800640e:	4b58      	ldr	r3, [pc, #352]	; (8006570 <tcp_input+0x7e0>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d046      	beq.n	80064a4 <tcp_input+0x714>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00b      	beq.n	8006436 <tcp_input+0x6a6>
 800641e:	4b5b      	ldr	r3, [pc, #364]	; (800658c <tcp_input+0x7fc>)
 8006420:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8006424:	495a      	ldr	r1, [pc, #360]	; (8006590 <tcp_input+0x800>)
 8006426:	485b      	ldr	r0, [pc, #364]	; (8006594 <tcp_input+0x804>)
 8006428:	f00a f890 	bl	801054c <iprintf>
 800642c:	2000      	movs	r0, #0
 800642e:	f00a f98f 	bl	8010750 <fflush>
 8006432:	f00a f8d4 	bl	80105de <abort>
          if (pcb->flags & TF_RXCLOSED) {
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	8b5b      	ldrh	r3, [r3, #26]
 800643a:	f003 0310 	and.w	r3, r3, #16
 800643e:	2b00      	cmp	r3, #0
 8006440:	d008      	beq.n	8006454 <tcp_input+0x6c4>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8006442:	4b4b      	ldr	r3, [pc, #300]	; (8006570 <tcp_input+0x7e0>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	f7fd fd36 	bl	8003eb8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800644c:	69f8      	ldr	r0, [r7, #28]
 800644e:	f7fe fb8d 	bl	8004b6c <tcp_abort>
            goto aborted;
 8006452:	e076      	b.n	8006542 <tcp_input+0x7b2>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00c      	beq.n	8006478 <tcp_input+0x6e8>
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	6918      	ldr	r0, [r3, #16]
 8006468:	4b41      	ldr	r3, [pc, #260]	; (8006570 <tcp_input+0x7e0>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	2300      	movs	r3, #0
 800646e:	69f9      	ldr	r1, [r7, #28]
 8006470:	47a0      	blx	r4
 8006472:	4603      	mov	r3, r0
 8006474:	74fb      	strb	r3, [r7, #19]
 8006476:	e008      	b.n	800648a <tcp_input+0x6fa>
 8006478:	4b3d      	ldr	r3, [pc, #244]	; (8006570 <tcp_input+0x7e0>)
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	2300      	movs	r3, #0
 800647e:	69f9      	ldr	r1, [r7, #28]
 8006480:	2000      	movs	r0, #0
 8006482:	f7ff f8e9 	bl	8005658 <tcp_recv_null>
 8006486:	4603      	mov	r3, r0
 8006488:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800648a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800648e:	f113 0f0d 	cmn.w	r3, #13
 8006492:	d051      	beq.n	8006538 <tcp_input+0x7a8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8006494:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <tcp_input+0x714>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800649c:	4b34      	ldr	r3, [pc, #208]	; (8006570 <tcp_input+0x7e0>)
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80064a4:	4b33      	ldr	r3, [pc, #204]	; (8006574 <tcp_input+0x7e4>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d030      	beq.n	8006512 <tcp_input+0x782>
          if (pcb->refused_data != NULL) {
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d009      	beq.n	80064cc <tcp_input+0x73c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064bc:	69fa      	ldr	r2, [r7, #28]
 80064be:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80064c0:	7b52      	ldrb	r2, [r2, #13]
 80064c2:	f042 0220 	orr.w	r2, r2, #32
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	735a      	strb	r2, [r3, #13]
 80064ca:	e022      	b.n	8006512 <tcp_input+0x782>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80064d4:	d005      	beq.n	80064e2 <tcp_input+0x752>
              pcb->rcv_wnd++;
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064da:	3301      	adds	r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00b      	beq.n	8006504 <tcp_input+0x774>
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	6918      	ldr	r0, [r3, #16]
 80064f6:	2300      	movs	r3, #0
 80064f8:	2200      	movs	r2, #0
 80064fa:	69f9      	ldr	r1, [r7, #28]
 80064fc:	47a0      	blx	r4
 80064fe:	4603      	mov	r3, r0
 8006500:	74fb      	strb	r3, [r7, #19]
 8006502:	e001      	b.n	8006508 <tcp_input+0x778>
 8006504:	2300      	movs	r3, #0
 8006506:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8006508:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800650c:	f113 0f0d 	cmn.w	r3, #13
 8006510:	d014      	beq.n	800653c <tcp_input+0x7ac>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8006512:	4b1c      	ldr	r3, [pc, #112]	; (8006584 <tcp_input+0x7f4>)
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8006518:	69f8      	ldr	r0, [r7, #28]
 800651a:	f000 f887 	bl	800662c <tcp_input_delayed_close>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10d      	bne.n	8006540 <tcp_input+0x7b0>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8006524:	69f8      	ldr	r0, [r7, #28]
 8006526:	f002 fb83 	bl	8008c30 <tcp_output>
 800652a:	e00a      	b.n	8006542 <tcp_input+0x7b2>
        goto aborted;
 800652c:	bf00      	nop
 800652e:	e008      	b.n	8006542 <tcp_input+0x7b2>
              goto aborted;
 8006530:	bf00      	nop
 8006532:	e006      	b.n	8006542 <tcp_input+0x7b2>
          goto aborted;
 8006534:	bf00      	nop
 8006536:	e004      	b.n	8006542 <tcp_input+0x7b2>
            goto aborted;
 8006538:	bf00      	nop
 800653a:	e002      	b.n	8006542 <tcp_input+0x7b2>
              goto aborted;
 800653c:	bf00      	nop
 800653e:	e000      	b.n	8006542 <tcp_input+0x7b2>
          goto aborted;
 8006540:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 8006542:	4b10      	ldr	r3, [pc, #64]	; (8006584 <tcp_input+0x7f4>)
 8006544:	2200      	movs	r2, #0
 8006546:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8006548:	4b09      	ldr	r3, [pc, #36]	; (8006570 <tcp_input+0x7e0>)
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800654e:	4b06      	ldr	r3, [pc, #24]	; (8006568 <tcp_input+0x7d8>)
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d058      	beq.n	8006608 <tcp_input+0x878>
      pbuf_free(inseg.p);
 8006556:	4b04      	ldr	r3, [pc, #16]	; (8006568 <tcp_input+0x7d8>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	4618      	mov	r0, r3
 800655c:	f7fd fcac 	bl	8003eb8 <pbuf_free>
      inseg.p = NULL;
 8006560:	4b01      	ldr	r3, [pc, #4]	; (8006568 <tcp_input+0x7d8>)
 8006562:	2200      	movs	r2, #0
 8006564:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8006566:	e04f      	b.n	8006608 <tcp_input+0x878>
 8006568:	200003b4 	.word	0x200003b4
 800656c:	200003c8 	.word	0x200003c8
 8006570:	200003e8 	.word	0x200003e8
 8006574:	200003e5 	.word	0x200003e5
 8006578:	200003e0 	.word	0x200003e0
 800657c:	200003e4 	.word	0x200003e4
 8006580:	200003e2 	.word	0x200003e2
 8006584:	200015e0 	.word	0x200015e0
 8006588:	200015cc 	.word	0x200015cc
 800658c:	08012d0c 	.word	0x08012d0c
 8006590:	08012eb0 	.word	0x08012eb0
 8006594:	08012d48 	.word	0x08012d48
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8006598:	4b1d      	ldr	r3, [pc, #116]	; (8006610 <tcp_input+0x880>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	899b      	ldrh	r3, [r3, #12]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fb fa5d 	bl	8001a60 <lwip_htons>
 80065a6:	4603      	mov	r3, r0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	f003 0304 	and.w	r3, r3, #4
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d119      	bne.n	80065e6 <tcp_input+0x856>
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80065b2:	4b18      	ldr	r3, [pc, #96]	; (8006614 <tcp_input+0x884>)
 80065b4:	6858      	ldr	r0, [r3, #4]
 80065b6:	4b18      	ldr	r3, [pc, #96]	; (8006618 <tcp_input+0x888>)
 80065b8:	6819      	ldr	r1, [r3, #0]
 80065ba:	4b18      	ldr	r3, [pc, #96]	; (800661c <tcp_input+0x88c>)
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	4b17      	ldr	r3, [pc, #92]	; (8006620 <tcp_input+0x890>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	18d4      	adds	r4, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80065c6:	4b12      	ldr	r3, [pc, #72]	; (8006610 <tcp_input+0x880>)
 80065c8:	681b      	ldr	r3, [r3, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80065ca:	885b      	ldrh	r3, [r3, #2]
 80065cc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80065ce:	4a10      	ldr	r2, [pc, #64]	; (8006610 <tcp_input+0x880>)
 80065d0:	6812      	ldr	r2, [r2, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80065d2:	8812      	ldrh	r2, [r2, #0]
 80065d4:	b292      	uxth	r2, r2
 80065d6:	9202      	str	r2, [sp, #8]
 80065d8:	9301      	str	r3, [sp, #4]
 80065da:	4b12      	ldr	r3, [pc, #72]	; (8006624 <tcp_input+0x894>)
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	4b12      	ldr	r3, [pc, #72]	; (8006628 <tcp_input+0x898>)
 80065e0:	4622      	mov	r2, r4
 80065e2:	f003 fa1a 	bl	8009a1a <tcp_rst_netif>
    pbuf_free(p);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fd fc66 	bl	8003eb8 <pbuf_free>
  return;
 80065ec:	e00c      	b.n	8006608 <tcp_input+0x878>
    goto dropped;
 80065ee:	bf00      	nop
 80065f0:	e006      	b.n	8006600 <tcp_input+0x870>
      goto dropped;
 80065f2:	bf00      	nop
 80065f4:	e004      	b.n	8006600 <tcp_input+0x870>
    goto dropped;
 80065f6:	bf00      	nop
 80065f8:	e002      	b.n	8006600 <tcp_input+0x870>
      goto dropped;
 80065fa:	bf00      	nop
 80065fc:	e000      	b.n	8006600 <tcp_input+0x870>
      goto dropped;
 80065fe:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7fd fc59 	bl	8003eb8 <pbuf_free>
 8006606:	e000      	b.n	800660a <tcp_input+0x87a>
  return;
 8006608:	bf00      	nop
}
 800660a:	3724      	adds	r7, #36	; 0x24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd90      	pop	{r4, r7, pc}
 8006610:	200003c8 	.word	0x200003c8
 8006614:	20000590 	.word	0x20000590
 8006618:	200003dc 	.word	0x200003dc
 800661c:	200003e2 	.word	0x200003e2
 8006620:	200003d8 	.word	0x200003d8
 8006624:	200005a0 	.word	0x200005a0
 8006628:	200005a4 	.word	0x200005a4

0800662c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10b      	bne.n	8006652 <tcp_input_delayed_close+0x26>
 800663a:	4b1a      	ldr	r3, [pc, #104]	; (80066a4 <tcp_input_delayed_close+0x78>)
 800663c:	f240 225a 	movw	r2, #602	; 0x25a
 8006640:	4919      	ldr	r1, [pc, #100]	; (80066a8 <tcp_input_delayed_close+0x7c>)
 8006642:	481a      	ldr	r0, [pc, #104]	; (80066ac <tcp_input_delayed_close+0x80>)
 8006644:	f009 ff82 	bl	801054c <iprintf>
 8006648:	2000      	movs	r0, #0
 800664a:	f00a f881 	bl	8010750 <fflush>
 800664e:	f009 ffc6 	bl	80105de <abort>

  if (recv_flags & TF_CLOSED) {
 8006652:	4b17      	ldr	r3, [pc, #92]	; (80066b0 <tcp_input_delayed_close+0x84>)
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	f003 0310 	and.w	r3, r3, #16
 800665a:	2b00      	cmp	r3, #0
 800665c:	d01c      	beq.n	8006698 <tcp_input_delayed_close+0x6c>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	8b5b      	ldrh	r3, [r3, #26]
 8006662:	f003 0310 	and.w	r3, r3, #16
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10d      	bne.n	8006686 <tcp_input_delayed_close+0x5a>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006670:	2b00      	cmp	r3, #0
 8006672:	d008      	beq.n	8006686 <tcp_input_delayed_close+0x5a>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6912      	ldr	r2, [r2, #16]
 800667e:	f06f 010e 	mvn.w	r1, #14
 8006682:	4610      	mov	r0, r2
 8006684:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	480a      	ldr	r0, [pc, #40]	; (80066b4 <tcp_input_delayed_close+0x88>)
 800668a:	f7ff f9e3 	bl	8005a54 <tcp_pcb_remove>
    tcp_free(pcb);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7fd ff5e 	bl	8004550 <tcp_free>
    return 1;
 8006694:	2301      	movs	r3, #1
 8006696:	e000      	b.n	800669a <tcp_input_delayed_close+0x6e>
  }
  return 0;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	08012d0c 	.word	0x08012d0c
 80066a8:	08012ecc 	.word	0x08012ecc
 80066ac:	08012d48 	.word	0x08012d48
 80066b0:	200003e5 	.word	0x200003e5
 80066b4:	200015cc 	.word	0x200015cc

080066b8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80066b8:	b590      	push	{r4, r7, lr}
 80066ba:	b08b      	sub	sp, #44	; 0x2c
 80066bc:	af04      	add	r7, sp, #16
 80066be:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80066c0:	4b72      	ldr	r3, [pc, #456]	; (800688c <tcp_listen_input+0x1d4>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f040 80d9 	bne.w	8006880 <tcp_listen_input+0x1c8>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10b      	bne.n	80066ec <tcp_listen_input+0x34>
 80066d4:	4b6e      	ldr	r3, [pc, #440]	; (8006890 <tcp_listen_input+0x1d8>)
 80066d6:	f240 2281 	movw	r2, #641	; 0x281
 80066da:	496e      	ldr	r1, [pc, #440]	; (8006894 <tcp_listen_input+0x1dc>)
 80066dc:	486e      	ldr	r0, [pc, #440]	; (8006898 <tcp_listen_input+0x1e0>)
 80066de:	f009 ff35 	bl	801054c <iprintf>
 80066e2:	2000      	movs	r0, #0
 80066e4:	f00a f834 	bl	8010750 <fflush>
 80066e8:	f009 ff79 	bl	80105de <abort>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80066ec:	4b67      	ldr	r3, [pc, #412]	; (800688c <tcp_listen_input+0x1d4>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	f003 0310 	and.w	r3, r3, #16
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01a      	beq.n	800672e <tcp_listen_input+0x76>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80066f8:	4b68      	ldr	r3, [pc, #416]	; (800689c <tcp_listen_input+0x1e4>)
 80066fa:	6858      	ldr	r0, [r3, #4]
 80066fc:	4b68      	ldr	r3, [pc, #416]	; (80068a0 <tcp_listen_input+0x1e8>)
 80066fe:	6819      	ldr	r1, [r3, #0]
 8006700:	4b68      	ldr	r3, [pc, #416]	; (80068a4 <tcp_listen_input+0x1ec>)
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	4b68      	ldr	r3, [pc, #416]	; (80068a8 <tcp_listen_input+0x1f0>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	18d4      	adds	r4, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800670c:	4b67      	ldr	r3, [pc, #412]	; (80068ac <tcp_listen_input+0x1f4>)
 800670e:	681b      	ldr	r3, [r3, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006710:	885b      	ldrh	r3, [r3, #2]
 8006712:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006714:	4a65      	ldr	r2, [pc, #404]	; (80068ac <tcp_listen_input+0x1f4>)
 8006716:	6812      	ldr	r2, [r2, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006718:	8812      	ldrh	r2, [r2, #0]
 800671a:	b292      	uxth	r2, r2
 800671c:	9202      	str	r2, [sp, #8]
 800671e:	9301      	str	r3, [sp, #4]
 8006720:	4b63      	ldr	r3, [pc, #396]	; (80068b0 <tcp_listen_input+0x1f8>)
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	4b63      	ldr	r3, [pc, #396]	; (80068b4 <tcp_listen_input+0x1fc>)
 8006726:	4622      	mov	r2, r4
 8006728:	f003 f977 	bl	8009a1a <tcp_rst_netif>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800672c:	e0aa      	b.n	8006884 <tcp_listen_input+0x1cc>
  } else if (flags & TCP_SYN) {
 800672e:	4b57      	ldr	r3, [pc, #348]	; (800688c <tcp_listen_input+0x1d4>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 80a4 	beq.w	8006884 <tcp_listen_input+0x1cc>
    npcb = tcp_alloc(pcb->prio);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	7d5b      	ldrb	r3, [r3, #21]
 8006740:	4618      	mov	r0, r3
 8006742:	f7ff f8b3 	bl	80058ac <tcp_alloc>
 8006746:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d111      	bne.n	8006772 <tcp_listen_input+0xba>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <tcp_listen_input+0xb4>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	6910      	ldr	r0, [r2, #16]
 800675e:	f04f 32ff 	mov.w	r2, #4294967295
 8006762:	2100      	movs	r1, #0
 8006764:	4798      	blx	r3
 8006766:	4603      	mov	r3, r0
 8006768:	74fb      	strb	r3, [r7, #19]
      return;
 800676a:	e08c      	b.n	8006886 <tcp_listen_input+0x1ce>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800676c:	23f0      	movs	r3, #240	; 0xf0
 800676e:	74fb      	strb	r3, [r7, #19]
      return;
 8006770:	e089      	b.n	8006886 <tcp_listen_input+0x1ce>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8006772:	4b4a      	ldr	r3, [pc, #296]	; (800689c <tcp_listen_input+0x1e4>)
 8006774:	695a      	ldr	r2, [r3, #20]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800677a:	4b48      	ldr	r3, [pc, #288]	; (800689c <tcp_listen_input+0x1e4>)
 800677c:	691a      	ldr	r2, [r3, #16]
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	8ada      	ldrh	r2, [r3, #22]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800678a:	4b48      	ldr	r3, [pc, #288]	; (80068ac <tcp_listen_input+0x1f4>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29a      	uxth	r2, r3
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2203      	movs	r2, #3
 800679a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800679c:	4b42      	ldr	r3, [pc, #264]	; (80068a8 <tcp_listen_input+0x1f0>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80067ae:	6978      	ldr	r0, [r7, #20]
 80067b0:	f7ff f9fc 	bl	8005bac <tcp_next_iss>
 80067b4:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80067ce:	4b36      	ldr	r3, [pc, #216]	; (80068a8 <tcp_listen_input+0x1f0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	1e5a      	subs	r2, r3, #1
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691a      	ldr	r2, [r3, #16]
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	7a5b      	ldrb	r3, [r3, #9]
 80067ea:	f003 030c 	and.w	r3, r3, #12
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	7a1a      	ldrb	r2, [r3, #8]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80067fc:	4b2e      	ldr	r3, [pc, #184]	; (80068b8 <tcp_listen_input+0x200>)
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	60da      	str	r2, [r3, #12]
 8006804:	4a2c      	ldr	r2, [pc, #176]	; (80068b8 <tcp_listen_input+0x200>)
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	f003 faaf 	bl	8009d6c <tcp_timer_needed>
 800680e:	4b2b      	ldr	r3, [pc, #172]	; (80068bc <tcp_listen_input+0x204>)
 8006810:	2201      	movs	r2, #1
 8006812:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8006814:	6978      	ldr	r0, [r7, #20]
 8006816:	f001 fe03 	bl	8008420 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800681a:	4b24      	ldr	r3, [pc, #144]	; (80068ac <tcp_listen_input+0x1f4>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	89db      	ldrh	r3, [r3, #14]
 8006820:	b29a      	uxth	r2, r3
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	3304      	adds	r3, #4
 800683c:	4618      	mov	r0, r3
 800683e:	f7fb fc97 	bl	8002170 <ip4_route>
 8006842:	4601      	mov	r1, r0
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	3304      	adds	r3, #4
 8006848:	461a      	mov	r2, r3
 800684a:	4620      	mov	r0, r4
 800684c:	f7ff f9d8 	bl	8005c00 <tcp_eff_send_mss_netif>
 8006850:	4603      	mov	r3, r0
 8006852:	461a      	mov	r2, r3
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8006858:	2112      	movs	r1, #18
 800685a:	6978      	ldr	r0, [r7, #20]
 800685c:	f002 f8ee 	bl	8008a3c <tcp_enqueue_flags>
 8006860:	4603      	mov	r3, r0
 8006862:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 8006864:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d004      	beq.n	8006876 <tcp_listen_input+0x1be>
      tcp_abandon(npcb, 0);
 800686c:	2100      	movs	r1, #0
 800686e:	6978      	ldr	r0, [r7, #20]
 8006870:	f7fe f8ba 	bl	80049e8 <tcp_abandon>
      return;
 8006874:	e007      	b.n	8006886 <tcp_listen_input+0x1ce>
    tcp_output(npcb);
 8006876:	6978      	ldr	r0, [r7, #20]
 8006878:	f002 f9da 	bl	8008c30 <tcp_output>
  return;
 800687c:	bf00      	nop
 800687e:	e001      	b.n	8006884 <tcp_listen_input+0x1cc>
    return;
 8006880:	bf00      	nop
 8006882:	e000      	b.n	8006886 <tcp_listen_input+0x1ce>
  return;
 8006884:	bf00      	nop
}
 8006886:	371c      	adds	r7, #28
 8006888:	46bd      	mov	sp, r7
 800688a:	bd90      	pop	{r4, r7, pc}
 800688c:	200003e4 	.word	0x200003e4
 8006890:	08012d0c 	.word	0x08012d0c
 8006894:	08012ef4 	.word	0x08012ef4
 8006898:	08012d48 	.word	0x08012d48
 800689c:	20000590 	.word	0x20000590
 80068a0:	200003dc 	.word	0x200003dc
 80068a4:	200003e2 	.word	0x200003e2
 80068a8:	200003d8 	.word	0x200003d8
 80068ac:	200003c8 	.word	0x200003c8
 80068b0:	200005a0 	.word	0x200005a0
 80068b4:	200005a4 	.word	0x200005a4
 80068b8:	200015cc 	.word	0x200015cc
 80068bc:	200015c8 	.word	0x200015c8

080068c0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af04      	add	r7, sp, #16
 80068c6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80068c8:	4b32      	ldr	r3, [pc, #200]	; (8006994 <tcp_timewait_input+0xd4>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d159      	bne.n	8006988 <tcp_timewait_input+0xc8>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10b      	bne.n	80068f2 <tcp_timewait_input+0x32>
 80068da:	4b2f      	ldr	r3, [pc, #188]	; (8006998 <tcp_timewait_input+0xd8>)
 80068dc:	f240 22f1 	movw	r2, #753	; 0x2f1
 80068e0:	492e      	ldr	r1, [pc, #184]	; (800699c <tcp_timewait_input+0xdc>)
 80068e2:	482f      	ldr	r0, [pc, #188]	; (80069a0 <tcp_timewait_input+0xe0>)
 80068e4:	f009 fe32 	bl	801054c <iprintf>
 80068e8:	2000      	movs	r0, #0
 80068ea:	f009 ff31 	bl	8010750 <fflush>
 80068ee:	f009 fe76 	bl	80105de <abort>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80068f2:	4b28      	ldr	r3, [pc, #160]	; (8006994 <tcp_timewait_input+0xd4>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d02a      	beq.n	8006954 <tcp_timewait_input+0x94>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80068fe:	4b29      	ldr	r3, [pc, #164]	; (80069a4 <tcp_timewait_input+0xe4>)
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	db2d      	blt.n	8006968 <tcp_timewait_input+0xa8>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006914:	441a      	add	r2, r3
 8006916:	4b23      	ldr	r3, [pc, #140]	; (80069a4 <tcp_timewait_input+0xe4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	db23      	blt.n	8006968 <tcp_timewait_input+0xa8>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006920:	4b21      	ldr	r3, [pc, #132]	; (80069a8 <tcp_timewait_input+0xe8>)
 8006922:	6819      	ldr	r1, [r3, #0]
 8006924:	4b21      	ldr	r3, [pc, #132]	; (80069ac <tcp_timewait_input+0xec>)
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	4b1e      	ldr	r3, [pc, #120]	; (80069a4 <tcp_timewait_input+0xe4>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006930:	4b1f      	ldr	r3, [pc, #124]	; (80069b0 <tcp_timewait_input+0xf0>)
 8006932:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006934:	885b      	ldrh	r3, [r3, #2]
 8006936:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006938:	4a1d      	ldr	r2, [pc, #116]	; (80069b0 <tcp_timewait_input+0xf0>)
 800693a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800693c:	8812      	ldrh	r2, [r2, #0]
 800693e:	b292      	uxth	r2, r2
 8006940:	9202      	str	r2, [sp, #8]
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	4b1b      	ldr	r3, [pc, #108]	; (80069b4 <tcp_timewait_input+0xf4>)
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	4b1b      	ldr	r3, [pc, #108]	; (80069b8 <tcp_timewait_input+0xf8>)
 800694a:	4602      	mov	r2, r0
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f003 f843 	bl	80099d8 <tcp_rst>
      return;
 8006952:	e01c      	b.n	800698e <tcp_timewait_input+0xce>
    }
  } else if (flags & TCP_FIN) {
 8006954:	4b0f      	ldr	r3, [pc, #60]	; (8006994 <tcp_timewait_input+0xd4>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <tcp_timewait_input+0xa8>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8006960:	4b16      	ldr	r3, [pc, #88]	; (80069bc <tcp_timewait_input+0xfc>)
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8006968:	4b10      	ldr	r3, [pc, #64]	; (80069ac <tcp_timewait_input+0xec>)
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00d      	beq.n	800698c <tcp_timewait_input+0xcc>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	8b5b      	ldrh	r3, [r3, #26]
 8006974:	f043 0302 	orr.w	r3, r3, #2
 8006978:	b29a      	uxth	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f002 f956 	bl	8008c30 <tcp_output>
  }
  return;
 8006984:	bf00      	nop
 8006986:	e001      	b.n	800698c <tcp_timewait_input+0xcc>
    return;
 8006988:	bf00      	nop
 800698a:	e000      	b.n	800698e <tcp_timewait_input+0xce>
  return;
 800698c:	bf00      	nop
}
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	200003e4 	.word	0x200003e4
 8006998:	08012d0c 	.word	0x08012d0c
 800699c:	08012f14 	.word	0x08012f14
 80069a0:	08012d48 	.word	0x08012d48
 80069a4:	200003d8 	.word	0x200003d8
 80069a8:	200003dc 	.word	0x200003dc
 80069ac:	200003e2 	.word	0x200003e2
 80069b0:	200003c8 	.word	0x200003c8
 80069b4:	200005a0 	.word	0x200005a0
 80069b8:	200005a4 	.word	0x200005a4
 80069bc:	200015d0 	.word	0x200015d0

080069c0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80069c0:	b590      	push	{r4, r7, lr}
 80069c2:	b08d      	sub	sp, #52	; 0x34
 80069c4:	af04      	add	r7, sp, #16
 80069c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10b      	bne.n	80069ee <tcp_process+0x2e>
 80069d6:	4b9c      	ldr	r3, [pc, #624]	; (8006c48 <tcp_process+0x288>)
 80069d8:	f240 321f 	movw	r2, #799	; 0x31f
 80069dc:	499b      	ldr	r1, [pc, #620]	; (8006c4c <tcp_process+0x28c>)
 80069de:	489c      	ldr	r0, [pc, #624]	; (8006c50 <tcp_process+0x290>)
 80069e0:	f009 fdb4 	bl	801054c <iprintf>
 80069e4:	2000      	movs	r0, #0
 80069e6:	f009 feb3 	bl	8010750 <fflush>
 80069ea:	f009 fdf8 	bl	80105de <abort>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80069ee:	4b99      	ldr	r3, [pc, #612]	; (8006c54 <tcp_process+0x294>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d053      	beq.n	8006aa2 <tcp_process+0xe2>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	7d1b      	ldrb	r3, [r3, #20]
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d108      	bne.n	8006a14 <tcp_process+0x54>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a06:	4b94      	ldr	r3, [pc, #592]	; (8006c58 <tcp_process+0x298>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d123      	bne.n	8006a56 <tcp_process+0x96>
        acceptable = 1;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	76fb      	strb	r3, [r7, #27]
 8006a12:	e020      	b.n	8006a56 <tcp_process+0x96>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a18:	4b90      	ldr	r3, [pc, #576]	; (8006c5c <tcp_process+0x29c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d102      	bne.n	8006a26 <tcp_process+0x66>
        acceptable = 1;
 8006a20:	2301      	movs	r3, #1
 8006a22:	76fb      	strb	r3, [r7, #27]
 8006a24:	e017      	b.n	8006a56 <tcp_process+0x96>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8006a26:	4b8d      	ldr	r3, [pc, #564]	; (8006c5c <tcp_process+0x29c>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	db10      	blt.n	8006a56 <tcp_process+0x96>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006a3c:	441a      	add	r2, r3
 8006a3e:	4b87      	ldr	r3, [pc, #540]	; (8006c5c <tcp_process+0x29c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	db06      	blt.n	8006a56 <tcp_process+0x96>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	8b5b      	ldrh	r3, [r3, #26]
 8006a4c:	f043 0302 	orr.w	r3, r3, #2
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8006a56:	7efb      	ldrb	r3, [r7, #27]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d020      	beq.n	8006a9e <tcp_process+0xde>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	7d1b      	ldrb	r3, [r3, #20]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10b      	bne.n	8006a7c <tcp_process+0xbc>
 8006a64:	4b78      	ldr	r3, [pc, #480]	; (8006c48 <tcp_process+0x288>)
 8006a66:	f240 323b 	movw	r2, #827	; 0x33b
 8006a6a:	497d      	ldr	r1, [pc, #500]	; (8006c60 <tcp_process+0x2a0>)
 8006a6c:	4878      	ldr	r0, [pc, #480]	; (8006c50 <tcp_process+0x290>)
 8006a6e:	f009 fd6d 	bl	801054c <iprintf>
 8006a72:	2000      	movs	r0, #0
 8006a74:	f009 fe6c 	bl	8010750 <fflush>
 8006a78:	f009 fdb1 	bl	80105de <abort>
      recv_flags |= TF_RESET;
 8006a7c:	4b79      	ldr	r3, [pc, #484]	; (8006c64 <tcp_process+0x2a4>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	f043 0308 	orr.w	r3, r3, #8
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	4b77      	ldr	r3, [pc, #476]	; (8006c64 <tcp_process+0x2a4>)
 8006a88:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	8b5b      	ldrh	r3, [r3, #26]
 8006a8e:	f023 0301 	bic.w	r3, r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8006a98:	f06f 030d 	mvn.w	r3, #13
 8006a9c:	e3a1      	b.n	80071e2 <tcp_process+0x822>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	e39f      	b.n	80071e2 <tcp_process+0x822>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8006aa2:	4b6c      	ldr	r3, [pc, #432]	; (8006c54 <tcp_process+0x294>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d010      	beq.n	8006ad0 <tcp_process+0x110>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	7d1b      	ldrb	r3, [r3, #20]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d00c      	beq.n	8006ad0 <tcp_process+0x110>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	7d1b      	ldrb	r3, [r3, #20]
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d008      	beq.n	8006ad0 <tcp_process+0x110>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	8b5b      	ldrh	r3, [r3, #26]
 8006ac2:	f043 0302 	orr.w	r3, r3, #2
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	e388      	b.n	80071e2 <tcp_process+0x822>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	8b5b      	ldrh	r3, [r3, #26]
 8006ad4:	f003 0310 	and.w	r3, r3, #16
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d103      	bne.n	8006ae4 <tcp_process+0x124>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8006adc:	4b62      	ldr	r3, [pc, #392]	; (8006c68 <tcp_process+0x2a8>)
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 fc93 	bl	8008420 <tcp_parseopt>

  if (flags & TCP_SYN) {
 8006afa:	4b56      	ldr	r3, [pc, #344]	; (8006c54 <tcp_process+0x294>)
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d009      	beq.n	8006b1a <tcp_process+0x15a>
    /* accept SYN only in 2 states: */
    if ((pcb->state != SYN_SENT) && (pcb->state != SYN_RCVD)) {
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	7d1b      	ldrb	r3, [r3, #20]
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d005      	beq.n	8006b1a <tcp_process+0x15a>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	7d1b      	ldrb	r3, [r3, #20]
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d001      	beq.n	8006b1a <tcp_process+0x15a>
      return ERR_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e363      	b.n	80071e2 <tcp_process+0x822>
    }
  }

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	7d1b      	ldrb	r3, [r3, #20]
 8006b1e:	3b02      	subs	r3, #2
 8006b20:	2b07      	cmp	r3, #7
 8006b22:	f200 834e 	bhi.w	80071c2 <tcp_process+0x802>
 8006b26:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <tcp_process+0x16c>)
 8006b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2c:	08006b4d 	.word	0x08006b4d
 8006b30:	08006d8b 	.word	0x08006d8b
 8006b34:	08006f41 	.word	0x08006f41
 8006b38:	08006f6b 	.word	0x08006f6b
 8006b3c:	08007059 	.word	0x08007059
 8006b40:	08006f41 	.word	0x08006f41
 8006b44:	080070e5 	.word	0x080070e5
 8006b48:	0800718d 	.word	0x0800718d
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %s %"U32_F"\n",
                                    ackno, pcb->snd_nxt, pcb->unacked ? "" : " empty:",
                                    pcb->unacked ? lwip_ntohl(pcb->unacked->tcphdr->seqno) : 0));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8006b4c:	4b41      	ldr	r3, [pc, #260]	; (8006c54 <tcp_process+0x294>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	f003 0310 	and.w	r3, r3, #16
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 80eb 	beq.w	8006d30 <tcp_process+0x370>
 8006b5a:	4b3e      	ldr	r3, [pc, #248]	; (8006c54 <tcp_process+0x294>)
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 80e4 	beq.w	8006d30 <tcp_process+0x370>
          && (ackno == pcb->lastack + 1)) {
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	4b3a      	ldr	r3, [pc, #232]	; (8006c58 <tcp_process+0x298>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	f040 80dc 	bne.w	8006d30 <tcp_process+0x370>
        pcb->rcv_nxt = seqno + 1;
 8006b78:	4b38      	ldr	r3, [pc, #224]	; (8006c5c <tcp_process+0x29c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8006b8a:	4b33      	ldr	r3, [pc, #204]	; (8006c58 <tcp_process+0x298>)
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8006b92:	4b36      	ldr	r3, [pc, #216]	; (8006c6c <tcp_process+0x2ac>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	89db      	ldrh	r3, [r3, #14]
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8006bac:	4b2b      	ldr	r3, [pc, #172]	; (8006c5c <tcp_process+0x29c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	1e5a      	subs	r2, r3, #1
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2204      	movs	r2, #4
 8006bba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fb fad3 	bl	8002170 <ip4_route>
 8006bca:	4601      	mov	r1, r0
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f7ff f814 	bl	8005c00 <tcp_eff_send_mss_netif>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	461a      	mov	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006be4:	009a      	lsls	r2, r3, #2
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	f241 111c 	movw	r1, #4380	; 0x111c
 8006bf0:	428b      	cmp	r3, r1
 8006bf2:	bf38      	it	cc
 8006bf4:	460b      	movcc	r3, r1
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d204      	bcs.n	8006c04 <tcp_process+0x244>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	e00d      	b.n	8006c20 <tcp_process+0x260>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	f241 121c 	movw	r2, #4380	; 0x111c
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d904      	bls.n	8006c1c <tcp_process+0x25c>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	e001      	b.n	8006c20 <tcp_process+0x260>
 8006c1c:	f241 131c 	movw	r3, #4380	; 0x111c
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d121      	bne.n	8006c74 <tcp_process+0x2b4>
 8006c30:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <tcp_process+0x288>)
 8006c32:	f240 3277 	movw	r2, #887	; 0x377
 8006c36:	490e      	ldr	r1, [pc, #56]	; (8006c70 <tcp_process+0x2b0>)
 8006c38:	4805      	ldr	r0, [pc, #20]	; (8006c50 <tcp_process+0x290>)
 8006c3a:	f009 fc87 	bl	801054c <iprintf>
 8006c3e:	2000      	movs	r0, #0
 8006c40:	f009 fd86 	bl	8010750 <fflush>
 8006c44:	f009 fccb 	bl	80105de <abort>
 8006c48:	08012d0c 	.word	0x08012d0c
 8006c4c:	08012f34 	.word	0x08012f34
 8006c50:	08012d48 	.word	0x08012d48
 8006c54:	200003e4 	.word	0x200003e4
 8006c58:	200003dc 	.word	0x200003dc
 8006c5c:	200003d8 	.word	0x200003d8
 8006c60:	08012f50 	.word	0x08012f50
 8006c64:	200003e5 	.word	0x200003e5
 8006c68:	200015d0 	.word	0x200015d0
 8006c6c:	200003c8 	.word	0x200003c8
 8006c70:	08012f70 	.word	0x08012f70
        --pcb->snd_queuelen;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c88:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d116      	bne.n	8006cbe <tcp_process+0x2fe>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c94:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10b      	bne.n	8006cb4 <tcp_process+0x2f4>
 8006c9c:	4b9b      	ldr	r3, [pc, #620]	; (8006f0c <tcp_process+0x54c>)
 8006c9e:	f240 327f 	movw	r2, #895	; 0x37f
 8006ca2:	499b      	ldr	r1, [pc, #620]	; (8006f10 <tcp_process+0x550>)
 8006ca4:	489b      	ldr	r0, [pc, #620]	; (8006f14 <tcp_process+0x554>)
 8006ca6:	f009 fc51 	bl	801054c <iprintf>
 8006caa:	2000      	movs	r0, #0
 8006cac:	f009 fd50 	bl	8010750 <fflush>
 8006cb0:	f009 fc95 	bl	80105de <abort>
          pcb->unsent = rseg->next;
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	66da      	str	r2, [r3, #108]	; 0x6c
 8006cbc:	e003      	b.n	8006cc6 <tcp_process+0x306>
        } else {
          pcb->unacked = rseg->next;
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8006cc6:	69f8      	ldr	r0, [r7, #28]
 8006cc8:	f7fe fc7c 	bl	80055c4 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d104      	bne.n	8006cde <tcp_process+0x31e>
          pcb->rtime = -1;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cda:	861a      	strh	r2, [r3, #48]	; 0x30
 8006cdc:	e006      	b.n	8006cec <tcp_process+0x32c>
        } else {
          pcb->rtime = 0;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <tcp_process+0x34c>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	6910      	ldr	r0, [r2, #16]
 8006d00:	2200      	movs	r2, #0
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	4798      	blx	r3
 8006d06:	4603      	mov	r3, r0
 8006d08:	76bb      	strb	r3, [r7, #26]
 8006d0a:	e001      	b.n	8006d10 <tcp_process+0x350>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8006d10:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006d14:	f113 0f0d 	cmn.w	r3, #13
 8006d18:	d102      	bne.n	8006d20 <tcp_process+0x360>
          return ERR_ABRT;
 8006d1a:	f06f 030c 	mvn.w	r3, #12
 8006d1e:	e260      	b.n	80071e2 <tcp_process+0x822>
        }
        tcp_ack_now(pcb);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	8b5b      	ldrh	r3, [r3, #26]
 8006d24:	f043 0302 	orr.w	r3, r3, #2
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8006d2e:	e24a      	b.n	80071c6 <tcp_process+0x806>
      else if (flags & TCP_ACK) {
 8006d30:	4b79      	ldr	r3, [pc, #484]	; (8006f18 <tcp_process+0x558>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	f003 0310 	and.w	r3, r3, #16
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 8244 	beq.w	80071c6 <tcp_process+0x806>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006d3e:	4b77      	ldr	r3, [pc, #476]	; (8006f1c <tcp_process+0x55c>)
 8006d40:	6819      	ldr	r1, [r3, #0]
 8006d42:	4b77      	ldr	r3, [pc, #476]	; (8006f20 <tcp_process+0x560>)
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	4b76      	ldr	r3, [pc, #472]	; (8006f24 <tcp_process+0x564>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006d4e:	4b76      	ldr	r3, [pc, #472]	; (8006f28 <tcp_process+0x568>)
 8006d50:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006d52:	885b      	ldrh	r3, [r3, #2]
 8006d54:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006d56:	4a74      	ldr	r2, [pc, #464]	; (8006f28 <tcp_process+0x568>)
 8006d58:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006d5a:	8812      	ldrh	r2, [r2, #0]
 8006d5c:	b292      	uxth	r2, r2
 8006d5e:	9202      	str	r2, [sp, #8]
 8006d60:	9301      	str	r3, [sp, #4]
 8006d62:	4b72      	ldr	r3, [pc, #456]	; (8006f2c <tcp_process+0x56c>)
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	4b72      	ldr	r3, [pc, #456]	; (8006f30 <tcp_process+0x570>)
 8006d68:	4602      	mov	r2, r0
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f002 fe34 	bl	80099d8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d76:	2b05      	cmp	r3, #5
 8006d78:	f200 8225 	bhi.w	80071c6 <tcp_process+0x806>
          pcb->rtime = 0;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f002 fb36 	bl	80093f4 <tcp_rexmit_rto>
      break;
 8006d88:	e21d      	b.n	80071c6 <tcp_process+0x806>
    case SYN_RCVD:
      if (flags & TCP_SYN) {
 8006d8a:	4b63      	ldr	r3, [pc, #396]	; (8006f18 <tcp_process+0x558>)
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00b      	beq.n	8006dae <tcp_process+0x3ee>
        if (seqno == pcb->rcv_nxt - 1) {
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	1e5a      	subs	r2, r3, #1
 8006d9c:	4b61      	ldr	r3, [pc, #388]	; (8006f24 <tcp_process+0x564>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	f040 8212 	bne.w	80071ca <tcp_process+0x80a>
          /* Looks like another copy of the SYN - retransmit our SYN-ACK */
          tcp_rexmit(pcb);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f002 fb4a 	bl	8009440 <tcp_rexmit>
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
        }
      }
      break;
 8006dac:	e20d      	b.n	80071ca <tcp_process+0x80a>
      } else if (flags & TCP_ACK) {
 8006dae:	4b5a      	ldr	r3, [pc, #360]	; (8006f18 <tcp_process+0x558>)
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	f003 0310 	and.w	r3, r3, #16
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 8207 	beq.w	80071ca <tcp_process+0x80a>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8006dbc:	4b57      	ldr	r3, [pc, #348]	; (8006f1c <tcp_process+0x55c>)
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f2c0 8084 	blt.w	8006ed6 <tcp_process+0x516>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dd2:	4b52      	ldr	r3, [pc, #328]	; (8006f1c <tcp_process+0x55c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	db7c      	blt.n	8006ed6 <tcp_process+0x516>
          pcb->state = ESTABLISHED;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2204      	movs	r2, #4
 8006de0:	751a      	strb	r2, [r3, #20]
          if (pcb->listener == NULL) {
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d102      	bne.n	8006df0 <tcp_process+0x430>
            err = ERR_VAL;
 8006dea:	23fa      	movs	r3, #250	; 0xfa
 8006dec:	76bb      	strb	r3, [r7, #26]
 8006dee:	e022      	b.n	8006e36 <tcp_process+0x476>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10b      	bne.n	8006e12 <tcp_process+0x452>
 8006dfa:	4b44      	ldr	r3, [pc, #272]	; (8006f0c <tcp_process+0x54c>)
 8006dfc:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8006e00:	494c      	ldr	r1, [pc, #304]	; (8006f34 <tcp_process+0x574>)
 8006e02:	4844      	ldr	r0, [pc, #272]	; (8006f14 <tcp_process+0x554>)
 8006e04:	f009 fba2 	bl	801054c <iprintf>
 8006e08:	2000      	movs	r0, #0
 8006e0a:	f009 fca1 	bl	8010750 <fflush>
 8006e0e:	f009 fbe6 	bl	80105de <abort>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00a      	beq.n	8006e32 <tcp_process+0x472>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	6910      	ldr	r0, [r2, #16]
 8006e26:	2200      	movs	r2, #0
 8006e28:	6879      	ldr	r1, [r7, #4]
 8006e2a:	4798      	blx	r3
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	76bb      	strb	r3, [r7, #26]
 8006e30:	e001      	b.n	8006e36 <tcp_process+0x476>
 8006e32:	23f0      	movs	r3, #240	; 0xf0
 8006e34:	76bb      	strb	r3, [r7, #26]
          if (err != ERR_OK) {
 8006e36:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <tcp_process+0x494>
            if (err != ERR_ABRT) {
 8006e3e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006e42:	f113 0f0d 	cmn.w	r3, #13
 8006e46:	d002      	beq.n	8006e4e <tcp_process+0x48e>
              tcp_abort(pcb);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f7fd fe8f 	bl	8004b6c <tcp_abort>
            return ERR_ABRT;
 8006e4e:	f06f 030c 	mvn.w	r3, #12
 8006e52:	e1c6      	b.n	80071e2 <tcp_process+0x822>
          tcp_receive(pcb);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fae1 	bl	800741c <tcp_receive>
          if (recv_acked != 0) {
 8006e5a:	4b37      	ldr	r3, [pc, #220]	; (8006f38 <tcp_process+0x578>)
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d005      	beq.n	8006e6e <tcp_process+0x4ae>
            recv_acked--;
 8006e62:	4b35      	ldr	r3, [pc, #212]	; (8006f38 <tcp_process+0x578>)
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	4b33      	ldr	r3, [pc, #204]	; (8006f38 <tcp_process+0x578>)
 8006e6c:	801a      	strh	r2, [r3, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e72:	009a      	lsls	r2, r3, #2
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	f241 111c 	movw	r1, #4380	; 0x111c
 8006e7e:	428b      	cmp	r3, r1
 8006e80:	bf38      	it	cc
 8006e82:	460b      	movcc	r3, r1
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d204      	bcs.n	8006e92 <tcp_process+0x4d2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	e00d      	b.n	8006eae <tcp_process+0x4ee>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	f241 121c 	movw	r2, #4380	; 0x111c
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d904      	bls.n	8006eaa <tcp_process+0x4ea>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	e001      	b.n	8006eae <tcp_process+0x4ee>
 8006eaa:	f241 131c 	movw	r3, #4380	; 0x111c
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 8006eb4:	4b21      	ldr	r3, [pc, #132]	; (8006f3c <tcp_process+0x57c>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	f003 0320 	and.w	r3, r3, #32
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d024      	beq.n	8006f0a <tcp_process+0x54a>
            tcp_ack_now(pcb);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	8b5b      	ldrh	r3, [r3, #26]
 8006ec4:	f043 0302 	orr.w	r3, r3, #2
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2207      	movs	r2, #7
 8006ed2:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8006ed4:	e019      	b.n	8006f0a <tcp_process+0x54a>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006ed6:	4b11      	ldr	r3, [pc, #68]	; (8006f1c <tcp_process+0x55c>)
 8006ed8:	6819      	ldr	r1, [r3, #0]
 8006eda:	4b11      	ldr	r3, [pc, #68]	; (8006f20 <tcp_process+0x560>)
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	4b10      	ldr	r3, [pc, #64]	; (8006f24 <tcp_process+0x564>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006ee6:	4b10      	ldr	r3, [pc, #64]	; (8006f28 <tcp_process+0x568>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006eea:	885b      	ldrh	r3, [r3, #2]
 8006eec:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006eee:	4a0e      	ldr	r2, [pc, #56]	; (8006f28 <tcp_process+0x568>)
 8006ef0:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006ef2:	8812      	ldrh	r2, [r2, #0]
 8006ef4:	b292      	uxth	r2, r2
 8006ef6:	9202      	str	r2, [sp, #8]
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	4b0c      	ldr	r3, [pc, #48]	; (8006f2c <tcp_process+0x56c>)
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <tcp_process+0x570>)
 8006f00:	4602      	mov	r2, r0
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f002 fd68 	bl	80099d8 <tcp_rst>
      break;
 8006f08:	e15f      	b.n	80071ca <tcp_process+0x80a>
 8006f0a:	e15e      	b.n	80071ca <tcp_process+0x80a>
 8006f0c:	08012d0c 	.word	0x08012d0c
 8006f10:	08012f88 	.word	0x08012f88
 8006f14:	08012d48 	.word	0x08012d48
 8006f18:	200003e4 	.word	0x200003e4
 8006f1c:	200003dc 	.word	0x200003dc
 8006f20:	200003e2 	.word	0x200003e2
 8006f24:	200003d8 	.word	0x200003d8
 8006f28:	200003c8 	.word	0x200003c8
 8006f2c:	200005a0 	.word	0x200005a0
 8006f30:	200005a4 	.word	0x200005a4
 8006f34:	08012f9c 	.word	0x08012f9c
 8006f38:	200003e0 	.word	0x200003e0
 8006f3c:	200003e5 	.word	0x200003e5
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fa6b 	bl	800741c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8006f46:	4b8b      	ldr	r3, [pc, #556]	; (8007174 <tcp_process+0x7b4>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	f003 0320 	and.w	r3, r3, #32
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 813d 	beq.w	80071ce <tcp_process+0x80e>
        tcp_ack_now(pcb);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	8b5b      	ldrh	r3, [r3, #26]
 8006f58:	f043 0302 	orr.w	r3, r3, #2
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2207      	movs	r2, #7
 8006f66:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006f68:	e131      	b.n	80071ce <tcp_process+0x80e>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fa56 	bl	800741c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8006f70:	4b80      	ldr	r3, [pc, #512]	; (8007174 <tcp_process+0x7b4>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d056      	beq.n	800702a <tcp_process+0x66a>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006f7c:	4b7e      	ldr	r3, [pc, #504]	; (8007178 <tcp_process+0x7b8>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	f003 0310 	and.w	r3, r3, #16
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d045      	beq.n	8007014 <tcp_process+0x654>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f8c:	4b7b      	ldr	r3, [pc, #492]	; (800717c <tcp_process+0x7bc>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d13f      	bne.n	8007014 <tcp_process+0x654>
            pcb->unsent == NULL) {
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d13b      	bne.n	8007014 <tcp_process+0x654>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	8b5b      	ldrh	r3, [r3, #26]
 8006fa0:	f043 0302 	orr.w	r3, r3, #2
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fe fd02 	bl	80059b4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8006fb0:	4b73      	ldr	r3, [pc, #460]	; (8007180 <tcp_process+0x7c0>)
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d105      	bne.n	8006fc6 <tcp_process+0x606>
 8006fba:	4b71      	ldr	r3, [pc, #452]	; (8007180 <tcp_process+0x7c0>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	4a6f      	ldr	r2, [pc, #444]	; (8007180 <tcp_process+0x7c0>)
 8006fc2:	6013      	str	r3, [r2, #0]
 8006fc4:	e013      	b.n	8006fee <tcp_process+0x62e>
 8006fc6:	4b6e      	ldr	r3, [pc, #440]	; (8007180 <tcp_process+0x7c0>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	e00c      	b.n	8006fe8 <tcp_process+0x628>
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	68da      	ldr	r2, [r3, #12]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d104      	bne.n	8006fe2 <tcp_process+0x622>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68da      	ldr	r2, [r3, #12]
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	60da      	str	r2, [r3, #12]
 8006fe0:	e005      	b.n	8006fee <tcp_process+0x62e>
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1ef      	bne.n	8006fce <tcp_process+0x60e>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	60da      	str	r2, [r3, #12]
 8006ff4:	4b63      	ldr	r3, [pc, #396]	; (8007184 <tcp_process+0x7c4>)
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	220a      	movs	r2, #10
 8006ffe:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8007000:	4b61      	ldr	r3, [pc, #388]	; (8007188 <tcp_process+0x7c8>)
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	60da      	str	r2, [r3, #12]
 8007008:	4a5f      	ldr	r2, [pc, #380]	; (8007188 <tcp_process+0x7c8>)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	f002 fead 	bl	8009d6c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8007012:	e0de      	b.n	80071d2 <tcp_process+0x812>
          tcp_ack_now(pcb);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	8b5b      	ldrh	r3, [r3, #26]
 8007018:	f043 0302 	orr.w	r3, r3, #2
 800701c:	b29a      	uxth	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2208      	movs	r2, #8
 8007026:	751a      	strb	r2, [r3, #20]
      break;
 8007028:	e0d3      	b.n	80071d2 <tcp_process+0x812>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800702a:	4b53      	ldr	r3, [pc, #332]	; (8007178 <tcp_process+0x7b8>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	f003 0310 	and.w	r3, r3, #16
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 80cd 	beq.w	80071d2 <tcp_process+0x812>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800703c:	4b4f      	ldr	r3, [pc, #316]	; (800717c <tcp_process+0x7bc>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	f040 80c6 	bne.w	80071d2 <tcp_process+0x812>
                 pcb->unsent == NULL) {
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800704a:	2b00      	cmp	r3, #0
 800704c:	f040 80c1 	bne.w	80071d2 <tcp_process+0x812>
        pcb->state = FIN_WAIT_2;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2206      	movs	r2, #6
 8007054:	751a      	strb	r2, [r3, #20]
      break;
 8007056:	e0bc      	b.n	80071d2 <tcp_process+0x812>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f9df 	bl	800741c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800705e:	4b45      	ldr	r3, [pc, #276]	; (8007174 <tcp_process+0x7b4>)
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 80b5 	beq.w	80071d6 <tcp_process+0x816>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	8b5b      	ldrh	r3, [r3, #26]
 8007070:	f043 0302 	orr.w	r3, r3, #2
 8007074:	b29a      	uxth	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7fe fc9a 	bl	80059b4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007080:	4b3f      	ldr	r3, [pc, #252]	; (8007180 <tcp_process+0x7c0>)
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	429a      	cmp	r2, r3
 8007088:	d105      	bne.n	8007096 <tcp_process+0x6d6>
 800708a:	4b3d      	ldr	r3, [pc, #244]	; (8007180 <tcp_process+0x7c0>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	4a3b      	ldr	r2, [pc, #236]	; (8007180 <tcp_process+0x7c0>)
 8007092:	6013      	str	r3, [r2, #0]
 8007094:	e013      	b.n	80070be <tcp_process+0x6fe>
 8007096:	4b3a      	ldr	r3, [pc, #232]	; (8007180 <tcp_process+0x7c0>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	613b      	str	r3, [r7, #16]
 800709c:	e00c      	b.n	80070b8 <tcp_process+0x6f8>
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d104      	bne.n	80070b2 <tcp_process+0x6f2>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68da      	ldr	r2, [r3, #12]
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	60da      	str	r2, [r3, #12]
 80070b0:	e005      	b.n	80070be <tcp_process+0x6fe>
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	613b      	str	r3, [r7, #16]
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1ef      	bne.n	800709e <tcp_process+0x6de>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	60da      	str	r2, [r3, #12]
 80070c4:	4b2f      	ldr	r3, [pc, #188]	; (8007184 <tcp_process+0x7c4>)
 80070c6:	2201      	movs	r2, #1
 80070c8:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	220a      	movs	r2, #10
 80070ce:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80070d0:	4b2d      	ldr	r3, [pc, #180]	; (8007188 <tcp_process+0x7c8>)
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	60da      	str	r2, [r3, #12]
 80070d8:	4a2b      	ldr	r2, [pc, #172]	; (8007188 <tcp_process+0x7c8>)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6013      	str	r3, [r2, #0]
 80070de:	f002 fe45 	bl	8009d6c <tcp_timer_needed>
      }
      break;
 80070e2:	e078      	b.n	80071d6 <tcp_process+0x816>
    case CLOSING:
      tcp_receive(pcb);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f999 	bl	800741c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80070ea:	4b23      	ldr	r3, [pc, #140]	; (8007178 <tcp_process+0x7b8>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	f003 0310 	and.w	r3, r3, #16
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d071      	beq.n	80071da <tcp_process+0x81a>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070fa:	4b20      	ldr	r3, [pc, #128]	; (800717c <tcp_process+0x7bc>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d16b      	bne.n	80071da <tcp_process+0x81a>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007106:	2b00      	cmp	r3, #0
 8007108:	d167      	bne.n	80071da <tcp_process+0x81a>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7fe fc52 	bl	80059b4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007110:	4b1b      	ldr	r3, [pc, #108]	; (8007180 <tcp_process+0x7c0>)
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	429a      	cmp	r2, r3
 8007118:	d105      	bne.n	8007126 <tcp_process+0x766>
 800711a:	4b19      	ldr	r3, [pc, #100]	; (8007180 <tcp_process+0x7c0>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	4a17      	ldr	r2, [pc, #92]	; (8007180 <tcp_process+0x7c0>)
 8007122:	6013      	str	r3, [r2, #0]
 8007124:	e013      	b.n	800714e <tcp_process+0x78e>
 8007126:	4b16      	ldr	r3, [pc, #88]	; (8007180 <tcp_process+0x7c0>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	e00c      	b.n	8007148 <tcp_process+0x788>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	429a      	cmp	r2, r3
 8007136:	d104      	bne.n	8007142 <tcp_process+0x782>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	60da      	str	r2, [r3, #12]
 8007140:	e005      	b.n	800714e <tcp_process+0x78e>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1ef      	bne.n	800712e <tcp_process+0x76e>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	60da      	str	r2, [r3, #12]
 8007154:	4b0b      	ldr	r3, [pc, #44]	; (8007184 <tcp_process+0x7c4>)
 8007156:	2201      	movs	r2, #1
 8007158:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	220a      	movs	r2, #10
 800715e:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007160:	4b09      	ldr	r3, [pc, #36]	; (8007188 <tcp_process+0x7c8>)
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	60da      	str	r2, [r3, #12]
 8007168:	4a07      	ldr	r2, [pc, #28]	; (8007188 <tcp_process+0x7c8>)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	f002 fdfd 	bl	8009d6c <tcp_timer_needed>
      }
      break;
 8007172:	e032      	b.n	80071da <tcp_process+0x81a>
 8007174:	200003e5 	.word	0x200003e5
 8007178:	200003e4 	.word	0x200003e4
 800717c:	200003dc 	.word	0x200003dc
 8007180:	200015cc 	.word	0x200015cc
 8007184:	200015c8 	.word	0x200015c8
 8007188:	200015dc 	.word	0x200015dc
    case LAST_ACK:
      tcp_receive(pcb);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f945 	bl	800741c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007192:	4b16      	ldr	r3, [pc, #88]	; (80071ec <tcp_process+0x82c>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	f003 0310 	and.w	r3, r3, #16
 800719a:	2b00      	cmp	r3, #0
 800719c:	d01f      	beq.n	80071de <tcp_process+0x81e>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071a2:	4b13      	ldr	r3, [pc, #76]	; (80071f0 <tcp_process+0x830>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d119      	bne.n	80071de <tcp_process+0x81e>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d115      	bne.n	80071de <tcp_process+0x81e>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80071b2:	4b10      	ldr	r3, [pc, #64]	; (80071f4 <tcp_process+0x834>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	f043 0310 	orr.w	r3, r3, #16
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	4b0d      	ldr	r3, [pc, #52]	; (80071f4 <tcp_process+0x834>)
 80071be:	701a      	strb	r2, [r3, #0]
      }
      break;
 80071c0:	e00d      	b.n	80071de <tcp_process+0x81e>
    default:
      break;
 80071c2:	bf00      	nop
 80071c4:	e00c      	b.n	80071e0 <tcp_process+0x820>
      break;
 80071c6:	bf00      	nop
 80071c8:	e00a      	b.n	80071e0 <tcp_process+0x820>
      break;
 80071ca:	bf00      	nop
 80071cc:	e008      	b.n	80071e0 <tcp_process+0x820>
      break;
 80071ce:	bf00      	nop
 80071d0:	e006      	b.n	80071e0 <tcp_process+0x820>
      break;
 80071d2:	bf00      	nop
 80071d4:	e004      	b.n	80071e0 <tcp_process+0x820>
      break;
 80071d6:	bf00      	nop
 80071d8:	e002      	b.n	80071e0 <tcp_process+0x820>
      break;
 80071da:	bf00      	nop
 80071dc:	e000      	b.n	80071e0 <tcp_process+0x820>
      break;
 80071de:	bf00      	nop
  }
  return ERR_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3724      	adds	r7, #36	; 0x24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd90      	pop	{r4, r7, pc}
 80071ea:	bf00      	nop
 80071ec:	200003e4 	.word	0x200003e4
 80071f0:	200003dc 	.word	0x200003dc
 80071f4:	200003e5 	.word	0x200003e5

080071f8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80071f8:	b5b0      	push	{r4, r5, r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10b      	bne.n	8007220 <tcp_oos_insert_segment+0x28>
 8007208:	4b3d      	ldr	r3, [pc, #244]	; (8007300 <tcp_oos_insert_segment+0x108>)
 800720a:	f240 422c 	movw	r2, #1068	; 0x42c
 800720e:	493d      	ldr	r1, [pc, #244]	; (8007304 <tcp_oos_insert_segment+0x10c>)
 8007210:	483d      	ldr	r0, [pc, #244]	; (8007308 <tcp_oos_insert_segment+0x110>)
 8007212:	f009 f99b 	bl	801054c <iprintf>
 8007216:	2000      	movs	r0, #0
 8007218:	f009 fa9a 	bl	8010750 <fflush>
 800721c:	f009 f9df 	bl	80105de <abort>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	899b      	ldrh	r3, [r3, #12]
 8007226:	b29b      	uxth	r3, r3
 8007228:	4618      	mov	r0, r3
 800722a:	f7fa fc19 	bl	8001a60 <lwip_htons>
 800722e:	4603      	mov	r3, r0
 8007230:	b2db      	uxtb	r3, r3
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b00      	cmp	r3, #0
 8007238:	d027      	beq.n	800728a <tcp_oos_insert_segment+0x92>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800723a:	6838      	ldr	r0, [r7, #0]
 800723c:	f7fe f9ae 	bl	800559c <tcp_segs_free>
    next = NULL;
 8007240:	2300      	movs	r3, #0
 8007242:	603b      	str	r3, [r7, #0]
 8007244:	e055      	b.n	80072f2 <tcp_oos_insert_segment+0xfa>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	899b      	ldrh	r3, [r3, #12]
 800724c:	b29b      	uxth	r3, r3
 800724e:	4618      	mov	r0, r3
 8007250:	f7fa fc06 	bl	8001a60 <lwip_htons>
 8007254:	4603      	mov	r3, r0
 8007256:	b2db      	uxtb	r3, r3
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00c      	beq.n	800727a <tcp_oos_insert_segment+0x82>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	691c      	ldr	r4, [r3, #16]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	899b      	ldrh	r3, [r3, #12]
 800726a:	b29d      	uxth	r5, r3
 800726c:	2001      	movs	r0, #1
 800726e:	f7fa fbf7 	bl	8001a60 <lwip_htons>
 8007272:	4603      	mov	r3, r0
 8007274:	432b      	orrs	r3, r5
 8007276:	b29b      	uxth	r3, r3
 8007278:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f7fe f99d 	bl	80055c4 <tcp_seg_free>
    while (next &&
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00e      	beq.n	80072ae <tcp_oos_insert_segment+0xb6>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	891b      	ldrh	r3, [r3, #8]
 8007294:	461a      	mov	r2, r3
 8007296:	4b1d      	ldr	r3, [pc, #116]	; (800730c <tcp_oos_insert_segment+0x114>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	441a      	add	r2, r3
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	8909      	ldrh	r1, [r1, #8]
 80072a6:	440b      	add	r3, r1
 80072a8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	dacb      	bge.n	8007246 <tcp_oos_insert_segment+0x4e>
    }
    if (next &&
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01e      	beq.n	80072f2 <tcp_oos_insert_segment+0xfa>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	891b      	ldrh	r3, [r3, #8]
 80072be:	4619      	mov	r1, r3
 80072c0:	4b12      	ldr	r3, [pc, #72]	; (800730c <tcp_oos_insert_segment+0x114>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	440b      	add	r3, r1
 80072c6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	da12      	bge.n	80072f2 <tcp_oos_insert_segment+0xfa>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	4b0d      	ldr	r3, [pc, #52]	; (800730c <tcp_oos_insert_segment+0x114>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	b29a      	uxth	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	891b      	ldrh	r3, [r3, #8]
 80072ea:	4619      	mov	r1, r3
 80072ec:	4610      	mov	r0, r2
 80072ee:	f7fc fc37 	bl	8003b60 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	601a      	str	r2, [r3, #0]
}
 80072f8:	bf00      	nop
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bdb0      	pop	{r4, r5, r7, pc}
 8007300:	08012d0c 	.word	0x08012d0c
 8007304:	08012fbc 	.word	0x08012fbc
 8007308:	08012d48 	.word	0x08012d48
 800730c:	200003d8 	.word	0x200003d8

08007310 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8007310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
 800731c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800731e:	e048      	b.n	80073b2 <tcp_free_acked_segments+0xa2>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	4618      	mov	r0, r3
 8007330:	f7fc fe44 	bl	8003fbc <pbuf_clen>
 8007334:	4603      	mov	r3, r0
 8007336:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800733e:	8a7a      	ldrh	r2, [r7, #18]
 8007340:	429a      	cmp	r2, r3
 8007342:	d90b      	bls.n	800735c <tcp_free_acked_segments+0x4c>
 8007344:	4b2f      	ldr	r3, [pc, #188]	; (8007404 <tcp_free_acked_segments+0xf4>)
 8007346:	f240 4264 	movw	r2, #1124	; 0x464
 800734a:	492f      	ldr	r1, [pc, #188]	; (8007408 <tcp_free_acked_segments+0xf8>)
 800734c:	482f      	ldr	r0, [pc, #188]	; (800740c <tcp_free_acked_segments+0xfc>)
 800734e:	f009 f8fd 	bl	801054c <iprintf>
 8007352:	2000      	movs	r0, #0
 8007354:	f009 f9fc 	bl	8010750 <fflush>
 8007358:	f009 f941 	bl	80105de <abort>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8007362:	8a7b      	ldrh	r3, [r7, #18]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	b29a      	uxth	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	891a      	ldrh	r2, [r3, #8]
 8007372:	4b27      	ldr	r3, [pc, #156]	; (8007410 <tcp_free_acked_segments+0x100>)
 8007374:	881b      	ldrh	r3, [r3, #0]
 8007376:	4413      	add	r3, r2
 8007378:	b29a      	uxth	r2, r3
 800737a:	4b25      	ldr	r3, [pc, #148]	; (8007410 <tcp_free_acked_segments+0x100>)
 800737c:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800737e:	6978      	ldr	r0, [r7, #20]
 8007380:	f7fe f920 	bl	80055c4 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800738a:	2b00      	cmp	r3, #0
 800738c:	d011      	beq.n	80073b2 <tcp_free_acked_segments+0xa2>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10e      	bne.n	80073b2 <tcp_free_acked_segments+0xa2>
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10b      	bne.n	80073b2 <tcp_free_acked_segments+0xa2>
 800739a:	4b1a      	ldr	r3, [pc, #104]	; (8007404 <tcp_free_acked_segments+0xf4>)
 800739c:	f240 426f 	movw	r2, #1135	; 0x46f
 80073a0:	491c      	ldr	r1, [pc, #112]	; (8007414 <tcp_free_acked_segments+0x104>)
 80073a2:	481a      	ldr	r0, [pc, #104]	; (800740c <tcp_free_acked_segments+0xfc>)
 80073a4:	f009 f8d2 	bl	801054c <iprintf>
 80073a8:	2000      	movs	r0, #0
 80073aa:	f009 f9d1 	bl	8010750 <fflush>
 80073ae:	f009 f916 	bl	80105de <abort>
  while (seg_list != NULL &&
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d020      	beq.n	80073fa <tcp_free_acked_segments+0xea>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80073b8:	4b17      	ldr	r3, [pc, #92]	; (8007418 <tcp_free_acked_segments+0x108>)
 80073ba:	681c      	ldr	r4, [r3, #0]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fa fb61 	bl	8001a8a <lwip_htonl>
 80073c8:	4605      	mov	r5, r0
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	891b      	ldrh	r3, [r3, #8]
 80073ce:	461e      	mov	r6, r3
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	899b      	ldrh	r3, [r3, #12]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fa fb41 	bl	8001a60 <lwip_htons>
 80073de:	4603      	mov	r3, r0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <tcp_free_acked_segments+0xde>
 80073ea:	2301      	movs	r3, #1
 80073ec:	e000      	b.n	80073f0 <tcp_free_acked_segments+0xe0>
 80073ee:	2300      	movs	r3, #0
 80073f0:	4433      	add	r3, r6
 80073f2:	442b      	add	r3, r5
 80073f4:	1ae3      	subs	r3, r4, r3
  while (seg_list != NULL &&
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	da92      	bge.n	8007320 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80073fa:	68bb      	ldr	r3, [r7, #8]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	371c      	adds	r7, #28
 8007400:	46bd      	mov	sp, r7
 8007402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007404:	08012d0c 	.word	0x08012d0c
 8007408:	08012fe4 	.word	0x08012fe4
 800740c:	08012d48 	.word	0x08012d48
 8007410:	200003e0 	.word	0x200003e0
 8007414:	0801300c 	.word	0x0801300c
 8007418:	200003dc 	.word	0x200003dc

0800741c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800741c:	b5b0      	push	{r4, r5, r7, lr}
 800741e:	b094      	sub	sp, #80	; 0x50
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10b      	bne.n	8007442 <tcp_receive+0x26>
 800742a:	4bab      	ldr	r3, [pc, #684]	; (80076d8 <tcp_receive+0x2bc>)
 800742c:	f240 4287 	movw	r2, #1159	; 0x487
 8007430:	49aa      	ldr	r1, [pc, #680]	; (80076dc <tcp_receive+0x2c0>)
 8007432:	48ab      	ldr	r0, [pc, #684]	; (80076e0 <tcp_receive+0x2c4>)
 8007434:	f009 f88a 	bl	801054c <iprintf>
 8007438:	2000      	movs	r0, #0
 800743a:	f009 f989 	bl	8010750 <fflush>
 800743e:	f009 f8ce 	bl	80105de <abort>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	7d1b      	ldrb	r3, [r3, #20]
 8007446:	2b03      	cmp	r3, #3
 8007448:	d80b      	bhi.n	8007462 <tcp_receive+0x46>
 800744a:	4ba3      	ldr	r3, [pc, #652]	; (80076d8 <tcp_receive+0x2bc>)
 800744c:	f44f 6291 	mov.w	r2, #1160	; 0x488
 8007450:	49a4      	ldr	r1, [pc, #656]	; (80076e4 <tcp_receive+0x2c8>)
 8007452:	48a3      	ldr	r0, [pc, #652]	; (80076e0 <tcp_receive+0x2c4>)
 8007454:	f009 f87a 	bl	801054c <iprintf>
 8007458:	2000      	movs	r0, #0
 800745a:	f009 f979 	bl	8010750 <fflush>
 800745e:	f009 f8be 	bl	80105de <abort>

  if (flags & TCP_ACK) {
 8007462:	4ba1      	ldr	r3, [pc, #644]	; (80076e8 <tcp_receive+0x2cc>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	f003 0310 	and.w	r3, r3, #16
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 8263 	beq.w	8007936 <tcp_receive+0x51a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007476:	461a      	mov	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800747c:	4413      	add	r3, r2
 800747e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007484:	4b99      	ldr	r3, [pc, #612]	; (80076ec <tcp_receive+0x2d0>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	db1b      	blt.n	80074c6 <tcp_receive+0xaa>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007492:	4b96      	ldr	r3, [pc, #600]	; (80076ec <tcp_receive+0x2d0>)
 8007494:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007496:	429a      	cmp	r2, r3
 8007498:	d106      	bne.n	80074a8 <tcp_receive+0x8c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800749e:	4b94      	ldr	r3, [pc, #592]	; (80076f0 <tcp_receive+0x2d4>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	db0e      	blt.n	80074c6 <tcp_receive+0xaa>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80074ac:	4b90      	ldr	r3, [pc, #576]	; (80076f0 <tcp_receive+0x2d4>)
 80074ae:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d125      	bne.n	8007500 <tcp_receive+0xe4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80074b4:	4b8f      	ldr	r3, [pc, #572]	; (80076f4 <tcp_receive+0x2d8>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	89db      	ldrh	r3, [r3, #14]
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d91c      	bls.n	8007500 <tcp_receive+0xe4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80074c6:	4b8b      	ldr	r3, [pc, #556]	; (80076f4 <tcp_receive+0x2d8>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	89db      	ldrh	r3, [r3, #14]
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d205      	bcs.n	80074f0 <tcp_receive+0xd4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80074f0:	4b7e      	ldr	r3, [pc, #504]	; (80076ec <tcp_receive+0x2d0>)
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80074f8:	4b7d      	ldr	r3, [pc, #500]	; (80076f0 <tcp_receive+0x2d4>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007504:	4b7a      	ldr	r3, [pc, #488]	; (80076f0 <tcp_receive+0x2d4>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	db58      	blt.n	80075c0 <tcp_receive+0x1a4>
      /* Clause 2 */
      if (tcplen == 0) {
 800750e:	4b7a      	ldr	r3, [pc, #488]	; (80076f8 <tcp_receive+0x2dc>)
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	f040 81af 	bne.w	8007876 <tcp_receive+0x45a>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8007522:	441a      	add	r2, r3
 8007524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007526:	429a      	cmp	r2, r3
 8007528:	f040 81a5 	bne.w	8007876 <tcp_receive+0x45a>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007532:	2b00      	cmp	r3, #0
 8007534:	f2c0 819f 	blt.w	8007876 <tcp_receive+0x45a>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800753c:	4b6c      	ldr	r3, [pc, #432]	; (80076f0 <tcp_receive+0x2d4>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	429a      	cmp	r2, r3
 8007542:	f040 8198 	bne.w	8007876 <tcp_receive+0x45a>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800754c:	3301      	adds	r3, #1
 800754e:	b2da      	uxtb	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007556:	429a      	cmp	r2, r3
 8007558:	d907      	bls.n	800756a <tcp_receive+0x14e>
                ++pcb->dupacks;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007560:	3301      	adds	r3, #1
 8007562:	b2da      	uxtb	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007570:	2b03      	cmp	r3, #3
 8007572:	d91b      	bls.n	80075ac <tcp_receive+0x190>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800757e:	4413      	add	r3, r2
 8007580:	b29a      	uxth	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007588:	429a      	cmp	r2, r3
 800758a:	d30a      	bcc.n	80075a2 <tcp_receive+0x186>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007596:	4413      	add	r3, r2
 8007598:	b29a      	uxth	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80075a0:	e004      	b.n	80075ac <tcp_receive+0x190>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	f240 815f 	bls.w	8007876 <tcp_receive+0x45a>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f001 ffb3 	bl	8009524 <tcp_rexmit_fast>
 80075be:	e15a      	b.n	8007876 <tcp_receive+0x45a>
              }
            }
          }
        }
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80075c0:	4b4b      	ldr	r3, [pc, #300]	; (80076f0 <tcp_receive+0x2d4>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f2c0 814d 	blt.w	800786c <tcp_receive+0x450>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075d6:	4b46      	ldr	r3, [pc, #280]	; (80076f0 <tcp_receive+0x2d4>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f2c0 8145 	blt.w	800786c <tcp_receive+0x450>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	8b5b      	ldrh	r3, [r3, #26]
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d010      	beq.n	8007610 <tcp_receive+0x1f4>
        tcp_clear_flags(pcb, TF_INFR);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	8b5b      	ldrh	r3, [r3, #26]
 80075f2:	f023 0304 	bic.w	r3, r3, #4
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800761e:	10db      	asrs	r3, r3, #3
 8007620:	b21b      	sxth	r3, r3
 8007622:	b29a      	uxth	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800762a:	b29b      	uxth	r3, r3
 800762c:	4413      	add	r3, r2
 800762e:	b29b      	uxth	r3, r3
 8007630:	b21a      	sxth	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8007638:	4b2d      	ldr	r3, [pc, #180]	; (80076f0 <tcp_receive+0x2d4>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	b29a      	uxth	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007642:	b29b      	uxth	r3, r3
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	867b      	strh	r3, [r7, #50]	; 0x32

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8007650:	4b27      	ldr	r3, [pc, #156]	; (80076f0 <tcp_receive+0x2d4>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	7d1b      	ldrb	r3, [r3, #20]
 800765c:	2b03      	cmp	r3, #3
 800765e:	f240 8096 	bls.w	800778e <tcp_receive+0x372>
        if (pcb->cwnd < pcb->ssthresh) {
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800766e:	429a      	cmp	r2, r3
 8007670:	d244      	bcs.n	80076fc <tcp_receive+0x2e0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	8b5b      	ldrh	r3, [r3, #26]
 8007676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <tcp_receive+0x266>
 800767e:	2301      	movs	r3, #1
 8007680:	e000      	b.n	8007684 <tcp_receive+0x268>
 8007682:	2302      	movs	r3, #2
 8007684:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8007688:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800768c:	b29a      	uxth	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007692:	fb12 f303 	smulbb	r3, r2, r3
 8007696:	b29a      	uxth	r2, r3
 8007698:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800769a:	4293      	cmp	r3, r2
 800769c:	bf28      	it	cs
 800769e:	4613      	movcs	r3, r2
 80076a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
          TCP_WND_INC(pcb->cwnd, increase);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80076a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80076aa:	4413      	add	r3, r2
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d309      	bcc.n	80076cc <tcp_receive+0x2b0>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80076be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80076c0:	4413      	add	r3, r2
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80076ca:	e060      	b.n	800778e <tcp_receive+0x372>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80076d6:	e05a      	b.n	800778e <tcp_receive+0x372>
 80076d8:	08012d0c 	.word	0x08012d0c
 80076dc:	0801302c 	.word	0x0801302c
 80076e0:	08012d48 	.word	0x08012d48
 80076e4:	08013048 	.word	0x08013048
 80076e8:	200003e4 	.word	0x200003e4
 80076ec:	200003d8 	.word	0x200003d8
 80076f0:	200003dc 	.word	0x200003dc
 80076f4:	200003c8 	.word	0x200003c8
 80076f8:	200003e2 	.word	0x200003e2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8007702:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007704:	4413      	add	r3, r2
 8007706:	b29a      	uxth	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800770e:	429a      	cmp	r2, r3
 8007710:	d309      	bcc.n	8007726 <tcp_receive+0x30a>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8007718:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800771a:	4413      	add	r3, r2
 800771c:	b29a      	uxth	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007724:	e004      	b.n	8007730 <tcp_receive+0x314>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800772c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800773c:	429a      	cmp	r2, r3
 800773e:	d326      	bcc.n	800778e <tcp_receive+0x372>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	b29a      	uxth	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007760:	4413      	add	r3, r2
 8007762:	b29a      	uxth	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800776a:	429a      	cmp	r2, r3
 800776c:	d30a      	bcc.n	8007784 <tcp_receive+0x368>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007778:	4413      	add	r3, r2
 800777a:	b29a      	uxth	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007782:	e004      	b.n	800778e <tcp_receive+0x372>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800778a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007796:	4aa0      	ldr	r2, [pc, #640]	; (8007a18 <tcp_receive+0x5fc>)
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7ff fdb9 	bl	8007310 <tcp_free_acked_segments>
 800779e:	4602      	mov	r2, r0
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ac:	4a9b      	ldr	r2, [pc, #620]	; (8007a1c <tcp_receive+0x600>)
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7ff fdae 	bl	8007310 <tcp_free_acked_segments>
 80077b4:	4602      	mov	r2, r0
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d104      	bne.n	80077cc <tcp_receive+0x3b0>
        pcb->rtime = -1;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077c8:	861a      	strh	r2, [r3, #48]	; 0x30
 80077ca:	e002      	b.n	80077d2 <tcp_receive+0x3b6>
      } else {
        pcb->rtime = 0;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d103      	bne.n	80077e8 <tcp_receive+0x3cc>
        pcb->unsent_oversize = 0;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80077ee:	4b8c      	ldr	r3, [pc, #560]	; (8007a20 <tcp_receive+0x604>)
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	4413      	add	r3, r2
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	8b5b      	ldrh	r3, [r3, #26]
 8007800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007804:	2b00      	cmp	r3, #0
 8007806:	d035      	beq.n	8007874 <tcp_receive+0x458>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780c:	2b00      	cmp	r3, #0
 800780e:	d118      	bne.n	8007842 <tcp_receive+0x426>
          if ((pcb->unsent == NULL) ||
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00c      	beq.n	8007832 <tcp_receive+0x416>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	4618      	mov	r0, r3
 8007822:	f7fa f932 	bl	8001a8a <lwip_htonl>
 8007826:	4602      	mov	r2, r0
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782c:	1ad3      	subs	r3, r2, r3
          if ((pcb->unsent == NULL) ||
 800782e:	2b00      	cmp	r3, #0
 8007830:	db20      	blt.n	8007874 <tcp_receive+0x458>
            tcp_clear_flags(pcb, TF_RTO);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	8b5b      	ldrh	r3, [r3, #26]
 8007836:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800783a:	b29a      	uxth	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007840:	e018      	b.n	8007874 <tcp_receive+0x458>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	4618      	mov	r0, r3
 800784c:	f7fa f91d 	bl	8001a8a <lwip_htonl>
 8007850:	4602      	mov	r2, r0
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	db0b      	blt.n	8007874 <tcp_receive+0x458>
          tcp_clear_flags(pcb, TF_RTO);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	8b5b      	ldrh	r3, [r3, #26]
 8007860:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007864:	b29a      	uxth	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800786a:	e003      	b.n	8007874 <tcp_receive+0x458>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f002 f8fb 	bl	8009a68 <tcp_send_empty_ack>
 8007872:	e000      	b.n	8007876 <tcp_receive+0x45a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007874:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787a:	2b00      	cmp	r3, #0
 800787c:	d05b      	beq.n	8007936 <tcp_receive+0x51a>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007882:	4b68      	ldr	r3, [pc, #416]	; (8007a24 <tcp_receive+0x608>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	2b00      	cmp	r3, #0
 800788a:	da54      	bge.n	8007936 <tcp_receive+0x51a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800788c:	4b66      	ldr	r3, [pc, #408]	; (8007a28 <tcp_receive+0x60c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	b29a      	uxth	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007896:	b29b      	uxth	r3, r3
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	b29b      	uxth	r3, r3
 800789c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80078a0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80078aa:	10db      	asrs	r3, r3, #3
 80078ac:	b21b      	sxth	r3, r3
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80078be:	b29a      	uxth	r2, r3
 80078c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078c4:	4413      	add	r3, r2
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	b21a      	sxth	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80078ce:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	da05      	bge.n	80078e2 <tcp_receive+0x4c6>
        m = (s16_t) - m;
 80078d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078da:	425b      	negs	r3, r3
 80078dc:	b29b      	uxth	r3, r3
 80078de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80078e2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80078ec:	109b      	asrs	r3, r3, #2
 80078ee:	b21b      	sxth	r3, r3
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007900:	b29a      	uxth	r2, r3
 8007902:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007906:	4413      	add	r3, r2
 8007908:	b29b      	uxth	r3, r3
 800790a:	b21a      	sxth	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007916:	10db      	asrs	r3, r3, #3
 8007918:	b21b      	sxth	r3, r3
 800791a:	b29a      	uxth	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007922:	b29b      	uxth	r3, r3
 8007924:	4413      	add	r3, r2
 8007926:	b29b      	uxth	r3, r3
 8007928:	b21a      	sxth	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8007936:	4b3d      	ldr	r3, [pc, #244]	; (8007a2c <tcp_receive+0x610>)
 8007938:	881b      	ldrh	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 850f 	beq.w	800835e <tcp_receive+0xf42>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	7d1b      	ldrb	r3, [r3, #20]
 8007944:	2b06      	cmp	r3, #6
 8007946:	f200 850a 	bhi.w	800835e <tcp_receive+0xf42>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800794e:	4b38      	ldr	r3, [pc, #224]	; (8007a30 <tcp_receive+0x614>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	3b01      	subs	r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	f2c0 809e 	blt.w	8007a98 <tcp_receive+0x67c>
 800795c:	4b33      	ldr	r3, [pc, #204]	; (8007a2c <tcp_receive+0x610>)
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	4b33      	ldr	r3, [pc, #204]	; (8007a30 <tcp_receive+0x614>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	441a      	add	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	425b      	negs	r3, r3
 800796e:	4413      	add	r3, r2
 8007970:	3b01      	subs	r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	f2c0 8090 	blt.w	8007a98 <tcp_receive+0x67c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8007978:	4b2e      	ldr	r3, [pc, #184]	; (8007a34 <tcp_receive+0x618>)
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	64bb      	str	r3, [r7, #72]	; 0x48
      u32_t off32 = pcb->rcv_nxt - seqno;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007982:	4b2b      	ldr	r3, [pc, #172]	; (8007a30 <tcp_receive+0x614>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	62bb      	str	r3, [r7, #40]	; 0x28
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800798a:	4b2a      	ldr	r3, [pc, #168]	; (8007a34 <tcp_receive+0x618>)
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10b      	bne.n	80079aa <tcp_receive+0x58e>
 8007992:	4b29      	ldr	r3, [pc, #164]	; (8007a38 <tcp_receive+0x61c>)
 8007994:	f240 529a 	movw	r2, #1434	; 0x59a
 8007998:	4928      	ldr	r1, [pc, #160]	; (8007a3c <tcp_receive+0x620>)
 800799a:	4829      	ldr	r0, [pc, #164]	; (8007a40 <tcp_receive+0x624>)
 800799c:	f008 fdd6 	bl	801054c <iprintf>
 80079a0:	2000      	movs	r0, #0
 80079a2:	f008 fed5 	bl	8010750 <fflush>
 80079a6:	f008 fe1a 	bl	80105de <abort>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d90b      	bls.n	80079cc <tcp_receive+0x5b0>
 80079b4:	4b20      	ldr	r3, [pc, #128]	; (8007a38 <tcp_receive+0x61c>)
 80079b6:	f240 529b 	movw	r2, #1435	; 0x59b
 80079ba:	4922      	ldr	r1, [pc, #136]	; (8007a44 <tcp_receive+0x628>)
 80079bc:	4820      	ldr	r0, [pc, #128]	; (8007a40 <tcp_receive+0x624>)
 80079be:	f008 fdc5 	bl	801054c <iprintf>
 80079c2:	2000      	movs	r0, #0
 80079c4:	f008 fec4 	bl	8010750 <fflush>
 80079c8:	f008 fe09 	bl	80105de <abort>
      off = (u16_t)off32;
 80079cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80079d2:	4b18      	ldr	r3, [pc, #96]	; (8007a34 <tcp_receive+0x618>)
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	891b      	ldrh	r3, [r3, #8]
 80079d8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80079dc:	429a      	cmp	r2, r3
 80079de:	d90b      	bls.n	80079f8 <tcp_receive+0x5dc>
 80079e0:	4b15      	ldr	r3, [pc, #84]	; (8007a38 <tcp_receive+0x61c>)
 80079e2:	f240 529d 	movw	r2, #1437	; 0x59d
 80079e6:	4918      	ldr	r1, [pc, #96]	; (8007a48 <tcp_receive+0x62c>)
 80079e8:	4815      	ldr	r0, [pc, #84]	; (8007a40 <tcp_receive+0x624>)
 80079ea:	f008 fdaf 	bl	801054c <iprintf>
 80079ee:	2000      	movs	r0, #0
 80079f0:	f008 feae 	bl	8010750 <fflush>
 80079f4:	f008 fdf3 	bl	80105de <abort>
      inseg.len -= off;
 80079f8:	4b0e      	ldr	r3, [pc, #56]	; (8007a34 <tcp_receive+0x618>)
 80079fa:	891a      	ldrh	r2, [r3, #8]
 80079fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <tcp_receive+0x618>)
 8007a06:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8007a08:	4b0a      	ldr	r3, [pc, #40]	; (8007a34 <tcp_receive+0x618>)
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	891a      	ldrh	r2, [r3, #8]
 8007a0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	84fb      	strh	r3, [r7, #38]	; 0x26
      while (p->len < off) {
 8007a16:	e029      	b.n	8007a6c <tcp_receive+0x650>
 8007a18:	08013064 	.word	0x08013064
 8007a1c:	0801306c 	.word	0x0801306c
 8007a20:	200003e0 	.word	0x200003e0
 8007a24:	200003dc 	.word	0x200003dc
 8007a28:	200015d0 	.word	0x200015d0
 8007a2c:	200003e2 	.word	0x200003e2
 8007a30:	200003d8 	.word	0x200003d8
 8007a34:	200003b4 	.word	0x200003b4
 8007a38:	08012d0c 	.word	0x08012d0c
 8007a3c:	08013074 	.word	0x08013074
 8007a40:	08012d48 	.word	0x08012d48
 8007a44:	08013084 	.word	0x08013084
 8007a48:	08013094 	.word	0x08013094
        off -= p->len;
 8007a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a4e:	895b      	ldrh	r3, [r3, #10]
 8007a50:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8007a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a5c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007a5e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8007a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a62:	2200      	movs	r2, #0
 8007a64:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8007a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	64bb      	str	r3, [r7, #72]	; 0x48
      while (p->len < off) {
 8007a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a6e:	895b      	ldrh	r3, [r3, #10]
 8007a70:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d8e9      	bhi.n	8007a4c <tcp_receive+0x630>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8007a78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007a80:	f7fc f990 	bl	8003da4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8007a84:	4b94      	ldr	r3, [pc, #592]	; (8007cd8 <tcp_receive+0x8bc>)
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a8c:	4993      	ldr	r1, [pc, #588]	; (8007cdc <tcp_receive+0x8c0>)
 8007a8e:	600a      	str	r2, [r1, #0]
 8007a90:	4a92      	ldr	r2, [pc, #584]	; (8007cdc <tcp_receive+0x8c0>)
 8007a92:	6812      	ldr	r2, [r2, #0]
 8007a94:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007a96:	e00d      	b.n	8007ab4 <tcp_receive+0x698>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8007a98:	4b90      	ldr	r3, [pc, #576]	; (8007cdc <tcp_receive+0x8c0>)
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	da06      	bge.n	8007ab4 <tcp_receive+0x698>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	8b5b      	ldrh	r3, [r3, #26]
 8007aaa:	f043 0302 	orr.w	r3, r3, #2
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007ab4:	4b89      	ldr	r3, [pc, #548]	; (8007cdc <tcp_receive+0x8c0>)
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f2c0 8448 	blt.w	8008354 <tcp_receive+0xf38>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007acc:	441a      	add	r2, r3
 8007ace:	4b83      	ldr	r3, [pc, #524]	; (8007cdc <tcp_receive+0x8c0>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	425b      	negs	r3, r3
 8007ad4:	4413      	add	r3, r2
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f2c0 843b 	blt.w	8008354 <tcp_receive+0xf38>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ae2:	4b7e      	ldr	r3, [pc, #504]	; (8007cdc <tcp_receive+0x8c0>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	f040 82ab 	bne.w	8008042 <tcp_receive+0xc26>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8007aec:	4b7a      	ldr	r3, [pc, #488]	; (8007cd8 <tcp_receive+0x8bc>)
 8007aee:	891c      	ldrh	r4, [r3, #8]
 8007af0:	4b79      	ldr	r3, [pc, #484]	; (8007cd8 <tcp_receive+0x8bc>)
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	899b      	ldrh	r3, [r3, #12]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7f9 ffb1 	bl	8001a60 <lwip_htons>
 8007afe:	4603      	mov	r3, r0
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	f003 0303 	and.w	r3, r3, #3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <tcp_receive+0x6f2>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e000      	b.n	8007b10 <tcp_receive+0x6f4>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	4423      	add	r3, r4
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	4b72      	ldr	r3, [pc, #456]	; (8007ce0 <tcp_receive+0x8c4>)
 8007b16:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007b1c:	4b70      	ldr	r3, [pc, #448]	; (8007ce0 <tcp_receive+0x8c4>)
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d27a      	bcs.n	8007c1a <tcp_receive+0x7fe>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007b24:	4b6c      	ldr	r3, [pc, #432]	; (8007cd8 <tcp_receive+0x8bc>)
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	899b      	ldrh	r3, [r3, #12]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7f9 ff97 	bl	8001a60 <lwip_htons>
 8007b32:	4603      	mov	r3, r0
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d01f      	beq.n	8007b7e <tcp_receive+0x762>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8007b3e:	4b66      	ldr	r3, [pc, #408]	; (8007cd8 <tcp_receive+0x8bc>)
 8007b40:	691c      	ldr	r4, [r3, #16]
 8007b42:	4b65      	ldr	r3, [pc, #404]	; (8007cd8 <tcp_receive+0x8bc>)
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	899b      	ldrh	r3, [r3, #12]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	b21b      	sxth	r3, r3
 8007b4c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b50:	b21d      	sxth	r5, r3
 8007b52:	4b61      	ldr	r3, [pc, #388]	; (8007cd8 <tcp_receive+0x8bc>)
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	899b      	ldrh	r3, [r3, #12]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7f9 ff80 	bl	8001a60 <lwip_htons>
 8007b60:	4603      	mov	r3, r0
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7f9 ff77 	bl	8001a60 <lwip_htons>
 8007b72:	4603      	mov	r3, r0
 8007b74:	b21b      	sxth	r3, r3
 8007b76:	432b      	orrs	r3, r5
 8007b78:	b21b      	sxth	r3, r3
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007b82:	4b55      	ldr	r3, [pc, #340]	; (8007cd8 <tcp_receive+0x8bc>)
 8007b84:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007b86:	4b54      	ldr	r3, [pc, #336]	; (8007cd8 <tcp_receive+0x8bc>)
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	899b      	ldrh	r3, [r3, #12]
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7f9 ff66 	bl	8001a60 <lwip_htons>
 8007b94:	4603      	mov	r3, r0
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d005      	beq.n	8007bac <tcp_receive+0x790>
            inseg.len -= 1;
 8007ba0:	4b4d      	ldr	r3, [pc, #308]	; (8007cd8 <tcp_receive+0x8bc>)
 8007ba2:	891b      	ldrh	r3, [r3, #8]
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	4b4b      	ldr	r3, [pc, #300]	; (8007cd8 <tcp_receive+0x8bc>)
 8007baa:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8007bac:	4b4a      	ldr	r3, [pc, #296]	; (8007cd8 <tcp_receive+0x8bc>)
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	4b49      	ldr	r3, [pc, #292]	; (8007cd8 <tcp_receive+0x8bc>)
 8007bb2:	891b      	ldrh	r3, [r3, #8]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	f7fb ffd2 	bl	8003b60 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8007bbc:	4b46      	ldr	r3, [pc, #280]	; (8007cd8 <tcp_receive+0x8bc>)
 8007bbe:	891c      	ldrh	r4, [r3, #8]
 8007bc0:	4b45      	ldr	r3, [pc, #276]	; (8007cd8 <tcp_receive+0x8bc>)
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	899b      	ldrh	r3, [r3, #12]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7f9 ff49 	bl	8001a60 <lwip_htons>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <tcp_receive+0x7c2>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e000      	b.n	8007be0 <tcp_receive+0x7c4>
 8007bde:	2300      	movs	r3, #0
 8007be0:	4423      	add	r3, r4
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	4b3e      	ldr	r3, [pc, #248]	; (8007ce0 <tcp_receive+0x8c4>)
 8007be6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 8007be8:	4b3d      	ldr	r3, [pc, #244]	; (8007ce0 <tcp_receive+0x8c4>)
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	461a      	mov	r2, r3
 8007bee:	4b3b      	ldr	r3, [pc, #236]	; (8007cdc <tcp_receive+0x8c0>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	441a      	add	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007bfc:	440b      	add	r3, r1
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d00b      	beq.n	8007c1a <tcp_receive+0x7fe>
 8007c02:	4b38      	ldr	r3, [pc, #224]	; (8007ce4 <tcp_receive+0x8c8>)
 8007c04:	f240 52d2 	movw	r2, #1490	; 0x5d2
 8007c08:	4937      	ldr	r1, [pc, #220]	; (8007ce8 <tcp_receive+0x8cc>)
 8007c0a:	4838      	ldr	r0, [pc, #224]	; (8007cec <tcp_receive+0x8d0>)
 8007c0c:	f008 fc9e 	bl	801054c <iprintf>
 8007c10:	2000      	movs	r0, #0
 8007c12:	f008 fd9d 	bl	8010750 <fflush>
 8007c16:	f008 fce2 	bl	80105de <abort>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 80ea 	beq.w	8007df8 <tcp_receive+0x9dc>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007c24:	4b2c      	ldr	r3, [pc, #176]	; (8007cd8 <tcp_receive+0x8bc>)
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	899b      	ldrh	r3, [r3, #12]
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7f9 ff17 	bl	8001a60 <lwip_htons>
 8007c32:	4603      	mov	r3, r0
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d010      	beq.n	8007c60 <tcp_receive+0x844>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8007c3e:	e00a      	b.n	8007c56 <tcp_receive+0x83a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c44:	623b      	str	r3, [r7, #32]
              pcb->ooseq = pcb->ooseq->next;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8007c50:	6a38      	ldr	r0, [r7, #32]
 8007c52:	f7fd fcb7 	bl	80055c4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1f0      	bne.n	8007c40 <tcp_receive+0x824>
 8007c5e:	e0cb      	b.n	8007df8 <tcp_receive+0x9dc>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c64:	643b      	str	r3, [r7, #64]	; 0x40
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8007c66:	e050      	b.n	8007d0a <tcp_receive+0x8ee>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8007c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	899b      	ldrh	r3, [r3, #12]
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7f9 fef5 	bl	8001a60 <lwip_htons>
 8007c76:	4603      	mov	r3, r0
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d03b      	beq.n	8007cfa <tcp_receive+0x8de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8007c82:	4b15      	ldr	r3, [pc, #84]	; (8007cd8 <tcp_receive+0x8bc>)
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	899b      	ldrh	r3, [r3, #12]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7f9 fee8 	bl	8001a60 <lwip_htons>
 8007c90:	4603      	mov	r3, r0
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d12e      	bne.n	8007cfa <tcp_receive+0x8de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8007c9c:	4b0e      	ldr	r3, [pc, #56]	; (8007cd8 <tcp_receive+0x8bc>)
 8007c9e:	691c      	ldr	r4, [r3, #16]
 8007ca0:	4b0d      	ldr	r3, [pc, #52]	; (8007cd8 <tcp_receive+0x8bc>)
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	899b      	ldrh	r3, [r3, #12]
 8007ca6:	b29d      	uxth	r5, r3
 8007ca8:	2001      	movs	r0, #1
 8007caa:	f7f9 fed9 	bl	8001a60 <lwip_htons>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	432b      	orrs	r3, r5
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8007cb6:	4b08      	ldr	r3, [pc, #32]	; (8007cd8 <tcp_receive+0x8bc>)
 8007cb8:	891c      	ldrh	r4, [r3, #8]
 8007cba:	4b07      	ldr	r3, [pc, #28]	; (8007cd8 <tcp_receive+0x8bc>)
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	899b      	ldrh	r3, [r3, #12]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7f9 fecc 	bl	8001a60 <lwip_htons>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	f003 0303 	and.w	r3, r3, #3
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00d      	beq.n	8007cf0 <tcp_receive+0x8d4>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e00c      	b.n	8007cf2 <tcp_receive+0x8d6>
 8007cd8:	200003b4 	.word	0x200003b4
 8007cdc:	200003d8 	.word	0x200003d8
 8007ce0:	200003e2 	.word	0x200003e2
 8007ce4:	08012d0c 	.word	0x08012d0c
 8007ce8:	080130a4 	.word	0x080130a4
 8007cec:	08012d48 	.word	0x08012d48
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	4423      	add	r3, r4
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	4b9f      	ldr	r3, [pc, #636]	; (8007f74 <tcp_receive+0xb58>)
 8007cf8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8007cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cfc:	61fb      	str	r3, [r7, #28]
              next = next->next;
 8007cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	643b      	str	r3, [r7, #64]	; 0x40
              tcp_seg_free(tmp);
 8007d04:	69f8      	ldr	r0, [r7, #28]
 8007d06:	f7fd fc5d 	bl	80055c4 <tcp_seg_free>
            while (next &&
 8007d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00e      	beq.n	8007d2e <tcp_receive+0x912>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8007d10:	4b98      	ldr	r3, [pc, #608]	; (8007f74 <tcp_receive+0xb58>)
 8007d12:	881b      	ldrh	r3, [r3, #0]
 8007d14:	461a      	mov	r2, r3
 8007d16:	4b98      	ldr	r3, [pc, #608]	; (8007f78 <tcp_receive+0xb5c>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	441a      	add	r2, r3
 8007d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d24:	8909      	ldrh	r1, [r1, #8]
 8007d26:	440b      	add	r3, r1
 8007d28:	1ad3      	subs	r3, r2, r3
            while (next &&
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	da9c      	bge.n	8007c68 <tcp_receive+0x84c>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8007d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d05e      	beq.n	8007df2 <tcp_receive+0x9d6>
                TCP_SEQ_GT(seqno + tcplen,
 8007d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	4b8e      	ldr	r3, [pc, #568]	; (8007f74 <tcp_receive+0xb58>)
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4b8d      	ldr	r3, [pc, #564]	; (8007f78 <tcp_receive+0xb5c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	440b      	add	r3, r1
 8007d46:	1ad3      	subs	r3, r2, r3
            if (next &&
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	da52      	bge.n	8007df2 <tcp_receive+0x9d6>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8007d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	4b88      	ldr	r3, [pc, #544]	; (8007f78 <tcp_receive+0xb5c>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	4b87      	ldr	r3, [pc, #540]	; (8007f7c <tcp_receive+0xb60>)
 8007d60:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007d62:	4b86      	ldr	r3, [pc, #536]	; (8007f7c <tcp_receive+0xb60>)
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	899b      	ldrh	r3, [r3, #12]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7f9 fe78 	bl	8001a60 <lwip_htons>
 8007d70:	4603      	mov	r3, r0
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	f003 0302 	and.w	r3, r3, #2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <tcp_receive+0x96c>
                inseg.len -= 1;
 8007d7c:	4b7f      	ldr	r3, [pc, #508]	; (8007f7c <tcp_receive+0xb60>)
 8007d7e:	891b      	ldrh	r3, [r3, #8]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	4b7d      	ldr	r3, [pc, #500]	; (8007f7c <tcp_receive+0xb60>)
 8007d86:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8007d88:	4b7c      	ldr	r3, [pc, #496]	; (8007f7c <tcp_receive+0xb60>)
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	4b7b      	ldr	r3, [pc, #492]	; (8007f7c <tcp_receive+0xb60>)
 8007d8e:	891b      	ldrh	r3, [r3, #8]
 8007d90:	4619      	mov	r1, r3
 8007d92:	4610      	mov	r0, r2
 8007d94:	f7fb fee4 	bl	8003b60 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8007d98:	4b78      	ldr	r3, [pc, #480]	; (8007f7c <tcp_receive+0xb60>)
 8007d9a:	891c      	ldrh	r4, [r3, #8]
 8007d9c:	4b77      	ldr	r3, [pc, #476]	; (8007f7c <tcp_receive+0xb60>)
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	899b      	ldrh	r3, [r3, #12]
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7f9 fe5b 	bl	8001a60 <lwip_htons>
 8007daa:	4603      	mov	r3, r0
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <tcp_receive+0x99e>
 8007db6:	2301      	movs	r3, #1
 8007db8:	e000      	b.n	8007dbc <tcp_receive+0x9a0>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	4423      	add	r3, r4
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	4b6c      	ldr	r3, [pc, #432]	; (8007f74 <tcp_receive+0xb58>)
 8007dc2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue",
 8007dc4:	4b6b      	ldr	r3, [pc, #428]	; (8007f74 <tcp_receive+0xb58>)
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	4b6b      	ldr	r3, [pc, #428]	; (8007f78 <tcp_receive+0xb5c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	441a      	add	r2, r3
 8007dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d00b      	beq.n	8007df2 <tcp_receive+0x9d6>
 8007dda:	4b69      	ldr	r3, [pc, #420]	; (8007f80 <tcp_receive+0xb64>)
 8007ddc:	f240 6203 	movw	r2, #1539	; 0x603
 8007de0:	4968      	ldr	r1, [pc, #416]	; (8007f84 <tcp_receive+0xb68>)
 8007de2:	4869      	ldr	r0, [pc, #420]	; (8007f88 <tcp_receive+0xb6c>)
 8007de4:	f008 fbb2 	bl	801054c <iprintf>
 8007de8:	2000      	movs	r0, #0
 8007dea:	f008 fcb1 	bl	8010750 <fflush>
 8007dee:	f008 fbf6 	bl	80105de <abort>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007df6:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8007df8:	4b5e      	ldr	r3, [pc, #376]	; (8007f74 <tcp_receive+0xb58>)
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	4b5e      	ldr	r3, [pc, #376]	; (8007f78 <tcp_receive+0xb5c>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	441a      	add	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd", pcb->rcv_wnd >= tcplen);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007e0c:	4b59      	ldr	r3, [pc, #356]	; (8007f74 <tcp_receive+0xb58>)
 8007e0e:	881b      	ldrh	r3, [r3, #0]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d20b      	bcs.n	8007e2c <tcp_receive+0xa10>
 8007e14:	4b5a      	ldr	r3, [pc, #360]	; (8007f80 <tcp_receive+0xb64>)
 8007e16:	f240 620d 	movw	r2, #1549	; 0x60d
 8007e1a:	495c      	ldr	r1, [pc, #368]	; (8007f8c <tcp_receive+0xb70>)
 8007e1c:	485a      	ldr	r0, [pc, #360]	; (8007f88 <tcp_receive+0xb6c>)
 8007e1e:	f008 fb95 	bl	801054c <iprintf>
 8007e22:	2000      	movs	r0, #0
 8007e24:	f008 fc94 	bl	8010750 <fflush>
 8007e28:	f008 fbd9 	bl	80105de <abort>
        pcb->rcv_wnd -= tcplen;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007e30:	4b50      	ldr	r3, [pc, #320]	; (8007f74 <tcp_receive+0xb58>)
 8007e32:	881b      	ldrh	r3, [r3, #0]
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7fc fea1 	bl	8004b84 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8007e42:	4b4e      	ldr	r3, [pc, #312]	; (8007f7c <tcp_receive+0xb60>)
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	891b      	ldrh	r3, [r3, #8]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d006      	beq.n	8007e5a <tcp_receive+0xa3e>
          recv_data = inseg.p;
 8007e4c:	4b4b      	ldr	r3, [pc, #300]	; (8007f7c <tcp_receive+0xb60>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	4a4f      	ldr	r2, [pc, #316]	; (8007f90 <tcp_receive+0xb74>)
 8007e52:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakenly) deallocate it. */
          inseg.p = NULL;
 8007e54:	4b49      	ldr	r3, [pc, #292]	; (8007f7c <tcp_receive+0xb60>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007e5a:	4b48      	ldr	r3, [pc, #288]	; (8007f7c <tcp_receive+0xb60>)
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	899b      	ldrh	r3, [r3, #12]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7f9 fdfc 	bl	8001a60 <lwip_htons>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 80bc 	beq.w	8007fee <tcp_receive+0xbd2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8007e76:	4b47      	ldr	r3, [pc, #284]	; (8007f94 <tcp_receive+0xb78>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	f043 0320 	orr.w	r3, r3, #32
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	4b44      	ldr	r3, [pc, #272]	; (8007f94 <tcp_receive+0xb78>)
 8007e82:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8007e84:	e0b3      	b.n	8007fee <tcp_receive+0xbd2>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e8a:	61bb      	str	r3, [r7, #24]
          seqno = pcb->ooseq->tcphdr->seqno;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	4a38      	ldr	r2, [pc, #224]	; (8007f78 <tcp_receive+0xb5c>)
 8007e96:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	891b      	ldrh	r3, [r3, #8]
 8007e9c:	461c      	mov	r4, r3
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	899b      	ldrh	r3, [r3, #12]
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7f9 fdda 	bl	8001a60 <lwip_htons>
 8007eac:	4603      	mov	r3, r0
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	f003 0303 	and.w	r3, r3, #3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <tcp_receive+0xaa0>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e000      	b.n	8007ebe <tcp_receive+0xaa2>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4423      	add	r3, r4
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ec4:	441a      	add	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd",
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ece:	461c      	mov	r4, r3
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	891b      	ldrh	r3, [r3, #8]
 8007ed4:	461d      	mov	r5, r3
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	899b      	ldrh	r3, [r3, #12]
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7f9 fdbe 	bl	8001a60 <lwip_htons>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	f003 0303 	and.w	r3, r3, #3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <tcp_receive+0xad8>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e000      	b.n	8007ef6 <tcp_receive+0xada>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	442b      	add	r3, r5
 8007ef8:	429c      	cmp	r4, r3
 8007efa:	d20b      	bcs.n	8007f14 <tcp_receive+0xaf8>
 8007efc:	4b20      	ldr	r3, [pc, #128]	; (8007f80 <tcp_receive+0xb64>)
 8007efe:	f240 6232 	movw	r2, #1586	; 0x632
 8007f02:	4925      	ldr	r1, [pc, #148]	; (8007f98 <tcp_receive+0xb7c>)
 8007f04:	4820      	ldr	r0, [pc, #128]	; (8007f88 <tcp_receive+0xb6c>)
 8007f06:	f008 fb21 	bl	801054c <iprintf>
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	f008 fc20 	bl	8010750 <fflush>
 8007f10:	f008 fb65 	bl	80105de <abort>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	891b      	ldrh	r3, [r3, #8]
 8007f18:	461c      	mov	r4, r3
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	899b      	ldrh	r3, [r3, #12]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7f9 fd9c 	bl	8001a60 <lwip_htons>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	f003 0303 	and.w	r3, r3, #3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <tcp_receive+0xb1c>
 8007f34:	2301      	movs	r3, #1
 8007f36:	e000      	b.n	8007f3a <tcp_receive+0xb1e>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	18e1      	adds	r1, r4, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007f40:	b28b      	uxth	r3, r1
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fc fe1a 	bl	8004b84 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	891b      	ldrh	r3, [r3, #8]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d027      	beq.n	8007faa <tcp_receive+0xb8e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8007f5a:	4b0d      	ldr	r3, [pc, #52]	; (8007f90 <tcp_receive+0xb74>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d01c      	beq.n	8007f9c <tcp_receive+0xb80>
              pbuf_cat(recv_data, cseg->p);
 8007f62:	4b0b      	ldr	r3, [pc, #44]	; (8007f90 <tcp_receive+0xb74>)
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	f7fc f86b 	bl	8004048 <pbuf_cat>
 8007f72:	e017      	b.n	8007fa4 <tcp_receive+0xb88>
 8007f74:	200003e2 	.word	0x200003e2
 8007f78:	200003d8 	.word	0x200003d8
 8007f7c:	200003b4 	.word	0x200003b4
 8007f80:	08012d0c 	.word	0x08012d0c
 8007f84:	080130dc 	.word	0x080130dc
 8007f88:	08012d48 	.word	0x08012d48
 8007f8c:	08013118 	.word	0x08013118
 8007f90:	200003e8 	.word	0x200003e8
 8007f94:	200003e5 	.word	0x200003e5
 8007f98:	08013138 	.word	0x08013138
            } else {
              recv_data = cseg->p;
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	4a73      	ldr	r2, [pc, #460]	; (8008170 <tcp_receive+0xd54>)
 8007fa2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	899b      	ldrh	r3, [r3, #12]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7f9 fd54 	bl	8001a60 <lwip_htons>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00d      	beq.n	8007fe0 <tcp_receive+0xbc4>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8007fc4:	4b6b      	ldr	r3, [pc, #428]	; (8008174 <tcp_receive+0xd58>)
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	f043 0320 	orr.w	r3, r3, #32
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	4b69      	ldr	r3, [pc, #420]	; (8008174 <tcp_receive+0xd58>)
 8007fd0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	7d1b      	ldrb	r3, [r3, #20]
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	d102      	bne.n	8007fe0 <tcp_receive+0xbc4>
              pcb->state = CLOSE_WAIT;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2207      	movs	r2, #7
 8007fde:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8007fe8:	69b8      	ldr	r0, [r7, #24]
 8007fea:	f7fd faeb 	bl	80055c4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d008      	beq.n	8008008 <tcp_receive+0xbec>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008002:	429a      	cmp	r2, r3
 8008004:	f43f af3f 	beq.w	8007e86 <tcp_receive+0xa6a>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	8b5b      	ldrh	r3, [r3, #26]
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00e      	beq.n	8008032 <tcp_receive+0xc16>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	8b5b      	ldrh	r3, [r3, #26]
 8008018:	f023 0301 	bic.w	r3, r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	835a      	strh	r2, [r3, #26]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	8b5b      	ldrh	r3, [r3, #26]
 8008026:	f043 0302 	orr.w	r3, r3, #2
 800802a:	b29a      	uxth	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008030:	e194      	b.n	800835c <tcp_receive+0xf40>
        tcp_ack(pcb);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	8b5b      	ldrh	r3, [r3, #26]
 8008036:	f043 0301 	orr.w	r3, r3, #1
 800803a:	b29a      	uxth	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008040:	e18c      	b.n	800835c <tcp_receive+0xf40>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008046:	2b00      	cmp	r3, #0
 8008048:	d106      	bne.n	8008058 <tcp_receive+0xc3c>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800804a:	484b      	ldr	r0, [pc, #300]	; (8008178 <tcp_receive+0xd5c>)
 800804c:	f7fd fad2 	bl	80055f4 <tcp_seg_copy>
 8008050:	4602      	mov	r2, r0
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	675a      	str	r2, [r3, #116]	; 0x74
 8008056:	e179      	b.n	800834c <tcp_receive+0xf30>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8008058:	2300      	movs	r3, #0
 800805a:	63bb      	str	r3, [r7, #56]	; 0x38
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008060:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008062:	e161      	b.n	8008328 <tcp_receive+0xf0c>
            if (seqno == next->tcphdr->seqno) {
 8008064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	685a      	ldr	r2, [r3, #4]
 800806a:	4b44      	ldr	r3, [pc, #272]	; (800817c <tcp_receive+0xd60>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	429a      	cmp	r2, r3
 8008070:	d122      	bne.n	80080b8 <tcp_receive+0xc9c>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008072:	4b41      	ldr	r3, [pc, #260]	; (8008178 <tcp_receive+0xd5c>)
 8008074:	891a      	ldrh	r2, [r3, #8]
 8008076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008078:	891b      	ldrh	r3, [r3, #8]
 800807a:	429a      	cmp	r2, r3
 800807c:	f240 8159 	bls.w	8008332 <tcp_receive+0xf16>

                /* If next segment is the last segment in ooseq
                   and smaller than inseg, that means it has been
                   trimmed before to fit our window, so we just
                   break here. */
                if (next->next == NULL) {
 8008080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 8156 	beq.w	8008336 <tcp_receive+0xf1a>
                }

                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800808a:	483b      	ldr	r0, [pc, #236]	; (8008178 <tcp_receive+0xd5c>)
 800808c:	f7fd fab2 	bl	80055f4 <tcp_seg_copy>
 8008090:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 8150 	beq.w	800833a <tcp_receive+0xf1e>
                  if (prev != NULL) {
 800809a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <tcp_receive+0xc8c>
                    prev->next = cseg;
 80080a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	e002      	b.n	80080ae <tcp_receive+0xc92>
                  } else {
                    pcb->ooseq = cseg;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80080ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f7ff f8a1 	bl	80071f8 <tcp_oos_insert_segment>
                }
                break;
 80080b6:	e140      	b.n	800833a <tcp_receive+0xf1e>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80080b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d117      	bne.n	80080ee <tcp_receive+0xcd2>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80080be:	4b2f      	ldr	r3, [pc, #188]	; (800817c <tcp_receive+0xd60>)
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	da58      	bge.n	8008180 <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80080ce:	482a      	ldr	r0, [pc, #168]	; (8008178 <tcp_receive+0xd5c>)
 80080d0:	f7fd fa90 	bl	80055f4 <tcp_seg_copy>
 80080d4:	6178      	str	r0, [r7, #20]
                  if (cseg != NULL) {
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 8130 	beq.w	800833e <tcp_receive+0xf22>
                    pcb->ooseq = cseg;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80080e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080e6:	6978      	ldr	r0, [r7, #20]
 80080e8:	f7ff f886 	bl	80071f8 <tcp_oos_insert_segment>
                  }
                  break;
 80080ec:	e127      	b.n	800833e <tcp_receive+0xf22>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80080ee:	4b23      	ldr	r3, [pc, #140]	; (800817c <tcp_receive+0xd60>)
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	3b01      	subs	r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	db3f      	blt.n	8008180 <tcp_receive+0xd64>
 8008100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	4b1d      	ldr	r3, [pc, #116]	; (800817c <tcp_receive+0xd60>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	3b01      	subs	r3, #1
 800810e:	2b00      	cmp	r3, #0
 8008110:	db36      	blt.n	8008180 <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008112:	4819      	ldr	r0, [pc, #100]	; (8008178 <tcp_receive+0xd5c>)
 8008114:	f7fd fa6e 	bl	80055f4 <tcp_seg_copy>
 8008118:	6138      	str	r0, [r7, #16]
                  if (cseg != NULL) {
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 8110 	beq.w	8008342 <tcp_receive+0xf26>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008122:	4b16      	ldr	r3, [pc, #88]	; (800817c <tcp_receive+0xd60>)
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800812e:	8909      	ldrh	r1, [r1, #8]
 8008130:	440b      	add	r3, r1
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	da12      	bge.n	800815e <tcp_receive+0xd42>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008138:	4b10      	ldr	r3, [pc, #64]	; (800817c <tcp_receive+0xd60>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	b29a      	uxth	r2, r3
 800813e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	b29b      	uxth	r3, r3
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	b29a      	uxth	r2, r3
 800814a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814c:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008154:	891b      	ldrh	r3, [r3, #8]
 8008156:	4619      	mov	r1, r3
 8008158:	4610      	mov	r0, r2
 800815a:	f7fb fd01 	bl	8003b60 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800815e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008164:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008166:	6938      	ldr	r0, [r7, #16]
 8008168:	f7ff f846 	bl	80071f8 <tcp_oos_insert_segment>
                  }
                  break;
 800816c:	e0e9      	b.n	8008342 <tcp_receive+0xf26>
 800816e:	bf00      	nop
 8008170:	200003e8 	.word	0x200003e8
 8008174:	200003e5 	.word	0x200003e5
 8008178:	200003b4 	.word	0x200003b4
 800817c:	200003d8 	.word	0x200003d8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8008180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008182:	63bb      	str	r3, [r7, #56]	; 0x38

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	f040 80ca 	bne.w	8008322 <tcp_receive+0xf06>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800818e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	4b81      	ldr	r3, [pc, #516]	; (800839c <tcp_receive+0xf80>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800819a:	2b00      	cmp	r3, #0
 800819c:	f280 80c1 	bge.w	8008322 <tcp_receive+0xf06>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80081a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	899b      	ldrh	r3, [r3, #12]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7f9 fc59 	bl	8001a60 <lwip_htons>
 80081ae:	4603      	mov	r3, r0
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f040 80c5 	bne.w	8008346 <tcp_receive+0xf2a>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80081bc:	4878      	ldr	r0, [pc, #480]	; (80083a0 <tcp_receive+0xf84>)
 80081be:	f7fd fa19 	bl	80055f4 <tcp_seg_copy>
 80081c2:	4602      	mov	r2, r0
 80081c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80081c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 80bc 	beq.w	800834a <tcp_receive+0xf2e>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80081d2:	4b72      	ldr	r3, [pc, #456]	; (800839c <tcp_receive+0xf80>)
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081de:	8909      	ldrh	r1, [r1, #8]
 80081e0:	440b      	add	r3, r1
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	da12      	bge.n	800820e <tcp_receive+0xdf2>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80081e8:	4b6c      	ldr	r3, [pc, #432]	; (800839c <tcp_receive+0xf80>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081fc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80081fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008204:	891b      	ldrh	r3, [r3, #8]
 8008206:	4619      	mov	r1, r3
 8008208:	4610      	mov	r0, r2
 800820a:	f7fb fca9 	bl	8003b60 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008216:	441a      	add	r2, r3
 8008218:	4b62      	ldr	r3, [pc, #392]	; (80083a4 <tcp_receive+0xf88>)
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	4619      	mov	r1, r3
 800821e:	4b5f      	ldr	r3, [pc, #380]	; (800839c <tcp_receive+0xf80>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	440b      	add	r3, r1
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	f280 808f 	bge.w	800834a <tcp_receive+0xf2e>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800822c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	899b      	ldrh	r3, [r3, #12]
 8008234:	b29b      	uxth	r3, r3
 8008236:	4618      	mov	r0, r3
 8008238:	f7f9 fc12 	bl	8001a60 <lwip_htons>
 800823c:	4603      	mov	r3, r0
 800823e:	b2db      	uxtb	r3, r3
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	d022      	beq.n	800828e <tcp_receive+0xe72>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	691c      	ldr	r4, [r3, #16]
 800824e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	899b      	ldrh	r3, [r3, #12]
 8008256:	b29b      	uxth	r3, r3
 8008258:	b21b      	sxth	r3, r3
 800825a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800825e:	b21d      	sxth	r5, r3
 8008260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	899b      	ldrh	r3, [r3, #12]
 8008268:	b29b      	uxth	r3, r3
 800826a:	4618      	mov	r0, r3
 800826c:	f7f9 fbf8 	bl	8001a60 <lwip_htons>
 8008270:	4603      	mov	r3, r0
 8008272:	b2db      	uxtb	r3, r3
 8008274:	b29b      	uxth	r3, r3
 8008276:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800827a:	b29b      	uxth	r3, r3
 800827c:	4618      	mov	r0, r3
 800827e:	f7f9 fbef 	bl	8001a60 <lwip_htons>
 8008282:	4603      	mov	r3, r0
 8008284:	b21b      	sxth	r3, r3
 8008286:	432b      	orrs	r3, r5
 8008288:	b21b      	sxth	r3, r3
 800828a:	b29b      	uxth	r3, r3
 800828c:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800828e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008296:	b291      	uxth	r1, r2
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800829c:	440a      	add	r2, r1
 800829e:	b291      	uxth	r1, r2
 80082a0:	4a3e      	ldr	r2, [pc, #248]	; (800839c <tcp_receive+0xf80>)
 80082a2:	6812      	ldr	r2, [r2, #0]
 80082a4:	b292      	uxth	r2, r2
 80082a6:	1a8a      	subs	r2, r1, r2
 80082a8:	b292      	uxth	r2, r2
 80082aa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80082ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	891b      	ldrh	r3, [r3, #8]
 80082b8:	4619      	mov	r1, r3
 80082ba:	4610      	mov	r0, r2
 80082bc:	f7fb fc50 	bl	8003b60 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80082c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	891c      	ldrh	r4, [r3, #8]
 80082c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	899b      	ldrh	r3, [r3, #12]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7f9 fbc5 	bl	8001a60 <lwip_htons>
 80082d6:	4603      	mov	r3, r0
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	f003 0303 	and.w	r3, r3, #3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <tcp_receive+0xeca>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e000      	b.n	80082e8 <tcp_receive+0xecc>
 80082e6:	2300      	movs	r3, #0
 80082e8:	4423      	add	r3, r4
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	4b2d      	ldr	r3, [pc, #180]	; (80083a4 <tcp_receive+0xf88>)
 80082ee:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 80082f0:	4b2c      	ldr	r3, [pc, #176]	; (80083a4 <tcp_receive+0xf88>)
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	461a      	mov	r2, r3
 80082f6:	4b29      	ldr	r3, [pc, #164]	; (800839c <tcp_receive+0xf80>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	441a      	add	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008300:	6879      	ldr	r1, [r7, #4]
 8008302:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008304:	440b      	add	r3, r1
 8008306:	429a      	cmp	r2, r3
 8008308:	d01f      	beq.n	800834a <tcp_receive+0xf2e>
 800830a:	4b27      	ldr	r3, [pc, #156]	; (80083a8 <tcp_receive+0xf8c>)
 800830c:	f240 7209 	movw	r2, #1801	; 0x709
 8008310:	4926      	ldr	r1, [pc, #152]	; (80083ac <tcp_receive+0xf90>)
 8008312:	4827      	ldr	r0, [pc, #156]	; (80083b0 <tcp_receive+0xf94>)
 8008314:	f008 f91a 	bl	801054c <iprintf>
 8008318:	2000      	movs	r0, #0
 800831a:	f008 fa19 	bl	8010750 <fflush>
 800831e:	f008 f95e 	bl	80105de <abort>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832a:	2b00      	cmp	r3, #0
 800832c:	f47f ae9a 	bne.w	8008064 <tcp_receive+0xc48>
 8008330:	e00c      	b.n	800834c <tcp_receive+0xf30>
                break;
 8008332:	bf00      	nop
 8008334:	e00a      	b.n	800834c <tcp_receive+0xf30>
                  break;
 8008336:	bf00      	nop
 8008338:	e008      	b.n	800834c <tcp_receive+0xf30>
                break;
 800833a:	bf00      	nop
 800833c:	e006      	b.n	800834c <tcp_receive+0xf30>
                  break;
 800833e:	bf00      	nop
 8008340:	e004      	b.n	800834c <tcp_receive+0xf30>
                  break;
 8008342:	bf00      	nop
 8008344:	e002      	b.n	800834c <tcp_receive+0xf30>
                  break;
 8008346:	bf00      	nop
 8008348:	e000      	b.n	800834c <tcp_receive+0xf30>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800834a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f001 fb8b 	bl	8009a68 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8008352:	e003      	b.n	800835c <tcp_receive+0xf40>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f001 fb87 	bl	8009a68 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800835a:	e01b      	b.n	8008394 <tcp_receive+0xf78>
 800835c:	e01a      	b.n	8008394 <tcp_receive+0xf78>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800835e:	4b0f      	ldr	r3, [pc, #60]	; (800839c <tcp_receive+0xf80>)
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	db0b      	blt.n	8008384 <tcp_receive+0xf68>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008374:	441a      	add	r2, r3
 8008376:	4b09      	ldr	r3, [pc, #36]	; (800839c <tcp_receive+0xf80>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	425b      	negs	r3, r3
 800837c:	4413      	add	r3, r2
 800837e:	3b01      	subs	r3, #1
 8008380:	2b00      	cmp	r3, #0
 8008382:	da07      	bge.n	8008394 <tcp_receive+0xf78>
      tcp_ack_now(pcb);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	8b5b      	ldrh	r3, [r3, #26]
 8008388:	f043 0302 	orr.w	r3, r3, #2
 800838c:	b29a      	uxth	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8008392:	e7ff      	b.n	8008394 <tcp_receive+0xf78>
 8008394:	bf00      	nop
 8008396:	3750      	adds	r7, #80	; 0x50
 8008398:	46bd      	mov	sp, r7
 800839a:	bdb0      	pop	{r4, r5, r7, pc}
 800839c:	200003d8 	.word	0x200003d8
 80083a0:	200003b4 	.word	0x200003b4
 80083a4:	200003e2 	.word	0x200003e2
 80083a8:	08012d0c 	.word	0x08012d0c
 80083ac:	080130a4 	.word	0x080130a4
 80083b0:	08012d48 	.word	0x08012d48

080083b4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80083ba:	4b15      	ldr	r3, [pc, #84]	; (8008410 <tcp_get_next_optbyte+0x5c>)
 80083bc:	881b      	ldrh	r3, [r3, #0]
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	b291      	uxth	r1, r2
 80083c2:	4a13      	ldr	r2, [pc, #76]	; (8008410 <tcp_get_next_optbyte+0x5c>)
 80083c4:	8011      	strh	r1, [r2, #0]
 80083c6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80083c8:	4b12      	ldr	r3, [pc, #72]	; (8008414 <tcp_get_next_optbyte+0x60>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d004      	beq.n	80083da <tcp_get_next_optbyte+0x26>
 80083d0:	4b11      	ldr	r3, [pc, #68]	; (8008418 <tcp_get_next_optbyte+0x64>)
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	88fa      	ldrh	r2, [r7, #6]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d208      	bcs.n	80083ec <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80083da:	4b10      	ldr	r3, [pc, #64]	; (800841c <tcp_get_next_optbyte+0x68>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3314      	adds	r3, #20
 80083e0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80083e2:	88fb      	ldrh	r3, [r7, #6]
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	4413      	add	r3, r2
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	e00b      	b.n	8008404 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80083ec:	88fb      	ldrh	r3, [r7, #6]
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	4b09      	ldr	r3, [pc, #36]	; (8008418 <tcp_get_next_optbyte+0x64>)
 80083f2:	881b      	ldrh	r3, [r3, #0]
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80083fa:	4b06      	ldr	r3, [pc, #24]	; (8008414 <tcp_get_next_optbyte+0x60>)
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	797b      	ldrb	r3, [r7, #5]
 8008400:	4413      	add	r3, r2
 8008402:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008404:	4618      	mov	r0, r3
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	200003d4 	.word	0x200003d4
 8008414:	200003d0 	.word	0x200003d0
 8008418:	200003ce 	.word	0x200003ce
 800841c:	200003c8 	.word	0x200003c8

08008420 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10b      	bne.n	8008446 <tcp_parseopt+0x26>
 800842e:	4b33      	ldr	r3, [pc, #204]	; (80084fc <tcp_parseopt+0xdc>)
 8008430:	f240 728d 	movw	r2, #1933	; 0x78d
 8008434:	4932      	ldr	r1, [pc, #200]	; (8008500 <tcp_parseopt+0xe0>)
 8008436:	4833      	ldr	r0, [pc, #204]	; (8008504 <tcp_parseopt+0xe4>)
 8008438:	f008 f888 	bl	801054c <iprintf>
 800843c:	2000      	movs	r0, #0
 800843e:	f008 f987 	bl	8010750 <fflush>
 8008442:	f008 f8cc 	bl	80105de <abort>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008446:	4b30      	ldr	r3, [pc, #192]	; (8008508 <tcp_parseopt+0xe8>)
 8008448:	881b      	ldrh	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d053      	beq.n	80084f6 <tcp_parseopt+0xd6>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800844e:	4b2f      	ldr	r3, [pc, #188]	; (800850c <tcp_parseopt+0xec>)
 8008450:	2200      	movs	r2, #0
 8008452:	801a      	strh	r2, [r3, #0]
 8008454:	e043      	b.n	80084de <tcp_parseopt+0xbe>
      u8_t opt = tcp_get_next_optbyte();
 8008456:	f7ff ffad 	bl	80083b4 <tcp_get_next_optbyte>
 800845a:	4603      	mov	r3, r0
 800845c:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d03c      	beq.n	80084de <tcp_parseopt+0xbe>
 8008464:	2b02      	cmp	r3, #2
 8008466:	d002      	beq.n	800846e <tcp_parseopt+0x4e>
 8008468:	2b00      	cmp	r3, #0
 800846a:	d03f      	beq.n	80084ec <tcp_parseopt+0xcc>
 800846c:	e026      	b.n	80084bc <tcp_parseopt+0x9c>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800846e:	f7ff ffa1 	bl	80083b4 <tcp_get_next_optbyte>
 8008472:	4603      	mov	r3, r0
 8008474:	2b04      	cmp	r3, #4
 8008476:	d13b      	bne.n	80084f0 <tcp_parseopt+0xd0>
 8008478:	4b24      	ldr	r3, [pc, #144]	; (800850c <tcp_parseopt+0xec>)
 800847a:	881b      	ldrh	r3, [r3, #0]
 800847c:	3302      	adds	r3, #2
 800847e:	4a22      	ldr	r2, [pc, #136]	; (8008508 <tcp_parseopt+0xe8>)
 8008480:	8812      	ldrh	r2, [r2, #0]
 8008482:	4293      	cmp	r3, r2
 8008484:	dc34      	bgt.n	80084f0 <tcp_parseopt+0xd0>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8008486:	f7ff ff95 	bl	80083b4 <tcp_get_next_optbyte>
 800848a:	4603      	mov	r3, r0
 800848c:	b29b      	uxth	r3, r3
 800848e:	021b      	lsls	r3, r3, #8
 8008490:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8008492:	f7ff ff8f 	bl	80083b4 <tcp_get_next_optbyte>
 8008496:	4603      	mov	r3, r0
 8008498:	b29a      	uxth	r2, r3
 800849a:	89bb      	ldrh	r3, [r7, #12]
 800849c:	4313      	orrs	r3, r2
 800849e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80084a0:	89bb      	ldrh	r3, [r7, #12]
 80084a2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80084a6:	d804      	bhi.n	80084b2 <tcp_parseopt+0x92>
 80084a8:	89bb      	ldrh	r3, [r7, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <tcp_parseopt+0x92>
 80084ae:	89ba      	ldrh	r2, [r7, #12]
 80084b0:	e001      	b.n	80084b6 <tcp_parseopt+0x96>
 80084b2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80084ba:	e010      	b.n	80084de <tcp_parseopt+0xbe>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80084bc:	f7ff ff7a 	bl	80083b4 <tcp_get_next_optbyte>
 80084c0:	4603      	mov	r3, r0
 80084c2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80084c4:	7afb      	ldrb	r3, [r7, #11]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d914      	bls.n	80084f4 <tcp_parseopt+0xd4>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80084ca:	7afb      	ldrb	r3, [r7, #11]
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	4b0f      	ldr	r3, [pc, #60]	; (800850c <tcp_parseopt+0xec>)
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	4413      	add	r3, r2
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	3b02      	subs	r3, #2
 80084d8:	b29a      	uxth	r2, r3
 80084da:	4b0c      	ldr	r3, [pc, #48]	; (800850c <tcp_parseopt+0xec>)
 80084dc:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80084de:	4b0b      	ldr	r3, [pc, #44]	; (800850c <tcp_parseopt+0xec>)
 80084e0:	881a      	ldrh	r2, [r3, #0]
 80084e2:	4b09      	ldr	r3, [pc, #36]	; (8008508 <tcp_parseopt+0xe8>)
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d3b5      	bcc.n	8008456 <tcp_parseopt+0x36>
 80084ea:	e004      	b.n	80084f6 <tcp_parseopt+0xd6>
          return;
 80084ec:	bf00      	nop
 80084ee:	e002      	b.n	80084f6 <tcp_parseopt+0xd6>
            return;
 80084f0:	bf00      	nop
 80084f2:	e000      	b.n	80084f6 <tcp_parseopt+0xd6>
            return;
 80084f4:	bf00      	nop
      }
    }
  }
}
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	08012d0c 	.word	0x08012d0c
 8008500:	0801315c 	.word	0x0801315c
 8008504:	08012d48 	.word	0x08012d48
 8008508:	200003cc 	.word	0x200003cc
 800850c:	200003d4 	.word	0x200003d4

08008510 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8008510:	b480      	push	{r7}
 8008512:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8008514:	4b05      	ldr	r3, [pc, #20]	; (800852c <tcp_trigger_input_pcb_close+0x1c>)
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	f043 0310 	orr.w	r3, r3, #16
 800851c:	b2da      	uxtb	r2, r3
 800851e:	4b03      	ldr	r3, [pc, #12]	; (800852c <tcp_trigger_input_pcb_close+0x1c>)
 8008520:	701a      	strb	r2, [r3, #0]
}
 8008522:	bf00      	nop
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	200003e5 	.word	0x200003e5

08008530 <tcp_route>:
                                              struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00a      	beq.n	8008558 <tcp_route+0x28>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	7a1b      	ldrb	r3, [r3, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d006      	beq.n	8008558 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	7a1b      	ldrb	r3, [r3, #8]
 800854e:	4618      	mov	r0, r3
 8008550:	f7fb f96a 	bl	8003828 <netif_get_by_index>
 8008554:	4603      	mov	r3, r0
 8008556:	e003      	b.n	8008560 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7f9 fe09 	bl	8002170 <ip4_route>
 800855e:	4603      	mov	r3, r0
  }
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8008568:	b590      	push	{r4, r7, lr}
 800856a:	b087      	sub	sp, #28
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	603b      	str	r3, [r7, #0]
 8008574:	4613      	mov	r3, r2
 8008576:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10a      	bne.n	8008594 <tcp_create_segment+0x2c>
 800857e:	4b4e      	ldr	r3, [pc, #312]	; (80086b8 <tcp_create_segment+0x150>)
 8008580:	22a6      	movs	r2, #166	; 0xa6
 8008582:	494e      	ldr	r1, [pc, #312]	; (80086bc <tcp_create_segment+0x154>)
 8008584:	484e      	ldr	r0, [pc, #312]	; (80086c0 <tcp_create_segment+0x158>)
 8008586:	f007 ffe1 	bl	801054c <iprintf>
 800858a:	2000      	movs	r0, #0
 800858c:	f008 f8e0 	bl	8010750 <fflush>
 8008590:	f008 f825 	bl	80105de <abort>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10a      	bne.n	80085b0 <tcp_create_segment+0x48>
 800859a:	4b47      	ldr	r3, [pc, #284]	; (80086b8 <tcp_create_segment+0x150>)
 800859c:	22a7      	movs	r2, #167	; 0xa7
 800859e:	4949      	ldr	r1, [pc, #292]	; (80086c4 <tcp_create_segment+0x15c>)
 80085a0:	4847      	ldr	r0, [pc, #284]	; (80086c0 <tcp_create_segment+0x158>)
 80085a2:	f007 ffd3 	bl	801054c <iprintf>
 80085a6:	2000      	movs	r0, #0
 80085a8:	f008 f8d2 	bl	8010750 <fflush>
 80085ac:	f008 f817 	bl	80105de <abort>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80085b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085b4:	f003 0301 	and.w	r3, r3, #1
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <tcp_create_segment+0x58>
 80085bc:	2304      	movs	r3, #4
 80085be:	e000      	b.n	80085c2 <tcp_create_segment+0x5a>
 80085c0:	2300      	movs	r3, #0
 80085c2:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80085c4:	2002      	movs	r0, #2
 80085c6:	f7fa fe03 	bl	80031d0 <memp_malloc>
 80085ca:	6138      	str	r0, [r7, #16]
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d104      	bne.n	80085dc <tcp_create_segment+0x74>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80085d2:	68b8      	ldr	r0, [r7, #8]
 80085d4:	f7fb fc70 	bl	8003eb8 <pbuf_free>
    return NULL;
 80085d8:	2300      	movs	r3, #0
 80085da:	e069      	b.n	80086b0 <tcp_create_segment+0x148>
  }
  seg->flags = optflags;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80085e2:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	2200      	movs	r2, #0
 80085e8:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	891a      	ldrh	r2, [r3, #8]
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d20a      	bcs.n	8008612 <tcp_create_segment+0xaa>
 80085fc:	4b2e      	ldr	r3, [pc, #184]	; (80086b8 <tcp_create_segment+0x150>)
 80085fe:	22b3      	movs	r2, #179	; 0xb3
 8008600:	4931      	ldr	r1, [pc, #196]	; (80086c8 <tcp_create_segment+0x160>)
 8008602:	482f      	ldr	r0, [pc, #188]	; (80086c0 <tcp_create_segment+0x158>)
 8008604:	f007 ffa2 	bl	801054c <iprintf>
 8008608:	2000      	movs	r0, #0
 800860a:	f008 f8a1 	bl	8010750 <fflush>
 800860e:	f007 ffe6 	bl	80105de <abort>
  seg->len = p->tot_len - optlen;
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	891a      	ldrh	r2, [r3, #8]
 8008616:	7dfb      	ldrb	r3, [r7, #23]
 8008618:	b29b      	uxth	r3, r3
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	b29a      	uxth	r2, r3
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	2200      	movs	r2, #0
 8008626:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8008628:	2114      	movs	r1, #20
 800862a:	68b8      	ldr	r0, [r7, #8]
 800862c:	f7fb fbaa 	bl	8003d84 <pbuf_add_header>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d004      	beq.n	8008640 <tcp_create_segment+0xd8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8008636:	6938      	ldr	r0, [r7, #16]
 8008638:	f7fc ffc4 	bl	80055c4 <tcp_seg_free>
    return NULL;
 800863c:	2300      	movs	r3, #0
 800863e:	e037      	b.n	80086b0 <tcp_create_segment+0x148>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	691c      	ldr	r4, [r3, #16]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	8adb      	ldrh	r3, [r3, #22]
 8008652:	4618      	mov	r0, r3
 8008654:	f7f9 fa04 	bl	8001a60 <lwip_htons>
 8008658:	4603      	mov	r3, r0
 800865a:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	691c      	ldr	r4, [r3, #16]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8b1b      	ldrh	r3, [r3, #24]
 8008664:	4618      	mov	r0, r3
 8008666:	f7f9 f9fb 	bl	8001a60 <lwip_htons>
 800866a:	4603      	mov	r3, r0
 800866c:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	691c      	ldr	r4, [r3, #16]
 8008672:	6838      	ldr	r0, [r7, #0]
 8008674:	f7f9 fa09 	bl	8001a8a <lwip_htonl>
 8008678:	4603      	mov	r3, r0
 800867a:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	691c      	ldr	r4, [r3, #16]
 8008680:	7dfb      	ldrb	r3, [r7, #23]
 8008682:	089b      	lsrs	r3, r3, #2
 8008684:	b2db      	uxtb	r3, r3
 8008686:	b29b      	uxth	r3, r3
 8008688:	3305      	adds	r3, #5
 800868a:	b29b      	uxth	r3, r3
 800868c:	031b      	lsls	r3, r3, #12
 800868e:	b29a      	uxth	r2, r3
 8008690:	79fb      	ldrb	r3, [r7, #7]
 8008692:	b29b      	uxth	r3, r3
 8008694:	4313      	orrs	r3, r2
 8008696:	b29b      	uxth	r3, r3
 8008698:	4618      	mov	r0, r3
 800869a:	f7f9 f9e1 	bl	8001a60 <lwip_htons>
 800869e:	4603      	mov	r3, r0
 80086a0:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	2200      	movs	r2, #0
 80086a8:	749a      	strb	r2, [r3, #18]
 80086aa:	2200      	movs	r2, #0
 80086ac:	74da      	strb	r2, [r3, #19]
  return seg;
 80086ae:	693b      	ldr	r3, [r7, #16]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	371c      	adds	r7, #28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd90      	pop	{r4, r7, pc}
 80086b8:	08013178 	.word	0x08013178
 80086bc:	0801319c 	.word	0x0801319c
 80086c0:	080131bc 	.word	0x080131bc
 80086c4:	080131e4 	.word	0x080131e4
 80086c8:	08013208 	.word	0x08013208

080086cc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80086cc:	b5b0      	push	{r4, r5, r7, lr}
 80086ce:	b08a      	sub	sp, #40	; 0x28
 80086d0:	af02      	add	r7, sp, #8
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80086d8:	2300      	movs	r3, #0
 80086da:	61fb      	str	r3, [r7, #28]
 80086dc:	2300      	movs	r3, #0
 80086de:	613b      	str	r3, [r7, #16]
  struct pbuf *p = NULL;
 80086e0:	2300      	movs	r3, #0
 80086e2:	61bb      	str	r3, [r7, #24]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10b      	bne.n	8008702 <tcp_split_unsent_seg+0x36>
 80086ea:	4ba3      	ldr	r3, [pc, #652]	; (8008978 <tcp_split_unsent_seg+0x2ac>)
 80086ec:	f240 324e 	movw	r2, #846	; 0x34e
 80086f0:	49a2      	ldr	r1, [pc, #648]	; (800897c <tcp_split_unsent_seg+0x2b0>)
 80086f2:	48a3      	ldr	r0, [pc, #652]	; (8008980 <tcp_split_unsent_seg+0x2b4>)
 80086f4:	f007 ff2a 	bl	801054c <iprintf>
 80086f8:	2000      	movs	r0, #0
 80086fa:	f008 f829 	bl	8010750 <fflush>
 80086fe:	f007 ff6e 	bl	80105de <abort>

  useg = pcb->unsent;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008706:	613b      	str	r3, [r7, #16]
  if (useg == NULL) {
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d102      	bne.n	8008714 <tcp_split_unsent_seg+0x48>
    return ERR_MEM;
 800870e:	f04f 33ff 	mov.w	r3, #4294967295
 8008712:	e12d      	b.n	8008970 <tcp_split_unsent_seg+0x2a4>
  }

  if (split == 0) {
 8008714:	887b      	ldrh	r3, [r7, #2]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10b      	bne.n	8008732 <tcp_split_unsent_seg+0x66>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800871a:	4b97      	ldr	r3, [pc, #604]	; (8008978 <tcp_split_unsent_seg+0x2ac>)
 800871c:	f240 3256 	movw	r2, #854	; 0x356
 8008720:	4998      	ldr	r1, [pc, #608]	; (8008984 <tcp_split_unsent_seg+0x2b8>)
 8008722:	4897      	ldr	r0, [pc, #604]	; (8008980 <tcp_split_unsent_seg+0x2b4>)
 8008724:	f007 ff12 	bl	801054c <iprintf>
 8008728:	2000      	movs	r0, #0
 800872a:	f008 f811 	bl	8010750 <fflush>
 800872e:	f007 ff56 	bl	80105de <abort>
    return ERR_VAL;
  }

  if (useg->len <= split) {
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	891b      	ldrh	r3, [r3, #8]
 8008736:	887a      	ldrh	r2, [r7, #2]
 8008738:	429a      	cmp	r2, r3
 800873a:	d301      	bcc.n	8008740 <tcp_split_unsent_seg+0x74>
    return ERR_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	e117      	b.n	8008970 <tcp_split_unsent_seg+0x2a4>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008744:	887a      	ldrh	r2, [r7, #2]
 8008746:	429a      	cmp	r2, r3
 8008748:	d90b      	bls.n	8008762 <tcp_split_unsent_seg+0x96>
 800874a:	4b8b      	ldr	r3, [pc, #556]	; (8008978 <tcp_split_unsent_seg+0x2ac>)
 800874c:	f240 325e 	movw	r2, #862	; 0x35e
 8008750:	498d      	ldr	r1, [pc, #564]	; (8008988 <tcp_split_unsent_seg+0x2bc>)
 8008752:	488b      	ldr	r0, [pc, #556]	; (8008980 <tcp_split_unsent_seg+0x2b4>)
 8008754:	f007 fefa 	bl	801054c <iprintf>
 8008758:	2000      	movs	r0, #0
 800875a:	f007 fff9 	bl	8010750 <fflush>
 800875e:	f007 ff3e 	bl	80105de <abort>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	891b      	ldrh	r3, [r3, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10b      	bne.n	8008782 <tcp_split_unsent_seg+0xb6>
 800876a:	4b83      	ldr	r3, [pc, #524]	; (8008978 <tcp_split_unsent_seg+0x2ac>)
 800876c:	f240 325f 	movw	r2, #863	; 0x35f
 8008770:	4986      	ldr	r1, [pc, #536]	; (800898c <tcp_split_unsent_seg+0x2c0>)
 8008772:	4883      	ldr	r0, [pc, #524]	; (8008980 <tcp_split_unsent_seg+0x2b4>)
 8008774:	f007 feea 	bl	801054c <iprintf>
 8008778:	2000      	movs	r0, #0
 800877a:	f007 ffe9 	bl	8010750 <fflush>
 800877e:	f007 ff2e 	bl	80105de <abort>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	7b1b      	ldrb	r3, [r3, #12]
 8008786:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <tcp_split_unsent_seg+0xca>
 8008792:	2304      	movs	r3, #4
 8008794:	e000      	b.n	8008798 <tcp_split_unsent_seg+0xcc>
 8008796:	2300      	movs	r3, #0
 8008798:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	891a      	ldrh	r2, [r3, #8]
 800879e:	887b      	ldrh	r3, [r7, #2]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	89bb      	ldrh	r3, [r7, #12]
 80087aa:	4413      	add	r3, r2
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80087b2:	4619      	mov	r1, r3
 80087b4:	2036      	movs	r0, #54	; 0x36
 80087b6:	f7fb f8e1 	bl	800397c <pbuf_alloc>
 80087ba:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 80bc 	beq.w	800893c <tcp_split_unsent_seg+0x270>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	891a      	ldrh	r2, [r3, #8]
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	891b      	ldrh	r3, [r3, #8]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	887b      	ldrh	r3, [r7, #2]
 80087d4:	4413      	add	r3, r2
 80087d6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	6858      	ldr	r0, [r3, #4]
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	7bbb      	ldrb	r3, [r7, #14]
 80087e2:	18d1      	adds	r1, r2, r3
 80087e4:	897b      	ldrh	r3, [r7, #10]
 80087e6:	89ba      	ldrh	r2, [r7, #12]
 80087e8:	f7fb fdd6 	bl	8004398 <pbuf_copy_partial>
 80087ec:	4603      	mov	r3, r0
 80087ee:	461a      	mov	r2, r3
 80087f0:	89bb      	ldrh	r3, [r7, #12]
 80087f2:	4293      	cmp	r3, r2
 80087f4:	f040 80a4 	bne.w	8008940 <tcp_split_unsent_seg+0x274>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	899b      	ldrh	r3, [r3, #12]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	4618      	mov	r0, r3
 8008802:	f7f9 f92d 	bl	8001a60 <lwip_htons>
 8008806:	4603      	mov	r3, r0
 8008808:	b2db      	uxtb	r3, r3
 800880a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800880e:	75fb      	strb	r3, [r7, #23]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8008810:	2300      	movs	r3, #0
 8008812:	75bb      	strb	r3, [r7, #22]

  if (split_flags & TCP_PSH) {
 8008814:	7dfb      	ldrb	r3, [r7, #23]
 8008816:	f003 0308 	and.w	r3, r3, #8
 800881a:	2b00      	cmp	r3, #0
 800881c:	d007      	beq.n	800882e <tcp_split_unsent_seg+0x162>
    split_flags &= ~TCP_PSH;
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	f023 0308 	bic.w	r3, r3, #8
 8008824:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_PSH;
 8008826:	7dbb      	ldrb	r3, [r7, #22]
 8008828:	f043 0308 	orr.w	r3, r3, #8
 800882c:	75bb      	strb	r3, [r7, #22]
  }
  if (split_flags & TCP_FIN) {
 800882e:	7dfb      	ldrb	r3, [r7, #23]
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	2b00      	cmp	r3, #0
 8008836:	d007      	beq.n	8008848 <tcp_split_unsent_seg+0x17c>
    split_flags &= ~TCP_FIN;
 8008838:	7dfb      	ldrb	r3, [r7, #23]
 800883a:	f023 0301 	bic.w	r3, r3, #1
 800883e:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_FIN;
 8008840:	7dbb      	ldrb	r3, [r7, #22]
 8008842:	f043 0301 	orr.w	r3, r3, #1
 8008846:	75bb      	strb	r3, [r7, #22]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	4618      	mov	r0, r3
 8008850:	f7f9 f91b 	bl	8001a8a <lwip_htonl>
 8008854:	4602      	mov	r2, r0
 8008856:	887b      	ldrh	r3, [r7, #2]
 8008858:	18d1      	adds	r1, r2, r3
 800885a:	7dba      	ldrb	r2, [r7, #22]
 800885c:	7bfb      	ldrb	r3, [r7, #15]
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	460b      	mov	r3, r1
 8008862:	69b9      	ldr	r1, [r7, #24]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7ff fe7f 	bl	8008568 <tcp_create_segment>
 800886a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d102      	bne.n	8008878 <tcp_split_unsent_seg+0x1ac>
    p = NULL; /* Freed by tcp_create_segment */
 8008872:	2300      	movs	r3, #0
 8008874:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
 8008876:	e064      	b.n	8008942 <tcp_split_unsent_seg+0x276>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	4618      	mov	r0, r3
 800887e:	f7fb fb9d 	bl	8003fbc <pbuf_clen>
 8008882:	4603      	mov	r3, r0
 8008884:	461a      	mov	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800888c:	1a9b      	subs	r3, r3, r2
 800888e:	b29a      	uxth	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	6858      	ldr	r0, [r3, #4]
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	891a      	ldrh	r2, [r3, #8]
 80088a0:	89bb      	ldrh	r3, [r7, #12]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	4619      	mov	r1, r3
 80088a8:	f7fb f95a 	bl	8003b60 <pbuf_realloc>
  useg->len -= remainder;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	891a      	ldrh	r2, [r3, #8]
 80088b0:	89bb      	ldrh	r3, [r7, #12]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	691c      	ldr	r4, [r3, #16]
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	899b      	ldrh	r3, [r3, #12]
 80088c4:	b29d      	uxth	r5, r3
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7f9 f8c8 	bl	8001a60 <lwip_htons>
 80088d0:	4603      	mov	r3, r0
 80088d2:	432b      	orrs	r3, r5
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	81a3      	strh	r3, [r4, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	2200      	movs	r2, #0
 80088dc:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fb fb6a 	bl	8003fbc <pbuf_clen>
 80088e8:	4603      	mov	r3, r0
 80088ea:	461a      	mov	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80088f2:	4413      	add	r3, r2
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	4618      	mov	r0, r3
 8008902:	f7fb fb5b 	bl	8003fbc <pbuf_clen>
 8008906:	4603      	mov	r3, r0
 8008908:	461a      	mov	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008910:	4413      	add	r3, r2
 8008912:	b29a      	uxth	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	69fa      	ldr	r2, [r7, #28]
 8008926:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d103      	bne.n	8008938 <tcp_split_unsent_seg+0x26c>
    pcb->unsent_oversize = 0;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	e019      	b.n	8008970 <tcp_split_unsent_seg+0x2a4>
    goto memerr;
 800893c:	bf00      	nop
 800893e:	e000      	b.n	8008942 <tcp_split_unsent_seg+0x276>
    goto memerr;
 8008940:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00b      	beq.n	8008960 <tcp_split_unsent_seg+0x294>
 8008948:	4b0b      	ldr	r3, [pc, #44]	; (8008978 <tcp_split_unsent_seg+0x2ac>)
 800894a:	f44f 7277 	mov.w	r2, #988	; 0x3dc
 800894e:	4910      	ldr	r1, [pc, #64]	; (8008990 <tcp_split_unsent_seg+0x2c4>)
 8008950:	480b      	ldr	r0, [pc, #44]	; (8008980 <tcp_split_unsent_seg+0x2b4>)
 8008952:	f007 fdfb 	bl	801054c <iprintf>
 8008956:	2000      	movs	r0, #0
 8008958:	f007 fefa 	bl	8010750 <fflush>
 800895c:	f007 fe3f 	bl	80105de <abort>
  if (p != NULL) {
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d002      	beq.n	800896c <tcp_split_unsent_seg+0x2a0>
    pbuf_free(p);
 8008966:	69b8      	ldr	r0, [r7, #24]
 8008968:	f7fb faa6 	bl	8003eb8 <pbuf_free>
  }

  return ERR_MEM;
 800896c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008970:	4618      	mov	r0, r3
 8008972:	3720      	adds	r7, #32
 8008974:	46bd      	mov	sp, r7
 8008976:	bdb0      	pop	{r4, r5, r7, pc}
 8008978:	08013178 	.word	0x08013178
 800897c:	08013558 	.word	0x08013558
 8008980:	080131bc 	.word	0x080131bc
 8008984:	0801357c 	.word	0x0801357c
 8008988:	080135a0 	.word	0x080135a0
 800898c:	080135b0 	.word	0x080135b0
 8008990:	080135c0 	.word	0x080135c0

08008994 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8008994:	b5b0      	push	{r4, r5, r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10b      	bne.n	80089ba <tcp_send_fin+0x26>
 80089a2:	4b23      	ldr	r3, [pc, #140]	; (8008a30 <tcp_send_fin+0x9c>)
 80089a4:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80089a8:	4922      	ldr	r1, [pc, #136]	; (8008a34 <tcp_send_fin+0xa0>)
 80089aa:	4823      	ldr	r0, [pc, #140]	; (8008a38 <tcp_send_fin+0xa4>)
 80089ac:	f007 fdce 	bl	801054c <iprintf>
 80089b0:	2000      	movs	r0, #0
 80089b2:	f007 fecd 	bl	8010750 <fflush>
 80089b6:	f007 fe12 	bl	80105de <abort>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d02d      	beq.n	8008a1e <tcp_send_fin+0x8a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	e002      	b.n	80089d0 <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1f8      	bne.n	80089ca <tcp_send_fin+0x36>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	899b      	ldrh	r3, [r3, #12]
 80089de:	b29b      	uxth	r3, r3
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7f9 f83d 	bl	8001a60 <lwip_htons>
 80089e6:	4603      	mov	r3, r0
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	f003 0307 	and.w	r3, r3, #7
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d115      	bne.n	8008a1e <tcp_send_fin+0x8a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	691c      	ldr	r4, [r3, #16]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	899b      	ldrh	r3, [r3, #12]
 80089fc:	b29d      	uxth	r5, r3
 80089fe:	2001      	movs	r0, #1
 8008a00:	f7f9 f82e 	bl	8001a60 <lwip_htons>
 8008a04:	4603      	mov	r3, r0
 8008a06:	432b      	orrs	r3, r5
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	81a3      	strh	r3, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	8b5b      	ldrh	r3, [r3, #26]
 8008a10:	f043 0320 	orr.w	r3, r3, #32
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	e004      	b.n	8008a28 <tcp_send_fin+0x94>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008a1e:	2101      	movs	r1, #1
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f80b 	bl	8008a3c <tcp_enqueue_flags>
 8008a26:	4603      	mov	r3, r0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8008a30:	08013178 	.word	0x08013178
 8008a34:	080135cc 	.word	0x080135cc
 8008a38:	080131bc 	.word	0x080131bc

08008a3c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b08a      	sub	sp, #40	; 0x28
 8008a40:	af02      	add	r7, sp, #8
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008a50:	78fb      	ldrb	r3, [r7, #3]
 8008a52:	f003 0303 	and.w	r3, r3, #3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10b      	bne.n	8008a72 <tcp_enqueue_flags+0x36>
 8008a5a:	4b6e      	ldr	r3, [pc, #440]	; (8008c14 <tcp_enqueue_flags+0x1d8>)
 8008a5c:	f240 4214 	movw	r2, #1044	; 0x414
 8008a60:	496d      	ldr	r1, [pc, #436]	; (8008c18 <tcp_enqueue_flags+0x1dc>)
 8008a62:	486e      	ldr	r0, [pc, #440]	; (8008c1c <tcp_enqueue_flags+0x1e0>)
 8008a64:	f007 fd72 	bl	801054c <iprintf>
 8008a68:	2000      	movs	r0, #0
 8008a6a:	f007 fe71 	bl	8010750 <fflush>
 8008a6e:	f007 fdb6 	bl	80105de <abort>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10b      	bne.n	8008a90 <tcp_enqueue_flags+0x54>
 8008a78:	4b66      	ldr	r3, [pc, #408]	; (8008c14 <tcp_enqueue_flags+0x1d8>)
 8008a7a:	f240 4215 	movw	r2, #1045	; 0x415
 8008a7e:	4968      	ldr	r1, [pc, #416]	; (8008c20 <tcp_enqueue_flags+0x1e4>)
 8008a80:	4866      	ldr	r0, [pc, #408]	; (8008c1c <tcp_enqueue_flags+0x1e0>)
 8008a82:	f007 fd63 	bl	801054c <iprintf>
 8008a86:	2000      	movs	r0, #0
 8008a88:	f007 fe62 	bl	8010750 <fflush>
 8008a8c:	f007 fda7 	bl	80105de <abort>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8008a90:	78fb      	ldrb	r3, [r7, #3]
 8008a92:	f003 0302 	and.w	r3, r3, #2
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <tcp_enqueue_flags+0x62>
    optflags = TF_SEG_OPTS_MSS;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8008a9e:	7ffb      	ldrb	r3, [r7, #31]
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <tcp_enqueue_flags+0x70>
 8008aa8:	2304      	movs	r3, #4
 8008aaa:	e000      	b.n	8008aae <tcp_enqueue_flags+0x72>
 8008aac:	2300      	movs	r3, #0
 8008aae:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008ab0:	7dfb      	ldrb	r3, [r7, #23]
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008ab8:	4619      	mov	r1, r3
 8008aba:	2036      	movs	r0, #54	; 0x36
 8008abc:	f7fa ff5e 	bl	800397c <pbuf_alloc>
 8008ac0:	6138      	str	r0, [r7, #16]
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d109      	bne.n	8008adc <tcp_enqueue_flags+0xa0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	8b5b      	ldrh	r3, [r3, #26]
 8008acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8008ada:	e097      	b.n	8008c0c <tcp_enqueue_flags+0x1d0>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	895a      	ldrh	r2, [r3, #10]
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d20b      	bcs.n	8008b00 <tcp_enqueue_flags+0xc4>
 8008ae8:	4b4a      	ldr	r3, [pc, #296]	; (8008c14 <tcp_enqueue_flags+0x1d8>)
 8008aea:	f240 423e 	movw	r2, #1086	; 0x43e
 8008aee:	494d      	ldr	r1, [pc, #308]	; (8008c24 <tcp_enqueue_flags+0x1e8>)
 8008af0:	484a      	ldr	r0, [pc, #296]	; (8008c1c <tcp_enqueue_flags+0x1e0>)
 8008af2:	f007 fd2b 	bl	801054c <iprintf>
 8008af6:	2000      	movs	r0, #0
 8008af8:	f007 fe2a 	bl	8010750 <fflush>
 8008afc:	f007 fd6f 	bl	80105de <abort>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8008b04:	78fa      	ldrb	r2, [r7, #3]
 8008b06:	7ffb      	ldrb	r3, [r7, #31]
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	6939      	ldr	r1, [r7, #16]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7ff fd2a 	bl	8008568 <tcp_create_segment>
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d109      	bne.n	8008b30 <tcp_enqueue_flags+0xf4>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	8b5b      	ldrh	r3, [r3, #26]
 8008b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b2e:	e06d      	b.n	8008c0c <tcp_enqueue_flags+0x1d0>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	891b      	ldrh	r3, [r3, #8]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00b      	beq.n	8008b50 <tcp_enqueue_flags+0x114>
 8008b38:	4b36      	ldr	r3, [pc, #216]	; (8008c14 <tcp_enqueue_flags+0x1d8>)
 8008b3a:	f240 4247 	movw	r2, #1095	; 0x447
 8008b3e:	493a      	ldr	r1, [pc, #232]	; (8008c28 <tcp_enqueue_flags+0x1ec>)
 8008b40:	4836      	ldr	r0, [pc, #216]	; (8008c1c <tcp_enqueue_flags+0x1e0>)
 8008b42:	f007 fd03 	bl	801054c <iprintf>
 8008b46:	2000      	movs	r0, #0
 8008b48:	f007 fe02 	bl	8010750 <fflush>
 8008b4c:	f007 fd47 	bl	80105de <abort>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d103      	bne.n	8008b60 <tcp_enqueue_flags+0x124>
    pcb->unsent = seg;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	66da      	str	r2, [r3, #108]	; 0x6c
 8008b5e:	e00d      	b.n	8008b7c <tcp_enqueue_flags+0x140>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b64:	61bb      	str	r3, [r7, #24]
 8008b66:	e002      	b.n	8008b6e <tcp_enqueue_flags+0x132>
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	61bb      	str	r3, [r7, #24]
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1f8      	bne.n	8008b68 <tcp_enqueue_flags+0x12c>
    useg->next = seg;
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8008b84:	78fb      	ldrb	r3, [r7, #3]
 8008b86:	f003 0302 	and.w	r3, r3, #2
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d104      	bne.n	8008b98 <tcp_enqueue_flags+0x15c>
 8008b8e:	78fb      	ldrb	r3, [r7, #3]
 8008b90:	f003 0301 	and.w	r3, r3, #1
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d004      	beq.n	8008ba2 <tcp_enqueue_flags+0x166>
    pcb->snd_lbb++;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b9c:	1c5a      	adds	r2, r3, #1
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8008ba2:	78fb      	ldrb	r3, [r7, #3]
 8008ba4:	f003 0301 	and.w	r3, r3, #1
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d006      	beq.n	8008bba <tcp_enqueue_flags+0x17e>
    tcp_set_flags(pcb, TF_FIN);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	8b5b      	ldrh	r3, [r3, #26]
 8008bb0:	f043 0320 	orr.w	r3, r3, #32
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fb f9fc 	bl	8003fbc <pbuf_clen>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008bce:	4413      	add	r3, r2
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d013      	beq.n	8008c0a <tcp_enqueue_flags+0x1ce>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10f      	bne.n	8008c0a <tcp_enqueue_flags+0x1ce>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10b      	bne.n	8008c0a <tcp_enqueue_flags+0x1ce>
 8008bf2:	4b08      	ldr	r3, [pc, #32]	; (8008c14 <tcp_enqueue_flags+0x1d8>)
 8008bf4:	f240 426a 	movw	r2, #1130	; 0x46a
 8008bf8:	490c      	ldr	r1, [pc, #48]	; (8008c2c <tcp_enqueue_flags+0x1f0>)
 8008bfa:	4808      	ldr	r0, [pc, #32]	; (8008c1c <tcp_enqueue_flags+0x1e0>)
 8008bfc:	f007 fca6 	bl	801054c <iprintf>
 8008c00:	2000      	movs	r0, #0
 8008c02:	f007 fda5 	bl	8010750 <fflush>
 8008c06:	f007 fcea 	bl	80105de <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3720      	adds	r7, #32
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	08013178 	.word	0x08013178
 8008c18:	080135e8 	.word	0x080135e8
 8008c1c:	080131bc 	.word	0x080131bc
 8008c20:	08013640 	.word	0x08013640
 8008c24:	08013660 	.word	0x08013660
 8008c28:	0801369c 	.word	0x0801369c
 8008c2c:	080136c8 	.word	0x080136c8

08008c30 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8008c30:	b5b0      	push	{r4, r5, r7, lr}
 8008c32:	b08a      	sub	sp, #40	; 0x28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10b      	bne.n	8008c56 <tcp_output+0x26>
 8008c3e:	4ba9      	ldr	r3, [pc, #676]	; (8008ee4 <tcp_output+0x2b4>)
 8008c40:	f240 42e5 	movw	r2, #1253	; 0x4e5
 8008c44:	49a8      	ldr	r1, [pc, #672]	; (8008ee8 <tcp_output+0x2b8>)
 8008c46:	48a9      	ldr	r0, [pc, #676]	; (8008eec <tcp_output+0x2bc>)
 8008c48:	f007 fc80 	bl	801054c <iprintf>
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	f007 fd7f 	bl	8010750 <fflush>
 8008c52:	f007 fcc4 	bl	80105de <abort>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	7d1b      	ldrb	r3, [r3, #20]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d10b      	bne.n	8008c76 <tcp_output+0x46>
 8008c5e:	4ba1      	ldr	r3, [pc, #644]	; (8008ee4 <tcp_output+0x2b4>)
 8008c60:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
 8008c64:	49a2      	ldr	r1, [pc, #648]	; (8008ef0 <tcp_output+0x2c0>)
 8008c66:	48a1      	ldr	r0, [pc, #644]	; (8008eec <tcp_output+0x2bc>)
 8008c68:	f007 fc70 	bl	801054c <iprintf>
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	f007 fd6f 	bl	8010750 <fflush>
 8008c72:	f007 fcb4 	bl	80105de <abort>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8008c76:	4b9f      	ldr	r3, [pc, #636]	; (8008ef4 <tcp_output+0x2c4>)
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d101      	bne.n	8008c84 <tcp_output+0x54>
    return ERR_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	e1d8      	b.n	8009036 <tcp_output+0x406>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d203      	bcs.n	8008c9c <tcp_output+0x6c>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c9a:	e002      	b.n	8008ca2 <tcp_output+0x72>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008ca2:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ca8:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10b      	bne.n	8008cc8 <tcp_output+0x98>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	8b5b      	ldrh	r3, [r3, #26]
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 81b1 	beq.w	8009020 <tcp_output+0x3f0>
      return tcp_send_empty_ack(pcb);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fed2 	bl	8009a68 <tcp_send_empty_ack>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	e1b6      	b.n	8009036 <tcp_output+0x406>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8008cc8:	6879      	ldr	r1, [r7, #4]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	3304      	adds	r3, #4
 8008cce:	461a      	mov	r2, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7ff fc2d 	bl	8008530 <tcp_route>
 8008cd6:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d102      	bne.n	8008ce4 <tcp_output+0xb4>
    return ERR_RTE;
 8008cde:	f06f 0303 	mvn.w	r3, #3
 8008ce2:	e1a8      	b.n	8009036 <tcp_output+0x406>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d003      	beq.n	8008cf2 <tcp_output+0xc2>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d111      	bne.n	8008d16 <tcp_output+0xe6>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d002      	beq.n	8008cfe <tcp_output+0xce>
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	e000      	b.n	8008d00 <tcp_output+0xd0>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d102      	bne.n	8008d0e <tcp_output+0xde>
      return ERR_RTE;
 8008d08:	f06f 0303 	mvn.w	r3, #3
 8008d0c:	e193      	b.n	8009036 <tcp_output+0x406>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8008d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7f8 feb4 	bl	8001a8a <lwip_htonl>
 8008d22:	4602      	mov	r2, r0
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d2c:	8912      	ldrh	r2, [r2, #8]
 8008d2e:	441a      	add	r2, r3
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d927      	bls.n	8008d86 <tcp_output+0x156>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d114      	bne.n	8008d6e <tcp_output+0x13e>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d110      	bne.n	8008d6e <tcp_output+0x13e>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10b      	bne.n	8008d6e <tcp_output+0x13e>
      pcb->persist_cnt = 0;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	8b5b      	ldrh	r3, [r3, #26]
 8008d72:	f003 0302 	and.w	r3, r3, #2
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f000 8154 	beq.w	8009024 <tcp_output+0x3f4>
      return tcp_send_empty_ack(pcb);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fe73 	bl	8009a68 <tcp_send_empty_ack>
 8008d82:	4603      	mov	r3, r0
 8008d84:	e157      	b.n	8009036 <tcp_output+0x406>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d92:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f000 8123 	beq.w	8008fe2 <tcp_output+0x3b2>
    for (; useg->next != NULL; useg = useg->next);
 8008d9c:	e002      	b.n	8008da4 <tcp_output+0x174>
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	623b      	str	r3, [r7, #32]
 8008da4:	6a3b      	ldr	r3, [r7, #32]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1f8      	bne.n	8008d9e <tcp_output+0x16e>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8008dac:	e119      	b.n	8008fe2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	899b      	ldrh	r3, [r3, #12]
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7f8 fe52 	bl	8001a60 <lwip_htons>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	f003 0304 	and.w	r3, r3, #4
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00b      	beq.n	8008de0 <tcp_output+0x1b0>
 8008dc8:	4b46      	ldr	r3, [pc, #280]	; (8008ee4 <tcp_output+0x2b4>)
 8008dca:	f240 523b 	movw	r2, #1339	; 0x53b
 8008dce:	494a      	ldr	r1, [pc, #296]	; (8008ef8 <tcp_output+0x2c8>)
 8008dd0:	4846      	ldr	r0, [pc, #280]	; (8008eec <tcp_output+0x2bc>)
 8008dd2:	f007 fbbb 	bl	801054c <iprintf>
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	f007 fcba 	bl	8010750 <fflush>
 8008ddc:	f007 fbff 	bl	80105de <abort>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d01f      	beq.n	8008e28 <tcp_output+0x1f8>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	8b5b      	ldrh	r3, [r3, #26]
 8008dec:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d119      	bne.n	8008e28 <tcp_output+0x1f8>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00b      	beq.n	8008e14 <tcp_output+0x1e4>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d110      	bne.n	8008e28 <tcp_output+0x1f8>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e0a:	891a      	ldrh	r2, [r3, #8]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d209      	bcs.n	8008e28 <tcp_output+0x1f8>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d004      	beq.n	8008e28 <tcp_output+0x1f8>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008e24:	2b03      	cmp	r3, #3
 8008e26:	d901      	bls.n	8008e2c <tcp_output+0x1fc>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e000      	b.n	8008e2e <tcp_output+0x1fe>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d106      	bne.n	8008e40 <tcp_output+0x210>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	8b5b      	ldrh	r3, [r3, #26]
 8008e36:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f000 80e6 	beq.w	800900c <tcp_output+0x3dc>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	7d1b      	ldrb	r3, [r3, #20]
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d00c      	beq.n	8008e62 <tcp_output+0x232>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	691c      	ldr	r4, [r3, #16]
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	899b      	ldrh	r3, [r3, #12]
 8008e52:	b29d      	uxth	r5, r3
 8008e54:	2010      	movs	r0, #16
 8008e56:	f7f8 fe03 	bl	8001a60 <lwip_htons>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	432b      	orrs	r3, r5
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	81a3      	strh	r3, [r4, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	6879      	ldr	r1, [r7, #4]
 8008e66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e68:	f000 f910 	bl	800908c <tcp_output_segment>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8008e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d009      	beq.n	8008e8c <tcp_output+0x25c>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	8b5b      	ldrh	r3, [r3, #26]
 8008e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	835a      	strh	r2, [r3, #26]
      return err;
 8008e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e8a:	e0d4      	b.n	8009036 <tcp_output+0x406>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8008e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8e:	2200      	movs	r2, #0
 8008e90:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8008e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	7d1b      	ldrb	r3, [r3, #20]
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d006      	beq.n	8008eb0 <tcp_output+0x280>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	8b5b      	ldrh	r3, [r3, #26]
 8008ea6:	f023 0303 	bic.w	r3, r3, #3
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7f8 fde7 	bl	8001a8a <lwip_htonl>
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	891b      	ldrh	r3, [r3, #8]
 8008ec2:	461d      	mov	r5, r3
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	899b      	ldrh	r3, [r3, #12]
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7f8 fdc7 	bl	8001a60 <lwip_htons>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00e      	beq.n	8008efc <tcp_output+0x2cc>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e00d      	b.n	8008efe <tcp_output+0x2ce>
 8008ee2:	bf00      	nop
 8008ee4:	08013178 	.word	0x08013178
 8008ee8:	080136f0 	.word	0x080136f0
 8008eec:	080131bc 	.word	0x080131bc
 8008ef0:	08013708 	.word	0x08013708
 8008ef4:	200015e0 	.word	0x200015e0
 8008ef8:	08013730 	.word	0x08013730
 8008efc:	2300      	movs	r3, #0
 8008efe:	442b      	add	r3, r5
 8008f00:	4423      	add	r3, r4
 8008f02:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	da02      	bge.n	8008f16 <tcp_output+0x2e6>
      pcb->snd_nxt = snd_nxt;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	891b      	ldrh	r3, [r3, #8]
 8008f1a:	461c      	mov	r4, r3
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	899b      	ldrh	r3, [r3, #12]
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7f8 fd9b 	bl	8001a60 <lwip_htons>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	f003 0303 	and.w	r3, r3, #3
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <tcp_output+0x30a>
 8008f36:	2301      	movs	r3, #1
 8008f38:	e000      	b.n	8008f3c <tcp_output+0x30c>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	4423      	add	r3, r4
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d049      	beq.n	8008fd6 <tcp_output+0x3a6>
      seg->next = NULL;
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d105      	bne.n	8008f5c <tcp_output+0x32c>
        pcb->unacked = seg;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f54:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8008f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f58:	623b      	str	r3, [r7, #32]
 8008f5a:	e03f      	b.n	8008fdc <tcp_output+0x3ac>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7f8 fd91 	bl	8001a8a <lwip_htonl>
 8008f68:	4604      	mov	r4, r0
 8008f6a:	6a3b      	ldr	r3, [r7, #32]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7f8 fd8a 	bl	8001a8a <lwip_htonl>
 8008f76:	4603      	mov	r3, r0
 8008f78:	1ae3      	subs	r3, r4, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	da24      	bge.n	8008fc8 <tcp_output+0x398>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	3370      	adds	r3, #112	; 0x70
 8008f82:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8008f84:	e002      	b.n	8008f8c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d011      	beq.n	8008fb8 <tcp_output+0x388>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7f8 fd74 	bl	8001a8a <lwip_htonl>
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7f8 fd6d 	bl	8001a8a <lwip_htonl>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	dbe6      	blt.n	8008f86 <tcp_output+0x356>
          }
          seg->next = (*cur_seg);
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	e009      	b.n	8008fdc <tcp_output+0x3ac>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fcc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	623b      	str	r3, [r7, #32]
 8008fd4:	e002      	b.n	8008fdc <tcp_output+0x3ac>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8008fd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fd8:	f7fc faf4 	bl	80055c4 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fe0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d012      	beq.n	800900e <tcp_output+0x3de>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7f8 fd4b 	bl	8001a8a <lwip_htonl>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ffe:	8912      	ldrh	r2, [r2, #8]
 8009000:	441a      	add	r2, r3
  while (seg != NULL &&
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	429a      	cmp	r2, r3
 8009006:	f67f aed2 	bls.w	8008dae <tcp_output+0x17e>
 800900a:	e000      	b.n	800900e <tcp_output+0x3de>
      break;
 800900c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009012:	2b00      	cmp	r3, #0
 8009014:	d107      	bne.n	8009026 <tcp_output+0x3f6>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800901e:	e002      	b.n	8009026 <tcp_output+0x3f6>
    goto output_done;
 8009020:	bf00      	nop
 8009022:	e000      	b.n	8009026 <tcp_output+0x3f6>
    goto output_done;
 8009024:	bf00      	nop
  }
#endif /* TCP_OVERSIZE */

output_done:
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	8b5b      	ldrh	r3, [r3, #26]
 800902a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800902e:	b29a      	uxth	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3728      	adds	r7, #40	; 0x28
 800903a:	46bd      	mov	sp, r7
 800903c:	bdb0      	pop	{r4, r5, r7, pc}
 800903e:	bf00      	nop

08009040 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10b      	bne.n	8009066 <tcp_output_segment_busy+0x26>
 800904e:	4b0c      	ldr	r3, [pc, #48]	; (8009080 <tcp_output_segment_busy+0x40>)
 8009050:	f240 529e 	movw	r2, #1438	; 0x59e
 8009054:	490b      	ldr	r1, [pc, #44]	; (8009084 <tcp_output_segment_busy+0x44>)
 8009056:	480c      	ldr	r0, [pc, #48]	; (8009088 <tcp_output_segment_busy+0x48>)
 8009058:	f007 fa78 	bl	801054c <iprintf>
 800905c:	2000      	movs	r0, #0
 800905e:	f007 fb77 	bl	8010750 <fflush>
 8009062:	f007 fabc 	bl	80105de <abort>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	7b9b      	ldrb	r3, [r3, #14]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d001      	beq.n	8009074 <tcp_output_segment_busy+0x34>
    /* other reference found */
    return 1;
 8009070:	2301      	movs	r3, #1
 8009072:	e000      	b.n	8009076 <tcp_output_segment_busy+0x36>
  }
  /* no other references found */
  return 0;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	08013178 	.word	0x08013178
 8009084:	08013748 	.word	0x08013748
 8009088:	080131bc 	.word	0x080131bc

0800908c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800908c:	b5b0      	push	{r4, r5, r7, lr}
 800908e:	b08c      	sub	sp, #48	; 0x30
 8009090:	af04      	add	r7, sp, #16
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10b      	bne.n	80090b6 <tcp_output_segment+0x2a>
 800909e:	4b78      	ldr	r3, [pc, #480]	; (8009280 <tcp_output_segment+0x1f4>)
 80090a0:	f240 52bc 	movw	r2, #1468	; 0x5bc
 80090a4:	4977      	ldr	r1, [pc, #476]	; (8009284 <tcp_output_segment+0x1f8>)
 80090a6:	4878      	ldr	r0, [pc, #480]	; (8009288 <tcp_output_segment+0x1fc>)
 80090a8:	f007 fa50 	bl	801054c <iprintf>
 80090ac:	2000      	movs	r0, #0
 80090ae:	f007 fb4f 	bl	8010750 <fflush>
 80090b2:	f007 fa94 	bl	80105de <abort>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d10b      	bne.n	80090d4 <tcp_output_segment+0x48>
 80090bc:	4b70      	ldr	r3, [pc, #448]	; (8009280 <tcp_output_segment+0x1f4>)
 80090be:	f240 52bd 	movw	r2, #1469	; 0x5bd
 80090c2:	4972      	ldr	r1, [pc, #456]	; (800928c <tcp_output_segment+0x200>)
 80090c4:	4870      	ldr	r0, [pc, #448]	; (8009288 <tcp_output_segment+0x1fc>)
 80090c6:	f007 fa41 	bl	801054c <iprintf>
 80090ca:	2000      	movs	r0, #0
 80090cc:	f007 fb40 	bl	8010750 <fflush>
 80090d0:	f007 fa85 	bl	80105de <abort>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10b      	bne.n	80090f2 <tcp_output_segment+0x66>
 80090da:	4b69      	ldr	r3, [pc, #420]	; (8009280 <tcp_output_segment+0x1f4>)
 80090dc:	f240 52be 	movw	r2, #1470	; 0x5be
 80090e0:	496b      	ldr	r1, [pc, #428]	; (8009290 <tcp_output_segment+0x204>)
 80090e2:	4869      	ldr	r0, [pc, #420]	; (8009288 <tcp_output_segment+0x1fc>)
 80090e4:	f007 fa32 	bl	801054c <iprintf>
 80090e8:	2000      	movs	r0, #0
 80090ea:	f007 fb31 	bl	8010750 <fflush>
 80090ee:	f007 fa76 	bl	80105de <abort>

  if (tcp_output_segment_busy(seg)) {
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f7ff ffa4 	bl	8009040 <tcp_output_segment_busy>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d001      	beq.n	8009102 <tcp_output_segment+0x76>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	e0ba      	b.n	8009278 <tcp_output_segment+0x1ec>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	691c      	ldr	r4, [r3, #16]
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	4618      	mov	r0, r3
 800910c:	f7f8 fcbd 	bl	8001a8a <lwip_htonl>
 8009110:	4603      	mov	r3, r0
 8009112:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	691c      	ldr	r4, [r3, #16]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800911c:	4618      	mov	r0, r3
 800911e:	f7f8 fc9f 	bl	8001a60 <lwip_htons>
 8009122:	4603      	mov	r3, r0
 8009124:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800912e:	441a      	add	r2, r3
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	3314      	adds	r3, #20
 800913a:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	7b1b      	ldrb	r3, [r3, #12]
 8009140:	f003 0301 	and.w	r3, r3, #1
 8009144:	2b00      	cmp	r3, #0
 8009146:	d015      	beq.n	8009174 <tcp_output_segment+0xe8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	3304      	adds	r3, #4
 800914c:	461a      	mov	r2, r3
 800914e:	6879      	ldr	r1, [r7, #4]
 8009150:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009154:	f7fc fd54 	bl	8005c00 <tcp_eff_send_mss_netif>
 8009158:	4603      	mov	r3, r0
 800915a:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800915c:	8b7b      	ldrh	r3, [r7, #26]
 800915e:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8009162:	4618      	mov	r0, r3
 8009164:	f7f8 fc91 	bl	8001a8a <lwip_htonl>
 8009168:	4602      	mov	r2, r0
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	601a      	str	r2, [r3, #0]
    opts += 1;
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	3304      	adds	r3, #4
 8009172:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800917a:	2b00      	cmp	r3, #0
 800917c:	da02      	bge.n	8009184 <tcp_output_segment+0xf8>
    pcb->rtime = 0;
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	2200      	movs	r2, #0
 8009182:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10c      	bne.n	80091a6 <tcp_output_segment+0x11a>
    pcb->rttest = tcp_ticks;
 800918c:	4b41      	ldr	r3, [pc, #260]	; (8009294 <tcp_output_segment+0x208>)
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	4618      	mov	r0, r3
 800919c:	f7f8 fc75 	bl	8001a8a <lwip_htonl>
 80091a0:	4602      	mov	r2, r0
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	461a      	mov	r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	6852      	ldr	r2, [r2, #4]
 80091be:	8951      	ldrh	r1, [r2, #10]
 80091c0:	8b3a      	ldrh	r2, [r7, #24]
 80091c2:	1a8a      	subs	r2, r1, r2
 80091c4:	b292      	uxth	r2, r2
 80091c6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	6852      	ldr	r2, [r2, #4]
 80091d0:	8911      	ldrh	r1, [r2, #8]
 80091d2:	8b3a      	ldrh	r2, [r7, #24]
 80091d4:	1a8a      	subs	r2, r1, r2
 80091d6:	b292      	uxth	r2, r2
 80091d8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	6912      	ldr	r2, [r2, #16]
 80091e2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	2200      	movs	r2, #0
 80091ea:	741a      	strb	r2, [r3, #16]
 80091ec:	2200      	movs	r2, #0
 80091ee:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	f103 0214 	add.w	r2, r3, #20
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	7b1b      	ldrb	r3, [r3, #12]
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <tcp_output_segment+0x17c>
 8009204:	2304      	movs	r3, #4
 8009206:	e000      	b.n	800920a <tcp_output_segment+0x17e>
 8009208:	2300      	movs	r3, #0
 800920a:	441a      	add	r2, r3
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	429a      	cmp	r2, r3
 8009210:	d00b      	beq.n	800922a <tcp_output_segment+0x19e>
 8009212:	4b1b      	ldr	r3, [pc, #108]	; (8009280 <tcp_output_segment+0x1f4>)
 8009214:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 8009218:	491f      	ldr	r1, [pc, #124]	; (8009298 <tcp_output_segment+0x20c>)
 800921a:	481b      	ldr	r0, [pc, #108]	; (8009288 <tcp_output_segment+0x1fc>)
 800921c:	f007 f996 	bl	801054c <iprintf>
 8009220:	2000      	movs	r0, #0
 8009222:	f007 fa95 	bl	8010750 <fflush>
 8009226:	f007 f9da 	bl	80105de <abort>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	691c      	ldr	r4, [r3, #16]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8009236:	891a      	ldrh	r2, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8009238:	68b9      	ldr	r1, [r7, #8]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	460b      	mov	r3, r1
 8009242:	2106      	movs	r1, #6
 8009244:	f7f8 fd3e 	bl	8001cc4 <ip_chksum_pseudo>
 8009248:	4603      	mov	r3, r0
 800924a:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6858      	ldr	r0, [r3, #4]
 8009250:	68b9      	ldr	r1, [r7, #8]
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	1d1c      	adds	r4, r3, #4
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	7add      	ldrb	r5, [r3, #11]
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	7a9b      	ldrb	r3, [r3, #10]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	9202      	str	r2, [sp, #8]
 8009262:	2206      	movs	r2, #6
 8009264:	9201      	str	r2, [sp, #4]
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	462b      	mov	r3, r5
 800926a:	4622      	mov	r2, r4
 800926c:	f7f9 f934 	bl	80024d8 <ip4_output_if>
 8009270:	4603      	mov	r3, r0
 8009272:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8009274:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3720      	adds	r7, #32
 800927c:	46bd      	mov	sp, r7
 800927e:	bdb0      	pop	{r4, r5, r7, pc}
 8009280:	08013178 	.word	0x08013178
 8009284:	08013770 	.word	0x08013770
 8009288:	080131bc 	.word	0x080131bc
 800928c:	08013790 	.word	0x08013790
 8009290:	080137b0 	.word	0x080137b0
 8009294:	200015d0 	.word	0x200015d0
 8009298:	080137d4 	.word	0x080137d4

0800929c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800929c:	b5b0      	push	{r4, r5, r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10b      	bne.n	80092c2 <tcp_rexmit_rto_prepare+0x26>
 80092aa:	4b38      	ldr	r3, [pc, #224]	; (800938c <tcp_rexmit_rto_prepare+0xf0>)
 80092ac:	f240 6267 	movw	r2, #1639	; 0x667
 80092b0:	4937      	ldr	r1, [pc, #220]	; (8009390 <tcp_rexmit_rto_prepare+0xf4>)
 80092b2:	4838      	ldr	r0, [pc, #224]	; (8009394 <tcp_rexmit_rto_prepare+0xf8>)
 80092b4:	f007 f94a 	bl	801054c <iprintf>
 80092b8:	2000      	movs	r0, #0
 80092ba:	f007 fa49 	bl	8010750 <fflush>
 80092be:	f007 f98e 	bl	80105de <abort>

  if (pcb->unacked == NULL) {
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d102      	bne.n	80092d0 <tcp_rexmit_rto_prepare+0x34>
    return ERR_VAL;
 80092ca:	f06f 0305 	mvn.w	r3, #5
 80092ce:	e059      	b.n	8009384 <tcp_rexmit_rto_prepare+0xe8>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d4:	60fb      	str	r3, [r7, #12]
 80092d6:	e00b      	b.n	80092f0 <tcp_rexmit_rto_prepare+0x54>
    if (tcp_output_segment_busy(seg)) {
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f7ff feb1 	bl	8009040 <tcp_output_segment_busy>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d002      	beq.n	80092ea <tcp_rexmit_rto_prepare+0x4e>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80092e4:	f06f 0305 	mvn.w	r3, #5
 80092e8:	e04c      	b.n	8009384 <tcp_rexmit_rto_prepare+0xe8>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	60fb      	str	r3, [r7, #12]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1ef      	bne.n	80092d8 <tcp_rexmit_rto_prepare+0x3c>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f7ff fea1 	bl	8009040 <tcp_output_segment_busy>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <tcp_rexmit_rto_prepare+0x6e>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8009304:	f06f 0305 	mvn.w	r3, #5
 8009308:	e03c      	b.n	8009384 <tcp_rexmit_rto_prepare+0xe8>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009316:	2b00      	cmp	r3, #0
 8009318:	d104      	bne.n	8009324 <tcp_rexmit_rto_prepare+0x88>
    pcb->unsent_oversize = seg->oversize_left;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	895a      	ldrh	r2, [r3, #10]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	8b5b      	ldrh	r3, [r3, #26]
 8009336:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800933a:	b29a      	uxth	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	4618      	mov	r0, r3
 8009348:	f7f8 fb9f 	bl	8001a8a <lwip_htonl>
 800934c:	4604      	mov	r4, r0
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	891b      	ldrh	r3, [r3, #8]
 8009352:	461d      	mov	r5, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	899b      	ldrh	r3, [r3, #12]
 800935a:	b29b      	uxth	r3, r3
 800935c:	4618      	mov	r0, r3
 800935e:	f7f8 fb7f 	bl	8001a60 <lwip_htons>
 8009362:	4603      	mov	r3, r0
 8009364:	b2db      	uxtb	r3, r3
 8009366:	f003 0303 	and.w	r3, r3, #3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <tcp_rexmit_rto_prepare+0xd6>
 800936e:	2301      	movs	r3, #1
 8009370:	e000      	b.n	8009374 <tcp_rexmit_rto_prepare+0xd8>
 8009372:	2300      	movs	r3, #0
 8009374:	442b      	add	r3, r5
 8009376:	18e2      	adds	r2, r4, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bdb0      	pop	{r4, r5, r7, pc}
 800938c:	08013178 	.word	0x08013178
 8009390:	080137e8 	.word	0x080137e8
 8009394:	080131bc 	.word	0x080131bc

08009398 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10b      	bne.n	80093be <tcp_rexmit_rto_commit+0x26>
 80093a6:	4b10      	ldr	r3, [pc, #64]	; (80093e8 <tcp_rexmit_rto_commit+0x50>)
 80093a8:	f240 629c 	movw	r2, #1692	; 0x69c
 80093ac:	490f      	ldr	r1, [pc, #60]	; (80093ec <tcp_rexmit_rto_commit+0x54>)
 80093ae:	4810      	ldr	r0, [pc, #64]	; (80093f0 <tcp_rexmit_rto_commit+0x58>)
 80093b0:	f007 f8cc 	bl	801054c <iprintf>
 80093b4:	2000      	movs	r0, #0
 80093b6:	f007 f9cb 	bl	8010750 <fflush>
 80093ba:	f007 f910 	bl	80105de <abort>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093c4:	2bff      	cmp	r3, #255	; 0xff
 80093c6:	d007      	beq.n	80093d8 <tcp_rexmit_rto_commit+0x40>
    ++pcb->nrtx;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093ce:	3301      	adds	r3, #1
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7ff fc29 	bl	8008c30 <tcp_output>
}
 80093de:	bf00      	nop
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	08013178 	.word	0x08013178
 80093ec:	0801380c 	.word	0x0801380c
 80093f0:	080131bc 	.word	0x080131bc

080093f4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10b      	bne.n	800941a <tcp_rexmit_rto+0x26>
 8009402:	4b0c      	ldr	r3, [pc, #48]	; (8009434 <tcp_rexmit_rto+0x40>)
 8009404:	f240 62b1 	movw	r2, #1713	; 0x6b1
 8009408:	490b      	ldr	r1, [pc, #44]	; (8009438 <tcp_rexmit_rto+0x44>)
 800940a:	480c      	ldr	r0, [pc, #48]	; (800943c <tcp_rexmit_rto+0x48>)
 800940c:	f007 f89e 	bl	801054c <iprintf>
 8009410:	2000      	movs	r0, #0
 8009412:	f007 f99d 	bl	8010750 <fflush>
 8009416:	f007 f8e2 	bl	80105de <abort>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7ff ff3e 	bl	800929c <tcp_rexmit_rto_prepare>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d102      	bne.n	800942c <tcp_rexmit_rto+0x38>
    tcp_rexmit_rto_commit(pcb);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f7ff ffb6 	bl	8009398 <tcp_rexmit_rto_commit>
  }
}
 800942c:	bf00      	nop
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	08013178 	.word	0x08013178
 8009438:	08013830 	.word	0x08013830
 800943c:	080131bc 	.word	0x080131bc

08009440 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009440:	b590      	push	{r4, r7, lr}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10b      	bne.n	8009466 <tcp_rexmit+0x26>
 800944e:	4b32      	ldr	r3, [pc, #200]	; (8009518 <tcp_rexmit+0xd8>)
 8009450:	f240 62c5 	movw	r2, #1733	; 0x6c5
 8009454:	4931      	ldr	r1, [pc, #196]	; (800951c <tcp_rexmit+0xdc>)
 8009456:	4832      	ldr	r0, [pc, #200]	; (8009520 <tcp_rexmit+0xe0>)
 8009458:	f007 f878 	bl	801054c <iprintf>
 800945c:	2000      	movs	r0, #0
 800945e:	f007 f977 	bl	8010750 <fflush>
 8009462:	f007 f8bc 	bl	80105de <abort>

  if (pcb->unacked == NULL) {
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800946a:	2b00      	cmp	r3, #0
 800946c:	d102      	bne.n	8009474 <tcp_rexmit+0x34>
    return ERR_VAL;
 800946e:	f06f 0305 	mvn.w	r3, #5
 8009472:	e04c      	b.n	800950e <tcp_rexmit+0xce>
  }

  seg = pcb->unacked;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009478:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800947a:	68b8      	ldr	r0, [r7, #8]
 800947c:	f7ff fde0 	bl	8009040 <tcp_output_segment_busy>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d002      	beq.n	800948c <tcp_rexmit+0x4c>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8009486:	f06f 0305 	mvn.w	r3, #5
 800948a:	e040      	b.n	800950e <tcp_rexmit+0xce>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	336c      	adds	r3, #108	; 0x6c
 8009498:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800949a:	e002      	b.n	80094a2 <tcp_rexmit+0x62>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d011      	beq.n	80094ce <tcp_rexmit+0x8e>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7f8 fae9 	bl	8001a8a <lwip_htonl>
 80094b8:	4604      	mov	r4, r0
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7f8 fae2 	bl	8001a8a <lwip_htonl>
 80094c6:	4603      	mov	r3, r0
 80094c8:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	dbe6      	blt.n	800949c <tcp_rexmit+0x5c>
  }
  seg->next = *cur_seg;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d103      	bne.n	80094ec <tcp_rexmit+0xac>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094f2:	2bff      	cmp	r3, #255	; 0xff
 80094f4:	d007      	beq.n	8009506 <tcp_rexmit+0xc6>
    ++pcb->nrtx;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094fc:	3301      	adds	r3, #1
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3714      	adds	r7, #20
 8009512:	46bd      	mov	sp, r7
 8009514:	bd90      	pop	{r4, r7, pc}
 8009516:	bf00      	nop
 8009518:	08013178 	.word	0x08013178
 800951c:	0801384c 	.word	0x0801384c
 8009520:	080131bc 	.word	0x080131bc

08009524 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10b      	bne.n	800954a <tcp_rexmit_fast+0x26>
 8009532:	4b31      	ldr	r3, [pc, #196]	; (80095f8 <tcp_rexmit_fast+0xd4>)
 8009534:	f240 62fd 	movw	r2, #1789	; 0x6fd
 8009538:	4930      	ldr	r1, [pc, #192]	; (80095fc <tcp_rexmit_fast+0xd8>)
 800953a:	4831      	ldr	r0, [pc, #196]	; (8009600 <tcp_rexmit_fast+0xdc>)
 800953c:	f007 f806 	bl	801054c <iprintf>
 8009540:	2000      	movs	r0, #0
 8009542:	f007 f905 	bl	8010750 <fflush>
 8009546:	f007 f84a 	bl	80105de <abort>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800954e:	2b00      	cmp	r3, #0
 8009550:	d04d      	beq.n	80095ee <tcp_rexmit_fast+0xca>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	8b5b      	ldrh	r3, [r3, #26]
 8009556:	f003 0304 	and.w	r3, r3, #4
 800955a:	2b00      	cmp	r3, #0
 800955c:	d147      	bne.n	80095ee <tcp_rexmit_fast+0xca>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7ff ff6e 	bl	8009440 <tcp_rexmit>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d141      	bne.n	80095ee <tcp_rexmit_fast+0xca>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009576:	429a      	cmp	r2, r3
 8009578:	d207      	bcs.n	800958a <tcp_rexmit_fast+0x66>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009580:	0fda      	lsrs	r2, r3, #31
 8009582:	4413      	add	r3, r2
 8009584:	105b      	asrs	r3, r3, #1
 8009586:	b29b      	uxth	r3, r3
 8009588:	e006      	b.n	8009598 <tcp_rexmit_fast+0x74>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009590:	0fda      	lsrs	r2, r3, #31
 8009592:	4413      	add	r3, r2
 8009594:	105b      	asrs	r3, r3, #1
 8009596:	b29b      	uxth	r3, r3
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80095a4:	461a      	mov	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095aa:	005b      	lsls	r3, r3, #1
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d206      	bcs.n	80095be <tcp_rexmit_fast+0x9a>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095c8:	4619      	mov	r1, r3
 80095ca:	0049      	lsls	r1, r1, #1
 80095cc:	440b      	add	r3, r1
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	4413      	add	r3, r2
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	8b5b      	ldrh	r3, [r3, #26]
 80095de:	f043 0304 	orr.w	r3, r3, #4
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80095ee:	bf00      	nop
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	08013178 	.word	0x08013178
 80095fc:	08013864 	.word	0x08013864
 8009600:	080131bc 	.word	0x080131bc

08009604 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	607b      	str	r3, [r7, #4]
 800960e:	460b      	mov	r3, r1
 8009610:	817b      	strh	r3, [r7, #10]
 8009612:	4613      	mov	r3, r2
 8009614:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009616:	897a      	ldrh	r2, [r7, #10]
 8009618:	893b      	ldrh	r3, [r7, #8]
 800961a:	4413      	add	r3, r2
 800961c:	b29b      	uxth	r3, r3
 800961e:	3314      	adds	r3, #20
 8009620:	b29b      	uxth	r3, r3
 8009622:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009626:	4619      	mov	r1, r3
 8009628:	2022      	movs	r0, #34	; 0x22
 800962a:	f7fa f9a7 	bl	800397c <pbuf_alloc>
 800962e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d053      	beq.n	80096de <tcp_output_alloc_header_common+0xda>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	895b      	ldrh	r3, [r3, #10]
 800963a:	461a      	mov	r2, r3
 800963c:	897b      	ldrh	r3, [r7, #10]
 800963e:	3314      	adds	r3, #20
 8009640:	429a      	cmp	r2, r3
 8009642:	da0b      	bge.n	800965c <tcp_output_alloc_header_common+0x58>
 8009644:	4b28      	ldr	r3, [pc, #160]	; (80096e8 <tcp_output_alloc_header_common+0xe4>)
 8009646:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800964a:	4928      	ldr	r1, [pc, #160]	; (80096ec <tcp_output_alloc_header_common+0xe8>)
 800964c:	4828      	ldr	r0, [pc, #160]	; (80096f0 <tcp_output_alloc_header_common+0xec>)
 800964e:	f006 ff7d 	bl	801054c <iprintf>
 8009652:	2000      	movs	r0, #0
 8009654:	f007 f87c 	bl	8010750 <fflush>
 8009658:	f006 ffc1 	bl	80105de <abort>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8009662:	8c3b      	ldrh	r3, [r7, #32]
 8009664:	4618      	mov	r0, r3
 8009666:	f7f8 f9fb 	bl	8001a60 <lwip_htons>
 800966a:	4603      	mov	r3, r0
 800966c:	461a      	mov	r2, r3
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8009672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009674:	4618      	mov	r0, r3
 8009676:	f7f8 f9f3 	bl	8001a60 <lwip_htons>
 800967a:	4603      	mov	r3, r0
 800967c:	461a      	mov	r2, r3
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f7f8 f9fe 	bl	8001a8a <lwip_htonl>
 800968e:	4602      	mov	r2, r0
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8009694:	897b      	ldrh	r3, [r7, #10]
 8009696:	089b      	lsrs	r3, r3, #2
 8009698:	b29b      	uxth	r3, r3
 800969a:	3305      	adds	r3, #5
 800969c:	b29b      	uxth	r3, r3
 800969e:	031b      	lsls	r3, r3, #12
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	4313      	orrs	r3, r2
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7f8 f9d7 	bl	8001a60 <lwip_htons>
 80096b2:	4603      	mov	r3, r0
 80096b4:	461a      	mov	r2, r3
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80096ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80096bc:	4618      	mov	r0, r3
 80096be:	f7f8 f9cf 	bl	8001a60 <lwip_htons>
 80096c2:	4603      	mov	r3, r0
 80096c4:	461a      	mov	r2, r3
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	2200      	movs	r2, #0
 80096ce:	741a      	strb	r2, [r3, #16]
 80096d0:	2200      	movs	r2, #0
 80096d2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	2200      	movs	r2, #0
 80096d8:	749a      	strb	r2, [r3, #18]
 80096da:	2200      	movs	r2, #0
 80096dc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80096de:	697b      	ldr	r3, [r7, #20]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3718      	adds	r7, #24
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	08013178 	.word	0x08013178
 80096ec:	08013884 	.word	0x08013884
 80096f0:	080131bc 	.word	0x080131bc

080096f4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80096f4:	b5b0      	push	{r4, r5, r7, lr}
 80096f6:	b08a      	sub	sp, #40	; 0x28
 80096f8:	af04      	add	r7, sp, #16
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	607b      	str	r3, [r7, #4]
 80096fe:	460b      	mov	r3, r1
 8009700:	817b      	strh	r3, [r7, #10]
 8009702:	4613      	mov	r3, r2
 8009704:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10b      	bne.n	8009724 <tcp_output_alloc_header+0x30>
 800970c:	4b17      	ldr	r3, [pc, #92]	; (800976c <tcp_output_alloc_header+0x78>)
 800970e:	f240 7246 	movw	r2, #1862	; 0x746
 8009712:	4917      	ldr	r1, [pc, #92]	; (8009770 <tcp_output_alloc_header+0x7c>)
 8009714:	4817      	ldr	r0, [pc, #92]	; (8009774 <tcp_output_alloc_header+0x80>)
 8009716:	f006 ff19 	bl	801054c <iprintf>
 800971a:	2000      	movs	r0, #0
 800971c:	f007 f818 	bl	8010750 <fflush>
 8009720:	f006 ff5d 	bl	80105de <abort>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	8adb      	ldrh	r3, [r3, #22]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	8b12      	ldrh	r2, [r2, #24]
 8009730:	68f9      	ldr	r1, [r7, #12]
 8009732:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8009734:	893d      	ldrh	r5, [r7, #8]
 8009736:	897c      	ldrh	r4, [r7, #10]
 8009738:	9103      	str	r1, [sp, #12]
 800973a:	2110      	movs	r1, #16
 800973c:	9102      	str	r1, [sp, #8]
 800973e:	9201      	str	r2, [sp, #4]
 8009740:	9300      	str	r3, [sp, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	462a      	mov	r2, r5
 8009746:	4621      	mov	r1, r4
 8009748:	f7ff ff5c 	bl	8009604 <tcp_output_alloc_header_common>
 800974c:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d006      	beq.n	8009762 <tcp_output_alloc_header+0x6e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800975c:	441a      	add	r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8009762:	697b      	ldr	r3, [r7, #20]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3718      	adds	r7, #24
 8009768:	46bd      	mov	sp, r7
 800976a:	bdb0      	pop	{r4, r5, r7, pc}
 800976c:	08013178 	.word	0x08013178
 8009770:	080138b4 	.word	0x080138b4
 8009774:	080131bc 	.word	0x080131bc

08009778 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b088      	sub	sp, #32
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	4611      	mov	r1, r2
 8009784:	461a      	mov	r2, r3
 8009786:	460b      	mov	r3, r1
 8009788:	71fb      	strb	r3, [r7, #7]
 800978a:	4613      	mov	r3, r2
 800978c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800978e:	2300      	movs	r3, #0
 8009790:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10b      	bne.n	80097b0 <tcp_output_fill_options+0x38>
 8009798:	4b1a      	ldr	r3, [pc, #104]	; (8009804 <tcp_output_fill_options+0x8c>)
 800979a:	f240 725a 	movw	r2, #1882	; 0x75a
 800979e:	491a      	ldr	r1, [pc, #104]	; (8009808 <tcp_output_fill_options+0x90>)
 80097a0:	481a      	ldr	r0, [pc, #104]	; (800980c <tcp_output_fill_options+0x94>)
 80097a2:	f006 fed3 	bl	801054c <iprintf>
 80097a6:	2000      	movs	r0, #0
 80097a8:	f006 ffd2 	bl	8010750 <fflush>
 80097ac:	f006 ff17 	bl	80105de <abort>

  tcphdr = (struct tcp_hdr *)p->payload;
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	3314      	adds	r3, #20
 80097ba:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	f103 0214 	add.w	r2, r3, #20
 80097c2:	8bfb      	ldrh	r3, [r7, #30]
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4619      	mov	r1, r3
 80097c8:	79fb      	ldrb	r3, [r7, #7]
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <tcp_output_fill_options+0x5e>
 80097d2:	2304      	movs	r3, #4
 80097d4:	e000      	b.n	80097d8 <tcp_output_fill_options+0x60>
 80097d6:	2300      	movs	r3, #0
 80097d8:	440b      	add	r3, r1
 80097da:	441a      	add	r2, r3
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d00b      	beq.n	80097fa <tcp_output_fill_options+0x82>
 80097e2:	4b08      	ldr	r3, [pc, #32]	; (8009804 <tcp_output_fill_options+0x8c>)
 80097e4:	f240 7279 	movw	r2, #1913	; 0x779
 80097e8:	4909      	ldr	r1, [pc, #36]	; (8009810 <tcp_output_fill_options+0x98>)
 80097ea:	4808      	ldr	r0, [pc, #32]	; (800980c <tcp_output_fill_options+0x94>)
 80097ec:	f006 feae 	bl	801054c <iprintf>
 80097f0:	2000      	movs	r0, #0
 80097f2:	f006 ffad 	bl	8010750 <fflush>
 80097f6:	f006 fef2 	bl	80105de <abort>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80097fa:	bf00      	nop
 80097fc:	3720      	adds	r7, #32
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	08013178 	.word	0x08013178
 8009808:	080138dc 	.word	0x080138dc
 800980c:	080131bc 	.word	0x080131bc
 8009810:	080137d4 	.word	0x080137d4

08009814 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b088      	sub	sp, #32
 8009818:	af02      	add	r7, sp, #8
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
 8009820:	603b      	str	r3, [r7, #0]
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10b      	bne.n	8009840 <tcp_output_control_segment+0x2c>
 8009828:	4b13      	ldr	r3, [pc, #76]	; (8009878 <tcp_output_control_segment+0x64>)
 800982a:	f240 728a 	movw	r2, #1930	; 0x78a
 800982e:	4913      	ldr	r1, [pc, #76]	; (800987c <tcp_output_control_segment+0x68>)
 8009830:	4813      	ldr	r0, [pc, #76]	; (8009880 <tcp_output_control_segment+0x6c>)
 8009832:	f006 fe8b 	bl	801054c <iprintf>
 8009836:	2000      	movs	r0, #0
 8009838:	f006 ff8a 	bl	8010750 <fflush>
 800983c:	f006 fecf 	bl	80105de <abort>

  netif = tcp_route(pcb, src, dst);
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	6879      	ldr	r1, [r7, #4]
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f7fe fe73 	bl	8008530 <tcp_route>
 800984a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d105      	bne.n	800985e <tcp_output_control_segment+0x4a>
    pbuf_free(p);
 8009852:	68b8      	ldr	r0, [r7, #8]
 8009854:	f7fa fb30 	bl	8003eb8 <pbuf_free>
    return ERR_RTE;
 8009858:	f06f 0303 	mvn.w	r3, #3
 800985c:	e008      	b.n	8009870 <tcp_output_control_segment+0x5c>
  }
  return tcp_output_control_segment_netif(pcb, p, src, dst, netif);
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	68b9      	ldr	r1, [r7, #8]
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f000 f80b 	bl	8009884 <tcp_output_control_segment_netif>
 800986e:	4603      	mov	r3, r0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	08013178 	.word	0x08013178
 800987c:	08013904 	.word	0x08013904
 8009880:	080131bc 	.word	0x080131bc

08009884 <tcp_output_control_segment_netif>:
 */
static err_t
tcp_output_control_segment_netif(const struct tcp_pcb *pcb, struct pbuf *p,
                                 const ip_addr_t *src, const ip_addr_t *dst,
                                 struct netif *netif)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b08c      	sub	sp, #48	; 0x30
 8009888:	af04      	add	r7, sp, #16
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
 8009890:	603b      	str	r3, [r7, #0]
  err_t err;
  u8_t ttl, tos;

  LWIP_ASSERT("tcp_output_control_segment_netif: no netif given", netif != NULL);
 8009892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10b      	bne.n	80098b0 <tcp_output_control_segment_netif+0x2c>
 8009898:	4b20      	ldr	r3, [pc, #128]	; (800991c <tcp_output_control_segment_netif+0x98>)
 800989a:	f240 72a1 	movw	r2, #1953	; 0x7a1
 800989e:	4920      	ldr	r1, [pc, #128]	; (8009920 <tcp_output_control_segment_netif+0x9c>)
 80098a0:	4820      	ldr	r0, [pc, #128]	; (8009924 <tcp_output_control_segment_netif+0xa0>)
 80098a2:	f006 fe53 	bl	801054c <iprintf>
 80098a6:	2000      	movs	r0, #0
 80098a8:	f006 ff52 	bl	8010750 <fflush>
 80098ac:	f006 fe97 	bl	80105de <abort>

#if CHECKSUM_GEN_TCP
  IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
    struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	61bb      	str	r3, [r7, #24]
    tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	891a      	ldrh	r2, [r3, #8]
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2106      	movs	r1, #6
 80098c2:	68b8      	ldr	r0, [r7, #8]
 80098c4:	f7f8 f9fe 	bl	8001cc4 <ip_chksum_pseudo>
 80098c8:	4603      	mov	r3, r0
 80098ca:	461a      	mov	r2, r3
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	821a      	strh	r2, [r3, #16]
                                      src, dst);
  }
#endif
  if (pcb != NULL) {
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d006      	beq.n	80098e4 <tcp_output_control_segment_netif+0x60>
    NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
    ttl = pcb->ttl;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	7adb      	ldrb	r3, [r3, #11]
 80098da:	77fb      	strb	r3, [r7, #31]
    tos = pcb->tos;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	7a9b      	ldrb	r3, [r3, #10]
 80098e0:	77bb      	strb	r3, [r7, #30]
 80098e2:	e003      	b.n	80098ec <tcp_output_control_segment_netif+0x68>
  } else {
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ttl = TCP_TTL;
 80098e4:	23ff      	movs	r3, #255	; 0xff
 80098e6:	77fb      	strb	r3, [r7, #31]
    tos = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	77bb      	strb	r3, [r7, #30]
  }
  TCP_STATS_INC(tcp.xmit);
  err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80098ec:	7ffa      	ldrb	r2, [r7, #31]
 80098ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f0:	9302      	str	r3, [sp, #8]
 80098f2:	2306      	movs	r3, #6
 80098f4:	9301      	str	r3, [sp, #4]
 80098f6:	7fbb      	ldrb	r3, [r7, #30]
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	4613      	mov	r3, r2
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	6879      	ldr	r1, [r7, #4]
 8009900:	68b8      	ldr	r0, [r7, #8]
 8009902:	f7f8 fde9 	bl	80024d8 <ip4_output_if>
 8009906:	4603      	mov	r3, r0
 8009908:	75fb      	strb	r3, [r7, #23]
  NETIF_RESET_HINTS(netif);

  pbuf_free(p);
 800990a:	68b8      	ldr	r0, [r7, #8]
 800990c:	f7fa fad4 	bl	8003eb8 <pbuf_free>
  return err;
 8009910:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3720      	adds	r7, #32
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	08013178 	.word	0x08013178
 8009920:	08013930 	.word	0x08013930
 8009924:	080131bc 	.word	0x080131bc

08009928 <tcp_rst_common>:

static struct pbuf *
tcp_rst_common(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
               const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
               u16_t local_port, u16_t remote_port)
{
 8009928:	b590      	push	{r4, r7, lr}
 800992a:	b08b      	sub	sp, #44	; 0x2c
 800992c:	af04      	add	r7, sp, #16
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
 8009934:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10b      	bne.n	8009954 <tcp_rst_common+0x2c>
 800993c:	4b22      	ldr	r3, [pc, #136]	; (80099c8 <tcp_rst_common+0xa0>)
 800993e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8009942:	4922      	ldr	r1, [pc, #136]	; (80099cc <tcp_rst_common+0xa4>)
 8009944:	4822      	ldr	r0, [pc, #136]	; (80099d0 <tcp_rst_common+0xa8>)
 8009946:	f006 fe01 	bl	801054c <iprintf>
 800994a:	2000      	movs	r0, #0
 800994c:	f006 ff00 	bl	8010750 <fflush>
 8009950:	f006 fe45 	bl	80105de <abort>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8009954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10b      	bne.n	8009972 <tcp_rst_common+0x4a>
 800995a:	4b1b      	ldr	r3, [pc, #108]	; (80099c8 <tcp_rst_common+0xa0>)
 800995c:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8009960:	491c      	ldr	r1, [pc, #112]	; (80099d4 <tcp_rst_common+0xac>)
 8009962:	481b      	ldr	r0, [pc, #108]	; (80099d0 <tcp_rst_common+0xa8>)
 8009964:	f006 fdf2 	bl	801054c <iprintf>
 8009968:	2000      	movs	r0, #0
 800996a:	f006 fef1 	bl	8010750 <fflush>
 800996e:	f006 fe36 	bl	80105de <abort>
  /* these two are passed only for checks, disable warnings without asserts */
  LWIP_UNUSED_ARG(local_ip);
  LWIP_UNUSED_ARG(remote_ip);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009972:	2300      	movs	r3, #0
 8009974:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8009976:	f242 0303 	movw	r3, #8195	; 0x2003
 800997a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800997c:	7dfb      	ldrb	r3, [r7, #23]
 800997e:	b29c      	uxth	r4, r3
 8009980:	68b8      	ldr	r0, [r7, #8]
 8009982:	f7f8 f882 	bl	8001a8a <lwip_htonl>
 8009986:	4602      	mov	r2, r0
 8009988:	8abb      	ldrh	r3, [r7, #20]
 800998a:	9303      	str	r3, [sp, #12]
 800998c:	2314      	movs	r3, #20
 800998e:	9302      	str	r3, [sp, #8]
 8009990:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009992:	9301      	str	r3, [sp, #4]
 8009994:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	4613      	mov	r3, r2
 800999a:	2200      	movs	r2, #0
 800999c:	4621      	mov	r1, r4
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7ff fe30 	bl	8009604 <tcp_output_alloc_header_common>
 80099a4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d101      	bne.n	80099b0 <tcp_rst_common+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return NULL;
 80099ac:	2300      	movs	r3, #0
 80099ae:	e006      	b.n	80099be <tcp_rst_common+0x96>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 80099b0:	2300      	movs	r3, #0
 80099b2:	2200      	movs	r2, #0
 80099b4:	6939      	ldr	r1, [r7, #16]
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f7ff fede 	bl	8009778 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
  return p;
 80099bc:	693b      	ldr	r3, [r7, #16]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	371c      	adds	r7, #28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd90      	pop	{r4, r7, pc}
 80099c6:	bf00      	nop
 80099c8:	08013178 	.word	0x08013178
 80099cc:	08013964 	.word	0x08013964
 80099d0:	080131bc 	.word	0x080131bc
 80099d4:	08013980 	.word	0x08013980

080099d8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b08a      	sub	sp, #40	; 0x28
 80099dc:	af04      	add	r7, sp, #16
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
 80099e4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  
  p = tcp_rst_common(pcb, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 80099e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80099e8:	9302      	str	r3, [sp, #8]
 80099ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099ec:	9301      	str	r3, [sp, #4]
 80099ee:	6a3b      	ldr	r3, [r7, #32]
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	68b9      	ldr	r1, [r7, #8]
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f7ff ff95 	bl	8009928 <tcp_rst_common>
 80099fe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d005      	beq.n	8009a12 <tcp_rst+0x3a>
    tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8009a06:	6a3b      	ldr	r3, [r7, #32]
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	6979      	ldr	r1, [r7, #20]
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f7ff ff01 	bl	8009814 <tcp_output_control_segment>
  }
}
 8009a12:	bf00      	nop
 8009a14:	3718      	adds	r7, #24
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <tcp_rst_netif>:
 */
void
tcp_rst_netif(struct netif *netif, u32_t seqno, u32_t ackno,
              const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
              u16_t local_port, u16_t remote_port)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b08a      	sub	sp, #40	; 0x28
 8009a1e:	af04      	add	r7, sp, #16
 8009a20:	60f8      	str	r0, [r7, #12]
 8009a22:	60b9      	str	r1, [r7, #8]
 8009a24:	607a      	str	r2, [r7, #4]
 8009a26:	603b      	str	r3, [r7, #0]
  if (netif) {
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d017      	beq.n	8009a5e <tcp_rst_netif+0x44>
    struct pbuf *p = tcp_rst_common(NULL, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 8009a2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a30:	9302      	str	r3, [sp, #8]
 8009a32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a34:	9301      	str	r3, [sp, #4]
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	68b9      	ldr	r1, [r7, #8]
 8009a40:	2000      	movs	r0, #0
 8009a42:	f7ff ff71 	bl	8009928 <tcp_rst_common>
 8009a46:	6178      	str	r0, [r7, #20]
    if (p != NULL) {
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d007      	beq.n	8009a5e <tcp_rst_netif+0x44>
      tcp_output_control_segment_netif(NULL, p, local_ip, remote_ip, netif);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	6a3b      	ldr	r3, [r7, #32]
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	6979      	ldr	r1, [r7, #20]
 8009a58:	2000      	movs	r0, #0
 8009a5a:	f7ff ff13 	bl	8009884 <tcp_output_control_segment_netif>
    }
  } else {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_rst_netif: no netif given\n"));
  }
}
 8009a5e:	bf00      	nop
 8009a60:	3718      	adds	r7, #24
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
	...

08009a68 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009a68:	b590      	push	{r4, r7, lr}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8009a70:	2300      	movs	r3, #0
 8009a72:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8009a74:	2300      	movs	r3, #0
 8009a76:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10b      	bne.n	8009a96 <tcp_send_empty_ack+0x2e>
 8009a7e:	4b2c      	ldr	r3, [pc, #176]	; (8009b30 <tcp_send_empty_ack+0xc8>)
 8009a80:	f44f 6203 	mov.w	r2, #2096	; 0x830
 8009a84:	492b      	ldr	r1, [pc, #172]	; (8009b34 <tcp_send_empty_ack+0xcc>)
 8009a86:	482c      	ldr	r0, [pc, #176]	; (8009b38 <tcp_send_empty_ack+0xd0>)
 8009a88:	f006 fd60 	bl	801054c <iprintf>
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	f006 fe5f 	bl	8010750 <fflush>
 8009a92:	f006 fda4 	bl	80105de <abort>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009a96:	7dfb      	ldrb	r3, [r7, #23]
 8009a98:	f003 0301 	and.w	r3, r3, #1
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d001      	beq.n	8009aa4 <tcp_send_empty_ack+0x3c>
 8009aa0:	2304      	movs	r3, #4
 8009aa2:	e000      	b.n	8009aa6 <tcp_send_empty_ack+0x3e>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8009aa8:	7d7b      	ldrb	r3, [r7, #21]
 8009aaa:	b29c      	uxth	r4, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7f7 ffea 	bl	8001a8a <lwip_htonl>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2200      	movs	r2, #0
 8009aba:	4621      	mov	r1, r4
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff fe19 	bl	80096f4 <tcp_output_alloc_header>
 8009ac2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d109      	bne.n	8009ade <tcp_send_empty_ack+0x76>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	8b5b      	ldrh	r3, [r3, #26]
 8009ace:	f043 0303 	orr.w	r3, r3, #3
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8009ad8:	f06f 0301 	mvn.w	r3, #1
 8009adc:	e023      	b.n	8009b26 <tcp_send_empty_ack+0xbe>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8009ade:	7dbb      	ldrb	r3, [r7, #22]
 8009ae0:	7dfa      	ldrb	r2, [r7, #23]
 8009ae2:	6939      	ldr	r1, [r7, #16]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f7ff fe47 	bl	8009778 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	3304      	adds	r3, #4
 8009af0:	6939      	ldr	r1, [r7, #16]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f7ff fe8e 	bl	8009814 <tcp_output_control_segment>
 8009af8:	4603      	mov	r3, r0
 8009afa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8009afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d007      	beq.n	8009b14 <tcp_send_empty_ack+0xac>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	8b5b      	ldrh	r3, [r3, #26]
 8009b08:	f043 0303 	orr.w	r3, r3, #3
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	835a      	strh	r2, [r3, #26]
 8009b12:	e006      	b.n	8009b22 <tcp_send_empty_ack+0xba>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	8b5b      	ldrh	r3, [r3, #26]
 8009b18:	f023 0303 	bic.w	r3, r3, #3
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8009b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	371c      	adds	r7, #28
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd90      	pop	{r4, r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	08013178 	.word	0x08013178
 8009b34:	0801399c 	.word	0x0801399c
 8009b38:	080131bc 	.word	0x080131bc

08009b3c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8009b3c:	b590      	push	{r4, r7, lr}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009b44:	2300      	movs	r3, #0
 8009b46:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10b      	bne.n	8009b66 <tcp_keepalive+0x2a>
 8009b4e:	4b1b      	ldr	r3, [pc, #108]	; (8009bbc <tcp_keepalive+0x80>)
 8009b50:	f640 026a 	movw	r2, #2154	; 0x86a
 8009b54:	491a      	ldr	r1, [pc, #104]	; (8009bc0 <tcp_keepalive+0x84>)
 8009b56:	481b      	ldr	r0, [pc, #108]	; (8009bc4 <tcp_keepalive+0x88>)
 8009b58:	f006 fcf8 	bl	801054c <iprintf>
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	f006 fdf7 	bl	8010750 <fflush>
 8009b62:	f006 fd3c 	bl	80105de <abort>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8009b66:	7dfb      	ldrb	r3, [r7, #23]
 8009b68:	b29c      	uxth	r4, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7f7 ff8a 	bl	8001a8a <lwip_htonl>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2200      	movs	r2, #0
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f7ff fdb9 	bl	80096f4 <tcp_output_alloc_header>
 8009b82:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d102      	bne.n	8009b90 <tcp_keepalive+0x54>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8009b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b8e:	e010      	b.n	8009bb2 <tcp_keepalive+0x76>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8009b90:	2300      	movs	r3, #0
 8009b92:	2200      	movs	r2, #0
 8009b94:	6939      	ldr	r1, [r7, #16]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7ff fdee 	bl	8009778 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	3304      	adds	r3, #4
 8009ba2:	6939      	ldr	r1, [r7, #16]
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7ff fe35 	bl	8009814 <tcp_output_control_segment>
 8009baa:	4603      	mov	r3, r0
 8009bac:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	371c      	adds	r7, #28
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd90      	pop	{r4, r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	08013178 	.word	0x08013178
 8009bc0:	080139bc 	.word	0x080139bc
 8009bc4:	080131bc 	.word	0x080131bc

08009bc8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8009bc8:	b590      	push	{r4, r7, lr}
 8009bca:	b08b      	sub	sp, #44	; 0x2c
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10b      	bne.n	8009bf4 <tcp_zero_window_probe+0x2c>
 8009bdc:	4b4e      	ldr	r3, [pc, #312]	; (8009d18 <tcp_zero_window_probe+0x150>)
 8009bde:	f640 0295 	movw	r2, #2197	; 0x895
 8009be2:	494e      	ldr	r1, [pc, #312]	; (8009d1c <tcp_zero_window_probe+0x154>)
 8009be4:	484e      	ldr	r0, [pc, #312]	; (8009d20 <tcp_zero_window_probe+0x158>)
 8009be6:	f006 fcb1 	bl	801054c <iprintf>
 8009bea:	2000      	movs	r0, #0
 8009bec:	f006 fdb0 	bl	8010750 <fflush>
 8009bf0:	f006 fcf5 	bl	80105de <abort>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bf8:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8009bfa:	6a3b      	ldr	r3, [r7, #32]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d101      	bne.n	8009c04 <tcp_zero_window_probe+0x3c>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	e085      	b.n	8009d10 <tcp_zero_window_probe+0x148>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009c0a:	2bff      	cmp	r3, #255	; 0xff
 8009c0c:	d007      	beq.n	8009c1e <tcp_zero_window_probe+0x56>
    ++pcb->persist_probe;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009c14:	3301      	adds	r3, #1
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	899b      	ldrh	r3, [r3, #12]
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7f7 ff1a 	bl	8001a60 <lwip_htons>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	f003 0301 	and.w	r3, r3, #1
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d005      	beq.n	8009c44 <tcp_zero_window_probe+0x7c>
 8009c38:	6a3b      	ldr	r3, [r7, #32]
 8009c3a:	891b      	ldrh	r3, [r3, #8]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d101      	bne.n	8009c44 <tcp_zero_window_probe+0x7c>
 8009c40:	2301      	movs	r3, #1
 8009c42:	e000      	b.n	8009c46 <tcp_zero_window_probe+0x7e>
 8009c44:	2300      	movs	r3, #0
 8009c46:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8009c48:	7ffb      	ldrb	r3, [r7, #31]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	bf0c      	ite	eq
 8009c4e:	2301      	moveq	r3, #1
 8009c50:	2300      	movne	r3, #0
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8009c56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c5a:	b299      	uxth	r1, r3
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	691b      	ldr	r3, [r3, #16]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	8bba      	ldrh	r2, [r7, #28]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f7ff fd45 	bl	80096f4 <tcp_output_alloc_header>
 8009c6a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d102      	bne.n	8009c78 <tcp_zero_window_probe+0xb0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8009c72:	f04f 33ff 	mov.w	r3, #4294967295
 8009c76:	e04b      	b.n	8009d10 <tcp_zero_window_probe+0x148>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8009c7e:	7ffb      	ldrb	r3, [r7, #31]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d011      	beq.n	8009ca8 <tcp_zero_window_probe+0xe0>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	899b      	ldrh	r3, [r3, #12]
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	b21b      	sxth	r3, r3
 8009c8c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009c90:	b21c      	sxth	r4, r3
 8009c92:	2011      	movs	r0, #17
 8009c94:	f7f7 fee4 	bl	8001a60 <lwip_htons>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	b21b      	sxth	r3, r3
 8009c9c:	4323      	orrs	r3, r4
 8009c9e:	b21b      	sxth	r3, r3
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	819a      	strh	r2, [r3, #12]
 8009ca6:	e010      	b.n	8009cca <tcp_zero_window_probe+0x102>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	3314      	adds	r3, #20
 8009cae:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8009cb0:	6a3b      	ldr	r3, [r7, #32]
 8009cb2:	6858      	ldr	r0, [r3, #4]
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	891a      	ldrh	r2, [r3, #8]
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	891b      	ldrh	r3, [r3, #8]
 8009cbe:	1ad3      	subs	r3, r2, r3
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	6939      	ldr	r1, [r7, #16]
 8009cc6:	f7fa fb67 	bl	8004398 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7f7 feda 	bl	8001a8a <lwip_htonl>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	3301      	adds	r3, #1
 8009cda:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	1ad3      	subs	r3, r2, r3
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	da02      	bge.n	8009cee <tcp_zero_window_probe+0x126>
    pcb->snd_nxt = snd_nxt;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8009cee:	2300      	movs	r3, #0
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	69b9      	ldr	r1, [r7, #24]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7ff fd3f 	bl	8009778 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	3304      	adds	r3, #4
 8009d00:	69b9      	ldr	r1, [r7, #24]
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f7ff fd86 	bl	8009814 <tcp_output_control_segment>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009d0c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	372c      	adds	r7, #44	; 0x2c
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd90      	pop	{r4, r7, pc}
 8009d18:	08013178 	.word	0x08013178
 8009d1c:	080139d8 	.word	0x080139d8
 8009d20:	080131bc 	.word	0x080131bc

08009d24 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8009d2c:	f7fa fc54 	bl	80045d8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8009d30:	4b0a      	ldr	r3, [pc, #40]	; (8009d5c <tcpip_tcp_timer+0x38>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d103      	bne.n	8009d40 <tcpip_tcp_timer+0x1c>
 8009d38:	4b09      	ldr	r3, [pc, #36]	; (8009d60 <tcpip_tcp_timer+0x3c>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d005      	beq.n	8009d4c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009d40:	2200      	movs	r2, #0
 8009d42:	4908      	ldr	r1, [pc, #32]	; (8009d64 <tcpip_tcp_timer+0x40>)
 8009d44:	20fa      	movs	r0, #250	; 0xfa
 8009d46:	f000 f8e9 	bl	8009f1c <sys_timeout>
 8009d4a:	e002      	b.n	8009d52 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8009d4c:	4b06      	ldr	r3, [pc, #24]	; (8009d68 <tcpip_tcp_timer+0x44>)
 8009d4e:	2200      	movs	r2, #0
 8009d50:	601a      	str	r2, [r3, #0]
  }
}
 8009d52:	bf00      	nop
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	200015cc 	.word	0x200015cc
 8009d60:	200015dc 	.word	0x200015dc
 8009d64:	08009d25 	.word	0x08009d25
 8009d68:	200003f4 	.word	0x200003f4

08009d6c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8009d70:	4b0a      	ldr	r3, [pc, #40]	; (8009d9c <tcp_timer_needed+0x30>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10f      	bne.n	8009d98 <tcp_timer_needed+0x2c>
 8009d78:	4b09      	ldr	r3, [pc, #36]	; (8009da0 <tcp_timer_needed+0x34>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d103      	bne.n	8009d88 <tcp_timer_needed+0x1c>
 8009d80:	4b08      	ldr	r3, [pc, #32]	; (8009da4 <tcp_timer_needed+0x38>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d007      	beq.n	8009d98 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8009d88:	4b04      	ldr	r3, [pc, #16]	; (8009d9c <tcp_timer_needed+0x30>)
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009d8e:	2200      	movs	r2, #0
 8009d90:	4905      	ldr	r1, [pc, #20]	; (8009da8 <tcp_timer_needed+0x3c>)
 8009d92:	20fa      	movs	r0, #250	; 0xfa
 8009d94:	f000 f8c2 	bl	8009f1c <sys_timeout>
  }
}
 8009d98:	bf00      	nop
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	200003f4 	.word	0x200003f4
 8009da0:	200015cc 	.word	0x200015cc
 8009da4:	200015dc 	.word	0x200015dc
 8009da8:	08009d25 	.word	0x08009d25

08009dac <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8009db8:	2007      	movs	r0, #7
 8009dba:	f7f9 fa09 	bl	80031d0 <memp_malloc>
 8009dbe:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d10d      	bne.n	8009de2 <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d14d      	bne.n	8009e68 <sys_timeout_abs+0xbc>
 8009dcc:	4b28      	ldr	r3, [pc, #160]	; (8009e70 <sys_timeout_abs+0xc4>)
 8009dce:	22be      	movs	r2, #190	; 0xbe
 8009dd0:	4928      	ldr	r1, [pc, #160]	; (8009e74 <sys_timeout_abs+0xc8>)
 8009dd2:	4829      	ldr	r0, [pc, #164]	; (8009e78 <sys_timeout_abs+0xcc>)
 8009dd4:	f006 fbba 	bl	801054c <iprintf>
 8009dd8:	2000      	movs	r0, #0
 8009dda:	f006 fcb9 	bl	8010750 <fflush>
 8009dde:	f006 fbfe 	bl	80105de <abort>
    return;
  }

  timeout->next = NULL;
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	2200      	movs	r2, #0
 8009de6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8009dfa:	4b20      	ldr	r3, [pc, #128]	; (8009e7c <sys_timeout_abs+0xd0>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d103      	bne.n	8009e0a <sys_timeout_abs+0x5e>
    next_timeout = timeout;
 8009e02:	4a1e      	ldr	r2, [pc, #120]	; (8009e7c <sys_timeout_abs+0xd0>)
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	6013      	str	r3, [r2, #0]
    return;
 8009e08:	e02f      	b.n	8009e6a <sys_timeout_abs+0xbe>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	4b1b      	ldr	r3, [pc, #108]	; (8009e7c <sys_timeout_abs+0xd0>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	da07      	bge.n	8009e2a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8009e1a:	4b18      	ldr	r3, [pc, #96]	; (8009e7c <sys_timeout_abs+0xd0>)
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8009e22:	4a16      	ldr	r2, [pc, #88]	; (8009e7c <sys_timeout_abs+0xd0>)
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	6013      	str	r3, [r2, #0]
 8009e28:	e01f      	b.n	8009e6a <sys_timeout_abs+0xbe>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8009e2a:	4b14      	ldr	r3, [pc, #80]	; (8009e7c <sys_timeout_abs+0xd0>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	617b      	str	r3, [r7, #20]
 8009e30:	e016      	b.n	8009e60 <sys_timeout_abs+0xb4>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d007      	beq.n	8009e4a <sys_timeout_abs+0x9e>
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	685a      	ldr	r2, [r3, #4]
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	1ad3      	subs	r3, r2, r3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	da07      	bge.n	8009e5a <sys_timeout_abs+0xae>
        timeout->next = t->next;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	601a      	str	r2, [r3, #0]
        break;
 8009e58:	e007      	b.n	8009e6a <sys_timeout_abs+0xbe>
    for (t = next_timeout; t != NULL; t = t->next) {
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	617b      	str	r3, [r7, #20]
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1e5      	bne.n	8009e32 <sys_timeout_abs+0x86>
 8009e66:	e000      	b.n	8009e6a <sys_timeout_abs+0xbe>
    return;
 8009e68:	bf00      	nop
      }
    }
  }
}
 8009e6a:	3718      	adds	r7, #24
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	080139fc 	.word	0x080139fc
 8009e74:	08013a20 	.word	0x08013a20
 8009e78:	08013a60 	.word	0x08013a60
 8009e7c:	200003ec 	.word	0x200003ec

08009e80 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	4798      	blx	r3

  now = sys_now();
 8009e92:	f7f7 fc3f 	bl	8001714 <sys_now>
 8009e96:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	4b0d      	ldr	r3, [pc, #52]	; (8009ed4 <lwip_cyclic_timer+0x54>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	da09      	bge.n	8009ec2 <lwip_cyclic_timer+0x42>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	4907      	ldr	r1, [pc, #28]	; (8009ed8 <lwip_cyclic_timer+0x58>)
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7ff ff76 	bl	8009dac <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8009ec0:	e004      	b.n	8009ecc <lwip_cyclic_timer+0x4c>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	4904      	ldr	r1, [pc, #16]	; (8009ed8 <lwip_cyclic_timer+0x58>)
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f7ff ff70 	bl	8009dac <sys_timeout_abs>
}
 8009ecc:	bf00      	nop
 8009ece:	3718      	adds	r7, #24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	200003f0 	.word	0x200003f0
 8009ed8:	08009e81 	.word	0x08009e81

08009edc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	607b      	str	r3, [r7, #4]
 8009ee6:	e00e      	b.n	8009f06 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8009ee8:	4a0a      	ldr	r2, [pc, #40]	; (8009f14 <sys_timeouts_init+0x38>)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	00db      	lsls	r3, r3, #3
 8009ef4:	4a07      	ldr	r2, [pc, #28]	; (8009f14 <sys_timeouts_init+0x38>)
 8009ef6:	4413      	add	r3, r2
 8009ef8:	461a      	mov	r2, r3
 8009efa:	4907      	ldr	r1, [pc, #28]	; (8009f18 <sys_timeouts_init+0x3c>)
 8009efc:	f000 f80e 	bl	8009f1c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	3301      	adds	r3, #1
 8009f04:	607b      	str	r3, [r7, #4]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d0ed      	beq.n	8009ee8 <sys_timeouts_init+0xc>
  }
}
 8009f0c:	bf00      	nop
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	08013e70 	.word	0x08013e70
 8009f18:	08009e81 	.word	0x08009e81

08009f1c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b086      	sub	sp, #24
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f2e:	d30b      	bcc.n	8009f48 <sys_timeout+0x2c>
 8009f30:	4b0d      	ldr	r3, [pc, #52]	; (8009f68 <sys_timeout+0x4c>)
 8009f32:	f240 1229 	movw	r2, #297	; 0x129
 8009f36:	490d      	ldr	r1, [pc, #52]	; (8009f6c <sys_timeout+0x50>)
 8009f38:	480d      	ldr	r0, [pc, #52]	; (8009f70 <sys_timeout+0x54>)
 8009f3a:	f006 fb07 	bl	801054c <iprintf>
 8009f3e:	2000      	movs	r0, #0
 8009f40:	f006 fc06 	bl	8010750 <fflush>
 8009f44:	f006 fb4b 	bl	80105de <abort>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */
 8009f48:	f7f7 fbe4 	bl	8001714 <sys_now>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	4413      	add	r3, r2
 8009f52:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	68b9      	ldr	r1, [r7, #8]
 8009f58:	6978      	ldr	r0, [r7, #20]
 8009f5a:	f7ff ff27 	bl	8009dac <sys_timeout_abs>
#endif
}
 8009f5e:	bf00      	nop
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	080139fc 	.word	0x080139fc
 8009f6c:	08013a88 	.word	0x08013a88
 8009f70:	08013a60 	.word	0x08013a60

08009f74 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8009f7e:	4b19      	ldr	r3, [pc, #100]	; (8009fe4 <sys_untimeout+0x70>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d02a      	beq.n	8009fdc <sys_untimeout+0x68>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8009f86:	4b17      	ldr	r3, [pc, #92]	; (8009fe4 <sys_untimeout+0x70>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	60bb      	str	r3, [r7, #8]
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	60fb      	str	r3, [r7, #12]
 8009f90:	e01f      	b.n	8009fd2 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	689a      	ldr	r2, [r3, #8]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d115      	bne.n	8009fc8 <sys_untimeout+0x54>
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	68da      	ldr	r2, [r3, #12]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d110      	bne.n	8009fc8 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d104      	bne.n	8009fb6 <sys_untimeout+0x42>
        next_timeout = t->next;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a0c      	ldr	r2, [pc, #48]	; (8009fe4 <sys_untimeout+0x70>)
 8009fb2:	6013      	str	r3, [r2, #0]
 8009fb4:	e003      	b.n	8009fbe <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8009fbe:	68b9      	ldr	r1, [r7, #8]
 8009fc0:	2007      	movs	r0, #7
 8009fc2:	f7f9 f96f 	bl	80032a4 <memp_free>
      return;
 8009fc6:	e00a      	b.n	8009fde <sys_untimeout+0x6a>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	60fb      	str	r3, [r7, #12]
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	60bb      	str	r3, [r7, #8]
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d1dc      	bne.n	8009f92 <sys_untimeout+0x1e>
    }
  }
  return;
 8009fd8:	bf00      	nop
 8009fda:	e000      	b.n	8009fde <sys_untimeout+0x6a>
    return;
 8009fdc:	bf00      	nop
}
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	200003ec 	.word	0x200003ec

08009fe8 <link_required>:
#endif

/*
 * An Open on LCP has requested a change from Dead to Establish phase.
 */
void link_required(ppp_pcb *pcb) {
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
    LWIP_UNUSED_ARG(pcb);
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <link_terminated>:

/*
 * LCP has terminated the link; go to the Dead phase and take the
 * physical layer down.
 */
void link_terminated(ppp_pcb *pcb) {
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
    if (pcb->phase == PPP_PHASE_DEAD
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00a      	beq.n	800a024 <link_terminated+0x28>
#ifdef HAVE_MULTILINK
    || pcb->phase == PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	return;
    new_phase(pcb, PPP_PHASE_DISCONNECT);
 800a00e:	210c      	movs	r1, #12
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f004 ff53 	bl	800eebc <new_phase>
	print_link_stats();
#endif /* PPP_STATS_SUPPORT */
    } else
	ppp_notice(("Link terminated."));

    lcp_lowerdown(pcb);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f002 fc30 	bl	800c87c <lcp_lowerdown>

    ppp_link_terminated(pcb);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f004 ff3d 	bl	800ee9c <ppp_link_terminated>
 800a022:	e000      	b.n	800a026 <link_terminated+0x2a>
	return;
 800a024:	bf00      	nop
	else
	    mp_bundle_terminated();
    } else
	new_phase(pcb, PPP_PHASE_DEAD);
#endif
}
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <link_down>:

/*
 * LCP has gone down; it will either die or try to re-establish.
 */
void link_down(ppp_pcb *pcb) {
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
#if PPP_NOTIFY
    notify(link_down_notifier, 0);
#endif /* PPP_NOTIFY */

    if (!doing_multilink) {
	upper_layers_down(pcb);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f80d 	bl	800a054 <upper_layers_down>
	if (pcb->phase != PPP_PHASE_DEAD
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a040:	2b00      	cmp	r3, #0
 800a042:	d003      	beq.n	800a04c <link_down+0x20>
#ifdef HAVE_MULTILINK
	&& pcb->phase != PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
	)
	    new_phase(pcb, PPP_PHASE_ESTABLISH);
 800a044:	2106      	movs	r1, #6
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f004 ff38 	bl	800eebc <new_phase>
    }
    /* XXX if doing_multilink, should do something to stop
       network-layer traffic on the link */
}
 800a04c:	bf00      	nop
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <upper_layers_down>:

void upper_layers_down(ppp_pcb *pcb) {
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
    int i;
    const struct protent *protp;

    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800a05c:	2300      	movs	r3, #0
 800a05e:	60fb      	str	r3, [r7, #12]
 800a060:	e01e      	b.n	800a0a0 <upper_layers_down+0x4c>
        if (protp->protocol != PPP_LCP && protp->lowerdown != NULL)
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	881b      	ldrh	r3, [r3, #0]
 800a066:	f24c 0221 	movw	r2, #49185	; 0xc021
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d007      	beq.n	800a07e <upper_layers_down+0x2a>
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d003      	beq.n	800a07e <upper_layers_down+0x2a>
	    (*protp->lowerdown)(pcb);
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	4798      	blx	r3
        if (protp->protocol < 0xC000 && protp->close != NULL)
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	881b      	ldrh	r3, [r3, #0]
 800a082:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a086:	d208      	bcs.n	800a09a <upper_layers_down+0x46>
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	69db      	ldr	r3, [r3, #28]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d004      	beq.n	800a09a <upper_layers_down+0x46>
	    (*protp->close)(pcb, "LCP down");
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	69db      	ldr	r3, [r3, #28]
 800a094:	490c      	ldr	r1, [pc, #48]	; (800a0c8 <upper_layers_down+0x74>)
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	4798      	blx	r3
    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	3301      	adds	r3, #1
 800a09e:	60fb      	str	r3, [r7, #12]
 800a0a0:	4a0a      	ldr	r2, [pc, #40]	; (800a0cc <upper_layers_down+0x78>)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0a8:	60bb      	str	r3, [r7, #8]
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1d8      	bne.n	800a062 <upper_layers_down+0xe>
    }
    pcb->num_np_open = 0;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    pcb->num_np_up = 0;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
}
 800a0c0:	bf00      	nop
 800a0c2:	3710      	adds	r7, #16
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	08013ad4 	.word	0x08013ad4
 800a0cc:	08013f40 	.word	0x08013f40

0800a0d0 <link_established>:

/*
 * The link is established.
 * Proceed to the Dead, Authenticate or Network phase as appropriate.
 */
void link_established(ppp_pcb *pcb) {
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
#if PAP_SUPPORT
    lcp_options *wo = &pcb->lcp_wantoptions;
#endif /* PAP_SUPPORT */
    lcp_options *go = &pcb->lcp_gotoptions;
#endif /* PPP_SERVER */
    lcp_options *ho = &pcb->lcp_hisoptions;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	33cc      	adds	r3, #204	; 0xcc
 800a0dc:	60fb      	str	r3, [r7, #12]

    /*
     * Tell higher-level protocols that LCP is up.
     */
    if (!doing_multilink) {
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800a0de:	2300      	movs	r3, #0
 800a0e0:	613b      	str	r3, [r7, #16]
 800a0e2:	e010      	b.n	800a106 <link_established+0x36>
	    if (protp->protocol != PPP_LCP
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	881b      	ldrh	r3, [r3, #0]
 800a0e8:	f24c 0221 	movw	r2, #49185	; 0xc021
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d007      	beq.n	800a100 <link_established+0x30>
		&& protp->lowerup != NULL)
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d003      	beq.n	800a100 <link_established+0x30>
		(*protp->lowerup)(pcb);
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	4798      	blx	r3
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	3301      	adds	r3, #1
 800a104:	613b      	str	r3, [r7, #16]
 800a106:	4a19      	ldr	r2, [pc, #100]	; (800a16c <link_established+0x9c>)
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a10e:	60bb      	str	r3, [r7, #8]
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1e6      	bne.n	800a0e4 <link_established+0x14>
	    return;
	}
    }
#endif /* PPP_SERVER */

    new_phase(pcb, PPP_PHASE_AUTHENTICATE);
 800a116:	2107      	movs	r1, #7
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f004 fecf 	bl	800eebc <new_phase>
    auth = 0;
 800a11e:	2300      	movs	r3, #0
 800a120:	617b      	str	r3, [r7, #20]
	chap_auth_with_peer(pcb, pcb->settings.user, CHAP_DIGEST(ho->chap_mdtype));
	auth |= CHAP_WITHPEER;
    } else
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    if (ho->neg_upap) {
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	f003 0310 	and.w	r3, r3, #16
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00b      	beq.n	800a148 <link_established+0x78>
	upap_authwithpeer(pcb, pcb->settings.user, pcb->settings.passwd);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6859      	ldr	r1, [r3, #4]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	461a      	mov	r2, r3
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f005 fcc0 	bl	800fac0 <upap_authwithpeer>
	auth |= PAP_WITHPEER;
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	f043 0301 	orr.w	r3, r3, #1
 800a146:	617b      	str	r3, [r7, #20]
    } else
#endif /* PAP_SUPPORT */
    {}

    pcb->auth_pending = auth;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->auth_done = 0;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	865a      	strh	r2, [r3, #50]	; 0x32

    if (!auth)
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d102      	bne.n	800a162 <link_established+0x92>
#endif /* PPP_AUTH_SUPPORT */
	network_phase(pcb);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f807 	bl	800a170 <network_phase>
}
 800a162:	bf00      	nop
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	08013f40 	.word	0x08013f40

0800a170 <network_phase>:

/*
 * Proceed to the network phase.
 */
static void network_phase(ppp_pcb *pcb) {
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
	options_from_list(extra_options, 1);
	free_wordlist(extra_options);
	extra_options = 0;
    }
#endif /* PPP_OPTIONS */
    start_networks(pcb);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 f804 	bl	800a186 <start_networks>
}
 800a17e:	bf00      	nop
 800a180:	3708      	adds	r7, #8
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <start_networks>:

void start_networks(ppp_pcb *pcb) {
 800a186:	b580      	push	{r7, lr}
 800a188:	b082      	sub	sp, #8
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
#if CCP_SUPPORT || ECP_SUPPORT
    int i;
    const struct protent *protp;
#endif /* CCP_SUPPORT || ECP_SUPPORT */

    new_phase(pcb, PPP_PHASE_NETWORK);
 800a18e:	2109      	movs	r1, #9
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f004 fe93 	bl	800eebc <new_phase>
#endif /* ECP_SUPPORT */
#if MPPE_SUPPORT
        && !pcb->ccp_gotoptions.mppe
#endif /* MPPE_SUPPORT */
        )
	continue_networks(pcb);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f804 	bl	800a1a4 <continue_networks>
}
 800a19c:	bf00      	nop
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <continue_networks>:

void continue_networks(ppp_pcb *pcb) {
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
    const struct protent *protp;

    /*
     * Start the "real" network protocols.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	60fb      	str	r3, [r7, #12]
 800a1b0:	e017      	b.n	800a1e2 <continue_networks+0x3e>
	if (protp->protocol < 0xC000
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a1ba:	d20f      	bcs.n	800a1dc <continue_networks+0x38>
	    && protp->protocol != PPP_CCP
#endif /* CCP_SUPPORT */
#if ECP_SUPPORT
	    && protp->protocol != PPP_ECP
#endif /* ECP_SUPPORT */
	    && protp->open != NULL) {
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00b      	beq.n	800a1dc <continue_networks+0x38>
	    (*protp->open)(pcb);
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	4798      	blx	r3
	    ++pcb->num_np_open;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	b2da      	uxtb	r2, r3
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	60fb      	str	r3, [r7, #12]
 800a1e2:	4a0a      	ldr	r2, [pc, #40]	; (800a20c <continue_networks+0x68>)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1ea:	60bb      	str	r3, [r7, #8]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1df      	bne.n	800a1b2 <continue_networks+0xe>
	}

    if (pcb->num_np_open == 0)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d103      	bne.n	800a204 <continue_networks+0x60>
	/* nothing to do */
	lcp_close(pcb, "No network protocols running");
 800a1fc:	4904      	ldr	r1, [pc, #16]	; (800a210 <continue_networks+0x6c>)
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f002 faa0 	bl	800c744 <lcp_close>
}
 800a204:	bf00      	nop
 800a206:	3710      	adds	r7, #16
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	08013f40 	.word	0x08013f40
 800a210:	08013ae0 	.word	0x08013ae0

0800a214 <auth_withpeer_fail>:
#endif /* PPP_SERVER */

/*
 * We have failed to authenticate ourselves to the peer using `protocol'.
 */
void auth_withpeer_fail(ppp_pcb *pcb, int protocol) {
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
     * authentication secrets.
     *
     * He'll probably take the link down, and there's not much
     * we can do except wait for that.
     */
    pcb->err_code = PPPERR_AUTHFAIL;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2207      	movs	r2, #7
 800a222:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    lcp_close(pcb, "Failed to authenticate ourselves to peer");
 800a226:	4904      	ldr	r1, [pc, #16]	; (800a238 <auth_withpeer_fail+0x24>)
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f002 fa8b 	bl	800c744 <lcp_close>
}
 800a22e:	bf00      	nop
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	08013b00 	.word	0x08013b00

0800a23c <auth_withpeer_success>:

/*
 * We have successfully authenticated ourselves with the peer using `protocol'.
 */
void auth_withpeer_success(ppp_pcb *pcb, int protocol, int prot_flavor) {
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b086      	sub	sp, #24
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
    int bit;
    const char *prot = "";
 800a248:	4b17      	ldr	r3, [pc, #92]	; (800a2a8 <auth_withpeer_success+0x6c>)
 800a24a:	613b      	str	r3, [r7, #16]
    LWIP_UNUSED_ARG(prot_flavor); /* if CHAP_SUPPORT is disabled */

    switch (protocol) {
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	f24c 0223 	movw	r2, #49187	; 0xc023
 800a252:	4293      	cmp	r3, r2
 800a254:	d104      	bne.n	800a260 <auth_withpeer_success+0x24>
	}
	break;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    case PPP_PAP:
	bit = PAP_WITHPEER;
 800a256:	2301      	movs	r3, #1
 800a258:	617b      	str	r3, [r7, #20]
	prot = "PAP";
 800a25a:	4b14      	ldr	r3, [pc, #80]	; (800a2ac <auth_withpeer_success+0x70>)
 800a25c:	613b      	str	r3, [r7, #16]
	break;
 800a25e:	e001      	b.n	800a264 <auth_withpeer_success+0x28>
	prot = "EAP";
	break;
#endif /* EAP_SUPPORT */
    default:
	ppp_warn(("auth_withpeer_success: unknown protocol %x", protocol));
	bit = 0;
 800a260:	2300      	movs	r3, #0
 800a262:	617b      	str	r3, [r7, #20]
    }

    ppp_notice(("%s authentication succeeded", prot));

    /* Save the authentication method for later. */
    pcb->auth_done |= bit;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a268:	b21a      	sxth	r2, r3
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	b21b      	sxth	r3, r3
 800a26e:	4313      	orrs	r3, r2
 800a270:	b21b      	sxth	r3, r3
 800a272:	b29a      	uxth	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	865a      	strh	r2, [r3, #50]	; 0x32

    /*
     * If there is no more authentication still being done,
     * proceed to the network (or callback) phase.
     */
    if ((pcb->auth_pending &= ~bit) == 0)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a27c:	b21a      	sxth	r2, r3
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	b21b      	sxth	r3, r3
 800a282:	43db      	mvns	r3, r3
 800a284:	b21b      	sxth	r3, r3
 800a286:	4013      	ands	r3, r2
 800a288:	b21b      	sxth	r3, r3
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	861a      	strh	r2, [r3, #48]	; 0x30
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a294:	2b00      	cmp	r3, #0
 800a296:	d102      	bne.n	800a29e <auth_withpeer_success+0x62>
	network_phase(pcb);
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f7ff ff69 	bl	800a170 <network_phase>
}
 800a29e:	bf00      	nop
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	08013b2c 	.word	0x08013b2c
 800a2ac:	08013b30 	.word	0x08013b30

0800a2b0 <np_up>:


/*
 * np_up - a network protocol has come up.
 */
void np_up(ppp_pcb *pcb, int proto) {
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
#if PPP_IDLETIMELIMIT
    int tlim;
#endif /* PPP_IDLETIMELIMIT */
    LWIP_UNUSED_ARG(proto);

    if (pcb->num_np_up == 0) {
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d103      	bne.n	800a2cc <np_up+0x1c>
	/*
	 * At this point we consider that the link has come up successfully.
	 */
	new_phase(pcb, PPP_PHASE_RUNNING);
 800a2c4:	210a      	movs	r1, #10
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f004 fdf8 	bl	800eebc <new_phase>
	 */
	if (updetach && !nodetach)
	    detach();
#endif /* Unused */
    }
    ++pcb->num_np_up;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
}
 800a2dc:	bf00      	nop
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <np_down>:

/*
 * np_down - a network protocol has gone down.
 */
void np_down(ppp_pcb *pcb, int proto) {
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_up == 0) {
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	b2da      	uxtb	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800a304:	2b00      	cmp	r3, #0
 800a306:	d103      	bne.n	800a310 <np_down+0x2c>
	UNTIMEOUT(connect_time_expired, NULL);
#endif /* PPP_MAXCONNECT */
#ifdef MAXOCTETS
	UNTIMEOUT(check_maxoctets, NULL);
#endif
	new_phase(pcb, PPP_PHASE_NETWORK);
 800a308:	2109      	movs	r1, #9
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f004 fdd6 	bl	800eebc <new_phase>
    }
}
 800a310:	bf00      	nop
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <np_finished>:

/*
 * np_finished - a network protocol has finished using the link.
 */
void np_finished(ppp_pcb *pcb, int proto) {
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_open <= 0) {
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800a328:	3b01      	subs	r3, #1
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d103      	bne.n	800a344 <np_finished+0x2c>
	/* no further use for the link: shut up shop. */
	lcp_close(pcb, "No network protocols running");
 800a33c:	4903      	ldr	r1, [pc, #12]	; (800a34c <np_finished+0x34>)
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f002 fa00 	bl	800c744 <lcp_close>
    }
}
 800a344:	bf00      	nop
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	08013ae0 	.word	0x08013ae0

0800a350 <fsm_init>:
/*
 * fsm_init - Initialize fsm.
 *
 * Initialize fsm state.
 */
void fsm_init(fsm *f) {
 800a350:	b480      	push	{r7}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	60fb      	str	r3, [r7, #12]
    f->state = PPP_FSM_INITIAL;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	741a      	strb	r2, [r3, #16]
    f->flags = 0;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	745a      	strb	r2, [r3, #17]
    f->id = 0;				/* XXX Start with random id? */
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	749a      	strb	r2, [r3, #18]
    f->maxnakloops = pcb->settings.fsm_max_nak_loops;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	7c5a      	ldrb	r2, [r3, #17]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	75da      	strb	r2, [r3, #23]
    f->term_reason_len = 0;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	761a      	strb	r2, [r3, #24]
}
 800a37e:	bf00      	nop
 800a380:	3714      	adds	r7, #20
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <fsm_lowerup>:


/*
 * fsm_lowerup - The lower layer is up.
 */
void fsm_lowerup(fsm *f) {
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b082      	sub	sp, #8
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	7c1b      	ldrb	r3, [r3, #16]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <fsm_lowerup+0x16>
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d004      	beq.n	800a3a8 <fsm_lowerup+0x1e>

    default:
	FSMDEBUG(("%s: Up event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800a39e:	e015      	b.n	800a3cc <fsm_lowerup+0x42>
	f->state = PPP_FSM_CLOSED;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	741a      	strb	r2, [r3, #16]
	break;
 800a3a6:	e011      	b.n	800a3cc <fsm_lowerup+0x42>
	if( f->flags & OPT_SILENT )
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	7c5b      	ldrb	r3, [r3, #17]
 800a3ac:	f003 0304 	and.w	r3, r3, #4
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d003      	beq.n	800a3bc <fsm_lowerup+0x32>
	    f->state = PPP_FSM_STOPPED;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2203      	movs	r2, #3
 800a3b8:	741a      	strb	r2, [r3, #16]
	break;
 800a3ba:	e006      	b.n	800a3ca <fsm_lowerup+0x40>
	    fsm_sconfreq(f, 0);
 800a3bc:	2100      	movs	r1, #0
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 fdb2 	bl	800af28 <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2206      	movs	r2, #6
 800a3c8:	741a      	strb	r2, [r3, #16]
	break;
 800a3ca:	bf00      	nop
}
 800a3cc:	bf00      	nop
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <fsm_lowerdown>:
/*
 * fsm_lowerdown - The lower layer is down.
 *
 * Cancel all timeouts and inform upper layers.
 */
void fsm_lowerdown(fsm *f) {
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	7c1b      	ldrb	r3, [r3, #16]
 800a3e0:	3b02      	subs	r3, #2
 800a3e2:	2b07      	cmp	r3, #7
 800a3e4:	d843      	bhi.n	800a46e <fsm_lowerdown+0x9a>
 800a3e6:	a201      	add	r2, pc, #4	; (adr r2, 800a3ec <fsm_lowerdown+0x18>)
 800a3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ec:	0800a40d 	.word	0x0800a40d
 800a3f0:	0800a415 	.word	0x0800a415
 800a3f4:	0800a431 	.word	0x0800a431
 800a3f8:	0800a441 	.word	0x0800a441
 800a3fc:	0800a441 	.word	0x0800a441
 800a400:	0800a441 	.word	0x0800a441
 800a404:	0800a441 	.word	0x0800a441
 800a408:	0800a451 	.word	0x0800a451
    case PPP_FSM_CLOSED:
	f->state = PPP_FSM_INITIAL;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	741a      	strb	r2, [r3, #16]
	break;
 800a412:	e02c      	b.n	800a46e <fsm_lowerdown+0x9a>

    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_STARTING;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->starting )
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a420:	2b00      	cmp	r3, #0
 800a422:	d023      	beq.n	800a46c <fsm_lowerdown+0x98>
	    (*f->callbacks->starting)(f);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	4798      	blx	r3
	break;
 800a42e:	e01d      	b.n	800a46c <fsm_lowerdown+0x98>

    case PPP_FSM_CLOSING:
	f->state = PPP_FSM_INITIAL;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	741a      	strb	r2, [r3, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800a436:	6879      	ldr	r1, [r7, #4]
 800a438:	480f      	ldr	r0, [pc, #60]	; (800a478 <fsm_lowerdown+0xa4>)
 800a43a:	f7ff fd9b 	bl	8009f74 <sys_untimeout>
	break;
 800a43e:	e016      	b.n	800a46e <fsm_lowerdown+0x9a>

    case PPP_FSM_STOPPING:
    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	f->state = PPP_FSM_STARTING;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	741a      	strb	r2, [r3, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800a446:	6879      	ldr	r1, [r7, #4]
 800a448:	480b      	ldr	r0, [pc, #44]	; (800a478 <fsm_lowerdown+0xa4>)
 800a44a:	f7ff fd93 	bl	8009f74 <sys_untimeout>
	break;
 800a44e:	e00e      	b.n	800a46e <fsm_lowerdown+0x9a>

    case PPP_FSM_OPENED:
	if( f->callbacks->down )
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	6a1b      	ldr	r3, [r3, #32]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d004      	beq.n	800a464 <fsm_lowerdown+0x90>
	    (*f->callbacks->down)(f);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	6a1b      	ldr	r3, [r3, #32]
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	4798      	blx	r3
	f->state = PPP_FSM_STARTING;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	741a      	strb	r2, [r3, #16]
	break;
 800a46a:	e000      	b.n	800a46e <fsm_lowerdown+0x9a>
	break;
 800a46c:	bf00      	nop

    default:
	FSMDEBUG(("%s: Down event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800a46e:	bf00      	nop
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	0800a6a5 	.word	0x0800a6a5

0800a47c <fsm_open>:


/*
 * fsm_open - Link is allowed to come up.
 */
void fsm_open(fsm *f) {
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	7c1b      	ldrb	r3, [r3, #16]
 800a488:	2b09      	cmp	r3, #9
 800a48a:	d847      	bhi.n	800a51c <fsm_open+0xa0>
 800a48c:	a201      	add	r2, pc, #4	; (adr r2, 800a494 <fsm_open+0x18>)
 800a48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a492:	bf00      	nop
 800a494:	0800a4bd 	.word	0x0800a4bd
 800a498:	0800a51d 	.word	0x0800a51d
 800a49c:	0800a4d9 	.word	0x0800a4d9
 800a4a0:	0800a503 	.word	0x0800a503
 800a4a4:	0800a4fd 	.word	0x0800a4fd
 800a4a8:	0800a51d 	.word	0x0800a51d
 800a4ac:	0800a51d 	.word	0x0800a51d
 800a4b0:	0800a51d 	.word	0x0800a51d
 800a4b4:	0800a51d 	.word	0x0800a51d
 800a4b8:	0800a503 	.word	0x0800a503
    case PPP_FSM_INITIAL:
	f->state = PPP_FSM_STARTING;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->starting )
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d029      	beq.n	800a520 <fsm_open+0xa4>
	    (*f->callbacks->starting)(f);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	4798      	blx	r3
	break;
 800a4d6:	e023      	b.n	800a520 <fsm_open+0xa4>

    case PPP_FSM_CLOSED:
	if( f->flags & OPT_SILENT )
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	7c5b      	ldrb	r3, [r3, #17]
 800a4dc:	f003 0304 	and.w	r3, r3, #4
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d003      	beq.n	800a4ec <fsm_open+0x70>
	    f->state = PPP_FSM_STOPPED;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2203      	movs	r2, #3
 800a4e8:	741a      	strb	r2, [r3, #16]
	else {
	    /* Send an initial configure-request */
	    fsm_sconfreq(f, 0);
	    f->state = PPP_FSM_REQSENT;
	}
	break;
 800a4ea:	e01c      	b.n	800a526 <fsm_open+0xaa>
	    fsm_sconfreq(f, 0);
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fd1a 	bl	800af28 <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2206      	movs	r2, #6
 800a4f8:	741a      	strb	r2, [r3, #16]
	break;
 800a4fa:	e014      	b.n	800a526 <fsm_open+0xaa>

    case PPP_FSM_CLOSING:
	f->state = PPP_FSM_STOPPING;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2205      	movs	r2, #5
 800a500:	741a      	strb	r2, [r3, #16]
	/* fall through */
	/* no break */
    case PPP_FSM_STOPPED:
    case PPP_FSM_OPENED:
	if( f->flags & OPT_RESTART ){
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	7c5b      	ldrb	r3, [r3, #17]
 800a506:	f003 0302 	and.w	r3, r3, #2
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00a      	beq.n	800a524 <fsm_open+0xa8>
	    fsm_lowerdown(f);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f7ff ff60 	bl	800a3d4 <fsm_lowerdown>
	    fsm_lowerup(f);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f7ff ff38 	bl	800a38a <fsm_lowerup>
	}
	break;
 800a51a:	e003      	b.n	800a524 <fsm_open+0xa8>
    default:
	break;
 800a51c:	bf00      	nop
 800a51e:	e002      	b.n	800a526 <fsm_open+0xaa>
	break;
 800a520:	bf00      	nop
 800a522:	e000      	b.n	800a526 <fsm_open+0xaa>
	break;
 800a524:	bf00      	nop
    }
}
 800a526:	bf00      	nop
 800a528:	3708      	adds	r7, #8
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop

0800a530 <terminate_layer>:
 * terminate_layer - Start process of shutting down the FSM
 *
 * Cancel any timeout running, notify upper layers we're done, and
 * send a terminate-request message as configured.
 */
static void terminate_layer(fsm *f, int nextstate) {
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af02      	add	r7, sp, #8
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	60fb      	str	r3, [r7, #12]

    if( f->state != PPP_FSM_OPENED )
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	7c1b      	ldrb	r3, [r3, #16]
 800a544:	2b09      	cmp	r3, #9
 800a546:	d004      	beq.n	800a552 <terminate_layer+0x22>
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800a548:	6879      	ldr	r1, [r7, #4]
 800a54a:	482f      	ldr	r0, [pc, #188]	; (800a608 <terminate_layer+0xd8>)
 800a54c:	f7ff fd12 	bl	8009f74 <sys_untimeout>
 800a550:	e009      	b.n	800a566 <terminate_layer+0x36>
    else if( f->callbacks->down )
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	6a1b      	ldr	r3, [r3, #32]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d004      	beq.n	800a566 <terminate_layer+0x36>
	(*f->callbacks->down)(f);	/* Inform upper layers we're down */
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	6a1b      	ldr	r3, [r3, #32]
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	4798      	blx	r3

    /* Init restart counter and send Terminate-Request */
    f->retransmits = pcb->settings.fsm_max_term_transmits;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	7c1a      	ldrb	r2, [r3, #16]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	751a      	strb	r2, [r3, #20]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	7c9b      	ldrb	r3, [r3, #18]
 800a572:	3301      	adds	r3, #1
 800a574:	b2da      	uxtb	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	749a      	strb	r2, [r3, #18]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	7c9a      	ldrb	r2, [r3, #18]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	74da      	strb	r2, [r3, #19]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	7cda      	ldrb	r2, [r3, #19]
	      (const u_char *) f->term_reason, f->term_reason_len);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6899      	ldr	r1, [r3, #8]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	7e1b      	ldrb	r3, [r3, #24]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800a58e:	9300      	str	r3, [sp, #0]
 800a590:	460b      	mov	r3, r1
 800a592:	2105      	movs	r1, #5
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 fdb5 	bl	800b104 <fsm_sdata>

    if (f->retransmits == 0) {
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	7d1b      	ldrb	r3, [r3, #20]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d112      	bne.n	800a5c8 <terminate_layer+0x98>
	/*
	 * User asked for no terminate requests at all; just close it.
	 * We've already fired off one Terminate-Request just to be nice
	 * to the peer, but we're not going to wait for a reply.
	 */
	f->state = nextstate == PPP_FSM_CLOSING ? PPP_FSM_CLOSED : PPP_FSM_STOPPED;
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	2b04      	cmp	r3, #4
 800a5a6:	d101      	bne.n	800a5ac <terminate_layer+0x7c>
 800a5a8:	2202      	movs	r2, #2
 800a5aa:	e000      	b.n	800a5ae <terminate_layer+0x7e>
 800a5ac:	2203      	movs	r2, #3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d020      	beq.n	800a5fe <terminate_layer+0xce>
	    (*f->callbacks->finished)(f);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	4798      	blx	r3
	return;
 800a5c6:	e01a      	b.n	800a5fe <terminate_layer+0xce>
    }

    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800a5c8:	6879      	ldr	r1, [r7, #4]
 800a5ca:	480f      	ldr	r0, [pc, #60]	; (800a608 <terminate_layer+0xd8>)
 800a5cc:	f7ff fcd2 	bl	8009f74 <sys_untimeout>
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	7b9b      	ldrb	r3, [r3, #14]
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a5da:	fb03 f302 	mul.w	r3, r3, r2
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	4909      	ldr	r1, [pc, #36]	; (800a608 <terminate_layer+0xd8>)
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7ff fc9a 	bl	8009f1c <sys_timeout>
    --f->retransmits;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	7d1b      	ldrb	r3, [r3, #20]
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	b2da      	uxtb	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	751a      	strb	r2, [r3, #20]

    f->state = nextstate;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	741a      	strb	r2, [r3, #16]
 800a5fc:	e000      	b.n	800a600 <terminate_layer+0xd0>
	return;
 800a5fe:	bf00      	nop
}
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	0800a6a5 	.word	0x0800a6a5

0800a60c <fsm_close>:
 * fsm_close - Start closing connection.
 *
 * Cancel timeouts and either initiate close or possibly go directly to
 * the PPP_FSM_CLOSED state.
 */
void fsm_close(fsm *f, const char *reason) {
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
    f->term_reason = reason;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	683a      	ldr	r2, [r7, #0]
 800a61a:	609a      	str	r2, [r3, #8]
    f->term_reason_len = (reason == NULL? 0: (u8_t)LWIP_MIN(strlen(reason), 0xFF) );
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00d      	beq.n	800a63e <fsm_close+0x32>
 800a622:	6838      	ldr	r0, [r7, #0]
 800a624:	f7f5 fdde 	bl	80001e4 <strlen>
 800a628:	4603      	mov	r3, r0
 800a62a:	2bfe      	cmp	r3, #254	; 0xfe
 800a62c:	d805      	bhi.n	800a63a <fsm_close+0x2e>
 800a62e:	6838      	ldr	r0, [r7, #0]
 800a630:	f7f5 fdd8 	bl	80001e4 <strlen>
 800a634:	4603      	mov	r3, r0
 800a636:	b2db      	uxtb	r3, r3
 800a638:	e002      	b.n	800a640 <fsm_close+0x34>
 800a63a:	23ff      	movs	r3, #255	; 0xff
 800a63c:	e000      	b.n	800a640 <fsm_close+0x34>
 800a63e:	2300      	movs	r3, #0
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	7613      	strb	r3, [r2, #24]
    switch( f->state ){
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	7c1b      	ldrb	r3, [r3, #16]
 800a648:	3b01      	subs	r3, #1
 800a64a:	2b08      	cmp	r3, #8
 800a64c:	d825      	bhi.n	800a69a <fsm_close+0x8e>
 800a64e:	a201      	add	r2, pc, #4	; (adr r2, 800a654 <fsm_close+0x48>)
 800a650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a654:	0800a679 	.word	0x0800a679
 800a658:	0800a69b 	.word	0x0800a69b
 800a65c:	0800a681 	.word	0x0800a681
 800a660:	0800a69b 	.word	0x0800a69b
 800a664:	0800a689 	.word	0x0800a689
 800a668:	0800a691 	.word	0x0800a691
 800a66c:	0800a691 	.word	0x0800a691
 800a670:	0800a691 	.word	0x0800a691
 800a674:	0800a691 	.word	0x0800a691
    case PPP_FSM_STARTING:
	f->state = PPP_FSM_INITIAL;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	741a      	strb	r2, [r3, #16]
	break;
 800a67e:	e00d      	b.n	800a69c <fsm_close+0x90>
    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_CLOSED;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2202      	movs	r2, #2
 800a684:	741a      	strb	r2, [r3, #16]
	break;
 800a686:	e009      	b.n	800a69c <fsm_close+0x90>
    case PPP_FSM_STOPPING:
	f->state = PPP_FSM_CLOSING;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2204      	movs	r2, #4
 800a68c:	741a      	strb	r2, [r3, #16]
	break;
 800a68e:	e005      	b.n	800a69c <fsm_close+0x90>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
    case PPP_FSM_OPENED:
	terminate_layer(f, PPP_FSM_CLOSING);
 800a690:	2104      	movs	r1, #4
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7ff ff4c 	bl	800a530 <terminate_layer>
	break;
 800a698:	e000      	b.n	800a69c <fsm_close+0x90>
    default:
	break;
 800a69a:	bf00      	nop
    }
}
 800a69c:	bf00      	nop
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <fsm_timeout>:


/*
 * fsm_timeout - Timeout expired.
 */
static void fsm_timeout(void *arg) {
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b086      	sub	sp, #24
 800a6a8:	af02      	add	r7, sp, #8
 800a6aa:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm *) arg;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	60fb      	str	r3, [r7, #12]
    ppp_pcb *pcb = f->pcb;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	60bb      	str	r3, [r7, #8]

    switch (f->state) {
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	7c1b      	ldrb	r3, [r3, #16]
 800a6ba:	3b04      	subs	r3, #4
 800a6bc:	2b04      	cmp	r3, #4
 800a6be:	f200 8083 	bhi.w	800a7c8 <fsm_timeout+0x124>
 800a6c2:	a201      	add	r2, pc, #4	; (adr r2, 800a6c8 <fsm_timeout+0x24>)
 800a6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c8:	0800a6dd 	.word	0x0800a6dd
 800a6cc:	0800a6dd 	.word	0x0800a6dd
 800a6d0:	0800a767 	.word	0x0800a767
 800a6d4:	0800a767 	.word	0x0800a767
 800a6d8:	0800a767 	.word	0x0800a767
    case PPP_FSM_CLOSING:
    case PPP_FSM_STOPPING:
	if( f->retransmits <= 0 ){
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	7d1b      	ldrb	r3, [r3, #20]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d113      	bne.n	800a70c <fsm_timeout+0x68>
	    /*
	     * We've waited for an ack long enough.  Peer probably heard us.
	     */
	    f->state = (f->state == PPP_FSM_CLOSING)? PPP_FSM_CLOSED: PPP_FSM_STOPPED;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	7c1b      	ldrb	r3, [r3, #16]
 800a6e8:	2b04      	cmp	r3, #4
 800a6ea:	d101      	bne.n	800a6f0 <fsm_timeout+0x4c>
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	e000      	b.n	800a6f2 <fsm_timeout+0x4e>
 800a6f0:	2203      	movs	r2, #3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	741a      	strb	r2, [r3, #16]
	    if( f->callbacks->finished )
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d060      	beq.n	800a7c2 <fsm_timeout+0x11e>
		(*f->callbacks->finished)(f);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	4798      	blx	r3
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
		      (const u_char *) f->term_reason, f->term_reason_len);
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
	    --f->retransmits;
	}
	break;
 800a70a:	e05a      	b.n	800a7c2 <fsm_timeout+0x11e>
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	7c9b      	ldrb	r3, [r3, #18]
 800a710:	3301      	adds	r3, #1
 800a712:	b2da      	uxtb	r2, r3
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	749a      	strb	r2, [r3, #18]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	7c9a      	ldrb	r2, [r3, #18]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	74da      	strb	r2, [r3, #19]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	7cda      	ldrb	r2, [r3, #19]
		      (const u_char *) f->term_reason, f->term_reason_len);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6899      	ldr	r1, [r3, #8]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	7e1b      	ldrb	r3, [r3, #24]
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	460b      	mov	r3, r1
 800a730:	2105      	movs	r1, #5
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f000 fce6 	bl	800b104 <fsm_sdata>
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800a738:	68f9      	ldr	r1, [r7, #12]
 800a73a:	4825      	ldr	r0, [pc, #148]	; (800a7d0 <fsm_timeout+0x12c>)
 800a73c:	f7ff fc1a 	bl	8009f74 <sys_untimeout>
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	7b9b      	ldrb	r3, [r3, #14]
 800a744:	461a      	mov	r2, r3
 800a746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a74a:	fb03 f302 	mul.w	r3, r3, r2
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	491f      	ldr	r1, [pc, #124]	; (800a7d0 <fsm_timeout+0x12c>)
 800a752:	4618      	mov	r0, r3
 800a754:	f7ff fbe2 	bl	8009f1c <sys_timeout>
	    --f->retransmits;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	7d1b      	ldrb	r3, [r3, #20]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	b2da      	uxtb	r2, r3
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	751a      	strb	r2, [r3, #20]
	break;
 800a764:	e02d      	b.n	800a7c2 <fsm_timeout+0x11e>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	if (f->retransmits <= 0) {
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	7d1b      	ldrb	r3, [r3, #20]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d113      	bne.n	800a796 <fsm_timeout+0xf2>
	    ppp_warn(("%s: timeout sending Config-Requests", PROTO_NAME(f)));
	    f->state = PPP_FSM_STOPPED;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2203      	movs	r2, #3
 800a772:	741a      	strb	r2, [r3, #16]
	    if( (f->flags & OPT_PASSIVE) == 0 && f->callbacks->finished )
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	7c5b      	ldrb	r3, [r3, #17]
 800a778:	f003 0301 	and.w	r3, r3, #1
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d122      	bne.n	800a7c6 <fsm_timeout+0x122>
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a786:	2b00      	cmp	r3, #0
 800a788:	d01d      	beq.n	800a7c6 <fsm_timeout+0x122>
		(*f->callbacks->finished)(f);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	4798      	blx	r3
		(*f->callbacks->retransmit)(f);
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
	    if( f->state == PPP_FSM_ACKRCVD )
		f->state = PPP_FSM_REQSENT;
	}
	break;
 800a794:	e017      	b.n	800a7c6 <fsm_timeout+0x122>
	    if (f->callbacks->retransmit)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d004      	beq.n	800a7aa <fsm_timeout+0x106>
		(*f->callbacks->retransmit)(f);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	4798      	blx	r3
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
 800a7aa:	2101      	movs	r1, #1
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f000 fbbb 	bl	800af28 <fsm_sconfreq>
	    if( f->state == PPP_FSM_ACKRCVD )
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	7c1b      	ldrb	r3, [r3, #16]
 800a7b6:	2b07      	cmp	r3, #7
 800a7b8:	d105      	bne.n	800a7c6 <fsm_timeout+0x122>
		f->state = PPP_FSM_REQSENT;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2206      	movs	r2, #6
 800a7be:	741a      	strb	r2, [r3, #16]
	break;
 800a7c0:	e001      	b.n	800a7c6 <fsm_timeout+0x122>
	break;
 800a7c2:	bf00      	nop
 800a7c4:	e000      	b.n	800a7c8 <fsm_timeout+0x124>
	break;
 800a7c6:	bf00      	nop

    default:
	FSMDEBUG(("%s: Timeout event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800a7c8:	bf00      	nop
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	0800a6a5 	.word	0x0800a6a5

0800a7d4 <fsm_input>:


/*
 * fsm_input - Input packet.
 */
void fsm_input(fsm *f, u_char *inpacket, int l) {
 800a7d4:	b590      	push	{r4, r7, lr}
 800a7d6:	b08b      	sub	sp, #44	; 0x2c
 800a7d8:	af02      	add	r7, sp, #8
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]

    /*
     * Parse header (code, id and length).
     * If packet too short, drop it.
     */
    inp = inpacket;
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	61fb      	str	r3, [r7, #28]
    if (l < HEADERLEN) {
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2b03      	cmp	r3, #3
 800a7e8:	f340 808c 	ble.w	800a904 <fsm_input+0x130>
	FSMDEBUG(("fsm_input(%x): Rcvd short header.", f->protocol));
	return;
    }
    GETCHAR(code, inp);
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	1c5a      	adds	r2, r3, #1
 800a7f0:	61fa      	str	r2, [r7, #28]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	76fb      	strb	r3, [r7, #27]
    GETCHAR(id, inp);
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	1c5a      	adds	r2, r3, #1
 800a7fa:	61fa      	str	r2, [r7, #28]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	76bb      	strb	r3, [r7, #26]
    GETSHORT(len, inp);
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	1c5a      	adds	r2, r3, #1
 800a804:	61fa      	str	r2, [r7, #28]
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	021b      	lsls	r3, r3, #8
 800a80a:	617b      	str	r3, [r7, #20]
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	1c5a      	adds	r2, r3, #1
 800a810:	61fa      	str	r2, [r7, #28]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	461a      	mov	r2, r3
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	4313      	orrs	r3, r2
 800a81a:	617b      	str	r3, [r7, #20]
    if (len < HEADERLEN) {
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	2b03      	cmp	r3, #3
 800a820:	dd72      	ble.n	800a908 <fsm_input+0x134>
	FSMDEBUG(("fsm_input(%x): Rcvd illegal length.", f->protocol));
	return;
    }
    if (len > l) {
 800a822:	697a      	ldr	r2, [r7, #20]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	429a      	cmp	r2, r3
 800a828:	dc70      	bgt.n	800a90c <fsm_input+0x138>
	FSMDEBUG(("fsm_input(%x): Rcvd short packet.", f->protocol));
	return;
    }
    len -= HEADERLEN;		/* subtract header length */
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	3b04      	subs	r3, #4
 800a82e:	617b      	str	r3, [r7, #20]

    if( f->state == PPP_FSM_INITIAL || f->state == PPP_FSM_STARTING ){
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	7c1b      	ldrb	r3, [r3, #16]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d06b      	beq.n	800a910 <fsm_input+0x13c>
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	7c1b      	ldrb	r3, [r3, #16]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d067      	beq.n	800a910 <fsm_input+0x13c>
    }

    /*
     * Action depends on code.
     */
    switch (code) {
 800a840:	7efb      	ldrb	r3, [r7, #27]
 800a842:	3b01      	subs	r3, #1
 800a844:	2b06      	cmp	r3, #6
 800a846:	d839      	bhi.n	800a8bc <fsm_input+0xe8>
 800a848:	a201      	add	r2, pc, #4	; (adr r2, 800a850 <fsm_input+0x7c>)
 800a84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84e:	bf00      	nop
 800a850:	0800a86d 	.word	0x0800a86d
 800a854:	0800a87b 	.word	0x0800a87b
 800a858:	0800a889 	.word	0x0800a889
 800a85c:	0800a889 	.word	0x0800a889
 800a860:	0800a89b 	.word	0x0800a89b
 800a864:	0800a8a9 	.word	0x0800a8a9
 800a868:	0800a8b1 	.word	0x0800a8b1
    case CONFREQ:
	fsm_rconfreq(f, id, inp, len);
 800a86c:	7eb9      	ldrb	r1, [r7, #26]
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	69fa      	ldr	r2, [r7, #28]
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	f000 f852 	bl	800a91c <fsm_rconfreq>
	break;
 800a878:	e04d      	b.n	800a916 <fsm_input+0x142>
    
    case CONFACK:
	fsm_rconfack(f, id, inp, len);
 800a87a:	7eb9      	ldrb	r1, [r7, #26]
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	69fa      	ldr	r2, [r7, #28]
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f000 f8f1 	bl	800aa68 <fsm_rconfack>
	break;
 800a886:	e046      	b.n	800a916 <fsm_input+0x142>
    
    case CONFNAK:
    case CONFREJ:
	fsm_rconfnakrej(f, code, id, inp, len);
 800a888:	7ef9      	ldrb	r1, [r7, #27]
 800a88a:	7eba      	ldrb	r2, [r7, #26]
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	9300      	str	r3, [sp, #0]
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f000 f988 	bl	800aba8 <fsm_rconfnakrej>
	break;
 800a898:	e03d      	b.n	800a916 <fsm_input+0x142>
    
    case TERMREQ:
	fsm_rtermreq(f, id, inp, len);
 800a89a:	7eb9      	ldrb	r1, [r7, #26]
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	69fa      	ldr	r2, [r7, #28]
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f000 fa2b 	bl	800acfc <fsm_rtermreq>
	break;
 800a8a6:	e036      	b.n	800a916 <fsm_input+0x142>
    
    case TERMACK:
	fsm_rtermack(f);
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f000 fa6f 	bl	800ad8c <fsm_rtermack>
	break;
 800a8ae:	e032      	b.n	800a916 <fsm_input+0x142>
    
    case CODEREJ:
	fsm_rcoderej(f, inp, len);
 800a8b0:	697a      	ldr	r2, [r7, #20]
 800a8b2:	69f9      	ldr	r1, [r7, #28]
 800a8b4:	68f8      	ldr	r0, [r7, #12]
 800a8b6:	f000 fac7 	bl	800ae48 <fsm_rcoderej>
	break;
 800a8ba:	e02c      	b.n	800a916 <fsm_input+0x142>
    
    default:
	if( !f->callbacks->extcode
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00c      	beq.n	800a8e0 <fsm_input+0x10c>
	   || !(*f->callbacks->extcode)(f, code, id, inp, len) )
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800a8cc:	7ef9      	ldrb	r1, [r7, #27]
 800a8ce:	7eba      	ldrb	r2, [r7, #26]
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	47a0      	blx	r4
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d119      	bne.n	800a914 <fsm_input+0x140>
	    fsm_sdata(f, CODEREJ, ++f->id, inpacket, len + HEADERLEN);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	7c9b      	ldrb	r3, [r3, #18]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	b2da      	uxtb	r2, r3
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	749a      	strb	r2, [r3, #18]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	7c9a      	ldrb	r2, [r3, #18]
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	9300      	str	r3, [sp, #0]
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	2107      	movs	r1, #7
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f000 fc02 	bl	800b104 <fsm_sdata>
	break;
 800a900:	bf00      	nop
 800a902:	e007      	b.n	800a914 <fsm_input+0x140>
	return;
 800a904:	bf00      	nop
 800a906:	e006      	b.n	800a916 <fsm_input+0x142>
	return;
 800a908:	bf00      	nop
 800a90a:	e004      	b.n	800a916 <fsm_input+0x142>
	return;
 800a90c:	bf00      	nop
 800a90e:	e002      	b.n	800a916 <fsm_input+0x142>
	return;
 800a910:	bf00      	nop
 800a912:	e000      	b.n	800a916 <fsm_input+0x142>
	break;
 800a914:	bf00      	nop
    }
}
 800a916:	3724      	adds	r7, #36	; 0x24
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd90      	pop	{r4, r7, pc}

0800a91c <fsm_rconfreq>:


/*
 * fsm_rconfreq - Receive Configure-Request.
 */
static void fsm_rconfreq(fsm *f, u_char id, u_char *inp, int len) {
 800a91c:	b590      	push	{r4, r7, lr}
 800a91e:	b089      	sub	sp, #36	; 0x24
 800a920:	af02      	add	r7, sp, #8
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	607a      	str	r2, [r7, #4]
 800a926:	603b      	str	r3, [r7, #0]
 800a928:	460b      	mov	r3, r1
 800a92a:	72fb      	strb	r3, [r7, #11]
    int code, reject_if_disagree;

    switch( f->state ){
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	7c1b      	ldrb	r3, [r3, #16]
 800a930:	3b02      	subs	r3, #2
 800a932:	2b07      	cmp	r3, #7
 800a934:	d835      	bhi.n	800a9a2 <fsm_rconfreq+0x86>
 800a936:	a201      	add	r2, pc, #4	; (adr r2, 800a93c <fsm_rconfreq+0x20>)
 800a938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93c:	0800a95d 	.word	0x0800a95d
 800a940:	0800a993 	.word	0x0800a993
 800a944:	0800aa5b 	.word	0x0800aa5b
 800a948:	0800aa5b 	.word	0x0800aa5b
 800a94c:	0800a9a3 	.word	0x0800a9a3
 800a950:	0800a9a3 	.word	0x0800a9a3
 800a954:	0800a9a3 	.word	0x0800a9a3
 800a958:	0800a96f 	.word	0x0800a96f
    case PPP_FSM_CLOSED:
	/* Go away, we're closed */
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800a95c:	7afa      	ldrb	r2, [r7, #11]
 800a95e:	2300      	movs	r3, #0
 800a960:	9300      	str	r3, [sp, #0]
 800a962:	2300      	movs	r3, #0
 800a964:	2106      	movs	r1, #6
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f000 fbcc 	bl	800b104 <fsm_sdata>
	return;
 800a96c:	e076      	b.n	800aa5c <fsm_rconfreq+0x140>
    case PPP_FSM_STOPPING:
	return;

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if( f->callbacks->down )
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	6a1b      	ldr	r3, [r3, #32]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d004      	beq.n	800a982 <fsm_rconfreq+0x66>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	6a1b      	ldr	r3, [r3, #32]
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800a982:	2100      	movs	r1, #0
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f000 facf 	bl	800af28 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2206      	movs	r2, #6
 800a98e:	741a      	strb	r2, [r3, #16]
	break;
 800a990:	e008      	b.n	800a9a4 <fsm_rconfreq+0x88>

    case PPP_FSM_STOPPED:
	/* Negotiation started by our peer */
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800a992:	2100      	movs	r1, #0
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f000 fac7 	bl	800af28 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2206      	movs	r2, #6
 800a99e:	741a      	strb	r2, [r3, #16]
	break;
 800a9a0:	e000      	b.n	800a9a4 <fsm_rconfreq+0x88>
    default:
	break;
 800a9a2:	bf00      	nop

    /*
     * Pass the requested configuration options
     * to protocol-specific code for checking.
     */
    if (f->callbacks->reqci){		/* Check CI */
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	699b      	ldr	r3, [r3, #24]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d013      	beq.n	800a9d6 <fsm_rconfreq+0xba>
	reject_if_disagree = (f->nakloops >= f->maxnakloops);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	7d5a      	ldrb	r2, [r3, #21]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	7ddb      	ldrb	r3, [r3, #23]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	bf2c      	ite	cs
 800a9ba:	2301      	movcs	r3, #1
 800a9bc:	2300      	movcc	r3, #0
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	613b      	str	r3, [r7, #16]
	code = (*f->callbacks->reqci)(f, inp, &len, reject_if_disagree);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	699c      	ldr	r4, [r3, #24]
 800a9c8:	463a      	mov	r2, r7
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	6879      	ldr	r1, [r7, #4]
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	47a0      	blx	r4
 800a9d2:	6178      	str	r0, [r7, #20]
 800a9d4:	e007      	b.n	800a9e6 <fsm_rconfreq+0xca>
    } else if (len)
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d002      	beq.n	800a9e2 <fsm_rconfreq+0xc6>
	code = CONFREJ;			/* Reject all CI */
 800a9dc:	2304      	movs	r3, #4
 800a9de:	617b      	str	r3, [r7, #20]
 800a9e0:	e001      	b.n	800a9e6 <fsm_rconfreq+0xca>
    else
	code = CONFACK;
 800a9e2:	2302      	movs	r3, #2
 800a9e4:	617b      	str	r3, [r7, #20]

    /* send the Ack, Nak or Rej to the peer */
    fsm_sdata(f, code, id, inp, len);
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	b2d9      	uxtb	r1, r3
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	7afa      	ldrb	r2, [r7, #11]
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f000 fb86 	bl	800b104 <fsm_sdata>

    if (code == CONFACK) {
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	2b02      	cmp	r3, #2
 800a9fc:	d11c      	bne.n	800aa38 <fsm_rconfreq+0x11c>
	if (f->state == PPP_FSM_ACKRCVD) {
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	7c1b      	ldrb	r3, [r3, #16]
 800aa02:	2b07      	cmp	r3, #7
 800aa04:	d111      	bne.n	800aa2a <fsm_rconfreq+0x10e>
	    UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800aa06:	68f9      	ldr	r1, [r7, #12]
 800aa08:	4816      	ldr	r0, [pc, #88]	; (800aa64 <fsm_rconfreq+0x148>)
 800aa0a:	f7ff fab3 	bl	8009f74 <sys_untimeout>
	    f->state = PPP_FSM_OPENED;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2209      	movs	r2, #9
 800aa12:	741a      	strb	r2, [r3, #16]
	    if (f->callbacks->up)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	69db      	ldr	r3, [r3, #28]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d008      	beq.n	800aa30 <fsm_rconfreq+0x114>
		(*f->callbacks->up)(f);	/* Inform upper layers */
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	69db      	ldr	r3, [r3, #28]
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	4798      	blx	r3
 800aa28:	e002      	b.n	800aa30 <fsm_rconfreq+0x114>
	} else
	    f->state = PPP_FSM_ACKSENT;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2208      	movs	r2, #8
 800aa2e:	741a      	strb	r2, [r3, #16]
	f->nakloops = 0;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2200      	movs	r2, #0
 800aa34:	755a      	strb	r2, [r3, #21]
 800aa36:	e011      	b.n	800aa5c <fsm_rconfreq+0x140>

    } else {
	/* we sent CONFACK or CONFREJ */
	if (f->state != PPP_FSM_ACKRCVD)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	7c1b      	ldrb	r3, [r3, #16]
 800aa3c:	2b07      	cmp	r3, #7
 800aa3e:	d002      	beq.n	800aa46 <fsm_rconfreq+0x12a>
	    f->state = PPP_FSM_REQSENT;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2206      	movs	r2, #6
 800aa44:	741a      	strb	r2, [r3, #16]
	if( code == CONFNAK )
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	2b03      	cmp	r3, #3
 800aa4a:	d107      	bne.n	800aa5c <fsm_rconfreq+0x140>
	    ++f->nakloops;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	7d5b      	ldrb	r3, [r3, #21]
 800aa50:	3301      	adds	r3, #1
 800aa52:	b2da      	uxtb	r2, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	755a      	strb	r2, [r3, #21]
 800aa58:	e000      	b.n	800aa5c <fsm_rconfreq+0x140>
	return;
 800aa5a:	bf00      	nop
    }
}
 800aa5c:	371c      	adds	r7, #28
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd90      	pop	{r4, r7, pc}
 800aa62:	bf00      	nop
 800aa64:	0800a6a5 	.word	0x0800a6a5

0800aa68 <fsm_rconfack>:


/*
 * fsm_rconfack - Receive Configure-Ack.
 */
static void fsm_rconfack(fsm *f, int id, u_char *inp, int len) {
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b088      	sub	sp, #32
 800aa6c:	af02      	add	r7, sp, #8
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
 800aa74:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	617b      	str	r3, [r7, #20]

    if (id != f->reqid || f->seen_ack)		/* Expected id? */
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	7cdb      	ldrb	r3, [r3, #19]
 800aa80:	461a      	mov	r2, r3
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	f040 8083 	bne.w	800ab90 <fsm_rconfack+0x128>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	7b1b      	ldrb	r3, [r3, #12]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d17e      	bne.n	800ab90 <fsm_rconfack+0x128>
	return;					/* Nope, toss... */
    if( !(f->callbacks->ackci? (*f->callbacks->ackci)(f, inp, len):
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d00d      	beq.n	800aab8 <fsm_rconfack+0x50>
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	683a      	ldr	r2, [r7, #0]
 800aaa4:	6879      	ldr	r1, [r7, #4]
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	4798      	blx	r3
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	bf0c      	ite	eq
 800aab0:	2301      	moveq	r3, #1
 800aab2:	2300      	movne	r3, #0
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	e005      	b.n	800aac4 <fsm_rconfack+0x5c>
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	bf14      	ite	ne
 800aabe:	2301      	movne	r3, #1
 800aac0:	2300      	moveq	r3, #0
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d165      	bne.n	800ab94 <fsm_rconfack+0x12c>
	  (len == 0)) ){
	/* Ack is bad - ignore it */
	ppp_error(("Received bad configure-ack: %P", inp, len));
	return;
    }
    f->seen_ack = 1;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2201      	movs	r2, #1
 800aacc:	731a      	strb	r2, [r3, #12]
    f->rnakloops = 0;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2200      	movs	r2, #0
 800aad2:	759a      	strb	r2, [r3, #22]

    switch (f->state) {
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	7c1b      	ldrb	r3, [r3, #16]
 800aad8:	3b02      	subs	r3, #2
 800aada:	2b07      	cmp	r3, #7
 800aadc:	d85c      	bhi.n	800ab98 <fsm_rconfack+0x130>
 800aade:	a201      	add	r2, pc, #4	; (adr r2, 800aae4 <fsm_rconfack+0x7c>)
 800aae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae4:	0800ab05 	.word	0x0800ab05
 800aae8:	0800ab05 	.word	0x0800ab05
 800aaec:	0800ab99 	.word	0x0800ab99
 800aaf0:	0800ab99 	.word	0x0800ab99
 800aaf4:	0800ab19 	.word	0x0800ab19
 800aaf8:	0800ab29 	.word	0x0800ab29
 800aafc:	0800ab41 	.word	0x0800ab41
 800ab00:	0800ab6d 	.word	0x0800ab6d
    case PPP_FSM_CLOSED:
    case PPP_FSM_STOPPED:
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	b2da      	uxtb	r2, r3
 800ab08:	2300      	movs	r3, #0
 800ab0a:	9300      	str	r3, [sp, #0]
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	2106      	movs	r1, #6
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f000 faf7 	bl	800b104 <fsm_sdata>
	break;
 800ab16:	e042      	b.n	800ab9e <fsm_rconfack+0x136>

    case PPP_FSM_REQSENT:
	f->state = PPP_FSM_ACKRCVD;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2207      	movs	r2, #7
 800ab1c:	741a      	strb	r2, [r3, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	7bda      	ldrb	r2, [r3, #15]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	751a      	strb	r2, [r3, #20]
	break;
 800ab26:	e03a      	b.n	800ab9e <fsm_rconfack+0x136>

    case PPP_FSM_ACKRCVD:
	/* Huh? an extra valid Ack? oh well... */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800ab28:	68f9      	ldr	r1, [r7, #12]
 800ab2a:	481e      	ldr	r0, [pc, #120]	; (800aba4 <fsm_rconfack+0x13c>)
 800ab2c:	f7ff fa22 	bl	8009f74 <sys_untimeout>
	fsm_sconfreq(f, 0);
 800ab30:	2100      	movs	r1, #0
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	f000 f9f8 	bl	800af28 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2206      	movs	r2, #6
 800ab3c:	741a      	strb	r2, [r3, #16]
	break;
 800ab3e:	e02e      	b.n	800ab9e <fsm_rconfack+0x136>

    case PPP_FSM_ACKSENT:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800ab40:	68f9      	ldr	r1, [r7, #12]
 800ab42:	4818      	ldr	r0, [pc, #96]	; (800aba4 <fsm_rconfack+0x13c>)
 800ab44:	f7ff fa16 	bl	8009f74 <sys_untimeout>
	f->state = PPP_FSM_OPENED;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2209      	movs	r2, #9
 800ab4c:	741a      	strb	r2, [r3, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	7bda      	ldrb	r2, [r3, #15]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	751a      	strb	r2, [r3, #20]
	if (f->callbacks->up)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	69db      	ldr	r3, [r3, #28]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d01d      	beq.n	800ab9c <fsm_rconfack+0x134>
	    (*f->callbacks->up)(f);	/* Inform upper layers */
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	69db      	ldr	r3, [r3, #28]
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	4798      	blx	r3
	break;
 800ab6a:	e017      	b.n	800ab9c <fsm_rconfack+0x134>

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if (f->callbacks->down)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	6a1b      	ldr	r3, [r3, #32]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d004      	beq.n	800ab80 <fsm_rconfack+0x118>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	6a1b      	ldr	r3, [r3, #32]
 800ab7c:	68f8      	ldr	r0, [r7, #12]
 800ab7e:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800ab80:	2100      	movs	r1, #0
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f000 f9d0 	bl	800af28 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2206      	movs	r2, #6
 800ab8c:	741a      	strb	r2, [r3, #16]
	break;
 800ab8e:	e006      	b.n	800ab9e <fsm_rconfack+0x136>
	return;					/* Nope, toss... */
 800ab90:	bf00      	nop
 800ab92:	e004      	b.n	800ab9e <fsm_rconfack+0x136>
	return;
 800ab94:	bf00      	nop
 800ab96:	e002      	b.n	800ab9e <fsm_rconfack+0x136>
    default:
	break;
 800ab98:	bf00      	nop
 800ab9a:	e000      	b.n	800ab9e <fsm_rconfack+0x136>
	break;
 800ab9c:	bf00      	nop
    }
}
 800ab9e:	3718      	adds	r7, #24
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	0800a6a5 	.word	0x0800a6a5

0800aba8 <fsm_rconfnakrej>:


/*
 * fsm_rconfnakrej - Receive Configure-Nak or Configure-Reject.
 */
static void fsm_rconfnakrej(fsm *f, int code, int id, u_char *inp, int len) {
 800aba8:	b590      	push	{r4, r7, lr}
 800abaa:	b089      	sub	sp, #36	; 0x24
 800abac:	af02      	add	r7, sp, #8
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
 800abb4:	603b      	str	r3, [r7, #0]
    int ret;
    int treat_as_reject;

    if (id != f->reqid || f->seen_ack)	/* Expected id? */
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	7cdb      	ldrb	r3, [r3, #19]
 800abba:	461a      	mov	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	f040 8090 	bne.w	800ace4 <fsm_rconfnakrej+0x13c>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	7b1b      	ldrb	r3, [r3, #12]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	f040 808b 	bne.w	800ace4 <fsm_rconfnakrej+0x13c>
	return;				/* Nope, toss... */

    if (code == CONFNAK) {
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	2b03      	cmp	r3, #3
 800abd2:	d121      	bne.n	800ac18 <fsm_rconfnakrej+0x70>
	++f->rnakloops;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	7d9b      	ldrb	r3, [r3, #22]
 800abd8:	3301      	adds	r3, #1
 800abda:	b2da      	uxtb	r2, r3
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	759a      	strb	r2, [r3, #22]
	treat_as_reject = (f->rnakloops >= f->maxnakloops);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	7d9a      	ldrb	r2, [r3, #22]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	7ddb      	ldrb	r3, [r3, #23]
 800abe8:	429a      	cmp	r2, r3
 800abea:	bf2c      	ite	cs
 800abec:	2301      	movcs	r3, #1
 800abee:	2300      	movcc	r3, #0
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	613b      	str	r3, [r7, #16]
	if (f->callbacks->nakci == NULL
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	691b      	ldr	r3, [r3, #16]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d074      	beq.n	800ace8 <fsm_rconfnakrej+0x140>
	    || !(ret = f->callbacks->nakci(f, inp, len, treat_as_reject))) {
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	691c      	ldr	r4, [r3, #16]
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	47a0      	blx	r4
 800ac0e:	6178      	str	r0, [r7, #20]
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d113      	bne.n	800ac3e <fsm_rconfnakrej+0x96>
	    ppp_error(("Received bad configure-nak: %P", inp, len));
	    return;
 800ac16:	e067      	b.n	800ace8 <fsm_rconfnakrej+0x140>
	}
    } else {
	f->rnakloops = 0;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	759a      	strb	r2, [r3, #22]
	if (f->callbacks->rejci == NULL
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	695b      	ldr	r3, [r3, #20]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d061      	beq.n	800acec <fsm_rconfnakrej+0x144>
	    || !(ret = f->callbacks->rejci(f, inp, len))) {
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	695b      	ldr	r3, [r3, #20]
 800ac2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac30:	6839      	ldr	r1, [r7, #0]
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	4798      	blx	r3
 800ac36:	6178      	str	r0, [r7, #20]
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d056      	beq.n	800acec <fsm_rconfnakrej+0x144>
	    ppp_error(("Received bad configure-rej: %P", inp, len));
	    return;
	}
    }

    f->seen_ack = 1;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2201      	movs	r2, #1
 800ac42:	731a      	strb	r2, [r3, #12]

    switch (f->state) {
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	7c1b      	ldrb	r3, [r3, #16]
 800ac48:	3b02      	subs	r3, #2
 800ac4a:	2b07      	cmp	r3, #7
 800ac4c:	d850      	bhi.n	800acf0 <fsm_rconfnakrej+0x148>
 800ac4e:	a201      	add	r2, pc, #4	; (adr r2, 800ac54 <fsm_rconfnakrej+0xac>)
 800ac50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac54:	0800ac75 	.word	0x0800ac75
 800ac58:	0800ac75 	.word	0x0800ac75
 800ac5c:	0800acf1 	.word	0x0800acf1
 800ac60:	0800acf1 	.word	0x0800acf1
 800ac64:	0800ac89 	.word	0x0800ac89
 800ac68:	0800aca9 	.word	0x0800aca9
 800ac6c:	0800ac89 	.word	0x0800ac89
 800ac70:	0800acc1 	.word	0x0800acc1
    case PPP_FSM_CLOSED:
    case PPP_FSM_STOPPED:
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	b2da      	uxtb	r2, r3
 800ac78:	2300      	movs	r3, #0
 800ac7a:	9300      	str	r3, [sp, #0]
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	2106      	movs	r1, #6
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f000 fa3f 	bl	800b104 <fsm_sdata>
	break;
 800ac86:	e034      	b.n	800acf2 <fsm_rconfnakrej+0x14a>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKSENT:
	/* They didn't agree to what we wanted - try another request */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800ac88:	68f9      	ldr	r1, [r7, #12]
 800ac8a:	481b      	ldr	r0, [pc, #108]	; (800acf8 <fsm_rconfnakrej+0x150>)
 800ac8c:	f7ff f972 	bl	8009f74 <sys_untimeout>
	if (ret < 0)
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	da03      	bge.n	800ac9e <fsm_rconfnakrej+0xf6>
	    f->state = PPP_FSM_STOPPED;		/* kludge for stopping CCP */
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2203      	movs	r2, #3
 800ac9a:	741a      	strb	r2, [r3, #16]
	else
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
	break;
 800ac9c:	e029      	b.n	800acf2 <fsm_rconfnakrej+0x14a>
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
 800ac9e:	2100      	movs	r1, #0
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f000 f941 	bl	800af28 <fsm_sconfreq>
	break;
 800aca6:	e024      	b.n	800acf2 <fsm_rconfnakrej+0x14a>

    case PPP_FSM_ACKRCVD:
	/* Got a Nak/reject when we had already had an Ack?? oh well... */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800aca8:	68f9      	ldr	r1, [r7, #12]
 800acaa:	4813      	ldr	r0, [pc, #76]	; (800acf8 <fsm_rconfnakrej+0x150>)
 800acac:	f7ff f962 	bl	8009f74 <sys_untimeout>
	fsm_sconfreq(f, 0);
 800acb0:	2100      	movs	r1, #0
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 f938 	bl	800af28 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2206      	movs	r2, #6
 800acbc:	741a      	strb	r2, [r3, #16]
	break;
 800acbe:	e018      	b.n	800acf2 <fsm_rconfnakrej+0x14a>

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if (f->callbacks->down)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	6a1b      	ldr	r3, [r3, #32]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d004      	beq.n	800acd4 <fsm_rconfnakrej+0x12c>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	6a1b      	ldr	r3, [r3, #32]
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800acd4:	2100      	movs	r1, #0
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f000 f926 	bl	800af28 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2206      	movs	r2, #6
 800ace0:	741a      	strb	r2, [r3, #16]
	break;
 800ace2:	e006      	b.n	800acf2 <fsm_rconfnakrej+0x14a>
	return;				/* Nope, toss... */
 800ace4:	bf00      	nop
 800ace6:	e004      	b.n	800acf2 <fsm_rconfnakrej+0x14a>
	    return;
 800ace8:	bf00      	nop
 800acea:	e002      	b.n	800acf2 <fsm_rconfnakrej+0x14a>
	    return;
 800acec:	bf00      	nop
 800acee:	e000      	b.n	800acf2 <fsm_rconfnakrej+0x14a>
    default:
	break;
 800acf0:	bf00      	nop
    }
}
 800acf2:	371c      	adds	r7, #28
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd90      	pop	{r4, r7, pc}
 800acf8:	0800a6a5 	.word	0x0800a6a5

0800acfc <fsm_rtermreq>:


/*
 * fsm_rtermreq - Receive Terminate-Req.
 */
static void fsm_rtermreq(fsm *f, int id, u_char *p, int len) {
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b088      	sub	sp, #32
 800ad00:	af02      	add	r7, sp, #8
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]
 800ad08:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	617b      	str	r3, [r7, #20]

    switch (f->state) {
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	7c1b      	ldrb	r3, [r3, #16]
 800ad14:	2b07      	cmp	r3, #7
 800ad16:	db29      	blt.n	800ad6c <fsm_rtermreq+0x70>
 800ad18:	2b08      	cmp	r3, #8
 800ad1a:	dd02      	ble.n	800ad22 <fsm_rtermreq+0x26>
 800ad1c:	2b09      	cmp	r3, #9
 800ad1e:	d004      	beq.n	800ad2a <fsm_rtermreq+0x2e>
	if (f->callbacks->down)
	    (*f->callbacks->down)(f);	/* Inform upper layers */
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
	break;
    default:
	break;
 800ad20:	e024      	b.n	800ad6c <fsm_rtermreq+0x70>
	f->state = PPP_FSM_REQSENT;		/* Start over but keep trying */
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2206      	movs	r2, #6
 800ad26:	741a      	strb	r2, [r3, #16]
	break;
 800ad28:	e021      	b.n	800ad6e <fsm_rtermreq+0x72>
	f->retransmits = 0;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	751a      	strb	r2, [r3, #20]
	f->state = PPP_FSM_STOPPING;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2205      	movs	r2, #5
 800ad34:	741a      	strb	r2, [r3, #16]
	if (f->callbacks->down)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	6a1b      	ldr	r3, [r3, #32]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d004      	beq.n	800ad4a <fsm_rtermreq+0x4e>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	6a1b      	ldr	r3, [r3, #32]
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	4798      	blx	r3
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800ad4a:	68f9      	ldr	r1, [r7, #12]
 800ad4c:	480e      	ldr	r0, [pc, #56]	; (800ad88 <fsm_rtermreq+0x8c>)
 800ad4e:	f7ff f911 	bl	8009f74 <sys_untimeout>
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	7b9b      	ldrb	r3, [r3, #14]
 800ad56:	461a      	mov	r2, r3
 800ad58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ad5c:	fb03 f302 	mul.w	r3, r3, r2
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	4909      	ldr	r1, [pc, #36]	; (800ad88 <fsm_rtermreq+0x8c>)
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7ff f8d9 	bl	8009f1c <sys_timeout>
	break;
 800ad6a:	e000      	b.n	800ad6e <fsm_rtermreq+0x72>
	break;
 800ad6c:	bf00      	nop
    }

    fsm_sdata(f, TERMACK, id, NULL, 0);
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	2300      	movs	r3, #0
 800ad74:	9300      	str	r3, [sp, #0]
 800ad76:	2300      	movs	r3, #0
 800ad78:	2106      	movs	r1, #6
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f000 f9c2 	bl	800b104 <fsm_sdata>
}
 800ad80:	bf00      	nop
 800ad82:	3718      	adds	r7, #24
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	0800a6a5 	.word	0x0800a6a5

0800ad8c <fsm_rtermack>:


/*
 * fsm_rtermack - Receive Terminate-Ack.
 */
static void fsm_rtermack(fsm *f) {
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
    switch (f->state) {
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	7c1b      	ldrb	r3, [r3, #16]
 800ad98:	3b04      	subs	r3, #4
 800ad9a:	2b05      	cmp	r3, #5
 800ad9c:	d848      	bhi.n	800ae30 <fsm_rtermack+0xa4>
 800ad9e:	a201      	add	r2, pc, #4	; (adr r2, 800ada4 <fsm_rtermack+0x18>)
 800ada0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada4:	0800adbd 	.word	0x0800adbd
 800ada8:	0800ade1 	.word	0x0800ade1
 800adac:	0800ae31 	.word	0x0800ae31
 800adb0:	0800ae05 	.word	0x0800ae05
 800adb4:	0800ae31 	.word	0x0800ae31
 800adb8:	0800ae0d 	.word	0x0800ae0d
    case PPP_FSM_CLOSING:
	UNTIMEOUT(fsm_timeout, f);
 800adbc:	6879      	ldr	r1, [r7, #4]
 800adbe:	4821      	ldr	r0, [pc, #132]	; (800ae44 <fsm_rtermack+0xb8>)
 800adc0:	f7ff f8d8 	bl	8009f74 <sys_untimeout>
	f->state = PPP_FSM_CLOSED;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2202      	movs	r2, #2
 800adc8:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add0:	2b00      	cmp	r3, #0
 800add2:	d02f      	beq.n	800ae34 <fsm_rtermack+0xa8>
	    (*f->callbacks->finished)(f);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	4798      	blx	r3
	break;
 800adde:	e029      	b.n	800ae34 <fsm_rtermack+0xa8>
    case PPP_FSM_STOPPING:
	UNTIMEOUT(fsm_timeout, f);
 800ade0:	6879      	ldr	r1, [r7, #4]
 800ade2:	4818      	ldr	r0, [pc, #96]	; (800ae44 <fsm_rtermack+0xb8>)
 800ade4:	f7ff f8c6 	bl	8009f74 <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2203      	movs	r2, #3
 800adec:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d01f      	beq.n	800ae38 <fsm_rtermack+0xac>
	    (*f->callbacks->finished)(f);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	4798      	blx	r3
	break;
 800ae02:	e019      	b.n	800ae38 <fsm_rtermack+0xac>

    case PPP_FSM_ACKRCVD:
	f->state = PPP_FSM_REQSENT;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2206      	movs	r2, #6
 800ae08:	741a      	strb	r2, [r3, #16]
	break;
 800ae0a:	e016      	b.n	800ae3a <fsm_rtermack+0xae>

    case PPP_FSM_OPENED:
	if (f->callbacks->down)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	6a1b      	ldr	r3, [r3, #32]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d004      	beq.n	800ae20 <fsm_rtermack+0x94>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	6a1b      	ldr	r3, [r3, #32]
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	4798      	blx	r3
	fsm_sconfreq(f, 0);
 800ae20:	2100      	movs	r1, #0
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f880 	bl	800af28 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2206      	movs	r2, #6
 800ae2c:	741a      	strb	r2, [r3, #16]
	break;
 800ae2e:	e004      	b.n	800ae3a <fsm_rtermack+0xae>
    default:
	break;
 800ae30:	bf00      	nop
 800ae32:	e002      	b.n	800ae3a <fsm_rtermack+0xae>
	break;
 800ae34:	bf00      	nop
 800ae36:	e000      	b.n	800ae3a <fsm_rtermack+0xae>
	break;
 800ae38:	bf00      	nop
    }
}
 800ae3a:	bf00      	nop
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	0800a6a5 	.word	0x0800a6a5

0800ae48 <fsm_rcoderej>:


/*
 * fsm_rcoderej - Receive an Code-Reject.
 */
static void fsm_rcoderej(fsm *f, u_char *inp, int len) {
 800ae48:	b480      	push	{r7}
 800ae4a:	b087      	sub	sp, #28
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
    u_char code, id;

    if (len < HEADERLEN) {
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b03      	cmp	r3, #3
 800ae58:	dd11      	ble.n	800ae7e <fsm_rcoderej+0x36>
	FSMDEBUG(("fsm_rcoderej: Rcvd short Code-Reject packet!"));
	return;
    }
    GETCHAR(code, inp);
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	1c5a      	adds	r2, r3, #1
 800ae5e:	60ba      	str	r2, [r7, #8]
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	75fb      	strb	r3, [r7, #23]
    GETCHAR(id, inp);
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	1c5a      	adds	r2, r3, #1
 800ae68:	60ba      	str	r2, [r7, #8]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	75bb      	strb	r3, [r7, #22]
    ppp_warn(("%s: Rcvd Code-Reject for code %d, id %d", PROTO_NAME(f), code, id));

    if( f->state == PPP_FSM_ACKRCVD )
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	7c1b      	ldrb	r3, [r3, #16]
 800ae72:	2b07      	cmp	r3, #7
 800ae74:	d104      	bne.n	800ae80 <fsm_rcoderej+0x38>
	f->state = PPP_FSM_REQSENT;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2206      	movs	r2, #6
 800ae7a:	741a      	strb	r2, [r3, #16]
 800ae7c:	e000      	b.n	800ae80 <fsm_rcoderej+0x38>
	return;
 800ae7e:	bf00      	nop
}
 800ae80:	371c      	adds	r7, #28
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
	...

0800ae8c <fsm_protreject>:
/*
 * fsm_protreject - Peer doesn't speak this protocol.
 *
 * Treat this as a catastrophic error (RXJ-).
 */
void fsm_protreject(fsm *f) {
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	7c1b      	ldrb	r3, [r3, #16]
 800ae98:	3b02      	subs	r3, #2
 800ae9a:	2b07      	cmp	r3, #7
 800ae9c:	d83e      	bhi.n	800af1c <fsm_protreject+0x90>
 800ae9e:	a201      	add	r2, pc, #4	; (adr r2, 800aea4 <fsm_protreject+0x18>)
 800aea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea4:	0800aecd 	.word	0x0800aecd
 800aea8:	0800aef1 	.word	0x0800aef1
 800aeac:	0800aec5 	.word	0x0800aec5
 800aeb0:	0800aee9 	.word	0x0800aee9
 800aeb4:	0800aee9 	.word	0x0800aee9
 800aeb8:	0800aee9 	.word	0x0800aee9
 800aebc:	0800aee9 	.word	0x0800aee9
 800aec0:	0800af0d 	.word	0x0800af0d
    case PPP_FSM_CLOSING:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800aec4:	6879      	ldr	r1, [r7, #4]
 800aec6:	4817      	ldr	r0, [pc, #92]	; (800af24 <fsm_protreject+0x98>)
 800aec8:	f7ff f854 	bl	8009f74 <sys_untimeout>
	/* fall through */
	/* no break */
    case PPP_FSM_CLOSED:
	f->state = PPP_FSM_CLOSED;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2202      	movs	r2, #2
 800aed0:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d01c      	beq.n	800af16 <fsm_protreject+0x8a>
	    (*f->callbacks->finished)(f);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	4798      	blx	r3
	break;
 800aee6:	e016      	b.n	800af16 <fsm_protreject+0x8a>

    case PPP_FSM_STOPPING:
    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800aee8:	6879      	ldr	r1, [r7, #4]
 800aeea:	480e      	ldr	r0, [pc, #56]	; (800af24 <fsm_protreject+0x98>)
 800aeec:	f7ff f842 	bl	8009f74 <sys_untimeout>
	/* fall through */
	/* no break */
    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_STOPPED;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2203      	movs	r2, #3
 800aef4:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00c      	beq.n	800af1a <fsm_protreject+0x8e>
	    (*f->callbacks->finished)(f);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	4798      	blx	r3
	break;
 800af0a:	e006      	b.n	800af1a <fsm_protreject+0x8e>

    case PPP_FSM_OPENED:
	terminate_layer(f, PPP_FSM_STOPPING);
 800af0c:	2105      	movs	r1, #5
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f7ff fb0e 	bl	800a530 <terminate_layer>
	break;
 800af14:	e002      	b.n	800af1c <fsm_protreject+0x90>
	break;
 800af16:	bf00      	nop
 800af18:	e000      	b.n	800af1c <fsm_protreject+0x90>
	break;
 800af1a:	bf00      	nop
    default:
	FSMDEBUG(("%s: Protocol-reject event in state %d!",
		  PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800af1c:	bf00      	nop
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	0800a6a5 	.word	0x0800a6a5

0800af28 <fsm_sconfreq>:


/*
 * fsm_sconfreq - Send a Configure-Request.
 */
static void fsm_sconfreq(fsm *f, int retransmit) {
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	617b      	str	r3, [r7, #20]
    struct pbuf *p;
    u_char *outp;
    int cilen;

    if( f->state != PPP_FSM_REQSENT && f->state != PPP_FSM_ACKRCVD && f->state != PPP_FSM_ACKSENT ){
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	7c1b      	ldrb	r3, [r3, #16]
 800af3c:	2b06      	cmp	r3, #6
 800af3e:	d017      	beq.n	800af70 <fsm_sconfreq+0x48>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	7c1b      	ldrb	r3, [r3, #16]
 800af44:	2b07      	cmp	r3, #7
 800af46:	d013      	beq.n	800af70 <fsm_sconfreq+0x48>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	7c1b      	ldrb	r3, [r3, #16]
 800af4c:	2b08      	cmp	r3, #8
 800af4e:	d00f      	beq.n	800af70 <fsm_sconfreq+0x48>
	/* Not currently negotiating - reset options */
	if( f->callbacks->resetci )
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d004      	beq.n	800af64 <fsm_sconfreq+0x3c>
	    (*f->callbacks->resetci)(f);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	4798      	blx	r3
	f->nakloops = 0;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	755a      	strb	r2, [r3, #21]
	f->rnakloops = 0;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	759a      	strb	r2, [r3, #22]
    }

    if( !retransmit ){
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10d      	bne.n	800af92 <fsm_sconfreq+0x6a>
	/* New request - reset retransmission counter, use new ID */
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	7bda      	ldrb	r2, [r3, #15]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	751a      	strb	r2, [r3, #20]
	f->reqid = ++f->id;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	7c9b      	ldrb	r3, [r3, #18]
 800af82:	3301      	adds	r3, #1
 800af84:	b2da      	uxtb	r2, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	749a      	strb	r2, [r3, #18]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	7c9a      	ldrb	r2, [r3, #18]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	74da      	strb	r2, [r3, #19]
    }

    f->seen_ack = 0;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	731a      	strb	r2, [r3, #12]

    /*
     * Make up the request packet
     */
    if( f->callbacks->cilen && f->callbacks->addci ){
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d018      	beq.n	800afd4 <fsm_sconfreq+0xac>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d013      	beq.n	800afd4 <fsm_sconfreq+0xac>
	cilen = (*f->callbacks->cilen)(f);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	4798      	blx	r3
 800afb6:	4603      	mov	r3, r0
 800afb8:	60bb      	str	r3, [r7, #8]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800afc0:	1f1a      	subs	r2, r3, #4
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	da07      	bge.n	800afd8 <fsm_sconfreq+0xb0>
	    cilen = pcb->peer_mru - HEADERLEN;
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800afce:	3b04      	subs	r3, #4
 800afd0:	60bb      	str	r3, [r7, #8]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800afd2:	e001      	b.n	800afd8 <fsm_sconfreq+0xb0>
    } else
	cilen = 0;
 800afd4:	2300      	movs	r3, #0
 800afd6:	60bb      	str	r3, [r7, #8]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(cilen + HEADERLEN + PPP_HDRLEN), PBUF_RAM);
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	b29b      	uxth	r3, r3
 800afdc:	3308      	adds	r3, #8
 800afde:	b29b      	uxth	r3, r3
 800afe0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800afe4:	4619      	mov	r1, r3
 800afe6:	2000      	movs	r0, #0
 800afe8:	f7f8 fcc8 	bl	800397c <pbuf_alloc>
 800afec:	6138      	str	r0, [r7, #16]
    if(NULL == p)
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d07a      	beq.n	800b0ea <fsm_sconfreq+0x1c2>
        return;
    if(p->tot_len != p->len) {
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	891a      	ldrh	r2, [r3, #8]
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	895b      	ldrh	r3, [r3, #10]
 800affc:	429a      	cmp	r2, r3
 800affe:	d003      	beq.n	800b008 <fsm_sconfreq+0xe0>
        pbuf_free(p);
 800b000:	6938      	ldr	r0, [r7, #16]
 800b002:	f7f8 ff59 	bl	8003eb8 <pbuf_free>
        return;
 800b006:	e071      	b.n	800b0ec <fsm_sconfreq+0x1c4>
    }

    /* send the request to our peer */
    outp = (u_char*)p->payload;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	60fb      	str	r3, [r7, #12]
    MAKEHEADER(outp, f->protocol);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	1c5a      	adds	r2, r3, #1
 800b012:	60fa      	str	r2, [r7, #12]
 800b014:	22ff      	movs	r2, #255	; 0xff
 800b016:	701a      	strb	r2, [r3, #0]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	1c5a      	adds	r2, r3, #1
 800b01c:	60fa      	str	r2, [r7, #12]
 800b01e:	2203      	movs	r2, #3
 800b020:	701a      	strb	r2, [r3, #0]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	1c5a      	adds	r2, r3, #1
 800b026:	60fa      	str	r2, [r7, #12]
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	89d2      	ldrh	r2, [r2, #14]
 800b02c:	0a12      	lsrs	r2, r2, #8
 800b02e:	b292      	uxth	r2, r2
 800b030:	b2d2      	uxtb	r2, r2
 800b032:	701a      	strb	r2, [r3, #0]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	1c5a      	adds	r2, r3, #1
 800b038:	60fa      	str	r2, [r7, #12]
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	89d2      	ldrh	r2, [r2, #14]
 800b03e:	b2d2      	uxtb	r2, r2
 800b040:	701a      	strb	r2, [r3, #0]
    PUTCHAR(CONFREQ, outp);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	1c5a      	adds	r2, r3, #1
 800b046:	60fa      	str	r2, [r7, #12]
 800b048:	2201      	movs	r2, #1
 800b04a:	701a      	strb	r2, [r3, #0]
    PUTCHAR(f->reqid, outp);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	1c5a      	adds	r2, r3, #1
 800b050:	60fa      	str	r2, [r7, #12]
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	7cd2      	ldrb	r2, [r2, #19]
 800b056:	701a      	strb	r2, [r3, #0]
    PUTSHORT(cilen + HEADERLEN, outp);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	1c5a      	adds	r2, r3, #1
 800b05c:	60fa      	str	r2, [r7, #12]
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	3204      	adds	r2, #4
 800b062:	1212      	asrs	r2, r2, #8
 800b064:	b2d2      	uxtb	r2, r2
 800b066:	701a      	strb	r2, [r3, #0]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	1c5a      	adds	r2, r3, #1
 800b06c:	60fa      	str	r2, [r7, #12]
 800b06e:	68ba      	ldr	r2, [r7, #8]
 800b070:	b2d2      	uxtb	r2, r2
 800b072:	3204      	adds	r2, #4
 800b074:	b2d2      	uxtb	r2, r2
 800b076:	701a      	strb	r2, [r3, #0]
    if (cilen != 0) {
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d01a      	beq.n	800b0b4 <fsm_sconfreq+0x18c>
	(*f->callbacks->addci)(f, outp, &cilen);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	f107 0208 	add.w	r2, r7, #8
 800b088:	68f9      	ldr	r1, [r7, #12]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	4798      	blx	r3
	LWIP_ASSERT("cilen == p->len - HEADERLEN - PPP_HDRLEN", cilen == p->len - HEADERLEN - PPP_HDRLEN);
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	895b      	ldrh	r3, [r3, #10]
 800b092:	f1a3 0208 	sub.w	r2, r3, #8
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d00b      	beq.n	800b0b4 <fsm_sconfreq+0x18c>
 800b09c:	4b15      	ldr	r3, [pc, #84]	; (800b0f4 <fsm_sconfreq+0x1cc>)
 800b09e:	f240 22f2 	movw	r2, #754	; 0x2f2
 800b0a2:	4915      	ldr	r1, [pc, #84]	; (800b0f8 <fsm_sconfreq+0x1d0>)
 800b0a4:	4815      	ldr	r0, [pc, #84]	; (800b0fc <fsm_sconfreq+0x1d4>)
 800b0a6:	f005 fa51 	bl	801054c <iprintf>
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	f005 fb50 	bl	8010750 <fflush>
 800b0b0:	f005 fa95 	bl	80105de <abort>
    }

    ppp_write(pcb, p);
 800b0b4:	6939      	ldr	r1, [r7, #16]
 800b0b6:	6978      	ldr	r0, [r7, #20]
 800b0b8:	f003 fede 	bl	800ee78 <ppp_write>

    /* start the retransmit timer */
    --f->retransmits;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	7d1b      	ldrb	r3, [r3, #20]
 800b0c0:	3b01      	subs	r3, #1
 800b0c2:	b2da      	uxtb	r2, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	751a      	strb	r2, [r3, #20]
    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800b0c8:	6879      	ldr	r1, [r7, #4]
 800b0ca:	480d      	ldr	r0, [pc, #52]	; (800b100 <fsm_sconfreq+0x1d8>)
 800b0cc:	f7fe ff52 	bl	8009f74 <sys_untimeout>
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	7b9b      	ldrb	r3, [r3, #14]
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b0da:	fb03 f302 	mul.w	r3, r3, r2
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	4907      	ldr	r1, [pc, #28]	; (800b100 <fsm_sconfreq+0x1d8>)
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7fe ff1a 	bl	8009f1c <sys_timeout>
 800b0e8:	e000      	b.n	800b0ec <fsm_sconfreq+0x1c4>
        return;
 800b0ea:	bf00      	nop
}
 800b0ec:	3718      	adds	r7, #24
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	08013b34 	.word	0x08013b34
 800b0f8:	08013b58 	.word	0x08013b58
 800b0fc:	08013b84 	.word	0x08013b84
 800b100:	0800a6a5 	.word	0x0800a6a5

0800b104 <fsm_sdata>:
/*
 * fsm_sdata - Send some data.
 *
 * Used for all packets sent to our peer by this module.
 */
void fsm_sdata(fsm *f, u_char code, u_char id, const u_char *data, int datalen) {
 800b104:	b580      	push	{r7, lr}
 800b106:	b088      	sub	sp, #32
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	607b      	str	r3, [r7, #4]
 800b10e:	460b      	mov	r3, r1
 800b110:	72fb      	strb	r3, [r7, #11]
 800b112:	4613      	mov	r3, r2
 800b114:	72bb      	strb	r3, [r7, #10]
    ppp_pcb *pcb = f->pcb;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	61fb      	str	r3, [r7, #28]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    /* Adjust length to be smaller than MTU */
    if (datalen > pcb->peer_mru - HEADERLEN)
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800b122:	1f1a      	subs	r2, r3, #4
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	429a      	cmp	r2, r3
 800b128:	da04      	bge.n	800b134 <fsm_sdata+0x30>
	datalen = pcb->peer_mru - HEADERLEN;
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800b130:	3b04      	subs	r3, #4
 800b132:	62bb      	str	r3, [r7, #40]	; 0x28
    outlen = datalen + HEADERLEN;
 800b134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b136:	3304      	adds	r3, #4
 800b138:	61bb      	str	r3, [r7, #24]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(outlen + PPP_HDRLEN), PBUF_RAM);
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	3304      	adds	r3, #4
 800b140:	b29b      	uxth	r3, r3
 800b142:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b146:	4619      	mov	r1, r3
 800b148:	2000      	movs	r0, #0
 800b14a:	f7f8 fc17 	bl	800397c <pbuf_alloc>
 800b14e:	6178      	str	r0, [r7, #20]
    if(NULL == p)
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d04f      	beq.n	800b1f6 <fsm_sdata+0xf2>
        return;
    if(p->tot_len != p->len) {
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	891a      	ldrh	r2, [r3, #8]
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	895b      	ldrh	r3, [r3, #10]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d003      	beq.n	800b16a <fsm_sdata+0x66>
        pbuf_free(p);
 800b162:	6978      	ldr	r0, [r7, #20]
 800b164:	f7f8 fea8 	bl	8003eb8 <pbuf_free>
        return;
 800b168:	e046      	b.n	800b1f8 <fsm_sdata+0xf4>
    }

    outp = (u_char*)p->payload;
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	613b      	str	r3, [r7, #16]
    if (datalen && data != NULL) { /* && data != outp + PPP_HDRLEN + HEADERLEN)  -- was only for fsm_sconfreq() */
 800b170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b172:	2b00      	cmp	r3, #0
 800b174:	d009      	beq.n	800b18a <fsm_sdata+0x86>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d006      	beq.n	800b18a <fsm_sdata+0x86>
      MEMCPY(outp + PPP_HDRLEN + HEADERLEN, data, datalen);
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	3308      	adds	r3, #8
 800b180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b182:	6879      	ldr	r1, [r7, #4]
 800b184:	4618      	mov	r0, r3
 800b186:	f005 fc03 	bl	8010990 <memcpy>
    }
    MAKEHEADER(outp, f->protocol);
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	1c5a      	adds	r2, r3, #1
 800b18e:	613a      	str	r2, [r7, #16]
 800b190:	22ff      	movs	r2, #255	; 0xff
 800b192:	701a      	strb	r2, [r3, #0]
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	1c5a      	adds	r2, r3, #1
 800b198:	613a      	str	r2, [r7, #16]
 800b19a:	2203      	movs	r2, #3
 800b19c:	701a      	strb	r2, [r3, #0]
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	1c5a      	adds	r2, r3, #1
 800b1a2:	613a      	str	r2, [r7, #16]
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	89d2      	ldrh	r2, [r2, #14]
 800b1a8:	0a12      	lsrs	r2, r2, #8
 800b1aa:	b292      	uxth	r2, r2
 800b1ac:	b2d2      	uxtb	r2, r2
 800b1ae:	701a      	strb	r2, [r3, #0]
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	1c5a      	adds	r2, r3, #1
 800b1b4:	613a      	str	r2, [r7, #16]
 800b1b6:	68fa      	ldr	r2, [r7, #12]
 800b1b8:	89d2      	ldrh	r2, [r2, #14]
 800b1ba:	b2d2      	uxtb	r2, r2
 800b1bc:	701a      	strb	r2, [r3, #0]
    PUTCHAR(code, outp);
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	1c5a      	adds	r2, r3, #1
 800b1c2:	613a      	str	r2, [r7, #16]
 800b1c4:	7afa      	ldrb	r2, [r7, #11]
 800b1c6:	701a      	strb	r2, [r3, #0]
    PUTCHAR(id, outp);
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	1c5a      	adds	r2, r3, #1
 800b1cc:	613a      	str	r2, [r7, #16]
 800b1ce:	7aba      	ldrb	r2, [r7, #10]
 800b1d0:	701a      	strb	r2, [r3, #0]
    PUTSHORT(outlen, outp);
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	1c5a      	adds	r2, r3, #1
 800b1d6:	613a      	str	r2, [r7, #16]
 800b1d8:	69ba      	ldr	r2, [r7, #24]
 800b1da:	1212      	asrs	r2, r2, #8
 800b1dc:	b2d2      	uxtb	r2, r2
 800b1de:	701a      	strb	r2, [r3, #0]
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	1c5a      	adds	r2, r3, #1
 800b1e4:	613a      	str	r2, [r7, #16]
 800b1e6:	69ba      	ldr	r2, [r7, #24]
 800b1e8:	b2d2      	uxtb	r2, r2
 800b1ea:	701a      	strb	r2, [r3, #0]
    ppp_write(pcb, p);
 800b1ec:	6979      	ldr	r1, [r7, #20]
 800b1ee:	69f8      	ldr	r0, [r7, #28]
 800b1f0:	f003 fe42 	bl	800ee78 <ppp_write>
 800b1f4:	e000      	b.n	800b1f8 <fsm_sdata+0xf4>
        return;
 800b1f6:	bf00      	nop
}
 800b1f8:	3720      	adds	r7, #32
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
	...

0800b200 <ipcp_init>:
#endif /* PPP_OPTIONS */

/*
 * ipcp_init - Initialize IPCP.
 */
static void ipcp_init(ppp_pcb *pcb) {
 800b200:	b580      	push	{r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	33f8      	adds	r3, #248	; 0xf8
 800b20c:	617b      	str	r3, [r7, #20]

    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800b214:	613b      	str	r3, [r7, #16]
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800b21c:	60fb      	str	r3, [r7, #12]

    f->pcb = pcb;
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	601a      	str	r2, [r3, #0]
    f->protocol = PPP_IPCP;
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	f248 0221 	movw	r2, #32801	; 0x8021
 800b22a:	81da      	strh	r2, [r3, #14]
    f->callbacks = &ipcp_callbacks;
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	4a15      	ldr	r2, [pc, #84]	; (800b284 <ipcp_init+0x84>)
 800b230:	605a      	str	r2, [r3, #4]
    fsm_init(f);
 800b232:	6978      	ldr	r0, [r7, #20]
 800b234:	f7ff f88c 	bl	800a350 <fsm_init>
     * Some 3G modems use repeated IPCP NAKs as a way of stalling
     * until they can contact a server on the network, so we increase
     * the default number of NAKs we accept before we start treating
     * them as rejects.
     */
    f->maxnakloops = 100;
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	2264      	movs	r2, #100	; 0x64
 800b23c:	75da      	strb	r2, [r3, #23]
#if 0 /* Not necessary, everything is cleared in ppp_new() */
    memset(wo, 0, sizeof(*wo));
    memset(ao, 0, sizeof(*ao));
#endif /* 0 */

    wo->neg_addr = wo->old_addrs = 1;
 800b23e:	693a      	ldr	r2, [r7, #16]
 800b240:	7813      	ldrb	r3, [r2, #0]
 800b242:	f043 0302 	orr.w	r3, r3, #2
 800b246:	7013      	strb	r3, [r2, #0]
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b250:	b2d9      	uxtb	r1, r3
 800b252:	693a      	ldr	r2, [r7, #16]
 800b254:	7813      	ldrb	r3, [r2, #0]
 800b256:	f361 0300 	bfi	r3, r1, #0, #1
 800b25a:	7013      	strb	r3, [r2, #0]
#if 0 /* UNUSED */
    /* wanting default route by default */
    wo->default_route = 1;
#endif /* UNUSED */

    ao->neg_addr = ao->old_addrs = 1;
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	7813      	ldrb	r3, [r2, #0]
 800b260:	f043 0302 	orr.w	r3, r3, #2
 800b264:	7013      	strb	r3, [r2, #0]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b26e:	b2d9      	uxtb	r1, r3
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	7813      	ldrb	r3, [r2, #0]
 800b274:	f361 0300 	bfi	r3, r1, #0, #1
 800b278:	7013      	strb	r3, [r2, #0]
     * and defaultroute options.
     */
    ao->proxy_arp = 1;
    ao->default_route = 1;
#endif /* UNUSED */
}
 800b27a:	bf00      	nop
 800b27c:	3718      	adds	r7, #24
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	08013e78 	.word	0x08013e78

0800b288 <ipcp_open>:


/*
 * ipcp_open - IPCP is allowed to come up.
 */
static void ipcp_open(ppp_pcb *pcb) {
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	33f8      	adds	r3, #248	; 0xf8
 800b294:	60fb      	str	r3, [r7, #12]
    fsm_open(f);
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f7ff f8f0 	bl	800a47c <fsm_open>
    pcb->ipcp_is_open = 1;
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800b2a2:	f043 0302 	orr.w	r3, r3, #2
 800b2a6:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
}
 800b2aa:	bf00      	nop
 800b2ac:	3710      	adds	r7, #16
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <ipcp_close>:


/*
 * ipcp_close - Take IPCP down.
 */
static void ipcp_close(ppp_pcb *pcb, const char *reason) {
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b084      	sub	sp, #16
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	6039      	str	r1, [r7, #0]
    fsm *f = &pcb->ipcp_fsm;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	33f8      	adds	r3, #248	; 0xf8
 800b2c0:	60fb      	str	r3, [r7, #12]
    fsm_close(f, reason);
 800b2c2:	6839      	ldr	r1, [r7, #0]
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f7ff f9a1 	bl	800a60c <fsm_close>
}
 800b2ca:	bf00      	nop
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <ipcp_lowerup>:


/*
 * ipcp_lowerup - The lower layer is up.
 */
static void ipcp_lowerup(ppp_pcb *pcb) {
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	33f8      	adds	r3, #248	; 0xf8
 800b2de:	60fb      	str	r3, [r7, #12]
    fsm_lowerup(f);
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f7ff f852 	bl	800a38a <fsm_lowerup>
}
 800b2e6:	bf00      	nop
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <ipcp_lowerdown>:


/*
 * ipcp_lowerdown - The lower layer is down.
 */
static void ipcp_lowerdown(ppp_pcb *pcb) {
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b084      	sub	sp, #16
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	33f8      	adds	r3, #248	; 0xf8
 800b2fa:	60fb      	str	r3, [r7, #12]
    fsm_lowerdown(f);
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f7ff f869 	bl	800a3d4 <fsm_lowerdown>
}
 800b302:	bf00      	nop
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <ipcp_input>:


/*
 * ipcp_input - Input IPCP packet.
 */
static void ipcp_input(ppp_pcb *pcb, u_char *p, int len) {
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b086      	sub	sp, #24
 800b30e:	af00      	add	r7, sp, #0
 800b310:	60f8      	str	r0, [r7, #12]
 800b312:	60b9      	str	r1, [r7, #8]
 800b314:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	33f8      	adds	r3, #248	; 0xf8
 800b31a:	617b      	str	r3, [r7, #20]
    fsm_input(f, p, len);
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	68b9      	ldr	r1, [r7, #8]
 800b320:	6978      	ldr	r0, [r7, #20]
 800b322:	f7ff fa57 	bl	800a7d4 <fsm_input>
}
 800b326:	bf00      	nop
 800b328:	3718      	adds	r7, #24
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <ipcp_protrej>:
/*
 * ipcp_protrej - A Protocol-Reject was received for IPCP.
 *
 * Pretend the lower layer went down, so we shut up.
 */
static void ipcp_protrej(ppp_pcb *pcb) {
 800b32e:	b580      	push	{r7, lr}
 800b330:	b084      	sub	sp, #16
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	33f8      	adds	r3, #248	; 0xf8
 800b33a:	60fb      	str	r3, [r7, #12]
    fsm_lowerdown(f);
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f7ff f849 	bl	800a3d4 <fsm_lowerdown>
}
 800b342:	bf00      	nop
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <ipcp_resetci>:

/*
 * ipcp_resetci - Reset our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static void ipcp_resetci(fsm *f) {
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b086      	sub	sp, #24
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	617b      	str	r3, [r7, #20]
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800b35e:	613b      	str	r3, [r7, #16]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b366:	60fb      	str	r3, [r7, #12]
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800b36e:	60bb      	str	r3, [r7, #8]

    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	f003 0301 	and.w	r3, r3, #1
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d106      	bne.n	800b38c <ipcp_resetci+0x42>
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	f003 0302 	and.w	r3, r3, #2
 800b386:	b2db      	uxtb	r3, r3
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d00f      	beq.n	800b3ac <ipcp_resetci+0x62>
	(ao->neg_addr || ao->old_addrs);
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	f003 0301 	and.w	r3, r3, #1
 800b394:	b2db      	uxtb	r3, r3
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800b396:	2b00      	cmp	r3, #0
 800b398:	d106      	bne.n	800b3a8 <ipcp_resetci+0x5e>
	(ao->neg_addr || ao->old_addrs);
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	f003 0302 	and.w	r3, r3, #2
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d001      	beq.n	800b3ac <ipcp_resetci+0x62>
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e000      	b.n	800b3ae <ipcp_resetci+0x64>
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	f003 0301 	and.w	r3, r3, #1
 800b3b4:	b2d9      	uxtb	r1, r3
 800b3b6:	693a      	ldr	r2, [r7, #16]
 800b3b8:	7813      	ldrb	r3, [r2, #0]
 800b3ba:	f361 0382 	bfi	r3, r1, #2, #1
 800b3be:	7013      	strb	r3, [r2, #0]
    if (wo->ouraddr == 0)
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d104      	bne.n	800b3d2 <ipcp_resetci+0x88>
	wo->accept_local = 1;
 800b3c8:	693a      	ldr	r2, [r7, #16]
 800b3ca:	7813      	ldrb	r3, [r2, #0]
 800b3cc:	f043 0308 	orr.w	r3, r3, #8
 800b3d0:	7013      	strb	r3, [r2, #0]
    if (wo->hisaddr == 0)
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d104      	bne.n	800b3e4 <ipcp_resetci+0x9a>
	wo->accept_remote = 1;
 800b3da:	693a      	ldr	r2, [r7, #16]
 800b3dc:	7813      	ldrb	r3, [r2, #0]
 800b3de:	f043 0310 	orr.w	r3, r3, #16
 800b3e2:	7013      	strb	r3, [r2, #0]
#if LWIP_DNS
    wo->req_dns1 = wo->req_dns2 = pcb->settings.usepeerdns;	/* Request DNS addresses from the peer */
#endif /* LWIP_DNS */
    *go = *wo;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	693a      	ldr	r2, [r7, #16]
 800b3e8:	ca07      	ldmia	r2, {r0, r1, r2}
 800b3ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (!pcb->ask_for_local)
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b3f4:	f003 0301 	and.w	r3, r3, #1
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d102      	bne.n	800b404 <ipcp_resetci+0xba>
	go->ouraddr = 0;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	605a      	str	r2, [r3, #4]
	if (wo->hisaddr) {
	    wo->accept_remote = 0;
	}
    }
#endif /* UNUSED */
    BZERO(&pcb->ipcp_hisoptions, sizeof(ipcp_options));
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800b40a:	220c      	movs	r2, #12
 800b40c:	2100      	movs	r1, #0
 800b40e:	4618      	mov	r0, r3
 800b410:	f005 fae3 	bl	80109da <memset>
}
 800b414:	bf00      	nop
 800b416:	3718      	adds	r7, #24
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <ipcp_cilen>:

/*
 * ipcp_cilen - Return length of our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static int ipcp_cilen(fsm *f) {
 800b41c:	b480      	push	{r7}
 800b41e:	b087      	sub	sp, #28
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	617b      	str	r3, [r7, #20]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b430:	613b      	str	r3, [r7, #16]
#if VJ_SUPPORT
    ipcp_options *wo = &pcb->ipcp_wantoptions;
#endif /* VJ_SUPPORT */
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800b438:	60fb      	str	r3, [r7, #12]

    /*
     * First see if we want to change our options to the old
     * forms because we have received old forms from the peer.
     */
    if (go->neg_addr && go->old_addrs && !ho->neg_addr && ho->old_addrs)
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	f003 0301 	and.w	r3, r3, #1
 800b442:	b2db      	uxtb	r3, r3
 800b444:	2b00      	cmp	r3, #0
 800b446:	d019      	beq.n	800b47c <ipcp_cilen+0x60>
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	f003 0302 	and.w	r3, r3, #2
 800b450:	b2db      	uxtb	r3, r3
 800b452:	2b00      	cmp	r3, #0
 800b454:	d012      	beq.n	800b47c <ipcp_cilen+0x60>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	f003 0301 	and.w	r3, r3, #1
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	2b00      	cmp	r3, #0
 800b462:	d10b      	bne.n	800b47c <ipcp_cilen+0x60>
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	f003 0302 	and.w	r3, r3, #2
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d004      	beq.n	800b47c <ipcp_cilen+0x60>
	go->neg_addr = 0;
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	7813      	ldrb	r3, [r2, #0]
 800b476:	f36f 0300 	bfc	r3, #0, #1
 800b47a:	7013      	strb	r3, [r2, #0]
	    go->vj_protocol = ho->vj_protocol;
	}
    }
#endif /* VJ_SUPPORT */

    return (LENCIADDRS(!go->neg_addr && go->old_addrs) +
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	f003 0301 	and.w	r3, r3, #1
 800b484:	b2db      	uxtb	r3, r3
 800b486:	2b00      	cmp	r3, #0
 800b488:	d108      	bne.n	800b49c <ipcp_cilen+0x80>
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	f003 0302 	and.w	r3, r3, #2
 800b492:	b2db      	uxtb	r3, r3
 800b494:	2b00      	cmp	r3, #0
 800b496:	d001      	beq.n	800b49c <ipcp_cilen+0x80>
 800b498:	220a      	movs	r2, #10
 800b49a:	e000      	b.n	800b49e <ipcp_cilen+0x82>
 800b49c:	2200      	movs	r2, #0
#if VJ_SUPPORT
	    LENCIVJ(go->neg_vj, go->old_vj) +
#endif /* VJ_SUPPORT */
	    LENCIADDR(go->neg_addr) +
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	f003 0301 	and.w	r3, r3, #1
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d001      	beq.n	800b4b0 <ipcp_cilen+0x94>
 800b4ac:	2306      	movs	r3, #6
 800b4ae:	e000      	b.n	800b4b2 <ipcp_cilen+0x96>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	4413      	add	r3, r2
#if 0 /* UNUSED - WINS */
	    LENCIWINS(go->winsaddr[0]) +
	    LENCIWINS(go->winsaddr[1]) +
#endif /* UNUSED - WINS */
	    0);
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	371c      	adds	r7, #28
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <ipcp_addci>:

/*
 * ipcp_addci - Add our desired CIs to a packet.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static void ipcp_addci(fsm *f, u_char *ucp, int *lenp) {
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b08a      	sub	sp, #40	; 0x28
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	60b9      	str	r1, [r7, #8]
 800b4ca:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	623b      	str	r3, [r7, #32]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800b4d2:	6a3b      	ldr	r3, [r7, #32]
 800b4d4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b4d8:	61fb      	str	r3, [r7, #28]
    int len = *lenp;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	627b      	str	r3, [r7, #36]	; 0x24
	} else \
	    addr = 0; \
    }
#endif /* UNUSED - WINS */

    ADDCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	f003 0301 	and.w	r3, r3, #1
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d15e      	bne.n	800b5ac <ipcp_addci+0xec>
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	f003 0302 	and.w	r3, r3, #2
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d057      	beq.n	800b5ac <ipcp_addci+0xec>
 800b4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fe:	2b09      	cmp	r3, #9
 800b500:	dd4f      	ble.n	800b5a2 <ipcp_addci+0xe2>
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	1c5a      	adds	r2, r3, #1
 800b506:	60ba      	str	r2, [r7, #8]
 800b508:	2201      	movs	r2, #1
 800b50a:	701a      	strb	r2, [r3, #0]
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	1c5a      	adds	r2, r3, #1
 800b510:	60ba      	str	r2, [r7, #8]
 800b512:	220a      	movs	r2, #10
 800b514:	701a      	strb	r2, [r3, #0]
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7f6 fab5 	bl	8001a8a <lwip_htonl>
 800b520:	61b8      	str	r0, [r7, #24]
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	1c5a      	adds	r2, r3, #1
 800b526:	60ba      	str	r2, [r7, #8]
 800b528:	69ba      	ldr	r2, [r7, #24]
 800b52a:	0e12      	lsrs	r2, r2, #24
 800b52c:	b2d2      	uxtb	r2, r2
 800b52e:	701a      	strb	r2, [r3, #0]
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	1c5a      	adds	r2, r3, #1
 800b534:	60ba      	str	r2, [r7, #8]
 800b536:	69ba      	ldr	r2, [r7, #24]
 800b538:	0c12      	lsrs	r2, r2, #16
 800b53a:	b2d2      	uxtb	r2, r2
 800b53c:	701a      	strb	r2, [r3, #0]
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	1c5a      	adds	r2, r3, #1
 800b542:	60ba      	str	r2, [r7, #8]
 800b544:	69ba      	ldr	r2, [r7, #24]
 800b546:	0a12      	lsrs	r2, r2, #8
 800b548:	b2d2      	uxtb	r2, r2
 800b54a:	701a      	strb	r2, [r3, #0]
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	1c5a      	adds	r2, r3, #1
 800b550:	60ba      	str	r2, [r7, #8]
 800b552:	69ba      	ldr	r2, [r7, #24]
 800b554:	b2d2      	uxtb	r2, r2
 800b556:	701a      	strb	r2, [r3, #0]
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7f6 fa94 	bl	8001a8a <lwip_htonl>
 800b562:	61b8      	str	r0, [r7, #24]
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	1c5a      	adds	r2, r3, #1
 800b568:	60ba      	str	r2, [r7, #8]
 800b56a:	69ba      	ldr	r2, [r7, #24]
 800b56c:	0e12      	lsrs	r2, r2, #24
 800b56e:	b2d2      	uxtb	r2, r2
 800b570:	701a      	strb	r2, [r3, #0]
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	1c5a      	adds	r2, r3, #1
 800b576:	60ba      	str	r2, [r7, #8]
 800b578:	69ba      	ldr	r2, [r7, #24]
 800b57a:	0c12      	lsrs	r2, r2, #16
 800b57c:	b2d2      	uxtb	r2, r2
 800b57e:	701a      	strb	r2, [r3, #0]
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	1c5a      	adds	r2, r3, #1
 800b584:	60ba      	str	r2, [r7, #8]
 800b586:	69ba      	ldr	r2, [r7, #24]
 800b588:	0a12      	lsrs	r2, r2, #8
 800b58a:	b2d2      	uxtb	r2, r2
 800b58c:	701a      	strb	r2, [r3, #0]
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	1c5a      	adds	r2, r3, #1
 800b592:	60ba      	str	r2, [r7, #8]
 800b594:	69ba      	ldr	r2, [r7, #24]
 800b596:	b2d2      	uxtb	r2, r2
 800b598:	701a      	strb	r2, [r3, #0]
 800b59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59c:	3b0a      	subs	r3, #10
 800b59e:	627b      	str	r3, [r7, #36]	; 0x24
 800b5a0:	e004      	b.n	800b5ac <ipcp_addci+0xec>
 800b5a2:	69fa      	ldr	r2, [r7, #28]
 800b5a4:	7813      	ldrb	r3, [r2, #0]
 800b5a6:	f36f 0341 	bfc	r3, #1, #1
 800b5aa:	7013      	strb	r3, [r2, #0]
#if VJ_SUPPORT
    ADDCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    ADDCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	f003 0301 	and.w	r3, r3, #1
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d036      	beq.n	800b628 <ipcp_addci+0x168>
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5bc:	2b05      	cmp	r3, #5
 800b5be:	dd2e      	ble.n	800b61e <ipcp_addci+0x15e>
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	1c5a      	adds	r2, r3, #1
 800b5c4:	60ba      	str	r2, [r7, #8]
 800b5c6:	2203      	movs	r2, #3
 800b5c8:	701a      	strb	r2, [r3, #0]
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	1c5a      	adds	r2, r3, #1
 800b5ce:	60ba      	str	r2, [r7, #8]
 800b5d0:	2206      	movs	r2, #6
 800b5d2:	701a      	strb	r2, [r3, #0]
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7f6 fa56 	bl	8001a8a <lwip_htonl>
 800b5de:	6178      	str	r0, [r7, #20]
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	1c5a      	adds	r2, r3, #1
 800b5e4:	60ba      	str	r2, [r7, #8]
 800b5e6:	697a      	ldr	r2, [r7, #20]
 800b5e8:	0e12      	lsrs	r2, r2, #24
 800b5ea:	b2d2      	uxtb	r2, r2
 800b5ec:	701a      	strb	r2, [r3, #0]
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	1c5a      	adds	r2, r3, #1
 800b5f2:	60ba      	str	r2, [r7, #8]
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	0c12      	lsrs	r2, r2, #16
 800b5f8:	b2d2      	uxtb	r2, r2
 800b5fa:	701a      	strb	r2, [r3, #0]
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	1c5a      	adds	r2, r3, #1
 800b600:	60ba      	str	r2, [r7, #8]
 800b602:	697a      	ldr	r2, [r7, #20]
 800b604:	0a12      	lsrs	r2, r2, #8
 800b606:	b2d2      	uxtb	r2, r2
 800b608:	701a      	strb	r2, [r3, #0]
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	1c5a      	adds	r2, r3, #1
 800b60e:	60ba      	str	r2, [r7, #8]
 800b610:	697a      	ldr	r2, [r7, #20]
 800b612:	b2d2      	uxtb	r2, r2
 800b614:	701a      	strb	r2, [r3, #0]
 800b616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b618:	3b06      	subs	r3, #6
 800b61a:	627b      	str	r3, [r7, #36]	; 0x24
 800b61c:	e004      	b.n	800b628 <ipcp_addci+0x168>
 800b61e:	69fa      	ldr	r2, [r7, #28]
 800b620:	7813      	ldrb	r3, [r2, #0]
 800b622:	f36f 0300 	bfc	r3, #0, #1
 800b626:	7013      	strb	r3, [r2, #0]
    ADDCIWINS(CI_MS_WINS1, go->winsaddr[0]);

    ADDCIWINS(CI_MS_WINS2, go->winsaddr[1]);
#endif /* UNUSED - WINS */
    
    *lenp -= len;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62e:	1ad2      	subs	r2, r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	601a      	str	r2, [r3, #0]
}
 800b634:	bf00      	nop
 800b636:	3728      	adds	r7, #40	; 0x28
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <ipcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int ipcp_ackci(fsm *f, u_char *p, int len) {
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b08a      	sub	sp, #40	; 0x28
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	627b      	str	r3, [r7, #36]	; 0x24
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800b64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b650:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b654:	623b      	str	r3, [r7, #32]
	if (addr != cilong) \
	    goto bad; \
    }
#endif /* UNUSED - WINS */

    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800b656:	6a3b      	ldr	r3, [r7, #32]
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	f003 0301 	and.w	r3, r3, #1
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	2b00      	cmp	r3, #0
 800b662:	d179      	bne.n	800b758 <ipcp_ackci+0x11c>
 800b664:	6a3b      	ldr	r3, [r7, #32]
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	f003 0302 	and.w	r3, r3, #2
 800b66c:	b2db      	uxtb	r3, r3
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d072      	beq.n	800b758 <ipcp_ackci+0x11c>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	3b0a      	subs	r3, #10
 800b676:	607b      	str	r3, [r7, #4]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f2c0 80bb 	blt.w	800b7f6 <ipcp_ackci+0x1ba>
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	1c5a      	adds	r2, r3, #1
 800b684:	60ba      	str	r2, [r7, #8]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	83fb      	strh	r3, [r7, #30]
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	1c5a      	adds	r2, r3, #1
 800b68e:	60ba      	str	r2, [r7, #8]
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	83bb      	strh	r3, [r7, #28]
 800b694:	8bbb      	ldrh	r3, [r7, #28]
 800b696:	2b0a      	cmp	r3, #10
 800b698:	f040 80b8 	bne.w	800b80c <ipcp_ackci+0x1d0>
 800b69c:	8bfb      	ldrh	r3, [r7, #30]
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	f040 80b4 	bne.w	800b80c <ipcp_ackci+0x1d0>
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	1c5a      	adds	r2, r3, #1
 800b6a8:	60ba      	str	r2, [r7, #8]
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	021b      	lsls	r3, r3, #8
 800b6ae:	61bb      	str	r3, [r7, #24]
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	1c5a      	adds	r2, r3, #1
 800b6b4:	60ba      	str	r2, [r7, #8]
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	61bb      	str	r3, [r7, #24]
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	021b      	lsls	r3, r3, #8
 800b6c4:	61bb      	str	r3, [r7, #24]
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	1c5a      	adds	r2, r3, #1
 800b6ca:	60ba      	str	r2, [r7, #8]
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	61bb      	str	r3, [r7, #24]
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	021b      	lsls	r3, r3, #8
 800b6da:	61bb      	str	r3, [r7, #24]
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	1c5a      	adds	r2, r3, #1
 800b6e0:	60ba      	str	r2, [r7, #8]
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	61bb      	str	r3, [r7, #24]
 800b6ec:	69b8      	ldr	r0, [r7, #24]
 800b6ee:	f7f6 f9cc 	bl	8001a8a <lwip_htonl>
 800b6f2:	6178      	str	r0, [r7, #20]
 800b6f4:	6a3b      	ldr	r3, [r7, #32]
 800b6f6:	685a      	ldr	r2, [r3, #4]
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d17d      	bne.n	800b7fa <ipcp_ackci+0x1be>
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	1c5a      	adds	r2, r3, #1
 800b702:	60ba      	str	r2, [r7, #8]
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	021b      	lsls	r3, r3, #8
 800b708:	61bb      	str	r3, [r7, #24]
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	1c5a      	adds	r2, r3, #1
 800b70e:	60ba      	str	r2, [r7, #8]
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	461a      	mov	r2, r3
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	4313      	orrs	r3, r2
 800b718:	61bb      	str	r3, [r7, #24]
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	021b      	lsls	r3, r3, #8
 800b71e:	61bb      	str	r3, [r7, #24]
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	1c5a      	adds	r2, r3, #1
 800b724:	60ba      	str	r2, [r7, #8]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	461a      	mov	r2, r3
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	61bb      	str	r3, [r7, #24]
 800b730:	69bb      	ldr	r3, [r7, #24]
 800b732:	021b      	lsls	r3, r3, #8
 800b734:	61bb      	str	r3, [r7, #24]
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	1c5a      	adds	r2, r3, #1
 800b73a:	60ba      	str	r2, [r7, #8]
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	461a      	mov	r2, r3
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	4313      	orrs	r3, r2
 800b744:	61bb      	str	r3, [r7, #24]
 800b746:	69b8      	ldr	r0, [r7, #24]
 800b748:	f7f6 f99f 	bl	8001a8a <lwip_htonl>
 800b74c:	6178      	str	r0, [r7, #20]
 800b74e:	6a3b      	ldr	r3, [r7, #32]
 800b750:	689a      	ldr	r2, [r3, #8]
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	429a      	cmp	r2, r3
 800b756:	d152      	bne.n	800b7fe <ipcp_ackci+0x1c2>
#if VJ_SUPPORT
    ACKCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800b758:	6a3b      	ldr	r3, [r7, #32]
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	f003 0301 	and.w	r3, r3, #1
 800b760:	b2db      	uxtb	r3, r3
 800b762:	2b00      	cmp	r3, #0
 800b764:	d042      	beq.n	800b7ec <ipcp_ackci+0x1b0>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	3b06      	subs	r3, #6
 800b76a:	607b      	str	r3, [r7, #4]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	db47      	blt.n	800b802 <ipcp_ackci+0x1c6>
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	1c5a      	adds	r2, r3, #1
 800b776:	60ba      	str	r2, [r7, #8]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	83fb      	strh	r3, [r7, #30]
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	1c5a      	adds	r2, r3, #1
 800b780:	60ba      	str	r2, [r7, #8]
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	83bb      	strh	r3, [r7, #28]
 800b786:	8bbb      	ldrh	r3, [r7, #28]
 800b788:	2b06      	cmp	r3, #6
 800b78a:	d13f      	bne.n	800b80c <ipcp_ackci+0x1d0>
 800b78c:	8bfb      	ldrh	r3, [r7, #30]
 800b78e:	2b03      	cmp	r3, #3
 800b790:	d13c      	bne.n	800b80c <ipcp_ackci+0x1d0>
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	1c5a      	adds	r2, r3, #1
 800b796:	60ba      	str	r2, [r7, #8]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	021b      	lsls	r3, r3, #8
 800b79c:	613b      	str	r3, [r7, #16]
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	1c5a      	adds	r2, r3, #1
 800b7a2:	60ba      	str	r2, [r7, #8]
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	613b      	str	r3, [r7, #16]
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	021b      	lsls	r3, r3, #8
 800b7b2:	613b      	str	r3, [r7, #16]
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	1c5a      	adds	r2, r3, #1
 800b7b8:	60ba      	str	r2, [r7, #8]
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	461a      	mov	r2, r3
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	613b      	str	r3, [r7, #16]
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	021b      	lsls	r3, r3, #8
 800b7c8:	613b      	str	r3, [r7, #16]
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	1c5a      	adds	r2, r3, #1
 800b7ce:	60ba      	str	r2, [r7, #8]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	613b      	str	r3, [r7, #16]
 800b7da:	6938      	ldr	r0, [r7, #16]
 800b7dc:	f7f6 f955 	bl	8001a8a <lwip_htonl>
 800b7e0:	6178      	str	r0, [r7, #20]
 800b7e2:	6a3b      	ldr	r3, [r7, #32]
 800b7e4:	685a      	ldr	r2, [r3, #4]
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d10c      	bne.n	800b806 <ipcp_ackci+0x1ca>
#endif /* UNUSED - WINS */

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10b      	bne.n	800b80a <ipcp_ackci+0x1ce>
	goto bad;
    return (1);
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e00b      	b.n	800b80e <ipcp_ackci+0x1d2>
    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800b7f6:	bf00      	nop
 800b7f8:	e008      	b.n	800b80c <ipcp_ackci+0x1d0>
 800b7fa:	bf00      	nop
 800b7fc:	e006      	b.n	800b80c <ipcp_ackci+0x1d0>
 800b7fe:	bf00      	nop
 800b800:	e004      	b.n	800b80c <ipcp_ackci+0x1d0>
    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800b802:	bf00      	nop
 800b804:	e002      	b.n	800b80c <ipcp_ackci+0x1d0>
 800b806:	bf00      	nop
 800b808:	e000      	b.n	800b80c <ipcp_ackci+0x1d0>
	goto bad;
 800b80a:	bf00      	nop

bad:
    IPCPDEBUG(("ipcp_ackci: received bad Ack!"));
    return (0);
 800b80c:	2300      	movs	r3, #0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3728      	adds	r7, #40	; 0x28
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <ipcp_nakci>:
 *
 * Returns:
 *	0 - Nak was bad.
 *	1 - Nak was good.
 */
static int ipcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 800b816:	b590      	push	{r4, r7, lr}
 800b818:	b093      	sub	sp, #76	; 0x4c
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	60f8      	str	r0, [r7, #12]
 800b81e:	60b9      	str	r1, [r7, #8]
 800b820:	607a      	str	r2, [r7, #4]
 800b822:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	647b      	str	r3, [r7, #68]	; 0x44
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800b82a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b82c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b830:	643b      	str	r3, [r7, #64]	; 0x40
    u32_t cidnsaddr;
#endif /* LWIP_DNS */
    ipcp_options no;		/* options we've seen Naks for */
    ipcp_options try_;		/* options to request next time */

    BZERO(&no, sizeof(no));
 800b832:	f107 031c 	add.w	r3, r7, #28
 800b836:	220c      	movs	r2, #12
 800b838:	2100      	movs	r1, #0
 800b83a:	4618      	mov	r0, r3
 800b83c:	f005 f8cd 	bl	80109da <memset>
    try_ = *go;
 800b840:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b842:	f107 0310 	add.w	r3, r7, #16
 800b846:	ca07      	ldmia	r2, {r0, r1, r2}
 800b848:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /*
     * Accept the peer's idea of {our,his} address, if different
     * from our idea, only if the accept_{local,remote} flag is set.
     */
    NAKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800b84c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	f003 0301 	and.w	r3, r3, #1
 800b854:	b2db      	uxtb	r3, r3
 800b856:	2b00      	cmp	r3, #0
 800b858:	f040 8096 	bne.w	800b988 <ipcp_nakci+0x172>
 800b85c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	f003 0302 	and.w	r3, r3, #2
 800b864:	b2db      	uxtb	r3, r3
 800b866:	2b00      	cmp	r3, #0
 800b868:	f000 808e 	beq.w	800b988 <ipcp_nakci+0x172>
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	785b      	ldrb	r3, [r3, #1]
 800b870:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b874:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b878:	2b0a      	cmp	r3, #10
 800b87a:	f040 8085 	bne.w	800b988 <ipcp_nakci+0x172>
 800b87e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	429a      	cmp	r2, r3
 800b886:	dc7f      	bgt.n	800b988 <ipcp_nakci+0x172>
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d17b      	bne.n	800b988 <ipcp_nakci+0x172>
 800b890:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	1ad3      	subs	r3, r2, r3
 800b898:	607b      	str	r3, [r7, #4]
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	3302      	adds	r3, #2
 800b89e:	60bb      	str	r3, [r7, #8]
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	1c5a      	adds	r2, r3, #1
 800b8a4:	60ba      	str	r2, [r7, #8]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	021b      	lsls	r3, r3, #8
 800b8aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	1c5a      	adds	r2, r3, #1
 800b8b0:	60ba      	str	r2, [r7, #8]
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8be:	021b      	lsls	r3, r3, #8
 800b8c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	1c5a      	adds	r2, r3, #1
 800b8c6:	60ba      	str	r2, [r7, #8]
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d4:	021b      	lsls	r3, r3, #8
 800b8d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	1c5a      	adds	r2, r3, #1
 800b8dc:	60ba      	str	r2, [r7, #8]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b8ea:	f7f6 f8ce 	bl	8001a8a <lwip_htonl>
 800b8ee:	6378      	str	r0, [r7, #52]	; 0x34
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	1c5a      	adds	r2, r3, #1
 800b8f4:	60ba      	str	r2, [r7, #8]
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	021b      	lsls	r3, r3, #8
 800b8fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	1c5a      	adds	r2, r3, #1
 800b900:	60ba      	str	r2, [r7, #8]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	461a      	mov	r2, r3
 800b906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b908:	4313      	orrs	r3, r2
 800b90a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90e:	021b      	lsls	r3, r3, #8
 800b910:	63bb      	str	r3, [r7, #56]	; 0x38
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	1c5a      	adds	r2, r3, #1
 800b916:	60ba      	str	r2, [r7, #8]
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	461a      	mov	r2, r3
 800b91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91e:	4313      	orrs	r3, r2
 800b920:	63bb      	str	r3, [r7, #56]	; 0x38
 800b922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b924:	021b      	lsls	r3, r3, #8
 800b926:	63bb      	str	r3, [r7, #56]	; 0x38
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	1c5a      	adds	r2, r3, #1
 800b92c:	60ba      	str	r2, [r7, #8]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	461a      	mov	r2, r3
 800b932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b934:	4313      	orrs	r3, r2
 800b936:	63bb      	str	r3, [r7, #56]	; 0x38
 800b938:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b93a:	f7f6 f8a6 	bl	8001a8a <lwip_htonl>
 800b93e:	6338      	str	r0, [r7, #48]	; 0x30
 800b940:	7f3b      	ldrb	r3, [r7, #28]
 800b942:	f043 0302 	orr.w	r3, r3, #2
 800b946:	773b      	strb	r3, [r7, #28]
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d004      	beq.n	800b958 <ipcp_nakci+0x142>
 800b94e:	7c3b      	ldrb	r3, [r7, #16]
 800b950:	f36f 0341 	bfc	r3, #1, #1
 800b954:	743b      	strb	r3, [r7, #16]
 800b956:	e017      	b.n	800b988 <ipcp_nakci+0x172>
 800b958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	f003 0308 	and.w	r3, r3, #8
 800b960:	b2db      	uxtb	r3, r3
 800b962:	2b00      	cmp	r3, #0
 800b964:	d004      	beq.n	800b970 <ipcp_nakci+0x15a>
 800b966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d001      	beq.n	800b970 <ipcp_nakci+0x15a>
 800b96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b96e:	617b      	str	r3, [r7, #20]
 800b970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	f003 0310 	and.w	r3, r3, #16
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d004      	beq.n	800b988 <ipcp_nakci+0x172>
 800b97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b980:	2b00      	cmp	r3, #0
 800b982:	d001      	beq.n	800b988 <ipcp_nakci+0x172>
 800b984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b986:	61bb      	str	r3, [r7, #24]
		}
	    }
	    );
#endif /* VJ_SUPPORT */

    NAKCIADDR(CI_ADDR, neg_addr,
 800b988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	f003 0301 	and.w	r3, r3, #1
 800b990:	b2db      	uxtb	r3, r3
 800b992:	2b00      	cmp	r3, #0
 800b994:	f000 816e 	beq.w	800bc74 <ipcp_nakci+0x45e>
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	785b      	ldrb	r3, [r3, #1]
 800b99c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b9a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b9a4:	2b06      	cmp	r3, #6
 800b9a6:	f040 8165 	bne.w	800bc74 <ipcp_nakci+0x45e>
 800b9aa:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	f300 815f 	bgt.w	800bc74 <ipcp_nakci+0x45e>
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	2b03      	cmp	r3, #3
 800b9bc:	f040 815a 	bne.w	800bc74 <ipcp_nakci+0x45e>
 800b9c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	1ad3      	subs	r3, r2, r3
 800b9c8:	607b      	str	r3, [r7, #4]
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	3302      	adds	r3, #2
 800b9ce:	60bb      	str	r3, [r7, #8]
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	1c5a      	adds	r2, r3, #1
 800b9d4:	60ba      	str	r2, [r7, #8]
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	021b      	lsls	r3, r3, #8
 800b9da:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	1c5a      	adds	r2, r3, #1
 800b9e0:	60ba      	str	r2, [r7, #8]
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ee:	021b      	lsls	r3, r3, #8
 800b9f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	1c5a      	adds	r2, r3, #1
 800b9f6:	60ba      	str	r2, [r7, #8]
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba04:	021b      	lsls	r3, r3, #8
 800ba06:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	1c5a      	adds	r2, r3, #1
 800ba0c:	60ba      	str	r2, [r7, #8]
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	461a      	mov	r2, r3
 800ba12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba14:	4313      	orrs	r3, r2
 800ba16:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba1a:	f7f6 f836 	bl	8001a8a <lwip_htonl>
 800ba1e:	6378      	str	r0, [r7, #52]	; 0x34
 800ba20:	7f3b      	ldrb	r3, [r7, #28]
 800ba22:	f043 0301 	orr.w	r3, r3, #1
 800ba26:	773b      	strb	r3, [r7, #28]
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d008      	beq.n	800ba40 <ipcp_nakci+0x22a>
 800ba2e:	7c3b      	ldrb	r3, [r7, #16]
 800ba30:	f36f 0300 	bfc	r3, #0, #1
 800ba34:	743b      	strb	r3, [r7, #16]
 800ba36:	7c3b      	ldrb	r3, [r7, #16]
 800ba38:	f36f 0341 	bfc	r3, #1, #1
 800ba3c:	743b      	strb	r3, [r7, #16]
 800ba3e:	e119      	b.n	800bc74 <ipcp_nakci+0x45e>
 800ba40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	f003 0308 	and.w	r3, r3, #8
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	f000 8112 	beq.w	800bc74 <ipcp_nakci+0x45e>
 800ba50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f000 810e 	beq.w	800bc74 <ipcp_nakci+0x45e>
 800ba58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba5a:	617b      	str	r3, [r7, #20]
     * If they want to negotiate about IP addresses, we comply.
     * If they want us to ask for compression, we refuse.
     * If they want us to ask for ms-dns, we do that, since some
     * peers get huffy if we don't.
     */
    while (len >= CILEN_VOID) {
 800ba5c:	e10a      	b.n	800bc74 <ipcp_nakci+0x45e>
	GETCHAR(citype, p);
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	1c5a      	adds	r2, r3, #1
 800ba62:	60ba      	str	r2, [r7, #8]
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GETCHAR(cilen, p);
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	1c5a      	adds	r2, r3, #1
 800ba6e:	60ba      	str	r2, [r7, #8]
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if ( cilen < CILEN_VOID || (len -= cilen) < 0 )
 800ba76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	f240 810c 	bls.w	800bc98 <ipcp_nakci+0x482>
 800ba80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	607b      	str	r3, [r7, #4]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	f2c0 8103 	blt.w	800bc98 <ipcp_nakci+0x482>
	    goto bad;
	next = p + cilen - 2;
 800ba92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ba96:	3b02      	subs	r3, #2
 800ba98:	68ba      	ldr	r2, [r7, #8]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	62bb      	str	r3, [r7, #40]	; 0x28

	switch (citype) {
 800ba9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d003      	beq.n	800baae <ipcp_nakci+0x298>
 800baa6:	2b03      	cmp	r3, #3
 800baa8:	f000 808d 	beq.w	800bbc6 <ipcp_nakci+0x3b0>
	    if (ciaddr1)
		try_.winsaddr[citype == CI_MS_WINS2] = ciaddr1;
	    break;
#endif /* UNUSED - WINS */
	default:
	    break;
 800baac:	e0e0      	b.n	800bc70 <ipcp_nakci+0x45a>
	    if ((!go->neg_addr && go->old_addrs) || no.old_addrs
 800baae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	f003 0301 	and.w	r3, r3, #1
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d107      	bne.n	800bacc <ipcp_nakci+0x2b6>
 800babc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	f003 0302 	and.w	r3, r3, #2
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f040 80e6 	bne.w	800bc98 <ipcp_nakci+0x482>
 800bacc:	7f3b      	ldrb	r3, [r7, #28]
 800bace:	f003 0302 	and.w	r3, r3, #2
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f040 80df 	bne.w	800bc98 <ipcp_nakci+0x482>
		|| cilen != CILEN_ADDRS)
 800bada:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bade:	2b0a      	cmp	r3, #10
 800bae0:	f040 80da 	bne.w	800bc98 <ipcp_nakci+0x482>
	    try_.neg_addr = 0;
 800bae4:	7c3b      	ldrb	r3, [r7, #16]
 800bae6:	f36f 0300 	bfc	r3, #0, #1
 800baea:	743b      	strb	r3, [r7, #16]
	    GETLONG(l, p);
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	1c5a      	adds	r2, r3, #1
 800baf0:	60ba      	str	r2, [r7, #8]
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	021b      	lsls	r3, r3, #8
 800baf6:	63bb      	str	r3, [r7, #56]	; 0x38
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	1c5a      	adds	r2, r3, #1
 800bafc:	60ba      	str	r2, [r7, #8]
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	461a      	mov	r2, r3
 800bb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb04:	4313      	orrs	r3, r2
 800bb06:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0a:	021b      	lsls	r3, r3, #8
 800bb0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	1c5a      	adds	r2, r3, #1
 800bb12:	60ba      	str	r2, [r7, #8]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	461a      	mov	r2, r3
 800bb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb20:	021b      	lsls	r3, r3, #8
 800bb22:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	1c5a      	adds	r2, r3, #1
 800bb28:	60ba      	str	r2, [r7, #8]
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb30:	4313      	orrs	r3, r2
 800bb32:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr1 = lwip_htonl(l);
 800bb34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb36:	f7f5 ffa8 	bl	8001a8a <lwip_htonl>
 800bb3a:	6378      	str	r0, [r7, #52]	; 0x34
	    if (ciaddr1 && go->accept_local)
 800bb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d008      	beq.n	800bb54 <ipcp_nakci+0x33e>
 800bb42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	f003 0308 	and.w	r3, r3, #8
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d001      	beq.n	800bb54 <ipcp_nakci+0x33e>
		try_.ouraddr = ciaddr1;
 800bb50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb52:	617b      	str	r3, [r7, #20]
	    GETLONG(l, p);
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	1c5a      	adds	r2, r3, #1
 800bb58:	60ba      	str	r2, [r7, #8]
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	021b      	lsls	r3, r3, #8
 800bb5e:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	1c5a      	adds	r2, r3, #1
 800bb64:	60ba      	str	r2, [r7, #8]
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	461a      	mov	r2, r3
 800bb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb72:	021b      	lsls	r3, r3, #8
 800bb74:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	1c5a      	adds	r2, r3, #1
 800bb7a:	60ba      	str	r2, [r7, #8]
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	461a      	mov	r2, r3
 800bb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb82:	4313      	orrs	r3, r2
 800bb84:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb88:	021b      	lsls	r3, r3, #8
 800bb8a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	1c5a      	adds	r2, r3, #1
 800bb90:	60ba      	str	r2, [r7, #8]
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	461a      	mov	r2, r3
 800bb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr2 = lwip_htonl(l);
 800bb9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb9e:	f7f5 ff74 	bl	8001a8a <lwip_htonl>
 800bba2:	6338      	str	r0, [r7, #48]	; 0x30
	    if (ciaddr2 && go->accept_remote)
 800bba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d008      	beq.n	800bbbc <ipcp_nakci+0x3a6>
 800bbaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	f003 0310 	and.w	r3, r3, #16
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d001      	beq.n	800bbbc <ipcp_nakci+0x3a6>
		try_.hisaddr = ciaddr2;
 800bbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbba:	61bb      	str	r3, [r7, #24]
	    no.old_addrs = 1;
 800bbbc:	7f3b      	ldrb	r3, [r7, #28]
 800bbbe:	f043 0302 	orr.w	r3, r3, #2
 800bbc2:	773b      	strb	r3, [r7, #28]
	    break;
 800bbc4:	e054      	b.n	800bc70 <ipcp_nakci+0x45a>
	    if (go->neg_addr || no.neg_addr || cilen != CILEN_ADDR)
 800bbc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	f003 0301 	and.w	r3, r3, #1
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d161      	bne.n	800bc98 <ipcp_nakci+0x482>
 800bbd4:	7f3b      	ldrb	r3, [r7, #28]
 800bbd6:	f003 0301 	and.w	r3, r3, #1
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d15b      	bne.n	800bc98 <ipcp_nakci+0x482>
 800bbe0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bbe4:	2b06      	cmp	r3, #6
 800bbe6:	d157      	bne.n	800bc98 <ipcp_nakci+0x482>
	    try_.old_addrs = 0;
 800bbe8:	7c3b      	ldrb	r3, [r7, #16]
 800bbea:	f36f 0341 	bfc	r3, #1, #1
 800bbee:	743b      	strb	r3, [r7, #16]
	    GETLONG(l, p);
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	1c5a      	adds	r2, r3, #1
 800bbf4:	60ba      	str	r2, [r7, #8]
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	021b      	lsls	r3, r3, #8
 800bbfa:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	1c5a      	adds	r2, r3, #1
 800bc00:	60ba      	str	r2, [r7, #8]
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	461a      	mov	r2, r3
 800bc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0e:	021b      	lsls	r3, r3, #8
 800bc10:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	1c5a      	adds	r2, r3, #1
 800bc16:	60ba      	str	r2, [r7, #8]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc24:	021b      	lsls	r3, r3, #8
 800bc26:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	1c5a      	adds	r2, r3, #1
 800bc2c:	60ba      	str	r2, [r7, #8]
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	461a      	mov	r2, r3
 800bc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc34:	4313      	orrs	r3, r2
 800bc36:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr1 = lwip_htonl(l);
 800bc38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc3a:	f7f5 ff26 	bl	8001a8a <lwip_htonl>
 800bc3e:	6378      	str	r0, [r7, #52]	; 0x34
	    if (ciaddr1 && go->accept_local)
 800bc40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d008      	beq.n	800bc58 <ipcp_nakci+0x442>
 800bc46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	f003 0308 	and.w	r3, r3, #8
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d001      	beq.n	800bc58 <ipcp_nakci+0x442>
		try_.ouraddr = ciaddr1;
 800bc54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc56:	617b      	str	r3, [r7, #20]
	    if (try_.ouraddr != 0)
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d003      	beq.n	800bc66 <ipcp_nakci+0x450>
		try_.neg_addr = 1;
 800bc5e:	7c3b      	ldrb	r3, [r7, #16]
 800bc60:	f043 0301 	orr.w	r3, r3, #1
 800bc64:	743b      	strb	r3, [r7, #16]
	    no.neg_addr = 1;
 800bc66:	7f3b      	ldrb	r3, [r7, #28]
 800bc68:	f043 0301 	orr.w	r3, r3, #1
 800bc6c:	773b      	strb	r3, [r7, #28]
	    break;
 800bc6e:	bf00      	nop
	}
	p = next;
 800bc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc72:	60bb      	str	r3, [r7, #8]
    while (len >= CILEN_VOID) {
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	f73f aef1 	bgt.w	800ba5e <ipcp_nakci+0x248>

    /*
     * OK, the Nak is good.  Now we can update state.
     * If there are any remaining options, we ignore them.
     */
    if (f->state != PPP_FSM_OPENED)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	7c1b      	ldrb	r3, [r3, #16]
 800bc80:	2b09      	cmp	r3, #9
 800bc82:	d007      	beq.n	800bc94 <ipcp_nakci+0x47e>
	*go = try_;
 800bc84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc86:	461c      	mov	r4, r3
 800bc88:	f107 0310 	add.w	r3, r7, #16
 800bc8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bc90:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    return 1;
 800bc94:	2301      	movs	r3, #1
 800bc96:	e000      	b.n	800bc9a <ipcp_nakci+0x484>

bad:
    IPCPDEBUG(("ipcp_nakci: received bad Nak!"));
    return 0;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	374c      	adds	r7, #76	; 0x4c
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd90      	pop	{r4, r7, pc}

0800bca2 <ipcp_rejci>:

/*
 * ipcp_rejci - Reject some of our CIs.
 * Callback from fsm_rconfnakrej.
 */
static int ipcp_rejci(fsm *f, u_char *p, int len) {
 800bca2:	b590      	push	{r4, r7, lr}
 800bca4:	b08f      	sub	sp, #60	; 0x3c
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	60f8      	str	r0, [r7, #12]
 800bcaa:	60b9      	str	r1, [r7, #8]
 800bcac:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	637b      	str	r3, [r7, #52]	; 0x34
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800bcb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800bcba:	633b      	str	r3, [r7, #48]	; 0x30
    u_short cishort;
#endif /* VJ_SUPPORT */
    u32_t cilong;
    ipcp_options try_;		/* options to request next time */

    try_ = *go;
 800bcbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcbe:	f107 0314 	add.w	r3, r7, #20
 800bcc2:	ca07      	ldmia	r2, {r0, r1, r2}
 800bcc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    goto bad; \
	try_.winsaddr[opt == CI_MS_WINS2] = 0; \
    }
#endif /* UNUSED - WINS */

    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	f003 0301 	and.w	r3, r3, #1
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d17e      	bne.n	800bdd4 <ipcp_rejci+0x132>
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	f003 0302 	and.w	r3, r3, #2
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d077      	beq.n	800bdd4 <ipcp_rejci+0x132>
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	785b      	ldrb	r3, [r3, #1]
 800bce8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bcec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bcf0:	2b0a      	cmp	r3, #10
 800bcf2:	d16f      	bne.n	800bdd4 <ipcp_rejci+0x132>
 800bcf4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	dc6a      	bgt.n	800bdd4 <ipcp_rejci+0x132>
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d166      	bne.n	800bdd4 <ipcp_rejci+0x132>
 800bd06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	1ad3      	subs	r3, r2, r3
 800bd0e:	607b      	str	r3, [r7, #4]
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	3302      	adds	r3, #2
 800bd14:	60bb      	str	r3, [r7, #8]
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	1c5a      	adds	r2, r3, #1
 800bd1a:	60ba      	str	r2, [r7, #8]
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	021b      	lsls	r3, r3, #8
 800bd20:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	1c5a      	adds	r2, r3, #1
 800bd26:	60ba      	str	r2, [r7, #8]
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd34:	021b      	lsls	r3, r3, #8
 800bd36:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	1c5a      	adds	r2, r3, #1
 800bd3c:	60ba      	str	r2, [r7, #8]
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	461a      	mov	r2, r3
 800bd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd44:	4313      	orrs	r3, r2
 800bd46:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4a:	021b      	lsls	r3, r3, #8
 800bd4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	1c5a      	adds	r2, r3, #1
 800bd52:	60ba      	str	r2, [r7, #8]
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	461a      	mov	r2, r3
 800bd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd60:	f7f5 fe93 	bl	8001a8a <lwip_htonl>
 800bd64:	6278      	str	r0, [r7, #36]	; 0x24
 800bd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	f040 8093 	bne.w	800be98 <ipcp_rejci+0x1f6>
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	1c5a      	adds	r2, r3, #1
 800bd76:	60ba      	str	r2, [r7, #8]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	021b      	lsls	r3, r3, #8
 800bd7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	1c5a      	adds	r2, r3, #1
 800bd82:	60ba      	str	r2, [r7, #8]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	461a      	mov	r2, r3
 800bd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd90:	021b      	lsls	r3, r3, #8
 800bd92:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	1c5a      	adds	r2, r3, #1
 800bd98:	60ba      	str	r2, [r7, #8]
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda0:	4313      	orrs	r3, r2
 800bda2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda6:	021b      	lsls	r3, r3, #8
 800bda8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	1c5a      	adds	r2, r3, #1
 800bdae:	60ba      	str	r2, [r7, #8]
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdbc:	f7f5 fe65 	bl	8001a8a <lwip_htonl>
 800bdc0:	6278      	str	r0, [r7, #36]	; 0x24
 800bdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc4:	689a      	ldr	r2, [r3, #8]
 800bdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d167      	bne.n	800be9c <ipcp_rejci+0x1fa>
 800bdcc:	7d3b      	ldrb	r3, [r7, #20]
 800bdce:	f36f 0341 	bfc	r3, #1, #1
 800bdd2:	753b      	strb	r3, [r7, #20]
#if VJ_SUPPORT
    REJCIVJ(CI_COMPRESSTYPE, neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	f003 0301 	and.w	r3, r3, #1
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d049      	beq.n	800be76 <ipcp_rejci+0x1d4>
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	785b      	ldrb	r3, [r3, #1]
 800bde6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bdea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdee:	2b06      	cmp	r3, #6
 800bdf0:	d141      	bne.n	800be76 <ipcp_rejci+0x1d4>
 800bdf2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	dc3c      	bgt.n	800be76 <ipcp_rejci+0x1d4>
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	2b03      	cmp	r3, #3
 800be02:	d138      	bne.n	800be76 <ipcp_rejci+0x1d4>
 800be04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	1ad3      	subs	r3, r2, r3
 800be0c:	607b      	str	r3, [r7, #4]
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	3302      	adds	r3, #2
 800be12:	60bb      	str	r3, [r7, #8]
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	1c5a      	adds	r2, r3, #1
 800be18:	60ba      	str	r2, [r7, #8]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	021b      	lsls	r3, r3, #8
 800be1e:	623b      	str	r3, [r7, #32]
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	1c5a      	adds	r2, r3, #1
 800be24:	60ba      	str	r2, [r7, #8]
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	461a      	mov	r2, r3
 800be2a:	6a3b      	ldr	r3, [r7, #32]
 800be2c:	4313      	orrs	r3, r2
 800be2e:	623b      	str	r3, [r7, #32]
 800be30:	6a3b      	ldr	r3, [r7, #32]
 800be32:	021b      	lsls	r3, r3, #8
 800be34:	623b      	str	r3, [r7, #32]
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	1c5a      	adds	r2, r3, #1
 800be3a:	60ba      	str	r2, [r7, #8]
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	461a      	mov	r2, r3
 800be40:	6a3b      	ldr	r3, [r7, #32]
 800be42:	4313      	orrs	r3, r2
 800be44:	623b      	str	r3, [r7, #32]
 800be46:	6a3b      	ldr	r3, [r7, #32]
 800be48:	021b      	lsls	r3, r3, #8
 800be4a:	623b      	str	r3, [r7, #32]
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	1c5a      	adds	r2, r3, #1
 800be50:	60ba      	str	r2, [r7, #8]
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	461a      	mov	r2, r3
 800be56:	6a3b      	ldr	r3, [r7, #32]
 800be58:	4313      	orrs	r3, r2
 800be5a:	623b      	str	r3, [r7, #32]
 800be5c:	6a38      	ldr	r0, [r7, #32]
 800be5e:	f7f5 fe14 	bl	8001a8a <lwip_htonl>
 800be62:	6278      	str	r0, [r7, #36]	; 0x24
 800be64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be66:	685a      	ldr	r2, [r3, #4]
 800be68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d118      	bne.n	800bea0 <ipcp_rejci+0x1fe>
 800be6e:	7d3b      	ldrb	r3, [r7, #20]
 800be70:	f36f 0300 	bfc	r3, #0, #1
 800be74:	753b      	strb	r3, [r7, #20]
#endif /* UNUSED - WINS */

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d113      	bne.n	800bea4 <ipcp_rejci+0x202>
	goto bad;
    /*
     * Now we can update state.
     */
    if (f->state != PPP_FSM_OPENED)
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	7c1b      	ldrb	r3, [r3, #16]
 800be80:	2b09      	cmp	r3, #9
 800be82:	d007      	beq.n	800be94 <ipcp_rejci+0x1f2>
	*go = try_;
 800be84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be86:	461c      	mov	r4, r3
 800be88:	f107 0314 	add.w	r3, r7, #20
 800be8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return 1;
 800be94:	2301      	movs	r3, #1
 800be96:	e007      	b.n	800bea8 <ipcp_rejci+0x206>
    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800be98:	bf00      	nop
 800be9a:	e004      	b.n	800bea6 <ipcp_rejci+0x204>
 800be9c:	bf00      	nop
 800be9e:	e002      	b.n	800bea6 <ipcp_rejci+0x204>
    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800bea0:	bf00      	nop
 800bea2:	e000      	b.n	800bea6 <ipcp_rejci+0x204>
	goto bad;
 800bea4:	bf00      	nop

bad:
    IPCPDEBUG(("ipcp_rejci: received bad Reject!"));
    return 0;
 800bea6:	2300      	movs	r3, #0
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	373c      	adds	r7, #60	; 0x3c
 800beac:	46bd      	mov	sp, r7
 800beae:	bd90      	pop	{r4, r7, pc}

0800beb0 <ipcp_reqci>:
 * CONFNAK; returns CONFREJ if it can't return CONFACK.
 *
 * inp = Requested CIs
 * len = Length of requested CIs
 */
static int ipcp_reqci(fsm *f, u_char *inp, int *len, int reject_if_disagree) {
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b094      	sub	sp, #80	; 0x50
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
 800bebc:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	633b      	str	r3, [r7, #48]	; 0x30
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800bec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800beca:	62fb      	str	r3, [r7, #44]	; 0x2c
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800becc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bece:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800bed2:	62bb      	str	r3, [r7, #40]	; 0x28
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800bed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800beda:	627b      	str	r3, [r7, #36]	; 0x24
    u_short cilen, citype;	/* Parsed len, type */
#if VJ_SUPPORT
    u_short cishort;		/* Parsed short value */
#endif /* VJ_SUPPORT */
    u32_t tl, ciaddr1, ciaddr2;/* Parsed address values */
    int rc = CONFACK;		/* Final packet return code */
 800bedc:	2302      	movs	r3, #2
 800bede:	647b      	str	r3, [r7, #68]	; 0x44
    int orc;			/* Individual option return code */
    u_char *p;			/* Pointer to next char to parse */
    u_char *ucp = inp;		/* Pointer to current output char */
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	63bb      	str	r3, [r7, #56]	; 0x38
    int l = *len;		/* Length left */
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_DNS */

    /*
     * Reset all his options.
     */
    BZERO(ho, sizeof(*ho));
 800beea:	220c      	movs	r2, #12
 800beec:	2100      	movs	r1, #0
 800beee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bef0:	f004 fd73 	bl	80109da <memset>
    
    /*
     * Process all his options.
     */
    next = inp;
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	64fb      	str	r3, [r7, #76]	; 0x4c
    while (l) {
 800bef8:	e1f3      	b.n	800c2e2 <ipcp_reqci+0x432>
	orc = CONFACK;			/* Assume success */
 800befa:	2302      	movs	r3, #2
 800befc:	643b      	str	r3, [r7, #64]	; 0x40
	cip = p = next;			/* Remember beginning of CI */
 800befe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf04:	623b      	str	r3, [r7, #32]
	if (l < 2 ||			/* Not enough data for CI header or */
 800bf06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	dd0b      	ble.n	800bf24 <ipcp_reqci+0x74>
	    p[1] < 2 ||			/*  CI length too small or */
 800bf0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf0e:	3301      	adds	r3, #1
 800bf10:	781b      	ldrb	r3, [r3, #0]
	if (l < 2 ||			/* Not enough data for CI header or */
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d906      	bls.n	800bf24 <ipcp_reqci+0x74>
	    p[1] > l) {			/*  CI length too big? */
 800bf16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf18:	3301      	adds	r3, #1
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	461a      	mov	r2, r3
	    p[1] < 2 ||			/*  CI length too small or */
 800bf1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf20:	429a      	cmp	r2, r3
 800bf22:	dd07      	ble.n	800bf34 <ipcp_reqci+0x84>
	    IPCPDEBUG(("ipcp_reqci: bad CI length!"));
	    orc = CONFREJ;		/* Reject bad CI */
 800bf24:	2304      	movs	r3, #4
 800bf26:	643b      	str	r3, [r7, #64]	; 0x40
	    cilen = l;			/* Reject till end of packet */
 800bf28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf2a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	    l = 0;			/* Don't loop again */
 800bf2e:	2300      	movs	r3, #0
 800bf30:	637b      	str	r3, [r7, #52]	; 0x34
	    goto endswitch;
 800bf32:	e1a1      	b.n	800c278 <ipcp_reqci+0x3c8>
	}
	GETCHAR(citype, p);		/* Parse CI type */
 800bf34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf36:	1c5a      	adds	r2, r3, #1
 800bf38:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	83fb      	strh	r3, [r7, #30]
	GETCHAR(cilen, p);		/* Parse CI length */
 800bf3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf40:	1c5a      	adds	r2, r3, #1
 800bf42:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	l -= cilen;			/* Adjust remaining length */
 800bf4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bf4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	637b      	str	r3, [r7, #52]	; 0x34
	next += cilen;			/* Step to next CI */
 800bf54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bf58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf5a:	4413      	add	r3, r2
 800bf5c:	64fb      	str	r3, [r7, #76]	; 0x4c

	switch (citype) {		/* Check CI type */
 800bf5e:	8bfb      	ldrh	r3, [r7, #30]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d003      	beq.n	800bf6c <ipcp_reqci+0xbc>
 800bf64:	2b03      	cmp	r3, #3
 800bf66:	f000 80f6 	beq.w	800c156 <ipcp_reqci+0x2a6>
 800bf6a:	e182      	b.n	800c272 <ipcp_reqci+0x3c2>
	case CI_ADDRS:
	    if (!ao->old_addrs || ho->neg_addr ||
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	f003 0302 	and.w	r3, r3, #2
 800bf74:	b2db      	uxtb	r3, r3
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00a      	beq.n	800bf90 <ipcp_reqci+0xe0>
 800bf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	f003 0301 	and.w	r3, r3, #1
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d103      	bne.n	800bf90 <ipcp_reqci+0xe0>
 800bf88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bf8c:	2b0a      	cmp	r3, #10
 800bf8e:	d002      	beq.n	800bf96 <ipcp_reqci+0xe6>
		cilen != CILEN_ADDRS) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800bf90:	2304      	movs	r3, #4
 800bf92:	643b      	str	r3, [r7, #64]	; 0x40
		break;
 800bf94:	e170      	b.n	800c278 <ipcp_reqci+0x3c8>
	     * If he has no address, or if we both have his address but
	     * disagree about it, then NAK it with our idea.
	     * In particular, if we don't know his address, but he does,
	     * then accept it.
	     */
	    GETLONG(tl, p);		/* Parse source address (his) */
 800bf96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf98:	1c5a      	adds	r2, r3, #1
 800bf9a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	021b      	lsls	r3, r3, #8
 800bfa0:	61bb      	str	r3, [r7, #24]
 800bfa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfa4:	1c5a      	adds	r2, r3, #1
 800bfa6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	461a      	mov	r2, r3
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	61bb      	str	r3, [r7, #24]
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	021b      	lsls	r3, r3, #8
 800bfb6:	61bb      	str	r3, [r7, #24]
 800bfb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfba:	1c5a      	adds	r2, r3, #1
 800bfbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	61bb      	str	r3, [r7, #24]
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	021b      	lsls	r3, r3, #8
 800bfcc:	61bb      	str	r3, [r7, #24]
 800bfce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfd0:	1c5a      	adds	r2, r3, #1
 800bfd2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	61bb      	str	r3, [r7, #24]
	    ciaddr1 = lwip_htonl(tl);
 800bfde:	69b8      	ldr	r0, [r7, #24]
 800bfe0:	f7f5 fd53 	bl	8001a8a <lwip_htonl>
 800bfe4:	6178      	str	r0, [r7, #20]
	    if (ciaddr1 != wo->hisaddr
 800bfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe8:	689a      	ldr	r2, [r3, #8]
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d033      	beq.n	800c058 <ipcp_reqci+0x1a8>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d006      	beq.n	800c004 <ipcp_reqci+0x154>
 800bff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	f003 0310 	and.w	r3, r3, #16
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	2b00      	cmp	r3, #0
 800c002:	d129      	bne.n	800c058 <ipcp_reqci+0x1a8>
		orc = CONFNAK;
 800c004:	2303      	movs	r3, #3
 800c006:	643b      	str	r3, [r7, #64]	; 0x40
		if (!reject_if_disagree) {
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d133      	bne.n	800c076 <ipcp_reqci+0x1c6>
		    DECPTR(sizeof(u32_t), p);
 800c00e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c010:	3b04      	subs	r3, #4
 800c012:	63fb      	str	r3, [r7, #60]	; 0x3c
		    tl = lwip_ntohl(wo->hisaddr);
 800c014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	4618      	mov	r0, r3
 800c01a:	f7f5 fd36 	bl	8001a8a <lwip_htonl>
 800c01e:	61b8      	str	r0, [r7, #24]
		    PUTLONG(tl, p);
 800c020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c022:	1c5a      	adds	r2, r3, #1
 800c024:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c026:	69ba      	ldr	r2, [r7, #24]
 800c028:	0e12      	lsrs	r2, r2, #24
 800c02a:	b2d2      	uxtb	r2, r2
 800c02c:	701a      	strb	r2, [r3, #0]
 800c02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c030:	1c5a      	adds	r2, r3, #1
 800c032:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c034:	69ba      	ldr	r2, [r7, #24]
 800c036:	0c12      	lsrs	r2, r2, #16
 800c038:	b2d2      	uxtb	r2, r2
 800c03a:	701a      	strb	r2, [r3, #0]
 800c03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c03e:	1c5a      	adds	r2, r3, #1
 800c040:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c042:	69ba      	ldr	r2, [r7, #24]
 800c044:	0a12      	lsrs	r2, r2, #8
 800c046:	b2d2      	uxtb	r2, r2
 800c048:	701a      	strb	r2, [r3, #0]
 800c04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c04c:	1c5a      	adds	r2, r3, #1
 800c04e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c050:	69ba      	ldr	r2, [r7, #24]
 800c052:	b2d2      	uxtb	r2, r2
 800c054:	701a      	strb	r2, [r3, #0]
		if (!reject_if_disagree) {
 800c056:	e00e      	b.n	800c076 <ipcp_reqci+0x1c6>
		}
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d10b      	bne.n	800c076 <ipcp_reqci+0x1c6>
 800c05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d107      	bne.n	800c076 <ipcp_reqci+0x1c6>
		/*
		 * If neither we nor he knows his address, reject the option.
		 */
		orc = CONFREJ;
 800c066:	2304      	movs	r3, #4
 800c068:	643b      	str	r3, [r7, #64]	; 0x40
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 800c06a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c06c:	7813      	ldrb	r3, [r2, #0]
 800c06e:	f36f 0382 	bfc	r3, #2, #1
 800c072:	7013      	strb	r3, [r2, #0]
		break;
 800c074:	e100      	b.n	800c278 <ipcp_reqci+0x3c8>

	    /*
	     * If he doesn't know our address, or if we both have our address
	     * but disagree about it, then NAK it with our idea.
	     */
	    GETLONG(tl, p);		/* Parse destination address (ours) */
 800c076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c078:	1c5a      	adds	r2, r3, #1
 800c07a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	021b      	lsls	r3, r3, #8
 800c080:	61bb      	str	r3, [r7, #24]
 800c082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c084:	1c5a      	adds	r2, r3, #1
 800c086:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	461a      	mov	r2, r3
 800c08c:	69bb      	ldr	r3, [r7, #24]
 800c08e:	4313      	orrs	r3, r2
 800c090:	61bb      	str	r3, [r7, #24]
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	021b      	lsls	r3, r3, #8
 800c096:	61bb      	str	r3, [r7, #24]
 800c098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c09a:	1c5a      	adds	r2, r3, #1
 800c09c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	61bb      	str	r3, [r7, #24]
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	021b      	lsls	r3, r3, #8
 800c0ac:	61bb      	str	r3, [r7, #24]
 800c0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0b0:	1c5a      	adds	r2, r3, #1
 800c0b2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	61bb      	str	r3, [r7, #24]
	    ciaddr2 = lwip_htonl(tl);
 800c0be:	69b8      	ldr	r0, [r7, #24]
 800c0c0:	f7f5 fce3 	bl	8001a8a <lwip_htonl>
 800c0c4:	6138      	str	r0, [r7, #16]
	    if (ciaddr2 != wo->ouraddr) {
 800c0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c8:	685a      	ldr	r2, [r3, #4]
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d036      	beq.n	800c13e <ipcp_reqci+0x28e>
		if (ciaddr2 == 0 || !wo->accept_local) {
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d006      	beq.n	800c0e4 <ipcp_reqci+0x234>
 800c0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	f003 0308 	and.w	r3, r3, #8
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d129      	bne.n	800c138 <ipcp_reqci+0x288>
		    orc = CONFNAK;
 800c0e4:	2303      	movs	r3, #3
 800c0e6:	643b      	str	r3, [r7, #64]	; 0x40
		    if (!reject_if_disagree) {
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d127      	bne.n	800c13e <ipcp_reqci+0x28e>
			DECPTR(sizeof(u32_t), p);
 800c0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f0:	3b04      	subs	r3, #4
 800c0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
			tl = lwip_ntohl(wo->ouraddr);
 800c0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7f5 fcc6 	bl	8001a8a <lwip_htonl>
 800c0fe:	61b8      	str	r0, [r7, #24]
			PUTLONG(tl, p);
 800c100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c102:	1c5a      	adds	r2, r3, #1
 800c104:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c106:	69ba      	ldr	r2, [r7, #24]
 800c108:	0e12      	lsrs	r2, r2, #24
 800c10a:	b2d2      	uxtb	r2, r2
 800c10c:	701a      	strb	r2, [r3, #0]
 800c10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c110:	1c5a      	adds	r2, r3, #1
 800c112:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c114:	69ba      	ldr	r2, [r7, #24]
 800c116:	0c12      	lsrs	r2, r2, #16
 800c118:	b2d2      	uxtb	r2, r2
 800c11a:	701a      	strb	r2, [r3, #0]
 800c11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c122:	69ba      	ldr	r2, [r7, #24]
 800c124:	0a12      	lsrs	r2, r2, #8
 800c126:	b2d2      	uxtb	r2, r2
 800c128:	701a      	strb	r2, [r3, #0]
 800c12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c12c:	1c5a      	adds	r2, r3, #1
 800c12e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c130:	69ba      	ldr	r2, [r7, #24]
 800c132:	b2d2      	uxtb	r2, r2
 800c134:	701a      	strb	r2, [r3, #0]
		    if (!reject_if_disagree) {
 800c136:	e002      	b.n	800c13e <ipcp_reqci+0x28e>
		    }
		} else {
		    wo->ouraddr = ciaddr2;	/* accept peer's idea */
 800c138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13a:	693a      	ldr	r2, [r7, #16]
 800c13c:	605a      	str	r2, [r3, #4]
		}
	    }

	    ho->old_addrs = 1;
 800c13e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c140:	7813      	ldrb	r3, [r2, #0]
 800c142:	f043 0302 	orr.w	r3, r3, #2
 800c146:	7013      	strb	r3, [r2, #0]
	    ho->hisaddr = ciaddr1;
 800c148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14a:	697a      	ldr	r2, [r7, #20]
 800c14c:	609a      	str	r2, [r3, #8]
	    ho->ouraddr = ciaddr2;
 800c14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c150:	693a      	ldr	r2, [r7, #16]
 800c152:	605a      	str	r2, [r3, #4]
	    break;
 800c154:	e090      	b.n	800c278 <ipcp_reqci+0x3c8>

	case CI_ADDR:
	    if (!ao->neg_addr || ho->old_addrs ||
 800c156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00a      	beq.n	800c17a <ipcp_reqci+0x2ca>
 800c164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	f003 0302 	and.w	r3, r3, #2
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d103      	bne.n	800c17a <ipcp_reqci+0x2ca>
 800c172:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c176:	2b06      	cmp	r3, #6
 800c178:	d002      	beq.n	800c180 <ipcp_reqci+0x2d0>
		cilen != CILEN_ADDR) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800c17a:	2304      	movs	r3, #4
 800c17c:	643b      	str	r3, [r7, #64]	; 0x40
		break;
 800c17e:	e07b      	b.n	800c278 <ipcp_reqci+0x3c8>
	     * If he has no address, or if we both have his address but
	     * disagree about it, then NAK it with our idea.
	     * In particular, if we don't know his address, but he does,
	     * then accept it.
	     */
	    GETLONG(tl, p);	/* Parse source address (his) */
 800c180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c182:	1c5a      	adds	r2, r3, #1
 800c184:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	021b      	lsls	r3, r3, #8
 800c18a:	61bb      	str	r3, [r7, #24]
 800c18c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c18e:	1c5a      	adds	r2, r3, #1
 800c190:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	461a      	mov	r2, r3
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	4313      	orrs	r3, r2
 800c19a:	61bb      	str	r3, [r7, #24]
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	021b      	lsls	r3, r3, #8
 800c1a0:	61bb      	str	r3, [r7, #24]
 800c1a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1a4:	1c5a      	adds	r2, r3, #1
 800c1a6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	61bb      	str	r3, [r7, #24]
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	021b      	lsls	r3, r3, #8
 800c1b6:	61bb      	str	r3, [r7, #24]
 800c1b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ba:	1c5a      	adds	r2, r3, #1
 800c1bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	61bb      	str	r3, [r7, #24]
	    ciaddr1 = lwip_htonl(tl);
 800c1c8:	69b8      	ldr	r0, [r7, #24]
 800c1ca:	f7f5 fc5e 	bl	8001a8a <lwip_htonl>
 800c1ce:	6178      	str	r0, [r7, #20]
	    if (ciaddr1 != wo->hisaddr
 800c1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d2:	689a      	ldr	r2, [r3, #8]
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d033      	beq.n	800c242 <ipcp_reqci+0x392>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d006      	beq.n	800c1ee <ipcp_reqci+0x33e>
 800c1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	f003 0310 	and.w	r3, r3, #16
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d129      	bne.n	800c242 <ipcp_reqci+0x392>
		orc = CONFNAK;
 800c1ee:	2303      	movs	r3, #3
 800c1f0:	643b      	str	r3, [r7, #64]	; 0x40
		if (!reject_if_disagree) {
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d133      	bne.n	800c260 <ipcp_reqci+0x3b0>
		    DECPTR(sizeof(u32_t), p);
 800c1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1fa:	3b04      	subs	r3, #4
 800c1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		    tl = lwip_ntohl(wo->hisaddr);
 800c1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	4618      	mov	r0, r3
 800c204:	f7f5 fc41 	bl	8001a8a <lwip_htonl>
 800c208:	61b8      	str	r0, [r7, #24]
		    PUTLONG(tl, p);
 800c20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c20c:	1c5a      	adds	r2, r3, #1
 800c20e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c210:	69ba      	ldr	r2, [r7, #24]
 800c212:	0e12      	lsrs	r2, r2, #24
 800c214:	b2d2      	uxtb	r2, r2
 800c216:	701a      	strb	r2, [r3, #0]
 800c218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c21a:	1c5a      	adds	r2, r3, #1
 800c21c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c21e:	69ba      	ldr	r2, [r7, #24]
 800c220:	0c12      	lsrs	r2, r2, #16
 800c222:	b2d2      	uxtb	r2, r2
 800c224:	701a      	strb	r2, [r3, #0]
 800c226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c228:	1c5a      	adds	r2, r3, #1
 800c22a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c22c:	69ba      	ldr	r2, [r7, #24]
 800c22e:	0a12      	lsrs	r2, r2, #8
 800c230:	b2d2      	uxtb	r2, r2
 800c232:	701a      	strb	r2, [r3, #0]
 800c234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c236:	1c5a      	adds	r2, r3, #1
 800c238:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c23a:	69ba      	ldr	r2, [r7, #24]
 800c23c:	b2d2      	uxtb	r2, r2
 800c23e:	701a      	strb	r2, [r3, #0]
		if (!reject_if_disagree) {
 800c240:	e00e      	b.n	800c260 <ipcp_reqci+0x3b0>
		}
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d10b      	bne.n	800c260 <ipcp_reqci+0x3b0>
 800c248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24a:	689b      	ldr	r3, [r3, #8]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d107      	bne.n	800c260 <ipcp_reqci+0x3b0>
		/*
		 * Don't ACK an address of 0.0.0.0 - reject it instead.
		 */
		orc = CONFREJ;
 800c250:	2304      	movs	r3, #4
 800c252:	643b      	str	r3, [r7, #64]	; 0x40
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 800c254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c256:	7813      	ldrb	r3, [r2, #0]
 800c258:	f36f 0382 	bfc	r3, #2, #1
 800c25c:	7013      	strb	r3, [r2, #0]
		break;
 800c25e:	e00b      	b.n	800c278 <ipcp_reqci+0x3c8>
	    }
	
	    ho->neg_addr = 1;
 800c260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c262:	7813      	ldrb	r3, [r2, #0]
 800c264:	f043 0301 	orr.w	r3, r3, #1
 800c268:	7013      	strb	r3, [r2, #0]
	    ho->hisaddr = ciaddr1;
 800c26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26c:	697a      	ldr	r2, [r7, #20]
 800c26e:	609a      	str	r2, [r3, #8]
	    break;
 800c270:	e002      	b.n	800c278 <ipcp_reqci+0x3c8>
	    }
	    break;
#endif /* VJ_SUPPORT */

	default:
	    orc = CONFREJ;
 800c272:	2304      	movs	r3, #4
 800c274:	643b      	str	r3, [r7, #64]	; 0x40
	    break;
 800c276:	bf00      	nop
	}
endswitch:
	if (orc == CONFACK &&		/* Good CI */
 800c278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c27a:	2b02      	cmp	r3, #2
 800c27c:	d103      	bne.n	800c286 <ipcp_reqci+0x3d6>
 800c27e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c280:	2b02      	cmp	r3, #2
 800c282:	d000      	beq.n	800c286 <ipcp_reqci+0x3d6>
	    rc != CONFACK)		/*  but prior CI wasn't? */
	    continue;			/* Don't send this one */
 800c284:	e02d      	b.n	800c2e2 <ipcp_reqci+0x432>

	if (orc == CONFNAK) {		/* Nak this CI? */
 800c286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c288:	2b03      	cmp	r3, #3
 800c28a:	d110      	bne.n	800c2ae <ipcp_reqci+0x3fe>
	    if (reject_if_disagree)	/* Getting fed up with sending NAKs? */
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d002      	beq.n	800c298 <ipcp_reqci+0x3e8>
		orc = CONFREJ;		/* Get tough if so */
 800c292:	2304      	movs	r3, #4
 800c294:	643b      	str	r3, [r7, #64]	; 0x40
 800c296:	e00a      	b.n	800c2ae <ipcp_reqci+0x3fe>
	    else {
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 800c298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c29a:	2b04      	cmp	r3, #4
 800c29c:	d100      	bne.n	800c2a0 <ipcp_reqci+0x3f0>
		    continue;		/* Don't send this one */
 800c29e:	e020      	b.n	800c2e2 <ipcp_reqci+0x432>
		if (rc == CONFACK) {	/* Ack'd all prior CIs? */
 800c2a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2a2:	2b02      	cmp	r3, #2
 800c2a4:	d103      	bne.n	800c2ae <ipcp_reqci+0x3fe>
		    rc = CONFNAK;	/* Not anymore... */
 800c2a6:	2303      	movs	r3, #3
 800c2a8:	647b      	str	r3, [r7, #68]	; 0x44
		    ucp = inp;		/* Backup */
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	    }
	}

	if (orc == CONFREJ &&		/* Reject this CI */
 800c2ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2b0:	2b04      	cmp	r3, #4
 800c2b2:	d106      	bne.n	800c2c2 <ipcp_reqci+0x412>
 800c2b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2b6:	2b04      	cmp	r3, #4
 800c2b8:	d003      	beq.n	800c2c2 <ipcp_reqci+0x412>
	    rc != CONFREJ) {		/*  but no prior ones? */
	    rc = CONFREJ;
 800c2ba:	2304      	movs	r3, #4
 800c2bc:	647b      	str	r3, [r7, #68]	; 0x44
	    ucp = inp;			/* Backup */
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	/* Need to move CI? */
	if (ucp != cip)
 800c2c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2c4:	6a3b      	ldr	r3, [r7, #32]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d006      	beq.n	800c2d8 <ipcp_reqci+0x428>
	    MEMCPY(ucp, cip, cilen);	/* Move it */
 800c2ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	6a39      	ldr	r1, [r7, #32]
 800c2d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c2d4:	f004 fb5c 	bl	8010990 <memcpy>

	/* Update output pointer */
	INCPTR(cilen, ucp);
 800c2d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c2dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2de:	4413      	add	r3, r2
 800c2e0:	63bb      	str	r3, [r7, #56]	; 0x38
    while (l) {
 800c2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	f47f ae08 	bne.w	800befa <ipcp_reqci+0x4a>
     * their address, and they didn't send their address, then we
     * send a NAK with a CI_ADDR option appended.  We assume the
     * input buffer is long enough that we can append the extra
     * option safely.
     */
    if (rc != CONFREJ && !ho->neg_addr && !ho->old_addrs &&
 800c2ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2ec:	2b04      	cmp	r3, #4
 800c2ee:	d055      	beq.n	800c39c <ipcp_reqci+0x4ec>
 800c2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	f003 0301 	and.w	r3, r3, #1
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d14e      	bne.n	800c39c <ipcp_reqci+0x4ec>
 800c2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	f003 0302 	and.w	r3, r3, #2
 800c306:	b2db      	uxtb	r3, r3
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d147      	bne.n	800c39c <ipcp_reqci+0x4ec>
 800c30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	f003 0304 	and.w	r3, r3, #4
 800c314:	b2db      	uxtb	r3, r3
 800c316:	2b00      	cmp	r3, #0
 800c318:	d040      	beq.n	800c39c <ipcp_reqci+0x4ec>
	wo->req_addr && !reject_if_disagree && !pcb->settings.noremoteip) {
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d13d      	bne.n	800c39c <ipcp_reqci+0x4ec>
 800c320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	f003 0304 	and.w	r3, r3, #4
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d136      	bne.n	800c39c <ipcp_reqci+0x4ec>
	if (rc == CONFACK) {
 800c32e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c330:	2b02      	cmp	r3, #2
 800c332:	d108      	bne.n	800c346 <ipcp_reqci+0x496>
	    rc = CONFNAK;
 800c334:	2303      	movs	r3, #3
 800c336:	647b      	str	r3, [r7, #68]	; 0x44
	    ucp = inp;			/* reset pointer */
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	63bb      	str	r3, [r7, #56]	; 0x38
	    wo->req_addr = 0;		/* don't ask again */
 800c33c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c33e:	7813      	ldrb	r3, [r2, #0]
 800c340:	f36f 0382 	bfc	r3, #2, #1
 800c344:	7013      	strb	r3, [r2, #0]
	}
	PUTCHAR(CI_ADDR, ucp);
 800c346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c348:	1c5a      	adds	r2, r3, #1
 800c34a:	63ba      	str	r2, [r7, #56]	; 0x38
 800c34c:	2203      	movs	r2, #3
 800c34e:	701a      	strb	r2, [r3, #0]
	PUTCHAR(CILEN_ADDR, ucp);
 800c350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c352:	1c5a      	adds	r2, r3, #1
 800c354:	63ba      	str	r2, [r7, #56]	; 0x38
 800c356:	2206      	movs	r2, #6
 800c358:	701a      	strb	r2, [r3, #0]
	tl = lwip_ntohl(wo->hisaddr);
 800c35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35c:	689b      	ldr	r3, [r3, #8]
 800c35e:	4618      	mov	r0, r3
 800c360:	f7f5 fb93 	bl	8001a8a <lwip_htonl>
 800c364:	61b8      	str	r0, [r7, #24]
	PUTLONG(tl, ucp);
 800c366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c368:	1c5a      	adds	r2, r3, #1
 800c36a:	63ba      	str	r2, [r7, #56]	; 0x38
 800c36c:	69ba      	ldr	r2, [r7, #24]
 800c36e:	0e12      	lsrs	r2, r2, #24
 800c370:	b2d2      	uxtb	r2, r2
 800c372:	701a      	strb	r2, [r3, #0]
 800c374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c376:	1c5a      	adds	r2, r3, #1
 800c378:	63ba      	str	r2, [r7, #56]	; 0x38
 800c37a:	69ba      	ldr	r2, [r7, #24]
 800c37c:	0c12      	lsrs	r2, r2, #16
 800c37e:	b2d2      	uxtb	r2, r2
 800c380:	701a      	strb	r2, [r3, #0]
 800c382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c384:	1c5a      	adds	r2, r3, #1
 800c386:	63ba      	str	r2, [r7, #56]	; 0x38
 800c388:	69ba      	ldr	r2, [r7, #24]
 800c38a:	0a12      	lsrs	r2, r2, #8
 800c38c:	b2d2      	uxtb	r2, r2
 800c38e:	701a      	strb	r2, [r3, #0]
 800c390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c392:	1c5a      	adds	r2, r3, #1
 800c394:	63ba      	str	r2, [r7, #56]	; 0x38
 800c396:	69ba      	ldr	r2, [r7, #24]
 800c398:	b2d2      	uxtb	r2, r2
 800c39a:	701a      	strb	r2, [r3, #0]
    }

    *len = ucp - inp;			/* Compute output length */
 800c39c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	1ad2      	subs	r2, r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	601a      	str	r2, [r3, #0]
    IPCPDEBUG(("ipcp: returning Configure-%s", CODENAME(rc)));
    return (rc);			/* Return final code */
 800c3a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3750      	adds	r7, #80	; 0x50
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <ipcp_up>:
/*
 * ipcp_up - IPCP has come UP.
 *
 * Configure the IP network interface appropriately and bring it up.
 */
static void ipcp_up(fsm *f) {
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b088      	sub	sp, #32
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	61fb      	str	r3, [r7, #28]
    u32_t mask;
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800c3c4:	61bb      	str	r3, [r7, #24]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800c3cc:	617b      	str	r3, [r7, #20]
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800c3d4:	613b      	str	r3, [r7, #16]
    IPCPDEBUG(("ipcp: up"));

    /*
     * We must have a non-zero IP address for both ends of the link.
     */
    if (!ho->neg_addr && !ho->old_addrs)
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	f003 0301 	and.w	r3, r3, #1
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d10a      	bne.n	800c3fa <ipcp_up+0x4a>
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	f003 0302 	and.w	r3, r3, #2
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d103      	bne.n	800c3fa <ipcp_up+0x4a>
	ho->hisaddr = wo->hisaddr;
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	689a      	ldr	r2, [r3, #8]
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	609a      	str	r2, [r3, #8]

    if (!(go->neg_addr || go->old_addrs) && (wo->neg_addr || wo->old_addrs)
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	f003 0301 	and.w	r3, r3, #1
 800c402:	b2db      	uxtb	r3, r3
 800c404:	2b00      	cmp	r3, #0
 800c406:	d11f      	bne.n	800c448 <ipcp_up+0x98>
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	f003 0302 	and.w	r3, r3, #2
 800c410:	b2db      	uxtb	r3, r3
 800c412:	2b00      	cmp	r3, #0
 800c414:	d118      	bne.n	800c448 <ipcp_up+0x98>
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	f003 0301 	and.w	r3, r3, #1
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	2b00      	cmp	r3, #0
 800c422:	d106      	bne.n	800c432 <ipcp_up+0x82>
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	f003 0302 	and.w	r3, r3, #2
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00a      	beq.n	800c448 <ipcp_up+0x98>
	&& wo->ouraddr != 0) {
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d006      	beq.n	800c448 <ipcp_up+0x98>
	ppp_error(("Peer refused to agree to our IP address"));
	ipcp_close(f->pcb, "Refused our IP address");
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	493b      	ldr	r1, [pc, #236]	; (800c52c <ipcp_up+0x17c>)
 800c440:	4618      	mov	r0, r3
 800c442:	f7fe ff36 	bl	800b2b2 <ipcp_close>
	return;
 800c446:	e06e      	b.n	800c526 <ipcp_up+0x176>
    }
    if (go->ouraddr == 0) {
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d106      	bne.n	800c45e <ipcp_up+0xae>
	ppp_error(("Could not determine local IP address"));
	ipcp_close(f->pcb, "Could not determine local IP address");
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4936      	ldr	r1, [pc, #216]	; (800c530 <ipcp_up+0x180>)
 800c456:	4618      	mov	r0, r3
 800c458:	f7fe ff2b 	bl	800b2b2 <ipcp_close>
	return;
 800c45c:	e063      	b.n	800c526 <ipcp_up+0x176>
    }
    if (ho->hisaddr == 0 && !pcb->settings.noremoteip) {
 800c45e:	69bb      	ldr	r3, [r7, #24]
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d10c      	bne.n	800c480 <ipcp_up+0xd0>
 800c466:	69fb      	ldr	r3, [r7, #28]
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	f003 0304 	and.w	r3, r3, #4
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	2b00      	cmp	r3, #0
 800c472:	d105      	bne.n	800c480 <ipcp_up+0xd0>
	ho->hisaddr = lwip_htonl(0x0a404040);
 800c474:	482f      	ldr	r0, [pc, #188]	; (800c534 <ipcp_up+0x184>)
 800c476:	f7f5 fb08 	bl	8001a8a <lwip_htonl>
 800c47a:	4602      	mov	r2, r0
 800c47c:	69bb      	ldr	r3, [r7, #24]
 800c47e:	609a      	str	r2, [r3, #8]
#endif /* LWIP_DNS */

    /*
     * Check that the peer is allowed to use the IP address it wants.
     */
    if (ho->hisaddr != 0) {
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	689b      	ldr	r3, [r3, #8]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d01a      	beq.n	800c4be <ipcp_up+0x10e>
	u32_t addr = lwip_ntohl(ho->hisaddr);
 800c488:	69bb      	ldr	r3, [r7, #24]
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7f5 fafc 	bl	8001a8a <lwip_htonl>
 800c492:	60f8      	str	r0, [r7, #12]
	if ((addr >> IP_CLASSA_NSHIFT) == IP_LOOPBACKNET
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	0e1b      	lsrs	r3, r3, #24
 800c498:	2b7f      	cmp	r3, #127	; 0x7f
 800c49a:	d00b      	beq.n	800c4b4 <ipcp_up+0x104>
	    || IP_MULTICAST(addr) || IP_BADCLASS(addr)
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c4a2:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800c4a6:	d005      	beq.n	800c4b4 <ipcp_up+0x104>
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c4ae:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 800c4b2:	d104      	bne.n	800c4be <ipcp_up+0x10e>
#if PPP_SERVER && PPP_AUTH_SUPPORT
	    || (pcb->settings.auth_required && wo->hisaddr != ho->hisaddr)
#endif /* PPP_SERVER && PPP_AUTH_SUPPORT */
	    ) {
		ppp_error(("Peer is not authorized to use remote address %I", ho->hisaddr));
		ipcp_close(pcb, "Unauthorized remote IP address");
 800c4b4:	4920      	ldr	r1, [pc, #128]	; (800c538 <ipcp_up+0x188>)
 800c4b6:	69f8      	ldr	r0, [r7, #28]
 800c4b8:	f7fe fefb 	bl	800b2b2 <ipcp_close>
		return;
 800c4bc:	e033      	b.n	800c526 <ipcp_up+0x176>
#endif /* DEMAND_SUPPORT */
    {
	/*
	 * Set IP addresses and (if specified) netmask.
	 */
	mask = get_mask(go->ouraddr);
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f002 fdac 	bl	800f020 <get_mask>
 800c4c8:	60b8      	str	r0, [r7, #8]

#if !(defined(SVR4) && (defined(SNI) || defined(__USLC__)))
	if (!sifaddr(pcb, go->ouraddr, ho->hisaddr, mask)) {
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	6859      	ldr	r1, [r3, #4]
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	689a      	ldr	r2, [r3, #8]
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	69f8      	ldr	r0, [r7, #28]
 800c4d6:	f002 fd39 	bl	800ef4c <sifaddr>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d106      	bne.n	800c4ee <ipcp_up+0x13e>
#if PPP_DEBUG
	    ppp_warn(("Interface configuration failed"));
#endif /* PPP_DEBUG */
	    ipcp_close(f->pcb, "Interface configuration failed");
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4915      	ldr	r1, [pc, #84]	; (800c53c <ipcp_up+0x18c>)
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fe fee3 	bl	800b2b2 <ipcp_close>
	    return;
 800c4ec:	e01b      	b.n	800c526 <ipcp_up+0x176>
	}
#endif

	/* bring the interface up for IP */
	if (!sifup(pcb)) {
 800c4ee:	69f8      	ldr	r0, [r7, #28]
 800c4f0:	f002 fd5e 	bl	800efb0 <sifup>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d106      	bne.n	800c508 <ipcp_up+0x158>
#if PPP_DEBUG
	    ppp_warn(("Interface failed to come up"));
#endif /* PPP_DEBUG */
	    ipcp_close(f->pcb, "Interface configuration failed");
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	490f      	ldr	r1, [pc, #60]	; (800c53c <ipcp_up+0x18c>)
 800c500:	4618      	mov	r0, r3
 800c502:	f7fe fed6 	bl	800b2b2 <ipcp_close>
	    return;
 800c506:	e00e      	b.n	800c526 <ipcp_up+0x176>
	if (ho->hisaddr != 0 && wo->proxy_arp)
	    if (sifproxyarp(pcb, ho->hisaddr))
		pcb->proxy_arp_set = 1;
#endif /* UNUSED - PROXY ARP */

	wo->ouraddr = go->ouraddr;
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	685a      	ldr	r2, [r3, #4]
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	605a      	str	r2, [r3, #4]

#if PPP_STATS_SUPPORT
    reset_link_stats(f->unit);
#endif /* PPP_STATS_SUPPORT */

    np_up(pcb, PPP_IP);
 800c510:	2121      	movs	r1, #33	; 0x21
 800c512:	69f8      	ldr	r0, [r7, #28]
 800c514:	f7fd fecc 	bl	800a2b0 <np_up>
    pcb->ipcp_is_up = 1;
 800c518:	69fa      	ldr	r2, [r7, #28]
 800c51a:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800c51e:	f043 0304 	orr.w	r3, r3, #4
 800c522:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
#endif /* PPP_NOTIFY */
#if 0 /* UNUSED */
    if (ip_up_hook)
	ip_up_hook();
#endif /* UNUSED */
}
 800c526:	3720      	adds	r7, #32
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	08013bb4 	.word	0x08013bb4
 800c530:	08013bcc 	.word	0x08013bcc
 800c534:	0a404040 	.word	0x0a404040
 800c538:	08013bf4 	.word	0x08013bf4
 800c53c:	08013c14 	.word	0x08013c14

0800c540 <ipcp_down>:
 * ipcp_down - IPCP has gone DOWN.
 *
 * Take the IP network interface down, clear its addresses
 * and delete routes through it.
 */
static void ipcp_down(fsm *f) {
 800c540:	b580      	push	{r7, lr}
 800c542:	b086      	sub	sp, #24
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	617b      	str	r3, [r7, #20]
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800c554:	613b      	str	r3, [r7, #16]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800c55c:	60fb      	str	r3, [r7, #12]
#endif /* PPP_NOTIFY */
#if 0 /* UNUSED */
    if (ip_down_hook)
	ip_down_hook();
#endif /* UNUSED */
    if (pcb->ipcp_is_up) {
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c564:	f003 0304 	and.w	r3, r3, #4
 800c568:	b2db      	uxtb	r3, r3
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00a      	beq.n	800c584 <ipcp_down+0x44>
	pcb->ipcp_is_up = 0;
 800c56e:	697a      	ldr	r2, [r7, #20]
 800c570:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800c574:	f36f 0382 	bfc	r3, #2, #1
 800c578:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	np_down(pcb, PPP_IP);
 800c57c:	2121      	movs	r1, #33	; 0x21
 800c57e:	6978      	ldr	r0, [r7, #20]
 800c580:	f7fd feb0 	bl	800a2e4 <np_down>
#endif /* DEMAND_SUPPORT */
    {
#if DEMAND_SUPPORT
	sifnpmode(pcb, PPP_IP, NPMODE_DROP);
#endif /* DEMAND_SUPPORT */
	sifdown(pcb);
 800c584:	6978      	ldr	r0, [r7, #20]
 800c586:	f002 fd36 	bl	800eff6 <sifdown>
	ipcp_clear_addrs(pcb, go->ouraddr,
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	6859      	ldr	r1, [r3, #4]
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	689a      	ldr	r2, [r3, #8]
 800c592:	2300      	movs	r3, #0
 800c594:	6978      	ldr	r0, [r7, #20]
 800c596:	f000 f804 	bl	800c5a2 <ipcp_clear_addrs>
			 ho->hisaddr, 0);
#if LWIP_DNS
	cdns(pcb, go->dnsaddr[0], go->dnsaddr[1]);
#endif /* LWIP_DNS */
    }
}
 800c59a:	bf00      	nop
 800c59c:	3718      	adds	r7, #24
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <ipcp_clear_addrs>:

/*
 * ipcp_clear_addrs() - clear the interface addresses, routes,
 * proxy arp entries, etc.
 */
static void ipcp_clear_addrs(ppp_pcb *pcb, u32_t ouraddr, u32_t hisaddr, u8_t replacedefaultroute) {
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b084      	sub	sp, #16
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	60f8      	str	r0, [r7, #12]
 800c5aa:	60b9      	str	r1, [r7, #8]
 800c5ac:	607a      	str	r2, [r7, #4]
 800c5ae:	70fb      	strb	r3, [r7, #3]
    if (!replacedefaultroute && pcb->default_route_set) {
	cifdefaultroute(pcb, ouraddr, hisaddr);
	pcb->default_route_set = 0;
    }
#endif /* UNUSED */
    cifaddr(pcb, ouraddr, hisaddr);
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	68b9      	ldr	r1, [r7, #8]
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	f002 fce5 	bl	800ef84 <cifaddr>
}
 800c5ba:	bf00      	nop
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <ipcp_finished>:


/*
 * ipcp_finished - possibly shut down the lower layers.
 */
static void ipcp_finished(fsm *f) {
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b084      	sub	sp, #16
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
	ppp_pcb *pcb = f->pcb;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	60fb      	str	r3, [r7, #12]
	if (pcb->ipcp_is_open) {
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c5d6:	f003 0302 	and.w	r3, r3, #2
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d00a      	beq.n	800c5f6 <ipcp_finished+0x34>
		pcb->ipcp_is_open = 0;
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800c5e6:	f36f 0341 	bfc	r3, #1, #1
 800c5ea:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		np_finished(pcb, PPP_IP);
 800c5ee:	2121      	movs	r1, #33	; 0x21
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	f7fd fe91 	bl	800a318 <np_finished>
	}
}
 800c5f6:	bf00      	nop
 800c5f8:	3710      	adds	r7, #16
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
	...

0800c600 <lcp_init>:
#endif /* HAVE_MULTILINK */

/*
 * lcp_init - Initialize LCP.
 */
static void lcp_init(ppp_pcb *pcb) {
 800c600:	b580      	push	{r7, lr}
 800c602:	b086      	sub	sp, #24
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	3344      	adds	r3, #68	; 0x44
 800c60c:	617b      	str	r3, [r7, #20]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	3360      	adds	r3, #96	; 0x60
 800c612:	613b      	str	r3, [r7, #16]
    lcp_options *ao = &pcb->lcp_allowoptions;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	33a8      	adds	r3, #168	; 0xa8
 800c618:	60fb      	str	r3, [r7, #12]

    f->pcb = pcb;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	601a      	str	r2, [r3, #0]
    f->protocol = PPP_LCP;
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	f24c 0221 	movw	r2, #49185	; 0xc021
 800c626:	81da      	strh	r2, [r3, #14]
    f->callbacks = &lcp_callbacks;
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	4a2b      	ldr	r2, [pc, #172]	; (800c6d8 <lcp_init+0xd8>)
 800c62c:	605a      	str	r2, [r3, #4]

    fsm_init(f);
 800c62e:	6978      	ldr	r0, [r7, #20]
 800c630:	f7fd fe8e 	bl	800a350 <fsm_init>

    BZERO(wo, sizeof(*wo));
 800c634:	2224      	movs	r2, #36	; 0x24
 800c636:	2100      	movs	r1, #0
 800c638:	6938      	ldr	r0, [r7, #16]
 800c63a:	f004 f9ce 	bl	80109da <memset>
    wo->neg_mru = 1;
 800c63e:	693a      	ldr	r2, [r7, #16]
 800c640:	7813      	ldrb	r3, [r2, #0]
 800c642:	f043 0304 	orr.w	r3, r3, #4
 800c646:	7013      	strb	r3, [r2, #0]
    wo->mru = PPP_MRU;
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c64e:	805a      	strh	r2, [r3, #2]
    wo->neg_asyncmap = 1;
 800c650:	693a      	ldr	r2, [r7, #16]
 800c652:	7813      	ldrb	r3, [r2, #0]
 800c654:	f043 0308 	orr.w	r3, r3, #8
 800c658:	7013      	strb	r3, [r2, #0]
    wo->neg_magicnumber = 1;
 800c65a:	693a      	ldr	r2, [r7, #16]
 800c65c:	7813      	ldrb	r3, [r2, #0]
 800c65e:	f043 0320 	orr.w	r3, r3, #32
 800c662:	7013      	strb	r3, [r2, #0]
    wo->neg_pcompression = 1;
 800c664:	693a      	ldr	r2, [r7, #16]
 800c666:	7813      	ldrb	r3, [r2, #0]
 800c668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c66c:	7013      	strb	r3, [r2, #0]
    wo->neg_accompression = 1;
 800c66e:	693a      	ldr	r2, [r7, #16]
 800c670:	7813      	ldrb	r3, [r2, #0]
 800c672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c676:	7013      	strb	r3, [r2, #0]

    BZERO(ao, sizeof(*ao));
 800c678:	2224      	movs	r2, #36	; 0x24
 800c67a:	2100      	movs	r1, #0
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	f004 f9ac 	bl	80109da <memset>
    ao->neg_mru = 1;
 800c682:	68fa      	ldr	r2, [r7, #12]
 800c684:	7813      	ldrb	r3, [r2, #0]
 800c686:	f043 0304 	orr.w	r3, r3, #4
 800c68a:	7013      	strb	r3, [r2, #0]
    ao->mru = PPP_MAXMRU;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c692:	805a      	strh	r2, [r3, #2]
    ao->neg_asyncmap = 1;
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	7813      	ldrb	r3, [r2, #0]
 800c698:	f043 0308 	orr.w	r3, r3, #8
 800c69c:	7013      	strb	r3, [r2, #0]
#if CHAP_SUPPORT
    ao->neg_chap = 1;
    ao->chap_mdtype = CHAP_MDTYPE_SUPPORTED;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    ao->neg_upap = 1;
 800c69e:	68fa      	ldr	r2, [r7, #12]
 800c6a0:	7813      	ldrb	r3, [r2, #0]
 800c6a2:	f043 0310 	orr.w	r3, r3, #16
 800c6a6:	7013      	strb	r3, [r2, #0]
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
    ao->neg_eap = 1;
#endif /* EAP_SUPPORT */
    ao->neg_magicnumber = 1;
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	7813      	ldrb	r3, [r2, #0]
 800c6ac:	f043 0320 	orr.w	r3, r3, #32
 800c6b0:	7013      	strb	r3, [r2, #0]
    ao->neg_pcompression = 1;
 800c6b2:	68fa      	ldr	r2, [r7, #12]
 800c6b4:	7813      	ldrb	r3, [r2, #0]
 800c6b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6ba:	7013      	strb	r3, [r2, #0]
    ao->neg_accompression = 1;
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	7813      	ldrb	r3, [r2, #0]
 800c6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6c4:	7013      	strb	r3, [r2, #0]
    ao->neg_endpoint = 1;
 800c6c6:	68fa      	ldr	r2, [r7, #12]
 800c6c8:	7853      	ldrb	r3, [r2, #1]
 800c6ca:	f043 0304 	orr.w	r3, r3, #4
 800c6ce:	7053      	strb	r3, [r2, #1]
}
 800c6d0:	bf00      	nop
 800c6d2:	3718      	adds	r7, #24
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	08013ed4 	.word	0x08013ed4

0800c6dc <lcp_open>:


/*
 * lcp_open - LCP is allowed to come up.
 */
void lcp_open(ppp_pcb *pcb) {
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	3344      	adds	r3, #68	; 0x44
 800c6e8:	60fb      	str	r3, [r7, #12]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	3360      	adds	r3, #96	; 0x60
 800c6ee:	60bb      	str	r3, [r7, #8]

    f->flags &= ~(OPT_PASSIVE | OPT_SILENT);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	7c5b      	ldrb	r3, [r3, #17]
 800c6f4:	f023 0305 	bic.w	r3, r3, #5
 800c6f8:	b2da      	uxtb	r2, r3
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	745a      	strb	r2, [r3, #17]
    if (wo->passive)
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	f003 0301 	and.w	r3, r3, #1
 800c706:	b2db      	uxtb	r3, r3
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d006      	beq.n	800c71a <lcp_open+0x3e>
	f->flags |= OPT_PASSIVE;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	7c5b      	ldrb	r3, [r3, #17]
 800c710:	f043 0301 	orr.w	r3, r3, #1
 800c714:	b2da      	uxtb	r2, r3
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	745a      	strb	r2, [r3, #17]
    if (wo->silent)
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	f003 0302 	and.w	r3, r3, #2
 800c722:	b2db      	uxtb	r3, r3
 800c724:	2b00      	cmp	r3, #0
 800c726:	d006      	beq.n	800c736 <lcp_open+0x5a>
	f->flags |= OPT_SILENT;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	7c5b      	ldrb	r3, [r3, #17]
 800c72c:	f043 0304 	orr.w	r3, r3, #4
 800c730:	b2da      	uxtb	r2, r3
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	745a      	strb	r2, [r3, #17]
    fsm_open(f);
 800c736:	68f8      	ldr	r0, [r7, #12]
 800c738:	f7fd fea0 	bl	800a47c <fsm_open>
}
 800c73c:	bf00      	nop
 800c73e:	3710      	adds	r7, #16
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <lcp_close>:


/*
 * lcp_close - Take LCP down.
 */
void lcp_close(ppp_pcb *pcb, const char *reason) {
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
    fsm *f = &pcb->lcp_fsm;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	3344      	adds	r3, #68	; 0x44
 800c752:	60fb      	str	r3, [r7, #12]
    int oldstate;

    if (pcb->phase != PPP_PHASE_DEAD
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d003      	beq.n	800c766 <lcp_close+0x22>
#ifdef HAVE_MULTILINK
    && pcb->phase != PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	new_phase(pcb, PPP_PHASE_TERMINATE);
 800c75e:	210b      	movs	r1, #11
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f002 fbab 	bl	800eebc <new_phase>

    if (f->flags & DELAYED_UP) {
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	7c5b      	ldrb	r3, [r3, #17]
 800c76a:	b25b      	sxtb	r3, r3
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	da06      	bge.n	800c77e <lcp_close+0x3a>
	UNTIMEOUT(lcp_delayed_up, f);
 800c770:	68f9      	ldr	r1, [r7, #12]
 800c772:	4812      	ldr	r0, [pc, #72]	; (800c7bc <lcp_close+0x78>)
 800c774:	f7fd fbfe 	bl	8009f74 <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2203      	movs	r2, #3
 800c77c:	741a      	strb	r2, [r3, #16]
    }
    oldstate = f->state;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	7c1b      	ldrb	r3, [r3, #16]
 800c782:	60bb      	str	r3, [r7, #8]

    fsm_close(f, reason);
 800c784:	6839      	ldr	r1, [r7, #0]
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f7fd ff40 	bl	800a60c <fsm_close>
    if (oldstate == PPP_FSM_STOPPED && (f->flags & (OPT_PASSIVE|OPT_SILENT|DELAYED_UP))) {
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	2b03      	cmp	r3, #3
 800c790:	d10f      	bne.n	800c7b2 <lcp_close+0x6e>
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	7c5b      	ldrb	r3, [r3, #17]
 800c796:	f003 0385 	and.w	r3, r3, #133	; 0x85
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d009      	beq.n	800c7b2 <lcp_close+0x6e>
	 * but it does mean that the program terminates if you do a
	 * lcp_close() when a connection hasn't been established
	 * because we are in passive/silent mode or because we have
	 * delayed the fsm_lowerup() call and it hasn't happened yet.
	 */
	f->flags &= ~DELAYED_UP;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	7c5b      	ldrb	r3, [r3, #17]
 800c7a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7a6:	b2da      	uxtb	r2, r3
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	745a      	strb	r2, [r3, #17]
	lcp_finished(f);
 800c7ac:	68f8      	ldr	r0, [r7, #12]
 800c7ae:	f001 ff1a 	bl	800e5e6 <lcp_finished>
    }
}
 800c7b2:	bf00      	nop
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	0800c8c1 	.word	0x0800c8c1

0800c7c0 <lcp_lowerup>:


/*
 * lcp_lowerup - The lower layer is up.
 */
void lcp_lowerup(ppp_pcb *pcb) {
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b086      	sub	sp, #24
 800c7c4:	af02      	add	r7, sp, #8
 800c7c6:	6078      	str	r0, [r7, #4]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	3360      	adds	r3, #96	; 0x60
 800c7cc:	60fb      	str	r3, [r7, #12]
    fsm *f = &pcb->lcp_fsm;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	3344      	adds	r3, #68	; 0x44
 800c7d2:	60bb      	str	r3, [r7, #8]
    /*
     * Don't use A/C or protocol compression on transmission,
     * but accept A/C and protocol compressed packets
     * if we are going to ask for A/C and protocol compression.
     */
    if (ppp_send_config(pcb, PPP_DEFMRU, 0xffffffff, 0, 0) < 0
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	2300      	movs	r3, #0
 800c7da:	f04f 32ff 	mov.w	r2, #4294967295
 800c7de:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f002 fb7a 	bl	800eedc <ppp_send_config>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	db3f      	blt.n	800c86e <lcp_lowerup+0xae>
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	f003 0308 	and.w	r3, r3, #8
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d001      	beq.n	800c800 <lcp_lowerup+0x40>
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	e001      	b.n	800c804 <lcp_lowerup+0x44>
 800c800:	f04f 32ff 	mov.w	r2, #4294967295
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c80c:	b2db      	uxtb	r3, r3
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800c80e:	4619      	mov	r1, r3
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c818:	b2db      	uxtb	r3, r3
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	460b      	mov	r3, r1
 800c81e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f002 fb76 	bl	800ef14 <ppp_recv_config>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	db1f      	blt.n	800c86e <lcp_lowerup+0xae>
	    return;
    pcb->peer_mru = PPP_DEFMRU;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c834:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0

    if (pcb->settings.listen_time != 0) {
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	885b      	ldrh	r3, [r3, #2]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d012      	beq.n	800c866 <lcp_lowerup+0xa6>
	f->flags |= DELAYED_UP;
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	7c5b      	ldrb	r3, [r3, #17]
 800c844:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c848:	b2da      	uxtb	r2, r3
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	745a      	strb	r2, [r3, #17]
	TIMEOUTMS(lcp_delayed_up, f, pcb->settings.listen_time);
 800c84e:	68b9      	ldr	r1, [r7, #8]
 800c850:	4809      	ldr	r0, [pc, #36]	; (800c878 <lcp_lowerup+0xb8>)
 800c852:	f7fd fb8f 	bl	8009f74 <sys_untimeout>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	885b      	ldrh	r3, [r3, #2]
 800c85a:	68ba      	ldr	r2, [r7, #8]
 800c85c:	4906      	ldr	r1, [pc, #24]	; (800c878 <lcp_lowerup+0xb8>)
 800c85e:	4618      	mov	r0, r3
 800c860:	f7fd fb5c 	bl	8009f1c <sys_timeout>
 800c864:	e004      	b.n	800c870 <lcp_lowerup+0xb0>
    } else
	fsm_lowerup(f);
 800c866:	68b8      	ldr	r0, [r7, #8]
 800c868:	f7fd fd8f 	bl	800a38a <fsm_lowerup>
 800c86c:	e000      	b.n	800c870 <lcp_lowerup+0xb0>
	    return;
 800c86e:	bf00      	nop
}
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	0800c8c1 	.word	0x0800c8c1

0800c87c <lcp_lowerdown>:


/*
 * lcp_lowerdown - The lower layer is down.
 */
void lcp_lowerdown(ppp_pcb *pcb) {
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	3344      	adds	r3, #68	; 0x44
 800c888:	60fb      	str	r3, [r7, #12]

    if (f->flags & DELAYED_UP) {
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	7c5b      	ldrb	r3, [r3, #17]
 800c88e:	b25b      	sxtb	r3, r3
 800c890:	2b00      	cmp	r3, #0
 800c892:	da0b      	bge.n	800c8ac <lcp_lowerdown+0x30>
	f->flags &= ~DELAYED_UP;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	7c5b      	ldrb	r3, [r3, #17]
 800c898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	745a      	strb	r2, [r3, #17]
	UNTIMEOUT(lcp_delayed_up, f);
 800c8a2:	68f9      	ldr	r1, [r7, #12]
 800c8a4:	4805      	ldr	r0, [pc, #20]	; (800c8bc <lcp_lowerdown+0x40>)
 800c8a6:	f7fd fb65 	bl	8009f74 <sys_untimeout>
    } else
	fsm_lowerdown(f);
}
 800c8aa:	e002      	b.n	800c8b2 <lcp_lowerdown+0x36>
	fsm_lowerdown(f);
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	f7fd fd91 	bl	800a3d4 <fsm_lowerdown>
}
 800c8b2:	bf00      	nop
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	0800c8c1 	.word	0x0800c8c1

0800c8c0 <lcp_delayed_up>:


/*
 * lcp_delayed_up - Bring the lower layer up now.
 */
static void lcp_delayed_up(void *arg) {
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm*)arg;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	60fb      	str	r3, [r7, #12]

    if (f->flags & DELAYED_UP) {
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	7c5b      	ldrb	r3, [r3, #17]
 800c8d0:	b25b      	sxtb	r3, r3
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	da09      	bge.n	800c8ea <lcp_delayed_up+0x2a>
	f->flags &= ~DELAYED_UP;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	7c5b      	ldrb	r3, [r3, #17]
 800c8da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8de:	b2da      	uxtb	r2, r3
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	745a      	strb	r2, [r3, #17]
	fsm_lowerup(f);
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f7fd fd50 	bl	800a38a <fsm_lowerup>
    }
}
 800c8ea:	bf00      	nop
 800c8ec:	3710      	adds	r7, #16
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
	...

0800c8f4 <lcp_input>:


/*
 * lcp_input - Input LCP packet.
 */
static void lcp_input(ppp_pcb *pcb, u_char *p, int len) {
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b086      	sub	sp, #24
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	3344      	adds	r3, #68	; 0x44
 800c904:	617b      	str	r3, [r7, #20]

    if (f->flags & DELAYED_UP) {
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	7c5b      	ldrb	r3, [r3, #17]
 800c90a:	b25b      	sxtb	r3, r3
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	da0d      	bge.n	800c92c <lcp_input+0x38>
	f->flags &= ~DELAYED_UP;
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	7c5b      	ldrb	r3, [r3, #17]
 800c914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c918:	b2da      	uxtb	r2, r3
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	745a      	strb	r2, [r3, #17]
	UNTIMEOUT(lcp_delayed_up, f);
 800c91e:	6979      	ldr	r1, [r7, #20]
 800c920:	4807      	ldr	r0, [pc, #28]	; (800c940 <lcp_input+0x4c>)
 800c922:	f7fd fb27 	bl	8009f74 <sys_untimeout>
	fsm_lowerup(f);
 800c926:	6978      	ldr	r0, [r7, #20]
 800c928:	f7fd fd2f 	bl	800a38a <fsm_lowerup>
    }
    fsm_input(f, p, len);
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	68b9      	ldr	r1, [r7, #8]
 800c930:	6978      	ldr	r0, [r7, #20]
 800c932:	f7fd ff4f 	bl	800a7d4 <fsm_input>
}
 800c936:	bf00      	nop
 800c938:	3718      	adds	r7, #24
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	0800c8c1 	.word	0x0800c8c1

0800c944 <lcp_extcode>:

/*
 * lcp_extcode - Handle a LCP-specific code.
 */
static int lcp_extcode(fsm *f, int code, int id, u_char *inp, int len) {
 800c944:	b580      	push	{r7, lr}
 800c946:	b08a      	sub	sp, #40	; 0x28
 800c948:	af02      	add	r7, sp, #8
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	607a      	str	r2, [r7, #4]
 800c950:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	3384      	adds	r3, #132	; 0x84
 800c95c:	61bb      	str	r3, [r7, #24]
    u_char *magp;

    switch( code ){
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	3b08      	subs	r3, #8
 800c962:	2b05      	cmp	r3, #5
 800c964:	d84a      	bhi.n	800c9fc <lcp_extcode+0xb8>
 800c966:	a201      	add	r2, pc, #4	; (adr r2, 800c96c <lcp_extcode+0x28>)
 800c968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c96c:	0800c985 	.word	0x0800c985
 800c970:	0800c991 	.word	0x0800c991
 800c974:	0800c9ef 	.word	0x0800c9ef
 800c978:	0800ca01 	.word	0x0800ca01
 800c97c:	0800ca01 	.word	0x0800ca01
 800c980:	0800ca01 	.word	0x0800ca01
    case PROTREJ:
	lcp_rprotrej(f, inp, len);
 800c984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c986:	6839      	ldr	r1, [r7, #0]
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f000 f841 	bl	800ca10 <lcp_rprotrej>
	break;
 800c98e:	e03a      	b.n	800ca06 <lcp_extcode+0xc2>
    
    case ECHOREQ:
	if (f->state != PPP_FSM_OPENED)
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	7c1b      	ldrb	r3, [r3, #16]
 800c994:	2b09      	cmp	r3, #9
 800c996:	d135      	bne.n	800ca04 <lcp_extcode+0xc0>
	    break;
	magp = inp;
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	617b      	str	r3, [r7, #20]
	PUTLONG(go->magicnumber, magp);
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	1c5a      	adds	r2, r3, #1
 800c9a0:	617a      	str	r2, [r7, #20]
 800c9a2:	69ba      	ldr	r2, [r7, #24]
 800c9a4:	6892      	ldr	r2, [r2, #8]
 800c9a6:	0e12      	lsrs	r2, r2, #24
 800c9a8:	b2d2      	uxtb	r2, r2
 800c9aa:	701a      	strb	r2, [r3, #0]
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	1c5a      	adds	r2, r3, #1
 800c9b0:	617a      	str	r2, [r7, #20]
 800c9b2:	69ba      	ldr	r2, [r7, #24]
 800c9b4:	6892      	ldr	r2, [r2, #8]
 800c9b6:	0c12      	lsrs	r2, r2, #16
 800c9b8:	b2d2      	uxtb	r2, r2
 800c9ba:	701a      	strb	r2, [r3, #0]
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	1c5a      	adds	r2, r3, #1
 800c9c0:	617a      	str	r2, [r7, #20]
 800c9c2:	69ba      	ldr	r2, [r7, #24]
 800c9c4:	6892      	ldr	r2, [r2, #8]
 800c9c6:	0a12      	lsrs	r2, r2, #8
 800c9c8:	b2d2      	uxtb	r2, r2
 800c9ca:	701a      	strb	r2, [r3, #0]
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	1c5a      	adds	r2, r3, #1
 800c9d0:	617a      	str	r2, [r7, #20]
 800c9d2:	69ba      	ldr	r2, [r7, #24]
 800c9d4:	6892      	ldr	r2, [r2, #8]
 800c9d6:	b2d2      	uxtb	r2, r2
 800c9d8:	701a      	strb	r2, [r3, #0]
	fsm_sdata(f, ECHOREP, id, inp, len);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	b2da      	uxtb	r2, r3
 800c9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	210a      	movs	r1, #10
 800c9e6:	68f8      	ldr	r0, [r7, #12]
 800c9e8:	f7fe fb8c 	bl	800b104 <fsm_sdata>
	break;
 800c9ec:	e00b      	b.n	800ca06 <lcp_extcode+0xc2>
    
    case ECHOREP:
	lcp_received_echo_reply(f, id, inp, len);
 800c9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f0:	683a      	ldr	r2, [r7, #0]
 800c9f2:	6879      	ldr	r1, [r7, #4]
 800c9f4:	68f8      	ldr	r0, [r7, #12]
 800c9f6:	f001 fe6a 	bl	800e6ce <lcp_received_echo_reply>
	break;
 800c9fa:	e004      	b.n	800ca06 <lcp_extcode+0xc2>
    case IDENTIF:
    case TIMEREM:
	break;

    default:
	return 0;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	e003      	b.n	800ca08 <lcp_extcode+0xc4>
	break;
 800ca00:	bf00      	nop
 800ca02:	e000      	b.n	800ca06 <lcp_extcode+0xc2>
	    break;
 800ca04:	bf00      	nop
    }
    return 1;
 800ca06:	2301      	movs	r3, #1
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3720      	adds	r7, #32
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <lcp_rprotrej>:
/*
 * lcp_rprotrej - Receive an Protocol-Reject.
 *
 * Figure out which protocol is rejected and inform it.
 */
static void lcp_rprotrej(fsm *f, u_char *inp, int len) {
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b088      	sub	sp, #32
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
    u_short prot;
#if PPP_PROTOCOLNAME
    const char *pname;
#endif /* PPP_PROTOCOLNAME */

    if (len < 2) {
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	dd2d      	ble.n	800ca7e <lcp_rprotrej+0x6e>
	LCPDEBUG(("lcp_rprotrej: Rcvd short Protocol-Reject packet!"));
	return;
    }

    GETSHORT(prot, inp);
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	1c5a      	adds	r2, r3, #1
 800ca26:	60ba      	str	r2, [r7, #8]
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	021b      	lsls	r3, r3, #8
 800ca2e:	837b      	strh	r3, [r7, #26]
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	1c5a      	adds	r2, r3, #1
 800ca34:	60ba      	str	r2, [r7, #8]
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	b29a      	uxth	r2, r3
 800ca3a:	8b7b      	ldrh	r3, [r7, #26]
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	837b      	strh	r3, [r7, #26]

    /*
     * Protocol-Reject packets received in any state other than the LCP
     * OPENED state SHOULD be silently discarded.
     */
    if( f->state != PPP_FSM_OPENED ){
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	7c1b      	ldrb	r3, [r3, #16]
 800ca44:	2b09      	cmp	r3, #9
 800ca46:	d11c      	bne.n	800ca82 <lcp_rprotrej+0x72>
#endif /* PPP_PROTOCOLNAME */

    /*
     * Upcall the proper Protocol-Reject routine.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800ca48:	2300      	movs	r3, #0
 800ca4a:	61fb      	str	r3, [r7, #28]
 800ca4c:	e00e      	b.n	800ca6c <lcp_rprotrej+0x5c>
	if (protp->protocol == prot) {
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	8b7a      	ldrh	r2, [r7, #26]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d106      	bne.n	800ca66 <lcp_rprotrej+0x56>
		ppp_dbglog(("Protocol-Reject for '%s' (0x%x) received", pname,
		       prot));
	    else
#endif /* PPP_PROTOCOLNAME */
		ppp_dbglog(("Protocol-Reject for 0x%x received", prot));
	    (*protp->protrej)(f->pcb);
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	6812      	ldr	r2, [r2, #0]
 800ca60:	4610      	mov	r0, r2
 800ca62:	4798      	blx	r3
	    return;
 800ca64:	e00e      	b.n	800ca84 <lcp_rprotrej+0x74>
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800ca66:	69fb      	ldr	r3, [r7, #28]
 800ca68:	3301      	adds	r3, #1
 800ca6a:	61fb      	str	r3, [r7, #28]
 800ca6c:	4a07      	ldr	r2, [pc, #28]	; (800ca8c <lcp_rprotrej+0x7c>)
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca74:	617b      	str	r3, [r7, #20]
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1e8      	bne.n	800ca4e <lcp_rprotrej+0x3e>
 800ca7c:	e002      	b.n	800ca84 <lcp_rprotrej+0x74>
	return;
 800ca7e:	bf00      	nop
 800ca80:	e000      	b.n	800ca84 <lcp_rprotrej+0x74>
	return;
 800ca82:	bf00      	nop
	ppp_warn(("Protocol-Reject for unsupported protocol '%s' (0x%x)", pname,
	     prot));
    else
#endif /* #if PPP_PROTOCOLNAME */
	ppp_warn(("Protocol-Reject for unsupported protocol 0x%x", prot));
}
 800ca84:	3720      	adds	r7, #32
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	08013f40 	.word	0x08013f40

0800ca90 <lcp_protrej>:

/*
 * lcp_protrej - A Protocol-Reject was received.
 */
/*ARGSUSED*/
static void lcp_protrej(ppp_pcb *pcb) {
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
    /*
     * Can't reject LCP!
     */
    ppp_error(("Received Protocol-Reject for LCP!"));
    fsm_protreject(&pcb->lcp_fsm);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	3344      	adds	r3, #68	; 0x44
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fe f9f5 	bl	800ae8c <fsm_protreject>
}
 800caa2:	bf00      	nop
 800caa4:	3708      	adds	r7, #8
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <lcp_sprotrej>:


/*
 * lcp_sprotrej - Send a Protocol-Reject for some protocol.
 */
void lcp_sprotrej(ppp_pcb *pcb, u_char *p, int len) {
 800caaa:	b580      	push	{r7, lr}
 800caac:	b088      	sub	sp, #32
 800caae:	af02      	add	r7, sp, #8
 800cab0:	60f8      	str	r0, [r7, #12]
 800cab2:	60b9      	str	r1, [r7, #8]
 800cab4:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	3344      	adds	r3, #68	; 0x44
 800caba:	617b      	str	r3, [r7, #20]
#if 0
    p += 2;
    len -= 2;
#endif

    fsm_sdata(f, PROTREJ, ++f->id,
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	7c9b      	ldrb	r3, [r3, #18]
 800cac0:	3301      	adds	r3, #1
 800cac2:	b2da      	uxtb	r2, r3
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	749a      	strb	r2, [r3, #18]
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	7c9a      	ldrb	r2, [r3, #18]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	9300      	str	r3, [sp, #0]
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	2108      	movs	r1, #8
 800cad4:	6978      	ldr	r0, [r7, #20]
 800cad6:	f7fe fb15 	bl	800b104 <fsm_sdata>
	      p, len);
}
 800cada:	bf00      	nop
 800cadc:	3718      	adds	r7, #24
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <lcp_resetci>:


/*
 * lcp_resetci - Reset our CI.
 */
static void lcp_resetci(fsm *f) {
 800cae2:	b5b0      	push	{r4, r5, r7, lr}
 800cae4:	b086      	sub	sp, #24
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	617b      	str	r3, [r7, #20]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	3360      	adds	r3, #96	; 0x60
 800caf4:	613b      	str	r3, [r7, #16]
    lcp_options *go = &pcb->lcp_gotoptions;
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	3384      	adds	r3, #132	; 0x84
 800cafa:	60fb      	str	r3, [r7, #12]
    lcp_options *ao = &pcb->lcp_allowoptions;
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	33a8      	adds	r3, #168	; 0xa8
 800cb00:	60bb      	str	r3, [r7, #8]

#if PPP_AUTH_SUPPORT

    /* note: default value is true for allow options */
    if (pcb->settings.user && pcb->settings.passwd) {
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d010      	beq.n	800cb2c <lcp_resetci+0x4a>
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	689b      	ldr	r3, [r3, #8]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00c      	beq.n	800cb2c <lcp_resetci+0x4a>
#if PAP_SUPPORT
      if (pcb->settings.refuse_pap) {
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	f003 0301 	and.w	r3, r3, #1
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d00a      	beq.n	800cb36 <lcp_resetci+0x54>
        ao->neg_upap = 0;
 800cb20:	68ba      	ldr	r2, [r7, #8]
 800cb22:	7813      	ldrb	r3, [r2, #0]
 800cb24:	f36f 1304 	bfc	r3, #4, #1
 800cb28:	7013      	strb	r3, [r2, #0]
      if (pcb->settings.refuse_pap) {
 800cb2a:	e004      	b.n	800cb36 <lcp_resetci+0x54>
      }
#endif /* PPP_SERVER */

    } else {
#if PAP_SUPPORT
      ao->neg_upap = 0;
 800cb2c:	68ba      	ldr	r2, [r7, #8]
 800cb2e:	7813      	ldrb	r3, [r2, #0]
 800cb30:	f36f 1304 	bfc	r3, #4, #1
 800cb34:	7013      	strb	r3, [r2, #0]
#endif /* EAP_SUPPORT */
    PPPDEBUG(LOG_DEBUG, ("\n"));

#endif /* PPP_AUTH_SUPPORT */

    wo->magicnumber = magic();
 800cb36:	f001 fed5 	bl	800e8e4 <magic>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	609a      	str	r2, [r3, #8]
    wo->numloops = 0;
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	2200      	movs	r2, #0
 800cb44:	731a      	strb	r2, [r3, #12]
    *go = *wo;
 800cb46:	68fa      	ldr	r2, [r7, #12]
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	4614      	mov	r4, r2
 800cb4c:	461d      	mov	r5, r3
 800cb4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb56:	682b      	ldr	r3, [r5, #0]
 800cb58:	6023      	str	r3, [r4, #0]
#ifdef HAVE_MULTILINK
    if (!multilink) {
	go->neg_mrru = 0;
#endif /* HAVE_MULTILINK */
	go->neg_ssnhf = 0;
 800cb5a:	68fa      	ldr	r2, [r7, #12]
 800cb5c:	7853      	ldrb	r3, [r2, #1]
 800cb5e:	f36f 0341 	bfc	r3, #1, #1
 800cb62:	7053      	strb	r3, [r2, #1]
	go->neg_endpoint = 0;
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	7853      	ldrb	r3, [r2, #1]
 800cb68:	f36f 0382 	bfc	r3, #2, #1
 800cb6c:	7053      	strb	r3, [r2, #1]
#ifdef HAVE_MULTILINK
    }
#endif /* HAVE_MULTILINK */
    if (pcb->settings.noendpoint)
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	f003 0310 	and.w	r3, r3, #16
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d004      	beq.n	800cb86 <lcp_resetci+0xa4>
	ao->neg_endpoint = 0;
 800cb7c:	68ba      	ldr	r2, [r7, #8]
 800cb7e:	7853      	ldrb	r3, [r2, #1]
 800cb80:	f36f 0382 	bfc	r3, #2, #1
 800cb84:	7053      	strb	r3, [r2, #1]
    pcb->peer_mru = PPP_DEFMRU;
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cb8c:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
#if 0 /* UNUSED */
    auth_reset(pcb);
#endif /* UNUSED */
}
 800cb90:	bf00      	nop
 800cb92:	3718      	adds	r7, #24
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bdb0      	pop	{r4, r5, r7, pc}

0800cb98 <lcp_cilen>:


/*
 * lcp_cilen - Return length of our CI.
 */
static int lcp_cilen(fsm *f) {
 800cb98:	b480      	push	{r7}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	60fb      	str	r3, [r7, #12]
    lcp_options *go = &pcb->lcp_gotoptions;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	3384      	adds	r3, #132	; 0x84
 800cbaa:	60bb      	str	r3, [r7, #8]
    /*
     * NB: we only ask for one of CHAP, UPAP, or EAP, even if we will
     * accept more than one.  We prefer EAP first, then CHAP, then
     * PAP.
     */
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	f003 0304 	and.w	r3, r3, #4
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d007      	beq.n	800cbca <lcp_cilen+0x32>
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	885b      	ldrh	r3, [r3, #2]
 800cbbe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d001      	beq.n	800cbca <lcp_cilen+0x32>
 800cbc6:	2204      	movs	r2, #4
 800cbc8:	e000      	b.n	800cbcc <lcp_cilen+0x34>
 800cbca:	2200      	movs	r2, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	f003 0308 	and.w	r3, r3, #8
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d006      	beq.n	800cbe8 <lcp_cilen+0x50>
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe2:	d001      	beq.n	800cbe8 <lcp_cilen+0x50>
 800cbe4:	2306      	movs	r3, #6
 800cbe6:	e000      	b.n	800cbea <lcp_cilen+0x52>
 800cbe8:	2300      	movs	r3, #0
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 800cbea:	441a      	add	r2, r3
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
	    LENCISHORT(!go->neg_chap && go->neg_upap) +
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
	    LENCISHORT(go->neg_upap) +
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	f003 0310 	and.w	r3, r3, #16
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d001      	beq.n	800cbfe <lcp_cilen+0x66>
 800cbfa:	2304      	movs	r3, #4
 800cbfc:	e000      	b.n	800cc00 <lcp_cilen+0x68>
 800cbfe:	2300      	movs	r3, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 800cc00:	441a      	add	r2, r3
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
	    LENCILQR(go->neg_lqr) +
#endif /* LQR_SUPPORT */
	    LENCICBCP(go->neg_cbcp) +
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	785b      	ldrb	r3, [r3, #1]
 800cc06:	f003 0301 	and.w	r3, r3, #1
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d001      	beq.n	800cc14 <lcp_cilen+0x7c>
 800cc10:	2303      	movs	r3, #3
 800cc12:	e000      	b.n	800cc16 <lcp_cilen+0x7e>
 800cc14:	2300      	movs	r3, #0
	    LENCISHORT(go->neg_upap) +
 800cc16:	441a      	add	r2, r3
	    LENCILONG(go->neg_magicnumber) +
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	f003 0320 	and.w	r3, r3, #32
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d001      	beq.n	800cc2a <lcp_cilen+0x92>
 800cc26:	2306      	movs	r3, #6
 800cc28:	e000      	b.n	800cc2c <lcp_cilen+0x94>
 800cc2a:	2300      	movs	r3, #0
	    LENCICBCP(go->neg_cbcp) +
 800cc2c:	441a      	add	r2, r3
	    LENCIVOID(go->neg_pcompression) +
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d001      	beq.n	800cc40 <lcp_cilen+0xa8>
 800cc3c:	2302      	movs	r3, #2
 800cc3e:	e000      	b.n	800cc42 <lcp_cilen+0xaa>
 800cc40:	2300      	movs	r3, #0
	    LENCILONG(go->neg_magicnumber) +
 800cc42:	441a      	add	r2, r3
	    LENCIVOID(go->neg_accompression) +
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d001      	beq.n	800cc56 <lcp_cilen+0xbe>
 800cc52:	2302      	movs	r3, #2
 800cc54:	e000      	b.n	800cc58 <lcp_cilen+0xc0>
 800cc56:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_pcompression) +
 800cc58:	441a      	add	r2, r3
#ifdef HAVE_MULTILINK
	    LENCISHORT(go->neg_mrru) +
#endif /* HAVE_MULTILINK */
	    LENCIVOID(go->neg_ssnhf) +
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	785b      	ldrb	r3, [r3, #1]
 800cc5e:	f003 0302 	and.w	r3, r3, #2
	    LENCIVOID(go->neg_accompression) +
 800cc62:	441a      	add	r2, r3
	    (go->neg_endpoint? CILEN_CHAR + go->endpoint.length: 0));
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	785b      	ldrb	r3, [r3, #1]
 800cc68:	f003 0304 	and.w	r3, r3, #4
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d003      	beq.n	800cc7a <lcp_cilen+0xe2>
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	7b9b      	ldrb	r3, [r3, #14]
 800cc76:	3303      	adds	r3, #3
 800cc78:	e000      	b.n	800cc7c <lcp_cilen+0xe4>
 800cc7a:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_ssnhf) +
 800cc7c:	4413      	add	r3, r2
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3714      	adds	r7, #20
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr

0800cc8a <lcp_addci>:


/*
 * lcp_addci - Add our desired CIs to a packet.
 */
static void lcp_addci(fsm *f, u_char *ucp, int *lenp) {
 800cc8a:	b480      	push	{r7}
 800cc8c:	b089      	sub	sp, #36	; 0x24
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	60f8      	str	r0, [r7, #12]
 800cc92:	60b9      	str	r1, [r7, #8]
 800cc94:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	61bb      	str	r3, [r7, #24]
    lcp_options *go = &pcb->lcp_gotoptions;
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	3384      	adds	r3, #132	; 0x84
 800cca0:	617b      	str	r3, [r7, #20]
    u_char *start_ucp = ucp;
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	613b      	str	r3, [r7, #16]
	PUTCHAR(class, ucp); \
	for (i = 0; i < len; ++i) \
	    PUTCHAR(val[i], ucp); \
    }

    ADDCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	f003 0304 	and.w	r3, r3, #4
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d01f      	beq.n	800ccf4 <lcp_addci+0x6a>
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	885b      	ldrh	r3, [r3, #2]
 800ccb8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d019      	beq.n	800ccf4 <lcp_addci+0x6a>
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	1c5a      	adds	r2, r3, #1
 800ccc4:	60ba      	str	r2, [r7, #8]
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	701a      	strb	r2, [r3, #0]
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	1c5a      	adds	r2, r3, #1
 800ccce:	60ba      	str	r2, [r7, #8]
 800ccd0:	2204      	movs	r2, #4
 800ccd2:	701a      	strb	r2, [r3, #0]
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	1c5a      	adds	r2, r3, #1
 800ccd8:	60ba      	str	r2, [r7, #8]
 800ccda:	697a      	ldr	r2, [r7, #20]
 800ccdc:	8852      	ldrh	r2, [r2, #2]
 800ccde:	0a12      	lsrs	r2, r2, #8
 800cce0:	b292      	uxth	r2, r2
 800cce2:	b2d2      	uxtb	r2, r2
 800cce4:	701a      	strb	r2, [r3, #0]
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	1c5a      	adds	r2, r3, #1
 800ccea:	60ba      	str	r2, [r7, #8]
 800ccec:	697a      	ldr	r2, [r7, #20]
 800ccee:	8852      	ldrh	r2, [r2, #2]
 800ccf0:	b2d2      	uxtb	r2, r2
 800ccf2:	701a      	strb	r2, [r3, #0]
    ADDCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	f003 0308 	and.w	r3, r3, #8
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d02d      	beq.n	800cd5e <lcp_addci+0xd4>
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd0a:	d028      	beq.n	800cd5e <lcp_addci+0xd4>
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	1c5a      	adds	r2, r3, #1
 800cd10:	60ba      	str	r2, [r7, #8]
 800cd12:	2202      	movs	r2, #2
 800cd14:	701a      	strb	r2, [r3, #0]
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	1c5a      	adds	r2, r3, #1
 800cd1a:	60ba      	str	r2, [r7, #8]
 800cd1c:	2206      	movs	r2, #6
 800cd1e:	701a      	strb	r2, [r3, #0]
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	1c5a      	adds	r2, r3, #1
 800cd24:	60ba      	str	r2, [r7, #8]
 800cd26:	697a      	ldr	r2, [r7, #20]
 800cd28:	6852      	ldr	r2, [r2, #4]
 800cd2a:	0e12      	lsrs	r2, r2, #24
 800cd2c:	b2d2      	uxtb	r2, r2
 800cd2e:	701a      	strb	r2, [r3, #0]
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	1c5a      	adds	r2, r3, #1
 800cd34:	60ba      	str	r2, [r7, #8]
 800cd36:	697a      	ldr	r2, [r7, #20]
 800cd38:	6852      	ldr	r2, [r2, #4]
 800cd3a:	0c12      	lsrs	r2, r2, #16
 800cd3c:	b2d2      	uxtb	r2, r2
 800cd3e:	701a      	strb	r2, [r3, #0]
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	1c5a      	adds	r2, r3, #1
 800cd44:	60ba      	str	r2, [r7, #8]
 800cd46:	697a      	ldr	r2, [r7, #20]
 800cd48:	6852      	ldr	r2, [r2, #4]
 800cd4a:	0a12      	lsrs	r2, r2, #8
 800cd4c:	b2d2      	uxtb	r2, r2
 800cd4e:	701a      	strb	r2, [r3, #0]
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	1c5a      	adds	r2, r3, #1
 800cd54:	60ba      	str	r2, [r7, #8]
 800cd56:	697a      	ldr	r2, [r7, #20]
 800cd58:	6852      	ldr	r2, [r2, #4]
 800cd5a:	b2d2      	uxtb	r2, r2
 800cd5c:	701a      	strb	r2, [r3, #0]
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
    ADDCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
    ADDCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	f003 0310 	and.w	r3, r3, #16
 800cd66:	b2db      	uxtb	r3, r3
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d013      	beq.n	800cd94 <lcp_addci+0x10a>
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	1c5a      	adds	r2, r3, #1
 800cd70:	60ba      	str	r2, [r7, #8]
 800cd72:	2203      	movs	r2, #3
 800cd74:	701a      	strb	r2, [r3, #0]
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	1c5a      	adds	r2, r3, #1
 800cd7a:	60ba      	str	r2, [r7, #8]
 800cd7c:	2204      	movs	r2, #4
 800cd7e:	701a      	strb	r2, [r3, #0]
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	1c5a      	adds	r2, r3, #1
 800cd84:	60ba      	str	r2, [r7, #8]
 800cd86:	22c0      	movs	r2, #192	; 0xc0
 800cd88:	701a      	strb	r2, [r3, #0]
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	1c5a      	adds	r2, r3, #1
 800cd8e:	60ba      	str	r2, [r7, #8]
 800cd90:	2223      	movs	r2, #35	; 0x23
 800cd92:	701a      	strb	r2, [r3, #0]
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ADDCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ADDCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	785b      	ldrb	r3, [r3, #1]
 800cd98:	f003 0301 	and.w	r3, r3, #1
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d00e      	beq.n	800cdc0 <lcp_addci+0x136>
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	1c5a      	adds	r2, r3, #1
 800cda6:	60ba      	str	r2, [r7, #8]
 800cda8:	220d      	movs	r2, #13
 800cdaa:	701a      	strb	r2, [r3, #0]
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	1c5a      	adds	r2, r3, #1
 800cdb0:	60ba      	str	r2, [r7, #8]
 800cdb2:	2203      	movs	r2, #3
 800cdb4:	701a      	strb	r2, [r3, #0]
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	1c5a      	adds	r2, r3, #1
 800cdba:	60ba      	str	r2, [r7, #8]
 800cdbc:	2206      	movs	r2, #6
 800cdbe:	701a      	strb	r2, [r3, #0]
    ADDCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	f003 0320 	and.w	r3, r3, #32
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d028      	beq.n	800ce20 <lcp_addci+0x196>
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	1c5a      	adds	r2, r3, #1
 800cdd2:	60ba      	str	r2, [r7, #8]
 800cdd4:	2205      	movs	r2, #5
 800cdd6:	701a      	strb	r2, [r3, #0]
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	1c5a      	adds	r2, r3, #1
 800cddc:	60ba      	str	r2, [r7, #8]
 800cdde:	2206      	movs	r2, #6
 800cde0:	701a      	strb	r2, [r3, #0]
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	1c5a      	adds	r2, r3, #1
 800cde6:	60ba      	str	r2, [r7, #8]
 800cde8:	697a      	ldr	r2, [r7, #20]
 800cdea:	6892      	ldr	r2, [r2, #8]
 800cdec:	0e12      	lsrs	r2, r2, #24
 800cdee:	b2d2      	uxtb	r2, r2
 800cdf0:	701a      	strb	r2, [r3, #0]
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	1c5a      	adds	r2, r3, #1
 800cdf6:	60ba      	str	r2, [r7, #8]
 800cdf8:	697a      	ldr	r2, [r7, #20]
 800cdfa:	6892      	ldr	r2, [r2, #8]
 800cdfc:	0c12      	lsrs	r2, r2, #16
 800cdfe:	b2d2      	uxtb	r2, r2
 800ce00:	701a      	strb	r2, [r3, #0]
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	1c5a      	adds	r2, r3, #1
 800ce06:	60ba      	str	r2, [r7, #8]
 800ce08:	697a      	ldr	r2, [r7, #20]
 800ce0a:	6892      	ldr	r2, [r2, #8]
 800ce0c:	0a12      	lsrs	r2, r2, #8
 800ce0e:	b2d2      	uxtb	r2, r2
 800ce10:	701a      	strb	r2, [r3, #0]
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	1c5a      	adds	r2, r3, #1
 800ce16:	60ba      	str	r2, [r7, #8]
 800ce18:	697a      	ldr	r2, [r7, #20]
 800ce1a:	6892      	ldr	r2, [r2, #8]
 800ce1c:	b2d2      	uxtb	r2, r2
 800ce1e:	701a      	strb	r2, [r3, #0]
    ADDCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d009      	beq.n	800ce42 <lcp_addci+0x1b8>
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	1c5a      	adds	r2, r3, #1
 800ce32:	60ba      	str	r2, [r7, #8]
 800ce34:	2207      	movs	r2, #7
 800ce36:	701a      	strb	r2, [r3, #0]
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	1c5a      	adds	r2, r3, #1
 800ce3c:	60ba      	str	r2, [r7, #8]
 800ce3e:	2202      	movs	r2, #2
 800ce40:	701a      	strb	r2, [r3, #0]
    ADDCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d009      	beq.n	800ce64 <lcp_addci+0x1da>
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	1c5a      	adds	r2, r3, #1
 800ce54:	60ba      	str	r2, [r7, #8]
 800ce56:	2208      	movs	r2, #8
 800ce58:	701a      	strb	r2, [r3, #0]
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	1c5a      	adds	r2, r3, #1
 800ce5e:	60ba      	str	r2, [r7, #8]
 800ce60:	2202      	movs	r2, #2
 800ce62:	701a      	strb	r2, [r3, #0]
#ifdef HAVE_MULTILINK
    ADDCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif
    ADDCIVOID(CI_SSNHF, go->neg_ssnhf);
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	785b      	ldrb	r3, [r3, #1]
 800ce68:	f003 0302 	and.w	r3, r3, #2
 800ce6c:	b2db      	uxtb	r3, r3
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d009      	beq.n	800ce86 <lcp_addci+0x1fc>
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	1c5a      	adds	r2, r3, #1
 800ce76:	60ba      	str	r2, [r7, #8]
 800ce78:	2212      	movs	r2, #18
 800ce7a:	701a      	strb	r2, [r3, #0]
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	1c5a      	adds	r2, r3, #1
 800ce80:	60ba      	str	r2, [r7, #8]
 800ce82:	2202      	movs	r2, #2
 800ce84:	701a      	strb	r2, [r3, #0]
    ADDCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	785b      	ldrb	r3, [r3, #1]
 800ce8a:	f003 0304 	and.w	r3, r3, #4
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d027      	beq.n	800cee4 <lcp_addci+0x25a>
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	1c5a      	adds	r2, r3, #1
 800ce98:	60ba      	str	r2, [r7, #8]
 800ce9a:	2213      	movs	r2, #19
 800ce9c:	701a      	strb	r2, [r3, #0]
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	1c5a      	adds	r2, r3, #1
 800cea2:	60ba      	str	r2, [r7, #8]
 800cea4:	697a      	ldr	r2, [r7, #20]
 800cea6:	7b92      	ldrb	r2, [r2, #14]
 800cea8:	3203      	adds	r2, #3
 800ceaa:	b2d2      	uxtb	r2, r2
 800ceac:	701a      	strb	r2, [r3, #0]
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	1c5a      	adds	r2, r3, #1
 800ceb2:	60ba      	str	r2, [r7, #8]
 800ceb4:	697a      	ldr	r2, [r7, #20]
 800ceb6:	7b52      	ldrb	r2, [r2, #13]
 800ceb8:	701a      	strb	r2, [r3, #0]
 800ceba:	2300      	movs	r3, #0
 800cebc:	61fb      	str	r3, [r7, #28]
 800cebe:	e00b      	b.n	800ced8 <lcp_addci+0x24e>
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	1c5a      	adds	r2, r3, #1
 800cec4:	60ba      	str	r2, [r7, #8]
 800cec6:	6979      	ldr	r1, [r7, #20]
 800cec8:	69fa      	ldr	r2, [r7, #28]
 800ceca:	440a      	add	r2, r1
 800cecc:	320f      	adds	r2, #15
 800cece:	7812      	ldrb	r2, [r2, #0]
 800ced0:	701a      	strb	r2, [r3, #0]
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	3301      	adds	r3, #1
 800ced6:	61fb      	str	r3, [r7, #28]
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	7b9b      	ldrb	r3, [r3, #14]
 800cedc:	461a      	mov	r2, r3
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	dced      	bgt.n	800cec0 <lcp_addci+0x236>

    if (ucp - start_ucp != *lenp) {
	/* this should never happen, because peer_mtu should be 1500 */
	ppp_error(("Bug in lcp_addci: wrong length"));
    }
}
 800cee4:	bf00      	nop
 800cee6:	3724      	adds	r7, #36	; 0x24
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <lcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int lcp_ackci(fsm *f, u_char *p, int len) {
 800cef0:	b480      	push	{r7}
 800cef2:	b08b      	sub	sp, #44	; 0x2c
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	623b      	str	r3, [r7, #32]
    lcp_options *go = &pcb->lcp_gotoptions;
 800cf02:	6a3b      	ldr	r3, [r7, #32]
 800cf04:	3384      	adds	r3, #132	; 0x84
 800cf06:	61fb      	str	r3, [r7, #28]
	    if (cichar != val[i]) \
		goto bad; \
	} \
    }

    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	f003 0304 	and.w	r3, r3, #4
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d033      	beq.n	800cf7e <lcp_ackci+0x8e>
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	885b      	ldrh	r3, [r3, #2]
 800cf1a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d02d      	beq.n	800cf7e <lcp_ackci+0x8e>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	3b04      	subs	r3, #4
 800cf26:	607b      	str	r3, [r7, #4]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	f2c0 81c6 	blt.w	800d2bc <lcp_ackci+0x3cc>
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	1c5a      	adds	r2, r3, #1
 800cf34:	60ba      	str	r2, [r7, #8]
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	76fb      	strb	r3, [r7, #27]
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	1c5a      	adds	r2, r3, #1
 800cf3e:	60ba      	str	r2, [r7, #8]
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	76bb      	strb	r3, [r7, #26]
 800cf44:	7ebb      	ldrb	r3, [r7, #26]
 800cf46:	2b04      	cmp	r3, #4
 800cf48:	f040 81d9 	bne.w	800d2fe <lcp_ackci+0x40e>
 800cf4c:	7efb      	ldrb	r3, [r7, #27]
 800cf4e:	2b01      	cmp	r3, #1
 800cf50:	f040 81d5 	bne.w	800d2fe <lcp_ackci+0x40e>
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	1c5a      	adds	r2, r3, #1
 800cf58:	60ba      	str	r2, [r7, #8]
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	021b      	lsls	r3, r3, #8
 800cf60:	833b      	strh	r3, [r7, #24]
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	1c5a      	adds	r2, r3, #1
 800cf66:	60ba      	str	r2, [r7, #8]
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	b29a      	uxth	r2, r3
 800cf6c:	8b3b      	ldrh	r3, [r7, #24]
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	833b      	strh	r3, [r7, #24]
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	885b      	ldrh	r3, [r3, #2]
 800cf76:	8b3a      	ldrh	r2, [r7, #24]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	f040 81a1 	bne.w	800d2c0 <lcp_ackci+0x3d0>
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	f003 0308 	and.w	r3, r3, #8
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d047      	beq.n	800d01c <lcp_ackci+0x12c>
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	685b      	ldr	r3, [r3, #4]
 800cf90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf94:	d042      	beq.n	800d01c <lcp_ackci+0x12c>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	3b06      	subs	r3, #6
 800cf9a:	607b      	str	r3, [r7, #4]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f2c0 8190 	blt.w	800d2c4 <lcp_ackci+0x3d4>
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	1c5a      	adds	r2, r3, #1
 800cfa8:	60ba      	str	r2, [r7, #8]
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	76fb      	strb	r3, [r7, #27]
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	1c5a      	adds	r2, r3, #1
 800cfb2:	60ba      	str	r2, [r7, #8]
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	76bb      	strb	r3, [r7, #26]
 800cfb8:	7ebb      	ldrb	r3, [r7, #26]
 800cfba:	2b06      	cmp	r3, #6
 800cfbc:	f040 819f 	bne.w	800d2fe <lcp_ackci+0x40e>
 800cfc0:	7efb      	ldrb	r3, [r7, #27]
 800cfc2:	2b02      	cmp	r3, #2
 800cfc4:	f040 819b 	bne.w	800d2fe <lcp_ackci+0x40e>
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	1c5a      	adds	r2, r3, #1
 800cfcc:	60ba      	str	r2, [r7, #8]
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	021b      	lsls	r3, r3, #8
 800cfd2:	617b      	str	r3, [r7, #20]
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	1c5a      	adds	r2, r3, #1
 800cfd8:	60ba      	str	r2, [r7, #8]
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	461a      	mov	r2, r3
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	617b      	str	r3, [r7, #20]
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	021b      	lsls	r3, r3, #8
 800cfe8:	617b      	str	r3, [r7, #20]
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	1c5a      	adds	r2, r3, #1
 800cfee:	60ba      	str	r2, [r7, #8]
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	461a      	mov	r2, r3
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	4313      	orrs	r3, r2
 800cff8:	617b      	str	r3, [r7, #20]
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	021b      	lsls	r3, r3, #8
 800cffe:	617b      	str	r3, [r7, #20]
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	1c5a      	adds	r2, r3, #1
 800d004:	60ba      	str	r2, [r7, #8]
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	461a      	mov	r2, r3
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	4313      	orrs	r3, r2
 800d00e:	617b      	str	r3, [r7, #20]
 800d010:	69fb      	ldr	r3, [r7, #28]
 800d012:	685a      	ldr	r2, [r3, #4]
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	429a      	cmp	r2, r3
 800d018:	f040 8156 	bne.w	800d2c8 <lcp_ackci+0x3d8>
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
    ACKCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
    ACKCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 800d01c:	69fb      	ldr	r3, [r7, #28]
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	f003 0310 	and.w	r3, r3, #16
 800d024:	b2db      	uxtb	r3, r3
 800d026:	2b00      	cmp	r3, #0
 800d028:	d02d      	beq.n	800d086 <lcp_ackci+0x196>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	3b04      	subs	r3, #4
 800d02e:	607b      	str	r3, [r7, #4]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2b00      	cmp	r3, #0
 800d034:	f2c0 814a 	blt.w	800d2cc <lcp_ackci+0x3dc>
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	1c5a      	adds	r2, r3, #1
 800d03c:	60ba      	str	r2, [r7, #8]
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	76fb      	strb	r3, [r7, #27]
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	1c5a      	adds	r2, r3, #1
 800d046:	60ba      	str	r2, [r7, #8]
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	76bb      	strb	r3, [r7, #26]
 800d04c:	7ebb      	ldrb	r3, [r7, #26]
 800d04e:	2b04      	cmp	r3, #4
 800d050:	f040 8155 	bne.w	800d2fe <lcp_ackci+0x40e>
 800d054:	7efb      	ldrb	r3, [r7, #27]
 800d056:	2b03      	cmp	r3, #3
 800d058:	f040 8151 	bne.w	800d2fe <lcp_ackci+0x40e>
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	1c5a      	adds	r2, r3, #1
 800d060:	60ba      	str	r2, [r7, #8]
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	b29b      	uxth	r3, r3
 800d066:	021b      	lsls	r3, r3, #8
 800d068:	833b      	strh	r3, [r7, #24]
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	1c5a      	adds	r2, r3, #1
 800d06e:	60ba      	str	r2, [r7, #8]
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	b29a      	uxth	r2, r3
 800d074:	8b3b      	ldrh	r3, [r7, #24]
 800d076:	4313      	orrs	r3, r2
 800d078:	833b      	strh	r3, [r7, #24]
 800d07a:	8b3b      	ldrh	r3, [r7, #24]
 800d07c:	f24c 0223 	movw	r2, #49187	; 0xc023
 800d080:	4293      	cmp	r3, r2
 800d082:	f040 8125 	bne.w	800d2d0 <lcp_ackci+0x3e0>
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ACKCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	785b      	ldrb	r3, [r3, #1]
 800d08a:	f003 0301 	and.w	r3, r3, #1
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	2b00      	cmp	r3, #0
 800d092:	d021      	beq.n	800d0d8 <lcp_ackci+0x1e8>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	3b03      	subs	r3, #3
 800d098:	607b      	str	r3, [r7, #4]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	f2c0 8119 	blt.w	800d2d4 <lcp_ackci+0x3e4>
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	1c5a      	adds	r2, r3, #1
 800d0a6:	60ba      	str	r2, [r7, #8]
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	76fb      	strb	r3, [r7, #27]
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	1c5a      	adds	r2, r3, #1
 800d0b0:	60ba      	str	r2, [r7, #8]
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	76bb      	strb	r3, [r7, #26]
 800d0b6:	7ebb      	ldrb	r3, [r7, #26]
 800d0b8:	2b03      	cmp	r3, #3
 800d0ba:	f040 8120 	bne.w	800d2fe <lcp_ackci+0x40e>
 800d0be:	7efb      	ldrb	r3, [r7, #27]
 800d0c0:	2b0d      	cmp	r3, #13
 800d0c2:	f040 811c 	bne.w	800d2fe <lcp_ackci+0x40e>
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	1c5a      	adds	r2, r3, #1
 800d0ca:	60ba      	str	r2, [r7, #8]
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	74fb      	strb	r3, [r7, #19]
 800d0d0:	7cfb      	ldrb	r3, [r7, #19]
 800d0d2:	2b06      	cmp	r3, #6
 800d0d4:	f040 8100 	bne.w	800d2d8 <lcp_ackci+0x3e8>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 800d0d8:	69fb      	ldr	r3, [r7, #28]
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	f003 0320 	and.w	r3, r3, #32
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d042      	beq.n	800d16c <lcp_ackci+0x27c>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	3b06      	subs	r3, #6
 800d0ea:	607b      	str	r3, [r7, #4]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	f2c0 80f4 	blt.w	800d2dc <lcp_ackci+0x3ec>
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	1c5a      	adds	r2, r3, #1
 800d0f8:	60ba      	str	r2, [r7, #8]
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	76fb      	strb	r3, [r7, #27]
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	1c5a      	adds	r2, r3, #1
 800d102:	60ba      	str	r2, [r7, #8]
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	76bb      	strb	r3, [r7, #26]
 800d108:	7ebb      	ldrb	r3, [r7, #26]
 800d10a:	2b06      	cmp	r3, #6
 800d10c:	f040 80f7 	bne.w	800d2fe <lcp_ackci+0x40e>
 800d110:	7efb      	ldrb	r3, [r7, #27]
 800d112:	2b05      	cmp	r3, #5
 800d114:	f040 80f3 	bne.w	800d2fe <lcp_ackci+0x40e>
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	1c5a      	adds	r2, r3, #1
 800d11c:	60ba      	str	r2, [r7, #8]
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	021b      	lsls	r3, r3, #8
 800d122:	617b      	str	r3, [r7, #20]
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	1c5a      	adds	r2, r3, #1
 800d128:	60ba      	str	r2, [r7, #8]
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	461a      	mov	r2, r3
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	4313      	orrs	r3, r2
 800d132:	617b      	str	r3, [r7, #20]
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	021b      	lsls	r3, r3, #8
 800d138:	617b      	str	r3, [r7, #20]
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	1c5a      	adds	r2, r3, #1
 800d13e:	60ba      	str	r2, [r7, #8]
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	461a      	mov	r2, r3
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	4313      	orrs	r3, r2
 800d148:	617b      	str	r3, [r7, #20]
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	021b      	lsls	r3, r3, #8
 800d14e:	617b      	str	r3, [r7, #20]
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	1c5a      	adds	r2, r3, #1
 800d154:	60ba      	str	r2, [r7, #8]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	461a      	mov	r2, r3
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	4313      	orrs	r3, r2
 800d15e:	617b      	str	r3, [r7, #20]
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	689a      	ldr	r2, [r3, #8]
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	429a      	cmp	r2, r3
 800d168:	f040 80ba 	bne.w	800d2e0 <lcp_ackci+0x3f0>
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d174:	b2db      	uxtb	r3, r3
 800d176:	2b00      	cmp	r3, #0
 800d178:	d018      	beq.n	800d1ac <lcp_ackci+0x2bc>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	3b02      	subs	r3, #2
 800d17e:	607b      	str	r3, [r7, #4]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2b00      	cmp	r3, #0
 800d184:	f2c0 80ae 	blt.w	800d2e4 <lcp_ackci+0x3f4>
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	1c5a      	adds	r2, r3, #1
 800d18c:	60ba      	str	r2, [r7, #8]
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	76fb      	strb	r3, [r7, #27]
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	1c5a      	adds	r2, r3, #1
 800d196:	60ba      	str	r2, [r7, #8]
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	76bb      	strb	r3, [r7, #26]
 800d19c:	7ebb      	ldrb	r3, [r7, #26]
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	f040 80ad 	bne.w	800d2fe <lcp_ackci+0x40e>
 800d1a4:	7efb      	ldrb	r3, [r7, #27]
 800d1a6:	2b07      	cmp	r3, #7
 800d1a8:	f040 80a9 	bne.w	800d2fe <lcp_ackci+0x40e>
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d018      	beq.n	800d1ec <lcp_ackci+0x2fc>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	3b02      	subs	r3, #2
 800d1be:	607b      	str	r3, [r7, #4]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	f2c0 8090 	blt.w	800d2e8 <lcp_ackci+0x3f8>
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	1c5a      	adds	r2, r3, #1
 800d1cc:	60ba      	str	r2, [r7, #8]
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	76fb      	strb	r3, [r7, #27]
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	1c5a      	adds	r2, r3, #1
 800d1d6:	60ba      	str	r2, [r7, #8]
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	76bb      	strb	r3, [r7, #26]
 800d1dc:	7ebb      	ldrb	r3, [r7, #26]
 800d1de:	2b02      	cmp	r3, #2
 800d1e0:	f040 808d 	bne.w	800d2fe <lcp_ackci+0x40e>
 800d1e4:	7efb      	ldrb	r3, [r7, #27]
 800d1e6:	2b08      	cmp	r3, #8
 800d1e8:	f040 8089 	bne.w	800d2fe <lcp_ackci+0x40e>
#ifdef HAVE_MULTILINK
    ACKCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 800d1ec:	69fb      	ldr	r3, [r7, #28]
 800d1ee:	785b      	ldrb	r3, [r3, #1]
 800d1f0:	f003 0302 	and.w	r3, r3, #2
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d015      	beq.n	800d226 <lcp_ackci+0x336>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	3b02      	subs	r3, #2
 800d1fe:	607b      	str	r3, [r7, #4]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2b00      	cmp	r3, #0
 800d204:	db72      	blt.n	800d2ec <lcp_ackci+0x3fc>
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	1c5a      	adds	r2, r3, #1
 800d20a:	60ba      	str	r2, [r7, #8]
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	76fb      	strb	r3, [r7, #27]
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	1c5a      	adds	r2, r3, #1
 800d214:	60ba      	str	r2, [r7, #8]
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	76bb      	strb	r3, [r7, #26]
 800d21a:	7ebb      	ldrb	r3, [r7, #26]
 800d21c:	2b02      	cmp	r3, #2
 800d21e:	d16e      	bne.n	800d2fe <lcp_ackci+0x40e>
 800d220:	7efb      	ldrb	r3, [r7, #27]
 800d222:	2b12      	cmp	r3, #18
 800d224:	d16b      	bne.n	800d2fe <lcp_ackci+0x40e>
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	785b      	ldrb	r3, [r3, #1]
 800d22a:	f003 0304 	and.w	r3, r3, #4
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	2b00      	cmp	r3, #0
 800d232:	d03e      	beq.n	800d2b2 <lcp_ackci+0x3c2>
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	7b9b      	ldrb	r3, [r3, #14]
 800d238:	3303      	adds	r3, #3
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	1ad3      	subs	r3, r2, r3
 800d23e:	607b      	str	r3, [r7, #4]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	db54      	blt.n	800d2f0 <lcp_ackci+0x400>
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	1c5a      	adds	r2, r3, #1
 800d24a:	60ba      	str	r2, [r7, #8]
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	76fb      	strb	r3, [r7, #27]
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	1c5a      	adds	r2, r3, #1
 800d254:	60ba      	str	r2, [r7, #8]
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	76bb      	strb	r3, [r7, #26]
 800d25a:	7eba      	ldrb	r2, [r7, #26]
 800d25c:	69fb      	ldr	r3, [r7, #28]
 800d25e:	7b9b      	ldrb	r3, [r3, #14]
 800d260:	3303      	adds	r3, #3
 800d262:	429a      	cmp	r2, r3
 800d264:	d14b      	bne.n	800d2fe <lcp_ackci+0x40e>
 800d266:	7efb      	ldrb	r3, [r7, #27]
 800d268:	2b13      	cmp	r3, #19
 800d26a:	d148      	bne.n	800d2fe <lcp_ackci+0x40e>
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	1c5a      	adds	r2, r3, #1
 800d270:	60ba      	str	r2, [r7, #8]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	74fb      	strb	r3, [r7, #19]
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	7b5b      	ldrb	r3, [r3, #13]
 800d27a:	7cfa      	ldrb	r2, [r7, #19]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d139      	bne.n	800d2f4 <lcp_ackci+0x404>
 800d280:	2300      	movs	r3, #0
 800d282:	627b      	str	r3, [r7, #36]	; 0x24
 800d284:	e00f      	b.n	800d2a6 <lcp_ackci+0x3b6>
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	1c5a      	adds	r2, r3, #1
 800d28a:	60ba      	str	r2, [r7, #8]
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	74fb      	strb	r3, [r7, #19]
 800d290:	69fa      	ldr	r2, [r7, #28]
 800d292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d294:	4413      	add	r3, r2
 800d296:	330f      	adds	r3, #15
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	7cfa      	ldrb	r2, [r7, #19]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d12b      	bne.n	800d2f8 <lcp_ackci+0x408>
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	627b      	str	r3, [r7, #36]	; 0x24
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	7b9b      	ldrb	r3, [r3, #14]
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	dce9      	bgt.n	800d286 <lcp_ackci+0x396>
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d121      	bne.n	800d2fc <lcp_ackci+0x40c>
	goto bad;
    return (1);
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e021      	b.n	800d300 <lcp_ackci+0x410>
    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 800d2bc:	bf00      	nop
 800d2be:	e01e      	b.n	800d2fe <lcp_ackci+0x40e>
 800d2c0:	bf00      	nop
 800d2c2:	e01c      	b.n	800d2fe <lcp_ackci+0x40e>
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 800d2c4:	bf00      	nop
 800d2c6:	e01a      	b.n	800d2fe <lcp_ackci+0x40e>
 800d2c8:	bf00      	nop
 800d2ca:	e018      	b.n	800d2fe <lcp_ackci+0x40e>
    ACKCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 800d2cc:	bf00      	nop
 800d2ce:	e016      	b.n	800d2fe <lcp_ackci+0x40e>
 800d2d0:	bf00      	nop
 800d2d2:	e014      	b.n	800d2fe <lcp_ackci+0x40e>
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 800d2d4:	bf00      	nop
 800d2d6:	e012      	b.n	800d2fe <lcp_ackci+0x40e>
 800d2d8:	bf00      	nop
 800d2da:	e010      	b.n	800d2fe <lcp_ackci+0x40e>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 800d2dc:	bf00      	nop
 800d2de:	e00e      	b.n	800d2fe <lcp_ackci+0x40e>
 800d2e0:	bf00      	nop
 800d2e2:	e00c      	b.n	800d2fe <lcp_ackci+0x40e>
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 800d2e4:	bf00      	nop
 800d2e6:	e00a      	b.n	800d2fe <lcp_ackci+0x40e>
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 800d2e8:	bf00      	nop
 800d2ea:	e008      	b.n	800d2fe <lcp_ackci+0x40e>
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 800d2ec:	bf00      	nop
 800d2ee:	e006      	b.n	800d2fe <lcp_ackci+0x40e>
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 800d2f0:	bf00      	nop
 800d2f2:	e004      	b.n	800d2fe <lcp_ackci+0x40e>
 800d2f4:	bf00      	nop
 800d2f6:	e002      	b.n	800d2fe <lcp_ackci+0x40e>
 800d2f8:	bf00      	nop
 800d2fa:	e000      	b.n	800d2fe <lcp_ackci+0x40e>
	goto bad;
 800d2fc:	bf00      	nop
bad:
    LCPDEBUG(("lcp_acki: received bad Ack!"));
    return (0);
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	4618      	mov	r0, r3
 800d302:	372c      	adds	r7, #44	; 0x2c
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <lcp_nakci>:
 *
 * Returns:
 *	0 - Nak was bad.
 *	1 - Nak was good.
 */
static int lcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 800d30c:	b5b0      	push	{r4, r5, r7, lr}
 800d30e:	b0a0      	sub	sp, #128	; 0x80
 800d310:	af00      	add	r7, sp, #0
 800d312:	60f8      	str	r0, [r7, #12]
 800d314:	60b9      	str	r1, [r7, #8]
 800d316:	607a      	str	r2, [r7, #4]
 800d318:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	67bb      	str	r3, [r7, #120]	; 0x78
    lcp_options *go = &pcb->lcp_gotoptions;
 800d320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d322:	3384      	adds	r3, #132	; 0x84
 800d324:	677b      	str	r3, [r7, #116]	; 0x74
    lcp_options *wo = &pcb->lcp_wantoptions;
 800d326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d328:	3360      	adds	r3, #96	; 0x60
 800d32a:	673b      	str	r3, [r7, #112]	; 0x70
    u_char citype, cichar, *next;
    u_short cishort;
    u32_t cilong;
    lcp_options no;		/* options we've seen Naks for */
    lcp_options try_;		/* options to request next time */
    int looped_back = 0;
 800d32c:	2300      	movs	r3, #0
 800d32e:	67fb      	str	r3, [r7, #124]	; 0x7c
    int cilen;

    BZERO(&no, sizeof(no));
 800d330:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d334:	2224      	movs	r2, #36	; 0x24
 800d336:	2100      	movs	r1, #0
 800d338:	4618      	mov	r0, r3
 800d33a:	f003 fb4e 	bl	80109da <memset>
    try_ = *go;
 800d33e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d340:	f107 0414 	add.w	r4, r7, #20
 800d344:	461d      	mov	r5, r3
 800d346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d34a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d34c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d34e:	682b      	ldr	r3, [r5, #0]
 800d350:	6023      	str	r3, [r4, #0]
     * we want.  Therefore, accept any MRU less than what we asked for,
     * but then ignore the new value when setting the MRU in the kernel.
     * If they send us a bigger MRU than what we asked, accept it, up to
     * the limit of the default MRU we'd get if we didn't negotiate.
     */
    if (go->neg_mru && go->mru != PPP_DEFMRU) {
 800d352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	f003 0304 	and.w	r3, r3, #4
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d045      	beq.n	800d3ec <lcp_nakci+0xe0>
 800d360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d362:	885b      	ldrh	r3, [r3, #2]
 800d364:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d368:	4293      	cmp	r3, r2
 800d36a:	d03f      	beq.n	800d3ec <lcp_nakci+0xe0>
	NAKCISHORT(CI_MRU, neg_mru,
 800d36c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	f003 0304 	and.w	r3, r3, #4
 800d374:	b2db      	uxtb	r3, r3
 800d376:	2b00      	cmp	r3, #0
 800d378:	d038      	beq.n	800d3ec <lcp_nakci+0xe0>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2b03      	cmp	r3, #3
 800d37e:	dd35      	ble.n	800d3ec <lcp_nakci+0xe0>
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	3301      	adds	r3, #1
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	2b04      	cmp	r3, #4
 800d388:	d130      	bne.n	800d3ec <lcp_nakci+0xe0>
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d12c      	bne.n	800d3ec <lcp_nakci+0xe0>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	3b04      	subs	r3, #4
 800d396:	607b      	str	r3, [r7, #4]
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	3302      	adds	r3, #2
 800d39c:	60bb      	str	r3, [r7, #8]
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	1c5a      	adds	r2, r3, #1
 800d3a2:	60ba      	str	r2, [r7, #8]
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	021b      	lsls	r3, r3, #8
 800d3aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	1c5a      	adds	r2, r3, #1
 800d3b2:	60ba      	str	r2, [r7, #8]
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	b29a      	uxth	r2, r3
 800d3b8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800d3c2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d3c6:	f043 0304 	orr.w	r3, r3, #4
 800d3ca:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d3ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3d0:	885b      	ldrh	r3, [r3, #2]
 800d3d2:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d905      	bls.n	800d3e6 <lcp_nakci+0xda>
 800d3da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d3de:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d802      	bhi.n	800d3ec <lcp_nakci+0xe0>
 800d3e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d3ea:	82fb      	strh	r3, [r7, #22]
    }

    /*
     * Add any characters they want to our (receive-side) asyncmap.
     */
    if (go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) {
 800d3ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	f003 0308 	and.w	r3, r3, #8
 800d3f4:	b2db      	uxtb	r3, r3
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d04c      	beq.n	800d494 <lcp_nakci+0x188>
 800d3fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d402:	d047      	beq.n	800d494 <lcp_nakci+0x188>
	NAKCILONG(CI_ASYNCMAP, neg_asyncmap,
 800d404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	f003 0308 	and.w	r3, r3, #8
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d040      	beq.n	800d494 <lcp_nakci+0x188>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2b05      	cmp	r3, #5
 800d416:	dd3d      	ble.n	800d494 <lcp_nakci+0x188>
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	3301      	adds	r3, #1
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	2b06      	cmp	r3, #6
 800d420:	d138      	bne.n	800d494 <lcp_nakci+0x188>
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	2b02      	cmp	r3, #2
 800d428:	d134      	bne.n	800d494 <lcp_nakci+0x188>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	3b06      	subs	r3, #6
 800d42e:	607b      	str	r3, [r7, #4]
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	3302      	adds	r3, #2
 800d434:	60bb      	str	r3, [r7, #8]
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	1c5a      	adds	r2, r3, #1
 800d43a:	60ba      	str	r2, [r7, #8]
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	021b      	lsls	r3, r3, #8
 800d440:	66bb      	str	r3, [r7, #104]	; 0x68
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	1c5a      	adds	r2, r3, #1
 800d446:	60ba      	str	r2, [r7, #8]
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	461a      	mov	r2, r3
 800d44c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d44e:	4313      	orrs	r3, r2
 800d450:	66bb      	str	r3, [r7, #104]	; 0x68
 800d452:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d454:	021b      	lsls	r3, r3, #8
 800d456:	66bb      	str	r3, [r7, #104]	; 0x68
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	1c5a      	adds	r2, r3, #1
 800d45c:	60ba      	str	r2, [r7, #8]
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	461a      	mov	r2, r3
 800d462:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d464:	4313      	orrs	r3, r2
 800d466:	66bb      	str	r3, [r7, #104]	; 0x68
 800d468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d46a:	021b      	lsls	r3, r3, #8
 800d46c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	1c5a      	adds	r2, r3, #1
 800d472:	60ba      	str	r2, [r7, #8]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	461a      	mov	r2, r3
 800d478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d47a:	4313      	orrs	r3, r2
 800d47c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d47e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d482:	f043 0308 	orr.w	r3, r3, #8
 800d486:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d48a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d48c:	685a      	ldr	r2, [r3, #4]
 800d48e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d490:	4313      	orrs	r3, r2
 800d492:	61bb      	str	r3, [r7, #24]
    if ((0
#if CHAP_SUPPORT
        || go->neg_chap
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
        || go->neg_upap
 800d494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	f003 0310 	and.w	r3, r3, #16
 800d49c:	b2db      	uxtb	r3, r3
    if ((0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d04d      	beq.n	800d53e <lcp_nakci+0x232>
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
        || go->neg_eap
#endif /* EAP_SUPPORT */
        )
	&& len >= CILEN_SHORT
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2b03      	cmp	r3, #3
 800d4a6:	dd4a      	ble.n	800d53e <lcp_nakci+0x232>
	&& p[0] == CI_AUTHTYPE && p[1] >= CILEN_SHORT && p[1] <= len) {
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	2b03      	cmp	r3, #3
 800d4ae:	d146      	bne.n	800d53e <lcp_nakci+0x232>
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	2b03      	cmp	r3, #3
 800d4b8:	d941      	bls.n	800d53e <lcp_nakci+0x232>
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	dc3a      	bgt.n	800d53e <lcp_nakci+0x232>
	cilen = p[1];
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	667b      	str	r3, [r7, #100]	; 0x64
	len -= cilen;
 800d4d0:	687a      	ldr	r2, [r7, #4]
 800d4d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4d4:	1ad3      	subs	r3, r2, r3
 800d4d6:	607b      	str	r3, [r7, #4]
#if CHAP_SUPPORT
	no.neg_chap = go->neg_chap;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	no.neg_upap = go->neg_upap;
 800d4d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d4e0:	b2da      	uxtb	r2, r3
 800d4e2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d4e6:	f362 1304 	bfi	r3, r2, #4, #1
 800d4ea:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
	no.neg_eap = go->neg_eap;
#endif /* EAP_SUPPORT */
	INCPTR(2, p);
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	3302      	adds	r3, #2
 800d4f2:	60bb      	str	r3, [r7, #8]
	GETSHORT(cishort, p);
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	1c5a      	adds	r2, r3, #1
 800d4f8:	60ba      	str	r2, [r7, #8]
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	021b      	lsls	r3, r3, #8
 800d500:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	1c5a      	adds	r2, r3, #1
 800d508:	60ba      	str	r2, [r7, #8]
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	b29a      	uxth	r2, r3
 800d50e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d512:	4313      	orrs	r3, r2
 800d514:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

#if PAP_SUPPORT
	if (cishort == PPP_PAP && cilen == CILEN_SHORT) {
 800d518:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d51c:	f24c 0223 	movw	r2, #49187	; 0xc023
 800d520:	4293      	cmp	r3, r2
 800d522:	d103      	bne.n	800d52c <lcp_nakci+0x220>
 800d524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d526:	2b04      	cmp	r3, #4
 800d528:	f000 8265 	beq.w	800d9f6 <lcp_nakci+0x6ea>
	    else
#endif /* CHAP_SUPPORT */

#if PAP_SUPPORT
	    if(1)
		try_.neg_upap = 0;
 800d52c:	7d3b      	ldrb	r3, [r7, #20]
 800d52e:	f36f 1304 	bfc	r3, #4, #1
 800d532:	753b      	strb	r3, [r7, #20]
	    else
#endif /* PAP_SUPPORT */
	    {}

	    p += cilen - CILEN_SHORT;
 800d534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d536:	3b04      	subs	r3, #4
 800d538:	68ba      	ldr	r2, [r7, #8]
 800d53a:	4413      	add	r3, r2
 800d53c:	60bb      	str	r3, [r7, #8]
#endif /* LQR_SUPPORT */

    /*
     * Only implementing CBCP...not the rest of the callback options
     */
    NAKCICHAR(CI_CALLBACK, neg_cbcp,
 800d53e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d540:	785b      	ldrb	r3, [r3, #1]
 800d542:	f003 0301 	and.w	r3, r3, #1
 800d546:	b2db      	uxtb	r3, r3
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d021      	beq.n	800d590 <lcp_nakci+0x284>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2b02      	cmp	r3, #2
 800d550:	dd1e      	ble.n	800d590 <lcp_nakci+0x284>
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	3301      	adds	r3, #1
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	2b03      	cmp	r3, #3
 800d55a:	d119      	bne.n	800d590 <lcp_nakci+0x284>
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	2b0d      	cmp	r3, #13
 800d562:	d115      	bne.n	800d590 <lcp_nakci+0x284>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	3b03      	subs	r3, #3
 800d568:	607b      	str	r3, [r7, #4]
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	3302      	adds	r3, #2
 800d56e:	60bb      	str	r3, [r7, #8]
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	1c5a      	adds	r2, r3, #1
 800d574:	60ba      	str	r2, [r7, #8]
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800d57c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d580:	f043 0301 	orr.w	r3, r3, #1
 800d584:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d588:	7d7b      	ldrb	r3, [r7, #21]
 800d58a:	f36f 0300 	bfc	r3, #0, #1
 800d58e:	757b      	strb	r3, [r7, #21]
              );

    /*
     * Check for a looped-back line.
     */
    NAKCILONG(CI_MAGICNUMBER, neg_magicnumber,
 800d590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	f003 0320 	and.w	r3, r3, #32
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d041      	beq.n	800d622 <lcp_nakci+0x316>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2b05      	cmp	r3, #5
 800d5a2:	dd3e      	ble.n	800d622 <lcp_nakci+0x316>
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	2b06      	cmp	r3, #6
 800d5ac:	d139      	bne.n	800d622 <lcp_nakci+0x316>
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	2b05      	cmp	r3, #5
 800d5b4:	d135      	bne.n	800d622 <lcp_nakci+0x316>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	3b06      	subs	r3, #6
 800d5ba:	607b      	str	r3, [r7, #4]
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	3302      	adds	r3, #2
 800d5c0:	60bb      	str	r3, [r7, #8]
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	1c5a      	adds	r2, r3, #1
 800d5c6:	60ba      	str	r2, [r7, #8]
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	021b      	lsls	r3, r3, #8
 800d5cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	1c5a      	adds	r2, r3, #1
 800d5d2:	60ba      	str	r2, [r7, #8]
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	66bb      	str	r3, [r7, #104]	; 0x68
 800d5de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5e0:	021b      	lsls	r3, r3, #8
 800d5e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	1c5a      	adds	r2, r3, #1
 800d5e8:	60ba      	str	r2, [r7, #8]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d5f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5f6:	021b      	lsls	r3, r3, #8
 800d5f8:	66bb      	str	r3, [r7, #104]	; 0x68
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	1c5a      	adds	r2, r3, #1
 800d5fe:	60ba      	str	r2, [r7, #8]
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	461a      	mov	r2, r3
 800d604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d606:	4313      	orrs	r3, r2
 800d608:	66bb      	str	r3, [r7, #104]	; 0x68
 800d60a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d60e:	f043 0320 	orr.w	r3, r3, #32
 800d612:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d616:	f001 f965 	bl	800e8e4 <magic>
 800d61a:	4603      	mov	r3, r0
 800d61c:	61fb      	str	r3, [r7, #28]
 800d61e:	2301      	movs	r3, #1
 800d620:	67fb      	str	r3, [r7, #124]	; 0x7c
    /*
     * Peer shouldn't send Nak for protocol compression or
     * address/control compression requests; they should send
     * a Reject instead.  If they send a Nak, treat it as a Reject.
     */
    NAKCIVOID(CI_PCOMPRESSION, neg_pcompression);
 800d622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d01b      	beq.n	800d668 <lcp_nakci+0x35c>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2b01      	cmp	r3, #1
 800d634:	dd18      	ble.n	800d668 <lcp_nakci+0x35c>
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	3301      	adds	r3, #1
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	2b02      	cmp	r3, #2
 800d63e:	d113      	bne.n	800d668 <lcp_nakci+0x35c>
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	2b07      	cmp	r3, #7
 800d646:	d10f      	bne.n	800d668 <lcp_nakci+0x35c>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	3b02      	subs	r3, #2
 800d64c:	607b      	str	r3, [r7, #4]
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	3302      	adds	r3, #2
 800d652:	60bb      	str	r3, [r7, #8]
 800d654:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d65c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d660:	7d3b      	ldrb	r3, [r7, #20]
 800d662:	f36f 1386 	bfc	r3, #6, #1
 800d666:	753b      	strb	r3, [r7, #20]
    NAKCIVOID(CI_ACCOMPRESSION, neg_accompression);
 800d668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d670:	b2db      	uxtb	r3, r3
 800d672:	2b00      	cmp	r3, #0
 800d674:	d01b      	beq.n	800d6ae <lcp_nakci+0x3a2>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2b01      	cmp	r3, #1
 800d67a:	dd18      	ble.n	800d6ae <lcp_nakci+0x3a2>
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	3301      	adds	r3, #1
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	2b02      	cmp	r3, #2
 800d684:	d113      	bne.n	800d6ae <lcp_nakci+0x3a2>
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	2b08      	cmp	r3, #8
 800d68c:	d10f      	bne.n	800d6ae <lcp_nakci+0x3a2>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	3b02      	subs	r3, #2
 800d692:	607b      	str	r3, [r7, #4]
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	3302      	adds	r3, #2
 800d698:	60bb      	str	r3, [r7, #8]
 800d69a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d69e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6a2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d6a6:	7d3b      	ldrb	r3, [r7, #20]
 800d6a8:	f36f 13c7 	bfc	r3, #7, #1
 800d6ac:	753b      	strb	r3, [r7, #20]

    /*
     * Nak for short sequence numbers shouldn't be sent, treat it
     * like a reject.
     */
    NAKCIVOID(CI_SSNHF, neg_ssnhf);
 800d6ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6b0:	785b      	ldrb	r3, [r3, #1]
 800d6b2:	f003 0302 	and.w	r3, r3, #2
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d01b      	beq.n	800d6f4 <lcp_nakci+0x3e8>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	dd18      	ble.n	800d6f4 <lcp_nakci+0x3e8>
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	2b02      	cmp	r3, #2
 800d6ca:	d113      	bne.n	800d6f4 <lcp_nakci+0x3e8>
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	2b12      	cmp	r3, #18
 800d6d2:	d10f      	bne.n	800d6f4 <lcp_nakci+0x3e8>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	3b02      	subs	r3, #2
 800d6d8:	607b      	str	r3, [r7, #4]
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	3302      	adds	r3, #2
 800d6de:	60bb      	str	r3, [r7, #8]
 800d6e0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d6e4:	f043 0302 	orr.w	r3, r3, #2
 800d6e8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d6ec:	7d7b      	ldrb	r3, [r7, #21]
 800d6ee:	f36f 0341 	bfc	r3, #1, #1
 800d6f2:	757b      	strb	r3, [r7, #21]

    /*
     * Nak of the endpoint discriminator option is not permitted,
     * treat it like a reject.
     */
    NAKCIENDP(CI_EPDISC, neg_endpoint);
 800d6f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6f6:	785b      	ldrb	r3, [r3, #1]
 800d6f8:	f003 0304 	and.w	r3, r3, #4
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	f000 8148 	beq.w	800d994 <lcp_nakci+0x688>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b02      	cmp	r3, #2
 800d708:	f340 8144 	ble.w	800d994 <lcp_nakci+0x688>
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	2b13      	cmp	r3, #19
 800d712:	f040 813f 	bne.w	800d994 <lcp_nakci+0x688>
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	3301      	adds	r3, #1
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	2b02      	cmp	r3, #2
 800d71e:	f240 8139 	bls.w	800d994 <lcp_nakci+0x688>
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	3301      	adds	r3, #1
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	461a      	mov	r2, r3
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	f300 8131 	bgt.w	800d994 <lcp_nakci+0x688>
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	3301      	adds	r3, #1
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	461a      	mov	r2, r3
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	1a9b      	subs	r3, r3, r2
 800d73e:	607b      	str	r3, [r7, #4]
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	3301      	adds	r3, #1
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	461a      	mov	r2, r3
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	4413      	add	r3, r2
 800d74c:	60bb      	str	r3, [r7, #8]
 800d74e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d752:	f043 0304 	orr.w	r3, r3, #4
 800d756:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d75a:	7d7b      	ldrb	r3, [r7, #21]
 800d75c:	f36f 0382 	bfc	r3, #2, #1
 800d760:	757b      	strb	r3, [r7, #21]
     * For the quality protocol, the Nak means `ask me to send you quality
     * reports', but if we didn't ask for them, we don't want them.
     * An option we don't recognize represents the peer asking to
     * negotiate some option we don't support, so ignore it.
     */
    while (len >= CILEN_VOID) {
 800d762:	e117      	b.n	800d994 <lcp_nakci+0x688>
	GETCHAR(citype, p);
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	1c5a      	adds	r2, r3, #1
 800d768:	60ba      	str	r2, [r7, #8]
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	GETCHAR(cilen, p);
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	1c5a      	adds	r2, r3, #1
 800d774:	60ba      	str	r2, [r7, #8]
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	667b      	str	r3, [r7, #100]	; 0x64
	if (cilen < CILEN_VOID || (len -= cilen) < 0)
 800d77a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	f340 813a 	ble.w	800d9f6 <lcp_nakci+0x6ea>
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d786:	1ad3      	subs	r3, r2, r3
 800d788:	607b      	str	r3, [r7, #4]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	f2c0 8132 	blt.w	800d9f6 <lcp_nakci+0x6ea>
	    goto bad;
	next = p + cilen - 2;
 800d792:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d794:	3b02      	subs	r3, #2
 800d796:	68ba      	ldr	r2, [r7, #8]
 800d798:	4413      	add	r3, r2
 800d79a:	65fb      	str	r3, [r7, #92]	; 0x5c

	switch (citype) {
 800d79c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800d7a0:	3b01      	subs	r3, #1
 800d7a2:	2b12      	cmp	r3, #18
 800d7a4:	f200 80f1 	bhi.w	800d98a <lcp_nakci+0x67e>
 800d7a8:	a201      	add	r2, pc, #4	; (adr r2, 800d7b0 <lcp_nakci+0x4a4>)
 800d7aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ae:	bf00      	nop
 800d7b0:	0800d7fd 	.word	0x0800d7fd
 800d7b4:	0800d873 	.word	0x0800d873
 800d7b8:	0800d8a7 	.word	0x0800d8a7
 800d7bc:	0800d98b 	.word	0x0800d98b
 800d7c0:	0800d8c9 	.word	0x0800d8c9
 800d7c4:	0800d98b 	.word	0x0800d98b
 800d7c8:	0800d8f3 	.word	0x0800d8f3
 800d7cc:	0800d917 	.word	0x0800d917
 800d7d0:	0800d98b 	.word	0x0800d98b
 800d7d4:	0800d98b 	.word	0x0800d98b
 800d7d8:	0800d98b 	.word	0x0800d98b
 800d7dc:	0800d98b 	.word	0x0800d98b
 800d7e0:	0800d98b 	.word	0x0800d98b
 800d7e4:	0800d98b 	.word	0x0800d98b
 800d7e8:	0800d98b 	.word	0x0800d98b
 800d7ec:	0800d98b 	.word	0x0800d98b
 800d7f0:	0800d98b 	.word	0x0800d98b
 800d7f4:	0800d93b 	.word	0x0800d93b
 800d7f8:	0800d967 	.word	0x0800d967
	case CI_MRU:
	    if ((go->neg_mru && go->mru != PPP_DEFMRU)
 800d7fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	f003 0304 	and.w	r3, r3, #4
 800d804:	b2db      	uxtb	r3, r3
 800d806:	2b00      	cmp	r3, #0
 800d808:	d006      	beq.n	800d818 <lcp_nakci+0x50c>
 800d80a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d80c:	885b      	ldrh	r3, [r3, #2]
 800d80e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d812:	4293      	cmp	r3, r2
 800d814:	f040 80ef 	bne.w	800d9f6 <lcp_nakci+0x6ea>
		|| no.neg_mru || cilen != CILEN_SHORT)
 800d818:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d81c:	f003 0304 	and.w	r3, r3, #4
 800d820:	b2db      	uxtb	r3, r3
 800d822:	2b00      	cmp	r3, #0
 800d824:	f040 80e7 	bne.w	800d9f6 <lcp_nakci+0x6ea>
 800d828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d82a:	2b04      	cmp	r3, #4
 800d82c:	f040 80e3 	bne.w	800d9f6 <lcp_nakci+0x6ea>
		goto bad;
	    GETSHORT(cishort, p);
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	1c5a      	adds	r2, r3, #1
 800d834:	60ba      	str	r2, [r7, #8]
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	b29b      	uxth	r3, r3
 800d83a:	021b      	lsls	r3, r3, #8
 800d83c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	1c5a      	adds	r2, r3, #1
 800d844:	60ba      	str	r2, [r7, #8]
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	b29a      	uxth	r2, r3
 800d84a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d84e:	4313      	orrs	r3, r2
 800d850:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	    if (cishort < PPP_DEFMRU) {
 800d854:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d858:	f240 52db 	movw	r2, #1499	; 0x5db
 800d85c:	4293      	cmp	r3, r2
 800d85e:	f200 8096 	bhi.w	800d98e <lcp_nakci+0x682>
		try_.neg_mru = 1;
 800d862:	7d3b      	ldrb	r3, [r7, #20]
 800d864:	f043 0304 	orr.w	r3, r3, #4
 800d868:	753b      	strb	r3, [r7, #20]
		try_.mru = cishort;
 800d86a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d86e:	82fb      	strh	r3, [r7, #22]
	    }
	    break;
 800d870:	e08d      	b.n	800d98e <lcp_nakci+0x682>
	case CI_ASYNCMAP:
	    if ((go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF)
 800d872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	f003 0308 	and.w	r3, r3, #8
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d005      	beq.n	800d88c <lcp_nakci+0x580>
 800d880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d888:	f040 80b5 	bne.w	800d9f6 <lcp_nakci+0x6ea>
		|| no.neg_asyncmap || cilen != CILEN_LONG)
 800d88c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d890:	f003 0308 	and.w	r3, r3, #8
 800d894:	b2db      	uxtb	r3, r3
 800d896:	2b00      	cmp	r3, #0
 800d898:	f040 80ad 	bne.w	800d9f6 <lcp_nakci+0x6ea>
 800d89c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d89e:	2b06      	cmp	r3, #6
 800d8a0:	f040 80a9 	bne.w	800d9f6 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 800d8a4:	e074      	b.n	800d990 <lcp_nakci+0x684>
	    if ((0
#if CHAP_SUPPORT
                || go->neg_chap || no.neg_chap
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
                || go->neg_upap || no.neg_upap
 800d8a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	f003 0310 	and.w	r3, r3, #16
 800d8ae:	b2db      	uxtb	r3, r3
	    if ((0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	f040 80a0 	bne.w	800d9f6 <lcp_nakci+0x6ea>
                || go->neg_upap || no.neg_upap
 800d8b6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d8ba:	f003 0310 	and.w	r3, r3, #16
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f040 8098 	bne.w	800d9f6 <lcp_nakci+0x6ea>
#if EAP_SUPPORT
		|| go->neg_eap || no.neg_eap
#endif /* EAP_SUPPORT */
		))
		goto bad;
	    break;
 800d8c6:	e063      	b.n	800d990 <lcp_nakci+0x684>
	case CI_MAGICNUMBER:
	    if (go->neg_magicnumber || no.neg_magicnumber ||
 800d8c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	f003 0320 	and.w	r3, r3, #32
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f040 808f 	bne.w	800d9f6 <lcp_nakci+0x6ea>
 800d8d8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d8dc:	f003 0320 	and.w	r3, r3, #32
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	f040 8087 	bne.w	800d9f6 <lcp_nakci+0x6ea>
 800d8e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8ea:	2b06      	cmp	r3, #6
 800d8ec:	f040 8083 	bne.w	800d9f6 <lcp_nakci+0x6ea>
		cilen != CILEN_LONG)
		goto bad;
	    break;
 800d8f0:	e04e      	b.n	800d990 <lcp_nakci+0x684>
	case CI_PCOMPRESSION:
	    if (go->neg_pcompression || no.neg_pcompression
 800d8f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d17a      	bne.n	800d9f6 <lcp_nakci+0x6ea>
 800d900:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d908:	b2db      	uxtb	r3, r3
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d173      	bne.n	800d9f6 <lcp_nakci+0x6ea>
		|| cilen != CILEN_VOID)
 800d90e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d910:	2b02      	cmp	r3, #2
 800d912:	d170      	bne.n	800d9f6 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 800d914:	e03c      	b.n	800d990 <lcp_nakci+0x684>
	case CI_ACCOMPRESSION:
	    if (go->neg_accompression || no.neg_accompression
 800d916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	2b00      	cmp	r3, #0
 800d922:	d168      	bne.n	800d9f6 <lcp_nakci+0x6ea>
 800d924:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d928:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d161      	bne.n	800d9f6 <lcp_nakci+0x6ea>
		|| cilen != CILEN_VOID)
 800d932:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d934:	2b02      	cmp	r3, #2
 800d936:	d15e      	bne.n	800d9f6 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 800d938:	e02a      	b.n	800d990 <lcp_nakci+0x684>
	    if (go->neg_mrru || no.neg_mrru || cilen != CILEN_SHORT)
		goto bad;
	    break;
#endif /* HAVE_MULTILINK */
	case CI_SSNHF:
	    if (go->neg_ssnhf || no.neg_ssnhf || cilen != CILEN_VOID)
 800d93a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d93c:	785b      	ldrb	r3, [r3, #1]
 800d93e:	f003 0302 	and.w	r3, r3, #2
 800d942:	b2db      	uxtb	r3, r3
 800d944:	2b00      	cmp	r3, #0
 800d946:	d156      	bne.n	800d9f6 <lcp_nakci+0x6ea>
 800d948:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d94c:	f003 0302 	and.w	r3, r3, #2
 800d950:	b2db      	uxtb	r3, r3
 800d952:	2b00      	cmp	r3, #0
 800d954:	d14f      	bne.n	800d9f6 <lcp_nakci+0x6ea>
 800d956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d958:	2b02      	cmp	r3, #2
 800d95a:	d14c      	bne.n	800d9f6 <lcp_nakci+0x6ea>
		goto bad;
	    try_.neg_ssnhf = 1;
 800d95c:	7d7b      	ldrb	r3, [r7, #21]
 800d95e:	f043 0302 	orr.w	r3, r3, #2
 800d962:	757b      	strb	r3, [r7, #21]
	    break;
 800d964:	e014      	b.n	800d990 <lcp_nakci+0x684>
	case CI_EPDISC:
	    if (go->neg_endpoint || no.neg_endpoint || cilen < CILEN_CHAR)
 800d966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d968:	785b      	ldrb	r3, [r3, #1]
 800d96a:	f003 0304 	and.w	r3, r3, #4
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	2b00      	cmp	r3, #0
 800d972:	d140      	bne.n	800d9f6 <lcp_nakci+0x6ea>
 800d974:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d978:	f003 0304 	and.w	r3, r3, #4
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d139      	bne.n	800d9f6 <lcp_nakci+0x6ea>
 800d982:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d984:	2b02      	cmp	r3, #2
 800d986:	dd36      	ble.n	800d9f6 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 800d988:	e002      	b.n	800d990 <lcp_nakci+0x684>
	default:
	    break;
 800d98a:	bf00      	nop
 800d98c:	e000      	b.n	800d990 <lcp_nakci+0x684>
	    break;
 800d98e:	bf00      	nop
	}
	p = next;
 800d990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d992:	60bb      	str	r3, [r7, #8]
    while (len >= CILEN_VOID) {
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2b01      	cmp	r3, #1
 800d998:	f73f aee4 	bgt.w	800d764 <lcp_nakci+0x458>

    /*
     * OK, the Nak is good.  Now we can update state.
     * If there are any options left we ignore them.
     */
    if (f->state != PPP_FSM_OPENED) {
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	7c1b      	ldrb	r3, [r3, #16]
 800d9a0:	2b09      	cmp	r3, #9
 800d9a2:	d026      	beq.n	800d9f2 <lcp_nakci+0x6e6>
	if (looped_back) {
 800d9a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d016      	beq.n	800d9d8 <lcp_nakci+0x6cc>
	    if (++try_.numloops >= pcb->settings.lcp_loopbackfail) {
 800d9aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	b2db      	uxtb	r3, r3
 800d9b2:	f887 3020 	strb.w	r3, [r7, #32]
 800d9b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d9ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9bc:	7c9b      	ldrb	r3, [r3, #18]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d30d      	bcc.n	800d9de <lcp_nakci+0x6d2>
		ppp_notice(("Serial line is looped back."));
		pcb->err_code = PPPERR_LOOPBACK;
 800d9c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9c4:	220c      	movs	r2, #12
 800d9c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		lcp_close(f->pcb, "Loopback detected");
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	490c      	ldr	r1, [pc, #48]	; (800da00 <lcp_nakci+0x6f4>)
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7fe feb7 	bl	800c744 <lcp_close>
 800d9d6:	e002      	b.n	800d9de <lcp_nakci+0x6d2>
	    }
	} else
	    try_.numloops = 0;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	f887 3020 	strb.w	r3, [r7, #32]
	*go = try_;
 800d9de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d9e0:	461d      	mov	r5, r3
 800d9e2:	f107 0414 	add.w	r4, r7, #20
 800d9e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d9ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d9ee:	6823      	ldr	r3, [r4, #0]
 800d9f0:	602b      	str	r3, [r5, #0]
    }

    return 1;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	e000      	b.n	800d9f8 <lcp_nakci+0x6ec>

bad:
    LCPDEBUG(("lcp_nakci: received bad Nak!"));
    return 0;
 800d9f6:	2300      	movs	r3, #0
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3780      	adds	r7, #128	; 0x80
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bdb0      	pop	{r4, r5, r7, pc}
 800da00:	08013c38 	.word	0x08013c38

0800da04 <lcp_rejci>:
 *
 * Returns:
 *	0 - Reject was bad.
 *	1 - Reject was good.
 */
static int lcp_rejci(fsm *f, u_char *p, int len) {
 800da04:	b4b0      	push	{r4, r5, r7}
 800da06:	b095      	sub	sp, #84	; 0x54
 800da08:	af00      	add	r7, sp, #0
 800da0a:	60f8      	str	r0, [r7, #12]
 800da0c:	60b9      	str	r1, [r7, #8]
 800da0e:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	64bb      	str	r3, [r7, #72]	; 0x48
    lcp_options *go = &pcb->lcp_gotoptions;
 800da16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da18:	3384      	adds	r3, #132	; 0x84
 800da1a:	647b      	str	r3, [r7, #68]	; 0x44
    u_char cichar;
    u_short cishort;
    u32_t cilong;
    lcp_options try_;		/* options to request next time */

    try_ = *go;
 800da1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da1e:	f107 0414 	add.w	r4, r7, #20
 800da22:	461d      	mov	r5, r3
 800da24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da2c:	682b      	ldr	r3, [r5, #0]
 800da2e:	6023      	str	r3, [r4, #0]
		goto bad; \
	} \
	try_.neg = 0; \
    }

    REJCISHORT(CI_MRU, neg_mru, go->mru);
 800da30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	f003 0304 	and.w	r3, r3, #4
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d02e      	beq.n	800da9c <lcp_rejci+0x98>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2b03      	cmp	r3, #3
 800da42:	dd2b      	ble.n	800da9c <lcp_rejci+0x98>
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	3301      	adds	r3, #1
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	2b04      	cmp	r3, #4
 800da4c:	d126      	bne.n	800da9c <lcp_rejci+0x98>
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	2b01      	cmp	r3, #1
 800da54:	d122      	bne.n	800da9c <lcp_rejci+0x98>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	3b04      	subs	r3, #4
 800da5a:	607b      	str	r3, [r7, #4]
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	3302      	adds	r3, #2
 800da60:	60bb      	str	r3, [r7, #8]
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	1c5a      	adds	r2, r3, #1
 800da66:	60ba      	str	r2, [r7, #8]
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	021b      	lsls	r3, r3, #8
 800da6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	1c5a      	adds	r2, r3, #1
 800da76:	60ba      	str	r2, [r7, #8]
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	b29a      	uxth	r2, r3
 800da7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800da80:	4313      	orrs	r3, r2
 800da82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800da86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da88:	885b      	ldrh	r3, [r3, #2]
 800da8a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800da8e:	429a      	cmp	r2, r3
 800da90:	f040 81a8 	bne.w	800dde4 <lcp_rejci+0x3e0>
 800da94:	7d3b      	ldrb	r3, [r7, #20]
 800da96:	f36f 0382 	bfc	r3, #2, #1
 800da9a:	753b      	strb	r3, [r7, #20]
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 800da9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	f003 0308 	and.w	r3, r3, #8
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d03f      	beq.n	800db2a <lcp_rejci+0x126>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2b05      	cmp	r3, #5
 800daae:	dd3c      	ble.n	800db2a <lcp_rejci+0x126>
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	3301      	adds	r3, #1
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	2b06      	cmp	r3, #6
 800dab8:	d137      	bne.n	800db2a <lcp_rejci+0x126>
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	2b02      	cmp	r3, #2
 800dac0:	d133      	bne.n	800db2a <lcp_rejci+0x126>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	3b06      	subs	r3, #6
 800dac6:	607b      	str	r3, [r7, #4]
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	3302      	adds	r3, #2
 800dacc:	60bb      	str	r3, [r7, #8]
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	1c5a      	adds	r2, r3, #1
 800dad2:	60ba      	str	r2, [r7, #8]
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	021b      	lsls	r3, r3, #8
 800dad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	1c5a      	adds	r2, r3, #1
 800dade:	60ba      	str	r2, [r7, #8]
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	461a      	mov	r2, r3
 800dae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dae6:	4313      	orrs	r3, r2
 800dae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800daea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daec:	021b      	lsls	r3, r3, #8
 800daee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	1c5a      	adds	r2, r3, #1
 800daf4:	60ba      	str	r2, [r7, #8]
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	461a      	mov	r2, r3
 800dafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dafc:	4313      	orrs	r3, r2
 800dafe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db02:	021b      	lsls	r3, r3, #8
 800db04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	1c5a      	adds	r2, r3, #1
 800db0a:	60ba      	str	r2, [r7, #8]
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	461a      	mov	r2, r3
 800db10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db12:	4313      	orrs	r3, r2
 800db14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db18:	685a      	ldr	r2, [r3, #4]
 800db1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db1c:	429a      	cmp	r2, r3
 800db1e:	f040 8163 	bne.w	800dde8 <lcp_rejci+0x3e4>
 800db22:	7d3b      	ldrb	r3, [r7, #20]
 800db24:	f36f 03c3 	bfc	r3, #3, #1
 800db28:	753b      	strb	r3, [r7, #20]
#if CHAP_SUPPORT
	REJCICHAP(CI_AUTHTYPE, neg_chap, go->chap_mdtype);
	if (!go->neg_chap) {
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
 800db2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	f003 0310 	and.w	r3, r3, #16
 800db32:	b2db      	uxtb	r3, r3
 800db34:	2b00      	cmp	r3, #0
 800db36:	d02e      	beq.n	800db96 <lcp_rejci+0x192>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2b03      	cmp	r3, #3
 800db3c:	dd2b      	ble.n	800db96 <lcp_rejci+0x192>
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	3301      	adds	r3, #1
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	2b04      	cmp	r3, #4
 800db46:	d126      	bne.n	800db96 <lcp_rejci+0x192>
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	2b03      	cmp	r3, #3
 800db4e:	d122      	bne.n	800db96 <lcp_rejci+0x192>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	3b04      	subs	r3, #4
 800db54:	607b      	str	r3, [r7, #4]
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	3302      	adds	r3, #2
 800db5a:	60bb      	str	r3, [r7, #8]
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	1c5a      	adds	r2, r3, #1
 800db60:	60ba      	str	r2, [r7, #8]
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	b29b      	uxth	r3, r3
 800db66:	021b      	lsls	r3, r3, #8
 800db68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	1c5a      	adds	r2, r3, #1
 800db70:	60ba      	str	r2, [r7, #8]
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	b29a      	uxth	r2, r3
 800db76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800db7a:	4313      	orrs	r3, r2
 800db7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800db80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800db84:	f24c 0223 	movw	r2, #49187	; 0xc023
 800db88:	4293      	cmp	r3, r2
 800db8a:	f040 812f 	bne.w	800ddec <lcp_rejci+0x3e8>
 800db8e:	7d3b      	ldrb	r3, [r7, #20]
 800db90:	f36f 1304 	bfc	r3, #4, #1
 800db94:	753b      	strb	r3, [r7, #20]
    }
#endif /* EAP_SUPPORT */
#if LQR_SUPPORT
    REJCILQR(CI_QUALITY, neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 800db96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db98:	785b      	ldrb	r3, [r3, #1]
 800db9a:	f003 0301 	and.w	r3, r3, #1
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d020      	beq.n	800dbe6 <lcp_rejci+0x1e2>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b02      	cmp	r3, #2
 800dba8:	dd1d      	ble.n	800dbe6 <lcp_rejci+0x1e2>
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	3301      	adds	r3, #1
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	2b03      	cmp	r3, #3
 800dbb2:	d118      	bne.n	800dbe6 <lcp_rejci+0x1e2>
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	2b0d      	cmp	r3, #13
 800dbba:	d114      	bne.n	800dbe6 <lcp_rejci+0x1e2>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	3b03      	subs	r3, #3
 800dbc0:	607b      	str	r3, [r7, #4]
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	3302      	adds	r3, #2
 800dbc6:	60bb      	str	r3, [r7, #8]
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	1c5a      	adds	r2, r3, #1
 800dbcc:	60ba      	str	r2, [r7, #8]
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dbd4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800dbd8:	2b06      	cmp	r3, #6
 800dbda:	f040 8109 	bne.w	800ddf0 <lcp_rejci+0x3ec>
 800dbde:	7d7b      	ldrb	r3, [r7, #21]
 800dbe0:	f36f 0300 	bfc	r3, #0, #1
 800dbe4:	757b      	strb	r3, [r7, #21]
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 800dbe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	f003 0320 	and.w	r3, r3, #32
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d03f      	beq.n	800dc74 <lcp_rejci+0x270>
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2b05      	cmp	r3, #5
 800dbf8:	dd3c      	ble.n	800dc74 <lcp_rejci+0x270>
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	2b06      	cmp	r3, #6
 800dc02:	d137      	bne.n	800dc74 <lcp_rejci+0x270>
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	2b05      	cmp	r3, #5
 800dc0a:	d133      	bne.n	800dc74 <lcp_rejci+0x270>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	3b06      	subs	r3, #6
 800dc10:	607b      	str	r3, [r7, #4]
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	3302      	adds	r3, #2
 800dc16:	60bb      	str	r3, [r7, #8]
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	1c5a      	adds	r2, r3, #1
 800dc1c:	60ba      	str	r2, [r7, #8]
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	021b      	lsls	r3, r3, #8
 800dc22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	1c5a      	adds	r2, r3, #1
 800dc28:	60ba      	str	r2, [r7, #8]
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc30:	4313      	orrs	r3, r2
 800dc32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc36:	021b      	lsls	r3, r3, #8
 800dc38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	1c5a      	adds	r2, r3, #1
 800dc3e:	60ba      	str	r2, [r7, #8]
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	461a      	mov	r2, r3
 800dc44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc46:	4313      	orrs	r3, r2
 800dc48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc4c:	021b      	lsls	r3, r3, #8
 800dc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	1c5a      	adds	r2, r3, #1
 800dc54:	60ba      	str	r2, [r7, #8]
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	461a      	mov	r2, r3
 800dc5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc5c:	4313      	orrs	r3, r2
 800dc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc62:	689a      	ldr	r2, [r3, #8]
 800dc64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc66:	429a      	cmp	r2, r3
 800dc68:	f040 80c4 	bne.w	800ddf4 <lcp_rejci+0x3f0>
 800dc6c:	7d3b      	ldrb	r3, [r7, #20]
 800dc6e:	f36f 1345 	bfc	r3, #5, #1
 800dc72:	753b      	strb	r3, [r7, #20]
    REJCIVOID(CI_PCOMPRESSION, neg_pcompression);
 800dc74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d015      	beq.n	800dcae <lcp_rejci+0x2aa>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	dd12      	ble.n	800dcae <lcp_rejci+0x2aa>
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	2b02      	cmp	r3, #2
 800dc90:	d10d      	bne.n	800dcae <lcp_rejci+0x2aa>
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	2b07      	cmp	r3, #7
 800dc98:	d109      	bne.n	800dcae <lcp_rejci+0x2aa>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	3b02      	subs	r3, #2
 800dc9e:	607b      	str	r3, [r7, #4]
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	3302      	adds	r3, #2
 800dca4:	60bb      	str	r3, [r7, #8]
 800dca6:	7d3b      	ldrb	r3, [r7, #20]
 800dca8:	f36f 1386 	bfc	r3, #6, #1
 800dcac:	753b      	strb	r3, [r7, #20]
    REJCIVOID(CI_ACCOMPRESSION, neg_accompression);
 800dcae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcb0:	781b      	ldrb	r3, [r3, #0]
 800dcb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d015      	beq.n	800dce8 <lcp_rejci+0x2e4>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	dd12      	ble.n	800dce8 <lcp_rejci+0x2e4>
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	d10d      	bne.n	800dce8 <lcp_rejci+0x2e4>
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	2b08      	cmp	r3, #8
 800dcd2:	d109      	bne.n	800dce8 <lcp_rejci+0x2e4>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	3b02      	subs	r3, #2
 800dcd8:	607b      	str	r3, [r7, #4]
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	3302      	adds	r3, #2
 800dcde:	60bb      	str	r3, [r7, #8]
 800dce0:	7d3b      	ldrb	r3, [r7, #20]
 800dce2:	f36f 13c7 	bfc	r3, #7, #1
 800dce6:	753b      	strb	r3, [r7, #20]
#ifdef HAVE_MULTILINK
    REJCISHORT(CI_MRRU, neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    REJCIVOID(CI_SSNHF, neg_ssnhf);
 800dce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcea:	785b      	ldrb	r3, [r3, #1]
 800dcec:	f003 0302 	and.w	r3, r3, #2
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d015      	beq.n	800dd22 <lcp_rejci+0x31e>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	dd12      	ble.n	800dd22 <lcp_rejci+0x31e>
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	3301      	adds	r3, #1
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	2b02      	cmp	r3, #2
 800dd04:	d10d      	bne.n	800dd22 <lcp_rejci+0x31e>
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	2b12      	cmp	r3, #18
 800dd0c:	d109      	bne.n	800dd22 <lcp_rejci+0x31e>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	3b02      	subs	r3, #2
 800dd12:	607b      	str	r3, [r7, #4]
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	3302      	adds	r3, #2
 800dd18:	60bb      	str	r3, [r7, #8]
 800dd1a:	7d7b      	ldrb	r3, [r7, #21]
 800dd1c:	f36f 0341 	bfc	r3, #1, #1
 800dd20:	757b      	strb	r3, [r7, #21]
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 800dd22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd24:	785b      	ldrb	r3, [r3, #1]
 800dd26:	f003 0304 	and.w	r3, r3, #4
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d046      	beq.n	800ddbe <lcp_rejci+0x3ba>
 800dd30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd32:	7b9b      	ldrb	r3, [r3, #14]
 800dd34:	1cda      	adds	r2, r3, #3
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	dc40      	bgt.n	800ddbe <lcp_rejci+0x3ba>
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	2b13      	cmp	r3, #19
 800dd42:	d13c      	bne.n	800ddbe <lcp_rejci+0x3ba>
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	3301      	adds	r3, #1
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd4e:	7b9b      	ldrb	r3, [r3, #14]
 800dd50:	3303      	adds	r3, #3
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d133      	bne.n	800ddbe <lcp_rejci+0x3ba>
 800dd56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd58:	7b9b      	ldrb	r3, [r3, #14]
 800dd5a:	3303      	adds	r3, #3
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	1ad3      	subs	r3, r2, r3
 800dd60:	607b      	str	r3, [r7, #4]
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	3302      	adds	r3, #2
 800dd66:	60bb      	str	r3, [r7, #8]
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	1c5a      	adds	r2, r3, #1
 800dd6c:	60ba      	str	r2, [r7, #8]
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dd74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd76:	7b5b      	ldrb	r3, [r3, #13]
 800dd78:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d13b      	bne.n	800ddf8 <lcp_rejci+0x3f4>
 800dd80:	2300      	movs	r3, #0
 800dd82:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd84:	e011      	b.n	800ddaa <lcp_rejci+0x3a6>
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	1c5a      	adds	r2, r3, #1
 800dd8a:	60ba      	str	r2, [r7, #8]
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dd92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd96:	4413      	add	r3, r2
 800dd98:	330f      	adds	r3, #15
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d12b      	bne.n	800ddfc <lcp_rejci+0x3f8>
 800dda4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda6:	3301      	adds	r3, #1
 800dda8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ddaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddac:	7b9b      	ldrb	r3, [r3, #14]
 800ddae:	461a      	mov	r2, r3
 800ddb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	dce7      	bgt.n	800dd86 <lcp_rejci+0x382>
 800ddb6:	7d7b      	ldrb	r3, [r7, #21]
 800ddb8:	f36f 0382 	bfc	r3, #2, #1
 800ddbc:	757b      	strb	r3, [r7, #21]
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d11d      	bne.n	800de00 <lcp_rejci+0x3fc>
	goto bad;
    /*
     * Now we can update state.
     */
    if (f->state != PPP_FSM_OPENED)
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	7c1b      	ldrb	r3, [r3, #16]
 800ddc8:	2b09      	cmp	r3, #9
 800ddca:	d009      	beq.n	800dde0 <lcp_rejci+0x3dc>
	*go = try_;
 800ddcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddce:	461d      	mov	r5, r3
 800ddd0:	f107 0414 	add.w	r4, r7, #20
 800ddd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ddd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ddd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ddda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dddc:	6823      	ldr	r3, [r4, #0]
 800ddde:	602b      	str	r3, [r5, #0]
    return 1;
 800dde0:	2301      	movs	r3, #1
 800dde2:	e00f      	b.n	800de04 <lcp_rejci+0x400>
    REJCISHORT(CI_MRU, neg_mru, go->mru);
 800dde4:	bf00      	nop
 800dde6:	e00c      	b.n	800de02 <lcp_rejci+0x3fe>
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 800dde8:	bf00      	nop
 800ddea:	e00a      	b.n	800de02 <lcp_rejci+0x3fe>
	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
 800ddec:	bf00      	nop
 800ddee:	e008      	b.n	800de02 <lcp_rejci+0x3fe>
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 800ddf0:	bf00      	nop
 800ddf2:	e006      	b.n	800de02 <lcp_rejci+0x3fe>
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 800ddf4:	bf00      	nop
 800ddf6:	e004      	b.n	800de02 <lcp_rejci+0x3fe>
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 800ddf8:	bf00      	nop
 800ddfa:	e002      	b.n	800de02 <lcp_rejci+0x3fe>
 800ddfc:	bf00      	nop
 800ddfe:	e000      	b.n	800de02 <lcp_rejci+0x3fe>
	goto bad;
 800de00:	bf00      	nop

bad:
    LCPDEBUG(("lcp_rejci: received bad Reject!"));
    return 0;
 800de02:	2300      	movs	r3, #0
}
 800de04:	4618      	mov	r0, r3
 800de06:	3754      	adds	r7, #84	; 0x54
 800de08:	46bd      	mov	sp, r7
 800de0a:	bcb0      	pop	{r4, r5, r7}
 800de0c:	4770      	bx	lr
	...

0800de10 <lcp_reqci>:
 * CONFNAK; returns CONFREJ if it can't return CONFACK.
 *
 * inp = Requested CIs
 * lenp = Length of requested CIs
 */
static int lcp_reqci(fsm *f, u_char *inp, int *lenp, int reject_if_disagree) {
 800de10:	b580      	push	{r7, lr}
 800de12:	b096      	sub	sp, #88	; 0x58
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	607a      	str	r2, [r7, #4]
 800de1c:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	637b      	str	r3, [r7, #52]	; 0x34
    lcp_options *go = &pcb->lcp_gotoptions;
 800de24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de26:	3384      	adds	r3, #132	; 0x84
 800de28:	633b      	str	r3, [r7, #48]	; 0x30
    lcp_options *ho = &pcb->lcp_hisoptions;
 800de2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de2c:	33cc      	adds	r3, #204	; 0xcc
 800de2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    lcp_options *ao = &pcb->lcp_allowoptions;
 800de30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de32:	33a8      	adds	r3, #168	; 0xa8
 800de34:	62bb      	str	r3, [r7, #40]	; 0x28
    u_char *cip, *next;		/* Pointer to current and next CIs */
    int cilen, citype, cichar;	/* Parsed len, type, char value */
    u_short cishort;		/* Parsed short value */
    u32_t cilong;		/* Parse long value */
    int rc = CONFACK;		/* Final packet return code */
 800de36:	2302      	movs	r3, #2
 800de38:	64bb      	str	r3, [r7, #72]	; 0x48
    int orc;			/* Individual option return code */
    u_char *p;			/* Pointer to next char to parse */
    u_char *rejp;		/* Pointer to next char in reject frame */
    struct pbuf *nakp;          /* Nak buffer */
    u_char *nakoutp;		/* Pointer to next char in Nak frame */
    int l = *lenp;		/* Length left */
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	63bb      	str	r3, [r7, #56]	; 0x38

    /*
     * Reset all his options.
     */
    BZERO(ho, sizeof(*ho));
 800de40:	2224      	movs	r2, #36	; 0x24
 800de42:	2100      	movs	r1, #0
 800de44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de46:	f002 fdc8 	bl	80109da <memset>

    /*
     * Process all his options.
     */
    next = inp;
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	657b      	str	r3, [r7, #84]	; 0x54
    nakp = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_CTRL_PBUF_UNKNOWN_SIZE), PBUF_RAM);
 800de4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de52:	f44f 7100 	mov.w	r1, #512	; 0x200
 800de56:	2000      	movs	r0, #0
 800de58:	f7f5 fd90 	bl	800397c <pbuf_alloc>
 800de5c:	6278      	str	r0, [r7, #36]	; 0x24
    if(NULL == nakp)
 800de5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de60:	2b00      	cmp	r3, #0
 800de62:	d101      	bne.n	800de68 <lcp_reqci+0x58>
        return 0;
 800de64:	2300      	movs	r3, #0
 800de66:	e2b4      	b.n	800e3d2 <lcp_reqci+0x5c2>
    if(nakp->tot_len != nakp->len) {
 800de68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6a:	891a      	ldrh	r2, [r3, #8]
 800de6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6e:	895b      	ldrh	r3, [r3, #10]
 800de70:	429a      	cmp	r2, r3
 800de72:	d004      	beq.n	800de7e <lcp_reqci+0x6e>
        pbuf_free(nakp);
 800de74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de76:	f7f6 f81f 	bl	8003eb8 <pbuf_free>
        return 0;
 800de7a:	2300      	movs	r3, #0
 800de7c:	e2a9      	b.n	800e3d2 <lcp_reqci+0x5c2>
    }

    nakoutp = (u_char*)nakp->payload;
 800de7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	63fb      	str	r3, [r7, #60]	; 0x3c
    rejp = inp;
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 800de88:	e278      	b.n	800e37c <lcp_reqci+0x56c>
	orc = CONFACK;			/* Assume success */
 800de8a:	2302      	movs	r3, #2
 800de8c:	647b      	str	r3, [r7, #68]	; 0x44
	cip = p = next;			/* Remember beginning of CI */
 800de8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de90:	623b      	str	r3, [r7, #32]
 800de92:	6a3b      	ldr	r3, [r7, #32]
 800de94:	61fb      	str	r3, [r7, #28]
	if (l < 2 ||			/* Not enough data for CI header or */
 800de96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de98:	2b01      	cmp	r3, #1
 800de9a:	dd0b      	ble.n	800deb4 <lcp_reqci+0xa4>
	    p[1] < 2 ||			/*  CI length too small or */
 800de9c:	6a3b      	ldr	r3, [r7, #32]
 800de9e:	3301      	adds	r3, #1
 800dea0:	781b      	ldrb	r3, [r3, #0]
	if (l < 2 ||			/* Not enough data for CI header or */
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d906      	bls.n	800deb4 <lcp_reqci+0xa4>
	    p[1] > l) {			/*  CI length too big? */
 800dea6:	6a3b      	ldr	r3, [r7, #32]
 800dea8:	3301      	adds	r3, #1
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	461a      	mov	r2, r3
	    p[1] < 2 ||			/*  CI length too small or */
 800deae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb0:	429a      	cmp	r2, r3
 800deb2:	dd08      	ble.n	800dec6 <lcp_reqci+0xb6>
	    LCPDEBUG(("lcp_reqci: bad CI length!"));
	    orc = CONFREJ;		/* Reject bad CI */
 800deb4:	2304      	movs	r3, #4
 800deb6:	647b      	str	r3, [r7, #68]	; 0x44
	    cilen = l;			/* Reject till end of packet */
 800deb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deba:	653b      	str	r3, [r7, #80]	; 0x50
	    l = 0;			/* Don't loop again */
 800debc:	2300      	movs	r3, #0
 800debe:	63bb      	str	r3, [r7, #56]	; 0x38
	    citype = 0;
 800dec0:	2300      	movs	r3, #0
 800dec2:	64fb      	str	r3, [r7, #76]	; 0x4c
	    goto endswitch;
 800dec4:	e22e      	b.n	800e324 <lcp_reqci+0x514>
	}
	GETCHAR(citype, p);		/* Parse CI type */
 800dec6:	6a3b      	ldr	r3, [r7, #32]
 800dec8:	1c5a      	adds	r2, r3, #1
 800deca:	623a      	str	r2, [r7, #32]
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	64fb      	str	r3, [r7, #76]	; 0x4c
	GETCHAR(cilen, p);		/* Parse CI length */
 800ded0:	6a3b      	ldr	r3, [r7, #32]
 800ded2:	1c5a      	adds	r2, r3, #1
 800ded4:	623a      	str	r2, [r7, #32]
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	653b      	str	r3, [r7, #80]	; 0x50
	l -= cilen;			/* Adjust remaining length */
 800deda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dedc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dede:	1ad3      	subs	r3, r2, r3
 800dee0:	63bb      	str	r3, [r7, #56]	; 0x38
	next += cilen;			/* Step to next CI */
 800dee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dee4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dee6:	4413      	add	r3, r2
 800dee8:	657b      	str	r3, [r7, #84]	; 0x54

	switch (citype) {		/* Check CI type */
 800deea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deec:	3b01      	subs	r3, #1
 800deee:	2b12      	cmp	r3, #18
 800def0:	f200 8215 	bhi.w	800e31e <lcp_reqci+0x50e>
 800def4:	a201      	add	r2, pc, #4	; (adr r2, 800defc <lcp_reqci+0xec>)
 800def6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800defa:	bf00      	nop
 800defc:	0800df49 	.word	0x0800df49
 800df00:	0800dfc7 	.word	0x0800dfc7
 800df04:	0800e0b5 	.word	0x0800e0b5
 800df08:	0800e31f 	.word	0x0800e31f
 800df0c:	0800e15b 	.word	0x0800e15b
 800df10:	0800e31f 	.word	0x0800e31f
 800df14:	0800e24b 	.word	0x0800e24b
 800df18:	0800e271 	.word	0x0800e271
 800df1c:	0800e31f 	.word	0x0800e31f
 800df20:	0800e31f 	.word	0x0800e31f
 800df24:	0800e31f 	.word	0x0800e31f
 800df28:	0800e31f 	.word	0x0800e31f
 800df2c:	0800e31f 	.word	0x0800e31f
 800df30:	0800e31f 	.word	0x0800e31f
 800df34:	0800e31f 	.word	0x0800e31f
 800df38:	0800e31f 	.word	0x0800e31f
 800df3c:	0800e31f 	.word	0x0800e31f
 800df40:	0800e297 	.word	0x0800e297
 800df44:	0800e2bd 	.word	0x0800e2bd
	case CI_MRU:
	    if (!ao->neg_mru ||		/* Allow option? */
 800df48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	f003 0304 	and.w	r3, r3, #4
 800df50:	b2db      	uxtb	r3, r3
 800df52:	2b00      	cmp	r3, #0
 800df54:	d002      	beq.n	800df5c <lcp_reqci+0x14c>
 800df56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df58:	2b04      	cmp	r3, #4
 800df5a:	d002      	beq.n	800df62 <lcp_reqci+0x152>
		cilen != CILEN_SHORT) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800df5c:	2304      	movs	r3, #4
 800df5e:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800df60:	e1e0      	b.n	800e324 <lcp_reqci+0x514>
	    }
	    GETSHORT(cishort, p);	/* Parse MRU */
 800df62:	6a3b      	ldr	r3, [r7, #32]
 800df64:	1c5a      	adds	r2, r3, #1
 800df66:	623a      	str	r2, [r7, #32]
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	021b      	lsls	r3, r3, #8
 800df6e:	837b      	strh	r3, [r7, #26]
 800df70:	6a3b      	ldr	r3, [r7, #32]
 800df72:	1c5a      	adds	r2, r3, #1
 800df74:	623a      	str	r2, [r7, #32]
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	b29a      	uxth	r2, r3
 800df7a:	8b7b      	ldrh	r3, [r7, #26]
 800df7c:	4313      	orrs	r3, r2
 800df7e:	837b      	strh	r3, [r7, #26]
	    /*
	     * He must be able to receive at least our minimum.
	     * No need to check a maximum.  If he sends a large number,
	     * we'll just ignore it.
	     */
	    if (cishort < PPP_MINMRU) {
 800df80:	8b7b      	ldrh	r3, [r7, #26]
 800df82:	2b7f      	cmp	r3, #127	; 0x7f
 800df84:	d816      	bhi.n	800dfb4 <lcp_reqci+0x1a4>
		orc = CONFNAK;		/* Nak CI */
 800df86:	2303      	movs	r3, #3
 800df88:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_MRU, nakoutp);
 800df8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df8c:	1c5a      	adds	r2, r3, #1
 800df8e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800df90:	2201      	movs	r2, #1
 800df92:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_SHORT, nakoutp);
 800df94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df96:	1c5a      	adds	r2, r3, #1
 800df98:	63fa      	str	r2, [r7, #60]	; 0x3c
 800df9a:	2204      	movs	r2, #4
 800df9c:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_MINMRU, nakoutp);	/* Give him a hint */
 800df9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfa0:	1c5a      	adds	r2, r3, #1
 800dfa2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	701a      	strb	r2, [r3, #0]
 800dfa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfaa:	1c5a      	adds	r2, r3, #1
 800dfac:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dfae:	2280      	movs	r2, #128	; 0x80
 800dfb0:	701a      	strb	r2, [r3, #0]
		break;
 800dfb2:	e1b7      	b.n	800e324 <lcp_reqci+0x514>
	    }
	    ho->neg_mru = 1;		/* Remember he sent MRU */
 800dfb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfb6:	7813      	ldrb	r3, [r2, #0]
 800dfb8:	f043 0304 	orr.w	r3, r3, #4
 800dfbc:	7013      	strb	r3, [r2, #0]
	    ho->mru = cishort;		/* And remember value */
 800dfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc0:	8b7a      	ldrh	r2, [r7, #26]
 800dfc2:	805a      	strh	r2, [r3, #2]
	    break;
 800dfc4:	e1ae      	b.n	800e324 <lcp_reqci+0x514>

	case CI_ASYNCMAP:
	    if (!ao->neg_asyncmap ||
 800dfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	f003 0308 	and.w	r3, r3, #8
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d002      	beq.n	800dfda <lcp_reqci+0x1ca>
 800dfd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfd6:	2b06      	cmp	r3, #6
 800dfd8:	d002      	beq.n	800dfe0 <lcp_reqci+0x1d0>
		cilen != CILEN_LONG) {
		orc = CONFREJ;
 800dfda:	2304      	movs	r3, #4
 800dfdc:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800dfde:	e1a1      	b.n	800e324 <lcp_reqci+0x514>
	    }
	    GETLONG(cilong, p);
 800dfe0:	6a3b      	ldr	r3, [r7, #32]
 800dfe2:	1c5a      	adds	r2, r3, #1
 800dfe4:	623a      	str	r2, [r7, #32]
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	021b      	lsls	r3, r3, #8
 800dfea:	617b      	str	r3, [r7, #20]
 800dfec:	6a3b      	ldr	r3, [r7, #32]
 800dfee:	1c5a      	adds	r2, r3, #1
 800dff0:	623a      	str	r2, [r7, #32]
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	461a      	mov	r2, r3
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	4313      	orrs	r3, r2
 800dffa:	617b      	str	r3, [r7, #20]
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	021b      	lsls	r3, r3, #8
 800e000:	617b      	str	r3, [r7, #20]
 800e002:	6a3b      	ldr	r3, [r7, #32]
 800e004:	1c5a      	adds	r2, r3, #1
 800e006:	623a      	str	r2, [r7, #32]
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	461a      	mov	r2, r3
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	4313      	orrs	r3, r2
 800e010:	617b      	str	r3, [r7, #20]
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	021b      	lsls	r3, r3, #8
 800e016:	617b      	str	r3, [r7, #20]
 800e018:	6a3b      	ldr	r3, [r7, #32]
 800e01a:	1c5a      	adds	r2, r3, #1
 800e01c:	623a      	str	r2, [r7, #32]
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	461a      	mov	r2, r3
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	4313      	orrs	r3, r2
 800e026:	617b      	str	r3, [r7, #20]

	    /*
	     * Asyncmap must have set at least the bits
	     * which are set in lcp_allowoptions[unit].asyncmap.
	     */
	    if ((ao->asyncmap & ~cilong) != 0) {
 800e028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02a:	685a      	ldr	r2, [r3, #4]
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	43db      	mvns	r3, r3
 800e030:	4013      	ands	r3, r2
 800e032:	2b00      	cmp	r3, #0
 800e034:	d035      	beq.n	800e0a2 <lcp_reqci+0x292>
		orc = CONFNAK;
 800e036:	2303      	movs	r3, #3
 800e038:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_ASYNCMAP, nakoutp);
 800e03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e03c:	1c5a      	adds	r2, r3, #1
 800e03e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e040:	2202      	movs	r2, #2
 800e042:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 800e044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e046:	1c5a      	adds	r2, r3, #1
 800e048:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e04a:	2206      	movs	r2, #6
 800e04c:	701a      	strb	r2, [r3, #0]
		PUTLONG(ao->asyncmap | cilong, nakoutp);
 800e04e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e050:	1c5a      	adds	r2, r3, #1
 800e052:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e056:	6851      	ldr	r1, [r2, #4]
 800e058:	697a      	ldr	r2, [r7, #20]
 800e05a:	430a      	orrs	r2, r1
 800e05c:	0e12      	lsrs	r2, r2, #24
 800e05e:	b2d2      	uxtb	r2, r2
 800e060:	701a      	strb	r2, [r3, #0]
 800e062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e064:	1c5a      	adds	r2, r3, #1
 800e066:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e06a:	6851      	ldr	r1, [r2, #4]
 800e06c:	697a      	ldr	r2, [r7, #20]
 800e06e:	430a      	orrs	r2, r1
 800e070:	0c12      	lsrs	r2, r2, #16
 800e072:	b2d2      	uxtb	r2, r2
 800e074:	701a      	strb	r2, [r3, #0]
 800e076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e078:	1c5a      	adds	r2, r3, #1
 800e07a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e07c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e07e:	6851      	ldr	r1, [r2, #4]
 800e080:	697a      	ldr	r2, [r7, #20]
 800e082:	430a      	orrs	r2, r1
 800e084:	0a12      	lsrs	r2, r2, #8
 800e086:	b2d2      	uxtb	r2, r2
 800e088:	701a      	strb	r2, [r3, #0]
 800e08a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e08c:	1c5a      	adds	r2, r3, #1
 800e08e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e092:	6852      	ldr	r2, [r2, #4]
 800e094:	b2d1      	uxtb	r1, r2
 800e096:	697a      	ldr	r2, [r7, #20]
 800e098:	b2d2      	uxtb	r2, r2
 800e09a:	430a      	orrs	r2, r1
 800e09c:	b2d2      	uxtb	r2, r2
 800e09e:	701a      	strb	r2, [r3, #0]
		break;
 800e0a0:	e140      	b.n	800e324 <lcp_reqci+0x514>
	    }
	    ho->neg_asyncmap = 1;
 800e0a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0a4:	7813      	ldrb	r3, [r2, #0]
 800e0a6:	f043 0308 	orr.w	r3, r3, #8
 800e0aa:	7013      	strb	r3, [r2, #0]
	    ho->asyncmap = cilong;
 800e0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ae:	697a      	ldr	r2, [r7, #20]
 800e0b0:	605a      	str	r2, [r3, #4]
	    break;
 800e0b2:	e137      	b.n	800e324 <lcp_reqci+0x514>

	case CI_AUTHTYPE:
	    if (cilen < CILEN_SHORT ||
 800e0b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0b6:	2b03      	cmp	r3, #3
 800e0b8:	dd06      	ble.n	800e0c8 <lcp_reqci+0x2b8>
		!(0
#if PAP_SUPPORT
		|| ao->neg_upap
 800e0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0bc:	781b      	ldrb	r3, [r3, #0]
		!(0
 800e0be:	f003 0310 	and.w	r3, r3, #16
 800e0c2:	b2db      	uxtb	r3, r3
	    if (cilen < CILEN_SHORT ||
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d102      	bne.n	800e0ce <lcp_reqci+0x2be>
		)) {
		/*
		 * Reject the option if we're not willing to authenticate.
		 */
		ppp_dbglog(("No auth is possible"));
		orc = CONFREJ;
 800e0c8:	2304      	movs	r3, #4
 800e0ca:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800e0cc:	e12a      	b.n	800e324 <lcp_reqci+0x514>
	    }
	    GETSHORT(cishort, p);
 800e0ce:	6a3b      	ldr	r3, [r7, #32]
 800e0d0:	1c5a      	adds	r2, r3, #1
 800e0d2:	623a      	str	r2, [r7, #32]
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	021b      	lsls	r3, r3, #8
 800e0da:	837b      	strh	r3, [r7, #26]
 800e0dc:	6a3b      	ldr	r3, [r7, #32]
 800e0de:	1c5a      	adds	r2, r3, #1
 800e0e0:	623a      	str	r2, [r7, #32]
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	b29a      	uxth	r2, r3
 800e0e6:	8b7b      	ldrh	r3, [r7, #26]
 800e0e8:	4313      	orrs	r3, r2
 800e0ea:	837b      	strh	r3, [r7, #26]
	     * Whether we end up doing CHAP, UPAP, or EAP depends then on
	     * the ordering of the CIs in the peer's Configure-Request.
             */

#if PAP_SUPPORT
	    if (cishort == PPP_PAP) {
 800e0ec:	8b7b      	ldrh	r3, [r7, #26]
 800e0ee:	f24c 0223 	movw	r2, #49187	; 0xc023
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d11a      	bne.n	800e12c <lcp_reqci+0x31c>
		/* we've already accepted CHAP or EAP */
		if (0
 800e0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0f8:	2b04      	cmp	r3, #4
 800e0fa:	d002      	beq.n	800e102 <lcp_reqci+0x2f2>
#if EAP_SUPPORT
		    || ho->neg_eap
#endif /* EAP_SUPPORT */
		    || cilen != CILEN_SHORT) {
		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE PAP, rejecting..."));
		    orc = CONFREJ;
 800e0fc:	2304      	movs	r3, #4
 800e0fe:	647b      	str	r3, [r7, #68]	; 0x44
		    break;
 800e100:	e110      	b.n	800e324 <lcp_reqci+0x514>
		}
		if (!ao->neg_upap) {	/* we don't want to do PAP */
 800e102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	f003 0310 	and.w	r3, r3, #16
 800e10a:	b2db      	uxtb	r3, r3
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d107      	bne.n	800e120 <lcp_reqci+0x310>
		    orc = CONFNAK;	/* NAK it and suggest CHAP or EAP */
 800e110:	2303      	movs	r3, #3
 800e112:	647b      	str	r3, [r7, #68]	; 0x44
		    PUTCHAR(CI_AUTHTYPE, nakoutp);
 800e114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e116:	1c5a      	adds	r2, r3, #1
 800e118:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e11a:	2203      	movs	r2, #3
 800e11c:	701a      	strb	r2, [r3, #0]
			PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
#endif /* CHAP_SUPPORT */
#if EAP_SUPPORT
		    }
#endif /* EAP_SUPPORT */
		    break;
 800e11e:	e101      	b.n	800e324 <lcp_reqci+0x514>
		}
		ho->neg_upap = 1;
 800e120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e122:	7813      	ldrb	r3, [r2, #0]
 800e124:	f043 0310 	orr.w	r3, r3, #16
 800e128:	7013      	strb	r3, [r2, #0]
		break;
 800e12a:	e0fb      	b.n	800e324 <lcp_reqci+0x514>
	     * We don't recognize the protocol they're asking for.
	     * Nak it with something we're willing to do.
	     * (At this point we know ao->neg_upap || ao->neg_chap ||
	     * ao->neg_eap.)
	     */
	    orc = CONFNAK;
 800e12c:	2303      	movs	r3, #3
 800e12e:	647b      	str	r3, [r7, #68]	; 0x44
	    PUTCHAR(CI_AUTHTYPE, nakoutp);
 800e130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e132:	1c5a      	adds	r2, r3, #1
 800e134:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e136:	2203      	movs	r2, #3
 800e138:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
	    } else
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	    if(1) {
		PUTCHAR(CILEN_SHORT, nakoutp);
 800e13a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e13c:	1c5a      	adds	r2, r3, #1
 800e13e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e140:	2204      	movs	r2, #4
 800e142:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_PAP, nakoutp);
 800e144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e146:	1c5a      	adds	r2, r3, #1
 800e148:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e14a:	22c0      	movs	r2, #192	; 0xc0
 800e14c:	701a      	strb	r2, [r3, #0]
 800e14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e150:	1c5a      	adds	r2, r3, #1
 800e152:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e154:	2223      	movs	r2, #35	; 0x23
 800e156:	701a      	strb	r2, [r3, #0]
	    } else
#endif /* PAP_SUPPORT */
	    {}
	    break;
 800e158:	e0e4      	b.n	800e324 <lcp_reqci+0x514>
	    }
	    break;
#endif /* LQR_SUPPORT */

	case CI_MAGICNUMBER:
	    if (!(ao->neg_magicnumber || go->neg_magicnumber) ||
 800e15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	f003 0320 	and.w	r3, r3, #32
 800e162:	b2db      	uxtb	r3, r3
 800e164:	2b00      	cmp	r3, #0
 800e166:	d106      	bne.n	800e176 <lcp_reqci+0x366>
 800e168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	f003 0320 	and.w	r3, r3, #32
 800e170:	b2db      	uxtb	r3, r3
 800e172:	2b00      	cmp	r3, #0
 800e174:	d002      	beq.n	800e17c <lcp_reqci+0x36c>
 800e176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e178:	2b06      	cmp	r3, #6
 800e17a:	d002      	beq.n	800e182 <lcp_reqci+0x372>
		cilen != CILEN_LONG) {
		orc = CONFREJ;
 800e17c:	2304      	movs	r3, #4
 800e17e:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800e180:	e0d0      	b.n	800e324 <lcp_reqci+0x514>
	    }
	    GETLONG(cilong, p);
 800e182:	6a3b      	ldr	r3, [r7, #32]
 800e184:	1c5a      	adds	r2, r3, #1
 800e186:	623a      	str	r2, [r7, #32]
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	021b      	lsls	r3, r3, #8
 800e18c:	617b      	str	r3, [r7, #20]
 800e18e:	6a3b      	ldr	r3, [r7, #32]
 800e190:	1c5a      	adds	r2, r3, #1
 800e192:	623a      	str	r2, [r7, #32]
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	461a      	mov	r2, r3
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	4313      	orrs	r3, r2
 800e19c:	617b      	str	r3, [r7, #20]
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	021b      	lsls	r3, r3, #8
 800e1a2:	617b      	str	r3, [r7, #20]
 800e1a4:	6a3b      	ldr	r3, [r7, #32]
 800e1a6:	1c5a      	adds	r2, r3, #1
 800e1a8:	623a      	str	r2, [r7, #32]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	4313      	orrs	r3, r2
 800e1b2:	617b      	str	r3, [r7, #20]
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	021b      	lsls	r3, r3, #8
 800e1b8:	617b      	str	r3, [r7, #20]
 800e1ba:	6a3b      	ldr	r3, [r7, #32]
 800e1bc:	1c5a      	adds	r2, r3, #1
 800e1be:	623a      	str	r2, [r7, #32]
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	4313      	orrs	r3, r2
 800e1c8:	617b      	str	r3, [r7, #20]

	    /*
	     * He must have a different magic number.
	     */
	    if (go->neg_magicnumber &&
 800e1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	f003 0320 	and.w	r3, r3, #32
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d02f      	beq.n	800e238 <lcp_reqci+0x428>
		cilong == go->magicnumber) {
 800e1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1da:	689a      	ldr	r2, [r3, #8]
	    if (go->neg_magicnumber &&
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d12a      	bne.n	800e238 <lcp_reqci+0x428>
		cilong = magic();	/* Don't put magic() inside macro! */
 800e1e2:	f000 fb7f 	bl	800e8e4 <magic>
 800e1e6:	6178      	str	r0, [r7, #20]
		orc = CONFNAK;
 800e1e8:	2303      	movs	r3, #3
 800e1ea:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_MAGICNUMBER, nakoutp);
 800e1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ee:	1c5a      	adds	r2, r3, #1
 800e1f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e1f2:	2205      	movs	r2, #5
 800e1f4:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 800e1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1f8:	1c5a      	adds	r2, r3, #1
 800e1fa:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e1fc:	2206      	movs	r2, #6
 800e1fe:	701a      	strb	r2, [r3, #0]
		PUTLONG(cilong, nakoutp);
 800e200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e202:	1c5a      	adds	r2, r3, #1
 800e204:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e206:	697a      	ldr	r2, [r7, #20]
 800e208:	0e12      	lsrs	r2, r2, #24
 800e20a:	b2d2      	uxtb	r2, r2
 800e20c:	701a      	strb	r2, [r3, #0]
 800e20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e210:	1c5a      	adds	r2, r3, #1
 800e212:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e214:	697a      	ldr	r2, [r7, #20]
 800e216:	0c12      	lsrs	r2, r2, #16
 800e218:	b2d2      	uxtb	r2, r2
 800e21a:	701a      	strb	r2, [r3, #0]
 800e21c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e21e:	1c5a      	adds	r2, r3, #1
 800e220:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e222:	697a      	ldr	r2, [r7, #20]
 800e224:	0a12      	lsrs	r2, r2, #8
 800e226:	b2d2      	uxtb	r2, r2
 800e228:	701a      	strb	r2, [r3, #0]
 800e22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e22c:	1c5a      	adds	r2, r3, #1
 800e22e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e230:	697a      	ldr	r2, [r7, #20]
 800e232:	b2d2      	uxtb	r2, r2
 800e234:	701a      	strb	r2, [r3, #0]
		break;
 800e236:	e075      	b.n	800e324 <lcp_reqci+0x514>
	    }
	    ho->neg_magicnumber = 1;
 800e238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e23a:	7813      	ldrb	r3, [r2, #0]
 800e23c:	f043 0320 	orr.w	r3, r3, #32
 800e240:	7013      	strb	r3, [r2, #0]
	    ho->magicnumber = cilong;
 800e242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e244:	697a      	ldr	r2, [r7, #20]
 800e246:	609a      	str	r2, [r3, #8]
	    break;
 800e248:	e06c      	b.n	800e324 <lcp_reqci+0x514>


	case CI_PCOMPRESSION:
	    if (!ao->neg_pcompression ||
 800e24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e252:	b2db      	uxtb	r3, r3
 800e254:	2b00      	cmp	r3, #0
 800e256:	d002      	beq.n	800e25e <lcp_reqci+0x44e>
 800e258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e25a:	2b02      	cmp	r3, #2
 800e25c:	d002      	beq.n	800e264 <lcp_reqci+0x454>
		cilen != CILEN_VOID) {
		orc = CONFREJ;
 800e25e:	2304      	movs	r3, #4
 800e260:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800e262:	e05f      	b.n	800e324 <lcp_reqci+0x514>
	    }
	    ho->neg_pcompression = 1;
 800e264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e266:	7813      	ldrb	r3, [r2, #0]
 800e268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e26c:	7013      	strb	r3, [r2, #0]
	    break;
 800e26e:	e059      	b.n	800e324 <lcp_reqci+0x514>

	case CI_ACCOMPRESSION:
	    if (!ao->neg_accompression ||
 800e270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e272:	781b      	ldrb	r3, [r3, #0]
 800e274:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d002      	beq.n	800e284 <lcp_reqci+0x474>
 800e27e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e280:	2b02      	cmp	r3, #2
 800e282:	d002      	beq.n	800e28a <lcp_reqci+0x47a>
		cilen != CILEN_VOID) {
		orc = CONFREJ;
 800e284:	2304      	movs	r3, #4
 800e286:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800e288:	e04c      	b.n	800e324 <lcp_reqci+0x514>
	    }
	    ho->neg_accompression = 1;
 800e28a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e28c:	7813      	ldrb	r3, [r2, #0]
 800e28e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e292:	7013      	strb	r3, [r2, #0]
	    break;
 800e294:	e046      	b.n	800e324 <lcp_reqci+0x514>
	    ho->mrru = cishort;
	    break;
#endif /* HAVE_MULTILINK */

	case CI_SSNHF:
	    if (!ao->neg_ssnhf
 800e296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e298:	785b      	ldrb	r3, [r3, #1]
 800e29a:	f003 0302 	and.w	r3, r3, #2
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d002      	beq.n	800e2aa <lcp_reqci+0x49a>
#ifdef HAVE_MULTILINK
		|| !multilink
#endif /* HAVE_MULTILINK */
		|| cilen != CILEN_VOID) {
 800e2a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2a6:	2b02      	cmp	r3, #2
 800e2a8:	d002      	beq.n	800e2b0 <lcp_reqci+0x4a0>
		orc = CONFREJ;
 800e2aa:	2304      	movs	r3, #4
 800e2ac:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800e2ae:	e039      	b.n	800e324 <lcp_reqci+0x514>
	    }
	    ho->neg_ssnhf = 1;
 800e2b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2b2:	7853      	ldrb	r3, [r2, #1]
 800e2b4:	f043 0302 	orr.w	r3, r3, #2
 800e2b8:	7053      	strb	r3, [r2, #1]
	    break;
 800e2ba:	e033      	b.n	800e324 <lcp_reqci+0x514>

	case CI_EPDISC:
	    if (!ao->neg_endpoint ||
 800e2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2be:	785b      	ldrb	r3, [r3, #1]
 800e2c0:	f003 0304 	and.w	r3, r3, #4
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d005      	beq.n	800e2d6 <lcp_reqci+0x4c6>
 800e2ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2cc:	2b02      	cmp	r3, #2
 800e2ce:	dd02      	ble.n	800e2d6 <lcp_reqci+0x4c6>
		cilen < CILEN_CHAR ||
 800e2d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2d2:	2b17      	cmp	r3, #23
 800e2d4:	dd02      	ble.n	800e2dc <lcp_reqci+0x4cc>
		cilen > CILEN_CHAR + MAX_ENDP_LEN) {
		orc = CONFREJ;
 800e2d6:	2304      	movs	r3, #4
 800e2d8:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800e2da:	e023      	b.n	800e324 <lcp_reqci+0x514>
	    }
	    GETCHAR(cichar, p);
 800e2dc:	6a3b      	ldr	r3, [r7, #32]
 800e2de:	1c5a      	adds	r2, r3, #1
 800e2e0:	623a      	str	r2, [r7, #32]
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	613b      	str	r3, [r7, #16]
	    cilen -= CILEN_CHAR;
 800e2e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2e8:	3b03      	subs	r3, #3
 800e2ea:	653b      	str	r3, [r7, #80]	; 0x50
	    ho->neg_endpoint = 1;
 800e2ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2ee:	7853      	ldrb	r3, [r2, #1]
 800e2f0:	f043 0304 	orr.w	r3, r3, #4
 800e2f4:	7053      	strb	r3, [r2, #1]
	    ho->endpoint.class_ = cichar;
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	b2da      	uxtb	r2, r3
 800e2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fc:	735a      	strb	r2, [r3, #13]
	    ho->endpoint.length = cilen;
 800e2fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e300:	b2da      	uxtb	r2, r3
 800e302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e304:	739a      	strb	r2, [r3, #14]
	    MEMCPY(ho->endpoint.value, p, cilen);
 800e306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e308:	330f      	adds	r3, #15
 800e30a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e30c:	6a39      	ldr	r1, [r7, #32]
 800e30e:	4618      	mov	r0, r3
 800e310:	f002 fb3e 	bl	8010990 <memcpy>
	    INCPTR(cilen, p);
 800e314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e316:	6a3a      	ldr	r2, [r7, #32]
 800e318:	4413      	add	r3, r2
 800e31a:	623b      	str	r3, [r7, #32]
	    break;
 800e31c:	e002      	b.n	800e324 <lcp_reqci+0x514>

	default:
	    LCPDEBUG(("lcp_reqci: rcvd unknown option %d", citype));
	    orc = CONFREJ;
 800e31e:	2304      	movs	r3, #4
 800e320:	647b      	str	r3, [r7, #68]	; 0x44
	    break;
 800e322:	bf00      	nop
	}

endswitch:
	if (orc == CONFACK &&		/* Good CI */
 800e324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e326:	2b02      	cmp	r3, #2
 800e328:	d103      	bne.n	800e332 <lcp_reqci+0x522>
 800e32a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e32c:	2b02      	cmp	r3, #2
 800e32e:	d000      	beq.n	800e332 <lcp_reqci+0x522>
	    rc != CONFACK)		/*  but prior CI wasn't? */
	    continue;			/* Don't send this one */
 800e330:	e024      	b.n	800e37c <lcp_reqci+0x56c>

	if (orc == CONFNAK) {		/* Nak this CI? */
 800e332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e334:	2b03      	cmp	r3, #3
 800e336:	d10e      	bne.n	800e356 <lcp_reqci+0x546>
	    if (reject_if_disagree	/* Getting fed up with sending NAKs? */
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d005      	beq.n	800e34a <lcp_reqci+0x53a>
		&& citype != CI_MAGICNUMBER) {
 800e33e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e340:	2b05      	cmp	r3, #5
 800e342:	d002      	beq.n	800e34a <lcp_reqci+0x53a>
		orc = CONFREJ;		/* Get tough if so */
 800e344:	2304      	movs	r3, #4
 800e346:	647b      	str	r3, [r7, #68]	; 0x44
 800e348:	e005      	b.n	800e356 <lcp_reqci+0x546>
	    } else {
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 800e34a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e34c:	2b04      	cmp	r3, #4
 800e34e:	d100      	bne.n	800e352 <lcp_reqci+0x542>
		    continue;		/* Don't send this one */
 800e350:	e014      	b.n	800e37c <lcp_reqci+0x56c>
		rc = CONFNAK;
 800e352:	2303      	movs	r3, #3
 800e354:	64bb      	str	r3, [r7, #72]	; 0x48
	    }
	}
	if (orc == CONFREJ) {		/* Reject this CI */
 800e356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e358:	2b04      	cmp	r3, #4
 800e35a:	d10f      	bne.n	800e37c <lcp_reqci+0x56c>
	    rc = CONFREJ;
 800e35c:	2304      	movs	r3, #4
 800e35e:	64bb      	str	r3, [r7, #72]	; 0x48
	    if (cip != rejp)		/* Need to move rejected CI? */
 800e360:	69fa      	ldr	r2, [r7, #28]
 800e362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e364:	429a      	cmp	r2, r3
 800e366:	d005      	beq.n	800e374 <lcp_reqci+0x564>
		MEMCPY(rejp, cip, cilen); /* Move it */
 800e368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e36a:	461a      	mov	r2, r3
 800e36c:	69f9      	ldr	r1, [r7, #28]
 800e36e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e370:	f002 fb0e 	bl	8010990 <memcpy>
	    INCPTR(cilen, rejp);	/* Update output pointer */
 800e374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e376:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e378:	4413      	add	r3, r2
 800e37a:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 800e37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f47f ad83 	bne.w	800de8a <lcp_reqci+0x7a>
     * code would go here.  The extra NAKs would go at *nakoutp.
     * At present there are no cases where we want to ask the
     * peer to negotiate an option.
     */

    switch (rc) {
 800e384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e386:	2b03      	cmp	r3, #3
 800e388:	d00a      	beq.n	800e3a0 <lcp_reqci+0x590>
 800e38a:	2b04      	cmp	r3, #4
 800e38c:	d017      	beq.n	800e3be <lcp_reqci+0x5ae>
 800e38e:	2b02      	cmp	r3, #2
 800e390:	d000      	beq.n	800e394 <lcp_reqci+0x584>
	break;
    case CONFREJ:
	*lenp = rejp - inp;
	break;
    default:
	break;
 800e392:	e01a      	b.n	800e3ca <lcp_reqci+0x5ba>
	*lenp = next - inp;
 800e394:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	1ad2      	subs	r2, r2, r3
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	601a      	str	r2, [r3, #0]
	break;
 800e39e:	e014      	b.n	800e3ca <lcp_reqci+0x5ba>
	*lenp = nakoutp - (u_char*)nakp->payload;
 800e3a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3a4:	6852      	ldr	r2, [r2, #4]
 800e3a6:	1a9a      	subs	r2, r3, r2
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	601a      	str	r2, [r3, #0]
	MEMCPY(inp, nakp->payload, *lenp);
 800e3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ae:	6859      	ldr	r1, [r3, #4]
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	461a      	mov	r2, r3
 800e3b6:	68b8      	ldr	r0, [r7, #8]
 800e3b8:	f002 faea 	bl	8010990 <memcpy>
	break;
 800e3bc:	e005      	b.n	800e3ca <lcp_reqci+0x5ba>
	*lenp = rejp - inp;
 800e3be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	1ad2      	subs	r2, r2, r3
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	601a      	str	r2, [r3, #0]
	break;
 800e3c8:	bf00      	nop
    }

    pbuf_free(nakp);
 800e3ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3cc:	f7f5 fd74 	bl	8003eb8 <pbuf_free>
    LCPDEBUG(("lcp_reqci: returning CONF%s.", CODENAME(rc)));
    return (rc);			/* Return final code */
 800e3d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3758      	adds	r7, #88	; 0x58
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop

0800e3dc <lcp_up>:


/*
 * lcp_up - LCP has come UP.
 */
static void lcp_up(fsm *f) {
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b08c      	sub	sp, #48	; 0x30
 800e3e0:	af02      	add	r7, sp, #8
 800e3e2:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	627b      	str	r3, [r7, #36]	; 0x24
    lcp_options *wo = &pcb->lcp_wantoptions;
 800e3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ec:	3360      	adds	r3, #96	; 0x60
 800e3ee:	623b      	str	r3, [r7, #32]
    lcp_options *ho = &pcb->lcp_hisoptions;
 800e3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f2:	33cc      	adds	r3, #204	; 0xcc
 800e3f4:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800e3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f8:	3384      	adds	r3, #132	; 0x84
 800e3fa:	61bb      	str	r3, [r7, #24]
    lcp_options *ao = &pcb->lcp_allowoptions;
 800e3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fe:	33a8      	adds	r3, #168	; 0xa8
 800e400:	617b      	str	r3, [r7, #20]
    int mtu, mru;

    if (!go->neg_magicnumber)
 800e402:	69bb      	ldr	r3, [r7, #24]
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	f003 0320 	and.w	r3, r3, #32
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d102      	bne.n	800e416 <lcp_up+0x3a>
	go->magicnumber = 0;
 800e410:	69bb      	ldr	r3, [r7, #24]
 800e412:	2200      	movs	r2, #0
 800e414:	609a      	str	r2, [r3, #8]
    if (!ho->neg_magicnumber)
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	f003 0320 	and.w	r3, r3, #32
 800e41e:	b2db      	uxtb	r3, r3
 800e420:	2b00      	cmp	r3, #0
 800e422:	d102      	bne.n	800e42a <lcp_up+0x4e>
	ho->magicnumber = 0;
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	2200      	movs	r2, #0
 800e428:	609a      	str	r2, [r3, #8]
     * the value we got in the negotiation.
     * Note on the MTU: the link MTU can be the MRU the peer wanted,
     * the interface MTU is set to the lowest of that, the
     * MTU we want to use, and our link MRU.
     */
    mtu = ho->neg_mru? ho->mru: PPP_DEFMRU;
 800e42a:	69fb      	ldr	r3, [r7, #28]
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	f003 0304 	and.w	r3, r3, #4
 800e432:	b2db      	uxtb	r3, r3
 800e434:	2b00      	cmp	r3, #0
 800e436:	d002      	beq.n	800e43e <lcp_up+0x62>
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	885b      	ldrh	r3, [r3, #2]
 800e43c:	e001      	b.n	800e442 <lcp_up+0x66>
 800e43e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e442:	613b      	str	r3, [r7, #16]
    mru = go->neg_mru? LWIP_MAX(wo->mru, go->mru): PPP_DEFMRU;
 800e444:	69bb      	ldr	r3, [r7, #24]
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	f003 0304 	and.w	r3, r3, #4
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d00b      	beq.n	800e46a <lcp_up+0x8e>
 800e452:	6a3b      	ldr	r3, [r7, #32]
 800e454:	885a      	ldrh	r2, [r3, #2]
 800e456:	69bb      	ldr	r3, [r7, #24]
 800e458:	885b      	ldrh	r3, [r3, #2]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d902      	bls.n	800e464 <lcp_up+0x88>
 800e45e:	6a3b      	ldr	r3, [r7, #32]
 800e460:	885b      	ldrh	r3, [r3, #2]
 800e462:	e004      	b.n	800e46e <lcp_up+0x92>
 800e464:	69bb      	ldr	r3, [r7, #24]
 800e466:	885b      	ldrh	r3, [r3, #2]
 800e468:	e001      	b.n	800e46e <lcp_up+0x92>
 800e46a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e46e:	60fb      	str	r3, [r7, #12]
#ifdef HAVE_MULTILINK
    if (!(multilink && go->neg_mrru && ho->neg_mrru))
#endif /* HAVE_MULTILINK */
	ppp_netif_set_mtu(pcb, LWIP_MIN(LWIP_MIN(mtu, mru), ao->mru));
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	885b      	ldrh	r3, [r3, #2]
 800e474:	4619      	mov	r1, r3
 800e476:	68fa      	ldr	r2, [r7, #12]
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	4293      	cmp	r3, r2
 800e47c:	bfa8      	it	ge
 800e47e:	4613      	movge	r3, r2
 800e480:	428b      	cmp	r3, r1
 800e482:	bfa8      	it	ge
 800e484:	460b      	movge	r3, r1
 800e486:	4619      	mov	r1, r3
 800e488:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e48a:	f000 fdd5 	bl	800f038 <ppp_netif_set_mtu>
    ppp_send_config(pcb, mtu,
		    (ho->neg_asyncmap? ho->asyncmap: 0xffffffff),
 800e48e:	69fb      	ldr	r3, [r7, #28]
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	f003 0308 	and.w	r3, r3, #8
 800e496:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d002      	beq.n	800e4a2 <lcp_up+0xc6>
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	685a      	ldr	r2, [r3, #4]
 800e4a0:	e001      	b.n	800e4a6 <lcp_up+0xca>
 800e4a2:	f04f 32ff 	mov.w	r2, #4294967295
		    ho->neg_pcompression, ho->neg_accompression);
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	781b      	ldrb	r3, [r3, #0]
 800e4aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800e4ae:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 800e4b0:	4619      	mov	r1, r3
		    ho->neg_pcompression, ho->neg_accompression);
 800e4b2:	69fb      	ldr	r3, [r7, #28]
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e4ba:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 800e4bc:	9300      	str	r3, [sp, #0]
 800e4be:	460b      	mov	r3, r1
 800e4c0:	6939      	ldr	r1, [r7, #16]
 800e4c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4c4:	f000 fd0a 	bl	800eedc <ppp_send_config>
    ppp_recv_config(pcb, mru,
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 800e4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	f003 0308 	and.w	r3, r3, #8
 800e4d0:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d10c      	bne.n	800e4f0 <lcp_up+0x114>
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 800e4d6:	69bb      	ldr	r3, [r7, #24]
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	f003 0308 	and.w	r3, r3, #8
 800e4de:	b2db      	uxtb	r3, r3
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d002      	beq.n	800e4ea <lcp_up+0x10e>
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	685a      	ldr	r2, [r3, #4]
 800e4e8:	e003      	b.n	800e4f2 <lcp_up+0x116>
 800e4ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ee:	e000      	b.n	800e4f2 <lcp_up+0x116>
    ppp_recv_config(pcb, mru,
 800e4f0:	2200      	movs	r2, #0
		    go->neg_pcompression, go->neg_accompression);
 800e4f2:	69bb      	ldr	r3, [r7, #24]
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800e4fa:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 800e4fc:	4619      	mov	r1, r3
		    go->neg_pcompression, go->neg_accompression);
 800e4fe:	69bb      	ldr	r3, [r7, #24]
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e506:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 800e508:	9300      	str	r3, [sp, #0]
 800e50a:	460b      	mov	r3, r1
 800e50c:	68f9      	ldr	r1, [r7, #12]
 800e50e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e510:	f000 fd00 	bl	800ef14 <ppp_recv_config>

    if (ho->neg_mru)
 800e514:	69fb      	ldr	r3, [r7, #28]
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	f003 0304 	and.w	r3, r3, #4
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d004      	beq.n	800e52c <lcp_up+0x150>
	pcb->peer_mru = ho->mru;
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	885a      	ldrh	r2, [r3, #2]
 800e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e528:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0

    lcp_echo_lowerup(f->pcb);  /* Enable echo messages */
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4618      	mov	r0, r3
 800e532:	f000 f97a 	bl	800e82a <lcp_echo_lowerup>

    link_established(pcb);
 800e536:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e538:	f7fb fdca 	bl	800a0d0 <link_established>
}
 800e53c:	bf00      	nop
 800e53e:	3728      	adds	r7, #40	; 0x28
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <lcp_down>:
/*
 * lcp_down - LCP has gone DOWN.
 *
 * Alert other protocols.
 */
static void lcp_down(fsm *f) {
 800e544:	b580      	push	{r7, lr}
 800e546:	b086      	sub	sp, #24
 800e548:	af02      	add	r7, sp, #8
 800e54a:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	60fb      	str	r3, [r7, #12]
    lcp_options *go = &pcb->lcp_gotoptions;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	3384      	adds	r3, #132	; 0x84
 800e556:	60bb      	str	r3, [r7, #8]

    lcp_echo_lowerdown(f->pcb);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	4618      	mov	r0, r3
 800e55e:	f000 f985 	bl	800e86c <lcp_echo_lowerdown>

    link_down(pcb);
 800e562:	68f8      	ldr	r0, [r7, #12]
 800e564:	f7fb fd62 	bl	800a02c <link_down>

    ppp_send_config(pcb, PPP_DEFMRU, 0xffffffff, 0, 0);
 800e568:	2300      	movs	r3, #0
 800e56a:	9300      	str	r3, [sp, #0]
 800e56c:	2300      	movs	r3, #0
 800e56e:	f04f 32ff 	mov.w	r2, #4294967295
 800e572:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800e576:	68f8      	ldr	r0, [r7, #12]
 800e578:	f000 fcb0 	bl	800eedc <ppp_send_config>
    ppp_recv_config(pcb, PPP_DEFMRU,
		    (go->neg_asyncmap? go->asyncmap: 0xffffffff),
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	f003 0308 	and.w	r3, r3, #8
 800e584:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 800e586:	2b00      	cmp	r3, #0
 800e588:	d002      	beq.n	800e590 <lcp_down+0x4c>
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	685a      	ldr	r2, [r3, #4]
 800e58e:	e001      	b.n	800e594 <lcp_down+0x50>
 800e590:	f04f 32ff 	mov.w	r2, #4294967295
		    go->neg_pcompression, go->neg_accompression);
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800e59c:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 800e59e:	4619      	mov	r1, r3
		    go->neg_pcompression, go->neg_accompression);
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e5a8:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 800e5aa:	9300      	str	r3, [sp, #0]
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800e5b2:	68f8      	ldr	r0, [r7, #12]
 800e5b4:	f000 fcae 	bl	800ef14 <ppp_recv_config>
    pcb->peer_mru = PPP_DEFMRU;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e5be:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
}
 800e5c2:	bf00      	nop
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}

0800e5ca <lcp_starting>:


/*
 * lcp_starting - LCP needs the lower layer up.
 */
static void lcp_starting(fsm *f) {
 800e5ca:	b580      	push	{r7, lr}
 800e5cc:	b084      	sub	sp, #16
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	60fb      	str	r3, [r7, #12]
    link_required(pcb);
 800e5d8:	68f8      	ldr	r0, [r7, #12]
 800e5da:	f7fb fd05 	bl	8009fe8 <link_required>
}
 800e5de:	bf00      	nop
 800e5e0:	3710      	adds	r7, #16
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}

0800e5e6 <lcp_finished>:


/*
 * lcp_finished - LCP has finished with the lower layer.
 */
static void lcp_finished(fsm *f) {
 800e5e6:	b580      	push	{r7, lr}
 800e5e8:	b084      	sub	sp, #16
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	60fb      	str	r3, [r7, #12]
    link_terminated(pcb);
 800e5f4:	68f8      	ldr	r0, [r7, #12]
 800e5f6:	f7fb fd01 	bl	8009ffc <link_terminated>
}
 800e5fa:	bf00      	nop
 800e5fc:	3710      	adds	r7, #16
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
	...

0800e604 <LcpLinkFailure>:

/*
 * Time to shut down the link because there is nothing out there.
 */

static void LcpLinkFailure(fsm *f) {
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	60fb      	str	r3, [r7, #12]
    if (f->state == PPP_FSM_OPENED) {
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	7c1b      	ldrb	r3, [r3, #16]
 800e616:	2b09      	cmp	r3, #9
 800e618:	d107      	bne.n	800e62a <LcpLinkFailure+0x26>
	ppp_info(("No response to %d echo-requests", pcb->lcp_echos_pending));
        ppp_notice(("Serial link appears to be disconnected."));
	pcb->err_code = PPPERR_PEERDEAD;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2209      	movs	r2, #9
 800e61e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	lcp_close(pcb, "Peer not responding");
 800e622:	4904      	ldr	r1, [pc, #16]	; (800e634 <LcpLinkFailure+0x30>)
 800e624:	68f8      	ldr	r0, [r7, #12]
 800e626:	f7fe f88d 	bl	800c744 <lcp_close>
    }
}
 800e62a:	bf00      	nop
 800e62c:	3710      	adds	r7, #16
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	08013c4c 	.word	0x08013c4c

0800e638 <LcpEchoCheck>:

/*
 * Timer expired for the LCP echo requests from this process.
 */

static void LcpEchoCheck(fsm *f) {
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	60fb      	str	r3, [r7, #12]

    LcpSendEchoRequest (f);
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 f88e 	bl	800e768 <LcpSendEchoRequest>
    if (f->state != PPP_FSM_OPENED)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	7c1b      	ldrb	r3, [r3, #16]
 800e650:	2b09      	cmp	r3, #9
 800e652:	d117      	bne.n	800e684 <LcpEchoCheck+0x4c>
    /*
     * Start the timer for the next interval.
     */
    if (pcb->lcp_echo_timer_running)
	ppp_warn(("assertion lcp_echo_timer_running==0 failed"));
    TIMEOUT (LcpEchoTimeout, f, pcb->settings.lcp_echo_interval);
 800e654:	6879      	ldr	r1, [r7, #4]
 800e656:	480d      	ldr	r0, [pc, #52]	; (800e68c <LcpEchoCheck+0x54>)
 800e658:	f7fb fc8c 	bl	8009f74 <sys_untimeout>
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	7cdb      	ldrb	r3, [r3, #19]
 800e660:	461a      	mov	r2, r3
 800e662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e666:	fb03 f302 	mul.w	r3, r3, r2
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	4907      	ldr	r1, [pc, #28]	; (800e68c <LcpEchoCheck+0x54>)
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fb fc54 	bl	8009f1c <sys_timeout>
    pcb->lcp_echo_timer_running = 1;
 800e674:	68fa      	ldr	r2, [r7, #12]
 800e676:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800e67a:	f043 0310 	orr.w	r3, r3, #16
 800e67e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 800e682:	e000      	b.n	800e686 <LcpEchoCheck+0x4e>
	return;
 800e684:	bf00      	nop
}
 800e686:	3710      	adds	r7, #16
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	0800e691 	.word	0x0800e691

0800e690 <LcpEchoTimeout>:

/*
 * LcpEchoTimeout - Timer expired on the LCP echo
 */

static void LcpEchoTimeout(void *arg) {
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm*)arg;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	60fb      	str	r3, [r7, #12]
    ppp_pcb *pcb = f->pcb;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	60bb      	str	r3, [r7, #8]
    if (pcb->lcp_echo_timer_running != 0) {
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e6a8:	f003 0310 	and.w	r3, r3, #16
 800e6ac:	b2db      	uxtb	r3, r3
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d009      	beq.n	800e6c6 <LcpEchoTimeout+0x36>
        pcb->lcp_echo_timer_running = 0;
 800e6b2:	68ba      	ldr	r2, [r7, #8]
 800e6b4:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800e6b8:	f36f 1304 	bfc	r3, #4, #1
 800e6bc:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
        LcpEchoCheck ((fsm *) arg);
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f7ff ffb9 	bl	800e638 <LcpEchoCheck>
    }
}
 800e6c6:	bf00      	nop
 800e6c8:	3710      	adds	r7, #16
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}

0800e6ce <lcp_received_echo_reply>:

/*
 * LcpEchoReply - LCP has received a reply to the echo
 */

static void lcp_received_echo_reply(fsm *f, int id, u_char *inp, int len) {
 800e6ce:	b480      	push	{r7}
 800e6d0:	b089      	sub	sp, #36	; 0x24
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	60f8      	str	r0, [r7, #12]
 800e6d6:	60b9      	str	r1, [r7, #8]
 800e6d8:	607a      	str	r2, [r7, #4]
 800e6da:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800e6e2:	69fb      	ldr	r3, [r7, #28]
 800e6e4:	3384      	adds	r3, #132	; 0x84
 800e6e6:	61bb      	str	r3, [r7, #24]
    u32_t magic_val;
    LWIP_UNUSED_ARG(id);

    /* Check the magic number - don't count replies from ourselves. */
    if (len < 4) {
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	2b03      	cmp	r3, #3
 800e6ec:	dd34      	ble.n	800e758 <lcp_received_echo_reply+0x8a>
	ppp_dbglog(("lcp: received short Echo-Reply, length %d", len));
	return;
    }
    GETLONG(magic_val, inp);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	1c5a      	adds	r2, r3, #1
 800e6f2:	607a      	str	r2, [r7, #4]
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	021b      	lsls	r3, r3, #8
 800e6f8:	617b      	str	r3, [r7, #20]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	1c5a      	adds	r2, r3, #1
 800e6fe:	607a      	str	r2, [r7, #4]
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	461a      	mov	r2, r3
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	4313      	orrs	r3, r2
 800e708:	617b      	str	r3, [r7, #20]
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	021b      	lsls	r3, r3, #8
 800e70e:	617b      	str	r3, [r7, #20]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	1c5a      	adds	r2, r3, #1
 800e714:	607a      	str	r2, [r7, #4]
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	461a      	mov	r2, r3
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	4313      	orrs	r3, r2
 800e71e:	617b      	str	r3, [r7, #20]
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	021b      	lsls	r3, r3, #8
 800e724:	617b      	str	r3, [r7, #20]
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	1c5a      	adds	r2, r3, #1
 800e72a:	607a      	str	r2, [r7, #4]
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	461a      	mov	r2, r3
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	4313      	orrs	r3, r2
 800e734:	617b      	str	r3, [r7, #20]
    if (go->neg_magicnumber
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	f003 0320 	and.w	r3, r3, #32
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	2b00      	cmp	r3, #0
 800e742:	d004      	beq.n	800e74e <lcp_received_echo_reply+0x80>
	&& magic_val == go->magicnumber) {
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	689a      	ldr	r2, [r3, #8]
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d006      	beq.n	800e75c <lcp_received_echo_reply+0x8e>
	ppp_warn(("appear to have received our own echo-reply!"));
	return;
    }

    /* Reset the number of outstanding echo frames */
    pcb->lcp_echos_pending = 0;
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	2200      	movs	r2, #0
 800e752:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 800e756:	e002      	b.n	800e75e <lcp_received_echo_reply+0x90>
	return;
 800e758:	bf00      	nop
 800e75a:	e000      	b.n	800e75e <lcp_received_echo_reply+0x90>
	return;
 800e75c:	bf00      	nop
}
 800e75e:	3724      	adds	r7, #36	; 0x24
 800e760:	46bd      	mov	sp, r7
 800e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e766:	4770      	bx	lr

0800e768 <LcpSendEchoRequest>:

/*
 * LcpSendEchoRequest - Send an echo request frame to the peer
 */

static void LcpSendEchoRequest(fsm *f) {
 800e768:	b580      	push	{r7, lr}
 800e76a:	b08a      	sub	sp, #40	; 0x28
 800e76c:	af02      	add	r7, sp, #8
 800e76e:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800e776:	69fb      	ldr	r3, [r7, #28]
 800e778:	3384      	adds	r3, #132	; 0x84
 800e77a:	61bb      	str	r3, [r7, #24]
    u_char pkt[4], *pktp;

    /*
     * Detect the failure of the peer at this point.
     */
    if (pcb->settings.lcp_echo_fails != 0) {
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	7d1b      	ldrb	r3, [r3, #20]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d00d      	beq.n	800e7a0 <LcpSendEchoRequest+0x38>
        if (pcb->lcp_echos_pending >= pcb->settings.lcp_echo_fails) {
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800e78a:	69fb      	ldr	r3, [r7, #28]
 800e78c:	7d1b      	ldrb	r3, [r3, #20]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d306      	bcc.n	800e7a0 <LcpSendEchoRequest+0x38>
            LcpLinkFailure(f);
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f7ff ff36 	bl	800e604 <LcpLinkFailure>
            pcb->lcp_echos_pending = 0;
 800e798:	69fb      	ldr	r3, [r7, #28]
 800e79a:	2200      	movs	r2, #0
 800e79c:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
#endif

    /*
     * Make and send the echo request frame.
     */
    if (f->state == PPP_FSM_OPENED) {
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	7c1b      	ldrb	r3, [r3, #16]
 800e7a4:	2b09      	cmp	r3, #9
 800e7a6:	d13c      	bne.n	800e822 <LcpSendEchoRequest+0xba>
        lcp_magic = go->magicnumber;
 800e7a8:	69bb      	ldr	r3, [r7, #24]
 800e7aa:	689b      	ldr	r3, [r3, #8]
 800e7ac:	617b      	str	r3, [r7, #20]
	pktp = pkt;
 800e7ae:	f107 030c 	add.w	r3, r7, #12
 800e7b2:	613b      	str	r3, [r7, #16]
	PUTLONG(lcp_magic, pktp);
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	1c5a      	adds	r2, r3, #1
 800e7b8:	613a      	str	r2, [r7, #16]
 800e7ba:	697a      	ldr	r2, [r7, #20]
 800e7bc:	0e12      	lsrs	r2, r2, #24
 800e7be:	b2d2      	uxtb	r2, r2
 800e7c0:	701a      	strb	r2, [r3, #0]
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	1c5a      	adds	r2, r3, #1
 800e7c6:	613a      	str	r2, [r7, #16]
 800e7c8:	697a      	ldr	r2, [r7, #20]
 800e7ca:	0c12      	lsrs	r2, r2, #16
 800e7cc:	b2d2      	uxtb	r2, r2
 800e7ce:	701a      	strb	r2, [r3, #0]
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	1c5a      	adds	r2, r3, #1
 800e7d4:	613a      	str	r2, [r7, #16]
 800e7d6:	697a      	ldr	r2, [r7, #20]
 800e7d8:	0a12      	lsrs	r2, r2, #8
 800e7da:	b2d2      	uxtb	r2, r2
 800e7dc:	701a      	strb	r2, [r3, #0]
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	1c5a      	adds	r2, r3, #1
 800e7e2:	613a      	str	r2, [r7, #16]
 800e7e4:	697a      	ldr	r2, [r7, #20]
 800e7e6:	b2d2      	uxtb	r2, r2
 800e7e8:	701a      	strb	r2, [r3, #0]
        fsm_sdata(f, ECHOREQ, pcb->lcp_echo_number++, pkt, pktp - pkt);
 800e7ea:	69fb      	ldr	r3, [r7, #28]
 800e7ec:	f893 20f3 	ldrb.w	r2, [r3, #243]	; 0xf3
 800e7f0:	1c53      	adds	r3, r2, #1
 800e7f2:	b2d9      	uxtb	r1, r3
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 800e7fa:	6939      	ldr	r1, [r7, #16]
 800e7fc:	f107 030c 	add.w	r3, r7, #12
 800e800:	1acb      	subs	r3, r1, r3
 800e802:	f107 010c 	add.w	r1, r7, #12
 800e806:	9300      	str	r3, [sp, #0]
 800e808:	460b      	mov	r3, r1
 800e80a:	2109      	movs	r1, #9
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f7fc fc79 	bl	800b104 <fsm_sdata>
	++pcb->lcp_echos_pending;
 800e812:	69fb      	ldr	r3, [r7, #28]
 800e814:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 800e818:	3301      	adds	r3, #1
 800e81a:	b2da      	uxtb	r2, r3
 800e81c:	69fb      	ldr	r3, [r7, #28]
 800e81e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    }
}
 800e822:	bf00      	nop
 800e824:	3720      	adds	r7, #32
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}

0800e82a <lcp_echo_lowerup>:

/*
 * lcp_echo_lowerup - Start the timer for the LCP frame
 */

static void lcp_echo_lowerup(ppp_pcb *pcb) {
 800e82a:	b580      	push	{r7, lr}
 800e82c:	b084      	sub	sp, #16
 800e82e:	af00      	add	r7, sp, #0
 800e830:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	3344      	adds	r3, #68	; 0x44
 800e836:	60fb      	str	r3, [r7, #12]

    /* Clear the parameters for generating echo frames */
    pcb->lcp_echos_pending      = 0;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2200      	movs	r2, #0
 800e83c:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    pcb->lcp_echo_number        = 0;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2200      	movs	r2, #0
 800e844:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
    pcb->lcp_echo_timer_running = 0;
 800e848:	687a      	ldr	r2, [r7, #4]
 800e84a:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800e84e:	f36f 1304 	bfc	r3, #4, #1
 800e852:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  
    /* If a timeout interval is specified then start the timer */
    if (pcb->settings.lcp_echo_interval != 0)
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	7cdb      	ldrb	r3, [r3, #19]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d002      	beq.n	800e864 <lcp_echo_lowerup+0x3a>
        LcpEchoCheck (f);
 800e85e:	68f8      	ldr	r0, [r7, #12]
 800e860:	f7ff feea 	bl	800e638 <LcpEchoCheck>
}
 800e864:	bf00      	nop
 800e866:	3710      	adds	r7, #16
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <lcp_echo_lowerdown>:

/*
 * lcp_echo_lowerdown - Stop the timer for the LCP frame
 */

static void lcp_echo_lowerdown(ppp_pcb *pcb) {
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	3344      	adds	r3, #68	; 0x44
 800e878:	60fb      	str	r3, [r7, #12]

    if (pcb->lcp_echo_timer_running != 0) {
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e880:	f003 0310 	and.w	r3, r3, #16
 800e884:	b2db      	uxtb	r3, r3
 800e886:	2b00      	cmp	r3, #0
 800e888:	d00a      	beq.n	800e8a0 <lcp_echo_lowerdown+0x34>
        UNTIMEOUT (LcpEchoTimeout, f);
 800e88a:	68f9      	ldr	r1, [r7, #12]
 800e88c:	4806      	ldr	r0, [pc, #24]	; (800e8a8 <lcp_echo_lowerdown+0x3c>)
 800e88e:	f7fb fb71 	bl	8009f74 <sys_untimeout>
        pcb->lcp_echo_timer_running = 0;
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800e898:	f36f 1304 	bfc	r3, #4, #1
 800e89c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    }
}
 800e8a0:	bf00      	nop
 800e8a2:	3710      	adds	r7, #16
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	0800e691 	.word	0x0800e691

0800e8ac <magic_init>:
 * random event.
 *
 * If LWIP_RAND if available, we do not call srand() as we are
 * not going to call rand().
 */
void magic_init(void) {
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	af00      	add	r7, sp, #0
  magic_randomseed += sys_jiffies();
 800e8b0:	f7f2 ff3e 	bl	8001730 <sys_jiffies>
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	4b03      	ldr	r3, [pc, #12]	; (800e8c4 <magic_init+0x18>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	4a01      	ldr	r2, [pc, #4]	; (800e8c4 <magic_init+0x18>)
 800e8be:	6013      	str	r3, [r2, #0]
#ifndef LWIP_RAND
  /* Initialize the random number generator. */
  srand((unsigned)magic_randomseed);
#endif /* LWIP_RAND */
}
 800e8c0:	bf00      	nop
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	200003f8 	.word	0x200003f8

0800e8c8 <magic_randomize>:
 * this function is called at *truly random* times by the polling
 * and network functions.  Here we only get 16 bits of new random
 * value but we use the previous value to randomize the other 16
 * bits.
 */
void magic_randomize(void) {
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	af00      	add	r7, sp, #0
    magic_init();
    /* The initialization function also updates the seed. */
    return;
  }
#endif /* LWIP_RAND */
  magic_randomseed += sys_jiffies();
 800e8cc:	f7f2 ff30 	bl	8001730 <sys_jiffies>
 800e8d0:	4602      	mov	r2, r0
 800e8d2:	4b03      	ldr	r3, [pc, #12]	; (800e8e0 <magic_randomize+0x18>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	4413      	add	r3, r2
 800e8d8:	4a01      	ldr	r2, [pc, #4]	; (800e8e0 <magic_randomize+0x18>)
 800e8da:	6013      	str	r3, [r2, #0]
}
 800e8dc:	bf00      	nop
 800e8de:	bd80      	pop	{r7, pc}
 800e8e0:	200003f8 	.word	0x200003f8

0800e8e4 <magic>:
 * Alternatively, use LWIP_RAND if available, but we do not assume
 * it is returning 32 bits of random data because it is probably
 * going to be defined to directly return the rand() value. For
 * example, LCP magic numbers are 32-bit random values.
 */
u32_t magic(void) {
 800e8e4:	b598      	push	{r3, r4, r7, lr}
 800e8e6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  return (LWIP_RAND() << 16) + LWIP_RAND() + magic_randomseed;
 800e8e8:	f7f2 ff2a 	bl	8001740 <lwip_port_rand>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	041c      	lsls	r4, r3, #16
 800e8f0:	f7f2 ff26 	bl	8001740 <lwip_port_rand>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	18e2      	adds	r2, r4, r3
 800e8f8:	4b02      	ldr	r3, [pc, #8]	; (800e904 <magic+0x20>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4413      	add	r3, r2
#else /* LWIP_RAND */
  return ((u32_t)rand() << 16) + (u32_t)rand() + magic_randomseed;
#endif /* LWIP_RAND */
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	bd98      	pop	{r3, r4, r7, pc}
 800e902:	bf00      	nop
 800e904:	200003f8 	.word	0x200003f8

0800e908 <ppp_set_auth>:

/***********************************/
/*** PUBLIC FUNCTION DEFINITIONS ***/
/***********************************/
#if PPP_AUTH_SUPPORT
void ppp_set_auth(ppp_pcb *pcb, u8_t authtype, const char *user, const char *passwd) {
 800e908:	b580      	push	{r7, lr}
 800e90a:	b084      	sub	sp, #16
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	60f8      	str	r0, [r7, #12]
 800e910:	607a      	str	r2, [r7, #4]
 800e912:	603b      	str	r3, [r7, #0]
 800e914:	460b      	mov	r3, r1
 800e916:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("pcb->phase == PPP_PHASE_DEAD", pcb->phase == PPP_PHASE_DEAD);
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d00a      	beq.n	800e938 <ppp_set_auth+0x30>
 800e922:	4b11      	ldr	r3, [pc, #68]	; (800e968 <ppp_set_auth+0x60>)
 800e924:	22db      	movs	r2, #219	; 0xdb
 800e926:	4911      	ldr	r1, [pc, #68]	; (800e96c <ppp_set_auth+0x64>)
 800e928:	4811      	ldr	r0, [pc, #68]	; (800e970 <ppp_set_auth+0x68>)
 800e92a:	f001 fe0f 	bl	801054c <iprintf>
 800e92e:	2000      	movs	r0, #0
 800e930:	f001 ff0e 	bl	8010750 <fflush>
 800e934:	f001 fe53 	bl	80105de <abort>

#if PAP_SUPPORT
  pcb->settings.refuse_pap = !(authtype & PPPAUTHTYPE_PAP);
 800e938:	7afb      	ldrb	r3, [r7, #11]
 800e93a:	f003 0301 	and.w	r3, r3, #1
 800e93e:	2b00      	cmp	r3, #0
 800e940:	bf0c      	ite	eq
 800e942:	2301      	moveq	r3, #1
 800e944:	2300      	movne	r3, #0
 800e946:	b2d9      	uxtb	r1, r3
 800e948:	68fa      	ldr	r2, [r7, #12]
 800e94a:	7813      	ldrb	r3, [r2, #0]
 800e94c:	f361 0300 	bfi	r3, r1, #0, #1
 800e950:	7013      	strb	r3, [r2, #0]
#endif /* MSCHAP_SUPPORT */
#endif /* CHAP_SUPPORT */
#if EAP_SUPPORT
  pcb->settings.refuse_eap = !(authtype & PPPAUTHTYPE_EAP);
#endif /* EAP_SUPPORT */
  pcb->settings.user = user;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	687a      	ldr	r2, [r7, #4]
 800e956:	605a      	str	r2, [r3, #4]
  pcb->settings.passwd = passwd;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	683a      	ldr	r2, [r7, #0]
 800e95c:	609a      	str	r2, [r3, #8]
}
 800e95e:	bf00      	nop
 800e960:	3710      	adds	r7, #16
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	08013c68 	.word	0x08013c68
 800e96c:	08013c8c 	.word	0x08013c8c
 800e970:	08013cac 	.word	0x08013cac

0800e974 <ppp_connect>:
 * the connection.
 *
 * If this port connects to a modem, the modem connection must be
 * established before calling this.
 */
err_t ppp_connect(ppp_pcb *pcb, u16_t holdoff) {
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	460b      	mov	r3, r1
 800e97e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb->phase != PPP_PHASE_DEAD) {
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e986:	2b00      	cmp	r3, #0
 800e988:	d002      	beq.n	800e990 <ppp_connect+0x1c>
    return ERR_ALREADY;
 800e98a:	f06f 0308 	mvn.w	r3, #8
 800e98e:	e018      	b.n	800e9c2 <ppp_connect+0x4e>
  }

  PPPDEBUG(LOG_DEBUG, ("ppp_connect[%d]: holdoff=%d\n", pcb->netif->num, holdoff));

  magic_randomize();
 800e990:	f7ff ff9a 	bl	800e8c8 <magic_randomize>

  if (holdoff == 0) {
 800e994:	887b      	ldrh	r3, [r7, #2]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d104      	bne.n	800e9a4 <ppp_connect+0x30>
    ppp_do_connect(pcb);
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f000 f874 	bl	800ea88 <ppp_do_connect>
    return ERR_OK;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	e00e      	b.n	800e9c2 <ppp_connect+0x4e>
  }

  new_phase(pcb, PPP_PHASE_HOLDOFF);
 800e9a4:	2102      	movs	r1, #2
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f000 fa88 	bl	800eebc <new_phase>
  sys_timeout((u32_t)(holdoff*1000), ppp_do_connect, pcb);
 800e9ac:	887b      	ldrh	r3, [r7, #2]
 800e9ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e9b2:	fb02 f303 	mul.w	r3, r2, r3
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	4904      	ldr	r1, [pc, #16]	; (800e9cc <ppp_connect+0x58>)
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f7fb faae 	bl	8009f1c <sys_timeout>
  return ERR_OK;
 800e9c0:	2300      	movs	r3, #0
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3708      	adds	r7, #8
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	0800ea89 	.word	0x0800ea89

0800e9d0 <ppp_close>:
 *
 * Return 0 on success, an error code on failure.
 */
err_t
ppp_close(ppp_pcb *pcb, u8_t nocarrier)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
 800e9d8:	460b      	mov	r3, r1
 800e9da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  pcb->err_code = PPPERR_USER;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2205      	movs	r2, #5
 800e9e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* holdoff phase, cancel the reconnection */
  if (pcb->phase == PPP_PHASE_HOLDOFF) {
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e9ea:	2b02      	cmp	r3, #2
 800e9ec:	d107      	bne.n	800e9fe <ppp_close+0x2e>
    sys_untimeout(ppp_do_connect, pcb);
 800e9ee:	6879      	ldr	r1, [r7, #4]
 800e9f0:	4823      	ldr	r0, [pc, #140]	; (800ea80 <ppp_close+0xb0>)
 800e9f2:	f7fb fabf 	bl	8009f74 <sys_untimeout>
    new_phase(pcb, PPP_PHASE_DEAD);
 800e9f6:	2100      	movs	r1, #0
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f000 fa5f 	bl	800eebc <new_phase>
  }

  /* dead phase, nothing to do, call the status callback to be consistent */
  if (pcb->phase == PPP_PHASE_DEAD) {
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d10b      	bne.n	800ea20 <ppp_close+0x50>
    pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6a1b      	ldr	r3, [r3, #32]
 800ea0c:	687a      	ldr	r2, [r7, #4]
 800ea0e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800ea12:	4611      	mov	r1, r2
 800ea14:	687a      	ldr	r2, [r7, #4]
 800ea16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	4798      	blx	r3
    return ERR_OK;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	e02a      	b.n	800ea76 <ppp_close+0xa6>
  }

  /* Already terminating, nothing to do */
  if (pcb->phase >= PPP_PHASE_TERMINATE) {
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ea26:	2b0a      	cmp	r3, #10
 800ea28:	d902      	bls.n	800ea30 <ppp_close+0x60>
    return ERR_INPROGRESS;
 800ea2a:	f06f 0304 	mvn.w	r3, #4
 800ea2e:	e022      	b.n	800ea76 <ppp_close+0xa6>
  }

  /* LCP not open, close link protocol */
  if (pcb->phase < PPP_PHASE_ESTABLISH) {
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ea36:	2b05      	cmp	r3, #5
 800ea38:	d808      	bhi.n	800ea4c <ppp_close+0x7c>
    new_phase(pcb, PPP_PHASE_DISCONNECT);
 800ea3a:	210c      	movs	r1, #12
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f000 fa3d 	bl	800eebc <new_phase>
    ppp_link_terminated(pcb);
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f000 fa2a 	bl	800ee9c <ppp_link_terminated>
    return ERR_OK;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	e014      	b.n	800ea76 <ppp_close+0xa6>
   * to prevent changing the PPP phase FSM in transition phases.
   *
   * Always using nocarrier = 0 is still recommended, this is going to
   * take a little longer time, but is a safer choice from FSM point of view.
   */
  if (nocarrier && pcb->phase == PPP_PHASE_RUNNING) {
 800ea4c:	78fb      	ldrb	r3, [r7, #3]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d00c      	beq.n	800ea6c <ppp_close+0x9c>
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ea58:	2b0a      	cmp	r3, #10
 800ea5a:	d107      	bne.n	800ea6c <ppp_close+0x9c>
    PPPDEBUG(LOG_DEBUG, ("ppp_close[%d]: carrier lost -> lcp_lowerdown\n", pcb->netif->num));
    lcp_lowerdown(pcb);
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f7fd ff0d 	bl	800c87c <lcp_lowerdown>
    /* forced link termination, this will force link protocol to disconnect. */
    link_terminated(pcb);
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f7fb faca 	bl	8009ffc <link_terminated>
    return ERR_OK;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	e004      	b.n	800ea76 <ppp_close+0xa6>
  }

  /* Disconnect */
  PPPDEBUG(LOG_DEBUG, ("ppp_close[%d]: kill_link -> lcp_close\n", pcb->netif->num));
  /* LCP soft close request. */
  lcp_close(pcb, "User request");
 800ea6c:	4905      	ldr	r1, [pc, #20]	; (800ea84 <ppp_close+0xb4>)
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f7fd fe68 	bl	800c744 <lcp_close>
  return ERR_OK;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3708      	adds	r7, #8
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	0800ea89 	.word	0x0800ea89
 800ea84:	08013cd4 	.word	0x08013cd4

0800ea88 <ppp_do_connect>:

/**********************************/
/*** LOCAL FUNCTION DEFINITIONS ***/
/**********************************/

static void ppp_do_connect(void *arg) {
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  ppp_pcb *pcb = (ppp_pcb*)arg;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("pcb->phase == PPP_PHASE_DEAD || pcb->phase == PPP_PHASE_HOLDOFF", pcb->phase == PPP_PHASE_DEAD || pcb->phase == PPP_PHASE_HOLDOFF);
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d010      	beq.n	800eac0 <ppp_do_connect+0x38>
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eaa4:	2b02      	cmp	r3, #2
 800eaa6:	d00b      	beq.n	800eac0 <ppp_do_connect+0x38>
 800eaa8:	4b0d      	ldr	r3, [pc, #52]	; (800eae0 <ppp_do_connect+0x58>)
 800eaaa:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800eaae:	490d      	ldr	r1, [pc, #52]	; (800eae4 <ppp_do_connect+0x5c>)
 800eab0:	480d      	ldr	r0, [pc, #52]	; (800eae8 <ppp_do_connect+0x60>)
 800eab2:	f001 fd4b 	bl	801054c <iprintf>
 800eab6:	2000      	movs	r0, #0
 800eab8:	f001 fe4a 	bl	8010750 <fflush>
 800eabc:	f001 fd8f 	bl	80105de <abort>

  new_phase(pcb, PPP_PHASE_INITIALIZE);
 800eac0:	2103      	movs	r1, #3
 800eac2:	68f8      	ldr	r0, [r7, #12]
 800eac4:	f000 f9fa 	bl	800eebc <new_phase>
  pcb->link_cb->connect(pcb, pcb->link_ctx_cb);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	699b      	ldr	r3, [r3, #24]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	68fa      	ldr	r2, [r7, #12]
 800ead0:	69d2      	ldr	r2, [r2, #28]
 800ead2:	4611      	mov	r1, r2
 800ead4:	68f8      	ldr	r0, [r7, #12]
 800ead6:	4798      	blx	r3
}
 800ead8:	bf00      	nop
 800eada:	3710      	adds	r7, #16
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}
 800eae0:	08013c68 	.word	0x08013c68
 800eae4:	08013ce4 	.word	0x08013ce4
 800eae8:	08013cac 	.word	0x08013cac

0800eaec <ppp_netif_init_cb>:

/*
 * ppp_netif_init_cb - netif init callback
 */
static err_t ppp_netif_init_cb(struct netif *netif) {
 800eaec:	b480      	push	{r7}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  netif->name[0] = 'p';
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2270      	movs	r2, #112	; 0x70
 800eaf8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = 'p';
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2270      	movs	r2, #112	; 0x70
 800eb00:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if PPP_IPV4_SUPPORT
  netif->output = ppp_netif_output_ip4;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	4a04      	ldr	r2, [pc, #16]	; (800eb18 <ppp_netif_init_cb+0x2c>)
 800eb08:	615a      	str	r2, [r3, #20]
#endif /* PPP_IPV6_SUPPORT */
#if LWIP_NETIF_HOSTNAME
  /* @todo: Initialize interface hostname */
  /* netif_set_hostname(netif, "lwip"); */
#endif /* LWIP_NETIF_HOSTNAME */
  return ERR_OK;
 800eb0a:	2300      	movs	r3, #0
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	370c      	adds	r7, #12
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr
 800eb18:	0800eb1d 	.word	0x0800eb1d

0800eb1c <ppp_netif_output_ip4>:

#if PPP_IPV4_SUPPORT
/*
 * Send an IPv4 packet on the given connection.
 */
static err_t ppp_netif_output_ip4(struct netif *netif, struct pbuf *pb, const ip4_addr_t *ipaddr) {
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	60b9      	str	r1, [r7, #8]
 800eb26:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(ipaddr);
  return ppp_netif_output(netif, pb, PPP_IP);
 800eb28:	2221      	movs	r2, #33	; 0x21
 800eb2a:	68b9      	ldr	r1, [r7, #8]
 800eb2c:	68f8      	ldr	r0, [r7, #12]
 800eb2e:	f000 f805 	bl	800eb3c <ppp_netif_output>
 800eb32:	4603      	mov	r3, r0
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3710      	adds	r7, #16
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <ppp_netif_output>:
  LWIP_UNUSED_ARG(ipaddr);
  return ppp_netif_output(netif, pb, PPP_IPV6);
}
#endif /* PPP_IPV6_SUPPORT */

static err_t ppp_netif_output(struct netif *netif, struct pbuf *pb, u16_t protocol) {
 800eb3c:	b590      	push	{r4, r7, lr}
 800eb3e:	b089      	sub	sp, #36	; 0x24
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	60f8      	str	r0, [r7, #12]
 800eb44:	60b9      	str	r1, [r7, #8]
 800eb46:	4613      	mov	r3, r2
 800eb48:	80fb      	strh	r3, [r7, #6]
  ppp_pcb *pcb = (ppp_pcb*)netif->state;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	69db      	ldr	r3, [r3, #28]
 800eb4e:	61bb      	str	r3, [r7, #24]
  err_t err;
  struct pbuf *fpb = NULL;
 800eb50:	2300      	movs	r3, #0
 800eb52:	617b      	str	r3, [r7, #20]

  /* Check that the link is up. */
  if (0
 800eb54:	88fb      	ldrh	r3, [r7, #6]
 800eb56:	2b21      	cmp	r3, #33	; 0x21
 800eb58:	d107      	bne.n	800eb6a <ppp_netif_output+0x2e>
#if PPP_IPV4_SUPPORT
      || (protocol == PPP_IP && !pcb->if4_up)
 800eb5a:	69bb      	ldr	r3, [r7, #24]
 800eb5c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800eb60:	f003 0308 	and.w	r3, r3, #8
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d00b      	beq.n	800eb82 <ppp_netif_output+0x46>
    PPPDEBUG(LOG_ERR, ("ppp_netif_output[%d]: bad CCP transmit method\n", pcb->netif->num));
    goto err_rte_drop; /* Cannot really happen, we only negotiate what we are able to do */
  }
#endif /* CCP_SUPPORT */

  err = pcb->link_cb->netif_output(pcb, pcb->link_ctx_cb, pb, protocol);
 800eb6a:	69bb      	ldr	r3, [r7, #24]
 800eb6c:	699b      	ldr	r3, [r3, #24]
 800eb6e:	691c      	ldr	r4, [r3, #16]
 800eb70:	69bb      	ldr	r3, [r7, #24]
 800eb72:	69d9      	ldr	r1, [r3, #28]
 800eb74:	88fb      	ldrh	r3, [r7, #6]
 800eb76:	68ba      	ldr	r2, [r7, #8]
 800eb78:	69b8      	ldr	r0, [r7, #24]
 800eb7a:	47a0      	blx	r4
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	77fb      	strb	r3, [r7, #31]
  goto err;
 800eb80:	e002      	b.n	800eb88 <ppp_netif_output+0x4c>
    goto err_rte_drop;
 800eb82:	bf00      	nop

err_rte_drop:
  err = ERR_RTE;
 800eb84:	23fc      	movs	r3, #252	; 0xfc
 800eb86:	77fb      	strb	r3, [r7, #31]
  LINK_STATS_INC(link.rterr);
  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
err:
  if (fpb) {
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d002      	beq.n	800eb94 <ppp_netif_output+0x58>
    pbuf_free(fpb);
 800eb8e:	6978      	ldr	r0, [r7, #20]
 800eb90:	f7f5 f992 	bl	8003eb8 <pbuf_free>
  }
  return err;
 800eb94:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3724      	adds	r7, #36	; 0x24
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd90      	pop	{r4, r7, pc}

0800eba0 <ppp_init>:
/*** PRIVATE FUNCTION DEFINITIONS ***/
/************************************/

/* Initialize the PPP subsystem. */
int ppp_init(void)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	af00      	add	r7, sp, #0
#if PPPOS_SUPPORT
  LWIP_MEMPOOL_INIT(PPPOS_PCB);
 800eba4:	4805      	ldr	r0, [pc, #20]	; (800ebbc <ppp_init+0x1c>)
 800eba6:	f7f4 fa87 	bl	80030b8 <memp_init_pool>
#endif
#if LWIP_PPP_API && LWIP_MPU_COMPATIBLE
  LWIP_MEMPOOL_INIT(PPPAPI_MSG);
#endif

  LWIP_MEMPOOL_INIT(PPP_PCB);
 800ebaa:	4805      	ldr	r0, [pc, #20]	; (800ebc0 <ppp_init+0x20>)
 800ebac:	f7f4 fa84 	bl	80030b8 <memp_init_pool>

  /*
   * Initialize magic number generator now so that protocols may
   * use magic numbers in initialization.
   */
  magic_init();
 800ebb0:	f7ff fe7c 	bl	800e8ac <magic_init>

  return 0;
 800ebb4:	2300      	movs	r3, #0
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	bd80      	pop	{r7, pc}
 800ebba:	bf00      	nop
 800ebbc:	08013f50 	.word	0x08013f50
 800ebc0:	08013f30 	.word	0x08013f30

0800ebc4 <ppp_new>:
 * attempt to negotiate the LCP session.
 *
 * Return a new PPP connection control block pointer
 * on success or a null pointer on failure.
 */
ppp_pcb *ppp_new(struct netif *pppif, const struct link_callbacks *callbacks, void *link_ctx_cb, ppp_link_status_cb_fn link_status_cb, void *ctx_cb) {
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b08c      	sub	sp, #48	; 0x30
 800ebc8:	af04      	add	r7, sp, #16
 800ebca:	60f8      	str	r0, [r7, #12]
 800ebcc:	60b9      	str	r1, [r7, #8]
 800ebce:	607a      	str	r2, [r7, #4]
 800ebd0:	603b      	str	r3, [r7, #0]
  const struct protent *protp;
  int i;

  /* PPP is single-threaded: without a callback,
   * there is no way to know when the link is up. */
  if (link_status_cb == NULL) {
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d101      	bne.n	800ebdc <ppp_new+0x18>
    return NULL;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	e06a      	b.n	800ecb2 <ppp_new+0xee>
  }

  pcb = (ppp_pcb*)LWIP_MEMPOOL_ALLOC(PPP_PCB);
 800ebdc:	4837      	ldr	r0, [pc, #220]	; (800ecbc <ppp_new+0xf8>)
 800ebde:	f7f4 fad1 	bl	8003184 <memp_malloc_pool>
 800ebe2:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 800ebe4:	69bb      	ldr	r3, [r7, #24]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d101      	bne.n	800ebee <ppp_new+0x2a>
    return NULL;
 800ebea:	2300      	movs	r3, #0
 800ebec:	e061      	b.n	800ecb2 <ppp_new+0xee>
  }

  memset(pcb, 0, sizeof(ppp_pcb));
 800ebee:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800ebf2:	2100      	movs	r1, #0
 800ebf4:	69b8      	ldr	r0, [r7, #24]
 800ebf6:	f001 fef0 	bl	80109da <memset>

  /* default configuration */
#if PAP_SUPPORT
  pcb->settings.pap_timeout_time = UPAP_DEFTIMEOUT;
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	2206      	movs	r2, #6
 800ebfe:	731a      	strb	r2, [r3, #12]
  pcb->settings.pap_max_transmits = UPAP_DEFTRANSMITS;
 800ec00:	69bb      	ldr	r3, [r7, #24]
 800ec02:	220a      	movs	r2, #10
 800ec04:	735a      	strb	r2, [r3, #13]
  pcb->settings.eap_timeout_time = EAP_DEFTIMEOUT;
  pcb->settings.eap_max_transmits = EAP_DEFTRANSMITS;
#endif /* PPP_SERVER */
#endif /* EAP_SUPPORT */

  pcb->settings.lcp_loopbackfail = LCP_DEFLOOPBACKFAIL;
 800ec06:	69bb      	ldr	r3, [r7, #24]
 800ec08:	220a      	movs	r2, #10
 800ec0a:	749a      	strb	r2, [r3, #18]
  pcb->settings.lcp_echo_interval = LCP_ECHOINTERVAL;
 800ec0c:	69bb      	ldr	r3, [r7, #24]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	74da      	strb	r2, [r3, #19]
  pcb->settings.lcp_echo_fails = LCP_MAXECHOFAILS;
 800ec12:	69bb      	ldr	r3, [r7, #24]
 800ec14:	2203      	movs	r2, #3
 800ec16:	751a      	strb	r2, [r3, #20]

  pcb->settings.fsm_timeout_time = FSM_DEFTIMEOUT;
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	2206      	movs	r2, #6
 800ec1c:	739a      	strb	r2, [r3, #14]
  pcb->settings.fsm_max_conf_req_transmits = FSM_DEFMAXCONFREQS;
 800ec1e:	69bb      	ldr	r3, [r7, #24]
 800ec20:	220a      	movs	r2, #10
 800ec22:	73da      	strb	r2, [r3, #15]
  pcb->settings.fsm_max_term_transmits = FSM_DEFMAXTERMREQS;
 800ec24:	69bb      	ldr	r3, [r7, #24]
 800ec26:	2202      	movs	r2, #2
 800ec28:	741a      	strb	r2, [r3, #16]
  pcb->settings.fsm_max_nak_loops = FSM_DEFMAXNAKLOOPS;
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	2205      	movs	r2, #5
 800ec2e:	745a      	strb	r2, [r3, #17]

  pcb->netif = pppif;
 800ec30:	69bb      	ldr	r3, [r7, #24]
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	629a      	str	r2, [r3, #40]	; 0x28
  MIB2_INIT_NETIF(pppif, snmp_ifType_ppp, 0);
  if (!netif_add(pcb->netif,
 800ec36:	69bb      	ldr	r3, [r7, #24]
 800ec38:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	9302      	str	r3, [sp, #8]
 800ec3e:	4b20      	ldr	r3, [pc, #128]	; (800ecc0 <ppp_new+0xfc>)
 800ec40:	9301      	str	r3, [sp, #4]
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	9300      	str	r3, [sp, #0]
 800ec46:	4b1f      	ldr	r3, [pc, #124]	; (800ecc4 <ppp_new+0x100>)
 800ec48:	4a1f      	ldr	r2, [pc, #124]	; (800ecc8 <ppp_new+0x104>)
 800ec4a:	491e      	ldr	r1, [pc, #120]	; (800ecc4 <ppp_new+0x100>)
 800ec4c:	f7f4 fb5c 	bl	8003308 <netif_add>
 800ec50:	4603      	mov	r3, r0
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d105      	bne.n	800ec62 <ppp_new+0x9e>
#if LWIP_IPV4
                 IP4_ADDR_ANY4, IP4_ADDR_BROADCAST, IP4_ADDR_ANY4,
#endif /* LWIP_IPV4 */
                 (void *)pcb, ppp_netif_init_cb, NULL)) {
    LWIP_MEMPOOL_FREE(PPP_PCB, pcb);
 800ec56:	69b9      	ldr	r1, [r7, #24]
 800ec58:	4818      	ldr	r0, [pc, #96]	; (800ecbc <ppp_new+0xf8>)
 800ec5a:	f7f4 faf9 	bl	8003250 <memp_free_pool>
    PPPDEBUG(LOG_ERR, ("ppp_new: netif_add failed\n"));
    return NULL;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	e027      	b.n	800ecb2 <ppp_new+0xee>
  }
  /* FIXME: user application should be responsible to call netif_set_up(),
   * remove it for next release with allowed behavior break */
  netif_set_up(pcb->netif);
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7f4 fd1e 	bl	80036a8 <netif_set_up>

  pcb->link_cb = callbacks;
 800ec6c:	69bb      	ldr	r3, [r7, #24]
 800ec6e:	68ba      	ldr	r2, [r7, #8]
 800ec70:	619a      	str	r2, [r3, #24]
  pcb->link_ctx_cb = link_ctx_cb;
 800ec72:	69bb      	ldr	r3, [r7, #24]
 800ec74:	687a      	ldr	r2, [r7, #4]
 800ec76:	61da      	str	r2, [r3, #28]
  pcb->link_status_cb = link_status_cb;
 800ec78:	69bb      	ldr	r3, [r7, #24]
 800ec7a:	683a      	ldr	r2, [r7, #0]
 800ec7c:	621a      	str	r2, [r3, #32]
  pcb->ctx_cb = ctx_cb;
 800ec7e:	69bb      	ldr	r3, [r7, #24]
 800ec80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec82:	625a      	str	r2, [r3, #36]	; 0x24

  /*
   * Initialize each protocol.
   */
  for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800ec84:	2300      	movs	r3, #0
 800ec86:	61fb      	str	r3, [r7, #28]
 800ec88:	e006      	b.n	800ec98 <ppp_new+0xd4>
      (*protp->init)(pcb);
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	69b8      	ldr	r0, [r7, #24]
 800ec90:	4798      	blx	r3
  for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800ec92:	69fb      	ldr	r3, [r7, #28]
 800ec94:	3301      	adds	r3, #1
 800ec96:	61fb      	str	r3, [r7, #28]
 800ec98:	4a0c      	ldr	r2, [pc, #48]	; (800eccc <ppp_new+0x108>)
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eca0:	617b      	str	r3, [r7, #20]
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d1f0      	bne.n	800ec8a <ppp_new+0xc6>
  }

  new_phase(pcb, PPP_PHASE_DEAD);
 800eca8:	2100      	movs	r1, #0
 800ecaa:	69b8      	ldr	r0, [r7, #24]
 800ecac:	f000 f906 	bl	800eebc <new_phase>
  return pcb;
 800ecb0:	69bb      	ldr	r3, [r7, #24]
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3720      	adds	r7, #32
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	08013f30 	.word	0x08013f30
 800ecc0:	0800eaed 	.word	0x0800eaed
 800ecc4:	08013d78 	.word	0x08013d78
 800ecc8:	08013d7c 	.word	0x08013d7c
 800eccc:	08013f40 	.word	0x08013f40

0800ecd0 <ppp_start>:

/** Initiate LCP open request */
void ppp_start(ppp_pcb *pcb) {
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
#if VJ_SUPPORT
  vj_compress_init(&pcb->vj_comp);
#endif /* VJ_SUPPORT */

  /* Start protocol */
  new_phase(pcb, PPP_PHASE_ESTABLISH);
 800ecd8:	2106      	movs	r1, #6
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f000 f8ee 	bl	800eebc <new_phase>
  lcp_open(pcb);
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f7fd fcfb 	bl	800c6dc <lcp_open>
  lcp_lowerup(pcb);
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f7fd fd6a 	bl	800c7c0 <lcp_lowerup>
  PPPDEBUG(LOG_DEBUG, ("ppp_start[%d]: finished\n", pcb->netif->num));
}
 800ecec:	bf00      	nop
 800ecee:	3708      	adds	r7, #8
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <ppp_link_end>:
  pcb->err_code = PPPERR_OPEN;
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
}

/** Called when link is normally down (i.e. it was asked to end) */
void ppp_link_end(ppp_pcb *pcb) {
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b082      	sub	sp, #8
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  PPPDEBUG(LOG_DEBUG, ("ppp_link_end[%d]\n", pcb->netif->num));
  new_phase(pcb, PPP_PHASE_DEAD);
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f000 f8dc 	bl	800eebc <new_phase>
  if (pcb->err_code == PPPERR_NONE) {
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d103      	bne.n	800ed16 <ppp_link_end+0x22>
    pcb->err_code = PPPERR_CONNECT;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2206      	movs	r2, #6
 800ed12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6a1b      	ldr	r3, [r3, #32]
 800ed1a:	687a      	ldr	r2, [r7, #4]
 800ed1c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800ed20:	4611      	mov	r1, r2
 800ed22:	687a      	ldr	r2, [r7, #4]
 800ed24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	4798      	blx	r3
}
 800ed2a:	bf00      	nop
 800ed2c:	3708      	adds	r7, #8
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
	...

0800ed34 <ppp_input>:

/*
 * Pass the processed input packet to the appropriate handler.
 * This function and all handlers run in the context of the tcpip_thread
 */
void ppp_input(ppp_pcb *pcb, struct pbuf *pb) {
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b086      	sub	sp, #24
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	6039      	str	r1, [r7, #0]
  u16_t protocol;
#if PPP_DEBUG && PPP_PROTOCOLNAME
  const char *pname;
#endif /* PPP_DEBUG && PPP_PROTOCOLNAME */
  LWIP_ASSERT("pcb->phase >= PPP_PHASE_ESTABLISH && pcb->phase <= PPP_PHASE_TERMINATE",
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ed44:	2b05      	cmp	r3, #5
 800ed46:	d904      	bls.n	800ed52 <ppp_input+0x1e>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ed4e:	2b0b      	cmp	r3, #11
 800ed50:	d90b      	bls.n	800ed6a <ppp_input+0x36>
 800ed52:	4b45      	ldr	r3, [pc, #276]	; (800ee68 <ppp_input+0x134>)
 800ed54:	f240 3211 	movw	r2, #785	; 0x311
 800ed58:	4944      	ldr	r1, [pc, #272]	; (800ee6c <ppp_input+0x138>)
 800ed5a:	4845      	ldr	r0, [pc, #276]	; (800ee70 <ppp_input+0x13c>)
 800ed5c:	f001 fbf6 	bl	801054c <iprintf>
 800ed60:	2000      	movs	r0, #0
 800ed62:	f001 fcf5 	bl	8010750 <fflush>
 800ed66:	f001 fc3a 	bl	80105de <abort>
    pcb->phase >= PPP_PHASE_ESTABLISH && pcb->phase <= PPP_PHASE_TERMINATE);

  magic_randomize();
 800ed6a:	f7ff fdad 	bl	800e8c8 <magic_randomize>

  if (pb->len < 2) {
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	895b      	ldrh	r3, [r3, #10]
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	d969      	bls.n	800ee4a <ppp_input+0x116>
    PPPDEBUG(LOG_ERR, ("ppp_input[%d]: packet too short\n", pcb->netif->num));
    goto drop;
  }
  protocol = (((u8_t *)pb->payload)[0] << 8) | ((u8_t*)pb->payload)[1];
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	021b      	lsls	r3, r3, #8
 800ed7e:	b21a      	sxth	r2, r3
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	3301      	adds	r3, #1
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	b21b      	sxth	r3, r3
 800ed8a:	4313      	orrs	r3, r2
 800ed8c:	b21b      	sxth	r3, r3
 800ed8e:	827b      	strh	r3, [r7, #18]

#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "rcvd", (unsigned char *)pb->payload, pb->len);
#endif /* PRINTPKT_SUPPORT */

  pbuf_remove_header(pb, sizeof(protocol));
 800ed90:	2102      	movs	r1, #2
 800ed92:	6838      	ldr	r0, [r7, #0]
 800ed94:	f7f5 f806 	bl	8003da4 <pbuf_remove_header>
  MIB2_STATS_NETIF_ADD(pcb->netif, ifinoctets, pb->tot_len);

  /*
   * Toss all non-LCP packets unless LCP is OPEN.
   */
  if (protocol != PPP_LCP && pcb->lcp_fsm.state != PPP_FSM_OPENED) {
 800ed98:	8a7b      	ldrh	r3, [r7, #18]
 800ed9a:	f24c 0221 	movw	r2, #49185	; 0xc021
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d004      	beq.n	800edac <ppp_input+0x78>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800eda8:	2b09      	cmp	r3, #9
 800edaa:	d150      	bne.n	800ee4e <ppp_input+0x11a>

  /*
   * Until we get past the authentication phase, toss all packets
   * except LCP, LQR and authentication packets.
   */
  if (pcb->phase <= PPP_PHASE_AUTHENTICATE
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800edb2:	2b07      	cmp	r3, #7
 800edb4:	d809      	bhi.n	800edca <ppp_input+0x96>
   && !(protocol == PPP_LCP
 800edb6:	8a7b      	ldrh	r3, [r7, #18]
 800edb8:	f24c 0221 	movw	r2, #49185	; 0xc021
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d004      	beq.n	800edca <ppp_input+0x96>
 800edc0:	8a7b      	ldrh	r3, [r7, #18]
 800edc2:	f24c 0223 	movw	r2, #49187	; 0xc023
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d143      	bne.n	800ee52 <ppp_input+0x11e>
      pbuf_remove_header(pb, 2);
    }
  }
#endif /* CCP_SUPPORT */

  switch (protocol) {
 800edca:	8a7b      	ldrh	r3, [r7, #18]
 800edcc:	2b21      	cmp	r3, #33	; 0x21
 800edce:	d106      	bne.n	800edde <ppp_input+0xaa>

#if PPP_IPV4_SUPPORT
    case PPP_IP:            /* Internet Protocol */
      PPPDEBUG(LOG_INFO, ("ppp_input[%d]: ip in pbuf len=%d\n", pcb->netif->num, pb->tot_len));
      ip4_input(pb, pcb->netif);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edd4:	4619      	mov	r1, r3
 800edd6:	6838      	ldr	r0, [r7, #0]
 800edd8:	f7f3 fa60 	bl	800229c <ip4_input>
      return;
 800eddc:	e041      	b.n	800ee62 <ppp_input+0x12e>
      const struct protent *protp;

      /*
       * Upcall the proper protocol input routine.
       */
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800edde:	2300      	movs	r3, #0
 800ede0:	617b      	str	r3, [r7, #20]
 800ede2:	e019      	b.n	800ee18 <ppp_input+0xe4>
        if (protp->protocol == protocol) {
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	881b      	ldrh	r3, [r3, #0]
 800ede8:	8a7a      	ldrh	r2, [r7, #18]
 800edea:	429a      	cmp	r2, r3
 800edec:	d111      	bne.n	800ee12 <ppp_input+0xde>
          pb = pbuf_coalesce(pb, PBUF_RAW);
 800edee:	2100      	movs	r1, #0
 800edf0:	6838      	ldr	r0, [r7, #0]
 800edf2:	f7f5 fb43 	bl	800447c <pbuf_coalesce>
 800edf6:	6038      	str	r0, [r7, #0]
          if (pb->next != NULL) {
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d12a      	bne.n	800ee56 <ppp_input+0x122>
            PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_coalesce failed), len=%d\n", pcb->netif->num, pb->tot_len));
            goto drop;
          }
          (*protp->input)(pcb, (u8_t*)pb->payload, pb->len);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	689b      	ldr	r3, [r3, #8]
 800ee04:	683a      	ldr	r2, [r7, #0]
 800ee06:	6851      	ldr	r1, [r2, #4]
 800ee08:	683a      	ldr	r2, [r7, #0]
 800ee0a:	8952      	ldrh	r2, [r2, #10]
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	4798      	blx	r3
          goto out;
 800ee10:	e024      	b.n	800ee5c <ppp_input+0x128>
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	3301      	adds	r3, #1
 800ee16:	617b      	str	r3, [r7, #20]
 800ee18:	4a16      	ldr	r2, [pc, #88]	; (800ee74 <ppp_input+0x140>)
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee20:	60fb      	str	r3, [r7, #12]
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d1dd      	bne.n	800ede4 <ppp_input+0xb0>
      } else
#endif /* PPP_PROTOCOLNAME */
        ppp_warn(("Unsupported protocol 0x%x received", protocol));
#endif /* PPP_DEBUG */

      if (pbuf_add_header(pb, sizeof(protocol))) {
 800ee28:	2102      	movs	r1, #2
 800ee2a:	6838      	ldr	r0, [r7, #0]
 800ee2c:	f7f4 ffaa 	bl	8003d84 <pbuf_add_header>
 800ee30:	4603      	mov	r3, r0
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d111      	bne.n	800ee5a <ppp_input+0x126>
        PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_add_header failed)\n", pcb->netif->num));
        goto drop;
      }
      lcp_sprotrej(pcb, (u8_t*)pb->payload, pb->len);
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	6859      	ldr	r1, [r3, #4]
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	895b      	ldrh	r3, [r3, #10]
 800ee3e:	461a      	mov	r2, r3
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f7fd fe32 	bl	800caaa <lcp_sprotrej>
    }
    break;
 800ee46:	bf00      	nop
 800ee48:	e008      	b.n	800ee5c <ppp_input+0x128>
    goto drop;
 800ee4a:	bf00      	nop
 800ee4c:	e006      	b.n	800ee5c <ppp_input+0x128>
    goto drop;
 800ee4e:	bf00      	nop
 800ee50:	e004      	b.n	800ee5c <ppp_input+0x128>
    goto drop;
 800ee52:	bf00      	nop
 800ee54:	e002      	b.n	800ee5c <ppp_input+0x128>
            goto drop;
 800ee56:	bf00      	nop
 800ee58:	e000      	b.n	800ee5c <ppp_input+0x128>
        goto drop;
 800ee5a:	bf00      	nop
drop:
  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(pcb->netif, ifindiscards);

out:
  pbuf_free(pb);
 800ee5c:	6838      	ldr	r0, [r7, #0]
 800ee5e:	f7f5 f82b 	bl	8003eb8 <pbuf_free>
}
 800ee62:	3718      	adds	r7, #24
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}
 800ee68:	08013c68 	.word	0x08013c68
 800ee6c:	08013d24 	.word	0x08013d24
 800ee70:	08013cac 	.word	0x08013cac
 800ee74:	08013f40 	.word	0x08013f40

0800ee78 <ppp_write>:
 *
 * IPv4 and IPv6 packets from lwIP are sent, respectively,
 * with ppp_netif_output_ip4() and ppp_netif_output_ip6()
 * functions (which are callbacks of the netif PPP interface).
 */
err_t ppp_write(ppp_pcb *pcb, struct pbuf *p) {
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b082      	sub	sp, #8
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	6039      	str	r1, [r7, #0]
#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "sent", (unsigned char *)p->payload+2, p->len-2);
#endif /* PRINTPKT_SUPPORT */
  return pcb->link_cb->write(pcb, pcb->link_ctx_cb, p);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	699b      	ldr	r3, [r3, #24]
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	687a      	ldr	r2, [r7, #4]
 800ee8a:	69d1      	ldr	r1, [r2, #28]
 800ee8c:	683a      	ldr	r2, [r7, #0]
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	4798      	blx	r3
 800ee92:	4603      	mov	r3, r0
}
 800ee94:	4618      	mov	r0, r3
 800ee96:	3708      	adds	r7, #8
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}

0800ee9c <ppp_link_terminated>:

void ppp_link_terminated(ppp_pcb *pcb) {
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]\n", pcb->netif->num));
  pcb->link_cb->disconnect(pcb, pcb->link_ctx_cb);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	699b      	ldr	r3, [r3, #24]
 800eea8:	685b      	ldr	r3, [r3, #4]
 800eeaa:	687a      	ldr	r2, [r7, #4]
 800eeac:	69d2      	ldr	r2, [r2, #28]
 800eeae:	4611      	mov	r1, r2
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	4798      	blx	r3
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]: finished.\n", pcb->netif->num));
}
 800eeb4:	bf00      	nop
 800eeb6:	3708      	adds	r7, #8
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <new_phase>:
 */

/*
 * new_phase - signal the start of a new phase of pppd's operation.
 */
void new_phase(ppp_pcb *pcb, int p) {
 800eebc:	b480      	push	{r7}
 800eebe:	b083      	sub	sp, #12
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	6039      	str	r1, [r7, #0]
  pcb->phase = p;
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	b2da      	uxtb	r2, r3
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#if PPP_NOTIFY_PHASE
  if (pcb->notify_phase_cb != NULL) {
    pcb->notify_phase_cb(pcb, p, pcb->ctx_cb);
  }
#endif /* PPP_NOTIFY_PHASE */
}
 800eed0:	bf00      	nop
 800eed2:	370c      	adds	r7, #12
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr

0800eedc <ppp_send_config>:

/*
 * ppp_send_config - configure the transmit-side characteristics of
 * the ppp interface.
 */
int ppp_send_config(ppp_pcb *pcb, int mtu, u32_t accm, int pcomp, int accomp) {
 800eedc:	b590      	push	{r4, r7, lr}
 800eede:	b087      	sub	sp, #28
 800eee0:	af02      	add	r7, sp, #8
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	60b9      	str	r1, [r7, #8]
 800eee6:	607a      	str	r2, [r7, #4]
 800eee8:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(mtu);

  PPPDEBUG(LOG_INFO, ("ppp_send_config[%d]\n", pcb->netif->num));

  if (pcb->link_cb->send_config) {
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	699b      	ldr	r3, [r3, #24]
 800eeee:	695b      	ldr	r3, [r3, #20]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d00a      	beq.n	800ef0a <ppp_send_config+0x2e>
    pcb->link_cb->send_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	699b      	ldr	r3, [r3, #24]
 800eef8:	695c      	ldr	r4, [r3, #20]
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	69d9      	ldr	r1, [r3, #28]
 800eefe:	6a3b      	ldr	r3, [r7, #32]
 800ef00:	9300      	str	r3, [sp, #0]
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	68f8      	ldr	r0, [r7, #12]
 800ef08:	47a0      	blx	r4
  }

  return 0;
 800ef0a:	2300      	movs	r3, #0
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3714      	adds	r7, #20
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd90      	pop	{r4, r7, pc}

0800ef14 <ppp_recv_config>:

/*
 * ppp_recv_config - configure the receive-side characteristics of
 * the ppp interface.
 */
int ppp_recv_config(ppp_pcb *pcb, int mru, u32_t accm, int pcomp, int accomp) {
 800ef14:	b590      	push	{r4, r7, lr}
 800ef16:	b087      	sub	sp, #28
 800ef18:	af02      	add	r7, sp, #8
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	60b9      	str	r1, [r7, #8]
 800ef1e:	607a      	str	r2, [r7, #4]
 800ef20:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(mru);

  PPPDEBUG(LOG_INFO, ("ppp_recv_config[%d]\n", pcb->netif->num));

  if (pcb->link_cb->recv_config) {
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	699b      	ldr	r3, [r3, #24]
 800ef26:	699b      	ldr	r3, [r3, #24]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d00a      	beq.n	800ef42 <ppp_recv_config+0x2e>
    pcb->link_cb->recv_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	699b      	ldr	r3, [r3, #24]
 800ef30:	699c      	ldr	r4, [r3, #24]
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	69d9      	ldr	r1, [r3, #28]
 800ef36:	6a3b      	ldr	r3, [r7, #32]
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	68f8      	ldr	r0, [r7, #12]
 800ef40:	47a0      	blx	r4
  }

  return 0;
 800ef42:	2300      	movs	r3, #0
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3714      	adds	r7, #20
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd90      	pop	{r4, r7, pc}

0800ef4c <sifaddr>:

#if PPP_IPV4_SUPPORT
/*
 * sifaddr - Config the interface IP addresses and netmask.
 */
int sifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr, u32_t netmask) {
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b088      	sub	sp, #32
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	60b9      	str	r1, [r7, #8]
 800ef56:	607a      	str	r2, [r7, #4]
 800ef58:	603b      	str	r3, [r7, #0]
  ip4_addr_t ip, nm, gw;

  ip4_addr_set_u32(&ip, our_adr);
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	61fb      	str	r3, [r7, #28]
  ip4_addr_set_u32(&nm, netmask);
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	61bb      	str	r3, [r7, #24]
  ip4_addr_set_u32(&gw, his_adr);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	617b      	str	r3, [r7, #20]
  netif_set_addr(pcb->netif, &ip, &nm, &gw);
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ef6a:	f107 0314 	add.w	r3, r7, #20
 800ef6e:	f107 0218 	add.w	r2, r7, #24
 800ef72:	f107 011c 	add.w	r1, r7, #28
 800ef76:	f7f4 fb3d 	bl	80035f4 <netif_set_addr>
  return 1;
 800ef7a:	2301      	movs	r3, #1
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3720      	adds	r7, #32
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <cifaddr>:
/********************************************************************
 *
 * cifaddr - Clear the interface IP addresses, and delete routes
 * through the interface if possible.
 */
int cifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr) {
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	60f8      	str	r0, [r7, #12]
 800ef8c:	60b9      	str	r1, [r7, #8]
 800ef8e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(our_adr);
  LWIP_UNUSED_ARG(his_adr);

  netif_set_addr(pcb->netif, IP4_ADDR_ANY4, IP4_ADDR_BROADCAST, IP4_ADDR_ANY4);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ef94:	4b04      	ldr	r3, [pc, #16]	; (800efa8 <cifaddr+0x24>)
 800ef96:	4a05      	ldr	r2, [pc, #20]	; (800efac <cifaddr+0x28>)
 800ef98:	4903      	ldr	r1, [pc, #12]	; (800efa8 <cifaddr+0x24>)
 800ef9a:	f7f4 fb2b 	bl	80035f4 <netif_set_addr>
  return 1;
 800ef9e:	2301      	movs	r3, #1
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3710      	adds	r7, #16
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}
 800efa8:	08013d78 	.word	0x08013d78
 800efac:	08013d7c 	.word	0x08013d7c

0800efb0 <sifup>:
#endif /* VJ_SUPPORT */

/*
 * sifup - Config the interface up and enable IP packets to pass.
 */
int sifup(ppp_pcb *pcb) {
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  pcb->if4_up = 1;
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800efbe:	f043 0308 	orr.w	r3, r3, #8
 800efc2:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  pcb->err_code = PPPERR_NONE;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2200      	movs	r2, #0
 800efca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif_set_link_up(pcb->netif);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7f4 fbc6 	bl	8003764 <netif_set_link_up>

  PPPDEBUG(LOG_DEBUG, ("sifup[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6a1b      	ldr	r3, [r3, #32]
 800efdc:	687a      	ldr	r2, [r7, #4]
 800efde:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800efe2:	4611      	mov	r1, r2
 800efe4:	687a      	ldr	r2, [r7, #4]
 800efe6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	4798      	blx	r3
  return 1;
 800efec:	2301      	movs	r3, #1
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3708      	adds	r7, #8
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}

0800eff6 <sifdown>:
/********************************************************************
 *
 * sifdown - Disable the indicated protocol and config the interface
 *           down if there are no remaining protocols.
 */
int sifdown(ppp_pcb *pcb) {
 800eff6:	b580      	push	{r7, lr}
 800eff8:	b082      	sub	sp, #8
 800effa:	af00      	add	r7, sp, #0
 800effc:	6078      	str	r0, [r7, #4]

  pcb->if4_up = 0;
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800f004:	f36f 03c3 	bfc	r3, #3, #1
 800f008:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   /* set the interface down if IPv6 is down as well */
   && !pcb->if6_up
#endif /* PPP_IPV6_SUPPORT */
  ) {
    /* make sure the netif link callback is called */
    netif_set_link_down(pcb->netif);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f010:	4618      	mov	r0, r3
 800f012:	f7f4 fbd3 	bl	80037bc <netif_set_link_down>
  }
  PPPDEBUG(LOG_DEBUG, ("sifdown[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
  return 1;
 800f016:	2301      	movs	r3, #1
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <get_mask>:
 * Here we scan through the system's list of interfaces, looking for
 * any non-point-to-point interfaces which might appear to be on the same
 * network as `addr'.  If we find any, we OR in their netmask to the
 * user-specified netmask.
 */
u32_t get_mask(u32_t addr) {
 800f020:	b480      	push	{r7}
 800f022:	b083      	sub	sp, #12
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
   */
  /* return mask; */
  return mask;
#endif /* 0 */
  LWIP_UNUSED_ARG(addr);
  return IPADDR_BROADCAST;
 800f028:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	370c      	adds	r7, #12
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr

0800f038 <ppp_netif_set_mtu>:
#endif /* DEMAND_SUPPORT */

/*
 * ppp_netif_set_mtu - set the MTU on the PPP network interface.
 */
void ppp_netif_set_mtu(ppp_pcb *pcb, int mtu) {
 800f038:	b480      	push	{r7}
 800f03a:	b083      	sub	sp, #12
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	6039      	str	r1, [r7, #0]

  pcb->netif->mtu = mtu;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f046:	683a      	ldr	r2, [r7, #0]
 800f048:	b292      	uxth	r2, r2
 800f04a:	841a      	strh	r2, [r3, #32]
#if PPP_IPV6_SUPPORT && LWIP_ND6_ALLOW_RA_UPDATES
  pcb->netif->mtu6 = mtu;
#endif /* PPP_IPV6_SUPPORT && LWIP_ND6_ALLOW_RA_UPDATES */
  PPPDEBUG(LOG_INFO, ("ppp_netif_set_mtu[%d]: mtu=%d\n", pcb->netif->num, mtu));
}
 800f04c:	bf00      	nop
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <pppos_create>:
 *
 * Return 0 on success, an error code on failure.
 */
ppp_pcb *pppos_create(struct netif *pppif, pppos_output_cb_fn output_cb,
       ppp_link_status_cb_fn link_status_cb, void *ctx_cb)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b088      	sub	sp, #32
 800f05c:	af02      	add	r7, sp, #8
 800f05e:	60f8      	str	r0, [r7, #12]
 800f060:	60b9      	str	r1, [r7, #8]
 800f062:	607a      	str	r2, [r7, #4]
 800f064:	603b      	str	r3, [r7, #0]
  pppos_pcb *pppos;
  ppp_pcb *ppp;
  LWIP_ASSERT_CORE_LOCKED();

  pppos = (pppos_pcb *)LWIP_MEMPOOL_ALLOC(PPPOS_PCB);
 800f066:	4815      	ldr	r0, [pc, #84]	; (800f0bc <pppos_create+0x64>)
 800f068:	f7f4 f88c 	bl	8003184 <memp_malloc_pool>
 800f06c:	6178      	str	r0, [r7, #20]
  if (pppos == NULL) {
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d101      	bne.n	800f078 <pppos_create+0x20>
    return NULL;
 800f074:	2300      	movs	r3, #0
 800f076:	e01d      	b.n	800f0b4 <pppos_create+0x5c>
  }

  ppp = ppp_new(pppif, &pppos_callbacks, pppos, link_status_cb, ctx_cb);
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	9300      	str	r3, [sp, #0]
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	697a      	ldr	r2, [r7, #20]
 800f080:	490f      	ldr	r1, [pc, #60]	; (800f0c0 <pppos_create+0x68>)
 800f082:	68f8      	ldr	r0, [r7, #12]
 800f084:	f7ff fd9e 	bl	800ebc4 <ppp_new>
 800f088:	6138      	str	r0, [r7, #16]
  if (ppp == NULL) {
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d105      	bne.n	800f09c <pppos_create+0x44>
    LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
 800f090:	6979      	ldr	r1, [r7, #20]
 800f092:	480a      	ldr	r0, [pc, #40]	; (800f0bc <pppos_create+0x64>)
 800f094:	f7f4 f8dc 	bl	8003250 <memp_free_pool>
    return NULL;
 800f098:	2300      	movs	r3, #0
 800f09a:	e00b      	b.n	800f0b4 <pppos_create+0x5c>
  }

  memset(pppos, 0, sizeof(pppos_pcb));
 800f09c:	2260      	movs	r2, #96	; 0x60
 800f09e:	2100      	movs	r1, #0
 800f0a0:	6978      	ldr	r0, [r7, #20]
 800f0a2:	f001 fc9a 	bl	80109da <memset>
  pppos->ppp = ppp;
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	693a      	ldr	r2, [r7, #16]
 800f0aa:	601a      	str	r2, [r3, #0]
  pppos->output_cb = output_cb;
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	68ba      	ldr	r2, [r7, #8]
 800f0b0:	605a      	str	r2, [r3, #4]
  return ppp;
 800f0b2:	693b      	ldr	r3, [r7, #16]
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3718      	adds	r7, #24
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}
 800f0bc:	08013f50 	.word	0x08013f50
 800f0c0:	08013f60 	.word	0x08013f60

0800f0c4 <pppos_write>:

/* Called by PPP core */
static err_t
pppos_write(ppp_pcb *ppp, void *ctx, struct pbuf *p)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b08c      	sub	sp, #48	; 0x30
 800f0c8:	af02      	add	r7, sp, #8
 800f0ca:	60f8      	str	r0, [r7, #12]
 800f0cc:	60b9      	str	r1, [r7, #8]
 800f0ce:	607a      	str	r2, [r7, #4]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	61fb      	str	r3, [r7, #28]
  err_t err;
  LWIP_UNUSED_ARG(ppp);

  /* Grab an output buffer. Assume PBUF_POOL_BUFSIZE is an acceptable
   * chunk size for Tx as well. */
  nb = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_RAM);
 800f0d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f0d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f0dc:	2000      	movs	r0, #0
 800f0de:	f7f4 fc4d 	bl	800397c <pbuf_alloc>
 800f0e2:	61b8      	str	r0, [r7, #24]
  if (nb == NULL) {
 800f0e4:	69bb      	ldr	r3, [r7, #24]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d105      	bne.n	800f0f6 <pppos_write+0x32>
    PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: alloc fail\n", ppp->netif->num));
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
    pbuf_free(p);
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f7f4 fee4 	bl	8003eb8 <pbuf_free>
    return ERR_MEM;
 800f0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f4:	e051      	b.n	800f19a <pppos_write+0xd6>
  }

  /* Empty the buffer */
  nb->len = 0;
 800f0f6:	69bb      	ldr	r3, [r7, #24]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	815a      	strh	r2, [r3, #10]
  /* Set nb->tot_len to actual payload length */
  nb->tot_len = p->len;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	895a      	ldrh	r2, [r3, #10]
 800f100:	69bb      	ldr	r3, [r7, #24]
 800f102:	811a      	strh	r2, [r3, #8]

  /* If the link has been idle, we'll send a fresh flag character to
   * flush any noise. */
  err = ERR_OK;
 800f104:	2300      	movs	r3, #0
 800f106:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
 800f10a:	f7f2 fb03 	bl	8001714 <sys_now>
 800f10e:	4602      	mov	r2, r0
 800f110:	69fb      	ldr	r3, [r7, #28]
 800f112:	689b      	ldr	r3, [r3, #8]
 800f114:	1ad3      	subs	r3, r2, r3
 800f116:	2b63      	cmp	r3, #99	; 0x63
 800f118:	d90d      	bls.n	800f136 <pppos_write+0x72>
    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 800f11a:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 800f11e:	2300      	movs	r3, #0
 800f120:	9301      	str	r3, [sp, #4]
 800f122:	2300      	movs	r3, #0
 800f124:	9300      	str	r3, [sp, #0]
 800f126:	237e      	movs	r3, #126	; 0x7e
 800f128:	69ba      	ldr	r2, [r7, #24]
 800f12a:	69f8      	ldr	r0, [r7, #28]
 800f12c:	f000 fbb2 	bl	800f894 <pppos_output_append>
 800f130:	4603      	mov	r3, r0
 800f132:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  }

  /* Load output buffer. */
  fcs_out = PPP_INITFCS;
 800f136:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f13a:	82fb      	strh	r3, [r7, #22]
  s = (u8_t*)p->payload;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	627b      	str	r3, [r7, #36]	; 0x24
  n = p->len;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	895b      	ldrh	r3, [r3, #10]
 800f146:	847b      	strh	r3, [r7, #34]	; 0x22
  while (n-- > 0) {
 800f148:	e012      	b.n	800f170 <pppos_write+0xac>
    err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 800f14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14c:	1c5a      	adds	r2, r3, #1
 800f14e:	627a      	str	r2, [r7, #36]	; 0x24
 800f150:	781a      	ldrb	r2, [r3, #0]
 800f152:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 800f156:	f107 0316 	add.w	r3, r7, #22
 800f15a:	9301      	str	r3, [sp, #4]
 800f15c:	2301      	movs	r3, #1
 800f15e:	9300      	str	r3, [sp, #0]
 800f160:	4613      	mov	r3, r2
 800f162:	69ba      	ldr	r2, [r7, #24]
 800f164:	69f8      	ldr	r0, [r7, #28]
 800f166:	f000 fb95 	bl	800f894 <pppos_output_append>
 800f16a:	4603      	mov	r3, r0
 800f16c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  while (n-- > 0) {
 800f170:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f172:	1e5a      	subs	r2, r3, #1
 800f174:	847a      	strh	r2, [r7, #34]	; 0x22
 800f176:	2b00      	cmp	r3, #0
 800f178:	d1e7      	bne.n	800f14a <pppos_write+0x86>
  }

  err = pppos_output_last(pppos, err, nb, &fcs_out);
 800f17a:	f107 0316 	add.w	r3, r7, #22
 800f17e:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 800f182:	69ba      	ldr	r2, [r7, #24]
 800f184:	69f8      	ldr	r0, [r7, #28]
 800f186:	f000 fc0b 	bl	800f9a0 <pppos_output_last>
 800f18a:	4603      	mov	r3, r0
 800f18c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (err == ERR_OK) {
    PPPDEBUG(LOG_INFO, ("pppos_write[%d]: len=%d\n", ppp->netif->num, p->len));
  } else {
    PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: output failed len=%d\n", ppp->netif->num, p->len));
  }
  pbuf_free(p);
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f7f4 fe91 	bl	8003eb8 <pbuf_free>
  return err;
 800f196:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3728      	adds	r7, #40	; 0x28
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}

0800f1a2 <pppos_netif_output>:

/* Called by PPP core */
static err_t
pppos_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *pb, u16_t protocol)
{
 800f1a2:	b580      	push	{r7, lr}
 800f1a4:	b08c      	sub	sp, #48	; 0x30
 800f1a6:	af02      	add	r7, sp, #8
 800f1a8:	60f8      	str	r0, [r7, #12]
 800f1aa:	60b9      	str	r1, [r7, #8]
 800f1ac:	607a      	str	r2, [r7, #4]
 800f1ae:	807b      	strh	r3, [r7, #2]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	61bb      	str	r3, [r7, #24]
  err_t err;
  LWIP_UNUSED_ARG(ppp);

  /* Grab an output buffer. Assume PBUF_POOL_BUFSIZE is an acceptable
   * chunk size for Tx as well. */
  nb = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_RAM);
 800f1b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f1b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f1bc:	2000      	movs	r0, #0
 800f1be:	f7f4 fbdd 	bl	800397c <pbuf_alloc>
 800f1c2:	6178      	str	r0, [r7, #20]
  if (nb == NULL) {
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d102      	bne.n	800f1d0 <pppos_netif_output+0x2e>
    PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: alloc fail\n", ppp->netif->num));
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
    return ERR_MEM;
 800f1ca:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ce:	e0ac      	b.n	800f32a <pppos_netif_output+0x188>
  }

  /* Empty the buffer */
  nb->len = 0;
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	815a      	strh	r2, [r3, #10]
  /* Set nb->tot_len to actual payload length */
  nb->tot_len = pb->tot_len;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	891a      	ldrh	r2, [r3, #8]
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	811a      	strh	r2, [r3, #8]

  /* If the link has been idle, we'll send a fresh flag character to
   * flush any noise. */
  err = ERR_OK;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
 800f1e4:	f7f2 fa96 	bl	8001714 <sys_now>
 800f1e8:	4602      	mov	r2, r0
 800f1ea:	69bb      	ldr	r3, [r7, #24]
 800f1ec:	689b      	ldr	r3, [r3, #8]
 800f1ee:	1ad3      	subs	r3, r2, r3
 800f1f0:	2b63      	cmp	r3, #99	; 0x63
 800f1f2:	d90d      	bls.n	800f210 <pppos_netif_output+0x6e>
    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 800f1f4:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	9301      	str	r3, [sp, #4]
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	9300      	str	r3, [sp, #0]
 800f200:	237e      	movs	r3, #126	; 0x7e
 800f202:	697a      	ldr	r2, [r7, #20]
 800f204:	69b8      	ldr	r0, [r7, #24]
 800f206:	f000 fb45 	bl	800f894 <pppos_output_append>
 800f20a:	4603      	mov	r3, r0
 800f20c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }

  fcs_out = PPP_INITFCS;
 800f210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f214:	827b      	strh	r3, [r7, #18]
  if (!pppos->accomp) {
 800f216:	69bb      	ldr	r3, [r7, #24]
 800f218:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f21c:	f003 0304 	and.w	r3, r3, #4
 800f220:	b2db      	uxtb	r3, r3
 800f222:	2b00      	cmp	r3, #0
 800f224:	d11d      	bne.n	800f262 <pppos_netif_output+0xc0>
    err = pppos_output_append(pppos, err,  nb, PPP_ALLSTATIONS, 1, &fcs_out);
 800f226:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 800f22a:	f107 0312 	add.w	r3, r7, #18
 800f22e:	9301      	str	r3, [sp, #4]
 800f230:	2301      	movs	r3, #1
 800f232:	9300      	str	r3, [sp, #0]
 800f234:	23ff      	movs	r3, #255	; 0xff
 800f236:	697a      	ldr	r2, [r7, #20]
 800f238:	69b8      	ldr	r0, [r7, #24]
 800f23a:	f000 fb2b 	bl	800f894 <pppos_output_append>
 800f23e:	4603      	mov	r3, r0
 800f240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    err = pppos_output_append(pppos, err,  nb, PPP_UI, 1, &fcs_out);
 800f244:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 800f248:	f107 0312 	add.w	r3, r7, #18
 800f24c:	9301      	str	r3, [sp, #4]
 800f24e:	2301      	movs	r3, #1
 800f250:	9300      	str	r3, [sp, #0]
 800f252:	2303      	movs	r3, #3
 800f254:	697a      	ldr	r2, [r7, #20]
 800f256:	69b8      	ldr	r0, [r7, #24]
 800f258:	f000 fb1c 	bl	800f894 <pppos_output_append>
 800f25c:	4603      	mov	r3, r0
 800f25e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
  if (!pppos->pcomp || protocol > 0xFF) {
 800f262:	69bb      	ldr	r3, [r7, #24]
 800f264:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f268:	f003 0302 	and.w	r3, r3, #2
 800f26c:	b2db      	uxtb	r3, r3
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d002      	beq.n	800f278 <pppos_netif_output+0xd6>
 800f272:	887b      	ldrh	r3, [r7, #2]
 800f274:	2bff      	cmp	r3, #255	; 0xff
 800f276:	d912      	bls.n	800f29e <pppos_netif_output+0xfc>
    err = pppos_output_append(pppos, err,  nb, (protocol >> 8) & 0xFF, 1, &fcs_out);
 800f278:	887b      	ldrh	r3, [r7, #2]
 800f27a:	0a1b      	lsrs	r3, r3, #8
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	b2da      	uxtb	r2, r3
 800f280:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 800f284:	f107 0312 	add.w	r3, r7, #18
 800f288:	9301      	str	r3, [sp, #4]
 800f28a:	2301      	movs	r3, #1
 800f28c:	9300      	str	r3, [sp, #0]
 800f28e:	4613      	mov	r3, r2
 800f290:	697a      	ldr	r2, [r7, #20]
 800f292:	69b8      	ldr	r0, [r7, #24]
 800f294:	f000 fafe 	bl	800f894 <pppos_output_append>
 800f298:	4603      	mov	r3, r0
 800f29a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
  err = pppos_output_append(pppos, err,  nb, protocol & 0xFF, 1, &fcs_out);
 800f29e:	887b      	ldrh	r3, [r7, #2]
 800f2a0:	b2da      	uxtb	r2, r3
 800f2a2:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 800f2a6:	f107 0312 	add.w	r3, r7, #18
 800f2aa:	9301      	str	r3, [sp, #4]
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	9300      	str	r3, [sp, #0]
 800f2b0:	4613      	mov	r3, r2
 800f2b2:	697a      	ldr	r2, [r7, #20]
 800f2b4:	69b8      	ldr	r0, [r7, #24]
 800f2b6:	f000 faed 	bl	800f894 <pppos_output_append>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Load packet. */
  for(p = pb; p; p = p->next) {
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	627b      	str	r3, [r7, #36]	; 0x24
 800f2c4:	e021      	b.n	800f30a <pppos_netif_output+0x168>
    u16_t n = p->len;
 800f2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c8:	895b      	ldrh	r3, [r3, #10]
 800f2ca:	843b      	strh	r3, [r7, #32]
    u8_t *s = (u8_t*)p->payload;
 800f2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	61fb      	str	r3, [r7, #28]

    while (n-- > 0) {
 800f2d2:	e012      	b.n	800f2fa <pppos_netif_output+0x158>
      err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 800f2d4:	69fb      	ldr	r3, [r7, #28]
 800f2d6:	1c5a      	adds	r2, r3, #1
 800f2d8:	61fa      	str	r2, [r7, #28]
 800f2da:	781a      	ldrb	r2, [r3, #0]
 800f2dc:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 800f2e0:	f107 0312 	add.w	r3, r7, #18
 800f2e4:	9301      	str	r3, [sp, #4]
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	9300      	str	r3, [sp, #0]
 800f2ea:	4613      	mov	r3, r2
 800f2ec:	697a      	ldr	r2, [r7, #20]
 800f2ee:	69b8      	ldr	r0, [r7, #24]
 800f2f0:	f000 fad0 	bl	800f894 <pppos_output_append>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while (n-- > 0) {
 800f2fa:	8c3b      	ldrh	r3, [r7, #32]
 800f2fc:	1e5a      	subs	r2, r3, #1
 800f2fe:	843a      	strh	r2, [r7, #32]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d1e7      	bne.n	800f2d4 <pppos_netif_output+0x132>
  for(p = pb; p; p = p->next) {
 800f304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	627b      	str	r3, [r7, #36]	; 0x24
 800f30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d1da      	bne.n	800f2c6 <pppos_netif_output+0x124>
    }
  }

  err = pppos_output_last(pppos, err, nb, &fcs_out);
 800f310:	f107 0312 	add.w	r3, r7, #18
 800f314:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 800f318:	697a      	ldr	r2, [r7, #20]
 800f31a:	69b8      	ldr	r0, [r7, #24]
 800f31c:	f000 fb40 	bl	800f9a0 <pppos_output_last>
 800f320:	4603      	mov	r3, r0
 800f322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err == ERR_OK) {
    PPPDEBUG(LOG_INFO, ("pppos_netif_output[%d]: proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
  } else {
    PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: output failed proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
  }
  return err;
 800f326:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3728      	adds	r7, #40	; 0x28
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}

0800f332 <pppos_connect>:

static void
pppos_connect(ppp_pcb *ppp, void *ctx)
{
 800f332:	b580      	push	{r7, lr}
 800f334:	b084      	sub	sp, #16
 800f336:	af00      	add	r7, sp, #0
 800f338:	6078      	str	r0, [r7, #4]
 800f33a:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	60fb      	str	r3, [r7, #12]
  /* input pbuf left over from last session? */
  pppos_input_free_current_packet(pppos);
#endif /* PPP_INPROC_IRQ_SAFE */

  /* reset PPPoS control block to its initial state */
  memset(&pppos->last_xmit, 0, sizeof(pppos_pcb) - offsetof(pppos_pcb, last_xmit));
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	3308      	adds	r3, #8
 800f344:	2258      	movs	r2, #88	; 0x58
 800f346:	2100      	movs	r1, #0
 800f348:	4618      	mov	r0, r3
 800f34a:	f001 fb46 	bl	80109da <memset>

  /*
   * Default the in and out accm so that escape and flag characters
   * are always escaped.
   */
  pppos->in_accm[15] = 0x60; /* no need to protect since RX is not running */
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2260      	movs	r2, #96	; 0x60
 800f352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  pppos->out_accm[15] = 0x60;
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2260      	movs	r2, #96	; 0x60
 800f35a:	76da      	strb	r2, [r3, #27]
  PPPOS_PROTECT(lev);
  pppos->open = 1;
 800f35c:	68fa      	ldr	r2, [r7, #12]
 800f35e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800f362:	f043 0301 	orr.w	r3, r3, #1
 800f366:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

  /*
   * Start the connection and handle incoming events (packet or timeout).
   */
  PPPDEBUG(LOG_INFO, ("pppos_connect: unit %d: connecting\n", ppp->netif->num));
  ppp_start(ppp); /* notify upper layers */
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f7ff fcb0 	bl	800ecd0 <ppp_start>
}
 800f370:	bf00      	nop
 800f372:	3710      	adds	r7, #16
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <pppos_disconnect>:
}
#endif /* PPP_SERVER */

static void
pppos_disconnect(ppp_pcb *ppp, void *ctx)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b084      	sub	sp, #16
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	60fb      	str	r3, [r7, #12]
  PPPOS_DECL_PROTECT(lev);

  PPPOS_PROTECT(lev);
  pppos->open = 0;
 800f386:	68fa      	ldr	r2, [r7, #12]
 800f388:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800f38c:	f36f 0300 	bfc	r3, #0, #1
 800f390:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
   * pppos_input_free_current_packet() here because
   * rx IRQ might still call pppos_input().
   */
#if !PPP_INPROC_IRQ_SAFE
  /* input pbuf left ? */
  pppos_input_free_current_packet(pppos);
 800f394:	68f8      	ldr	r0, [r7, #12]
 800f396:	f000 fa4b 	bl	800f830 <pppos_input_free_current_packet>
#endif /* !PPP_INPROC_IRQ_SAFE */

  ppp_link_end(ppp); /* notify upper layers */
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f7ff fcaa 	bl	800ecf4 <ppp_link_end>
}
 800f3a0:	bf00      	nop
 800f3a2:	3710      	adds	r7, #16
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <pppos_destroy>:

static err_t
pppos_destroy(ppp_pcb *ppp, void *ctx)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	60fb      	str	r3, [r7, #12]
#if PPP_INPROC_IRQ_SAFE
  /* input pbuf left ? */
  pppos_input_free_current_packet(pppos);
#endif /* PPP_INPROC_IRQ_SAFE */

  LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
 800f3b6:	68f9      	ldr	r1, [r7, #12]
 800f3b8:	4803      	ldr	r0, [pc, #12]	; (800f3c8 <pppos_destroy+0x20>)
 800f3ba:	f7f3 ff49 	bl	8003250 <memp_free_pool>
  return ERR_OK;
 800f3be:	2300      	movs	r3, #0
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3710      	adds	r7, #16
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}
 800f3c8:	08013f50 	.word	0x08013f50

0800f3cc <pppos_input>:
 * @param s received data
 * @param l length of received data
 */
void
pppos_input(ppp_pcb *ppp, const void *s, int l)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b08c      	sub	sp, #48	; 0x30
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	60f8      	str	r0, [r7, #12]
 800f3d4:	60b9      	str	r1, [r7, #8]
 800f3d6:	607a      	str	r2, [r7, #4]
  pppos_pcb *pppos = (pppos_pcb *)ppp->link_ctx_cb;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	69db      	ldr	r3, [r3, #28]
 800f3dc:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *next_pbuf;
  const u8_t *s_u8 = (const u8_t *)s;
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Don't even bother parsing data if we are disconnected.
   * Added to that, ppp_input must never be called if the upper layer is down.
   */
  PPPOS_PROTECT(lev);
  if (!pppos->open) {
 800f3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f3e8:	f003 0301 	and.w	r3, r3, #1
 800f3ec:	b2db      	uxtb	r3, r3
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	f000 81b6 	beq.w	800f760 <pppos_input+0x394>
    return;
  }
  PPPOS_UNPROTECT(lev);

  PPPDEBUG(LOG_DEBUG, ("pppos_input[%d]: got %d bytes\n", ppp->netif->num, l));
  while (l-- > 0) {
 800f3f4:	e1ad      	b.n	800f752 <pppos_input+0x386>
    cur_char = *s_u8++;
 800f3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f8:	1c5a      	adds	r2, r3, #1
 800f3fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    PPPOS_PROTECT(lev);
    escaped = ESCAPE_P(pppos->in_accm, cur_char);
 800f402:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f406:	08db      	lsrs	r3, r3, #3
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	461a      	mov	r2, r3
 800f40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40e:	4413      	add	r3, r2
 800f410:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f414:	b25a      	sxtb	r2, r3
 800f416:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f41a:	f003 0307 	and.w	r3, r3, #7
 800f41e:	2101      	movs	r1, #1
 800f420:	fa01 f303 	lsl.w	r3, r1, r3
 800f424:	b25b      	sxtb	r3, r3
 800f426:	4013      	ands	r3, r2
 800f428:	b25b      	sxtb	r3, r3
 800f42a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    PPPOS_UNPROTECT(lev);

    /* Handle special characters. */
    if (escaped) {
 800f42e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f432:	2b00      	cmp	r3, #0
 800f434:	f000 8094 	beq.w	800f560 <pppos_input+0x194>
      /* Check for escape sequences. */
      /* XXX Note that this does not handle an escaped 0x5d character which
       * would appear as an escape character.  Since this is an ASCII ']'
       * and there is no reason that I know of to escape it, I won't complicate
       * the code to handle this case. GLL */
      if (cur_char == PPP_ESCAPE) {
 800f438:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f43c:	2b7d      	cmp	r3, #125	; 0x7d
 800f43e:	d104      	bne.n	800f44a <pppos_input+0x7e>
        pppos->in_escaped = 1;
 800f440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f442:	2201      	movs	r2, #1
 800f444:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800f448:	e183      	b.n	800f752 <pppos_input+0x386>
      /* Check for the flag character. */
      } else if (cur_char == PPP_FLAG) {
 800f44a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f44e:	2b7e      	cmp	r3, #126	; 0x7e
 800f450:	f040 817f 	bne.w	800f752 <pppos_input+0x386>
        /* If this is just an extra flag character, ignore it. */
        if (pppos->in_state <= PDADDRESS) {
 800f454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f456:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f45a:	2b01      	cmp	r3, #1
 800f45c:	d972      	bls.n	800f544 <pppos_input+0x178>
          /* ignore it */;
        /* If we haven't received the packet header, drop what has come in. */
        } else if (pppos->in_state < PDDATA) {
 800f45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f460:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f464:	2b04      	cmp	r3, #4
 800f466:	d803      	bhi.n	800f470 <pppos_input+0xa4>
          PPPDEBUG(LOG_WARNING,
                   ("pppos_input[%d]: Dropping incomplete packet %d\n",
                    ppp->netif->num, pppos->in_state));
          LINK_STATS_INC(link.lenerr);
          pppos_input_drop(pppos);
 800f468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f46a:	f000 fa07 	bl	800f87c <pppos_input_drop>
 800f46e:	e069      	b.n	800f544 <pppos_input+0x178>
        /* If the fcs is invalid, drop the packet. */
        } else if (pppos->in_fcs != PPP_GOODFCS) {
 800f470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f472:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f476:	f24f 02b8 	movw	r2, #61624	; 0xf0b8
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d003      	beq.n	800f486 <pppos_input+0xba>
          PPPDEBUG(LOG_INFO,
                   ("pppos_input[%d]: Dropping bad fcs 0x%"X16_F" proto=0x%"X16_F"\n",
                    ppp->netif->num, pppos->in_fcs, pppos->in_protocol));
          /* Note: If you get lots of these, check for UART frame errors or try different baud rate */
          LINK_STATS_INC(link.chkerr);
          pppos_input_drop(pppos);
 800f47e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f480:	f000 f9fc 	bl	800f87c <pppos_input_drop>
 800f484:	e05e      	b.n	800f544 <pppos_input+0x178>
        } else if (!pppos->in_tail) {
 800f486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d103      	bne.n	800f496 <pppos_input+0xca>
          PPPDEBUG(LOG_INFO,
                   ("pppos_input[%d]: Dropping null in_tail\n",
                    ppp->netif->num));
          LINK_STATS_INC(link.drop);
          pppos_input_drop(pppos);
 800f48e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f490:	f000 f9f4 	bl	800f87c <pppos_input_drop>
 800f494:	e056      	b.n	800f544 <pppos_input+0x178>
        /* Otherwise it's a good packet so pass it on. */
        } else {
          struct pbuf *inp;
          /* Trim off the checksum. */
          if(pppos->in_tail->len > 2) {
 800f496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f49a:	895b      	ldrh	r3, [r3, #10]
 800f49c:	2b02      	cmp	r3, #2
 800f49e:	d91c      	bls.n	800f4da <pppos_input+0x10e>
            pppos->in_tail->len -= 2;
 800f4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4a6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800f4a8:	8952      	ldrh	r2, [r2, #10]
 800f4aa:	3a02      	subs	r2, #2
 800f4ac:	b292      	uxth	r2, r2
 800f4ae:	815a      	strh	r2, [r3, #10]

            pppos->in_tail->tot_len = pppos->in_tail->len;
 800f4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4b6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800f4b8:	8952      	ldrh	r2, [r2, #10]
 800f4ba:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 800f4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d027      	beq.n	800f518 <pppos_input+0x14c>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 800f4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	4610      	mov	r0, r2
 800f4d4:	f7f4 fdb8 	bl	8004048 <pbuf_cat>
 800f4d8:	e01e      	b.n	800f518 <pppos_input+0x14c>
            }
          } else {
            pppos->in_tail->tot_len = pppos->in_tail->len;
 800f4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4e0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800f4e2:	8952      	ldrh	r2, [r2, #10]
 800f4e4:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 800f4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d007      	beq.n	800f502 <pppos_input+0x136>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 800f4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	4610      	mov	r0, r2
 800f4fe:	f7f4 fda3 	bl	8004048 <pbuf_cat>
            }

            pbuf_realloc(pppos->in_head, pppos->in_head->tot_len - 2);
 800f502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f504:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f50a:	891b      	ldrh	r3, [r3, #8]
 800f50c:	3b02      	subs	r3, #2
 800f50e:	b29b      	uxth	r3, r3
 800f510:	4619      	mov	r1, r3
 800f512:	4610      	mov	r0, r2
 800f514:	f7f4 fb24 	bl	8003b60 <pbuf_realloc>
          }

          /* Dispatch the packet thereby consuming it. */
          inp = pppos->in_head;
 800f518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f51a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f51c:	613b      	str	r3, [r7, #16]
          /* Packet consumed, release our references. */
          pppos->in_head = NULL;
 800f51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f520:	2200      	movs	r2, #0
 800f522:	651a      	str	r2, [r3, #80]	; 0x50
          pppos->in_tail = NULL;
 800f524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f526:	2200      	movs	r2, #0
 800f528:	655a      	str	r2, [r3, #84]	; 0x54
            pbuf_free(inp);
            LINK_STATS_INC(link.drop);
            MIB2_STATS_NETIF_INC(ppp->netif, ifindiscards);
          }
#else /* PPP_INPROC_IRQ_SAFE */
          ppp_input(ppp, inp);
 800f52a:	6939      	ldr	r1, [r7, #16]
 800f52c:	68f8      	ldr	r0, [r7, #12]
 800f52e:	f7ff fc01 	bl	800ed34 <ppp_input>
          /* ppp_input can disconnect the interface, we need to abort to prevent a memory
           * leak if there are remaining bytes because pppos_connect and pppos_listen
           * functions expect input buffer to be free. Furthermore there are no real
           * reason to continue reading bytes if we are disconnected.
           */
          if (!pppos->open) {
 800f532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f534:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f538:	f003 0301 	and.w	r3, r3, #1
 800f53c:	b2db      	uxtb	r3, r3
 800f53e:	2b00      	cmp	r3, #0
 800f540:	f000 8110 	beq.w	800f764 <pppos_input+0x398>
          }
#endif /* PPP_INPROC_IRQ_SAFE */
        }

        /* Prepare for a new packet. */
        pppos->in_fcs = PPP_INITFCS;
 800f544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f54a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
        pppos->in_state = PDADDRESS;
 800f54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f550:	2201      	movs	r2, #1
 800f552:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        pppos->in_escaped = 0;
 800f556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f558:	2200      	movs	r2, #0
 800f55a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800f55e:	e0f8      	b.n	800f752 <pppos_input+0x386>
                 ("pppos_input[%d]: Dropping ACCM char <%d>\n", ppp->netif->num, cur_char));
      }
    /* Process other characters. */
    } else {
      /* Unencode escaped characters. */
      if (pppos->in_escaped) {
 800f560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f562:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f566:	2b00      	cmp	r3, #0
 800f568:	d009      	beq.n	800f57e <pppos_input+0x1b2>
        pppos->in_escaped = 0;
 800f56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f56c:	2200      	movs	r2, #0
 800f56e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        cur_char ^= PPP_TRANS;
 800f572:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f576:	f083 0320 	eor.w	r3, r3, #32
 800f57a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      }

      /* Process character relative to current state. */
      switch (pppos->in_state) {
 800f57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f580:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f584:	2b05      	cmp	r3, #5
 800f586:	f200 80ce 	bhi.w	800f726 <pppos_input+0x35a>
 800f58a:	a201      	add	r2, pc, #4	; (adr r2, 800f590 <pppos_input+0x1c4>)
 800f58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f590:	0800f727 	.word	0x0800f727
 800f594:	0800f5a9 	.word	0x0800f5a9
 800f598:	0800f5bb 	.word	0x0800f5bb
 800f59c:	0800f5cd 	.word	0x0800f5cd
 800f5a0:	0800f609 	.word	0x0800f609
 800f5a4:	0800f629 	.word	0x0800f629
        case PDIDLE:                    /* Idle state - wait for flag character. */
          break;
        case PDADDRESS:                 /* Process address field. */
          if (cur_char == PPP_ALLSTATIONS) {
 800f5a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f5ac:	2bff      	cmp	r3, #255	; 0xff
 800f5ae:	d104      	bne.n	800f5ba <pppos_input+0x1ee>
            pppos->in_state = PDCONTROL;
 800f5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b2:	2202      	movs	r2, #2
 800f5b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            break;
 800f5b8:	e0b6      	b.n	800f728 <pppos_input+0x35c>
          }
          /* Else assume compressed address and control fields so
           * fall through to get the protocol... */
          /* Fall through */
        case PDCONTROL:                 /* Process control field. */
          if (cur_char == PPP_UI) {
 800f5ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f5be:	2b03      	cmp	r3, #3
 800f5c0:	d104      	bne.n	800f5cc <pppos_input+0x200>
            pppos->in_state = PDPROTOCOL1;
 800f5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c4:	2203      	movs	r2, #3
 800f5c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            break;
 800f5ca:	e0ad      	b.n	800f728 <pppos_input+0x35c>
          }
          /* Fall through */
        case PDPROTOCOL1:               /* Process protocol field 1. */
          /* If the lower bit is set, this is the end of the protocol
           * field. */
          if (cur_char & 1) {
 800f5cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f5d0:	f003 0301 	and.w	r3, r3, #1
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d00a      	beq.n	800f5ee <pppos_input+0x222>
            pppos->in_protocol = cur_char;
 800f5d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f5dc:	b29a      	uxth	r2, r3
 800f5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
            pppos->in_state = PDDATA;
 800f5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e6:	2205      	movs	r2, #5
 800f5e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          } else {
            pppos->in_protocol = (u16_t)cur_char << 8;
            pppos->in_state = PDPROTOCOL2;
          }
          break;
 800f5ec:	e09c      	b.n	800f728 <pppos_input+0x35c>
            pppos->in_protocol = (u16_t)cur_char << 8;
 800f5ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	021b      	lsls	r3, r3, #8
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
            pppos->in_state = PDPROTOCOL2;
 800f5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f600:	2204      	movs	r2, #4
 800f602:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          break;
 800f606:	e08f      	b.n	800f728 <pppos_input+0x35c>
        case PDPROTOCOL2:               /* Process protocol field 2. */
          pppos->in_protocol |= cur_char;
 800f608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800f60e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f612:	b29b      	uxth	r3, r3
 800f614:	4313      	orrs	r3, r2
 800f616:	b29a      	uxth	r2, r3
 800f618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          pppos->in_state = PDDATA;
 800f61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f620:	2205      	movs	r2, #5
 800f622:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          break;
 800f626:	e07f      	b.n	800f728 <pppos_input+0x35c>
        case PDDATA:                    /* Process data byte. */
          /* Make space to receive processed data. */
          if (pppos->in_tail == NULL || pppos->in_tail->len == PBUF_POOL_BUFSIZE) {
 800f628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d005      	beq.n	800f63c <pppos_input+0x270>
 800f630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f634:	895b      	ldrh	r3, [r3, #10]
 800f636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f63a:	d165      	bne.n	800f708 <pppos_input+0x33c>
            u16_t pbuf_alloc_len;
            if (pppos->in_tail != NULL) {
 800f63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f640:	2b00      	cmp	r3, #0
 800f642:	d027      	beq.n	800f694 <pppos_input+0x2c8>
              u16_t mru;
              pppos->in_tail->tot_len = pppos->in_tail->len;
 800f644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f64a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800f64c:	8952      	ldrh	r2, [r2, #10]
 800f64e:	811a      	strh	r2, [r3, #8]
              if (pppos->in_tail != pppos->in_head) {
 800f650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f652:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f658:	429a      	cmp	r2, r3
 800f65a:	d00a      	beq.n	800f672 <pppos_input+0x2a6>
                pbuf_cat(pppos->in_head, pppos->in_tail);
 800f65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f664:	4619      	mov	r1, r3
 800f666:	4610      	mov	r0, r2
 800f668:	f7f4 fcee 	bl	8004048 <pbuf_cat>
                /* give up the in_tail reference now */
                pppos->in_tail = NULL;
 800f66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66e:	2200      	movs	r2, #0
 800f670:	655a      	str	r2, [r3, #84]	; 0x54
              }
              /* Compute MRU including headers length.  If smaller packets are
               * requested, we must still be able to receive packets of the
               * default MRU for control packets. */
              mru = LWIP_MAX(PPP_MRU, PPP_DEFMRU)
 800f672:	f240 6374 	movw	r3, #1652	; 0x674
 800f676:	843b      	strh	r3, [r7, #32]
#endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
#if PPP_INPROC_IRQ_SAFE
                + sizeof(struct pppos_input_header)
#endif /* PPP_INPROC_IRQ_SAFE */
                + sizeof(pppos->in_protocol);
              if (pppos->in_head->tot_len > mru) {
 800f678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f67a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f67c:	891b      	ldrh	r3, [r3, #8]
 800f67e:	8c3a      	ldrh	r2, [r7, #32]
 800f680:	429a      	cmp	r2, r3
 800f682:	d207      	bcs.n	800f694 <pppos_input+0x2c8>
                /* Packet too big. Drop the input packet and let the
                 * higher layers deal with it.  Continue processing
                 * received characters in case a new packet starts. */
                PPPDEBUG(LOG_ERR, ("pppos_input[%d]: packet too big, max_len=%d, dropping packet\n", ppp->netif->num, mru));
                LINK_STATS_INC(link.lenerr);
                pppos_input_drop(pppos);
 800f684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f686:	f000 f8f9 	bl	800f87c <pppos_input_drop>
                pppos->in_state = PDIDLE;  /* Wait for flag character. */
 800f68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68c:	2200      	movs	r2, #0
 800f68e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                break;
 800f692:	e049      	b.n	800f728 <pppos_input+0x35c>
              }
            }
            /* If we haven't started a packet, we need a packet header. */
            pbuf_alloc_len = 0;
 800f694:	2300      	movs	r3, #0
 800f696:	83fb      	strh	r3, [r7, #30]
#endif /* PPP_IPV6_SUPPORT */
             )) {
              pbuf_alloc_len = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
            }
#endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
            next_pbuf = pbuf_alloc(PBUF_RAW, pbuf_alloc_len, PBUF_POOL);
 800f698:	8bfb      	ldrh	r3, [r7, #30]
 800f69a:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800f69e:	4619      	mov	r1, r3
 800f6a0:	2000      	movs	r0, #0
 800f6a2:	f7f4 f96b 	bl	800397c <pbuf_alloc>
 800f6a6:	61b8      	str	r0, [r7, #24]
            if (next_pbuf == NULL) {
 800f6a8:	69bb      	ldr	r3, [r7, #24]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d107      	bne.n	800f6be <pppos_input+0x2f2>
              /* No free buffers.  Drop the input packet and let the
               * higher layers deal with it.  Continue processing
               * received characters in case a new packet starts. */
              PPPDEBUG(LOG_ERR, ("pppos_input[%d]: NO FREE PBUFS!\n", ppp->netif->num));
              LINK_STATS_INC(link.memerr);
              pppos_input_drop(pppos);
 800f6ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f6b0:	f000 f8e4 	bl	800f87c <pppos_input_drop>
              pppos->in_state = PDIDLE;  /* Wait for flag character. */
 800f6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
              break;
 800f6bc:	e034      	b.n	800f728 <pppos_input+0x35c>
            }
            if (pppos->in_head == NULL) {
 800f6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d11d      	bne.n	800f702 <pppos_input+0x336>
              u8_t *payload = ((u8_t*)next_pbuf->payload) + pbuf_alloc_len;
 800f6c6:	69bb      	ldr	r3, [r7, #24]
 800f6c8:	685a      	ldr	r2, [r3, #4]
 800f6ca:	8bfb      	ldrh	r3, [r7, #30]
 800f6cc:	4413      	add	r3, r2
 800f6ce:	617b      	str	r3, [r7, #20]
#if PPP_INPROC_IRQ_SAFE
              ((struct pppos_input_header*)payload)->ppp = ppp;
              payload += sizeof(struct pppos_input_header);
              next_pbuf->len += sizeof(struct pppos_input_header);
#endif /* PPP_INPROC_IRQ_SAFE */
              next_pbuf->len += sizeof(pppos->in_protocol);
 800f6d0:	69bb      	ldr	r3, [r7, #24]
 800f6d2:	895b      	ldrh	r3, [r3, #10]
 800f6d4:	3302      	adds	r3, #2
 800f6d6:	b29a      	uxth	r2, r3
 800f6d8:	69bb      	ldr	r3, [r7, #24]
 800f6da:	815a      	strh	r2, [r3, #10]
              *(payload++) = pppos->in_protocol >> 8;
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	1c5a      	adds	r2, r3, #1
 800f6e0:	617a      	str	r2, [r7, #20]
 800f6e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6e4:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800f6e8:	0a12      	lsrs	r2, r2, #8
 800f6ea:	b292      	uxth	r2, r2
 800f6ec:	b2d2      	uxtb	r2, r2
 800f6ee:	701a      	strb	r2, [r3, #0]
              *(payload) = pppos->in_protocol & 0xFF;
 800f6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f6f6:	b2da      	uxtb	r2, r3
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	701a      	strb	r2, [r3, #0]
              pppos->in_head = next_pbuf;
 800f6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6fe:	69ba      	ldr	r2, [r7, #24]
 800f700:	651a      	str	r2, [r3, #80]	; 0x50
            }
            pppos->in_tail = next_pbuf;
 800f702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f704:	69ba      	ldr	r2, [r7, #24]
 800f706:	655a      	str	r2, [r3, #84]	; 0x54
          }
          /* Load character into buffer. */
          ((u8_t*)pppos->in_tail->payload)[pppos->in_tail->len++] = cur_char;
 800f708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f70a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f70c:	6859      	ldr	r1, [r3, #4]
 800f70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f712:	895a      	ldrh	r2, [r3, #10]
 800f714:	1c50      	adds	r0, r2, #1
 800f716:	b280      	uxth	r0, r0
 800f718:	8158      	strh	r0, [r3, #10]
 800f71a:	4613      	mov	r3, r2
 800f71c:	440b      	add	r3, r1
 800f71e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800f722:	701a      	strb	r2, [r3, #0]
          break;
 800f724:	e000      	b.n	800f728 <pppos_input+0x35c>
        default:
          break;
 800f726:	bf00      	nop
      }

      /* update the frame check sequence number. */
      pppos->in_fcs = PPP_FCS(pppos->in_fcs, cur_char);
 800f728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f72a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f72e:	0a1b      	lsrs	r3, r3, #8
 800f730:	b29a      	uxth	r2, r3
 800f732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f734:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f738:	4619      	mov	r1, r3
 800f73a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f73e:	404b      	eors	r3, r1
 800f740:	b2db      	uxtb	r3, r3
 800f742:	490a      	ldr	r1, [pc, #40]	; (800f76c <pppos_input+0x3a0>)
 800f744:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f748:	4053      	eors	r3, r2
 800f74a:	b29a      	uxth	r2, r3
 800f74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f74e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  while (l-- > 0) {
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	1e5a      	subs	r2, r3, #1
 800f756:	607a      	str	r2, [r7, #4]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	f73f ae4c 	bgt.w	800f3f6 <pppos_input+0x2a>
 800f75e:	e002      	b.n	800f766 <pppos_input+0x39a>
    return;
 800f760:	bf00      	nop
 800f762:	e000      	b.n	800f766 <pppos_input+0x39a>
            break;
 800f764:	bf00      	nop
    }
  } /* while (l-- > 0), all bytes processed */
}
 800f766:	3730      	adds	r7, #48	; 0x30
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	08013f7c 	.word	0x08013f7c

0800f770 <pppos_send_config>:
}
#endif /* PPP_INPROC_IRQ_SAFE */

static void
pppos_send_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
{
 800f770:	b480      	push	{r7}
 800f772:	b087      	sub	sp, #28
 800f774:	af00      	add	r7, sp, #0
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	60b9      	str	r1, [r7, #8]
 800f77a:	607a      	str	r2, [r7, #4]
 800f77c:	603b      	str	r3, [r7, #0]
  int i;
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(ppp);

  pppos->pcomp = pcomp;
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	b2db      	uxtb	r3, r3
 800f786:	f003 0301 	and.w	r3, r3, #1
 800f78a:	b2d9      	uxtb	r1, r3
 800f78c:	693a      	ldr	r2, [r7, #16]
 800f78e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800f792:	f361 0341 	bfi	r3, r1, #1, #1
 800f796:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
  pppos->accomp = accomp;
 800f79a:	6a3b      	ldr	r3, [r7, #32]
 800f79c:	b2db      	uxtb	r3, r3
 800f79e:	f003 0301 	and.w	r3, r3, #1
 800f7a2:	b2d9      	uxtb	r1, r3
 800f7a4:	693a      	ldr	r2, [r7, #16]
 800f7a6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800f7aa:	f361 0382 	bfi	r3, r1, #2, #1
 800f7ae:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

  /* Load the ACCM bits for the 32 control codes. */
  for (i = 0; i < 32/8; i++) {
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	617b      	str	r3, [r7, #20]
 800f7b6:	e00e      	b.n	800f7d6 <pppos_send_config+0x66>
    pppos->out_accm[i] = (u8_t)((accm >> (8 * i)) & 0xFF);
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	00db      	lsls	r3, r3, #3
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	fa22 f303 	lsr.w	r3, r2, r3
 800f7c2:	b2d9      	uxtb	r1, r3
 800f7c4:	693a      	ldr	r2, [r7, #16]
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	4413      	add	r3, r2
 800f7ca:	330c      	adds	r3, #12
 800f7cc:	460a      	mov	r2, r1
 800f7ce:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 32/8; i++) {
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	617b      	str	r3, [r7, #20]
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	2b03      	cmp	r3, #3
 800f7da:	dded      	ble.n	800f7b8 <pppos_send_config+0x48>
  }

  PPPDEBUG(LOG_INFO, ("pppos_send_config[%d]: out_accm=%X %X %X %X\n",
            pppos->ppp->netif->num,
            pppos->out_accm[0], pppos->out_accm[1], pppos->out_accm[2], pppos->out_accm[3]));
}
 800f7dc:	bf00      	nop
 800f7de:	371c      	adds	r7, #28
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e6:	4770      	bx	lr

0800f7e8 <pppos_recv_config>:

static void
pppos_recv_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b087      	sub	sp, #28
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	60b9      	str	r1, [r7, #8]
 800f7f2:	607a      	str	r2, [r7, #4]
 800f7f4:	603b      	str	r3, [r7, #0]
  int i;
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(pcomp);
  LWIP_UNUSED_ARG(accomp);

  /* Load the ACCM bits for the 32 control codes. */
  PPPOS_PROTECT(lev);
  for (i = 0; i < 32 / 8; i++) {
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	617b      	str	r3, [r7, #20]
 800f7fe:	e00e      	b.n	800f81e <pppos_recv_config+0x36>
    pppos->in_accm[i] = (u8_t)(accm >> (i * 8));
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	00db      	lsls	r3, r3, #3
 800f804:	687a      	ldr	r2, [r7, #4]
 800f806:	fa22 f303 	lsr.w	r3, r2, r3
 800f80a:	b2d9      	uxtb	r1, r3
 800f80c:	693a      	ldr	r2, [r7, #16]
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	4413      	add	r3, r2
 800f812:	332d      	adds	r3, #45	; 0x2d
 800f814:	460a      	mov	r2, r1
 800f816:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 32 / 8; i++) {
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	3301      	adds	r3, #1
 800f81c:	617b      	str	r3, [r7, #20]
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	2b03      	cmp	r3, #3
 800f822:	dded      	ble.n	800f800 <pppos_recv_config+0x18>
  PPPOS_UNPROTECT(lev);

  PPPDEBUG(LOG_INFO, ("pppos_recv_config[%d]: in_accm=%X %X %X %X\n",
            pppos->ppp->netif->num,
            pppos->in_accm[0], pppos->in_accm[1], pppos->in_accm[2], pppos->in_accm[3]));
}
 800f824:	bf00      	nop
 800f826:	371c      	adds	r7, #28
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr

0800f830 <pppos_input_free_current_packet>:
/*
 * Drop the input packet.
 */
static void
pppos_input_free_current_packet(pppos_pcb *pppos)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
  if (pppos->in_head != NULL) {
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d016      	beq.n	800f86e <pppos_input_free_current_packet+0x3e>
    if (pppos->in_tail && (pppos->in_tail != pppos->in_head)) {
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f844:	2b00      	cmp	r3, #0
 800f846:	d00a      	beq.n	800f85e <pppos_input_free_current_packet+0x2e>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f850:	429a      	cmp	r2, r3
 800f852:	d004      	beq.n	800f85e <pppos_input_free_current_packet+0x2e>
      pbuf_free(pppos->in_tail);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f858:	4618      	mov	r0, r3
 800f85a:	f7f4 fb2d 	bl	8003eb8 <pbuf_free>
    }
    pbuf_free(pppos->in_head);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f862:	4618      	mov	r0, r3
 800f864:	f7f4 fb28 	bl	8003eb8 <pbuf_free>
    pppos->in_head = NULL;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2200      	movs	r2, #0
 800f86c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  pppos->in_tail = NULL;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2200      	movs	r2, #0
 800f872:	655a      	str	r2, [r3, #84]	; 0x54
}
 800f874:	bf00      	nop
 800f876:	3708      	adds	r7, #8
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <pppos_input_drop>:
/*
 * Drop the input packet and increase error counters.
 */
static void
pppos_input_drop(pppos_pcb *pppos)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
#if 0
    PPPDEBUG(LOG_INFO, ("pppos_input_drop: %d:%.*H\n", pppos->in_head->len, min(60, pppos->in_head->len * 2), pppos->in_head->payload));
#endif
    PPPDEBUG(LOG_INFO, ("pppos_input_drop: pbuf len=%d, addr %p\n", pppos->in_head->len, (void*)pppos->in_head));
  }
  pppos_input_free_current_packet(pppos);
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f7ff ffd3 	bl	800f830 <pppos_input_free_current_packet>
  vj_uncompress_err(&pppos->ppp->vj_comp);
#endif /* VJ_SUPPORT */

  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(pppos->ppp->netif, ifindiscards);
}
 800f88a:	bf00      	nop
 800f88c:	3708      	adds	r7, #8
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}
	...

0800f894 <pppos_output_append>:
 * If pbuf is full, send the pbuf and reuse it.
 * Return the current pbuf.
 */
static err_t
pppos_output_append(pppos_pcb *pppos, err_t err, struct pbuf *nb, u8_t c, u8_t accm, u16_t *fcs)
{
 800f894:	b590      	push	{r4, r7, lr}
 800f896:	b087      	sub	sp, #28
 800f898:	af00      	add	r7, sp, #0
 800f89a:	60f8      	str	r0, [r7, #12]
 800f89c:	607a      	str	r2, [r7, #4]
 800f89e:	461a      	mov	r2, r3
 800f8a0:	460b      	mov	r3, r1
 800f8a2:	72fb      	strb	r3, [r7, #11]
 800f8a4:	4613      	mov	r3, r2
 800f8a6:	72bb      	strb	r3, [r7, #10]
  if (err != ERR_OK) {
 800f8a8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d002      	beq.n	800f8b6 <pppos_output_append+0x22>
    return err;
 800f8b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f8b4:	e06e      	b.n	800f994 <pppos_output_append+0x100>
  }

  /* Make sure there is room for the character and an escape code.
   * Sure we don't quite fill the buffer if the character doesn't
   * get escaped but is one character worth complicating this? */
  if ((PBUF_POOL_BUFSIZE - nb->len) < 2) {
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	895b      	ldrh	r3, [r3, #10]
 800f8ba:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800f8be:	2b01      	cmp	r3, #1
 800f8c0:	dc19      	bgt.n	800f8f6 <pppos_output_append+0x62>
    u32_t l = pppos->output_cb(pppos->ppp, nb->payload, nb->len, pppos->ppp->ctx_cb);
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	685c      	ldr	r4, [r3, #4]
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	6818      	ldr	r0, [r3, #0]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6859      	ldr	r1, [r3, #4]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	895b      	ldrh	r3, [r3, #10]
 800f8d2:	461a      	mov	r2, r3
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8da:	47a0      	blx	r4
 800f8dc:	6178      	str	r0, [r7, #20]
    if (l != nb->len) {
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	895b      	ldrh	r3, [r3, #10]
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d002      	beq.n	800f8f0 <pppos_output_append+0x5c>
      return ERR_IF;
 800f8ea:	f06f 030b 	mvn.w	r3, #11
 800f8ee:	e051      	b.n	800f994 <pppos_output_append+0x100>
    }
    nb->len = 0;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	815a      	strh	r2, [r3, #10]
  }

  /* Update FCS before checking for special characters. */
  if (fcs) {
 800f8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d010      	beq.n	800f91e <pppos_output_append+0x8a>
    *fcs = PPP_FCS(*fcs, c);
 800f8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fe:	881b      	ldrh	r3, [r3, #0]
 800f900:	0a1b      	lsrs	r3, r3, #8
 800f902:	b29a      	uxth	r2, r3
 800f904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f906:	881b      	ldrh	r3, [r3, #0]
 800f908:	4619      	mov	r1, r3
 800f90a:	7abb      	ldrb	r3, [r7, #10]
 800f90c:	404b      	eors	r3, r1
 800f90e:	b2db      	uxtb	r3, r3
 800f910:	4922      	ldr	r1, [pc, #136]	; (800f99c <pppos_output_append+0x108>)
 800f912:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f916:	4053      	eors	r3, r2
 800f918:	b29a      	uxth	r2, r3
 800f91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91c:	801a      	strh	r2, [r3, #0]
  }

  /* Copy to output buffer escaping special characters. */
  if (accm && ESCAPE_P(pppos->out_accm, c)) {
 800f91e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f922:	2b00      	cmp	r3, #0
 800f924:	d02a      	beq.n	800f97c <pppos_output_append+0xe8>
 800f926:	7abb      	ldrb	r3, [r7, #10]
 800f928:	08db      	lsrs	r3, r3, #3
 800f92a:	b2db      	uxtb	r3, r3
 800f92c:	461a      	mov	r2, r3
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	4413      	add	r3, r2
 800f932:	7b1b      	ldrb	r3, [r3, #12]
 800f934:	461a      	mov	r2, r3
 800f936:	7abb      	ldrb	r3, [r7, #10]
 800f938:	f003 0307 	and.w	r3, r3, #7
 800f93c:	fa42 f303 	asr.w	r3, r2, r3
 800f940:	f003 0301 	and.w	r3, r3, #1
 800f944:	2b00      	cmp	r3, #0
 800f946:	d019      	beq.n	800f97c <pppos_output_append+0xe8>
    *((u8_t*)nb->payload + nb->len++) = PPP_ESCAPE;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	685a      	ldr	r2, [r3, #4]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	895b      	ldrh	r3, [r3, #10]
 800f950:	1c59      	adds	r1, r3, #1
 800f952:	b288      	uxth	r0, r1
 800f954:	6879      	ldr	r1, [r7, #4]
 800f956:	8148      	strh	r0, [r1, #10]
 800f958:	4413      	add	r3, r2
 800f95a:	227d      	movs	r2, #125	; 0x7d
 800f95c:	701a      	strb	r2, [r3, #0]
    *((u8_t*)nb->payload + nb->len++) = c ^ PPP_TRANS;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	685a      	ldr	r2, [r3, #4]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	895b      	ldrh	r3, [r3, #10]
 800f966:	1c59      	adds	r1, r3, #1
 800f968:	b288      	uxth	r0, r1
 800f96a:	6879      	ldr	r1, [r7, #4]
 800f96c:	8148      	strh	r0, [r1, #10]
 800f96e:	4413      	add	r3, r2
 800f970:	7aba      	ldrb	r2, [r7, #10]
 800f972:	f082 0220 	eor.w	r2, r2, #32
 800f976:	b2d2      	uxtb	r2, r2
 800f978:	701a      	strb	r2, [r3, #0]
 800f97a:	e00a      	b.n	800f992 <pppos_output_append+0xfe>
  } else {
    *((u8_t*)nb->payload + nb->len++) = c;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	685a      	ldr	r2, [r3, #4]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	895b      	ldrh	r3, [r3, #10]
 800f984:	1c59      	adds	r1, r3, #1
 800f986:	b288      	uxth	r0, r1
 800f988:	6879      	ldr	r1, [r7, #4]
 800f98a:	8148      	strh	r0, [r1, #10]
 800f98c:	4413      	add	r3, r2
 800f98e:	7aba      	ldrb	r2, [r7, #10]
 800f990:	701a      	strb	r2, [r3, #0]
  }

  return ERR_OK;
 800f992:	2300      	movs	r3, #0
}
 800f994:	4618      	mov	r0, r3
 800f996:	371c      	adds	r7, #28
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd90      	pop	{r4, r7, pc}
 800f99c:	08013f7c 	.word	0x08013f7c

0800f9a0 <pppos_output_last>:

static err_t
pppos_output_last(pppos_pcb *pppos, err_t err, struct pbuf *nb, u16_t *fcs)
{
 800f9a0:	b590      	push	{r4, r7, lr}
 800f9a2:	b089      	sub	sp, #36	; 0x24
 800f9a4:	af02      	add	r7, sp, #8
 800f9a6:	60f8      	str	r0, [r7, #12]
 800f9a8:	607a      	str	r2, [r7, #4]
 800f9aa:	603b      	str	r3, [r7, #0]
 800f9ac:	460b      	mov	r3, r1
 800f9ae:	72fb      	strb	r3, [r7, #11]
  ppp_pcb *ppp = pppos->ppp;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	617b      	str	r3, [r7, #20]

  /* Add FCS and trailing flag. */
  err = pppos_output_append(pppos, err,  nb, ~(*fcs) & 0xFF, 1, NULL);
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	881b      	ldrh	r3, [r3, #0]
 800f9ba:	b2db      	uxtb	r3, r3
 800f9bc:	43db      	mvns	r3, r3
 800f9be:	b2da      	uxtb	r2, r3
 800f9c0:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	9301      	str	r3, [sp, #4]
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	9300      	str	r3, [sp, #0]
 800f9cc:	4613      	mov	r3, r2
 800f9ce:	687a      	ldr	r2, [r7, #4]
 800f9d0:	68f8      	ldr	r0, [r7, #12]
 800f9d2:	f7ff ff5f 	bl	800f894 <pppos_output_append>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	72fb      	strb	r3, [r7, #11]
  err = pppos_output_append(pppos, err,  nb, (~(*fcs) >> 8) & 0xFF, 1, NULL);
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	881b      	ldrh	r3, [r3, #0]
 800f9de:	43db      	mvns	r3, r3
 800f9e0:	121b      	asrs	r3, r3, #8
 800f9e2:	b2da      	uxtb	r2, r3
 800f9e4:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	9301      	str	r3, [sp, #4]
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	9300      	str	r3, [sp, #0]
 800f9f0:	4613      	mov	r3, r2
 800f9f2:	687a      	ldr	r2, [r7, #4]
 800f9f4:	68f8      	ldr	r0, [r7, #12]
 800f9f6:	f7ff ff4d 	bl	800f894 <pppos_output_append>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	72fb      	strb	r3, [r7, #11]
  err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 800f9fe:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800fa02:	2300      	movs	r3, #0
 800fa04:	9301      	str	r3, [sp, #4]
 800fa06:	2300      	movs	r3, #0
 800fa08:	9300      	str	r3, [sp, #0]
 800fa0a:	237e      	movs	r3, #126	; 0x7e
 800fa0c:	687a      	ldr	r2, [r7, #4]
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	f7ff ff40 	bl	800f894 <pppos_output_append>
 800fa14:	4603      	mov	r3, r0
 800fa16:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK) {
 800fa18:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d122      	bne.n	800fa66 <pppos_output_last+0xc6>
    goto failed;
  }

  /* Send remaining buffer if not empty */
  if (nb->len > 0) {
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	895b      	ldrh	r3, [r3, #10]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d014      	beq.n	800fa52 <pppos_output_last+0xb2>
    u32_t l = pppos->output_cb(ppp, nb->payload, nb->len, ppp->ctx_cb);
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	685c      	ldr	r4, [r3, #4]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6859      	ldr	r1, [r3, #4]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	895b      	ldrh	r3, [r3, #10]
 800fa34:	461a      	mov	r2, r3
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa3a:	6978      	ldr	r0, [r7, #20]
 800fa3c:	47a0      	blx	r4
 800fa3e:	6138      	str	r0, [r7, #16]
    if (l != nb->len) {
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	895b      	ldrh	r3, [r3, #10]
 800fa44:	461a      	mov	r2, r3
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d002      	beq.n	800fa52 <pppos_output_last+0xb2>
      err = ERR_IF;
 800fa4c:	23f4      	movs	r3, #244	; 0xf4
 800fa4e:	72fb      	strb	r3, [r7, #11]
      goto failed;
 800fa50:	e00a      	b.n	800fa68 <pppos_output_last+0xc8>
    }
  }

  pppos->last_xmit = sys_now();
 800fa52:	f7f1 fe5f 	bl	8001714 <sys_now>
 800fa56:	4602      	mov	r2, r0
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	609a      	str	r2, [r3, #8]
  MIB2_STATS_NETIF_ADD(ppp->netif, ifoutoctets, nb->tot_len);
  MIB2_STATS_NETIF_INC(ppp->netif, ifoutucastpkts);
  LINK_STATS_INC(link.xmit);
  pbuf_free(nb);
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f7f4 fa2b 	bl	8003eb8 <pbuf_free>
  return ERR_OK;
 800fa62:	2300      	movs	r3, #0
 800fa64:	e008      	b.n	800fa78 <pppos_output_last+0xd8>
    goto failed;
 800fa66:	bf00      	nop

failed:
  pppos->last_xmit = 0; /* prepend PPP_FLAG to next packet */
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	609a      	str	r2, [r3, #8]
  LINK_STATS_INC(link.err);
  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
  pbuf_free(nb);
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f7f4 fa22 	bl	8003eb8 <pbuf_free>
  return err;
 800fa74:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	371c      	adds	r7, #28
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd90      	pop	{r4, r7, pc}

0800fa80 <upap_init>:


/*
 * upap_init - Initialize a UPAP unit.
 */
static void upap_init(ppp_pcb *pcb) {
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
    pcb->upap.us_user = NULL;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->upap.us_userlen = 0;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2200      	movs	r2, #0
 800fa92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pcb->upap.us_passwd = NULL;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->upap.us_passwdlen = 0;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2200      	movs	r2, #0
 800faa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pcb->upap.us_clientstate = UPAPCS_INITIAL;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2200      	movs	r2, #0
 800faa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if PPP_SERVER
    pcb->upap.us_serverstate = UPAPSS_INITIAL;
#endif /* PPP_SERVER */
    pcb->upap.us_id = 0;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2200      	movs	r2, #0
 800fab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 800fab4:	bf00      	nop
 800fab6:	370c      	adds	r7, #12
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr

0800fac0 <upap_authwithpeer>:
/*
 * upap_authwithpeer - Authenticate us with our peer (start client).
 *
 * Set new state and send authenticate's.
 */
void upap_authwithpeer(ppp_pcb *pcb, const char *user, const char *password) {
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	60f8      	str	r0, [r7, #12]
 800fac8:	60b9      	str	r1, [r7, #8]
 800faca:	607a      	str	r2, [r7, #4]

    if(!user || !password)
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d03f      	beq.n	800fb52 <upap_authwithpeer+0x92>
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d03c      	beq.n	800fb52 <upap_authwithpeer+0x92>
        return;

    /* Save the username and password we're given */
    pcb->upap.us_user = user;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	68ba      	ldr	r2, [r7, #8]
 800fadc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->upap.us_userlen = (u8_t)LWIP_MIN(strlen(user), 0xff);
 800fade:	68b8      	ldr	r0, [r7, #8]
 800fae0:	f7f0 fb80 	bl	80001e4 <strlen>
 800fae4:	4603      	mov	r3, r0
 800fae6:	2bfe      	cmp	r3, #254	; 0xfe
 800fae8:	d805      	bhi.n	800faf6 <upap_authwithpeer+0x36>
 800faea:	68b8      	ldr	r0, [r7, #8]
 800faec:	f7f0 fb7a 	bl	80001e4 <strlen>
 800faf0:	4603      	mov	r3, r0
 800faf2:	b2da      	uxtb	r2, r3
 800faf4:	e000      	b.n	800faf8 <upap_authwithpeer+0x38>
 800faf6:	22ff      	movs	r2, #255	; 0xff
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pcb->upap.us_passwd = password;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	687a      	ldr	r2, [r7, #4]
 800fb02:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->upap.us_passwdlen = (u8_t)LWIP_MIN(strlen(password), 0xff);
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f7f0 fb6d 	bl	80001e4 <strlen>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	2bfe      	cmp	r3, #254	; 0xfe
 800fb0e:	d805      	bhi.n	800fb1c <upap_authwithpeer+0x5c>
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f7f0 fb67 	bl	80001e4 <strlen>
 800fb16:	4603      	mov	r3, r0
 800fb18:	b2da      	uxtb	r2, r3
 800fb1a:	e000      	b.n	800fb1e <upap_authwithpeer+0x5e>
 800fb1c:	22ff      	movs	r2, #255	; 0xff
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pcb->upap.us_transmits = 0;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	2200      	movs	r2, #0
 800fb28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    /* Lower layer up yet? */
    if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d004      	beq.n	800fb40 <upap_authwithpeer+0x80>
	pcb->upap.us_clientstate == UPAPCS_PENDING) {
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
 800fb3c:	2b02      	cmp	r3, #2
 800fb3e:	d104      	bne.n	800fb4a <upap_authwithpeer+0x8a>
	pcb->upap.us_clientstate = UPAPCS_PENDING;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	2202      	movs	r2, #2
 800fb44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	return;
 800fb48:	e004      	b.n	800fb54 <upap_authwithpeer+0x94>
    }

    upap_sauthreq(pcb);		/* Start protocol */
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	f000 f92c 	bl	800fda8 <upap_sauthreq>
 800fb50:	e000      	b.n	800fb54 <upap_authwithpeer+0x94>
        return;
 800fb52:	bf00      	nop
}
 800fb54:	3710      	adds	r7, #16
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}

0800fb5a <upap_timeout>:
#endif /* PPP_SERVER */

/*
 * upap_timeout - Retransmission timer for sending auth-reqs expired.
 */
static void upap_timeout(void *arg) {
 800fb5a:	b580      	push	{r7, lr}
 800fb5c:	b084      	sub	sp, #16
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = (ppp_pcb*)arg;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	60fb      	str	r3, [r7, #12]

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ)
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fb6c:	2b03      	cmp	r3, #3
 800fb6e:	d114      	bne.n	800fb9a <upap_timeout+0x40>
	return;

    if (pcb->upap.us_transmits >= pcb->settings.pap_max_transmits) {
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	7b5b      	ldrb	r3, [r3, #13]
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d309      	bcc.n	800fb92 <upap_timeout+0x38>
	/* give up in disgust */
	ppp_error(("No response to PAP authenticate-requests"));
	pcb->upap.us_clientstate = UPAPCS_BADAUTH;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	2205      	movs	r2, #5
 800fb82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	auth_withpeer_fail(pcb, PPP_PAP);
 800fb86:	f24c 0123 	movw	r1, #49187	; 0xc023
 800fb8a:	68f8      	ldr	r0, [r7, #12]
 800fb8c:	f7fa fb42 	bl	800a214 <auth_withpeer_fail>
	return;
 800fb90:	e004      	b.n	800fb9c <upap_timeout+0x42>
    }

    upap_sauthreq(pcb);		/* Send Authenticate-Request */
 800fb92:	68f8      	ldr	r0, [r7, #12]
 800fb94:	f000 f908 	bl	800fda8 <upap_sauthreq>
 800fb98:	e000      	b.n	800fb9c <upap_timeout+0x42>
	return;
 800fb9a:	bf00      	nop
}
 800fb9c:	3710      	adds	r7, #16
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}

0800fba2 <upap_lowerup>:
/*
 * upap_lowerup - The lower layer is up.
 *
 * Start authenticating if pending.
 */
static void upap_lowerup(ppp_pcb *pcb) {
 800fba2:	b580      	push	{r7, lr}
 800fba4:	b082      	sub	sp, #8
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_INITIAL)
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d104      	bne.n	800fbbe <upap_lowerup+0x1c>
	pcb->upap.us_clientstate = UPAPCS_CLOSED;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	pcb->upap.us_serverstate = UPAPSS_LISTEN;
	if (pcb->settings.pap_req_timeout > 0)
	    TIMEOUT(upap_reqtimeout, pcb, pcb->settings.pap_req_timeout);
    }
#endif /* PPP_SERVER */
}
 800fbbc:	e007      	b.n	800fbce <upap_lowerup+0x2c>
    else if (pcb->upap.us_clientstate == UPAPCS_PENDING) {
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fbc4:	2b02      	cmp	r3, #2
 800fbc6:	d102      	bne.n	800fbce <upap_lowerup+0x2c>
	upap_sauthreq(pcb);	/* send an auth-request */
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f000 f8ed 	bl	800fda8 <upap_sauthreq>
}
 800fbce:	bf00      	nop
 800fbd0:	3708      	adds	r7, #8
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
	...

0800fbd8 <upap_lowerdown>:
/*
 * upap_lowerdown - The lower layer is down.
 *
 * Cancel all timeouts.
 */
static void upap_lowerdown(ppp_pcb *pcb) {
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ)	/* Timeout pending? */
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fbe6:	2b03      	cmp	r3, #3
 800fbe8:	d103      	bne.n	800fbf2 <upap_lowerdown+0x1a>
	UNTIMEOUT(upap_timeout, pcb);		/* Cancel timeout */
 800fbea:	6879      	ldr	r1, [r7, #4]
 800fbec:	4805      	ldr	r0, [pc, #20]	; (800fc04 <upap_lowerdown+0x2c>)
 800fbee:	f7fa f9c1 	bl	8009f74 <sys_untimeout>
#if PPP_SERVER
    if (pcb->upap.us_serverstate == UPAPSS_LISTEN && pcb->settings.pap_req_timeout > 0)
	UNTIMEOUT(upap_reqtimeout, pcb);
#endif /* PPP_SERVER */

    pcb->upap.us_clientstate = UPAPCS_INITIAL;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if PPP_SERVER
    pcb->upap.us_serverstate = UPAPSS_INITIAL;
#endif /* PPP_SERVER */
}
 800fbfa:	bf00      	nop
 800fbfc:	3708      	adds	r7, #8
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
 800fc02:	bf00      	nop
 800fc04:	0800fb5b 	.word	0x0800fb5b

0800fc08 <upap_protrej>:
/*
 * upap_protrej - Peer doesn't speak this protocol.
 *
 * This shouldn't happen.  In any case, pretend lower layer went down.
 */
static void upap_protrej(ppp_pcb *pcb) {
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ) {
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc16:	2b03      	cmp	r3, #3
 800fc18:	d104      	bne.n	800fc24 <upap_protrej+0x1c>
	ppp_error(("PAP authentication failed due to protocol-reject"));
	auth_withpeer_fail(pcb, PPP_PAP);
 800fc1a:	f24c 0123 	movw	r1, #49187	; 0xc023
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f7fa faf8 	bl	800a214 <auth_withpeer_fail>
    if (pcb->upap.us_serverstate == UPAPSS_LISTEN) {
	ppp_error(("PAP authentication of peer failed (protocol-reject)"));
	auth_peer_fail(pcb, PPP_PAP);
    }
#endif /* PPP_SERVER */
    upap_lowerdown(pcb);
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f7ff ffd7 	bl	800fbd8 <upap_lowerdown>
}
 800fc2a:	bf00      	nop
 800fc2c:	3708      	adds	r7, #8
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}

0800fc32 <upap_input>:


/*
 * upap_input - Input UPAP packet.
 */
static void upap_input(ppp_pcb *pcb, u_char *inpacket, int l) {
 800fc32:	b580      	push	{r7, lr}
 800fc34:	b088      	sub	sp, #32
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	60f8      	str	r0, [r7, #12]
 800fc3a:	60b9      	str	r1, [r7, #8]
 800fc3c:	607a      	str	r2, [r7, #4]

    /*
     * Parse header (code, id and length).
     * If packet too short, drop it.
     */
    inp = inpacket;
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	61fb      	str	r3, [r7, #28]
    if (l < UPAP_HEADERLEN) {
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2b03      	cmp	r3, #3
 800fc46:	dd37      	ble.n	800fcb8 <upap_input+0x86>
	UPAPDEBUG(("pap_input: rcvd short header."));
	return;
    }
    GETCHAR(code, inp);
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	1c5a      	adds	r2, r3, #1
 800fc4c:	61fa      	str	r2, [r7, #28]
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	76fb      	strb	r3, [r7, #27]
    GETCHAR(id, inp);
 800fc52:	69fb      	ldr	r3, [r7, #28]
 800fc54:	1c5a      	adds	r2, r3, #1
 800fc56:	61fa      	str	r2, [r7, #28]
 800fc58:	781b      	ldrb	r3, [r3, #0]
 800fc5a:	76bb      	strb	r3, [r7, #26]
    GETSHORT(len, inp);
 800fc5c:	69fb      	ldr	r3, [r7, #28]
 800fc5e:	1c5a      	adds	r2, r3, #1
 800fc60:	61fa      	str	r2, [r7, #28]
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	021b      	lsls	r3, r3, #8
 800fc66:	617b      	str	r3, [r7, #20]
 800fc68:	69fb      	ldr	r3, [r7, #28]
 800fc6a:	1c5a      	adds	r2, r3, #1
 800fc6c:	61fa      	str	r2, [r7, #28]
 800fc6e:	781b      	ldrb	r3, [r3, #0]
 800fc70:	461a      	mov	r2, r3
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	4313      	orrs	r3, r2
 800fc76:	617b      	str	r3, [r7, #20]
    if (len < UPAP_HEADERLEN) {
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	2b03      	cmp	r3, #3
 800fc7c:	dd1e      	ble.n	800fcbc <upap_input+0x8a>
	UPAPDEBUG(("pap_input: rcvd illegal length."));
	return;
    }
    if (len > l) {
 800fc7e:	697a      	ldr	r2, [r7, #20]
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	429a      	cmp	r2, r3
 800fc84:	dc1c      	bgt.n	800fcc0 <upap_input+0x8e>
	UPAPDEBUG(("pap_input: rcvd short packet."));
	return;
    }
    len -= UPAP_HEADERLEN;
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	3b04      	subs	r3, #4
 800fc8a:	617b      	str	r3, [r7, #20]

    /*
     * Action depends on code.
     */
    switch (code) {
 800fc8c:	7efb      	ldrb	r3, [r7, #27]
 800fc8e:	2b02      	cmp	r3, #2
 800fc90:	d004      	beq.n	800fc9c <upap_input+0x6a>
 800fc92:	2b03      	cmp	r3, #3
 800fc94:	d009      	beq.n	800fcaa <upap_input+0x78>
 800fc96:	2b01      	cmp	r3, #1
 800fc98:	d014      	beq.n	800fcc4 <upap_input+0x92>
    case UPAP_AUTHNAK:
	upap_rauthnak(pcb, inp, id, len);
	break;

    default:				/* XXX Need code reject */
	break;
 800fc9a:	e014      	b.n	800fcc6 <upap_input+0x94>
	upap_rauthack(pcb, inp, id, len);
 800fc9c:	7eba      	ldrb	r2, [r7, #26]
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	69f9      	ldr	r1, [r7, #28]
 800fca2:	68f8      	ldr	r0, [r7, #12]
 800fca4:	f000 f812 	bl	800fccc <upap_rauthack>
	break;
 800fca8:	e00d      	b.n	800fcc6 <upap_input+0x94>
	upap_rauthnak(pcb, inp, id, len);
 800fcaa:	7eba      	ldrb	r2, [r7, #26]
 800fcac:	697b      	ldr	r3, [r7, #20]
 800fcae:	69f9      	ldr	r1, [r7, #28]
 800fcb0:	68f8      	ldr	r0, [r7, #12]
 800fcb2:	f000 f843 	bl	800fd3c <upap_rauthnak>
	break;
 800fcb6:	e006      	b.n	800fcc6 <upap_input+0x94>
	return;
 800fcb8:	bf00      	nop
 800fcba:	e004      	b.n	800fcc6 <upap_input+0x94>
	return;
 800fcbc:	bf00      	nop
 800fcbe:	e002      	b.n	800fcc6 <upap_input+0x94>
	return;
 800fcc0:	bf00      	nop
 800fcc2:	e000      	b.n	800fcc6 <upap_input+0x94>
	break;
 800fcc4:	bf00      	nop
    }
}
 800fcc6:	3720      	adds	r7, #32
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}

0800fccc <upap_rauthack>:
#endif /* PPP_SERVER */

/*
 * upap_rauthack - Receive Authenticate-Ack.
 */
static void upap_rauthack(ppp_pcb *pcb, u_char *inp, int id, int len) {
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b086      	sub	sp, #24
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	60f8      	str	r0, [r7, #12]
 800fcd4:	60b9      	str	r1, [r7, #8]
 800fcd6:	607a      	str	r2, [r7, #4]
 800fcd8:	603b      	str	r3, [r7, #0]
    u_char msglen;
    char *msg;
    LWIP_UNUSED_ARG(id);

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fce0:	2b03      	cmp	r3, #3
 800fce2:	d122      	bne.n	800fd2a <upap_rauthack+0x5e>
	return;

    /*
     * Parse message.
     */
    if (len < 1) {
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	dd10      	ble.n	800fd0c <upap_rauthack+0x40>
	UPAPDEBUG(("pap_rauthack: ignoring missing msg-length."));
    } else {
	GETCHAR(msglen, inp);
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	1c5a      	adds	r2, r3, #1
 800fcee:	60ba      	str	r2, [r7, #8]
 800fcf0:	781b      	ldrb	r3, [r3, #0]
 800fcf2:	75fb      	strb	r3, [r7, #23]
	if (msglen > 0) {
 800fcf4:	7dfb      	ldrb	r3, [r7, #23]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d008      	beq.n	800fd0c <upap_rauthack+0x40>
	    len -= sizeof (u_char);
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	3b01      	subs	r3, #1
 800fcfe:	603b      	str	r3, [r7, #0]
	    if (len < msglen) {
 800fd00:	7dfa      	ldrb	r2, [r7, #23]
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	429a      	cmp	r2, r3
 800fd06:	dc12      	bgt.n	800fd2e <upap_rauthack+0x62>
		UPAPDEBUG(("pap_rauthack: rcvd short packet."));
		return;
	    }
	    msg = (char *) inp;
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	613b      	str	r3, [r7, #16]
	    PRINTMSG(msg, msglen);
	}
    }

    UNTIMEOUT(upap_timeout, pcb);
 800fd0c:	68f9      	ldr	r1, [r7, #12]
 800fd0e:	480a      	ldr	r0, [pc, #40]	; (800fd38 <upap_rauthack+0x6c>)
 800fd10:	f7fa f930 	bl	8009f74 <sys_untimeout>
    pcb->upap.us_clientstate = UPAPCS_OPEN;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2204      	movs	r2, #4
 800fd18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    auth_withpeer_success(pcb, PPP_PAP, 0);
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	f24c 0123 	movw	r1, #49187	; 0xc023
 800fd22:	68f8      	ldr	r0, [r7, #12]
 800fd24:	f7fa fa8a 	bl	800a23c <auth_withpeer_success>
 800fd28:	e002      	b.n	800fd30 <upap_rauthack+0x64>
	return;
 800fd2a:	bf00      	nop
 800fd2c:	e000      	b.n	800fd30 <upap_rauthack+0x64>
		return;
 800fd2e:	bf00      	nop
}
 800fd30:	3718      	adds	r7, #24
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
 800fd36:	bf00      	nop
 800fd38:	0800fb5b 	.word	0x0800fb5b

0800fd3c <upap_rauthnak>:


/*
 * upap_rauthnak - Receive Authenticate-Nak.
 */
static void upap_rauthnak(ppp_pcb *pcb, u_char *inp, int id, int len) {
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b086      	sub	sp, #24
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	60b9      	str	r1, [r7, #8]
 800fd46:	607a      	str	r2, [r7, #4]
 800fd48:	603b      	str	r3, [r7, #0]
    u_char msglen;
    char *msg;
    LWIP_UNUSED_ARG(id);

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fd50:	2b03      	cmp	r3, #3
 800fd52:	d121      	bne.n	800fd98 <upap_rauthnak+0x5c>
	return;

    /*
     * Parse message.
     */
    if (len < 1) {
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	dd10      	ble.n	800fd7c <upap_rauthnak+0x40>
	UPAPDEBUG(("pap_rauthnak: ignoring missing msg-length."));
    } else {
	GETCHAR(msglen, inp);
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	1c5a      	adds	r2, r3, #1
 800fd5e:	60ba      	str	r2, [r7, #8]
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	75fb      	strb	r3, [r7, #23]
	if (msglen > 0) {
 800fd64:	7dfb      	ldrb	r3, [r7, #23]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d008      	beq.n	800fd7c <upap_rauthnak+0x40>
	    len -= sizeof (u_char);
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	3b01      	subs	r3, #1
 800fd6e:	603b      	str	r3, [r7, #0]
	    if (len < msglen) {
 800fd70:	7dfa      	ldrb	r2, [r7, #23]
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	429a      	cmp	r2, r3
 800fd76:	dc11      	bgt.n	800fd9c <upap_rauthnak+0x60>
		UPAPDEBUG(("pap_rauthnak: rcvd short packet."));
		return;
	    }
	    msg = (char *) inp;
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	613b      	str	r3, [r7, #16]
	    PRINTMSG(msg, msglen);
	}
    }

    UNTIMEOUT(upap_timeout, pcb);
 800fd7c:	68f9      	ldr	r1, [r7, #12]
 800fd7e:	4809      	ldr	r0, [pc, #36]	; (800fda4 <upap_rauthnak+0x68>)
 800fd80:	f7fa f8f8 	bl	8009f74 <sys_untimeout>
    pcb->upap.us_clientstate = UPAPCS_BADAUTH;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	2205      	movs	r2, #5
 800fd88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    ppp_error(("PAP authentication failed"));
    auth_withpeer_fail(pcb, PPP_PAP);
 800fd8c:	f24c 0123 	movw	r1, #49187	; 0xc023
 800fd90:	68f8      	ldr	r0, [r7, #12]
 800fd92:	f7fa fa3f 	bl	800a214 <auth_withpeer_fail>
 800fd96:	e002      	b.n	800fd9e <upap_rauthnak+0x62>
	return;
 800fd98:	bf00      	nop
 800fd9a:	e000      	b.n	800fd9e <upap_rauthnak+0x62>
		return;
 800fd9c:	bf00      	nop
}
 800fd9e:	3718      	adds	r7, #24
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}
 800fda4:	0800fb5b 	.word	0x0800fb5b

0800fda8 <upap_sauthreq>:


/*
 * upap_sauthreq - Send an Authenticate-Request.
 */
static void upap_sauthreq(ppp_pcb *pcb) {
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b086      	sub	sp, #24
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
	pcb->upap.us_userlen + pcb->upap.us_passwdlen;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fdb6:	461a      	mov	r2, r3
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdbe:	4413      	add	r3, r2
 800fdc0:	3306      	adds	r3, #6
    outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
 800fdc2:	617b      	str	r3, [r7, #20]
    p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN +outlen), PBUF_RAM);
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	b29b      	uxth	r3, r3
 800fdc8:	3304      	adds	r3, #4
 800fdca:	b29b      	uxth	r3, r3
 800fdcc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fdd0:	4619      	mov	r1, r3
 800fdd2:	2000      	movs	r0, #0
 800fdd4:	f7f3 fdd2 	bl	800397c <pbuf_alloc>
 800fdd8:	6138      	str	r0, [r7, #16]
    if(NULL == p)
 800fdda:	693b      	ldr	r3, [r7, #16]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	f000 808a 	beq.w	800fef6 <upap_sauthreq+0x14e>
        return;
    if(p->tot_len != p->len) {
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	891a      	ldrh	r2, [r3, #8]
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	895b      	ldrh	r3, [r3, #10]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d003      	beq.n	800fdf6 <upap_sauthreq+0x4e>
        pbuf_free(p);
 800fdee:	6938      	ldr	r0, [r7, #16]
 800fdf0:	f7f4 f862 	bl	8003eb8 <pbuf_free>
        return;
 800fdf4:	e080      	b.n	800fef8 <upap_sauthreq+0x150>
    }

    outp = (u_char*)p->payload;
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	685b      	ldr	r3, [r3, #4]
 800fdfa:	60fb      	str	r3, [r7, #12]
    MAKEHEADER(outp, PPP_PAP);
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	1c5a      	adds	r2, r3, #1
 800fe00:	60fa      	str	r2, [r7, #12]
 800fe02:	22ff      	movs	r2, #255	; 0xff
 800fe04:	701a      	strb	r2, [r3, #0]
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	1c5a      	adds	r2, r3, #1
 800fe0a:	60fa      	str	r2, [r7, #12]
 800fe0c:	2203      	movs	r2, #3
 800fe0e:	701a      	strb	r2, [r3, #0]
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	1c5a      	adds	r2, r3, #1
 800fe14:	60fa      	str	r2, [r7, #12]
 800fe16:	22c0      	movs	r2, #192	; 0xc0
 800fe18:	701a      	strb	r2, [r3, #0]
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	1c5a      	adds	r2, r3, #1
 800fe1e:	60fa      	str	r2, [r7, #12]
 800fe20:	2223      	movs	r2, #35	; 0x23
 800fe22:	701a      	strb	r2, [r3, #0]

    PUTCHAR(UPAP_AUTHREQ, outp);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	1c5a      	adds	r2, r3, #1
 800fe28:	60fa      	str	r2, [r7, #12]
 800fe2a:	2201      	movs	r2, #1
 800fe2c:	701a      	strb	r2, [r3, #0]
    PUTCHAR(++pcb->upap.us_id, outp);
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	1c5a      	adds	r2, r3, #1
 800fe32:	60fa      	str	r2, [r7, #12]
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 800fe3a:	3201      	adds	r2, #1
 800fe3c:	b2d1      	uxtb	r1, r2
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
 800fe44:	687a      	ldr	r2, [r7, #4]
 800fe46:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 800fe4a:	701a      	strb	r2, [r3, #0]
    PUTSHORT(outlen, outp);
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	1c5a      	adds	r2, r3, #1
 800fe50:	60fa      	str	r2, [r7, #12]
 800fe52:	697a      	ldr	r2, [r7, #20]
 800fe54:	1212      	asrs	r2, r2, #8
 800fe56:	b2d2      	uxtb	r2, r2
 800fe58:	701a      	strb	r2, [r3, #0]
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	1c5a      	adds	r2, r3, #1
 800fe5e:	60fa      	str	r2, [r7, #12]
 800fe60:	697a      	ldr	r2, [r7, #20]
 800fe62:	b2d2      	uxtb	r2, r2
 800fe64:	701a      	strb	r2, [r3, #0]
    PUTCHAR(pcb->upap.us_userlen, outp);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	1c5a      	adds	r2, r3, #1
 800fe6a:	60fa      	str	r2, [r7, #12]
 800fe6c:	687a      	ldr	r2, [r7, #4]
 800fe6e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800fe72:	701a      	strb	r2, [r3, #0]
    MEMCPY(outp, pcb->upap.us_user, pcb->upap.us_userlen);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fe7e:	461a      	mov	r2, r3
 800fe80:	68f8      	ldr	r0, [r7, #12]
 800fe82:	f000 fd85 	bl	8010990 <memcpy>
    INCPTR(pcb->upap.us_userlen, outp);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fe8c:	461a      	mov	r2, r3
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	4413      	add	r3, r2
 800fe92:	60fb      	str	r3, [r7, #12]
    PUTCHAR(pcb->upap.us_passwdlen, outp);
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	1c5a      	adds	r2, r3, #1
 800fe98:	60fa      	str	r2, [r7, #12]
 800fe9a:	687a      	ldr	r2, [r7, #4]
 800fe9c:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800fea0:	701a      	strb	r2, [r3, #0]
    MEMCPY(outp, pcb->upap.us_passwd, pcb->upap.us_passwdlen);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800feac:	461a      	mov	r2, r3
 800feae:	68f8      	ldr	r0, [r7, #12]
 800feb0:	f000 fd6e 	bl	8010990 <memcpy>

    ppp_write(pcb, p);
 800feb4:	6939      	ldr	r1, [r7, #16]
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f7fe ffde 	bl	800ee78 <ppp_write>

    TIMEOUT(upap_timeout, pcb, pcb->settings.pap_timeout_time);
 800febc:	6879      	ldr	r1, [r7, #4]
 800febe:	4810      	ldr	r0, [pc, #64]	; (800ff00 <upap_sauthreq+0x158>)
 800fec0:	f7fa f858 	bl	8009f74 <sys_untimeout>
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	7b1b      	ldrb	r3, [r3, #12]
 800fec8:	461a      	mov	r2, r3
 800feca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fece:	fb03 f302 	mul.w	r3, r3, r2
 800fed2:	687a      	ldr	r2, [r7, #4]
 800fed4:	490a      	ldr	r1, [pc, #40]	; (800ff00 <upap_sauthreq+0x158>)
 800fed6:	4618      	mov	r0, r3
 800fed8:	f7fa f820 	bl	8009f1c <sys_timeout>
    ++pcb->upap.us_transmits;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fee2:	3301      	adds	r3, #1
 800fee4:	b2da      	uxtb	r2, r3
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    pcb->upap.us_clientstate = UPAPCS_AUTHREQ;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2203      	movs	r2, #3
 800fef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fef4:	e000      	b.n	800fef8 <upap_sauthreq+0x150>
        return;
 800fef6:	bf00      	nop
}
 800fef8:	3718      	adds	r7, #24
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}
 800fefe:	bf00      	nop
 800ff00:	0800fb5b 	.word	0x0800fb5b

0800ff04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800ff04:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ff3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ff08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ff0a:	e003      	b.n	800ff14 <LoopCopyDataInit>

0800ff0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ff0c:	4b0c      	ldr	r3, [pc, #48]	; (800ff40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ff0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ff10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ff12:	3104      	adds	r1, #4

0800ff14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ff14:	480b      	ldr	r0, [pc, #44]	; (800ff44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ff16:	4b0c      	ldr	r3, [pc, #48]	; (800ff48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ff18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ff1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ff1c:	d3f6      	bcc.n	800ff0c <CopyDataInit>
  ldr  r2, =_sbss
 800ff1e:	4a0b      	ldr	r2, [pc, #44]	; (800ff4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ff20:	e002      	b.n	800ff28 <LoopFillZerobss>

0800ff22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ff22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ff24:	f842 3b04 	str.w	r3, [r2], #4

0800ff28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ff28:	4b09      	ldr	r3, [pc, #36]	; (800ff50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ff2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ff2c:	d3f9      	bcc.n	800ff22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ff2e:	f000 f8d5 	bl	80100dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ff32:	f000 fce9 	bl	8010908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ff36:	f7f1 fa45 	bl	80013c4 <main>
  bx  lr    
 800ff3a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800ff3c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800ff40:	08014348 	.word	0x08014348
  ldr  r0, =_sdata
 800ff44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ff48:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800ff4c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800ff50:	2000178c 	.word	0x2000178c

0800ff54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ff54:	e7fe      	b.n	800ff54 <ADC_IRQHandler>

0800ff56 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800ff56:	b480      	push	{r7}
 800ff58:	af00      	add	r7, sp, #0
}
 800ff5a:	bf00      	nop
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr

0800ff64 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800ff64:	b480      	push	{r7}
 800ff66:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800ff68:	e7fe      	b.n	800ff68 <HardFault_Handler+0x4>

0800ff6a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800ff6a:	b480      	push	{r7}
 800ff6c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800ff6e:	e7fe      	b.n	800ff6e <MemManage_Handler+0x4>

0800ff70 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800ff70:	b480      	push	{r7}
 800ff72:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800ff74:	e7fe      	b.n	800ff74 <BusFault_Handler+0x4>

0800ff76 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800ff76:	b480      	push	{r7}
 800ff78:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800ff7a:	e7fe      	b.n	800ff7a <UsageFault_Handler+0x4>

0800ff7c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	af00      	add	r7, sp, #0
}
 800ff80:	bf00      	nop
 800ff82:	46bd      	mov	sp, r7
 800ff84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff88:	4770      	bx	lr

0800ff8a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800ff8a:	b480      	push	{r7}
 800ff8c:	af00      	add	r7, sp, #0
}
 800ff8e:	bf00      	nop
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr

0800ff98 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800ff98:	b480      	push	{r7}
 800ff9a:	af00      	add	r7, sp, #0
}
 800ff9c:	bf00      	nop
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr

0800ffa6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800ffa6:	b480      	push	{r7}
 800ffa8:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800ffaa:	bf00      	nop
 800ffac:	46bd      	mov	sp, r7
 800ffae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb2:	4770      	bx	lr

0800ffb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	af00      	add	r7, sp, #0
	errno = ENOSYS;
 800ffb8:	4b04      	ldr	r3, [pc, #16]	; (800ffcc <_getpid+0x18>)
 800ffba:	2226      	movs	r2, #38	; 0x26
 800ffbc:	601a      	str	r2, [r3, #0]
	return -1;
 800ffbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr
 800ffcc:	20001788 	.word	0x20001788

0800ffd0 <_kill>:
  errno = ENOSYS;
  return -1;
}

int _kill(int32_t pid, int32_t sig)
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	b083      	sub	sp, #12
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 800ffda:	4b05      	ldr	r3, [pc, #20]	; (800fff0 <_kill+0x20>)
 800ffdc:	2226      	movs	r2, #38	; 0x26
 800ffde:	601a      	str	r2, [r3, #0]
	return -1;
 800ffe0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	370c      	adds	r7, #12
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffee:	4770      	bx	lr
 800fff0:	20001788 	.word	0x20001788

0800fff4 <_exit>:

void _exit(int32_t status)
{
 800fff4:	b480      	push	{r7}
 800fff6:	b083      	sub	sp, #12
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
	while (1) {}		/* Make sure we hang here */
 800fffc:	e7fe      	b.n	800fffc <_exit+0x8>
	...

08010000 <_write>:
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8010000:	b480      	push	{r7}
 8010002:	b085      	sub	sp, #20
 8010004:	af00      	add	r7, sp, #0
 8010006:	60f8      	str	r0, [r7, #12]
 8010008:	60b9      	str	r1, [r7, #8]
 801000a:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	
	errno = ENOSYS;
 801000c:	4b05      	ldr	r3, [pc, #20]	; (8010024 <_write+0x24>)
 801000e:	2226      	movs	r2, #38	; 0x26
 8010010:	601a      	str	r2, [r3, #0]
	return -1;
 8010012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010016:	4618      	mov	r0, r3
 8010018:	3714      	adds	r7, #20
 801001a:	46bd      	mov	sp, r7
 801001c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010020:	4770      	bx	lr
 8010022:	bf00      	nop
 8010024:	20001788 	.word	0x20001788

08010028 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8010028:	b480      	push	{r7}
 801002a:	b085      	sub	sp, #20
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8010030:	4b0b      	ldr	r3, [pc, #44]	; (8010060 <_sbrk+0x38>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d102      	bne.n	801003e <_sbrk+0x16>
		heap_end = & end;
 8010038:	4b09      	ldr	r3, [pc, #36]	; (8010060 <_sbrk+0x38>)
 801003a:	4a0a      	ldr	r2, [pc, #40]	; (8010064 <_sbrk+0x3c>)
 801003c:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 801003e:	4b08      	ldr	r3, [pc, #32]	; (8010060 <_sbrk+0x38>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8010044:	4b06      	ldr	r3, [pc, #24]	; (8010060 <_sbrk+0x38>)
 8010046:	681a      	ldr	r2, [r3, #0]
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	4413      	add	r3, r2
 801004c:	4a04      	ldr	r2, [pc, #16]	; (8010060 <_sbrk+0x38>)
 801004e:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8010050:	68fb      	ldr	r3, [r7, #12]
}
 8010052:	4618      	mov	r0, r3
 8010054:	3714      	adds	r7, #20
 8010056:	46bd      	mov	sp, r7
 8010058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005c:	4770      	bx	lr
 801005e:	bf00      	nop
 8010060:	20000404 	.word	0x20000404
 8010064:	2000178c 	.word	0x2000178c

08010068 <_close>:

int _close(int32_t file)
{
 8010068:	b480      	push	{r7}
 801006a:	b083      	sub	sp, #12
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8010070:	4b05      	ldr	r3, [pc, #20]	; (8010088 <_close+0x20>)
 8010072:	2226      	movs	r2, #38	; 0x26
 8010074:	601a      	str	r2, [r3, #0]
	return -1;
 8010076:	f04f 33ff 	mov.w	r3, #4294967295
}
 801007a:	4618      	mov	r0, r3
 801007c:	370c      	adds	r7, #12
 801007e:	46bd      	mov	sp, r7
 8010080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010084:	4770      	bx	lr
 8010086:	bf00      	nop
 8010088:	20001788 	.word	0x20001788

0801008c <_lseek>:
	errno = ENOSYS;
	return 0;
}

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 801008c:	b480      	push	{r7}
 801008e:	b085      	sub	sp, #20
 8010090:	af00      	add	r7, sp, #0
 8010092:	60f8      	str	r0, [r7, #12]
 8010094:	60b9      	str	r1, [r7, #8]
 8010096:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8010098:	4b05      	ldr	r3, [pc, #20]	; (80100b0 <_lseek+0x24>)
 801009a:	2226      	movs	r2, #38	; 0x26
 801009c:	601a      	str	r2, [r3, #0]
	return -1;
 801009e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3714      	adds	r7, #20
 80100a6:	46bd      	mov	sp, r7
 80100a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ac:	4770      	bx	lr
 80100ae:	bf00      	nop
 80100b0:	20001788 	.word	0x20001788

080100b4 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 80100b4:	b480      	push	{r7}
 80100b6:	b085      	sub	sp, #20
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	60b9      	str	r1, [r7, #8]
 80100be:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80100c0:	4b05      	ldr	r3, [pc, #20]	; (80100d8 <_read+0x24>)
 80100c2:	2226      	movs	r2, #38	; 0x26
 80100c4:	601a      	str	r2, [r3, #0]
	return -1;
 80100c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3714      	adds	r7, #20
 80100ce:	46bd      	mov	sp, r7
 80100d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d4:	4770      	bx	lr
 80100d6:	bf00      	nop
 80100d8:	20001788 	.word	0x20001788

080100dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80100e0:	4a16      	ldr	r2, [pc, #88]	; (801013c <SystemInit+0x60>)
 80100e2:	4b16      	ldr	r3, [pc, #88]	; (801013c <SystemInit+0x60>)
 80100e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80100ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80100f0:	4a13      	ldr	r2, [pc, #76]	; (8010140 <SystemInit+0x64>)
 80100f2:	4b13      	ldr	r3, [pc, #76]	; (8010140 <SystemInit+0x64>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	f043 0301 	orr.w	r3, r3, #1
 80100fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80100fc:	4b10      	ldr	r3, [pc, #64]	; (8010140 <SystemInit+0x64>)
 80100fe:	2200      	movs	r2, #0
 8010100:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8010102:	4a0f      	ldr	r2, [pc, #60]	; (8010140 <SystemInit+0x64>)
 8010104:	4b0e      	ldr	r3, [pc, #56]	; (8010140 <SystemInit+0x64>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 801010c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010110:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8010112:	4b0b      	ldr	r3, [pc, #44]	; (8010140 <SystemInit+0x64>)
 8010114:	4a0b      	ldr	r2, [pc, #44]	; (8010144 <SystemInit+0x68>)
 8010116:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8010118:	4a09      	ldr	r2, [pc, #36]	; (8010140 <SystemInit+0x64>)
 801011a:	4b09      	ldr	r3, [pc, #36]	; (8010140 <SystemInit+0x64>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010122:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010124:	4b06      	ldr	r3, [pc, #24]	; (8010140 <SystemInit+0x64>)
 8010126:	2200      	movs	r2, #0
 8010128:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 801012a:	f000 f80d 	bl	8010148 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801012e:	4b03      	ldr	r3, [pc, #12]	; (801013c <SystemInit+0x60>)
 8010130:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010134:	609a      	str	r2, [r3, #8]
#endif
}
 8010136:	bf00      	nop
 8010138:	bd80      	pop	{r7, pc}
 801013a:	bf00      	nop
 801013c:	e000ed00 	.word	0xe000ed00
 8010140:	40023800 	.word	0x40023800
 8010144:	24003010 	.word	0x24003010

08010148 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 801014e:	2300      	movs	r3, #0
 8010150:	607b      	str	r3, [r7, #4]
 8010152:	2300      	movs	r3, #0
 8010154:	603b      	str	r3, [r7, #0]
  //RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8010156:	4b33      	ldr	r3, [pc, #204]	; (8010224 <SetSysClock+0xdc>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801015e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	3301      	adds	r3, #1
 8010164:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d103      	bne.n	8010174 <SetSysClock+0x2c>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8010172:	d1f0      	bne.n	8010156 <SetSysClock+0xe>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8010174:	4b2b      	ldr	r3, [pc, #172]	; (8010224 <SetSysClock+0xdc>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801017c:	2b00      	cmp	r3, #0
 801017e:	d002      	beq.n	8010186 <SetSysClock+0x3e>
  {
    HSEStatus = (uint32_t)0x01;
 8010180:	2301      	movs	r3, #1
 8010182:	603b      	str	r3, [r7, #0]
 8010184:	e001      	b.n	801018a <SetSysClock+0x42>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8010186:	2300      	movs	r3, #0
 8010188:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	2b01      	cmp	r3, #1
 801018e:	d142      	bne.n	8010216 <SetSysClock+0xce>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8010190:	4a24      	ldr	r2, [pc, #144]	; (8010224 <SetSysClock+0xdc>)
 8010192:	4b24      	ldr	r3, [pc, #144]	; (8010224 <SetSysClock+0xdc>)
 8010194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801019a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 801019c:	4a22      	ldr	r2, [pc, #136]	; (8010228 <SetSysClock+0xe0>)
 801019e:	4b22      	ldr	r3, [pc, #136]	; (8010228 <SetSysClock+0xe0>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80101a6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80101a8:	4a1e      	ldr	r2, [pc, #120]	; (8010224 <SetSysClock+0xdc>)
 80101aa:	4b1e      	ldr	r3, [pc, #120]	; (8010224 <SetSysClock+0xdc>)
 80101ac:	689b      	ldr	r3, [r3, #8]
 80101ae:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80101b0:	4a1c      	ldr	r2, [pc, #112]	; (8010224 <SetSysClock+0xdc>)
 80101b2:	4b1c      	ldr	r3, [pc, #112]	; (8010224 <SetSysClock+0xdc>)
 80101b4:	689b      	ldr	r3, [r3, #8]
 80101b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80101ba:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80101bc:	4a19      	ldr	r2, [pc, #100]	; (8010224 <SetSysClock+0xdc>)
 80101be:	4b19      	ldr	r3, [pc, #100]	; (8010224 <SetSysClock+0xdc>)
 80101c0:	689b      	ldr	r3, [r3, #8]
 80101c2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80101c6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80101c8:	4b16      	ldr	r3, [pc, #88]	; (8010224 <SetSysClock+0xdc>)
 80101ca:	4a18      	ldr	r2, [pc, #96]	; (801022c <SetSysClock+0xe4>)
 80101cc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80101ce:	4a15      	ldr	r2, [pc, #84]	; (8010224 <SetSysClock+0xdc>)
 80101d0:	4b14      	ldr	r3, [pc, #80]	; (8010224 <SetSysClock+0xdc>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80101d8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80101da:	bf00      	nop
 80101dc:	4b11      	ldr	r3, [pc, #68]	; (8010224 <SetSysClock+0xdc>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d0f9      	beq.n	80101dc <SetSysClock+0x94>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80101e8:	4b11      	ldr	r3, [pc, #68]	; (8010230 <SetSysClock+0xe8>)
 80101ea:	f240 7205 	movw	r2, #1797	; 0x705
 80101ee:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80101f0:	4a0c      	ldr	r2, [pc, #48]	; (8010224 <SetSysClock+0xdc>)
 80101f2:	4b0c      	ldr	r3, [pc, #48]	; (8010224 <SetSysClock+0xdc>)
 80101f4:	689b      	ldr	r3, [r3, #8]
 80101f6:	f023 0303 	bic.w	r3, r3, #3
 80101fa:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80101fc:	4a09      	ldr	r2, [pc, #36]	; (8010224 <SetSysClock+0xdc>)
 80101fe:	4b09      	ldr	r3, [pc, #36]	; (8010224 <SetSysClock+0xdc>)
 8010200:	689b      	ldr	r3, [r3, #8]
 8010202:	f043 0302 	orr.w	r3, r3, #2
 8010206:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8010208:	bf00      	nop
 801020a:	4b06      	ldr	r3, [pc, #24]	; (8010224 <SetSysClock+0xdc>)
 801020c:	689b      	ldr	r3, [r3, #8]
 801020e:	f003 030c 	and.w	r3, r3, #12
 8010212:	2b08      	cmp	r3, #8
 8010214:	d1f9      	bne.n	801020a <SetSysClock+0xc2>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8010216:	bf00      	nop
 8010218:	370c      	adds	r7, #12
 801021a:	46bd      	mov	sp, r7
 801021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010220:	4770      	bx	lr
 8010222:	bf00      	nop
 8010224:	40023800 	.word	0x40023800
 8010228:	40007000 	.word	0x40007000
 801022c:	07405419 	.word	0x07405419
 8010230:	40023c00 	.word	0x40023c00

08010234 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8010234:	b480      	push	{r7}
 8010236:	b087      	sub	sp, #28
 8010238:	af00      	add	r7, sp, #0
 801023a:	60f8      	str	r0, [r7, #12]
 801023c:	60b9      	str	r1, [r7, #8]
 801023e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8010240:	2301      	movs	r3, #1
 8010242:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8010244:	e004      	b.n	8010250 <ts_itoa+0x1c>
		div *= base;
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	687a      	ldr	r2, [r7, #4]
 801024a:	fb02 f303 	mul.w	r3, r2, r3
 801024e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8010250:	697b      	ldr	r3, [r7, #20]
 8010252:	68ba      	ldr	r2, [r7, #8]
 8010254:	fbb2 f2f3 	udiv	r2, r2, r3
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	429a      	cmp	r2, r3
 801025c:	d2f3      	bcs.n	8010246 <ts_itoa+0x12>

	while (div != 0)
 801025e:	e029      	b.n	80102b4 <ts_itoa+0x80>
	{
		int num = d/div;
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	68ba      	ldr	r2, [r7, #8]
 8010264:	fbb2 f3f3 	udiv	r3, r2, r3
 8010268:	613b      	str	r3, [r7, #16]
		d = d%div;
 801026a:	697a      	ldr	r2, [r7, #20]
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010272:	fb02 f201 	mul.w	r2, r2, r1
 8010276:	1a9b      	subs	r3, r3, r2
 8010278:	60bb      	str	r3, [r7, #8]
		div /= base;
 801027a:	697a      	ldr	r2, [r7, #20]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010282:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8010284:	693b      	ldr	r3, [r7, #16]
 8010286:	2b09      	cmp	r3, #9
 8010288:	dd0a      	ble.n	80102a0 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	1c59      	adds	r1, r3, #1
 8010290:	68fa      	ldr	r2, [r7, #12]
 8010292:	6011      	str	r1, [r2, #0]
 8010294:	693a      	ldr	r2, [r7, #16]
 8010296:	b2d2      	uxtb	r2, r2
 8010298:	3237      	adds	r2, #55	; 0x37
 801029a:	b2d2      	uxtb	r2, r2
 801029c:	701a      	strb	r2, [r3, #0]
 801029e:	e009      	b.n	80102b4 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	1c59      	adds	r1, r3, #1
 80102a6:	68fa      	ldr	r2, [r7, #12]
 80102a8:	6011      	str	r1, [r2, #0]
 80102aa:	693a      	ldr	r2, [r7, #16]
 80102ac:	b2d2      	uxtb	r2, r2
 80102ae:	3230      	adds	r2, #48	; 0x30
 80102b0:	b2d2      	uxtb	r2, r2
 80102b2:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d1d2      	bne.n	8010260 <ts_itoa+0x2c>
	}
}
 80102ba:	bf00      	nop
 80102bc:	371c      	adds	r7, #28
 80102be:	46bd      	mov	sp, r7
 80102c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c4:	4770      	bx	lr

080102c6 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80102c6:	b580      	push	{r7, lr}
 80102c8:	b088      	sub	sp, #32
 80102ca:	af00      	add	r7, sp, #0
 80102cc:	60f8      	str	r0, [r7, #12]
 80102ce:	60b9      	str	r1, [r7, #8]
 80102d0:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80102d6:	e07d      	b.n	80103d4 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	2b25      	cmp	r3, #37	; 0x25
 80102de:	d171      	bne.n	80103c4 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	3301      	adds	r3, #1
 80102e4:	60bb      	str	r3, [r7, #8]
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	781b      	ldrb	r3, [r3, #0]
 80102ea:	2b64      	cmp	r3, #100	; 0x64
 80102ec:	d01e      	beq.n	801032c <ts_formatstring+0x66>
 80102ee:	2b64      	cmp	r3, #100	; 0x64
 80102f0:	dc06      	bgt.n	8010300 <ts_formatstring+0x3a>
 80102f2:	2b58      	cmp	r3, #88	; 0x58
 80102f4:	d050      	beq.n	8010398 <ts_formatstring+0xd2>
 80102f6:	2b63      	cmp	r3, #99	; 0x63
 80102f8:	d00e      	beq.n	8010318 <ts_formatstring+0x52>
 80102fa:	2b25      	cmp	r3, #37	; 0x25
 80102fc:	d058      	beq.n	80103b0 <ts_formatstring+0xea>
 80102fe:	e05d      	b.n	80103bc <ts_formatstring+0xf6>
 8010300:	2b73      	cmp	r3, #115	; 0x73
 8010302:	d02b      	beq.n	801035c <ts_formatstring+0x96>
 8010304:	2b73      	cmp	r3, #115	; 0x73
 8010306:	dc02      	bgt.n	801030e <ts_formatstring+0x48>
 8010308:	2b69      	cmp	r3, #105	; 0x69
 801030a:	d00f      	beq.n	801032c <ts_formatstring+0x66>
 801030c:	e056      	b.n	80103bc <ts_formatstring+0xf6>
 801030e:	2b75      	cmp	r3, #117	; 0x75
 8010310:	d037      	beq.n	8010382 <ts_formatstring+0xbc>
 8010312:	2b78      	cmp	r3, #120	; 0x78
 8010314:	d040      	beq.n	8010398 <ts_formatstring+0xd2>
 8010316:	e051      	b.n	80103bc <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	1c5a      	adds	r2, r3, #1
 801031c:	60fa      	str	r2, [r7, #12]
 801031e:	687a      	ldr	r2, [r7, #4]
 8010320:	1d11      	adds	r1, r2, #4
 8010322:	6079      	str	r1, [r7, #4]
 8010324:	6812      	ldr	r2, [r2, #0]
 8010326:	b2d2      	uxtb	r2, r2
 8010328:	701a      	strb	r2, [r3, #0]
				break;
 801032a:	e047      	b.n	80103bc <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	1d1a      	adds	r2, r3, #4
 8010330:	607a      	str	r2, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8010336:	69fb      	ldr	r3, [r7, #28]
 8010338:	2b00      	cmp	r3, #0
 801033a:	da07      	bge.n	801034c <ts_formatstring+0x86>
					{
						val *= -1;
 801033c:	69fb      	ldr	r3, [r7, #28]
 801033e:	425b      	negs	r3, r3
 8010340:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	1c5a      	adds	r2, r3, #1
 8010346:	60fa      	str	r2, [r7, #12]
 8010348:	222d      	movs	r2, #45	; 0x2d
 801034a:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 801034c:	69f9      	ldr	r1, [r7, #28]
 801034e:	f107 030c 	add.w	r3, r7, #12
 8010352:	220a      	movs	r2, #10
 8010354:	4618      	mov	r0, r3
 8010356:	f7ff ff6d 	bl	8010234 <ts_itoa>
				}
				break;
 801035a:	e02f      	b.n	80103bc <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	1d1a      	adds	r2, r3, #4
 8010360:	607a      	str	r2, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8010366:	e007      	b.n	8010378 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	1c5a      	adds	r2, r3, #1
 801036c:	60fa      	str	r2, [r7, #12]
 801036e:	69ba      	ldr	r2, [r7, #24]
 8010370:	1c51      	adds	r1, r2, #1
 8010372:	61b9      	str	r1, [r7, #24]
 8010374:	7812      	ldrb	r2, [r2, #0]
 8010376:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8010378:	69bb      	ldr	r3, [r7, #24]
 801037a:	781b      	ldrb	r3, [r3, #0]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d1f3      	bne.n	8010368 <ts_formatstring+0xa2>
					}
				}
				break;
 8010380:	e01c      	b.n	80103bc <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	1d1a      	adds	r2, r3, #4
 8010386:	607a      	str	r2, [r7, #4]
 8010388:	6819      	ldr	r1, [r3, #0]
 801038a:	f107 030c 	add.w	r3, r7, #12
 801038e:	220a      	movs	r2, #10
 8010390:	4618      	mov	r0, r3
 8010392:	f7ff ff4f 	bl	8010234 <ts_itoa>
				break;
 8010396:	e011      	b.n	80103bc <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	1d1a      	adds	r2, r3, #4
 801039c:	607a      	str	r2, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	4619      	mov	r1, r3
 80103a2:	f107 030c 	add.w	r3, r7, #12
 80103a6:	2210      	movs	r2, #16
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7ff ff43 	bl	8010234 <ts_itoa>
				break;
 80103ae:	e005      	b.n	80103bc <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	1c5a      	adds	r2, r3, #1
 80103b4:	60fa      	str	r2, [r7, #12]
 80103b6:	2225      	movs	r2, #37	; 0x25
 80103b8:	701a      	strb	r2, [r3, #0]
				  break;
 80103ba:	bf00      	nop
			}
			fmt++;
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	3301      	adds	r3, #1
 80103c0:	60bb      	str	r3, [r7, #8]
 80103c2:	e007      	b.n	80103d4 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	1c5a      	adds	r2, r3, #1
 80103c8:	60fa      	str	r2, [r7, #12]
 80103ca:	68ba      	ldr	r2, [r7, #8]
 80103cc:	1c51      	adds	r1, r2, #1
 80103ce:	60b9      	str	r1, [r7, #8]
 80103d0:	7812      	ldrb	r2, [r2, #0]
 80103d2:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	781b      	ldrb	r3, [r3, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	f47f af7d 	bne.w	80102d8 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2200      	movs	r2, #0
 80103e2:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	461a      	mov	r2, r3
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	1ad3      	subs	r3, r2, r3
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3720      	adds	r7, #32
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b085      	sub	sp, #20
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
 80103fc:	6039      	str	r1, [r7, #0]
	int length = 0;
 80103fe:	2300      	movs	r3, #0
 8010400:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8010402:	e081      	b.n	8010508 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	2b25      	cmp	r3, #37	; 0x25
 801040a:	d177      	bne.n	80104fc <ts_formatlength+0x108>
		{
			++fmt;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	3301      	adds	r3, #1
 8010410:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	3b58      	subs	r3, #88	; 0x58
 8010418:	2b20      	cmp	r3, #32
 801041a:	d86a      	bhi.n	80104f2 <ts_formatlength+0xfe>
 801041c:	a201      	add	r2, pc, #4	; (adr r2, 8010424 <ts_formatlength+0x30>)
 801041e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010422:	bf00      	nop
 8010424:	080104e5 	.word	0x080104e5
 8010428:	080104f3 	.word	0x080104f3
 801042c:	080104f3 	.word	0x080104f3
 8010430:	080104f3 	.word	0x080104f3
 8010434:	080104f3 	.word	0x080104f3
 8010438:	080104f3 	.word	0x080104f3
 801043c:	080104f3 	.word	0x080104f3
 8010440:	080104f3 	.word	0x080104f3
 8010444:	080104f3 	.word	0x080104f3
 8010448:	080104f3 	.word	0x080104f3
 801044c:	080104f3 	.word	0x080104f3
 8010450:	080104a9 	.word	0x080104a9
 8010454:	080104b7 	.word	0x080104b7
 8010458:	080104f3 	.word	0x080104f3
 801045c:	080104f3 	.word	0x080104f3
 8010460:	080104f3 	.word	0x080104f3
 8010464:	080104f3 	.word	0x080104f3
 8010468:	080104b7 	.word	0x080104b7
 801046c:	080104f3 	.word	0x080104f3
 8010470:	080104f3 	.word	0x080104f3
 8010474:	080104f3 	.word	0x080104f3
 8010478:	080104f3 	.word	0x080104f3
 801047c:	080104f3 	.word	0x080104f3
 8010480:	080104f3 	.word	0x080104f3
 8010484:	080104f3 	.word	0x080104f3
 8010488:	080104f3 	.word	0x080104f3
 801048c:	080104f3 	.word	0x080104f3
 8010490:	080104c5 	.word	0x080104c5
 8010494:	080104f3 	.word	0x080104f3
 8010498:	080104b7 	.word	0x080104b7
 801049c:	080104f3 	.word	0x080104f3
 80104a0:	080104f3 	.word	0x080104f3
 80104a4:	080104e5 	.word	0x080104e5
			{
			  case 'c':
		  		  va_arg(va, int);
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	3304      	adds	r3, #4
 80104ac:	603b      	str	r3, [r7, #0]
				  ++length;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	3301      	adds	r3, #1
 80104b2:	60fb      	str	r3, [r7, #12]
				  break;
 80104b4:	e025      	b.n	8010502 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	330b      	adds	r3, #11
 80104ba:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	3304      	adds	r3, #4
 80104c0:	603b      	str	r3, [r7, #0]
				  break;
 80104c2:	e01e      	b.n	8010502 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	1d1a      	adds	r2, r3, #4
 80104c8:	603a      	str	r2, [r7, #0]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80104ce:	e002      	b.n	80104d6 <ts_formatlength+0xe2>
			  			  ++length;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	3301      	adds	r3, #1
 80104d4:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	1c5a      	adds	r2, r3, #1
 80104da:	60ba      	str	r2, [r7, #8]
 80104dc:	781b      	ldrb	r3, [r3, #0]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d1f6      	bne.n	80104d0 <ts_formatlength+0xdc>
			  	  }
				  break;
 80104e2:	e00e      	b.n	8010502 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	3308      	adds	r3, #8
 80104e8:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	3304      	adds	r3, #4
 80104ee:	603b      	str	r3, [r7, #0]
				  break;
 80104f0:	e007      	b.n	8010502 <ts_formatlength+0x10e>
			  default:
				  ++length;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	3301      	adds	r3, #1
 80104f6:	60fb      	str	r3, [r7, #12]
				  break;
 80104f8:	bf00      	nop
 80104fa:	e002      	b.n	8010502 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	3301      	adds	r3, #1
 8010500:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	3301      	adds	r3, #1
 8010506:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	2b00      	cmp	r3, #0
 801050e:	f47f af79 	bne.w	8010404 <ts_formatlength+0x10>
	}
	return length;
 8010512:	68fb      	ldr	r3, [r7, #12]
}
 8010514:	4618      	mov	r0, r3
 8010516:	3714      	adds	r7, #20
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr

08010520 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8010520:	b40e      	push	{r1, r2, r3}
 8010522:	b580      	push	{r7, lr}
 8010524:	b085      	sub	sp, #20
 8010526:	af00      	add	r7, sp, #0
 8010528:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 801052a:	f107 0320 	add.w	r3, r7, #32
 801052e:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8010530:	68ba      	ldr	r2, [r7, #8]
 8010532:	69f9      	ldr	r1, [r7, #28]
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f7ff fec6 	bl	80102c6 <ts_formatstring>
 801053a:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 801053c:	68fb      	ldr	r3, [r7, #12]
}
 801053e:	4618      	mov	r0, r3
 8010540:	3714      	adds	r7, #20
 8010542:	46bd      	mov	sp, r7
 8010544:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010548:	b003      	add	sp, #12
 801054a:	4770      	bx	lr

0801054c <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 801054c:	b40f      	push	{r0, r1, r2, r3}
 801054e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010552:	b085      	sub	sp, #20
 8010554:	af00      	add	r7, sp, #0
	int length = 0;
 8010556:	2300      	movs	r3, #0
 8010558:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 801055a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801055e:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8010560:	6839      	ldr	r1, [r7, #0]
 8010562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010564:	f7ff ff46 	bl	80103f4 <ts_formatlength>
 8010568:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 801056a:	466b      	mov	r3, sp
 801056c:	461e      	mov	r6, r3
		char buf[length];
 801056e:	68f9      	ldr	r1, [r7, #12]
 8010570:	1e4b      	subs	r3, r1, #1
 8010572:	60bb      	str	r3, [r7, #8]
 8010574:	460b      	mov	r3, r1
 8010576:	461a      	mov	r2, r3
 8010578:	f04f 0300 	mov.w	r3, #0
 801057c:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8010580:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8010584:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8010588:	460b      	mov	r3, r1
 801058a:	461a      	mov	r2, r3
 801058c:	f04f 0300 	mov.w	r3, #0
 8010590:	00dd      	lsls	r5, r3, #3
 8010592:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010596:	00d4      	lsls	r4, r2, #3
 8010598:	460b      	mov	r3, r1
 801059a:	3307      	adds	r3, #7
 801059c:	08db      	lsrs	r3, r3, #3
 801059e:	00db      	lsls	r3, r3, #3
 80105a0:	ebad 0d03 	sub.w	sp, sp, r3
 80105a4:	466b      	mov	r3, sp
 80105a6:	3300      	adds	r3, #0
 80105a8:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 80105aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80105ae:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	683a      	ldr	r2, [r7, #0]
 80105b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7ff fe85 	bl	80102c6 <ts_formatstring>
 80105bc:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	68fa      	ldr	r2, [r7, #12]
 80105c2:	4619      	mov	r1, r3
 80105c4:	2001      	movs	r0, #1
 80105c6:	f7ff fd1b 	bl	8010000 <_write>
 80105ca:	60f8      	str	r0, [r7, #12]
 80105cc:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 80105ce:	68fb      	ldr	r3, [r7, #12]
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3714      	adds	r7, #20
 80105d4:	46bd      	mov	sp, r7
 80105d6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105da:	b004      	add	sp, #16
 80105dc:	4770      	bx	lr

080105de <abort>:
 80105de:	b508      	push	{r3, lr}
 80105e0:	2006      	movs	r0, #6
 80105e2:	f000 fae7 	bl	8010bb4 <raise>
 80105e6:	2001      	movs	r0, #1
 80105e8:	f7ff fd04 	bl	800fff4 <_exit>

080105ec <__sflush_r>:
 80105ec:	898a      	ldrh	r2, [r1, #12]
 80105ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105f2:	4605      	mov	r5, r0
 80105f4:	0710      	lsls	r0, r2, #28
 80105f6:	460c      	mov	r4, r1
 80105f8:	d45a      	bmi.n	80106b0 <__sflush_r+0xc4>
 80105fa:	684b      	ldr	r3, [r1, #4]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	dc05      	bgt.n	801060c <__sflush_r+0x20>
 8010600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010602:	2b00      	cmp	r3, #0
 8010604:	dc02      	bgt.n	801060c <__sflush_r+0x20>
 8010606:	2000      	movs	r0, #0
 8010608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801060c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801060e:	2e00      	cmp	r6, #0
 8010610:	d0f9      	beq.n	8010606 <__sflush_r+0x1a>
 8010612:	2300      	movs	r3, #0
 8010614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010618:	682f      	ldr	r7, [r5, #0]
 801061a:	602b      	str	r3, [r5, #0]
 801061c:	d033      	beq.n	8010686 <__sflush_r+0x9a>
 801061e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010620:	89a3      	ldrh	r3, [r4, #12]
 8010622:	075a      	lsls	r2, r3, #29
 8010624:	d505      	bpl.n	8010632 <__sflush_r+0x46>
 8010626:	6863      	ldr	r3, [r4, #4]
 8010628:	1ac0      	subs	r0, r0, r3
 801062a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801062c:	b10b      	cbz	r3, 8010632 <__sflush_r+0x46>
 801062e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010630:	1ac0      	subs	r0, r0, r3
 8010632:	2300      	movs	r3, #0
 8010634:	4602      	mov	r2, r0
 8010636:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010638:	6a21      	ldr	r1, [r4, #32]
 801063a:	4628      	mov	r0, r5
 801063c:	47b0      	blx	r6
 801063e:	1c43      	adds	r3, r0, #1
 8010640:	89a3      	ldrh	r3, [r4, #12]
 8010642:	d106      	bne.n	8010652 <__sflush_r+0x66>
 8010644:	6829      	ldr	r1, [r5, #0]
 8010646:	291d      	cmp	r1, #29
 8010648:	d84b      	bhi.n	80106e2 <__sflush_r+0xf6>
 801064a:	4a2b      	ldr	r2, [pc, #172]	; (80106f8 <__sflush_r+0x10c>)
 801064c:	40ca      	lsrs	r2, r1
 801064e:	07d6      	lsls	r6, r2, #31
 8010650:	d547      	bpl.n	80106e2 <__sflush_r+0xf6>
 8010652:	2200      	movs	r2, #0
 8010654:	6062      	str	r2, [r4, #4]
 8010656:	04d9      	lsls	r1, r3, #19
 8010658:	6922      	ldr	r2, [r4, #16]
 801065a:	6022      	str	r2, [r4, #0]
 801065c:	d504      	bpl.n	8010668 <__sflush_r+0x7c>
 801065e:	1c42      	adds	r2, r0, #1
 8010660:	d101      	bne.n	8010666 <__sflush_r+0x7a>
 8010662:	682b      	ldr	r3, [r5, #0]
 8010664:	b903      	cbnz	r3, 8010668 <__sflush_r+0x7c>
 8010666:	6560      	str	r0, [r4, #84]	; 0x54
 8010668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801066a:	602f      	str	r7, [r5, #0]
 801066c:	2900      	cmp	r1, #0
 801066e:	d0ca      	beq.n	8010606 <__sflush_r+0x1a>
 8010670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010674:	4299      	cmp	r1, r3
 8010676:	d002      	beq.n	801067e <__sflush_r+0x92>
 8010678:	4628      	mov	r0, r5
 801067a:	f000 f9b7 	bl	80109ec <_free_r>
 801067e:	2000      	movs	r0, #0
 8010680:	6360      	str	r0, [r4, #52]	; 0x34
 8010682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010686:	6a21      	ldr	r1, [r4, #32]
 8010688:	2301      	movs	r3, #1
 801068a:	4628      	mov	r0, r5
 801068c:	47b0      	blx	r6
 801068e:	1c41      	adds	r1, r0, #1
 8010690:	d1c6      	bne.n	8010620 <__sflush_r+0x34>
 8010692:	682b      	ldr	r3, [r5, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d0c3      	beq.n	8010620 <__sflush_r+0x34>
 8010698:	2b1d      	cmp	r3, #29
 801069a:	d001      	beq.n	80106a0 <__sflush_r+0xb4>
 801069c:	2b16      	cmp	r3, #22
 801069e:	d101      	bne.n	80106a4 <__sflush_r+0xb8>
 80106a0:	602f      	str	r7, [r5, #0]
 80106a2:	e7b0      	b.n	8010606 <__sflush_r+0x1a>
 80106a4:	89a3      	ldrh	r3, [r4, #12]
 80106a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106aa:	81a3      	strh	r3, [r4, #12]
 80106ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106b0:	690f      	ldr	r7, [r1, #16]
 80106b2:	2f00      	cmp	r7, #0
 80106b4:	d0a7      	beq.n	8010606 <__sflush_r+0x1a>
 80106b6:	0793      	lsls	r3, r2, #30
 80106b8:	680e      	ldr	r6, [r1, #0]
 80106ba:	bf08      	it	eq
 80106bc:	694b      	ldreq	r3, [r1, #20]
 80106be:	600f      	str	r7, [r1, #0]
 80106c0:	bf18      	it	ne
 80106c2:	2300      	movne	r3, #0
 80106c4:	eba6 0807 	sub.w	r8, r6, r7
 80106c8:	608b      	str	r3, [r1, #8]
 80106ca:	f1b8 0f00 	cmp.w	r8, #0
 80106ce:	dd9a      	ble.n	8010606 <__sflush_r+0x1a>
 80106d0:	4643      	mov	r3, r8
 80106d2:	463a      	mov	r2, r7
 80106d4:	6a21      	ldr	r1, [r4, #32]
 80106d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80106d8:	4628      	mov	r0, r5
 80106da:	47b0      	blx	r6
 80106dc:	2800      	cmp	r0, #0
 80106de:	dc07      	bgt.n	80106f0 <__sflush_r+0x104>
 80106e0:	89a3      	ldrh	r3, [r4, #12]
 80106e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106e6:	81a3      	strh	r3, [r4, #12]
 80106e8:	f04f 30ff 	mov.w	r0, #4294967295
 80106ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106f0:	4407      	add	r7, r0
 80106f2:	eba8 0800 	sub.w	r8, r8, r0
 80106f6:	e7e8      	b.n	80106ca <__sflush_r+0xde>
 80106f8:	20400001 	.word	0x20400001

080106fc <_fflush_r>:
 80106fc:	b538      	push	{r3, r4, r5, lr}
 80106fe:	690b      	ldr	r3, [r1, #16]
 8010700:	4605      	mov	r5, r0
 8010702:	460c      	mov	r4, r1
 8010704:	b1db      	cbz	r3, 801073e <_fflush_r+0x42>
 8010706:	b118      	cbz	r0, 8010710 <_fflush_r+0x14>
 8010708:	6983      	ldr	r3, [r0, #24]
 801070a:	b90b      	cbnz	r3, 8010710 <_fflush_r+0x14>
 801070c:	f000 f872 	bl	80107f4 <__sinit>
 8010710:	4b0c      	ldr	r3, [pc, #48]	; (8010744 <_fflush_r+0x48>)
 8010712:	429c      	cmp	r4, r3
 8010714:	d109      	bne.n	801072a <_fflush_r+0x2e>
 8010716:	686c      	ldr	r4, [r5, #4]
 8010718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801071c:	b17b      	cbz	r3, 801073e <_fflush_r+0x42>
 801071e:	4621      	mov	r1, r4
 8010720:	4628      	mov	r0, r5
 8010722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010726:	f7ff bf61 	b.w	80105ec <__sflush_r>
 801072a:	4b07      	ldr	r3, [pc, #28]	; (8010748 <_fflush_r+0x4c>)
 801072c:	429c      	cmp	r4, r3
 801072e:	d101      	bne.n	8010734 <_fflush_r+0x38>
 8010730:	68ac      	ldr	r4, [r5, #8]
 8010732:	e7f1      	b.n	8010718 <_fflush_r+0x1c>
 8010734:	4b05      	ldr	r3, [pc, #20]	; (801074c <_fflush_r+0x50>)
 8010736:	429c      	cmp	r4, r3
 8010738:	bf08      	it	eq
 801073a:	68ec      	ldreq	r4, [r5, #12]
 801073c:	e7ec      	b.n	8010718 <_fflush_r+0x1c>
 801073e:	2000      	movs	r0, #0
 8010740:	bd38      	pop	{r3, r4, r5, pc}
 8010742:	bf00      	nop
 8010744:	080141bc 	.word	0x080141bc
 8010748:	080141dc 	.word	0x080141dc
 801074c:	0801419c 	.word	0x0801419c

08010750 <fflush>:
 8010750:	4601      	mov	r1, r0
 8010752:	b920      	cbnz	r0, 801075e <fflush+0xe>
 8010754:	4b04      	ldr	r3, [pc, #16]	; (8010768 <fflush+0x18>)
 8010756:	4905      	ldr	r1, [pc, #20]	; (801076c <fflush+0x1c>)
 8010758:	6818      	ldr	r0, [r3, #0]
 801075a:	f000 b8b7 	b.w	80108cc <_fwalk_reent>
 801075e:	4b04      	ldr	r3, [pc, #16]	; (8010770 <fflush+0x20>)
 8010760:	6818      	ldr	r0, [r3, #0]
 8010762:	f7ff bfcb 	b.w	80106fc <_fflush_r>
 8010766:	bf00      	nop
 8010768:	080141fc 	.word	0x080141fc
 801076c:	080106fd 	.word	0x080106fd
 8010770:	2000000c 	.word	0x2000000c

08010774 <_cleanup_r>:
 8010774:	4901      	ldr	r1, [pc, #4]	; (801077c <_cleanup_r+0x8>)
 8010776:	f000 b8a9 	b.w	80108cc <_fwalk_reent>
 801077a:	bf00      	nop
 801077c:	080106fd 	.word	0x080106fd

08010780 <std.isra.0>:
 8010780:	2300      	movs	r3, #0
 8010782:	b510      	push	{r4, lr}
 8010784:	4604      	mov	r4, r0
 8010786:	6003      	str	r3, [r0, #0]
 8010788:	6043      	str	r3, [r0, #4]
 801078a:	6083      	str	r3, [r0, #8]
 801078c:	8181      	strh	r1, [r0, #12]
 801078e:	6643      	str	r3, [r0, #100]	; 0x64
 8010790:	81c2      	strh	r2, [r0, #14]
 8010792:	6103      	str	r3, [r0, #16]
 8010794:	6143      	str	r3, [r0, #20]
 8010796:	6183      	str	r3, [r0, #24]
 8010798:	4619      	mov	r1, r3
 801079a:	2208      	movs	r2, #8
 801079c:	305c      	adds	r0, #92	; 0x5c
 801079e:	f000 f91c 	bl	80109da <memset>
 80107a2:	4b05      	ldr	r3, [pc, #20]	; (80107b8 <std.isra.0+0x38>)
 80107a4:	6263      	str	r3, [r4, #36]	; 0x24
 80107a6:	4b05      	ldr	r3, [pc, #20]	; (80107bc <std.isra.0+0x3c>)
 80107a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80107aa:	4b05      	ldr	r3, [pc, #20]	; (80107c0 <std.isra.0+0x40>)
 80107ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80107ae:	4b05      	ldr	r3, [pc, #20]	; (80107c4 <std.isra.0+0x44>)
 80107b0:	6224      	str	r4, [r4, #32]
 80107b2:	6323      	str	r3, [r4, #48]	; 0x30
 80107b4:	bd10      	pop	{r4, pc}
 80107b6:	bf00      	nop
 80107b8:	08010c55 	.word	0x08010c55
 80107bc:	08010c77 	.word	0x08010c77
 80107c0:	08010caf 	.word	0x08010caf
 80107c4:	08010cd3 	.word	0x08010cd3

080107c8 <__sfmoreglue>:
 80107c8:	b570      	push	{r4, r5, r6, lr}
 80107ca:	1e4a      	subs	r2, r1, #1
 80107cc:	2568      	movs	r5, #104	; 0x68
 80107ce:	4355      	muls	r5, r2
 80107d0:	460e      	mov	r6, r1
 80107d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80107d6:	f000 f957 	bl	8010a88 <_malloc_r>
 80107da:	4604      	mov	r4, r0
 80107dc:	b140      	cbz	r0, 80107f0 <__sfmoreglue+0x28>
 80107de:	2100      	movs	r1, #0
 80107e0:	e880 0042 	stmia.w	r0, {r1, r6}
 80107e4:	300c      	adds	r0, #12
 80107e6:	60a0      	str	r0, [r4, #8]
 80107e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80107ec:	f000 f8f5 	bl	80109da <memset>
 80107f0:	4620      	mov	r0, r4
 80107f2:	bd70      	pop	{r4, r5, r6, pc}

080107f4 <__sinit>:
 80107f4:	6983      	ldr	r3, [r0, #24]
 80107f6:	b510      	push	{r4, lr}
 80107f8:	4604      	mov	r4, r0
 80107fa:	bb33      	cbnz	r3, 801084a <__sinit+0x56>
 80107fc:	6483      	str	r3, [r0, #72]	; 0x48
 80107fe:	64c3      	str	r3, [r0, #76]	; 0x4c
 8010800:	6503      	str	r3, [r0, #80]	; 0x50
 8010802:	4b12      	ldr	r3, [pc, #72]	; (801084c <__sinit+0x58>)
 8010804:	4a12      	ldr	r2, [pc, #72]	; (8010850 <__sinit+0x5c>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	6282      	str	r2, [r0, #40]	; 0x28
 801080a:	4298      	cmp	r0, r3
 801080c:	bf04      	itt	eq
 801080e:	2301      	moveq	r3, #1
 8010810:	6183      	streq	r3, [r0, #24]
 8010812:	f000 f81f 	bl	8010854 <__sfp>
 8010816:	6060      	str	r0, [r4, #4]
 8010818:	4620      	mov	r0, r4
 801081a:	f000 f81b 	bl	8010854 <__sfp>
 801081e:	60a0      	str	r0, [r4, #8]
 8010820:	4620      	mov	r0, r4
 8010822:	f000 f817 	bl	8010854 <__sfp>
 8010826:	2200      	movs	r2, #0
 8010828:	60e0      	str	r0, [r4, #12]
 801082a:	2104      	movs	r1, #4
 801082c:	6860      	ldr	r0, [r4, #4]
 801082e:	f7ff ffa7 	bl	8010780 <std.isra.0>
 8010832:	2201      	movs	r2, #1
 8010834:	2109      	movs	r1, #9
 8010836:	68a0      	ldr	r0, [r4, #8]
 8010838:	f7ff ffa2 	bl	8010780 <std.isra.0>
 801083c:	2202      	movs	r2, #2
 801083e:	2112      	movs	r1, #18
 8010840:	68e0      	ldr	r0, [r4, #12]
 8010842:	f7ff ff9d 	bl	8010780 <std.isra.0>
 8010846:	2301      	movs	r3, #1
 8010848:	61a3      	str	r3, [r4, #24]
 801084a:	bd10      	pop	{r4, pc}
 801084c:	080141fc 	.word	0x080141fc
 8010850:	08010775 	.word	0x08010775

08010854 <__sfp>:
 8010854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010856:	4b1c      	ldr	r3, [pc, #112]	; (80108c8 <__sfp+0x74>)
 8010858:	681e      	ldr	r6, [r3, #0]
 801085a:	69b3      	ldr	r3, [r6, #24]
 801085c:	4607      	mov	r7, r0
 801085e:	b913      	cbnz	r3, 8010866 <__sfp+0x12>
 8010860:	4630      	mov	r0, r6
 8010862:	f7ff ffc7 	bl	80107f4 <__sinit>
 8010866:	3648      	adds	r6, #72	; 0x48
 8010868:	68b4      	ldr	r4, [r6, #8]
 801086a:	6873      	ldr	r3, [r6, #4]
 801086c:	3b01      	subs	r3, #1
 801086e:	d503      	bpl.n	8010878 <__sfp+0x24>
 8010870:	6833      	ldr	r3, [r6, #0]
 8010872:	b133      	cbz	r3, 8010882 <__sfp+0x2e>
 8010874:	6836      	ldr	r6, [r6, #0]
 8010876:	e7f7      	b.n	8010868 <__sfp+0x14>
 8010878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801087c:	b16d      	cbz	r5, 801089a <__sfp+0x46>
 801087e:	3468      	adds	r4, #104	; 0x68
 8010880:	e7f4      	b.n	801086c <__sfp+0x18>
 8010882:	2104      	movs	r1, #4
 8010884:	4638      	mov	r0, r7
 8010886:	f7ff ff9f 	bl	80107c8 <__sfmoreglue>
 801088a:	6030      	str	r0, [r6, #0]
 801088c:	2800      	cmp	r0, #0
 801088e:	d1f1      	bne.n	8010874 <__sfp+0x20>
 8010890:	230c      	movs	r3, #12
 8010892:	603b      	str	r3, [r7, #0]
 8010894:	4604      	mov	r4, r0
 8010896:	4620      	mov	r0, r4
 8010898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801089a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801089e:	81e3      	strh	r3, [r4, #14]
 80108a0:	2301      	movs	r3, #1
 80108a2:	81a3      	strh	r3, [r4, #12]
 80108a4:	6665      	str	r5, [r4, #100]	; 0x64
 80108a6:	6025      	str	r5, [r4, #0]
 80108a8:	60a5      	str	r5, [r4, #8]
 80108aa:	6065      	str	r5, [r4, #4]
 80108ac:	6125      	str	r5, [r4, #16]
 80108ae:	6165      	str	r5, [r4, #20]
 80108b0:	61a5      	str	r5, [r4, #24]
 80108b2:	2208      	movs	r2, #8
 80108b4:	4629      	mov	r1, r5
 80108b6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80108ba:	f000 f88e 	bl	80109da <memset>
 80108be:	6365      	str	r5, [r4, #52]	; 0x34
 80108c0:	63a5      	str	r5, [r4, #56]	; 0x38
 80108c2:	64a5      	str	r5, [r4, #72]	; 0x48
 80108c4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80108c6:	e7e6      	b.n	8010896 <__sfp+0x42>
 80108c8:	080141fc 	.word	0x080141fc

080108cc <_fwalk_reent>:
 80108cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108d0:	4680      	mov	r8, r0
 80108d2:	4689      	mov	r9, r1
 80108d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80108d8:	2600      	movs	r6, #0
 80108da:	b914      	cbnz	r4, 80108e2 <_fwalk_reent+0x16>
 80108dc:	4630      	mov	r0, r6
 80108de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108e2:	68a5      	ldr	r5, [r4, #8]
 80108e4:	6867      	ldr	r7, [r4, #4]
 80108e6:	3f01      	subs	r7, #1
 80108e8:	d501      	bpl.n	80108ee <_fwalk_reent+0x22>
 80108ea:	6824      	ldr	r4, [r4, #0]
 80108ec:	e7f5      	b.n	80108da <_fwalk_reent+0xe>
 80108ee:	89ab      	ldrh	r3, [r5, #12]
 80108f0:	2b01      	cmp	r3, #1
 80108f2:	d907      	bls.n	8010904 <_fwalk_reent+0x38>
 80108f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80108f8:	3301      	adds	r3, #1
 80108fa:	d003      	beq.n	8010904 <_fwalk_reent+0x38>
 80108fc:	4629      	mov	r1, r5
 80108fe:	4640      	mov	r0, r8
 8010900:	47c8      	blx	r9
 8010902:	4306      	orrs	r6, r0
 8010904:	3568      	adds	r5, #104	; 0x68
 8010906:	e7ee      	b.n	80108e6 <_fwalk_reent+0x1a>

08010908 <__libc_init_array>:
 8010908:	b570      	push	{r4, r5, r6, lr}
 801090a:	4e0d      	ldr	r6, [pc, #52]	; (8010940 <__libc_init_array+0x38>)
 801090c:	4c0d      	ldr	r4, [pc, #52]	; (8010944 <__libc_init_array+0x3c>)
 801090e:	1ba4      	subs	r4, r4, r6
 8010910:	10a4      	asrs	r4, r4, #2
 8010912:	2500      	movs	r5, #0
 8010914:	42a5      	cmp	r5, r4
 8010916:	d109      	bne.n	801092c <__libc_init_array+0x24>
 8010918:	4e0b      	ldr	r6, [pc, #44]	; (8010948 <__libc_init_array+0x40>)
 801091a:	4c0c      	ldr	r4, [pc, #48]	; (801094c <__libc_init_array+0x44>)
 801091c:	f000 fd92 	bl	8011444 <_init>
 8010920:	1ba4      	subs	r4, r4, r6
 8010922:	10a4      	asrs	r4, r4, #2
 8010924:	2500      	movs	r5, #0
 8010926:	42a5      	cmp	r5, r4
 8010928:	d105      	bne.n	8010936 <__libc_init_array+0x2e>
 801092a:	bd70      	pop	{r4, r5, r6, pc}
 801092c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010930:	4798      	blx	r3
 8010932:	3501      	adds	r5, #1
 8010934:	e7ee      	b.n	8010914 <__libc_init_array+0xc>
 8010936:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801093a:	4798      	blx	r3
 801093c:	3501      	adds	r5, #1
 801093e:	e7f2      	b.n	8010926 <__libc_init_array+0x1e>
 8010940:	08014340 	.word	0x08014340
 8010944:	08014340 	.word	0x08014340
 8010948:	08014340 	.word	0x08014340
 801094c:	08014344 	.word	0x08014344

08010950 <__locale_ctype_ptr>:
 8010950:	4b04      	ldr	r3, [pc, #16]	; (8010964 <__locale_ctype_ptr+0x14>)
 8010952:	4a05      	ldr	r2, [pc, #20]	; (8010968 <__locale_ctype_ptr+0x18>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	6a1b      	ldr	r3, [r3, #32]
 8010958:	2b00      	cmp	r3, #0
 801095a:	bf08      	it	eq
 801095c:	4613      	moveq	r3, r2
 801095e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8010962:	4770      	bx	lr
 8010964:	2000000c 	.word	0x2000000c
 8010968:	20000070 	.word	0x20000070

0801096c <__ascii_mbtowc>:
 801096c:	b082      	sub	sp, #8
 801096e:	b901      	cbnz	r1, 8010972 <__ascii_mbtowc+0x6>
 8010970:	a901      	add	r1, sp, #4
 8010972:	b142      	cbz	r2, 8010986 <__ascii_mbtowc+0x1a>
 8010974:	b14b      	cbz	r3, 801098a <__ascii_mbtowc+0x1e>
 8010976:	7813      	ldrb	r3, [r2, #0]
 8010978:	600b      	str	r3, [r1, #0]
 801097a:	7812      	ldrb	r2, [r2, #0]
 801097c:	1c10      	adds	r0, r2, #0
 801097e:	bf18      	it	ne
 8010980:	2001      	movne	r0, #1
 8010982:	b002      	add	sp, #8
 8010984:	4770      	bx	lr
 8010986:	4610      	mov	r0, r2
 8010988:	e7fb      	b.n	8010982 <__ascii_mbtowc+0x16>
 801098a:	f06f 0001 	mvn.w	r0, #1
 801098e:	e7f8      	b.n	8010982 <__ascii_mbtowc+0x16>

08010990 <memcpy>:
 8010990:	b510      	push	{r4, lr}
 8010992:	1e43      	subs	r3, r0, #1
 8010994:	440a      	add	r2, r1
 8010996:	4291      	cmp	r1, r2
 8010998:	d100      	bne.n	801099c <memcpy+0xc>
 801099a:	bd10      	pop	{r4, pc}
 801099c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80109a4:	e7f7      	b.n	8010996 <memcpy+0x6>

080109a6 <memmove>:
 80109a6:	4288      	cmp	r0, r1
 80109a8:	b510      	push	{r4, lr}
 80109aa:	eb01 0302 	add.w	r3, r1, r2
 80109ae:	d803      	bhi.n	80109b8 <memmove+0x12>
 80109b0:	1e42      	subs	r2, r0, #1
 80109b2:	4299      	cmp	r1, r3
 80109b4:	d10c      	bne.n	80109d0 <memmove+0x2a>
 80109b6:	bd10      	pop	{r4, pc}
 80109b8:	4298      	cmp	r0, r3
 80109ba:	d2f9      	bcs.n	80109b0 <memmove+0xa>
 80109bc:	1881      	adds	r1, r0, r2
 80109be:	1ad2      	subs	r2, r2, r3
 80109c0:	42d3      	cmn	r3, r2
 80109c2:	d100      	bne.n	80109c6 <memmove+0x20>
 80109c4:	bd10      	pop	{r4, pc}
 80109c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80109ca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80109ce:	e7f7      	b.n	80109c0 <memmove+0x1a>
 80109d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80109d8:	e7eb      	b.n	80109b2 <memmove+0xc>

080109da <memset>:
 80109da:	4402      	add	r2, r0
 80109dc:	4603      	mov	r3, r0
 80109de:	4293      	cmp	r3, r2
 80109e0:	d100      	bne.n	80109e4 <memset+0xa>
 80109e2:	4770      	bx	lr
 80109e4:	f803 1b01 	strb.w	r1, [r3], #1
 80109e8:	e7f9      	b.n	80109de <memset+0x4>
	...

080109ec <_free_r>:
 80109ec:	b538      	push	{r3, r4, r5, lr}
 80109ee:	4605      	mov	r5, r0
 80109f0:	2900      	cmp	r1, #0
 80109f2:	d045      	beq.n	8010a80 <_free_r+0x94>
 80109f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109f8:	1f0c      	subs	r4, r1, #4
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	bfb8      	it	lt
 80109fe:	18e4      	addlt	r4, r4, r3
 8010a00:	f000 f9f6 	bl	8010df0 <__malloc_lock>
 8010a04:	4a1f      	ldr	r2, [pc, #124]	; (8010a84 <_free_r+0x98>)
 8010a06:	6813      	ldr	r3, [r2, #0]
 8010a08:	4610      	mov	r0, r2
 8010a0a:	b933      	cbnz	r3, 8010a1a <_free_r+0x2e>
 8010a0c:	6063      	str	r3, [r4, #4]
 8010a0e:	6014      	str	r4, [r2, #0]
 8010a10:	4628      	mov	r0, r5
 8010a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a16:	f000 b9ec 	b.w	8010df2 <__malloc_unlock>
 8010a1a:	42a3      	cmp	r3, r4
 8010a1c:	d90c      	bls.n	8010a38 <_free_r+0x4c>
 8010a1e:	6821      	ldr	r1, [r4, #0]
 8010a20:	1862      	adds	r2, r4, r1
 8010a22:	4293      	cmp	r3, r2
 8010a24:	bf04      	itt	eq
 8010a26:	681a      	ldreq	r2, [r3, #0]
 8010a28:	685b      	ldreq	r3, [r3, #4]
 8010a2a:	6063      	str	r3, [r4, #4]
 8010a2c:	bf04      	itt	eq
 8010a2e:	1852      	addeq	r2, r2, r1
 8010a30:	6022      	streq	r2, [r4, #0]
 8010a32:	6004      	str	r4, [r0, #0]
 8010a34:	e7ec      	b.n	8010a10 <_free_r+0x24>
 8010a36:	4613      	mov	r3, r2
 8010a38:	685a      	ldr	r2, [r3, #4]
 8010a3a:	b10a      	cbz	r2, 8010a40 <_free_r+0x54>
 8010a3c:	42a2      	cmp	r2, r4
 8010a3e:	d9fa      	bls.n	8010a36 <_free_r+0x4a>
 8010a40:	6819      	ldr	r1, [r3, #0]
 8010a42:	1858      	adds	r0, r3, r1
 8010a44:	42a0      	cmp	r0, r4
 8010a46:	d10b      	bne.n	8010a60 <_free_r+0x74>
 8010a48:	6820      	ldr	r0, [r4, #0]
 8010a4a:	4401      	add	r1, r0
 8010a4c:	1858      	adds	r0, r3, r1
 8010a4e:	4282      	cmp	r2, r0
 8010a50:	6019      	str	r1, [r3, #0]
 8010a52:	d1dd      	bne.n	8010a10 <_free_r+0x24>
 8010a54:	6810      	ldr	r0, [r2, #0]
 8010a56:	6852      	ldr	r2, [r2, #4]
 8010a58:	605a      	str	r2, [r3, #4]
 8010a5a:	4401      	add	r1, r0
 8010a5c:	6019      	str	r1, [r3, #0]
 8010a5e:	e7d7      	b.n	8010a10 <_free_r+0x24>
 8010a60:	d902      	bls.n	8010a68 <_free_r+0x7c>
 8010a62:	230c      	movs	r3, #12
 8010a64:	602b      	str	r3, [r5, #0]
 8010a66:	e7d3      	b.n	8010a10 <_free_r+0x24>
 8010a68:	6820      	ldr	r0, [r4, #0]
 8010a6a:	1821      	adds	r1, r4, r0
 8010a6c:	428a      	cmp	r2, r1
 8010a6e:	bf04      	itt	eq
 8010a70:	6811      	ldreq	r1, [r2, #0]
 8010a72:	6852      	ldreq	r2, [r2, #4]
 8010a74:	6062      	str	r2, [r4, #4]
 8010a76:	bf04      	itt	eq
 8010a78:	1809      	addeq	r1, r1, r0
 8010a7a:	6021      	streq	r1, [r4, #0]
 8010a7c:	605c      	str	r4, [r3, #4]
 8010a7e:	e7c7      	b.n	8010a10 <_free_r+0x24>
 8010a80:	bd38      	pop	{r3, r4, r5, pc}
 8010a82:	bf00      	nop
 8010a84:	20000408 	.word	0x20000408

08010a88 <_malloc_r>:
 8010a88:	b570      	push	{r4, r5, r6, lr}
 8010a8a:	1ccd      	adds	r5, r1, #3
 8010a8c:	f025 0503 	bic.w	r5, r5, #3
 8010a90:	3508      	adds	r5, #8
 8010a92:	2d0c      	cmp	r5, #12
 8010a94:	bf38      	it	cc
 8010a96:	250c      	movcc	r5, #12
 8010a98:	2d00      	cmp	r5, #0
 8010a9a:	4606      	mov	r6, r0
 8010a9c:	db01      	blt.n	8010aa2 <_malloc_r+0x1a>
 8010a9e:	42a9      	cmp	r1, r5
 8010aa0:	d903      	bls.n	8010aaa <_malloc_r+0x22>
 8010aa2:	230c      	movs	r3, #12
 8010aa4:	6033      	str	r3, [r6, #0]
 8010aa6:	2000      	movs	r0, #0
 8010aa8:	bd70      	pop	{r4, r5, r6, pc}
 8010aaa:	f000 f9a1 	bl	8010df0 <__malloc_lock>
 8010aae:	4a23      	ldr	r2, [pc, #140]	; (8010b3c <_malloc_r+0xb4>)
 8010ab0:	6814      	ldr	r4, [r2, #0]
 8010ab2:	4621      	mov	r1, r4
 8010ab4:	b991      	cbnz	r1, 8010adc <_malloc_r+0x54>
 8010ab6:	4c22      	ldr	r4, [pc, #136]	; (8010b40 <_malloc_r+0xb8>)
 8010ab8:	6823      	ldr	r3, [r4, #0]
 8010aba:	b91b      	cbnz	r3, 8010ac4 <_malloc_r+0x3c>
 8010abc:	4630      	mov	r0, r6
 8010abe:	f000 f841 	bl	8010b44 <_sbrk_r>
 8010ac2:	6020      	str	r0, [r4, #0]
 8010ac4:	4629      	mov	r1, r5
 8010ac6:	4630      	mov	r0, r6
 8010ac8:	f000 f83c 	bl	8010b44 <_sbrk_r>
 8010acc:	1c43      	adds	r3, r0, #1
 8010ace:	d126      	bne.n	8010b1e <_malloc_r+0x96>
 8010ad0:	230c      	movs	r3, #12
 8010ad2:	6033      	str	r3, [r6, #0]
 8010ad4:	4630      	mov	r0, r6
 8010ad6:	f000 f98c 	bl	8010df2 <__malloc_unlock>
 8010ada:	e7e4      	b.n	8010aa6 <_malloc_r+0x1e>
 8010adc:	680b      	ldr	r3, [r1, #0]
 8010ade:	1b5b      	subs	r3, r3, r5
 8010ae0:	d41a      	bmi.n	8010b18 <_malloc_r+0x90>
 8010ae2:	2b0b      	cmp	r3, #11
 8010ae4:	d90f      	bls.n	8010b06 <_malloc_r+0x7e>
 8010ae6:	600b      	str	r3, [r1, #0]
 8010ae8:	50cd      	str	r5, [r1, r3]
 8010aea:	18cc      	adds	r4, r1, r3
 8010aec:	4630      	mov	r0, r6
 8010aee:	f000 f980 	bl	8010df2 <__malloc_unlock>
 8010af2:	f104 000b 	add.w	r0, r4, #11
 8010af6:	1d23      	adds	r3, r4, #4
 8010af8:	f020 0007 	bic.w	r0, r0, #7
 8010afc:	1ac3      	subs	r3, r0, r3
 8010afe:	d01b      	beq.n	8010b38 <_malloc_r+0xb0>
 8010b00:	425a      	negs	r2, r3
 8010b02:	50e2      	str	r2, [r4, r3]
 8010b04:	bd70      	pop	{r4, r5, r6, pc}
 8010b06:	428c      	cmp	r4, r1
 8010b08:	bf0d      	iteet	eq
 8010b0a:	6863      	ldreq	r3, [r4, #4]
 8010b0c:	684b      	ldrne	r3, [r1, #4]
 8010b0e:	6063      	strne	r3, [r4, #4]
 8010b10:	6013      	streq	r3, [r2, #0]
 8010b12:	bf18      	it	ne
 8010b14:	460c      	movne	r4, r1
 8010b16:	e7e9      	b.n	8010aec <_malloc_r+0x64>
 8010b18:	460c      	mov	r4, r1
 8010b1a:	6849      	ldr	r1, [r1, #4]
 8010b1c:	e7ca      	b.n	8010ab4 <_malloc_r+0x2c>
 8010b1e:	1cc4      	adds	r4, r0, #3
 8010b20:	f024 0403 	bic.w	r4, r4, #3
 8010b24:	42a0      	cmp	r0, r4
 8010b26:	d005      	beq.n	8010b34 <_malloc_r+0xac>
 8010b28:	1a21      	subs	r1, r4, r0
 8010b2a:	4630      	mov	r0, r6
 8010b2c:	f000 f80a 	bl	8010b44 <_sbrk_r>
 8010b30:	3001      	adds	r0, #1
 8010b32:	d0cd      	beq.n	8010ad0 <_malloc_r+0x48>
 8010b34:	6025      	str	r5, [r4, #0]
 8010b36:	e7d9      	b.n	8010aec <_malloc_r+0x64>
 8010b38:	bd70      	pop	{r4, r5, r6, pc}
 8010b3a:	bf00      	nop
 8010b3c:	20000408 	.word	0x20000408
 8010b40:	2000040c 	.word	0x2000040c

08010b44 <_sbrk_r>:
 8010b44:	b538      	push	{r3, r4, r5, lr}
 8010b46:	4c06      	ldr	r4, [pc, #24]	; (8010b60 <_sbrk_r+0x1c>)
 8010b48:	2300      	movs	r3, #0
 8010b4a:	4605      	mov	r5, r0
 8010b4c:	4608      	mov	r0, r1
 8010b4e:	6023      	str	r3, [r4, #0]
 8010b50:	f7ff fa6a 	bl	8010028 <_sbrk>
 8010b54:	1c43      	adds	r3, r0, #1
 8010b56:	d102      	bne.n	8010b5e <_sbrk_r+0x1a>
 8010b58:	6823      	ldr	r3, [r4, #0]
 8010b5a:	b103      	cbz	r3, 8010b5e <_sbrk_r+0x1a>
 8010b5c:	602b      	str	r3, [r5, #0]
 8010b5e:	bd38      	pop	{r3, r4, r5, pc}
 8010b60:	20001788 	.word	0x20001788

08010b64 <_raise_r>:
 8010b64:	291f      	cmp	r1, #31
 8010b66:	b538      	push	{r3, r4, r5, lr}
 8010b68:	4604      	mov	r4, r0
 8010b6a:	460d      	mov	r5, r1
 8010b6c:	d904      	bls.n	8010b78 <_raise_r+0x14>
 8010b6e:	2316      	movs	r3, #22
 8010b70:	6003      	str	r3, [r0, #0]
 8010b72:	f04f 30ff 	mov.w	r0, #4294967295
 8010b76:	bd38      	pop	{r3, r4, r5, pc}
 8010b78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010b7a:	b112      	cbz	r2, 8010b82 <_raise_r+0x1e>
 8010b7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010b80:	b94b      	cbnz	r3, 8010b96 <_raise_r+0x32>
 8010b82:	4620      	mov	r0, r4
 8010b84:	f000 f830 	bl	8010be8 <_getpid_r>
 8010b88:	462a      	mov	r2, r5
 8010b8a:	4601      	mov	r1, r0
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b92:	f000 b817 	b.w	8010bc4 <_kill_r>
 8010b96:	2b01      	cmp	r3, #1
 8010b98:	d00a      	beq.n	8010bb0 <_raise_r+0x4c>
 8010b9a:	1c59      	adds	r1, r3, #1
 8010b9c:	d103      	bne.n	8010ba6 <_raise_r+0x42>
 8010b9e:	2316      	movs	r3, #22
 8010ba0:	6003      	str	r3, [r0, #0]
 8010ba2:	2001      	movs	r0, #1
 8010ba4:	bd38      	pop	{r3, r4, r5, pc}
 8010ba6:	2400      	movs	r4, #0
 8010ba8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010bac:	4628      	mov	r0, r5
 8010bae:	4798      	blx	r3
 8010bb0:	2000      	movs	r0, #0
 8010bb2:	bd38      	pop	{r3, r4, r5, pc}

08010bb4 <raise>:
 8010bb4:	4b02      	ldr	r3, [pc, #8]	; (8010bc0 <raise+0xc>)
 8010bb6:	4601      	mov	r1, r0
 8010bb8:	6818      	ldr	r0, [r3, #0]
 8010bba:	f7ff bfd3 	b.w	8010b64 <_raise_r>
 8010bbe:	bf00      	nop
 8010bc0:	2000000c 	.word	0x2000000c

08010bc4 <_kill_r>:
 8010bc4:	b538      	push	{r3, r4, r5, lr}
 8010bc6:	4c07      	ldr	r4, [pc, #28]	; (8010be4 <_kill_r+0x20>)
 8010bc8:	2300      	movs	r3, #0
 8010bca:	4605      	mov	r5, r0
 8010bcc:	4608      	mov	r0, r1
 8010bce:	4611      	mov	r1, r2
 8010bd0:	6023      	str	r3, [r4, #0]
 8010bd2:	f7ff f9fd 	bl	800ffd0 <_kill>
 8010bd6:	1c43      	adds	r3, r0, #1
 8010bd8:	d102      	bne.n	8010be0 <_kill_r+0x1c>
 8010bda:	6823      	ldr	r3, [r4, #0]
 8010bdc:	b103      	cbz	r3, 8010be0 <_kill_r+0x1c>
 8010bde:	602b      	str	r3, [r5, #0]
 8010be0:	bd38      	pop	{r3, r4, r5, pc}
 8010be2:	bf00      	nop
 8010be4:	20001788 	.word	0x20001788

08010be8 <_getpid_r>:
 8010be8:	f7ff b9e4 	b.w	800ffb4 <_getpid>

08010bec <sniprintf>:
 8010bec:	b40c      	push	{r2, r3}
 8010bee:	b530      	push	{r4, r5, lr}
 8010bf0:	4b17      	ldr	r3, [pc, #92]	; (8010c50 <sniprintf+0x64>)
 8010bf2:	1e0c      	subs	r4, r1, #0
 8010bf4:	b09d      	sub	sp, #116	; 0x74
 8010bf6:	681d      	ldr	r5, [r3, #0]
 8010bf8:	da08      	bge.n	8010c0c <sniprintf+0x20>
 8010bfa:	238b      	movs	r3, #139	; 0x8b
 8010bfc:	602b      	str	r3, [r5, #0]
 8010bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8010c02:	b01d      	add	sp, #116	; 0x74
 8010c04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c08:	b002      	add	sp, #8
 8010c0a:	4770      	bx	lr
 8010c0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010c10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010c14:	bf14      	ite	ne
 8010c16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010c1a:	4623      	moveq	r3, r4
 8010c1c:	9304      	str	r3, [sp, #16]
 8010c1e:	9307      	str	r3, [sp, #28]
 8010c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010c24:	9002      	str	r0, [sp, #8]
 8010c26:	9006      	str	r0, [sp, #24]
 8010c28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010c2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010c2e:	ab21      	add	r3, sp, #132	; 0x84
 8010c30:	a902      	add	r1, sp, #8
 8010c32:	4628      	mov	r0, r5
 8010c34:	9301      	str	r3, [sp, #4]
 8010c36:	f000 f939 	bl	8010eac <_svfiprintf_r>
 8010c3a:	1c43      	adds	r3, r0, #1
 8010c3c:	bfbc      	itt	lt
 8010c3e:	238b      	movlt	r3, #139	; 0x8b
 8010c40:	602b      	strlt	r3, [r5, #0]
 8010c42:	2c00      	cmp	r4, #0
 8010c44:	d0dd      	beq.n	8010c02 <sniprintf+0x16>
 8010c46:	9b02      	ldr	r3, [sp, #8]
 8010c48:	2200      	movs	r2, #0
 8010c4a:	701a      	strb	r2, [r3, #0]
 8010c4c:	e7d9      	b.n	8010c02 <sniprintf+0x16>
 8010c4e:	bf00      	nop
 8010c50:	2000000c 	.word	0x2000000c

08010c54 <__sread>:
 8010c54:	b510      	push	{r4, lr}
 8010c56:	460c      	mov	r4, r1
 8010c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c5c:	f000 fbb0 	bl	80113c0 <_read_r>
 8010c60:	2800      	cmp	r0, #0
 8010c62:	bfab      	itete	ge
 8010c64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010c66:	89a3      	ldrhlt	r3, [r4, #12]
 8010c68:	181b      	addge	r3, r3, r0
 8010c6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010c6e:	bfac      	ite	ge
 8010c70:	6563      	strge	r3, [r4, #84]	; 0x54
 8010c72:	81a3      	strhlt	r3, [r4, #12]
 8010c74:	bd10      	pop	{r4, pc}

08010c76 <__swrite>:
 8010c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c7a:	461f      	mov	r7, r3
 8010c7c:	898b      	ldrh	r3, [r1, #12]
 8010c7e:	05db      	lsls	r3, r3, #23
 8010c80:	4605      	mov	r5, r0
 8010c82:	460c      	mov	r4, r1
 8010c84:	4616      	mov	r6, r2
 8010c86:	d505      	bpl.n	8010c94 <__swrite+0x1e>
 8010c88:	2302      	movs	r3, #2
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c90:	f000 f89c 	bl	8010dcc <_lseek_r>
 8010c94:	89a3      	ldrh	r3, [r4, #12]
 8010c96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010c9e:	81a3      	strh	r3, [r4, #12]
 8010ca0:	4632      	mov	r2, r6
 8010ca2:	463b      	mov	r3, r7
 8010ca4:	4628      	mov	r0, r5
 8010ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010caa:	f000 b86d 	b.w	8010d88 <_write_r>

08010cae <__sseek>:
 8010cae:	b510      	push	{r4, lr}
 8010cb0:	460c      	mov	r4, r1
 8010cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cb6:	f000 f889 	bl	8010dcc <_lseek_r>
 8010cba:	1c43      	adds	r3, r0, #1
 8010cbc:	89a3      	ldrh	r3, [r4, #12]
 8010cbe:	bf15      	itete	ne
 8010cc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8010cc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010cc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010cca:	81a3      	strheq	r3, [r4, #12]
 8010ccc:	bf18      	it	ne
 8010cce:	81a3      	strhne	r3, [r4, #12]
 8010cd0:	bd10      	pop	{r4, pc}

08010cd2 <__sclose>:
 8010cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cd6:	f000 b869 	b.w	8010dac <_close_r>

08010cda <strcpy>:
 8010cda:	4603      	mov	r3, r0
 8010cdc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ce0:	f803 2b01 	strb.w	r2, [r3], #1
 8010ce4:	2a00      	cmp	r2, #0
 8010ce6:	d1f9      	bne.n	8010cdc <strcpy+0x2>
 8010ce8:	4770      	bx	lr

08010cea <strncmp>:
 8010cea:	b510      	push	{r4, lr}
 8010cec:	b16a      	cbz	r2, 8010d0a <strncmp+0x20>
 8010cee:	3901      	subs	r1, #1
 8010cf0:	1884      	adds	r4, r0, r2
 8010cf2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010cf6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010cfa:	4293      	cmp	r3, r2
 8010cfc:	d103      	bne.n	8010d06 <strncmp+0x1c>
 8010cfe:	42a0      	cmp	r0, r4
 8010d00:	d001      	beq.n	8010d06 <strncmp+0x1c>
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d1f5      	bne.n	8010cf2 <strncmp+0x8>
 8010d06:	1a98      	subs	r0, r3, r2
 8010d08:	bd10      	pop	{r4, pc}
 8010d0a:	4610      	mov	r0, r2
 8010d0c:	bd10      	pop	{r4, pc}

08010d0e <strncpy>:
 8010d0e:	b570      	push	{r4, r5, r6, lr}
 8010d10:	4604      	mov	r4, r0
 8010d12:	b902      	cbnz	r2, 8010d16 <strncpy+0x8>
 8010d14:	bd70      	pop	{r4, r5, r6, pc}
 8010d16:	4623      	mov	r3, r4
 8010d18:	f811 5b01 	ldrb.w	r5, [r1], #1
 8010d1c:	f803 5b01 	strb.w	r5, [r3], #1
 8010d20:	1e56      	subs	r6, r2, #1
 8010d22:	b91d      	cbnz	r5, 8010d2c <strncpy+0x1e>
 8010d24:	4414      	add	r4, r2
 8010d26:	42a3      	cmp	r3, r4
 8010d28:	d103      	bne.n	8010d32 <strncpy+0x24>
 8010d2a:	bd70      	pop	{r4, r5, r6, pc}
 8010d2c:	461c      	mov	r4, r3
 8010d2e:	4632      	mov	r2, r6
 8010d30:	e7ef      	b.n	8010d12 <strncpy+0x4>
 8010d32:	f803 5b01 	strb.w	r5, [r3], #1
 8010d36:	e7f6      	b.n	8010d26 <strncpy+0x18>

08010d38 <strstr>:
 8010d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d3a:	7803      	ldrb	r3, [r0, #0]
 8010d3c:	b133      	cbz	r3, 8010d4c <strstr+0x14>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	4618      	mov	r0, r3
 8010d42:	1c5e      	adds	r6, r3, #1
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	b933      	cbnz	r3, 8010d56 <strstr+0x1e>
 8010d48:	4618      	mov	r0, r3
 8010d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d4c:	780b      	ldrb	r3, [r1, #0]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	bf18      	it	ne
 8010d52:	2000      	movne	r0, #0
 8010d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d56:	1e4d      	subs	r5, r1, #1
 8010d58:	1e44      	subs	r4, r0, #1
 8010d5a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8010d5e:	2a00      	cmp	r2, #0
 8010d60:	d0f3      	beq.n	8010d4a <strstr+0x12>
 8010d62:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8010d66:	4297      	cmp	r7, r2
 8010d68:	4633      	mov	r3, r6
 8010d6a:	d0f6      	beq.n	8010d5a <strstr+0x22>
 8010d6c:	e7e8      	b.n	8010d40 <strstr+0x8>

08010d6e <__ascii_wctomb>:
 8010d6e:	b149      	cbz	r1, 8010d84 <__ascii_wctomb+0x16>
 8010d70:	2aff      	cmp	r2, #255	; 0xff
 8010d72:	bf85      	ittet	hi
 8010d74:	238a      	movhi	r3, #138	; 0x8a
 8010d76:	6003      	strhi	r3, [r0, #0]
 8010d78:	700a      	strbls	r2, [r1, #0]
 8010d7a:	f04f 30ff 	movhi.w	r0, #4294967295
 8010d7e:	bf98      	it	ls
 8010d80:	2001      	movls	r0, #1
 8010d82:	4770      	bx	lr
 8010d84:	4608      	mov	r0, r1
 8010d86:	4770      	bx	lr

08010d88 <_write_r>:
 8010d88:	b538      	push	{r3, r4, r5, lr}
 8010d8a:	4c07      	ldr	r4, [pc, #28]	; (8010da8 <_write_r+0x20>)
 8010d8c:	4605      	mov	r5, r0
 8010d8e:	4608      	mov	r0, r1
 8010d90:	4611      	mov	r1, r2
 8010d92:	2200      	movs	r2, #0
 8010d94:	6022      	str	r2, [r4, #0]
 8010d96:	461a      	mov	r2, r3
 8010d98:	f7ff f932 	bl	8010000 <_write>
 8010d9c:	1c43      	adds	r3, r0, #1
 8010d9e:	d102      	bne.n	8010da6 <_write_r+0x1e>
 8010da0:	6823      	ldr	r3, [r4, #0]
 8010da2:	b103      	cbz	r3, 8010da6 <_write_r+0x1e>
 8010da4:	602b      	str	r3, [r5, #0]
 8010da6:	bd38      	pop	{r3, r4, r5, pc}
 8010da8:	20001788 	.word	0x20001788

08010dac <_close_r>:
 8010dac:	b538      	push	{r3, r4, r5, lr}
 8010dae:	4c06      	ldr	r4, [pc, #24]	; (8010dc8 <_close_r+0x1c>)
 8010db0:	2300      	movs	r3, #0
 8010db2:	4605      	mov	r5, r0
 8010db4:	4608      	mov	r0, r1
 8010db6:	6023      	str	r3, [r4, #0]
 8010db8:	f7ff f956 	bl	8010068 <_close>
 8010dbc:	1c43      	adds	r3, r0, #1
 8010dbe:	d102      	bne.n	8010dc6 <_close_r+0x1a>
 8010dc0:	6823      	ldr	r3, [r4, #0]
 8010dc2:	b103      	cbz	r3, 8010dc6 <_close_r+0x1a>
 8010dc4:	602b      	str	r3, [r5, #0]
 8010dc6:	bd38      	pop	{r3, r4, r5, pc}
 8010dc8:	20001788 	.word	0x20001788

08010dcc <_lseek_r>:
 8010dcc:	b538      	push	{r3, r4, r5, lr}
 8010dce:	4c07      	ldr	r4, [pc, #28]	; (8010dec <_lseek_r+0x20>)
 8010dd0:	4605      	mov	r5, r0
 8010dd2:	4608      	mov	r0, r1
 8010dd4:	4611      	mov	r1, r2
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	6022      	str	r2, [r4, #0]
 8010dda:	461a      	mov	r2, r3
 8010ddc:	f7ff f956 	bl	801008c <_lseek>
 8010de0:	1c43      	adds	r3, r0, #1
 8010de2:	d102      	bne.n	8010dea <_lseek_r+0x1e>
 8010de4:	6823      	ldr	r3, [r4, #0]
 8010de6:	b103      	cbz	r3, 8010dea <_lseek_r+0x1e>
 8010de8:	602b      	str	r3, [r5, #0]
 8010dea:	bd38      	pop	{r3, r4, r5, pc}
 8010dec:	20001788 	.word	0x20001788

08010df0 <__malloc_lock>:
 8010df0:	4770      	bx	lr

08010df2 <__malloc_unlock>:
 8010df2:	4770      	bx	lr

08010df4 <__ssputs_r>:
 8010df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010df8:	688e      	ldr	r6, [r1, #8]
 8010dfa:	429e      	cmp	r6, r3
 8010dfc:	4682      	mov	sl, r0
 8010dfe:	460c      	mov	r4, r1
 8010e00:	4691      	mov	r9, r2
 8010e02:	4698      	mov	r8, r3
 8010e04:	d835      	bhi.n	8010e72 <__ssputs_r+0x7e>
 8010e06:	898a      	ldrh	r2, [r1, #12]
 8010e08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010e0c:	d031      	beq.n	8010e72 <__ssputs_r+0x7e>
 8010e0e:	6825      	ldr	r5, [r4, #0]
 8010e10:	6909      	ldr	r1, [r1, #16]
 8010e12:	1a6f      	subs	r7, r5, r1
 8010e14:	6965      	ldr	r5, [r4, #20]
 8010e16:	2302      	movs	r3, #2
 8010e18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e1c:	fb95 f5f3 	sdiv	r5, r5, r3
 8010e20:	f108 0301 	add.w	r3, r8, #1
 8010e24:	443b      	add	r3, r7
 8010e26:	429d      	cmp	r5, r3
 8010e28:	bf38      	it	cc
 8010e2a:	461d      	movcc	r5, r3
 8010e2c:	0553      	lsls	r3, r2, #21
 8010e2e:	d531      	bpl.n	8010e94 <__ssputs_r+0xa0>
 8010e30:	4629      	mov	r1, r5
 8010e32:	f7ff fe29 	bl	8010a88 <_malloc_r>
 8010e36:	4606      	mov	r6, r0
 8010e38:	b950      	cbnz	r0, 8010e50 <__ssputs_r+0x5c>
 8010e3a:	230c      	movs	r3, #12
 8010e3c:	f8ca 3000 	str.w	r3, [sl]
 8010e40:	89a3      	ldrh	r3, [r4, #12]
 8010e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e46:	81a3      	strh	r3, [r4, #12]
 8010e48:	f04f 30ff 	mov.w	r0, #4294967295
 8010e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e50:	463a      	mov	r2, r7
 8010e52:	6921      	ldr	r1, [r4, #16]
 8010e54:	f7ff fd9c 	bl	8010990 <memcpy>
 8010e58:	89a3      	ldrh	r3, [r4, #12]
 8010e5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e62:	81a3      	strh	r3, [r4, #12]
 8010e64:	6126      	str	r6, [r4, #16]
 8010e66:	6165      	str	r5, [r4, #20]
 8010e68:	443e      	add	r6, r7
 8010e6a:	1bed      	subs	r5, r5, r7
 8010e6c:	6026      	str	r6, [r4, #0]
 8010e6e:	60a5      	str	r5, [r4, #8]
 8010e70:	4646      	mov	r6, r8
 8010e72:	4546      	cmp	r6, r8
 8010e74:	bf28      	it	cs
 8010e76:	4646      	movcs	r6, r8
 8010e78:	4632      	mov	r2, r6
 8010e7a:	4649      	mov	r1, r9
 8010e7c:	6820      	ldr	r0, [r4, #0]
 8010e7e:	f7ff fd92 	bl	80109a6 <memmove>
 8010e82:	68a3      	ldr	r3, [r4, #8]
 8010e84:	1b9b      	subs	r3, r3, r6
 8010e86:	60a3      	str	r3, [r4, #8]
 8010e88:	6823      	ldr	r3, [r4, #0]
 8010e8a:	441e      	add	r6, r3
 8010e8c:	6026      	str	r6, [r4, #0]
 8010e8e:	2000      	movs	r0, #0
 8010e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e94:	462a      	mov	r2, r5
 8010e96:	f000 faa5 	bl	80113e4 <_realloc_r>
 8010e9a:	4606      	mov	r6, r0
 8010e9c:	2800      	cmp	r0, #0
 8010e9e:	d1e1      	bne.n	8010e64 <__ssputs_r+0x70>
 8010ea0:	6921      	ldr	r1, [r4, #16]
 8010ea2:	4650      	mov	r0, sl
 8010ea4:	f7ff fda2 	bl	80109ec <_free_r>
 8010ea8:	e7c7      	b.n	8010e3a <__ssputs_r+0x46>
	...

08010eac <_svfiprintf_r>:
 8010eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eb0:	b09d      	sub	sp, #116	; 0x74
 8010eb2:	4680      	mov	r8, r0
 8010eb4:	9303      	str	r3, [sp, #12]
 8010eb6:	898b      	ldrh	r3, [r1, #12]
 8010eb8:	061c      	lsls	r4, r3, #24
 8010eba:	460d      	mov	r5, r1
 8010ebc:	4616      	mov	r6, r2
 8010ebe:	d50f      	bpl.n	8010ee0 <_svfiprintf_r+0x34>
 8010ec0:	690b      	ldr	r3, [r1, #16]
 8010ec2:	b96b      	cbnz	r3, 8010ee0 <_svfiprintf_r+0x34>
 8010ec4:	2140      	movs	r1, #64	; 0x40
 8010ec6:	f7ff fddf 	bl	8010a88 <_malloc_r>
 8010eca:	6028      	str	r0, [r5, #0]
 8010ecc:	6128      	str	r0, [r5, #16]
 8010ece:	b928      	cbnz	r0, 8010edc <_svfiprintf_r+0x30>
 8010ed0:	230c      	movs	r3, #12
 8010ed2:	f8c8 3000 	str.w	r3, [r8]
 8010ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8010eda:	e0c5      	b.n	8011068 <_svfiprintf_r+0x1bc>
 8010edc:	2340      	movs	r3, #64	; 0x40
 8010ede:	616b      	str	r3, [r5, #20]
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8010ee4:	2320      	movs	r3, #32
 8010ee6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010eea:	2330      	movs	r3, #48	; 0x30
 8010eec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ef0:	f04f 0b01 	mov.w	fp, #1
 8010ef4:	4637      	mov	r7, r6
 8010ef6:	463c      	mov	r4, r7
 8010ef8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d13c      	bne.n	8010f7a <_svfiprintf_r+0xce>
 8010f00:	ebb7 0a06 	subs.w	sl, r7, r6
 8010f04:	d00b      	beq.n	8010f1e <_svfiprintf_r+0x72>
 8010f06:	4653      	mov	r3, sl
 8010f08:	4632      	mov	r2, r6
 8010f0a:	4629      	mov	r1, r5
 8010f0c:	4640      	mov	r0, r8
 8010f0e:	f7ff ff71 	bl	8010df4 <__ssputs_r>
 8010f12:	3001      	adds	r0, #1
 8010f14:	f000 80a3 	beq.w	801105e <_svfiprintf_r+0x1b2>
 8010f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f1a:	4453      	add	r3, sl
 8010f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8010f1e:	783b      	ldrb	r3, [r7, #0]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	f000 809c 	beq.w	801105e <_svfiprintf_r+0x1b2>
 8010f26:	2300      	movs	r3, #0
 8010f28:	f04f 32ff 	mov.w	r2, #4294967295
 8010f2c:	9304      	str	r3, [sp, #16]
 8010f2e:	9307      	str	r3, [sp, #28]
 8010f30:	9205      	str	r2, [sp, #20]
 8010f32:	9306      	str	r3, [sp, #24]
 8010f34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f38:	931a      	str	r3, [sp, #104]	; 0x68
 8010f3a:	2205      	movs	r2, #5
 8010f3c:	7821      	ldrb	r1, [r4, #0]
 8010f3e:	4850      	ldr	r0, [pc, #320]	; (8011080 <_svfiprintf_r+0x1d4>)
 8010f40:	f7ef f95e 	bl	8000200 <memchr>
 8010f44:	1c67      	adds	r7, r4, #1
 8010f46:	9b04      	ldr	r3, [sp, #16]
 8010f48:	b9d8      	cbnz	r0, 8010f82 <_svfiprintf_r+0xd6>
 8010f4a:	06d9      	lsls	r1, r3, #27
 8010f4c:	bf44      	itt	mi
 8010f4e:	2220      	movmi	r2, #32
 8010f50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010f54:	071a      	lsls	r2, r3, #28
 8010f56:	bf44      	itt	mi
 8010f58:	222b      	movmi	r2, #43	; 0x2b
 8010f5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010f5e:	7822      	ldrb	r2, [r4, #0]
 8010f60:	2a2a      	cmp	r2, #42	; 0x2a
 8010f62:	d016      	beq.n	8010f92 <_svfiprintf_r+0xe6>
 8010f64:	9a07      	ldr	r2, [sp, #28]
 8010f66:	2100      	movs	r1, #0
 8010f68:	200a      	movs	r0, #10
 8010f6a:	4627      	mov	r7, r4
 8010f6c:	3401      	adds	r4, #1
 8010f6e:	783b      	ldrb	r3, [r7, #0]
 8010f70:	3b30      	subs	r3, #48	; 0x30
 8010f72:	2b09      	cmp	r3, #9
 8010f74:	d951      	bls.n	801101a <_svfiprintf_r+0x16e>
 8010f76:	b1c9      	cbz	r1, 8010fac <_svfiprintf_r+0x100>
 8010f78:	e011      	b.n	8010f9e <_svfiprintf_r+0xf2>
 8010f7a:	2b25      	cmp	r3, #37	; 0x25
 8010f7c:	d0c0      	beq.n	8010f00 <_svfiprintf_r+0x54>
 8010f7e:	4627      	mov	r7, r4
 8010f80:	e7b9      	b.n	8010ef6 <_svfiprintf_r+0x4a>
 8010f82:	4a3f      	ldr	r2, [pc, #252]	; (8011080 <_svfiprintf_r+0x1d4>)
 8010f84:	1a80      	subs	r0, r0, r2
 8010f86:	fa0b f000 	lsl.w	r0, fp, r0
 8010f8a:	4318      	orrs	r0, r3
 8010f8c:	9004      	str	r0, [sp, #16]
 8010f8e:	463c      	mov	r4, r7
 8010f90:	e7d3      	b.n	8010f3a <_svfiprintf_r+0x8e>
 8010f92:	9a03      	ldr	r2, [sp, #12]
 8010f94:	1d11      	adds	r1, r2, #4
 8010f96:	6812      	ldr	r2, [r2, #0]
 8010f98:	9103      	str	r1, [sp, #12]
 8010f9a:	2a00      	cmp	r2, #0
 8010f9c:	db01      	blt.n	8010fa2 <_svfiprintf_r+0xf6>
 8010f9e:	9207      	str	r2, [sp, #28]
 8010fa0:	e004      	b.n	8010fac <_svfiprintf_r+0x100>
 8010fa2:	4252      	negs	r2, r2
 8010fa4:	f043 0302 	orr.w	r3, r3, #2
 8010fa8:	9207      	str	r2, [sp, #28]
 8010faa:	9304      	str	r3, [sp, #16]
 8010fac:	783b      	ldrb	r3, [r7, #0]
 8010fae:	2b2e      	cmp	r3, #46	; 0x2e
 8010fb0:	d10e      	bne.n	8010fd0 <_svfiprintf_r+0x124>
 8010fb2:	787b      	ldrb	r3, [r7, #1]
 8010fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8010fb6:	f107 0101 	add.w	r1, r7, #1
 8010fba:	d132      	bne.n	8011022 <_svfiprintf_r+0x176>
 8010fbc:	9b03      	ldr	r3, [sp, #12]
 8010fbe:	1d1a      	adds	r2, r3, #4
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	9203      	str	r2, [sp, #12]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	bfb8      	it	lt
 8010fc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8010fcc:	3702      	adds	r7, #2
 8010fce:	9305      	str	r3, [sp, #20]
 8010fd0:	4c2c      	ldr	r4, [pc, #176]	; (8011084 <_svfiprintf_r+0x1d8>)
 8010fd2:	7839      	ldrb	r1, [r7, #0]
 8010fd4:	2203      	movs	r2, #3
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	f7ef f912 	bl	8000200 <memchr>
 8010fdc:	b138      	cbz	r0, 8010fee <_svfiprintf_r+0x142>
 8010fde:	2340      	movs	r3, #64	; 0x40
 8010fe0:	1b00      	subs	r0, r0, r4
 8010fe2:	fa03 f000 	lsl.w	r0, r3, r0
 8010fe6:	9b04      	ldr	r3, [sp, #16]
 8010fe8:	4303      	orrs	r3, r0
 8010fea:	9304      	str	r3, [sp, #16]
 8010fec:	3701      	adds	r7, #1
 8010fee:	7839      	ldrb	r1, [r7, #0]
 8010ff0:	4825      	ldr	r0, [pc, #148]	; (8011088 <_svfiprintf_r+0x1dc>)
 8010ff2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010ff6:	2206      	movs	r2, #6
 8010ff8:	1c7e      	adds	r6, r7, #1
 8010ffa:	f7ef f901 	bl	8000200 <memchr>
 8010ffe:	2800      	cmp	r0, #0
 8011000:	d035      	beq.n	801106e <_svfiprintf_r+0x1c2>
 8011002:	4b22      	ldr	r3, [pc, #136]	; (801108c <_svfiprintf_r+0x1e0>)
 8011004:	b9fb      	cbnz	r3, 8011046 <_svfiprintf_r+0x19a>
 8011006:	9b03      	ldr	r3, [sp, #12]
 8011008:	3307      	adds	r3, #7
 801100a:	f023 0307 	bic.w	r3, r3, #7
 801100e:	3308      	adds	r3, #8
 8011010:	9303      	str	r3, [sp, #12]
 8011012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011014:	444b      	add	r3, r9
 8011016:	9309      	str	r3, [sp, #36]	; 0x24
 8011018:	e76c      	b.n	8010ef4 <_svfiprintf_r+0x48>
 801101a:	fb00 3202 	mla	r2, r0, r2, r3
 801101e:	2101      	movs	r1, #1
 8011020:	e7a3      	b.n	8010f6a <_svfiprintf_r+0xbe>
 8011022:	2300      	movs	r3, #0
 8011024:	9305      	str	r3, [sp, #20]
 8011026:	4618      	mov	r0, r3
 8011028:	240a      	movs	r4, #10
 801102a:	460f      	mov	r7, r1
 801102c:	3101      	adds	r1, #1
 801102e:	783a      	ldrb	r2, [r7, #0]
 8011030:	3a30      	subs	r2, #48	; 0x30
 8011032:	2a09      	cmp	r2, #9
 8011034:	d903      	bls.n	801103e <_svfiprintf_r+0x192>
 8011036:	2b00      	cmp	r3, #0
 8011038:	d0ca      	beq.n	8010fd0 <_svfiprintf_r+0x124>
 801103a:	9005      	str	r0, [sp, #20]
 801103c:	e7c8      	b.n	8010fd0 <_svfiprintf_r+0x124>
 801103e:	fb04 2000 	mla	r0, r4, r0, r2
 8011042:	2301      	movs	r3, #1
 8011044:	e7f1      	b.n	801102a <_svfiprintf_r+0x17e>
 8011046:	ab03      	add	r3, sp, #12
 8011048:	9300      	str	r3, [sp, #0]
 801104a:	462a      	mov	r2, r5
 801104c:	4b10      	ldr	r3, [pc, #64]	; (8011090 <_svfiprintf_r+0x1e4>)
 801104e:	a904      	add	r1, sp, #16
 8011050:	4640      	mov	r0, r8
 8011052:	f3af 8000 	nop.w
 8011056:	f1b0 3fff 	cmp.w	r0, #4294967295
 801105a:	4681      	mov	r9, r0
 801105c:	d1d9      	bne.n	8011012 <_svfiprintf_r+0x166>
 801105e:	89ab      	ldrh	r3, [r5, #12]
 8011060:	065b      	lsls	r3, r3, #25
 8011062:	f53f af38 	bmi.w	8010ed6 <_svfiprintf_r+0x2a>
 8011066:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011068:	b01d      	add	sp, #116	; 0x74
 801106a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801106e:	ab03      	add	r3, sp, #12
 8011070:	9300      	str	r3, [sp, #0]
 8011072:	462a      	mov	r2, r5
 8011074:	4b06      	ldr	r3, [pc, #24]	; (8011090 <_svfiprintf_r+0x1e4>)
 8011076:	a904      	add	r1, sp, #16
 8011078:	4640      	mov	r0, r8
 801107a:	f000 f881 	bl	8011180 <_printf_i>
 801107e:	e7ea      	b.n	8011056 <_svfiprintf_r+0x1aa>
 8011080:	0801430b 	.word	0x0801430b
 8011084:	08014311 	.word	0x08014311
 8011088:	08014315 	.word	0x08014315
 801108c:	00000000 	.word	0x00000000
 8011090:	08010df5 	.word	0x08010df5

08011094 <_printf_common>:
 8011094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011098:	4691      	mov	r9, r2
 801109a:	461f      	mov	r7, r3
 801109c:	688a      	ldr	r2, [r1, #8]
 801109e:	690b      	ldr	r3, [r1, #16]
 80110a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80110a4:	4293      	cmp	r3, r2
 80110a6:	bfb8      	it	lt
 80110a8:	4613      	movlt	r3, r2
 80110aa:	f8c9 3000 	str.w	r3, [r9]
 80110ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80110b2:	4606      	mov	r6, r0
 80110b4:	460c      	mov	r4, r1
 80110b6:	b112      	cbz	r2, 80110be <_printf_common+0x2a>
 80110b8:	3301      	adds	r3, #1
 80110ba:	f8c9 3000 	str.w	r3, [r9]
 80110be:	6823      	ldr	r3, [r4, #0]
 80110c0:	0699      	lsls	r1, r3, #26
 80110c2:	bf42      	ittt	mi
 80110c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80110c8:	3302      	addmi	r3, #2
 80110ca:	f8c9 3000 	strmi.w	r3, [r9]
 80110ce:	6825      	ldr	r5, [r4, #0]
 80110d0:	f015 0506 	ands.w	r5, r5, #6
 80110d4:	d107      	bne.n	80110e6 <_printf_common+0x52>
 80110d6:	f104 0a19 	add.w	sl, r4, #25
 80110da:	68e3      	ldr	r3, [r4, #12]
 80110dc:	f8d9 2000 	ldr.w	r2, [r9]
 80110e0:	1a9b      	subs	r3, r3, r2
 80110e2:	429d      	cmp	r5, r3
 80110e4:	db29      	blt.n	801113a <_printf_common+0xa6>
 80110e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80110ea:	6822      	ldr	r2, [r4, #0]
 80110ec:	3300      	adds	r3, #0
 80110ee:	bf18      	it	ne
 80110f0:	2301      	movne	r3, #1
 80110f2:	0692      	lsls	r2, r2, #26
 80110f4:	d42e      	bmi.n	8011154 <_printf_common+0xc0>
 80110f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80110fa:	4639      	mov	r1, r7
 80110fc:	4630      	mov	r0, r6
 80110fe:	47c0      	blx	r8
 8011100:	3001      	adds	r0, #1
 8011102:	d021      	beq.n	8011148 <_printf_common+0xb4>
 8011104:	6823      	ldr	r3, [r4, #0]
 8011106:	68e5      	ldr	r5, [r4, #12]
 8011108:	f8d9 2000 	ldr.w	r2, [r9]
 801110c:	f003 0306 	and.w	r3, r3, #6
 8011110:	2b04      	cmp	r3, #4
 8011112:	bf08      	it	eq
 8011114:	1aad      	subeq	r5, r5, r2
 8011116:	68a3      	ldr	r3, [r4, #8]
 8011118:	6922      	ldr	r2, [r4, #16]
 801111a:	bf0c      	ite	eq
 801111c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011120:	2500      	movne	r5, #0
 8011122:	4293      	cmp	r3, r2
 8011124:	bfc4      	itt	gt
 8011126:	1a9b      	subgt	r3, r3, r2
 8011128:	18ed      	addgt	r5, r5, r3
 801112a:	f04f 0900 	mov.w	r9, #0
 801112e:	341a      	adds	r4, #26
 8011130:	454d      	cmp	r5, r9
 8011132:	d11b      	bne.n	801116c <_printf_common+0xd8>
 8011134:	2000      	movs	r0, #0
 8011136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801113a:	2301      	movs	r3, #1
 801113c:	4652      	mov	r2, sl
 801113e:	4639      	mov	r1, r7
 8011140:	4630      	mov	r0, r6
 8011142:	47c0      	blx	r8
 8011144:	3001      	adds	r0, #1
 8011146:	d103      	bne.n	8011150 <_printf_common+0xbc>
 8011148:	f04f 30ff 	mov.w	r0, #4294967295
 801114c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011150:	3501      	adds	r5, #1
 8011152:	e7c2      	b.n	80110da <_printf_common+0x46>
 8011154:	18e1      	adds	r1, r4, r3
 8011156:	1c5a      	adds	r2, r3, #1
 8011158:	2030      	movs	r0, #48	; 0x30
 801115a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801115e:	4422      	add	r2, r4
 8011160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011168:	3302      	adds	r3, #2
 801116a:	e7c4      	b.n	80110f6 <_printf_common+0x62>
 801116c:	2301      	movs	r3, #1
 801116e:	4622      	mov	r2, r4
 8011170:	4639      	mov	r1, r7
 8011172:	4630      	mov	r0, r6
 8011174:	47c0      	blx	r8
 8011176:	3001      	adds	r0, #1
 8011178:	d0e6      	beq.n	8011148 <_printf_common+0xb4>
 801117a:	f109 0901 	add.w	r9, r9, #1
 801117e:	e7d7      	b.n	8011130 <_printf_common+0x9c>

08011180 <_printf_i>:
 8011180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011184:	4617      	mov	r7, r2
 8011186:	7e0a      	ldrb	r2, [r1, #24]
 8011188:	b085      	sub	sp, #20
 801118a:	2a6e      	cmp	r2, #110	; 0x6e
 801118c:	4698      	mov	r8, r3
 801118e:	4606      	mov	r6, r0
 8011190:	460c      	mov	r4, r1
 8011192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011194:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8011198:	f000 80bc 	beq.w	8011314 <_printf_i+0x194>
 801119c:	d81a      	bhi.n	80111d4 <_printf_i+0x54>
 801119e:	2a63      	cmp	r2, #99	; 0x63
 80111a0:	d02e      	beq.n	8011200 <_printf_i+0x80>
 80111a2:	d80a      	bhi.n	80111ba <_printf_i+0x3a>
 80111a4:	2a00      	cmp	r2, #0
 80111a6:	f000 80c8 	beq.w	801133a <_printf_i+0x1ba>
 80111aa:	2a58      	cmp	r2, #88	; 0x58
 80111ac:	f000 808a 	beq.w	80112c4 <_printf_i+0x144>
 80111b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111b4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80111b8:	e02a      	b.n	8011210 <_printf_i+0x90>
 80111ba:	2a64      	cmp	r2, #100	; 0x64
 80111bc:	d001      	beq.n	80111c2 <_printf_i+0x42>
 80111be:	2a69      	cmp	r2, #105	; 0x69
 80111c0:	d1f6      	bne.n	80111b0 <_printf_i+0x30>
 80111c2:	6821      	ldr	r1, [r4, #0]
 80111c4:	681a      	ldr	r2, [r3, #0]
 80111c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80111ca:	d023      	beq.n	8011214 <_printf_i+0x94>
 80111cc:	1d11      	adds	r1, r2, #4
 80111ce:	6019      	str	r1, [r3, #0]
 80111d0:	6813      	ldr	r3, [r2, #0]
 80111d2:	e027      	b.n	8011224 <_printf_i+0xa4>
 80111d4:	2a73      	cmp	r2, #115	; 0x73
 80111d6:	f000 80b4 	beq.w	8011342 <_printf_i+0x1c2>
 80111da:	d808      	bhi.n	80111ee <_printf_i+0x6e>
 80111dc:	2a6f      	cmp	r2, #111	; 0x6f
 80111de:	d02a      	beq.n	8011236 <_printf_i+0xb6>
 80111e0:	2a70      	cmp	r2, #112	; 0x70
 80111e2:	d1e5      	bne.n	80111b0 <_printf_i+0x30>
 80111e4:	680a      	ldr	r2, [r1, #0]
 80111e6:	f042 0220 	orr.w	r2, r2, #32
 80111ea:	600a      	str	r2, [r1, #0]
 80111ec:	e003      	b.n	80111f6 <_printf_i+0x76>
 80111ee:	2a75      	cmp	r2, #117	; 0x75
 80111f0:	d021      	beq.n	8011236 <_printf_i+0xb6>
 80111f2:	2a78      	cmp	r2, #120	; 0x78
 80111f4:	d1dc      	bne.n	80111b0 <_printf_i+0x30>
 80111f6:	2278      	movs	r2, #120	; 0x78
 80111f8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80111fc:	496e      	ldr	r1, [pc, #440]	; (80113b8 <_printf_i+0x238>)
 80111fe:	e064      	b.n	80112ca <_printf_i+0x14a>
 8011200:	681a      	ldr	r2, [r3, #0]
 8011202:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8011206:	1d11      	adds	r1, r2, #4
 8011208:	6019      	str	r1, [r3, #0]
 801120a:	6813      	ldr	r3, [r2, #0]
 801120c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011210:	2301      	movs	r3, #1
 8011212:	e0a3      	b.n	801135c <_printf_i+0x1dc>
 8011214:	f011 0f40 	tst.w	r1, #64	; 0x40
 8011218:	f102 0104 	add.w	r1, r2, #4
 801121c:	6019      	str	r1, [r3, #0]
 801121e:	d0d7      	beq.n	80111d0 <_printf_i+0x50>
 8011220:	f9b2 3000 	ldrsh.w	r3, [r2]
 8011224:	2b00      	cmp	r3, #0
 8011226:	da03      	bge.n	8011230 <_printf_i+0xb0>
 8011228:	222d      	movs	r2, #45	; 0x2d
 801122a:	425b      	negs	r3, r3
 801122c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011230:	4962      	ldr	r1, [pc, #392]	; (80113bc <_printf_i+0x23c>)
 8011232:	220a      	movs	r2, #10
 8011234:	e017      	b.n	8011266 <_printf_i+0xe6>
 8011236:	6820      	ldr	r0, [r4, #0]
 8011238:	6819      	ldr	r1, [r3, #0]
 801123a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801123e:	d003      	beq.n	8011248 <_printf_i+0xc8>
 8011240:	1d08      	adds	r0, r1, #4
 8011242:	6018      	str	r0, [r3, #0]
 8011244:	680b      	ldr	r3, [r1, #0]
 8011246:	e006      	b.n	8011256 <_printf_i+0xd6>
 8011248:	f010 0f40 	tst.w	r0, #64	; 0x40
 801124c:	f101 0004 	add.w	r0, r1, #4
 8011250:	6018      	str	r0, [r3, #0]
 8011252:	d0f7      	beq.n	8011244 <_printf_i+0xc4>
 8011254:	880b      	ldrh	r3, [r1, #0]
 8011256:	4959      	ldr	r1, [pc, #356]	; (80113bc <_printf_i+0x23c>)
 8011258:	2a6f      	cmp	r2, #111	; 0x6f
 801125a:	bf14      	ite	ne
 801125c:	220a      	movne	r2, #10
 801125e:	2208      	moveq	r2, #8
 8011260:	2000      	movs	r0, #0
 8011262:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8011266:	6865      	ldr	r5, [r4, #4]
 8011268:	60a5      	str	r5, [r4, #8]
 801126a:	2d00      	cmp	r5, #0
 801126c:	f2c0 809c 	blt.w	80113a8 <_printf_i+0x228>
 8011270:	6820      	ldr	r0, [r4, #0]
 8011272:	f020 0004 	bic.w	r0, r0, #4
 8011276:	6020      	str	r0, [r4, #0]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d13f      	bne.n	80112fc <_printf_i+0x17c>
 801127c:	2d00      	cmp	r5, #0
 801127e:	f040 8095 	bne.w	80113ac <_printf_i+0x22c>
 8011282:	4675      	mov	r5, lr
 8011284:	2a08      	cmp	r2, #8
 8011286:	d10b      	bne.n	80112a0 <_printf_i+0x120>
 8011288:	6823      	ldr	r3, [r4, #0]
 801128a:	07da      	lsls	r2, r3, #31
 801128c:	d508      	bpl.n	80112a0 <_printf_i+0x120>
 801128e:	6923      	ldr	r3, [r4, #16]
 8011290:	6862      	ldr	r2, [r4, #4]
 8011292:	429a      	cmp	r2, r3
 8011294:	bfde      	ittt	le
 8011296:	2330      	movle	r3, #48	; 0x30
 8011298:	f805 3c01 	strble.w	r3, [r5, #-1]
 801129c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80112a0:	ebae 0305 	sub.w	r3, lr, r5
 80112a4:	6123      	str	r3, [r4, #16]
 80112a6:	f8cd 8000 	str.w	r8, [sp]
 80112aa:	463b      	mov	r3, r7
 80112ac:	aa03      	add	r2, sp, #12
 80112ae:	4621      	mov	r1, r4
 80112b0:	4630      	mov	r0, r6
 80112b2:	f7ff feef 	bl	8011094 <_printf_common>
 80112b6:	3001      	adds	r0, #1
 80112b8:	d155      	bne.n	8011366 <_printf_i+0x1e6>
 80112ba:	f04f 30ff 	mov.w	r0, #4294967295
 80112be:	b005      	add	sp, #20
 80112c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112c4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80112c8:	493c      	ldr	r1, [pc, #240]	; (80113bc <_printf_i+0x23c>)
 80112ca:	6822      	ldr	r2, [r4, #0]
 80112cc:	6818      	ldr	r0, [r3, #0]
 80112ce:	f012 0f80 	tst.w	r2, #128	; 0x80
 80112d2:	f100 0504 	add.w	r5, r0, #4
 80112d6:	601d      	str	r5, [r3, #0]
 80112d8:	d001      	beq.n	80112de <_printf_i+0x15e>
 80112da:	6803      	ldr	r3, [r0, #0]
 80112dc:	e002      	b.n	80112e4 <_printf_i+0x164>
 80112de:	0655      	lsls	r5, r2, #25
 80112e0:	d5fb      	bpl.n	80112da <_printf_i+0x15a>
 80112e2:	8803      	ldrh	r3, [r0, #0]
 80112e4:	07d0      	lsls	r0, r2, #31
 80112e6:	bf44      	itt	mi
 80112e8:	f042 0220 	orrmi.w	r2, r2, #32
 80112ec:	6022      	strmi	r2, [r4, #0]
 80112ee:	b91b      	cbnz	r3, 80112f8 <_printf_i+0x178>
 80112f0:	6822      	ldr	r2, [r4, #0]
 80112f2:	f022 0220 	bic.w	r2, r2, #32
 80112f6:	6022      	str	r2, [r4, #0]
 80112f8:	2210      	movs	r2, #16
 80112fa:	e7b1      	b.n	8011260 <_printf_i+0xe0>
 80112fc:	4675      	mov	r5, lr
 80112fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8011302:	fb02 3310 	mls	r3, r2, r0, r3
 8011306:	5ccb      	ldrb	r3, [r1, r3]
 8011308:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801130c:	4603      	mov	r3, r0
 801130e:	2800      	cmp	r0, #0
 8011310:	d1f5      	bne.n	80112fe <_printf_i+0x17e>
 8011312:	e7b7      	b.n	8011284 <_printf_i+0x104>
 8011314:	6808      	ldr	r0, [r1, #0]
 8011316:	681a      	ldr	r2, [r3, #0]
 8011318:	6949      	ldr	r1, [r1, #20]
 801131a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801131e:	d004      	beq.n	801132a <_printf_i+0x1aa>
 8011320:	1d10      	adds	r0, r2, #4
 8011322:	6018      	str	r0, [r3, #0]
 8011324:	6813      	ldr	r3, [r2, #0]
 8011326:	6019      	str	r1, [r3, #0]
 8011328:	e007      	b.n	801133a <_printf_i+0x1ba>
 801132a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801132e:	f102 0004 	add.w	r0, r2, #4
 8011332:	6018      	str	r0, [r3, #0]
 8011334:	6813      	ldr	r3, [r2, #0]
 8011336:	d0f6      	beq.n	8011326 <_printf_i+0x1a6>
 8011338:	8019      	strh	r1, [r3, #0]
 801133a:	2300      	movs	r3, #0
 801133c:	6123      	str	r3, [r4, #16]
 801133e:	4675      	mov	r5, lr
 8011340:	e7b1      	b.n	80112a6 <_printf_i+0x126>
 8011342:	681a      	ldr	r2, [r3, #0]
 8011344:	1d11      	adds	r1, r2, #4
 8011346:	6019      	str	r1, [r3, #0]
 8011348:	6815      	ldr	r5, [r2, #0]
 801134a:	6862      	ldr	r2, [r4, #4]
 801134c:	2100      	movs	r1, #0
 801134e:	4628      	mov	r0, r5
 8011350:	f7ee ff56 	bl	8000200 <memchr>
 8011354:	b108      	cbz	r0, 801135a <_printf_i+0x1da>
 8011356:	1b40      	subs	r0, r0, r5
 8011358:	6060      	str	r0, [r4, #4]
 801135a:	6863      	ldr	r3, [r4, #4]
 801135c:	6123      	str	r3, [r4, #16]
 801135e:	2300      	movs	r3, #0
 8011360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011364:	e79f      	b.n	80112a6 <_printf_i+0x126>
 8011366:	6923      	ldr	r3, [r4, #16]
 8011368:	462a      	mov	r2, r5
 801136a:	4639      	mov	r1, r7
 801136c:	4630      	mov	r0, r6
 801136e:	47c0      	blx	r8
 8011370:	3001      	adds	r0, #1
 8011372:	d0a2      	beq.n	80112ba <_printf_i+0x13a>
 8011374:	6823      	ldr	r3, [r4, #0]
 8011376:	079b      	lsls	r3, r3, #30
 8011378:	d507      	bpl.n	801138a <_printf_i+0x20a>
 801137a:	2500      	movs	r5, #0
 801137c:	f104 0919 	add.w	r9, r4, #25
 8011380:	68e3      	ldr	r3, [r4, #12]
 8011382:	9a03      	ldr	r2, [sp, #12]
 8011384:	1a9b      	subs	r3, r3, r2
 8011386:	429d      	cmp	r5, r3
 8011388:	db05      	blt.n	8011396 <_printf_i+0x216>
 801138a:	68e0      	ldr	r0, [r4, #12]
 801138c:	9b03      	ldr	r3, [sp, #12]
 801138e:	4298      	cmp	r0, r3
 8011390:	bfb8      	it	lt
 8011392:	4618      	movlt	r0, r3
 8011394:	e793      	b.n	80112be <_printf_i+0x13e>
 8011396:	2301      	movs	r3, #1
 8011398:	464a      	mov	r2, r9
 801139a:	4639      	mov	r1, r7
 801139c:	4630      	mov	r0, r6
 801139e:	47c0      	blx	r8
 80113a0:	3001      	adds	r0, #1
 80113a2:	d08a      	beq.n	80112ba <_printf_i+0x13a>
 80113a4:	3501      	adds	r5, #1
 80113a6:	e7eb      	b.n	8011380 <_printf_i+0x200>
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d1a7      	bne.n	80112fc <_printf_i+0x17c>
 80113ac:	780b      	ldrb	r3, [r1, #0]
 80113ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80113b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80113b6:	e765      	b.n	8011284 <_printf_i+0x104>
 80113b8:	0801432d 	.word	0x0801432d
 80113bc:	0801431c 	.word	0x0801431c

080113c0 <_read_r>:
 80113c0:	b538      	push	{r3, r4, r5, lr}
 80113c2:	4c07      	ldr	r4, [pc, #28]	; (80113e0 <_read_r+0x20>)
 80113c4:	4605      	mov	r5, r0
 80113c6:	4608      	mov	r0, r1
 80113c8:	4611      	mov	r1, r2
 80113ca:	2200      	movs	r2, #0
 80113cc:	6022      	str	r2, [r4, #0]
 80113ce:	461a      	mov	r2, r3
 80113d0:	f7fe fe70 	bl	80100b4 <_read>
 80113d4:	1c43      	adds	r3, r0, #1
 80113d6:	d102      	bne.n	80113de <_read_r+0x1e>
 80113d8:	6823      	ldr	r3, [r4, #0]
 80113da:	b103      	cbz	r3, 80113de <_read_r+0x1e>
 80113dc:	602b      	str	r3, [r5, #0]
 80113de:	bd38      	pop	{r3, r4, r5, pc}
 80113e0:	20001788 	.word	0x20001788

080113e4 <_realloc_r>:
 80113e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113e6:	4607      	mov	r7, r0
 80113e8:	4614      	mov	r4, r2
 80113ea:	460e      	mov	r6, r1
 80113ec:	b921      	cbnz	r1, 80113f8 <_realloc_r+0x14>
 80113ee:	4611      	mov	r1, r2
 80113f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80113f4:	f7ff bb48 	b.w	8010a88 <_malloc_r>
 80113f8:	b922      	cbnz	r2, 8011404 <_realloc_r+0x20>
 80113fa:	f7ff faf7 	bl	80109ec <_free_r>
 80113fe:	4625      	mov	r5, r4
 8011400:	4628      	mov	r0, r5
 8011402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011404:	f000 f814 	bl	8011430 <_malloc_usable_size_r>
 8011408:	4284      	cmp	r4, r0
 801140a:	d90f      	bls.n	801142c <_realloc_r+0x48>
 801140c:	4621      	mov	r1, r4
 801140e:	4638      	mov	r0, r7
 8011410:	f7ff fb3a 	bl	8010a88 <_malloc_r>
 8011414:	4605      	mov	r5, r0
 8011416:	2800      	cmp	r0, #0
 8011418:	d0f2      	beq.n	8011400 <_realloc_r+0x1c>
 801141a:	4631      	mov	r1, r6
 801141c:	4622      	mov	r2, r4
 801141e:	f7ff fab7 	bl	8010990 <memcpy>
 8011422:	4631      	mov	r1, r6
 8011424:	4638      	mov	r0, r7
 8011426:	f7ff fae1 	bl	80109ec <_free_r>
 801142a:	e7e9      	b.n	8011400 <_realloc_r+0x1c>
 801142c:	4635      	mov	r5, r6
 801142e:	e7e7      	b.n	8011400 <_realloc_r+0x1c>

08011430 <_malloc_usable_size_r>:
 8011430:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8011434:	2800      	cmp	r0, #0
 8011436:	f1a0 0004 	sub.w	r0, r0, #4
 801143a:	bfbc      	itt	lt
 801143c:	580b      	ldrlt	r3, [r1, r0]
 801143e:	18c0      	addlt	r0, r0, r3
 8011440:	4770      	bx	lr
	...

08011444 <_init>:
 8011444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011446:	bf00      	nop
 8011448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801144a:	bc08      	pop	{r3}
 801144c:	469e      	mov	lr, r3
 801144e:	4770      	bx	lr

08011450 <_fini>:
 8011450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011452:	bf00      	nop
 8011454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011456:	bc08      	pop	{r3}
 8011458:	469e      	mov	lr, r3
 801145a:	4770      	bx	lr
